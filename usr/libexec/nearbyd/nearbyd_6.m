void sub_10035BF88(uint64_t *a1)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  int v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  NSObject *v22;
  unint64_t v23;
  uint64_t v24;
  double v25;
  NSObject *v26;
  unint64_t v27;
  uint64_t v28;
  double v29;
  NSObject *v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  unint64_t v43;
  double *v44;
  char *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  NSObject *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  int64x2_t *v65;
  uint64_t v66;
  uint64_t v67;
  __int128 v68;
  uint64_t v69[2];
  void *__p;
  void *v71;
  _BYTE buf[24];
  int v73;
  char v74;
  char v75;
  __int128 v76;
  uint64_t v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  uint64_t v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  _OWORD v88[2];

  if (a1[45] && a1[60])
  {
    v65 = (int64x2_t *)(a1 + 40);
    v64 = a1 + 55;
    v2 = a1[44];
    v3 = a1[41];
    v4 = a1[42];
    v5 = (_QWORD *)(v3 + 8 * (v2 / 0x1A));
    if (v4 == v3)
      v6 = 0;
    else
      v6 = *v5 + 152 * (v2 % 0x1A);
    v63 = (uint64_t)(a1 + 9);
    while (1)
    {
      if (v4 == v3)
      {
        v8 = 0;
      }
      else
      {
        v7 = a1[45] + a1[44];
        v8 = *(_QWORD *)(v3 + 8 * (v7 / 0x1A)) + 152 * (v7 % 0x1A);
      }
      if (v6 == v8)
        return;
      v9 = *(_OWORD *)v6;
      v10 = *(_DWORD *)(v6 + 24);
      v11 = *(_OWORD *)(v6 + 28);
      v12 = *(_OWORD *)(v6 + 44);
      v13 = *(_OWORD *)(v6 + 60);
      v14 = *(_OWORD *)(v6 + 92);
      v87 = *(_OWORD *)(v6 + 76);
      v88[0] = v14;
      *(_OWORD *)((char *)v88 + 12) = *(_OWORD *)(v6 + 104);
      v85 = v12;
      v86 = v13;
      v15 = *(_OWORD *)(v6 + 120);
      v83 = *(_OWORD *)(v6 + 136);
      v84 = v11;
      v82 = v15;
      v16 = a1[56];
      v17 = a1[59];
      v18 = (uint64_t *)(v16 + 8 * (v17 >> 7));
      v19 = *v18;
      v20 = *v18 + 32 * (v17 & 0x7F);
      v21 = *(double *)v20;
      if (*(double *)v20 - *(double *)&v9 > 0.21)
        break;
      v24 = a1[60];
      v25 = *(double *)(*(_QWORD *)(v16 + (((v17 + v24 - 1) >> 4) & 0xFFFFFFFFFFFFFF8)) + 32
                                                                                          * ((v17 + v24 - 1) & 0x7F));
      if (*(double *)&v9 - v25 <= 0.21)
      {
        if (a1[57] != v16)
        {
          v28 = *(_QWORD *)(v16 + (((v24 + v17) >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * ((v24 + v17) & 0x7F);
          if (v20 != v28)
          {
            v68 = v9;
            while (1)
            {
              v29 = *(double *)v20;
              v30 = qword_10085F520;
              if (vabdd_f64(*(double *)v20, *(double *)&v9) <= 0.21)
                break;
              if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)buf = 134218240;
                *(double *)&buf[4] = v29;
                *(_WORD *)&buf[12] = 2048;
                *(_QWORD *)&buf[14] = v68;
                _os_log_debug_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEBUG, "#sa_algo_moving_findee,Peer VIO position at %f s NOT matching with cached range measurement at %f s", buf, 0x16u);
                v19 = *v18;
              }
              v20 += 32;
              if (v20 - v19 == 4096)
              {
                v31 = v18[1];
                ++v18;
                v19 = v31;
                v20 = v31;
              }
              *(_QWORD *)&v9 = v68;
              if (v20 == v28)
                goto LABEL_29;
            }
            if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 134218240;
              *(double *)&buf[4] = v29;
              *(_WORD *)&buf[12] = 2048;
              *(_QWORD *)&buf[14] = v68;
              _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "#sa_algo_moving_findee,Peer VIO position at %f s matching with cached range measurement at %f s", buf, 0x16u);
            }
            v33 = a1[59];
            v34 = a1[56];
            v35 = a1[57];
            v36 = (char *)(v34 + 8 * (v33 >> 7));
            if (v35 == v34)
            {
              v37 = 0;
              v40 = 0;
              v39 = (char *)(v34 + 8 * ((a1[60] + v33) >> 7));
            }
            else
            {
              v37 = *(_QWORD *)v36 + 32 * (a1[59] & 0x7F);
              v38 = a1[60] + v33;
              v39 = (char *)(v34 + 8 * (v38 >> 7));
              v40 = *(_QWORD *)v39 + 32 * (v38 & 0x7F);
            }
            if (v40 == v37
              || (v41 = ((v40 - *(_QWORD *)v39) >> 5) + 16 * (v39 - v36) - ((v37 - *(_QWORD *)v36) >> 5)) == 0)
            {
              v42 = (char *)(v34 + 8 * (v33 >> 7));
            }
            else
            {
              v42 = (char *)(v34 + 8 * (v33 >> 7));
              do
              {
                v43 = v41 >> 1;
                if (v41 == 1)
                {
                  v44 = (double *)v37;
                  v45 = v42;
                }
                else
                {
                  v46 = v43 + ((v37 - *(_QWORD *)v42) >> 5);
                  if (v46 < 1)
                  {
                    v47 = 127 - v46;
                    LOBYTE(v46) = ~(127 - v46);
                    v45 = &v42[-8 * (v47 >> 7)];
                  }
                  else
                  {
                    v45 = &v42[8 * ((unint64_t)v46 >> 7)];
                  }
                  v44 = (double *)(*(_QWORD *)v45 + 32 * (v46 & 0x7F));
                }
                if (*v44 < *(double *)v20)
                {
                  v37 = (uint64_t)(v44 + 4);
                  if ((double *)((char *)v44 - *(_QWORD *)v45 + 32) == (double *)4096)
                  {
                    v48 = *((_QWORD *)v45 + 1);
                    v45 += 8;
                    v37 = v48;
                  }
                  v43 = v41 + ~v43;
                  v42 = v45;
                }
                v41 = v43;
              }
              while (v43);
            }
            if (v35 == v34)
              v49 = 0;
            else
              v49 = *(_QWORD *)v36 + 32 * (a1[59] & 0x7F);
            sub_10035E700(v64, v36, v49, v42, v37);
            v50 = a1[60];
            v51 = qword_10085F520;
            if (!v50)
            {
              if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_FAULT))
                sub_1003EFA40(v51, v56, v57, v58, v59, v60, v61, v62);
              return;
            }
            if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
            {
              v53 = a1[56];
              v54 = *(_QWORD *)(*(_QWORD *)(v53 + (((unint64_t)a1[59] >> 4) & 0xFFFFFFFFFFFFFF8))
                              + 32 * (a1[59] & 0x7F));
              v55 = *(_QWORD *)(*(_QWORD *)(v53 + (((unint64_t)(v50 + a1[59] - 1) >> 4) & 0xFFFFFFFFFFFFFF8))
                              + 32 * ((v50 + a1[59] - 1) & 0x7F));
              *(_DWORD *)buf = 134218240;
              *(_QWORD *)&buf[4] = v54;
              *(_WORD *)&buf[12] = 2048;
              *(_QWORD *)&buf[14] = v55;
              _os_log_debug_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_DEBUG, "#sa_algo_moving_findee,Peer VIO history from %f s to %f s after pruning", buf, 0x16u);
            }
            *(_OWORD *)buf = v68;
            *(_QWORD *)&buf[16] = 0x3FB999999999999ALL;
            v73 = v10;
            v74 = 0;
            v75 = 0;
            v76 = *(_OWORD *)((char *)v88 + 4);
            v77 = *(_QWORD *)((char *)&v88[1] + 4);
            v78 = v82;
            v79 = v83;
            v52 = *(_QWORD *)(v20 + 24);
            v80 = *(_OWORD *)(v20 + 8);
            v81 = v52;
            sub_1003149A4(a1[8], (uint64_t)buf, v69);
            sub_10030994C(v63, v69);
            if (__p)
            {
              v71 = __p;
              operator delete(__p);
            }
            goto LABEL_14;
          }
        }
LABEL_29:
        v6 += 152;
        if (v6 - *v5 == 3952)
        {
          v32 = v5[1];
          ++v5;
          v6 = v32;
        }
      }
      else
      {
        v67 = v9;
        v26 = qword_10085F520;
        if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 134218240;
          *(_QWORD *)&buf[4] = v67;
          *(_WORD *)&buf[12] = 2048;
          *(double *)&buf[14] = v25;
          _os_log_debug_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEBUG, "#sa_algo_moving_findee,Cached range measurement at %f s can't be matched with peer pose yet, last peer pose at %f", buf, 0x16u);
        }
        v6 += 152;
        if (v6 - *v5 == 3952)
        {
          v27 = v5[1];
          ++v5;
          v6 = v27;
        }
      }
LABEL_31:
      v3 = a1[41];
      v4 = a1[42];
    }
    v66 = v9;
    v22 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134218240;
      *(_QWORD *)&buf[4] = v66;
      *(_WORD *)&buf[12] = 2048;
      *(double *)&buf[14] = v21;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "#sa_algo_moving_findee,Cached range measurement at %f s can't be matched with peer pose (removed), first peer pose at %f", buf, 0x16u);
    }
LABEL_14:
    v5 = (_QWORD *)sub_10035E3E0(v65, v5, (char *)v6);
    v6 = v23;
    goto LABEL_31;
  }
}

void sub_10035C650(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10035C674(_QWORD *a1)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  double v6;
  NSObject *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  double v21;
  unint64_t v22;
  _QWORD *v23;
  double *v24;
  double *v25;
  double *v26;
  char *v27;
  uint64_t v28;
  NSObject *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE v33[22];

  v1 = a1[51];
  if (v1)
  {
    v3 = a1[50];
    v4 = a1[47];
    v5 = v3 >> 5;
    v6 = *(double *)(*(_QWORD *)(v4 + (((v1 + v3 - 1) >> 2) & 0x3FFFFFFFFFFFFFF8)) + (((v1 + v3 - 1) & 0x1F) << 7))
       - *(double *)(*(_QWORD *)(v4 + 8 * (v3 >> 5)) + ((v3 & 0x1F) << 7));
    if (v6 > 5.0)
    {
      v7 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)v33 = 134217984;
        *(double *)&v33[4] = v6;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#sa_algo_moving_findee,Pose history spans %f s - pruning down past poses from history", v33, 0xCu);
        v3 = a1[50];
        v1 = a1[51];
        v4 = a1[47];
        v5 = v3 >> 5;
      }
      v8 = v3 + v1;
      v9 = v3 + v1 - 1;
      v10 = *(_QWORD *)(v4 + ((v9 >> 2) & 0x3FFFFFFFFFFFFFF8));
      v11 = (v9 & 0x1F) << 7;
      v12 = (char *)(v4 + 8 * v5);
      v13 = a1[48];
      if (v13 == v4)
      {
        v14 = 0;
        v16 = 0;
        v15 = (char *)(v4 + 8 * (v8 >> 5));
      }
      else
      {
        v14 = *(_QWORD *)v12 + ((v3 & 0x1F) << 7);
        v15 = (char *)(v4 + 8 * (v8 >> 5));
        v16 = *(_QWORD *)v15 + ((v8 & 0x1F) << 7);
      }
      v17 = *(double *)(v10 + v11);
      *(_QWORD *)v33 = v4 + 8 * v5;
      *(_QWORD *)&v33[8] = v14;
      if (v16 != v14)
      {
        v18 = ((uint64_t)(v16 - *(_QWORD *)v15) >> 7) + 4 * (v15 - v12);
        v19 = v14 - *(_QWORD *)v12;
        v20 = v18 - (v19 >> 7);
        if (v18 != v19 >> 7)
        {
          v21 = v17 + -2.0;
          do
          {
            v22 = v20 >> 1;
            v23 = sub_10030ECFC((uint64_t)v33, v20 >> 1);
            if (v21 >= *v24)
            {
              v25 = v24 + 16;
              if ((double *)((char *)v24 - *v23 + 128) == (double *)4096)
              {
                v26 = (double *)v23[1];
                ++v23;
                v25 = v26;
              }
              *(_QWORD *)v33 = v23;
              *(_QWORD *)&v33[8] = v25;
              v22 = v20 + ~v22;
            }
            v20 = v22;
          }
          while (v22);
          v12 = *(char **)v33;
          v14 = *(_QWORD *)&v33[8];
          v3 = a1[50];
          v4 = a1[47];
          v13 = a1[48];
          v5 = v3 >> 5;
        }
      }
      v27 = (char *)(v4 + 8 * v5);
      if (v13 == v4)
        v28 = 0;
      else
        v28 = *(_QWORD *)v27 + ((v3 & 0x1F) << 7);
      sub_10030D388(a1 + 46, v27, v28, v12, v14);
      v29 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
      {
        v30 = a1[47];
        v31 = *(_QWORD *)(*(_QWORD *)(v30 + ((a1[50] >> 2) & 0x3FFFFFFFFFFFFFF8)) + ((a1[50] & 0x1FLL) << 7));
        v32 = *(_QWORD *)(*(_QWORD *)(v30 + (((unint64_t)(a1[50] + a1[51] - 1) >> 2) & 0x3FFFFFFFFFFFFFF8))
                        + (((a1[50] + a1[51] - 1) & 0x1F) << 7));
        *(_DWORD *)v33 = 134218240;
        *(_QWORD *)&v33[4] = v31;
        *(_WORD *)&v33[12] = 2048;
        *(_QWORD *)&v33[14] = v32;
        _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "#sa_algo_moving_findee,Pose history now between %f s and %f s", v33, 0x16u);
      }
    }
  }
}

void sub_10035C948(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  NSObject *v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  int v11;
  double v12;
  __int16 v13;
  _BYTE __p[10];
  uint64_t v15;
  __int16 v16;
  uint64_t v17;

  v4 = *(_QWORD *)(a1 + 480);
  if (v4
    && *(double *)a2 <= *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 448)
                                              + (((unint64_t)(v4 + *(_QWORD *)(a1 + 472) - 1) >> 4) & 0xFFFFFFFFFFFFFF8))
                                  + 32 * ((v4 + *(_QWORD *)(a1 + 472) - 1) & 0x7F)))
  {
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
      sub_1003EFA70();
  }
  else
  {
    v5 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
    {
      v6 = *(double *)a2;
      v7 = *(_QWORD *)(a2 + 8);
      v8 = *(_QWORD *)(a2 + 16);
      v9 = *(_QWORD *)(a2 + 24);
      v11 = 134218752;
      v12 = v6;
      v13 = 2048;
      *(_QWORD *)__p = v7;
      *(_WORD *)&__p[8] = 2048;
      v15 = v8;
      v16 = 2048;
      v17 = v9;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#sa_algo_moving_findee,Received peer pose at %f s, peer position:[%0.2f,%0.2f,%0.2f] m", (uint8_t *)&v11, 0x2Au);
    }
    v10 = *(double *)a2;
    if (!*(_BYTE *)(a1 + 24) || *(double *)(a1 + 16) < v10)
    {
      *(double *)(a1 + 16) = v10;
      *(_BYTE *)(a1 + 24) = 1;
      v10 = *(double *)a2;
    }
    sub_1003148CC(*(_QWORD *)(a1 + 64), (uint64_t)&v11, v10, *(double *)(a2 + 8), *(double *)(a2 + 16), *(double *)(a2 + 24));
    sub_10030994C(a1 + 72, (uint64_t *)&v11);
    if (*(_QWORD *)&__p[2])
    {
      v15 = *(_QWORD *)&__p[2];
      operator delete(*(void **)&__p[2]);
    }
    sub_10035CB1C((_QWORD *)(a1 + 440), a2);
    sub_10035BF88((uint64_t *)a1);
  }
}

void sub_10035CAF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

__n128 sub_10035CB1C(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _OWORD *v8;
  __n128 result;
  __int128 v10;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 16 * (v4 - v5) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_10035E934(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  v8 = (_OWORD *)(*(_QWORD *)(v5 + ((v7 >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * (v7 & 0x7F));
  result = *(__n128 *)a2;
  v10 = *(_OWORD *)(a2 + 16);
  *v8 = *(_OWORD *)a2;
  v8[1] = v10;
  ++a1[5];
  return result;
}

void sub_10035CBA8(uint64_t a1, __int128 *a2)
{
  int v4;
  uint64_t v5;
  _BOOL4 v6;
  uint64_t v7;
  double v8;
  double v9;
  double v10;
  const char *v11;
  NSObject *v12;
  uint32_t v13;
  uint64_t v14;
  double v15;
  double v16;
  NSObject *v17;
  const char *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  double v28;
  NSObject *v29;
  int v30;
  uint64_t v31;
  __int16 v32;
  double v33;
  __int16 v34;
  double v35;
  __int16 v36;
  double v37;

  v4 = *((unsigned __int8 *)a2 + 36);
  v5 = qword_10085F520;
  v6 = os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT);
  if (v4)
  {
    if (!v6)
      goto LABEL_7;
    v7 = *((_QWORD *)a2 + 1);
    v8 = *((float *)a2 + 4);
    v9 = *((float *)a2 + 6);
    v10 = *((float *)a2 + 7);
    v30 = 134218752;
    v31 = v7;
    v32 = 2048;
    v33 = v8;
    v34 = 2048;
    v35 = v9;
    v36 = 2048;
    v37 = v10;
    v11 = "#sa_algo_moving_findee,Received range result at %f s, distance: %0.2f m, az: %3.2f rad, el: %3.2f rad";
    v12 = v5;
    v13 = 42;
  }
  else
  {
    if (!v6)
      goto LABEL_7;
    v14 = *((_QWORD *)a2 + 1);
    v15 = *((float *)a2 + 4);
    v30 = 134218240;
    v31 = v14;
    v32 = 2048;
    v33 = v15;
    v11 = "#sa_algo_moving_findee,Received range result at %f s, distance: %0.2f m";
    v12 = v5;
    v13 = 22;
  }
  _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, v11, (uint8_t *)&v30, v13);
LABEL_7:
  if (!*(_BYTE *)(a1 + 8))
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_BYTE *)(a1 + 8) = 1;
  }
  if (*(_DWORD *)(a1 + 416) != 2)
  {
    v17 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v30) = 0;
      v18 = "#sa_algo_moving_findee,VIO Tracking is not normal";
      goto LABEL_18;
    }
LABEL_23:
    v28 = *((double *)a2 + 1);
    if (!*(_BYTE *)(a1 + 24) || *(double *)(a1 + 16) < v28)
    {
      *(double *)(a1 + 16) = v28;
      *(_BYTE *)(a1 + 24) = 1;
    }
    return;
  }
  if (!*(_QWORD *)(a1 + 408))
  {
    v17 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v30) = 0;
      v18 = "#sa_algo_moving_findee,Pose history is empty";
      goto LABEL_18;
    }
    goto LABEL_23;
  }
  v16 = *((double *)a2 + 1);
  if (v16 < *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 376) + ((*(_QWORD *)(a1 + 400) >> 2) & 0x3FFFFFFFFFFFFFF8))
                       + ((*(_QWORD *)(a1 + 400) & 0x1FLL) << 7)))
  {
    v17 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v30) = 0;
      v18 = "#sa_algo_moving_findee,Measurement earlier than the first pose in history";
LABEL_18:
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, v18, (uint8_t *)&v30, 2u);
      goto LABEL_23;
    }
    goto LABEL_23;
  }
  if (!*(_BYTE *)(a1 + 312))
  {
LABEL_22:
    v19 = *a2;
    v20 = a2[1];
    v21 = a2[3];
    *(_OWORD *)(a1 + 160) = a2[2];
    *(_OWORD *)(a1 + 176) = v21;
    *(_OWORD *)(a1 + 128) = v19;
    *(_OWORD *)(a1 + 144) = v20;
    v22 = a2[4];
    v23 = a2[5];
    v24 = a2[7];
    *(_OWORD *)(a1 + 224) = a2[6];
    *(_OWORD *)(a1 + 240) = v24;
    *(_OWORD *)(a1 + 192) = v22;
    *(_OWORD *)(a1 + 208) = v23;
    v25 = a2[8];
    v26 = a2[9];
    v27 = a2[10];
    *(_QWORD *)(a1 + 304) = *((_QWORD *)a2 + 22);
    *(_OWORD *)(a1 + 272) = v26;
    *(_OWORD *)(a1 + 288) = v27;
    *(_OWORD *)(a1 + 256) = v25;
    *(_BYTE *)(a1 + 312) = 1;
    sub_10035B8D0(a1);
    goto LABEL_23;
  }
  if (v16 > *(double *)(a1 + 136))
  {
    *(_BYTE *)(a1 + 312) = 0;
    goto LABEL_22;
  }
  v29 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v30) = 0;
    _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "#sa_algo_moving_findee,Measurement earlier than the cached measurement - rejecting range measurement", (uint8_t *)&v30, 2u);
  }
}

void sub_10035CEA0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  double v14;
  double v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  float v23;
  int v24;
  NSObject *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  double v41;
  _BOOL4 v42;
  int v44;
  float v45;
  NSObject *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  __int128 v54;
  int v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  _QWORD v60[2];
  void *__p;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  _BYTE v65[32];
  _BYTE buf[24];
  double v67;

  *(_OWORD *)(a2 + 352) = 0u;
  *(_OWORD *)(a2 + 368) = 0u;
  *(_OWORD *)(a2 + 320) = 0u;
  *(_OWORD *)(a2 + 336) = 0u;
  *(_OWORD *)(a2 + 288) = 0u;
  *(_OWORD *)(a2 + 304) = 0u;
  *(_OWORD *)(a2 + 256) = 0u;
  *(_OWORD *)(a2 + 272) = 0u;
  *(_OWORD *)(a2 + 224) = 0u;
  *(_OWORD *)(a2 + 240) = 0u;
  *(_OWORD *)(a2 + 192) = 0u;
  *(_OWORD *)(a2 + 208) = 0u;
  *(_OWORD *)(a2 + 160) = 0u;
  *(_OWORD *)(a2 + 176) = 0u;
  *(_OWORD *)(a2 + 128) = 0u;
  *(_OWORD *)(a2 + 144) = 0u;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 112) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  if (!*(_BYTE *)(a1 + 120))
  {
    *(_QWORD *)a2 = 0;
LABEL_5:
    sub_10035D554(a1, a2);
    return;
  }
  v4 = *(_QWORD *)(a1 + 77);
  v60[0] = *(_QWORD *)(a1 + 72);
  *(_QWORD *)((char *)v60 + 5) = v4;
  __p = 0;
  v62 = 0;
  v63 = 0;
  v5 = (uint64_t)sub_100318718(&__p, *(const void **)(a1 + 88), *(_QWORD *)(a1 + 96), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 96) - *(_QWORD *)(a1 + 88)) >> 6));
  v64 = *(_QWORD *)(a1 + 112);
  switch(LODWORD(v60[0]))
  {
    case 0:
    case 1:
    case 6:
      *(_DWORD *)a2 = 0;
      v6 = 1;
      goto LABEL_7;
    case 2:
    case 3:
      *(_DWORD *)a2 = 0;
      v6 = 256;
LABEL_7:
      *(_DWORD *)(a2 + 4) = v6;
      goto LABEL_8;
    case 4:
      *(_QWORD *)a2 = 0;
      goto LABEL_8;
    case 5:
      v8 = *(_QWORD *)(a1 + 480);
      if (!v8)
      {
        v25 = qword_10085F520;
        if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_FAULT))
          sub_1003EFAD4(v25, v26, v27, v28, v29, v30, v31, v32);
        goto LABEL_47;
      }
      v9 = *(_QWORD *)(a1 + 408);
      if (!v9)
      {
        v33 = qword_10085F520;
        if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_FAULT))
          sub_1003EFB04(v33, v34, v35, v36, v37, v38, v39, v40);
LABEL_47:
        *(_OWORD *)(a2 + 336) = 0u;
        *(_OWORD *)(a2 + 352) = 0u;
        *(_OWORD *)(a2 + 304) = 0u;
        *(_OWORD *)(a2 + 320) = 0u;
        *(_OWORD *)(a2 + 272) = 0u;
        *(_OWORD *)(a2 + 288) = 0u;
        *(_OWORD *)(a2 + 240) = 0u;
        *(_OWORD *)(a2 + 256) = 0u;
        *(_OWORD *)(a2 + 208) = 0u;
        *(_OWORD *)(a2 + 224) = 0u;
        *(_OWORD *)(a2 + 176) = 0u;
        *(_OWORD *)(a2 + 192) = 0u;
        *(_OWORD *)(a2 + 144) = 0u;
        *(_OWORD *)(a2 + 160) = 0u;
        *(_OWORD *)(a2 + 112) = 0u;
        *(_OWORD *)(a2 + 128) = 0u;
        *(_OWORD *)(a2 + 80) = 0u;
        *(_OWORD *)(a2 + 96) = 0u;
        *(_OWORD *)(a2 + 48) = 0u;
        *(_OWORD *)(a2 + 64) = 0u;
        *(_OWORD *)(a2 + 16) = 0u;
        *(_OWORD *)(a2 + 32) = 0u;
        *(_OWORD *)a2 = 0u;
        *(_OWORD *)(a2 + 366) = 0u;
        sub_10035D554(a1, a2);
        goto LABEL_48;
      }
      v10 = v9 + *(_QWORD *)(a1 + 400) - 1;
      v11 = *(_QWORD *)(a1 + 376);
      v12 = v10 >> 5;
      v13 = v10 & 0x1F;
      v14 = *(double *)(*(_QWORD *)(v11 + 8 * (v10 >> 5)) + (v13 << 7));
      v15 = *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 448)
                                  + (((unint64_t)(v8 + *(_QWORD *)(a1 + 472) - 1) >> 4) & 0xFFFFFFFFFFFFFF8))
                      + 32 * ((v8 + *(_QWORD *)(a1 + 472) - 1) & 0x7F));
      v16 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134218496;
        *(double *)&buf[4] = v14 - v15;
        *(_WORD *)&buf[12] = 2048;
        *(double *)&buf[14] = v14;
        *(_WORD *)&buf[22] = 2048;
        v67 = v15;
        _os_log_debug_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "#sa_algo_moving_findee,#stalePeerVIO Peer VIO is stale by %f s, last self pose time %f s, last peer pose time %f s", buf, 0x20u);
        v11 = *(_QWORD *)(a1 + 376);
        v56 = *(_QWORD *)(a1 + 408) + *(_QWORD *)(a1 + 400) - 1;
        v12 = v56 >> 5;
        v13 = v56 & 0x1F;
      }
      v17 = *((_QWORD *)__p + 2);
      *(_OWORD *)buf = *(_OWORD *)__p;
      *(_QWORD *)&buf[16] = v17;
      v57 = 0;
      v58 = 0;
      v59 = 0;
      sub_10030BEDC((float64x2_t *)buf, (float32x4_t *)(*(_QWORD *)(v11 + 8 * v12) + (v13 << 7)), (uint64_t)&v57);
      if (v14 - v15 >= 2.0)
      {
        v41 = sub_10035E030(v14 - v15, v18, (uint64_t)&v57);
        v42 = os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG);
        if (v41 < 22.5)
        {
          if (v42)
            sub_1003EFC78();
          goto LABEL_25;
        }
        if (v42)
          sub_1003EFCE0();
        sub_10035E0B0(a1, 1);
        *(_OWORD *)(a2 + 366) = 0u;
        *(_OWORD *)(a2 + 336) = 0u;
        *(_OWORD *)(a2 + 352) = 0u;
        *(_OWORD *)(a2 + 304) = 0u;
        *(_OWORD *)(a2 + 320) = 0u;
        *(_OWORD *)(a2 + 272) = 0u;
        *(_OWORD *)(a2 + 288) = 0u;
        *(_OWORD *)(a2 + 240) = 0u;
        *(_OWORD *)(a2 + 256) = 0u;
        *(_OWORD *)(a2 + 208) = 0u;
        *(_OWORD *)(a2 + 224) = 0u;
        *(_OWORD *)(a2 + 176) = 0u;
        *(_OWORD *)(a2 + 192) = 0u;
        *(_OWORD *)(a2 + 144) = 0u;
        *(_OWORD *)(a2 + 160) = 0u;
        *(_OWORD *)(a2 + 112) = 0u;
        *(_OWORD *)(a2 + 128) = 0u;
        *(_OWORD *)(a2 + 80) = 0u;
        *(_OWORD *)(a2 + 96) = 0u;
        *(_OWORD *)(a2 + 48) = 0u;
        *(_OWORD *)(a2 + 64) = 0u;
        *(_OWORD *)(a2 + 16) = 0u;
        *(_OWORD *)(a2 + 32) = 0u;
        *(_OWORD *)a2 = 0u;
        sub_10035D554(a1, a2);
LABEL_48:
        v7 = 0;
        goto LABEL_10;
      }
LABEL_25:
      sub_10035E0B0(a1, 0);
      v19 = qword_10085F520;
      v5 = os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG);
      if ((_DWORD)v5)
      {
        if (!*(_BYTE *)(a1 + 24))
          sub_10000BA44();
        sub_1003EFC20(a1, (float *)&v57, (uint64_t)v65, v19);
      }
      if (!*(_BYTE *)(a1 + 8) || !*(_BYTE *)(a1 + 24))
        sub_10000BA44();
      v20 = *(_QWORD *)a1;
      v21 = *(_QWORD *)(a1 + 16);
      v22 = v57;
      if (*(_BYTE *)(a2 + 192))
        *(_BYTE *)(a2 + 192) = 0;
      *(_QWORD *)(a2 + 8) = v20;
      *(_QWORD *)(a2 + 16) = v21;
      *(_DWORD *)(a2 + 24) = v22;
      *(_DWORD *)(a2 + 28) = 1;
      *(_BYTE *)(a2 + 56) = 0;
      *(_QWORD *)(a2 + 32) = 0;
      *(_QWORD *)(a2 + 40) = 0;
      *(_BYTE *)(a2 + 60) = 0;
      *(_BYTE *)(a2 + 64) = 0;
      *(_BYTE *)(a2 + 68) = 0;
      *(_QWORD *)(a2 + 72) = 0;
      *(_QWORD *)(a2 + 80) = 0;
      *(_WORD *)(a2 + 88) = 0;
      *(_OWORD *)(a2 + 96) = 0u;
      *(_OWORD *)(a2 + 112) = 0u;
      *(_QWORD *)(a2 + 128) = 0x200000000;
      *(_BYTE *)(a2 + 136) = 0;
      *(_BYTE *)(a2 + 160) = 0;
      *(_QWORD *)(a2 + 168) = 0;
      *(_QWORD *)(a2 + 176) = 0;
      *(_QWORD *)(a2 + 184) = 0;
      *(_BYTE *)(a2 + 192) = 1;
      v23 = *(float *)&v58;
      if (!*(_BYTE *)(a2 + 224))
        *(_BYTE *)(a2 + 224) = 1;
      *(double *)(a2 + 216) = v23;
      if ((_BYTE)v59)
      {
        *(double *)(a2 + 200) = *((float *)&v57 + 1) * 180.0 / 3.14159265;
        *(_BYTE *)(a2 + 208) = 1;
        *(_DWORD *)(a2 + 364) = 1;
        *(_BYTE *)(a2 + 368) = 1;
        v5 = os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG);
        if ((_DWORD)v5)
          sub_1003EFBB8();
      }
      if (!*(_BYTE *)(a1 + 120))
        sub_10000BA44();
      v24 = *(_DWORD *)(a1 + 80);
      switch(v24)
      {
        case 2:
          *(_DWORD *)a2 = 1;
          v45 = *((float *)&v58 + 1);
          if (!*(_BYTE *)(a2 + 248))
            *(_BYTE *)(a2 + 248) = 1;
          *(double *)(a2 + 240) = v45;
          v46 = qword_10085F520;
          v5 = os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG);
          if ((_DWORD)v5)
            sub_1003EFB34((uint64_t)buf, v46, v47, v48, v49, v50, v51, v52);
          *(float32x2_t *)&v54 = vcvt_f32_f64(*(float64x2_t *)buf);
          *(float *)&v53 = *(double *)&buf[16];
          *((_QWORD *)&v54 + 1) = __PAIR64__(*(unsigned int *)&buf[12], v53);
          if (!*(_BYTE *)(a2 + 304))
            *(_BYTE *)(a2 + 304) = 1;
          *(_OWORD *)(a2 + 288) = v54;
          if (*((float *)&v58 + 1) >= 2.5)
          {
            v55 = 2;
          }
          else if (*((float *)&v58 + 1) <= -2.5)
          {
            v55 = 3;
          }
          else
          {
            v55 = 1;
          }
          *(_DWORD *)(a2 + 232) = v55;
          break;
        case 1:
          if (*((float *)&v58 + 1) > -2.5 && *((float *)&v58 + 1) < 2.5)
            v44 = 1;
          else
            v44 = 4;
          *(_DWORD *)(a2 + 232) = v44;
          *(_DWORD *)a2 = 0;
          goto LABEL_62;
        case 0:
          *(_DWORD *)a2 = 0;
          *(_DWORD *)(a2 + 232) = 0;
LABEL_62:
          *(_BYTE *)(a2 + 6) = 1;
          break;
      }
LABEL_8:
      if (!*(_BYTE *)(a1 + 24))
        sub_10000BA44();
      sub_10035E1E8(v5, (_DWORD *)(a2 + 232));
      v7 = 1;
LABEL_10:
      if (__p)
      {
        v62 = __p;
        operator delete(__p);
      }
      if ((v7 & 1) != 0)
      {
        if (*(_BYTE *)(a2 + 192)
          && !*(_DWORD *)a2
          && *(_DWORD *)(a1 + 416) != 2
          && *(_BYTE *)(a1 + 432)
          && *(double *)(a1 + 424) < 500.0)
        {
          *(_BYTE *)(a2 + 7) = 1;
        }
        goto LABEL_5;
      }
      return;
    default:
      goto LABEL_8;
  }
}

void sub_10035D520(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10035D554(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  double v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  const char *v12;
  uint64_t v13;
  uint64_t *v14;
  const char *v15;
  uint64_t v16;
  uint64_t *v17;
  const char *v18;
  uint64_t v19;
  uint64_t *v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t *v26;
  const char *v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t *v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  const char *v36;
  const char *v37;
  const char *v38;
  const char *v39;
  const char *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *p_p;
  uint64_t v48;
  uint64_t v49;
  const char *v50;
  NSObject *v51;
  void *v52;
  void *v53;
  void *__p;
  char v55;
  void *v56;
  char v57;
  void *v58;
  char v59;
  void *v60;
  char v61;
  void *v62;
  char v63;
  void *v64;
  char v65;
  void *v66;
  char v67;
  void *v68;
  char v69;
  uint64_t v70;
  _QWORD v71[10];
  char v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD v75[10];
  char v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD v79[10];
  char v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD v83[10];
  char v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD v87[10];
  char v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD v91[10];
  char v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD v95[10];
  char v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD v99[10];
  char v100;
  uint64_t v101;
  uint8_t buf[4];
  void *v103;
  __int16 v104;
  uint64_t v105;
  __int16 v106;
  const char *v107;
  __int16 v108;
  const char *v109;
  __int16 v110;
  const char *v111;
  __int16 v112;
  const char *v113;
  __int16 v114;
  const char *v115;
  __int16 v116;
  void *v117;
  __int16 v118;
  void *v119;
  __int16 v120;
  void *v121;
  __int16 v122;
  void *v123;
  __int16 v124;
  void *v125;
  __int16 v126;
  void *v127;
  __int16 v128;
  void *v129;

  if (!*(_BYTE *)(result + 24))
    return result;
  v3 = result;
  v4 = *(double *)(result + 16);
  if (*(_BYTE *)(result + 56))
  {
    if (v4 - *(double *)(result + 48) < 0.2)
      return result;
  }
  *(double *)(result + 48) = v4;
  *(_BYTE *)(result + 56) = 1;
  sub_100210A10((uint64_t)&v98);
  sub_100210A10((uint64_t)&v94);
  sub_100210A10((uint64_t)&v90);
  sub_100210A10((uint64_t)&v86);
  sub_100210A10((uint64_t)&v82);
  sub_100210A10((uint64_t)&v78);
  sub_100210A10((uint64_t)&v74);
  sub_100210A10((uint64_t)&v70);
  v5 = v94;
  *(_DWORD *)((char *)v95 + *(_QWORD *)(v94 - 24)) = *(_DWORD *)((_BYTE *)v95 + *(_QWORD *)(v94 - 24)) & 0xFFFFFEFB | 4;
  *(_QWORD *)((char *)&v95[1] + *(_QWORD *)(v5 - 24)) = 2;
  v6 = v90;
  *(_DWORD *)((char *)v91 + *(_QWORD *)(v90 - 24)) = *(_DWORD *)((_BYTE *)v91 + *(_QWORD *)(v90 - 24)) & 0xFFFFFEFB | 4;
  *(_QWORD *)((char *)&v91[1] + *(_QWORD *)(v6 - 24)) = 1;
  v7 = v86;
  *(_DWORD *)((char *)v87 + *(_QWORD *)(v86 - 24)) = *(_DWORD *)((_BYTE *)v87 + *(_QWORD *)(v86 - 24)) & 0xFFFFFEFB | 4;
  *(_QWORD *)((char *)&v87[1] + *(_QWORD *)(v7 - 24)) = 2;
  v8 = v78;
  *(_DWORD *)((char *)v79 + *(_QWORD *)(v78 - 24)) = *(_DWORD *)((_BYTE *)v79 + *(_QWORD *)(v78 - 24)) & 0xFFFFFEFB | 4;
  *(_QWORD *)((char *)&v79[1] + *(_QWORD *)(v8 - 24)) = 2;
  v9 = v74;
  *(_DWORD *)((char *)v75 + *(_QWORD *)(v74 - 24)) = *(_DWORD *)((_BYTE *)v75 + *(_QWORD *)(v74 - 24)) & 0xFFFFFEFB | 4;
  *(_QWORD *)((char *)&v75[1] + *(_QWORD *)(v9 - 24)) = 2;
  v10 = v70;
  *(_DWORD *)((char *)v71 + *(_QWORD *)(v70 - 24)) = *(_DWORD *)((_BYTE *)v71 + *(_QWORD *)(v70 - 24)) & 0xFFFFFEFB | 4;
  *(_QWORD *)((char *)&v71[1] + *(_QWORD *)(v10 - 24)) = 2;
  if (*(_BYTE *)(a2 + 192))
  {
    std::ostream::operator<<(&v98, *(_QWORD *)(a2 + 8));
    if (!*(_BYTE *)(a2 + 192))
      goto LABEL_104;
    v11 = (uint64_t *)std::ostream::operator<<(*(float *)(a2 + 24));
    v12 = " m";
    v13 = 2;
  }
  else
  {
    v12 = "-";
    v13 = 1;
    sub_100054C60(&v98, (uint64_t)"-", 1);
    v11 = &v94;
  }
  sub_100054C60(v11, (uint64_t)v12, v13);
  if (*(_BYTE *)(a2 + 208))
  {
    v14 = (uint64_t *)std::ostream::operator<<(&v90);
    v15 = " deg";
    v16 = 4;
  }
  else
  {
    v15 = "-";
    v14 = &v90;
    v16 = 1;
  }
  sub_100054C60(v14, (uint64_t)v15, v16);
  if (*(_BYTE *)(a2 + 224))
  {
    v17 = (uint64_t *)std::ostream::operator<<(&v86);
    v18 = " m";
    v19 = 2;
  }
  else
  {
    v18 = "-";
    v17 = &v86;
    v19 = 1;
  }
  sub_100054C60(v17, (uint64_t)v18, v19);
  if (*(_BYTE *)(a2 + 248))
  {
    v20 = (uint64_t *)std::ostream::operator<<(&v78);
    v21 = " m";
    v22 = 2;
  }
  else
  {
    v21 = "-";
    v20 = &v78;
    v22 = 1;
  }
  sub_100054C60(v20, (uint64_t)v21, v22);
  v23 = *(int *)(a2 + 232);
  if (v23 <= 4)
    sub_100054C60(&v82, (uint64_t)(&off_100816BE8)[v23], qword_10047B7A8[v23]);
  if (*(_BYTE *)(a2 + 272))
  {
    sub_100054C60(&v74, (uint64_t)"[", 1);
    if (!*(_BYTE *)(a2 + 272))
      goto LABEL_104;
    v24 = (_QWORD *)std::ostream::operator<<(*(float *)(a2 + 256));
    sub_100054C60(v24, (uint64_t)", ", 2);
    if (!*(_BYTE *)(a2 + 272))
      goto LABEL_104;
    v25 = (_QWORD *)std::ostream::operator<<(*(float *)(a2 + 260));
    sub_100054C60(v25, (uint64_t)", ", 2);
    if (!*(_BYTE *)(a2 + 272))
      goto LABEL_104;
    v26 = (uint64_t *)std::ostream::operator<<(*(float *)(a2 + 264));
    v27 = "]";
  }
  else
  {
    v27 = "-";
    v26 = &v74;
  }
  sub_100054C60(v26, (uint64_t)v27, 1);
  if (!*(_BYTE *)(a2 + 304))
  {
    v31 = "-";
    v30 = &v70;
    v32 = 1;
    goto LABEL_31;
  }
  sub_100054C60(&v70, (uint64_t)"[", 1);
  if (!*(_BYTE *)(a2 + 304)
    || (v28 = (_QWORD *)std::ostream::operator<<(*(float *)(a2 + 288)),
        sub_100054C60(v28, (uint64_t)", ", 2),
        !*(_BYTE *)(a2 + 304))
    || (v29 = (_QWORD *)std::ostream::operator<<(*(float *)(a2 + 292)),
        sub_100054C60(v29, (uint64_t)", ", 2),
        !*(_BYTE *)(a2 + 304)))
  {
LABEL_104:
    sub_10000BA44();
  }
  v30 = (uint64_t *)std::ostream::operator<<(*(float *)(a2 + 296));
  v31 = "] m";
  v32 = 3;
LABEL_31:
  sub_100054C60(v30, (uint64_t)v31, v32);
  v33 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    std::stringbuf::str(v99);
    if (v69 >= 0)
      v34 = &v68;
    else
      v34 = v68;
    if (!*(_BYTE *)(v3 + 24))
      sub_10000BA44();
    v35 = *(_QWORD *)(v3 + 16);
    if (*(_DWORD *)a2 == 1)
      v36 = "YES";
    else
      v36 = "NO";
    if (*(_BYTE *)(a2 + 4))
      v37 = "YES";
    else
      v37 = "NO";
    if (*(_BYTE *)(a2 + 5))
      v38 = "YES";
    else
      v38 = "NO";
    if (*(_BYTE *)(a2 + 6))
      v39 = "YES";
    else
      v39 = "NO";
    if (*(_BYTE *)(a2 + 7))
      v40 = "YES";
    else
      v40 = "NO";
    std::stringbuf::str(v95);
    if (v67 >= 0)
      v41 = &v66;
    else
      v41 = v66;
    std::stringbuf::str(v91);
    if (v65 >= 0)
      v42 = &v64;
    else
      v42 = v64;
    v53 = v42;
    std::stringbuf::str(v87);
    if (v63 >= 0)
      v43 = &v62;
    else
      v43 = v62;
    v51 = v33;
    v52 = v43;
    std::stringbuf::str(v79);
    v50 = v39;
    if (v61 >= 0)
      v44 = &v60;
    else
      v44 = v60;
    v45 = &v58;
    std::stringbuf::str(v83);
    if (v59 < 0)
      v45 = v58;
    std::stringbuf::str(v75);
    std::stringbuf::str(v71);
    v46 = &v56;
    if (v57 < 0)
      v46 = v56;
    if (v55 >= 0)
      p_p = &__p;
    else
      p_p = __p;
    *(_DWORD *)buf = 136318466;
    v103 = v34;
    v104 = 2048;
    v105 = v35;
    v106 = 2080;
    v107 = v36;
    v108 = 2080;
    v109 = v37;
    v110 = 2080;
    v111 = v38;
    v112 = 2080;
    v113 = v50;
    v114 = 2080;
    v115 = v40;
    v116 = 2080;
    v117 = v41;
    v118 = 2080;
    v119 = v53;
    v120 = 2080;
    v121 = v52;
    v122 = 2080;
    v123 = v44;
    v124 = 2080;
    v125 = v45;
    v126 = 2080;
    v127 = v46;
    v128 = 2080;
    v129 = p_p;
    _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_DEFAULT, "#sa_algo_moving_findee,DeviceID: %s\n\tTimestamp: %f\n\tSolution convergence: %s, insufficientDisplacement: %s, insufficientHorizontalPositionDiversity: %s, insufficientVerticalPositionDiversity: %s, insufficientLighting: %s\n\tRange: %s, Horizontal angle: %s, Horizontal distance: %s, Vertical distance: %s, Vertical state: %s, Direction: %s, World Position: %s", buf, 0x8Eu);
    if (v55 < 0)
      operator delete(__p);
    if (v57 < 0)
      operator delete(v56);
    if (v59 < 0)
      operator delete(v58);
    if (v61 < 0)
      operator delete(v60);
    if (v63 < 0)
      operator delete(v62);
    if (v65 < 0)
      operator delete(v64);
    if (v67 < 0)
      operator delete(v66);
    if (v69 < 0)
      operator delete(v68);
  }
  if (v72 < 0)
    operator delete((void *)v71[8]);
  std::streambuf::~streambuf(v71);
  std::ios::~ios(&v73);
  v74 = v48;
  *(_QWORD *)((char *)&v75[-1] + *(_QWORD *)(v48 - 24)) = v49;
  if (v76 < 0)
    operator delete((void *)v75[8]);
  std::streambuf::~streambuf(v75);
  std::ios::~ios(&v77);
  v78 = v48;
  *(_QWORD *)((char *)&v79[-1] + *(_QWORD *)(v48 - 24)) = v49;
  if (v80 < 0)
    operator delete((void *)v79[8]);
  std::streambuf::~streambuf(v79);
  std::ios::~ios(&v81);
  v82 = v48;
  *(_QWORD *)((char *)&v83[-1] + *(_QWORD *)(v48 - 24)) = v49;
  if (v84 < 0)
    operator delete((void *)v83[8]);
  std::streambuf::~streambuf(v83);
  std::ios::~ios(&v85);
  v86 = v48;
  *(_QWORD *)((char *)&v87[-1] + *(_QWORD *)(v48 - 24)) = v49;
  if (v88 < 0)
    operator delete((void *)v87[8]);
  std::streambuf::~streambuf(v87);
  std::ios::~ios(&v89);
  v90 = v48;
  *(_QWORD *)((char *)&v91[-1] + *(_QWORD *)(v48 - 24)) = v49;
  if (v92 < 0)
    operator delete((void *)v91[8]);
  std::streambuf::~streambuf(v91);
  std::ios::~ios(&v93);
  v94 = v48;
  *(_QWORD *)((char *)&v95[-1] + *(_QWORD *)(v48 - 24)) = v49;
  if (v96 < 0)
    operator delete((void *)v95[8]);
  std::streambuf::~streambuf(v95);
  std::ios::~ios(&v97);
  v98 = v48;
  *(_QWORD *)((char *)&v99[-1] + *(_QWORD *)(v48 - 24)) = v49;
  if (v100 < 0)
    operator delete((void *)v99[8]);
  std::streambuf::~streambuf(v99);
  return std::ios::~ios(&v101);
}

void sub_10035DEF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,void *a48,uint64_t a49,int a50,__int16 a51,char a52,char a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59,char a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a72;

  if (a23 < 0)
    operator delete(__p);
  if (a29 < 0)
    operator delete(a24);
  if (a35 < 0)
    operator delete(a30);
  if (a41 < 0)
    operator delete(a36);
  if (a47 < 0)
    operator delete(a42);
  if (a53 < 0)
    operator delete(a48);
  if (a59 < 0)
    operator delete(a54);
  sub_100210AFC((uint64_t)&a60);
  sub_100210AFC((uint64_t)&a72);
  sub_100210AFC((uint64_t)&STACK[0x300]);
  sub_100210AFC((uint64_t)&STACK[0x408]);
  sub_100210AFC((uint64_t)&STACK[0x510]);
  sub_100210AFC((uint64_t)&STACK[0x618]);
  sub_100210AFC((uint64_t)&STACK[0x720]);
  sub_100210AFC((uint64_t)&STACK[0x828]);
  _Unwind_Resume(a1);
}

long double sub_10035E030(double a1, uint64_t a2, uint64_t a3)
{
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
    sub_1003EFD64();
  return atan(a1 / *(float *)(a3 + 8)) * 180.0 / 3.14159265;
}

void sub_10035E0B0(uint64_t a1, int a2)
{
  NSObject *v4;
  const char *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  const char *v11;
  __int16 v12;
  uint64_t v13;
  __int16 v14;
  uint64_t v15;

  if (*(unsigned __int8 *)(a1 + 488) != a2)
  {
    v4 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
    {
      v5 = "NO";
      v6 = *(_QWORD *)(a1 + 408) + *(_QWORD *)(a1 + 400) - 1;
      v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 376) + ((v6 >> 2) & 0x3FFFFFFFFFFFFFF8)) + ((v6 & 0x1F) << 7));
      v8 = *(_QWORD *)(a1 + 480) + *(_QWORD *)(a1 + 472) - 1;
      v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 448) + ((v8 >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * (v8 & 0x7F));
      if (a2)
        v5 = "YES";
      v10 = 136315650;
      v11 = v5;
      v12 = 2048;
      v13 = v7;
      v14 = 2048;
      v15 = v9;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#sa_algo_moving_findee,#stalePeerVIO Peer pose history stale status changed to %s, last self pose at %f s, last peer pose at %f s ", (uint8_t *)&v10, 0x20u);
    }
    *(_BYTE *)(a1 + 488) = a2;
  }
}

void sub_10035E1E8(uint64_t a1, _DWORD *a2)
{
  switch(*a2)
  {
    case 0:
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
        sub_1003EFDD0();
      break;
    case 1:
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
        sub_1003EFE34();
      break;
    case 2:
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
        sub_1003EFE98();
      break;
    case 3:
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
        sub_1003EFEFC();
      break;
    case 4:
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
        sub_1003EFF60();
      break;
    default:
      return;
  }
}

__n128 sub_10035E30C(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __n128 result;
  __int128 v14;
  __int128 v15;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 26 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_10035EC48(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  v8 = *(_QWORD *)(v5 + 8 * (v7 / 0x1A)) + 152 * (v7 % 0x1A);
  v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v8 = *(_OWORD *)a2;
  *(_OWORD *)(v8 + 16) = v9;
  v10 = *(_OWORD *)(a2 + 32);
  v11 = *(_OWORD *)(a2 + 48);
  v12 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(v8 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v8 + 80) = v12;
  *(_OWORD *)(v8 + 32) = v10;
  *(_OWORD *)(v8 + 48) = v11;
  result = *(__n128 *)(a2 + 96);
  v14 = *(_OWORD *)(a2 + 112);
  v15 = *(_OWORD *)(a2 + 128);
  *(_QWORD *)(v8 + 144) = *(_QWORD *)(a2 + 144);
  *(_OWORD *)(v8 + 112) = v14;
  *(_OWORD *)(v8 + 128) = v15;
  *(__n128 *)(v8 + 96) = result;
  ++a1[5];
  return result;
}

unint64_t sub_10035E3E0(int64x2_t *a1, _QWORD *a2, char *a3)
{
  unint64_t v4;
  uint64_t v5;
  char **v6;
  char *v7;
  unint64_t v8;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  _BYTE *v14;
  _QWORD *v15;
  char *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _BYTE **v20;
  _BYTE *v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  __n128 v27[2];

  v4 = a1[2].u64[0];
  v5 = a1->i64[1];
  v6 = (char **)(v5 + 8 * (v4 / 0x1A));
  if (a1[1].i64[0] == v5)
    v7 = 0;
  else
    v7 = &(*v6)[152 * (v4 % 0x1A)];
  if (a3 == v7)
    v8 = 0;
  else
    v8 = 26 * ((char **)a2 - v6)
       - 0x79435E50D79435E5 * ((uint64_t)&a3[-*a2] >> 3)
       + 0x79435E50D79435E5 * ((v7 - *v6) >> 3);
  v27[0].n128_u64[0] = v5 + 8 * (v4 / 0x1A);
  v27[0].n128_u64[1] = (unint64_t)v7;
  sub_10035F02C(v27, v8);
  v9 = a1[2].i64[1];
  v10 = v27[0].n128_u64[1] - *(_QWORD *)v27[0].n128_u64[0];
  v11 = 0x86BCA1AF286BCA1BLL * (v10 >> 3);
  if (v8 <= (unint64_t)(v9 - 1) >> 1)
  {
    if (v10 < -151)
    {
      v15 = (_QWORD *)(v27[0].n128_u64[0] - 8 * ((24 - v11) / 0x1A));
      v16 = (char *)(*v15 + 152 * (26 * ((24 - v11) / 0x1A) - (24 - v11)) + 3800);
    }
    else
    {
      v15 = (_QWORD *)(v27[0].n128_u64[0] + 8 * ((v11 + 1) / 0x1A));
      v16 = (char *)(*v15 + 152 * ((v11 + 1) % 0x1A));
    }
    sub_10035F0E0(v6, v7, (char **)v27[0].n128_u64[0], (char *)v27[0].n128_u64[1], v15, v16, v27);
    a1[2] = vaddq_s64(a1[2], (int64x2_t)xmmword_10046C2B0);
    sub_10035EF5C((uint64_t)a1, 1);
  }
  else
  {
    if (v10 < -151)
    {
      v17 = 24 - v11;
      v13 = (_QWORD *)(v27[0].n128_u64[0] - 8 * (v17 / 0x1A));
      v14 = (_BYTE *)(*v13 + 152 * (26 * (v17 / 0x1A) - v17) + 3800);
    }
    else
    {
      v12 = v11 + 1;
      v13 = (_QWORD *)(v27[0].n128_u64[0] + 8 * (v12 / 0x1A));
      v14 = (_BYTE *)(*v13 + 152 * (v12 % 0x1A));
    }
    v18 = a1[2].i64[0] + v9;
    v19 = a1->i64[1];
    v20 = (_BYTE **)(v19 + 8 * (v18 / 0x1A));
    if (a1[1].i64[0] == v19)
      v21 = 0;
    else
      v21 = &(*v20)[152 * (v18 % 0x1A)];
    sub_10035F28C(v13, v14, v20, v21, (uint64_t)v27);
    --a1[2].i64[1];
    sub_10035EFB8(a1, 1);
  }
  v22 = a1[2].u64[0];
  v23 = a1->i64[1];
  v24 = (_QWORD *)(v23 + 8 * (v22 / 0x1A));
  if (a1[1].i64[0] == v23)
    v25 = 0;
  else
    v25 = *v24 + 152 * (v22 % 0x1A);
  v27[0].n128_u64[0] = (unint64_t)v24;
  v27[0].n128_u64[1] = v25;
  sub_10035F02C(v27, v8);
  return v27[0].n128_u64[0];
}

_QWORD *sub_10035E700(_QWORD *a1, char *a2, uint64_t a3, char *a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  char **v11;
  char *v12;
  char **v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  char **v17;
  char *v18;
  char **v19;
  char *v20;
  char **v21;
  char *v22;
  _QWORD *v23;
  char *v24;
  char *v25;
  char **v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __n128 v32;
  char **v33;
  char *v34;
  __n128 v35;
  char *v36;

  if (a5 == a3)
    v6 = 0;
  else
    v6 = ((a5 - *(_QWORD *)a4) >> 5) + 16 * (a4 - a2) - ((a3 - *(_QWORD *)a2) >> 5);
  v7 = a1[1];
  v8 = (char *)(v7 + 8 * (a1[4] >> 7));
  if (a1[2] == v7)
    v9 = 0;
  else
    v9 = *(_QWORD *)v8 + 32 * (a1[4] & 0x7FLL);
  v33 = (char **)(v7 + 8 * (a1[4] >> 7));
  v34 = (char *)v9;
  if (v9 == a3)
    v10 = 0;
  else
    v10 = ((a3 - *(_QWORD *)a2) >> 5) + 16 * (a2 - v8) - ((v9 - *(_QWORD *)v8) >> 5);
  v11 = (char **)sub_10035F408((uint64_t)&v33, v10);
  v32.n128_u64[0] = (unint64_t)v11;
  v32.n128_u64[1] = (unint64_t)v12;
  if (v6 >= 1)
  {
    if (v10 <= (unint64_t)(a1[5] - v6) >> 1)
    {
      v19 = v11;
      v20 = v12;
      v21 = v33;
      v22 = v34;
      v23 = sub_10035F408((uint64_t)&v32, v6);
      sub_10035F46C(v21, v22, v19, v20, v23, v24, &v35);
      v25 = v34;
      if (v34 != v36)
      {
        v26 = v33;
        do
        {
          v25 += 32;
          v34 = v25;
          if (v25 - *v26 == 4096)
          {
            v27 = v26[1];
            ++v26;
            v25 = v27;
            v33 = v26;
            v34 = v27;
          }
        }
        while (v25 != v36);
      }
      v28 = a1[5] - v6;
      a1[4] += v6;
      a1[5] = v28;
      while ((sub_100343138((uint64_t)a1, 1) & 1) != 0)
        ;
    }
    else
    {
      v13 = (char **)sub_10035F408((uint64_t)&v32, v6);
      v15 = a1[4] + a1[5];
      v16 = a1[1];
      v17 = (char **)(v16 + 8 * (v15 >> 7));
      if (a1[2] == v16)
        v18 = 0;
      else
        v18 = &(*v17)[32 * (v15 & 0x7F)];
      v35 = v32;
      sub_10035F5F0(v13, v14, v17, v18, (uint64_t)&v35);
      a1[5] -= v6;
      while ((sub_100346A34(a1, 1) & 1) != 0)
        ;
    }
  }
  v29 = a1[1];
  if (a1[2] == v29)
    v30 = 0;
  else
    v30 = *(_QWORD *)(v29 + 8 * (a1[4] >> 7)) + 32 * (a1[4] & 0x7FLL);
  v35.n128_u64[0] = v29 + 8 * (a1[4] >> 7);
  v35.n128_u64[1] = v30;
  return sub_10035F408((uint64_t)&v35, v10);
}

void sub_10035E934(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x80;
  v4 = v2 - 128;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10005538C(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      sub_1001389D0(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    sub_100138AE4((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10005538C((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_10005538C((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  sub_100138C00(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_100138D14((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_10035EBFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_10035EC48(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x1A;
  v4 = v2 - 26;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10005538C(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0xF70uLL);
      sub_1001389D0(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0xF70uLL);
    sub_100138AE4((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10005538C((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_10005538C((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0xF70uLL);
  sub_100138C00(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_100138D14((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_10035EF10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_10035EF5C(uint64_t a1, int a2)
{
  unint64_t v2;
  int v4;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2 < 0x1A)
    a2 = 1;
  if (v2 < 0x34)
    v4 = a2;
  else
    v4 = 0;
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(_QWORD *)(a1 + 8) += 8;
    *(_QWORD *)(a1 + 32) -= 26;
  }
  return v4 ^ 1u;
}

uint64_t sub_10035EFB8(_QWORD *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int v7;

  v3 = a1[1];
  v2 = a1[2];
  if (v2 == v3)
    v4 = 0;
  else
    v4 = 26 * ((v2 - v3) >> 3) - 1;
  v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x1A)
    a2 = 1;
  if (v5 < 0x34)
    v7 = a2;
  else
    v7 = 0;
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

_QWORD *sub_10035F02C(_QWORD *result, uint64_t a2)
{
  _QWORD *v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;

  if (a2)
  {
    v2 = (_QWORD *)*result;
    v3 = a2 - 0x79435E50D79435E5 * ((uint64_t)(result[1] - *(_QWORD *)*result) >> 3);
    if ((uint64_t)v3 < 1)
    {
      v5 = 25 - v3;
      v6 = &v2[-(v5 / 0x1A)];
      *result = v6;
      v4 = *v6 + 152 * (26 * (v5 / 0x1A) - v5) + 3800;
    }
    else
    {
      *result = &v2[v3 / 0x1A];
      v4 = v2[v3 / 0x1A] + 152 * (v3 % 0x1A);
    }
    result[1] = v4;
  }
  return result;
}

__n128 sub_10035F0E0@<Q0>(char **a1@<X1>, char *a2@<X2>, char **a3@<X3>, char *a4@<X4>, _QWORD *a5@<X5>, char *a6@<X6>, __n128 *a7@<X8>)
{
  char *v12;
  char **v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  __n128 result;
  uint64_t v21;
  __n128 v22;

  if (a1 == a3)
  {
    v19 = a2;
    v18 = a4;
    v15 = a5;
    v16 = a6;
  }
  else
  {
    v13 = a3 - 1;
    v12 = *a3;
    v14 = a4;
    v15 = a5;
    v16 = a6;
    while (1)
    {
      sub_10035F1AC(v12, v14, v15, v16, &v21);
      v16 = (char *)v22.n128_u64[1];
      v15 = (_QWORD *)v22.n128_u64[0];
      if (v13 == a1)
        break;
      v17 = *v13--;
      v12 = v17;
      v14 = v17 + 3952;
    }
    v18 = *a1 + 3952;
    v19 = a2;
  }
  sub_10035F1AC(v19, v18, v15, v16, &v21);
  result = v22;
  a7->n128_u64[0] = (unint64_t)a3;
  a7->n128_u64[1] = (unint64_t)a4;
  a7[1] = result;
  return result;
}

void *sub_10035F1AC@<X0>(char *a1@<X1>, char *a2@<X2>, _QWORD *a3@<X3>, char *a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v6;
  char *v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  void *result;
  uint64_t v14;
  char *v15;

  v6 = a3;
  if (a1 == a2)
  {
    v9 = a1;
  }
  else
  {
    v9 = a2;
    v10 = *a3;
    v11 = a2;
    while (1)
    {
      v12 = 0x86BCA1AF286BCA1BLL * ((uint64_t)&a4[-v10] >> 3);
      if ((uint64_t)(0x86BCA1AF286BCA1BLL * ((v11 - a1) >> 3)) < v12)
        v12 = 0x86BCA1AF286BCA1BLL * ((v11 - a1) >> 3);
      v11 -= 152 * v12;
      a4 -= 152 * v12;
      if (v12)
        result = memmove(a4, v11, 152 * v12);
      if (v11 == a1)
        break;
      v14 = *--v6;
      v10 = v14;
      a4 = (char *)(v14 + 3952);
    }
    if ((char *)(*v6 + 3952) == a4)
    {
      v15 = (char *)v6[1];
      ++v6;
      a4 = v15;
    }
  }
  *a5 = v9;
  a5[1] = v6;
  a5[2] = a4;
  return result;
}

double sub_10035F28C(_QWORD *a1, _BYTE *a2, _BYTE **a3, _BYTE *a4, uint64_t a5)
{
  void **v7;
  char *v8;
  _QWORD *v10;
  _BYTE *i;
  _BYTE *v12;
  double result;
  uint64_t v14;
  __int128 v15;

  v7 = *(void ***)a5;
  v8 = *(char **)(a5 + 8);
  if (a1 != a3)
  {
    v10 = a1 + 1;
    for (i = (_BYTE *)(*a1 + 3952); ; i = v12 + 3952)
    {
      sub_10035F31C(a2, v8, i, v7, &v14);
      v8 = (char *)*((_QWORD *)&v15 + 1);
      v7 = (void **)v15;
      *(_QWORD *)a5 = v15;
      *(_QWORD *)(a5 + 8) = v8;
      if (v10 == a3)
        break;
      v12 = (_BYTE *)*v10++;
      a2 = v12;
    }
    a2 = *a3;
  }
  sub_10035F31C(a2, v8, a4, v7, &v14);
  result = *(double *)&v15;
  *(_OWORD *)a5 = v15;
  return result;
}

void *sub_10035F31C@<X0>(_BYTE *__src@<X1>, char *__dst@<X4>, _BYTE *a3@<X2>, void **a4@<X3>, _QWORD *a5@<X8>)
{
  void **v6;
  _BYTE *v7;
  _BYTE *v9;
  char *v10;
  int64_t v11;
  unint64_t v12;
  void *result;
  char *v14;

  v6 = a4;
  v7 = __src;
  if (__src == a3)
  {
    v9 = __src;
  }
  else
  {
    v9 = a3;
    v6 = a4 + 1;
    v10 = (char *)*a4;
    while (1)
    {
      v11 = 0x86BCA1AF286BCA1BLL * ((v10 - __dst + 3952) >> 3);
      v12 = (uint64_t)(0x86BCA1AF286BCA1BLL * ((v9 - v7) >> 3)) >= v11 ? v11 : 0x86BCA1AF286BCA1BLL * ((v9 - v7) >> 3);
      if (v12)
        result = memmove(__dst, v7, 152 * v12);
      v7 += 152 * v12;
      if (v7 == v9)
        break;
      v14 = (char *)*v6++;
      v10 = v14;
      __dst = v14;
    }
    __dst += 152 * v12;
    if ((char *)*(v6 - 1) + 3952 == __dst)
      __dst = (char *)*v6;
    else
      --v6;
  }
  *a5 = v9;
  a5[1] = v6;
  a5[2] = __dst;
  return result;
}

_QWORD *sub_10035F408(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v4;

  result = *(_QWORD **)a1;
  if (a2)
  {
    v4 = a2 + ((uint64_t)(*(_QWORD *)(a1 + 8) - *result) >> 5);
    if (v4 < 1)
      result -= (unint64_t)(127 - v4) >> 7;
    else
      result += (unint64_t)v4 >> 7;
  }
  return result;
}

__n128 sub_10035F46C@<Q0>(char **a1@<X1>, char *a2@<X2>, char **a3@<X3>, char *a4@<X4>, _QWORD *a5@<X5>, char *a6@<X6>, __n128 *a7@<X8>)
{
  char *v12;
  char **v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  __n128 result;
  uint64_t v21;
  __n128 v22;

  if (a1 == a3)
  {
    v19 = a2;
    v18 = a4;
    v15 = a5;
    v16 = a6;
  }
  else
  {
    v13 = a3 - 1;
    v12 = *a3;
    v14 = a4;
    v15 = a5;
    v16 = a6;
    while (1)
    {
      sub_10035F538(v12, v14, v15, v16, &v21);
      v16 = (char *)v22.n128_u64[1];
      v15 = (_QWORD *)v22.n128_u64[0];
      if (v13 == a1)
        break;
      v17 = *v13--;
      v12 = v17;
      v14 = v17 + 4096;
    }
    v18 = *a1 + 4096;
    v19 = a2;
  }
  sub_10035F538(v19, v18, v15, v16, &v21);
  result = v22;
  a7->n128_u64[0] = (unint64_t)a3;
  a7->n128_u64[1] = (unint64_t)a4;
  a7[1] = result;
  return result;
}

void *sub_10035F538@<X0>(char *a1@<X1>, char *a2@<X2>, _QWORD *a3@<X3>, char *a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v6;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void *result;
  uint64_t v15;
  char *v16;

  v6 = a3;
  if (a1 == a2)
  {
    v9 = a1;
  }
  else
  {
    v9 = a2;
    v10 = *a3;
    v11 = a2;
    while (1)
    {
      v12 = (uint64_t)&a4[-v10];
      if ((v11 - a1) >> 5 >= v12 >> 5)
        v13 = v12 >> 5;
      else
        v13 = (v11 - a1) >> 5;
      v11 -= 32 * v13;
      a4 -= 32 * v13;
      if (v13)
        result = memmove(a4, v11, 32 * v13);
      if (v11 == a1)
        break;
      v15 = *--v6;
      v10 = v15;
      a4 = (char *)(v15 + 4096);
    }
    if ((char *)(*v6 + 4096) == a4)
    {
      v16 = (char *)v6[1];
      ++v6;
      a4 = v16;
    }
  }
  *a5 = v9;
  a5[1] = v6;
  a5[2] = a4;
  return result;
}

double sub_10035F5F0(char **a1, char *__src, char **a3, char *a4, uint64_t a5)
{
  char **v8;
  char *v9;
  char *v10;
  void **v11;
  char *v12;
  double result;
  char *v14;
  __int128 v15;

  if (a1 == a3)
  {
    v11 = *(void ***)a5;
    v12 = *(char **)(a5 + 8);
    v10 = __src;
  }
  else
  {
    v8 = a1 + 1;
    sub_10035F6BC(__src, *(char **)(a5 + 8), *a1 + 4096, *(void ***)a5, &v14);
    for (*(_OWORD *)a5 = v15; v8 != a3; *(_OWORD *)a5 = v15)
    {
      v9 = *v8++;
      sub_10035F6BC(v9, *(char **)(a5 + 8), v9 + 4096, *(void ***)a5, &v14);
    }
    v10 = *a3;
    v11 = *(void ***)a5;
    v12 = *(char **)(a5 + 8);
  }
  sub_10035F6BC(v10, v12, a4, v11, &v14);
  result = *(double *)&v15;
  *(_OWORD *)a5 = v15;
  return result;
}

char *sub_10035F6BC@<X0>(char *__src@<X0>, char *__dst@<X3>, char *a3@<X1>, void **a4@<X2>, char **a5@<X8>)
{
  void **v6;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;

  v6 = a4;
  if (__src != a3)
  {
    v9 = __src;
    v6 = a4 + 1;
    v10 = (char *)*a4;
    while (1)
    {
      v11 = v10 - __dst + 4096;
      v12 = (a3 - v9) >> 5 >= v11 >> 5 ? v11 >> 5 : (a3 - v9) >> 5;
      if (v12)
        __src = (char *)memmove(__dst, v9, 32 * v12);
      v9 += 32 * v12;
      if (v9 == a3)
        break;
      v13 = (char *)*v6++;
      v10 = v13;
      __dst = v13;
    }
    __dst += 32 * v12;
    if ((char *)*(v6 - 1) + 4096 == __dst)
      __dst = (char *)*v6;
    else
      --v6;
  }
  *a5 = a3;
  a5[1] = (char *)v6;
  a5[2] = __dst;
  return __src;
}

void sub_10035F79C(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 0x20u);
}

uint64_t sub_10035F7AC()
{
  _OWORD *v0;
  _OWORD *v1;

  qword_10085EEB0 = 0;
  qword_10085EEB8 = 0;
  qword_10085EEC0 = 0;
  v0 = operator new(0x40uLL);
  qword_10085EEB8 = (uint64_t)(v0 + 4);
  qword_10085EEC0 = (uint64_t)(v0 + 4);
  *v0 = xmmword_10047B740;
  v0[1] = unk_10047B750;
  v0[2] = xmmword_10047B760;
  v0[3] = unk_10047B770;
  qword_10085EEB0 = (uint64_t)v0;
  __cxa_atexit((void (*)(void *))sub_1000325D8, &qword_10085EEB0, (void *)&_mh_execute_header);
  qword_10085EED0 = 0;
  unk_10085EED8 = 0;
  qword_10085EEC8 = 0;
  v1 = operator new(0x10uLL);
  qword_10085EED0 = (uint64_t)(v1 + 1);
  unk_10085EED8 = v1 + 1;
  *v1 = xmmword_10047B780;
  qword_10085EEC8 = (uint64_t)v1;
  return __cxa_atexit((void (*)(void *))sub_1000325D8, &qword_10085EEC8, (void *)&_mh_execute_header);
}

uint64_t sub_10035F868(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;

  v3 = a2;
  *(_QWORD *)a1 = v3;
  *(_DWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  if (!v3)
    __assert_rtn("RoseSupervisorInterface", "RoseSupervisorInterface.mm", 44, "fDispatchQueue");
  v4 = v3;
  v5 = *(void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = &stru_100816C30;

  return a1;
}

void sub_10035F8E0(_Unwind_Exception *a1)
{
  id *v1;

  _Unwind_Resume(a1);
}

void sub_10035F904(id a1, const void *a2)
{
  NSObject *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;

  v3 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1);
    v5 = 134217984;
    v6 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Received HID event, but no handler defined. Data len: %zu", (uint8_t *)&v5, 0xCu);
  }
}

uint64_t sub_10035F9B0(uint64_t a1)
{
  NSObject *v2;
  io_connect_t v3;
  uint8_t v5[16];

  v2 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "~RoseSupervisorInterface()", v5, 2u);
  }
  v3 = *(_DWORD *)(a1 + 8);
  if (v3)
    IOServiceClose(v3);

  return a1;
}

BOOL sub_10035FA48(uint64_t a1)
{
  io_connect_t *v1;
  _BOOL8 result;
  const __CFDictionary *v3;
  io_service_t MatchingService;
  io_object_t v5;
  kern_return_t v6;
  NSObject *v7;
  NSObject *v8;
  uint8_t v9[32];
  uint8_t buf[24];

  v1 = (io_connect_t *)(a1 + 8);
  if (*(_DWORD *)(a1 + 8))
    return 1;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
    sub_1003F006C();
  v3 = IOServiceNameMatching("rose-supervisor");
  MatchingService = IOServiceGetMatchingService(kIOMainPortDefault, v3);
  v5 = MatchingService;
  if (MatchingService)
  {
    v6 = IOServiceOpen(MatchingService, mach_task_self_, 0, v1);
    IOObjectRelease(v5);
    v7 = qword_10085F520;
    if (!v6)
    {
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v9 = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "[RoseSupervisorInterface] Successfully connected to RoseSupervisor", v9, 2u);
      }
      return 1;
    }
    v8 = (id)qword_10085F520;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      sub_10035FBD8(v6, v9);
      sub_1003EFFFC((char *)v9, buf, v8);
    }

  }
  else
  {
    result = os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    sub_1003EFFC4();
  }
  return 0;
}

void sub_10035FBC0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_QWORD *sub_10035FBD8@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  char *v2;

  switch(a1)
  {
    case -536870212:
      v2 = "kIOReturnError";
      break;
    case -536870211:
      v2 = "kIOReturnNoMemory";
      break;
    case -536870210:
      v2 = "kIOReturnNoResources";
      break;
    case -536870209:
      v2 = "kIOReturnIPCError";
      break;
    case -536870208:
      v2 = "kIOReturnNoDevice";
      break;
    case -536870207:
      v2 = "kIOReturnNotPrivileged";
      break;
    case -536870206:
      v2 = "kIOReturnBadArgument";
      break;
    case -536870205:
      v2 = "kIOReturnLockedRead";
      break;
    case -536870204:
      v2 = "kIOReturnLockedWrite";
      break;
    case -536870203:
      v2 = "kIOReturnExclusiveAccess";
      break;
    case -536870202:
      v2 = "kIOReturnBadMessageID";
      break;
    case -536870201:
      v2 = "kIOReturnUnsupported";
      break;
    case -536870200:
      v2 = "kIOReturnVMError";
      break;
    case -536870199:
      v2 = "kIOReturnInternalError";
      break;
    case -536870198:
      v2 = "kIOReturnIOError";
      break;
    case -536870197:
    case -536870180:
      goto LABEL_7;
    case -536870196:
      v2 = "kIOReturnCannotLock";
      break;
    case -536870195:
      v2 = "kIOReturnNotOpen";
      break;
    case -536870194:
      v2 = "kIOReturnNotReadable";
      break;
    case -536870193:
      v2 = "kIOReturnNotWritable";
      break;
    case -536870192:
      v2 = "kIOReturnNotAligned";
      break;
    case -536870191:
      v2 = "kIOReturnBadMedia";
      break;
    case -536870190:
      v2 = "kIOReturnStillOpen";
      break;
    case -536870189:
      v2 = "kIOReturnRLDError";
      break;
    case -536870188:
      v2 = "kIOReturnDMAError";
      break;
    case -536870187:
      v2 = "kIOReturnBusy";
      break;
    case -536870186:
      v2 = "kIOReturnTimeout";
      break;
    case -536870185:
      v2 = "kIOReturnOffline";
      break;
    case -536870184:
      v2 = "kIOReturnNotReady";
      break;
    case -536870183:
      v2 = "kIOReturnNotAttached";
      break;
    case -536870182:
      v2 = "kIOReturnNoChannels";
      break;
    case -536870181:
      v2 = "kIOReturnNoSpace";
      break;
    case -536870179:
      v2 = "kIOReturnPortExists";
      break;
    case -536870178:
      v2 = "kIOReturnCannotWire";
      break;
    case -536870177:
      v2 = "kIOReturnNoInterrupt";
      break;
    case -536870176:
      v2 = "kIOReturnNoFrames";
      break;
    case -536870175:
      v2 = "kIOReturnMessageTooLarge";
      break;
    case -536870174:
      v2 = "kIOReturnNotPermitted";
      break;
    case -536870173:
      v2 = "kIOReturnNoPower";
      break;
    case -536870172:
      v2 = "kIOReturnNoMedia";
      break;
    case -536870171:
      v2 = "kIOReturnUnformattedMedia";
      break;
    case -536870170:
      v2 = "kIOReturnUnsupportedMode";
      break;
    case -536870169:
      v2 = "kIOReturnUnderrun";
      break;
    case -536870168:
      v2 = "kIOReturnOverrun";
      break;
    case -536870167:
      v2 = "kIOReturnDeviceError";
      break;
    case -536870166:
      v2 = "kIOReturnNoCompletion";
      break;
    case -536870165:
      v2 = "kIOReturnAborted";
      break;
    case -536870164:
      v2 = "kIOReturnNoBandwidth";
      break;
    case -536870163:
      v2 = "kIOReturnNotResponding";
      break;
    case -536870162:
      v2 = "kIOReturnIsoTooOld";
      break;
    case -536870161:
      v2 = "kIOReturnIsoTooNew";
      break;
    case -536870160:
      v2 = "kIOReturnNotFound";
      break;
    default:
      if (a1 == -536870911)
      {
        v2 = "kIOReturnInvalid";
      }
      else if (a1)
      {
LABEL_7:
        v2 = "<Unknown IOReturn Value>";
      }
      else
      {
        v2 = "kIOReturnSuccess";
      }
      break;
  }
  return sub_10000BF04(a2, v2);
}

void sub_10035FEA4(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  void *v5;

  v3 = a2;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
  {
    sub_1003F00C0();
    if (v3)
      goto LABEL_3;
LABEL_5:
    sub_1003F0098();
  }
  if (!v3)
    goto LABEL_5;
LABEL_3:
  v4 = objc_retainBlock(v3);
  v5 = *(void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v4;

}

BOOL sub_10035FF18(uint64_t a1, unsigned int a2, uint64_t a3, unint64_t *a4)
{
  kern_return_t v8;
  size_t v9;
  int v10;
  size_t v11;
  NSObject *v12;
  int v14;
  void **v15;
  void **v16;
  void **v17;
  void *__p[2];
  char v19;
  void *v20[2];
  char v21;
  _QWORD v22[4];
  unsigned int v23;
  int v24;
  size_t __n;
  uint8_t buf[4];
  void **v27;
  __int16 v28;
  void **v29;
  _BYTE __src[1024];
  uint64_t input;

  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
    sub_1003F0114();
  input = a2;
  bzero(__src, 0x400uLL);
  __n = 1024;
  v8 = IOConnectCallMethod(*(_DWORD *)(a1 + 8), 3u, &input, 1u, *(const void **)a3, *(_QWORD *)(a3 + 8) - *(_QWORD *)a3, 0, 0, __src, &__n);
  v9 = __n;
  if (__n >= 0x401)
    sub_1003F00EC();
  v10 = v8;
  v11 = a4[1] - *a4;
  if (__n <= v11)
  {
    if (__n < v11)
      a4[1] = *a4 + __n;
  }
  else
  {
    sub_10003F150(a4, __n - v11);
    v9 = __n;
  }
  if (v9)
    memcpy((void *)*a4, __src, v9);
  if (v10)
  {
    v22[0] = _NSConcreteStackBlock;
    v22[1] = 3221225472;
    v22[2] = sub_10036018C;
    v22[3] = &unk_10080E458;
    v23 = a2;
    v24 = v10;
    AnalyticsSendEventLazy(CFSTR("com.apple.nearbyd.RoseSupervisorCommandError"), v22);
    v12 = (id)qword_10085F520;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      sub_100360280(a2, v20);
      v14 = v21;
      v15 = (void **)v20[0];
      sub_10035FBD8(v10, __p);
      v16 = v20;
      if (v14 < 0)
        v16 = v15;
      if (v19 >= 0)
        v17 = __p;
      else
        v17 = (void **)__p[0];
      *(_DWORD *)buf = 136315394;
      v27 = v16;
      v28 = 2080;
      v29 = v17;
      _os_log_error_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "Failed to send command packet type: %s, return: %s", buf, 0x16u);
      if (v19 < 0)
        operator delete(__p[0]);
      if (v21 < 0)
        operator delete(v20[0]);
    }

  }
  return v10 == 0;
}

void sub_10036015C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  void *v19;

  if (a19 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

id sub_10036018C(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  _QWORD v6[2];
  _QWORD v7[2];

  v6[0] = CFSTR("CommandType");
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 32)));
  v6[1] = CFSTR("ErrorCode");
  v7[0] = v2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 36)));
  v7[1] = v3;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v7, v6, 2));

  return v4;
}

void sub_100360258(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

_QWORD *sub_100360280@<X0>(unsigned int a1@<W0>, _QWORD *a2@<X8>)
{
  char *v2;

  if (a1 > 0x3E)
    v2 = "<Unknown Command Type>";
  else
    v2 = off_100816CB0[a1];
  return sub_10000BF04(a2, v2);
}

BOOL sub_1003602AC(uint64_t a1, unsigned int a2, uint64_t a3)
{
  kern_return_t v6;
  int v7;
  NSObject *v8;
  int v10;
  void **v11;
  void **v12;
  void **v13;
  void *__p[2];
  char v15;
  void *v16[2];
  char v17;
  _QWORD v18[4];
  unsigned int v19;
  kern_return_t v20;
  uint8_t buf[4];
  void **v22;
  __int16 v23;
  void **v24;
  uint64_t input;

  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
    sub_1003F0140();
  input = a2;
  v6 = IOConnectCallMethod(*(_DWORD *)(a1 + 8), 1u, &input, 1u, *(const void **)a3, *(_QWORD *)(a3 + 8) - *(_QWORD *)a3, 0, 0, 0, 0);
  v7 = v6;
  if (v6)
  {
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472;
    v18[2] = sub_1003604A8;
    v18[3] = &unk_10080E458;
    v19 = a2;
    v20 = v6;
    AnalyticsSendEventLazy(CFSTR("com.apple.nearbyd.RoseSupervisorSetPropertyError"), v18);
    v8 = (id)qword_10085F520;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      sub_10036059C(a2, v16);
      v10 = v17;
      v11 = (void **)v16[0];
      sub_10035FBD8(v7, __p);
      v12 = v16;
      if (v10 < 0)
        v12 = v11;
      if (v15 >= 0)
        v13 = __p;
      else
        v13 = (void **)__p[0];
      *(_DWORD *)buf = 136315394;
      v22 = v12;
      v23 = 2080;
      v24 = v13;
      _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "Failed to set property type: %s, return: %s", buf, 0x16u);
      if (v15 < 0)
        operator delete(__p[0]);
      if (v17 < 0)
        operator delete(v16[0]);
    }

  }
  return v7 == 0;
}

void sub_100360478(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;

  if (a20 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

id sub_1003604A8(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  _QWORD v6[2];
  _QWORD v7[2];

  v6[0] = CFSTR("PropertyType");
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 32)));
  v6[1] = CFSTR("ErrorCode");
  v7[0] = v2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 36)));
  v7[1] = v3;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v7, v6, 2));

  return v4;
}

void sub_100360574(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

_QWORD *sub_10036059C@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  char *v2;

  if ((a1 - 208) > 0xB)
    v2 = "<Unknown Property Type>";
  else
    v2 = off_100816EA8[a1 - 208];
  return sub_10000BF04(a2, v2);
}

BOOL sub_1003605CC(uint64_t a1, unsigned int a2, unint64_t *a3)
{
  char *outputStruct;
  unint64_t v7;
  kern_return_t v8;
  int v9;
  size_t v10;
  NSObject *v11;
  int v13;
  void **v14;
  void **v15;
  void **v16;
  void *__p[2];
  char v18;
  void *v19[2];
  char v20;
  _QWORD v21[4];
  unsigned int v22;
  int v23;
  size_t v24;
  uint8_t buf[4];
  void **v26;
  __int16 v27;
  void **v28;
  uint64_t input;

  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
    sub_1003F0194();
  input = a2;
  v24 = 1024;
  LOBYTE(v19[0]) = 0;
  outputStruct = (char *)*a3;
  v7 = a3[1] - *a3;
  if (v7 > 0x3FF)
  {
    if (v7 != 1024)
      a3[1] = (unint64_t)(outputStruct + 1024);
  }
  else
  {
    sub_1001F9D10(a3, 1024 - v7, v19);
    outputStruct = (char *)*a3;
  }
  v8 = IOConnectCallMethod(*(_DWORD *)(a1 + 8), 2u, &input, 1u, 0, 0, 0, 0, outputStruct, &v24);
  if (v24 >= 0x401)
    sub_1003F016C();
  v9 = v8;
  v10 = a3[1] - *a3;
  if (v24 <= v10)
  {
    if (v24 < v10)
      a3[1] = *a3 + v24;
  }
  else
  {
    sub_10003F150(a3, v24 - v10);
  }
  if (v9)
  {
    v21[0] = _NSConcreteStackBlock;
    v21[1] = 3221225472;
    v21[2] = sub_100360850;
    v21[3] = &unk_10080E458;
    v22 = a2;
    v23 = v9;
    AnalyticsSendEventLazy(CFSTR("com.apple.nearbyd.RoseSupervisorGetPropertyError"), v21);
    v11 = (id)qword_10085F520;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      sub_10036059C(a2, v19);
      v13 = v20;
      v14 = (void **)v19[0];
      sub_10035FBD8(v9, __p);
      v15 = v19;
      if (v13 < 0)
        v15 = v14;
      if (v18 >= 0)
        v16 = __p;
      else
        v16 = (void **)__p[0];
      *(_DWORD *)buf = 136315394;
      v26 = v15;
      v27 = 2080;
      v28 = v16;
      _os_log_error_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "Failed to get property type: %s, return: %s", buf, 0x16u);
      if (v18 < 0)
        operator delete(__p[0]);
      if (v20 < 0)
        operator delete(v19[0]);
    }

  }
  return v9 == 0;
}

void sub_100360820(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  void *v19;

  if (a19 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

id sub_100360850(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  _QWORD v6[2];
  _QWORD v7[2];

  v6[0] = CFSTR("PropertyType");
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 32)));
  v6[1] = CFSTR("ErrorCode");
  v7[0] = v2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 36)));
  v7[1] = v3;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v7, v6, 2));

  return v4;
}

void sub_10036091C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

id sub_100360944(uint64_t a1)
{
  NSObject *v2;
  void *v3;
  id v4;
  void *v5;
  void *v6;
  _QWORD v8[5];
  uint8_t buf[16];

  v2 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "RoseSupervisorInterface::startReceivingHIDEvents()", buf, 2u);
  }
  v3 = *(void **)(a1 + 24);
  if (!v3)
  {
    v4 = objc_msgSend(objc_alloc((Class)HIDEventSystemClient), "initWithType:", 1);
    v5 = *(void **)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v4;

    objc_msgSend(*(id *)(a1 + 24), "setDispatchQueue:", *(_QWORD *)a1);
    objc_msgSend(*(id *)(a1 + 24), "setMatching:", &off_10082C3A0);
    v6 = *(void **)(a1 + 24);
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_100360A54;
    v8[3] = &unk_100816C50;
    v8[4] = a1;
    objc_msgSend(v6, "setEventHandler:", v8);
    objc_msgSend(*(id *)(a1 + 24), "setResetHandler:", &stru_100816C70);
    objc_msgSend(*(id *)(a1 + 24), "setCancelHandler:", &stru_100816C90);
    v3 = *(void **)(a1 + 24);
  }
  return objc_msgSend(v3, "activate");
}

void sub_100360A54(uint64_t a1, void *a2, void *a3)
{
  sub_100360A5C(*(_QWORD *)(a1 + 32), a2, a3);
}

void sub_100360A5C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  const void *DataValue;
  id v8;
  NSObject *v9;
  const char *v10;
  double v11;
  void *__p;
  void *v13;
  uint64_t v14;

  v5 = a2;
  v6 = a3;
  if (!os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
  {
    if (v5)
      goto LABEL_3;
LABEL_9:
    v9 = qword_10085F520;
    if (!os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_INFO))
      goto LABEL_12;
    LOWORD(v11) = 0;
    v10 = "onHIDEvent HIDServiceClient is nil";
    goto LABEL_11;
  }
  sub_1003F01C0();
  if (!v5)
    goto LABEL_9;
LABEL_3:
  if (!v6)
  {
    v9 = qword_10085F520;
    if (!os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_INFO))
      goto LABEL_12;
    LOWORD(v11) = 0;
    v10 = "onHIDEvent HIDEvent is nil";
LABEL_11:
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, v10, (uint8_t *)&v11, 2u);
    goto LABEL_12;
  }
  DataValue = (const void *)IOHIDEventGetDataValue(v6, 65540);
  v8 = objc_msgSend(v6, "integerValueForField:", 65539);
  v11 = sub_100008778((unint64_t)objc_msgSend(v6, "timestamp"));
  v13 = 0;
  v14 = 0;
  __p = 0;
  sub_10003A474(&__p, DataValue, (uint64_t)v8 + (_QWORD)DataValue, (size_t)v8);
  (*(void (**)(_QWORD))(*(_QWORD *)(a1 + 16) + 16))(*(_QWORD *)(a1 + 16));
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
LABEL_12:

}

void sub_100360BC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;
  void *v12;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_100360BF8(id a1)
{
  NSObject *v1;
  uint8_t v2[16];

  v1 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v2 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "RoseSupervisorInterface Reset handler", v2, 2u);
  }
}

void sub_100360C5C(id a1)
{
  NSObject *v1;
  uint8_t v2[16];

  v1 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v2 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "RoseSupervisorInterface Cancel handler", v2, 2u);
  }
}

double sub_100360CC4(unint64_t a1)
{
  return (double)a1 / 38400000.0;
}

double sub_100360CD8(unint64_t a1)
{
  return (double)a1 / 9.984e11;
}

double sub_100360CEC(uint64_t a1)
{
  return (double)a1 / 9.984e11;
}

uint64_t sub_100360D04(uint64_t a1)
{
  uint64_t v2;
  _QWORD v4[2];
  uint64_t v5;
  _QWORD v6[10];
  char v7;
  uint64_t v8;

  sub_1000537E4((uint64_t)v4);
  std::ostream::operator<<(&v5, a1);
  std::stringbuf::str(v6);
  *(_QWORD *)((char *)v4
  v5 = v2;
  if (v7 < 0)
    operator delete((void *)v6[8]);
  std::streambuf::~streambuf(v6);
  return std::ios::~ios(&v8);
}

void sub_100360DB8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100053910((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_100360DCC(int a1)
{
  return ((a1 - 997) & 0xFFFFFFFD) != 0;
}

uint64_t sub_100360DDC(int a1)
{
  uint64_t result;

  result = 1;
  if (a1 > 199)
  {
    if ((a1 - 200) >= 2 && a1 != 999 && a1 != 997)
      return result;
    return 0;
  }
  if ((a1 - 100) < 0x16 || (a1 - 11) < 0xD)
    return 0;
  return result;
}

uint64_t sub_100360E2C(int a1)
{
  uint64_t result;

  result = 1;
  if (a1 > 199)
  {
    if ((a1 - 200) >= 2 && a1 != 999 && a1 != 997)
      return result;
    return 0;
  }
  if ((a1 - 100) < 0x16 || (a1 - 7) < 0x11)
    return 0;
  return result;
}

uint64_t sub_100360E7C(int a1)
{
  uint64_t result;

  result = 1;
  if (a1 <= 99)
  {
    if (a1 >= 0x18)
      return result;
    return 0;
  }
  if (a1 <= 199)
  {
    if ((a1 - 100) >= 0xD)
      return result;
    return 0;
  }
  if ((a1 - 200) < 2 || a1 == 999 || a1 == 997)
    return 0;
  return result;
}

BOOL sub_100360ED4(int a1)
{
  return (a1 - 100) < 0x16 || (a1 - 3) <= 0x14;
}

BOOL sub_100360EFC(unsigned int a1)
{
  return a1 >= 0x18 && a1 - 200 >= 2 && a1 != 999 && a1 != 997;
}

uint64_t sub_100360F30(int a1)
{
  uint64_t result;
  unsigned int v3;

  result = 1;
  if (a1 <= 99)
  {
    if (a1 >= 0x18)
      return result;
    return 0;
  }
  if (a1 > 199)
  {
    if ((a1 - 200) < 2 || a1 == 999 || a1 == 997)
      return 0;
  }
  else
  {
    v3 = a1 - 100;
    if (v3 <= 0x13 && ((1 << v3) & 0xC6333) != 0)
      return 0;
  }
  return result;
}

uint64_t sub_100360FA0(int a1)
{
  uint64_t result;

  result = 1;
  if (a1 <= 99)
  {
    if (a1 >= 0x18)
      return result;
    return 0;
  }
  if ((a1 - 100) < 0x16 || a1 == 999 || a1 == 997)
    return 0;
  return result;
}

BOOL sub_100360FE4(unsigned int a1)
{
  return a1 >= 0x17 && a1 != 997 && a1 != 999;
}

uint64_t sub_10036100C(int a1)
{
  uint64_t result;

  result = 1;
  if (a1 > 199)
  {
    if ((a1 - 200) >= 2 && a1 != 999 && a1 != 997)
      return result;
    return 0;
  }
  if ((a1 - 100) < 0x16 || a1 < 0x11)
    return 0;
  return result;
}

uint64_t sub_100361058(int a1)
{
  uint64_t result;

  result = 1;
  if (a1 <= 99)
  {
    if (a1 >= 0x18)
      return result;
    return 0;
  }
  if (a1 <= 199)
  {
    if ((a1 - 100) >= 0x16)
      return result;
    return 0;
  }
  if (a1 == 200 || a1 == 999 || a1 == 997)
    return 0;
  return result;
}

uint64_t sub_1003610AC(int a1)
{
  unsigned int v1;

  if (a1 == 201)
    v1 = 2;
  else
    v1 = a1 == 200;
  if (a1 == 999)
    return 999;
  else
    return v1;
}

uint64_t sub_1003610D4(uint64_t result)
{
  if (result >= 3)
    return 999;
  else
    return result;
}

uint64_t sub_1003610EC(uint64_t a1)
{
  uint64_t v2;
  _QWORD v4[2];
  uint64_t v5;
  _QWORD v6[10];
  char v7;
  uint64_t v8;

  sub_1000537E4((uint64_t)v4);
  std::ostream::operator<<(&v5, a1);
  std::stringbuf::str(v6);
  *(_QWORD *)((char *)v4
  v5 = v2;
  if (v7 < 0)
    operator delete((void *)v6[8]);
  std::streambuf::~streambuf(v6);
  return std::ios::~ios(&v8);
}

void sub_1003611A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100053910((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1003611B4(uint64_t result)
{
  unsigned int v1;

  if ((_DWORD)result == 998)
    v1 = 998;
  else
    v1 = 999;
  if (result >= 0xE)
    return v1;
  else
    return result;
}

_DWORD *sub_1003611CC@<X0>(_DWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v3;
  int v4;

  switch((int)result)
  {
    case 0:
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
      v3 = operator new(4uLL);
      *a2 = v3;
      v4 = 1;
      goto LABEL_7;
    case 1:
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
      v3 = operator new(4uLL);
      *a2 = v3;
      v4 = 2;
      goto LABEL_7;
    case 2:
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
      v3 = operator new(4uLL);
      *a2 = v3;
      v4 = 3;
      goto LABEL_7;
    case 3:
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
      v3 = operator new(4uLL);
      *a2 = v3;
      v4 = 7;
LABEL_7:
      *v3 = v4;
      result = v3 + 1;
      a2[1] = result;
      a2[2] = result;
      break;
    default:
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
      break;
  }
  return result;
}

void sub_1003612A0(uint64_t a1, __int128 *a2)
{
  __int128 v3;

  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 1018212795;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_QWORD *)(a1 + 56) = 0;
  if (*((char *)a2 + 23) < 0)
  {
    sub_100004678((_BYTE *)(a1 + 64), *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v3 = *a2;
    *(_QWORD *)(a1 + 80) = *((_QWORD *)a2 + 2);
    *(_OWORD *)(a1 + 64) = v3;
  }
  *(_OWORD *)(a1 + 88) = 0u;
  *(_QWORD *)(a1 + 136) = 850045863;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_QWORD *)(a1 + 192) = 0;
  if (*(char *)(a1 + 87) < 0)
  {
    if (*(_QWORD *)(a1 + 72))
    {
LABEL_6:
      atomic_store(1u, (unsigned __int8 *)(a1 + 8));
      sub_10036141C();
    }
  }
  else if (*(_BYTE *)(a1 + 87))
  {
    goto LABEL_6;
  }
  __assert_rtn("DispatchQueue", "roseDispatchQueue.cpp", 17, "fName.size() > 0");
}

void sub_1003613D4()
{
  JUMPOUT(0x100361404);
}

void sub_10036141C()
{
  operator new();
}

void sub_1003614E0()
{
  JUMPOUT(0x1003614E8);
}

void sub_1003614F0()
{
  JUMPOUT(0x1003614F8);
}

void sub_100361510(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  sub_100361CD8((std::__thread_struct ***)va);
  JUMPOUT(0x10036151CLL);
}

void sub_100361528(uint64_t a1)
{
  std::condition_variable *v2;

  atomic_store(0, (unsigned __int8 *)(a1 + 8));
  v2 = (std::condition_variable *)(a1 + 16);
  std::condition_variable::notify_all((std::condition_variable *)(a1 + 16));
  if (*(_QWORD *)a1)
    std::thread::join((std::thread *)a1);
  std::mutex::~mutex((std::mutex *)(a1 + 136));
  sub_1003615FC((_QWORD *)(a1 + 88));
  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)(a1 + 64));
  std::condition_variable::~condition_variable(v2);
  std::thread::~thread((std::thread *)a1);
}

void sub_10036159C(uint64_t a1, uint64_t a2)
{
  std::mutex *v4;

  v4 = (std::mutex *)(a1 + 136);
  std::mutex::lock((std::mutex *)(a1 + 136));
  sub_100361748((_QWORD *)(a1 + 88), a2);
  std::mutex::unlock(v4);
  std::condition_variable::notify_all((std::condition_variable *)(a1 + 16));
}

void sub_1003615E8(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1003615FC(_QWORD *a1)
{
  void **v2;
  void **v3;
  _QWORD *v4;
  unint64_t v5;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  void *v16;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  if (v3 != v2)
  {
    v4 = a1 + 5;
    v5 = a1[4];
    v6 = &v2[v5 >> 7];
    v7 = (uint64_t)*v6;
    v8 = (uint64_t)*v6 + 32 * (v5 & 0x7F);
    v9 = *(uint64_t *)((char *)v2 + (((a1[5] + v5) >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * ((a1[5] + v5) & 0x7F);
    if (v8 == v9)
      goto LABEL_13;
    while (1)
    {
      v10 = *(_QWORD **)(v8 + 24);
      if (v10 == (_QWORD *)v8)
        break;
      if (v10)
      {
        v11 = 5;
LABEL_7:
        (*(void (**)(void))(*v10 + 8 * v11))();
        v7 = (uint64_t)*v6;
      }
      v8 += 32;
      if (v8 - v7 == 4096)
      {
        v12 = (uint64_t)v6[1];
        ++v6;
        v7 = v12;
        v8 = v12;
      }
      if (v8 == v9)
      {
        v2 = (void **)a1[1];
        v3 = (void **)a1[2];
        goto LABEL_13;
      }
    }
    v10 = (_QWORD *)v8;
    v11 = 4;
    goto LABEL_7;
  }
  v4 = a1 + 5;
  v3 = (void **)a1[1];
LABEL_13:
  *v4 = 0;
  v13 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v13 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v14 = v13 >> 3;
  if (v14 == 1)
  {
    v15 = 64;
  }
  else
  {
    if (v14 != 2)
      goto LABEL_21;
    v15 = 128;
  }
  a1[4] = v15;
LABEL_21:
  while (v2 != v3)
  {
    v16 = *v2++;
    operator delete(v16);
  }
  return sub_10003A428((uint64_t)a1);
}

uint64_t sub_100361748(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;

  v4 = a1[1];
  v5 = a1[2];
  v6 = 16 * (v5 - v4) - 1;
  if (v5 == v4)
    v6 = 0;
  if (v6 == a1[5] + a1[4])
  {
    sub_1003617DC(a1);
    v4 = a1[1];
    v5 = a1[2];
  }
  if (v5 == v4)
  {
    v8 = 0;
  }
  else
  {
    v7 = a1[5] + a1[4];
    v8 = *(_QWORD *)(v4 + ((v7 >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * (v7 & 0x7F);
  }
  result = sub_100027674(v8, a2);
  ++a1[5];
  return result;
}

void sub_1003617DC(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x80;
  v4 = v2 - 128;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10005538C(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      sub_1001389D0(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    sub_100138AE4((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10005538C((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_10005538C((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  sub_100138C00(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_100138D14((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_100361AA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_100361AF0(std::__thread_struct **a1)
{
  std::__thread_specific_ptr<std::__thread_struct> *v1;
  const void *v2;
  std::__thread_struct *v3;
  std::condition_variable *v4;
  unsigned __int8 *v5;
  std::__thread_struct *v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  _QWORD *v9;
  uint64_t v10;
  std::__thread_struct **v12;
  std::unique_lock<std::mutex> __lk;
  _BYTE v14[24];
  _BYTE *v15;

  v12 = a1;
  v1 = std::__thread_local_data();
  v2 = *v12;
  *v12 = 0;
  pthread_setspecific(v1->__key_, v2);
  v3 = v12[5];
  if (SHIBYTE(v3[2].__p_) < 0)
    v3 = (std::__thread_struct *)v3->__p_;
  pthread_setname_np((const char *)v3);
  do
  {
    __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)v12[4];
    __lk.__owns_ = 1;
    std::mutex::lock(__lk.__m_);
    v5 = (unsigned __int8 *)v12[1];
    v4 = (std::condition_variable *)v12[2];
    v6 = v12[3];
    while (1)
    {
      v7 = atomic_load(v5);
      if ((v7 & 1) == 0 || v6[5].__p_)
        break;
      std::condition_variable::wait(v4, &__lk);
    }
    v8 = atomic_load((unsigned __int8 *)v12[1]);
    if ((v8 & 1) == 0)
      goto LABEL_15;
    sub_100027674((uint64_t)v14, *(_QWORD *)((char *)v12[3][1].__p_ + (((unint64_t)v12[3][4].__p_ >> 4) & 0xFFFFFFFFFFFFFF8))+ 32 * ((uint64_t)v12[3][4].__p_ & 0x7F));
    sub_100361D28(v12[3]);
    sub_10019E538((uint64_t)&__lk);
    if (!v15)
      sub_100027BC4();
    (*(void (**)(_BYTE *))(*(_QWORD *)v15 + 48))(v15);
    v9 = v15;
    if (v15 == v14)
    {
      v9 = v14;
      v10 = 4;
    }
    else
    {
      if (!v15)
        goto LABEL_15;
      v10 = 5;
    }
    (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_15:
    if (__lk.__owns_)
      std::mutex::unlock(__lk.__m_);
  }
  while ((v8 & 1) != 0);
  sub_100361CD8(&v12);
  return 0;
}

void sub_100361C6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::mutex *a10, char a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  sub_100361CD8((std::__thread_struct ***)&a9);
  _Unwind_Resume(a1);
}

std::__thread_struct ***sub_100361CD8(std::__thread_struct ***result)
{
  std::__thread_struct **v1;

  v1 = *result;
  *result = 0;
  if (v1)
  {
    sub_100361DA8(v1, 0);
    operator delete();
  }
  return result;
}

uint64_t sub_100361D28(_QWORD *a1)
{
  unint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = a1[4];
  v3 = *(_QWORD *)(a1[1] + ((v2 >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * (v2 & 0x7F);
  v4 = *(_QWORD **)(v3 + 24);
  if (v4 == (_QWORD *)v3)
  {
    v5 = 4;
    v4 = (_QWORD *)v3;
    goto LABEL_5;
  }
  if (v4)
  {
    v5 = 5;
LABEL_5:
    (*(void (**)(void))(*v4 + 8 * v5))();
    v2 = a1[4];
  }
  v6 = a1[5] - 1;
  a1[4] = v2 + 1;
  a1[5] = v6;
  return sub_100343138((uint64_t)a1, 1);
}

std::__thread_struct *sub_100361DA8(std::__thread_struct **a1, std::__thread_struct *a2)
{
  std::__thread_struct *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    std::__thread_struct::~__thread_struct(result);
    operator delete();
  }
  return result;
}

uint64_t sub_100361DE4()
{
  void *v0;
  uint64_t v3;
  std::runtime_error *exception;
  _BYTE __dst[26];
  unsigned __int16 v7;
  char v8;

  v0 = sub_100004784();
  sub_10000BC94(__dst, (uint64_t)v0);
  if (!v8)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "getConnectionDescriptorSize: no cached hello response. Cannot guarantee correct parsing.");
  }
  if (__dst[25] <= 0x17u && __dst[24] == 0 || v7 - 3 >= 4)
    v3 = 20;
  else
    v3 = 24;
  sub_10000BA78((uint64_t)__dst);
  return v3;
}

void sub_100361E84(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10000BA78((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100361EA8()
{
  void *v0;
  uint64_t v3;
  std::runtime_error *exception;
  _BYTE __dst[26];
  unsigned __int16 v7;
  char v8;

  v0 = sub_100004784();
  sub_10000BC94(__dst, (uint64_t)v0);
  if (!v8)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "getTimeStatusSize: no cached hello response. Cannot guarantee correct parsing.");
  }
  if (__dst[25] <= 0x17u && __dst[24] == 0 || v7 - 3 >= 4)
    v3 = 32;
  else
    v3 = 48;
  sub_10000BA78((uint64_t)__dst);
  return v3;
}

void sub_100361F48(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10000BA78((uint64_t)va);
  _Unwind_Resume(a1);
}

std::string *sub_100361F6C@<X0>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  void **v6;
  std::string::size_type v7;
  unint64_t v8;
  const std::string::value_type *v9;
  const char *v10;
  const std::string::value_type *v11;
  const char *v12;
  const std::string::value_type *v13;
  std::string v15;
  void *__p[2];
  int64_t v17;

  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  std::to_string(&v15, *(_QWORD *)(a1 + 8));
  v4 = std::string::append(&v15, ":");
  v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v17 = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  if (v17 >= 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  if (v17 >= 0)
    v7 = HIBYTE(v17);
  else
    v7 = (std::string::size_type)__p[1];
  std::string::append(a2, (const std::string::value_type *)v6, v7);
  if (SHIBYTE(v17) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  v8 = *(char *)(a1 + 16);
  if (v8 >= 4)
    v9 = "RFU_Critical requests ";
  else
    v9 = off_100816F08[v8];
  std::string::append(a2, v9);
  v10 = "unknown operation, ";
  if (*(_BYTE *)(a1 + 17) == 1)
    v10 = "to resume, ";
  if (*(_BYTE *)(a1 + 17))
    v11 = v10;
  else
    v11 = "to pause, ";
  std::string::append(a2, v11);
  v12 = "r1 status unknown";
  if (*(_BYTE *)(a1 + 18) == 1)
    v12 = "r1 active";
  if (*(_BYTE *)(a1 + 18))
    v13 = v12;
  else
    v13 = "r1 paused";
  return std::string::append(a2, v13);
}

void sub_1003620A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  if (*(char *)(v21 + 23) < 0)
    operator delete(*(void **)v21);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003620F8(uint64_t a1, __int16 a2, __int16 a3, char a4, __int16 a5, char a6, _QWORD *a7, int a8, double a9, double a10, double a11, double a12, double a13, double a14, double a15, uint64_t a16, __int128 a17, __int128 a18, __int128 a19, __int128 a20,__int128 a21,__int16 a22,int a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,int a32,__int16 a33,int a34,int a35,int a36,__int16 a37,__int16 a38,__int16 a39,__int16 a40,__int16 a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,__int128 a50,__int16 a51,int a52,__int16 a53,int a54,__int16 a55,int a56,int a57,int a58,int a59,int a60,int a61,int a62,__int16 a63)
{
  uint64_t a64;
  uint64_t a65;
  uint64_t a66;
  uint64_t a67;
  __int16 a68;
  __int16 a69;
  __int16 a70;
  __int16 a71;
  __int16 a72;
  uint64_t v74;
  uint64_t v75;
  double *v76;
  uint64_t v77;
  _QWORD v78[2];
  double v79;
  double v80;
  double v81;
  double v82;
  double v83;
  int v84;
  double v85;
  _QWORD *v86;
  char v87;
  __int16 v88;
  double v89;
  char v90;
  __int16 v91;
  __int16 v92;
  uint64_t v93;
  __int16 v94;
  __int16 v95;
  __int16 v96;
  __int16 v97;
  __int16 v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  __int16 v103;
  int v104;
  int v105;
  int v106;
  __int16 v107;
  __int16 v108;
  __int16 v109;
  __int128 v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  __int16 v119;
  int v120;
  __int16 v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  uint64_t v133;

  v132 = a17;
  v131 = a18;
  v130 = a19;
  v129 = a20;
  v128 = a21;
  v127 = a26;
  v126 = a25;
  v125 = a28;
  v124 = a27;
  v123 = a30;
  v122 = a29;
  v121 = a33;
  v120 = a35;
  v119 = a41;
  v118 = a43;
  v117 = a42;
  v116 = a45;
  v115 = a44;
  v114 = a47;
  v113 = a46;
  v112 = a49;
  v111 = a48;
  v110 = a50;
  v109 = a51;
  v108 = a53;
  v107 = a55;
  v106 = a57;
  v105 = a59;
  v104 = a61;
  v103 = a63;
  v102 = a65;
  v101 = a64;
  v100 = a67;
  v99 = a66;
  v98 = a68;
  v97 = a69;
  v96 = a70;
  v95 = a71;
  v94 = a72;
  v93 = a1;
  v92 = a2;
  v91 = a3;
  v90 = a4;
  v89 = a9;
  v88 = a5;
  v87 = a6;
  v86 = a7;
  v85 = a10;
  v84 = a8;
  v83 = a11;
  v82 = a12;
  v81 = a13;
  v80 = a14;
  v79 = a15;
  v133 = a1;
  *(_WORD *)a1 = a2;
  *(_WORD *)(a1 + 2) = v91;
  *(_BYTE *)(a1 + 4) = v90;
  *(double *)(a1 + 8) = v89;
  *(_WORD *)(a1 + 16) = v88;
  *(_BYTE *)(a1 + 18) = v87;
  *(_QWORD *)(a1 + 19) = *v86;
  *(double *)(a1 + 32) = v85;
  sub_100362680((_QWORD *)(a1 + 40), a16);
  *(double *)(a1 + 64) = v83;
  *(double *)(a1 + 72) = v82;
  *(_OWORD *)(a1 + 80) = v110;
  *(_OWORD *)(a1 + 96) = v132;
  *(_OWORD *)(a1 + 112) = v131;
  *(_OWORD *)(a1 + 128) = v130;
  *(double *)(a1 + 144) = v81;
  *(double *)(a1 + 152) = v80;
  *(_OWORD *)(a1 + 160) = v129;
  *(_OWORD *)(a1 + 176) = v128;
  *(_WORD *)(a1 + 192) = a22;
  *(_DWORD *)(a1 + 196) = a23;
  *(double *)(a1 + 200) = v79;
  *(double *)(a1 + 208) = sub_100030350(v85);
  *(_BYTE *)(a1 + 216) = a24;
  *(_QWORD *)(a1 + 224) = v126;
  *(_QWORD *)(a1 + 232) = v127;
  *(_QWORD *)(a1 + 240) = v124;
  *(_QWORD *)(a1 + 248) = v125;
  *(_QWORD *)(a1 + 256) = v122;
  *(_QWORD *)(a1 + 264) = v123;
  *(_BYTE *)(a1 + 272) = a31;
  *(_WORD *)(a1 + 273) = v121;
  *(_DWORD *)(a1 + 276) = v120;
  *(_WORD *)(a1 + 280) = a37;
  *(_WORD *)(a1 + 282) = a38;
  *(_WORD *)(a1 + 284) = a39;
  *(_WORD *)(a1 + 286) = v119;
  *(_QWORD *)(a1 + 288) = v117;
  *(_QWORD *)(a1 + 296) = v118;
  *(_QWORD *)(a1 + 304) = v115;
  *(_QWORD *)(a1 + 312) = v116;
  *(_QWORD *)(a1 + 320) = v113;
  *(_QWORD *)(a1 + 328) = v114;
  *(_QWORD *)(a1 + 336) = v111;
  *(_QWORD *)(a1 + 344) = v112;
  *(_WORD *)(a1 + 352) = v109;
  *(_WORD *)(a1 + 354) = v108;
  *(_WORD *)(a1 + 356) = v107;
  *(_DWORD *)(a1 + 358) = v106;
  *(_DWORD *)(a1 + 362) = v105;
  *(_DWORD *)(a1 + 366) = v104;
  *(_WORD *)(a1 + 370) = v103;
  *(_QWORD *)(a1 + 376) = v101;
  *(_QWORD *)(a1 + 384) = v102;
  *(_QWORD *)(a1 + 392) = v99;
  *(_QWORD *)(a1 + 400) = v100;
  *(_WORD *)(a1 + 408) = v98;
  *(_WORD *)(a1 + 410) = v97;
  *(_WORD *)(a1 + 412) = v96;
  *(_WORD *)(a1 + 414) = v95;
  *(_WORD *)(a1 + 416) = v94;
  sub_1003626D0((_BYTE *)(a1 + 424));
  sub_1003626D0((_BYTE *)(a1 + 440));
  if (!v84)
  {
    v78[1] = a1 + 40;
    v78[0] = sub_1003626DC(a1 + 40);
    v77 = sub_1003626E4(a1 + 40);
    while (sub_1003626EC(v78, &v77))
    {
      v76 = (double *)sub_1003626DC((uint64_t)v78);
      v75 = 0;
      v74 = 0;
      sub_1000303D8((long double *)&v75, (double *)&v74, *v76, v76[1]);
      *(_QWORD *)v76 = v75;
      *((_QWORD *)v76 + 1) = v74;
      sub_100362700(v78);
    }
  }
  return v133;
}

_QWORD *sub_100362680(_QWORD *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  sub_100137690(a1, *(const void **)a2, *(_QWORD *)(a2 + 8), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3));
  return a1;
}

_BYTE *sub_1003626D0(_BYTE *result)
{
  *result = 0;
  result[8] = 0;
  return result;
}

uint64_t sub_1003626DC(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t sub_1003626E4(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

BOOL sub_1003626EC(_QWORD *a1, _QWORD *a2)
{
  return *a1 != *a2;
}

_QWORD *sub_100362700(_QWORD *result)
{
  *result += 56;
  return result;
}

uint64_t sub_100362710(uint64_t a1)
{
  void *v2;

  v2 = *(void **)a1;
  if (v2)
  {
    *(_QWORD *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_100362740(uint64_t a1, __int16 a2, __int16 a3, char a4, __int16 a5, char a6, _QWORD *a7, int a8, double a9, double a10, double a11, double a12, double a13, double a14, double a15, uint64_t a16, __int128 a17, __int128 a18, __int128 a19, __int128 a20,__int128 a21,__int16 a22,int a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,int a32,__int16 a33,int a34,int a35,int a36,__int16 a37,__int16 a38,__int16 a39,__int16 a40,__int16 a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,__int128 a50,__int16 a51,int a52,__int16 a53,int a54,__int16 a55,int a56,int a57,int a58,int a59,int a60,int a61,int a62,__int16 a63)
{
  int v64;
  __int16 v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;

  return sub_1003620F8(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           v64,
           a33,
           v73,
           a35,
           v72,
           a37,
           a38,
           a39,
           v65,
           a41,
           a42,
           a43,
           a44,
           a45,
           a46,
           a47,
           a48,
           a49,
           a50,
           a51,
           v71,
           a53,
           v70,
           a55,
           v69,
           a57,
           v68,
           a59,
           v67,
           a61,
           v66,
           a63);
}

uint64_t sub_100362D08(uint64_t a1, __int16 a2, __int16 a3, char a4, uint64_t a5, __int16 a6, __int16 a7, __int16 a8, double a9, double a10, char a11, char a12, char a13, char a14, char a15, char a16, char a17, char a18, char a19, char a20,uint64_t a21)
{
  const void *v22;
  uint64_t v23;
  unint64_t v24;

  *(_WORD *)a1 = a2;
  *(_WORD *)(a1 + 2) = a3;
  *(_BYTE *)(a1 + 4) = a4;
  *(double *)(a1 + 8) = a9;
  *(_QWORD *)(a1 + 16) = a5;
  *(_WORD *)(a1 + 24) = a6;
  *(_WORD *)(a1 + 26) = a7;
  *(_WORD *)(a1 + 28) = a8;
  *(_BYTE *)(a1 + 30) = a11;
  *(_BYTE *)(a1 + 31) = a12;
  *(_BYTE *)(a1 + 32) = a13;
  *(_BYTE *)(a1 + 33) = a14;
  *(_BYTE *)(a1 + 34) = a15;
  *(_BYTE *)(a1 + 35) = a16;
  *(double *)(a1 + 40) = a10;
  *(_BYTE *)(a1 + 48) = a17;
  *(_BYTE *)(a1 + 49) = a18;
  *(_BYTE *)(a1 + 50) = a19;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  v22 = *(const void **)a21;
  v23 = *(_QWORD *)(a21 + 8);
  v24 = (v23 - *(_QWORD *)a21) >> 4;
  *(_BYTE *)(a1 + 51) = a20;
  sub_10015366C((_QWORD *)(a1 + 56), v22, v23, v24);
  return a1;
}

uint64_t sub_100362DBC(uint64_t result, _QWORD *a2, uint64_t a3, int a4)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  *(_QWORD *)result = 850045863;
  *(_OWORD *)(result + 8) = 0u;
  *(_OWORD *)(result + 24) = 0u;
  *(_OWORD *)(result + 40) = 0u;
  *(_QWORD *)(result + 56) = 0;
  v4 = a2[1];
  *(_QWORD *)(result + 64) = *a2;
  *(_QWORD *)(result + 72) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *(_QWORD *)(result + 80) = a3;
  *(_DWORD *)(result + 88) = a4;
  *(_DWORD *)(result + 96) = a4;
  *(_BYTE *)(result + 100) = 1;
  *(_OWORD *)(result + 101) = 0uLL;
  *(_OWORD *)(result + 117) = 0uLL;
  *(_OWORD *)(result + 133) = 0uLL;
  *(_DWORD *)(result + 148) = 0;
  return result;
}

void sub_100362E24(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  _QWORD *v25;
  char *v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  char *v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  char *v39;
  unint64_t *v40;
  unint64_t v41;
  char *v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  _BYTE *v46;
  uint64_t v47;
  void **v48;
  uint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  char *v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  unint64_t *p_shared_owners;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t *v74;
  unint64_t v75;
  char *v76;
  __int128 v77;
  uint64_t v78;
  unint64_t *v79;
  unint64_t v80;
  char *v81;
  __int128 v82;
  uint64_t v83;
  unint64_t *v84;
  unint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  __int128 *v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  void **v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  void **v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  __int16 v100;
  __int128 v101;
  void *__p;
  _BYTE *v103;
  uint64_t v104;
  uint64_t v105;
  std::__shared_weak_count *v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  uint64_t v111;
  std::__shared_weak_count *v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  uint64_t v116;
  std::__shared_weak_count *v117;
  __int128 v118;
  __int128 v119;
  uint64_t v120;
  uint64_t v121;
  std::__shared_weak_count *v122;
  int v123;
  __int16 v124;
  uint64_t v125;
  std::__shared_weak_count *v126;
  char v127;
  char *v128;
  _BYTE v129[24];
  _BYTE *v130;
  _BYTE v131[24];
  _BYTE *v132;
  _BYTE v133[24];
  _BYTE *v134;
  _BYTE v135[24];
  _BYTE *v136;
  _BYTE v137[24];
  _BYTE *v138;
  _QWORD v139[2];
  __int128 v140;
  uint64_t v141;
  __int128 v142;
  uint64_t v143;
  __int128 v144;
  uint64_t v145;
  _BYTE v146[24];
  _BYTE *v147;
  uint64_t v148;
  std::__shared_weak_count *v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  uint64_t v165;
  _BYTE v166[24];
  char *v167;
  _BYTE v168[24];
  _BYTE *v169;
  _QWORD v170[2];
  __int128 v171;
  __int128 v172;
  uint64_t v173;
  __int128 v174;
  uint64_t v175;
  _BYTE v176[385];
  void *v177;
  int v178[2];
  uint64_t v179;
  void **v180;
  __int128 v181;
  _BYTE v182[48];
  _BYTE v183[385];

  v125 = 0;
  v126 = 0;
  v9 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v9)
  {
    v12 = 0;
LABEL_16:
    sub_1000051BC("No event listener, ignoring event packet", a2, (uint64_t)a3, a4, a5, a6, a7, a8, v98);
    goto LABEL_17;
  }
  v12 = std::__shared_weak_count::lock(v9);
  v126 = v12;
  if (!v12)
    goto LABEL_16;
  v13 = *(_QWORD *)(a1 + 64);
  v125 = v13;
  if (!v13)
    goto LABEL_16;
  v14 = sub_10036A9E4(a2);
  if (!v14)
  {
    v37 = sub_10036AA4C(a2);
    if (v37 > 511)
    {
      switch(v37)
      {
        case 512:
          sub_10036CAF0("handleEvent: got time sync event packet - expected AOP to handle this for us!", v15, v16, v17, v18, v19, v20, v21, v98);
          goto LABEL_84;
        case 513:
          sub_100363DA4(a3, (uint64_t)&v181);
          v170[0] = v13;
          v170[1] = v12;
          p_shared_owners = (unint64_t *)&v12->__shared_owners_;
          do
            v62 = __ldxr(p_shared_owners);
          while (__stxr(v62 + 1, p_shared_owners));
          v173 = *(_QWORD *)&v182[16];
          v171 = v181;
          v172 = *(_OWORD *)v182;
          v174 = *(_OWORD *)&v182[24];
          v175 = *(_QWORD *)&v182[40];
          memset(&v182[24], 0, 24);
          memcpy(v176, v183, sizeof(v176));
          sub_100364C2C((uint64_t)&v177, (uint64_t)v170);
          sub_100364CC0((uint64_t)v170);
          v63 = *(_QWORD *)(a1 + 80);
          v64 = (uint64_t)v180;
          if (!v180)
            goto LABEL_56;
          if (v180 == &v177)
          {
            v169 = v168;
            (*((void (**)(void **, _BYTE *))v177 + 3))(&v177, v168);
          }
          else
          {
            v64 = (*((uint64_t (**)(void))*v180 + 2))();
LABEL_56:
            v169 = (_BYTE *)v64;
          }
          sub_10036159C(v63, (uint64_t)v168);
          v90 = v169;
          if (v169 == v168)
          {
            v91 = 4;
            v90 = v168;
          }
          else
          {
            if (!v169)
              goto LABEL_111;
            v91 = 5;
          }
          (*(void (**)(void))(*v90 + 8 * v91))();
LABEL_111:
          v92 = v180;
          if (v180 == &v177)
          {
            v93 = 4;
            v92 = &v177;
          }
          else
          {
            if (!v180)
              goto LABEL_116;
            v93 = 5;
          }
          (*((void (**)(void))*v92 + v93))();
LABEL_116:
          if (*(_QWORD *)&v182[24])
          {
            *(_QWORD *)&v182[32] = *(_QWORD *)&v182[24];
            operator delete(*(void **)&v182[24]);
          }
          goto LABEL_84;
        case 515:
          v65 = sub_100364CF0((uint64_t)a3);
          v121 = v13;
          v122 = v12;
          v66 = (unint64_t *)&v12->__shared_owners_;
          do
            v67 = __ldxr(v66);
          while (__stxr(v67 + 1, v66));
          v123 = v65;
          v124 = WORD2(v65);
          v68 = operator new(0x20uLL);
          *v68 = off_100816FB8;
          v68[1] = v13;
          v68[2] = v12;
          v121 = 0;
          v122 = 0;
          *((_DWORD *)v68 + 6) = v123;
          *((_WORD *)v68 + 14) = v124;
          *(_QWORD *)&v182[8] = v68;
          sub_10001AE68((uint64_t)&v121);
          v69 = *(_QWORD *)(a1 + 80);
          v167 = (char *)(*(uint64_t (**)(_QWORD *))(*v68 + 16))(v68);
          sub_10036159C(v69, (uint64_t)v166);
          v30 = v167;
          if (v167 != v166)
            goto LABEL_13;
          v31 = 4;
          v30 = v166;
          goto LABEL_44;
        case 516:
          sub_100364D8C(a3, v15, v16, v17, v18, v19, v20, v21, (uint64_t)&v181);
          v148 = v13;
          v149 = v12;
          v50 = (unint64_t *)&v12->__shared_owners_;
          do
            v51 = __ldxr(v50);
          while (__stxr(v51 + 1, v50));
          v162 = *(_OWORD *)&v183[128];
          v163 = *(_OWORD *)&v183[144];
          v164 = *(_OWORD *)&v183[160];
          v165 = *(_QWORD *)&v183[176];
          v158 = *(_OWORD *)&v183[64];
          v159 = *(_OWORD *)&v183[80];
          v160 = *(_OWORD *)&v183[96];
          v161 = *(_OWORD *)&v183[112];
          v154 = *(_OWORD *)v183;
          v155 = *(_OWORD *)&v183[16];
          v156 = *(_OWORD *)&v183[32];
          v157 = *(_OWORD *)&v183[48];
          v150 = v181;
          v151 = *(_OWORD *)v182;
          v152 = *(_OWORD *)&v182[16];
          v153 = *(_OWORD *)&v182[32];
          v52 = (char *)operator new(0x110uLL);
          v53 = *(_OWORD *)&v183[144];
          *(_OWORD *)(v52 + 216) = *(_OWORD *)&v183[128];
          *(_OWORD *)(v52 + 232) = v53;
          *(_OWORD *)(v52 + 248) = *(_OWORD *)&v183[160];
          v54 = *(_OWORD *)&v183[80];
          *(_OWORD *)(v52 + 152) = *(_OWORD *)&v183[64];
          *(_OWORD *)(v52 + 168) = v54;
          v55 = *(_OWORD *)&v183[112];
          *(_OWORD *)(v52 + 184) = *(_OWORD *)&v183[96];
          *(_OWORD *)(v52 + 200) = v55;
          v56 = *(_OWORD *)&v183[16];
          *(_OWORD *)(v52 + 88) = *(_OWORD *)v183;
          *(_OWORD *)(v52 + 104) = v56;
          v57 = *(_OWORD *)&v183[48];
          *(_OWORD *)(v52 + 120) = *(_OWORD *)&v183[32];
          *(_OWORD *)(v52 + 136) = v57;
          v58 = *(_OWORD *)v182;
          *(_OWORD *)(v52 + 24) = v181;
          *(_OWORD *)(v52 + 40) = v58;
          v59 = *(_OWORD *)&v182[32];
          *(_OWORD *)(v52 + 56) = *(_OWORD *)&v182[16];
          *(_QWORD *)v52 = off_100817038;
          *((_QWORD *)v52 + 1) = v13;
          *((_QWORD *)v52 + 2) = v12;
          v149 = 0;
          v148 = 0;
          *((_QWORD *)v52 + 33) = *(_QWORD *)&v183[176];
          *(_OWORD *)(v52 + 72) = v59;
          v180 = (void **)v52;
          sub_10001AE68((uint64_t)&v148);
          v60 = *(_QWORD *)(a1 + 80);
          v147 = (_BYTE *)(*(uint64_t (**)(char *))(*(_QWORD *)v52 + 16))(v52);
          sub_10036159C(v60, (uint64_t)v146);
          v46 = v147;
          if (v147 != v146)
            goto LABEL_76;
          v47 = 4;
          v46 = v146;
          goto LABEL_78;
        case 517:
          sub_10036AE34(a1 + 96, (uint64_t)a3, &v181);
          if (!v183[8])
            goto LABEL_129;
          v139[0] = v13;
          v139[1] = v12;
          v70 = (unint64_t *)&v12->__shared_owners_;
          do
            v71 = __ldxr(v70);
          while (__stxr(v71 + 1, v70));
          if (!v183[8])
            sub_10000BA44();
          v141 = *(_QWORD *)v182;
          v140 = v181;
          v142 = *(_OWORD *)&v182[8];
          v143 = *(_QWORD *)&v182[24];
          memset(&v182[8], 0, 40);
          v144 = *(_OWORD *)&v182[32];
          v145 = *(_QWORD *)v183;
          *(_QWORD *)v183 = 0;
          sub_10036528C((uint64_t)&v177, (uint64_t)v139);
          sub_100365310((uint64_t)v139);
          v72 = *(_QWORD *)(a1 + 80);
          v73 = (uint64_t)v180;
          if (!v180)
            goto LABEL_68;
          if (v180 == &v177)
          {
            v138 = v137;
            (*((void (**)(void **, _BYTE *))v177 + 3))(&v177, v137);
          }
          else
          {
            v73 = (*((uint64_t (**)(void))*v180 + 2))();
LABEL_68:
            v138 = (_BYTE *)v73;
          }
          sub_10036159C(v72, (uint64_t)v137);
          v94 = v138;
          if (v138 == v137)
          {
            v95 = 4;
            v94 = v137;
          }
          else
          {
            if (!v138)
              goto LABEL_124;
            v95 = 5;
          }
          (*(void (**)(void))(*v94 + 8 * v95))();
LABEL_124:
          v96 = v180;
          if (v180 == &v177)
          {
            v97 = 4;
            v96 = &v177;
          }
          else
          {
            if (!v180)
              goto LABEL_129;
            v97 = 5;
          }
          (*((void (**)(void))*v96 + v97))();
LABEL_129:
          sub_10016BD90((uint64_t)&v181);
          break;
        case 522:
          goto LABEL_84;
        default:
          goto LABEL_89;
      }
      goto LABEL_84;
    }
    switch(v37)
    {
      case 'Q':
        sub_10036535C((uint64_t)a3, (uint64_t)&v181);
        v116 = v13;
        v117 = v12;
        v74 = (unint64_t *)&v12->__shared_owners_;
        do
          v75 = __ldxr(v74);
        while (__stxr(v75 + 1, v74));
        v118 = v181;
        v119 = *(_OWORD *)v182;
        v120 = *(_QWORD *)&v182[16];
        v76 = (char *)operator new(0x40uLL);
        *(_QWORD *)v76 = off_100817138;
        *((_QWORD *)v76 + 1) = v13;
        *((_QWORD *)v76 + 2) = v12;
        v116 = 0;
        v117 = 0;
        v77 = *(_OWORD *)v182;
        *(_OWORD *)(v76 + 24) = v181;
        *(_OWORD *)(v76 + 40) = v77;
        *((_QWORD *)v76 + 7) = *(_QWORD *)&v182[16];
        v180 = (void **)v76;
        sub_10001AE68((uint64_t)&v116);
        v78 = *(_QWORD *)(a1 + 80);
        v136 = (_BYTE *)(*(uint64_t (**)(char *))(*(_QWORD *)v76 + 16))(v76);
        sub_10036159C(v78, (uint64_t)v135);
        v46 = v136;
        if (v136 == v135)
        {
          v47 = 4;
          v46 = v135;
          goto LABEL_78;
        }
        break;
      case 'T':
        sub_10036546C(a3, (uint64_t)&v181);
        v111 = v13;
        v112 = v12;
        v79 = (unint64_t *)&v12->__shared_owners_;
        do
          v80 = __ldxr(v79);
        while (__stxr(v80 + 1, v79));
        v113 = v181;
        v114 = *(_OWORD *)v182;
        v115 = *(_OWORD *)&v182[16];
        v81 = (char *)operator new(0x48uLL);
        *(_QWORD *)v81 = off_1008171B8;
        *((_QWORD *)v81 + 1) = v13;
        *((_QWORD *)v81 + 2) = v12;
        v111 = 0;
        v112 = 0;
        v82 = *(_OWORD *)v182;
        *(_OWORD *)(v81 + 24) = v181;
        *(_OWORD *)(v81 + 40) = v82;
        *(_OWORD *)(v81 + 56) = *(_OWORD *)&v182[16];
        v180 = (void **)v81;
        sub_10001AE68((uint64_t)&v111);
        v83 = *(_QWORD *)(a1 + 80);
        v134 = (_BYTE *)(*(uint64_t (**)(char *))(*(_QWORD *)v81 + 16))(v81);
        sub_10036159C(v83, (uint64_t)v133);
        v46 = v134;
        if (v134 == v133)
        {
          v47 = 4;
          v46 = v133;
          goto LABEL_78;
        }
        break;
      case 'U':
        sub_100365774(a3, (uint64_t)&v181);
        v105 = v13;
        v106 = v12;
        v40 = (unint64_t *)&v12->__shared_owners_;
        do
          v41 = __ldxr(v40);
        while (__stxr(v41 + 1, v40));
        v107 = v181;
        v108 = *(_OWORD *)v182;
        v109 = *(_OWORD *)&v182[16];
        v110 = *(_OWORD *)&v182[32];
        v42 = (char *)operator new(0x58uLL);
        v43 = *(_OWORD *)v182;
        *(_OWORD *)(v42 + 24) = v181;
        *(_OWORD *)(v42 + 40) = v43;
        v44 = *(_OWORD *)&v182[32];
        *(_OWORD *)(v42 + 56) = *(_OWORD *)&v182[16];
        *(_QWORD *)v42 = off_100817238;
        *((_QWORD *)v42 + 1) = v13;
        *((_QWORD *)v42 + 2) = v12;
        v105 = 0;
        v106 = 0;
        *(_OWORD *)(v42 + 72) = v44;
        v180 = (void **)v42;
        sub_10001AE68((uint64_t)&v105);
        v45 = *(_QWORD *)(a1 + 80);
        v132 = (_BYTE *)(*(uint64_t (**)(char *))(*(_QWORD *)v42 + 16))(v42);
        sub_10036159C(v45, (uint64_t)v131);
        v46 = v132;
        if (v132 == v131)
        {
          v47 = 4;
          v46 = v131;
          goto LABEL_78;
        }
        break;
      default:
LABEL_89:
        v38 = *(unsigned __int16 *)(a2 + 2);
        v39 = "got ranging event with unknown message ID 0x%02x";
        goto LABEL_35;
    }
LABEL_76:
    if (!v46)
      goto LABEL_79;
    v47 = 5;
LABEL_78:
    (*(void (**)(void))(*(_QWORD *)v46 + 8 * v47))();
LABEL_79:
    v48 = v180;
    if (v180 == &v177)
    {
      v49 = 4;
      v48 = &v177;
      goto LABEL_83;
    }
    goto LABEL_80;
  }
  if (v14 == 1)
  {
    if (sub_10036ACB0(a2) != 83)
    {
      v38 = *(unsigned __int16 *)(a2 + 2);
      v39 = "got debug event with unknown message ID 0x%02x";
      goto LABEL_35;
    }
    if (!sub_100365B1C(a1, (uint64_t)a3))
      goto LABEL_84;
    *(_QWORD *)v178 = 0;
    v177 = 0;
    v179 = 0;
    sub_1001530EC(&v177, *(const void **)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 136) - *(_QWORD *)(a1 + 128));
    *(_QWORD *)&v101 = v13;
    *((_QWORD *)&v101 + 1) = v12;
    v32 = (unint64_t *)&v12->__shared_owners_;
    do
      v33 = __ldxr(v32);
    while (__stxr(v33 + 1, v32));
    __p = 0;
    v103 = 0;
    v104 = 0;
    sub_1001530EC(&__p, v177, *(uint64_t *)v178, *(_QWORD *)v178 - (_QWORD)v177);
    v34 = (char *)operator new(0x30uLL);
    *(_QWORD *)v34 = off_1008172B8;
    *(_OWORD *)(v34 + 8) = v101;
    *((_QWORD *)v34 + 4) = 0;
    *((_QWORD *)v34 + 5) = 0;
    *((_QWORD *)v34 + 3) = 0;
    sub_1001530EC((_QWORD *)v34 + 3, __p, (uint64_t)v103, v103 - (_BYTE *)__p);
    *(_QWORD *)&v182[8] = v34;
    if (__p)
    {
      v103 = __p;
      operator delete(__p);
    }
    v35 = *(_QWORD *)(a1 + 80);
    v36 = *(_QWORD *)&v182[8];
    if (*(_QWORD *)&v182[8])
    {
      if (*(__int128 **)&v182[8] == &v181)
      {
        v130 = v129;
        (*(void (**)(__int128 *, _BYTE *))(v181 + 24))(&v181, v129);
LABEL_91:
        sub_10036159C(v35, (uint64_t)v129);
        v86 = v130;
        if (v130 == v129)
        {
          v87 = 4;
          v86 = v129;
        }
        else
        {
          if (!v130)
            goto LABEL_96;
          v87 = 5;
        }
        (*(void (**)(void))(*v86 + 8 * v87))();
LABEL_96:
        v88 = *(__int128 **)&v182[8];
        if (*(__int128 **)&v182[8] == &v181)
        {
          v89 = 4;
          v88 = &v181;
        }
        else
        {
          if (!*(_QWORD *)&v182[8])
          {
LABEL_101:
            if (v177)
            {
              *(_QWORD *)v178 = v177;
              operator delete(v177);
            }
            v12 = v126;
LABEL_17:
            if (!v12)
              return;
            goto LABEL_84;
          }
          v89 = 5;
        }
        (*(void (**)(void))(*(_QWORD *)v88 + 8 * v89))();
        goto LABEL_101;
      }
      v36 = (*(uint64_t (**)(void))(**(_QWORD **)&v182[8] + 16))();
    }
    v130 = (_BYTE *)v36;
    goto LABEL_91;
  }
  if (v14 != 2)
  {
    v38 = *(unsigned __int8 *)(a2 + 1);
    v39 = "got response packet with unknown groupID 0x%02x";
LABEL_35:
    sub_10036CAF0(v39, v15, v16, v17, v18, v19, v20, v21, v38);
    goto LABEL_84;
  }
  if (sub_10036AD58(a2) != 128)
  {
    v38 = *(unsigned __int16 *)(a2 + 2);
    v39 = "got factory test event with unknown message ID 0x%02x";
    goto LABEL_35;
  }
  v22 = sub_100365CB0((uint64_t)a3);
  v23 = (unint64_t *)&v12->__shared_owners_;
  do
    v24 = __ldxr(v23);
  while (__stxr(v24 + 1, v23));
  v99 = v22;
  v100 = WORD2(v22);
  v25 = operator new(0x20uLL);
  *v25 = off_100817338;
  v25[1] = v13;
  v25[2] = v12;
  *((_DWORD *)v25 + 6) = v99;
  v26 = (char *)(v25 + 3);
  *((_WORD *)v25 + 14) = v100;
  *(_QWORD *)&v182[8] = v25;
  v27 = *(_QWORD *)(a1 + 80);
  v28 = operator new(0x20uLL);
  *v28 = off_100817338;
  v28[1] = v13;
  v28[2] = v12;
  do
    v29 = __ldxr(v23);
  while (__stxr(v29 + 1, v23));
  *((_DWORD *)v28 + 6) = *(_DWORD *)v26;
  *((_WORD *)v28 + 14) = *((_WORD *)v26 + 2);
  v128 = (char *)v28;
  sub_10036159C(v27, (uint64_t)&v127);
  v30 = v128;
  if (v128 == &v127)
  {
    v31 = 4;
    v30 = &v127;
  }
  else
  {
LABEL_13:
    if (!v30)
      goto LABEL_45;
    v31 = 5;
  }
LABEL_44:
  (*(void (**)(void))(*(_QWORD *)v30 + 8 * v31))();
LABEL_45:
  v48 = *(void ***)&v182[8];
  if (*(__int128 **)&v182[8] == &v181)
  {
    v49 = 4;
    v48 = (void **)&v181;
    goto LABEL_83;
  }
LABEL_80:
  if (!v48)
    goto LABEL_84;
  v49 = 5;
LABEL_83:
  (*((void (**)(void))*v48 + v49))();
LABEL_84:
  v84 = (unint64_t *)&v12->__shared_owners_;
  do
    v85 = __ldaxr(v84);
  while (__stlxr(v85 - 1, v84));
  if (!v85)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
}

void sub_1003639C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46)
{
  unint64_t *v47;
  uint64_t v48;

  v47 = (unint64_t *)STACK[0x5A8];
  if ((unint64_t *)STACK[0x5A8] == &STACK[0x590])
  {
    v48 = 4;
    v47 = &STACK[0x590];
  }
  else
  {
    if (!v47)
      goto LABEL_6;
    v48 = 5;
  }
  (*(void (**)(void))(*v47 + 8 * v48))();
LABEL_6:
  sub_10016BD90((uint64_t)&STACK[0x5B0]);
  sub_10001AE68((uint64_t)&a46);
  _Unwind_Resume(a1);
}

uint64_t sub_100363DA4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  size_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int16 *v40;
  size_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  __int16 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  double v71;
  char v72;
  unint64_t v73;
  char v74;
  unsigned __int8 v75;
  unsigned int v76;
  double *v77;
  __int16 v78;
  __int16 v79;
  double *v80;
  uint64_t v81;
  double *v82;
  double *v83;
  double *v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  unsigned int v88;
  double v89;
  double v90;
  double v91;
  void *v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  char *v96;
  double *v97;
  char *v98;
  double *v99;
  double *v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  double v104;
  int v105;
  int v106;
  unsigned int v107;
  __int16 v108;
  __int16 v109;
  __int16 v110;
  int v111;
  double v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  std::runtime_error *exception;
  std::runtime_error *v131;
  std::runtime_error *v132;
  std::logic_error *v133;
  std::logic_error *v134;
  uint64_t v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  int v141;
  unint64_t v142;
  __int16 v143;
  __int128 v144;
  unsigned int v145;
  __int16 v146;
  unsigned int v147;
  __int16 v148;
  char v149;
  __int16 v150;
  char v151;
  int v152;
  __int16 v153;
  unsigned __int8 v154;
  uint64_t v155;
  unsigned __int8 v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  int v161;
  uint64_t v162;
  int v163;
  char v164;
  void *v166;
  void *__p;
  unint64_t v168;
  unsigned __int8 v169;
  __int16 v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  __int16 v175;
  unsigned __int8 v176;
  int v177;
  __int16 v178;
  __int16 v179;
  int v180;
  __int16 v181;
  char v182;
  int v183;
  char v184;
  __int16 v185;
  unsigned int v186;
  __int16 v187;
  int v188;
  int v189;
  int v190;
  int v191;
  int v192;
  int v193;
  uint64_t v194;
  __int16 v195;
  unint64_t v196;
  unsigned __int8 v197;
  int __dst;
  _BYTE v199[24];
  unsigned __int16 v200;
  char v201;
  uint64_t v202;

  v6 = sub_100004784();
  sub_10000BC94(v199, (uint64_t)v6);
  if (!v201)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Got event, but no cached hello response. Cannot guarantee correct parsing.");
  }
  v14 = __rev16(v200);
  sub_10036C9B0("RoseEventHandler::decodeRangeResultEvent: hsiVersion %hu", v7, v8, v9, v10, v11, v12, v13, v14);
  if (v14 <= 0x1D)
  {
    sub_10036CAF0("Unsupported HSI version.", v15, v16, v17, v18, v19, v20, v21, v135);
    v131 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v131, "Unsupported HSI version.");
  }
  v29 = *((unsigned int *)sub_100004784() + 187);
  switch((_DWORD)v29)
  {
    case 1:
      v31 = 112;
      v32 = 88;
      v162 = 85;
      v33 = 84;
      v158 = 97;
      v160 = 92;
      v34 = 87;
      v35 = 82;
      v36 = 81;
      v37 = 79;
      v38 = 77;
      v30 = 75;
      break;
    case 2:
      v31 = 112;
      v32 = 89;
      v162 = 86;
      v33 = 85;
      v158 = 98;
      v160 = 93;
      v34 = 88;
      v35 = 83;
      v36 = 82;
      v37 = 80;
      v38 = 78;
      v30 = 76;
      break;
    case 0:
      v133 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v133, "HSI version error");
    default:
      v30 = 0;
      v31 = 0;
      v32 = 13;
      v162 = 10;
      v33 = 9;
      v158 = 22;
      v160 = 17;
      v34 = 12;
      v35 = 7;
      v36 = 6;
      v37 = 4;
      v38 = 2;
      break;
  }
  v39 = *a1;
  if (a1[1] - *a1 != v31)
  {
    sub_10036CAF0("Range result event (%zu) not of expected size (%u)", v22, v23, v24, v25, v26, v27, v28, a1[1] - *a1);
    v132 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v132, "Range result event not of expected size");
  }
  __dst = 0;
  v197 = 0;
  v196 = 0;
  v195 = 0;
  v194 = 0;
  v193 = 0;
  v192 = 0;
  v191 = 0;
  v190 = 0;
  v189 = 0;
  v188 = 0;
  v187 = 0;
  v186 = 0;
  v185 = 0;
  v184 = 0;
  v183 = 0;
  v182 = 0;
  v181 = 0;
  v180 = 0;
  v179 = 0;
  v178 = 0;
  v177 = 0;
  v176 = 0;
  v175 = 0;
  v174 = 0;
  v173 = 0;
  v172 = 0;
  v171 = 0;
  v170 = 0;
  v169 = 0;
  sub_1003A1EE0((char *)(v39 + 4), 2uLL, (_BYTE *)&__dst + 2, 1);
  sub_1003A1EE0((char *)(*a1 + 6), 2uLL, &__dst, 1);
  sub_1003A1EE0((char *)(*a1 + 8), 1uLL, &v197, 1);
  sub_1003A1EE0((char *)(*a1 + 9), 8uLL, &v196, 1);
  sub_1003A1EE0((char *)(*a1 + 17), 2uLL, &v195, 1);
  v164 = *(_BYTE *)(*a1 + 19);
  sub_1003A1EE0((char *)(*a1 + 22), 4uLL, &v193, 1);
  sub_1003A1EE0((char *)(*a1 + 26), 2uLL, (_BYTE *)&v192 + 2, 1);
  sub_1003A1EE0((char *)(*a1 + 28), 2uLL, &v192, 1);
  sub_1003A1EE0((char *)(*a1 + 30), 2uLL, (_BYTE *)&v191 + 2, 1);
  sub_1003A1EE0((char *)(*a1 + 32), 2uLL, &v191, 1);
  sub_1003A1EE0((char *)(*a1 + 34), 4uLL, &v190, 1);
  sub_1003A1EE0((char *)(*a1 + 38), 2uLL, (_BYTE *)&v189 + 2, 1);
  sub_1003A1EE0((char *)(*a1 + 40), 2uLL, &v189, 1);
  sub_1003A1EE0((char *)(*a1 + 42), 2uLL, (_BYTE *)&v188 + 2, 1);
  sub_1003A1EE0((char *)(*a1 + 44), 2uLL, &v188, 1);
  sub_1003A1EE0((char *)(*a1 + 46), 2uLL, &v187, 1);
  sub_1003A1EE0((char *)(*a1 + 48), 4uLL, &v186, 1);
  sub_1003A1EE0((char *)(*a1 + 52), 1uLL, (_BYTE *)&v185 + 1, 1);
  sub_1003A1EE0((char *)(*a1 + 53), 1uLL, &v185, 1);
  sub_1003A1EE0((char *)(*a1 + 54), 1uLL, &v184, 1);
  sub_1003A1EE0((char *)(*a1 + 55), 2uLL, (_BYTE *)&v183 + 2, 1);
  sub_1003A1EE0((char *)(*a1 + 57), 2uLL, &v183, 1);
  sub_1003A1EE0((char *)(*a1 + 59), 8uLL, &v194, 1);
  sub_1003A1EE0((char *)(*a1 + 67), 1uLL, &v182, 1);
  sub_1003A1EE0((char *)(*a1 + 68), 2uLL, &v181, 1);
  sub_1003A1EE0((char *)(*a1 + 70), 2uLL, (_BYTE *)&v180 + 2, 1);
  sub_1003A1EE0((char *)(*a1 + 72), 2uLL, &v180, 1);
  if ((_DWORD)v29 == 1)
  {
    v40 = (__int16 *)((char *)&v179 + 1);
    v41 = v29;
  }
  else
  {
    if ((_DWORD)v29 != 2)
      goto LABEL_15;
    v40 = &v179;
    v41 = 2;
  }
  sub_1003A1EE0((char *)(*a1 + 74), v41, v40, 1);
LABEL_15:
  sub_1003A1EE0((char *)(*a1 + v30), 2uLL, &v178, 1);
  sub_1003A1EE0((char *)(*a1 + v38), 2uLL, (_BYTE *)&v177 + 2, 1);
  sub_1003A1EE0((char *)(*a1 + v37), 2uLL, &v177, 1);
  sub_1003A1EE0((char *)(*a1 + v36), 1uLL, &v176, 1);
  if ((_DWORD)v29 == 2)
  {
    sub_1003A1EE0((char *)(*a1 + v35), 2uLL, &v175, 1);
    sub_1003A1EE0((char *)(*a1 + v33), 1uLL, (_BYTE *)&v170 + 1, 1);
    sub_1003A1EE0((char *)(*a1 + v162), 1uLL, &v170, 1);
    v49 = 1;
    sub_1003A1EE0((char *)(*a1 + v32), 1uLL, &v169, 1);
  }
  else
  {
    if ((_DWORD)v29 == 1)
    {
      sub_1003A1EE0((char *)(*a1 + v35), 5uLL, &v174, 1);
      sub_1003A1EE0((char *)(*a1 + v34), 5uLL, &v173, 1);
      sub_1003A1EE0((char *)(*a1 + v160), 5uLL, &v172, 1);
      sub_1003A1EE0((char *)(*a1 + v158), 5uLL, &v171, 1);
    }
    v49 = 0;
  }
  v50 = sub_10036BAF8(HIWORD(__dst), v42, v43, v44, v45, v46, v47, v48);
  v58 = sub_10036B814(v197, v51, v52, v53, v54, v55, v56, v57);
  v59 = SHIWORD(v191);
  v60 = (__int16)v191;
  v61 = SHIBYTE(v185);
  v62 = (char)v185;
  v63 = v184;
  LOWORD(v4) = v181;
  LOWORD(v3) = HIWORD(v180);
  LOWORD(v2) = v180;
  v70 = *((_DWORD *)sub_100004784() + 187);
  v71 = 0.0;
  v163 = v60;
  v161 = v59;
  switch(v70)
  {
    case 1:
      v72 = sub_10036C348(HIBYTE(v179), 1, v64, v65, v66, v67, v68, v69);
      LOBYTE(v157) = 0;
      v159 = 0;
      v154 = 0;
      v155 = 0;
      v156 = 0;
      v153 = 0;
      break;
    case 2:
      v73 = sub_10036C550(v179);
      v72 = 9;
      if (v74)
      {
        v156 = v73;
        v153 = 256;
        v157 = HIDWORD(v73) & 0xFFFFFF;
        if ((v73 & 0xFF0000) != 0)
          v72 = BYTE1(v73);
        else
          v72 = 9;
        v154 = BYTE5(v73);
        v155 = BYTE6(v73);
      }
      else
      {
        v156 = 0;
        LOBYTE(v157) = 0;
        v154 = 0;
        v155 = 0;
        v153 = 0;
      }
      v71 = (double)v175 * 0.25;
      v159 = 1;
      break;
    case 0:
      v134 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v134, "Unknown HSI version");
    default:
      LOBYTE(v157) = 0;
      v159 = 0;
      v154 = 0;
      v155 = 0;
      v156 = 0;
      v153 = 0;
      v72 = 9;
      break;
  }
  __p = 0;
  v166 = 0;
  v168 = 0;
  v75 = v189;
  v76 = v189 & 0xF;
  v145 = v76;
  if (v76 == 15)
  {
    v77 = 0;
  }
  else
  {
    v78 = HIWORD(v192);
    v79 = v192;
    v80 = (double *)sub_100028A48((uint64_t)&v168, 1uLL);
    v82 = &v80[7 * v81];
    *v80 = (double)v78;
    v80[1] = (double)v79;
    v80[2] = (double)v76 * 0.0666666667;
    *((_BYTE *)v80 + 24) = 0;
    *((_BYTE *)v80 + 32) = 0;
    *((_BYTE *)v80 + 40) = 0;
    *((_BYTE *)v80 + 48) = 0;
    v77 = v80 + 7;
    v83 = (double *)__p;
    v84 = (double *)v166;
    if (__p != v166)
    {
      do
      {
        v85 = *(_OWORD *)(v83 - 7);
        v86 = *(_OWORD *)(v83 - 5);
        v87 = *(_OWORD *)(v83 - 3);
        *(v80 - 1) = *(v83 - 1);
        *(_OWORD *)(v80 - 3) = v87;
        *(_OWORD *)(v80 - 5) = v86;
        *(_OWORD *)(v80 - 7) = v85;
        v80 -= 7;
        v83 -= 7;
      }
      while (v83 != v84);
      v83 = v84;
    }
    v166 = v80;
    __p = v77;
    v168 = (unint64_t)v82;
    if (v83)
      operator delete(v83);
    __p = v77;
    v75 = v189;
  }
  v152 = v63;
  v88 = v75 >> 4;
  if (v88 != 15)
  {
    v89 = (double)SHIWORD(v183);
    v90 = (double)v88 * 0.0666666667;
    v91 = (double)(__int16)v183;
    if ((unint64_t)v77 >= v168)
    {
      v93 = 0x6DB6DB6DB6DB6DB7 * (((char *)v77 - (_BYTE *)v166) >> 3);
      if ((unint64_t)(v93 + 1) > 0x492492492492492)
        sub_100026E7C();
      v94 = 0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(v168 - (_QWORD)v166) >> 3);
      if (v94 <= v93 + 1)
        v94 = v93 + 1;
      if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v168 - (_QWORD)v166) >> 3)) >= 0x249249249249249)
        v95 = 0x492492492492492;
      else
        v95 = v94;
      if (v95)
        v96 = (char *)sub_100028A48((uint64_t)&v168, v95);
      else
        v96 = 0;
      v97 = (double *)&v96[8 * (((char *)v77 - (_BYTE *)v166) >> 3)];
      v98 = &v96[56 * v95];
      *v97 = v89;
      v97[1] = v91;
      v97[2] = v90;
      *((_BYTE *)v97 + 24) = 0;
      *((_BYTE *)v97 + 32) = 0;
      *((_BYTE *)v97 + 40) = 0;
      *((_BYTE *)v97 + 48) = 0;
      v92 = v97 + 7;
      v99 = (double *)__p;
      v100 = (double *)v166;
      if (__p != v166)
      {
        do
        {
          v101 = *(_OWORD *)(v99 - 7);
          v102 = *(_OWORD *)(v99 - 5);
          v103 = *(_OWORD *)(v99 - 3);
          *(v97 - 1) = *(v99 - 1);
          *(_OWORD *)(v97 - 3) = v103;
          *(_OWORD *)(v97 - 5) = v102;
          *(_OWORD *)(v97 - 7) = v101;
          v97 -= 7;
          v99 -= 7;
        }
        while (v99 != v100);
        v99 = v100;
      }
      v166 = v97;
      __p = v92;
      v168 = (unint64_t)v98;
      if (v99)
        operator delete(v99);
    }
    else
    {
      *v77 = v89;
      v77[1] = v91;
      v77[2] = v90;
      *((_BYTE *)v77 + 24) = 0;
      *((_BYTE *)v77 + 32) = 0;
      *((_BYTE *)v77 + 40) = 0;
      v92 = v77 + 7;
      *((_BYTE *)v77 + 48) = 0;
    }
    __p = v92;
  }
  v147 = v88;
  v149 = v72;
  v151 = v58;
  v150 = v50;
  v202 = v194;
  v148 = __dst;
  v104 = sub_100360CC4(v196);
  v146 = v195;
  v105 = v193;
  v106 = v190;
  v107 = HIWORD(v189);
  v108 = HIWORD(v188);
  v109 = v188;
  v110 = v187;
  v111 = v186;
  v112 = sub_100360CC4(v186);
  v113 = HIBYTE(v170) | 0x100;
  if (v49)
    v113 = 0;
  v114 = v170 | 0x100;
  if (v49)
    v114 = 0;
  *((_QWORD *)&v144 + 1) = v159;
  *(double *)&v144 = v71;
  v142 = v157 | (unint64_t)(v155 << 16) | ((unint64_t)v154 << 8);
  *((_QWORD *)&v140 + 1) = 1;
  *(double *)&v140 = (double)v109;
  *((_QWORD *)&v139 + 1) = 1;
  *(double *)&v139 = (double)v108;
  *((_QWORD *)&v138 + 1) = 1;
  *(double *)&v138 = (double)v152;
  *((_QWORD *)&v137 + 1) = 1;
  *(double *)&v137 = (double)v62;
  *((_QWORD *)&v136 + 1) = 1;
  *(double *)&v136 = (double)v61;
  sub_100362740(a2, v150, v148, v151, v146, v164, &v202, 0, v104, (double)v105, (double)v161 * 0.25, (double)v163 * 0.25, (double)v106, (double)v107, v112, (uint64_t)&v166, v136, v137, v138,
    v139,
    v140,
    v110,
    v111,
    v182,
    COERCE__INT64((double)v4 * 0.01),
    1,
    COERCE__INT64((double)v3 * 0.01),
    1,
    COERCE__INT64((double)v2 * 0.01),
    1,
    v149,
    v141,
    v153 & 0x100 | v156,
    (v153 & 0x100 | (unint64_t)v156) >> 32,
    v142,
    SHIDWORD(v142),
    v178,
    SHIWORD(v177),
    v177,
    v143,
    v176 | 0x100,
    v174,
    v174 != 0,
    v173,
    v173 != 0,
    v172,
    v172 != 0,
    v171,
    v171 != 0,
    v144,
    v113,
    SHIDWORD(v113),
    v114,
    SHIDWORD(v114),
    v169 | 0x100,
    (v169 | 0x100uLL) >> 32,
    0,
    0,
    0,
    0,
    0,
    0,
    0);
  if (*(_BYTE *)(a2 + 4) != 16)
  {
    if (v145 == 15)
      sub_1000051BC("Ignoring AOA hypothesis primary with az %d el %d intunc %d", v115, v116, v117, v118, v119, v120, v121, SHIWORD(v192));
    else
      sub_10036C9B0("AOA hypothesis primary: az %f el %f unc %f", v115, v116, v117, v118, v119, v120, v121, *(_QWORD *)v166);
    if (v147 == 15)
      sub_1000051BC("Ignoring AOA hypothesis alt1 with az %d el %d intunc %d", v122, v123, v124, v125, v126, v127, v128, SHIWORD(v183));
    else
      sub_10036C9B0("AOA hypothesis alt1: az %f el %f unc %f", v122, v123, v124, v125, v126, v127, v128, *((_QWORD *)__p - 7));
  }
  if (v166)
  {
    __p = v166;
    operator delete(v166);
  }
  return sub_10000BA78((uint64_t)v199);
}

void sub_100364B84(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  sub_10000BA78((uint64_t)&STACK[0x2A0]);
  _Unwind_Resume(a1);
}

uint64_t sub_100364C2C(uint64_t a1, uint64_t a2)
{
  char *v4;
  __int128 v5;
  __int128 v6;

  *(_QWORD *)(a1 + 24) = 0;
  v4 = (char *)operator new(0x1E0uLL);
  v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v4 + 8) = *(_OWORD *)a2;
  *(_QWORD *)v4 = off_100816F38;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_OWORD *)(v4 + 24) = v5;
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a2 + 32);
  *((_QWORD *)v4 + 7) = *(_QWORD *)(a2 + 48);
  v6 = *(_OWORD *)(a2 + 56);
  *((_QWORD *)v4 + 10) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  *((_OWORD *)v4 + 4) = v6;
  memcpy(v4 + 88, (const void *)(a2 + 80), 0x181uLL);
  *(_QWORD *)(a1 + 24) = v4;
  return a1;
}

uint64_t sub_100364CC0(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 56);
  if (v2)
  {
    *(_QWORD *)(a1 + 64) = v2;
    operator delete(v2);
  }
  return sub_10001AE68(a1);
}

unint64_t sub_100364CF0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int16 v18;
  int __dst;

  v1 = a1;
  __dst = 0;
  v18 = 0;
  sub_1003A1EE0((char *)(*(_QWORD *)a1 + 4), 2uLL, (_BYTE *)&__dst + 2, 1);
  sub_1003A1EE0((char *)(*(_QWORD *)v1 + 6), 2uLL, &__dst, 1);
  sub_1003A1EE0((char *)(*(_QWORD *)v1 + 8), 2uLL, &v18, 1);
  LODWORD(v1) = sub_10036BAF8(HIWORD(__dst), v2, v3, v4, v5, v6, v7, v8);
  v16 = sub_10036BAF8(v18, v9, v10, v11, v12, v13, v14, v15);
  return (v16 << 32) | ((unint64_t)(unsigned __int16)__dst << 16) | v1;
}

double sub_100364D8C@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  __int16 v21;
  __int16 v22;
  char v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  double result;
  std::runtime_error *exception;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  char v67;
  __int16 v68;
  unsigned __int8 v69;
  __int16 __dst;

  v10 = *a1;
  if (a1[1] - *a1 != 96)
  {
    sub_10036CAF0("Range debug event (%zu) not of expected size (%u)", a2, a3, a4, a5, a6, a7, a8, a1[1] - *a1);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_100365F78(exception, "Range debug event not of expected size");
  }
  v11 = a1;
  __dst = 0;
  v69 = 0;
  v68 = 0;
  v67 = 0;
  v65 = 0;
  v66 = 0;
  v64 = 0;
  v62 = 0;
  v63 = 0;
  v60 = 0;
  v61 = 0;
  v58 = 0;
  v59 = 0;
  v56 = 0;
  v57 = 0;
  v54 = 0;
  v55 = 0;
  v53 = 0;
  sub_1003A1EE0((char *)(v10 + 4), 2uLL, &__dst, 1);
  sub_1003A1EE0((char *)(*v11 + 6), 1uLL, &v69, 1);
  sub_1003A1EE0((char *)(*v11 + 7), 2uLL, &v68, 1);
  sub_1003A1EE0((char *)(*v11 + 9), 1uLL, &v67, 1);
  sub_1003A1EE0((char *)(*v11 + 12), 8uLL, &v65, 1);
  sub_1003A1EE0((char *)(*v11 + 20), 8uLL, &v64, 1);
  sub_1003A1EE0((char *)(*v11 + 28), 8uLL, &v63, 1);
  sub_1003A1EE0((char *)(*v11 + 36), 8uLL, &v62, 1);
  sub_1003A1EE0((char *)(*v11 + 44), 8uLL, &v61, 1);
  sub_1003A1EE0((char *)(*v11 + 52), 8uLL, &v60, 1);
  sub_1003A1EE0((char *)(*v11 + 60), 2uLL, (_BYTE *)&v59 + 2, 1);
  sub_1003A1EE0((char *)(*v11 + 62), 2uLL, &v59, 1);
  sub_1003A1EE0((char *)(*v11 + 64), 2uLL, (_BYTE *)&v58 + 2, 1);
  sub_1003A1EE0((char *)(*v11 + 66), 2uLL, &v58, 1);
  sub_1003A1EE0((char *)(*v11 + 68), 2uLL, (_BYTE *)&v57 + 2, 1);
  sub_1003A1EE0((char *)(*v11 + 70), 2uLL, &v57, 1);
  sub_1003A1EE0((char *)(*v11 + 72), 2uLL, (_BYTE *)&v56 + 2, 1);
  sub_1003A1EE0((char *)(*v11 + 74), 2uLL, &v56, 1);
  sub_1003A1EE0((char *)(*v11 + 76), 2uLL, (_BYTE *)&v55 + 2, 1);
  sub_1003A1EE0((char *)(*v11 + 78), 2uLL, &v55, 1);
  sub_1003A1EE0((char *)(*v11 + 80), 2uLL, (_BYTE *)&v54 + 2, 1);
  sub_1003A1EE0((char *)(*v11 + 82), 2uLL, &v54, 1);
  sub_1003A1EE0((char *)(*v11 + 84), 2uLL, (_BYTE *)&v53 + 2, 1);
  sub_1003A1EE0((char *)(*v11 + 86), 2uLL, &v53, 1);
  sub_1003A1EE0((char *)(*v11 + 88), 8uLL, &v66, 1);
  LOBYTE(v11) = sub_10036B814(v69, v12, v13, v14, v15, v16, v17, v18);
  v19 = v66;
  v51 = (double)SHIWORD(v57) * 0.25;
  v52 = (double)SHIWORD(v58) * 0.25;
  v49 = (double)(__int16)v57 * 0.25;
  v50 = (double)(__int16)v58 * 0.25;
  v47 = (double)SHIWORD(v56) * 0.25;
  v48 = (double)(__int16)v56 * 0.25;
  v45 = (double)SHIWORD(v54) * 0.25;
  v46 = (double)SHIWORD(v55) * 0.25;
  v43 = (double)(__int16)v54 * 0.25;
  v44 = (double)(__int16)v55 * 0.25;
  v20 = (double)SHIWORD(v53) * 0.25;
  v42 = (double)(__int16)v53 * 0.25;
  v21 = __dst;
  v22 = v68;
  v23 = v67;
  v24 = sub_100360CD8(v65);
  v25 = sub_100360CD8(v64);
  v26 = sub_100360CD8(v63);
  v27 = sub_100360CD8(v62);
  v28 = sub_100360CD8(v61);
  v29 = sub_100360CD8(v60);
  v30 = sub_100360CD8(HIWORD(v59));
  v31 = sub_100360CD8((unsigned __int16)v59);
  v33 = v64;
  v32 = v65;
  v35 = v62;
  v34 = v63;
  v37 = v60;
  v36 = v61;
  v38 = HIWORD(v59);
  v39 = (unsigned __int16)v59;
  *(_WORD *)a9 = v21;
  *(_BYTE *)(a9 + 2) = (_BYTE)v11;
  *(_WORD *)(a9 + 4) = v22;
  *(_BYTE *)(a9 + 6) = v23;
  *(_QWORD *)(a9 + 7) = v19;
  *(double *)(a9 + 24) = v24;
  *(double *)(a9 + 32) = v25;
  *(double *)(a9 + 40) = v26;
  *(double *)(a9 + 48) = v27;
  *(double *)(a9 + 56) = v28;
  *(double *)(a9 + 64) = v29;
  *(double *)(a9 + 72) = v30;
  *(double *)(a9 + 80) = v31;
  *(_QWORD *)(a9 + 88) = v32;
  *(_QWORD *)(a9 + 96) = v33;
  *(_QWORD *)(a9 + 104) = v34;
  *(_QWORD *)(a9 + 112) = v35;
  *(_QWORD *)(a9 + 120) = v36;
  *(_QWORD *)(a9 + 128) = v37;
  *(_QWORD *)(a9 + 136) = v38;
  *(_QWORD *)(a9 + 144) = v39;
  *(double *)(a9 + 152) = v52;
  *(double *)(a9 + 160) = v50;
  *(double *)(a9 + 168) = v51;
  *(double *)(a9 + 176) = v49;
  *(double *)(a9 + 184) = v47;
  *(double *)(a9 + 192) = v48;
  *(double *)(a9 + 200) = v46;
  *(double *)(a9 + 208) = v44;
  *(double *)(a9 + 216) = v45;
  *(double *)(a9 + 224) = v43;
  result = v42;
  *(double *)(a9 + 232) = v20;
  *(double *)(a9 + 240) = v42;
  *(_QWORD *)(a9 + 16) = v19;
  return result;
}

void sub_100365278(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10036528C(uint64_t a1, uint64_t a2)
{
  char *v4;
  __int128 v5;

  *(_QWORD *)(a1 + 24) = 0;
  v4 = (char *)operator new(0x60uLL);
  v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v4 + 8) = *(_OWORD *)a2;
  *(_QWORD *)v4 = off_1008170B8;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_OWORD *)(v4 + 24) = v5;
  *((_QWORD *)v4 + 5) = *(_QWORD *)(a2 + 32);
  *((_OWORD *)v4 + 3) = *(_OWORD *)(a2 + 40);
  *((_QWORD *)v4 + 8) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_OWORD *)(v4 + 72) = *(_OWORD *)(a2 + 64);
  *((_QWORD *)v4 + 11) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a1 + 24) = v4;
  return a1;
}

uint64_t sub_100365310(uint64_t a1)
{
  void **v3;

  v3 = (void **)(a1 + 64);
  sub_100153338(&v3);
  v3 = (void **)(a1 + 40);
  sub_1001533C4(&v3);
  return sub_10001AE68(a1);
}

uint64_t sub_10036535C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  int v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  int v22;
  unsigned __int16 __dst;

  __dst = 0;
  v22 = 0;
  v21 = 0;
  v19 = 0;
  v20 = 0;
  v18 = 0;
  sub_1003A1EE0((char *)(*(_QWORD *)a1 + 4), 2uLL, &__dst, 1);
  sub_1003A1EE0((char *)(*(_QWORD *)a1 + 6), 4uLL, &v22, 1);
  sub_1003A1EE0((char *)(*(_QWORD *)a1 + 10), 1uLL, &v21, 1);
  sub_1003A1EE0((char *)(*(_QWORD *)a1 + 11), 8uLL, &v20, 1);
  sub_1003A1EE0((char *)(*(_QWORD *)a1 + 19), 8uLL, &v19, 1);
  sub_1003A1EE0((char *)(*(_QWORD *)a1 + 27), 4uLL, (_BYTE *)&v18 + 4, 1);
  sub_1003A1EE0((char *)(*(_QWORD *)a1 + 31), 4uLL, &v18, 1);
  result = sub_10036BAF8(__dst, v4, v5, v6, v7, v8, v9, v10);
  v12 = v22;
  v13 = v21;
  v15 = v19;
  v14 = v20;
  v17 = v18;
  v16 = HIDWORD(v18);
  *(_WORD *)a2 = result;
  *(_DWORD *)(a2 + 4) = v12;
  *(_BYTE *)(a2 + 8) = v13;
  *(_QWORD *)(a2 + 16) = v14;
  *(_QWORD *)(a2 + 24) = v15;
  *(_DWORD *)(a2 + 32) = v16;
  *(_DWORD *)(a2 + 36) = v17;
  return result;
}

uint64_t sub_10036546C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  __int16 v13;
  char v14;
  __int16 v15;
  int v16;
  uint64_t v17;
  __int16 v18;
  __int16 v19;
  int v20;
  __int16 v21;
  __int16 v22;
  char v23;
  char v24;
  char v25;
  char v26;
  __int16 v27;
  char v28;
  char v29;
  char v30;
  __int16 v31;
  __int16 v32;
  __int16 v33;
  __int16 v34;
  __int16 v35;
  __int16 v36;
  __int16 v37;
  int v38;
  int v39;
  int v40;
  uint64_t v41;
  int v42;
  __int16 v43;
  char v44;
  int __dst;

  v2 = a1;
  __dst = 0;
  v44 = 0;
  v43 = 0;
  v42 = 0;
  v41 = 0;
  v39 = 0;
  v40 = 0;
  v38 = 0;
  v37 = 0;
  v36 = 0;
  v35 = 0;
  v34 = 0;
  v33 = 0;
  v4 = (char *)(*a1 + 4);
  v32 = 0;
  sub_1003A1EE0(v4, 2uLL, (_BYTE *)&__dst + 2, 1);
  sub_1003A1EE0((char *)(*v2 + 6), 2uLL, &__dst, 1);
  sub_1003A1EE0((char *)(*v2 + 8), 1uLL, &v44, 1);
  sub_1003A1EE0((char *)(*v2 + 9), 2uLL, &v43, 1);
  sub_1003A1EE0((char *)(*v2 + 12), 4uLL, &v42, 1);
  sub_1003A1EE0((char *)(*v2 + 16), 8uLL, &v41, 1);
  sub_1003A1EE0((char *)(*v2 + 24), 2uLL, (_BYTE *)&v40 + 2, 1);
  sub_1003A1EE0((char *)(*v2 + 26), 2uLL, &v40, 1);
  sub_1003A1EE0((char *)(*v2 + 28), 4uLL, &v39, 1);
  sub_1003A1EE0((char *)(*v2 + 32), 2uLL, (_BYTE *)&v38 + 2, 1);
  sub_1003A1EE0((char *)(*v2 + 34), 2uLL, &v38, 1);
  sub_1003A1EE0((char *)(*v2 + 36), 1uLL, (_BYTE *)&v37 + 1, 1);
  sub_1003A1EE0((char *)(*v2 + 65), 1uLL, &v37, 1);
  sub_1003A1EE0((char *)(*v2 + 66), 1uLL, (_BYTE *)&v36 + 1, 1);
  sub_1003A1EE0((char *)(*v2 + 67), 1uLL, &v36, 1);
  sub_1003A1EE0((char *)(*v2 + 68), 2uLL, &v35, 1);
  sub_1003A1EE0((char *)(*v2 + 70), 1uLL, (_BYTE *)&v34 + 1, 1);
  sub_1003A1EE0((char *)(*v2 + 71), 1uLL, &v34, 1);
  sub_1003A1EE0((char *)(*v2 + 72), 1uLL, (_BYTE *)&v33 + 1, 1);
  sub_1003A1EE0((char *)(*v2 + 73), 1uLL, &v33, 1);
  sub_1003A1EE0((char *)(*v2 + 74), 2uLL, &v32, 1);
  result = sub_10036BAF8(HIWORD(__dst), v5, v6, v7, v8, v9, v10, v11);
  v13 = __dst;
  v14 = v44;
  v15 = v43;
  v16 = v42;
  v17 = v41;
  v18 = HIWORD(v40);
  v19 = v40;
  v20 = v39;
  v21 = HIWORD(v38);
  v22 = v38;
  v23 = HIBYTE(v37);
  v24 = v37;
  v25 = HIBYTE(v36);
  v26 = v36;
  v27 = v35;
  v28 = HIBYTE(v34);
  v29 = v34;
  LOBYTE(v2) = HIBYTE(v33);
  v30 = v33;
  v31 = v32;
  *(_WORD *)a2 = result;
  *(_WORD *)(a2 + 2) = v13;
  *(_BYTE *)(a2 + 4) = v14;
  *(_WORD *)(a2 + 6) = v15;
  *(_DWORD *)(a2 + 8) = v16;
  *(_QWORD *)(a2 + 16) = v17;
  *(_WORD *)(a2 + 24) = v18;
  *(_WORD *)(a2 + 26) = v19;
  *(_DWORD *)(a2 + 28) = v20;
  *(_WORD *)(a2 + 32) = v21;
  *(_WORD *)(a2 + 34) = v22;
  *(_BYTE *)(a2 + 36) = v23;
  *(_BYTE *)(a2 + 37) = v24;
  *(_BYTE *)(a2 + 38) = v25;
  *(_BYTE *)(a2 + 39) = v26;
  *(_WORD *)(a2 + 40) = v27;
  *(_BYTE *)(a2 + 42) = v28;
  *(_BYTE *)(a2 + 43) = v29;
  *(_BYTE *)(a2 + 44) = (_BYTE)v2;
  *(_BYTE *)(a2 + 45) = v30;
  *(_WORD *)(a2 + 46) = v31;
  return result;
}

uint64_t sub_100365774@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  __int16 v13;
  char v14;
  __int16 v15;
  char v16;
  int v17;
  uint64_t v18;
  __int16 v19;
  __int16 v20;
  int v21;
  __int16 v22;
  __int16 v23;
  char v24;
  char v25;
  __int16 v26;
  int v27;
  int v28;
  char v29;
  char v30;
  __int16 v31;
  char v32;
  __int16 v33;
  char v34;
  __int16 v35;
  __int16 v36;
  char v37;
  __int16 v38;
  char v39;
  __int16 v40;
  char v41;
  __int16 v42;
  char v43;
  uint64_t v44;
  __int16 v45;
  __int16 v46;
  int v47;
  int v48;
  int v49;
  uint64_t v50;
  int v51;
  char v52;
  __int16 v53;
  char v54;
  int __dst;

  v2 = a1;
  __dst = 0;
  v54 = 0;
  v53 = 0;
  v52 = 0;
  v51 = 0;
  v50 = 0;
  v48 = 0;
  v49 = 0;
  v47 = 0;
  v46 = 0;
  v45 = 0;
  v44 = 0;
  v43 = 0;
  v42 = 0;
  v41 = 0;
  v40 = 0;
  v39 = 0;
  v38 = 0;
  v37 = 0;
  v4 = (char *)(*a1 + 4);
  v36 = 0;
  sub_1003A1EE0(v4, 2uLL, (_BYTE *)&__dst + 2, 1);
  sub_1003A1EE0((char *)(*v2 + 6), 2uLL, &__dst, 1);
  sub_1003A1EE0((char *)(*v2 + 8), 1uLL, &v54, 1);
  sub_1003A1EE0((char *)(*v2 + 9), 2uLL, &v53, 1);
  sub_1003A1EE0((char *)(*v2 + 11), 1uLL, &v52, 1);
  sub_1003A1EE0((char *)(*v2 + 12), 4uLL, &v51, 1);
  sub_1003A1EE0((char *)(*v2 + 16), 8uLL, &v50, 1);
  sub_1003A1EE0((char *)(*v2 + 24), 2uLL, (_BYTE *)&v49 + 2, 1);
  sub_1003A1EE0((char *)(*v2 + 26), 2uLL, &v49, 1);
  sub_1003A1EE0((char *)(*v2 + 28), 4uLL, &v48, 1);
  sub_1003A1EE0((char *)(*v2 + 32), 2uLL, (_BYTE *)&v47 + 2, 1);
  sub_1003A1EE0((char *)(*v2 + 34), 2uLL, &v47, 1);
  sub_1003A1EE0((char *)(*v2 + 36), 1uLL, (_BYTE *)&v46 + 1, 1);
  sub_1003A1EE0((char *)(*v2 + 37), 1uLL, &v46, 1);
  sub_1003A1EE0((char *)(*v2 + 38), 2uLL, &v45, 1);
  sub_1003A1EE0((char *)(*v2 + 40), 4uLL, (_BYTE *)&v44 + 4, 1);
  sub_1003A1EE0((char *)(*v2 + 44), 4uLL, &v44, 1);
  sub_1003A1EE0((char *)(*v2 + 48), 1uLL, &v43, 1);
  sub_1003A1EE0((char *)(*v2 + 49), 2uLL, &v42, 1);
  sub_1003A1EE0((char *)(*v2 + 51), 1uLL, &v41, 1);
  sub_1003A1EE0((char *)(*v2 + 52), 2uLL, &v40, 1);
  sub_1003A1EE0((char *)(*v2 + 54), 1uLL, &v39, 1);
  sub_1003A1EE0((char *)(*v2 + 55), 2uLL, &v38, 1);
  sub_1003A1EE0((char *)(*v2 + 57), 1uLL, &v37, 1);
  sub_1003A1EE0((char *)(*v2 + 58), 2uLL, &v36, 1);
  result = sub_10036BAF8(HIWORD(__dst), v5, v6, v7, v8, v9, v10, v11);
  v13 = __dst;
  v14 = v54;
  v15 = v53;
  v16 = v52;
  v17 = v51;
  v18 = v50;
  v19 = HIWORD(v49);
  v20 = v49;
  v21 = v48;
  v22 = HIWORD(v47);
  v23 = v47;
  v24 = HIBYTE(v46);
  v25 = v46;
  v26 = v45;
  v28 = v44;
  v27 = HIDWORD(v44);
  v29 = v43;
  LOWORD(v2) = v42;
  v30 = v41;
  v31 = v40;
  v32 = v39;
  v33 = v38;
  v34 = v37;
  v35 = v36;
  *(_WORD *)a2 = result;
  *(_WORD *)(a2 + 2) = v13;
  *(_BYTE *)(a2 + 4) = v14;
  *(_WORD *)(a2 + 6) = v15;
  *(_BYTE *)(a2 + 8) = v16;
  *(_DWORD *)(a2 + 12) = v17;
  *(_QWORD *)(a2 + 16) = v18;
  *(_WORD *)(a2 + 24) = v19;
  *(_WORD *)(a2 + 26) = v20;
  *(_DWORD *)(a2 + 28) = v21;
  *(_WORD *)(a2 + 32) = v22;
  *(_WORD *)(a2 + 34) = v23;
  *(_BYTE *)(a2 + 36) = v24;
  *(_BYTE *)(a2 + 37) = v25;
  *(_WORD *)(a2 + 38) = v26;
  *(_DWORD *)(a2 + 40) = v27;
  *(_DWORD *)(a2 + 44) = v28;
  *(_BYTE *)(a2 + 48) = v29;
  *(_WORD *)(a2 + 50) = (_WORD)v2;
  *(_BYTE *)(a2 + 52) = v30;
  *(_WORD *)(a2 + 54) = v31;
  *(_BYTE *)(a2 + 56) = v32;
  *(_WORD *)(a2 + 58) = v33;
  *(_BYTE *)(a2 + 60) = v34;
  *(_WORD *)(a2 + 62) = v35;
  return result;
}

uint64_t sub_100365B1C(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unint64_t v5;
  _BOOL4 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  _BYTE *v17;
  _BYTE *v18;
  unint64_t *v19;
  unint64_t v20;
  _BYTE *v21;
  _BYTE *v22;
  _BYTE *v23;
  _BYTE *v24;
  int v26;
  __int16 v27;
  unint64_t *v28;

  v4 = sub_1003A1E70((unsigned int **)a2);
  v5 = sub_1003A1E48(v4);
  v26 = v5;
  v27 = WORD2(v5);
  if (!sub_10036A8F8((uint64_t)&v26))
  {
    v20 = *(_QWORD *)(a1 + 128);
    v19 = (unint64_t *)(a1 + 128);
    v19[1] = v20;
    sub_1000DE0EC(v19, *(_QWORD *)(a2 + 8) - *(_QWORD *)a2);
    v21 = *(_BYTE **)(a2 + 8);
    v22 = (_BYTE *)(*(_QWORD *)a2 + 4);
    v28 = v19;
    while (v22 != v21)
      sub_100367BBC(&v28, v22++);
    return 1;
  }
  v6 = sub_10036A920((uint64_t)&v26);
  v14 = *(_QWORD *)(a1 + 128);
  v15 = *(_QWORD *)(a1 + 136);
  v16 = (unint64_t *)(a1 + 128);
  if (v6)
  {
    if (v14 != v15)
    {
      sub_10036CAF0("%s: fDebugLogBufferData not emptied: size = %zu", v7, v8, v9, v10, v11, v12, v13, (uint64_t)"collectLogBufferDataEvent");
      v14 = *v16;
    }
    *(_QWORD *)(a1 + 136) = v14;
    v17 = *(_BYTE **)(a2 + 8);
    v18 = (_BYTE *)(*(_QWORD *)a2 + 4);
    v28 = v16;
    while (v18 != v17)
      sub_100367BBC(&v28, v18++);
    return 0;
  }
  if (v14 == v15)
  {
    sub_10036CAF0("%s: start of this multipart packet missing, so this packet is discarded: size = %zu", v7, v8, v9, v10, v11, v12, v13, (uint64_t)"collectLogBufferDataEvent");
  }
  else
  {
    v23 = *(_BYTE **)(a2 + 8);
    v24 = (_BYTE *)(*(_QWORD *)a2 + 4);
    v28 = v16;
    while (v24 != v23)
      sub_100367BBC(&v28, v24++);
    if (sub_10036A940((uint64_t)&v26))
      return 1;
  }
  return 0;
}

uint64_t sub_100365C80(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 16);
  if (v2)
  {
    *(_QWORD *)(a1 + 24) = v2;
    operator delete(v2);
  }
  return sub_10001AE68(a1);
}

unint64_t sub_100365CB0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned __int16 v11;
  int __dst;

  __dst = 0;
  v11 = 0;
  sub_1003A1EE0((char *)(*(_QWORD *)a1 + 4), 2uLL, (_BYTE *)&__dst + 2, 1);
  sub_1003A1EE0((char *)(*(_QWORD *)a1 + 6), 2uLL, &__dst, 1);
  sub_1003A1EE0((char *)(*(_QWORD *)a1 + 8), 2uLL, &v11, 1);
  v9 = sub_10036BAF8(HIWORD(__dst), v2, v3, v4, v5, v6, v7, v8);
  return v9 | ((unint64_t)(unsigned __int16)__dst << 16) | ((unint64_t)v11 << 32);
}

void sub_100365D40(_QWORD *a1, _OWORD *a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  _BYTE v20[24];
  _BYTE *v21;
  _BYTE v22[24];
  _BYTE *v23;

  v3 = (std::__shared_weak_count *)a1[9];
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      v7 = a1[8];
      if (!v7)
        goto LABEL_18;
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
      v10 = (char *)operator new(0x28uLL);
      *(_QWORD *)v10 = off_1008173B8;
      *((_QWORD *)v10 + 1) = v7;
      *((_QWORD *)v10 + 2) = v6;
      *(_OWORD *)(v10 + 24) = *a2;
      v23 = v10;
      v11 = a1[10];
      v12 = (char *)operator new(0x28uLL);
      *(_QWORD *)v12 = off_1008173B8;
      *((_QWORD *)v12 + 1) = v7;
      *((_QWORD *)v12 + 2) = v6;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
      *(_OWORD *)(v12 + 24) = *(_OWORD *)(v10 + 24);
      v21 = v12;
      sub_10036159C(v11, (uint64_t)v20);
      v14 = v21;
      if (v21 == v20)
      {
        v15 = 4;
        v14 = v20;
      }
      else
      {
        if (!v21)
          goto LABEL_13;
        v15 = 5;
      }
      (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_13:
      v16 = v23;
      if (v23 == v22)
      {
        v17 = 4;
        v16 = v22;
      }
      else
      {
        if (!v23)
          goto LABEL_18;
        v17 = 5;
      }
      (*(void (**)(void))(*v16 + 8 * v17))();
LABEL_18:
      v18 = (unint64_t *)&v6->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_100365EEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char *a19, char a20,uint64_t a21,uint64_t a22,char *a23)
{
  char *v23;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;

  v25 = a19;
  if (a19 == v23)
  {
    v26 = 4;
    v25 = &a16;
  }
  else
  {
    if (!a19)
      goto LABEL_6;
    v26 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v25 + 8 * v26))();
LABEL_6:
  v27 = a23;
  if (a23 == &a20)
  {
    v28 = 4;
    v27 = &a20;
  }
  else
  {
    if (!a23)
      goto LABEL_11;
    v28 = 5;
  }
  (*(void (**)(char *))(*(_QWORD *)v27 + 8 * v28))(v27);
LABEL_11:
  sub_10001AE68((uint64_t)&a14);
  _Unwind_Resume(a1);
}

std::runtime_error *sub_100365F78(std::runtime_error *a1, const char *a2)
{
  std::runtime_error *result;

  result = std::runtime_error::runtime_error(a1, a2);
  return result;
}

uint64_t sub_100365F9C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  __int16 v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  std::runtime_error *exception;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  __int16 v34;
  unsigned __int8 v35;
  __int16 __dst;

  v10 = *a1;
  if (a1[1] - *a1 != 68)
  {
    sub_10036CAF0("Range debug V2 event (%zu) not of expected size (%u)", a2, a3, a4, a5, a6, a7, a8, a1[1] - *a1);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_100365F78(exception, "Range debug V2 event not of expected size");
  }
  __dst = 0;
  v35 = 0;
  v34 = 0;
  v33 = 0;
  v32 = 0;
  v30 = 0;
  v31 = 0;
  v28 = 0;
  v29 = 0;
  sub_1003A1EE0((char *)(v10 + 4), 2uLL, &__dst, 1);
  sub_1003A1EE0((char *)(*a1 + 6), 1uLL, &v35, 1);
  sub_1003A1EE0((char *)(*a1 + 7), 2uLL, &v34, 1);
  sub_1003A1EE0((char *)(*a1 + 9), 8uLL, &v33, 1);
  sub_1003A1EE0((char *)(*a1 + 17), 4uLL, &v32, 1);
  sub_1003A1EE0((char *)(*a1 + 28), 5uLL, &v31, 1);
  sub_1003A1EE0((char *)(*a1 + 33), 5uLL, &v30, 1);
  sub_1003A1EE0((char *)(*a1 + 38), 5uLL, &v29, 1);
  sub_1003A1EE0((char *)(*a1 + 43), 5uLL, &v28, 1);
  result = sub_10036B814(v35, v12, v13, v14, v15, v16, v17, v18);
  v20 = v34;
  v21 = v33;
  v22 = v32;
  v24 = v30;
  v23 = v31;
  v26 = v28;
  v25 = v29;
  *(_WORD *)a9 = __dst;
  *(_BYTE *)(a9 + 2) = result;
  *(_WORD *)(a9 + 4) = v20;
  *(_QWORD *)(a9 + 8) = v21;
  *(_DWORD *)(a9 + 16) = v22;
  *(_QWORD *)(a9 + 24) = v23;
  *(_QWORD *)(a9 + 32) = v24;
  *(_QWORD *)(a9 + 40) = v25;
  *(_QWORD *)(a9 + 48) = v26;
  return result;
}

void sub_100366144(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100366158@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  char v13;
  char v14;
  char v15;
  char v16;
  __int16 v17;
  uint64_t v18;
  unsigned __int16 __dst;

  __dst = 0;
  v18 = 0;
  v17 = 0;
  v16 = 0;
  if (a1[1] - *a1 != 17)
    sub_1003F01EC();
  sub_1003A1EE0((char *)(*a1 + 4), 2uLL, &__dst, 1);
  sub_1003A1EE0((char *)(*a1 + 6), 8uLL, &v18, 1);
  sub_1003A1EE0((char *)(*a1 + 14), 1uLL, (_BYTE *)&v17 + 1, 1);
  sub_1003A1EE0((char *)(*a1 + 15), 1uLL, &v17, 1);
  sub_1003A1EE0((char *)(*a1 + 16), 1uLL, &v16, 1);
  result = sub_10036BAF8(__dst, v4, v5, v6, v7, v8, v9, v10);
  v12 = v18;
  v13 = HIBYTE(v17);
  v14 = v17;
  v15 = v16;
  *(_WORD *)a2 = result;
  *(_QWORD *)(a2 + 8) = v12;
  *(_BYTE *)(a2 + 16) = v13;
  *(_BYTE *)(a2 + 17) = v14;
  *(_BYTE *)(a2 + 18) = v15;
  return result;
}

void sub_100366244(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  __int128 v13;
  __int16 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  uint64_t v31;
  __int16 v32;
  char v33;
  char v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  double v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  uint64_t v74;
  uint64_t v75;
  _BYTE *v76;
  __int16 v77;
  char v78;
  char v79;
  double v80;
  _BYTE *v81;
  _BYTE *v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  char *v86;
  char *v87;
  char *v88;
  char *v89;
  char *v90;
  char v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char v107;
  uint64_t v108;
  uint64_t v109;
  _BYTE *v110;
  __int16 v111;
  char v112;
  char v113;
  double v114;
  _BYTE *v115;
  _BYTE *v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  char *v120;
  char *v121;
  char *v122;
  char *v123;
  char *v124;
  std::runtime_error *exception;
  int v126;
  char v127;
  char v128;
  char v129;
  char v130;
  char v131;
  __int16 v132;
  char v133;
  char v134;
  int v135;
  char v136;
  char v137;
  char v138;
  char v139;
  __int16 v140;
  char v141;
  __int16 v142;
  char v143;
  __int16 v144;
  char v145;
  uint64_t v146;
  char v147;
  char v148;
  __int16 v149;
  __int16 v150;
  __int16 v151;
  __int16 v152;
  uint64_t v153;
  _BYTE v154[47];
  char *v155;
  _BYTE *v156;
  _QWORD v157[2];

  v11 = *((_DWORD *)sub_100004784() + 187);
  v153 = a2;
  if (v11 == 1)
  {
    v35 = *a1;
    v36 = *(_OWORD *)(*a1 + 20);
    *(_OWORD *)v154 = *(_OWORD *)(*a1 + 4);
    *(_OWORD *)&v154[16] = v36;
    *(_OWORD *)&v154[30] = *(_OWORD *)(v35 + 34);
    v150 = *(_WORD *)&v154[2];
    v152 = sub_10036BAF8(*(unsigned __int16 *)v154, v4, v5, v6, v7, v8, v9, v10);
    v148 = sub_10036B814(v154[4], v37, v38, v39, v40, v41, v42, v43);
    v44 = sub_100360CC4(*(unint64_t *)&v154[5]);
    v146 = *(_QWORD *)&v154[15];
    v142 = *(_WORD *)&v154[23];
    v144 = *(_WORD *)&v154[13];
    v138 = v154[27];
    v140 = *(_WORD *)&v154[25];
    v136 = v154[28];
    v134 = sub_10036B5AC(v154[29], 1);
    v131 = v154[31];
    v133 = sub_10036B5AC(v154[30], 1);
    v129 = sub_10036C0FC(v154[32], v45, v46, v47, v48, v49, v50, v51);
    v128 = v154[35];
    v126 = *(__int16 *)&v154[33];
    v127 = v154[36];
    v59 = sub_10036B8E0(v154[37], v52, v53, v54, v55, v56, v57, v58);
    v73 = sub_10036C348(v154[38], 1, v60, v61, v62, v63, v64, v65);
    v74 = v154[45];
    v155 = 0;
    v156 = 0;
    v157[0] = 0;
    if (v154[45])
    {
      v75 = 0;
      do
      {
        v76 = &v154[3 * v75];
        v77 = *(_WORD *)(v76 + 47);
        v78 = sub_10036C0FC(v76[46], v66, v67, v68, v69, v70, v71, v72);
        v79 = v78;
        v80 = (double)v77 * 0.25;
        v81 = v156;
        if ((unint64_t)v156 >= v157[0])
        {
          v83 = (v156 - v155) >> 4;
          v84 = v83 + 1;
          if ((unint64_t)(v83 + 1) >> 60)
            sub_100026E7C();
          v85 = v157[0] - (_QWORD)v155;
          if ((uint64_t)(v157[0] - (_QWORD)v155) >> 3 > v84)
            v84 = v85 >> 3;
          if ((unint64_t)v85 >= 0x7FFFFFFFFFFFFFF0)
            v66 = 0xFFFFFFFFFFFFFFFLL;
          else
            v66 = v84;
          if (v66)
            v86 = (char *)sub_10013A59C((uint64_t)v157, v66);
          else
            v86 = 0;
          v87 = &v86[16 * v83];
          *v87 = v79;
          *((double *)v87 + 1) = v80;
          v89 = v155;
          v88 = v156;
          v90 = v87;
          if (v156 != v155)
          {
            do
            {
              *((_OWORD *)v90 - 1) = *((_OWORD *)v88 - 1);
              v90 -= 16;
              v88 -= 16;
            }
            while (v88 != v89);
            v88 = v155;
          }
          v82 = v87 + 16;
          v155 = v90;
          v156 = v87 + 16;
          v157[0] = &v86[16 * v66];
          if (v88)
            operator delete(v88);
        }
        else
        {
          *v156 = v78;
          *((double *)v81 + 1) = v80;
          v82 = v81 + 16;
        }
        v156 = v82;
        ++v75;
      }
      while (v75 != v74);
    }
    sub_100362D08(v153, v152, v150, v148, v146, v144, v142, v140, v44, (double)v126 * 0.25, v138, v136, v134, v133, v131, v129, v128, v127, v59,
      v73,
      (uint64_t)&v155);
  }
  else
  {
    if (v11 != 2)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      sub_100365F78(exception, "Unknown HSI version");
    }
    v12 = *a1;
    v13 = *(_OWORD *)(*a1 + 20);
    *(_OWORD *)v154 = *(_OWORD *)(*a1 + 4);
    *(_OWORD *)&v154[16] = v13;
    *(_OWORD *)&v154[31] = *(_OWORD *)(v12 + 35);
    v14 = sub_10036BAF8(*(unsigned __int16 *)v154, v4, v5, v6, v7, v8, v9, v10);
    v22 = sub_10036B814(v154[4], v15, v16, v17, v18, v19, v20, v21);
    v30 = sub_100360CC4(*(unint64_t *)&v154[5]);
    v31 = *(_QWORD *)&v154[15];
    v32 = *(_WORD *)&v154[13];
    v33 = 9;
    v149 = *(_WORD *)&v154[25];
    v151 = *(_WORD *)&v154[23];
    v147 = v154[27];
    v145 = v154[28];
    if (v154[29])
    {
      v34 = 9;
      if (v154[30])
      {
        v33 = sub_10036B5AC(v154[29], 2);
        v34 = sub_10036B5AC(v154[30], 2);
      }
    }
    else
    {
      v34 = 9;
    }
    v91 = v154[31];
    v135 = *(__int16 *)&v154[33];
    v141 = v154[35];
    v143 = sub_10036C0FC(v154[32], v23, v24, v25, v26, v27, v28, v29);
    v139 = v154[36];
    v137 = sub_10036B8E0(v154[37], v92, v93, v94, v95, v96, v97, v98);
    v99 = sub_10036C550(*(unsigned __int16 *)&v154[38]);
    if (!(_BYTE)v100 || (v107 = BYTE1(v99), (v99 & 0xFF0000) == 0))
      sub_1003F0214();
    v130 = v22;
    v132 = *(_WORD *)&v154[2];
    v108 = v154[46];
    v155 = 0;
    v156 = 0;
    v157[0] = 0;
    if (v154[46])
    {
      v109 = 0;
      do
      {
        v110 = &v154[3 * v109];
        v111 = *((_WORD *)v110 + 24);
        v112 = sub_10036C0FC(v110[47], v100, v101, v102, v103, v104, v105, v106);
        v113 = v112;
        v114 = (double)v111 * 0.25;
        v115 = v156;
        if ((unint64_t)v156 >= v157[0])
        {
          v117 = (v156 - v155) >> 4;
          v118 = v117 + 1;
          if ((unint64_t)(v117 + 1) >> 60)
            sub_100026E7C();
          v119 = v157[0] - (_QWORD)v155;
          if ((uint64_t)(v157[0] - (_QWORD)v155) >> 3 > v118)
            v118 = v119 >> 3;
          if ((unint64_t)v119 >= 0x7FFFFFFFFFFFFFF0)
            v100 = 0xFFFFFFFFFFFFFFFLL;
          else
            v100 = v118;
          if (v100)
            v120 = (char *)sub_10013A59C((uint64_t)v157, v100);
          else
            v120 = 0;
          v121 = &v120[16 * v117];
          *v121 = v113;
          *((double *)v121 + 1) = v114;
          v123 = v155;
          v122 = v156;
          v124 = v121;
          if (v156 != v155)
          {
            do
            {
              *((_OWORD *)v124 - 1) = *((_OWORD *)v122 - 1);
              v124 -= 16;
              v122 -= 16;
            }
            while (v122 != v123);
            v122 = v155;
          }
          v116 = v121 + 16;
          v155 = v124;
          v156 = v121 + 16;
          v157[0] = &v120[16 * v100];
          if (v122)
            operator delete(v122);
        }
        else
        {
          *v156 = v112;
          *((double *)v115 + 1) = v114;
          v116 = v115 + 16;
        }
        v156 = v116;
        ++v109;
      }
      while (v109 != v108);
    }
    sub_100362D08(v153, v14, v132, v130, v31, v32, v151, v149, v30, (double)v135 * 0.25, v147, v145, v33, v34, v91, v143, v141, v139, v137,
      v107,
      (uint64_t)&v155);
  }
  if (v155)
  {
    v156 = v155;
    operator delete(v155);
  }
}

void sub_100366808(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_100366850(_QWORD *a1)
{
  void *v2;

  *a1 = off_100816F38;
  v2 = (void *)a1[8];
  if (v2)
  {
    a1[9] = v2;
    operator delete(v2);
  }
  sub_10001AE68((uint64_t)(a1 + 1));
  return a1;
}

void sub_100366894(_QWORD *a1)
{
  void *v2;

  *a1 = off_100816F38;
  v2 = (void *)a1[8];
  if (v2)
  {
    a1[9] = v2;
    operator delete(v2);
  }
  sub_10001AE68((uint64_t)(a1 + 1));
  operator delete();
}

_QWORD *sub_1003668E8(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x1E0uLL);
  *v2 = off_100816F38;
  sub_1003669E8((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_100366928(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10036693C(uint64_t a1, _QWORD *a2)
{
  *a2 = off_100816F38;
  return sub_1003669E8((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t sub_100366958(uint64_t a1)
{
  return sub_100364CC0(a1 + 8);
}

void sub_100366960(void *a1)
{
  sub_100364CC0((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t sub_100366988(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8), a1 + 24);
}

uint64_t sub_1003669A0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1003669DC()
{
}

uint64_t sub_1003669E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = *(_OWORD *)(a2 + 16);
  v8 = *(_OWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 48) = v9;
  *(_OWORD *)(a1 + 32) = v8;
  *(_OWORD *)(a1 + 16) = v7;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  sub_100137690((_QWORD *)(a1 + 56), *(const void **)(a2 + 56), *(_QWORD *)(a2 + 64), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56)) >> 3));
  memcpy((void *)(a1 + 80), (const void *)(a2 + 80), 0x181uLL);
  return a1;
}

void sub_100366A80(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10001AE68(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_100366A94(_QWORD *a1)
{
  *a1 = off_100816FB8;
  sub_10001AE68((uint64_t)(a1 + 1));
  return a1;
}

void sub_100366AC4(_QWORD *a1)
{
  *a1 = off_100816FB8;
  sub_10001AE68((uint64_t)(a1 + 1));
  operator delete();
}

_QWORD *sub_100366B04(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = off_100816FB8;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *((_DWORD *)result + 6) = *(_DWORD *)(a1 + 24);
  *((_WORD *)result + 14) = *(_WORD *)(a1 + 28);
  return result;
}

uint64_t sub_100366B64(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  int v6;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *(_QWORD *)a2 = off_100816FB8;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = *(_DWORD *)(result + 24);
  *(_WORD *)(a2 + 28) = *(_WORD *)(result + 28);
  *(_DWORD *)(a2 + 24) = v6;
  return result;
}

uint64_t sub_100366BA4(uint64_t a1)
{
  return sub_10001AE68(a1 + 8);
}

void sub_100366BAC(void *a1)
{
  sub_10001AE68((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t sub_100366BD4(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), a1 + 24);
}

uint64_t sub_100366BEC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100366C28()
{
}

_QWORD *sub_100366C34(_QWORD *a1)
{
  *a1 = off_100817038;
  sub_10001AE68((uint64_t)(a1 + 1));
  return a1;
}

void sub_100366C64(_QWORD *a1)
{
  *a1 = off_100817038;
  sub_10001AE68((uint64_t)(a1 + 1));
  operator delete();
}

__n128 sub_100366CA4(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __n128 result;

  v2 = (char *)operator new(0x110uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)v2 = off_100817038;
  *((_QWORD *)v2 + 1) = v4;
  *((_QWORD *)v2 + 2) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *(_OWORD *)(v2 + 216) = *(_OWORD *)(a1 + 216);
  *(_OWORD *)(v2 + 232) = *(_OWORD *)(a1 + 232);
  *(_OWORD *)(v2 + 248) = *(_OWORD *)(a1 + 248);
  *((_QWORD *)v2 + 33) = *(_QWORD *)(a1 + 264);
  *(_OWORD *)(v2 + 152) = *(_OWORD *)(a1 + 152);
  *(_OWORD *)(v2 + 168) = *(_OWORD *)(a1 + 168);
  *(_OWORD *)(v2 + 184) = *(_OWORD *)(a1 + 184);
  *(_OWORD *)(v2 + 200) = *(_OWORD *)(a1 + 200);
  *(_OWORD *)(v2 + 88) = *(_OWORD *)(a1 + 88);
  *(_OWORD *)(v2 + 104) = *(_OWORD *)(a1 + 104);
  *(_OWORD *)(v2 + 120) = *(_OWORD *)(a1 + 120);
  *(_OWORD *)(v2 + 136) = *(_OWORD *)(a1 + 136);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
  result = *(__n128 *)(a1 + 72);
  *(__n128 *)(v2 + 72) = result;
  return result;
}

__n128 sub_100366D74(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __n128 result;
  __int128 v16;
  __int128 v17;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = off_100817038;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = *(_OWORD *)(a1 + 24);
  v7 = *(_OWORD *)(a1 + 40);
  v8 = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 72) = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(a2 + 56) = v8;
  *(_OWORD *)(a2 + 40) = v7;
  *(_OWORD *)(a2 + 24) = v6;
  v9 = *(_OWORD *)(a1 + 88);
  v10 = *(_OWORD *)(a1 + 104);
  v11 = *(_OWORD *)(a1 + 120);
  *(_OWORD *)(a2 + 136) = *(_OWORD *)(a1 + 136);
  *(_OWORD *)(a2 + 120) = v11;
  *(_OWORD *)(a2 + 104) = v10;
  *(_OWORD *)(a2 + 88) = v9;
  v12 = *(_OWORD *)(a1 + 152);
  v13 = *(_OWORD *)(a1 + 168);
  v14 = *(_OWORD *)(a1 + 184);
  *(_OWORD *)(a2 + 200) = *(_OWORD *)(a1 + 200);
  *(_OWORD *)(a2 + 184) = v14;
  *(_OWORD *)(a2 + 168) = v13;
  *(_OWORD *)(a2 + 152) = v12;
  result = *(__n128 *)(a1 + 216);
  v16 = *(_OWORD *)(a1 + 232);
  v17 = *(_OWORD *)(a1 + 248);
  *(_QWORD *)(a2 + 264) = *(_QWORD *)(a1 + 264);
  *(_OWORD *)(a2 + 248) = v17;
  *(_OWORD *)(a2 + 232) = v16;
  *(__n128 *)(a2 + 216) = result;
  return result;
}

uint64_t sub_100366E24(uint64_t a1)
{
  return sub_10001AE68(a1 + 8);
}

void sub_100366E2C(void *a1)
{
  sub_10001AE68((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t sub_100366E54(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), a1 + 24);
}

uint64_t sub_100366E6C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100366EA8()
{
}

uint64_t sub_100366EB4(uint64_t a1)
{
  uint64_t v2;
  void **v4;

  *(_QWORD *)a1 = off_1008170B8;
  v2 = a1 + 8;
  v4 = (void **)(a1 + 72);
  sub_100153338(&v4);
  v4 = (void **)(a1 + 48);
  sub_1001533C4(&v4);
  sub_10001AE68(v2);
  return a1;
}

void sub_100366F14(uint64_t a1)
{
  uint64_t v2;
  void **v3;

  *(_QWORD *)a1 = off_1008170B8;
  v2 = a1 + 8;
  v3 = (void **)(a1 + 72);
  sub_100153338(&v3);
  v3 = (void **)(a1 + 48);
  sub_1001533C4(&v3);
  sub_10001AE68(v2);
  operator delete();
}

_QWORD *sub_100366F88(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x60uLL);
  *v2 = off_1008170B8;
  sub_100367088((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_100366FC8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100366FDC(uint64_t a1, _QWORD *a2)
{
  *a2 = off_1008170B8;
  return sub_100367088((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t sub_100366FF8(uint64_t a1)
{
  return sub_100365310(a1 + 8);
}

void sub_100367000(void *a1)
{
  sub_100365310((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t sub_100367028(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8), a1 + 24);
}

uint64_t sub_100367040(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10036707C()
{
}

uint64_t sub_100367088(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;
  uint64_t v8;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = *(_OWORD *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 32) = v8;
  *(_OWORD *)(a1 + 16) = v7;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  sub_100152E14((_QWORD *)(a1 + 40), *(__int16 **)(a2 + 40), *(__int16 **)(a2 + 48), 0x86BCA1AF286BCA1BLL * ((uint64_t)(*(_QWORD *)(a2 + 48) - *(_QWORD *)(a2 + 40)) >> 3));
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  sub_100153448((_QWORD *)(a1 + 64), *(_QWORD *)(a2 + 64), *(_QWORD *)(a2 + 72), (uint64_t)(*(_QWORD *)(a2 + 72) - *(_QWORD *)(a2 + 64)) >> 5);
  return a1;
}

void sub_10036713C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_1001533C4((void ***)va);
  sub_10001AE68(v2);
  _Unwind_Resume(a1);
}

_QWORD *sub_100367164(_QWORD *a1)
{
  *a1 = off_100817138;
  sub_10001AE68((uint64_t)(a1 + 1));
  return a1;
}

void sub_100367194(_QWORD *a1)
{
  *a1 = off_100817138;
  sub_10001AE68((uint64_t)(a1 + 1));
  operator delete();
}

__n128 sub_1003671D4(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __n128 result;

  v2 = (char *)operator new(0x40uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)v2 = off_100817138;
  *((_QWORD *)v2 + 1) = v4;
  *((_QWORD *)v2 + 2) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  *((_QWORD *)v2 + 7) = *(_QWORD *)(a1 + 56);
  return result;
}

__n128 sub_10036723C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  __n128 result;
  __int128 v7;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = off_100817138;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = *(__n128 *)(a1 + 24);
  v7 = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v7;
  *(__n128 *)(a2 + 24) = result;
  return result;
}

uint64_t sub_100367284(uint64_t a1)
{
  return sub_10001AE68(a1 + 8);
}

void sub_10036728C(void *a1)
{
  sub_10001AE68((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t sub_1003672B4(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 72))(*(_QWORD *)(a1 + 8), a1 + 24);
}

uint64_t sub_1003672CC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100367308()
{
}

_QWORD *sub_100367314(_QWORD *a1)
{
  *a1 = off_1008171B8;
  sub_10001AE68((uint64_t)(a1 + 1));
  return a1;
}

void sub_100367344(_QWORD *a1)
{
  *a1 = off_1008171B8;
  sub_10001AE68((uint64_t)(a1 + 1));
  operator delete();
}

__n128 sub_100367384(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __n128 result;

  v2 = (char *)operator new(0x48uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)v2 = off_1008171B8;
  *((_QWORD *)v2 + 1) = v4;
  *((_QWORD *)v2 + 2) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  result = *(__n128 *)(a1 + 56);
  *(__n128 *)(v2 + 56) = result;
  return result;
}

__n128 sub_1003673EC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  __n128 result;
  __int128 v7;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = off_1008171B8;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = *(__n128 *)(a1 + 24);
  v7 = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v7;
  *(__n128 *)(a2 + 24) = result;
  return result;
}

uint64_t sub_100367434(uint64_t a1)
{
  return sub_10001AE68(a1 + 8);
}

void sub_10036743C(void *a1)
{
  sub_10001AE68((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t sub_100367464(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 80))(*(_QWORD *)(a1 + 8), a1 + 24);
}

uint64_t sub_10036747C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1003674B8()
{
}

_QWORD *sub_1003674C4(_QWORD *a1)
{
  *a1 = off_100817238;
  sub_10001AE68((uint64_t)(a1 + 1));
  return a1;
}

void sub_1003674F4(_QWORD *a1)
{
  *a1 = off_100817238;
  sub_10001AE68((uint64_t)(a1 + 1));
  operator delete();
}

__n128 sub_100367534(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __n128 result;

  v2 = (char *)operator new(0x58uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)v2 = off_100817238;
  *((_QWORD *)v2 + 1) = v4;
  *((_QWORD *)v2 + 2) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
  result = *(__n128 *)(a1 + 72);
  *(__n128 *)(v2 + 72) = result;
  return result;
}

__n128 sub_1003675A4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  __n128 result;
  __int128 v7;
  __int128 v8;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = off_100817238;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = *(__n128 *)(a1 + 24);
  v7 = *(_OWORD *)(a1 + 40);
  v8 = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 72) = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(a2 + 56) = v8;
  *(_OWORD *)(a2 + 40) = v7;
  *(__n128 *)(a2 + 24) = result;
  return result;
}

uint64_t sub_1003675F4(uint64_t a1)
{
  return sub_10001AE68(a1 + 8);
}

void sub_1003675FC(void *a1)
{
  sub_10001AE68((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t sub_100367624(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 88))(*(_QWORD *)(a1 + 8), a1 + 24);
}

uint64_t sub_10036763C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100367678()
{
}

_QWORD *sub_100367684(_QWORD *a1)
{
  void *v2;

  *a1 = off_1008172B8;
  v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  sub_10001AE68((uint64_t)(a1 + 1));
  return a1;
}

void sub_1003676C8(_QWORD *a1)
{
  void *v2;

  *a1 = off_1008172B8;
  v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  sub_10001AE68((uint64_t)(a1 + 1));
  operator delete();
}

_QWORD *sub_10036771C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x30uLL);
  *v2 = off_1008172B8;
  sub_10036781C(v2 + 1, v1);
  return v2;
}

void sub_10036775C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_100367770(uint64_t a1, _QWORD *a2)
{
  *a2 = off_1008172B8;
  return sub_10036781C(a2 + 1, a1 + 8);
}

uint64_t sub_10036778C(uint64_t a1)
{
  return sub_100365C80(a1 + 8);
}

void sub_100367794(void *a1)
{
  sub_100365C80((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t sub_1003677BC(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8), a1 + 24);
}

uint64_t sub_1003677D4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100367810()
{
}

_QWORD *sub_10036781C(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = 0;
  sub_1001530EC(a1 + 2, *(const void **)(a2 + 16), *(_QWORD *)(a2 + 24), *(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16));
  return a1;
}

void sub_100367878(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10001AE68(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_10036788C(_QWORD *a1)
{
  *a1 = off_100817338;
  sub_10001AE68((uint64_t)(a1 + 1));
  return a1;
}

void sub_1003678BC(_QWORD *a1)
{
  *a1 = off_100817338;
  sub_10001AE68((uint64_t)(a1 + 1));
  operator delete();
}

_QWORD *sub_1003678FC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = off_100817338;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *((_DWORD *)result + 6) = *(_DWORD *)(a1 + 24);
  *((_WORD *)result + 14) = *(_WORD *)(a1 + 28);
  return result;
}

uint64_t sub_10036795C(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  int v6;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *(_QWORD *)a2 = off_100817338;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = *(_DWORD *)(result + 24);
  *(_WORD *)(a2 + 28) = *(_WORD *)(result + 28);
  *(_DWORD *)(a2 + 24) = v6;
  return result;
}

uint64_t sub_10036799C(uint64_t a1)
{
  return sub_10001AE68(a1 + 8);
}

void sub_1003679A4(void *a1)
{
  sub_10001AE68((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t sub_1003679CC(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 64))(*(_QWORD *)(a1 + 8), a1 + 24);
}

uint64_t sub_1003679E4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100367A20()
{
}

_QWORD *sub_100367A2C(_QWORD *a1)
{
  *a1 = off_1008173B8;
  sub_10001AE68((uint64_t)(a1 + 1));
  return a1;
}

void sub_100367A5C(_QWORD *a1)
{
  *a1 = off_1008173B8;
  sub_10001AE68((uint64_t)(a1 + 1));
  operator delete();
}

__n128 sub_100367A9C(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)v2 = off_1008173B8;
  *((_QWORD *)v2 + 1) = v4;
  *((_QWORD *)v2 + 2) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_100367AF4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  __n128 result;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = off_1008173B8;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

uint64_t sub_100367B2C(uint64_t a1)
{
  return sub_10001AE68(a1 + 8);
}

void sub_100367B34(void *a1)
{
  sub_10001AE68((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t sub_100367B5C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), a1 + 24);
}

uint64_t sub_100367B74(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100367BB0()
{
}

unint64_t **sub_100367BBC(unint64_t **a1, _BYTE *a2)
{
  unint64_t *v4;
  unint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  unint64_t v8;
  _BYTE *v9;
  unint64_t v10;
  unint64_t v11;
  size_t v12;
  unint64_t v13;
  char *v14;
  _BYTE *v15;
  char v16;

  v4 = *a1;
  v6 = (_BYTE *)(*a1)[1];
  v5 = (*a1)[2];
  if ((unint64_t)v6 >= v5)
  {
    v8 = *v4;
    v9 = &v6[-*v4];
    v10 = (unint64_t)(v9 + 1);
    if ((uint64_t)(v9 + 1) < 0)
      sub_100026E7C();
    v11 = v5 - v8;
    if (2 * v11 > v10)
      v10 = 2 * v11;
    if (v11 >= 0x3FFFFFFFFFFFFFFFLL)
      v12 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
      v13 = (unint64_t)operator new(v12);
    else
      v13 = 0;
    v14 = (char *)(v13 + v12);
    v9[v13] = *a2;
    v7 = (uint64_t)&v9[v13 + 1];
    if (v6 == (_BYTE *)v8)
    {
      v13 += (unint64_t)v9;
    }
    else
    {
      v15 = &v6[~v8];
      do
      {
        v16 = *--v6;
        (v15--)[v13] = v16;
      }
      while (v6 != (_BYTE *)v8);
      v6 = (_BYTE *)*v4;
    }
    *v4 = v13;
    v4[1] = v7;
    v4[2] = (unint64_t)v14;
    if (v6)
      operator delete(v6);
  }
  else
  {
    *v6 = *a2;
    v7 = (uint64_t)(v6 + 1);
  }
  v4[1] = v7;
  return a1;
}

void sub_100367CC0(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  void **v13;
  uint64_t v14;
  _QWORD *v15;
  const std::locale::facet *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  _QWORD *v24;
  const std::locale::facet *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void **v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  int v38;
  uint64_t v39;
  __int128 *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  int locale_low;
  uint64_t v51;
  int v52;
  size_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  _QWORD *v65;
  void *v66;
  uint64_t v67;
  unint64_t v68;
  char *v69;
  unint64_t v70;
  char *v71;
  unint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  size_t v76;
  unint64_t v77;
  uint64_t v78;
  char *v79;
  char v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  char *v90;
  unint64_t v91;
  char *v92;
  unint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  size_t v97;
  unint64_t v98;
  uint64_t v99;
  char *v100;
  char v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  const void *v114;
  uint64_t v115;
  uint64_t v116;
  _QWORD *v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  uint64_t *v121;
  unint64_t v122;
  uint64_t v123;
  void *v124;
  unint64_t *v125;
  void *v126;
  uint64_t v127;
  uint64_t v128;
  void *v129;
  unint64_t *v130;
  void *v131;
  uint64_t v132;
  _QWORD *v133;
  _DWORD *v134;
  uint64_t v135;
  uint64_t *v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  unint64_t v141;
  char *v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  uint64_t v147;
  unint64_t v148;
  char *v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  void *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  void *v169;
  char *v170;
  int v171;
  int v172;
  const char *v173;
  std::logic_error *v174;
  std::runtime_error *exception;
  uint64_t v176;
  uint64_t v177;
  int v178;
  int v179;
  char v180;
  __int16 v182;
  char v183;
  int v184;
  int v185;
  int v186;
  int v187;
  void *v188;
  uint64_t v189;
  void *v190;
  __int128 *v191;
  void *v192;
  int v193;
  unint64_t v194;
  int v195;
  uint64_t v196;
  int v197;
  unint64_t v199;
  void *v200[2];
  char v201;
  uint64_t v202;
  _DWORD *v203;
  unint64_t v204;
  uint64_t v205;
  unint64_t v206;
  unint64_t v207;
  void *v208[2];
  unsigned __int8 v209;
  void *v210;
  __int128 v211;
  void (__cdecl **v212)(std::stringbuf *__hidden);
  void *v213[2];
  void *v214;
  __int128 v215;
  void *v216;
  __int128 v217;
  _BYTE v218[25];
  __int128 v219;
  uint64_t v220;
  void *__p[2];
  uint64_t v222;
  std::locale v223;
  uint64_t __dst;
  void *__src[6];
  void *v226[4];
  __int128 v227;
  _OWORD v228[2];
  __int128 v229;
  uint64_t v230;
  char v231;

  __dst = 0;
  v205 = 0;
  v206 = 0;
  v207 = 0;
  v202 = 0;
  v203 = 0;
  v204 = 0;
  if (sub_10036AE28(*a1, 5))
  {
    sub_10000BF04(v200, "CIRData");
    if (a2[1] != *a2)
    {
      v10 = 0;
      v196 = 1;
      v194 = 256;
      do
      {
        sub_1000537E4((uint64_t)&v210);
        v11 = sub_100054C60((_QWORD *)&v211 + 1, (uint64_t)"CIR packet part ", 16);
        v12 = (_QWORD *)std::ostream::operator<<(v11, v196);
        sub_100054C60(v12, (uint64_t)":", 1);
        std::stringbuf::str(&v212);
        sub_1000537E4((uint64_t)__src);
        if ((v209 & 0x80u) == 0)
          v13 = v208;
        else
          v13 = (void **)v208[0];
        if ((v209 & 0x80u) == 0)
          v14 = v209;
        else
          v14 = (uint64_t)v208[1];
        v15 = sub_100054C60(&__src[2], (uint64_t)v13, v14);
        std::ios_base::getloc((const std::ios_base *)((char *)v15 + *(_QWORD *)(*v15 - 24)));
        v16 = std::locale::use_facet(&v223, &std::ctype<char>::id);
        v17 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v16->__vftable[2].~facet_0)(v16, 10);
        std::locale::~locale(&v223);
        std::ostream::put(v15, v17);
        std::ostream::flush(v15);
        v18 = v10 + 256;
        v19 = a2[1] - *a2;
        if (v19 >= v10 + 256)
          v20 = v10 + 256;
        else
          v20 = a2[1] - *a2;
        if (v20 > v10)
        {
          if (v194 >= v19)
            v21 = a2[1] - *a2;
          else
            v21 = v194;
          do
          {
            LOBYTE(__p[0]) = 48;
            v22 = sub_10015BFA0(&__src[2], (char *)__p);
            v23 = *v22;
            *(_DWORD *)((char *)v22 + *(_QWORD *)(*v22 - 24) + 8) = *(_DWORD *)((_BYTE *)v22 + *(_QWORD *)(*v22 - 24)
                                                                                             + 8) & 0xFFFFFFB5 | 8;
            *(uint64_t *)((char *)v22 + *(_QWORD *)(v23 - 24) + 24) = 2;
            v24 = (_QWORD *)std::ostream::operator<<(v22, *(unsigned __int8 *)(*a2 + v10));
            sub_100054C60(v24, (uint64_t)" ", 1);
            if ((~(_BYTE)v10 & 0xF) == 0 || v21 - 1 == v10)
            {
              std::ios_base::getloc((const std::ios_base *)((char *)&__src[2] + *((_QWORD *)__src[2] - 3)));
              v25 = std::locale::use_facet(&v223, &std::ctype<char>::id);
              v26 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v25->__vftable[2].~facet_0)(v25, 10);
              std::locale::~locale(&v223);
              std::ostream::put(&__src[2], v26);
              std::ostream::flush(&__src[2]);
            }
            ++v10;
          }
          while (v21 != v10);
        }
        std::stringbuf::str(&__src[3]);
        v34 = __p;
        if (v222 < 0)
          v34 = (void **)__p[0];
        sub_1000051BC("%s", v27, v28, v29, v30, v31, v32, v33, (uint64_t)v34);
        if (SHIBYTE(v222) < 0)
          operator delete(__p[0]);
        __src[0] = v192;
        *(void **)((char *)__src + *((_QWORD *)v192 - 3)) = v190;
        __src[2] = v188;
        if (SHIBYTE(v228[0]) < 0)
          operator delete(*((void **)&v227 + 1));
        std::streambuf::~streambuf(&__src[3]);
        std::ios::~ios(&v229);
        if ((char)v209 < 0)
          operator delete(v208[0]);
        v210 = v192;
        *(void **)((char *)&v210 + *((_QWORD *)v192 - 3)) = v190;
        *((_QWORD *)&v211 + 1) = v188;
        if ((v218[15] & 0x80000000) != 0)
          operator delete(*((void **)&v217 + 1));
        v196 = (v196 + 1);
        std::streambuf::~streambuf(&v212);
        std::ios::~ios(&v219);
        v194 += 256;
        v10 = v18;
      }
      while (v18 < a2[1] - *a2);
    }
    if (v201 < 0)
      operator delete(v200[0]);
  }
  v35 = *a2;
  v36 = a2[1] - *a2;
  if (!v36)
  {
LABEL_220:
    sub_10036CAF0("RoseCIRDecoder::decodeRangeCIREventVersion2: no NumPackets field", v3, v4, v5, v6, v7, v8, v9, v176);
    goto LABEL_221;
  }
  v37 = 0;
  v187 = 0;
  v182 = 0;
  v186 = 0;
  v180 = 0;
  v185 = 0;
  v38 = 0;
  v184 = 0;
  v183 = 0;
  v193 = 0;
  v39 = 0;
  v195 = 0;
  v197 = 0;
  v40 = &v211;
  while (2)
  {
    v41 = v36 - v37;
    if (v36 - v37 <= 3)
    {
      sub_10036CAF0("RoseCIRDecoder::decodeRangeCIREventVersion2: bytesRemaining %zu, expect at least %zu for tag and len", v3, v4, v5, v6, v7, v8, v9, v36 - v37);
      goto LABEL_221;
    }
    LOWORD(v200[0]) = 0;
    LOWORD(v223.__locale_) = 0;
    sub_1003A1EE0((char *)(v35 + v37), 2uLL, v200, 1);
    sub_1003A1EE0((char *)(v37 + *a2 + 2), 2uLL, &v223, 1);
    if (!LOWORD(v223.__locale_))
    {
      sub_10036CAF0("RoseCIRDecoder::decodeRangeCIREventVersion2: got 0 length for tag %hu", v42, v43, v44, v45, v46, v47, v48, LOWORD(v200[0]));
      goto LABEL_221;
    }
    if (v41 - 4 < LOWORD(v223.__locale_))
    {
      sub_10036CAF0("RoseCIRDecoder::decodeRangeCIREventVersion2: bytesRemaining %zu, expect at least %hu for val", v42, v43, v44, v45, v46, v47, v48, v41 - 4);
      goto LABEL_221;
    }
    v49 = v37 + 4;
    switch(LOWORD(v200[0]))
    {
      case 0x100:
        sub_10036C9B0("decodeRangeCIREventVersion2: SessionId", v42, v43, v44, v45, v46, v47, v48, v176);
        LOWORD(__src[0]) = 0;
        if (LOWORD(v223.__locale_) >= 3uLL)
          __assert_rtn("decodeSessionId", "roseCIRDataDecoderV2.cpp", 306, "len <= sizeof sessionId");
        sub_1003A1EE0((char *)(*a2 + v49), LOWORD(v223.__locale_), __src, 1);
        v182 = (__int16)__src[0];
        v187 = 1;
        goto LABEL_193;
      case 0x101:
        sub_10036C9B0("decodeRangeCIREventVersion2: SessionType", v42, v43, v44, v45, v46, v47, v48, v176);
        LOBYTE(__src[0]) = 0;
        if (LOWORD(v223.__locale_) >= 2uLL)
          __assert_rtn("decodeSessionType", "roseCIRDataDecoderV2.cpp", 314, "len <= sizeof sessionTypeInt");
        sub_1003A1EE0((char *)(*a2 + v49), LOWORD(v223.__locale_), __src, 1);
        v180 = sub_10036B814(LOBYTE(__src[0]), v81, v82, v83, v84, v85, v86, v87);
        v186 = 1;
        goto LABEL_193;
      case 0x102:
        sub_10036C9B0("decodeRangeCIREventVersion2: CycleIndex", v42, v43, v44, v45, v46, v47, v48, v176);
        LOWORD(__src[0]) = 0;
        if (LOWORD(v223.__locale_) >= 3uLL)
          __assert_rtn("decodeCycleIdx", "roseCIRDataDecoderV2.cpp", 322, "len <= sizeof cycleIdx");
        sub_1003A1EE0((char *)(*a2 + v49), LOWORD(v223.__locale_), __src, 1);
        v38 = LOWORD(__src[0]);
        v185 = 1;
        goto LABEL_193;
      case 0x103:
        sub_10036C9B0("decodeRangeCIREventVersion2: DeviceIndex", v42, v43, v44, v45, v46, v47, v48, v176);
        LOBYTE(__src[0]) = 0;
        if (LOWORD(v223.__locale_) >= 2uLL)
          __assert_rtn("decodeDeviceIdx", "roseCIRDataDecoderV2.cpp", 330, "len <= sizeof deviceIdx");
        sub_1003A1EE0((char *)(*a2 + v49), LOWORD(v223.__locale_), __src, 1);
        v183 = (char)__src[0];
        v184 = 1;
        goto LABEL_193;
      case 0x104:
        sub_100369824(a2, v37 + 4, LOWORD(v223.__locale_), (unint64_t *)__src);
        if ((void *)((char *)__src[1] - (char *)__src[0]) >= (void *)8)
          v53 = 8;
        else
          v53 = (char *)__src[1] - (char *)__src[0];
        memcpy(&__dst, __src[0], v53);
        sub_10000BF04(__p, "");
        sub_10000BF04(v208, "");
        sub_1003A21CC((uint64_t)__p, (uint64_t)&__dst, 8uLL, 0x10u, (uint64_t)v208);
        if ((char)v209 < 0)
          operator delete(v208[0]);
        if (SHIBYTE(v222) < 0)
          operator delete(__p[0]);
        sub_10036C9B0("decodeRangeCIREventVersion2: MacAddress: len %hu, val: %s", v54, v55, v56, v57, v58, v59, v60, LOWORD(v223.__locale_));
        if (SHIBYTE(v211) < 0)
          operator delete(v210);
        v61 = __src[0];
        if (!__src[0])
          goto LABEL_193;
        __src[1] = __src[0];
        goto LABEL_192;
      case 0x105:
        sub_10036C9B0("decodeRangeCIREventVersion2: NumPackets", v42, v43, v44, v45, v46, v47, v48, v176);
        LOWORD(__src[0]) = 0;
        if (LOWORD(v223.__locale_) >= 3uLL)
          __assert_rtn("decodeNumPackets", "roseCIRDataDecoderV2.cpp", 349, "len <= sizeof numPackets");
        sub_1003A1EE0((char *)(*a2 + v49), LOWORD(v223.__locale_), __src, 1);
        v39 = LOWORD(__src[0]);
        v193 = 1;
        goto LABEL_193;
      case 0x106:
        sub_10036C9B0("decodeRangeCIREventVersion2: PacketContainer", v42, v43, v44, v45, v46, v47, v48, v176);
        if (!v193)
        {
          v170 = "RoseCIRDecoder::decodeRangeCIREventVersion2: got PacketContainer tag but no NumPackets tag";
          goto LABEL_231;
        }
        if (v195)
          v102 = v197 + 1;
        else
          v102 = 0;
        sub_10036C9B0("decodeRangeCIREventVersion2: PacketContainer: PacketIdx %hu", v3, v4, v5, v6, v7, v8, v9, (unsigned __int16)v102);
        if ((unsigned __int16)v102 >= (unsigned __int16)v39)
        {
          sub_10036CAF0("RoseCIRDecoder::decodeRangeCIREventVersion2: currentPacketIdx %hu out of range: expected NumPackets %hu", v103, v104, v105, v106, v107, v108, v109, (unsigned __int16)v102);
          goto LABEL_221;
        }
        *(_QWORD *)&v229 = 0;
        memset(v228, 0, sizeof(v228));
        v227 = 0u;
        memset(v226, 0, sizeof(v226));
        memset(__src, 0, sizeof(__src));
        v110 = v206;
        if (v206 >= v207)
        {
          v111 = sub_100369E70(&v205, (int *)__src);
        }
        else
        {
          sub_100369F78((uint64_t)&v207, v206, (int *)__src);
          v111 = v110 + 136;
        }
        v206 = v111;
        v210 = &v228[1];
        sub_100153338((void ***)&v210);
        if (v226[1])
        {
          v226[2] = v226[1];
          operator delete(v226[1]);
        }
        if (__src[4])
        {
          __src[5] = __src[4];
          operator delete(__src[4]);
        }
        if (__src[1])
        {
          __src[2] = __src[1];
          operator delete(__src[1]);
        }
        v195 = 1;
        v197 = v102;
LABEL_193:
        v37 = v49 + LOWORD(v223.__locale_);
        v35 = *a2;
        v36 = a2[1] - *a2;
        if (v37 < v36)
          continue;
        if (v37 > v36)
        {
          sub_10036CAF0("RoseCIRDecoder::decodeRangeCIREventVersion2: readIdx %zu exceeds packet size %zu", v3, v4, v5, v6, v7, v8, v9, v49 + LOWORD(v223.__locale_));
          goto LABEL_221;
        }
        if (!v193)
          goto LABEL_220;
        if (0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v206 - v205) >> 3) != (unsigned __int16)v39)
        {
          sub_10036CAF0("RoseCIRDecoder::decodeRangeCIREventVersion2: got %zu packets, expected NumPackets %hu", v3, v4, v5, v6, v7, v8, v9, 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v206 - v205) >> 3));
          goto LABEL_221;
        }
        if (v206 == v205)
        {
          sub_10036CAF0("RoseCIRDecoder::decodeRangeCIREventVersion2: no packets in CIR message", v3, v4, v5, v6, v7, v8, v9, v176);
LABEL_221:
          *(_BYTE *)a3 = 0;
          *(_BYTE *)(a3 + 72) = 0;
          goto LABEL_222;
        }
        if (!v187)
        {
          sub_10036CAF0("RoseCIRDecoder::decodeRangeCIREventVersion2: no session ID", v3, v4, v5, v6, v7, v8, v9, v176);
          goto LABEL_221;
        }
        if (!v186)
        {
          sub_10036CAF0("RoseCIRDecoder::decodeRangeCIREventVersion2: no session type", v3, v4, v5, v6, v7, v8, v9, v176);
          goto LABEL_221;
        }
        if (!v185)
        {
          sub_10036CAF0("RoseCIRDecoder::decodeRangeCIREventVersion2: no cycle index", v3, v4, v5, v6, v7, v8, v9, v176);
          goto LABEL_221;
        }
        if (!v184)
        {
          sub_10036CAF0("RoseCIRDecoder::decodeRangeCIREventVersion2: no device index", v3, v4, v5, v6, v7, v8, v9, v176);
          goto LABEL_221;
        }
        sub_10036C9B0("decodeRangeCIREventVersion2: converting to libRose format", v3, v4, v5, v6, v7, v8, v9, v176);
        __p[1] = 0;
        __p[0] = 0;
        v222 = 0;
        v159 = v205;
        v199 = v206;
        if (v205 == v206)
        {
LABEL_219:
          sub_10036C9B0("decodeRangeCIREventVersion2: returning RangeCIREvent", v152, v153, v154, v155, v156, v157, v158, v177);
          sub_100369CCC((uint64_t)__src, v182, v180, v38, v183, &__dst, (__int16 **)__p, &v202);
          v169 = __src[5];
          *(void **)(a3 + 16) = __src[2];
          *(_OWORD *)a3 = *(_OWORD *)__src;
          *(_OWORD *)(a3 + 24) = *(_OWORD *)&__src[3];
          *(_QWORD *)(a3 + 40) = v169;
          __src[3] = 0;
          __src[4] = 0;
          *(_OWORD *)(a3 + 48) = *(_OWORD *)v226;
          *(void **)(a3 + 64) = v226[2];
          __src[5] = 0;
          memset(v226, 0, 24);
          *(_BYTE *)(a3 + 72) = 1;
          sub_100150CEC((uint64_t)__src);
        }
        else
        {
          while (1)
          {
            if (!*(_BYTE *)(v159 + 2))
            {
              sub_10036CAF0("convertCIRPacketToLibRoseFormat: no packet type", v152, v153, v154, v155, v156, v157, v158, v177);
              goto LABEL_242;
            }
            if (!*(_BYTE *)(v159 + 4))
            {
              sub_10036CAF0("convertCIRPacketToLibRoseFormat: no RX chain bit mask", v152, v153, v154, v155, v156, v157, v158, v177);
              goto LABEL_242;
            }
            if (!*(_BYTE *)(v159 + 88))
            {
              sub_10036CAF0("convertCIRPacketToLibRoseFormat: no first path index", v152, v153, v154, v155, v156, v157, v158, v177);
              goto LABEL_242;
            }
            if (!*(_BYTE *)(v159 + 104))
              break;
            LOWORD(v210) = *(_WORD *)v159;
            BYTE2(v210) = *(_BYTE *)(v159 + 3);
            v211 = *(_OWORD *)(v159 + 8);
            v212 = *(void (__cdecl ***)(std::stringbuf *__hidden))(v159 + 24);
            *(_QWORD *)(v159 + 8) = 0;
            *(_QWORD *)(v159 + 16) = 0;
            *(_QWORD *)(v159 + 24) = 0;
            *(_OWORD *)v213 = *(_OWORD *)(v159 + 32);
            v214 = *(void **)(v159 + 48);
            *(_QWORD *)(v159 + 32) = 0;
            *(_QWORD *)(v159 + 40) = 0;
            *(_QWORD *)(v159 + 48) = 0;
            v215 = *(_OWORD *)(v159 + 56);
            v216 = *(void **)(v159 + 72);
            *(_QWORD *)(v159 + 64) = 0;
            *(_QWORD *)(v159 + 72) = 0;
            *(_QWORD *)(v159 + 56) = 0;
            *(double *)&v217 = (double)*(unint64_t *)(v159 + 80) * 0.01;
            BYTE8(v217) = 1;
            *(_QWORD *)v218 = sub_100360CC4(*(_QWORD *)(v159 + 96));
            v218[8] = 1;
            v160 = *(_QWORD *)(v159 + 96);
            v218[24] = *(_BYTE *)(v159 + 104);
            *(_QWORD *)&v218[16] = v160;
            v219 = *(_OWORD *)(v159 + 112);
            v220 = *(_QWORD *)(v159 + 128);
            *(_QWORD *)(v159 + 112) = 0;
            *(_QWORD *)(v159 + 120) = 0;
            *(_QWORD *)(v159 + 128) = 0;
            LOWORD(__src[0]) = (_WORD)v210;
            BYTE2(__src[0]) = BYTE2(v210);
            *(_OWORD *)&__src[1] = v211;
            __src[3] = v212;
            v212 = 0;
            v211 = 0uLL;
            *(_OWORD *)&__src[4] = *(_OWORD *)v213;
            v161 = v214;
            v213[1] = 0;
            v214 = 0;
            v213[0] = 0;
            *(_OWORD *)&v226[1] = v215;
            v226[0] = v161;
            v226[3] = v216;
            v215 = 0uLL;
            v216 = 0;
            *(_OWORD *)((char *)v228 + 9) = *(_OWORD *)&v218[9];
            v227 = v217;
            v228[0] = *(_OWORD *)v218;
            v229 = v219;
            v230 = v220;
            v219 = 0uLL;
            v220 = 0;
            v231 = 1;
            v208[0] = &v219;
            sub_100153338((void ***)v208);
            if ((_QWORD)v215)
            {
              *((_QWORD *)&v215 + 1) = v215;
              operator delete((void *)v215);
            }
            if (v213[0])
            {
              v213[1] = v213[0];
              operator delete(v213[0]);
            }
            if ((_QWORD)v211)
            {
              *((_QWORD *)&v211 + 1) = v211;
              operator delete((void *)v211);
            }
            if (!v231)
              goto LABEL_243;
            sub_100369C0C((uint64_t *)__p, (__int16 *)__src);
            sub_100369C5C((uint64_t)__src);
            v159 += 136;
            if (v159 == v199)
              goto LABEL_219;
          }
          sub_10036CAF0("convertCIRPacketToLibRoseFormat: no rx start time", v152, v153, v154, v155, v156, v157, v158, v177);
LABEL_242:
          LOBYTE(__src[0]) = 0;
          v231 = 0;
LABEL_243:
          sub_10036CAF0("RoseCIRDecoder::decodeRangeCIREventVersion2: error converting packet to libRose format", v162, v163, v164, v165, v166, v167, v168, v177);
          *(_BYTE *)a3 = 0;
          *(_BYTE *)(a3 + 72) = 0;
          sub_100369C5C((uint64_t)__src);
        }
        __src[0] = __p;
        sub_1001533C4((void ***)__src);
LABEL_222:
        __src[0] = &v202;
        sub_100153338((void ***)__src);
        __src[0] = &v205;
        sub_100369D88((void ***)__src);
        return;
      default:
        switch(LOWORD(v200[0]))
        {
          case 0x120:
            sub_10036C9B0("decodeRangeCIREventVersion2: PacketType", v42, v43, v44, v45, v46, v47, v48, v176);
            if (!v195)
            {
              v170 = "RoseCIRDecoder::decodeRangeCIREventVersion2: got PacketType but no PacketContainer";
              break;
            }
            if (0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v206 - v205) >> 3) <= (unsigned __int16)v197)
            {
              v171 = 171;
              goto LABEL_257;
            }
            locale_low = LOWORD(v223.__locale_);
            v51 = (uint64_t)sub_100004784();
            v52 = *(_DWORD *)(v51 + 748);
            switch(v52)
            {
              case 1:
                LOBYTE(__src[0]) = 0;
                if (locale_low == 1)
                {
                  sub_1003A1EE0((char *)(*a2 + v49), 1uLL, __src, 1);
                  v51 = sub_10036C6D0(LOBYTE(__src[0]));
                  if ((v51 & 0xFF0000) == 0)
                  {
LABEL_267:
                    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                    std::runtime_error::runtime_error(exception, "Could not decode packet type");
                  }
                  goto LABEL_171;
                }
                v172 = 360;
                v173 = "len == sizeof(r1PacketTypeInt)";
                break;
              case 2:
                LOWORD(__src[0]) = 0;
                if (locale_low == 2)
                {
                  sub_1003A1EE0((char *)(*a2 + v49), 2uLL, __src, 1);
                  v51 = sub_10036C6D0(LOWORD(__src[0]));
                  if ((v51 & 0xFF0000) == 0)
                    goto LABEL_267;
                  goto LABEL_171;
                }
                v172 = 372;
                v173 = "len == sizeof(packetTypeAsInt)";
                break;
              case 0:
                v174 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
                std::logic_error::logic_error(v174, "HSI version error");
              default:
LABEL_171:
                v135 = v205 + 136 * (unsigned __int16)v197;
                if (!*(_BYTE *)(v135 + 2))
                  *(_BYTE *)(v135 + 2) = 1;
                *(_WORD *)v135 = v51;
                goto LABEL_193;
            }
            __assert_rtn("decodePacketType", "roseCIRDataDecoderV2.cpp", v172, v173);
          case 0x121:
            sub_10036C9B0("decodeRangeCIREventVersion2: RxChainMask", v42, v43, v44, v45, v46, v47, v48, v176);
            if (v195)
            {
              if (0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v206 - v205) >> 3) <= (unsigned __int16)v197)
              {
                v171 = 180;
                goto LABEL_257;
              }
              LOBYTE(__src[0]) = 0;
              if (LOWORD(v223.__locale_) >= 2uLL)
                __assert_rtn("decodeRxChainBitMask", "roseCIRDataDecoderV2.cpp", 393, "len <= sizeof rxChainBitMask");
              sub_1003A1EE0((char *)(*a2 + v49), LOWORD(v223.__locale_), __src, 1);
              *(_WORD *)(v205 + 136 * (unsigned __int16)v197 + 3) = LOBYTE(__src[0]) | 0x100;
              goto LABEL_193;
            }
            v170 = "RoseCIRDecoder::decodeRangeCIREventVersion2: got RxChainMask but no PacketContainer";
            break;
          case 0x122:
            sub_10036C9B0("decodeRangeCIREventVersion2: HwConnectionDescriptor", v42, v43, v44, v45, v46, v47, v48, v176);
            if (!v195)
              goto LABEL_224;
            v67 = v205;
            if (0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v206 - v205) >> 3) <= (unsigned __int16)v197)
            {
              v171 = 189;
              goto LABEL_257;
            }
            v189 = v39;
            v191 = v40;
            memset(__src, 0, 24);
            v68 = v49 + LOWORD(v223.__locale_);
            if (v68 <= v49)
            {
              v71 = 0;
              v69 = 0;
              v70 = 0;
            }
            else
            {
              v178 = v38;
              v69 = 0;
              v70 = 0;
              v71 = 0;
              v72 = v49;
              do
              {
                v73 = *a2;
                if (v69 >= v71)
                {
                  v74 = &v69[-v70];
                  v75 = (uint64_t)&v69[-v70 + 1];
                  if (v75 < 0)
                  {
                    __src[2] = v71;
                    __src[0] = (void *)v70;
                    __src[1] = v69;
                    sub_100026E7C();
                  }
                  if (2 * (uint64_t)&v71[-v70] > (unint64_t)v75)
                    v75 = 2 * (_QWORD)&v71[-v70];
                  if ((unint64_t)&v71[-v70] >= 0x3FFFFFFFFFFFFFFFLL)
                    v76 = 0x7FFFFFFFFFFFFFFFLL;
                  else
                    v76 = v75;
                  if (v76)
                    v77 = (unint64_t)operator new(v76);
                  else
                    v77 = 0;
                  v74[v77] = *(_BYTE *)(v73 + v72);
                  v78 = (uint64_t)&v74[v77 + 1];
                  if (v69 == (char *)v70)
                  {
                    v70 = (unint64_t)&v74[v77];
                  }
                  else
                  {
                    v79 = &v69[~v70];
                    do
                    {
                      v80 = *--v69;
                      (v79--)[v77] = v80;
                    }
                    while (v69 != (char *)v70);
                    v69 = (char *)v70;
                    v70 = v77;
                  }
                  v71 = (char *)(v77 + v76);
                  if (v69)
                    operator delete(v69);
                  v69 = (char *)v78;
                }
                else
                {
                  *v69++ = *(_BYTE *)(v73 + v72);
                }
                ++v72;
              }
              while (v72 != v68);
              v67 = v205;
              v38 = v178;
            }
            v123 = v67 + 136 * (unsigned __int16)v197;
            v126 = *(void **)(v123 + 8);
            v125 = (unint64_t *)(v123 + 8);
            v124 = v126;
            if (v126)
            {
              *(_QWORD *)(v67 + 136 * (unsigned __int16)v197 + 16) = v124;
              operator delete(v124);
              *v125 = 0;
              v125[1] = 0;
              v125[2] = 0;
            }
            *v125 = v70;
            v127 = v67 + 136 * (unsigned __int16)v197;
            *(_QWORD *)(v127 + 16) = v69;
            *(_QWORD *)(v127 + 24) = v71;
            goto LABEL_155;
          case 0x123:
            sub_10036C9B0("decodeRangeCIREventVersion2: HwRxTimeStatus", v42, v43, v44, v45, v46, v47, v48, v176);
            if (v195)
            {
              v88 = v205;
              if (0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v206 - v205) >> 3) <= (unsigned __int16)v197)
              {
                v171 = 198;
                goto LABEL_257;
              }
              v189 = v39;
              v191 = v40;
              memset(__src, 0, 24);
              v89 = v49 + LOWORD(v223.__locale_);
              if (v89 <= v49)
              {
                v92 = 0;
                v90 = 0;
                v91 = 0;
              }
              else
              {
                v179 = v38;
                v90 = 0;
                v91 = 0;
                v92 = 0;
                v93 = v49;
                do
                {
                  v94 = *a2;
                  if (v90 >= v92)
                  {
                    v95 = &v90[-v91];
                    v96 = (uint64_t)&v90[-v91 + 1];
                    if (v96 < 0)
                    {
                      __src[2] = v92;
                      __src[0] = (void *)v91;
                      __src[1] = v90;
                      sub_100026E7C();
                    }
                    if (2 * (uint64_t)&v92[-v91] > (unint64_t)v96)
                      v96 = 2 * (_QWORD)&v92[-v91];
                    if ((unint64_t)&v92[-v91] >= 0x3FFFFFFFFFFFFFFFLL)
                      v97 = 0x7FFFFFFFFFFFFFFFLL;
                    else
                      v97 = v96;
                    if (v97)
                      v98 = (unint64_t)operator new(v97);
                    else
                      v98 = 0;
                    v95[v98] = *(_BYTE *)(v94 + v93);
                    v99 = (uint64_t)&v95[v98 + 1];
                    if (v90 == (char *)v91)
                    {
                      v91 = (unint64_t)&v95[v98];
                    }
                    else
                    {
                      v100 = &v90[~v91];
                      do
                      {
                        v101 = *--v90;
                        (v100--)[v98] = v101;
                      }
                      while (v90 != (char *)v91);
                      v90 = (char *)v91;
                      v91 = v98;
                    }
                    v92 = (char *)(v98 + v97);
                    if (v90)
                      operator delete(v90);
                    v90 = (char *)v99;
                  }
                  else
                  {
                    *v90++ = *(_BYTE *)(v94 + v93);
                  }
                  ++v93;
                }
                while (v93 != v89);
                v88 = v205;
                v38 = v179;
              }
              v128 = v88 + 136 * (unsigned __int16)v197;
              v131 = *(void **)(v128 + 32);
              v130 = (unint64_t *)(v128 + 32);
              v129 = v131;
              if (v131)
              {
                *(_QWORD *)(v88 + 136 * (unsigned __int16)v197 + 40) = v129;
                operator delete(v129);
                *v130 = 0;
                v130[1] = 0;
                v130[2] = 0;
              }
              *v130 = v91;
              v132 = v88 + 136 * (unsigned __int16)v197;
              *(_QWORD *)(v132 + 40) = v90;
              *(_QWORD *)(v132 + 48) = v92;
LABEL_155:
              v39 = v189;
              v40 = v191;
              goto LABEL_193;
            }
LABEL_224:
            v170 = "RoseCIRDecoder::decodeRangeCIREventVersion2: got HwConnectionDescriptor but no PacketContainer";
            break;
          case 0x124:
            sub_10036C9B0("decodeRangeCIREventVersion2: CIR", v42, v43, v44, v45, v46, v47, v48, v176);
            if (v195)
            {
              if (0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v206 - v205) >> 3) > (unsigned __int16)v197)
              {
                sub_1003699E8(a2, v49, LOWORD(v223.__locale_), __src);
                v62 = v205;
                v63 = v205 + 136 * (unsigned __int16)v197;
                v66 = *(void **)(v63 + 56);
                v65 = (_QWORD *)(v63 + 56);
                v64 = v66;
                if (v66)
                {
                  *(_QWORD *)(v205 + 136 * (unsigned __int16)v197 + 64) = v64;
                  operator delete(v64);
                  *v65 = 0;
                  v65[1] = 0;
                  v65[2] = 0;
                }
                *(_OWORD *)v65 = *(_OWORD *)__src;
                *(void **)(v62 + 136 * (unsigned __int16)v197 + 72) = __src[2];
                goto LABEL_193;
              }
              v171 = 207;
              goto LABEL_257;
            }
            v170 = "RoseCIRDecoder::decodeRangeCIREventVersion2: got CIR but no PacketContainer";
            break;
          case 0x125:
            sub_10036C9B0("decodeRangeCIREventVersion2: FirstPathIndex", v42, v43, v44, v45, v46, v47, v48, v176);
            if (v195)
            {
              if (0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v206 - v205) >> 3) <= (unsigned __int16)v197)
              {
                v171 = 216;
                goto LABEL_257;
              }
              __src[0] = 0;
              if (LOWORD(v223.__locale_) >= 9uLL)
                __assert_rtn("decodeFirstPathIndex", "roseCIRDataDecoderV2.cpp", 443, "len <= sizeof firstPathIndex");
              sub_1003A1EE0((char *)(*a2 + v49), LOWORD(v223.__locale_), __src, 1);
              v112 = v205 + 136 * (unsigned __int16)v197;
              *(void **)(v112 + 80) = __src[0];
              *(_BYTE *)(v112 + 88) = 1;
              goto LABEL_193;
            }
            v170 = "RoseCIRDecoder::decodeRangeCIREventVersion2: got FirstPathIndex but no PacketContainer";
            break;
          case 0x126:
            sub_10036C9B0("decodeRangeCIREventVersion2: RxStartTime", v42, v43, v44, v45, v46, v47, v48, v176);
            if (v195)
            {
              if (0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v206 - v205) >> 3) > (unsigned __int16)v197)
              {
                __src[0] = 0;
                if (LOWORD(v223.__locale_) >= 9uLL)
                  __assert_rtn("decodeRxStartTime", "roseCIRDataDecoderV2.cpp", 451, "len <= sizeof rxStartTime");
                sub_1003A1EE0((char *)(*a2 + v49), LOWORD(v223.__locale_), __src, 1);
                v113 = v205 + 136 * (unsigned __int16)v197;
                *(void **)(v113 + 96) = __src[0];
                *(_BYTE *)(v113 + 104) = 1;
                goto LABEL_193;
              }
              v171 = 225;
LABEL_257:
              __assert_rtn("decodeRangeCIREventVersion2", "roseCIRDataDecoderV2.cpp", v171, "currentPacketIdx.value() < packets.size()");
            }
            v170 = "RoseCIRDecoder::decodeRangeCIREventVersion2: got RxStartTime but no PacketContainer";
            break;
          default:
            sub_10036C9B0("Ignoring unrecognized RangeCIREventTag %02x", v42, v43, v44, v45, v46, v47, v48, LOWORD(v200[0]));
            LOWORD(v210) = v200[0];
            WORD1(v210) = v223.__locale_;
            v114 = (const void *)(*a2 + v49);
            v115 = *a2 + v49 + LOWORD(v223.__locale_);
            *((_QWORD *)v40 + 1) = 0;
            *((_QWORD *)v40 + 2) = 0;
            *(_QWORD *)v40 = 0;
            sub_10003A474(v40, v114, v115, v115 - (_QWORD)v114);
            if (v195)
            {
              if (0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v206 - v205) >> 3) <= (unsigned __int16)v197)
                __assert_rtn("decodeRangeCIREventVersion2", "roseCIRDataDecoderV2.cpp", 237, "currentPacketIdx.value() < packets.size()");
              v116 = v205 + 136 * (unsigned __int16)v197;
              v119 = *(_QWORD *)(v116 + 128);
              v117 = (_QWORD *)(v116 + 128);
              v118 = v119;
              v121 = v117 - 1;
              v120 = *(v117 - 1);
              if (v120 >= v119)
              {
                v136 = v117 - 2;
                v137 = *(v117 - 2);
                v138 = (uint64_t)(v120 - v137) >> 5;
                v139 = v138 + 1;
                if ((unint64_t)(v138 + 1) >> 59)
                  goto LABEL_268;
                v140 = v118 - v137;
                if (v140 >> 4 > v139)
                  v139 = v140 >> 4;
                if ((unint64_t)v140 >= 0x7FFFFFFFFFFFFFE0)
                  v141 = 0x7FFFFFFFFFFFFFFLL;
                else
                  v141 = v139;
                __src[4] = v117;
                v142 = (char *)sub_10015350C((uint64_t)v117, v141);
                v143 = &v142[32 * v138];
                __src[0] = v142;
                __src[1] = v143;
                __src[3] = &v142[32 * v144];
                *(_DWORD *)v143 = (_DWORD)v210;
                *((_QWORD *)v143 + 2) = 0;
                *((_QWORD *)v143 + 3) = 0;
                *((_QWORD *)v143 + 1) = 0;
                *(_OWORD *)(v143 + 8) = v211;
                *((_QWORD *)v143 + 3) = v212;
                *(_QWORD *)v40 = 0;
                *((_QWORD *)v40 + 1) = 0;
                *((_QWORD *)v40 + 2) = 0;
                __src[2] = v143 + 32;
                sub_10036A23C(v136, __src);
                v122 = *v121;
                sub_10036A3D0((uint64_t)__src);
              }
              else
              {
                *(_DWORD *)v120 = (_DWORD)v210;
                *(_QWORD *)(v120 + 16) = 0;
                *(_QWORD *)(v120 + 24) = 0;
                *(_QWORD *)(v120 + 8) = 0;
                *(_OWORD *)(v120 + 8) = v211;
                *(_QWORD *)(v120 + 24) = v212;
                *(_QWORD *)v40 = 0;
                *((_QWORD *)v40 + 1) = 0;
                *((_QWORD *)v40 + 2) = 0;
                v122 = v120 + 32;
              }
              *v121 = v122;
            }
            else
            {
              v133 = v203;
              if ((unint64_t)v203 >= v204)
              {
                v145 = ((uint64_t)v203 - v202) >> 5;
                v146 = v145 + 1;
                if ((unint64_t)(v145 + 1) >> 59)
LABEL_268:
                  sub_100026E7C();
                v147 = v204 - v202;
                if ((uint64_t)(v204 - v202) >> 4 > v146)
                  v146 = v147 >> 4;
                if ((unint64_t)v147 >= 0x7FFFFFFFFFFFFFE0)
                  v148 = 0x7FFFFFFFFFFFFFFLL;
                else
                  v148 = v146;
                __src[4] = &v204;
                v149 = (char *)sub_10015350C((uint64_t)&v204, v148);
                v150 = &v149[32 * v145];
                __src[0] = v149;
                __src[1] = v150;
                __src[3] = &v149[32 * v151];
                *(_DWORD *)v150 = (_DWORD)v210;
                *((_QWORD *)v150 + 2) = 0;
                *((_QWORD *)v150 + 3) = 0;
                *((_QWORD *)v150 + 1) = 0;
                *(_OWORD *)(v150 + 8) = v211;
                *((_QWORD *)v150 + 3) = v212;
                *(_QWORD *)v40 = 0;
                *((_QWORD *)v40 + 1) = 0;
                *((_QWORD *)v40 + 2) = 0;
                __src[2] = v150 + 32;
                sub_10036A23C(&v202, __src);
                v134 = v203;
                sub_10036A3D0((uint64_t)__src);
              }
              else
              {
                *v203 = (_DWORD)v210;
                v133[2] = 0;
                v133[3] = 0;
                v133[1] = 0;
                *(_OWORD *)(v133 + 1) = v211;
                v133[3] = v212;
                *(_QWORD *)v40 = 0;
                *((_QWORD *)v40 + 1) = 0;
                *((_QWORD *)v40 + 2) = 0;
                v134 = v133 + 4;
              }
              v203 = v134;
            }
            v61 = (void *)v211;
            if ((_QWORD)v211)
            {
              *((_QWORD *)&v211 + 1) = v211;
LABEL_192:
              operator delete(v61);
            }
            goto LABEL_193;
        }
LABEL_231:
        sub_10036CAF0(v170, v3, v4, v5, v6, v7, v8, v9, v176);
        goto LABEL_221;
    }
  }
}

void sub_100369590(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,char a39)
{
  STACK[0x260] = (unint64_t)&STACK[0x238];
  sub_1001533C4((void ***)&STACK[0x260]);
  STACK[0x238] = (unint64_t)&a36;
  sub_100153338((void ***)&STACK[0x238]);
  STACK[0x238] = (unint64_t)&a39;
  sub_100369D88((void ***)&STACK[0x238]);
  _Unwind_Resume(a1);
}

void sub_100369824(uint64_t *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t *a4@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  _BYTE *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  unint64_t v14;
  unint64_t v15;
  size_t v16;
  char *v17;
  char *v18;
  _BYTE *v19;
  char v20;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v4 = a3 + a2;
  if (a3 + a2 > a2)
  {
    v5 = a2;
    v8 = 0;
    do
    {
      v9 = *a1;
      v10 = a4[2];
      if ((unint64_t)v8 >= v10)
      {
        v12 = *a4;
        v13 = &v8[-*a4];
        v14 = (unint64_t)(v13 + 1);
        if ((uint64_t)(v13 + 1) < 0)
          sub_100026E7C();
        v15 = v10 - v12;
        if (2 * v15 > v14)
          v14 = 2 * v15;
        if (v15 >= 0x3FFFFFFFFFFFFFFFLL)
          v16 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v16 = v14;
        if (v16)
          v17 = (char *)operator new(v16);
        else
          v17 = 0;
        v18 = &v13[(_QWORD)v17];
        v13[(_QWORD)v17] = *(_BYTE *)(v9 + v5);
        v11 = (uint64_t)&v13[(_QWORD)v17 + 1];
        if (v8 != (_BYTE *)v12)
        {
          v19 = &v8[~v12];
          do
          {
            v20 = *--v8;
            (v19--)[(_QWORD)v17] = v20;
          }
          while (v8 != (_BYTE *)v12);
          v8 = (_BYTE *)*a4;
          v18 = v17;
        }
        *a4 = (unint64_t)v18;
        a4[1] = v11;
        a4[2] = (unint64_t)&v17[v16];
        if (v8)
          operator delete(v8);
      }
      else
      {
        *v8 = *(_BYTE *)(v9 + v5);
        v11 = (uint64_t)(v8 + 1);
      }
      a4[1] = v11;
      ++v5;
      v8 = (_BYTE *)v11;
    }
    while (v5 != v4);
  }
}

void sub_100369958(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v2;

  if (v2)
  {
    *(_QWORD *)(v1 + 8) = v2;
    operator delete(v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100369980(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void **v6;

  v6 = (void **)(a1 + 112);
  sub_100153338(&v6);
  v2 = *(void **)(a1 + 56);
  if (v2)
  {
    *(_QWORD *)(a1 + 64) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 32);
  if (v3)
  {
    *(_QWORD *)(a1 + 40) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 8);
  if (v4)
  {
    *(_QWORD *)(a1 + 16) = v4;
    operator delete(v4);
  }
  return a1;
}

void sub_1003699E8(_QWORD *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  __int16 v10;
  _WORD *v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  int __dst;
  _BYTE __src[1032];

  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  if ((a3 & 0x3FF) != 0)
    sub_1003F023C();
  if (a3 >= 0x400)
  {
    v6 = a4;
    v7 = 0;
    if (a3 >> 10 <= 1)
      v8 = 1;
    else
      v8 = a3 >> 10;
    v24 = (uint64_t)(a4 + 2);
    v25 = v8;
    do
    {
      bzero(__src, 0x400uLL);
      for (i = 0; i != 1024; i += 4)
      {
        __dst = 0;
        sub_1003A1EE0((char *)(*a1 + a2 + i), 2uLL, (_BYTE *)&__dst + 2, 1);
        sub_1003A1EE0((char *)(*a1 + a2 + i + 2), 2uLL, &__dst, 1);
        v10 = HIWORD(__dst);
        v11 = &__src[i];
        *v11 = __dst;
        v11[1] = v10;
      }
      v13 = (char *)v6[1];
      v12 = v6[2];
      if ((unint64_t)v13 >= v12)
      {
        v15 = (char *)*v6;
        v16 = (uint64_t)&v13[-*v6] >> 10;
        v17 = v16 + 1;
        if ((unint64_t)(v16 + 1) >> 54)
          sub_100026E7C();
        v18 = v12 - (_QWORD)v15;
        if (v18 >> 9 > v17)
          v17 = v18 >> 9;
        if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFC00)
          v19 = 0x3FFFFFFFFFFFFFLL;
        else
          v19 = v17;
        if (v19)
        {
          v20 = (char *)sub_10015321C(v24, v19);
          v27 = v21;
          v15 = (char *)*v6;
          v13 = (char *)v6[1];
        }
        else
        {
          v20 = 0;
          v27 = 0;
        }
        v22 = &v20[1024 * v16];
        memcpy(v22, __src, 0x400uLL);
        v23 = v22;
        while (v13 != v15)
        {
          v13 -= 1024;
          v23 -= 1024;
          memcpy(v23, v13, 0x400uLL);
        }
        v14 = v22 + 1024;
        *a4 = v23;
        a4[1] = v22 + 1024;
        v6 = a4;
        a4[2] = &v20[1024 * v27];
        if (v15)
          operator delete(v15);
        v8 = v25;
      }
      else
      {
        memcpy((void *)v6[1], __src, 0x400uLL);
        v14 = v13 + 1024;
      }
      a2 += 1024;
      v6[1] = v14;
      ++v7;
    }
    while (v7 != v8);
  }
}

void sub_100369BE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  void *v13;

  v13 = *(void **)v11;
  if (*(_QWORD *)v11)
  {
    *(_QWORD *)(v11 + 8) = v13;
    operator delete(v13);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100369C0C(uint64_t *a1, __int16 *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t result;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  v5 = *(_QWORD *)(v3 - 8);
  if (v5 >= v4)
  {
    result = sub_10036A45C(a1, a2);
  }
  else
  {
    sub_10036A57C(v3, *(_QWORD *)(v3 - 8), a2);
    result = v5 + 152;
  }
  a1[1] = result;
  return result;
}

uint64_t sub_100369C5C(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void **v6;

  if (*(_BYTE *)(a1 + 152))
  {
    v6 = (void **)(a1 + 128);
    sub_100153338(&v6);
    v2 = *(void **)(a1 + 56);
    if (v2)
    {
      *(_QWORD *)(a1 + 64) = v2;
      operator delete(v2);
    }
    v3 = *(void **)(a1 + 32);
    if (v3)
    {
      *(_QWORD *)(a1 + 40) = v3;
      operator delete(v3);
    }
    v4 = *(void **)(a1 + 8);
    if (v4)
    {
      *(_QWORD *)(a1 + 16) = v4;
      operator delete(v4);
    }
  }
  return a1;
}

uint64_t sub_100369CCC(uint64_t a1, __int16 a2, char a3, __int16 a4, char a5, _QWORD *a6, __int16 **a7, uint64_t *a8)
{
  *(_WORD *)a1 = a2;
  *(_BYTE *)(a1 + 2) = a3;
  *(_WORD *)(a1 + 4) = a4;
  *(_BYTE *)(a1 + 6) = a5;
  *(_QWORD *)(a1 + 7) = *a6;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  sub_100152E14((_QWORD *)(a1 + 24), *a7, a7[1], 0x86BCA1AF286BCA1BLL * (((char *)a7[1] - (char *)*a7) >> 3));
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  sub_100153448((_QWORD *)(a1 + 48), *a8, a8[1], (a8[1] - *a8) >> 5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 7);
  return a1;
}

void sub_100369D70(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1001533C4((void ***)va);
  _Unwind_Resume(a1);
}

void sub_100369D88(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 136;
        sub_100369E0C((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_100369E0C(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  void *v5;
  void **v6;

  v6 = (void **)(a2 + 112);
  sub_100153338(&v6);
  v3 = *(void **)(a2 + 56);
  if (v3)
  {
    *(_QWORD *)(a2 + 64) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a2 + 32);
  if (v4)
  {
    *(_QWORD *)(a2 + 40) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(a2 + 8);
  if (v5)
  {
    *(_QWORD *)(a2 + 16) = v5;
    operator delete(v5);
  }
}

uint64_t sub_100369E70(uint64_t *a1, int *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  void *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t *v14;

  v3 = 0xF0F0F0F0F0F0F0F1 * ((a1[1] - *a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0x1E1E1E1E1E1E1E1)
    sub_100026E7C();
  if (0xE1E1E1E1E1E1E1E2 * ((a1[2] - *a1) >> 3) > v4)
    v4 = 0xE1E1E1E1E1E1E1E2 * ((a1[2] - *a1) >> 3);
  if (0xF0F0F0F0F0F0F0F1 * ((a1[2] - *a1) >> 3) >= 0xF0F0F0F0F0F0F0)
    v6 = 0x1E1E1E1E1E1E1E1;
  else
    v6 = v4;
  v14 = a1 + 2;
  if (v6)
    v7 = (char *)sub_10032FB70((uint64_t)(a1 + 2), v6);
  else
    v7 = 0;
  v10 = v7;
  v11 = &v7[136 * v3];
  v13 = &v7[136 * v6];
  sub_100369F78((uint64_t)(a1 + 2), (uint64_t)v11, a2);
  v12 = v11 + 136;
  sub_10036A01C(a1, &v10);
  v8 = a1[1];
  sub_10036A1C8(&v10);
  return v8;
}

void sub_100369F64(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10036A1C8((void **)va);
  _Unwind_Resume(a1);
}

__n128 sub_100369F78(uint64_t a1, uint64_t a2, int *a3)
{
  int v3;
  __int128 v4;
  __n128 result;

  v3 = *a3;
  *(_BYTE *)(a2 + 4) = *((_BYTE *)a3 + 4);
  *(_DWORD *)a2 = v3;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a3 + 2);
  *(_QWORD *)(a2 + 24) = *((_QWORD *)a3 + 3);
  *((_QWORD *)a3 + 1) = 0;
  *((_QWORD *)a3 + 2) = 0;
  *((_QWORD *)a3 + 3) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_OWORD *)(a2 + 32) = *((_OWORD *)a3 + 2);
  *(_QWORD *)(a2 + 48) = *((_QWORD *)a3 + 6);
  *((_QWORD *)a3 + 4) = 0;
  *((_QWORD *)a3 + 5) = 0;
  *((_QWORD *)a3 + 6) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a3 + 14);
  *(_QWORD *)(a2 + 72) = *((_QWORD *)a3 + 9);
  *((_QWORD *)a3 + 7) = 0;
  *((_QWORD *)a3 + 8) = 0;
  *((_QWORD *)a3 + 9) = 0;
  v4 = *((_OWORD *)a3 + 5);
  *(_OWORD *)(a2 + 89) = *(_OWORD *)((char *)a3 + 89);
  *(_OWORD *)(a2 + 80) = v4;
  *(_QWORD *)(a2 + 120) = 0;
  *(_QWORD *)(a2 + 128) = 0;
  *(_QWORD *)(a2 + 112) = 0;
  result = *((__n128 *)a3 + 7);
  *(__n128 *)(a2 + 112) = result;
  *(_QWORD *)(a2 + 128) = *((_QWORD *)a3 + 16);
  *((_QWORD *)a3 + 14) = 0;
  *((_QWORD *)a3 + 15) = 0;
  *((_QWORD *)a3 + 16) = 0;
  return result;
}

uint64_t sub_10036A01C(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_10036A090((uint64_t)(a1 + 2), a1[1], (int *)a1[1], *a1, (int *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_10036A090(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, int *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  int *v9;
  uint64_t v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  v14 = 0;
  if (a3 == a5)
  {
    v11 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      v9 -= 34;
      sub_100369F78(a1, v7 - 136, v9);
      v7 = *((_QWORD *)&v16 + 1) - 136;
      *((_QWORD *)&v16 + 1) -= 136;
    }
    while (v9 != a5);
    v11 = v16;
  }
  v14 = 1;
  sub_10036A144((uint64_t)v13);
  return v11;
}

uint64_t sub_10036A144(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_10036A178((uint64_t *)a1);
  return a1;
}

void sub_10036A178(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1[2] + 8);
  v2 = *(_QWORD *)(a1[1] + 8);
  if (v1 != v2)
  {
    v3 = *a1;
    do
    {
      sub_100369E0C(v3, v1);
      v1 += 136;
    }
    while (v1 != v2);
  }
}

void **sub_10036A1C8(void **a1)
{
  sub_10036A1F8(a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void sub_10036A1F8(_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 136;
    sub_100369E0C(v4, i - 136);
  }
}

uint64_t sub_10036A23C(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_10036A2B0((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_10036A2B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  int v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      v8 = *(_DWORD *)(a3 - 32);
      a3 -= 32;
      *(_DWORD *)(v7 - 32) = v8;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      *(_QWORD *)(v7 - 24) = 0;
      *(_OWORD *)(v7 - 24) = *(_OWORD *)(a3 + 8);
      *(_QWORD *)(v7 - 8) = *(_QWORD *)(a3 + 24);
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)(a3 + 24) = 0;
      v7 = *((_QWORD *)&v14 + 1) - 32;
      *((_QWORD *)&v14 + 1) -= 32;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  sub_10036A358((uint64_t)v11);
  return v9;
}

uint64_t sub_10036A358(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_10036A38C(a1);
  return a1;
}

void sub_10036A38C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = *(void **)(v1 + 8);
    if (v3)
    {
      *(_QWORD *)(v1 + 16) = v3;
      operator delete(v3);
    }
    v1 += 32;
  }
}

uint64_t sub_10036A3D0(uint64_t a1)
{
  sub_10036A404(a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_10036A404(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v5;

  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != a2)
  {
    *(_QWORD *)(a1 + 16) = v2 - 32;
    v5 = *(void **)(v2 - 24);
    if (v5)
    {
      *(_QWORD *)(v2 - 16) = v5;
      operator delete(v5);
      v2 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v2 -= 32;
    }
  }
}

uint64_t sub_10036A45C(uint64_t *a1, __int16 *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  void *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t *v14;

  v3 = 0x86BCA1AF286BCA1BLL * ((a1[1] - *a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0x1AF286BCA1AF286)
    sub_100026E7C();
  if (0xD79435E50D79436 * ((a1[2] - *a1) >> 3) > v4)
    v4 = 0xD79435E50D79436 * ((a1[2] - *a1) >> 3);
  if (0x86BCA1AF286BCA1BLL * ((a1[2] - *a1) >> 3) >= 0xD79435E50D7943)
    v6 = 0x1AF286BCA1AF286;
  else
    v6 = v4;
  v14 = a1 + 2;
  if (v6)
    v7 = (char *)sub_100152EEC((uint64_t)(a1 + 2), v6);
  else
    v7 = 0;
  v10 = v7;
  v11 = &v7[152 * v3];
  v13 = &v7[152 * v6];
  sub_10036A57C((uint64_t)(a1 + 2), (uint64_t)v11, a2);
  v12 = v11 + 152;
  sub_10036A620(a1, &v10);
  v8 = a1[1];
  sub_10036A7CC(&v10);
  return v8;
}

void sub_10036A568(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10036A7CC((void **)va);
  _Unwind_Resume(a1);
}

__n128 sub_10036A57C(uint64_t a1, uint64_t a2, __int16 *a3)
{
  __int16 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;

  v3 = *a3;
  *(_BYTE *)(a2 + 2) = *((_BYTE *)a3 + 2);
  *(_WORD *)a2 = v3;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a3 + 4);
  *(_QWORD *)(a2 + 24) = *((_QWORD *)a3 + 3);
  *((_QWORD *)a3 + 1) = 0;
  *((_QWORD *)a3 + 2) = 0;
  *((_QWORD *)a3 + 3) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_OWORD *)(a2 + 32) = *((_OWORD *)a3 + 2);
  *(_QWORD *)(a2 + 48) = *((_QWORD *)a3 + 6);
  *((_QWORD *)a3 + 4) = 0;
  *((_QWORD *)a3 + 5) = 0;
  *((_QWORD *)a3 + 6) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a3 + 28);
  *(_QWORD *)(a2 + 72) = *((_QWORD *)a3 + 9);
  *((_QWORD *)a3 + 7) = 0;
  *((_QWORD *)a3 + 8) = 0;
  *((_QWORD *)a3 + 9) = 0;
  v4 = *((_OWORD *)a3 + 5);
  v5 = *((_OWORD *)a3 + 6);
  *(_OWORD *)(a2 + 105) = *(_OWORD *)((char *)a3 + 105);
  *(_OWORD *)(a2 + 80) = v4;
  *(_OWORD *)(a2 + 96) = v5;
  *(_QWORD *)(a2 + 136) = 0;
  *(_QWORD *)(a2 + 144) = 0;
  *(_QWORD *)(a2 + 128) = 0;
  result = *((__n128 *)a3 + 8);
  *(__n128 *)(a2 + 128) = result;
  *(_QWORD *)(a2 + 144) = *((_QWORD *)a3 + 18);
  *((_QWORD *)a3 + 16) = 0;
  *((_QWORD *)a3 + 17) = 0;
  *((_QWORD *)a3 + 18) = 0;
  return result;
}

uint64_t sub_10036A620(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_10036A694((uint64_t)(a1 + 2), a1[1], (__int16 *)a1[1], *a1, (__int16 *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_10036A694(uint64_t a1, uint64_t a2, __int16 *a3, uint64_t a4, __int16 *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int16 *v9;
  uint64_t v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  v14 = 0;
  if (a3 == a5)
  {
    v11 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      v9 -= 76;
      sub_10036A57C(a1, v7 - 152, v9);
      v7 = *((_QWORD *)&v16 + 1) - 152;
      *((_QWORD *)&v16 + 1) -= 152;
    }
    while (v9 != a5);
    v11 = v16;
  }
  v14 = 1;
  sub_10036A748((uint64_t)v13);
  return v11;
}

uint64_t sub_10036A748(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_10036A77C((uint64_t *)a1);
  return a1;
}

void sub_10036A77C(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1[2] + 8);
  v2 = *(_QWORD *)(a1[1] + 8);
  if (v1 != v2)
  {
    v3 = *a1;
    do
    {
      sub_1001532D4(v3, v1);
      v1 += 152;
    }
    while (v1 != v2);
  }
}

void **sub_10036A7CC(void **a1)
{
  sub_10036A7FC(a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void sub_10036A7FC(_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 152;
    sub_1001532D4(v4, i - 152);
  }
}

uint64_t sub_10036A840(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = a2;
  sub_100027674(a1 + 16, a3);
  *(_DWORD *)(a1 + 48) = a4;
  *(_QWORD *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 64) = 0;
  return a1;
}

std::thread *sub_10036A87C(std::thread *this)
{
  std::thread *v2;
  std::thread *t;
  uint64_t v4;

  atomic_store(0, (unsigned __int8 *)&this[8]);
  v2 = this + 7;
  if (this[7].__t_)
    std::thread::join(this + 7);
  std::thread::~thread(v2);
  t = (std::thread *)this[5].__t_;
  if (t == &this[2])
  {
    v4 = 4;
    t = this + 2;
    goto LABEL_7;
  }
  if (t)
  {
    v4 = 5;
LABEL_7:
    (*((void (**)(void))&t->__t_->__sig + v4))();
  }
  return this;
}

BOOL sub_10036A8F8(uint64_t a1)
{
  return *(_BYTE *)(a1 + 5) == 1 && *(unsigned __int8 *)(a1 + 4) < 3u;
}

BOOL sub_10036A920(uint64_t a1)
{
  return !*(_BYTE *)(a1 + 4) && *(_BYTE *)(a1 + 5) == 1;
}

BOOL sub_10036A940(uint64_t a1)
{
  return *(_BYTE *)(a1 + 4) == 2 && *(_BYTE *)(a1 + 5) == 1;
}

BOOL sub_10036A964(unsigned __int8 *a1)
{
  return *a1 - 1 < 3;
}

uint64_t sub_10036A978(unsigned __int8 *a1)
{
  uint64_t result;
  std::runtime_error *exception;

  result = *a1;
  if ((result - 1) >= 3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_100365F78(exception, "Unknown message type");
  }
  return result;
}

void sub_10036A9D0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10036A9E4(uint64_t a1)
{
  uint64_t result;
  std::runtime_error *exception;

  result = *(unsigned __int8 *)(a1 + 1);
  if (result >= 3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_100365F78(exception, "Unknown group ID");
  }
  return result;
}

void sub_10036AA38(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10036AA4C(uint64_t a1)
{
  uint64_t result;
  BOOL v3;
  _QWORD *v4;
  std::runtime_error *exception;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  std::runtime_error *v9;
  std::string v10;
  _BYTE v11[16];
  uint64_t v12;
  _BYTE v13[256];

  if (*(unsigned __int8 *)(a1 + 1) > 2u || sub_10036A9E4(a1))
  {
    sub_1000537E4((uint64_t)v11);
    v4 = sub_100054C60(&v12, (uint64_t)"not ranging group ID: ", 22);
    std::ostream::operator<<(v4, *(unsigned __int8 *)(a1 + 1));
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str(v13);
    std::runtime_error::runtime_error(exception, &v10);
  }
  result = *(unsigned __int16 *)(a1 + 2);
  v3 = result > 0x16 || ((1 << result) & 0x60023F) == 0;
  if (v3
    && ((result - 80) > 0x20 || ((1 << (result - 80)) & 0x10001003FLL) == 0)
    && ((result - 512) > 0xD || ((1 << result) & 0x243B) == 0))
  {
    sub_1000537E4((uint64_t)v11);
    v6 = sub_100054C60(&v12, (uint64_t)"Unknown ranging group message ID: ", 34);
    *(_DWORD *)((char *)v6 + *(_QWORD *)(*v6 - 24) + 8) = *(_DWORD *)((_BYTE *)v6 + *(_QWORD *)(*v6 - 24) + 8) & 0xFFFFFFB5 | 8;
    v7 = sub_100054C60(v6, (uint64_t)"0x", 2);
    *(_QWORD *)((char *)v7 + *(_QWORD *)(*v7 - 24) + 24) = 3;
    v10.__r_.__value_.__s.__data_[0] = 48;
    v8 = sub_10015BFA0(v7, (char *)&v10);
    std::ostream::operator<<(v8, *(unsigned __int16 *)(a1 + 2));
    v9 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str(v13);
    std::runtime_error::runtime_error(v9, &v10);
  }
  return result;
}

void sub_10036AC58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
    {
LABEL_6:
      sub_100053910((uint64_t)&a15);
      _Unwind_Resume(a1);
    }
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

uint64_t sub_10036ACB0(uint64_t a1)
{
  uint64_t result;
  std::runtime_error *exception;

  if (*(unsigned __int8 *)(a1 + 1) > 2u || sub_10036A9E4(a1) != 1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_100365F78(exception, "not debug group ID");
    goto LABEL_7;
  }
  result = *(unsigned __int16 *)(a1 + 2);
  if ((result - 82) >= 3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_100365F78(exception, "Debug group message IDs not defined");
LABEL_7:
  }
  return result;
}

void sub_10036AD40(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10036AD58(uint64_t a1)
{
  uint64_t result;
  BOOL v3;
  std::runtime_error *exception;

  if (*(unsigned __int8 *)(a1 + 1) > 2u || sub_10036A9E4(a1) != 2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_100365F78(exception, "not factory test group ID");
LABEL_12:
  }
  result = *(unsigned __int16 *)(a1 + 2);
  v3 = result > 0x20 || ((1 << result) & 0x104090011) == 0;
  if (v3 && (_DWORD)result != 78 && (_DWORD)result != 128)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_100365F78(exception, "Unknown factory test group message ID");
    goto LABEL_12;
  }
  return result;
}

void sub_10036AE10(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

BOOL sub_10036AE28(int a1, int a2)
{
  return a1 >= a2;
}

void sub_10036AE34(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  std::runtime_error *exception;

  if (sub_10036AF20(a1, a2))
  {
    sub_10036C9B0("RoseCIRDecoder::getBufferedCIREvent, version %d", v5, v6, v7, v8, v9, v10, v11, *(unsigned __int8 *)(a1 + 5));
    v19 = *(unsigned __int8 *)(a1 + 5);
    if (v19 == 2)
    {
      sub_100367CC0((int *)a1, (uint64_t *)(a1 + 8), (uint64_t)a3);
    }
    else
    {
      if (v19 != 1)
      {
        sub_10036CAF0("collectRangeCIREvent: Unexpected version number %u in CIR debug data. Only versions 1 and 2 are supported.", v12, v13, v14, v15, v16, v17, v18, *(unsigned __int8 *)(a1 + 5));
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        sub_100365F78(exception, "Unexpected version number in CIR debug data. Only versions 1 and 2 are supported.");
      }
      sub_100393D84((char **)(a1 + 8), (uint64_t)a3);
    }
  }
  else
  {
    *a3 = 0;
    a3[72] = 0;
  }
}

void sub_10036AF0C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

BOOL sub_10036AF20(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BOOL8 result;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  std::runtime_error *exception;
  uint64_t v38;
  int v39;
  __int16 v40;

  v4 = sub_1003A1E70((unsigned int **)a2);
  v5 = sub_1003A1E48(v4);
  v39 = v5;
  v40 = WORD2(v5);
  if (*(_BYTE *)(a1 + 4) && !sub_10036A920((uint64_t)&v39))
  {
    sub_1000051BC("collectRangeCIREvent: waiting for start of multipart message; ignoring partial data",
      v6,
      v7,
      v8,
      v9,
      v10,
      v11,
      v12,
      v38);
    return 0;
  }
  if (sub_10036A920((uint64_t)&v39))
  {
    v13 = *(_QWORD *)(a1 + 8);
    *(_DWORD *)(a1 + 4) = 0;
    *(_QWORD *)(a1 + 16) = v13;
    sub_1003A1EE0((char *)(*(_QWORD *)a2 + 4), 1uLL, (_BYTE *)(a1 + 5), 1);
    sub_1003A1EE0((char *)(*(_QWORD *)a2 + 5), 2uLL, (_BYTE *)(a1 + 6), 1);
    if (*(unsigned __int8 *)(a1 + 5) - 1 >= 2)
    {
      sub_10036CAF0("collectRangeCIREvent: Unexpected version number %u in CIR debug data. Only versions 1 and 2 are supported.", v14, v15, v16, v17, v18, v19, v20, *(unsigned __int8 *)(a1 + 5));
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      sub_100365F78(exception, "Unexpected version number in CIR debug data. Only versions 1 and 2 are supported.");
    }
    sub_1000DE0EC((unint64_t *)(a1 + 8), *(unsigned __int16 *)(a1 + 6));
    v21 = 7;
  }
  else
  {
    v21 = 4;
  }
  sub_10022CEEC(a1 + 8, *(char **)(a1 + 16), (char *)(*(_QWORD *)a2 + v21), *(char **)(a2 + 8), *(_QWORD *)(a2 + 8) - (*(_QWORD *)a2 + v21));
  if (*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8) > (unint64_t)*(unsigned __int16 *)(a1 + 6))
  {
    sub_10036CAF0("collectRangeCIREvent: Collected CIR data exceeds expected size %hu", v22, v23, v24, v25, v26, v27, v28, *(unsigned __int16 *)(a1 + 6));
    result = 0;
    *(_BYTE *)(a1 + 4) = 1;
    return result;
  }
  result = sub_10036A940((uint64_t)&v39);
  if (result)
  {
    result = 1;
    *(_BYTE *)(a1 + 4) = 1;
    if (*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8) != *(unsigned __int16 *)(a1 + 6))
    {
      sub_10036CAF0("collectRangeCIREvent: end of multipart message, expected %hu bytes but received %zu", v30, v31, v32, v33, v34, v35, v36, *(unsigned __int16 *)(a1 + 6));
      return 0;
    }
  }
  return result;
}

void sub_10036B0CC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_10036B0E0(_QWORD *a1, __int16 **a2)
{
  unint64_t *v2;
  _BYTE *v3;
  __int16 *v4;
  __int16 *v5;
  __int16 v7;
  unint64_t v8;
  _BYTE *v9;
  unint64_t v10;
  _BYTE *v11;
  unint64_t v12;
  unint64_t v13;
  size_t v14;
  char *v15;
  char *v16;
  _BYTE *v17;
  _BYTE *v18;
  char v19;
  unint64_t v20;
  unint64_t v21;
  _BYTE *v22;
  unint64_t v23;
  unint64_t v24;
  size_t v25;
  void *v26;
  char *v27;
  _BYTE *v28;
  char v29;

  v2 = a1 + 1;
  v3 = (_BYTE *)a1[1];
  a1[2] = v3;
  v4 = *a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      v7 = *v4;
      v8 = a1[3];
      if ((unint64_t)v3 >= v8)
      {
        v10 = *v2;
        v11 = &v3[-*v2];
        v12 = (unint64_t)(v11 + 1);
        if ((uint64_t)(v11 + 1) < 0)
          goto LABEL_39;
        v13 = v8 - v10;
        if (2 * v13 > v12)
          v12 = 2 * v13;
        if (v13 >= 0x3FFFFFFFFFFFFFFFLL)
          v14 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v14 = v12;
        if (v14)
          v15 = (char *)operator new(v14);
        else
          v15 = 0;
        v16 = &v11[(_QWORD)v15];
        v17 = &v11[(_QWORD)v15];
        *v17 = v7;
        v9 = v17 + 1;
        if (v3 != (_BYTE *)v10)
        {
          v18 = &v3[~v10];
          do
          {
            v19 = *--v3;
            (v18--)[(_QWORD)v15] = v19;
          }
          while (v3 != (_BYTE *)v10);
          v3 = (_BYTE *)*v2;
          v16 = v15;
        }
        a1[1] = v16;
        a1[2] = v9;
        a1[3] = &v15[v14];
        if (v3)
          operator delete(v3);
      }
      else
      {
        *v3 = v7;
        v9 = v3 + 1;
      }
      a1[2] = v9;
      v20 = a1[3];
      if ((unint64_t)v9 >= v20)
      {
        v21 = *v2;
        v22 = &v9[-*v2];
        v23 = (unint64_t)(v22 + 1);
        if ((uint64_t)(v22 + 1) < 0)
LABEL_39:
          sub_100026E7C();
        v24 = v20 - v21;
        if (2 * v24 > v23)
          v23 = 2 * v24;
        if (v24 >= 0x3FFFFFFFFFFFFFFFLL)
          v25 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v25 = v23;
        if (v25)
          v26 = operator new(v25);
        else
          v26 = 0;
        v27 = (char *)v26 + v25;
        v22[(_QWORD)v26] = HIBYTE(v7);
        v3 = &v22[(_QWORD)v26 + 1];
        if (v9 == (_BYTE *)v21)
        {
          a1[1] = &v22[(_QWORD)v26];
          a1[2] = v3;
          a1[3] = v27;
        }
        else
        {
          v28 = &v9[~v21];
          do
          {
            v29 = *--v9;
            (v28--)[(_QWORD)v26] = v29;
          }
          while (v9 != (_BYTE *)v21);
          v9 = (_BYTE *)a1[1];
          a1[1] = v26;
          a1[2] = v3;
          a1[3] = v27;
          if (!v9)
            goto LABEL_37;
        }
        operator delete(v9);
      }
      else
      {
        *v9 = HIBYTE(v7);
        v3 = v9 + 1;
      }
LABEL_37:
      a1[2] = v3;
      ++v4;
    }
    while (v4 != v5);
  }
}

uint64_t sub_10036B2B8(unsigned __int8 *a1)
{
  std::string *v2;
  __int128 v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  std::string v12;
  void *__p[2];
  int64_t v14;
  uint64_t v15;
  _QWORD v16[10];
  char v17;
  uint64_t v18;

  sub_100210A10((uint64_t)&v15);
  sub_10036B50C(*a1, &v12);
  v2 = std::string::append(&v12, ": [");
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v14 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (v14 >= 0)
    v4 = __p;
  else
    v4 = (void **)__p[0];
  if (v14 >= 0)
    v5 = HIBYTE(v14);
  else
    v5 = (uint64_t)__p[1];
  sub_100054C60(&v15, (uint64_t)v4, v5);
  if (SHIBYTE(v14) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
  LOBYTE(__p[0]) = 48;
  v6 = sub_10015BFA0(&v15, (char *)__p);
  *(_DWORD *)((char *)v6 + *(_QWORD *)(*v6 - 24) + 8) = *(_DWORD *)((_BYTE *)v6 + *(_QWORD *)(*v6 - 24) + 8) & 0xFFFFFFB5 | 8;
  if (*((_QWORD *)a1 + 2) != *((_QWORD *)a1 + 1))
  {
    v7 = 0;
    do
    {
      v8 = sub_100054C60(&v15, (uint64_t)"0x", 2);
      *(_QWORD *)((char *)v8 + *(_QWORD *)(*v8 - 24) + 24) = 2;
      std::ostream::operator<<(v8, *(unsigned __int8 *)(*((_QWORD *)a1 + 1) + v7));
      v10 = *((_QWORD *)a1 + 1);
      v9 = *((_QWORD *)a1 + 2);
      if (v7 != ~v10 + v9)
      {
        sub_100054C60(&v15, (uint64_t)", ", 2);
        v10 = *((_QWORD *)a1 + 1);
        v9 = *((_QWORD *)a1 + 2);
      }
      ++v7;
    }
    while (v7 < v9 - v10);
  }
  sub_100054C60(&v15, (uint64_t)"]", 1);
  std::stringbuf::str(v16);
  if (v17 < 0)
    operator delete((void *)v16[8]);
  std::streambuf::~streambuf(v16);
  return std::ios::~ios(&v18);
}

void sub_10036B4B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  sub_100210AFC((uint64_t)&a22);
  _Unwind_Resume(a1);
}

_QWORD *sub_10036B50C@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  char *v2;

  if ((a1 - 1) > 0x35)
    v2 = "Unknown";
  else
    v2 = off_100817428[(char)(a1 - 1)];
  return sub_10000BF04(a2, v2);
}

uint64_t sub_10036B540(uint64_t a1, int a2)
{
  int v2;
  uint64_t v3;
  int v4;

  v2 = 0;
  if (a2 < 0)
  {
    v4 = 0;
  }
  else
  {
    v3 = *(_QWORD *)(a1 + 8);
    v4 = 0;
    if (*(_QWORD *)(a1 + 16) - v3 > (unint64_t)a2)
    {
      v4 = *(unsigned __int8 *)(v3 + a2);
      v2 = 1;
    }
  }
  return v4 | (v2 << 8);
}

BOOL sub_10036B578(uint64_t a1, int a2, char a3)
{
  uint64_t v3;
  unint64_t v4;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16) - v3;
  if (v4 > a2)
    *(_BYTE *)(v3 + a2) = a3;
  return v4 > a2;
}

BOOL sub_10036B59C(int a1)
{
  return (a1 - 9) < 4;
}

uint64_t sub_10036B5AC(unsigned int a1, int a2)
{
  std::runtime_error *exception;

  if (a2 == 2)
  {
    if (a1 < 0x21 && ((0x1FFFFFE01uLL >> a1) & 1) != 0)
      return algn_10047C3EA[(char)a1];
LABEL_9:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_100365F78(exception, "Invalid raw value for extended preamble");
  }
  if (a2 != 1 || a1 >= 4)
    goto LABEL_9;
  return (a1 + 9);
}

void sub_10036B640(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10036B654(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  std::runtime_error *exception;
  uint64_t v10;

  if ((_DWORD)a2 == 1)
  {
    v8 = result;
    result = 0;
    switch(v8)
    {
      case 0:
      case 13:
      case 14:
      case 15:
      case 16:
      case 17:
      case 18:
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
      case 24:
      case 25:
      case 26:
      case 27:
      case 28:
      case 29:
      case 30:
      case 31:
      case 32:
        sub_10036CAF0("Preambles not supported in HSI 1.x", a2, a3, a4, a5, a6, a7, a8, v10);
        goto LABEL_9;
      case 9:
        return result;
      case 10:
        return 1;
      case 11:
        return 2;
      case 12:
        return 3;
      default:
        goto LABEL_9;
    }
  }
  if ((_DWORD)a2 != 2)
  {
    if ((_DWORD)a2)
    {
LABEL_9:
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      sub_100365F78(exception, "Invalid extended preamble");
    }
    else
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      sub_100365F78(exception, "Unknown HSI version");
    }
  }
  return result;
}

void sub_10036B718(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10036B730(char a1)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD v5[2];
  uint64_t v6;
  _QWORD v7[10];
  char v8;
  uint64_t v9;
  char v10;

  sub_1000537E4((uint64_t)v5);
  v2 = sub_100054C60(&v6, (uint64_t)"Preamble_", 9);
  v10 = a1;
  sub_100054C60(v2, (uint64_t)&v10, 1);
  std::stringbuf::str(v7);
  *(_QWORD *)((char *)v5
  v6 = v3;
  if (v8 < 0)
    operator delete((void *)v7[8]);
  std::streambuf::~streambuf(v7);
  return std::ios::~ios(&v9);
}

void sub_10036B800(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100053910((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10036B814(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  std::runtime_error *exception;

  if (result > 0x1B || ((1 << result) & 0xFDB548F) == 0)
  {
    sub_10036CAF0("Exception: %s - 0x%x", a2, a3, a4, a5, a6, a7, a8, (uint64_t)"Invalid session type");
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_100365F78(exception, "Invalid session type");
  }
  return result;
}

void sub_10036B89C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_10036B8B0@<X0>(unsigned int a1@<W0>, _QWORD *a2@<X8>)
{
  char *v2;

  if (a1 > 0x1B)
    v2 = "UNKNOWN";
  else
    v2 = off_1008175D8[(char)a1];
  return sub_10000BF04(a2, v2);
}

uint64_t sub_10036B8E0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  std::runtime_error *exception;

  if (result > 4)
  {
    sub_10036CAF0("Exception: %s - 0x%x", a2, a3, a4, a5, a6, a7, a8, (uint64_t)"Invalid gr superframe format");
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_100365F78(exception, "Invalid session type");
  }
  return result;
}

void sub_10036B954(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10036B968(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  std::runtime_error *exception;

  if (result > 1)
  {
    sub_10036CAF0("Exception: %s - 0x%x", a2, a3, a4, a5, a6, a7, a8, (uint64_t)"Invalid session role");
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_100365F78(exception, "Invalid session role");
  }
  return result;
}

void sub_10036B9D8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10036B9EC(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  std::runtime_error *exception;

  if (result > 0x36 || ((1 << result) & 0x49E3C884FAA1F2) == 0)
  {
    sub_10036CAF0("Exception: Invalid config parameter ID %d", a2, a3, a4, a5, a6, a7, a8, result);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_100365F78(exception, "Invalid config parameter ID");
  }
  return result;
}

void sub_10036BA78(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_WORD *sub_10036BA8C@<X0>(_WORD *result@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  __int16 v4;
  char v5;
  __int16 v6;
  _WORD *v7;

  if (result < 0x33 && (v4 = a2, (a2 - 1) > 0xFFFFFFCC))
  {
    v6 = (__int16)result;
    v7 = operator new(2uLL);
    *(_QWORD *)a3 = v7;
    *v7 = v6 | (v4 << 8);
    result = v7 + 1;
    *(_QWORD *)(a3 + 8) = result;
    *(_QWORD *)(a3 + 16) = result;
    v5 = 1;
  }
  else
  {
    v5 = 0;
    *(_BYTE *)a3 = 0;
  }
  *(_BYTE *)(a3 + 24) = v5;
  return result;
}

uint64_t sub_10036BAF8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (result >= 0x62 && (_DWORD)result != 16398 && (_DWORD)result != 0xFFFF)
  {
    sub_10036CC84("Fault: %s - 0x%x", a2, a3, a4, a5, a6, a7, a8, (uint64_t)"Unknown error code");
    return 0xFFFFLL;
  }
  return result;
}

_QWORD *sub_10036BB54@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  char *v2;
  const char *v3;

  v2 = "SUCCESS";
  switch(a1)
  {
    case 0:
      return sub_10000BF04(a2, v2);
    case 1:
      v2 = "INVALID_CMD_PARAM";
      break;
    case 2:
      v2 = "UNKNOWN_CMD";
      break;
    case 3:
      v2 = "INVALID_CMD_LEN";
      break;
    case 4:
      v2 = "MEMORY_FAILURE";
      break;
    case 5:
      v2 = "INTERNAL";
      break;
    case 6:
      v2 = "BUSY";
      break;
    case 7:
      v2 = "CMD_DISALLOWED";
      break;
    case 8:
      v2 = "SES_MAX_LIMIT_REACHED";
      break;
    case 9:
      v2 = "SES_NOT_FOUND";
      break;
    case 10:
      v2 = "TBD3";
      break;
    case 11:
      v2 = "TBD4";
      break;
    case 12:
      v2 = "SES_TIMEOUT";
      break;
    case 13:
      v2 = "SES_SYNC_TIMEOUT";
      break;
    case 14:
      v2 = "MISSED_RANGING_CYCLE";
      break;
    case 15:
      v2 = "LOCAL_SES_REMOVE_SUCCESS";
      break;
    case 16:
      v2 = "LOCAL_SES_DISABLE_SUCCESS";
      break;
    case 17:
      v2 = "SES_COMPLETED";
      break;
    case 18:
      v2 = "SES_ALREADY_ACTIVE";
      break;
    case 19:
      v2 = "SES_ALREADY_DISABLED";
      break;
    case 20:
      v2 = "SES_SCHEDULING_CONFLICT";
      break;
    case 21:
      v2 = "SES_COEX_CONFLICT";
      break;
    case 22:
      v2 = "SES_WRONG_SYNC";
      break;
    case 23:
      v2 = "START_TIME_ELAPSED";
      break;
    case 24:
      v2 = "SES_UAP_ALREADY_PENDING";
      break;
    case 25:
      v2 = "COEX_UNSUPPORTED";
      break;
    case 26:
      v2 = "INVALID_TX_MINI_SLOT_SIZE";
      break;
    case 27:
      v2 = "INVALID_RX_MINI_SLOT_SIZE";
      break;
    case 28:
      v2 = "INVALID_SES_ROLE";
      break;
    case 29:
      v2 = "INVALID_ANTENNA_CFG";
      break;
    case 30:
      v2 = "INVALID_NACCESS_SLOTS";
      break;
    case 31:
      v2 = "INVALID_PREAMBLE";
      break;
    case 32:
      v2 = "INVALID_FEM_CFG";
      break;
    case 33:
      v2 = "SUPERFRAMES_OVERLAP";
      break;
    case 34:
      v2 = "INVALID_INTERVAL";
      break;
    case 35:
      v2 = "INVALID_PKT_TYPE";
      break;
    case 36:
      v2 = "INVALID_MAC_ADDR";
      break;
    case 37:
      v2 = "MUTE_UNMUTE_DISALLOWED";
      break;
    case 38:
      v2 = "SES_MUTED";
      break;
    case 39:
      v2 = "INVALID_CHANNEL";
      break;
    case 40:
      v2 = "DTM_CMD_UNSUPPORTED";
      break;
    case 41:
      v2 = "DTM_SES_NOT_READY";
      break;
    case 42:
      v2 = "DTM_SES_BUSY";
      break;
    case 43:
      v2 = "DTM_PAYLOAD_INVALID_LEN";
      break;
    case 44:
      v2 = "DTM_INVALID_SES_TO";
      break;
    case 45:
      v2 = "MP_CMD_INTERLEAVED";
      break;
    case 46:
      v2 = "MP_CMD_LEN_OVERFLOW";
      break;
    case 47:
      v2 = "INVALID_SES_TYPE";
      break;
    case 48:
      v2 = "INVALID_ALISHA_UWB_CFG_ID";
      break;
    case 49:
      v2 = "INVALID_ALISHA_RAN_MULTIPLIER";
      break;
    case 50:
      v2 = "INVALID_ALISHA_NRESPONDERS";
      break;
    case 51:
      v2 = "INVALID_ALISHA_NCHAPS_PER_SLOT";
      break;
    case 52:
      v2 = "INVALID_ALISHA_NSLOTS_PER_ROUND";
      break;
    case 53:
      v2 = "INVALID_ALISHA_RBLOCK_CFG";
      break;
    case 54:
      v2 = "ALISHA_UWB_SES_ID_NOT_FOUND";
      break;
    case 55:
      v2 = "ALISHA_UWB_SES_ID_ALREADY_IN_USE";
      break;
    case 56:
      v2 = "ALISHA_KEY_STORE_FULL";
      break;
    case 57:
      v2 = "INVALID_ALISHA_RESPONDER_IDX";
      break;
    case 58:
      v2 = "SES_GRUAP_ALREADY_PENDING";
      break;
    case 59:
      v2 = "INVALID_CHANNEL_HOP_PATTERN";
      break;
    case 60:
      v2 = "INVALID_ACCESS_SLOT_IDX";
      break;
    case 61:
      v2 = "INVALID_GR_TYPE";
      break;
    case 62:
      v2 = "SLOT_TIME_ELAPSED";
      break;
    case 63:
      v2 = "INVALID_ALISHA_PULSE_SHAPE_COMBO";
      break;
    case 64:
      v2 = "INVALID_ALISHA_HOP_MODE";
      break;
    case 65:
      v2 = "INVALID_ALISHA_HOP_SEQUENCE";
      break;
    case 66:
      v2 = "INVALID_SUBRATE";
      break;
    case 67:
      v2 = "SES_NOT_ACTIVE";
      break;
    case 68:
      v2 = "SES_SUBRATE_ALREADY_PENDING";
      break;
    case 69:
      v2 = "SES_SUBRATE_ALREADY_EFFECTIVE";
      break;
    case 70:
      v2 = "UAP_RX_FAILED";
      break;
    case 71:
      v2 = "ALISHA_URSK_RETRIEVAL_FAILED";
      break;
    case 72:
      v2 = "ALISHA_GET_KEY_ALREADY_PENDING";
      break;
    case 73:
      v2 = "ALISHA_STS_INDEX_EXHAUSTED";
      break;
    case 74:
      v2 = "ALISHA_BLOCK_IDX_EXHAUSTED";
      break;
    case 75:
      v2 = "ALISHA_URSK_TTL_EXPIRED";
      break;
    case 76:
      v2 = "INVALID_ALISHA_STS_INDEX_0";
      break;
    case 77:
      v2 = "ALISHA_RESPONSE_TIMEOUT";
      break;
    case 78:
      v2 = "ALISHA_TOTAL_TIMEOUT";
      break;
    case 79:
      v2 = "UNAUTHENTICATED_CAL_BLOB";
      break;
    case 80:
      v2 = "INVALID_SFD";
      break;
    case 81:
      v2 = "INVALID_ALISHA_NSIMRESPONDERS";
      break;
    case 82:
      v2 = "DUPLICATE";
      break;
    case 83:
      v2 = "NMI_NAP_RX_FAILED";
      break;
    case 84:
      v2 = "NMI_NAR_RX_FAILED";
      break;
    case 85:
      v2 = "NMI_SOR_RX_FAILED";
      break;
    case 86:
      v2 = "NMI_NAP_WRONG_SYNC";
      break;
    case 87:
      v2 = "NMI_WRONG_IRK";
      break;
    case 88:
      v2 = "NMI_RNG_DIS_BOTH_SIDES";
      break;
    case 89:
      v2 = "NMI_POLL_RSP_RX_OTHER_FAILURE";
      break;
    case 90:
      v2 = "NMI_DATA_RX_OTHER_FAILURE";
      break;
    case 91:
      v2 = "NMI_POLL_RSP_WRONG_SYNC";
      break;
    case 92:
      v2 = "NMI_DATA_WRONG_SYNC";
      break;
    case 93:
      v2 = "SES_EXCLUSIVE_MAC_DISALLOWED";
      break;
    case 94:
      v2 = "NMI_NAR_WRONG_SYNC";
      break;
    case 95:
      v2 = "NMI_SOR_WRONG_SYNC";
      break;
    case 96:
      v2 = "NMI_INVALID_RTT_TAT";
      break;
    case 97:
      v2 = "NMI_POLL_RSP_MISSED_CYCLE";
      break;
    default:
      v3 = "UNKNOWN";
      if (a1 == 0xFFFF)
        v3 = "UNKNOWN_ERROR";
      if (a1 == 16398)
        v2 = "FACTORY_STOP_TEST";
      else
        v2 = (char *)v3;
      break;
  }
  return sub_10000BF04(a2, v2);
}

uint64_t sub_10036C048(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  std::runtime_error *exception;

  if (result > 6)
  {
    sub_10036CAF0("Exception: %s - 0x%x", a2, a3, a4, a5, a6, a7, a8, (uint64_t)"Invalid Rose hardware version");
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_100365F78(exception, "Invalid Rose hardware version");
  }
  return result;
}

void sub_10036C0B8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_10036C0CC@<X0>(unsigned int a1@<W0>, _QWORD *a2@<X8>)
{
  char *v2;

  if (a1 > 6)
    v2 = "UNKNOWN";
  else
    v2 = off_1008176B8[(__int16)a1];
  return sub_10000BF04(a2, v2);
}

uint64_t sub_10036C0FC(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  std::runtime_error *exception;

  if (((result - 208) > 0x2E || ((1 << (result + 48)) & 0x7FFF47FF1FFFLL) == 0)
    && (result > 0x18 || ((1 << result) & 0x116003F) == 0))
  {
    sub_10036CAF0("Exception: %s - 0x%x", a2, a3, a4, a5, a6, a7, a8, (uint64_t)"Invalid rx status.");
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_100365F78(exception, "Invalid rx status.");
  }
  return result;
}

void sub_10036C1AC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10036C1C0(unsigned __int8 **a1)
{
  unsigned __int8 *v1;
  unsigned __int8 *v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  int v7;

  v1 = *a1;
  v2 = a1[1];
  if (*a1 == v2)
  {
    LOBYTE(v3) = 0;
  }
  else
  {
    v3 = 0;
    v4 = 0;
    do
    {
      v5 = *v1++;
      v6 = v5 - 2;
      v7 = v3 | 2;
      if (v5 == 1)
        v3 |= 1u;
      if (v6 < 4)
      {
        ++v4;
        v3 = v7;
      }
    }
    while (v1 != v2);
    if ((v4 & 0xFFFFFFFB) != 0)
      sub_1003F0264();
  }
  return v3;
}

uint64_t sub_10036C224(unsigned int a1)
{
  if (a1 >= 4)
    sub_1003F028C();
  return a1 & 1;
}

uint64_t sub_10036C240(unsigned int a1)
{
  if (a1 >= 4)
    sub_1003F02B4();
  return (a1 >> 1) & 1;
}

_QWORD *sub_10036C25C@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  char *v2;

  if ((a1 - 1) > 4)
    v2 = "UNKNOWN";
  else
    v2 = off_1008176F0[(char)(a1 - 1)];
  return sub_10000BF04(a2, v2);
}

_QWORD *sub_10036C290@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  const char *v2;
  char *v3;

  v2 = "UNKNOWN";
  if (a1 == 9)
    v2 = "CHANNEL9";
  if (a1 == 5)
    v3 = "CHANNEL5";
  else
    v3 = (char *)v2;
  return sub_10000BF04(a2, v3);
}

_QWORD *sub_10036C2C0@<X0>(unsigned int a1@<W0>, _QWORD *a2@<X8>)
{
  char *v2;

  if (a1 > 6)
    v2 = "UNKNOWN";
  else
    v2 = off_100817718[(char)a1];
  return sub_10000BF04(a2, v2);
}

_BYTE *sub_10036C2F0(_BYTE *result, int a2)
{
  char v2;

  if (a2 == 5)
  {
    v2 = 1;
  }
  else
  {
    if (a2 != 9)
      return result;
    v2 = 2;
  }
  *result |= v2;
  return result;
}

_WORD *sub_10036C31C(_WORD *result, int a2)
{
  if ((a2 - 1) <= 5)
    *result |= word_10047C40C[(char)(a2 - 1)];
  return result;
}

uint64_t sub_10036C348(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 v8;
  std::runtime_error *exception;

  v8 = a1;
  switch((_DWORD)a2)
  {
    case 1:
      if ((_DWORD)a1)
      {
        if ((_DWORD)a1 != 1)
        {
          sub_10036CAF0("Exception: %s - %d", a2, a3, a4, a5, a6, a7, a8, (uint64_t)"Invalid Rose channel config for HSI V1");
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          sub_100365F78(exception, "Invalid Rose channel config");
LABEL_12:
        }
        return 9;
      }
      else
      {
        return 5;
      }
    case 2:
      sub_10036C43C(a1, a2, a3, a4, a5, a6, a7, a8);
      break;
    case 0:
      sub_10036CAF0("Exception: %s", a2, a3, a4, a5, a6, a7, a8, (uint64_t)"Unknown HSI version");
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      sub_100365F78(exception, "Unknown HSI version");
      goto LABEL_12;
  }
  return v8;
}

void sub_10036C424(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10036C43C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  std::runtime_error *exception;

  if ((_DWORD)result != 9 && (_DWORD)result != 5)
  {
    sub_10036CAF0("Exception: %s - %d", a2, a3, a4, a5, a6, a7, a8, (uint64_t)"Invalid Rose channel config for HSI V2");
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_100365F78(exception, "Invalid Rose channel config");
  }
  return result;
}

void sub_10036C4B8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10036C4CC(int a1, int a2)
{
  std::runtime_error *exception;

  if (a2 == 2)
  {
    if (a1 == 5)
      return 5;
    else
      return 9;
  }
  else
  {
    if (a2 != 1)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      sub_100365F78(exception, "Unknown HSI version");
    }
    return a1 != 5;
  }
}

void sub_10036C53C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unint64_t sub_10036C550(unsigned int a1)
{
  unsigned int v1;
  unint64_t v2;

  v1 = a1 >> 11;
  if ((a1 >> 11) - 1 >= 6)
  {
    if (!v1 && (a1 == 9 || a1 == 5))
    {
      LOBYTE(v1) = 0;
      v2 = ((unint64_t)a1 << 8) | 0x10000;
    }
    else
    {
      LOBYTE(v1) = 0;
      v2 = 0;
    }
  }
  else
  {
    v2 = ((unint64_t)(a1 & 0x7FF) << 32) | 0x1000000000000;
  }
  return v2 | v1;
}

uint64_t sub_10036C5B8(unsigned __int8 *a1)
{
  int v1;
  __int16 v2;
  unsigned __int16 v3;
  std::runtime_error *exception;

  v1 = *a1;
  v2 = (_WORD)v1 << 11;
  v3 = v1 - 1;
  if ((v1 - 1) >= 6)
  {
    if (*a1)
      return v3;
    if (a1[2])
      return (unsigned __int16)(v2 | a1[1]);
LABEL_8:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_100365F78(exception, "Missing channel-select for band");
  }
  if (!a1[6])
    goto LABEL_8;
  return (unsigned __int16)(*((_WORD *)a1 + 2) | v2);
}

void sub_10036C65C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10036C674(int a1)
{
  unint64_t v1;
  char v2;
  BOOL v3;
  unint64_t v4;
  unsigned __int8 v5;
  int v6;

  if ((*(_QWORD *)&a1 & 0xFF0000) != 0 && (v1 = sub_10036C550((unsigned __int16)a1), v2))
  {
    v3 = v1 == 0;
    v4 = v1 >> 16;
    if ((_BYTE)v1)
      v5 = 0;
    else
      v5 = BYTE1(v1);
    if (v3)
      v6 = v4;
    else
      v6 = 0;
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  return v5 | (v6 << 8);
}

BOOL sub_10036C6C0(_BYTE *a1)
{
  return *a1 == 0;
}

uint64_t sub_10036C6D0(unsigned int a1)
{
  unsigned int v1;
  unsigned __int8 v2;
  unsigned int v3;
  BOOL v4;
  int v5;

  v1 = a1 >> 8;
  v2 = __rev16(a1);
  v3 = bswap32(a1) >> 24;
  if (((1 << SBYTE1(a1)) & 0x101F7) == 0)
  {
    v2 = 0;
    v3 = a1 >> 8;
  }
  v4 = v1 > 0x10;
  v5 = v1 <= 0x10 && ((1 << SBYTE1(a1)) & 0x101F7) != 0;
  if (v4)
  {
    v2 = 0;
    LOWORD(v3) = v5;
  }
  return (unsigned __int16)(v2 | (unsigned __int16)((_WORD)v3 << 8)) | (v5 << 16);
}

uint64_t sub_10036C724(unsigned __int16 *a1)
{
  return bswap32(*a1) >> 16;
}

uint64_t sub_10036C734(unsigned __int8 *a1)
{
  int v1;
  int v2;
  unsigned int v3;

  v1 = a1[1];
  v2 = *a1;
  if (*a1)
  {
    if (v2 == 16 && v1 == 1)
    {
      v1 = 1;
      v2 = 16;
    }
  }
  else
  {
    v3 = v1 - 1;
    if (v3 >= 0xD)
    {
      v1 = 0;
      v2 = 0;
    }
    else
    {
      v2 = 0;
      v1 = byte_10047C418[(char)v3];
    }
  }
  return v1 | (v2 << 8);
}

uint64_t sub_10036C798(_BYTE *a1)
{
  uint64_t *v2;
  const char *v3;
  uint64_t v4;
  uint64_t *v5;
  const char *v6;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD v14[2];
  uint64_t v15;
  _QWORD v16[10];
  char v17;
  uint64_t v18;

  sub_1000537E4((uint64_t)v14);
  switch(*a1)
  {
    case 0:
      v2 = &v15;
      v3 = "Legacy_";
      v4 = 7;
      goto LABEL_7;
    case 1:
      v2 = &v15;
      v3 = "IEEE_";
      v4 = 5;
      goto LABEL_7;
    case 2:
      v5 = &v15;
      v6 = "IEEE_";
      v7 = 5;
      goto LABEL_9;
    case 4:
      v5 = &v15;
      v6 = "Proprietary_";
      v7 = 12;
      goto LABEL_9;
    case 5:
      v2 = sub_100054C60(&v15, (uint64_t)"Split", 5);
      v3 = "ND_";
      v4 = 3;
LABEL_7:
      v8 = sub_100054C60(v2, (uint64_t)v3, v4);
      v9 = "BPRF";
      goto LABEL_10;
    case 6:
      v5 = sub_100054C60(&v15, (uint64_t)"Split", 5);
      v6 = "ND_";
      v7 = 3;
LABEL_9:
      v8 = sub_100054C60(v5, (uint64_t)v6, v7);
      v9 = "HPRF";
LABEL_10:
      v10 = 4;
      goto LABEL_15;
    case 7:
      v8 = &v15;
      goto LABEL_13;
    case 8:
      v8 = sub_100054C60(&v15, (uint64_t)"Mixed_", 6);
LABEL_13:
      v9 = "MMS";
      v10 = 3;
      goto LABEL_15;
    case 0x10:
      v8 = &v15;
      v9 = "NB";
      v10 = 2;
LABEL_15:
      sub_100054C60(v8, (uint64_t)v9, v10);
      break;
    default:
      break;
  }
  v11 = sub_100054C60(&v15, (uint64_t)" PktIdx ", 8);
  std::ostream::operator<<(v11, a1[1]);
  std::stringbuf::str(v16);
  *(_QWORD *)((char *)v14
  v15 = v12;
  if (v17 < 0)
    operator delete((void *)v16[8]);
  std::streambuf::~streambuf(v16);
  return std::ios::~ios(&v18);
}

void sub_10036C99C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100053910((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10036C9B0(char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t *v10;
  std::string *v11;
  __int128 v12;
  std::mutex *v13;
  void **v14;
  std::string v15;
  void *__p[2];
  int64_t v17;
  va_list v18;

  v18 = (va_list)&a9;
  v10 = sub_1000053D0();
  sub_10036CA90((uint64_t)v10, (uint64_t)a1, (uint64_t)&a9);
  sub_10000BF04(&v15, a1);
  v11 = std::string::append(&v15, "\n");
  v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v17 = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  v13 = (std::mutex *)sub_1000052EC();
  if (v17 >= 0)
    v14 = __p;
  else
    v14 = (void **)__p[0];
  sub_10000529C(v13, (const char *)v14, v18);
  if (SHIBYTE(v17) < 0)
    operator delete(__p[0]);
}

void sub_10036CA60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10036CA90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  std::mutex *v7;

  v7 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  os_log_with_args(*(_QWORD *)a1, 2, a2, a3, v3);
  std::mutex::unlock(v7);
}

void sub_10036CAF0(char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t *v10;
  std::string *v11;
  __int128 v12;
  std::mutex *v13;
  void **v14;
  std::string v15;
  void *__p[2];
  int64_t v17;
  va_list v18;

  v18 = (va_list)&a9;
  v10 = sub_1000053D0();
  sub_10036CBD0((uint64_t)v10, (uint64_t)a1, (uint64_t)&a9);
  sub_10000BF04(&v15, a1);
  v11 = std::string::append(&v15, "\n");
  v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v17 = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  v13 = (std::mutex *)sub_1000052EC();
  if (v17 >= 0)
    v14 = __p;
  else
    v14 = (void **)__p[0];
  sub_10036CC30(v13, (const char *)v14, v18);
  if (SHIBYTE(v17) < 0)
    operator delete(__p[0]);
}

void sub_10036CBA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10036CBD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  std::mutex *v7;

  v7 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  os_log_with_args(*(_QWORD *)a1, 16, a2, a3, v3);
  std::mutex::unlock(v7);
}

void sub_10036CC30(std::mutex *a1, const char *a2, va_list a3)
{
  std::mutex::lock(a1);
  vfprintf(__stderrp, a2, a3);
  fflush(__stderrp);
  std::mutex::unlock(a1);
}

void sub_10036CC84(char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t *v10;
  std::string *v11;
  __int128 v12;
  std::mutex *v13;
  void **v14;
  std::string v15;
  void *__p[2];
  int64_t v17;
  va_list v18;

  v18 = (va_list)&a9;
  v10 = sub_1000053D0();
  sub_10036CD64((uint64_t)v10, (uint64_t)a1, (uint64_t)&a9);
  sub_10000BF04(&v15, a1);
  v11 = std::string::append(&v15, "\n");
  v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v17 = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  v13 = (std::mutex *)sub_1000052EC();
  if (v17 >= 0)
    v14 = __p;
  else
    v14 = (void **)__p[0];
  sub_10036CC30(v13, (const char *)v14, v18);
  if (SHIBYTE(v17) < 0)
    operator delete(__p[0]);
}

void sub_10036CD34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10036CD64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  std::mutex *v7;

  v7 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  os_log_with_args(*(_QWORD *)a1, 17, a2, a3, v3);
  std::mutex::unlock(v7);
}

uint64_t sub_10036CDC8(uint64_t a1)
{
  os_release(*(void **)a1);
  std::mutex::~mutex((std::mutex *)(a1 + 8));
  return a1;
}

uint64_t sub_10036CE00(uint64_t a1)
{
  _QWORD block[5];

  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = sub_10036CE74;
  block[3] = &unk_100817750;
  block[4] = a1;
  if (qword_10085EEE0 != -1)
    dispatch_once(&qword_10085EEE0, block);
  return byte_10085EEE8;
}

void sub_10036CE74(uint64_t a1)
{
  uint64_t v1;
  void **v2;
  void *v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = (void **)(v1 + 48);
  if (*(_QWORD *)(v1 + 48))
    sub_1003F02DC();
  v3 = dlopen("/usr/lib/libRoseBooter.dylib", 1);
  *v2 = v3;
  if (!v3)
  {
    dlerror();
    sub_10036CAF0("Failed to dlopen %s, error: %s", v13, v14, v15, v16, v17, v18, v19, (uint64_t)"/usr/lib/libRoseBooter.dylib");
LABEL_7:
    v12 = 0;
    goto LABEL_8;
  }
  v4 = "RoseBooterHasFailedForward";
  *(_QWORD *)(v1 + 56) = dlsym(v3, "RoseBooterHasFailedForward");
  if (!dlerror())
  {
    if (*(_QWORD *)(v1 + 56))
    {
      v4 = "RoseBooterPerformHealing";
      *(_QWORD *)(v1 + 64) = dlsym(*(void **)(v1 + 48), "RoseBooterPerformHealing");
      if (!dlerror())
      {
        if (*(_QWORD *)(v1 + 64))
        {
          v4 = "RoseBooterAllocate";
          *(_QWORD *)(v1 + 72) = dlsym(*(void **)(v1 + 48), "RoseBooterAllocate");
          if (!dlerror())
          {
            if (*(_QWORD *)(v1 + 72))
            {
              v4 = "RoseBooterPreflight";
              *(_QWORD *)(v1 + 80) = dlsym(*(void **)(v1 + 48), "RoseBooterPreflight");
              if (!dlerror())
              {
                if (*(_QWORD *)(v1 + 80))
                {
                  v4 = "RoseBooterBootChip";
                  *(_QWORD *)(v1 + 88) = dlsym(*(void **)(v1 + 48), "RoseBooterBootChip");
                  if (!dlerror())
                  {
                    if (*(_QWORD *)(v1 + 88))
                    {
                      v4 = "RoseBooterSendCalWithOptions";
                      *(_QWORD *)(v1 + 96) = dlsym(*(void **)(v1 + 48), "RoseBooterSendCalWithOptions");
                      if (!dlerror())
                      {
                        if (*(_QWORD *)(v1 + 96))
                        {
                          v4 = "RoseBooterGetCal";
                          *(_QWORD *)(v1 + 104) = dlsym(*(void **)(v1 + 48), "RoseBooterGetCal");
                          if (!dlerror())
                          {
                            if (*(_QWORD *)(v1 + 104))
                            {
                              v4 = "RoseBooterDestroy";
                              *(_QWORD *)(v1 + 112) = dlsym(*(void **)(v1 + 48), "RoseBooterDestroy");
                              if (!dlerror())
                              {
                                if (*(_QWORD *)(v1 + 112))
                                {
                                  v12 = 1;
                                  goto LABEL_8;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  sub_10036CAF0("Failed to dlsym %s, error: %s", v5, v6, v7, v8, v9, v10, v11, (uint64_t)v4);
  if (!*v2)
    goto LABEL_7;
  dlclose(*v2);
  v12 = 0;
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v1 + 64) = 0u;
  *(_OWORD *)(v1 + 80) = 0u;
  *(_OWORD *)(v1 + 96) = 0u;
  *(_QWORD *)(v1 + 112) = 0;
LABEL_8:
  byte_10085EEE8 = v12;
}

uint64_t sub_10036D064(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v10;
  const __CFDictionary *v12;
  io_service_t MatchingService;
  io_object_t v14;
  uint64_t ChildEntry;
  io_service_t v16;
  const __CFUUID *v17;
  const __CFUUID *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  IOCFPlugInInterface **v28;
  HRESULT (__cdecl *QueryInterface)(void *, REFIID, LPVOID *);
  const __CFUUID *v30;
  CFUUIDBytes v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t byte7;
  io_registry_entry_t child[2];

  *(_QWORD *)child = 0;
  if (qword_10085EEF0 != -1)
    dispatch_once(&qword_10085EEF0, &stru_100817790);
  if (byte_10085EEE9 != 1)
    return 0;
  v10 = (_QWORD *)(a1 + 8);
  if (*(_QWORD *)(a1 + 8))
    return 1;
  if (!*(_QWORD *)(a1 + 40))
  {
    v27 = "packet receive callback uninitialized";
LABEL_25:
    sub_10036CAF0(v27, a2, a3, a4, a5, a6, a7, a8, byte7);
    return 0;
  }
  if (!*(_QWORD *)(a1 + 144))
  {
    v27 = "crash callback needs to be registered first";
    goto LABEL_25;
  }
  if (!*(_QWORD *)(a1 + 176))
  {
    v27 = "state change available callback needs to be registered first";
    goto LABEL_25;
  }
  if (!*(_QWORD *)(a1 + 208))
  {
    v27 = "error reporting callback needs to be registered first";
    goto LABEL_25;
  }
  if (!a2)
  {
    v27 = "invalid dispatch queue parameter";
    goto LABEL_25;
  }
  if ((sub_10036CE00(a1) & 1) == 0)
  {
    v27 = "unable to load booter library";
    goto LABEL_25;
  }
  v12 = IOServiceNameMatching("rose");
  MatchingService = IOServiceGetMatchingService(kIOMainPortDefault, v12);
  if (!MatchingService)
  {
    v27 = "failed to get rose service";
    goto LABEL_25;
  }
  v14 = MatchingService;
  ChildEntry = IORegistryEntryGetChildEntry(MatchingService, "IOService", child);
  IOObjectRelease(v14);
  if ((_DWORD)ChildEntry || (v16 = child[0]) == 0)
  {
    sub_10036D458(a1);
    byte7 = ChildEntry;
    v27 = "failed to get rose driver: 0x%x";
    goto LABEL_25;
  }
  v17 = CFUUIDGetConstantUUIDWithBytes(kCFAllocatorSystemDefault, 0xAu, 0x3Au, 0xB3u, 0x17u, 0x88u, 0xE7u, 0x40u, 0xA0u, 0x89u, 0x68u, 0x33u, 0x55u, 0x58u, 0x14u, 0x66u, 0x63u);
  v18 = CFUUIDGetConstantUUIDWithBytes(0, 0xC2u, 0x44u, 0xE8u, 0x58u, 0x10u, 0x9Cu, 0x11u, 0xD4u, 0x91u, 0xD4u, 0, 0x50u, 0xE4u, 0xC6u, 0x42u, 0x6Fu);
  v19 = IOCreatePlugInInterfaceForService(v16, v17, v18, (IOCFPlugInInterface ***)a1, (SInt32 *)&child[1]);
  IOObjectRelease(child[0]);
  if ((_DWORD)v19 || (v28 = *(IOCFPlugInInterface ***)a1) == 0)
  {
    sub_10036D458(a1);
    sub_10036CAF0("creating rose plugin interface failed: 0x%x", v20, v21, v22, v23, v24, v25, v26, v19);
    return 0;
  }
  QueryInterface = (*v28)->QueryInterface;
  v30 = CFUUIDGetConstantUUIDWithBytes(kCFAllocatorSystemDefault, 0x10u, 0x3Au, 0xBDu, 0x4Au, 0x60u, 0x94u, 0x4Bu, 0xC0u, 0xAEu, 0xEEu, 0x3Eu, 0x37u, 0xF5u, 0xA2u, 0xFu, 0x3Bu);
  v31 = CFUUIDGetUUIDBytes(v30);
  ((void (*)(IOCFPlugInInterface **, _QWORD, _QWORD, uint64_t))QueryInterface)(v28, *(_QWORD *)&v31.byte0, *(_QWORD *)&v31.byte8, a1 + 8);
  if (!*v10)
  {
    sub_10036D458(a1);
    v27 = "failed to query rose plugin interface";
    goto LABEL_25;
  }
  (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v10 + 72))(*v10, a2);
  v32 = (*(uint64_t (**)(_QWORD, void (*)(uint64_t, const void *, size_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t), uint64_t))(**(_QWORD **)(a1 + 8) + 336))(*(_QWORD *)(a1 + 8), sub_10036D4B0, a1);
  if ((_DWORD)v32)
  {
    sub_10036CAF0("failed to register event callback: 0x%x", v33, v34, v35, v36, v37, v38, v39, v32);
  }
  else
  {
    v40 = (*(uint64_t (**)(_QWORD, uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t), uint64_t))(**(_QWORD **)(a1 + 8) + 384))(*(_QWORD *)(a1 + 8), sub_10036D4C4, a1);
    if ((_DWORD)v40)
    {
      sub_10036CAF0("failed to register crashHandlerCallback: 0x%x", v41, v42, v43, v44, v45, v46, v47, v40);
    }
    else
    {
      v48 = (*(uint64_t (**)(_QWORD, uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t), uint64_t))(**(_QWORD **)(a1 + 8) + 392))(*(_QWORD *)(a1 + 8), sub_10036D504, a1);
      if ((_DWORD)v48)
      {
        sub_10036CAF0("failed to register fwStateChangeCallback: 0x%x", v49, v50, v51, v52, v53, v54, v55, v48);
      }
      else
      {
        v56 = (*(uint64_t (**)(_QWORD, uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t), uint64_t))(**(_QWORD **)(a1 + 8) + 400))(*(_QWORD *)(a1 + 8), sub_10036D584, a1);
        if (!(_DWORD)v56)
          return 1;
        sub_10036CAF0("failed to register errorReportCallback: 0x%x", v57, v58, v59, v60, v61, v62, v63, v56);
      }
    }
  }
  sub_10036D458(a1);
  return 0;
}

uint64_t sub_10036D418()
{
  if (qword_10085EEF0 != -1)
    dispatch_once(&qword_10085EEF0, &stru_100817790);
  return byte_10085EEE9;
}

IOCFPlugInInterface **sub_10036D458(uint64_t a1)
{
  uint64_t v2;
  IOCFPlugInInterface **result;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 72))(v2, 0);
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8));
    *(_QWORD *)(a1 + 8) = 0;
  }
  result = *(IOCFPlugInInterface ***)a1;
  if (*(_QWORD *)a1)
  {
    result = (IOCFPlugInInterface **)IODestroyPlugInInterface(result);
    *(_QWORD *)a1 = 0;
  }
  return result;
}

void sub_10036D4B0(uint64_t a1, const void *a2, size_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;

  if (a1)
  {
    sub_10036D65C(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else
  {
    v8 = sub_1003F0304(0, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    sub_10036D4C4(v8);
  }
}

uint64_t sub_10036D4C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;

  if (a1)
  {
    v8 = *(_QWORD *)(a1 + 144);
    if (v8)
    {
      v11 = a2;
      return (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v8 + 48))(v8, &v11);
    }
  }
  else
  {
    v8 = sub_1003F0320(0, a2, a3, a4, a5, a6, a7, a8);
  }
  v10 = sub_1003F033C(v8, a2, a3, a4, a5, a6, a7, a8);
  return sub_10036D504(v10);
}

uint64_t sub_10036D504(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  int v11;

  if (!a1)
  {
    v9 = sub_1003F0358(a2, a2, a3, a4, a5, a6, a7, a8);
    goto LABEL_8;
  }
  v9 = *(_QWORD *)(a1 + 176);
  if (!v9)
  {
LABEL_8:
    sub_1003F0384(v9, a2, a3, a4, a5, a6, a7, a8);
    goto LABEL_9;
  }
  if (a2 > 3)
  {
    sub_10036CAF0("RoseControllerInterface::fwStateChangeCallback() unknown state: 0x%x", a2, a3, a4, a5, a6, a7, a8, a2);
    v9 = *(_QWORD *)(a1 + 176);
    v11 = 4;
    if (v9)
      return (*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)v9 + 48))(v9, &v11);
LABEL_9:
    sub_100027BC4();
  }
  v11 = a2;
  return (*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)v9 + 48))(v9, &v11);
}

uint64_t sub_10036D584(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  if (!a1)
  {
    a1 = sub_1003F03A0(a2, a2, a3, a4, a5, a6, a7, a8);
    goto LABEL_7;
  }
  v8 = a1;
  if (!*(_QWORD *)(a1 + 208))
  {
LABEL_7:
    v12 = sub_1003F03CC(a1, a2, a3, a4, a5, a6, a7, a8);
    return sub_10036D5F8(v12, v13, v14, v15, v16, v17, v18, v19);
  }
  if (a2 >= 0xB)
  {
    sub_10036CAF0("errorReportCallback: UnknownError: %d", a2, a3, a4, a5, a6, a7, a8, a2);
    LODWORD(a2) = 12;
  }
  return sub_10036D750(v8 + 184, a2, a3, a4);
}

uint64_t sub_10036D5F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = *(_QWORD *)(a1 + 8);
  if (!v8)
  {
    sub_10036CAF0("%s: rose not connected", a2, a3, a4, a5, a6, a7, a8, (uint64_t)"reset");
    return 0;
  }
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 112))(v8);
  if ((_DWORD)v9)
  {
    sub_10036CAF0("RoseController reset failed: 0x%x", v10, v11, v12, v13, v14, v15, v16, v9);
    return 0;
  }
  return 1;
}

void sub_10036D65C(uint64_t a1, const void *a2, size_t __sz, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  void *__p;
  void *v13;
  uint64_t v14;
  char v15;

  if (a2 && __sz - 113 > 0xFFFFFFFFFFFFFF92)
  {
    __p = 0;
    v13 = 0;
    v14 = 0;
    sub_1001530EC(&__p, a2, (uint64_t)a2 + __sz, __sz);
    v15 = 0;
    v11 = *(_QWORD *)(a1 + 40);
    if (!v11)
      sub_100027BC4();
    (*(void (**)(uint64_t, void **, char *))(*(_QWORD *)v11 + 48))(v11, &__p, &v15);
    if (__p)
    {
      v13 = __p;
      operator delete(__p);
    }
  }
  else
  {
    sub_10036CAF0("invalid event parameter (size: %zu)", (uint64_t)a2, __sz, a4, a5, a6, a7, a8, __sz);
    if (*(_QWORD *)(a1 + 208))
      sub_10036D750(a1 + 184, 11, (uint64_t)a2, __sz);
  }
}

void sub_10036D734(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10036D750(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  int v8;

  v8 = a2;
  v6 = a4;
  v7 = a3;
  v4 = *(_QWORD *)(a1 + 24);
  if (!v4)
    sub_100027BC4();
  return (*(uint64_t (**)(uint64_t, int *, uint64_t *, uint64_t *))(*(_QWORD *)v4 + 48))(v4, &v8, &v7, &v6);
}

uint64_t sub_10036D794(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v21;
  uint64_t v22;

  v22 = 0;
  v9 = *(_QWORD *)(a1 + 8);
  if (!v9)
  {
    v19 = "driver interface not created";
LABEL_10:
    sub_10036CAF0(v19, a2, a3, a4, a5, a6, a7, a8, v21);
    return 0;
  }
  if (((*(uint64_t (**)(uint64_t, uint64_t *))(a1 + 72))(v9, &v22) & 1) == 0)
  {
    v19 = "creating RoseBooter failed";
    goto LABEL_10;
  }
  v10 = (*(uint64_t (**)(uint64_t))(a1 + 80))(v22);
  if (v10)
  {
    v18 = v10;
    if (((*(uint64_t (**)(uint64_t))(a1 + 112))(v22) & 1) != 0)
      return v18;
    goto LABEL_9;
  }
  sub_10036CAF0("rose preflight failed", v11, v12, v13, v14, v15, v16, v17, v21);
  if (((*(uint64_t (**)(uint64_t))(a1 + 112))(v22) & 1) == 0)
  {
LABEL_9:
    v19 = "destroying RoseBooter failed";
    goto LABEL_10;
  }
  return 0;
}

uint64_t sub_10036D844(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  char *v20;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;

  v24 = -1;
  v25 = -1;
  v23 = 0;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    if (((*(uint64_t (**)(uint64_t, uint64_t *))(a1 + 72))(v9, &v23) & 1) != 0)
    {
      v11 = (*(uint64_t (**)(uint64_t, int *, int *))(a1 + 88))(v23, &v25, &v24);
      v19 = v24;
      a2[1] = v25;
      a2[2] = v19;
      *a2 = v11;
      if ((_DWORD)v11)
      {
        sub_10036CAF0("rose boot failed: %d, driver state %d, status reg %d", v12, v13, v14, v15, v16, v17, v18, v11);
        if (((*(uint64_t (**)(uint64_t))(a1 + 112))(v23) & 1) != 0)
          return 0;
      }
      else if (((*(uint64_t (**)(uint64_t))(a1 + 112))(v23) & 1) != 0)
      {
        return 1;
      }
      v20 = "destroying RoseBooter failed";
    }
    else
    {
      v20 = "creating RoseBooter failed";
    }
  }
  else
  {
    v20 = "driver interface not created";
  }
  sub_10036CAF0(v20, (uint64_t)a2, a3, a4, a5, a6, a7, a8, v22);
  return 0;
}

BOOL sub_10036D91C(uint64_t a1, uint64_t a2, _BYTE *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v10;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BOOL8 v22;
  uint64_t v24;
  int v25;
  uint64_t v26;

  v26 = 0;
  *a3 = 0;
  if (!*(_QWORD *)(a1 + 8))
  {
    v13 = "driver interface not created";
LABEL_12:
    sub_10036CAF0(v13, a2, (uint64_t)a3, a4, a5, a6, a7, a8, v24);
    return 0;
  }
  v10 = a4;
  if ((a2 - 1) > 3)
    v12 = 0;
  else
    v12 = dword_10047C440[(int)a2 - 1];
  v25 = 0;
  if (((*(uint64_t (**)(void))(a1 + 72))() & 1) == 0)
  {
    v13 = "creating RoseBooter failed";
    goto LABEL_12;
  }
  v14 = (*(uint64_t (**)(uint64_t, uint64_t, int *, _QWORD))(a1 + 96))(v26, v12, &v25, v10);
  *(_DWORD *)(a6 + 12) = v14;
  v22 = (_DWORD)v14 == 0;
  if ((_DWORD)v14)
    sub_10036CAF0("send calibration failed: %d", v15, v16, v17, v18, v19, v20, v21, v14);
  *a3 = ((v25 & 2) != 0) + (v25 & 1) + ((v25 & 4) != 0);
  if (((*(uint64_t (**)(uint64_t))(a1 + 112))(v26) & 1) == 0)
  {
    v13 = "destroying RoseBooter failed";
    goto LABEL_12;
  }
  return v22;
}

uint64_t sub_10036DA30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v20;
  uint64_t v21;

  v21 = 0;
  if (!*(_QWORD *)(a1 + 8))
  {
    v18 = "driver interface not created";
    goto LABEL_11;
  }
  if ((a2 - 1) >= 3)
  {
    v18 = "please select a single cal file to retrieve";
    goto LABEL_11;
  }
  v9 = dword_10047C428[(int)a2 - 1];
  if (((*(uint64_t (**)(void))(a1 + 72))() & 1) == 0)
  {
    v18 = "creating RoseBooter failed";
    goto LABEL_11;
  }
  v17 = (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 104))(v21, v9);
  if (!v17)
    sub_10036CAF0("failed to get cal file", v10, v11, v12, v13, v14, v15, v16, v20);
  if (((*(uint64_t (**)(uint64_t))(a1 + 112))(v21) & 1) == 0)
  {
    v18 = "destroying RoseBooter failed";
LABEL_11:
    sub_10036CAF0(v18, a2, a3, a4, a5, a6, a7, a8, v20);
    return 0;
  }
  return v17;
}

uint64_t sub_10036DAF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  unint64_t v27;
  void *__p;
  char *v29;
  char v30;

  LOBYTE(v27) = 0;
  sub_100191910(&__p, 0x70uLL, &v27);
  v27 = 0;
  v13 = *(uint64_t **)(a1 + 8);
  if (!v13)
  {
    sub_10036CAF0("%s: rose not connected", v6, v7, v8, v9, v10, v11, v12, (uint64_t)"send");
    goto LABEL_10;
  }
  v14 = *v13;
  if ((a4 & 0xFF00000000) != 0)
  {
    v15 = (*(uint64_t (**)(void))(v14 + 464))();
    if ((_DWORD)v15)
    {
      sub_10036CAF0("PerformCommandWithTimeout failed: 0x%x", v16, v17, v18, v19, v20, v21, v22, v15);
LABEL_10:
      v24 = 0;
      goto LABEL_11;
    }
  }
  else
  {
    v23 = (*(uint64_t (**)(void))(v14 + 256))();
    if ((_DWORD)v23)
    {
      sub_10036CAF0("PerformCommand failed: 0x%x", v16, v17, v18, v19, v20, v21, v22, v23);
      goto LABEL_10;
    }
  }
  if (v27 - 113 <= 0xFFFFFFFFFFFFFF92)
  {
    sub_10036CAF0("invalid response (length: %zu)", v16, v17, v18, v19, v20, v21, v22, v27);
    goto LABEL_10;
  }
  if (v27 <= v29 - (_BYTE *)__p)
  {
    if (v27 < v29 - (_BYTE *)__p)
      v29 = (char *)__p + v27;
  }
  else
  {
    sub_10003F150((unint64_t *)&__p, v27 - (v29 - (_BYTE *)__p));
  }
  v30 = 1;
  v26 = *(_QWORD *)(a1 + 40);
  if (!v26)
    sub_100027BC4();
  (*(void (**)(uint64_t, void **, char *))(*(_QWORD *)v26 + 48))(v26, &__p, &v30);
  v24 = 1;
LABEL_11:
  if (__p)
  {
    v29 = (char *)__p;
    operator delete(__p);
  }
  return v24;
}

void sub_10036DC6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10036DC90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  BOOL v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  BOOL v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v71;

  if (!*(_QWORD *)(a1 + 8))
  {
    v18 = "driver interface not created";
LABEL_29:
    sub_10036CAF0(v18, a2, a3, a4, a5, a6, a7, a8, v71);
    return 0;
  }
  if (!a2)
  {
    v18 = "invalid parameter";
    goto LABEL_29;
  }
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v10 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 120))(*(_QWORD *)(a1 + 8), a2 + 8);
  if ((_DWORD)v10)
  {
    sub_10036CAF0("get chip id failed: 0x%x", v11, v12, v13, v14, v15, v16, v17, v10);
    return 0;
  }
  v19 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 128))(*(_QWORD *)(a1 + 8), a2 + 10);
  if ((_DWORD)v19)
  {
    sub_10036CAF0("get board id failed: 0x%x", v20, v21, v22, v23, v24, v25, v26, v19);
    return 0;
  }
  v27 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 136))(*(_QWORD *)(a1 + 8), a2);
  if ((_DWORD)v27)
  {
    sub_10036CAF0("get ecid failed: 0x%x", v28, v29, v30, v31, v32, v33, v34, v27);
    return 0;
  }
  v35 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 192))(*(_QWORD *)(a1 + 8), a2 + 12);
  if ((_DWORD)v35)
  {
    sub_10036CAF0("get boot mode failed: 0x%x", v36, v37, v38, v39, v40, v41, v42, v35);
    return 0;
  }
  v43 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 224))(*(_QWORD *)(a1 + 8), a2 + 17);
  if ((_DWORD)v43)
    v51 = 1;
  else
    v51 = *(unsigned __int8 *)(a2 + 17) >= 2u;
  if (v51)
  {
    sub_10036CAF0("get secure mode failed: 0x%08x secureMode: 0x%x", v44, v45, v46, v47, v48, v49, v50, v43);
    return 0;
  }
  v52 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 216))(*(_QWORD *)(a1 + 8), a2 + 16);
  if ((_DWORD)v52)
    v60 = 1;
  else
    v60 = *(unsigned __int8 *)(a2 + 16) >= 2u;
  if (v60)
  {
    sub_10036CAF0("get production mode failed: 0x%08x prodMode: 0x%02x", v53, v54, v55, v56, v57, v58, v59, v52);
    return 0;
  }
  v61 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 232))(*(_QWORD *)(a1 + 8), a2 + 18);
  if ((_DWORD)v61)
  {
    sub_10036CAF0("get security domain failed: 0x%08x", v62, v63, v64, v65, v66, v67, v68, v61);
    return 0;
  }
  v69 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 352))(*(_QWORD *)(a1 + 8), a2 + 20);
  if ((_DWORD)v69)
  {
    v71 = v69;
    v18 = "get chip revision failed: 0x%08x";
    goto LABEL_29;
  }
  return 1;
}

uint64_t sub_10036DE4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v19;

  v8 = *(_QWORD *)(a1 + 8);
  if (!v8)
  {
    v17 = "driver interface not created";
LABEL_7:
    sub_10036CAF0(v17, a2, a3, a4, a5, a6, a7, a8, v19);
    return 0;
  }
  if (!a2)
  {
    v17 = "invalid time dictionary";
    goto LABEL_7;
  }
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 208))(v8);
  if (!(_DWORD)v9)
    return 1;
  sub_10036CAF0("perform timesync failed: 0x%x", v10, v11, v12, v13, v14, v15, v16, v9);
  return 0;
}

uint64_t sub_10036DEB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v20;

  v8 = *(_QWORD *)(a1 + 8);
  if (!v8)
  {
    v18 = "driver interface not created";
LABEL_7:
    sub_10036CAF0(v18, a2, a3, a4, a5, a6, a7, a8, v20);
    return 0;
  }
  if (!a6)
  {
    v18 = "Invalid arguments";
    goto LABEL_7;
  }
  v10 = a2;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v8 + 360))(v8))
  {
    sub_10036CAF0("error while trying to dequeue FirwmareCrashLogs for core - %d: 0x%x", v11, v12, v13, v14, v15, v16, v17, v10);
    return 0;
  }
  if (a3 && *(unsigned __int8 *)(a3 + 13) != v10)
  {
    sub_10036CAF0("Expecting a crash log for core: %d. But, got a crash log for core: %d", v11, v12, v13, v14, v15, v16, v17, v10);
    return 0;
  }
  return 1;
}

BOOL sub_10036DF54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BOOL8 v18;
  uint64_t v21;

  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = a2;
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 368))(v8);
    v18 = v10 == -536870160 || v10 == 0;
    if (v10 != -536870160 && v10 != 0)
      sub_10036CAF0("error while trying to read the coredump information for core - %d: 0x%x", v11, v12, v13, v14, v15, v16, v17, v9);
  }
  else
  {
    sub_10036CAF0("driver interface not created", a2, a3, a4, a5, a6, a7, a8, v21);
    return 0;
  }
  return v18;
}

uint64_t sub_10036DFD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  v8 = *(_QWORD *)(a1 + 8);
  if (!v8)
  {
    sub_10036CAF0("driver interface not created", a2, a3, a4, a5, a6, a7, a8, v18);
    return 0;
  }
  v9 = a2;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v8 + 376))(v8))
  {
    sub_10036CAF0("error while trying to read the coredump for core - %d: 0x%x", v10, v11, v12, v13, v14, v15, v16, v9);
    return 0;
  }
  return 1;
}

uint64_t sub_10036E040(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  v8 = *(_QWORD *)(a1 + 8);
  if (!v8)
  {
    sub_10036CAF0("driver interface not created", a2, a3, a4, a5, a6, a7, a8, v18);
    return 0;
  }
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 272))(v8);
  if ((_DWORD)v9)
  {
    sub_10036CAF0("error while trying to pause firmware logs: 0x%x", v10, v11, v12, v13, v14, v15, v16, v9);
    return 0;
  }
  return 1;
}

uint64_t sub_10036E098(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  v8 = *(_QWORD *)(a1 + 8);
  if (!v8)
  {
    sub_10036CAF0("driver interface not created", a2, a3, a4, a5, a6, a7, a8, v18);
    return 0;
  }
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 288))(v8);
  if ((_DWORD)v9)
  {
    sub_10036CAF0("error while trying to resume firmware logs: 0x%x", v10, v11, v12, v13, v14, v15, v16, v9);
    return 0;
  }
  return 1;
}

uint64_t sub_10036E0F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v19;

  v8 = *(_QWORD *)(a1 + 8);
  if (!v8)
  {
    v17 = "driver interface not created";
LABEL_9:
    sub_10036CAF0(v17, a2, a3, a4, a5, a6, a7, a8, v19);
    return 0;
  }
  if (!a2 || !a3 || !a4)
  {
    v17 = "Invalid arguments";
    goto LABEL_9;
  }
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 280))(v8);
  if (!(_DWORD)v9)
    return 1;
  sub_10036CAF0("error while trying to dequeue FirwmareCrashLogs: 0x%x", v10, v11, v12, v13, v14, v15, v16, v9);
  return 0;
}

_QWORD *sub_10036E160(uint64_t a1, uint64_t a2)
{
  return sub_10036E168((_QWORD *)(a1 + 120), a2);
}

_QWORD *sub_10036E168(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;

  sub_100027674((uint64_t)v6, a2);
  sub_10036E8B4(v6, a1);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

_QWORD *sub_10036E200(uint64_t a1, uint64_t a2)
{
  return sub_10036E208((_QWORD *)(a1 + 152), a2);
}

_QWORD *sub_10036E208(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;

  sub_100027674((uint64_t)v6, a2);
  sub_10036EA28(v6, a1);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

_QWORD *sub_10036E2A0(uint64_t a1, uint64_t a2)
{
  return sub_10036E2A8((_QWORD *)(a1 + 184), a2);
}

_QWORD *sub_10036E2A8(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;

  sub_100027674((uint64_t)v6, a2);
  sub_10036EB9C(v6, a1);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

uint64_t sub_10036E340(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  v8 = *(_QWORD *)(a1 + 8);
  if (!v8)
  {
    sub_10036CAF0("driver interface not created", a2, a3, a4, a5, a6, a7, a8, v18);
    return 0;
  }
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 344))(v8);
  if ((_DWORD)v9)
  {
    sub_10036CAF0("error while trying to trigger a crashlog: 0x%x", v10, v11, v12, v13, v14, v15, v16, v9);
    return 0;
  }
  return 1;
}

uint64_t sub_10036E398(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t result;
  uint64_t v12;
  unsigned __int8 v13;

  v8 = *(_QWORD *)(a1 + 8);
  if (!v8)
  {
    v10 = "driver interface not created";
LABEL_7:
    sub_10036CAF0(v10, a2, a3, a4, a5, a6, a7, a8, v12);
    return 4;
  }
  v13 = 0;
  v9 = (*(uint64_t (**)(uint64_t, unsigned __int8 *))(*(_QWORD *)v8 + 304))(v8, &v13);
  if (!(_DWORD)v9)
  {
    result = v13;
    if (v13 < 4u)
      return result;
    v12 = v13;
    v10 = "RoseControllerInterface::getFirmwareState() unknown state: 0x%x";
    goto LABEL_7;
  }
  sub_10036CAF0("error while trying to get the firmware state: 0x%x", a2, a3, a4, a5, a6, a7, a8, v9);
  return 4;
}

void sub_10036E40C(id a1)
{
  const __CFDictionary *v1;
  io_service_t MatchingService;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  CFTypeRef CFProperty;
  char v11;
  char *v12;
  uint64_t v13;

  v1 = IOServiceNameMatching("rose");
  MatchingService = IOServiceGetMatchingService(kIOMainPortDefault, v1);
  if (!MatchingService)
  {
    v12 = "failed to find rose service";
LABEL_6:
    sub_10036CAF0(v12, v3, v4, v5, v6, v7, v8, v9, v13);
    v11 = 0;
    goto LABEL_7;
  }
  CFProperty = IORegistryEntryCreateCFProperty(MatchingService, CFSTR("ECID"), kCFAllocatorDefault, 0);
  if (!CFProperty)
  {
    v12 = "rose ECID property not found in registry";
    goto LABEL_6;
  }
  CFRelease(CFProperty);
  v11 = 1;
LABEL_7:
  byte_10085EEE9 = v11;
}

uint64_t sub_10036E49C(uint64_t a1, _BYTE *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v22;

  if ((sub_10036CE00(a1) & 1) == 0)
  {
    sub_1000051BC("couldn't load booter library, so we are answering to the best of our ability", v4, v5, v6, v7, v8, v9, v10, v22);
    LOBYTE(v20) = 0;
    goto LABEL_5;
  }
  v11 = (*(uint64_t (**)(void))(a1 + 56))();
  v12 = v11;
  sub_1000051BC("fail forward state %d", v13, v14, v15, v16, v17, v18, v19, v11);
  if ((v12 - 1) <= 2)
  {
    v20 = 0x10001u >> (8 * (v12 - 1));
LABEL_5:
    *a2 = v20;
    return 1;
  }
  return 0;
}

uint64_t sub_10036E524(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  if ((sub_10036CE00(a1) & 1) != 0)
    return (*(uint64_t (**)(void))(a1 + 64))();
  sub_1000051BC("couldn't load booter library, so we are answering to the best of our ability", v2, v3, v4, v5, v6, v7, v8, v10);
  return 0;
}

uint64_t sub_10036E568(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  v8 = *(_QWORD *)(a1 + 8);
  if (!v8)
  {
    sub_10036CAF0("driver interface not created", a2, a3, a4, a5, a6, a7, a8, v18);
    return 0;
  }
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 432))(v8);
  if ((_DWORD)v9)
  {
    sub_10036CAF0("error while trying to deallocate firmware log cache: 0x%x", v10, v11, v12, v13, v14, v15, v16, v9);
    return 0;
  }
  sub_1000051BC("successfully deallocated firmware log cache", v10, v11, v12, v13, v14, v15, v16, v18);
  return 1;
}

uint64_t sub_10036E5CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  v8 = *(_QWORD *)(a1 + 8);
  if (!v8)
  {
    sub_10036CAF0("driver interface not created", a2, a3, a4, a5, a6, a7, a8, v18);
    return 0;
  }
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 408))(v8);
  if ((_DWORD)v9)
  {
    sub_10036CAF0("error while trying to SetPowerState : 0x%x", v10, v11, v12, v13, v14, v15, v16, v9);
    return 0;
  }
  return 1;
}

uint64_t sub_10036E624(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v9;
  uint64_t v10;
  const char *v11;
  char *v13;
  uint64_t v14;

  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = a2;
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 456))(v8);
    if (!(_DWORD)v10)
      return 1;
    if ((_DWORD)v10 == -536870203)
    {
      v11 = "off";
      if (v9)
        v11 = "on";
      sub_1000051BC("deep sleep state %s was requested, which was already the current state, so the request was a no-op", a2, a3, a4, a5, a6, a7, a8, (uint64_t)v11);
      return 1;
    }
    v14 = v10;
    v13 = "error while trying to SetDeepSleepState : 0x%x";
  }
  else
  {
    v13 = "driver interface not created";
  }
  sub_10036CAF0(v13, a2, a3, a4, a5, a6, a7, a8, v14);
  return 0;
}

uint64_t sub_10036E6C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v19;

  v8 = *(_QWORD *)(a1 + 8);
  if (!v8)
  {
    v17 = "driver interface not created";
LABEL_7:
    sub_10036CAF0(v17, a2, a3, a4, a5, a6, a7, a8, v19);
    return 0;
  }
  if (!a2)
  {
    v17 = "invalid time dictionary";
    goto LABEL_7;
  }
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 248))(v8);
  if (!(_DWORD)v9)
    return 1;
  sub_10036CAF0("error getting debug info: 0x%x", v10, v11, v12, v13, v14, v15, v16, v9);
  return 0;
}

CFDataRef sub_10036E728(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  char *v17;
  CFDataRef result;
  uint64_t v19;
  uint64_t v20;
  const UInt8 *v21;

  v20 = 0;
  v21 = 0;
  v8 = *(_QWORD *)(a1 + 8);
  if (!v8)
  {
    v17 = "driver interface not created";
LABEL_14:
    sub_10036CAF0(v17, a2, a3, a4, a5, a6, a7, a8, v19);
    return 0;
  }
  v9 = (*(uint64_t (**)(uint64_t, const CFAllocatorRef, const UInt8 **, uint64_t *))(*(_QWORD *)v8 + 440))(v8, kCFAllocatorDefault, &v21, &v20);
  if ((_DWORD)v9)
    v15 = 1;
  else
    v15 = v21 == 0;
  if (v15 || v20 == 0)
  {
    sub_10036CAF0("get sik public key failed: 0x%x, size %zu", (uint64_t)v21, v20, v10, v11, v12, v13, v14, v9);
    return 0;
  }
  result = CFDataCreateWithBytesNoCopy(kCFAllocatorDefault, v21, v20, kCFAllocatorDefault);
  if (!result)
  {
    v17 = "failed to package sik public key";
    goto LABEL_14;
  }
  return result;
}

_QWORD *sub_10036E7C8(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  sub_10036D458((uint64_t)a1);
  v2 = (_QWORD *)a1[26];
  if (v2 == a1 + 23)
  {
    v3 = 4;
    v2 = a1 + 23;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  v4 = (_QWORD *)a1[22];
  if (v4 == a1 + 19)
  {
    v5 = 4;
    v4 = a1 + 19;
  }
  else
  {
    if (!v4)
      goto LABEL_11;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_11:
  v6 = (_QWORD *)a1[18];
  if (v6 == a1 + 15)
  {
    v7 = 4;
    v6 = a1 + 15;
  }
  else
  {
    if (!v6)
      goto LABEL_16;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_16:
  v8 = (_QWORD *)a1[5];
  if (v8 == a1 + 2)
  {
    v9 = 4;
    v8 = a1 + 2;
    goto LABEL_20;
  }
  if (v8)
  {
    v9 = 5;
LABEL_20:
    (*(void (**)(void))(*v8 + 8 * v9))();
  }
  return a1;
}

_QWORD *sub_10036E8B4(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[3];

  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_10036EA1C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_1000131D8(a1);
}

_QWORD *sub_10036EA28(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[3];

  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_10036EB90(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_1000131D8(a1);
}

_QWORD *sub_10036EB9C(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[3];

  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_10036ED04(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_1000131D8(a1);
}

uint64_t sub_10036ED10()
{
  uint64_t v0;

  return abort_report_np(v0);
}

void sub_10036ED18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  char *v9;

  sub_10036CAF0(v9, a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t sub_10036ED20(uint64_t a1)
{
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

char *sub_10036ED78(char *__dst, __int128 *a2, __int128 *a3)
{
  __int128 v5;
  __int128 v6;
  _BYTE *v7;
  __int128 v8;
  __int16 v9;

  if (*((char *)a2 + 23) < 0)
  {
    sub_100004678(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v5;
  }
  if (*((char *)a3 + 23) < 0)
  {
    sub_100004678(__dst + 24, *(void **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v6 = *a3;
    *((_QWORD *)__dst + 5) = *((_QWORD *)a3 + 2);
    *(_OWORD *)(__dst + 24) = v6;
  }
  v7 = __dst + 48;
  if (*((char *)a3 + 47) < 0)
  {
    sub_100004678(v7, *((void **)a3 + 3), *((_QWORD *)a3 + 4));
  }
  else
  {
    v8 = *(__int128 *)((char *)a3 + 24);
    *((_QWORD *)__dst + 8) = *((_QWORD *)a3 + 5);
    *(_OWORD *)v7 = v8;
  }
  v9 = *((_WORD *)a3 + 24);
  __dst[74] = *((_BYTE *)a3 + 50);
  *((_WORD *)__dst + 36) = v9;
  return __dst;
}

void sub_10036EE38(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 47) < 0)
    operator delete(*v2);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

char *sub_10036EE6C(char *__dst, __int128 *a2, __int128 *a3)
{
  __int128 v5;
  __int128 v6;
  _BYTE *v7;
  __int128 v8;

  if (*((char *)a2 + 23) < 0)
  {
    sub_100004678(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v5;
  }
  if (*((char *)a3 + 23) < 0)
  {
    sub_100004678(__dst + 24, *(void **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v6 = *a3;
    *((_QWORD *)__dst + 5) = *((_QWORD *)a3 + 2);
    *(_OWORD *)(__dst + 24) = v6;
  }
  v7 = __dst + 48;
  if (*((char *)a3 + 47) < 0)
  {
    sub_100004678(v7, *((void **)a3 + 3), *((_QWORD *)a3 + 4));
  }
  else
  {
    v8 = *(__int128 *)((char *)a3 + 24);
    *((_QWORD *)__dst + 8) = *((_QWORD *)a3 + 5);
    *(_OWORD *)v7 = v8;
  }
  *((_WORD *)__dst + 36) = *((_WORD *)a3 + 24);
  return __dst;
}

void sub_10036EF24(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 47) < 0)
    operator delete(*v2);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10036EF58(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    v5 = 80 * a3;
    do
    {
      sub_10036EFD0(a1, a2, (__int128 *)a2);
      a2 += 80;
      v5 -= 80;
    }
    while (v5);
  }
  return a1;
}

void sub_10036EFBC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1001D8F08(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_10036EFD0(uint64_t a1, unsigned __int8 *a2, __int128 *a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *i;
  unint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD v25[3];

  v7 = (_QWORD *)(a1 + 24);
  v8 = sub_10003AAC4(a1 + 24, (uint64_t)a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if ((sub_10003AF6C(a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3)
            break;
        }
      }
    }
  }
  sub_10036F250(a1, v9, a3, (uint64_t)v25);
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    sub_10002A900(a1, v21);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v22)
  {
    *(_QWORD *)v25[0] = *v22;
    *v22 = v25[0];
  }
  else
  {
    *(_QWORD *)v25[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v25[0])
    {
      v23 = *(_QWORD *)(*(_QWORD *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10)
          v23 %= v10;
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v25[0];
    }
  }
  i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*v7;
  sub_10036F3B8((uint64_t)v25, 0);
  return i;
}

void sub_10036F238(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10036F3B8((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

char *sub_10036F250@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  void *v8;
  char *result;

  v7 = a1 + 16;
  v8 = operator new(0x60uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = a2;
  result = sub_10036F2C4((char *)v8 + 16, a3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_10036F2AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10036F3B8(v1, 0);
  _Unwind_Resume(a1);
}

char *sub_10036F2C4(char *__dst, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  _BYTE *v6;
  __int128 v7;
  __int16 v8;

  if (*((char *)a2 + 23) < 0)
  {
    sub_100004678(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    sub_100004678(__dst + 24, *((void **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v5 = *(__int128 *)((char *)a2 + 24);
    *((_QWORD *)__dst + 5) = *((_QWORD *)a2 + 5);
    *(_OWORD *)(__dst + 24) = v5;
  }
  v6 = __dst + 48;
  if (*((char *)a2 + 71) < 0)
  {
    sub_100004678(v6, *((void **)a2 + 6), *((_QWORD *)a2 + 7));
  }
  else
  {
    v7 = a2[3];
    *((_QWORD *)__dst + 8) = *((_QWORD *)a2 + 8);
    *(_OWORD *)v6 = v7;
  }
  v8 = *((_WORD *)a2 + 36);
  __dst[74] = *((_BYTE *)a2 + 74);
  *((_WORD *)__dst + 36) = v8;
  return __dst;
}

void sub_10036F384(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 47) < 0)
    operator delete(*v2);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void sub_10036F3B8(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_1001D8F7C((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

uint64_t sub_10036F3FC(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    v5 = 80 * a3;
    do
    {
      sub_10036F474(a1, a2, (__int128 *)a2);
      a2 += 80;
      v5 -= 80;
    }
    while (v5);
  }
  return a1;
}

void sub_10036F460(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1001D8F08(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_10036F474(uint64_t a1, unsigned __int8 *a2, __int128 *a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *i;
  unint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD v25[3];

  v7 = (_QWORD *)(a1 + 24);
  v8 = sub_10003AAC4(a1 + 24, (uint64_t)a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if ((sub_10003AF6C(a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3)
            break;
        }
      }
    }
  }
  sub_10036F6F4(a1, v9, a3, (uint64_t)v25);
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    sub_10002A900(a1, v21);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v22)
  {
    *(_QWORD *)v25[0] = *v22;
    *v22 = v25[0];
  }
  else
  {
    *(_QWORD *)v25[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v25[0])
    {
      v23 = *(_QWORD *)(*(_QWORD *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10)
          v23 %= v10;
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v25[0];
    }
  }
  i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*v7;
  sub_10036F3B8((uint64_t)v25, 0);
  return i;
}

void sub_10036F6DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10036F3B8((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

char *sub_10036F6F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  void *v8;
  char *result;

  v7 = a1 + 16;
  v8 = operator new(0x60uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = a2;
  result = sub_10036F768((char *)v8 + 16, a3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_10036F750(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10036F3B8(v1, 0);
  _Unwind_Resume(a1);
}

char *sub_10036F768(char *__dst, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  _BYTE *v6;
  __int128 v7;

  if (*((char *)a2 + 23) < 0)
  {
    sub_100004678(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    sub_100004678(__dst + 24, *((void **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v5 = *(__int128 *)((char *)a2 + 24);
    *((_QWORD *)__dst + 5) = *((_QWORD *)a2 + 5);
    *(_OWORD *)(__dst + 24) = v5;
  }
  v6 = __dst + 48;
  if (*((char *)a2 + 71) < 0)
  {
    sub_100004678(v6, *((void **)a2 + 6), *((_QWORD *)a2 + 7));
  }
  else
  {
    v7 = a2[3];
    *((_QWORD *)__dst + 8) = *((_QWORD *)a2 + 8);
    *(_OWORD *)v6 = v7;
  }
  *((_WORD *)__dst + 36) = *((_WORD *)a2 + 36);
  return __dst;
}

void sub_10036F820(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 47) < 0)
    operator delete(*v2);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10036F854()
{
  unint64_t v0;
  unsigned __int8 *v1;
  void *v3[2];
  char v4;
  void *__p;
  char v6;
  __int16 v7;
  char v8;
  void *v9[2];
  char v10;
  void *v11[2];
  char v12;
  void *v13;
  char v14;
  __int16 v15;
  char v16;
  void *v17[2];
  char v18;
  void *v19[2];
  char v20;
  void *v21;
  char v22;
  __int16 v23;
  char v24;
  void *v25[2];
  char v26;
  void *v27[2];
  char v28;
  void *v29;
  char v30;
  __int16 v31;
  char v32;
  void *v33[2];
  char v34;
  void *v35[2];
  char v36;
  void *v37;
  char v38;
  __int16 v39;
  char v40;
  void *v41[2];
  char v42;
  void *v43[2];
  char v44;
  void *v45;
  char v46;
  __int16 v47;
  char v48;
  void *v49[2];
  char v50;
  void *v51[2];
  char v52;
  void *v53;
  char v54;
  __int16 v55;
  char v56;
  void *v57[2];
  char v58;
  void *v59[2];
  char v60;
  void *v61;
  char v62;
  __int16 v63;
  char v64;
  void *v65[2];
  char v66;
  void *v67[2];
  char v68;
  void *v69;
  char v70;
  __int16 v71;
  char v72;
  void *v73[2];
  char v74;
  void *v75[2];
  char v76;
  void *v77;
  char v78;
  __int16 v79;
  char v80;
  void *v81[2];
  char v82;
  void *v83[2];
  char v84;
  void *v85;
  char v86;
  __int16 v87;
  char v88;
  void *v89[2];
  char v90;
  void *v91[2];
  char v92;
  void *v93;
  char v94;
  __int16 v95;
  char v96;
  void *v97[2];
  char v98;
  void *v99[2];
  char v100;
  void *v101;
  char v102;
  __int16 v103;
  char v104;
  void *v105[2];
  char v106;
  void *v107[2];
  char v108;
  void *v109;
  char v110;
  __int16 v111;
  char v112;
  void *v113[2];
  char v114;
  void *v115[2];
  char v116;
  void *v117;
  char v118;
  __int16 v119;
  char v120;
  void *v121[2];
  char v122;
  void *v123[2];
  char v124;
  void *v125;
  char v126;
  __int16 v127;
  char v128;
  void *v129[2];
  char v130;
  void *v131[2];
  char v132;
  void *v133;
  char v134;
  __int16 v135;
  char v136;
  void *v137[2];
  char v138;
  void *v139[2];
  char v140;
  void *v141;
  char v142;
  __int16 v143;
  char v144;
  void *v145[2];
  char v146;
  void *v147[2];
  char v148;
  void *v149;
  char v150;
  __int16 v151;
  char v152;
  void *v153[2];
  char v154;
  void *v155[2];
  char v156;
  void *v157;
  char v158;
  __int16 v159;
  char v160;
  void *v161[2];
  char v162;
  void *v163[2];
  char v164;
  void *v165;
  char v166;
  __int16 v167;
  char v168;
  void *v169[2];
  char v170;
  void *v171[2];
  char v172;
  void *v173;
  char v174;
  __int16 v175;
  char v176;
  void *v177[2];
  char v178;
  void *v179[2];
  char v180;
  void *v181;
  char v182;
  __int16 v183;
  char v184;
  void *v185[2];
  char v186;
  void *v187[2];
  char v188;
  void *v189;
  char v190;
  __int16 v191;
  char v192;
  void *v193[2];
  char v194;
  void *v195[2];
  char v196;
  void *v197;
  char v198;
  __int16 v199;
  char v200;
  void *v201[2];
  char v202;
  void *v203[2];
  char v204;
  void *v205;
  char v206;
  __int16 v207;
  char v208;
  void *v209[2];
  char v210;
  void *v211[2];
  char v212;
  void *v213;
  char v214;
  __int16 v215;
  char v216;
  void *v217[2];
  char v218;
  void *v219[2];
  char v220;
  void *v221;
  char v222;
  __int16 v223;
  char v224;
  void *v225[2];
  char v226;
  void *v227[2];
  char v228;
  void *v229;
  char v230;
  __int16 v231;
  char v232;
  void *v233[2];
  char v234;
  void *v235[2];
  char v236;
  void *v237;
  char v238;
  __int16 v239;
  char v240;
  void *v241[2];
  char v242;
  void *v243[2];
  char v244;
  void *v245;
  char v246;
  __int16 v247;
  char v248;
  void *v249[2];
  char v250;
  void *v251[2];
  char v252;
  void *v253;
  char v254;
  __int16 v255;
  char v256;
  void *v257[2];
  char v258;
  void *v259[2];
  char v260;
  void *v261;
  char v262;
  __int16 v263;
  char v264;
  void *v265[2];
  char v266;
  void *v267[2];
  char v268;
  void *v269;
  char v270;
  __int16 v271;
  char v272;
  void *v273[2];
  char v274;
  void *v275[2];
  char v276;
  void *v277;
  char v278;
  __int16 v279;
  char v280;
  void *v281[2];
  char v282;
  void *v283[2];
  char v284;
  void *v285;
  char v286;
  __int16 v287;
  char v288;
  void *v289[2];
  char v290;
  void *v291[2];
  char v292;
  void *v293;
  char v294;
  __int16 v295;
  char v296;
  void *v297[2];
  char v298;
  void *v299[2];
  char v300;
  void *v301;
  char v302;
  __int16 v303;
  char v304;
  void *v305[2];
  char v306;
  void *v307[2];
  char v308;
  void *v309;
  char v310;
  __int16 v311;
  char v312;
  void *v313[2];
  char v314;
  void *v315[2];
  char v316;
  void *v317;
  char v318;
  __int16 v319;
  char v320;
  void *v321[2];
  char v322;
  void *v323[2];
  char v324;
  void *v325;
  char v326;
  __int16 v327;
  char v328;
  void *v329[2];
  char v330;
  void *v331[2];
  char v332;
  void *v333;
  char v334;
  __int16 v335;
  char v336;
  void *v337[2];
  char v338;
  void *v339[2];
  char v340;
  void *v341;
  char v342;
  __int16 v343;
  char v344;
  void *v345[2];
  char v346;
  void *v347[2];
  char v348;
  void *v349;
  char v350;
  __int16 v351;
  char v352;
  void *v353[2];
  char v354;
  void *v355[2];
  char v356;
  void *v357;
  char v358;
  __int16 v359;
  char v360;
  void *v361[2];
  char v362;
  void *v363[2];
  char v364;
  void *v365;
  char v366;
  __int16 v367;
  char v368;
  void *v369[2];
  char v370;
  void *v371[2];
  char v372;
  void *v373;
  char v374;
  __int16 v375;
  char v376;
  void *v377[2];
  char v378;
  void *v379[2];
  char v380;
  void *v381;
  char v382;
  __int16 v383;
  char v384;
  void *v385[2];
  char v386;
  void *v387[2];
  char v388;
  void *v389;
  char v390;
  __int16 v391;
  char v392;
  void *v393[2];
  char v394;
  void *v395[2];
  char v396;
  void *v397;
  char v398;
  __int16 v399;
  char v400;
  void *v401[2];
  char v402;
  void *v403[2];
  char v404;
  void *v405;
  char v406;
  __int16 v407;
  char v408;
  void *v409[2];
  char v410;
  void *v411[2];
  char v412;
  void *v413;
  char v414;
  __int16 v415;
  char v416;
  void *v417[2];
  char v418;
  void *v419[2];
  char v420;
  void *v421;
  char v422;
  __int16 v423;
  char v424;
  void *v425[2];
  char v426;
  void *v427[2];
  char v428;
  void *v429;
  char v430;
  __int16 v431;
  char v432;
  void *v433[2];
  char v434;
  void *v435[2];
  char v436;
  void *v437;
  char v438;
  __int16 v439;
  char v440;
  void *v441[2];
  char v442;
  void *v443[2];
  char v444;
  void *v445;
  char v446;
  __int16 v447;
  char v448;
  void *v449[2];
  char v450;
  void *v451[2];
  char v452;
  void *v453;
  char v454;
  __int16 v455;
  char v456;
  void *v457[2];
  char v458;
  void *v459[2];
  char v460;
  void *v461;
  char v462;
  __int16 v463;
  char v464;
  void *v465[2];
  char v466;
  void *v467[2];
  char v468;
  void *v469;
  char v470;
  __int16 v471;
  char v472;
  void *v473[2];
  char v474;
  void *v475[2];
  char v476;
  void *v477;
  char v478;
  __int16 v479;
  char v480;
  void *v481[2];
  char v482;
  void *v483[2];
  char v484;
  void *v485;
  char v486;
  __int16 v487;
  char v488;
  void *v489[2];
  char v490;
  void *v491[2];
  char v492;
  void *v493;
  char v494;
  __int16 v495;
  char v496;
  void *v497[2];
  char v498;
  void *v499[2];
  char v500;
  void *v501;
  char v502;
  __int16 v503;
  char v504;
  void *v505[2];
  char v506;
  void *v507[2];
  char v508;
  void *v509;
  char v510;
  __int16 v511;
  char v512;
  void *v513[2];
  char v514;
  void *v515[2];
  char v516;
  void *v517;
  char v518;
  __int16 v519;
  char v520;
  void *v521[2];
  char v522;
  void *v523[2];
  char v524;
  void *v525;
  char v526;
  __int16 v527;
  char v528;
  void *v529[2];
  char v530;
  void *v531[2];
  char v532;
  void *v533;
  char v534;
  __int16 v535;
  char v536;
  void *v537[2];
  char v538;
  void *v539[2];
  char v540;
  void *v541;
  char v542;
  __int16 v543;
  char v544;
  void *v545[2];
  char v546;
  void *v547[2];
  char v548;
  void *v549;
  char v550;
  __int16 v551;
  char v552;
  void *v553[2];
  char v554;
  void *v555[2];
  char v556;
  void *v557;
  char v558;
  __int16 v559;
  char v560;
  void *v561[2];
  char v562;
  void *v563[2];
  char v564;
  void *v565;
  char v566;
  __int16 v567;
  char v568;
  void *v569[2];
  char v570;
  void *v571[2];
  char v572;
  void *v573;
  char v574;
  __int16 v575;
  char v576;
  void *v577[2];
  char v578;
  void *v579[2];
  char v580;
  void *v581;
  char v582;
  __int16 v583;
  char v584;
  void *v585[2];
  char v586;
  void *v587[2];
  char v588;
  void *v589;
  char v590;
  __int16 v591;
  char v592;
  void *v593[2];
  char v594;
  void *v595[2];
  char v596;
  void *v597;
  char v598;
  __int16 v599;
  char v600;
  void *v601[2];
  char v602;
  void *v603[2];
  char v604;
  void *v605;
  char v606;
  __int16 v607;
  char v608;
  void *v609[2];
  char v610;
  void *v611[2];
  char v612;
  void *v613;
  char v614;
  __int16 v615;
  char v616;
  void *v617[2];
  char v618;
  void *v619[2];
  char v620;
  void *v621;
  char v622;
  __int16 v623;
  char v624;
  void *v625[2];
  char v626;
  void *v627[2];
  char v628;
  void *v629;
  char v630;
  __int16 v631;
  char v632;
  void *v633[2];
  char v634;
  void *v635[2];
  char v636;
  void *v637;
  char v638;
  __int16 v639;
  char v640;
  void *v641[2];
  char v642;
  void *v643[2];
  char v644;
  void *v645;
  char v646;
  __int16 v647;
  char v648;
  void *v649[2];
  char v650;
  void *v651[2];
  char v652;
  void *v653;
  char v654;
  __int16 v655;
  char v656;
  void *v657[2];
  char v658;
  void *v659[2];
  char v660;
  void *v661;
  char v662;
  __int16 v663;
  char v664;
  void *v665[2];
  char v666;
  void *v667[2];
  char v668;
  void *v669;
  char v670;
  __int16 v671;
  char v672;
  void *v673[2];
  char v674;
  void *v675[2];
  char v676;
  void *v677;
  char v678;
  __int16 v679;
  char v680;
  void *v681[2];
  char v682;
  void *v683[2];
  char v684;
  void *v685;
  char v686;
  __int16 v687;
  char v688;
  void *v689[2];
  char v690;
  void *v691[2];
  char v692;
  void *v693;
  char v694;
  __int16 v695;
  char v696;
  void *v697[2];
  char v698;
  void *v699[2];
  char v700;
  void *v701;
  char v702;
  __int16 v703;
  char v704;
  void *v705[2];
  char v706;
  void *v707[2];
  char v708;
  void *v709;
  char v710;
  __int16 v711;
  char v712;
  void *v713[2];
  char v714;
  void *v715[2];
  char v716;
  void *v717;
  char v718;
  __int16 v719;
  char v720;
  void *v721[2];
  char v722;
  void *v723[2];
  char v724;
  void *v725;
  char v726;
  __int16 v727;
  char v728;
  void *v729[2];
  char v730;
  void *v731[2];
  char v732;
  void *v733;
  char v734;
  __int16 v735;
  char v736;
  void *v737[2];
  char v738;
  void *v739[2];
  char v740;
  void *v741;
  char v742;
  __int16 v743;
  char v744;
  void *v745[2];
  char v746;
  void *v747[2];
  char v748;
  void *v749;
  char v750;
  __int16 v751;
  char v752;
  void *v753[2];
  char v754;
  void *v755[2];
  char v756;
  void *v757;
  char v758;
  __int16 v759;
  char v760;
  void *v761[2];
  char v762;
  void *v763[2];
  char v764;
  void *v765;
  char v766;
  __int16 v767;
  char v768;
  void *v769[2];
  char v770;
  void *v771[2];
  char v772;
  void *v773;
  char v774;
  __int16 v775;
  char v776;
  void *v777[2];
  char v778;
  void *v779[2];
  char v780;
  void *v781;
  char v782;
  __int16 v783;
  char v784;
  void *v785[2];
  char v786;
  void *v787[2];
  char v788;
  void *v789;
  char v790;
  __int16 v791;
  char v792;
  void *v793[2];
  char v794;
  void *v795[2];
  char v796;
  void *v797;
  char v798;
  __int16 v799;
  char v800;
  void *v801[2];
  char v802;
  void *v803[2];
  char v804;
  void *v805;
  char v806;
  __int16 v807;
  char v808;
  void *v809[2];
  char v810;
  void *v811[2];
  char v812;
  void *v813;
  char v814;
  __int16 v815;
  char v816;
  void *v817[2];
  char v818;
  void *v819[2];
  char v820;
  void *v821;
  char v822;
  __int16 v823;
  char v824;
  void *v825[2];
  char v826;
  void *v827[2];
  char v828;
  void *v829;
  char v830;
  __int16 v831;
  char v832;
  void *v833[2];
  char v834;
  void *v835[2];
  char v836;
  void *v837;
  char v838;
  __int16 v839;
  char v840;
  void *v841[2];
  char v842;
  void *v843[2];
  char v844;
  void *v845;
  char v846;
  __int16 v847;
  char v848;
  void *v849[2];
  char v850;
  void *v851[2];
  char v852;
  void *v853;
  char v854;
  __int16 v855;
  char v856;
  void *v857[2];
  char v858;
  void *v859[2];
  char v860;
  void *v861;
  char v862;
  __int16 v863;
  char v864;
  void *v865[2];
  char v866;
  void *v867[2];
  char v868;
  void *v869;
  char v870;
  __int16 v871;
  char v872;
  void *v873[2];
  char v874;
  void *v875[2];
  char v876;
  void *v877;
  char v878;
  __int16 v879;
  char v880;
  void *v881[2];
  char v882;
  void *v883[2];
  char v884;
  void *v885;
  char v886;
  __int16 v887;
  char v888;
  void *v889[2];
  char v890;
  void *v891[2];
  char v892;
  void *v893;
  char v894;
  __int16 v895;
  char v896;
  void *v897[2];
  char v898;
  void *v899[2];
  char v900;
  void *v901;
  char v902;
  __int16 v903;
  char v904;
  void *v905[2];
  char v906;
  void *v907[2];
  char v908;
  void *v909;
  char v910;
  __int16 v911;
  char v912;
  void *v913[2];
  char v914;
  void *v915[2];
  char v916;
  void *v917;
  char v918;
  __int16 v919;
  char v920;
  void *v921[2];
  char v922;
  void *v923[2];
  char v924;
  void *v925;
  char v926;
  __int16 v927;
  char v928;
  void *v929[2];
  char v930;
  void *v931[2];
  char v932;
  void *v933;
  char v934;
  __int16 v935;
  char v936;
  void *v937[2];
  char v938;
  void *v939[2];
  char v940;
  void *v941;
  char v942;
  __int16 v943;
  char v944;
  void *v945[2];
  char v946;
  void *v947[2];
  char v948;
  void *v949;
  char v950;
  __int16 v951;
  char v952;
  void *v953[2];
  char v954;
  void *v955[2];
  char v956;
  void *v957;
  char v958;
  __int16 v959;
  char v960;
  void *v961[2];
  char v962;
  void *v963[2];
  char v964;
  void *v965;
  char v966;
  __int16 v967;
  char v968;
  void *v969[2];
  char v970;
  void *v971[2];
  char v972;
  void *v973;
  char v974;
  __int16 v975;
  char v976;
  void *v977[2];
  char v978;
  void *v979[2];
  char v980;
  void *v981;
  char v982;
  __int16 v983;
  char v984;
  void *v985[2];
  char v986;
  void *v987[2];
  char v988;
  void *v989;
  char v990;
  __int16 v991;
  char v992;
  void *v993[2];
  char v994;
  void *v995[2];
  char v996;
  void *v997;
  char v998;
  __int16 v999;
  char v1000;
  void *v1001[2];
  char v1002;
  void *v1003[2];
  char v1004;
  void *v1005;
  char v1006;
  __int16 v1007;
  char v1008;
  void *v1009[2];
  char v1010;
  void *v1011[2];
  char v1012;
  void *v1013;
  char v1014;
  __int16 v1015;
  char v1016;
  void *v1017[2];
  char v1018;
  void *v1019[2];
  char v1020;
  void *v1021;
  char v1022;
  __int16 v1023;
  char v1024;
  void *v1025[2];
  char v1026;
  void *v1027[2];
  char v1028;
  void *v1029;
  char v1030;
  __int16 v1031;
  char v1032;
  void *v1033[2];
  char v1034;
  void *v1035[2];
  char v1036;
  void *v1037;
  char v1038;
  __int16 v1039;
  char v1040;
  void *v1041[2];
  char v1042;
  void *v1043[2];
  char v1044;
  void *v1045;
  char v1046;
  __int16 v1047;
  char v1048;
  void *v1049[2];
  char v1050;
  void *v1051[2];
  char v1052;
  void *v1053;
  char v1054;
  __int16 v1055;
  char v1056;
  void *v1057[2];
  char v1058;
  void *v1059[2];
  char v1060;
  void *v1061;
  char v1062;
  __int16 v1063;
  char v1064;
  void *v1065[2];
  char v1066;
  void *v1067[2];
  char v1068;
  void *v1069;
  char v1070;
  __int16 v1071;
  char v1072;
  void *v1073[2];
  char v1074;
  void *v1075[2];
  char v1076;
  void *v1077;
  char v1078;
  __int16 v1079;
  char v1080;
  void *v1081[2];
  char v1082;
  void *v1083[2];
  char v1084;
  void *v1085;
  char v1086;
  __int16 v1087;
  char v1088;
  void *v1089[2];
  char v1090;
  void *v1091[2];
  char v1092;
  void *v1093;
  char v1094;
  __int16 v1095;
  char v1096;
  void *v1097[2];
  char v1098;
  void *v1099[2];
  char v1100;
  void *v1101;
  char v1102;
  __int16 v1103;
  char v1104;
  void *v1105[2];
  char v1106;
  void *v1107[2];
  char v1108;
  void *v1109;
  char v1110;
  __int16 v1111;
  char v1112;
  void *v1113[2];
  char v1114;
  void *v1115[2];
  char v1116;
  void *v1117;
  char v1118;
  __int16 v1119;
  char v1120;
  void *v1121[2];
  char v1122;
  void *v1123[2];
  char v1124;
  void *v1125;
  char v1126;
  __int16 v1127;
  char v1128;
  void *v1129[2];
  char v1130;
  void *v1131[2];
  char v1132;
  void *v1133;
  char v1134;
  __int16 v1135;
  char v1136;
  void *v1137[2];
  char v1138;
  void *v1139[2];
  char v1140;
  void *v1141;
  char v1142;
  __int16 v1143;
  char v1144;
  void *v1145[2];
  char v1146;
  void *v1147[2];
  char v1148;
  void *v1149;
  char v1150;
  __int16 v1151;
  char v1152;
  void *v1153[2];
  char v1154;
  void *v1155[2];
  char v1156;
  void *v1157;
  char v1158;
  __int16 v1159;
  char v1160;
  void *v1161[2];
  char v1162;
  void *v1163[2];
  char v1164;
  void *v1165;
  char v1166;
  __int16 v1167;
  char v1168;
  void *v1169[2];
  char v1170;
  void *v1171[2];
  char v1172;
  void *v1173;
  char v1174;
  __int16 v1175;
  char v1176;
  void *v1177[2];
  char v1178;
  void *v1179[2];
  char v1180;
  void *v1181;
  char v1182;
  __int16 v1183;
  char v1184;
  void *v1185[2];
  char v1186;
  void *v1187[2];
  char v1188;
  void *v1189;
  char v1190;
  __int16 v1191;
  char v1192;
  void *v1193[2];
  char v1194;
  void *v1195[2];
  char v1196;
  void *v1197;
  char v1198;
  __int16 v1199;
  char v1200;
  void *v1201[2];
  char v1202;
  void *v1203[2];
  char v1204;
  void *v1205;
  char v1206;
  __int16 v1207;
  char v1208;
  void *v1209[2];
  char v1210;
  void *v1211[2];
  char v1212;
  void *v1213;
  char v1214;
  __int16 v1215;
  char v1216;
  void *v1217[2];
  char v1218;
  void *v1219[2];
  char v1220;
  void *v1221;
  char v1222;
  __int16 v1223;
  char v1224;
  void *v1225[2];
  char v1226;
  void *v1227[2];
  char v1228;
  void *v1229;
  char v1230;
  __int16 v1231;
  char v1232;
  void *v1233[2];
  char v1234;
  void *v1235[2];
  char v1236;
  void *v1237;
  char v1238;
  __int16 v1239;
  char v1240;
  void *v1241[2];
  char v1242;
  void *v1243[2];
  char v1244;
  void *v1245;
  char v1246;
  __int16 v1247;
  char v1248;
  void *v1249[2];
  char v1250;
  void *v1251[2];
  char v1252;
  void *v1253;
  char v1254;
  __int16 v1255;
  char v1256;
  void *v1257[2];
  char v1258;
  void *v1259[2];
  char v1260;
  void *v1261;
  char v1262;
  __int16 v1263;
  char v1264;
  void *v1265[2];
  char v1266;
  void *v1267[2];
  char v1268;
  void *v1269;
  char v1270;
  __int16 v1271;
  char v1272;
  void *v1273[2];
  char v1274;
  void *v1275[2];
  char v1276;
  void *v1277;
  char v1278;
  __int16 v1279;
  char v1280;
  void *v1281[2];
  char v1282;
  void *v1283[2];
  char v1284;
  void *v1285;
  char v1286;
  __int16 v1287;
  char v1288;
  void *v1289[2];
  char v1290;
  void *v1291[2];
  char v1292;
  void *v1293;
  char v1294;
  __int16 v1295;
  char v1296;
  void *v1297[2];
  char v1298;
  void *v1299[2];
  char v1300;
  void *v1301;
  char v1302;
  __int16 v1303;
  char v1304;
  void *v1305[2];
  char v1306;
  void *v1307[2];
  char v1308;
  void *v1309;
  char v1310;
  __int16 v1311;
  char v1312;
  void *v1313[2];
  char v1314;
  void *v1315[2];
  char v1316;
  void *v1317;
  char v1318;
  __int16 v1319;
  char v1320;
  void *v1321[2];
  char v1322;
  void *v1323[2];
  char v1324;
  void *v1325;
  char v1326;
  __int16 v1327;
  char v1328;
  void *v1329[2];
  char v1330;
  void *v1331[2];
  char v1332;
  void *v1333;
  char v1334;
  __int16 v1335;
  char v1336;
  void *v1337[2];
  char v1338;
  void *v1339[2];
  char v1340;
  void *v1341;
  char v1342;
  __int16 v1343;
  char v1344;
  void *v1345[2];
  char v1346;
  void *v1347[2];
  char v1348;
  void *v1349;
  char v1350;
  __int16 v1351;
  char v1352;
  void *v1353[2];
  char v1354;
  void *v1355[2];
  char v1356;
  void *v1357;
  char v1358;
  __int16 v1359;
  char v1360;
  void *v1361[2];
  char v1362;
  void *v1363[2];
  char v1364;
  void *v1365;
  char v1366;
  __int16 v1367;
  char v1368;
  void *v1369[2];
  char v1370;
  void *v1371[2];
  char v1372;
  void *v1373;
  char v1374;
  __int16 v1375;
  char v1376;
  void *v1377[2];
  char v1378;
  void *v1379[2];
  char v1380;
  void *v1381;
  char v1382;
  __int16 v1383;
  char v1384;
  void *v1385[2];
  char v1386;
  void *v1387[2];
  char v1388;
  void *v1389;
  char v1390;
  __int16 v1391;
  char v1392;
  void *v1393[2];
  char v1394;
  void *v1395[2];
  char v1396;
  void *v1397;
  char v1398;
  __int16 v1399;
  char v1400;
  void *v1401[2];
  char v1402;
  void *v1403[2];
  char v1404;
  void *v1405;
  char v1406;
  __int16 v1407;
  char v1408;
  void *v1409[2];
  char v1410;
  void *v1411[2];
  char v1412;
  void *v1413;
  char v1414;
  __int16 v1415;
  char v1416;
  void *v1417[2];
  char v1418;
  void *v1419[2];
  char v1420;
  void *v1421;
  char v1422;
  __int16 v1423;
  char v1424;
  void *v1425[2];
  char v1426;
  void *v1427[2];
  char v1428;
  void *v1429;
  char v1430;
  __int16 v1431;
  char v1432;
  void *v1433[2];
  char v1434;
  void *v1435[2];
  char v1436;
  void *v1437;
  char v1438;
  __int16 v1439;
  char v1440;
  void *v1441[2];
  char v1442;
  void *v1443[2];
  char v1444;
  void *v1445;
  char v1446;
  __int16 v1447;
  char v1448;
  void *v1449[2];
  char v1450;
  void *v1451[2];
  char v1452;
  void *v1453;
  char v1454;
  __int16 v1455;
  char v1456;
  void *v1457[2];
  char v1458;
  void *v1459[2];
  char v1460;
  void *v1461;
  char v1462;
  __int16 v1463;
  char v1464;
  void *v1465[2];
  char v1466;
  void *v1467[2];
  char v1468;
  void *v1469;
  char v1470;
  __int16 v1471;
  char v1472;
  void *v1473[2];
  char v1474;
  void *v1475[2];
  char v1476;
  void *v1477;
  char v1478;
  __int16 v1479;
  char v1480;
  void *v1481[2];
  char v1482;
  void *v1483[2];
  char v1484;
  void *v1485;
  char v1486;
  __int16 v1487;
  char v1488;
  void *v1489[2];
  char v1490;
  void *v1491[2];
  char v1492;
  void *v1493;
  char v1494;
  __int16 v1495;
  char v1496;
  void *v1497[2];
  char v1498;
  void *v1499[2];
  char v1500;
  void *v1501;
  char v1502;
  __int16 v1503;
  char v1504;
  void *v1505[2];
  char v1506;
  void *v1507[2];
  char v1508;
  void *v1509;
  char v1510;
  __int16 v1511;
  char v1512;
  void *v1513[2];
  char v1514;
  void *v1515[2];
  char v1516;
  void *v1517;
  char v1518;
  __int16 v1519;
  char v1520;
  void *v1521[2];
  char v1522;
  void *v1523[2];
  char v1524;
  void *v1525;
  char v1526;
  __int16 v1527;
  char v1528;
  void *v1529[2];
  char v1530;
  void *v1531[2];
  char v1532;
  void *v1533;
  char v1534;
  __int16 v1535;
  char v1536;
  void *v1537[2];
  char v1538;
  void *v1539[2];
  char v1540;
  void *v1541;
  char v1542;
  __int16 v1543;
  char v1544;
  void *v1545[2];
  char v1546;
  void *v1547[2];
  char v1548;
  void *v1549;
  char v1550;
  __int16 v1551;
  char v1552;
  void *v1553[2];
  char v1554;
  void *v1555[2];
  char v1556;
  void *v1557;
  char v1558;
  __int16 v1559;
  char v1560;
  void *v1561[2];
  char v1562;
  void *v1563[2];
  char v1564;
  void *v1565;
  char v1566;
  __int16 v1567;
  char v1568;
  void *v1569[2];
  char v1570;
  void *v1571[2];
  char v1572;
  void *v1573;
  char v1574;
  __int16 v1575;
  char v1576;
  void *v1577[2];
  char v1578;
  void *v1579[2];
  char v1580;
  void *v1581;
  char v1582;
  __int16 v1583;
  char v1584;
  void *v1585[2];
  char v1586;
  void *v1587[2];
  char v1588;
  void *v1589;
  char v1590;
  __int16 v1591;
  char v1592;
  void *v1593[2];
  char v1594;
  void *v1595[2];
  char v1596;
  void *v1597;
  char v1598;
  __int16 v1599;
  char v1600;
  void *v1601[2];
  char v1602;
  void *v1603[2];
  char v1604;
  void *v1605;
  char v1606;
  __int16 v1607;
  char v1608;
  void *v1609[2];
  char v1610;
  void *v1611[2];
  char v1612;
  void *v1613;
  char v1614;
  __int16 v1615;
  char v1616;
  void *v1617[2];
  char v1618;
  void *v1619[2];
  char v1620;
  void *v1621;
  char v1622;
  __int16 v1623;
  char v1624;
  void *v1625[2];
  char v1626;
  void *v1627[2];
  char v1628;
  void *v1629;
  char v1630;
  __int16 v1631;
  char v1632;
  void *v1633[2];
  char v1634;
  void *v1635[2];
  char v1636;
  void *v1637;
  char v1638;
  __int16 v1639;
  char v1640;
  void *v1641[2];
  char v1642;
  void *v1643[2];
  char v1644;
  void *v1645;
  char v1646;
  __int16 v1647;
  char v1648;
  void *v1649[2];
  char v1650;
  void *v1651[2];
  char v1652;
  void *v1653;
  char v1654;
  __int16 v1655;
  char v1656;
  void *v1657[2];
  char v1658;
  void *v1659[2];
  char v1660;
  void *v1661;
  char v1662;
  __int16 v1663;
  char v1664;
  void *v1665[2];
  char v1666;
  void *v1667[2];
  char v1668;
  void *v1669;
  char v1670;
  __int16 v1671;
  char v1672;
  void *v1673[2];
  char v1674;
  void *v1675[2];
  char v1676;
  void *v1677;
  char v1678;
  __int16 v1679;
  char v1680;
  void *v1681[2];
  char v1682;
  void *v1683[2];
  char v1684;
  void *v1685;
  char v1686;
  __int16 v1687;
  char v1688;
  void *v1689[2];
  char v1690;
  void *v1691[2];
  char v1692;
  void *v1693;
  char v1694;
  __int16 v1695;
  char v1696;
  void *v1697[2];
  char v1698;
  void *v1699[2];
  char v1700;
  void *v1701;
  char v1702;
  __int16 v1703;
  char v1704;
  void *v1705[2];
  char v1706;
  void *v1707[2];
  char v1708;
  void *v1709;
  char v1710;
  __int16 v1711;
  char v1712;
  void *v1713[2];
  char v1714;
  void *v1715[2];
  char v1716;
  void *v1717;
  char v1718;
  __int16 v1719;
  char v1720;
  void *v1721[2];
  char v1722;
  void *v1723[2];
  char v1724;
  void *v1725;
  char v1726;
  __int16 v1727;
  char v1728;
  void *v1729[2];
  char v1730;
  void *v1731[2];
  char v1732;
  void *v1733;
  char v1734;
  __int16 v1735;
  char v1736;
  void *v1737[2];
  char v1738;
  void *v1739[2];
  char v1740;
  void *v1741;
  char v1742;
  __int16 v1743;
  char v1744;
  void *v1745[2];
  char v1746;
  void *v1747[2];
  char v1748;
  void *v1749;
  char v1750;
  __int16 v1751;
  char v1752;
  void *v1753[2];
  char v1754;
  void *v1755[2];
  char v1756;
  void *v1757;
  char v1758;
  __int16 v1759;
  char v1760;
  void *v1761[2];
  char v1762;
  void *v1763[2];
  char v1764;
  void *v1765;
  char v1766;
  __int16 v1767;
  char v1768;
  void *v1769[2];
  char v1770;
  void *v1771[2];
  char v1772;
  void *v1773;
  char v1774;
  __int16 v1775;
  char v1776;
  void *v1777[2];
  char v1778;
  void *v1779[2];
  char v1780;
  void *v1781;
  char v1782;
  __int16 v1783;
  char v1784;
  void *v1785[2];
  char v1786;
  void *v1787[2];
  char v1788;
  void *v1789;
  char v1790;
  __int16 v1791;
  char v1792;
  void *v1793[2];
  char v1794;
  void *v1795[2];
  char v1796;
  void *v1797;
  char v1798;
  __int16 v1799;
  char v1800;
  void *v1801[2];
  char v1802;
  void *v1803[2];
  char v1804;
  void *v1805;
  char v1806;
  __int16 v1807;
  char v1808;
  void *v1809[2];
  char v1810;
  void *v1811[2];
  char v1812;
  void *v1813;
  char v1814;
  __int16 v1815;
  char v1816;
  void *v1817[2];
  char v1818;
  void *v1819[2];
  char v1820;
  void *v1821;
  char v1822;
  __int16 v1823;
  char v1824;
  void *v1825[2];
  char v1826;
  void *v1827[2];
  char v1828;
  void *v1829;
  char v1830;
  __int16 v1831;
  char v1832;
  void *v1833[2];
  char v1834;
  void *v1835[2];
  char v1836;
  void *v1837;
  char v1838;
  __int16 v1839;
  char v1840;
  void *v1841[2];
  char v1842;
  void *v1843[2];
  char v1844;
  void *v1845;
  char v1846;
  __int16 v1847;
  char v1848;
  void *v1849[2];
  char v1850;
  void *v1851[2];
  char v1852;
  void *v1853;
  char v1854;
  __int16 v1855;
  char v1856;
  void *v1857[2];
  char v1858;
  void *v1859[2];
  char v1860;
  void *v1861;
  char v1862;
  __int16 v1863;
  char v1864;
  void *v1865[2];
  char v1866;
  void *v1867[2];
  char v1868;
  void *v1869;
  char v1870;
  __int16 v1871;
  char v1872;
  void *v1873[2];
  char v1874;
  void *v1875[2];
  char v1876;
  void *v1877;
  char v1878;
  __int16 v1879;
  char v1880;
  void *v1881[2];
  char v1882;
  void *v1883[2];
  char v1884;
  void *v1885;
  char v1886;
  __int16 v1887;
  char v1888;
  void *v1889[2];
  char v1890;
  void *v1891[2];
  char v1892;
  void *v1893;
  char v1894;
  __int16 v1895;
  char v1896;
  void *v1897[2];
  char v1898;
  void *v1899[2];
  char v1900;
  void *v1901;
  char v1902;
  __int16 v1903;
  char v1904;
  void *v1905[2];
  char v1906;
  void *v1907[2];
  char v1908;
  void *v1909;
  char v1910;
  __int16 v1911;
  char v1912;
  void *v1913[2];
  char v1914;
  void *v1915[2];
  char v1916;
  void *v1917;
  char v1918;
  __int16 v1919;
  char v1920;
  void *v1921[2];
  char v1922;
  void *v1923[2];
  char v1924;
  void *v1925;
  char v1926;
  __int16 v1927;
  char v1928;
  void *v1929[2];
  char v1930;
  void *v1931[2];
  char v1932;
  void *v1933;
  char v1934;
  __int16 v1935;
  char v1936;
  void *v1937[2];
  char v1938;
  void *v1939[2];
  char v1940;
  void *v1941;
  char v1942;
  __int16 v1943;
  char v1944;
  void *v1945[2];
  char v1946;
  unsigned __int8 v1947[80];
  char v1948[80];
  char v1949[80];
  char v1950[80];
  char v1951[80];
  char v1952[80];
  char v1953[80];
  char v1954[80];
  char v1955[80];
  char v1956[80];
  char v1957[80];
  char v1958[80];
  char v1959[80];
  char v1960[80];
  char v1961[80];
  char v1962[80];
  char v1963[80];
  char v1964[80];
  char v1965[80];
  char v1966[80];
  char v1967[80];
  char v1968[80];
  char v1969[80];
  char v1970[80];
  char v1971[80];
  char v1972[80];
  char v1973[80];
  char v1974[80];
  char v1975[80];
  char v1976[80];
  char v1977[80];
  char v1978[80];
  char v1979[80];
  char v1980[80];
  char v1981[80];
  char v1982[80];
  char v1983[80];
  char v1984[80];
  char v1985[80];
  char v1986[80];
  char v1987[80];
  char v1988[80];
  char v1989[80];
  char v1990[80];
  char v1991[80];
  char v1992[80];
  char v1993[80];
  char v1994[80];
  char v1995[80];
  char v1996[80];
  char v1997[80];
  char v1998[80];
  char v1999[80];
  char v2000[80];
  char v2001[80];
  char v2002[80];
  char v2003[80];
  char v2004[80];
  char v2005[80];
  char v2006[80];
  char v2007[80];
  char v2008[80];
  char v2009[80];
  char v2010[80];
  char v2011[80];
  char v2012[80];
  char v2013[80];
  char v2014[80];
  char v2015[80];
  char v2016[80];
  char v2017[80];
  char v2018[80];
  char v2019[80];
  char v2020[80];
  char v2021[80];
  char v2022[80];
  char v2023[80];
  char v2024[80];
  char v2025[80];
  char v2026[80];
  char v2027[80];
  char v2028[80];
  char v2029[80];
  char v2030[80];
  char v2031[80];
  char v2032[80];
  char v2033[80];
  char v2034[80];
  char v2035[80];
  char v2036[80];
  char v2037[80];
  char v2038[80];
  char v2039[80];
  char v2040[80];
  char v2041[80];
  char v2042[80];
  char v2043[80];
  char v2044[80];
  char v2045[80];
  char v2046[80];
  char v2047[80];
  char v2048[80];
  char v2049[80];
  char v2050[80];
  char v2051[80];
  char v2052[80];
  char v2053[80];
  char v2054[80];
  char v2055[80];
  char v2056[80];
  char v2057[80];
  char v2058[80];
  char v2059[80];
  char v2060[80];
  char v2061[80];
  char v2062[80];
  char v2063[80];
  char v2064[80];
  char v2065[80];
  char v2066[80];
  char v2067[80];
  char v2068[80];
  char v2069[80];
  char v2070[80];
  char v2071[80];
  char v2072[80];
  char v2073[80];
  char v2074[80];
  char v2075[80];
  char v2076[80];
  char v2077[80];
  char v2078[80];
  char v2079[80];
  char v2080[80];
  char v2081[80];
  char v2082[80];
  char v2083[80];
  char v2084[80];
  char v2085[80];
  char v2086[80];
  char v2087[80];
  char v2088[80];
  char v2089[80];
  char v2090[80];
  char v2091[80];
  char v2092[80];
  char v2093[80];
  char v2094[80];
  char v2095[80];
  char v2096[80];
  char v2097[80];
  char v2098[80];
  char v2099[80];
  char v2100[80];
  char v2101[80];
  char v2102[80];
  char v2103[80];
  char v2104[80];
  char v2105[80];
  char v2106[80];
  char v2107[80];
  char v2108[80];
  char v2109[80];
  char v2110[80];
  char v2111[80];
  char v2112[80];
  char v2113[80];
  char v2114[80];
  char v2115[80];
  char v2116[80];
  char v2117[80];
  char v2118[80];
  char v2119[80];
  char v2120[80];
  char v2121[80];
  char v2122[80];
  char v2123[80];
  char v2124[80];
  char v2125[80];
  char v2126[80];
  char v2127[80];
  char v2128[80];
  char v2129[80];
  char v2130[80];
  char v2131[80];
  char v2132[80];
  char v2133[80];
  char v2134[80];
  char v2135[80];
  char v2136[80];
  char v2137[80];
  char v2138[80];
  char v2139[80];
  char v2140[80];
  char v2141[80];
  char v2142[80];
  char v2143[80];
  char v2144[80];
  char v2145[80];
  char v2146[80];
  char v2147[80];
  char v2148[80];
  char v2149[80];
  char v2150[80];
  char v2151[80];
  char v2152[80];
  char v2153[80];
  char v2154[80];
  char v2155[80];
  char v2156[80];
  char v2157[80];
  char v2158[80];
  char v2159[80];
  char v2160[80];
  char v2161[80];
  char v2162[80];
  char v2163[80];
  char v2164[80];
  char v2165[80];
  char v2166[80];
  char v2167[80];
  char v2168[80];
  char v2169[80];
  char v2170[80];
  char v2171[80];
  char v2172[80];
  char v2173[80];
  char v2174[80];
  char v2175[80];
  char v2176[80];
  char v2177[80];
  char v2178[80];
  char v2179[80];
  char v2180[80];
  char v2181[80];
  char v2182[80];
  char v2183[80];
  char v2184[80];
  char v2185[80];
  char v2186[80];
  char v2187[80];
  char v2188[80];
  char v2189[80];

  sub_10000BF04(v1945, "US");
  sub_10000BF04(v1939, "United States");
  sub_10000BF04(&v1941, "US");
  v1943 = 257;
  v1944 = 0;
  sub_10036ED78((char *)v1947, (__int128 *)v1945, (__int128 *)v1939);
  sub_10000BF04(v1937, "CA");
  sub_10000BF04(v1931, "Canada");
  sub_10000BF04(&v1933, "CA");
  v1935 = 257;
  v1936 = 0;
  sub_10036ED78(v1948, (__int128 *)v1937, (__int128 *)v1931);
  sub_10000BF04(v1929, "MX");
  sub_10000BF04(v1923, "Mexico");
  sub_10000BF04(&v1925, "MX");
  v1927 = 257;
  v1928 = 0;
  sub_10036ED78(v1949, (__int128 *)v1929, (__int128 *)v1923);
  sub_10000BF04(v1921, "SV");
  sub_10000BF04(v1915, "El Salvador");
  sub_10000BF04(&v1917, "SV");
  v1919 = 257;
  v1920 = 0;
  sub_10036ED78(v1950, (__int128 *)v1921, (__int128 *)v1915);
  sub_10000BF04(v1913, "CO");
  sub_10000BF04(v1907, "Colombia");
  sub_10000BF04(&v1909, "CO");
  v1911 = 257;
  v1912 = 0;
  sub_10036ED78(v1951, (__int128 *)v1913, (__int128 *)v1907);
  sub_10000BF04(v1905, "PR");
  sub_10000BF04(v1899, "Puerto Rico");
  sub_10000BF04(&v1901, "PR");
  v1903 = 257;
  v1904 = 0;
  sub_10036ED78(v1952, (__int128 *)v1905, (__int128 *)v1899);
  sub_10000BF04(v1897, "CR");
  sub_10000BF04(v1891, "Costa Rica");
  sub_10000BF04(&v1893, "CR");
  v1895 = 257;
  v1896 = 0;
  sub_10036ED78(v1953, (__int128 *)v1897, (__int128 *)v1891);
  sub_10000BF04(v1889, "EC");
  sub_10000BF04(v1883, "Ecuador");
  sub_10000BF04(&v1885, "EC");
  v1887 = 257;
  v1888 = 0;
  sub_10036ED78(v1954, (__int128 *)v1889, (__int128 *)v1883);
  sub_10000BF04(v1881, "AR");
  sub_10000BF04(v1875, "Argentina");
  sub_10000BF04(&v1877, "AR");
  v1879 = 257;
  v1880 = 7;
  sub_10036ED78(v1955, (__int128 *)v1881, (__int128 *)v1875);
  sub_10000BF04(v1873, "VI");
  sub_10000BF04(v1867, "US Virgin Islands");
  sub_10000BF04(&v1869, "VI");
  v1871 = 257;
  v1872 = 0;
  sub_10036ED78(v1956, (__int128 *)v1873, (__int128 *)v1867);
  sub_10000BF04(v1865, "GT");
  sub_10000BF04(v1859, "Guatemala");
  sub_10000BF04(&v1861, "GT");
  v1863 = 257;
  v1864 = 0;
  sub_10036ED78(v1957, (__int128 *)v1865, (__int128 *)v1859);
  sub_10000BF04(v1857, "BR");
  sub_10000BF04(v1851, "Brazil");
  sub_10000BF04(&v1853, "BR");
  v1855 = 257;
  v1856 = 0;
  sub_10036ED78(v1958, (__int128 *)v1857, (__int128 *)v1851);
  sub_10000BF04(v1849, "UM");
  sub_10000BF04(v1843, "United States Minor Outlying Islands");
  sub_10000BF04(&v1845, "UM");
  v1847 = 257;
  v1848 = 0;
  sub_10036ED78(v1959, (__int128 *)v1849, (__int128 *)v1843);
  sub_10000BF04(v1841, "JP");
  sub_10000BF04(v1835, "Japan");
  sub_10000BF04(&v1837, "JP");
  v1839 = 256;
  v1840 = 4;
  sub_10036ED78(v1960, (__int128 *)v1841, (__int128 *)v1835);
  sub_10000BF04(v1833, "AT");
  sub_10000BF04(v1827, "Austria");
  sub_10000BF04(&v1829, "AT");
  v1831 = 257;
  v1832 = 1;
  sub_10036ED78(v1961, (__int128 *)v1833, (__int128 *)v1827);
  sub_10000BF04(v1825, "BE");
  sub_10000BF04(v1819, "Belgium");
  sub_10000BF04(&v1821, "BE");
  v1823 = 257;
  v1824 = 1;
  sub_10036ED78(v1962, (__int128 *)v1825, (__int128 *)v1819);
  sub_10000BF04(v1817, "BG");
  sub_10000BF04(v1811, "Bulgaria");
  sub_10000BF04(&v1813, "BG");
  v1815 = 257;
  v1816 = 1;
  sub_10036ED78(v1963, (__int128 *)v1817, (__int128 *)v1811);
  sub_10000BF04(v1809, "CY");
  sub_10000BF04(v1803, "Cyprus");
  sub_10000BF04(&v1805, "CY");
  v1807 = 257;
  v1808 = 1;
  sub_10036ED78(v1964, (__int128 *)v1809, (__int128 *)v1803);
  sub_10000BF04(v1801, "CZ");
  sub_10000BF04(v1795, "Czech Republic");
  sub_10000BF04(&v1797, "CZ");
  v1799 = 257;
  v1800 = 1;
  sub_10036ED78(v1965, (__int128 *)v1801, (__int128 *)v1795);
  sub_10000BF04(v1793, "DK");
  sub_10000BF04(v1787, "Denmark");
  sub_10000BF04(&v1789, "DK");
  v1791 = 257;
  v1792 = 1;
  sub_10036ED78(v1966, (__int128 *)v1793, (__int128 *)v1787);
  sub_10000BF04(v1785, "EE");
  sub_10000BF04(v1779, "Estonia");
  sub_10000BF04(&v1781, "EE");
  v1783 = 257;
  v1784 = 1;
  sub_10036ED78(v1967, (__int128 *)v1785, (__int128 *)v1779);
  sub_10000BF04(v1777, "FR");
  sub_10000BF04(v1771, "France");
  sub_10000BF04(&v1773, "FR");
  v1775 = 257;
  v1776 = 1;
  sub_10036ED78(v1968, (__int128 *)v1777, (__int128 *)v1771);
  sub_10000BF04(v1769, "FI");
  sub_10000BF04(v1763, "Finland");
  sub_10000BF04(&v1765, "FI");
  v1767 = 257;
  v1768 = 1;
  sub_10036ED78(v1969, (__int128 *)v1769, (__int128 *)v1763);
  sub_10000BF04(v1761, "DE");
  sub_10000BF04(v1755, "Germany");
  sub_10000BF04(&v1757, "DE");
  v1759 = 257;
  v1760 = 1;
  sub_10036ED78(v1970, (__int128 *)v1761, (__int128 *)v1755);
  sub_10000BF04(v1753, "GR");
  sub_10000BF04(v1747, "Greece");
  sub_10000BF04(&v1749, "GR");
  v1751 = 257;
  v1752 = 1;
  sub_10036ED78(v1971, (__int128 *)v1753, (__int128 *)v1747);
  sub_10000BF04(v1745, "HU");
  sub_10000BF04(v1739, "Hungary");
  sub_10000BF04(&v1741, "HU");
  v1743 = 257;
  v1744 = 1;
  sub_10036ED78(v1972, (__int128 *)v1745, (__int128 *)v1739);
  sub_10000BF04(v1737, "IS");
  sub_10000BF04(v1731, "Iceland");
  sub_10000BF04(&v1733, "IS");
  v1735 = 257;
  v1736 = 1;
  sub_10036ED78(v1973, (__int128 *)v1737, (__int128 *)v1731);
  sub_10000BF04(v1729, "IT");
  sub_10000BF04(v1723, "Italy");
  sub_10000BF04(&v1725, "IT");
  v1727 = 257;
  v1728 = 1;
  sub_10036ED78(v1974, (__int128 *)v1729, (__int128 *)v1723);
  sub_10000BF04(v1721, "IE");
  sub_10000BF04(v1715, "Ireland");
  sub_10000BF04(&v1717, "IE");
  v1719 = 257;
  v1720 = 1;
  sub_10036ED78(v1975, (__int128 *)v1721, (__int128 *)v1715);
  sub_10000BF04(v1713, "LV");
  sub_10000BF04(v1707, "Latvia");
  sub_10000BF04(&v1709, "LV");
  v1711 = 257;
  v1712 = 1;
  sub_10036ED78(v1976, (__int128 *)v1713, (__int128 *)v1707);
  sub_10000BF04(v1705, "LI");
  sub_10000BF04(v1699, "Liechtenstein");
  sub_10000BF04(&v1701, "LI");
  v1703 = 257;
  v1704 = 1;
  sub_10036ED78(v1977, (__int128 *)v1705, (__int128 *)v1699);
  sub_10000BF04(v1697, "LT");
  sub_10000BF04(v1691, "Lithuania");
  sub_10000BF04(&v1693, "LT");
  v1695 = 257;
  v1696 = 1;
  sub_10036ED78(v1978, (__int128 *)v1697, (__int128 *)v1691);
  sub_10000BF04(v1689, "LU");
  sub_10000BF04(v1683, "Luxembourg");
  sub_10000BF04(&v1685, "LU");
  v1687 = 257;
  v1688 = 1;
  sub_10036ED78(v1979, (__int128 *)v1689, (__int128 *)v1683);
  sub_10000BF04(v1681, "MT");
  sub_10000BF04(v1675, "Malta");
  sub_10000BF04(&v1677, "MT");
  v1679 = 257;
  v1680 = 1;
  sub_10036ED78(v1980, (__int128 *)v1681, (__int128 *)v1675);
  sub_10000BF04(v1673, "NL");
  sub_10000BF04(v1667, "Netherlands");
  sub_10000BF04(&v1669, "NL");
  v1671 = 257;
  v1672 = 1;
  sub_10036ED78(v1981, (__int128 *)v1673, (__int128 *)v1667);
  sub_10000BF04(v1665, "NO");
  sub_10000BF04(v1659, "Norway");
  sub_10000BF04(&v1661, "NO");
  v1663 = 257;
  v1664 = 1;
  sub_10036ED78(v1982, (__int128 *)v1665, (__int128 *)v1659);
  sub_10000BF04(v1657, "PL");
  sub_10000BF04(v1651, "Poland");
  sub_10000BF04(&v1653, "PL");
  v1655 = 257;
  v1656 = 1;
  sub_10036ED78(v1983, (__int128 *)v1657, (__int128 *)v1651);
  sub_10000BF04(v1649, "PT");
  sub_10000BF04(v1643, "Portugal");
  sub_10000BF04(&v1645, "PT");
  v1647 = 257;
  v1648 = 1;
  sub_10036ED78(v1984, (__int128 *)v1649, (__int128 *)v1643);
  sub_10000BF04(v1641, "RO");
  sub_10000BF04(v1635, "Romania");
  sub_10000BF04(&v1637, "RO");
  v1639 = 257;
  v1640 = 1;
  sub_10036ED78(v1985, (__int128 *)v1641, (__int128 *)v1635);
  sub_10000BF04(v1633, "SK");
  sub_10000BF04(v1627, "Slovak Republic");
  sub_10000BF04(&v1629, "SK");
  v1631 = 257;
  v1632 = 1;
  sub_10036ED78(v1986, (__int128 *)v1633, (__int128 *)v1627);
  sub_10000BF04(v1625, "SI");
  sub_10000BF04(v1619, "Slovenia");
  sub_10000BF04(&v1621, "SI");
  v1623 = 257;
  v1624 = 1;
  sub_10036ED78(v1987, (__int128 *)v1625, (__int128 *)v1619);
  sub_10000BF04(v1617, "ES");
  sub_10000BF04(v1611, "Spain");
  sub_10000BF04(&v1613, "ES");
  v1615 = 257;
  v1616 = 1;
  sub_10036ED78(v1988, (__int128 *)v1617, (__int128 *)v1611);
  sub_10000BF04(v1609, "SE");
  sub_10000BF04(v1603, "Sweden");
  sub_10000BF04(&v1605, "SE");
  v1607 = 257;
  v1608 = 1;
  sub_10036ED78(v1989, (__int128 *)v1609, (__int128 *)v1603);
  sub_10000BF04(v1601, "CH");
  sub_10000BF04(v1595, "Switzerland");
  sub_10000BF04(&v1597, "CH");
  v1599 = 257;
  v1600 = 1;
  sub_10036ED78(v1990, (__int128 *)v1601, (__int128 *)v1595);
  sub_10000BF04(v1593, "GB");
  sub_10000BF04(v1587, "United Kingdom");
  sub_10000BF04(&v1589, "GB");
  v1591 = 257;
  v1592 = 1;
  sub_10036ED78(v1991, (__int128 *)v1593, (__int128 *)v1587);
  sub_10000BF04(v1585, "ZA");
  sub_10000BF04(v1579, "South Africa");
  sub_10000BF04(&v1581, "ZA");
  v1583 = 257;
  v1584 = 1;
  sub_10036ED78(v1992, (__int128 *)v1585, (__int128 *)v1579);
  sub_10000BF04(v1577, "TR");
  sub_10000BF04(v1571, "Turkey");
  sub_10000BF04(&v1573, "TR");
  v1575 = 257;
  v1576 = 1;
  sub_10036ED78(v1993, (__int128 *)v1577, (__int128 *)v1571);
  sub_10000BF04(v1569, "AE");
  sub_10000BF04(v1563, "United Arab Emirates");
  sub_10000BF04(&v1565, "AE");
  v1567 = 257;
  v1568 = 1;
  sub_10036ED78(v1994, (__int128 *)v1569, (__int128 *)v1563);
  sub_10000BF04(v1561, "SA");
  sub_10000BF04(v1555, "Saudi Arabia");
  sub_10000BF04(&v1557, "SA");
  v1559 = 257;
  v1560 = 1;
  sub_10036ED78(v1995, (__int128 *)v1561, (__int128 *)v1555);
  sub_10000BF04(v1553, "HR");
  sub_10000BF04(v1547, "Croatia");
  sub_10000BF04(&v1549, "HR");
  v1551 = 257;
  v1552 = 1;
  sub_10036ED78(v1996, (__int128 *)v1553, (__int128 *)v1547);
  sub_10000BF04(v1545, "RS");
  sub_10000BF04(v1539, "Serbia");
  sub_10000BF04(&v1541, "RS");
  v1543 = 257;
  v1544 = 1;
  sub_10036ED78(v1997, (__int128 *)v1545, (__int128 *)v1539);
  sub_10000BF04(v1537, "AU");
  sub_10000BF04(v1531, "Australia");
  sub_10000BF04(&v1533, "AU");
  v1535 = 257;
  v1536 = 1;
  sub_10036ED78(v1998, (__int128 *)v1537, (__int128 *)v1531);
  sub_10000BF04(v1529, "HK");
  sub_10000BF04(v1523, "Hong Kong");
  sub_10000BF04(&v1525, "HK");
  v1527 = 257;
  v1528 = 1;
  sub_10036ED78(v1999, (__int128 *)v1529, (__int128 *)v1523);
  sub_10000BF04(v1521, "NZ");
  sub_10000BF04(v1515, "New Zealand");
  sub_10000BF04(&v1517, "NZ");
  v1519 = 257;
  v1520 = 1;
  sub_10036ED78(v2000, (__int128 *)v1521, (__int128 *)v1515);
  sub_10000BF04(v1513, "SG");
  sub_10000BF04(v1507, "Singapore");
  sub_10000BF04(&v1509, "SG");
  v1511 = 257;
  v1512 = 1;
  sub_10036ED78(v2001, (__int128 *)v1513, (__int128 *)v1507);
  sub_10000BF04(v1505, "MY");
  sub_10000BF04(v1499, "Malaysia");
  sub_10000BF04(&v1501, "MY");
  v1503 = 257;
  v1504 = 1;
  sub_10036ED78(v2002, (__int128 *)v1505, (__int128 *)v1499);
  sub_10000BF04(v1497, "VN");
  sub_10000BF04(v1491, "Vietnam");
  sub_10000BF04(&v1493, "VN");
  v1495 = 256;
  v1496 = 1;
  sub_10036ED78(v2003, (__int128 *)v1497, (__int128 *)v1491);
  sub_10000BF04(v1489, "BN");
  sub_10000BF04(v1483, "Brunei");
  sub_10000BF04(&v1485, "BN");
  v1487 = 257;
  v1488 = 1;
  sub_10036ED78(v2004, (__int128 *)v1489, (__int128 *)v1483);
  sub_10000BF04(v1481, "TH");
  sub_10000BF04(v1475, "Thailand");
  sub_10000BF04(&v1477, "TH");
  v1479 = 257;
  v1480 = 1;
  sub_10036ED78(v2005, (__int128 *)v1481, (__int128 *)v1475);
  sub_10000BF04(v1473, "KH");
  sub_10000BF04(v1467, "Cambodia");
  sub_10000BF04(&v1469, "KH");
  v1471 = 257;
  v1472 = 1;
  sub_10036ED78(v2006, (__int128 *)v1473, (__int128 *)v1467);
  sub_10000BF04(v1465, "LA");
  sub_10000BF04(v1459, "Laos");
  sub_10000BF04(&v1461, "LA");
  v1463 = 257;
  v1464 = 1;
  sub_10036ED78(v2007, (__int128 *)v1465, (__int128 *)v1459);
  sub_10000BF04(v1457, "MM");
  sub_10000BF04(v1451, "Myanmar");
  sub_10000BF04(&v1453, "MM");
  v1455 = 257;
  v1456 = 1;
  sub_10036ED78(v2008, (__int128 *)v1457, (__int128 *)v1451);
  sub_10000BF04(v1449, "CN");
  sub_10000BF04(v1443, "China");
  sub_10000BF04(&v1445, "CN");
  v1447 = 257;
  v1448 = 3;
  sub_10036ED78(v2009, (__int128 *)v1449, (__int128 *)v1443);
  sub_10000BF04(v1441, "TW");
  sub_10000BF04(v1435, "Taiwan");
  sub_10000BF04(&v1437, "TW");
  v1439 = 257;
  v1440 = 2;
  sub_10036ED78(v2010, (__int128 *)v1441, (__int128 *)v1435);
  sub_10000BF04(v1433, "PK");
  sub_10000BF04(v1427, "Pakistan");
  sub_10000BF04(&v1429, "PK");
  v1431 = 257;
  v1432 = 1;
  sub_10036ED78(v2011, (__int128 *)v1433, (__int128 *)v1427);
  sub_10000BF04(v1425, "NP");
  sub_10000BF04(v1419, "Nepal");
  sub_10000BF04(&v1421, "NP");
  v1423 = 0;
  v1424 = 1;
  sub_10036ED78(v2012, (__int128 *)v1425, (__int128 *)v1419);
  sub_10000BF04(v1417, "BD");
  sub_10000BF04(v1411, "Bangladesh");
  sub_10000BF04(&v1413, "BD");
  v1415 = 257;
  v1416 = 1;
  sub_10036ED78(v2013, (__int128 *)v1417, (__int128 *)v1411);
  sub_10000BF04(v1409, "KR");
  sub_10000BF04(v1403, "South Korea");
  sub_10000BF04(&v1405, "KR");
  v1407 = 256;
  v1408 = 5;
  sub_10036ED78(v2014, (__int128 *)v1409, (__int128 *)v1403);
  sub_10000BF04(v1401, "CL");
  sub_10000BF04(v1395, "Chile");
  sub_10000BF04(&v1397, "CL");
  v1399 = 257;
  v1400 = 0;
  sub_10036ED78(v2015, (__int128 *)v1401, (__int128 *)v1395);
  sub_10000BF04(v1393, "PA");
  sub_10000BF04(v1387, "Panama");
  sub_10000BF04(&v1389, "PA");
  v1391 = 257;
  v1392 = 0;
  sub_10036ED78(v2016, (__int128 *)v1393, (__int128 *)v1387);
  sub_10000BF04(v1385, "VE");
  sub_10000BF04(v1379, "Venezuela");
  sub_10000BF04(&v1381, "VE");
  v1383 = 257;
  v1384 = 0;
  sub_10036ED78(v2017, (__int128 *)v1385, (__int128 *)v1379);
  sub_10000BF04(v1377, "UY");
  sub_10000BF04(v1371, "Uruguay");
  sub_10000BF04(&v1373, "UY");
  v1375 = 257;
  v1376 = 0;
  sub_10036ED78(v2018, (__int128 *)v1377, (__int128 *)v1371);
  sub_10000BF04(v1369, "LK");
  sub_10000BF04(v1363, "Sri Lanka");
  sub_10000BF04(&v1365, "LK");
  v1367 = 257;
  v1368 = 1;
  sub_10036ED78(v2019, (__int128 *)v1369, (__int128 *)v1363);
  sub_10000BF04(v1361, "MV");
  sub_10000BF04(v1355, "Maldives");
  sub_10000BF04(&v1357, "MV");
  v1359 = 257;
  v1360 = 1;
  sub_10036ED78(v2020, (__int128 *)v1361, (__int128 *)v1355);
  sub_10000BF04(v1353, "AF");
  sub_10000BF04(v1347, "Afghanistan");
  sub_10000BF04(&v1349, "AF");
  v1351 = 257;
  v1352 = 1;
  sub_10036ED78(v2021, (__int128 *)v1353, (__int128 *)v1347);
  sub_10000BF04(v1345, "MN");
  sub_10000BF04(v1339, "Mongolia");
  sub_10000BF04(&v1341, "MN");
  v1343 = 257;
  v1344 = 1;
  sub_10036ED78(v2022, (__int128 *)v1345, (__int128 *)v1339);
  sub_10000BF04(v1337, "BT");
  sub_10000BF04(v1331, "Bhutan");
  sub_10000BF04(&v1333, "BT");
  v1335 = 257;
  v1336 = 1;
  sub_10036ED78(v2023, (__int128 *)v1337, (__int128 *)v1331);
  sub_10000BF04(v1329, "MO");
  sub_10000BF04(v1323, "Macau");
  sub_10000BF04(&v1325, "MO");
  v1327 = 257;
  v1328 = 1;
  sub_10036ED78(v2024, (__int128 *)v1329, (__int128 *)v1323);
  sub_10000BF04(v1321, "IN");
  sub_10000BF04(v1315, "India");
  sub_10000BF04(&v1317, "IN");
  v1319 = 257;
  v1320 = 1;
  sub_10036ED78(v2025, (__int128 *)v1321, (__int128 *)v1315);
  sub_10000BF04(v1313, "PH");
  sub_10000BF04(v1307, "Philippines");
  sub_10000BF04(&v1309, "PH");
  v1311 = 257;
  v1312 = 1;
  sub_10036ED78(v2026, (__int128 *)v1313, (__int128 *)v1307);
  sub_10000BF04(v1305, "PE");
  sub_10000BF04(v1299, "Peru");
  sub_10000BF04(&v1301, "PE");
  v1303 = 257;
  v1304 = 0;
  sub_10036ED78(v2027, (__int128 *)v1305, (__int128 *)v1299);
  sub_10000BF04(v1297, "DO");
  sub_10000BF04(v1291, "Dominican Republic");
  sub_10000BF04(&v1293, "DO");
  v1295 = 257;
  v1296 = 0;
  sub_10036ED78(v2028, (__int128 *)v1297, (__int128 *)v1291);
  sub_10000BF04(v1289, "GU");
  sub_10000BF04(v1283, "Guam");
  sub_10000BF04(&v1285, "GU");
  v1287 = 257;
  v1288 = 0;
  sub_10036ED78(v2029, (__int128 *)v1289, (__int128 *)v1283);
  sub_10000BF04(v1281, "FJ");
  sub_10000BF04(v1275, "Fiji");
  sub_10000BF04(&v1277, "FJ");
  v1279 = 257;
  v1280 = 1;
  sub_10036ED78(v2030, (__int128 *)v1281, (__int128 *)v1275);
  sub_10000BF04(v1273, "NC");
  sub_10000BF04(v1267, "New Caledonia");
  sub_10000BF04(&v1269, "NC");
  v1271 = 257;
  v1272 = 1;
  sub_10036ED78(v2031, (__int128 *)v1273, (__int128 *)v1267);
  sub_10000BF04(v1265, "PG");
  sub_10000BF04(v1259, "Papua New Guinea");
  sub_10000BF04(&v1261, "PG");
  v1263 = 257;
  v1264 = 1;
  sub_10036ED78(v2032, (__int128 *)v1265, (__int128 *)v1259);
  sub_10000BF04(v1257, "WS");
  sub_10000BF04(v1251, "Samoa");
  sub_10000BF04(&v1253, "WS");
  v1255 = 257;
  v1256 = 1;
  sub_10036ED78(v2033, (__int128 *)v1257, (__int128 *)v1251);
  sub_10000BF04(v1249, "VU");
  sub_10000BF04(v1243, "Vanuatu");
  sub_10000BF04(&v1245, "VU");
  v1247 = 257;
  v1248 = 1;
  sub_10036ED78(v2034, (__int128 *)v1249, (__int128 *)v1243);
  sub_10000BF04(v1241, "RU");
  sub_10000BF04(v1235, "Russia");
  sub_10000BF04(&v1237, "RU");
  v1239 = 0;
  v1240 = 6;
  sub_10036ED78(v2035, (__int128 *)v1241, (__int128 *)v1235);
  sub_10000BF04(v1233, "IL");
  sub_10000BF04(v1227, "Israel");
  sub_10000BF04(&v1229, "IL");
  v1231 = 257;
  v1232 = 1;
  sub_10036ED78(v2036, (__int128 *)v1233, (__int128 *)v1227);
  sub_10000BF04(v1225, "EG");
  sub_10000BF04(v1219, "Egypt");
  sub_10000BF04(&v1221, "EG");
  v1223 = 257;
  v1224 = 1;
  sub_10036ED78(v2037, (__int128 *)v1225, (__int128 *)v1219);
  sub_10000BF04(v1217, "KW");
  sub_10000BF04(v1211, "Kuwait");
  sub_10000BF04(&v1213, "KW");
  v1215 = 257;
  v1216 = 1;
  sub_10036ED78(v2038, (__int128 *)v1217, (__int128 *)v1211);
  sub_10000BF04(v1209, "MA");
  sub_10000BF04(v1203, "Morocco");
  sub_10000BF04(&v1205, "MA");
  v1207 = 257;
  v1208 = 1;
  sub_10036ED78(v2039, (__int128 *)v1209, (__int128 *)v1203);
  sub_10000BF04(v1201, "UA");
  sub_10000BF04(v1195, "Ukraine");
  sub_10000BF04(&v1197, "UA");
  v1199 = 0;
  v1200 = 6;
  sub_10036ED78(v2040, (__int128 *)v1201, (__int128 *)v1195);
  sub_10000BF04(v1193, "BY");
  sub_10000BF04(v1187, "Belarus");
  sub_10000BF04(&v1189, "BY");
  v1191 = 0;
  v1192 = 6;
  sub_10036ED78(v2041, (__int128 *)v1193, (__int128 *)v1187);
  sub_10000BF04(v1185, "AZ");
  sub_10000BF04(v1179, "Azerbaijan");
  sub_10000BF04(&v1181, "AZ");
  v1183 = 0;
  v1184 = 6;
  sub_10036ED78(v2042, (__int128 *)v1185, (__int128 *)v1179);
  sub_10000BF04(v1177, "KZ");
  sub_10000BF04(v1171, "Kazakhstan");
  sub_10000BF04(&v1173, "KZ");
  v1175 = 0;
  v1176 = 6;
  sub_10036ED78(v2043, (__int128 *)v1177, (__int128 *)v1171);
  sub_10000BF04(v1169, "ID");
  sub_10000BF04(v1163, "Indonesia");
  sub_10000BF04(&v1165, "ID");
  v1167 = 0;
  v1168 = 1;
  sub_10036ED78(v2044, (__int128 *)v1169, (__int128 *)v1163);
  sub_10000BF04(v1161, "HN");
  sub_10000BF04(v1155, "Honduras");
  sub_10000BF04(&v1157, "HN");
  v1159 = 257;
  v1160 = 0;
  sub_10036ED78(v2045, (__int128 *)v1161, (__int128 *)v1155);
  sub_10000BF04(v1153, "AI");
  sub_10000BF04(v1147, "Anguilla");
  sub_10000BF04(&v1149, "AI");
  v1151 = 257;
  v1152 = 0;
  sub_10036ED78(v2046, (__int128 *)v1153, (__int128 *)v1147);
  sub_10000BF04(v1145, "AG");
  sub_10000BF04(v1139, "Antigua/Barbuda");
  sub_10000BF04(&v1141, "AG");
  v1143 = 257;
  v1144 = 0;
  sub_10036ED78(v2047, (__int128 *)v1145, (__int128 *)v1139);
  sub_10000BF04(v1137, "AW");
  sub_10000BF04(v1131, "Aruba");
  sub_10000BF04(&v1133, "AW");
  v1135 = 257;
  v1136 = 0;
  sub_10036ED78(v2048, (__int128 *)v1137, (__int128 *)v1131);
  sub_10000BF04(v1129, "BS");
  sub_10000BF04(v1123, "Bahamas");
  sub_10000BF04(&v1125, "BS");
  v1127 = 257;
  v1128 = 0;
  sub_10036ED78(v2049, (__int128 *)v1129, (__int128 *)v1123);
  sub_10000BF04(v1121, "BB");
  sub_10000BF04(v1115, "Barbados");
  sub_10000BF04(&v1117, "BB");
  v1119 = 257;
  v1120 = 0;
  sub_10036ED78(v2050, (__int128 *)v1121, (__int128 *)v1115);
  sub_10000BF04(v1113, "BM");
  sub_10000BF04(v1107, "Bermuda");
  sub_10000BF04(&v1109, "BM");
  v1111 = 257;
  v1112 = 0;
  sub_10036ED78(v2051, (__int128 *)v1113, (__int128 *)v1107);
  sub_10000BF04(v1105, "VG");
  sub_10000BF04(v1099, "British Virgin Islands");
  sub_10000BF04(&v1101, "VG");
  v1103 = 257;
  v1104 = 0;
  sub_10036ED78(v2052, (__int128 *)v1105, (__int128 *)v1099);
  sub_10000BF04(v1097, "KY");
  sub_10000BF04(v1091, "Cayman Islands");
  sub_10000BF04(&v1093, "KY");
  v1095 = 257;
  v1096 = 0;
  sub_10036ED78(v2053, (__int128 *)v1097, (__int128 *)v1091);
  sub_10000BF04(v1089, "DM");
  sub_10000BF04(v1083, "Dominica");
  sub_10000BF04(&v1085, "DM");
  v1087 = 257;
  v1088 = 0;
  sub_10036ED78(v2054, (__int128 *)v1089, (__int128 *)v1083);
  sub_10000BF04(v1081, "GD");
  sub_10000BF04(v1075, "Grenada");
  sub_10000BF04(&v1077, "GD");
  v1079 = 257;
  v1080 = 0;
  sub_10036ED78(v2055, (__int128 *)v1081, (__int128 *)v1075);
  sub_10000BF04(v1073, "MS");
  sub_10000BF04(v1067, "Montserrat");
  sub_10000BF04(&v1069, "MS");
  v1071 = 257;
  v1072 = 0;
  sub_10036ED78(v2056, (__int128 *)v1073, (__int128 *)v1067);
  sub_10000BF04(v1065, "NI");
  sub_10000BF04(v1059, "Nicaragua");
  sub_10000BF04(&v1061, "NI");
  v1063 = 257;
  v1064 = 0;
  sub_10036ED78(v2057, (__int128 *)v1065, (__int128 *)v1059);
  sub_10000BF04(v1057, "KN");
  sub_10000BF04(v1051, "St Kitts/Nevis");
  sub_10000BF04(&v1053, "KN");
  v1055 = 257;
  v1056 = 0;
  sub_10036ED78(v2058, (__int128 *)v1057, (__int128 *)v1051);
  sub_10000BF04(v1049, "LC");
  sub_10000BF04(v1043, "St Lucia");
  sub_10000BF04(&v1045, "LC");
  v1047 = 257;
  v1048 = 0;
  sub_10036ED78(v2059, (__int128 *)v1049, (__int128 *)v1043);
  sub_10000BF04(v1041, "VC");
  sub_10000BF04(v1035, "St Vincent/Grenadines");
  sub_10000BF04(&v1037, "VC");
  v1039 = 257;
  v1040 = 0;
  sub_10036ED78(v2060, (__int128 *)v1041, (__int128 *)v1035);
  sub_10000BF04(v1033, "TC");
  sub_10000BF04(v1027, "Turks and Caicos");
  sub_10000BF04(&v1029, "TC");
  v1031 = 257;
  v1032 = 0;
  sub_10036ED78(v2061, (__int128 *)v1033, (__int128 *)v1027);
  sub_10000BF04(v1025, "BO");
  sub_10000BF04(v1019, "Bolivia");
  sub_10000BF04(&v1021, "BO");
  v1023 = 257;
  v1024 = 0;
  sub_10036ED78(v2062, (__int128 *)v1025, (__int128 *)v1019);
  sub_10000BF04(v1017, "JM");
  sub_10000BF04(v1011, "Jamaica");
  sub_10000BF04(&v1013, "JM");
  v1015 = 257;
  v1016 = 0;
  sub_10036ED78(v2063, (__int128 *)v1017, (__int128 *)v1011);
  sub_10000BF04(v1009, "PY");
  sub_10000BF04(v1003, "Paraguay");
  sub_10000BF04(&v1005, "PY");
  v1007 = 257;
  v1008 = 0;
  sub_10036ED78(v2064, (__int128 *)v1009, (__int128 *)v1003);
  sub_10000BF04(v1001, "TT");
  sub_10000BF04(v995, "Trinidad/Tobago");
  sub_10000BF04(&v997, "TT");
  v999 = 257;
  v1000 = 0;
  sub_10036ED78(v2065, (__int128 *)v1001, (__int128 *)v995);
  sub_10000BF04(v993, "AL");
  sub_10000BF04(v987, "Albania");
  sub_10000BF04(&v989, "AL");
  v991 = 257;
  v992 = 1;
  sub_10036ED78(v2066, (__int128 *)v993, (__int128 *)v987);
  sub_10000BF04(v985, "DZ");
  sub_10000BF04(v979, "Algeria");
  sub_10000BF04(&v981, "DZ");
  v983 = 257;
  v984 = 1;
  sub_10036ED78(v2067, (__int128 *)v985, (__int128 *)v979);
  sub_10000BF04(v977, "AO");
  sub_10000BF04(v971, "Angola");
  sub_10000BF04(&v973, "AO");
  v975 = 257;
  v976 = 1;
  sub_10036ED78(v2068, (__int128 *)v977, (__int128 *)v971);
  sub_10000BF04(v969, "AM");
  sub_10000BF04(v963, "Armenia");
  sub_10000BF04(&v965, "AM");
  v967 = 0;
  v968 = 6;
  sub_10036ED78(v2069, (__int128 *)v969, (__int128 *)v963);
  sub_10000BF04(v961, "BJ");
  sub_10000BF04(v955, "Benin");
  sub_10000BF04(&v957, "BJ");
  v959 = 257;
  v960 = 1;
  sub_10036ED78(v2070, (__int128 *)v961, (__int128 *)v955);
  sub_10000BF04(v953, "BA");
  sub_10000BF04(v947, "Bosina & Herzegovina");
  sub_10000BF04(&v949, "BA");
  v951 = 257;
  v952 = 1;
  sub_10036ED78(v2071, (__int128 *)v953, (__int128 *)v947);
  sub_10000BF04(v945, "BI");
  sub_10000BF04(v939, "Burundi");
  sub_10000BF04(&v941, "BI");
  v943 = 257;
  v944 = 1;
  sub_10036ED78(v2072, (__int128 *)v945, (__int128 *)v939);
  sub_10000BF04(v937, "BF");
  sub_10000BF04(v931, "Burkina Faso");
  sub_10000BF04(&v933, "BF");
  v935 = 257;
  v936 = 1;
  sub_10036ED78(v2073, (__int128 *)v937, (__int128 *)v931);
  sub_10000BF04(v929, "CF");
  sub_10000BF04(v923, "Central Africa Republic");
  sub_10000BF04(&v925, "CF");
  v927 = 257;
  v928 = 1;
  sub_10036ED78(v2074, (__int128 *)v929, (__int128 *)v923);
  sub_10000BF04(v921, "TD");
  sub_10000BF04(v915, "Chad");
  sub_10000BF04(&v917, "TD");
  v919 = 257;
  v920 = 1;
  sub_10036ED78(v2075, (__int128 *)v921, (__int128 *)v915);
  sub_10000BF04(v913, "CD");
  sub_10000BF04(v907, "Congo (Brazzaville)");
  sub_10000BF04(&v909, "CD");
  v911 = 257;
  v912 = 1;
  sub_10036ED78(v2076, (__int128 *)v913, (__int128 *)v907);
  sub_10000BF04(v905, "CG");
  sub_10000BF04(v899, "Democratic Republic of Congo");
  sub_10000BF04(&v901, "CG");
  v903 = 257;
  v904 = 1;
  sub_10036ED78(v2077, (__int128 *)v905, (__int128 *)v899);
  sub_10000BF04(v897, "GQ");
  sub_10000BF04(v891, "Equatorial Guinea");
  sub_10000BF04(&v893, "GQ");
  v895 = 257;
  v896 = 1;
  sub_10036ED78(v2078, (__int128 *)v897, (__int128 *)v891);
  sub_10000BF04(v889, "ET");
  sub_10000BF04(v883, "Ethiopia");
  sub_10000BF04(&v885, "ET");
  v887 = 257;
  v888 = 1;
  sub_10036ED78(v2079, (__int128 *)v889, (__int128 *)v883);
  sub_10000BF04(v881, "PF");
  sub_10000BF04(v875, "French Polynesia");
  sub_10000BF04(&v877, "PF");
  v879 = 257;
  v880 = 1;
  sub_10036ED78(v2080, (__int128 *)v881, (__int128 *)v875);
  sub_10000BF04(v873, "GA");
  sub_10000BF04(v867, "Gabon");
  sub_10000BF04(&v869, "GA");
  v871 = 257;
  v872 = 1;
  sub_10036ED78(v2081, (__int128 *)v873, (__int128 *)v867);
  sub_10000BF04(v865, "GM");
  sub_10000BF04(v859, "Gambia");
  sub_10000BF04(&v861, "GM");
  v863 = 257;
  v864 = 1;
  sub_10036ED78(v2082, (__int128 *)v865, (__int128 *)v859);
  sub_10000BF04(v857, "GH");
  sub_10000BF04(v851, "Ghana");
  sub_10000BF04(&v853, "GH");
  v855 = 257;
  v856 = 1;
  sub_10036ED78(v2083, (__int128 *)v857, (__int128 *)v851);
  sub_10000BF04(v849, "GI");
  sub_10000BF04(v843, "Gibraltar");
  sub_10000BF04(&v845, "GI");
  v847 = 257;
  v848 = 1;
  sub_10036ED78(v2084, (__int128 *)v849, (__int128 *)v843);
  sub_10000BF04(v841, "GL");
  sub_10000BF04(v835, "Greenland");
  sub_10000BF04(&v837, "GL");
  v839 = 257;
  v840 = 1;
  sub_10036ED78(v2085, (__int128 *)v841, (__int128 *)v835);
  sub_10000BF04(v833, "GP");
  sub_10000BF04(v827, "Guadeloupe");
  sub_10000BF04(&v829, "GP");
  v831 = 257;
  v832 = 1;
  sub_10036ED78(v2086, (__int128 *)v833, (__int128 *)v827);
  sub_10000BF04(v825, "GW");
  sub_10000BF04(v819, "Guinea Bissau");
  sub_10000BF04(&v821, "GW");
  v823 = 257;
  v824 = 1;
  sub_10036ED78(v2087, (__int128 *)v825, (__int128 *)v819);
  sub_10000BF04(v817, "GN");
  sub_10000BF04(v811, "Guinea Conakry");
  sub_10000BF04(&v813, "GN");
  v815 = 257;
  v816 = 1;
  sub_10036ED78(v2088, (__int128 *)v817, (__int128 *)v811);
  sub_10000BF04(v809, "IQ");
  sub_10000BF04(v803, "Iraq");
  sub_10000BF04(&v805, "IQ");
  v807 = 257;
  v808 = 1;
  sub_10036ED78(v2089, (__int128 *)v809, (__int128 *)v803);
  sub_10000BF04(v801, "CI");
  sub_10000BF04(v795, "Ivory Coast");
  sub_10000BF04(&v797, "CI");
  v799 = 257;
  v800 = 1;
  sub_10036ED78(v2090, (__int128 *)v801, (__int128 *)v795);
  sub_10000BF04(v793, "KE");
  sub_10000BF04(v787, "Kenya");
  sub_10000BF04(&v789, "KE");
  v791 = 257;
  v792 = 1;
  sub_10036ED78(v2091, (__int128 *)v793, (__int128 *)v787);
  sub_10000BF04(v785, "KG");
  sub_10000BF04(v779, "Kyrgzstan");
  sub_10000BF04(&v781, "KG");
  v783 = 0;
  v784 = 6;
  sub_10036ED78(v2092, (__int128 *)v785, (__int128 *)v779);
  sub_10000BF04(v777, "LB");
  sub_10000BF04(v771, "Lebanon");
  sub_10000BF04(&v773, "LB");
  v775 = 257;
  v776 = 1;
  sub_10036ED78(v2093, (__int128 *)v777, (__int128 *)v771);
  sub_10000BF04(v769, "LS");
  sub_10000BF04(v763, "Lesotho");
  sub_10000BF04(&v765, "LS");
  v767 = 257;
  v768 = 1;
  sub_10036ED78(v2094, (__int128 *)v769, (__int128 *)v763);
  sub_10000BF04(v761, "LR");
  sub_10000BF04(v755, "Liberia");
  sub_10000BF04(&v757, "LR");
  v759 = 257;
  v760 = 1;
  sub_10036ED78(v2095, (__int128 *)v761, (__int128 *)v755);
  sub_10000BF04(v753, "LY");
  sub_10000BF04(v747, "Libya");
  sub_10000BF04(&v749, "LY");
  v751 = 257;
  v752 = 1;
  sub_10036ED78(v2096, (__int128 *)v753, (__int128 *)v747);
  sub_10000BF04(v745, "MK");
  sub_10000BF04(v739, "Macedonia");
  sub_10000BF04(&v741, "MK");
  v743 = 257;
  v744 = 1;
  sub_10036ED78(v2097, (__int128 *)v745, (__int128 *)v739);
  sub_10000BF04(v737, "MG");
  sub_10000BF04(v731, "Madagascar");
  sub_10000BF04(&v733, "MG");
  v735 = 257;
  v736 = 1;
  sub_10036ED78(v2098, (__int128 *)v737, (__int128 *)v731);
  sub_10000BF04(v729, "ML");
  sub_10000BF04(v723, "Mali");
  sub_10000BF04(&v725, "ML");
  v727 = 257;
  v728 = 1;
  sub_10036ED78(v2099, (__int128 *)v729, (__int128 *)v723);
  sub_10000BF04(v721, "MQ");
  sub_10000BF04(v715, "Martinique");
  sub_10000BF04(&v717, "MQ");
  v719 = 257;
  v720 = 1;
  sub_10036ED78(v2100, (__int128 *)v721, (__int128 *)v715);
  sub_10000BF04(v713, "MU");
  sub_10000BF04(v707, "Mauritius");
  sub_10000BF04(&v709, "MU");
  v711 = 257;
  v712 = 1;
  sub_10036ED78(v2101, (__int128 *)v713, (__int128 *)v707);
  sub_10000BF04(v705, "MD");
  sub_10000BF04(v699, "Moldova");
  sub_10000BF04(&v701, "MD");
  v703 = 257;
  v704 = 1;
  sub_10036ED78(v2102, (__int128 *)v705, (__int128 *)v699);
  sub_10000BF04(v697, "MC");
  sub_10000BF04(v691, "Monaco");
  sub_10000BF04(&v693, "MC");
  v695 = 257;
  v696 = 1;
  sub_10036ED78(v2103, (__int128 *)v697, (__int128 *)v691);
  sub_10000BF04(v689, "ME");
  sub_10000BF04(v683, "Montenegro");
  sub_10000BF04(&v685, "ME");
  v687 = 257;
  v688 = 1;
  sub_10036ED78(v2104, (__int128 *)v689, (__int128 *)v683);
  sub_10000BF04(v681, "MZ");
  sub_10000BF04(v675, "Mozambique");
  sub_10000BF04(&v677, "MZ");
  v679 = 257;
  v680 = 1;
  sub_10036ED78(v2105, (__int128 *)v681, (__int128 *)v675);
  sub_10000BF04(v673, "NA");
  sub_10000BF04(v667, "Namibia");
  sub_10000BF04(&v669, "NA");
  v671 = 257;
  v672 = 1;
  sub_10036ED78(v2106, (__int128 *)v673, (__int128 *)v667);
  sub_10000BF04(v665, "NE");
  sub_10000BF04(v659, "Niger");
  sub_10000BF04(&v661, "NE");
  v663 = 257;
  v664 = 1;
  sub_10036ED78(v2107, (__int128 *)v665, (__int128 *)v659);
  sub_10000BF04(v657, "OM");
  sub_10000BF04(v651, "Oman");
  sub_10000BF04(&v653, "OM");
  v655 = 257;
  v656 = 1;
  sub_10036ED78(v2108, (__int128 *)v657, (__int128 *)v651);
  sub_10000BF04(v649, "RE");
  sub_10000BF04(v643, "Reunion");
  sub_10000BF04(&v645, "RE");
  v647 = 257;
  v648 = 1;
  sub_10036ED78(v2109, (__int128 *)v649, (__int128 *)v643);
  sub_10000BF04(v641, "SN");
  sub_10000BF04(v635, "Senegal");
  sub_10000BF04(&v637, "SN");
  v639 = 257;
  v640 = 1;
  sub_10036ED78(v2110, (__int128 *)v641, (__int128 *)v635);
  sub_10000BF04(v633, "TZ");
  sub_10000BF04(v627, "Tanzania");
  sub_10000BF04(&v629, "TZ");
  v631 = 257;
  v632 = 1;
  sub_10036ED78(v2111, (__int128 *)v633, (__int128 *)v627);
  sub_10000BF04(v625, "TG");
  sub_10000BF04(v619, "Togo");
  sub_10000BF04(&v621, "TG");
  v623 = 257;
  v624 = 1;
  sub_10036ED78(v2112, (__int128 *)v625, (__int128 *)v619);
  sub_10000BF04(v617, "TN");
  sub_10000BF04(v611, "Tunisia");
  sub_10000BF04(&v613, "TN");
  v615 = 257;
  v616 = 1;
  sub_10036ED78(v2113, (__int128 *)v617, (__int128 *)v611);
  sub_10000BF04(v609, "UG");
  sub_10000BF04(v603, "Uganda");
  sub_10000BF04(&v605, "UG");
  v607 = 257;
  v608 = 1;
  sub_10036ED78(v2114, (__int128 *)v609, (__int128 *)v603);
  sub_10000BF04(v601, "UZ");
  sub_10000BF04(v595, "Uzbekistan");
  sub_10000BF04(&v597, "UZ");
  v599 = 0;
  v600 = 6;
  sub_10036ED78(v2115, (__int128 *)v601, (__int128 *)v595);
  sub_10000BF04(v593, "ZM");
  sub_10000BF04(v587, "Zambia");
  sub_10000BF04(&v589, "ZM");
  v591 = 257;
  v592 = 1;
  sub_10036ED78(v2116, (__int128 *)v593, (__int128 *)v587);
  sub_10000BF04(v585, "ZW");
  sub_10000BF04(v579, "Zimbabwe");
  sub_10000BF04(&v581, "ZW");
  v583 = 257;
  v584 = 1;
  sub_10036ED78(v2117, (__int128 *)v585, (__int128 *)v579);
  sub_10000BF04(v577, "GE");
  sub_10000BF04(v571, "Georgia");
  sub_10000BF04(&v573, "GE");
  v575 = 257;
  v576 = 1;
  sub_10036ED78(v2118, (__int128 *)v577, (__int128 *)v571);
  sub_10000BF04(v569, "MW");
  sub_10000BF04(v563, "Malawi");
  sub_10000BF04(&v565, "MW");
  v567 = 257;
  v568 = 1;
  sub_10036ED78(v2119, (__int128 *)v569, (__int128 *)v563);
  sub_10000BF04(v561, "RW");
  sub_10000BF04(v555, "Rwanda");
  sub_10000BF04(&v557, "RW");
  v559 = 257;
  v560 = 1;
  sub_10036ED78(v2120, (__int128 *)v561, (__int128 *)v555);
  sub_10000BF04(v553, "SC");
  sub_10000BF04(v547, "Seychelles");
  sub_10000BF04(&v549, "SC");
  v551 = 257;
  v552 = 1;
  sub_10036ED78(v2121, (__int128 *)v553, (__int128 *)v547);
  sub_10000BF04(v545, "SZ");
  sub_10000BF04(v539, "Swaziland");
  sub_10000BF04(&v541, "SZ");
  v543 = 257;
  v544 = 1;
  sub_10036ED78(v2122, (__int128 *)v545, (__int128 *)v539);
  sub_10000BF04(v537, "QA");
  sub_10000BF04(v531, "Qatar");
  sub_10000BF04(&v533, "QA");
  v535 = 257;
  v536 = 1;
  sub_10036ED78(v2123, (__int128 *)v537, (__int128 *)v531);
  sub_10000BF04(v529, "JO");
  sub_10000BF04(v523, "Jordan");
  sub_10000BF04(&v525, "JO");
  v527 = 257;
  v528 = 1;
  sub_10036ED78(v2124, (__int128 *)v529, (__int128 *)v523);
  sub_10000BF04(v521, "BH");
  sub_10000BF04(v515, "Bahrain");
  sub_10000BF04(&v517, "BH");
  v519 = 257;
  v520 = 1;
  sub_10036ED78(v2125, (__int128 *)v521, (__int128 *)v515);
  sub_10000BF04(v513, "AD");
  sub_10000BF04(v507, "ANDORRA (all EIRP locales)");
  sub_10000BF04(&v509, "AD");
  v511 = 257;
  v512 = 1;
  sub_10036ED78(v2126, (__int128 *)v513, (__int128 *)v507);
  sub_10000BF04(v505, "CW");
  sub_10000BF04(v499, "CURACAO");
  sub_10000BF04(&v501, "CW");
  v503 = 257;
  v504 = 0;
  sub_10036ED78(v2127, (__int128 *)v505, (__int128 *)v499);
  sub_10000BF04(v497, "BZ");
  sub_10000BF04(v491, "BELIZE");
  sub_10000BF04(&v493, "BZ");
  v495 = 257;
  v496 = 0;
  sub_10036ED78(v2128, (__int128 *)v497, (__int128 *)v491);
  sub_10000BF04(v489, "CC");
  sub_10000BF04(v483, "COCOS (KEELING) ISLANDS");
  sub_10000BF04(&v485, "CC");
  v487 = 257;
  v488 = 1;
  sub_10036ED78(v2129, (__int128 *)v489, (__int128 *)v483);
  sub_10000BF04(v481, "CK");
  sub_10000BF04(v475, "COOK ISLANDS");
  sub_10000BF04(&v477, "CK");
  v479 = 257;
  v480 = 1;
  sub_10036ED78(v2130, (__int128 *)v481, (__int128 *)v475);
  sub_10000BF04(v473, "CM");
  sub_10000BF04(v467, "CAMEROON");
  sub_10000BF04(&v469, "CM");
  v471 = 257;
  v472 = 1;
  sub_10036ED78(v2131, (__int128 *)v473, (__int128 *)v467);
  sub_10000BF04(v465, "CV");
  sub_10000BF04(v459, "CAPE VERDE");
  sub_10000BF04(&v461, "CV");
  v463 = 257;
  v464 = 1;
  sub_10036ED78(v2132, (__int128 *)v465, (__int128 *)v459);
  sub_10000BF04(v457, "CX");
  sub_10000BF04(v451, "CHRISTMAS ISLAND");
  sub_10000BF04(&v453, "CX");
  v455 = 257;
  v456 = 1;
  sub_10036ED78(v2133, (__int128 *)v457, (__int128 *)v451);
  sub_10000BF04(v449, "FM");
  sub_10000BF04(v443, "MICRONESIA. FEDERATED STATES OF");
  sub_10000BF04(&v445, "FM");
  v447 = 257;
  v448 = 1;
  sub_10036ED78(v2134, (__int128 *)v449, (__int128 *)v443);
  sub_10000BF04(v441, "GF");
  sub_10000BF04(v435, "FRENCH GUIANA");
  sub_10000BF04(&v437, "GF");
  v439 = 257;
  v440 = 0;
  sub_10036ED78(v2135, (__int128 *)v441, (__int128 *)v435);
  sub_10000BF04(v433, "GG");
  sub_10000BF04(v427, "Guernsey (All EIRP Locales)");
  sub_10000BF04(&v429, "GG");
  v431 = 257;
  v432 = 1;
  sub_10036ED78(v2136, (__int128 *)v433, (__int128 *)v427);
  sub_10000BF04(v425, "HM");
  sub_10000BF04(v419, "HEARD ISLAND AND MCDONALD ISLANDS");
  sub_10000BF04(&v421, "HM");
  v423 = 257;
  v424 = 1;
  sub_10036ED78(v2137, (__int128 *)v425, (__int128 *)v419);
  sub_10000BF04(v417, "HT");
  sub_10000BF04(v411, "HAITI");
  sub_10000BF04(&v413, "HT");
  v415 = 257;
  v416 = 0;
  sub_10036ED78(v2138, (__int128 *)v417, (__int128 *)v411);
  sub_10000BF04(v409, "IO");
  sub_10000BF04(v403, "BRITISH INDIAN OCEAN TERRITORY");
  sub_10000BF04(&v405, "IO");
  v407 = 257;
  v408 = 1;
  sub_10036ED78(v2139, (__int128 *)v409, (__int128 *)v403);
  sub_10000BF04(v401, "MF");
  sub_10000BF04(v395, "Saint Martin (North of Island)");
  sub_10000BF04(&v397, "MF");
  v399 = 257;
  v400 = 0;
  sub_10036ED78(v2140, (__int128 *)v401, (__int128 *)v395);
  sub_10000BF04(v393, "MH");
  sub_10000BF04(v387, "MARSHALL ISLANDS");
  sub_10000BF04(&v389, "MH");
  v391 = 257;
  v392 = 1;
  sub_10036ED78(v2141, (__int128 *)v393, (__int128 *)v387);
  sub_10000BF04(v385, "MR");
  sub_10000BF04(v379, "MAURITANIA");
  sub_10000BF04(&v381, "MR");
  v383 = 257;
  v384 = 1;
  sub_10036ED78(v2142, (__int128 *)v385, (__int128 *)v379);
  sub_10000BF04(v377, "NG");
  sub_10000BF04(v371, "NIGERIA");
  sub_10000BF04(&v373, "NG");
  v375 = 257;
  v376 = 1;
  sub_10036ED78(v2143, (__int128 *)v377, (__int128 *)v371);
  sub_10000BF04(v369, "NR");
  sub_10000BF04(v363, "NAURU");
  sub_10000BF04(&v365, "NR");
  v367 = 257;
  v368 = 1;
  sub_10036ED78(v2144, (__int128 *)v369, (__int128 *)v363);
  sub_10000BF04(v361, "NU");
  sub_10000BF04(v355, "NIUE");
  sub_10000BF04(&v357, "NU");
  v359 = 257;
  v360 = 1;
  sub_10036ED78(v2145, (__int128 *)v361, (__int128 *)v355);
  sub_10000BF04(v353, "PN");
  sub_10000BF04(v347, "PITCAIRN");
  sub_10000BF04(&v349, "PN");
  v351 = 257;
  v352 = 1;
  sub_10036ED78(v2146, (__int128 *)v353, (__int128 *)v347);
  sub_10000BF04(v345, "PW");
  sub_10000BF04(v339, "PALAU ");
  sub_10000BF04(&v341, "PW");
  v343 = 257;
  v344 = 0;
  sub_10036ED78(v2147, (__int128 *)v345, (__int128 *)v339);
  sub_10000BF04(v337, "SB");
  sub_10000BF04(v331, "SOLOMON ISLANDS");
  sub_10000BF04(&v333, "SB");
  v335 = 257;
  v336 = 1;
  sub_10036ED78(v2148, (__int128 *)v337, (__int128 *)v331);
  sub_10000BF04(v329, "SL");
  sub_10000BF04(v323, "SIERRA LEONE");
  sub_10000BF04(&v325, "SL");
  v327 = 257;
  v328 = 1;
  sub_10036ED78(v2149, (__int128 *)v329, (__int128 *)v323);
  sub_10000BF04(v321, "SR");
  sub_10000BF04(v315, "SURINAME");
  sub_10000BF04(&v317, "SR");
  v319 = 257;
  v320 = 0;
  sub_10036ED78(v2150, (__int128 *)v321, (__int128 *)v315);
  sub_10000BF04(v313, "ST");
  sub_10000BF04(v307, "SAO TOME AND PRINCIPE");
  sub_10000BF04(&v309, "ST");
  v311 = 257;
  v312 = 1;
  sub_10036ED78(v2151, (__int128 *)v313, (__int128 *)v307);
  sub_10000BF04(v305, "TF");
  sub_10000BF04(v299, "FRENCH SOUTHERN TERRITORIES");
  sub_10000BF04(&v301, "TF");
  v303 = 257;
  v304 = 1;
  sub_10036ED78(v2152, (__int128 *)v305, (__int128 *)v299);
  sub_10000BF04(v297, "TK");
  sub_10000BF04(v291, "TOKELAU");
  sub_10000BF04(&v293, "TK");
  v295 = 257;
  v296 = 1;
  sub_10036ED78(v2153, (__int128 *)v297, (__int128 *)v291);
  sub_10000BF04(v289, "TM");
  sub_10000BF04(v283, "TURKMENISTAN");
  sub_10000BF04(&v285, "TM");
  v287 = 0;
  v288 = 6;
  sub_10036ED78(v2154, (__int128 *)v289, (__int128 *)v283);
  sub_10000BF04(v281, "TO");
  sub_10000BF04(v275, "TONGA");
  sub_10000BF04(&v277, "TO");
  v279 = 257;
  v280 = 1;
  sub_10036ED78(v2155, (__int128 *)v281, (__int128 *)v275);
  sub_10000BF04(v273, "TV");
  sub_10000BF04(v267, "TUVALU");
  sub_10000BF04(&v269, "TV");
  v271 = 257;
  v272 = 1;
  sub_10036ED78(v2156, (__int128 *)v273, (__int128 *)v267);
  sub_10000BF04(v265, "VA");
  sub_10000BF04(v259, "HOLY SEE (VATICAN CITY STATE)");
  sub_10000BF04(&v261, "VA");
  v263 = 257;
  v264 = 1;
  sub_10036ED78(v2157, (__int128 *)v265, (__int128 *)v259);
  sub_10000BF04(v257, "WF");
  sub_10000BF04(v251, "WALLIS AND FUTUNA");
  sub_10000BF04(&v253, "WF");
  v255 = 257;
  v256 = 1;
  sub_10036ED78(v2158, (__int128 *)v257, (__int128 *)v251);
  sub_10000BF04(v249, "YE");
  sub_10000BF04(v243, "YEMEN");
  sub_10000BF04(&v245, "YE");
  v247 = 257;
  v248 = 1;
  sub_10036ED78(v2159, (__int128 *)v249, (__int128 *)v243);
  sub_10000BF04(v241, "YT");
  sub_10000BF04(v235, "MAYOTTE");
  sub_10000BF04(&v237, "YT");
  v239 = 257;
  v240 = 1;
  sub_10036ED78(v2160, (__int128 *)v241, (__int128 *)v235);
  sub_10000BF04(v233, "ER");
  sub_10000BF04(v227, "ERITREA");
  sub_10000BF04(&v229, "ER");
  v231 = 257;
  v232 = 1;
  sub_10036ED78(v2161, (__int128 *)v233, (__int128 *)v227);
  sub_10000BF04(v225, "FO");
  sub_10000BF04(v219, "FAROE ISLANDS");
  sub_10000BF04(&v221, "FO");
  v223 = 257;
  v224 = 1;
  sub_10036ED78(v2162, (__int128 *)v225, (__int128 *)v219);
  sub_10000BF04(v217, "SO");
  sub_10000BF04(v211, "SOMALIA");
  sub_10000BF04(&v213, "SO");
  v215 = 257;
  v216 = 1;
  sub_10036ED78(v2163, (__int128 *)v217, (__int128 *)v211);
  sub_10000BF04(v209, "BQ");
  sub_10000BF04(v203, "BES");
  sub_10000BF04(&v205, "BQ");
  v207 = 257;
  v208 = 0;
  sub_10036ED78(v2164, (__int128 *)v209, (__int128 *)v203);
  sub_10000BF04(v201, "GY");
  sub_10000BF04(v195, "Guyana");
  sub_10000BF04(&v197, "GY");
  v199 = 257;
  v200 = 0;
  sub_10036ED78(v2165, (__int128 *)v201, (__int128 *)v195);
  sub_10000BF04(v193, "AS");
  sub_10000BF04(v187, "America Samoa");
  sub_10000BF04(&v189, "AS");
  v191 = 257;
  v192 = 0;
  sub_10036ED78(v2166, (__int128 *)v193, (__int128 *)v187);
  sub_10000BF04(v185, "BW");
  sub_10000BF04(v179, "Botswana");
  sub_10000BF04(&v181, "BW");
  v183 = 257;
  v184 = 1;
  sub_10036ED78(v2167, (__int128 *)v185, (__int128 *)v179);
  sub_10000BF04(v177, "XK");
  sub_10000BF04(v171, "Kosovo");
  sub_10000BF04(&v173, "XK");
  v175 = 257;
  v176 = 1;
  sub_10036ED78(v2168, (__int128 *)v177, (__int128 *)v171);
  sub_10000BF04(v169, "PS");
  sub_10000BF04(v163, "Palestine");
  sub_10000BF04(&v165, "PS");
  v167 = 257;
  v168 = 1;
  sub_10036ED78(v2169, (__int128 *)v169, (__int128 *)v163);
  sub_10000BF04(v161, "TJ");
  sub_10000BF04(v155, "Tajikistan");
  sub_10000BF04(&v157, "TJ");
  v159 = 0;
  v160 = 6;
  sub_10036ED78(v2170, (__int128 *)v161, (__int128 *)v155);
  sub_10000BF04(v153, "SD");
  sub_10000BF04(v147, "SUDAN");
  sub_10000BF04(&v149, "SD");
  v151 = 257;
  v152 = 1;
  sub_10036ED78(v2171, (__int128 *)v153, (__int128 *)v147);
  sub_10000BF04(v145, "IM");
  sub_10000BF04(v139, "Isle of MAN");
  sub_10000BF04(&v141, "IM");
  v143 = 257;
  v144 = 1;
  sub_10036ED78(v2172, (__int128 *)v145, (__int128 *)v139);
  sub_10000BF04(v137, "TL");
  sub_10000BF04(v131, "East Timor");
  sub_10000BF04(&v133, "TL");
  v135 = 257;
  v136 = 1;
  sub_10036ED78(v2173, (__int128 *)v137, (__int128 *)v131);
  sub_10000BF04(v129, "DJ");
  sub_10000BF04(v123, "Djibouti ");
  sub_10000BF04(&v125, "DJ");
  v127 = 257;
  v128 = 1;
  sub_10036ED78(v2174, (__int128 *)v129, (__int128 *)v123);
  sub_10000BF04(v121, "FK");
  sub_10000BF04(v115, "Falkland Islands");
  sub_10000BF04(&v117, "FK");
  v119 = 257;
  v120 = 1;
  sub_10036ED78(v2175, (__int128 *)v121, (__int128 *)v115);
  sub_10000BF04(v113, "KI");
  sub_10000BF04(v107, "Kiribati");
  sub_10000BF04(&v109, "KI");
  v111 = 257;
  v112 = 1;
  sub_10036ED78(v2176, (__int128 *)v113, (__int128 *)v107);
  sub_10000BF04(v105, "KM");
  sub_10000BF04(v99, "Comoros ");
  sub_10000BF04(&v101, "KM");
  v103 = 257;
  v104 = 1;
  sub_10036ED78(v2177, (__int128 *)v105, (__int128 *)v99);
  sub_10000BF04(v97, "PM");
  sub_10000BF04(v91, "St. Pierre & Miquelon");
  sub_10000BF04(&v93, "PM");
  v95 = 257;
  v96 = 1;
  sub_10036ED78(v2178, (__int128 *)v97, (__int128 *)v91);
  sub_10000BF04(v89, "SM");
  sub_10000BF04(v83, "San Marino");
  sub_10000BF04(&v85, "SM");
  v87 = 257;
  v88 = 1;
  sub_10036ED78(v2179, (__int128 *)v89, (__int128 *)v83);
  sub_10000BF04(v81, "MP");
  sub_10000BF04(v75, "Northern Mariana Islands");
  sub_10000BF04(&v77, "MP");
  v79 = 257;
  v80 = 0;
  sub_10036ED78(v2180, (__int128 *)v81, (__int128 *)v75);
  sub_10000BF04(v73, "A2");
  sub_10000BF04(v67, "French West Indies");
  sub_10000BF04(&v69, "A2");
  v71 = 257;
  v72 = 1;
  sub_10036ED78(v2181, (__int128 *)v73, (__int128 *)v67);
  sub_10000BF04(v65, off_100853208[0]);
  sub_10000BF04(v59, "Shared MCC");
  sub_10000BF04(&v61, off_100853208[0]);
  v63 = 0;
  v64 = 0;
  sub_10036ED78(v2182, (__int128 *)v65, (__int128 *)v59);
  sub_10000BF04(v57, off_100853228[0]);
  sub_10000BF04(v51, "JPSS");
  sub_10000BF04(&v53, off_100853228[0]);
  v55 = 0;
  v56 = 4;
  sub_10036ED78(v2183, (__int128 *)v57, (__int128 *)v51);
  sub_10000BF04(v49, off_100853230[0]);
  sub_10000BF04(v43, "USCW");
  sub_10000BF04(&v45, off_100853230[0]);
  v47 = 0;
  v48 = 0;
  sub_10036ED78(v2184, (__int128 *)v49, (__int128 *)v43);
  sub_10000BF04(v41, off_100853238[0]);
  sub_10000BF04(v35, "GridRestricted");
  sub_10000BF04(&v37, off_100853238[0]);
  v39 = 0;
  v40 = 0;
  sub_10036ED78(v2185, (__int128 *)v41, (__int128 *)v35);
  sub_10000BF04(v33, off_100853250[0]);
  sub_10000BF04(v27, "BACKOFF");
  sub_10000BF04(&v29, off_100853250[0]);
  v31 = 0;
  v32 = 0;
  sub_10036ED78(v2186, (__int128 *)v33, (__int128 *)v27);
  sub_10000BF04(v25, off_100853210[0]);
  sub_10000BF04(v19, "TEST5");
  sub_10000BF04(&v21, off_100853210[0]);
  v23 = 1;
  v24 = 0;
  sub_10036ED78(v2187, (__int128 *)v25, (__int128 *)v19);
  sub_10000BF04(v17, off_100853220[0]);
  sub_10000BF04(v11, "ApFakeCountry");
  sub_10000BF04(&v13, off_100853220[0]);
  v15 = 0;
  v16 = 0;
  sub_10036ED78(v2188, (__int128 *)v17, (__int128 *)v11);
  sub_10000BF04(v9, off_100853218[0]);
  sub_10000BF04(v3, "kUnknownCountry");
  sub_10000BF04(&__p, off_100853218[0]);
  v7 = 0;
  v8 = 0;
  sub_10036ED78(v2189, (__int128 *)v9, (__int128 *)v3);
  sub_10036EF58((uint64_t)qword_10085FD08, v1947, 243);
  v0 = 19440;
  do
  {
    v1 = &v1947[v0];
    if (SHIBYTE(v1945[v0 / 8 + 1]) < 0)
      operator delete(*((void **)v1 - 4));
    if ((char)*(v1 - 33) < 0)
      operator delete(*((void **)v1 - 7));
    if (*(&v1940 + v0) < 0)
      operator delete(*((void **)v1 - 10));
    v0 -= 80;
  }
  while (v0);
  if (v6 < 0)
    operator delete(__p);
  if (v4 < 0)
    operator delete(v3[0]);
  if (v10 < 0)
    operator delete(v9[0]);
  if (v14 < 0)
    operator delete(v13);
  if (v12 < 0)
    operator delete(v11[0]);
  if (v18 < 0)
    operator delete(v17[0]);
  if (v22 < 0)
    operator delete(v21);
  if (v20 < 0)
    operator delete(v19[0]);
  if (v26 < 0)
    operator delete(v25[0]);
  if (v30 < 0)
    operator delete(v29);
  if (v28 < 0)
    operator delete(v27[0]);
  if (v34 < 0)
    operator delete(v33[0]);
  if (v38 < 0)
    operator delete(v37);
  if (v36 < 0)
    operator delete(v35[0]);
  if (v42 < 0)
    operator delete(v41[0]);
  if (v46 < 0)
    operator delete(v45);
  if (v44 < 0)
    operator delete(v43[0]);
  if (v50 < 0)
    operator delete(v49[0]);
  if (v54 < 0)
    operator delete(v53);
  if (v52 < 0)
    operator delete(v51[0]);
  if (v58 < 0)
    operator delete(v57[0]);
  if (v62 < 0)
    operator delete(v61);
  if (v60 < 0)
    operator delete(v59[0]);
  if (v66 < 0)
    operator delete(v65[0]);
  if (v70 < 0)
    operator delete(v69);
  if (v68 < 0)
    operator delete(v67[0]);
  if (v74 < 0)
    operator delete(v73[0]);
  if (v78 < 0)
    operator delete(v77);
  if (v76 < 0)
    operator delete(v75[0]);
  if (v82 < 0)
    operator delete(v81[0]);
  if (v86 < 0)
    operator delete(v85);
  if (v84 < 0)
    operator delete(v83[0]);
  if (v90 < 0)
    operator delete(v89[0]);
  if (v94 < 0)
    operator delete(v93);
  if (v92 < 0)
    operator delete(v91[0]);
  if (v98 < 0)
    operator delete(v97[0]);
  if (v102 < 0)
    operator delete(v101);
  if (v100 < 0)
    operator delete(v99[0]);
  if (v106 < 0)
    operator delete(v105[0]);
  if (v110 < 0)
    operator delete(v109);
  if (v108 < 0)
    operator delete(v107[0]);
  if (v114 < 0)
    operator delete(v113[0]);
  if (v118 < 0)
    operator delete(v117);
  if (v116 < 0)
    operator delete(v115[0]);
  if (v122 < 0)
    operator delete(v121[0]);
  if (v126 < 0)
    operator delete(v125);
  if (v124 < 0)
    operator delete(v123[0]);
  if (v130 < 0)
    operator delete(v129[0]);
  if (v134 < 0)
    operator delete(v133);
  if (v132 < 0)
    operator delete(v131[0]);
  if (v138 < 0)
    operator delete(v137[0]);
  if (v142 < 0)
    operator delete(v141);
  if (v140 < 0)
    operator delete(v139[0]);
  if (v146 < 0)
    operator delete(v145[0]);
  if (v150 < 0)
    operator delete(v149);
  if (v148 < 0)
    operator delete(v147[0]);
  if (v154 < 0)
    operator delete(v153[0]);
  if (v158 < 0)
    operator delete(v157);
  if (v156 < 0)
    operator delete(v155[0]);
  if (v162 < 0)
    operator delete(v161[0]);
  if (v166 < 0)
    operator delete(v165);
  if (v164 < 0)
    operator delete(v163[0]);
  if (v170 < 0)
    operator delete(v169[0]);
  if (v174 < 0)
    operator delete(v173);
  if (v172 < 0)
    operator delete(v171[0]);
  if (v178 < 0)
    operator delete(v177[0]);
  if (v182 < 0)
    operator delete(v181);
  if (v180 < 0)
    operator delete(v179[0]);
  if (v186 < 0)
    operator delete(v185[0]);
  if (v190 < 0)
    operator delete(v189);
  if (v188 < 0)
    operator delete(v187[0]);
  if (v194 < 0)
    operator delete(v193[0]);
  if (v198 < 0)
    operator delete(v197);
  if (v196 < 0)
    operator delete(v195[0]);
  if (v202 < 0)
    operator delete(v201[0]);
  if (v206 < 0)
    operator delete(v205);
  if (v204 < 0)
    operator delete(v203[0]);
  if (v210 < 0)
    operator delete(v209[0]);
  if (v214 < 0)
    operator delete(v213);
  if (v212 < 0)
    operator delete(v211[0]);
  if (v218 < 0)
    operator delete(v217[0]);
  if (v222 < 0)
    operator delete(v221);
  if (v220 < 0)
    operator delete(v219[0]);
  if (v226 < 0)
    operator delete(v225[0]);
  if (v230 < 0)
    operator delete(v229);
  if (v228 < 0)
    operator delete(v227[0]);
  if (v234 < 0)
    operator delete(v233[0]);
  if (v238 < 0)
    operator delete(v237);
  if (v236 < 0)
    operator delete(v235[0]);
  if (v242 < 0)
    operator delete(v241[0]);
  if (v246 < 0)
    operator delete(v245);
  if (v244 < 0)
    operator delete(v243[0]);
  if (v250 < 0)
    operator delete(v249[0]);
  if (v254 < 0)
    operator delete(v253);
  if (v252 < 0)
    operator delete(v251[0]);
  if (v258 < 0)
    operator delete(v257[0]);
  if (v262 < 0)
    operator delete(v261);
  if (v260 < 0)
    operator delete(v259[0]);
  if (v266 < 0)
    operator delete(v265[0]);
  if (v270 < 0)
    operator delete(v269);
  if (v268 < 0)
    operator delete(v267[0]);
  if (v274 < 0)
    operator delete(v273[0]);
  if (v278 < 0)
    operator delete(v277);
  if (v276 < 0)
    operator delete(v275[0]);
  if (v282 < 0)
    operator delete(v281[0]);
  if (v286 < 0)
    operator delete(v285);
  if (v284 < 0)
    operator delete(v283[0]);
  if (v290 < 0)
    operator delete(v289[0]);
  if (v294 < 0)
    operator delete(v293);
  if (v292 < 0)
    operator delete(v291[0]);
  if (v298 < 0)
    operator delete(v297[0]);
  if (v302 < 0)
    operator delete(v301);
  if (v300 < 0)
    operator delete(v299[0]);
  if (v306 < 0)
    operator delete(v305[0]);
  if (v310 < 0)
    operator delete(v309);
  if (v308 < 0)
    operator delete(v307[0]);
  if (v314 < 0)
    operator delete(v313[0]);
  if (v318 < 0)
    operator delete(v317);
  if (v316 < 0)
    operator delete(v315[0]);
  if (v322 < 0)
    operator delete(v321[0]);
  if (v326 < 0)
    operator delete(v325);
  if (v324 < 0)
    operator delete(v323[0]);
  if (v330 < 0)
    operator delete(v329[0]);
  if (v334 < 0)
    operator delete(v333);
  if (v332 < 0)
    operator delete(v331[0]);
  if (v338 < 0)
    operator delete(v337[0]);
  if (v342 < 0)
    operator delete(v341);
  if (v340 < 0)
    operator delete(v339[0]);
  if (v346 < 0)
    operator delete(v345[0]);
  if (v350 < 0)
    operator delete(v349);
  if (v348 < 0)
    operator delete(v347[0]);
  if (v354 < 0)
    operator delete(v353[0]);
  if (v358 < 0)
    operator delete(v357);
  if (v356 < 0)
    operator delete(v355[0]);
  if (v362 < 0)
    operator delete(v361[0]);
  if (v366 < 0)
    operator delete(v365);
  if (v364 < 0)
    operator delete(v363[0]);
  if (v370 < 0)
    operator delete(v369[0]);
  if (v374 < 0)
    operator delete(v373);
  if (v372 < 0)
    operator delete(v371[0]);
  if (v378 < 0)
    operator delete(v377[0]);
  if (v382 < 0)
    operator delete(v381);
  if (v380 < 0)
    operator delete(v379[0]);
  if (v386 < 0)
    operator delete(v385[0]);
  if (v390 < 0)
    operator delete(v389);
  if (v388 < 0)
    operator delete(v387[0]);
  if (v394 < 0)
    operator delete(v393[0]);
  if (v398 < 0)
    operator delete(v397);
  if (v396 < 0)
    operator delete(v395[0]);
  if (v402 < 0)
    operator delete(v401[0]);
  if (v406 < 0)
    operator delete(v405);
  if (v404 < 0)
    operator delete(v403[0]);
  if (v410 < 0)
    operator delete(v409[0]);
  if (v414 < 0)
    operator delete(v413);
  if (v412 < 0)
    operator delete(v411[0]);
  if (v418 < 0)
    operator delete(v417[0]);
  if (v422 < 0)
    operator delete(v421);
  if (v420 < 0)
    operator delete(v419[0]);
  if (v426 < 0)
    operator delete(v425[0]);
  if (v430 < 0)
    operator delete(v429);
  if (v428 < 0)
    operator delete(v427[0]);
  if (v434 < 0)
    operator delete(v433[0]);
  if (v438 < 0)
    operator delete(v437);
  if (v436 < 0)
    operator delete(v435[0]);
  if (v442 < 0)
    operator delete(v441[0]);
  if (v446 < 0)
    operator delete(v445);
  if (v444 < 0)
    operator delete(v443[0]);
  if (v450 < 0)
    operator delete(v449[0]);
  if (v454 < 0)
    operator delete(v453);
  if (v452 < 0)
    operator delete(v451[0]);
  if (v458 < 0)
    operator delete(v457[0]);
  if (v462 < 0)
    operator delete(v461);
  if (v460 < 0)
    operator delete(v459[0]);
  if (v466 < 0)
    operator delete(v465[0]);
  if (v470 < 0)
    operator delete(v469);
  if (v468 < 0)
    operator delete(v467[0]);
  if (v474 < 0)
    operator delete(v473[0]);
  if (v478 < 0)
    operator delete(v477);
  if (v476 < 0)
    operator delete(v475[0]);
  if (v482 < 0)
    operator delete(v481[0]);
  if (v486 < 0)
    operator delete(v485);
  if (v484 < 0)
    operator delete(v483[0]);
  if (v490 < 0)
    operator delete(v489[0]);
  if (v494 < 0)
    operator delete(v493);
  if (v492 < 0)
    operator delete(v491[0]);
  if (v498 < 0)
    operator delete(v497[0]);
  if (v502 < 0)
    operator delete(v501);
  if (v500 < 0)
    operator delete(v499[0]);
  if (v506 < 0)
    operator delete(v505[0]);
  if (v510 < 0)
    operator delete(v509);
  if (v508 < 0)
    operator delete(v507[0]);
  if (v514 < 0)
    operator delete(v513[0]);
  if (v518 < 0)
    operator delete(v517);
  if (v516 < 0)
    operator delete(v515[0]);
  if (v522 < 0)
    operator delete(v521[0]);
  if (v526 < 0)
    operator delete(v525);
  if (v524 < 0)
    operator delete(v523[0]);
  if (v530 < 0)
    operator delete(v529[0]);
  if (v534 < 0)
    operator delete(v533);
  if (v532 < 0)
    operator delete(v531[0]);
  if (v538 < 0)
    operator delete(v537[0]);
  if (v542 < 0)
    operator delete(v541);
  if (v540 < 0)
    operator delete(v539[0]);
  if (v546 < 0)
    operator delete(v545[0]);
  if (v550 < 0)
    operator delete(v549);
  if (v548 < 0)
    operator delete(v547[0]);
  if (v554 < 0)
    operator delete(v553[0]);
  if (v558 < 0)
    operator delete(v557);
  if (v556 < 0)
    operator delete(v555[0]);
  if (v562 < 0)
    operator delete(v561[0]);
  if (v566 < 0)
    operator delete(v565);
  if (v564 < 0)
    operator delete(v563[0]);
  if (v570 < 0)
    operator delete(v569[0]);
  if (v574 < 0)
    operator delete(v573);
  if (v572 < 0)
    operator delete(v571[0]);
  if (v578 < 0)
    operator delete(v577[0]);
  if (v582 < 0)
    operator delete(v581);
  if (v580 < 0)
    operator delete(v579[0]);
  if (v586 < 0)
    operator delete(v585[0]);
  if (v590 < 0)
    operator delete(v589);
  if (v588 < 0)
    operator delete(v587[0]);
  if (v594 < 0)
    operator delete(v593[0]);
  if (v598 < 0)
    operator delete(v597);
  if (v596 < 0)
    operator delete(v595[0]);
  if (v602 < 0)
    operator delete(v601[0]);
  if (v606 < 0)
    operator delete(v605);
  if (v604 < 0)
    operator delete(v603[0]);
  if (v610 < 0)
    operator delete(v609[0]);
  if (v614 < 0)
    operator delete(v613);
  if (v612 < 0)
    operator delete(v611[0]);
  if (v618 < 0)
    operator delete(v617[0]);
  if (v622 < 0)
    operator delete(v621);
  if (v620 < 0)
    operator delete(v619[0]);
  if (v626 < 0)
    operator delete(v625[0]);
  if (v630 < 0)
    operator delete(v629);
  if (v628 < 0)
    operator delete(v627[0]);
  if (v634 < 0)
    operator delete(v633[0]);
  if (v638 < 0)
    operator delete(v637);
  if (v636 < 0)
    operator delete(v635[0]);
  if (v642 < 0)
    operator delete(v641[0]);
  if (v646 < 0)
    operator delete(v645);
  if (v644 < 0)
    operator delete(v643[0]);
  if (v650 < 0)
    operator delete(v649[0]);
  if (v654 < 0)
    operator delete(v653);
  if (v652 < 0)
    operator delete(v651[0]);
  if (v658 < 0)
    operator delete(v657[0]);
  if (v662 < 0)
    operator delete(v661);
  if (v660 < 0)
    operator delete(v659[0]);
  if (v666 < 0)
    operator delete(v665[0]);
  if (v670 < 0)
    operator delete(v669);
  if (v668 < 0)
    operator delete(v667[0]);
  if (v674 < 0)
    operator delete(v673[0]);
  if (v678 < 0)
    operator delete(v677);
  if (v676 < 0)
    operator delete(v675[0]);
  if (v682 < 0)
    operator delete(v681[0]);
  if (v686 < 0)
    operator delete(v685);
  if (v684 < 0)
    operator delete(v683[0]);
  if (v690 < 0)
    operator delete(v689[0]);
  if (v694 < 0)
    operator delete(v693);
  if (v692 < 0)
    operator delete(v691[0]);
  if (v698 < 0)
    operator delete(v697[0]);
  if (v702 < 0)
    operator delete(v701);
  if (v700 < 0)
    operator delete(v699[0]);
  if (v706 < 0)
    operator delete(v705[0]);
  if (v710 < 0)
    operator delete(v709);
  if (v708 < 0)
    operator delete(v707[0]);
  if (v714 < 0)
    operator delete(v713[0]);
  if (v718 < 0)
    operator delete(v717);
  if (v716 < 0)
    operator delete(v715[0]);
  if (v722 < 0)
    operator delete(v721[0]);
  if (v726 < 0)
    operator delete(v725);
  if (v724 < 0)
    operator delete(v723[0]);
  if (v730 < 0)
    operator delete(v729[0]);
  if (v734 < 0)
    operator delete(v733);
  if (v732 < 0)
    operator delete(v731[0]);
  if (v738 < 0)
    operator delete(v737[0]);
  if (v742 < 0)
    operator delete(v741);
  if (v740 < 0)
    operator delete(v739[0]);
  if (v746 < 0)
    operator delete(v745[0]);
  if (v750 < 0)
    operator delete(v749);
  if (v748 < 0)
    operator delete(v747[0]);
  if (v754 < 0)
    operator delete(v753[0]);
  if (v758 < 0)
    operator delete(v757);
  if (v756 < 0)
    operator delete(v755[0]);
  if (v762 < 0)
    operator delete(v761[0]);
  if (v766 < 0)
    operator delete(v765);
  if (v764 < 0)
    operator delete(v763[0]);
  if (v770 < 0)
    operator delete(v769[0]);
  if (v774 < 0)
    operator delete(v773);
  if (v772 < 0)
    operator delete(v771[0]);
  if (v778 < 0)
    operator delete(v777[0]);
  if (v782 < 0)
    operator delete(v781);
  if (v780 < 0)
    operator delete(v779[0]);
  if (v786 < 0)
    operator delete(v785[0]);
  if (v790 < 0)
    operator delete(v789);
  if (v788 < 0)
    operator delete(v787[0]);
  if (v794 < 0)
    operator delete(v793[0]);
  if (v798 < 0)
    operator delete(v797);
  if (v796 < 0)
    operator delete(v795[0]);
  if (v802 < 0)
    operator delete(v801[0]);
  if (v806 < 0)
    operator delete(v805);
  if (v804 < 0)
    operator delete(v803[0]);
  if (v810 < 0)
    operator delete(v809[0]);
  if (v814 < 0)
    operator delete(v813);
  if (v812 < 0)
    operator delete(v811[0]);
  if (v818 < 0)
    operator delete(v817[0]);
  if (v822 < 0)
    operator delete(v821);
  if (v820 < 0)
    operator delete(v819[0]);
  if (v826 < 0)
    operator delete(v825[0]);
  if (v830 < 0)
    operator delete(v829);
  if (v828 < 0)
    operator delete(v827[0]);
  if (v834 < 0)
    operator delete(v833[0]);
  if (v838 < 0)
    operator delete(v837);
  if (v836 < 0)
    operator delete(v835[0]);
  if (v842 < 0)
    operator delete(v841[0]);
  if (v846 < 0)
    operator delete(v845);
  if (v844 < 0)
    operator delete(v843[0]);
  if (v850 < 0)
    operator delete(v849[0]);
  if (v854 < 0)
    operator delete(v853);
  if (v852 < 0)
    operator delete(v851[0]);
  if (v858 < 0)
    operator delete(v857[0]);
  if (v862 < 0)
    operator delete(v861);
  if (v860 < 0)
    operator delete(v859[0]);
  if (v866 < 0)
    operator delete(v865[0]);
  if (v870 < 0)
    operator delete(v869);
  if (v868 < 0)
    operator delete(v867[0]);
  if (v874 < 0)
    operator delete(v873[0]);
  if (v878 < 0)
    operator delete(v877);
  if (v876 < 0)
    operator delete(v875[0]);
  if (v882 < 0)
    operator delete(v881[0]);
  if (v886 < 0)
    operator delete(v885);
  if (v884 < 0)
    operator delete(v883[0]);
  if (v890 < 0)
    operator delete(v889[0]);
  if (v894 < 0)
    operator delete(v893);
  if (v892 < 0)
    operator delete(v891[0]);
  if (v898 < 0)
    operator delete(v897[0]);
  if (v902 < 0)
    operator delete(v901);
  if (v900 < 0)
    operator delete(v899[0]);
  if (v906 < 0)
    operator delete(v905[0]);
  if (v910 < 0)
    operator delete(v909);
  if (v908 < 0)
    operator delete(v907[0]);
  if (v914 < 0)
    operator delete(v913[0]);
  if (v918 < 0)
    operator delete(v917);
  if (v916 < 0)
    operator delete(v915[0]);
  if (v922 < 0)
    operator delete(v921[0]);
  if (v926 < 0)
    operator delete(v925);
  if (v924 < 0)
    operator delete(v923[0]);
  if (v930 < 0)
    operator delete(v929[0]);
  if (v934 < 0)
    operator delete(v933);
  if (v932 < 0)
    operator delete(v931[0]);
  if (v938 < 0)
    operator delete(v937[0]);
  if (v942 < 0)
    operator delete(v941);
  if (v940 < 0)
    operator delete(v939[0]);
  if (v946 < 0)
    operator delete(v945[0]);
  if (v950 < 0)
    operator delete(v949);
  if (v948 < 0)
    operator delete(v947[0]);
  if (v954 < 0)
    operator delete(v953[0]);
  if (v958 < 0)
    operator delete(v957);
  if (v956 < 0)
    operator delete(v955[0]);
  if (v962 < 0)
    operator delete(v961[0]);
  if (v966 < 0)
    operator delete(v965);
  if (v964 < 0)
    operator delete(v963[0]);
  if (v970 < 0)
    operator delete(v969[0]);
  if (v974 < 0)
    operator delete(v973);
  if (v972 < 0)
    operator delete(v971[0]);
  if (v978 < 0)
    operator delete(v977[0]);
  if (v982 < 0)
    operator delete(v981);
  if (v980 < 0)
    operator delete(v979[0]);
  if (v986 < 0)
    operator delete(v985[0]);
  if (v990 < 0)
    operator delete(v989);
  if (v988 < 0)
    operator delete(v987[0]);
  if (v994 < 0)
    operator delete(v993[0]);
  if (v998 < 0)
    operator delete(v997);
  if (v996 < 0)
    operator delete(v995[0]);
  if (v1002 < 0)
    operator delete(v1001[0]);
  if (v1006 < 0)
    operator delete(v1005);
  if (v1004 < 0)
    operator delete(v1003[0]);
  if (v1010 < 0)
    operator delete(v1009[0]);
  if (v1014 < 0)
    operator delete(v1013);
  if (v1012 < 0)
    operator delete(v1011[0]);
  if (v1018 < 0)
    operator delete(v1017[0]);
  if (v1022 < 0)
    operator delete(v1021);
  if (v1020 < 0)
    operator delete(v1019[0]);
  if (v1026 < 0)
    operator delete(v1025[0]);
  if (v1030 < 0)
    operator delete(v1029);
  if (v1028 < 0)
    operator delete(v1027[0]);
  if (v1034 < 0)
    operator delete(v1033[0]);
  if (v1038 < 0)
    operator delete(v1037);
  if (v1036 < 0)
    operator delete(v1035[0]);
  if (v1042 < 0)
    operator delete(v1041[0]);
  if (v1046 < 0)
    operator delete(v1045);
  if (v1044 < 0)
    operator delete(v1043[0]);
  if (v1050 < 0)
    operator delete(v1049[0]);
  if (v1054 < 0)
    operator delete(v1053);
  if (v1052 < 0)
    operator delete(v1051[0]);
  if (v1058 < 0)
    operator delete(v1057[0]);
  if (v1062 < 0)
    operator delete(v1061);
  if (v1060 < 0)
    operator delete(v1059[0]);
  if (v1066 < 0)
    operator delete(v1065[0]);
  if (v1070 < 0)
    operator delete(v1069);
  if (v1068 < 0)
    operator delete(v1067[0]);
  if (v1074 < 0)
    operator delete(v1073[0]);
  if (v1078 < 0)
    operator delete(v1077);
  if (v1076 < 0)
    operator delete(v1075[0]);
  if (v1082 < 0)
    operator delete(v1081[0]);
  if (v1086 < 0)
    operator delete(v1085);
  if (v1084 < 0)
    operator delete(v1083[0]);
  if (v1090 < 0)
    operator delete(v1089[0]);
  if (v1094 < 0)
    operator delete(v1093);
  if (v1092 < 0)
    operator delete(v1091[0]);
  if (v1098 < 0)
    operator delete(v1097[0]);
  if (v1102 < 0)
    operator delete(v1101);
  if (v1100 < 0)
    operator delete(v1099[0]);
  if (v1106 < 0)
    operator delete(v1105[0]);
  if (v1110 < 0)
    operator delete(v1109);
  if (v1108 < 0)
    operator delete(v1107[0]);
  if (v1114 < 0)
    operator delete(v1113[0]);
  if (v1118 < 0)
    operator delete(v1117);
  if (v1116 < 0)
    operator delete(v1115[0]);
  if (v1122 < 0)
    operator delete(v1121[0]);
  if (v1126 < 0)
    operator delete(v1125);
  if (v1124 < 0)
    operator delete(v1123[0]);
  if (v1130 < 0)
    operator delete(v1129[0]);
  if (v1134 < 0)
    operator delete(v1133);
  if (v1132 < 0)
    operator delete(v1131[0]);
  if (v1138 < 0)
    operator delete(v1137[0]);
  if (v1142 < 0)
    operator delete(v1141);
  if (v1140 < 0)
    operator delete(v1139[0]);
  if (v1146 < 0)
    operator delete(v1145[0]);
  if (v1150 < 0)
    operator delete(v1149);
  if (v1148 < 0)
    operator delete(v1147[0]);
  if (v1154 < 0)
    operator delete(v1153[0]);
  if (v1158 < 0)
    operator delete(v1157);
  if (v1156 < 0)
    operator delete(v1155[0]);
  if (v1162 < 0)
    operator delete(v1161[0]);
  if (v1166 < 0)
    operator delete(v1165);
  if (v1164 < 0)
    operator delete(v1163[0]);
  if (v1170 < 0)
    operator delete(v1169[0]);
  if (v1174 < 0)
    operator delete(v1173);
  if (v1172 < 0)
    operator delete(v1171[0]);
  if (v1178 < 0)
    operator delete(v1177[0]);
  if (v1182 < 0)
    operator delete(v1181);
  if (v1180 < 0)
    operator delete(v1179[0]);
  if (v1186 < 0)
    operator delete(v1185[0]);
  if (v1190 < 0)
    operator delete(v1189);
  if (v1188 < 0)
    operator delete(v1187[0]);
  if (v1194 < 0)
    operator delete(v1193[0]);
  if (v1198 < 0)
    operator delete(v1197);
  if (v1196 < 0)
    operator delete(v1195[0]);
  if (v1202 < 0)
    operator delete(v1201[0]);
  if (v1206 < 0)
    operator delete(v1205);
  if (v1204 < 0)
    operator delete(v1203[0]);
  if (v1210 < 0)
    operator delete(v1209[0]);
  if (v1214 < 0)
    operator delete(v1213);
  if (v1212 < 0)
    operator delete(v1211[0]);
  if (v1218 < 0)
    operator delete(v1217[0]);
  if (v1222 < 0)
    operator delete(v1221);
  if (v1220 < 0)
    operator delete(v1219[0]);
  if (v1226 < 0)
    operator delete(v1225[0]);
  if (v1230 < 0)
    operator delete(v1229);
  if (v1228 < 0)
    operator delete(v1227[0]);
  if (v1234 < 0)
    operator delete(v1233[0]);
  if (v1238 < 0)
    operator delete(v1237);
  if (v1236 < 0)
    operator delete(v1235[0]);
  if (v1242 < 0)
    operator delete(v1241[0]);
  if (v1246 < 0)
    operator delete(v1245);
  if (v1244 < 0)
    operator delete(v1243[0]);
  if (v1250 < 0)
    operator delete(v1249[0]);
  if (v1254 < 0)
    operator delete(v1253);
  if (v1252 < 0)
    operator delete(v1251[0]);
  if (v1258 < 0)
    operator delete(v1257[0]);
  if (v1262 < 0)
    operator delete(v1261);
  if (v1260 < 0)
    operator delete(v1259[0]);
  if (v1266 < 0)
    operator delete(v1265[0]);
  if (v1270 < 0)
    operator delete(v1269);
  if (v1268 < 0)
    operator delete(v1267[0]);
  if (v1274 < 0)
    operator delete(v1273[0]);
  if (v1278 < 0)
    operator delete(v1277);
  if (v1276 < 0)
    operator delete(v1275[0]);
  if (v1282 < 0)
    operator delete(v1281[0]);
  if (v1286 < 0)
    operator delete(v1285);
  if (v1284 < 0)
    operator delete(v1283[0]);
  if (v1290 < 0)
    operator delete(v1289[0]);
  if (v1294 < 0)
    operator delete(v1293);
  if (v1292 < 0)
    operator delete(v1291[0]);
  if (v1298 < 0)
    operator delete(v1297[0]);
  if (v1302 < 0)
    operator delete(v1301);
  if (v1300 < 0)
    operator delete(v1299[0]);
  if (v1306 < 0)
    operator delete(v1305[0]);
  if (v1310 < 0)
    operator delete(v1309);
  if (v1308 < 0)
    operator delete(v1307[0]);
  if (v1314 < 0)
    operator delete(v1313[0]);
  if (v1318 < 0)
    operator delete(v1317);
  if (v1316 < 0)
    operator delete(v1315[0]);
  if (v1322 < 0)
    operator delete(v1321[0]);
  if (v1326 < 0)
    operator delete(v1325);
  if (v1324 < 0)
    operator delete(v1323[0]);
  if (v1330 < 0)
    operator delete(v1329[0]);
  if (v1334 < 0)
    operator delete(v1333);
  if (v1332 < 0)
    operator delete(v1331[0]);
  if (v1338 < 0)
    operator delete(v1337[0]);
  if (v1342 < 0)
    operator delete(v1341);
  if (v1340 < 0)
    operator delete(v1339[0]);
  if (v1346 < 0)
    operator delete(v1345[0]);
  if (v1350 < 0)
    operator delete(v1349);
  if (v1348 < 0)
    operator delete(v1347[0]);
  if (v1354 < 0)
    operator delete(v1353[0]);
  if (v1358 < 0)
    operator delete(v1357);
  if (v1356 < 0)
    operator delete(v1355[0]);
  if (v1362 < 0)
    operator delete(v1361[0]);
  if (v1366 < 0)
    operator delete(v1365);
  if (v1364 < 0)
    operator delete(v1363[0]);
  if (v1370 < 0)
    operator delete(v1369[0]);
  if (v1374 < 0)
    operator delete(v1373);
  if (v1372 < 0)
    operator delete(v1371[0]);
  if (v1378 < 0)
    operator delete(v1377[0]);
  if (v1382 < 0)
    operator delete(v1381);
  if (v1380 < 0)
    operator delete(v1379[0]);
  if (v1386 < 0)
    operator delete(v1385[0]);
  if (v1390 < 0)
    operator delete(v1389);
  if (v1388 < 0)
    operator delete(v1387[0]);
  if (v1394 < 0)
    operator delete(v1393[0]);
  if (v1398 < 0)
    operator delete(v1397);
  if (v1396 < 0)
    operator delete(v1395[0]);
  if (v1402 < 0)
    operator delete(v1401[0]);
  if (v1406 < 0)
    operator delete(v1405);
  if (v1404 < 0)
    operator delete(v1403[0]);
  if (v1410 < 0)
    operator delete(v1409[0]);
  if (v1414 < 0)
    operator delete(v1413);
  if (v1412 < 0)
    operator delete(v1411[0]);
  if (v1418 < 0)
    operator delete(v1417[0]);
  if (v1422 < 0)
    operator delete(v1421);
  if (v1420 < 0)
    operator delete(v1419[0]);
  if (v1426 < 0)
    operator delete(v1425[0]);
  if (v1430 < 0)
    operator delete(v1429);
  if (v1428 < 0)
    operator delete(v1427[0]);
  if (v1434 < 0)
    operator delete(v1433[0]);
  if (v1438 < 0)
    operator delete(v1437);
  if (v1436 < 0)
    operator delete(v1435[0]);
  if (v1442 < 0)
    operator delete(v1441[0]);
  if (v1446 < 0)
    operator delete(v1445);
  if (v1444 < 0)
    operator delete(v1443[0]);
  if (v1450 < 0)
    operator delete(v1449[0]);
  if (v1454 < 0)
    operator delete(v1453);
  if (v1452 < 0)
    operator delete(v1451[0]);
  if (v1458 < 0)
    operator delete(v1457[0]);
  if (v1462 < 0)
    operator delete(v1461);
  if (v1460 < 0)
    operator delete(v1459[0]);
  if (v1466 < 0)
    operator delete(v1465[0]);
  if (v1470 < 0)
    operator delete(v1469);
  if (v1468 < 0)
    operator delete(v1467[0]);
  if (v1474 < 0)
    operator delete(v1473[0]);
  if (v1478 < 0)
    operator delete(v1477);
  if (v1476 < 0)
    operator delete(v1475[0]);
  if (v1482 < 0)
    operator delete(v1481[0]);
  if (v1486 < 0)
    operator delete(v1485);
  if (v1484 < 0)
    operator delete(v1483[0]);
  if (v1490 < 0)
    operator delete(v1489[0]);
  if (v1494 < 0)
    operator delete(v1493);
  if (v1492 < 0)
    operator delete(v1491[0]);
  if (v1498 < 0)
    operator delete(v1497[0]);
  if (v1502 < 0)
    operator delete(v1501);
  if (v1500 < 0)
    operator delete(v1499[0]);
  if (v1506 < 0)
    operator delete(v1505[0]);
  if (v1510 < 0)
    operator delete(v1509);
  if (v1508 < 0)
    operator delete(v1507[0]);
  if (v1514 < 0)
    operator delete(v1513[0]);
  if (v1518 < 0)
    operator delete(v1517);
  if (v1516 < 0)
    operator delete(v1515[0]);
  if (v1522 < 0)
    operator delete(v1521[0]);
  if (v1526 < 0)
    operator delete(v1525);
  if (v1524 < 0)
    operator delete(v1523[0]);
  if (v1530 < 0)
    operator delete(v1529[0]);
  if (v1534 < 0)
    operator delete(v1533);
  if (v1532 < 0)
    operator delete(v1531[0]);
  if (v1538 < 0)
    operator delete(v1537[0]);
  if (v1542 < 0)
    operator delete(v1541);
  if (v1540 < 0)
    operator delete(v1539[0]);
  if (v1546 < 0)
    operator delete(v1545[0]);
  if (v1550 < 0)
    operator delete(v1549);
  if (v1548 < 0)
    operator delete(v1547[0]);
  if (v1554 < 0)
    operator delete(v1553[0]);
  if (v1558 < 0)
    operator delete(v1557);
  if (v1556 < 0)
    operator delete(v1555[0]);
  if (v1562 < 0)
    operator delete(v1561[0]);
  if (v1566 < 0)
    operator delete(v1565);
  if (v1564 < 0)
    operator delete(v1563[0]);
  if (v1570 < 0)
    operator delete(v1569[0]);
  if (v1574 < 0)
    operator delete(v1573);
  if (v1572 < 0)
    operator delete(v1571[0]);
  if (v1578 < 0)
    operator delete(v1577[0]);
  if (v1582 < 0)
    operator delete(v1581);
  if (v1580 < 0)
    operator delete(v1579[0]);
  if (v1586 < 0)
    operator delete(v1585[0]);
  if (v1590 < 0)
    operator delete(v1589);
  if (v1588 < 0)
    operator delete(v1587[0]);
  if (v1594 < 0)
    operator delete(v1593[0]);
  if (v1598 < 0)
    operator delete(v1597);
  if (v1596 < 0)
    operator delete(v1595[0]);
  if (v1602 < 0)
    operator delete(v1601[0]);
  if (v1606 < 0)
    operator delete(v1605);
  if (v1604 < 0)
    operator delete(v1603[0]);
  if (v1610 < 0)
    operator delete(v1609[0]);
  if (v1614 < 0)
    operator delete(v1613);
  if (v1612 < 0)
    operator delete(v1611[0]);
  if (v1618 < 0)
    operator delete(v1617[0]);
  if (v1622 < 0)
    operator delete(v1621);
  if (v1620 < 0)
    operator delete(v1619[0]);
  if (v1626 < 0)
    operator delete(v1625[0]);
  if (v1630 < 0)
    operator delete(v1629);
  if (v1628 < 0)
    operator delete(v1627[0]);
  if (v1634 < 0)
    operator delete(v1633[0]);
  if (v1638 < 0)
    operator delete(v1637);
  if (v1636 < 0)
    operator delete(v1635[0]);
  if (v1642 < 0)
    operator delete(v1641[0]);
  if (v1646 < 0)
    operator delete(v1645);
  if (v1644 < 0)
    operator delete(v1643[0]);
  if (v1650 < 0)
    operator delete(v1649[0]);
  if (v1654 < 0)
    operator delete(v1653);
  if (v1652 < 0)
    operator delete(v1651[0]);
  if (v1658 < 0)
    operator delete(v1657[0]);
  if (v1662 < 0)
    operator delete(v1661);
  if (v1660 < 0)
    operator delete(v1659[0]);
  if (v1666 < 0)
    operator delete(v1665[0]);
  if (v1670 < 0)
    operator delete(v1669);
  if (v1668 < 0)
    operator delete(v1667[0]);
  if (v1674 < 0)
    operator delete(v1673[0]);
  if (v1678 < 0)
    operator delete(v1677);
  if (v1676 < 0)
    operator delete(v1675[0]);
  if (v1682 < 0)
    operator delete(v1681[0]);
  if (v1686 < 0)
    operator delete(v1685);
  if (v1684 < 0)
    operator delete(v1683[0]);
  if (v1690 < 0)
    operator delete(v1689[0]);
  if (v1694 < 0)
    operator delete(v1693);
  if (v1692 < 0)
    operator delete(v1691[0]);
  if (v1698 < 0)
    operator delete(v1697[0]);
  if (v1702 < 0)
    operator delete(v1701);
  if (v1700 < 0)
    operator delete(v1699[0]);
  if (v1706 < 0)
    operator delete(v1705[0]);
  if (v1710 < 0)
    operator delete(v1709);
  if (v1708 < 0)
    operator delete(v1707[0]);
  if (v1714 < 0)
    operator delete(v1713[0]);
  if (v1718 < 0)
    operator delete(v1717);
  if (v1716 < 0)
    operator delete(v1715[0]);
  if (v1722 < 0)
    operator delete(v1721[0]);
  if (v1726 < 0)
    operator delete(v1725);
  if (v1724 < 0)
    operator delete(v1723[0]);
  if (v1730 < 0)
    operator delete(v1729[0]);
  if (v1734 < 0)
    operator delete(v1733);
  if (v1732 < 0)
    operator delete(v1731[0]);
  if (v1738 < 0)
    operator delete(v1737[0]);
  if (v1742 < 0)
    operator delete(v1741);
  if (v1740 < 0)
    operator delete(v1739[0]);
  if (v1746 < 0)
    operator delete(v1745[0]);
  if (v1750 < 0)
    operator delete(v1749);
  if (v1748 < 0)
    operator delete(v1747[0]);
  if (v1754 < 0)
    operator delete(v1753[0]);
  if (v1758 < 0)
    operator delete(v1757);
  if (v1756 < 0)
    operator delete(v1755[0]);
  if (v1762 < 0)
    operator delete(v1761[0]);
  if (v1766 < 0)
    operator delete(v1765);
  if (v1764 < 0)
    operator delete(v1763[0]);
  if (v1770 < 0)
    operator delete(v1769[0]);
  if (v1774 < 0)
    operator delete(v1773);
  if (v1772 < 0)
    operator delete(v1771[0]);
  if (v1778 < 0)
    operator delete(v1777[0]);
  if (v1782 < 0)
    operator delete(v1781);
  if (v1780 < 0)
    operator delete(v1779[0]);
  if (v1786 < 0)
    operator delete(v1785[0]);
  if (v1790 < 0)
    operator delete(v1789);
  if (v1788 < 0)
    operator delete(v1787[0]);
  if (v1794 < 0)
    operator delete(v1793[0]);
  if (v1798 < 0)
    operator delete(v1797);
  if (v1796 < 0)
    operator delete(v1795[0]);
  if (v1802 < 0)
    operator delete(v1801[0]);
  if (v1806 < 0)
    operator delete(v1805);
  if (v1804 < 0)
    operator delete(v1803[0]);
  if (v1810 < 0)
    operator delete(v1809[0]);
  if (v1814 < 0)
    operator delete(v1813);
  if (v1812 < 0)
    operator delete(v1811[0]);
  if (v1818 < 0)
    operator delete(v1817[0]);
  if (v1822 < 0)
    operator delete(v1821);
  if (v1820 < 0)
    operator delete(v1819[0]);
  if (v1826 < 0)
    operator delete(v1825[0]);
  if (v1830 < 0)
    operator delete(v1829);
  if (v1828 < 0)
    operator delete(v1827[0]);
  if (v1834 < 0)
    operator delete(v1833[0]);
  if (v1838 < 0)
    operator delete(v1837);
  if (v1836 < 0)
    operator delete(v1835[0]);
  if (v1842 < 0)
    operator delete(v1841[0]);
  if (v1846 < 0)
    operator delete(v1845);
  if (v1844 < 0)
    operator delete(v1843[0]);
  if (v1850 < 0)
    operator delete(v1849[0]);
  if (v1854 < 0)
    operator delete(v1853);
  if (v1852 < 0)
    operator delete(v1851[0]);
  if (v1858 < 0)
    operator delete(v1857[0]);
  if (v1862 < 0)
    operator delete(v1861);
  if (v1860 < 0)
    operator delete(v1859[0]);
  if (v1866 < 0)
    operator delete(v1865[0]);
  if (v1870 < 0)
    operator delete(v1869);
  if (v1868 < 0)
    operator delete(v1867[0]);
  if (v1874 < 0)
    operator delete(v1873[0]);
  if (v1878 < 0)
    operator delete(v1877);
  if (v1876 < 0)
    operator delete(v1875[0]);
  if (v1882 < 0)
    operator delete(v1881[0]);
  if (v1886 < 0)
    operator delete(v1885);
  if (v1884 < 0)
    operator delete(v1883[0]);
  if (v1890 < 0)
    operator delete(v1889[0]);
  if (v1894 < 0)
    operator delete(v1893);
  if (v1892 < 0)
    operator delete(v1891[0]);
  if (v1898 < 0)
    operator delete(v1897[0]);
  if (v1902 < 0)
    operator delete(v1901);
  if (v1900 < 0)
    operator delete(v1899[0]);
  if (v1906 < 0)
    operator delete(v1905[0]);
  if (v1910 < 0)
    operator delete(v1909);
  if (v1908 < 0)
    operator delete(v1907[0]);
  if (v1914 < 0)
    operator delete(v1913[0]);
  if (v1918 < 0)
    operator delete(v1917);
  if (v1916 < 0)
    operator delete(v1915[0]);
  if (v1922 < 0)
    operator delete(v1921[0]);
  if (v1926 < 0)
    operator delete(v1925);
  if (v1924 < 0)
    operator delete(v1923[0]);
  if (v1930 < 0)
    operator delete(v1929[0]);
  if (v1934 < 0)
    operator delete(v1933);
  if (v1932 < 0)
    operator delete(v1931[0]);
  if (v1938 < 0)
    operator delete(v1937[0]);
  if (v1942 < 0)
    operator delete(v1941);
  if (v1940 < 0)
    operator delete(v1939[0]);
  if (v1946 < 0)
    operator delete(v1945[0]);
  return __cxa_atexit((void (*)(void *))sub_10036ED70, qword_10085FD08, (void *)&_mh_execute_header);
}

void sub_1003792C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,int a58,__int16 a59,char a60,char a61,char a62,uint64_t a63)
{
  void *a69;
  char a72;
  char a73;
  void *a74;
  char a75;
  char a76;
  uint64_t v76;
  char *v77;
  char *v78;
  char *v79;
  char *v80;
  uint64_t v82;
  uint64_t v83;

  v82 = -19440;
  v83 = v76;
  do
  {
    v83 = sub_10036ED20(v83) - 80;
    v82 += 80;
  }
  while (v82);
  sub_1001D5744((uint64_t)&a10);
  if (a22 < 0)
    operator delete(__p);
  sub_1001D5744((uint64_t)&a23);
  if (a35 < 0)
    operator delete(a30);
  sub_1001D5744((uint64_t)&a36);
  if (a48 < 0)
    operator delete(a43);
  sub_1001D5744((uint64_t)&a49);
  if (a61 < 0)
    operator delete(a56);
  sub_1001D5744((uint64_t)&a62);
  if (a72 < 0)
    operator delete(a69);
  sub_1001D5744((uint64_t)&a73);
  if (a75 < 0)
    operator delete(a74);
  sub_1001D5744((uint64_t)&a76);
  if (SLOBYTE(STACK[0x237]) < 0)
    operator delete((void *)STACK[0x220]);
  sub_1001D5744((uint64_t)&STACK[0x238]);
  if (SLOBYTE(STACK[0x287]) < 0)
    operator delete((void *)STACK[0x270]);
  sub_1001D5744((uint64_t)&STACK[0x288]);
  if (SLOBYTE(STACK[0x2D7]) < 0)
    operator delete((void *)STACK[0x2C0]);
  sub_1001D5744((uint64_t)&STACK[0x2D8]);
  if (SLOBYTE(STACK[0x327]) < 0)
    operator delete((void *)STACK[0x310]);
  sub_1001D5744((uint64_t)&STACK[0x328]);
  if (SLOBYTE(STACK[0x377]) < 0)
    operator delete((void *)STACK[0x360]);
  sub_1001D5744((uint64_t)&STACK[0x378]);
  if (SLOBYTE(STACK[0x3C7]) < 0)
    operator delete((void *)STACK[0x3B0]);
  sub_1001D5744((uint64_t)&STACK[0x3C8]);
  if (SLOBYTE(STACK[0x417]) < 0)
    operator delete((void *)STACK[0x400]);
  sub_1001D5744((uint64_t)&STACK[0x418]);
  if (SLOBYTE(STACK[0x467]) < 0)
    operator delete((void *)STACK[0x450]);
  sub_1001D5744((uint64_t)&STACK[0x468]);
  if (SLOBYTE(STACK[0x4B7]) < 0)
    operator delete((void *)STACK[0x4A0]);
  sub_1001D5744((uint64_t)&STACK[0x4B8]);
  if (SLOBYTE(STACK[0x507]) < 0)
    operator delete((void *)STACK[0x4F0]);
  sub_1001D5744((uint64_t)&STACK[0x508]);
  if (SLOBYTE(STACK[0x557]) < 0)
    operator delete((void *)STACK[0x540]);
  sub_1001D5744((uint64_t)&STACK[0x558]);
  if (SLOBYTE(STACK[0x5A7]) < 0)
    operator delete((void *)STACK[0x590]);
  sub_1001D5744((uint64_t)&STACK[0x5A8]);
  if (SLOBYTE(STACK[0x5F7]) < 0)
    operator delete((void *)STACK[0x5E0]);
  sub_1001D5744((uint64_t)&STACK[0x5F8]);
  if (SLOBYTE(STACK[0x647]) < 0)
    operator delete((void *)STACK[0x630]);
  sub_1001D5744((uint64_t)&STACK[0x648]);
  if (SLOBYTE(STACK[0x697]) < 0)
    operator delete((void *)STACK[0x680]);
  sub_1001D5744((uint64_t)&STACK[0x698]);
  if (SLOBYTE(STACK[0x6E7]) < 0)
    operator delete((void *)STACK[0x6D0]);
  sub_1001D5744((uint64_t)&STACK[0x6E8]);
  if (SLOBYTE(STACK[0x737]) < 0)
    operator delete((void *)STACK[0x720]);
  sub_1001D5744((uint64_t)&STACK[0x738]);
  if (SLOBYTE(STACK[0x787]) < 0)
    operator delete((void *)STACK[0x770]);
  sub_1001D5744((uint64_t)&STACK[0x788]);
  if (SLOBYTE(STACK[0x7D7]) < 0)
    operator delete((void *)STACK[0x7C0]);
  sub_1001D5744((uint64_t)&STACK[0x7D8]);
  if (SLOBYTE(STACK[0x827]) < 0)
    operator delete((void *)STACK[0x810]);
  sub_1001D5744((uint64_t)&STACK[0x828]);
  if (SLOBYTE(STACK[0x877]) < 0)
    operator delete((void *)STACK[0x860]);
  sub_1001D5744((uint64_t)&STACK[0x878]);
  if (SLOBYTE(STACK[0x8C7]) < 0)
    operator delete((void *)STACK[0x8B0]);
  sub_1001D5744((uint64_t)&STACK[0x8C8]);
  if (SLOBYTE(STACK[0x917]) < 0)
    operator delete((void *)STACK[0x900]);
  sub_1001D5744((uint64_t)&STACK[0x918]);
  if (SLOBYTE(STACK[0x967]) < 0)
    operator delete((void *)STACK[0x950]);
  sub_1001D5744((uint64_t)&STACK[0x968]);
  if (SLOBYTE(STACK[0x9B7]) < 0)
    operator delete((void *)STACK[0x9A0]);
  sub_1001D5744((uint64_t)&STACK[0x9B8]);
  if (SLOBYTE(STACK[0xA07]) < 0)
    operator delete((void *)STACK[0x9F0]);
  sub_1001D5744((uint64_t)&STACK[0xA08]);
  if (SLOBYTE(STACK[0xA57]) < 0)
    operator delete((void *)STACK[0xA40]);
  sub_1001D5744((uint64_t)&STACK[0xA58]);
  if (SLOBYTE(STACK[0xAA7]) < 0)
    operator delete((void *)STACK[0xA90]);
  sub_1001D5744((uint64_t)&STACK[0xAA8]);
  if (SLOBYTE(STACK[0xAF7]) < 0)
    operator delete((void *)STACK[0xAE0]);
  sub_1001D5744((uint64_t)&STACK[0xAF8]);
  if (SLOBYTE(STACK[0xB47]) < 0)
    operator delete((void *)STACK[0xB30]);
  sub_1001D5744((uint64_t)&STACK[0xB48]);
  if (SLOBYTE(STACK[0xB97]) < 0)
    operator delete((void *)STACK[0xB80]);
  sub_1001D5744((uint64_t)&STACK[0xB98]);
  if (SLOBYTE(STACK[0xBE7]) < 0)
    operator delete((void *)STACK[0xBD0]);
  sub_1001D5744((uint64_t)&STACK[0xBE8]);
  if (SLOBYTE(STACK[0xC37]) < 0)
    operator delete((void *)STACK[0xC20]);
  sub_1001D5744((uint64_t)&STACK[0xC38]);
  if (SLOBYTE(STACK[0xC87]) < 0)
    operator delete((void *)STACK[0xC70]);
  sub_1001D5744((uint64_t)&STACK[0xC88]);
  if (SLOBYTE(STACK[0xCD7]) < 0)
    operator delete((void *)STACK[0xCC0]);
  sub_1001D5744((uint64_t)&STACK[0xCD8]);
  if (SLOBYTE(STACK[0xD27]) < 0)
    operator delete((void *)STACK[0xD10]);
  sub_1001D5744((uint64_t)&STACK[0xD28]);
  if (SLOBYTE(STACK[0xD77]) < 0)
    operator delete((void *)STACK[0xD60]);
  sub_1001D5744((uint64_t)&STACK[0xD78]);
  if (SLOBYTE(STACK[0xDC7]) < 0)
    operator delete((void *)STACK[0xDB0]);
  sub_1001D5744((uint64_t)&STACK[0xDC8]);
  if (SLOBYTE(STACK[0xE17]) < 0)
    operator delete((void *)STACK[0xE00]);
  sub_1001D5744((uint64_t)&STACK[0xE18]);
  if (SLOBYTE(STACK[0xE67]) < 0)
    operator delete((void *)STACK[0xE50]);
  sub_1001D5744((uint64_t)&STACK[0xE68]);
  if (SLOBYTE(STACK[0xEB7]) < 0)
    operator delete((void *)STACK[0xEA0]);
  sub_1001D5744((uint64_t)&STACK[0xEB8]);
  if (SLOBYTE(STACK[0xF07]) < 0)
    operator delete((void *)STACK[0xEF0]);
  sub_1001D5744((uint64_t)&STACK[0xF08]);
  if (SLOBYTE(STACK[0xF57]) < 0)
    operator delete((void *)STACK[0xF40]);
  sub_1001D5744((uint64_t)&STACK[0xF58]);
  if (v80[79] < 0)
    operator delete((void *)STACK[0xF90]);
  sub_1001D5744((uint64_t)&STACK[0xFA8]);
  if (v80[159] < 0)
    operator delete((void *)STACK[0xFE0]);
  sub_1001D5744((uint64_t)&STACK[0xFF8]);
  if (v80[239] < 0)
    operator delete((void *)STACK[0x1030]);
  sub_1001D5744((uint64_t)&STACK[0x1048]);
  if (v80[319] < 0)
    operator delete((void *)STACK[0x1080]);
  sub_1001D5744((uint64_t)&STACK[0x1098]);
  if (v80[399] < 0)
    operator delete((void *)STACK[0x10D0]);
  sub_1001D5744((uint64_t)&STACK[0x10E8]);
  if (v80[479] < 0)
    operator delete((void *)STACK[0x1120]);
  sub_1001D5744((uint64_t)&STACK[0x1138]);
  if (v80[559] < 0)
    operator delete((void *)STACK[0x1170]);
  sub_1001D5744((uint64_t)&STACK[0x1188]);
  if (v80[639] < 0)
    operator delete((void *)STACK[0x11C0]);
  sub_1001D5744((uint64_t)&STACK[0x11D8]);
  if (v80[719] < 0)
    operator delete((void *)STACK[0x1210]);
  sub_1001D5744((uint64_t)&STACK[0x1228]);
  if (v80[799] < 0)
    operator delete((void *)STACK[0x1260]);
  sub_1001D5744((uint64_t)&STACK[0x1278]);
  if (v80[879] < 0)
    operator delete((void *)STACK[0x12B0]);
  sub_1001D5744((uint64_t)&STACK[0x12C8]);
  if (v80[959] < 0)
    operator delete((void *)STACK[0x1300]);
  sub_1001D5744((uint64_t)&STACK[0x1318]);
  if (v80[1039] < 0)
    operator delete((void *)STACK[0x1350]);
  sub_1001D5744((uint64_t)&STACK[0x1368]);
  if (v80[1119] < 0)
    operator delete((void *)STACK[0x13A0]);
  sub_1001D5744((uint64_t)&STACK[0x13B8]);
  if (v80[1199] < 0)
    operator delete((void *)STACK[0x13F0]);
  sub_1001D5744((uint64_t)&STACK[0x1408]);
  if (v80[1279] < 0)
    operator delete((void *)STACK[0x1440]);
  sub_1001D5744((uint64_t)&STACK[0x1458]);
  if (v80[1359] < 0)
    operator delete((void *)STACK[0x1490]);
  sub_1001D5744((uint64_t)&STACK[0x14A8]);
  if (v80[1439] < 0)
    operator delete((void *)STACK[0x14E0]);
  sub_1001D5744((uint64_t)&STACK[0x14F8]);
  if (v80[1519] < 0)
    operator delete((void *)STACK[0x1530]);
  sub_1001D5744((uint64_t)&STACK[0x1548]);
  if (v80[1599] < 0)
    operator delete((void *)STACK[0x1580]);
  sub_1001D5744((uint64_t)&STACK[0x1598]);
  if (v80[1679] < 0)
    operator delete((void *)STACK[0x15D0]);
  sub_1001D5744((uint64_t)&STACK[0x15E8]);
  if (v80[1759] < 0)
    operator delete((void *)STACK[0x1620]);
  sub_1001D5744((uint64_t)&STACK[0x1638]);
  if (v80[1839] < 0)
    operator delete((void *)STACK[0x1670]);
  sub_1001D5744((uint64_t)&STACK[0x1688]);
  if (v80[1919] < 0)
    operator delete((void *)STACK[0x16C0]);
  sub_1001D5744((uint64_t)&STACK[0x16D8]);
  if (v80[1999] < 0)
    operator delete((void *)STACK[0x1710]);
  sub_1001D5744((uint64_t)&STACK[0x1728]);
  if (v80[2079] < 0)
    operator delete((void *)STACK[0x1760]);
  sub_1001D5744((uint64_t)&STACK[0x1778]);
  if (v80[2159] < 0)
    operator delete((void *)STACK[0x17B0]);
  sub_1001D5744((uint64_t)&STACK[0x17C8]);
  if (v80[2239] < 0)
    operator delete((void *)STACK[0x1800]);
  sub_1001D5744((uint64_t)&STACK[0x1818]);
  if (v80[2319] < 0)
    operator delete((void *)STACK[0x1850]);
  sub_1001D5744((uint64_t)&STACK[0x1868]);
  if (v80[2399] < 0)
    operator delete((void *)STACK[0x18A0]);
  sub_1001D5744((uint64_t)&STACK[0x18B8]);
  if (v80[2479] < 0)
    operator delete((void *)STACK[0x18F0]);
  sub_1001D5744((uint64_t)&STACK[0x1908]);
  if (v80[2559] < 0)
    operator delete((void *)STACK[0x1940]);
  sub_1001D5744((uint64_t)&STACK[0x1958]);
  if (v80[2639] < 0)
    operator delete((void *)STACK[0x1990]);
  sub_1001D5744((uint64_t)&STACK[0x19A8]);
  if (v80[2719] < 0)
    operator delete((void *)STACK[0x19E0]);
  sub_1001D5744((uint64_t)&STACK[0x19F8]);
  if (v80[2799] < 0)
    operator delete((void *)STACK[0x1A30]);
  sub_1001D5744((uint64_t)&STACK[0x1A48]);
  if (v80[2879] < 0)
    operator delete((void *)STACK[0x1A80]);
  sub_1001D5744((uint64_t)&STACK[0x1A98]);
  if (v80[2959] < 0)
    operator delete((void *)STACK[0x1AD0]);
  sub_1001D5744((uint64_t)&STACK[0x1AE8]);
  if (v80[3039] < 0)
    operator delete((void *)STACK[0x1B20]);
  sub_1001D5744((uint64_t)&STACK[0x1B38]);
  if (v80[3119] < 0)
    operator delete((void *)STACK[0x1B70]);
  sub_1001D5744((uint64_t)&STACK[0x1B88]);
  if (v80[3199] < 0)
    operator delete((void *)STACK[0x1BC0]);
  sub_1001D5744((uint64_t)&STACK[0x1BD8]);
  if (v80[3279] < 0)
    operator delete((void *)STACK[0x1C10]);
  sub_1001D5744((uint64_t)&STACK[0x1C28]);
  if (v80[3359] < 0)
    operator delete((void *)STACK[0x1C60]);
  sub_1001D5744((uint64_t)&STACK[0x1C78]);
  if (v80[3439] < 0)
    operator delete((void *)STACK[0x1CB0]);
  sub_1001D5744((uint64_t)&STACK[0x1CC8]);
  if (v80[3519] < 0)
    operator delete((void *)STACK[0x1D00]);
  sub_1001D5744((uint64_t)&STACK[0x1D18]);
  if (v80[3599] < 0)
    operator delete((void *)STACK[0x1D50]);
  sub_1001D5744((uint64_t)&STACK[0x1D68]);
  if (v80[3679] < 0)
    operator delete((void *)STACK[0x1DA0]);
  sub_1001D5744((uint64_t)&STACK[0x1DB8]);
  if (v80[3759] < 0)
    operator delete((void *)STACK[0x1DF0]);
  sub_1001D5744((uint64_t)&STACK[0x1E08]);
  if (v80[3839] < 0)
    operator delete((void *)STACK[0x1E40]);
  sub_1001D5744((uint64_t)&STACK[0x1E58]);
  if (v80[3919] < 0)
    operator delete((void *)STACK[0x1E90]);
  sub_1001D5744((uint64_t)&STACK[0x1EA8]);
  if (v80[3999] < 0)
    operator delete((void *)STACK[0x1EE0]);
  sub_1001D5744((uint64_t)&STACK[0x1EF8]);
  if (v80[4079] < 0)
    operator delete((void *)STACK[0x1F30]);
  sub_1001D5744((uint64_t)&STACK[0x1F48]);
  if (v79[79] < 0)
    operator delete((void *)STACK[0x1F80]);
  sub_1001D5744((uint64_t)&STACK[0x1F98]);
  if (v79[159] < 0)
    operator delete((void *)STACK[0x1FD0]);
  sub_1001D5744((uint64_t)&STACK[0x1FE8]);
  if (v79[239] < 0)
    operator delete((void *)STACK[0x2020]);
  sub_1001D5744((uint64_t)&STACK[0x2038]);
  if (v79[319] < 0)
    operator delete((void *)STACK[0x2070]);
  sub_1001D5744((uint64_t)&STACK[0x2088]);
  if (v79[399] < 0)
    operator delete((void *)STACK[0x20C0]);
  sub_1001D5744((uint64_t)&STACK[0x20D8]);
  if (v79[479] < 0)
    operator delete((void *)STACK[0x2110]);
  sub_1001D5744((uint64_t)&STACK[0x2128]);
  if (v79[559] < 0)
    operator delete((void *)STACK[0x2160]);
  sub_1001D5744((uint64_t)&STACK[0x2178]);
  if (v79[639] < 0)
    operator delete((void *)STACK[0x21B0]);
  sub_1001D5744((uint64_t)&STACK[0x21C8]);
  if (v79[719] < 0)
    operator delete((void *)STACK[0x2200]);
  sub_1001D5744((uint64_t)&STACK[0x2218]);
  if (v79[799] < 0)
    operator delete((void *)STACK[0x2250]);
  sub_1001D5744((uint64_t)&STACK[0x2268]);
  if (v79[879] < 0)
    operator delete((void *)STACK[0x22A0]);
  sub_1001D5744((uint64_t)&STACK[0x22B8]);
  if (v79[959] < 0)
    operator delete((void *)STACK[0x22F0]);
  sub_1001D5744((uint64_t)&STACK[0x2308]);
  if (v79[1039] < 0)
    operator delete((void *)STACK[0x2340]);
  sub_1001D5744((uint64_t)&STACK[0x2358]);
  if (v79[1119] < 0)
    operator delete((void *)STACK[0x2390]);
  sub_1001D5744((uint64_t)&STACK[0x23A8]);
  if (v79[1199] < 0)
    operator delete((void *)STACK[0x23E0]);
  sub_1001D5744((uint64_t)&STACK[0x23F8]);
  if (v79[1279] < 0)
    operator delete((void *)STACK[0x2430]);
  sub_1001D5744((uint64_t)&STACK[0x2448]);
  if (v79[1359] < 0)
    operator delete((void *)STACK[0x2480]);
  sub_1001D5744((uint64_t)&STACK[0x2498]);
  if (v79[1439] < 0)
    operator delete((void *)STACK[0x24D0]);
  sub_1001D5744((uint64_t)&STACK[0x24E8]);
  if (v79[1519] < 0)
    operator delete((void *)STACK[0x2520]);
  sub_1001D5744((uint64_t)&STACK[0x2538]);
  if (v79[1599] < 0)
    operator delete((void *)STACK[0x2570]);
  sub_1001D5744((uint64_t)&STACK[0x2588]);
  if (v79[1679] < 0)
    operator delete((void *)STACK[0x25C0]);
  sub_1001D5744((uint64_t)&STACK[0x25D8]);
  if (v79[1759] < 0)
    operator delete((void *)STACK[0x2610]);
  sub_1001D5744((uint64_t)&STACK[0x2628]);
  if (v79[1839] < 0)
    operator delete((void *)STACK[0x2660]);
  sub_1001D5744((uint64_t)&STACK[0x2678]);
  if (v79[1919] < 0)
    operator delete((void *)STACK[0x26B0]);
  sub_1001D5744((uint64_t)&STACK[0x26C8]);
  if (v79[1999] < 0)
    operator delete((void *)STACK[0x2700]);
  sub_1001D5744((uint64_t)&STACK[0x2718]);
  if (v79[2079] < 0)
    operator delete((void *)STACK[0x2750]);
  sub_1001D5744((uint64_t)&STACK[0x2768]);
  if (v79[2159] < 0)
    operator delete((void *)STACK[0x27A0]);
  sub_1001D5744((uint64_t)&STACK[0x27B8]);
  if (v79[2239] < 0)
    operator delete((void *)STACK[0x27F0]);
  sub_1001D5744((uint64_t)&STACK[0x2808]);
  if (v79[2319] < 0)
    operator delete((void *)STACK[0x2840]);
  sub_1001D5744((uint64_t)&STACK[0x2858]);
  if (v79[2399] < 0)
    operator delete((void *)STACK[0x2890]);
  sub_1001D5744((uint64_t)&STACK[0x28A8]);
  if (v79[2479] < 0)
    operator delete((void *)STACK[0x28E0]);
  sub_1001D5744((uint64_t)&STACK[0x28F8]);
  if (v79[2559] < 0)
    operator delete((void *)STACK[0x2930]);
  sub_1001D5744((uint64_t)&STACK[0x2948]);
  if (v79[2639] < 0)
    operator delete((void *)STACK[0x2980]);
  sub_1001D5744((uint64_t)&STACK[0x2998]);
  if (v79[2719] < 0)
    operator delete((void *)STACK[0x29D0]);
  sub_1001D5744((uint64_t)&STACK[0x29E8]);
  if (v79[2799] < 0)
    operator delete((void *)STACK[0x2A20]);
  sub_1001D5744((uint64_t)&STACK[0x2A38]);
  if (v79[2879] < 0)
    operator delete((void *)STACK[0x2A70]);
  sub_1001D5744((uint64_t)&STACK[0x2A88]);
  if (v79[2959] < 0)
    operator delete((void *)STACK[0x2AC0]);
  sub_1001D5744((uint64_t)&STACK[0x2AD8]);
  if (v79[3039] < 0)
    operator delete((void *)STACK[0x2B10]);
  sub_1001D5744((uint64_t)&STACK[0x2B28]);
  if (v79[3119] < 0)
    operator delete((void *)STACK[0x2B60]);
  sub_1001D5744((uint64_t)&STACK[0x2B78]);
  if (v79[3199] < 0)
    operator delete((void *)STACK[0x2BB0]);
  sub_1001D5744((uint64_t)&STACK[0x2BC8]);
  if (v79[3279] < 0)
    operator delete((void *)STACK[0x2C00]);
  sub_1001D5744((uint64_t)&STACK[0x2C18]);
  if (v79[3359] < 0)
    operator delete((void *)STACK[0x2C50]);
  sub_1001D5744((uint64_t)&STACK[0x2C68]);
  if (v79[3439] < 0)
    operator delete((void *)STACK[0x2CA0]);
  sub_1001D5744((uint64_t)&STACK[0x2CB8]);
  if (v79[3519] < 0)
    operator delete((void *)STACK[0x2CF0]);
  sub_1001D5744((uint64_t)&STACK[0x2D08]);
  if (v79[3599] < 0)
    operator delete((void *)STACK[0x2D40]);
  sub_1001D5744((uint64_t)&STACK[0x2D58]);
  if (v79[3679] < 0)
    operator delete((void *)STACK[0x2D90]);
  sub_1001D5744((uint64_t)&STACK[0x2DA8]);
  if (v79[3759] < 0)
    operator delete((void *)STACK[0x2DE0]);
  sub_1001D5744((uint64_t)&STACK[0x2DF8]);
  if (v79[3839] < 0)
    operator delete((void *)STACK[0x2E30]);
  sub_1001D5744((uint64_t)&STACK[0x2E48]);
  if (v79[3919] < 0)
    operator delete((void *)STACK[0x2E80]);
  sub_1001D5744((uint64_t)&STACK[0x2E98]);
  if (v79[3999] < 0)
    operator delete((void *)STACK[0x2ED0]);
  sub_1001D5744((uint64_t)&STACK[0x2EE8]);
  if (v79[4079] < 0)
    operator delete((void *)STACK[0x2F20]);
  sub_1001D5744((uint64_t)&STACK[0x2F38]);
  if (v78[79] < 0)
    operator delete((void *)STACK[0x2F70]);
  sub_1001D5744((uint64_t)&STACK[0x2F88]);
  if (v78[159] < 0)
    operator delete((void *)STACK[0x2FC0]);
  sub_1001D5744((uint64_t)&STACK[0x2FD8]);
  if (v78[239] < 0)
    operator delete((void *)STACK[0x3010]);
  sub_1001D5744((uint64_t)&STACK[0x3028]);
  if (v78[319] < 0)
    operator delete((void *)STACK[0x3060]);
  sub_1001D5744((uint64_t)&STACK[0x3078]);
  if (v78[399] < 0)
    operator delete((void *)STACK[0x30B0]);
  sub_1001D5744((uint64_t)&STACK[0x30C8]);
  if (v78[479] < 0)
    operator delete((void *)STACK[0x3100]);
  sub_1001D5744((uint64_t)&STACK[0x3118]);
  if (v78[559] < 0)
    operator delete((void *)STACK[0x3150]);
  sub_1001D5744((uint64_t)&STACK[0x3168]);
  if (v78[639] < 0)
    operator delete((void *)STACK[0x31A0]);
  sub_1001D5744((uint64_t)&STACK[0x31B8]);
  if (v78[719] < 0)
    operator delete((void *)STACK[0x31F0]);
  sub_1001D5744((uint64_t)&STACK[0x3208]);
  if (v78[799] < 0)
    operator delete((void *)STACK[0x3240]);
  sub_1001D5744((uint64_t)&STACK[0x3258]);
  if (v78[879] < 0)
    operator delete((void *)STACK[0x3290]);
  sub_1001D5744((uint64_t)&STACK[0x32A8]);
  if (v78[959] < 0)
    operator delete((void *)STACK[0x32E0]);
  sub_1001D5744((uint64_t)&STACK[0x32F8]);
  if (v78[1039] < 0)
    operator delete((void *)STACK[0x3330]);
  sub_1001D5744((uint64_t)&STACK[0x3348]);
  if (v78[1119] < 0)
    operator delete((void *)STACK[0x3380]);
  sub_1001D5744((uint64_t)&STACK[0x3398]);
  if (v78[1199] < 0)
    operator delete((void *)STACK[0x33D0]);
  sub_1001D5744((uint64_t)&STACK[0x33E8]);
  if (v78[1279] < 0)
    operator delete((void *)STACK[0x3420]);
  sub_1001D5744((uint64_t)&STACK[0x3438]);
  if (v78[1359] < 0)
    operator delete((void *)STACK[0x3470]);
  sub_1001D5744((uint64_t)&STACK[0x3488]);
  if (v78[1439] < 0)
    operator delete((void *)STACK[0x34C0]);
  sub_1001D5744((uint64_t)&STACK[0x34D8]);
  if (v78[1519] < 0)
    operator delete((void *)STACK[0x3510]);
  sub_1001D5744((uint64_t)&STACK[0x3528]);
  if (v78[1599] < 0)
    operator delete((void *)STACK[0x3560]);
  sub_1001D5744((uint64_t)&STACK[0x3578]);
  if (v78[1679] < 0)
    operator delete((void *)STACK[0x35B0]);
  sub_1001D5744((uint64_t)&STACK[0x35C8]);
  if (v78[1759] < 0)
    operator delete((void *)STACK[0x3600]);
  sub_1001D5744((uint64_t)&STACK[0x3618]);
  if (v78[1839] < 0)
    operator delete((void *)STACK[0x3650]);
  sub_1001D5744((uint64_t)&STACK[0x3668]);
  if (v78[1919] < 0)
    operator delete((void *)STACK[0x36A0]);
  sub_1001D5744((uint64_t)&STACK[0x36B8]);
  if (v78[1999] < 0)
    operator delete((void *)STACK[0x36F0]);
  sub_1001D5744((uint64_t)&STACK[0x3708]);
  if (v78[2079] < 0)
    operator delete((void *)STACK[0x3740]);
  sub_1001D5744((uint64_t)&STACK[0x3758]);
  if (v78[2159] < 0)
    operator delete((void *)STACK[0x3790]);
  sub_1001D5744((uint64_t)&STACK[0x37A8]);
  if (v78[2239] < 0)
    operator delete((void *)STACK[0x37E0]);
  sub_1001D5744((uint64_t)&STACK[0x37F8]);
  if (v78[2319] < 0)
    operator delete((void *)STACK[0x3830]);
  sub_1001D5744((uint64_t)&STACK[0x3848]);
  if (v78[2399] < 0)
    operator delete((void *)STACK[0x3880]);
  sub_1001D5744((uint64_t)&STACK[0x3898]);
  if (v78[2479] < 0)
    operator delete((void *)STACK[0x38D0]);
  sub_1001D5744((uint64_t)&STACK[0x38E8]);
  if (v78[2559] < 0)
    operator delete((void *)STACK[0x3920]);
  sub_1001D5744((uint64_t)&STACK[0x3938]);
  if (v78[2639] < 0)
    operator delete((void *)STACK[0x3970]);
  sub_1001D5744((uint64_t)&STACK[0x3988]);
  if (v78[2719] < 0)
    operator delete((void *)STACK[0x39C0]);
  sub_1001D5744((uint64_t)&STACK[0x39D8]);
  if (v78[2799] < 0)
    operator delete((void *)STACK[0x3A10]);
  sub_1001D5744((uint64_t)&STACK[0x3A28]);
  if (v78[2879] < 0)
    operator delete((void *)STACK[0x3A60]);
  sub_1001D5744((uint64_t)&STACK[0x3A78]);
  if (v78[2959] < 0)
    operator delete((void *)STACK[0x3AB0]);
  sub_1001D5744((uint64_t)&STACK[0x3AC8]);
  if (v78[3039] < 0)
    operator delete((void *)STACK[0x3B00]);
  sub_1001D5744((uint64_t)&STACK[0x3B18]);
  if (v78[3119] < 0)
    operator delete((void *)STACK[0x3B50]);
  sub_1001D5744((uint64_t)&STACK[0x3B68]);
  if (v78[3199] < 0)
    operator delete((void *)STACK[0x3BA0]);
  sub_1001D5744((uint64_t)&STACK[0x3BB8]);
  if (v78[3279] < 0)
    operator delete((void *)STACK[0x3BF0]);
  sub_1001D5744((uint64_t)&STACK[0x3C08]);
  if (v78[3359] < 0)
    operator delete((void *)STACK[0x3C40]);
  sub_1001D5744((uint64_t)&STACK[0x3C58]);
  if (v78[3439] < 0)
    operator delete((void *)STACK[0x3C90]);
  sub_1001D5744((uint64_t)&STACK[0x3CA8]);
  if (v78[3519] < 0)
    operator delete((void *)STACK[0x3CE0]);
  sub_1001D5744((uint64_t)&STACK[0x3CF8]);
  if (v78[3599] < 0)
    operator delete((void *)STACK[0x3D30]);
  sub_1001D5744((uint64_t)&STACK[0x3D48]);
  if (v78[3679] < 0)
    operator delete((void *)STACK[0x3D80]);
  sub_1001D5744((uint64_t)&STACK[0x3D98]);
  if (v78[3759] < 0)
    operator delete((void *)STACK[0x3DD0]);
  sub_1001D5744((uint64_t)&STACK[0x3DE8]);
  if (v78[3839] < 0)
    operator delete((void *)STACK[0x3E20]);
  sub_1001D5744((uint64_t)&STACK[0x3E38]);
  if (v78[3919] < 0)
    operator delete((void *)STACK[0x3E70]);
  sub_1001D5744((uint64_t)&STACK[0x3E88]);
  if (v78[3999] < 0)
    operator delete((void *)STACK[0x3EC0]);
  sub_1001D5744((uint64_t)&STACK[0x3ED8]);
  if (v78[4079] < 0)
    operator delete((void *)STACK[0x3F10]);
  sub_1001D5744((uint64_t)&STACK[0x3F28]);
  if (v77[79] < 0)
    operator delete((void *)STACK[0x3F60]);
  sub_1001D5744((uint64_t)&STACK[0x3F78]);
  if (v77[159] < 0)
    operator delete((void *)STACK[0x3FB0]);
  sub_1001D5744((uint64_t)&STACK[0x3FC8]);
  if (v77[239] < 0)
    operator delete((void *)STACK[0x4000]);
  sub_1001D5744((uint64_t)&STACK[0x4018]);
  if (v77[319] < 0)
    operator delete((void *)STACK[0x4050]);
  sub_1001D5744((uint64_t)&STACK[0x4068]);
  if (v77[399] < 0)
    operator delete((void *)STACK[0x40A0]);
  sub_1001D5744((uint64_t)&STACK[0x40B8]);
  if (v77[479] < 0)
    operator delete((void *)STACK[0x40F0]);
  sub_1001D5744((uint64_t)&STACK[0x4108]);
  if (v77[559] < 0)
    operator delete((void *)STACK[0x4140]);
  sub_1001D5744((uint64_t)&STACK[0x4158]);
  if (v77[639] < 0)
    operator delete((void *)STACK[0x4190]);
  sub_1001D5744((uint64_t)&STACK[0x41A8]);
  if (v77[719] < 0)
    operator delete((void *)STACK[0x41E0]);
  sub_1001D5744((uint64_t)&STACK[0x41F8]);
  if (v77[799] < 0)
    operator delete((void *)STACK[0x4230]);
  sub_1001D5744((uint64_t)&STACK[0x4248]);
  if (v77[879] < 0)
    operator delete((void *)STACK[0x4280]);
  sub_1001D5744((uint64_t)&STACK[0x4298]);
  if (v77[959] < 0)
    operator delete((void *)STACK[0x42D0]);
  sub_1001D5744((uint64_t)&STACK[0x42E8]);
  if (v77[1039] < 0)
    operator delete((void *)STACK[0x4320]);
  sub_1001D5744((uint64_t)&STACK[0x4338]);
  if (v77[1119] < 0)
    operator delete((void *)STACK[0x4370]);
  sub_1001D5744((uint64_t)&STACK[0x4388]);
  if (v77[1199] < 0)
    operator delete((void *)STACK[0x43C0]);
  sub_1001D5744((uint64_t)&STACK[0x43D8]);
  if (v77[1279] < 0)
    operator delete((void *)STACK[0x4410]);
  sub_1001D5744((uint64_t)&STACK[0x4428]);
  if (v77[1359] < 0)
    operator delete((void *)STACK[0x4460]);
  sub_1001D5744((uint64_t)&STACK[0x4478]);
  if (v77[1439] < 0)
    operator delete((void *)STACK[0x44B0]);
  sub_1001D5744((uint64_t)&STACK[0x44C8]);
  if (v77[1519] < 0)
    operator delete((void *)STACK[0x4500]);
  sub_1001D5744((uint64_t)&STACK[0x4518]);
  if (v77[1599] < 0)
    operator delete((void *)STACK[0x4550]);
  sub_1001D5744((uint64_t)&STACK[0x4568]);
  if (v77[1679] < 0)
    operator delete((void *)STACK[0x45A0]);
  sub_1001D5744((uint64_t)&STACK[0x45B8]);
  if (v77[1759] < 0)
    operator delete((void *)STACK[0x45F0]);
  sub_1001D5744((uint64_t)&STACK[0x4608]);
  if (v77[1839] < 0)
    operator delete((void *)STACK[0x4640]);
  sub_1001D5744((uint64_t)&STACK[0x4658]);
  if (v77[1919] < 0)
    operator delete((void *)STACK[0x4690]);
  sub_1001D5744((uint64_t)&STACK[0x46A8]);
  if (v77[1999] < 0)
    operator delete((void *)STACK[0x46E0]);
  sub_1001D5744((uint64_t)&STACK[0x46F8]);
  if (v77[2079] < 0)
    operator delete((void *)STACK[0x4730]);
  sub_1001D5744((uint64_t)&STACK[0x4748]);
  if (v77[2159] < 0)
    operator delete((void *)STACK[0x4780]);
  sub_1001D5744((uint64_t)&STACK[0x4798]);
  if (v77[2239] < 0)
    operator delete((void *)STACK[0x47D0]);
  sub_1001D5744((uint64_t)&STACK[0x47E8]);
  if (v77[2319] < 0)
    operator delete((void *)STACK[0x4820]);
  sub_1001D5744((uint64_t)&STACK[0x4838]);
  if (v77[2399] < 0)
    operator delete((void *)STACK[0x4870]);
  sub_1001D5744((uint64_t)&STACK[0x4888]);
  if (v77[2479] < 0)
    operator delete((void *)STACK[0x48C0]);
  sub_1001D5744((uint64_t)&STACK[0x48D8]);
  if (v77[2559] < 0)
    operator delete((void *)STACK[0x4910]);
  sub_1001D5744((uint64_t)&STACK[0x4928]);
  if (v77[2639] < 0)
    operator delete((void *)STACK[0x4960]);
  sub_1001D5744((uint64_t)&STACK[0x4978]);
  if (v77[2719] < 0)
    operator delete((void *)STACK[0x49B0]);
  sub_1001D5744((uint64_t)&STACK[0x49C8]);
  if (v77[2799] < 0)
    operator delete((void *)STACK[0x4A00]);
  sub_1001D5744((uint64_t)&STACK[0x4A18]);
  if (v77[2879] < 0)
    operator delete((void *)STACK[0x4A50]);
  sub_1001D5744((uint64_t)&STACK[0x4A68]);
  if (v77[2959] < 0)
    operator delete((void *)STACK[0x4AA0]);
  sub_1001D5744((uint64_t)&STACK[0x4AB8]);
  if (v77[3039] < 0)
    operator delete((void *)STACK[0x4AF0]);
  sub_1001D5744((uint64_t)&STACK[0x4B08]);
  if (v77[3119] < 0)
    operator delete((void *)STACK[0x4B40]);
  sub_1001D5744((uint64_t)&STACK[0x4B58]);
  if (v77[3199] < 0)
    operator delete((void *)STACK[0x4B90]);
  sub_1001D5744((uint64_t)&STACK[0x4BA8]);
  if (v77[3279] < 0)
    operator delete((void *)STACK[0x4BE0]);
  _Unwind_Resume(a1);
}

void sub_10037ADB8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *__p,uint64_t a51,int a52,__int16 a53,char a54,char a55)
{
  if (a55 < 0)
    operator delete(__p);
  JUMPOUT(0x100379428);
}

void sub_10037ADDC()
{
  JUMPOUT(0x100379438);
}

void sub_10037ADEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,void *__p,uint64_t a61,int a62,__int16 a63)
{
  char a65;

  if (a65 < 0)
    operator delete(__p);
  JUMPOUT(0x100379440);
}

void sub_10037AE10()
{
  JUMPOUT(0x100379450);
}

void sub_10037AE20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *__p;
  char a73;

  if (a73 < 0)
    operator delete(__p);
  JUMPOUT(0x100379458);
}

void sub_10037AE44()
{
  JUMPOUT(0x100379468);
}

void sub_10037AE54()
{
  if (SLOBYTE(STACK[0x24F]) < 0)
    operator delete((void *)STACK[0x238]);
  JUMPOUT(0x100379470);
}

void sub_10037AE78()
{
  JUMPOUT(0x100379480);
}

void sub_10037AE88()
{
  if (SLOBYTE(STACK[0x29F]) < 0)
    operator delete((void *)STACK[0x288]);
  JUMPOUT(0x100379488);
}

void sub_10037AEAC()
{
  JUMPOUT(0x100379498);
}

void sub_10037AEBC()
{
  if (SLOBYTE(STACK[0x2EF]) < 0)
    operator delete((void *)STACK[0x2D8]);
  JUMPOUT(0x1003794A0);
}

void sub_10037AEE0()
{
  JUMPOUT(0x1003794B0);
}

void sub_10037AEF0()
{
  if (SLOBYTE(STACK[0x33F]) < 0)
    operator delete((void *)STACK[0x328]);
  JUMPOUT(0x1003794B8);
}

void sub_10037AF14()
{
  JUMPOUT(0x1003794C8);
}

void sub_10037AF24()
{
  if (SLOBYTE(STACK[0x38F]) < 0)
    operator delete((void *)STACK[0x378]);
  JUMPOUT(0x1003794D0);
}

void sub_10037AF48()
{
  JUMPOUT(0x1003794E0);
}

void sub_10037AF58()
{
  if (SLOBYTE(STACK[0x3DF]) < 0)
    operator delete((void *)STACK[0x3C8]);
  JUMPOUT(0x1003794E8);
}

void sub_10037AF7C()
{
  JUMPOUT(0x1003794F8);
}

void sub_10037AF8C()
{
  if (SLOBYTE(STACK[0x42F]) < 0)
    operator delete((void *)STACK[0x418]);
  JUMPOUT(0x100379500);
}

void sub_10037AFB0()
{
  JUMPOUT(0x100379510);
}

void sub_10037AFC0()
{
  if (SLOBYTE(STACK[0x47F]) < 0)
    operator delete((void *)STACK[0x468]);
  JUMPOUT(0x100379518);
}

void sub_10037AFE4()
{
  JUMPOUT(0x100379528);
}

void sub_10037AFF4()
{
  if (SLOBYTE(STACK[0x4CF]) < 0)
    operator delete((void *)STACK[0x4B8]);
  JUMPOUT(0x100379530);
}

void sub_10037B018()
{
  JUMPOUT(0x100379540);
}

void sub_10037B028()
{
  if (SLOBYTE(STACK[0x51F]) < 0)
    operator delete((void *)STACK[0x508]);
  JUMPOUT(0x100379548);
}

void sub_10037B04C()
{
  JUMPOUT(0x100379558);
}

void sub_10037B05C()
{
  if (SLOBYTE(STACK[0x56F]) < 0)
    operator delete((void *)STACK[0x558]);
  JUMPOUT(0x100379560);
}

void sub_10037B080()
{
  JUMPOUT(0x100379570);
}

void sub_10037B090()
{
  if (SLOBYTE(STACK[0x5BF]) < 0)
    operator delete((void *)STACK[0x5A8]);
  JUMPOUT(0x100379578);
}

void sub_10037B0B4()
{
  JUMPOUT(0x100379588);
}

void sub_10037B0C4()
{
  if (SLOBYTE(STACK[0x60F]) < 0)
    operator delete((void *)STACK[0x5F8]);
  JUMPOUT(0x100379590);
}

void sub_10037B0E8()
{
  JUMPOUT(0x1003795A0);
}

void sub_10037B0F8()
{
  if (SLOBYTE(STACK[0x65F]) < 0)
    operator delete((void *)STACK[0x648]);
  JUMPOUT(0x1003795A8);
}

void sub_10037B11C()
{
  JUMPOUT(0x1003795B8);
}

void sub_10037B12C()
{
  if (SLOBYTE(STACK[0x6AF]) < 0)
    operator delete((void *)STACK[0x698]);
  JUMPOUT(0x1003795C0);
}

void sub_10037B150()
{
  JUMPOUT(0x1003795D0);
}

void sub_10037B160()
{
  if (SLOBYTE(STACK[0x6FF]) < 0)
    operator delete((void *)STACK[0x6E8]);
  JUMPOUT(0x1003795D8);
}

void sub_10037B184()
{
  JUMPOUT(0x1003795E8);
}

void sub_10037B194()
{
  if (SLOBYTE(STACK[0x74F]) < 0)
    operator delete((void *)STACK[0x738]);
  JUMPOUT(0x1003795F0);
}

void sub_10037B1B8()
{
  JUMPOUT(0x100379600);
}

void sub_10037B1C8()
{
  if (SLOBYTE(STACK[0x79F]) < 0)
    operator delete((void *)STACK[0x788]);
  JUMPOUT(0x100379608);
}

void sub_10037B1EC()
{
  JUMPOUT(0x100379618);
}

void sub_10037B1FC()
{
  if (SLOBYTE(STACK[0x7EF]) < 0)
    operator delete((void *)STACK[0x7D8]);
  JUMPOUT(0x100379620);
}

void sub_10037B220()
{
  JUMPOUT(0x100379630);
}

void sub_10037B230()
{
  if (SLOBYTE(STACK[0x83F]) < 0)
    operator delete((void *)STACK[0x828]);
  JUMPOUT(0x100379638);
}

void sub_10037B254()
{
  JUMPOUT(0x100379648);
}

void sub_10037B264()
{
  if (SLOBYTE(STACK[0x88F]) < 0)
    operator delete((void *)STACK[0x878]);
  JUMPOUT(0x100379650);
}

void sub_10037B288()
{
  JUMPOUT(0x100379660);
}

void sub_10037B298()
{
  if (SLOBYTE(STACK[0x8DF]) < 0)
    operator delete((void *)STACK[0x8C8]);
  JUMPOUT(0x100379668);
}

void sub_10037B2BC()
{
  JUMPOUT(0x100379678);
}

void sub_10037B2CC()
{
  if (SLOBYTE(STACK[0x92F]) < 0)
    operator delete((void *)STACK[0x918]);
  JUMPOUT(0x100379680);
}

void sub_10037B2F0()
{
  JUMPOUT(0x100379690);
}

void sub_10037B300()
{
  if (SLOBYTE(STACK[0x97F]) < 0)
    operator delete((void *)STACK[0x968]);
  JUMPOUT(0x100379698);
}

void sub_10037B324()
{
  JUMPOUT(0x1003796A8);
}

void sub_10037B334()
{
  if (SLOBYTE(STACK[0x9CF]) < 0)
    operator delete((void *)STACK[0x9B8]);
  JUMPOUT(0x1003796B0);
}

void sub_10037B358()
{
  JUMPOUT(0x1003796C0);
}

void sub_10037B368()
{
  if (SLOBYTE(STACK[0xA1F]) < 0)
    operator delete((void *)STACK[0xA08]);
  JUMPOUT(0x1003796C8);
}

void sub_10037B38C()
{
  JUMPOUT(0x1003796D8);
}

void sub_10037B39C()
{
  if (SLOBYTE(STACK[0xA6F]) < 0)
    operator delete((void *)STACK[0xA58]);
  JUMPOUT(0x1003796E0);
}

void sub_10037B3C0()
{
  JUMPOUT(0x1003796F0);
}

void sub_10037B3D0()
{
  if (SLOBYTE(STACK[0xABF]) < 0)
    operator delete((void *)STACK[0xAA8]);
  JUMPOUT(0x1003796F8);
}

void sub_10037B3F4()
{
  JUMPOUT(0x100379708);
}

void sub_10037B404()
{
  if (SLOBYTE(STACK[0xB0F]) < 0)
    operator delete((void *)STACK[0xAF8]);
  JUMPOUT(0x100379710);
}

void sub_10037B428()
{
  JUMPOUT(0x100379720);
}

void sub_10037B438()
{
  if (SLOBYTE(STACK[0xB5F]) < 0)
    operator delete((void *)STACK[0xB48]);
  JUMPOUT(0x100379728);
}

void sub_10037B45C()
{
  JUMPOUT(0x100379738);
}

void sub_10037B46C()
{
  if (SLOBYTE(STACK[0xBAF]) < 0)
    operator delete((void *)STACK[0xB98]);
  JUMPOUT(0x100379740);
}

void sub_10037B490()
{
  JUMPOUT(0x100379750);
}

void sub_10037B4A0()
{
  if (SLOBYTE(STACK[0xBFF]) < 0)
    operator delete((void *)STACK[0xBE8]);
  JUMPOUT(0x100379758);
}

void sub_10037B4C4()
{
  JUMPOUT(0x100379768);
}

void sub_10037B4D4()
{
  if (SLOBYTE(STACK[0xC4F]) < 0)
    operator delete((void *)STACK[0xC38]);
  JUMPOUT(0x100379770);
}

void sub_10037B4F8()
{
  JUMPOUT(0x100379780);
}

void sub_10037B508()
{
  if (SLOBYTE(STACK[0xC9F]) < 0)
    operator delete((void *)STACK[0xC88]);
  JUMPOUT(0x100379788);
}

void sub_10037B52C()
{
  JUMPOUT(0x100379798);
}

void sub_10037B53C()
{
  if (SLOBYTE(STACK[0xCEF]) < 0)
    operator delete((void *)STACK[0xCD8]);
  JUMPOUT(0x1003797A0);
}

void sub_10037B560()
{
  JUMPOUT(0x1003797B0);
}

void sub_10037B570()
{
  if (SLOBYTE(STACK[0xD3F]) < 0)
    operator delete((void *)STACK[0xD28]);
  JUMPOUT(0x1003797B8);
}

void sub_10037B594()
{
  JUMPOUT(0x1003797C8);
}

void sub_10037B5A4()
{
  if (SLOBYTE(STACK[0xD8F]) < 0)
    operator delete((void *)STACK[0xD78]);
  JUMPOUT(0x1003797D0);
}

void sub_10037B5C8()
{
  JUMPOUT(0x1003797E0);
}

void sub_10037B5D8()
{
  if (SLOBYTE(STACK[0xDDF]) < 0)
    operator delete((void *)STACK[0xDC8]);
  JUMPOUT(0x1003797E8);
}

void sub_10037B5FC()
{
  JUMPOUT(0x1003797F8);
}

void sub_10037B60C()
{
  if (SLOBYTE(STACK[0xE2F]) < 0)
    operator delete((void *)STACK[0xE18]);
  JUMPOUT(0x100379800);
}

void sub_10037B630()
{
  JUMPOUT(0x100379810);
}

void sub_10037B640()
{
  if (SLOBYTE(STACK[0xE7F]) < 0)
    operator delete((void *)STACK[0xE68]);
  JUMPOUT(0x100379818);
}

void sub_10037B664()
{
  JUMPOUT(0x100379828);
}

void sub_10037B674()
{
  if (SLOBYTE(STACK[0xECF]) < 0)
    operator delete((void *)STACK[0xEB8]);
  JUMPOUT(0x100379830);
}

void sub_10037B698()
{
  JUMPOUT(0x100379840);
}

void sub_10037B6A8()
{
  if (SLOBYTE(STACK[0xF1F]) < 0)
    operator delete((void *)STACK[0xF08]);
  JUMPOUT(0x100379848);
}

void sub_10037B6CC()
{
  JUMPOUT(0x100379858);
}

void sub_10037B6DC()
{
  if (SLOBYTE(STACK[0xF6F]) < 0)
    operator delete((void *)STACK[0xF58]);
  JUMPOUT(0x100379860);
}

void sub_10037B700()
{
  JUMPOUT(0x100379870);
}

void sub_10037B710()
{
  uint64_t v0;

  if (*(char *)(v0 + 103) < 0)
    operator delete((void *)STACK[0xFA8]);
  JUMPOUT(0x100379878);
}

void sub_10037B734()
{
  JUMPOUT(0x100379888);
}

void sub_10037B744()
{
  uint64_t v0;

  if (*(char *)(v0 + 183) < 0)
    operator delete((void *)STACK[0xFF8]);
  JUMPOUT(0x100379890);
}

void sub_10037B768()
{
  JUMPOUT(0x1003798A0);
}

void sub_10037B778()
{
  uint64_t v0;

  if (*(char *)(v0 + 263) < 0)
    operator delete((void *)STACK[0x1048]);
  JUMPOUT(0x1003798ACLL);
}

void sub_10037B79C()
{
  JUMPOUT(0x1003798BCLL);
}

void sub_10037B7AC()
{
  uint64_t v0;

  if (*(char *)(v0 + 343) < 0)
    operator delete((void *)STACK[0x1098]);
  JUMPOUT(0x1003798C8);
}

void sub_10037B7D0()
{
  JUMPOUT(0x1003798D8);
}

void sub_10037B7E0()
{
  uint64_t v0;

  if (*(char *)(v0 + 423) < 0)
    operator delete((void *)STACK[0x10E8]);
  JUMPOUT(0x1003798E4);
}

void sub_10037B804()
{
  JUMPOUT(0x1003798F4);
}

void sub_10037B814()
{
  uint64_t v0;

  if (*(char *)(v0 + 503) < 0)
    operator delete((void *)STACK[0x1138]);
  JUMPOUT(0x100379900);
}

void sub_10037B838()
{
  JUMPOUT(0x100379910);
}

void sub_10037B848()
{
  uint64_t v0;

  if (*(char *)(v0 + 583) < 0)
    operator delete((void *)STACK[0x1188]);
  JUMPOUT(0x10037991CLL);
}

void sub_10037B86C()
{
  JUMPOUT(0x10037992CLL);
}

void sub_10037B87C()
{
  uint64_t v0;

  if (*(char *)(v0 + 663) < 0)
    operator delete((void *)STACK[0x11D8]);
  JUMPOUT(0x100379938);
}

void sub_10037B8A0()
{
  JUMPOUT(0x100379948);
}

void sub_10037B8B0()
{
  uint64_t v0;

  if (*(char *)(v0 + 743) < 0)
    operator delete((void *)STACK[0x1228]);
  JUMPOUT(0x100379954);
}

void sub_10037B8D4()
{
  JUMPOUT(0x100379964);
}

void sub_10037B8E4()
{
  uint64_t v0;

  if (*(char *)(v0 + 823) < 0)
    operator delete((void *)STACK[0x1278]);
  JUMPOUT(0x100379970);
}

void sub_10037B908()
{
  JUMPOUT(0x100379980);
}

void sub_10037B918()
{
  uint64_t v0;

  if (*(char *)(v0 + 903) < 0)
    operator delete((void *)STACK[0x12C8]);
  JUMPOUT(0x10037998CLL);
}

void sub_10037B93C()
{
  JUMPOUT(0x10037999CLL);
}

void sub_10037B94C()
{
  uint64_t v0;

  if (*(char *)(v0 + 983) < 0)
    operator delete((void *)STACK[0x1318]);
  JUMPOUT(0x1003799A8);
}

void sub_10037B970()
{
  JUMPOUT(0x1003799B8);
}

void sub_10037B980()
{
  uint64_t v0;

  if (*(char *)(v0 + 1063) < 0)
    operator delete((void *)STACK[0x1368]);
  JUMPOUT(0x1003799C4);
}

void sub_10037B9A4()
{
  JUMPOUT(0x1003799D4);
}

void sub_10037B9B4()
{
  uint64_t v0;

  if (*(char *)(v0 + 1143) < 0)
    operator delete((void *)STACK[0x13B8]);
  JUMPOUT(0x1003799E0);
}

void sub_10037B9D8()
{
  JUMPOUT(0x1003799F0);
}

void sub_10037B9E8()
{
  uint64_t v0;

  if (*(char *)(v0 + 1223) < 0)
    operator delete((void *)STACK[0x1408]);
  JUMPOUT(0x1003799FCLL);
}

void sub_10037BA0C()
{
  JUMPOUT(0x100379A0CLL);
}

void sub_10037BA1C()
{
  uint64_t v0;

  if (*(char *)(v0 + 1303) < 0)
    operator delete((void *)STACK[0x1458]);
  JUMPOUT(0x100379A18);
}

void sub_10037BA40()
{
  JUMPOUT(0x100379A28);
}

void sub_10037BA50()
{
  uint64_t v0;

  if (*(char *)(v0 + 1383) < 0)
    operator delete((void *)STACK[0x14A8]);
  JUMPOUT(0x100379A34);
}

void sub_10037BA74()
{
  JUMPOUT(0x100379A44);
}

void sub_10037BA84()
{
  uint64_t v0;

  if (*(char *)(v0 + 1463) < 0)
    operator delete((void *)STACK[0x14F8]);
  JUMPOUT(0x100379A50);
}

void sub_10037BAA8()
{
  JUMPOUT(0x100379A60);
}

void sub_10037BAB8()
{
  uint64_t v0;

  if (*(char *)(v0 + 1543) < 0)
    operator delete((void *)STACK[0x1548]);
  JUMPOUT(0x100379A6CLL);
}

void sub_10037BADC()
{
  JUMPOUT(0x100379A7CLL);
}

void sub_10037BAEC()
{
  uint64_t v0;

  if (*(char *)(v0 + 1623) < 0)
    operator delete((void *)STACK[0x1598]);
  JUMPOUT(0x100379A88);
}

void sub_10037BB10()
{
  JUMPOUT(0x100379A98);
}

void sub_10037BB20()
{
  uint64_t v0;

  if (*(char *)(v0 + 1703) < 0)
    operator delete((void *)STACK[0x15E8]);
  JUMPOUT(0x100379AA4);
}

void sub_10037BB44()
{
  JUMPOUT(0x100379AB4);
}

void sub_10037BB54()
{
  uint64_t v0;

  if (*(char *)(v0 + 1783) < 0)
    operator delete((void *)STACK[0x1638]);
  JUMPOUT(0x100379AC0);
}

void sub_10037BB78()
{
  JUMPOUT(0x100379AD0);
}

void sub_10037BB88()
{
  uint64_t v0;

  if (*(char *)(v0 + 1863) < 0)
    operator delete((void *)STACK[0x1688]);
  JUMPOUT(0x100379ADCLL);
}

void sub_10037BBAC()
{
  JUMPOUT(0x100379AECLL);
}

void sub_10037BBBC()
{
  uint64_t v0;

  if (*(char *)(v0 + 1943) < 0)
    operator delete((void *)STACK[0x16D8]);
  JUMPOUT(0x100379AF8);
}

void sub_10037BBE0()
{
  JUMPOUT(0x100379B08);
}

void sub_10037BBF0()
{
  uint64_t v0;

  if (*(char *)(v0 + 2023) < 0)
    operator delete((void *)STACK[0x1728]);
  JUMPOUT(0x100379B14);
}

void sub_10037BC14()
{
  JUMPOUT(0x100379B24);
}

void sub_10037BC24()
{
  uint64_t v0;

  if (*(char *)(v0 + 2103) < 0)
    operator delete((void *)STACK[0x1778]);
  JUMPOUT(0x100379B30);
}

void sub_10037BC48()
{
  JUMPOUT(0x100379B40);
}

void sub_10037BC58()
{
  uint64_t v0;

  if (*(char *)(v0 + 2183) < 0)
    operator delete((void *)STACK[0x17C8]);
  JUMPOUT(0x100379B4CLL);
}

void sub_10037BC7C()
{
  JUMPOUT(0x100379B5CLL);
}

void sub_10037BC8C()
{
  uint64_t v0;

  if (*(char *)(v0 + 2263) < 0)
    operator delete((void *)STACK[0x1818]);
  JUMPOUT(0x100379B68);
}

void sub_10037BCB0()
{
  JUMPOUT(0x100379B78);
}

void sub_10037BCC0()
{
  uint64_t v0;

  if (*(char *)(v0 + 2343) < 0)
    operator delete((void *)STACK[0x1868]);
  JUMPOUT(0x100379B84);
}

void sub_10037BCE4()
{
  JUMPOUT(0x100379B94);
}

void sub_10037BCF4()
{
  uint64_t v0;

  if (*(char *)(v0 + 2423) < 0)
    operator delete((void *)STACK[0x18B8]);
  JUMPOUT(0x100379BA0);
}

void sub_10037BD18()
{
  JUMPOUT(0x100379BB0);
}

void sub_10037BD28()
{
  uint64_t v0;

  if (*(char *)(v0 + 2503) < 0)
    operator delete((void *)STACK[0x1908]);
  JUMPOUT(0x100379BBCLL);
}

void sub_10037BD4C()
{
  JUMPOUT(0x100379BCCLL);
}

void sub_10037BD5C()
{
  uint64_t v0;

  if (*(char *)(v0 + 2583) < 0)
    operator delete((void *)STACK[0x1958]);
  JUMPOUT(0x100379BD8);
}

void sub_10037BD80()
{
  JUMPOUT(0x100379BE8);
}

void sub_10037BD90()
{
  uint64_t v0;

  if (*(char *)(v0 + 2663) < 0)
    operator delete((void *)STACK[0x19A8]);
  JUMPOUT(0x100379BF4);
}

void sub_10037BDB4()
{
  JUMPOUT(0x100379C04);
}

void sub_10037BDC4()
{
  uint64_t v0;

  if (*(char *)(v0 + 2743) < 0)
    operator delete((void *)STACK[0x19F8]);
  JUMPOUT(0x100379C10);
}

void sub_10037BDE8()
{
  JUMPOUT(0x100379C20);
}

void sub_10037BDF8()
{
  uint64_t v0;

  if (*(char *)(v0 + 2823) < 0)
    operator delete((void *)STACK[0x1A48]);
  JUMPOUT(0x100379C2CLL);
}

void sub_10037BE1C()
{
  JUMPOUT(0x100379C3CLL);
}

void sub_10037BE2C()
{
  uint64_t v0;

  if (*(char *)(v0 + 2903) < 0)
    operator delete((void *)STACK[0x1A98]);
  JUMPOUT(0x100379C48);
}

void sub_10037BE50()
{
  JUMPOUT(0x100379C58);
}

void sub_10037BE60()
{
  uint64_t v0;

  if (*(char *)(v0 + 2983) < 0)
    operator delete((void *)STACK[0x1AE8]);
  JUMPOUT(0x100379C64);
}

void sub_10037BE84()
{
  JUMPOUT(0x100379C74);
}

void sub_10037BE94()
{
  uint64_t v0;

  if (*(char *)(v0 + 3063) < 0)
    operator delete((void *)STACK[0x1B38]);
  JUMPOUT(0x100379C80);
}

void sub_10037BEB8()
{
  JUMPOUT(0x100379C90);
}

void sub_10037BEC8()
{
  uint64_t v0;

  if (*(char *)(v0 + 3143) < 0)
    operator delete((void *)STACK[0x1B88]);
  JUMPOUT(0x100379C9CLL);
}

void sub_10037BEEC()
{
  JUMPOUT(0x100379CACLL);
}

void sub_10037BEFC()
{
  uint64_t v0;

  if (*(char *)(v0 + 3223) < 0)
    operator delete((void *)STACK[0x1BD8]);
  JUMPOUT(0x100379CB8);
}

void sub_10037BF20()
{
  JUMPOUT(0x100379CC8);
}

void sub_10037BF30()
{
  uint64_t v0;

  if (*(char *)(v0 + 3303) < 0)
    operator delete((void *)STACK[0x1C28]);
  JUMPOUT(0x100379CD4);
}

void sub_10037BF54()
{
  JUMPOUT(0x100379CE4);
}

void sub_10037BF64()
{
  uint64_t v0;

  if (*(char *)(v0 + 3383) < 0)
    operator delete((void *)STACK[0x1C78]);
  JUMPOUT(0x100379CF0);
}

void sub_10037BF88()
{
  JUMPOUT(0x100379D00);
}

void sub_10037BF98()
{
  uint64_t v0;

  if (*(char *)(v0 + 3463) < 0)
    operator delete((void *)STACK[0x1CC8]);
  JUMPOUT(0x100379D0CLL);
}

void sub_10037BFBC()
{
  JUMPOUT(0x100379D1CLL);
}

void sub_10037BFCC()
{
  uint64_t v0;

  if (*(char *)(v0 + 3543) < 0)
    operator delete((void *)STACK[0x1D18]);
  JUMPOUT(0x100379D28);
}

void sub_10037BFF0()
{
  JUMPOUT(0x100379D38);
}

void sub_10037C000()
{
  uint64_t v0;

  if (*(char *)(v0 + 3623) < 0)
    operator delete((void *)STACK[0x1D68]);
  JUMPOUT(0x100379D44);
}

void sub_10037C024()
{
  JUMPOUT(0x100379D54);
}

void sub_10037C034()
{
  uint64_t v0;

  if (*(char *)(v0 + 3703) < 0)
    operator delete((void *)STACK[0x1DB8]);
  JUMPOUT(0x100379D60);
}

void sub_10037C058()
{
  JUMPOUT(0x100379D70);
}

void sub_10037C068()
{
  uint64_t v0;

  if (*(char *)(v0 + 3783) < 0)
    operator delete((void *)STACK[0x1E08]);
  JUMPOUT(0x100379D7CLL);
}

void sub_10037C08C()
{
  JUMPOUT(0x100379D8CLL);
}

void sub_10037C09C()
{
  uint64_t v0;

  if (*(char *)(v0 + 3863) < 0)
    operator delete((void *)STACK[0x1E58]);
  JUMPOUT(0x100379D98);
}

void sub_10037C0C0()
{
  JUMPOUT(0x100379DA8);
}

void sub_10037C0D0()
{
  uint64_t v0;

  if (*(char *)(v0 + 3943) < 0)
    operator delete((void *)STACK[0x1EA8]);
  JUMPOUT(0x100379DB4);
}

void sub_10037C0F4()
{
  JUMPOUT(0x100379DC4);
}

void sub_10037C104()
{
  uint64_t v0;

  if (*(char *)(v0 + 4023) < 0)
    operator delete((void *)STACK[0x1EF8]);
  JUMPOUT(0x100379DD0);
}

void sub_10037C128()
{
  JUMPOUT(0x100379DE0);
}

void sub_10037C138()
{
  uint64_t v0;

  if (*(char *)(v0 + 23) < 0)
    operator delete((void *)STACK[0x1F48]);
  JUMPOUT(0x100379DECLL);
}

void sub_10037C15C()
{
  JUMPOUT(0x100379DFCLL);
}

void sub_10037C16C()
{
  uint64_t v0;

  if (*(char *)(v0 + 103) < 0)
    operator delete((void *)STACK[0x1F98]);
  JUMPOUT(0x100379E08);
}

void sub_10037C190()
{
  JUMPOUT(0x100379E18);
}

void sub_10037C1A0()
{
  uint64_t v0;

  if (*(char *)(v0 + 183) < 0)
    operator delete((void *)STACK[0x1FE8]);
  JUMPOUT(0x100379E24);
}

void sub_10037C1C4()
{
  JUMPOUT(0x100379E34);
}

void sub_10037C1D4()
{
  uint64_t v0;

  if (*(char *)(v0 + 263) < 0)
    operator delete((void *)STACK[0x2038]);
  JUMPOUT(0x100379E40);
}

void sub_10037C1F8()
{
  JUMPOUT(0x100379E50);
}

void sub_10037C208()
{
  uint64_t v0;

  if (*(char *)(v0 + 343) < 0)
    operator delete((void *)STACK[0x2088]);
  JUMPOUT(0x100379E5CLL);
}

void sub_10037C22C()
{
  JUMPOUT(0x100379E6CLL);
}

void sub_10037C23C()
{
  uint64_t v0;

  if (*(char *)(v0 + 423) < 0)
    operator delete((void *)STACK[0x20D8]);
  JUMPOUT(0x100379E78);
}

void sub_10037C260()
{
  JUMPOUT(0x100379E88);
}

void sub_10037C270()
{
  uint64_t v0;

  if (*(char *)(v0 + 503) < 0)
    operator delete((void *)STACK[0x2128]);
  JUMPOUT(0x100379E94);
}

void sub_10037C294()
{
  JUMPOUT(0x100379EA4);
}

void sub_10037C2A4()
{
  uint64_t v0;

  if (*(char *)(v0 + 583) < 0)
    operator delete((void *)STACK[0x2178]);
  JUMPOUT(0x100379EB0);
}

void sub_10037C2C8()
{
  JUMPOUT(0x100379EC0);
}

void sub_10037C2D8()
{
  uint64_t v0;

  if (*(char *)(v0 + 663) < 0)
    operator delete((void *)STACK[0x21C8]);
  JUMPOUT(0x100379ECCLL);
}

void sub_10037C2FC()
{
  JUMPOUT(0x100379EDCLL);
}

void sub_10037C30C()
{
  uint64_t v0;

  if (*(char *)(v0 + 743) < 0)
    operator delete((void *)STACK[0x2218]);
  JUMPOUT(0x100379EE8);
}

void sub_10037C330()
{
  JUMPOUT(0x100379EF8);
}

void sub_10037C340()
{
  uint64_t v0;

  if (*(char *)(v0 + 823) < 0)
    operator delete((void *)STACK[0x2268]);
  JUMPOUT(0x100379F04);
}

void sub_10037C364()
{
  JUMPOUT(0x100379F14);
}

void sub_10037C374()
{
  uint64_t v0;

  if (*(char *)(v0 + 903) < 0)
    operator delete((void *)STACK[0x22B8]);
  JUMPOUT(0x100379F20);
}

void sub_10037C398()
{
  JUMPOUT(0x100379F30);
}

void sub_10037C3A8()
{
  uint64_t v0;

  if (*(char *)(v0 + 983) < 0)
    operator delete((void *)STACK[0x2308]);
  JUMPOUT(0x100379F3CLL);
}

void sub_10037C3CC()
{
  JUMPOUT(0x100379F4CLL);
}

void sub_10037C3DC()
{
  uint64_t v0;

  if (*(char *)(v0 + 1063) < 0)
    operator delete((void *)STACK[0x2358]);
  JUMPOUT(0x100379F58);
}

void sub_10037C400()
{
  JUMPOUT(0x100379F68);
}

void sub_10037C410()
{
  uint64_t v0;

  if (*(char *)(v0 + 1143) < 0)
    operator delete((void *)STACK[0x23A8]);
  JUMPOUT(0x100379F74);
}

void sub_10037C434()
{
  JUMPOUT(0x100379F84);
}

void sub_10037C444()
{
  uint64_t v0;

  if (*(char *)(v0 + 1223) < 0)
    operator delete((void *)STACK[0x23F8]);
  JUMPOUT(0x100379F90);
}

void sub_10037C468()
{
  JUMPOUT(0x100379FA0);
}

void sub_10037C478()
{
  uint64_t v0;

  if (*(char *)(v0 + 1303) < 0)
    operator delete((void *)STACK[0x2448]);
  JUMPOUT(0x100379FACLL);
}

void sub_10037C49C()
{
  JUMPOUT(0x100379FBCLL);
}

void sub_10037C4AC()
{
  uint64_t v0;

  if (*(char *)(v0 + 1383) < 0)
    operator delete((void *)STACK[0x2498]);
  JUMPOUT(0x100379FC8);
}

void sub_10037C4D0()
{
  JUMPOUT(0x100379FD8);
}

void sub_10037C4E0()
{
  uint64_t v0;

  if (*(char *)(v0 + 1463) < 0)
    operator delete((void *)STACK[0x24E8]);
  JUMPOUT(0x100379FE4);
}

void sub_10037C504()
{
  JUMPOUT(0x100379FF4);
}

void sub_10037C514()
{
  uint64_t v0;

  if (*(char *)(v0 + 1543) < 0)
    operator delete((void *)STACK[0x2538]);
  JUMPOUT(0x10037A000);
}

void sub_10037C538()
{
  JUMPOUT(0x10037A010);
}

void sub_10037C548()
{
  uint64_t v0;

  if (*(char *)(v0 + 1623) < 0)
    operator delete((void *)STACK[0x2588]);
  JUMPOUT(0x10037A01CLL);
}

void sub_10037C56C()
{
  JUMPOUT(0x10037A02CLL);
}

void sub_10037C57C()
{
  uint64_t v0;

  if (*(char *)(v0 + 1703) < 0)
    operator delete((void *)STACK[0x25D8]);
  JUMPOUT(0x10037A038);
}

void sub_10037C5A0()
{
  JUMPOUT(0x10037A048);
}

void sub_10037C5B0()
{
  uint64_t v0;

  if (*(char *)(v0 + 1783) < 0)
    operator delete((void *)STACK[0x2628]);
  JUMPOUT(0x10037A054);
}

void sub_10037C5D4()
{
  JUMPOUT(0x10037A064);
}

void sub_10037C5E4()
{
  uint64_t v0;

  if (*(char *)(v0 + 1863) < 0)
    operator delete((void *)STACK[0x2678]);
  JUMPOUT(0x10037A070);
}

void sub_10037C608()
{
  JUMPOUT(0x10037A080);
}

void sub_10037C618()
{
  uint64_t v0;

  if (*(char *)(v0 + 1943) < 0)
    operator delete((void *)STACK[0x26C8]);
  JUMPOUT(0x10037A08CLL);
}

void sub_10037C63C()
{
  JUMPOUT(0x10037A09CLL);
}

void sub_10037C64C()
{
  uint64_t v0;

  if (*(char *)(v0 + 2023) < 0)
    operator delete((void *)STACK[0x2718]);
  JUMPOUT(0x10037A0A8);
}

void sub_10037C670()
{
  JUMPOUT(0x10037A0B8);
}

void sub_10037C680()
{
  uint64_t v0;

  if (*(char *)(v0 + 2103) < 0)
    operator delete((void *)STACK[0x2768]);
  JUMPOUT(0x10037A0C4);
}

void sub_10037C6A4()
{
  JUMPOUT(0x10037A0D4);
}

void sub_10037C6B4()
{
  uint64_t v0;

  if (*(char *)(v0 + 2183) < 0)
    operator delete((void *)STACK[0x27B8]);
  JUMPOUT(0x10037A0E0);
}

void sub_10037C6D8()
{
  JUMPOUT(0x10037A0F0);
}

void sub_10037C6E8()
{
  uint64_t v0;

  if (*(char *)(v0 + 2263) < 0)
    operator delete((void *)STACK[0x2808]);
  JUMPOUT(0x10037A0FCLL);
}

void sub_10037C70C()
{
  JUMPOUT(0x10037A10CLL);
}

void sub_10037C71C()
{
  uint64_t v0;

  if (*(char *)(v0 + 2343) < 0)
    operator delete((void *)STACK[0x2858]);
  JUMPOUT(0x10037A118);
}

void sub_10037C740()
{
  JUMPOUT(0x10037A128);
}

void sub_10037C750()
{
  uint64_t v0;

  if (*(char *)(v0 + 2423) < 0)
    operator delete((void *)STACK[0x28A8]);
  JUMPOUT(0x10037A134);
}

void sub_10037C774()
{
  JUMPOUT(0x10037A144);
}

void sub_10037C784()
{
  uint64_t v0;

  if (*(char *)(v0 + 2503) < 0)
    operator delete((void *)STACK[0x28F8]);
  JUMPOUT(0x10037A150);
}

void sub_10037C7A8()
{
  JUMPOUT(0x10037A160);
}

void sub_10037C7B8()
{
  uint64_t v0;

  if (*(char *)(v0 + 2583) < 0)
    operator delete((void *)STACK[0x2948]);
  JUMPOUT(0x10037A16CLL);
}

void sub_10037C7DC()
{
  JUMPOUT(0x10037A17CLL);
}

void sub_10037C7EC()
{
  uint64_t v0;

  if (*(char *)(v0 + 2663) < 0)
    operator delete((void *)STACK[0x2998]);
  JUMPOUT(0x10037A188);
}

void sub_10037C810()
{
  JUMPOUT(0x10037A198);
}

void sub_10037C820()
{
  uint64_t v0;

  if (*(char *)(v0 + 2743) < 0)
    operator delete((void *)STACK[0x29E8]);
  JUMPOUT(0x10037A1A4);
}

void sub_10037C844()
{
  JUMPOUT(0x10037A1B4);
}

void sub_10037C854()
{
  uint64_t v0;

  if (*(char *)(v0 + 2823) < 0)
    operator delete((void *)STACK[0x2A38]);
  JUMPOUT(0x10037A1C0);
}

void sub_10037C878()
{
  JUMPOUT(0x10037A1D0);
}

void sub_10037C888()
{
  uint64_t v0;

  if (*(char *)(v0 + 2903) < 0)
    operator delete((void *)STACK[0x2A88]);
  JUMPOUT(0x10037A1DCLL);
}

void sub_10037C8AC()
{
  JUMPOUT(0x10037A1ECLL);
}

void sub_10037C8BC()
{
  uint64_t v0;

  if (*(char *)(v0 + 2983) < 0)
    operator delete((void *)STACK[0x2AD8]);
  JUMPOUT(0x10037A1F8);
}

void sub_10037C8E0()
{
  JUMPOUT(0x10037A208);
}

void sub_10037C8F0()
{
  uint64_t v0;

  if (*(char *)(v0 + 3063) < 0)
    operator delete((void *)STACK[0x2B28]);
  JUMPOUT(0x10037A214);
}

void sub_10037C914()
{
  JUMPOUT(0x10037A224);
}

void sub_10037C924()
{
  uint64_t v0;

  if (*(char *)(v0 + 3143) < 0)
    operator delete((void *)STACK[0x2B78]);
  JUMPOUT(0x10037A230);
}

void sub_10037C948()
{
  JUMPOUT(0x10037A240);
}

void sub_10037C958()
{
  uint64_t v0;

  if (*(char *)(v0 + 3223) < 0)
    operator delete((void *)STACK[0x2BC8]);
  JUMPOUT(0x10037A24CLL);
}

void sub_10037C97C()
{
  JUMPOUT(0x10037A25CLL);
}

void sub_10037C98C()
{
  uint64_t v0;

  if (*(char *)(v0 + 3303) < 0)
    operator delete((void *)STACK[0x2C18]);
  JUMPOUT(0x10037A268);
}

void sub_10037C9B0()
{
  JUMPOUT(0x10037A278);
}

void sub_10037C9C0()
{
  uint64_t v0;

  if (*(char *)(v0 + 3383) < 0)
    operator delete((void *)STACK[0x2C68]);
  JUMPOUT(0x10037A284);
}

void sub_10037C9E4()
{
  JUMPOUT(0x10037A294);
}

void sub_10037C9F4()
{
  uint64_t v0;

  if (*(char *)(v0 + 3463) < 0)
    operator delete((void *)STACK[0x2CB8]);
  JUMPOUT(0x10037A2A0);
}

void sub_10037CA18()
{
  JUMPOUT(0x10037A2B0);
}

void sub_10037CA28()
{
  uint64_t v0;

  if (*(char *)(v0 + 3543) < 0)
    operator delete((void *)STACK[0x2D08]);
  JUMPOUT(0x10037A2BCLL);
}

void sub_10037CA4C()
{
  JUMPOUT(0x10037A2CCLL);
}

void sub_10037CA5C()
{
  uint64_t v0;

  if (*(char *)(v0 + 3623) < 0)
    operator delete((void *)STACK[0x2D58]);
  JUMPOUT(0x10037A2D8);
}

void sub_10037CA80()
{
  JUMPOUT(0x10037A2E8);
}

void sub_10037CA90()
{
  uint64_t v0;

  if (*(char *)(v0 + 3703) < 0)
    operator delete((void *)STACK[0x2DA8]);
  JUMPOUT(0x10037A2F4);
}

void sub_10037CAB4()
{
  JUMPOUT(0x10037A304);
}

void sub_10037CAC4()
{
  uint64_t v0;

  if (*(char *)(v0 + 3783) < 0)
    operator delete((void *)STACK[0x2DF8]);
  JUMPOUT(0x10037A310);
}

void sub_10037CAE8()
{
  JUMPOUT(0x10037A320);
}

void sub_10037CAF8()
{
  uint64_t v0;

  if (*(char *)(v0 + 3863) < 0)
    operator delete((void *)STACK[0x2E48]);
  JUMPOUT(0x10037A32CLL);
}

void sub_10037CB1C()
{
  JUMPOUT(0x10037A33CLL);
}

void sub_10037CB2C()
{
  uint64_t v0;

  if (*(char *)(v0 + 3943) < 0)
    operator delete((void *)STACK[0x2E98]);
  JUMPOUT(0x10037A348);
}

void sub_10037CB50()
{
  JUMPOUT(0x10037A358);
}

void sub_10037CB60()
{
  uint64_t v0;

  if (*(char *)(v0 + 4023) < 0)
    operator delete((void *)STACK[0x2EE8]);
  JUMPOUT(0x10037A364);
}

void sub_10037CB84()
{
  JUMPOUT(0x10037A374);
}

void sub_10037CB94()
{
  uint64_t v0;

  if (*(char *)(v0 + 23) < 0)
    operator delete((void *)STACK[0x2F38]);
  JUMPOUT(0x10037A380);
}

void sub_10037CBB8()
{
  JUMPOUT(0x10037A390);
}

void sub_10037CBC8()
{
  uint64_t v0;

  if (*(char *)(v0 + 103) < 0)
    operator delete((void *)STACK[0x2F88]);
  JUMPOUT(0x10037A39CLL);
}

void sub_10037CBEC()
{
  JUMPOUT(0x10037A3ACLL);
}

void sub_10037CBFC()
{
  uint64_t v0;

  if (*(char *)(v0 + 183) < 0)
    operator delete((void *)STACK[0x2FD8]);
  JUMPOUT(0x10037A3B8);
}

void sub_10037CC20()
{
  JUMPOUT(0x10037A3C8);
}

void sub_10037CC30()
{
  uint64_t v0;

  if (*(char *)(v0 + 263) < 0)
    operator delete((void *)STACK[0x3028]);
  JUMPOUT(0x10037A3D4);
}

void sub_10037CC54()
{
  JUMPOUT(0x10037A3E4);
}

void sub_10037CC64()
{
  uint64_t v0;

  if (*(char *)(v0 + 343) < 0)
    operator delete((void *)STACK[0x3078]);
  JUMPOUT(0x10037A3F0);
}

void sub_10037CC88()
{
  JUMPOUT(0x10037A400);
}

void sub_10037CC98()
{
  uint64_t v0;

  if (*(char *)(v0 + 423) < 0)
    operator delete((void *)STACK[0x30C8]);
  JUMPOUT(0x10037A40CLL);
}

void sub_10037CCBC()
{
  JUMPOUT(0x10037A41CLL);
}

void sub_10037CCCC()
{
  uint64_t v0;

  if (*(char *)(v0 + 503) < 0)
    operator delete((void *)STACK[0x3118]);
  JUMPOUT(0x10037A428);
}

void sub_10037CCF0()
{
  JUMPOUT(0x10037A438);
}

void sub_10037CD00()
{
  uint64_t v0;

  if (*(char *)(v0 + 583) < 0)
    operator delete((void *)STACK[0x3168]);
  JUMPOUT(0x10037A444);
}

void sub_10037CD24()
{
  JUMPOUT(0x10037A454);
}

void sub_10037CD34()
{
  uint64_t v0;

  if (*(char *)(v0 + 663) < 0)
    operator delete((void *)STACK[0x31B8]);
  JUMPOUT(0x10037A460);
}

void sub_10037CD58()
{
  JUMPOUT(0x10037A470);
}

void sub_10037CD68()
{
  uint64_t v0;

  if (*(char *)(v0 + 743) < 0)
    operator delete((void *)STACK[0x3208]);
  JUMPOUT(0x10037A47CLL);
}

void sub_10037CD8C()
{
  JUMPOUT(0x10037A48CLL);
}

void sub_10037CD9C()
{
  uint64_t v0;

  if (*(char *)(v0 + 823) < 0)
    operator delete((void *)STACK[0x3258]);
  JUMPOUT(0x10037A498);
}

void sub_10037CDC0()
{
  JUMPOUT(0x10037A4A8);
}

void sub_10037CDD0()
{
  uint64_t v0;

  if (*(char *)(v0 + 903) < 0)
    operator delete((void *)STACK[0x32A8]);
  JUMPOUT(0x10037A4B4);
}

void sub_10037CDF4()
{
  JUMPOUT(0x10037A4C4);
}

void sub_10037CE04()
{
  uint64_t v0;

  if (*(char *)(v0 + 983) < 0)
    operator delete((void *)STACK[0x32F8]);
  JUMPOUT(0x10037A4D0);
}

void sub_10037CE28()
{
  JUMPOUT(0x10037A4E0);
}

void sub_10037CE38()
{
  uint64_t v0;

  if (*(char *)(v0 + 1063) < 0)
    operator delete((void *)STACK[0x3348]);
  JUMPOUT(0x10037A4ECLL);
}

void sub_10037CE5C()
{
  JUMPOUT(0x10037A4FCLL);
}

void sub_10037CE6C()
{
  uint64_t v0;

  if (*(char *)(v0 + 1143) < 0)
    operator delete((void *)STACK[0x3398]);
  JUMPOUT(0x10037A508);
}

void sub_10037CE90()
{
  JUMPOUT(0x10037A518);
}

void sub_10037CEA0()
{
  uint64_t v0;

  if (*(char *)(v0 + 1223) < 0)
    operator delete((void *)STACK[0x33E8]);
  JUMPOUT(0x10037A524);
}

void sub_10037CEC4()
{
  JUMPOUT(0x10037A534);
}

void sub_10037CED4()
{
  uint64_t v0;

  if (*(char *)(v0 + 1303) < 0)
    operator delete((void *)STACK[0x3438]);
  JUMPOUT(0x10037A540);
}

void sub_10037CEF8()
{
  JUMPOUT(0x10037A550);
}

void sub_10037CF08()
{
  uint64_t v0;

  if (*(char *)(v0 + 1383) < 0)
    operator delete((void *)STACK[0x3488]);
  JUMPOUT(0x10037A55CLL);
}

void sub_10037CF2C()
{
  JUMPOUT(0x10037A56CLL);
}

void sub_10037CF3C()
{
  uint64_t v0;

  if (*(char *)(v0 + 1463) < 0)
    operator delete((void *)STACK[0x34D8]);
  JUMPOUT(0x10037A578);
}

void sub_10037CF60()
{
  JUMPOUT(0x10037A588);
}

void sub_10037CF70()
{
  uint64_t v0;

  if (*(char *)(v0 + 1543) < 0)
    operator delete((void *)STACK[0x3528]);
  JUMPOUT(0x10037A594);
}

void sub_10037CF94()
{
  JUMPOUT(0x10037A5A4);
}

void sub_10037CFA4()
{
  uint64_t v0;

  if (*(char *)(v0 + 1623) < 0)
    operator delete((void *)STACK[0x3578]);
  JUMPOUT(0x10037A5B0);
}

void sub_10037CFC8()
{
  JUMPOUT(0x10037A5C0);
}

void sub_10037CFD8()
{
  uint64_t v0;

  if (*(char *)(v0 + 1703) < 0)
    operator delete((void *)STACK[0x35C8]);
  JUMPOUT(0x10037A5CCLL);
}

void sub_10037CFFC()
{
  JUMPOUT(0x10037A5DCLL);
}

void sub_10037D00C()
{
  uint64_t v0;

  if (*(char *)(v0 + 1783) < 0)
    operator delete((void *)STACK[0x3618]);
  JUMPOUT(0x10037A5E8);
}

void sub_10037D030()
{
  JUMPOUT(0x10037A5F8);
}

void sub_10037D040()
{
  uint64_t v0;

  if (*(char *)(v0 + 1863) < 0)
    operator delete((void *)STACK[0x3668]);
  JUMPOUT(0x10037A604);
}

void sub_10037D064()
{
  JUMPOUT(0x10037A614);
}

void sub_10037D074()
{
  uint64_t v0;

  if (*(char *)(v0 + 1943) < 0)
    operator delete((void *)STACK[0x36B8]);
  JUMPOUT(0x10037A620);
}

void sub_10037D098()
{
  JUMPOUT(0x10037A630);
}

void sub_10037D0A8()
{
  uint64_t v0;

  if (*(char *)(v0 + 2023) < 0)
    operator delete((void *)STACK[0x3708]);
  JUMPOUT(0x10037A63CLL);
}

void sub_10037D0CC()
{
  JUMPOUT(0x10037A64CLL);
}

void sub_10037D0DC()
{
  uint64_t v0;

  if (*(char *)(v0 + 2103) < 0)
    operator delete((void *)STACK[0x3758]);
  JUMPOUT(0x10037A658);
}

void sub_10037D100()
{
  JUMPOUT(0x10037A668);
}

void sub_10037D110()
{
  uint64_t v0;

  if (*(char *)(v0 + 2183) < 0)
    operator delete((void *)STACK[0x37A8]);
  JUMPOUT(0x10037A674);
}

void sub_10037D134()
{
  JUMPOUT(0x10037A684);
}

void sub_10037D144()
{
  uint64_t v0;

  if (*(char *)(v0 + 2263) < 0)
    operator delete((void *)STACK[0x37F8]);
  JUMPOUT(0x10037A690);
}

void sub_10037D168()
{
  JUMPOUT(0x10037A6A0);
}

void sub_10037D178()
{
  uint64_t v0;

  if (*(char *)(v0 + 2343) < 0)
    operator delete((void *)STACK[0x3848]);
  JUMPOUT(0x10037A6ACLL);
}

void sub_10037D19C()
{
  JUMPOUT(0x10037A6BCLL);
}

void sub_10037D1AC()
{
  uint64_t v0;

  if (*(char *)(v0 + 2423) < 0)
    operator delete((void *)STACK[0x3898]);
  JUMPOUT(0x10037A6C8);
}

void sub_10037D1D0()
{
  JUMPOUT(0x10037A6D8);
}

void sub_10037D1E0()
{
  uint64_t v0;

  if (*(char *)(v0 + 2503) < 0)
    operator delete((void *)STACK[0x38E8]);
  JUMPOUT(0x10037A6E4);
}

void sub_10037D204()
{
  JUMPOUT(0x10037A6F4);
}

void sub_10037D214()
{
  uint64_t v0;

  if (*(char *)(v0 + 2583) < 0)
    operator delete((void *)STACK[0x3938]);
  JUMPOUT(0x10037A700);
}

void sub_10037D238()
{
  JUMPOUT(0x10037A710);
}

void sub_10037D248()
{
  uint64_t v0;

  if (*(char *)(v0 + 2663) < 0)
    operator delete((void *)STACK[0x3988]);
  JUMPOUT(0x10037A71CLL);
}

void sub_10037D26C()
{
  JUMPOUT(0x10037A72CLL);
}

void sub_10037D27C()
{
  uint64_t v0;

  if (*(char *)(v0 + 2743) < 0)
    operator delete((void *)STACK[0x39D8]);
  JUMPOUT(0x10037A738);
}

void sub_10037D2A0()
{
  JUMPOUT(0x10037A748);
}

void sub_10037D2B0()
{
  uint64_t v0;

  if (*(char *)(v0 + 2823) < 0)
    operator delete((void *)STACK[0x3A28]);
  JUMPOUT(0x10037A754);
}

void sub_10037D2D4()
{
  JUMPOUT(0x10037A764);
}

void sub_10037D2E4()
{
  uint64_t v0;

  if (*(char *)(v0 + 2903) < 0)
    operator delete((void *)STACK[0x3A78]);
  JUMPOUT(0x10037A770);
}

void sub_10037D308()
{
  JUMPOUT(0x10037A780);
}

void sub_10037D318()
{
  uint64_t v0;

  if (*(char *)(v0 + 2983) < 0)
    operator delete((void *)STACK[0x3AC8]);
  JUMPOUT(0x10037A78CLL);
}

void sub_10037D33C()
{
  JUMPOUT(0x10037A79CLL);
}

void sub_10037D34C()
{
  uint64_t v0;

  if (*(char *)(v0 + 3063) < 0)
    operator delete((void *)STACK[0x3B18]);
  JUMPOUT(0x10037A7A8);
}

void sub_10037D370()
{
  JUMPOUT(0x10037A7B8);
}

void sub_10037D380()
{
  uint64_t v0;

  if (*(char *)(v0 + 3143) < 0)
    operator delete((void *)STACK[0x3B68]);
  JUMPOUT(0x10037A7C4);
}

void sub_10037D3A4()
{
  JUMPOUT(0x10037A7D4);
}

void sub_10037D3B4()
{
  uint64_t v0;

  if (*(char *)(v0 + 3223) < 0)
    operator delete((void *)STACK[0x3BB8]);
  JUMPOUT(0x10037A7E0);
}

void sub_10037D3D8()
{
  JUMPOUT(0x10037A7F0);
}

void sub_10037D3E8()
{
  uint64_t v0;

  if (*(char *)(v0 + 3303) < 0)
    operator delete((void *)STACK[0x3C08]);
  JUMPOUT(0x10037A7FCLL);
}

void sub_10037D40C()
{
  JUMPOUT(0x10037A80CLL);
}

void sub_10037D41C()
{
  uint64_t v0;

  if (*(char *)(v0 + 3383) < 0)
    operator delete((void *)STACK[0x3C58]);
  JUMPOUT(0x10037A818);
}

void sub_10037D440()
{
  JUMPOUT(0x10037A828);
}

void sub_10037D450()
{
  uint64_t v0;

  if (*(char *)(v0 + 3463) < 0)
    operator delete((void *)STACK[0x3CA8]);
  JUMPOUT(0x10037A834);
}

void sub_10037D474()
{
  JUMPOUT(0x10037A844);
}

void sub_10037D484()
{
  uint64_t v0;

  if (*(char *)(v0 + 3543) < 0)
    operator delete((void *)STACK[0x3CF8]);
  JUMPOUT(0x10037A850);
}

void sub_10037D4A8()
{
  JUMPOUT(0x10037A860);
}

void sub_10037D4B8()
{
  uint64_t v0;

  if (*(char *)(v0 + 3623) < 0)
    operator delete((void *)STACK[0x3D48]);
  JUMPOUT(0x10037A86CLL);
}

void sub_10037D4DC()
{
  JUMPOUT(0x10037A87CLL);
}

void sub_10037D4EC()
{
  uint64_t v0;

  if (*(char *)(v0 + 3703) < 0)
    operator delete((void *)STACK[0x3D98]);
  JUMPOUT(0x10037A888);
}

void sub_10037D510()
{
  JUMPOUT(0x10037A898);
}

void sub_10037D520()
{
  uint64_t v0;

  if (*(char *)(v0 + 3783) < 0)
    operator delete((void *)STACK[0x3DE8]);
  JUMPOUT(0x10037A8A4);
}

void sub_10037D544()
{
  JUMPOUT(0x10037A8B4);
}

void sub_10037D554()
{
  uint64_t v0;

  if (*(char *)(v0 + 3863) < 0)
    operator delete((void *)STACK[0x3E38]);
  JUMPOUT(0x10037A8C0);
}

void sub_10037D578()
{
  JUMPOUT(0x10037A8D0);
}

void sub_10037D588()
{
  uint64_t v0;

  if (*(char *)(v0 + 3943) < 0)
    operator delete((void *)STACK[0x3E88]);
  JUMPOUT(0x10037A8DCLL);
}

void sub_10037D5AC()
{
  JUMPOUT(0x10037A8ECLL);
}

void sub_10037D5BC()
{
  uint64_t v0;

  if (*(char *)(v0 + 4023) < 0)
    operator delete((void *)STACK[0x3ED8]);
  JUMPOUT(0x10037A8F8);
}

void sub_10037D5E0()
{
  JUMPOUT(0x10037A908);
}

void sub_10037D5F0()
{
  uint64_t v0;

  if (*(char *)(v0 + 23) < 0)
    operator delete((void *)STACK[0x3F28]);
  JUMPOUT(0x10037A914);
}

void sub_10037D614()
{
  JUMPOUT(0x10037A924);
}

void sub_10037D624()
{
  uint64_t v0;

  if (*(char *)(v0 + 103) < 0)
    operator delete((void *)STACK[0x3F78]);
  JUMPOUT(0x10037A930);
}

void sub_10037D648()
{
  JUMPOUT(0x10037A940);
}

void sub_10037D658()
{
  uint64_t v0;

  if (*(char *)(v0 + 183) < 0)
    operator delete((void *)STACK[0x3FC8]);
  JUMPOUT(0x10037A94CLL);
}

void sub_10037D67C()
{
  JUMPOUT(0x10037A95CLL);
}

void sub_10037D68C()
{
  uint64_t v0;

  if (*(char *)(v0 + 263) < 0)
    operator delete((void *)STACK[0x4018]);
  JUMPOUT(0x10037A968);
}

void sub_10037D6B0()
{
  JUMPOUT(0x10037A978);
}

void sub_10037D6C0()
{
  uint64_t v0;

  if (*(char *)(v0 + 343) < 0)
    operator delete((void *)STACK[0x4068]);
  JUMPOUT(0x10037A984);
}

void sub_10037D6E4()
{
  JUMPOUT(0x10037A994);
}

void sub_10037D6F4()
{
  uint64_t v0;

  if (*(char *)(v0 + 423) < 0)
    operator delete((void *)STACK[0x40B8]);
  JUMPOUT(0x10037A9A0);
}

void sub_10037D718()
{
  JUMPOUT(0x10037A9B0);
}

void sub_10037D728()
{
  uint64_t v0;

  if (*(char *)(v0 + 503) < 0)
    operator delete((void *)STACK[0x4108]);
  JUMPOUT(0x10037A9BCLL);
}

void sub_10037D74C()
{
  JUMPOUT(0x10037A9CCLL);
}

void sub_10037D75C()
{
  uint64_t v0;

  if (*(char *)(v0 + 583) < 0)
    operator delete((void *)STACK[0x4158]);
  JUMPOUT(0x10037A9D8);
}

void sub_10037D780()
{
  JUMPOUT(0x10037A9E8);
}

void sub_10037D790()
{
  uint64_t v0;

  if (*(char *)(v0 + 663) < 0)
    operator delete((void *)STACK[0x41A8]);
  JUMPOUT(0x10037A9F4);
}

void sub_10037D7B4()
{
  JUMPOUT(0x10037AA04);
}

void sub_10037D7C4()
{
  uint64_t v0;

  if (*(char *)(v0 + 743) < 0)
    operator delete((void *)STACK[0x41F8]);
  JUMPOUT(0x10037AA10);
}

void sub_10037D7E8()
{
  JUMPOUT(0x10037AA20);
}

void sub_10037D7F8()
{
  uint64_t v0;

  if (*(char *)(v0 + 823) < 0)
    operator delete((void *)STACK[0x4248]);
  JUMPOUT(0x10037AA2CLL);
}

void sub_10037D81C()
{
  JUMPOUT(0x10037AA3CLL);
}

void sub_10037D82C()
{
  uint64_t v0;

  if (*(char *)(v0 + 903) < 0)
    operator delete((void *)STACK[0x4298]);
  JUMPOUT(0x10037AA48);
}

void sub_10037D850()
{
  JUMPOUT(0x10037AA58);
}

void sub_10037D860()
{
  uint64_t v0;

  if (*(char *)(v0 + 983) < 0)
    operator delete((void *)STACK[0x42E8]);
  JUMPOUT(0x10037AA64);
}

void sub_10037D884()
{
  JUMPOUT(0x10037AA74);
}

void sub_10037D894()
{
  uint64_t v0;

  if (*(char *)(v0 + 1063) < 0)
    operator delete((void *)STACK[0x4338]);
  JUMPOUT(0x10037AA80);
}

void sub_10037D8B8()
{
  JUMPOUT(0x10037AA90);
}

void sub_10037D8C8()
{
  uint64_t v0;

  if (*(char *)(v0 + 1143) < 0)
    operator delete((void *)STACK[0x4388]);
  JUMPOUT(0x10037AA9CLL);
}

void sub_10037D8EC()
{
  JUMPOUT(0x10037AAACLL);
}

void sub_10037D8FC()
{
  uint64_t v0;

  if (*(char *)(v0 + 1223) < 0)
    operator delete((void *)STACK[0x43D8]);
  JUMPOUT(0x10037AAB8);
}

void sub_10037D920()
{
  JUMPOUT(0x10037AAC8);
}

void sub_10037D930()
{
  uint64_t v0;

  if (*(char *)(v0 + 1303) < 0)
    operator delete((void *)STACK[0x4428]);
  JUMPOUT(0x10037AAD4);
}

void sub_10037D954()
{
  JUMPOUT(0x10037AAE4);
}

void sub_10037D964()
{
  uint64_t v0;

  if (*(char *)(v0 + 1383) < 0)
    operator delete((void *)STACK[0x4478]);
  JUMPOUT(0x10037AAF0);
}

void sub_10037D988()
{
  JUMPOUT(0x10037AB00);
}

void sub_10037D998()
{
  uint64_t v0;

  if (*(char *)(v0 + 1463) < 0)
    operator delete((void *)STACK[0x44C8]);
  JUMPOUT(0x10037AB0CLL);
}

void sub_10037D9BC()
{
  JUMPOUT(0x10037AB1CLL);
}

void sub_10037D9CC()
{
  uint64_t v0;

  if (*(char *)(v0 + 1543) < 0)
    operator delete((void *)STACK[0x4518]);
  JUMPOUT(0x10037AB28);
}

void sub_10037D9F0()
{
  JUMPOUT(0x10037AB38);
}

void sub_10037DA00()
{
  uint64_t v0;

  if (*(char *)(v0 + 1623) < 0)
    operator delete((void *)STACK[0x4568]);
  JUMPOUT(0x10037AB44);
}

void sub_10037DA24()
{
  JUMPOUT(0x10037AB54);
}

void sub_10037DA34()
{
  uint64_t v0;

  if (*(char *)(v0 + 1703) < 0)
    operator delete((void *)STACK[0x45B8]);
  JUMPOUT(0x10037AB60);
}

void sub_10037DA58()
{
  JUMPOUT(0x10037AB70);
}

void sub_10037DA68()
{
  uint64_t v0;

  if (*(char *)(v0 + 1783) < 0)
    operator delete((void *)STACK[0x4608]);
  JUMPOUT(0x10037AB7CLL);
}

void sub_10037DA8C()
{
  JUMPOUT(0x10037AB8CLL);
}

void sub_10037DA9C()
{
  uint64_t v0;

  if (*(char *)(v0 + 1863) < 0)
    operator delete((void *)STACK[0x4658]);
  JUMPOUT(0x10037AB98);
}

void sub_10037DAC0()
{
  JUMPOUT(0x10037ABA8);
}

void sub_10037DAD0()
{
  uint64_t v0;

  if (*(char *)(v0 + 1943) < 0)
    operator delete((void *)STACK[0x46A8]);
  JUMPOUT(0x10037ABB4);
}

void sub_10037DAF4()
{
  JUMPOUT(0x10037ABC4);
}

void sub_10037DB04()
{
  uint64_t v0;

  if (*(char *)(v0 + 2023) < 0)
    operator delete((void *)STACK[0x46F8]);
  JUMPOUT(0x10037ABD0);
}

void sub_10037DB28()
{
  JUMPOUT(0x10037ABE0);
}

void sub_10037DB38()
{
  uint64_t v0;

  if (*(char *)(v0 + 2103) < 0)
    operator delete((void *)STACK[0x4748]);
  JUMPOUT(0x10037ABECLL);
}

void sub_10037DB5C()
{
  JUMPOUT(0x10037ABFCLL);
}

void sub_10037DB6C()
{
  uint64_t v0;

  if (*(char *)(v0 + 2183) < 0)
    operator delete((void *)STACK[0x4798]);
  JUMPOUT(0x10037AC08);
}

void sub_10037DB90()
{
  JUMPOUT(0x10037AC18);
}

void sub_10037DBA0()
{
  uint64_t v0;

  if (*(char *)(v0 + 2263) < 0)
    operator delete((void *)STACK[0x47E8]);
  JUMPOUT(0x10037AC24);
}

void sub_10037DBC4()
{
  JUMPOUT(0x10037AC34);
}

void sub_10037DBD4()
{
  uint64_t v0;

  if (*(char *)(v0 + 2343) < 0)
    operator delete((void *)STACK[0x4838]);
  JUMPOUT(0x10037AC40);
}

void sub_10037DBF8()
{
  JUMPOUT(0x10037AC50);
}

void sub_10037DC08()
{
  uint64_t v0;

  if (*(char *)(v0 + 2423) < 0)
    operator delete((void *)STACK[0x4888]);
  JUMPOUT(0x10037AC5CLL);
}

void sub_10037DC2C()
{
  JUMPOUT(0x10037AC6CLL);
}

void sub_10037DC3C()
{
  uint64_t v0;

  if (*(char *)(v0 + 2503) < 0)
    operator delete((void *)STACK[0x48D8]);
  JUMPOUT(0x10037AC78);
}

void sub_10037DC60()
{
  JUMPOUT(0x10037AC88);
}

void sub_10037DC70()
{
  uint64_t v0;

  if (*(char *)(v0 + 2583) < 0)
    operator delete((void *)STACK[0x4928]);
  JUMPOUT(0x10037AC94);
}

void sub_10037DC94()
{
  JUMPOUT(0x10037ACA4);
}

void sub_10037DCA4()
{
  uint64_t v0;

  if (*(char *)(v0 + 2663) < 0)
    operator delete((void *)STACK[0x4978]);
  JUMPOUT(0x10037ACB0);
}

void sub_10037DCC8()
{
  JUMPOUT(0x10037ACC0);
}

void sub_10037DCD8()
{
  uint64_t v0;

  if (*(char *)(v0 + 2743) < 0)
    operator delete((void *)STACK[0x49C8]);
  JUMPOUT(0x10037ACCCLL);
}

void sub_10037DCFC()
{
  JUMPOUT(0x10037ACDCLL);
}

void sub_10037DD0C()
{
  uint64_t v0;

  if (*(char *)(v0 + 2823) < 0)
    operator delete((void *)STACK[0x4A18]);
  JUMPOUT(0x10037ACE8);
}

void sub_10037DD30()
{
  JUMPOUT(0x10037ACF8);
}

void sub_10037DD40()
{
  uint64_t v0;

  if (*(char *)(v0 + 2903) < 0)
    operator delete((void *)STACK[0x4A68]);
  JUMPOUT(0x10037AD04);
}

void sub_10037DD64()
{
  JUMPOUT(0x10037AD14);
}

void sub_10037DD74()
{
  uint64_t v0;

  if (*(char *)(v0 + 2983) < 0)
    operator delete((void *)STACK[0x4AB8]);
  JUMPOUT(0x10037AD20);
}

void sub_10037DD98()
{
  JUMPOUT(0x10037AD30);
}

void sub_10037DDA8()
{
  uint64_t v0;

  if (*(char *)(v0 + 3063) < 0)
    operator delete((void *)STACK[0x4B08]);
  JUMPOUT(0x10037AD3CLL);
}

void sub_10037DDCC()
{
  JUMPOUT(0x10037AD4CLL);
}

void sub_10037DDDC()
{
  uint64_t v0;

  if (*(char *)(v0 + 3143) < 0)
    operator delete((void *)STACK[0x4B58]);
  JUMPOUT(0x10037AD58);
}

void sub_10037DE00()
{
  JUMPOUT(0x10037AD68);
}

void sub_10037DE0C()
{
  JUMPOUT(0x10037AD68);
}

void sub_10037DE20()
{
  uint64_t v0;

  if (*(char *)(v0 + 3223) < 0)
    operator delete((void *)STACK[0x4BA8]);
  JUMPOUT(0x10037AD74);
}

void sub_10037DE4C()
{
  JUMPOUT(0x10037ADB0);
}

uint64_t sub_10037DE54()
{
  unint64_t v0;
  unsigned __int8 *v1;
  void *v3[2];
  char v4;
  void *__p;
  char v6;
  __int16 v7;
  void *v8[2];
  char v9;
  void *v10[2];
  char v11;
  void *v12;
  char v13;
  __int16 v14;
  void *v15[2];
  char v16;
  void *v17[2];
  char v18;
  void *v19;
  char v20;
  __int16 v21;
  void *v22[2];
  char v23;
  void *v24[2];
  char v25;
  void *v26;
  char v27;
  __int16 v28;
  void *v29[2];
  char v30;
  void *v31[2];
  char v32;
  void *v33;
  char v34;
  __int16 v35;
  void *v36[2];
  char v37;
  void *v38[2];
  char v39;
  void *v40;
  char v41;
  __int16 v42;
  void *v43[2];
  char v44;
  void *v45[2];
  char v46;
  void *v47;
  char v48;
  __int16 v49;
  void *v50[2];
  char v51;
  void *v52[2];
  char v53;
  void *v54;
  char v55;
  __int16 v56;
  void *v57[2];
  char v58;
  void *v59[2];
  char v60;
  void *v61;
  char v62;
  __int16 v63;
  void *v64[2];
  char v65;
  void *v66[2];
  char v67;
  void *v68;
  char v69;
  __int16 v70;
  void *v71[2];
  char v72;
  void *v73[2];
  char v74;
  void *v75;
  char v76;
  __int16 v77;
  void *v78[2];
  char v79;
  void *v80[2];
  char v81;
  void *v82;
  char v83;
  __int16 v84;
  void *v85[2];
  char v86;
  void *v87[2];
  char v88;
  void *v89;
  char v90;
  __int16 v91;
  void *v92[2];
  char v93;
  void *v94[2];
  char v95;
  void *v96;
  char v97;
  __int16 v98;
  void *v99[2];
  char v100;
  void *v101[2];
  char v102;
  void *v103;
  char v104;
  __int16 v105;
  void *v106[2];
  char v107;
  void *v108[2];
  char v109;
  void *v110;
  char v111;
  __int16 v112;
  void *v113[2];
  char v114;
  void *v115[2];
  char v116;
  void *v117;
  char v118;
  __int16 v119;
  void *v120[2];
  char v121;
  void *v122[2];
  char v123;
  void *v124;
  char v125;
  __int16 v126;
  void *v127[2];
  char v128;
  void *v129[2];
  char v130;
  void *v131;
  char v132;
  __int16 v133;
  void *v134[2];
  char v135;
  void *v136[2];
  char v137;
  void *v138;
  char v139;
  __int16 v140;
  void *v141[2];
  char v142;
  void *v143[2];
  char v144;
  void *v145;
  char v146;
  __int16 v147;
  void *v148[2];
  char v149;
  void *v150[2];
  char v151;
  void *v152;
  char v153;
  __int16 v154;
  void *v155[2];
  char v156;
  void *v157[2];
  char v158;
  void *v159;
  char v160;
  __int16 v161;
  void *v162[2];
  char v163;
  void *v164[2];
  char v165;
  void *v166;
  char v167;
  __int16 v168;
  void *v169[2];
  char v170;
  void *v171[2];
  char v172;
  void *v173;
  char v174;
  __int16 v175;
  void *v176[2];
  char v177;
  void *v178[2];
  char v179;
  void *v180;
  char v181;
  __int16 v182;
  void *v183[2];
  char v184;
  void *v185[2];
  char v186;
  void *v187;
  char v188;
  __int16 v189;
  void *v190[2];
  char v191;
  void *v192[2];
  char v193;
  void *v194;
  char v195;
  __int16 v196;
  void *v197[2];
  char v198;
  void *v199[2];
  char v200;
  void *v201;
  char v202;
  __int16 v203;
  void *v204[2];
  char v205;
  void *v206[2];
  char v207;
  void *v208;
  char v209;
  __int16 v210;
  void *v211[2];
  char v212;
  void *v213[2];
  char v214;
  void *v215;
  char v216;
  __int16 v217;
  void *v218[2];
  char v219;
  void *v220[2];
  char v221;
  void *v222;
  char v223;
  __int16 v224;
  void *v225[2];
  char v226;
  void *v227[2];
  char v228;
  void *v229;
  char v230;
  __int16 v231;
  void *v232[2];
  char v233;
  void *v234[2];
  char v235;
  void *v236;
  char v237;
  __int16 v238;
  void *v239[2];
  char v240;
  void *v241[2];
  char v242;
  void *v243;
  char v244;
  __int16 v245;
  void *v246[2];
  char v247;
  void *v248[2];
  char v249;
  void *v250;
  char v251;
  __int16 v252;
  void *v253[2];
  char v254;
  void *v255[2];
  char v256;
  void *v257;
  char v258;
  __int16 v259;
  void *v260[2];
  char v261;
  void *v262[2];
  char v263;
  void *v264;
  char v265;
  __int16 v266;
  void *v267[2];
  char v268;
  void *v269[2];
  char v270;
  void *v271;
  char v272;
  __int16 v273;
  void *v274[2];
  char v275;
  void *v276[2];
  char v277;
  void *v278;
  char v279;
  __int16 v280;
  void *v281[2];
  char v282;
  void *v283[2];
  char v284;
  void *v285;
  char v286;
  __int16 v287;
  void *v288[2];
  char v289;
  void *v290[2];
  char v291;
  void *v292;
  char v293;
  __int16 v294;
  void *v295[2];
  char v296;
  void *v297[2];
  char v298;
  void *v299;
  char v300;
  __int16 v301;
  void *v302[2];
  char v303;
  void *v304[2];
  char v305;
  void *v306;
  char v307;
  __int16 v308;
  void *v309[2];
  char v310;
  void *v311[2];
  char v312;
  void *v313;
  char v314;
  __int16 v315;
  void *v316[2];
  char v317;
  void *v318[2];
  char v319;
  void *v320;
  char v321;
  __int16 v322;
  void *v323[2];
  char v324;
  void *v325[2];
  char v326;
  void *v327;
  char v328;
  __int16 v329;
  void *v330[2];
  char v331;
  void *v332[2];
  char v333;
  void *v334;
  char v335;
  __int16 v336;
  void *v337[2];
  char v338;
  void *v339[2];
  char v340;
  void *v341;
  char v342;
  __int16 v343;
  void *v344[2];
  char v345;
  void *v346[2];
  char v347;
  void *v348;
  char v349;
  __int16 v350;
  void *v351[2];
  char v352;
  void *v353[2];
  char v354;
  void *v355;
  char v356;
  __int16 v357;
  void *v358[2];
  char v359;
  void *v360[2];
  char v361;
  void *v362;
  char v363;
  __int16 v364;
  void *v365[2];
  char v366;
  void *v367[2];
  char v368;
  void *v369;
  char v370;
  __int16 v371;
  void *v372[2];
  char v373;
  void *v374[2];
  char v375;
  void *v376;
  char v377;
  __int16 v378;
  void *v379[2];
  char v380;
  void *v381[2];
  char v382;
  void *v383;
  char v384;
  __int16 v385;
  void *v386[2];
  char v387;
  void *v388[2];
  char v389;
  void *v390;
  char v391;
  __int16 v392;
  void *v393[2];
  char v394;
  void *v395[2];
  char v396;
  void *v397;
  char v398;
  __int16 v399;
  void *v400[2];
  char v401;
  void *v402[2];
  char v403;
  void *v404;
  char v405;
  __int16 v406;
  void *v407[2];
  char v408;
  void *v409[2];
  char v410;
  void *v411;
  char v412;
  __int16 v413;
  void *v414[2];
  char v415;
  void *v416[2];
  char v417;
  void *v418;
  char v419;
  __int16 v420;
  void *v421[2];
  char v422;
  void *v423[2];
  char v424;
  void *v425;
  char v426;
  __int16 v427;
  void *v428[2];
  char v429;
  void *v430[2];
  char v431;
  void *v432;
  char v433;
  __int16 v434;
  void *v435[2];
  char v436;
  void *v437[2];
  char v438;
  void *v439;
  char v440;
  __int16 v441;
  void *v442[2];
  char v443;
  void *v444[2];
  char v445;
  void *v446;
  char v447;
  __int16 v448;
  void *v449[2];
  char v450;
  void *v451[2];
  char v452;
  void *v453;
  char v454;
  __int16 v455;
  void *v456[2];
  char v457;
  void *v458[2];
  char v459;
  void *v460;
  char v461;
  __int16 v462;
  void *v463[2];
  char v464;
  void *v465[2];
  char v466;
  void *v467;
  char v468;
  __int16 v469;
  void *v470[2];
  char v471;
  void *v472[2];
  char v473;
  void *v474;
  char v475;
  __int16 v476;
  void *v477[2];
  char v478;
  void *v479[2];
  char v480;
  void *v481;
  char v482;
  __int16 v483;
  void *v484[2];
  char v485;
  void *v486[2];
  char v487;
  void *v488;
  char v489;
  __int16 v490;
  void *v491[2];
  char v492;
  void *v493[2];
  char v494;
  void *v495;
  char v496;
  __int16 v497;
  void *v498[2];
  char v499;
  void *v500[2];
  char v501;
  void *v502;
  char v503;
  __int16 v504;
  void *v505[2];
  char v506;
  void *v507[2];
  char v508;
  void *v509;
  char v510;
  __int16 v511;
  void *v512[2];
  char v513;
  void *v514[2];
  char v515;
  void *v516;
  char v517;
  __int16 v518;
  void *v519[2];
  char v520;
  void *v521[2];
  char v522;
  void *v523;
  char v524;
  __int16 v525;
  void *v526[2];
  char v527;
  void *v528[2];
  char v529;
  void *v530;
  char v531;
  __int16 v532;
  void *v533[2];
  char v534;
  void *v535[2];
  char v536;
  void *v537;
  char v538;
  __int16 v539;
  void *v540[2];
  char v541;
  void *v542[2];
  char v543;
  void *v544;
  char v545;
  __int16 v546;
  void *v547[2];
  char v548;
  void *v549[2];
  char v550;
  void *v551;
  char v552;
  __int16 v553;
  void *v554[2];
  char v555;
  void *v556[2];
  char v557;
  void *v558;
  char v559;
  __int16 v560;
  void *v561[2];
  char v562;
  void *v563[2];
  char v564;
  void *v565;
  char v566;
  __int16 v567;
  void *v568[2];
  char v569;
  void *v570[2];
  char v571;
  void *v572;
  char v573;
  __int16 v574;
  void *v575[2];
  char v576;
  void *v577[2];
  char v578;
  void *v579;
  char v580;
  __int16 v581;
  void *v582[2];
  char v583;
  void *v584[2];
  char v585;
  void *v586;
  char v587;
  __int16 v588;
  void *v589[2];
  char v590;
  void *v591[2];
  char v592;
  void *v593;
  char v594;
  __int16 v595;
  void *v596[2];
  char v597;
  void *v598[2];
  char v599;
  void *v600;
  char v601;
  __int16 v602;
  void *v603[2];
  char v604;
  void *v605[2];
  char v606;
  void *v607;
  char v608;
  __int16 v609;
  void *v610[2];
  char v611;
  void *v612[2];
  char v613;
  void *v614;
  char v615;
  __int16 v616;
  void *v617[2];
  char v618;
  void *v619[2];
  char v620;
  void *v621;
  char v622;
  __int16 v623;
  void *v624[2];
  char v625;
  void *v626[2];
  char v627;
  void *v628;
  char v629;
  __int16 v630;
  void *v631[2];
  char v632;
  void *v633[2];
  char v634;
  void *v635;
  char v636;
  __int16 v637;
  void *v638[2];
  char v639;
  void *v640[2];
  char v641;
  void *v642;
  char v643;
  __int16 v644;
  void *v645[2];
  char v646;
  void *v647[2];
  char v648;
  void *v649;
  char v650;
  __int16 v651;
  void *v652[2];
  char v653;
  void *v654[2];
  char v655;
  void *v656;
  char v657;
  __int16 v658;
  void *v659[2];
  char v660;
  void *v661[2];
  char v662;
  void *v663;
  char v664;
  __int16 v665;
  void *v666[2];
  char v667;
  void *v668[2];
  char v669;
  void *v670;
  char v671;
  __int16 v672;
  void *v673[2];
  char v674;
  void *v675[2];
  char v676;
  void *v677;
  char v678;
  __int16 v679;
  void *v680[2];
  char v681;
  void *v682[2];
  char v683;
  void *v684;
  char v685;
  __int16 v686;
  void *v687[2];
  char v688;
  void *v689[2];
  char v690;
  void *v691;
  char v692;
  __int16 v693;
  void *v694[2];
  char v695;
  void *v696[2];
  char v697;
  void *v698;
  char v699;
  __int16 v700;
  void *v701[2];
  char v702;
  void *v703[2];
  char v704;
  void *v705;
  char v706;
  __int16 v707;
  void *v708[2];
  char v709;
  void *v710[2];
  char v711;
  void *v712;
  char v713;
  __int16 v714;
  void *v715[2];
  char v716;
  void *v717[2];
  char v718;
  void *v719;
  char v720;
  __int16 v721;
  void *v722[2];
  char v723;
  void *v724[2];
  char v725;
  void *v726;
  char v727;
  __int16 v728;
  void *v729[2];
  char v730;
  void *v731[2];
  char v732;
  void *v733;
  char v734;
  __int16 v735;
  void *v736[2];
  char v737;
  void *v738[2];
  char v739;
  void *v740;
  char v741;
  __int16 v742;
  void *v743[2];
  char v744;
  void *v745[2];
  char v746;
  void *v747;
  char v748;
  __int16 v749;
  void *v750[2];
  char v751;
  void *v752[2];
  char v753;
  void *v754;
  char v755;
  __int16 v756;
  void *v757[2];
  char v758;
  void *v759[2];
  char v760;
  void *v761;
  char v762;
  __int16 v763;
  void *v764[2];
  char v765;
  void *v766[2];
  char v767;
  void *v768;
  char v769;
  __int16 v770;
  void *v771[2];
  char v772;
  void *v773[2];
  char v774;
  void *v775;
  char v776;
  __int16 v777;
  void *v778[2];
  char v779;
  void *v780[2];
  char v781;
  void *v782;
  char v783;
  __int16 v784;
  void *v785[2];
  char v786;
  void *v787[2];
  char v788;
  void *v789;
  char v790;
  __int16 v791;
  void *v792[2];
  char v793;
  void *v794[2];
  char v795;
  void *v796;
  char v797;
  __int16 v798;
  void *v799[2];
  char v800;
  void *v801[2];
  char v802;
  void *v803;
  char v804;
  __int16 v805;
  void *v806[2];
  char v807;
  void *v808[2];
  char v809;
  void *v810;
  char v811;
  __int16 v812;
  void *v813[2];
  char v814;
  void *v815[2];
  char v816;
  void *v817;
  char v818;
  __int16 v819;
  void *v820[2];
  char v821;
  void *v822[2];
  char v823;
  void *v824;
  char v825;
  __int16 v826;
  void *v827[2];
  char v828;
  void *v829[2];
  char v830;
  void *v831;
  char v832;
  __int16 v833;
  void *v834[2];
  char v835;
  void *v836[2];
  char v837;
  void *v838;
  char v839;
  __int16 v840;
  void *v841[2];
  char v842;
  void *v843[2];
  char v844;
  void *v845;
  char v846;
  __int16 v847;
  void *v848[2];
  char v849;
  void *v850[2];
  char v851;
  void *v852;
  char v853;
  __int16 v854;
  void *v855[2];
  char v856;
  void *v857[2];
  char v858;
  void *v859;
  char v860;
  __int16 v861;
  void *v862[2];
  char v863;
  void *v864[2];
  char v865;
  void *v866;
  char v867;
  __int16 v868;
  void *v869[2];
  char v870;
  void *v871[2];
  char v872;
  void *v873;
  char v874;
  __int16 v875;
  void *v876[2];
  char v877;
  void *v878[2];
  char v879;
  void *v880;
  char v881;
  __int16 v882;
  void *v883[2];
  char v884;
  void *v885[2];
  char v886;
  void *v887;
  char v888;
  __int16 v889;
  void *v890[2];
  char v891;
  void *v892[2];
  char v893;
  void *v894;
  char v895;
  __int16 v896;
  void *v897[2];
  char v898;
  void *v899[2];
  char v900;
  void *v901;
  char v902;
  __int16 v903;
  void *v904[2];
  char v905;
  void *v906[2];
  char v907;
  void *v908;
  char v909;
  __int16 v910;
  void *v911[2];
  char v912;
  void *v913[2];
  char v914;
  void *v915;
  char v916;
  __int16 v917;
  void *v918[2];
  char v919;
  void *v920[2];
  char v921;
  void *v922;
  char v923;
  __int16 v924;
  void *v925[2];
  char v926;
  void *v927[2];
  char v928;
  void *v929;
  char v930;
  __int16 v931;
  void *v932[2];
  char v933;
  void *v934[2];
  char v935;
  void *v936;
  char v937;
  __int16 v938;
  void *v939[2];
  char v940;
  void *v941[2];
  char v942;
  void *v943;
  char v944;
  __int16 v945;
  void *v946[2];
  char v947;
  void *v948[2];
  char v949;
  void *v950;
  char v951;
  __int16 v952;
  void *v953[2];
  char v954;
  void *v955[2];
  char v956;
  void *v957;
  char v958;
  __int16 v959;
  void *v960[2];
  char v961;
  void *v962[2];
  char v963;
  void *v964;
  char v965;
  __int16 v966;
  void *v967[2];
  char v968;
  void *v969[2];
  char v970;
  void *v971;
  char v972;
  __int16 v973;
  void *v974[2];
  char v975;
  void *v976[2];
  char v977;
  void *v978;
  char v979;
  __int16 v980;
  void *v981[2];
  char v982;
  void *v983[2];
  char v984;
  void *v985;
  char v986;
  __int16 v987;
  void *v988[2];
  char v989;
  void *v990[2];
  char v991;
  void *v992;
  char v993;
  __int16 v994;
  void *v995[2];
  char v996;
  void *v997[2];
  char v998;
  void *v999;
  char v1000;
  __int16 v1001;
  void *v1002[2];
  char v1003;
  void *v1004[2];
  char v1005;
  void *v1006;
  char v1007;
  __int16 v1008;
  void *v1009[2];
  char v1010;
  void *v1011[2];
  char v1012;
  void *v1013;
  char v1014;
  __int16 v1015;
  void *v1016[2];
  char v1017;
  void *v1018[2];
  char v1019;
  void *v1020;
  char v1021;
  __int16 v1022;
  void *v1023[2];
  char v1024;
  void *v1025[2];
  char v1026;
  void *v1027;
  char v1028;
  __int16 v1029;
  void *v1030[2];
  char v1031;
  void *v1032[2];
  char v1033;
  void *v1034;
  char v1035;
  __int16 v1036;
  void *v1037[2];
  char v1038;
  void *v1039[2];
  char v1040;
  void *v1041;
  char v1042;
  __int16 v1043;
  void *v1044[2];
  char v1045;
  void *v1046[2];
  char v1047;
  void *v1048;
  char v1049;
  __int16 v1050;
  void *v1051[2];
  char v1052;
  void *v1053[2];
  char v1054;
  void *v1055;
  char v1056;
  __int16 v1057;
  void *v1058[2];
  char v1059;
  void *v1060[2];
  char v1061;
  void *v1062;
  char v1063;
  __int16 v1064;
  void *v1065[2];
  char v1066;
  void *v1067[2];
  char v1068;
  void *v1069;
  char v1070;
  __int16 v1071;
  void *v1072[2];
  char v1073;
  void *v1074[2];
  char v1075;
  void *v1076;
  char v1077;
  __int16 v1078;
  void *v1079[2];
  char v1080;
  void *v1081[2];
  char v1082;
  void *v1083;
  char v1084;
  __int16 v1085;
  void *v1086[2];
  char v1087;
  void *v1088[2];
  char v1089;
  void *v1090;
  char v1091;
  __int16 v1092;
  void *v1093[2];
  char v1094;
  void *v1095[2];
  char v1096;
  void *v1097;
  char v1098;
  __int16 v1099;
  void *v1100[2];
  char v1101;
  void *v1102[2];
  char v1103;
  void *v1104;
  char v1105;
  __int16 v1106;
  void *v1107[2];
  char v1108;
  void *v1109[2];
  char v1110;
  void *v1111;
  char v1112;
  __int16 v1113;
  void *v1114[2];
  char v1115;
  void *v1116[2];
  char v1117;
  void *v1118;
  char v1119;
  __int16 v1120;
  void *v1121[2];
  char v1122;
  void *v1123[2];
  char v1124;
  void *v1125;
  char v1126;
  __int16 v1127;
  void *v1128[2];
  char v1129;
  void *v1130[2];
  char v1131;
  void *v1132;
  char v1133;
  __int16 v1134;
  void *v1135[2];
  char v1136;
  void *v1137[2];
  char v1138;
  void *v1139;
  char v1140;
  __int16 v1141;
  void *v1142[2];
  char v1143;
  void *v1144[2];
  char v1145;
  void *v1146;
  char v1147;
  __int16 v1148;
  void *v1149[2];
  char v1150;
  void *v1151[2];
  char v1152;
  void *v1153;
  char v1154;
  __int16 v1155;
  void *v1156[2];
  char v1157;
  void *v1158[2];
  char v1159;
  void *v1160;
  char v1161;
  __int16 v1162;
  void *v1163[2];
  char v1164;
  void *v1165[2];
  char v1166;
  void *v1167;
  char v1168;
  __int16 v1169;
  void *v1170[2];
  char v1171;
  void *v1172[2];
  char v1173;
  void *v1174;
  char v1175;
  __int16 v1176;
  void *v1177[2];
  char v1178;
  void *v1179[2];
  char v1180;
  void *v1181;
  char v1182;
  __int16 v1183;
  void *v1184[2];
  char v1185;
  void *v1186[2];
  char v1187;
  void *v1188;
  char v1189;
  __int16 v1190;
  void *v1191[2];
  char v1192;
  void *v1193[2];
  char v1194;
  void *v1195;
  char v1196;
  __int16 v1197;
  void *v1198[2];
  char v1199;
  void *v1200[2];
  char v1201;
  void *v1202;
  char v1203;
  __int16 v1204;
  void *v1205[2];
  char v1206;
  void *v1207[2];
  char v1208;
  void *v1209;
  char v1210;
  __int16 v1211;
  void *v1212[2];
  char v1213;
  void *v1214[2];
  char v1215;
  void *v1216;
  char v1217;
  __int16 v1218;
  void *v1219[2];
  char v1220;
  void *v1221[2];
  char v1222;
  void *v1223;
  char v1224;
  __int16 v1225;
  void *v1226[2];
  char v1227;
  void *v1228[2];
  char v1229;
  void *v1230;
  char v1231;
  __int16 v1232;
  void *v1233[2];
  char v1234;
  void *v1235[2];
  char v1236;
  void *v1237;
  char v1238;
  __int16 v1239;
  void *v1240[2];
  char v1241;
  void *v1242[2];
  char v1243;
  void *v1244;
  char v1245;
  __int16 v1246;
  void *v1247[2];
  char v1248;
  void *v1249[2];
  char v1250;
  void *v1251;
  char v1252;
  __int16 v1253;
  void *v1254[2];
  char v1255;
  void *v1256[2];
  char v1257;
  void *v1258;
  char v1259;
  __int16 v1260;
  void *v1261[2];
  char v1262;
  void *v1263[2];
  char v1264;
  void *v1265;
  char v1266;
  __int16 v1267;
  void *v1268[2];
  char v1269;
  void *v1270[2];
  char v1271;
  void *v1272;
  char v1273;
  __int16 v1274;
  void *v1275[2];
  char v1276;
  void *v1277[2];
  char v1278;
  void *v1279;
  char v1280;
  __int16 v1281;
  void *v1282[2];
  char v1283;
  void *v1284[2];
  char v1285;
  void *v1286;
  char v1287;
  __int16 v1288;
  void *v1289[2];
  char v1290;
  void *v1291[2];
  char v1292;
  void *v1293;
  char v1294;
  __int16 v1295;
  void *v1296[2];
  char v1297;
  void *v1298[2];
  char v1299;
  void *v1300;
  char v1301;
  __int16 v1302;
  void *v1303[2];
  char v1304;
  void *v1305[2];
  char v1306;
  void *v1307;
  char v1308;
  __int16 v1309;
  void *v1310[2];
  char v1311;
  void *v1312[2];
  char v1313;
  void *v1314;
  char v1315;
  __int16 v1316;
  void *v1317[2];
  char v1318;
  void *v1319[2];
  char v1320;
  void *v1321;
  char v1322;
  __int16 v1323;
  void *v1324[2];
  char v1325;
  void *v1326[2];
  char v1327;
  void *v1328;
  char v1329;
  __int16 v1330;
  void *v1331[2];
  char v1332;
  void *v1333[2];
  char v1334;
  void *v1335;
  char v1336;
  __int16 v1337;
  void *v1338[2];
  char v1339;
  void *v1340[2];
  char v1341;
  void *v1342;
  char v1343;
  __int16 v1344;
  void *v1345[2];
  char v1346;
  void *v1347[2];
  char v1348;
  void *v1349;
  char v1350;
  __int16 v1351;
  void *v1352[2];
  char v1353;
  void *v1354[2];
  char v1355;
  void *v1356;
  char v1357;
  __int16 v1358;
  void *v1359[2];
  char v1360;
  void *v1361[2];
  char v1362;
  void *v1363;
  char v1364;
  __int16 v1365;
  void *v1366[2];
  char v1367;
  void *v1368[2];
  char v1369;
  void *v1370;
  char v1371;
  __int16 v1372;
  void *v1373[2];
  char v1374;
  void *v1375[2];
  char v1376;
  void *v1377;
  char v1378;
  __int16 v1379;
  void *v1380[2];
  char v1381;
  void *v1382[2];
  char v1383;
  void *v1384;
  char v1385;
  __int16 v1386;
  void *v1387[2];
  char v1388;
  void *v1389[2];
  char v1390;
  void *v1391;
  char v1392;
  __int16 v1393;
  void *v1394[2];
  char v1395;
  void *v1396[2];
  char v1397;
  void *v1398;
  char v1399;
  __int16 v1400;
  void *v1401[2];
  char v1402;
  void *v1403[2];
  char v1404;
  void *v1405;
  char v1406;
  __int16 v1407;
  void *v1408[2];
  char v1409;
  void *v1410[2];
  char v1411;
  void *v1412;
  char v1413;
  __int16 v1414;
  void *v1415[2];
  char v1416;
  void *v1417[2];
  char v1418;
  void *v1419;
  char v1420;
  __int16 v1421;
  void *v1422[2];
  char v1423;
  void *v1424[2];
  char v1425;
  void *v1426;
  char v1427;
  __int16 v1428;
  void *v1429[2];
  char v1430;
  void *v1431[2];
  char v1432;
  void *v1433;
  char v1434;
  __int16 v1435;
  void *v1436[2];
  char v1437;
  void *v1438[2];
  char v1439;
  void *v1440;
  char v1441;
  __int16 v1442;
  void *v1443[2];
  char v1444;
  void *v1445[2];
  char v1446;
  void *v1447;
  char v1448;
  __int16 v1449;
  void *v1450[2];
  char v1451;
  void *v1452[2];
  char v1453;
  void *v1454;
  char v1455;
  __int16 v1456;
  void *v1457[2];
  char v1458;
  void *v1459[2];
  char v1460;
  void *v1461;
  char v1462;
  __int16 v1463;
  void *v1464[2];
  char v1465;
  void *v1466[2];
  char v1467;
  void *v1468;
  char v1469;
  __int16 v1470;
  void *v1471[2];
  char v1472;
  void *v1473[2];
  char v1474;
  void *v1475;
  char v1476;
  __int16 v1477;
  void *v1478[2];
  char v1479;
  void *v1480[2];
  char v1481;
  void *v1482;
  char v1483;
  __int16 v1484;
  void *v1485[2];
  char v1486;
  void *v1487[2];
  char v1488;
  void *v1489;
  char v1490;
  __int16 v1491;
  void *v1492[2];
  char v1493;
  void *v1494[2];
  char v1495;
  void *v1496;
  char v1497;
  __int16 v1498;
  void *v1499[2];
  char v1500;
  void *v1501[2];
  char v1502;
  void *v1503;
  char v1504;
  __int16 v1505;
  void *v1506[2];
  char v1507;
  void *v1508[2];
  char v1509;
  void *v1510;
  char v1511;
  __int16 v1512;
  void *v1513[2];
  char v1514;
  void *v1515[2];
  char v1516;
  void *v1517;
  char v1518;
  __int16 v1519;
  void *v1520[2];
  char v1521;
  void *v1522[2];
  char v1523;
  void *v1524;
  char v1525;
  __int16 v1526;
  void *v1527[2];
  char v1528;
  void *v1529[2];
  char v1530;
  void *v1531;
  char v1532;
  __int16 v1533;
  void *v1534[2];
  char v1535;
  void *v1536[2];
  char v1537;
  void *v1538;
  char v1539;
  __int16 v1540;
  void *v1541[2];
  char v1542;
  void *v1543[2];
  char v1544;
  void *v1545;
  char v1546;
  __int16 v1547;
  void *v1548[2];
  char v1549;
  void *v1550[2];
  char v1551;
  void *v1552;
  char v1553;
  __int16 v1554;
  void *v1555[2];
  char v1556;
  void *v1557[2];
  char v1558;
  void *v1559;
  char v1560;
  __int16 v1561;
  void *v1562[2];
  char v1563;
  void *v1564[2];
  char v1565;
  void *v1566;
  char v1567;
  __int16 v1568;
  void *v1569[2];
  char v1570;
  void *v1571[2];
  char v1572;
  void *v1573;
  char v1574;
  __int16 v1575;
  void *v1576[2];
  char v1577;
  void *v1578[2];
  char v1579;
  void *v1580;
  char v1581;
  __int16 v1582;
  void *v1583[2];
  char v1584;
  void *v1585[2];
  char v1586;
  void *v1587;
  char v1588;
  __int16 v1589;
  void *v1590[2];
  char v1591;
  void *v1592[2];
  char v1593;
  void *v1594;
  char v1595;
  __int16 v1596;
  void *v1597[2];
  char v1598;
  void *v1599[2];
  char v1600;
  void *v1601;
  char v1602;
  __int16 v1603;
  void *v1604[2];
  char v1605;
  void *v1606[2];
  char v1607;
  void *v1608;
  char v1609;
  __int16 v1610;
  void *v1611[2];
  char v1612;
  void *v1613[2];
  char v1614;
  void *v1615;
  char v1616;
  __int16 v1617;
  void *v1618[2];
  char v1619;
  void *v1620[2];
  char v1621;
  void *v1622;
  char v1623;
  __int16 v1624;
  void *v1625[2];
  char v1626;
  void *v1627[2];
  char v1628;
  void *v1629;
  char v1630;
  __int16 v1631;
  void *v1632[2];
  char v1633;
  void *v1634[2];
  char v1635;
  void *v1636;
  char v1637;
  __int16 v1638;
  void *v1639[2];
  char v1640;
  void *v1641[2];
  char v1642;
  void *v1643;
  char v1644;
  __int16 v1645;
  void *v1646[2];
  char v1647;
  void *v1648[2];
  char v1649;
  void *v1650;
  char v1651;
  __int16 v1652;
  void *v1653[2];
  char v1654;
  void *v1655[2];
  char v1656;
  void *v1657;
  char v1658;
  __int16 v1659;
  void *v1660[2];
  char v1661;
  void *v1662[2];
  char v1663;
  void *v1664;
  char v1665;
  __int16 v1666;
  void *v1667[2];
  char v1668;
  void *v1669[2];
  char v1670;
  void *v1671;
  char v1672;
  __int16 v1673;
  void *v1674[2];
  char v1675;
  void *v1676[2];
  char v1677;
  void *v1678;
  char v1679;
  __int16 v1680;
  void *v1681[2];
  char v1682;
  void *v1683[2];
  char v1684;
  void *v1685;
  char v1686;
  __int16 v1687;
  void *v1688[2];
  char v1689;
  void *v1690[2];
  char v1691;
  void *v1692;
  char v1693;
  __int16 v1694;
  void *v1695[2];
  char v1696;
  void *v1697[2];
  char v1698;
  void *v1699;
  char v1700;
  __int16 v1701;
  void *v1702[2];
  char v1703;
  void *v1704[2];
  char v1705;
  void *v1706;
  char v1707;
  __int16 v1708;
  void *v1709[2];
  char v1710;
  void *v1711[2];
  char v1712;
  void *v1713;
  char v1714;
  __int16 v1715;
  void *v1716[2];
  char v1717;
  void *v1718[2];
  char v1719;
  void *v1720;
  char v1721;
  __int16 v1722;
  void *v1723[2];
  char v1724;
  void *v1725[2];
  char v1726;
  void *v1727;
  char v1728;
  __int16 v1729;
  void *v1730[2];
  char v1731;
  void *v1732[2];
  char v1733;
  void *v1734;
  char v1735;
  __int16 v1736;
  void *v1737[2];
  char v1738;
  void *v1739[2];
  char v1740;
  void *v1741;
  char v1742;
  __int16 v1743;
  void *v1744[2];
  char v1745;
  void *v1746[2];
  char v1747;
  void *v1748;
  char v1749;
  __int16 v1750;
  void *v1751[2];
  char v1752;
  void *v1753[2];
  char v1754;
  void *v1755;
  char v1756;
  __int16 v1757;
  void *v1758[2];
  char v1759;
  void *v1760[2];
  char v1761;
  void *v1762;
  char v1763;
  __int16 v1764;
  void *v1765[2];
  char v1766;
  void *v1767[2];
  char v1768;
  void *v1769;
  char v1770;
  __int16 v1771;
  void *v1772[2];
  char v1773;
  void *v1774[2];
  char v1775;
  void *v1776;
  char v1777;
  __int16 v1778;
  void *v1779[2];
  char v1780;
  void *v1781[2];
  char v1782;
  void *v1783;
  char v1784;
  __int16 v1785;
  void *v1786[2];
  char v1787;
  void *v1788[2];
  char v1789;
  void *v1790;
  char v1791;
  __int16 v1792;
  void *v1793[2];
  char v1794;
  void *v1795[2];
  char v1796;
  void *v1797;
  char v1798;
  __int16 v1799;
  void *v1800[2];
  char v1801;
  unsigned __int8 v1802[80];
  char v1803[80];
  char v1804[80];
  char v1805[80];
  char v1806[80];
  char v1807[80];
  char v1808[80];
  char v1809[80];
  char v1810[80];
  char v1811[80];
  char v1812[80];
  char v1813[80];
  char v1814[80];
  char v1815[80];
  char v1816[80];
  char v1817[80];
  char v1818[80];
  char v1819[80];
  char v1820[80];
  char v1821[80];
  char v1822[80];
  char v1823[80];
  char v1824[80];
  char v1825[80];
  char v1826[80];
  char v1827[80];
  char v1828[80];
  char v1829[80];
  char v1830[80];
  char v1831[80];
  char v1832[80];
  char v1833[80];
  char v1834[80];
  char v1835[80];
  char v1836[80];
  char v1837[80];
  char v1838[80];
  char v1839[80];
  char v1840[80];
  char v1841[80];
  char v1842[80];
  char v1843[80];
  char v1844[80];
  char v1845[80];
  char v1846[80];
  char v1847[80];
  char v1848[80];
  char v1849[80];
  char v1850[80];
  char v1851[80];
  char v1852[80];
  char v1853[80];
  char v1854[80];
  char v1855[80];
  char v1856[80];
  char v1857[80];
  char v1858[80];
  char v1859[80];
  char v1860[80];
  char v1861[80];
  char v1862[80];
  char v1863[80];
  char v1864[80];
  char v1865[80];
  char v1866[80];
  char v1867[80];
  char v1868[80];
  char v1869[80];
  char v1870[80];
  char v1871[80];
  char v1872[80];
  char v1873[80];
  char v1874[80];
  char v1875[80];
  char v1876[80];
  char v1877[80];
  char v1878[80];
  char v1879[80];
  char v1880[80];
  char v1881[80];
  char v1882[80];
  char v1883[80];
  char v1884[80];
  char v1885[80];
  char v1886[80];
  char v1887[80];
  char v1888[80];
  char v1889[80];
  char v1890[80];
  char v1891[80];
  char v1892[80];
  char v1893[80];
  char v1894[80];
  char v1895[80];
  char v1896[80];
  char v1897[80];
  char v1898[80];
  char v1899[80];
  char v1900[80];
  char v1901[80];
  char v1902[80];
  char v1903[80];
  char v1904[80];
  char v1905[80];
  char v1906[80];
  char v1907[80];
  char v1908[80];
  char v1909[80];
  char v1910[80];
  char v1911[80];
  char v1912[80];
  char v1913[80];
  char v1914[80];
  char v1915[80];
  char v1916[80];
  char v1917[80];
  char v1918[80];
  char v1919[80];
  char v1920[80];
  char v1921[80];
  char v1922[80];
  char v1923[80];
  char v1924[80];
  char v1925[80];
  char v1926[80];
  char v1927[80];
  char v1928[80];
  char v1929[80];
  char v1930[80];
  char v1931[80];
  char v1932[80];
  char v1933[80];
  char v1934[80];
  char v1935[80];
  char v1936[80];
  char v1937[80];
  char v1938[80];
  char v1939[80];
  char v1940[80];
  char v1941[80];
  char v1942[80];
  char v1943[80];
  char v1944[80];
  char v1945[80];
  char v1946[80];
  char v1947[80];
  char v1948[80];
  char v1949[80];
  char v1950[80];
  char v1951[80];
  char v1952[80];
  char v1953[80];
  char v1954[80];
  char v1955[80];
  char v1956[80];
  char v1957[80];
  char v1958[80];
  char v1959[80];
  char v1960[80];
  char v1961[80];
  char v1962[80];
  char v1963[80];
  char v1964[80];
  char v1965[80];
  char v1966[80];
  char v1967[80];
  char v1968[80];
  char v1969[80];
  char v1970[80];
  char v1971[80];
  char v1972[80];
  char v1973[80];
  char v1974[80];
  char v1975[80];
  char v1976[80];
  char v1977[80];
  char v1978[80];
  char v1979[80];
  char v1980[80];
  char v1981[80];
  char v1982[80];
  char v1983[80];
  char v1984[80];
  char v1985[80];
  char v1986[80];
  char v1987[80];
  char v1988[80];
  char v1989[80];
  char v1990[80];
  char v1991[80];
  char v1992[80];
  char v1993[80];
  char v1994[80];
  char v1995[80];
  char v1996[80];
  char v1997[80];
  char v1998[80];
  char v1999[80];
  char v2000[80];
  char v2001[80];
  char v2002[80];
  char v2003[80];
  char v2004[80];
  char v2005[80];
  char v2006[80];
  char v2007[80];
  char v2008[80];
  char v2009[80];
  char v2010[80];
  char v2011[80];
  char v2012[80];
  char v2013[80];
  char v2014[80];
  char v2015[80];
  char v2016[80];
  char v2017[80];
  char v2018[80];
  char v2019[80];
  char v2020[80];
  char v2021[80];
  char v2022[80];
  char v2023[80];
  char v2024[80];
  char v2025[80];
  char v2026[80];
  char v2027[80];
  char v2028[80];
  char v2029[80];
  char v2030[80];
  char v2031[80];
  char v2032[80];
  char v2033[80];
  char v2034[80];
  char v2035[80];
  char v2036[80];
  char v2037[80];
  char v2038[80];
  char v2039[80];
  char v2040[80];
  char v2041[80];
  char v2042[80];
  char v2043[80];
  char v2044[80];
  char v2045[80];
  char v2046[80];
  char v2047[80];
  char v2048[80];
  char v2049[80];
  char v2050[80];
  char v2051[80];
  char v2052[80];
  char v2053[80];
  char v2054[80];
  char v2055[80];
  char v2056[80];
  char v2057[80];
  char v2058[80];

  sub_10000BF04(v1800, "SV");
  sub_10000BF04(v1795, "El Salvador");
  sub_10000BF04(&v1797, "SV");
  v1799 = 1;
  sub_10036EE6C((char *)v1802, (__int128 *)v1800, (__int128 *)v1795);
  sub_10000BF04(v1793, "IN");
  sub_10000BF04(v1788, "India");
  sub_10000BF04(&v1790, "IN");
  v1792 = 1;
  sub_10036EE6C(v1803, (__int128 *)v1793, (__int128 *)v1788);
  sub_10000BF04(v1786, "PE");
  sub_10000BF04(v1781, "Peru");
  sub_10000BF04(&v1783, "PE");
  v1785 = 2;
  sub_10036EE6C(v1804, (__int128 *)v1786, (__int128 *)v1781);
  sub_10000BF04(v1779, "WS");
  sub_10000BF04(v1774, "Samoa");
  sub_10000BF04(&v1776, "WS");
  v1778 = 1;
  sub_10036EE6C(v1805, (__int128 *)v1779, (__int128 *)v1774);
  sub_10000BF04(v1772, "NI");
  sub_10000BF04(v1767, "Nicaragua");
  sub_10000BF04(&v1769, "NI");
  v1771 = 1;
  sub_10036EE6C(v1806, (__int128 *)v1772, (__int128 *)v1767);
  sub_10000BF04(v1765, "BO");
  sub_10000BF04(v1760, "Bolivia");
  sub_10000BF04(&v1762, "BO");
  v1764 = 1;
  sub_10036EE6C(v1807, (__int128 *)v1765, (__int128 *)v1760);
  sub_10000BF04(v1758, "JM");
  sub_10000BF04(v1753, "Jamaica");
  sub_10000BF04(&v1755, "JM");
  v1757 = 1;
  sub_10036EE6C(v1808, (__int128 *)v1758, (__int128 *)v1753);
  sub_10000BF04(v1751, "US");
  sub_10000BF04(v1746, "United States");
  sub_10000BF04(&v1748, "US");
  v1750 = 257;
  sub_10036EE6C(v1809, (__int128 *)v1751, (__int128 *)v1746);
  sub_10000BF04(v1744, "CA");
  sub_10000BF04(v1739, "Canada");
  sub_10000BF04(&v1741, "CA");
  v1743 = 257;
  sub_10036EE6C(v1810, (__int128 *)v1744, (__int128 *)v1739);
  sub_10000BF04(v1737, "CO");
  sub_10000BF04(v1732, "Colombia");
  sub_10000BF04(&v1734, "CO");
  v1736 = 258;
  sub_10036EE6C(v1811, (__int128 *)v1737, (__int128 *)v1732);
  sub_10000BF04(v1730, "PR");
  sub_10000BF04(v1725, "Puerto Rico");
  sub_10000BF04(&v1727, "PR");
  v1729 = 257;
  sub_10036EE6C(v1812, (__int128 *)v1730, (__int128 *)v1725);
  sub_10000BF04(v1723, "CR");
  sub_10000BF04(v1718, "Costa Rica");
  sub_10000BF04(&v1720, "CR");
  v1722 = 258;
  sub_10036EE6C(v1813, (__int128 *)v1723, (__int128 *)v1718);
  sub_10000BF04(v1716, "EC");
  sub_10000BF04(v1711, "Ecuador");
  sub_10000BF04(&v1713, "EC");
  v1715 = 257;
  sub_10036EE6C(v1814, (__int128 *)v1716, (__int128 *)v1711);
  sub_10000BF04(v1709, "AR");
  sub_10000BF04(v1704, "Argentina");
  sub_10000BF04(&v1706, "AR");
  v1708 = 257;
  sub_10036EE6C(v1815, (__int128 *)v1709, (__int128 *)v1704);
  sub_10000BF04(v1702, "VI");
  sub_10000BF04(v1697, "USVI");
  sub_10000BF04(&v1699, "VI");
  v1701 = 257;
  sub_10036EE6C(v1816, (__int128 *)v1702, (__int128 *)v1697);
  sub_10000BF04(v1695, "GT");
  sub_10000BF04(v1690, "Guatemala");
  sub_10000BF04(&v1692, "GT");
  v1694 = 257;
  sub_10036EE6C(v1817, (__int128 *)v1695, (__int128 *)v1690);
  sub_10000BF04(v1688, "UM");
  sub_10000BF04(v1683, "US Minor Outlying Islands");
  sub_10000BF04(&v1685, "UM");
  v1687 = 257;
  sub_10036EE6C(v1818, (__int128 *)v1688, (__int128 *)v1683);
  sub_10000BF04(v1681, "CL");
  sub_10000BF04(v1676, "Chile");
  sub_10000BF04(&v1678, "CL");
  v1680 = 257;
  sub_10036EE6C(v1819, (__int128 *)v1681, (__int128 *)v1676);
  sub_10000BF04(v1674, "PA");
  sub_10000BF04(v1669, "Panama");
  sub_10000BF04(&v1671, "PA");
  v1673 = 257;
  sub_10036EE6C(v1820, (__int128 *)v1674, (__int128 *)v1669);
  sub_10000BF04(v1667, "VE");
  sub_10000BF04(v1662, "Venezuela");
  sub_10000BF04(&v1664, "VE");
  v1666 = 257;
  sub_10036EE6C(v1821, (__int128 *)v1667, (__int128 *)v1662);
  sub_10000BF04(v1660, "UY");
  sub_10000BF04(v1655, "Uruguay");
  sub_10000BF04(&v1657, "UY");
  v1659 = 257;
  sub_10036EE6C(v1822, (__int128 *)v1660, (__int128 *)v1655);
  sub_10000BF04(v1653, "DO");
  sub_10000BF04(v1648, "Dominican Rep");
  sub_10000BF04(&v1650, "DO");
  v1652 = 258;
  sub_10036EE6C(v1823, (__int128 *)v1653, (__int128 *)v1648);
  sub_10000BF04(v1646, "GU");
  sub_10000BF04(v1641, "Guam");
  sub_10000BF04(&v1643, "GU");
  v1645 = 257;
  sub_10036EE6C(v1824, (__int128 *)v1646, (__int128 *)v1641);
  sub_10000BF04(v1639, "HN");
  sub_10000BF04(v1634, "Honduras");
  sub_10000BF04(&v1636, "HN");
  v1638 = 257;
  sub_10036EE6C(v1825, (__int128 *)v1639, (__int128 *)v1634);
  sub_10000BF04(v1632, "AI");
  sub_10000BF04(v1627, "Anguilla");
  sub_10000BF04(&v1629, "AI");
  v1631 = 257;
  sub_10036EE6C(v1826, (__int128 *)v1632, (__int128 *)v1627);
  sub_10000BF04(v1625, "AG");
  sub_10000BF04(v1620, "Antigua/ Barbuda");
  sub_10000BF04(&v1622, "AG");
  v1624 = 257;
  sub_10036EE6C(v1827, (__int128 *)v1625, (__int128 *)v1620);
  sub_10000BF04(v1618, "AW");
  sub_10000BF04(v1613, "Aruba");
  sub_10000BF04(&v1615, "AW");
  v1617 = 257;
  sub_10036EE6C(v1828, (__int128 *)v1618, (__int128 *)v1613);
  sub_10000BF04(v1611, "BS");
  sub_10000BF04(v1606, "Bahamas");
  sub_10000BF04(&v1608, "BS");
  v1610 = 257;
  sub_10036EE6C(v1829, (__int128 *)v1611, (__int128 *)v1606);
  sub_10000BF04(v1604, "BB");
  sub_10000BF04(v1599, "Barbados");
  sub_10000BF04(&v1601, "BB");
  v1603 = 257;
  sub_10036EE6C(v1830, (__int128 *)v1604, (__int128 *)v1599);
  sub_10000BF04(v1597, "BM");
  sub_10000BF04(v1592, "Bermuda");
  sub_10000BF04(&v1594, "BM");
  v1596 = 257;
  sub_10036EE6C(v1831, (__int128 *)v1597, (__int128 *)v1592);
  sub_10000BF04(v1590, "VG");
  sub_10000BF04(v1585, "British Virgin Islands");
  sub_10000BF04(&v1587, "VG");
  v1589 = 257;
  sub_10036EE6C(v1832, (__int128 *)v1590, (__int128 *)v1585);
  sub_10000BF04(v1583, "KY");
  sub_10000BF04(v1578, "Cayman Islands");
  sub_10000BF04(&v1580, "KY");
  v1582 = 257;
  sub_10036EE6C(v1833, (__int128 *)v1583, (__int128 *)v1578);
  sub_10000BF04(v1576, "DM");
  sub_10000BF04(v1571, "Dominica");
  sub_10000BF04(&v1573, "DM");
  v1575 = 257;
  sub_10036EE6C(v1834, (__int128 *)v1576, (__int128 *)v1571);
  sub_10000BF04(v1569, "GD");
  sub_10000BF04(v1564, "Grenada");
  sub_10000BF04(&v1566, "GD");
  v1568 = 257;
  sub_10036EE6C(v1835, (__int128 *)v1569, (__int128 *)v1564);
  sub_10000BF04(v1562, "MS");
  sub_10000BF04(v1557, "Montserrat");
  sub_10000BF04(&v1559, "MS");
  v1561 = 257;
  sub_10036EE6C(v1836, (__int128 *)v1562, (__int128 *)v1557);
  sub_10000BF04(v1555, "KN");
  sub_10000BF04(v1550, "St Kitts/ Nevis");
  sub_10000BF04(&v1552, "KN");
  v1554 = 257;
  sub_10036EE6C(v1837, (__int128 *)v1555, (__int128 *)v1550);
  sub_10000BF04(v1548, "LC");
  sub_10000BF04(v1543, "St Lucia");
  sub_10000BF04(&v1545, "LC");
  v1547 = 257;
  sub_10036EE6C(v1838, (__int128 *)v1548, (__int128 *)v1543);
  sub_10000BF04(v1541, "VC");
  sub_10000BF04(v1536, "St Vincent/ Grenadines");
  sub_10000BF04(&v1538, "VC");
  v1540 = 257;
  sub_10036EE6C(v1839, (__int128 *)v1541, (__int128 *)v1536);
  sub_10000BF04(v1534, "TC");
  sub_10000BF04(v1529, "Turks & Caicos");
  sub_10000BF04(&v1531, "TC");
  v1533 = 257;
  sub_10036EE6C(v1840, (__int128 *)v1534, (__int128 *)v1529);
  sub_10000BF04(v1527, "PY");
  sub_10000BF04(v1522, "Paraguay");
  sub_10000BF04(&v1524, "PY");
  v1526 = 258;
  sub_10036EE6C(v1841, (__int128 *)v1527, (__int128 *)v1522);
  sub_10000BF04(v1520, "TT");
  sub_10000BF04(v1515, "Trinidad & Tobago");
  sub_10000BF04(&v1517, "TT");
  v1519 = 257;
  sub_10036EE6C(v1842, (__int128 *)v1520, (__int128 *)v1515);
  sub_10000BF04(v1513, "CW");
  sub_10000BF04(v1508, "CURACAO");
  sub_10000BF04(&v1510, "CW");
  v1512 = 257;
  sub_10036EE6C(v1843, (__int128 *)v1513, (__int128 *)v1508);
  sub_10000BF04(v1506, "BZ");
  sub_10000BF04(v1501, "BELIZE");
  sub_10000BF04(&v1503, "BZ");
  v1505 = 257;
  sub_10036EE6C(v1844, (__int128 *)v1506, (__int128 *)v1501);
  sub_10000BF04(v1499, "HT");
  sub_10000BF04(v1494, "HAITI");
  sub_10000BF04(&v1496, "HT");
  v1498 = 257;
  sub_10036EE6C(v1845, (__int128 *)v1499, (__int128 *)v1494);
  sub_10000BF04(v1492, "SX");
  sub_10000BF04(v1487, "Sint Maarten");
  sub_10000BF04(&v1489, "SX");
  v1491 = 257;
  sub_10036EE6C(v1846, (__int128 *)v1492, (__int128 *)v1487);
  sub_10000BF04(v1485, "SR");
  sub_10000BF04(v1480, "SURINAME");
  sub_10000BF04(&v1482, "SR");
  v1484 = 257;
  sub_10036EE6C(v1847, (__int128 *)v1485, (__int128 *)v1480);
  sub_10000BF04(v1478, "BQ");
  sub_10000BF04(v1473, "BES");
  sub_10000BF04(&v1475, "BQ");
  v1477 = 257;
  sub_10036EE6C(v1848, (__int128 *)v1478, (__int128 *)v1473);
  sub_10000BF04(v1471, "GY");
  sub_10000BF04(v1466, "Guyana");
  sub_10000BF04(&v1468, "GY");
  v1470 = 257;
  sub_10036EE6C(v1849, (__int128 *)v1471, (__int128 *)v1466);
  sub_10000BF04(v1464, "AS");
  sub_10000BF04(v1459, "American Samoa ");
  sub_10000BF04(&v1461, "AS");
  v1463 = 257;
  sub_10036EE6C(v1850, (__int128 *)v1464, (__int128 *)v1459);
  sub_10000BF04(v1457, "MF");
  sub_10000BF04(v1452, "Saint Martin (North of Island)");
  sub_10000BF04(&v1454, "MF");
  v1456 = 259;
  sub_10036EE6C(v1851, (__int128 *)v1457, (__int128 *)v1452);
  sub_10000BF04(v1450, "MP");
  sub_10000BF04(v1445, "Northern Mariana Island");
  sub_10000BF04(&v1447, "MP");
  v1449 = 257;
  sub_10036EE6C(v1852, (__int128 *)v1450, (__int128 *)v1445);
  sub_10000BF04(v1443, "FM");
  sub_10000BF04(v1438, "MICRONESIA, FEDERATED STATES OF");
  sub_10000BF04(&v1440, "FM");
  v1442 = 257;
  sub_10036EE6C(v1853, (__int128 *)v1443, (__int128 *)v1438);
  sub_10000BF04(v1436, "MH");
  sub_10000BF04(v1431, "MARSHALL ISLANDS");
  sub_10000BF04(&v1433, "MH");
  v1435 = 257;
  sub_10036EE6C(v1854, (__int128 *)v1436, (__int128 *)v1431);
  sub_10000BF04(v1429, "PW");
  sub_10000BF04(v1424, "Palau");
  sub_10000BF04(&v1426, "PW");
  v1428 = 257;
  sub_10036EE6C(v1855, (__int128 *)v1429, (__int128 *)v1424);
  sub_10000BF04(v1422, "AT");
  sub_10000BF04(v1417, "Austria");
  sub_10000BF04(&v1419, "AT");
  v1421 = 1283;
  sub_10036EE6C(v1856, (__int128 *)v1422, (__int128 *)v1417);
  sub_10000BF04(v1415, "BE");
  sub_10000BF04(v1410, "Belgium");
  sub_10000BF04(&v1412, "BE");
  v1414 = 1283;
  sub_10036EE6C(v1857, (__int128 *)v1415, (__int128 *)v1410);
  sub_10000BF04(v1408, "BG");
  sub_10000BF04(v1403, "Bulgaria");
  sub_10000BF04(&v1405, "BG");
  v1407 = 1283;
  sub_10036EE6C(v1858, (__int128 *)v1408, (__int128 *)v1403);
  sub_10000BF04(v1401, "CY");
  sub_10000BF04(v1396, "Cyprus");
  sub_10000BF04(&v1398, "CY");
  v1400 = 1283;
  sub_10036EE6C(v1859, (__int128 *)v1401, (__int128 *)v1396);
  sub_10000BF04(v1394, "CZ");
  sub_10000BF04(v1389, "Czech Republic");
  sub_10000BF04(&v1391, "CZ");
  v1393 = 1283;
  sub_10036EE6C(v1860, (__int128 *)v1394, (__int128 *)v1389);
  sub_10000BF04(v1387, "DK");
  sub_10000BF04(v1382, "Denmark");
  sub_10000BF04(&v1384, "DK");
  v1386 = 1283;
  sub_10036EE6C(v1861, (__int128 *)v1387, (__int128 *)v1382);
  sub_10000BF04(v1380, "EE");
  sub_10000BF04(v1375, "Estonia");
  sub_10000BF04(&v1377, "EE");
  v1379 = 1283;
  sub_10036EE6C(v1862, (__int128 *)v1380, (__int128 *)v1375);
  sub_10000BF04(v1373, "FR");
  sub_10000BF04(v1368, "France");
  sub_10000BF04(&v1370, "FR");
  v1372 = 1283;
  sub_10036EE6C(v1863, (__int128 *)v1373, (__int128 *)v1368);
  sub_10000BF04(v1366, "FI");
  sub_10000BF04(v1361, "Finland");
  sub_10000BF04(&v1363, "FI");
  v1365 = 1283;
  sub_10036EE6C(v1864, (__int128 *)v1366, (__int128 *)v1361);
  sub_10000BF04(v1359, "DE");
  sub_10000BF04(v1354, "Germany");
  sub_10000BF04(&v1356, "DE");
  v1358 = 1283;
  sub_10036EE6C(v1865, (__int128 *)v1359, (__int128 *)v1354);
  sub_10000BF04(v1352, "GR");
  sub_10000BF04(v1347, "Greece");
  sub_10000BF04(&v1349, "GR");
  v1351 = 1283;
  sub_10036EE6C(v1866, (__int128 *)v1352, (__int128 *)v1347);
  sub_10000BF04(v1345, "HU");
  sub_10000BF04(v1340, "Hungary");
  sub_10000BF04(&v1342, "HU");
  v1344 = 1283;
  sub_10036EE6C(v1867, (__int128 *)v1345, (__int128 *)v1340);
  sub_10000BF04(v1338, "IS");
  sub_10000BF04(v1333, "Iceland");
  sub_10000BF04(&v1335, "IS");
  v1337 = 1283;
  sub_10036EE6C(v1868, (__int128 *)v1338, (__int128 *)v1333);
  sub_10000BF04(v1331, "IT");
  sub_10000BF04(v1326, "Italy");
  sub_10000BF04(&v1328, "IT");
  v1330 = 1283;
  sub_10036EE6C(v1869, (__int128 *)v1331, (__int128 *)v1326);
  sub_10000BF04(v1324, "IE");
  sub_10000BF04(v1319, "Ireland");
  sub_10000BF04(&v1321, "IE");
  v1323 = 1283;
  sub_10036EE6C(v1870, (__int128 *)v1324, (__int128 *)v1319);
  sub_10000BF04(v1317, "LV");
  sub_10000BF04(v1312, "Latvia");
  sub_10000BF04(&v1314, "LV");
  v1316 = 1283;
  sub_10036EE6C(v1871, (__int128 *)v1317, (__int128 *)v1312);
  sub_10000BF04(v1310, "LI");
  sub_10000BF04(v1305, "Liechtenstein");
  sub_10000BF04(&v1307, "LI");
  v1309 = 1283;
  sub_10036EE6C(v1872, (__int128 *)v1310, (__int128 *)v1305);
  sub_10000BF04(v1303, "LT");
  sub_10000BF04(v1298, "Lithuania");
  sub_10000BF04(&v1300, "LT");
  v1302 = 1283;
  sub_10036EE6C(v1873, (__int128 *)v1303, (__int128 *)v1298);
  sub_10000BF04(v1296, "LU");
  sub_10000BF04(v1291, "Luxembourg");
  sub_10000BF04(&v1293, "LU");
  v1295 = 1283;
  sub_10036EE6C(v1874, (__int128 *)v1296, (__int128 *)v1291);
  sub_10000BF04(v1289, "MT");
  sub_10000BF04(v1284, "Malta");
  sub_10000BF04(&v1286, "MT");
  v1288 = 1283;
  sub_10036EE6C(v1875, (__int128 *)v1289, (__int128 *)v1284);
  sub_10000BF04(v1282, "NL");
  sub_10000BF04(v1277, "Netherlands");
  sub_10000BF04(&v1279, "NL");
  v1281 = 1283;
  sub_10036EE6C(v1876, (__int128 *)v1282, (__int128 *)v1277);
  sub_10000BF04(v1275, "NO");
  sub_10000BF04(v1270, "Norway");
  sub_10000BF04(&v1272, "NO");
  v1274 = 1283;
  sub_10036EE6C(v1877, (__int128 *)v1275, (__int128 *)v1270);
  sub_10000BF04(v1268, "PL");
  sub_10000BF04(v1263, "Poland");
  sub_10000BF04(&v1265, "PL");
  v1267 = 1283;
  sub_10036EE6C(v1878, (__int128 *)v1268, (__int128 *)v1263);
  sub_10000BF04(v1261, "PT");
  sub_10000BF04(v1256, "Portugal");
  sub_10000BF04(&v1258, "PT");
  v1260 = 1283;
  sub_10036EE6C(v1879, (__int128 *)v1261, (__int128 *)v1256);
  sub_10000BF04(v1254, "RO");
  sub_10000BF04(v1249, "Romania");
  sub_10000BF04(&v1251, "RO");
  v1253 = 1283;
  sub_10036EE6C(v1880, (__int128 *)v1254, (__int128 *)v1249);
  sub_10000BF04(v1247, "SK");
  sub_10000BF04(v1242, "Slovakia");
  sub_10000BF04(&v1244, "SK");
  v1246 = 1283;
  sub_10036EE6C(v1881, (__int128 *)v1247, (__int128 *)v1242);
  sub_10000BF04(v1240, "SI");
  sub_10000BF04(v1235, "Slovenia");
  sub_10000BF04(&v1237, "SI");
  v1239 = 1283;
  sub_10036EE6C(v1882, (__int128 *)v1240, (__int128 *)v1235);
  sub_10000BF04(v1233, "ES");
  sub_10000BF04(v1228, "Spain");
  sub_10000BF04(&v1230, "ES");
  v1232 = 1283;
  sub_10036EE6C(v1883, (__int128 *)v1233, (__int128 *)v1228);
  sub_10000BF04(v1226, "SE");
  sub_10000BF04(v1221, "Sweden");
  sub_10000BF04(&v1223, "SE");
  v1225 = 1283;
  sub_10036EE6C(v1884, (__int128 *)v1226, (__int128 *)v1221);
  sub_10000BF04(v1219, "CH");
  sub_10000BF04(v1214, "Switzerland");
  sub_10000BF04(&v1216, "CH");
  v1218 = 1283;
  sub_10036EE6C(v1885, (__int128 *)v1219, (__int128 *)v1214);
  sub_10000BF04(v1212, "GB");
  sub_10000BF04(v1207, "UK");
  sub_10000BF04(&v1209, "GB");
  v1211 = 1283;
  sub_10036EE6C(v1886, (__int128 *)v1212, (__int128 *)v1207);
  sub_10000BF04(v1205, "ZA");
  sub_10000BF04(v1200, "South Africa");
  sub_10000BF04(&v1202, "ZA");
  v1204 = 1283;
  sub_10036EE6C(v1887, (__int128 *)v1205, (__int128 *)v1200);
  sub_10000BF04(v1198, "TR");
  sub_10000BF04(v1193, "Turkey");
  sub_10000BF04(&v1195, "TR");
  v1197 = 1283;
  sub_10036EE6C(v1888, (__int128 *)v1198, (__int128 *)v1193);
  sub_10000BF04(v1191, "AE");
  sub_10000BF04(v1186, "UAE");
  sub_10000BF04(&v1188, "AE");
  v1190 = 1283;
  sub_10036EE6C(v1889, (__int128 *)v1191, (__int128 *)v1186);
  sub_10000BF04(v1184, "SA");
  sub_10000BF04(v1179, "Saudi Arabia");
  sub_10000BF04(&v1181, "SA");
  v1183 = 1283;
  sub_10036EE6C(v1890, (__int128 *)v1184, (__int128 *)v1179);
  sub_10000BF04(v1177, "HR");
  sub_10000BF04(v1172, "Croatia");
  sub_10000BF04(&v1174, "HR");
  v1176 = 1283;
  sub_10036EE6C(v1891, (__int128 *)v1177, (__int128 *)v1172);
  sub_10000BF04(v1170, "RS");
  sub_10000BF04(v1165, "Serbia");
  sub_10000BF04(&v1167, "RS");
  v1169 = 1283;
  sub_10036EE6C(v1892, (__int128 *)v1170, (__int128 *)v1165);
  sub_10000BF04(v1163, "HK");
  sub_10000BF04(v1158, "Hong Kong ");
  sub_10000BF04(&v1160, "HK");
  v1162 = 514;
  sub_10036EE6C(v1893, (__int128 *)v1163, (__int128 *)v1158);
  sub_10000BF04(v1156, "SG");
  sub_10000BF04(v1151, "Singapore");
  sub_10000BF04(&v1153, "SG");
  v1155 = 514;
  sub_10036EE6C(v1894, (__int128 *)v1156, (__int128 *)v1151);
  sub_10000BF04(v1149, "VN");
  sub_10000BF04(v1144, "Vietnam");
  sub_10000BF04(&v1146, "VN");
  v1148 = 514;
  sub_10036EE6C(v1895, (__int128 *)v1149, (__int128 *)v1144);
  sub_10000BF04(v1142, "BN");
  sub_10000BF04(v1137, "Brunei");
  sub_10000BF04(&v1139, "BN");
  v1141 = 514;
  sub_10036EE6C(v1896, (__int128 *)v1142, (__int128 *)v1137);
  sub_10000BF04(v1135, "KH");
  sub_10000BF04(v1130, "Cambodia");
  sub_10000BF04(&v1132, "KH");
  v1134 = 514;
  sub_10036EE6C(v1897, (__int128 *)v1135, (__int128 *)v1130);
  sub_10000BF04(v1128, "LA");
  sub_10000BF04(v1123, "Laos");
  sub_10000BF04(&v1125, "LA");
  v1127 = 514;
  sub_10036EE6C(v1898, (__int128 *)v1128, (__int128 *)v1123);
  sub_10000BF04(v1121, "MM");
  sub_10000BF04(v1116, "Myanmar");
  sub_10000BF04(&v1118, "MM");
  v1120 = 514;
  sub_10036EE6C(v1899, (__int128 *)v1121, (__int128 *)v1116);
  sub_10000BF04(v1114, "CN");
  sub_10000BF04(v1109, "China ");
  sub_10000BF04(&v1111, "CN");
  v1113 = 514;
  sub_10036EE6C(v1900, (__int128 *)v1114, (__int128 *)v1109);
  sub_10000BF04(v1107, "PK");
  sub_10000BF04(v1102, "Pakistan");
  sub_10000BF04(&v1104, "PK");
  v1106 = 514;
  sub_10036EE6C(v1901, (__int128 *)v1107, (__int128 *)v1102);
  sub_10000BF04(v1100, "BD");
  sub_10000BF04(v1095, "Bangladesh");
  sub_10000BF04(&v1097, "BD");
  v1099 = 514;
  sub_10036EE6C(v1902, (__int128 *)v1100, (__int128 *)v1095);
  sub_10000BF04(v1093, "LK");
  sub_10000BF04(v1088, "Sri Lanka");
  sub_10000BF04(&v1090, "LK");
  v1092 = 514;
  sub_10036EE6C(v1903, (__int128 *)v1093, (__int128 *)v1088);
  sub_10000BF04(v1086, "MV");
  sub_10000BF04(v1081, "Maldives");
  sub_10000BF04(&v1083, "MV");
  v1085 = 514;
  sub_10036EE6C(v1904, (__int128 *)v1086, (__int128 *)v1081);
  sub_10000BF04(v1079, "AF");
  sub_10000BF04(v1074, "Afghanistan");
  sub_10000BF04(&v1076, "AF");
  v1078 = 514;
  sub_10036EE6C(v1905, (__int128 *)v1079, (__int128 *)v1074);
  sub_10000BF04(v1072, "MN");
  sub_10000BF04(v1067, "Mongolia");
  sub_10000BF04(&v1069, "MN");
  v1071 = 514;
  sub_10036EE6C(v1906, (__int128 *)v1072, (__int128 *)v1067);
  sub_10000BF04(v1065, "BT");
  sub_10000BF04(v1060, "Bhutan");
  sub_10000BF04(&v1062, "BT");
  v1064 = 514;
  sub_10036EE6C(v1907, (__int128 *)v1065, (__int128 *)v1060);
  sub_10000BF04(v1058, "MO");
  sub_10000BF04(v1053, "Macau");
  sub_10000BF04(&v1055, "MO");
  v1057 = 514;
  sub_10036EE6C(v1908, (__int128 *)v1058, (__int128 *)v1053);
  sub_10000BF04(v1051, "PH");
  sub_10000BF04(v1046, "Philippines");
  sub_10000BF04(&v1048, "PH");
  v1050 = 514;
  sub_10036EE6C(v1909, (__int128 *)v1051, (__int128 *)v1046);
  sub_10000BF04(v1044, "NC");
  sub_10000BF04(v1039, "New Caledonia");
  sub_10000BF04(&v1041, "NC");
  v1043 = 1283;
  sub_10036EE6C(v1910, (__int128 *)v1044, (__int128 *)v1039);
  sub_10000BF04(v1037, "PG");
  sub_10000BF04(v1032, "Papua New Guinea");
  sub_10000BF04(&v1034, "PG");
  v1036 = 514;
  sub_10036EE6C(v1911, (__int128 *)v1037, (__int128 *)v1032);
  sub_10000BF04(v1030, "VU");
  sub_10000BF04(v1025, "Vanuatu");
  sub_10000BF04(&v1027, "VU");
  v1029 = 514;
  sub_10036EE6C(v1912, (__int128 *)v1030, (__int128 *)v1025);
  sub_10000BF04(v1023, "EG");
  sub_10000BF04(v1018, "Egypt");
  sub_10000BF04(&v1020, "EG");
  v1022 = 1283;
  sub_10036EE6C(v1913, (__int128 *)v1023, (__int128 *)v1018);
  sub_10000BF04(v1016, "KW");
  sub_10000BF04(v1011, "Kuwait");
  sub_10000BF04(&v1013, "KW");
  v1015 = 1283;
  sub_10036EE6C(v1914, (__int128 *)v1016, (__int128 *)v1011);
  sub_10000BF04(v1009, "MA");
  sub_10000BF04(v1004, "Morocco");
  sub_10000BF04(&v1006, "MA");
  v1008 = 1283;
  sub_10036EE6C(v1915, (__int128 *)v1009, (__int128 *)v1004);
  sub_10000BF04(v1002, "UA");
  sub_10000BF04(v997, "Ukraine");
  sub_10000BF04(&v999, "UA");
  v1001 = 1283;
  sub_10036EE6C(v1916, (__int128 *)v1002, (__int128 *)v997);
  sub_10000BF04(v995, "BY");
  sub_10000BF04(v990, "Belarus");
  sub_10000BF04(&v992, "BY");
  v994 = 514;
  sub_10036EE6C(v1917, (__int128 *)v995, (__int128 *)v990);
  sub_10000BF04(v988, "AZ");
  sub_10000BF04(v983, "Azerbaijan");
  sub_10000BF04(&v985, "AZ");
  v987 = 1283;
  sub_10036EE6C(v1918, (__int128 *)v988, (__int128 *)v983);
  sub_10000BF04(v981, "KZ");
  sub_10000BF04(v976, "Kazakhstan");
  sub_10000BF04(&v978, "KZ");
  v980 = 514;
  sub_10036EE6C(v1919, (__int128 *)v981, (__int128 *)v976);
  sub_10000BF04(v974, "ID");
  sub_10000BF04(v969, "Indonesia");
  sub_10000BF04(&v971, "ID");
  v973 = 514;
  sub_10036EE6C(v1920, (__int128 *)v974, (__int128 *)v969);
  sub_10000BF04(v967, "AL");
  sub_10000BF04(v962, "Albania");
  sub_10000BF04(&v964, "AL");
  v966 = 1283;
  sub_10036EE6C(v1921, (__int128 *)v967, (__int128 *)v962);
  sub_10000BF04(v960, "DZ");
  sub_10000BF04(v955, "Algeria");
  sub_10000BF04(&v957, "DZ");
  v959 = 1283;
  sub_10036EE6C(v1922, (__int128 *)v960, (__int128 *)v955);
  sub_10000BF04(v953, "AO");
  sub_10000BF04(v948, "Angola");
  sub_10000BF04(&v950, "AO");
  v952 = 1283;
  sub_10036EE6C(v1923, (__int128 *)v953, (__int128 *)v948);
  sub_10000BF04(v946, "AM");
  sub_10000BF04(v941, "Armenia");
  sub_10000BF04(&v943, "AM");
  v945 = 514;
  sub_10036EE6C(v1924, (__int128 *)v946, (__int128 *)v941);
  sub_10000BF04(v939, "BJ");
  sub_10000BF04(v934, "Benin");
  sub_10000BF04(&v936, "BJ");
  v938 = 1283;
  sub_10036EE6C(v1925, (__int128 *)v939, (__int128 *)v934);
  sub_10000BF04(v932, "BA");
  sub_10000BF04(v927, "Bosnia & Hertzgovena");
  sub_10000BF04(&v929, "BA");
  v931 = 1283;
  sub_10036EE6C(v1926, (__int128 *)v932, (__int128 *)v927);
  sub_10000BF04(v925, "BI");
  sub_10000BF04(v920, "Burundi");
  sub_10000BF04(&v922, "BI");
  v924 = 1283;
  sub_10036EE6C(v1927, (__int128 *)v925, (__int128 *)v920);
  sub_10000BF04(v918, "BF");
  sub_10000BF04(v913, "Burkina-Faso");
  sub_10000BF04(&v915, "BF");
  v917 = 1283;
  sub_10036EE6C(v1928, (__int128 *)v918, (__int128 *)v913);
  sub_10000BF04(v911, "CF");
  sub_10000BF04(v906, "Central Africa Republic");
  sub_10000BF04(&v908, "CF");
  v910 = 1283;
  sub_10036EE6C(v1929, (__int128 *)v911, (__int128 *)v906);
  sub_10000BF04(v904, "TD");
  sub_10000BF04(v899, "Chad");
  sub_10000BF04(&v901, "TD");
  v903 = 1283;
  sub_10036EE6C(v1930, (__int128 *)v904, (__int128 *)v899);
  sub_10000BF04(v897, "CD");
  sub_10000BF04(v892, "Congo-Brazzaville");
  sub_10000BF04(&v894, "CD");
  v896 = 1283;
  sub_10036EE6C(v1931, (__int128 *)v897, (__int128 *)v892);
  sub_10000BF04(v890, "CG");
  sub_10000BF04(v885, "Congo, Democratic Rebuplic of");
  sub_10000BF04(&v887, "CG");
  v889 = 1283;
  sub_10036EE6C(v1932, (__int128 *)v890, (__int128 *)v885);
  sub_10000BF04(v883, "GQ");
  sub_10000BF04(v878, "Equatorial Guinea");
  sub_10000BF04(&v880, "GQ");
  v882 = 1283;
  sub_10036EE6C(v1933, (__int128 *)v883, (__int128 *)v878);
  sub_10000BF04(v876, "ET");
  sub_10000BF04(v871, "Ethiopia");
  sub_10000BF04(&v873, "ET");
  v875 = 1283;
  sub_10036EE6C(v1934, (__int128 *)v876, (__int128 *)v871);
  sub_10000BF04(v869, "PF");
  sub_10000BF04(v864, "French Polynesia, Tahiti");
  sub_10000BF04(&v866, "PF");
  v868 = 1283;
  sub_10036EE6C(v1935, (__int128 *)v869, (__int128 *)v864);
  sub_10000BF04(v862, "GA");
  sub_10000BF04(v857, "Gabon");
  sub_10000BF04(&v859, "GA");
  v861 = 1283;
  sub_10036EE6C(v1936, (__int128 *)v862, (__int128 *)v857);
  sub_10000BF04(v855, "GM");
  sub_10000BF04(v850, "Gambia");
  sub_10000BF04(&v852, "GM");
  v854 = 1283;
  sub_10036EE6C(v1937, (__int128 *)v855, (__int128 *)v850);
  sub_10000BF04(v848, "GH");
  sub_10000BF04(v843, "Ghana");
  sub_10000BF04(&v845, "GH");
  v847 = 1283;
  sub_10036EE6C(v1938, (__int128 *)v848, (__int128 *)v843);
  sub_10000BF04(v841, "GI");
  sub_10000BF04(v836, "Gibraltar");
  sub_10000BF04(&v838, "GI");
  v840 = 1283;
  sub_10036EE6C(v1939, (__int128 *)v841, (__int128 *)v836);
  sub_10000BF04(v834, "GL");
  sub_10000BF04(v829, "Greenland");
  sub_10000BF04(&v831, "GL");
  v833 = 1283;
  sub_10036EE6C(v1940, (__int128 *)v834, (__int128 *)v829);
  sub_10000BF04(v827, "GP");
  sub_10000BF04(v822, "Guadeloupe");
  sub_10000BF04(&v824, "GP");
  v826 = 1283;
  sub_10036EE6C(v1941, (__int128 *)v827, (__int128 *)v822);
  sub_10000BF04(v820, "GW");
  sub_10000BF04(v815, "Guinea - Bissau");
  sub_10000BF04(&v817, "GW");
  v819 = 1283;
  sub_10036EE6C(v1942, (__int128 *)v820, (__int128 *)v815);
  sub_10000BF04(v813, "GN");
  sub_10000BF04(v808, "Guinea-Conakry");
  sub_10000BF04(&v810, "GN");
  v812 = 1283;
  sub_10036EE6C(v1943, (__int128 *)v813, (__int128 *)v808);
  sub_10000BF04(v806, "IQ");
  sub_10000BF04(v801, "Iraq");
  sub_10000BF04(&v803, "IQ");
  v805 = 1283;
  sub_10036EE6C(v1944, (__int128 *)v806, (__int128 *)v801);
  sub_10000BF04(v799, "CI");
  sub_10000BF04(v794, "Ivory Coast");
  sub_10000BF04(&v796, "CI");
  v798 = 1283;
  sub_10036EE6C(v1945, (__int128 *)v799, (__int128 *)v794);
  sub_10000BF04(v792, "KE");
  sub_10000BF04(v787, "Kenya");
  sub_10000BF04(&v789, "KE");
  v791 = 1283;
  sub_10036EE6C(v1946, (__int128 *)v792, (__int128 *)v787);
  sub_10000BF04(v785, "KG");
  sub_10000BF04(v780, "Kyrgyzstan");
  sub_10000BF04(&v782, "KG");
  v784 = 514;
  sub_10036EE6C(v1947, (__int128 *)v785, (__int128 *)v780);
  sub_10000BF04(v778, "LB");
  sub_10000BF04(v773, "Lebanon");
  sub_10000BF04(&v775, "LB");
  v777 = 1283;
  sub_10036EE6C(v1948, (__int128 *)v778, (__int128 *)v773);
  sub_10000BF04(v771, "LS");
  sub_10000BF04(v766, "Lesotho");
  sub_10000BF04(&v768, "LS");
  v770 = 1283;
  sub_10036EE6C(v1949, (__int128 *)v771, (__int128 *)v766);
  sub_10000BF04(v764, "LR");
  sub_10000BF04(v759, "Liberia");
  sub_10000BF04(&v761, "LR");
  v763 = 1283;
  sub_10036EE6C(v1950, (__int128 *)v764, (__int128 *)v759);
  sub_10000BF04(v757, "LY");
  sub_10000BF04(v752, "Libya");
  sub_10000BF04(&v754, "LY");
  v756 = 1283;
  sub_10036EE6C(v1951, (__int128 *)v757, (__int128 *)v752);
  sub_10000BF04(v750, "MK");
  sub_10000BF04(v745, "Macedonia");
  sub_10000BF04(&v747, "MK");
  v749 = 1283;
  sub_10036EE6C(v1952, (__int128 *)v750, (__int128 *)v745);
  sub_10000BF04(v743, "MG");
  sub_10000BF04(v738, "Madagascar");
  sub_10000BF04(&v740, "MG");
  v742 = 1283;
  sub_10036EE6C(v1953, (__int128 *)v743, (__int128 *)v738);
  sub_10000BF04(v736, "ML");
  sub_10000BF04(v731, "Mali");
  sub_10000BF04(&v733, "ML");
  v735 = 1283;
  sub_10036EE6C(v1954, (__int128 *)v736, (__int128 *)v731);
  sub_10000BF04(v729, "MQ");
  sub_10000BF04(v724, "Martinique");
  sub_10000BF04(&v726, "MQ");
  v728 = 1283;
  sub_10036EE6C(v1955, (__int128 *)v729, (__int128 *)v724);
  sub_10000BF04(v722, "MU");
  sub_10000BF04(v717, "Mauritius");
  sub_10000BF04(&v719, "MU");
  v721 = 1283;
  sub_10036EE6C(v1956, (__int128 *)v722, (__int128 *)v717);
  sub_10000BF04(v715, "MD");
  sub_10000BF04(v710, "Moldova");
  sub_10000BF04(&v712, "MD");
  v714 = 1283;
  sub_10036EE6C(v1957, (__int128 *)v715, (__int128 *)v710);
  sub_10000BF04(v708, "MC");
  sub_10000BF04(v703, "Monaco");
  sub_10000BF04(&v705, "MC");
  v707 = 1283;
  sub_10036EE6C(v1958, (__int128 *)v708, (__int128 *)v703);
  sub_10000BF04(v701, "ME");
  sub_10000BF04(v696, "Montenegro");
  sub_10000BF04(&v698, "ME");
  v700 = 1283;
  sub_10036EE6C(v1959, (__int128 *)v701, (__int128 *)v696);
  sub_10000BF04(v694, "MZ");
  sub_10000BF04(v689, "Mozambique");
  sub_10000BF04(&v691, "MZ");
  v693 = 1283;
  sub_10036EE6C(v1960, (__int128 *)v694, (__int128 *)v689);
  sub_10000BF04(v687, "NA");
  sub_10000BF04(v682, "Namibia");
  sub_10000BF04(&v684, "NA");
  v686 = 1283;
  sub_10036EE6C(v1961, (__int128 *)v687, (__int128 *)v682);
  sub_10000BF04(v680, "NE");
  sub_10000BF04(v675, "Niger");
  sub_10000BF04(&v677, "NE");
  v679 = 1283;
  sub_10036EE6C(v1962, (__int128 *)v680, (__int128 *)v675);
  sub_10000BF04(v673, "OM");
  sub_10000BF04(v668, "Oman");
  sub_10000BF04(&v670, "OM");
  v672 = 1283;
  sub_10036EE6C(v1963, (__int128 *)v673, (__int128 *)v668);
  sub_10000BF04(v666, "RE");
  sub_10000BF04(v661, "Reunion");
  sub_10000BF04(&v663, "RE");
  v665 = 1283;
  sub_10036EE6C(v1964, (__int128 *)v666, (__int128 *)v661);
  sub_10000BF04(v659, "SN");
  sub_10000BF04(v654, "Senegal");
  sub_10000BF04(&v656, "SN");
  v658 = 1283;
  sub_10036EE6C(v1965, (__int128 *)v659, (__int128 *)v654);
  sub_10000BF04(v652, "TZ");
  sub_10000BF04(v647, "Tanzania");
  sub_10000BF04(&v649, "TZ");
  v651 = 1283;
  sub_10036EE6C(v1966, (__int128 *)v652, (__int128 *)v647);
  sub_10000BF04(v645, "TG");
  sub_10000BF04(v640, "Togo");
  sub_10000BF04(&v642, "TG");
  v644 = 1283;
  sub_10036EE6C(v1967, (__int128 *)v645, (__int128 *)v640);
  sub_10000BF04(v638, "UG");
  sub_10000BF04(v633, "Uganda");
  sub_10000BF04(&v635, "UG");
  v637 = 1283;
  sub_10036EE6C(v1968, (__int128 *)v638, (__int128 *)v633);
  sub_10000BF04(v631, "UZ");
  sub_10000BF04(v626, "Uzbekistan");
  sub_10000BF04(&v628, "UZ");
  v630 = 1283;
  sub_10036EE6C(v1969, (__int128 *)v631, (__int128 *)v626);
  sub_10000BF04(v624, "ZM");
  sub_10000BF04(v619, "Zambia");
  sub_10000BF04(&v621, "ZM");
  v623 = 1283;
  sub_10036EE6C(v1970, (__int128 *)v624, (__int128 *)v619);
  sub_10000BF04(v617, "ZW");
  sub_10000BF04(v612, "Zimbabwe");
  sub_10000BF04(&v614, "ZW");
  v616 = 1283;
  sub_10036EE6C(v1971, (__int128 *)v617, (__int128 *)v612);
  sub_10000BF04(v610, "GE");
  sub_10000BF04(v605, "Georgia");
  sub_10000BF04(&v607, "GE");
  v609 = 1283;
  sub_10036EE6C(v1972, (__int128 *)v610, (__int128 *)v605);
  sub_10000BF04(v603, "MW");
  sub_10000BF04(v598, "Malawi");
  sub_10000BF04(&v600, "MW");
  v602 = 1283;
  sub_10036EE6C(v1973, (__int128 *)v603, (__int128 *)v598);
  sub_10000BF04(v596, "RW");
  sub_10000BF04(v591, "Rwanda");
  sub_10000BF04(&v593, "RW");
  v595 = 1283;
  sub_10036EE6C(v1974, (__int128 *)v596, (__int128 *)v591);
  sub_10000BF04(v589, "SC");
  sub_10000BF04(v584, "Seychelles");
  sub_10000BF04(&v586, "SC");
  v588 = 1283;
  sub_10036EE6C(v1975, (__int128 *)v589, (__int128 *)v584);
  sub_10000BF04(v582, "SZ");
  sub_10000BF04(v577, "Swaziland");
  sub_10000BF04(&v579, "SZ");
  v581 = 1283;
  sub_10036EE6C(v1976, (__int128 *)v582, (__int128 *)v577);
  sub_10000BF04(v575, "QA");
  sub_10000BF04(v570, "Qatar");
  sub_10000BF04(&v572, "QA");
  v574 = 1283;
  sub_10036EE6C(v1977, (__int128 *)v575, (__int128 *)v570);
  sub_10000BF04(v568, "JO");
  sub_10000BF04(v563, "Jordan");
  sub_10000BF04(&v565, "JO");
  v567 = 1283;
  sub_10036EE6C(v1978, (__int128 *)v568, (__int128 *)v563);
  sub_10000BF04(v561, "BH");
  sub_10000BF04(v556, "Bahrain");
  sub_10000BF04(&v558, "BH");
  v560 = 1283;
  sub_10036EE6C(v1979, (__int128 *)v561, (__int128 *)v556);
  sub_10000BF04(v554, "AD");
  sub_10000BF04(v549, "Andorra");
  sub_10000BF04(&v551, "AD");
  v553 = 1283;
  sub_10036EE6C(v1980, (__int128 *)v554, (__int128 *)v549);
  sub_10000BF04(v547, "CM");
  sub_10000BF04(v542, "CAMEROON");
  sub_10000BF04(&v544, "CM");
  v546 = 1283;
  sub_10036EE6C(v1981, (__int128 *)v547, (__int128 *)v542);
  sub_10000BF04(v540, "CV");
  sub_10000BF04(v535, "CAPE VERDE");
  sub_10000BF04(&v537, "CV");
  v539 = 1283;
  sub_10036EE6C(v1982, (__int128 *)v540, (__int128 *)v535);
  sub_10000BF04(v533, "GF");
  sub_10000BF04(v528, "French Guinea");
  sub_10000BF04(&v530, "GF");
  v532 = 1283;
  sub_10036EE6C(v1983, (__int128 *)v533, (__int128 *)v528);
  sub_10000BF04(v526, "GG");
  sub_10000BF04(v521, "Guernsey");
  sub_10000BF04(&v523, "GG");
  v525 = 1283;
  sub_10036EE6C(v1984, (__int128 *)v526, (__int128 *)v521);
  sub_10000BF04(v519, "IO");
  sub_10000BF04(v514, "BRITISH INDIAN OCEAN TERRITORY");
  sub_10000BF04(&v516, "IO");
  v518 = 1283;
  sub_10036EE6C(v1985, (__int128 *)v519, (__int128 *)v514);
  sub_10000BF04(v512, "MR");
  sub_10000BF04(v507, "MAURITANIA");
  sub_10000BF04(&v509, "MR");
  v511 = 1283;
  sub_10036EE6C(v1986, (__int128 *)v512, (__int128 *)v507);
  sub_10000BF04(v505, "NG");
  sub_10000BF04(v500, "NIGERIA");
  sub_10000BF04(&v502, "NG");
  v504 = 1283;
  sub_10036EE6C(v1987, (__int128 *)v505, (__int128 *)v500);
  sub_10000BF04(v498, "NR");
  sub_10000BF04(v493, "NAURU");
  sub_10000BF04(&v495, "NR");
  v497 = 514;
  sub_10036EE6C(v1988, (__int128 *)v498, (__int128 *)v493);
  sub_10000BF04(v491, "PN");
  sub_10000BF04(v486, "PITCAIRN");
  sub_10000BF04(&v488, "PN");
  v490 = 514;
  sub_10036EE6C(v1989, (__int128 *)v491, (__int128 *)v486);
  sub_10000BF04(v484, "SB");
  sub_10000BF04(v479, "SOLOMON ISLANDS");
  sub_10000BF04(&v481, "SB");
  v483 = 514;
  sub_10036EE6C(v1990, (__int128 *)v484, (__int128 *)v479);
  sub_10000BF04(v477, "SL");
  sub_10000BF04(v472, "SIERRA LEONE");
  sub_10000BF04(&v474, "SL");
  v476 = 1283;
  sub_10036EE6C(v1991, (__int128 *)v477, (__int128 *)v472);
  sub_10000BF04(v470, "ST");
  sub_10000BF04(v465, "SAO TOME AND PRINCIPE");
  sub_10000BF04(&v467, "ST");
  v469 = 1283;
  sub_10036EE6C(v1992, (__int128 *)v470, (__int128 *)v465);
  sub_10000BF04(v463, "TF");
  sub_10000BF04(v458, "FRENCH SOUTHERN TERRITORIES");
  sub_10000BF04(&v460, "TF");
  v462 = 0;
  sub_10036EE6C(v1993, (__int128 *)v463, (__int128 *)v458);
  sub_10000BF04(v456, "TM");
  sub_10000BF04(v451, "TURKMENISTAN");
  sub_10000BF04(&v453, "TM");
  v455 = 1283;
  sub_10036EE6C(v1994, (__int128 *)v456, (__int128 *)v451);
  sub_10000BF04(v449, "VA");
  sub_10000BF04(v444, "HOLY SEE (VATICAN CITY STATE)");
  sub_10000BF04(&v446, "VA");
  v448 = 1283;
  sub_10036EE6C(v1995, (__int128 *)v449, (__int128 *)v444);
  sub_10000BF04(v442, "WF");
  sub_10000BF04(v437, "WALLIS AND FUTUNA");
  sub_10000BF04(&v439, "WF");
  v441 = 1283;
  sub_10036EE6C(v1996, (__int128 *)v442, (__int128 *)v437);
  sub_10000BF04(v435, "YT");
  sub_10000BF04(v430, "MAYOTTE");
  sub_10000BF04(&v432, "YT");
  v434 = 1283;
  sub_10036EE6C(v1997, (__int128 *)v435, (__int128 *)v430);
  sub_10000BF04(v428, "ER");
  sub_10000BF04(v423, "ERITREA");
  sub_10000BF04(&v425, "ER");
  v427 = 1283;
  sub_10036EE6C(v1998, (__int128 *)v428, (__int128 *)v423);
  sub_10000BF04(v421, "FO");
  sub_10000BF04(v416, "FAROE ISLANDS");
  sub_10000BF04(&v418, "FO");
  v420 = 1283;
  sub_10036EE6C(v1999, (__int128 *)v421, (__int128 *)v416);
  sub_10000BF04(v414, "SO");
  sub_10000BF04(v409, "SOMALIA");
  sub_10000BF04(&v411, "SO");
  v413 = 1283;
  sub_10036EE6C(v2000, (__int128 *)v414, (__int128 *)v409);
  sub_10000BF04(v407, "KM");
  sub_10000BF04(v402, "Comoros");
  sub_10000BF04(&v404, "KM");
  v406 = 1283;
  sub_10036EE6C(v2001, (__int128 *)v407, (__int128 *)v402);
  sub_10000BF04(v400, "DJ");
  sub_10000BF04(v395, "Djibouti");
  sub_10000BF04(&v397, "DJ");
  v399 = 1283;
  sub_10036EE6C(v2002, (__int128 *)v400, (__int128 *)v395);
  sub_10000BF04(v393, "FK");
  sub_10000BF04(v388, "Falklands");
  sub_10000BF04(&v390, "FK");
  v392 = 1283;
  sub_10036EE6C(v2003, (__int128 *)v393, (__int128 *)v388);
  sub_10000BF04(v386, "SM");
  sub_10000BF04(v381, "San Marino");
  sub_10000BF04(&v383, "SM");
  v385 = 1283;
  sub_10036EE6C(v2004, (__int128 *)v386, (__int128 *)v381);
  sub_10000BF04(v379, "SH");
  sub_10000BF04(v374, "Saint Helena Ascension");
  sub_10000BF04(&v376, "SH");
  v378 = 1283;
  sub_10036EE6C(v2005, (__int128 *)v379, (__int128 *)v374);
  sub_10000BF04(v372, "BW");
  sub_10000BF04(v367, "Botswana");
  sub_10000BF04(&v369, "BW");
  v371 = 1283;
  sub_10036EE6C(v2006, (__int128 *)v372, (__int128 *)v367);
  sub_10000BF04(v365, "PS");
  sub_10000BF04(v360, "Palestine");
  sub_10000BF04(&v362, "PS");
  v364 = 1283;
  sub_10036EE6C(v2007, (__int128 *)v365, (__int128 *)v360);
  sub_10000BF04(v358, "TJ");
  sub_10000BF04(v353, "Tajikistan");
  sub_10000BF04(&v355, "TJ");
  v357 = 1283;
  sub_10036EE6C(v2008, (__int128 *)v358, (__int128 *)v353);
  sub_10000BF04(v351, "PM");
  sub_10000BF04(v346, "Saint Pierre et Miquelon");
  sub_10000BF04(&v348, "PM");
  v350 = 1283;
  sub_10036EE6C(v2009, (__int128 *)v351, (__int128 *)v346);
  sub_10000BF04(v344, "IL");
  sub_10000BF04(v339, "Israel");
  sub_10000BF04(&v341, "IL");
  v343 = 1283;
  sub_10036EE6C(v2010, (__int128 *)v344, (__int128 *)v339);
  sub_10000BF04(v337, "XK");
  sub_10000BF04(v332, "Kosovo");
  sub_10000BF04(&v334, "XK");
  v336 = 1283;
  sub_10036EE6C(v2011, (__int128 *)v337, (__int128 *)v332);
  sub_10000BF04(v330, "TN");
  sub_10000BF04(v325, "Tunisia");
  sub_10000BF04(&v327, "TN");
  v329 = 1283;
  sub_10036EE6C(v2012, (__int128 *)v330, (__int128 *)v325);
  sub_10000BF04(v323, "TO");
  sub_10000BF04(v318, "TONGA");
  sub_10000BF04(&v320, "TO");
  v322 = 514;
  sub_10036EE6C(v2013, (__int128 *)v323, (__int128 *)v318);
  sub_10000BF04(v316, "YE");
  sub_10000BF04(v311, "YEMEN");
  sub_10000BF04(&v313, "YE");
  v315 = 1283;
  sub_10036EE6C(v2014, (__int128 *)v316, (__int128 *)v311);
  sub_10000BF04(v309, "TL");
  sub_10000BF04(v304, "East Timor ");
  sub_10000BF04(&v306, "TL");
  v308 = 514;
  sub_10036EE6C(v2015, (__int128 *)v309, (__int128 *)v304);
  sub_10000BF04(v302, "A0");
  sub_10000BF04(v297, "Abkhazia");
  sub_10000BF04(&v299, "A0");
  v301 = 1283;
  sub_10036EE6C(v2016, (__int128 *)v302, (__int128 *)v297);
  sub_10000BF04(v295, "A2");
  sub_10000BF04(v290, "French West Indies");
  sub_10000BF04(&v292, "A2");
  v294 = 515;
  sub_10036EE6C(v2017, (__int128 *)v295, (__int128 *)v290);
  sub_10000BF04(v288, "BV");
  sub_10000BF04(v283, "Bouvet Island [Norway]");
  sub_10000BF04(&v285, "BV");
  v287 = 1283;
  sub_10036EE6C(v2018, (__int128 *)v288, (__int128 *)v283);
  sub_10000BF04(v281, "IM");
  sub_10000BF04(v276, "Isle of Man [United Kingdom]");
  sub_10000BF04(&v278, "IM");
  v280 = 1283;
  sub_10036EE6C(v2019, (__int128 *)v281, (__int128 *)v276);
  sub_10000BF04(v274, "JE");
  sub_10000BF04(v269, "Jersey [United Kingdom]");
  sub_10000BF04(&v271, "JE");
  v273 = 1283;
  sub_10036EE6C(v2020, (__int128 *)v274, (__int128 *)v269);
  sub_10000BF04(v267, "KI");
  sub_10000BF04(v262, "Kiribati");
  sub_10000BF04(&v264, "KI");
  v266 = 514;
  sub_10036EE6C(v2021, (__int128 *)v267, (__int128 *)v262);
  sub_10000BF04(v260, "GS");
  sub_10000BF04(v255, "South Georgia and the South Sandwich Islands [United Kingdom]");
  sub_10000BF04(&v257, "GS");
  v259 = 1;
  sub_10036EE6C(v2022, (__int128 *)v260, (__int128 *)v255);
  sub_10000BF04(v253, "SJ");
  sub_10000BF04(v248, "Svalbard and Jan Mayen [Norway]");
  sub_10000BF04(&v250, "SJ");
  v252 = 1283;
  sub_10036EE6C(v2023, (__int128 *)v253, (__int128 *)v248);
  sub_10000BF04(v246, "EH");
  sub_10000BF04(v241, "Western Sahara");
  sub_10000BF04(&v243, "EH");
  v245 = 1283;
  sub_10036EE6C(v2024, (__int128 *)v246, (__int128 *)v241);
  sub_10000BF04(v239, "A4");
  sub_10000BF04(v234, "Netherlands Antilles [Netherlands]");
  sub_10000BF04(&v236, "A4");
  v238 = 1;
  sub_10036EE6C(v2025, (__int128 *)v239, (__int128 *)v234);
  sub_10000BF04(v232, "A5");
  sub_10000BF04(v227, "Tahiti");
  sub_10000BF04(&v229, "A5");
  v231 = 1283;
  sub_10036EE6C(v2026, (__int128 *)v232, (__int128 *)v227);
  sub_10000BF04(v225, "KR");
  sub_10000BF04(v220, "South Korea");
  sub_10000BF04(&v222, "KR");
  v224 = 769;
  sub_10036EE6C(v2027, (__int128 *)v225, (__int128 *)v220);
  sub_10000BF04(v218, "MX");
  sub_10000BF04(v213, "Mexico");
  sub_10000BF04(&v215, "MX");
  v217 = 1026;
  sub_10036EE6C(v2028, (__int128 *)v218, (__int128 *)v213);
  sub_10000BF04(v211, "BR");
  sub_10000BF04(v206, "Brazil");
  sub_10000BF04(&v208, "BR");
  v210 = 1026;
  sub_10036EE6C(v2029, (__int128 *)v211, (__int128 *)v206);
  sub_10000BF04(v204, "AU");
  sub_10000BF04(v199, "Australia");
  sub_10000BF04(&v201, "AU");
  v203 = 1026;
  sub_10036EE6C(v2030, (__int128 *)v204, (__int128 *)v199);
  sub_10000BF04(v197, "NZ");
  sub_10000BF04(v192, "New Zealand");
  sub_10000BF04(&v194, "NZ");
  v196 = 1026;
  sub_10036EE6C(v2031, (__int128 *)v197, (__int128 *)v192);
  sub_10000BF04(v190, "MY");
  sub_10000BF04(v185, "Malaysia");
  sub_10000BF04(&v187, "MY");
  v189 = 1026;
  sub_10036EE6C(v2032, (__int128 *)v190, (__int128 *)v185);
  sub_10000BF04(v183, "TH");
  sub_10000BF04(v178, "Thailand");
  sub_10000BF04(&v180, "TH");
  v182 = 1026;
  sub_10036EE6C(v2033, (__int128 *)v183, (__int128 *)v178);
  sub_10000BF04(v176, "TW");
  sub_10000BF04(v171, "Taiwan");
  sub_10000BF04(&v173, "TW");
  v175 = 1026;
  sub_10036EE6C(v2034, (__int128 *)v176, (__int128 *)v171);
  sub_10000BF04(v169, "NP");
  sub_10000BF04(v164, "Nepal");
  sub_10000BF04(&v166, "NP");
  v168 = 1026;
  sub_10036EE6C(v2035, (__int128 *)v169, (__int128 *)v164);
  sub_10000BF04(v162, "FJ");
  sub_10000BF04(v157, "Fiji");
  sub_10000BF04(&v159, "FJ");
  v161 = 1026;
  sub_10036EE6C(v2036, (__int128 *)v162, (__int128 *)v157);
  sub_10000BF04(v155, "CC");
  sub_10000BF04(v150, "Cocos Islands");
  sub_10000BF04(&v152, "CC");
  v154 = 1026;
  sub_10036EE6C(v2037, (__int128 *)v155, (__int128 *)v150);
  sub_10000BF04(v148, "CK");
  sub_10000BF04(v143, "COOK ISLANDS");
  sub_10000BF04(&v145, "CK");
  v147 = 1026;
  sub_10036EE6C(v2038, (__int128 *)v148, (__int128 *)v143);
  sub_10000BF04(v141, "CX");
  sub_10000BF04(v136, "Christmas Islands");
  sub_10000BF04(&v138, "CX");
  v140 = 1026;
  sub_10036EE6C(v2039, (__int128 *)v141, (__int128 *)v136);
  sub_10000BF04(v134, "HM");
  sub_10000BF04(v129, "Heard Island and MCDonald");
  sub_10000BF04(&v131, "HM");
  v133 = 1026;
  sub_10036EE6C(v2040, (__int128 *)v134, (__int128 *)v129);
  sub_10000BF04(v127, "NU");
  sub_10000BF04(v122, "NIUE");
  sub_10000BF04(&v124, "NU");
  v126 = 1026;
  sub_10036EE6C(v2041, (__int128 *)v127, (__int128 *)v122);
  sub_10000BF04(v120, "TK");
  sub_10000BF04(v115, "TOKELAU");
  sub_10000BF04(&v117, "TK");
  v119 = 1026;
  sub_10036EE6C(v2042, (__int128 *)v120, (__int128 *)v115);
  sub_10000BF04(v113, "TV");
  sub_10000BF04(v108, "TUVALU");
  sub_10000BF04(&v110, "TV");
  v112 = 1026;
  sub_10036EE6C(v2043, (__int128 *)v113, (__int128 *)v108);
  sub_10000BF04(v106, "RU");
  sub_10000BF04(v101, "Russia");
  sub_10000BF04(&v103, "RU");
  v105 = -510;
  sub_10036EE6C(v2044, (__int128 *)v106, (__int128 *)v101);
  sub_10000BF04(v99, "SS");
  sub_10000BF04(v94, "South Sudan");
  sub_10000BF04(&v96, "SS");
  v98 = -509;
  sub_10036EE6C(v2045, (__int128 *)v99, (__int128 *)v94);
  sub_10000BF04(v92, "XZ");
  sub_10000BF04(v87, "");
  sub_10000BF04(&v89, "XZ");
  v91 = -512;
  sub_10036EE6C(v2046, (__int128 *)v92, (__int128 *)v87);
  sub_10000BF04(v85, "A6");
  sub_10000BF04(v80, "International Water");
  sub_10000BF04(&v82, "A6");
  v84 = -512;
  sub_10036EE6C(v2047, (__int128 *)v85, (__int128 *)v80);
  sub_10000BF04(v78, "KP");
  sub_10000BF04(v73, "North Korea");
  sub_10000BF04(&v75, "KP");
  v77 = -512;
  sub_10036EE6C(v2048, (__int128 *)v78, (__int128 *)v73);
  sub_10000BF04(v71, "JP");
  sub_10000BF04(v66, "Japan");
  sub_10000BF04(&v68, "JP");
  v70 = -510;
  sub_10036EE6C(v2049, (__int128 *)v71, (__int128 *)v66);
  sub_10000BF04(v64, "CU");
  sub_10000BF04(v59, "Cuba");
  sub_10000BF04(&v61, "CU");
  v63 = -511;
  sub_10036EE6C(v2050, (__int128 *)v64, (__int128 *)v59);
  sub_10000BF04(v57, "IR");
  sub_10000BF04(v52, "Iran");
  sub_10000BF04(&v54, "IR");
  v56 = -509;
  sub_10036EE6C(v2051, (__int128 *)v57, (__int128 *)v52);
  sub_10000BF04(v50, "SD");
  sub_10000BF04(v45, "Sudan");
  sub_10000BF04(&v47, "SD");
  v49 = -509;
  sub_10036EE6C(v2052, (__int128 *)v50, (__int128 *)v45);
  sub_10000BF04(v43, "SY");
  sub_10000BF04(v38, "Syria");
  sub_10000BF04(&v40, "SY");
  v42 = -509;
  sub_10036EE6C(v2053, (__int128 *)v43, (__int128 *)v38);
  sub_10000BF04(v36, "A1");
  sub_10000BF04(v31, "Bajo Nueva Bank");
  sub_10000BF04(&v33, "A1");
  v35 = -512;
  sub_10036EE6C(v2054, (__int128 *)v36, (__int128 *)v31);
  sub_10000BF04(v29, "A3");
  sub_10000BF04(v24, "Serranilla Bank");
  sub_10000BF04(&v26, "A3");
  v28 = -512;
  sub_10036EE6C(v2055, (__int128 *)v29, (__int128 *)v24);
  sub_10000BF04(v22, "AQ");
  sub_10000BF04(v17, "Antartica");
  sub_10000BF04(&v19, "AQ");
  v21 = -512;
  sub_10036EE6C(v2056, (__int128 *)v22, (__int128 *)v17);
  sub_10000BF04(v15, "NF");
  sub_10000BF04(v10, "Norfolk Island [Australia]");
  sub_10000BF04(&v12, "NF");
  v14 = -512;
  sub_10036EE6C(v2057, (__int128 *)v15, (__int128 *)v10);
  sub_10000BF04(v8, off_100853218[0]);
  sub_10000BF04(v3, "kUnknownCountry");
  sub_10000BF04(&__p, off_100853218[0]);
  v7 = 1;
  sub_10036EE6C(v2058, (__int128 *)v8, (__int128 *)v3);
  sub_10036F3FC((uint64_t)qword_10085FD30, v1802, 257);
  v0 = 20560;
  do
  {
    v1 = &v1802[v0];
    if (SHIBYTE(v1800[v0 / 8 + 1]) < 0)
      operator delete(*((void **)v1 - 4));
    if ((char)*(v1 - 33) < 0)
      operator delete(*((void **)v1 - 7));
    if (*(&v1796 + v0) < 0)
      operator delete(*((void **)v1 - 10));
    v0 -= 80;
  }
  while (v0);
  if (v6 < 0)
    operator delete(__p);
  if (v4 < 0)
    operator delete(v3[0]);
  if (v9 < 0)
    operator delete(v8[0]);
  if (v13 < 0)
    operator delete(v12);
  if (v11 < 0)
    operator delete(v10[0]);
  if (v16 < 0)
    operator delete(v15[0]);
  if (v20 < 0)
    operator delete(v19);
  if (v18 < 0)
    operator delete(v17[0]);
  if (v23 < 0)
    operator delete(v22[0]);
  if (v27 < 0)
    operator delete(v26);
  if (v25 < 0)
    operator delete(v24[0]);
  if (v30 < 0)
    operator delete(v29[0]);
  if (v34 < 0)
    operator delete(v33);
  if (v32 < 0)
    operator delete(v31[0]);
  if (v37 < 0)
    operator delete(v36[0]);
  if (v41 < 0)
    operator delete(v40);
  if (v39 < 0)
    operator delete(v38[0]);
  if (v44 < 0)
    operator delete(v43[0]);
  if (v48 < 0)
    operator delete(v47);
  if (v46 < 0)
    operator delete(v45[0]);
  if (v51 < 0)
    operator delete(v50[0]);
  if (v55 < 0)
    operator delete(v54);
  if (v53 < 0)
    operator delete(v52[0]);
  if (v58 < 0)
    operator delete(v57[0]);
  if (v62 < 0)
    operator delete(v61);
  if (v60 < 0)
    operator delete(v59[0]);
  if (v65 < 0)
    operator delete(v64[0]);
  if (v69 < 0)
    operator delete(v68);
  if (v67 < 0)
    operator delete(v66[0]);
  if (v72 < 0)
    operator delete(v71[0]);
  if (v76 < 0)
    operator delete(v75);
  if (v74 < 0)
    operator delete(v73[0]);
  if (v79 < 0)
    operator delete(v78[0]);
  if (v83 < 0)
    operator delete(v82);
  if (v81 < 0)
    operator delete(v80[0]);
  if (v86 < 0)
    operator delete(v85[0]);
  if (v90 < 0)
    operator delete(v89);
  if (v88 < 0)
    operator delete(v87[0]);
  if (v93 < 0)
    operator delete(v92[0]);
  if (v97 < 0)
    operator delete(v96);
  if (v95 < 0)
    operator delete(v94[0]);
  if (v100 < 0)
    operator delete(v99[0]);
  if (v104 < 0)
    operator delete(v103);
  if (v102 < 0)
    operator delete(v101[0]);
  if (v107 < 0)
    operator delete(v106[0]);
  if (v111 < 0)
    operator delete(v110);
  if (v109 < 0)
    operator delete(v108[0]);
  if (v114 < 0)
    operator delete(v113[0]);
  if (v118 < 0)
    operator delete(v117);
  if (v116 < 0)
    operator delete(v115[0]);
  if (v121 < 0)
    operator delete(v120[0]);
  if (v125 < 0)
    operator delete(v124);
  if (v123 < 0)
    operator delete(v122[0]);
  if (v128 < 0)
    operator delete(v127[0]);
  if (v132 < 0)
    operator delete(v131);
  if (v130 < 0)
    operator delete(v129[0]);
  if (v135 < 0)
    operator delete(v134[0]);
  if (v139 < 0)
    operator delete(v138);
  if (v137 < 0)
    operator delete(v136[0]);
  if (v142 < 0)
    operator delete(v141[0]);
  if (v146 < 0)
    operator delete(v145);
  if (v144 < 0)
    operator delete(v143[0]);
  if (v149 < 0)
    operator delete(v148[0]);
  if (v153 < 0)
    operator delete(v152);
  if (v151 < 0)
    operator delete(v150[0]);
  if (v156 < 0)
    operator delete(v155[0]);
  if (v160 < 0)
    operator delete(v159);
  if (v158 < 0)
    operator delete(v157[0]);
  if (v163 < 0)
    operator delete(v162[0]);
  if (v167 < 0)
    operator delete(v166);
  if (v165 < 0)
    operator delete(v164[0]);
  if (v170 < 0)
    operator delete(v169[0]);
  if (v174 < 0)
    operator delete(v173);
  if (v172 < 0)
    operator delete(v171[0]);
  if (v177 < 0)
    operator delete(v176[0]);
  if (v181 < 0)
    operator delete(v180);
  if (v179 < 0)
    operator delete(v178[0]);
  if (v184 < 0)
    operator delete(v183[0]);
  if (v188 < 0)
    operator delete(v187);
  if (v186 < 0)
    operator delete(v185[0]);
  if (v191 < 0)
    operator delete(v190[0]);
  if (v195 < 0)
    operator delete(v194);
  if (v193 < 0)
    operator delete(v192[0]);
  if (v198 < 0)
    operator delete(v197[0]);
  if (v202 < 0)
    operator delete(v201);
  if (v200 < 0)
    operator delete(v199[0]);
  if (v205 < 0)
    operator delete(v204[0]);
  if (v209 < 0)
    operator delete(v208);
  if (v207 < 0)
    operator delete(v206[0]);
  if (v212 < 0)
    operator delete(v211[0]);
  if (v216 < 0)
    operator delete(v215);
  if (v214 < 0)
    operator delete(v213[0]);
  if (v219 < 0)
    operator delete(v218[0]);
  if (v223 < 0)
    operator delete(v222);
  if (v221 < 0)
    operator delete(v220[0]);
  if (v226 < 0)
    operator delete(v225[0]);
  if (v230 < 0)
    operator delete(v229);
  if (v228 < 0)
    operator delete(v227[0]);
  if (v233 < 0)
    operator delete(v232[0]);
  if (v237 < 0)
    operator delete(v236);
  if (v235 < 0)
    operator delete(v234[0]);
  if (v240 < 0)
    operator delete(v239[0]);
  if (v244 < 0)
    operator delete(v243);
  if (v242 < 0)
    operator delete(v241[0]);
  if (v247 < 0)
    operator delete(v246[0]);
  if (v251 < 0)
    operator delete(v250);
  if (v249 < 0)
    operator delete(v248[0]);
  if (v254 < 0)
    operator delete(v253[0]);
  if (v258 < 0)
    operator delete(v257);
  if (v256 < 0)
    operator delete(v255[0]);
  if (v261 < 0)
    operator delete(v260[0]);
  if (v265 < 0)
    operator delete(v264);
  if (v263 < 0)
    operator delete(v262[0]);
  if (v268 < 0)
    operator delete(v267[0]);
  if (v272 < 0)
    operator delete(v271);
  if (v270 < 0)
    operator delete(v269[0]);
  if (v275 < 0)
    operator delete(v274[0]);
  if (v279 < 0)
    operator delete(v278);
  if (v277 < 0)
    operator delete(v276[0]);
  if (v282 < 0)
    operator delete(v281[0]);
  if (v286 < 0)
    operator delete(v285);
  if (v284 < 0)
    operator delete(v283[0]);
  if (v289 < 0)
    operator delete(v288[0]);
  if (v293 < 0)
    operator delete(v292);
  if (v291 < 0)
    operator delete(v290[0]);
  if (v296 < 0)
    operator delete(v295[0]);
  if (v300 < 0)
    operator delete(v299);
  if (v298 < 0)
    operator delete(v297[0]);
  if (v303 < 0)
    operator delete(v302[0]);
  if (v307 < 0)
    operator delete(v306);
  if (v305 < 0)
    operator delete(v304[0]);
  if (v310 < 0)
    operator delete(v309[0]);
  if (v314 < 0)
    operator delete(v313);
  if (v312 < 0)
    operator delete(v311[0]);
  if (v317 < 0)
    operator delete(v316[0]);
  if (v321 < 0)
    operator delete(v320);
  if (v319 < 0)
    operator delete(v318[0]);
  if (v324 < 0)
    operator delete(v323[0]);
  if (v328 < 0)
    operator delete(v327);
  if (v326 < 0)
    operator delete(v325[0]);
  if (v331 < 0)
    operator delete(v330[0]);
  if (v335 < 0)
    operator delete(v334);
  if (v333 < 0)
    operator delete(v332[0]);
  if (v338 < 0)
    operator delete(v337[0]);
  if (v342 < 0)
    operator delete(v341);
  if (v340 < 0)
    operator delete(v339[0]);
  if (v345 < 0)
    operator delete(v344[0]);
  if (v349 < 0)
    operator delete(v348);
  if (v347 < 0)
    operator delete(v346[0]);
  if (v352 < 0)
    operator delete(v351[0]);
  if (v356 < 0)
    operator delete(v355);
  if (v354 < 0)
    operator delete(v353[0]);
  if (v359 < 0)
    operator delete(v358[0]);
  if (v363 < 0)
    operator delete(v362);
  if (v361 < 0)
    operator delete(v360[0]);
  if (v366 < 0)
    operator delete(v365[0]);
  if (v370 < 0)
    operator delete(v369);
  if (v368 < 0)
    operator delete(v367[0]);
  if (v373 < 0)
    operator delete(v372[0]);
  if (v377 < 0)
    operator delete(v376);
  if (v375 < 0)
    operator delete(v374[0]);
  if (v380 < 0)
    operator delete(v379[0]);
  if (v384 < 0)
    operator delete(v383);
  if (v382 < 0)
    operator delete(v381[0]);
  if (v387 < 0)
    operator delete(v386[0]);
  if (v391 < 0)
    operator delete(v390);
  if (v389 < 0)
    operator delete(v388[0]);
  if (v394 < 0)
    operator delete(v393[0]);
  if (v398 < 0)
    operator delete(v397);
  if (v396 < 0)
    operator delete(v395[0]);
  if (v401 < 0)
    operator delete(v400[0]);
  if (v405 < 0)
    operator delete(v404);
  if (v403 < 0)
    operator delete(v402[0]);
  if (v408 < 0)
    operator delete(v407[0]);
  if (v412 < 0)
    operator delete(v411);
  if (v410 < 0)
    operator delete(v409[0]);
  if (v415 < 0)
    operator delete(v414[0]);
  if (v419 < 0)
    operator delete(v418);
  if (v417 < 0)
    operator delete(v416[0]);
  if (v422 < 0)
    operator delete(v421[0]);
  if (v426 < 0)
    operator delete(v425);
  if (v424 < 0)
    operator delete(v423[0]);
  if (v429 < 0)
    operator delete(v428[0]);
  if (v433 < 0)
    operator delete(v432);
  if (v431 < 0)
    operator delete(v430[0]);
  if (v436 < 0)
    operator delete(v435[0]);
  if (v440 < 0)
    operator delete(v439);
  if (v438 < 0)
    operator delete(v437[0]);
  if (v443 < 0)
    operator delete(v442[0]);
  if (v447 < 0)
    operator delete(v446);
  if (v445 < 0)
    operator delete(v444[0]);
  if (v450 < 0)
    operator delete(v449[0]);
  if (v454 < 0)
    operator delete(v453);
  if (v452 < 0)
    operator delete(v451[0]);
  if (v457 < 0)
    operator delete(v456[0]);
  if (v461 < 0)
    operator delete(v460);
  if (v459 < 0)
    operator delete(v458[0]);
  if (v464 < 0)
    operator delete(v463[0]);
  if (v468 < 0)
    operator delete(v467);
  if (v466 < 0)
    operator delete(v465[0]);
  if (v471 < 0)
    operator delete(v470[0]);
  if (v475 < 0)
    operator delete(v474);
  if (v473 < 0)
    operator delete(v472[0]);
  if (v478 < 0)
    operator delete(v477[0]);
  if (v482 < 0)
    operator delete(v481);
  if (v480 < 0)
    operator delete(v479[0]);
  if (v485 < 0)
    operator delete(v484[0]);
  if (v489 < 0)
    operator delete(v488);
  if (v487 < 0)
    operator delete(v486[0]);
  if (v492 < 0)
    operator delete(v491[0]);
  if (v496 < 0)
    operator delete(v495);
  if (v494 < 0)
    operator delete(v493[0]);
  if (v499 < 0)
    operator delete(v498[0]);
  if (v503 < 0)
    operator delete(v502);
  if (v501 < 0)
    operator delete(v500[0]);
  if (v506 < 0)
    operator delete(v505[0]);
  if (v510 < 0)
    operator delete(v509);
  if (v508 < 0)
    operator delete(v507[0]);
  if (v513 < 0)
    operator delete(v512[0]);
  if (v517 < 0)
    operator delete(v516);
  if (v515 < 0)
    operator delete(v514[0]);
  if (v520 < 0)
    operator delete(v519[0]);
  if (v524 < 0)
    operator delete(v523);
  if (v522 < 0)
    operator delete(v521[0]);
  if (v527 < 0)
    operator delete(v526[0]);
  if (v531 < 0)
    operator delete(v530);
  if (v529 < 0)
    operator delete(v528[0]);
  if (v534 < 0)
    operator delete(v533[0]);
  if (v538 < 0)
    operator delete(v537);
  if (v536 < 0)
    operator delete(v535[0]);
  if (v541 < 0)
    operator delete(v540[0]);
  if (v545 < 0)
    operator delete(v544);
  if (v543 < 0)
    operator delete(v542[0]);
  if (v548 < 0)
    operator delete(v547[0]);
  if (v552 < 0)
    operator delete(v551);
  if (v550 < 0)
    operator delete(v549[0]);
  if (v555 < 0)
    operator delete(v554[0]);
  if (v559 < 0)
    operator delete(v558);
  if (v557 < 0)
    operator delete(v556[0]);
  if (v562 < 0)
    operator delete(v561[0]);
  if (v566 < 0)
    operator delete(v565);
  if (v564 < 0)
    operator delete(v563[0]);
  if (v569 < 0)
    operator delete(v568[0]);
  if (v573 < 0)
    operator delete(v572);
  if (v571 < 0)
    operator delete(v570[0]);
  if (v576 < 0)
    operator delete(v575[0]);
  if (v580 < 0)
    operator delete(v579);
  if (v578 < 0)
    operator delete(v577[0]);
  if (v583 < 0)
    operator delete(v582[0]);
  if (v587 < 0)
    operator delete(v586);
  if (v585 < 0)
    operator delete(v584[0]);
  if (v590 < 0)
    operator delete(v589[0]);
  if (v594 < 0)
    operator delete(v593);
  if (v592 < 0)
    operator delete(v591[0]);
  if (v597 < 0)
    operator delete(v596[0]);
  if (v601 < 0)
    operator delete(v600);
  if (v599 < 0)
    operator delete(v598[0]);
  if (v604 < 0)
    operator delete(v603[0]);
  if (v608 < 0)
    operator delete(v607);
  if (v606 < 0)
    operator delete(v605[0]);
  if (v611 < 0)
    operator delete(v610[0]);
  if (v615 < 0)
    operator delete(v614);
  if (v613 < 0)
    operator delete(v612[0]);
  if (v618 < 0)
    operator delete(v617[0]);
  if (v622 < 0)
    operator delete(v621);
  if (v620 < 0)
    operator delete(v619[0]);
  if (v625 < 0)
    operator delete(v624[0]);
  if (v629 < 0)
    operator delete(v628);
  if (v627 < 0)
    operator delete(v626[0]);
  if (v632 < 0)
    operator delete(v631[0]);
  if (v636 < 0)
    operator delete(v635);
  if (v634 < 0)
    operator delete(v633[0]);
  if (v639 < 0)
    operator delete(v638[0]);
  if (v643 < 0)
    operator delete(v642);
  if (v641 < 0)
    operator delete(v640[0]);
  if (v646 < 0)
    operator delete(v645[0]);
  if (v650 < 0)
    operator delete(v649);
  if (v648 < 0)
    operator delete(v647[0]);
  if (v653 < 0)
    operator delete(v652[0]);
  if (v657 < 0)
    operator delete(v656);
  if (v655 < 0)
    operator delete(v654[0]);
  if (v660 < 0)
    operator delete(v659[0]);
  if (v664 < 0)
    operator delete(v663);
  if (v662 < 0)
    operator delete(v661[0]);
  if (v667 < 0)
    operator delete(v666[0]);
  if (v671 < 0)
    operator delete(v670);
  if (v669 < 0)
    operator delete(v668[0]);
  if (v674 < 0)
    operator delete(v673[0]);
  if (v678 < 0)
    operator delete(v677);
  if (v676 < 0)
    operator delete(v675[0]);
  if (v681 < 0)
    operator delete(v680[0]);
  if (v685 < 0)
    operator delete(v684);
  if (v683 < 0)
    operator delete(v682[0]);
  if (v688 < 0)
    operator delete(v687[0]);
  if (v692 < 0)
    operator delete(v691);
  if (v690 < 0)
    operator delete(v689[0]);
  if (v695 < 0)
    operator delete(v694[0]);
  if (v699 < 0)
    operator delete(v698);
  if (v697 < 0)
    operator delete(v696[0]);
  if (v702 < 0)
    operator delete(v701[0]);
  if (v706 < 0)
    operator delete(v705);
  if (v704 < 0)
    operator delete(v703[0]);
  if (v709 < 0)
    operator delete(v708[0]);
  if (v713 < 0)
    operator delete(v712);
  if (v711 < 0)
    operator delete(v710[0]);
  if (v716 < 0)
    operator delete(v715[0]);
  if (v720 < 0)
    operator delete(v719);
  if (v718 < 0)
    operator delete(v717[0]);
  if (v723 < 0)
    operator delete(v722[0]);
  if (v727 < 0)
    operator delete(v726);
  if (v725 < 0)
    operator delete(v724[0]);
  if (v730 < 0)
    operator delete(v729[0]);
  if (v734 < 0)
    operator delete(v733);
  if (v732 < 0)
    operator delete(v731[0]);
  if (v737 < 0)
    operator delete(v736[0]);
  if (v741 < 0)
    operator delete(v740);
  if (v739 < 0)
    operator delete(v738[0]);
  if (v744 < 0)
    operator delete(v743[0]);
  if (v748 < 0)
    operator delete(v747);
  if (v746 < 0)
    operator delete(v745[0]);
  if (v751 < 0)
    operator delete(v750[0]);
  if (v755 < 0)
    operator delete(v754);
  if (v753 < 0)
    operator delete(v752[0]);
  if (v758 < 0)
    operator delete(v757[0]);
  if (v762 < 0)
    operator delete(v761);
  if (v760 < 0)
    operator delete(v759[0]);
  if (v765 < 0)
    operator delete(v764[0]);
  if (v769 < 0)
    operator delete(v768);
  if (v767 < 0)
    operator delete(v766[0]);
  if (v772 < 0)
    operator delete(v771[0]);
  if (v776 < 0)
    operator delete(v775);
  if (v774 < 0)
    operator delete(v773[0]);
  if (v779 < 0)
    operator delete(v778[0]);
  if (v783 < 0)
    operator delete(v782);
  if (v781 < 0)
    operator delete(v780[0]);
  if (v786 < 0)
    operator delete(v785[0]);
  if (v790 < 0)
    operator delete(v789);
  if (v788 < 0)
    operator delete(v787[0]);
  if (v793 < 0)
    operator delete(v792[0]);
  if (v797 < 0)
    operator delete(v796);
  if (v795 < 0)
    operator delete(v794[0]);
  if (v800 < 0)
    operator delete(v799[0]);
  if (v804 < 0)
    operator delete(v803);
  if (v802 < 0)
    operator delete(v801[0]);
  if (v807 < 0)
    operator delete(v806[0]);
  if (v811 < 0)
    operator delete(v810);
  if (v809 < 0)
    operator delete(v808[0]);
  if (v814 < 0)
    operator delete(v813[0]);
  if (v818 < 0)
    operator delete(v817);
  if (v816 < 0)
    operator delete(v815[0]);
  if (v821 < 0)
    operator delete(v820[0]);
  if (v825 < 0)
    operator delete(v824);
  if (v823 < 0)
    operator delete(v822[0]);
  if (v828 < 0)
    operator delete(v827[0]);
  if (v832 < 0)
    operator delete(v831);
  if (v830 < 0)
    operator delete(v829[0]);
  if (v835 < 0)
    operator delete(v834[0]);
  if (v839 < 0)
    operator delete(v838);
  if (v837 < 0)
    operator delete(v836[0]);
  if (v842 < 0)
    operator delete(v841[0]);
  if (v846 < 0)
    operator delete(v845);
  if (v844 < 0)
    operator delete(v843[0]);
  if (v849 < 0)
    operator delete(v848[0]);
  if (v853 < 0)
    operator delete(v852);
  if (v851 < 0)
    operator delete(v850[0]);
  if (v856 < 0)
    operator delete(v855[0]);
  if (v860 < 0)
    operator delete(v859);
  if (v858 < 0)
    operator delete(v857[0]);
  if (v863 < 0)
    operator delete(v862[0]);
  if (v867 < 0)
    operator delete(v866);
  if (v865 < 0)
    operator delete(v864[0]);
  if (v870 < 0)
    operator delete(v869[0]);
  if (v874 < 0)
    operator delete(v873);
  if (v872 < 0)
    operator delete(v871[0]);
  if (v877 < 0)
    operator delete(v876[0]);
  if (v881 < 0)
    operator delete(v880);
  if (v879 < 0)
    operator delete(v878[0]);
  if (v884 < 0)
    operator delete(v883[0]);
  if (v888 < 0)
    operator delete(v887);
  if (v886 < 0)
    operator delete(v885[0]);
  if (v891 < 0)
    operator delete(v890[0]);
  if (v895 < 0)
    operator delete(v894);
  if (v893 < 0)
    operator delete(v892[0]);
  if (v898 < 0)
    operator delete(v897[0]);
  if (v902 < 0)
    operator delete(v901);
  if (v900 < 0)
    operator delete(v899[0]);
  if (v905 < 0)
    operator delete(v904[0]);
  if (v909 < 0)
    operator delete(v908);
  if (v907 < 0)
    operator delete(v906[0]);
  if (v912 < 0)
    operator delete(v911[0]);
  if (v916 < 0)
    operator delete(v915);
  if (v914 < 0)
    operator delete(v913[0]);
  if (v919 < 0)
    operator delete(v918[0]);
  if (v923 < 0)
    operator delete(v922);
  if (v921 < 0)
    operator delete(v920[0]);
  if (v926 < 0)
    operator delete(v925[0]);
  if (v930 < 0)
    operator delete(v929);
  if (v928 < 0)
    operator delete(v927[0]);
  if (v933 < 0)
    operator delete(v932[0]);
  if (v937 < 0)
    operator delete(v936);
  if (v935 < 0)
    operator delete(v934[0]);
  if (v940 < 0)
    operator delete(v939[0]);
  if (v944 < 0)
    operator delete(v943);
  if (v942 < 0)
    operator delete(v941[0]);
  if (v947 < 0)
    operator delete(v946[0]);
  if (v951 < 0)
    operator delete(v950);
  if (v949 < 0)
    operator delete(v948[0]);
  if (v954 < 0)
    operator delete(v953[0]);
  if (v958 < 0)
    operator delete(v957);
  if (v956 < 0)
    operator delete(v955[0]);
  if (v961 < 0)
    operator delete(v960[0]);
  if (v965 < 0)
    operator delete(v964);
  if (v963 < 0)
    operator delete(v962[0]);
  if (v968 < 0)
    operator delete(v967[0]);
  if (v972 < 0)
    operator delete(v971);
  if (v970 < 0)
    operator delete(v969[0]);
  if (v975 < 0)
    operator delete(v974[0]);
  if (v979 < 0)
    operator delete(v978);
  if (v977 < 0)
    operator delete(v976[0]);
  if (v982 < 0)
    operator delete(v981[0]);
  if (v986 < 0)
    operator delete(v985);
  if (v984 < 0)
    operator delete(v983[0]);
  if (v989 < 0)
    operator delete(v988[0]);
  if (v993 < 0)
    operator delete(v992);
  if (v991 < 0)
    operator delete(v990[0]);
  if (v996 < 0)
    operator delete(v995[0]);
  if (v1000 < 0)
    operator delete(v999);
  if (v998 < 0)
    operator delete(v997[0]);
  if (v1003 < 0)
    operator delete(v1002[0]);
  if (v1007 < 0)
    operator delete(v1006);
  if (v1005 < 0)
    operator delete(v1004[0]);
  if (v1010 < 0)
    operator delete(v1009[0]);
  if (v1014 < 0)
    operator delete(v1013);
  if (v1012 < 0)
    operator delete(v1011[0]);
  if (v1017 < 0)
    operator delete(v1016[0]);
  if (v1021 < 0)
    operator delete(v1020);
  if (v1019 < 0)
    operator delete(v1018[0]);
  if (v1024 < 0)
    operator delete(v1023[0]);
  if (v1028 < 0)
    operator delete(v1027);
  if (v1026 < 0)
    operator delete(v1025[0]);
  if (v1031 < 0)
    operator delete(v1030[0]);
  if (v1035 < 0)
    operator delete(v1034);
  if (v1033 < 0)
    operator delete(v1032[0]);
  if (v1038 < 0)
    operator delete(v1037[0]);
  if (v1042 < 0)
    operator delete(v1041);
  if (v1040 < 0)
    operator delete(v1039[0]);
  if (v1045 < 0)
    operator delete(v1044[0]);
  if (v1049 < 0)
    operator delete(v1048);
  if (v1047 < 0)
    operator delete(v1046[0]);
  if (v1052 < 0)
    operator delete(v1051[0]);
  if (v1056 < 0)
    operator delete(v1055);
  if (v1054 < 0)
    operator delete(v1053[0]);
  if (v1059 < 0)
    operator delete(v1058[0]);
  if (v1063 < 0)
    operator delete(v1062);
  if (v1061 < 0)
    operator delete(v1060[0]);
  if (v1066 < 0)
    operator delete(v1065[0]);
  if (v1070 < 0)
    operator delete(v1069);
  if (v1068 < 0)
    operator delete(v1067[0]);
  if (v1073 < 0)
    operator delete(v1072[0]);
  if (v1077 < 0)
    operator delete(v1076);
  if (v1075 < 0)
    operator delete(v1074[0]);
  if (v1080 < 0)
    operator delete(v1079[0]);
  if (v1084 < 0)
    operator delete(v1083);
  if (v1082 < 0)
    operator delete(v1081[0]);
  if (v1087 < 0)
    operator delete(v1086[0]);
  if (v1091 < 0)
    operator delete(v1090);
  if (v1089 < 0)
    operator delete(v1088[0]);
  if (v1094 < 0)
    operator delete(v1093[0]);
  if (v1098 < 0)
    operator delete(v1097);
  if (v1096 < 0)
    operator delete(v1095[0]);
  if (v1101 < 0)
    operator delete(v1100[0]);
  if (v1105 < 0)
    operator delete(v1104);
  if (v1103 < 0)
    operator delete(v1102[0]);
  if (v1108 < 0)
    operator delete(v1107[0]);
  if (v1112 < 0)
    operator delete(v1111);
  if (v1110 < 0)
    operator delete(v1109[0]);
  if (v1115 < 0)
    operator delete(v1114[0]);
  if (v1119 < 0)
    operator delete(v1118);
  if (v1117 < 0)
    operator delete(v1116[0]);
  if (v1122 < 0)
    operator delete(v1121[0]);
  if (v1126 < 0)
    operator delete(v1125);
  if (v1124 < 0)
    operator delete(v1123[0]);
  if (v1129 < 0)
    operator delete(v1128[0]);
  if (v1133 < 0)
    operator delete(v1132);
  if (v1131 < 0)
    operator delete(v1130[0]);
  if (v1136 < 0)
    operator delete(v1135[0]);
  if (v1140 < 0)
    operator delete(v1139);
  if (v1138 < 0)
    operator delete(v1137[0]);
  if (v1143 < 0)
    operator delete(v1142[0]);
  if (v1147 < 0)
    operator delete(v1146);
  if (v1145 < 0)
    operator delete(v1144[0]);
  if (v1150 < 0)
    operator delete(v1149[0]);
  if (v1154 < 0)
    operator delete(v1153);
  if (v1152 < 0)
    operator delete(v1151[0]);
  if (v1157 < 0)
    operator delete(v1156[0]);
  if (v1161 < 0)
    operator delete(v1160);
  if (v1159 < 0)
    operator delete(v1158[0]);
  if (v1164 < 0)
    operator delete(v1163[0]);
  if (v1168 < 0)
    operator delete(v1167);
  if (v1166 < 0)
    operator delete(v1165[0]);
  if (v1171 < 0)
    operator delete(v1170[0]);
  if (v1175 < 0)
    operator delete(v1174);
  if (v1173 < 0)
    operator delete(v1172[0]);
  if (v1178 < 0)
    operator delete(v1177[0]);
  if (v1182 < 0)
    operator delete(v1181);
  if (v1180 < 0)
    operator delete(v1179[0]);
  if (v1185 < 0)
    operator delete(v1184[0]);
  if (v1189 < 0)
    operator delete(v1188);
  if (v1187 < 0)
    operator delete(v1186[0]);
  if (v1192 < 0)
    operator delete(v1191[0]);
  if (v1196 < 0)
    operator delete(v1195);
  if (v1194 < 0)
    operator delete(v1193[0]);
  if (v1199 < 0)
    operator delete(v1198[0]);
  if (v1203 < 0)
    operator delete(v1202);
  if (v1201 < 0)
    operator delete(v1200[0]);
  if (v1206 < 0)
    operator delete(v1205[0]);
  if (v1210 < 0)
    operator delete(v1209);
  if (v1208 < 0)
    operator delete(v1207[0]);
  if (v1213 < 0)
    operator delete(v1212[0]);
  if (v1217 < 0)
    operator delete(v1216);
  if (v1215 < 0)
    operator delete(v1214[0]);
  if (v1220 < 0)
    operator delete(v1219[0]);
  if (v1224 < 0)
    operator delete(v1223);
  if (v1222 < 0)
    operator delete(v1221[0]);
  if (v1227 < 0)
    operator delete(v1226[0]);
  if (v1231 < 0)
    operator delete(v1230);
  if (v1229 < 0)
    operator delete(v1228[0]);
  if (v1234 < 0)
    operator delete(v1233[0]);
  if (v1238 < 0)
    operator delete(v1237);
  if (v1236 < 0)
    operator delete(v1235[0]);
  if (v1241 < 0)
    operator delete(v1240[0]);
  if (v1245 < 0)
    operator delete(v1244);
  if (v1243 < 0)
    operator delete(v1242[0]);
  if (v1248 < 0)
    operator delete(v1247[0]);
  if (v1252 < 0)
    operator delete(v1251);
  if (v1250 < 0)
    operator delete(v1249[0]);
  if (v1255 < 0)
    operator delete(v1254[0]);
  if (v1259 < 0)
    operator delete(v1258);
  if (v1257 < 0)
    operator delete(v1256[0]);
  if (v1262 < 0)
    operator delete(v1261[0]);
  if (v1266 < 0)
    operator delete(v1265);
  if (v1264 < 0)
    operator delete(v1263[0]);
  if (v1269 < 0)
    operator delete(v1268[0]);
  if (v1273 < 0)
    operator delete(v1272);
  if (v1271 < 0)
    operator delete(v1270[0]);
  if (v1276 < 0)
    operator delete(v1275[0]);
  if (v1280 < 0)
    operator delete(v1279);
  if (v1278 < 0)
    operator delete(v1277[0]);
  if (v1283 < 0)
    operator delete(v1282[0]);
  if (v1287 < 0)
    operator delete(v1286);
  if (v1285 < 0)
    operator delete(v1284[0]);
  if (v1290 < 0)
    operator delete(v1289[0]);
  if (v1294 < 0)
    operator delete(v1293);
  if (v1292 < 0)
    operator delete(v1291[0]);
  if (v1297 < 0)
    operator delete(v1296[0]);
  if (v1301 < 0)
    operator delete(v1300);
  if (v1299 < 0)
    operator delete(v1298[0]);
  if (v1304 < 0)
    operator delete(v1303[0]);
  if (v1308 < 0)
    operator delete(v1307);
  if (v1306 < 0)
    operator delete(v1305[0]);
  if (v1311 < 0)
    operator delete(v1310[0]);
  if (v1315 < 0)
    operator delete(v1314);
  if (v1313 < 0)
    operator delete(v1312[0]);
  if (v1318 < 0)
    operator delete(v1317[0]);
  if (v1322 < 0)
    operator delete(v1321);
  if (v1320 < 0)
    operator delete(v1319[0]);
  if (v1325 < 0)
    operator delete(v1324[0]);
  if (v1329 < 0)
    operator delete(v1328);
  if (v1327 < 0)
    operator delete(v1326[0]);
  if (v1332 < 0)
    operator delete(v1331[0]);
  if (v1336 < 0)
    operator delete(v1335);
  if (v1334 < 0)
    operator delete(v1333[0]);
  if (v1339 < 0)
    operator delete(v1338[0]);
  if (v1343 < 0)
    operator delete(v1342);
  if (v1341 < 0)
    operator delete(v1340[0]);
  if (v1346 < 0)
    operator delete(v1345[0]);
  if (v1350 < 0)
    operator delete(v1349);
  if (v1348 < 0)
    operator delete(v1347[0]);
  if (v1353 < 0)
    operator delete(v1352[0]);
  if (v1357 < 0)
    operator delete(v1356);
  if (v1355 < 0)
    operator delete(v1354[0]);
  if (v1360 < 0)
    operator delete(v1359[0]);
  if (v1364 < 0)
    operator delete(v1363);
  if (v1362 < 0)
    operator delete(v1361[0]);
  if (v1367 < 0)
    operator delete(v1366[0]);
  if (v1371 < 0)
    operator delete(v1370);
  if (v1369 < 0)
    operator delete(v1368[0]);
  if (v1374 < 0)
    operator delete(v1373[0]);
  if (v1378 < 0)
    operator delete(v1377);
  if (v1376 < 0)
    operator delete(v1375[0]);
  if (v1381 < 0)
    operator delete(v1380[0]);
  if (v1385 < 0)
    operator delete(v1384);
  if (v1383 < 0)
    operator delete(v1382[0]);
  if (v1388 < 0)
    operator delete(v1387[0]);
  if (v1392 < 0)
    operator delete(v1391);
  if (v1390 < 0)
    operator delete(v1389[0]);
  if (v1395 < 0)
    operator delete(v1394[0]);
  if (v1399 < 0)
    operator delete(v1398);
  if (v1397 < 0)
    operator delete(v1396[0]);
  if (v1402 < 0)
    operator delete(v1401[0]);
  if (v1406 < 0)
    operator delete(v1405);
  if (v1404 < 0)
    operator delete(v1403[0]);
  if (v1409 < 0)
    operator delete(v1408[0]);
  if (v1413 < 0)
    operator delete(v1412);
  if (v1411 < 0)
    operator delete(v1410[0]);
  if (v1416 < 0)
    operator delete(v1415[0]);
  if (v1420 < 0)
    operator delete(v1419);
  if (v1418 < 0)
    operator delete(v1417[0]);
  if (v1423 < 0)
    operator delete(v1422[0]);
  if (v1427 < 0)
    operator delete(v1426);
  if (v1425 < 0)
    operator delete(v1424[0]);
  if (v1430 < 0)
    operator delete(v1429[0]);
  if (v1434 < 0)
    operator delete(v1433);
  if (v1432 < 0)
    operator delete(v1431[0]);
  if (v1437 < 0)
    operator delete(v1436[0]);
  if (v1441 < 0)
    operator delete(v1440);
  if (v1439 < 0)
    operator delete(v1438[0]);
  if (v1444 < 0)
    operator delete(v1443[0]);
  if (v1448 < 0)
    operator delete(v1447);
  if (v1446 < 0)
    operator delete(v1445[0]);
  if (v1451 < 0)
    operator delete(v1450[0]);
  if (v1455 < 0)
    operator delete(v1454);
  if (v1453 < 0)
    operator delete(v1452[0]);
  if (v1458 < 0)
    operator delete(v1457[0]);
  if (v1462 < 0)
    operator delete(v1461);
  if (v1460 < 0)
    operator delete(v1459[0]);
  if (v1465 < 0)
    operator delete(v1464[0]);
  if (v1469 < 0)
    operator delete(v1468);
  if (v1467 < 0)
    operator delete(v1466[0]);
  if (v1472 < 0)
    operator delete(v1471[0]);
  if (v1476 < 0)
    operator delete(v1475);
  if (v1474 < 0)
    operator delete(v1473[0]);
  if (v1479 < 0)
    operator delete(v1478[0]);
  if (v1483 < 0)
    operator delete(v1482);
  if (v1481 < 0)
    operator delete(v1480[0]);
  if (v1486 < 0)
    operator delete(v1485[0]);
  if (v1490 < 0)
    operator delete(v1489);
  if (v1488 < 0)
    operator delete(v1487[0]);
  if (v1493 < 0)
    operator delete(v1492[0]);
  if (v1497 < 0)
    operator delete(v1496);
  if (v1495 < 0)
    operator delete(v1494[0]);
  if (v1500 < 0)
    operator delete(v1499[0]);
  if (v1504 < 0)
    operator delete(v1503);
  if (v1502 < 0)
    operator delete(v1501[0]);
  if (v1507 < 0)
    operator delete(v1506[0]);
  if (v1511 < 0)
    operator delete(v1510);
  if (v1509 < 0)
    operator delete(v1508[0]);
  if (v1514 < 0)
    operator delete(v1513[0]);
  if (v1518 < 0)
    operator delete(v1517);
  if (v1516 < 0)
    operator delete(v1515[0]);
  if (v1521 < 0)
    operator delete(v1520[0]);
  if (v1525 < 0)
    operator delete(v1524);
  if (v1523 < 0)
    operator delete(v1522[0]);
  if (v1528 < 0)
    operator delete(v1527[0]);
  if (v1532 < 0)
    operator delete(v1531);
  if (v1530 < 0)
    operator delete(v1529[0]);
  if (v1535 < 0)
    operator delete(v1534[0]);
  if (v1539 < 0)
    operator delete(v1538);
  if (v1537 < 0)
    operator delete(v1536[0]);
  if (v1542 < 0)
    operator delete(v1541[0]);
  if (v1546 < 0)
    operator delete(v1545);
  if (v1544 < 0)
    operator delete(v1543[0]);
  if (v1549 < 0)
    operator delete(v1548[0]);
  if (v1553 < 0)
    operator delete(v1552);
  if (v1551 < 0)
    operator delete(v1550[0]);
  if (v1556 < 0)
    operator delete(v1555[0]);
  if (v1560 < 0)
    operator delete(v1559);
  if (v1558 < 0)
    operator delete(v1557[0]);
  if (v1563 < 0)
    operator delete(v1562[0]);
  if (v1567 < 0)
    operator delete(v1566);
  if (v1565 < 0)
    operator delete(v1564[0]);
  if (v1570 < 0)
    operator delete(v1569[0]);
  if (v1574 < 0)
    operator delete(v1573);
  if (v1572 < 0)
    operator delete(v1571[0]);
  if (v1577 < 0)
    operator delete(v1576[0]);
  if (v1581 < 0)
    operator delete(v1580);
  if (v1579 < 0)
    operator delete(v1578[0]);
  if (v1584 < 0)
    operator delete(v1583[0]);
  if (v1588 < 0)
    operator delete(v1587);
  if (v1586 < 0)
    operator delete(v1585[0]);
  if (v1591 < 0)
    operator delete(v1590[0]);
  if (v1595 < 0)
    operator delete(v1594);
  if (v1593 < 0)
    operator delete(v1592[0]);
  if (v1598 < 0)
    operator delete(v1597[0]);
  if (v1602 < 0)
    operator delete(v1601);
  if (v1600 < 0)
    operator delete(v1599[0]);
  if (v1605 < 0)
    operator delete(v1604[0]);
  if (v1609 < 0)
    operator delete(v1608);
  if (v1607 < 0)
    operator delete(v1606[0]);
  if (v1612 < 0)
    operator delete(v1611[0]);
  if (v1616 < 0)
    operator delete(v1615);
  if (v1614 < 0)
    operator delete(v1613[0]);
  if (v1619 < 0)
    operator delete(v1618[0]);
  if (v1623 < 0)
    operator delete(v1622);
  if (v1621 < 0)
    operator delete(v1620[0]);
  if (v1626 < 0)
    operator delete(v1625[0]);
  if (v1630 < 0)
    operator delete(v1629);
  if (v1628 < 0)
    operator delete(v1627[0]);
  if (v1633 < 0)
    operator delete(v1632[0]);
  if (v1637 < 0)
    operator delete(v1636);
  if (v1635 < 0)
    operator delete(v1634[0]);
  if (v1640 < 0)
    operator delete(v1639[0]);
  if (v1644 < 0)
    operator delete(v1643);
  if (v1642 < 0)
    operator delete(v1641[0]);
  if (v1647 < 0)
    operator delete(v1646[0]);
  if (v1651 < 0)
    operator delete(v1650);
  if (v1649 < 0)
    operator delete(v1648[0]);
  if (v1654 < 0)
    operator delete(v1653[0]);
  if (v1658 < 0)
    operator delete(v1657);
  if (v1656 < 0)
    operator delete(v1655[0]);
  if (v1661 < 0)
    operator delete(v1660[0]);
  if (v1665 < 0)
    operator delete(v1664);
  if (v1663 < 0)
    operator delete(v1662[0]);
  if (v1668 < 0)
    operator delete(v1667[0]);
  if (v1672 < 0)
    operator delete(v1671);
  if (v1670 < 0)
    operator delete(v1669[0]);
  if (v1675 < 0)
    operator delete(v1674[0]);
  if (v1679 < 0)
    operator delete(v1678);
  if (v1677 < 0)
    operator delete(v1676[0]);
  if (v1682 < 0)
    operator delete(v1681[0]);
  if (v1686 < 0)
    operator delete(v1685);
  if (v1684 < 0)
    operator delete(v1683[0]);
  if (v1689 < 0)
    operator delete(v1688[0]);
  if (v1693 < 0)
    operator delete(v1692);
  if (v1691 < 0)
    operator delete(v1690[0]);
  if (v1696 < 0)
    operator delete(v1695[0]);
  if (v1700 < 0)
    operator delete(v1699);
  if (v1698 < 0)
    operator delete(v1697[0]);
  if (v1703 < 0)
    operator delete(v1702[0]);
  if (v1707 < 0)
    operator delete(v1706);
  if (v1705 < 0)
    operator delete(v1704[0]);
  if (v1710 < 0)
    operator delete(v1709[0]);
  if (v1714 < 0)
    operator delete(v1713);
  if (v1712 < 0)
    operator delete(v1711[0]);
  if (v1717 < 0)
    operator delete(v1716[0]);
  if (v1721 < 0)
    operator delete(v1720);
  if (v1719 < 0)
    operator delete(v1718[0]);
  if (v1724 < 0)
    operator delete(v1723[0]);
  if (v1728 < 0)
    operator delete(v1727);
  if (v1726 < 0)
    operator delete(v1725[0]);
  if (v1731 < 0)
    operator delete(v1730[0]);
  if (v1735 < 0)
    operator delete(v1734);
  if (v1733 < 0)
    operator delete(v1732[0]);
  if (v1738 < 0)
    operator delete(v1737[0]);
  if (v1742 < 0)
    operator delete(v1741);
  if (v1740 < 0)
    operator delete(v1739[0]);
  if (v1745 < 0)
    operator delete(v1744[0]);
  if (v1749 < 0)
    operator delete(v1748);
  if (v1747 < 0)
    operator delete(v1746[0]);
  if (v1752 < 0)
    operator delete(v1751[0]);
  if (v1756 < 0)
    operator delete(v1755);
  if (v1754 < 0)
    operator delete(v1753[0]);
  if (v1759 < 0)
    operator delete(v1758[0]);
  if (v1763 < 0)
    operator delete(v1762);
  if (v1761 < 0)
    operator delete(v1760[0]);
  if (v1766 < 0)
    operator delete(v1765[0]);
  if (v1770 < 0)
    operator delete(v1769);
  if (v1768 < 0)
    operator delete(v1767[0]);
  if (v1773 < 0)
    operator delete(v1772[0]);
  if (v1777 < 0)
    operator delete(v1776);
  if (v1775 < 0)
    operator delete(v1774[0]);
  if (v1780 < 0)
    operator delete(v1779[0]);
  if (v1784 < 0)
    operator delete(v1783);
  if (v1782 < 0)
    operator delete(v1781[0]);
  if (v1787 < 0)
    operator delete(v1786[0]);
  if (v1791 < 0)
    operator delete(v1790);
  if (v1789 < 0)
    operator delete(v1788[0]);
  if (v1794 < 0)
    operator delete(v1793[0]);
  if (v1798 < 0)
    operator delete(v1797);
  if (v1796 < 0)
    operator delete(v1795[0]);
  if (v1801 < 0)
    operator delete(v1800[0]);
  return __cxa_atexit((void (*)(void *))sub_10036ED74, qword_10085FD30, (void *)&_mh_execute_header);
}

void sub_100387B2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,int a58,__int16 a59,char a60,char a61,char a62,uint64_t a63)
{
  void *a69;
  char a72;
  char a73;
  void *a74;
  char a75;
  char a76;
  char *v76;
  char *v77;
  char *v78;
  char *v79;
  char *v80;
  uint64_t v81;
  uint64_t i;

  for (i = 20480; i != -80; i -= 80)
    sub_10036ED20(v81 + i);
  sub_1001D5744((uint64_t)&a10);
  if (a22 < 0)
    operator delete(__p);
  sub_1001D5744((uint64_t)&a23);
  if (a35 < 0)
    operator delete(a30);
  sub_1001D5744((uint64_t)&a36);
  if (a48 < 0)
    operator delete(a43);
  sub_1001D5744((uint64_t)&a49);
  if (a61 < 0)
    operator delete(a56);
  sub_1001D5744((uint64_t)&a62);
  if (a72 < 0)
    operator delete(a69);
  sub_1001D5744((uint64_t)&a73);
  if (a75 < 0)
    operator delete(a74);
  sub_1001D5744((uint64_t)&a76);
  if (SLOBYTE(STACK[0x237]) < 0)
    operator delete((void *)STACK[0x220]);
  sub_1001D5744((uint64_t)&STACK[0x238]);
  if (SLOBYTE(STACK[0x287]) < 0)
    operator delete((void *)STACK[0x270]);
  sub_1001D5744((uint64_t)&STACK[0x288]);
  if (SLOBYTE(STACK[0x2D7]) < 0)
    operator delete((void *)STACK[0x2C0]);
  sub_1001D5744((uint64_t)&STACK[0x2D8]);
  if (SLOBYTE(STACK[0x327]) < 0)
    operator delete((void *)STACK[0x310]);
  sub_1001D5744((uint64_t)&STACK[0x328]);
  if (SLOBYTE(STACK[0x377]) < 0)
    operator delete((void *)STACK[0x360]);
  sub_1001D5744((uint64_t)&STACK[0x378]);
  if (SLOBYTE(STACK[0x3C7]) < 0)
    operator delete((void *)STACK[0x3B0]);
  sub_1001D5744((uint64_t)&STACK[0x3C8]);
  if (SLOBYTE(STACK[0x417]) < 0)
    operator delete((void *)STACK[0x400]);
  sub_1001D5744((uint64_t)&STACK[0x418]);
  if (SLOBYTE(STACK[0x467]) < 0)
    operator delete((void *)STACK[0x450]);
  sub_1001D5744((uint64_t)&STACK[0x468]);
  if (SLOBYTE(STACK[0x4B7]) < 0)
    operator delete((void *)STACK[0x4A0]);
  sub_1001D5744((uint64_t)&STACK[0x4B8]);
  if (SLOBYTE(STACK[0x507]) < 0)
    operator delete((void *)STACK[0x4F0]);
  sub_1001D5744((uint64_t)&STACK[0x508]);
  if (SLOBYTE(STACK[0x557]) < 0)
    operator delete((void *)STACK[0x540]);
  sub_1001D5744((uint64_t)&STACK[0x558]);
  if (SLOBYTE(STACK[0x5A7]) < 0)
    operator delete((void *)STACK[0x590]);
  sub_1001D5744((uint64_t)&STACK[0x5A8]);
  if (SLOBYTE(STACK[0x5F7]) < 0)
    operator delete((void *)STACK[0x5E0]);
  sub_1001D5744((uint64_t)&STACK[0x5F8]);
  if (SLOBYTE(STACK[0x647]) < 0)
    operator delete((void *)STACK[0x630]);
  sub_1001D5744((uint64_t)&STACK[0x648]);
  if (SLOBYTE(STACK[0x697]) < 0)
    operator delete((void *)STACK[0x680]);
  sub_1001D5744((uint64_t)&STACK[0x698]);
  if (SLOBYTE(STACK[0x6E7]) < 0)
    operator delete((void *)STACK[0x6D0]);
  sub_1001D5744((uint64_t)&STACK[0x6E8]);
  if (SLOBYTE(STACK[0x737]) < 0)
    operator delete((void *)STACK[0x720]);
  sub_1001D5744((uint64_t)&STACK[0x738]);
  if (SLOBYTE(STACK[0x787]) < 0)
    operator delete((void *)STACK[0x770]);
  sub_1001D5744((uint64_t)&STACK[0x788]);
  if (SLOBYTE(STACK[0x7D7]) < 0)
    operator delete((void *)STACK[0x7C0]);
  sub_1001D5744((uint64_t)&STACK[0x7D8]);
  if (SLOBYTE(STACK[0x827]) < 0)
    operator delete((void *)STACK[0x810]);
  sub_1001D5744((uint64_t)&STACK[0x828]);
  if (SLOBYTE(STACK[0x877]) < 0)
    operator delete((void *)STACK[0x860]);
  sub_1001D5744((uint64_t)&STACK[0x878]);
  if (SLOBYTE(STACK[0x8C7]) < 0)
    operator delete((void *)STACK[0x8B0]);
  sub_1001D5744((uint64_t)&STACK[0x8C8]);
  if (SLOBYTE(STACK[0x917]) < 0)
    operator delete((void *)STACK[0x900]);
  sub_1001D5744((uint64_t)&STACK[0x918]);
  if (SLOBYTE(STACK[0x967]) < 0)
    operator delete((void *)STACK[0x950]);
  sub_1001D5744((uint64_t)&STACK[0x968]);
  if (SLOBYTE(STACK[0x9B7]) < 0)
    operator delete((void *)STACK[0x9A0]);
  sub_1001D5744((uint64_t)&STACK[0x9B8]);
  if (SLOBYTE(STACK[0xA07]) < 0)
    operator delete((void *)STACK[0x9F0]);
  sub_1001D5744((uint64_t)&STACK[0xA08]);
  if (SLOBYTE(STACK[0xA57]) < 0)
    operator delete((void *)STACK[0xA40]);
  sub_1001D5744((uint64_t)&STACK[0xA58]);
  if (SLOBYTE(STACK[0xAA7]) < 0)
    operator delete((void *)STACK[0xA90]);
  sub_1001D5744((uint64_t)&STACK[0xAA8]);
  if (SLOBYTE(STACK[0xAF7]) < 0)
    operator delete((void *)STACK[0xAE0]);
  sub_1001D5744((uint64_t)&STACK[0xAF8]);
  if (SLOBYTE(STACK[0xB47]) < 0)
    operator delete((void *)STACK[0xB30]);
  sub_1001D5744((uint64_t)&STACK[0xB48]);
  if (SLOBYTE(STACK[0xB97]) < 0)
    operator delete((void *)STACK[0xB80]);
  sub_1001D5744((uint64_t)&STACK[0xB98]);
  if (SLOBYTE(STACK[0xBE7]) < 0)
    operator delete((void *)STACK[0xBD0]);
  sub_1001D5744((uint64_t)&STACK[0xBE8]);
  if (SLOBYTE(STACK[0xC37]) < 0)
    operator delete((void *)STACK[0xC20]);
  sub_1001D5744((uint64_t)&STACK[0xC38]);
  if (SLOBYTE(STACK[0xC87]) < 0)
    operator delete((void *)STACK[0xC70]);
  sub_1001D5744((uint64_t)&STACK[0xC88]);
  if (SLOBYTE(STACK[0xCD7]) < 0)
    operator delete((void *)STACK[0xCC0]);
  sub_1001D5744((uint64_t)&STACK[0xCD8]);
  if (SLOBYTE(STACK[0xD27]) < 0)
    operator delete((void *)STACK[0xD10]);
  sub_1001D5744((uint64_t)&STACK[0xD28]);
  if (SLOBYTE(STACK[0xD77]) < 0)
    operator delete((void *)STACK[0xD60]);
  sub_1001D5744((uint64_t)&STACK[0xD78]);
  if (SLOBYTE(STACK[0xDC7]) < 0)
    operator delete((void *)STACK[0xDB0]);
  sub_1001D5744((uint64_t)&STACK[0xDC8]);
  if (SLOBYTE(STACK[0xE17]) < 0)
    operator delete((void *)STACK[0xE00]);
  sub_1001D5744((uint64_t)&STACK[0xE18]);
  if (SLOBYTE(STACK[0xE67]) < 0)
    operator delete((void *)STACK[0xE50]);
  sub_1001D5744((uint64_t)&STACK[0xE68]);
  if (SLOBYTE(STACK[0xEB7]) < 0)
    operator delete((void *)STACK[0xEA0]);
  sub_1001D5744((uint64_t)&STACK[0xEB8]);
  if (SLOBYTE(STACK[0xF07]) < 0)
    operator delete((void *)STACK[0xEF0]);
  sub_1001D5744((uint64_t)&STACK[0xF08]);
  if (SLOBYTE(STACK[0xF57]) < 0)
    operator delete((void *)STACK[0xF40]);
  sub_1001D5744((uint64_t)&STACK[0xF58]);
  if (v80[23] < 0)
    operator delete((void *)STACK[0xF90]);
  sub_1001D5744((uint64_t)&STACK[0xFA8]);
  if (v80[103] < 0)
    operator delete((void *)STACK[0xFE0]);
  sub_1001D5744((uint64_t)&STACK[0xFF8]);
  if (v80[183] < 0)
    operator delete((void *)STACK[0x1030]);
  sub_1001D5744((uint64_t)&STACK[0x1048]);
  if (v80[263] < 0)
    operator delete((void *)STACK[0x1080]);
  sub_1001D5744((uint64_t)&STACK[0x1098]);
  if (v80[343] < 0)
    operator delete((void *)STACK[0x10D0]);
  sub_1001D5744((uint64_t)&STACK[0x10E8]);
  if (v80[423] < 0)
    operator delete((void *)STACK[0x1120]);
  sub_1001D5744((uint64_t)&STACK[0x1138]);
  if (v80[503] < 0)
    operator delete((void *)STACK[0x1170]);
  sub_1001D5744((uint64_t)&STACK[0x1188]);
  if (v80[583] < 0)
    operator delete((void *)STACK[0x11C0]);
  sub_1001D5744((uint64_t)&STACK[0x11D8]);
  if (v80[663] < 0)
    operator delete((void *)STACK[0x1210]);
  sub_1001D5744((uint64_t)&STACK[0x1228]);
  if (v80[743] < 0)
    operator delete((void *)STACK[0x1260]);
  sub_1001D5744((uint64_t)&STACK[0x1278]);
  if (v80[823] < 0)
    operator delete((void *)STACK[0x12B0]);
  sub_1001D5744((uint64_t)&STACK[0x12C8]);
  if (v80[903] < 0)
    operator delete((void *)STACK[0x1300]);
  sub_1001D5744((uint64_t)&STACK[0x1318]);
  if (v80[983] < 0)
    operator delete((void *)STACK[0x1350]);
  sub_1001D5744((uint64_t)&STACK[0x1368]);
  if (v80[1063] < 0)
    operator delete((void *)STACK[0x13A0]);
  sub_1001D5744((uint64_t)&STACK[0x13B8]);
  if (v80[1143] < 0)
    operator delete((void *)STACK[0x13F0]);
  sub_1001D5744((uint64_t)&STACK[0x1408]);
  if (v80[1223] < 0)
    operator delete((void *)STACK[0x1440]);
  sub_1001D5744((uint64_t)&STACK[0x1458]);
  if (v80[1303] < 0)
    operator delete((void *)STACK[0x1490]);
  sub_1001D5744((uint64_t)&STACK[0x14A8]);
  if (v80[1383] < 0)
    operator delete((void *)STACK[0x14E0]);
  sub_1001D5744((uint64_t)&STACK[0x14F8]);
  if (v80[1463] < 0)
    operator delete((void *)STACK[0x1530]);
  sub_1001D5744((uint64_t)&STACK[0x1548]);
  if (v80[1543] < 0)
    operator delete((void *)STACK[0x1580]);
  sub_1001D5744((uint64_t)&STACK[0x1598]);
  if (v80[1623] < 0)
    operator delete((void *)STACK[0x15D0]);
  sub_1001D5744((uint64_t)&STACK[0x15E8]);
  if (v80[1703] < 0)
    operator delete((void *)STACK[0x1620]);
  sub_1001D5744((uint64_t)&STACK[0x1638]);
  if (v80[1783] < 0)
    operator delete((void *)STACK[0x1670]);
  sub_1001D5744((uint64_t)&STACK[0x1688]);
  if (v80[1863] < 0)
    operator delete((void *)STACK[0x16C0]);
  sub_1001D5744((uint64_t)&STACK[0x16D8]);
  if (v80[1943] < 0)
    operator delete((void *)STACK[0x1710]);
  sub_1001D5744((uint64_t)&STACK[0x1728]);
  if (v80[2023] < 0)
    operator delete((void *)STACK[0x1760]);
  sub_1001D5744((uint64_t)&STACK[0x1778]);
  if (v80[2103] < 0)
    operator delete((void *)STACK[0x17B0]);
  sub_1001D5744((uint64_t)&STACK[0x17C8]);
  if (v80[2183] < 0)
    operator delete((void *)STACK[0x1800]);
  sub_1001D5744((uint64_t)&STACK[0x1818]);
  if (v80[2263] < 0)
    operator delete((void *)STACK[0x1850]);
  sub_1001D5744((uint64_t)&STACK[0x1868]);
  if (v80[2343] < 0)
    operator delete((void *)STACK[0x18A0]);
  sub_1001D5744((uint64_t)&STACK[0x18B8]);
  if (v80[2423] < 0)
    operator delete((void *)STACK[0x18F0]);
  sub_1001D5744((uint64_t)&STACK[0x1908]);
  if (v80[2503] < 0)
    operator delete((void *)STACK[0x1940]);
  sub_1001D5744((uint64_t)&STACK[0x1958]);
  if (v80[2583] < 0)
    operator delete((void *)STACK[0x1990]);
  sub_1001D5744((uint64_t)&STACK[0x19A8]);
  if (v80[2663] < 0)
    operator delete((void *)STACK[0x19E0]);
  sub_1001D5744((uint64_t)&STACK[0x19F8]);
  if (v80[2743] < 0)
    operator delete((void *)STACK[0x1A30]);
  sub_1001D5744((uint64_t)&STACK[0x1A48]);
  if (v80[2823] < 0)
    operator delete((void *)STACK[0x1A80]);
  sub_1001D5744((uint64_t)&STACK[0x1A98]);
  if (v80[2903] < 0)
    operator delete((void *)STACK[0x1AD0]);
  sub_1001D5744((uint64_t)&STACK[0x1AE8]);
  if (v80[2983] < 0)
    operator delete((void *)STACK[0x1B20]);
  sub_1001D5744((uint64_t)&STACK[0x1B38]);
  if (v80[3063] < 0)
    operator delete((void *)STACK[0x1B70]);
  sub_1001D5744((uint64_t)&STACK[0x1B88]);
  if (v80[3143] < 0)
    operator delete((void *)STACK[0x1BC0]);
  sub_1001D5744((uint64_t)&STACK[0x1BD8]);
  if (v80[3223] < 0)
    operator delete((void *)STACK[0x1C10]);
  sub_1001D5744((uint64_t)&STACK[0x1C28]);
  if (v80[3303] < 0)
    operator delete((void *)STACK[0x1C60]);
  sub_1001D5744((uint64_t)&STACK[0x1C78]);
  if (v80[3383] < 0)
    operator delete((void *)STACK[0x1CB0]);
  sub_1001D5744((uint64_t)&STACK[0x1CC8]);
  if (v80[3463] < 0)
    operator delete((void *)STACK[0x1D00]);
  sub_1001D5744((uint64_t)&STACK[0x1D18]);
  if (v80[3543] < 0)
    operator delete((void *)STACK[0x1D50]);
  sub_1001D5744((uint64_t)&STACK[0x1D68]);
  if (v80[3623] < 0)
    operator delete((void *)STACK[0x1DA0]);
  sub_1001D5744((uint64_t)&STACK[0x1DB8]);
  if (v80[3703] < 0)
    operator delete((void *)STACK[0x1DF0]);
  sub_1001D5744((uint64_t)&STACK[0x1E08]);
  if (v80[3783] < 0)
    operator delete((void *)STACK[0x1E40]);
  sub_1001D5744((uint64_t)&STACK[0x1E58]);
  if (v80[3863] < 0)
    operator delete((void *)STACK[0x1E90]);
  sub_1001D5744((uint64_t)&STACK[0x1EA8]);
  if (v80[3943] < 0)
    operator delete((void *)STACK[0x1EE0]);
  sub_1001D5744((uint64_t)&STACK[0x1EF8]);
  if (v80[4023] < 0)
    operator delete((void *)STACK[0x1F30]);
  sub_1001D5744((uint64_t)&STACK[0x1F48]);
  if (v79[23] < 0)
    operator delete((void *)STACK[0x1F80]);
  sub_1001D5744((uint64_t)&STACK[0x1F98]);
  if (v79[103] < 0)
    operator delete((void *)STACK[0x1FD0]);
  sub_1001D5744((uint64_t)&STACK[0x1FE8]);
  if (v79[183] < 0)
    operator delete((void *)STACK[0x2020]);
  sub_1001D5744((uint64_t)&STACK[0x2038]);
  if (v79[263] < 0)
    operator delete((void *)STACK[0x2070]);
  sub_1001D5744((uint64_t)&STACK[0x2088]);
  if (v79[343] < 0)
    operator delete((void *)STACK[0x20C0]);
  sub_1001D5744((uint64_t)&STACK[0x20D8]);
  if (v79[423] < 0)
    operator delete((void *)STACK[0x2110]);
  sub_1001D5744((uint64_t)&STACK[0x2128]);
  if (v79[503] < 0)
    operator delete((void *)STACK[0x2160]);
  sub_1001D5744((uint64_t)&STACK[0x2178]);
  if (v79[583] < 0)
    operator delete((void *)STACK[0x21B0]);
  sub_1001D5744((uint64_t)&STACK[0x21C8]);
  if (v79[663] < 0)
    operator delete((void *)STACK[0x2200]);
  sub_1001D5744((uint64_t)&STACK[0x2218]);
  if (v79[743] < 0)
    operator delete((void *)STACK[0x2250]);
  sub_1001D5744((uint64_t)&STACK[0x2268]);
  if (v79[823] < 0)
    operator delete((void *)STACK[0x22A0]);
  sub_1001D5744((uint64_t)&STACK[0x22B8]);
  if (v79[903] < 0)
    operator delete((void *)STACK[0x22F0]);
  sub_1001D5744((uint64_t)&STACK[0x2308]);
  if (v79[983] < 0)
    operator delete((void *)STACK[0x2340]);
  sub_1001D5744((uint64_t)&STACK[0x2358]);
  if (v79[1063] < 0)
    operator delete((void *)STACK[0x2390]);
  sub_1001D5744((uint64_t)&STACK[0x23A8]);
  if (v79[1143] < 0)
    operator delete((void *)STACK[0x23E0]);
  sub_1001D5744((uint64_t)&STACK[0x23F8]);
  if (v79[1223] < 0)
    operator delete((void *)STACK[0x2430]);
  sub_1001D5744((uint64_t)&STACK[0x2448]);
  if (v79[1303] < 0)
    operator delete((void *)STACK[0x2480]);
  sub_1001D5744((uint64_t)&STACK[0x2498]);
  if (v79[1383] < 0)
    operator delete((void *)STACK[0x24D0]);
  sub_1001D5744((uint64_t)&STACK[0x24E8]);
  if (v79[1463] < 0)
    operator delete((void *)STACK[0x2520]);
  sub_1001D5744((uint64_t)&STACK[0x2538]);
  if (v79[1543] < 0)
    operator delete((void *)STACK[0x2570]);
  sub_1001D5744((uint64_t)&STACK[0x2588]);
  if (v79[1623] < 0)
    operator delete((void *)STACK[0x25C0]);
  sub_1001D5744((uint64_t)&STACK[0x25D8]);
  if (v79[1703] < 0)
    operator delete((void *)STACK[0x2610]);
  sub_1001D5744((uint64_t)&STACK[0x2628]);
  if (v79[1783] < 0)
    operator delete((void *)STACK[0x2660]);
  sub_1001D5744((uint64_t)&STACK[0x2678]);
  if (v79[1863] < 0)
    operator delete((void *)STACK[0x26B0]);
  sub_1001D5744((uint64_t)&STACK[0x26C8]);
  if (v79[1943] < 0)
    operator delete((void *)STACK[0x2700]);
  sub_1001D5744((uint64_t)&STACK[0x2718]);
  if (v79[2023] < 0)
    operator delete((void *)STACK[0x2750]);
  sub_1001D5744((uint64_t)&STACK[0x2768]);
  if (v79[2103] < 0)
    operator delete((void *)STACK[0x27A0]);
  sub_1001D5744((uint64_t)&STACK[0x27B8]);
  if (v79[2183] < 0)
    operator delete((void *)STACK[0x27F0]);
  sub_1001D5744((uint64_t)&STACK[0x2808]);
  if (v79[2263] < 0)
    operator delete((void *)STACK[0x2840]);
  sub_1001D5744((uint64_t)&STACK[0x2858]);
  if (v79[2343] < 0)
    operator delete((void *)STACK[0x2890]);
  sub_1001D5744((uint64_t)&STACK[0x28A8]);
  if (v79[2423] < 0)
    operator delete((void *)STACK[0x28E0]);
  sub_1001D5744((uint64_t)&STACK[0x28F8]);
  if (v79[2503] < 0)
    operator delete((void *)STACK[0x2930]);
  sub_1001D5744((uint64_t)&STACK[0x2948]);
  if (v79[2583] < 0)
    operator delete((void *)STACK[0x2980]);
  sub_1001D5744((uint64_t)&STACK[0x2998]);
  if (v79[2663] < 0)
    operator delete((void *)STACK[0x29D0]);
  sub_1001D5744((uint64_t)&STACK[0x29E8]);
  if (v79[2743] < 0)
    operator delete((void *)STACK[0x2A20]);
  sub_1001D5744((uint64_t)&STACK[0x2A38]);
  if (v79[2823] < 0)
    operator delete((void *)STACK[0x2A70]);
  sub_1001D5744((uint64_t)&STACK[0x2A88]);
  if (v79[2903] < 0)
    operator delete((void *)STACK[0x2AC0]);
  sub_1001D5744((uint64_t)&STACK[0x2AD8]);
  if (v79[2983] < 0)
    operator delete((void *)STACK[0x2B10]);
  sub_1001D5744((uint64_t)&STACK[0x2B28]);
  if (v79[3063] < 0)
    operator delete((void *)STACK[0x2B60]);
  sub_1001D5744((uint64_t)&STACK[0x2B78]);
  if (v79[3143] < 0)
    operator delete((void *)STACK[0x2BB0]);
  sub_1001D5744((uint64_t)&STACK[0x2BC8]);
  if (v79[3223] < 0)
    operator delete((void *)STACK[0x2C00]);
  sub_1001D5744((uint64_t)&STACK[0x2C18]);
  if (v79[3303] < 0)
    operator delete((void *)STACK[0x2C50]);
  sub_1001D5744((uint64_t)&STACK[0x2C68]);
  if (v79[3383] < 0)
    operator delete((void *)STACK[0x2CA0]);
  sub_1001D5744((uint64_t)&STACK[0x2CB8]);
  if (v79[3463] < 0)
    operator delete((void *)STACK[0x2CF0]);
  sub_1001D5744((uint64_t)&STACK[0x2D08]);
  if (v79[3543] < 0)
    operator delete((void *)STACK[0x2D40]);
  sub_1001D5744((uint64_t)&STACK[0x2D58]);
  if (v79[3623] < 0)
    operator delete((void *)STACK[0x2D90]);
  sub_1001D5744((uint64_t)&STACK[0x2DA8]);
  if (v79[3703] < 0)
    operator delete((void *)STACK[0x2DE0]);
  sub_1001D5744((uint64_t)&STACK[0x2DF8]);
  if (v79[3783] < 0)
    operator delete((void *)STACK[0x2E30]);
  sub_1001D5744((uint64_t)&STACK[0x2E48]);
  if (v79[3863] < 0)
    operator delete((void *)STACK[0x2E80]);
  sub_1001D5744((uint64_t)&STACK[0x2E98]);
  if (v79[3943] < 0)
    operator delete((void *)STACK[0x2ED0]);
  sub_1001D5744((uint64_t)&STACK[0x2EE8]);
  if (v79[4023] < 0)
    operator delete((void *)STACK[0x2F20]);
  sub_1001D5744((uint64_t)&STACK[0x2F38]);
  if (v78[23] < 0)
    operator delete((void *)STACK[0x2F70]);
  sub_1001D5744((uint64_t)&STACK[0x2F88]);
  if (v78[103] < 0)
    operator delete((void *)STACK[0x2FC0]);
  sub_1001D5744((uint64_t)&STACK[0x2FD8]);
  if (v78[183] < 0)
    operator delete((void *)STACK[0x3010]);
  sub_1001D5744((uint64_t)&STACK[0x3028]);
  if (v78[263] < 0)
    operator delete((void *)STACK[0x3060]);
  sub_1001D5744((uint64_t)&STACK[0x3078]);
  if (v78[343] < 0)
    operator delete((void *)STACK[0x30B0]);
  sub_1001D5744((uint64_t)&STACK[0x30C8]);
  if (v78[423] < 0)
    operator delete((void *)STACK[0x3100]);
  sub_1001D5744((uint64_t)&STACK[0x3118]);
  if (v78[503] < 0)
    operator delete((void *)STACK[0x3150]);
  sub_1001D5744((uint64_t)&STACK[0x3168]);
  if (v78[583] < 0)
    operator delete((void *)STACK[0x31A0]);
  sub_1001D5744((uint64_t)&STACK[0x31B8]);
  if (v78[663] < 0)
    operator delete((void *)STACK[0x31F0]);
  sub_1001D5744((uint64_t)&STACK[0x3208]);
  if (v78[743] < 0)
    operator delete((void *)STACK[0x3240]);
  sub_1001D5744((uint64_t)&STACK[0x3258]);
  if (v78[823] < 0)
    operator delete((void *)STACK[0x3290]);
  sub_1001D5744((uint64_t)&STACK[0x32A8]);
  if (v78[903] < 0)
    operator delete((void *)STACK[0x32E0]);
  sub_1001D5744((uint64_t)&STACK[0x32F8]);
  if (v78[983] < 0)
    operator delete((void *)STACK[0x3330]);
  sub_1001D5744((uint64_t)&STACK[0x3348]);
  if (v78[1063] < 0)
    operator delete((void *)STACK[0x3380]);
  sub_1001D5744((uint64_t)&STACK[0x3398]);
  if (v78[1143] < 0)
    operator delete((void *)STACK[0x33D0]);
  sub_1001D5744((uint64_t)&STACK[0x33E8]);
  if (v78[1223] < 0)
    operator delete((void *)STACK[0x3420]);
  sub_1001D5744((uint64_t)&STACK[0x3438]);
  if (v78[1303] < 0)
    operator delete((void *)STACK[0x3470]);
  sub_1001D5744((uint64_t)&STACK[0x3488]);
  if (v78[1383] < 0)
    operator delete((void *)STACK[0x34C0]);
  sub_1001D5744((uint64_t)&STACK[0x34D8]);
  if (v78[1463] < 0)
    operator delete((void *)STACK[0x3510]);
  sub_1001D5744((uint64_t)&STACK[0x3528]);
  if (v78[1543] < 0)
    operator delete((void *)STACK[0x3560]);
  sub_1001D5744((uint64_t)&STACK[0x3578]);
  if (v78[1623] < 0)
    operator delete((void *)STACK[0x35B0]);
  sub_1001D5744((uint64_t)&STACK[0x35C8]);
  if (v78[1703] < 0)
    operator delete((void *)STACK[0x3600]);
  sub_1001D5744((uint64_t)&STACK[0x3618]);
  if (v78[1783] < 0)
    operator delete((void *)STACK[0x3650]);
  sub_1001D5744((uint64_t)&STACK[0x3668]);
  if (v78[1863] < 0)
    operator delete((void *)STACK[0x36A0]);
  sub_1001D5744((uint64_t)&STACK[0x36B8]);
  if (v78[1943] < 0)
    operator delete((void *)STACK[0x36F0]);
  sub_1001D5744((uint64_t)&STACK[0x3708]);
  if (v78[2023] < 0)
    operator delete((void *)STACK[0x3740]);
  sub_1001D5744((uint64_t)&STACK[0x3758]);
  if (v78[2103] < 0)
    operator delete((void *)STACK[0x3790]);
  sub_1001D5744((uint64_t)&STACK[0x37A8]);
  if (v78[2183] < 0)
    operator delete((void *)STACK[0x37E0]);
  sub_1001D5744((uint64_t)&STACK[0x37F8]);
  if (v78[2263] < 0)
    operator delete((void *)STACK[0x3830]);
  sub_1001D5744((uint64_t)&STACK[0x3848]);
  if (v78[2343] < 0)
    operator delete((void *)STACK[0x3880]);
  sub_1001D5744((uint64_t)&STACK[0x3898]);
  if (v78[2423] < 0)
    operator delete((void *)STACK[0x38D0]);
  sub_1001D5744((uint64_t)&STACK[0x38E8]);
  if (v78[2503] < 0)
    operator delete((void *)STACK[0x3920]);
  sub_1001D5744((uint64_t)&STACK[0x3938]);
  if (v78[2583] < 0)
    operator delete((void *)STACK[0x3970]);
  sub_1001D5744((uint64_t)&STACK[0x3988]);
  if (v78[2663] < 0)
    operator delete((void *)STACK[0x39C0]);
  sub_1001D5744((uint64_t)&STACK[0x39D8]);
  if (v78[2743] < 0)
    operator delete((void *)STACK[0x3A10]);
  sub_1001D5744((uint64_t)&STACK[0x3A28]);
  if (v78[2823] < 0)
    operator delete((void *)STACK[0x3A60]);
  sub_1001D5744((uint64_t)&STACK[0x3A78]);
  if (v78[2903] < 0)
    operator delete((void *)STACK[0x3AB0]);
  sub_1001D5744((uint64_t)&STACK[0x3AC8]);
  if (v78[2983] < 0)
    operator delete((void *)STACK[0x3B00]);
  sub_1001D5744((uint64_t)&STACK[0x3B18]);
  if (v78[3063] < 0)
    operator delete((void *)STACK[0x3B50]);
  sub_1001D5744((uint64_t)&STACK[0x3B68]);
  if (v78[3143] < 0)
    operator delete((void *)STACK[0x3BA0]);
  sub_1001D5744((uint64_t)&STACK[0x3BB8]);
  if (v78[3223] < 0)
    operator delete((void *)STACK[0x3BF0]);
  sub_1001D5744((uint64_t)&STACK[0x3C08]);
  if (v78[3303] < 0)
    operator delete((void *)STACK[0x3C40]);
  sub_1001D5744((uint64_t)&STACK[0x3C58]);
  if (v78[3383] < 0)
    operator delete((void *)STACK[0x3C90]);
  sub_1001D5744((uint64_t)&STACK[0x3CA8]);
  if (v78[3463] < 0)
    operator delete((void *)STACK[0x3CE0]);
  sub_1001D5744((uint64_t)&STACK[0x3CF8]);
  if (v78[3543] < 0)
    operator delete((void *)STACK[0x3D30]);
  sub_1001D5744((uint64_t)&STACK[0x3D48]);
  if (v78[3623] < 0)
    operator delete((void *)STACK[0x3D80]);
  sub_1001D5744((uint64_t)&STACK[0x3D98]);
  if (v78[3703] < 0)
    operator delete((void *)STACK[0x3DD0]);
  sub_1001D5744((uint64_t)&STACK[0x3DE8]);
  if (v78[3783] < 0)
    operator delete((void *)STACK[0x3E20]);
  sub_1001D5744((uint64_t)&STACK[0x3E38]);
  if (v78[3863] < 0)
    operator delete((void *)STACK[0x3E70]);
  sub_1001D5744((uint64_t)&STACK[0x3E88]);
  if (v78[3943] < 0)
    operator delete((void *)STACK[0x3EC0]);
  sub_1001D5744((uint64_t)&STACK[0x3ED8]);
  if (v78[4023] < 0)
    operator delete((void *)STACK[0x3F10]);
  sub_1001D5744((uint64_t)&STACK[0x3F28]);
  if (v77[23] < 0)
    operator delete((void *)STACK[0x3F60]);
  sub_1001D5744((uint64_t)&STACK[0x3F78]);
  if (v77[103] < 0)
    operator delete((void *)STACK[0x3FB0]);
  sub_1001D5744((uint64_t)&STACK[0x3FC8]);
  if (v77[183] < 0)
    operator delete((void *)STACK[0x4000]);
  sub_1001D5744((uint64_t)&STACK[0x4018]);
  if (v77[263] < 0)
    operator delete((void *)STACK[0x4050]);
  sub_1001D5744((uint64_t)&STACK[0x4068]);
  if (v77[343] < 0)
    operator delete((void *)STACK[0x40A0]);
  sub_1001D5744((uint64_t)&STACK[0x40B8]);
  if (v77[423] < 0)
    operator delete((void *)STACK[0x40F0]);
  sub_1001D5744((uint64_t)&STACK[0x4108]);
  if (v77[503] < 0)
    operator delete((void *)STACK[0x4140]);
  sub_1001D5744((uint64_t)&STACK[0x4158]);
  if (v77[583] < 0)
    operator delete((void *)STACK[0x4190]);
  sub_1001D5744((uint64_t)&STACK[0x41A8]);
  if (v77[663] < 0)
    operator delete((void *)STACK[0x41E0]);
  sub_1001D5744((uint64_t)&STACK[0x41F8]);
  if (v77[743] < 0)
    operator delete((void *)STACK[0x4230]);
  sub_1001D5744((uint64_t)&STACK[0x4248]);
  if (v77[823] < 0)
    operator delete((void *)STACK[0x4280]);
  sub_1001D5744((uint64_t)&STACK[0x4298]);
  if (v77[903] < 0)
    operator delete((void *)STACK[0x42D0]);
  sub_1001D5744((uint64_t)&STACK[0x42E8]);
  if (v77[983] < 0)
    operator delete((void *)STACK[0x4320]);
  sub_1001D5744((uint64_t)&STACK[0x4338]);
  if (v77[1063] < 0)
    operator delete((void *)STACK[0x4370]);
  sub_1001D5744((uint64_t)&STACK[0x4388]);
  if (v77[1143] < 0)
    operator delete((void *)STACK[0x43C0]);
  sub_1001D5744((uint64_t)&STACK[0x43D8]);
  if (v77[1223] < 0)
    operator delete((void *)STACK[0x4410]);
  sub_1001D5744((uint64_t)&STACK[0x4428]);
  if (v77[1303] < 0)
    operator delete((void *)STACK[0x4460]);
  sub_1001D5744((uint64_t)&STACK[0x4478]);
  if (v77[1383] < 0)
    operator delete((void *)STACK[0x44B0]);
  sub_1001D5744((uint64_t)&STACK[0x44C8]);
  if (v77[1463] < 0)
    operator delete((void *)STACK[0x4500]);
  sub_1001D5744((uint64_t)&STACK[0x4518]);
  if (v77[1543] < 0)
    operator delete((void *)STACK[0x4550]);
  sub_1001D5744((uint64_t)&STACK[0x4568]);
  if (v77[1623] < 0)
    operator delete((void *)STACK[0x45A0]);
  sub_1001D5744((uint64_t)&STACK[0x45B8]);
  if (v77[1703] < 0)
    operator delete((void *)STACK[0x45F0]);
  sub_1001D5744((uint64_t)&STACK[0x4608]);
  if (v77[1783] < 0)
    operator delete((void *)STACK[0x4640]);
  sub_1001D5744((uint64_t)&STACK[0x4658]);
  if (v77[1863] < 0)
    operator delete((void *)STACK[0x4690]);
  sub_1001D5744((uint64_t)&STACK[0x46A8]);
  if (v77[1943] < 0)
    operator delete((void *)STACK[0x46E0]);
  sub_1001D5744((uint64_t)&STACK[0x46F8]);
  if (v77[2023] < 0)
    operator delete((void *)STACK[0x4730]);
  sub_1001D5744((uint64_t)&STACK[0x4748]);
  if (v77[2103] < 0)
    operator delete((void *)STACK[0x4780]);
  sub_1001D5744((uint64_t)&STACK[0x4798]);
  if (v77[2183] < 0)
    operator delete((void *)STACK[0x47D0]);
  sub_1001D5744((uint64_t)&STACK[0x47E8]);
  if (v77[2263] < 0)
    operator delete((void *)STACK[0x4820]);
  sub_1001D5744((uint64_t)&STACK[0x4838]);
  if (v77[2343] < 0)
    operator delete((void *)STACK[0x4870]);
  sub_1001D5744((uint64_t)&STACK[0x4888]);
  if (v77[2423] < 0)
    operator delete((void *)STACK[0x48C0]);
  sub_1001D5744((uint64_t)&STACK[0x48D8]);
  if (v77[2503] < 0)
    operator delete((void *)STACK[0x4910]);
  sub_1001D5744((uint64_t)&STACK[0x4928]);
  if (v77[2583] < 0)
    operator delete((void *)STACK[0x4960]);
  sub_1001D5744((uint64_t)&STACK[0x4978]);
  if (v77[2663] < 0)
    operator delete((void *)STACK[0x49B0]);
  sub_1001D5744((uint64_t)&STACK[0x49C8]);
  if (v77[2743] < 0)
    operator delete((void *)STACK[0x4A00]);
  sub_1001D5744((uint64_t)&STACK[0x4A18]);
  if (v77[2823] < 0)
    operator delete((void *)STACK[0x4A50]);
  sub_1001D5744((uint64_t)&STACK[0x4A68]);
  if (v77[2903] < 0)
    operator delete((void *)STACK[0x4AA0]);
  sub_1001D5744((uint64_t)&STACK[0x4AB8]);
  if (v77[2983] < 0)
    operator delete((void *)STACK[0x4AF0]);
  sub_1001D5744((uint64_t)&STACK[0x4B08]);
  if (v77[3063] < 0)
    operator delete((void *)STACK[0x4B40]);
  sub_1001D5744((uint64_t)&STACK[0x4B58]);
  if (v77[3143] < 0)
    operator delete((void *)STACK[0x4B90]);
  sub_1001D5744((uint64_t)&STACK[0x4BA8]);
  if (v77[3223] < 0)
    operator delete((void *)STACK[0x4BE0]);
  sub_1001D5744((uint64_t)&STACK[0x4BF8]);
  if (v77[3303] < 0)
    operator delete((void *)STACK[0x4C30]);
  sub_1001D5744((uint64_t)&STACK[0x4C48]);
  if (v77[3383] < 0)
    operator delete((void *)STACK[0x4C80]);
  sub_1001D5744((uint64_t)&STACK[0x4C98]);
  if (v77[3463] < 0)
    operator delete((void *)STACK[0x4CD0]);
  sub_1001D5744((uint64_t)&STACK[0x4CE8]);
  if (v77[3543] < 0)
    operator delete((void *)STACK[0x4D20]);
  sub_1001D5744((uint64_t)&STACK[0x4D38]);
  if (v77[3623] < 0)
    operator delete((void *)STACK[0x4D70]);
  sub_1001D5744((uint64_t)&STACK[0x4D88]);
  if (v77[3703] < 0)
    operator delete((void *)STACK[0x4DC0]);
  sub_1001D5744((uint64_t)&STACK[0x4DD8]);
  if (v77[3783] < 0)
    operator delete((void *)STACK[0x4E10]);
  sub_1001D5744((uint64_t)&STACK[0x4E28]);
  if (v77[3863] < 0)
    operator delete((void *)STACK[0x4E60]);
  sub_1001D5744((uint64_t)&STACK[0x4E78]);
  if (v77[3943] < 0)
    operator delete((void *)STACK[0x4EB0]);
  sub_1001D5744((uint64_t)&STACK[0x4EC8]);
  if (v77[4023] < 0)
    operator delete((void *)STACK[0x4F00]);
  sub_1001D5744((uint64_t)&STACK[0x4F18]);
  if (v76[23] < 0)
    operator delete((void *)STACK[0x4F50]);
  sub_1001D5744((uint64_t)&STACK[0x4F68]);
  if (v76[103] < 0)
    operator delete((void *)STACK[0x4FA0]);
  sub_1001D5744((uint64_t)&STACK[0x4FB8]);
  if (v76[183] < 0)
    operator delete((void *)STACK[0x4FF0]);
  sub_1001D5744((uint64_t)&STACK[0x5008]);
  if (v76[263] < 0)
    operator delete((void *)STACK[0x5040]);
  _Unwind_Resume(a1);
}

void sub_1003897A8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *__p,uint64_t a51,int a52,__int16 a53,char a54,char a55)
{
  if (a55 < 0)
    operator delete(__p);
  JUMPOUT(0x100387C90);
}

void sub_1003897CC()
{
  JUMPOUT(0x100387CA0);
}

void sub_1003897DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,void *__p,uint64_t a61,int a62,__int16 a63)
{
  char a65;

  if (a65 < 0)
    operator delete(__p);
  JUMPOUT(0x100387CA8);
}

void sub_100389800()
{
  JUMPOUT(0x100387CB8);
}

void sub_100389810(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *__p;
  char a73;

  if (a73 < 0)
    operator delete(__p);
  JUMPOUT(0x100387CC0);
}

void sub_100389834()
{
  JUMPOUT(0x100387CD0);
}

void sub_100389844()
{
  if (SLOBYTE(STACK[0x24F]) < 0)
    operator delete((void *)STACK[0x238]);
  JUMPOUT(0x100387CD8);
}

void sub_100389868()
{
  JUMPOUT(0x100387CE8);
}

void sub_100389878()
{
  if (SLOBYTE(STACK[0x29F]) < 0)
    operator delete((void *)STACK[0x288]);
  JUMPOUT(0x100387CF0);
}

void sub_10038989C()
{
  JUMPOUT(0x100387D00);
}

void sub_1003898AC()
{
  if (SLOBYTE(STACK[0x2EF]) < 0)
    operator delete((void *)STACK[0x2D8]);
  JUMPOUT(0x100387D08);
}

void sub_1003898D0()
{
  JUMPOUT(0x100387D18);
}

void sub_1003898E0()
{
  if (SLOBYTE(STACK[0x33F]) < 0)
    operator delete((void *)STACK[0x328]);
  JUMPOUT(0x100387D20);
}

void sub_100389904()
{
  JUMPOUT(0x100387D30);
}

void sub_100389914()
{
  if (SLOBYTE(STACK[0x38F]) < 0)
    operator delete((void *)STACK[0x378]);
  JUMPOUT(0x100387D38);
}

void sub_100389938()
{
  JUMPOUT(0x100387D48);
}

void sub_100389948()
{
  if (SLOBYTE(STACK[0x3DF]) < 0)
    operator delete((void *)STACK[0x3C8]);
  JUMPOUT(0x100387D50);
}

void sub_10038996C()
{
  JUMPOUT(0x100387D60);
}

void sub_10038997C()
{
  if (SLOBYTE(STACK[0x42F]) < 0)
    operator delete((void *)STACK[0x418]);
  JUMPOUT(0x100387D68);
}

void sub_1003899A0()
{
  JUMPOUT(0x100387D78);
}

void sub_1003899B0()
{
  if (SLOBYTE(STACK[0x47F]) < 0)
    operator delete((void *)STACK[0x468]);
  JUMPOUT(0x100387D80);
}

void sub_1003899D4()
{
  JUMPOUT(0x100387D90);
}

void sub_1003899E4()
{
  if (SLOBYTE(STACK[0x4CF]) < 0)
    operator delete((void *)STACK[0x4B8]);
  JUMPOUT(0x100387D98);
}

void sub_100389A08()
{
  JUMPOUT(0x100387DA8);
}

void sub_100389A18()
{
  if (SLOBYTE(STACK[0x51F]) < 0)
    operator delete((void *)STACK[0x508]);
  JUMPOUT(0x100387DB0);
}

void sub_100389A3C()
{
  JUMPOUT(0x100387DC0);
}

void sub_100389A4C()
{
  if (SLOBYTE(STACK[0x56F]) < 0)
    operator delete((void *)STACK[0x558]);
  JUMPOUT(0x100387DC8);
}

void sub_100389A70()
{
  JUMPOUT(0x100387DD8);
}

void sub_100389A80()
{
  if (SLOBYTE(STACK[0x5BF]) < 0)
    operator delete((void *)STACK[0x5A8]);
  JUMPOUT(0x100387DE0);
}

void sub_100389AA4()
{
  JUMPOUT(0x100387DF0);
}

void sub_100389AB4()
{
  if (SLOBYTE(STACK[0x60F]) < 0)
    operator delete((void *)STACK[0x5F8]);
  JUMPOUT(0x100387DF8);
}

void sub_100389AD8()
{
  JUMPOUT(0x100387E08);
}

void sub_100389AE8()
{
  if (SLOBYTE(STACK[0x65F]) < 0)
    operator delete((void *)STACK[0x648]);
  JUMPOUT(0x100387E10);
}

void sub_100389B0C()
{
  JUMPOUT(0x100387E20);
}

void sub_100389B1C()
{
  if (SLOBYTE(STACK[0x6AF]) < 0)
    operator delete((void *)STACK[0x698]);
  JUMPOUT(0x100387E28);
}

void sub_100389B40()
{
  JUMPOUT(0x100387E38);
}

void sub_100389B50()
{
  if (SLOBYTE(STACK[0x6FF]) < 0)
    operator delete((void *)STACK[0x6E8]);
  JUMPOUT(0x100387E40);
}

void sub_100389B74()
{
  JUMPOUT(0x100387E50);
}

void sub_100389B84()
{
  if (SLOBYTE(STACK[0x74F]) < 0)
    operator delete((void *)STACK[0x738]);
  JUMPOUT(0x100387E58);
}

void sub_100389BA8()
{
  JUMPOUT(0x100387E68);
}

void sub_100389BB8()
{
  if (SLOBYTE(STACK[0x79F]) < 0)
    operator delete((void *)STACK[0x788]);
  JUMPOUT(0x100387E70);
}

void sub_100389BDC()
{
  JUMPOUT(0x100387E80);
}

void sub_100389BEC()
{
  if (SLOBYTE(STACK[0x7EF]) < 0)
    operator delete((void *)STACK[0x7D8]);
  JUMPOUT(0x100387E88);
}

void sub_100389C10()
{
  JUMPOUT(0x100387E98);
}

void sub_100389C20()
{
  if (SLOBYTE(STACK[0x83F]) < 0)
    operator delete((void *)STACK[0x828]);
  JUMPOUT(0x100387EA0);
}

void sub_100389C44()
{
  JUMPOUT(0x100387EB0);
}

void sub_100389C54()
{
  if (SLOBYTE(STACK[0x88F]) < 0)
    operator delete((void *)STACK[0x878]);
  JUMPOUT(0x100387EB8);
}

void sub_100389C78()
{
  JUMPOUT(0x100387EC8);
}

void sub_100389C88()
{
  if (SLOBYTE(STACK[0x8DF]) < 0)
    operator delete((void *)STACK[0x8C8]);
  JUMPOUT(0x100387ED0);
}

void sub_100389CAC()
{
  JUMPOUT(0x100387EE0);
}

void sub_100389CBC()
{
  if (SLOBYTE(STACK[0x92F]) < 0)
    operator delete((void *)STACK[0x918]);
  JUMPOUT(0x100387EE8);
}

void sub_100389CE0()
{
  JUMPOUT(0x100387EF8);
}

void sub_100389CF0()
{
  if (SLOBYTE(STACK[0x97F]) < 0)
    operator delete((void *)STACK[0x968]);
  JUMPOUT(0x100387F00);
}

void sub_100389D14()
{
  JUMPOUT(0x100387F10);
}

void sub_100389D24()
{
  if (SLOBYTE(STACK[0x9CF]) < 0)
    operator delete((void *)STACK[0x9B8]);
  JUMPOUT(0x100387F18);
}

void sub_100389D48()
{
  JUMPOUT(0x100387F28);
}

void sub_100389D58()
{
  if (SLOBYTE(STACK[0xA1F]) < 0)
    operator delete((void *)STACK[0xA08]);
  JUMPOUT(0x100387F30);
}

void sub_100389D7C()
{
  JUMPOUT(0x100387F40);
}

void sub_100389D8C()
{
  if (SLOBYTE(STACK[0xA6F]) < 0)
    operator delete((void *)STACK[0xA58]);
  JUMPOUT(0x100387F48);
}

void sub_100389DB0()
{
  JUMPOUT(0x100387F58);
}

void sub_100389DC0()
{
  if (SLOBYTE(STACK[0xABF]) < 0)
    operator delete((void *)STACK[0xAA8]);
  JUMPOUT(0x100387F60);
}

void sub_100389DE4()
{
  JUMPOUT(0x100387F70);
}

void sub_100389DF4()
{
  if (SLOBYTE(STACK[0xB0F]) < 0)
    operator delete((void *)STACK[0xAF8]);
  JUMPOUT(0x100387F78);
}

void sub_100389E18()
{
  JUMPOUT(0x100387F88);
}

void sub_100389E28()
{
  if (SLOBYTE(STACK[0xB5F]) < 0)
    operator delete((void *)STACK[0xB48]);
  JUMPOUT(0x100387F90);
}

void sub_100389E4C()
{
  JUMPOUT(0x100387FA0);
}

void sub_100389E5C()
{
  if (SLOBYTE(STACK[0xBAF]) < 0)
    operator delete((void *)STACK[0xB98]);
  JUMPOUT(0x100387FA8);
}

void sub_100389E80()
{
  JUMPOUT(0x100387FB8);
}

void sub_100389E90()
{
  if (SLOBYTE(STACK[0xBFF]) < 0)
    operator delete((void *)STACK[0xBE8]);
  JUMPOUT(0x100387FC0);
}

void sub_100389EB4()
{
  JUMPOUT(0x100387FD0);
}

void sub_100389EC4()
{
  if (SLOBYTE(STACK[0xC4F]) < 0)
    operator delete((void *)STACK[0xC38]);
  JUMPOUT(0x100387FD8);
}

void sub_100389EE8()
{
  JUMPOUT(0x100387FE8);
}

void sub_100389EF8()
{
  if (SLOBYTE(STACK[0xC9F]) < 0)
    operator delete((void *)STACK[0xC88]);
  JUMPOUT(0x100387FF0);
}

void sub_100389F1C()
{
  JUMPOUT(0x100388000);
}

void sub_100389F2C()
{
  if (SLOBYTE(STACK[0xCEF]) < 0)
    operator delete((void *)STACK[0xCD8]);
  JUMPOUT(0x100388008);
}

void sub_100389F50()
{
  JUMPOUT(0x100388018);
}

void sub_100389F60()
{
  if (SLOBYTE(STACK[0xD3F]) < 0)
    operator delete((void *)STACK[0xD28]);
  JUMPOUT(0x100388020);
}

void sub_100389F84()
{
  JUMPOUT(0x100388030);
}

void sub_100389F94()
{
  if (SLOBYTE(STACK[0xD8F]) < 0)
    operator delete((void *)STACK[0xD78]);
  JUMPOUT(0x100388038);
}

void sub_100389FB8()
{
  JUMPOUT(0x100388048);
}

void sub_100389FC8()
{
  if (SLOBYTE(STACK[0xDDF]) < 0)
    operator delete((void *)STACK[0xDC8]);
  JUMPOUT(0x100388050);
}

void sub_100389FEC()
{
  JUMPOUT(0x100388060);
}

void sub_100389FFC()
{
  if (SLOBYTE(STACK[0xE2F]) < 0)
    operator delete((void *)STACK[0xE18]);
  JUMPOUT(0x100388068);
}

void sub_10038A020()
{
  JUMPOUT(0x100388078);
}

void sub_10038A030()
{
  if (SLOBYTE(STACK[0xE7F]) < 0)
    operator delete((void *)STACK[0xE68]);
  JUMPOUT(0x100388080);
}

void sub_10038A054()
{
  JUMPOUT(0x100388090);
}

void sub_10038A064()
{
  if (SLOBYTE(STACK[0xECF]) < 0)
    operator delete((void *)STACK[0xEB8]);
  JUMPOUT(0x100388098);
}

void sub_10038A088()
{
  JUMPOUT(0x1003880A8);
}

void sub_10038A098()
{
  if (SLOBYTE(STACK[0xF1F]) < 0)
    operator delete((void *)STACK[0xF08]);
  JUMPOUT(0x1003880B0);
}

void sub_10038A0BC()
{
  JUMPOUT(0x1003880C0);
}

void sub_10038A0CC()
{
  if (SLOBYTE(STACK[0xF6F]) < 0)
    operator delete((void *)STACK[0xF58]);
  JUMPOUT(0x1003880C8);
}

void sub_10038A0F0()
{
  JUMPOUT(0x1003880D8);
}

void sub_10038A100()
{
  uint64_t v0;

  if (*(char *)(v0 + 47) < 0)
    operator delete((void *)STACK[0xFA8]);
  JUMPOUT(0x1003880E0);
}

void sub_10038A124()
{
  JUMPOUT(0x1003880F0);
}

void sub_10038A134()
{
  uint64_t v0;

  if (*(char *)(v0 + 127) < 0)
    operator delete((void *)STACK[0xFF8]);
  JUMPOUT(0x1003880F8);
}

void sub_10038A158()
{
  JUMPOUT(0x100388108);
}

void sub_10038A168()
{
  uint64_t v0;

  if (*(char *)(v0 + 207) < 0)
    operator delete((void *)STACK[0x1048]);
  JUMPOUT(0x100388114);
}

void sub_10038A18C()
{
  JUMPOUT(0x100388124);
}

void sub_10038A19C()
{
  uint64_t v0;

  if (*(char *)(v0 + 287) < 0)
    operator delete((void *)STACK[0x1098]);
  JUMPOUT(0x100388130);
}

void sub_10038A1C0()
{
  JUMPOUT(0x100388140);
}

void sub_10038A1D0()
{
  uint64_t v0;

  if (*(char *)(v0 + 367) < 0)
    operator delete((void *)STACK[0x10E8]);
  JUMPOUT(0x10038814CLL);
}

void sub_10038A1F4()
{
  JUMPOUT(0x10038815CLL);
}

void sub_10038A204()
{
  uint64_t v0;

  if (*(char *)(v0 + 447) < 0)
    operator delete((void *)STACK[0x1138]);
  JUMPOUT(0x100388168);
}

void sub_10038A228()
{
  JUMPOUT(0x100388178);
}

void sub_10038A238()
{
  uint64_t v0;

  if (*(char *)(v0 + 527) < 0)
    operator delete((void *)STACK[0x1188]);
  JUMPOUT(0x100388184);
}

void sub_10038A25C()
{
  JUMPOUT(0x100388194);
}

void sub_10038A26C()
{
  uint64_t v0;

  if (*(char *)(v0 + 607) < 0)
    operator delete((void *)STACK[0x11D8]);
  JUMPOUT(0x1003881A0);
}

void sub_10038A290()
{
  JUMPOUT(0x1003881B0);
}

void sub_10038A2A0()
{
  uint64_t v0;

  if (*(char *)(v0 + 687) < 0)
    operator delete((void *)STACK[0x1228]);
  JUMPOUT(0x1003881BCLL);
}

void sub_10038A2C4()
{
  JUMPOUT(0x1003881CCLL);
}

void sub_10038A2D4()
{
  uint64_t v0;

  if (*(char *)(v0 + 767) < 0)
    operator delete((void *)STACK[0x1278]);
  JUMPOUT(0x1003881D8);
}

void sub_10038A2F8()
{
  JUMPOUT(0x1003881E8);
}

void sub_10038A308()
{
  uint64_t v0;

  if (*(char *)(v0 + 847) < 0)
    operator delete((void *)STACK[0x12C8]);
  JUMPOUT(0x1003881F4);
}

void sub_10038A32C()
{
  JUMPOUT(0x100388204);
}

void sub_10038A33C()
{
  uint64_t v0;

  if (*(char *)(v0 + 927) < 0)
    operator delete((void *)STACK[0x1318]);
  JUMPOUT(0x100388210);
}

void sub_10038A360()
{
  JUMPOUT(0x100388220);
}

void sub_10038A370()
{
  uint64_t v0;

  if (*(char *)(v0 + 1007) < 0)
    operator delete((void *)STACK[0x1368]);
  JUMPOUT(0x10038822CLL);
}

void sub_10038A394()
{
  JUMPOUT(0x10038823CLL);
}

void sub_10038A3A4()
{
  uint64_t v0;

  if (*(char *)(v0 + 1087) < 0)
    operator delete((void *)STACK[0x13B8]);
  JUMPOUT(0x100388248);
}

void sub_10038A3C8()
{
  JUMPOUT(0x100388258);
}

void sub_10038A3D8()
{
  uint64_t v0;

  if (*(char *)(v0 + 1167) < 0)
    operator delete((void *)STACK[0x1408]);
  JUMPOUT(0x100388264);
}

void sub_10038A3FC()
{
  JUMPOUT(0x100388274);
}

void sub_10038A40C()
{
  uint64_t v0;

  if (*(char *)(v0 + 1247) < 0)
    operator delete((void *)STACK[0x1458]);
  JUMPOUT(0x100388280);
}

void sub_10038A430()
{
  JUMPOUT(0x100388290);
}

void sub_10038A440()
{
  uint64_t v0;

  if (*(char *)(v0 + 1327) < 0)
    operator delete((void *)STACK[0x14A8]);
  JUMPOUT(0x10038829CLL);
}

void sub_10038A464()
{
  JUMPOUT(0x1003882ACLL);
}

void sub_10038A474()
{
  uint64_t v0;

  if (*(char *)(v0 + 1407) < 0)
    operator delete((void *)STACK[0x14F8]);
  JUMPOUT(0x1003882B8);
}

void sub_10038A498()
{
  JUMPOUT(0x1003882C8);
}

void sub_10038A4A8()
{
  uint64_t v0;

  if (*(char *)(v0 + 1487) < 0)
    operator delete((void *)STACK[0x1548]);
  JUMPOUT(0x1003882D4);
}

void sub_10038A4CC()
{
  JUMPOUT(0x1003882E4);
}

void sub_10038A4DC()
{
  uint64_t v0;

  if (*(char *)(v0 + 1567) < 0)
    operator delete((void *)STACK[0x1598]);
  JUMPOUT(0x1003882F0);
}

void sub_10038A500()
{
  JUMPOUT(0x100388300);
}

void sub_10038A510()
{
  uint64_t v0;

  if (*(char *)(v0 + 1647) < 0)
    operator delete((void *)STACK[0x15E8]);
  JUMPOUT(0x10038830CLL);
}

void sub_10038A534()
{
  JUMPOUT(0x10038831CLL);
}

void sub_10038A544()
{
  uint64_t v0;

  if (*(char *)(v0 + 1727) < 0)
    operator delete((void *)STACK[0x1638]);
  JUMPOUT(0x100388328);
}

void sub_10038A568()
{
  JUMPOUT(0x100388338);
}

void sub_10038A578()
{
  uint64_t v0;

  if (*(char *)(v0 + 1807) < 0)
    operator delete((void *)STACK[0x1688]);
  JUMPOUT(0x100388344);
}

void sub_10038A59C()
{
  JUMPOUT(0x100388354);
}

void sub_10038A5AC()
{
  uint64_t v0;

  if (*(char *)(v0 + 1887) < 0)
    operator delete((void *)STACK[0x16D8]);
  JUMPOUT(0x100388360);
}

void sub_10038A5D0()
{
  JUMPOUT(0x100388370);
}

void sub_10038A5E0()
{
  uint64_t v0;

  if (*(char *)(v0 + 1967) < 0)
    operator delete((void *)STACK[0x1728]);
  JUMPOUT(0x10038837CLL);
}

void sub_10038A604()
{
  JUMPOUT(0x10038838CLL);
}

void sub_10038A614()
{
  uint64_t v0;

  if (*(char *)(v0 + 2047) < 0)
    operator delete((void *)STACK[0x1778]);
  JUMPOUT(0x100388398);
}

void sub_10038A638()
{
  JUMPOUT(0x1003883A8);
}

void sub_10038A648()
{
  uint64_t v0;

  if (*(char *)(v0 + 2127) < 0)
    operator delete((void *)STACK[0x17C8]);
  JUMPOUT(0x1003883B4);
}

void sub_10038A66C()
{
  JUMPOUT(0x1003883C4);
}

void sub_10038A67C()
{
  uint64_t v0;

  if (*(char *)(v0 + 2207) < 0)
    operator delete((void *)STACK[0x1818]);
  JUMPOUT(0x1003883D0);
}

void sub_10038A6A0()
{
  JUMPOUT(0x1003883E0);
}

void sub_10038A6B0()
{
  uint64_t v0;

  if (*(char *)(v0 + 2287) < 0)
    operator delete((void *)STACK[0x1868]);
  JUMPOUT(0x1003883ECLL);
}

void sub_10038A6D4()
{
  JUMPOUT(0x1003883FCLL);
}

void sub_10038A6E4()
{
  uint64_t v0;

  if (*(char *)(v0 + 2367) < 0)
    operator delete((void *)STACK[0x18B8]);
  JUMPOUT(0x100388408);
}

void sub_10038A708()
{
  JUMPOUT(0x100388418);
}

void sub_10038A718()
{
  uint64_t v0;

  if (*(char *)(v0 + 2447) < 0)
    operator delete((void *)STACK[0x1908]);
  JUMPOUT(0x100388424);
}

void sub_10038A73C()
{
  JUMPOUT(0x100388434);
}

void sub_10038A74C()
{
  uint64_t v0;

  if (*(char *)(v0 + 2527) < 0)
    operator delete((void *)STACK[0x1958]);
  JUMPOUT(0x100388440);
}

void sub_10038A770()
{
  JUMPOUT(0x100388450);
}

void sub_10038A780()
{
  uint64_t v0;

  if (*(char *)(v0 + 2607) < 0)
    operator delete((void *)STACK[0x19A8]);
  JUMPOUT(0x10038845CLL);
}

void sub_10038A7A4()
{
  JUMPOUT(0x10038846CLL);
}

void sub_10038A7B4()
{
  uint64_t v0;

  if (*(char *)(v0 + 2687) < 0)
    operator delete((void *)STACK[0x19F8]);
  JUMPOUT(0x100388478);
}

void sub_10038A7D8()
{
  JUMPOUT(0x100388488);
}

void sub_10038A7E8()
{
  uint64_t v0;

  if (*(char *)(v0 + 2767) < 0)
    operator delete((void *)STACK[0x1A48]);
  JUMPOUT(0x100388494);
}

void sub_10038A80C()
{
  JUMPOUT(0x1003884A4);
}

void sub_10038A81C()
{
  uint64_t v0;

  if (*(char *)(v0 + 2847) < 0)
    operator delete((void *)STACK[0x1A98]);
  JUMPOUT(0x1003884B0);
}

void sub_10038A840()
{
  JUMPOUT(0x1003884C0);
}

void sub_10038A850()
{
  uint64_t v0;

  if (*(char *)(v0 + 2927) < 0)
    operator delete((void *)STACK[0x1AE8]);
  JUMPOUT(0x1003884CCLL);
}

void sub_10038A874()
{
  JUMPOUT(0x1003884DCLL);
}

void sub_10038A884()
{
  uint64_t v0;

  if (*(char *)(v0 + 3007) < 0)
    operator delete((void *)STACK[0x1B38]);
  JUMPOUT(0x1003884E8);
}

void sub_10038A8A8()
{
  JUMPOUT(0x1003884F8);
}

void sub_10038A8B8()
{
  uint64_t v0;

  if (*(char *)(v0 + 3087) < 0)
    operator delete((void *)STACK[0x1B88]);
  JUMPOUT(0x100388504);
}

void sub_10038A8DC()
{
  JUMPOUT(0x100388514);
}

void sub_10038A8EC()
{
  uint64_t v0;

  if (*(char *)(v0 + 3167) < 0)
    operator delete((void *)STACK[0x1BD8]);
  JUMPOUT(0x100388520);
}

void sub_10038A910()
{
  JUMPOUT(0x100388530);
}

void sub_10038A920()
{
  uint64_t v0;

  if (*(char *)(v0 + 3247) < 0)
    operator delete((void *)STACK[0x1C28]);
  JUMPOUT(0x10038853CLL);
}

void sub_10038A944()
{
  JUMPOUT(0x10038854CLL);
}

void sub_10038A954()
{
  uint64_t v0;

  if (*(char *)(v0 + 3327) < 0)
    operator delete((void *)STACK[0x1C78]);
  JUMPOUT(0x100388558);
}

void sub_10038A978()
{
  JUMPOUT(0x100388568);
}

void sub_10038A988()
{
  uint64_t v0;

  if (*(char *)(v0 + 3407) < 0)
    operator delete((void *)STACK[0x1CC8]);
  JUMPOUT(0x100388574);
}

void sub_10038A9AC()
{
  JUMPOUT(0x100388584);
}

void sub_10038A9BC()
{
  uint64_t v0;

  if (*(char *)(v0 + 3487) < 0)
    operator delete((void *)STACK[0x1D18]);
  JUMPOUT(0x100388590);
}

void sub_10038A9E0()
{
  JUMPOUT(0x1003885A0);
}

void sub_10038A9F0()
{
  uint64_t v0;

  if (*(char *)(v0 + 3567) < 0)
    operator delete((void *)STACK[0x1D68]);
  JUMPOUT(0x1003885ACLL);
}

void sub_10038AA14()
{
  JUMPOUT(0x1003885BCLL);
}

void sub_10038AA24()
{
  uint64_t v0;

  if (*(char *)(v0 + 3647) < 0)
    operator delete((void *)STACK[0x1DB8]);
  JUMPOUT(0x1003885C8);
}

void sub_10038AA48()
{
  JUMPOUT(0x1003885D8);
}

void sub_10038AA58()
{
  uint64_t v0;

  if (*(char *)(v0 + 3727) < 0)
    operator delete((void *)STACK[0x1E08]);
  JUMPOUT(0x1003885E4);
}

void sub_10038AA7C()
{
  JUMPOUT(0x1003885F4);
}

void sub_10038AA8C()
{
  uint64_t v0;

  if (*(char *)(v0 + 3807) < 0)
    operator delete((void *)STACK[0x1E58]);
  JUMPOUT(0x100388600);
}

void sub_10038AAB0()
{
  JUMPOUT(0x100388610);
}

void sub_10038AAC0()
{
  uint64_t v0;

  if (*(char *)(v0 + 3887) < 0)
    operator delete((void *)STACK[0x1EA8]);
  JUMPOUT(0x10038861CLL);
}

void sub_10038AAE4()
{
  JUMPOUT(0x10038862CLL);
}

void sub_10038AAF4()
{
  uint64_t v0;

  if (*(char *)(v0 + 3967) < 0)
    operator delete((void *)STACK[0x1EF8]);
  JUMPOUT(0x100388638);
}

void sub_10038AB18()
{
  JUMPOUT(0x100388648);
}

void sub_10038AB28()
{
  uint64_t v0;

  if (*(char *)(v0 + 4047) < 0)
    operator delete((void *)STACK[0x1F48]);
  JUMPOUT(0x100388654);
}

void sub_10038AB4C()
{
  JUMPOUT(0x100388664);
}

void sub_10038AB5C()
{
  uint64_t v0;

  if (*(char *)(v0 + 47) < 0)
    operator delete((void *)STACK[0x1F98]);
  JUMPOUT(0x100388670);
}

void sub_10038AB80()
{
  JUMPOUT(0x100388680);
}

void sub_10038AB90()
{
  uint64_t v0;

  if (*(char *)(v0 + 127) < 0)
    operator delete((void *)STACK[0x1FE8]);
  JUMPOUT(0x10038868CLL);
}

void sub_10038ABB4()
{
  JUMPOUT(0x10038869CLL);
}

void sub_10038ABC4()
{
  uint64_t v0;

  if (*(char *)(v0 + 207) < 0)
    operator delete((void *)STACK[0x2038]);
  JUMPOUT(0x1003886A8);
}

void sub_10038ABE8()
{
  JUMPOUT(0x1003886B8);
}

void sub_10038ABF8()
{
  uint64_t v0;

  if (*(char *)(v0 + 287) < 0)
    operator delete((void *)STACK[0x2088]);
  JUMPOUT(0x1003886C4);
}

void sub_10038AC1C()
{
  JUMPOUT(0x1003886D4);
}

void sub_10038AC2C()
{
  uint64_t v0;

  if (*(char *)(v0 + 367) < 0)
    operator delete((void *)STACK[0x20D8]);
  JUMPOUT(0x1003886E0);
}

void sub_10038AC50()
{
  JUMPOUT(0x1003886F0);
}

void sub_10038AC60()
{
  uint64_t v0;

  if (*(char *)(v0 + 447) < 0)
    operator delete((void *)STACK[0x2128]);
  JUMPOUT(0x1003886FCLL);
}

void sub_10038AC84()
{
  JUMPOUT(0x10038870CLL);
}

void sub_10038AC94()
{
  uint64_t v0;

  if (*(char *)(v0 + 527) < 0)
    operator delete((void *)STACK[0x2178]);
  JUMPOUT(0x100388718);
}

void sub_10038ACB8()
{
  JUMPOUT(0x100388728);
}

void sub_10038ACC8()
{
  uint64_t v0;

  if (*(char *)(v0 + 607) < 0)
    operator delete((void *)STACK[0x21C8]);
  JUMPOUT(0x100388734);
}

void sub_10038ACEC()
{
  JUMPOUT(0x100388744);
}

void sub_10038ACFC()
{
  uint64_t v0;

  if (*(char *)(v0 + 687) < 0)
    operator delete((void *)STACK[0x2218]);
  JUMPOUT(0x100388750);
}

void sub_10038AD20()
{
  JUMPOUT(0x100388760);
}

void sub_10038AD30()
{
  uint64_t v0;

  if (*(char *)(v0 + 767) < 0)
    operator delete((void *)STACK[0x2268]);
  JUMPOUT(0x10038876CLL);
}

void sub_10038AD54()
{
  JUMPOUT(0x10038877CLL);
}

void sub_10038AD64()
{
  uint64_t v0;

  if (*(char *)(v0 + 847) < 0)
    operator delete((void *)STACK[0x22B8]);
  JUMPOUT(0x100388788);
}

void sub_10038AD88()
{
  JUMPOUT(0x100388798);
}

void sub_10038AD98()
{
  uint64_t v0;

  if (*(char *)(v0 + 927) < 0)
    operator delete((void *)STACK[0x2308]);
  JUMPOUT(0x1003887A4);
}

void sub_10038ADBC()
{
  JUMPOUT(0x1003887B4);
}

void sub_10038ADCC()
{
  uint64_t v0;

  if (*(char *)(v0 + 1007) < 0)
    operator delete((void *)STACK[0x2358]);
  JUMPOUT(0x1003887C0);
}

void sub_10038ADF0()
{
  JUMPOUT(0x1003887D0);
}

void sub_10038AE00()
{
  uint64_t v0;

  if (*(char *)(v0 + 1087) < 0)
    operator delete((void *)STACK[0x23A8]);
  JUMPOUT(0x1003887DCLL);
}

void sub_10038AE24()
{
  JUMPOUT(0x1003887ECLL);
}

void sub_10038AE34()
{
  uint64_t v0;

  if (*(char *)(v0 + 1167) < 0)
    operator delete((void *)STACK[0x23F8]);
  JUMPOUT(0x1003887F8);
}

void sub_10038AE58()
{
  JUMPOUT(0x100388808);
}

void sub_10038AE68()
{
  uint64_t v0;

  if (*(char *)(v0 + 1247) < 0)
    operator delete((void *)STACK[0x2448]);
  JUMPOUT(0x100388814);
}

void sub_10038AE8C()
{
  JUMPOUT(0x100388824);
}

void sub_10038AE9C()
{
  uint64_t v0;

  if (*(char *)(v0 + 1327) < 0)
    operator delete((void *)STACK[0x2498]);
  JUMPOUT(0x100388830);
}

void sub_10038AEC0()
{
  JUMPOUT(0x100388840);
}

void sub_10038AED0()
{
  uint64_t v0;

  if (*(char *)(v0 + 1407) < 0)
    operator delete((void *)STACK[0x24E8]);
  JUMPOUT(0x10038884CLL);
}

void sub_10038AEF4()
{
  JUMPOUT(0x10038885CLL);
}

void sub_10038AF04()
{
  uint64_t v0;

  if (*(char *)(v0 + 1487) < 0)
    operator delete((void *)STACK[0x2538]);
  JUMPOUT(0x100388868);
}

void sub_10038AF28()
{
  JUMPOUT(0x100388878);
}

void sub_10038AF38()
{
  uint64_t v0;

  if (*(char *)(v0 + 1567) < 0)
    operator delete((void *)STACK[0x2588]);
  JUMPOUT(0x100388884);
}

void sub_10038AF5C()
{
  JUMPOUT(0x100388894);
}

void sub_10038AF6C()
{
  uint64_t v0;

  if (*(char *)(v0 + 1647) < 0)
    operator delete((void *)STACK[0x25D8]);
  JUMPOUT(0x1003888A0);
}

void sub_10038AF90()
{
  JUMPOUT(0x1003888B0);
}

void sub_10038AFA0()
{
  uint64_t v0;

  if (*(char *)(v0 + 1727) < 0)
    operator delete((void *)STACK[0x2628]);
  JUMPOUT(0x1003888BCLL);
}

void sub_10038AFC4()
{
  JUMPOUT(0x1003888CCLL);
}

void sub_10038AFD4()
{
  uint64_t v0;

  if (*(char *)(v0 + 1807) < 0)
    operator delete((void *)STACK[0x2678]);
  JUMPOUT(0x1003888D8);
}

void sub_10038AFF8()
{
  JUMPOUT(0x1003888E8);
}

void sub_10038B008()
{
  uint64_t v0;

  if (*(char *)(v0 + 1887) < 0)
    operator delete((void *)STACK[0x26C8]);
  JUMPOUT(0x1003888F4);
}

void sub_10038B02C()
{
  JUMPOUT(0x100388904);
}

void sub_10038B03C()
{
  uint64_t v0;

  if (*(char *)(v0 + 1967) < 0)
    operator delete((void *)STACK[0x2718]);
  JUMPOUT(0x100388910);
}

void sub_10038B060()
{
  JUMPOUT(0x100388920);
}

void sub_10038B070()
{
  uint64_t v0;

  if (*(char *)(v0 + 2047) < 0)
    operator delete((void *)STACK[0x2768]);
  JUMPOUT(0x10038892CLL);
}

void sub_10038B094()
{
  JUMPOUT(0x10038893CLL);
}

void sub_10038B0A4()
{
  uint64_t v0;

  if (*(char *)(v0 + 2127) < 0)
    operator delete((void *)STACK[0x27B8]);
  JUMPOUT(0x100388948);
}

void sub_10038B0C8()
{
  JUMPOUT(0x100388958);
}

void sub_10038B0D8()
{
  uint64_t v0;

  if (*(char *)(v0 + 2207) < 0)
    operator delete((void *)STACK[0x2808]);
  JUMPOUT(0x100388964);
}

void sub_10038B0FC()
{
  JUMPOUT(0x100388974);
}

void sub_10038B10C()
{
  uint64_t v0;

  if (*(char *)(v0 + 2287) < 0)
    operator delete((void *)STACK[0x2858]);
  JUMPOUT(0x100388980);
}

void sub_10038B130()
{
  JUMPOUT(0x100388990);
}

void sub_10038B140()
{
  uint64_t v0;

  if (*(char *)(v0 + 2367) < 0)
    operator delete((void *)STACK[0x28A8]);
  JUMPOUT(0x10038899CLL);
}

void sub_10038B164()
{
  JUMPOUT(0x1003889ACLL);
}

void sub_10038B174()
{
  uint64_t v0;

  if (*(char *)(v0 + 2447) < 0)
    operator delete((void *)STACK[0x28F8]);
  JUMPOUT(0x1003889B8);
}

void sub_10038B198()
{
  JUMPOUT(0x1003889C8);
}

void sub_10038B1A8()
{
  uint64_t v0;

  if (*(char *)(v0 + 2527) < 0)
    operator delete((void *)STACK[0x2948]);
  JUMPOUT(0x1003889D4);
}

void sub_10038B1CC()
{
  JUMPOUT(0x1003889E4);
}

void sub_10038B1DC()
{
  uint64_t v0;

  if (*(char *)(v0 + 2607) < 0)
    operator delete((void *)STACK[0x2998]);
  JUMPOUT(0x1003889F0);
}

void sub_10038B200()
{
  JUMPOUT(0x100388A00);
}

void sub_10038B210()
{
  uint64_t v0;

  if (*(char *)(v0 + 2687) < 0)
    operator delete((void *)STACK[0x29E8]);
  JUMPOUT(0x100388A0CLL);
}

void sub_10038B234()
{
  JUMPOUT(0x100388A1CLL);
}

void sub_10038B244()
{
  uint64_t v0;

  if (*(char *)(v0 + 2767) < 0)
    operator delete((void *)STACK[0x2A38]);
  JUMPOUT(0x100388A28);
}

void sub_10038B268()
{
  JUMPOUT(0x100388A38);
}

void sub_10038B278()
{
  uint64_t v0;

  if (*(char *)(v0 + 2847) < 0)
    operator delete((void *)STACK[0x2A88]);
  JUMPOUT(0x100388A44);
}

void sub_10038B29C()
{
  JUMPOUT(0x100388A54);
}

void sub_10038B2AC()
{
  uint64_t v0;

  if (*(char *)(v0 + 2927) < 0)
    operator delete((void *)STACK[0x2AD8]);
  JUMPOUT(0x100388A60);
}

void sub_10038B2D0()
{
  JUMPOUT(0x100388A70);
}

void sub_10038B2E0()
{
  uint64_t v0;

  if (*(char *)(v0 + 3007) < 0)
    operator delete((void *)STACK[0x2B28]);
  JUMPOUT(0x100388A7CLL);
}

void sub_10038B304()
{
  JUMPOUT(0x100388A8CLL);
}

void sub_10038B314()
{
  uint64_t v0;

  if (*(char *)(v0 + 3087) < 0)
    operator delete((void *)STACK[0x2B78]);
  JUMPOUT(0x100388A98);
}

void sub_10038B338()
{
  JUMPOUT(0x100388AA8);
}

void sub_10038B348()
{
  uint64_t v0;

  if (*(char *)(v0 + 3167) < 0)
    operator delete((void *)STACK[0x2BC8]);
  JUMPOUT(0x100388AB4);
}

void sub_10038B36C()
{
  JUMPOUT(0x100388AC4);
}

void sub_10038B37C()
{
  uint64_t v0;

  if (*(char *)(v0 + 3247) < 0)
    operator delete((void *)STACK[0x2C18]);
  JUMPOUT(0x100388AD0);
}

void sub_10038B3A0()
{
  JUMPOUT(0x100388AE0);
}

void sub_10038B3B0()
{
  uint64_t v0;

  if (*(char *)(v0 + 3327) < 0)
    operator delete((void *)STACK[0x2C68]);
  JUMPOUT(0x100388AECLL);
}

void sub_10038B3D4()
{
  JUMPOUT(0x100388AFCLL);
}

void sub_10038B3E4()
{
  uint64_t v0;

  if (*(char *)(v0 + 3407) < 0)
    operator delete((void *)STACK[0x2CB8]);
  JUMPOUT(0x100388B08);
}

void sub_10038B408()
{
  JUMPOUT(0x100388B18);
}

void sub_10038B418()
{
  uint64_t v0;

  if (*(char *)(v0 + 3487) < 0)
    operator delete((void *)STACK[0x2D08]);
  JUMPOUT(0x100388B24);
}

void sub_10038B43C()
{
  JUMPOUT(0x100388B34);
}

void sub_10038B44C()
{
  uint64_t v0;

  if (*(char *)(v0 + 3567) < 0)
    operator delete((void *)STACK[0x2D58]);
  JUMPOUT(0x100388B40);
}

void sub_10038B470()
{
  JUMPOUT(0x100388B50);
}

void sub_10038B480()
{
  uint64_t v0;

  if (*(char *)(v0 + 3647) < 0)
    operator delete((void *)STACK[0x2DA8]);
  JUMPOUT(0x100388B5CLL);
}

void sub_10038B4A4()
{
  JUMPOUT(0x100388B6CLL);
}

void sub_10038B4B4()
{
  uint64_t v0;

  if (*(char *)(v0 + 3727) < 0)
    operator delete((void *)STACK[0x2DF8]);
  JUMPOUT(0x100388B78);
}

void sub_10038B4D8()
{
  JUMPOUT(0x100388B88);
}

void sub_10038B4E8()
{
  uint64_t v0;

  if (*(char *)(v0 + 3807) < 0)
    operator delete((void *)STACK[0x2E48]);
  JUMPOUT(0x100388B94);
}

void sub_10038B50C()
{
  JUMPOUT(0x100388BA4);
}

void sub_10038B51C()
{
  uint64_t v0;

  if (*(char *)(v0 + 3887) < 0)
    operator delete((void *)STACK[0x2E98]);
  JUMPOUT(0x100388BB0);
}

void sub_10038B540()
{
  JUMPOUT(0x100388BC0);
}

void sub_10038B550()
{
  uint64_t v0;

  if (*(char *)(v0 + 3967) < 0)
    operator delete((void *)STACK[0x2EE8]);
  JUMPOUT(0x100388BCCLL);
}

void sub_10038B574()
{
  JUMPOUT(0x100388BDCLL);
}

void sub_10038B584()
{
  uint64_t v0;

  if (*(char *)(v0 + 4047) < 0)
    operator delete((void *)STACK[0x2F38]);
  JUMPOUT(0x100388BE8);
}

void sub_10038B5A8()
{
  JUMPOUT(0x100388BF8);
}

void sub_10038B5B8()
{
  uint64_t v0;

  if (*(char *)(v0 + 47) < 0)
    operator delete((void *)STACK[0x2F88]);
  JUMPOUT(0x100388C04);
}

void sub_10038B5DC()
{
  JUMPOUT(0x100388C14);
}

void sub_10038B5EC()
{
  uint64_t v0;

  if (*(char *)(v0 + 127) < 0)
    operator delete((void *)STACK[0x2FD8]);
  JUMPOUT(0x100388C20);
}

void sub_10038B610()
{
  JUMPOUT(0x100388C30);
}

void sub_10038B620()
{
  uint64_t v0;

  if (*(char *)(v0 + 207) < 0)
    operator delete((void *)STACK[0x3028]);
  JUMPOUT(0x100388C3CLL);
}

void sub_10038B644()
{
  JUMPOUT(0x100388C4CLL);
}

void sub_10038B654()
{
  uint64_t v0;

  if (*(char *)(v0 + 287) < 0)
    operator delete((void *)STACK[0x3078]);
  JUMPOUT(0x100388C58);
}

void sub_10038B678()
{
  JUMPOUT(0x100388C68);
}

void sub_10038B688()
{
  uint64_t v0;

  if (*(char *)(v0 + 367) < 0)
    operator delete((void *)STACK[0x30C8]);
  JUMPOUT(0x100388C74);
}

void sub_10038B6AC()
{
  JUMPOUT(0x100388C84);
}

void sub_10038B6BC()
{
  uint64_t v0;

  if (*(char *)(v0 + 447) < 0)
    operator delete((void *)STACK[0x3118]);
  JUMPOUT(0x100388C90);
}

void sub_10038B6E0()
{
  JUMPOUT(0x100388CA0);
}

void sub_10038B6F0()
{
  uint64_t v0;

  if (*(char *)(v0 + 527) < 0)
    operator delete((void *)STACK[0x3168]);
  JUMPOUT(0x100388CACLL);
}

void sub_10038B714()
{
  JUMPOUT(0x100388CBCLL);
}

void sub_10038B724()
{
  uint64_t v0;

  if (*(char *)(v0 + 607) < 0)
    operator delete((void *)STACK[0x31B8]);
  JUMPOUT(0x100388CC8);
}

void sub_10038B748()
{
  JUMPOUT(0x100388CD8);
}

void sub_10038B758()
{
  uint64_t v0;

  if (*(char *)(v0 + 687) < 0)
    operator delete((void *)STACK[0x3208]);
  JUMPOUT(0x100388CE4);
}

void sub_10038B77C()
{
  JUMPOUT(0x100388CF4);
}

void sub_10038B78C()
{
  uint64_t v0;

  if (*(char *)(v0 + 767) < 0)
    operator delete((void *)STACK[0x3258]);
  JUMPOUT(0x100388D00);
}

void sub_10038B7B0()
{
  JUMPOUT(0x100388D10);
}

void sub_10038B7C0()
{
  uint64_t v0;

  if (*(char *)(v0 + 847) < 0)
    operator delete((void *)STACK[0x32A8]);
  JUMPOUT(0x100388D1CLL);
}

void sub_10038B7E4()
{
  JUMPOUT(0x100388D2CLL);
}

void sub_10038B7F4()
{
  uint64_t v0;

  if (*(char *)(v0 + 927) < 0)
    operator delete((void *)STACK[0x32F8]);
  JUMPOUT(0x100388D38);
}

void sub_10038B818()
{
  JUMPOUT(0x100388D48);
}

void sub_10038B828()
{
  uint64_t v0;

  if (*(char *)(v0 + 1007) < 0)
    operator delete((void *)STACK[0x3348]);
  JUMPOUT(0x100388D54);
}

void sub_10038B84C()
{
  JUMPOUT(0x100388D64);
}

void sub_10038B85C()
{
  uint64_t v0;

  if (*(char *)(v0 + 1087) < 0)
    operator delete((void *)STACK[0x3398]);
  JUMPOUT(0x100388D70);
}

void sub_10038B880()
{
  JUMPOUT(0x100388D80);
}

void sub_10038B890()
{
  uint64_t v0;

  if (*(char *)(v0 + 1167) < 0)
    operator delete((void *)STACK[0x33E8]);
  JUMPOUT(0x100388D8CLL);
}

void sub_10038B8B4()
{
  JUMPOUT(0x100388D9CLL);
}

void sub_10038B8C4()
{
  uint64_t v0;

  if (*(char *)(v0 + 1247) < 0)
    operator delete((void *)STACK[0x3438]);
  JUMPOUT(0x100388DA8);
}

void sub_10038B8E8()
{
  JUMPOUT(0x100388DB8);
}

void sub_10038B8F8()
{
  uint64_t v0;

  if (*(char *)(v0 + 1327) < 0)
    operator delete((void *)STACK[0x3488]);
  JUMPOUT(0x100388DC4);
}

void sub_10038B91C()
{
  JUMPOUT(0x100388DD4);
}

void sub_10038B92C()
{
  uint64_t v0;

  if (*(char *)(v0 + 1407) < 0)
    operator delete((void *)STACK[0x34D8]);
  JUMPOUT(0x100388DE0);
}

void sub_10038B950()
{
  JUMPOUT(0x100388DF0);
}

void sub_10038B960()
{
  uint64_t v0;

  if (*(char *)(v0 + 1487) < 0)
    operator delete((void *)STACK[0x3528]);
  JUMPOUT(0x100388DFCLL);
}

void sub_10038B984()
{
  JUMPOUT(0x100388E0CLL);
}

void sub_10038B994()
{
  uint64_t v0;

  if (*(char *)(v0 + 1567) < 0)
    operator delete((void *)STACK[0x3578]);
  JUMPOUT(0x100388E18);
}

void sub_10038B9B8()
{
  JUMPOUT(0x100388E28);
}

void sub_10038B9C8()
{
  uint64_t v0;

  if (*(char *)(v0 + 1647) < 0)
    operator delete((void *)STACK[0x35C8]);
  JUMPOUT(0x100388E34);
}

void sub_10038B9EC()
{
  JUMPOUT(0x100388E44);
}

void sub_10038B9FC()
{
  uint64_t v0;

  if (*(char *)(v0 + 1727) < 0)
    operator delete((void *)STACK[0x3618]);
  JUMPOUT(0x100388E50);
}

void sub_10038BA20()
{
  JUMPOUT(0x100388E60);
}

void sub_10038BA30()
{
  uint64_t v0;

  if (*(char *)(v0 + 1807) < 0)
    operator delete((void *)STACK[0x3668]);
  JUMPOUT(0x100388E6CLL);
}

void sub_10038BA54()
{
  JUMPOUT(0x100388E7CLL);
}

void sub_10038BA64()
{
  uint64_t v0;

  if (*(char *)(v0 + 1887) < 0)
    operator delete((void *)STACK[0x36B8]);
  JUMPOUT(0x100388E88);
}

void sub_10038BA88()
{
  JUMPOUT(0x100388E98);
}

void sub_10038BA98()
{
  uint64_t v0;

  if (*(char *)(v0 + 1967) < 0)
    operator delete((void *)STACK[0x3708]);
  JUMPOUT(0x100388EA4);
}

void sub_10038BABC()
{
  JUMPOUT(0x100388EB4);
}

void sub_10038BACC()
{
  uint64_t v0;

  if (*(char *)(v0 + 2047) < 0)
    operator delete((void *)STACK[0x3758]);
  JUMPOUT(0x100388EC0);
}

void sub_10038BAF0()
{
  JUMPOUT(0x100388ED0);
}

void sub_10038BB00()
{
  uint64_t v0;

  if (*(char *)(v0 + 2127) < 0)
    operator delete((void *)STACK[0x37A8]);
  JUMPOUT(0x100388EDCLL);
}

void sub_10038BB24()
{
  JUMPOUT(0x100388EECLL);
}

void sub_10038BB34()
{
  uint64_t v0;

  if (*(char *)(v0 + 2207) < 0)
    operator delete((void *)STACK[0x37F8]);
  JUMPOUT(0x100388EF8);
}

void sub_10038BB58()
{
  JUMPOUT(0x100388F08);
}

void sub_10038BB68()
{
  uint64_t v0;

  if (*(char *)(v0 + 2287) < 0)
    operator delete((void *)STACK[0x3848]);
  JUMPOUT(0x100388F14);
}

void sub_10038BB8C()
{
  JUMPOUT(0x100388F24);
}

void sub_10038BB9C()
{
  uint64_t v0;

  if (*(char *)(v0 + 2367) < 0)
    operator delete((void *)STACK[0x3898]);
  JUMPOUT(0x100388F30);
}

void sub_10038BBC0()
{
  JUMPOUT(0x100388F40);
}

void sub_10038BBD0()
{
  uint64_t v0;

  if (*(char *)(v0 + 2447) < 0)
    operator delete((void *)STACK[0x38E8]);
  JUMPOUT(0x100388F4CLL);
}

void sub_10038BBF4()
{
  JUMPOUT(0x100388F5CLL);
}

void sub_10038BC04()
{
  uint64_t v0;

  if (*(char *)(v0 + 2527) < 0)
    operator delete((void *)STACK[0x3938]);
  JUMPOUT(0x100388F68);
}

void sub_10038BC28()
{
  JUMPOUT(0x100388F78);
}

void sub_10038BC38()
{
  uint64_t v0;

  if (*(char *)(v0 + 2607) < 0)
    operator delete((void *)STACK[0x3988]);
  JUMPOUT(0x100388F84);
}

void sub_10038BC5C()
{
  JUMPOUT(0x100388F94);
}

void sub_10038BC6C()
{
  uint64_t v0;

  if (*(char *)(v0 + 2687) < 0)
    operator delete((void *)STACK[0x39D8]);
  JUMPOUT(0x100388FA0);
}

void sub_10038BC90()
{
  JUMPOUT(0x100388FB0);
}

void sub_10038BCA0()
{
  uint64_t v0;

  if (*(char *)(v0 + 2767) < 0)
    operator delete((void *)STACK[0x3A28]);
  JUMPOUT(0x100388FBCLL);
}

void sub_10038BCC4()
{
  JUMPOUT(0x100388FCCLL);
}

void sub_10038BCD4()
{
  uint64_t v0;

  if (*(char *)(v0 + 2847) < 0)
    operator delete((void *)STACK[0x3A78]);
  JUMPOUT(0x100388FD8);
}

void sub_10038BCF8()
{
  JUMPOUT(0x100388FE8);
}

void sub_10038BD08()
{
  uint64_t v0;

  if (*(char *)(v0 + 2927) < 0)
    operator delete((void *)STACK[0x3AC8]);
  JUMPOUT(0x100388FF4);
}

void sub_10038BD2C()
{
  JUMPOUT(0x100389004);
}

void sub_10038BD3C()
{
  uint64_t v0;

  if (*(char *)(v0 + 3007) < 0)
    operator delete((void *)STACK[0x3B18]);
  JUMPOUT(0x100389010);
}

void sub_10038BD60()
{
  JUMPOUT(0x100389020);
}

void sub_10038BD70()
{
  uint64_t v0;

  if (*(char *)(v0 + 3087) < 0)
    operator delete((void *)STACK[0x3B68]);
  JUMPOUT(0x10038902CLL);
}

void sub_10038BD94()
{
  JUMPOUT(0x10038903CLL);
}

void sub_10038BDA4()
{
  uint64_t v0;

  if (*(char *)(v0 + 3167) < 0)
    operator delete((void *)STACK[0x3BB8]);
  JUMPOUT(0x100389048);
}

void sub_10038BDC8()
{
  JUMPOUT(0x100389058);
}

void sub_10038BDD8()
{
  uint64_t v0;

  if (*(char *)(v0 + 3247) < 0)
    operator delete((void *)STACK[0x3C08]);
  JUMPOUT(0x100389064);
}

void sub_10038BDFC()
{
  JUMPOUT(0x100389074);
}

void sub_10038BE0C()
{
  uint64_t v0;

  if (*(char *)(v0 + 3327) < 0)
    operator delete((void *)STACK[0x3C58]);
  JUMPOUT(0x100389080);
}

void sub_10038BE30()
{
  JUMPOUT(0x100389090);
}

void sub_10038BE40()
{
  uint64_t v0;

  if (*(char *)(v0 + 3407) < 0)
    operator delete((void *)STACK[0x3CA8]);
  JUMPOUT(0x10038909CLL);
}

void sub_10038BE64()
{
  JUMPOUT(0x1003890ACLL);
}

void sub_10038BE74()
{
  uint64_t v0;

  if (*(char *)(v0 + 3487) < 0)
    operator delete((void *)STACK[0x3CF8]);
  JUMPOUT(0x1003890B8);
}

void sub_10038BE98()
{
  JUMPOUT(0x1003890C8);
}

void sub_10038BEA8()
{
  uint64_t v0;

  if (*(char *)(v0 + 3567) < 0)
    operator delete((void *)STACK[0x3D48]);
  JUMPOUT(0x1003890D4);
}

void sub_10038BECC()
{
  JUMPOUT(0x1003890E4);
}

void sub_10038BEDC()
{
  uint64_t v0;

  if (*(char *)(v0 + 3647) < 0)
    operator delete((void *)STACK[0x3D98]);
  JUMPOUT(0x1003890F0);
}

void sub_10038BF00()
{
  JUMPOUT(0x100389100);
}

void sub_10038BF10()
{
  uint64_t v0;

  if (*(char *)(v0 + 3727) < 0)
    operator delete((void *)STACK[0x3DE8]);
  JUMPOUT(0x10038910CLL);
}

void sub_10038BF34()
{
  JUMPOUT(0x10038911CLL);
}

void sub_10038BF44()
{
  uint64_t v0;

  if (*(char *)(v0 + 3807) < 0)
    operator delete((void *)STACK[0x3E38]);
  JUMPOUT(0x100389128);
}

void sub_10038BF68()
{
  JUMPOUT(0x100389138);
}

void sub_10038BF78()
{
  uint64_t v0;

  if (*(char *)(v0 + 3887) < 0)
    operator delete((void *)STACK[0x3E88]);
  JUMPOUT(0x100389144);
}

void sub_10038BF9C()
{
  JUMPOUT(0x100389154);
}

void sub_10038BFAC()
{
  uint64_t v0;

  if (*(char *)(v0 + 3967) < 0)
    operator delete((void *)STACK[0x3ED8]);
  JUMPOUT(0x100389160);
}

void sub_10038BFD0()
{
  JUMPOUT(0x100389170);
}

void sub_10038BFE0()
{
  uint64_t v0;

  if (*(char *)(v0 + 4047) < 0)
    operator delete((void *)STACK[0x3F28]);
  JUMPOUT(0x10038917CLL);
}

void sub_10038C004()
{
  JUMPOUT(0x10038918CLL);
}

void sub_10038C014()
{
  uint64_t v0;

  if (*(char *)(v0 + 47) < 0)
    operator delete((void *)STACK[0x3F78]);
  JUMPOUT(0x100389198);
}

void sub_10038C038()
{
  JUMPOUT(0x1003891A8);
}

void sub_10038C048()
{
  uint64_t v0;

  if (*(char *)(v0 + 127) < 0)
    operator delete((void *)STACK[0x3FC8]);
  JUMPOUT(0x1003891B4);
}

void sub_10038C06C()
{
  JUMPOUT(0x1003891C4);
}

void sub_10038C07C()
{
  uint64_t v0;

  if (*(char *)(v0 + 207) < 0)
    operator delete((void *)STACK[0x4018]);
  JUMPOUT(0x1003891D0);
}

void sub_10038C0A0()
{
  JUMPOUT(0x1003891E0);
}

void sub_10038C0B0()
{
  uint64_t v0;

  if (*(char *)(v0 + 287) < 0)
    operator delete((void *)STACK[0x4068]);
  JUMPOUT(0x1003891ECLL);
}

void sub_10038C0D4()
{
  JUMPOUT(0x1003891FCLL);
}

void sub_10038C0E4()
{
  uint64_t v0;

  if (*(char *)(v0 + 367) < 0)
    operator delete((void *)STACK[0x40B8]);
  JUMPOUT(0x100389208);
}

void sub_10038C108()
{
  JUMPOUT(0x100389218);
}

void sub_10038C118()
{
  uint64_t v0;

  if (*(char *)(v0 + 447) < 0)
    operator delete((void *)STACK[0x4108]);
  JUMPOUT(0x100389224);
}

void sub_10038C13C()
{
  JUMPOUT(0x100389234);
}

void sub_10038C14C()
{
  uint64_t v0;

  if (*(char *)(v0 + 527) < 0)
    operator delete((void *)STACK[0x4158]);
  JUMPOUT(0x100389240);
}

void sub_10038C170()
{
  JUMPOUT(0x100389250);
}

void sub_10038C180()
{
  uint64_t v0;

  if (*(char *)(v0 + 607) < 0)
    operator delete((void *)STACK[0x41A8]);
  JUMPOUT(0x10038925CLL);
}

void sub_10038C1A4()
{
  JUMPOUT(0x10038926CLL);
}

void sub_10038C1B4()
{
  uint64_t v0;

  if (*(char *)(v0 + 687) < 0)
    operator delete((void *)STACK[0x41F8]);
  JUMPOUT(0x100389278);
}

void sub_10038C1D8()
{
  JUMPOUT(0x100389288);
}

void sub_10038C1E8()
{
  uint64_t v0;

  if (*(char *)(v0 + 767) < 0)
    operator delete((void *)STACK[0x4248]);
  JUMPOUT(0x100389294);
}

void sub_10038C20C()
{
  JUMPOUT(0x1003892A4);
}

void sub_10038C21C()
{
  uint64_t v0;

  if (*(char *)(v0 + 847) < 0)
    operator delete((void *)STACK[0x4298]);
  JUMPOUT(0x1003892B0);
}

void sub_10038C240()
{
  JUMPOUT(0x1003892C0);
}

void sub_10038C250()
{
  uint64_t v0;

  if (*(char *)(v0 + 927) < 0)
    operator delete((void *)STACK[0x42E8]);
  JUMPOUT(0x1003892CCLL);
}

void sub_10038C274()
{
  JUMPOUT(0x1003892DCLL);
}

void sub_10038C284()
{
  uint64_t v0;

  if (*(char *)(v0 + 1007) < 0)
    operator delete((void *)STACK[0x4338]);
  JUMPOUT(0x1003892E8);
}

void sub_10038C2A8()
{
  JUMPOUT(0x1003892F8);
}

void sub_10038C2B8()
{
  uint64_t v0;

  if (*(char *)(v0 + 1087) < 0)
    operator delete((void *)STACK[0x4388]);
  JUMPOUT(0x100389304);
}

void sub_10038C2DC()
{
  JUMPOUT(0x100389314);
}

void sub_10038C2EC()
{
  uint64_t v0;

  if (*(char *)(v0 + 1167) < 0)
    operator delete((void *)STACK[0x43D8]);
  JUMPOUT(0x100389320);
}

void sub_10038C310()
{
  JUMPOUT(0x100389330);
}

void sub_10038C320()
{
  uint64_t v0;

  if (*(char *)(v0 + 1247) < 0)
    operator delete((void *)STACK[0x4428]);
  JUMPOUT(0x10038933CLL);
}

void sub_10038C344()
{
  JUMPOUT(0x10038934CLL);
}

void sub_10038C354()
{
  uint64_t v0;

  if (*(char *)(v0 + 1327) < 0)
    operator delete((void *)STACK[0x4478]);
  JUMPOUT(0x100389358);
}

void sub_10038C378()
{
  JUMPOUT(0x100389368);
}

void sub_10038C388()
{
  uint64_t v0;

  if (*(char *)(v0 + 1407) < 0)
    operator delete((void *)STACK[0x44C8]);
  JUMPOUT(0x100389374);
}

void sub_10038C3AC()
{
  JUMPOUT(0x100389384);
}

void sub_10038C3BC()
{
  uint64_t v0;

  if (*(char *)(v0 + 1487) < 0)
    operator delete((void *)STACK[0x4518]);
  JUMPOUT(0x100389390);
}

void sub_10038C3E0()
{
  JUMPOUT(0x1003893A0);
}

void sub_10038C3F0()
{
  uint64_t v0;

  if (*(char *)(v0 + 1567) < 0)
    operator delete((void *)STACK[0x4568]);
  JUMPOUT(0x1003893ACLL);
}

void sub_10038C414()
{
  JUMPOUT(0x1003893BCLL);
}

void sub_10038C424()
{
  uint64_t v0;

  if (*(char *)(v0 + 1647) < 0)
    operator delete((void *)STACK[0x45B8]);
  JUMPOUT(0x1003893C8);
}

void sub_10038C448()
{
  JUMPOUT(0x1003893D8);
}

void sub_10038C458()
{
  uint64_t v0;

  if (*(char *)(v0 + 1727) < 0)
    operator delete((void *)STACK[0x4608]);
  JUMPOUT(0x1003893E4);
}

void sub_10038C47C()
{
  JUMPOUT(0x1003893F4);
}

void sub_10038C48C()
{
  uint64_t v0;

  if (*(char *)(v0 + 1807) < 0)
    operator delete((void *)STACK[0x4658]);
  JUMPOUT(0x100389400);
}

void sub_10038C4B0()
{
  JUMPOUT(0x100389410);
}

void sub_10038C4C0()
{
  uint64_t v0;

  if (*(char *)(v0 + 1887) < 0)
    operator delete((void *)STACK[0x46A8]);
  JUMPOUT(0x10038941CLL);
}

void sub_10038C4E4()
{
  JUMPOUT(0x10038942CLL);
}

void sub_10038C4F4()
{
  uint64_t v0;

  if (*(char *)(v0 + 1967) < 0)
    operator delete((void *)STACK[0x46F8]);
  JUMPOUT(0x100389438);
}

void sub_10038C518()
{
  JUMPOUT(0x100389448);
}

void sub_10038C528()
{
  uint64_t v0;

  if (*(char *)(v0 + 2047) < 0)
    operator delete((void *)STACK[0x4748]);
  JUMPOUT(0x100389454);
}

void sub_10038C54C()
{
  JUMPOUT(0x100389464);
}

void sub_10038C55C()
{
  uint64_t v0;

  if (*(char *)(v0 + 2127) < 0)
    operator delete((void *)STACK[0x4798]);
  JUMPOUT(0x100389470);
}

void sub_10038C580()
{
  JUMPOUT(0x100389480);
}

void sub_10038C590()
{
  uint64_t v0;

  if (*(char *)(v0 + 2207) < 0)
    operator delete((void *)STACK[0x47E8]);
  JUMPOUT(0x10038948CLL);
}

void sub_10038C5B4()
{
  JUMPOUT(0x10038949CLL);
}

void sub_10038C5C4()
{
  uint64_t v0;

  if (*(char *)(v0 + 2287) < 0)
    operator delete((void *)STACK[0x4838]);
  JUMPOUT(0x1003894A8);
}

void sub_10038C5E8()
{
  JUMPOUT(0x1003894B8);
}

void sub_10038C5F8()
{
  uint64_t v0;

  if (*(char *)(v0 + 2367) < 0)
    operator delete((void *)STACK[0x4888]);
  JUMPOUT(0x1003894C4);
}

void sub_10038C61C()
{
  JUMPOUT(0x1003894D4);
}

void sub_10038C62C()
{
  uint64_t v0;

  if (*(char *)(v0 + 2447) < 0)
    operator delete((void *)STACK[0x48D8]);
  JUMPOUT(0x1003894E0);
}

void sub_10038C650()
{
  JUMPOUT(0x1003894F0);
}

void sub_10038C660()
{
  uint64_t v0;

  if (*(char *)(v0 + 2527) < 0)
    operator delete((void *)STACK[0x4928]);
  JUMPOUT(0x1003894FCLL);
}

void sub_10038C684()
{
  JUMPOUT(0x10038950CLL);
}

void sub_10038C694()
{
  uint64_t v0;

  if (*(char *)(v0 + 2607) < 0)
    operator delete((void *)STACK[0x4978]);
  JUMPOUT(0x100389518);
}

void sub_10038C6B8()
{
  JUMPOUT(0x100389528);
}

void sub_10038C6C8()
{
  uint64_t v0;

  if (*(char *)(v0 + 2687) < 0)
    operator delete((void *)STACK[0x49C8]);
  JUMPOUT(0x100389534);
}

void sub_10038C6EC()
{
  JUMPOUT(0x100389544);
}

void sub_10038C6FC()
{
  uint64_t v0;

  if (*(char *)(v0 + 2767) < 0)
    operator delete((void *)STACK[0x4A18]);
  JUMPOUT(0x100389550);
}

void sub_10038C720()
{
  JUMPOUT(0x100389560);
}

void sub_10038C730()
{
  uint64_t v0;

  if (*(char *)(v0 + 2847) < 0)
    operator delete((void *)STACK[0x4A68]);
  JUMPOUT(0x10038956CLL);
}

void sub_10038C754()
{
  JUMPOUT(0x10038957CLL);
}

void sub_10038C764()
{
  uint64_t v0;

  if (*(char *)(v0 + 2927) < 0)
    operator delete((void *)STACK[0x4AB8]);
  JUMPOUT(0x100389588);
}

void sub_10038C788()
{
  JUMPOUT(0x100389598);
}

void sub_10038C798()
{
  uint64_t v0;

  if (*(char *)(v0 + 3007) < 0)
    operator delete((void *)STACK[0x4B08]);
  JUMPOUT(0x1003895A4);
}

void sub_10038C7BC()
{
  JUMPOUT(0x1003895B4);
}

void sub_10038C7CC()
{
  uint64_t v0;

  if (*(char *)(v0 + 3087) < 0)
    operator delete((void *)STACK[0x4B58]);
  JUMPOUT(0x1003895C0);
}

void sub_10038C7F0()
{
  JUMPOUT(0x1003895D0);
}

void sub_10038C800()
{
  uint64_t v0;

  if (*(char *)(v0 + 3167) < 0)
    operator delete((void *)STACK[0x4BA8]);
  JUMPOUT(0x1003895DCLL);
}

void sub_10038C824()
{
  JUMPOUT(0x1003895ECLL);
}

void sub_10038C834()
{
  uint64_t v0;

  if (*(char *)(v0 + 3247) < 0)
    operator delete((void *)STACK[0x4BF8]);
  JUMPOUT(0x1003895F8);
}

void sub_10038C858()
{
  JUMPOUT(0x100389608);
}

void sub_10038C868()
{
  uint64_t v0;

  if (*(char *)(v0 + 3327) < 0)
    operator delete((void *)STACK[0x4C48]);
  JUMPOUT(0x100389614);
}

void sub_10038C88C()
{
  JUMPOUT(0x100389624);
}

void sub_10038C89C()
{
  uint64_t v0;

  if (*(char *)(v0 + 3407) < 0)
    operator delete((void *)STACK[0x4C98]);
  JUMPOUT(0x100389630);
}

void sub_10038C8C0()
{
  JUMPOUT(0x100389640);
}

void sub_10038C8D0()
{
  uint64_t v0;

  if (*(char *)(v0 + 3487) < 0)
    operator delete((void *)STACK[0x4CE8]);
  JUMPOUT(0x10038964CLL);
}

void sub_10038C8F4()
{
  JUMPOUT(0x10038965CLL);
}

void sub_10038C904()
{
  uint64_t v0;

  if (*(char *)(v0 + 3567) < 0)
    operator delete((void *)STACK[0x4D38]);
  JUMPOUT(0x100389668);
}

void sub_10038C928()
{
  JUMPOUT(0x100389678);
}

void sub_10038C938()
{
  uint64_t v0;

  if (*(char *)(v0 + 3647) < 0)
    operator delete((void *)STACK[0x4D88]);
  JUMPOUT(0x100389684);
}

void sub_10038C95C()
{
  JUMPOUT(0x100389694);
}

void sub_10038C96C()
{
  uint64_t v0;

  if (*(char *)(v0 + 3727) < 0)
    operator delete((void *)STACK[0x4DD8]);
  JUMPOUT(0x1003896A0);
}

void sub_10038C990()
{
  JUMPOUT(0x1003896B0);
}

void sub_10038C9A0()
{
  uint64_t v0;

  if (*(char *)(v0 + 3807) < 0)
    operator delete((void *)STACK[0x4E28]);
  JUMPOUT(0x1003896BCLL);
}

void sub_10038C9C4()
{
  JUMPOUT(0x1003896CCLL);
}

void sub_10038C9D4()
{
  uint64_t v0;

  if (*(char *)(v0 + 3887) < 0)
    operator delete((void *)STACK[0x4E78]);
  JUMPOUT(0x1003896D8);
}

void sub_10038C9F8()
{
  JUMPOUT(0x1003896E8);
}

void sub_10038CA08()
{
  uint64_t v0;

  if (*(char *)(v0 + 3967) < 0)
    operator delete((void *)STACK[0x4EC8]);
  JUMPOUT(0x1003896F4);
}

void sub_10038CA2C()
{
  JUMPOUT(0x100389704);
}

void sub_10038CA3C()
{
  uint64_t v0;

  if (*(char *)(v0 + 4047) < 0)
    operator delete((void *)STACK[0x4F18]);
  JUMPOUT(0x100389710);
}

void sub_10038CA60()
{
  JUMPOUT(0x100389720);
}

void sub_10038CA70()
{
  uint64_t v0;

  if (*(char *)(v0 + 47) < 0)
    operator delete((void *)STACK[0x4F68]);
  JUMPOUT(0x10038972CLL);
}

void sub_10038CA94()
{
  JUMPOUT(0x10038973CLL);
}

void sub_10038CAA4()
{
  uint64_t v0;

  if (*(char *)(v0 + 127) < 0)
    operator delete((void *)STACK[0x4FB8]);
  JUMPOUT(0x100389748);
}

void sub_10038CAC8()
{
  JUMPOUT(0x100389758);
}

void sub_10038CAD4()
{
  JUMPOUT(0x100389758);
}

void sub_10038CAE8()
{
  uint64_t v0;

  if (*(char *)(v0 + 207) < 0)
    operator delete((void *)STACK[0x5008]);
  JUMPOUT(0x100389764);
}

void sub_10038CB14()
{
  JUMPOUT(0x1003897A0);
}

uint64_t sub_10038CB1C()
{
  sub_10036F854();
  return sub_10037DE54();
}

uint64_t sub_10038CB30(uint64_t a1)
{
  _QWORD *v2;
  const std::locale::facet *v3;
  uint64_t v4;
  _QWORD *v5;
  std::string *p_p;
  size_t v7;
  _QWORD *v8;
  const std::locale::facet *v9;
  uint64_t v10;
  _QWORD *v11;
  std::string *v12;
  std::string::size_type size;
  _QWORD *v14;
  const std::locale::facet *v15;
  uint64_t v16;
  _QWORD *v17;
  std::string *v18;
  std::string::size_type v19;
  _QWORD *v20;
  const std::locale::facet *v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  const std::locale::facet *v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  const std::locale::facet *v29;
  uint64_t v30;
  _QWORD *v31;
  const char *v32;
  size_t v33;
  _QWORD *v34;
  const std::locale::facet *v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  const std::locale::facet *v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  const std::locale::facet *v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  const std::locale::facet *v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  _QWORD *v51;
  const std::locale::facet *v52;
  uint64_t v53;
  _QWORD *v54;
  const char *v55;
  size_t v56;
  _QWORD *v57;
  const std::locale::facet *v58;
  uint64_t v59;
  std::string __p;
  uint64_t v62;
  _QWORD v63[10];
  char v64;
  uint64_t v65;
  std::locale v66;

  sub_100210A10((uint64_t)&v62);
  v2 = sub_100054C60(&v62, (uint64_t)"Hello response:", 15);
  std::ios_base::getloc((const std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)));
  v3 = std::locale::use_facet((const std::locale *)&__p, &std::ctype<char>::id);
  v4 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v3->__vftable[2].~facet_0)(v3, 10);
  std::locale::~locale((std::locale *)&__p);
  std::ostream::put(v2, v4);
  std::ostream::flush(v2);
  v5 = sub_100054C60(&v62, (uint64_t)"    Rose firmware version: ", 27);
  if (*(char *)(a1 + 23) < 0)
    sub_100004678(&__p, *(void **)a1, *(_QWORD *)(a1 + 8));
  else
    __p = *(std::string *)a1;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  v7 = strlen((const char *)p_p);
  v8 = sub_100054C60(v5, (uint64_t)p_p, v7);
  std::ios_base::getloc((const std::ios_base *)((char *)v8 + *(_QWORD *)(*v8 - 24)));
  v9 = std::locale::use_facet(&v66, &std::ctype<char>::id);
  v10 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 10);
  std::locale::~locale(&v66);
  std::ostream::put(v8, v10);
  std::ostream::flush(v8);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v11 = sub_100054C60(&v62, (uint64_t)"    Rose interface version: ", 28);
  sub_10038D334(a1, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v12 = &__p;
  else
    v12 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v14 = sub_100054C60(v11, (uint64_t)v12, size);
  std::ios_base::getloc((const std::ios_base *)((char *)v14 + *(_QWORD *)(*v14 - 24)));
  v15 = std::locale::use_facet(&v66, &std::ctype<char>::id);
  v16 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v15->__vftable[2].~facet_0)(v15, 10);
  std::locale::~locale(&v66);
  std::ostream::put(v14, v16);
  std::ostream::flush(v14);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v17 = sub_100054C60(&v62, (uint64_t)"    Rose hardware version: ", 27);
  sub_10036C0CC(*(unsigned __int16 *)(a1 + 26), &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v18 = &__p;
  else
    v18 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v19 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v19 = __p.__r_.__value_.__l.__size_;
  v20 = sub_100054C60(v17, (uint64_t)v18, v19);
  std::ios_base::getloc((const std::ios_base *)((char *)v20 + *(_QWORD *)(*v20 - 24)));
  v21 = std::locale::use_facet(&v66, &std::ctype<char>::id);
  v22 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v21->__vftable[2].~facet_0)(v21, 10);
  std::locale::~locale(&v66);
  std::ostream::put(v20, v22);
  std::ostream::flush(v20);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (*(_BYTE *)(a1 + 96))
  {
    v23 = sub_100054C60(&v62, (uint64_t)"    Rose AP firmware version: ", 30);
    v24 = (_QWORD *)std::ostream::operator<<(v23, *(unsigned __int16 *)(a1 + 34));
    std::ios_base::getloc((const std::ios_base *)((char *)v24 + *(_QWORD *)(*v24 - 24)));
    v25 = std::locale::use_facet((const std::locale *)&__p, &std::ctype<char>::id);
    v26 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v25->__vftable[2].~facet_0)(v25, 10);
    std::locale::~locale((std::locale *)&__p);
    std::ostream::put(v24, v26);
    std::ostream::flush(v24);
    v27 = sub_100054C60(&v62, (uint64_t)"    Rose DSP firmware version: ", 31);
    v28 = (_QWORD *)std::ostream::operator<<(v27, *(unsigned __int16 *)(a1 + 36));
    std::ios_base::getloc((const std::ios_base *)((char *)v28 + *(_QWORD *)(*v28 - 24)));
    v29 = std::locale::use_facet((const std::locale *)&__p, &std::ctype<char>::id);
    v30 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v29->__vftable[2].~facet_0)(v29, 10);
    std::locale::~locale((std::locale *)&__p);
    std::ostream::put(v28, v30);
    std::ostream::flush(v28);
    v31 = sub_100054C60(&v62, (uint64_t)"    Rose target: ", 17);
    v32 = (const char *)(a1 + 40);
    if (*(char *)(a1 + 63) < 0)
      v32 = *(const char **)v32;
    v33 = strlen(v32);
    v34 = sub_100054C60(v31, (uint64_t)v32, v33);
    std::ios_base::getloc((const std::ios_base *)((char *)v34 + *(_QWORD *)(*v34 - 24)));
    v35 = std::locale::use_facet((const std::locale *)&__p, &std::ctype<char>::id);
    v36 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v35->__vftable[2].~facet_0)(v35, 10);
    std::locale::~locale((std::locale *)&__p);
    std::ostream::put(v34, v36);
    std::ostream::flush(v34);
    v37 = sub_100054C60(&v62, (uint64_t)"    Rose calibration data version: ", 35);
    v38 = (_QWORD *)std::ostream::operator<<(v37, *(unsigned __int16 *)(a1 + 64));
    std::ios_base::getloc((const std::ios_base *)((char *)v38 + *(_QWORD *)(*v38 - 24)));
    v39 = std::locale::use_facet((const std::locale *)&__p, &std::ctype<char>::id);
    v40 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v39->__vftable[2].~facet_0)(v39, 10);
    std::locale::~locale((std::locale *)&__p);
    std::ostream::put(v38, v40);
    std::ostream::flush(v38);
    v41 = sub_100054C60(&v62, (uint64_t)"    Rose module ID: ", 20);
    v42 = (_QWORD *)std::ostream::operator<<(v41, *(unsigned __int8 *)(a1 + 66));
    std::ios_base::getloc((const std::ios_base *)((char *)v42 + *(_QWORD *)(*v42 - 24)));
    v43 = std::locale::use_facet((const std::locale *)&__p, &std::ctype<char>::id);
    v44 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v43->__vftable[2].~facet_0)(v43, 10);
    std::locale::~locale((std::locale *)&__p);
    std::ostream::put(v42, v44);
    std::ostream::flush(v42);
    v45 = sub_100054C60(&v62, (uint64_t)"    Rose modem init version: ", 29);
    v46 = (_QWORD *)std::ostream::operator<<(v45, *(unsigned int *)(a1 + 68));
    std::ios_base::getloc((const std::ios_base *)((char *)v46 + *(_QWORD *)(*v46 - 24)));
    v47 = std::locale::use_facet((const std::locale *)&__p, &std::ctype<char>::id);
    v48 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v47->__vftable[2].~facet_0)(v47, 10);
    std::locale::~locale((std::locale *)&__p);
    std::ostream::put(v46, v48);
    std::ostream::flush(v46);
    if (*(_BYTE *)(a1 + 108))
    {
      v49 = sub_100054C60(&v62, (uint64_t)"    Rose board ID: ", 19);
      v50 = *(_QWORD *)(a1 + 104);
      if ((v50 & 0xFF00000000) == 0)
        sub_10000BA44();
      v51 = (_QWORD *)std::ostream::operator<<(v49, v50);
      std::ios_base::getloc((const std::ios_base *)((char *)v51 + *(_QWORD *)(*v51 - 24)));
      v52 = std::locale::use_facet((const std::locale *)&__p, &std::ctype<char>::id);
      v53 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v52->__vftable[2].~facet_0)(v52, 10);
      std::locale::~locale((std::locale *)&__p);
      std::ostream::put(v51, v53);
      std::ostream::flush(v51);
    }
    if (*(char *)(a1 + 95) < 0)
    {
      if (!*(_QWORD *)(a1 + 80))
        goto LABEL_38;
    }
    else if (!*(_BYTE *)(a1 + 95))
    {
      goto LABEL_38;
    }
    v54 = sub_100054C60(&v62, (uint64_t)"    Extra bytes in the Hello Response: ", 39);
    v55 = (const char *)(a1 + 72);
    if (*(char *)(a1 + 95) < 0)
      v55 = *(const char **)v55;
    v56 = strlen(v55);
    v57 = sub_100054C60(v54, (uint64_t)v55, v56);
    std::ios_base::getloc((const std::ios_base *)((char *)v57 + *(_QWORD *)(*v57 - 24)));
    v58 = std::locale::use_facet((const std::locale *)&__p, &std::ctype<char>::id);
    v59 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v58->__vftable[2].~facet_0)(v58, 10);
    std::locale::~locale((std::locale *)&__p);
    std::ostream::put(v57, v59);
    std::ostream::flush(v57);
  }
LABEL_38:
  std::stringbuf::str(v63);
  if (v64 < 0)
    operator delete((void *)v63[8]);
  std::streambuf::~streambuf(v63);
  return std::ios::~ios(&v65);
}

void sub_10038D2A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
  sub_100210AFC((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_10038D334(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  std::string *p_p;
  std::string::size_type size;
  std::string *v8;
  std::string __p;
  std::string v10;
  std::string v11;

  std::to_string(&v10, *(unsigned __int8 *)(a1 + 24));
  v4 = std::string::append(&v10, ".");
  v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v11.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v11.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&__p, *(unsigned __int8 *)(a1 + 25));
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v8 = std::string::append(&v11, (const std::string::value_type *)p_p, size);
  *a2 = *v8;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v10.__r_.__value_.__l.__data_);
}

void sub_10038D408(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10038D454(uint64_t a1)
{
  void *v2;

  v2 = *(void **)a1;
  if (v2)
  {
    *(_QWORD *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_10038D484(uint64_t a1)
{
  void *v2;

  v2 = *(void **)a1;
  if (v2)
  {
    *(_QWORD *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_10038D4B4(uint64_t a1)
{
  void *v2;

  v2 = *(void **)a1;
  if (v2)
  {
    *(_QWORD *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_10038D4EC(uint64_t a1)
{
  std::mutex *v2;

  v2 = (std::mutex *)(a1 + 48);
  std::mutex::lock((std::mutex *)(a1 + 48));
  *(_BYTE *)(a1 + 41) = 1;
  if (os_log_type_enabled((os_log_t)qword_10085EEF8, OS_LOG_TYPE_DEBUG))
    sub_1003F04C4();
  if (*(_BYTE *)(a1 + 24))
  {
    if (os_log_type_enabled((os_log_t)qword_10085EEF8, OS_LOG_TYPE_DEBUG))
      sub_1003F0454();
    sub_10038D5E4((std::string *)a1, (char *)a1, *(CFAbsoluteTime *)(a1 + 32));
  }
  else
  {
    sub_10038D9FC((std::string *)a1, (std::string *)a1, (std::string::size_type *)(a1 + 32));
    if (os_log_type_enabled((os_log_t)qword_10085EEF8, OS_LOG_TYPE_DEBUG))
      sub_1003F03E8();
  }
  std::mutex::unlock(v2);
}

void sub_10038D5D0(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10038D5E4(std::string *a1, char *a2, CFAbsoluteTime Current)
{
  size_t v6;
  size_t v7;
  char *v8;
  void *v9;
  void *v10;
  double *p_size;
  uint64_t v12;
  NSStringEncoding v13;
  void *v14;
  void *v15;
  id v16;
  double v17;
  id v18;
  void *v19;
  id v20;
  id v21;
  id v22;
  std::string *p_p;
  id v24;
  _BOOL4 v25;
  void *v27;
  void *v28;
  id v29;
  std::string __p;
  id v31;

  v6 = strlen(off_100853220[0]);
  v7 = v6;
  if (a2[23] < 0)
  {
    if (v6 != *((_QWORD *)a2 + 1))
      goto LABEL_9;
    if (v6 == -1)
      goto LABEL_45;
    v8 = *(char **)a2;
  }
  else
  {
    if (v6 != a2[23])
      goto LABEL_9;
    v8 = a2;
    if (v7 == -1)
LABEL_45:
      sub_10017EF98();
  }
  if (memcmp(v8, off_100853220[0], v7))
  {
LABEL_9:
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", off_100853260[0]));
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", off_100853268[0]));
    std::string::operator=(a1, (const std::string *)a2);
    a1[1].__r_.__value_.__s.__data_[0] = 1;
    if (Current == 0.0)
      Current = CFAbsoluteTimeGetCurrent();
    *(CFAbsoluteTime *)&a1[1].__r_.__value_.__l.__size_ = Current;
    p_size = (double *)&a1[1].__r_.__value_.__l.__size_;
    if (os_log_type_enabled((os_log_t)qword_10085EEF8, OS_LOG_TYPE_DEBUG))
      sub_1003F0680();
    if (!a1[1].__r_.__value_.__s.__data_[17])
    {
      if (os_log_type_enabled((os_log_t)qword_10085EEF8, OS_LOG_TYPE_DEBUG))
        sub_1003F0534();
      v12 = 1;
      goto LABEL_43;
    }
    if (a2[23] < 0)
    {
      if (!*((_QWORD *)a2 + 1))
      {
LABEL_23:
        a2 = off_100853248[0];
        v13 = +[NSString defaultCStringEncoding](NSString, "defaultCStringEncoding");
LABEL_24:
        v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithCString:encoding:](NSString, "stringWithCString:encoding:", a2, v13));
        v28 = v10;
        v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
        v16 = objc_alloc((Class)NSNumber);
        v17 = *p_size;
        *(float *)&v17 = *p_size;
        v18 = objc_msgSend(v16, "initWithFloat:", v17);
        objc_msgSend(v15, "setObject:forKey:", v14, v9);
        objc_msgSend(v15, "setObject:forKey:", v18, v10);
        v31 = 0;
        v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSPropertyListSerialization dataWithPropertyList:format:options:error:](NSPropertyListSerialization, "dataWithPropertyList:format:options:error:", v15, 200, 0, &v31));
        v20 = v31;
        v21 = v20;
        if (!v19 || v20)
        {
          if (os_log_type_enabled((os_log_t)qword_10085EEF8, OS_LOG_TYPE_DEBUG))
            sub_1003F0560();
          v12 = 0;
        }
        else
        {
          v27 = v9;
          sub_100004784();
          sub_100004814(off_100853270[0], &__p);
          v22 = objc_alloc((Class)NSString);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            p_p = &__p;
          else
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          v24 = objc_msgSend(v22, "initWithCString:encoding:", p_p, 4);
          v29 = 0;
          v12 = (uint64_t)objc_msgSend(v19, "writeToFile:options:error:", v24, 1073741825, &v29);
          v21 = v29;
          v25 = os_log_type_enabled((os_log_t)qword_10085EEF8, OS_LOG_TYPE_DEBUG);
          if ((v12 & 1) != 0)
          {
            if (v25)
              sub_1003F05C0();
            a1[1].__r_.__value_.__s.__data_[16] = 1;
          }
          else if (v25)
          {
            sub_1003F0620();
          }

          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          v9 = v27;
        }

        v10 = v28;
LABEL_43:

        return v12;
      }
      a2 = *(char **)a2;
    }
    else if (!a2[23])
    {
      goto LABEL_23;
    }
    v13 = +[NSString defaultCStringEncoding](NSString, "defaultCStringEncoding");
    goto LABEL_24;
  }
  return 1;
}

void sub_10038D968(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;

  if (a18 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

BOOL sub_10038D9FC(std::string *__str, std::string *this, std::string::size_type *a3)
{
  _BOOL8 v6;
  std::string *p_p;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  id v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  std::string::size_type v18;
  id v20;
  uint64_t v21;
  id v22;
  std::string __p;

  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    *this->__r_.__value_.__l.__data_ = 0;
    this->__r_.__value_.__l.__size_ = 0;
  }
  else
  {
    this->__r_.__value_.__s.__data_[0] = 0;
    *((_BYTE *)&this->__r_.__value_.__s + 23) = 0;
  }
  if (__str[1].__r_.__value_.__s.__data_[0])
  {
    std::string::operator=(this, __str);
    *a3 = __str[1].__r_.__value_.__l.__size_;
    if (os_log_type_enabled((os_log_t)qword_10085EEF8, OS_LOG_TYPE_DEBUG))
      sub_1003F08A0();
    return 1;
  }
  if (!__str[1].__r_.__value_.__s.__data_[17])
  {
    if (os_log_type_enabled((os_log_t)qword_10085EEF8, OS_LOG_TYPE_DEBUG))
      sub_1003F06EC();
    return 1;
  }
  sub_100004784();
  sub_100004814(off_100853270[0], &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithCString:encoding:](NSString, "stringWithCString:encoding:", p_p, 4));
  v22 = 0;
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithContentsOfFile:options:error:](NSData, "dataWithContentsOfFile:options:error:", v8, 0, &v22));
  v10 = v22;
  v11 = v10;
  if (!v9 || v10)
  {
    if (os_log_type_enabled((os_log_t)qword_10085EEF8, OS_LOG_TYPE_DEBUG))
      sub_1003F0718();
    v6 = 0;
  }
  else
  {
    v20 = 0;
    v21 = 0;
    v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSPropertyListSerialization propertyListWithData:options:format:error:](NSPropertyListSerialization, "propertyListWithData:options:format:error:", v9, 0, &v21, &v20));
    v13 = v20;
    v11 = v13;
    if (!v12 || v13)
    {
      if (os_log_type_enabled((os_log_t)qword_10085EEF8, OS_LOG_TYPE_DEBUG))
        sub_1003F0778();
      v6 = 0;
    }
    else
    {
      v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", off_100853260[0]));
      v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "objectForKey:", v14));

      if (v15)
      {
        v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", off_100853268[0]));
        v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "objectForKey:", v16));

        v6 = v17 != 0;
        if (v17)
        {
          std::string::assign(this, (const std::string::value_type *)objc_msgSend(objc_retainAutorelease(v15), "UTF8String"));
          objc_msgSend(v17, "doubleValue");
          *a3 = v18;
          __str[1].__r_.__value_.__s.__data_[16] = 1;
          if (os_log_type_enabled((os_log_t)qword_10085EEF8, OS_LOG_TYPE_DEBUG))
            sub_1003F0804();
        }
        else if (os_log_type_enabled((os_log_t)qword_10085EEF8, OS_LOG_TYPE_DEBUG))
        {
          sub_1003F0874();
        }

      }
      else
      {
        if (os_log_type_enabled((os_log_t)qword_10085EEF8, OS_LOG_TYPE_DEBUG))
          sub_1003F07D8();
        v6 = 0;
      }

    }
  }

  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);

  return v6;
}

void sub_10038DD3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;

  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_10038DDAC(uint64_t a1, char *a2, CFAbsoluteTime a3)
{
  std::mutex *v6;
  uint64_t v7;

  v6 = (std::mutex *)(a1 + 48);
  std::mutex::lock((std::mutex *)(a1 + 48));
  v7 = sub_10038D5E4((std::string *)a1, a2, a3);
  std::mutex::unlock(v6);
  return v7;
}

void sub_10038DE0C(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

BOOL sub_10038DE20(uint64_t a1, std::string *a2, std::string::size_type *a3)
{
  std::mutex *v6;
  _BOOL8 v7;

  v6 = (std::mutex *)(a1 + 48);
  std::mutex::lock((std::mutex *)(a1 + 48));
  v7 = sub_10038D9FC((std::string *)a1, a2, a3);
  std::mutex::unlock(v6);
  return v7;
}

void sub_10038DE78(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_10038DE8C@<X0>(unsigned int a1@<W0>, _QWORD *a2@<X8>)
{
  char *v2;

  if (a1 > 2)
    v2 = "";
  else
    v2 = off_100817890[(char)a1];
  return sub_10000BF04(a2, v2);
}

_QWORD *sub_10038DEBC@<X0>(char a1@<W0>, _QWORD *a2@<X8>)
{
  char *v2;

  if ((a1 + 1) > 8u)
    v2 = "";
  else
    v2 = (char *)*((_QWORD *)&off_1008178A8 + (char)(a1 + 1));
  return sub_10000BF04(a2, v2);
}

_QWORD *sub_10038DEF4@<X0>(char a1@<W0>, _QWORD *a2@<X8>)
{
  char *v2;

  if ((a1 + 2) > 5u)
    v2 = "";
  else
    v2 = (&off_1008178F0)[(char)(a1 + 2)];
  return sub_10000BF04(a2, v2);
}

_QWORD *sub_10038DF2C@<X0>(char a1@<W0>, _QWORD *a2@<X8>)
{
  char *v2;

  if ((a1 + 2) > 7u)
    v2 = "";
  else
    v2 = (&off_100817920)[(char)(a1 + 2)];
  return sub_10000BF04(a2, v2);
}

uint64_t sub_10038DF64(uint64_t a1)
{
  *(_WORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 48) = 850045863;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_DWORD *)(a1 + 144) = 1065353216;
  *(_QWORD *)(a1 + 136) = 0;
  sub_10038E03C(a1 + 152);
  if (qword_10085EF78 != -1)
    dispatch_once(&qword_10085EF78, &stru_1008177B0);
  *(_BYTE *)(a1 + 216) = byte_10085EF70;
  sub_10038F204();
  return a1;
}

void sub_10038E010(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_10038F7C4(v2);
  sub_1001D8F08(v1 + 112);
  sub_10038F800(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10038E03C@<X0>(uint64_t a1@<X8>)
{
  int v2;
  int v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t *v28;
  int v29;
  __int128 *v30;
  __int128 *v31;
  uint64_t v32;
  _BYTE v33[40];
  char v34;
  _BYTE v35[40];
  char v36;
  _BYTE v37[32];
  int v38;
  std::string __str;
  __int128 v40;

  v2 = *((_DWORD *)sub_100004784() + 144);
  v3 = sub_10038F83C();
  memset(v37, 0, sizeof(v37));
  v38 = 1065353216;
  if (v2 <= 99)
  {
    switch(v2)
    {
      case 0:
        sub_1003A3B28(0, v3, 0, (uint64_t)&v30);
        v29 = 0;
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v29;
        v23 = sub_100392350((uint64_t)v37, &v29, (uint64_t)&unk_100472CF8, &__str);
        sub_10038FAB0((uint64_t)(v23 + 3), (uint64_t *)&v30);
        sub_10038FAF8((uint64_t)&v30);
        sub_1003A3B28(0, v3, 1u, (uint64_t)&v30);
        v29 = 1;
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v29;
        v24 = sub_100392350((uint64_t)v37, &v29, (uint64_t)&unk_100472CF8, &__str);
        sub_10038FAB0((uint64_t)(v24 + 3), (uint64_t *)&v30);
        sub_10038FAF8((uint64_t)&v30);
        v30 = 0;
        v31 = 0;
        v32 = 0;
        sub_10000BF04(&__str, "A2183");
        sub_10039261C((uint64_t)&v30, &__str, &v40, 1uLL);
        goto LABEL_94;
      case 1:
        sub_1003A3B28(1, v3, 0, (uint64_t)&v30);
        v29 = 0;
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v29;
        v25 = sub_100392350((uint64_t)v37, &v29, (uint64_t)&unk_100472CF8, &__str);
        sub_10038FAB0((uint64_t)(v25 + 3), (uint64_t *)&v30);
        sub_10038FAF8((uint64_t)&v30);
        sub_1003A3B28(1, v3, 2u, (uint64_t)&v30);
        v29 = 2;
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v29;
        v26 = sub_100392350((uint64_t)v37, &v29, (uint64_t)&unk_100472CF8, &__str);
        sub_10038FAB0((uint64_t)(v26 + 3), (uint64_t *)&v30);
        sub_10038FAF8((uint64_t)&v30);
        v30 = 0;
        v31 = 0;
        v32 = 0;
        sub_10000BF04(&__str, "A2184");
        sub_10039261C((uint64_t)&v30, &__str, &v40, 1uLL);
        goto LABEL_94;
      case 2:
        sub_1003A3B28(2, v3, 0, (uint64_t)&v30);
        v29 = 0;
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v29;
        v27 = sub_100392350((uint64_t)v37, &v29, (uint64_t)&unk_100472CF8, &__str);
        sub_10038FAB0((uint64_t)(v27 + 3), (uint64_t *)&v30);
        sub_10038FAF8((uint64_t)&v30);
        sub_1003A3B28(2, v3, 3u, (uint64_t)&v30);
        v29 = 3;
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v29;
        v28 = sub_100392350((uint64_t)v37, &v29, (uint64_t)&unk_100472CF8, &__str);
        sub_10038FAB0((uint64_t)(v28 + 3), (uint64_t *)&v30);
        sub_10038FAF8((uint64_t)&v30);
        v30 = 0;
        v31 = 0;
        v32 = 0;
        sub_10000BF04(&__str, "A2180");
        sub_10039261C((uint64_t)&v30, &__str, &v40, 1uLL);
LABEL_94:
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        goto LABEL_90;
      case 3:
      case 4:
      case 5:
      case 6:
        sub_1003A3B28(v2, v3, 0, (uint64_t)&v30);
        v29 = 0;
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v29;
        v6 = sub_100392350((uint64_t)v37, &v29, (uint64_t)&unk_100472CF8, &__str);
        sub_100391D7C((uint64_t)(v6 + 3), (uint64_t *)&v30);
        sub_100391E70((uint64_t)(v6 + 8), (uint64_t)v33);
        sub_100391E70((uint64_t)(v6 + 14), (uint64_t)v35);
        if (v36)
          sub_1001D8E8C((uint64_t)v35);
        if (v34)
          sub_1001D8E8C((uint64_t)v33);
        sub_1001D8E8C((uint64_t)&v30);
        sub_1003A3B28(v2, v3, 4u, (uint64_t)&v30);
        v29 = 4;
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v29;
        v7 = sub_100392350((uint64_t)v37, &v29, (uint64_t)&unk_100472CF8, &__str);
        sub_100391D7C((uint64_t)(v7 + 3), (uint64_t *)&v30);
        sub_100391E70((uint64_t)(v7 + 8), (uint64_t)v33);
        sub_100391E70((uint64_t)(v7 + 14), (uint64_t)v35);
        if (v36)
          sub_1001D8E8C((uint64_t)v35);
        if (v34)
          sub_1001D8E8C((uint64_t)v33);
        sub_1001D8E8C((uint64_t)&v30);
        sub_1003A3B28(v2, v3, 5u, (uint64_t)&v30);
        v29 = 5;
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v29;
        v8 = sub_100392350((uint64_t)v37, &v29, (uint64_t)&unk_100472CF8, &__str);
        sub_100391D7C((uint64_t)(v8 + 3), (uint64_t *)&v30);
        sub_100391E70((uint64_t)(v8 + 8), (uint64_t)v33);
        sub_100391E70((uint64_t)(v8 + 14), (uint64_t)v35);
        if (v36)
          sub_1001D8E8C((uint64_t)v35);
        if (v34)
          sub_1001D8E8C((uint64_t)v33);
        sub_1001D8E8C((uint64_t)&v30);
        sub_1003A3B28(v2, v3, 6u, (uint64_t)&v30);
        v29 = 6;
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v29;
        v9 = sub_100392350((uint64_t)v37, &v29, (uint64_t)&unk_100472CF8, &__str);
        sub_100391D7C((uint64_t)(v9 + 3), (uint64_t *)&v30);
        sub_100391E70((uint64_t)(v9 + 8), (uint64_t)v33);
        sub_100391E70((uint64_t)(v9 + 14), (uint64_t)v35);
        if (v36)
          sub_1001D8E8C((uint64_t)v35);
        if (v34)
          sub_1001D8E8C((uint64_t)v33);
        sub_1001D8E8C((uint64_t)&v30);
        sub_1003A3B28(v2, v3, 7u, (uint64_t)&v30);
        v29 = 7;
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v29;
        v10 = sub_100392350((uint64_t)v37, &v29, (uint64_t)&unk_100472CF8, &__str);
        sub_100391D7C((uint64_t)(v10 + 3), (uint64_t *)&v30);
        sub_100391E70((uint64_t)(v10 + 8), (uint64_t)v33);
        sub_100391E70((uint64_t)(v10 + 14), (uint64_t)v35);
        if (v36)
          sub_1001D8E8C((uint64_t)v35);
        if (v34)
          sub_1001D8E8C((uint64_t)v33);
        sub_1001D8E8C((uint64_t)&v30);
        sub_1003A3B28(v2, v3, 8u, (uint64_t)&v30);
        v29 = 8;
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v29;
        v11 = sub_100392350((uint64_t)v37, &v29, (uint64_t)&unk_100472CF8, &__str);
        sub_100391D7C((uint64_t)(v11 + 3), (uint64_t *)&v30);
        sub_100391E70((uint64_t)(v11 + 8), (uint64_t)v33);
        sub_100391E70((uint64_t)(v11 + 14), (uint64_t)v35);
        if (v36)
          sub_1001D8E8C((uint64_t)v35);
        if (v34)
          sub_1001D8E8C((uint64_t)v33);
        sub_1001D8E8C((uint64_t)&v30);
        sub_1003A3B28(v2, v3, 9u, (uint64_t)&v30);
        v29 = 9;
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v29;
        v12 = sub_100392350((uint64_t)v37, &v29, (uint64_t)&unk_100472CF8, &__str);
        sub_100391D7C((uint64_t)(v12 + 3), (uint64_t *)&v30);
        sub_100391E70((uint64_t)(v12 + 8), (uint64_t)v33);
        sub_100391E70((uint64_t)(v12 + 14), (uint64_t)v35);
        if (v36)
          sub_1001D8E8C((uint64_t)v35);
        if (v34)
          sub_1001D8E8C((uint64_t)v33);
        sub_1001D8E8C((uint64_t)&v30);
        sub_1003A3B28(v2, v3, 0xAu, (uint64_t)&v30);
        v29 = 10;
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v29;
        v13 = sub_100392350((uint64_t)v37, &v29, (uint64_t)&unk_100472CF8, &__str);
        sub_100391D7C((uint64_t)(v13 + 3), (uint64_t *)&v30);
        sub_100391E70((uint64_t)(v13 + 8), (uint64_t)v33);
        sub_100391E70((uint64_t)(v13 + 14), (uint64_t)v35);
        if (v36)
          sub_1001D8E8C((uint64_t)v35);
        if (v34)
          sub_1001D8E8C((uint64_t)v33);
        goto LABEL_76;
      case 7:
      case 8:
      case 9:
      case 10:
        sub_1003A3B28(v2, v3, 0, (uint64_t)&v30);
        v29 = 0;
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v29;
        v14 = sub_100392350((uint64_t)v37, &v29, (uint64_t)&unk_100472CF8, &__str);
        sub_100391D7C((uint64_t)(v14 + 3), (uint64_t *)&v30);
        sub_100391E70((uint64_t)(v14 + 8), (uint64_t)v33);
        sub_100391E70((uint64_t)(v14 + 14), (uint64_t)v35);
        if (v36)
          sub_1001D8E8C((uint64_t)v35);
        if (v34)
          sub_1001D8E8C((uint64_t)v33);
        sub_1001D8E8C((uint64_t)&v30);
        sub_1003A3B28(v2, v3, 0xBu, (uint64_t)&v30);
        v29 = 11;
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v29;
        v15 = sub_100392350((uint64_t)v37, &v29, (uint64_t)&unk_100472CF8, &__str);
        sub_100391D7C((uint64_t)(v15 + 3), (uint64_t *)&v30);
        sub_100391E70((uint64_t)(v15 + 8), (uint64_t)v33);
        sub_100391E70((uint64_t)(v15 + 14), (uint64_t)v35);
        if (v36)
          sub_1001D8E8C((uint64_t)v35);
        if (v34)
          sub_1001D8E8C((uint64_t)v33);
        sub_1001D8E8C((uint64_t)&v30);
        sub_1003A3B28(v2, v3, 0xCu, (uint64_t)&v30);
        v29 = 12;
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v29;
        v16 = sub_100392350((uint64_t)v37, &v29, (uint64_t)&unk_100472CF8, &__str);
        sub_100391D7C((uint64_t)(v16 + 3), (uint64_t *)&v30);
        sub_100391E70((uint64_t)(v16 + 8), (uint64_t)v33);
        sub_100391E70((uint64_t)(v16 + 14), (uint64_t)v35);
        if (v36)
          sub_1001D8E8C((uint64_t)v35);
        if (v34)
          sub_1001D8E8C((uint64_t)v33);
        sub_1001D8E8C((uint64_t)&v30);
        sub_1003A3B28(v2, v3, 0xDu, (uint64_t)&v30);
        v29 = 13;
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v29;
        v17 = sub_100392350((uint64_t)v37, &v29, (uint64_t)&unk_100472CF8, &__str);
        sub_100391D7C((uint64_t)(v17 + 3), (uint64_t *)&v30);
        sub_100391E70((uint64_t)(v17 + 8), (uint64_t)v33);
        sub_100391E70((uint64_t)(v17 + 14), (uint64_t)v35);
        if (v36)
          sub_1001D8E8C((uint64_t)v35);
        if (v34)
          sub_1001D8E8C((uint64_t)v33);
        sub_1001D8E8C((uint64_t)&v30);
        sub_1003A3B28(v2, v3, 7u, (uint64_t)&v30);
        v29 = 7;
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v29;
        v18 = sub_100392350((uint64_t)v37, &v29, (uint64_t)&unk_100472CF8, &__str);
        sub_100391D7C((uint64_t)(v18 + 3), (uint64_t *)&v30);
        sub_100391E70((uint64_t)(v18 + 8), (uint64_t)v33);
        sub_100391E70((uint64_t)(v18 + 14), (uint64_t)v35);
        if (v36)
          sub_1001D8E8C((uint64_t)v35);
        if (v34)
          sub_1001D8E8C((uint64_t)v33);
        sub_1001D8E8C((uint64_t)&v30);
        sub_1003A3B28(v2, v3, 8u, (uint64_t)&v30);
        v29 = 8;
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v29;
        v19 = sub_100392350((uint64_t)v37, &v29, (uint64_t)&unk_100472CF8, &__str);
        sub_100391D7C((uint64_t)(v19 + 3), (uint64_t *)&v30);
        sub_100391E70((uint64_t)(v19 + 8), (uint64_t)v33);
        sub_100391E70((uint64_t)(v19 + 14), (uint64_t)v35);
        if (v36)
          sub_1001D8E8C((uint64_t)v35);
        if (v34)
          sub_1001D8E8C((uint64_t)v33);
        sub_1001D8E8C((uint64_t)&v30);
        sub_1003A3B28(v2, v3, 9u, (uint64_t)&v30);
        v29 = 9;
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v29;
        v20 = sub_100392350((uint64_t)v37, &v29, (uint64_t)&unk_100472CF8, &__str);
        sub_100391D7C((uint64_t)(v20 + 3), (uint64_t *)&v30);
        sub_100391E70((uint64_t)(v20 + 8), (uint64_t)v33);
        sub_100391E70((uint64_t)(v20 + 14), (uint64_t)v35);
        if (v36)
          sub_1001D8E8C((uint64_t)v35);
        if (v34)
          sub_1001D8E8C((uint64_t)v33);
        goto LABEL_76;
      case 11:
      case 12:
      case 13:
      case 14:
      case 15:
      case 16:
      case 17:
      case 18:
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
        sub_1003A3B28(v2, v3, 0, (uint64_t)&v30);
        v29 = 0;
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v29;
        v5 = sub_100392350((uint64_t)v37, &v29, (uint64_t)&unk_100472CF8, &__str);
        sub_100391D7C((uint64_t)(v5 + 3), (uint64_t *)&v30);
        sub_100391E70((uint64_t)(v5 + 8), (uint64_t)v33);
        sub_100391E70((uint64_t)(v5 + 14), (uint64_t)v35);
        if (v36)
          sub_1001D8E8C((uint64_t)v35);
        if (v34)
          sub_1001D8E8C((uint64_t)v33);
LABEL_76:
        sub_1001D8E8C((uint64_t)&v30);
        sub_1003A3B28(v2, v3, 0x3E7u, (uint64_t)&v30);
        v29 = 999;
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v29;
        v21 = sub_100392350((uint64_t)v37, &v29, (uint64_t)&unk_100472CF8, &__str);
        sub_100391D7C((uint64_t)(v21 + 3), (uint64_t *)&v30);
        sub_100391E70((uint64_t)(v21 + 8), (uint64_t)v33);
        sub_100391E70((uint64_t)(v21 + 14), (uint64_t)v35);
        break;
      default:
        goto LABEL_82;
    }
  }
  else
  {
    if (v2 > 199)
    {
      if ((v2 - 200) >= 2 && v2 != 997 && v2 != 999)
        goto LABEL_82;
    }
    else if ((v2 - 100) >= 0x16)
    {
      goto LABEL_82;
    }
    sub_1003A3B28(v2, v3, 0, (uint64_t)&v30);
    v29 = 0;
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v29;
    v4 = sub_100392350((uint64_t)v37, &v29, (uint64_t)&unk_100472CF8, &__str);
    sub_100391D7C((uint64_t)(v4 + 3), (uint64_t *)&v30);
    sub_100391E70((uint64_t)(v4 + 8), (uint64_t)v33);
    sub_100391E70((uint64_t)(v4 + 14), (uint64_t)v35);
  }
  if (v36)
    sub_1001D8E8C((uint64_t)v35);
  if (v34)
    sub_1001D8E8C((uint64_t)v33);
  sub_1001D8E8C((uint64_t)&v30);
LABEL_82:
  v30 = 0;
  v31 = 0;
  v32 = 0;
  if (v2 > 199)
  {
    if ((v2 - 200) >= 2 && v2 != 997 && v2 != 999)
      goto LABEL_90;
LABEL_89:
    sub_10039261C((uint64_t)&v30, 0, 0, 0);
    goto LABEL_90;
  }
  if ((v2 - 100) < 0x16 || (v2 - 3) < 0x15)
    goto LABEL_89;
LABEL_90:
  sub_100392824(a1, (uint64_t)v37);
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  sub_1003936C4((char *)(a1 + 40), v30, v31, 0xAAAAAAAAAAAAAAABLL * (((char *)v31 - (char *)v30) >> 3));
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v30;
  sub_100161C00((void ***)&__str);
  return sub_1001D8DD8((uint64_t)v37);
}

void sub_10038F018(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  uint64_t v27;
  uint64_t v28;

  if (*(char *)(v28 - 73) < 0)
    operator delete(*(void **)(v27 + 48));
  *(_QWORD *)(v27 + 48) = &a10;
  sub_100161C00((void ***)(v28 - 96));
  sub_1001D8DD8((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void sub_10038F204()
{
  _BOOL4 v0;
  _BOOL4 v1;
  _BOOL4 v2;
  _BOOL4 v3;
  _BOOL4 v4;
  _BOOL4 v5;
  _BOOL4 v6;
  _BOOL4 v7;
  _BOOL4 v8;
  _BOOL4 v9;
  _BOOL4 v10;
  _BOOL4 v11;
  _BOOL4 v12;
  _BOOL4 v13;
  _BOOL4 v14;
  _BOOL4 v15;
  _BOOL4 v16;
  _BOOL4 v17;
  _BOOL4 v18;
  _BOOL4 v19;
  _BOOL4 v20;
  _BOOL4 v21;
  _BOOL4 v22;
  _BOOL4 v23;
  _BOOL4 v24;
  _BOOL4 v25;
  _BOOL4 v26;
  _BOOL4 v27;
  _BOOL4 v28;
  _BOOL4 v29;
  uint64_t v30;

  sub_100391CCC((uint64_t)off_100853258[0]);
  LODWORD(v30) = 0;
  v0 = sub_100391644((uint64_t)off_100853278[0], &v30);
  v1 = os_log_type_enabled((os_log_t)qword_10085EEF8, OS_LOG_TYPE_DEBUG);
  if (v0)
  {
    if (v1)
      sub_1003F090C();
  }
  else if (v1)
  {
    sub_1003F096C();
  }
  v30 = 0;
  v2 = sub_1003915AC((uint64_t)off_100853280[0], (double *)&v30);
  v3 = os_log_type_enabled((os_log_t)qword_10085EEF8, OS_LOG_TYPE_DEBUG);
  if (v2)
  {
    if (v3)
      sub_1003F09CC();
  }
  else if (v3)
  {
    sub_1003F096C();
  }
  v30 = 0;
  v4 = sub_1003915AC((uint64_t)off_100853288[0], (double *)&v30);
  v5 = os_log_type_enabled((os_log_t)qword_10085EEF8, OS_LOG_TYPE_DEBUG);
  if (v4)
  {
    if (v5)
      sub_1003F09CC();
  }
  else if (v5)
  {
    sub_1003F096C();
  }
  v30 = 0;
  v6 = sub_1003915AC((uint64_t)off_100853290[0], (double *)&v30);
  v7 = os_log_type_enabled((os_log_t)qword_10085EEF8, OS_LOG_TYPE_DEBUG);
  if (v6)
  {
    if (v7)
      sub_1003F09CC();
  }
  else if (v7)
  {
    sub_1003F096C();
  }
  sub_100391CCC((uint64_t)off_100853298[0]);
  LODWORD(v30) = 0;
  v8 = sub_100391644((uint64_t)off_1008532A0[0], &v30);
  v9 = os_log_type_enabled((os_log_t)qword_10085EEF8, OS_LOG_TYPE_DEBUG);
  if (v8)
  {
    if (v9)
      sub_1003F090C();
  }
  else if (v9)
  {
    sub_1003F096C();
  }
  LODWORD(v30) = 0;
  v10 = sub_100391644((uint64_t)off_1008532A8[0], &v30);
  v11 = os_log_type_enabled((os_log_t)qword_10085EEF8, OS_LOG_TYPE_DEBUG);
  if (v10)
  {
    if (v11)
      sub_1003F090C();
  }
  else if (v11)
  {
    sub_1003F096C();
  }
  LODWORD(v30) = 0;
  v12 = sub_100391644((uint64_t)off_1008532B0[0], &v30);
  v13 = os_log_type_enabled((os_log_t)qword_10085EEF8, OS_LOG_TYPE_DEBUG);
  if (v12)
  {
    if (v13)
      sub_1003F090C();
  }
  else if (v13)
  {
    sub_1003F096C();
  }
  sub_100391CCC((uint64_t)off_1008532B8[0]);
  LODWORD(v30) = 0;
  v14 = sub_100391644((uint64_t)off_1008532C8[0], &v30);
  v15 = os_log_type_enabled((os_log_t)qword_10085EEF8, OS_LOG_TYPE_DEBUG);
  if (v14)
  {
    if (v15)
      sub_1003F090C();
  }
  else if (v15)
  {
    sub_1003F096C();
  }
  sub_100391CCC((uint64_t)off_1008532C0[0]);
  LODWORD(v30) = 0;
  v16 = sub_100391644((uint64_t)off_1008532D0[0], &v30);
  v17 = os_log_type_enabled((os_log_t)qword_10085EEF8, OS_LOG_TYPE_DEBUG);
  if (v16)
  {
    if (v17)
      sub_1003F090C();
  }
  else if (v17)
  {
    sub_1003F096C();
  }
  LODWORD(v30) = 0;
  v18 = sub_100391644((uint64_t)off_1008532D8[0], &v30);
  v19 = os_log_type_enabled((os_log_t)qword_10085EEF8, OS_LOG_TYPE_DEBUG);
  if (v18)
  {
    if (v19)
      sub_1003F090C();
  }
  else if (v19)
  {
    sub_1003F096C();
  }
  LODWORD(v30) = 0;
  v20 = sub_100391644((uint64_t)off_1008532E0[0], &v30);
  v21 = os_log_type_enabled((os_log_t)qword_10085EEF8, OS_LOG_TYPE_DEBUG);
  if (v20)
  {
    if (v21)
      sub_1003F090C();
  }
  else if (v21)
  {
    sub_1003F096C();
  }
  LODWORD(v30) = 0;
  v22 = sub_100391644((uint64_t)off_1008532E8[0], &v30);
  v23 = os_log_type_enabled((os_log_t)qword_10085EEF8, OS_LOG_TYPE_DEBUG);
  if (v22)
  {
    if (v23)
      sub_1003F090C();
  }
  else if (v23)
  {
    sub_1003F096C();
  }
  LODWORD(v30) = 0;
  v24 = sub_100391644((uint64_t)off_1008532F0[0], &v30);
  v25 = os_log_type_enabled((os_log_t)qword_10085EEF8, OS_LOG_TYPE_DEBUG);
  if (v24)
  {
    if (v25)
      sub_1003F090C();
  }
  else if (v25)
  {
    sub_1003F096C();
  }
  LODWORD(v30) = 0;
  v26 = sub_100391644((uint64_t)off_1008532F8[0], &v30);
  v27 = os_log_type_enabled((os_log_t)qword_10085EEF8, OS_LOG_TYPE_DEBUG);
  if (v26)
  {
    if (v27)
      sub_1003F090C();
  }
  else if (v27)
  {
    sub_1003F096C();
  }
  LODWORD(v30) = 0;
  v28 = sub_100391644((uint64_t)off_100853308, &v30);
  v29 = os_log_type_enabled((os_log_t)qword_10085EEF8, OS_LOG_TYPE_DEBUG);
  if (v28)
  {
    if (v29)
      sub_1003F090C();
  }
  else if (v29)
  {
    sub_1003F096C();
  }
}

uint64_t sub_10038F7C4(uint64_t a1)
{
  void **v3;

  v3 = (void **)(a1 + 40);
  sub_100161C00(&v3);
  return sub_1001D8DD8(a1);
}

uint64_t sub_10038F800(uint64_t a1)
{
  std::mutex::~mutex((std::mutex *)(a1 + 48));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_10038F83C()
{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  unsigned int v4;
  NSObject *v5;
  _BOOL4 v6;
  uint64_t v7;
  __CFString *v8;
  id v9;
  unsigned __int8 *v10;
  NSObject *v11;
  void **v12;
  void *__p[2];
  char v15;
  uint8_t buf[8];
  char v17;
  uint8_t v18[4];
  void **v19;

  v0 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v0, "objectForKey:", CFSTR("RegulatoryTestBasebandSupportsFR2Override")));
  if (v2 && (v3 = objc_opt_class(NSNumber, v1), (objc_opt_isKindOfClass(v2, v3) & 1) != 0))
  {
    v4 = objc_msgSend(v2, "BOOLValue");
    v5 = qword_10085EEF8;
    v6 = os_log_type_enabled((os_log_t)qword_10085EEF8, OS_LOG_TYPE_DEFAULT);
    if (v4)
    {
      if (v6)
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "regulatory,comp,getDeviceBasebandType,set by default,SUPPORTS_5G_NR_FR2", buf, 2u);
      }
      v7 = 0;
    }
    else
    {
      if (v6)
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "regulatory,comp,getDeviceBasebandType,set by default,DOES_NOT_SUPPORT_5G_NR_FR2", buf, 2u);
      }
      v7 = 1;
    }
  }
  else
  {
    v8 = sub_1001FDB7C();
    v9 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(v8));
    sub_10000BF04(buf, (char *)objc_msgSend(v9, "UTF8String"));

    v10 = sub_100392250(qword_10085FD58, buf);
    if (v10)
      v7 = *((unsigned int *)v10 + 10);
    else
      v7 = 2;
    v11 = (id)qword_10085EEF8;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      sub_10000BF04(__p, (&off_100817960)[(int)v7]);
      v12 = v15 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)v18 = 136315138;
      v19 = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "regulatory,comp,getDeviceBasebandType,%s", v18, 0xCu);
      if (v15 < 0)
        operator delete(__p[0]);
    }

    if (v17 < 0)
      operator delete(*(void **)buf);
  }

  return v7;
}

void sub_10038FA58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  void *v18;
  void *v19;
  void *v20;

  if (a18 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

uint64_t sub_10038FAB0(uint64_t a1, uint64_t *a2)
{
  sub_100391D7C(a1, a2);
  sub_100391E70(a1 + 40, (uint64_t)(a2 + 5));
  sub_100391E70(a1 + 88, (uint64_t)(a2 + 11));
  return a1;
}

uint64_t sub_10038FAF8(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 128))
    sub_1001D8E8C(a1 + 88);
  if (*(_BYTE *)(a1 + 80))
    sub_1001D8E8C(a1 + 40);
  return sub_1001D8E8C(a1);
}

BOOL sub_10038FB38(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  char *v5;
  uint64_t v6;
  unsigned __int8 *v7;
  NSObject *v8;
  uint64_t *v9;
  NSObject *v10;
  _BOOL4 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  NSObject *v19;
  _BYTE __p[12];
  char v22;

  v5 = (char *)a2 + 23;
  if (*((char *)a2 + 23) < 0)
  {
    v6 = a2[1];
    if (!v6)
      return v6 != 0;
  }
  else
  {
    v6 = *((unsigned __int8 *)a2 + 23);
    if (!*((_BYTE *)a2 + 23))
      return v6 != 0;
  }
  v7 = sub_100004578(qword_10085FD30, (unsigned __int8 *)a2);
  if (!v7)
  {
    v8 = qword_10085EEF8;
    if (os_log_type_enabled((os_log_t)qword_10085EEF8, OS_LOG_TYPE_DEFAULT))
    {
      v9 = a2;
      if (*v5 < 0)
        v9 = (uint64_t *)*a2;
      *(_DWORD *)__p = 136315138;
      *(_QWORD *)&__p[4] = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "regulatory,comp,getRegulatoryNBCountryParams,cantFind,country,%s", __p, 0xCu);
    }
    sub_10000BF04(__p, off_100853218[0]);
    v7 = sub_100004578(qword_10085FD30, __p);
    if (v22 < 0)
      operator delete(*(void **)__p);
    v10 = qword_10085EEF8;
    v11 = os_log_type_enabled((os_log_t)qword_10085EEF8, OS_LOG_TYPE_DEFAULT);
    if (!v7)
      sub_1003F0B1C(v11, v10, v12, v13, v14, v15, v16, v17);
    if (v11)
    {
      v18 = a2;
      if (*v5 < 0)
        v18 = (uint64_t *)*a2;
      *(_DWORD *)__p = 136315138;
      *(_QWORD *)&__p[4] = v18;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "regulatory,comp,getRegulatoryNBCountryParams,cantFind,country,%s,setting it to unknown.", __p, 0xCu);
    }
    std::string::assign((std::string *)a2, off_100853218[0]);
  }
  v19 = qword_10085EEF8;
  if (os_log_type_enabled((os_log_t)qword_10085EEF8, OS_LOG_TYPE_DEBUG))
    sub_1003F0B64(v5, a2, v19);
  std::string::operator=((std::string *)a3, (const std::string *)(v7 + 40));
  std::string::operator=((std::string *)(a3 + 24), (const std::string *)(v7 + 64));
  *(_WORD *)(a3 + 48) = *((_WORD *)v7 + 44);
  return v6 != 0;
}

void sub_10038FD2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_10038FD50(uint64_t a1, int a2, int a3, int a4)
{
  _QWORD *v6;
  uint64_t *v7;
  NSObject *v8;
  void **v9;
  uint64_t **v10;
  NSObject *v12;
  int v13;
  void **v14;
  void **v15;
  void *__p[2];
  char v17;
  unsigned int v18;
  unsigned __int8 v19;
  uint8_t buf[4];
  int v21;
  __int16 v22;
  int v23;
  __int16 v24;
  void **v25;

  v19 = a2;
  v18 = (a3 << 31 >> 31) & a4;
  v6 = (_QWORD *)(a1 + 152);
  v7 = sub_10002A4AC((_QWORD *)(a1 + 152), (int *)&v18);
  if (!v7)
  {
    v8 = (id)qword_10085EEF8;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      sub_1003610EC(v18);
      v9 = v17 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 67109634;
      v21 = a2;
      v22 = 1024;
      v23 = a3;
      v24 = 2080;
      v25 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "regulatory,comp,getTx_UWB_PowerTableFromIsoGroup,accessory regulatory params not found,isoGroup,%d,flags,%d,accessory,%s", buf, 0x18u);
      if (v17 < 0)
        operator delete(__p[0]);
    }

    v18 = 0;
    v7 = sub_10002A4AC(v6, (int *)&v18);
    if (!v7)
    {
      v12 = (id)qword_10085EEF8;
      if (!os_log_type_enabled(v12, OS_LOG_TYPE_FAULT))
        goto LABEL_14;
      sub_1003610EC(v18);
      v15 = v17 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 67109634;
      v21 = a2;
      v22 = 1024;
      v23 = a3;
      v24 = 2080;
      v25 = v15;
      _os_log_fault_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_FAULT, "regulatory,comp,getTx_UWB_PowerTableFromIsoGroup,NO_ACCESSORY regulatory params also not found,isoGroup,%d,flags,%d,accessory,%s", buf, 0x18u);
      if ((v17 & 0x80000000) == 0)
        goto LABEL_14;
      goto LABEL_24;
    }
  }
  v10 = sub_100393804(v7 + 3, &v19);
  if (v10)
    return (uint64_t *)(v10 + 3);
  v12 = (id)qword_10085EEF8;
  if (os_log_type_enabled(v12, OS_LOG_TYPE_FAULT))
  {
    v13 = v19;
    sub_1003610EC(v18);
    v14 = v17 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 67109634;
    v21 = v13;
    v22 = 1024;
    v23 = a3;
    v24 = 2080;
    v25 = v14;
    _os_log_fault_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_FAULT, "regulatory,comp,getTx_UWB_PowerTableFromIsoGroup,iso table group not found,isoGroup,%d,flags,%d,accessory,%s", buf, 0x18u);
    if (v17 < 0)
LABEL_24:
      operator delete(__p[0]);
  }
LABEL_14:

  return &qword_10085EF00;
}

void sub_10038FFEC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t *sub_10039000C(uint64_t a1, int a2, int a3, int a4)
{
  _QWORD *v6;
  uint64_t *v7;
  NSObject *v8;
  void **v9;
  uint64_t **v10;
  NSObject *v12;
  int v13;
  void **v14;
  void **v15;
  void *__p[2];
  char v17;
  unsigned int v18;
  unsigned __int8 v19;
  uint8_t buf[4];
  int v21;
  __int16 v22;
  int v23;
  __int16 v24;
  void **v25;

  v19 = a2;
  v18 = (a3 << 31 >> 31) & a4;
  v6 = (_QWORD *)(a1 + 152);
  v7 = sub_10002A4AC((_QWORD *)(a1 + 152), (int *)&v18);
  if (!v7)
  {
    v8 = (id)qword_10085EEF8;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      sub_1003610EC(v18);
      v9 = v17 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 67109634;
      v21 = a2;
      v22 = 1024;
      v23 = a3;
      v24 = 2080;
      v25 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "regulatory,comp,getTx_NB_SAR_PowerTableFromIsoGroup,accessory regulatory params not found,isoGroup,%d,flags,%d,accessory,%s", buf, 0x18u);
      if (v17 < 0)
        operator delete(__p[0]);
    }

    v18 = 0;
    v7 = sub_10002A4AC(v6, (int *)&v18);
    if (!v7)
    {
      v12 = (id)qword_10085EEF8;
      if (!os_log_type_enabled(v12, OS_LOG_TYPE_FAULT))
        goto LABEL_16;
      sub_1003610EC(v18);
      v15 = v17 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 67109634;
      v21 = a2;
      v22 = 1024;
      v23 = a3;
      v24 = 2080;
      v25 = v15;
      _os_log_fault_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_FAULT, "regulatory,comp,getTx_NB_SAR_PowerTableFromIsoGroup,NO_ACCESSORY regulatory params also not found,isoGroup,%d,flags,%d,accessory,%s", buf, 0x18u);
      if ((v17 & 0x80000000) == 0)
        goto LABEL_16;
      goto LABEL_27;
    }
  }
  if (*((_BYTE *)v7 + 104))
  {
    v10 = sub_100393804(v7 + 8, &v19);
    if (!*((_BYTE *)v7 + 104))
      sub_10000BA44();
    if (v10)
      return (uint64_t *)(v10 + 3);
    v12 = (id)qword_10085EEF8;
    if (!os_log_type_enabled(v12, OS_LOG_TYPE_FAULT))
      goto LABEL_16;
    v13 = v19;
    sub_1003610EC(v18);
    v14 = v17 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 67109634;
    v21 = v13;
    v22 = 1024;
    v23 = a3;
    v24 = 2080;
    v25 = v14;
    _os_log_fault_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_FAULT, "regulatory,comp,getTx_NB_SAR_PowerTableFromIsoGroup,iso table group not found,isoGroup,%d,flags,%d,accessory,%s", buf, 0x18u);
    if ((v17 & 0x80000000) == 0)
      goto LABEL_16;
LABEL_27:
    operator delete(__p[0]);
LABEL_16:

  }
  return &qword_10085EF18;
}

void sub_1003902C8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t *sub_1003902E8(uint64_t a1, int a2, int a3, int a4)
{
  _QWORD *v6;
  uint64_t *v7;
  NSObject *v8;
  void **v9;
  uint64_t **v10;
  NSObject *v12;
  int v13;
  void **v14;
  void **v15;
  void *__p[2];
  char v17;
  unsigned int v18;
  unsigned __int8 v19;
  uint8_t buf[4];
  int v21;
  __int16 v22;
  int v23;
  __int16 v24;
  void **v25;

  v19 = a2;
  v18 = (a3 << 31 >> 31) & a4;
  v6 = (_QWORD *)(a1 + 152);
  v7 = sub_10002A4AC((_QWORD *)(a1 + 152), (int *)&v18);
  if (!v7)
  {
    v8 = (id)qword_10085EEF8;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      sub_1003610EC(v18);
      v9 = v17 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 67109634;
      v21 = a2;
      v22 = 1024;
      v23 = a3;
      v24 = 2080;
      v25 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "regulatory,comp,getTx_NB_UNII3_PowerTableFromIsoGroup,accessory regulatory params not found,isoGroup,%d,flags,%d,accessory,%s", buf, 0x18u);
      if (v17 < 0)
        operator delete(__p[0]);
    }

    v18 = 0;
    v7 = sub_10002A4AC(v6, (int *)&v18);
    if (!v7)
    {
      v12 = (id)qword_10085EEF8;
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        sub_1003610EC(v18);
        v15 = v17 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)buf = 67109634;
        v21 = a2;
        v22 = 1024;
        v23 = a3;
        v24 = 2080;
        v25 = v15;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "regulatory,comp,getTx_NB_UNII3_PowerTableFromIsoGroup,NO_ACCESSORY regulatory params also not found,isoGroup,%d,flags,%d,accessory,%s", buf, 0x18u);
        if (v17 < 0)
          operator delete(__p[0]);
      }
LABEL_26:

      return &qword_10085EF30;
    }
  }
  if (*((_BYTE *)v7 + 152))
  {
    v10 = sub_100393804(v7 + 14, &v19);
    if (!*((_BYTE *)v7 + 152))
      sub_10000BA44();
    if (v10)
      return (uint64_t *)(v10 + 3);
    v12 = (id)qword_10085EEF8;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      v13 = v19;
      sub_1003610EC(v18);
      if (v17 >= 0)
        v14 = __p;
      else
        v14 = (void **)__p[0];
      *(_DWORD *)buf = 67109634;
      v21 = v13;
      v22 = 1024;
      v23 = a3;
      v24 = 2080;
      v25 = v14;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "regulatory,comp,getTx_NB_UNII3_PowerTableFromIsoGroup,iso table group not found,isoGroup,%d,flags,%d,accessory,%s", buf, 0x18u);
      if (v17 < 0)
        operator delete(__p[0]);
    }
    goto LABEL_26;
  }
  return &qword_10085EF30;
}

void sub_10039059C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t *sub_1003905BC(uint64_t a1, uint64_t *a2, int a3, uint64_t a4)
{
  uint64_t *v6;
  unint64_t v8;
  BOOL v9;
  int v10;
  NSObject *v11;
  int v12;
  void **v13;
  void **v14;
  void *v15;
  uint64_t *v16;
  NSObject *v17;
  void **v19;
  void *v20;
  char v21;
  void *v22[2];
  char v23;
  void *__p[2];
  uint64_t v25;
  void *v26[2];
  void *v27[2];
  __int128 v28;
  __int16 v29;
  unsigned __int8 v30;
  uint8_t buf[4];
  uint64_t *v32;
  __int16 v33;
  _BYTE v34[14];
  __int16 v35;
  void *v36;

  v6 = a2;
  if (*((char *)a2 + 23) < 0)
  {
    v8 = a2[1];
    if (v8)
    {
      v29 = 0;
      *(_OWORD *)v27 = 0u;
      v28 = 0u;
      *(_OWORD *)v26 = 0u;
      v30 = -1;
      sub_100004678(__p, (void *)*a2, v8);
      goto LABEL_6;
    }
    return &qword_10085EF00;
  }
  if (!*((_BYTE *)a2 + 23))
    return &qword_10085EF00;
  v29 = 0;
  *(_OWORD *)v27 = 0u;
  v28 = 0u;
  *(_OWORD *)v26 = 0u;
  v30 = -1;
  *(_OWORD *)__p = *(_OWORD *)a2;
  v25 = a2[2];
LABEL_6:
  v9 = sub_1000042D0(a1, (uint64_t)__p, (std::string *)v26);
  if (SHIBYTE(v25) < 0)
    operator delete(__p[0]);
  if (v9)
  {
    v10 = v30;
    v11 = (id)qword_10085EEF8;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      if (*((char *)v6 + 23) < 0)
        v6 = (uint64_t *)*v6;
      sub_10038DEBC(v10, v22);
      v12 = v23;
      v13 = (void **)v22[0];
      sub_1003610EC(a4);
      v14 = v22;
      if (v12 < 0)
        v14 = v13;
      if (v21 >= 0)
        v15 = &v20;
      else
        v15 = v20;
      *(_DWORD *)buf = 136315906;
      v32 = v6;
      v33 = 2080;
      *(_QWORD *)v34 = v14;
      *(_WORD *)&v34[8] = 1024;
      *(_DWORD *)&v34[10] = a3;
      v35 = 2080;
      v36 = v15;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "regulatory,comp,getDesignatedTx_UWB_PowerTable,country,%s,isoGroup,%s,flags,%d,accessory,%s", buf, 0x26u);
      if (v21 < 0)
        operator delete(v20);
      if (v23 < 0)
        operator delete(v22[0]);
    }

    v16 = sub_10038FD50(a1, v10, a3, a4);
  }
  else
  {
    v17 = (id)qword_10085EEF8;
    if (os_log_type_enabled(v17, OS_LOG_TYPE_FAULT))
    {
      if (*((char *)v6 + 23) < 0)
        v6 = (uint64_t *)*v6;
      sub_1003610EC(a4);
      if (v23 >= 0)
        v19 = v22;
      else
        v19 = (void **)v22[0];
      *(_DWORD *)buf = 136315650;
      v32 = v6;
      v33 = 1024;
      *(_DWORD *)v34 = a3;
      *(_WORD *)&v34[4] = 2080;
      *(_QWORD *)&v34[6] = v19;
      _os_log_fault_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_FAULT, "regulatory,comp,getDesignatedTx_UWB_PowerTable,country not found,country,%s,flags,%d,accessory,%s", buf, 0x1Cu);
      if (v23 < 0)
        operator delete(v22[0]);
    }

    v16 = &qword_10085EF00;
  }
  if (SHIBYTE(v28) < 0)
    operator delete(v27[1]);
  if (SHIBYTE(v27[0]) < 0)
    operator delete(v26[0]);
  return v16;
}

void sub_1003908AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,char a25)
{
  void *v25;

  if (a17 < 0)
    operator delete(__p);

  sub_1001D5744((uint64_t)&a25);
  _Unwind_Resume(a1);
}

uint64_t *sub_100390914(void *a1, uint64_t *a2, int a3, uint64_t a4)
{
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  BOOL v9;
  int v10;
  NSObject *v11;
  int v12;
  void **v13;
  void **v14;
  void *v15;
  uint64_t *v16;
  NSObject *v17;
  void **v19;
  void *v20;
  char v21;
  void *v22[2];
  char v23;
  void *__p[2];
  uint64_t v25;
  void *v26[2];
  void *v27[2];
  __int128 v28;
  __int16 v29;
  uint8_t buf[4];
  uint64_t *v31;
  __int16 v32;
  _BYTE v33[14];
  __int16 v34;
  void *v35;

  v6 = a2;
  v7 = (uint64_t)a1;
  if (*((char *)a2 + 23) < 0)
  {
    v8 = a2[1];
    if (v8)
    {
      *(_OWORD *)v27 = 0u;
      v28 = 0u;
      *(_OWORD *)v26 = 0u;
      v29 = -1;
      a1 = sub_100004678(__p, (void *)*a2, v8);
      goto LABEL_6;
    }
    return &qword_10085EF18;
  }
  if (!*((_BYTE *)a2 + 23))
    return &qword_10085EF18;
  *(_OWORD *)v27 = 0u;
  v28 = 0u;
  *(_OWORD *)v26 = 0u;
  v29 = -1;
  *(_OWORD *)__p = *(_OWORD *)a2;
  v25 = a2[2];
LABEL_6:
  v9 = sub_10038FB38((uint64_t)a1, (uint64_t *)__p, (uint64_t)v26);
  if (SHIBYTE(v25) < 0)
    operator delete(__p[0]);
  if (v9)
  {
    v10 = v29;
    v11 = (id)qword_10085EEF8;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      if (*((char *)v6 + 23) < 0)
        v6 = (uint64_t *)*v6;
      sub_10038DEF4(v10, v22);
      v12 = v23;
      v13 = (void **)v22[0];
      sub_1003610EC(a4);
      v14 = v22;
      if (v12 < 0)
        v14 = v13;
      if (v21 >= 0)
        v15 = &v20;
      else
        v15 = v20;
      *(_DWORD *)buf = 136315906;
      v31 = v6;
      v32 = 2080;
      *(_QWORD *)v33 = v14;
      *(_WORD *)&v33[8] = 1024;
      *(_DWORD *)&v33[10] = a3;
      v34 = 2080;
      v35 = v15;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "regulatory,comp,getDesignatedTx_NB_SAR_PowerTable,country,%s,isoGroup,%s,flags,%d,accessory,%s", buf, 0x26u);
      if (v21 < 0)
        operator delete(v20);
      if (v23 < 0)
        operator delete(v22[0]);
    }

    v16 = sub_10039000C(v7, v10, a3, a4);
  }
  else
  {
    v17 = (id)qword_10085EEF8;
    if (os_log_type_enabled(v17, OS_LOG_TYPE_FAULT))
    {
      if (*((char *)v6 + 23) < 0)
        v6 = (uint64_t *)*v6;
      sub_1003610EC(a4);
      if (v23 >= 0)
        v19 = v22;
      else
        v19 = (void **)v22[0];
      *(_DWORD *)buf = 136315650;
      v31 = v6;
      v32 = 1024;
      *(_DWORD *)v33 = a3;
      *(_WORD *)&v33[4] = 2080;
      *(_QWORD *)&v33[6] = v19;
      _os_log_fault_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_FAULT, "regulatory,comp,getDesignatedTx_NB_SAR_PowerTable,country not found,country,%s,flags,%d,accessory,%s", buf, 0x1Cu);
      if (v23 < 0)
        operator delete(v22[0]);
    }

    v16 = &qword_10085EF18;
  }
  if (SHIBYTE(v28) < 0)
    operator delete(v27[1]);
  if (SHIBYTE(v27[0]) < 0)
    operator delete(v26[0]);
  return v16;
}

void sub_100390BF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,char a25)
{
  void *v25;

  if (a17 < 0)
    operator delete(__p);

  sub_1001D5744((uint64_t)&a25);
  _Unwind_Resume(a1);
}

uint64_t *sub_100390C60(void *a1, uint64_t *a2, int a3, uint64_t a4)
{
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  BOOL v9;
  int v10;
  NSObject *v11;
  int v12;
  void **v13;
  void **v14;
  void *v15;
  uint64_t *v16;
  NSObject *v17;
  void **v19;
  void *v20;
  char v21;
  void *v22[2];
  char v23;
  void *__p[2];
  uint64_t v25;
  void *v26[2];
  void *v27[2];
  __int128 v28;
  __int16 v29;
  uint8_t buf[4];
  uint64_t *v31;
  __int16 v32;
  _BYTE v33[14];
  __int16 v34;
  void *v35;

  v6 = a2;
  v7 = (uint64_t)a1;
  if (*((char *)a2 + 23) < 0)
  {
    v8 = a2[1];
    if (v8)
    {
      *(_OWORD *)v27 = 0u;
      v28 = 0u;
      *(_OWORD *)v26 = 0u;
      v29 = -1;
      a1 = sub_100004678(__p, (void *)*a2, v8);
      goto LABEL_6;
    }
    return &qword_10085EF30;
  }
  if (!*((_BYTE *)a2 + 23))
    return &qword_10085EF30;
  *(_OWORD *)v27 = 0u;
  v28 = 0u;
  *(_OWORD *)v26 = 0u;
  v29 = -1;
  *(_OWORD *)__p = *(_OWORD *)a2;
  v25 = a2[2];
LABEL_6:
  v9 = sub_10038FB38((uint64_t)a1, (uint64_t *)__p, (uint64_t)v26);
  if (SHIBYTE(v25) < 0)
    operator delete(__p[0]);
  if (v9)
  {
    v10 = HIBYTE(v29);
    v11 = (id)qword_10085EEF8;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      if (*((char *)v6 + 23) < 0)
        v6 = (uint64_t *)*v6;
      sub_10038DF2C(v10, v22);
      v12 = v23;
      v13 = (void **)v22[0];
      sub_1003610EC(a4);
      v14 = v22;
      if (v12 < 0)
        v14 = v13;
      if (v21 >= 0)
        v15 = &v20;
      else
        v15 = v20;
      *(_DWORD *)buf = 136315906;
      v31 = v6;
      v32 = 2080;
      *(_QWORD *)v33 = v14;
      *(_WORD *)&v33[8] = 1024;
      *(_DWORD *)&v33[10] = a3;
      v34 = 2080;
      v35 = v15;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "regulatory,comp,getDesignatedTx_NB_UNII3_PowerTable,country,%s,isoGroup,%s,flags,%d,accessory,%s", buf, 0x26u);
      if (v21 < 0)
        operator delete(v20);
      if (v23 < 0)
        operator delete(v22[0]);
    }

    v16 = sub_1003902E8(v7, v10, a3, a4);
  }
  else
  {
    v17 = (id)qword_10085EEF8;
    if (os_log_type_enabled(v17, OS_LOG_TYPE_FAULT))
    {
      if (*((char *)v6 + 23) < 0)
        v6 = (uint64_t *)*v6;
      sub_1003610EC(a4);
      if (v23 >= 0)
        v19 = v22;
      else
        v19 = (void **)v22[0];
      *(_DWORD *)buf = 136315650;
      v31 = v6;
      v32 = 1024;
      *(_DWORD *)v33 = a3;
      *(_WORD *)&v33[4] = 2080;
      *(_QWORD *)&v33[6] = v19;
      _os_log_fault_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_FAULT, "regulatory,comp,getDesignatedTx_NB_UNII3_PowerTable,country not found,country,%s,flags,%d,accessory,%s", buf, 0x1Cu);
      if (v23 < 0)
        operator delete(v22[0]);
    }

    v16 = &qword_10085EF30;
  }
  if (SHIBYTE(v28) < 0)
    operator delete(v27[1]);
  if (SHIBYTE(v27[0]) < 0)
    operator delete(v26[0]);
  return v16;
}

void sub_100390F44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,char a25)
{
  void *v25;

  if (a17 < 0)
    operator delete(__p);

  sub_1001D5744((uint64_t)&a25);
  _Unwind_Resume(a1);
}

void sub_100390FAC(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  _QWORD *v3;
  char *v6;
  BOOL v7;
  BOOL v8;
  unint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  NSObject *v12;
  int v13;
  unint64_t v14;
  _BYTE *v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  unint64_t v19;
  char *v20;
  _BYTE *v21;
  char v22;
  unint64_t v23;
  _BYTE *v24;
  uint64_t v25;
  int v26;
  unint64_t v27;
  _BYTE *v28;
  unint64_t v29;
  unint64_t v30;
  size_t v31;
  unint64_t v32;
  char *v33;
  _BYTE *v34;
  char v35;
  NSObject *v36;
  void *__p[2];
  uint64_t v38;
  void *v39[2];
  void *v40[2];
  __int128 v41;
  __int16 v42;
  char v43;
  uint8_t buf[4];
  _QWORD *v45;
  __int16 v46;
  int v47;
  __int16 v48;
  int v49;
  __int16 v50;
  const char *v51;

  v3 = (_QWORD *)a2;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v42 = 0;
  *(_OWORD *)v40 = 0u;
  v41 = 0u;
  *(_OWORD *)v39 = 0u;
  v43 = -1;
  v6 = (char *)(a2 + 23);
  if (*(char *)(a2 + 23) < 0)
  {
    sub_100004678(__p, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a2;
    v38 = *(_QWORD *)(a2 + 16);
  }
  v7 = sub_1000042D0(a1, (uint64_t)__p, (std::string *)v39);
  v8 = v7;
  if (SHIBYTE(v38) < 0)
  {
    operator delete(__p[0]);
    if (v8)
      goto LABEL_6;
  }
  else if (v7)
  {
LABEL_6:
    if (HIBYTE(v42))
    {
      v10 = (_BYTE *)a3[1];
      v9 = a3[2];
      if ((unint64_t)v10 >= v9)
      {
        v14 = *a3;
        v15 = &v10[-*a3];
        v16 = (unint64_t)(v15 + 1);
        if ((uint64_t)(v15 + 1) < 0)
          sub_100026E7C();
        v17 = v9 - v14;
        if (2 * v17 > v16)
          v16 = 2 * v17;
        if (v17 >= 0x3FFFFFFFFFFFFFFFLL)
          v18 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v18 = v16;
        if (v18)
          v19 = (unint64_t)operator new(v18);
        else
          v19 = 0;
        v20 = (char *)(v19 + v18);
        v15[v19] = 9;
        v11 = (uint64_t)&v15[v19 + 1];
        if (v10 == (_BYTE *)v14)
        {
          v19 += (unint64_t)v15;
        }
        else
        {
          v21 = &v10[~v14];
          do
          {
            v22 = *--v10;
            (v21--)[v19] = v22;
          }
          while (v10 != (_BYTE *)v14);
        }
        *a3 = v19;
        a3[1] = v11;
        a3[2] = (unint64_t)v20;
        if (v14)
          operator delete((void *)v14);
      }
      else
      {
        *v10 = 9;
        v11 = (uint64_t)(v10 + 1);
      }
      a3[1] = v11;
      v13 = 1;
    }
    else
    {
      v13 = 0;
    }
    if ((_BYTE)v42)
    {
      v24 = (_BYTE *)a3[1];
      v23 = a3[2];
      if ((unint64_t)v24 >= v23)
      {
        v27 = *a3;
        v28 = &v24[-*a3];
        v29 = (unint64_t)(v28 + 1);
        if ((uint64_t)(v28 + 1) < 0)
          sub_100026E7C();
        v30 = v23 - v27;
        if (2 * v30 > v29)
          v29 = 2 * v30;
        if (v30 >= 0x3FFFFFFFFFFFFFFFLL)
          v31 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v31 = v29;
        if (v31)
          v32 = (unint64_t)operator new(v31);
        else
          v32 = 0;
        v33 = (char *)(v32 + v31);
        v28[v32] = 5;
        v25 = (uint64_t)&v28[v32 + 1];
        if (v24 == (_BYTE *)v27)
        {
          v32 += (unint64_t)v28;
        }
        else
        {
          v34 = &v24[~v27];
          do
          {
            v35 = *--v24;
            (v34--)[v32] = v35;
          }
          while (v24 != (_BYTE *)v27);
        }
        *a3 = v32;
        a3[1] = v25;
        a3[2] = (unint64_t)v33;
        if (v27)
          operator delete((void *)v27);
      }
      else
      {
        *v24 = 5;
        v25 = (uint64_t)(v24 + 1);
      }
      a3[1] = v25;
      v26 = 1;
    }
    else
    {
      v26 = 0;
    }
    v36 = qword_10085EEF8;
    if (os_log_type_enabled((os_log_t)qword_10085EEF8, OS_LOG_TYPE_DEBUG))
    {
      if (*v6 < 0)
        v3 = (_QWORD *)*v3;
      *(_DWORD *)buf = 136315906;
      v45 = v3;
      v46 = 1024;
      v47 = v26;
      v48 = 1024;
      v49 = v13;
      v50 = 2080;
      v51 = "fromCountryTable";
      _os_log_debug_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEBUG, "regulatory,comp,getDesignatedRfChannels,country,%s,ch5,%d,ch9,%d,note,%s", buf, 0x22u);
    }
    goto LABEL_52;
  }
  v12 = qword_10085EEF8;
  if (os_log_type_enabled((os_log_t)qword_10085EEF8, OS_LOG_TYPE_DEBUG))
    sub_1003F0BDC(v6, v3, v12);
LABEL_52:
  if (SHIBYTE(v41) < 0)
    operator delete(v40[1]);
  if (SHIBYTE(v40[0]) < 0)
    operator delete(v39[0]);
}

void sub_100391314(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
  _Unwind_Resume(exception_object);
}

void sub_100391360(void *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  BOOL v4;
  BOOL v5;
  _BYTE *v6;
  void *__p[2];
  uint64_t v8;
  void *v9[2];
  void *v10[2];
  __int128 v11;
  __int16 v12;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  *(_OWORD *)v10 = 0u;
  v11 = 0u;
  *(_OWORD *)v9 = 0u;
  v12 = -1;
  if (*(char *)(a2 + 23) < 0)
  {
    a1 = sub_100004678(__p, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a2;
    v8 = *(_QWORD *)(a2 + 16);
  }
  v4 = sub_10038FB38((uint64_t)a1, (uint64_t *)__p, (uint64_t)v9);
  v5 = v4;
  if (SHIBYTE(v8) < 0)
  {
    operator delete(__p[0]);
    if (v5)
      goto LABEL_6;
  }
  else if (v4)
  {
LABEL_6:
    if (HIBYTE(v12) <= 0xFDu && v12 != 254 && v12 != 255)
    {
      v6 = operator new(1uLL);
      *v6 = 1;
      a3[1] = v6 + 1;
      a3[2] = v6 + 1;
      *a3 = v6;
    }
    goto LABEL_13;
  }
  if (os_log_type_enabled((os_log_t)qword_10085EEF8, OS_LOG_TYPE_DEBUG))
    sub_1003F0C88();
LABEL_13:
  if (SHIBYTE(v11) < 0)
    operator delete(v10[1]);
  if (SHIBYTE(v10[0]) < 0)
    operator delete(v9[0]);
}

void sub_100391478(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
  uint64_t v16;
  void *v18;

  sub_1001D5744((uint64_t)&a16);
  v18 = *(void **)v16;
  if (*(_QWORD *)v16)
  {
    *(_QWORD *)(v16 + 8) = v18;
    operator delete(v18);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1003914B8(uint64_t a1)
{
  return a1 + 192;
}

BOOL sub_1003914C0(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", a1));
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  v5 = v4;
  if (v4)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "stringForKey:", v3));
    v7 = v6;
    if (v6)
    {
      std::string::assign((std::string *)a2, (const std::string::value_type *)objc_msgSend(objc_retainAutorelease(v6), "UTF8String"));
    }
    else
    {
      if (*(char *)(a2 + 23) < 0)
        operator delete(*(void **)a2);
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
    }

  }
  return v5 != 0;
}

void sub_100391584(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

BOOL sub_1003915AC(uint64_t a1, double *a2)
{
  void *v3;
  void *v4;
  void *v5;
  float v6;

  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", a1));
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  v5 = v4;
  if (v4)
  {
    objc_msgSend(v4, "floatForKey:", v3);
    *a2 = v6;
  }

  return v5 != 0;
}

void sub_100391628(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

BOOL sub_100391644(uint64_t a1, _DWORD *a2)
{
  void *v3;
  void *v4;
  void *v5;

  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", a1));
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  v5 = v4;
  if (v4)
    *a2 = objc_msgSend(v4, "integerForKey:", v3);

  return v5 != 0;
}

void sub_1003916BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t sub_1003916D8(uint64_t a1, char *a2)
{
  return sub_10038DDAC(a1, a2, 0.0);
}

BOOL sub_1003916E0(uint64_t a1, std::string *a2)
{
  std::string::size_type v3;

  return sub_10038DE20(a1, a2, &v3);
}

void sub_100391700(id a1)
{
  if (!sub_1000078EC((uint64_t)off_1008532A0[0], &byte_10085EF70))
    byte_10085EF70 = 0;
}

uint64_t sub_100391730()
{
  uint64_t result;
  char v1;

  v1 = 0;
  LODWORD(result) = sub_1000078EC((uint64_t)off_100853308, &v1);
  if (v1)
    return result;
  else
    return 0;
}

void sub_100391768(uint64_t a1, int *a2, int a3)
{
  NSObject *v6;
  int v8;

  v8 = 0;
  if (!sub_100391644((uint64_t)off_1008532B0[0], &v8) || v8 < 1)
  {
    *a2 = a3;
  }
  else
  {
    *a2 = v8;
    v6 = qword_10085EEF8;
    if (os_log_type_enabled((os_log_t)qword_10085EEF8, OS_LOG_TYPE_DEBUG))
      sub_1003F0D1C(a2, v6);
  }
}

void sub_1003917E8(uint64_t a1@<X8>)
{
  unsigned __int8 v2;

  v2 = atomic_load((unsigned __int8 *)&qword_10085EF98);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_10085EF98))
  {
    xmmword_10085EF80 = 0uLL;
    unk_10085EF90 = 0;
    __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_10085EF80, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10085EF98);
  }
  if (qword_10085EFA0 != -1)
    dispatch_once(&qword_10085EFA0, &stru_1008177D0);
  if (byte_10085EF97 < 0)
  {
    sub_100004678((_BYTE *)a1, (void *)xmmword_10085EF80, *((unint64_t *)&xmmword_10085EF80 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_10085EF80;
    *(_QWORD *)(a1 + 16) = unk_10085EF90;
  }
}

void sub_1003918C0(id a1)
{
  BOOL v1;
  char v2;

  v2 = 0;
  v1 = !sub_1000078EC((uint64_t)off_1008532C8[0], &v2) || v2 == 0;
  if (!v1 && !sub_1003914C0((uint64_t)off_1008532C0[0], (uint64_t)&xmmword_10085EF80))
  {
    if (byte_10085EF97 < 0)
    {
      *(_BYTE *)xmmword_10085EF80 = 0;
      *((_QWORD *)&xmmword_10085EF80 + 1) = 0;
    }
    else
    {
      LOBYTE(xmmword_10085EF80) = 0;
      byte_10085EF97 = 0;
    }
  }
}

BOOL sub_100391944(uint64_t a1, double *a2)
{
  int v3;

  if (qword_10085EFB0 != -1)
    dispatch_once(&qword_10085EFB0, &stru_1008177F0);
  v3 = dword_10085EFA8;
  *a2 = (double)dword_10085EFA8;
  return v3 != 0;
}

void sub_1003919A0(id a1)
{
  if (!sub_100391644((uint64_t)off_1008532D0[0], &dword_10085EFA8))
    dword_10085EFA8 = 0;
}

BOOL sub_1003919D0(uint64_t a1, double *a2)
{
  int v3;

  if (qword_10085EFC0 != -1)
    dispatch_once(&qword_10085EFC0, &stru_100817810);
  v3 = dword_10085EFB8;
  *a2 = (double)dword_10085EFB8;
  return v3 != 0;
}

void sub_100391A2C(id a1)
{
  if (!sub_100391644((uint64_t)off_1008532D8[0], &dword_10085EFB8))
    dword_10085EFB8 = 0;
}

BOOL sub_100391A5C(uint64_t a1, _QWORD *a2)
{
  int v3;

  if (qword_10085EFD0 != -1)
    dispatch_once(&qword_10085EFD0, &stru_100817830);
  v3 = dword_10085EFC8;
  if (dword_10085EFC8)
    *a2 = dword_10085EFC8;
  return v3 != 0;
}

void sub_100391AB8(id a1)
{
  if (!sub_100391644((uint64_t)off_100853300[0], &dword_10085EFC8))
    dword_10085EFC8 = 0;
}

BOOL sub_100391AE8(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  int v5;

  if (qword_10085EFE8 != -1)
    dispatch_once(&qword_10085EFE8, &stru_100817850);
  v5 = byte_10085EFE0;
  if (byte_10085EFE0)
  {
    *a2 = dword_10085EFD8;
    *a3 = dword_10085EFDC;
  }
  return v5 != 0;
}

void sub_100391B5C(id a1)
{
  BOOL v1;
  char v2;
  _BOOL4 v3;
  _BOOL4 v4;
  BOOL v5;

  v1 = sub_1000078EC((uint64_t)off_1008532E0[0], &byte_10085EFE0);
  v2 = byte_10085EFE0;
  if (!v1 && !byte_10085EFE0)
    goto LABEL_11;
  if (byte_10085EFE0)
  {
    v3 = sub_100391644((uint64_t)off_1008532E8[0], &dword_10085EFD8);
    v4 = dword_10085EFD8 && v3;
    byte_10085EFE0 = v4;
    if (v4)
    {
      v5 = sub_100391644((uint64_t)off_1008532F0[0], &dword_10085EFDC);
      if (dword_10085EFDC)
        v2 = v5;
      else
        v2 = 0;
LABEL_11:
      byte_10085EFE0 = v2;
    }
  }
}

BOOL sub_100391BFC(uint64_t a1, _DWORD *a2)
{
  int v3;

  if (qword_10085EFF8 != -1)
    dispatch_once(&qword_10085EFF8, &stru_100817870);
  v3 = byte_10085EFF4;
  if (byte_10085EFF4)
    *a2 = dword_10085EFF0;
  return v3 != 0;
}

void sub_100391C60(id a1)
{
  BOOL v1;
  char v2;
  BOOL v3;

  v1 = sub_1000078EC((uint64_t)off_1008532E0[0], &byte_10085EFF4);
  v2 = byte_10085EFF4;
  if (v1 || byte_10085EFF4)
  {
    if (!byte_10085EFF4)
      return;
    v3 = sub_100391644((uint64_t)off_1008532F8[0], &dword_10085EFF0);
    if (dword_10085EFF0)
      v2 = v3;
    else
      v2 = 0;
  }
  byte_10085EFF4 = v2;
}

void sub_100391CCC(uint64_t a1)
{
  _BOOL4 v1;
  _BOOL4 v2;
  void *__p[2];
  uint64_t v4;

  __p[0] = 0;
  __p[1] = 0;
  v4 = 0;
  v1 = sub_1003914C0(a1, (uint64_t)__p);
  v2 = os_log_type_enabled((os_log_t)qword_10085EEF8, OS_LOG_TYPE_DEBUG);
  if (v1)
  {
    if (v2)
      sub_1003F0D90();
  }
  else if (v2)
  {
    sub_1003F096C();
  }
  if (SHIBYTE(v4) < 0)
    operator delete(__p[0]);
}

void sub_100391D60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100391D7C(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;

  sub_100391E1C(a1);
  v4 = *a2;
  *a2 = 0;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = v4;
  if (v5)
    operator delete(v5);
  v8 = a2[2];
  v7 = a2 + 2;
  v6 = v8;
  v9 = *(v7 - 1);
  *(_QWORD *)(a1 + 16) = v8;
  *(_QWORD *)(a1 + 8) = v9;
  *(v7 - 1) = 0;
  v10 = v7[1];
  *(_QWORD *)(a1 + 24) = v10;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v7 + 4);
  if (v10)
  {
    v11 = *(_QWORD *)(v6 + 8);
    v12 = *(_QWORD *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
        v11 %= v12;
    }
    else
    {
      v11 &= v12 - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v11) = a1 + 16;
    *v7 = 0;
    v7[1] = 0;
  }
}

void sub_100391E1C(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  if (*(_QWORD *)(a1 + 24))
  {
    sub_1001D8EC4(a1, *(_QWORD **)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      for (i = 0; i != v2; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
}

void sub_100391E70(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 40) == *(unsigned __int8 *)(a2 + 40))
  {
    if (*(_BYTE *)(a1 + 40))
      sub_100391D7C(a1, (uint64_t *)a2);
  }
  else if (*(_BYTE *)(a1 + 40))
  {
    *(_BYTE *)(sub_1001D8E8C(a1) + 40) = 0;
  }
  else
  {
    *(_BYTE *)(sub_100355E04(a1, (uint64_t *)a2) + 40) = 1;
  }
}

uint64_t sub_100391EB8(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    v5 = 32 * a3;
    do
    {
      sub_100391F2C(a1, a2, (uint64_t)a2);
      a2 += 32;
      v5 -= 32;
    }
    while (v5);
  }
  return a1;
}

void sub_100391F18(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10003A4EC(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_100391F2C(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *i;
  unint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD v25[3];

  v7 = (_QWORD *)(a1 + 24);
  v8 = sub_10003AAC4(a1 + 24, (uint64_t)a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if ((sub_10003AF6C(a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3)
            break;
        }
      }
    }
  }
  sub_1003921A8(a1, v9, a3, (uint64_t)v25);
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    sub_10002A900(a1, v21);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v22)
  {
    *(_QWORD *)v25[0] = *v22;
    *v22 = v25[0];
  }
  else
  {
    *(_QWORD *)v25[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v25[0])
    {
      v23 = *(_QWORD *)(*(_QWORD *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10)
          v23 %= v10;
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v25[0];
    }
  }
  i = (unsigned __int8 *)v25[0];
  ++*v7;
  return i;
}

void sub_100392184(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p)
    sub_10003B010((uint64_t)&a11, __p);
  _Unwind_Resume(exception_object);
}

_BYTE *sub_1003921A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char *v8;
  _BYTE *result;

  v7 = a1 + 16;
  v8 = (char *)operator new(0x30uLL);
  *(_QWORD *)(a4 + 8) = v7;
  *(_QWORD *)a4 = v8;
  *(_BYTE *)(a4 + 16) = 0;
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = a2;
  result = v8 + 16;
  if (*(char *)(a3 + 23) < 0)
  {
    result = sub_100004678(result, *(void **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)result = *(_OWORD *)a3;
    *((_QWORD *)v8 + 4) = *(_QWORD *)(a3 + 16);
  }
  *((_DWORD *)v8 + 10) = *(_DWORD *)(a3 + 24);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_100392234(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  sub_10003B010(v3, v2);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_100392250(_QWORD *a1, unsigned __int8 *a2)
{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned __int8 **v10;
  unsigned __int8 *v11;
  uint64_t v12;
  unint64_t v13;

  v4 = sub_10003AAC4((uint64_t)(a1 + 3), (uint64_t)a2);
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v9 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v9 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  v11 = *v10;
  if (*v10)
  {
    v12 = (uint64_t)(a1 + 4);
    do
    {
      v13 = *((_QWORD *)v11 + 1);
      if (v6 == v13)
      {
        if ((sub_10003AF6C(v12, v11 + 16, a2) & 1) != 0)
          return v11;
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(_QWORD *)&v5)
            v13 %= *(_QWORD *)&v5;
        }
        else
        {
          v13 &= *(_QWORD *)&v5 - 1;
        }
        if (v13 != v9)
          return 0;
      }
      v11 = *(unsigned __int8 **)v11;
    }
    while (v11);
  }
  return v11;
}

uint64_t *sub_100392350(uint64_t a1, int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  uint64_t **v10;
  uint64_t *i;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  _QWORD *v21;
  unint64_t v22;
  _QWORD v24[2];
  char v25;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      for (i = *v10; i; i = (uint64_t *)*i)
      {
        v12 = i[1];
        if (v12 == v7)
        {
          if (*((_DWORD *)i + 4) == (_DWORD)v7)
            return i;
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8)
              v12 %= v8;
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4)
            break;
        }
      }
    }
  }
  v13 = a1 + 16;
  v14 = (char *)operator new(0xA0uLL);
  v24[0] = v14;
  v24[1] = a1 + 16;
  *(_QWORD *)v14 = 0;
  *((_QWORD *)v14 + 1) = v7;
  *((_DWORD *)v14 + 4) = **a4;
  *(_OWORD *)(v14 + 56) = 0u;
  *((_QWORD *)v14 + 19) = 0;
  *(_OWORD *)(v14 + 136) = 0u;
  *(_OWORD *)(v14 + 120) = 0u;
  *(_OWORD *)(v14 + 104) = 0u;
  *(_OWORD *)(v14 + 88) = 0u;
  *(_OWORD *)(v14 + 72) = 0u;
  *(_OWORD *)(v14 + 40) = 0u;
  *(_OWORD *)(v14 + 24) = 0u;
  *((_DWORD *)v14 + 14) = 1065353216;
  v25 = 1;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v8 || (float)(v16 * (float)v8) < v15)
  {
    v17 = 1;
    if (v8 >= 3)
      v17 = (v8 & (v8 - 1)) != 0;
    v18 = v17 | (2 * v8);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    sub_10002A900(a1, v20);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v21)
  {
    *(_QWORD *)v24[0] = *v21;
    *v21 = v24[0];
  }
  else
  {
    *(_QWORD *)v24[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v24[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = v13;
    if (*(_QWORD *)v24[0])
    {
      v22 = *(_QWORD *)(*(_QWORD *)v24[0] + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v22 >= v8)
          v22 %= v8;
      }
      else
      {
        v22 &= v8 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v22) = v24[0];
    }
  }
  i = (uint64_t *)v24[0];
  v24[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  sub_1003925D8((uint64_t)v24, 0);
  return i;
}

void sub_1003925C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1003925D8((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void sub_1003925D8(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_1001D8E4C((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

void sub_10039261C(uint64_t a1, std::string *__str, __int128 *a3, unint64_t a4)
{
  uint64_t v8;
  std::string *v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  std::string *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = a1 + 16;
  v9 = *(std::string **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) < a4)
  {
    sub_100392790((uint64_t *)a1);
    if (a4 > 0xAAAAAAAAAAAAAAALL)
      sub_100026E7C();
    v10 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3);
    if (v10 <= a4)
      v10 = a4;
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v10;
    sub_100026E2C((_QWORD *)a1, v11);
    v12 = sub_100161ACC(v8, (__int128 *)__str, a3, *(char **)(a1 + 8));
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3) < a4)
  {
    v13 = (std::string *)((char *)__str + 8 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3));
    sub_1003927C8(__str, v13, v9);
    v12 = sub_100161ACC(v8, (__int128 *)v13, a3, *(char **)(a1 + 8));
LABEL_11:
    *(_QWORD *)(a1 + 8) = v12;
    return;
  }
  sub_1003927C8(__str, (std::string *)a3, v9);
  v15 = v14;
  v16 = *(_QWORD *)(a1 + 8);
  if (v16 != v14)
  {
    do
    {
      if (*(char *)(v16 - 1) < 0)
        operator delete(*(void **)(v16 - 24));
      v16 -= 24;
    }
    while (v16 != v15);
  }
  *(_QWORD *)(a1 + 8) = v15;
}

void sub_100392780(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_100392788(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_100392790(uint64_t *a1)
{
  if (*a1)
  {
    sub_100161C40(a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

std::string *sub_1003927C8(std::string *__str, std::string *a2, std::string *this)
{
  const std::string *v4;

  v4 = __str;
  if (__str != a2)
  {
    do
      std::string::operator=(this++, v4++);
    while (v4 != a2);
    return a2;
  }
  return (std::string *)v4;
}

uint64_t sub_100392824(uint64_t a1, uint64_t a2)
{
  int *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  sub_10002A900(a1, *(_QWORD *)(a2 + 8));
  for (i = *(int **)(a2 + 16); i; i = *(int **)i)
    sub_100392898(a1, i + 4, i + 4);
  return a1;
}

void sub_100392880(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1001D8DD8(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_100392898(uint64_t a1, int *a2, _DWORD *a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v6;
  uint8x8_t v7;
  uint64_t **v8;
  uint64_t *i;
  unint64_t v10;
  float v11;
  float v12;
  _BOOL8 v13;
  unint64_t v14;
  unint64_t v15;
  size_t v16;
  _QWORD *v17;
  unint64_t v18;
  _QWORD v20[3];

  v5 = *a2;
  v6 = *(_QWORD *)(a1 + 8);
  if (v6)
  {
    v7 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v6 <= v5)
        v3 = v5 % v6;
    }
    else
    {
      v3 = (v6 - 1) & v5;
    }
    v8 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v8)
    {
      for (i = *v8; i; i = (uint64_t *)*i)
      {
        v10 = i[1];
        if (v10 == v5)
        {
          if (*((_DWORD *)i + 4) == (_DWORD)v5)
            return i;
        }
        else
        {
          if (v7.u32[0] > 1uLL)
          {
            if (v10 >= v6)
              v10 %= v6;
          }
          else
          {
            v10 &= v6 - 1;
          }
          if (v10 != v3)
            break;
        }
      }
    }
  }
  sub_100392ADC(a1, *a2, a3, (uint64_t)v20);
  v11 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v12 = *(float *)(a1 + 32);
  if (!v6 || (float)(v12 * (float)v6) < v11)
  {
    v13 = 1;
    if (v6 >= 3)
      v13 = (v6 & (v6 - 1)) != 0;
    v14 = v13 | (2 * v6);
    v15 = vcvtps_u32_f32(v11 / v12);
    if (v14 <= v15)
      v16 = v15;
    else
      v16 = v14;
    sub_10002A900(a1, v16);
    v6 = *(_QWORD *)(a1 + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v6 <= v5)
        v3 = v5 % v6;
      else
        v3 = v5;
    }
    else
    {
      v3 = (v6 - 1) & v5;
    }
  }
  v17 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v17)
  {
    *(_QWORD *)v20[0] = *v17;
    *v17 = v20[0];
  }
  else
  {
    *(_QWORD *)v20[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v20[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v20[0])
    {
      v18 = *(_QWORD *)(*(_QWORD *)v20[0] + 8);
      if ((v6 & (v6 - 1)) != 0)
      {
        if (v18 >= v6)
          v18 %= v6;
      }
      else
      {
        v18 &= v6 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v18) = v20[0];
    }
  }
  i = (uint64_t *)v20[0];
  v20[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  sub_1003925D8((uint64_t)v20, 0);
  return i;
}

void sub_100392AC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1003925D8((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_100392ADC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t result;

  v7 = a1 + 16;
  v8 = operator new(0xA0uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  result = sub_100392B50((uint64_t)(v8 + 2), a3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_100392B38(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1003925D8(v1, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_100392B50(uint64_t a1, _DWORD *a2)
{
  uint64_t v4;
  _BYTE *v5;

  v4 = (uint64_t)(a2 + 12);
  *(_DWORD *)a1 = *a2;
  v5 = (_BYTE *)(a1 + 48);
  sub_100392BE8(a1 + 8, (uint64_t)(a2 + 2));
  sub_100392F7C(v5, v4);
  sub_100393320((_BYTE *)(a1 + 96), (uint64_t)(a2 + 24));
  return a1;
}

void sub_100392BBC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if (*(_BYTE *)(v2 + 88))
    sub_1001D8E8C(v3);
  sub_1001D8E8C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100392BE8(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  sub_10002A900(a1, *(_QWORD *)(a2 + 8));
  for (i = *(unsigned __int8 **)(a2 + 16); i; i = *(unsigned __int8 **)i)
    sub_100392C5C(a1, i + 16, (uint64_t)(i + 16));
  return a1;
}

void sub_100392C44(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1001D8E8C(v1);
  _Unwind_Resume(a1);
}

uint64_t **sub_100392C5C(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v6;
  uint8x8_t v7;
  uint64_t ***v8;
  uint64_t **result;
  unint64_t v10;
  float v11;
  float v12;
  _BOOL8 v13;
  unint64_t v14;
  unint64_t v15;
  size_t v16;
  _QWORD *v17;
  unint64_t v18;
  _QWORD v19[3];

  v5 = *a2;
  v6 = *(_QWORD *)(a1 + 8);
  if (v6)
  {
    v7 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v6 <= v5)
        v3 = v5 % v6;
    }
    else
    {
      v3 = ((_DWORD)v6 - 1) & v5;
    }
    v8 = *(uint64_t ****)(*(_QWORD *)a1 + 8 * v3);
    if (v8)
    {
      for (result = *v8; result; result = (uint64_t **)*result)
      {
        v10 = (unint64_t)result[1];
        if (v10 == v5)
        {
          if (*((unsigned __int8 *)result + 16) == (_DWORD)v5)
            return result;
        }
        else
        {
          if (v7.u32[0] > 1uLL)
          {
            if (v10 >= v6)
              v10 %= v6;
          }
          else
          {
            v10 &= v6 - 1;
          }
          if (v10 != v3)
            break;
        }
      }
    }
  }
  sub_100392E94(a1, *a2, a3, (uint64_t)v19);
  v11 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v12 = *(float *)(a1 + 32);
  if (!v6 || (float)(v12 * (float)v6) < v11)
  {
    v13 = 1;
    if (v6 >= 3)
      v13 = (v6 & (v6 - 1)) != 0;
    v14 = v13 | (2 * v6);
    v15 = vcvtps_u32_f32(v11 / v12);
    if (v14 <= v15)
      v16 = v15;
    else
      v16 = v14;
    sub_10002A900(a1, v16);
    v6 = *(_QWORD *)(a1 + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v6 <= v5)
        v3 = v5 % v6;
      else
        v3 = v5;
    }
    else
    {
      v3 = ((_DWORD)v6 - 1) & v5;
    }
  }
  v17 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v17)
  {
    *(_QWORD *)v19[0] = *v17;
    *v17 = v19[0];
  }
  else
  {
    *(_QWORD *)v19[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v19[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v19[0])
    {
      v18 = *(_QWORD *)(*(_QWORD *)v19[0] + 8);
      if ((v6 & (v6 - 1)) != 0)
      {
        if (v18 >= v6)
          v18 %= v6;
      }
      else
      {
        v18 &= v6 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v18) = v19[0];
    }
  }
  result = (uint64_t **)v19[0];
  ++*(_QWORD *)(a1 + 24);
  return result;
}

void sub_100392E70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _QWORD *__p, uint64_t a11)
{
  if (__p)
    sub_100392F30((uint64_t)&a11, __p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_100392E94@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  _QWORD *result;

  v7 = a1 + 16;
  v8 = operator new(0x30uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  *((_BYTE *)v8 + 16) = *(_BYTE *)a3;
  v8[4] = 0;
  v8[5] = 0;
  v8[3] = 0;
  result = sub_1002106A0(v8 + 3, *(const void **)(a3 + 8), *(_QWORD *)(a3 + 16), (uint64_t)(*(_QWORD *)(a3 + 16) - *(_QWORD *)(a3 + 8)) >> 3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_100392F14(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *v1 = 0;
  sub_100392F30(v3, v2);
  _Unwind_Resume(a1);
}

void sub_100392F30(uint64_t a1, _QWORD *__p)
{
  void *v3;

  if (*(_BYTE *)(a1 + 8))
  {
    v3 = (void *)__p[3];
    if (v3)
    {
      __p[4] = v3;
      operator delete(v3);
    }
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

_BYTE *sub_100392F7C(_BYTE *a1, uint64_t a2)
{
  *a1 = 0;
  a1[40] = 0;
  if (*(_BYTE *)(a2 + 40))
  {
    sub_100392FD8((uint64_t)a1, a2);
    a1[40] = 1;
  }
  return a1;
}

void sub_100392FBC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 40))
    sub_1001D8E8C(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100392FD8(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  sub_10002A900(a1, *(_QWORD *)(a2 + 8));
  for (i = *(unsigned __int8 **)(a2 + 16); i; i = *(unsigned __int8 **)i)
    sub_10039304C(a1, i + 16, (uint64_t)(i + 16));
  return a1;
}

void sub_100393034(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1001D8E8C(v1);
  _Unwind_Resume(a1);
}

uint64_t **sub_10039304C(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v6;
  uint8x8_t v7;
  uint64_t ***v8;
  uint64_t **result;
  unint64_t v10;
  float v11;
  float v12;
  _BOOL8 v13;
  unint64_t v14;
  unint64_t v15;
  size_t v16;
  _QWORD *v17;
  unint64_t v18;
  _QWORD v19[3];

  v5 = *a2;
  v6 = *(_QWORD *)(a1 + 8);
  if (v6)
  {
    v7 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v6 <= v5)
        v3 = v5 % v6;
    }
    else
    {
      v3 = ((_DWORD)v6 - 1) & v5;
    }
    v8 = *(uint64_t ****)(*(_QWORD *)a1 + 8 * v3);
    if (v8)
    {
      for (result = *v8; result; result = (uint64_t **)*result)
      {
        v10 = (unint64_t)result[1];
        if (v10 == v5)
        {
          if (*((unsigned __int8 *)result + 16) == (_DWORD)v5)
            return result;
        }
        else
        {
          if (v7.u32[0] > 1uLL)
          {
            if (v10 >= v6)
              v10 %= v6;
          }
          else
          {
            v10 &= v6 - 1;
          }
          if (v10 != v3)
            break;
        }
      }
    }
  }
  sub_100393284(a1, *a2, a3, (uint64_t)v19);
  v11 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v12 = *(float *)(a1 + 32);
  if (!v6 || (float)(v12 * (float)v6) < v11)
  {
    v13 = 1;
    if (v6 >= 3)
      v13 = (v6 & (v6 - 1)) != 0;
    v14 = v13 | (2 * v6);
    v15 = vcvtps_u32_f32(v11 / v12);
    if (v14 <= v15)
      v16 = v15;
    else
      v16 = v14;
    sub_10002A900(a1, v16);
    v6 = *(_QWORD *)(a1 + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v6 <= v5)
        v3 = v5 % v6;
      else
        v3 = v5;
    }
    else
    {
      v3 = ((_DWORD)v6 - 1) & v5;
    }
  }
  v17 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v17)
  {
    *(_QWORD *)v19[0] = *v17;
    *v17 = v19[0];
  }
  else
  {
    *(_QWORD *)v19[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v19[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v19[0])
    {
      v18 = *(_QWORD *)(*(_QWORD *)v19[0] + 8);
      if ((v6 & (v6 - 1)) != 0)
      {
        if (v18 >= v6)
          v18 %= v6;
      }
      else
      {
        v18 &= v6 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v18) = v19[0];
    }
  }
  result = (uint64_t **)v19[0];
  ++*(_QWORD *)(a1 + 24);
  return result;
}

void sub_100393260(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _QWORD *__p, uint64_t a11)
{
  if (__p)
    sub_100392F30((uint64_t)&a11, __p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_100393284@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  _QWORD *result;

  v7 = a1 + 16;
  v8 = operator new(0x30uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  *((_BYTE *)v8 + 16) = *(_BYTE *)a3;
  v8[4] = 0;
  v8[5] = 0;
  v8[3] = 0;
  result = sub_100210718(v8 + 3, *(const void **)(a3 + 8), *(_QWORD *)(a3 + 16), (uint64_t)(*(_QWORD *)(a3 + 16) - *(_QWORD *)(a3 + 8)) >> 3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_100393304(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *v1 = 0;
  sub_100392F30(v3, v2);
  _Unwind_Resume(a1);
}

_BYTE *sub_100393320(_BYTE *a1, uint64_t a2)
{
  *a1 = 0;
  a1[40] = 0;
  if (*(_BYTE *)(a2 + 40))
  {
    sub_10039337C((uint64_t)a1, a2);
    a1[40] = 1;
  }
  return a1;
}

void sub_100393360(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 40))
    sub_1001D8E8C(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10039337C(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  sub_10002A900(a1, *(_QWORD *)(a2 + 8));
  for (i = *(unsigned __int8 **)(a2 + 16); i; i = *(unsigned __int8 **)i)
    sub_1003933F0(a1, i + 16, (uint64_t)(i + 16));
  return a1;
}

void sub_1003933D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1001D8E8C(v1);
  _Unwind_Resume(a1);
}

uint64_t **sub_1003933F0(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v6;
  uint8x8_t v7;
  uint64_t ***v8;
  uint64_t **result;
  unint64_t v10;
  float v11;
  float v12;
  _BOOL8 v13;
  unint64_t v14;
  unint64_t v15;
  size_t v16;
  _QWORD *v17;
  unint64_t v18;
  _QWORD v19[3];

  v5 = *a2;
  v6 = *(_QWORD *)(a1 + 8);
  if (v6)
  {
    v7 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v6 <= v5)
        v3 = v5 % v6;
    }
    else
    {
      v3 = ((_DWORD)v6 - 1) & v5;
    }
    v8 = *(uint64_t ****)(*(_QWORD *)a1 + 8 * v3);
    if (v8)
    {
      for (result = *v8; result; result = (uint64_t **)*result)
      {
        v10 = (unint64_t)result[1];
        if (v10 == v5)
        {
          if (*((unsigned __int8 *)result + 16) == (_DWORD)v5)
            return result;
        }
        else
        {
          if (v7.u32[0] > 1uLL)
          {
            if (v10 >= v6)
              v10 %= v6;
          }
          else
          {
            v10 &= v6 - 1;
          }
          if (v10 != v3)
            break;
        }
      }
    }
  }
  sub_100393628(a1, *a2, a3, (uint64_t)v19);
  v11 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v12 = *(float *)(a1 + 32);
  if (!v6 || (float)(v12 * (float)v6) < v11)
  {
    v13 = 1;
    if (v6 >= 3)
      v13 = (v6 & (v6 - 1)) != 0;
    v14 = v13 | (2 * v6);
    v15 = vcvtps_u32_f32(v11 / v12);
    if (v14 <= v15)
      v16 = v15;
    else
      v16 = v14;
    sub_10002A900(a1, v16);
    v6 = *(_QWORD *)(a1 + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v6 <= v5)
        v3 = v5 % v6;
      else
        v3 = v5;
    }
    else
    {
      v3 = ((_DWORD)v6 - 1) & v5;
    }
  }
  v17 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v17)
  {
    *(_QWORD *)v19[0] = *v17;
    *v17 = v19[0];
  }
  else
  {
    *(_QWORD *)v19[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v19[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v19[0])
    {
      v18 = *(_QWORD *)(*(_QWORD *)v19[0] + 8);
      if ((v6 & (v6 - 1)) != 0)
      {
        if (v18 >= v6)
          v18 %= v6;
      }
      else
      {
        v18 &= v6 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v18) = v19[0];
    }
  }
  result = (uint64_t **)v19[0];
  ++*(_QWORD *)(a1 + 24);
  return result;
}

void sub_100393604(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _QWORD *__p, uint64_t a11)
{
  if (__p)
    sub_100392F30((uint64_t)&a11, __p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_100393628@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  _QWORD *result;

  v7 = a1 + 16;
  v8 = operator new(0x30uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  *((_BYTE *)v8 + 16) = *(_BYTE *)a3;
  v8[4] = 0;
  v8[5] = 0;
  v8[3] = 0;
  result = sub_100210790(v8 + 3, *(const void **)(a3 + 8), *(_QWORD *)(a3 + 16), (uint64_t)(*(_QWORD *)(a3 + 16) - *(_QWORD *)(a3 + 8)) >> 3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_1003936A8(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *v1 = 0;
  sub_100392F30(v3, v2);
  _Unwind_Resume(a1);
}

char *sub_1003936C4(char *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  char *v6;

  if (a4)
  {
    v6 = result;
    sub_100026E2C(result, a4);
    result = sub_100393748((uint64_t)(v6 + 16), a2, a3, *((char **)v6 + 1));
    *((_QWORD *)v6 + 1) = result;
  }
  return result;
}

void sub_100393728(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  sub_100161C00(&a9);
  _Unwind_Resume(a1);
}

char *sub_100393748(uint64_t a1, __int128 *a2, __int128 *a3, char *__dst)
{
  char *v4;
  __int128 *v6;
  __int128 v7;
  _QWORD v9[3];
  char v10;
  char *v11;
  char *v12;

  v4 = __dst;
  v11 = __dst;
  v12 = __dst;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        sub_100004678(v4, *(void **)v6, *((_QWORD *)v6 + 1));
        v4 = v12;
      }
      else
      {
        v7 = *v6;
        *((_QWORD *)v4 + 2) = *((_QWORD *)v6 + 2);
        *(_OWORD *)v4 = v7;
      }
      v6 = (__int128 *)((char *)v6 + 24);
      v4 += 24;
      v12 = v4;
    }
    while (v6 != a3);
  }
  v10 = 1;
  sub_100161B88((uint64_t)v9);
  return v4;
}

void sub_1003937F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100161B88((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t **sub_100393804(_QWORD *a1, unsigned __int8 *a2)
{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  uint64_t ***v6;
  uint64_t **result;
  unint64_t v8;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = *a2;
  v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = *a2;
    if (*(_QWORD *)&v2 <= v3)
      v5 = v3 % *(_QWORD *)&v2;
  }
  else
  {
    v5 = (v2.i32[0] - 1) & v3;
  }
  v6 = *(uint64_t ****)(*a1 + 8 * v5);
  if (!v6)
    return 0;
  for (result = *v6; result; result = (uint64_t **)*result)
  {
    v8 = (unint64_t)result[1];
    if (v8 == v3)
    {
      if (*((unsigned __int8 *)result + 16) == (_DWORD)v3)
        return result;
    }
    else
    {
      if (v4.u32[0] > 1uLL)
      {
        if (v8 >= *(_QWORD *)&v2)
          v8 %= *(_QWORD *)&v2;
      }
      else
      {
        v8 &= *(_QWORD *)&v2 - 1;
      }
      if (v8 != v5)
        return 0;
    }
  }
  return result;
}

void sub_1003938E8(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = a1;
}

void sub_1003938F4(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_impl(a1, a2, OS_LOG_TYPE_DEFAULT, a4, &a9, 2u);
}

void sub_100393904(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = a1;
}

void sub_100393914(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = a1;
}

void sub_100393920()
{
  void *v0;
  uint64_t v1;
  unsigned __int8 v2[24];
  int v3;
  _QWORD v4[3];
  int v5;
  _QWORD v6[3];
  int v7;
  _QWORD v8[3];
  int v9;
  _QWORD v10[3];
  int v11;
  _QWORD v12[3];
  int v13;
  _QWORD v14[3];
  int v15;
  _QWORD v16[3];
  int v17;
  _QWORD v18[3];
  int v19;
  _QWORD v20[3];
  int v21;
  _QWORD v22[3];
  int v23;
  _QWORD v24[3];
  int v25;

  v0 = objc_autoreleasePoolPush();
  qword_10085EEF8 = (uint64_t)os_log_create("com.apple.nearbyd", "Regulatory");
  qword_10085EF08 = 0;
  unk_10085EF10 = 0;
  qword_10085EF00 = 0;
  __cxa_atexit((void (*)(void *))sub_10038D454, &qword_10085EF00, (void *)&_mh_execute_header);
  qword_10085EF20 = 0;
  unk_10085EF28 = 0;
  qword_10085EF18 = 0;
  __cxa_atexit((void (*)(void *))sub_10038D484, &qword_10085EF18, (void *)&_mh_execute_header);
  qword_10085EF38 = 0;
  unk_10085EF40 = 0;
  qword_10085EF30 = 0;
  __cxa_atexit((void (*)(void *))sub_10038D4B4, &qword_10085EF30, (void *)&_mh_execute_header);
  xmmword_10085EF48 = 0u;
  unk_10085EF58 = 0u;
  dword_10085EF68 = 1065353216;
  __cxa_atexit((void (*)(void *))sub_10038D4E4, &xmmword_10085EF48, (void *)&_mh_execute_header);
  sub_10000BF04(v2, "01000000000000004D47575700000000");
  v3 = 0;
  sub_10000BF04(v4, "01000000000000004757570000000000");
  v5 = 1;
  sub_10000BF04(v6, "01000000000000004752530000000000");
  v7 = 1;
  sub_10000BF04(v8, "01000000000000005253000000000000");
  v9 = 1;
  sub_10000BF04(v10, "0100000000000000554D525300000000");
  v11 = 1;
  sub_10000BF04(v12, "0100000000000000524F570000000000");
  v13 = 1;
  sub_10000BF04(v14, "01000000000000005757000000000000");
  v15 = 1;
  sub_10000BF04(v16, "01000000000000004D57574A00000000");
  v17 = 0;
  sub_10000BF04(v18, "01000000000000004450450000000000");
  v19 = 1;
  sub_10000BF04(v20, "01000000000000004450000000000000");
  v21 = 1;
  sub_10000BF04(v22, "01000000000000004D57570000000000");
  v23 = 0;
  sub_10000BF04(v24, "01000000000000004D44500000000000");
  v25 = 0;
  sub_100391EB8((uint64_t)qword_10085FD58, v2, 12);
  v1 = 384;
  do
  {
    if ((char)v2[v1 - 9] < 0)
      operator delete(*(void **)&v2[v1 - 32]);
    v1 -= 32;
  }
  while (v1);
  __cxa_atexit((void (*)(void *))sub_10038D4E8, qword_10085FD58, (void *)&_mh_execute_header);
  objc_autoreleasePoolPop(v0);
}

void sub_100393BC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  uint64_t v12;

  v12 = 384;
  while (1)
  {
    if (*(char *)(v10 + v12 - 9) < 0)
      operator delete(*(void **)(v10 + v12 - 32));
    v12 -= 32;
    if (!v12)
      _Unwind_Resume(exception_object);
  }
}

void sub_100393C44()
{
  JUMPOUT(0x100393C3CLL);
}

uint64_t sub_100393C4C()
{
  if (qword_10085F000 != -1)
    dispatch_once(&qword_10085F000, &stru_100817998);
  return dword_100853310;
}

void sub_100393C8C(id a1)
{
  const __CFNumber *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const __CFNumber *v9;
  CFTypeID v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  unsigned int valuePtr;
  uint64_t v22;

  v1 = (const __CFNumber *)MGCopyAnswer(CFSTR("nhGhVMyvrWYe9U2ltAUImg"), 0);
  if (!v1)
  {
    sub_10036CAF0("Failed to get ChipID", v2, v3, v4, v5, v6, v7, v8, v22);
    return;
  }
  v9 = v1;
  v10 = CFGetTypeID(v1);
  if (v10 != CFNumberGetTypeID())
  {
    v19 = "ChipID has unexpected type";
LABEL_13:
    sub_10036CAF0(v19, v11, v12, v13, v14, v15, v16, v17, v20);
    goto LABEL_14;
  }
  valuePtr = 0;
  if (!CFNumberGetValue(v9, kCFNumberSInt32Type, &valuePtr))
  {
    v19 = "Failed to extract ChipID as a number";
    goto LABEL_13;
  }
  if (valuePtr == 8228)
  {
    dword_100853310 = 1;
    v18 = "Chip type 2";
    goto LABEL_11;
  }
  if (valuePtr != 8198)
  {
    v20 = valuePtr;
    v19 = "Unrecognized ChipID 0x%x";
    goto LABEL_13;
  }
  dword_100853310 = 0;
  v18 = "Chip type 1";
LABEL_11:
  sub_1000051BC(v18, v11, v12, v13, v14, v15, v16, v17, v20);
LABEL_14:
  CFRelease(v9);
}

void sub_100393D84(char **a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  size_t v16;
  _BYTE *v17;
  uint64_t v18;
  int v19;
  int v20;
  size_t v21;
  _BYTE *v22;
  size_t v23;
  int v24;
  uint64_t i;
  __int16 v26;
  _WORD *v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  __int16 *v41;
  __int16 *v42;
  __int16 v43;
  __int16 *v44;
  __int128 v45;
  __int128 v46;
  __int16 *v47;
  __int128 v48;
  __int128 v49;
  __int16 v50;
  char v51;
  unint64_t v53;
  int v54;
  __int16 v55;
  unsigned __int8 v56;
  uint64_t v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  _BYTE __p[40];
  _BYTE v62[25];
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  __int16 *v66[3];
  unsigned __int8 v67;
  __int16 v68;
  char v69;
  __int16 v70;
  unsigned __int8 v71;
  __int16 __dst;
  void **v73;
  _OWORD __src[64];
  uint64_t v75;

  __dst = 0;
  v71 = 0;
  v70 = 0;
  v69 = 0;
  v68 = 0;
  v67 = 0;
  sub_1003A1EE0(*a1, 2uLL, &__dst, 1);
  sub_1003A1EE0(*a1 + 2, 1uLL, &v71, 1);
  sub_1003A1EE0(*a1 + 3, 2uLL, &v70, 1);
  sub_1003A1EE0(*a1 + 5, 1uLL, &v69, 1);
  sub_1003A1EE0(*a1 + 6, 2uLL, &v68, 1);
  v75 = 0;
  sub_1003A1EE0(*a1 + 8, 1uLL, &v67, 1);
  sub_100394770(v66, v67);
  if (v67)
  {
    v10 = 0;
    v11 = 9;
    do
    {
      LOWORD(v57) = 0;
      __p[32] = 0;
      v62[0] = 0;
      v62[8] = 0;
      v62[16] = 0;
      v62[24] = 0;
      v64 = 0;
      v65 = 0;
      v63 = 0;
      v58 = 0u;
      v59 = 0u;
      v60 = 0u;
      memset(__p, 0, 25);
      v12 = &(*a1)[v11];
      v56 = 0;
      sub_1003A1EE0(v12, 1uLL, &v56, 1);
      v13 = sub_10036C6D0(v56);
      if ((v13 & 0xFF0000) == 0)
        __assert_rtn("decodeRangeCIREventVersion1", "roseCIRDataDecoderV1.cpp", 61, "packetType.has_value()");
      v14 = v11;
      LOWORD(v57) = v13;
      sub_1003A1EE0(&(*a1)[v11 + 1], 1uLL, (_BYTE *)&v57 + 2, 1);
      v15 = sub_100361DE4();
      v16 = v15;
      LOBYTE(__src[0]) = 0;
      v17 = (_BYTE *)v58;
      if ((unint64_t)v15 <= *((_QWORD *)&v58 + 1) - (_QWORD)v58)
      {
        if ((unint64_t)v15 < *((_QWORD *)&v58 + 1) - (_QWORD)v58)
          *((_QWORD *)&v58 + 1) = v58 + v15;
      }
      else
      {
        sub_1001F9D10(&v58, v15 - (*((_QWORD *)&v58 + 1) - v58), __src);
        v17 = (_BYTE *)v58;
      }
      v18 = v14 + 2;
      sub_1003A1EE0(&(*a1)[v18], v16, v17, 1);
      v19 = sub_100361EA8();
      v20 = v19;
      v21 = v19;
      LOBYTE(__src[0]) = 0;
      v22 = (_BYTE *)*((_QWORD *)&v59 + 1);
      if ((unint64_t)v19 <= (_QWORD)v60 - *((_QWORD *)&v59 + 1))
      {
        if ((unint64_t)v19 < (_QWORD)v60 - *((_QWORD *)&v59 + 1))
          *(_QWORD *)&v60 = *((_QWORD *)&v59 + 1) + v19;
      }
      else
      {
        sub_1001F9D10((_QWORD *)&v59 + 1, v19 - (v60 - *((_QWORD *)&v59 + 1)), __src);
        v22 = (_BYTE *)*((_QWORD *)&v59 + 1);
      }
      v23 = v16 + (int)v18;
      sub_1003A1EE0(&(*a1)[v23], v21, v22, 1);
      v24 = 0;
      v11 = v20 + v23;
      v53 = v10;
      do
      {
        if (((BYTE2(v57) >> v24) & 1) != 0)
        {
          bzero(__src, 0x400uLL);
          for (i = 0; i != 1024; i += 4)
          {
            LOWORD(v73) = 0;
            v55 = 0;
            sub_1003A1EE0(&(*a1)[v11 + i], 2uLL, &v73, 1);
            sub_1003A1EE0(&(*a1)[v11 + 2 + i], 2uLL, &v55, 1);
            v26 = (__int16)v73;
            v27 = (_WORD *)((char *)__src + i);
            *v27 = v55;
            v27[1] = v26;
          }
          v54 = v11;
          v28 = *(char **)&__p[8];
          if (*(_QWORD *)&__p[8] >= *(_QWORD *)&__p[16])
          {
            v30 = *(char **)__p;
            v31 = (uint64_t)(*(_QWORD *)&__p[8] - *(_QWORD *)__p) >> 10;
            v32 = v31 + 1;
            if ((unint64_t)(v31 + 1) >> 54)
              sub_100026E7C();
            v33 = *(_QWORD *)&__p[16] - *(_QWORD *)__p;
            if ((uint64_t)(*(_QWORD *)&__p[16] - *(_QWORD *)__p) >> 9 > v32)
              v32 = v33 >> 9;
            if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFC00)
              v34 = 0x3FFFFFFFFFFFFFLL;
            else
              v34 = v32;
            if (v34)
            {
              v35 = (char *)sub_10015321C((uint64_t)&__p[16], v34);
              v37 = v36;
              v30 = *(char **)__p;
              v28 = *(char **)&__p[8];
            }
            else
            {
              v35 = 0;
              v37 = 0;
            }
            v38 = &v35[1024 * v31];
            memcpy(v38, __src, 0x400uLL);
            v39 = v38;
            while (v28 != v30)
            {
              v28 -= 1024;
              v39 -= 1024;
              memcpy(v39, v28, 0x400uLL);
            }
            v40 = &v35[1024 * v37];
            v29 = v38 + 1024;
            *(_QWORD *)__p = v39;
            *(_QWORD *)&__p[8] = v38 + 1024;
            *(_QWORD *)&__p[16] = v40;
            if (v30)
              operator delete(v30);
            v10 = v53;
          }
          else
          {
            memcpy(*(void **)&__p[8], __src, 0x400uLL);
            v29 = v28 + 1024;
          }
          v11 = v54 + 1024;
          *(_QWORD *)&__p[8] = v29;
        }
        ++v24;
      }
      while (v24 != 3);
      v41 = v66[0];
      v42 = &v66[0][76 * v10];
      v43 = v57;
      *((_BYTE *)v42 + 2) = BYTE2(v57);
      *v42 = v43;
      if (v42 == (__int16 *)&v57)
      {
        v47 = &v41[76 * v10];
        v48 = *(_OWORD *)&__p[24];
        v49 = *(_OWORD *)v62;
        *(_OWORD *)((char *)v47 + 105) = *(_OWORD *)&v62[9];
        *((_OWORD *)v47 + 5) = v48;
        *((_OWORD *)v47 + 6) = v49;
      }
      else
      {
        sub_10019E578(&v41[76 * v10 + 4], (char *)v58, *((char **)&v58 + 1), *((_QWORD *)&v58 + 1) - v58);
        sub_10019E578(&v41[76 * v10 + 16], *((char **)&v59 + 1), (char *)v60, v60 - *((_QWORD *)&v59 + 1));
        sub_10039446C((char *)&v41[76 * v10 + 28], *(char **)__p, *(uint64_t *)&__p[8], (uint64_t)(*(_QWORD *)&__p[8] - *(_QWORD *)__p) >> 10);
        v44 = &v41[76 * v10];
        v45 = *(_OWORD *)&__p[24];
        v46 = *(_OWORD *)v62;
        *(_OWORD *)((char *)v44 + 105) = *(_OWORD *)&v62[9];
        *((_OWORD *)v44 + 5) = v45;
        *((_OWORD *)v44 + 6) = v46;
        sub_100394574((uint64_t *)v44 + 16, v63, v64, (v64 - v63) >> 5);
      }
      *(_QWORD *)&__src[0] = &v63;
      sub_100153338((void ***)__src);
      if (*(_QWORD *)__p)
      {
        *(_QWORD *)&__p[8] = *(_QWORD *)__p;
        operator delete(*(void **)__p);
      }
      if (*((_QWORD *)&v59 + 1))
      {
        *(_QWORD *)&v60 = *((_QWORD *)&v59 + 1);
        operator delete(*((void **)&v59 + 1));
      }
      if ((_QWORD)v58)
      {
        *((_QWORD *)&v58 + 1) = v58;
        operator delete((void *)v58);
      }
      ++v10;
    }
    while (v10 < v67);
  }
  v50 = __dst;
  v51 = sub_10036B814(v71, v3, v4, v5, v6, v7, v8, v9);
  v57 = 0;
  v58 = 0uLL;
  sub_100369CCC((uint64_t)__src, v50, v51, v70, v69, &v75, v66, &v57);
  *(_OWORD *)a2 = __src[0];
  *(_QWORD *)(a2 + 16) = *(_QWORD *)&__src[1];
  *(_OWORD *)(a2 + 24) = *(_OWORD *)((char *)&__src[1] + 8);
  *(_QWORD *)(a2 + 40) = *((_QWORD *)&__src[2] + 1);
  *((_QWORD *)&__src[1] + 1) = 0;
  *(_QWORD *)&__src[2] = 0;
  *(_OWORD *)(a2 + 48) = __src[3];
  *(_QWORD *)(a2 + 64) = *(_QWORD *)&__src[4];
  *((_QWORD *)&__src[2] + 1) = 0;
  memset(&__src[3], 0, 24);
  *(_BYTE *)(a2 + 72) = 1;
  v73 = (void **)&__src[3];
  sub_100153338(&v73);
  v73 = (void **)&__src[1] + 1;
  sub_1001533C4(&v73);
  v73 = (void **)&v57;
  sub_100153338(&v73);
  *(_QWORD *)&__src[0] = v66;
  sub_1001533C4((void ***)__src);
}

void sub_1003943BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void **a45,void **a46)
{
  uint64_t v46;
  uint64_t v47;

  *(_QWORD *)(v47 + 192) = v46;
  sub_100153338(&a45);
  a46 = (void **)&a40;
  sub_1001533C4(&a46);
  _Unwind_Resume(a1);
}

char *sub_10039446C(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 10)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 54)
      sub_100026E7C();
    v10 = v8 >> 9;
    if (v8 >> 9 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFC00)
      v11 = 0x3FFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = sub_1001531DC(v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 10;
  if (v15 >= a4)
    goto LABEL_16;
  v16 = &__src[1024 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v12 = &v9[v17];
  return result;
}

void sub_100394574(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  char v20;
  char v21;

  v8 = (uint64_t)(a1 + 2);
  v9 = *a1;
  if (a4 > (a1[2] - *a1) >> 5)
  {
    sub_1003946C8(a1);
    if (a4 >> 59)
      sub_100026E7C();
    v10 = a1[2] - *a1;
    v11 = v10 >> 4;
    if (v10 >> 4 <= a4)
      v11 = a4;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0)
      v12 = 0x7FFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    sub_1001534CC(a1, v12);
    v13 = sub_100153540(v8, a2, a3, a1[1]);
    goto LABEL_11;
  }
  v14 = (a1[1] - v9) >> 5;
  if (v14 < a4)
  {
    v15 = a2 + 32 * v14;
    sub_100394700((uint64_t)&v20, a2, v15, v9);
    v13 = sub_100153540(v8, v15, a3, a1[1]);
LABEL_11:
    a1[1] = v13;
    return;
  }
  sub_100394700((uint64_t)&v21, a2, a3, v9);
  v17 = v16;
  v18 = a1[1];
  if (v18 != v16)
  {
    do
    {
      v19 = *(void **)(v18 - 24);
      if (v19)
      {
        *(_QWORD *)(v18 - 16) = v19;
        operator delete(v19);
      }
      v18 -= 32;
    }
    while (v18 != v17);
  }
  a1[1] = v17;
}

void sub_1003946B8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1003946C0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1003946C8(uint64_t *a1)
{
  if (*a1)
  {
    sub_100153378(a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t sub_100394700(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;

  v5 = a2;
  if (a2 != a3)
  {
    do
    {
      *(_DWORD *)a4 = *(_DWORD *)v5;
      if (v5 != a4)
        sub_10019E578((_QWORD *)(a4 + 8), *(char **)(v5 + 8), *(char **)(v5 + 16), *(_QWORD *)(v5 + 16) - *(_QWORD *)(v5 + 8));
      v5 += 32;
      a4 += 32;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

_QWORD *sub_100394770(_QWORD *a1, unint64_t a2)
{
  char *v4;
  size_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_100152E98(a1, a2);
    v4 = (char *)a1[1];
    v5 = 152 * ((152 * a2 - 152) / 0x98) + 152;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_100394804(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_1001533C4(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100394818(uint64_t a1)
{
  unsigned int v2;

  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 112) = 0;
  *(_BYTE *)(a1 + 120) = 0;
  *(_BYTE *)(a1 + 213) = 0;
  *(_BYTE *)(a1 + 216) = 0;
  *(_BYTE *)(a1 + 568) = 0;
  *(_DWORD *)(a1 + 576) = 999;
  *(_QWORD *)(a1 + 584) = 850045863;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_QWORD *)(a1 + 640) = 0;
  *(_QWORD *)(a1 + 648) = 850045863;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_OWORD *)(a1 + 688) = 0u;
  *(_QWORD *)(a1 + 704) = 0;
  *(_QWORD *)(a1 + 736) = 0;
  sub_10039492C(a1);
  v2 = sub_100393C4C();
  *(_DWORD *)(a1 + 744) = v2;
  if (v2 <= 2)
    *(_DWORD *)(a1 + 748) = dword_10047C480[v2];
  return a1;
}

void sub_1003948CC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  std::mutex *v3;
  std::mutex *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;

  v6 = v5;
  v8 = *(_QWORD **)(v1 + 736);
  if (v8 == v6)
  {
    v9 = v6;
    v10 = 4;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v10 = 5;
    v9 = *(_QWORD **)(v1 + 736);
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_6:
  std::mutex::~mutex(v4);
  std::mutex::~mutex(v3);
  sub_10000BB68(v2);
  sub_10000BA78(v1);
  _Unwind_Resume(a1);
}

void sub_10039492C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = MGGetProductType();
  if (v2 > 2625074842)
  {
    if (v2 > 3571532205)
    {
      if (v2 > 3825599859)
      {
        if (v2 > 3885279869)
        {
          switch(v2)
          {
            case 3885279870:
              v10 = 3;
              goto LABEL_113;
            case 4068102502:
              v10 = 120;
              goto LABEL_113;
            case 4201643249:
              v10 = 6;
              goto LABEL_113;
          }
        }
        else
        {
          switch(v2)
          {
            case 3825599860:
              v10 = 16;
              goto LABEL_113;
            case 3839750255:
              v10 = 117;
              goto LABEL_113;
            case 3867318491:
              v10 = 113;
              goto LABEL_113;
          }
        }
      }
      else if (v2 > 3742999857)
      {
        switch(v2)
        {
          case 3742999858:
            v10 = 110;
            goto LABEL_113;
          case 3767261006:
            v10 = 104;
            goto LABEL_113;
          case 3819635030:
            v10 = 112;
            goto LABEL_113;
        }
      }
      else
      {
        switch(v2)
        {
          case 3571532206:
            v10 = 102;
            goto LABEL_113;
          case 3585085679:
            v10 = 8;
            goto LABEL_113;
          case 3663011141:
            v10 = 109;
            goto LABEL_113;
        }
      }
    }
    else if (v2 > 2941181570)
    {
      if (v2 > 3001488777)
      {
        switch(v2)
        {
          case 3001488778:
            v10 = 5;
            goto LABEL_113;
          case 3143587592:
            v10 = 118;
            goto LABEL_113;
          case 3348380076:
            v10 = 200;
            goto LABEL_113;
        }
      }
      else
      {
        switch(v2)
        {
          case 2941181571:
            v10 = 18;
            goto LABEL_113;
          case 2943112657:
            v10 = 100;
            goto LABEL_113;
          case 2979575960:
            v10 = 106;
            goto LABEL_113;
        }
      }
    }
    else if (v2 > 2793418700)
    {
      switch(v2)
      {
        case 2793418701:
          v10 = 15;
          goto LABEL_113;
        case 2795618603:
          v10 = 21;
          goto LABEL_113;
        case 2940697645:
          v10 = 13;
          goto LABEL_113;
      }
    }
    else
    {
      switch(v2)
      {
        case 2625074843:
          v10 = 114;
          goto LABEL_113;
        case 2688879999:
          v10 = 14;
          goto LABEL_113;
        case 2722529672:
          v10 = 2;
          goto LABEL_113;
      }
    }
LABEL_112:
    v10 = 997;
    goto LABEL_113;
  }
  if (v2 > 1408738133)
  {
    if (v2 > 2021146988)
    {
      if (v2 > 2085054104)
      {
        switch(v2)
        {
          case 2085054105:
            v10 = 111;
            goto LABEL_113;
          case 2132302344:
            v10 = 101;
            goto LABEL_113;
          case 2309863438:
            v10 = 10;
            goto LABEL_113;
        }
      }
      else
      {
        switch(v2)
        {
          case 2021146989:
            v10 = 12;
            goto LABEL_113;
          case 2080700391:
            v10 = 0;
            goto LABEL_113;
          case 2084894489:
            v10 = 115;
            goto LABEL_113;
        }
      }
    }
    else if (v2 > 1554479184)
    {
      switch(v2)
      {
        case 1554479185:
          v10 = 121;
          goto LABEL_113;
        case 1602181456:
          v10 = 107;
          goto LABEL_113;
        case 1770142589:
          v10 = 116;
          goto LABEL_113;
      }
    }
    else
    {
      switch(v2)
      {
        case 1408738134:
          v10 = 103;
          goto LABEL_113;
        case 1434404433:
          v10 = 11;
          goto LABEL_113;
        case 1540760353:
          v10 = 201;
          goto LABEL_113;
      }
    }
    goto LABEL_112;
  }
  if (v2 > 749116820)
  {
    if (v2 > 1169082143)
    {
      switch(v2)
      {
        case 1169082144:
          v10 = 4;
          goto LABEL_113;
        case 1280909812:
          v10 = 105;
          goto LABEL_113;
        case 1371389549:
          v10 = 1;
          goto LABEL_113;
      }
    }
    else
    {
      switch(v2)
      {
        case 749116821:
          v10 = 119;
          goto LABEL_113;
        case 851437781:
          v10 = 19;
          goto LABEL_113;
        case 1060988941:
          v10 = 7;
          goto LABEL_113;
      }
    }
    goto LABEL_112;
  }
  if (v2 > 425046864)
  {
    switch(v2)
    {
      case 425046865:
        v10 = 108;
        goto LABEL_113;
      case 574536383:
        v10 = 20;
        goto LABEL_113;
      case 689804742:
        v10 = 9;
        goto LABEL_113;
    }
    goto LABEL_112;
  }
  if (v2 == -1)
  {
    v10 = 999;
    goto LABEL_113;
  }
  if (v2 == 133314240)
  {
    v10 = 17;
    goto LABEL_113;
  }
  if (v2 != 330877086)
    goto LABEL_112;
  v10 = 22;
LABEL_113:
  *(_DWORD *)(a1 + 576) = v10;
  sub_1000051BC("RoseParameterCache: device type %d", v3, v4, v5, v6, v7, v8, v9, v10);
}

void sub_100394ED8(uint64_t a1, __int128 *a2)
{
  std::mutex *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v4 = (std::mutex *)(a1 + 648);
  std::mutex::lock((std::mutex *)(a1 + 648));
  sub_10019E9A4(a1);
  sub_10000BCE8((_QWORD *)a1, a2);
  *(_BYTE *)(a1 + 112) = 1;
  sub_1000051BC("RoseParameterCache::cacheHelloResponse", v5, v6, v7, v8, v9, v10, v11, v19);
  sub_100394F54((_BYTE *)a1, v12, v13, v14, v15, v16, v17, v18);
  std::mutex::unlock(v4);
}

void sub_100394F40(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_100394F54(_BYTE *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *__p[2];
  char v51;

  if (a1[112])
    v9 = "cached";
  else
    v9 = "not cached";
  sub_1000051BC("RoseParameterCache: HelloResponse %s", a2, a3, a4, a5, a6, a7, a8, (uint64_t)v9);
  if (a1[213])
    v17 = "cached";
  else
    v17 = "not cached";
  sub_1000051BC("RoseParameterCache: AlishaCapabilities %s", v10, v11, v12, v13, v14, v15, v16, (uint64_t)v17);
  if (a1[568])
    v25 = "cached";
  else
    v25 = "not cached";
  sub_1000051BC("RoseParameterCache: RoseCalFileParser %s", v18, v19, v20, v21, v22, v23, v24, (uint64_t)v25);
  if (a1[568])
  {
    v26 = sub_10000BF04(__p, "AOAtoPDOAMapping_CV_Ch5");
    sub_100395464((uint64_t)v26, (uint64_t)(a1 + 280), (uint64_t)__p, v27, v28, v29, v30, v31);
    if (v51 < 0)
      operator delete(__p[0]);
    if (!a1[568])
      goto LABEL_23;
    v32 = sub_10000BF04(__p, "AOAtoPDOAMapping_CH_Ch5");
    sub_100395464((uint64_t)v32, (uint64_t)(a1 + 344), (uint64_t)__p, v33, v34, v35, v36, v37);
    if (v51 < 0)
      operator delete(__p[0]);
    if (!a1[568])
      goto LABEL_23;
    v38 = sub_10000BF04(__p, "AOAtoPDOAMapping_CV_Ch9");
    sub_100395464((uint64_t)v38, (uint64_t)(a1 + 408), (uint64_t)__p, v39, v40, v41, v42, v43);
    if (v51 < 0)
      operator delete(__p[0]);
    if (!a1[568])
LABEL_23:
      sub_10000BA44();
    v44 = sub_10000BF04(__p, "AOAtoPDOAMapping_CH_Ch9");
    sub_100395464((uint64_t)v44, (uint64_t)(a1 + 472), (uint64_t)__p, v45, v46, v47, v48, v49);
    if (v51 < 0)
      operator delete(__p[0]);
  }
}

void sub_1003950C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1003950F0(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if (*(_BYTE *)(a1 + 213))
    *(_BYTE *)(a1 + 213) = 0;
  v9 = *a2;
  *(_OWORD *)(a1 + 136) = a2[1];
  *(_OWORD *)(a1 + 120) = v9;
  v10 = a2[2];
  v11 = a2[3];
  v12 = a2[4];
  *(_OWORD *)(a1 + 197) = *(__int128 *)((char *)a2 + 77);
  *(_OWORD *)(a1 + 184) = v12;
  *(_OWORD *)(a1 + 168) = v11;
  *(_OWORD *)(a1 + 152) = v10;
  *(_BYTE *)(a1 + 213) = 1;
  sub_1000051BC("RoseParameterCache::cacheAlishaCapabilities", (uint64_t)a2, a3, a4, a5, a6, a7, a8, v20);
  sub_100394F54((_BYTE *)a1, v13, v14, v15, v16, v17, v18, v19);
}

void sub_100395158(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  char v36;

  if (*(_BYTE *)(a1 + 568))
  {
    sub_1000051BC("RoseParameterCache::cacheRoseCalFileParser: returning because roseCalFileParser is already cached", (uint64_t)a2, a3, a4, a5, a6, a7, a8, a9);
    return;
  }
  sub_100395250(a1 + 216, a2);
  sub_1000051BC("RoseParameterCache::cacheRoseCalFileParser", v10, v11, v12, v13, v14, v15, v16, v33);
  sub_100394F54((_BYTE *)a1, v17, v18, v19, v20, v21, v22, v23);
  std::mutex::lock((std::mutex *)(a1 + 584));
  if (*(_QWORD *)(a1 + 736))
  {
    sub_1000051BC("RoseParameterCache::cacheRoseCalFileParser: start executing CalFileParsingDone callback function", v24, v25, v26, v27, v28, v29, v30, v34);
    if (*(_BYTE *)(a1 + 568) && sub_1001A8874((unsigned __int8 *)(a1 + 272)))
    {
      v35 = 1;
      v31 = *(_QWORD *)(a1 + 736);
      if (v31)
      {
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v31 + 48))(v31, &v35);
        goto LABEL_10;
      }
    }
    else
    {
      v36 = 0;
      v32 = *(_QWORD *)(a1 + 736);
      if (v32)
      {
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v32 + 48))(v32, &v36);
        goto LABEL_10;
      }
    }
    sub_100027BC4();
  }
LABEL_10:
  std::mutex::unlock((std::mutex *)(a1 + 584));
}

void sub_10039523C(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100395250(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;

  sub_1003955B8(a1);
  v4 = *a2;
  v5 = a2[1];
  v6 = a2[2];
  *(_BYTE *)(a1 + 48) = *((_BYTE *)a2 + 48);
  *(_OWORD *)(a1 + 16) = v5;
  *(_OWORD *)(a1 + 32) = v6;
  *(_OWORD *)a1 = v4;
  sub_1003957E8(a1 + 56, (uint64_t)a2 + 56);
  *(_WORD *)(a1 + 320) = *((_WORD *)a2 + 160);
  *(_QWORD *)(a1 + 336) = 0;
  *(_QWORD *)(a1 + 344) = 0;
  *(_QWORD *)(a1 + 328) = 0;
  v7 = *((_QWORD *)a2 + 42);
  *(_QWORD *)(a1 + 328) = *((_QWORD *)a2 + 41);
  *(_QWORD *)(a1 + 336) = v7;
  *(_QWORD *)(a1 + 344) = *((_QWORD *)a2 + 43);
  *((_QWORD *)a2 + 41) = 0;
  *((_QWORD *)a2 + 42) = 0;
  *((_QWORD *)a2 + 43) = 0;
  *(_BYTE *)(a1 + 352) = 1;
  return a1;
}

void sub_1003952CC(id a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void **v9;
  std::string::size_type v10;
  std::string *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  std::string::size_type v19;
  char v20;
  __int128 *v21;
  void *__p[2];
  unsigned __int8 v23;
  std::string v24;
  uint64_t v25;
  _QWORD v26[2];

  v25 = 1;
  v8 = (char *)container_system_group_path_for_identifier(0, "systemgroup.com.apple.nearbyd.datastore", &v25);
  if (!v8)
    sub_1003F0E0C(&v25, v1, v2, v3, v4, v5, v6, v7);
  sub_10000BF04(&v24, v8);
  sub_10000BF04(__p, "/Library/");
  if ((v23 & 0x80u) == 0)
    v9 = __p;
  else
    v9 = (void **)__p[0];
  if ((v23 & 0x80u) == 0)
    v10 = v23;
  else
    v10 = (std::string::size_type)__p[1];
  v11 = std::string::append(&v24, (const std::string::value_type *)v9, v10);
  v19 = v11->__r_.__value_.__r.__words[0];
  v26[0] = v11->__r_.__value_.__l.__size_;
  *(_QWORD *)((char *)v26 + 7) = *(std::string::size_type *)((char *)&v11->__r_.__value_.__r.__words[1] + 7);
  v20 = HIBYTE(v11->__r_.__value_.__r.__words[2]);
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if (byte_10085F01F < 0)
    operator delete((void *)xmmword_10085F008);
  *(_QWORD *)&xmmword_10085F008 = v19;
  *((_QWORD *)&xmmword_10085F008 + 1) = v26[0];
  *(_QWORD *)((char *)&xmmword_10085F008 + 15) = *(_QWORD *)((char *)v26 + 7);
  byte_10085F01F = v20;
  if ((char)v23 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  if (byte_10085F01F >= 0)
    v21 = &xmmword_10085F008;
  else
    v21 = (__int128 *)xmmword_10085F008;
  sub_1000051BC("system group container path: %s", v12, v13, v14, v15, v16, v17, v18, (uint64_t)v21);
  free(v8);
}

void sub_100395428(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

void sub_100395464(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;

  if (*(char *)(a3 + 23) >= 0)
    v8 = a3;
  else
    v8 = *(_QWORD *)a3;
  if (*(_BYTE *)(a2 + 56))
    sub_1000051BC("RoseParameterCache: mapping %s cached (%zu x %zu)", a2, a3, a4, a5, a6, a7, a8, v8);
  else
    sub_1000051BC("RoseParameterCache: mapping %s not cached", a2, a3, a4, a5, a6, a7, a8, v8);
}

void sub_1003954BC(uint64_t a1, uint64_t a2)
{
  std::mutex *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = (std::mutex *)(a1 + 584);
  std::mutex::lock((std::mutex *)(a1 + 584));
  sub_1000051BC("RoseParameterCache: CalFileParsingDone callback function is registered", v5, v6, v7, v8, v9, v10, v11, v12);
  sub_100395520((_QWORD *)(a1 + 712), a2);
  std::mutex::unlock(v4);
}

void sub_10039550C(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_100395520(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;

  sub_100027674((uint64_t)v6, a2);
  sub_100395914(v6, a1);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void sub_1003955B8(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void **v6;

  if (*(_BYTE *)(a1 + 352))
  {
    v6 = (void **)(a1 + 328);
    sub_10000BC08(&v6);
    if (*(_BYTE *)(a1 + 312))
    {
      v2 = *(void **)(a1 + 288);
      if (v2)
      {
        *(_QWORD *)(a1 + 296) = v2;
        operator delete(v2);
      }
    }
    if (*(_BYTE *)(a1 + 248))
    {
      v3 = *(void **)(a1 + 224);
      if (v3)
      {
        *(_QWORD *)(a1 + 232) = v3;
        operator delete(v3);
      }
    }
    if (*(_BYTE *)(a1 + 184))
    {
      v4 = *(void **)(a1 + 160);
      if (v4)
      {
        *(_QWORD *)(a1 + 168) = v4;
        operator delete(v4);
      }
    }
    if (*(_BYTE *)(a1 + 120))
    {
      v5 = *(void **)(a1 + 96);
      if (v5)
      {
        *(_QWORD *)(a1 + 104) = v5;
        operator delete(v5);
      }
    }
    *(_BYTE *)(a1 + 352) = 0;
  }
}

uint64_t sub_100395658(uint64_t a1)
{
  std::mutex *v2;
  __int16 v3;
  int v4;
  int v5;
  int v6;

  v2 = (std::mutex *)(a1 + 648);
  std::mutex::lock((std::mutex *)(a1 + 648));
  if (*(_BYTE *)(a1 + 112))
  {
    v3 = *(_WORD *)(a1 + 26);
    v4 = v3 & 0xFF00;
    v5 = v3;
    v6 = 0x10000;
  }
  else
  {
    v6 = 0;
    v5 = 0;
    v4 = 0;
  }
  std::mutex::unlock(v2);
  return v5 | v6 | v4;
}

BOOL sub_1003956C0(uint64_t a1)
{
  return sub_100360DCC(*(_DWORD *)(a1 + 576));
}

uint64_t sub_1003956C8(uint64_t a1)
{
  return sub_100360DDC(*(_DWORD *)(a1 + 576));
}

BOOL sub_1003956D0(uint64_t a1)
{
  return sub_100360ED4(*(_DWORD *)(a1 + 576));
}

uint64_t sub_1003956D8(uint64_t a1)
{
  return sub_100360E7C(*(_DWORD *)(a1 + 576));
}

BOOL sub_1003956E0(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 744) & 0xFFFFFFFD) != 0;
}

uint64_t sub_1003956F0(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  result = sub_100360E7C(*(_DWORD *)(a1 + 576));
  if ((_DWORD)result)
  {
    v3 = sub_100395658(a1);
    return (v3 & 0xFF0000) != 0 && (unsigned __int16)v3 == 6;
  }
  return result;
}

BOOL sub_100395734(uint64_t a1)
{
  return *(_DWORD *)(a1 + 744) == 1;
}

BOOL sub_100395744(uint64_t a1)
{
  return sub_100360FE4(*(_DWORD *)(a1 + 576));
}

BOOL sub_10039574C(uint64_t a1)
{
  _BOOL8 result;
  uint64_t v3;

  result = sub_1000069CC(*(_DWORD *)(a1 + 576));
  if (result)
  {
    v3 = sub_100395658(a1);
    return (v3 & 0xFF0000) != 0 && (unsigned __int16)v3 == 6;
  }
  return result;
}

uint64_t sub_100395790(uint64_t a1)
{
  return sub_10036100C(*(_DWORD *)(a1 + 576));
}

BOOL sub_100395798(uint64_t a1)
{
  return *(_DWORD *)(a1 + 744) == 1 && sub_1000069CC(*(_DWORD *)(a1 + 576));
}

uint64_t sub_1003957B4(uint64_t a1)
{
  uint64_t v1;
  unsigned int v2;

  v1 = sub_100395658(a1);
  if ((unsigned __int16)v1 - 5 >= 2)
    v2 = 295;
  else
    v2 = 310;
  if ((v1 & 0xFF0000) != 0)
    return v2;
  else
    return 0;
}

__n128 sub_1003957E8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;
  __int128 v6;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 64) = 0;
  if (*(_BYTE *)(a2 + 64))
  {
    v2 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    *(_OWORD *)(a1 + 24) = v2;
    *(_QWORD *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    result = *(__n128 *)(a2 + 40);
    *(__n128 *)(a1 + 40) = result;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a2 + 40) = 0;
    *(_QWORD *)(a2 + 48) = 0;
    *(_QWORD *)(a2 + 56) = 0;
    *(_BYTE *)(a1 + 64) = 1;
  }
  *(_BYTE *)(a1 + 72) = 0;
  *(_BYTE *)(a1 + 128) = 0;
  if (*(_BYTE *)(a2 + 128))
  {
    v4 = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 88) = v4;
    *(_QWORD *)(a1 + 112) = 0;
    *(_QWORD *)(a1 + 120) = 0;
    *(_QWORD *)(a1 + 104) = 0;
    result = *(__n128 *)(a2 + 104);
    *(__n128 *)(a1 + 104) = result;
    *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
    *(_QWORD *)(a2 + 104) = 0;
    *(_QWORD *)(a2 + 112) = 0;
    *(_QWORD *)(a2 + 120) = 0;
    *(_BYTE *)(a1 + 128) = 1;
  }
  *(_BYTE *)(a1 + 136) = 0;
  *(_BYTE *)(a1 + 192) = 0;
  if (*(_BYTE *)(a2 + 192))
  {
    v5 = *(_OWORD *)(a2 + 152);
    *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
    *(_OWORD *)(a1 + 152) = v5;
    *(_QWORD *)(a1 + 176) = 0;
    *(_QWORD *)(a1 + 184) = 0;
    *(_QWORD *)(a1 + 168) = 0;
    result = *(__n128 *)(a2 + 168);
    *(__n128 *)(a1 + 168) = result;
    *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
    *(_QWORD *)(a2 + 168) = 0;
    *(_QWORD *)(a2 + 176) = 0;
    *(_QWORD *)(a2 + 184) = 0;
    *(_BYTE *)(a1 + 192) = 1;
  }
  *(_BYTE *)(a1 + 200) = 0;
  *(_BYTE *)(a1 + 256) = 0;
  if (*(_BYTE *)(a2 + 256))
  {
    v6 = *(_OWORD *)(a2 + 216);
    *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
    *(_OWORD *)(a1 + 216) = v6;
    *(_QWORD *)(a1 + 240) = 0;
    *(_QWORD *)(a1 + 248) = 0;
    *(_QWORD *)(a1 + 232) = 0;
    result = *(__n128 *)(a2 + 232);
    *(__n128 *)(a1 + 232) = result;
    *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
    *(_QWORD *)(a2 + 232) = 0;
    *(_QWORD *)(a2 + 240) = 0;
    *(_QWORD *)(a2 + 248) = 0;
    *(_BYTE *)(a1 + 256) = 1;
  }
  return result;
}

_QWORD *sub_100395914(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[3];

  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_100395A7C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_1000131D8(a1);
}

uint64_t sub_100395A88(uint64_t result, _QWORD *a2, uint64_t a3, int a4)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  *(_QWORD *)result = 850045863;
  *(_OWORD *)(result + 8) = 0u;
  *(_OWORD *)(result + 24) = 0u;
  *(_OWORD *)(result + 40) = 0u;
  *(_QWORD *)(result + 56) = 0;
  v4 = a2[1];
  *(_QWORD *)(result + 64) = *a2;
  *(_QWORD *)(result + 72) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *(_QWORD *)(result + 80) = a3;
  *(_DWORD *)(result + 88) = a4;
  return result;
}

uint64_t sub_100395AD4(_QWORD *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  int v31;
  char *v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  int v37;
  unint64_t *v38;
  unint64_t v39;
  int v40;
  void *v41;
  unint64_t *p_shared_owners;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  int v48;
  int v49;
  unint64_t *v50;
  unint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  _BYTE *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  int v61;
  _BYTE *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _BYTE *v70;
  void *v71;
  __int16 v72;
  __int16 v73;
  unint64_t *v74;
  unint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  char *v78;
  _BYTE *v79;
  unint64_t *v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  unsigned __int16 v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  _BYTE *v98;
  int v99;
  int v100;
  unint64_t *v101;
  unint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  unint64_t *v105;
  unint64_t v106;
  char *v107;
  __int128 v108;
  uint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  unint64_t v112;
  unint64_t *v113;
  unint64_t v114;
  _QWORD *v115;
  uint64_t v116;
  int v117;
  int v118;
  unint64_t *v119;
  unint64_t v120;
  _QWORD *v121;
  uint64_t v122;
  unsigned __int16 v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  _BYTE *v131;
  int v132;
  int v133;
  unint64_t *v134;
  unint64_t v135;
  _QWORD *v136;
  uint64_t v137;
  int v138;
  int v139;
  unint64_t *v140;
  unint64_t v141;
  _QWORD *v142;
  uint64_t v143;
  unint64_t *v144;
  unint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  unint64_t v149;
  unint64_t *v150;
  unint64_t v151;
  _QWORD *v152;
  uint64_t v153;
  unint64_t *v154;
  unint64_t v155;
  char *v156;
  uint64_t v157;
  unint64_t v158;
  unint64_t v159;
  unint64_t *v160;
  unint64_t v161;
  _QWORD *v162;
  uint64_t v163;
  int v164;
  int v165;
  unint64_t *v166;
  unint64_t v167;
  _QWORD *v168;
  uint64_t v169;
  _QWORD *v170;
  uint64_t v171;
  char *v172;
  uint64_t v173;
  _QWORD *v174;
  uint64_t v175;
  char *v176;
  uint64_t v177;
  uint64_t v178;
  unsigned __int16 __dst;
  uint64_t v180;
  std::__shared_weak_count *v181;
  int v182;
  __int128 v183;
  __int16 v184;
  __int128 __p;
  uint64_t v186;
  uint64_t v187;
  std::__shared_weak_count *v188;
  __int128 v189;
  __int128 v190;
  _OWORD v191[2];
  uint64_t v192;
  std::__shared_weak_count *v193;
  int v194;
  uint64_t v195;
  std::__shared_weak_count *v196;
  unint64_t v197;
  uint64_t v198;
  std::__shared_weak_count *v199;
  unint64_t v200;
  uint64_t v201;
  std::__shared_weak_count *v202;
  __int128 v203;
  int v204;
  uint64_t v205;
  std::__shared_weak_count *v206;
  int v207;
  __int16 v208;
  _QWORD v209[2];
  __int16 v210;
  _QWORD v211[3];
  uint64_t v212;
  std::__shared_weak_count *v213;
  int v214;
  uint64_t v215;
  std::__shared_weak_count *v216;
  int v217;
  uint64_t v218;
  std::__shared_weak_count *v219;
  __int16 v220;
  uint64_t v221;
  std::__shared_weak_count *v222;
  int v223;
  uint64_t v224;
  std::__shared_weak_count *v225;
  int v226;
  uint64_t v227;
  std::__shared_weak_count *v228;
  int v229;
  _QWORD v230[2];
  uint64_t v231[14];
  uint64_t v232;
  std::__shared_weak_count *v233;
  _BYTE v234[24];
  _BYTE *v235;
  _BYTE v236[24];
  _BYTE *v237;
  _BYTE v238[24];
  _BYTE *v239;
  _BYTE v240[24];
  _BYTE *v241;
  _BYTE v242[24];
  _BYTE *v243;
  _BYTE v244[24];
  _BYTE *v245;
  _BYTE v246[24];
  _BYTE *v247;
  _BYTE v248[24];
  _BYTE *v249;
  _BYTE v250[24];
  _BYTE *v251;
  _BYTE v252[24];
  _BYTE *v253;
  _BYTE v254[24];
  _BYTE *v255;
  _BYTE v256[24];
  _BYTE *v257;
  _BYTE v258[24];
  _BYTE *v259;
  _BYTE v260[24];
  _BYTE *v261;
  _BYTE v262[24];
  _BYTE *v263;
  _BYTE v264[24];
  _BYTE *v265;
  __int128 v266;
  int v267;
  char v268;
  char *v269;
  _BYTE v270[32];
  _OWORD v271[5];

  v233 = 0;
  v232 = 0;
  v9 = (std::__shared_weak_count *)a1[9];
  if (!v9 || (v12 = std::__shared_weak_count::lock(v9), (v233 = v12) == 0) || (v13 = a1[8], (v232 = v13) == 0))
  {
    sub_1000051BC("No response listener, ignoring response packet", a2, (uint64_t)a3, a4, a5, a6, a7, a8, v178);
    goto LABEL_14;
  }
  v14 = v12;
  v15 = sub_10036A9E4(a2);
  if (!v15)
  {
    v40 = sub_10036AA4C(a2);
    if (v40 <= 79)
    {
      switch(v40)
      {
        case 0:
          sub_10039702C(a3, v270);
          v41 = sub_100004784();
          sub_100394ED8((uint64_t)v41, (__int128 *)v270);
          v230[0] = v13;
          v230[1] = v14;
          p_shared_owners = (unint64_t *)&v14->__shared_owners_;
          do
            v43 = __ldxr(p_shared_owners);
          while (__stxr(v43 + 1, p_shared_owners));
          sub_1003974BC(v231, (__int128 *)v270);
          sub_100397540((uint64_t)&v266, (uint64_t)v230);
          sub_100397624((uint64_t)v230);
          v44 = a1[10];
          v45 = (uint64_t)v269;
          if (!v269)
            goto LABEL_33;
          if (v269 == (char *)&v266)
          {
            v265 = v264;
            (*(void (**)(__int128 *, _BYTE *))(v266 + 24))(&v266, v264);
          }
          else
          {
            v45 = (*(uint64_t (**)(void))(*(_QWORD *)v269 + 16))();
LABEL_33:
            v265 = (_BYTE *)v45;
          }
          sub_10036159C(v44, (uint64_t)v264);
          v174 = v265;
          if (v265 == v264)
          {
            v175 = 4;
            v174 = v264;
          }
          else
          {
            if (!v265)
              goto LABEL_175;
            v175 = 5;
          }
          (*(void (**)(void))(*v174 + 8 * v175))();
LABEL_175:
          v176 = v269;
          if (v269 == (char *)&v266)
          {
            v177 = 4;
            v176 = (char *)&v266;
          }
          else
          {
            if (!v269)
              goto LABEL_180;
            v177 = 5;
          }
          (*(void (**)(void))(*(_QWORD *)v176 + 8 * v177))();
LABEL_180:
          sub_10019DB9C((uint64_t)v270);
          goto LABEL_14;
        case 1:
          v132 = sub_10039765C(a3);
          v133 = v132;
          v227 = v13;
          v228 = v14;
          v134 = (unint64_t *)&v14->__shared_owners_;
          do
            v135 = __ldxr(v134);
          while (__stxr(v135 + 1, v134));
          v229 = v132;
          v136 = operator new(0x20uLL);
          *v136 = off_100817A88;
          v136[1] = v13;
          v136[2] = v14;
          v227 = 0;
          v228 = 0;
          *((_DWORD *)v136 + 6) = v133;
          *(_QWORD *)&v270[24] = v136;
          sub_10001AE68((uint64_t)&v227);
          v137 = a1[10];
          v263 = (_BYTE *)(*(uint64_t (**)(_QWORD *))(*v136 + 16))(v136);
          sub_10036159C(v137, (uint64_t)v262);
          v54 = v263;
          if (v263 != v262)
            goto LABEL_43;
          v55 = 4;
          v54 = v262;
          goto LABEL_77;
        case 2:
          v117 = sub_100397714(a3);
          v118 = v117;
          v224 = v13;
          v225 = v14;
          v119 = (unint64_t *)&v14->__shared_owners_;
          do
            v120 = __ldxr(v119);
          while (__stxr(v120 + 1, v119));
          v226 = v117;
          v121 = operator new(0x20uLL);
          *v121 = off_100817B08;
          v121[1] = v13;
          v121[2] = v14;
          v224 = 0;
          v225 = 0;
          *((_DWORD *)v121 + 6) = v118;
          *(_QWORD *)&v270[24] = v121;
          sub_10001AE68((uint64_t)&v224);
          v122 = a1[10];
          v261 = (_BYTE *)(*(uint64_t (**)(_QWORD *))(*v121 + 16))(v121);
          sub_10036159C(v122, (uint64_t)v260);
          v54 = v261;
          if (v261 != v260)
            goto LABEL_43;
          v55 = 4;
          v54 = v260;
          goto LABEL_77;
        case 3:
          v138 = sub_1003979F4(a3);
          v139 = v138;
          v212 = v13;
          v213 = v14;
          v140 = (unint64_t *)&v14->__shared_owners_;
          do
            v141 = __ldxr(v140);
          while (__stxr(v141 + 1, v140));
          v214 = v138;
          v142 = operator new(0x20uLL);
          *v142 = off_100817D08;
          v142[1] = v13;
          v142[2] = v14;
          v212 = 0;
          v213 = 0;
          *((_DWORD *)v142 + 6) = v139;
          *(_QWORD *)&v270[24] = v142;
          sub_10001AE68((uint64_t)&v212);
          v143 = a1[10];
          v253 = (_BYTE *)(*(uint64_t (**)(_QWORD *))(*v142 + 16))(v142);
          sub_10036159C(v143, (uint64_t)v252);
          v54 = v253;
          if (v253 != v252)
            goto LABEL_43;
          v55 = 4;
          v54 = v252;
          goto LABEL_77;
        case 4:
          sub_100397AAC(a3, (uint64_t)v270);
          v209[0] = v13;
          v209[1] = v14;
          v144 = (unint64_t *)&v14->__shared_owners_;
          do
            v145 = __ldxr(v144);
          while (__stxr(v145 + 1, v144));
          v210 = *(_WORD *)v270;
          memset(v211, 0, sizeof(v211));
          sub_100210B80(v211, *(uint64_t *)&v270[8], *(uint64_t *)&v270[16], (uint64_t)(*(_QWORD *)&v270[16] - *(_QWORD *)&v270[8]) >> 5);
          sub_100397D8C((uint64_t)&v266, (uint64_t)v209);
          sub_100397E24((uint64_t)v209);
          v146 = a1[10];
          v147 = (uint64_t)v269;
          if (!v269)
            goto LABEL_135;
          if (v269 == (char *)&v266)
          {
            v251 = v250;
            (*(void (**)(__int128 *, _BYTE *))(v266 + 24))(&v266, v250);
          }
          else
          {
            v147 = (*(uint64_t (**)(char *))(*(_QWORD *)v269 + 16))(v269);
LABEL_135:
            v251 = (_BYTE *)v147;
          }
          sub_10036159C(v146, (uint64_t)v250);
          v170 = v251;
          if (v251 == v250)
          {
            v171 = 4;
            v170 = v250;
          }
          else
          {
            if (!v251)
              goto LABEL_163;
            v171 = 5;
          }
          (*(void (**)(void))(*v170 + 8 * v171))();
LABEL_163:
          v172 = v269;
          if (v269 == (char *)&v266)
          {
            v173 = 4;
            v172 = (char *)&v266;
          }
          else
          {
            if (!v269)
              goto LABEL_168;
            v173 = 5;
          }
          (*(void (**)(void))(*(_QWORD *)v172 + 8 * v173))();
LABEL_168:
          *(_QWORD *)&v266 = &v270[8];
          sub_100153338((void ***)&v266);
          goto LABEL_14;
        case 5:
          v112 = sub_100397E60(a3);
          v205 = v13;
          v206 = v14;
          v113 = (unint64_t *)&v14->__shared_owners_;
          do
            v114 = __ldxr(v113);
          while (__stxr(v114 + 1, v113));
          v207 = v112;
          LOBYTE(v208) = BYTE4(v112);
          v115 = operator new(0x20uLL);
          *v115 = off_100817E08;
          v115[1] = v13;
          v115[2] = v14;
          v205 = 0;
          v206 = 0;
          *((_DWORD *)v115 + 6) = v207;
          *((_WORD *)v115 + 14) = v208;
          *(_QWORD *)&v270[24] = v115;
          sub_10001AE68((uint64_t)&v205);
          v116 = a1[10];
          v249 = (_BYTE *)(*(uint64_t (**)(_QWORD *))(*v115 + 16))(v115);
          sub_10036159C(v116, (uint64_t)v248);
          v54 = v249;
          if (v249 != v248)
            goto LABEL_43;
          v55 = 4;
          v54 = v248;
          goto LABEL_77;
        case 9:
          sub_1003982A0((uint64_t)a3, (uint64_t)v270);
          v187 = v13;
          v188 = v14;
          v105 = (unint64_t *)&v14->__shared_owners_;
          do
            v106 = __ldxr(v105);
          while (__stxr(v106 + 1, v105));
          v189 = *(_OWORD *)v270;
          v190 = *(_OWORD *)&v270[16];
          v191[0] = v271[0];
          *(_OWORD *)((char *)v191 + 12) = *(_OWORD *)((char *)v271 + 12);
          v107 = (char *)operator new(0x58uLL);
          v108 = *(_OWORD *)&v270[16];
          *(_OWORD *)(v107 + 24) = *(_OWORD *)v270;
          *(_QWORD *)v107 = off_100818088;
          *((_QWORD *)v107 + 1) = v13;
          *((_QWORD *)v107 + 2) = v14;
          v187 = 0;
          v188 = 0;
          *(_OWORD *)(v107 + 40) = v108;
          *(_OWORD *)(v107 + 56) = v271[0];
          *(_OWORD *)(v107 + 68) = *(_OWORD *)((char *)v271 + 12);
          v269 = v107;
          sub_10001AE68((uint64_t)&v187);
          v109 = a1[10];
          v239 = (_BYTE *)(*(uint64_t (**)(char *))(*(_QWORD *)v107 + 16))(v107);
          sub_10036159C(v109, (uint64_t)v238);
          v110 = v239;
          if (v239 == v238)
          {
            v111 = 4;
            v110 = v238;
          }
          else
          {
            if (!v239)
              goto LABEL_155;
            v111 = 5;
          }
          (*(void (**)(void))(*v110 + 8 * v111))();
LABEL_155:
          v84 = v269;
          if (v269 != (char *)&v266)
            goto LABEL_79;
          v85 = 4;
          v84 = (char *)&v266;
          break;
        case 13:
          v99 = sub_100397918(a3);
          v100 = v99;
          v215 = v13;
          v216 = v14;
          v101 = (unint64_t *)&v14->__shared_owners_;
          do
            v102 = __ldxr(v101);
          while (__stxr(v102 + 1, v101));
          v217 = v99;
          v103 = operator new(0x20uLL);
          *v103 = off_100817C88;
          v103[1] = v13;
          v103[2] = v14;
          v215 = 0;
          v216 = 0;
          *((_DWORD *)v103 + 6) = v100;
          *(_QWORD *)&v270[24] = v103;
          sub_10001AE68((uint64_t)&v215);
          v104 = a1[10];
          v255 = (_BYTE *)(*(uint64_t (**)(_QWORD *))(*v103 + 16))(v103);
          sub_10036159C(v104, (uint64_t)v254);
          v54 = v255;
          if (v255 != v254)
            goto LABEL_43;
          v55 = 4;
          v54 = v254;
          goto LABEL_77;
        case 21:
          v123 = sub_100397F40(a3, v16, v17, v18, v19, v20, v21, v22);
          sub_10036BB54(v123, v270);
          if (v270[23] >= 0)
            v131 = v270;
          else
            v131 = *(_BYTE **)v270;
          sub_1000051BC("got tx power backoff response packet with status: %s", v124, v125, v126, v127, v128, v129, v130, (uint64_t)v131);
          goto LABEL_54;
        case 22:
          v90 = sub_100397FA4(a3, v16, v17, v18, v19, v20, v21, v22);
          sub_10036BB54(v90, v270);
          if (v270[23] >= 0)
            v98 = v270;
          else
            v98 = *(_BYTE **)v270;
          sub_1000051BC("got measure temperature response packet with status: %s, temperature (%f degree Celsius)", v91, v92, v93, v94, v95, v96, v97, (uint64_t)v98);
          goto LABEL_54;
        default:
          goto LABEL_152;
      }
      goto LABEL_82;
    }
    switch(v40)
    {
      case 'P':
        v48 = sub_100398238((uint64_t)a3);
        v49 = v48;
        v192 = v13;
        v193 = v14;
        v50 = (unint64_t *)&v14->__shared_owners_;
        do
          v51 = __ldxr(v50);
        while (__stxr(v51 + 1, v50));
        v194 = v48;
        v52 = operator new(0x20uLL);
        *v52 = off_100818008;
        v52[1] = v13;
        v52[2] = v14;
        v192 = 0;
        v193 = 0;
        *((_DWORD *)v52 + 6) = v49;
        *(_QWORD *)&v270[24] = v52;
        sub_10001AE68((uint64_t)&v192);
        v53 = a1[10];
        v241 = (_BYTE *)(*(uint64_t (**)(_QWORD *))(*v52 + 16))(v52);
        sub_10036159C(v53, (uint64_t)v240);
        v54 = v241;
        if (v241 != v240)
          goto LABEL_43;
        v55 = 4;
        v54 = v240;
        goto LABEL_77;
      case 'Q':
        v158 = sub_1003981C8((uint64_t)a3);
        v159 = v158;
        v195 = v13;
        v196 = v14;
        v160 = (unint64_t *)&v14->__shared_owners_;
        do
          v161 = __ldxr(v160);
        while (__stxr(v161 + 1, v160));
        v197 = v158;
        v162 = operator new(0x20uLL);
        *v162 = off_100817F88;
        v162[1] = v13;
        v195 = 0;
        v196 = 0;
        v162[2] = v14;
        v162[3] = v159;
        *(_QWORD *)&v270[24] = v162;
        sub_10001AE68((uint64_t)&v195);
        v163 = a1[10];
        v243 = (_BYTE *)(*(uint64_t (**)(_QWORD *))(*v162 + 16))(v162);
        sub_10036159C(v163, (uint64_t)v242);
        v54 = v243;
        if (v243 != v242)
          goto LABEL_43;
        v55 = 4;
        v54 = v242;
        goto LABEL_77;
      case 'R':
        v148 = sub_1003981C8((uint64_t)a3);
        v149 = v148;
        v198 = v13;
        v199 = v14;
        v150 = (unint64_t *)&v14->__shared_owners_;
        do
          v151 = __ldxr(v150);
        while (__stxr(v151 + 1, v150));
        v200 = v148;
        v152 = operator new(0x20uLL);
        *v152 = off_100817F08;
        v152[1] = v13;
        v198 = 0;
        v199 = 0;
        v152[2] = v14;
        v152[3] = v149;
        *(_QWORD *)&v270[24] = v152;
        sub_10001AE68((uint64_t)&v198);
        v153 = a1[10];
        v245 = (_BYTE *)(*(uint64_t (**)(_QWORD *))(*v152 + 16))(v152);
        sub_10036159C(v153, (uint64_t)v244);
        v54 = v245;
        if (v245 != v244)
          goto LABEL_43;
        v55 = 4;
        v54 = v244;
        goto LABEL_77;
      case 'S':
        sub_10039803C((uint64_t)a3, (uint64_t)&v266);
        v201 = v13;
        v202 = v14;
        v154 = (unint64_t *)&v14->__shared_owners_;
        do
          v155 = __ldxr(v154);
        while (__stxr(v155 + 1, v154));
        v203 = v266;
        v204 = v267;
        v156 = (char *)operator new(0x30uLL);
        *(_QWORD *)v156 = off_100817E88;
        *((_QWORD *)v156 + 1) = v13;
        *((_QWORD *)v156 + 2) = v14;
        v201 = 0;
        v202 = 0;
        *(_OWORD *)(v156 + 24) = v266;
        *((_DWORD *)v156 + 10) = v267;
        *(_QWORD *)&v270[24] = v156;
        sub_10001AE68((uint64_t)&v201);
        v157 = a1[10];
        v247 = (_BYTE *)(*(uint64_t (**)(char *))(*(_QWORD *)v156 + 16))(v156);
        sub_10036159C(v157, (uint64_t)v246);
        v54 = v247;
        if (v247 != v246)
          goto LABEL_43;
        v55 = 4;
        v54 = v246;
        goto LABEL_77;
      default:
        if (v40 == 96)
        {
          v164 = sub_1003977CC(a3);
          v165 = v164;
          v221 = v13;
          v222 = v14;
          v166 = (unint64_t *)&v14->__shared_owners_;
          do
            v167 = __ldxr(v166);
          while (__stxr(v167 + 1, v166));
          v223 = v164;
          v168 = operator new(0x20uLL);
          *v168 = off_100817B88;
          v168[1] = v13;
          v168[2] = v14;
          v221 = 0;
          v222 = 0;
          *((_DWORD *)v168 + 6) = v165;
          *(_QWORD *)&v270[24] = v168;
          sub_10001AE68((uint64_t)&v221);
          v169 = a1[10];
          v259 = (_BYTE *)(*(uint64_t (**)(_QWORD *))(*v168 + 16))(v168);
          sub_10036159C(v169, (uint64_t)v258);
          v54 = v259;
          if (v259 == v258)
          {
            v55 = 4;
            v54 = v258;
            goto LABEL_77;
          }
        }
        else
        {
          if (v40 != 112)
          {
LABEL_152:
            v46 = *(unsigned __int16 *)(a2 + 2);
            v47 = "got ranging response with unknown message ID 0x%02x";
            goto LABEL_46;
          }
          v72 = sub_100397884(a3);
          v73 = v72;
          v218 = v13;
          v219 = v14;
          v74 = (unint64_t *)&v14->__shared_owners_;
          do
            v75 = __ldxr(v74);
          while (__stxr(v75 + 1, v74));
          v220 = v72;
          v76 = operator new(0x20uLL);
          *v76 = off_100817C08;
          v76[1] = v13;
          v76[2] = v14;
          v218 = 0;
          v219 = 0;
          *((_WORD *)v76 + 12) = v73;
          *(_QWORD *)&v270[24] = v76;
          sub_10001AE68((uint64_t)&v218);
          v77 = a1[10];
          v257 = (_BYTE *)(*(uint64_t (**)(_QWORD *))(*v76 + 16))(v76);
          sub_10036159C(v77, (uint64_t)v256);
          v54 = v257;
          if (v257 == v256)
          {
            v55 = 4;
            v54 = v256;
            goto LABEL_77;
          }
        }
        break;
    }
    goto LABEL_43;
  }
  if (v15 != 1)
  {
    if (v15 == 2)
    {
      v30 = sub_10036AD58(a2) - 19;
      if (v30 <= 0x3B && ((1 << v30) & 0x800000000000081) != 0)
      {
        __dst = 0;
        sub_1003A1EE0((char *)(*a3 + 4), 2uLL, &__dst, 1);
        v31 = sub_10036AD58(a2);
        switch(v31)
        {
          case 78:
            v32 = "TEST_NB_TX";
            break;
          case 26:
            v32 = "TEST_TX2";
            break;
          case 19:
            v32 = "TEST_UWB_TX";
            break;
          default:
            __assert_rtn("factoryTestMsgIdToString", "roseResponseHandler.cpp", 55, "false");
        }
        sub_10000BF04(v270, v32);
        v61 = v270[23];
        v62 = *(_BYTE **)v270;
        sub_10036BB54(__dst, &v266);
        v70 = v270;
        if (v61 < 0)
          v70 = v62;
        sub_1000051BC("got factory %s response packet with  0x%02x, status %s", v63, v64, v65, v66, v67, v68, v69, (uint64_t)v70);
        if (v268 < 0)
          operator delete((void *)v266);
LABEL_54:
        if ((v270[23] & 0x80000000) != 0)
        {
          v71 = *(void **)v270;
LABEL_96:
          operator delete(v71);
          goto LABEL_14;
        }
      }
      else
      {
        sub_1000051BC("got factory test response packet with  0x%02x", v23, v24, v25, v26, v27, v28, v29, *(unsigned __int8 *)(a2 + 1));
      }
      goto LABEL_14;
    }
    v46 = *(unsigned __int8 *)(a2 + 1);
    v47 = "got response packet with unknown groupID 0x%02x";
LABEL_46:
    sub_10036CAF0(v47, v16, v17, v18, v19, v20, v21, v22, v46);
    goto LABEL_14;
  }
  v37 = sub_10036ACB0(a2);
  if (v37 == 84)
  {
    v56 = sub_100398620(a3, v16, v17, v18, v19, v20, v21, v22);
    v180 = v13;
    v181 = v14;
    v57 = (unint64_t *)&v14->__shared_owners_;
    do
      v58 = __ldxr(v57);
    while (__stxr(v58 + 1, v57));
    LOWORD(v182) = v56;
    BYTE2(v182) = BYTE2(v56);
    v59 = operator new(0x20uLL);
    *v59 = off_100818188;
    v59[1] = v13;
    v59[2] = v14;
    v180 = 0;
    v181 = 0;
    *((_DWORD *)v59 + 6) = v182;
    *(_QWORD *)&v270[24] = v59;
    v60 = a1[10];
    v235 = sub_10039AA84((uint64_t)v59);
    sub_10036159C(v60, (uint64_t)v234);
    v54 = v235;
    if (v235 == v234)
    {
      v55 = 4;
      v54 = v234;
      goto LABEL_77;
    }
LABEL_43:
    if (!v54)
      goto LABEL_78;
    v55 = 5;
LABEL_77:
    (*(void (**)(void))(*(_QWORD *)v54 + 8 * v55))();
LABEL_78:
    v84 = *(char **)&v270[24];
    if (*(_BYTE **)&v270[24] == v270)
    {
      v85 = 4;
      v84 = v270;
    }
    else
    {
LABEL_79:
      if (!v84)
        goto LABEL_14;
      v85 = 5;
    }
LABEL_82:
    (*(void (**)(void))(*(_QWORD *)v84 + 8 * v85))();
    goto LABEL_14;
  }
  if (v37 != 82)
  {
    v46 = *(unsigned __int16 *)(a2 + 2);
    v47 = "got debug command response with unknown message ID 0x%02x";
    goto LABEL_46;
  }
  sub_1003984D0(a3, v16, v17, v18, v19, v20, v21, v22, (uint64_t)v270);
  *(_QWORD *)&v183 = v13;
  *((_QWORD *)&v183 + 1) = v14;
  v38 = (unint64_t *)&v14->__shared_owners_;
  do
    v39 = __ldxr(v38);
  while (__stxr(v39 + 1, v38));
  v184 = *(_WORD *)v270;
  if ((v270[31] & 0x80000000) != 0)
  {
    sub_100004678(&__p, *(void **)&v270[8], *(unint64_t *)&v270[16]);
  }
  else
  {
    __p = *(_OWORD *)&v270[8];
    v186 = *(_QWORD *)&v270[24];
  }
  v78 = (char *)operator new(0x38uLL);
  *(_QWORD *)v78 = off_100818108;
  *(_OWORD *)(v78 + 8) = v183;
  v183 = 0uLL;
  *((_WORD *)v78 + 12) = v184;
  v79 = v78 + 32;
  if (SHIBYTE(v186) < 0)
  {
    sub_100004678(v79, (void *)__p, *((unint64_t *)&__p + 1));
    v269 = v78;
    if (SHIBYTE(v186) < 0)
      operator delete((void *)__p);
  }
  else
  {
    *(_OWORD *)v79 = __p;
    *((_QWORD *)v78 + 6) = v186;
    v269 = v78;
  }
  if (*((_QWORD *)&v183 + 1))
  {
    v80 = (unint64_t *)(*((_QWORD *)&v183 + 1) + 8);
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v183 + 1) + 16))(*((_QWORD *)&v183 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v183 + 1));
    }
  }
  v82 = a1[10];
  v83 = (uint64_t)v269;
  if (!v269)
    goto LABEL_75;
  if (v269 != (char *)&v266)
  {
    v83 = (*(uint64_t (**)(void))(*(_QWORD *)v269 + 16))();
LABEL_75:
    v237 = (_BYTE *)v83;
    goto LABEL_84;
  }
  v237 = v236;
  (*(void (**)(__int128 *, _BYTE *))(v266 + 24))(&v266, v236);
LABEL_84:
  sub_10036159C(v82, (uint64_t)v236);
  v86 = v237;
  if (v237 == v236)
  {
    v87 = 4;
    v86 = v236;
  }
  else
  {
    if (!v237)
      goto LABEL_89;
    v87 = 5;
  }
  (*(void (**)(void))(*v86 + 8 * v87))();
LABEL_89:
  v88 = v269;
  if (v269 == (char *)&v266)
  {
    v89 = 4;
    v88 = (char *)&v266;
  }
  else
  {
    if (!v269)
      goto LABEL_94;
    v89 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v88 + 8 * v89))();
LABEL_94:
  if ((v270[31] & 0x80000000) != 0)
  {
    v71 = *(void **)&v270[8];
    goto LABEL_96;
  }
LABEL_14:
  v33 = v233;
  if (v233)
  {
    v34 = (unint64_t *)&v233->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  return 0;
}

void sub_100396AE4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;

  v4 = *(_QWORD **)(v1 + 1088);
  if (v4 == (_QWORD *)(v2 - 216))
  {
    v5 = 4;
    v4 = (_QWORD *)(v2 - 216);
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  sub_10019DB9C(v2 - 184);
  sub_10001AE68((uint64_t)&STACK[0x288]);
  _Unwind_Resume(a1);
}

void sub_10039702C(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  __int128 v21;
  __int16 v22;
  uint64_t v23;
  void *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  std::string *v35;
  __int128 v36;
  std::string *v37;
  __int128 v38;
  void **v39;
  std::string::size_type v40;
  __int16 v41;
  std::runtime_error *exception;
  std::string v43;
  std::string v44;
  void *v45[2];
  int64_t v46;
  char __str[4];
  char v48;
  int v49;
  void *__p[2];
  char v51;
  char v52;
  __int16 v53;
  _BYTE v54[2];
  int v55;
  std::string v56;
  int v57;
  int v58;
  void *v59;
  __int128 v60;
  _WORD __dst[5];

  if (*((_DWORD *)sub_100004784() + 187) == 1)
  {
    sub_1003986B8(a1, (uint64_t)a2);
    return;
  }
  v11 = *a1;
  if (a1[1] - *a1 <= 0x48uLL)
  {
    sub_10036CAF0("Not enough bytes in Hello Response (%zu < %u)", v4, v5, v6, v7, v8, v9, v10, a1[1] - *a1);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_100365F78(exception, "Not enough bytes in Hello Response");
    goto LABEL_31;
  }
  __dst[0] = 0;
  sub_1003A1EE0((char *)(v11 + 4), 2uLL, __dst, 1);
  if (__dst[0])
  {
    sub_10036CAF0("Error status in Hello Response: 0x%x", v12, v13, v14, v15, v16, v17, v18, __dst[0]);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_100365F78(exception, "Error status in Hello Response");
LABEL_31:
  }
  v19 = *a1;
  v20 = operator new(0x28uLL);
  v59 = v20;
  v60 = xmmword_10047D6A0;
  v21 = *(_OWORD *)(v19 + 22);
  *v20 = *(_OWORD *)(v19 + 6);
  v20[1] = v21;
  *((_BYTE *)v20 + 32) = 0;
  v57 = 0;
  v58 = 0;
  sub_1003A1EE0((char *)(v19 + 38), 2uLL, (_BYTE *)&v58 + 2, 1);
  sub_1003A1EE0((char *)(*a1 + 40), 2uLL, &v58, 1);
  sub_1003A1EE0((char *)(*a1 + 69), 4uLL, &v57, 1);
  v22 = HIWORD(v58);
  v49 = 0;
  sub_10000BF04(__p, "");
  v53 = 0;
  v54[0] = 0;
  v55 = 0;
  sub_10000BF04(&v56, "");
  v48 = 0;
  sub_1003A1EE0((char *)(*a1 + 42), 2uLL, &v49, 1);
  sub_1003A1EE0((char *)(*a1 + 44), 2uLL, (_BYTE *)&v49 + 2, 1);
  v23 = *a1;
  v24 = *(void **)(*a1 + 46);
  v25 = *(void **)(*a1 + 54);
  if (v52 < 0)
  {
    operator delete(__p[0]);
    v23 = *a1;
  }
  __p[0] = v24;
  __p[1] = v25;
  v51 = 0;
  v52 = 16;
  sub_1003A1EE0((char *)(v23 + 62), 2uLL, &v53, 1);
  sub_1003A1EE0((char *)(*a1 + 64), 1uLL, v54, 1);
  sub_1003A1EE0((char *)(*a1 + 65), 4uLL, &v55, 1);
  v33 = (*((_BYTE *)a1 + 8) - *(_DWORD *)a1 - 73);
  if (*((_BYTE *)a1 + 8) - *(_DWORD *)a1 != 73)
  {
    v34 = 0;
    do
    {
      snprintf(__str, 4uLL, "%X", *(unsigned __int8 *)(*a1 + v34 + 73));
      sub_10000BF04(&v43, __str);
      v35 = std::string::insert(&v43, 0, "0x");
      v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
      v44.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v36;
      v35->__r_.__value_.__l.__size_ = 0;
      v35->__r_.__value_.__r.__words[2] = 0;
      v35->__r_.__value_.__r.__words[0] = 0;
      v37 = std::string::append(&v44, " ");
      v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v46 = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)v45 = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      if (v46 >= 0)
        v39 = v45;
      else
        v39 = (void **)v45[0];
      if (v46 >= 0)
        v40 = HIBYTE(v46);
      else
        v40 = (std::string::size_type)v45[1];
      std::string::append(&v56, (const std::string::value_type *)v39, v40);
      if (SHIBYTE(v46) < 0)
        operator delete(v45[0]);
      if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v44.__r_.__value_.__l.__data_);
      if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v43.__r_.__value_.__l.__data_);
      ++v34;
    }
    while (v33 != v34);
  }
  v41 = sub_10036C048((unsigned __int16)v58, v26, v27, v28, v29, v30, v31, v32);
  sub_100398D68(a2, (__int128 *)&v59, SHIBYTE(v22), v22, v41, (int *)&v48, v57);
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v56.__r_.__value_.__l.__data_);
  if (v52 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v60) < 0)
    operator delete(v59);
}

void sub_100397410(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,char a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  void *v38;

  __cxa_free_exception(v38);
  _Unwind_Resume(a1);
}

_QWORD *sub_1003974BC(_QWORD *__dst, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    sub_100004678(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    __dst[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  *((_DWORD *)__dst + 6) = *((_DWORD *)a2 + 6);
  sub_10000BDF4((_BYTE *)__dst + 32, (uint64_t)(a2 + 2));
  __dst[13] = *((_QWORD *)a2 + 13);
  return __dst;
}

void sub_100397524(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100397540(uint64_t a1, uint64_t a2)
{
  char *v4;
  char *v5;

  *(_QWORD *)(a1 + 24) = 0;
  v4 = (char *)operator new(0x88uLL);
  v5 = v4;
  *(_QWORD *)v4 = off_100817A08;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  if (*(char *)(a2 + 39) < 0)
  {
    sub_100004678(v4 + 24, *(void **)(a2 + 16), *(_QWORD *)(a2 + 24));
  }
  else
  {
    *(_OWORD *)(v4 + 24) = *(_OWORD *)(a2 + 16);
    *((_QWORD *)v4 + 5) = *(_QWORD *)(a2 + 32);
  }
  *((_DWORD *)v5 + 12) = *(_DWORD *)(a2 + 40);
  sub_10000BDF4(v5 + 56, a2 + 48);
  *((_QWORD *)v5 + 16) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 24) = v5;
  return a1;
}

void sub_1003975F0(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  sub_10001AE68(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100397624(uint64_t a1)
{
  sub_10000BAB8(a1 + 48);
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return sub_10001AE68(a1);
}

uint64_t sub_10039765C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  std::runtime_error *exception;
  int __dst;

  v1 = *a1;
  if (a1[1] - *a1 != 8)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_100365F78(exception, "Range config response not of expected size");
  }
  __dst = 0;
  sub_1003A1EE0((char *)(v1 + 4), 2uLL, (_BYTE *)&__dst + 2, 1);
  sub_1003A1EE0((char *)(*a1 + 6), 2uLL, &__dst, 1);
  v10 = sub_10036BAF8(HIWORD(__dst), v3, v4, v5, v6, v7, v8, v9);
  return v10 | ((unsigned __int16)__dst << 16);
}

void sub_100397700(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100397714(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  std::runtime_error *exception;
  int __dst;

  v1 = *a1;
  if (a1[1] - *a1 != 8)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_100365F78(exception, "Range enable response not of expected size");
  }
  __dst = 0;
  sub_1003A1EE0((char *)(v1 + 4), 2uLL, (_BYTE *)&__dst + 2, 1);
  sub_1003A1EE0((char *)(*a1 + 6), 2uLL, &__dst, 1);
  v10 = sub_10036BAF8(HIWORD(__dst), v3, v4, v5, v6, v7, v8, v9);
  return v10 | ((unsigned __int16)__dst << 16);
}

void sub_1003977B8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1003977CC(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  std::runtime_error *exception;
  int __dst;

  v1 = *a1;
  if (a1[1] - *a1 != 8)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_100365F78(exception, "Test NMI range enable response not of expected size");
  }
  __dst = 0;
  sub_1003A1EE0((char *)(v1 + 4), 2uLL, (_BYTE *)&__dst + 2, 1);
  sub_1003A1EE0((char *)(*a1 + 6), 2uLL, &__dst, 1);
  v10 = sub_10036BAF8(HIWORD(__dst), v3, v4, v5, v6, v7, v8, v9);
  return v10 | ((unsigned __int16)__dst << 16);
}

void sub_100397870(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100397884(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::runtime_error *exception;
  unsigned __int16 __dst;

  v1 = *a1;
  if (a1[1] - *a1 != 6)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_100365F78(exception, "GPIO power switch disable response not of expected size");
  }
  __dst = 0;
  sub_1003A1EE0((char *)(v1 + 4), 2uLL, &__dst, 1);
  return sub_10036BAF8(__dst, v2, v3, v4, v5, v6, v7, v8);
}

void sub_100397904(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100397918(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  std::runtime_error *exception;
  __int16 v13;
  unsigned __int16 __dst;

  v1 = *a1;
  if (a1[1] - *a1 != 8)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_100365F78(exception, "SAR state response not of expected size");
  }
  __dst = 0;
  v13 = 0;
  sub_1003A1EE0((char *)(v1 + 4), 2uLL, &__dst, 1);
  sub_1003A1EE0((char *)(*a1 + 6), 1uLL, (_BYTE *)&v13 + 1, 1);
  sub_1003A1EE0((char *)(*a1 + 7), 1uLL, &v13, 1);
  v10 = sub_10036BAF8(__dst, v3, v4, v5, v6, v7, v8, v9);
  return v10 | (HIBYTE(v13) << 16) | (v13 << 24);
}

void sub_1003979E0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1003979F4(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  std::runtime_error *exception;
  int __dst;

  v1 = *a1;
  if (a1[1] - *a1 != 8)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_100365F78(exception, "Range disable response not of expected size");
  }
  __dst = 0;
  sub_1003A1EE0((char *)(v1 + 4), 2uLL, (_BYTE *)&__dst + 2, 1);
  sub_1003A1EE0((char *)(*a1 + 6), 2uLL, &__dst, 1);
  v10 = sub_10036BAF8(HIWORD(__dst), v3, v4, v5, v6, v7, v8, v9);
  return v10 | ((unsigned __int16)__dst << 16);
}

void sub_100397A98(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_100397AAC(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  size_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  size_t v24;
  char v25;
  void **v26;
  void **v27;
  void **v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  void **v35;
  void **v36;
  uint64_t v37;
  uint64_t v38;
  std::runtime_error *exception;
  std::runtime_error *v40;
  __int16 v41;
  uint64_t v42;
  uint64_t v43;
  _BYTE *v44;
  unint64_t v45;
  unsigned __int16 __dst[5];
  void **v47;
  void **v48;
  void **v49;
  void **v50;
  unint64_t *v51;

  __dst[0] = 0;
  sub_1003A1EE0((char *)(*a1 + 4), 2uLL, __dst, 1);
  v11 = sub_10036BAF8(__dst[0], v4, v5, v6, v7, v8, v9, v10);
  v19 = *(unsigned __int8 *)(*a1 + 6);
  v43 = 0;
  v44 = 0;
  v45 = 0;
  if (v19)
  {
    v41 = v11;
    v42 = a2;
    LODWORD(v20) = 7;
    do
    {
      v21 = (int)v20 + 2;
      if (a1[1] - *a1 < v21)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Get config response not of expected size");
      }
      v22 = sub_10036B9EC(*(unsigned __int8 *)(*a1 + (int)v20), v12, v13, v14, v15, v16, v17, v18);
      v23 = *a1;
      v24 = *(unsigned __int8 *)((int)v20 + *a1 + 1);
      v20 = v24 + (int)v21;
      if (a1[1] - *a1 < v20)
      {
        v40 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v40, "Get config response not of expected size");
      }
      v25 = v22;
      v47 = 0;
      v48 = 0;
      v49 = 0;
      sub_10022D0C8(&v47, (const void *)(v23 + v21), v23 + v21 + v24, v24);
      v27 = v47;
      v26 = v48;
      v28 = v49;
      v29 = v44;
      if ((unint64_t)v44 >= v45)
      {
        v31 = (uint64_t)&v44[-v43] >> 5;
        v32 = v31 + 1;
        if ((unint64_t)(v31 + 1) >> 59)
          sub_100026E7C();
        v33 = v45 - v43;
        if ((uint64_t)(v45 - v43) >> 4 > v32)
          v32 = v33 >> 4;
        if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFE0)
          v34 = 0x7FFFFFFFFFFFFFFLL;
        else
          v34 = v32;
        v51 = &v45;
        v35 = (void **)sub_10015350C((uint64_t)&v45, v34);
        v36 = &v35[4 * v31];
        v47 = v35;
        v48 = v36;
        v50 = &v35[4 * v37];
        *(_BYTE *)v36 = v25;
        v36[1] = v27;
        v36[2] = 0;
        v36[2] = v26;
        v36[3] = v28;
        v49 = v36 + 4;
        sub_10039ABA4(&v43, &v47);
        v30 = (uint64_t)v44;
        sub_10036A3D0((uint64_t)&v47);
      }
      else
      {
        *v44 = v25;
        v29[1] = v27;
        v29[2] = v26;
        v30 = (uint64_t)(v29 + 4);
        v29[3] = v28;
      }
      v44 = (_BYTE *)v30;
      --v19;
    }
    while (v19);
    a2 = v42;
    v38 = v43;
    v11 = v41;
  }
  else
  {
    v30 = 0;
    v38 = 0;
  }
  *(_WORD *)a2 = v11;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  sub_100210B80((_QWORD *)(a2 + 8), v38, v30, (v30 - v38) >> 5);
  v47 = (void **)&v43;
  sub_100153338(&v47);
}

void sub_100397D24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, void **a15)
{
  a15 = (void **)&a11;
  sub_100153338(&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_100397D8C(uint64_t a1, uint64_t a2)
{
  char *v4;

  *(_QWORD *)(a1 + 24) = 0;
  v4 = (char *)operator new(0x38uLL);
  *(_QWORD *)v4 = off_100817D88;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *((_WORD *)v4 + 12) = *(_WORD *)(a2 + 16);
  *((_QWORD *)v4 + 5) = 0;
  *((_QWORD *)v4 + 6) = 0;
  *((_QWORD *)v4 + 4) = 0;
  sub_100210B80((_QWORD *)v4 + 4, *(_QWORD *)(a2 + 24), *(_QWORD *)(a2 + 32), (uint64_t)(*(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24)) >> 5);
  *(_QWORD *)(a1 + 24) = v4;
  return a1;
}

void sub_100397E08(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  sub_10001AE68(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100397E24(uint64_t a1)
{
  void **v3;

  v3 = (void **)(a1 + 24);
  sub_100153338(&v3);
  return sub_10001AE68(a1);
}

unint64_t sub_100397E60(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  __int16 v11;
  __int16 v12;
  std::runtime_error *exception;
  unsigned __int16 __dst;
  unsigned int v16;
  unsigned __int16 v17;

  v1 = *a1;
  if ((unint64_t)(a1[1] - *a1 - 7) >= 2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_100365F78(exception, "Set config response not of expected size");
  }
  __dst = 0;
  sub_1003A1EE0((char *)(v1 + 4), 2uLL, &__dst, 1);
  v10 = sub_10036BAF8(__dst, v3, v4, v5, v6, v7, v8, v9);
  if (a1[1] - *a1 == 8)
  {
    v11 = *(unsigned __int8 *)(*a1 + 7);
    v12 = 256;
  }
  else
  {
    v11 = 0;
    v12 = 0;
  }
  sub_100398F84((uint64_t)&v16, v10, *(unsigned __int8 *)(*a1 + 6), v12 | v11);
  return v16 | ((unint64_t)v17 << 32);
}

void sub_100397F2C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100397F40(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int16 __dst;

  __dst = 0;
  if (a1[1] - *a1 == 6)
  {
    sub_1003A1EE0((char *)(*a1 + 4), 2uLL, &__dst, 1);
    return sub_10036BAF8(__dst, v8, v9, v10, v11, v12, v13, v14);
  }
  else
  {
    sub_10036CAF0("got tx power backoff response packet with wrong size: expect %d, actual %zu", a2, a3, a4, a5, a6, a7, a8, 6);
    return 5;
  }
}

unint64_t sub_100397FA4(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v18;
  unsigned __int16 __dst;

  __dst = 0;
  v18 = 0;
  if (a1[1] - *a1 == 10)
  {
    sub_1003A1EE0((char *)(*a1 + 4), 2uLL, &__dst, 1);
    sub_1003A1EE0((char *)(*a1 + 6), 4uLL, &v18, 1);
    v16 = sub_10036BAF8(__dst, v9, v10, v11, v12, v13, v14, v15);
    return v16 | ((unint64_t)v18 << 32);
  }
  else
  {
    sub_10036CAF0("got measure temperature response packet with wrong size: expect %d, actual %zu", a2, a3, a4, a5, a6, a7, a8, 10);
    return 5;
  }
}

uint64_t sub_10039803C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  char v12;
  __int16 v13;
  __int16 v14;
  char v15;
  int v16;
  char v17;
  char v18;
  char v19;
  char v20;
  __int16 v21;
  __int16 v22;
  int v23;
  char v24;
  __int16 v25;
  __int16 v26;
  char v27;
  unsigned __int16 __dst;

  __dst = 0;
  v27 = 0;
  v26 = 0;
  v25 = 0;
  v24 = 0;
  v23 = 0;
  v22 = 0;
  v21 = 0;
  sub_1003A1EE0((char *)(*(_QWORD *)a1 + 4), 2uLL, &__dst, 1);
  sub_1003A1EE0((char *)(*(_QWORD *)a1 + 6), 1uLL, &v27, 1);
  sub_1003A1EE0((char *)(*(_QWORD *)a1 + 7), 2uLL, &v26, 1);
  sub_1003A1EE0((char *)(*(_QWORD *)a1 + 9), 2uLL, &v25, 1);
  sub_1003A1EE0((char *)(*(_QWORD *)a1 + 27), 1uLL, &v24, 1);
  sub_1003A1EE0((char *)(*(_QWORD *)a1 + 28), 4uLL, &v23, 1);
  sub_1003A1EE0((char *)(*(_QWORD *)a1 + 32), 1uLL, (_BYTE *)&v22 + 1, 1);
  sub_1003A1EE0((char *)(*(_QWORD *)a1 + 33), 1uLL, &v22, 1);
  sub_1003A1EE0((char *)(*(_QWORD *)a1 + 34), 1uLL, (_BYTE *)&v21 + 1, 1);
  sub_1003A1EE0((char *)(*(_QWORD *)a1 + 35), 1uLL, &v21, 1);
  result = sub_10036BAF8(__dst, v4, v5, v6, v7, v8, v9, v10);
  v12 = v27;
  v13 = v26;
  v14 = v25;
  v15 = v24;
  v16 = v23;
  v17 = HIBYTE(v22);
  v18 = v22;
  v19 = HIBYTE(v21);
  v20 = v21;
  *(_WORD *)a2 = result;
  *(_BYTE *)(a2 + 2) = v12;
  *(_WORD *)(a2 + 4) = v13;
  *(_WORD *)(a2 + 6) = v14;
  *(_BYTE *)(a2 + 8) = v15;
  *(_DWORD *)(a2 + 12) = v16;
  *(_BYTE *)(a2 + 16) = v17;
  *(_BYTE *)(a2 + 17) = v18;
  *(_BYTE *)(a2 + 18) = v19;
  *(_BYTE *)(a2 + 19) = v20;
  return result;
}

unint64_t sub_1003981C8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v11;
  unsigned __int16 __dst;

  __dst = 0;
  v11 = 0;
  sub_1003A1EE0((char *)(*(_QWORD *)a1 + 4), 2uLL, &__dst, 1);
  sub_1003A1EE0((char *)(*(_QWORD *)a1 + 6), 4uLL, &v11, 1);
  v9 = sub_10036BAF8(__dst, v2, v3, v4, v5, v6, v7, v8);
  return v9 | ((unint64_t)v11 << 32);
}

uint64_t sub_100398238(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int __dst;

  __dst = 0;
  sub_1003A1EE0((char *)(*(_QWORD *)a1 + 4), 2uLL, (_BYTE *)&__dst + 2, 1);
  sub_1003A1EE0((char *)(*(_QWORD *)a1 + 6), 2uLL, &__dst, 1);
  v9 = sub_10036BAF8(HIWORD(__dst), v2, v3, v4, v5, v6, v7, v8);
  return v9 | ((unsigned __int16)__dst << 16);
}

uint64_t sub_1003982A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char *v4;
  _DWORD *v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  uint64_t result;
  int v16;
  __int16 v17;
  __int16 v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t __dst;

  v29 = 0;
  __dst = 0;
  v28 = 0;
  v27 = 0;
  v26 = 0;
  v24 = 0;
  v25 = 0;
  v22 = 0;
  v23 = 0;
  v4 = (char *)(*(_QWORD *)a1 + 4);
  v21 = 0;
  sub_1003A1EE0(v4, 4uLL, (_BYTE *)&__dst + 4, 1);
  sub_1003A1EE0((char *)(*(_QWORD *)a1 + 8), 4uLL, &__dst, 1);
  sub_1003A1EE0((char *)(*(_QWORD *)a1 + 12), 4uLL, (_BYTE *)&v29 + 4, 1);
  sub_1003A1EE0((char *)(*(_QWORD *)a1 + 16), 4uLL, &v29, 1);
  sub_1003A1EE0((char *)(*(_QWORD *)a1 + 20), 4uLL, &v28, 1);
  sub_1003A1EE0((char *)(*(_QWORD *)a1 + 24), 4uLL, &v27, 1);
  sub_1003A1EE0((char *)(*(_QWORD *)a1 + 28), 4uLL, (_BYTE *)&v26 + 4, 1);
  sub_1003A1EE0((char *)(*(_QWORD *)a1 + 32), 4uLL, &v26, 1);
  sub_1003A1EE0((char *)(*(_QWORD *)a1 + 36), 4uLL, &v25, 1);
  sub_1003A1EE0((char *)(*(_QWORD *)a1 + 40), 2uLL, (_BYTE *)&v24 + 2, 1);
  sub_1003A1EE0((char *)(*(_QWORD *)a1 + 42), 2uLL, &v24, 1);
  sub_1003A1EE0((char *)(*(_QWORD *)a1 + 44), 4uLL, (_BYTE *)&v23 + 4, 1);
  sub_1003A1EE0((char *)(*(_QWORD *)a1 + 48), 4uLL, &v23, 1);
  v5 = sub_100004784();
  v6 = 0;
  v7 = 0;
  v8 = 0;
  if (v5[187] == 2)
  {
    sub_1003A1EE0((char *)(*(_QWORD *)a1 + 52), 4uLL, (_BYTE *)&v22 + 4, 1);
    sub_1003A1EE0((char *)(*(_QWORD *)a1 + 56), 4uLL, &v22, 1);
    sub_1003A1EE0((char *)(*(_QWORD *)a1 + 60), 4uLL, &v21, 1);
    v7 = v22;
    v8 = HIDWORD(v22);
    v6 = v21;
  }
  v9 = __dst;
  v11 = v29;
  v10 = HIDWORD(v29);
  v12 = v28;
  v14 = HIDWORD(v26);
  v13 = v27;
  v16 = v25;
  result = v26;
  v17 = HIWORD(v24);
  v18 = v24;
  v20 = v23;
  v19 = HIDWORD(v23);
  *(_DWORD *)a2 = HIDWORD(__dst);
  *(_DWORD *)(a2 + 4) = v9;
  *(_DWORD *)(a2 + 8) = v10;
  *(_DWORD *)(a2 + 12) = v11;
  *(_DWORD *)(a2 + 16) = v12;
  *(_DWORD *)(a2 + 20) = v13;
  *(_DWORD *)(a2 + 24) = v14;
  *(_DWORD *)(a2 + 28) = result;
  *(_DWORD *)(a2 + 32) = v16;
  *(_WORD *)(a2 + 36) = v17;
  *(_WORD *)(a2 + 38) = v18;
  *(_DWORD *)(a2 + 40) = v19;
  *(_DWORD *)(a2 + 44) = v20;
  *(_DWORD *)(a2 + 48) = v8;
  *(_DWORD *)(a2 + 52) = v7;
  *(_DWORD *)(a2 + 56) = v6;
  return result;
}

void sub_1003984D0(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int16 v19;
  std::string *v20;
  std::string *v21;
  std::string v22;
  unsigned __int16 __dst;

  v10 = *a1;
  if (a1[1] - *a1 == 10)
  {
    __dst = 0;
    sub_1003A1EE0((char *)(v10 + 4), 2uLL, &__dst, 1);
    v19 = sub_10036BAF8(__dst, v12, v13, v14, v15, v16, v17, v18);
    memset(&v22, 0, sizeof(v22));
    std::string::resize(&v22, 4uLL, 0);
    if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v20 = &v22;
    else
      v20 = (std::string *)v22.__r_.__value_.__r.__words[0];
    sub_1003A1EE0((char *)(*a1 + 6), 4uLL, v20, 1);
    *(_WORD *)a9 = v19;
    v21 = (std::string *)(a9 + 8);
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    {
      sub_100004678(v21, v22.__r_.__value_.__l.__data_, v22.__r_.__value_.__l.__size_);
      if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v22.__r_.__value_.__l.__data_);
    }
    else
    {
      *v21 = v22;
    }
  }
  else
  {
    sub_10036CAF0("got log request response packet with wrong size: expect %d, actual %zu", a2, a3, a4, a5, a6, a7, a8, 10);
    *(_WORD *)a9 = 0;
    *(_QWORD *)(a9 + 16) = 0;
    *(_QWORD *)(a9 + 24) = 0;
    *(_QWORD *)(a9 + 8) = 0;
  }
}

void sub_1003985D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003985F0(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  return sub_10001AE68(a1);
}

uint64_t sub_100398620(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unsigned __int8 v18;
  unsigned __int16 __dst;

  __dst = 0;
  if (a1[1] - *a1 == 7)
  {
    sub_1003A1EE0((char *)(*a1 + 4), 2uLL, &__dst, 1);
    v16 = sub_10036BAF8(__dst, v9, v10, v11, v12, v13, v14, v15);
    v18 = 0;
    sub_1003A1EE0((char *)(*a1 + 6), 1uLL, &v18, 1);
    return v16 | (v18 << 16);
  }
  else
  {
    sub_10036CAF0("got log config response packet with wrong size: expect %d, actual %zu", a2, a3, a4, a5, a6, a7, a8, 7);
    return 0x40000;
  }
}

void sub_1003986B8(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  _OWORD *v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int16 v14;
  unint64_t v15;
  __int16 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 v24;
  uint64_t v25;
  void *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  std::string *v36;
  __int128 v37;
  std::string *v38;
  __int128 v39;
  void **v40;
  std::string::size_type v41;
  __int16 v42;
  std::runtime_error *exception;
  std::runtime_error *v44;
  std::runtime_error *v45;
  _QWORD *v46;
  _QWORD *v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  _QWORD *v53;
  std::runtime_error *v54;
  std::string v55;
  char __str[4];
  std::string v57;
  void *__p[2];
  int64_t v59;
  uint64_t v60;
  _BYTE v61[2];
  int v62;
  void *v63[2];
  char v64;
  char v65;
  __int16 v66;
  _BYTE v67[2];
  int v68;
  std::string v69;
  int __dst;
  void *v71;
  __int128 v72;

  v3 = *a1;
  if (a1[1] - *a1 <= 0x27uLL)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_100365F78(exception, "Not enough bytes in Hello Response");
  }
  v5 = operator new(0x28uLL);
  v71 = v5;
  v72 = xmmword_10047D6A0;
  v6 = *(_OWORD *)(v3 + 20);
  *v5 = *(_OWORD *)(v3 + 4);
  v5[1] = v6;
  *((_BYTE *)v5 + 32) = 0;
  __dst = 0;
  sub_1003A1EE0((char *)(v3 + 36), 2uLL, (_BYTE *)&__dst + 2, 1);
  sub_1003A1EE0((char *)(*a1 + 38), 2uLL, &__dst, 1);
  v14 = HIWORD(__dst);
  v15 = a1[1] - *a1;
  if (HIWORD(__dst) <= 0x13u)
  {
    if (v15 == 40)
    {
      v16 = sub_10036C048((unsigned __int16)__dst, v7, v8, v9, v10, v11, v12, v13);
      sub_100004678((_BYTE *)a2, v5, 0x20uLL);
      *(_BYTE *)(a2 + 24) = HIBYTE(v14);
      *(_BYTE *)(a2 + 25) = v14;
      *(_WORD *)(a2 + 26) = v16;
      *(_BYTE *)(a2 + 32) = 0;
      *(_BYTE *)(a2 + 96) = 0;
      *(_BYTE *)(a2 + 104) = 0;
      *(_BYTE *)(a2 + 108) = 0;
LABEL_31:
      operator delete(v71);
      return;
    }
    sub_10036CAF0("Hello Response (%zu) not of expected size (%u)", v7, v8, v9, v10, v11, v12, v13, a1[1] - *a1);
    v44 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v44, "Hello Response not of expected size");
LABEL_36:
  }
  if (v15 <= 0x43)
  {
    sub_10036CAF0("Hello Response (%zu) size is less than the expected size (%u)", v7, v8, v9, v10, v11, v12, v13, a1[1] - *a1);
    v44 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v44, "Hello Response size is less than the expected size");
    goto LABEL_36;
  }
  v61[0] = 0;
  v62 = 0;
  sub_10000BF04(v63, "");
  v66 = 0;
  v67[0] = 0;
  v68 = 0;
  sub_10000BF04(&v69, "");
  sub_1003A1EE0((char *)(*a1 + 40), 1uLL, v61, 1);
  v24 = v61[0] - 27;
  if (a1[1] - *a1 != (v61[0] - 27) + 68)
  {
    sub_10036CAF0("Hello Response (%zu) not of expected size (%u)", v17, v18, v19, v20, v21, v22, v23, a1[1] - *a1);
    v45 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v45, "Hello Response not of expected size");
  }
  if (v61[0] <= 0x1Au)
  {
    sub_1000537E4((uint64_t)__p);
    v46 = sub_100054C60(&v59, (uint64_t)"Additional Info Len as reported by the packet is less than expected. HSI Major: ", 80);
    v57.__r_.__value_.__s.__data_[0] = HIBYTE(v14);
    v47 = sub_100054C60(v46, (uint64_t)&v57, 1);
    v48 = sub_100054C60(v47, (uint64_t)", HSI Minor: ", 13);
    v57.__r_.__value_.__s.__data_[0] = v14;
    v49 = sub_100054C60(v48, (uint64_t)&v57, 1);
    v50 = sub_100054C60(v49, (uint64_t)", expected len: ", 16);
    v57.__r_.__value_.__s.__data_[0] = v61[0];
    v51 = sub_100054C60(v50, (uint64_t)&v57, 1);
    v52 = sub_100054C60(v51, (uint64_t)", reported len: ", 16);
    v53 = (_QWORD *)std::ostream::operator<<(v52, 28);
    sub_10034C4A8(v53);
    v54 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str(&v60);
    std::runtime_error::runtime_error(v54, &v57);
  }
  sub_1003A1EE0((char *)(*a1 + 41), 2uLL, &v62, 1);
  sub_1003A1EE0((char *)(*a1 + 43), 2uLL, (_BYTE *)&v62 + 2, 1);
  v25 = *a1;
  v26 = *(void **)(*a1 + 45);
  v27 = *(void **)(*a1 + 53);
  if (v65 < 0)
  {
    operator delete(v63[0]);
    v25 = *a1;
  }
  v63[0] = v26;
  v63[1] = v27;
  v64 = 0;
  v65 = 16;
  sub_1003A1EE0((char *)(v25 + 61), 2uLL, &v66, 1);
  sub_1003A1EE0((char *)(*a1 + 63), 1uLL, v67, 1);
  sub_1003A1EE0((char *)(*a1 + 64), 4uLL, &v68, 1);
  if (v61[0] >= 0x1Cu && v24)
  {
    v35 = 0;
    do
    {
      snprintf(__str, 4uLL, "%X", *(unsigned __int8 *)(*a1 + v35 + 68));
      sub_10000BF04(&v55, __str);
      v36 = std::string::insert(&v55, 0, "0x");
      v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
      v57.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v37;
      v36->__r_.__value_.__l.__size_ = 0;
      v36->__r_.__value_.__r.__words[2] = 0;
      v36->__r_.__value_.__r.__words[0] = 0;
      v38 = std::string::append(&v57, " ");
      v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
      v59 = v38->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = v39;
      v38->__r_.__value_.__l.__size_ = 0;
      v38->__r_.__value_.__r.__words[2] = 0;
      v38->__r_.__value_.__r.__words[0] = 0;
      if (v59 >= 0)
        v40 = __p;
      else
        v40 = (void **)__p[0];
      if (v59 >= 0)
        v41 = HIBYTE(v59);
      else
        v41 = (std::string::size_type)__p[1];
      std::string::append(&v69, (const std::string::value_type *)v40, v41);
      if (SHIBYTE(v59) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v57.__r_.__value_.__l.__data_);
      if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v55.__r_.__value_.__l.__data_);
      ++v35;
    }
    while (v24 != v35);
  }
  v42 = sub_10036C048((unsigned __int16)__dst, v28, v29, v30, v31, v32, v33, v34);
  sub_100398EDC((_QWORD *)a2, (__int128 *)&v71, SHIBYTE(v14), v14, v42, (int *)v61);
  if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v69.__r_.__value_.__l.__data_);
  if (v65 < 0)
    operator delete(v63[0]);
  if (SHIBYTE(v72) < 0)
    goto LABEL_31;
}

void sub_100398C50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  void *v30;
  int v31;
  uint64_t v32;

  if (a23 < 0)
  {
    operator delete(__p);
    if ((v31 & 1) == 0)
    {
LABEL_6:
      sub_100053910((uint64_t)&a25);
      sub_10013EC8C(v32 - 192);
      if (*(char *)(v32 - 97) < 0)
        operator delete(*(void **)(v32 - 120));
      _Unwind_Resume(a1);
    }
  }
  else if (!v31)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v30);
  goto LABEL_6;
}

_QWORD *sub_100398D68(_QWORD *__dst, __int128 *a2, char a3, char a4, __int16 a5, int *a6, int a7)
{
  __int128 v13;

  if (*((char *)a2 + 23) < 0)
  {
    sub_100004678(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v13 = *a2;
    __dst[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v13;
  }
  *((_BYTE *)__dst + 24) = a3;
  *((_BYTE *)__dst + 25) = a4;
  *((_WORD *)__dst + 13) = a5;
  sub_100398E18((uint64_t)(__dst + 4), a6);
  *((_DWORD *)__dst + 26) = a7;
  *((_BYTE *)__dst + 108) = 1;
  return __dst;
}

void sub_100398DFC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100398E18(uint64_t a1, int *a2)
{
  int v4;
  __int128 v5;
  _BYTE *v6;
  __int128 v7;

  v4 = *a2;
  *(_WORD *)(a1 + 4) = *((_WORD *)a2 + 2);
  *(_DWORD *)a1 = v4;
  if (*((char *)a2 + 31) < 0)
  {
    sub_100004678((_BYTE *)(a1 + 8), *((void **)a2 + 1), *((_QWORD *)a2 + 2));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 2);
    *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 3);
    *(_OWORD *)(a1 + 8) = v5;
  }
  *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
  v6 = (_BYTE *)(a1 + 40);
  if (*((char *)a2 + 63) < 0)
  {
    sub_100004678(v6, *((void **)a2 + 5), *((_QWORD *)a2 + 6));
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 10);
    *(_QWORD *)(a1 + 56) = *((_QWORD *)a2 + 7);
    *(_OWORD *)v6 = v7;
  }
  *(_BYTE *)(a1 + 64) = 1;
  return a1;
}

void sub_100398EC0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_100398EDC(_QWORD *__dst, __int128 *a2, char a3, char a4, __int16 a5, int *a6)
{
  __int128 v11;

  if (*((char *)a2 + 23) < 0)
  {
    sub_100004678(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v11 = *a2;
    __dst[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v11;
  }
  *((_BYTE *)__dst + 24) = a3;
  *((_BYTE *)__dst + 25) = a4;
  *((_WORD *)__dst + 13) = a5;
  sub_100398E18((uint64_t)(__dst + 4), a6);
  *((_BYTE *)__dst + 104) = 0;
  *((_BYTE *)__dst + 108) = 0;
  return __dst;
}

void sub_100398F68(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100398F84(uint64_t result, int a2, int a3, __int16 a4)
{
  std::runtime_error *exception;

  *(_WORD *)result = a2;
  *(_BYTE *)(result + 2) = a3;
  *(_WORD *)(result + 3) = a4;
  if (a2 == 1)
  {
    if (a3)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      sub_100365F78(exception, "expect numConfigsSetSuccessfully == 0 when status == INVALID_CMD_PARAM");
    }
  }
  return result;
}

void sub_100398FE4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100398FF8(uint64_t a1)
{
  *(_QWORD *)a1 = off_100817A08;
  sub_10000BAB8(a1 + 56);
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  sub_10001AE68(a1 + 8);
  return a1;
}

void sub_100399040(uint64_t a1)
{
  *(_QWORD *)a1 = off_100817A08;
  sub_10000BAB8(a1 + 56);
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  sub_10001AE68(a1 + 8);
  operator delete();
}

_QWORD *sub_100399098(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x88uLL);
  *v2 = off_100817A08;
  sub_100399198((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1003990D8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1003990EC(uint64_t a1, _QWORD *a2)
{
  *a2 = off_100817A08;
  return sub_100399198((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t sub_100399108(uint64_t a1)
{
  return sub_100397624(a1 + 8);
}

void sub_100399110(void *a1)
{
  sub_100397624((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t sub_100399138(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), a1 + 24);
}

uint64_t sub_100399150(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10039918C()
{
}

uint64_t sub_100399198(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  if (*(char *)(a2 + 39) < 0)
  {
    sub_100004678((_BYTE *)(a1 + 16), *(void **)(a2 + 16), *(_QWORD *)(a2 + 24));
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 16) = v7;
  }
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  sub_10000BDF4((_BYTE *)(a1 + 48), a2 + 48);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  return a1;
}

void sub_100399230(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10001AE68(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_10039925C(_QWORD *a1)
{
  *a1 = off_100817A88;
  sub_10001AE68((uint64_t)(a1 + 1));
  return a1;
}

void sub_10039928C(_QWORD *a1)
{
  *a1 = off_100817A88;
  sub_10001AE68((uint64_t)(a1 + 1));
  operator delete();
}

_QWORD *sub_1003992CC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = off_100817A88;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *((_DWORD *)result + 6) = *(_DWORD *)(a1 + 24);
  return result;
}

uint64_t sub_100399324(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *(_QWORD *)a2 = off_100817A88;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  *(_DWORD *)(a2 + 24) = *(_DWORD *)(result + 24);
  return result;
}

uint64_t sub_10039935C(uint64_t a1)
{
  return sub_10001AE68(a1 + 8);
}

void sub_100399364(void *a1)
{
  sub_10001AE68((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t sub_10039938C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8), a1 + 24);
}

uint64_t sub_1003993A4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1003993E0()
{
}

_QWORD *sub_1003993EC(_QWORD *a1)
{
  *a1 = off_100817B08;
  sub_10001AE68((uint64_t)(a1 + 1));
  return a1;
}

void sub_10039941C(_QWORD *a1)
{
  *a1 = off_100817B08;
  sub_10001AE68((uint64_t)(a1 + 1));
  operator delete();
}

_QWORD *sub_10039945C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = off_100817B08;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *((_DWORD *)result + 6) = *(_DWORD *)(a1 + 24);
  return result;
}

uint64_t sub_1003994B4(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *(_QWORD *)a2 = off_100817B08;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  *(_DWORD *)(a2 + 24) = *(_DWORD *)(result + 24);
  return result;
}

uint64_t sub_1003994EC(uint64_t a1)
{
  return sub_10001AE68(a1 + 8);
}

void sub_1003994F4(void *a1)
{
  sub_10001AE68((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t sub_10039951C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), a1 + 24);
}

uint64_t sub_100399534(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100399570()
{
}

_QWORD *sub_10039957C(_QWORD *a1)
{
  *a1 = off_100817B88;
  sub_10001AE68((uint64_t)(a1 + 1));
  return a1;
}

void sub_1003995AC(_QWORD *a1)
{
  *a1 = off_100817B88;
  sub_10001AE68((uint64_t)(a1 + 1));
  operator delete();
}

_QWORD *sub_1003995EC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = off_100817B88;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *((_DWORD *)result + 6) = *(_DWORD *)(a1 + 24);
  return result;
}

uint64_t sub_100399644(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *(_QWORD *)a2 = off_100817B88;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  *(_DWORD *)(a2 + 24) = *(_DWORD *)(result + 24);
  return result;
}

uint64_t sub_10039967C(uint64_t a1)
{
  return sub_10001AE68(a1 + 8);
}

void sub_100399684(void *a1)
{
  sub_10001AE68((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t sub_1003996AC(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8), a1 + 24);
}

uint64_t sub_1003996C4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100399700()
{
}

_QWORD *sub_10039970C(_QWORD *a1)
{
  *a1 = off_100817C08;
  sub_10001AE68((uint64_t)(a1 + 1));
  return a1;
}

void sub_10039973C(_QWORD *a1)
{
  *a1 = off_100817C08;
  sub_10001AE68((uint64_t)(a1 + 1));
  operator delete();
}

_QWORD *sub_10039977C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = off_100817C08;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *((_WORD *)result + 12) = *(_WORD *)(a1 + 24);
  return result;
}

uint64_t sub_1003997D4(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *(_QWORD *)a2 = off_100817C08;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  *(_WORD *)(a2 + 24) = *(_WORD *)(result + 24);
  return result;
}

uint64_t sub_10039980C(uint64_t a1)
{
  return sub_10001AE68(a1 + 8);
}

void sub_100399814(void *a1)
{
  sub_10001AE68((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t sub_10039983C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8), a1 + 24);
}

uint64_t sub_100399854(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100399890()
{
}

_QWORD *sub_10039989C(_QWORD *a1)
{
  *a1 = off_100817C88;
  sub_10001AE68((uint64_t)(a1 + 1));
  return a1;
}

void sub_1003998CC(_QWORD *a1)
{
  *a1 = off_100817C88;
  sub_10001AE68((uint64_t)(a1 + 1));
  operator delete();
}

_QWORD *sub_10039990C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = off_100817C88;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *((_DWORD *)result + 6) = *(_DWORD *)(a1 + 24);
  return result;
}

uint64_t sub_100399964(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *(_QWORD *)a2 = off_100817C88;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  *(_DWORD *)(a2 + 24) = *(_DWORD *)(result + 24);
  return result;
}

uint64_t sub_10039999C(uint64_t a1)
{
  return sub_10001AE68(a1 + 8);
}

void sub_1003999A4(void *a1)
{
  sub_10001AE68((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t sub_1003999CC(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 64))(*(_QWORD *)(a1 + 8), a1 + 24);
}

uint64_t sub_1003999E4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100399A20()
{
}

_QWORD *sub_100399A2C(_QWORD *a1)
{
  *a1 = off_100817D08;
  sub_10001AE68((uint64_t)(a1 + 1));
  return a1;
}

void sub_100399A5C(_QWORD *a1)
{
  *a1 = off_100817D08;
  sub_10001AE68((uint64_t)(a1 + 1));
  operator delete();
}

_QWORD *sub_100399A9C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = off_100817D08;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *((_DWORD *)result + 6) = *(_DWORD *)(a1 + 24);
  return result;
}

uint64_t sub_100399AF4(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *(_QWORD *)a2 = off_100817D08;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  *(_DWORD *)(a2 + 24) = *(_DWORD *)(result + 24);
  return result;
}

uint64_t sub_100399B2C(uint64_t a1)
{
  return sub_10001AE68(a1 + 8);
}

void sub_100399B34(void *a1)
{
  sub_10001AE68((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t sub_100399B5C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), a1 + 24);
}

uint64_t sub_100399B74(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100399BB0()
{
}

uint64_t sub_100399BBC(uint64_t a1)
{
  uint64_t v2;
  void **v4;

  *(_QWORD *)a1 = off_100817D88;
  v2 = a1 + 8;
  v4 = (void **)(a1 + 32);
  sub_100153338(&v4);
  sub_10001AE68(v2);
  return a1;
}

void sub_100399C0C(uint64_t a1)
{
  uint64_t v1;
  void **v2;

  *(_QWORD *)a1 = off_100817D88;
  v1 = a1 + 8;
  v2 = (void **)(a1 + 32);
  sub_100153338(&v2);
  sub_10001AE68(v1);
  operator delete();
}

_QWORD *sub_100399C70(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x38uLL);
  *v2 = off_100817D88;
  sub_100399DC4((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_100399CB0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100399CC4(uint64_t a1, _QWORD *a2)
{
  *a2 = off_100817D88;
  return sub_100399DC4((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t sub_100399CE0(uint64_t a1)
{
  uint64_t v1;
  void **v3;

  v1 = a1 + 8;
  v3 = (void **)(a1 + 32);
  sub_100153338(&v3);
  return sub_10001AE68(v1);
}

void sub_100399D1C(void **a1)
{
  uint64_t v2;
  void **v3;

  v2 = (uint64_t)(a1 + 1);
  v3 = a1 + 4;
  sub_100153338(&v3);
  sub_10001AE68(v2);
  operator delete(a1);
}

uint64_t sub_100399D64(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 72))(*(_QWORD *)(a1 + 8), a1 + 24);
}

uint64_t sub_100399D7C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100399DB8()
{
}

uint64_t sub_100399DC4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  __int16 v6;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = *(_WORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = 0;
  *(_WORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  sub_100210B80((_QWORD *)(a1 + 24), *(_QWORD *)(a2 + 24), *(_QWORD *)(a2 + 32), (uint64_t)(*(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24)) >> 5);
  return a1;
}

void sub_100399E2C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10001AE68(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_100399E40(_QWORD *a1)
{
  *a1 = off_100817E08;
  sub_10001AE68((uint64_t)(a1 + 1));
  return a1;
}

void sub_100399E70(_QWORD *a1)
{
  *a1 = off_100817E08;
  sub_10001AE68((uint64_t)(a1 + 1));
  operator delete();
}

_QWORD *sub_100399EB0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = off_100817E08;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *((_DWORD *)result + 6) = *(_DWORD *)(a1 + 24);
  *((_WORD *)result + 14) = *(_WORD *)(a1 + 28);
  return result;
}

uint64_t sub_100399F10(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  int v6;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *(_QWORD *)a2 = off_100817E08;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = *(_DWORD *)(result + 24);
  *(_WORD *)(a2 + 28) = *(_WORD *)(result + 28);
  *(_DWORD *)(a2 + 24) = v6;
  return result;
}

uint64_t sub_100399F50(uint64_t a1)
{
  return sub_10001AE68(a1 + 8);
}

void sub_100399F58(void *a1)
{
  sub_10001AE68((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t sub_100399F80(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 80))(*(_QWORD *)(a1 + 8), a1 + 24);
}

uint64_t sub_100399F98(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100399FD4()
{
}

_QWORD *sub_100399FE0(_QWORD *a1)
{
  *a1 = off_100817E88;
  sub_10001AE68((uint64_t)(a1 + 1));
  return a1;
}

void sub_10039A010(_QWORD *a1)
{
  *a1 = off_100817E88;
  sub_10001AE68((uint64_t)(a1 + 1));
  operator delete();
}

__n128 sub_10039A050(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)v2 = off_100817E88;
  *((_QWORD *)v2 + 1) = v4;
  *((_QWORD *)v2 + 2) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_DWORD *)v2 + 10) = *(_DWORD *)(a1 + 40);
  return result;
}

__n128 sub_10039A0B0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  __n128 result;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = off_100817E88;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = *(__n128 *)(a1 + 24);
  *(_DWORD *)(a2 + 40) = *(_DWORD *)(a1 + 40);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

uint64_t sub_10039A0F0(uint64_t a1)
{
  return sub_10001AE68(a1 + 8);
}

void sub_10039A0F8(void *a1)
{
  sub_10001AE68((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t sub_10039A120(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 112))(*(_QWORD *)(a1 + 8), a1 + 24);
}

uint64_t sub_10039A138(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10039A174()
{
}

_QWORD *sub_10039A180(_QWORD *a1)
{
  *a1 = off_100817F08;
  sub_10001AE68((uint64_t)(a1 + 1));
  return a1;
}

void sub_10039A1B0(_QWORD *a1)
{
  *a1 = off_100817F08;
  sub_10001AE68((uint64_t)(a1 + 1));
  operator delete();
}

_QWORD *sub_10039A1F0(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = off_100817F08;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_10039A248(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = off_100817F08;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

uint64_t sub_10039A280(uint64_t a1)
{
  return sub_10001AE68(a1 + 8);
}

void sub_10039A288(void *a1)
{
  sub_10001AE68((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t sub_10039A2B0(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 120))(*(_QWORD *)(a1 + 8), a1 + 24);
}

uint64_t sub_10039A2C8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10039A304()
{
}

_QWORD *sub_10039A310(_QWORD *a1)
{
  *a1 = off_100817F88;
  sub_10001AE68((uint64_t)(a1 + 1));
  return a1;
}

void sub_10039A340(_QWORD *a1)
{
  *a1 = off_100817F88;
  sub_10001AE68((uint64_t)(a1 + 1));
  operator delete();
}

_QWORD *sub_10039A380(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = off_100817F88;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_10039A3D8(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = off_100817F88;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

uint64_t sub_10039A410(uint64_t a1)
{
  return sub_10001AE68(a1 + 8);
}

void sub_10039A418(void *a1)
{
  sub_10001AE68((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t sub_10039A440(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 128))(*(_QWORD *)(a1 + 8), a1 + 24);
}

uint64_t sub_10039A458(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10039A494()
{
}

_QWORD *sub_10039A4A0(_QWORD *a1)
{
  *a1 = off_100818008;
  sub_10001AE68((uint64_t)(a1 + 1));
  return a1;
}

void sub_10039A4D0(_QWORD *a1)
{
  *a1 = off_100818008;
  sub_10001AE68((uint64_t)(a1 + 1));
  operator delete();
}

_QWORD *sub_10039A510(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = off_100818008;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *((_DWORD *)result + 6) = *(_DWORD *)(a1 + 24);
  return result;
}

uint64_t sub_10039A568(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *(_QWORD *)a2 = off_100818008;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  *(_DWORD *)(a2 + 24) = *(_DWORD *)(result + 24);
  return result;
}

uint64_t sub_10039A5A0(uint64_t a1)
{
  return sub_10001AE68(a1 + 8);
}

void sub_10039A5A8(void *a1)
{
  sub_10001AE68((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t sub_10039A5D0(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 136))(*(_QWORD *)(a1 + 8), a1 + 24);
}

uint64_t sub_10039A5E8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10039A624()
{
}

_QWORD *sub_10039A630(_QWORD *a1)
{
  *a1 = off_100818088;
  sub_10001AE68((uint64_t)(a1 + 1));
  return a1;
}

void sub_10039A660(_QWORD *a1)
{
  *a1 = off_100818088;
  sub_10001AE68((uint64_t)(a1 + 1));
  operator delete();
}

__n128 sub_10039A6A0(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __n128 result;

  v2 = (char *)operator new(0x58uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)v2 = off_100818088;
  *((_QWORD *)v2 + 1) = v4;
  *((_QWORD *)v2 + 2) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
  result = *(__n128 *)(a1 + 68);
  *(__n128 *)(v2 + 68) = result;
  return result;
}

__n128 sub_10039A710(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  __n128 result;
  __int128 v7;
  __int128 v8;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = off_100818088;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = *(__n128 *)(a1 + 24);
  v7 = *(_OWORD *)(a1 + 40);
  v8 = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 68) = *(_OWORD *)(a1 + 68);
  *(_OWORD *)(a2 + 56) = v8;
  *(_OWORD *)(a2 + 40) = v7;
  *(__n128 *)(a2 + 24) = result;
  return result;
}

uint64_t sub_10039A760(uint64_t a1)
{
  return sub_10001AE68(a1 + 8);
}

void sub_10039A768(void *a1)
{
  sub_10001AE68((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t sub_10039A790(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 88))(*(_QWORD *)(a1 + 8), a1 + 24);
}

uint64_t sub_10039A7A8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10039A7E4()
{
}

uint64_t sub_10039A7F0(uint64_t a1)
{
  *(_QWORD *)a1 = off_100818108;
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  sub_10001AE68(a1 + 8);
  return a1;
}

void sub_10039A834(uint64_t a1)
{
  *(_QWORD *)a1 = off_100818108;
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  sub_10001AE68(a1 + 8);
  operator delete();
}

_QWORD *sub_10039A888(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x38uLL);
  *v2 = off_100818108;
  sub_10039A988((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_10039A8C8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10039A8DC(uint64_t a1, _QWORD *a2)
{
  *a2 = off_100818108;
  return sub_10039A988((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t sub_10039A8F8(uint64_t a1)
{
  return sub_1003985F0(a1 + 8);
}

void sub_10039A900(void *a1)
{
  sub_1003985F0((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t sub_10039A928(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 96))(*(_QWORD *)(a1 + 8), a1 + 24);
}

uint64_t sub_10039A940(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10039A97C()
{
}

uint64_t sub_10039A988(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  _BYTE *v6;
  __int128 v7;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  v6 = (_BYTE *)(a1 + 24);
  if (*(char *)(a2 + 47) < 0)
  {
    sub_100004678(v6, *(void **)(a2 + 24), *(_QWORD *)(a2 + 32));
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    *(_OWORD *)v6 = v7;
  }
  return a1;
}

void sub_10039AA00(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10001AE68(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_10039AA14(_QWORD *a1)
{
  *a1 = off_100818188;
  sub_10001AE68((uint64_t)(a1 + 1));
  return a1;
}

void sub_10039AA44(_QWORD *a1)
{
  *a1 = off_100818188;
  sub_10001AE68((uint64_t)(a1 + 1));
  operator delete();
}

_QWORD *sub_10039AA84(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = off_100818188;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *((_DWORD *)result + 6) = *(_DWORD *)(a1 + 24);
  return result;
}

uint64_t sub_10039AADC(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *(_QWORD *)a2 = off_100818188;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  *(_DWORD *)(a2 + 24) = *(_DWORD *)(result + 24);
  return result;
}

uint64_t sub_10039AB14(uint64_t a1)
{
  return sub_10001AE68(a1 + 8);
}

void sub_10039AB1C(void *a1)
{
  sub_10001AE68((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t sub_10039AB44(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 104))(*(_QWORD *)(a1 + 8), a1 + 24);
}

uint64_t sub_10039AB5C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10039AB98()
{
}

uint64_t sub_10039ABA4(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_10039AC18((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_10039AC18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  char v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      v8 = *(_BYTE *)(a3 - 32);
      a3 -= 32;
      *(_BYTE *)(v7 - 32) = v8;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      *(_QWORD *)(v7 - 24) = 0;
      *(_OWORD *)(v7 - 24) = *(_OWORD *)(a3 + 8);
      *(_QWORD *)(v7 - 8) = *(_QWORD *)(a3 + 24);
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)(a3 + 24) = 0;
      v7 = *((_QWORD *)&v14 + 1) - 32;
      *((_QWORD *)&v14 + 1) -= 32;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  sub_10039ACC0((uint64_t)v11);
  return v9;
}

uint64_t sub_10039ACC0(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_10036A38C(a1);
  return a1;
}

uint64_t sub_10039ACF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(_WORD *)a1 = 0;
  *(_DWORD *)(a1 + 4) = 0;
  *(_DWORD *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_QWORD *)(a1 + 48) = a2;
  sub_100027674(a1 + 56, a3);
  sub_100027674(a1 + 88, a4);
  *(_QWORD *)(a1 + 120) = 0;
  *(_WORD *)(a1 + 128) = 0;
  if (!*(_QWORD *)(a1 + 80))
    __assert_rtn("RoseDebugManager", "roseDebugManager.cpp", 47, "fClientCallback");
  return a1;
}

void sub_10039AD88(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v4;
  uint64_t v5;

  v4 = *(_QWORD **)(v1 + 80);
  if (v4 == v2)
  {
    v5 = 4;
    v4 = v2;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  if (*(char *)(v1 + 47) < 0)
    operator delete(*(void **)(v1 + 24));
  _Unwind_Resume(exception_object);
}

void sub_10039AE14(uint64_t a1, int a2)
{
  uint64_t i;
  int *v5;
  uint64_t **v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15[3];
  int v16;
  int *v17;
  _QWORD v18[3];
  int v19;
  _QWORD v20[3];
  int v21;
  _QWORD v22[3];

  v16 = a2;
  LODWORD(v17) = 0;
  sub_10000BF04(v18, "Idle");
  v19 = 1;
  sub_10000BF04(v20, "ClientTriggeredFatal");
  v21 = 2;
  sub_10000BF04(v22, "ClientTriggeredNonFatal");
  sub_1003A0A50((uint64_t)v15, (int *)&v17, 3);
  for (i = 0; i != -12; i -= 4)
  {
    if (SHIBYTE(v22[i + 2]) < 0)
      operator delete((void *)v22[i]);
  }
  if (!a2)
  {
    if (*(char *)(a1 + 47) < 0)
    {
      **(_BYTE **)(a1 + 24) = 0;
      *(_QWORD *)(a1 + 32) = 0;
    }
    else
    {
      *(_BYTE *)(a1 + 24) = 0;
      *(_BYTE *)(a1 + 47) = 0;
    }
  }
  v5 = (int *)(a1 + 4);
  v17 = v5;
  v6 = sub_10000725C(v15, v5, (uint64_t)&unk_100472CF8, &v17);
  v7 = v6 + 5;
  if (*((char *)v6 + 63) < 0)
    v7 = (_QWORD *)*v7;
  v17 = &v16;
  sub_10000725C(v15, &v16, (uint64_t)&unk_100472CF8, &v17);
  sub_1000051BC("DebugLogState transition from: %s to: %s", v8, v9, v10, v11, v12, v13, v14, (uint64_t)v7);
  *v5 = v16;
  sub_1001D9568((uint64_t)v15, (char *)v15[1]);
}

void sub_10039AFB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  uint64_t v16;
  uint64_t v18;

  v18 = 0;
  while (1)
  {
    if (*(char *)(v16 + v18 + 95) < 0)
      operator delete(*(void **)(v16 + v18 + 72));
    v18 -= 32;
    if (v18 == -96)
      _Unwind_Resume(exception_object);
  }
}

uint64_t sub_10039B02C(uint64_t a1, uint64_t a2, char a3, char a4)
{
  os_unfair_lock_s *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v37[5];
  _BYTE v38[24];
  _BYTE *v39;
  _BYTE v40[24];
  _BYTE *v41;
  _BYTE v42[24];
  _BYTE *v43;

  v8 = (os_unfair_lock_s *)(a1 + 8);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 8));
  if (!*(_BYTE *)a1)
  {
    if (!a2)
    {
      sub_10036CAF0("RoseDebugManager: queue shouldn't be null", v9, v10, v11, v12, v13, v14, v15, v37[0]);
LABEL_23:
      os_unfair_lock_unlock(v8);
      return a2;
    }
    *(_QWORD *)(a1 + 120) = a2;
    *(_BYTE *)(a1 + 129) = a3;
    *(_BYTE *)(a1 + 128) = a4;
    v16 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, (dispatch_queue_t)a2);
    *(_QWORD *)(a1 + 16) = v16;
    if (!v16)
    {
      sub_10036CAF0("Unable to create the timer", v17, v18, v19, v20, v21, v22, v23, v37[0]);
      *(_QWORD *)(a1 + 120) = 0;
      os_unfair_lock_unlock(v8);
      return 0;
    }
    v37[0] = (uint64_t)_NSConcreteStackBlock;
    v37[1] = 0x40000000;
    v37[2] = (uint64_t)sub_10039B320;
    v37[3] = (uint64_t)&unk_1008181F8;
    v37[4] = a1;
    dispatch_source_set_event_handler(v16, v37);
    *(_BYTE *)(a1 + 1) = 1;
    v24 = *(_QWORD *)(a1 + 48);
    v25 = operator new(0x20uLL);
    *v25 = off_100818248;
    v25[1] = sub_10039C49C;
    v25[2] = 0;
    v25[3] = a1;
    v43 = v25;
    sub_10036E160(v24, (uint64_t)v42);
    v26 = v43;
    if (v43 == v42)
    {
      v27 = 4;
      v26 = v42;
    }
    else
    {
      if (!v43)
        goto LABEL_12;
      v27 = 5;
    }
    (*(void (**)(void))(*v26 + 8 * v27))();
LABEL_12:
    v28 = *(_QWORD *)(a1 + 48);
    v29 = operator new(0x20uLL);
    *v29 = off_100818308;
    v29[1] = sub_10039C6B4;
    v29[2] = 0;
    v29[3] = a1;
    v41 = v29;
    sub_10036E200(v28, (uint64_t)v40);
    v30 = v41;
    if (v41 == v40)
    {
      v31 = 4;
      v30 = v40;
    }
    else
    {
      if (!v41)
        goto LABEL_17;
      v31 = 5;
    }
    (*(void (**)(void))(*v30 + 8 * v31))();
LABEL_17:
    v32 = *(_QWORD *)(a1 + 48);
    v33 = operator new(0x20uLL);
    *v33 = off_1008183C8;
    v33[1] = sub_10039C7CC;
    v33[2] = 0;
    v33[3] = a1;
    v39 = v33;
    sub_10036E2A0(v32, (uint64_t)v38);
    v34 = v39;
    if (v39 == v38)
    {
      v35 = 4;
      v34 = v38;
    }
    else
    {
      if (!v39)
      {
LABEL_22:
        a2 = 1;
        *(_BYTE *)a1 = 1;
        goto LABEL_23;
      }
      v35 = 5;
    }
    (*(void (**)(void))(*v34 + 8 * v35))();
    goto LABEL_22;
  }
  os_unfair_lock_unlock(v8);
  return 1;
}

void sub_10039B2A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char *a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  char *v21;
  char *v23;
  uint64_t v24;

  v23 = a17;
  if (a17 == v21)
  {
    v24 = 4;
    v23 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v24 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v23 + 8 * v24))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_10039B320(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21[2];
  char v22;
  void *__p[2];
  char v24;
  int v25;

  v8 = *(_QWORD *)(a1 + 32);
  sub_10036CAF0("Crashlog callback timer expired", a2, a3, a4, a5, a6, a7, a8, v19);
  os_unfair_lock_lock((os_unfair_lock_t)(v8 + 8));
  sub_1000051BC("RoseDebugManager: Suspending the crashlog timer", v9, v10, v11, v12, v13, v14, v15, v20);
  dispatch_suspend(*(dispatch_object_t *)(v8 + 16));
  *(_BYTE *)(v8 + 1) = 1;
  v16 = *(_DWORD *)(v8 + 4);
  if (v16 == 2)
  {
    sub_10000BF04(v21, "Crashlog callback timer expired");
    sub_10039B484(v8, v8 + 24, 0, (std::string::size_type)v21);
    if (v22 < 0)
      operator delete(v21[0]);
    sub_10039AE14(v8, 0);
    v17 = 3;
  }
  else
  {
    if (v16 != 1)
      goto LABEL_11;
    sub_10000BF04(__p, "Crashlog callback timer expired");
    sub_10039B484(v8, v8 + 24, 0, (std::string::size_type)__p);
    if (v24 < 0)
      operator delete(__p[0]);
    sub_10039AE14(v8, 0);
    v17 = 1;
  }
  v25 = v17;
  v18 = *(_QWORD *)(v8 + 80);
  if (!v18)
    sub_100027BC4();
  (*(void (**)(uint64_t, int *))(*(_QWORD *)v18 + 48))(v18, &v25);
LABEL_11:
  os_unfair_lock_unlock((os_unfair_lock_t)(v8 + 8));
}

void sub_10039B450(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10039B484(uint64_t a1, std::string::size_type a2, uint64_t a3, std::string::size_type a4)
{
  tm *v8;
  void **v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  void **v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  void (__cdecl **v19)(std::ofstream *__hidden);
  uint64_t v20;
  std::ios_base *v21;
  passwd *v22;
  passwd *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  std::string::size_type v32;
  size_t v33;
  _QWORD *v34;
  _QWORD *v35;
  std::__fs::filesystem::path *p_from;
  std::string::size_type size;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  size_t v42;
  std::__fs::filesystem::path *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  std::__fs::filesystem::path *v47;
  std::__fs::filesystem::path *v48;
  int *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  std::__fs::filesystem::path *v61;
  int *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  std::__fs::filesystem::path *v70;
  int v71;
  std::string::size_type v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  std::__fs::filesystem::path *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  std::__fs::filesystem::path *v88;
  int v89;
  std::string::size_type v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  std::__fs::filesystem::path *v98;
  std::string::size_type v99;
  uint64_t v100;
  const char *v101;
  uint64_t v102;
  const char *v103;
  uint64_t v104;
  std::string::size_type v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  std::__fs::filesystem::path *v117;
  std::string::size_type v118;
  _QWORD *v119;
  const std::locale::facet *v120;
  uint64_t v121;
  char *v122;
  unsigned __int8 v123;
  void **v124;
  void **v125;
  int v126;
  void **v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  void **v135;
  int *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  const char *v144;
  int *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  void **v167;
  uint64_t v168;
  std::string::size_type v169;
  std::string v170;
  char *v171;
  unsigned __int8 v172[16];
  unsigned __int8 v173[8];
  uint64_t v174;
  unsigned __int8 v175[8];
  uint64_t v176;
  unsigned __int8 v177[8];
  uint64_t v178;
  unsigned __int8 v179[8];
  uint64_t v180;
  std::__fs::filesystem::path __from;
  _QWORD v182[10];
  char v183;
  uint64_t v184;
  __int16 v185;
  _QWORD v186[3];
  unsigned __int8 v187[16];
  unsigned __int8 v188[16];
  std::__fs::filesystem::path v189;
  void *v190[2];
  char v191;
  std::__fs::filesystem::path v192;
  _QWORD v193[2];
  uint64_t v194;
  _QWORD v195[10];
  char v196;
  uint64_t v197;
  time_t v198;
  std::chrono::system_clock::time_point __t;
  void *v200[2];
  unsigned __int8 v201;
  void *__p[2];
  unsigned __int8 v203;
  void (__cdecl **v204)(std::ofstream *__hidden);
  _QWORD v205[51];
  void (__cdecl **v206)(std::ofstream *__hidden);
  char __s[50];

  sub_10000BF04(v200, "/private/var/mobile/Library/Logs/CrashReporter/Rose/");
  __t.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  v198 = std::chrono::system_clock::to_time_t(&__t);
  sub_1000537E4((uint64_t)v193);
  v8 = localtime(&v198);
  strftime(__s, 0x32uLL, "%Y-%m-%d-%H-%M-%S", v8);
  memset(&v192, 0, sizeof(v192));
  if ((v201 & 0x80u) == 0)
    v9 = v200;
  else
    v9 = (void **)v200[0];
  if ((v201 & 0x80u) == 0)
    v10 = v201;
  else
    v10 = (uint64_t)v200[1];
  v11 = sub_100054C60(&v194, (uint64_t)v9, v10);
  v12 = sub_100054C60(v11, (uint64_t)"Rose-", 5);
  sub_10000BF04(__p, __s);
  if ((v203 & 0x80u) == 0)
    v13 = __p;
  else
    v13 = (void **)__p[0];
  if ((v203 & 0x80u) == 0)
    v14 = v203;
  else
    v14 = (uint64_t)__p[1];
  v15 = sub_100054C60(v12, (uint64_t)v13, v14);
  v16 = sub_100054C60(v15, (uint64_t)".", 1);
  LOBYTE(v204) = 48;
  v17 = sub_10015BFA0(v16, (char *)&v204);
  *(_QWORD *)((char *)v17 + *(_QWORD *)(*v17 - 24) + 24) = 3;
  v18 = (_QWORD *)std::ostream::operator<<();
  sub_100054C60(v18, (uint64_t)"/", 1);
  if ((char)v203 < 0)
    operator delete(__p[0]);
  v169 = a4;
  std::stringbuf::str(v195);
  memset(&v189, 0, sizeof(v189));
  sub_10039F948(v188);
  sub_10039F948(v187);
  v204 = v19;
  *(_QWORD *)((char *)&v205[-1] + (_QWORD)*(v19 - 3)) = v20;
  v21 = (std::ios_base *)((char *)&v205[-1] + (_QWORD)*(v204 - 3));
  std::ios_base::init(v21, v205);
  v21[1].__vftable = 0;
  v21[1].__fmtflags_ = -1;
  std::filebuf::basic_filebuf(v205);
  sub_1003A180C(v186, 2uLL);
  bzero(__p, 0x400uLL);
  v22 = getpwnam("mobile");
  v185 = 0;
  if (!*(_BYTE *)a1)
  {
    v31 = 0;
    goto LABEL_58;
  }
  v23 = v22;
  if (confstr(65537, (char *)__p, 0x400uLL) - 1024 <= 0xFFFFFFFFFFFFFC00)
  {
    sub_10036CAF0("failed to get process temp directory path", v24, v25, v26, v27, v28, v29, v30, v168);
LABEL_50:
    v31 = 0;
LABEL_51:
    LOBYTE(v185) = 1;
    goto LABEL_52;
  }
  sub_1000537E4((uint64_t)&__from);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::operator=(v193, &__from);
  *(std::string::size_type *)((char *)__from.__pn_.__r_.__value_.__r.__words
  __from.__pn_.__r_.__value_.__r.__words[2] = v32;
  if (v183 < 0)
    operator delete((void *)v182[8]);
  std::streambuf::~streambuf(v182);
  std::ios::~ios(&v184);
  v33 = strlen((const char *)__p);
  v34 = sub_100054C60(&v194, (uint64_t)__p, v33);
  v35 = sub_100054C60(v34, (uint64_t)"/Rose-", 6);
  sub_10000BF04(&__from, __s);
  if ((__from.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_from = &__from;
  else
    p_from = (std::__fs::filesystem::path *)__from.__pn_.__r_.__value_.__r.__words[0];
  if ((__from.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__from.__pn_.__r_.__value_.__r.__words[2]);
  else
    size = __from.__pn_.__r_.__value_.__l.__size_;
  v38 = sub_100054C60(v35, (uint64_t)p_from, size);
  v39 = sub_100054C60(v38, (uint64_t)".", 1);
  v170.__r_.__value_.__s.__data_[0] = 48;
  v40 = sub_10015BFA0(v39, (char *)&v170);
  *(_QWORD *)((char *)v40 + *(_QWORD *)(*v40 - 24) + 24) = 3;
  v41 = (_QWORD *)std::ostream::operator<<();
  sub_100054C60(v41, (uint64_t)"/", 1);
  if (SHIBYTE(__from.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__from.__pn_.__r_.__value_.__l.__data_);
  std::stringbuf::str(v195);
  if (SHIBYTE(v192.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v192.__pn_.__r_.__value_.__l.__data_);
  v192 = __from;
  if ((__from.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v42 = HIBYTE(__from.__pn_.__r_.__value_.__r.__words[2]);
  else
    v42 = v192.__pn_.__r_.__value_.__l.__size_;
  v43 = &__from;
  sub_10013FDB8((uint64_t)&__from, v42 + 12);
  if ((__from.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v43 = (std::__fs::filesystem::path *)__from.__pn_.__r_.__value_.__r.__words[0];
  if (v42)
  {
    if ((v192.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v47 = &v192;
    else
      v47 = (std::__fs::filesystem::path *)v192.__pn_.__r_.__value_.__r.__words[0];
    memmove(v43, v47, v42);
  }
  strcpy((char *)v43 + v42, "summary.json");
  if (SHIBYTE(v189.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v189.__pn_.__r_.__value_.__l.__data_);
  v189 = __from;
  if (*(_BYTE *)(a1 + 128) || *(_BYTE *)(a1 + 129))
  {
    if ((v192.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v48 = &v192;
    else
      v48 = (std::__fs::filesystem::path *)v192.__pn_.__r_.__value_.__r.__words[0];
    if (mkdir((const char *)v48, 0x1F8u))
    {
      v49 = __error();
      sub_10036CAF0("Unable to create a temp directory location: %d", v50, v51, v52, v53, v54, v55, v56, *v49);
      goto LABEL_50;
    }
    if (v23)
    {
      v61 = (v192.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &v192
          : (std::__fs::filesystem::path *)v192.__pn_.__r_.__value_.__r.__words[0];
      if (chown((const char *)v61, v23->pw_uid, 0xFFFFFFFF))
      {
        v62 = __error();
        sub_10036CAF0("Error changing the ownership of the temp directory to _nearbyd: %d", v63, v64, v65, v66, v67, v68, v69, *v62);
        LOBYTE(v185) = 1;
      }
    }
    if ((v192.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v70 = &v192;
    else
      v70 = (std::__fs::filesystem::path *)v192.__pn_.__r_.__value_.__r.__words[0];
    if (chmod((const char *)v70, 0x1F8u))
    {
      v71 = SHIBYTE(v192.__pn_.__r_.__value_.__r.__words[2]);
      v72 = v192.__pn_.__r_.__value_.__r.__words[0];
      __error();
      v80 = &v192;
      if (v71 < 0)
        v80 = (std::__fs::filesystem::path *)v72;
      sub_10036CAF0("Unable to chmod '%s': %d", v73, v74, v75, v76, v77, v78, v79, (uint64_t)v80);
      LOBYTE(v185) = 1;
    }
    std::ofstream::open(&v204);
    if ((v189.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v88 = &v189;
    else
      v88 = (std::__fs::filesystem::path *)v189.__pn_.__r_.__value_.__r.__words[0];
    if (!v205[15])
    {
      sub_10036CAF0("Error trying to open file: %s", v81, v82, v83, v84, v85, v86, v87, (uint64_t)v88);
      goto LABEL_50;
    }
    if (chmod((const char *)v88, 0x1B0u))
    {
      v89 = SHIBYTE(v189.__pn_.__r_.__value_.__r.__words[2]);
      v90 = v189.__pn_.__r_.__value_.__r.__words[0];
      __error();
      v98 = &v189;
      if (v89 < 0)
        v98 = (std::__fs::filesystem::path *)v90;
      sub_10036CAF0("Unable to chmod '%s': %d", v91, v92, v93, v94, v95, v96, v97, (uint64_t)v98);
      LOBYTE(v185) = 1;
    }
    if (*(char *)(a2 + 23) >= 0)
      v99 = a2;
    else
      v99 = *(_QWORD *)a2;
    v180 = 0;
    __from.__pn_.__r_.__value_.__r.__words[0] = v99;
    v179[0] = 0;
    sub_1003A1010((uint64_t)v179, &__from.__pn_.__r_.__value_.__l.__data_);
    sub_1003A08FC(v179);
    v100 = sub_10039DCFC(v188, "Reason");
    sub_10039DEB4(v100, (uint64_t)v179);
    sub_1003A0870(v179);
    if (*(_BYTE *)(a1 + 129))
      v101 = "Enabled";
    else
      v101 = "Disabled";
    __from.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)v101;
    v177[0] = 0;
    v178 = 0;
    sub_1003A1010((uint64_t)v177, &__from.__pn_.__r_.__value_.__l.__data_);
    sub_1003A08FC(v177);
    v102 = sub_10039DCFC(v188, "Firmware Logs");
    sub_10039DEB4(v102, (uint64_t)v177);
    sub_1003A0870(v177);
    if (*(_BYTE *)(a1 + 128))
      v103 = "Enabled";
    else
      v103 = "Disabled";
    __from.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)v103;
    v175[0] = 0;
    v176 = 0;
    sub_1003A1010((uint64_t)v175, &__from.__pn_.__r_.__value_.__l.__data_);
    sub_1003A08FC(v175);
    v104 = sub_10039DCFC(v188, "Crash Logs");
    v105 = v169;
    sub_10039DEB4(v104, (uint64_t)v175);
    sub_1003A0870(v175);
    if (*(char *)(v169 + 23) < 0)
      v105 = *(_QWORD *)v169;
    __from.__pn_.__r_.__value_.__r.__words[0] = v105;
    v173[0] = 0;
    v174 = 0;
    sub_1003A1010((uint64_t)v173, &__from.__pn_.__r_.__value_.__l.__data_);
    sub_1003A08FC(v173);
    v106 = sub_10039DCFC(v188, "Log Collection Error");
    sub_10039DEB4(v106, (uint64_t)v173);
    sub_1003A0870(v173);
  }
  if ((sub_10039EA6C(a1, (const void **)&v192.__pn_.__r_.__value_.__l.__data_, v187, (uint64_t)&v185 + 1, &v185, v44, v45, v46) & 1) == 0)sub_10036CAF0("Error collecting firmware logs.", v107, v108, v109, v110, v111, v112, v113, v168);
  v31 = sub_10039D178(a1, (const void **)&v192.__pn_.__r_.__value_.__l.__data_, a3, v186, v187, (_BYTE *)&v185 + 1, &v185);
  if ((_DWORD)v31 == 2)
  {
    if (sub_10039E3A8(a1, (const void **)&v192.__pn_.__r_.__value_.__l.__data_, v186, v187, (_BYTE *)&v185 + 1, &v185, v114, v115))v31 = 2;
    else
      v31 = 3;
  }
  sub_1003A18AC((uint64_t)v172, (uint64_t)v187);
  v116 = sub_10039DCFC(v188, "Files Collected");
  sub_10039DEB4(v116, (uint64_t)v172);
  sub_1003A0870(v172);
  sub_10039F97C((uint64_t)v188, 4);
  if ((__from.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v117 = &__from;
  else
    v117 = (std::__fs::filesystem::path *)__from.__pn_.__r_.__value_.__r.__words[0];
  if ((__from.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v118 = HIBYTE(__from.__pn_.__r_.__value_.__r.__words[2]);
  else
    v118 = __from.__pn_.__r_.__value_.__l.__size_;
  v119 = sub_100054C60(&v204, (uint64_t)v117, v118);
  std::ios_base::getloc((const std::ios_base *)((char *)v119 + *(_QWORD *)(*v119 - 24)));
  v120 = std::locale::use_facet((const std::locale *)&v170, &std::ctype<char>::id);
  v121 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v120->__vftable[2].~facet_0)(v120, 10);
  std::locale::~locale((std::locale *)&v170);
  std::ostream::put(v119, v121);
  std::ostream::flush(v119);
  if (SHIBYTE(__from.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__from.__pn_.__r_.__value_.__l.__data_);
  if (!std::filebuf::close(v205))
    std::ios_base::clear((std::ios_base *)((char *)&v205[-1] + (_QWORD)*(v204 - 3)), *(_DWORD *)((char *)&v205[3] + (_QWORD)*(v204 - 3)) | 4);
  if (*(_BYTE *)(a1 + 128) || *(_BYTE *)(a1 + 129))
  {
    v122 = (char *)v200;
    if ((v201 & 0x80u) != 0)
      v122 = (char *)v200[0];
    v171 = v122;
    sub_10029149C(&__from.__pn_, &v171);
    std::__fs::filesystem::__status(&__from, 0);
    v123 = v170.__r_.__value_.__s.__data_[0];
    if (SHIBYTE(__from.__pn_.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__from.__pn_.__r_.__value_.__l.__data_);
    if (v123 == 255 || !v123)
    {
      if ((v201 & 0x80u) == 0)
        v124 = v200;
      else
        v124 = (void **)v200[0];
      if (mkdir((const char *)v124, 0x1F8u) && *__error() != 17)
      {
        v136 = __error();
        sub_10036CAF0("Unable to create the parent directory for debug logs: %d", v137, v138, v139, v140, v141, v142, v143, *v136);
        goto LABEL_51;
      }
      if ((v201 & 0x80u) == 0)
        v125 = v200;
      else
        v125 = (void **)v200[0];
      if (chmod((const char *)v125, 0x1F8u))
      {
        v126 = (char)v201;
        v127 = (void **)v200[0];
        __error();
        v135 = v200;
        if (v126 < 0)
          v135 = v127;
        sub_10036CAF0("Unable to chmod '%s': %d", v128, v129, v130, v131, v132, v133, v134, (uint64_t)v135);
        goto LABEL_51;
      }
      if (v23)
      {
        v144 = (v201 & 0x80u) == 0 ? (const char *)v200 : (const char *)v200[0];
        if (chown(v144, v23->pw_uid, 0xFFFFFFFF))
        {
          v145 = __error();
          sub_10036CAF0("Error changing the ownership of parent directory to _nearbyd: %d", v146, v147, v148, v149, v150, v151, v152, *v145);
          goto LABEL_51;
        }
      }
    }
    if ((sub_10039F350((char *)v200) & 1) == 0)
    {
      sub_10036CAF0("Unable to make room for new logs", v153, v154, v155, v156, v157, v158, v159, v168);
      goto LABEL_51;
    }
    sub_10017ED1C(&__from.__pn_, (char *)&v192);
    sub_10017ED1C(&v170, (char *)v190);
    std::__fs::filesystem::__copy(&__from, (const std::__fs::filesystem::path *)&v170, recursive, 0);
    if (SHIBYTE(v170.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v170.__r_.__value_.__l.__data_);
    if (SHIBYTE(__from.__pn_.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__from.__pn_.__r_.__value_.__l.__data_);
    v167 = v190;
    if (v191 < 0)
      v167 = (void **)v190[0];
    sub_1000051BC("Logs can be found in this directory: %s", v160, v161, v162, v163, v164, v165, v166, (uint64_t)v167);
    sub_10017ED1C(&__from.__pn_, (char *)&v192);
    std::__fs::filesystem::__remove_all(&__from, 0);
    if (SHIBYTE(__from.__pn_.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__from.__pn_.__r_.__value_.__l.__data_);
  }
LABEL_52:
  if (HIBYTE(v185))
  {
    LODWORD(__from.__pn_.__r_.__value_.__l.__data_) = 5;
    v57 = *(_QWORD *)(a1 + 80);
    if (!v57)
      goto LABEL_156;
    (*(void (**)(uint64_t, std::__fs::filesystem::path *))(*(_QWORD *)v57 + 48))(v57, &__from);
  }
  if (!(_BYTE)v185)
    goto LABEL_58;
  LODWORD(__from.__pn_.__r_.__value_.__l.__data_) = 6;
  v58 = *(_QWORD *)(a1 + 80);
  if (!v58)
LABEL_156:
    sub_100027BC4();
  (*(void (**)(uint64_t, std::__fs::filesystem::path *))(*(_QWORD *)v58 + 48))(v58, &__from);
LABEL_58:
  __p[0] = v186;
  sub_10013133C((void ***)__p);
  std::filebuf::~filebuf(v205);
  std::ios::~ios(&v206);
  sub_1003A0870(v187);
  sub_1003A0870(v188);
  if (SHIBYTE(v189.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v189.__pn_.__r_.__value_.__l.__data_);
  if (v191 < 0)
    operator delete(v190[0]);
  if (SHIBYTE(v192.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v192.__pn_.__r_.__value_.__l.__data_);
  *(_QWORD *)((char *)v193
  v194 = v59;
  if (v196 < 0)
    operator delete((void *)v195[8]);
  std::streambuf::~streambuf(v195);
  std::ios::~ios(&v197);
  if ((char)v201 < 0)
    operator delete(v200[0]);
  return v31;
}

#error "10039C158: call analysis failed (funcsize=60)"

void sub_10039C49C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void **v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  void *__p[2];
  char v29;
  __int128 v30;
  uint64_t v31;

  sub_1000051BC("crashReceived", a2, a3, a4, a5, a6, a7, a8, (uint64_t)__p[0]);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 8));
  if (*(_BYTE *)a1)
  {
    if (a2)
    {
      if (!*(_DWORD *)(a1 + 4))
      {
        sub_10000BF04(&v30, "FW Generated");
        v17 = (void **)(a1 + 24);
        if (*(char *)(a1 + 47) < 0)
          operator delete(*v17);
        *(_OWORD *)v17 = v30;
        *(_QWORD *)(a1 + 40) = v31;
      }
      sub_10000BF04(__p, "");
      v25 = sub_10039B484(a1, a1 + 24, a2, (std::string::size_type)__p);
      if (v29 < 0)
        operator delete(__p[0]);
      switch(v25)
      {
        case 0:
          sub_10036CAF0("No crashlogs were available to dequeue", v18, v19, v20, v21, v22, v23, v24, (uint64_t)__p[0]);
          goto LABEL_23;
        case 1:
          if (*(_DWORD *)(a1 + 4) != 2)
            goto LABEL_23;
          sub_1000051BC("RoseDebugManager: Suspending the crashlog timer", v18, v19, v20, v21, v22, v23, v24, (uint64_t)__p[0]);
          dispatch_suspend(*(dispatch_object_t *)(a1 + 16));
          *(_BYTE *)(a1 + 1) = 1;
          sub_10039AE14(a1, 0);
          v26 = 4;
          break;
        case 2:
          if (*(_DWORD *)(a1 + 4))
          {
            sub_1000051BC("RoseDebugManager: Suspending the crashlog timer", v18, v19, v20, v21, v22, v23, v24, (uint64_t)__p[0]);
            dispatch_suspend(*(dispatch_object_t *)(a1 + 16));
            *(_BYTE *)(a1 + 1) = 1;
            sub_10039AE14(a1, 0);
          }
          v26 = 2;
          break;
        case 3:
          if (*(_DWORD *)(a1 + 4))
          {
            sub_1000051BC("RoseDebugManager: Suspending the crashlog timer", v18, v19, v20, v21, v22, v23, v24, (uint64_t)__p[0]);
            dispatch_suspend(*(dispatch_object_t *)(a1 + 16));
            *(_BYTE *)(a1 + 1) = 1;
            sub_10039AE14(a1, 0);
          }
          v26 = 1;
          break;
        default:
          goto LABEL_23;
      }
    }
    else
    {
      sub_10036CAF0("descriptor is null", v10, v11, v12, v13, v14, v15, v16, (uint64_t)__p[0]);
      v26 = 5;
    }
    LODWORD(v30) = v26;
    v27 = *(_QWORD *)(a1 + 80);
    if (!v27)
      sub_100027BC4();
    (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v27 + 48))(v27, &v30);
LABEL_23:
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 8));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 8));
  }
}

void sub_10039C698(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10039C6B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(void);
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;

  switch((int)a2)
  {
    case 0:
      sub_1000051BC("fwStateChangeReceived: FW is in SecureROM", a2, a3, a4, a5, a6, a7, a8, v21);
      os_unfair_lock_lock((os_unfair_lock_t)(a1 + 8));
      if (*(_DWORD *)(a1 + 4) == 2)
      {
        sub_1000051BC("RoseDebugManager: Suspending the crashlog timer", v10, v11, v12, v13, v14, v15, v16, v22);
        dispatch_suspend(*(dispatch_object_t *)(a1 + 16));
        *(_BYTE *)(a1 + 1) = 1;
        sub_10039AE14(a1, 0);
      }
      os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 8));
      v17 = *(_QWORD *)(a1 + 80);
      if (!v17)
        goto LABEL_13;
      v18 = *(void (**)(void))(*(_QWORD *)v17 + 48);
      goto LABEL_8;
    case 1:
      v20 = "fwStateChangeReceived: FW is in FirmwareRunning";
      goto LABEL_12;
    case 2:
      sub_1000051BC("fwStateChangeReceived: FW is in FirmwareLogCollectionInProgress", a2, a3, a4, a5, a6, a7, a8, v21);
      v19 = *(_QWORD *)(a1 + 80);
      if (!v19)
LABEL_13:
        sub_100027BC4();
      v18 = *(void (**)(void))(*(_QWORD *)v19 + 48);
LABEL_8:
      v18();
      return;
    case 3:
      v20 = "fwStateChangeReceived: FW is in FirmwareCrashed";
      goto LABEL_12;
    case 4:
      v20 = "fwStateChangeReceived: Unable to decode the FW state.";
LABEL_12:
      sub_1000051BC(v20, a2, a3, a4, a5, a6, a7, a8, a9);
      break;
    default:
      return;
  }
}

void sub_10039C7CC(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  int v12;
  uint64_t v13;
  uint64_t v14;
  void *__p[2];
  char v16;
  void *v17[2];
  char v18;

  if (a3)
  {
    v10 = a4;
    if (a4)
    {
      if (a4 >= 0x101)
      {
        sub_10036CAF0("Received error packet of size %zu, truncating to %d", a2, a3, a4, a5, a6, a7, a8, a4);
        v10 = 256;
      }
      if ((_DWORD)a2 == 4 || (_DWORD)a2 == 2)
      {
        sub_10000BF04(v17, "Error Reporting Packet:\n");
        sub_10000BF04(__p, "\n");
        sub_1003A23CC((uint64_t)v17, a3, v10, 4u, (uint64_t)__p);
      }
      else
      {
        sub_10000BF04(v17, "Error Reporting Packet Header:\n");
        sub_10000BF04(__p, "\n");
        if (v10 > 0x13)
          sub_1003A23CC((uint64_t)v17, a3, 0x14uLL, 4u, (uint64_t)__p);
        else
          sub_1003A23CC((uint64_t)v17, a3, v10, 4u, (uint64_t)__p);
      }
      if (v16 < 0)
        operator delete(__p[0]);
      if (v18 < 0)
        operator delete(v17[0]);
    }
  }
  switch((int)a2)
  {
    case 0:
      sub_10036CAF0("errorReportReceived: FWPktSeqMismatch", a2, a3, a4, a5, a6, a7, a8, v14);
      v12 = 8;
      goto LABEL_30;
    case 1:
      sub_10036CAF0("errorReportReceived: FWPktDroppedMagicMismatch", a2, a3, a4, a5, a6, a7, a8, v14);
      v12 = 9;
      goto LABEL_30;
    case 2:
      sub_10036CAF0("errorReportReceived: FWPktDroppedTooLarge", a2, a3, a4, a5, a6, a7, a8, v14);
      v12 = 10;
      goto LABEL_30;
    case 3:
      sub_10036CAF0("errorReportReceived: FWPktDroppedFWFailure", a2, a3, a4, a5, a6, a7, a8, v14);
      v12 = 11;
      goto LABEL_30;
    case 4:
      sub_10036CAF0("errorReportReceived: FWPktDroppedCRCMismatch", a2, a3, a4, a5, a6, a7, a8, v14);
      v12 = 12;
      goto LABEL_30;
    case 5:
      sub_10036CAF0("errorReportReceived: FWPktDroppedRespSeqMismatch", a2, a3, a4, a5, a6, a7, a8, v14);
      v12 = 13;
      goto LABEL_30;
    case 6:
      sub_10036CAF0("errorReportReceived: FWPktDroppedUnhandledType", a2, a3, a4, a5, a6, a7, a8, v14);
      v12 = 14;
      goto LABEL_30;
    case 7:
      sub_10036CAF0("errorReportReceived: FWPktDroppedUnhandledInterface", a2, a3, a4, a5, a6, a7, a8, v14);
      v12 = 15;
      goto LABEL_30;
    case 8:
      sub_10036CAF0("errorReportReceived: FWPktDroppedUnknownError", a2, a3, a4, a5, a6, a7, a8, v14);
      v12 = 16;
      goto LABEL_30;
    case 9:
      sub_10036CAF0("errorReportReceived: DriverCrashlogPktError", a2, a3, a4, a5, a6, a7, a8, v14);
      v12 = 17;
      goto LABEL_30;
    case 10:
      sub_10036CAF0("errorReportReceived: RKOSPktError", a2, a3, a4, a5, a6, a7, a8, v14);
      v12 = 18;
      goto LABEL_30;
    case 11:
      sub_10036CAF0("errorReportReceived: InvalidEventParameter", a2, a3, a4, a5, a6, a7, a8, v14);
      v12 = 19;
      goto LABEL_30;
    case 12:
      sub_10036CAF0("errorReportReceived: UnknownError", a2, a3, a4, a5, a6, a7, a8, v14);
      v12 = 20;
LABEL_30:
      LODWORD(v17[0]) = v12;
      v13 = *(_QWORD *)(a1 + 80);
      if (!v13)
        sub_100027BC4();
      (*(void (**)(uint64_t, void **))(*(_QWORD *)v13 + 48))(v13, v17);
      break;
    default:
      sub_10036CAF0("errorReportReceived: Error Undefined (%d)", a2, a3, a4, a5, a6, a7, a8, a2);
      break;
  }
}

void sub_10039CA60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

void sub_10039CAA4(uint64_t a1)
{
  NSObject *v2;
  _QWORD block[5];

  v2 = *(NSObject **)(a1 + 120);
  if (v2)
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 0x40000000;
    block[2] = sub_10039CB00;
    block[3] = &unk_100818218;
    block[4] = a1;
    dispatch_sync(v2, block);
  }
}

void sub_10039CB00(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _BYTE v5[24];
  _BYTE *v6;

  v1 = *(_QWORD *)(a1 + 32);
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 8));
  if (*(_BYTE *)v1)
  {
    if (*(_BYTE *)(v1 + 1))
      dispatch_resume(*(dispatch_object_t *)(v1 + 16));
    dispatch_source_cancel(*(dispatch_source_t *)(v1 + 16));
    dispatch_release(*(dispatch_object_t *)(v1 + 16));
    v2 = *(_QWORD *)(v1 + 48);
    v6 = 0;
    sub_10036E160(v2, (uint64_t)v5);
    v3 = v6;
    if (v6 == v5)
    {
      v4 = 4;
      v3 = v5;
    }
    else
    {
      if (!v6)
      {
LABEL_9:
        *(_BYTE *)v1 = 0;
        *(_QWORD *)(v1 + 16) = 0;
        *(_QWORD *)(v1 + 120) = 0;
        goto LABEL_10;
      }
      v4 = 5;
    }
    (*(void (**)(void))(*v3 + 8 * v4))();
    goto LABEL_9;
  }
LABEL_10:
  os_unfair_lock_unlock((os_unfair_lock_t)(v1 + 8));
}

void sub_10039CBE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_10039CC18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  NSObject *v9;
  dispatch_time_t v10;
  uint64_t v11;

  sub_1000051BC("RoseDebugManager: Resuming the crashlog timer", a2, a3, a4, a5, a6, a7, a8, v11);
  v9 = *(NSObject **)(a1 + 16);
  v10 = dispatch_time(0, 5000000000);
  dispatch_source_set_timer(v9, v10, 0xFFFFFFFFFFFFFFFFLL, 0xBEBC200uLL);
  dispatch_resume(*(dispatch_object_t *)(a1 + 16));
  *(_BYTE *)(a1 + 1) = 0;
}

void sub_10039CC7C(uint64_t a1, uint64_t a2, unint64_t a3, char **a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  _OWORD *v19;
  unsigned int v20;
  unint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;

  v8 = a3 - 32;
  if (a3 - 32 < 0x31)
    return;
  v11 = a2;
  v12 = 32;
  while (1)
  {
    v13 = v11 + v12;
    v14 = *(unsigned int *)(v11 + v12 + 12);
    v15 = *(unsigned int *)(v11 + v12);
    if (v14 <= 0xF)
    {
      sub_10036CAF0("crashlog section is too small. Section signature: 0x%x version: 0x%x size: %d", a2, a3, (uint64_t)a4, a5, a6, a7, a8, v15);
      return;
    }
    if ((_DWORD)v15 == 1130587248)
      break;
LABEL_7:
    v12 += v14;
    if (v12 + 16 >= v8)
      return;
  }
  if (*(_DWORD *)(v13 + 8) != 512)
  {
    sub_10036CAF0("CoredumpRegions version mismatch. Expected: 0x%x Version in Crashlog: 0x%x", a2, a3, (uint64_t)a4, a5, a6, a7, a8, 512);
    LODWORD(v14) = *(_DWORD *)(v13 + 12);
    goto LABEL_7;
  }
  if (v12 + v14 <= a3)
  {
    if (v14 >= 0x24)
    {
      v16 = (unint64_t *)(a4 + 2);
      v17 = 16;
      v18 = 36;
      while (1)
      {
        v19 = (_OWORD *)(v13 + v17);
        v33 = *(_OWORD *)(v13 + v17);
        v20 = *(_DWORD *)(v13 + v17 + 16);
        if (v20 > 0x200000)
        {
          sub_10036CAF0("Coredump region size is too large: %d", a2, a3, (uint64_t)a4, a5, a6, a7, a8, *(unsigned int *)(v13 + v17 + 16));
          goto LABEL_37;
        }
        v17 = v18;
        v21 = (unint64_t)a4[1];
        v22 = v21 - (_QWORD)*a4;
        if (v22 == 1280)
          break;
        if (v21 >= *v16)
        {
          v24 = v22 / 20;
          v25 = v22 / 20 + 1;
          if (v25 > 0xCCCCCCCCCCCCCCCLL)
            sub_100026E7C();
          if (0x999999999999999ALL * ((uint64_t)(*v16 - (_QWORD)*a4) >> 2) > v25)
            v25 = 0x999999999999999ALL * ((uint64_t)(*v16 - (_QWORD)*a4) >> 2);
          if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*v16 - (_QWORD)*a4) >> 2) >= 0x666666666666666)
            a2 = 0xCCCCCCCCCCCCCCCLL;
          else
            a2 = v25;
          if (a2)
            v26 = (char *)sub_1003A0EB4((uint64_t)(a4 + 2), a2);
          else
            v26 = 0;
          v27 = &v26[20 * v24];
          *(_OWORD *)v27 = v33;
          *((_DWORD *)v27 + 4) = v20;
          v29 = *a4;
          v28 = a4[1];
          v30 = v27;
          if (v28 != *a4)
          {
            do
            {
              v31 = *(_OWORD *)(v28 - 20);
              *((_DWORD *)v30 - 1) = *((_DWORD *)v28 - 1);
              *(_OWORD *)(v30 - 20) = v31;
              v30 -= 20;
              v28 -= 20;
            }
            while (v28 != v29);
            v28 = *a4;
          }
          v23 = v27 + 20;
          *a4 = v30;
          a4[1] = v27 + 20;
          a4[2] = &v26[20 * a2];
          if (v28)
            operator delete(v28);
        }
        else
        {
          *(_OWORD *)v21 = *v19;
          *(_DWORD *)(v21 + 16) = v20;
          v23 = (char *)(v21 + 20);
        }
        a4[1] = v23;
        v18 = v17 + 20;
        if (v17 + 20 > (unint64_t)*(unsigned int *)(v13 + 12))
          return;
      }
      sub_10036CAF0("There are more coredump regions than expected in the crashlog", a2, a3, (uint64_t)a4, a5, a6, a7, a8, v32);
LABEL_37:
      a4[1] = *a4;
    }
  }
  else
  {
    sub_10036CAF0("Parsing error while extracting the coredump regions. crashlog size: %zu offset and section size: %lu", a2, a3, (uint64_t)a4, a5, a6, a7, a8, a3);
  }
}

void sub_10039CEE8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, std::string *__str, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int v9;
  std::string::value_type v11;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  std::string::value_type v19;
  std::string::value_type v20;
  unsigned int v21;
  std::string::size_type size;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  std::string *v31;
  std::string __dst;
  int v33;
  BOOL v34;
  std::string::value_type v35;

  if (a3 <= 0x1F)
  {
    sub_10036CAF0("crashLogSize is too small", a2, a3, a4, (uint64_t)__str, a6, a7, a8, a9);
    return;
  }
  v9 = a6;
  v11 = a4;
  v14 = *(unsigned __int8 *)(a2 + 12);
  if (a3 - 32 < 0x31)
  {
LABEL_10:
    v19 = 0;
    v20 = 0;
  }
  else
  {
    v15 = 32;
    while (1)
    {
      v16 = a2 + v15;
      v17 = *(unsigned int *)(a2 + v15 + 12);
      v18 = *(unsigned int *)(a2 + v15);
      if (v17 <= 0xF)
      {
        sub_10036CAF0("crashlog section is too small. Section signature: 0x%x version: 0x%x size: %d", a2, a3, a4, (uint64_t)__str, a6, a7, a8, v18);
        goto LABEL_10;
      }
      if ((_DWORD)v18 == 1131639922)
        break;
      v15 += v17;
      if (v15 + 16 >= a3 - 32)
        goto LABEL_10;
    }
    if (*(_DWORD *)(v16 + 8) == 257)
    {
      if (v15 + v17 <= a3)
      {
        sub_10027C21C(&__dst, (void *)(v16 + 20), (int)v17 - 20);
        if (SHIBYTE(__str->__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str->__r_.__value_.__l.__data_);
        *__str = __dst;
        if ((__str->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v31 = __str;
        else
          v31 = (std::string *)__str->__r_.__value_.__r.__words[0];
        sub_1000051BC("CrashString is: %s", v24, v25, v26, v27, v28, v29, v30, (uint64_t)v31);
      }
      else
      {
        sub_10036CAF0("Parsing error while extracting the crash string reason. crashlog size: %zu offset and section size: %lu", a2, a3, a4, (uint64_t)__str, a6, a7, a8, a3);
      }
      v19 = 1;
    }
    else
    {
      sub_10036CAF0("Crash string section version mismatch. Expected: 0x%x Version in Crashlog: 0x%x", a2, a3, a4, (uint64_t)__str, a6, a7, a8, 257);
      v19 = 0;
    }
    v20 = 1;
  }
  v21 = v14 - 1;
  size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) != 0)
    size = __str->__r_.__value_.__l.__size_;
  if (size)
  {
    v23 = *(_QWORD *)(a1 + 112);
    if (v23 && v9)
    {
      memset(&__dst, 0, sizeof(__dst));
      std::string::operator=(&__dst, __str);
      v33 = *(_DWORD *)(a2 + 12);
      v34 = v21 < 0x3F;
      v35 = v11;
      sub_10039D138(a1 + 88, 0, (uint64_t)&__dst);
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__dst.__r_.__value_.__l.__data_);
      return;
    }
  }
  else
  {
    v23 = *(_QWORD *)(a1 + 112);
  }
  if (v23 && v9)
  {
    __dst.__r_.__value_.__s.__data_[0] = v20;
    __dst.__r_.__value_.__s.__data_[1] = v19;
    HIDWORD(__dst.__r_.__value_.__r.__words[0]) = *(_DWORD *)(a2 + 12);
    __dst.__r_.__value_.__s.__data_[8] = v21 < 0x3F;
    __dst.__r_.__value_.__s.__data_[9] = v11;
    sub_10039D138(a1 + 88, 1, (uint64_t)&__dst);
  }
}

void sub_10039D11C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10039D138(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  int v6;

  v6 = a2;
  v5 = a3;
  v3 = *(_QWORD *)(a1 + 24);
  if (!v3)
    sub_100027BC4();
  return (*(uint64_t (**)(uint64_t, int *, uint64_t *))(*(_QWORD *)v3 + 48))(v3, &v6, &v5);
}

uint64_t sub_10039D178(uint64_t a1, const void **a2, uint64_t a3, _QWORD *a4, unsigned __int8 *a5, _BYTE *a6, _BYTE *a7)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  unsigned __int8 v16;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  size_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  size_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  std::string *v65;
  std::string *v66;
  size_t size;
  std::string *v68;
  std::string *v69;
  std::string *v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  _BOOL4 v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  std::string *v87;
  __int128 v88;
  unsigned int v89;
  std::string *v90;
  std::string::size_type v91;
  std::string *v92;
  __int128 v93;
  std::string *v94;
  __int128 v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  std::string *p_str;
  char *v104;
  uint64_t v105;
  std::string *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  int v114;
  std::string::size_type v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  std::string *v123;
  std::string *v124;
  std::string *v125;
  uint64_t v126;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char v133;
  std::string::size_type v136;
  std::string::size_type v137;
  std::string::value_type v139;
  unsigned __int8 v140[8];
  uint64_t v141;
  std::string v142;
  std::string v143;
  std::string v144;
  void *__p[2];
  int64_t v146;
  std::string __str;
  void *v148[3];
  _QWORD v149[2];
  _BYTE v150[2];
  std::string v151;
  size_t v152;
  int v153[2];
  std::string v154;
  uint64_t v155;
  uint64_t v156;
  _DWORD v157[2];

  v152 = 0;
  *(_QWORD *)v153 = 0;
  sub_10000BF04(&v151, "");
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v133 = 0;
  v17 = 1;
  do
  {
    v157[v15] = 1;
    v150[v15] = 0;
    v18 = v17;
    v139 = v14 & 1;
    v19 = a3;
    v20 = a3 + 30 * v15;
    v21 = 1;
    while (sub_10039DB58(a1, v16, &v152, a6, v10, v11, v12, v13))
    {
      memset(v149, 0, 15);
      v25 = v152;
      v154.__r_.__value_.__s.__data_[0] = 0;
      sub_100191910(v148, v152, &v154);
      v28 = sub_10036DEB4(*(_QWORD *)(a1 + 48), v16, (uint64_t)v149, (uint64_t)v148[0], (char *)v148[2] - (char *)v148[0], (uint64_t)v153, v26, v27);
      if (*(_QWORD *)v153 == v25)
        v36 = v28;
      else
        v36 = 0;
      if ((v36 & 1) != 0)
      {
        if (BYTE4(v149[1]))
        {
          std::string::assign(&v151, "Corrupted");
          v154.__r_.__value_.__s.__data_[0] = v139;
          if (*(_QWORD *)(a1 + 112))
            sub_10039D138(a1 + 88, 2, (uint64_t)&v154);
LABEL_18:
          if ((v18 & 1) != 0)
            goto LABEL_19;
LABEL_35:
          if ((v151.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(v151.__r_.__value_.__r.__words[2]);
          else
            size = v151.__r_.__value_.__l.__size_;
          sub_10013FDB8((uint64_t)&v154, size + 4);
          if ((v154.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v68 = &v154;
          else
            v68 = (std::string *)v154.__r_.__value_.__r.__words[0];
          if (size)
          {
            if ((v151.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v69 = &v151;
            else
              v69 = (std::string *)v151.__r_.__value_.__r.__words[0];
            memmove(v68, v69, size);
          }
          strcpy((char *)v68 + size, "-DSP");
        }
        else
        {
          if (*((_DWORD *)v148[0] + 3) > 0x3Fu)
          {
            std::string::assign(&v151, "NonFatal");
            goto LABEL_18;
          }
          std::string::assign(&v151, "Fatal");
          if (v19)
          {
            *(std::string::size_type *)((char *)v154.__r_.__value_.__r.__words + 7) = 0;
            v154.__r_.__value_.__r.__words[0] = 0;
            if (sub_10036DF54(*(_QWORD *)(a1 + 48), v16, (uint64_t)&v154, v40, v41, v42, v43, v44))
            {
              if (*(_QWORD *)(v20 + 15) == v154.__r_.__value_.__r.__words[0])
              {
                sub_1000051BC("Crashlog's log_id matches the coredump's log_id. Extracting the coredump regions.", v45, v46, v47, v48, v49, v50, v51, v129);
                sub_10039CC7C(v52, (uint64_t)v148[0], *(unint64_t *)v153, (char **)(*a4 + 24 * v15), v53, v54, v55, v56);
              }
              else
              {
                sub_10036CAF0("The coredump log_id does not match with the crashlog log_id", v45, v46, v47, v48, v49, v50, v51, v129);
              }
            }
            else
            {
              sub_10036CAF0("No coredump to be dequeued for core: %d", v45, v46, v47, v48, v49, v50, v51, v15);
            }
          }
          else
          {
            sub_10036CAF0("No crashlog descriptor available.", v38, v39, v40, v41, v42, v43, v44, v129);
          }
          v133 = 1;
          if ((v18 & 1) == 0)
            goto LABEL_35;
LABEL_19:
          if ((v151.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v57 = HIBYTE(v151.__r_.__value_.__r.__words[2]);
          else
            v57 = v151.__r_.__value_.__l.__size_;
          sub_10013FDB8((uint64_t)&v154, v57 + 3);
          if ((v154.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v65 = &v154;
          else
            v65 = (std::string *)v154.__r_.__value_.__r.__words[0];
          if (v57)
          {
            if ((v151.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v66 = &v151;
            else
              v66 = (std::string *)v151.__r_.__value_.__r.__words[0];
            memmove(v65, v66, v57);
          }
          *(_DWORD *)((char *)&v65->__r_.__value_.__l.__data_ + v57) = 5259565;
        }
        if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v151.__r_.__value_.__l.__data_);
        v151 = v154;
        v70 = &v151;
        if ((v154.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v70 = (std::string *)v154.__r_.__value_.__r.__words[0];
        sub_1000051BC("Received %s crash log", v58, v59, v60, v61, v62, v63, v64, (uint64_t)v70);
        memset(&__str, 0, sizeof(__str));
        v73 = *(char *)(a1 + 47);
        if (v73 < 0)
        {
          if (*(_QWORD *)(a1 + 32) != 12)
            goto LABEL_62;
          v74 = *(_QWORD *)(a1 + 24);
        }
        else
        {
          v74 = a1 + 24;
          if (v73 != 12)
          {
LABEL_62:
            v78 = 0;
            goto LABEL_63;
          }
        }
        v75 = *(_QWORD *)v74;
        v76 = *(_DWORD *)(v74 + 8);
        v78 = v75 == 0x72656E6547205746 && v76 == 1684370529;
LABEL_63:
        if (BYTE4(v149[1]))
          v79 = 0;
        else
          v79 = v78;
        sub_10039CEE8(a1, (uint64_t)v148[0], *(unint64_t *)v153, v16, &__str, v79, v71, v72, v130);
        if (*(_BYTE *)(a1 + 128))
        {
          std::operator+<char>(&v143, "RoseCrashLog", &v151);
          v87 = std::string::append(&v143, "-");
          v88 = *(_OWORD *)&v87->__r_.__value_.__l.__data_;
          v144.__r_.__value_.__r.__words[2] = v87->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v144.__r_.__value_.__l.__data_ = v88;
          v87->__r_.__value_.__l.__size_ = 0;
          v87->__r_.__value_.__r.__words[2] = 0;
          v87->__r_.__value_.__r.__words[0] = 0;
          v89 = v21 + 1;
          v157[v15] = v21 + 1;
          std::to_string(&v142, v21);
          if ((v142.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v90 = &v142;
          else
            v90 = (std::string *)v142.__r_.__value_.__r.__words[0];
          if ((v142.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v91 = HIBYTE(v142.__r_.__value_.__r.__words[2]);
          else
            v91 = v142.__r_.__value_.__l.__size_;
          v92 = std::string::append(&v144, (const std::string::value_type *)v90, v91);
          v93 = *(_OWORD *)&v92->__r_.__value_.__l.__data_;
          v154.__r_.__value_.__r.__words[2] = v92->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v154.__r_.__value_.__l.__data_ = v93;
          v92->__r_.__value_.__l.__size_ = 0;
          v92->__r_.__value_.__r.__words[2] = 0;
          v92->__r_.__value_.__r.__words[0] = 0;
          v94 = std::string::append(&v154, ".bin");
          v95 = *(_OWORD *)&v94->__r_.__value_.__l.__data_;
          v146 = v94->__r_.__value_.__r.__words[2];
          *(_OWORD *)__p = v95;
          v94->__r_.__value_.__l.__size_ = 0;
          v94->__r_.__value_.__r.__words[2] = 0;
          v94->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v154.__r_.__value_.__l.__data_);
          if (SHIBYTE(v142.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v142.__r_.__value_.__l.__data_);
          if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v144.__r_.__value_.__l.__data_);
          if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v143.__r_.__value_.__l.__data_);
          sub_10013F9B8(a2, (const void **)__p, (uint64_t)&v144);
          sub_10039DBE8((void (__cdecl ***)(std::ofstream *__hidden))&v154, (uint64_t *)&v144, 4);
          if (v155)
          {
            p_str = &__str;
            if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
            v143.__r_.__value_.__r.__words[0] = (std::string::size_type)p_str;
            v140[0] = 0;
            v141 = 0;
            sub_1003A1010((uint64_t)v140, &v143.__r_.__value_.__l.__data_);
            sub_1003A08FC(v140);
            if (v146 >= 0)
              v104 = (char *)__p;
            else
              v104 = (char *)__p[0];
            v105 = sub_10039DCFC(a5, v104);
            sub_10039DEB4(v105, (uint64_t)v140);
            sub_1003A0870(v140);
            if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v106 = &v144;
            else
              v106 = (std::string *)v144.__r_.__value_.__r.__words[0];
            if (chmod((const char *)v106, 0x1B0u))
            {
              v114 = SHIBYTE(v144.__r_.__value_.__r.__words[2]);
              v115 = v144.__r_.__value_.__r.__words[0];
              __error();
              v123 = &v144;
              if (v114 < 0)
                v123 = (std::string *)v115;
              sub_10036CAF0("Unable to chmod file '%s': %d", v116, v117, v118, v119, v120, v121, v122, (uint64_t)v123);
              *a7 = 1;
            }
            v124 = &v151;
            if ((v151.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v124 = (std::string *)v151.__r_.__value_.__r.__words[0];
            sub_1000051BC("Writing %s crash log to %s", v107, v108, v109, v110, v111, v112, v113, (uint64_t)v124);
            std::ostream::write(&v154, v148[0], *(_QWORD *)v153);
          }
          else
          {
            v125 = &v144;
            if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v125 = (std::string *)v144.__r_.__value_.__r.__words[0];
            sub_10036CAF0("Error trying to open file: %s", v96, v97, v98, v99, v100, v101, v102, (uint64_t)v125);
            *a7 = 1;
          }
          v154.__r_.__value_.__r.__words[0] = v137;
          *(std::string::size_type *)((char *)v154.__r_.__value_.__r.__words + *(_QWORD *)(v137 - 24)) = v136;
          std::filebuf::~filebuf(&v154.__r_.__value_.__r.__words[1]);
          std::ios::~ios(&v156);
          if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v144.__r_.__value_.__l.__data_);
          if (SHIBYTE(v146) < 0)
            operator delete(__p[0]);
          v21 = v89;
          if (v19)
          {
LABEL_107:
            if (v149[0] == *(_QWORD *)v20)
            {
              v150[v15] = 1;
              if (LODWORD(v149[1]) != *(_DWORD *)(v20 + 8))
              {
                sub_10036CAF0("Size of the dequeued crash log does not match the size in descriptor", v22, v23, v24, v10, v11, v12, v13, v129);
                *a6 = 1;
              }
              if (BYTE5(v149[1]) != *(unsigned __int8 *)(v20 + 13))
              {
                sub_10036CAF0("core type of the dequeued crash log does not match the core type in descriptor", v22, v23, v24, v10, v11, v12, v13, v129);
                *a6 = 1;
              }
              if (BYTE6(v149[1]) != *(unsigned __int8 *)(v20 + 14))
              {
                sub_10036CAF0("log type of the dequeued crash log does not match the log type in descriptor", v22, v23, v24, v10, v11, v12, v13, v129);
                *a6 = 1;
              }
              if (BYTE4(v149[1]) != *(unsigned __int8 *)(v20 + 12))
              {
                sub_10036CAF0("is_corrupted flag of the dequeued crash log does not match the flag in descriptor", v22, v23, v24, v10, v11, v12, v13, v129);
                *a6 = 1;
              }
              v37 = 6;
              goto LABEL_118;
            }
          }
        }
        else
        {
          sub_1000051BC("Crash log saving is disabled", v80, v81, v82, v83, v84, v85, v86, v131);
          if (v19)
            goto LABEL_107;
        }
        v37 = 0;
LABEL_118:
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        goto LABEL_120;
      }
      sub_10036CAF0("DequeueCrashLog for core: %d failed. Buffer Size: %zu, received Size: %zu", v29, v30, v31, v32, v33, v34, v35, v15);
      *a6 = 1;
      v37 = 6;
LABEL_120:
      if (v148[0])
      {
        v148[1] = v148[0];
        operator delete(v148[0]);
      }
      if (v37)
        break;
    }
    v17 = 0;
    ++v16;
    v14 = 1;
    v15 = 1;
    a3 = v19;
  }
  while ((v18 & 1) != 0);
  if (v19)
  {
    if (*(_DWORD *)(v19 + 8) && !v150[0])
    {
      sub_10036CAF0("No AP crashlog available with ID that matches the descriptor", v22, v23, v24, v10, v11, v12, v13, v129);
      *a6 = 1;
    }
    if (*(_DWORD *)(v19 + 38) && !v150[1])
    {
      sub_10036CAF0("No DSP crashlog available with ID that matches the descriptor", v22, v23, v24, v10, v11, v12, v13, v129);
      *a6 = 1;
    }
  }
  if ((v133 & 1) != 0)
    v126 = 2;
  else
    v126 = v157[0] > 1u || v157[1] > 1u;
  if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v151.__r_.__value_.__l.__data_);
  return v126;
}

void sub_10039DA34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *__p,uint64_t a52,int a53,__int16 a54,char a55,char a56)
{
  if (a56 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_10039DB58(uint64_t a1, uint64_t a2, unint64_t *a3, _BYTE *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t result;
  unint64_t v20;

  v20 = 0;
  v10 = sub_10036DEB4(*(_QWORD *)(a1 + 48), a2, 0, 0, 0, (uint64_t)&v20, a7, a8);
  if (v10)
    v18 = v20 == 0;
  else
    v18 = 1;
  if (v18)
  {
    if ((v10 & 1) != 0)
      return 0;
    goto LABEL_10;
  }
  if (v20 > 0x200000)
  {
    sub_10036CAF0("Unexpectedly large crashlog of size:%zu is available", v11, v12, v13, v14, v15, v16, v17, v20);
LABEL_10:
    result = 0;
    *a4 = 1;
    return result;
  }
  *a3 = v20;
  return 1;
}

void (__cdecl ***sub_10039DBE8(void (__cdecl ***a1)(std::ofstream *__hidden this), uint64_t *a2, int a3))(std::ofstream *__hidden this)
{
  _QWORD *v6;
  void (__cdecl **v7)(std::ofstream *__hidden);
  void (__cdecl **v8)(std::ofstream *__hidden);
  std::ios_base *v9;
  uint64_t *v10;

  v6 = a1 + 1;
  *a1 = v7;
  *(_QWORD *)((char *)*(v7 - 3) + (_QWORD)a1) = v8;
  v9 = (std::ios_base *)((char *)*(*a1 - 3) + (_QWORD)a1);
  std::ios_base::init(v9, a1 + 1);
  v9[1].__vftable = 0;
  v9[1].__fmtflags_ = -1;
  std::filebuf::basic_filebuf(v6);
  if (*((char *)a2 + 23) >= 0)
    v10 = a2;
  else
    v10 = (uint64_t *)*a2;
  if (!std::filebuf::open(v6, v10, a3 | 0x10u))
    std::ios_base::clear((std::ios_base *)((char *)*(*a1 - 3) + (_QWORD)a1), *(_DWORD *)((char *)*(*a1 - 3) + (_QWORD)a1 + 32) | 4);
  return a1;
}

void sub_10039DCC4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  std::ostream::~ostream(v1, v2 + 8);
  std::ios::~ios(v1 + 416);
  _Unwind_Resume(a1);
}

uint64_t sub_10039DCFC(unsigned __int8 *a1, char *__s)
{
  int v4;
  _QWORD *v5;
  uint64_t **v6;
  void *v7;
  std::logic_error *exception;
  std::string *v10;
  __int128 v11;
  std::string v12;
  std::string __p;

  v4 = *a1;
  if (!*a1)
  {
    *a1 = 1;
    v5 = operator new(0x18uLL);
    v5[2] = 0;
    v5[1] = 0;
    *v5 = v5 + 1;
    *((_QWORD *)a1 + 1) = v5;
    sub_1003A08FC(a1);
    v4 = *a1;
  }
  if (v4 != 1)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1003A0EF8((char *)a1, &v12);
    v10 = std::string::insert(&v12, 0, "cannot use operator[] with ");
    v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    std::logic_error::logic_error(exception, &__p);
  }
  v6 = (uint64_t **)*((_QWORD *)a1 + 1);
  sub_10000BF04(&__p, __s);
  v12.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  v7 = sub_1003A0F28(v6, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&unk_100472CF8, &v12);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return (uint64_t)v7 + 56;
}

void sub_10039DE3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

uint64_t sub_10039DEB4(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v4;
  uint64_t v5;

  sub_1003A08FC((unsigned __int8 *)a2);
  v4 = *(_BYTE *)a1;
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)a2 = v4;
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = v5;
  sub_1003A08FC((unsigned __int8 *)a1);
  return a1;
}

void sub_10039DF0C(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int v22;
  char *v23;
  uint64_t v24;
  _DWORD *v25;
  void *__p;
  _BYTE *v27;
  _OWORD v28[4];
  int v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  int v33;
  int v34;
  int v35;

  v5 = -51 * ((uint64_t)(a2[1] - *a2) >> 2);
  v32 = xmmword_10047DF40;
  v6 = v5;
  v7 = v5;
  v8 = (unint64_t)v5 << 6;
  v9 = 56 * v5;
  v33 = v5 + 1;
  v34 = v9 + 84;
  v35 = 0;
  v31 = 0x5400000004;
  v30 = 0x1100000001;
  memset(v28, 0, sizeof(v28));
  v29 = 0;
  sub_1003A10F0(&__p, v5);
  v17 = __p;
  if (v27 - (_BYTE *)__p >= 1)
  {
    v18 = (v27 - (_BYTE *)__p) / 0x38uLL + 1;
    do
    {
      v17[6] = 0;
      *((_OWORD *)v17 + 1) = 0uLL;
      *((_OWORD *)v17 + 2) = 0uLL;
      *(_OWORD *)v17 = 0uLL;
      v17 += 7;
      --v18;
    }
    while (v18 > 1);
  }
  sub_1000051BC("Number of coredump sections available for AP is: %d", v10, v11, v12, v13, v14, v15, v16, v6);
  if ((_DWORD)v6)
  {
    v19 = 0;
    v20 = 0;
    v21 = (char *)__p;
    v22 = 136;
    do
    {
      v23 = &v21[v20];
      *(_QWORD *)v23 = 0x3800000001;
      v23[8] = 95;
      *((_BYTE *)__p + v20 + 9) = 95;
      *((_BYTE *)__p + v20 + 10) = 84;
      *((_BYTE *)__p + v20 + 11) = 69;
      *((_BYTE *)__p + v20 + 12) = 88;
      *((_BYTE *)__p + v20 + 13) = 84;
      v24 = *a2 + v19;
      v21 = (char *)__p;
      v25 = (char *)__p + v20;
      v25[6] = *(_QWORD *)v24;
      LODWORD(v24) = *(_DWORD *)(v24 + 16);
      v25[7] = v24;
      v25[8] = v22;
      v25[9] = v24;
      v22 += v24;
      v20 += 56;
      v19 += 20;
    }
    while (v8 - 8 * v7 != v20);
  }
  std::ostream::write(a3, &v32, 28);
  std::ostream::write(a3, &v31, 8);
  std::ostream::write(a3, &v30, 8);
  std::ostream::write(a3, v28, 68);
  std::ostream::write(a3, __p, v9);
  if (__p)
  {
    v27 = __p;
    operator delete(__p);
  }
}

void sub_10039E124(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10039E144(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  unsigned int v19;
  char *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  void *__p;
  _BYTE *v25;
  _OWORD v26[17];
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  int v30;
  uint64_t v31;
  int v32;

  v5 = (uint64_t)(a2[1] - *a2) >> 2;
  v32 = 0;
  v29 = xmmword_10047DF50;
  v6 = (-51 * v5);
  v30 = v6 + 1;
  v31 = (72 * v6 + 288);
  v28 = 0x12000000004;
  v27 = 0x4400000001;
  memset(v26, 0, sizeof(v26));
  sub_1003A1190(&__p, v6);
  v14 = __p;
  if (v25 - (_BYTE *)__p >= 1)
  {
    v15 = (v25 - (_BYTE *)__p) / 0x48uLL + 1;
    do
    {
      v14[8] = 0;
      *((_OWORD *)v14 + 2) = 0uLL;
      *((_OWORD *)v14 + 3) = 0uLL;
      *(_OWORD *)v14 = 0uLL;
      *((_OWORD *)v14 + 1) = 0uLL;
      v14 += 9;
      --v15;
    }
    while (v15 > 1);
  }
  sub_1000051BC("Number of coredump sections available for DSP is: %d", v7, v8, v9, v10, v11, v12, v13, v6);
  if ((_DWORD)v6)
  {
    v16 = 0;
    v17 = 0;
    v18 = (char *)__p;
    v19 = 344;
    do
    {
      v20 = &v18[v17];
      *(_QWORD *)v20 = 0x4800000019;
      v20[8] = 95;
      *((_BYTE *)__p + v17 + 9) = 95;
      *((_BYTE *)__p + v17 + 10) = 84;
      *((_BYTE *)__p + v17 + 11) = 69;
      *((_BYTE *)__p + v17 + 12) = 88;
      *((_BYTE *)__p + v17 + 13) = 84;
      v21 = *a2 + v16;
      v18 = (char *)__p;
      v22 = (char *)__p + v17;
      v22[3] = *(_QWORD *)v21;
      v23 = *(unsigned int *)(v21 + 16);
      v22[4] = v23;
      v22[5] = v19;
      v22[6] = v23;
      v19 += v23;
      v17 += 72;
      v16 += 20;
    }
    while (72 * v6 != v17);
  }
  std::ostream::write(a3, &v29, 32);
  std::ostream::write(a3, &v28, 8);
  std::ostream::write(a3, &v27, 8);
  std::ostream::write(a3, v26, 272);
  std::ostream::write(a3, __p, 72 * v6);
  if (__p)
  {
    v25 = __p;
    operator delete(__p);
  }
}

void sub_10039E388(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10039E3A8(uint64_t a1, const void **a2, _QWORD *a3, unsigned __int8 *a4, _BYTE *a5, _BYTE *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  std::string::size_type v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  const std::string::value_type *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  size_t size;
  std::string *v37;
  std::string *v38;
  size_t v39;
  std::string *v40;
  std::string *v41;
  std::string *v42;
  std::string *v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void **v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  void **v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void **v70;
  void **v71;
  uint64_t v72;
  _QWORD *v73;
  _BYTE *v74;
  _QWORD *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int v80;
  int v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  int v90;
  char v91;
  char *v92;
  uint64_t v94;
  char v95;
  std::string::size_type v99;
  unint64_t v101;
  unsigned __int8 v102[8];
  uint64_t v103;
  void *__p[2];
  char v105;
  void *v106[2];
  int64_t v107;
  _QWORD v108[2];
  std::string v109;
  void *v110[2];
  uint64_t v111;
  std::string v112;
  uint64_t v113;
  uint64_t v114;

  if (!*(_BYTE *)(a1 + 128))
  {
    sub_1000051BC("Core dump saving is disabled", (uint64_t)a2, (uint64_t)a3, (uint64_t)a4, (uint64_t)a5, (uint64_t)a6, a7, a8, v94);
    v91 = 1;
    return v91 & 1;
  }
  v112.__r_.__value_.__s.__data_[0] = 0;
  sub_100191910(v110, 0x1000uLL, &v112);
  sub_10000BF04(&v109, "");
  v15 = 0;
  v16 = 0;
  v18 = 1;
  v95 = 1;
  while (1)
  {
    v19 = v18;
    *(_QWORD *)((char *)v108 + 7) = 0;
    v108[0] = 0;
    if (!sub_10036DF54(*(_QWORD *)(a1 + 48), v16, (uint64_t)v108, v10, v11, v12, v13, v14))
    {
      v92 = "Unable to get the coredump info for core: %d";
      v27 = v15;
LABEL_88:
      sub_10036CAF0(v92, v20, v21, v22, v23, v24, v25, v26, v27);
      goto LABEL_89;
    }
    v27 = LODWORD(v108[1]);
    if (LODWORD(v108[1]))
      break;
    sub_1000051BC("No coredumps to read for core: %d", v20, v21, v22, v23, v24, v25, v26, v15);
LABEL_81:
    v18 = 0;
    ++v16;
    v15 = 1;
    if ((v19 & 1) == 0)
      goto LABEL_90;
  }
  if (LODWORD(v108[1]) > 0x200000)
  {
    v92 = "Coredump size is unexpectedly large: %d";
    goto LABEL_88;
  }
  if (v15 != BYTE5(v108[1]))
  {
    sub_10036CAF0("Descriptor core: %d doesn't match the requested core: %d", v20, v21, v22, v23, v24, v25, v26, BYTE5(v108[1]));
LABEL_89:
    v95 = 0;
    *a5 = 1;
    goto LABEL_90;
  }
  v27 = BYTE6(v108[1]);
  if (BYTE6(v108[1]) != 1)
  {
    v92 = "Invalid log type: %d in the coredump descriptor";
    goto LABEL_88;
  }
  if ((v19 & 1) != 0)
    v28 = "AP";
  else
    v28 = "DSP";
  std::string::assign(&v109, v28);
  if (BYTE4(v108[1]))
  {
    if ((v109.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v109.__r_.__value_.__r.__words[2]);
    else
      size = v109.__r_.__value_.__l.__size_;
    sub_10013FDB8((uint64_t)&v112, size + 10);
    if ((v112.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v37 = &v112;
    else
      v37 = (std::string *)v112.__r_.__value_.__r.__words[0];
    if (size)
    {
      if ((v109.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v38 = &v109;
      else
        v38 = (std::string *)v109.__r_.__value_.__r.__words[0];
      memmove(v37, v38, size);
    }
    strcpy((char *)v37 + size, "-Corrupted");
    if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v109.__r_.__value_.__l.__data_);
    v109 = v112;
  }
  if (*(_QWORD *)(*a3 + 24 * v15) == *(_QWORD *)(*a3 + 24 * v15 + 8))
  {
    sub_10036CAF0("No coredump regions available for core %d. Saving the raw coredump.", v29, v30, v31, v32, v33, v34, v35, v15);
    if ((v109.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v39 = HIBYTE(v109.__r_.__value_.__r.__words[2]);
    else
      v39 = v109.__r_.__value_.__l.__size_;
    sub_10013FDB8((uint64_t)&v112, v39 + 4);
    if ((v112.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v40 = &v112;
    else
      v40 = (std::string *)v112.__r_.__value_.__r.__words[0];
    if (v39)
    {
      if ((v109.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v41 = &v109;
      else
        v41 = (std::string *)v109.__r_.__value_.__r.__words[0];
      memmove(v40, v41, v39);
    }
    strcpy((char *)v40 + v39, "-Raw");
    if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v109.__r_.__value_.__l.__data_);
    v109 = v112;
    *a5 = 1;
  }
  v42 = &v109;
  if ((v109.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v42 = (std::string *)v109.__r_.__value_.__r.__words[0];
  sub_1000051BC("Received %s coredump", v29, v30, v31, v32, v33, v34, v35, (uint64_t)v42);
  std::operator+<char>(&v112, "RoseCoreDump-", &v109);
  v43 = std::string::append(&v112, ".bin");
  v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
  v107 = v43->__r_.__value_.__r.__words[2];
  *(_OWORD *)v106 = v44;
  v43->__r_.__value_.__l.__size_ = 0;
  v43->__r_.__value_.__r.__words[2] = 0;
  v43->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v112.__r_.__value_.__l.__data_);
  sub_10013F9B8(a2, (const void **)v106, (uint64_t)__p);
  sub_10039DBE8((void (__cdecl ***)(std::ofstream *__hidden))&v112, (uint64_t *)__p, 4);
  v52 = v113;
  if (v105 >= 0)
    v53 = __p;
  else
    v53 = (void **)__p[0];
  if (!v113)
  {
    sub_10036CAF0("Error trying to open file: %s", v45, v46, v47, v48, v49, v50, v51, (uint64_t)v53);
    v74 = a6;
    goto LABEL_75;
  }
  if (chmod((const char *)v53, 0x1B0u))
  {
    v61 = v105;
    v62 = (void **)__p[0];
    __error();
    v70 = __p;
    if (v61 < 0)
      v70 = v62;
    sub_10036CAF0("Unable to chmod file '%s': %d", v63, v64, v65, v66, v67, v68, v69, (uint64_t)v70);
    *a6 = 1;
  }
  v71 = v106;
  if (v107 < 0)
    v71 = (void **)v106[0];
  sub_1000051BC("Writing coredump to %s", v54, v55, v56, v57, v58, v59, v60, (uint64_t)v71);
  v73 = (_QWORD *)*a3;
  if ((v19 & 1) != 0)
  {
    if (*v73 != v73[1])
      sub_10039DF0C(v72, v73, (uint64_t)&v112);
  }
  else
  {
    v75 = &v73[3 * v15];
    if (*v75 != v75[1])
      sub_10039E144(v72, v75, (uint64_t)&v112);
  }
  v102[0] = 0;
  v103 = 0;
  sub_1003A1284((uint64_t)v102, "");
  sub_1003A08FC(v102);
  if (v107 >= 0)
    v76 = (char *)v106;
  else
    v76 = (char *)v106[0];
  v77 = sub_10039DCFC(a4, v76);
  sub_10039DEB4(v77, (uint64_t)v102);
  sub_1003A0870(v102);
  if (LODWORD(v108[1]))
  {
    v80 = 0;
    while (1)
    {
      v101 = 0;
      v81 = sub_10036DFD8(*(_QWORD *)(a1 + 48), v16, v80, v111 - (unint64_t)v110[0], (uint64_t)v110[0], (uint64_t)&v101, v78, v79);
      v89 = v101;
      v90 = v101 ? v81 : 0;
      if (v90 != 1)
        break;
      v82 = v110[0];
      if (v101 > v111 - (unint64_t)v110[0])
        break;
      std::ostream::write(&v112, v110[0], v101);
      v80 += v89;
      if (v80 >= LODWORD(v108[1]))
        goto LABEL_76;
    }
    sub_10036CAF0("reading coredump failed. received size is: %zu", (uint64_t)v82, v83, v84, v85, v86, v87, v88, v101);
    v95 = 0;
    v74 = a5;
LABEL_75:
    *v74 = 1;
  }
LABEL_76:
  v112.__r_.__value_.__r.__words[0] = v17;
  *(std::string::size_type *)((char *)v112.__r_.__value_.__r.__words + *(_QWORD *)(v17 - 24)) = v99;
  std::filebuf::~filebuf(&v112.__r_.__value_.__r.__words[1]);
  std::ios::~ios(&v114);
  if (v105 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v107) < 0)
    operator delete(v106[0]);
  if (v52)
    goto LABEL_81;
  v95 = 0;
LABEL_90:
  if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v109.__r_.__value_.__l.__data_);
  v91 = v95;
  if (v110[0])
  {
    v110[1] = v110[0];
    operator delete(v110[0]);
  }
  return v91 & 1;
}

void sub_10039E9B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  if (a42 < 0)
    operator delete(__p);
  if (a44)
    operator delete(a44);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10039EA6C(uint64_t a1, const void **a2, unsigned __int8 *a3, uint64_t a4, _BYTE *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BYTE *v9;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void **v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  void **v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void **v37;
  void **v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  char *v64;
  uint64_t v66;
  uint64_t v67;
  unsigned __int8 v68[8];
  uint64_t v69;
  char v70;
  void *__p[2];
  uint64_t v72;
  void *v73[2];
  char v74;
  void *v75[2];
  char v76;
  unint64_t v77;
  void (__cdecl **v78)(std::ofstream *__hidden);
  _QWORD v79[51];
  uint64_t v80;

  if (*(_BYTE *)(a1 + 129))
  {
    v9 = (_BYTE *)a4;
    v77 = 0;
    sub_10000BF04(v75, "RoseFirmwareLogs.bin");
    sub_10013F9B8(a2, (const void **)v75, (uint64_t)v73);
    sub_10039DBE8(&v78, (uint64_t *)v73, 4);
    v70 = 0;
    sub_100191910(__p, 0x1000uLL, &v70);
    if (v74 >= 0)
      v20 = v73;
    else
      v20 = (void **)v73[0];
    if (v79[15])
    {
      if (chmod((const char *)v20, 0x1B0u))
      {
        v28 = v74;
        v29 = (void **)v73[0];
        __error();
        v37 = v73;
        if (v28 < 0)
          v37 = v29;
        sub_10036CAF0("Unable to chmod file '%s': %d", v30, v31, v32, v33, v34, v35, v36, (uint64_t)v37);
        *a5 = 1;
      }
      v38 = v75;
      if (v76 < 0)
        v38 = (void **)v75[0];
      sub_1000051BC("Writing firmware logs to %s", v21, v22, v23, v24, v25, v26, v27, (uint64_t)v38);
      v68[0] = 0;
      v69 = 0;
      sub_1003A1284((uint64_t)v68, "");
      sub_1003A08FC(v68);
      if (v76 >= 0)
        v39 = (char *)v75;
      else
        v39 = (char *)v75[0];
      v40 = sub_10039DCFC(a3, v39);
      sub_10039DEB4(v40, (uint64_t)v68);
      sub_1003A0870(v68);
      if (sub_10036E040(*(_QWORD *)(a1 + 48), v41, v42, v43, v44, v45, v46, v47))
      {
        while (1)
        {
          v55 = sub_10036E0F0(*(_QWORD *)(a1 + 48), (uint64_t)__p[0], v72 - (unint64_t)__p[0], (uint64_t)&v77, v51, v52, v53, v54);
          v62 = v77 ? v55 : 0;
          if (v62 != 1)
            break;
          if (v77 > v72 - (unint64_t)__p[0])
          {
            sub_10036CAF0("dequeued more data (%zu) than the buffer capacity.", (uint64_t)__p[0], v77, v57, v58, v59, v60, v61, v77);
            std::ostream::write(&v78, __p[0], v72 - (unint64_t)__p[0]);
            goto LABEL_30;
          }
          std::ostream::write(&v78, __p[0], v77);
        }
        if (!v55)
          goto LABEL_30;
        if ((sub_10036E098(*(_QWORD *)(a1 + 48), v56, v77, v57, v58, v59, v60, v61) & 1) != 0)
        {
          v63 = 1;
          goto LABEL_31;
        }
        v64 = "Error while resuming the firmware logs";
      }
      else
      {
        v64 = "Error while pausing the firmware logs";
      }
      sub_10036CAF0(v64, v48, v49, v50, v51, v52, v53, v54, v67);
    }
    else
    {
      sub_10036CAF0("Error trying to open file: %s", v13, v14, v15, v16, v17, v18, v19, (uint64_t)v20);
      v9 = a5;
    }
LABEL_30:
    v63 = 0;
    *v9 = 1;
LABEL_31:
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    std::filebuf::~filebuf(v79);
    std::ios::~ios(&v80);
    if (v74 < 0)
      operator delete(v73[0]);
    if (v76 < 0)
      operator delete(v75[0]);
  }
  else
  {
    sub_1000051BC("Firmware logs are disabled", (uint64_t)a2, (uint64_t)a3, a4, (uint64_t)a5, a6, a7, a8, v66);
    return 1;
  }
  return v63;
}

void sub_10039ED58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31)
{
  sub_1003A0870((unsigned __int8 *)&a12);
  if (__p)
  {
    a16 = (uint64_t)__p;
    operator delete(__p);
  }
  sub_10014B348(&a31);
  if (a23 < 0)
    operator delete(a18);
  if (a29 < 0)
    operator delete(a24);
  _Unwind_Resume(a1);
}

uint64_t sub_10039EDD0(uint64_t a1, uint64_t a2, std::string::size_type a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v11;
  os_unfair_lock_s *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59[2];
  char v60;
  void *__p[2];
  char v62;
  char v63;
  unint64_t v64;
  _QWORD v65[2];
  char v66;

  v9 = a2;
  if (*(char *)(a3 + 23) < 0)
  {
    if (!*(_QWORD *)(a3 + 8))
    {
LABEL_9:
      sub_10036CAF0("reason can't be empty", a2, a3, a4, a5, a6, a7, a8, v56);
      return 4;
    }
    v11 = *(_QWORD *)a3;
  }
  else
  {
    v11 = a3;
    if (!*(_BYTE *)(a3 + 23))
      goto LABEL_9;
  }
  sub_1000051BC("Request to dump logs for reason: %s", a2, a3, a4, a5, a6, a7, a8, v11);
  v12 = (os_unfair_lock_s *)(a1 + 8);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 8));
  if (!*(_BYTE *)a1)
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 8));
    return 5;
  }
  v20 = *(_DWORD *)(a1 + 4);
  if (v20 != 1)
  {
    if (v9 && v20 == 2)
    {
      os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 8));
      return 2;
    }
    if (!v9 && v20 == 2)
    {
      sub_1000051BC("Promoting crashlog trigger from NonFatal to Fatal. Cancel the existing timer.", v13, v14, v15, v16, v17, v18, v19, v57);
      sub_1000051BC("RoseDebugManager: Suspending the crashlog timer", v22, v23, v24, v25, v26, v27, v28, v58);
      dispatch_suspend(*(dispatch_object_t *)(a1 + 16));
      v29 = 1;
      *(_BYTE *)(a1 + 1) = 1;
      std::string::operator=((std::string *)(a1 + 24), (const std::string *)a3);
LABEL_29:
      sub_10039AE14(a1, v29);
      if (!sub_10036E340(*(_QWORD *)(a1 + 48), v9 == 0, v35, v36, v37, v38, v39, v40))
      {
        sub_10036CAF0("Triggering crashlog failed", v41, v42, v43, v44, v45, v46, v47, v57);
        sub_10000BF04(v59, "Triggering crashlog failed");
        sub_10039B484(a1, a3, 0, (std::string::size_type)v59);
        if (v60 < 0)
          operator delete(v59[0]);
        sub_10039AE14(a1, 0);
        v21 = 1;
        goto LABEL_35;
      }
      sub_1000051BC("Successfully triggered a crashlog. Start timer.", v41, v42, v43, v44, v45, v46, v47, v57);
      sub_10039CC18(a1, v48, v49, v50, v51, v52, v53, v54);
LABEL_31:
      v21 = 0;
LABEL_35:
      os_unfair_lock_unlock(v12);
      return v21;
    }
    if (v9 == 2)
    {
      if ((sub_10039DB58(a1, 0, &v64, &v63, v16, v17, v18, v19) & 1) == 0
        && !sub_10039DB58(a1, 1, &v64, &v63, v31, v32, v33, v34))
      {
        goto LABEL_31;
      }
      sub_10000BF04(__p, "");
      sub_10039B484(a1, a3, 0, (std::string::size_type)__p);
      if ((v62 & 0x80000000) == 0)
        goto LABEL_31;
      v30 = __p[0];
    }
    else
    {
      if (v9 != 3)
      {
        std::string::operator=((std::string *)(a1 + 24), (const std::string *)a3);
        if (v9)
          v29 = 2;
        else
          v29 = 1;
        goto LABEL_29;
      }
      sub_10000BF04(v65, "");
      sub_10039B484(a1, a3, 0, (std::string::size_type)v65);
      if ((v66 & 0x80000000) == 0)
        goto LABEL_31;
      v30 = (void *)v65[0];
    }
    operator delete(v30);
    goto LABEL_31;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 8));
  return 3;
}

void sub_10039F050(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uintmax_t sub_10039F094(char *a1)
{
  __int128 v2;
  unint64_t *v3;
  unint64_t v4;
  std::__shared_weak_count *size;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  uintmax_t v9;
  const std::__fs::filesystem::directory_entry *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__fs::filesystem::path __p;
  std::__fs::filesystem::path v19;
  char v20;

  sub_10017ED1C(&v19.__pn_, a1);
  std::__fs::filesystem::__status(&v19, 0);
  if (SHIBYTE(v19.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v19.__pn_.__r_.__value_.__l.__data_);
  if (__p.__pn_.__r_.__value_.__s.__data_[0] == 2)
  {
    sub_10017ED1C(&__p.__pn_, a1);
    std::__fs::filesystem::recursive_directory_iterator::recursive_directory_iterator((std::__fs::filesystem::recursive_directory_iterator *)&v19, &__p, skip_permission_denied, 0);
    if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__pn_.__r_.__value_.__l.__data_);
    v2 = *(_OWORD *)&v19.__pn_.__r_.__value_.__l.__data_;
    if (v19.__pn_.__r_.__value_.__l.__size_)
    {
      v3 = (unint64_t *)(v19.__pn_.__r_.__value_.__l.__size_ + 8);
      do
        v4 = __ldxr(v3);
      while (__stxr(v4 + 1, v3));
      size = (std::__shared_weak_count *)v19.__pn_.__r_.__value_.__l.__size_;
      *(_OWORD *)&__p.__pn_.__r_.__value_.__l.__data_ = v2;
      __p.__pn_.__r_.__value_.__s.__data_[16] = v19.__pn_.__r_.__value_.__s.__data_[16];
      if (v19.__pn_.__r_.__value_.__l.__size_)
      {
        v6 = (unint64_t *)(v19.__pn_.__r_.__value_.__l.__size_ + 8);
        do
          v7 = __ldxr(v6);
        while (__stxr(v7 + 1, v6));
        do
          v8 = __ldaxr(v6);
        while (__stlxr(v8 - 1, v6));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
          std::__shared_weak_count::__release_weak(size);
        }
      }
    }
    else
    {
      *(_OWORD *)&__p.__pn_.__r_.__value_.__l.__data_ = v19.__pn_.__r_.__value_.__r.__words[0];
      __p.__pn_.__r_.__value_.__s.__data_[16] = v19.__pn_.__r_.__value_.__s.__data_[16];
    }
    v9 = 0;
    while (__p.__pn_.__r_.__value_.__r.__words[0])
    {
      v10 = std::__fs::filesystem::recursive_directory_iterator::__dereference((const std::__fs::filesystem::recursive_directory_iterator *)&__p);
      std::__fs::filesystem::__status(&v10->__p_, 0);
      if (v20 != 2)
        v9 += std::__fs::filesystem::__file_size(&v10->__p_, 0);
      std::__fs::filesystem::recursive_directory_iterator::__increment((std::__fs::filesystem::recursive_directory_iterator *)&__p, 0);
    }
    v11 = (std::__shared_weak_count *)__p.__pn_.__r_.__value_.__l.__size_;
    if (__p.__pn_.__r_.__value_.__l.__size_)
    {
      v12 = (unint64_t *)(__p.__pn_.__r_.__value_.__l.__size_ + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    v14 = (std::__shared_weak_count *)v19.__pn_.__r_.__value_.__l.__size_;
    if (v19.__pn_.__r_.__value_.__l.__size_)
    {
      v15 = (unint64_t *)(v19.__pn_.__r_.__value_.__l.__size_ + 8);
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
  }
  else
  {
    sub_10017ED1C(&v19.__pn_, a1);
    v9 = std::__fs::filesystem::__file_size(&v19, 0);
    if (SHIBYTE(v19.__pn_.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v19.__pn_.__r_.__value_.__l.__data_);
  }
  return v9;
}

void sub_10039F2F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10039F350(char *a1)
{
  uintmax_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uintmax_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  std::shared_ptr<std::__fs::filesystem::__dir_stream>::element_type *ptr;
  std::__shared_weak_count *cntrl;
  uint64_t *p_shared_owners;
  unint64_t v22;
  std::__shared_weak_count *v23;
  uint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  std::shared_ptr<std::__fs::filesystem::__dir_stream>::element_type *v27;
  const std::__fs::filesystem::directory_entry *v28;
  std::__fs::filesystem::file_time_type v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  uint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  uint64_t *v37;
  unint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uintmax_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  BOOL v56;
  uint64_t *v57;
  uint64_t *v58;
  BOOL v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  std::__fs::filesystem::path *p_dst;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  uint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  uint64_t *v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  std::__fs::filesystem::path *v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v88;
  uint64_t v89;
  std::__fs::filesystem::path __dst;
  std::chrono::duration<__int128, std::ratio<1, 1000000000>>::rep rep;
  std::shared_ptr<std::__fs::filesystem::__dir_stream>::element_type *v92;
  std::__shared_weak_count *v93;
  std::__fs::filesystem::directory_iterator v94;
  std::__fs::filesystem::directory_iterator v95;
  std::error_code __ec;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD v100[4];
  _QWORD v101[3];
  _QWORD *v102;

  __ec.__val_ = 0;
  __ec.__cat_ = std::system_category();
  v2 = sub_10039F094(a1);
  if ((v2 + 0x200000) >> 26)
  {
    v11 = v2;
    v101[0] = off_100818470;
    v102 = v101;
    v100[3] = v100;
    v99 = 0;
    v100[0] = off_100818470;
    v97 = &v98;
    v98 = 0;
    sub_10017ED1C(&__dst.__pn_, a1);
    std::__fs::filesystem::directory_iterator::directory_iterator(&v95, &__dst, 0, none);
    if (SHIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst.__pn_.__r_.__value_.__l.__data_);
    ptr = v95.__imp_.__ptr_;
    cntrl = v95.__imp_.__cntrl_;
    if (v95.__imp_.__cntrl_)
    {
      p_shared_owners = &v95.__imp_.__cntrl_->__shared_owners_;
      do
        v22 = __ldxr((unint64_t *)p_shared_owners);
      while (__stxr(v22 + 1, (unint64_t *)p_shared_owners));
      v23 = v95.__imp_.__cntrl_;
      v94.__imp_.__ptr_ = ptr;
      v94.__imp_.__cntrl_ = cntrl;
      if (v95.__imp_.__cntrl_)
      {
        v24 = &v95.__imp_.__cntrl_->__shared_owners_;
        do
          v25 = __ldxr((unint64_t *)v24);
        while (__stxr(v25 + 1, (unint64_t *)v24));
        v92 = 0;
        v93 = 0;
        do
          v26 = __ldaxr((unint64_t *)v24);
        while (__stlxr(v26 - 1, (unint64_t *)v24));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
        goto LABEL_17;
      }
    }
    else
    {
      v94.__imp_.__ptr_ = v95.__imp_.__ptr_;
      v94.__imp_.__cntrl_ = 0;
    }
    v92 = 0;
    v93 = 0;
LABEL_17:
    v27 = v92;
    while (v94.__imp_.__ptr_ != v27)
    {
      v28 = std::__fs::filesystem::directory_iterator::__dereference(&v94);
      v29.__d_.__rep_ = std::__fs::filesystem::__last_write_time(&v28->__p_, &__ec).__d_.__rep_;
      if (__ec.__val_)
      {
        std::error_code::message(&__dst.__pn_, &__ec);
        if ((__dst.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_dst = &__dst;
        else
          p_dst = (std::__fs::filesystem::path *)__dst.__pn_.__r_.__value_.__r.__words[0];
        sub_10036CAF0("Error: %s while getting the last write time of %s", v60, v61, v62, v63, v64, v65, v66, (uint64_t)p_dst);
        if (SHIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__dst.__pn_.__r_.__value_.__l.__data_);
        v68 = v93;
        if (v93)
        {
          v69 = (unint64_t *)&v93->__shared_owners_;
          do
            v70 = __ldaxr(v69);
          while (__stlxr(v70 - 1, v69));
          if (!v70)
          {
            ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
            std::__shared_weak_count::__release_weak(v68);
          }
        }
        v71 = v94.__imp_.__cntrl_;
        if (v94.__imp_.__cntrl_)
        {
          v72 = &v94.__imp_.__cntrl_->__shared_owners_;
          do
            v73 = __ldaxr((unint64_t *)v72);
          while (__stlxr(v73 - 1, (unint64_t *)v72));
          if (!v73)
          {
            ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
            std::__shared_weak_count::__release_weak(v71);
          }
        }
        v74 = v95.__imp_.__cntrl_;
        if (v95.__imp_.__cntrl_)
        {
          v75 = &v95.__imp_.__cntrl_->__shared_owners_;
          do
            v76 = __ldaxr((unint64_t *)v75);
          while (__stlxr(v76 - 1, (unint64_t *)v75));
          if (!v76)
          {
            ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
            std::__shared_weak_count::__release_weak(v74);
          }
        }
        goto LABEL_84;
      }
      if (SHIBYTE(v28->__p_.__pn_.__r_.__value_.__r.__words[2]) < 0)
        sub_100004678(&__dst, v28->__p_.__pn_.__r_.__value_.__l.__data_, v28->__p_.__pn_.__r_.__value_.__l.__size_);
      else
        __dst = v28->__p_;
      rep = v29.__d_.__rep_;
      sub_1003A1464(&v97, (__int128 *)&__dst, (uint64_t)&__dst);
      if (SHIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__dst.__pn_.__r_.__value_.__l.__data_);
      std::__fs::filesystem::directory_iterator::__increment(&v94, 0);
    }
    v30 = v93;
    if (v93)
    {
      v31 = (unint64_t *)&v93->__shared_owners_;
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    v33 = v94.__imp_.__cntrl_;
    if (v94.__imp_.__cntrl_)
    {
      v34 = &v94.__imp_.__cntrl_->__shared_owners_;
      do
        v35 = __ldaxr((unint64_t *)v34);
      while (__stlxr(v35 - 1, (unint64_t *)v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    v36 = v95.__imp_.__cntrl_;
    if (v95.__imp_.__cntrl_)
    {
      v37 = &v95.__imp_.__cntrl_->__shared_owners_;
      do
        v38 = __ldaxr((unint64_t *)v37);
      while (__stlxr(v38 - 1, (unint64_t *)v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
    }
    if (v99)
    {
      v39 = v97;
      if (v97 == &v98)
      {
LABEL_57:
        v10 = 1;
        goto LABEL_85;
      }
      while (1)
      {
        v47 = sub_10039F094((char *)v39 + 32);
        v48 = (uint64_t)(v39 + 4);
        if (*((char *)v39 + 55) < 0)
          v48 = v39[4];
        sub_1000051BC("removing directory: %s of size: %ju", v40, v41, v42, v43, v44, v45, v46, v48);
        sub_10017ED1C(&__dst.__pn_, (char *)v39 + 32);
        std::__fs::filesystem::__remove_all(&__dst, &__ec);
        if (SHIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__dst.__pn_.__r_.__value_.__l.__data_);
        if (__ec.__val_)
          break;
        v56 = v11 >= v47;
        v11 -= v47;
        if (!v56)
        {
          sub_10036CAF0("Error while deleting the oldest directory", v49, v50, v51, v52, v53, v54, v55, v89);
          goto LABEL_84;
        }
        if ((v11 + 0x200000) >> 26)
        {
          v57 = (uint64_t *)v39[1];
          if (v57)
          {
            do
            {
              v58 = v57;
              v57 = (uint64_t *)*v57;
            }
            while (v57);
          }
          else
          {
            do
            {
              v58 = (uint64_t *)v39[2];
              v59 = *v58 == (_QWORD)v39;
              v39 = v58;
            }
            while (!v59);
          }
          v39 = v58;
          if (v58 != &v98)
            continue;
        }
        goto LABEL_57;
      }
      std::error_code::message(&__dst.__pn_, &__ec);
      if ((__dst.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v84 = &__dst;
      else
        v84 = (std::__fs::filesystem::path *)__dst.__pn_.__r_.__value_.__r.__words[0];
      sub_10036CAF0("Error: %s while deleting the directory: %s", v77, v78, v79, v80, v81, v82, v83, (uint64_t)v84);
      if (SHIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__dst.__pn_.__r_.__value_.__l.__data_);
    }
    else
    {
      sub_10036CAF0("Unable to iterate through the directory", v12, v13, v14, v15, v16, v17, v18, v88);
    }
LABEL_84:
    v10 = 0;
LABEL_85:
    sub_1003A140C((uint64_t)&v97);
    v85 = v102;
    if (v102 == v101)
    {
      v86 = 4;
      v85 = v101;
    }
    else
    {
      if (!v102)
        return v10;
      v86 = 5;
    }
    (*(void (**)(void))(*v85 + 8 * v86))();
    return v10;
  }
  sub_1000051BC("Rose logging directory usage is below the maximum threshold", v3, v4, v5, v6, v7, v8, v9, v88);
  return 1;
}

void sub_10039F878(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  uint64_t v28;
  _QWORD *v30;
  uint64_t v31;

  sub_1003A140C((uint64_t)&a28);
  v30 = *(_QWORD **)(v28 - 80);
  if (v30 == (_QWORD *)(v28 - 104))
  {
    v31 = 4;
    v30 = (_QWORD *)(v28 - 104);
  }
  else
  {
    if (!v30)
      goto LABEL_6;
    v31 = 5;
  }
  (*(void (**)(void))(*v30 + 8 * v31))();
LABEL_6:
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_10039F948(unsigned __int8 *a1)
{
  *a1 = 0;
  sub_1003A08FC(a1);
  sub_1003A08FC(a1);
  return a1;
}

uint64_t sub_10039F97C(uint64_t a1, int a2)
{
  uint64_t v4;
  _QWORD v6[2];
  uint64_t v7;
  _QWORD v8[10];
  char v9;
  uint64_t v10;

  sub_1000537E4((uint64_t)v6);
  sub_10039FADC(a1, &v7, a2 >= 0, a2 & ~(a2 >> 31), 0);
  std::stringbuf::str(v8);
  *(_QWORD *)((char *)v6
  v7 = v4;
  if (v9 < 0)
    operator delete((void *)v8[8]);
  std::streambuf::~streambuf(v8);
  return std::ios::~ios(&v10);
}

void sub_10039FA4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100053910((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_10039FA60@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, off_1008184F0[a1]);
}

std::runtime_error *sub_10039FA74(std::runtime_error *a1, uint64_t a2)
{
  std::runtime_error *result;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = std::runtime_error::runtime_error(a1, (const std::runtime_error *)a2);
  result[1] = *(std::runtime_error *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 40);
  result[2].__vftable = *(std::runtime_error_vtbl **)(a2 + 32);
  result[2].__imp_.__imp_ = (const char *)v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

void sub_10039FADC(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v10;
  _QWORD *v11;
  const char *v12;
  uint64_t v13;
  const char *v14;
  void **v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  std::string *p_p;
  std::string::size_type size;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  BOOL v25;
  std::string *v26;
  __int128 v27;
  void **v28;
  uint64_t v29;
  void *v30;
  uint64_t *v31;
  uint64_t v32;
  const char *v33;
  uint64_t v34;
  void **v35;
  uint64_t v36;
  void **v37;
  uint64_t v38;
  _QWORD *v39;
  void **v40;
  uint64_t v41;
  _QWORD *v42;
  std::string *v43;
  std::string::size_type v44;
  _QWORD *v45;
  const char *v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  size_t v50;
  unint64_t v51;
  size_t v52;
  double v53;
  size_t v54;
  uint64_t v55;
  uint64_t v56;
  std::string __p;
  void *__b[2];
  __int128 v59;
  __int128 v60;
  __int128 v61;

  switch(*(_BYTE *)a1)
  {
    case 0:
      sub_100054C60(a2, (uint64_t)"null", 4);
      break;
    case 1:
      if (!*(_QWORD *)(*(_QWORD *)(a1 + 8) + 16))
      {
        v46 = "{}";
        goto LABEL_112;
      }
      sub_100054C60(a2, (uint64_t)"{", 1);
      if ((_DWORD)a3)
      {
        a5 = (a5 + a4);
        sub_100054C60(a2, (uint64_t)"\n", 1);
      }
      v10 = *(_QWORD **)(a1 + 8);
      v11 = (_QWORD *)*v10;
      if ((_QWORD *)*v10 != v10 + 1)
      {
        if ((_DWORD)a3)
          v12 = ",\n";
        else
          v12 = ",";
        v13 = 1;
        if ((_DWORD)a3)
          v13 = 2;
        v55 = v13;
        v56 = (uint64_t)v12;
        if ((_DWORD)a3)
          v14 = " ";
        else
          v14 = "";
        do
        {
          if (v11 != (_QWORD *)*v10)
            sub_100054C60(a2, v56, v55);
          sub_100054F00(__b, a5, 32);
          if ((SBYTE7(v59) & 0x80u) == 0)
            v15 = __b;
          else
            v15 = (void **)__b[0];
          if ((SBYTE7(v59) & 0x80u) == 0)
            v16 = BYTE7(v59);
          else
            v16 = (uint64_t)__b[1];
          v17 = sub_100054C60(a2, (uint64_t)v15, v16);
          v18 = sub_100054C60(v17, (uint64_t)"\"", 1);
          sub_1003A01EC((uint64_t)(v11 + 4), (uint64_t *)&__p);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            p_p = &__p;
          else
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          else
            size = __p.__r_.__value_.__l.__size_;
          v21 = sub_100054C60(v18, (uint64_t)p_p, size);
          v22 = sub_100054C60(v21, (uint64_t)"\":", 2);
          sub_100054C60(v22, (uint64_t)v14, a3);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          if (SBYTE7(v59) < 0)
            operator delete(__b[0]);
          sub_10039FADC(v11 + 7, a2, a3, a4, a5);
          v23 = (_QWORD *)v11[1];
          if (v23)
          {
            do
            {
              v24 = v23;
              v23 = (_QWORD *)*v23;
            }
            while (v23);
          }
          else
          {
            do
            {
              v24 = (_QWORD *)v11[2];
              v25 = *v24 == (_QWORD)v11;
              v11 = v24;
            }
            while (!v25);
          }
          v10 = *(_QWORD **)(a1 + 8);
          v11 = v24;
        }
        while (v24 != v10 + 1);
      }
      if ((a3 & 1) != 0)
      {
        sub_100054C60(a2, (uint64_t)"\n", 1);
        LODWORD(a5) = a5 - a4;
      }
      sub_100054F00(&__p, a5, 32);
      v26 = std::string::append(&__p, "}");
      v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
      *(_QWORD *)&v59 = *((_QWORD *)&v26->__r_.__value_.__l + 2);
      *(_OWORD *)__b = v27;
      v26->__r_.__value_.__l.__size_ = 0;
      v26->__r_.__value_.__r.__words[2] = 0;
      v26->__r_.__value_.__r.__words[0] = 0;
      if ((SBYTE7(v59) & 0x80u) == 0)
        v28 = __b;
      else
        v28 = (void **)__b[0];
      if ((SBYTE7(v59) & 0x80u) == 0)
        v29 = BYTE7(v59);
      else
        v29 = (uint64_t)__b[1];
      sub_100054C60(a2, (uint64_t)v28, v29);
      if (SBYTE7(v59) < 0)
        operator delete(__b[0]);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        v30 = (void *)__p.__r_.__value_.__r.__words[0];
        goto LABEL_97;
      }
      break;
    case 2:
      if (**(_QWORD **)(a1 + 8) != *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8))
      {
        sub_100054C60(a2, (uint64_t)"[", 1);
        if ((_DWORD)a3)
        {
          a5 = (a5 + a4);
          sub_100054C60(a2, (uint64_t)"\n", 1);
        }
        v31 = *(uint64_t **)(a1 + 8);
        v32 = *v31;
        if (*v31 != v31[1])
        {
          if ((_DWORD)a3)
            v33 = ",\n";
          else
            v33 = ",";
          if ((_DWORD)a3)
            v34 = 2;
          else
            v34 = 1;
          do
          {
            if (v32 != *v31)
              sub_100054C60(a2, (uint64_t)v33, v34);
            sub_100054F00(__b, a5, 32);
            if ((SBYTE7(v59) & 0x80u) == 0)
              v35 = __b;
            else
              v35 = (void **)__b[0];
            if ((SBYTE7(v59) & 0x80u) == 0)
              v36 = BYTE7(v59);
            else
              v36 = (uint64_t)__b[1];
            sub_100054C60(a2, (uint64_t)v35, v36);
            if (SBYTE7(v59) < 0)
              operator delete(__b[0]);
            sub_10039FADC(v32, a2, a3, a4, a5);
            v32 += 16;
            v31 = *(uint64_t **)(a1 + 8);
          }
          while (v32 != v31[1]);
        }
        if ((a3 & 1) != 0)
        {
          sub_100054C60(a2, (uint64_t)"\n", 1);
          LODWORD(a5) = a5 - a4;
        }
        sub_100054F00(__b, a5, 32);
        if ((SBYTE7(v59) & 0x80u) == 0)
          v37 = __b;
        else
          v37 = (void **)__b[0];
        if ((SBYTE7(v59) & 0x80u) == 0)
          v38 = BYTE7(v59);
        else
          v38 = (uint64_t)__b[1];
        v39 = sub_100054C60(a2, (uint64_t)v37, v38);
        sub_100054C60(v39, (uint64_t)"]", 1);
        goto LABEL_95;
      }
      v46 = "[]";
LABEL_112:
      v48 = a2;
      v47 = 2;
      goto LABEL_113;
    case 3:
      sub_10000BF04(__b, "\"");
      if ((SBYTE7(v59) & 0x80u) == 0)
        v40 = __b;
      else
        v40 = (void **)__b[0];
      if ((SBYTE7(v59) & 0x80u) == 0)
        v41 = BYTE7(v59);
      else
        v41 = (uint64_t)__b[1];
      v42 = sub_100054C60(a2, (uint64_t)v40, v41);
      sub_1003A01EC(*(_QWORD *)(a1 + 8), (uint64_t *)&__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v43 = &__p;
      else
        v43 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v44 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v44 = __p.__r_.__value_.__l.__size_;
      v45 = sub_100054C60(v42, (uint64_t)v43, v44);
      sub_100054C60(v45, (uint64_t)"\"", 1);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
LABEL_95:
      if (SBYTE7(v59) < 0)
      {
        v30 = __b[0];
LABEL_97:
        operator delete(v30);
      }
      break;
    case 4:
      if (*(_BYTE *)(a1 + 8))
        v46 = "true";
      else
        v46 = "false";
      if (*(_BYTE *)(a1 + 8))
        v47 = 4;
      else
        v47 = 5;
      v48 = a2;
LABEL_113:
      sub_100054C60(v48, (uint64_t)v46, v47);
      break;
    case 5:
      v49 = *(_QWORD *)(a1 + 8);
      *(_OWORD *)__b = 0u;
      v59 = 0u;
      v60 = 0u;
      v61 = 0u;
      sub_1003A04CC(__b, v49);
      v50 = strlen((const char *)__b);
      sub_100054C60(a2, (uint64_t)__b, v50);
      break;
    case 6:
      v51 = *(_QWORD *)(a1 + 8);
      *(_OWORD *)__b = 0u;
      v59 = 0u;
      v60 = 0u;
      v61 = 0u;
      sub_1003A0598(__b, v51);
      v52 = strlen((const char *)__b);
      sub_100054C60(a2, (uint64_t)__b, v52);
      break;
    case 7:
      v53 = *(double *)(a1 + 8);
      *(_OWORD *)__b = 0u;
      v59 = 0u;
      v60 = 0u;
      v61 = 0u;
      sub_1003A0630((char *)__b, v53);
      v54 = strlen((const char *)__b);
      sub_100054C60(a2, (uint64_t)__b, v54);
      break;
    case 8:
      sub_100054C60(a2, (uint64_t)"<discarded>", 11);
      break;
    default:
      return;
  }
}

void sub_1003A016C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  if (a17 < 0)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003A01EC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  int v6;
  BOOL v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  int v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  _BYTE v23[3];
  char v24;
  char v25;

  result = sub_1003A0430((uint64_t *)a1);
  v5 = *(unsigned __int8 *)(a1 + 23);
  if (result)
  {
    if ((v5 & 0x80u) != 0)
      v5 = *(_QWORD *)(a1 + 8);
    result = (uint64_t)sub_100054F00(a2, v5 + result, 92);
    v6 = *(char *)(a1 + 23);
    v7 = v6 < 0;
    if (v6 >= 0)
      v8 = (_BYTE *)a1;
    else
      v8 = *(_BYTE **)a1;
    if (v7)
      v9 = *(_QWORD *)(a1 + 8);
    else
      v9 = *(unsigned __int8 *)(a1 + 23);
    if (v9)
    {
      v10 = 0;
      v11 = &v8[v9];
      result = 110;
      while (2)
      {
        v12 = (char)*v8;
        switch(*v8)
        {
          case 8:
            if (*((char *)a2 + 23) >= 0)
              v13 = a2;
            else
              v13 = (uint64_t *)*a2;
            *((_BYTE *)v13 + v10 + 1) = 98;
            goto LABEL_46;
          case 9:
            if (*((char *)a2 + 23) >= 0)
              v18 = a2;
            else
              v18 = (uint64_t *)*a2;
            *((_BYTE *)v18 + v10 + 1) = 116;
            goto LABEL_46;
          case 0xA:
            if (*((char *)a2 + 23) >= 0)
              v19 = a2;
            else
              v19 = (uint64_t *)*a2;
            *((_BYTE *)v19 + v10 + 1) = 110;
            goto LABEL_46;
          case 0xB:
            goto LABEL_23;
          case 0xC:
            if (*((char *)a2 + 23) >= 0)
              v20 = a2;
            else
              v20 = (uint64_t *)*a2;
            *((_BYTE *)v20 + v10 + 1) = 102;
            goto LABEL_46;
          case 0xD:
            if (*((char *)a2 + 23) >= 0)
              v21 = a2;
            else
              v21 = (uint64_t *)*a2;
            *((_BYTE *)v21 + v10 + 1) = 114;
            goto LABEL_46;
          default:
            if (v12 == 92)
              goto LABEL_46;
            if (v12 == 34)
            {
              if (*((char *)a2 + 23) >= 0)
                v14 = a2;
              else
                v14 = (uint64_t *)*a2;
              *((_BYTE *)v14 + v10 + 1) = 34;
LABEL_46:
              v10 += 2;
            }
            else
            {
LABEL_23:
              if (*v8 > 0x1Fu)
              {
                if (*((char *)a2 + 23) >= 0)
                  v22 = a2;
                else
                  v22 = (uint64_t *)*a2;
                *((_BYTE *)v22 + v10) = *v8;
              }
              else
              {
                v15 = 0;
                v16 = *v8;
                qmemcpy(v23, "u00", sizeof(v23));
                v24 = a0123456789abcd[v16 >> 4];
                v25 = a0123456789abcd[v16 & 0xF];
                do
                {
                  if (*((char *)a2 + 23) >= 0)
                    v17 = a2;
                  else
                    v17 = (uint64_t *)*a2;
                  *((_BYTE *)v17 + v10 + v15 + 1) = v23[v15];
                  ++v15;
                }
                while (v15 != 5);
                v10 += 5;
              }
              ++v10;
            }
            if (++v8 == v11)
              return result;
            continue;
        }
      }
    }
  }
  else if ((v5 & 0x80) != 0)
  {
    return (uint64_t)sub_100004678(a2, *(void **)a1, *(_QWORD *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)a2 = *(_OWORD *)a1;
    a2[2] = *(_QWORD *)(a1 + 16);
  }
  return result;
}

uint64_t sub_1003A0430(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((unsigned __int8 *)a1 + 23);
  v2 = a1[1];
  if ((v1 & 0x80u) != 0)
  {
    a1 = (uint64_t *)*a1;
    v1 = v2;
  }
  return sub_1003A0468(a1, (_BYTE *)a1 + v1, 0);
}

uint64_t sub_1003A0468(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  unsigned int v3;
  BOOL v4;

  for (; a1 != a2; ++a1)
  {
    v3 = (char)*a1;
    v4 = v3 > 0x22 || ((1 << *a1) & 0x400003700) == 0;
    if (!v4 || v3 == 92)
    {
      ++a3;
    }
    else if (*a1 < 0x20u)
    {
      a3 += 5;
    }
  }
  return a3;
}

_BYTE *sub_1003A04CC(_BYTE *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  unint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  char v10;

  if (a2)
  {
    v2 = 0;
    v3 = a2;
    do
    {
      if (v2 == 63)
        sub_1003F0E48();
      v4 = v3 % 10;
      if (v3 % 10 < 0)
        LOBYTE(v4) = 10 * (v3 / 10) - v3;
      v5 = v4 + 48;
      v6 = v2 + 1;
      result[v2] = v5;
      v7 = v3 + 9;
      v3 /= 10;
      ++v2;
    }
    while (v7 >= 0x13);
    if (a2 < 0)
    {
      if ((unint64_t)(v6 - 1) >= 0x3D)
        sub_1003F0E70();
      result[v6++] = 45;
    }
    v8 = &result[v6 - 1];
    if (v8 > result)
    {
      v9 = result + 1;
      do
      {
        v10 = *(v9 - 1);
        *(v9 - 1) = *v8;
        *v8-- = v10;
      }
      while (v9++ < v8);
    }
  }
  else
  {
    *result = 48;
  }
  return result;
}

_BYTE *sub_1003A0598(_BYTE *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  _BYTE *v5;
  _BYTE *v6;
  char v7;

  if (a2)
  {
    v2 = 0;
    do
    {
      if (v2 == 63)
        sub_1003F0E48();
      v3 = v2 + 1;
      result[v2++] = (a2 % 0xA) | 0x30;
      v4 = a2 >= 0xA;
      a2 /= 0xAuLL;
    }
    while (v4);
    v5 = &result[v3 - 1];
    if (v5 > result)
    {
      v6 = result + 1;
      do
      {
        v7 = *(v6 - 1);
        *(v6 - 1) = *v5;
        *v5-- = v7;
        v4 = v6++ >= v5;
      }
      while (!v4);
    }
  }
  else
  {
    *result = 48;
  }
  return result;
}

void sub_1003A0630(char *__str, double a2)
{
  uint64_t v3;
  int v4;
  int v5;
  lconv *v6;
  char *thousands_sep;
  int v8;
  char *v9;
  unsigned __int8 *v10;
  int64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  int v15;
  unsigned __int8 v16;

  if (a2 == 0.0)
  {
    if ((*(_QWORD *)&a2 & 0x8000000000000000) != 0)
    {
      *__str = 45;
      v3 = 1;
    }
    else
    {
      v3 = 0;
    }
    v9 = &__str[v3];
    *(_WORD *)v9 = 11824;
    v9[2] = 48;
    return;
  }
  v4 = snprintf(__str, 0x40uLL, "%.*g", 15, a2);
  if (v4 <= 0)
    sub_1003F0E98();
  v5 = v4;
  if (v4 >= 0x40)
    sub_1003F0F60();
  v6 = localeconv();
  if (!v6)
    sub_1003F0EC0();
  thousands_sep = v6->thousands_sep;
  if (thousands_sep)
    LODWORD(thousands_sep) = *thousands_sep;
  v16 = thousands_sep;
  if (!v6->decimal_point)
  {
    v8 = 0;
    if (!(_DWORD)thousands_sep)
      goto LABEL_18;
LABEL_16:
    v10 = sub_1003A080C(__str, (unsigned __int8 *)&__str[v5], &v16);
    v11 = __str - (char *)v10 + 64;
    if (v11 >= 1)
      bzero(v10, v11);
    goto LABEL_18;
  }
  v8 = *v6->decimal_point;
  if ((_DWORD)thousands_sep)
    goto LABEL_16;
LABEL_18:
  if (v8 && v8 != 46)
  {
    v12 = 0;
    while (v8 != __str[v12])
    {
      if (++v12 == 64)
        goto LABEL_25;
    }
    __str[v12] = 46;
  }
LABEL_25:
  v13 = *__str;
  if (*__str)
  {
    v14 = 0;
    LOBYTE(v15) = 1;
    while (1)
    {
      if ((v15 & 1) != 0
        && ((v13 - 46) > 0x37 || ((1 << (v13 - 46)) & 0x80000000800001) == 0))
      {
        if (++v14 == 64)
          goto LABEL_46;
        v15 = 1;
      }
      else
      {
        if (++v14 == 64)
          return;
        v15 = 0;
      }
      v13 = __str[v14];
      if (!__str[v14])
        goto LABEL_37;
    }
  }
  v14 = 0;
  v15 = 1;
LABEL_37:
  if (v15)
  {
    if (v14 >= 0x3E)
LABEL_46:
      sub_1003F0F38();
    if (!__str[v14 - 1])
      sub_1003F0EE8();
    *(_WORD *)&__str[v14] = 12334;
    if (__str[v14 + 2])
      sub_1003F0F10();
  }
}

unsigned __int8 *sub_1003A080C(void *a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *result;
  unsigned __int8 *v6;
  int v8;

  result = (unsigned __int8 *)memchr(a1, (char)*a3, a2 - (_BYTE *)a1);
  if (!result)
    result = a2;
  v6 = result + 1;
  if (result != a2 && v6 != a2)
  {
    do
    {
      v8 = *v6;
      if (v8 != *a3)
        *result++ = v8;
      ++v6;
    }
    while (v6 != a2);
  }
  return result;
}

unsigned __int8 *sub_1003A0870(unsigned __int8 *a1)
{
  int v2;
  char *v3;
  void **v5;

  sub_1003A08FC(a1);
  v2 = *a1;
  switch(v2)
  {
    case 3:
      v3 = (char *)*((_QWORD *)a1 + 1);
      if ((v3[23] & 0x80000000) == 0)
      {
LABEL_9:
        operator delete(v3);
        return a1;
      }
      operator delete(*(void **)v3);
LABEL_8:
      v3 = (char *)*((_QWORD *)a1 + 1);
      goto LABEL_9;
    case 2:
      v5 = (void **)*((_QWORD *)a1 + 1);
      sub_1003A09E0(&v5);
      goto LABEL_8;
    case 1:
      sub_1003A094C(*((_QWORD *)a1 + 1), *(char **)(*((_QWORD *)a1 + 1) + 8));
      goto LABEL_8;
  }
  return a1;
}

unsigned __int8 *sub_1003A08FC(unsigned __int8 *result)
{
  int v1;

  v1 = *result;
  if (v1 == 3)
  {
    if (!*((_QWORD *)result + 1))
      sub_1003F0FD8();
  }
  else if (v1 == 2)
  {
    if (!*((_QWORD *)result + 1))
      sub_1003F0FB0();
  }
  else if (v1 == 1 && !*((_QWORD *)result + 1))
  {
    sub_1003F0F88();
  }
  return result;
}

void sub_1003A094C(uint64_t a1, char *a2)
{
  if (a2)
  {
    sub_1003A094C(a1, *(_QWORD *)a2);
    sub_1003A094C(a1, *((_QWORD *)a2 + 1));
    sub_1003A0870(a2 + 56);
    if (a2[55] < 0)
      operator delete(*((void **)a2 + 4));
    operator delete(a2);
  }
}

void sub_1003A09A4(uint64_t a1, uint64_t a2)
{
  sub_1003A0870((unsigned __int8 *)(a2 + 24));
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

void sub_1003A09E0(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        v4 = sub_1003A0870(v4 - 16);
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_1003A0A50(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a3)
  {
    v6 = 32 * a3;
    do
    {
      sub_1003A0ACC((uint64_t **)a1, v4, a2, (uint64_t)a2);
      a2 += 8;
      v6 -= 32;
    }
    while (v6);
  }
  return a1;
}

void sub_1003A0AB4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1001D9568(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_1003A0ACC(uint64_t **a1, uint64_t *a2, int *a3, uint64_t a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;

  v6 = (uint64_t **)sub_1002124E0(a1, a2, &v10, &v9, a3);
  result = *v6;
  if (!*v6)
  {
    sub_1003A0B4C((uint64_t)a1, a4, (uint64_t)&v8);
    sub_1000272A8(a1, (uint64_t)v10, v6, v8);
    return v8;
  }
  return result;
}

_QWORD *sub_1003A0B4C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _DWORD *v6;
  _QWORD *result;

  v5 = a1 + 8;
  v6 = operator new(0x40uLL);
  *(_QWORD *)(a3 + 8) = v5;
  *(_QWORD *)a3 = v6;
  *(_BYTE *)(a3 + 16) = 0;
  v6[8] = *(_DWORD *)a2;
  result = v6 + 10;
  if (*(char *)(a2 + 31) < 0)
  {
    result = sub_100004678(result, *(void **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    *(_OWORD *)result = *(_OWORD *)(a2 + 8);
    result[2] = *(_QWORD *)(a2 + 24);
  }
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_1003A0BD8(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  sub_100232CBC(v3, v2);
  _Unwind_Resume(a1);
}

void sub_1003A0BF8()
{
  operator delete();
}

__n128 sub_1003A0C0C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = off_100818248;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_1003A0C4C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = off_100818248;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1003A0C74(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t (*v3)(_QWORD *, _QWORD);
  _QWORD *v4;

  v2 = a1[2];
  v3 = (uint64_t (*)(_QWORD *, _QWORD))a1[1];
  v4 = (_QWORD *)(a1[3] + (v2 >> 1));
  if ((v2 & 1) != 0)
    v3 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v3);
  return v3(v4, *a2);
}

uint64_t sub_1003A0C94(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1003A0CD0()
{
}

void sub_1003A0CE0()
{
  operator delete();
}

__n128 sub_1003A0CF4(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = off_100818308;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_1003A0D34(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = off_100818308;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1003A0D5C(_QWORD *a1, unsigned int *a2)
{
  uint64_t v2;
  uint64_t (*v3)(_QWORD *, _QWORD);
  _QWORD *v4;

  v2 = a1[2];
  v3 = (uint64_t (*)(_QWORD *, _QWORD))a1[1];
  v4 = (_QWORD *)(a1[3] + (v2 >> 1));
  if ((v2 & 1) != 0)
    v3 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v3);
  return v3(v4, *a2);
}

uint64_t sub_1003A0D7C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1003A0DB8()
{
}

void sub_1003A0DC8()
{
  operator delete();
}

__n128 sub_1003A0DDC(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = off_1008183C8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_1003A0E1C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = off_1008183C8;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1003A0E44(_QWORD *a1, unsigned int *a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t (*v5)(_QWORD *, _QWORD, _QWORD, _QWORD);
  _QWORD *v6;

  v4 = a1[2];
  v5 = (uint64_t (*)(_QWORD *, _QWORD, _QWORD, _QWORD))a1[1];
  v6 = (_QWORD *)(a1[3] + (v4 >> 1));
  if ((v4 & 1) != 0)
    v5 = *(uint64_t (**)(_QWORD *, _QWORD, _QWORD, _QWORD))(*v6 + v5);
  return v5(v6, *a2, *a3, *a4);
}

uint64_t sub_1003A0E6C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1003A0EA8()
{
}

void *sub_1003A0EB4(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xCCCCCCCCCCCCCCDLL)
    sub_1000260B0();
  return operator new(20 * a2);
}

_QWORD *sub_1003A0EF8@<X0>(char *a1@<X0>, _QWORD *a2@<X8>)
{
  unint64_t v4;
  char *v5;

  v4 = *a1;
  if (v4 > 8)
    v5 = "number";
  else
    v5 = off_100818510[v4];
  return sub_10000BF04(a2, v5);
}

void *sub_1003A0F28(uint64_t **a1, const void **a2, uint64_t a3, _OWORD **a4)
{
  void **v6;
  void *v7;
  uint64_t **v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v12;

  v6 = (void **)sub_1000271A4((uint64_t)a1, &v12, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x48uLL);
    v9 = *a4;
    v10 = *((_QWORD *)*a4 + 2);
    *((_OWORD *)v7 + 2) = **a4;
    *((_QWORD *)v7 + 6) = v10;
    *v9 = 0;
    v9[1] = 0;
    v9[2] = 0;
    sub_10039F948((unsigned __int8 *)v7 + 56);
    sub_1000272A8(a1, v12, v8, (uint64_t *)v7);
  }
  return v7;
}

void sub_1003A0FC8(uint64_t a1, void *__p)
{
  if (*(_BYTE *)(a1 + 8))
    sub_1003A09A4(*(_QWORD *)a1, (uint64_t)__p + 32);
  if (__p)
    operator delete(__p);
}

void sub_1003A1010(uint64_t a1, char **a2)
{
  void *__p[2];
  char v4;

  sub_10000BF04(__p, *a2);
  *(_BYTE *)a1 = 3;
  *(_QWORD *)(a1 + 8) = sub_1003A1088((uint64_t)__p);
  sub_1003A08FC((unsigned __int8 *)a1);
  if (v4 < 0)
    operator delete(__p[0]);
}

void sub_1003A106C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1003A1088(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = operator new(0x18uLL);
  v3 = v2;
  if (*(char *)(a1 + 23) < 0)
  {
    sub_100004678(v2, *(void **)a1, *(_QWORD *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)v2 = *(_OWORD *)a1;
    v2[2] = *(_QWORD *)(a1 + 16);
  }
  return v3;
}

void sub_1003A10DC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1003A10F0(_QWORD *a1, unint64_t a2)
{
  char *v4;
  size_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_100137708(a1, a2);
    v4 = (char *)a1[1];
    v5 = 56 * ((56 * a2 - 56) / 0x38) + 56;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_1003A1174(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1003A1190(_QWORD *a1, unint64_t a2)
{
  char *v4;
  size_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_1003A1230(a1, a2);
    v4 = (char *)a1[1];
    v5 = 72 * ((72 * a2 - 72) / 0x48) + 72;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_1003A1214(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_1003A1230(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x38E38E38E38E38FLL)
    sub_100026E7C();
  result = (char *)sub_100264974((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[72 * v4];
  return result;
}

void sub_1003A1284(uint64_t a1, char *a2)
{
  void *__p[2];
  char v4;

  sub_10000BF04(__p, a2);
  *(_BYTE *)a1 = 3;
  *(_QWORD *)(a1 + 8) = sub_1003A1088((uint64_t)__p);
  sub_1003A08FC((unsigned __int8 *)a1);
  if (v4 < 0)
    operator delete(__p[0]);
}

void sub_1003A12DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1003A12FC()
{
  operator delete();
}

_QWORD *sub_1003A1310()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_100818470;
  return result;
}

void sub_1003A1334(uint64_t a1, _QWORD *a2)
{
  *a2 = off_100818470;
}

BOOL sub_1003A134C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  void *v7;
  int v8;
  unint64_t v9;
  unint64_t v10;

  v3 = *(void **)a2;
  v4 = *(char *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v6 = *(_QWORD *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 40);
  v7 = *(void **)a3;
  v8 = *(char *)(a3 + 23);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
  v10 = *(_QWORD *)(a3 + 32);
  v9 = *(_QWORD *)(a3 + 40);
  if (v8 < 0)
  {
    operator delete(v7);
    if ((v4 & 0x80000000) == 0)
      return (__int128)__PAIR128__(v5, v6) < (__int128)__PAIR128__(v9, v10);
LABEL_5:
    operator delete(v3);
    return (__int128)__PAIR128__(v5, v6) < (__int128)__PAIR128__(v9, v10);
  }
  if (v4 < 0)
    goto LABEL_5;
  return (__int128)__PAIR128__(v5, v6) < (__int128)__PAIR128__(v9, v10);
}

uint64_t sub_1003A13C4(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_1003A1400()
{
}

uint64_t sub_1003A140C(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  sub_10017ECCC(a1, *(char **)(a1 + 8));
  v2 = *(_QWORD **)(a1 + 48);
  if (v2 == (_QWORD *)(a1 + 24))
  {
    v3 = 4;
    v2 = (_QWORD *)(a1 + 24);
    goto LABEL_5;
  }
  if (v2)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return a1;
}

uint64_t *sub_1003A1464(uint64_t **a1, __int128 *a2, uint64_t a3)
{
  uint64_t **v5;
  uint64_t *result;
  uint64_t *v7;
  uint64_t v8;

  v5 = (uint64_t **)sub_1003A14E0((uint64_t)a1, &v8, a2);
  result = *v5;
  if (!*v5)
  {
    sub_1003A1768((uint64_t)a1, a3, (uint64_t)&v7);
    sub_1000272A8(a1, v8, v5, v7);
    return v7;
  }
  return result;
}

uint64_t *sub_1003A14E0(uint64_t a1, _QWORD *a2, __int128 *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  __int128 *v7;
  uint64_t *v8;
  _OWORD *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  void *v16[2];
  uint64_t v17;
  __int128 v18;
  void *v19[2];
  uint64_t v20;
  __int128 v21;
  void *__p[2];
  uint64_t v23;
  __int128 v24;
  __int128 __dst;
  uint64_t v26;
  __int128 v27;

  v4 = (uint64_t *)(a1 + 8);
  v3 = *(uint64_t **)(a1 + 8);
  if (v3)
  {
    v7 = a3 + 2;
    while (1)
    {
      while (1)
      {
        v8 = v3;
        if (*((char *)a3 + 23) < 0)
        {
          sub_100004678(&__dst, *(void **)a3, *((_QWORD *)a3 + 1));
        }
        else
        {
          __dst = *a3;
          v26 = *((_QWORD *)a3 + 2);
        }
        v27 = *v7;
        v9 = v8 + 4;
        if (*((char *)v8 + 55) < 0)
        {
          sub_100004678(__p, (void *)v8[4], v8[5]);
        }
        else
        {
          *(_OWORD *)__p = *v9;
          v23 = v8[6];
        }
        v24 = *((_OWORD *)v8 + 4);
        v10 = *(_QWORD *)(a1 + 48);
        if (!v10)
          sub_100027BC4();
        v11 = (*(uint64_t (**)(uint64_t, __int128 *, void **))(*(_QWORD *)v10 + 48))(v10, &__dst, __p);
        if (SHIBYTE(v23) < 0)
          operator delete(__p[0]);
        if ((SHIBYTE(v26) & 0x80000000) == 0)
          break;
        operator delete((void *)__dst);
        if (v11)
          goto LABEL_14;
LABEL_17:
        if (*((char *)v8 + 55) < 0)
        {
          sub_100004678(v19, (void *)v8[4], v8[5]);
        }
        else
        {
          *(_OWORD *)v19 = *v9;
          v20 = v8[6];
        }
        v21 = *((_OWORD *)v8 + 4);
        if (*((char *)a3 + 23) < 0)
        {
          sub_100004678(v16, *(void **)a3, *((_QWORD *)a3 + 1));
        }
        else
        {
          *(_OWORD *)v16 = *a3;
          v17 = *((_QWORD *)a3 + 2);
        }
        v18 = *v7;
        v12 = *(_QWORD *)(a1 + 48);
        if (!v12)
          sub_100027BC4();
        v13 = (*(uint64_t (**)(uint64_t, void **, void **))(*(_QWORD *)v12 + 48))(v12, v19, v16);
        if (SHIBYTE(v17) < 0)
          operator delete(v16[0]);
        if (SHIBYTE(v20) < 0)
          operator delete(v19[0]);
        if (v13)
        {
          v4 = v8 + 1;
          v3 = (uint64_t *)v8[1];
          if (v3)
            continue;
        }
        goto LABEL_32;
      }
      if (!v11)
        goto LABEL_17;
LABEL_14:
      v3 = (uint64_t *)*v8;
      v4 = v8;
      if (!*v8)
        goto LABEL_32;
    }
  }
  v8 = (uint64_t *)(a1 + 8);
LABEL_32:
  *a2 = v8;
  return v4;
}

void sub_1003A16FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a25 < 0)
    operator delete(a20);
  _Unwind_Resume(exception_object);
}

__n128 sub_1003A1768@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  __n128 *v6;
  __n128 *v7;
  __n128 result;

  v5 = a1 + 8;
  v6 = (__n128 *)operator new(0x50uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v7 = v6 + 2;
  if (*(char *)(a2 + 23) < 0)
  {
    sub_100004678(v7, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *v7 = *(__n128 *)a2;
    v6[3].n128_u64[0] = *(_QWORD *)(a2 + 16);
  }
  result = *(__n128 *)(a2 + 32);
  v6[4] = result;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_1003A17F0(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  sub_1001DA2BC(v3, v2);
  _Unwind_Resume(a1);
}

_QWORD *sub_1003A180C(_QWORD *a1, unint64_t a2)
{
  char *v4;
  size_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_100026E2C(a1, a2);
    v4 = (char *)a1[1];
    v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_1003A1898(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_10013133C(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1003A18AC(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = 0;
  sub_1003A08FC((unsigned __int8 *)a2);
  switch(*(_BYTE *)a1)
  {
    case 1:
      v4 = sub_1003A1948(*(const void ****)(a2 + 8));
      goto LABEL_7;
    case 2:
      v4 = sub_1003A1BDC(*(uint64_t **)(a2 + 8));
      goto LABEL_7;
    case 3:
      v4 = sub_1003A1088(*(_QWORD *)(a2 + 8));
      goto LABEL_7;
    case 4:
      v4 = (uint64_t *)*(unsigned __int8 *)(a2 + 8);
      goto LABEL_7;
    case 5:
    case 6:
    case 7:
      v4 = *(uint64_t **)(a2 + 8);
LABEL_7:
      *(_QWORD *)(a1 + 8) = v4;
      break;
    default:
      break;
  }
  sub_1003A08FC((unsigned __int8 *)a1);
  return a1;
}

uint64_t *sub_1003A1948(const void ***a1)
{
  uint64_t *v2;

  v2 = (uint64_t *)operator new(0x18uLL);
  sub_1003A1990(v2, a1);
  return v2;
}

void sub_1003A197C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_1003A1990(uint64_t *a1, const void ***a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_1003A19E4(a1, *a2, a2 + 1);
  return a1;
}

void sub_1003A19CC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1003A094C(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_1003A19E4(uint64_t *result, const void **a2, const void ***a3)
{
  const void **v4;
  uint64_t **v5;
  uint64_t *v6;
  const void **v7;
  const void ***v8;
  BOOL v9;

  if (a2 != (const void **)a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = sub_1003A1A68(v5, v6, v4 + 4, (__int128 *)v4 + 2);
      v7 = (const void **)v4[1];
      if (v7)
      {
        do
        {
          v8 = (const void ***)v7;
          v7 = (const void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (const void ***)v4[2];
          v9 = *v8 == v4;
          v4 = (const void **)v8;
        }
        while (!v9);
      }
      v4 = (const void **)v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *sub_1003A1A68(uint64_t **a1, uint64_t *a2, const void **a3, __int128 *a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;
  const void **v10;

  v6 = (uint64_t **)sub_100232F70(a1, a2, &v10, &v9, a3);
  result = *v6;
  if (!*v6)
  {
    sub_1003A1AE8((uint64_t)a1, a4, (uint64_t)&v8);
    sub_1000272A8(a1, (uint64_t)v10, v6, v8);
    return v8;
  }
  return result;
}

char *sub_1003A1AE8@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  char *result;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x48uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = sub_1003A1B68(v6 + 32, a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_1003A1B4C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void *v2;
  uint64_t v3;

  *v1 = 0;
  sub_1003A0FC8(v3, v2);
  _Unwind_Resume(a1);
}

char *sub_1003A1B68(char *__dst, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    sub_100004678(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  sub_1003A18AC(__dst + 24, (char *)a2 + 24);
  return __dst;
}

void sub_1003A1BC0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1003A1BDC(uint64_t *a1)
{
  _QWORD *v2;

  v2 = operator new(0x18uLL);
  v2[1] = 0;
  v2[2] = 0;
  *v2 = 0;
  sub_1003A1C34(v2, *a1, a1[1], (a1[1] - *a1) >> 4);
  return v2;
}

void sub_1003A1C20(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1003A1C34(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    sub_10013C84C(result, a4);
    result = (_QWORD *)sub_1003A1CB8((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1003A1C98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  sub_1003A09E0(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1003A1CB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      sub_1003A18AC(a4 + v7, a2 + v7);
      v7 += 16;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_1003A1D14(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (v2)
  {
    v4 = v1 - 16;
    do
    {
      sub_1003A0870((unsigned __int8 *)(v4 + v2));
      v2 -= 16;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003A1D38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  IOPMAssertionID *v9;
  const char *v11;
  const __CFString *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const __CFString *v20;
  IOReturn v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v8 = a1;
  v9 = (IOPMAssertionID *)(a1 + 24);
  if (*(_DWORD *)(a1 + 24))
  {
    sub_1000051BC("power assertion (%u) is already taken for %s", a2, a3, a4, a5, a6, a7, a8, *(unsigned int *)(a1 + 24));
    return 1;
  }
  v11 = (const char *)a1;
  if (*(char *)(a1 + 23) < 0)
    v11 = *(const char **)a1;
  v12 = CFStringCreateWithCString(kCFAllocatorDefault, v11, 0x8000100u);
  if (v12)
  {
    v20 = v12;
    v21 = IOPMAssertionCreateWithName(CFSTR("PreventUserIdleSystemSleep"), 0xFFu, v12, v9);
    CFRelease(v20);
    if (!v21)
    {
      sub_1000051BC("Successfully taken powerAssertionId (%u) for %s", v22, v23, v24, v25, v26, v27, v28, *(unsigned int *)(v8 + 24));
      return 1;
    }
    if (*(char *)(v8 + 23) < 0)
      v8 = *(_QWORD *)v8;
    sub_10036CAF0("Failed to take powerAssertionId for %s, return value: 0x%x", v22, v23, v24, v25, v26, v27, v28, v8);
  }
  else
  {
    if (*(char *)(v8 + 23) < 0)
      v8 = *(_QWORD *)v8;
    sub_10036CAF0("Failed to create CFString for %s", v13, v14, v15, v16, v17, v18, v19, v8);
  }
  return 0;
}

unint64_t sub_1003A1E48(unsigned int a1)
{
  return ((unint64_t)((a1 >> 17) & 3) << 32) | ((unint64_t)(HIWORD(a1) & 1) << 40) | ((unint64_t)(a1 & 0x3FF) << 16) | (((a1 >> 10) & 0xFLL) << 8) | ((unsigned __int16)a1 >> 14);
}

uint64_t sub_1003A1E70(unsigned int **a1)
{
  std::runtime_error *exception;

  if ((unint64_t)((char *)a1[1] - (char *)*a1) <= 3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_100365F78(exception, "packet too short to contain a 4-byte header");
  }
  return **a1;
}

void sub_1003A1ECC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_BYTE *sub_1003A1EE0(char *__src, size_t __len, _BYTE *__dst, int a4)
{
  _BYTE *v4;
  size_t v5;

  v4 = __dst;
  v5 = __len;
  if (a4 == 1)
  {
    if (__len)
      memmove(__dst, __src, __len);
    v4 += v5;
  }
  else if (__len)
  {
    do
      *v4++ = __src[--v5];
    while (v5);
  }
  return v4;
}

void sub_1003A1F40(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  unsigned int *v3;
  uint64_t v4;
  size_t v5;
  _QWORD *v6;
  int v8;
  int v9;
  int v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  size_t v14;
  int v15;
  char *v16;
  _QWORD *v17;
  uint64_t v18;
  std::runtime_error *exception;
  uint64_t *v20;
  char v21;
  void *__p;
  _BYTE *v23;
  uint64_t v24;
  uint64_t v25;

  v3 = *(unsigned int **)a1;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = v4 - *(_QWORD *)a1;
  if (v5 > 0x30)
  {
    if (v5 >= 0x89)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      sub_100365F78(exception, "logical packet too long to split into multiple physical packets");
    }
    v8 = sub_1003A1E70((unsigned int **)a1);
    a2[1] = 0;
    a2[2] = 0;
    *a2 = 0;
    v9 = *(_DWORD *)(a1 + 8) - *(_QWORD *)a1 - 4;
    if (*(_BYTE *)(a1 + 8) - *(_QWORD *)a1 != 4)
    {
      v10 = v8;
      v11 = (char *)(*(_QWORD *)a1 + 4);
      do
      {
        v13 = *a2;
        v12 = a2[1];
        if (v9 >= 0x2Cu)
          v14 = 44;
        else
          v14 = v9;
        LOBYTE(v20) = 0;
        sub_100191910(&__p, v14 + 4, &v20);
        if (v9 <= 0x2Cu)
          v15 = 327680;
        else
          v15 = 196608;
        if (v12 == v13)
          v15 = 0x10000;
        v16 = (char *)__p;
        *(_DWORD *)__p = v10 | v15;
        memmove(v16 + 4, v11, v14);
        v17 = (_QWORD *)a2[1];
        if ((unint64_t)v17 >= a2[2])
        {
          v18 = sub_1003A24F0(a2, (uint64_t)&__p);
        }
        else
        {
          *v17 = 0;
          v17[1] = 0;
          v17[2] = 0;
          sub_1001530EC(v17, __p, (uint64_t)v23, v23 - (_BYTE *)__p);
          v18 = (uint64_t)(v17 + 3);
          a2[1] = (uint64_t)(v17 + 3);
        }
        a2[1] = v18;
        if (__p)
        {
          v23 = __p;
          operator delete(__p);
        }
        v11 += v14;
        LOBYTE(v9) = v9 - v14;
      }
      while ((_BYTE)v9);
    }
  }
  else
  {
    __p = 0;
    v23 = 0;
    v24 = 0;
    sub_1001530EC(&__p, v3, v4, v5);
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    v20 = a2;
    v21 = 0;
    v6 = operator new(0x18uLL);
    *a2 = (uint64_t)v6;
    a2[1] = (uint64_t)v6;
    a2[2] = (uint64_t)(v6 + 3);
    a2[1] = (uint64_t)sub_1003A2444((uint64_t)(a2 + 2), (uint64_t)&__p, (uint64_t)&v25, v6);
    if (__p)
    {
      v23 = __p;
      operator delete(__p);
    }
  }
}

void sub_1003A214C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  void *v12;

  __cxa_free_exception(v12);
  _Unwind_Resume(a1);
}

uint64_t sub_1003A21CC(uint64_t a1, uint64_t a2, unint64_t a3, unsigned int a4, uint64_t a5)
{
  int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  _QWORD *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  char v20;
  uint64_t v21;
  _QWORD v22[10];
  char v23;
  uint64_t v24;

  sub_100210A10((uint64_t)&v21);
  v10 = *(char *)(a1 + 23);
  if (v10 >= 0)
    v11 = a1;
  else
    v11 = *(_QWORD *)a1;
  if (v10 >= 0)
    v12 = *(unsigned __int8 *)(a1 + 23);
  else
    v12 = *(_QWORD *)(a1 + 8);
  sub_100054C60(&v21, v11, v12);
  v20 = 48;
  v13 = sub_10015BFA0(&v21, &v20);
  *(_DWORD *)((char *)v13 + *(_QWORD *)(*v13 - 24) + 8) = *(_DWORD *)((_BYTE *)v13 + *(_QWORD *)(*v13 - 24) + 8) & 0xFFFFFFB5 | 8;
  if (a3)
  {
    v14 = 0;
    do
    {
      *(_QWORD *)((char *)&v22[2] + *(_QWORD *)(v21 - 24)) = 2;
      v15 = (_QWORD *)std::ostream::operator<<(&v21, *(unsigned __int8 *)(a2 + v14));
      sub_100054C60(v15, (uint64_t)" ", 1);
      if (v14 % a4 == a4 - 1)
        sub_100054C60(&v21, (uint64_t)"\n", 1);
      ++v14;
    }
    while (a3 != v14);
  }
  if (a3 % a4)
    sub_100054C60(&v21, (uint64_t)"\n", 1);
  v16 = *(char *)(a5 + 23);
  if (v16 >= 0)
    v17 = a5;
  else
    v17 = *(_QWORD *)a5;
  if (v16 >= 0)
    v18 = *(unsigned __int8 *)(a5 + 23);
  else
    v18 = *(_QWORD *)(a5 + 8);
  sub_100054C60(&v21, v17, v18);
  std::stringbuf::str(v22);
  if (v23 < 0)
    operator delete((void *)v22[8]);
  std::streambuf::~streambuf(v22);
  return std::ios::~ios(&v24);
}

void sub_1003A23AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100210AFC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1003A23CC(uint64_t a1, uint64_t a2, unint64_t a3, unsigned int a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *p_p;
  void *__p;
  char v14;

  sub_1003A21CC(a1, a2, a3, a4, a5);
  if (v14 >= 0)
    p_p = &__p;
  else
    p_p = __p;
  sub_10036C9B0("%s", v5, v6, v7, v8, v9, v10, v11, (uint64_t)p_p);
  if (v14 < 0)
    operator delete(__p);
}

void sub_1003A2428(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1003A2444(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  _QWORD *v10;
  _QWORD *v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      sub_1001530EC(v4, *(const void **)v6, *(_QWORD *)(v6 + 8), *(_QWORD *)(v6 + 8) - *(_QWORD *)v6);
      v4 = v11 + 3;
      v11 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  v9 = 1;
  sub_1002FE544((uint64_t)v8);
  return v4;
}

void sub_1003A24DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1002FE544((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1003A24F0(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_100026E7C();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)sub_100026E90(v7, v9);
  else
    v10 = 0;
  v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v15 = v11;
  v16 = &v10[24 * v9];
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  sub_1001530EC(v11, *(const void **)a2, *(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 8) - *(_QWORD *)a2);
  v15 += 24;
  sub_1002FE578(a1, v14);
  v12 = a1[1];
  sub_10013A510((uint64_t)v14);
  return v12;
}

void sub_1003A25EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10013A510((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1003A2600(char *a1, _DWORD *__dst)
{
  _BYTE *v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  int __src;

  __dst[8] = 0;
  *(_OWORD *)__dst = 0u;
  *((_OWORD *)__dst + 1) = 0u;
  __src = 0x4000;
  v4 = sub_1003A1EE0((char *)&__src, 4uLL, __dst, 1);
  v5 = sub_1003A1EE0(a1, 0x20uLL, v4, 1);
  if (__dst + 9 >= (_DWORD *)v5)
  {
    if (__dst + 9 > (_DWORD *)v5)
      sub_1000051BC("%s: Memory bounds of array not reached. struct member not copied?", v6, v7, v8, v9, v10, v11, v12, (uint64_t)"buildHelloCommandPacket");
    if (*((_BYTE *)__dst + 35))
    {
      sub_1000051BC("%s: software version string was overrun.", v6, v7, v8, v9, v10, v11, v12, (uint64_t)"buildHelloCommandPacket");
      result = 0;
      *((_BYTE *)__dst + 35) = 0;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    sub_10036CAF0("%s: Memory bounds of array exceeded.", v6, v7, v8, v9, v10, v11, v12, (uint64_t)"buildHelloCommandPacket");
    return 1;
  }
  return result;
}

uint64_t sub_1003A26D4(uint64_t a1, _QWORD *a2, _BYTE *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  char *v9;
  _BYTE *v12;
  _BYTE *v13;
  _BYTE *v14;
  _BYTE *v15;
  _BYTE *v16;
  _BYTE *v17;
  _BYTE *v18;
  _BYTE *v19;
  _BYTE *v20;
  _BYTE *v21;
  _BYTE *v22;
  uint64_t v23;
  unint64_t i;
  unint64_t v25;
  const char *v27;
  unsigned __int8 v28;
  int __src;
  char v30;

  v8 = *(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16);
  if (v8 >= 0x11)
  {
    v9 = "Too many devices in device list in ranging config command.";
LABEL_10:
    sub_10036CAF0(v9, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8, (uint64_t)v27);
    return 1;
  }
  if (v8 <= 3)
  {
    v9 = "Not enough devices in device list in ranging config command.";
    goto LABEL_10;
  }
  a2[1] = *a2;
  v30 = 0;
  sub_1001F9D10(a2, v8 + 24, &v30);
  v12 = (_BYTE *)*a2;
  __src = 16385;
  v13 = sub_1003A1EE0((char *)&__src, 4uLL, v12, 1);
  v14 = sub_1003A1EE0((char *)a1, 2uLL, v13, 1);
  v15 = sub_1003A1EE0((char *)(a1 + 2), 1uLL, v14, 1);
  v16 = sub_1003A1EE0((char *)(a1 + 3), 1uLL, v15, 1);
  v17 = sub_1003A1EE0((char *)(a1 + 4), 2uLL, v16, 1);
  v18 = sub_1003A1EE0((char *)(a1 + 6), 2uLL, v17, 1);
  v19 = sub_1003A1EE0((char *)(a1 + 8), 1uLL, v18, 1);
  v20 = sub_1003A1EE0((char *)(a1 + 9), 1uLL, v19, 1);
  v21 = sub_1003A1EE0((char *)(a1 + 10), 1uLL, v20, 1);
  v28 = (*(_DWORD *)(a1 + 24) - *(_DWORD *)(a1 + 16)) >> 1;
  v22 = sub_1003A1EE0((char *)&v28, 1uLL, v21 + 7, 1);
  a3 = sub_1003A1EE0((char *)(a1 + 11), 1uLL, v22, 1);
  if (v28)
  {
    v23 = 0;
    for (i = 0; i < v28; ++i)
    {
      a3 = sub_1003A1EE0((char *)(*(_QWORD *)(a1 + 16) + v23), 2uLL, a3, 1);
      v23 += 2;
    }
  }
  v25 = a2[1];
  if (v25 < (unint64_t)a3)
  {
    v27 = "buildRangingConfigCommandPacket";
    v9 = "%s: Memory bounds of array exceeded.";
    goto LABEL_10;
  }
  if (v25 > (unint64_t)a3)
    sub_1000051BC("%s: Memory bounds of array not reached. struct member not copied?", (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8, (uint64_t)"buildRangingConfigCommandPacket");
  return 0;
}

uint64_t sub_1003A28D4(uint64_t a1, _QWORD *a2, _BYTE *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  char *v9;
  char *v12;
  _BYTE *v13;
  _BYTE *v14;
  _BYTE *v15;
  _BYTE *v16;
  _BYTE *v17;
  _BYTE *v18;
  _BYTE *v19;
  _BYTE *v20;
  _BYTE *v21;
  _BYTE *v22;
  _BYTE *v23;
  _BYTE *v24;
  _BYTE *v25;
  _BYTE *v26;
  _BYTE *v27;
  _BYTE *v28;
  uint64_t v29;
  unint64_t i;
  unint64_t v31;
  const char *v33;
  unsigned __int8 v34;
  int __src;
  char v36;

  v8 = *(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16);
  if (v8 >= 0x11)
  {
    v9 = "Too many devices in device list in ranging config command.";
LABEL_10:
    sub_10036CAF0(v9, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8, (uint64_t)v33);
    return 1;
  }
  if (v8 <= 3)
  {
    v9 = "Not enough devices in device list in ranging config command.";
    goto LABEL_10;
  }
  v12 = (char *)(a1 + 48);
  a2[1] = *a2;
  v36 = 0;
  sub_1001F9D10(a2, v8 + 28, &v36);
  v13 = (_BYTE *)*a2;
  __src = 16385;
  v14 = sub_1003A1EE0((char *)&__src, 4uLL, v13, 1);
  v15 = sub_1003A1EE0((char *)a1, 2uLL, v14, 1);
  v16 = sub_1003A1EE0((char *)(a1 + 2), 1uLL, v15, 1);
  v17 = sub_1003A1EE0((char *)(a1 + 3), 1uLL, v16, 1);
  v18 = sub_1003A1EE0((char *)(a1 + 4), 2uLL, v17, 1);
  v19 = sub_1003A1EE0((char *)(a1 + 6), 2uLL, v18, 1);
  v20 = sub_1003A1EE0((char *)(a1 + 8), 1uLL, v19, 1);
  v21 = sub_1003A1EE0((char *)(a1 + 9), 1uLL, v20, 1);
  v22 = sub_1003A1EE0((char *)(a1 + 10), 1uLL, v21, 1);
  v23 = sub_1003A1EE0(v12, 2uLL, v22, 1);
  v24 = sub_1003A1EE0((char *)(a1 + 50), 2uLL, v23, 1);
  v34 = (*(_DWORD *)(a1 + 24) - *(_DWORD *)(a1 + 16)) >> 1;
  v25 = sub_1003A1EE0((char *)&v34, 1uLL, v24 + 3, 1);
  v26 = sub_1003A1EE0((char *)(a1 + 11), 1uLL, v25, 1);
  v27 = sub_1003A1EE0((char *)(a1 + 52), 1uLL, v26, 1);
  v28 = sub_1003A1EE0((char *)(a1 + 53), 1uLL, v27, 1);
  a3 = sub_1003A1EE0((char *)(a1 + 54), 2uLL, v28, 1);
  if (v34)
  {
    v29 = 0;
    for (i = 0; i < v34; ++i)
    {
      a3 = sub_1003A1EE0((char *)(*(_QWORD *)(a1 + 16) + v29), 2uLL, a3, 1);
      v29 += 2;
    }
  }
  v31 = a2[1];
  if (v31 < (unint64_t)a3)
  {
    v33 = "buildRangingConfigCommandPacketR2";
    v9 = "%s: Memory bounds of array exceeded.";
    goto LABEL_10;
  }
  if (v31 > (unint64_t)a3)
    sub_1000051BC("%s: Memory bounds of array not reached. struct member not copied?", (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8, (uint64_t)"buildRangingConfigCommandPacketR2");
  return 0;
}

uint64_t sub_1003A2B3C(char *a1, _QWORD *__dst)
{
  _BYTE *v4;
  _BYTE *v5;
  _BYTE *v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int __src;

  *__dst = 0;
  __dst[1] = 0;
  *(_QWORD *)((char *)__dst + 14) = 0;
  __src = 16386;
  v4 = sub_1003A1EE0((char *)&__src, 4uLL, __dst, 1);
  v5 = sub_1003A1EE0(a1, 2uLL, v4, 1);
  v6 = sub_1003A1EE0(a1 + 8, 8uLL, v5, 1);
  v7 = sub_1003A1EE0(a1 + 16, 4uLL, v6, 1);
  v8 = sub_1003A1EE0(a1 + 20, 4uLL, v7, 1);
  if ((char *)__dst + 22 >= v8)
  {
    if ((char *)__dst + 22 > v8)
      sub_1000051BC("%s: Memory bounds of array not reached. struct member not copied?", v9, v10, v11, v12, v13, v14, v15, (uint64_t)"buildRangingEnableCommandPacket");
    return 0;
  }
  else
  {
    sub_10036CAF0("%s: Memory bounds of array exceeded.", v9, v10, v11, v12, v13, v14, v15, (uint64_t)"buildRangingEnableCommandPacket");
    return 1;
  }
}

uint64_t sub_1003A2C24(char *a1, char *__dst)
{
  _BYTE *v4;
  _BYTE *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int __src;

  *(_DWORD *)(__dst + 3) = 0;
  *(_DWORD *)__dst = 0;
  __src = 16387;
  v4 = sub_1003A1EE0((char *)&__src, 4uLL, __dst, 1);
  v5 = sub_1003A1EE0(a1, 2uLL, v4, 1);
  v6 = sub_1003A1EE0(a1 + 2, 1uLL, v5, 1);
  if (__dst + 7 >= v6)
  {
    if (__dst + 7 > v6)
      sub_1000051BC("%s: Memory bounds of array not reached. struct member not copied?", v7, v8, v9, v10, v11, v12, v13, (uint64_t)"buildRangingDisableCommandPacket");
    return 0;
  }
  else
  {
    sub_10036CAF0("%s: Memory bounds of array exceeded.", v7, v8, v9, v10, v11, v12, v13, (uint64_t)"buildRangingDisableCommandPacket");
    return 1;
  }
}

uint64_t sub_1003A2CE4(char *a1, char *__dst)
{
  _BYTE *v4;
  _BYTE *v5;
  _BYTE *v6;
  _BYTE *v7;
  _BYTE *v8;
  _BYTE *v9;
  _BYTE *v10;
  _BYTE *v11;
  _BYTE *v12;
  _BYTE *v13;
  _BYTE *v14;
  _BYTE *v15;
  _BYTE *v16;
  _BYTE *v17;
  _BYTE *v18;
  _BYTE *v19;
  _BYTE *v20;
  _BYTE *v21;
  _BYTE *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int __src;

  *(_QWORD *)(__dst + 78) = 0;
  *((_OWORD *)__dst + 3) = 0u;
  *((_OWORD *)__dst + 4) = 0u;
  *((_OWORD *)__dst + 1) = 0u;
  *((_OWORD *)__dst + 2) = 0u;
  *(_OWORD *)__dst = 0u;
  __src = 16480;
  v4 = sub_1003A1EE0((char *)&__src, 4uLL, __dst, 1);
  v5 = sub_1003A1EE0(a1, 2uLL, v4, 1);
  v6 = sub_1003A1EE0(a1 + 2, 1uLL, v5, 1);
  v7 = sub_1003A1EE0(a1 + 3, 1uLL, v6, 1);
  v8 = sub_1003A1EE0(a1 + 4, 1uLL, v7, 1);
  v9 = sub_1003A1EE0(a1 + 6, 2uLL, v8, 1);
  v10 = sub_1003A1EE0(a1 + 8, 2uLL, v9, 1);
  v11 = sub_1003A1EE0(a1 + 22, 1uLL, v10 + 12, 1);
  v12 = sub_1003A1EE0(a1 + 23, 1uLL, v11, 1);
  v13 = sub_1003A1EE0(a1 + 24, 1uLL, v12, 1);
  v14 = sub_1003A1EE0(a1 + 26, 2uLL, v13, 1);
  v15 = sub_1003A1EE0(a1 + 28, 1uLL, v14, 1);
  v16 = sub_1003A1EE0(a1 + 30, 2uLL, v15, 1);
  v17 = sub_1003A1EE0(a1 + 43, 1uLL, v16 + 11, 1);
  v18 = sub_1003A1EE0(a1 + 44, 1uLL, v17, 1);
  v19 = sub_1003A1EE0(a1 + 62, 2uLL, v18 + 16, 1);
  v20 = sub_1003A1EE0(a1 + 64, 8uLL, v19, 1);
  v21 = sub_1003A1EE0(a1 + 72, 4uLL, v20, 1);
  v22 = sub_1003A1EE0(a1 + 76, 2uLL, v21, 1);
  v23 = sub_1003A1EE0(a1 + 80, 8uLL, v22, 1);
  if (__dst + 86 >= v23)
  {
    if (__dst + 86 > v23)
      sub_1000051BC("%s: Memory bounds of array not reached. struct member not copied?", v24, v25, v26, v27, v28, v29, v30, (uint64_t)"buildTestNBAMMSRangeEnableCommandPacket");
    return 0;
  }
  else
  {
    sub_10036CAF0("%s: Memory bounds of array exceeded.", v24, v25, v26, v27, v28, v29, v30, (uint64_t)"buildTestNBAMMSRangeEnableCommandPacket");
    return 1;
  }
}

uint64_t sub_1003A2F04(_DWORD *a1, unint64_t *a2)
{
  _BYTE *v4;
  unint64_t v5;
  int v6;
  unint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  unint64_t v10;
  _BYTE *v11;
  unint64_t v12;
  unint64_t v13;
  size_t v14;
  unint64_t v15;
  char *v16;
  _BYTE *v17;
  char v18;
  char *v19;
  char *v20;
  char v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  _BYTE *v25;
  unint64_t v26;
  unint64_t v27;
  size_t v28;
  unint64_t v29;
  char *v30;
  _BYTE *v31;
  char v32;
  int __src;

  __src = 16388;
  v4 = (_BYTE *)*a2;
  v5 = a2[1] - *a2;
  if (v5 > 3)
  {
    if (v5 != 4)
      a2[1] = (unint64_t)(v4 + 4);
  }
  else
  {
    sub_10003F150(a2, 4 - v5);
    v4 = (_BYTE *)*a2;
  }
  sub_1003A1EE0((char *)&__src, 4uLL, v4, 1);
  v6 = a1[2] - *a1;
  v8 = (_BYTE *)a2[1];
  v7 = a2[2];
  if ((unint64_t)v8 >= v7)
  {
    v10 = *a2;
    v11 = &v8[-*a2];
    v12 = (unint64_t)(v11 + 1);
    if ((uint64_t)(v11 + 1) < 0)
LABEL_44:
      sub_100026E7C();
    v13 = v7 - v10;
    if (2 * v13 > v12)
      v12 = 2 * v13;
    if (v13 >= 0x3FFFFFFFFFFFFFFFLL)
      v14 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    if (v14)
      v15 = (unint64_t)operator new(v14);
    else
      v15 = 0;
    v16 = (char *)(v15 + v14);
    v11[v15] = v6;
    v9 = &v11[v15 + 1];
    if (v8 == (_BYTE *)v10)
    {
      v15 += (unint64_t)v11;
    }
    else
    {
      v17 = &v8[~v10];
      do
      {
        v18 = *--v8;
        (v17--)[v15] = v18;
      }
      while (v8 != (_BYTE *)v10);
      v8 = (_BYTE *)*a2;
    }
    *a2 = v15;
    a2[1] = (unint64_t)v9;
    a2[2] = (unint64_t)v16;
    if (v8)
      operator delete(v8);
  }
  else
  {
    *v8 = v6;
    v9 = v8 + 1;
  }
  a2[1] = (unint64_t)v9;
  v19 = *(char **)a1;
  v20 = (char *)*((_QWORD *)a1 + 1);
  if (*(char **)a1 != v20)
  {
    do
    {
      v21 = *v19;
      v22 = a2[2];
      if ((unint64_t)v9 >= v22)
      {
        v24 = *a2;
        v25 = &v9[-*a2];
        v26 = (unint64_t)(v25 + 1);
        if ((uint64_t)(v25 + 1) < 0)
          goto LABEL_44;
        v27 = v22 - v24;
        if (2 * v27 > v26)
          v26 = 2 * v27;
        if (v27 >= 0x3FFFFFFFFFFFFFFFLL)
          v28 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v28 = v26;
        if (v28)
          v29 = (unint64_t)operator new(v28);
        else
          v29 = 0;
        v30 = (char *)(v29 + v28);
        v25[v29] = v21;
        v23 = (uint64_t)&v25[v29 + 1];
        if (v9 == (_BYTE *)v24)
        {
          *a2 = (unint64_t)&v25[v29];
          a2[1] = v23;
          a2[2] = (unint64_t)v30;
        }
        else
        {
          v31 = &v9[~v24];
          do
          {
            v32 = *--v9;
            (v31--)[v29] = v32;
          }
          while (v9 != (_BYTE *)v24);
          v9 = (_BYTE *)*a2;
          *a2 = v29;
          a2[1] = v23;
          a2[2] = (unint64_t)v30;
          if (!v9)
            goto LABEL_42;
        }
        operator delete(v9);
      }
      else
      {
        *v9 = v21;
        v23 = (uint64_t)(v9 + 1);
      }
LABEL_42:
      a2[1] = v23;
      ++v19;
      v9 = (_BYTE *)v23;
    }
    while (v19 != v20);
  }
  return 0;
}

uint64_t sub_1003A3140(char **a1, unint64_t *a2)
{
  _BYTE *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _BYTE *v9;
  _BYTE *v10;
  unint64_t v11;
  _BYTE *v12;
  unint64_t v13;
  unint64_t v14;
  size_t v15;
  unint64_t v16;
  char *v17;
  _BYTE *v18;
  char v19;
  char *v20;
  char v21;
  unint64_t v22;
  _BYTE *v23;
  unint64_t v24;
  _BYTE *v25;
  unint64_t v26;
  unint64_t v27;
  size_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  _BYTE *v32;
  _BYTE *v33;
  char v34;
  int v35;
  unint64_t v36;
  _BYTE *v37;
  unint64_t v38;
  _BYTE *v39;
  unint64_t v40;
  unint64_t v41;
  size_t v42;
  unint64_t v43;
  char *v44;
  char *v45;
  _BYTE *v46;
  _BYTE *v47;
  char v48;
  char *v49;
  char *v50;
  char v51;
  unint64_t v52;
  unint64_t v53;
  _BYTE *v54;
  unint64_t v55;
  unint64_t v56;
  size_t v57;
  unint64_t v58;
  char *v59;
  _BYTE *v60;
  char v61;
  char *v62;
  int __src;

  if ((unint64_t)(a1[1] - *a1) > 0x1FE0)
    return 1;
  __src = 16389;
  v5 = (_BYTE *)*a2;
  v6 = a2[1] - *a2;
  if (v6 > 3)
  {
    if (v6 != 4)
      a2[1] = (unint64_t)(v5 + 4);
  }
  else
  {
    sub_10003F150(a2, 4 - v6);
    v5 = (_BYTE *)*a2;
  }
  sub_1003A1EE0((char *)&__src, 4uLL, v5, 1);
  v7 = a1[1] - *a1;
  v9 = (_BYTE *)a2[1];
  v8 = a2[2];
  if ((unint64_t)v9 >= v8)
  {
    v11 = *a2;
    v12 = &v9[-*a2];
    v13 = (unint64_t)(v12 + 1);
    if ((uint64_t)(v12 + 1) < 0)
LABEL_87:
      sub_100026E7C();
    v14 = v8 - v11;
    if (2 * v14 > v13)
      v13 = 2 * v14;
    if (v14 >= 0x3FFFFFFFFFFFFFFFLL)
      v15 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v15 = v13;
    if (v15)
      v16 = (unint64_t)operator new(v15);
    else
      v16 = 0;
    v17 = (char *)(v16 + v15);
    v12[v16] = v7 >> 5;
    v10 = &v12[v16 + 1];
    if (v9 == (_BYTE *)v11)
    {
      v16 += (unint64_t)v12;
    }
    else
    {
      v18 = &v9[~v11];
      do
      {
        v19 = *--v9;
        (v18--)[v16] = v19;
      }
      while (v9 != (_BYTE *)v11);
      v9 = (_BYTE *)*a2;
    }
    *a2 = v16;
    a2[1] = (unint64_t)v10;
    a2[2] = (unint64_t)v17;
    if (v9)
      operator delete(v9);
  }
  else
  {
    *v9 = v7 >> 5;
    v10 = v9 + 1;
  }
  a2[1] = (unint64_t)v10;
  v20 = *a1;
  v62 = a1[1];
  if (*a1 != v62)
  {
    while (1)
    {
      if (*((_QWORD *)v20 + 2) - *((_QWORD *)v20 + 1) > 0xFFuLL)
        return 1;
      v21 = *v20;
      v22 = a2[2];
      if ((unint64_t)v10 < v22)
      {
        *v10 = v21;
        v23 = v10 + 1;
        goto LABEL_45;
      }
      v24 = *a2;
      v25 = &v10[-*a2];
      v26 = (unint64_t)(v25 + 1);
      if ((uint64_t)(v25 + 1) < 0)
        goto LABEL_87;
      v27 = v22 - v24;
      if (2 * v27 > v26)
        v26 = 2 * v27;
      v28 = v27 >= 0x3FFFFFFFFFFFFFFFLL ? 0x7FFFFFFFFFFFFFFFLL : v26;
      v29 = v28 ? (unint64_t)operator new(v28) : 0;
      v30 = &v25[v29];
      v31 = (char *)(v29 + v28);
      v32 = &v25[v29];
      *v32 = v21;
      v23 = v32 + 1;
      if (v10 == (_BYTE *)v24)
        break;
      v33 = &v10[~v24];
      do
      {
        v34 = *--v10;
        (v33--)[v29] = v34;
      }
      while (v10 != (_BYTE *)v24);
      v10 = (_BYTE *)*a2;
      *a2 = v29;
      a2[1] = (unint64_t)v23;
      a2[2] = (unint64_t)v31;
      if (v10)
        goto LABEL_44;
LABEL_45:
      a2[1] = (unint64_t)v23;
      v35 = *((_DWORD *)v20 + 4) - *((_DWORD *)v20 + 2);
      v36 = a2[2];
      if ((unint64_t)v23 >= v36)
      {
        v38 = *a2;
        v39 = &v23[-*a2];
        v40 = (unint64_t)(v39 + 1);
        if ((uint64_t)(v39 + 1) < 0)
          goto LABEL_87;
        v41 = v36 - v38;
        if (2 * v41 > v40)
          v40 = 2 * v41;
        if (v41 >= 0x3FFFFFFFFFFFFFFFLL)
          v42 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v42 = v40;
        if (v42)
          v43 = (unint64_t)operator new(v42);
        else
          v43 = 0;
        v44 = &v39[v43];
        v45 = (char *)(v43 + v42);
        v46 = &v39[v43];
        *v46 = v35;
        v37 = v46 + 1;
        if (v23 == (_BYTE *)v38)
        {
          *a2 = (unint64_t)v44;
          a2[1] = (unint64_t)v37;
          a2[2] = (unint64_t)v45;
        }
        else
        {
          v47 = &v23[~v38];
          do
          {
            v48 = *--v23;
            (v47--)[v43] = v48;
          }
          while (v23 != (_BYTE *)v38);
          v23 = (_BYTE *)*a2;
          *a2 = v43;
          a2[1] = (unint64_t)v37;
          a2[2] = (unint64_t)v45;
          if (!v23)
            goto LABEL_63;
        }
        operator delete(v23);
      }
      else
      {
        *v23 = v35;
        v37 = v23 + 1;
      }
LABEL_63:
      a2[1] = (unint64_t)v37;
      v49 = (char *)*((_QWORD *)v20 + 1);
      v50 = (char *)*((_QWORD *)v20 + 2);
      if (v49 != v50)
      {
        while (1)
        {
          v51 = *v49;
          v52 = a2[2];
          if ((unint64_t)v37 >= v52)
          {
            v53 = *a2;
            v54 = &v37[-*a2];
            v55 = (unint64_t)(v54 + 1);
            if ((uint64_t)(v54 + 1) < 0)
              goto LABEL_87;
            v56 = v52 - v53;
            if (2 * v56 > v55)
              v55 = 2 * v56;
            if (v56 >= 0x3FFFFFFFFFFFFFFFLL)
              v57 = 0x7FFFFFFFFFFFFFFFLL;
            else
              v57 = v55;
            if (v57)
              v58 = (unint64_t)operator new(v57);
            else
              v58 = 0;
            v59 = (char *)(v58 + v57);
            v54[v58] = v51;
            v10 = &v54[v58 + 1];
            if (v37 == (_BYTE *)v53)
            {
              *a2 = (unint64_t)&v54[v58];
              a2[1] = (unint64_t)v10;
              a2[2] = (unint64_t)v59;
            }
            else
            {
              v60 = &v37[~v53];
              do
              {
                v61 = *--v37;
                (v60--)[v58] = v61;
              }
              while (v37 != (_BYTE *)v53);
              v37 = (_BYTE *)*a2;
              *a2 = v58;
              a2[1] = (unint64_t)v10;
              a2[2] = (unint64_t)v59;
              if (!v37)
                goto LABEL_82;
            }
            operator delete(v37);
          }
          else
          {
            *v37 = v51;
            v10 = v37 + 1;
          }
LABEL_82:
          a2[1] = (unint64_t)v10;
          ++v49;
          v37 = v10;
          if (v49 == v50)
            goto LABEL_85;
        }
      }
      v10 = v37;
LABEL_85:
      v20 += 32;
      if (v20 == v62)
        return 0;
    }
    *a2 = (unint64_t)v30;
    a2[1] = (unint64_t)v23;
    a2[2] = (unint64_t)v31;
LABEL_44:
    operator delete(v10);
    goto LABEL_45;
  }
  return 0;
}

uint64_t sub_1003A354C(char *a1, _WORD *__dst)
{
  _BYTE *v4;
  _BYTE *v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int __src;

  __dst[4] = 0;
  *(_QWORD *)__dst = 0;
  __src = 16390;
  v4 = sub_1003A1EE0((char *)&__src, 4uLL, __dst, 1);
  v5 = sub_1003A1EE0(a1, 1uLL, v4, 1);
  v6 = sub_1003A1EE0(a1 + 1, 1uLL, v5, 1);
  v7 = sub_1003A1EE0(a1 + 4, 4uLL, v6, 1);
  if (__dst + 5 >= (_WORD *)v7)
  {
    if (__dst + 5 > (_WORD *)v7)
      sub_1000051BC("%s: Memory bounds of array not reached. struct member not copied?", v8, v9, v10, v11, v12, v13, v14, (uint64_t)"buildSleepEnableCommandPacket");
    return 0;
  }
  else
  {
    sub_10036CAF0("%s: Memory bounds of array exceeded.", v8, v9, v10, v11, v12, v13, v14, (uint64_t)"buildSleepEnableCommandPacket");
    return 1;
  }
}

uint64_t sub_1003A3620(char *a1, _BYTE *__dst)
{
  _BYTE *v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int __src;

  __dst[4] = 0;
  *(_DWORD *)__dst = 0;
  __src = 16397;
  v4 = sub_1003A1EE0((char *)&__src, 4uLL, __dst, 1);
  v5 = sub_1003A1EE0(a1, 1uLL, v4, 1);
  if (__dst + 5 >= v5)
  {
    if (__dst + 5 > v5)
      sub_1000051BC("%s: Memory bounds of array not reached. struct member not copied?", v6, v7, v8, v9, v10, v11, v12, (uint64_t)"buildSetNBSARStateCommandPacket");
    return 0;
  }
  else
  {
    sub_10036CAF0("%s: Memory bounds of array exceeded.", v6, v7, v8, v9, v10, v11, v12, (uint64_t)"buildSetNBSARStateCommandPacket");
    return 1;
  }
}

uint64_t sub_1003A36CC(int a1, char *__dst)
{
  char *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int __src;

  *(_DWORD *)__dst = 0;
  v2 = __dst + 4;
  __src = 16467;
  v3 = sub_1003A1EE0((char *)&__src, 4uLL, __dst, 1);
  if (v2 >= v3)
  {
    if (v2 > v3)
      sub_1000051BC("%s: Memory bounds of array not reached. struct member not copied?", v4, v5, v6, v7, v8, v9, v10, (uint64_t)"buildAlishaGetCapCommandPacket");
    return 0;
  }
  else
  {
    sub_10036CAF0("%s: Memory bounds of array exceeded.", v4, v5, v6, v7, v8, v9, v10, (uint64_t)"buildAlishaGetCapCommandPacket");
    return 1;
  }
}

uint64_t sub_1003A3758(char *a1, _QWORD *__dst)
{
  _BYTE *v4;
  _BYTE *v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int __src;

  __dst[4] = 0;
  *(_OWORD *)__dst = 0u;
  *((_OWORD *)__dst + 1) = 0u;
  __src = 16466;
  v4 = sub_1003A1EE0((char *)&__src, 4uLL, __dst, 1);
  v5 = sub_1003A1EE0(a1, 4uLL, v4, 1);
  v6 = sub_1003A1EE0(a1 + 4, 0x20uLL, v5, 1);
  if (__dst + 5 >= (_QWORD *)v6)
  {
    if (__dst + 5 > (_QWORD *)v6)
      sub_1000051BC("%s: Memory bounds of array not reached. struct member not copied?", v7, v8, v9, v10, v11, v12, v13, (uint64_t)"buildAlishaDbgSetKeyCommandPacket");
    return 0;
  }
  else
  {
    sub_10036CAF0("%s: Memory bounds of array exceeded.", v7, v8, v9, v10, v11, v12, v13, (uint64_t)"buildAlishaDbgSetKeyCommandPacket");
    return 1;
  }
}

uint64_t sub_1003A381C(char *a1, char *__dst)
{
  char *v3;
  _BYTE *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int __src;

  *(_QWORD *)__dst = 0;
  v3 = __dst + 8;
  __src = 16465;
  v4 = sub_1003A1EE0((char *)&__src, 4uLL, __dst, 1);
  v5 = sub_1003A1EE0(a1, 4uLL, v4, 1);
  if (v3 >= v5)
  {
    if (v3 > v5)
      sub_1000051BC("%s: Memory bounds of array not reached. struct member not copied?", v6, v7, v8, v9, v10, v11, v12, (uint64_t)"buildAlishaGetKeyCommandPacket");
    return 0;
  }
  else
  {
    sub_10036CAF0("%s: Memory bounds of array exceeded.", v6, v7, v8, v9, v10, v11, v12, (uint64_t)"buildAlishaGetKeyCommandPacket");
    return 1;
  }
}

uint64_t sub_1003A38C0(char *a1, _OWORD *__dst)
{
  _BYTE *v4;
  _BYTE *v5;
  _BYTE *v6;
  _BYTE *v7;
  _BYTE *v8;
  _BYTE *v9;
  _BYTE *v10;
  _BYTE *v11;
  _BYTE *v12;
  _BYTE *v13;
  _BYTE *v14;
  _BYTE *v15;
  _BYTE *v16;
  _BYTE *v17;
  _BYTE *v18;
  _BYTE *v19;
  _BYTE *v20;
  _BYTE *v21;
  _BYTE *v22;
  _BYTE *v23;
  _BYTE *v24;
  _BYTE *v25;
  _BYTE *v26;
  _BYTE *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int __src;

  __dst[1] = 0u;
  __dst[2] = 0u;
  *__dst = 0u;
  __src = 16464;
  v4 = sub_1003A1EE0((char *)&__src, 4uLL, __dst, 1);
  v5 = sub_1003A1EE0(a1, 2uLL, v4, 1);
  v6 = sub_1003A1EE0(a1 + 2, 1uLL, v5, 1);
  v7 = sub_1003A1EE0(a1 + 3, 1uLL, v6, 1);
  v8 = sub_1003A1EE0(a1 + 4, 1uLL, v7, 1);
  v9 = sub_1003A1EE0(a1 + 5, 1uLL, v8, 1);
  v10 = sub_1003A1EE0(a1 + 6, 1uLL, v9, 1);
  v11 = sub_1003A1EE0(a1 + 7, 1uLL, v10, 1);
  v12 = sub_1003A1EE0(a1 + 8, 4uLL, v11, 1);
  v13 = sub_1003A1EE0(a1 + 12, 2uLL, v12, 1);
  v14 = sub_1003A1EE0(a1 + 14, 2uLL, v13, 1);
  v15 = sub_1003A1EE0(a1 + 16, 2uLL, v14, 1);
  v16 = sub_1003A1EE0(a1 + 18, 1uLL, v15, 1);
  v17 = sub_1003A1EE0(a1 + 19, 1uLL, v16, 1);
  v18 = sub_1003A1EE0(a1 + 20, 1uLL, v17, 1);
  v19 = sub_1003A1EE0(a1 + 21, 1uLL, v18, 1);
  v20 = sub_1003A1EE0(a1 + 24, 4uLL, v19, 1);
  v21 = sub_1003A1EE0(a1 + 28, 4uLL, v20, 1);
  v22 = sub_1003A1EE0(a1 + 32, 1uLL, v21, 1);
  v23 = sub_1003A1EE0(a1 + 33, 1uLL, v22, 1);
  v24 = sub_1003A1EE0(a1 + 34, 1uLL, v23, 1);
  v25 = sub_1003A1EE0(a1 + 35, 1uLL, v24, 1);
  v26 = sub_1003A1EE0(a1 + 36, 2uLL, v25, 1);
  v27 = sub_1003A1EE0(a1 + 40, 8uLL, v26, 1);
  if (__dst + 3 >= (_OWORD *)v27)
  {
    if (__dst + 3 > (_OWORD *)v27)
      sub_1000051BC("%s: Memory bounds of array not reached. struct member not copied?", v28, v29, v30, v31, v32, v33, v34, (uint64_t)"buildAlishaRangeEnableCommandPacket");
    return 0;
  }
  else
  {
    sub_10036CAF0("%s: Memory bounds of array exceeded.", v28, v29, v30, v31, v32, v33, v34, (uint64_t)"buildAlishaRangeEnableCommandPacket");
    return 1;
  }
}

uint64_t sub_1003A3B28@<X0>(int a1@<W0>, int a2@<W1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  _BYTE *v5;
  _BYTE *v6;
  _BYTE *v7;
  const char *v8;
  int v9;
  _BYTE *v10;
  _BYTE *v11;
  _BYTE *v12;
  __int128 *v14;
  __int128 *v15;
  __int128 *v16;
  __int128 v17;
  __int128 v18;
  int v19;
  __int128 v20;
  __int128 v21;
  int v22;
  __int128 v23;
  __int128 v24;
  int v25;

  v23 = 0u;
  v24 = 0u;
  v25 = 1065353216;
  v20 = 0u;
  v21 = 0u;
  v22 = 1065353216;
  v17 = 0u;
  v18 = 0u;
  v19 = 1065353216;
  v16 = &v23;
  v15 = &v20;
  v14 = &v17;
  if (a1 <= 99)
  {
    switch(a1)
    {
      case 0:
        v12 = &unk_1005AA3FF;
        if (a3 - 2 < 0xC || a3 - 998 < 2 || !a3)
          goto LABEL_153;
        if (a3 != 1)
          goto LABEL_154;
        v12 = &unk_1005A5177;
        goto LABEL_153;
      case 1:
        if (a3 > 0xD)
        {
          if (a3 - 998 >= 2)
            goto LABEL_154;
LABEL_88:
          v12 = &unk_1005B490F;
          goto LABEL_153;
        }
        if (a3 != 2)
          goto LABEL_88;
        v12 = &unk_1005AF687;
        goto LABEL_153;
      case 2:
        if (a3 > 0xD)
        {
          if (a3 - 998 >= 2)
            goto LABEL_154;
        }
        else if (a3 == 3)
        {
          v12 = &unk_1005B9B97;
LABEL_153:
          sub_1003A49F0((uint64_t *)&v16, v12);
          goto LABEL_154;
        }
        v12 = &unk_1005BEE1F;
        goto LABEL_153;
      case 3:
        v12 = &unk_1005C40A7;
        switch(a3)
        {
          case 0u:
          case 1u:
          case 2u:
          case 3u:
          case 0xBu:
          case 0xCu:
          case 0xDu:
            goto LABEL_146;
          case 4u:
            goto LABEL_153;
          case 5u:
            v12 = &unk_1005C932F;
            goto LABEL_153;
          case 6u:
            v12 = &unk_1005CE5B7;
            goto LABEL_153;
          case 7u:
            v12 = &unk_1005D383F;
            goto LABEL_153;
          case 8u:
            v12 = &unk_1005D8AC7;
            goto LABEL_153;
          case 9u:
            v12 = &unk_1005DDD4F;
            goto LABEL_153;
          case 0xAu:
            v12 = &unk_1005E2FD7;
            goto LABEL_153;
          default:
            if (a3 - 998 >= 2)
              goto LABEL_154;
LABEL_146:
            v12 = &unk_1005E825F;
            break;
        }
        goto LABEL_153;
      case 4:
        v12 = &unk_1005ED4E7;
        switch(a3)
        {
          case 0u:
          case 1u:
          case 2u:
          case 3u:
          case 0xBu:
          case 0xCu:
          case 0xDu:
            goto LABEL_142;
          case 4u:
            goto LABEL_153;
          case 5u:
            v12 = &unk_1005F276F;
            goto LABEL_153;
          case 6u:
            v12 = &unk_1005F79F7;
            goto LABEL_153;
          case 7u:
            v12 = &unk_1005FCC7F;
            goto LABEL_153;
          case 8u:
            v12 = &unk_100601F07;
            goto LABEL_153;
          case 9u:
            v12 = &unk_10060718F;
            goto LABEL_153;
          case 0xAu:
            v12 = &unk_10060C417;
            goto LABEL_153;
          default:
            if (a3 - 998 >= 2)
              goto LABEL_154;
LABEL_142:
            v12 = &unk_10061169F;
            break;
        }
        goto LABEL_153;
      case 5:
        v12 = &unk_100616927;
        switch(a3)
        {
          case 0u:
          case 1u:
          case 2u:
          case 3u:
          case 0xBu:
          case 0xCu:
          case 0xDu:
            goto LABEL_150;
          case 4u:
            goto LABEL_153;
          case 5u:
            v12 = &unk_10061BBAF;
            goto LABEL_153;
          case 6u:
            v12 = &unk_100620E37;
            goto LABEL_153;
          case 7u:
            v12 = &unk_1006260BF;
            goto LABEL_153;
          case 8u:
            v12 = &unk_10062B347;
            goto LABEL_153;
          case 9u:
            v12 = &unk_1006305CF;
            goto LABEL_153;
          case 0xAu:
            v12 = &unk_100635857;
            goto LABEL_153;
          default:
            if (a3 - 998 >= 2)
              goto LABEL_154;
LABEL_150:
            v12 = &unk_10063AADF;
            break;
        }
        goto LABEL_153;
      case 6:
        v12 = &unk_10063FD67;
        switch(a3)
        {
          case 0u:
          case 1u:
          case 2u:
          case 3u:
          case 0xBu:
          case 0xCu:
          case 0xDu:
            goto LABEL_152;
          case 4u:
            goto LABEL_153;
          case 5u:
            v12 = &unk_100644FEF;
            goto LABEL_153;
          case 6u:
            v12 = &unk_10064A277;
            goto LABEL_153;
          case 7u:
            v12 = &unk_10064F4FF;
            goto LABEL_153;
          case 8u:
            v12 = &unk_100654787;
            goto LABEL_153;
          case 9u:
            v12 = &unk_100659A0F;
            goto LABEL_153;
          case 0xAu:
            v12 = &unk_10065EC97;
            goto LABEL_153;
          default:
            if (a3 - 998 >= 2)
              goto LABEL_154;
LABEL_152:
            v12 = &unk_100663F1F;
            break;
        }
        goto LABEL_153;
      case 7:
        if (a2)
        {
          if (a2 != 1)
          {
            if (a2 != 2)
              goto LABEL_154;
            v8 = "false";
            v9 = 50622;
            goto LABEL_239;
          }
          v12 = &unk_10067DBC7;
          switch(a3)
          {
            case 0u:
            case 1u:
            case 2u:
            case 3u:
            case 4u:
            case 5u:
            case 6u:
            case 7u:
            case 8u:
            case 9u:
            case 0xAu:
              goto LABEL_125;
            case 0xBu:
              goto LABEL_153;
            case 0xCu:
              v12 = &unk_100682E4F;
              goto LABEL_153;
            case 0xDu:
              v12 = &unk_1006880D7;
              goto LABEL_153;
            default:
              if (a3 - 998 >= 2)
                goto LABEL_154;
LABEL_125:
              v12 = &unk_10068D35F;
              break;
          }
        }
        else
        {
          v12 = &unk_1006691A7;
          switch(a3)
          {
            case 0u:
            case 1u:
            case 2u:
            case 3u:
            case 4u:
            case 5u:
            case 6u:
            case 7u:
            case 8u:
            case 9u:
            case 0xAu:
              goto LABEL_127;
            case 0xBu:
              goto LABEL_153;
            case 0xCu:
              v12 = &unk_10066E42F;
              goto LABEL_153;
            case 0xDu:
              v12 = &unk_1006736B7;
              goto LABEL_153;
            default:
              if (a3 - 998 >= 2)
                goto LABEL_154;
LABEL_127:
              v12 = &unk_10067893F;
              break;
          }
        }
        goto LABEL_153;
      case 8:
        if (a2)
        {
          if (a2 != 1)
          {
            if (a2 != 2)
              goto LABEL_154;
            v8 = "false";
            v9 = 50693;
            goto LABEL_239;
          }
          v12 = &unk_1006A7007;
          switch(a3)
          {
            case 0u:
            case 1u:
            case 2u:
            case 3u:
            case 4u:
            case 5u:
            case 6u:
            case 7u:
            case 8u:
            case 9u:
            case 0xAu:
              goto LABEL_136;
            case 0xBu:
              goto LABEL_153;
            case 0xCu:
              v12 = &unk_1006AC28F;
              goto LABEL_153;
            case 0xDu:
              v12 = &unk_1006B1517;
              goto LABEL_153;
            default:
              if (a3 - 998 >= 2)
                goto LABEL_154;
LABEL_136:
              v12 = &unk_1006B679F;
              break;
          }
        }
        else
        {
          v12 = &unk_1006925E7;
          switch(a3)
          {
            case 0u:
            case 1u:
            case 2u:
            case 3u:
            case 4u:
            case 5u:
            case 6u:
            case 7u:
            case 8u:
            case 9u:
            case 0xAu:
              goto LABEL_140;
            case 0xBu:
              goto LABEL_153;
            case 0xCu:
              v12 = &unk_10069786F;
              goto LABEL_153;
            case 0xDu:
              v12 = &unk_10069CAF7;
              goto LABEL_153;
            default:
              if (a3 - 998 >= 2)
                goto LABEL_154;
LABEL_140:
              v12 = &unk_1006A1D7F;
              break;
          }
        }
        goto LABEL_153;
      case 9:
        if (a2)
        {
          if (a2 != 1)
          {
            if (a2 != 2)
              goto LABEL_154;
            v8 = "false";
            v9 = 50764;
            goto LABEL_239;
          }
          v12 = &unk_1006D0447;
          switch(a3)
          {
            case 0u:
            case 1u:
            case 2u:
            case 3u:
            case 4u:
            case 5u:
            case 6u:
            case 7u:
            case 8u:
            case 9u:
            case 0xAu:
              goto LABEL_121;
            case 0xBu:
              goto LABEL_153;
            case 0xCu:
              v12 = &unk_1006D56CF;
              goto LABEL_153;
            case 0xDu:
              v12 = &unk_1006DA957;
              goto LABEL_153;
            default:
              if (a3 - 998 >= 2)
                goto LABEL_154;
LABEL_121:
              v12 = &unk_1006DFBDF;
              break;
          }
        }
        else
        {
          v12 = &unk_1006BBA27;
          switch(a3)
          {
            case 0u:
            case 1u:
            case 2u:
            case 3u:
            case 4u:
            case 5u:
            case 6u:
            case 7u:
            case 8u:
            case 9u:
            case 0xAu:
              goto LABEL_123;
            case 0xBu:
              goto LABEL_153;
            case 0xCu:
              v12 = &unk_1006C0CAF;
              goto LABEL_153;
            case 0xDu:
              v12 = &unk_1006C5F37;
              goto LABEL_153;
            default:
              if (a3 - 998 >= 2)
                goto LABEL_154;
LABEL_123:
              v12 = &unk_1006CB1BF;
              break;
          }
        }
        goto LABEL_153;
      case 10:
        if (a2)
        {
          if (a2 != 1)
          {
            if (a2 != 2)
              goto LABEL_154;
            v8 = "false";
            v9 = 50835;
            goto LABEL_239;
          }
          v12 = &unk_1006F9887;
          switch(a3)
          {
            case 0u:
            case 1u:
            case 2u:
            case 3u:
            case 4u:
            case 5u:
            case 6u:
            case 7u:
            case 8u:
            case 9u:
            case 0xAu:
              goto LABEL_134;
            case 0xBu:
              goto LABEL_153;
            case 0xCu:
              v12 = &unk_1006FEB0F;
              goto LABEL_153;
            case 0xDu:
              v12 = &unk_100703D97;
              goto LABEL_153;
            default:
              if (a3 - 998 >= 2)
                goto LABEL_154;
LABEL_134:
              v12 = &unk_10070901F;
              break;
          }
        }
        else
        {
          v12 = &unk_1006E4E67;
          switch(a3)
          {
            case 0u:
            case 1u:
            case 2u:
            case 3u:
            case 4u:
            case 5u:
            case 6u:
            case 7u:
            case 8u:
            case 9u:
            case 0xAu:
              goto LABEL_138;
            case 0xBu:
              goto LABEL_153;
            case 0xCu:
              v12 = &unk_1006EA0EF;
              goto LABEL_153;
            case 0xDu:
              v12 = &unk_1006EF377;
              goto LABEL_153;
            default:
              if (a3 - 998 >= 2)
                goto LABEL_154;
LABEL_138:
              v12 = &unk_1006F45FF;
              break;
          }
        }
        goto LABEL_153;
      case 11:
        v7 = &unk_10070E2A7;
        goto LABEL_100;
      case 12:
        v7 = &unk_100710BEF;
        goto LABEL_100;
      case 13:
        v7 = &unk_100713537;
        goto LABEL_100;
      case 14:
        v7 = &unk_100715E7F;
LABEL_100:
        if (a3 >= 0xE && a3 - 998 >= 2)
          goto LABEL_154;
        goto LABEL_101;
      case 15:
        sub_1003A4CC8((uint64_t *)&v16, byte_10047E0D4);
        sub_1003A4E34((uint64_t *)&v15, byte_10049229C);
        v6 = &unk_1004923D0;
        goto LABEL_132;
      case 16:
        sub_1003A4CC8((uint64_t *)&v16, byte_10049265E);
        sub_1003A4E34((uint64_t *)&v15, byte_1004A6826);
        v6 = &unk_1004A695A;
        goto LABEL_132;
      case 17:
      case 23:
        sub_1003A4CC8((uint64_t *)&v16, byte_100520D24);
        sub_1003A4E34((uint64_t *)&v15, byte_100534EEC);
        v6 = &unk_100535020;
        goto LABEL_132;
      case 18:
        sub_1003A4CC8((uint64_t *)&v16, byte_1005352AE);
        sub_1003A4E34((uint64_t *)&v15, byte_100549476);
        v6 = &unk_1005495AA;
        goto LABEL_132;
      case 19:
        if (a2)
        {
          if (a2 != 1)
          {
            if (a2 != 2)
              goto LABEL_154;
            v8 = "false";
            v9 = 50982;
            goto LABEL_239;
          }
          sub_1003A4CC8((uint64_t *)&v16, byte_1004BB172);
          sub_1003A4E34((uint64_t *)&v15, byte_1004CF33A);
          v6 = &unk_1004CF46E;
        }
        else
        {
          sub_1003A4CC8((uint64_t *)&v16, byte_1004A6BE8);
          sub_1003A4E34((uint64_t *)&v15, byte_1004BADB0);
          v6 = &unk_1004BAEE4;
        }
        goto LABEL_132;
      case 20:
        if (a2)
        {
          if (a2 != 1)
          {
            if (a2 != 2)
              goto LABEL_154;
            v8 = "false";
            v9 = 51010;
            goto LABEL_239;
          }
          sub_1003A4CC8((uint64_t *)&v16, byte_1004E3C86);
          sub_1003A4E34((uint64_t *)&v15, byte_1004F7E4E);
          v6 = &unk_1004F7F82;
        }
        else
        {
          sub_1003A4CC8((uint64_t *)&v16, byte_1004CF6FC);
          sub_1003A4E34((uint64_t *)&v15, byte_1004E38C4);
          v6 = &unk_1004E39F8;
        }
LABEL_132:
        sub_1003A4FA4((uint64_t *)&v14, v6);
        goto LABEL_154;
      case 21:
        sub_1003A4CC8((uint64_t *)&v16, byte_1004F8210);
        sub_1003A4E34((uint64_t *)&v15, byte_10050C3D8);
        v6 = &unk_10050C50C;
        goto LABEL_132;
      case 22:
        sub_1003A4CC8((uint64_t *)&v16, byte_10050C79A);
        sub_1003A4E34((uint64_t *)&v15, byte_100520962);
        v6 = &unk_100520A96;
        goto LABEL_132;
      default:
        goto LABEL_154;
    }
  }
  if (a1 <= 199)
  {
    switch(a1)
    {
      case 'd':
        if (!a3)
        {
          v5 = &unk_1007187C7;
LABEL_59:
          sub_1003A5114((uint64_t *)&v16, v5);
          goto LABEL_154;
        }
        v8 = "accessoryType == AccessoryType::NO_ACCESSORY";
        v9 = 51051;
        break;
      case 'e':
        if (!a3)
        {
          v5 = &unk_100719C6F;
          goto LABEL_59;
        }
        v8 = "accessoryType == AccessoryType::NO_ACCESSORY";
        v9 = 51056;
        break;
      case 'f':
        if (!a3)
        {
          v5 = &unk_10071B117;
          goto LABEL_59;
        }
        v8 = "accessoryType == AccessoryType::NO_ACCESSORY";
        v9 = 51061;
        break;
      case 'g':
        if (!a3)
        {
          v5 = &unk_10071C5BF;
          goto LABEL_59;
        }
        v8 = "accessoryType == AccessoryType::NO_ACCESSORY";
        v9 = 51066;
        break;
      case 'h':
        if (!a3)
        {
          v5 = &unk_10071DA67;
          goto LABEL_59;
        }
        v8 = "accessoryType == AccessoryType::NO_ACCESSORY";
        v9 = 51071;
        break;
      case 'i':
        if (!a3)
        {
          v5 = &unk_10071EF0F;
          goto LABEL_59;
        }
        v8 = "accessoryType == AccessoryType::NO_ACCESSORY";
        v9 = 51076;
        break;
      case 'j':
        if (!a3)
        {
          v5 = &unk_1007203B7;
          goto LABEL_59;
        }
        v8 = "accessoryType == AccessoryType::NO_ACCESSORY";
        v9 = 51081;
        break;
      case 'k':
        if (!a3)
        {
          v5 = &unk_10072185F;
          goto LABEL_59;
        }
        v8 = "accessoryType == AccessoryType::NO_ACCESSORY";
        v9 = 51086;
        break;
      case 'l':
        if (!a3)
        {
          v11 = &unk_100722D07;
          goto LABEL_66;
        }
        v8 = "accessoryType == AccessoryType::NO_ACCESSORY";
        v9 = 51091;
        break;
      case 'm':
        if (!a3)
        {
          v11 = &unk_100723D8F;
          goto LABEL_66;
        }
        v8 = "accessoryType == AccessoryType::NO_ACCESSORY";
        v9 = 51096;
        break;
      case 'n':
        if (!a3)
        {
          v11 = &unk_100724E17;
          goto LABEL_66;
        }
        v8 = "accessoryType == AccessoryType::NO_ACCESSORY";
        v9 = 51101;
        break;
      case 'o':
        if (!a3)
        {
          v11 = &unk_100725E9F;
LABEL_66:
          sub_1003A5280((uint64_t *)&v16, v11);
          goto LABEL_154;
        }
        v8 = "accessoryType == AccessoryType::NO_ACCESSORY";
        v9 = 51106;
        break;
      case 'p':
        if (!a3)
        {
          v11 = &unk_100726F27;
          goto LABEL_66;
        }
        v8 = "accessoryType == AccessoryType::NO_ACCESSORY";
        v9 = 51111;
        break;
      case 'q':
        if (!a3)
        {
          sub_1003A53EC((uint64_t *)&v16, byte_100549838);
          sub_1003A5558((uint64_t *)&v15, byte_100553920);
          v10 = &unk_1005539BC;
          goto LABEL_114;
        }
        v8 = "accessoryType == AccessoryType::NO_ACCESSORY";
        v9 = 51116;
        break;
      case 'r':
        if (!a3)
        {
          sub_1003A53EC((uint64_t *)&v16, byte_100553B06);
          sub_1003A5558((uint64_t *)&v15, byte_10055DBEE);
          v10 = &unk_10055DC8A;
          goto LABEL_114;
        }
        v8 = "accessoryType == AccessoryType::NO_ACCESSORY";
        v9 = 51125;
        break;
      case 's':
        if (!a3)
        {
          sub_1003A53EC((uint64_t *)&v16, byte_10055DDD4);
          sub_1003A5558((uint64_t *)&v15, byte_100567EBC);
          v10 = &unk_100567F58;
          goto LABEL_114;
        }
        v8 = "accessoryType == AccessoryType::NO_ACCESSORY";
        v9 = 51134;
        break;
      case 't':
        if (!a3)
        {
          sub_1003A53EC((uint64_t *)&v16, byte_1005680A2);
          sub_1003A5558((uint64_t *)&v15, byte_10057218A);
          v10 = &unk_100572226;
LABEL_114:
          sub_1003A5698((uint64_t *)&v14, v10);
          goto LABEL_154;
        }
        v8 = "accessoryType == AccessoryType::NO_ACCESSORY";
        v9 = 51143;
        break;
      case 'u':
        if (!a3)
        {
          sub_1003A53EC((uint64_t *)&v16, byte_100572370);
          sub_1003A5558((uint64_t *)&v15, byte_10057C458);
          v10 = &unk_10057C4F4;
          goto LABEL_114;
        }
        v8 = "accessoryType == AccessoryType::NO_ACCESSORY";
        v9 = 51152;
        break;
      case 'v':
        if (!a3)
        {
          sub_1003A53EC((uint64_t *)&v16, byte_10057C63E);
          sub_1003A5558((uint64_t *)&v15, byte_100586726);
          v10 = &unk_1005867C2;
          goto LABEL_114;
        }
        v8 = "accessoryType == AccessoryType::NO_ACCESSORY";
        v9 = 51161;
        break;
      case 'w':
        if (!a3)
        {
          sub_1003A53EC((uint64_t *)&v16, byte_10058690C);
          sub_1003A5558((uint64_t *)&v15, byte_1005909F4);
          v10 = &unk_100590A90;
          goto LABEL_114;
        }
        v8 = "accessoryType == AccessoryType::NO_ACCESSORY";
        v9 = 51170;
        break;
      case 'x':
        if (!a3)
        {
          sub_1003A53EC((uint64_t *)&v16, byte_100590BDA);
          sub_1003A5558((uint64_t *)&v15, byte_10059ACC2);
          v10 = &unk_10059AD5E;
          goto LABEL_114;
        }
        v8 = "accessoryType == AccessoryType::NO_ACCESSORY";
        v9 = 51179;
        break;
      case 'y':
        if (!a3)
        {
          sub_1003A53EC((uint64_t *)&v16, byte_10059AEA8);
          sub_1003A5558((uint64_t *)&v15, byte_1005A4F90);
          v10 = &unk_1005A502C;
          goto LABEL_114;
        }
        v8 = "accessoryType == AccessoryType::NO_ACCESSORY";
        v9 = 51188;
        break;
      default:
        goto LABEL_154;
    }
LABEL_239:
    __assert_rtn("ConstructRegulatoryTxPowerTableMap", "roseRegulatoryCompliancePowerTables.cpp", v9, v8);
  }
  if (a1 > 996)
  {
    if ((a1 == 997 || a1 == 999) && a3)
    {
      v8 = "accessoryType == AccessoryType::NO_ACCESSORY";
      v9 = 51208;
      goto LABEL_239;
    }
  }
  else
  {
    if (a1 == 200)
    {
      if (!a3)
      {
        sub_1003A5808((uint64_t *)&v16);
        goto LABEL_154;
      }
      v8 = "accessoryType == AccessoryType::NO_ACCESSORY";
      v9 = 51197;
      goto LABEL_239;
    }
    if (a1 != 201)
      goto LABEL_154;
    if (a3)
    {
      v8 = "accessoryType == AccessoryType::NO_ACCESSORY";
      v9 = 51202;
      goto LABEL_239;
    }
    v7 = &unk_100728C17;
LABEL_101:
    sub_1003A4B5C((uint64_t *)&v16, v7);
  }
LABEL_154:
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  *(_DWORD *)(a4 + 32) = 1065353216;
  *(_BYTE *)(a4 + 40) = 0;
  *(_BYTE *)(a4 + 80) = 0;
  *(_BYTE *)(a4 + 88) = 0;
  *(_BYTE *)(a4 + 128) = 0;
  if (&v23 != (__int128 *)a4)
  {
    *(_DWORD *)(a4 + 32) = v25;
    sub_1003A610C((_QWORD *)a4, (_QWORD *)v24, 0);
  }
  if (*((_QWORD *)&v21 + 1))
    sub_1003A5958(a4 + 40, (uint64_t)&v20);
  if (*((_QWORD *)&v18 + 1))
    sub_1003A59B4(a4 + 88, (uint64_t)&v17);
  sub_1001D8E8C((uint64_t)&v17);
  sub_1001D8E8C((uint64_t)&v20);
  return sub_1001D8E8C((uint64_t)&v23);
}

void sub_1003A49BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  sub_10038FAF8(v5);
  sub_1001D8E8C((uint64_t)va);
  sub_1001D8E8C((uint64_t)va1);
  sub_1001D8E8C(v6 - 80);
  _Unwind_Resume(a1);
}

void sub_1003A49F0(uint64_t *a1, _BYTE *a2)
{
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t *v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;

  v3 = 0;
  v4 = a2;
  v23 = a2;
  do
  {
    v5 = 0;
    v6 = (uint64_t)&a2[2641 * v3 + 1];
    v7 = v6;
    do
    {
      v8 = *a1;
      v24 = v4;
      v9 = sub_1003A5A10(v8, v4, (uint64_t)&unk_100472CF8, &v24);
      v10 = (uint64_t *)v9[4];
      v11 = v9[5];
      if ((unint64_t)v10 >= v11)
      {
        v13 = v9[3];
        v14 = ((uint64_t)v10 - v13) >> 3;
        if ((unint64_t)(v14 + 1) >> 61)
          sub_100026E7C();
        v15 = v11 - v13;
        v16 = v15 >> 2;
        if (v15 >> 2 <= (unint64_t)(v14 + 1))
          v16 = v14 + 1;
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
          v17 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v17 = v16;
        if (v17)
          v18 = (char *)sub_10005538C((uint64_t)(v9 + 5), v17);
        else
          v18 = 0;
        v19 = (uint64_t *)&v18[8 * v14];
        *v19 = v7;
        v12 = v19 + 1;
        v21 = (char *)v9[3];
        v20 = (char *)v9[4];
        if (v20 != v21)
        {
          do
          {
            v22 = *((_QWORD *)v20 - 1);
            v20 -= 8;
            *--v19 = v22;
          }
          while (v20 != v21);
          v20 = (char *)v9[3];
        }
        v9[3] = v19;
        v9[4] = v12;
        v9[5] = &v18[8 * v17];
        if (v20)
          operator delete(v20);
      }
      else
      {
        *v10 = v7;
        v12 = v10 + 1;
      }
      v9[4] = v12;
      ++v5;
      v7 = v6 + 33 * v5;
    }
    while (v5 != 80);
    ++v3;
    a2 = v23;
    v4 = &v23[2641 * v3];
  }
  while (v3 != 8);
}

void sub_1003A4B5C(uint64_t *a1, _BYTE *a2)
{
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t *v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;

  v3 = 0;
  v4 = a2;
  v23 = a2;
  do
  {
    v5 = 0;
    v6 = (uint64_t)&a2[1321 * v3 + 1];
    v7 = v6;
    do
    {
      v8 = *a1;
      v24 = v4;
      v9 = sub_1003A5A10(v8, v4, (uint64_t)&unk_100472CF8, &v24);
      v10 = (uint64_t *)v9[4];
      v11 = v9[5];
      if ((unint64_t)v10 >= v11)
      {
        v13 = v9[3];
        v14 = ((uint64_t)v10 - v13) >> 3;
        if ((unint64_t)(v14 + 1) >> 61)
          sub_100026E7C();
        v15 = v11 - v13;
        v16 = v15 >> 2;
        if (v15 >> 2 <= (unint64_t)(v14 + 1))
          v16 = v14 + 1;
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
          v17 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v17 = v16;
        if (v17)
          v18 = (char *)sub_10005538C((uint64_t)(v9 + 5), v17);
        else
          v18 = 0;
        v19 = (uint64_t *)&v18[8 * v14];
        *v19 = v7;
        v12 = v19 + 1;
        v21 = (char *)v9[3];
        v20 = (char *)v9[4];
        if (v20 != v21)
        {
          do
          {
            v22 = *((_QWORD *)v20 - 1);
            v20 -= 8;
            *--v19 = v22;
          }
          while (v20 != v21);
          v20 = (char *)v9[3];
        }
        v9[3] = v19;
        v9[4] = v12;
        v9[5] = &v18[8 * v17];
        if (v20)
          operator delete(v20);
      }
      else
      {
        *v10 = v7;
        v12 = v10 + 1;
      }
      v9[4] = v12;
      ++v5;
      v7 = v6 + 33 * v5;
    }
    while (v5 != 40);
    ++v3;
    a2 = v23;
    v4 = &v23[1321 * v3];
  }
  while (v3 != 8);
}

void sub_1003A4CC8(uint64_t *a1, _BYTE *a2)
{
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t *v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;

  v3 = 0;
  v4 = a2;
  v23 = a2;
  do
  {
    v5 = 0;
    v6 = (uint64_t)&a2[10297 * v3 + 1];
    v7 = v6;
    do
    {
      v8 = *a1;
      v24 = v4;
      v9 = sub_1003A5A10(v8, v4, (uint64_t)&unk_100472CF8, &v24);
      v10 = (uint64_t *)v9[4];
      v11 = v9[5];
      if ((unint64_t)v10 >= v11)
      {
        v13 = v9[3];
        v14 = ((uint64_t)v10 - v13) >> 3;
        if ((unint64_t)(v14 + 1) >> 61)
          sub_100026E7C();
        v15 = v11 - v13;
        v16 = v15 >> 2;
        if (v15 >> 2 <= (unint64_t)(v14 + 1))
          v16 = v14 + 1;
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
          v17 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v17 = v16;
        if (v17)
          v18 = (char *)sub_10005538C((uint64_t)(v9 + 5), v17);
        else
          v18 = 0;
        v19 = (uint64_t *)&v18[8 * v14];
        *v19 = v7;
        v12 = v19 + 1;
        v21 = (char *)v9[3];
        v20 = (char *)v9[4];
        if (v20 != v21)
        {
          do
          {
            v22 = *((_QWORD *)v20 - 1);
            v20 -= 8;
            *--v19 = v22;
          }
          while (v20 != v21);
          v20 = (char *)v9[3];
        }
        v9[3] = v19;
        v9[4] = v12;
        v9[5] = &v18[8 * v17];
        if (v20)
          operator delete(v20);
      }
      else
      {
        *v10 = v7;
        v12 = v10 + 1;
      }
      v9[4] = v12;
      ++v5;
      v7 = v6 + 33 * v5;
    }
    while (v5 != 312);
    ++v3;
    a2 = v23;
    v4 = &v23[10297 * v3];
  }
  while (v3 != 8);
}

void sub_1003A4E34(uint64_t *a1, _BYTE *a2)
{
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t *v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t v24;
  _BYTE *v25;

  v3 = 0;
  v4 = a2;
  v23 = a2;
  do
  {
    v5 = 0;
    v24 = v3;
    v6 = (uint64_t)&a2[77 * v3 + 1];
    v7 = v6;
    do
    {
      v8 = *a1;
      v25 = v4;
      v9 = sub_1003A5C64(v8, v4, (uint64_t)&unk_100472CF8, &v25);
      v10 = (uint64_t *)v9[4];
      v11 = v9[5];
      if ((unint64_t)v10 >= v11)
      {
        v13 = v9[3];
        v14 = ((uint64_t)v10 - v13) >> 3;
        if ((unint64_t)(v14 + 1) >> 61)
          sub_100026E7C();
        v15 = v11 - v13;
        v16 = v15 >> 2;
        if (v15 >> 2 <= (unint64_t)(v14 + 1))
          v16 = v14 + 1;
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
          v17 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v17 = v16;
        if (v17)
          v18 = (char *)sub_10005538C((uint64_t)(v9 + 5), v17);
        else
          v18 = 0;
        v19 = (uint64_t *)&v18[8 * v14];
        *v19 = v7;
        v12 = v19 + 1;
        v21 = (char *)v9[3];
        v20 = (char *)v9[4];
        if (v20 != v21)
        {
          do
          {
            v22 = *((_QWORD *)v20 - 1);
            v20 -= 8;
            *--v19 = v22;
          }
          while (v20 != v21);
          v20 = (char *)v9[3];
        }
        v9[3] = v19;
        v9[4] = v12;
        v9[5] = &v18[8 * v17];
        if (v20)
          operator delete(v20);
      }
      else
      {
        *v10 = v7;
        v12 = v10 + 1;
      }
      v9[4] = v12;
      ++v5;
      v7 = v6 + 38 * v5;
    }
    while (v5 != 2);
    a2 = v23;
    v3 = v24 + 1;
    v4 = &v23[77 * v24 + 77];
  }
  while (v24 != 3);
}

void sub_1003A4FA4(uint64_t *a1, _BYTE *a2)
{
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t *v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t v24;
  _BYTE *v25;

  v3 = 0;
  v4 = a2;
  v23 = a2;
  do
  {
    v5 = 0;
    v24 = v3;
    v6 = (uint64_t)&a2[109 * v3 + 1];
    v7 = v6;
    do
    {
      v8 = *a1;
      v25 = v4;
      v9 = sub_1003A5EB8(v8, v4, (uint64_t)&unk_100472CF8, &v25);
      v10 = (uint64_t *)v9[4];
      v11 = v9[5];
      if ((unint64_t)v10 >= v11)
      {
        v13 = v9[3];
        v14 = ((uint64_t)v10 - v13) >> 3;
        if ((unint64_t)(v14 + 1) >> 61)
          sub_100026E7C();
        v15 = v11 - v13;
        v16 = v15 >> 2;
        if (v15 >> 2 <= (unint64_t)(v14 + 1))
          v16 = v14 + 1;
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
          v17 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v17 = v16;
        if (v17)
          v18 = (char *)sub_10005538C((uint64_t)(v9 + 5), v17);
        else
          v18 = 0;
        v19 = (uint64_t *)&v18[8 * v14];
        *v19 = v7;
        v12 = v19 + 1;
        v21 = (char *)v9[3];
        v20 = (char *)v9[4];
        if (v20 != v21)
        {
          do
          {
            v22 = *((_QWORD *)v20 - 1);
            v20 -= 8;
            *--v19 = v22;
          }
          while (v20 != v21);
          v20 = (char *)v9[3];
        }
        v9[3] = v19;
        v9[4] = v12;
        v9[5] = &v18[8 * v17];
        if (v20)
          operator delete(v20);
      }
      else
      {
        *v10 = v7;
        v12 = v10 + 1;
      }
      v9[4] = v12;
      ++v5;
      v7 = v6 + 18 * v5;
    }
    while (v5 != 6);
    a2 = v23;
    v3 = v24 + 1;
    v4 = &v23[109 * v24 + 109];
  }
  while (v24 != 5);
}

void sub_1003A5114(uint64_t *a1, _BYTE *a2)
{
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t *v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;

  v3 = 0;
  v4 = a2;
  v23 = a2;
  do
  {
    v5 = 0;
    v6 = (uint64_t)&a2[661 * v3 + 1];
    v7 = v6;
    do
    {
      v8 = *a1;
      v24 = v4;
      v9 = sub_1003A5A10(v8, v4, (uint64_t)&unk_100472CF8, &v24);
      v10 = (uint64_t *)v9[4];
      v11 = v9[5];
      if ((unint64_t)v10 >= v11)
      {
        v13 = v9[3];
        v14 = ((uint64_t)v10 - v13) >> 3;
        if ((unint64_t)(v14 + 1) >> 61)
          sub_100026E7C();
        v15 = v11 - v13;
        v16 = v15 >> 2;
        if (v15 >> 2 <= (unint64_t)(v14 + 1))
          v16 = v14 + 1;
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
          v17 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v17 = v16;
        if (v17)
          v18 = (char *)sub_10005538C((uint64_t)(v9 + 5), v17);
        else
          v18 = 0;
        v19 = (uint64_t *)&v18[8 * v14];
        *v19 = v7;
        v12 = v19 + 1;
        v21 = (char *)v9[3];
        v20 = (char *)v9[4];
        if (v20 != v21)
        {
          do
          {
            v22 = *((_QWORD *)v20 - 1);
            v20 -= 8;
            *--v19 = v22;
          }
          while (v20 != v21);
          v20 = (char *)v9[3];
        }
        v9[3] = v19;
        v9[4] = v12;
        v9[5] = &v18[8 * v17];
        if (v20)
          operator delete(v20);
      }
      else
      {
        *v10 = v7;
        v12 = v10 + 1;
      }
      v9[4] = v12;
      ++v5;
      v7 = v6 + 33 * v5;
    }
    while (v5 != 20);
    ++v3;
    a2 = v23;
    v4 = &v23[661 * v3];
  }
  while (v3 != 8);
}

void sub_1003A5280(uint64_t *a1, _BYTE *a2)
{
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t *v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;

  v3 = 0;
  v4 = a2;
  v23 = a2;
  do
  {
    v5 = 0;
    v6 = (uint64_t)&a2[529 * v3 + 1];
    v7 = v6;
    do
    {
      v8 = *a1;
      v24 = v4;
      v9 = sub_1003A5A10(v8, v4, (uint64_t)&unk_100472CF8, &v24);
      v10 = (uint64_t *)v9[4];
      v11 = v9[5];
      if ((unint64_t)v10 >= v11)
      {
        v13 = v9[3];
        v14 = ((uint64_t)v10 - v13) >> 3;
        if ((unint64_t)(v14 + 1) >> 61)
          sub_100026E7C();
        v15 = v11 - v13;
        v16 = v15 >> 2;
        if (v15 >> 2 <= (unint64_t)(v14 + 1))
          v16 = v14 + 1;
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
          v17 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v17 = v16;
        if (v17)
          v18 = (char *)sub_10005538C((uint64_t)(v9 + 5), v17);
        else
          v18 = 0;
        v19 = (uint64_t *)&v18[8 * v14];
        *v19 = v7;
        v12 = v19 + 1;
        v21 = (char *)v9[3];
        v20 = (char *)v9[4];
        if (v20 != v21)
        {
          do
          {
            v22 = *((_QWORD *)v20 - 1);
            v20 -= 8;
            *--v19 = v22;
          }
          while (v20 != v21);
          v20 = (char *)v9[3];
        }
        v9[3] = v19;
        v9[4] = v12;
        v9[5] = &v18[8 * v17];
        if (v20)
          operator delete(v20);
      }
      else
      {
        *v10 = v7;
        v12 = v10 + 1;
      }
      v9[4] = v12;
      ++v5;
      v7 = v6 + 33 * v5;
    }
    while (v5 != 16);
    ++v3;
    a2 = v23;
    v4 = &v23[529 * v3];
  }
  while (v3 != 8);
}

void sub_1003A53EC(uint64_t *a1, _BYTE *a2)
{
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t *v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;

  v3 = 0;
  v4 = a2;
  v23 = a2;
  do
  {
    v5 = 0;
    v6 = (uint64_t)&a2[5149 * v3 + 1];
    v7 = v6;
    do
    {
      v8 = *a1;
      v24 = v4;
      v9 = sub_1003A5A10(v8, v4, (uint64_t)&unk_100472CF8, &v24);
      v10 = (uint64_t *)v9[4];
      v11 = v9[5];
      if ((unint64_t)v10 >= v11)
      {
        v13 = v9[3];
        v14 = ((uint64_t)v10 - v13) >> 3;
        if ((unint64_t)(v14 + 1) >> 61)
          sub_100026E7C();
        v15 = v11 - v13;
        v16 = v15 >> 2;
        if (v15 >> 2 <= (unint64_t)(v14 + 1))
          v16 = v14 + 1;
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
          v17 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v17 = v16;
        if (v17)
          v18 = (char *)sub_10005538C((uint64_t)(v9 + 5), v17);
        else
          v18 = 0;
        v19 = (uint64_t *)&v18[8 * v14];
        *v19 = v7;
        v12 = v19 + 1;
        v21 = (char *)v9[3];
        v20 = (char *)v9[4];
        if (v20 != v21)
        {
          do
          {
            v22 = *((_QWORD *)v20 - 1);
            v20 -= 8;
            *--v19 = v22;
          }
          while (v20 != v21);
          v20 = (char *)v9[3];
        }
        v9[3] = v19;
        v9[4] = v12;
        v9[5] = &v18[8 * v17];
        if (v20)
          operator delete(v20);
      }
      else
      {
        *v10 = v7;
        v12 = v10 + 1;
      }
      v9[4] = v12;
      ++v5;
      v7 = v6 + 33 * v5;
    }
    while (v5 != 156);
    ++v3;
    a2 = v23;
    v4 = &v23[5149 * v3];
  }
  while (v3 != 8);
}

void sub_1003A5558(uint64_t *a1, _BYTE *a2)
{
  _BYTE *v2;
  uint64_t i;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  _BYTE *v21;

  v2 = a2;
  for (i = 0; i != 4; a2 = &v2[39 * i])
  {
    v5 = (uint64_t)&v2[39 * i + 1];
    v6 = *a1;
    v21 = a2;
    v7 = sub_1003A5C64(v6, a2, (uint64_t)&unk_100472CF8, &v21);
    v8 = (uint64_t *)v7[4];
    v9 = v7[5];
    if ((unint64_t)v8 >= v9)
    {
      v11 = v7[3];
      v12 = ((uint64_t)v8 - v11) >> 3;
      if ((unint64_t)(v12 + 1) >> 61)
        sub_100026E7C();
      v13 = v9 - v11;
      v14 = v13 >> 2;
      if (v13 >> 2 <= (unint64_t)(v12 + 1))
        v14 = v12 + 1;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v15 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v15 = v14;
      if (v15)
        v16 = (char *)sub_10005538C((uint64_t)(v7 + 5), v15);
      else
        v16 = 0;
      v17 = (uint64_t *)&v16[8 * v12];
      *v17 = v5;
      v10 = v17 + 1;
      v19 = (char *)v7[3];
      v18 = (char *)v7[4];
      if (v18 != v19)
      {
        do
        {
          v20 = *((_QWORD *)v18 - 1);
          v18 -= 8;
          *--v17 = v20;
        }
        while (v18 != v19);
        v18 = (char *)v7[3];
      }
      v7[3] = v17;
      v7[4] = v10;
      v7[5] = &v16[8 * v15];
      if (v18)
        operator delete(v18);
    }
    else
    {
      *v8 = v5;
      v10 = v8 + 1;
    }
    v7[4] = v10;
    ++i;
  }
}

void sub_1003A5698(uint64_t *a1, _BYTE *a2)
{
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t *v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t v24;
  _BYTE *v25;

  v3 = 0;
  v4 = a2;
  v23 = a2;
  do
  {
    v5 = 0;
    v24 = v3;
    v6 = (uint64_t)&a2[55 * v3 + 1];
    v7 = v6;
    do
    {
      v8 = *a1;
      v25 = v4;
      v9 = sub_1003A5EB8(v8, v4, (uint64_t)&unk_100472CF8, &v25);
      v10 = (uint64_t *)v9[4];
      v11 = v9[5];
      if ((unint64_t)v10 >= v11)
      {
        v13 = v9[3];
        v14 = ((uint64_t)v10 - v13) >> 3;
        if ((unint64_t)(v14 + 1) >> 61)
          sub_100026E7C();
        v15 = v11 - v13;
        v16 = v15 >> 2;
        if (v15 >> 2 <= (unint64_t)(v14 + 1))
          v16 = v14 + 1;
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
          v17 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v17 = v16;
        if (v17)
          v18 = (char *)sub_10005538C((uint64_t)(v9 + 5), v17);
        else
          v18 = 0;
        v19 = (uint64_t *)&v18[8 * v14];
        *v19 = v7;
        v12 = v19 + 1;
        v21 = (char *)v9[3];
        v20 = (char *)v9[4];
        if (v20 != v21)
        {
          do
          {
            v22 = *((_QWORD *)v20 - 1);
            v20 -= 8;
            *--v19 = v22;
          }
          while (v20 != v21);
          v20 = (char *)v9[3];
        }
        v9[3] = v19;
        v9[4] = v12;
        v9[5] = &v18[8 * v17];
        if (v20)
          operator delete(v20);
      }
      else
      {
        *v10 = v7;
        v12 = v10 + 1;
      }
      v9[4] = v12;
      ++v5;
      v7 = v6 + 18 * v5;
    }
    while (v5 != 3);
    a2 = v23;
    v3 = v24 + 1;
    v4 = &v23[55 * v24 + 55];
  }
  while (v24 != 5);
}

void sub_1003A5808(uint64_t *a1)
{
  _BYTE *v2;
  _BYTE *v3;
  _BYTE *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  _BYTE *v20;

  v2 = &unk_100727FAF;
  do
  {
    v3 = v2 + 1;
    v4 = v2 + 397;
    do
    {
      v5 = *a1;
      v20 = v2;
      v6 = sub_1003A5A10(v5, v2, (uint64_t)&unk_100472CF8, &v20);
      v7 = (_QWORD *)v6[4];
      v8 = v6[5];
      if ((unint64_t)v7 >= v8)
      {
        v10 = v6[3];
        v11 = ((uint64_t)v7 - v10) >> 3;
        if ((unint64_t)(v11 + 1) >> 61)
          sub_100026E7C();
        v12 = v8 - v10;
        v13 = v12 >> 2;
        if (v12 >> 2 <= (unint64_t)(v11 + 1))
          v13 = v11 + 1;
        if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
          v14 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v14 = v13;
        if (v14)
          v15 = (char *)sub_10005538C((uint64_t)(v6 + 5), v14);
        else
          v15 = 0;
        v16 = &v15[8 * v11];
        *(_QWORD *)v16 = v3;
        v9 = v16 + 8;
        v18 = (char *)v6[3];
        v17 = (char *)v6[4];
        if (v17 != v18)
        {
          do
          {
            v19 = *((_QWORD *)v17 - 1);
            v17 -= 8;
            *((_QWORD *)v16 - 1) = v19;
            v16 -= 8;
          }
          while (v17 != v18);
          v17 = (char *)v6[3];
        }
        v6[3] = v16;
        v6[4] = v9;
        v6[5] = &v15[8 * v14];
        if (v17)
          operator delete(v17);
      }
      else
      {
        *v7 = v3;
        v9 = v7 + 1;
      }
      v6[4] = v9;
      v3 += 33;
    }
    while (v3 != v4);
    v2 += 397;
  }
  while (v4 != (_BYTE *)&unk_100728C17);
}

uint64_t sub_1003A5958(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 40))
  {
    if (a1 != a2)
    {
      *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
      sub_1003A6820((_QWORD *)a1, *(_QWORD **)(a2 + 16), 0);
    }
  }
  else
  {
    sub_100392FD8(a1, a2);
    *(_BYTE *)(a1 + 40) = 1;
  }
  return a1;
}

uint64_t sub_1003A59B4(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 40))
  {
    if (a1 != a2)
    {
      *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
      sub_1003A6A60((_QWORD *)a1, *(_QWORD **)(a2 + 16), 0);
    }
  }
  else
  {
    sub_10039337C(a1, a2);
    *(_BYTE *)(a1 + 40) = 1;
  }
  return a1;
}

_QWORD *sub_1003A5A10(uint64_t a1, unsigned __int8 *a2, uint64_t a3, _BYTE **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  void **v10;
  _QWORD *v11;
  unint64_t v12;
  _QWORD *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = ((_DWORD)v8 - 1) & v7;
    }
    v10 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (*((unsigned __int8 *)v11 + 16) == (_DWORD)v7)
              return v11;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
  v13 = (_QWORD *)(a1 + 16);
  v11 = operator new(0x30uLL);
  *v11 = 0;
  v11[1] = v7;
  *((_BYTE *)v11 + 16) = **a4;
  v11[4] = 0;
  v11[5] = 0;
  v11[3] = 0;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    v16 = 1;
    if (v8 >= 3)
      v16 = (v8 & (v8 - 1)) != 0;
    v17 = v16 | (2 * v8);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      v19 = v18;
    else
      v19 = v17;
    sub_10002A900(a1, v19);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = ((_DWORD)v8 - 1) & v7;
    }
  }
  v20 = *(_QWORD *)a1;
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v21)
  {
    *v11 = *v21;
LABEL_38:
    *v21 = v11;
    goto LABEL_39;
  }
  *v11 = *v13;
  *v13 = v11;
  *(_QWORD *)(v20 + 8 * v4) = v13;
  if (*v11)
  {
    v22 = *(_QWORD *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v22 >= v8)
        v22 %= v8;
    }
    else
    {
      v22 &= v8 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v11;
}

void sub_1003A5C48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  _QWORD *v10;
  uint64_t v11;

  sub_100392F30(v11, v10);
  _Unwind_Resume(a1);
}

_QWORD *sub_1003A5C64(uint64_t a1, unsigned __int8 *a2, uint64_t a3, _BYTE **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  void **v10;
  _QWORD *v11;
  unint64_t v12;
  _QWORD *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = ((_DWORD)v8 - 1) & v7;
    }
    v10 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (*((unsigned __int8 *)v11 + 16) == (_DWORD)v7)
              return v11;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
  v13 = (_QWORD *)(a1 + 16);
  v11 = operator new(0x30uLL);
  *v11 = 0;
  v11[1] = v7;
  *((_BYTE *)v11 + 16) = **a4;
  v11[4] = 0;
  v11[5] = 0;
  v11[3] = 0;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    v16 = 1;
    if (v8 >= 3)
      v16 = (v8 & (v8 - 1)) != 0;
    v17 = v16 | (2 * v8);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      v19 = v18;
    else
      v19 = v17;
    sub_10002A900(a1, v19);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = ((_DWORD)v8 - 1) & v7;
    }
  }
  v20 = *(_QWORD *)a1;
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v21)
  {
    *v11 = *v21;
LABEL_38:
    *v21 = v11;
    goto LABEL_39;
  }
  *v11 = *v13;
  *v13 = v11;
  *(_QWORD *)(v20 + 8 * v4) = v13;
  if (*v11)
  {
    v22 = *(_QWORD *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v22 >= v8)
        v22 %= v8;
    }
    else
    {
      v22 &= v8 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v11;
}

void sub_1003A5E9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  _QWORD *v10;
  uint64_t v11;

  sub_100392F30(v11, v10);
  _Unwind_Resume(a1);
}

_QWORD *sub_1003A5EB8(uint64_t a1, unsigned __int8 *a2, uint64_t a3, _BYTE **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  void **v10;
  _QWORD *v11;
  unint64_t v12;
  _QWORD *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = ((_DWORD)v8 - 1) & v7;
    }
    v10 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (*((unsigned __int8 *)v11 + 16) == (_DWORD)v7)
              return v11;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
  v13 = (_QWORD *)(a1 + 16);
  v11 = operator new(0x30uLL);
  *v11 = 0;
  v11[1] = v7;
  *((_BYTE *)v11 + 16) = **a4;
  v11[4] = 0;
  v11[5] = 0;
  v11[3] = 0;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    v16 = 1;
    if (v8 >= 3)
      v16 = (v8 & (v8 - 1)) != 0;
    v17 = v16 | (2 * v8);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      v19 = v18;
    else
      v19 = v17;
    sub_10002A900(a1, v19);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = ((_DWORD)v8 - 1) & v7;
    }
  }
  v20 = *(_QWORD *)a1;
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v21)
  {
    *v11 = *v21;
LABEL_38:
    *v21 = v11;
    goto LABEL_39;
  }
  *v11 = *v13;
  *v13 = v11;
  *(_QWORD *)(v20 + 8 * v4) = v13;
  if (*v11)
  {
    v22 = *(_QWORD *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v22 >= v8)
        v22 %= v8;
    }
    else
    {
      v22 &= v8 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v11;
}

void sub_1003A60F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  _QWORD *v10;
  uint64_t v11;

  sub_100392F30(v11, v10);
  _Unwind_Resume(a1);
}

void sub_1003A610C(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t v6;
  uint64_t i;
  _QWORD *v8;
  BOOL v9;
  _QWORD *v10;
  unint64_t v11;
  _QWORD *v12;
  _BYTE *v13[2];

  v4 = a2;
  v6 = a1[1];
  if (v6)
  {
    for (i = 0; i != v6; ++i)
      *(_QWORD *)(*a1 + 8 * i) = 0;
    v8 = (_QWORD *)a1[2];
    a1[2] = 0;
    a1[3] = 0;
    if (v8)
      v9 = a2 == a3;
    else
      v9 = 1;
    if (v9)
    {
      v10 = v8;
    }
    else
    {
      do
      {
        v13[0] = v8 + 2;
        v13[1] = v8 + 3;
        sub_1003A6230(v13, (uint64_t)(v4 + 2));
        v10 = (_QWORD *)*v8;
        v11 = *((unsigned __int8 *)v8 + 16);
        v8[1] = v11;
        v12 = (_QWORD *)sub_1003A627C((uint64_t)a1, v11, (unsigned __int8 *)v8 + 16);
        sub_1003A63D0(a1, v8, v12);
        v4 = (_QWORD *)*v4;
        if (!v10)
          break;
        v8 = v10;
      }
      while (v4 != a3);
    }
    sub_1001D8EC4((int)a1, v10);
  }
  while (v4 != a3)
  {
    sub_1003A6704(a1, (uint64_t)(v4 + 2));
    v4 = (_QWORD *)*v4;
  }
}

void sub_1003A6200(void *a1)
{
  int v1;
  _QWORD *v2;

  __cxa_begin_catch(a1);
  sub_1001D8EC4(v1, v2);
  __cxa_rethrow();
}

void sub_1003A621C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_BYTE **sub_1003A6230(_BYTE **a1, uint64_t a2)
{
  char *v3;
  _BYTE *v4;

  v4 = *a1;
  v3 = a1[1];
  *v4 = *(_BYTE *)a2;
  if (v3 != (char *)(a2 + 8))
    sub_100144F58(v3, *(char **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 3);
  return a1;
}

uint64_t sub_1003A627C(uint64_t a1, unint64_t a2, unsigned __int8 *a3)
{
  unint64_t v6;
  float v7;
  float v8;
  uint64_t v9;
  _BOOL8 v10;
  size_t v11;
  unint64_t v12;
  size_t v13;
  uint8x8_t v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t result;
  unint64_t v19;
  unint64_t v20;
  _BOOL4 v21;
  int v22;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v8 = *(float *)(a1 + 32);
  if (!v6 || (float)(v8 * (float)v6) < v7)
  {
    v9 = 2 * v6;
    v10 = v6 < 3 || (v6 & (v6 - 1)) != 0;
    v11 = v10 | v9;
    v12 = vcvtps_u32_f32(v7 / v8);
    if (v11 <= v12)
      v13 = v12;
    else
      v13 = v11;
    sub_1003A64B8(a1, v13);
    v6 = *(_QWORD *)(a1 + 8);
  }
  v14 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
  v14.i16[0] = vaddlv_u8(v14);
  if (v14.u32[0] > 1uLL)
  {
    v15 = a2;
    if (v6 <= a2)
      v15 = a2 % v6;
  }
  else
  {
    v15 = (v6 - 1) & a2;
  }
  v16 = *(_QWORD *)(*(_QWORD *)a1 + 8 * v15);
  if (!v16)
    return 0;
  v17 = 0;
  do
  {
    result = v16;
    v16 = *(_QWORD *)v16;
    if (!v16)
      break;
    v19 = *(_QWORD *)(v16 + 8);
    if (v14.u32[0] > 1uLL)
    {
      v20 = *(_QWORD *)(v16 + 8);
      if (v19 >= v6)
        v20 = v19 % v6;
    }
    else
    {
      v20 = v19 & (v6 - 1);
    }
    if (v20 != v15)
      break;
    v21 = v19 == a2 && *(unsigned __int8 *)(v16 + 16) == *a3;
    v22 = v17 & !v21;
    v17 |= v21;
  }
  while (v22 != 1);
  return result;
}

_QWORD *sub_1003A63D0(_QWORD *result, _QWORD *a2, _QWORD *a3)
{
  int8x8_t v3;
  unint64_t v4;
  uint8x8_t v5;
  unint64_t v6;

  v3 = (int8x8_t)result[1];
  v4 = a2[1];
  v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(_QWORD *)&v3)
      v4 %= *(_QWORD *)&v3;
  }
  else
  {
    v4 &= *(_QWORD *)&v3 - 1;
  }
  if (!a3)
  {
    *a2 = result[2];
    result[2] = a2;
    *(_QWORD *)(*result + 8 * v4) = result + 2;
    if (!*a2)
      goto LABEL_19;
    v6 = *(_QWORD *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v6 >= *(_QWORD *)&v3)
        v6 %= *(_QWORD *)&v3;
    }
    else
    {
      v6 &= *(_QWORD *)&v3 - 1;
    }
LABEL_18:
    *(_QWORD *)(*result + 8 * v6) = a2;
    goto LABEL_19;
  }
  *a2 = *a3;
  *a3 = a2;
  if (*a2)
  {
    v6 = *(_QWORD *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v6 >= *(_QWORD *)&v3)
        v6 %= *(_QWORD *)&v3;
    }
    else
    {
      v6 &= *(_QWORD *)&v3 - 1;
    }
    if (v6 != v4)
      goto LABEL_18;
  }
LABEL_19:
  ++result[3];
  return result;
}

void sub_1003A64B8(uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  unint64_t v5;
  uint8x8_t v6;
  uint64_t v7;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(_QWORD *)&v4)
    goto LABEL_16;
  if (prime < *(_QWORD *)&v4)
  {
    v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v4 < 3uLL || (v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      v5 = std::__next_prime(v5);
    }
    else
    {
      v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2)
        v5 = v7;
    }
    if (prime <= v5)
      prime = v5;
    if (prime < *(_QWORD *)&v4)
LABEL_16:
      sub_1003A6594(a1, prime);
  }
}

void sub_1003A6594(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t **v7;
  unint64_t v8;
  uint8x8_t v9;
  void *v10;
  uint64_t *i;
  unint64_t v12;
  uint64_t *v13;
  _QWORD *v14;

  if (a2)
  {
    if (a2 >> 61)
      sub_1000260B0();
    v4 = operator new(8 * a2);
    v5 = *(void **)a1;
    *(_QWORD *)a1 = v4;
    if (v5)
      operator delete(v5);
    v6 = 0;
    *(_QWORD *)(a1 + 8) = a2;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    v7 = *(uint64_t ***)(a1 + 16);
    if (v7)
    {
      v8 = (unint64_t)v7[1];
      v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2)
          v8 %= a2;
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v8) = a1 + 16;
      for (i = *v7; *v7; i = *v7)
      {
        v12 = i[1];
        if (v9.u32[0] > 1uLL)
        {
          if (v12 >= a2)
            v12 %= a2;
        }
        else
        {
          v12 &= a2 - 1;
        }
        if (v12 == v8)
        {
          v7 = (uint64_t **)i;
        }
        else
        {
          v13 = i;
          if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v12))
          {
            do
            {
              v14 = v13;
              v13 = (uint64_t *)*v13;
            }
            while (v13 && *((unsigned __int8 *)i + 16) == *((unsigned __int8 *)v13 + 16));
            *v7 = v13;
            *v14 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v12);
            **(_QWORD **)(*(_QWORD *)a1 + 8 * v12) = i;
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v12) = v7;
            v7 = (uint64_t **)i;
            v8 = v12;
          }
        }
      }
    }
  }
  else
  {
    v10 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v10)
      operator delete(v10);
    *(_QWORD *)(a1 + 8) = 0;
  }
}

_QWORD *sub_1003A6704(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  unsigned __int8 *v5;
  _QWORD *v6;
  _QWORD v8[3];

  sub_1003A6780((uint64_t)a1, a2, (uint64_t)v8);
  v3 = (_QWORD *)v8[0];
  v5 = (unsigned __int8 *)(v8[0] + 16);
  v4 = *(unsigned __int8 *)(v8[0] + 16);
  *(_QWORD *)(v8[0] + 8) = v4;
  v6 = (_QWORD *)sub_1003A627C((uint64_t)a1, v4, v5);
  sub_1003A63D0(a1, v3, v6);
  return v3;
}

void sub_1003A675C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _QWORD *__p, uint64_t a11)
{
  if (__p)
    sub_100392F30((uint64_t)&a11, __p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1003A6780@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  _QWORD *result;

  v5 = a1 + 16;
  v6 = operator new(0x30uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  *v6 = 0;
  v6[1] = 0;
  *((_BYTE *)v6 + 16) = *(_BYTE *)a2;
  v6[4] = 0;
  v6[5] = 0;
  v6[3] = 0;
  result = sub_1002106A0(v6 + 3, *(const void **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 3);
  *(_BYTE *)(a3 + 16) = 1;
  v6[1] = *((unsigned __int8 *)v6 + 16);
  return result;
}

void sub_1003A6804(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *v1 = 0;
  sub_100392F30(v3, v2);
  _Unwind_Resume(a1);
}

void sub_1003A6820(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t v6;
  uint64_t i;
  _QWORD *v8;
  BOOL v9;
  _QWORD *v10;
  unint64_t v11;
  _QWORD *v12;
  _BYTE *v13[2];

  v4 = a2;
  v6 = a1[1];
  if (v6)
  {
    for (i = 0; i != v6; ++i)
      *(_QWORD *)(*a1 + 8 * i) = 0;
    v8 = (_QWORD *)a1[2];
    a1[2] = 0;
    a1[3] = 0;
    if (v8)
      v9 = a2 == a3;
    else
      v9 = 1;
    if (v9)
    {
      v10 = v8;
    }
    else
    {
      do
      {
        v13[0] = v8 + 2;
        v13[1] = v8 + 3;
        sub_1003A6230(v13, (uint64_t)(v4 + 2));
        v10 = (_QWORD *)*v8;
        v11 = *((unsigned __int8 *)v8 + 16);
        v8[1] = v11;
        v12 = (_QWORD *)sub_1003A627C((uint64_t)a1, v11, (unsigned __int8 *)v8 + 16);
        sub_1003A63D0(a1, v8, v12);
        v4 = (_QWORD *)*v4;
        if (!v10)
          break;
        v8 = v10;
      }
      while (v4 != a3);
    }
    sub_1001D8EC4((int)a1, v10);
  }
  while (v4 != a3)
  {
    sub_1003A6944(a1, (uint64_t)(v4 + 2));
    v4 = (_QWORD *)*v4;
  }
}

void sub_1003A6914(void *a1)
{
  int v1;
  _QWORD *v2;

  __cxa_begin_catch(a1);
  sub_1001D8EC4(v1, v2);
  __cxa_rethrow();
}

void sub_1003A6930(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_QWORD *sub_1003A6944(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  unsigned __int8 *v5;
  _QWORD *v6;
  _QWORD v8[3];

  sub_1003A69C0((uint64_t)a1, a2, (uint64_t)v8);
  v3 = (_QWORD *)v8[0];
  v5 = (unsigned __int8 *)(v8[0] + 16);
  v4 = *(unsigned __int8 *)(v8[0] + 16);
  *(_QWORD *)(v8[0] + 8) = v4;
  v6 = (_QWORD *)sub_1003A627C((uint64_t)a1, v4, v5);
  sub_1003A63D0(a1, v3, v6);
  return v3;
}

void sub_1003A699C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _QWORD *__p, uint64_t a11)
{
  if (__p)
    sub_100392F30((uint64_t)&a11, __p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1003A69C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  _QWORD *result;

  v5 = a1 + 16;
  v6 = operator new(0x30uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  *v6 = 0;
  v6[1] = 0;
  *((_BYTE *)v6 + 16) = *(_BYTE *)a2;
  v6[4] = 0;
  v6[5] = 0;
  v6[3] = 0;
  result = sub_100210718(v6 + 3, *(const void **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 3);
  *(_BYTE *)(a3 + 16) = 1;
  v6[1] = *((unsigned __int8 *)v6 + 16);
  return result;
}

void sub_1003A6A44(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *v1 = 0;
  sub_100392F30(v3, v2);
  _Unwind_Resume(a1);
}

void sub_1003A6A60(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t v6;
  uint64_t i;
  _QWORD *v8;
  BOOL v9;
  _QWORD *v10;
  unint64_t v11;
  _QWORD *v12;
  _BYTE *v13[2];

  v4 = a2;
  v6 = a1[1];
  if (v6)
  {
    for (i = 0; i != v6; ++i)
      *(_QWORD *)(*a1 + 8 * i) = 0;
    v8 = (_QWORD *)a1[2];
    a1[2] = 0;
    a1[3] = 0;
    if (v8)
      v9 = a2 == a3;
    else
      v9 = 1;
    if (v9)
    {
      v10 = v8;
    }
    else
    {
      do
      {
        v13[0] = v8 + 2;
        v13[1] = v8 + 3;
        sub_1003A6230(v13, (uint64_t)(v4 + 2));
        v10 = (_QWORD *)*v8;
        v11 = *((unsigned __int8 *)v8 + 16);
        v8[1] = v11;
        v12 = (_QWORD *)sub_1003A627C((uint64_t)a1, v11, (unsigned __int8 *)v8 + 16);
        sub_1003A63D0(a1, v8, v12);
        v4 = (_QWORD *)*v4;
        if (!v10)
          break;
        v8 = v10;
      }
      while (v4 != a3);
    }
    sub_1001D8EC4((int)a1, v10);
  }
  while (v4 != a3)
  {
    sub_1003A6B84(a1, (uint64_t)(v4 + 2));
    v4 = (_QWORD *)*v4;
  }
}

void sub_1003A6B54(void *a1)
{
  int v1;
  _QWORD *v2;

  __cxa_begin_catch(a1);
  sub_1001D8EC4(v1, v2);
  __cxa_rethrow();
}

void sub_1003A6B70(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_QWORD *sub_1003A6B84(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  unsigned __int8 *v5;
  _QWORD *v6;
  _QWORD v8[3];

  sub_1003A6C00((uint64_t)a1, a2, (uint64_t)v8);
  v3 = (_QWORD *)v8[0];
  v5 = (unsigned __int8 *)(v8[0] + 16);
  v4 = *(unsigned __int8 *)(v8[0] + 16);
  *(_QWORD *)(v8[0] + 8) = v4;
  v6 = (_QWORD *)sub_1003A627C((uint64_t)a1, v4, v5);
  sub_1003A63D0(a1, v3, v6);
  return v3;
}

void sub_1003A6BDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _QWORD *__p, uint64_t a11)
{
  if (__p)
    sub_100392F30((uint64_t)&a11, __p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1003A6C00@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  _QWORD *result;

  v5 = a1 + 16;
  v6 = operator new(0x30uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  *v6 = 0;
  v6[1] = 0;
  *((_BYTE *)v6 + 16) = *(_BYTE *)a2;
  v6[4] = 0;
  v6[5] = 0;
  v6[3] = 0;
  result = sub_100210790(v6 + 3, *(const void **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 3);
  *(_BYTE *)(a3 + 16) = 1;
  v6[1] = *((unsigned __int8 *)v6 + 16);
  return result;
}

void sub_1003A6C84(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *v1 = 0;
  sub_100392F30(v3, v2);
  _Unwind_Resume(a1);
}

void sub_1003A6CA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  unsigned __int8 v9;
  int v10;
  _QWORD *v13;
  unsigned int v14;
  unint64_t v15;
  int v16;
  _QWORD *v17;
  const std::locale::facet *v18;
  uint64_t v19;
  _QWORD *v20;
  const std::locale::facet *v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  const std::locale::facet *v28;
  uint64_t v29;
  unsigned int *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *__p[2];
  char v50;
  std::locale v51;
  char v52;
  _QWORD v53[2];
  uint64_t v54;
  _QWORD v55[10];
  char v56;
  uint64_t v57;
  int v58;
  __int16 v59;

  v9 = atomic_load((unsigned __int8 *)(a1 + 1177));
  if ((v9 & 1) != 0)
  {
    sub_1000051BC("packetReceived: ignoring packet because fIgnorePacketsUntilFirmwareDownloaded == true", a2, a3, a4, a5, a6, a7, a8, a9);
  }
  else
  {
    v10 = a3;
    if (*(_BYTE *)(a1 + 1176))
    {
      std::mutex::lock((std::mutex *)(a1 + 8));
      v13 = (_QWORD *)(a1 + 72);
      if (v10)
        sub_1003A7910((uint64_t)v13, a2);
      else
        sub_1003A79B0(v13, a2);
      std::mutex::unlock((std::mutex *)(a1 + 8));
    }
    else
    {
      v14 = sub_1003A1E70((unsigned int **)a2);
      v15 = sub_1003A1E48(v14);
      v16 = v15;
      v58 = v15;
      v59 = WORD2(v15);
      if (sub_10036AE28(*(_DWORD *)(a1 + 1180), 5))
      {
        sub_1000537E4((uint64_t)v53);
        v17 = sub_100054C60(&v54, (uint64_t)"===========", 11);
        std::ios_base::getloc((const std::ios_base *)((char *)v17 + *(_QWORD *)(*v17 - 24)));
        v18 = std::locale::use_facet(&v51, &std::ctype<char>::id);
        v19 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v18->__vftable[2].~facet_0)(v18, 10);
        std::locale::~locale(&v51);
        std::ostream::put(v17, v19);
        std::ostream::flush(v17);
        v20 = sub_100054C60(&v54, (uint64_t)"RX Packet:", 10);
        std::ios_base::getloc((const std::ios_base *)((char *)v20 + *(_QWORD *)(*v20 - 24)));
        v21 = std::locale::use_facet(&v51, &std::ctype<char>::id);
        v22 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v21->__vftable[2].~facet_0)(v21, 10);
        std::locale::~locale(&v51);
        std::ostream::put(v20, v22);
        std::ostream::flush(v20);
        LOBYTE(v51.__locale_) = 48;
        v23 = sub_10015BFA0(&v54, (char *)&v51);
        *(_DWORD *)((char *)v23 + *(_QWORD *)(*v23 - 24) + 8) = *(_DWORD *)((_BYTE *)v23 + *(_QWORD *)(*v23 - 24)
                                                                                           + 8) & 0xFFFFFFB5 | 8;
        v24 = sub_100054C60(&v54, (uint64_t)"Message Type: ", 14);
        *(_QWORD *)((char *)v24 + *(_QWORD *)(*v24 - 24) + 24) = 2;
        std::ostream::operator<<(v24, v16);
        v25 = sub_100054C60(&v54, (uint64_t)" Group ID: ", 11);
        *(_QWORD *)((char *)v25 + *(_QWORD *)(*v25 - 24) + 24) = 2;
        std::ostream::operator<<(v25, BYTE1(v16));
        v26 = sub_100054C60(&v54, (uint64_t)" Message ID: ", 13);
        *(_QWORD *)((char *)v26 + *(_QWORD *)(*v26 - 24) + 24) = 2;
        v27 = (_QWORD *)std::ostream::operator<<(v26, HIWORD(v16));
        std::ios_base::getloc((const std::ios_base *)((char *)v27 + *(_QWORD *)(*v27 - 24)));
        v28 = std::locale::use_facet(&v51, &std::ctype<char>::id);
        v29 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v28->__vftable[2].~facet_0)(v28, 10);
        std::locale::~locale(&v51);
        std::ostream::put(v27, v29);
        std::ostream::flush(v27);
        std::stringbuf::str(v55);
        v30 = *(unsigned int **)a2;
        v31 = *(_QWORD *)(a2 + 8);
        sub_10000BF04(__p, "===========\n");
        sub_1003A23CC((uint64_t)&v51, (uint64_t)v30, v31 - (_QWORD)v30, 4u, (uint64_t)__p);
        if (v50 < 0)
          operator delete(__p[0]);
        if (v52 < 0)
          operator delete(v51.__locale_);
        *(_QWORD *)((char *)v53
        v54 = v32;
        if (v56 < 0)
          operator delete((void *)v55[8]);
        std::streambuf::~streambuf(v55);
        std::ios::~ios(&v57);
      }
      if (sub_10036A964((unsigned __int8 *)&v58))
      {
        v40 = sub_10036A978((unsigned __int8 *)&v58);
        switch(v40)
        {
          case 3:
            if (v10)
              sub_10036CAF0("Unexpected event received", v41, v42, v43, v44, v45, v46, v47, v48);
            sub_1003A7B1C(a1, (uint64_t)&v58, (_QWORD *)a2);
            break;
          case 2:
            if ((v10 & 1) == 0)
              sub_10036CAF0("Unexpected response received", v41, v42, v43, v44, v45, v46, v47, v48);
            sub_1003A7A60(a1, (uint64_t)&v58, a2);
            break;
          case 1:
            sub_10036CAF0("Packet received with unexpected message type 0x%02x (command), groupId 0x%02x, messageId 0x%02x", v41, v42, v43, v44, v45, v46, v47, v58);
            break;
          default:
            sub_10036CAF0("Packet received with unknown message type 0x%02x, groupId 0x%02x, messageId 0x%02x, isResponse %u", v41, v42, v43, v44, v45, v46, v47, v58);
            break;
        }
      }
      else
      {
        sub_10036CAF0("Packet received with unknown message type 0x%02x, groupId 0x%02x, messageId 0x%02x", v33, v34, v35, v36, v37, v38, v39, v58);
      }
    }
  }
}

void sub_1003A7128(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, std::locale a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25)
{
  if (a18 < 0)
    operator delete(__p);
  if (a24 < 0)
    operator delete(a19.__locale_);
  sub_100053910((uint64_t)&a25);
  _Unwind_Resume(a1);
}

void sub_1003A71A8(uint64_t a1, __int128 *a2)
{
  __int128 v2;

  v2 = *a2;
  sub_100365D40((_QWORD *)(a1 + 600), &v2);
}

void sub_1003A71D4(std::mutex *this)
{
  void *sig;
  void *v3;
  std::__shared_weak_count *v4;

  sig = (void *)this[2].__m_.__sig;
  if (sig)
  {
    *(_QWORD *)this[2].__m_.__opaque = sig;
    operator delete(sig);
  }
  v3 = *(void **)&this[1].__m_.__opaque[32];
  if (v3)
  {
    *(_QWORD *)&this[1].__m_.__opaque[40] = v3;
    operator delete(v3);
  }
  v4 = *(std::__shared_weak_count **)this[1].__m_.__opaque;
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  std::mutex::~mutex(this);
}

void sub_1003A7220(std::mutex *this)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)this[1].__m_.__opaque;
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  std::mutex::~mutex(this);
}

void sub_1003A724C(uint64_t a1)
{
  __int128 __p;

  *(_QWORD *)a1 = off_100818568;
  *(_QWORD *)(a1 + 8) = 850045863;
  *(_QWORD *)(a1 + 120) = 850045863;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_QWORD *)(a1 + 232) = 850045863;
  *(_QWORD *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_QWORD *)(a1 + 224) = 0;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 281) = 0u;
  sub_10000BF04(&__p, "RoseCommunicationMgrQueue");
  sub_100361524(a1 + 304, &__p);
}

void sub_1003A7548(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::mutex *a9, std::mutex *a10, std::mutex *a11, std::mutex *a12, std::mutex *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,char *a24,char a25,uint64_t a26,uint64_t a27,char *a28)
{
  uint64_t v28;
  char *v29;
  uint64_t v30;
  std::thread *v31;
  _QWORD *v32;
  char *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;

  v34 = a24;
  if (a24 == v29)
  {
    v35 = 4;
    v34 = &a21;
  }
  else
  {
    if (!a24)
      goto LABEL_6;
    v35 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v34 + 8 * v35))();
LABEL_6:
  v36 = a28;
  if (a28 == &a25)
  {
    v37 = 4;
    v36 = &a25;
  }
  else
  {
    if (!a28)
      goto LABEL_11;
    v37 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v36 + 8 * v37))();
LABEL_11:
  sub_10036A8F4(v31);
  sub_10036E8B0(v32);
  sub_1003A71D4(a9);
  sub_1003A7220(a10);
  sub_100361598(v30);
  std::mutex::~mutex(a11);
  sub_1003ACFF8((_QWORD *)(v28 + 184));
  std::mutex::~mutex(a12);
  sub_1003AD458((_QWORD *)(v28 + 72));
  std::mutex::~mutex(a13);
  _Unwind_Resume(a1);
}

void sub_1003A7654()
{
  void *v0;

  operator delete(v0);
  JUMPOUT(0x1003A7604);
}

void sub_1003A7664()
{
  JUMPOUT(0x1003A7604);
}

void sub_1003A766C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15)
{
  if (a15)
    std::__shared_weak_count::__release_weak(a15);
  JUMPOUT(0x1003A760CLL);
}

void sub_1003A7680(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a17)
    std::__shared_weak_count::__release_weak(a17);
  JUMPOUT(0x1003A7614);
}

void sub_1003A7694(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  JUMPOUT(0x1003A761CLL);
}

void sub_1003A76AC()
{
  JUMPOUT(0x1003A761CLL);
}

uint64_t sub_1003A76B8(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;

  *(_QWORD *)a1 = off_100818568;
  sub_1003A77E8(a1);
  v2 = *(_QWORD **)(a1 + 1152);
  if (v2 == (_QWORD *)(a1 + 1128))
  {
    v3 = 4;
    v2 = (_QWORD *)(a1 + 1128);
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  v4 = *(_QWORD **)(a1 + 1120);
  if (v4 == (_QWORD *)(a1 + 1096))
  {
    v5 = 4;
    v4 = (_QWORD *)(a1 + 1096);
  }
  else
  {
    if (!v4)
      goto LABEL_11;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_11:
  if (*(char *)(a1 + 1087) < 0)
    operator delete(*(void **)(a1 + 1064));
  sub_10036A8F4((std::thread *)(a1 + 968));
  sub_10036E8B0((_QWORD *)(a1 + 752));
  v6 = *(void **)(a1 + 728);
  if (v6)
  {
    *(_QWORD *)(a1 + 736) = v6;
    operator delete(v6);
  }
  v7 = *(void **)(a1 + 704);
  if (v7)
  {
    *(_QWORD *)(a1 + 712) = v7;
    operator delete(v7);
  }
  v8 = *(std::__shared_weak_count **)(a1 + 672);
  if (v8)
    std::__shared_weak_count::__release_weak(v8);
  std::mutex::~mutex((std::mutex *)(a1 + 600));
  v9 = *(std::__shared_weak_count **)(a1 + 576);
  if (v9)
    std::__shared_weak_count::__release_weak(v9);
  std::mutex::~mutex((std::mutex *)(a1 + 504));
  sub_100361598(a1 + 304);
  std::mutex::~mutex((std::mutex *)(a1 + 232));
  sub_1003ACFF8((_QWORD *)(a1 + 184));
  std::mutex::~mutex((std::mutex *)(a1 + 120));
  sub_1003AD458((_QWORD *)(a1 + 72));
  std::mutex::~mutex((std::mutex *)(a1 + 8));
  return a1;
}

void sub_1003A77E8(uint64_t a1)
{
  NSObject *v2;

  sub_10039CAA4(a1 + 1040);
  sub_10036D458(a1 + 752);
  v2 = *(NSObject **)(a1 + 1192);
  if (v2)
  {
    dispatch_release(v2);
    *(_QWORD *)(a1 + 1192) = 0;
  }
  *(_BYTE *)(a1 + 296) = 0;
}

void sub_1003A782C(uint64_t a1)
{
  sub_1003A76B8(a1);
  operator delete();
}

uint64_t sub_1003A7850(uint64_t a1, char a2, char a3)
{
  uint64_t result;
  dispatch_queue_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;

  if (*(_BYTE *)(a1 + 296))
    return 1;
  v7 = dispatch_queue_create("RoseQueue", 0);
  *(_QWORD *)(a1 + 1192) = v7;
  if (!v7)
  {
    v15 = "failed to create dispatch queue";
LABEL_12:
    sub_10036CAF0(v15, v8, v9, v10, v11, v12, v13, v14, v16);
    return 0;
  }
  if ((sub_10039B02C(a1 + 1040, (uint64_t)v7, a2, a3) & 1) == 0)
  {
    v15 = "Failed to connect to rose debug manager";
    goto LABEL_12;
  }
  if ((sub_10036D064(a1 + 752, *(_QWORD *)(a1 + 1192), v9, v10, v11, v12, v13, v14) & 1) == 0)
  {
    v15 = "Failed to connect to rose service";
    goto LABEL_12;
  }
  if ((a2 & 1) == 0)
    sub_10036E568(a1 + 752, v8, v9, v10, v11, v12, v13, v14);
  result = 1;
  *(_BYTE *)(a1 + 296) = 1;
  return result;
}

int64x2_t sub_1003A7910(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  int64x2_t result;

  v4 = *(_QWORD *)(a1 + 32);
  if (!v4)
  {
    sub_1003AD59C((void **)a1);
    v4 = *(_QWORD *)(a1 + 32);
  }
  v5 = *(_QWORD *)(a1 + 8);
  v6 = (_QWORD *)(v5 + 8 * (v4 / 0xAA));
  v7 = *v6 + 24 * (v4 % 0xAA);
  if (*(_QWORD *)(a1 + 16) == v5)
    v8 = 0;
  else
    v8 = v7;
  if (v8 == *v6)
    v8 = *(v6 - 1) + 4080;
  *(_QWORD *)(v8 - 24) = 0;
  *(_QWORD *)(v8 - 16) = 0;
  v9 = (_QWORD *)(v8 - 24);
  v9[2] = 0;
  sub_1001530EC(v9, *(const void **)a2, *(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 8) - *(_QWORD *)a2);
  result = vaddq_s64(*(int64x2_t *)(a1 + 32), (int64x2_t)xmmword_10047ADD0);
  *(int64x2_t *)(a1 + 32) = result;
  return result;
}

_QWORD *sub_1003A79B0(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *result;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 170 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_1003AD8B4(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  v8 = (_QWORD *)(*(_QWORD *)(v5 + 8 * (v7 / 0xAA)) + 24 * (v7 % 0xAA));
  *v8 = 0;
  v8[1] = 0;
  v8[2] = 0;
  result = sub_1001530EC(v8, *(const void **)a2, *(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 8) - *(_QWORD *)a2);
  ++a1[5];
  return result;
}

void sub_1003A7A60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::mutex *v6;
  int v7;
  __int16 v8;
  void *__p;
  void *v10;
  uint64_t v11;

  v6 = (std::mutex *)(a1 + 120);
  std::mutex::lock((std::mutex *)(a1 + 120));
  v7 = *(_DWORD *)a2;
  v8 = *(_WORD *)(a2 + 4);
  v10 = 0;
  v11 = 0;
  __p = 0;
  sub_1001530EC(&__p, *(const void **)a3, *(_QWORD *)(a3 + 8), *(_QWORD *)(a3 + 8) - *(_QWORD *)a3);
  sub_1003ADBC8((_QWORD *)(a1 + 184), &v7);
  if (__p)
  {
    v10 = __p;
    operator delete(__p);
  }
  std::mutex::unlock(v6);
}

void sub_1003A7AF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::mutex *v11;

  if (__p)
    operator delete(__p);
  std::mutex::unlock(v11);
  _Unwind_Resume(a1);
}

void sub_1003A7B1C(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t __dst;
  int v52;

  if (sub_10036AE28(*(_DWORD *)(a1 + 1180), 5))
    sub_1000051BC("got event packet with groupID 0x%02x, message ID 0x%02x", v6, v7, v8, v9, v10, v11, v12, *(unsigned __int8 *)(a2 + 1));
  v13 = *(unsigned __int16 *)(a2 + 2);
  if (v13 == 515)
  {
    LOWORD(__dst) = 0;
    v52 = 0;
    sub_1003A1EE0((char *)(*a3 + 4), 2uLL, &__dst, 1);
    sub_1003A1EE0((char *)(*a3 + 6), 2uLL, (_BYTE *)&v52 + 2, 1);
    sub_1003A1EE0((char *)(*a3 + 8), 2uLL, &v52, 1);
    sub_1000051BC("Range Complete Event: status (0x%04x), session (%d), reason (0x%04x)", v14, v15, v16, v17, v18, v19, v20, (unsigned __int16)__dst);
    switch((__int16)v52)
    {
      case 15:
        v28 = "Range Complete Event occurred for reason LOCAL_SESSION_REMOVAL_SUCCESS";
        goto LABEL_22;
      case 16:
        v28 = "Range Complete Event occurred for reason LOCAL_SESSION_DISABLE_SUCCESS";
        goto LABEL_22;
      case 17:
        v28 = "Range Complete Event occurred for reason SESSION_COMPLETED";
        goto LABEL_22;
      case 18:
        v28 = "Range Complete Event occurred for reason SESSION_ALREADY_ACTIVE";
        goto LABEL_22;
      case 19:
        v28 = "Range Complete Event occurred for reason SESSION_ALREADY_DISABLED";
LABEL_22:
        sub_1000051BC(v28, v21, v22, v23, v24, v25, v26, v27, v50);
        break;
      default:
        sub_10036CAF0("Range Complete Event occurred for reason (0x%04x)", v21, v22, v23, v24, v25, v26, v27, (unsigned __int16)v52);
        break;
    }
    goto LABEL_29;
  }
  if (*(_BYTE *)(a2 + 1) == 2)
  {
    if (v13 == 144)
    {
      HIWORD(v52) = 0;
      __dst = 0;
      sub_1003A1EE0((char *)(*a3 + 4), 2uLL, (_BYTE *)&v52 + 2, 1);
      sub_1003A1EE0((char *)(*a3 + 6), 8uLL, &__dst, 1);
      if (HIWORD(v52) || __dst || !*(_QWORD *)(a1 + 1184))
      {
        sub_10036CAF0("Factory FDR Trust Evaluation Complete Event: status (0x%04x), trust evaluation error (0x%016llx)", v43, v44, v45, v46, v47, v48, v49, HIWORD(v52));
        goto LABEL_29;
      }
      sub_1000051BC("Factory FDR Trust Evaluation Complete Event: status (0x%04x), trust evaluation error (0x%016llx)", v43, v44, v45, v46, v47, v48, v49, 0);
    }
    else
    {
      if (v13 != 128)
        goto LABEL_29;
      LOWORD(__dst) = 0;
      HIWORD(v52) = 0;
      sub_1003A1EE0((char *)(*a3 + 4), 2uLL, &__dst, 1);
      sub_1003A1EE0((char *)(*a3 + 6), 2uLL, (_BYTE *)&v52 + 2, 1);
      if ((_WORD)__dst || HIWORD(v52) != 32 || !*(_QWORD *)(a1 + 1184))
      {
        sub_10036CAF0("Factory Command Complete Event: status (0x%04x), completed command OID (0x%x)", v36, v37, v38, v39, v40, v41, v42, (unsigned __int16)__dst);
        goto LABEL_29;
      }
      sub_1000051BC("Factory Command Complete Event: status (0x%04x), completed command OID (0x%x)", v36, v37, v38, v39, v40, v41, v42, 0);
    }
LABEL_33:
    dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 1184));
    return;
  }
  if (!*(_BYTE *)(a2 + 1) && v13 == 525)
  {
    LOWORD(__dst) = 0;
    sub_1003A1EE0((char *)(*a3 + 4), 2uLL, &__dst, 1);
    if (!(_WORD)__dst && *(_QWORD *)(a1 + 1184))
    {
      sub_1000051BC("UWB Init Done Event: status (0x%04x)", v29, v30, v31, v32, v33, v34, v35, 0);
      goto LABEL_33;
    }
    sub_10036CAF0("UWB Init Done Event: status (0x%04x)", v29, v30, v31, v32, v33, v34, v35, (unsigned __int16)__dst);
  }
LABEL_29:
  sub_100362E24(a1 + 600, a2, a3, v8, v9, v10, v11, v12);
}

BOOL sub_1003A7DE4(uint64_t a1, uint64_t a2)
{
  std::mutex *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;

  v4 = (std::mutex *)(a1 + 120);
  std::mutex::lock((std::mutex *)(a1 + 120));
  v5 = *(_QWORD *)(a1 + 224);
  if (v5)
  {
    v6 = *(_QWORD *)(*(_QWORD *)(a1 + 192) + ((*(_QWORD *)(a1 + 216) >> 4) & 0xFFFFFFFFFFFFFF8))
       + 32 * (*(_QWORD *)(a1 + 216) & 0x7FLL);
    v7 = *(_DWORD *)v6;
    *(_WORD *)(a2 + 4) = *(_WORD *)(v6 + 4);
    *(_DWORD *)a2 = v7;
    if (v6 != a2)
      sub_10019E578((_QWORD *)(a2 + 8), *(char **)(v6 + 8), *(char **)(v6 + 16), *(_QWORD *)(v6 + 16) - *(_QWORD *)(v6 + 8));
    sub_1003ADF90((_QWORD *)(a1 + 184));
  }
  std::mutex::unlock(v4);
  return v5 != 0;
}

void sub_1003A7E80(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

double sub_1003A7E94@<D0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v18;
  double result;
  int v20;
  __int16 v21;
  void *__p[2];
  uint64_t v23;
  std::chrono::nanoseconds __ns;

  v21 = 0;
  v20 = 0;
  __p[1] = 0;
  v23 = 0;
  __p[0] = 0;
  do
  {
    if (sub_1003A7DE4(a1, (uint64_t)&v20))
    {
      if (HIWORD(v20) == a2 && BYTE1(v20) == (_DWORD)a3)
      {
        *(_DWORD *)a5 = v20;
        *(_WORD *)(a5 + 4) = v21;
        result = *(double *)__p;
        *(_OWORD *)(a5 + 8) = *(_OWORD *)__p;
        *(_QWORD *)(a5 + 24) = v23;
        *(_BYTE *)(a5 + 32) = 1;
        return result;
      }
      sub_10036CAF0("waitForResponse: unexpected response at front of responseQueue: expected groupID %02x messageID %02x, got groupID %02x messageID %02x", v10, v11, v12, v13, v14, v15, v16, a3);
    }
    if (a4 >= 10)
      v18 = 10;
    else
      v18 = a4;
    if (a4 < 1)
      break;
    __ns.__rep_ = 1000000 * v18;
    std::this_thread::sleep_for (&__ns);
    a4 -= v18;
  }
  while (a4 >= 0);
  sub_10036CAF0("Timed out waiting for response: groupID %02x messageId %02x", v10, v11, v12, v13, v14, v15, v16, a3);
  *(_BYTE *)a5 = 0;
  *(_BYTE *)(a5 + 32) = 0;
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return result;
}

void sub_1003A7FBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_1003A7FE0(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  _BYTE v10[8];
  void *__p[3];
  unsigned __int8 v12;

  sub_1003A8078(a1, a2, 2000, v10);
  v8 = v12;
  if (v12)
  {
    sub_100395AD4((_QWORD *)(a1 + 504), (uint64_t)v10, (uint64_t *)__p, v3, v4, v5, v6, v7);
    if (v12)
    {
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
    }
  }
  return v8 != 0;
}

void sub_1003A8054(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, char a14)
{
  if (a14)
  {
    if (__p)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1003A8078(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, int a3@<W2>, _BYTE *a4@<X8>)
{
  size_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD v12[9];
  __int128 __dst;
  __int128 v14;

  if ((char)a2[23] < 0)
  {
    v7 = *((_QWORD *)a2 + 1);
    if (v7 > 0x1F)
      goto LABEL_9;
    __dst = 0u;
    v14 = 0u;
    a2 = *(unsigned __int8 **)a2;
    if (v7)
LABEL_4:
      memmove(&__dst, a2, v7);
  }
  else
  {
    v7 = a2[23];
    if (a2[23] >= 0x20u)
    {
LABEL_9:
      *a4 = 0;
      a4[32] = 0;
      return;
    }
    __dst = 0u;
    v14 = 0u;
    if (v7)
      goto LABEL_4;
  }
  if (sub_1003A2600((char *)&__dst, v12))
    goto LABEL_9;
  std::mutex::lock((std::mutex *)(a1 + 232));
  if (sub_1003A8290(a1, (uint64_t)v12, 0x24uLL, 0, v8, v9, v10, v11))
  {
    *a4 = 0;
    a4[32] = 0;
  }
  else
  {
    sub_1003A7E94(a1, 0, 0, a3, (uint64_t)a4);
  }
  std::mutex::unlock((std::mutex *)(a1 + 232));
}

void sub_1003A818C(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1003A81A8(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  void *__p[2];
  char v5;
  uint64_t v6;
  _BYTE v7[8];
  void *v8[3];
  char v9;

  sub_1003A8078(a1, a2, 2000, v7);
  if (v9 && !sub_10036AA4C((uint64_t)v7))
  {
    if (!v9)
      sub_10000BA44();
    sub_10039702C(v8, __p);
    sub_1003AD128((_QWORD *)a3, (__int128 *)__p);
    sub_10000BAB8((uint64_t)&v6);
    if (v5 < 0)
      operator delete(__p[0]);
  }
  else
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 112) = 0;
  }
  if (v9)
  {
    if (v8[0])
    {
      v8[1] = v8[0];
      operator delete(v8[0]);
    }
  }
}

void sub_1003A8258(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  void *v4;
  va_list va;

  va_start(va, a2);
  sub_10019DB9C((uint64_t)va);
  if (*(_BYTE *)(v2 - 24))
  {
    v4 = *(void **)(v2 - 48);
    if (v4)
    {
      *(_QWORD *)(v2 - 40) = v4;
      operator delete(v4);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1003A8290(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v12;
  const std::locale::facet *v13;
  uint64_t v14;
  _QWORD *v15;
  const std::locale::facet *v16;
  uint64_t v17;
  uint64_t v18;
  char *v20;
  const char *v21;
  void *__p[2];
  char v23;
  std::locale v24;
  char v25;
  _QWORD v26[2];
  uint64_t v27;
  _QWORD v28[10];
  char v29;
  uint64_t v30;

  if (!*(_BYTE *)(a1 + 296))
  {
    v20 = "connect to Rose before sending commands";
LABEL_15:
    sub_10036CAF0(v20, a2, a3, a4, a5, a6, a7, a8, (uint64_t)v21);
    return 1;
  }
  if (!a2 || a3 - 49 <= 0xFFFFFFFFFFFFFFD2)
  {
    v21 = "sendRoseCommand";
    v20 = "%s: Invalid payload %zu";
    goto LABEL_15;
  }
  if (sub_10036AE28(*(_DWORD *)(a1 + 1180), 5))
  {
    sub_1000537E4((uint64_t)v26);
    v12 = sub_100054C60(&v27, (uint64_t)"===========", 11);
    std::ios_base::getloc((const std::ios_base *)((char *)v12 + *(_QWORD *)(*v12 - 24)));
    v13 = std::locale::use_facet(&v24, &std::ctype<char>::id);
    v14 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v13->__vftable[2].~facet_0)(v13, 10);
    std::locale::~locale(&v24);
    std::ostream::put(v12, v14);
    std::ostream::flush(v12);
    v15 = sub_100054C60(&v27, (uint64_t)"TX Packet:", 10);
    std::ios_base::getloc((const std::ios_base *)((char *)v15 + *(_QWORD *)(*v15 - 24)));
    v16 = std::locale::use_facet(&v24, &std::ctype<char>::id);
    v17 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v16->__vftable[2].~facet_0)(v16, 10);
    std::locale::~locale(&v24);
    std::ostream::put(v15, v17);
    std::ostream::flush(v15);
    std::stringbuf::str(v28);
    sub_10000BF04(__p, "===========");
    sub_1003A23CC((uint64_t)&v24, a2, a3, 4u, (uint64_t)__p);
    if (v23 < 0)
      operator delete(__p[0]);
    if (v25 < 0)
      operator delete(v24.__locale_);
    *(_QWORD *)((char *)v26
    v27 = v18;
    if (v29 < 0)
      operator delete((void *)v28[8]);
    std::streambuf::~streambuf(v28);
    std::ios::~ios(&v30);
  }
  return sub_10036DAF4(a1 + 752, a2, a3, a4) ^ 1;
}

void sub_1003A84E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, std::locale a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18.__locale_);
  sub_100053910((uint64_t)&a24);
  _Unwind_Resume(a1);
}

BOOL sub_1003A8540(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v18;
  int v19;
  void *__p;
  void *v21;
  _QWORD v22[2];
  _QWORD v23[2];

  sub_1000051BC("%s", a2, a3, a4, a5, a6, a7, a8, (uint64_t)"sendRangeConfigCommand");
  *(_DWORD *)((char *)v23 + 7) = 0;
  v23[0] = 0;
  v21 = 0;
  v22[0] = 0;
  *(_QWORD *)((char *)v22 + 7) = 0;
  v15 = *(_QWORD *)a2;
  __p = 0;
  v18 = v15;
  v19 = *(_DWORD *)(a2 + 8);
  if (&v18 != (uint64_t *)a2)
    sub_1001B04E4((char *)&__p, *(char **)(a2 + 16), *(_QWORD *)(a2 + 24), (uint64_t)(*(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16)) >> 1);
  LODWORD(v23[0]) = *(_DWORD *)(a2 + 40);
  BYTE4(v23[0]) = *(_BYTE *)(a2 + 44);
  BYTE5(v23[0]) = *(_BYTE *)(a2 + 48);
  HIWORD(v23[0]) = *(_WORD *)(a2 + 46);
  v16 = sub_1003A862C(a1, (unsigned __int16 *)&v18, 2000, v10, v11, v12, v13, v14);
  if (__p)
  {
    v21 = __p;
    operator delete(__p);
  }
  return v16 == 0;
}

void sub_1003A8610(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003A862C(uint64_t a1, unsigned __int16 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  void *__p;
  void *v49;
  char v50;
  _BYTE v51[8];
  void *v52[3];
  char v53;
  void *v54;
  void *v55;
  uint64_t v56;

  v8 = a3;
  sub_1000051BC("%s", (uint64_t)a2, a3, a4, a5, a6, a7, a8, (uint64_t)"sendRangingConfigCommandPacket");
  v54 = 0;
  v55 = 0;
  v56 = 0;
  v18 = *((_DWORD *)sub_100004784() + 187);
  if (!v18)
  {
    sub_10036CAF0("RangingConfig unknown HSI version", v11, (uint64_t)v12, v13, v14, v15, v16, v17, v45);
    goto LABEL_10;
  }
  if (v18 != 1)
  {
    if (v18 == 2)
    {
      v19 = sub_1003A28D4((uint64_t)a2, &v54, v12, v13, v14, v15, v16, v17);
      goto LABEL_7;
    }
LABEL_10:
    v27 = 1;
    goto LABEL_11;
  }
  v19 = sub_1003A26D4((uint64_t)a2, &v54, v12, v13, v14, v15, v16, v17);
LABEL_7:
  v27 = v19;
  if ((_DWORD)v19)
    goto LABEL_11;
  sub_1000051BC("Sending RangingConfig command, session ID %hu", v20, v21, v22, v23, v24, v25, v26, *a2);
  v51[0] = 0;
  v53 = 0;
  std::mutex::lock((std::mutex *)(a1 + 232));
  if (sub_1003A8290(a1, (uint64_t)v54, ((_DWORD)v55 - (_DWORD)v54), 0, v28, v29, v30, v31))
  {
    sub_10036CAF0("RangingConfig response failed", v32, v33, v34, v35, v36, v37, v38, v46);
    std::mutex::unlock((std::mutex *)(a1 + 232));
    goto LABEL_10;
  }
  sub_1000051BC("Ranging configured, session ID %hu", v32, v33, v34, v35, v36, v37, v38, *a2);
  sub_1003A7E94(a1, 1, 0, v8, (uint64_t)&v47);
  sub_1003AD1B4((uint64_t)v51, &v47);
  if (v50 && __p)
  {
    v49 = __p;
    operator delete(__p);
  }
  std::mutex::unlock((std::mutex *)(a1 + 232));
  if (!v53)
    goto LABEL_10;
  sub_100395AD4((_QWORD *)(a1 + 504), (uint64_t)v51, (uint64_t *)v52, v40, v41, v42, v43, v44);
  if (v53 && v52[0])
  {
    v52[1] = v52[0];
    operator delete(v52[0]);
  }
  v27 = 0;
LABEL_11:
  if (v54)
  {
    v55 = v54;
    operator delete(v54);
  }
  return v27;
}

void sub_1003A87D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, char a19)
{
  uint64_t v19;
  void *v21;

  if (a19 && __p)
    operator delete(__p);
  v21 = *(void **)(v19 - 56);
  if (v21)
  {
    *(_QWORD *)(v19 - 48) = v21;
    operator delete(v21);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1003A882C(uint64_t a1, uint64_t a2)
{
  char v3[8];
  uint64_t v4;
  uint64_t v5;

  *(_WORD *)v3 = *(_WORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  return sub_1003A8870(a1, v3, 2000) == 0;
}

uint64_t sub_1003A8870(uint64_t a1, char *a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  void *__p;
  void *v34;
  char v35;
  _BYTE v36[8];
  void *v37[3];
  char v38;
  _QWORD __dst[2];

  v13 = sub_1003A2B3C(a2, __dst);
  if ((_DWORD)v13)
    return v13;
  sub_1000051BC("Sending RangingEnable command, sessionID %hu", v6, v7, v8, v9, v10, v11, v12, *(unsigned __int16 *)a2);
  v36[0] = 0;
  v38 = 0;
  std::mutex::lock((std::mutex *)(a1 + 232));
  if (sub_1003A8290(a1, (uint64_t)__dst, 0x16uLL, 0, v15, v16, v17, v18))
  {
    std::mutex::unlock((std::mutex *)(a1 + 232));
  }
  else
  {
    sub_1003A7E94(a1, 2, 0, a3, (uint64_t)&v32);
    sub_1003AD1B4((uint64_t)v36, &v32);
    if (v35 && __p)
    {
      v34 = __p;
      operator delete(__p);
    }
    std::mutex::unlock((std::mutex *)(a1 + 232));
    if (v38)
    {
      sub_1000051BC("Ranging session enabled, sessionID %hu", v19, v20, v21, v22, v23, v24, v25, *(unsigned __int16 *)a2);
      sub_100395AD4((_QWORD *)(a1 + 504), (uint64_t)v36, (uint64_t *)v37, v26, v27, v28, v29, v30);
      v13 = 0;
      goto LABEL_11;
    }
    sub_10036CAF0("RangingEnable response failed", v19, v20, v21, v22, v23, v24, v25, v31);
  }
  v13 = 1;
LABEL_11:
  if (v38 && v37[0])
  {
    v37[1] = v37[0];
    operator delete(v37[0]);
  }
  return v13;
}

void sub_1003A89DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, char a20)
{
  if (a2)
    sub_1000131D8(exception_object);
  _Unwind_Resume(exception_object);
}

BOOL sub_1003A8A2C(uint64_t a1, __int16 *a2)
{
  __int16 v3;
  char v4;

  v3 = *a2;
  v4 = *((_BYTE *)a2 + 2);
  return sub_1003A8A68(a1, (char *)&v3, 2000) == 0;
}

uint64_t sub_1003A8A68(uint64_t a1, char *a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  void *__p;
  void *v34;
  char v35;
  _BYTE v36[8];
  void *v37[3];
  char v38;
  char __dst[7];

  v13 = sub_1003A2C24(a2, __dst);
  if ((_DWORD)v13)
    return v13;
  sub_1000051BC("Sending RangingDisable command, sessionID %hu", v6, v7, v8, v9, v10, v11, v12, *(unsigned __int16 *)a2);
  v36[0] = 0;
  v38 = 0;
  std::mutex::lock((std::mutex *)(a1 + 232));
  if (sub_1003A8290(a1, (uint64_t)__dst, 7uLL, 0, v15, v16, v17, v18))
  {
    std::mutex::unlock((std::mutex *)(a1 + 232));
  }
  else
  {
    sub_1003A7E94(a1, 3, 0, a3, (uint64_t)&v32);
    sub_1003AD1B4((uint64_t)v36, &v32);
    if (v35 && __p)
    {
      v34 = __p;
      operator delete(__p);
    }
    std::mutex::unlock((std::mutex *)(a1 + 232));
    if (v38)
    {
      sub_1000051BC("Ranging session disabled, sessionID %hu", v19, v20, v21, v22, v23, v24, v25, *(unsigned __int16 *)a2);
      sub_100395AD4((_QWORD *)(a1 + 504), (uint64_t)v36, (uint64_t *)v37, v26, v27, v28, v29, v30);
      v13 = 0;
      goto LABEL_11;
    }
    sub_10036CAF0("RangingDisable response failed", v19, v20, v21, v22, v23, v24, v25, v31);
  }
  v13 = 1;
LABEL_11:
  if (v38 && v37[0])
  {
    v37[1] = v37[0];
    operator delete(v37[0]);
  }
  return v13;
}

void sub_1003A8BAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, char a19)
{
  std::mutex *v19;

  std::mutex::unlock(v19);
  _Unwind_Resume(a1);
}

BOOL sub_1003A8BE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __int16 v11;
  char v12;
  __int16 v13;
  int v14;
  char v15;
  __int16 v16;
  __int16 v17;
  char v18;
  __int16 v19;
  char v20;
  char v21;
  __int16 v22;
  uint64_t v23;
  int v24;
  __int16 v25;
  uint64_t v26;

  sub_1000051BC("%s", a2, a3, a4, a5, a6, a7, a8, (uint64_t)"sendTestNBAMMSRangeEnableCommand");
  v11 = *(_WORD *)a2;
  v12 = *(_BYTE *)(a2 + 2);
  v13 = *(_WORD *)(a2 + 3);
  v14 = *(_DWORD *)(a2 + 6);
  v15 = *(_BYTE *)(a2 + 10);
  v16 = *(_WORD *)(a2 + 11);
  v17 = *(_WORD *)(a2 + 14);
  v18 = *(_BYTE *)(a2 + 16);
  v19 = *(_WORD *)(a2 + 18);
  v20 = *(_BYTE *)(a2 + 20);
  v21 = *(_BYTE *)(a2 + 21);
  v22 = *(unsigned __int8 *)(a2 + 48);
  v23 = *(_QWORD *)(a2 + 24);
  v24 = *(_DWORD *)(a2 + 32);
  v25 = *(_WORD *)(a2 + 36);
  v26 = *(_QWORD *)(a2 + 40);
  return sub_1003A8CE8(a1, (char *)&v11, 2000) == 0;
}

uint64_t sub_1003A8CE8(uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  void *__p;
  void *v35;
  char v36;
  int v37;
  _BYTE v38[8];
  void *v39[3];
  char v40;
  char __dst[86];

  v13 = sub_1003A2CE4(a2, __dst);
  if ((_DWORD)v13)
    return v13;
  sub_1000051BC("Sending test NMI range enable command, sessionID %hu", v6, v7, v8, v9, v10, v11, v12, *(unsigned __int16 *)a2);
  v38[0] = 0;
  v40 = 0;
  std::mutex::lock((std::mutex *)(a1 + 232));
  v37 = 0;
  v13 = sub_1003A8F3C(a1, __dst, 0x56uLL, a3, &v37, v15, v16, v17);
  if ((_DWORD)v13)
  {
    std::mutex::unlock((std::mutex *)(a1 + 232));
    goto LABEL_19;
  }
  v18 = v37;
  if (v37 >= 2)
  {
    do
    {
      sub_1003A7E94(a1, 1, 4, a3, (uint64_t)&v33);
      sub_1003AD1B4((uint64_t)v38, &v33);
      if (v36 && __p)
      {
        v35 = __p;
        operator delete(__p);
      }
    }
    while (v18-- > 2);
    v37 = 1;
    goto LABEL_13;
  }
  if (v37 == 1)
  {
LABEL_13:
    sub_1003A7E94(a1, 96, 0, a3, (uint64_t)&v33);
    sub_1003AD1B4((uint64_t)v38, &v33);
    if (v36 && __p)
    {
      v35 = __p;
      operator delete(__p);
    }
  }
  std::mutex::unlock((std::mutex *)(a1 + 232));
  if (v40)
  {
    sub_1000051BC("Test NMI ranging session enabled, sessionID %hu", v20, v21, v22, v23, v24, v25, v26, *(unsigned __int16 *)a2);
    sub_100395AD4((_QWORD *)(a1 + 504), (uint64_t)v38, (uint64_t *)v39, v27, v28, v29, v30, v31);
    v13 = 0;
  }
  else
  {
    sub_10036CAF0("TestNMIRangeEnable response failed", v20, v21, v22, v23, v24, v25, v26, v32);
    v13 = 1;
  }
LABEL_19:
  if (v40 && v39[0])
  {
    v39[1] = v39[0];
    operator delete(v39[0]);
  }
  return v13;
}

void sub_1003A8ED4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, int a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,char a21)
{
  if (a2)
    sub_1000131D8(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003A8F3C(uint64_t a1, const void *a2, size_t a3, uint64_t a4, _DWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v11;
  _QWORD *v13;
  const std::locale::facet *v14;
  uint64_t v15;
  _QWORD *v16;
  const std::locale::facet *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  void **v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  const std::locale::facet *v28;
  uint64_t v29;
  _QWORD *v30;
  const std::locale::facet *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  const char *v39;
  _DWORD *v40;
  uint64_t v41;
  void **v42;
  void *__p[2];
  char v44;
  std::locale v45;
  char v46;
  void **v47[2];
  uint64_t v48;
  _QWORD v49[8];
  void *v50;
  char v51;
  _BYTE v52[152];
  uint64_t *v53;
  uint64_t v54;
  void *v55[4];

  *a5 = 0;
  if (!*(_BYTE *)(a1 + 296))
  {
    v36 = "connect to Rose before sending multi-part commands";
LABEL_29:
    sub_10036CAF0(v36, (uint64_t)a2, a3, a4, (uint64_t)a5, a6, a7, a8, (uint64_t)v39);
    return 1;
  }
  if (!a2 || a3 - 137 <= 0xFFFFFFFFFFFFFFA7)
  {
    v39 = "sendRoseMultiPartCommand";
    v36 = "%s: Invalid payload %zu";
    goto LABEL_29;
  }
  v11 = a4;
  LOBYTE(v47[0]) = 0;
  sub_100191910(v55, a3, v47);
  memmove(v55[0], a2, a3);
  sub_1003A1F40((uint64_t)v55, (uint64_t *)&v53);
  v40 = a5;
  if (sub_10036AE28(*(_DWORD *)(a1 + 1180), 5))
  {
    sub_1000537E4((uint64_t)v47);
    v13 = sub_100054C60(&v48, (uint64_t)"==================", 18);
    std::ios_base::getloc((const std::ios_base *)((char *)v13 + *(_QWORD *)(*v13 - 24)));
    v14 = std::locale::use_facet(&v45, &std::ctype<char>::id);
    v15 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v14->__vftable[2].~facet_0)(v14, 10);
    std::locale::~locale(&v45);
    std::ostream::put(v13, v15);
    std::ostream::flush(v13);
    v16 = sub_100054C60(&v48, (uint64_t)"TX Packet (orig):", 17);
    std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(_QWORD *)(*v16 - 24)));
    v17 = std::locale::use_facet(&v45, &std::ctype<char>::id);
    v18 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
    std::locale::~locale(&v45);
    std::ostream::put(v16, v18);
    std::ostream::flush(v16);
    std::stringbuf::str(v49);
    sub_10000BF04(__p, "==================");
    sub_1003A23CC((uint64_t)&v45, (uint64_t)a2, a3, 4u, (uint64_t)__p);
    if (v44 < 0)
      operator delete(__p[0]);
    if (v46 < 0)
      operator delete(v45.__locale_);
    *(void ***)((char *)v47
    v48 = v19;
    if (v51 < 0)
      operator delete(v50);
    std::streambuf::~streambuf(v49);
    std::ios::~ios(v52);
  }
  v20 = v53;
  v21 = (uint64_t *)v54;
  if (v53 == (uint64_t *)v54)
  {
    v35 = (uint64_t)v53;
LABEL_31:
    v37 = 0;
    *v40 = -1431655765 * ((unint64_t)(v35 - (_QWORD)v20) >> 3);
  }
  else
  {
    while (1)
    {
      if (sub_10036AE28(*(_DWORD *)(a1 + 1180), 5))
      {
        sub_1000537E4((uint64_t)v47);
        v27 = sub_100054C60(&v48, (uint64_t)"===================", 19);
        std::ios_base::getloc((const std::ios_base *)((char *)v27 + *(_QWORD *)(*v27 - 24)));
        v28 = std::locale::use_facet(&v45, &std::ctype<char>::id);
        v29 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v28->__vftable[2].~facet_0)(v28, 10);
        std::locale::~locale(&v45);
        std::ostream::put(v27, v29);
        std::ostream::flush(v27);
        v30 = sub_100054C60(&v48, (uint64_t)"TX Packet (split):", 18);
        std::ios_base::getloc((const std::ios_base *)((char *)v30 + *(_QWORD *)(*v30 - 24)));
        v31 = std::locale::use_facet(&v45, &std::ctype<char>::id);
        v32 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v31->__vftable[2].~facet_0)(v31, 10);
        std::locale::~locale(&v45);
        std::ostream::put(v30, v32);
        std::ostream::flush(v30);
        std::stringbuf::str(v49);
        v34 = *v20;
        v33 = v20[1];
        sub_10000BF04(__p, "===================");
        sub_1003A23CC((uint64_t)&v45, v34, (v33 - v34), 4u, (uint64_t)__p);
        if (v44 < 0)
          operator delete(__p[0]);
        if (v46 < 0)
          operator delete(v45.__locale_);
        v47[0] = v22;
        *(void ***)((char *)v47 + (_QWORD)*(v22 - 3)) = v42;
        v48 = v41;
        if (v51 < 0)
          operator delete(v50);
        std::streambuf::~streambuf(v49);
        std::ios::~ios(v52);
      }
      if (sub_1003A8290(a1, *v20, v20[1] - *v20, 0, v23, v24, v25, v26))
        break;
      if (v11)
      {
        v45.__locale_ = (std::locale::__imp *)(1000000 * v11);
        std::this_thread::sleep_for ((const std::chrono::nanoseconds *)&v45);
      }
      v20 += 3;
      if (v20 == v21)
      {
        v20 = v53;
        v35 = v54;
        goto LABEL_31;
      }
    }
    v37 = 1;
  }
  v47[0] = (void **)&v53;
  sub_10013133C(v47);
  if (v55[0])
  {
    v55[1] = v55[0];
    operator delete(v55[0]);
  }
  return v37;
}

void sub_1003A942C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,std::locale a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29)
{
  uint64_t v29;
  void *v31;

  if (a22 < 0)
    operator delete(__p);
  if (a28 < 0)
    operator delete(a23.__locale_);
  sub_100053910((uint64_t)&a29);
  a29 = v29 - 136;
  sub_10013133C((void ***)&a29);
  v31 = *(void **)(v29 - 112);
  if (v31)
  {
    *(_QWORD *)(v29 - 104) = v31;
    operator delete(v31);
  }
  _Unwind_Resume(a1);
}

BOOL sub_1003A94E4(uint64_t a1, char **a2)
{
  int v3;
  void *__p;
  void *v6;
  uint64_t v7;

  __p = 0;
  v6 = 0;
  v7 = 0;
  if (&__p != (void **)a2)
    sub_10019E578(&__p, *a2, a2[1], a2[1] - *a2);
  v3 = sub_1003A9578(a1, &__p, 2000);
  if (__p)
  {
    v6 = __p;
    operator delete(__p);
  }
  return v3 == 0;
}

void sub_1003A955C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003A9578(uint64_t a1, _DWORD *a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v16;
  void *__p;
  void *v18;
  char v19;
  _BYTE v20[8];
  void *v21[3];
  char v22;
  _BYTE *v23;
  _BYTE *v24;
  uint64_t v25;

  v23 = 0;
  v24 = 0;
  v25 = 0;
  v5 = sub_1003A2F04(a2, (unint64_t *)&v23);
  if (!(_DWORD)v5)
  {
    v20[0] = 0;
    v22 = 0;
    std::mutex::lock((std::mutex *)(a1 + 232));
    if (sub_1003A8290(a1, (uint64_t)v23, v24 - v23, 0, v6, v7, v8, v9))
    {
      std::mutex::unlock((std::mutex *)(a1 + 232));
LABEL_4:
      v5 = 1;
      goto LABEL_13;
    }
    sub_1003A7E94(a1, 4, 0, a3, (uint64_t)&v16);
    sub_1003AD1B4((uint64_t)v20, &v16);
    if (v19 && __p)
    {
      v18 = __p;
      operator delete(__p);
    }
    std::mutex::unlock((std::mutex *)(a1 + 232));
    if (!v22)
      goto LABEL_4;
    sub_100395AD4((_QWORD *)(a1 + 504), (uint64_t)v20, (uint64_t *)v21, v10, v11, v12, v13, v14);
    if (v22 && v21[0])
    {
      v21[1] = v21[0];
      operator delete(v21[0]);
    }
    v5 = 0;
  }
LABEL_13:
  if (v23)
  {
    v24 = v23;
    operator delete(v23);
  }
  return v5;
}

void sub_1003A9694(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, char a19)
{
  uint64_t v19;
  void *v21;

  if (a19 && __p)
    operator delete(__p);
  v21 = *(void **)(v19 - 56);
  if (v21)
  {
    *(_QWORD *)(v19 - 48) = v21;
    operator delete(v21);
  }
  _Unwind_Resume(exception_object);
}

void sub_1003A96EC(uint64_t a1@<X0>, char **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  void *v12;
  void *v13;
  char v14;
  _BYTE v15[8];
  void *v16;
  _BYTE *v17;
  char v18;
  void *__p;
  _BYTE *v20;
  uint64_t v21;
  void *v22;
  void *v23;
  uint64_t v24;

  v22 = 0;
  v23 = 0;
  v24 = 0;
  if (&v22 != (void **)a2)
    sub_10019E578(&v22, *a2, a2[1], a2[1] - *a2);
  __p = 0;
  v20 = 0;
  v21 = 0;
  if (sub_1003A2F04(&v22, (unint64_t *)&__p))
    goto LABEL_4;
  v15[0] = 0;
  v18 = 0;
  std::mutex::lock((std::mutex *)(a1 + 232));
  if (sub_1003A8290(a1, (uint64_t)__p, v20 - (_BYTE *)__p, 0, v7, v8, v9, v10))
  {
    *(_BYTE *)a4 = 0;
    *(_BYTE *)(a4 + 24) = 0;
    std::mutex::unlock((std::mutex *)(a1 + 232));
  }
  else
  {
    sub_1003A7E94(a1, 4, 0, a3, (uint64_t)&v11);
    sub_1003AD1B4((uint64_t)v15, &v11);
    if (v14 && v12)
    {
      v13 = v12;
      operator delete(v12);
    }
    std::mutex::unlock((std::mutex *)(a1 + 232));
    if (!v18)
    {
LABEL_4:
      *(_BYTE *)a4 = 0;
      *(_BYTE *)(a4 + 24) = 0;
      goto LABEL_7;
    }
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    sub_1001530EC((_QWORD *)a4, v16, (uint64_t)v17, v17 - (_BYTE *)v16);
    *(_BYTE *)(a4 + 24) = 1;
    if (v18 && v16)
    {
      v17 = v16;
      operator delete(v16);
    }
  }
LABEL_7:
  if (__p)
  {
    v20 = __p;
    operator delete(__p);
  }
  if (v22)
  {
    v23 = v22;
    operator delete(v22);
  }
}

void sub_1003A9850(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, char a18, void *a19, uint64_t a20)
{
  uint64_t v20;
  void *v22;

  if (a18 && __p)
    operator delete(__p);
  if (a19)
    operator delete(a19);
  v22 = *(void **)(v20 - 56);
  if (v22)
  {
    *(_QWORD *)(v20 - 48) = v22;
    operator delete(v22);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1003A98C0(uint64_t a1, uint64_t *a2)
{
  _BOOL8 v3;
  char *v5[3];
  char **v6;

  memset(v5, 0, sizeof(v5));
  if (v5 != (char **)a2)
    sub_1003ADFF4((uint64_t *)v5, *a2, a2[1], (a2[1] - *a2) >> 5);
  v3 = sub_1003A9958(a1, v5, 2000) == 0;
  v6 = v5;
  sub_100153338((void ***)&v6);
  return v3;
}

void sub_1003A993C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  sub_100153338(&a12);
  _Unwind_Resume(a1);
}

uint64_t sub_1003A9958(uint64_t a1, char **a2, int a3)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _BYTE v12[24];
  _BYTE *v13;

  v6 = a1 + 504;
  v7 = operator new(0x20uLL);
  *v7 = off_1008187D0;
  v7[1] = sub_100395AD4;
  v7[2] = 0;
  v7[3] = v6;
  v13 = v7;
  v8 = sub_1003A9B0C(a1, a2, (uint64_t)v12, a3);
  v9 = v13;
  if (v13 == v12)
  {
    v10 = 4;
    v9 = v12;
    goto LABEL_5;
  }
  if (v13)
  {
    v10 = 5;
LABEL_5:
    (*(void (**)(void))(*v9 + 8 * v10))();
  }
  return v8;
}

void sub_1003A9A2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

BOOL sub_1003A9A64(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _BOOL8 v5;
  char *v7[3];
  char **v8;

  memset(v7, 0, sizeof(v7));
  if (v7 != (char **)a2)
    sub_1003ADFF4((uint64_t *)v7, *a2, a2[1], (a2[1] - *a2) >> 5);
  v5 = sub_1003A9B0C(a1, v7, a3, 2000) == 0;
  v8 = v7;
  sub_100153338((void ***)&v8);
  return v5;
}

void sub_1003A9AF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  sub_100153338(&a12);
  _Unwind_Resume(a1);
}

uint64_t sub_1003A9B0C(uint64_t a1, char **a2, uint64_t a3, int a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  int v14;
  void *__p;
  void *v16;
  char v17;
  _BYTE v18[8];
  void *v19[3];
  char v20;
  _BYTE *v21;
  _BYTE *v22;
  uint64_t v23;

  v21 = 0;
  v22 = 0;
  v23 = 0;
  v7 = sub_1003A3140(a2, (unint64_t *)&v21);
  if (!(_DWORD)v7)
  {
    v18[0] = 0;
    v20 = 0;
    std::mutex::lock((std::mutex *)(a1 + 232));
    if (sub_1003A8290(a1, (uint64_t)v21, v22 - v21, 0, v8, v9, v10, v11))
    {
      std::mutex::unlock((std::mutex *)(a1 + 232));
LABEL_4:
      v7 = 1;
      goto LABEL_5;
    }
    sub_1003A7E94(a1, 5, 0, a4, (uint64_t)&v14);
    sub_1003AD1B4((uint64_t)v18, &v14);
    if (v17 && __p)
    {
      v16 = __p;
      operator delete(__p);
    }
    std::mutex::unlock((std::mutex *)(a1 + 232));
    if (!v20)
      goto LABEL_4;
    v13 = *(_QWORD *)(a3 + 24);
    if (!v13)
      sub_100027BC4();
    v7 = (*(uint64_t (**)(uint64_t, _BYTE *, void **))(*(_QWORD *)v13 + 48))(v13, v18, v19);
    if (v20 && v19[0])
    {
      v19[1] = v19[0];
      operator delete(v19[0]);
    }
  }
LABEL_5:
  if (v21)
  {
    v22 = v21;
    operator delete(v21);
  }
  return v7;
}

void sub_1003A9C44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, char a19)
{
  std::mutex *v19;
  uint64_t v20;
  void *v22;

  std::mutex::unlock(v19);
  v22 = *(void **)(v20 - 56);
  if (v22)
  {
    *(_QWORD *)(v20 - 48) = v22;
    operator delete(v22);
  }
  _Unwind_Resume(a1);
}

BOOL sub_1003A9C98(uint64_t a1, char *a2)
{
  return sub_1003A9CBC(a1, *a2, 2000) == 0;
}

uint64_t sub_1003A9CBC(uint64_t a1, char a2, int a3)
{
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  int v20;
  void *__p;
  void *v22;
  char v23;
  _BYTE v24[8];
  void *v25[3];
  char v26;
  int __src;
  _BYTE *v28;
  _BYTE *v29;
  uint64_t v30;
  char v31;

  v31 = a2;
  v28 = 0;
  v29 = 0;
  v30 = 0;
  __src = 17490;
  sub_10003F150((unint64_t *)&v28, 5uLL);
  v5 = sub_1003A1EE0((char *)&__src, 4uLL, v28, 1);
  sub_1003A1EE0(&v31, 1uLL, v5, 1);
  v24[0] = 0;
  v26 = 0;
  std::mutex::lock((std::mutex *)(a1 + 232));
  if (sub_1003A8290(a1, (uint64_t)v28, v29 - v28, 0, v6, v7, v8, v9))
  {
    std::mutex::unlock((std::mutex *)(a1 + 232));
  }
  else
  {
    sub_1003A7E94(a1, 82, 1, a3, (uint64_t)&v20);
    sub_1003AD1B4((uint64_t)v24, &v20);
    if (v23 && __p)
    {
      v22 = __p;
      operator delete(__p);
    }
    std::mutex::unlock((std::mutex *)(a1 + 232));
    if (v26)
    {
      sub_100395AD4((_QWORD *)(a1 + 504), (uint64_t)v24, (uint64_t *)v25, v13, v14, v15, v16, v17);
      v10 = 0;
      goto LABEL_9;
    }
    sub_10036CAF0("no response from Rose for log request", v11, v12, v13, v14, v15, v16, v17, v19);
  }
  v10 = 1;
LABEL_9:
  if (v26 && v25[0])
  {
    v25[1] = v25[0];
    operator delete(v25[0]);
  }
  if (v28)
  {
    v29 = v28;
    operator delete(v28);
  }
  return v10;
}

void sub_1003A9E10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, char a19)
{
  uint64_t v19;
  void *v21;

  if (a19 && __p)
    operator delete(__p);
  v21 = *(void **)(v19 - 64);
  if (v21)
  {
    *(_QWORD *)(v19 - 56) = v21;
    operator delete(v21);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1003A9E6C(uint64_t a1, __int16 *a2)
{
  __int16 v3;

  v3 = *a2;
  return sub_1003A9EA0(a1, (char *)&v3, 2000) == 0;
}

uint64_t sub_1003A9EA0(uint64_t a1, char *a2, int a3)
{
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  void *__p;
  void *v23;
  char v24;
  _BYTE v25[8];
  void *v26[3];
  char v27;
  int __src;
  _BYTE *v29;
  _BYTE *v30;
  uint64_t v31;

  v29 = 0;
  v30 = 0;
  v31 = 0;
  __src = 17492;
  sub_10003F150((unint64_t *)&v29, 6uLL);
  v6 = sub_1003A1EE0((char *)&__src, 4uLL, v29, 1);
  v7 = sub_1003A1EE0(a2 + 1, 1uLL, v6, 1);
  sub_1003A1EE0(a2, 1uLL, v7, 1);
  v25[0] = 0;
  v27 = 0;
  std::mutex::lock((std::mutex *)(a1 + 232));
  if (sub_1003A8290(a1, (uint64_t)v29, v30 - v29, 0, v8, v9, v10, v11))
  {
    std::mutex::unlock((std::mutex *)(a1 + 232));
  }
  else
  {
    sub_1003A7E94(a1, 84, 1, a3, (uint64_t)&v21);
    sub_1003AD1B4((uint64_t)v25, (int *)&v21);
    if (v24 && __p)
    {
      v23 = __p;
      operator delete(__p);
    }
    std::mutex::unlock((std::mutex *)(a1 + 232));
    if (v27)
    {
      sub_100395AD4((_QWORD *)(a1 + 504), (uint64_t)v25, (uint64_t *)v26, v15, v16, v17, v18, v19);
      v12 = 0;
      goto LABEL_9;
    }
    sub_10036CAF0("no response from Rose for log config", v13, v14, v15, v16, v17, v18, v19, v21);
  }
  v12 = 1;
LABEL_9:
  if (v27 && v26[0])
  {
    v26[1] = v26[0];
    operator delete(v26[0]);
  }
  if (v29)
  {
    v30 = v29;
    operator delete(v29);
  }
  return v12;
}

void sub_1003AA008(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, char a18)
{
  uint64_t v18;
  void *v20;

  if (a18 && __p)
    operator delete(__p);
  v20 = *(void **)(v18 - 56);
  if (v20)
  {
    *(_QWORD *)(v18 - 48) = v20;
    operator delete(v20);
  }
  _Unwind_Resume(exception_object);
}

void sub_1003AA064(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  std::mutex *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  CFMutableDictionaryRef Mutable;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const __CFNumber *Value;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const __CFNumber *v35;
  CFTypeID v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  const __CFNumber *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  const __CFNumber *v52;
  CFTypeID v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  uint64_t valuePtr;

  v63 = 0;
  valuePtr = 0;
  if (!*(_BYTE *)(a1 + 296))
  {
    sub_10036CAF0("connect to Rose before timesync", a2, a3, a4, a5, a6, a7, a8, v63);
    *(_BYTE *)a9 = 0;
    *(_BYTE *)(a9 + 16) = 0;
    return;
  }
  v11 = (std::mutex *)(a1 + 232);
  std::mutex::lock((std::mutex *)(a1 + 232));
  Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (!Mutable)
  {
    sub_10036CAF0("failed to create time dictionary", v12, v13, v14, v15, v16, v17, v18, v63);
LABEL_16:
    v62 = 0;
    *(_BYTE *)a9 = 0;
    goto LABEL_17;
  }
  if ((sub_10036DE4C(a1 + 752, (uint64_t)Mutable, v13, v14, v15, v16, v17, v18) & 1) == 0)
  {
    sub_10036CAF0("timesync failed", v20, v21, v22, v23, v24, v25, v26, v63);
    CFRelease(Mutable);
    goto LABEL_16;
  }
  Value = (const __CFNumber *)CFDictionaryGetValue(Mutable, CFSTR("rose_time"));
  v35 = Value;
  if (!Value)
  {
    sub_10036CAF0("failed to get rose time entry", v28, v29, v30, v31, v32, v33, v34, v63);
    CFRelease(Mutable);
    goto LABEL_16;
  }
  v36 = CFGetTypeID(Value);
  if (v36 != CFNumberGetTypeID())
  {
    sub_10036CAF0("invalid type for rose time", v37, v38, v39, v40, v41, v42, v43, v63);
    CFRelease(Mutable);
    goto LABEL_16;
  }
  CFNumberGetValue(v35, kCFNumberLongLongType, &valuePtr);
  v44 = (const __CFNumber *)CFDictionaryGetValue(Mutable, CFSTR("continuous_time"));
  v52 = v44;
  if (!v44)
  {
    sub_10036CAF0("unable to get continuous time entry", v45, v46, v47, v48, v49, v50, v51, v63);
    CFRelease(Mutable);
    goto LABEL_16;
  }
  v53 = CFGetTypeID(v44);
  if (v53 != CFNumberGetTypeID())
  {
    sub_10036CAF0("invalid type for mach time", v54, v55, v56, v57, v58, v59, v60, v63);
    CFRelease(Mutable);
    goto LABEL_16;
  }
  CFNumberGetValue(v52, kCFNumberLongLongType, &v63);
  CFRelease(Mutable);
  v61 = valuePtr;
  *(_QWORD *)a9 = v63;
  *(_QWORD *)(a9 + 8) = v61;
  v62 = 1;
LABEL_17:
  *(_BYTE *)(a9 + 16) = v62;
  std::mutex::unlock(v11);
}

void sub_1003AA238(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

const void **sub_1003AA250@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, unint64_t *a9@<X8>)
{
  const __CFData *v10;
  const UInt8 *BytePtr;
  CFIndex Length;
  _BYTE *v13;
  uint64_t v14;
  unint64_t v15;
  _BYTE *v16;
  unint64_t v17;
  _BYTE *v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  char *v22;
  char *v23;
  _BYTE *v24;
  _BYTE *v25;
  char v26;
  CFDataRef theData;

  *a9 = 0;
  a9[1] = 0;
  a9[2] = 0;
  v10 = (const __CFData *)sub_10036DA30(a1 + 752, a2, a3, a4, a5, a6, a7, a8);
  theData = v10;
  if (v10)
  {
    BytePtr = CFDataGetBytePtr(v10);
    if (BytePtr)
    {
      Length = CFDataGetLength(theData);
      if (Length)
      {
        v13 = 0;
        v14 = 0;
        do
        {
          v15 = a9[2];
          if ((unint64_t)v13 >= v15)
          {
            v17 = *a9;
            v18 = &v13[-*a9];
            v19 = (unint64_t)(v18 + 1);
            if ((uint64_t)(v18 + 1) < 0)
              sub_100026E7C();
            v20 = v15 - v17;
            if (2 * v20 > v19)
              v19 = 2 * v20;
            if (v20 >= 0x3FFFFFFFFFFFFFFFLL)
              v21 = 0x7FFFFFFFFFFFFFFFLL;
            else
              v21 = v19;
            if (v21)
              v22 = (char *)operator new(v21);
            else
              v22 = 0;
            v23 = &v18[(_QWORD)v22];
            v24 = &v18[(_QWORD)v22];
            *v24 = BytePtr[v14];
            v16 = v24 + 1;
            if (v13 != (_BYTE *)v17)
            {
              v25 = &v13[~v17];
              do
              {
                v26 = *--v13;
                (v25--)[(_QWORD)v22] = v26;
              }
              while (v13 != (_BYTE *)v17);
              v13 = (_BYTE *)*a9;
              v23 = v22;
            }
            *a9 = (unint64_t)v23;
            a9[1] = (unint64_t)v16;
            a9[2] = (unint64_t)&v22[v21];
            if (v13)
              operator delete(v13);
          }
          else
          {
            *v13 = BytePtr[v14];
            v16 = v13 + 1;
          }
          a9[1] = (unint64_t)v16;
          ++v14;
          v13 = v16;
        }
        while (v14 != Length);
      }
    }
  }
  return sub_1003AD25C((const void **)&theData);
}

void sub_1003AA3AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  void *v4;
  va_list va;

  va_start(va, a2);
  sub_1003AD25C((const void **)va);
  v4 = *(void **)v2;
  if (*(_QWORD *)v2)
  {
    *(_QWORD *)(v2 + 8) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1003AA3DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  dispatch_semaphore_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  dispatch_time_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  unsigned int i;
  NSObject *v62;
  dispatch_time_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD block[5];
  unsigned __int8 v81;

  v81 = 0;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 0;
  if (!*(_BYTE *)(a1 + 296))
  {
    v50 = "perform connect before FW load";
LABEL_12:
    sub_10036CAF0(v50, a2, a3, a4, a5, a6, a7, a8, v78);
    return 0;
  }
  v9 = a2;
  v11 = dispatch_semaphore_create(0);
  *(_QWORD *)(a1 + 1184) = v11;
  if (!v11)
  {
    v50 = "failed to create event semaphore";
    goto LABEL_12;
  }
  if ((sub_1003AA668((uint64_t)v11, 0) & 1) == 0)
  {
    sub_10036CAF0("failed to set CalDataPushed property to false", v12, v13, v14, v15, v16, v17, v18, v78);
    *(_BYTE *)(a3 + 18) = 1;
    dispatch_release(*(dispatch_object_t *)(a1 + 1184));
    v49 = 0;
    *(_QWORD *)(a1 + 1184) = 0;
    return v49;
  }
  if (clock_gettime_nsec_np(_CLOCK_MONOTONIC_RAW) <= 0x4614FF81FFLL)
    v26 = 15000000000;
  else
    v26 = 5000000000;
  sub_10036C9B0("uwb init done timeout = %llu ns, cal event timeout = %llu ns, time since system boot = %llu s", v19, v20, v21, v22, v23, v24, v25, v26);
  if ((sub_10036D844(a1 + 752, (_DWORD *)a3, v27, v28, v29, v30, v31, v32) & 1) == 0)
  {
    sub_10036CAF0("firmware download failed", v33, v34, v35, v36, v37, v38, v39, v79);
LABEL_15:
    v49 = 0;
    goto LABEL_16;
  }
  v40 = *(NSObject **)(a1 + 1184);
  v41 = dispatch_time(0, v26);
  if (dispatch_semaphore_wait(v40, v41))
  {
    sub_10036CAF0("timeout on uwb init done event", v42, v43, v44, v45, v46, v47, v48, v79);
    v49 = 0;
    *(_BYTE *)(a3 + 17) = 1;
    goto LABEL_16;
  }
  if (v9)
  {
    v52 = sub_10036D91C(a1 + 752, 4, &v81, 0, 0, a3, v47, v48);
    v60 = v52;
    if ((v52 & 1) == 0)
      sub_10036CAF0("failed to load calibration", v53, v54, v55, v56, v57, v58, v59, v79);
    if (v81)
    {
      for (i = 0; i < v81; ++i)
      {
        v62 = *(NSObject **)(a1 + 1184);
        v63 = dispatch_time(0, v26);
        v52 = dispatch_semaphore_wait(v62, v63);
        if (v52)
        {
          sub_10036CAF0("timeout on calibration event", v64, v65, v66, v67, v68, v69, v70, v79);
          v60 = 0;
          *(_BYTE *)(a3 + 16) = 1;
        }
      }
    }
    if ((v60 & 1) == 0)
    {
      v49 = v60 & 1;
      goto LABEL_16;
    }
    v49 = 1;
    if ((sub_1003AA668(v52, 1) & 1) == 0)
    {
      sub_10036CAF0("failed to set CalDataPushed property to true", v71, v72, v73, v74, v75, v76, v77, v79);
      *(_BYTE *)(a3 + 19) = 1;
      goto LABEL_15;
    }
  }
  else
  {
    v49 = 1;
  }
LABEL_16:
  if (*(_QWORD *)(a1 + 1184))
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 0x40000000;
    block[2] = sub_1003AA860;
    block[3] = &unk_100818610;
    block[4] = a1;
    dispatch_async_and_wait(*(dispatch_queue_t *)(a1 + 1192), block);
  }
  return v49;
}

uint64_t sub_1003AA668(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const __CFDictionary *v9;
  CFMutableDictionaryRef MutableCopy;
  CFStringRef v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  CFStringRef v19;
  BOOL v20;
  io_service_t MatchingService;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  BOOL v37;
  char *v38;
  uint64_t v39;
  void *v40;
  void *outputStruct;
  uint64_t input;
  io_connect_t connect;
  char inputStruct;
  char cStr[24];

  inputStruct = a2;
  connect = 0;
  input = 0;
  strcpy(cStr, "rose-supervisor");
  v9 = IOServiceMatching("AppleSPUInterface");
  if (!v9)
  {
    sub_10036CAF0("Failed to create a matching dictionary", v2, v3, v4, v5, v6, v7, v8, (uint64_t)outputStruct);
    LODWORD(MutableCopy) = 0;
    v19 = 0;
LABEL_21:
    v39 = 0;
    goto LABEL_22;
  }
  MutableCopy = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0, v9);
  v11 = CFStringCreateWithCString(kCFAllocatorDefault, cStr, 0x8000100u);
  v19 = v11;
  if (MutableCopy)
    v20 = v11 == 0;
  else
    v20 = 1;
  if (v20)
  {
    sub_10036CAF0("Unable to create CF Objects", v12, v13, v14, v15, v16, v17, v18, (uint64_t)outputStruct);
    if (MutableCopy)
    {
      CFRelease(MutableCopy);
      LODWORD(MutableCopy) = 0;
    }
    goto LABEL_21;
  }
  CFDictionarySetValue(MutableCopy, CFSTR("IONameMatch"), v11);
  MatchingService = IOServiceGetMatchingService(kIOMainPortDefault, MutableCopy);
  LODWORD(MutableCopy) = MatchingService;
  if (!MatchingService)
  {
    v38 = "Can't find the rose-supervisor service";
LABEL_20:
    sub_10036CAF0(v38, v22, v23, v24, v25, v26, v27, v28, (uint64_t)outputStruct);
    goto LABEL_21;
  }
  v36 = IOServiceOpen(MatchingService, mach_task_self_, 0, &connect);
  if ((_DWORD)v36)
    v37 = 1;
  else
    v37 = connect == 0;
  if (v37)
  {
    sub_10036CAF0("Unable to open rose-supervisor service: 0x%X", v29, v30, v31, v32, v33, v34, v35, v36);
    goto LABEL_21;
  }
  input = 213;
  v39 = 1;
  v40 = (void *)IOConnectCallMethod(connect, 1u, &input, 1u, &inputStruct, 1uLL, 0, 0, 0, 0);
  if ((_DWORD)v40)
  {
    outputStruct = v40;
    v38 = "Error while trying to set the CalDataPushed property: 0x%X";
    goto LABEL_20;
  }
LABEL_22:
  if (connect)
    IOServiceClose(connect);
  if ((_DWORD)MutableCopy)
    IOObjectRelease((io_object_t)MutableCopy);
  if (v19)
    CFRelease(v19);
  if (v9)
    CFRelease(v9);
  return v39;
}

void sub_1003AA860(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  dispatch_release(*(dispatch_object_t *)(v1 + 1184));
  *(_QWORD *)(v1 + 1184) = 0;
}

uint64_t sub_1003AA888(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  if (*(_BYTE *)(a1 + 296))
  {
    v15 = sub_10036D794(a1 + 752, a2, a3, a4, a5, a6, a7, a8);
    if (v15)
      sub_1000051BC("successfully gathered rose preflight info", v8, v9, v10, v11, v12, v13, v14, v17);
    else
      sub_10036CAF0("getting chip preflight info failed", v8, v9, v10, v11, v12, v13, v14, v17);
  }
  else
  {
    sub_10036CAF0("connect to Rose before querying preflight info", a2, a3, a4, a5, a6, a7, a8, v17);
    return 0;
  }
  return v15;
}

uint64_t sub_1003AA8EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v17;
  uint64_t v18;

  if (!*(_BYTE *)(a1 + 296))
  {
    v17 = "connect to Rose before querying chip info";
LABEL_8:
    sub_10036CAF0(v17, a2, a3, a4, a5, a6, a7, a8, v18);
    return 0;
  }
  if (a2)
  {
    if ((sub_10036DC90(a1 + 752, a2, a3, a4, a5, a6, a7, a8) & 1) != 0)
    {
      sub_1000051BC("boardID: 0x%04hx chipID: 0x%04hx ECID: 0x%016llx", a2, a3, a4, a5, a6, a7, a8, *(unsigned __int16 *)(a2 + 10));
      sub_1000051BC("bootMode: 0x%x prodMode: 0x%x secureMode: 0x%x securityDomain: 0x%x", v9, v10, v11, v12, v13, v14, v15, *(unsigned int *)(a2 + 12));
      return 1;
    }
    v17 = "getting chip info failed";
    goto LABEL_8;
  }
  sub_10036CAF0("%s: invalid parameter", 0, a3, a4, a5, a6, a7, a8, (uint64_t)"getChipInfo");
  return 0;
}

uint64_t sub_1003AA9AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  int v34;
  uint64_t v36;
  std::chrono::nanoseconds __ns;

  if (!*(_BYTE *)(a1 + 296))
  {
    sub_10036CAF0("connect to Rose before resetting chip", a2, a3, a4, a5, a6, a7, a8, v36);
    return 0;
  }
  v9 = sub_100004784();
  if (sub_1003956D8((uint64_t)v9))
  {
    v16 = 0;
    if (!sub_10036E624(a1 + 752, 0, v10, v11, v12, v13, v14, v15))
      return v16;
    __ns.__rep_ = 200000000;
    std::this_thread::sleep_for (&__ns);
  }
  v17 = sub_100004784();
  if (sub_100395734((uint64_t)v17))
  {
    if (sub_1003AAAA4(a1))
    {
      __ns.__rep_ = 70000000;
      std::this_thread::sleep_for (&__ns);
      v32 = "successfully applied reset glitch workaround, proceeding with reset";
    }
    else
    {
      v32 = "failed to apply reset glitch workaround, proceeding with reset anyway";
    }
    sub_1000051BC(v32, v25, v26, v27, v28, v29, v30, v31, v36);
  }
  v33 = a1 + 752;
  v34 = 5;
  do
  {
    v16 = sub_10036D5F8(v33, v18, v19, v20, v21, v22, v23, v24);
    if ((v16 & 1) != 0)
      break;
    __ns.__rep_ = 20000000;
    std::this_thread::sleep_for (&__ns);
    --v34;
  }
  while (v34);
  return v16;
}

BOOL sub_1003AAAA4(uint64_t a1)
{
  _BYTE *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int16 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  int v33;
  void *__p;
  void *v35;
  char v36;
  _BYTE v37[8];
  void *v38[3];
  char v39;
  int __src;
  _BYTE *v41;
  _BYTE *v42;
  uint64_t v43;

  v41 = 0;
  v42 = 0;
  v43 = 0;
  __src = 16496;
  sub_10003F150((unint64_t *)&v41, 4uLL);
  v2 = v41;
  sub_1000051BC("send out GPIO power switch disable command", v3, v4, v5, v6, v7, v8, v9, v31);
  sub_1003A1EE0((char *)&__src, 4uLL, v2, 1);
  v37[0] = 0;
  v39 = 0;
  std::mutex::lock((std::mutex *)(a1 + 232));
  if (sub_1003A8290(a1, (uint64_t)v41, v42 - v41, 0x100000096, v10, v11, v12, v13))
  {
    std::mutex::unlock((std::mutex *)(a1 + 232));
  }
  else
  {
    sub_1003A7E94(a1, 112, 0, 150, (uint64_t)&v33);
    sub_1003AD1B4((uint64_t)v37, &v33);
    if (v36 && __p)
    {
      v35 = __p;
      operator delete(__p);
    }
    std::mutex::unlock((std::mutex *)(a1 + 232));
    if (v39)
    {
      sub_100395AD4((_QWORD *)(a1 + 504), (uint64_t)v37, (uint64_t *)v38, v17, v18, v19, v20, v21);
      v22 = sub_100397884((uint64_t *)v38);
      sub_1000051BC("received GPIO power switch disable response with status 0x%04hx", v23, v24, v25, v26, v27, v28, v29, v22);
      v14 = v22 == 0;
      goto LABEL_9;
    }
    sub_10036CAF0("timed out waiting for GPIO power switch disable response", v15, v16, v17, v18, v19, v20, v21, v32);
  }
  v14 = 0;
LABEL_9:
  if (v39 && v38[0])
  {
    v38[1] = v38[0];
    operator delete(v38[0]);
  }
  if (v41)
  {
    v42 = v41;
    operator delete(v41);
  }
  return v14;
}

void sub_1003AAC10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, char a20)
{
  uint64_t v20;
  void *v22;

  if (a20 && __p)
    operator delete(__p);
  v22 = *(void **)(v20 - 40);
  if (v22)
  {
    *(_QWORD *)(v20 - 32) = v22;
    operator delete(v22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003AAC78(uint64_t a1, uint64_t a2, std::string::size_type a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_10039EDD0(a1 + 1040, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_1003AAC80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_10036E398(a1 + 752, a2, a3, a4, a5, a6, a7, a8);
}

CFDataRef sub_1003AAC88(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  CFDataRef v16;
  char *v17;
  uint64_t v19;

  if (!*((_DWORD *)sub_100004784() + 186))
  {
    v17 = "querying chip public key isn't supported for R1";
LABEL_7:
    sub_10036CAF0(v17, v2, v3, v4, v5, v6, v7, v8, v19);
    return 0;
  }
  if (!*(_BYTE *)(a1 + 296))
  {
    v17 = "connect to Rose before querying chip public key";
    goto LABEL_7;
  }
  v16 = sub_10036E728(a1 + 752, v2, v3, v4, v5, v6, v7, v8);
  if (v16)
    sub_1000051BC("successfully gathered rose chip public key", v9, v10, v11, v12, v13, v14, v15, v19);
  else
    sub_10036CAF0("getting chip public key failed", v9, v10, v11, v12, v13, v14, v15, v19);
  return v16;
}

uint64_t sub_1003AAD08(uint64_t a1, _QWORD *a2, int a3, int a4)
{
  int v7;
  std::logic_error *exception;
  uint64_t v9;
  uint64_t v10;
  const void *v11;
  char *v12;
  _BYTE *v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void **v22;
  _BYTE *v23;
  _BYTE *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void **v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  _BYTE *v41;
  char v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  const void *v46;
  char *v47;
  _BYTE *v48;
  _BYTE *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void **v57;
  _BYTE *v58;
  _BYTE *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void **v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  _BYTE *v76;
  char v77;
  uint64_t v79;
  char v80;
  char v81;
  void *v83[2];
  void *v84;
  uint64_t v85;
  void *v86;
  uint64_t v87;
  char *v88;
  void *__p;
  uint64_t v90;
  uint64_t v91;
  void *v92;
  _BYTE *v93;
  uint64_t v94;
  void **v95;
  char v96;
  __int128 v97;
  void *v98;
  uint64_t v99;
  _QWORD v100[2];

  v7 = *((_DWORD *)sub_100004784() + 187);
  if (v7 == 1)
  {
    v44 = a2[1];
    if (*a2 == v44)
    {
      v81 = 1;
    }
    else
    {
      v45 = *a2 + 8;
      v81 = 1;
      do
      {
        v46 = *(const void **)(v45 - 8);
        v92 = 0;
        v93 = 0;
        v94 = 0;
        sub_10003A474(&v92, v46, (uint64_t)v46 + 23, 0x17uLL);
        if (a4)
        {
          v47 = (char *)v92;
          if (v93 - (_BYTE *)v92 != 23)
            __assert_rtn("sendUwbTxPowerTable", "libRose.cpp", 1660, "r1PowerTableEntry.size() == sizeof(set_cfg_pwrtbl_entry_v2_t)");
          if (*(_BYTE *)v92 != 2)
            __assert_rtn("sendUwbTxPowerTable", "libRose.cpp", 1662, "ptEntry->pwr_tbl_ver == SET_CFG_PWRTBL_ENTRY_V2_VERSION");
          sub_10000BF04(&v97, "UWB PwrTblMax before:\n");
          v49 = v92;
          v48 = v93;
          sub_10000BF04(&__p, "==========");
          sub_1003A21CC((uint64_t)&v97, (uint64_t)v49, v48 - v49, 0x10u, (uint64_t)&__p);
          if (SHIBYTE(v91) < 0)
            operator delete(__p);
          if (SHIBYTE(v98) < 0)
            operator delete((void *)v97);
          v57 = v83;
          if (SHIBYTE(v84) < 0)
            v57 = (void **)v83[0];
          sub_10036C9B0("%s", v50, v51, v52, v53, v54, v55, v56, (uint64_t)v57);
          *(_DWORD *)(v47 + 14) = 5242960;
          *((_WORD *)v47 + 9) = 80;
          sub_10000BF04(&__p, "UWB PwrTblMax after:\n");
          v59 = v92;
          v58 = v93;
          sub_10000BF04(&v86, "==========");
          sub_1003A21CC((uint64_t)&__p, (uint64_t)v59, v58 - v59, 0x10u, (uint64_t)&v86);
          if (SHIBYTE(v84) < 0)
            operator delete(v83[0]);
          *(_OWORD *)v83 = v97;
          v84 = v98;
          HIBYTE(v98) = 0;
          LOBYTE(v97) = 0;
          if (SHIBYTE(v88) < 0)
            operator delete(v86);
          if (SHIBYTE(v91) < 0)
            operator delete(__p);
          v67 = v83;
          if (SHIBYTE(v84) < 0)
            v67 = (void **)v83[0];
          sub_10036C9B0("%s", v60, v61, v62, v63, v64, v65, v66, (uint64_t)v67);
          if (SHIBYTE(v84) < 0)
            operator delete(v83[0]);
        }
        LOBYTE(v83[0]) = 31;
        v84 = 0;
        v85 = 0;
        v83[1] = 0;
        sub_1001530EC(&v83[1], v92, (uint64_t)v93, v93 - (_BYTE *)v92);
        LOBYTE(v97) = v83[0];
        v98 = 0;
        v99 = 0;
        *((_QWORD *)&v97 + 1) = 0;
        sub_1001530EC((_QWORD *)&v97 + 1, v83[1], (uint64_t)v84, (size_t)v84 - (unint64_t)v83[1]);
        v86 = 0;
        v87 = 0;
        v88 = 0;
        v95 = &v86;
        v96 = 0;
        v86 = operator new(0x20uLL);
        v87 = (uint64_t)v86;
        v88 = (char *)v86 + 32;
        v87 = sub_100210EC0((uint64_t)&v88, (uint64_t)&v97, (uint64_t)v100, (uint64_t)v86);
        v90 = 0;
        v91 = 0;
        __p = 0;
        sub_100210B80(&__p, (uint64_t)v86, v87, (v87 - (uint64_t)v86) >> 5);
        v95 = &v86;
        sub_100153338(&v95);
        if (*((_QWORD *)&v97 + 1))
        {
          v98 = (void *)*((_QWORD *)&v97 + 1);
          operator delete(*((void **)&v97 + 1));
        }
        v75 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)a1 + 64))(a1, &__p);
        if ((v75 & 1) != 0)
        {
          if (a3)
          {
            v76 = operator new(1uLL);
            *v76 = 31;
            v98 = 0;
            v97 = 0uLL;
            sub_1001530EC(&v97, v76, (uint64_t)(v76 + 1), 1uLL);
            operator delete(v76);
            (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)a1 + 56))(a1, &v97);
            if ((_QWORD)v97)
            {
              *((_QWORD *)&v97 + 1) = v97;
              operator delete((void *)v97);
            }
          }
        }
        else
        {
          sub_10036CAF0("PRRose::setConfigParameters: failed to set power table", v68, v69, v70, v71, v72, v73, v74, v79);
          v81 = 0;
        }
        *(_QWORD *)&v97 = &__p;
        sub_100153338((void ***)&v97);
        if (v83[1])
        {
          v84 = v83[1];
          operator delete(v83[1]);
        }
        if (v92)
        {
          v93 = v92;
          operator delete(v92);
        }
        if (v45 == v44)
          v77 = 0;
        else
          v77 = v75;
        v45 += 8;
      }
      while ((v77 & 1) != 0);
    }
    v43 = v81 & 1;
    goto LABEL_82;
  }
  if (v7 != 2)
  {
    if (!v7)
    {
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "HSI version error");
    }
    goto LABEL_42;
  }
  v9 = a2[1];
  if (*a2 == v9)
  {
LABEL_42:
    v43 = 1;
LABEL_82:
    v80 = v43;
    return v80 & 1;
  }
  v10 = *a2 + 8;
  v80 = 1;
  do
  {
    v11 = *(const void **)(v10 - 8);
    v92 = 0;
    v93 = 0;
    v94 = 0;
    sub_10003A474(&v92, v11, (uint64_t)v11 + 33, 0x21uLL);
    if (a4)
    {
      v12 = (char *)v92;
      if (v93 - (_BYTE *)v92 != 33)
        __assert_rtn("sendUwbTxPowerTable", "libRose.cpp", 1693, "r2PowerTableEntry.size() == sizeof(set_cfg_pwrtbl_entry_v3_t)");
      if (*(_BYTE *)v92 != 3)
        __assert_rtn("sendUwbTxPowerTable", "libRose.cpp", 1696, "ptEntry->pwr_tbl_ver == SET_CFG_PWRTBL_ENTRY_V3_VERSION");
      sub_10000BF04(&v97, "UWB PwrTblMax before:\n");
      v14 = v92;
      v13 = v93;
      sub_10000BF04(&__p, "==========");
      sub_1003A21CC((uint64_t)&v97, (uint64_t)v14, v13 - v14, 0x10u, (uint64_t)&__p);
      if (SHIBYTE(v91) < 0)
        operator delete(__p);
      if (SHIBYTE(v98) < 0)
        operator delete((void *)v97);
      v22 = v83;
      if (SHIBYTE(v84) < 0)
        v22 = (void **)v83[0];
      sub_10036C9B0("%s", v15, v16, v17, v18, v19, v20, v21, (uint64_t)v22);
      *(_QWORD *)(v12 + 19) = 0x50005000500050;
      sub_10000BF04(&__p, "UWB PwrTblMax after:\n");
      v24 = v92;
      v23 = v93;
      sub_10000BF04(&v86, "==========");
      sub_1003A21CC((uint64_t)&__p, (uint64_t)v24, v23 - v24, 0x10u, (uint64_t)&v86);
      if (SHIBYTE(v84) < 0)
        operator delete(v83[0]);
      *(_OWORD *)v83 = v97;
      v84 = v98;
      HIBYTE(v98) = 0;
      LOBYTE(v97) = 0;
      if (SHIBYTE(v88) < 0)
        operator delete(v86);
      if (SHIBYTE(v91) < 0)
        operator delete(__p);
      v32 = v83;
      if (SHIBYTE(v84) < 0)
        v32 = (void **)v83[0];
      sub_10036C9B0("%s", v25, v26, v27, v28, v29, v30, v31, (uint64_t)v32);
      if (SHIBYTE(v84) < 0)
        operator delete(v83[0]);
    }
    LOBYTE(v83[0]) = 41;
    v84 = 0;
    v85 = 0;
    v83[1] = 0;
    sub_1001530EC(&v83[1], v92, (uint64_t)v93, v93 - (_BYTE *)v92);
    LOBYTE(v97) = v83[0];
    v98 = 0;
    v99 = 0;
    *((_QWORD *)&v97 + 1) = 0;
    sub_1001530EC((_QWORD *)&v97 + 1, v83[1], (uint64_t)v84, (size_t)v84 - (unint64_t)v83[1]);
    v86 = 0;
    v87 = 0;
    v88 = 0;
    v95 = &v86;
    v96 = 0;
    v86 = operator new(0x20uLL);
    v87 = (uint64_t)v86;
    v88 = (char *)v86 + 32;
    v87 = sub_100210EC0((uint64_t)&v88, (uint64_t)&v97, (uint64_t)v100, (uint64_t)v86);
    v90 = 0;
    v91 = 0;
    __p = 0;
    sub_100210B80(&__p, (uint64_t)v86, v87, (v87 - (uint64_t)v86) >> 5);
    v95 = &v86;
    sub_100153338(&v95);
    if (*((_QWORD *)&v97 + 1))
    {
      v98 = (void *)*((_QWORD *)&v97 + 1);
      operator delete(*((void **)&v97 + 1));
    }
    v40 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)a1 + 64))(a1, &__p);
    if ((v40 & 1) != 0)
    {
      if (a3)
      {
        v41 = operator new(1uLL);
        *v41 = 41;
        v98 = 0;
        v97 = 0uLL;
        sub_1001530EC(&v97, v41, (uint64_t)(v41 + 1), 1uLL);
        operator delete(v41);
        (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)a1 + 56))(a1, &v97);
        if ((_QWORD)v97)
        {
          *((_QWORD *)&v97 + 1) = v97;
          operator delete((void *)v97);
        }
      }
    }
    else
    {
      sub_10036CAF0("PRRose::setConfigParameters: failed to set power table", v33, v34, v35, v36, v37, v38, v39, v79);
      v80 = 0;
    }
    *(_QWORD *)&v97 = &__p;
    sub_100153338((void ***)&v97);
    if (v83[1])
    {
      v84 = v83[1];
      operator delete(v83[1]);
    }
    if (v92)
    {
      v93 = v92;
      operator delete(v92);
    }
    if (v10 == v9)
      v42 = 0;
    else
      v42 = v40;
    v10 += 8;
  }
  while ((v42 & 1) != 0);
  return v80 & 1;
}

void sub_1003AB538(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  void *v33;

  __cxa_free_exception(v33);
  _Unwind_Resume(a1);
}

uint64_t sub_1003AB6C8(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v9;
  uint64_t v11;
  const void *v12;
  char *v13;
  _BYTE *v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void **v23;
  _BYTE *v24;
  _BYTE *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void **v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  _BYTE *v42;
  char v43;
  uint64_t v45;
  int v46;
  char v47;
  void *v48[2];
  void *v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  char *v53;
  void *__p[2];
  uint64_t v55;
  void *v56;
  _BYTE *v57;
  uint64_t v58;
  void **v59;
  char v60;
  __int128 v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;

  v46 = a3;
  v8 = a2[1];
  if (*a2 == v8)
  {
    sub_10036CAF0("libRose::sendNBTxPowerTable failure: NB power tables are empty", (uint64_t)a2, a3, a4, a5, a6, a7, a8, v45);
    v47 = 0;
  }
  else
  {
    v9 = a4;
    v11 = *a2 + 8;
    v47 = 1;
    do
    {
      v12 = *(const void **)(v11 - 8);
      v56 = 0;
      v57 = 0;
      v58 = 0;
      sub_10003A474(&v56, v12, (uint64_t)v12 + 18, 0x12uLL);
      if (v9)
      {
        v13 = (char *)v56;
        if (v57 - (_BYTE *)v56 != 18)
          __assert_rtn("sendNBTxPowerTable", "libRose.cpp", 1743, "powerTableRow.size() == sizeof(set_cfg_nb_reg_tbl_entry_t)");
        if (*(_BYTE *)v56 != 1)
          __assert_rtn("sendNBTxPowerTable", "libRose.cpp", 1747, "ptEntry->ver_type == SET_CFG_NB_REG_TBL_ENTRY_VERSION");
        sub_10000BF04(&v61, "NB PwrTblMax before:\n");
        v14 = v56;
        v15 = v57;
        sub_10000BF04(__p, "==========");
        sub_1003A21CC((uint64_t)&v61, (uint64_t)v14, v15 - v14, 0x10u, (uint64_t)__p);
        if (SHIBYTE(v55) < 0)
          operator delete(__p[0]);
        if (SHIBYTE(v62) < 0)
          operator delete((void *)v61);
        v23 = v48;
        if (SHIBYTE(v49) < 0)
          v23 = (void **)v48[0];
        sub_10036C9B0("%s", v16, v17, v18, v19, v20, v21, v22, (uint64_t)v23);
        *(_DWORD *)(v13 + 6) = 26214800;
        *(_DWORD *)(v13 + 14) = 26214800;
        sub_10000BF04(__p, "NB PwrTblMax after:\n");
        v24 = v56;
        v25 = v57;
        sub_10000BF04(&v51, "==========");
        sub_1003A21CC((uint64_t)__p, (uint64_t)v24, v25 - v24, 0x10u, (uint64_t)&v51);
        if (SHIBYTE(v49) < 0)
          operator delete(v48[0]);
        *(_OWORD *)v48 = v61;
        v49 = v62;
        HIBYTE(v62) = 0;
        LOBYTE(v61) = 0;
        if (SHIBYTE(v53) < 0)
          operator delete(v51);
        if (SHIBYTE(v55) < 0)
          operator delete(__p[0]);
        v33 = v48;
        if (SHIBYTE(v49) < 0)
          v33 = (void **)v48[0];
        sub_10036C9B0("%s", v26, v27, v28, v29, v30, v31, v32, (uint64_t)v33);
        if (SHIBYTE(v49) < 0)
          operator delete(v48[0]);
      }
      LOBYTE(v48[0]) = 46;
      v49 = 0;
      v50 = 0;
      v48[1] = 0;
      sub_1001530EC(&v48[1], v56, (uint64_t)v57, v57 - (_BYTE *)v56);
      LOBYTE(v61) = v48[0];
      v62 = 0;
      v63 = 0;
      *((_QWORD *)&v61 + 1) = 0;
      sub_1001530EC((_QWORD *)&v61 + 1, v48[1], (uint64_t)v49, (size_t)v49 - (unint64_t)v48[1]);
      v51 = 0;
      v52 = 0;
      v53 = 0;
      v59 = &v51;
      v60 = 0;
      v51 = operator new(0x20uLL);
      v52 = (uint64_t)v51;
      v53 = (char *)v51 + 32;
      v52 = sub_100210EC0((uint64_t)&v53, (uint64_t)&v61, (uint64_t)&v64, (uint64_t)v51);
      __p[1] = 0;
      v55 = 0;
      __p[0] = 0;
      sub_100210B80(__p, (uint64_t)v51, v52, (v52 - (uint64_t)v51) >> 5);
      v59 = &v51;
      sub_100153338(&v59);
      if (*((_QWORD *)&v61 + 1))
      {
        v62 = (void *)*((_QWORD *)&v61 + 1);
        operator delete(*((void **)&v61 + 1));
      }
      v41 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)a1 + 64))(a1, __p);
      if ((v41 & 1) != 0)
      {
        if (v46)
        {
          v42 = operator new(1uLL);
          *v42 = 46;
          v62 = 0;
          v61 = 0uLL;
          sub_1001530EC(&v61, v42, (uint64_t)(v42 + 1), 1uLL);
          operator delete(v42);
          (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)a1 + 56))(a1, &v61);
          if ((_QWORD)v61)
          {
            *((_QWORD *)&v61 + 1) = v61;
            operator delete((void *)v61);
          }
        }
      }
      else
      {
        sub_10036CAF0("libRose::sendNBTxPowerTable: failed to set NB power table", v34, v35, v36, v37, v38, v39, v40, v45);
        v47 = 0;
      }
      *(_QWORD *)&v61 = __p;
      sub_100153338((void ***)&v61);
      if (v48[1])
      {
        v49 = v48[1];
        operator delete(v48[1]);
      }
      if (v56)
      {
        v57 = v56;
        operator delete(v56);
      }
      if (v11 == v8)
        v43 = 0;
      else
        v43 = v41;
      v11 += 8;
    }
    while ((v43 & 1) != 0);
  }
  return v47 & 1;
}

void sub_1003ABAFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, void **a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  uint64_t v33;
  void *v35;

  v35 = *(void **)(v33 - 128);
  if (v35)
  {
    *(_QWORD *)(v33 - 120) = v35;
    operator delete(v35);
  }
  a18 = &a24;
  sub_100153338(&a18);
  if (__p)
    operator delete(__p);
  if (a30)
  {
    a31 = (uint64_t)a30;
    operator delete(a30);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1003ABC34(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v9;
  uint64_t v11;
  const void *v12;
  char *v13;
  _BYTE *v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void **v23;
  _BYTE *v24;
  _BYTE *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void **v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  _BYTE *v42;
  char v43;
  uint64_t v45;
  int v46;
  char v47;
  void *v48[2];
  void *v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  char *v53;
  void *__p[2];
  uint64_t v55;
  void *v56;
  _BYTE *v57;
  uint64_t v58;
  void **v59;
  char v60;
  __int128 v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;

  v46 = a3;
  v8 = a2[1];
  if (*a2 == v8)
  {
    sub_10036CAF0("libRose::sendNBSARTable: failure: NB SAR tables are empty", (uint64_t)a2, a3, a4, a5, a6, a7, a8, v45);
    v47 = 0;
  }
  else
  {
    v9 = a4;
    v11 = *a2 + 8;
    v47 = 1;
    do
    {
      v12 = *(const void **)(v11 - 8);
      v56 = 0;
      v57 = 0;
      v58 = 0;
      sub_10003A474(&v56, v12, (uint64_t)v12 + 38, 0x26uLL);
      if (v9)
      {
        v13 = (char *)v56;
        if (v57 - (_BYTE *)v56 != 38)
          __assert_rtn("sendNBSARTable", "libRose.cpp", 1791, "powerTableRow.size() == sizeof(set_cfg_nb_sar_tbl_entry_t)");
        if (*(_BYTE *)v56 != 2)
          __assert_rtn("sendNBSARTable", "libRose.cpp", 1795, "sarEntry->ver_type == SET_CFG_NB_SAR_TBL_ENTRY_VERSION");
        sub_10000BF04(&v61, "NB SARTbl before:\n");
        v14 = v56;
        v15 = v57;
        sub_10000BF04(__p, "==========");
        sub_1003A21CC((uint64_t)&v61, (uint64_t)v14, v15 - v14, 0x10u, (uint64_t)__p);
        if (SHIBYTE(v55) < 0)
          operator delete(__p[0]);
        if (SHIBYTE(v62) < 0)
          operator delete((void *)v61);
        v23 = v48;
        if (SHIBYTE(v49) < 0)
          v23 = (void **)v48[0];
        sub_10036C9B0("%s", v16, v17, v18, v19, v20, v21, v22, (uint64_t)v23);
        memset_pattern16(v13 + 6, &unk_100472C70, 0x20uLL);
        sub_10000BF04(__p, "NB SARTbl after:\n");
        v24 = v56;
        v25 = v57;
        sub_10000BF04(&v51, "==========");
        sub_1003A21CC((uint64_t)__p, (uint64_t)v24, v25 - v24, 0x10u, (uint64_t)&v51);
        if (SHIBYTE(v49) < 0)
          operator delete(v48[0]);
        *(_OWORD *)v48 = v61;
        v49 = v62;
        HIBYTE(v62) = 0;
        LOBYTE(v61) = 0;
        if (SHIBYTE(v53) < 0)
          operator delete(v51);
        if (SHIBYTE(v55) < 0)
          operator delete(__p[0]);
        v33 = v48;
        if (SHIBYTE(v49) < 0)
          v33 = (void **)v48[0];
        sub_10036C9B0("%s", v26, v27, v28, v29, v30, v31, v32, (uint64_t)v33);
        if (SHIBYTE(v49) < 0)
          operator delete(v48[0]);
      }
      LOBYTE(v48[0]) = 47;
      v49 = 0;
      v50 = 0;
      v48[1] = 0;
      sub_1001530EC(&v48[1], v56, (uint64_t)v57, v57 - (_BYTE *)v56);
      LOBYTE(v61) = v48[0];
      v62 = 0;
      v63 = 0;
      *((_QWORD *)&v61 + 1) = 0;
      sub_1001530EC((_QWORD *)&v61 + 1, v48[1], (uint64_t)v49, (size_t)v49 - (unint64_t)v48[1]);
      v51 = 0;
      v52 = 0;
      v53 = 0;
      v59 = &v51;
      v60 = 0;
      v51 = operator new(0x20uLL);
      v52 = (uint64_t)v51;
      v53 = (char *)v51 + 32;
      v52 = sub_100210EC0((uint64_t)&v53, (uint64_t)&v61, (uint64_t)&v64, (uint64_t)v51);
      __p[1] = 0;
      v55 = 0;
      __p[0] = 0;
      sub_100210B80(__p, (uint64_t)v51, v52, (v52 - (uint64_t)v51) >> 5);
      v59 = &v51;
      sub_100153338(&v59);
      if (*((_QWORD *)&v61 + 1))
      {
        v62 = (void *)*((_QWORD *)&v61 + 1);
        operator delete(*((void **)&v61 + 1));
      }
      v41 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)a1 + 64))(a1, __p);
      if ((v41 & 1) != 0)
      {
        if (v46)
        {
          v42 = operator new(1uLL);
          *v42 = 47;
          v62 = 0;
          v61 = 0uLL;
          sub_1001530EC(&v61, v42, (uint64_t)(v42 + 1), 1uLL);
          operator delete(v42);
          (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)a1 + 56))(a1, &v61);
          if ((_QWORD)v61)
          {
            *((_QWORD *)&v61 + 1) = v61;
            operator delete((void *)v61);
          }
        }
      }
      else
      {
        sub_10036CAF0("libRose::sendNBSARTable: failed to set NB SAR table", v34, v35, v36, v37, v38, v39, v40, v45);
        v47 = 0;
      }
      *(_QWORD *)&v61 = __p;
      sub_100153338((void ***)&v61);
      if (v48[1])
      {
        v49 = v48[1];
        operator delete(v48[1]);
      }
      if (v56)
      {
        v57 = v56;
        operator delete(v56);
      }
      if (v11 == v8)
        v43 = 0;
      else
        v43 = v41;
      v11 += 8;
    }
    while ((v43 & 1) != 0);
  }
  return v47 & 1;
}

void sub_1003AC06C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, void **a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  uint64_t v33;
  void *v35;

  v35 = *(void **)(v33 - 128);
  if (v35)
  {
    *(_QWORD *)(v33 - 120) = v35;
    operator delete(v35);
  }
  a18 = &a24;
  sub_100153338(&a18);
  if (__p)
    operator delete(__p);
  if (a30)
  {
    a31 = (uint64_t)a30;
    operator delete(a30);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1003AC1A4(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  void *v25;
  void *v26;
  char v27;
  _BYTE v28[8];
  void *__p;
  _BYTE *v30;
  char v31;
  _BYTE __dst[5];
  char v33;

  v33 = a2;
  if (sub_1003A3620(&v33, __dst))
    return 1;
  sub_1000051BC("Updating NB SAR state: %u", v4, v5, v6, v7, v8, v9, v10, a2);
  v28[0] = 0;
  v31 = 0;
  std::mutex::lock((std::mutex *)(a1 + 232));
  if (sub_1003A8290(a1, (uint64_t)__dst, 5uLL, 0, v13, v14, v15, v16))
  {
    std::mutex::unlock((std::mutex *)(a1 + 232));
  }
  else
  {
    sub_1003A7E94(a1, 13, 0, 2000, (uint64_t)&v24);
    sub_1003AD1B4((uint64_t)v28, &v24);
    if (v27 && v25)
    {
      v26 = v25;
      operator delete(v25);
    }
    std::mutex::unlock((std::mutex *)(a1 + 232));
    if (!v31)
      return 1;
    if (v30 - (_BYTE *)__p == 8)
    {
      sub_100395AD4((_QWORD *)(a1 + 504), (uint64_t)v28, (uint64_t *)&__p, v19, v20, v21, v22, v23);
      v11 = 0;
      goto LABEL_7;
    }
    sub_10036CAF0("Size of response: %zu for SAR state command is different from the expected size: %zu", v17, v18, v19, v20, v21, v22, v23, v30 - (_BYTE *)__p);
  }
  v11 = 1;
LABEL_7:
  if (v31 && __p)
  {
    v30 = __p;
    operator delete(__p);
  }
  return v11;
}

void sub_1003AC2E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,char a21)
{
  if (a21)
  {
    if (__p)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003AC31C(uint64_t a1, _BYTE *a2)
{
  return sub_10036E49C(a1 + 752, a2);
}

uint64_t sub_1003AC324(uint64_t a1)
{
  return sub_10036E524(a1 + 752);
}

BOOL sub_1003AC32C(uint64_t a1, uint64_t a2)
{
  char v3[4];
  int v4;

  *(_WORD *)v3 = *(_WORD *)a2;
  v4 = *(unsigned __int8 *)(a2 + 2);
  return sub_1003AC368(a1, v3, 2000) == 0;
}

uint64_t sub_1003AC368(uint64_t a1, char *a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int __dst;
  void *__p;
  void *v36;
  char v37;
  _BYTE v38[8];
  void *v39;
  _BYTE *v40;
  char v41;
  _WORD v42[5];

  v12 = sub_1003A354C(a2, v42);
  if ((_DWORD)v12)
    return v12;
  sub_1000051BC("Sending SleepEnable command", v5, v6, v7, v8, v9, v10, v11, v32);
  v38[0] = 0;
  v41 = 0;
  std::mutex::lock((std::mutex *)(a1 + 232));
  if (sub_1003A8290(a1, (uint64_t)v42, 0xAuLL, 0, v14, v15, v16, v17))
  {
    std::mutex::unlock((std::mutex *)(a1 + 232));
    goto LABEL_14;
  }
  sub_1003A7E94(a1, 6, 0, a3, (uint64_t)&__dst);
  sub_1003AD1B4((uint64_t)v38, &__dst);
  if (v37 && __p)
  {
    v36 = __p;
    operator delete(__p);
  }
  std::mutex::unlock((std::mutex *)(a1 + 232));
  if (!v41)
  {
LABEL_13:
    sub_10036CAF0("Sleep Enable response failed", v18, v19, v20, v21, v22, v23, v24, v33);
    goto LABEL_14;
  }
  LOWORD(__dst) = 0;
  if (v40 - (_BYTE *)v39 != 6)
  {
    sub_10036CAF0("Size of response: %zu for sleep enable command is different from the expected size: %zu", v18, v19, v20, v21, v22, v23, v24, v40 - (_BYTE *)v39);
    goto LABEL_13;
  }
  sub_1003A1EE0((char *)v39 + 4, 2uLL, &__dst, 1);
  if (!(_WORD)__dst)
  {
    sub_1000051BC("Sleep enable command completed successfully.", v25, v26, v27, v28, v29, v30, v31, v33);
    v12 = 0;
    goto LABEL_15;
  }
  sub_10036CAF0("Error response for the sleep enable command: %d", v25, v26, v27, v28, v29, v30, v31, (unsigned __int16)__dst);
LABEL_14:
  v12 = 1;
LABEL_15:
  if (v41 && v39)
  {
    v40 = v39;
    operator delete(v39);
  }
  return v12;
}

void sub_1003AC508(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,char a21)
{
  if (a21)
  {
    if (__p)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1003AC564(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  std::chrono::nanoseconds __ns;

  if ((a2 & 1) == 0)
  {
    v10 = sub_100004784();
    if (sub_100395734((uint64_t)v10))
    {
      if (sub_1003AAAA4(a1))
      {
        __ns.__rep_ = 70000000;
        std::this_thread::sleep_for (&__ns);
        v18 = "successfully applied reset glitch workaround, proceeding with power off";
      }
      else
      {
        v18 = "failed to apply reset glitch workaround, proceeding with power off anyway";
      }
      sub_1000051BC(v18, v11, v12, v13, v14, v15, v16, v17, v30);
    }
  }
  v19 = a1 + 752;
  if ((sub_10036E5CC(v19, a2, a3, a4, a5, a6, a7, a8) & 1) != 0)
    return 1;
  v21 = 0;
  do
  {
    v22 = v21;
    __ns.__rep_ = 20000000;
    std::this_thread::sleep_for (&__ns);
    if (v22 == 4)
      break;
    v29 = sub_10036E5CC(v19, a2, v23, v24, v25, v26, v27, v28);
    v21 = v22 + 1;
  }
  while ((v29 & 1) == 0);
  return v22 < 4;
}

uint64_t sub_1003AC638(uint64_t a1, BOOL *a2)
{
  CFMutableDictionaryRef Mutable;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  CFMutableDictionaryRef v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v23;
  void *value;

  Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (Mutable)
  {
    v12 = Mutable;
    if ((sub_10036E6C0(a1 + 752, (uint64_t)Mutable, v6, v7, v8, v9, v10, v11) & 1) != 0)
    {
      value = 0;
      HIDWORD(v23) = 0;
      if (CFDictionaryGetValueIfPresent(v12, CFSTR("RosePowerState"), (const void **)&value))
      {
        if (CFNumberGetValue((CFNumberRef)value, kCFNumberIntType, (char *)&v23 + 4))
        {
          *a2 = HIDWORD(v23) != 0;
          v20 = 1;
LABEL_12:
          CFRelease(v12);
          return v20;
        }
        v21 = "Failed to read RosePowerState value from the dictionary";
      }
      else
      {
        v21 = "RosePowerState isn't present in the dictionary";
      }
      sub_10036CAF0(v21, v13, v14, v15, v16, v17, v18, v19, v23);
      v20 = 0;
      goto LABEL_12;
    }
    CFRelease(v12);
  }
  else
  {
    sub_10036CAF0("Failed to create a dictionary", v5, v6, v7, v8, v9, v10, v11, v23);
  }
  return 0;
}

BOOL sub_1003AC738(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  char v11;

  sub_1000051BC("Sending Alisha Get Cap command", a2, a3, a4, a5, a6, a7, a8, v10);
  return sub_1003AC780(a1, (int)&v11, 2000) == 0;
}

uint64_t sub_1003AC780(uint64_t a1, int a2, int a3)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  void *__p;
  void *v21;
  char v22;
  _BYTE v23[8];
  void *v24[3];
  char v25;
  char __dst[4];

  v5 = sub_1003A36CC(a2, __dst);
  if ((_DWORD)v5)
    return v5;
  v23[0] = 0;
  v25 = 0;
  std::mutex::lock((std::mutex *)(a1 + 232));
  if (sub_1003A8290(a1, (uint64_t)__dst, 4uLL, 0, v7, v8, v9, v10))
  {
    std::mutex::unlock((std::mutex *)(a1 + 232));
  }
  else
  {
    sub_1003A7E94(a1, 83, 0, a3, (uint64_t)&v19);
    sub_1003AD1B4((uint64_t)v23, &v19);
    if (v22 && __p)
    {
      v21 = __p;
      operator delete(__p);
    }
    std::mutex::unlock((std::mutex *)(a1 + 232));
    if (v25)
    {
      sub_100395AD4((_QWORD *)(a1 + 504), (uint64_t)v23, (uint64_t *)v24, v13, v14, v15, v16, v17);
      v5 = 0;
      goto LABEL_11;
    }
    sub_10036CAF0("Alisha Get Cap command failed", v11, v12, v13, v14, v15, v16, v17, v18);
  }
  v5 = 1;
LABEL_11:
  if (v25 && v24[0])
  {
    v24[1] = v24[0];
    operator delete(v24[0]);
  }
  return v5;
}

void sub_1003AC898(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, char a19)
{
  if (a19)
  {
    if (__p)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1003AC8D4(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v11;
  __int128 v12;
  __int128 v13;

  sub_1000051BC("Sending Alisha Dbg Set Key command\n    UwbSesId = %u (0x%08x)\n    URSK     = 0x%02x%02x%02x%02x", (uint64_t)a2, a3, a4, a5, a6, a7, a8, *a2);
  v11 = *a2;
  v12 = *(_OWORD *)(a2 + 1);
  v13 = *(_OWORD *)(a2 + 5);
  return sub_1003AC988(a1, (char *)&v11, 2000) == 0;
}

uint64_t sub_1003AC988(uint64_t a1, char *a2, int a3)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *__p;
  void *v20;
  char v21;
  _BYTE v22[8];
  void *v23[3];
  char v24;
  _QWORD __dst[5];

  v5 = sub_1003A3758(a2, __dst);
  if ((_DWORD)v5)
    return v5;
  v22[0] = 0;
  v24 = 0;
  std::mutex::lock((std::mutex *)(a1 + 232));
  if (sub_1003A8290(a1, (uint64_t)__dst, 0x28uLL, 0, v7, v8, v9, v10))
  {
    std::mutex::unlock((std::mutex *)(a1 + 232));
  }
  else
  {
    sub_1003A7E94(a1, 82, 0, a3, (uint64_t)&v18);
    sub_1003AD1B4((uint64_t)v22, (int *)&v18);
    if (v21 && __p)
    {
      v20 = __p;
      operator delete(__p);
    }
    std::mutex::unlock((std::mutex *)(a1 + 232));
    if (v24)
    {
      sub_100395AD4((_QWORD *)(a1 + 504), (uint64_t)v22, (uint64_t *)v23, v13, v14, v15, v16, v17);
      v5 = 0;
      goto LABEL_11;
    }
    sub_10036CAF0("Alisha Dbg Set Key command failed", v11, v12, v13, v14, v15, v16, v17, v18);
  }
  v5 = 1;
LABEL_11:
  if (v24 && v23[0])
  {
    v23[1] = v23[0];
    operator delete(v23[0]);
  }
  return v5;
}

void sub_1003ACACC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, char a18)
{
  if (a18)
  {
    if (__p)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1003ACB1C(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v11;

  sub_1000051BC("Sending Alisha Get Key command\n    UwbSesId = %u (0x%08x)", (uint64_t)a2, a3, a4, a5, a6, a7, a8, *a2);
  v11 = *a2;
  return sub_1003ACB78(a1, (char *)&v11, 2000) == 0;
}

uint64_t sub_1003ACB78(uint64_t a1, char *a2, int a3)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *__p;
  void *v20;
  char v21;
  _BYTE v22[8];
  void *v23[3];
  char v24;
  char __dst[8];

  v5 = sub_1003A381C(a2, __dst);
  if ((_DWORD)v5)
    return v5;
  v22[0] = 0;
  v24 = 0;
  std::mutex::lock((std::mutex *)(a1 + 232));
  if (sub_1003A8290(a1, (uint64_t)__dst, 8uLL, 0, v7, v8, v9, v10))
  {
    std::mutex::unlock((std::mutex *)(a1 + 232));
  }
  else
  {
    sub_1003A7E94(a1, 81, 0, a3, (uint64_t)&v18);
    sub_1003AD1B4((uint64_t)v22, (int *)&v18);
    if (v21 && __p)
    {
      v20 = __p;
      operator delete(__p);
    }
    std::mutex::unlock((std::mutex *)(a1 + 232));
    if (v24)
    {
      sub_100395AD4((_QWORD *)(a1 + 504), (uint64_t)v22, (uint64_t *)v23, v13, v14, v15, v16, v17);
      v5 = 0;
      goto LABEL_11;
    }
    sub_10036CAF0("Alisha Get Key command failed", v11, v12, v13, v14, v15, v16, v17, v18);
  }
  v5 = 1;
LABEL_11:
  if (v24 && v23[0])
  {
    v23[1] = v23[0];
    operator delete(v23[0]);
  }
  return v5;
}

void sub_1003ACCBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, char a18)
{
  if (a18)
  {
    if (__p)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1003ACD0C(uint64_t a1, unsigned __int16 *a2)
{
  __int16 v5;
  int v6;
  unsigned __int16 v7;
  int v8;
  unsigned __int16 v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  unsigned __int16 v14;
  uint64_t v15;

  v14 = 0;
  v13 = 0;
  sub_1000051BC("Sending Alisha Range Enable command\n    SesId = %u\n    SesRole = %u\n    TxAntMask = %u\n    RxAntMask = %u\n    RxSyncSearchAntMask = %u\n    Channel = %u\n    Preamble = %u\n    UwbSesId = %u (0x%08x)\n    ResponderDevId = %u\n    SelProtocolVersion = %u\n    SelUwbCfgId = %u\n    RanMultiplier = %u\n    NchapsPerSlot = %u\n    NslotsPerRound = %u\n    Nresponders = %u\n    ResponderStsIndex0 = %u\n    ResponderHopKey = %u\n    ResponderIdx = %u\n"
    "    SelHopCfgBitmask = 0x%02x\n"
    "    SelPulseShapeCombo = %u\n"
    "    DebugFlags = %u\n"
    "    StartTime = %llu\n",
    *((unsigned __int8 *)a2 + 19),
    *((unsigned __int8 *)a2 + 20),
    *((unsigned __int8 *)a2 + 21),
    *((unsigned __int8 *)a2 + 32),
    *((unsigned __int8 *)a2 + 33),
    *((unsigned __int8 *)a2 + 34),
    a2[18],
    *a2);
  v5 = *a2;
  v6 = *(_DWORD *)(a2 + 1);
  v7 = a2[3];
  v8 = *((_DWORD *)a2 + 2);
  v9 = a2[6];
  v10 = *(_DWORD *)(a2 + 7);
  v11 = *(_DWORD *)(a2 + 9);
  v12 = *((_QWORD *)a2 + 3);
  LOWORD(v13) = a2[16];
  BYTE2(v13) = *((_BYTE *)a2 + 34);
  v14 = a2[18];
  v15 = *((_QWORD *)a2 + 5);
  return sub_1003ACE64(a1, (char *)&v5, 2000) == 0;
}

uint64_t sub_1003ACE64(uint64_t a1, char *a2, int a3)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  void *__p;
  void *v21;
  char v22;
  _BYTE v23[8];
  void *v24[3];
  char v25;
  _OWORD __dst[3];

  v5 = sub_1003A38C0(a2, __dst);
  if ((_DWORD)v5)
    return v5;
  v23[0] = 0;
  v25 = 0;
  std::mutex::lock((std::mutex *)(a1 + 232));
  if (sub_1003A8290(a1, (uint64_t)__dst, 0x30uLL, 0, v7, v8, v9, v10))
  {
    std::mutex::unlock((std::mutex *)(a1 + 232));
  }
  else
  {
    sub_1003A7E94(a1, 80, 0, a3, (uint64_t)&v19);
    sub_1003AD1B4((uint64_t)v23, &v19);
    if (v22 && __p)
    {
      v21 = __p;
      operator delete(__p);
    }
    std::mutex::unlock((std::mutex *)(a1 + 232));
    if (v25)
    {
      sub_100395AD4((_QWORD *)(a1 + 504), (uint64_t)v23, (uint64_t *)v24, v13, v14, v15, v16, v17);
      v5 = 0;
      goto LABEL_11;
    }
    sub_10036CAF0("Alisha Range Enable command failed", v11, v12, v13, v14, v15, v16, v17, v18);
  }
  v5 = 1;
LABEL_11:
  if (v25 && v24[0])
  {
    v24[1] = v24[0];
    operator delete(v24[0]);
  }
  return v5;
}

void sub_1003ACFA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, char a19)
{
  if (a19)
  {
    if (__p)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003ACFF8(_QWORD *a1)
{
  void **v2;
  void **v3;
  _QWORD *v4;
  unint64_t v5;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  void *v15;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  if (v3 == v2)
  {
    v4 = a1 + 5;
    v3 = (void **)a1[1];
  }
  else
  {
    v4 = a1 + 5;
    v5 = a1[4];
    v6 = &v2[v5 >> 7];
    v7 = (uint64_t)*v6;
    v8 = (uint64_t)*v6 + 32 * (v5 & 0x7F);
    v9 = *(uint64_t *)((char *)v2 + (((a1[5] + v5) >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * ((a1[5] + v5) & 0x7F);
    if (v8 != v9)
    {
      do
      {
        v10 = *(void **)(v8 + 8);
        if (v10)
        {
          *(_QWORD *)(v8 + 16) = v10;
          operator delete(v10);
          v7 = (uint64_t)*v6;
        }
        v8 += 32;
        if (v8 - v7 == 4096)
        {
          v11 = (uint64_t)v6[1];
          ++v6;
          v7 = v11;
          v8 = v11;
        }
      }
      while (v8 != v9);
      v2 = (void **)a1[1];
      v3 = (void **)a1[2];
    }
  }
  *v4 = 0;
  v12 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v12 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v13 = v12 >> 3;
  if (v13 == 1)
  {
    v14 = 64;
  }
  else
  {
    if (v13 != 2)
      goto LABEL_18;
    v14 = 128;
  }
  a1[4] = v14;
LABEL_18:
  while (v2 != v3)
  {
    v15 = *v2++;
    operator delete(v15);
  }
  return sub_10003A428((uint64_t)a1);
}

_QWORD *sub_1003AD128(_QWORD *__dst, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    sub_100004678(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    __dst[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  *((_DWORD *)__dst + 6) = *((_DWORD *)a2 + 6);
  sub_10000BDF4((_BYTE *)__dst + 32, (uint64_t)(a2 + 2));
  __dst[13] = *((_QWORD *)a2 + 13);
  *((_BYTE *)__dst + 112) = 1;
  return __dst;
}

void sub_1003AD198(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

__n128 sub_1003AD1B4(uint64_t a1, int *a2)
{
  int v3;
  __n128 result;
  void *v5;
  int v6;

  if (*(unsigned __int8 *)(a1 + 32) == *((unsigned __int8 *)a2 + 32))
  {
    if (*(_BYTE *)(a1 + 32))
    {
      v3 = *a2;
      *(_WORD *)(a1 + 4) = *((_WORD *)a2 + 2);
      *(_DWORD *)a1 = v3;
      result.n128_u64[0] = sub_10013775C(a1 + 8, (__n128 *)(a2 + 2)).n128_u64[0];
    }
  }
  else if (*(_BYTE *)(a1 + 32))
  {
    v5 = *(void **)(a1 + 8);
    if (v5)
    {
      *(_QWORD *)(a1 + 16) = v5;
      operator delete(v5);
    }
    *(_BYTE *)(a1 + 32) = 0;
  }
  else
  {
    v6 = *a2;
    *(_WORD *)(a1 + 4) = *((_WORD *)a2 + 2);
    *(_DWORD *)a1 = v6;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    result = *(__n128 *)(a2 + 2);
    *(__n128 *)(a1 + 8) = result;
    *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 3);
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *((_QWORD *)a2 + 3) = 0;
    *(_BYTE *)(a1 + 32) = 1;
  }
  return result;
}

const void **sub_1003AD25C(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

void sub_1003AD290()
{
  operator delete();
}

__n128 sub_1003AD2A4(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = off_100818668;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_1003AD2E4(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = off_100818668;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1003AD30C(_QWORD *a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t v3;
  uint64_t (*v4)(_QWORD *, uint64_t, _QWORD);
  _QWORD *v5;

  v3 = a1[2];
  v4 = (uint64_t (*)(_QWORD *, uint64_t, _QWORD))a1[1];
  v5 = (_QWORD *)(a1[3] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v4 = *(uint64_t (**)(_QWORD *, uint64_t, _QWORD))(*v5 + v4);
  return v4(v5, a2, *a3);
}

uint64_t sub_1003AD32C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1003AD368()
{
}

void sub_1003AD378()
{
  operator delete();
}

__n128 sub_1003AD38C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = off_100818710;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_1003AD3CC(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = off_100818710;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1003AD3F4(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

uint64_t sub_1003AD410(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1003AD44C()
{
}

uint64_t sub_1003AD458(_QWORD *a1)
{
  void **v2;
  void **v3;
  _QWORD *v4;
  unint64_t v5;
  void **v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  void *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  void *v15;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  if (v3 == v2)
  {
    v4 = a1 + 5;
    v3 = (void **)a1[1];
  }
  else
  {
    v4 = a1 + 5;
    v5 = a1[4];
    v6 = &v2[v5 / 0xAA];
    v7 = (unint64_t)*v6;
    v8 = (unint64_t)*v6 + 24 * (v5 % 0xAA);
    v9 = (unint64_t)v2[(a1[5] + v5) / 0xAA] + 24 * ((a1[5] + v5) % 0xAA);
    if (v8 != v9)
    {
      do
      {
        v10 = *(void **)v8;
        if (*(_QWORD *)v8)
        {
          *(_QWORD *)(v8 + 8) = v10;
          operator delete(v10);
          v7 = (unint64_t)*v6;
        }
        v8 += 24;
        if (v8 - v7 == 4080)
        {
          v11 = (unint64_t)v6[1];
          ++v6;
          v7 = v11;
          v8 = v11;
        }
      }
      while (v8 != v9);
      v2 = (void **)a1[1];
      v3 = (void **)a1[2];
    }
  }
  *v4 = 0;
  v12 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v12 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v13 = v12 >> 3;
  if (v13 == 1)
  {
    v14 = 85;
  }
  else
  {
    if (v13 != 2)
      goto LABEL_18;
    v14 = 170;
  }
  a1[4] = v14;
LABEL_18:
  while (v2 != v3)
  {
    v15 = *v2++;
    operator delete(v15);
  }
  return sub_10003A428((uint64_t)a1);
}

void sub_1003AD59C(void **a1)
{
  _BYTE *v2;
  _BYTE *v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  int64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  int64_t v21;
  char *v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  char *v33;
  _QWORD *v34;
  uint64_t v35;
  void *v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  void *v41;
  void *__p;
  char *v43;
  char *v44;
  char *v45;
  _QWORD *v46;

  v2 = a1[1];
  v3 = a1[2];
  v4 = (v3 - v2) >> 3;
  if (v3 == v2)
    v5 = 0;
  else
    v5 = 170 * v4 - 1;
  v6 = (char *)a1[4];
  if (v5 - (unint64_t)&v6[(_QWORD)a1[5]] < 0xAA)
  {
    v7 = (uint64_t)(a1 + 3);
    v8 = a1[3];
    v9 = *a1;
    v10 = v8 - (_BYTE *)*a1;
    if (v4 >= v10 >> 3)
    {
      if (v8 == v9)
        v11 = 1;
      else
        v11 = v10 >> 2;
      v46 = a1 + 3;
      __p = sub_10005538C(v7, v11);
      v43 = (char *)__p;
      v44 = (char *)__p;
      v45 = (char *)__p + 8 * v12;
      v41 = operator new(0xFF0uLL);
      sub_100138C00(&__p, &v41);
      v13 = (char *)a1[1];
      v14 = v44;
      if (v13 == a1[2])
      {
        v33 = (char *)a1[1];
      }
      else
      {
        do
        {
          if (v14 == v45)
          {
            v15 = v43 - (_BYTE *)__p;
            if (v43 <= __p)
            {
              if (v14 == __p)
                v23 = 1;
              else
                v23 = (v14 - (_BYTE *)__p) >> 2;
              v24 = (char *)sub_10005538C((uint64_t)v46, v23);
              v26 = v43;
              v14 = &v24[8 * (v23 >> 2)];
              v27 = v44 - v43;
              if (v44 != v43)
              {
                v14 = &v24[8 * (v23 >> 2) + (v27 & 0xFFFFFFFFFFFFFFF8)];
                v28 = 8 * (v27 >> 3);
                v29 = &v24[8 * (v23 >> 2)];
                do
                {
                  v30 = *(_QWORD *)v26;
                  v26 += 8;
                  *(_QWORD *)v29 = v30;
                  v29 += 8;
                  v28 -= 8;
                }
                while (v28);
              }
              v31 = __p;
              __p = v24;
              v43 = &v24[8 * (v23 >> 2)];
              v44 = v14;
              v45 = &v24[8 * v25];
              if (v31)
              {
                operator delete(v31);
                v14 = v44;
              }
            }
            else
            {
              v16 = v15 >> 3;
              v17 = v15 >> 3 < -1;
              v18 = (v15 >> 3) + 2;
              if (v17)
                v19 = v18;
              else
                v19 = v16 + 1;
              v20 = &v43[-8 * (v19 >> 1)];
              v21 = v14 - v43;
              if (v14 != v43)
              {
                memmove(&v43[-8 * (v19 >> 1)], v43, v14 - v43);
                v14 = v43;
              }
              v22 = &v14[-8 * (v19 >> 1)];
              v14 = &v20[v21];
              v43 = v22;
              v44 = &v20[v21];
            }
          }
          v32 = *(_QWORD *)v13;
          v13 += 8;
          *(_QWORD *)v14 = v32;
          v14 = v44 + 8;
          v44 += 8;
        }
        while (v13 != a1[2]);
        v33 = (char *)a1[1];
      }
      v36 = *a1;
      v37 = v43;
      *a1 = __p;
      a1[1] = v37;
      __p = v36;
      v43 = v33;
      v38 = (char *)a1[3];
      v39 = v45;
      a1[2] = v14;
      a1[3] = v39;
      v44 = v13;
      v45 = v38;
      if (v14 - v37 == 8)
        v40 = 85;
      else
        v40 = (uint64_t)a1[4] + 170;
      a1[4] = (void *)v40;
      if (v13 != v33)
        v44 = &v13[(v33 - v13 + 7) & 0xFFFFFFFFFFFFFFF8];
      if (v36)
        operator delete(v36);
    }
    else
    {
      if (v2 == v9)
      {
        __p = operator new(0xFF0uLL);
        sub_1001389D0(a1, &__p);
        v34 = a1[2];
        __p = (void *)*(v34 - 1);
        a1[2] = v34 - 1;
      }
      else
      {
        __p = operator new(0xFF0uLL);
      }
      sub_100138AE4((uint64_t)a1, &__p);
      if ((_BYTE *)a1[2] - (_BYTE *)a1[1] == 8)
        v35 = 85;
      else
        v35 = (uint64_t)a1[4] + 170;
      a1[4] = (void *)v35;
    }
  }
  else
  {
    a1[4] = v6 + 170;
    __p = (void *)*((_QWORD *)v3 - 1);
    a1[2] = v3 - 8;
    sub_100138AE4((uint64_t)a1, &__p);
  }
}

void sub_1003AD868(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  void *v12;

  operator delete(v12);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_1003AD8B4(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0xAA;
  v4 = v2 - 170;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10005538C(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0xFF0uLL);
      sub_1001389D0(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0xFF0uLL);
    sub_100138AE4((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10005538C((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_10005538C((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0xFF0uLL);
  sub_100138C00(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_100138D14((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_1003ADB7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

__n128 sub_1003ADBC8(_QWORD *a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int v9;
  __n128 result;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 16 * (v4 - v5) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_1003ADC7C(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  v8 = *(_QWORD *)(v5 + ((v7 >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * (v7 & 0x7F);
  v9 = *a2;
  *(_WORD *)(v8 + 4) = *((_WORD *)a2 + 2);
  *(_DWORD *)v8 = v9;
  *(_QWORD *)(v8 + 16) = 0;
  *(_QWORD *)(v8 + 24) = 0;
  *(_QWORD *)(v8 + 8) = 0;
  result = *(__n128 *)(a2 + 2);
  *(__n128 *)(v8 + 8) = result;
  *(_QWORD *)(v8 + 24) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *((_QWORD *)a2 + 3) = 0;
  ++a1[5];
  return result;
}

void sub_1003ADC7C(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x80;
  v4 = v2 - 128;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10005538C(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      sub_1001389D0(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    sub_100138AE4((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10005538C((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_10005538C((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  sub_100138C00(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_100138D14((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_1003ADF44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_1003ADF90(_QWORD *a1)
{
  unint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;

  v2 = a1[4];
  v3 = *(_QWORD *)(a1[1] + ((v2 >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * (v2 & 0x7F);
  v4 = *(void **)(v3 + 8);
  if (v4)
  {
    *(_QWORD *)(v3 + 16) = v4;
    operator delete(v4);
    v2 = a1[4];
  }
  v5 = a1[5] - 1;
  a1[4] = v2 + 1;
  a1[5] = v5;
  return sub_100343138((uint64_t)a1, 1);
}

void sub_1003ADFF4(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  char v20;
  char v21;

  v8 = (uint64_t)(a1 + 2);
  v9 = *a1;
  if (a4 > (a1[2] - *a1) >> 5)
  {
    sub_1003946C8(a1);
    if (a4 >> 59)
      sub_100026E7C();
    v10 = a1[2] - *a1;
    v11 = v10 >> 4;
    if (v10 >> 4 <= a4)
      v11 = a4;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0)
      v12 = 0x7FFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    sub_1001534CC(a1, v12);
    v13 = sub_100210C04(v8, a2, a3, a1[1]);
    goto LABEL_11;
  }
  v14 = (a1[1] - v9) >> 5;
  if (v14 < a4)
  {
    v15 = a2 + 32 * v14;
    sub_1003AE148((uint64_t)&v20, a2, v15, v9);
    v13 = sub_100210C04(v8, v15, a3, a1[1]);
LABEL_11:
    a1[1] = v13;
    return;
  }
  sub_1003AE148((uint64_t)&v21, a2, a3, v9);
  v17 = v16;
  v18 = a1[1];
  if (v18 != v16)
  {
    do
    {
      v19 = *(void **)(v18 - 24);
      if (v19)
      {
        *(_QWORD *)(v18 - 16) = v19;
        operator delete(v19);
      }
      v18 -= 32;
    }
    while (v18 != v17);
  }
  a1[1] = v17;
}

void sub_1003AE138(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1003AE140(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_1003AE148(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;

  v5 = a2;
  if (a2 != a3)
  {
    do
    {
      *(_BYTE *)a4 = *(_BYTE *)v5;
      if (v5 != a4)
        sub_10019E578((_QWORD *)(a4 + 8), *(char **)(v5 + 8), *(char **)(v5 + 16), *(_QWORD *)(v5 + 16) - *(_QWORD *)(v5 + 8));
      v5 += 32;
      a4 += 32;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

void sub_1003AE1BC()
{
  operator delete();
}

__n128 sub_1003AE1D0(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = off_1008187D0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_1003AE210(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = off_1008187D0;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1003AE238(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

uint64_t sub_1003AE254(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1003AE290()
{
}

uint64_t sub_1003AE29C(uint64_t a1, int a2, _QWORD *a3, uint64_t a4)
{
  char v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  __int128 v11;
  __int128 v12;
  _OWORD v14[4];
  uint64_t v15;

  *(_DWORD *)a1 = a2;
  *(_BYTE *)(a1 + 4) = 0;
  v7 = sub_100360DDC(a2);
  v8 = a3[1];
  *(_QWORD *)(a1 + 8) = *a3;
  *(_BYTE *)(a1 + 5) = v7;
  *(_QWORD *)(a1 + 16) = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 152) = 1065353216;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_DWORD *)(a1 + 192) = 1065353216;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_DWORD *)(a1 + 232) = 1065353216;
  *(_OWORD *)(a1 + 216) = 0u;
  sub_1003B08C0(a1 + 240);
  sub_1003B08C0(a1 + 320);
  sub_1003B08C0(a1 + 400);
  v11 = *(_OWORD *)(a4 + 48);
  v14[2] = *(_OWORD *)(a4 + 32);
  v14[3] = v11;
  v15 = *(_QWORD *)(a4 + 64);
  v12 = *(_OWORD *)(a4 + 16);
  v14[0] = *(_OWORD *)a4;
  v14[1] = v12;
  sub_1003BD9B4((uint64_t)v14);
  sub_1003BDA38(0.01, 0.000000961703842, 0.0000000194955149, 1.0);
  return a1;
}

void sub_1003AE3D0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;

  sub_100152A44(v7);
  sub_100152A44(v6);
  sub_100152AD8(v5);
  sub_100152B50(v4);
  sub_10002AB34(v1 + 120);
  sub_100152A44((_QWORD *)(v1 + 72));
  sub_100152C6C(v3);
  sub_10001AE68(v2);
  _Unwind_Resume(a1);
}

BOOL sub_1003AE444(uint64_t a1, double *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  double v6;
  double v7;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  NSObject *v18;
  uint64_t v19;
  double v20;
  _BOOL8 result;
  char *v22;
  char *v23;
  _QWORD *v24;
  char *__p;
  char *v26;
  char *v27;
  _BYTE buf[12];
  __int16 v29;
  double v30;
  __int16 v31;
  double v32;

  if (!*(_BYTE *)(a1 + 5))
    return 0;
  if (!sub_1003AE714(a1, a2))
  {
    result = os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    sub_1003F1000();
    return 0;
  }
  __p = 0;
  v26 = 0;
  v27 = 0;
  v4 = *(_QWORD **)(a1 + 176);
  if (v4)
  {
    v5 = (_QWORD *)(a1 + 160);
    do
    {
      sub_1003B4438((uint64_t)(v4 + 3));
      v7 = v6;
      if (v6 <= 0.0 || *a2 - v6 <= 3.0)
      {
        sub_1003B2338((uint64_t)(v4 + 3), (_QWORD *)(a1 + 24));
      }
      else
      {
        v8 = v26;
        if (v26 >= v27)
        {
          v10 = __p;
          v11 = (v26 - __p) >> 3;
          v12 = v11 + 1;
          if ((unint64_t)(v11 + 1) >> 61)
            sub_100026E7C();
          v13 = v27 - __p;
          if ((v27 - __p) >> 2 > v12)
            v12 = v13 >> 2;
          if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
            v14 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v14 = v12;
          if (v14)
          {
            v15 = (char *)sub_10005538C((uint64_t)&v27, v14);
            v10 = __p;
            v8 = v26;
          }
          else
          {
            v15 = 0;
          }
          v16 = &v15[8 * v11];
          *(_QWORD *)v16 = v4[2];
          v9 = v16 + 8;
          while (v8 != v10)
          {
            v17 = *((_QWORD *)v8 - 1);
            v8 -= 8;
            *((_QWORD *)v16 - 1) = v17;
            v16 -= 8;
          }
          __p = v16;
          v27 = &v15[8 * v14];
          if (v10)
            operator delete(v10);
        }
        else
        {
          *(_QWORD *)v26 = v4[2];
          v9 = v26 + 8;
        }
        v26 = v9;
        v18 = qword_10085F520;
        if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
        {
          v19 = v4[2];
          v20 = *a2;
          *(_DWORD *)buf = 134218496;
          *(_QWORD *)&buf[4] = v19;
          v29 = 2048;
          v30 = v7;
          v31 = 2048;
          v32 = v20;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "#sf,RoseSensorFusionManager: Timing out target with ID 0x%llx - Last received measurement time is %f s, last IMU data time is %f s", buf, 0x20u);
        }
      }
      v4 = (_QWORD *)*v4;
    }
    while (v4);
    v23 = __p;
    v22 = v26;
    if (__p != v26)
    {
      v24 = (_QWORD *)(a1 + 200);
      do
      {
        *(_QWORD *)buf = *(_QWORD *)v23;
        sub_1003B1214(v5, (unint64_t *)buf);
        sub_1003B1198(v24, (unint64_t *)buf);
        v23 += 8;
      }
      while (v23 != v26);
      v22 = __p;
    }
    if (v22)
      operator delete(v22);
  }
  return 1;
}

void sub_1003AE6E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003AE714(uint64_t a1, double *a2)
{
  int64x2_t *v4;
  unint64_t v5;
  NSObject *v6;
  uint64_t v7;
  double v9[2];
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *__p;
  void *v19;
  uint8_t buf[40];

  v4 = (int64x2_t *)(a1 + 24);
  if (!sub_1003C8158(a1 + 24))
  {
    v5 = *(_QWORD *)(a1 + 112) + *(_QWORD *)(a1 + 104) - 1;
    if (*a2 <= *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + ((v5 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v5 & 0x1FF)))
      return 0;
  }
  if (sub_1003AF83C((_QWORD *)a1, a2))
    sub_1003AF27C(a1);
  sub_1003B0780((uint64_t)v9, (uint64_t)a2);
  sub_1003AFA24((double *)a1, (uint64_t)v9);
  sub_1003C8028(v4, v9);
  if (!*(_BYTE *)(a1 + 4))
    *(_BYTE *)(a1 + 4) = 1;
  if ((unint64_t)sub_1003C8354((uint64_t)v4) >= 0x1F5)
    sub_1003C8104(v4);
  if (sub_1003C8354((uint64_t)v4))
  {
    v6 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
    {
      v7 = sub_1003C8354((uint64_t)v4);
      sub_1003F102C((_QWORD *)a1, buf, v7, v6);
    }
  }
  if (__p)
  {
    v19 = __p;
    operator delete(__p);
  }
  if (v16)
  {
    v17 = v16;
    operator delete(v16);
  }
  if (v14)
  {
    v15 = v14;
    operator delete(v14);
  }
  if (v12)
  {
    v13 = v12;
    operator delete(v12);
  }
  if (v10)
  {
    v11 = v10;
    operator delete(v10);
  }
  return 1;
}

void sub_1003AE8B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1001529D4((uint64_t *)va);
  _Unwind_Resume(a1);
}

BOOL sub_1003AE8D4(unsigned int *a1, uint64_t **a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t *v7;
  NSObject *v8;
  _BOOL4 v9;
  _BOOL8 result;
  uint64_t v11;
  _QWORD *v12;
  NSObject *v13;
  uint64_t v14;
  _QWORD *v15;
  double v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  _QWORD *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  char v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  int v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t v48;
  uint64_t *v49;
  _BYTE buf[32];
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  char v62;
  __int128 v63;
  uint64_t v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  int v70;
  _QWORD v71[6];
  int v72;
  char v73;
  _QWORD v74[7];
  void (**v75)();
  __int128 v76;

  if (*((_BYTE *)a1 + 5))
  {
    v3 = *a2;
    v4 = a2[1];
    if (v4 == *a2)
    {
      result = os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR);
      if (!result)
        return result;
      sub_1003F10C0();
    }
    else
    {
      v6 = *v3;
      v48 = *v3;
      v7 = v3;
      do
      {
        if (*v7 != v6)
        {
          result = os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR);
          if (!result)
            return result;
          sub_1003F1118();
          return 0;
        }
        v7 += 19;
      }
      while (v7 != v4);
      if (*((double *)v3 + 6) >= 0.0)
      {
        if (*((_BYTE *)a1 + 4))
        {
          v11 = (uint64_t)(a1 + 40);
          if (!sub_100356AD8((_QWORD *)a1 + 20, &v48))
          {
            v19 = *a1;
            v20 = v48;
            v21 = (std::__shared_weak_count *)*((_QWORD *)a1 + 2);
            v46 = *((_QWORD *)a1 + 1);
            v47 = v21;
            if (v21)
            {
              p_shared_owners = (unint64_t *)&v21->__shared_owners_;
              do
                v23 = __ldxr(p_shared_owners);
              while (__stxr(v23 + 1, p_shared_owners));
            }
            sub_1003B2334(buf, v19, v20, &v46);
            v49 = (uint64_t *)&v48;
            v24 = sub_1003B0BC8((uint64_t)(a1 + 40), (uint64_t *)&v48, (uint64_t)&unk_100472CF8, &v49);
            v26 = v53;
            v25 = v54;
            v27 = v52;
            *(_OWORD *)(v24 + 7) = v51;
            *(_OWORD *)(v24 + 9) = v27;
            v29 = v57;
            v28 = v58;
            v30 = v56;
            *(_OWORD *)(v24 + 15) = v55;
            *(_OWORD *)(v24 + 17) = v30;
            v31 = v62;
            v32 = v61;
            v33 = v59;
            *(_OWORD *)(v24 + 25) = v60;
            *(_OWORD *)(v24 + 23) = v33;
            *(_OWORD *)(v24 + 27) = v32;
            *((_BYTE *)v24 + 232) = v31;
            *(_OWORD *)(v24 + 19) = v29;
            *(_OWORD *)(v24 + 21) = v28;
            *(_OWORD *)(v24 + 11) = v26;
            *(_OWORD *)(v24 + 13) = v25;
            v34 = *(_OWORD *)&buf[16];
            *(_OWORD *)(v24 + 3) = *(_OWORD *)buf;
            *(_OWORD *)(v24 + 5) = v34;
            sub_1003AFAB4((uint64_t)(v24 + 30));
            *((_OWORD *)v24 + 15) = v63;
            v24[32] = v64;
            v35 = v70;
            v37 = v68;
            v36 = v69;
            v39 = v66;
            v38 = v67;
            *(_OWORD *)(v24 + 33) = v65;
            v64 = 0;
            v63 = 0uLL;
            *(_OWORD *)(v24 + 39) = v37;
            *(_OWORD *)(v24 + 41) = v36;
            *((_DWORD *)v24 + 86) = v35;
            *(_OWORD *)(v24 + 35) = v39;
            *(_OWORD *)(v24 + 37) = v38;
            sub_1001CFB94(v24 + 44, (uint64_t)v71);
            *((_DWORD *)v24 + 100) = v72;
            *((_BYTE *)v24 + 408) = v73;
            sub_1001CFB94(v24 + 52, (uint64_t)v74);
            v24[58] = v74[6];
            sub_10030EC4C((uint64_t)(v24 + 59), (uint64_t)&v75);
            sub_1000145E8((uint64_t)(v24 + 73), &v76);
            v40 = (std::__shared_weak_count *)*((_QWORD *)&v76 + 1);
            if (*((_QWORD *)&v76 + 1))
            {
              v41 = (unint64_t *)(*((_QWORD *)&v76 + 1) + 8);
              do
                v42 = __ldaxr(v41);
              while (__stlxr(v42 - 1, v41));
              if (!v42)
              {
                ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
                std::__shared_weak_count::__release_weak(v40);
              }
            }
            v75 = off_100807398;
            sub_100152A44(v74);
            sub_100152A44(v71);
            v49 = (uint64_t *)&v63;
            sub_100152C1C((void ***)&v49);
            v43 = v47;
            if (v47)
            {
              v44 = (unint64_t *)&v47->__shared_owners_;
              do
                v45 = __ldaxr(v44);
              while (__stlxr(v45 - 1, v44));
              if (!v45)
              {
                ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
                std::__shared_weak_count::__release_weak(v43);
              }
            }
          }
          *(_QWORD *)buf = &v48;
          v12 = sub_1003B0BC8((uint64_t)(a1 + 40), (uint64_t *)&v48, (uint64_t)&unk_100472CF8, (_QWORD **)buf);
          sub_1003B251C((uint64_t)(v12 + 3), a2, (_QWORD *)a1 + 3);
          v13 = qword_10085F520;
          if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
          {
            v14 = v48;
            *(_QWORD *)buf = &v48;
            v15 = sub_1003B0BC8(v11, (uint64_t *)&v48, (uint64_t)&unk_100472CF8, (_QWORD **)buf);
            v16 = sub_1003B4404((uint64_t)(v15 + 3));
            *(_QWORD *)buf = &v48;
            v17 = sub_1003B0BC8(v11, (uint64_t *)&v48, (uint64_t)&unk_100472CF8, (_QWORD **)buf);
            sub_1003B4438((uint64_t)(v17 + 3));
            *(_DWORD *)buf = 134218496;
            *(_QWORD *)&buf[4] = v14;
            *(_WORD *)&buf[12] = 2048;
            *(double *)&buf[14] = v16;
            *(_WORD *)&buf[22] = 2048;
            *(_QWORD *)&buf[24] = v18;
            _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#sf,RoseSensorFusionManager::addRoseMeasurementsToTrackingTargetSet: TargetID 0x%llx, measurement update time ranges from %f to %f after consuming current rose measurements", buf, 0x20u);
          }
          return 1;
        }
        result = os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR);
        if (!result)
          return result;
        sub_1003F10EC();
      }
      else
      {
        v8 = qword_10085F520;
        v9 = os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT);
        result = 0;
        if (!v9)
          return result;
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#sf,RoseSensorFusionManager: negative range measurement, return", buf, 2u);
      }
    }
  }
  return 0;
}

void sub_1003AED6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10001AE68((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1003AED98(uint64_t a1)
{
  void **v3;

  sub_10001AE68(a1 + 560);
  *(_QWORD *)(a1 + 448) = off_100807398;
  sub_100152A44((_QWORD *)(a1 + 392));
  sub_100152A44((_QWORD *)(a1 + 328));
  v3 = (void **)(a1 + 216);
  sub_100152C1C(&v3);
  return a1;
}

BOOL sub_1003AEDF4(uint64_t a1, uint64_t **a2, unsigned __int16 a3)
{
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  _BOOL4 v8;
  const char *v9;
  NSObject *v10;
  uint32_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t **v17;
  BOOL v18;
  NSObject *v19;
  _BOOL4 v20;
  unsigned __int16 v22;
  _BYTE buf[12];
  __int16 v24;
  uint64_t v25;
  __int16 v26;
  uint64_t v27;

  v22 = a3;
  v5 = a1 + 24;
  v6 = sub_1003C8158(a1 + 24);
  v7 = qword_10085F520;
  v8 = os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT);
  if (v6)
  {
    if (!v8)
      goto LABEL_7;
    *(_WORD *)buf = 0;
    v9 = "#sf,RoseSensorFusionManager::addRoseMeasurementsToTrackingTargetSet: Empty IMU buffer";
    v10 = v7;
    v11 = 2;
  }
  else
  {
    if (!v8)
      goto LABEL_7;
    v12 = sub_1003C8354(v5);
    v13 = *(_QWORD *)(a1 + 80);
    v14 = *(_QWORD *)(*(_QWORD *)(v13 + ((*(_QWORD *)(a1 + 104) >> 6) & 0x3FFFFFFFFFFFFF8))
                    + 8 * (*(_QWORD *)(a1 + 104) & 0x1FFLL));
    v15 = *(_QWORD *)(*(_QWORD *)(v13
                                + (((unint64_t)(*(_QWORD *)(a1 + 104) + *(_QWORD *)(a1 + 112) - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                    + 8 * ((*(_QWORD *)(a1 + 104) + *(_QWORD *)(a1 + 112) - 1) & 0x1FF));
    *(_DWORD *)buf = 134218496;
    *(_QWORD *)&buf[4] = v12;
    v24 = 2048;
    v25 = v14;
    v26 = 2048;
    v27 = v15;
    v9 = "#sf,RoseSensorFusionManager::addRoseMeasurementsToTrackingTargetSet: IMU buffer size is %lu, time from %f to %f"
         " before measurement update";
    v10 = v7;
    v11 = 32;
  }
  _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, v9, buf, v11);
LABEL_7:
  v16 = sub_1003AE8D4((unsigned int *)a1, a2);
  if (v16)
  {
    *(_QWORD *)buf = *a2;
    v17 = (uint64_t **)sub_1003B0EC8(a1 + 200, *(unint64_t **)buf, (uint64_t)&unk_100472CF8, (uint64_t **)buf);
    sub_1002CFCCC(v17 + 3, &v22, &v22);
  }
  else
  {
    v18 = sub_1003C8158(v5);
    v19 = qword_10085F520;
    v20 = os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR);
    if (v18)
    {
      if (v20)
        sub_1003F1144();
    }
    else if (v20)
    {
      sub_1003F1170(v5, (_QWORD *)a1, v19);
    }
  }
  return v16;
}

uint64_t sub_1003AEFD4(_QWORD *a1, unsigned __int16 a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t **v7;
  uint64_t *v8;
  unsigned int v9;
  _QWORD *v10;
  NSObject *v11;
  uint64_t v12;
  _BYTE v14[16];
  _QWORD *v15;
  unsigned __int16 v16;
  _BYTE buf[24];

  v16 = a2;
  v3 = a1 + 25;
  sub_1003B1260((uint64_t)v14, (uint64_t)(a1 + 25));
  v4 = v15;
  if (!v15)
    return sub_100152AD8((uint64_t)v14);
  v5 = a1 + 15;
  v6 = a1 + 20;
  do
  {
    v7 = (uint64_t **)v4[4];
    if (!v7)
      goto LABEL_14;
    v8 = v4 + 2;
    while (1)
    {
      v9 = *((unsigned __int16 *)v7 + 13);
      if (v16 >= v9)
        break;
LABEL_8:
      v7 = (uint64_t **)*v7;
      if (!v7)
        goto LABEL_14;
    }
    if (v9 < v16)
    {
      ++v7;
      goto LABEL_8;
    }
    *(_QWORD *)buf = v4 + 2;
    v10 = sub_1003B0EC8((uint64_t)v3, v4 + 2, (uint64_t)&unk_100472CF8, (uint64_t **)buf);
    sub_1003B1598((uint64_t)(v10 + 3), &v16);
    if (!v10[5])
    {
      v11 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
      {
        v12 = *v8;
        *(_DWORD *)buf = 134217984;
        *(_QWORD *)&buf[4] = v12;
        _os_log_error_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "#sf,RoseSensorFusionManager: Timing out target with ID 0x%llx since it has no attached service left", buf, 0xCu);
      }
      *(_QWORD *)buf = *v8;
      sub_1003B1164(v5, (unint64_t *)buf);
      sub_1003B1198(v3, (unint64_t *)buf);
      *(_QWORD *)buf = *v8;
      sub_1003B1214(v6, (unint64_t *)buf);
      sub_1003B1198(v3, (unint64_t *)buf);
    }
LABEL_14:
    v4 = (_QWORD *)*v4;
  }
  while (v4);
  return sub_100152AD8((uint64_t)v14);
}

void sub_1003AF194(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  _Unwind_Resume(exception_object);
}

void sub_1003AF1B0(uint64_t a1)
{
  uint64_t v2;
  _BYTE v3[88];

  sub_1003B01F0((uint64_t)v3, a1 + 456);
  sub_1003B035C(a1 + 544, (uint64_t)&v2);
}

_QWORD *sub_1003AF20C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v4;
  _QWORD *result;
  _QWORD *v6;
  unint64_t v7;

  v7 = a2;
  v4 = (_QWORD *)(a1 + 160);
  result = sub_100356AD8((_QWORD *)(a1 + 160), &v7);
  if (result)
  {
    v6 = sub_100356AD8(v4, &v7);
    if (!v6)
      sub_100146798("unordered_map::at: key not found");
    return (_QWORD *)sub_1003B4460((uint64_t)(v6 + 3), a3);
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
  return result;
}

BOOL sub_1003AF27C(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  uint8_t v4[16];

  v1 = *(_QWORD *)(a1 + 144);
  if (v1)
  {
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
      sub_1003F1248();
  }
  else
  {
    *(_BYTE *)(a1 + 4) = 0;
    sub_1003C81E0((_QWORD *)(a1 + 24));
    v2 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#sf,RoseSensorFusionManager: IMU history is cleared.", v4, 2u);
    }
  }
  return v1 == 0;
}

void sub_1003AF324(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  _QWORD *v6;
  _QWORD *v7;
  __int128 v8;
  double v9;
  double v10;
  BOOL v11;
  BOOL v12;
  double v13;
  _QWORD *v14;
  double v15;
  unsigned __int16 *v17;
  NSObject *v19;
  const char *v20;
  unint64_t v21;
  uint8_t buf[4];
  unint64_t v23;
  _QWORD *v24[16];
  char v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  char v29;

  v21 = a2;
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 144) = 0;
  *(_BYTE *)(a3 + 152) = 0;
  v4 = a3 + 152;
  *(_BYTE *)(a3 + 200) = 0;
  if (!*(_BYTE *)(a1 + 4))
  {
    v19 = qword_10085F520;
    if (!os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
      return;
    *(_DWORD *)buf = 134217984;
    v23 = a2;
    v20 = "#sf,getSolutionInternalsFromTrackingTargetSet: target 0x%llx failed: no motion state";
    goto LABEL_27;
  }
  v6 = (_QWORD *)(a1 + 160);
  if (!sub_100356AD8((_QWORD *)(a1 + 160), &v21))
  {
    v19 = qword_10085F520;
    if (!os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
      return;
    *(_DWORD *)buf = 134217984;
    v23 = v21;
    v20 = "#sf,getSolutionInternalsFromTrackingTargetSet: target 0x%llx failed: RoseEstimatorArrayMap count is zero";
LABEL_27:
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, v20, buf, 0xCu);
    return;
  }
  v7 = sub_1000550B8(v6, &v21);
  if (!v7)
    sub_100146798("unordered_map::at: key not found");
  sub_1003B3E8C((uint64_t)(v7 + 3), (uint64_t)buf);
  sub_100153804(a3, (uint64_t)buf);
  v8 = v27;
  *(_OWORD *)v4 = v26;
  *(_OWORD *)(v4 + 16) = v8;
  *(_OWORD *)(v4 + 32) = v28;
  *(_BYTE *)(v4 + 48) = v29;
  if (v25)
    sub_10003E3F0((uint64_t)v24, v24[1]);
  if (*(_BYTE *)(a3 + 144))
  {
    if (v21 != *(_QWORD *)(a3 + 8))
      __assert_rtn("getSolutionAndInternalsFromTrackingTargetSet", "RoseSensorFusionManager.cpp", 421, "targetID == solution.ID");
    v10 = *(double *)(a3 + 48);
    v9 = *(double *)(a3 + 56);
    v11 = v10 >= -145.0;
    if (v10 > 0.0)
      v11 = 0;
    if (v9 < -55.0)
      v11 = 0;
    v12 = v9 <= 55.0 && v11;
    v13 = *(double *)a3;
    v14 = sub_1000550B8(v6, &v21);
    if (!v14)
      sub_100146798("unordered_map::at: key not found");
    sub_1003B4438((uint64_t)(v14 + 3));
    if (v13 - v15 <= 1.0 && v12)
    {
      v17 = (unsigned __int16 *)sub_1000550B8((_QWORD *)(a1 + 200), &v21);
      if (v17)
      {
        if ((unsigned __int16 *)(a3 + 16) != v17 + 12)
          sub_1001538C0((uint64_t **)(a3 + 16), *((unsigned __int16 **)v17 + 3), v17 + 16);
      }
    }
    else if (*(_BYTE *)(a3 + 144))
    {
      sub_10003E3F0(a3 + 16, *(_QWORD **)(a3 + 24));
      *(_BYTE *)(a3 + 144) = 0;
    }
  }
}

void sub_1003AF5D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;

  if (*(_BYTE *)(v29 + 144))
    sub_10003E3F0(v29 + 16, *(_QWORD **)(v29 + 24));
  _Unwind_Resume(exception_object);
}

void sub_1003AF624(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  _QWORD *v2;
  _QWORD *v4;
  uint64_t *v5;
  uint64_t *v6;
  double v7;
  double v8;
  unsigned __int16 *v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD v12[2];
  uint64_t *v13[16];
  _BYTE v14[16];
  _QWORD *v15[16];
  char v16;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v2 = *(_QWORD **)(a1 + 176);
  if (v2)
  {
    v4 = (_QWORD *)(a1 + 200);
    do
    {
      sub_1003B3E8C((uint64_t)(v2 + 3), (uint64_t)v14);
      if (v16)
      {
        sub_1003C843C(v12);
        if (v2[2] != v12[1])
          __assert_rtn("getSolutionFromAllTrackingTargetSets", "RoseSensorFusionManager.cpp", 447, "targetId == sol.ID");
        v5 = v13[4];
        v6 = v13[5];
        v7 = *(double *)v12;
        sub_1003B4438((uint64_t)(v2 + 3));
        if (*(double *)&v6 <= 55.0
          && *(double *)&v6 >= -55.0
          && *(double *)&v5 >= -145.0
          && *(double *)&v5 <= 0.0
          && v7 - v8 <= 1.0)
        {
          v9 = (unsigned __int16 *)sub_1000550B8(v4, v2 + 2);
          if (v9 && v13 != (uint64_t **)(v9 + 12))
            sub_1001538C0(v13, *((unsigned __int16 **)v9 + 3), v9 + 16);
          v10 = a2[1];
          if (v10 >= a2[2])
          {
            v11 = sub_1003B187C(a2);
          }
          else
          {
            sub_1003C843C(a2[1]);
            v11 = v10 + 144;
            a2[1] = v10 + 144;
          }
          a2[1] = v11;
        }
        sub_10003E3F0((uint64_t)v13, v13[1]);
        if (v16)
          sub_10003E3F0((uint64_t)v15, v15[1]);
      }
      v2 = (_QWORD *)*v2;
    }
    while (v2);
  }
}

void sub_1003AF7E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, _QWORD *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void **a27,uint64_t a28,uint64_t a29,_QWORD *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  *(_QWORD *)(v45 + 8) = v48;
  sub_10003E3F0(v47, a12);
  if (a45)
    sub_10003E3F0(v46, a30);
  a27 = (void **)v45;
  sub_1001544C0(&a27);
  _Unwind_Resume(a1);
}

BOOL sub_1003AF83C(_QWORD *a1, double *a2)
{
  unint64_t v5;

  if (a1[23] || sub_1003C8158((uint64_t)(a1 + 3)))
    return 0;
  v5 = a1[14] + a1[13] - 1;
  return *a2 - *(double *)(*(_QWORD *)(a1[10] + ((v5 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v5 & 0x1FF)) > 1.0;
}

BOOL sub_1003AF8B0(double *a1, double **a2)
{
  sub_1003AF938((uint64_t)(a1 + 30), **a2);
  sub_1003AF938((uint64_t)(a1 + 40), (*a2)[1]);
  sub_1003AF938((uint64_t)(a1 + 50), (*a2)[2]);
  return a1[39] < 0.025 && a1[49] < 0.025 && a1[59] < 0.025;
}

double sub_1003AF938(uint64_t a1, double a2)
{
  unint64_t v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double result;
  double v9;

  v9 = a2;
  if (*(_QWORD *)(a1 + 40))
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8)
                                                 + ((*(_QWORD *)(a1 + 32) >> 6) & 0x3FFFFFFFFFFFFF8))
                                     + 8 * (*(_QWORD *)(a1 + 32) & 0x1FFLL));
  sub_1001CF89C((_QWORD *)a1, &v9);
  v3 = *(_QWORD *)(a1 + 40);
  if (v3 >= 0x33)
  {
    ++*(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 40) = v3 - 1;
    sub_1001CFCA4(a1, 1);
    v3 = *(_QWORD *)(a1 + 40);
  }
  if (v3 == 50)
  {
    v4 = *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 8)
                               + (((unint64_t)(*(_QWORD *)(a1 + 32) + 49) >> 6) & 0x3FFFFFFFFFFFFF8))
                   + 8 * ((*(_QWORD *)(a1 + 32) + 49) & 0x1FF));
    *(double *)(a1 + 64) = v4;
  }
  else
  {
    v4 = *(double *)(a1 + 64);
  }
  v5 = *(double *)(a1 + 48);
  v6 = *(double *)(a1 + 56);
  v7 = v5 + (v4 - v6) / 50.0;
  *(double *)(a1 + 48) = v7;
  result = (v4 - v6) * (v6 + v4 - v7 - v5);
  *(double *)(a1 + 72) = result;
  return result;
}

void sub_1003AFA24(double *a1, uint64_t a2)
{
  _QWORD *v4;
  void *__p;
  void *v6;
  uint64_t v7;

  __p = 0;
  v6 = 0;
  v7 = 0;
  sub_1001375D8(&__p, *(const void **)(a2 + 16), *(_QWORD *)(a2 + 24), (uint64_t)(*(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16)) >> 3);
  if (sub_1003AF8B0(a1, (double **)&__p))
  {
    v4 = *(_QWORD **)(a2 + 16);
    *v4 = 0;
    v4[1] = 0;
    v4[2] = 0;
  }
  if (__p)
  {
    v6 = __p;
    operator delete(__p);
  }
}

void sub_1003AFA98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1003AFAB4(uint64_t a1)
{
  char *v2;
  char *v3;
  char *v4;
  char *v5;

  v2 = *(char **)a1;
  if (v2)
  {
    v3 = *(char **)(a1 + 8);
    if (v3 != v2)
    {
      v4 = v3 - 1016;
      do
      {
        *((_QWORD *)v4 + 64) = off_100807398;
        *((_QWORD *)v4 + 53) = off_100807398;
        *((_QWORD *)v4 + 11) = off_100807398;
        *(_QWORD *)v4 = off_100807398;
        v5 = v4 - 464;
        v4 -= 1480;
      }
      while (v5 != v2);
    }
    *(_QWORD *)(a1 + 8) = v2;
    operator delete(v2);
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
  }
}

_QWORD *sub_1003AFB20(_QWORD *result)
{
  *result = off_100807398;
  return result;
}

_QWORD *sub_1003AFB30(_QWORD *result)
{
  *result = off_100807398;
  return result;
}

void sub_1003AFB40(_QWORD *a1)
{
  *a1 = off_100807398;
  operator delete();
}

uint64_t sub_1003AFB60(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_1003AFB6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3[36];

  sub_10030DC3C(a1, v3, a3);
}

void sub_1003AFBB8(_QWORD *a1)
{
  *a1 = off_100807398;
  operator delete();
}

uint64_t sub_1003AFBD8(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_1003AFBE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3[6];

  sub_10030DC3C(a1, v3, a3);
}

void sub_1003AFC04(_QWORD *a1, unint64_t a2)
{
  char *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  int64_t v26;
  char *v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  _QWORD *v39;
  char *v40;
  int64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  int64_t v46;
  char *v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  void *v56;
  _QWORD *v57;
  uint64_t v58;
  char *v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint64_t i;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  _QWORD *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  int64_t v76;
  char *v77;
  unint64_t v78;
  char *v79;
  uint64_t v80;
  char *v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  char *v87;
  void *v88;
  void *__p[2];
  __int128 v90;
  _QWORD *v91;

  v3 = (char *)a1[2];
  v4 = (uint64_t)&v3[-a1[1]];
  if (v4)
    v5 = a2;
  else
    v5 = a2 + 1;
  if ((v5 & 0x1FF) != 0)
    v6 = (v5 >> 9) + 1;
  else
    v6 = v5 >> 9;
  v7 = a1[4];
  if (v6 >= v7 >> 9)
    v8 = v7 >> 9;
  else
    v8 = v6;
  if (v6 <= v7 >> 9)
  {
    for (a1[4] = v7 - (v8 << 9); v8; --v8)
    {
      v16 = (_QWORD *)a1[1];
      v19 = *v16;
      v17 = (char *)(v16 + 1);
      v18 = v19;
      a1[1] = v17;
      if (v3 == (char *)a1[3])
      {
        v20 = (uint64_t)&v17[-*a1];
        if ((unint64_t)v17 <= *a1)
        {
          if (v3 == (char *)*a1)
            v28 = 1;
          else
            v28 = (uint64_t)&v3[-*a1] >> 2;
          v29 = (char *)sub_10005538C((uint64_t)(a1 + 3), v28);
          v31 = &v29[8 * (v28 >> 2)];
          v32 = (uint64_t *)a1[1];
          v3 = v31;
          v33 = a1[2] - (_QWORD)v32;
          if (v33)
          {
            v3 = &v31[v33 & 0xFFFFFFFFFFFFFFF8];
            v34 = 8 * (v33 >> 3);
            v35 = &v29[8 * (v28 >> 2)];
            do
            {
              v36 = *v32++;
              *(_QWORD *)v35 = v36;
              v35 += 8;
              v34 -= 8;
            }
            while (v34);
          }
          v37 = (char *)*a1;
          *a1 = v29;
          a1[1] = v31;
          a1[2] = v3;
          a1[3] = &v29[8 * v30];
          if (v37)
          {
            operator delete(v37);
            v3 = (char *)a1[2];
          }
        }
        else
        {
          v21 = v20 >> 3;
          v22 = v20 >> 3 < -1;
          v23 = (v20 >> 3) + 2;
          if (v22)
            v24 = v23;
          else
            v24 = v21 + 1;
          v25 = &v17[-8 * (v24 >> 1)];
          v26 = v3 - v17;
          if (v3 != v17)
          {
            memmove(&v17[-8 * (v24 >> 1)], v17, v3 - v17);
            v3 = (char *)a1[1];
          }
          v27 = &v3[-8 * (v24 >> 1)];
          v3 = &v25[v26];
          a1[1] = v27;
          a1[2] = &v25[v26];
        }
      }
      *(_QWORD *)v3 = v18;
      v3 = (char *)(a1[2] + 8);
      a1[2] = v3;
    }
  }
  else
  {
    v9 = v6 - v8;
    v10 = a1[3] - *a1;
    if (v6 - v8 <= (v10 >> 3) - (v4 >> 3))
    {
      if (v9)
      {
        while (a1[3] != a1[2])
        {
          __p[0] = operator new(0x1000uLL);
          sub_1001389D0(a1, __p);
          --v6;
          if (!--v9)
            goto LABEL_75;
        }
        for (i = 0; i != v9; ++i)
        {
          __p[0] = operator new(0x1000uLL);
          sub_100138AE4((uint64_t)a1, __p);
          if (a1[2] - a1[1] == 8)
            v64 = 511;
          else
            v64 = 512;
          v65 = v64 + a1[4];
          a1[4] = v65;
        }
        v8 = v6;
      }
      else
      {
LABEL_75:
        v65 = a1[4];
      }
      a1[4] = v65 - (v8 << 9);
      if (v8)
      {
        v66 = (char *)a1[2];
        do
        {
          v67 = (_QWORD *)a1[1];
          v70 = *v67;
          v68 = (char *)(v67 + 1);
          v69 = v70;
          a1[1] = v68;
          if (v66 == (char *)a1[3])
          {
            v71 = (uint64_t)&v68[-*a1];
            if ((unint64_t)v68 <= *a1)
            {
              if (v66 == (char *)*a1)
                v78 = 1;
              else
                v78 = (uint64_t)&v66[-*a1] >> 2;
              v79 = (char *)sub_10005538C((uint64_t)(a1 + 3), v78);
              v81 = &v79[8 * (v78 >> 2)];
              v82 = (uint64_t *)a1[1];
              v66 = v81;
              v83 = a1[2] - (_QWORD)v82;
              if (v83)
              {
                v66 = &v81[v83 & 0xFFFFFFFFFFFFFFF8];
                v84 = 8 * (v83 >> 3);
                v85 = &v79[8 * (v78 >> 2)];
                do
                {
                  v86 = *v82++;
                  *(_QWORD *)v85 = v86;
                  v85 += 8;
                  v84 -= 8;
                }
                while (v84);
              }
              v87 = (char *)*a1;
              *a1 = v79;
              a1[1] = v81;
              a1[2] = v66;
              a1[3] = &v79[8 * v80];
              if (v87)
              {
                operator delete(v87);
                v66 = (char *)a1[2];
              }
            }
            else
            {
              v72 = v71 >> 3;
              v22 = v71 >> 3 < -1;
              v73 = (v71 >> 3) + 2;
              if (v22)
                v74 = v73;
              else
                v74 = v72 + 1;
              v75 = &v68[-8 * (v74 >> 1)];
              v76 = v66 - v68;
              if (v66 != v68)
              {
                memmove(&v68[-8 * (v74 >> 1)], v68, v66 - v68);
                v66 = (char *)a1[1];
              }
              v77 = &v66[-8 * (v74 >> 1)];
              v66 = &v75[v76];
              a1[1] = v77;
              a1[2] = &v75[v76];
            }
          }
          *(_QWORD *)v66 = v69;
          v66 = (char *)(a1[2] + 8);
          a1[2] = v66;
          --v8;
        }
        while (v8);
      }
    }
    else
    {
      v11 = v4 >> 3;
      v12 = v10 >> 2;
      if (v12 <= v9 + v11)
        v13 = v9 + v11;
      else
        v13 = v12;
      v14 = v11 - v8;
      v91 = a1 + 3;
      if (v13)
        v15 = (char *)sub_10005538C((uint64_t)(a1 + 3), v13);
      else
        v15 = 0;
      v38 = v8 << 9;
      __p[0] = v15;
      __p[1] = &v15[8 * v14];
      *(void **)&v90 = __p[1];
      *((_QWORD *)&v90 + 1) = &v15[8 * v13];
      do
      {
        v88 = operator new(0x1000uLL);
        sub_100138C00(__p, &v88);
        --v9;
      }
      while (v9);
      if (v8)
      {
        v39 = (_QWORD *)a1[1];
        v40 = (char *)v90;
        do
        {
          if (v40 == *((char **)&v90 + 1))
          {
            v41 = (char *)__p[1] - (char *)__p[0];
            if (__p[1] <= __p[0])
            {
              if (v40 == __p[0])
                v48 = 1;
              else
                v48 = (v40 - (char *)__p[0]) >> 2;
              v49 = (char *)sub_10005538C((uint64_t)v91, v48);
              v51 = (uint64_t *)__p[1];
              v40 = &v49[8 * (v48 >> 2)];
              v52 = v90 - (unint64_t)__p[1];
              if ((void *)v90 != __p[1])
              {
                v40 = &v49[8 * (v48 >> 2) + (v52 & 0xFFFFFFFFFFFFFFF8)];
                v53 = 8 * (v52 >> 3);
                v54 = &v49[8 * (v48 >> 2)];
                do
                {
                  v55 = *v51++;
                  *(_QWORD *)v54 = v55;
                  v54 += 8;
                  v53 -= 8;
                }
                while (v53);
              }
              v56 = __p[0];
              __p[0] = v49;
              __p[1] = &v49[8 * (v48 >> 2)];
              *(_QWORD *)&v90 = v40;
              *((_QWORD *)&v90 + 1) = &v49[8 * v50];
              if (v56)
              {
                operator delete(v56);
                v40 = (char *)v90;
              }
            }
            else
            {
              v42 = v41 >> 3;
              v22 = v41 >> 3 < -1;
              v43 = (v41 >> 3) + 2;
              if (v22)
                v44 = v43;
              else
                v44 = v42 + 1;
              v45 = (char *)__p[1] - 8 * (v44 >> 1);
              v46 = v40 - (char *)__p[1];
              if (v40 != __p[1])
              {
                memmove((char *)__p[1] - 8 * (v44 >> 1), __p[1], v40 - (char *)__p[1]);
                v40 = (char *)__p[1];
              }
              v47 = &v40[-8 * (v44 >> 1)];
              v40 = &v45[v46];
              __p[1] = v47;
              *(_QWORD *)&v90 = &v45[v46];
            }
          }
          *(_QWORD *)v40 = *v39;
          v40 = (char *)(v90 + 8);
          *(_QWORD *)&v90 = v90 + 8;
          v39 = (_QWORD *)(a1[1] + 8);
          a1[1] = v39;
          --v8;
        }
        while (v8);
      }
      v57 = (_QWORD *)a1[2];
      v58 = -7 - (_QWORD)v57;
      while (v57 != (_QWORD *)a1[1])
      {
        --v57;
        v58 += 8;
        sub_100138D14((uint64_t)__p, v57);
      }
      v59 = (char *)*a1;
      v60 = *(_OWORD *)__p;
      v61 = v90;
      __p[0] = *(void **)a1;
      __p[1] = v57;
      v62 = *((_OWORD *)a1 + 1);
      *(_OWORD *)a1 = v60;
      *((_OWORD *)a1 + 1) = v61;
      v90 = v62;
      a1[4] -= v38;
      if (v57 != (_QWORD *)v62)
        *(_QWORD *)&v90 = v62 + (-(v62 + v58) & 0xFFFFFFFFFFFFFFF8);
      if (v59)
        operator delete(v59);
    }
  }
}

void sub_1003B0118(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1003B018C(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v4;

  result = *(_QWORD **)a1;
  if (a2)
  {
    v4 = a2 + ((uint64_t)(*(_QWORD *)(a1 + 8) - *result) >> 3);
    if (v4 < 1)
      result -= (unint64_t)(511 - v4) >> 9;
    else
      result += (unint64_t)v4 >> 9;
  }
  return result;
}

__n128 sub_1003B01F0(uint64_t a1, uint64_t a2)
{
  __n128 result;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  _OWORD *v6;
  int v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  __int128 *v11;
  __n128 *v12;
  uint64_t v13;
  __int128 *v14;
  __int128 v15;
  const char *v16;
  int v17;
  const char *v18;
  const char *v19;

  result.n128_u64[0] = 0x100000006;
  *(_QWORD *)(a1 + 24) = 0x100000006;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = off_1008188B0;
  if (a1 == a2)
  {
    v16 = "this != &(A)";
    v17 = 603;
LABEL_21:
    v18 = "cnmatrix.h";
    v19 = "CNMatrix";
LABEL_22:
    __assert_rtn(v19, v18, v17, v16);
  }
  v3 = *(_DWORD *)(a2 + 8);
  if (v3 > 6)
  {
    v16 = "this->max_num_rows_ >= num_rows";
    v17 = 422;
LABEL_18:
    v18 = "cnmatrixbase.h";
    v19 = "SetMatrixSize";
    goto LABEL_22;
  }
  v4 = *(_DWORD *)(a2 + 12);
  if (v4 >= 2)
  {
    v16 = "this->max_num_cols_ >= num_cols";
    v17 = 423;
    goto LABEL_18;
  }
  *(_DWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 12) = v4;
  v5 = v4 * v3;
  *(_DWORD *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 20) = v3;
  v6 = (_OWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = a1 + 40;
  if (*(_DWORD *)(a2 + 8) > 6u)
  {
    v16 = "this->max_num_rows_ >= A.num_rows_";
    v17 = 616;
    goto LABEL_21;
  }
  if (*(_DWORD *)(a2 + 12) > 1u)
  {
    v16 = "this->max_num_cols_ >= A.num_cols_";
    v17 = 617;
    goto LABEL_21;
  }
  v7 = *(_DWORD *)(a2 + 16);
  if (v7 > 3)
  {
    v10 = (v7 - 2);
    v11 = *(__int128 **)(a2 + 32);
    v12 = (__n128 *)((char *)v6 + 8 * v10);
    v13 = (v7 - 1) >> 1;
    v14 = v11;
    do
    {
      v15 = *v14++;
      *v6++ = v15;
      --v13;
    }
    while (v13);
    result = *(__n128 *)((char *)v11 + 8 * v10);
    *v12 = result;
  }
  else if ((_DWORD)v5)
  {
    v8 = *(unint64_t **)(a2 + 32);
    do
    {
      v9 = *v8++;
      result.n128_u64[0] = v9;
      *(_QWORD *)v6 = v9;
      v6 = (_OWORD *)((char *)v6 + 8);
      --v5;
    }
    while (v5);
  }
  return result;
}

void sub_1003B034C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = off_100807398;
  _Unwind_Resume(a1);
}

void sub_1003B035C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unsigned int v3;
  unsigned int v4;
  uint64_t (**v6)();
  unsigned int v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t (**v14)();
  __int128 v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t (**v19)();
  __int128 v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t (**v24)();
  __int128 v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;

  v4 = *(_DWORD *)(a1 + 8);
  v3 = *(_DWORD *)(a1 + 12);
  v11 = 0x600000006;
  v6 = off_100818868;
  if (v3 <= 6)
  {
    if (v4 < 7)
    {
      v7 = v3;
      v8 = v4;
      v9 = v4 * v3;
      v10 = v3;
      v12 = &v13;
      sub_10030E1CC(a1, &v6);
      v16 = 0x600000006;
      v14 = off_100818868;
      v15 = xmmword_10072BBA0;
      v17 = &v18;
      sub_10030E3B0((uint64_t)&v6, a1, (uint64_t)&v14);
      *(_QWORD *)(a2 + 24) = 0x600000006;
      *(_QWORD *)a2 = off_100818868;
      *(_OWORD *)(a2 + 8) = xmmword_10072BBA0;
      *(_QWORD *)(a2 + 32) = a2 + 40;
      v26 = 0x100000006;
      v24 = off_1008188F8;
      v25 = xmmword_10072BBB0;
      v27 = &v28;
      v21 = 0x100000018;
      v19 = off_100818940;
      v20 = xmmword_10072BBC0;
      v22 = &v23;
      sub_10031C6D8((uint64_t)&v14, (uint64_t)&v24, (uint64_t)&v19, a2);
    }
    sub_1003EE450(423, "this->max_num_cols_ >= num_cols");
  }
  sub_1003EE450(422, "this->max_num_rows_ >= num_rows");
}

void sub_1003B04D0(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = off_100807398;
  _Unwind_Resume(a1);
}

_QWORD *sub_1003B04E0(_QWORD *result)
{
  *result = off_100807398;
  return result;
}

_QWORD *sub_1003B04F0(_QWORD *result)
{
  *result = off_100815C00;
  return result;
}

void sub_1003B0500(_QWORD *a1)
{
  *a1 = off_100815C00;
  operator delete();
}

uint64_t sub_1003B0520(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_1003B052C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3[6];

  sub_10031CA0C(a1, v3, a3);
}

void sub_1003B054C(_QWORD *a1)
{
  *a1 = off_100807398;
  operator delete();
}

uint64_t sub_1003B056C(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_1003B0578(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3[24];

  sub_10030DC3C(a1, v3, a3);
}

uint64_t sub_1003B05C4(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v7;

  sub_1003B01F0(a1, a2);
  sub_1003B0618(v7 + 88, a3);
  *(_DWORD *)(a1 + 416) = a4;
  return a1;
}

void sub_1003B0608(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = off_100807398;
  _Unwind_Resume(a1);
}

__n128 sub_1003B0618(uint64_t a1, uint64_t a2)
{
  __n128 result;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  _OWORD *v6;
  int v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  __int128 *v11;
  __n128 *v12;
  uint64_t v13;
  __int128 *v14;
  __int128 v15;
  const char *v16;
  int v17;
  const char *v18;
  const char *v19;

  result.n128_u64[0] = 0x600000006;
  *(_QWORD *)(a1 + 24) = 0x600000006;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = off_100818868;
  if (a1 == a2)
  {
    v16 = "this != &(A)";
    v17 = 603;
LABEL_21:
    v18 = "cnmatrix.h";
    v19 = "CNMatrix";
LABEL_22:
    __assert_rtn(v19, v18, v17, v16);
  }
  v3 = *(_DWORD *)(a2 + 8);
  if (v3 > 6)
  {
    v16 = "this->max_num_rows_ >= num_rows";
    v17 = 422;
LABEL_18:
    v18 = "cnmatrixbase.h";
    v19 = "SetMatrixSize";
    goto LABEL_22;
  }
  v4 = *(_DWORD *)(a2 + 12);
  if (v4 >= 7)
  {
    v16 = "this->max_num_cols_ >= num_cols";
    v17 = 423;
    goto LABEL_18;
  }
  *(_DWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 12) = v4;
  v5 = v4 * v3;
  *(_DWORD *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 20) = v3;
  v6 = (_OWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = a1 + 40;
  if (*(_DWORD *)(a2 + 8) > 6u)
  {
    v16 = "this->max_num_rows_ >= A.num_rows_";
    v17 = 616;
    goto LABEL_21;
  }
  if (*(_DWORD *)(a2 + 12) > 6u)
  {
    v16 = "this->max_num_cols_ >= A.num_cols_";
    v17 = 617;
    goto LABEL_21;
  }
  v7 = *(_DWORD *)(a2 + 16);
  if (v7 > 3)
  {
    v10 = (v7 - 2);
    v11 = *(__int128 **)(a2 + 32);
    v12 = (__n128 *)((char *)v6 + 8 * v10);
    v13 = (v7 - 1) >> 1;
    v14 = v11;
    do
    {
      v15 = *v14++;
      *v6++ = v15;
      --v13;
    }
    while (v13);
    result = *(__n128 *)((char *)v11 + 8 * v10);
    *v12 = result;
  }
  else if ((_DWORD)v5)
  {
    v8 = *(unint64_t **)(a2 + 32);
    do
    {
      v9 = *v8++;
      result.n128_u64[0] = v9;
      *(_QWORD *)v6 = v9;
      v6 = (_OWORD *)((char *)v6 + 8);
      --v5;
    }
    while (v5);
  }
  return result;
}

void sub_1003B0770(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = off_100807398;
  _Unwind_Resume(a1);
}

uint64_t sub_1003B0780(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  sub_1001375D8((_QWORD *)(a1 + 16), *(const void **)(a2 + 16), *(_QWORD *)(a2 + 24), (uint64_t)(*(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16)) >> 3);
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  sub_1001375D8((_QWORD *)(a1 + 40), *(const void **)(a2 + 40), *(_QWORD *)(a2 + 48), (uint64_t)(*(_QWORD *)(a2 + 48) - *(_QWORD *)(a2 + 40)) >> 3);
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  sub_1001375D8((_QWORD *)(a1 + 64), *(const void **)(a2 + 64), *(_QWORD *)(a2 + 72), (uint64_t)(*(_QWORD *)(a2 + 72) - *(_QWORD *)(a2 + 64)) >> 3);
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  sub_1001375D8((_QWORD *)(a1 + 88), *(const void **)(a2 + 88), *(_QWORD *)(a2 + 96), (uint64_t)(*(_QWORD *)(a2 + 96) - *(_QWORD *)(a2 + 88)) >> 3);
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  sub_1001375D8((_QWORD *)(a1 + 112), *(const void **)(a2 + 112), *(_QWORD *)(a2 + 120), (uint64_t)(*(_QWORD *)(a2 + 120) - *(_QWORD *)(a2 + 112)) >> 3);
  return a1;
}

void sub_1003B085C(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  void **v2;
  void **v3;
  void **v4;
  void **v5;
  void *v7;
  void *v8;
  void *v9;
  void *v10;

  v7 = *v5;
  if (*v5)
  {
    v1[12] = v7;
    operator delete(v7);
  }
  v8 = *v4;
  if (*v4)
  {
    v1[9] = v8;
    operator delete(v8);
  }
  v9 = *v3;
  if (*v3)
  {
    v1[6] = v9;
    operator delete(v9);
  }
  v10 = *v2;
  if (*v2)
  {
    v1[3] = v10;
    operator delete(v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003B08C0(uint64_t a1)
{
  uint64_t v3;

  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  v3 = 0;
  sub_1003B091C((_QWORD *)a1, 0x32uLL, &v3);
  return a1;
}

void sub_1003B0908(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_100152A44(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1003B091C(_QWORD *result, unint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  _QWORD v11[2];

  v3 = (uint64_t)result;
  v4 = result[5];
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
    return sub_1003B09B8(result, v6, a3);
  if (!v5)
  {
    v7 = result[1];
    if (result[2] == v7)
      v8 = 0;
    else
      v8 = *(_QWORD *)(v7 + 8 * (result[4] >> 9)) + 8 * (result[4] & 0x1FFLL);
    v11[0] = v7 + 8 * (result[4] >> 9);
    v11[1] = v8;
    v9 = (char *)sub_1003B018C((uint64_t)v11, a2);
    return (_QWORD *)sub_1003B0AD0(v3, v9, v10);
  }
  return result;
}

_QWORD *sub_1003B09B8(_QWORD *a1, unint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD v21[2];

  v6 = a1[1];
  v7 = a1[2];
  if (v7 == v6)
    v8 = 0;
  else
    v8 = ((v7 - v6) << 6) - 1;
  v9 = a1[5] + a1[4];
  v10 = v8 - v9;
  v11 = a2 > v10;
  v12 = a2 - v10;
  if (v11)
  {
    sub_1003AFC04(a1, v12);
    v6 = a1[1];
    v7 = a1[2];
    v9 = a1[4] + a1[5];
  }
  v13 = (_QWORD *)(v6 + 8 * (v9 >> 9));
  if (v7 == v6)
    v14 = 0;
  else
    v14 = *v13 + 8 * (v9 & 0x1FF);
  v21[0] = v6 + 8 * (v9 >> 9);
  v21[1] = v14;
  result = sub_1003B018C((uint64_t)v21, a2);
  if (v14 != v16)
  {
    v17 = a1[5];
    do
    {
      if (v13 == result)
        v18 = v16;
      else
        v18 = *v13 + 4096;
      if (v14 == v18)
      {
        v18 = v14;
      }
      else
      {
        v19 = (_QWORD *)v14;
        do
          *v19++ = *a3;
        while (v19 != (_QWORD *)v18);
      }
      v17 += (v18 - v14) >> 3;
      if (v13 == result)
        break;
      v20 = v13[1];
      ++v13;
      v14 = v20;
    }
    while (v20 != v16);
    a1[5] = v17;
  }
  return result;
}

uint64_t sub_1003B0AD0(uint64_t result, char *a2, uint64_t a3)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[2];

  v3 = (_QWORD *)result;
  v4 = *(_QWORD *)(result + 32);
  v5 = v4 + *(_QWORD *)(result + 40);
  v6 = *(_QWORD *)(result + 8);
  v7 = *(_QWORD *)(result + 16);
  v8 = (char *)(v6 + 8 * (v5 >> 9));
  if (v7 == v6)
    v9 = 0;
  else
    v9 = *(_QWORD *)v8 + 8 * (v5 & 0x1FF);
  if (v9 != a3)
  {
    v10 = ((v9 - *(_QWORD *)v8) >> 3) + ((v8 - a2) << 6);
    v11 = a3 - *(_QWORD *)a2;
    v12 = v10 - (v11 >> 3);
    if (v12 >= 1)
    {
      v13 = (char *)(v6 + 8 * (v4 >> 9));
      if (v7 == v6)
        v14 = 0;
      else
        v14 = *(_QWORD *)v13 + 8 * (*(_QWORD *)(result + 32) & 0x1FFLL);
      v16[0] = v13;
      v16[1] = v14;
      if (v14 == a3)
        v15 = 0;
      else
        v15 = (v11 >> 3) + ((a2 - v13) << 6) - ((v14 - *(_QWORD *)v13) >> 3);
      sub_1003B018C((uint64_t)v16, v15);
      v3[5] -= v12;
      do
        result = sub_1001B0F54(v3, 1);
      while ((result & 1) != 0);
    }
  }
  return result;
}

_QWORD *sub_1003B0BC8(uint64_t a1, uint64_t *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  _QWORD *v18;
  unint64_t v19;
  _QWORD v21[3];

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v6 >= v7)
        v4 = v6 % v7;
    }
    else
    {
      v4 = (v7 - 1) & v6;
    }
    v9 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v9)
    {
      v10 = (_QWORD *)*v9;
      if (*v9)
      {
        do
        {
          v11 = v10[1];
          if (v11 == v6)
          {
            if (v10[2] == v6)
              return v10;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v4)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
  sub_1003B0E0C(a1, *a2, a4, (uint64_t)v21);
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    sub_10002A900(a1, v17);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
        v4 = v6 % v7;
      else
        v4 = v6;
    }
    else
    {
      v4 = (v7 - 1) & v6;
    }
  }
  v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v18)
  {
    *(_QWORD *)v21[0] = *v18;
    *v18 = v21[0];
  }
  else
  {
    *(_QWORD *)v21[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v21[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v21[0])
    {
      v19 = *(_QWORD *)(*(_QWORD *)v21[0] + 8);
      if ((v7 & (v7 - 1)) != 0)
      {
        if (v19 >= v7)
          v19 %= v7;
      }
      else
      {
        v19 &= v7 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v19) = v21[0];
    }
  }
  v10 = (_QWORD *)v21[0];
  v21[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  sub_1003B0E84((uint64_t)v21, 0);
  return v10;
}

void sub_1003B0DF4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1003B0E84((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_1003B0E0C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t result;

  v7 = a1 + 16;
  v8 = operator new(0x258uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  v8[2] = **a3;
  result = sub_1003B21DC((uint64_t)(v8 + 3));
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_1003B0E6C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1003B0E84(v1, 0);
  _Unwind_Resume(a1);
}

void sub_1003B0E84(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_100152BC4((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

_QWORD *sub_1003B0EC8(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD **v10;
  _QWORD *i;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      for (i = *v10; i; i = (_QWORD *)*i)
      {
        v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == v7)
            return i;
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8)
              v12 %= v8;
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4)
            break;
        }
      }
    }
  }
  v13 = (_QWORD *)(a1 + 16);
  i = operator new(0x30uLL);
  *i = 0;
  i[1] = v7;
  v14 = **a4;
  i[5] = 0;
  i[4] = 0;
  i[2] = v14;
  i[3] = i + 4;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v8 || (float)(v16 * (float)v8) < v15)
  {
    v17 = 1;
    if (v8 >= 3)
      v17 = (v8 & (v8 - 1)) != 0;
    v18 = v17 | (2 * v8);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    sub_10002A900(a1, v20);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v21 = *(_QWORD *)a1;
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v22)
  {
    *i = *v22;
LABEL_38:
    *v22 = i;
    goto LABEL_39;
  }
  *i = *v13;
  *v13 = i;
  *(_QWORD *)(v21 + 8 * v4) = v13;
  if (*i)
  {
    v23 = *(_QWORD *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v23 >= v8)
        v23 %= v8;
    }
    else
    {
      v23 &= v8 - 1;
    }
    v22 = (_QWORD *)(*(_QWORD *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_1003B1100(_Unwind_Exception *a1)
{
  _QWORD **v1;
  uint64_t v2;

  sub_1003B111C(v2, v1);
  _Unwind_Resume(a1);
}

void sub_1003B111C(uint64_t a1, _QWORD **a2)
{
  if (*(_BYTE *)(a1 + 8))
  {
    sub_10003E3F0((uint64_t)(a2 + 3), a2[4]);
  }
  else if (!a2)
  {
    return;
  }
  operator delete(a2);
}

uint64_t *sub_1003B1164(_QWORD *a1, unint64_t *a2)
{
  uint64_t *result;

  result = sub_1000550B8(a1, a2);
  if (result)
  {
    sub_10002A560(a1, result);
    return (uint64_t *)1;
  }
  return result;
}

uint64_t *sub_1003B1198(_QWORD *a1, unint64_t *a2)
{
  uint64_t *result;

  result = sub_1000550B8(a1, a2);
  if (result)
  {
    sub_1003B11CC(a1, result);
    return (uint64_t *)1;
  }
  return result;
}

uint64_t sub_1003B11CC(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  _QWORD **v3;
  _QWORD **v5;
  uint64_t v6;

  v2 = *a2;
  sub_10002A5A0(a1, a2, (uint64_t)&v5);
  v3 = v5;
  v5 = 0;
  if (v3)
    sub_1003B111C((uint64_t)&v6, v3);
  return v2;
}

uint64_t sub_1003B1214(_QWORD *a1, unint64_t *a2)
{
  uint64_t result;
  _BYTE v4[24];

  result = (uint64_t)sub_1000550B8(a1, a2);
  if (result)
  {
    sub_10002A5A0(a1, (_QWORD *)result, (uint64_t)v4);
    sub_1003B0E84((uint64_t)v4, 0);
    return 1;
  }
  return result;
}

uint64_t sub_1003B1260(uint64_t a1, uint64_t a2)
{
  _QWORD *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  sub_10002A900(a1, *(_QWORD *)(a2 + 8));
  for (i = *(_QWORD **)(a2 + 16); i; i = (_QWORD *)*i)
    sub_1003B12D4(a1, i + 2, i + 2);
  return a1;
}

void sub_1003B12BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100152AD8(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1003B12D4(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v6;
  uint8x8_t v7;
  _QWORD *v8;
  _QWORD *result;
  unint64_t v10;
  float v11;
  float v12;
  _BOOL8 v13;
  unint64_t v14;
  unint64_t v15;
  size_t v16;
  _QWORD *v17;
  unint64_t v18;
  _QWORD *v19;

  v5 = *a2;
  v6 = *(_QWORD *)(a1 + 8);
  if (v6)
  {
    v7 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v5 >= v6)
        v3 = v5 % v6;
    }
    else
    {
      v3 = (v6 - 1) & v5;
    }
    v8 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v8)
    {
      result = (_QWORD *)*v8;
      if (*v8)
      {
        do
        {
          v10 = result[1];
          if (v10 == v5)
          {
            if (result[2] == v5)
              return result;
          }
          else
          {
            if (v7.u32[0] > 1uLL)
            {
              if (v10 >= v6)
                v10 %= v6;
            }
            else
            {
              v10 &= v6 - 1;
            }
            if (v10 != v3)
              break;
          }
          result = (_QWORD *)*result;
        }
        while (result);
      }
    }
  }
  sub_1003B1508(a1, *a2, a3, (uint64_t)&v19);
  v11 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v12 = *(float *)(a1 + 32);
  if (!v6 || (float)(v12 * (float)v6) < v11)
  {
    v13 = 1;
    if (v6 >= 3)
      v13 = (v6 & (v6 - 1)) != 0;
    v14 = v13 | (2 * v6);
    v15 = vcvtps_u32_f32(v11 / v12);
    if (v14 <= v15)
      v16 = v15;
    else
      v16 = v14;
    sub_10002A900(a1, v16);
    v6 = *(_QWORD *)(a1 + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v5 >= v6)
        v3 = v5 % v6;
      else
        v3 = v5;
    }
    else
    {
      v3 = (v6 - 1) & v5;
    }
  }
  v17 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v17)
  {
    *v19 = *v17;
    *v17 = v19;
  }
  else
  {
    *v19 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v19;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*v19)
    {
      v18 = *(_QWORD *)(*v19 + 8);
      if ((v6 & (v6 - 1)) != 0)
      {
        if (v18 >= v6)
          v18 %= v6;
      }
      else
      {
        v18 &= v6 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v18) = v19;
    }
  }
  result = v19;
  ++*(_QWORD *)(a1 + 24);
  return result;
}

void sub_1003B14E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _QWORD **a10, uint64_t a11)
{
  if (a10)
    sub_1003B111C((uint64_t)&a11, a10);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_1003B1508@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t *result;

  v7 = a1 + 16;
  v8 = operator new(0x30uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  v8[2] = *a3;
  result = sub_10015453C(v8 + 3, (uint64_t)(a3 + 1));
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_1003B157C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD **v2;
  uint64_t v3;

  *v1 = 0;
  sub_1003B111C(v3, v2);
  _Unwind_Resume(a1);
}

uint64_t sub_1003B1598(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v5;
  BOOL v6;
  uint64_t *v7;

  v2 = *(_QWORD *)(a1 + 8);
  if (!v2)
    return 0;
  v3 = *a2;
  v4 = a1 + 8;
  do
  {
    v5 = *(unsigned __int16 *)(v2 + 26);
    v6 = v5 >= v3;
    if (v5 >= v3)
      v7 = (uint64_t *)v2;
    else
      v7 = (uint64_t *)(v2 + 8);
    if (v6)
      v4 = v2;
    v2 = *v7;
  }
  while (*v7);
  if (v4 == a1 + 8 || v3 < *(unsigned __int16 *)(v4 + 26))
    return 0;
  sub_100027730((uint64_t **)a1, (uint64_t *)v4);
  operator delete((void *)v4);
  return 1;
}

uint64_t sub_1003B1610(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_1003B16CC((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_1003B1684(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x1C71C71C71C71C8)
    sub_1000260B0();
  return operator new(144 * a2);
}

uint64_t sub_1003B16CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  v13 = 0;
  if (a3 == a5)
  {
    v10 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      v9 -= 144;
      sub_1003C843C(v7 - 144);
      v7 = *((_QWORD *)&v15 + 1) - 144;
      *((_QWORD *)&v15 + 1) -= 144;
    }
    while (v9 != a5);
    v10 = v15;
  }
  v13 = 1;
  sub_1003B1784((uint64_t)v12);
  return v10;
}

void sub_1003B1770(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1003B1784((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1003B1784(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_1003B17B8(a1);
  return a1;
}

void sub_1003B17B8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  if (v1 != v2)
  {
    v3 = v1 + 16;
    do
    {
      sub_10003E3F0(v3, *(_QWORD **)(v3 + 8));
      v4 = v3 + 128;
      v3 += 144;
    }
    while (v4 != v2);
  }
}

void **sub_1003B1804(void **a1)
{
  sub_1003B1834((uint64_t)a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void sub_1003B1834(uint64_t a1)
{
  uint64_t i;
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 144;
    sub_10003E3F0(i - 128, *(_QWORD **)(i - 120));
  }
}

uint64_t sub_1003B187C(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  void *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t *v15;

  v2 = *a1;
  v3 = 0x8E38E38E38E38E39 * ((a1[1] - *a1) >> 4);
  v4 = v3 + 1;
  if (v3 + 1 > 0x1C71C71C71C71C7)
    sub_100026E7C();
  v5 = (uint64_t)(a1 + 2);
  v6 = 0x8E38E38E38E38E39 * ((a1[2] - v2) >> 4);
  if (2 * v6 > v4)
    v4 = 2 * v6;
  if (v6 >= 0xE38E38E38E38E3)
    v7 = 0x1C71C71C71C71C7;
  else
    v7 = v4;
  v15 = a1 + 2;
  if (v7)
    v8 = (char *)sub_1003B1684(v5, v7);
  else
    v8 = 0;
  v11 = v8;
  v12 = &v8[144 * v3];
  v14 = &v8[144 * v7];
  sub_1003C843C(v12);
  v13 = v12 + 144;
  sub_1003B1610(a1, &v11);
  v9 = a1[1];
  sub_1003B1804(&v11);
  return v9;
}

void sub_1003B1984(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1003B1804((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1003B1998()
{
  std::string *v0;
  __int128 v1;
  std::string *v2;
  __int128 v3;
  std::string *v4;
  __int128 v5;
  std::string *v6;
  __int128 v7;
  std::string *v8;
  __int128 v9;
  std::string *v10;
  __int128 v11;
  std::string *v12;
  __int128 v13;
  std::string *v14;
  __int128 v15;
  std::string *v16;
  __int128 v17;
  std::string *v18;
  __int128 v19;
  std::string *v20;
  __int128 v21;
  std::string *v22;
  __int128 v23;
  std::string *v24;
  __int128 v25;
  std::string *v26;
  __int128 v27;
  std::string *v28;
  __int128 v29;
  std::string *v30;
  __int128 v31;
  std::string *v32;
  __int128 v33;
  std::string *v34;
  __int128 v35;
  std::string v37;
  std::string v38;

  sub_1003610EC(0);
  v0 = std::string::insert(&v37, 0, "reverseLUT_A");
  v1 = *(_OWORD *)&v0->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v0->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v1;
  v0->__r_.__value_.__l.__size_ = 0;
  v0->__r_.__value_.__r.__words[2] = 0;
  v0->__r_.__value_.__r.__words[0] = 0;
  v2 = std::string::append(&v38, ".bin");
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  qword_10085F040 = v2->__r_.__value_.__r.__words[2];
  xmmword_10085F030 = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_10085F030, (void *)&_mh_execute_header);
  sub_1003610EC(1);
  v4 = std::string::insert(&v37, 0, "reverseLUT_A");
  v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  v6 = std::string::append(&v38, ".bin");
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  qword_10085F058 = v6->__r_.__value_.__r.__words[2];
  xmmword_10085F048 = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_10085F048, (void *)&_mh_execute_header);
  sub_1003610EC(2);
  v8 = std::string::insert(&v37, 0, "reverseLUT_A");
  v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  v10 = std::string::append(&v38, ".bin");
  v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  qword_10085F070 = v10->__r_.__value_.__r.__words[2];
  xmmword_10085F060 = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_10085F060, (void *)&_mh_execute_header);
  sub_1003610EC(3);
  v12 = std::string::insert(&v37, 0, "reverseLUT_A");
  v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  v14 = std::string::append(&v38, ".bin");
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  qword_10085F088 = v14->__r_.__value_.__r.__words[2];
  xmmword_10085F078 = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_10085F078, (void *)&_mh_execute_header);
  sub_1003610EC(4);
  v16 = std::string::insert(&v37, 0, "reverseLUT_A");
  v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  v18 = std::string::append(&v38, ".bin");
  v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  qword_10085F0A0 = v18->__r_.__value_.__r.__words[2];
  xmmword_10085F090 = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_10085F090, (void *)&_mh_execute_header);
  sub_1003610EC(5);
  v20 = std::string::insert(&v37, 0, "reverseLUT_A");
  v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  v22 = std::string::append(&v38, ".bin");
  v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  qword_10085F0B8 = v22->__r_.__value_.__r.__words[2];
  xmmword_10085F0A8 = v23;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_10085F0A8, (void *)&_mh_execute_header);
  sub_1003610EC(6);
  v24 = std::string::insert(&v37, 0, "reverseLUT_A");
  v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v25;
  v24->__r_.__value_.__l.__size_ = 0;
  v24->__r_.__value_.__r.__words[2] = 0;
  v24->__r_.__value_.__r.__words[0] = 0;
  v26 = std::string::append(&v38, ".bin");
  v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
  qword_10085F0D0 = v26->__r_.__value_.__r.__words[2];
  xmmword_10085F0C0 = v27;
  v26->__r_.__value_.__l.__size_ = 0;
  v26->__r_.__value_.__r.__words[2] = 0;
  v26->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_10085F0C0, (void *)&_mh_execute_header);
  sub_1003610EC(7);
  v28 = std::string::insert(&v37, 0, "reverseLUT_A");
  v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v29;
  v28->__r_.__value_.__l.__size_ = 0;
  v28->__r_.__value_.__r.__words[2] = 0;
  v28->__r_.__value_.__r.__words[0] = 0;
  v30 = std::string::append(&v38, ".bin");
  v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
  qword_10085F0E8 = v30->__r_.__value_.__r.__words[2];
  xmmword_10085F0D8 = v31;
  v30->__r_.__value_.__l.__size_ = 0;
  v30->__r_.__value_.__r.__words[2] = 0;
  v30->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_10085F0D8, (void *)&_mh_execute_header);
  sub_1003610EC(8);
  v32 = std::string::insert(&v37, 0, "reverseLUT_A");
  v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v33;
  v32->__r_.__value_.__l.__size_ = 0;
  v32->__r_.__value_.__r.__words[2] = 0;
  v32->__r_.__value_.__r.__words[0] = 0;
  v34 = std::string::append(&v38, ".bin");
  v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
  qword_10085F100 = v34->__r_.__value_.__r.__words[2];
  xmmword_10085F0F0 = v35;
  v34->__r_.__value_.__l.__size_ = 0;
  v34->__r_.__value_.__r.__words[2] = 0;
  v34->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  return __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_10085F0F0, (void *)&_mh_execute_header);
}

void sub_1003B1F7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003B1FF0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  double v8;
  double v9;
  uint64_t result;
  uint64_t v11;

  v5 = *(_QWORD *)(a1 + 1328);
  v6 = *(_QWORD *)(a2 + 1328);
  if (v5 >= v6 + 15)
    goto LABEL_10;
  v7 = a2;
  if (v6 >= v5 + 15)
  {
LABEL_11:
    v11 = (uint64_t)a3;
    return sub_1003B54A8(v11, a2);
  }
  v8 = *(double *)(a1 + 1312);
  v9 = *(double *)(a2 + 1312);
  if (v8 >= v9 + 50.0)
  {
LABEL_10:
    v11 = (uint64_t)a3;
    a2 = a1;
    return sub_1003B54A8(v11, a2);
  }
  if (v9 >= v8 + 50.0)
    goto LABEL_11;
  result = sub_1003B20BC(a1, a2);
  if ((_DWORD)result)
  {
    if (*(_QWORD *)(a1 + 1328) >= *(_QWORD *)(v7 + 1328))
      a2 = a1;
    else
      a2 = v7;
    v11 = (uint64_t)a3;
    return sub_1003B54A8(v11, a2);
  }
  *a3 = 0;
  a3[1480] = 0;
  return result;
}

uint64_t sub_1003B20BC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double v3;

  v2 = a1 + 8;
  sub_1003B71DC(a1 + 8, a2 + 8);
  if (v3 < 40.0)
    sub_1003B7878(v2);
  return 0;
}

uint64_t sub_1003B2130(uint64_t a1)
{
  *(_BYTE *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  *(_BYTE *)(a1 + 296) = 0;
  *(_BYTE *)(a1 + 304) = 0;
  *(_BYTE *)(a1 + 312) = 0;
  *(_DWORD *)(a1 + 320) = 0;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  *(_DWORD *)(a1 + 376) = 999;
  *(_BYTE *)(a1 + 240) = 0;
  sub_1003C8AA0(a1 + 384);
  *(_OWORD *)(a1 + 560) = 0u;
  return a1;
}

void sub_1003B21BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  _QWORD *v2;
  va_list va;

  va_start(va, a2);
  sub_100152A44(v2);
  sub_100152C1C((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1003B21E0(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  _OWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _OWORD v17[10];
  _OWORD v18[2];

  *(_BYTE *)a1 = 0;
  *(_QWORD *)(a1 + 8) = a3;
  *(_DWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 24) = 0;
  v7 = (_OWORD *)(a1 + 24);
  *(_BYTE *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  *(_BYTE *)(a1 + 296) = 0;
  *(_BYTE *)(a1 + 304) = 0;
  *(_BYTE *)(a1 + 312) = 0;
  *(_DWORD *)(a1 + 320) = 0;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  *(_BYTE *)(a1 + 240) = 0;
  *(_DWORD *)(a1 + 376) = a2;
  sub_1003C8AA0(a1 + 384);
  *(_QWORD *)(a1 + 560) = *a4;
  v8 = a4[1];
  *(_QWORD *)(a1 + 568) = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  sub_1003C87E0(0, a2, (uint64_t)v17);
  v11 = v17[9];
  v7[8] = v17[8];
  v7[9] = v11;
  v7[10] = v18[0];
  *(_OWORD *)((char *)v7 + 169) = *(_OWORD *)((char *)v18 + 9);
  v12 = v17[5];
  v7[4] = v17[4];
  v7[5] = v12;
  v13 = v17[7];
  v7[6] = v17[6];
  v7[7] = v13;
  v14 = v17[1];
  *v7 = v17[0];
  v7[1] = v14;
  v15 = v17[3];
  v7[2] = v17[2];
  v7[3] = v15;
  return a1;
}

void sub_1003B22F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  sub_10001AE68(v11);
  *(_QWORD *)(v9 + 448) = off_100807398;
  sub_100152A44((_QWORD *)(v9 + 392));
  sub_100152A44(v10);
  sub_100152C1C(&a9);
  _Unwind_Resume(a1);
}

void sub_1003B2338(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t i;

  v3 = *(_QWORD *)(a1 + 216);
  for (i = *(_QWORD *)(a1 + 224); v3 != i; v3 += 1480)
  {
    if (*(unsigned __int8 *)(v3 + 1304) - 1 <= 1)
      sub_1003C2BDC(v3 + 8, a2);
  }
  sub_1003B23BC(a1);
  if (*(_QWORD *)(a1 + 224) == *(_QWORD *)(a1 + 216))
    sub_1003B2464(a1);
}

uint64_t sub_1003B23BC(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  char v7;

  v1 = *(_QWORD *)(result + 216);
  if (v1 != *(_QWORD *)(result + 224))
  {
    v2 = result;
    do
    {
      result = sub_1003C11C0(v1 + 8);
      if ((_DWORD)result)
      {
        result = sub_1003B6A48((uint64_t)&v7, v1 + 1480, *(_QWORD *)(v2 + 224), v1);
        v4 = *(_QWORD **)(v2 + 224);
        if (v4 != v3)
        {
          v5 = v4 - 127;
          do
          {
            v5[64] = off_100807398;
            v5[53] = off_100807398;
            v5[11] = off_100807398;
            *v5 = off_100807398;
            v6 = v5 - 58;
            v5 -= 185;
          }
          while (v6 != v3);
        }
        *(_QWORD *)(v2 + 224) = v3;
      }
      else
      {
        v1 += 1480;
        v3 = *(_QWORD **)(v2 + 224);
      }
    }
    while ((_QWORD *)v1 != v3);
  }
  return result;
}

void sub_1003B2464(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  void **v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_BYTE *)a1 = 0;
  v2 = *(_QWORD **)(a1 + 216);
  v3 = *(_QWORD **)(a1 + 224);
  if (v3 != v2)
  {
    v4 = v3 - 127;
    do
    {
      v4[64] = off_100807398;
      v4[53] = off_100807398;
      v4[11] = off_100807398;
      *v4 = off_100807398;
      v5 = v4 - 58;
      v4 -= 185;
    }
    while (v5 != v2);
  }
  *(_QWORD *)(a1 + 224) = v2;
  *(_DWORD *)(a1 + 320) = 0;
  v6 = *(void ***)(a1 + 336);
  v7 = *(_QWORD *)(a1 + 344);
  *(_QWORD *)(a1 + 368) = 0;
  v8 = v7 - (_QWORD)v6;
  if (v8 >= 0x11)
  {
    do
    {
      operator delete(*v6);
      v9 = *(_QWORD *)(a1 + 344);
      v6 = (void **)(*(_QWORD *)(a1 + 336) + 8);
      *(_QWORD *)(a1 + 336) = v6;
      v8 = v9 - (_QWORD)v6;
    }
    while (v8 > 0x10);
  }
  if (v8 >> 3 == 1)
  {
    v10 = 256;
  }
  else
  {
    if (v8 >> 3 != 2)
      return;
    v10 = 512;
  }
  *(_QWORD *)(a1 + 360) = v10;
}

BOOL sub_1003B251C(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  NSObject *v19;
  _BOOL8 result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int *v31;
  unint64_t v32;
  double v33;
  double v34;
  double v35;
  unint64_t v36;
  uint64_t v37;
  char v38;
  double v39;
  unint64_t v40;
  double v41;
  char v42;
  BOOL v43;
  double v44;
  unsigned int *v45;
  uint64_t v46;
  unint64_t v47;
  int v48;
  unint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  _QWORD *v53;
  _QWORD *v54;
  void **v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  NSObject *v60;
  int v61;
  int v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  double v66;
  unint64_t v67;
  double **v68;
  double *v69;
  double *v70;
  uint64_t v71;
  double v72;
  double v73;
  double *v74;
  _QWORD *v75;
  _QWORD *v76;
  _QWORD *v77;
  _QWORD *v78;
  NSObject *v79;
  NSObject *v80;
  NSObject *v81;
  int v82;
  unsigned int *v83;
  unsigned int *v84;
  int v85;
  unint64_t v86;
  unint64_t v87;
  uint8_t v88[8];
  void *v89;
  uint64_t v90;
  void *v91;
  _BYTE *v92;
  uint64_t v93;
  void *v94[3];
  void *v95[3];
  uint8_t v96[32];
  void *__p[4];
  uint8_t buf[16];
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  _OWORD v108[71];
  char v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  _QWORD v121[4];

  if (a2[1] == *a2)
  {
    v19 = qword_10085F520;
    result = os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    sub_1003F1274(v19, v21, v22, v23, v24, v25, v26, v27);
    return 0;
  }
  if (!*(_BYTE *)(a1 + 208))
    sub_1003F12A8();
  if (!*(_DWORD *)(a1 + 16) && *(_BYTE *)(*a2 + 144) == 5)
  {
    *(_DWORD *)(a1 + 16) = 1;
    sub_1003C87E0(1, *(_DWORD *)(a1 + 376), (uint64_t)buf);
    v6 = v107;
    *(_OWORD *)(a1 + 152) = v106;
    *(_OWORD *)(a1 + 168) = v6;
    *(_OWORD *)(a1 + 184) = v108[0];
    *(_OWORD *)(a1 + 193) = *(_OWORD *)((char *)v108 + 9);
    v7 = v103;
    *(_OWORD *)(a1 + 88) = v102;
    *(_OWORD *)(a1 + 104) = v7;
    v8 = v105;
    *(_OWORD *)(a1 + 120) = v104;
    *(_OWORD *)(a1 + 136) = v8;
    v9 = v99;
    *(_OWORD *)(a1 + 24) = *(_OWORD *)buf;
    *(_OWORD *)(a1 + 40) = v9;
    v10 = v101;
    *(_OWORD *)(a1 + 56) = v100;
    *(_OWORD *)(a1 + 72) = v10;
    if (!*(_BYTE *)(a1 + 208))
      sub_10000BA44();
  }
  v11 = *a2;
  if (*(_BYTE *)(*a2 + 145) == 1)
  {
    if (*(_BYTE *)a1)
    {
      v28 = a2[1];
      v29 = 168;
      if (v28 - v11 == 152)
        v29 = 176;
      v30 = 184;
      if (v28 - v11 == 152)
        v30 = 192;
      v31 = *(unsigned int **)(a1 + 224);
      if (v31 == *(unsigned int **)(a1 + 216))
      {
        v45 = *(unsigned int **)(a1 + 224);
      }
      else
      {
        v32 = 0;
        v33 = *(double *)(a1 + v29);
        v34 = *(double *)(a1 + v30);
        v35 = *(double *)(a1 + 160);
        v36 = (v28 - v11) / 152;
        if (v36 <= 1)
          v36 = 1;
        v87 = v36;
        do
        {
          if (v28 == v11)
            goto LABEL_46;
          v37 = 0;
          v38 = 0;
          v39 = 0.0;
          v40 = v87;
          do
          {
            v41 = COERCE_DOUBLE(sub_1003BCC80(*(_QWORD *)(a1 + 216) + 1480 * v32 + 8, a3, *a2 + v37));
            if (v42)
              v43 = v33 <= v41;
            else
              v43 = 1;
            if (!v43)
            {
              if (v33 <= v35)
                sub_1003F12D0();
              v44 = v34;
              if (v35 < v41)
              {
                v44 = 0.0;
                if (v33 >= v41)
                  v44 = v34 + -v34 / (v33 - v35) * (v41 - v35);
              }
              if (v44 > v39)
                v39 = v44;
              v38 = 1;
            }
            v37 += 152;
            --v40;
          }
          while (v40);
          if ((v38 & 1) == 0)
LABEL_46:
            v39 = *(double *)(a1 + 200);
          v45 = *(unsigned int **)(a1 + 216);
          *(double *)&v45[370 * v32++ + 330] = v39;
          v31 = *(unsigned int **)(a1 + 224);
        }
        while (0x9DC0588FE9DC0589 * (((char *)v31 - (char *)v45) >> 3) > v32);
      }
      v60 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
      {
        v61 = *(unsigned __int16 *)(*a2 + 8);
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = v61;
        _os_log_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_DEFAULT, "#sf,RoseSensorFusionTrackingTargetSet internal state after measurement update of cycle_index %d of aiding channel:", buf, 8u);
        v45 = *(unsigned int **)(a1 + 216);
        v31 = *(unsigned int **)(a1 + 224);
      }
      if (v45 != v31)
      {
        v62 = 0;
        do
        {
          if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
            sub_1003B3B6C(v45);
          ++v62;
          v45 += 370;
        }
        while (v45 != v31);
      }
      goto LABEL_109;
    }
    return 0;
  }
  if (!*(_BYTE *)(*a2 + 145))
  {
    v12 = a2[1];
    if (!*(_BYTE *)a1)
    {
      if (v12 != v11)
      {
        v46 = 0;
        v47 = 0;
        do
        {
          *(_DWORD *)buf = 0;
          sub_1003B55A0((uint64_t)&buf[8]);
          v109 = 0;
          v111 = 0;
          v112 = 0;
          v110 = 0;
          v113 = 0xFFFFFFFFLL;
          v114 = 0;
          v115 = 0u;
          v116 = 0u;
          v117 = 0u;
          v118 = 0u;
          v119 = 0u;
          v120 = 0u;
          memset(v121, 0, sizeof(v121));
          v48 = *(_DWORD *)(a1 + 320);
          *(_DWORD *)(a1 + 320) = v48 + 1;
          *(_DWORD *)buf = v48;
          sub_1003C15C0((uint64_t)&buf[8], v11 + v46, a3);
          v109 = 1;
          v111 = 0;
          v112 = 0;
          v110 = 0;
          v113 = v47;
          v121[3] = 0;
          v121[0] = *(_QWORD *)(v11 + v46 + 48);
          *(int8x16_t *)&v121[1] = vextq_s8(*(int8x16_t *)(v11 + v46 + 64), *(int8x16_t *)(v11 + v46 + 64), 8uLL);
          v49 = *(_QWORD *)(a1 + 224);
          if (v49 >= *(_QWORD *)(a1 + 232))
          {
            v50 = sub_1003B5840((uint64_t *)(a1 + 216), (uint64_t)buf);
          }
          else
          {
            sub_1003B5964(a1 + 232, *(_QWORD *)(a1 + 224), (uint64_t)buf);
            v50 = v49 + 1480;
            *(_QWORD *)(a1 + 224) = v49 + 1480;
          }
          *(_QWORD *)(a1 + 224) = v50;
          ++v47;
          v11 = *a2;
          v46 += 152;
        }
        while (0x86BCA1AF286BCA1BLL * ((uint64_t)(a2[1] - *a2) >> 3) > v47);
      }
      *(_BYTE *)a1 = 1;
      goto LABEL_102;
    }
    v13 = 0x86BCA1AF286BCA1BLL * ((v12 - v11) >> 3);
    v14 = v13 - 0x623FA7701623FA77 * ((uint64_t)(*(_QWORD *)(a1 + 224) - *(_QWORD *)(a1 + 216)) >> 3);
    v95[0] = 0;
    sub_10013C88C(__p, v14, v95);
    sub_1003B5C28(buf, v13, (uint64_t)__p);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    LOBYTE(v94[0]) = 0;
    sub_1003B5CE0(v95, v14, (unsigned __int8 *)v94);
    sub_1003B5F50(__p, v13, (uint64_t)v95);
    if (v95[0])
      operator delete(v95[0]);
    v91 = (void *)0x408F400000000000;
    sub_10013C88C(v94, v14, &v91);
    sub_1003B5C28(v95, v13, (uint64_t)v94);
    if (v94[0])
    {
      v94[1] = v94[0];
      operator delete(v94[0]);
    }
    *(_QWORD *)v96 = 0x408F400000000000;
    sub_10013C88C(&v91, v14, v96);
    sub_1003B5C28(v94, v13, (uint64_t)&v91);
    if (v91)
    {
      v92 = v91;
      operator delete(v91);
    }
    v91 = 0;
    v92 = 0;
    v93 = 0;
    sub_1003B31A4(a1, a2, buf, __p, v95, v94, a3);
    sub_1003B3390(a1, (uint64_t **)buf, (uint64_t *)__p, (char *)&v91);
    v15 = (v92 - (_BYTE *)v91) >> 2;
    v16 = *a2;
    v17 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(a2[1] - *a2) >> 3);
    if (v15 == v17)
    {
      memset(v96, 0, 24);
      sub_1001375D8(v96, *(const void **)(v16 + 120), *(_QWORD *)(v16 + 128), (uint64_t)(*(_QWORD *)(v16 + 128) - *(_QWORD *)(v16 + 120)) >> 3);
      v90 = 0;
      if (*(_QWORD *)v96 == *(_QWORD *)&v96[8])
        v18 = 0x3FC5604189374BC7;
      else
        v18 = *(_QWORD *)(*(_QWORD *)&v96[8] - 8);
      v90 = v18;
      sub_1001CF89C((_QWORD *)(a1 + 328), (double *)&v90);
      v63 = *(_QWORD *)(a1 + 368);
      if (v63 > *(int *)(a1 + 24))
      {
        ++*(_QWORD *)(a1 + 360);
        *(_QWORD *)(a1 + 368) = v63 - 1;
        sub_1001CFCA4(a1 + 328, 1);
      }
      if (*(_QWORD *)v96 == *(_QWORD *)&v96[8])
      {
        sub_10013C88C(v88, 6uLL, &qword_10072BC08);
        sub_1003B34E0(a1, a2, (uint64_t *)&v91, v95, v94, a3, v88);
        if (*(_QWORD *)v88)
        {
          v89 = *(void **)v88;
          operator delete(*(void **)v88);
        }
      }
      else
      {
        sub_1003B34E0(a1, a2, (uint64_t *)&v91, v95, v94, a3, v96);
      }
      v64 = *(_QWORD *)(a1 + 368);
      if (v64 == *(_DWORD *)(a1 + 24))
      {
        v65 = *(_QWORD *)(a1 + 336);
        v66 = 0.0;
        if (*(_QWORD *)(a1 + 344) != v65)
        {
          v67 = *(_QWORD *)(a1 + 360);
          v68 = (double **)(v65 + 8 * (v67 >> 9));
          v69 = *v68;
          v70 = &(*v68)[v67 & 0x1FF];
          v71 = *(_QWORD *)(v65 + (((v67 + v64) >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * ((v67 + v64) & 0x1FF);
          while (v70 != (double *)v71)
          {
            v72 = *v70++;
            v73 = v72;
            if ((char *)v70 - (char *)v69 == 4096)
            {
              v74 = v68[1];
              ++v68;
              v69 = v74;
              v70 = v74;
            }
            v66 = v66 + v73;
          }
        }
        if (v66 / (double)v64 > *(double *)(a1 + 32))
        {
          *(_BYTE *)a1 = 0;
          v75 = *(_QWORD **)(a1 + 216);
          v76 = *(_QWORD **)(a1 + 224);
          if (v76 != v75)
          {
            v77 = v76 - 127;
            do
            {
              v77[64] = off_100807398;
              v77[53] = off_100807398;
              v77[11] = off_100807398;
              *v77 = off_100807398;
              v78 = v77 - 58;
              v77 -= 185;
            }
            while (v78 != v75);
          }
          *(_QWORD *)(a1 + 224) = v75;
          *(_DWORD *)(a1 + 320) = 0;
          sub_1003B346C((_QWORD *)(a1 + 328));
          v79 = qword_10085F520;
          if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)v88 = 0;
            _os_log_impl((void *)&_mh_execute_header, v79, OS_LOG_TYPE_DEFAULT, "#sf,RoseSensorFusionTrackingTargetSet:: killed all tracking targets because detected in NFOV consistently", v88, 2u);
          }
        }
      }
      if (*(_QWORD *)v96)
      {
        *(_QWORD *)&v96[8] = *(_QWORD *)v96;
        operator delete(*(void **)v96);
      }
      goto LABEL_99;
    }
    *(_BYTE *)a1 = 0;
    v51 = *(_QWORD **)(a1 + 216);
    v52 = *(_QWORD **)(a1 + 224);
    if (v52 != v51)
    {
      v53 = v52 - 127;
      do
      {
        v53[64] = off_100807398;
        v53[53] = off_100807398;
        v53[11] = off_100807398;
        *v53 = off_100807398;
        v54 = v53 - 58;
        v53 -= 185;
      }
      while (v54 != v51);
    }
    *(_QWORD *)(a1 + 224) = v51;
    *(_DWORD *)(a1 + 320) = 0;
    v55 = *(void ***)(a1 + 336);
    v56 = *(_QWORD *)(a1 + 344);
    *(_QWORD *)(a1 + 368) = 0;
    v57 = v56 - (_QWORD)v55;
    if (v57 >= 0x11)
    {
      do
      {
        operator delete(*v55);
        v58 = *(_QWORD *)(a1 + 344);
        v55 = (void **)(*(_QWORD *)(a1 + 336) + 8);
        *(_QWORD *)(a1 + 336) = v55;
        v57 = v58 - (_QWORD)v55;
      }
      while (v57 > 0x10);
    }
    if (v57 >> 3 == 1)
    {
      v59 = 256;
    }
    else
    {
      if (v57 >> 3 != 2)
        goto LABEL_97;
      v59 = 512;
    }
    *(_QWORD *)(a1 + 360) = v59;
LABEL_97:
    v80 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
    {
      v86 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(a2[1] - *a2) >> 3);
      *(_DWORD *)v96 = 134218240;
      *(_QWORD *)&v96[4] = (v92 - (_BYTE *)v91) >> 2;
      *(_WORD *)&v96[12] = 2048;
      *(_QWORD *)&v96[14] = v86;
      _os_log_error_impl((void *)&_mh_execute_header, v80, OS_LOG_TYPE_ERROR, "#sf,RoseSensorFusionTrackingTargetSet error: assignmentVec size is %zu, measurement size is %zu, reset state", v96, 0x16u);
    }
LABEL_99:
    if (v91)
    {
      v92 = v91;
      operator delete(v91);
    }
    v91 = v94;
    sub_10013133C((void ***)&v91);
    v94[0] = v95;
    sub_10013133C((void ***)v94);
    v95[0] = __p;
    sub_1003B6174((void ***)v95);
    __p[0] = buf;
    sub_10013133C((void ***)__p);
    if (v15 == v17)
    {
LABEL_102:
      v81 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
      {
        v82 = *(unsigned __int16 *)(*a2 + 8);
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = v82;
        _os_log_impl((void *)&_mh_execute_header, v81, OS_LOG_TYPE_DEFAULT, "#sf,RoseSensorFusionTrackingTargetSet internal state after measurement update of cycle_index %d of primary channel:", buf, 8u);
      }
      v83 = *(unsigned int **)(a1 + 216);
      v84 = *(unsigned int **)(a1 + 224);
      if (v83 != v84)
      {
        v85 = 0;
        do
        {
          if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
            sub_1003B3B6C(v83);
          ++v85;
          v83 += 370;
        }
        while (v83 != v84);
      }
      goto LABEL_109;
    }
    return 0;
  }
LABEL_109:
  sub_1003B23BC(a1);
  if (*(_QWORD *)(a1 + 224) == *(_QWORD *)(a1 + 216))
    sub_1003B2464(a1);
  return 1;
}

void sub_1003B3084(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char ****a18, char ****a19, uint64_t a20,char ***a21,uint64_t a22,uint64_t a23,char **a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,char *a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  if (__p)
    operator delete(__p);
  if (a27)
  {
    a28 = (uint64_t)a27;
    operator delete(a27);
  }
  if (a18)
  {
    a19 = a18;
    operator delete(a18);
  }
  a18 = &a21;
  sub_10013133C((void ***)&a18);
  a21 = &a24;
  sub_10013133C((void ***)&a21);
  a24 = &a31;
  sub_1003B6174((void ***)&a24);
  a31 = &a35;
  sub_10013133C((void ***)&a31);
  _Unwind_Resume(a1);
}

void sub_1003B31A4(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, _QWORD *a5, _QWORD *a6, _QWORD *a7)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  long double v24;
  uint64_t v25;

  if (!*(_BYTE *)(a1 + 208))
    sub_1003F12F8();
  v8 = a3[1] - *a3;
  if (!v8 || (v9 = v8 / 24, v10 = (uint64_t)(*(_QWORD *)(*a3 + 8) - *(_QWORD *)*a3) >> 3, v11 = v10 - v9, v10 <= v9))
    sub_1003F1320();
  v13 = 0;
  if (v9 <= 1)
    v14 = 1;
  else
    v14 = v9;
  v25 = v14;
  v15 = v10 - v9;
  do
  {
    v16 = 0;
    v17 = 0;
    v18 = 8;
    do
    {
      if (v11 <= v17)
      {
        if (v15 == v17)
        {
          *(_QWORD *)(*(_QWORD *)(*a4 + 24 * v13) + 8 * ((v11 + v13) >> 6)) |= 1 << (v11
                                                                                     + v13);
          v24 = *(double *)(a1 + 56);
          if (v24 <= 0.0)
            sub_1003F1348();
          *(long double *)(*(_QWORD *)(*a3 + 24 * v13) + 8 * (v11 + v13)) = log(v24);
        }
      }
      else
      {
        v19 = sub_1003B457C(a1, *a2 + 152 * v13, *(_QWORD *)(a1 + 216) + v18, *(_QWORD *)(*a3 + 24 * v13) + v16, *(_QWORD *)(*a5 + 24 * v13) + v16, *(_QWORD *)(*a6 + 24 * v13) + v16, a7);
        v20 = *(_QWORD *)(*a4 + 24 * v13);
        v21 = v17 >> 6;
        v22 = 1 << v17;
        if (v19)
          v23 = *(_QWORD *)(v20 + 8 * v21) | v22;
        else
          v23 = *(_QWORD *)(v20 + 8 * v21) & ~v22;
        *(_QWORD *)(v20 + 8 * v21) = v23;
      }
      ++v17;
      v18 += 1480;
      v16 += 8;
    }
    while (v10 != v17);
    ++v13;
    ++v15;
  }
  while (v13 != v25);
}

void sub_1003B3390(uint64_t a1, uint64_t **a2, uint64_t *a3, char *a4)
{
  void *v7[3];
  void *__p;
  void *v9;
  uint64_t v10;
  void **v11;

  __p = 0;
  v9 = 0;
  v10 = 0;
  memset(v7, 0, sizeof(v7));
  sub_1003B6724(v7, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 3));
  v11 = (void **)0xC1CDCD6500000000;
  sub_1003B4894(a1, a2, v7, a4, (uint64_t)&__p, 0, (double *)&v11, 0.0);
  v11 = v7;
  sub_1003B6174(&v11);
  if (__p)
  {
    v9 = __p;
    operator delete(__p);
  }
}

void sub_1003B3444(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  uint64_t v14;
  uint64_t v15;

  *(_QWORD *)(v15 - 40) = v14;
  sub_1003B6174((void ***)(v15 - 40));
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_1003B346C(_QWORD *a1)
{
  void **v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = (void **)a1[1];
  v3 = a1[2];
  a1[5] = 0;
  v4 = v3 - (_QWORD)v2;
  if (v4 >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v5 = a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v4 = v5 - (_QWORD)v2;
    }
    while (v4 > 0x10);
  }
  if (v4 >> 3 == 1)
  {
    v6 = 256;
  }
  else
  {
    if (v4 >> 3 != 2)
      return;
    v6 = 512;
  }
  a1[4] = v6;
}

void sub_1003B34E0(uint64_t a1, _QWORD *a2, uint64_t *a3, _QWORD *a4, _QWORD *a5, _QWORD *a6, _QWORD *a7)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 *v24;
  uint64_t i;
  uint64_t v26;
  double *v27;
  double v28;
  double *v29;
  double v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  int v37;
  int8x16_t *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  double v42;
  double v43;
  double v44;
  double v45;
  long double v46;
  uint64_t v47;
  double *v48;
  double v49;
  double v50;
  double v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  uint64_t *v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t (**v65)();
  __int128 v66;
  uint64_t v67;
  _BYTE *v68;
  _BYTE v69[1272];
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  int v74;
  char v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  _QWORD v82[4];
  void (**v83)();
  _QWORD v84[8];
  uint64_t (**v85)();
  __int128 v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  void *__p;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  uint64_t v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  uint64_t v100;

  if (a2[1] == *a2)
    sub_1003F1370();
  if (!*(_BYTE *)(a1 + 208))
    sub_1003F1398();
  v11 = a2;
  v12 = *(_QWORD *)(a1 + 216);
  v62 = (uint64_t *)(a1 + 216);
  v13 = *(_QWORD *)(a1 + 224);
  v14 = 0x9DC0588FE9DC0589 * ((v13 - v12) >> 3);
  LOBYTE(v65) = 0;
  sub_1003B5CE0(&__p, v14, (unsigned __int8 *)&v65);
  v57 = v12;
  if (v13 != v12)
  {
    if (v14 <= 1)
      v15 = 1;
    else
      v15 = 0x9DC0588FE9DC0589 * ((v13 - v12) >> 3);
    v16 = (_DWORD *)(*v62 + 1336);
    do
    {
      *v16 = -1;
      v16 += 370;
      --v15;
    }
    while (v15);
  }
  v17 = *a3;
  if (a3[1] != *a3)
  {
    v18 = 0;
    v64 = v11;
    v58 = a5;
    v59 = a6;
    do
    {
      v19 = *(int *)(v17 + 4 * v18);
      if (v14 > v19)
      {
        v20 = *v62;
        v21 = *v62 + 1480 * (int)v19;
        v87 = 0x100000003;
        v85 = off_1008156E8;
        v86 = xmmword_100478880;
        v88 = &v89;
        v67 = 0x300000003;
        v65 = off_100815730;
        v66 = xmmword_100478B80;
        v68 = v69;
        v63 = v21;
        v22 = v21 + 8;
        if (sub_1003BBB2C(v21 + 8, (uint64_t)&v85, (uint64_t)&v65, a6, *v11 + 152 * v18))
        {
          sub_10031895C((uint64_t)v84, (uint64_t)&v85);
          sub_100318AC8((uint64_t)&v83, (uint64_t)&v65);
          v23 = 0;
          v24 = &v91;
          do
          {
            for (i = 0; i != 3; ++i)
              *((_QWORD *)v24 + i) = *(_QWORD *)sub_10030E274((uint64_t)&v83, v23, i);
            ++v23;
            v24 = (__int128 *)((char *)v24 + 24);
          }
          while (v23 != 3);
          v26 = *(_QWORD *)sub_10030E194((uint64_t)v84, 0);
          v27 = (double *)sub_10030E194((uint64_t)v84, 1u);
          v28 = sub_100030334(*v27);
          v29 = (double *)sub_10030E194((uint64_t)v84, 2u);
          v30 = sub_100030334(*v29);
          v31 = v93;
          v32 = v94;
          v98 = v93;
          v99 = v94;
          v33 = v95;
          v100 = v95;
          v34 = v92;
          v35 = v91;
          v96 = v91;
          v97 = v92;
          v36 = v20 + 1480 * (int)v19;
          *(_BYTE *)(v36 + 1344) = 1;
          *(_QWORD *)(v36 + 1352) = v26;
          *(double *)(v36 + 1360) = v28;
          *(double *)(v36 + 1368) = v30;
          *(_OWORD *)(v36 + 1392) = v34;
          *(_OWORD *)(v36 + 1408) = v31;
          *(_OWORD *)(v36 + 1424) = v32;
          *(_QWORD *)(v36 + 1440) = v33;
          *(_OWORD *)(v36 + 1376) = v35;
          v83 = off_100807398;
          v84[0] = off_100807398;
          a5 = v58;
          a6 = v59;
        }
        else
        {
          v41 = v20 + 1480 * (int)v19;
          *(_QWORD *)(v41 + 1440) = 0;
          *(_OWORD *)(v41 + 1424) = 0u;
          *(_OWORD *)(v41 + 1408) = 0u;
          *(_OWORD *)(v41 + 1392) = 0u;
          *(_OWORD *)(v41 + 1376) = 0u;
          *(_OWORD *)(v41 + 1360) = 0u;
          *(_OWORD *)(v41 + 1344) = 0u;
        }
        sub_1003C15C0(v22, *v64 + 152 * v18, a6);
        v42 = sub_100030334(*(double *)(*v64 + 152 * v18 + 72));
        v43 = sub_100030334(*(double *)(*v64 + 152 * v18 + 64));
        v44 = sub_1003B4B28(a1, a7, v42, v43);
        v45 = *(double *)(*(_QWORD *)(*a4 + 24 * v18) + 8 * v19);
        v46 = log(sqrt(*(double *)(*(_QWORD *)(*a5 + 24 * v18) + 8 * v19)));
        v47 = v20 + 1480 * (int)v19;
        v48 = (double *)(v47 + 1312);
        v49 = v44 * (5.0 - v46 + v45 * -0.5) + *(double *)(a1 + 64) * *(double *)(v47 + 1312);
        *(double *)(v47 + 1312) = v49;
        v50 = *(double *)(v47 + 1320);
        if (v50 != 0.0)
        {
          v49 = v50 + v49;
          *v48 = v49;
          *(_QWORD *)(v47 + 1320) = 0;
        }
        v51 = *(double *)(a1 + 96);
        if (v49 > v51)
          *v48 = v51;
        v52 = v20 + 1480 * (int)v19;
        ++*(_QWORD *)(v52 + 1328);
        *(_DWORD *)(v52 + 1336) = v18;
        *(_DWORD *)(v52 + 1340) = 0;
        sub_1003B5074(v63);
      }
      LODWORD(v65) = 0;
      sub_1003B55A0((uint64_t)&v66);
      v75 = 0;
      v76 = 0u;
      v77 = 0u;
      v78 = 0u;
      v79 = 0u;
      v80 = 0u;
      v81 = 0u;
      memset(v82, 0, sizeof(v82));
      v69[1264] = 1;
      v70 = 0;
      v71 = 0;
      v37 = *(_DWORD *)(a1 + 320);
      *(_DWORD *)(a1 + 320) = v37 + 1;
      LODWORD(v65) = v37;
      v72 = 0;
      v73 = v18;
      v74 = 0;
      sub_1003C15C0((uint64_t)&v66, *v11 + 152 * v18, a6);
      v38 = (int8x16_t *)(*v11 + 152 * v18);
      v82[0] = v38[3].i64[0];
      *(int8x16_t *)&v82[1] = vextq_s8(v38[4], v38[4], 8uLL);
      v82[3] = 0;
      v39 = *(_QWORD *)(a1 + 224);
      if (v39 >= *(_QWORD *)(a1 + 232))
      {
        v40 = sub_1003B5840(v62, (uint64_t)&v65);
      }
      else
      {
        sub_1003B5964(a1 + 232, *(_QWORD *)(a1 + 224), (uint64_t)&v65);
        v40 = v39 + 1480;
        *(_QWORD *)(a1 + 224) = v39 + 1480;
      }
      v11 = v64;
      *(_QWORD *)(a1 + 224) = v40;
      ++v18;
      v17 = *a3;
    }
    while (v18 < (a3[1] - *a3) >> 2);
  }
  if (v13 != v57)
  {
    v53 = 0;
    if (v14 <= 1)
      v54 = 1;
    else
      v54 = v14;
    v55 = 1344;
    do
    {
      if (((*(_QWORD *)((char *)__p + ((v53 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v53) & 1) == 0)
      {
        v56 = *(_QWORD *)(a1 + 216) + v55;
        *(double *)(v56 - 32) = *(double *)(a1 + 72) + *(double *)(v56 - 32);
        ++*(_QWORD *)(v56 - 16);
        ++*(_DWORD *)(v56 - 4);
        sub_1003C8440(v56);
      }
      ++v53;
      v55 += 1480;
    }
    while (v54 != v53);
  }
  sub_1003B5158(a1);
  if (__p)
    operator delete(__p);
}

void sub_1003B3B08(_Unwind_Exception *a1)
{
  if (STACK[0x760])
    operator delete((void *)STACK[0x760]);
  _Unwind_Resume(a1);
}

void sub_1003B3B6C(unsigned int *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  void **v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  void *__p[2];
  unsigned __int8 v20;
  uint64_t v21;
  uint64_t v22;

  sub_1000537E4((uint64_t)&v21);
  v2 = sub_100054C60(&v22, (uint64_t)"tid: ", 5);
  v3 = (_QWORD *)std::ostream::operator<<(v2, *a1);
  sub_100054C60(v3, (uint64_t)", ", 2);
  v4 = sub_100054C60(&v22, (uint64_t)"status: ", 8);
  sub_1003C8458(*((_BYTE *)a1 + 1304), __p);
  if ((v20 & 0x80u) == 0)
    v5 = __p;
  else
    v5 = (void **)__p[0];
  if ((v20 & 0x80u) == 0)
    v6 = v20;
  else
    v6 = (uint64_t)__p[1];
  v7 = sub_100054C60(v4, (uint64_t)v5, v6);
  sub_100054C60(v7, (uint64_t)", ", 2);
  if ((char)v20 < 0)
    operator delete(__p[0]);
  v8 = sub_100054C60(&v22, (uint64_t)"track score: ", 13);
  v9 = (_QWORD *)std::ostream::operator<<(v8);
  sub_100054C60(v9, (uint64_t)", ", 2);
  v10 = sub_100054C60(&v22, (uint64_t)"score delta: ", 13);
  v11 = (_QWORD *)std::ostream::operator<<(v10);
  sub_100054C60(v11, (uint64_t)", ", 2);
  v12 = sub_100054C60(&v22, (uint64_t)"track epochs count: ", 20);
  v13 = (_QWORD *)std::ostream::operator<<(v12, *((_QWORD *)a1 + 166));
  sub_100054C60(v13, (uint64_t)", ", 2);
  v14 = sub_100054C60(&v22, (uint64_t)"assigned measurement: ", 22);
  v15 = (_QWORD *)std::ostream::operator<<(v14, a1[334]);
  sub_100054C60(v15, (uint64_t)", ", 2);
  v16 = sub_100054C60(&v22, (uint64_t)"missed count: ", 14);
  v17 = (_QWORD *)std::ostream::operator<<(v16, a1[335]);
  sub_100054C60(v17, (uint64_t)", ", 2);
  v18 = v22;
  *(_DWORD *)((char *)&v22 + *(_QWORD *)(v22 - 24) + 8) = *(_DWORD *)((_BYTE *)&v22 + *(_QWORD *)(v22 - 24) + 8) & 0xFFFFFEFB | 4;
  *(uint64_t *)((char *)&v22 + *(_QWORD *)(v18 - 24) + 16) = 2;
  sub_100054C60(&v22, (uint64_t)"az: ", 4);
  sub_1003B7878((uint64_t)(a1 + 2));
}

void sub_1003B3E5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  sub_100053910((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_1003B3E8C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  char v5;
  NSObject *v6;
  const char *v7;
  _BOOL4 v8;
  unint64_t v9;
  uint64_t v10;
  double v11;
  unint64_t v12;
  double **v13;
  double *v14;
  double *v15;
  uint64_t v16;
  double v17;
  double v18;
  double *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  int v28;
  int v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  int8x16_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  int *v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  int8x16_t v46;
  BOOL v47;
  uint64_t v48;
  int v49;
  int v50;
  _QWORD v51[2];
  _OWORD *v52;
  _OWORD v53[7];
  int v54;
  uint8_t buf[4];
  _QWORD v56[166];
  int v57;
  uint64_t v58;
  char v59;

  if (!*(_BYTE *)(a1 + 208))
    sub_1003F13C0();
  v4 = *(_QWORD *)(a1 + 8);
  v51[0] = 0;
  v51[1] = v4;
  memset(v53, 0, sizeof(v53));
  v52 = v53;
  v54 = 8;
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 144) = 0;
  *(_BYTE *)(a2 + 152) = 0;
  *(_BYTE *)(a2 + 200) = 0;
  if (*(_BYTE *)(a1 + 312))
  {
    *(_BYTE *)(a1 + 312) = 0;
    v5 = 1;
  }
  else
  {
    v5 = 0;
  }
  if (*(_BYTE *)(a1 + 384))
  {
    v6 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134217984;
      v56[0] = v4;
      v7 = "#sf,sensor fusion report is locked, no sensor fusion solution for target 0x%llx";
LABEL_8:
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, v7, buf, 0xCu);
      v8 = *(_BYTE *)(a2 + 200) == 0;
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  v9 = *(_QWORD *)(a1 + 368);
  if (v9 == *(_DWORD *)(a1 + 24))
  {
    v10 = *(_QWORD *)(a1 + 336);
    v11 = 0.0;
    if (*(_QWORD *)(a1 + 344) != v10)
    {
      v12 = *(_QWORD *)(a1 + 360);
      v13 = (double **)(v10 + 8 * (v12 >> 9));
      v14 = *v13;
      v15 = &(*v13)[v12 & 0x1FF];
      v16 = *(_QWORD *)(v10 + (((v12 + v9) >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * ((v12 + v9) & 0x1FF);
      while (v15 != (double *)v16)
      {
        v17 = *v15++;
        v18 = v17;
        if ((char *)v15 - (char *)v14 == 4096)
        {
          v19 = v13[1];
          ++v13;
          v14 = v19;
          v15 = v19;
        }
        v11 = v11 + v18;
      }
    }
    if (v11 / (double)v9 > *(double *)(a1 + 40))
    {
      v6 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134217984;
        v56[0] = v4;
        v7 = "#sf,average p6 is above threshold, no sensor fusion solution for target 0x%llx";
        goto LABEL_8;
      }
LABEL_19:
      v8 = 1;
LABEL_20:
      *(_QWORD *)(a2 + 152) = v4;
      *(_BYTE *)(a2 + 160) = v5;
      *(_QWORD *)(a2 + 168) = 0;
      *(_BYTE *)(a2 + 176) = 0;
      *(_QWORD *)(a2 + 184) = 0;
      *(_BYTE *)(a2 + 192) = 0;
      if (!v8)
        goto LABEL_44;
      goto LABEL_43;
    }
  }
  v20 = *(_QWORD *)(a1 + 216);
  v21 = *(_QWORD *)(a1 + 224) - v20;
  if (!v21)
    goto LABEL_42;
  v22 = 0;
  v23 = 0;
  v24 = 0;
  v25 = v21 / 1480;
  v26 = v25 <= 1 ? 1 : v25;
  v27 = (unint64_t *)(v20 + 1328);
  v28 = -1;
  v29 = -1;
  do
  {
    if (*((_BYTE *)v27 - 24) == 2)
    {
      if (*v27 > v23)
      {
        v23 = *v27;
        v28 = v22;
      }
      if (*v27 > v24)
      {
        v23 = v24;
        v24 = *v27;
        v28 = v29;
        v29 = v22;
      }
    }
    ++v22;
    v27 += 185;
  }
  while (v26 != v22);
  if (v29 == -1)
  {
LABEL_42:
    *(_QWORD *)(a2 + 152) = v4;
    *(_BYTE *)(a2 + 160) = v5;
    *(_QWORD *)(a2 + 168) = 0;
    *(_BYTE *)(a2 + 176) = 0;
    *(_QWORD *)(a2 + 184) = 0;
    *(_BYTE *)(a2 + 192) = 0;
    goto LABEL_43;
  }
  v30 = v29;
  if (v28 != -1)
  {
    sub_1003B1FF0(v20 + 1480 * v29, v20 + 1480 * v28, buf);
    if (v59)
    {
      sub_1003C11C8((uint64_t)v56 + 4, (uint64_t)v51);
      v31 = *(_QWORD *)((char *)&v56[163] + 4);
      v32 = *(_DWORD *)buf;
      v33 = v51[0];
      v34 = *(_QWORD *)&v53[1];
      v35 = *(int8x16_t *)((char *)&v53[1] + 8);
      v36 = v57 != -1;
      if (!*(_BYTE *)(a1 + 296))
        *(_BYTE *)(a1 + 296) = 1;
      v37 = v58;
      *(_DWORD *)(a1 + 240) = v32;
      v38 = a1 + 240;
      *(_QWORD *)(v38 + 8) = v33;
      *(_QWORD *)(v38 + 16) = v34;
      *(int8x16_t *)(v38 + 24) = vextq_s8(v35, v35, 8uLL);
      *(_QWORD *)(v38 + 40) = v31;
      *(_BYTE *)(v38 + 48) = v36;
      sub_1003B4368(a2, (uint64_t)v51);
      v39 = *(unsigned __int8 *)(a2 + 200);
      *(_QWORD *)(a2 + 152) = v4;
      *(_BYTE *)(a2 + 160) = v5;
      *(_QWORD *)(a2 + 168) = v31;
      *(_BYTE *)(a2 + 176) = 1;
      *(_QWORD *)(a2 + 184) = v37;
      *(_BYTE *)(a2 + 192) = 1;
      if (v39)
        goto LABEL_40;
    }
    else
    {
      v50 = *(unsigned __int8 *)(a2 + 200);
      *(_QWORD *)(a2 + 152) = v4;
      *(_BYTE *)(a2 + 160) = v5;
      *(_QWORD *)(a2 + 168) = 0;
      *(_BYTE *)(a2 + 176) = 0;
      *(_QWORD *)(a2 + 184) = 0;
      *(_BYTE *)(a2 + 192) = 0;
      if (v50)
      {
LABEL_40:
        if (v59)
        {
          *(_QWORD *)((char *)&v56[121] + 4) = off_100807398;
          *(_QWORD *)((char *)&v56[110] + 4) = off_100807398;
          *(_QWORD *)((char *)&v56[68] + 4) = off_100807398;
        }
        goto LABEL_44;
      }
    }
    *(_BYTE *)(a2 + 200) = 1;
    goto LABEL_40;
  }
  sub_1003C11C8(v20 + 1480 * v29 + 8, (uint64_t)v51);
  v40 = (int *)(v20 + 1480 * v30);
  v41 = *((_QWORD *)v40 + 164);
  v42 = *((_QWORD *)v40 + 184);
  v43 = *v40;
  v44 = v51[0];
  v45 = *(_QWORD *)&v53[1];
  v46 = *(int8x16_t *)((char *)&v53[1] + 8);
  v47 = v40[334] != -1;
  if (!*(_BYTE *)(a1 + 296))
    *(_BYTE *)(a1 + 296) = 1;
  *(_DWORD *)(a1 + 240) = v43;
  v48 = a1 + 240;
  *(_QWORD *)(v48 + 8) = v44;
  *(_QWORD *)(v48 + 16) = v45;
  *(int8x16_t *)(v48 + 24) = vextq_s8(v46, v46, 8uLL);
  *(_QWORD *)(v48 + 40) = v41;
  *(_BYTE *)(v48 + 48) = v47;
  sub_1003B4368(a2, (uint64_t)v51);
  v49 = *(unsigned __int8 *)(a2 + 200);
  *(_QWORD *)(a2 + 152) = v4;
  *(_BYTE *)(a2 + 160) = v5;
  *(_QWORD *)(a2 + 168) = v41;
  *(_BYTE *)(a2 + 176) = 1;
  *(_QWORD *)(a2 + 184) = v42;
  *(_BYTE *)(a2 + 192) = 1;
  if (!v49)
LABEL_43:
    *(_BYTE *)(a2 + 200) = 1;
LABEL_44:
  sub_10003E3F0((uint64_t)&v52, *(_QWORD **)&v53[0]);
}

void sub_1003B432C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, _QWORD *a12)
{
  uint64_t v12;
  uint64_t v13;

  if (*(_BYTE *)(v13 + 144))
    sub_10003E3F0(v13 + 16, *(_QWORD **)(v13 + 24));
  sub_10003E3F0(v12, a12);
  _Unwind_Resume(a1);
}

uint64_t sub_1003B4368(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  if (*(_BYTE *)(a1 + 144))
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    if (a1 != a2)
      sub_1001538C0((uint64_t **)(a1 + 16), *(unsigned __int16 **)(a2 + 16), (unsigned __int16 *)(a2 + 24));
    v4 = *(_OWORD *)(a2 + 40);
    v5 = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 56) = v5;
    *(_OWORD *)(a1 + 40) = v4;
    v6 = *(_OWORD *)(a2 + 88);
    v7 = *(_OWORD *)(a2 + 104);
    v8 = *(_OWORD *)(a2 + 120);
    *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
    *(_OWORD *)(a1 + 120) = v8;
    *(_OWORD *)(a1 + 104) = v7;
    *(_OWORD *)(a1 + 88) = v6;
  }
  else
  {
    sub_1003C843C(a1);
    *(_BYTE *)(a1 + 144) = 1;
  }
  return a1;
}

double sub_1003B4404(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  double result;

  v2 = *(_QWORD *)(a1 + 216);
  v1 = *(_QWORD *)(a1 + 224);
  if (v1 == v2)
    return 0.0;
  result = *(double *)(v2 + 880);
  do
  {
    if (*(double *)(v2 + 880) < result)
      result = *(double *)(v2 + 880);
    v2 += 1480;
  }
  while (v2 != v1);
  return result;
}

uint64_t sub_1003B4438(uint64_t result)
{
  uint64_t v1;
  double v2;

  v1 = *(_QWORD *)(result + 216);
  v2 = 0.0;
  while (v1 != *(_QWORD *)(result + 224))
  {
    if (*(double *)(v1 + 880) > v2)
      v2 = *(double *)(v1 + 880);
    v1 += 1480;
  }
  return result;
}

uint64_t sub_1003B4460@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(result + 216);
  v4 = *(_QWORD *)(result + 224);
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  if (v4 != v3)
    sub_1003AF1B0(v3 + 8);
  return result;
}

void sub_1003B4560(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_100154478((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1003B457C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _QWORD *a7)
{
  uint64_t result;
  uint64_t (**v8)();
  __int128 v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t (**v13)();
  int v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t (**v21)();
  __int128 v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t (**v26)();
  __int128 v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t (**v31)();
  __int128 v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t (**v36)();
  __int128 v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;

  if (!*(_BYTE *)(a1 + 208))
    sub_1003F13E8();
  v28 = 0x100000003;
  v26 = off_1008156E8;
  v27 = xmmword_100478880;
  v29 = &v30;
  v23 = 0x300000003;
  v21 = off_100815730;
  v22 = xmmword_100478B80;
  v24 = &v25;
  result = sub_1003BBB2C(a3, (uint64_t)&v26, (uint64_t)&v21, a7, a2);
  if ((_DWORD)result)
  {
    v18 = 0x300000001;
    v13 = off_1008162E0;
    if (DWORD1(v27) <= 1)
    {
      if (v27 < 4)
      {
        v14 = DWORD1(v27);
        v15 = v27;
        v16 = v27 * DWORD1(v27);
        v17 = DWORD1(v27);
        v19 = &v20;
        sub_10030E1CC((uint64_t)&v26, &v13);
        v10 = 0x300000003;
        v8 = off_100815730;
        v9 = xmmword_100478B80;
        v11 = &v12;
        v38 = 0x100000003;
        v36 = off_1008163B8;
        v37 = xmmword_100478880;
        v39 = &v40;
        v33 = 0x10000000CLL;
        v31 = off_100816400;
        v32 = xmmword_1004794A0;
        v34 = &v35;
        sub_10031C6D8((uint64_t)&v21, (uint64_t)&v36, (uint64_t)&v31, (uint64_t)&v8);
      }
      sub_1003EE450(423, "this->max_num_cols_ >= num_cols");
    }
    sub_1003EE450(422, "this->max_num_rows_ >= num_rows");
  }
  return result;
}

void sub_1003B4894(uint64_t a1, uint64_t **a2, _QWORD *a3, char *a4, uint64_t a5, int a6, double *a7, double a8)
{
  uint64_t v8;
  double v10;
  uint64_t v13;
  uint64_t v14;
  unint64_t v17;
  unint64_t v18;
  uint64_t v20;
  __int32 *v21;
  __int32 *v22;
  char *v23;
  char *v24;
  double v25;
  _DWORD *v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  int v34;
  double v35;
  NSObject *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  _QWORD *v45;

  v8 = (char *)a2[1] - (char *)*a2;
  if (v8)
  {
    v10 = a8;
    if (0xAAAAAAAAAAAAAAABLL * (v8 >> 3) <= a6)
    {
      if (*a7 < a8)
      {
        *a7 = a8;
        if (a4 != (char *)a5)
          sub_1002E556C(a4, *(char **)a5, *(_QWORD *)(a5 + 8), (uint64_t)(*(_QWORD *)(a5 + 8) - *(_QWORD *)a5) >> 2);
      }
    }
    else
    {
      v13 = **a2;
      v14 = (*a2)[1];
      if (v14 != v13)
      {
        v17 = 0;
        v18 = (v14 - v13) >> 3;
        v45 = (_QWORD *)(a5 + 16);
        v44 = a6 + 1;
        if (v18 <= 1)
          v20 = 1;
        else
          v20 = v18;
        do
        {
          if (((*(_QWORD *)(*(_QWORD *)(*a3 + 24 * a6) + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v17) & 1) != 0)
          {
            v21 = *(__int32 **)(a5 + 8);
            v22 = wmemchr(*(__int32 **)a5, v17, ((uint64_t)v21 - *(_QWORD *)a5) >> 2);
            v23 = (char *)(v22 ? v22 : v21);
            v24 = *(char **)(a5 + 8);
            if (v23 == v24)
            {
              v25 = *(double *)((*a2)[3 * a6] + 8 * v17);
              if ((unint64_t)v23 >= *v45)
              {
                v27 = *(char **)a5;
                v28 = (uint64_t)&v24[-*(_QWORD *)a5] >> 2;
                v29 = v28 + 1;
                if ((unint64_t)(v28 + 1) >> 62)
                  sub_100026E7C();
                v30 = *v45 - (_QWORD)v27;
                if (v30 >> 1 > v29)
                  v29 = v30 >> 1;
                if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFFCLL)
                  v31 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v31 = v29;
                if (v31)
                {
                  v32 = (char *)sub_10003B05C((uint64_t)v45, v31);
                  v27 = *(char **)a5;
                  v23 = *(char **)(a5 + 8);
                }
                else
                {
                  v32 = 0;
                }
                v33 = &v32[4 * v28];
                *(_DWORD *)v33 = v17;
                v26 = v33 + 4;
                while (v23 != v27)
                {
                  v34 = *((_DWORD *)v23 - 1);
                  v23 -= 4;
                  *((_DWORD *)v33 - 1) = v34;
                  v33 -= 4;
                }
                *(_QWORD *)a5 = v33;
                *(_QWORD *)(a5 + 8) = v26;
                *(_QWORD *)(a5 + 16) = &v32[4 * v31];
                if (v27)
                  operator delete(v27);
              }
              else
              {
                *(_DWORD *)v23 = v17;
                v26 = v23 + 4;
              }
              v35 = v10 + v25;
              *(_QWORD *)(a5 + 8) = v26;
              sub_1003B4894(a1, a2, a3, a4, a5, v44, a7, v35);
              v10 = v35 - *(double *)((*a2)[3 * a6] + 8 * v17);
              *(_QWORD *)(a5 + 8) -= 4;
            }
          }
          ++v17;
        }
        while (v17 != v20);
      }
    }
  }
  else
  {
    v36 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
      sub_1003F1438(v36, v37, v38, v39, v40, v41, v42, v43);
  }
}

double sub_1003B4B28(uint64_t a1, _QWORD *a2, double a3, double a4)
{
  double v7;
  double v8;
  double v9;
  double v10;
  double *v11;
  double *v12;
  double *v13;
  uint64_t v14;
  double v15;
  double v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  char *v22;
  _DWORD *v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  int v31;
  _DWORD *v32;
  _DWORD *v33;
  double v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  int v49;
  double v50;
  NSObject *v51;
  char *v54;
  char *v55;
  char *v56;
  double v57;
  double v58;
  __int128 __p;
  char *v60;

  if (!*(_BYTE *)(a1 + 208))
    sub_1003F146C();
  v57 = 0.0;
  v58 = 0.0;
  sub_10003047C(&v58, &v57, a3, a4);
  if (v58 < 0.0 || v58 > 180.0 || (v7 = v57, v57 < 0.0) || v57 > 180.0)
    sub_1003F14BC();
  if (a2[1] - *a2 != 48)
    sub_1003F1494();
  if (!*(_DWORD *)(a1 + 376) && a4 >= -60.0 && a3 >= -10.0 && a3 <= 10.0 && a4 <= 0.0 && *(double *)(*a2 + 40) > 0.7)
  {
    v51 = qword_10085F520;
    v50 = 1.7;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(__p) = 134217984;
      *(_QWORD *)((char *)&__p + 4) = 0x3FFB333333333333;
      _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_DEFAULT, "#sf,AoA is in golden area, use default scale factor %f and ignore neural network probability", (uint8_t *)&__p, 0xCu);
    }
    return v50;
  }
  v8 = *(double *)(a1 + 104);
  if (v58 - v8 >= 0.0)
    v9 = v58 - v8;
  else
    v9 = 0.0;
  if (v58 + v8 <= 180.0)
    v10 = v58 + v8;
  else
    v10 = 180.0;
  v11 = (double *)operator new(0x10uLL);
  *v11 = v9;
  v11[1] = v10;
  v12 = (double *)operator new(0x10uLL);
  v13 = v12;
  v14 = 0;
  v15 = v7 + v8;
  if (v7 + v8 > 180.0)
    v15 = 180.0;
  v16 = v7 - v8;
  if (v7 - v8 < 0.0)
    v16 = 0.0;
  *v12 = v16;
  v12[1] = v15;
  __p = 0uLL;
  v60 = 0;
  v54 = 0;
  v55 = 0;
  v56 = 0;
  do
  {
    v17 = 0;
    v18 = v11[v14];
    do
    {
      v19 = *(_QWORD *)(a1 + 560);
      if (v19)
      {
        v20 = sub_10013C3E0(v19, v18, v13[v17]);
        v21 = v20;
        if ((v20 & 0xFF00000000) != 0)
        {
          v22 = (char *)*((_QWORD *)&__p + 1);
          if (*((_QWORD *)&__p + 1) >= (unint64_t)v60)
          {
            v24 = (char *)__p;
            v25 = (uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 2;
            v26 = v25 + 1;
            if ((unint64_t)(v25 + 1) >> 62)
              sub_100026E7C();
            v27 = (uint64_t)&v60[-__p];
            if ((uint64_t)&v60[-__p] >> 1 > v26)
              v26 = v27 >> 1;
            if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFFCLL)
              v28 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v28 = v26;
            if (v28)
            {
              v29 = (char *)sub_10003B05C((uint64_t)&v60, v28);
              v22 = (char *)*((_QWORD *)&__p + 1);
              v24 = (char *)__p;
            }
            else
            {
              v29 = 0;
            }
            v30 = &v29[4 * v25];
            *(_DWORD *)v30 = v21;
            v23 = v30 + 4;
            while (v22 != v24)
            {
              v31 = *((_DWORD *)v22 - 1);
              v22 -= 4;
              *((_DWORD *)v30 - 1) = v31;
              v30 -= 4;
            }
            *(_QWORD *)&__p = v30;
            *((_QWORD *)&__p + 1) = v23;
            v60 = &v29[4 * v28];
            if (v24)
              operator delete(v24);
          }
          else
          {
            **((_DWORD **)&__p + 1) = v20;
            v23 = v22 + 4;
          }
          *((_QWORD *)&__p + 1) = v23;
        }
      }
      ++v17;
    }
    while (v17 != 2);
    ++v14;
  }
  while (v14 != 2);
  v33 = (_DWORD *)*((_QWORD *)&__p + 1);
  v32 = (_DWORD *)__p;
  v34 = 0.0;
  if ((_QWORD)__p == *((_QWORD *)&__p + 1))
    goto LABEL_79;
  do
  {
    if ((*v32 - 7) <= 0xFFFFFFF9)
      __assert_rtn("getAoaScaleFactor", "RoseSensorFusionTrackingTargetSet.cpp", 750, "region > 0 && region <= kNumberOfRegions");
    v35 = (*v32 - 1);
    v36 = *a2;
    v37 = v55;
    if (v55 >= v56)
    {
      v39 = v54;
      v40 = (v55 - v54) >> 3;
      v41 = v40 + 1;
      if ((unint64_t)(v40 + 1) >> 61)
        sub_100026E7C();
      v42 = v56 - v54;
      if ((v56 - v54) >> 2 > v41)
        v41 = v42 >> 2;
      if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF8)
        v43 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v43 = v41;
      if (v43)
      {
        v44 = (char *)sub_10005538C((uint64_t)&v56, v43);
        v39 = v54;
        v37 = v55;
      }
      else
      {
        v44 = 0;
      }
      v45 = &v44[8 * v40];
      *(_QWORD *)v45 = *(_QWORD *)(v36 + 8 * v35);
      v38 = v45 + 8;
      while (v37 != v39)
      {
        v46 = *((_QWORD *)v37 - 1);
        v37 -= 8;
        *((_QWORD *)v45 - 1) = v46;
        v45 -= 8;
      }
      v54 = v45;
      v56 = &v44[8 * v43];
      if (v39)
        operator delete(v39);
    }
    else
    {
      *(_QWORD *)v55 = *(_QWORD *)(v36 + 8 * v35);
      v38 = v55 + 8;
    }
    v55 = v38;
    ++v32;
  }
  while (v32 != v33);
  v32 = (_DWORD *)__p;
  if (*((_QWORD *)&__p + 1) == (_QWORD)__p)
    goto LABEL_79;
  v47 = 0;
  v48 = (uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 2;
  if (v48 <= 1)
    v48 = 1;
  v49 = -1;
  v34 = 0.0;
  do
  {
    if (*(double *)&v54[8 * v47] > v34)
    {
      v49 = *(_DWORD *)(__p + 4 * v47);
      v34 = *(double *)&v54[8 * v47];
    }
    ++v47;
  }
  while (v48 != v47);
  if (v49 != 2)
    goto LABEL_79;
  if (v34 <= *(double *)(a1 + 128))
  {
    if (v34 > *(double *)(a1 + 144))
    {
      v50 = *(double *)(a1 + 152);
      goto LABEL_80;
    }
LABEL_79:
    v50 = *(double *)(a1 + 120) + *(double *)(a1 + 112) * v34;
    goto LABEL_80;
  }
  v50 = *(double *)(a1 + 136);
LABEL_80:
  if (v54)
  {
    operator delete(v54);
    v32 = (_DWORD *)__p;
  }
  if (v32)
  {
    *((_QWORD *)&__p + 1) = v32;
    operator delete(v32);
  }
  operator delete(v13);
  operator delete(v11);
  return v50;
}

void sub_1003B501C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16)
{
  void *v16;

  operator delete(v16);
  _Unwind_Resume(a1);
}

void sub_1003B5074(uint64_t a1)
{
  double v2;

  v2 = *(double *)(a1 + 1464);
  __sincos_stret(*(double *)(a1 + 1456));
  __sincos_stret(v2);
  sub_1003B76D8(a1 + 8);
}

uint64_t sub_1003B5158(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  double v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  char v10;

  if (!*(_BYTE *)(result + 208))
    sub_1003F14E4();
  v1 = result;
  v3 = *(_QWORD *)(result + 216);
  v2 = *(_QWORD *)(result + 224);
  while (v3 != v2)
  {
    v4 = *(double *)(v3 + 1312);
    if (v4 < *(double *)(v1 + 88) || *(_DWORD *)(v3 + 1340) >= *(_DWORD *)(v1 + 28))
    {
      result = sub_1003B6A48((uint64_t)&v10, v3 + 1480, v2, v3);
      v2 = v6;
      v7 = *(_QWORD *)(v1 + 224);
      if (v7 != v6)
      {
        v8 = (_QWORD *)(v7 - 1016);
        do
        {
          v8[64] = off_100807398;
          v8[53] = off_100807398;
          v8[11] = off_100807398;
          *v8 = off_100807398;
          v9 = v8 - 58;
          v8 -= 185;
        }
        while (v9 != (_QWORD *)v6);
      }
      *(_QWORD *)(v1 + 224) = v6;
    }
    else
    {
      if (v4 < *(double *)(v1 + 80))
        v5 = 1;
      else
        v5 = 2;
      *(_BYTE *)(v3 + 1304) = v5;
      v3 += 1480;
      v2 = *(_QWORD *)(v1 + 224);
    }
  }
  return result;
}

void sub_1003B5234(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (**v3)();
  __int128 v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t (**v8)();
  __int128 v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;

  v5 = 0x100000003;
  v3 = off_1008163B8;
  v4 = xmmword_100478880;
  v6 = &v7;
  v10 = 0x300000003;
  v8 = off_100815730;
  v9 = xmmword_100478B80;
  v11 = &v12;
  sub_1003B68B8(a3, (uint64_t)&v3, (uint64_t)&v8);
}

uint64_t sub_1003B54A8(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  memcpy((void *)(a1 + 8), (const void *)(a2 + 8), 0x1C8uLL);
  sub_1003B01F0(a1 + 464, a2 + 464);
  sub_1003B0618(a1 + 552, a2 + 552);
  *(_QWORD *)(a1 + 880) = *(_QWORD *)(a2 + 880);
  sub_1003B01F0(a1 + 888, a2 + 888);
  sub_1003B0618(a1 + 976, a2 + 976);
  v4 = *(_OWORD *)(a2 + 1304);
  v5 = *(_OWORD *)(a2 + 1336);
  *(_OWORD *)(a1 + 1320) = *(_OWORD *)(a2 + 1320);
  *(_OWORD *)(a1 + 1336) = v5;
  *(_OWORD *)(a1 + 1304) = v4;
  v6 = *(_OWORD *)(a2 + 1352);
  v7 = *(_OWORD *)(a2 + 1368);
  v8 = *(_OWORD *)(a2 + 1400);
  *(_OWORD *)(a1 + 1384) = *(_OWORD *)(a2 + 1384);
  *(_OWORD *)(a1 + 1400) = v8;
  *(_OWORD *)(a1 + 1352) = v6;
  *(_OWORD *)(a1 + 1368) = v7;
  v9 = *(_OWORD *)(a2 + 1416);
  v10 = *(_OWORD *)(a2 + 1432);
  v11 = *(_OWORD *)(a2 + 1464);
  *(_OWORD *)(a1 + 1448) = *(_OWORD *)(a2 + 1448);
  *(_OWORD *)(a1 + 1464) = v11;
  *(_OWORD *)(a1 + 1416) = v9;
  *(_OWORD *)(a1 + 1432) = v10;
  *(_BYTE *)(a1 + 1480) = 1;
  return a1;
}

void sub_1003B5570(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;

  *v3 = off_100807398;
  *v2 = off_100807398;
  *v1 = off_100807398;
  _Unwind_Resume(a1);
}

uint64_t sub_1003B55A0(uint64_t a1)
{
  uint64_t v2;
  int i;
  int j;

  *(_QWORD *)a1 = 0x3200000032;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = xmmword_10072BC30;
  *(_QWORD *)(a1 + 120) = 0x3FDA6B5764E3D198;
  *(_OWORD *)(a1 + 128) = xmmword_10072BC48;
  *(_QWORD *)(a1 + 144) = 0x3FB144BFB34BD977;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = xmmword_10072BC30;
  *(_QWORD *)(a1 + 264) = 0x3FDA6B5764E3D198;
  *(_OWORD *)(a1 + 272) = xmmword_10072BC48;
  *(_QWORD *)(a1 + 288) = 0x3FB144BFB34BD977;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = xmmword_10072BC30;
  *(_QWORD *)(a1 + 408) = 0x3FDA6B5764E3D198;
  *(_QWORD *)(a1 + 432) = 0x3FB144BFB34BD977;
  *(_OWORD *)(a1 + 416) = xmmword_10072BC48;
  *(_DWORD *)(a1 + 440) = 8;
  *(_BYTE *)(a1 + 444) = 0;
  v2 = a1 + 456;
  *(_QWORD *)(a1 + 480) = 0x100000006;
  *(_QWORD *)(a1 + 448) = 0;
  *(_QWORD *)(a1 + 456) = off_1008188B0;
  *(_OWORD *)(a1 + 464) = xmmword_10072BBB0;
  *(_QWORD *)(a1 + 488) = a1 + 496;
  sub_10030DD0C((_DWORD *)(a1 + 456), 6, 1);
  sub_10030DD58(v2, 0.0);
  *(_QWORD *)(a1 + 568) = 0x600000006;
  *(_QWORD *)(a1 + 544) = off_100818868;
  *(_OWORD *)(a1 + 552) = xmmword_10072BBA0;
  *(_QWORD *)(a1 + 576) = a1 + 584;
  sub_10030DD0C((_DWORD *)(a1 + 544), 6, 6);
  sub_10030DD58(a1 + 544, 0.0);
  for (i = 0; i != 6; ++i)
    *(_QWORD *)sub_100346AA0(a1 + 544, i, i) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 872) = 0;
  *(_QWORD *)(a1 + 904) = 0x100000006;
  *(_QWORD *)(a1 + 880) = off_1008188B0;
  *(_OWORD *)(a1 + 888) = xmmword_10072BBB0;
  *(_QWORD *)(a1 + 912) = a1 + 920;
  sub_10030DD0C((_DWORD *)(a1 + 880), 6, 1);
  sub_10030DD58(a1 + 880, 0.0);
  *(_QWORD *)(a1 + 992) = 0x600000006;
  *(_QWORD *)(a1 + 968) = off_100818868;
  *(_OWORD *)(a1 + 976) = xmmword_10072BBA0;
  *(_QWORD *)(a1 + 1000) = a1 + 1008;
  sub_10030DD0C((_DWORD *)(a1 + 968), 6, 6);
  sub_10030DD58(a1 + 968, 0.0);
  for (j = 0; j != 6; ++j)
    *(_QWORD *)sub_100346AA0(a1 + 968, j, j) = 0x3FF0000000000000;
  return a1;
}

void sub_1003B57F8(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;

  *v4 = off_100807398;
  *v3 = off_100807398;
  *v2 = off_100807398;
  *v1 = off_100807398;
  _Unwind_Resume(a1);
}

uint64_t sub_1003B5840(uint64_t *a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t *v14;

  v3 = 0x9DC0588FE9DC0589 * ((a1[1] - *a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0x2C47F4EE02C47FLL)
    sub_100026E7C();
  if (0x3B80B11FD3B80B12 * ((a1[2] - *a1) >> 3) > v4)
    v4 = 0x3B80B11FD3B80B12 * ((a1[2] - *a1) >> 3);
  if (0x9DC0588FE9DC0589 * ((a1[2] - *a1) >> 3) >= 0x1623FA7701623FLL)
    v6 = 0x2C47F4EE02C47FLL;
  else
    v6 = v4;
  v14 = a1 + 2;
  if (v6)
    v7 = (char *)sub_1003B5ACC((uint64_t)(a1 + 2), v6);
  else
    v7 = 0;
  v10 = v7;
  v11 = &v7[1480 * v3];
  v13 = &v7[1480 * v6];
  sub_1003B5964((uint64_t)(a1 + 2), (uint64_t)v11, a2);
  v12 = v11 + 1480;
  sub_1003B5A58(a1, &v10);
  v8 = a1[1];
  sub_1003B5BC0((uint64_t)&v10);
  return v8;
}

void sub_1003B5950(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1003B5BC0((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_1003B5964(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __n128 result;
  __int128 v11;
  __int128 v12;

  *(_DWORD *)a2 = *(_DWORD *)a3;
  memcpy((void *)(a2 + 8), (const void *)(a3 + 8), 0x1C8uLL);
  sub_1003B01F0(a2 + 464, a3 + 464);
  sub_1003B0618(a2 + 552, a3 + 552);
  *(_QWORD *)(a2 + 880) = *(_QWORD *)(a3 + 880);
  sub_1003B01F0(a2 + 888, a3 + 888);
  sub_1003B0618(a2 + 976, a3 + 976);
  v5 = *(_OWORD *)(a3 + 1304);
  v6 = *(_OWORD *)(a3 + 1336);
  *(_OWORD *)(a2 + 1320) = *(_OWORD *)(a3 + 1320);
  *(_OWORD *)(a2 + 1336) = v6;
  *(_OWORD *)(a2 + 1304) = v5;
  v7 = *(_OWORD *)(a3 + 1352);
  v8 = *(_OWORD *)(a3 + 1368);
  v9 = *(_OWORD *)(a3 + 1400);
  *(_OWORD *)(a2 + 1384) = *(_OWORD *)(a3 + 1384);
  *(_OWORD *)(a2 + 1400) = v9;
  *(_OWORD *)(a2 + 1352) = v7;
  *(_OWORD *)(a2 + 1368) = v8;
  result = *(__n128 *)(a3 + 1416);
  v11 = *(_OWORD *)(a3 + 1432);
  v12 = *(_OWORD *)(a3 + 1464);
  *(_OWORD *)(a2 + 1448) = *(_OWORD *)(a3 + 1448);
  *(_OWORD *)(a2 + 1464) = v12;
  *(__n128 *)(a2 + 1416) = result;
  *(_OWORD *)(a2 + 1432) = v11;
  return result;
}

void sub_1003B5A28(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;

  *v3 = off_100807398;
  *v2 = off_100807398;
  *v1 = off_100807398;
  _Unwind_Resume(a1);
}

uint64_t sub_1003B5A58(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_1003B5B14((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_1003B5ACC(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x2C47F4EE02C480)
    sub_1000260B0();
  return operator new(1480 * a2);
}

uint64_t sub_1003B5B14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v11 = 0;
  v12 = a7 - 1480;
  while (a3 + v11 != a5)
  {
    v13 = v12 + v11;
    v11 -= 1480;
    sub_1003B5964(a1, v13, v11 + a3);
  }
  return a6;
}

uint64_t sub_1003B5BC0(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  void *v6;

  v2 = *(_QWORD **)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 16);
  if (v3 != v2)
  {
    v4 = v3 - 127;
    do
    {
      v4[64] = off_100807398;
      v4[53] = off_100807398;
      v4[11] = off_100807398;
      *v4 = off_100807398;
      v5 = v4 - 58;
      v4 -= 185;
    }
    while (v5 != v2);
    *(_QWORD *)(a1 + 16) = v2;
  }
  v6 = *(void **)a1;
  if (*(_QWORD *)a1)
    operator delete(v6);
  return a1;
}

_QWORD *sub_1003B5C28(_QWORD *a1, unint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_100026E2C(a1, a2);
    v6 = (_QWORD *)a1[1];
    v7 = 3 * a2;
    v8 = &v6[3 * a2];
    v9 = 8 * v7;
    do
    {
      *v6 = 0;
      v6[1] = 0;
      v6[2] = 0;
      sub_1001375D8(v6, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3);
      v6 += 3;
      v9 -= 24;
    }
    while (v9);
    a1[1] = v8;
  }
  return a1;
}

void sub_1003B5CC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_10013133C(&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_1003B5CE0(_QWORD *a1, unint64_t a2, unsigned __int8 *a3)
{
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;
  int v14;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_1003B5DB0(a1, a2);
    v6 = *a3;
    v7 = a1[1];
    v8 = v7 + a2;
    a1[1] = v7 + a2;
    if (v7)
    {
      v9 = v8 - 1;
      if (((v8 - 1) ^ (v7 - 1)) < 0x40)
      {
LABEL_10:
        v13 = *a1 + 8 * (v7 >> 6);
        v14 = v7 & 0x3F;
        if (v6)
          sub_1003B5DF4(&v13, a2);
        else
          sub_1003B5EA4((uint64_t)&v13, a2);
        return a1;
      }
    }
    else
    {
      v9 = v8 - 1;
    }
    v10 = v9 >> 6;
    if (v8 >= 0x41)
      v11 = v10;
    else
      v11 = 0;
    *(_QWORD *)(*a1 + 8 * v11) = 0;
    goto LABEL_10;
  }
  return a1;
}

void *sub_1003B5DB0(_QWORD *a1, uint64_t a2)
{
  void *result;
  uint64_t v4;

  if (a2 < 0)
    sub_100026E7C();
  result = sub_10005538C((uint64_t)(a1 + 2), ((unint64_t)(a2 - 1) >> 6) + 1);
  *a1 = result;
  a1[1] = 0;
  a1[2] = v4;
  return result;
}

_QWORD *sub_1003B5DF4(_QWORD *result, unint64_t a2)
{
  unint64_t v2;
  _QWORD *v3;
  int v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;

  v2 = a2;
  v3 = result;
  v4 = *((_DWORD *)result + 2);
  v5 = (_QWORD *)*result;
  if (v4)
  {
    if ((64 - v4) >= a2)
      v6 = a2;
    else
      v6 = (64 - v4);
    *v5++ |= (0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1 << v4);
    v2 = a2 - v6;
    *result = v5;
  }
  v7 = v2 >> 6;
  if (v2 >= 0x40)
    result = memset(v5, 255, 8 * v7);
  if ((v2 & 0x3F) != 0)
  {
    v8 = &v5[v7];
    *v3 = v8;
    *v8 |= 0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F);
  }
  return result;
}

void sub_1003B5EA4(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  int v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;

  v2 = a2;
  v4 = *(_DWORD *)(a1 + 8);
  v5 = *(_QWORD **)a1;
  if (v4)
  {
    if ((64 - v4) >= a2)
      v6 = a2;
    else
      v6 = (64 - v4);
    *v5++ &= ~((0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1 << v4));
    v2 = a2 - v6;
    *(_QWORD *)a1 = v5;
  }
  v7 = v2 >> 6;
  if (v2 >= 0x40)
    bzero(v5, 8 * v7);
  if ((v2 & 0x3F) != 0)
  {
    v8 = &v5[v7];
    *(_QWORD *)a1 = v8;
    *v8 &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F));
  }
}

_QWORD *sub_1003B5F50(_QWORD *a1, unint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_100026E2C(a1, a2);
    v6 = (_QWORD *)a1[1];
    v7 = 3 * a2;
    v8 = &v6[3 * a2];
    v9 = 8 * v7;
    do
    {
      sub_1003B5FF8(v6, a3);
      v6 += 3;
      v9 -= 24;
    }
    while (v9);
    a1[1] = v8;
  }
  return a1;
}

void sub_1003B5FD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_1003B6174(&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_1003B5FF8(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
    sub_1003B5DB0(a1, v4);
    sub_1003B6050(a1, *(_QWORD **)a2, 0, (_QWORD *)(*(_QWORD *)a2 + 8 * (*(_QWORD *)(a2 + 8) >> 6)), *(_QWORD *)(a2 + 8) & 0x3F, *(_QWORD *)(a2 + 8));
  }
  return a1;
}

void sub_1003B6050(_QWORD *a1, _QWORD *a2, unint64_t a3, _QWORD *a4, int a5, uint64_t a6)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  _BYTE v11[32];

  v6 = a1[1];
  v7 = v6 + a6;
  a1[1] = v6 + a6;
  if (!v6 || ((v7 - 1) ^ (v6 - 1)) >= 0x40)
  {
    if (v7 >= 0x41)
      v8 = (v7 - 1) >> 6;
    else
      v8 = 0;
    *(_QWORD *)(*a1 + 8 * v8) = 0;
  }
  v9 = *a1 + 8 * (v6 >> 6);
  v10 = v6 & 0x3F;
  sub_1003B60CC(a2, a3, a4, a5, (uint64_t)&v9, (uint64_t)v11);
}

void sub_1003B60CC(_QWORD *a1@<X1>, unint64_t a2@<X2>, _QWORD *a3@<X3>, int a4@<W4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  _BOOL4 v12;

  LODWORD(v6) = a2;
  v7 = *(uint64_t **)a5;
  v8 = *(_DWORD *)(a5 + 8);
  if (a1 != a3 || (_DWORD)a2 != a4)
  {
    do
    {
      v9 = 1 << v8;
      if (((*a1 >> a2) & 1) != 0)
        v10 = *v7 | v9;
      else
        v10 = *v7 & ~v9;
      *v7 = v10;
      v11 = (_DWORD)v6 == 63;
      v12 = v6 == 63;
      v6 = (a2 + 1);
      if (v11)
        v6 = 0;
      if (v8 == 63)
      {
        v8 = 0;
        *(_QWORD *)a5 = ++v7;
      }
      else
      {
        ++v8;
      }
      a1 += v12;
      a2 = v6 | a2 & 0xFFFFFFFF00000000;
      *(_DWORD *)(a5 + 8) = v8;
    }
    while (a1 != a3 || (_DWORD)v6 != a4);
    a1 = a3;
  }
  *(_QWORD *)a6 = a1;
  *(_QWORD *)(a6 + 8) = a2;
  *(_QWORD *)(a6 + 16) = v7;
  *(_DWORD *)(a6 + 24) = v8;
}

void sub_1003B6174(void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    sub_1003B61B4((uint64_t *)v2);
    operator delete(**a1);
  }
}

void sub_1003B61B4(uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;
  void *v4;
  void *v5;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 24)
  {
    v5 = *(void **)(i - 24);
    v4 = v5;
    if (v5)
      operator delete(v4);
  }
  a1[1] = v2;
}

uint64_t sub_1003B61F8(uint64_t a1, int *a2, uint64_t a3, char *a4, double *a5, double *a6, uint64_t *a7, int *a8, int *a9, __int128 *a10)
{
  uint64_t v11;
  uint64_t result;

  v11 = *(_QWORD *)(a1 + 8);
  result = sub_1003B6444(v11, *a2, a3, *a4, *a7, *a8, *a9, a10, *a5, *a6);
  *(_QWORD *)(a1 + 8) = v11 + 584;
  return result;
}

void sub_1003B624C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_1003B6254(uint64_t *a1, int *a2, uint64_t a3, char *a4, double *a5, double *a6, uint64_t *a7, int *a8, int *a9, __int128 *a10)
{
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t *v31;
  void *__p;
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t *v36;

  v10 = a1;
  v11 = *a1;
  v12 = 0x7E3F1F8FC7E3F1F9 * ((a1[1] - *a1) >> 3);
  v13 = v12 + 1;
  if ((unint64_t)(v12 + 1) > 0x70381C0E070381)
    sub_100026E7C();
  v20 = (uint64_t)(a1 + 2);
  v21 = 0x7E3F1F8FC7E3F1F9 * ((v10[2] - v11) >> 3);
  if (2 * v21 > v13)
    v13 = 2 * v21;
  if (v21 >= 0x381C0E070381C0)
    v22 = 0x70381C0E070381;
  else
    v22 = v13;
  v36 = v10 + 2;
  if (v22)
  {
    v23 = a3;
    v31 = v10;
    v24 = v12;
    v25 = (char *)sub_1003B6594(v20, v22);
    v12 = v24;
    v10 = v31;
    a3 = v23;
  }
  else
  {
    v25 = 0;
  }
  __p = v25;
  v33 = &v25[584 * v12];
  v34 = (uint64_t)v33;
  v35 = &v25[584 * v22];
  sub_1003B6444((uint64_t)v33, *a2, a3, *a4, *a7, *a8, *a9, a10, *a5, *a6);
  v34 = (uint64_t)(v33 + 584);
  sub_1003B6520(v10, &__p);
  v26 = v10[1];
  v27 = (uint64_t)v33;
  if ((char *)v34 != v33)
  {
    v28 = (_QWORD *)(v34 - 576);
    do
    {
      v28[11] = off_100807398;
      *v28 = off_100807398;
      v29 = v28 - 1;
      v28 -= 73;
    }
    while (v29 != (_QWORD *)v27);
    v34 = v27;
  }
  if (__p)
    operator delete(__p);
  return v26;
}

uint64_t sub_1003B6444(uint64_t a1, int a2, uint64_t a3, char a4, uint64_t a5, int a6, int a7, __int128 *a8, double a9, double a10)
{
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;

  *(_DWORD *)a1 = a2;
  v19 = a1 + 96;
  sub_1003B01F0(a1 + 8, a3);
  sub_1003B0618(v19, a3 + 88);
  *(_DWORD *)(a1 + 424) = *(_DWORD *)(a3 + 416);
  *(_BYTE *)(a1 + 432) = a4;
  *(double *)(a1 + 440) = a9;
  *(double *)(a1 + 448) = a10;
  *(_QWORD *)(a1 + 456) = a5;
  *(_DWORD *)(a1 + 464) = a6;
  *(_DWORD *)(a1 + 468) = a7;
  v20 = *a8;
  v21 = a8[2];
  *(_OWORD *)(a1 + 488) = a8[1];
  *(_OWORD *)(a1 + 504) = v21;
  *(_OWORD *)(a1 + 472) = v20;
  v22 = a8[3];
  v23 = a8[4];
  v24 = a8[6];
  *(_OWORD *)(a1 + 552) = a8[5];
  *(_OWORD *)(a1 + 568) = v24;
  *(_OWORD *)(a1 + 520) = v22;
  *(_OWORD *)(a1 + 536) = v23;
  return a1;
}

void sub_1003B6510(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = off_100807398;
  _Unwind_Resume(a1);
}

uint64_t sub_1003B6520(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_1003B65DC((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_1003B6594(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x70381C0E070382)
    sub_1000260B0();
  return operator new(584 * a2);
}

uint64_t sub_1003B65DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v11 = 0;
  v12 = a7 - 584;
  while (a3 + v11 != a5)
  {
    v13 = v12 + v11;
    v11 -= 584;
    sub_1003B6680(a1, v13, v11 + a3);
  }
  return a6;
}

__n128 sub_1003B6680(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __n128 result;
  __int128 v12;
  __int128 v13;

  v5 = a3 + 96;
  *(_DWORD *)a2 = *(_DWORD *)a3;
  v6 = a2 + 96;
  sub_1003B01F0(a2 + 8, a3 + 8);
  sub_1003B0618(v6, v5);
  *(_DWORD *)(a2 + 424) = *(_DWORD *)(a3 + 424);
  v7 = *(_OWORD *)(a3 + 448);
  *(_OWORD *)(a2 + 432) = *(_OWORD *)(a3 + 432);
  *(_OWORD *)(a2 + 448) = v7;
  v8 = *(_OWORD *)(a3 + 464);
  v9 = *(_OWORD *)(a3 + 480);
  v10 = *(_OWORD *)(a3 + 512);
  *(_OWORD *)(a2 + 496) = *(_OWORD *)(a3 + 496);
  *(_OWORD *)(a2 + 512) = v10;
  *(_OWORD *)(a2 + 464) = v8;
  *(_OWORD *)(a2 + 480) = v9;
  result = *(__n128 *)(a3 + 528);
  v12 = *(_OWORD *)(a3 + 544);
  v13 = *(_OWORD *)(a3 + 560);
  *(_BYTE *)(a2 + 576) = *(_BYTE *)(a3 + 576);
  *(_OWORD *)(a2 + 544) = v12;
  *(_OWORD *)(a2 + 560) = v13;
  *(__n128 *)(a2 + 528) = result;
  return result;
}

void sub_1003B6714(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = off_100807398;
  _Unwind_Resume(a1);
}

_QWORD *sub_1003B6724(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    sub_100026E2C(result, a4);
    result = sub_1003B67A8((uint64_t)(v6 + 2), a2, a3, (_QWORD *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1003B6788(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  sub_1003B6174(&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_1003B67A8(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  _QWORD *v10;
  _QWORD *v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      sub_1003B5FF8(v4, v6);
      v6 += 24;
      v4 = v11 + 3;
      v11 += 3;
    }
    while (v6 != a3);
  }
  v9 = 1;
  sub_1003B6848((uint64_t)v8);
  return v4;
}

void sub_1003B6834(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1003B6848((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1003B6848(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_1003B687C(a1);
  return a1;
}

void sub_1003B687C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;

  v1 = **(_QWORD **)(a1 + 16);
  v2 = **(_QWORD **)(a1 + 8);
  while (v1 != v2)
  {
    v4 = *(void **)(v1 - 24);
    v1 -= 24;
    v3 = v4;
    if (v4)
      operator delete(v3);
  }
}

void sub_1003B68B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v3;
  uint64_t v6;
  __CLPK_doublereal *v7;
  __CLPK_integer v8;
  void *v9;
  size_t v10;
  __CLPK_integer *v11;
  __CLPK_integer *v12;
  __CLPK_integer v13;
  __CLPK_integer __lda;
  __CLPK_integer __n;
  __CLPK_integer __m;

  v3 = *(_DWORD *)(a1 + 8);
  if (v3 == *(_DWORD *)(a1 + 12))
  {
    if (*(_DWORD *)(a2 + 24) >= v3)
    {
      if (*(_DWORD *)(a3 + 24) >= v3)
      {
        if (*(_DWORD *)(a3 + 28) >= v3)
        {
          sub_10030EC4C(a3, a1);
          v6 = *(unsigned int *)(a3 + 8);
          v7 = *(__CLPK_doublereal **)(a3 + 32);
          v8 = *(_DWORD *)(a3 + 20);
          v9 = *(void **)(a2 + 32);
          __n = *(_DWORD *)(a3 + 12);
          __m = v6;
          __lda = v8;
          if ((int)v6 >= 1)
          {
            v10 = 4 * v6;
            v11 = (__CLPK_integer *)operator new[](4 * v6, &std::nothrow);
            if (v11)
            {
              v12 = v11;
              v13 = 0;
              dgetrf_(&__m, &__n, v7, &__lda, v11, &v13);
              memcpy(v9, v12, v10);
              operator delete[]();
            }
            sub_1003F1584();
          }
          sub_1003F1584();
        }
        sub_1003F155C();
      }
      sub_1003F1534();
    }
    sub_1003F150C();
  }
  sub_1003F15D4();
}

uint64_t sub_1003B6A48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;

  v5 = a2;
  if (a2 == a3)
    return a2;
  v6 = a3;
  do
  {
    *(_DWORD *)a4 = *(_DWORD *)v5;
    memcpy((void *)(a4 + 8), (const void *)(v5 + 8), 0x1C8uLL);
    sub_10030EC4C(a4 + 464, v5 + 464);
    sub_10030EC4C(a4 + 552, v5 + 552);
    *(_QWORD *)(a4 + 880) = *(_QWORD *)(v5 + 880);
    sub_10030EC4C(a4 + 888, v5 + 888);
    sub_10030EC4C(a4 + 976, v5 + 976);
    v8 = *(_OWORD *)(v5 + 1320);
    v7 = *(_OWORD *)(v5 + 1336);
    *(_OWORD *)(a4 + 1304) = *(_OWORD *)(v5 + 1304);
    *(_OWORD *)(a4 + 1320) = v8;
    *(_OWORD *)(a4 + 1336) = v7;
    v9 = *(_OWORD *)(v5 + 1400);
    v11 = *(_OWORD *)(v5 + 1352);
    v10 = *(_OWORD *)(v5 + 1368);
    *(_OWORD *)(a4 + 1384) = *(_OWORD *)(v5 + 1384);
    *(_OWORD *)(a4 + 1400) = v9;
    *(_OWORD *)(a4 + 1352) = v11;
    *(_OWORD *)(a4 + 1368) = v10;
    v12 = *(_OWORD *)(v5 + 1464);
    v14 = *(_OWORD *)(v5 + 1416);
    v13 = *(_OWORD *)(v5 + 1432);
    *(_OWORD *)(a4 + 1448) = *(_OWORD *)(v5 + 1448);
    *(_OWORD *)(a4 + 1464) = v12;
    *(_OWORD *)(a4 + 1416) = v14;
    *(_OWORD *)(a4 + 1432) = v13;
    a4 += 1480;
    v5 += 1480;
  }
  while (v5 != v6);
  return v6;
}

uint64_t sub_1003B6B2C()
{
  std::string *v0;
  __int128 v1;
  std::string *v2;
  __int128 v3;
  std::string *v4;
  __int128 v5;
  std::string *v6;
  __int128 v7;
  std::string *v8;
  __int128 v9;
  std::string *v10;
  __int128 v11;
  std::string *v12;
  __int128 v13;
  std::string *v14;
  __int128 v15;
  std::string *v16;
  __int128 v17;
  std::string *v18;
  __int128 v19;
  std::string *v20;
  __int128 v21;
  std::string *v22;
  __int128 v23;
  std::string *v24;
  __int128 v25;
  std::string *v26;
  __int128 v27;
  std::string *v28;
  __int128 v29;
  std::string *v30;
  __int128 v31;
  std::string *v32;
  __int128 v33;
  std::string *v34;
  __int128 v35;
  std::string v37;
  std::string v38;

  sub_1003610EC(0);
  v0 = std::string::insert(&v37, 0, "reverseLUT_A");
  v1 = *(_OWORD *)&v0->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v0->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v1;
  v0->__r_.__value_.__l.__size_ = 0;
  v0->__r_.__value_.__r.__words[2] = 0;
  v0->__r_.__value_.__r.__words[0] = 0;
  v2 = std::string::append(&v38, ".bin");
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  qword_10085F118 = v2->__r_.__value_.__r.__words[2];
  xmmword_10085F108 = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_10085F108, (void *)&_mh_execute_header);
  sub_1003610EC(1);
  v4 = std::string::insert(&v37, 0, "reverseLUT_A");
  v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  v6 = std::string::append(&v38, ".bin");
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  qword_10085F130 = v6->__r_.__value_.__r.__words[2];
  xmmword_10085F120 = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_10085F120, (void *)&_mh_execute_header);
  sub_1003610EC(2);
  v8 = std::string::insert(&v37, 0, "reverseLUT_A");
  v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  v10 = std::string::append(&v38, ".bin");
  v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  qword_10085F148 = v10->__r_.__value_.__r.__words[2];
  xmmword_10085F138 = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_10085F138, (void *)&_mh_execute_header);
  sub_1003610EC(3);
  v12 = std::string::insert(&v37, 0, "reverseLUT_A");
  v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  v14 = std::string::append(&v38, ".bin");
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  qword_10085F160 = v14->__r_.__value_.__r.__words[2];
  xmmword_10085F150 = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_10085F150, (void *)&_mh_execute_header);
  sub_1003610EC(4);
  v16 = std::string::insert(&v37, 0, "reverseLUT_A");
  v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  v18 = std::string::append(&v38, ".bin");
  v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  qword_10085F178 = v18->__r_.__value_.__r.__words[2];
  xmmword_10085F168 = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_10085F168, (void *)&_mh_execute_header);
  sub_1003610EC(5);
  v20 = std::string::insert(&v37, 0, "reverseLUT_A");
  v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  v22 = std::string::append(&v38, ".bin");
  v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  qword_10085F190 = v22->__r_.__value_.__r.__words[2];
  xmmword_10085F180 = v23;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_10085F180, (void *)&_mh_execute_header);
  sub_1003610EC(6);
  v24 = std::string::insert(&v37, 0, "reverseLUT_A");
  v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v25;
  v24->__r_.__value_.__l.__size_ = 0;
  v24->__r_.__value_.__r.__words[2] = 0;
  v24->__r_.__value_.__r.__words[0] = 0;
  v26 = std::string::append(&v38, ".bin");
  v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
  qword_10085F1A8 = v26->__r_.__value_.__r.__words[2];
  xmmword_10085F198 = v27;
  v26->__r_.__value_.__l.__size_ = 0;
  v26->__r_.__value_.__r.__words[2] = 0;
  v26->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_10085F198, (void *)&_mh_execute_header);
  sub_1003610EC(7);
  v28 = std::string::insert(&v37, 0, "reverseLUT_A");
  v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v29;
  v28->__r_.__value_.__l.__size_ = 0;
  v28->__r_.__value_.__r.__words[2] = 0;
  v28->__r_.__value_.__r.__words[0] = 0;
  v30 = std::string::append(&v38, ".bin");
  v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
  qword_10085F1C0 = v30->__r_.__value_.__r.__words[2];
  xmmword_10085F1B0 = v31;
  v30->__r_.__value_.__l.__size_ = 0;
  v30->__r_.__value_.__r.__words[2] = 0;
  v30->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_10085F1B0, (void *)&_mh_execute_header);
  sub_1003610EC(8);
  v32 = std::string::insert(&v37, 0, "reverseLUT_A");
  v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v33;
  v32->__r_.__value_.__l.__size_ = 0;
  v32->__r_.__value_.__r.__words[2] = 0;
  v32->__r_.__value_.__r.__words[0] = 0;
  v34 = std::string::append(&v38, ".bin");
  v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
  qword_10085F1D8 = v34->__r_.__value_.__r.__words[2];
  xmmword_10085F1C8 = v35;
  v34->__r_.__value_.__l.__size_ = 0;
  v34->__r_.__value_.__r.__words[2] = 0;
  v34->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  return __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_10085F1C8, (void *)&_mh_execute_header);
}

void sub_1003B7110(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1003B7184(_QWORD *result)
{
  result[16] = off_100807398;
  result[8] = off_100807398;
  *result = off_100807398;
  return result;
}

_QWORD *sub_1003B719C(_QWORD *result)
{
  *result = off_100815C00;
  return result;
}

_QWORD *sub_1003B71AC(_QWORD *result)
{
  *result = off_100815C00;
  return result;
}

_QWORD *sub_1003B71BC(_QWORD *result)
{
  *result = off_100815C00;
  return result;
}

_QWORD *sub_1003B71CC(_QWORD *result)
{
  *result = off_100815C00;
  return result;
}

void sub_1003B71DC(uint64_t a1, uint64_t a2)
{
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  _BYTE v8[64];
  _BYTE v9[64];
  uint64_t (**v10)();
  __int128 v11;
  uint64_t v12;
  _BYTE *v13;
  _BYTE v14[24];
  uint64_t (**v15)();
  __int128 v16;
  uint64_t v17;
  _BYTE *v18;
  _BYTE v19[2464];
  uint64_t (**v20)();
  __int128 v21;
  uint64_t v22;
  _BYTE *v23;
  _BYTE v24[24];

  sub_1003B736C(a1, (uint64_t)v9);
  sub_1003B736C(a2, (uint64_t)v8);
  v3 = sub_1003B73E8((uint64_t)v9, (uint64_t)v8);
  v22 = 0x100000003;
  v20 = off_1008156E8;
  v21 = xmmword_100478880;
  v23 = v24;
  v17 = 0x100000134;
  v15 = off_1008157C0;
  v16 = xmmword_1004788A0;
  v18 = v19;
  v12 = 0x100000003;
  v10 = off_1008156E8;
  v11 = xmmword_100478880;
  v13 = v14;
  sub_10030E510((uint64_t)v9, (uint64_t)&v20, (uint64_t)&v15, (uint64_t)&v10, "2");
  v5 = v4;
  v22 = 0x100000003;
  v20 = off_1008156E8;
  v21 = xmmword_100478880;
  v23 = v24;
  v17 = 0x100000134;
  v15 = off_1008157C0;
  v16 = xmmword_1004788A0;
  v18 = v19;
  v12 = 0x100000003;
  v10 = off_1008156E8;
  v11 = xmmword_100478880;
  v13 = v14;
  sub_10030E510((uint64_t)v8, (uint64_t)&v20, (uint64_t)&v15, (uint64_t)&v10, "2");
  if (v5 > 0.0 && v6 > 0.0)
  {
    v7 = acos(v3 / v5 / v6);
    sub_100030334(v7);
  }
}

double sub_1003B736C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t (**v5)();
  __int128 v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;

  v7 = 0x300000001;
  v5 = off_100818988;
  v6 = xmmword_1004794B0;
  v8 = &v9;
  sub_1003C3044(0, 2, &v5);
  return sub_1003B7574(a1 + 456, (uint64_t)&v5, 0, a2);
}

double sub_1003B73E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  double *v5;
  double *v6;
  double result;
  double v8;
  double v9;
  double v10;

  if (*(_DWORD *)(a1 + 8) != 1 && *(_DWORD *)(a1 + 12) != 1)
    sub_1003F15FC();
  if (*(_DWORD *)(a2 + 8) != 1 && *(_DWORD *)(a2 + 12) != 1)
    sub_1003F1624();
  v4 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v4 != *(_DWORD *)(a2 + 16))
    sub_1003F164C();
  if ((int)v4 < 1)
    return 0.0;
  v5 = *(double **)(a1 + 32);
  v6 = *(double **)(a2 + 32);
  result = 0.0;
  do
  {
    v8 = *v5++;
    v9 = v8;
    v10 = *v6++;
    result = result + v9 * v10;
    --v4;
  }
  while (v4);
  return result;
}

void sub_1003B7464(uint64_t a1)
{
  uint64_t (**v1)();
  __int128 v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t (**v6)();
  __int128 v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t (**v11)();
  __int128 v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t (**v16)();
  __int128 v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;

  sub_1003B7574(a1 + 456, (uint64_t)&qword_10085F358, 0, (uint64_t)&v11);
  v3 = 0x100000003;
  v1 = off_1008156E8;
  v2 = xmmword_100478880;
  v4 = &v5;
  sub_10030E2B4((uint64_t)&v11, (uint64_t)&unk_10085FDC0, (uint64_t)&v1);
  v18 = 0x100000003;
  v16 = off_1008156E8;
  v17 = xmmword_100478880;
  v19 = &v20;
  v13 = 0x100000134;
  v11 = off_1008157C0;
  v12 = xmmword_1004788A0;
  v14 = &v15;
  v8 = 0x100000003;
  v6 = off_1008156E8;
  v7 = xmmword_100478880;
  v9 = &v10;
  sub_10030E510((uint64_t)&v1, (uint64_t)&v16, (uint64_t)&v11, (uint64_t)&v6, "2");
}

double sub_1003B7574@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  double result;
  uint64_t i;

  v8 = *(unsigned int *)(a2 + 16);
  sub_1003C31A4(a4, *(_DWORD *)(a2 + 16), 1u);
  if ((_DWORD)v8)
  {
    for (i = 0; i != v8; ++i)
    {
      result = *(double *)(*(_QWORD *)(a1 + 32) + 8 * (sub_1003C3270(a2, i) + *(_DWORD *)(a1 + 20) * a3));
      *(double *)(*(_QWORD *)(a4 + 32) + 8 * i) = result;
    }
  }
  return result;
}

void sub_1003B75F8(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = off_100807398;
  _Unwind_Resume(a1);
}

void sub_1003B7608(uint64_t a1)
{
  double v1;
  double v2;
  _BYTE v3[64];
  uint64_t (**v4)();
  __int128 v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;

  sub_1003B7574(a1 + 456, (uint64_t)&qword_10085F358, 0, (uint64_t)v3);
  v6 = 0x100000003;
  v4 = off_1008156E8;
  v5 = xmmword_100478880;
  v7 = &v8;
  sub_10030E2B4((uint64_t)v3, (uint64_t)&unk_10085FE00, (uint64_t)&v4);
  v1 = sub_10027C1A4((uint64_t)&v4, 2u);
  v2 = sub_10027C1A4((uint64_t)&v4, 1u);
  atan2(v1, v2);
}

double sub_1003B76AC(uint64_t a1)
{
  double v1;

  sub_1003B7608(a1);
  return v1 * 180.0 / 3.14159265;
}

void sub_1003B76D8(uint64_t a1)
{
  _BYTE v1[88];
  uint64_t v2;
  _QWORD v3[5];
  uint64_t (**v4)();
  __int128 v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE v8[48];

  sub_1003B7574(a1 + 456, (uint64_t)&qword_10085F358, 0, (uint64_t)&v2);
  v6 = 0x100000003;
  v4 = off_1008156E8;
  v5 = xmmword_100478880;
  v7 = v8;
  sub_10030E2B4((uint64_t)&v2, (uint64_t)&unk_10085FE00, (uint64_t)&v4);
  sub_1003C33B8((uint64_t)v1, (uint64_t)&v4);
  v6 = 0x100000006;
  v4 = off_1008188B0;
  v5 = xmmword_10072BBB0;
  v7 = v8;
  sub_1003C357C((uint64_t)v3);
}

void sub_1003B7834(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 - 144);
  *(_QWORD *)(v1 - 184) = off_100818AA8;
  *(_QWORD *)(v1 - 144) = 0;
  if (v3)
    operator delete[]();
  _Unwind_Resume(exception_object);
}

void sub_1003B7878(uint64_t a1)
{
  sub_1003B76D8(a1);
}

double sub_1003B78A4@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double *v12;
  double result;
  double v14;
  double v15;

  *(_QWORD *)(a2 + 24) = 0x300000003;
  *(_QWORD *)a2 = off_100815730;
  *(_OWORD *)(a2 + 8) = xmmword_100478B80;
  *(_QWORD *)(a2 + 32) = a2 + 40;
  sub_10030DD0C((_DWORD *)a2, 3, 3);
  sub_10030DD58(a2, 0.0);
  v4 = sub_10027C1A4(a1, 0);
  v5 = sub_10027C1A4(a1, 1u);
  v6 = sub_10027C1A4(a1, 2u);
  v7 = sub_10027C1A4(a1, 3u);
  v14 = v5 * v5;
  v15 = v4 * v4;
  *(double *)sub_10030E274(a2, 0, 0) = v4 * v4 - v5 * v5 - v6 * v6 + v7 * v7;
  *(double *)sub_10030E274(a2, 0, 1) = v4 * v5 + v6 * v7 + v4 * v5 + v6 * v7;
  v8 = v4 * v6;
  v9 = v5 * v7;
  *(double *)sub_10030E274(a2, 0, 2) = v4 * v6 - v5 * v7 + v4 * v6 - v5 * v7;
  *(double *)sub_10030E274(a2, 1, 0) = v4 * v5 - v6 * v7 + v4 * v5 - v6 * v7;
  *(double *)sub_10030E274(a2, 1, 1) = v5 * v5 - v4 * v4 - v6 * v6 + v7 * v7;
  v10 = v4 * v7;
  v11 = v5 * v6;
  *(double *)sub_10030E274(a2, 1, 2) = v11 + v10 + v11 + v10;
  *(double *)sub_10030E274(a2, 2, 0) = v8 + v9 + v8 + v9;
  *(double *)sub_10030E274(a2, 2, 1) = v11 - v10 + v11 - v10;
  v12 = (double *)sub_10030E274(a2, 2, 2);
  result = -v15 - v14 + v6 * v6 + v7 * v7;
  *v12 = result;
  return result;
}

void sub_1003B7AC4(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = off_100807398;
  _Unwind_Resume(a1);
}

double *sub_1003B7AE8(uint64_t a1)
{
  double v2;
  double *result;
  double v4;
  unsigned int i;
  double v6;
  uint64_t (**v7)();
  __int128 v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t (**v12)();
  __int128 v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t (**v17)();
  __int128 v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;

  v19 = 0x100000004;
  v17 = off_100815778;
  v18 = xmmword_100478890;
  v20 = &v21;
  v14 = 0x10000018BLL;
  v12 = off_100815B60;
  v13 = xmmword_100478B90;
  v15 = &v16;
  v9 = 0x100000004;
  v7 = off_100815778;
  v8 = xmmword_100478890;
  v10 = &v11;
  sub_10030E510(a1, (uint64_t)&v17, (uint64_t)&v12, (uint64_t)&v7, "2");
  if (v2 == 0.0)
  {
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
      sub_1003F1674();
    *(_QWORD *)sub_10030E194(a1, 0) = 0;
    *(_QWORD *)sub_10030E194(a1, 1u) = 0;
    *(_QWORD *)sub_10030E194(a1, 2u) = 0;
    result = (double *)sub_10030E194(a1, 3u);
    *result = 1.0;
  }
  else
  {
    v4 = v2;
    for (i = 0; i != 4; ++i)
    {
      v6 = *(double *)sub_10030E194(a1, i) / v4;
      result = (double *)sub_10030E194(a1, i);
      *result = v6;
    }
  }
  return result;
}

double *sub_1003B7C5C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double *result;

  *(_QWORD *)(a2 + 24) = 0x300000003;
  *(_QWORD *)a2 = off_100815730;
  *(_OWORD *)(a2 + 8) = xmmword_100478B80;
  *(_QWORD *)(a2 + 32) = a2 + 40;
  sub_10030DD0C((_DWORD *)a2, 3, 3);
  sub_10030DD58(a2, 0.0);
  v4 = sub_10027C1A4(a1, 2u);
  *(double *)sub_10030E274(a2, 0, 1) = -v4;
  v5 = sub_10027C1A4(a1, 1u);
  *(double *)sub_10030E274(a2, 0, 2) = v5;
  v6 = sub_10027C1A4(a1, 2u);
  *(double *)sub_10030E274(a2, 1, 0) = v6;
  v7 = sub_10027C1A4(a1, 0);
  *(double *)sub_10030E274(a2, 1, 2) = -v7;
  v8 = sub_10027C1A4(a1, 1u);
  *(double *)sub_10030E274(a2, 2, 0) = -v8;
  v9 = sub_10027C1A4(a1, 0);
  result = (double *)sub_10030E274(a2, 2, 1);
  *result = v9;
  return result;
}

void sub_1003B7DAC(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = off_100807398;
  _Unwind_Resume(a1);
}

double sub_1003B7DC0@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double *v16;
  double result;

  *(_QWORD *)(a2 + 24) = 0x400000004;
  *(_QWORD *)a2 = off_100815A88;
  *(_OWORD *)(a2 + 8) = xmmword_100478BA0;
  *(_QWORD *)(a2 + 32) = a2 + 40;
  sub_10030DD0C((_DWORD *)a2, 4, 4);
  sub_10030DD58(a2, 0.0);
  v4 = sub_10027C1A4(a1, 2u);
  *(double *)sub_10030E274(a2, 0, 1) = v4;
  v5 = sub_10027C1A4(a1, 1u);
  *(double *)sub_10030E274(a2, 0, 2) = -v5;
  v6 = sub_10027C1A4(a1, 0);
  *(double *)sub_10030E274(a2, 0, 3) = v6;
  v7 = sub_10027C1A4(a1, 2u);
  *(double *)sub_10030E274(a2, 1, 0) = -v7;
  v8 = sub_10027C1A4(a1, 0);
  *(double *)sub_10030E274(a2, 1, 2) = v8;
  v9 = sub_10027C1A4(a1, 1u);
  *(double *)sub_10030E274(a2, 1, 3) = v9;
  v10 = sub_10027C1A4(a1, 1u);
  *(double *)sub_10030E274(a2, 2, 0) = v10;
  v11 = sub_10027C1A4(a1, 0);
  *(double *)sub_10030E274(a2, 2, 1) = -v11;
  v12 = sub_10027C1A4(a1, 2u);
  *(double *)sub_10030E274(a2, 2, 3) = v12;
  v13 = sub_10027C1A4(a1, 0);
  *(double *)sub_10030E274(a2, 3, 0) = -v13;
  v14 = sub_10027C1A4(a1, 1u);
  *(double *)sub_10030E274(a2, 3, 1) = -v14;
  v15 = sub_10027C1A4(a1, 2u);
  v16 = (double *)sub_10030E274(a2, 3, 2);
  result = -v15;
  *v16 = -v15;
  return result;
}

void sub_1003B7FF4(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = off_100807398;
  _Unwind_Resume(a1);
}

BOOL sub_1003B8008(uint64_t a1, uint64_t a2, double *a3)
{
  double v5;
  _BOOL8 result;
  int i;
  uint64_t (**v9)();
  __int128 v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t (**v14)();
  __int128 v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t (**v19)();
  __int128 v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t (**v24)();
  __int128 v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t (**v29)();
  __int128 v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t (**v34)();
  __int128 v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;

  if (*(_BYTE *)(a1 + 444))
  {
    v5 = *a3 - *(double *)(a1 + 448);
    if (v5 < 0.0)
    {
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
        sub_1003F16CC();
LABEL_5:
      result = 0;
      *(_DWORD *)(a1 + 440) = 9;
      return result;
    }
    if (v5 != 0.0)
    {
      v21 = 0x600000006;
      v19 = off_100818868;
      v20 = xmmword_10072BBA0;
      v22 = &v23;
      sub_10030DD0C(&v19, 6, 6);
      sub_10030DD58((uint64_t)&v19, 0.0);
      for (i = 0; i != 6; ++i)
        *(_QWORD *)sub_100346AA0((uint64_t)&v19, i, i) = 0x3FF0000000000000;
      v16 = 0xC00000006;
      v14 = off_100818AF0;
      v15 = xmmword_10072BD60;
      v17 = &v18;
      sub_10030DD0C(&v14, 6, 12);
      sub_10030DD58((uint64_t)&v14, 0.0);
      if (sub_1003B832C(a1, a2, (uint64_t)a3, (uint64_t)&v19, (uint64_t)&v14))
      {
        v11 = 0x600000006;
        v9 = off_100818868;
        v10 = xmmword_10072BBA0;
        v12 = &v13;
        v36 = 0x100000006;
        v34 = off_1008188F8;
        v35 = xmmword_10072BBB0;
        v37 = &v38;
        v31 = 0x100000006;
        v29 = off_1008188F8;
        v30 = xmmword_10072BBB0;
        v32 = &v33;
        v26 = 0x100000018;
        v24 = off_100818940;
        v25 = xmmword_10072BBC0;
        v27 = &v28;
        sub_1003C3804((uint64_t)&v19, (uint64_t)&v34, (uint64_t)&v29, (uint64_t)&v24, (uint64_t)&v9);
      }
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
        sub_1003F1724();
      goto LABEL_5;
    }
    return 1;
  }
  else
  {
    result = os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR);
    if (result)
    {
      sub_1003F16A0();
      return 0;
    }
  }
  return result;
}

BOOL sub_1003B832C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  double v6;
  double v7;
  double v8;
  _BOOL8 v9;
  uint64_t v14;
  double v15;
  double v16;
  double v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  uint64_t (**v24)();
  __int128 v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t (**v29)();
  __int128 v30;
  uint64_t v31;
  _BYTE *v32;
  _BYTE v33[24];
  uint64_t (**v34)();
  __int128 v35;
  uint64_t v36;
  _BYTE *v37;
  _BYTE v38[24];
  uint64_t (**v39)();
  __int128 v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t (**v44)();
  __int128 v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t (**v49)();
  __int128 v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  _BYTE buf[24];
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;

  v6 = *(double *)a2;
  v7 = *(double *)a3;
  v8 = *(double *)(a1 + 448);
  v9 = v8 >= *(double *)a2 && v8 <= *(double *)a3;
  if (v9)
  {
    v55 = 0x100000003;
    *(_QWORD *)buf = off_1008156E8;
    *(_OWORD *)&buf[8] = xmmword_100478880;
    v56 = &v57;
    sub_10030DD0C(buf, 3, 1);
    sub_10030DD58((uint64_t)buf, 0.0);
    v51 = 0x100000003;
    v49 = off_1008156E8;
    v50 = xmmword_100478880;
    v52 = &v53;
    sub_10030DD0C(&v49, 3, 1);
    sub_10030DD58((uint64_t)&v49, 0.0);
    v46 = 0x100000003;
    v44 = off_1008156E8;
    v45 = xmmword_100478880;
    v47 = &v48;
    sub_10030DD0C(&v44, 3, 1);
    sub_10030DD58((uint64_t)&v44, 0.0);
    v14 = 0;
    v15 = v7 - v8;
    v16 = v8 + (v7 - v8) * 0.5;
    v17 = (v8 - v6) / (v7 - v6);
    v18 = (v16 - v6) / (v7 - v6);
    do
    {
      v19 = *(_QWORD *)(*(_QWORD *)(a2 + 40) + 8 * v14);
      *(_QWORD *)sub_10030E194((uint64_t)buf, v14) = v19;
      v20 = *(_QWORD *)(*(_QWORD *)(a3 + 40) + 8 * v14);
      *(_QWORD *)sub_10030E194((uint64_t)&v49, v14) = v20;
      v21 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8 * v14);
      *(_QWORD *)sub_10030E194((uint64_t)&v44, v14++) = v21;
    }
    while (v14 != 3);
    v36 = 0x100000003;
    v34 = off_1008156E8;
    v35 = xmmword_100478880;
    v37 = v38;
    sub_1003C3ECC((uint64_t)buf, (uint64_t)&v34, 1.0 - v17);
    v31 = 0x100000003;
    v29 = off_1008156E8;
    v30 = xmmword_100478880;
    v32 = v33;
    sub_1003C3ECC((uint64_t)&v49, (uint64_t)&v29, v17);
    v41 = 0x100000003;
    v39 = off_1008156E8;
    v40 = xmmword_100478880;
    v42 = &v43;
    sub_10030F0E0((uint64_t)&v34, (uint64_t)&v29, (uint64_t)&v39);
    v31 = 0x100000003;
    v29 = off_1008156E8;
    v30 = xmmword_100478880;
    v32 = v33;
    sub_1003C3ECC((uint64_t)buf, (uint64_t)&v29, 1.0 - v18);
    v26 = 0x100000003;
    v24 = off_1008156E8;
    v25 = xmmword_100478880;
    v27 = &v28;
    sub_1003C3ECC((uint64_t)&v49, (uint64_t)&v24, v18);
    v36 = 0x100000003;
    v34 = off_1008156E8;
    v35 = xmmword_100478880;
    v37 = v38;
    sub_10030F0E0((uint64_t)&v29, (uint64_t)&v24, (uint64_t)&v34);
    sub_10031895C((uint64_t)&v29, (uint64_t)&v49);
    sub_1003B9FF4(a1 + 456, a4, a5, (uint64_t)&v39, (uint64_t)&v34, (uint64_t)&v29, (uint64_t)&v44, v15);
  }
  else
  {
    v22 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218496;
      *(double *)&buf[4] = v6;
      *(_WORD *)&buf[12] = 2048;
      *(double *)&buf[14] = v8;
      *(_WORD *)&buf[22] = 2048;
      v55 = *(_QWORD *)&v7;
      _os_log_error_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "#sf,RoseEKF PropagateX1 error: Filter time is not between the two IMU timestamps - state propagation aborted, PreviousIMUTime: %f, FilterTime: %f, CurrentIMUTime: %f", buf, 0x20u);
    }
    *(_DWORD *)(a1 + 440) = 6;
  }
  return v9;
}

void sub_1003B8700(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BYTE v3[328];

  sub_1003B035C(a3, (uint64_t)v3);
}

void sub_1003B8D30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1003B8DB8(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  double v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (**v17)();
  __int128 v18;
  uint64_t v19;
  _BYTE *v20;
  _BYTE v21[2592];
  _BYTE v22[328];
  uint64_t (**v23)();
  __int128 v24;
  uint64_t v25;
  _BYTE *v26;
  _BYTE v27[41];
  uint64_t (**v28)();
  __int128 v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t (**v33)();
  __int128 v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t (**v38)();
  __int128 v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;

  v35 = 0x1200000012;
  v33 = off_100818CE8;
  v34 = xmmword_10072BD80;
  v36 = &v37;
  sub_10030DD0C(&v33, 18, 18);
  sub_10030DD58((uint64_t)&v33, 0.0);
  v30 = 0xC0000000CLL;
  v28 = off_100818C58;
  v29 = xmmword_10072BD70;
  v31 = &v32;
  v8 = sqrt(a4);
  sub_10030DD0C(&v28, 12, 12);
  sub_10030DD58((uint64_t)&v28, 0.0);
  v19 = 0x300000003;
  v17 = off_100815730;
  v18 = xmmword_100478B80;
  v20 = v21;
  sub_10031CBA0((uint64_t)&qword_100860070, (uint64_t)&v17, v8);
  sub_1003C3FA4((uint64_t)&v38, (uint64_t)&v28, (uint64_t)&qword_10085F358, (uint64_t)&qword_10085F358);
  sub_1003BAEEC((uint64_t)&v38, (uint64_t)&v17, v9);
  v19 = 0x300000003;
  v17 = off_100815730;
  v18 = xmmword_100478B80;
  v20 = v21;
  sub_10031CBA0((uint64_t)&qword_1008600E0, (uint64_t)&v17, v8);
  sub_1003C3FA4((uint64_t)&v38, (uint64_t)&v28, (uint64_t)&qword_10085F390, (uint64_t)&qword_10085F390);
  sub_1003BAEEC((uint64_t)&v38, (uint64_t)&v17, v10);
  v19 = 0x300000003;
  v17 = off_100815730;
  v18 = xmmword_100478B80;
  v20 = v21;
  v11 = 1.0 / v8;
  sub_10031CBA0((uint64_t)&qword_100860000, (uint64_t)&v17, v11);
  sub_1003C3FA4((uint64_t)&v38, (uint64_t)&v28, (uint64_t)&qword_10085F3C8, (uint64_t)&qword_10085F3C8);
  sub_1003BAEEC((uint64_t)&v38, (uint64_t)&v17, v12);
  v19 = 0x300000003;
  v17 = off_100815730;
  v18 = xmmword_100478B80;
  v20 = v21;
  sub_10031CBA0((uint64_t)&qword_100860150, (uint64_t)&v17, v11);
  sub_1003C3FA4((uint64_t)&v38, (uint64_t)&v28, (uint64_t)&qword_10085F400, (uint64_t)&qword_10085F400);
  sub_1003BAEEC((uint64_t)&v38, (uint64_t)&v17, v13);
  sub_1003C4698((uint64_t)&v38, (uint64_t)&v33, (uint64_t)&qword_10085F1E8, (uint64_t)&qword_10085F1E8);
  sub_1003BD584((uint64_t)&v38, (uint64_t)&v28, v14);
  sub_1003BD67C(a3, (uint64_t)v22);
  v25 = 0x600000006;
  v23 = off_100818868;
  v24 = xmmword_10072BBA0;
  v26 = v27;
  sub_10030E3B0((uint64_t)v22, a1, (uint64_t)&v23);
  v19 = 0xC00000006;
  v17 = off_100818AF0;
  v18 = xmmword_10072BD60;
  v20 = v21;
  sub_10030E3B0((uint64_t)&v23, a2, (uint64_t)&v17);
  sub_1003C4868((uint64_t)&v38, (uint64_t)&v33, (uint64_t)&qword_10085F2E8, (uint64_t)&qword_10085F1E8);
  sub_1003BD6D8((uint64_t)&v38, (uint64_t)&v17, v15);
  v19 = 0x600000006;
  v17 = off_100818868;
  v18 = xmmword_10072BBA0;
  v20 = v21;
  sub_10030E3B0(a3, a1, (uint64_t)&v17);
  sub_1003C4A58((uint64_t)&v38, (uint64_t)&v33, (uint64_t)&qword_10085F2E8, (uint64_t)&qword_10085F2E8);
  sub_1003BD7D0((uint64_t)&v38, (uint64_t)&v17, v16);
  v25 = 0x100000012;
  v23 = off_100818E08;
  v24 = xmmword_10072BD90;
  v26 = v27;
  v40 = 0x1200000012;
  v38 = off_100818CE8;
  v39 = xmmword_10072BD80;
  v41 = &v42;
  v19 = 0x1200000012;
  v17 = off_100818CE8;
  v18 = xmmword_10072BD80;
  v20 = v21;
  sub_1003C4C28((uint64_t)&v33, (uint64_t)&v23, (uint64_t)&v38, (uint64_t)&v17);
  sub_1003BD8C8((uint64_t)&v17, (uint64_t)&qword_10085F2E8, (uint64_t)&qword_10085F2E8, (uint64_t)&v38);
  sub_10030EC4C(a3, (uint64_t)&v38);
}

_QWORD *sub_1003B92DC(_QWORD *result)
{
  *result = off_100807398;
  return result;
}

BOOL sub_1003B92EC(uint64_t a1, uint64_t *a2, double a3)
{
  double v6;
  NSObject *v7;
  _BOOL8 result;
  int i;
  uint64_t v10;
  uint64_t (**v11)();
  __int128 v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t (**v16)();
  __int128 v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t (**v21)();
  __int128 v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t (**v26)();
  __int128 v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  _BYTE v31[24];
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint8_t buf[8];
  __int128 v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;

  if (*(_BYTE *)(a1 + 444))
  {
    v6 = *(double *)(a1 + 448);
    if (a3 - v6 >= 0.0)
    {
      if (a3 - v6 != 0.0)
      {
        v18 = 0x600000006;
        v16 = off_100818868;
        v17 = xmmword_10072BBA0;
        v19 = &v20;
        sub_10030DD0C(&v16, 6, 6);
        sub_10030DD58((uint64_t)&v16, 0.0);
        for (i = 0; i != 6; ++i)
          *(_QWORD *)sub_100346AA0((uint64_t)&v16, i, i) = 0x3FF0000000000000;
        v32 = 0xC00000006;
        *(_QWORD *)v31 = off_100818AF0;
        *(_OWORD *)&v31[8] = xmmword_10072BD60;
        v33 = &v34;
        sub_10030DD0C(v31, 6, 12);
        sub_10030DD58((uint64_t)v31, 0.0);
        sub_1003B96A4(a1, (uint64_t)a2, (uint64_t)&v16, (uint64_t)v31, a3);
        v13 = 0x600000006;
        v11 = off_100818868;
        v12 = xmmword_10072BBA0;
        v14 = &v15;
        v28 = 0x100000006;
        v26 = off_1008188F8;
        v27 = xmmword_10072BBB0;
        v29 = &v30;
        v23 = 0x100000006;
        v21 = off_1008188F8;
        v22 = xmmword_10072BBB0;
        v24 = &v25;
        v37 = 0x100000018;
        *(_QWORD *)buf = off_100818940;
        v36 = xmmword_10072BBC0;
        v38 = &v39;
        sub_1003C3804((uint64_t)&v16, (uint64_t)&v26, (uint64_t)&v21, (uint64_t)buf, (uint64_t)&v11);
      }
      return 1;
    }
    else
    {
      v7 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
      {
        v10 = *a2;
        *(_DWORD *)v31 = 134218496;
        *(double *)&v31[4] = v6;
        *(_WORD *)&v31[12] = 2048;
        *(double *)&v31[14] = a3;
        *(_WORD *)&v31[22] = 2048;
        v32 = v10;
        _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "#sf,Attempted to propagate state to the past during measurement update - Filter time is ahead of the event time, FilterTime: %f, NewTime: %f, CurrentIMUTime: %f", v31, 0x20u);
      }
      result = 0;
      *(_DWORD *)(a1 + 440) = 9;
    }
  }
  else
  {
    result = os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR);
    if (result)
    {
      sub_1003F16A0();
      return 0;
    }
  }
  return result;
}

uint64_t sub_1003B96A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  double v10;
  uint64_t i;
  uint64_t v12;
  uint64_t v13;
  uint64_t (**v15)();
  __int128 v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t (**v20)();
  __int128 v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;

  v10 = *(double *)(a1 + 448);
  v22 = 0x100000003;
  v20 = off_1008156E8;
  v21 = xmmword_100478880;
  v23 = &v24;
  sub_10030DD0C(&v20, 3, 1);
  sub_10030DD58((uint64_t)&v20, 0.0);
  v17 = 0x100000003;
  v15 = off_1008156E8;
  v16 = xmmword_100478880;
  v18 = &v19;
  sub_10030DD0C(&v15, 3, 1);
  sub_10030DD58((uint64_t)&v15, 0.0);
  for (i = 0; i != 3; ++i)
  {
    v12 = *(_QWORD *)(*(_QWORD *)(a2 + 40) + 8 * i);
    *(_QWORD *)sub_10030E194((uint64_t)&v20, i) = v12;
    v13 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8 * i);
    *(_QWORD *)sub_10030E194((uint64_t)&v15, i) = v13;
  }
  return sub_1003B9FF4(a1 + 456, a3, a4, (uint64_t)&v20, (uint64_t)&v20, (uint64_t)&v20, (uint64_t)&v15, a5 - v10);
}

BOOL sub_1003B97E8(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  double v6;
  _BOOL8 result;
  int i;
  uint64_t (**v11)();
  __int128 v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t (**v16)();
  __int128 v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t (**v21)();
  __int128 v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t (**v26)();
  __int128 v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t (**v31)();
  __int128 v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint8_t buf[8];
  __int128 v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;

  if (*(_BYTE *)(a1 + 444))
  {
    v6 = *(double *)(a1 + 448);
    if (a4 - v6 == 0.0)
    {
      return 1;
    }
    else
    {
      if (a4 - v6 < 0.0)
      {
        if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
          sub_1003F16CC();
      }
      else
      {
        v23 = 0x600000006;
        v21 = off_100818868;
        v22 = xmmword_10072BBA0;
        v24 = &v25;
        sub_10030DD0C(&v21, 6, 6);
        sub_10030DD58((uint64_t)&v21, 0.0);
        for (i = 0; i != 6; ++i)
          *(_QWORD *)sub_100346AA0((uint64_t)&v21, i, i) = 0x3FF0000000000000;
        v18 = 0xC00000006;
        v16 = off_100818AF0;
        v17 = xmmword_10072BD60;
        v19 = &v20;
        sub_10030DD0C(&v16, 6, 12);
        sub_10030DD58((uint64_t)&v16, 0.0);
        if (sub_1003B9B8C(a1, a2, a3, (uint64_t)&v21, (uint64_t)&v16, a4))
        {
          v13 = 0x600000006;
          v11 = off_100818868;
          v12 = xmmword_10072BBA0;
          v14 = &v15;
          v33 = 0x100000006;
          v31 = off_1008188F8;
          v32 = xmmword_10072BBB0;
          v34 = &v35;
          v28 = 0x100000006;
          v26 = off_1008188F8;
          v27 = xmmword_10072BBB0;
          v29 = &v30;
          v38 = 0x100000018;
          *(_QWORD *)buf = off_100818940;
          v37 = xmmword_10072BBC0;
          v39 = &v40;
          sub_1003C3804((uint64_t)&v21, (uint64_t)&v31, (uint64_t)&v26, (uint64_t)buf, (uint64_t)&v11);
        }
        if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
          sub_1003F1724();
      }
      result = 0;
      *(_DWORD *)(a1 + 440) = 9;
    }
  }
  else
  {
    result = os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR);
    if (result)
    {
      sub_1003F16A0();
      return 0;
    }
  }
  return result;
}

BOOL sub_1003B9B8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6)
{
  double v7;
  double v8;
  double v9;
  _BOOL8 v10;
  uint64_t v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  uint64_t (**v28)();
  __int128 v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t (**v33)();
  __int128 v34;
  uint64_t v35;
  _BYTE *v36;
  _BYTE v37[24];
  uint64_t (**v38)();
  __int128 v39;
  uint64_t v40;
  _BYTE *v41;
  _BYTE v42[24];
  uint64_t (**v43)();
  __int128 v44;
  uint64_t v45;
  _BYTE *v46;
  _BYTE v47[24];
  uint64_t (**v48)();
  __int128 v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t (**v53)();
  __int128 v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t (**v58)();
  __int128 v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  _BYTE buf[24];
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;

  v7 = *(double *)a2;
  v8 = *(double *)a3;
  v9 = *(double *)(a1 + 448);
  v10 = v9 >= *(double *)a2 && v9 <= *(double *)a3;
  if (v10)
  {
    v64 = 0x100000003;
    *(_QWORD *)buf = off_1008156E8;
    *(_OWORD *)&buf[8] = xmmword_100478880;
    v65 = &v66;
    sub_10030DD0C(buf, 3, 1);
    sub_10030DD58((uint64_t)buf, 0.0);
    v60 = 0x100000003;
    v58 = off_1008156E8;
    v59 = xmmword_100478880;
    v61 = &v62;
    sub_10030DD0C(&v58, 3, 1);
    sub_10030DD58((uint64_t)&v58, 0.0);
    v55 = 0x100000003;
    v53 = off_1008156E8;
    v54 = xmmword_100478880;
    v56 = &v57;
    sub_10030DD0C(&v53, 3, 1);
    sub_10030DD58((uint64_t)&v53, 0.0);
    v16 = 0;
    v17 = a6 - v9;
    v18 = v9 + (a6 - v9) * 0.5;
    v19 = v8 - v7;
    v20 = (v9 - v7) / (v8 - v7);
    v21 = (v18 - v7) / (v8 - v7);
    v22 = (a6 - v7) / v19;
    do
    {
      v23 = *(_QWORD *)(*(_QWORD *)(a2 + 40) + 8 * v16);
      *(_QWORD *)sub_10030E194((uint64_t)buf, v16) = v23;
      v24 = *(_QWORD *)(*(_QWORD *)(a3 + 40) + 8 * v16);
      *(_QWORD *)sub_10030E194((uint64_t)&v58, v16) = v24;
      v25 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8 * v16);
      *(_QWORD *)sub_10030E194((uint64_t)&v53, v16++) = v25;
    }
    while (v16 != 3);
    v45 = 0x100000003;
    v43 = off_1008156E8;
    v44 = xmmword_100478880;
    v46 = v47;
    sub_1003C3ECC((uint64_t)buf, (uint64_t)&v43, 1.0 - v20);
    v40 = 0x100000003;
    v38 = off_1008156E8;
    v39 = xmmword_100478880;
    v41 = v42;
    sub_1003C3ECC((uint64_t)&v58, (uint64_t)&v38, v20);
    v50 = 0x100000003;
    v48 = off_1008156E8;
    v49 = xmmword_100478880;
    v51 = &v52;
    sub_10030F0E0((uint64_t)&v43, (uint64_t)&v38, (uint64_t)&v48);
    v40 = 0x100000003;
    v38 = off_1008156E8;
    v39 = xmmword_100478880;
    v41 = v42;
    sub_1003C3ECC((uint64_t)buf, (uint64_t)&v38, 1.0 - v21);
    v35 = 0x100000003;
    v33 = off_1008156E8;
    v34 = xmmword_100478880;
    v36 = v37;
    sub_1003C3ECC((uint64_t)&v58, (uint64_t)&v33, v21);
    v45 = 0x100000003;
    v43 = off_1008156E8;
    v44 = xmmword_100478880;
    v46 = v47;
    sub_10030F0E0((uint64_t)&v38, (uint64_t)&v33, (uint64_t)&v43);
    v35 = 0x100000003;
    v33 = off_1008156E8;
    v34 = xmmword_100478880;
    v36 = v37;
    sub_1003C3ECC((uint64_t)buf, (uint64_t)&v33, 1.0 - v22);
    v30 = 0x100000003;
    v28 = off_1008156E8;
    v29 = xmmword_100478880;
    v31 = &v32;
    sub_1003C3ECC((uint64_t)&v58, (uint64_t)&v28, v22);
    v40 = 0x100000003;
    v38 = off_1008156E8;
    v39 = xmmword_100478880;
    v41 = v42;
    sub_10030F0E0((uint64_t)&v33, (uint64_t)&v28, (uint64_t)&v38);
    sub_1003B9FF4(a1 + 456, a4, a5, (uint64_t)&v48, (uint64_t)&v43, (uint64_t)&v38, (uint64_t)&v53, v17);
  }
  else
  {
    v26 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218496;
      *(double *)&buf[4] = v7;
      *(_WORD *)&buf[12] = 2048;
      *(double *)&buf[14] = v9;
      *(_WORD *)&buf[22] = 2048;
      v64 = *(_QWORD *)&v8;
      _os_log_error_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_ERROR, "#sf,RoseEKF PropagateX2 error: Filter time is not between the two IMU timestamps - state propagation aborted, PreviousIMUTime: %f, FilterTime: %f, CurrentIMUTime: %f", buf, 0x20u);
    }
    *(_DWORD *)(a1 + 440) = 6;
  }
  return v10;
}

uint64_t sub_1003B9FF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, long double a8)
{
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  long double v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  _BYTE v41[112];
  uint64_t (**v42)();
  __int128 v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t (**v47)();
  __int128 v48;
  uint64_t v49;
  _DWORD *v50;
  _DWORD v51[34];
  uint64_t (**v52)();
  __int128 v53;
  uint64_t v54;
  _DWORD *v55;
  _DWORD v56[18];
  uint64_t (**v57)();
  __int128 v58;
  uint64_t v59;
  _DWORD *v60;
  _DWORD v61[18];
  uint64_t (**v62)();
  __int128 v63;
  uint64_t v64;
  _BYTE *v65;
  _BYTE v66[72];
  uint64_t (**v67)();
  __int128 v68;
  uint64_t v69;
  _DWORD *v70;
  _DWORD v71[48];
  uint64_t (**v72)();
  __int128 v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t (**v77)();
  __int128 v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t (**v82)();
  __int128 v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t (**v87)();
  __int128 v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t (**v92)();
  __int128 v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t (**v97)();
  __int128 v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t (**v102)();
  __int128 v103;
  uint64_t v104;
  uint64_t *v105;
  uint64_t v106;
  uint64_t (**v107)();
  __int128 v108;
  uint64_t v109;
  uint64_t *v110;
  uint64_t v111;
  uint64_t (**v112)();
  __int128 v113;
  uint64_t v114;
  uint64_t *v115;
  uint64_t v116;
  uint64_t (**v117)();
  __int128 v118;
  uint64_t v119;
  uint64_t *v120;
  uint64_t v121;
  uint64_t (**v122)();
  __int128 v123;
  uint64_t v124;
  uint64_t *v125;
  uint64_t v126;
  uint64_t (**v127)();
  __int128 v128;
  uint64_t v129;
  uint64_t *v130;
  uint64_t v131;

  v129 = 0x100000004;
  v127 = off_100815778;
  v128 = xmmword_100478890;
  v130 = &v131;
  sub_10030DD0C(&v127, 4, 1);
  sub_10030DD58((uint64_t)&v127, 0.0);
  *(_QWORD *)sub_10030E194((uint64_t)&v127, 0) = 0;
  *(_QWORD *)sub_10030E194((uint64_t)&v127, 1u) = 0;
  *(_QWORD *)sub_10030E194((uint64_t)&v127, 2u) = 0;
  *(_QWORD *)sub_10030E194((uint64_t)&v127, 3u) = 0x3FF0000000000000;
  sub_1003B7DC0(a4, (uint64_t)&v47);
  v69 = 0x400000004;
  v67 = off_100815A88;
  v68 = xmmword_100478BA0;
  v70 = v71;
  sub_10031CBA0((uint64_t)&v47, (uint64_t)&v67, 0.5);
  v124 = 0x100000004;
  v122 = off_100815778;
  v123 = xmmword_100478890;
  v125 = &v126;
  sub_10030E3B0((uint64_t)&v67, (uint64_t)&v127, (uint64_t)&v122);
  v69 = 0x100000004;
  v67 = off_100815778;
  v68 = xmmword_100478890;
  v70 = v71;
  sub_10031CBA0((uint64_t)&v122, (uint64_t)&v67, a8 * 0.5);
  v119 = 0x100000004;
  v117 = off_100815778;
  v118 = xmmword_100478890;
  v120 = &v121;
  sub_10030F0E0((uint64_t)&v127, (uint64_t)&v67, (uint64_t)&v117);
  sub_1003B7AE8((uint64_t)&v117);
  sub_1003B7DC0(a5, (uint64_t)&v47);
  v69 = 0x400000004;
  v67 = off_100815A88;
  v68 = xmmword_100478BA0;
  v70 = v71;
  sub_10031CBA0((uint64_t)&v47, (uint64_t)&v67, 0.5);
  v114 = 0x100000004;
  v112 = off_100815778;
  v113 = xmmword_100478890;
  v115 = &v116;
  sub_10030E3B0((uint64_t)&v67, (uint64_t)&v117, (uint64_t)&v112);
  v69 = 0x100000004;
  v67 = off_100815778;
  v68 = xmmword_100478890;
  v70 = v71;
  sub_10031CBA0((uint64_t)&v112, (uint64_t)&v67, a8 * 0.5);
  v109 = 0x100000004;
  v107 = off_100815778;
  v108 = xmmword_100478890;
  v110 = &v111;
  sub_10030F0E0((uint64_t)&v127, (uint64_t)&v67, (uint64_t)&v107);
  sub_1003B7AE8((uint64_t)&v107);
  sub_1003B7DC0(a5, (uint64_t)&v47);
  v69 = 0x400000004;
  v67 = off_100815A88;
  v68 = xmmword_100478BA0;
  v70 = v71;
  sub_10031CBA0((uint64_t)&v47, (uint64_t)&v67, 0.5);
  v104 = 0x100000004;
  v102 = off_100815778;
  v103 = xmmword_100478890;
  v105 = &v106;
  sub_10030E3B0((uint64_t)&v67, (uint64_t)&v107, (uint64_t)&v102);
  v69 = 0x100000004;
  v67 = off_100815778;
  v68 = xmmword_100478890;
  v70 = v71;
  sub_10031CBA0((uint64_t)&v102, (uint64_t)&v67, a8);
  v99 = 0x100000004;
  v97 = off_100815778;
  v98 = xmmword_100478890;
  v100 = &v101;
  sub_10030F0E0((uint64_t)&v127, (uint64_t)&v67, (uint64_t)&v97);
  sub_1003B7AE8((uint64_t)&v97);
  sub_1003B7DC0(a6, (uint64_t)&v47);
  v69 = 0x400000004;
  v67 = off_100815A88;
  v68 = xmmword_100478BA0;
  v70 = v71;
  sub_10031CBA0((uint64_t)&v47, (uint64_t)&v67, 0.5);
  v94 = 0x100000004;
  v92 = off_100815778;
  v93 = xmmword_100478890;
  v95 = &v96;
  sub_10030E3B0((uint64_t)&v67, (uint64_t)&v97, (uint64_t)&v92);
  v64 = 0x100000004;
  v62 = off_100815778;
  v63 = xmmword_100478890;
  v65 = v66;
  sub_10031CBA0((uint64_t)&v112, (uint64_t)&v62, 2.0);
  v79 = 0x100000004;
  v77 = off_100815778;
  v78 = xmmword_100478890;
  v80 = &v81;
  sub_10030F0E0((uint64_t)&v122, (uint64_t)&v62, (uint64_t)&v77);
  v59 = 0x100000004;
  v57 = off_100815778;
  v58 = xmmword_100478890;
  v60 = v61;
  sub_10031CBA0((uint64_t)&v102, (uint64_t)&v57, 2.0);
  v49 = 0x100000004;
  v47 = off_100815778;
  v48 = xmmword_100478890;
  v50 = v51;
  sub_10030F0E0((uint64_t)&v77, (uint64_t)&v57, (uint64_t)&v47);
  v69 = 0x100000004;
  v67 = off_100815778;
  v68 = xmmword_100478890;
  v70 = v71;
  sub_10030F0E0((uint64_t)&v47, (uint64_t)&v92, (uint64_t)&v67);
  v89 = 0x100000004;
  v87 = off_100815778;
  v88 = xmmword_100478890;
  v90 = &v91;
  sub_10031CBA0((uint64_t)&v67, (uint64_t)&v87, 0.166666667);
  v69 = 0x100000004;
  v67 = off_100815778;
  v68 = xmmword_100478890;
  v70 = v71;
  sub_10031CBA0((uint64_t)&v87, (uint64_t)&v67, a8);
  v84 = 0x100000004;
  v82 = off_100815778;
  v83 = xmmword_100478890;
  v85 = &v86;
  sub_10030F0E0((uint64_t)&v127, (uint64_t)&v67, (uint64_t)&v82);
  sub_1003B7AE8((uint64_t)&v82);
  sub_1003B78A4((uint64_t)&v82, (uint64_t)&v77);
  v59 = 0x100000001;
  v57 = off_1008166A8;
  *(_QWORD *)&v15 = 0x100000001;
  *((_QWORD *)&v15 + 1) = 0x100000001;
  v58 = v15;
  v60 = v61;
  v61[0] = 0;
  sub_1003C3C30((uint64_t)&v67, a1, (uint64_t)&qword_10085F390, (uint64_t)&v57);
  v64 = 0x100000003;
  v62 = off_1008156E8;
  v63 = xmmword_100478880;
  v65 = v66;
  sub_10030E3B0((uint64_t)&v77, (uint64_t)&v67, (uint64_t)&v62);
  v49 = 0x100000003;
  v47 = off_1008156E8;
  v48 = xmmword_100478880;
  v50 = v51;
  sub_1003C3ECC((uint64_t)&v62, (uint64_t)&v47, a8);
  v54 = 0x100000003;
  v52 = off_1008156E8;
  v53 = xmmword_100478880;
  v55 = v56;
  sub_10030E3B0((uint64_t)&v77, a7, (uint64_t)&v52);
  v59 = 0x100000003;
  v57 = off_1008156E8;
  v58 = xmmword_100478880;
  v60 = v61;
  sub_10031CBA0((uint64_t)&v52, (uint64_t)&v57, a8 * a8 * 0.5);
  v74 = 0x100000003;
  v72 = off_1008156E8;
  v73 = xmmword_100478880;
  v75 = &v76;
  sub_10030F0E0((uint64_t)&v47, (uint64_t)&v57, (uint64_t)&v72);
  v64 = 0x100000003;
  v62 = off_1008156E8;
  v63 = xmmword_100478880;
  v65 = v66;
  sub_10030E3B0((uint64_t)&v77, (uint64_t)&unk_10085FD80, (uint64_t)&v62);
  v49 = 0x100000003;
  v47 = off_1008156E8;
  v48 = xmmword_100478880;
  v50 = v51;
  sub_10030F0E0((uint64_t)&v72, (uint64_t)&v62, (uint64_t)&v47);
  v69 = 0x100000003;
  v67 = off_1008156E8;
  v68 = xmmword_100478880;
  v70 = v71;
  sub_10030E2B4((uint64_t)&v47, (uint64_t)&unk_10085FD80, (uint64_t)&v67);
  sub_10030EC4C((uint64_t)&v72, (uint64_t)&v67);
  sub_1003C3FA4((uint64_t)&v67, a2, (uint64_t)&qword_10085F358, (uint64_t)&qword_10085F358);
  sub_1003BAEEC((uint64_t)&v67, (uint64_t)&v77, v16);
  sub_1003BAFE4((uint64_t)&v77, (uint64_t)&v62);
  v49 = 0x300000003;
  v47 = off_100815730;
  v48 = xmmword_100478B80;
  v50 = v51;
  sub_1003C3ECC((uint64_t)&v62, (uint64_t)&v47, a8);
  sub_1003C3FA4((uint64_t)&v67, a2, (uint64_t)&qword_10085F358, (uint64_t)&qword_10085F390);
  sub_1003BAEEC((uint64_t)&v67, (uint64_t)&v47, v17);
  sub_1003C3FA4((uint64_t)&v67, a2, (uint64_t)&qword_10085F390, (uint64_t)&qword_10085F390);
  sub_1003BAEEC((uint64_t)&v67, (uint64_t)&v77, v18);
  sub_1003C3FA4((uint64_t)&v67, a2, (uint64_t)&qword_10085F390, (uint64_t)&qword_10085F358);
  sub_1003BAEEC((uint64_t)&v67, (uint64_t)&qword_10085F4A8, v19);
  v64 = 0x300000003;
  v62 = off_100815730;
  v63 = xmmword_100478B80;
  v65 = v66;
  sub_10031CBA0((uint64_t)&v77, (uint64_t)&v62, a8 * a8 / -3.0);
  v59 = 0x300000003;
  v57 = off_100815730;
  v58 = xmmword_100478B80;
  v60 = v61;
  sub_10031CBA0((uint64_t)&qword_10085F438, (uint64_t)&v57, a8 * a8 / 6.0);
  v49 = 0x300000003;
  v47 = off_100815730;
  v48 = xmmword_100478B80;
  v50 = v51;
  sub_10030E2B4((uint64_t)&v62, (uint64_t)&v57, (uint64_t)&v47);
  sub_1003C3FA4((uint64_t)&v67, a3, (uint64_t)&qword_10085F358, (uint64_t)&qword_10085F358);
  sub_1003BAEEC((uint64_t)&v67, (uint64_t)&v47, v20);
  v69 = 0x100000001;
  v67 = off_1008166A8;
  *(_QWORD *)&v21 = 0x100000001;
  *((_QWORD *)&v21 + 1) = 0x100000001;
  v68 = v21;
  v70 = v71;
  v71[0] = 0;
  sub_1003C3C30((uint64_t)&v47, a1, (uint64_t)&qword_10085F358, (uint64_t)&v67);
  sub_1003B7C5C((uint64_t)&v47, (uint64_t)&v52);
  v59 = 0x300000003;
  v57 = off_100815730;
  v58 = xmmword_100478B80;
  v60 = v61;
  sub_10031CBA0((uint64_t)&v52, (uint64_t)&v57, a8);
  sub_1003B7C5C(a7, (uint64_t)v41);
  v22 = pow(a8, 3.0);
  v44 = 0x300000003;
  v42 = off_100815730;
  v43 = xmmword_100478B80;
  v45 = &v46;
  sub_10031CBA0((uint64_t)v41, (uint64_t)&v42, v22 / 3.0);
  v64 = 0x300000003;
  v62 = off_100815730;
  v63 = xmmword_100478B80;
  v65 = v66;
  sub_10030E2B4((uint64_t)&v57, (uint64_t)&v42, (uint64_t)&v62);
  sub_1003C3FA4((uint64_t)&v67, a3, (uint64_t)&qword_10085F358, (uint64_t)&qword_10085F390);
  sub_1003BAEEC((uint64_t)&v67, (uint64_t)&v62, v23);
  sub_1003C3FA4((uint64_t)&v67, a3, (uint64_t)&qword_10085F358, (uint64_t)&qword_10085F3C8);
  sub_1003BAEEC((uint64_t)&v67, (uint64_t)&qword_10085F438, v24);
  sub_1003C3FA4((uint64_t)&v67, a3, (uint64_t)&qword_10085F358, (uint64_t)&qword_10085F400);
  sub_1003BAEEC((uint64_t)&v67, (uint64_t)&qword_10085F4A8, v25);
  sub_1003C3FA4((uint64_t)&v67, a3, (uint64_t)&qword_10085F390, (uint64_t)&qword_10085F358);
  sub_1003BAEEC((uint64_t)&v67, (uint64_t)&qword_10085F4A8, v26);
  sub_1003C3FA4((uint64_t)&v67, a3, (uint64_t)&qword_10085F390, (uint64_t)&qword_10085F390);
  sub_1003BAEEC((uint64_t)&v67, (uint64_t)&qword_10085F4A8, v27);
  sub_1003C3FA4((uint64_t)&v67, a3, (uint64_t)&qword_10085F390, (uint64_t)&qword_10085F3C8);
  sub_1003BAEEC((uint64_t)&v67, (uint64_t)&qword_10085F4A8, v28);
  sub_1003C3FA4((uint64_t)&v67, a3, (uint64_t)&qword_10085F390, (uint64_t)&qword_10085F400);
  sub_1003BAEEC((uint64_t)&v67, (uint64_t)&qword_10085F438, v29);
  v49 = 0x100000001;
  v47 = off_1008166A8;
  *(_QWORD *)&v30 = 0x100000001;
  *((_QWORD *)&v30 + 1) = 0x100000001;
  v48 = v30;
  v50 = v51;
  v51[0] = 0;
  sub_1003C3C30((uint64_t)&v67, a1, (uint64_t)&qword_10085F358, (uint64_t)&v47);
  v59 = 0x100000003;
  v57 = off_1008156E8;
  v58 = xmmword_100478880;
  v60 = v61;
  sub_10030E3B0((uint64_t)&v77, (uint64_t)&v67, (uint64_t)&v57);
  v64 = 0x100000003;
  v62 = off_1008156E8;
  v63 = xmmword_100478880;
  v65 = v66;
  sub_10030E2B4((uint64_t)&v57, (uint64_t)&v72, (uint64_t)&v62);
  v54 = 0x100000001;
  v52 = off_1008166A8;
  *(_QWORD *)&v31 = 0x100000001;
  *((_QWORD *)&v31 + 1) = 0x100000001;
  v53 = v31;
  v55 = v56;
  v56[0] = 0;
  sub_1003C3C30((uint64_t)&v47, a1, (uint64_t)&qword_10085F358, (uint64_t)&v52);
  sub_1003BB040((uint64_t)&v47, (uint64_t)&v62, v32);
  v49 = 0x100000001;
  v47 = off_1008166A8;
  *(_QWORD *)&v33 = 0x100000001;
  *((_QWORD *)&v33 + 1) = 0x100000001;
  v48 = v33;
  v50 = v51;
  v51[0] = 0;
  sub_1003C3C30((uint64_t)&v67, a1, (uint64_t)&qword_10085F390, (uint64_t)&v47);
  v59 = 0x100000003;
  v57 = off_1008156E8;
  v58 = xmmword_100478880;
  v60 = v61;
  sub_1003C3ECC(a7, (uint64_t)&v57, a8);
  v64 = 0x100000003;
  v62 = off_1008156E8;
  v63 = xmmword_100478880;
  v65 = v66;
  sub_10030F0E0((uint64_t)&v67, (uint64_t)&v57, (uint64_t)&v62);
  v54 = 0x100000001;
  v52 = off_1008166A8;
  *(_QWORD *)&v34 = 0x100000001;
  *((_QWORD *)&v34 + 1) = 0x100000001;
  v53 = v34;
  v55 = v56;
  v56[0] = 0;
  sub_1003C3C30((uint64_t)&v47, a1, (uint64_t)&qword_10085F390, (uint64_t)&v52);
  sub_1003BB040((uint64_t)&v47, (uint64_t)&v62, v35);
  v49 = 0x100000001;
  v47 = off_1008166A8;
  *(_QWORD *)&v36 = 0x100000001;
  *((_QWORD *)&v36 + 1) = 0x100000001;
  v48 = v36;
  v50 = v51;
  v51[0] = 0;
  sub_1003C3C30((uint64_t)&v67, a1, (uint64_t)&qword_10085F390, (uint64_t)&v47);
  v64 = 0x100000003;
  v62 = off_1008156E8;
  v63 = xmmword_100478880;
  v65 = v66;
  sub_10030E3B0((uint64_t)&v77, (uint64_t)&v67, (uint64_t)&v62);
  v59 = 0x100000001;
  v57 = off_1008166A8;
  *(_QWORD *)&v37 = 0x100000001;
  *((_QWORD *)&v37 + 1) = 0x100000001;
  v58 = v37;
  v60 = v61;
  v61[0] = 0;
  sub_1003C3C30((uint64_t)&v47, a1, (uint64_t)&qword_10085F390, (uint64_t)&v57);
  return sub_1003BB040((uint64_t)&v47, (uint64_t)&v62, v38);
}

_QWORD *sub_1003BAECC(_QWORD *result)
{
  result[16] = off_100815C00;
  result[9] = off_100815C00;
  *result = off_100807398;
  return result;
}

uint64_t sub_1003BAEEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  int v7;
  uint64_t i;
  uint64_t j;
  uint64_t v10;

  v3 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v3 != *(_DWORD *)(a2 + 8))
    sub_1003F1774(a1, a2, a3);
  v6 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v6 != *(_DWORD *)(a2 + 12))
    sub_1003F1750(a1, a2, a3);
  if ((_DWORD)v6)
  {
    v7 = 0;
    for (i = 0; i != v6; ++i)
    {
      if ((_DWORD)v3)
      {
        for (j = 0; j != v3; ++j)
        {
          v10 = *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8 * (v7 + j));
          *(_QWORD *)sub_100346AA0(*(_QWORD *)(a1 + 112), *(_DWORD *)(*(_QWORD *)(a1 + 152) + 4 * j), *(_DWORD *)(*(_QWORD *)(a1 + 208) + 4 * i)) = v10;
          *(_QWORD *)sub_10030E274(a1, j, i) = v10;
        }
      }
      v7 += v3;
    }
  }
  return a1;
}

_QWORD *sub_1003BAFC4(_QWORD *result)
{
  result[22] = off_100815C00;
  result[15] = off_100815C00;
  *result = off_100807398;
  return result;
}

double sub_1003BAFE4@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double result;

  *(_QWORD *)(a2 + 24) = 0x300000003;
  *(_QWORD *)a2 = off_100815730;
  *(_OWORD *)(a2 + 8) = xmmword_100478B80;
  *(_QWORD *)(a2 + 32) = a2 + 40;
  *(_QWORD *)&result = *(_OWORD *)&sub_1003C4174(a1, a2);
  return result;
}

void sub_1003BB030(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = off_100807398;
  _Unwind_Resume(a1);
}

uint64_t sub_1003BB040(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  int v7;
  uint64_t i;
  uint64_t j;
  uint64_t v10;

  v3 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v3 != *(_DWORD *)(a2 + 8))
    sub_1003F1774(a1, a2, a3);
  v6 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v6 != *(_DWORD *)(a2 + 12))
    sub_1003F1750(a1, a2, a3);
  if ((_DWORD)v6)
  {
    v7 = 0;
    for (i = 0; i != v6; ++i)
    {
      if ((_DWORD)v3)
      {
        for (j = 0; j != v3; ++j)
        {
          v10 = *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8 * (v7 + j));
          *(_QWORD *)sub_100346AA0(*(_QWORD *)(a1 + 64), *(_DWORD *)(*(_QWORD *)(a1 + 104) + 4 * j), *(_DWORD *)(*(_QWORD *)(a1 + 160) + 4 * i)) = v10;
          *(_QWORD *)sub_10030E274(a1, j, i) = v10;
        }
      }
      v7 += v3;
    }
  }
  return a1;
}

BOOL sub_1003BB118(uint64_t a1, uint64_t a2, double a3, double a4)
{
  double v4;
  _BOOL8 result;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  int i;
  uint64_t j;
  uint64_t v15;
  uint64_t v16;
  uint64_t (**v17)();
  __int128 v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t (**v22)();
  __int128 v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t (**v27)();
  __int128 v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t (**v32)();
  __int128 v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t (**v37)();
  __int128 v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t (**v42)();
  __int128 v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t (**v47)();
  __int128 v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t (**v52)();
  __int128 v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;

  v4 = a4 - a3;
  if (a4 - a3 == 0.0)
    return 1;
  if (a4 - a3 >= 0.0)
  {
    v39 = 0x600000006;
    v37 = off_100818868;
    v38 = xmmword_10072BBA0;
    v40 = &v41;
    sub_10030DD0C(&v37, 6, 6);
    sub_10030DD58((uint64_t)&v37, 0.0);
    for (i = 0; i != 6; ++i)
      *(_QWORD *)sub_100346AA0((uint64_t)&v37, i, i) = 0x3FF0000000000000;
    v34 = 0xC00000006;
    v32 = off_100818AF0;
    v33 = xmmword_10072BD60;
    v35 = &v36;
    sub_10030DD0C(&v32, 6, 12);
    sub_10030DD58((uint64_t)&v32, 0.0);
    v29 = 0x100000003;
    v27 = off_1008156E8;
    v28 = xmmword_100478880;
    v30 = &v31;
    sub_10030DD0C(&v27, 3, 1);
    sub_10030DD58((uint64_t)&v27, 0.0);
    v24 = 0x100000003;
    v22 = off_1008156E8;
    v23 = xmmword_100478880;
    v25 = &v26;
    sub_10030DD0C(&v22, 3, 1);
    sub_10030DD58((uint64_t)&v22, 0.0);
    for (j = 0; j != 3; ++j)
    {
      v15 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * j);
      *(_QWORD *)sub_10030E194((uint64_t)&v27, j) = v15;
      v16 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * j);
      *(_QWORD *)sub_10030E194((uint64_t)&v22, j) = v16;
    }
    sub_1003B9FF4(a2, (uint64_t)&v37, (uint64_t)&v32, (uint64_t)&v27, (uint64_t)&v27, (uint64_t)&v27, (uint64_t)&v22, v4);
    v19 = 0x600000006;
    v17 = off_100818868;
    v18 = xmmword_10072BBA0;
    v20 = &v21;
    v54 = 0x100000006;
    v52 = off_1008188F8;
    v53 = xmmword_10072BBB0;
    v55 = &v56;
    v49 = 0x100000006;
    v47 = off_1008188F8;
    v48 = xmmword_10072BBB0;
    v50 = &v51;
    v44 = 0x100000018;
    v42 = off_100818940;
    v43 = xmmword_10072BBC0;
    v45 = &v46;
    sub_1003C3804((uint64_t)&v37, (uint64_t)&v52, (uint64_t)&v47, (uint64_t)&v42, (uint64_t)&v17);
  }
  v8 = qword_10085F520;
  result = os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR);
  if (result)
  {
    sub_1003F1798(v8, a3, a4, v9, v10);
    return 0;
  }
  return result;
}

BOOL sub_1003BB470(uint64_t a1, uint64_t a2, uint64_t a3, double a4, double a5)
{
  double v7;
  double v8;
  double v9;
  double v10;
  uint64_t v14;
  double v15;
  double v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int i;
  uint64_t v22;
  _BOOL8 result;
  const char *v24;
  NSObject *v25;
  uint32_t v26;
  uint64_t v27;
  uint64_t (**v28)();
  __int128 v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t (**v33)();
  __int128 v34;
  uint64_t v35;
  _BYTE *v36;
  _BYTE v37[288];
  uint64_t (**v38)();
  __int128 v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t (**v43)();
  __int128 v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t (**v48)();
  __int128 v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t (**v53)();
  __int128 v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t (**v58)();
  __int128 v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t (**v63)();
  __int128 v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t (**v68)();
  __int128 v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t (**v73)();
  __int128 v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t (**v78)();
  __int128 v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  _BYTE buf[24];
  uint64_t v84;
  _BYTE v85[580];

  v7 = *(double *)a1;
  v8 = *(double *)a2;
  v9 = a5 - a4;
  if (a5 - a4 <= 0.0 || (v10 = v8 - v7, v8 - v7 <= 0.0))
  {
    v22 = qword_10085F520;
    result = os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    *(_DWORD *)buf = 134218752;
    *(double *)&buf[4] = v7;
    *(_WORD *)&buf[12] = 2048;
    *(double *)&buf[14] = v8;
    *(_WORD *)&buf[22] = 2048;
    v84 = *(_QWORD *)&a4;
    *(_WORD *)v85 = 2048;
    *(double *)&v85[2] = a5;
    v24 = "#sf,RoseEKF error: Either IMU data comes not in chronological order (PreviousIMUTime: %f, CurrentIMUTime: %f) "
          "or trying to propagate state backward (from time %f to time %f)";
    v25 = v22;
    v26 = 42;
    goto LABEL_16;
  }
  if (v8 >= a5 && v8 >= a4 && v7 <= a4 && v7 <= a5)
  {
    v65 = 0x100000003;
    v63 = off_1008156E8;
    v64 = xmmword_100478880;
    v66 = &v67;
    sub_10030DD0C(&v63, 3, 1);
    sub_10030DD58((uint64_t)&v63, 0.0);
    v60 = 0x100000003;
    v58 = off_1008156E8;
    v59 = xmmword_100478880;
    v61 = &v62;
    sub_10030DD0C(&v58, 3, 1);
    sub_10030DD58((uint64_t)&v58, 0.0);
    v55 = 0x100000003;
    v53 = off_1008156E8;
    v54 = xmmword_100478880;
    v56 = &v57;
    sub_10030DD0C(&v53, 3, 1);
    sub_10030DD58((uint64_t)&v53, 0.0);
    v14 = 0;
    v15 = (a4 - v7) / v10;
    v16 = (v9 * 0.5 + a4 - v7) / v10;
    v17 = (a5 - v7) / v10;
    do
    {
      v18 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v14);
      *(_QWORD *)sub_10030E194((uint64_t)&v63, v14) = v18;
      v19 = *(_QWORD *)(*(_QWORD *)(a2 + 40) + 8 * v14);
      *(_QWORD *)sub_10030E194((uint64_t)&v58, v14) = v19;
      v20 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v14);
      *(_QWORD *)sub_10030E194((uint64_t)&v53, v14++) = v20;
    }
    while (v14 != 3);
    v84 = 0x100000003;
    *(_QWORD *)buf = off_1008156E8;
    *(_OWORD *)&buf[8] = xmmword_100478880;
    *(_QWORD *)v85 = &v85[8];
    sub_1003C3ECC((uint64_t)&v63, (uint64_t)buf, 1.0 - v15);
    v35 = 0x100000003;
    v33 = off_1008156E8;
    v34 = xmmword_100478880;
    v36 = v37;
    sub_1003C3ECC((uint64_t)&v58, (uint64_t)&v33, v15);
    v50 = 0x100000003;
    v48 = off_1008156E8;
    v49 = xmmword_100478880;
    v51 = &v52;
    sub_10030F0E0((uint64_t)buf, (uint64_t)&v33, (uint64_t)&v48);
    v84 = 0x100000003;
    *(_QWORD *)buf = off_1008156E8;
    *(_OWORD *)&buf[8] = xmmword_100478880;
    *(_QWORD *)v85 = &v85[8];
    sub_1003C3ECC((uint64_t)&v63, (uint64_t)buf, 1.0 - v16);
    v35 = 0x100000003;
    v33 = off_1008156E8;
    v34 = xmmword_100478880;
    v36 = v37;
    sub_1003C3ECC((uint64_t)&v58, (uint64_t)&v33, v16);
    v45 = 0x100000003;
    v43 = off_1008156E8;
    v44 = xmmword_100478880;
    v46 = &v47;
    sub_10030F0E0((uint64_t)buf, (uint64_t)&v33, (uint64_t)&v43);
    v84 = 0x100000003;
    *(_QWORD *)buf = off_1008156E8;
    *(_OWORD *)&buf[8] = xmmword_100478880;
    *(_QWORD *)v85 = &v85[8];
    sub_1003C3ECC((uint64_t)&v63, (uint64_t)buf, 1.0 - v17);
    v35 = 0x100000003;
    v33 = off_1008156E8;
    v34 = xmmword_100478880;
    v36 = v37;
    sub_1003C3ECC((uint64_t)&v58, (uint64_t)&v33, v17);
    v40 = 0x100000003;
    v38 = off_1008156E8;
    v39 = xmmword_100478880;
    v41 = &v42;
    sub_10030F0E0((uint64_t)buf, (uint64_t)&v33, (uint64_t)&v38);
    v35 = 0x600000006;
    v33 = off_100818868;
    v34 = xmmword_10072BBA0;
    v36 = v37;
    sub_10030DD0C(&v33, 6, 6);
    sub_10030DD58((uint64_t)&v33, 0.0);
    for (i = 0; i != 6; ++i)
      *(_QWORD *)sub_100346AA0((uint64_t)&v33, i, i) = 0x3FF0000000000000;
    v84 = 0xC00000006;
    *(_QWORD *)buf = off_100818AF0;
    *(_OWORD *)&buf[8] = xmmword_10072BD60;
    *(_QWORD *)v85 = &v85[8];
    sub_10030DD0C(buf, 6, 12);
    sub_10030DD58((uint64_t)buf, 0.0);
    sub_1003B9FF4(a3, (uint64_t)&v33, (uint64_t)buf, (uint64_t)&v48, (uint64_t)&v43, (uint64_t)&v38, (uint64_t)&v53, v9);
    v30 = 0x600000006;
    v28 = off_100818868;
    v29 = xmmword_10072BBA0;
    v31 = &v32;
    v80 = 0x100000006;
    v78 = off_1008188F8;
    v79 = xmmword_10072BBB0;
    v81 = &v82;
    v75 = 0x100000006;
    v73 = off_1008188F8;
    v74 = xmmword_10072BBB0;
    v76 = &v77;
    v70 = 0x100000018;
    v68 = off_100818940;
    v69 = xmmword_10072BBC0;
    v71 = &v72;
    sub_1003C3804((uint64_t)&v33, (uint64_t)&v78, (uint64_t)&v73, (uint64_t)&v68, (uint64_t)&v28);
  }
  v27 = qword_10085F520;
  result = os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR);
  if (result)
  {
    *(_DWORD *)buf = 134218496;
    *(double *)&buf[4] = v7;
    *(_WORD *)&buf[12] = 2048;
    *(double *)&buf[14] = a4;
    *(_WORD *)&buf[22] = 2048;
    v84 = *(_QWORD *)&v8;
    v24 = "#sf,RoseEKF propagateStateAndCovariance error: Filter time is not between the two IMU timestamps - state propa"
          "gation aborted, PreviousIMUTime: %f, FilterTime: %f, CurrentIMUTime: %f";
    v25 = v27;
    v26 = 32;
LABEL_16:
    _os_log_error_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, v24, buf, v26);
    return 0;
  }
  return result;
}

uint64_t sub_1003BBB2C(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5)
{
  unint64_t v9;
  uint64_t v10;
  char *v11;
  double *v12;
  _QWORD *v13;
  unint64_t v14;
  char *v15;
  double *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  double v22;
  double v23;
  double *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char *v30;
  double *v31;
  unint64_t v32;
  char *v33;
  double *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  double v47;
  double v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  double v54;
  double v55;
  double v56;
  const char *v58;
  int v59;
  const char *v60;
  int v61;
  uint64_t (**v62)();
  __int128 v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t (**v67)();
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _BYTE *v71;
  _BYTE v72[288];
  uint64_t (**v73)();
  __int128 v74;
  uint64_t v75;
  _BYTE *v76;
  _BYTE v77[288];
  uint64_t (**v78)();
  __int128 v79;
  uint64_t v80;
  _BYTE *v81;
  _BYTE v82[288];
  uint64_t (**v83)();
  __int128 v84;
  uint64_t v85;
  _BYTE *v86;
  _BYTE v87[72];
  uint64_t (**v88)();
  __int128 v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t (**v93)();
  __int128 v94;
  uint64_t v95;
  _BYTE *v96;
  _BYTE v97[144];
  uint64_t (**v98)();
  __int128 v99;
  uint64_t v100;
  _BYTE *v101;
  _BYTE v102[24];
  _BYTE v103[8];
  unsigned int v104;
  unsigned int v105;
  uint64_t (**v106)();
  __int128 v107;
  uint64_t v108;
  uint64_t *v109;
  uint64_t v110;
  uint64_t (**v111)();
  __int128 v112;
  uint64_t v113;
  void **v114;
  void *v115[3];
  void *v116;
  void *v117;
  void *v118;
  void *v119;
  void *__p;
  void *v121;
  double v122;
  uint64_t (**v123)();
  __int128 v124;
  uint64_t v125;
  _BYTE *v126;
  _BYTE v127[200];

  v122 = *(double *)(a5 + 40);
  if (v122 >= *(double *)(a1 + 448))
  {
    v17 = a4[5] + a4[4] - 1;
    sub_1003B0780((uint64_t)&v111, *(_QWORD *)(a4[1] + 8 * (v17 / 0x1E)) + 136 * (v17 % 0x1E));
    sub_1003B01F0((uint64_t)&v106, a1 + 456);
    sub_1003B0618((uint64_t)v103, a1 + 544);
    if (sub_1003BB118((uint64_t)&v111, (uint64_t)&v106, *(double *)(a1 + 448), v122))
    {
      v100 = 0x100000003;
      v98 = off_1008156E8;
      v99 = xmmword_100478880;
      v101 = v102;
      sub_10030DD0C(&v98, 3, 1);
      sub_10030DD58((uint64_t)&v98, 0.0);
      v95 = 0x600000003;
      v93 = off_100818BC8;
      v94 = xmmword_10072BDA0;
      v96 = v97;
      sub_10030DD0C(&v93, 3, 6);
      sub_10030DD58((uint64_t)&v93, 0.0);
      sub_1003BC9FC((uint64_t)&v98, (uint64_t)&v93, (uint64_t)&v106);
      v90 = 0x100000003;
      v88 = off_1008156E8;
      v89 = xmmword_100478880;
      v91 = &v92;
      sub_10030DD0C(&v88, 3, 1);
      sub_10030DD58((uint64_t)&v88, 0.0);
      v18 = *(_QWORD *)(a5 + 48);
      *(_QWORD *)sub_10030E194((uint64_t)&v88, 0) = v18;
      v19 = *(_QWORD *)(a5 + 64);
      *(_QWORD *)sub_10030E194((uint64_t)&v88, 1u) = v19;
      v20 = *(_QWORD *)(a5 + 72);
      *(_QWORD *)sub_10030E194((uint64_t)&v88, 2u) = v20;
      v80 = 0x100000003;
      v78 = off_1008156E8;
      v79 = xmmword_100478880;
      v81 = v82;
      sub_10030E2B4((uint64_t)&v88, (uint64_t)&v98, (uint64_t)&v78);
      sub_10030EC4C(a2, (uint64_t)&v78);
      v85 = 0x300000003;
      v83 = off_100815730;
      v84 = xmmword_100478B80;
      v86 = v87;
      sub_10030DD0C(&v83, 3, 3);
      sub_10030DD58((uint64_t)&v83, 0.0);
      v21 = *(double *)(a5 + 56);
      *(double *)sub_10030E274((uint64_t)&v83, 0, 0) = v21 * v21;
      v22 = *(double *)(a5 + 80);
      *(double *)sub_10030E274((uint64_t)&v83, 1, 1) = v22 * v22;
      v23 = *(double *)(a5 + 88);
      *(double *)sub_10030E274((uint64_t)&v83, 2, 2) = v23 * v23;
      v70 = 0x600000006;
      v71 = 0;
      v68 = 0;
      v69 = 0;
      v67 = off_100818868;
      if (v105 > 6)
      {
        v58 = "this->max_num_rows_ >= num_rows";
        v59 = 422;
      }
      else
      {
        if (v104 < 7)
        {
          v68 = __PAIR64__(v104, v105);
          LODWORD(v69) = v104 * v105;
          HIDWORD(v69) = v105;
          v71 = v72;
          sub_10030E1CC((uint64_t)v103, &v67);
          v75 = 0x600000006;
          v73 = off_100818868;
          v74 = xmmword_10072BBA0;
          v76 = v77;
          sub_10030E3B0((uint64_t)&v67, (uint64_t)v103, (uint64_t)&v73);
          v80 = 0x600000006;
          v78 = off_100818868;
          v79 = xmmword_10072BBA0;
          v81 = v82;
          v64 = 0x100000006;
          v62 = off_1008188F8;
          v63 = xmmword_10072BBB0;
          v65 = &v66;
          v125 = 0x100000018;
          v123 = off_100818940;
          v124 = xmmword_10072BBC0;
          v126 = v127;
          sub_10031C6D8((uint64_t)&v73, (uint64_t)&v62, (uint64_t)&v123, (uint64_t)&v78);
        }
        v58 = "this->max_num_cols_ >= num_cols";
        v59 = 423;
      }
      __assert_rtn("SetMatrixSize", "cnmatrixbase.h", v59, v58);
    }
    if (__p)
    {
      v121 = __p;
      operator delete(__p);
    }
    if (v118)
    {
      v119 = v118;
      operator delete(v118);
    }
    if (v116)
    {
      v117 = v116;
      operator delete(v116);
    }
    if (v115[0])
    {
      v115[1] = v115[0];
      operator delete(v115[0]);
    }
    if (*((_QWORD *)&v112 + 1))
    {
      v113 = *((_QWORD *)&v112 + 1);
      operator delete(*((void **)&v112 + 1));
    }
  }
  else
  {
    v9 = a4[10];
    v10 = a4[7];
    v11 = (char *)(v10 + 8 * (v9 >> 9));
    if (a4[8] == v10)
    {
      v12 = 0;
      v16 = 0;
      v13 = a4 + 11;
      v15 = (char *)(v10 + 8 * ((a4[11] + v9) >> 9));
    }
    else
    {
      v12 = (double *)(*(_QWORD *)v11 + 8 * (a4[10] & 0x1FFLL));
      v13 = a4 + 11;
      v14 = a4[11] + v9;
      v15 = (char *)(v10 + 8 * (v14 >> 9));
      v16 = (double *)(*(_QWORD *)v15 + 8 * (v14 & 0x1FF));
    }
    v24 = (double *)(a1 + 872);
    v25 = sub_1003C4330(v11, v12, v15, v16, (double *)(a1 + 872));
    v27 = v26;
    v28 = a4[10];
    v29 = a4[7];
    v30 = (char *)(v29 + 8 * (v28 >> 9));
    if (a4[8] == v29)
    {
      v31 = 0;
      v34 = 0;
      v33 = (char *)(v29 + 8 * ((*v13 + v28) >> 9));
    }
    else
    {
      v31 = (double *)(*(_QWORD *)v30 + 8 * (a4[10] & 0x1FFLL));
      v32 = *v13 + v28;
      v33 = (char *)(v29 + 8 * (v32 >> 9));
      v34 = (double *)(*(_QWORD *)v33 + 8 * (v32 & 0x1FF));
    }
    v36 = sub_1003C4330(v30, v31, v33, v34, &v122);
    v37 = v35;
    v38 = a4[7];
    if (a4[8] == v38)
    {
      if (!v27)
        return 0;
      v39 = 0;
    }
    else
    {
      if (*(_QWORD *)(v38 + ((a4[10] >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (a4[10] & 0x1FFLL) == v27)
        return 0;
      v39 = *(_QWORD *)(v38 + (((*v13 + a4[10]) >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * ((*v13 + a4[10]) & 0x1FFLL);
      if (v39 == v27)
        return 0;
    }
    if (v39 != v35)
    {
      sub_1003B01F0((uint64_t)&v62, a1 + 880);
      sub_1003B0618((uint64_t)v103, a1 + 968);
      v40 = a4[7];
      v41 = a4[8];
      v42 = (char *)(v40 + 8 * (a4[10] >> 9));
      if (v41 == v40)
        v43 = 0;
      else
        v43 = *(_QWORD *)v42 + 8 * (a4[10] & 0x1FFLL);
      if (v27 == v43)
        v44 = 0;
      else
        v44 = ((v27 - *(_QWORD *)v25) >> 3) + ((v25 - v42) << 6) - ((v43 - *(_QWORD *)v42) >> 3);
      if (v41 == v40)
        v45 = 0;
      else
        v45 = *(_QWORD *)v42 + 8 * (a4[10] & 0x1FFLL);
      if (v37 == v45)
        v46 = 0;
      else
        v46 = ((v37 - *(_QWORD *)v36) >> 3) + ((v36 - v42) << 6) - ((v45 - *(_QWORD *)v42) >> 3);
      if (v44 < 1)
        __assert_rtn("peekInnovationAndCovariance", "RoseSensorFusionEKF.cpp", 628, "indexFirstIMUDataToAdvanceTo > 0");
      v47 = *v24;
      if (v44 >= v46)
      {
LABEL_45:
        v50 = a4[4];
        if (sub_1003BB470(*(_QWORD *)(a4[1] + 8 * ((v46 - 1 + v50) / 0x1EuLL)) + 136 * ((v46 - 1 + v50) % 0x1EuLL), *(_QWORD *)(a4[1] + 8 * ((v50 + v46) / 0x1EuLL)) + 136 * ((v50 + v46) % 0x1EuLL), (uint64_t)&v62, v47, v122))
        {
          v108 = 0x100000003;
          v106 = off_1008156E8;
          v107 = xmmword_100478880;
          v109 = &v110;
          sub_10030DD0C(&v106, 3, 1);
          sub_10030DD58((uint64_t)&v106, 0.0);
          v95 = 0x600000003;
          v93 = off_100818BC8;
          v94 = xmmword_10072BDA0;
          v96 = v97;
          sub_10030DD0C(&v93, 3, 6);
          sub_10030DD58((uint64_t)&v93, 0.0);
          sub_1003BC9FC((uint64_t)&v106, (uint64_t)&v93, (uint64_t)&v62);
          v100 = 0x100000003;
          v98 = off_1008156E8;
          v99 = xmmword_100478880;
          v101 = v102;
          sub_10030DD0C(&v98, 3, 1);
          sub_10030DD58((uint64_t)&v98, 0.0);
          v51 = *(_QWORD *)(a5 + 48);
          *(_QWORD *)sub_10030E194((uint64_t)&v98, 0) = v51;
          v52 = *(_QWORD *)(a5 + 64);
          *(_QWORD *)sub_10030E194((uint64_t)&v98, 1u) = v52;
          v53 = *(_QWORD *)(a5 + 72);
          *(_QWORD *)sub_10030E194((uint64_t)&v98, 2u) = v53;
          v80 = 0x100000003;
          v78 = off_1008156E8;
          v79 = xmmword_100478880;
          v81 = v82;
          sub_10030E2B4((uint64_t)&v98, (uint64_t)&v106, (uint64_t)&v78);
          sub_10030EC4C(a2, (uint64_t)&v78);
          v113 = 0x300000003;
          v111 = off_100815730;
          v112 = xmmword_100478B80;
          v114 = v115;
          sub_10030DD0C(&v111, 3, 3);
          sub_10030DD58((uint64_t)&v111, 0.0);
          v54 = *(double *)(a5 + 56);
          *(double *)sub_10030E274((uint64_t)&v111, 0, 0) = v54 * v54;
          v55 = *(double *)(a5 + 80);
          *(double *)sub_10030E274((uint64_t)&v111, 1, 1) = v55 * v55;
          v56 = *(double *)(a5 + 88);
          *(double *)sub_10030E274((uint64_t)&v111, 2, 2) = v56 * v56;
          v70 = 0x600000006;
          v71 = 0;
          v68 = 0;
          v69 = 0;
          v67 = off_100818868;
          if (v105 > 6)
          {
            v60 = "this->max_num_rows_ >= num_rows";
            v61 = 422;
          }
          else
          {
            if (v104 < 7)
            {
              v68 = __PAIR64__(v104, v105);
              LODWORD(v69) = v104 * v105;
              HIDWORD(v69) = v105;
              v71 = v72;
              sub_10030E1CC((uint64_t)v103, &v67);
              v75 = 0x600000006;
              v73 = off_100818868;
              v74 = xmmword_10072BBA0;
              v76 = v77;
              sub_10030E3B0((uint64_t)&v67, (uint64_t)v103, (uint64_t)&v73);
              v80 = 0x600000006;
              v78 = off_100818868;
              v79 = xmmword_10072BBA0;
              v81 = v82;
              v85 = 0x100000006;
              v83 = off_1008188F8;
              v84 = xmmword_10072BBB0;
              v86 = v87;
              v125 = 0x100000018;
              v123 = off_100818940;
              v124 = xmmword_10072BBC0;
              v126 = v127;
              sub_10031C6D8((uint64_t)&v73, (uint64_t)&v83, (uint64_t)&v123, (uint64_t)&v78);
            }
            v60 = "this->max_num_cols_ >= num_cols";
            v61 = 423;
          }
          __assert_rtn("SetMatrixSize", "cnmatrixbase.h", v61, v60);
        }
      }
      else
      {
        while (1)
        {
          v48 = v47;
          v47 = *(double *)(*(_QWORD *)(a4[7] + (((unint64_t)(v44 + a4[10]) >> 6) & 0x3FFFFFFFFFFFFF8))
                          + 8 * ((v44 + a4[10]) & 0x1FF));
          v49 = v44 + a4[4];
          if (!sub_1003BB470(*(_QWORD *)(a4[1] + 8 * ((v49 - 1) / 0x1E)) + 136 * ((v49 - 1) % 0x1E), *(_QWORD *)(a4[1] + 8 * (v49 / 0x1E)) + 136 * (v49 % 0x1E), (uint64_t)&v62, v48, v47))break;
          if (v46 == ++v44)
            goto LABEL_45;
        }
      }
    }
  }
  return 0;
}

void sub_1003BC918(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1003BC9FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v12[256];
  uint64_t (**v13)();
  __int128 v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t (**v18)();
  __int128 v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t (**v23)();
  __int128 v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t (**v28)();
  __int128 v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t (**v33)();
  __int128 v34;
  uint64_t v35;
  int *v36;
  int v37;

  v30 = 0x100000001;
  v28 = off_100815C78;
  *(_QWORD *)&v6 = 0x100000001;
  *((_QWORD *)&v6 + 1) = 0x100000001;
  v29 = v6;
  v31 = &v32;
  sub_10030DD0C(&v28, 1, 1);
  sub_10030DD58((uint64_t)&v28, 0.0);
  v25 = 0x100000002;
  v23 = off_100815CC0;
  v24 = xmmword_100478BD0;
  v26 = &v27;
  sub_10030DD0C(&v23, 2, 1);
  sub_10030DD58((uint64_t)&v23, 0.0);
  v20 = 0x600000001;
  v18 = off_100818E50;
  v19 = xmmword_10072BDB0;
  v21 = &v22;
  sub_10030DD0C(&v18, 1, 6);
  sub_10030DD58((uint64_t)&v18, 0.0);
  v15 = 0x600000002;
  v13 = off_100818E98;
  v14 = xmmword_10072BDC0;
  v16 = &v17;
  sub_10030DD0C(&v13, 2, 6);
  sub_10030DD58((uint64_t)&v13, 0.0);
  sub_1003BDE9C((uint64_t)&v28, (uint64_t)&v18, a3);
  sub_1003BE044((uint64_t)&v23, (uint64_t)&v13, a3);
  if (DWORD2(v29) != 1)
    sub_1003F1410();
  v7 = *v31;
  *(_QWORD *)sub_10030E194(a1, 0) = v7;
  sub_1003C4FBC((uint64_t)v12, a1, (uint64_t)&qword_10085F328);
  sub_1003BE2AC((uint64_t)v12, (uint64_t)&v23);
  v35 = 0x100000001;
  v33 = off_1008166A8;
  *(_QWORD *)&v8 = 0x100000001;
  *((_QWORD *)&v8 + 1) = 0x100000001;
  v34 = v8;
  v36 = &v37;
  v37 = 0;
  sub_1003C5154((uint64_t)v12, a2, (uint64_t)&v33, (uint64_t)&qword_10085F240);
  sub_1003BE34C((uint64_t)v12, (uint64_t)&v18, v9);
  sub_1003C5328((uint64_t)v12, a2, (uint64_t)&qword_10085F328, (uint64_t)&qword_10085F240);
  return sub_1003BE444((uint64_t)v12, (uint64_t)&v13, v10);
}

_QWORD *sub_1003BCC60(_QWORD *result)
{
  *result = off_100807398;
  return result;
}

_QWORD *sub_1003BCC70(_QWORD *result)
{
  *result = off_100807398;
  return result;
}

uint64_t sub_1003BCC80(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v5;
  uint64_t v6;
  char *v7;
  double *v8;
  _QWORD *v9;
  unint64_t v10;
  char *v11;
  double *v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  double *v20;
  unint64_t v21;
  char *v22;
  double *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  double v39;
  unint64_t v40;
  _BYTE v42[328];
  _QWORD v43[5];
  uint64_t (**v44)();
  __int128 v45;
  uint64_t v46;
  void **v47;
  void *v48[3];
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  void *__p;
  void *v54;
  double v55;
  _QWORD v56[3];
  _QWORD v57[7];
  __int128 v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;

  v55 = *(double *)(a3 + 40);
  if (v55 >= *(double *)(a1 + 448))
  {
    v13 = a2[5] + a2[4] - 1;
    sub_1003B0780((uint64_t)&v44, *(_QWORD *)(a2[1] + 8 * (v13 / 0x1E)) + 136 * (v13 % 0x1E));
    sub_1003B01F0((uint64_t)v43, a1 + 456);
    sub_1003B0618((uint64_t)v42, a1 + 544);
    if (sub_1003BB118((uint64_t)&v44, (uint64_t)v43, *(double *)(a1 + 448), v55))
    {
      v59 = 0x100000006;
      v57[6] = off_1008188B0;
      v58 = xmmword_10072BBB0;
      v60 = &v61;
      sub_1003C357C((uint64_t)v57);
    }
    if (__p)
    {
      v54 = __p;
      operator delete(__p);
    }
    if (v51)
    {
      v52 = v51;
      operator delete(v51);
    }
    if (v49)
    {
      v50 = v49;
      operator delete(v49);
    }
    if (v48[0])
    {
      v48[1] = v48[0];
      operator delete(v48[0]);
    }
    if (*((_QWORD *)&v45 + 1))
    {
      v46 = *((_QWORD *)&v45 + 1);
      operator delete(*((void **)&v45 + 1));
    }
    return 0;
  }
  v5 = a2[10];
  v6 = a2[7];
  v7 = (char *)(v6 + 8 * (v5 >> 9));
  if (a2[8] == v6)
  {
    v8 = 0;
    v12 = 0;
    v9 = a2 + 11;
    v11 = (char *)(v6 + 8 * ((a2[11] + v5) >> 9));
  }
  else
  {
    v8 = (double *)(*(_QWORD *)v7 + 8 * (a2[10] & 0x1FFLL));
    v9 = a2 + 11;
    v10 = a2[11] + v5;
    v11 = (char *)(v6 + 8 * (v10 >> 9));
    v12 = (double *)(*(_QWORD *)v11 + 8 * (v10 & 0x1FF));
  }
  v14 = sub_1003C4330(v7, v8, v11, v12, (double *)(a1 + 872));
  v16 = v15;
  v17 = a2[10];
  v18 = a2[7];
  v19 = (char *)(v18 + 8 * (v17 >> 9));
  if (a2[8] == v18)
  {
    v20 = 0;
    v23 = 0;
    v22 = (char *)(v18 + 8 * ((*v9 + v17) >> 9));
  }
  else
  {
    v20 = (double *)(*(_QWORD *)v19 + 8 * (a2[10] & 0x1FFLL));
    v21 = *v9 + v17;
    v22 = (char *)(v18 + 8 * (v21 >> 9));
    v23 = (double *)(*(_QWORD *)v22 + 8 * (v21 & 0x1FF));
  }
  v25 = sub_1003C4330(v19, v20, v22, v23, &v55);
  v26 = v24;
  v27 = a2[7];
  if (a2[8] == v27)
  {
    v28 = 0;
    if (!v16)
      return 0;
  }
  else
  {
    if (*(_QWORD *)(v27 + ((a2[10] >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (a2[10] & 0x1FFLL) == v16)
      return 0;
    v28 = *(_QWORD *)(v27 + (((*v9 + a2[10]) >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * ((*v9 + a2[10]) & 0x1FFLL);
    if (v28 == v16)
      return 0;
  }
  if (v28 == v24)
    return 0;
  sub_1003B01F0((uint64_t)v56, a1 + 880);
  sub_1003B0618((uint64_t)v42, a1 + 968);
  v29 = a2[7];
  v30 = a2[8];
  v31 = (char *)(v29 + 8 * (a2[10] >> 9));
  if (v30 == v29)
    v32 = 0;
  else
    v32 = *(_QWORD *)v31 + 8 * (a2[10] & 0x1FFLL);
  if (v16 == v32
    || (v33 = *(_QWORD *)v31,
        v34 = ((v16 - *(_QWORD *)v14) >> 3) + ((v14 - v31) << 6) - ((v32 - *(_QWORD *)v31) >> 3),
        v34 <= 0))
  {
    __assert_rtn("peekDirectionalError", "RoseSensorFusionEKF.cpp", 714, "indexFirstIMUDataToAdvanceTo > 0");
  }
  v35 = *(double *)(a1 + 872);
  if (v30 == v29)
    v36 = 0;
  else
    v36 = v33 + 8 * (a2[10] & 0x1FFLL);
  if (v26 == v36)
  {
    v37 = 0;
    v38 = -1;
LABEL_41:
    if (sub_1003BB470(*(_QWORD *)(a2[1] + 8 * ((v38 + a2[4]) / 0x1EuLL)) + 136 * ((v38 + a2[4]) % 0x1EuLL), *(_QWORD *)(a2[1] + 8 * ((a2[4] + v37) / 0x1EuLL)) + 136 * ((a2[4] + v37) % 0x1EuLL), (uint64_t)v56, v35, v55))
    {
      v46 = 0x100000006;
      v44 = off_1008188B0;
      v45 = xmmword_10072BBB0;
      v47 = v48;
      sub_1003C357C((uint64_t)v43);
    }
    return 0;
  }
  v37 = ((v26 - *(_QWORD *)v25) >> 3) + ((v25 - v31) << 6) - ((v36 - v33) >> 3);
  v38 = v37 - 1;
  if (v34 >= v37)
    goto LABEL_41;
  while (1)
  {
    v39 = v35;
    v35 = *(double *)(*(_QWORD *)(a2[7] + (((unint64_t)(v34 + a2[10]) >> 6) & 0x3FFFFFFFFFFFFF8))
                    + 8 * ((v34 + a2[10]) & 0x1FF));
    v40 = v34 + a2[4];
    if (!sub_1003BB470(*(_QWORD *)(a2[1] + 8 * ((v40 - 1) / 0x1E)) + 136 * ((v40 - 1) % 0x1E), *(_QWORD *)(a2[1] + 8 * (v40 / 0x1E)) + 136 * (v40 % 0x1E), (uint64_t)v56, v39, v35))return 0;
    if (++v34 >= v37)
      goto LABEL_41;
  }
}

void sub_1003BD394(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
  if (a58)
    operator delete[]();
  _Unwind_Resume(a1);
}

_QWORD *sub_1003BD43C(_QWORD *result)
{
  *result = off_100807398;
  return result;
}

std::string *sub_1003BD44C@<X0>(std::string *result@<X0>, std::string *a2@<X8>)
{
  int v2;
  int v3;
  uint64_t v4;
  int i;
  int j;
  double v8;
  std::string *v9;
  std::string::size_type size;
  const std::string::value_type *v11;
  std::string v12;

  v2 = result->__r_.__value_.__r.__words[1];
  v3 = HIDWORD(result->__r_.__value_.__r.__words[1]);
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  a2->__r_.__value_.__r.__words[0] = 0;
  if (v2)
  {
    v4 = (uint64_t)result;
    for (i = 0; i != v2; ++i)
    {
      if (v3)
      {
        for (j = 0; j != v3; ++j)
        {
          v8 = sub_10027C1DC(v4, i, j);
          std::to_string(&v12, v8);
          if ((v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v9 = &v12;
          else
            v9 = (std::string *)v12.__r_.__value_.__r.__words[0];
          if ((v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(v12.__r_.__value_.__r.__words[2]);
          else
            size = v12.__r_.__value_.__l.__size_;
          std::string::append(a2, (const std::string::value_type *)v9, size);
          if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v12.__r_.__value_.__l.__data_);
          if (j - v3 == -1)
            v11 = ";";
          else
            v11 = ",";
          result = std::string::append(a2, v11);
        }
      }
    }
  }
  return result;
}

void sub_1003BD53C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v15 + 23) < 0)
    operator delete(*(void **)v15);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1003BD574(_QWORD *result)
{
  *result = off_100807398;
  return result;
}

uint64_t sub_1003BD584(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  int v7;
  uint64_t i;
  uint64_t j;
  uint64_t v10;

  v3 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v3 != *(_DWORD *)(a2 + 8))
    sub_1003F1774(a1, a2, a3);
  v6 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v6 != *(_DWORD *)(a2 + 12))
    sub_1003F1750(a1, a2, a3);
  if ((_DWORD)v6)
  {
    v7 = 0;
    for (i = 0; i != v6; ++i)
    {
      if ((_DWORD)v3)
      {
        for (j = 0; j != v3; ++j)
        {
          v10 = *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8 * (v7 + j));
          *(_QWORD *)sub_100346AA0(*(_QWORD *)(a1 + 1192), *(_DWORD *)(*(_QWORD *)(a1 + 1232) + 4 * j), *(_DWORD *)(*(_QWORD *)(a1 + 1320) + 4 * i)) = v10;
          *(_QWORD *)sub_10030E274(a1, j, i) = v10;
        }
      }
      v7 += v3;
    }
  }
  return a1;
}

_QWORD *sub_1003BD65C(_QWORD *result)
{
  result[161] = off_100815C00;
  result[150] = off_100815C00;
  *result = off_100807398;
  return result;
}

double sub_1003BD67C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double result;

  *(_QWORD *)(a2 + 24) = 0x600000006;
  *(_QWORD *)a2 = off_100818868;
  *(_OWORD *)(a2 + 8) = xmmword_10072BBA0;
  *(_QWORD *)(a2 + 32) = a2 + 40;
  *(_QWORD *)&result = *(_OWORD *)&sub_1003C4174(a1, a2);
  return result;
}

void sub_1003BD6C8(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = off_100807398;
  _Unwind_Resume(a1);
}

uint64_t sub_1003BD6D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  int v7;
  uint64_t i;
  uint64_t j;
  uint64_t v10;

  v3 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v3 != *(_DWORD *)(a2 + 8))
    sub_1003F1774(a1, a2, a3);
  v6 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v6 != *(_DWORD *)(a2 + 12))
    sub_1003F1750(a1, a2, a3);
  if ((_DWORD)v6)
  {
    v7 = 0;
    for (i = 0; i != v6; ++i)
    {
      if ((_DWORD)v3)
      {
        for (j = 0; j != v3; ++j)
        {
          v10 = *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8 * (v7 + j));
          *(_QWORD *)sub_100346AA0(*(_QWORD *)(a1 + 616), *(_DWORD *)(*(_QWORD *)(a1 + 656) + 4 * j), *(_DWORD *)(*(_QWORD *)(a1 + 720) + 4 * i)) = v10;
          *(_QWORD *)sub_10030E274(a1, j, i) = v10;
        }
      }
      v7 += v3;
    }
  }
  return a1;
}

_QWORD *sub_1003BD7B0(_QWORD *result)
{
  result[86] = off_100815C00;
  result[78] = off_100815C00;
  *result = off_100807398;
  return result;
}

uint64_t sub_1003BD7D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  int v7;
  uint64_t i;
  uint64_t j;
  uint64_t v10;

  v3 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v3 != *(_DWORD *)(a2 + 8))
    sub_1003F1774(a1, a2, a3);
  v6 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v6 != *(_DWORD *)(a2 + 12))
    sub_1003F1750(a1, a2, a3);
  if ((_DWORD)v6)
  {
    v7 = 0;
    for (i = 0; i != v6; ++i)
    {
      if ((_DWORD)v3)
      {
        for (j = 0; j != v3; ++j)
        {
          v10 = *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8 * (v7 + j));
          *(_QWORD *)sub_100346AA0(*(_QWORD *)(a1 + 328), *(_DWORD *)(*(_QWORD *)(a1 + 368) + 4 * j), *(_DWORD *)(*(_QWORD *)(a1 + 432) + 4 * i)) = v10;
          *(_QWORD *)sub_10030E274(a1, j, i) = v10;
        }
      }
      v7 += v3;
    }
  }
  return a1;
}

_QWORD *sub_1003BD8A8(_QWORD *result)
{
  result[50] = off_100815C00;
  result[42] = off_100815C00;
  *result = off_100807398;
  return result;
}

uint64_t sub_1003BD8C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  unsigned int v9;
  uint64_t result;
  int v11;
  unsigned int i;
  uint64_t j;
  int v14;

  v8 = *(unsigned int *)(a2 + 16);
  v9 = *(_DWORD *)(a3 + 16);
  result = sub_1003C2FA0(a4, *(_DWORD *)(a2 + 16), v9);
  if (v9)
  {
    v11 = 0;
    for (i = 0; i != v9; ++i)
    {
      if ((_DWORD)v8)
      {
        for (j = 0; j != v8; ++j)
        {
          v14 = sub_1003C3270(a2, j);
          result = sub_1003C3270(a3, i);
          *(_QWORD *)(*(_QWORD *)(a4 + 32) + 8 * (v11 + j)) = *(_QWORD *)(*(_QWORD *)(a1 + 32)
                                                                                        + 8
                                                                                        * (v14 + *(_DWORD *)(a1 + 20) * result));
        }
      }
      v11 += v8;
    }
  }
  return result;
}

void sub_1003BD990(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = off_100807398;
  _Unwind_Resume(a1);
}

_QWORD *sub_1003BD9A4(_QWORD *result)
{
  *result = off_100807398;
  return result;
}

_QWORD *sub_1003BD9B4(uint64_t a1)
{
  uint64_t i;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *result;

  for (i = 0; i != 3; ++i)
  {
    v3 = (uint64_t *)(a1 + 8 * i);
    v4 = *v3;
    *(_QWORD *)sub_10030E194((uint64_t)&unk_10085FD80, i) = v4;
    v5 = v3[3];
    *(_QWORD *)sub_10030E194((uint64_t)&unk_10085FDC0, i) = v5;
    v6 = v3[6];
    result = (_QWORD *)sub_10030E194((uint64_t)&unk_10085FE00, i);
    *result = v6;
  }
  return result;
}

uint64_t sub_1003BDA38(double a1, double a2, double a3, double a4)
{
  _BOOL4 v8;
  int v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t (**v20)();
  __int128 v21;
  uint64_t v22;
  _BYTE *v23;
  _BYTE v24[48];
  void *__p;
  char v26;
  uint64_t v27;

  v8 = a2 <= 0.0;
  if (a3 <= 0.0)
    v8 = 1;
  v9 = a1 <= 0.0 || v8;
  if (v9 == 1)
  {
    sub_1000537E4((uint64_t)&v20);
    v10 = *((_QWORD *)&v21 + 1);
    *(_DWORD *)((char *)&v21 + *(_QWORD *)(*((_QWORD *)&v21 + 1) - 24) + 16) = *(_DWORD *)((_BYTE *)&v21
                                                                                           + *(_QWORD *)(*((_QWORD *)&v21 + 1) - 24)
                                                                                           + 16) & 0xFFFFFEFB | 4;
    *(_QWORD *)&v24[*(_QWORD *)(v10 - 24) - 8] = 3;
    sub_100054C60((_QWORD *)&v21 + 1, (uint64_t)"RoseEKF error: Trying to set dynamics noise intensity values that are not positive\n", 83);
    v11 = sub_100054C60((_QWORD *)&v21 + 1, (uint64_t)"qT: ", 4);
    v12 = (_QWORD *)std::ostream::operator<<(v11);
    v13 = sub_100054C60(v12, (uint64_t)", qA: ", 6);
    v14 = (_QWORD *)std::ostream::operator<<(v13);
    v15 = sub_100054C60(v14, (uint64_t)", qG: ", 6);
    v16 = (_QWORD *)std::ostream::operator<<(v15);
    v17 = sub_100054C60(v16, (uint64_t)", qV:", 5);
    std::ostream::operator<<(v17);
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
    {
      std::stringbuf::str(&v22);
      sub_1003F1810();
    }
    *(uint64_t (***)())((char *)&v20
    *((_QWORD *)&v21 + 1) = v18;
    if (v26 < 0)
      operator delete(__p);
    std::streambuf::~streambuf(&v22);
    std::ios::~ios(&v27);
  }
  else
  {
    v22 = 0x300000003;
    v20 = off_100815730;
    v21 = xmmword_100478B80;
    v23 = v24;
    sub_10031CBA0((uint64_t)&qword_10085F438, (uint64_t)&v20, a1);
    sub_10030EC4C((uint64_t)&qword_10085FE40, (uint64_t)&v20);
    v22 = 0x300000003;
    v20 = off_100815730;
    v21 = xmmword_100478B80;
    v23 = v24;
    sub_10031CBA0((uint64_t)&qword_10085F438, (uint64_t)&v20, a2);
    sub_10030EC4C((uint64_t)&qword_10085FEB0, (uint64_t)&v20);
    v22 = 0x300000003;
    v20 = off_100815730;
    v21 = xmmword_100478B80;
    v23 = v24;
    sub_10031CBA0((uint64_t)&qword_10085F438, (uint64_t)&v20, a3);
    sub_10030EC4C((uint64_t)&qword_10085FF20, (uint64_t)&v20);
    v22 = 0x300000003;
    v20 = off_100815730;
    v21 = xmmword_100478B80;
    v23 = v24;
    sub_10031CBA0((uint64_t)&qword_10085F438, (uint64_t)&v20, a4);
    sub_10030EC4C((uint64_t)&qword_10085FF90, (uint64_t)&v20);
    v22 = 0x300000003;
    v20 = off_100815730;
    v21 = xmmword_100478B80;
    v23 = v24;
    sub_10031CBA0((uint64_t)&qword_10085F438, (uint64_t)&v20, 1.0 / sqrt(a1));
    sub_10030EC4C((uint64_t)&qword_100860000, (uint64_t)&v20);
    v22 = 0x300000003;
    v20 = off_100815730;
    v21 = xmmword_100478B80;
    v23 = v24;
    sub_10031CBA0((uint64_t)&qword_10085F438, (uint64_t)&v20, 1.0 / sqrt(a2));
    sub_10030EC4C((uint64_t)&qword_100860070, (uint64_t)&v20);
    v22 = 0x300000003;
    v20 = off_100815730;
    v21 = xmmword_100478B80;
    v23 = v24;
    sub_10031CBA0((uint64_t)&qword_10085F438, (uint64_t)&v20, 1.0 / sqrt(a3));
    sub_10030EC4C((uint64_t)&qword_1008600E0, (uint64_t)&v20);
    v22 = 0x300000003;
    v20 = off_100815730;
    v21 = xmmword_100478B80;
    v23 = v24;
    sub_10031CBA0((uint64_t)&qword_10085F438, (uint64_t)&v20, 1.0 / sqrt(a4));
    sub_10030EC4C((uint64_t)&qword_100860150, (uint64_t)&v20);
  }
  return v9 ^ 1u;
}

void sub_1003BDE7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_100053910((uint64_t)va);
  _Unwind_Resume(a1);
}

double *sub_1003BDE9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v5;
  double v6;
  double *result;
  double v8;
  double v9;
  double v10;
  uint64_t (**v11)();
  __int128 v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t (**v16)();
  __int128 v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t (**v21)();
  __int128 v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t (**v26)();
  __int128 v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;

  sub_1003B7574(a3, (uint64_t)&qword_10085F358, 0, (uint64_t)&v21);
  v13 = 0x100000003;
  v11 = off_1008156E8;
  v12 = xmmword_100478880;
  v14 = &v15;
  sub_10030E2B4((uint64_t)&v21, (uint64_t)&unk_10085FDC0, (uint64_t)&v11);
  v28 = 0x100000003;
  v26 = off_1008156E8;
  v27 = xmmword_100478880;
  v29 = &v30;
  v23 = 0x100000134;
  v21 = off_1008157C0;
  v22 = xmmword_1004788A0;
  v24 = &v25;
  v18 = 0x100000003;
  v16 = off_1008156E8;
  v17 = xmmword_100478880;
  v19 = &v20;
  sub_10030E510((uint64_t)&v11, (uint64_t)&v26, (uint64_t)&v21, (uint64_t)&v16, "2");
  v6 = v5;
  result = (double *)sub_10030E194(a1, 0);
  *result = v6;
  if (v6 != 0.0)
  {
    v8 = sub_10027C1A4((uint64_t)&v11, 0);
    *(double *)sub_10030E194(a2, 0) = v8 / v6;
    v9 = sub_10027C1A4((uint64_t)&v11, 1u);
    *(double *)sub_10030E194(a2, 1u) = v9 / v6;
    v10 = sub_10027C1A4((uint64_t)&v11, 2u);
    result = (double *)sub_10030E194(a2, 2u);
    *result = v10 / v6;
  }
  return result;
}

void sub_1003BE044(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v5;
  double v6;
  double v7;
  long double v8;
  double v9;
  long double v10;
  long double *v11;
  long double *v12;
  double v13;
  double v14;
  double v15;
  uint64_t (**v16)();
  __int128 v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t (**v21)();
  __int128 v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t (**v26)();
  __int128 v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t (**v31)();
  __int128 v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;

  sub_1003B7574(a3, (uint64_t)&qword_10085F358, 0, (uint64_t)&v26);
  v18 = 0x100000003;
  v16 = off_1008156E8;
  v17 = xmmword_100478880;
  v19 = &v20;
  sub_10030E2B4((uint64_t)&v26, (uint64_t)&unk_10085FE00, (uint64_t)&v16);
  v33 = 0x100000003;
  v31 = off_1008156E8;
  v32 = xmmword_100478880;
  v34 = &v35;
  v28 = 0x100000134;
  v26 = off_1008157C0;
  v27 = xmmword_1004788A0;
  v29 = &v30;
  v23 = 0x100000003;
  v21 = off_1008156E8;
  v22 = xmmword_100478880;
  v24 = &v25;
  sub_10030E510((uint64_t)&v16, (uint64_t)&v31, (uint64_t)&v26, (uint64_t)&v21, "2");
  v6 = v5;
  v7 = sub_10027C1A4((uint64_t)&v16, 0);
  v8 = sub_10027C1A4((uint64_t)&v16, 1u);
  v9 = sub_10027C1A4((uint64_t)&v16, 2u);
  if (v6 != 0.0)
  {
    v10 = v9;
    v11 = (long double *)sub_10030E194(a1, 0);
    *v11 = atan2(v10, v8);
    v12 = (long double *)sub_10030E194(a1, 1u);
    *v12 = asin(v7 / v6);
    v13 = v10 * v10 + v8 * v8;
    v14 = 1.0 / (v6 * v6);
    *(_QWORD *)sub_10030E274(a2, 0, 0) = 0;
    v15 = sqrt(v13);
    *(double *)sub_10030E274(a2, 1, 0) = v14 * v15;
    if (v13 != 0.0)
    {
      *(long double *)sub_10030E274(a2, 0, 1) = -v10 / v13;
      *(long double *)sub_10030E274(a2, 0, 2) = v8 / v13;
      *(long double *)sub_10030E274(a2, 1, 1) = v14 * (-(v7 * v8) / v15);
      *(long double *)sub_10030E274(a2, 1, 2) = v14 * (-(v7 * v10) / v15);
    }
  }
}

uint64_t sub_1003BE2AC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t i;
  uint64_t v6;

  v2 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v2 != *(_DWORD *)(a2 + 16))
    sub_1003F1868();
  if ((int)v2 >= 1)
  {
    for (i = 0; i != v2; ++i)
    {
      v6 = *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8 * i);
      *(_QWORD *)sub_1003C50F0(*(_QWORD *)(a1 + 56), *(_DWORD *)(*(_QWORD *)(a1 + 96) + 4 * i)) = v6;
      *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * i) = v6;
    }
  }
  return a1;
}

_QWORD *sub_1003BE330(_QWORD *result)
{
  result[8] = off_100815C00;
  *result = off_100807398;
  return result;
}

uint64_t sub_1003BE34C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  int v7;
  uint64_t i;
  uint64_t j;
  uint64_t v10;

  v3 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v3 != *(_DWORD *)(a2 + 8))
    sub_1003F1774(a1, a2, a3);
  v6 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v6 != *(_DWORD *)(a2 + 12))
    sub_1003F1750(a1, a2, a3);
  if ((_DWORD)v6)
  {
    v7 = 0;
    for (i = 0; i != v6; ++i)
    {
      if ((_DWORD)v3)
      {
        for (j = 0; j != v3; ++j)
        {
          v10 = *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8 * (v7 + j));
          *(_QWORD *)sub_100346AA0(*(_QWORD *)(a1 + 88), *(_DWORD *)(*(_QWORD *)(a1 + 128) + 4 * j), *(_DWORD *)(*(_QWORD *)(a1 + 176) + 4 * i)) = v10;
          *(_QWORD *)sub_10030E274(a1, j, i) = v10;
        }
      }
      v7 += v3;
    }
  }
  return a1;
}

_QWORD *sub_1003BE424(_QWORD *result)
{
  result[18] = off_100815C00;
  result[12] = off_100815C00;
  *result = off_100807398;
  return result;
}

uint64_t sub_1003BE444(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  int v7;
  uint64_t i;
  uint64_t j;
  uint64_t v10;

  v3 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v3 != *(_DWORD *)(a2 + 8))
    sub_1003F1774(a1, a2, a3);
  v6 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v6 != *(_DWORD *)(a2 + 12))
    sub_1003F1750(a1, a2, a3);
  if ((_DWORD)v6)
  {
    v7 = 0;
    for (i = 0; i != v6; ++i)
    {
      if ((_DWORD)v3)
      {
        for (j = 0; j != v3; ++j)
        {
          v10 = *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8 * (v7 + j));
          *(_QWORD *)sub_100346AA0(*(_QWORD *)(a1 + 136), *(_DWORD *)(*(_QWORD *)(a1 + 176) + 4 * j), *(_DWORD *)(*(_QWORD *)(a1 + 224) + 4 * i)) = v10;
          *(_QWORD *)sub_10030E274(a1, j, i) = v10;
        }
      }
      v7 += v3;
    }
  }
  return a1;
}

_QWORD *sub_1003BE51C(_QWORD *result)
{
  result[24] = off_100815C00;
  result[18] = off_100815C00;
  *result = off_100807398;
  return result;
}

_QWORD *sub_1003BE53C(_QWORD *result)
{
  *result = off_100807398;
  return result;
}

_QWORD *sub_1003BE54C(_QWORD *result)
{
  *result = off_100807398;
  return result;
}

void sub_1003BE55C(uint64_t a1, uint64_t a2, double a3, long double a4, long double a5, double a6, double a7, double a8, double a9)
{
  double v16;
  double v17;
  double *v18;
  __double2 v19;
  double v20;
  double *v21;
  __double2 v22;
  double v23;
  double *v24;
  double v25;
  __double2 v26;
  __double2 v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double *v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  const char *v47;
  int v48;
  double v49;
  double v52;
  uint64_t (**v53)();
  int v54;
  int v55;
  int v56;
  int v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t (**v61)();
  __int128 v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t (**v66)();
  __int128 v67;
  uint64_t v68;
  _BYTE *v69;
  _BYTE v70[72];
  uint64_t (**v71)();
  __int128 v72;
  uint64_t v73;
  _BYTE *v74;
  _BYTE v75[72];
  uint64_t (**v76)();
  __int128 v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t (**v81)();
  __int128 v82;
  uint64_t v83;
  _BYTE *v84;
  _BYTE v85[2464];

  v78 = 0x100000003;
  v76 = off_1008156E8;
  v77 = xmmword_100478880;
  v79 = &v80;
  sub_10030E2B4((uint64_t)&unk_10085FDC0, (uint64_t)&unk_10085FE00, (uint64_t)&v76);
  v73 = 0x100000003;
  v71 = off_1008156E8;
  v72 = xmmword_100478880;
  v74 = v75;
  v83 = 0x100000134;
  v81 = off_1008157C0;
  v82 = xmmword_1004788A0;
  v84 = v85;
  v68 = 0x100000003;
  v66 = off_1008156E8;
  v67 = xmmword_100478880;
  v69 = v70;
  sub_10030E510((uint64_t)&v76, (uint64_t)&v71, (uint64_t)&v81, (uint64_t)&v66, "2");
  if (v16 == 0.0)
  {
    v17 = *(double *)sub_10030E194((uint64_t)&unk_10085FE00, 0);
    v18 = (double *)sub_10030E194(a1, 0);
    v19 = __sincos_stret(a5);
    *v18 = v17 + a3 * v19.__sinval;
    v20 = *(double *)sub_10030E194((uint64_t)&unk_10085FE00, 1u);
    v21 = (double *)sub_10030E194(a1, 1u);
    v22 = __sincos_stret(a4);
    *v21 = v20 + v19.__cosval * a3 * v22.__cosval;
    v23 = *(double *)sub_10030E194((uint64_t)&unk_10085FE00, 2u);
    v24 = (double *)sub_10030E194(a1, 2u);
    v25 = v23 + v19.__cosval * a3 * v22.__sinval;
  }
  else
  {
    v26 = __sincos_stret(a5);
    v49 = a9;
    v27 = __sincos_stret(a4);
    v52 = a4;
    v28 = a8;
    v29 = sub_10027C1A4((uint64_t)&v76, 0);
    v30 = sub_10027C1A4((uint64_t)&v76, 1u);
    v31 = sub_10027C1A4((uint64_t)&v76, 2u);
    v32 = (v27.__cosval * v26.__cosval * v30 + v29 * v26.__sinval + v31 * (v27.__sinval * v26.__cosval)) * -2.0;
    v33 = (sqrt(fmax((v30 * v30 + v29 * v29 + v31 * v31 - a3 * a3) * -4.0 + v32 * v32, 0.0)) - v32) * 0.5;
    v34 = *(double *)sub_10030E194((uint64_t)&unk_10085FE00, 0);
    *(double *)sub_10030E194(a1, 0) = v34 + v33 * v26.__sinval;
    v35 = *(double *)sub_10030E194((uint64_t)&unk_10085FE00, 1u);
    v36 = (double *)sub_10030E194(a1, 1u);
    v37 = v35 + v33 * (v27.__cosval * v26.__cosval);
    a9 = v49;
    *v36 = v37;
    v38 = *(double *)sub_10030E194((uint64_t)&unk_10085FE00, 2u);
    v24 = (double *)sub_10030E194(a1, 2u);
    v25 = v38 + v33 * (v27.__sinval * v26.__cosval);
    a8 = v28;
    a4 = v52;
  }
  *v24 = v25;
  if (1.57079633 - fabs(a5) > 0.01)
  {
    v83 = 0x300000003;
    v81 = off_100815730;
    v82 = xmmword_100478B80;
    v84 = v85;
    sub_10030DD0C(&v81, 3, 3);
    sub_10030DD58((uint64_t)&v81, 0.0);
    *(double *)sub_10030E274((uint64_t)&v81, 0, 0) = a6 * a6;
    *(double *)sub_10030E274((uint64_t)&v81, 1, 1) = a7 * a7;
    *(double *)sub_10030E274((uint64_t)&v81, 2, 1) = a9;
    *(double *)sub_10030E274((uint64_t)&v81, 1, 2) = a9;
    *(double *)sub_10030E274((uint64_t)&v81, 2, 2) = a8 * a8;
    v73 = 0x300000003;
    v71 = off_100815730;
    v72 = xmmword_100478B80;
    v74 = v75;
    sub_10030DD0C(&v71, 3, 3);
    sub_10030DD58((uint64_t)&v71, 0.0);
    v39 = sin(a5);
    *(double *)sub_10030E274((uint64_t)&v71, 0, 0) = v39;
    *(_QWORD *)sub_10030E274((uint64_t)&v71, 0, 1) = 0;
    v40 = cos(a5);
    v41 = v40 * a3;
    *(double *)sub_10030E274((uint64_t)&v71, 0, 2) = v40 * a3;
    v42 = cos(a4);
    *(double *)sub_10030E274((uint64_t)&v71, 1, 0) = v42 * v40;
    v43 = sin(a4);
    *(double *)sub_10030E274((uint64_t)&v71, 1, 1) = v43 * -(a3 * v40);
    v44 = -(a3 * v39);
    *(double *)sub_10030E274((uint64_t)&v71, 1, 2) = v42 * v44;
    *(double *)sub_10030E274((uint64_t)&v71, 2, 0) = v43 * v40;
    *(double *)sub_10030E274((uint64_t)&v71, 2, 1) = v42 * v41;
    *(double *)sub_10030E274((uint64_t)&v71, 2, 2) = v43 * v44;
    v63 = 0x300000003;
    v61 = off_100815730;
    v62 = xmmword_100478B80;
    v64 = &v65;
    sub_10030E3B0((uint64_t)&v71, (uint64_t)&v81, (uint64_t)&v61);
    v58 = 0x300000003;
    v53 = off_100815730;
    if (DWORD1(v72) > 3)
    {
      v47 = "this->max_num_rows_ >= num_rows";
      v48 = 422;
    }
    else
    {
      if (v72 < 4)
      {
        v54 = DWORD1(v72);
        v55 = v72;
        v56 = v72 * DWORD1(v72);
        v57 = DWORD1(v72);
        v59 = &v60;
        sub_10030E1CC((uint64_t)&v71, &v53);
        v68 = 0x300000003;
        v66 = off_100815730;
        v67 = xmmword_100478B80;
        v69 = v70;
        sub_10030E3B0((uint64_t)&v61, (uint64_t)&v53, (uint64_t)&v66);
        sub_10030EC4C(a2, (uint64_t)&v66);
        return;
      }
      v47 = "this->max_num_cols_ >= num_cols";
      v48 = 423;
    }
    __assert_rtn("SetMatrixSize", "cnmatrixbase.h", v48, v47);
  }
  v83 = 0x300000003;
  v81 = off_100815730;
  v82 = xmmword_100478B80;
  v84 = v85;
  sub_10030DD0C(&v81, 3, 3);
  sub_10030DD58((uint64_t)&v81, 0.0);
  sub_10030EC4C(a2, (uint64_t)&v81);
  *(double *)sub_10030E274(a2, 0, 0) = a6 * a6;
  v45 = a3 * a3 * (a8 * a8);
  *(double *)sub_10030E274(a2, 1, 1) = v45;
  *(double *)sub_10030E274(a2, 2, 2) = v45;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
    sub_1003F1890();
}

std::string *sub_1003BEC50@<X0>(std::string *result@<X0>, std::string *a2@<X8>)
{
  int v2;
  int v3;
  uint64_t v4;
  int i;
  int j;
  double v8;
  std::string *v9;
  std::string::size_type size;
  const std::string::value_type *v11;
  std::string v12;

  v2 = result->__r_.__value_.__r.__words[1];
  v3 = HIDWORD(result->__r_.__value_.__r.__words[1]);
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  a2->__r_.__value_.__r.__words[0] = 0;
  if (v2)
  {
    v4 = (uint64_t)result;
    for (i = 0; i != v2; ++i)
    {
      if (v3)
      {
        for (j = 0; j != v3; ++j)
        {
          v8 = sub_10027C1DC(v4, i, j);
          std::to_string(&v12, v8);
          if ((v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v9 = &v12;
          else
            v9 = (std::string *)v12.__r_.__value_.__r.__words[0];
          if ((v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(v12.__r_.__value_.__r.__words[2]);
          else
            size = v12.__r_.__value_.__l.__size_;
          std::string::append(a2, (const std::string::value_type *)v9, size);
          if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v12.__r_.__value_.__l.__data_);
          if (j - v3 == -1)
            v11 = ";";
          else
            v11 = ",";
          result = std::string::append(a2, v11);
        }
      }
    }
  }
  return result;
}

void sub_1003BED40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v15 + 23) < 0)
    operator delete(*(void **)v15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003BED78@<X0>(char *__s1@<X2>, uint64_t a2@<X0>, uint64_t a3@<X1>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  int32x4_t v11;
  unsigned int i;
  uint64_t (**v14)();
  int32x4_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;

  v7 = strcmp(__s1, ":");
  if ((_DWORD)v7)
    sub_1003F18C8(v7, v8, v9);
  v10 = *(_DWORD *)(a2 + 12);
  v16 = 0x100000006;
  v14 = off_1008188F8;
  if ((v10 & 0x80000000) != 0)
    sub_1003F18BC("CNMatrix", "cnmatrix.h", 419, "nr >= 0");
  if (v10 >= 7)
    sub_1003F18BC("SetMatrixSize", "cnmatrixbase.h", 422, "this->max_num_rows_ >= num_rows");
  v11 = vdupq_lane_s32((int32x2_t)(v10 | 0x100000000), 0);
  v11.i32[1] = 1;
  v15 = v11;
  v17 = &v18;
  if (v10)
  {
    for (i = 0; i != v10; ++i)
      *(_DWORD *)sub_1003C558C((uint64_t)&v14, i) = i;
  }
  return sub_1003C55C4(a4, a2, a3, (uint64_t)&v14);
}

_QWORD *sub_1003BEE90(_QWORD *result)
{
  result[50] = off_100815C00;
  result[42] = off_100815C00;
  *result = off_100807398;
  return result;
}

uint64_t sub_1003BEEB0@<X0>(char *__s1@<X2>, uint64_t a2@<X0>, uint64_t a3@<X1>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  int32x4_t v11;
  unsigned int i;
  uint64_t (**v14)();
  int32x4_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;

  v7 = strcmp(__s1, ":");
  if ((_DWORD)v7)
    sub_1003F18C8(v7, v8, v9);
  v10 = *(_DWORD *)(a2 + 12);
  v16 = 0x100000006;
  v14 = off_1008188F8;
  if ((v10 & 0x80000000) != 0)
    sub_1003F18BC("CNMatrix", "cnmatrix.h", 419, "nr >= 0");
  if (v10 >= 7)
    sub_1003F18BC("SetMatrixSize", "cnmatrixbase.h", 422, "this->max_num_rows_ >= num_rows");
  v11 = vdupq_lane_s32((int32x2_t)(v10 | 0x100000000), 0);
  v11.i32[1] = 1;
  v15 = v11;
  v17 = &v18;
  if (v10)
  {
    for (i = 0; i != v10; ++i)
      *(_DWORD *)sub_1003C558C((uint64_t)&v14, i) = i;
  }
  return sub_1003C57AC(a4, a2, a3, (uint64_t)&v14);
}

uint64_t sub_1003BEFC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  int v7;
  uint64_t i;
  uint64_t j;
  uint64_t v10;

  v3 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v3 != *(_DWORD *)(a2 + 8))
    sub_1003F1774(a1, a2, a3);
  v6 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v6 != *(_DWORD *)(a2 + 12))
    sub_1003F1750(a1, a2, a3);
  if ((_DWORD)v6)
  {
    v7 = 0;
    for (i = 0; i != v6; ++i)
    {
      if ((_DWORD)v3)
      {
        for (j = 0; j != v3; ++j)
        {
          v10 = *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8 * (v7 + j));
          *(_QWORD *)sub_100346AA0(*(_QWORD *)(a1 + 184), *(_DWORD *)(*(_QWORD *)(a1 + 224) + 4 * j), *(_DWORD *)(*(_QWORD *)(a1 + 280) + 4 * i)) = v10;
          *(_QWORD *)sub_10030E274(a1, j, i) = v10;
        }
      }
      v7 += v3;
    }
  }
  return a1;
}

_QWORD *sub_1003BF0A0(_QWORD *result)
{
  result[31] = off_100815C00;
  result[24] = off_100815C00;
  *result = off_100807398;
  return result;
}

uint64_t sub_1003BF0C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t i;
  uint64_t v6;

  v2 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v2 != *(_DWORD *)(a2 + 16))
    sub_1003F1868();
  if ((int)v2 >= 1)
  {
    for (i = 0; i != v2; ++i)
    {
      v6 = *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8 * i);
      *(_QWORD *)sub_1003C50F0(*(_QWORD *)(a1 + 64), *(_DWORD *)(*(_QWORD *)(a1 + 104) + 4 * i)) = v6;
      *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * i) = v6;
    }
  }
  return a1;
}

_QWORD *sub_1003BF144(_QWORD *result)
{
  result[9] = off_100815C00;
  *result = off_100807398;
  return result;
}

_QWORD *sub_1003BF160(_QWORD *result)
{
  *result = off_100807398;
  return result;
}

double sub_1003BF170@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  double result;
  uint64_t i;

  v8 = *(unsigned int *)(a2 + 16);
  sub_1003C5F90(a4, *(_DWORD *)(a2 + 16), 1u);
  if ((_DWORD)v8)
  {
    for (i = 0; i != v8; ++i)
    {
      result = *(double *)(*(_QWORD *)(a1 + 32) + 8 * (sub_1003C3270(a2, i) + *(_DWORD *)(a1 + 20) * a3));
      *(double *)(*(_QWORD *)(a4 + 32) + 8 * i) = result;
    }
  }
  return result;
}

void sub_1003BF1F4(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = off_100807398;
  _Unwind_Resume(a1);
}

_QWORD *sub_1003BF204(_QWORD *result)
{
  *result = off_100807398;
  return result;
}

_QWORD *sub_1003BF214(_QWORD *result)
{
  *result = off_100807398;
  return result;
}

void sub_1003BF224(uint64_t a1, uint64_t a2, std::string *a3)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  int v15;
  uint64_t (**v16)();
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  int v21;
  uint64_t (**v22)();
  __int128 v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t (**v27)();
  __int128 v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t (**v32)();
  __int128 v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t (**v37)();
  __int128 v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;

  v4 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
    sub_1003F1910(a3, v4, v5, v6, v7, v8, v9, v10);
  v39 = 0x300000003;
  v37 = off_100815730;
  v38 = xmmword_100478B80;
  v40 = &v41;
  LOBYTE(v22) = 0;
  v11 = sub_1003C44CC((uint64_t)a3, (uint64_t)&v37, (BOOL *)&v22);
  if ((_BYTE)v22)
  {
    v19 = 0x300000003;
    v20 = 0;
    v17 = 0;
    v18 = 0;
    v16 = off_100815730;
    if (DWORD1(v38) > 3)
    {
      v14 = "this->max_num_rows_ >= num_rows";
      v15 = 422;
    }
    else
    {
      if (v38 < 4)
      {
        v17 = __PAIR64__(v38, DWORD1(v38));
        LODWORD(v18) = v38 * DWORD1(v38);
        HIDWORD(v18) = DWORD1(v38);
        v20 = &v21;
        sub_10030E1CC((uint64_t)&v37, &v16);
        v34 = 0x300000003;
        v32 = off_100815730;
        v33 = xmmword_100478B80;
        v35 = &v36;
        v29 = 0x100000003;
        v27 = off_1008163B8;
        v28 = xmmword_100478880;
        v30 = &v31;
        v24 = 0x10000000CLL;
        v22 = off_100816400;
        v23 = xmmword_1004794A0;
        v25 = &v26;
        sub_10031C6D8((uint64_t)&v16, (uint64_t)&v27, (uint64_t)&v22, (uint64_t)&v32);
      }
      v14 = "this->max_num_cols_ >= num_cols";
      v15 = 423;
    }
    __assert_rtn("SetMatrixSize", "cnmatrixbase.h", v15, v14);
  }
  sub_1003F18EC(v11, v12, v13);
}

void sub_1003BF990(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  const char *v10;
  int v11;
  uint64_t (**v12)();
  __int128 v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t (**v17)();
  __int128 v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t (**v22)();
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t (**v28)();
  __int128 v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t (**v33)();
  __int128 v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;

  v4 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
    sub_1003F19A0(a3, v4);
  v35 = 0x100000001;
  v33 = off_100815C78;
  *(_QWORD *)&v5 = 0x100000001;
  *((_QWORD *)&v5 + 1) = 0x100000001;
  v34 = v5;
  v36 = &v37;
  LOBYTE(v17) = 0;
  v6 = sub_1003C44CC(a3, (uint64_t)&v33, (BOOL *)&v17);
  if ((_BYTE)v17)
  {
    v25 = 0x100000001;
    v26 = 0;
    v24 = 0;
    v23 = 0;
    v22 = off_100815C78;
    if (DWORD1(v34) > 1)
    {
      v10 = "this->max_num_rows_ >= num_rows";
      v11 = 422;
    }
    else
    {
      if (v34 < 2)
      {
        v23 = __PAIR64__(v34, DWORD1(v34));
        LODWORD(v24) = v34 * DWORD1(v34);
        HIDWORD(v24) = DWORD1(v34);
        v26 = &v27;
        sub_10030E1CC((uint64_t)&v33, &v22);
        v30 = 0x100000001;
        v28 = off_100815C78;
        *(_QWORD *)&v9 = 0x100000001;
        *((_QWORD *)&v9 + 1) = 0x100000001;
        v29 = v9;
        v31 = &v32;
        v14 = 0x100000001;
        v12 = off_1008166A8;
        v13 = v9;
        v15 = &v16;
        v19 = 0x100000004;
        v17 = off_100815778;
        v18 = xmmword_100478890;
        v20 = &v21;
        sub_10031C6D8((uint64_t)&v22, (uint64_t)&v12, (uint64_t)&v17, (uint64_t)&v28);
      }
      v10 = "this->max_num_cols_ >= num_cols";
      v11 = 423;
    }
    __assert_rtn("SetMatrixSize", "cnmatrixbase.h", v11, v10);
  }
  sub_1003F18EC(v6, v7, v8);
}

uint64_t sub_1003C010C@<X0>(char *__s1@<X2>, uint64_t a2@<X0>, int a3@<W1>, uint64_t a4@<X8>)
{
  __int128 v7;
  unsigned int v8;
  int32x4_t v9;
  unsigned int i;
  uint64_t (**v12)();
  int32x4_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t (**v17)();
  __int128 v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;

  if (strcmp(__s1, ":"))
    sub_1003F1A4C();
  v19 = 0x100000001;
  v17 = off_1008166A8;
  *(_QWORD *)&v7 = 0x100000001;
  *((_QWORD *)&v7 + 1) = 0x100000001;
  v18 = v7;
  v20 = &v21;
  *(_DWORD *)sub_1003C558C((uint64_t)&v17, 0) = a3;
  v8 = *(_DWORD *)(a2 + 12);
  v14 = 0x100000006;
  v12 = off_1008188F8;
  if (v8 >= 7)
    sub_1003F1A24();
  v9 = vdupq_lane_s32((int32x2_t)(v8 | 0x100000000), 0);
  v9.i32[1] = 1;
  v13 = v9;
  v15 = &v16;
  if (v8)
  {
    for (i = 0; i != v8; ++i)
      *(_DWORD *)sub_1003C558C((uint64_t)&v12, i) = i;
  }
  return sub_1003C60D4(a4, a2, (uint64_t)&v17, (uint64_t)&v12);
}

_QWORD *sub_1003C0214(_QWORD *result)
{
  result[18] = off_100815C00;
  result[12] = off_100815C00;
  *result = off_100807398;
  return result;
}

_QWORD *sub_1003C0234(_QWORD *result)
{
  *result = off_100807398;
  return result;
}

double sub_1003C0244@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  double result;
  uint64_t i;

  v8 = *(unsigned int *)(a2 + 16);
  sub_1003C5F90(a4, *(_DWORD *)(a2 + 16), 1u);
  if ((_DWORD)v8)
  {
    for (i = 0; i != v8; ++i)
    {
      result = *(double *)(*(_QWORD *)(a1 + 32) + 8 * (sub_1003C3270(a2, i) + *(_DWORD *)(a1 + 20) * a3));
      *(double *)(*(_QWORD *)(a4 + 32) + 8 * i) = result;
    }
  }
  return result;
}

void sub_1003C02C8(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = off_100807398;
  _Unwind_Resume(a1);
}

_QWORD *sub_1003C02D8(_QWORD *result)
{
  *result = off_100807398;
  return result;
}

_QWORD *sub_1003C02E8(_QWORD *result)
{
  *result = off_100807398;
  return result;
}

void sub_1003C02F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  int v9;
  uint64_t (**v10)();
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t (**v16)();
  __int128 v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t (**v21)();
  __int128 v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t (**v26)();
  __int128 v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t (**v31)();
  __int128 v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;

  v4 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
    sub_1003F1A74(a3, v4);
  v33 = 0x200000002;
  v31 = off_100815D50;
  v32 = xmmword_100478BF0;
  v34 = &v35;
  LOBYTE(v16) = 0;
  v5 = sub_1003C44CC(a3, (uint64_t)&v31, (BOOL *)&v16);
  if ((_BYTE)v16)
  {
    v13 = 0x200000002;
    v14 = 0;
    v11 = 0;
    v12 = 0;
    v10 = off_100815D50;
    if (DWORD1(v32) > 2)
    {
      v8 = "this->max_num_rows_ >= num_rows";
      v9 = 422;
    }
    else
    {
      if (v32 < 3)
      {
        v11 = __PAIR64__(v32, DWORD1(v32));
        LODWORD(v12) = v32 * DWORD1(v32);
        HIDWORD(v12) = DWORD1(v32);
        v14 = &v15;
        sub_10030E1CC((uint64_t)&v31, &v10);
        v28 = 0x200000002;
        v26 = off_100815D50;
        v27 = xmmword_100478BF0;
        v29 = &v30;
        v23 = 0x100000002;
        v21 = off_100819288;
        v22 = xmmword_100478BD0;
        v24 = &v25;
        v18 = 0x100000008;
        v16 = off_1008192D0;
        v17 = xmmword_10072BE30;
        v19 = &v20;
        sub_10031C6D8((uint64_t)&v10, (uint64_t)&v21, (uint64_t)&v16, (uint64_t)&v26);
      }
      v8 = "this->max_num_cols_ >= num_cols";
      v9 = 423;
    }
    __assert_rtn("SetMatrixSize", "cnmatrixbase.h", v9, v8);
  }
  sub_1003F18EC(v5, v6, v7);
}

uint64_t sub_1003C0A84@<X0>(char *__s1@<X2>, uint64_t a2@<X0>, uint64_t a3@<X1>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  int32x4_t v11;
  unsigned int i;
  uint64_t (**v14)();
  int32x4_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;

  v7 = strcmp(__s1, ":");
  if ((_DWORD)v7)
    sub_1003F18C8(v7, v8, v9);
  v10 = *(_DWORD *)(a2 + 12);
  v16 = 0x100000006;
  v14 = off_1008188F8;
  if ((v10 & 0x80000000) != 0)
    sub_1003F18BC("CNMatrix", "cnmatrix.h", 419, "nr >= 0");
  if (v10 >= 7)
    sub_1003F18BC("SetMatrixSize", "cnmatrixbase.h", 422, "this->max_num_rows_ >= num_rows");
  v11 = vdupq_lane_s32((int32x2_t)(v10 | 0x100000000), 0);
  v11.i32[1] = 1;
  v15 = v11;
  v17 = &v18;
  if (v10)
  {
    for (i = 0; i != v10; ++i)
      *(_DWORD *)sub_1003C558C((uint64_t)&v14, i) = i;
  }
  return sub_1003C64C8(a4, a2, a3, (uint64_t)&v14);
}

_QWORD *sub_1003C0B9C(_QWORD *result)
{
  result[24] = off_100815C00;
  result[18] = off_100815C00;
  *result = off_100807398;
  return result;
}

_QWORD *sub_1003C0BBC(_QWORD *result)
{
  *result = off_100807398;
  return result;
}

double sub_1003C0BCC@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  double result;
  uint64_t i;

  v8 = *(unsigned int *)(a2 + 16);
  sub_1003C5F90(a4, *(_DWORD *)(a2 + 16), 1u);
  if ((_DWORD)v8)
  {
    for (i = 0; i != v8; ++i)
    {
      result = *(double *)(*(_QWORD *)(a1 + 32) + 8 * (sub_1003C3270(a2, i) + *(_DWORD *)(a1 + 20) * a3));
      *(double *)(*(_QWORD *)(a4 + 32) + 8 * i) = result;
    }
  }
  return result;
}

void sub_1003C0C50(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = off_100807398;
  _Unwind_Resume(a1);
}

_QWORD *sub_1003C0C60(_QWORD *result)
{
  *result = off_100807398;
  return result;
}

_QWORD *sub_1003C0C70(_QWORD *result)
{
  *result = off_100807398;
  return result;
}

void sub_1003C0C80(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t (**v12)();
  __int128 v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t (**v17)();
  __int128 v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;

  if (*(_BYTE *)(a1 + 444))
  {
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
      sub_1003F1BC0();
    if (fabs(*(double *)(a2 + 16)) <= 1.57079633 && fabs(*(double *)(a2 + 8)) <= 3.14159265)
    {
      if (sub_1003B92EC(a1, a3, *(double *)a2))
      {
        v19 = 0x100000002;
        v17 = off_100815CC0;
        v18 = xmmword_100478BD0;
        v20 = &v21;
        sub_10030DD0C(&v17, 2, 1);
        sub_10030DD58((uint64_t)&v17, 0.0);
        v14 = 0x200000002;
        v12 = off_100815D50;
        v13 = xmmword_100478BF0;
        v15 = &v16;
        sub_10030DD0C(&v12, 2, 2);
        sub_10030DD58((uint64_t)&v12, 0.0);
        v6 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)sub_10030E194((uint64_t)&v17, 0) = v6;
        v7 = *(_QWORD *)(a2 + 16);
        *(_QWORD *)sub_10030E194((uint64_t)&v17, 1u) = v7;
        v8 = *(double *)(a2 + 24);
        *(double *)sub_10030E274((uint64_t)&v12, 0, 0) = v8 * v8;
        v9 = *(_QWORD *)(a2 + 40);
        *(_QWORD *)sub_10030E274((uint64_t)&v12, 1, 0) = v9;
        v10 = *(_QWORD *)(a2 + 40);
        *(_QWORD *)sub_10030E274((uint64_t)&v12, 0, 1) = v10;
        v11 = *(double *)(a2 + 32);
        *(double *)sub_10030E274((uint64_t)&v12, 1, 1) = v11 * v11;
        sub_1003C02F8(a1, (uint64_t)&v17, (uint64_t)&v12);
      }
    }
    else
    {
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
        sub_1003F1B94();
      *(_DWORD *)(a1 + 440) = 3;
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
  {
    sub_1003F1B68();
  }
}

void sub_1003C0EB8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  double v8;
  uint64_t (**v9)();
  __int128 v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t (**v14)();
  __int128 v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;

  if (*(_BYTE *)(a1 + 444))
  {
    if (*(double *)(a2 + 8) <= 0.0)
    {
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
        sub_1003F1C18();
      *(_DWORD *)(a1 + 440) = 3;
    }
    else if (sub_1003B92EC(a1, a3, *(double *)a2))
    {
      v16 = 0x100000001;
      v14 = off_100815C78;
      *(_QWORD *)&v5 = 0x100000001;
      *((_QWORD *)&v5 + 1) = 0x100000001;
      v15 = v5;
      v17 = &v18;
      sub_10030DD0C(&v14, 1, 1);
      sub_10030DD58((uint64_t)&v14, 0.0);
      v11 = 0x100000001;
      v9 = off_100815C78;
      *(_QWORD *)&v6 = 0x100000001;
      *((_QWORD *)&v6 + 1) = 0x100000001;
      v10 = v6;
      v12 = &v13;
      sub_10030DD0C(&v9, 1, 1);
      sub_10030DD58((uint64_t)&v9, 0.0);
      v7 = *(_QWORD *)(a2 + 8);
      *(_QWORD *)sub_10030E194((uint64_t)&v14, 0) = v7;
      v8 = *(double *)(a2 + 16);
      *(double *)sub_10030E274((uint64_t)&v9, 0, 0) = v8 * v8;
      sub_1003BF990(a1, (uint64_t)&v14, (uint64_t)&v9);
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
  {
    sub_1003F1BEC();
  }
}

void sub_1003C1030(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  std::string v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t (**v10)();
  __int128 v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;

  if (*(_BYTE *)(a1 + 444))
  {
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
      sub_1003F1C9C();
    if (fabs(*(double *)(a2 + 72)) > 1.57079633
      || fabs(*(double *)(a2 + 64)) > 3.14159265
      || *(double *)(a2 + 48) <= 0.0)
    {
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
        sub_1003F1C70();
      *(_DWORD *)(a1 + 440) = 3;
    }
    else if (sub_1003B92EC(a1, a3, *(double *)(a2 + 40)))
    {
      v12 = 0x100000003;
      v10 = off_1008156E8;
      v11 = xmmword_100478880;
      v13 = &v14;
      v7 = 0x300000003;
      v6.__r_.__value_.__r.__words[0] = (std::string::size_type)off_100815730;
      *(_OWORD *)&v6.__r_.__value_.__r.__words[1] = xmmword_100478B80;
      v8 = &v9;
      sub_1003BE55C((uint64_t)&v10, (uint64_t)&v6, *(double *)(a2 + 48), *(long double *)(a2 + 64), *(long double *)(a2 + 72), *(double *)(a2 + 56), *(double *)(a2 + 80), *(double *)(a2 + 88), *(double *)(a2 + 96));
      sub_1003BF224(a1, (uint64_t)&v10, &v6);
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
  {
    sub_1003F1C44();
  }
}

uint64_t sub_1003C11C0(uint64_t a1)
{
  return *(unsigned int *)(a1 + 440);
}

uint64_t sub_1003C11C8(uint64_t result, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE v6[328];
  _BYTE v7[88];
  uint64_t (**v8)();
  __int128 v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t (**v13)();
  __int128 v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;

  v2 = (_QWORD *)result;
  if (*(_BYTE *)(result + 444))
  {
    *(_QWORD *)a2 = *(_QWORD *)(result + 448);
    v15 = 0x100000003;
    v13 = off_1008156E8;
    v14 = xmmword_100478880;
    v16 = &v17;
    sub_10030DD0C(&v13, 3, 1);
    sub_10030DD58((uint64_t)&v13, 0.0);
    v10 = 0x600000003;
    v8 = off_100818BC8;
    v9 = xmmword_10072BDA0;
    v11 = &v12;
    sub_10030DD0C(&v8, 3, 6);
    sub_10030DD58((uint64_t)&v8, 0.0);
    v3 = v2[4];
    v4 = v2[22];
    v5 = v2[40];
    sub_1003B01F0((uint64_t)v7, (uint64_t)(v2 + 57));
    *(_QWORD *)sub_10030E194((uint64_t)v7, 0) = v3;
    *(_QWORD *)sub_10030E194((uint64_t)v7, 1u) = v4;
    *(_QWORD *)sub_10030E194((uint64_t)v7, 2u) = v5;
    sub_1003BC9FC((uint64_t)&v13, (uint64_t)&v8, (uint64_t)v7);
    sub_1003B035C((uint64_t)(v2 + 68), (uint64_t)v6);
  }
  *(_QWORD *)a2 = 0;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_OWORD *)(a2 + 72) = 0u;
  *(_DWORD *)(a2 + 136) = *(_DWORD *)(result + 440);
  *(_OWORD *)(a2 + 120) = 0u;
  *(_OWORD *)(a2 + 104) = 0u;
  *(_OWORD *)(a2 + 88) = 0u;
  return result;
}

void sub_1003C15C0(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v5;
  double v6;
  double v7;
  long double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  _BOOL4 v13;
  _BOOL4 v14;
  double v15;
  NSObject *v16;
  _BOOL4 v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  double *v21;
  _QWORD *v22;
  unint64_t v23;
  char *v24;
  double *v25;
  NSObject *v26;
  _QWORD *v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  double *v35;
  unint64_t v36;
  char *v37;
  double *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  NSObject *v50;
  __int128 v51;
  uint64_t v52;
  double v53;
  double v54;
  double *v55;
  uint64_t v56;
  uint64_t v57;
  NSObject *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  NSObject *v62;
  unint64_t v63;
  double v64;
  double v65;
  double v66;
  std::string::size_type v67;
  uint64_t v68;
  uint64_t v69;
  std::string::size_type v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  std::string::size_type v76;
  uint64_t v77;
  double v78;
  double v79;
  std::string v82;
  uint64_t (**v83)();
  __int128 v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t (**v88)();
  __int128 v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  double v93[10];
  uint64_t (**v94)();
  __int128 v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t (**v99)();
  __int128 v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  uint8_t v104[8];
  __int128 v105;
  uint64_t v106;
  _DWORD *v107;
  _DWORD v108[74];
  _DWORD v109[3];
  __int16 v110;
  uint64_t v111;
  __int16 v112;
  uint64_t v113;
  _WORD v114[152];
  std::string buf;
  uint64_t v116;
  _BYTE v117[10];

  v3 = (uint64_t)a3;
  v5 = a1;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
  {
    sub_1003F21A0();
    v5 = a1;
    v3 = (uint64_t)a3;
  }
  v7 = *(double *)(a2 + 40);
  v6 = *(double *)(a2 + 48);
  v93[7] = v7;
  v93[8] = v6;
  v8 = *(double *)(a2 + 64);
  v78 = *(double *)(a2 + 56);
  v93[9] = v78;
  v93[1] = v7;
  v93[2] = v8;
  v9 = *(double *)(a2 + 80);
  v79 = *(double *)(a2 + 72);
  v93[3] = v79;
  v93[4] = v9;
  v10 = *(double *)(a2 + 88);
  v11 = *(double *)(a2 + 96);
  v93[5] = v10;
  v93[6] = v11;
  v93[0] = v7;
  if (!*(_BYTE *)(v5 + 444))
  {
    if (v6 <= 0.0)
    {
      v26 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf.__r_.__value_.__l.__data_) = 134218752;
        *(double *)((char *)buf.__r_.__value_.__r.__words + 4) = v6;
        WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
        *(long double *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v8;
        HIWORD(buf.__r_.__value_.__r.__words[2]) = 2048;
        v116 = *(_QWORD *)&v79;
        *(_WORD *)v117 = 2048;
        *(double *)&v117[2] = v7;
        _os_log_error_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_ERROR, "#sf,RoseEKF error: Aborted initializing filter due to negative range measurement w/ range: %f m, El: %f rad, and Az: %f rad at t = %f s", (uint8_t *)&buf, 0x2Au);
      }
    }
    else
    {
      if (!sub_1003C8158(v3))
      {
        v12 = v93[0];
        if (v93[0] >= *(double *)(*(_QWORD *)(a3[7] + ((a3[10] >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (a3[10] & 0x1FFLL)))
        {
          *(double *)(a1 + 448) = v93[0];
          *(_BYTE *)(a1 + 444) = 1;
          v50 = qword_10085F520;
          if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
          {
            LODWORD(buf.__r_.__value_.__l.__data_) = 134218752;
            *(double *)((char *)buf.__r_.__value_.__r.__words + 4) = v6;
            WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
            *(long double *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v8;
            HIWORD(buf.__r_.__value_.__r.__words[2]) = 2048;
            v116 = *(_QWORD *)&v79;
            *(_WORD *)v117 = 2048;
            *(double *)&v117[2] = v12;
            _os_log_debug_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_DEBUG, "#sf,RoseEKF: Initializing filter w/ range: %f m, El: %f rad, and Az: %f rad at t = %f s", (uint8_t *)&buf, 0x2Au);
          }
          v116 = 0x600000006;
          buf.__r_.__value_.__r.__words[0] = (std::string::size_type)off_100818868;
          *(_OWORD *)&buf.__r_.__value_.__r.__words[1] = xmmword_10072BBA0;
          *(_QWORD *)v117 = &v117[8];
          sub_10030DD0C(&buf, 6, 6);
          sub_10030DD58((uint64_t)&buf, 0.0);
          v90 = 0x100000003;
          v88 = off_1008156E8;
          v89 = xmmword_100478880;
          v91 = &v92;
          sub_10030DD0C(&v88, 3, 1);
          sub_10030DD58((uint64_t)&v88, 0.0);
          v85 = 0x300000003;
          v83 = off_100815730;
          v84 = xmmword_100478B80;
          v86 = &v87;
          sub_10030DD0C(&v83, 3, 3);
          sub_10030DD58((uint64_t)&v83, 0.0);
          sub_1003BE55C((uint64_t)&v88, (uint64_t)&v83, v6, v8, v79, v78, v9, v10, v11);
          v106 = 0x100000001;
          *(_QWORD *)v104 = off_1008166A8;
          *(_QWORD *)&v51 = 0x100000001;
          *((_QWORD *)&v51 + 1) = 0x100000001;
          v105 = v51;
          v107 = v108;
          v108[0] = 0;
          sub_1003C3C30((uint64_t)v109, a1 + 456, (uint64_t)&qword_10085F358, (uint64_t)v104);
          sub_1003BB040((uint64_t)v109, (uint64_t)&v88, v52);
          v53 = *(double *)sub_10030E194(a1 + 456, 0);
          v54 = *(double *)sub_10030E194(a1 + 456, 1u);
          v55 = (double *)sub_10030E194(a1 + 456, 2u);
          sub_1003C2B48(a1, v53, v54, *v55);
          sub_1003C3FA4((uint64_t)v109, (uint64_t)&buf, (uint64_t)&qword_10085F358, (uint64_t)&qword_10085F358);
          sub_1003BAEEC((uint64_t)v109, (uint64_t)&v83, v56);
          sub_1003C3FA4((uint64_t)v109, (uint64_t)&buf, (uint64_t)&qword_10085F390, (uint64_t)&qword_10085F390);
          sub_1003BAEEC((uint64_t)v109, (uint64_t)&qword_10085F438, v57);
          v58 = qword_10085F520;
          if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
          {
            v73 = *(_QWORD *)sub_10030E194(a1 + 456, 0);
            v74 = *(_QWORD *)sub_10030E194(a1 + 456, 1u);
            v75 = *(_QWORD *)sub_10030E194(a1 + 456, 2u);
            v109[0] = 134218752;
            *(_QWORD *)&v109[1] = v73;
            v110 = 2048;
            v111 = v74;
            v112 = 2048;
            v113 = v75;
            v114[0] = 2048;
            *(double *)&v114[1] = v93[0];
            _os_log_debug_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_DEBUG, "#sf,RoseEKF: Initializing filter w/ state: [%f,%f,%f] at t = %f s", (uint8_t *)v109, 0x2Au);
            v58 = qword_10085F520;
          }
          if (1.57079633 - fabs(v79) <= 0.01 && os_log_type_enabled(v58, OS_LOG_TYPE_DEBUG))
          {
            LOWORD(v109[0]) = 0;
            _os_log_debug_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_DEBUG, "#sf,RoseEKF: Az angle close to singularity - initializing filter covariance without measurement Jacobian", (uint8_t *)v109, 2u);
            v58 = qword_10085F520;
          }
          if (os_log_type_enabled(v58, OS_LOG_TYPE_DEBUG))
          {
            sub_1003BD44C(&buf, &v82);
            sub_1003F1DA4();
          }
          v106 = 0x600000006;
          *(_QWORD *)v104 = off_100818868;
          v105 = xmmword_10072BBA0;
          v107 = v108;
          v101 = 0x100000006;
          v99 = off_1008188F8;
          v100 = xmmword_10072BBB0;
          v102 = &v103;
          v96 = 0x100000018;
          v94 = off_100818940;
          v95 = xmmword_10072BBC0;
          v97 = &v98;
          sub_10031C6D8((uint64_t)&buf, (uint64_t)&v99, (uint64_t)&v94, (uint64_t)v104);
        }
      }
      v13 = sub_1003C8158((uint64_t)a3);
      v14 = os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR);
      if (v13)
      {
        if (v14)
          sub_1003F1CF4();
      }
      else if (v14)
      {
        sub_1003F1D20();
      }
    }
    goto LABEL_73;
  }
  if (sub_1003C8158(v3))
  {
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
      sub_1003F1DFC();
    return;
  }
  v15 = *(double *)(a1 + 448);
  v16 = qword_10085F520;
  v17 = os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG);
  if (v93[0] >= v15)
  {
    v27 = a3;
    if (v17)
    {
      v70 = *(_QWORD *)(a2 + 48);
      v72 = *(_QWORD *)(a2 + 64);
      v71 = *(_QWORD *)(a2 + 72);
      LODWORD(buf.__r_.__value_.__l.__data_) = 134218752;
      *(double *)((char *)buf.__r_.__value_.__r.__words + 4) = v93[0];
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v70;
      HIWORD(buf.__r_.__value_.__r.__words[2]) = 2048;
      v116 = v71;
      *(_WORD *)v117 = 2048;
      *(_QWORD *)&v117[2] = v72;
      _os_log_debug_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "#sf,RoseEKF: Measurement update with a non-delayed measurement at t = %f s , range = %f m, Az = %f rad, El = %f rad", (uint8_t *)&buf, 0x2Au);
      v16 = qword_10085F520;
    }
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
    {
      sub_1003F2174();
      v27 = a3;
    }
    v28 = v27[5] + v27[4] - 1;
    sub_1003B0780((uint64_t)&buf, *(_QWORD *)(v27[1] + 8 * (v28 / 0x1E)) + 136 * (v28 % 0x1E));
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
      sub_1003F2148();
    sub_1003B76D8(a1);
  }
  if (v17)
  {
    v67 = *(_QWORD *)(a2 + 48);
    v69 = *(_QWORD *)(a2 + 64);
    v68 = *(_QWORD *)(a2 + 72);
    LODWORD(buf.__r_.__value_.__l.__data_) = 134218752;
    *(double *)((char *)buf.__r_.__value_.__r.__words + 4) = v93[0];
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v67;
    HIWORD(buf.__r_.__value_.__r.__words[2]) = 2048;
    v116 = v68;
    *(_WORD *)v117 = 2048;
    *(_QWORD *)&v117[2] = v69;
    _os_log_debug_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "#sf,RoseEKF: Measurement update with a delayed measurement at t = %f s, range = %f m, Az = %f rad, El = %f rad", (uint8_t *)&buf, 0x2Au);
  }
  v18 = a3[10];
  v19 = a3[7];
  v20 = (char *)(v19 + 8 * (v18 >> 9));
  if (a3[8] == v19)
  {
    v21 = 0;
    v25 = 0;
    v22 = a3 + 11;
    v24 = (char *)(v19 + 8 * ((a3[11] + v18) >> 9));
  }
  else
  {
    v21 = (double *)(*(_QWORD *)v20 + 8 * (a3[10] & 0x1FFLL));
    v22 = a3 + 11;
    v23 = a3[11] + v18;
    v24 = (char *)(v19 + 8 * (v23 >> 9));
    v25 = (double *)(*(_QWORD *)v24 + 8 * (v23 & 0x1FF));
  }
  v29 = sub_1003C4330(v20, v21, v24, v25, (double *)(a1 + 872));
  v31 = v30;
  v32 = a3[10];
  v33 = a3[7];
  v34 = (char *)(v33 + 8 * (v32 >> 9));
  if (a3[8] == v33)
  {
    v35 = 0;
    v38 = 0;
    v37 = (char *)(v33 + 8 * ((*v22 + v32) >> 9));
  }
  else
  {
    v35 = (double *)(*(_QWORD *)v34 + 8 * (a3[10] & 0x1FFLL));
    v36 = *v22 + v32;
    v37 = (char *)(v33 + 8 * (v36 >> 9));
    v38 = (double *)(*(_QWORD *)v37 + 8 * (v36 & 0x1FF));
  }
  v40 = sub_1003C4330(v34, v35, v37, v38, v93);
  v41 = v39;
  v42 = a3[7];
  if (a3[8] != v42)
  {
    if (*(_QWORD *)(v42 + ((a3[10] >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (a3[10] & 0x1FFLL) == v31)
      goto LABEL_44;
    v43 = *(_QWORD *)(v42 + (((*v22 + a3[10]) >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * ((*v22 + a3[10]) & 0x1FFLL);
    if (v43 == v31)
      goto LABEL_44;
LABEL_39:
    if (v43 != v39)
    {
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
        sub_1003F1FA8();
      v44 = a1 + 456;
      sub_10030EC4C(a1 + 456, a1 + 880);
      sub_10030EC4C(a1 + 544, a1 + 968);
      *(_QWORD *)(a1 + 448) = *(_QWORD *)(a1 + 872);
      sub_1003C2AD4(a1);
      v45 = a3[10];
      v47 = a3[7];
      v46 = a3[8];
      v48 = (char *)(v47 + 8 * (v45 >> 9));
      if (v46 == v47)
        v49 = 0;
      else
        v49 = *(_QWORD *)v48 + 8 * (a3[10] & 0x1FFLL);
      if (v31 == v49)
        v59 = 0;
      else
        v59 = ((v31 - *(_QWORD *)v29) >> 3) + ((v29 - v48) << 6) - ((v49 - *(_QWORD *)v48) >> 3);
      if (v46 == v47)
        v60 = 0;
      else
        v60 = *(_QWORD *)v48 + 8 * (a3[10] & 0x1FFLL);
      if (v41 == v60)
        v61 = 0;
      else
        v61 = ((v41 - *(_QWORD *)v40) >> 3) + ((v40 - v48) << 6) - ((v60 - *(_QWORD *)v48) >> 3);
      v62 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
      {
        v76 = *(_QWORD *)(*(_QWORD *)(v47 + (((v59 - 1 + v45) >> 6) & 0x3FFFFFFFFFFFFF8))
                        + 8 * ((v59 - 1 + v45) & 0x1FF));
        v77 = *(_QWORD *)(*(_QWORD *)(v47 + (((v61 - 1 + v45) >> 6) & 0x3FFFFFFFFFFFFF8))
                        + 8 * ((v61 - 1 + v45) & 0x1FF));
        LODWORD(buf.__r_.__value_.__l.__data_) = 134218496;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v76;
        WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
        *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v59 - 1;
        HIWORD(buf.__r_.__value_.__r.__words[2]) = 2048;
        v116 = v77;
        _os_log_debug_impl((void *)&_mh_execute_header, v62, OS_LOG_TYPE_DEBUG, "#sf,RoseEKF: Will propagate using IMU data from t = %f s (index %ld) to t = %f s", (uint8_t *)&buf, 0x20u);
      }
      if (v59 >= 1)
      {
        if (v59 < v61)
        {
          do
          {
            v63 = v59 + a3[4];
            sub_1003B8008(a1, *(_QWORD *)(a3[1] + 8 * ((v63 - 1) / 0x1E)) + 136 * ((v63 - 1) % 0x1E), (double *)(*(_QWORD *)(a3[1] + 8 * (v63 / 0x1E)) + 136 * (v63 % 0x1E)));
            v64 = *(double *)sub_10030E194(v44, 0);
            v65 = *(double *)sub_10030E194(v44, 1u);
            v66 = *(double *)sub_10030E194(v44, 2u);
            sub_1003C2F38(a1 + 8, v64);
            sub_1003C2F38(a1 + 152, v65);
            sub_1003C2F38(a1 + 296, v66);
            ++v59;
          }
          while (v61 != v59);
        }
        sub_1003B97E8(a1, *(_QWORD *)(a3[1] + 8 * ((a3[4] + v61 - 1) / 0x1EuLL)) + 136 * ((a3[4] + v61 - 1) % 0x1EuLL), *(_QWORD *)(a3[1] + 8 * ((a3[4] + v61) / 0x1EuLL)) + 136 * ((a3[4] + v61) % 0x1EuLL), v93[0]);
        sub_1003B76D8(a1);
      }
      sub_1003F1E8C();
    }
    goto LABEL_44;
  }
  if (v31)
  {
    v43 = 0;
    goto LABEL_39;
  }
LABEL_44:
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
    sub_1003F1E28();
  *(_DWORD *)(a1 + 440) = 7;
LABEL_73:
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
    sub_1003F1CC8();
}

void sub_1003C29B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double sub_1003C2A14(uint64_t a1)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;

  v2 = 0;
  *(_QWORD *)(a1 + 872) = *(_QWORD *)(a1 + 448);
  v3 = a1 + 456;
  v4 = a1 + 880;
  v5 = a1 + 544;
  v6 = a1 + 968;
  do
  {
    v7 = *(_QWORD *)sub_10030E194(v3, v2);
    v8 = 0;
    *(_QWORD *)sub_10030E194(v4, v2) = v7;
    do
    {
      v9 = *(_QWORD *)sub_10030E274(v5, v2, v8);
      *(_QWORD *)sub_10030E274(v6, v2, v8++) = v9;
    }
    while (v8 != 6);
    ++v2;
  }
  while (v2 != 6);
  return sub_1003C2EC0(a1);
}

double sub_1003C2AD4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double result;

  v1 = 0;
  v2 = a1 + 80;
  do
  {
    v3 = v2 + v1;
    *(_QWORD *)(v3 - 72) = *(_QWORD *)(v2 + v1 - 24);
    *(_QWORD *)(v3 - 48) = *(_QWORD *)(v2 + v1);
    v1 += 8;
  }
  while (v1 != 24);
  v4 = a1 + 224;
  v5 = -24;
  do
  {
    v6 = v4 + v5;
    *(_QWORD *)(v6 - 48) = *(_QWORD *)(v4 + v5);
    *(_QWORD *)(v6 - 24) = *(_QWORD *)(v4 + v5 + 24);
    v5 += 8;
  }
  while (v5);
  v7 = a1 + 368;
  v8 = -24;
  do
  {
    v9 = v7 + v8;
    *(_QWORD *)(v9 - 48) = *(_QWORD *)(v7 + v8);
    result = *(double *)(v7 + v8 + 24);
    *(double *)(v9 - 24) = result;
    v8 += 8;
  }
  while (v8);
  return result;
}

void sub_1003C2B48(uint64_t a1, double a2, double a3, double a4)
{
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (*(_DWORD *)(a1 + 4))
  {
    v8 = 0;
    v9 = a1 + 8;
    v10 = a1 + 152;
    v11 = a1 + 296;
    do
    {
      sub_1003C2F38(v9, a2);
      sub_1003C2F38(v10, a3);
      sub_1003C2F38(v11, a4);
      ++v8;
    }
    while (v8 < *(_DWORD *)(a1 + 4));
  }
}

void sub_1003C2BDC(uint64_t a1, _QWORD *a2)
{
  unint64_t v4;
  uint64_t v5;
  char *v6;
  double *v7;
  unint64_t v8;
  char *v9;
  double *v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  double v21;
  double v22;
  double v23;
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;
  uint8_t buf[4];
  uint64_t v28;
  __int16 v29;
  uint64_t v30;

  if (*(_BYTE *)(a1 + 444))
  {
    if (sub_1003C8158((uint64_t)a2))
    {
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
        sub_1003F21CC();
    }
    else
    {
      v4 = a2[10];
      v5 = a2[7];
      v6 = (char *)(v5 + 8 * (v4 >> 9));
      if (a2[8] == v5)
      {
        v7 = 0;
        v10 = 0;
        v9 = (char *)(v5 + 8 * ((a2[11] + v4) >> 9));
      }
      else
      {
        v7 = (double *)(*(_QWORD *)v6 + 8 * (a2[10] & 0x1FFLL));
        v8 = a2[11] + v4;
        v9 = (char *)(v5 + 8 * (v8 >> 9));
        v10 = (double *)(*(_QWORD *)v9 + 8 * (v8 & 0x1FF));
      }
      v11 = sub_1003C4330(v6, v7, v9, v10, (double *)(a1 + 448));
      v13 = a2[10];
      v14 = a2[7];
      v15 = (char *)(v14 + 8 * (v13 >> 9));
      if (a2[8] == v14)
        v16 = 0;
      else
        v16 = *(_QWORD *)v15 + 8 * (a2[10] & 0x1FFLL);
      if (v12 == v16
        || (v17 = ((v12 - *(_QWORD *)v11) >> 3) + ((v11 - v15) << 6),
            v18 = v16 - *(_QWORD *)v15,
            v19 = v17 - (v18 >> 3),
            v17 == v18 >> 3))
      {
        v24 = qword_10085F520;
        if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
        {
          v25 = *(_QWORD *)(a1 + 448);
          v26 = *(_QWORD *)(*(_QWORD *)v15 + 8 * (v13 & 0x1FF));
          *(_DWORD *)buf = 134218240;
          v28 = v25;
          v29 = 2048;
          v30 = v26;
          _os_log_error_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "#sf,RoseEKF error: Could not complete dynamic propagation because the filter tries to advance to a new IMUData without a preceding one to interpolate from, Filter time = %f s, new IMU time = %f s", buf, 0x16u);
        }
      }
      else
      {
        if (v19 >= sub_1003C8354((uint64_t)a2))
          return;
        while (1)
        {
          v20 = v19 + a2[4];
          if (!sub_1003B8008(a1, *(_QWORD *)(a2[1] + 8 * ((v20 - 1) / 0x1E)) + 136 * ((v20 - 1) % 0x1E), (double *)(*(_QWORD *)(a2[1] + 8 * (v20 / 0x1E)) + 136 * (v20 % 0x1E))))break;
          v21 = *(double *)sub_10030E194(a1 + 456, 0);
          v22 = *(double *)sub_10030E194(a1 + 456, 1u);
          v23 = *(double *)sub_10030E194(a1 + 456, 2u);
          sub_1003C2F38(a1 + 8, v21);
          sub_1003C2F38(a1 + 152, v22);
          sub_1003C2F38(a1 + 296, v23);
          if (++v19 >= sub_1003C8354((uint64_t)a2))
            return;
        }
      }
      *(_DWORD *)(a1 + 440) = 9;
    }
  }
}

double sub_1003C2EC0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double result;

  v1 = a1 + 56;
  v2 = -24;
  do
  {
    v3 = v1 + v2;
    *(_QWORD *)(v3 + 24) = *(_QWORD *)(v1 + v2 - 24);
    *(_QWORD *)(v3 + 48) = *(_QWORD *)(v1 + v2);
    v2 += 8;
  }
  while (v2);
  v4 = 0;
  v5 = a1 + 152;
  do
  {
    v6 = v5 + v4;
    *(_QWORD *)(v6 + 48) = *(_QWORD *)(v5 + v4);
    *(_QWORD *)(v6 + 72) = *(_QWORD *)(v5 + v4 + 24);
    v4 += 8;
  }
  while (v4 != 24);
  v7 = 0;
  v8 = a1 + 296;
  do
  {
    v9 = v8 + v7;
    *(_QWORD *)(v9 + 48) = *(_QWORD *)(v8 + v7);
    result = *(double *)(v8 + v7 + 24);
    *(double *)(v9 + 72) = result;
    v7 += 8;
  }
  while (v7 != 24);
  return result;
}

double sub_1003C2F38(uint64_t a1, double a2)
{
  uint64_t v2;
  double v3;

  v2 = 0;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)a1;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 24);
  *(double *)a1 = a2;
  v3 = 0.0;
  do
  {
    if (v2)
      v3 = v3
         + *(double *)(a1 + 96 + v2 + 24) * *(double *)(a1 + v2)
         - *(double *)(a1 + 96 + v2) * *(double *)(a1 + 96 + v2 - 72);
    else
      v3 = v3 + *(double *)(a1 + 120) * a2;
    v2 += 8;
  }
  while (v2 != 24);
  *(double *)(a1 + 24) = v3;
  return v3;
}

uint64_t sub_1003C2FA0(uint64_t result, unsigned int a2, unsigned int a3)
{
  const char *v3;
  int v4;

  *(_QWORD *)(result + 24) = 0x600000006;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = off_100818868;
  if (a2 > 6)
  {
    v3 = "this->max_num_rows_ >= num_rows";
    v4 = 422;
    goto LABEL_6;
  }
  if (a3 >= 7)
  {
    v3 = "this->max_num_cols_ >= num_cols";
    v4 = 423;
LABEL_6:
    __assert_rtn("SetMatrixSize", "cnmatrixbase.h", v4, v3);
  }
  *(_DWORD *)(result + 8) = a2;
  *(_DWORD *)(result + 12) = a3;
  *(_DWORD *)(result + 16) = a3 * a2;
  *(_DWORD *)(result + 20) = a2;
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_1003C3034(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = off_100807398;
  _Unwind_Resume(a1);
}

_DWORD *sub_1003C3044(int a1, int a2, _DWORD *a3)
{
  int v4;
  int v6;
  _DWORD *result;
  int v8;
  unsigned int v9;

  if (!a3[6])
    sub_1003F21F8();
  v4 = a3[7];
  if (!v4)
    sub_1003F2220();
  v6 = a2 - a1;
  if (a2 == a1)
  {
    sub_10030DD0C(a3, 1, 1);
    result = (_DWORD *)sub_1003C316C((uint64_t)a3, 0);
    *result = a1;
  }
  else if (a2 - a1 < 0)
  {
    return sub_10030DD0C(a3, 0, 0);
  }
  else
  {
    if (v4 <= v6)
      sub_1003F2248();
    v8 = v6 + 1;
    sub_10030DD0C(a3, 1, v6 + 1);
    v9 = 0;
    do
    {
      result = (_DWORD *)sub_1003C316C((uint64_t)a3, v9);
      *result = a1 + v9++;
    }
    while (v8 != v9);
  }
  return result;
}

void sub_1003C3120(_QWORD *a1)
{
  *a1 = off_100815C00;
  operator delete();
}

uint64_t sub_1003C3140(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_1003C314C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3[3];

  sub_10031CA0C(a1, v3, a3);
}

uint64_t sub_1003C316C(uint64_t a1, unsigned int a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 32);
  if (!v2)
    sub_1003F2270();
  if ((a2 & 0x80000000) != 0)
    sub_1003F2298();
  if (*(_DWORD *)(a1 + 16) <= (signed int)a2)
    sub_1003F22C0();
  return v2 + 4 * a2;
}

uint64_t sub_1003C31A4(uint64_t result, unsigned int a2, unsigned int a3)
{
  const char *v3;
  int v4;
  const char *v5;
  const char *v6;

  *(_QWORD *)(result + 24) = 0x100000003;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = off_1008156E8;
  if ((a3 & 0x80000000) != 0)
  {
    v3 = "nc >= 0";
    v4 = 487;
    v5 = "cnmatrix.h";
    v6 = "CNMatrix";
    goto LABEL_9;
  }
  if (a2 > 3)
  {
    v3 = "this->max_num_rows_ >= num_rows";
    v4 = 422;
LABEL_8:
    v5 = "cnmatrixbase.h";
    v6 = "SetMatrixSize";
LABEL_9:
    __assert_rtn(v6, v5, v4, v3);
  }
  if (a3 >= 2)
  {
    v3 = "this->max_num_cols_ >= num_cols";
    v4 = 423;
    goto LABEL_8;
  }
  *(_DWORD *)(result + 8) = a2;
  *(_DWORD *)(result + 12) = a3;
  *(_DWORD *)(result + 16) = a3 * a2;
  *(_DWORD *)(result + 20) = a2;
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_1003C3260(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = off_100807398;
  _Unwind_Resume(a1);
}

uint64_t sub_1003C3270(uint64_t a1, unsigned int a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 32);
  if (!v2)
    sub_1003E3A4C();
  if ((a2 & 0x80000000) != 0)
    sub_1003E3A74();
  if (*(_DWORD *)(a1 + 16) <= (signed int)a2)
    sub_1003E3A9C();
  return *(unsigned int *)(v2 + 4 * a2);
}

void sub_1003C32A8(_QWORD *a1)
{
  *a1 = off_100815C00;
  operator delete();
}

uint64_t sub_1003C32C8(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_1003C32D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3[12];

  sub_10031CA0C(a1, v3, a3);
}

void sub_1003C3320(_QWORD *a1)
{
  *a1 = off_100815C00;
  operator delete();
}

uint64_t sub_1003C3340(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_1003C334C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3[6];

  sub_10031CA0C(a1, v3, a3);
}

void sub_1003C336C(_QWORD *a1)
{
  *a1 = off_100815C00;
  operator delete();
}

uint64_t sub_1003C338C(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_1003C3398(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3[2];

  sub_10031CA0C(a1, v3, a3);
}

uint64_t sub_1003C33B8(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  unsigned int v5;
  int v6;
  uint64_t v7;
  const char *v9;
  int v10;
  const char *v11;
  const char *v12;

  *(_QWORD *)(a1 + 24) = 0x100000006;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = off_1008188B0;
  v3 = *(_DWORD *)(a2 + 8);
  if (v3 > 6)
  {
    v9 = "this->max_num_rows_ >= num_rows";
    v10 = 422;
LABEL_11:
    v11 = "cnmatrixbase.h";
    v12 = "SetMatrixSize";
    goto LABEL_15;
  }
  v5 = *(_DWORD *)(a2 + 12);
  if (v5 >= 2)
  {
    v9 = "this->max_num_cols_ >= num_cols";
    v10 = 423;
    goto LABEL_11;
  }
  *(_DWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 12) = v5;
  v6 = v5 * v3;
  *(_DWORD *)(a1 + 16) = v6;
  *(_DWORD *)(a1 + 20) = v3;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  if (*(_DWORD *)(a2 + 8) > 6u)
  {
    v9 = "this->max_num_rows_ >= A.NumRows()";
    v10 = 567;
LABEL_14:
    v11 = "cnmatrix.h";
    v12 = "CNMatrix";
LABEL_15:
    __assert_rtn(v12, v11, v10, v9);
  }
  if (*(_DWORD *)(a2 + 12) > 1u)
  {
    v9 = "this->max_num_cols_ >= A.NumCols()";
    v10 = 568;
    goto LABEL_14;
  }
  if (v6)
  {
    v7 = 0;
    do
    {
      *(double *)(*(_QWORD *)(a1 + 32) + 8 * v7) = sub_1003C34EC(a2, v7);
      ++v7;
    }
    while (v7 < *(int *)(a1 + 16));
  }
  return a1;
}

void sub_1003C34D8(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = off_100807398;
  _Unwind_Resume(a1);
}

double sub_1003C34EC(uint64_t a1, unsigned int a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 32);
  if (!v2)
    sub_1003F22E8();
  if ((a2 & 0x80000000) != 0)
    sub_1003F2310();
  if (*(_DWORD *)(a1 + 16) <= (signed int)a2)
    sub_1003F2338();
  return *(double *)(v2 + 8 * a2);
}

_QWORD *sub_1003C3524(_QWORD *a1)
{
  uint64_t v2;

  *a1 = off_100818AA8;
  v2 = a1[5];
  a1[5] = 0;
  if (v2)
    operator delete[]();
  *a1 = off_100807398;
  return a1;
}

void sub_1003C357C(uint64_t a1)
{
  *(_QWORD *)(a1 + 24) = 0x100000245;
  *(_QWORD *)a1 = off_100818AA8;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 8) = xmmword_10072BE60;
  sub_1003C369C();
}

void sub_1003C35D0(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v3;

  v3 = v1[5];
  v1[5] = 0;
  if (v3)
    operator delete[]();
  *v1 = off_100807398;
  _Unwind_Resume(exception_object);
}

void sub_1003C3608(_QWORD *a1)
{
  uint64_t v2;

  *a1 = off_100818AA8;
  v2 = a1[5];
  a1[5] = 0;
  if (v2)
    operator delete[]();
  *a1 = off_100807398;
  operator delete();
}

void sub_1003C3670()
{
  sub_1003C369C();
}

void sub_1003C369C()
{
  operator new[]();
}

void sub_1003C3708()
{
  operator new[]();
}

void sub_1003C3768()
{
  operator delete[]();
}

void sub_1003C378C(_QWORD *a1)
{
  *a1 = off_100807398;
  operator delete();
}

uint64_t sub_1003C37AC(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_1003C37B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3[72];

  sub_10030DC3C(a1, v3, a3);
}

void sub_1003C3804(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int v5;
  uint64_t v8;
  __CLPK_integer v9;
  __CLPK_doublereal *v10;
  __CLPK_integer v11;
  void *v12;
  size_t v13;
  __CLPK_integer *v14;
  __CLPK_integer *v15;
  __CLPK_integer __n[2];
  __CLPK_integer __m[2];
  __CLPK_integer __info;
  __CLPK_integer __lda;

  v5 = *(_DWORD *)(a1 + 8);
  if (v5 == *(_DWORD *)(a1 + 12))
  {
    if (*(_DWORD *)(a2 + 28) * *(_DWORD *)(a2 + 24) >= v5)
    {
      if (*(_DWORD *)(a3 + 28) * *(_DWORD *)(a3 + 24) >= v5)
      {
        if (*(_DWORD *)(a4 + 28) * *(_DWORD *)(a4 + 24) >= 4 * v5)
        {
          if (*(_DWORD *)(a5 + 24) >= v5)
          {
            if (*(_DWORD *)(a5 + 28) >= v5)
            {
              sub_10030EC4C(a5, a1);
              v8 = *(unsigned int *)(a5 + 8);
              v9 = *(_DWORD *)(a5 + 12);
              v10 = *(__CLPK_doublereal **)(a5 + 32);
              v11 = *(_DWORD *)(a5 + 20);
              v12 = *(void **)(a2 + 32);
              __m[0] = v8;
              __n[0] = v9;
              __lda = v11;
              if ((int)v8 >= 1)
              {
                v13 = 4 * v8;
                v14 = (__CLPK_integer *)operator new[](4 * v8, &std::nothrow);
                if (v14)
                {
                  v15 = v14;
                  __info = 0;
                  dgetrf_(__m, __n, v10, &__lda, v14, &__info);
                  memcpy(v12, v15, v13);
                  operator delete[]();
                }
                sub_1003F2450();
              }
              sub_1003F2450();
            }
            sub_1003F2428();
          }
          sub_1003F2400();
        }
        sub_1003F23D8();
      }
      sub_1003F23B0();
    }
    sub_1003F2388();
  }
  sub_1003F24F0();
}

uint64_t sub_1003C3C30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t i;
  uint64_t j;
  const char *v14;
  int v15;

  *(_QWORD *)(a1 + 24) = 0x100000003;
  *(_OWORD *)(a1 + 8) = xmmword_100478880;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  *(_QWORD *)a1 = off_100818B38;
  *(_QWORD *)(a1 + 64) = a2;
  *(_QWORD *)(a1 + 96) = 0x300000001;
  *(_QWORD *)(a1 + 72) = off_100818988;
  *(_OWORD *)(a1 + 80) = xmmword_1004794B0;
  *(_QWORD *)(a1 + 104) = a1 + 112;
  *(_QWORD *)(a1 + 128) = off_1008166A8;
  *(_QWORD *)(a1 + 152) = 0x100000001;
  *(_QWORD *)&v7 = 0x100000001;
  *((_QWORD *)&v7 + 1) = 0x100000001;
  *(_OWORD *)(a1 + 136) = v7;
  *(_QWORD *)(a1 + 160) = a1 + 168;
  sub_1003C3E14(a1 + 72, a3);
  sub_1003C3E14(a1 + 128, a4);
  v8 = *(unsigned int *)(a1 + 88);
  if (*(_DWORD *)(a1 + 24) < v8)
  {
    v14 = "this->max_num_rows_ >= num_rows";
    v15 = 422;
    goto LABEL_12;
  }
  v9 = *(unsigned int *)(a1 + 144);
  if (*(_DWORD *)(a1 + 28) < v9)
  {
    v14 = "this->max_num_cols_ >= num_cols";
    v15 = 423;
LABEL_12:
    __assert_rtn("SetMatrixSize", "cnmatrixbase.h", v15, v14);
  }
  *(_DWORD *)(a1 + 8) = v8;
  *(_DWORD *)(a1 + 12) = v9;
  *(_DWORD *)(a1 + 16) = v9 * v8;
  *(_DWORD *)(a1 + 20) = v8;
  if ((_DWORD)v9)
  {
    v10 = 0;
    for (i = 0; i != v9; ++i)
    {
      if ((_DWORD)v8)
      {
        for (j = 0; j != v8; ++j)
          *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * (v10 + j)) = *(_QWORD *)sub_100346AA0(a2, *(_DWORD *)(*(_QWORD *)(a1 + 104) + 4 * j), *(_DWORD *)(*(_QWORD *)(a1 + 160) + 4 * i));
      }
      v10 += v8;
    }
  }
  return a1;
}

void sub_1003C3DC0(_Unwind_Exception *a1)
{
  _QWORD *v1;

  v1[16] = off_100815C00;
  v1[9] = off_100815C00;
  *v1 = off_100807398;
  _Unwind_Resume(a1);
}

void sub_1003C3DE4(_QWORD *a1)
{
  a1[16] = off_100815C00;
  a1[9] = off_100815C00;
  *a1 = off_100807398;
  operator delete();
}

uint64_t sub_1003C3E14(uint64_t result, uint64_t a2)
{
  unsigned int v2;
  unsigned int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  int *v11;
  uint64_t v12;
  _DWORD *v13;
  int *v14;
  int v15;

  if (result != a2)
  {
    v2 = *(_DWORD *)(a2 + 8);
    if (*(_DWORD *)(result + 24) < v2)
      sub_1003EBAB8();
    v3 = *(_DWORD *)(a2 + 12);
    if (*(_DWORD *)(result + 28) < v3)
      sub_1003EBAE0();
    *(_DWORD *)(result + 8) = v2;
    *(_DWORD *)(result + 12) = v3;
    v4 = v3 * v2;
    *(_DWORD *)(result + 16) = v4;
    *(_DWORD *)(result + 20) = v2;
    v5 = *(_DWORD *)(a2 + 16);
    if (v5 > 3)
    {
      v9 = (v5 - 1);
      v10 = *(_DWORD **)(result + 32);
      v11 = *(int **)(a2 + 32);
      v12 = v9;
      v13 = v10;
      v14 = v11;
      do
      {
        v15 = *v14++;
        *v13++ = v15;
        --v12;
      }
      while (v12);
      v10[v9] = v11[v9];
    }
    else if (v4 >= 1)
    {
      v6 = 0;
      v7 = *(_QWORD *)(a2 + 32);
      v8 = *(_QWORD *)(result + 32);
      do
      {
        *(_DWORD *)(v8 + 4 * v6) = *(_DWORD *)(v7 + 4 * v6);
        ++v6;
      }
      while (v6 < *(int *)(result + 16));
    }
  }
  return result;
}

float64x2_t sub_1003C3ECC(uint64_t a1, uint64_t a2, double a3)
{
  float64x2_t result;
  uint64_t v6;
  double *v7;
  double *v8;
  uint64_t v9;
  double v10;
  double *v11;
  double *v12;
  double v13;
  float64x2_t *v14;
  float64x2_t *v15;
  float64x2_t *v16;
  float64x2_t *v17;
  uint64_t v18;
  float64x2_t v19;

  if (a1 == a2)
    sub_1003F2518();
  sub_10030DD0C((_DWORD *)a2, *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12));
  v6 = *(unsigned int *)(a2 + 16);
  if ((int)v6 >= 1)
  {
    v7 = *(double **)(a1 + 32);
    v8 = *(double **)(a2 + 32);
    v9 = *(unsigned int *)(a2 + 16);
    do
    {
      v10 = *v7++;
      *v8++ = v10 * a3;
      --v9;
    }
    while (v9);
    if ((int)v6 > 3)
    {
      v14 = *(float64x2_t **)(a1 + 32);
      v15 = *(float64x2_t **)(a2 + 32);
      v16 = (float64x2_t *)((char *)v14 + 8 * (v6 - 2));
      v17 = (float64x2_t *)((char *)v15 + 8 * (v6 - 2));
      v18 = (v6 - 1) >> 1;
      do
      {
        v19 = *v14++;
        *v15++ = vmulq_n_f64(v19, a3);
        --v18;
      }
      while (v18);
      result = vmulq_n_f64(*v16, a3);
      *v17 = result;
    }
    else
    {
      v11 = *(double **)(a1 + 32);
      v12 = *(double **)(a2 + 32);
      do
      {
        v13 = *v11++;
        result.f64[0] = v13 * a3;
        *v12++ = v13 * a3;
        --v6;
      }
      while (v6);
    }
  }
  return result;
}

uint64_t sub_1003C3FA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t i;
  uint64_t j;
  const char *v13;
  int v14;

  *(_QWORD *)(a1 + 24) = 0x300000003;
  *(_OWORD *)(a1 + 8) = xmmword_100478B80;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  *(_QWORD *)a1 = off_100818B80;
  *(_QWORD *)(a1 + 112) = a2;
  *(_QWORD *)(a1 + 144) = 0x300000001;
  *(_QWORD *)(a1 + 120) = off_100818988;
  *(_OWORD *)(a1 + 128) = xmmword_1004794B0;
  *(_QWORD *)(a1 + 152) = a1 + 160;
  *(_QWORD *)(a1 + 176) = off_100818988;
  *(_QWORD *)(a1 + 200) = 0x300000001;
  *(_OWORD *)(a1 + 184) = xmmword_1004794B0;
  *(_QWORD *)(a1 + 208) = a1 + 216;
  sub_1003C3E14(a1 + 120, a3);
  sub_1003C3E14(a1 + 176, a4);
  v7 = *(unsigned int *)(a1 + 136);
  if (*(_DWORD *)(a1 + 24) < v7)
  {
    v13 = "this->max_num_rows_ >= num_rows";
    v14 = 422;
    goto LABEL_12;
  }
  v8 = *(unsigned int *)(a1 + 192);
  if (*(_DWORD *)(a1 + 28) < v8)
  {
    v13 = "this->max_num_cols_ >= num_cols";
    v14 = 423;
LABEL_12:
    __assert_rtn("SetMatrixSize", "cnmatrixbase.h", v14, v13);
  }
  *(_DWORD *)(a1 + 8) = v7;
  *(_DWORD *)(a1 + 12) = v8;
  *(_DWORD *)(a1 + 16) = v8 * v7;
  *(_DWORD *)(a1 + 20) = v7;
  if ((_DWORD)v8)
  {
    v9 = 0;
    for (i = 0; i != v8; ++i)
    {
      if ((_DWORD)v7)
      {
        for (j = 0; j != v7; ++j)
          *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * (v9 + j)) = *(_QWORD *)sub_100346AA0(a2, *(_DWORD *)(*(_QWORD *)(a1 + 152) + 4 * j), *(_DWORD *)(*(_QWORD *)(a1 + 208) + 4 * i));
      }
      v9 += v7;
    }
  }
  return a1;
}

void sub_1003C4120(_Unwind_Exception *a1)
{
  _QWORD *v1;

  v1[22] = off_100815C00;
  v1[15] = off_100815C00;
  *v1 = off_100807398;
  _Unwind_Resume(a1);
}

void sub_1003C4144(_QWORD *a1)
{
  a1[22] = off_100815C00;
  a1[15] = off_100815C00;
  *a1 = off_100807398;
  operator delete();
}

float64x2_t sub_1003C4174(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  float64x2_t result;
  uint64_t v8;
  double *v9;
  double *v10;
  double v11;
  float64x2_t *v12;
  float64x2_t *v13;
  float64x2_t *v14;
  float64x2_t *v15;
  uint64_t v16;
  float64x2_t v17;

  if (a1 == a2)
    sub_1003F2540();
  v4 = *(_DWORD *)(a2 + 24);
  v5 = *(_DWORD *)(a1 + 8);
  if (v4 < v5)
    sub_1003F2568();
  v6 = *(_DWORD *)(a1 + 12);
  if (*(_DWORD *)(a2 + 28) < v6)
    sub_1003F2590();
  sub_10030DD0C((_DWORD *)a2, v5, v6);
  v8 = *(unsigned int *)(a2 + 16);
  if ((int)v8 > 3)
  {
    v12 = *(float64x2_t **)(a1 + 32);
    v13 = *(float64x2_t **)(a2 + 32);
    v14 = (float64x2_t *)((char *)v12 + 8 * (v8 - 2));
    v15 = (float64x2_t *)((char *)v13 + 8 * (v8 - 2));
    v16 = (v8 - 1) >> 1;
    do
    {
      v17 = *v12++;
      *v13++ = vnegq_f64(v17);
      --v16;
    }
    while (v16);
    result = vnegq_f64(*v14);
    *v15 = result;
  }
  else if ((int)v8 >= 1)
  {
    v9 = *(double **)(a1 + 32);
    v10 = *(double **)(a2 + 32);
    do
    {
      v11 = *v9++;
      result.f64[0] = -v11;
      *v10++ = -v11;
      --v8;
    }
    while (v8);
  }
  return result;
}

void sub_1003C4240(_QWORD *a1)
{
  *a1 = off_100807398;
  operator delete();
}

uint64_t sub_1003C4260(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_1003C426C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3[18];

  sub_10030DC3C(a1, v3, a3);
}

void sub_1003C42B8(_QWORD *a1)
{
  *a1 = off_100807398;
  operator delete();
}

uint64_t sub_1003C42D8(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_1003C42E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3[18];

  sub_10030DC3C(a1, v3, a3);
}

char *sub_1003C4330(char *result, double *a2, char *a3, double *a4, double *a5)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v9;
  char *v10;
  double *v11;
  double *v12;
  double *v13;
  char *v14;
  double *v15;

  v14 = result;
  v15 = a2;
  if (a4 != a2)
  {
    v5 = (((uint64_t)a4 - *(_QWORD *)a3) >> 3) + ((a3 - result) << 6);
    v6 = (uint64_t)a2 - *(_QWORD *)result;
    v7 = v5 - (v6 >> 3);
    if (v5 != v6 >> 3)
    {
      do
      {
        v9 = v7 >> 1;
        v10 = (char *)sub_1003B018C((uint64_t)&v14, v7 >> 1);
        if (*a5 >= *v11)
        {
          v12 = v11 + 1;
          if ((double *)((char *)v11 - *(_QWORD *)v10 + 8) == (double *)4096)
          {
            v13 = (double *)*((_QWORD *)v10 + 1);
            v10 += 8;
            v12 = v13;
          }
          v14 = v10;
          v15 = v12;
          v9 = v7 + ~v9;
        }
        v7 = v9;
      }
      while (v9);
      return v14;
    }
  }
  return result;
}

void sub_1003C43DC(_QWORD *a1)
{
  *a1 = off_100807398;
  operator delete();
}

uint64_t sub_1003C43FC(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_1003C4408(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3[144];

  sub_10030DC3C(a1, v3, a3);
}

void sub_1003C4454(_QWORD *a1)
{
  *a1 = off_100807398;
  operator delete();
}

uint64_t sub_1003C4474(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_1003C4480(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3[72];

  sub_10030DC3C(a1, v3, a3);
}

uint64_t sub_1003C44CC(uint64_t a1, uint64_t a2, BOOL *a3)
{
  unsigned int v3;
  unsigned int v6;
  __CLPK_doublereal *v7;
  __CLPK_integer v8;
  uint64_t result;
  __CLPK_integer v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  int v14;
  int v15;
  unsigned int v16;
  __CLPK_integer __info;
  __CLPK_integer __lda;
  __CLPK_integer __n;
  char __uplo;

  v3 = *(_DWORD *)(a1 + 8);
  if (v3 != *(_DWORD *)(a1 + 12))
    sub_1003F2608();
  if (*(_DWORD *)(a2 + 24) < v3)
    sub_1003F25B8();
  if (*(_DWORD *)(a2 + 28) < v3)
    sub_1003F25E0();
  sub_10030EC4C(a2, a1);
  v6 = *(_DWORD *)(a2 + 12);
  v7 = *(__CLPK_doublereal **)(a2 + 32);
  v8 = *(_DWORD *)(a2 + 20);
  __uplo = 85;
  __lda = v8;
  __n = v6;
  __info = 0;
  result = dpotrf_(&__uplo, &__n, v7, &__lda, &__info);
  v10 = __info;
  *a3 = __info == 0;
  if (v10)
  {
    LOWORD(__n) = 4;
    if (v10 < 1)
      LOBYTE(__lda) = 5;
    else
      LOBYTE(__lda) = 4;
    return cnprint::CNPrinter::Print(&__n, &__lda);
  }
  else if (v6)
  {
    v11 = 0;
    v12 = *(_QWORD *)(a2 + 32);
    v13 = v6 - 1;
    v14 = 1;
    do
    {
      ++v11;
      v15 = v14;
      v16 = v13;
      if (v11 < v6)
      {
        do
        {
          *(_QWORD *)(v12 + 8 * v15++) = 0;
          --v16;
        }
        while (v16);
      }
      --v13;
      v14 += v6 + 1;
    }
    while (v11 != v6);
  }
  return result;
}

void sub_1003C4618(_QWORD *a1)
{
  *a1 = off_100807398;
  operator delete();
}

uint64_t sub_1003C4638(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_1003C4644(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3[324];

  sub_10030DC3C(a1, v3, a3);
}

uint64_t sub_1003C4698(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t i;
  uint64_t j;
  const char *v14;
  int v15;

  *(_QWORD *)(a1 + 24) = 0xC0000000CLL;
  *(_OWORD *)(a1 + 8) = xmmword_10072BD70;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  *(_QWORD *)a1 = off_100818D30;
  *(_QWORD *)(a1 + 1192) = a2;
  v7 = a1 + 1200;
  *(_QWORD *)(a1 + 1224) = 0xC00000001;
  *(_QWORD *)(a1 + 1200) = off_1008189D0;
  *(_OWORD *)(v7 + 8) = xmmword_10072BE70;
  *(_QWORD *)(a1 + 1232) = a1 + 1240;
  *(_QWORD *)(a1 + 1312) = 0xC00000001;
  *(_QWORD *)(a1 + 1288) = off_1008189D0;
  *(_OWORD *)(a1 + 1296) = xmmword_10072BE70;
  *(_QWORD *)(a1 + 1320) = a1 + 1328;
  sub_1003C3E14(v7, a3);
  sub_1003C3E14(a1 + 1288, a4);
  v8 = *(unsigned int *)(a1 + 1216);
  if (*(_DWORD *)(a1 + 24) < v8)
  {
    v14 = "this->max_num_rows_ >= num_rows";
    v15 = 422;
    goto LABEL_12;
  }
  v9 = *(unsigned int *)(a1 + 1304);
  if (*(_DWORD *)(a1 + 28) < v9)
  {
    v14 = "this->max_num_cols_ >= num_cols";
    v15 = 423;
LABEL_12:
    __assert_rtn("SetMatrixSize", "cnmatrixbase.h", v15, v14);
  }
  *(_DWORD *)(a1 + 8) = v8;
  *(_DWORD *)(a1 + 12) = v9;
  *(_DWORD *)(a1 + 16) = v9 * v8;
  *(_DWORD *)(a1 + 20) = v8;
  if ((_DWORD)v9)
  {
    v10 = 0;
    for (i = 0; i != v9; ++i)
    {
      if ((_DWORD)v8)
      {
        for (j = 0; j != v8; ++j)
          *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * (v10 + j)) = *(_QWORD *)sub_100346AA0(a2, *(_DWORD *)(*(_QWORD *)(a1 + 1232) + 4 * j), *(_DWORD *)(*(_QWORD *)(a1 + 1320) + 4 * i));
      }
      v10 += v8;
    }
  }
  return a1;
}

void sub_1003C4814(_Unwind_Exception *a1)
{
  _QWORD *v1;

  v1[161] = off_100815C00;
  v1[150] = off_100815C00;
  *v1 = off_100807398;
  _Unwind_Resume(a1);
}

void sub_1003C4838(_QWORD *a1)
{
  a1[161] = off_100815C00;
  a1[150] = off_100815C00;
  *a1 = off_100807398;
  operator delete();
}

uint64_t sub_1003C4868(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t i;
  uint64_t j;
  const char *v13;
  int v14;

  *(_QWORD *)(a1 + 24) = 0xC00000006;
  *(_OWORD *)(a1 + 8) = xmmword_10072BD60;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  *(_QWORD *)a1 = off_100818D78;
  *(_QWORD *)(a1 + 616) = a2;
  *(_QWORD *)(a1 + 648) = 0x600000001;
  *(_QWORD *)(a1 + 624) = off_100818A18;
  *(_OWORD *)(a1 + 632) = xmmword_10072BDB0;
  *(_QWORD *)(a1 + 656) = a1 + 664;
  *(_QWORD *)(a1 + 712) = 0xC00000001;
  *(_QWORD *)(a1 + 688) = off_1008189D0;
  *(_OWORD *)(a1 + 696) = xmmword_10072BE70;
  *(_QWORD *)(a1 + 720) = a1 + 728;
  sub_1003C3E14(a1 + 624, a3);
  sub_1003C3E14(a1 + 688, a4);
  v7 = *(unsigned int *)(a1 + 640);
  if (*(_DWORD *)(a1 + 24) < v7)
  {
    v13 = "this->max_num_rows_ >= num_rows";
    v14 = 422;
    goto LABEL_12;
  }
  v8 = *(unsigned int *)(a1 + 704);
  if (*(_DWORD *)(a1 + 28) < v8)
  {
    v13 = "this->max_num_cols_ >= num_cols";
    v14 = 423;
LABEL_12:
    __assert_rtn("SetMatrixSize", "cnmatrixbase.h", v14, v13);
  }
  *(_DWORD *)(a1 + 8) = v7;
  *(_DWORD *)(a1 + 12) = v8;
  *(_DWORD *)(a1 + 16) = v8 * v7;
  *(_DWORD *)(a1 + 20) = v7;
  if ((_DWORD)v8)
  {
    v9 = 0;
    for (i = 0; i != v8; ++i)
    {
      if ((_DWORD)v7)
      {
        for (j = 0; j != v7; ++j)
          *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * (v9 + j)) = *(_QWORD *)sub_100346AA0(a2, *(_DWORD *)(*(_QWORD *)(a1 + 656) + 4 * j), *(_DWORD *)(*(_QWORD *)(a1 + 720) + 4 * i));
      }
      v9 += v7;
    }
  }
  return a1;
}

void sub_1003C4A04(_Unwind_Exception *a1)
{
  _QWORD *v1;

  v1[86] = off_100815C00;
  v1[78] = off_100815C00;
  *v1 = off_100807398;
  _Unwind_Resume(a1);
}

void sub_1003C4A28(_QWORD *a1)
{
  a1[86] = off_100815C00;
  a1[78] = off_100815C00;
  *a1 = off_100807398;
  operator delete();
}

uint64_t sub_1003C4A58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t i;
  uint64_t j;
  const char *v13;
  int v14;

  *(_QWORD *)(a1 + 24) = 0x600000006;
  *(_OWORD *)(a1 + 8) = xmmword_10072BBA0;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  *(_QWORD *)a1 = off_100818DC0;
  *(_QWORD *)(a1 + 360) = 0x600000001;
  *(_QWORD *)(a1 + 328) = a2;
  *(_QWORD *)(a1 + 336) = off_100818A18;
  *(_OWORD *)(a1 + 344) = xmmword_10072BDB0;
  *(_QWORD *)(a1 + 368) = a1 + 376;
  *(_QWORD *)(a1 + 424) = 0x600000001;
  *(_QWORD *)(a1 + 400) = off_100818A18;
  *(_OWORD *)(a1 + 408) = xmmword_10072BDB0;
  *(_QWORD *)(a1 + 432) = a1 + 440;
  sub_1003C3E14(a1 + 336, a3);
  sub_1003C3E14(a1 + 400, a4);
  v7 = *(unsigned int *)(a1 + 352);
  if (*(_DWORD *)(a1 + 24) < v7)
  {
    v13 = "this->max_num_rows_ >= num_rows";
    v14 = 422;
    goto LABEL_12;
  }
  v8 = *(unsigned int *)(a1 + 416);
  if (*(_DWORD *)(a1 + 28) < v8)
  {
    v13 = "this->max_num_cols_ >= num_cols";
    v14 = 423;
LABEL_12:
    __assert_rtn("SetMatrixSize", "cnmatrixbase.h", v14, v13);
  }
  *(_DWORD *)(a1 + 8) = v7;
  *(_DWORD *)(a1 + 12) = v8;
  *(_DWORD *)(a1 + 16) = v8 * v7;
  *(_DWORD *)(a1 + 20) = v7;
  if ((_DWORD)v8)
  {
    v9 = 0;
    for (i = 0; i != v8; ++i)
    {
      if ((_DWORD)v7)
      {
        for (j = 0; j != v7; ++j)
          *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * (v9 + j)) = *(_QWORD *)sub_100346AA0(a2, *(_DWORD *)(*(_QWORD *)(a1 + 368) + 4 * j), *(_DWORD *)(*(_QWORD *)(a1 + 432) + 4 * i));
      }
      v9 += v7;
    }
  }
  return a1;
}

void sub_1003C4BD4(_Unwind_Exception *a1)
{
  _QWORD *v1;

  v1[50] = off_100815C00;
  v1[42] = off_100815C00;
  *v1 = off_100807398;
  _Unwind_Resume(a1);
}

void sub_1003C4BF8(_QWORD *a1)
{
  a1[50] = off_100815C00;
  a1[42] = off_100815C00;
  *a1 = off_100807398;
  operator delete();
}

_DWORD *sub_1003C4C28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  __CLPK_integer v11;
  __CLPK_doublereal *v12;
  __CLPK_integer v13;
  __CLPK_doublereal *v14;
  __CLPK_doublereal *v15;
  __CLPK_integer v16;
  cnprint::CNPrinter *v17;
  __CLPK_integer v18;
  int v19;
  _DWORD *result;
  int v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int v25;
  int v26;
  int v27;
  int v28;
  unsigned int v29;
  __CLPK_integer __info;
  __CLPK_integer __lwork;
  __CLPK_integer __lda;
  __CLPK_integer __n;
  __CLPK_integer __m;

  if (a1 == a2)
    sub_1003F2630();
  if (a1 == a3)
    sub_1003F2658();
  if (a1 == a4)
    sub_1003F2680();
  if (a2 == a3)
    sub_1003F26A8();
  if (a2 == a4)
    sub_1003F26D0();
  if (a3 == a4)
    sub_1003F26F8();
  v8 = *(_DWORD *)(a1 + 8);
  if (*(_DWORD *)(a4 + 24) < v8)
    sub_1003F2720();
  v9 = *(_DWORD *)(a1 + 12);
  if (*(_DWORD *)(a4 + 28) < v9)
    sub_1003F2748();
  v10 = *(_DWORD *)(a2 + 24);
  if (v8 >= v9)
  {
    if (v10 < v9)
      sub_1003F2810();
  }
  else if (v10 < v8)
  {
    sub_1003F2770();
  }
  if (*(_DWORD *)(a3 + 24) < v9)
    sub_1003F2798();
  if (*(_DWORD *)(a3 + 28) < v9)
    sub_1003F27C0();
  sub_10030EC4C(a4, a1);
  v11 = *(_DWORD *)(a4 + 8);
  v12 = *(__CLPK_doublereal **)(a4 + 32);
  v13 = *(_DWORD *)(a4 + 20);
  v14 = *(__CLPK_doublereal **)(a2 + 32);
  v15 = *(__CLPK_doublereal **)(a3 + 32);
  v16 = *(_DWORD *)(a3 + 28) * *(_DWORD *)(a3 + 24);
  __n = *(_DWORD *)(a4 + 12);
  __m = v11;
  __lwork = v16;
  __lda = v13;
  __info = 0;
  v17 = (cnprint::CNPrinter *)dgeqrf_(&__m, &__n, v12, &__lda, v14, v15, &__lwork, &__info);
  v18 = __info;
  if (__info)
  {
    LOWORD(__m) = 4;
    LOBYTE(__n) = 5;
    v17 = (cnprint::CNPrinter *)cnprint::CNPrinter::Print(&__m, &__n);
  }
  if (v16 < (int)**(double **)(a3 + 32) && cnprint::CNPrinter::GetLogLevel(v17) <= 1)
  {
    LOWORD(__m) = 4;
    LOBYTE(__n) = 1;
    cnprint::CNPrinter::Print(&__m, &__n);
  }
  if (v18)
    sub_1003F27E8();
  if (*(_DWORD *)(a1 + 8) >= *(_DWORD *)(a1 + 12))
    v19 = *(_DWORD *)(a1 + 12);
  else
    v19 = *(_DWORD *)(a1 + 8);
  sub_10030DD0C((_DWORD *)a2, v19, 1);
  result = sub_10030DD0C((_DWORD *)a3, *(_DWORD *)(a3 + 24), *(_DWORD *)(a3 + 28));
  v21 = *(_DWORD *)(a4 + 12);
  if (v21)
  {
    v22 = 0;
    v23 = *(_DWORD *)(a4 + 8);
    v24 = *(_QWORD *)(a4 + 32);
    v25 = v23 - 1;
    v26 = *(_DWORD *)(a4 + 20) + 1;
    v27 = 1;
    do
    {
      ++v22;
      v28 = v27;
      v29 = v25;
      if (v22 < v23)
      {
        do
        {
          *(_QWORD *)(v24 + 8 * v28++) = 0;
          --v29;
        }
        while (v29);
      }
      --v25;
      v27 += v26;
    }
    while (v22 != v21);
  }
  return result;
}

_QWORD *sub_1003C4E70(_QWORD *result)
{
  *result = off_100807398;
  return result;
}

void sub_1003C4E80(_QWORD *a1)
{
  *a1 = off_100807398;
  operator delete();
}

uint64_t sub_1003C4EA0(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_1003C4EAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3[18];

  sub_10030DC3C(a1, v3, a3);
}

void sub_1003C4EF8(_QWORD *a1)
{
  *a1 = off_100807398;
  operator delete();
}

uint64_t sub_1003C4F18(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_1003C4F24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3[6];

  sub_10030DC3C(a1, v3, a3);
}

void sub_1003C4F44(_QWORD *a1)
{
  *a1 = off_100807398;
  operator delete();
}

uint64_t sub_1003C4F64(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_1003C4F70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3[12];

  sub_10030DC3C(a1, v3, a3);
}

uint64_t sub_1003C4FBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t i;
  const char *v10;
  int v11;

  *(_QWORD *)(a1 + 24) = 0x200000001;
  *(_OWORD *)(a1 + 8) = xmmword_10072BE80;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  *(_QWORD *)a1 = off_100818EE0;
  *(_QWORD *)(a1 + 56) = a2;
  *(_QWORD *)(a1 + 88) = 0x200000001;
  *(_QWORD *)(a1 + 64) = off_100818A60;
  *(_OWORD *)(a1 + 72) = xmmword_10072BE80;
  *(_QWORD *)(a1 + 96) = a1 + 104;
  sub_1003C3E14(a1 + 64, a3);
  v5 = *(_DWORD *)(a1 + 72);
  if (*(_DWORD *)(a1 + 24) < v5)
  {
    v10 = "this->max_num_rows_ >= num_rows";
    v11 = 422;
    goto LABEL_9;
  }
  v6 = *(_DWORD *)(a1 + 76);
  if (*(_DWORD *)(a1 + 28) < v6)
  {
    v10 = "this->max_num_cols_ >= num_cols";
    v11 = 423;
LABEL_9:
    __assert_rtn("SetMatrixSize", "cnmatrixbase.h", v11, v10);
  }
  *(_DWORD *)(a1 + 8) = v5;
  *(_DWORD *)(a1 + 12) = v6;
  v7 = v6 * v5;
  *(_DWORD *)(a1 + 16) = v7;
  *(_DWORD *)(a1 + 20) = v5;
  if ((int)v7 >= 1)
  {
    for (i = 0; i != v7; ++i)
      *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * i) = *(_QWORD *)sub_1003C50F0(a2, *(_DWORD *)(*(_QWORD *)(a1 + 96) + 4 * i));
  }
  return a1;
}

void sub_1003C50D0(_Unwind_Exception *a1)
{
  _QWORD *v1;

  v1[8] = off_100815C00;
  *v1 = off_100807398;
  _Unwind_Resume(a1);
}

uint64_t sub_1003C50F0(uint64_t a1, unsigned int a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 32);
  if (!v2)
    sub_1003F2270();
  if ((a2 & 0x80000000) != 0)
    sub_1003F2298();
  if (*(_DWORD *)(a1 + 16) <= (signed int)a2)
    sub_1003F22C0();
  return v2 + 8 * a2;
}

void sub_1003C5128(_QWORD *a1)
{
  a1[8] = off_100815C00;
  *a1 = off_100807398;
  operator delete();
}

uint64_t sub_1003C5154(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t i;
  uint64_t j;
  const char *v14;
  int v15;

  *(_QWORD *)(a1 + 24) = 0x600000001;
  *(_OWORD *)(a1 + 8) = xmmword_10072BDB0;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  *(_QWORD *)a1 = off_100818F28;
  *(_QWORD *)(a1 + 88) = a2;
  *(_QWORD *)(a1 + 120) = 0x100000001;
  *(_QWORD *)(a1 + 96) = off_1008166A8;
  *(_QWORD *)&v7 = 0x100000001;
  *((_QWORD *)&v7 + 1) = 0x100000001;
  *(_OWORD *)(a1 + 104) = v7;
  *(_QWORD *)(a1 + 128) = a1 + 136;
  *(_QWORD *)(a1 + 144) = off_100818A18;
  *(_QWORD *)(a1 + 168) = 0x600000001;
  *(_OWORD *)(a1 + 152) = xmmword_10072BDB0;
  *(_QWORD *)(a1 + 176) = a1 + 184;
  sub_1003C3E14(a1 + 96, a3);
  sub_1003C3E14(a1 + 144, a4);
  v8 = *(unsigned int *)(a1 + 112);
  if (*(_DWORD *)(a1 + 24) < v8)
  {
    v14 = "this->max_num_rows_ >= num_rows";
    v15 = 422;
    goto LABEL_12;
  }
  v9 = *(unsigned int *)(a1 + 160);
  if (*(_DWORD *)(a1 + 28) < v9)
  {
    v14 = "this->max_num_cols_ >= num_cols";
    v15 = 423;
LABEL_12:
    __assert_rtn("SetMatrixSize", "cnmatrixbase.h", v15, v14);
  }
  *(_DWORD *)(a1 + 8) = v8;
  *(_DWORD *)(a1 + 12) = v9;
  *(_DWORD *)(a1 + 16) = v9 * v8;
  *(_DWORD *)(a1 + 20) = v8;
  if ((_DWORD)v9)
  {
    v10 = 0;
    for (i = 0; i != v9; ++i)
    {
      if ((_DWORD)v8)
      {
        for (j = 0; j != v8; ++j)
          *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * (v10 + j)) = *(_QWORD *)sub_100346AA0(a2, *(_DWORD *)(*(_QWORD *)(a1 + 128) + 4 * j), *(_DWORD *)(*(_QWORD *)(a1 + 176) + 4 * i));
      }
      v10 += v8;
    }
  }
  return a1;
}

void sub_1003C52D4(_Unwind_Exception *a1)
{
  _QWORD *v1;

  v1[18] = off_100815C00;
  v1[12] = off_100815C00;
  *v1 = off_100807398;
  _Unwind_Resume(a1);
}

void sub_1003C52F8(_QWORD *a1)
{
  a1[18] = off_100815C00;
  a1[12] = off_100815C00;
  *a1 = off_100807398;
  operator delete();
}

uint64_t sub_1003C5328(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t i;
  uint64_t j;
  const char *v13;
  int v14;

  *(_QWORD *)(a1 + 24) = 0x600000002;
  *(_OWORD *)(a1 + 8) = xmmword_10072BDC0;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  *(_QWORD *)a1 = off_100818F70;
  *(_QWORD *)(a1 + 136) = a2;
  *(_QWORD *)(a1 + 168) = 0x200000001;
  *(_QWORD *)(a1 + 144) = off_100818A60;
  *(_OWORD *)(a1 + 152) = xmmword_10072BE80;
  *(_QWORD *)(a1 + 176) = a1 + 184;
  *(_QWORD *)(a1 + 192) = off_100818A18;
  *(_QWORD *)(a1 + 216) = 0x600000001;
  *(_OWORD *)(a1 + 200) = xmmword_10072BDB0;
  *(_QWORD *)(a1 + 224) = a1 + 232;
  sub_1003C3E14(a1 + 144, a3);
  sub_1003C3E14(a1 + 192, a4);
  v7 = *(unsigned int *)(a1 + 160);
  if (*(_DWORD *)(a1 + 24) < v7)
  {
    v13 = "this->max_num_rows_ >= num_rows";
    v14 = 422;
    goto LABEL_12;
  }
  v8 = *(unsigned int *)(a1 + 208);
  if (*(_DWORD *)(a1 + 28) < v8)
  {
    v13 = "this->max_num_cols_ >= num_cols";
    v14 = 423;
LABEL_12:
    __assert_rtn("SetMatrixSize", "cnmatrixbase.h", v14, v13);
  }
  *(_DWORD *)(a1 + 8) = v7;
  *(_DWORD *)(a1 + 12) = v8;
  *(_DWORD *)(a1 + 16) = v8 * v7;
  *(_DWORD *)(a1 + 20) = v7;
  if ((_DWORD)v8)
  {
    v9 = 0;
    for (i = 0; i != v8; ++i)
    {
      if ((_DWORD)v7)
      {
        for (j = 0; j != v7; ++j)
          *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * (v9 + j)) = *(_QWORD *)sub_100346AA0(a2, *(_DWORD *)(*(_QWORD *)(a1 + 176) + 4 * j), *(_DWORD *)(*(_QWORD *)(a1 + 224) + 4 * i));
      }
      v9 += v7;
    }
  }
  return a1;
}

void sub_1003C54C0(_Unwind_Exception *a1)
{
  _QWORD *v1;

  v1[24] = off_100815C00;
  v1[18] = off_100815C00;
  *v1 = off_100807398;
  _Unwind_Resume(a1);
}

void sub_1003C54E4(_QWORD *a1)
{
  a1[24] = off_100815C00;
  a1[18] = off_100815C00;
  *a1 = off_100807398;
  operator delete();
}

void sub_1003C5514(_QWORD *a1)
{
  *a1 = off_100807398;
  operator delete();
}

uint64_t sub_1003C5534(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_1003C5540(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3[54];

  sub_10030DC3C(a1, v3, a3);
}

uint64_t sub_1003C558C(uint64_t a1, unsigned int a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 32);
  if (!v2)
    sub_1003EB4A8();
  if ((a2 & 0x80000000) != 0)
    sub_1003EB4D0();
  if (*(_DWORD *)(a1 + 16) <= (signed int)a2)
    sub_1003EB4F8();
  return v2 + 4 * a2;
}

uint64_t sub_1003C55C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t i;
  uint64_t j;
  const char *v13;
  int v14;

  *(_QWORD *)(a1 + 24) = 0x600000006;
  *(_OWORD *)(a1 + 8) = xmmword_10072BBA0;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  *(_QWORD *)a1 = off_100819000;
  *(_QWORD *)(a1 + 360) = 0x600000001;
  *(_QWORD *)(a1 + 328) = a2;
  *(_QWORD *)(a1 + 336) = off_100818A18;
  *(_OWORD *)(a1 + 344) = xmmword_10072BDB0;
  *(_QWORD *)(a1 + 368) = a1 + 376;
  *(_QWORD *)(a1 + 424) = 0x100000006;
  *(_QWORD *)(a1 + 400) = off_1008188F8;
  *(_OWORD *)(a1 + 408) = xmmword_10072BBB0;
  *(_QWORD *)(a1 + 432) = a1 + 440;
  sub_1003C3E14(a1 + 336, a3);
  sub_1003C3E14(a1 + 400, a4);
  v7 = *(unsigned int *)(a1 + 352);
  if (*(_DWORD *)(a1 + 24) < v7)
  {
    v13 = "this->max_num_rows_ >= num_rows";
    v14 = 422;
    goto LABEL_12;
  }
  v8 = *(unsigned int *)(a1 + 416);
  if (*(_DWORD *)(a1 + 28) < v8)
  {
    v13 = "this->max_num_cols_ >= num_cols";
    v14 = 423;
LABEL_12:
    __assert_rtn("SetMatrixSize", "cnmatrixbase.h", v14, v13);
  }
  *(_DWORD *)(a1 + 8) = v7;
  *(_DWORD *)(a1 + 12) = v8;
  *(_DWORD *)(a1 + 16) = v8 * v7;
  *(_DWORD *)(a1 + 20) = v7;
  if ((_DWORD)v8)
  {
    v9 = 0;
    for (i = 0; i != v8; ++i)
    {
      if ((_DWORD)v7)
      {
        for (j = 0; j != v7; ++j)
          *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * (v9 + j)) = *(_QWORD *)sub_100346AA0(a2, *(_DWORD *)(*(_QWORD *)(a1 + 368) + 4 * j), *(_DWORD *)(*(_QWORD *)(a1 + 432) + 4 * i));
      }
      v9 += v7;
    }
  }
  return a1;
}

void sub_1003C5758(_Unwind_Exception *a1)
{
  _QWORD *v1;

  v1[50] = off_100815C00;
  v1[42] = off_100815C00;
  *v1 = off_100807398;
  _Unwind_Resume(a1);
}

void sub_1003C577C(_QWORD *a1)
{
  a1[50] = off_100815C00;
  a1[42] = off_100815C00;
  *a1 = off_100807398;
  operator delete();
}

uint64_t sub_1003C57AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t i;
  uint64_t j;
  const char *v13;
  int v14;

  *(_QWORD *)(a1 + 24) = 0x600000003;
  *(_OWORD *)(a1 + 8) = xmmword_10072BDA0;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  *(_QWORD *)a1 = off_100819048;
  *(_QWORD *)(a1 + 184) = a2;
  *(_QWORD *)(a1 + 216) = 0x300000001;
  *(_QWORD *)(a1 + 192) = off_100818988;
  *(_OWORD *)(a1 + 200) = xmmword_1004794B0;
  *(_QWORD *)(a1 + 224) = a1 + 232;
  *(_QWORD *)(a1 + 248) = off_1008188F8;
  *(_QWORD *)(a1 + 272) = 0x100000006;
  *(_OWORD *)(a1 + 256) = xmmword_10072BBB0;
  *(_QWORD *)(a1 + 280) = a1 + 288;
  sub_1003C3E14(a1 + 192, a3);
  sub_1003C3E14(a1 + 248, a4);
  v7 = *(unsigned int *)(a1 + 208);
  if (*(_DWORD *)(a1 + 24) < v7)
  {
    v13 = "this->max_num_rows_ >= num_rows";
    v14 = 422;
    goto LABEL_12;
  }
  v8 = *(unsigned int *)(a1 + 264);
  if (*(_DWORD *)(a1 + 28) < v8)
  {
    v13 = "this->max_num_cols_ >= num_cols";
    v14 = 423;
LABEL_12:
    __assert_rtn("SetMatrixSize", "cnmatrixbase.h", v14, v13);
  }
  *(_DWORD *)(a1 + 8) = v7;
  *(_DWORD *)(a1 + 12) = v8;
  *(_DWORD *)(a1 + 16) = v8 * v7;
  *(_DWORD *)(a1 + 20) = v7;
  if ((_DWORD)v8)
  {
    v9 = 0;
    for (i = 0; i != v8; ++i)
    {
      if ((_DWORD)v7)
      {
        for (j = 0; j != v7; ++j)
          *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * (v9 + j)) = *(_QWORD *)sub_100346AA0(a2, *(_DWORD *)(*(_QWORD *)(a1 + 224) + 4 * j), *(_DWORD *)(*(_QWORD *)(a1 + 280) + 4 * i));
      }
      v9 += v7;
    }
  }
  return a1;
}

void sub_1003C5944(_Unwind_Exception *a1)
{
  _QWORD *v1;

  v1[31] = off_100815C00;
  v1[24] = off_100815C00;
  *v1 = off_100807398;
  _Unwind_Resume(a1);
}

void sub_1003C5968(_QWORD *a1)
{
  a1[31] = off_100815C00;
  a1[24] = off_100815C00;
  *a1 = off_100807398;
  operator delete();
}

void sub_1003C5998(_QWORD *a1)
{
  *a1 = off_100807398;
  operator delete();
}

uint64_t sub_1003C59B8(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_1003C59C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3[9];

  sub_10030DC3C(a1, v3, a3);
}

uint64_t sub_1003C5A10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t i;
  const char *v10;
  int v11;

  *(_QWORD *)(a1 + 24) = 0x300000001;
  *(_OWORD *)(a1 + 8) = xmmword_1004794B0;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  *(_QWORD *)a1 = off_1008190D8;
  *(_QWORD *)(a1 + 64) = a2;
  *(_QWORD *)(a1 + 96) = 0x300000001;
  *(_QWORD *)(a1 + 72) = off_100818988;
  *(_OWORD *)(a1 + 80) = xmmword_1004794B0;
  *(_QWORD *)(a1 + 104) = a1 + 112;
  sub_1003C3E14(a1 + 72, a3);
  v5 = *(_DWORD *)(a1 + 80);
  if (*(_DWORD *)(a1 + 24) < v5)
  {
    v10 = "this->max_num_rows_ >= num_rows";
    v11 = 422;
    goto LABEL_9;
  }
  v6 = *(_DWORD *)(a1 + 84);
  if (*(_DWORD *)(a1 + 28) < v6)
  {
    v10 = "this->max_num_cols_ >= num_cols";
    v11 = 423;
LABEL_9:
    __assert_rtn("SetMatrixSize", "cnmatrixbase.h", v11, v10);
  }
  *(_DWORD *)(a1 + 8) = v5;
  *(_DWORD *)(a1 + 12) = v6;
  v7 = v6 * v5;
  *(_DWORD *)(a1 + 16) = v7;
  *(_DWORD *)(a1 + 20) = v5;
  if ((int)v7 >= 1)
  {
    for (i = 0; i != v7; ++i)
      *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * i) = *(_QWORD *)sub_1003C50F0(a2, *(_DWORD *)(*(_QWORD *)(a1 + 104) + 4 * i));
  }
  return a1;
}

void sub_1003C5B24(_Unwind_Exception *a1)
{
  _QWORD *v1;

  v1[9] = off_100815C00;
  *v1 = off_100807398;
  _Unwind_Resume(a1);
}

void sub_1003C5B44(_QWORD *a1)
{
  a1[9] = off_100815C00;
  *a1 = off_100807398;
  operator delete();
}

void sub_1003C5B70(_QWORD *a1)
{
  *a1 = off_100807398;
  operator delete();
}

uint64_t sub_1003C5B90(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_1003C5B9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3[81];

  sub_10030DC3C(a1, v3, a3);
}

_DWORD *sub_1003C5BE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  __CLPK_integer v15;
  __CLPK_doublereal *v16;
  __CLPK_integer v17;
  __CLPK_doublereal *v18;
  __CLPK_doublereal *v19;
  __CLPK_integer v20;
  cnprint::CNPrinter *v21;
  __CLPK_integer v22;
  unsigned int v23;
  unsigned int v24;
  __CLPK_doublereal *v25;
  cnprint::CNPrinter *v26;
  __CLPK_integer v27;
  int v28;
  _DWORD *result;
  int v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  unsigned int v34;
  int v35;
  int v36;
  int v37;
  unsigned int v38;
  __CLPK_doublereal *__tau;
  __CLPK_integer v40;
  __CLPK_integer __info;
  __CLPK_integer __lwork;
  __CLPK_integer __lda;
  __CLPK_integer __n;
  __CLPK_integer __m;

  if (a1 == a2)
    sub_1003F2838();
  if (a1 == a3)
    sub_1003F2860();
  if (a1 == a4)
    sub_1003F2888();
  if (a1 == a5)
    sub_1003F28B0();
  if (a2 == a3)
    sub_1003F28D8();
  if (a2 == a4)
    sub_1003F2900();
  if (a2 == a5)
    sub_1003F2928();
  if (a3 == a4)
    sub_1003F2950();
  if (a3 == a5)
    sub_1003F2978();
  if (a4 == a5)
    sub_1003F29A0();
  v10 = *(_DWORD *)(a4 + 24);
  v11 = *(_DWORD *)(a1 + 8);
  if (v10 < v11)
    sub_1003F29C8();
  v12 = *(_DWORD *)(a1 + 12);
  if (v10 < v12)
    sub_1003F29F0();
  v13 = *(_DWORD *)(a4 + 28);
  if (v13 < v11)
    sub_1003F2A18();
  if (v13 < v12)
    sub_1003F2A40();
  if (*(_DWORD *)(a5 + 24) < v11)
    sub_1003F2A68();
  if (*(_DWORD *)(a5 + 28) < v12)
    sub_1003F2A90();
  v14 = *(_DWORD *)(a2 + 24);
  if (v11 >= v12)
  {
    if (v14 < v12)
      sub_1003F2B80();
  }
  else if (v14 < v11)
  {
    sub_1003F2AB8();
  }
  if (*(_DWORD *)(a3 + 24) < v12)
    sub_1003F2AE0();
  if (*(_DWORD *)(a3 + 28) < v12)
    sub_1003F2B08();
  sub_10030EC4C(a5, a1);
  v15 = *(_DWORD *)(a5 + 8);
  v16 = *(__CLPK_doublereal **)(a5 + 32);
  v17 = *(_DWORD *)(a5 + 20);
  v18 = *(__CLPK_doublereal **)(a2 + 32);
  v19 = *(__CLPK_doublereal **)(a3 + 32);
  v20 = *(_DWORD *)(a3 + 28) * *(_DWORD *)(a3 + 24);
  __n = *(_DWORD *)(a5 + 12);
  __m = v15;
  __lwork = v20;
  __lda = v17;
  __info = 0;
  __tau = v18;
  v21 = (cnprint::CNPrinter *)dgeqrf_(&__m, &__n, v16, &__lda, v18, v19, &__lwork, &__info);
  v22 = __info;
  if (__info)
  {
    LOWORD(__m) = 4;
    LOBYTE(__n) = 5;
    v21 = (cnprint::CNPrinter *)cnprint::CNPrinter::Print(&__m, &__n);
  }
  if (v20 < (int)**(double **)(a3 + 32) && cnprint::CNPrinter::GetLogLevel(v21) <= 1)
  {
    LOWORD(__m) = 4;
    LOBYTE(__n) = 1;
    cnprint::CNPrinter::Print(&__m, &__n);
  }
  if (v22)
    sub_1003F2B58();
  sub_10030EC4C(a4, a5);
  v23 = *(_DWORD *)(a1 + 8);
  v24 = *(_DWORD *)(a1 + 12);
  if (v24 >= v23)
    v24 = *(_DWORD *)(a1 + 8);
  v25 = *(__CLPK_doublereal **)(a4 + 32);
  __n = *(_DWORD *)(a1 + 8);
  __m = v23;
  __lwork = v17;
  __lda = v24;
  v40 = 0;
  __info = v20;
  v26 = (cnprint::CNPrinter *)dorgqr_(&__m, &__n, &__lda, v25, &__lwork, __tau, v19, &__info, &v40);
  v27 = v40;
  if (v40)
  {
    LOWORD(__m) = 4;
    LOBYTE(__n) = 5;
    v26 = (cnprint::CNPrinter *)cnprint::CNPrinter::Print(&__m, &__n);
  }
  if (v20 < (int)**(double **)(a3 + 32) && cnprint::CNPrinter::GetLogLevel(v26) <= 1)
  {
    LOWORD(__m) = 4;
    LOBYTE(__n) = 1;
    cnprint::CNPrinter::Print(&__m, &__n);
  }
  if (v27)
    sub_1003F2B30();
  if (*(_DWORD *)(a1 + 8) >= *(_DWORD *)(a1 + 12))
    v28 = *(_DWORD *)(a1 + 12);
  else
    v28 = *(_DWORD *)(a1 + 8);
  sub_10030DD0C((_DWORD *)a2, v28, 1);
  sub_10030DD0C((_DWORD *)a3, *(_DWORD *)(a3 + 24), *(_DWORD *)(a3 + 28));
  result = sub_10030DD0C((_DWORD *)a4, *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 8));
  v30 = *(_DWORD *)(a5 + 12);
  if (v30)
  {
    v31 = 0;
    v32 = *(_DWORD *)(a5 + 8);
    v33 = *(_QWORD *)(a5 + 32);
    v34 = v32 - 1;
    v35 = *(_DWORD *)(a5 + 20) + 1;
    v36 = 1;
    do
    {
      ++v31;
      v37 = v36;
      v38 = v34;
      if (v31 < v32)
      {
        do
        {
          *(_QWORD *)(v33 + 8 * v37++) = 0;
          --v38;
        }
        while (v38);
      }
      --v34;
      v36 += v35;
    }
    while (v31 != v30);
  }
  return result;
}

uint64_t sub_1003C5F90(uint64_t result, unsigned int a2, unsigned int a3)
{
  const char *v3;
  int v4;
  const char *v5;
  const char *v6;

  *(_QWORD *)(result + 24) = 0x100000006;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = off_1008188B0;
  if ((a3 & 0x80000000) != 0)
  {
    v3 = "nc >= 0";
    v4 = 487;
    v5 = "cnmatrix.h";
    v6 = "CNMatrix";
    goto LABEL_9;
  }
  if (a2 > 6)
  {
    v3 = "this->max_num_rows_ >= num_rows";
    v4 = 422;
LABEL_8:
    v5 = "cnmatrixbase.h";
    v6 = "SetMatrixSize";
LABEL_9:
    __assert_rtn(v6, v5, v4, v3);
  }
  if (a3 >= 2)
  {
    v3 = "this->max_num_cols_ >= num_cols";
    v4 = 423;
    goto LABEL_8;
  }
  *(_DWORD *)(result + 8) = a2;
  *(_DWORD *)(result + 12) = a3;
  *(_DWORD *)(result + 16) = a3 * a2;
  *(_DWORD *)(result + 20) = a2;
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_1003C604C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = off_100807398;
  _Unwind_Resume(a1);
}

void sub_1003C605C(_QWORD *a1)
{
  *a1 = off_100807398;
  operator delete();
}

uint64_t sub_1003C607C(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_1003C6088(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3[42];

  sub_10030DC3C(a1, v3, a3);
}

uint64_t sub_1003C60D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t i;
  uint64_t j;
  const char *v14;
  int v15;

  *(_QWORD *)(a1 + 24) = 0x600000001;
  *(_OWORD *)(a1 + 8) = xmmword_10072BDB0;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  *(_QWORD *)a1 = off_1008191B0;
  *(_QWORD *)(a1 + 88) = a2;
  *(_QWORD *)(a1 + 96) = off_1008166A8;
  *(_QWORD *)(a1 + 120) = 0x100000001;
  *(_QWORD *)&v7 = 0x100000001;
  *((_QWORD *)&v7 + 1) = 0x100000001;
  *(_OWORD *)(a1 + 104) = v7;
  *(_QWORD *)(a1 + 128) = a1 + 136;
  *(_QWORD *)(a1 + 144) = off_1008188F8;
  *(_QWORD *)(a1 + 168) = 0x100000006;
  *(_OWORD *)(a1 + 152) = xmmword_10072BBB0;
  *(_QWORD *)(a1 + 176) = a1 + 184;
  sub_1003C3E14(a1 + 96, a3);
  sub_1003C3E14(a1 + 144, a4);
  v8 = *(unsigned int *)(a1 + 112);
  if (*(_DWORD *)(a1 + 24) < v8)
  {
    v14 = "this->max_num_rows_ >= num_rows";
    v15 = 422;
    goto LABEL_12;
  }
  v9 = *(unsigned int *)(a1 + 160);
  if (*(_DWORD *)(a1 + 28) < v9)
  {
    v14 = "this->max_num_cols_ >= num_cols";
    v15 = 423;
LABEL_12:
    __assert_rtn("SetMatrixSize", "cnmatrixbase.h", v15, v14);
  }
  *(_DWORD *)(a1 + 8) = v8;
  *(_DWORD *)(a1 + 12) = v9;
  *(_DWORD *)(a1 + 16) = v9 * v8;
  *(_DWORD *)(a1 + 20) = v8;
  if ((_DWORD)v9)
  {
    v10 = 0;
    for (i = 0; i != v9; ++i)
    {
      if ((_DWORD)v8)
      {
        for (j = 0; j != v8; ++j)
          *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * (v10 + j)) = *(_QWORD *)sub_100346AA0(a2, *(_DWORD *)(*(_QWORD *)(a1 + 128) + 4 * j), *(_DWORD *)(*(_QWORD *)(a1 + 176) + 4 * i));
      }
      v10 += v8;
    }
  }
  return a1;
}

void sub_1003C6264(_Unwind_Exception *a1)
{
  _QWORD *v1;

  v1[18] = off_100815C00;
  v1[12] = off_100815C00;
  *v1 = off_100807398;
  _Unwind_Resume(a1);
}

void sub_1003C6288(_QWORD *a1)
{
  a1[18] = off_100815C00;
  a1[12] = off_100815C00;
  *a1 = off_100807398;
  operator delete();
}

void sub_1003C62B8(_QWORD *a1)
{
  *a1 = off_100807398;
  operator delete();
}

uint64_t sub_1003C62D8(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_1003C62E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3[7];

  sub_10030DC3C(a1, v3, a3);
}

void sub_1003C6304(_QWORD *a1)
{
  *a1 = off_100807398;
  operator delete();
}

uint64_t sub_1003C6324(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_1003C6330(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3[49];

  sub_10030DC3C(a1, v3, a3);
}

_QWORD *sub_1003C637C(_QWORD *result)
{
  *result = off_100815C00;
  return result;
}

void sub_1003C638C(_QWORD *a1)
{
  *a1 = off_100815C00;
  operator delete();
}

uint64_t sub_1003C63AC(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_1003C63B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3[2];

  sub_10031CA0C(a1, v3, a3);
}

void sub_1003C63D8(_QWORD *a1)
{
  *a1 = off_100807398;
  operator delete();
}

uint64_t sub_1003C63F8(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_1003C6404(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3[8];

  sub_10030DC3C(a1, v3, a3);
}

void sub_1003C6450(_QWORD *a1)
{
  *a1 = off_100807398;
  operator delete();
}

uint64_t sub_1003C6470(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_1003C647C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3[48];

  sub_10030DC3C(a1, v3, a3);
}

uint64_t sub_1003C64C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t i;
  uint64_t j;
  const char *v13;
  int v14;

  *(_QWORD *)(a1 + 24) = 0x600000002;
  *(_OWORD *)(a1 + 8) = xmmword_10072BDC0;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  *(_QWORD *)a1 = off_100819360;
  *(_QWORD *)(a1 + 136) = a2;
  *(_QWORD *)(a1 + 168) = 0x200000001;
  *(_QWORD *)(a1 + 144) = off_100818A60;
  *(_OWORD *)(a1 + 152) = xmmword_10072BE80;
  *(_QWORD *)(a1 + 176) = a1 + 184;
  *(_QWORD *)(a1 + 192) = off_1008188F8;
  *(_QWORD *)(a1 + 216) = 0x100000006;
  *(_OWORD *)(a1 + 200) = xmmword_10072BBB0;
  *(_QWORD *)(a1 + 224) = a1 + 232;
  sub_1003C3E14(a1 + 144, a3);
  sub_1003C3E14(a1 + 192, a4);
  v7 = *(unsigned int *)(a1 + 160);
  if (*(_DWORD *)(a1 + 24) < v7)
  {
    v13 = "this->max_num_rows_ >= num_rows";
    v14 = 422;
    goto LABEL_12;
  }
  v8 = *(unsigned int *)(a1 + 208);
  if (*(_DWORD *)(a1 + 28) < v8)
  {
    v13 = "this->max_num_cols_ >= num_cols";
    v14 = 423;
LABEL_12:
    __assert_rtn("SetMatrixSize", "cnmatrixbase.h", v14, v13);
  }
  *(_DWORD *)(a1 + 8) = v7;
  *(_DWORD *)(a1 + 12) = v8;
  *(_DWORD *)(a1 + 16) = v8 * v7;
  *(_DWORD *)(a1 + 20) = v7;
  if ((_DWORD)v8)
  {
    v9 = 0;
    for (i = 0; i != v8; ++i)
    {
      if ((_DWORD)v7)
      {
        for (j = 0; j != v7; ++j)
          *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * (v9 + j)) = *(_QWORD *)sub_100346AA0(a2, *(_DWORD *)(*(_QWORD *)(a1 + 176) + 4 * j), *(_DWORD *)(*(_QWORD *)(a1 + 224) + 4 * i));
      }
      v9 += v7;
    }
  }
  return a1;
}

void sub_1003C6660(_Unwind_Exception *a1)
{
  _QWORD *v1;

  v1[24] = off_100815C00;
  v1[18] = off_100815C00;
  *v1 = off_100807398;
  _Unwind_Resume(a1);
}

void sub_1003C6684(_QWORD *a1)
{
  a1[24] = off_100815C00;
  a1[18] = off_100815C00;
  *a1 = off_100807398;
  operator delete();
}

void sub_1003C66B4(_QWORD *a1)
{
  *a1 = off_100807398;
  operator delete();
}

uint64_t sub_1003C66D4(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_1003C66E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3[64];

  sub_10030DC3C(a1, v3, a3);
}

void sub_1003C672C(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 376, a4);
}

void sub_1003C6734(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 377, a4);
}

void sub_1003C673C(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 1194, a4);
}

void sub_1003C6744(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 4287, a4);
}

double sub_1003C674C(uint64_t a1, int a2)
{
  return sub_10027C1DC(a1, a2, 0);
}

std::string *sub_1003C6754(std::string *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  return sub_1003BEC50(a1, (std::string *)&a10);
}

uint64_t sub_1003C6760()
{
  __n128 v0;
  unsigned int i;
  unsigned int j;
  unsigned int k;
  unsigned int m;
  unsigned int n;
  unsigned int ii;
  unsigned int jj;
  unsigned int kk;
  int mm;
  _BYTE v11[72];

  v0 = sub_1003C7EE0((uint64_t)v11, &xmmword_10072BE90, &xmmword_10072BEA8, &xmmword_10072BEC0);
  sub_1003C8024(&unk_10085FD80, v11, v0);
  __cxa_atexit((void (*)(void *))sub_1003B7184, &unk_10085FD80, (void *)&_mh_execute_header);
  qword_10085FE58 = 0x300000003;
  qword_10085FE40 = (uint64_t)off_100815730;
  unk_10085FE48 = xmmword_100478B80;
  qword_10085FE60 = (uint64_t)&unk_10085FE68;
  __cxa_atexit((void (*)(void *))sub_10030C47C, &qword_10085FE40, (void *)&_mh_execute_header);
  qword_10085FEC8 = 0x300000003;
  qword_10085FEB0 = (uint64_t)off_100815730;
  unk_10085FEB8 = xmmword_100478B80;
  qword_10085FED0 = (uint64_t)&unk_10085FED8;
  __cxa_atexit((void (*)(void *))sub_10030C47C, &qword_10085FEB0, (void *)&_mh_execute_header);
  qword_10085FF38 = 0x300000003;
  qword_10085FF20 = (uint64_t)off_100815730;
  unk_10085FF28 = xmmword_100478B80;
  qword_10085FF40 = (uint64_t)&unk_10085FF48;
  __cxa_atexit((void (*)(void *))sub_10030C47C, &qword_10085FF20, (void *)&_mh_execute_header);
  qword_10085FFA8 = 0x300000003;
  qword_10085FF90 = (uint64_t)off_100815730;
  unk_10085FF98 = xmmword_100478B80;
  qword_10085FFB0 = (uint64_t)algn_10085FFB8;
  __cxa_atexit((void (*)(void *))sub_10030C47C, &qword_10085FF90, (void *)&_mh_execute_header);
  qword_100860018 = 0x300000003;
  qword_100860000 = (uint64_t)off_100815730;
  unk_100860008 = xmmword_100478B80;
  qword_100860020 = (uint64_t)&unk_100860028;
  __cxa_atexit((void (*)(void *))sub_10030C47C, &qword_100860000, (void *)&_mh_execute_header);
  qword_100860088 = 0x300000003;
  qword_100860070 = (uint64_t)off_100815730;
  unk_100860078 = xmmword_100478B80;
  qword_100860090 = (uint64_t)&unk_100860098;
  __cxa_atexit((void (*)(void *))sub_10030C47C, &qword_100860070, (void *)&_mh_execute_header);
  qword_1008600F8 = 0x300000003;
  qword_1008600E0 = (uint64_t)off_100815730;
  unk_1008600E8 = xmmword_100478B80;
  qword_100860100 = (uint64_t)&unk_100860108;
  __cxa_atexit((void (*)(void *))sub_10030C47C, &qword_1008600E0, (void *)&_mh_execute_header);
  qword_100860168 = 0x300000003;
  qword_100860150 = (uint64_t)off_100815730;
  unk_100860158 = xmmword_100478B80;
  qword_100860170 = (uint64_t)&unk_100860178;
  __cxa_atexit((void (*)(void *))sub_10030C47C, &qword_100860150, (void *)&_mh_execute_header);
  qword_10085F1E0 = 0x40F86A0000000000;
  qword_10085F200 = 0xC00000001;
  qword_10085F1E8 = (uint64_t)off_1008189D0;
  *(_OWORD *)algn_10085F1F0 = xmmword_10072BE70;
  qword_10085F208 = (uint64_t)algn_10085F210;
  sub_10030DD0C(&qword_10085F1E8, 1, 12);
  for (i = 0; i != 12; ++i)
    *(_DWORD *)sub_1003C316C((uint64_t)&qword_10085F1E8, i) = i;
  __cxa_atexit((void (*)(void *))sub_1003B719C, &qword_10085F1E8, (void *)&_mh_execute_header);
  qword_10085F258 = 0x600000001;
  qword_10085F240[0] = (uint64_t)off_100818A18;
  unk_10085F248 = xmmword_10072BDB0;
  qword_10085F260 = (uint64_t)algn_10085F268;
  sub_10030DD0C(qword_10085F240, 1, 6);
  for (j = 0; j != 6; ++j)
    *(_DWORD *)sub_1003C316C((uint64_t)qword_10085F240, j) = j;
  __cxa_atexit((void (*)(void *))sub_1003B71AC, qword_10085F240, (void *)&_mh_execute_header);
  qword_10085F298 = 0x300000001;
  qword_10085F280[0] = (uint64_t)off_100818988;
  unk_10085F288 = xmmword_1004794B0;
  qword_10085F2A0 = (uint64_t)&unk_10085F2A8;
  sub_10030DD0C(qword_10085F280, 1, 3);
  for (k = 0; k != 3; ++k)
    *(_DWORD *)sub_1003C316C((uint64_t)qword_10085F280, k) = k + 6;
  __cxa_atexit((void (*)(void *))sub_1003B71BC, qword_10085F280, (void *)&_mh_execute_header);
  qword_10085F2D0 = 0x200000001;
  qword_10085F2B8[0] = (uint64_t)off_100818A60;
  unk_10085F2C0 = xmmword_10072BE80;
  qword_10085F2D8 = (uint64_t)&unk_10085F2E0;
  sub_10030DD0C(qword_10085F2B8, 1, 2);
  *(_DWORD *)sub_1003C316C((uint64_t)qword_10085F2B8, 0) = 6;
  *(_DWORD *)sub_1003C316C((uint64_t)qword_10085F2B8, 1u) = 7;
  __cxa_atexit((void (*)(void *))sub_1003B71CC, qword_10085F2B8, (void *)&_mh_execute_header);
  qword_10085F300 = 0x600000001;
  qword_10085F2E8 = (uint64_t)off_100818A18;
  *(_OWORD *)algn_10085F2F0 = xmmword_10072BDB0;
  qword_10085F308 = (uint64_t)&unk_10085F310;
  sub_10030DD0C(&qword_10085F2E8, 1, 6);
  for (m = 0; m != 6; ++m)
    *(_DWORD *)sub_1003C316C((uint64_t)&qword_10085F2E8, m) = m + 12;
  __cxa_atexit((void (*)(void *))sub_1003B71AC, &qword_10085F2E8, (void *)&_mh_execute_header);
  qword_10085F340 = 0x200000001;
  qword_10085F328 = (uint64_t)off_100818A60;
  *(_OWORD *)algn_10085F330 = xmmword_10072BE80;
  qword_10085F348 = (uint64_t)&unk_10085F350;
  sub_10030DD0C(&qword_10085F328, 1, 2);
  *(_DWORD *)sub_1003C316C((uint64_t)&qword_10085F328, 0) = 1;
  *(_DWORD *)sub_1003C316C((uint64_t)&qword_10085F328, 1u) = 2;
  __cxa_atexit((void (*)(void *))sub_1003B71CC, &qword_10085F328, (void *)&_mh_execute_header);
  qword_10085F370 = 0x300000001;
  qword_10085F358[0] = (uint64_t)off_100818988;
  unk_10085F360 = xmmword_1004794B0;
  qword_10085F378 = (uint64_t)&unk_10085F380;
  sub_10030DD0C(qword_10085F358, 1, 3);
  for (n = 0; n != 3; ++n)
    *(_DWORD *)sub_1003C316C((uint64_t)qword_10085F358, n) = n;
  __cxa_atexit((void (*)(void *))sub_1003B71BC, qword_10085F358, (void *)&_mh_execute_header);
  qword_10085F3A8 = 0x300000001;
  qword_10085F390[0] = (uint64_t)off_100818988;
  unk_10085F398 = xmmword_1004794B0;
  qword_10085F3B0 = (uint64_t)&unk_10085F3B8;
  sub_10030DD0C(qword_10085F390, 1, 3);
  for (ii = 0; ii != 3; ++ii)
    *(_DWORD *)sub_1003C316C((uint64_t)qword_10085F390, ii) = ii + 3;
  __cxa_atexit((void (*)(void *))sub_1003B71BC, qword_10085F390, (void *)&_mh_execute_header);
  qword_10085F3E0 = 0x300000001;
  qword_10085F3C8 = (uint64_t)off_100818988;
  *(_OWORD *)algn_10085F3D0 = xmmword_1004794B0;
  qword_10085F3E8 = (uint64_t)algn_10085F3F0;
  sub_10030DD0C(&qword_10085F3C8, 1, 3);
  for (jj = 0; jj != 3; ++jj)
    *(_DWORD *)sub_1003C316C((uint64_t)&qword_10085F3C8, jj) = jj + 6;
  __cxa_atexit((void (*)(void *))sub_1003B71BC, &qword_10085F3C8, (void *)&_mh_execute_header);
  qword_10085F418 = 0x300000001;
  qword_10085F400[0] = (uint64_t)off_100818988;
  unk_10085F408 = xmmword_1004794B0;
  qword_10085F420 = (uint64_t)&unk_10085F428;
  sub_10030DD0C(qword_10085F400, 1, 3);
  for (kk = 0; kk != 3; ++kk)
    *(_DWORD *)sub_1003C316C((uint64_t)qword_10085F400, kk) = kk + 9;
  __cxa_atexit((void (*)(void *))sub_1003B71BC, qword_10085F400, (void *)&_mh_execute_header);
  qword_10085F450 = 0x300000003;
  qword_10085F438[0] = (uint64_t)off_100815730;
  unk_10085F440 = xmmword_100478B80;
  qword_10085F458 = (uint64_t)&unk_10085F460;
  sub_10030DD0C(qword_10085F438, 3, 3);
  sub_10030DD58((uint64_t)qword_10085F438, 0.0);
  for (mm = 0; mm != 3; ++mm)
    *(_QWORD *)sub_100346AA0((uint64_t)qword_10085F438, mm, mm) = 0x3FF0000000000000;
  __cxa_atexit((void (*)(void *))sub_10030C47C, qword_10085F438, (void *)&_mh_execute_header);
  qword_10085F4C0 = 0x300000003;
  qword_10085F4A8 = (uint64_t)off_100815730;
  *(_OWORD *)algn_10085F4B0 = xmmword_100478B80;
  qword_10085F4C8 = (uint64_t)&unk_10085F4D0;
  sub_10030DD0C(&qword_10085F4A8, 3, 3);
  sub_10030DD58((uint64_t)&qword_10085F4A8, 0.0);
  return __cxa_atexit((void (*)(void *))sub_10030C47C, &qword_10085F4A8, (void *)&_mh_execute_header);
}

void sub_1003C6F44(_Unwind_Exception *a1)
{
  qword_10085F400 = (uint64_t)off_100815C00;
  _Unwind_Resume(a1);
}

_QWORD *sub_1003C7060@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, (&off_1008193E0)[a1]);
}

_QWORD *sub_1003C7074@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, (&off_100819438)[a1]);
}

_QWORD *sub_1003C7088@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, (&off_100819480)[a1]);
}

_QWORD *sub_1003C709C@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, (&off_1008194A0)[a1]);
}

uint64_t sub_1003C70B0@<X0>(double *a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  uint64_t i;
  _BYTE v7[24];

  for (i = 0; i != 3; ++i)
    *(double *)&v7[i * 8] = a1[i + 3] * -9.80665;
  return sub_1003C7E58(a2, v7, a1 + 6, a1 + 9, a1 + 13, a1 + 16, a3, *a1);
}

void sub_1003C7118(uint64_t a1@<X0>, uint64_t *a2@<X8>, double a3@<D0>)
{
  uint64_t v4;
  uint64_t v5;
  const void *v7;
  uint64_t v8;
  char *v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  unint64_t v14;
  double v15;
  double v16;
  char v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char v22;
  uint64_t v23[2];
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  void *__p;
  void *v31;
  uint64_t v32;
  char v33;
  __int16 v34;
  uint64_t v35;
  double v36;
  void *v37;
  void *v38;
  uint64_t v39;
  char v40;
  double v41[2];

  v41[0] = a3;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  v40 = *(_BYTE *)(a1 + 368) == 5;
  v37 = 0;
  v38 = 0;
  v39 = 0;
  v4 = *(_QWORD *)(a1 + 136);
  v5 = *(_QWORD *)(a1 + 144);
  if (v4 != v5)
  {
    v7 = (const void *)(a1 + 115);
    v8 = a1 + 123;
    v9 = (char *)(a1 + 72);
    while (1)
    {
      if (*(_BYTE *)(a1 + 528) && *(_BYTE *)(v4 + 32) && *(_BYTE *)(v4 + 48))
      {
        v35 = *(_QWORD *)(a1 + 64);
        v36 = 0.0;
        v34 = *(_WORD *)(a1 + 112);
        v33 = *(_BYTE *)(a1 + 114);
        __p = 0;
        v31 = 0;
        v32 = 0;
        sub_10003A474(&__p, v7, v8, 8uLL);
        v29 = *(double *)(a1 + 304);
        v28 = sub_100030318(*(double *)(v4 + 8));
        v27 = sub_100030318(*(double *)v4);
        v26 = 0.2;
        if (!*(_BYTE *)(v4 + 48))
          sub_10000BA44();
        v25 = sub_100030318(*(double *)(v4 + 40));
        if (!*(_BYTE *)(v4 + 32))
          sub_10000BA44();
        v10 = sub_100030318(*(double *)(v4 + 24));
        v24 = v10;
        v11 = *(_QWORD *)(a1 + 536);
        v12 = *(_QWORD *)(a1 + 544);
        v23[0] = v11;
        v23[1] = v12;
        v13 = *(_BYTE *)(a1 + 368);
        v22 = v13;
        v14 = a2[1];
        if (v14 >= a2[2])
        {
          v18 = sub_1003C750C(a2, &v35, &v34, &v33, (uint64_t)&__p, v41, &v29, &v28, &v27, &v26, &v25, &v24, &v36, v23, (uint64_t)&v37, &v22, &v40);
          goto LABEL_15;
        }
        sub_1003C7754(v14, v35, v34, v33, (uint64_t)&__p, v11, v12, (uint64_t)&v37, v41[0], v29, v28, v27, v26, v25, v10, v36, v13, v40);
      }
      else
      {
        v23[0] = *(_QWORD *)(a1 + 64);
        LOWORD(v27) = *(_WORD *)(a1 + 112);
        LOBYTE(v26) = *(_BYTE *)(a1 + 114);
        __p = 0;
        v31 = 0;
        v32 = 0;
        sub_10003A474(&__p, v7, v8, 8uLL);
        v15 = *(double *)(a1 + 48);
        v35 = *(_QWORD *)(a1 + 304);
        v36 = v15;
        v29 = sub_100030318(*(double *)(v4 + 8));
        v16 = sub_100030318(*(double *)v4);
        v28 = v16;
        v17 = *(_BYTE *)(a1 + 368);
        LOBYTE(v25) = v17;
        v14 = a2[1];
        if (v14 >= a2[2])
        {
          v18 = sub_1003C7ABC(a2, v23, (__int16 *)&v27, (char *)&v26, (uint64_t)&__p, &v36, (double *)&v35, &v29, &v28, (uint64_t)&unk_10047B334, (uint64_t)&v37, (char *)&v25, &v40);
          goto LABEL_15;
        }
        sub_1003C7754(v14, v23[0], SLOWORD(v27), SLOBYTE(v26), (uint64_t)&__p, 0, 0, (uint64_t)&v37, v36, *(double *)&v35, v29, v16, 0.1, 0.174532925, 0.174532925, 0.0, v17, v40);
      }
      v18 = v14 + 152;
      a2[1] = v14 + 152;
LABEL_15:
      a2[1] = v18;
      if (__p)
      {
        v31 = __p;
        operator delete(__p);
      }
      v19 = *(char **)(a1 + 72);
      v20 = *(_QWORD *)(a1 + 80);
      if (v19 != (char *)v20)
      {
        v21 = (char *)(a2[1] - 32);
        if (v21 != v9)
          sub_100144F58(v21, v19, v20, (v20 - (uint64_t)v19) >> 3);
      }
      v4 += 56;
      if (v4 == v5)
      {
        if (v37)
        {
          v38 = v37;
          operator delete(v37);
        }
        return;
      }
    }
  }
}

void sub_1003C7490(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28)
{
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v32;

  *(_QWORD *)(v28 + 8) = v29;
  if (__p)
    operator delete(__p);
  v32 = *(void **)(v30 - 144);
  if (v32)
  {
    *(_QWORD *)(v30 - 136) = v32;
    operator delete(v32);
  }
  *(_QWORD *)(v30 - 144) = v28;
  sub_1001543B0((void ***)(v30 - 144));
  _Unwind_Resume(a1);
}

uint64_t sub_1003C750C(uint64_t *a1, uint64_t *a2, __int16 *a3, char *a4, uint64_t a5, double *a6, double *a7, double *a8, double *a9, double *a10, double *a11, double *a12, double *a13, uint64_t *a14, uint64_t a15, char *a16, char *a17)
{
  unint64_t v18;
  unint64_t v19;
  char *v23;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t *v29;
  double *v30;
  double *v31;
  double *v32;
  double *v33;
  double *v34;
  uint64_t v35;
  unint64_t v36;
  double *v37;
  double *v39;
  char *v40;
  uint64_t v41;
  unint64_t v43;
  uint64_t v44;
  void *v45;
  char *v46;
  char *v47;
  char *v48;
  uint64_t *v49;

  v18 = 0x86BCA1AF286BCA1BLL * ((a1[1] - *a1) >> 3);
  v19 = v18 + 1;
  if (v18 + 1 > 0x1AF286BCA1AF286)
    sub_100026E7C();
  v23 = a4;
  v27 = a16;
  v26 = a17;
  v29 = a14;
  v28 = a15;
  v31 = a12;
  v30 = a13;
  v33 = a10;
  v32 = a11;
  v34 = a9;
  v35 = (uint64_t)(a1 + 2);
  if (0xD79435E50D79436 * ((a1[2] - *a1) >> 3) > v19)
    v19 = 0xD79435E50D79436 * ((a1[2] - *a1) >> 3);
  if (0x86BCA1AF286BCA1BLL * ((a1[2] - *a1) >> 3) >= 0xD79435E50D7943)
    v36 = 0x1AF286BCA1AF286;
  else
    v36 = v19;
  v49 = a1 + 2;
  if (v36)
  {
    v37 = a6;
    v44 = a5;
    v43 = v18;
    v39 = a8;
    v40 = (char *)sub_100152EEC((uint64_t)(a1 + 2), v36);
    v30 = a13;
    v29 = a14;
    v27 = a16;
    v28 = a15;
    v26 = a17;
    v31 = a12;
    a5 = v44;
    a8 = v39;
    v18 = v43;
    v23 = a4;
    v34 = a9;
    v33 = a10;
    a6 = v37;
    v32 = a11;
  }
  else
  {
    v40 = 0;
  }
  v45 = v40;
  v46 = &v40[152 * v18];
  v48 = &v40[152 * v36];
  sub_1003C76EC(v35, (uint64_t)v46, a2, a3, v23, a5, a6, a7, a8, v34, v33, v32, v31, v30, v29, v28, v27, v26);
  v47 = v46 + 152;
  sub_1003C7854(a1, &v45);
  v41 = a1[1];
  sub_1003C7A48(&v45);
  return v41;
}

void sub_1003C76D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1003C7A48((void **)(v1 - 128));
  _Unwind_Resume(a1);
}

uint64_t sub_1003C76EC(uint64_t a1, uint64_t a2, uint64_t *a3, __int16 *a4, char *a5, uint64_t a6, double *a7, double *a8, double *a9, double *a10, double *a11, double *a12, double *a13, double *a14, uint64_t *a15, uint64_t a16, char *a17, char *a18)
{
  return sub_1003C7754(a2, *a3, *a4, *a5, a6, *a15, a15[1], a16, *a7, *a8, *a9, *a10, *a11, *a12, *a13, *a14, *a17, *a18);
}

uint64_t sub_1003C7754(uint64_t a1, uint64_t a2, __int16 a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, double a10, double a11, double a12, double a13, double a14, double a15, double a16, char a17, char a18)
{
  *(_QWORD *)a1 = a2;
  *(_WORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 10) = a4;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  sub_1001530EC((_QWORD *)(a1 + 16), *(const void **)a5, *(_QWORD *)(a5 + 8), *(_QWORD *)(a5 + 8) - *(_QWORD *)a5);
  *(_QWORD *)(a1 + 120) = 0;
  *(double *)(a1 + 40) = a9;
  *(double *)(a1 + 48) = a10;
  *(double *)(a1 + 56) = a13;
  *(double *)(a1 + 64) = a11;
  *(double *)(a1 + 72) = a12;
  *(double *)(a1 + 80) = a14;
  *(double *)(a1 + 88) = a15;
  *(double *)(a1 + 96) = a16;
  *(_QWORD *)(a1 + 104) = a6;
  *(_QWORD *)(a1 + 112) = a7;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  sub_1001375D8((_QWORD *)(a1 + 120), *(const void **)a8, *(_QWORD *)(a8 + 8), (uint64_t)(*(_QWORD *)(a8 + 8) - *(_QWORD *)a8) >> 3);
  *(_BYTE *)(a1 + 144) = a17;
  *(_BYTE *)(a1 + 145) = a18;
  return a1;
}

void sub_1003C7838(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 24) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003C7854(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_1003C78C8((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1003C78C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  _QWORD v14[3];
  char v15;
  __int128 v16;
  __int128 v17;

  v7 = a7;
  *(_QWORD *)&v17 = a6;
  *((_QWORD *)&v17 + 1) = a7;
  v16 = v17;
  v14[0] = a1;
  v14[1] = &v16;
  v14[2] = &v17;
  if (a3 == a5)
  {
    v12 = a6;
  }
  else
  {
    do
    {
      v8 = *(_QWORD *)(a3 - 152);
      a3 -= 152;
      *(_DWORD *)(v7 - 145) = *(_DWORD *)(a3 + 7);
      *(_QWORD *)(v7 - 152) = v8;
      *(_QWORD *)(v7 - 128) = 0;
      *(_QWORD *)(v7 - 120) = 0;
      *(_QWORD *)(v7 - 136) = 0;
      *(_OWORD *)(v7 - 136) = *(_OWORD *)(a3 + 16);
      *(_QWORD *)(v7 - 120) = *(_QWORD *)(a3 + 32);
      *(_QWORD *)(a3 + 24) = 0;
      *(_QWORD *)(a3 + 32) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      v9 = *(_OWORD *)(a3 + 56);
      v10 = *(_OWORD *)(a3 + 72);
      v11 = *(_OWORD *)(a3 + 88);
      *(_OWORD *)(v7 - 55) = *(_OWORD *)(a3 + 97);
      *(_OWORD *)(v7 - 80) = v10;
      *(_OWORD *)(v7 - 64) = v11;
      *(_OWORD *)(v7 - 96) = v9;
      *(_OWORD *)(v7 - 112) = *(_OWORD *)(a3 + 40);
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 32) = 0;
      *(_OWORD *)(v7 - 32) = *(_OWORD *)(a3 + 120);
      *(_QWORD *)(v7 - 16) = *(_QWORD *)(a3 + 136);
      *(_QWORD *)(a3 + 120) = 0;
      *(_QWORD *)(a3 + 128) = 0;
      *(_QWORD *)(a3 + 136) = 0;
      *(_WORD *)(v7 - 8) = *(_WORD *)(a3 + 144);
      v7 = *((_QWORD *)&v17 + 1) - 152;
      *((_QWORD *)&v17 + 1) -= 152;
    }
    while (a3 != a5);
    v12 = v17;
  }
  v15 = 1;
  sub_1003C79C4((uint64_t)v14);
  return v12;
}

uint64_t sub_1003C79C4(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_1003C79F8((uint64_t *)a1);
  return a1;
}

void sub_1003C79F8(uint64_t *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = *(_QWORD **)(a1[2] + 8);
  v2 = *(_QWORD **)(a1[1] + 8);
  if (v1 != v2)
  {
    v3 = *a1;
    do
    {
      sub_100154434(v3, v1);
      v1 += 19;
    }
    while (v1 != v2);
  }
}

void **sub_1003C7A48(void **a1)
{
  sub_1003C7A78(a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void sub_1003C7A78(_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 152;
    sub_100154434(v4, (_QWORD *)(i - 152));
  }
}

uint64_t sub_1003C7ABC(uint64_t *a1, uint64_t *a2, __int16 *a3, char *a4, uint64_t a5, double *a6, double *a7, double *a8, double *a9, uint64_t a10, uint64_t a11, char *a12, char *a13)
{
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v22;
  double *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  __int16 *v31;
  void *v32;
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t *v36;

  v14 = *a1;
  v15 = 0x86BCA1AF286BCA1BLL * ((a1[1] - *a1) >> 3);
  v16 = v15 + 1;
  if (v15 + 1 > 0x1AF286BCA1AF286)
    sub_100026E7C();
  v22 = a12;
  v23 = a9;
  v24 = (uint64_t)(a1 + 2);
  v25 = 0x86BCA1AF286BCA1BLL * ((a1[2] - v14) >> 3);
  if (2 * v25 > v16)
    v16 = 2 * v25;
  if (v25 >= 0xD79435E50D7943)
    v26 = 0x1AF286BCA1AF286;
  else
    v26 = v16;
  v36 = a1 + 2;
  if (v26)
  {
    v27 = a5;
    v31 = a3;
    v28 = (char *)sub_100152EEC(v24, v26);
    v23 = a9;
    a3 = v31;
    v22 = a12;
    a5 = v27;
  }
  else
  {
    v28 = 0;
  }
  v32 = v28;
  v33 = &v28[152 * v15];
  v34 = (uint64_t)v33;
  v35 = &v28[152 * v26];
  sub_1003C7754((uint64_t)v33, *a2, *a3, *a4, a5, 0, 0, a11, *a6, *a7, *a8, *v23, 0.1, 0.174532925, 0.174532925, 0.0, *v22, *a13);
  v34 = (uint64_t)(v33 + 152);
  sub_1003C7854(a1, &v32);
  v29 = a1[1];
  sub_1003C7A48(&v32);
  return v29;
}

void sub_1003C7C6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_1003C7A48((void **)va);
  _Unwind_Resume(a1);
}

double *sub_1003C7C80(double *a1, _QWORD *a2, _QWORD *a3, uint64_t a4, _QWORD *a5, _QWORD *a6, double a7, double a8)
{
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v23;

  *a1 = 0.0;
  a1[1] = 0.0;
  v23 = 0;
  sub_10013C88C((_QWORD *)a1 + 2, 3uLL, &v23);
  v23 = 0;
  sub_10013C88C((_QWORD *)a1 + 5, 3uLL, &v23);
  v23 = 0;
  sub_10013C88C((_QWORD *)a1 + 8, 4uLL, &v23);
  v23 = 0;
  sub_10013C88C((_QWORD *)a1 + 11, 3uLL, &v23);
  v23 = 0;
  sub_10013C88C((_QWORD *)a1 + 14, 3uLL, &v23);
  v16 = 0;
  *a1 = a7;
  a1[1] = a8;
  v17 = (_QWORD *)*((_QWORD *)a1 + 2);
  *v17 = *a2;
  v17[1] = a2[1];
  v17[2] = a2[2];
  v18 = (_QWORD *)*((_QWORD *)a1 + 5);
  *v18 = *a3;
  v18[1] = a3[1];
  v18[2] = a3[2];
  v19 = *((_QWORD *)a1 + 8);
  do
  {
    *(_QWORD *)(v19 + v16) = *(_QWORD *)(a4 + v16);
    v16 += 8;
  }
  while (v16 != 32);
  v20 = (_QWORD *)*((_QWORD *)a1 + 11);
  *v20 = *a5;
  v20[1] = a5[1];
  v20[2] = a5[2];
  v21 = (_QWORD *)*((_QWORD *)a1 + 14);
  *v21 = *a6;
  v21[1] = a6[1];
  v21[2] = a6[2];
  return a1;
}

void sub_1003C7DF4(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  void **v2;
  void **v3;
  void **v4;
  void **v5;
  void *v7;
  void *v8;
  void *v9;
  void *v10;

  v7 = *v5;
  if (*v5)
  {
    v1[12] = v7;
    operator delete(v7);
  }
  v8 = *v4;
  if (*v4)
  {
    v1[9] = v8;
    operator delete(v8);
  }
  v9 = *v3;
  if (*v3)
  {
    v1[6] = v9;
    operator delete(v9);
  }
  v10 = *v2;
  if (*v2)
  {
    v1[3] = v10;
    operator delete(v10);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1003C7E5C(_QWORD *a1)
{
  uint64_t v1;
  _BOOL4 v2;
  uint64_t v3;
  _BOOL4 v4;

  v1 = 0;
  LOBYTE(v2) = 1;
  do
  {
    v2 = v2 && *(double *)(a1[2] + v1) == 0.0 && *(double *)(a1[5] + v1) == 0.0;
    v1 += 8;
  }
  while (v1 != 24);
  if (!v2)
    return 0;
  v3 = 0;
  LOBYTE(v4) = 1;
  do
  {
    v4 = v4 && *(double *)(a1[8] + v3) == 0.0;
    v3 += 8;
  }
  while (v3 != 32);
  return !v4;
}

__n128 sub_1003C7EE0(uint64_t a1, __int128 *a2, __int128 *a3, __n128 *a4)
{
  __int128 v4;
  __int128 v5;
  __n128 result;

  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  v4 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v4;
  v5 = *a3;
  *(_QWORD *)(a1 + 40) = *((_QWORD *)a3 + 2);
  *(_OWORD *)(a1 + 24) = v5;
  result = *a4;
  *(_QWORD *)(a1 + 64) = a4[1].n128_u64[0];
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t sub_1003C7F24(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = 0;
  *(_QWORD *)a1 = off_1008156E8;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  *(_QWORD *)(a1 + 64) = off_1008156E8;
  v5 = a1 + 64;
  *(_QWORD *)(a1 + 96) = a1 + 104;
  *(_QWORD *)(a1 + 128) = off_1008156E8;
  v6 = a1 + 128;
  *(_QWORD *)(a1 + 160) = a1 + 168;
  *(_QWORD *)(a1 + 24) = 0x100000003;
  *(_OWORD *)(a1 + 8) = xmmword_100478880;
  *(_QWORD *)(a1 + 88) = 0x100000003;
  *(_OWORD *)(a1 + 72) = xmmword_100478880;
  *(_QWORD *)(a1 + 152) = 0x100000003;
  *(_OWORD *)(a1 + 136) = xmmword_100478880;
  do
  {
    v7 = *(_QWORD *)(a2 + 8 * v4);
    *(_QWORD *)sub_10030E194(a1, v4) = v7;
    v8 = a2 + 8 * v4;
    v9 = *(_QWORD *)(v8 + 24);
    *(_QWORD *)sub_10030E194(v5, v4) = v9;
    v10 = *(_QWORD *)(v8 + 48);
    *(_QWORD *)sub_10030E194(v6, v4++) = v10;
  }
  while (v4 != 3);
  return a1;
}

void sub_1003C800C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  v1[16] = off_100807398;
  v1[8] = off_100807398;
  *v1 = off_100807398;
  _Unwind_Resume(a1);
}

uint64_t sub_1003C8028(_QWORD *a1, double *a2)
{
  sub_1001CF89C(a1 + 6, a2);
  return sub_1003C8058(a1, (uint64_t)a2);
}

uint64_t sub_1003C8058(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;

  v4 = a1[1];
  v5 = a1[2];
  v6 = 30 * ((v5 - v4) >> 3) - 1;
  if (v5 == v4)
    v6 = 0;
  if (v6 == a1[5] + a1[4])
  {
    sub_1003C8470(a1);
    v4 = a1[1];
    v5 = a1[2];
  }
  if (v5 == v4)
  {
    v8 = 0;
  }
  else
  {
    v7 = a1[5] + a1[4];
    v8 = *(_QWORD *)(v4 + 8 * (v7 / 0x1E)) + 136 * (v7 % 0x1E);
  }
  result = sub_1003B0780(v8, a2);
  ++a1[5];
  return result;
}

uint64_t sub_1003C8104(int64x2_t *a1)
{
  uint64_t result;

  result = sub_1003C8354((uint64_t)a1);
  if (result)
  {
    sub_1003C8174(a1);
    a1[5] = vaddq_s64(a1[5], (int64x2_t)xmmword_10046C2B0);
    return sub_1001CFCA4((uint64_t)a1[3].i64, 1);
  }
  return result;
}

BOOL sub_1003C8158(uint64_t a1)
{
  return sub_1003C8354(a1) == 0;
}

uint64_t sub_1003C8174(int64x2_t *a1)
{
  sub_100152DA0((uint64_t)&a1[2].i64[1], (_QWORD *)(*(_QWORD *)(a1->i64[1] + 8 * (a1[2].i64[0] / 0x1EuLL)) + 136 * (a1[2].i64[0] % 0x1EuLL)));
  a1[2] = vaddq_s64(a1[2], (int64x2_t)xmmword_10046C2B0);
  return sub_1003C8784((uint64_t)a1, 1);
}

void sub_1003C81E0(_QWORD *a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  void **v5;
  char *v6;
  unint64_t v7;
  char *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void **v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (!sub_1003C8354((uint64_t)a1))
    return;
  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  if (v3 == v2)
  {
    v3 = (void **)a1[1];
  }
  else
  {
    v4 = a1[4];
    v5 = &v2[v4 / 0x1E];
    v6 = (char *)*v5 + 136 * (v4 % 0x1E);
    v7 = (unint64_t)v2[(a1[5] + v4) / 0x1E] + 136 * ((a1[5] + v4) % 0x1E);
    if (v6 != (char *)v7)
    {
      do
      {
        sub_100152DA0((uint64_t)(a1 + 5), v6);
        v6 += 136;
        if (v6 - (_BYTE *)*v5 == 4080)
        {
          v8 = (char *)v5[1];
          ++v5;
          v6 = v8;
        }
      }
      while (v6 != (char *)v7);
      v2 = (void **)a1[1];
      v3 = (void **)a1[2];
    }
  }
  a1[5] = 0;
  v9 = (char *)v3 - (char *)v2;
  if (v9 >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v10 = a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v9 = v10 - (_QWORD)v2;
    }
    while (v9 > 0x10);
  }
  if (v9 >> 3 == 1)
  {
    v11 = 15;
    goto LABEL_15;
  }
  if (v9 >> 3 == 2)
  {
    v11 = 30;
LABEL_15:
    a1[4] = v11;
  }
  v12 = (void **)a1[7];
  v13 = a1[8];
  a1[11] = 0;
  v14 = v13 - (_QWORD)v12;
  if (v14 >= 0x11)
  {
    do
    {
      operator delete(*v12);
      v15 = a1[8];
      v12 = (void **)(a1[7] + 8);
      a1[7] = v12;
      v14 = v15 - (_QWORD)v12;
    }
    while (v14 > 0x10);
  }
  if (v14 >> 3 == 1)
  {
    v16 = 256;
  }
  else
  {
    if (v14 >> 3 != 2)
      return;
    v16 = 512;
  }
  a1[10] = v16;
}

uint64_t sub_1003C8354(uint64_t a1)
{
  uint64_t result;
  std::runtime_error *exception;

  result = *(_QWORD *)(a1 + 40);
  if (result != *(_QWORD *)(a1 + 88))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "IMU data buffer and time buffer have different sizes.");
  }
  return result;
}

void sub_1003C83B0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1003C83C4(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  sub_10015453C((uint64_t *)(a1 + 16), a2 + 16);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  return a1;
}

double sub_1003C8440(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 96) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

_QWORD *sub_1003C8458@<X0>(char a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, (&off_1008194C0)[a1]);
}

void sub_1003C8470(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x1E;
  v4 = v2 - 30;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10005538C(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0xFF0uLL);
      sub_1001389D0(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0xFF0uLL);
    sub_100138AE4((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10005538C((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_10005538C((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0xFF0uLL);
  sub_100138C00(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_100138D14((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_1003C8738(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_1003C8784(uint64_t a1, int a2)
{
  unint64_t v2;
  int v4;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2 < 0x1E)
    a2 = 1;
  if (v2 < 0x3C)
    v4 = a2;
  else
    v4 = 0;
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(_QWORD *)(a1 + 8) += 8;
    *(_QWORD *)(a1 + 32) -= 30;
  }
  return v4 ^ 1u;
}

uint64_t sub_1003C87E0@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  __int128 *v3;
  char v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;

  if ((_DWORD)result == 1)
  {
    if (a2 <= 99)
    {
      if (a2 > 0x17)
        return result;
      if (((1 << a2) & 0xFFFF80) == 0)
      {
        v3 = &xmmword_10072C600;
LABEL_20:
        v5 = v3[9];
        *(_OWORD *)(a3 + 128) = v3[8];
        *(_OWORD *)(a3 + 144) = v5;
        *(_OWORD *)(a3 + 160) = v3[10];
        *(_QWORD *)(a3 + 176) = *((_QWORD *)v3 + 22);
        v6 = v3[5];
        *(_OWORD *)(a3 + 64) = v3[4];
        *(_OWORD *)(a3 + 80) = v6;
        v7 = v3[7];
        *(_OWORD *)(a3 + 96) = v3[6];
        *(_OWORD *)(a3 + 112) = v7;
        v8 = v3[1];
        *(_OWORD *)a3 = *v3;
        *(_OWORD *)(a3 + 16) = v8;
        v9 = v3[2];
        v10 = v3[3];
        v4 = 1;
        *(_OWORD *)(a3 + 32) = v9;
        *(_OWORD *)(a3 + 48) = v10;
        goto LABEL_13;
      }
LABEL_12:
      v4 = 0;
      *(_BYTE *)a3 = 0;
LABEL_13:
      *(_BYTE *)(a3 + 184) = v4;
      return result;
    }
LABEL_7:
    if (a2 > 199)
    {
      if ((a2 - 200) >= 2 && a2 != 997 && a2 != 999)
        return result;
    }
    else if ((a2 - 100) >= 0x16)
    {
      return result;
    }
    goto LABEL_12;
  }
  if ((_DWORD)result)
    return result;
  if (a2 > 99)
    goto LABEL_7;
  switch(a2)
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      v3 = &xmmword_10072C548;
      goto LABEL_20;
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
      goto LABEL_12;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1003C88D8(uint64_t a1)
{
  uint64_t v2;
  int i;
  int j;
  void **v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (**v11)();
  __int128 v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;

  *(_BYTE *)a1 = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_QWORD *)(a1 + 64) = off_100815730;
  v2 = a1 + 64;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 88) = 0x300000003;
  *(_OWORD *)(a1 + 72) = xmmword_100478B80;
  *(_QWORD *)(a1 + 96) = a1 + 104;
  sub_10030DD0C((_DWORD *)(a1 + 64), 3, 3);
  sub_10030DD58(v2, 0.0);
  for (i = 0; i != 3; ++i)
    *(_QWORD *)sub_100346AA0(v2, i, i) = 0x3FF0000000000000;
  *(_BYTE *)a1 = 0;
  *(_QWORD *)(a1 + 56) = 0;
  v13 = 0x300000003;
  v11 = off_100815730;
  v12 = xmmword_100478B80;
  v14 = &v15;
  sub_10030DD0C(&v11, 3, 3);
  sub_10030DD58((uint64_t)&v11, 0.0);
  for (j = 0; j != 3; ++j)
    *(_QWORD *)sub_100346AA0((uint64_t)&v11, j, j) = 0x3FF0000000000000;
  sub_10030EC4C(v2, (uint64_t)&v11);
  v5 = *(void ***)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 48) = 0;
  v7 = v6 - (_QWORD)v5;
  if (v7 >= 0x11)
  {
    do
    {
      operator delete(*v5);
      v8 = *(_QWORD *)(a1 + 24);
      v5 = (void **)(*(_QWORD *)(a1 + 16) + 8);
      *(_QWORD *)(a1 + 16) = v5;
      v7 = v8 - (_QWORD)v5;
    }
    while (v7 > 0x10);
  }
  if (v7 >> 3 == 1)
  {
    v9 = 256;
    goto LABEL_11;
  }
  if (v7 >> 3 == 2)
  {
    v9 = 512;
LABEL_11:
    *(_QWORD *)(a1 + 40) = v9;
  }
  return a1;
}

void sub_1003C8A70(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  *v2 = off_100807398;
  sub_100152A44(v1);
  _Unwind_Resume(a1);
}

void sub_1003C8AA4(int a1, NSObject *a2)
{
  _DWORD v2[2];

  v2[0] = 67109120;
  v2[1] = a1;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "Accepting connection from an entitled client with pid %d", (uint8_t *)v2, 8u);
  sub_10000991C();
}

void sub_1003C8B14(int a1, NSObject *a2)
{
  _DWORD v2[2];

  v2[0] = 67109120;
  v2[1] = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Entitlement check failed! - rejecting unentitled client with pid %d", (uint8_t *)v2, 8u);
  sub_10000991C();
}

void sub_1003C8B84(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "[PRBTRangingService] shouldAcceptNewConnection", v1, 2u);
  sub_10000991C();
}

void sub_1003C8BC0(int a1, NSObject *a2)
{
  _DWORD v2[2];

  v2[0] = 67109120;
  v2[1] = a1;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "Accepting connection from an entitled client with pid %d", (uint8_t *)v2, 8u);
  sub_10000991C();
}

void sub_1003C8C30(int a1, NSObject *a2)
{
  _DWORD v2[2];

  v2[0] = 67109120;
  v2[1] = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Entitlement check failed! - rejecting unentitled client with pid %d", (uint8_t *)v2, 8u);
  sub_10000991C();
}

void sub_1003C8CA0(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "[PRDiagnosticsService] shouldAcceptNewConnection", v1, 2u);
  sub_10000991C();
}

void sub_1003C8CDC(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10000BFB4((void *)&_mh_execute_header, a2, a3, "Failed to accept user provided global debug configuration. Error: %@", a5, a6, a7, a8, 2u);
  sub_10000BFC4();
}

void sub_1003C8D40(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "#reg-assist, given nil iso code.", v1, 2u);
  sub_10000991C();
}

void sub_1003C8D7C(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10000BFB4((void *)&_mh_execute_header, a2, a3, "#reg-assist, failed inject iso code: %@.", a5, a6, a7, a8, 2u);
  sub_10000BFC4();
}

void sub_1003C8DE0(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10000BFB4((void *)&_mh_execute_header, a2, a3, "#reg-assist, Unentitled client attempted to inject iso code. %@", a5, a6, a7, a8, 2u);
  sub_10000BFC4();
}

void sub_1003C8E44()
{
  __assert_rtn("-[PRDiagnosticsService publishBytes:amount:]", "PRDiagnosticsService.mm", 498, "amount <= kRemoteProtobufMaxMessageSize");
}

void sub_1003C8E6C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100010AB8((void *)&_mh_execute_header, v0, v1, "#ble,CBSpatial interrupted.", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003C8E98()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AA8(__stack_chk_guard);
  sub_100010AD4();
  sub_10000BFB4((void *)&_mh_execute_header, v0, v1, "#ble,setDeviceRelationshipFlags failed, state is %s", v2, v3, v4, v5, v6);
  sub_10000BFC4();
}

void sub_1003C8F14(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100010B04((void *)&_mh_execute_header, a2, a3, "#ble,setDeviceRelationshipFlags[0x%08x] waiting for activation complete", a5, a6, a7, a8, 0);
  sub_10000991C();
}

void sub_1003C8F78(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100010B04((void *)&_mh_execute_header, a2, a3, "#ble,setDeviceRelationshipFlags[0x%08x]", a5, a6, a7, a8, 0);
  sub_10000991C();
}

void sub_1003C8FDC(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10000BFB4((void *)&_mh_execute_header, a1, a3, "#ble,Activation failed [%0.6f s] - no token", a5, a6, a7, a8, 0);
  sub_10000BFC4();
}

void sub_1003C9044(uint64_t a1, NSObject *a2, uint64_t a3, double a4)
{
  int v4;
  double v5;
  __int16 v6;
  uint64_t v7;

  v4 = 134218242;
  v5 = a4;
  v6 = 2112;
  v7 = a1;
  sub_100010AC8((void *)&_mh_execute_header, a2, a3, "#ble,Activation failed [%0.6f s]. Error: %@", (uint8_t *)&v4);
  sub_10000BFC4();
}

void sub_1003C90B8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  const char *v6;
  int v7;
  const char *v8;
  __int16 v9;
  uint64_t v10;

  sub_100010AA8(__stack_chk_guard);
  if (!v5 & v4)
    v6 = "Unknown";
  else
    v6 = off_1007FA1A0[v2];
  v7 = 136315394;
  v8 = v6;
  v9 = 2048;
  v10 = v3;
  sub_100010AC8((void *)&_mh_execute_header, v0, v1, "#ble,Activation completed but session in unexpected state %s [%0.6f s]", (uint8_t *)&v7);
  sub_10000BFC4();
}

void sub_1003C9148()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint8_t *v7;
  NSObject *v8;

  sub_100010AEC();
  sub_100010B14(5.8081e-34, v1, v2, v3, v4, v5);
  sub_100010AC8((void *)&_mh_execute_header, v8, v6, "#ble,addPeerToken %{private}@ failed, state is %s", v7);

}

void sub_1003C91A8()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint8_t *v7;
  NSObject *v8;

  sub_100010AEC();
  sub_100010B14(5.8081e-34, v1, v2, v3, v4, v5);
  sub_100010AC8((void *)&_mh_execute_header, v8, v6, "#ble,removePeerToken %{private}@ failed, state is %s", v7);

}

void sub_1003C9208()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AA8(__stack_chk_guard);
  sub_100010AD4();
  sub_10000BFB4((void *)&_mh_execute_header, v0, v1, "#ble,startAdvertising failed, state is %s", v2, v3, v4, v5, v6);
  sub_10000BFC4();
}

void sub_1003C9284()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AA8(__stack_chk_guard);
  sub_100010AD4();
  sub_10000BFB4((void *)&_mh_execute_header, v0, v1, "#ble,stopAdvertising failed, state is %s", v2, v3, v4, v5, v6);
  sub_10000BFC4();
}

void sub_1003C9300()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AA8(__stack_chk_guard);
  sub_100010AD4();
  sub_10000BFB4((void *)&_mh_execute_header, v0, v1, "#ble,startScanning failed, state is %s", v2, v3, v4, v5, v6);
  sub_10000BFC4();
}

void sub_1003C937C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AA8(__stack_chk_guard);
  sub_100010AD4();
  sub_10000BFB4((void *)&_mh_execute_header, v0, v1, "#ble,startAdvertisingBurstForDeviceDiscovery failed, state is %s", v2, v3, v4, v5, v6);
  sub_10000BFC4();
}

void sub_1003C93F8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100010AB8((void *)&_mh_execute_header, v0, v1, "#ble,startAdvertisingBurstForDeviceDiscovery without currently advertising", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003C9424()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AA8(__stack_chk_guard);
  sub_100010AD4();
  sub_10000BFB4((void *)&_mh_execute_header, v0, v1, "#ble,clearWifiRangingActiveAdvertisement failed, state is %s", v2, v3, v4, v5, v6);
  sub_10000BFC4();
}

void sub_1003C94A0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100010AB8((void *)&_mh_execute_header, v0, v1, "#ble,setWifiRangingActiveAdvertisement not allowed", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003C94CC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AA8(__stack_chk_guard);
  sub_100010AD4();
  sub_10000BFB4((void *)&_mh_execute_header, v0, v1, "#ble,setWifiRangingActiveAdvertisement failed, state is %s", v2, v3, v4, v5, v6);
  sub_10000BFC4();
}

void sub_1003C9548()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AA8(__stack_chk_guard);
  sub_100010AD4();
  sub_10000BFB4((void *)&_mh_execute_header, v0, v1, "#ble,startScanningWithBurstPeriod failed, state is %s", v2, v3, v4, v5, v6);
  sub_10000BFC4();
}

void sub_1003C95C4()
{
  NSObject *v0;
  uint8_t v1[24];

  sub_100010B44();
  sub_100010B2C();
  sub_100010AC8((void *)&_mh_execute_header, v0, (uint64_t)v0, "#ble,stopScanningAndRemovePeers[%s] failed, state is %s", v1);
  sub_10000BFC4();
}

void sub_1003C965C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100010AB8((void *)&_mh_execute_header, v0, v1, "#ble,PRBLEDiscoverySession nil addrBytes", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003C9688(uint8_t *buf, uint64_t a2, os_log_t log)
{
  *(_DWORD *)buf = 134218240;
  *(_QWORD *)(buf + 4) = a2;
  *((_WORD *)buf + 6) = 1024;
  *(_DWORD *)(buf + 14) = 6;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "#ble,PRBLEDiscoverySession addrBytes length %lu does not match expected value of %d", buf, 0x12u);
}

void sub_1003C96DC()
{
  NSObject *v0;
  uint8_t v1[24];

  sub_100010B44();
  sub_100010B2C();
  sub_100010AC8((void *)&_mh_execute_header, v0, (uint64_t)v0, "#ble,allowScreenOffOperation[%s] failed, state is %s", v1);
  sub_10000BFC4();
}

void sub_1003C9774()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AA8(__stack_chk_guard);
  sub_100010AD4();
  sub_10000BFB4((void *)&_mh_execute_header, v0, v1, "#ble,setBleRSSIThresholdHint failed, state is %s", v2, v3, v4, v5, v6);
  sub_10000BFC4();
}

void sub_1003C97F0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100010AB8((void *)&_mh_execute_header, v0, v1, "#ble,Discovered device with invalid btAddressData.", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003C981C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100010AB8((void *)&_mh_execute_header, v0, v1, "#ble,Lost device with invalid btAddressData.", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003C9848(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10000BFB4((void *)&_mh_execute_header, a2, a3, "#ble,CBSpatial did fail with error: %@", a5, a6, a7, a8, 2u);
  sub_10000BFC4();
}

void sub_1003C98AC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100010AB8((void *)&_mh_execute_header, v0, v1, "[Debug Options] No user debug options provided.", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003C98D8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100010AB8((void *)&_mh_execute_header, v0, v1, "[Range Params] interval_min_ms must be less than or equal to interval_max_ms.", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003C9904(uint64_t a1, int a2)
{
  int v2;
  os_log_t v3;
  uint8_t *v4;

  sub_1000136E0(a1, a2, 1.5047e-36);
  sub_1000136D0((void *)&_mh_execute_header, v2, v3, "[Range Params] got invalid interval_max_ms: %d", v4);
}

void sub_1003C9938(uint64_t a1, int a2)
{
  int v2;
  os_log_t v3;
  uint8_t *v4;

  sub_1000136E0(a1, a2, 1.5047e-36);
  sub_1000136D0((void *)&_mh_execute_header, v2, v3, "[Range Params] got invalid interval_min_ms: %d", v4);
}

void sub_1003C996C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100010AB8((void *)&_mh_execute_header, v0, v1, "[Range Params] naccess_slots_min must equal naccess_slots_max for initiator.", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003C9998()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100010AB8((void *)&_mh_execute_header, v0, v1, "[Range Params] naccess_slots_min must be less than or equal to naccess_slots_max for responder.", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003C99C4(uint64_t a1, int a2)
{
  int v2;
  os_log_t v3;
  uint8_t *v4;

  sub_1000136E0(a1, a2, 1.5047e-36);
  sub_1000136D0((void *)&_mh_execute_header, v2, v3, "[Range Params] got invalid naccess_slots_min: %d", v4);
}

void sub_1003C99F8(uint64_t a1, int a2)
{
  int v2;
  os_log_t v3;
  uint8_t *v4;

  sub_1000136E0(a1, a2, 1.5047e-36);
  sub_1000136D0((void *)&_mh_execute_header, v2, v3, "[Range Params] got invalid dual_ranging_enable: %d", v4);
}

void sub_1003C9A2C(uint64_t a1, int a2)
{
  int v2;
  os_log_t v3;
  uint8_t *v4;

  sub_1000136E0(a1, a2, 1.5047e-36);
  sub_1000136D0((void *)&_mh_execute_header, v2, v3, "[Range Params] got invalid debug_flags: %d", v4);
}

void sub_1003C9A60(uint64_t a1, int a2)
{
  int v2;
  os_log_t v3;
  uint8_t *v4;

  sub_1000136E0(a1, a2, 1.5047e-36);
  sub_1000136D0((void *)&_mh_execute_header, v2, v3, "[Range Params] got invalid rx_pkt_type: %d", v4);
}

void sub_1003C9A94(uint64_t a1, int a2)
{
  int v2;
  os_log_t v3;
  uint8_t *v4;

  sub_1000136E0(a1, a2, 1.5047e-36);
  sub_1000136D0((void *)&_mh_execute_header, v2, v3, "[Range Params] got invalid tx_pkt_type: %d", v4);
}

void sub_1003C9AC8(uint64_t a1, int a2)
{
  int v2;
  os_log_t v3;
  uint8_t *v4;

  sub_1000136E0(a1, a2, 1.5047e-36);
  sub_1000136D0((void *)&_mh_execute_header, v2, v3, "[Range Params] got invalid rx_preamble: %d", v4);
}

void sub_1003C9AFC(uint64_t a1, int a2)
{
  int v2;
  os_log_t v3;
  uint8_t *v4;

  sub_1000136E0(a1, a2, 1.5047e-36);
  sub_1000136D0((void *)&_mh_execute_header, v2, v3, "[Range Params] got invalid tx_preamble: %d", v4);
}

void sub_1003C9B30(uint64_t a1, int a2)
{
  int v2;
  os_log_t v3;
  uint8_t *v4;

  sub_1000136E0(a1, a2, 1.5047e-36);
  sub_1000136D0((void *)&_mh_execute_header, v2, v3, "[Range Params] got invalid rx_sync_search_ant_mask2: 0x%x", v4);
}

void sub_1003C9B64(uint64_t a1, int a2)
{
  int v2;
  os_log_t v3;
  uint8_t *v4;

  sub_1000136E0(a1, a2, 1.5047e-36);
  sub_1000136D0((void *)&_mh_execute_header, v2, v3, "[Range Params] got invalid rx_ant_mask2: 0x%x", v4);
}

void sub_1003C9B98(uint64_t a1, int a2)
{
  int v2;
  os_log_t v3;
  uint8_t *v4;

  sub_1000136E0(a1, a2, 1.5047e-36);
  sub_1000136D0((void *)&_mh_execute_header, v2, v3, "[Range Params] got invalid tx_ant_mask2: 0x%x", v4);
}

void sub_1003C9BCC(uint64_t a1, int a2)
{
  int v2;
  os_log_t v3;
  uint8_t *v4;

  sub_1000136E0(a1, a2, 1.5047e-36);
  sub_1000136D0((void *)&_mh_execute_header, v2, v3, "[Range Params] got invalid rx_sync_search_ant_mask: 0x%x", v4);
}

void sub_1003C9C00(uint64_t a1, int a2)
{
  int v2;
  os_log_t v3;
  uint8_t *v4;

  sub_1000136E0(a1, a2, 1.5047e-36);
  sub_1000136D0((void *)&_mh_execute_header, v2, v3, "[Range Params] got invalid rx_ant_mask: 0x%x", v4);
}

void sub_1003C9C34(uint64_t a1, int a2)
{
  int v2;
  os_log_t v3;
  uint8_t *v4;

  sub_1000136E0(a1, a2, 1.5047e-36);
  sub_1000136D0((void *)&_mh_execute_header, v2, v3, "[Range Params] got invalid tx_ant_mask: 0x%x", v4);
}

void sub_1003C9C68(uint64_t a1, int a2)
{
  int v2;
  os_log_t v3;
  uint8_t *v4;

  sub_1000136E0(a1, a2, 1.5047e-36);
  sub_1000136D0((void *)&_mh_execute_header, v2, v3, "[Range Params] got invalid role: %d", v4);
}

void sub_1003C9C9C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10001B110();
  sub_10000BFB4((void *)&_mh_execute_header, v0, v1, "PRCompanionRanging: actOnRemoteObjectWithBarrierBlock failed. Error: %@", v2, v3, v4, v5, v6);
  sub_10000BFC4();
}

void sub_1003C9CFC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100010AB8((void *)&_mh_execute_header, v0, v1, "Unexpected PRRangingRequestStatusDidStart #companion-retry", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003C9D28()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100010AB8((void *)&_mh_execute_header, v0, v1, "Unexpected PRRangingRequestStatusFailedToStart #companion-retry", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003C9D54()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100010AB8((void *)&_mh_execute_header, v0, v1, "Unexpected PRRangingRequestStatusStopped #companion-retry", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003C9D80()
{
  os_log_t v0;
  uint8_t v1[16];

  sub_100010AE0();
  _os_log_fault_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "didReceiveSessionStartNotification: unexpected PRSessionStartNotification properties.", v1, 2u);
  sub_10000991C();
}

void sub_1003C9DB8(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100010B04((void *)&_mh_execute_header, a2, a3, "PRRangingManager didReceiveSessionStartNotification but _companionRangingState (%d) != CompanionRangingState::STOPPED #companion-retry", a5, a6, a7, a8, 0);
  sub_10000991C();
}

void sub_1003C9E20(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100010B04((void *)&_mh_execute_header, a2, a3, "PRRangingManager didReceiveSessionStartNotification but _localRangingState (%d) != CompanionRangingState::STARTING #companion-retry", a5, a6, a7, a8, 0);
  sub_10000991C();
}

void sub_1003C9E88()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10001B110();
  sub_10000BFB4((void *)&_mh_execute_header, v0, v1, "PRCompanionRangingClientProxy failed to parse range enable parameters. Error: %@", v2, v3, v4, v5, v6);
  sub_10000BFC4();
}

void sub_1003C9EE8()
{
  uint64_t v0;
  os_log_t v1;

  sub_10001B0E4();
  sub_10001B0D0((void *)&_mh_execute_header, v0, v1, "CLFindMyAccessoryManager failed with error: %@, for device: %@");
  sub_10000BFC4();
}

void sub_1003C9F48()
{
  uint64_t v0;
  os_log_t v1;

  sub_10001B0E4();
  sub_10001B0D0((void *)&_mh_execute_header, v0, v1, "CLFindMyAccessoryManager failed to connect to peer: %@, error: %@");
  sub_10000BFC4();
}

void sub_1003C9FA8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100010AB8((void *)&_mh_execute_header, v0, v1, "Disconnected while connecting", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003C9FD4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100010AB8((void *)&_mh_execute_header, v0, v1, "Disconnected while rose activity incomplete", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003CA000()
{
  uint64_t v0;
  os_log_t v1;

  sub_10001B0E4();
  sub_10001B0D0((void *)&_mh_execute_header, v0, v1, "CLFindMyAccessoryManager failed to configure ranging parameters on peer: %@, error: %@");
  sub_10000BFC4();
}

void sub_1003CA060()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100010AB8((void *)&_mh_execute_header, v0, v1, "Unexpected didConfigureRangingOnDevice", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003CA08C()
{
  uint64_t v0;
  os_log_t v1;

  sub_10001B11C();
  sub_10001B0FC((void *)&_mh_execute_header, v0, v1, "CLFindMyAccessoryManager failed to initialize ranging on device: %@, errNo: %i");
  sub_10000BFC4();
}

void sub_1003CA0EC()
{
  uint64_t v0;
  os_log_t v1;

  sub_10001B0E4();
  sub_10001B0D0((void *)&_mh_execute_header, v0, v1, "CLFindMyAccessoryManager failed to initialize ranging on device: %@, error: %@");
  sub_10000BFC4();
}

void sub_1003CA14C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100010AB8((void *)&_mh_execute_header, v0, v1, "Unexpected didInitRangingOnDevice", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003CA178()
{
  uint64_t v0;
  os_log_t v1;

  sub_10001B0E4();
  sub_10001B0D0((void *)&_mh_execute_header, v0, v1, "CLFindMyAccessoryManager failed to stop Rose on device: %@, error: %@");
  sub_10000BFC4();
}

void sub_1003CA1D8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100010AB8((void *)&_mh_execute_header, v0, v1, "Unexpected didDeinitRangingOnDevice", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003CA204()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100010AB8((void *)&_mh_execute_header, v0, v1, "Unexpected didStartRangingOnDevice", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003CA230(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100010B04((void *)&_mh_execute_header, a2, a3, "CLFindMyAccessoryManager failed to complete ranging on device. error: %i", a5, a6, a7, a8, 0);
  sub_10000991C();
}

void sub_1003CA294()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100010AB8((void *)&_mh_execute_header, v0, v1, "Unexpected didCompleteRoseRangingOnDevice", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003CA2C0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100010AB8((void *)&_mh_execute_header, v0, v1, "Unexpected didReceiveRangingTimestampsFromDevice", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003CA2EC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100010AB8((void *)&_mh_execute_header, v0, v1, "Unexpected didPrepareForStartRangingOnDevice", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003CA318()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100010AB8((void *)&_mh_execute_header, v0, v1, "Received didPrepareForStartRangingOnDevice with error", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003CA344(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10001C964((void *)&_mh_execute_header, a2, a3, "Unexpected activity state %ld", a5, a6, a7, a8, 0);
}

void sub_1003CA3AC(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100010AB8((void *)&_mh_execute_header, a1, a3, "failed to fetch power stats during activity", a5, a6, a7, a8, 0);
  sub_10000991C();
}

void sub_1003CA3DC(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100010AB8((void *)&_mh_execute_header, a1, a3, "unable to proceed with power stats query", a5, a6, a7, a8, 0);
  sub_10000991C();
}

void sub_1003CA40C(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10001C964((void *)&_mh_execute_header, a2, a3, "tried to run unrecognized activity %@", a5, a6, a7, a8, 2u);
}

void sub_1003CA474(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100010AB8((void *)&_mh_execute_header, a1, a3, "#heartbeat unable to wake UWB chip for DSLP heartbeat", a5, a6, a7, a8, 0);
  sub_10000991C();
}

void sub_1003CA4A4(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100010B04((void *)&_mh_execute_header, a1, a3, "#wifi-service,Self ID must be %d bytes long", a5, a6, a7, a8, 0);
  sub_10000991C();
}

void sub_1003CA510()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100010AB8((void *)&_mh_execute_header, v0, v1, "#wifi-service,Could not get wifi chipset or product type. Assuming incapable of wifi ranging.", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003CA53C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100010AB8((void *)&_mh_execute_header, v0, v1, "#wifi-service,startRanging called with empty peer list", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003CA568()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100010AB8((void *)&_mh_execute_header, v0, v1, "#wifi-service,list of peers have unspecified roles", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003CA594()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100010AB8((void *)&_mh_execute_header, v0, v1, "#wifi-service,self role was unspecified yet the peer map isn't empty!", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003CA5C0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100010AB8((void *)&_mh_execute_header, v0, v1, "#wifi-service,list of peers request responding but current role is initiating", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003CA5EC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100010AB8((void *)&_mh_execute_header, v0, v1, "#wifi-service,list of peers request initiating but current role is responding", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003CA618()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100010AB8((void *)&_mh_execute_header, v0, v1, "#wifi-service,list of peers have mismatched roles", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003CA644()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100010AB8((void *)&_mh_execute_header, v0, v1, "#wifi-service,wifi ranging peer map was empty but the role was not unspecified", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003CA670(_BYTE *a1, _BYTE *a2)
{
  NSObject *v2;
  uint8_t *v3;

  sub_100029D74(a1, a2);
  sub_100029D00((void *)&_mh_execute_header, v2, (uint64_t)v2, "#wifi-service,part of a peer was nil! not addding to peer map", v3);
}

void sub_1003CA69C()
{
  void *v0;
  uint64_t v1;
  float *v2;
  _QWORD *v3;
  uint8_t *v4;
  NSObject *v5;

  sub_100029D50();
  sub_100029D68(v1, v2, v3, 5.7779e-34);
  sub_100029D0C((void *)&_mh_execute_header, "#wifi-service,peer %@ added multiple times with different secure ranging keys", v4, v5);

  sub_100029D60();
}

void sub_1003CA6D8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100010AB8((void *)&_mh_execute_header, v0, v1, "#wifi-service,attempted to stop when there is no active ranging request", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003CA704()
{
  void *v0;
  uint64_t v1;
  float *v2;
  _QWORD *v3;
  uint8_t *v4;
  NSObject *v5;

  sub_100029D50();
  sub_100029D68(v1, v2, v3, 5.7779e-34);
  sub_100029D0C((void *)&_mh_execute_header, "#wifi-service,no map entry found when attempting to erase peer %@", v4, v5);

  sub_100029D60();
}

void sub_1003CA740()
{
  void *v0;
  uint64_t v1;
  float *v2;
  _QWORD *v3;
  uint8_t *v4;
  NSObject *v5;

  sub_100029D50();
  sub_100029D68(v1, v2, v3, 5.7779e-34);
  sub_100029D0C((void *)&_mh_execute_header, "#wifi-service,found a map entry for %@ but no peers were erased", v4, v5);

  sub_100029D60();
}

void sub_1003CA77C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100010AB8((void *)&_mh_execute_header, v0, v1, "#wifi-service,WiFiManagerClientCreate returned NULL", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003CA7A8(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10001C964((void *)&_mh_execute_header, a1, a3, "#wifi-service,%s: Error destroying attribute", a5, a6, a7, a8, 2u);
  sub_10000BFC4();
}

void sub_1003CA818(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10001C964((void *)&_mh_execute_header, a1, a3, "#wifi-service,%s: Error creating thread", a5, a6, a7, a8, 2u);
  sub_10000BFC4();
}

void sub_1003CA888(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10001C964((void *)&_mh_execute_header, a1, a3, "#wifi-service,%s: Error setting detacheble", a5, a6, a7, a8, 2u);
  sub_10000BFC4();
}

void sub_1003CA8F8(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10001C964((void *)&_mh_execute_header, a1, a3, "#wifi-service,%s: Error init attribute", a5, a6, a7, a8, 2u);
  sub_10000BFC4();
}

void sub_1003CA968()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100010AB8((void *)&_mh_execute_header, v0, v1, "#wifi-service,Still not attached! Releasing wifi manager to start over", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003CA994()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100010AB8((void *)&_mh_execute_header, v0, v1, "#wifi-service,Found interface attachment through manual check", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003CA9C0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100010AB8((void *)&_mh_execute_header, v0, v1, "#wifi-service,Ranging unsupported", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003CA9EC()
{
  void *v0;
  uint64_t v1;
  float *v2;
  _QWORD *v3;
  uint8_t *v4;
  NSObject *v5;

  sub_100029D50();
  sub_100029D68(v1, v2, v3, 5.7779e-34);
  sub_100029D0C((void *)&_mh_execute_header, "#wifi-service,error callback is nullptr for peer ID: %@", v4, v5);

  sub_100029D60();
}

void sub_1003CAA28()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100010AB8((void *)&_mh_execute_header, v0, v1, "#wifi-service,Resetting state after reporting errors to all clients", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003CAA54()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100010AB8((void *)&_mh_execute_header, v0, v1, "#wifi-service,no awdl device", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003CAA80()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029D84();
  sub_100010B04((void *)&_mh_execute_header, v0, v1, "#wifi-service,Start network failed: %d", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003CAAE0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100010AB8((void *)&_mh_execute_header, v0, v1, "#wifi-service,Start network failed: kA11OpNotPermitted; retrying",
    v2,
    v3,
    v4,
    v5,
    v6);
  sub_10000991C();
}

void sub_1003CAB0C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100010AB8((void *)&_mh_execute_header, v0, v1, "#wifi-service,Start network failed: EPERM; missing entitlement?",
    v2,
    v3,
    v4,
    v5,
    v6);
  sub_10000991C();
}

void sub_1003CAB38()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100010AB8((void *)&_mh_execute_header, v0, v1, "#wifi-service,Start network failed: EALREADY; we must have tried to start already and will wait for the callback",
    v2,
    v3,
    v4,
    v5,
    v6);
  sub_10000991C();
}

void sub_1003CAB64()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100010AB8((void *)&_mh_execute_header, v0, v1, "#wifi-service,Start network failed: EPWROFF; cannot range when power is off",
    v2,
    v3,
    v4,
    v5,
    v6);
  sub_10000991C();
}

void sub_1003CAB90()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100010AB8((void *)&_mh_execute_header, v0, v1, "#wifi-service,Ignoring attempt to start ranging while waiting for callback for existing attempt", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003CABBC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100010AB8((void *)&_mh_execute_header, v0, v1, "#wifi-service,network not yet ready for ranging", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003CABE8(uint64_t a1, uint64_t a2, os_log_t log)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  __int16 v6;
  uint64_t v7;

  v3 = *(_QWORD *)(a2 + 40);
  v4 = 134218240;
  v5 = a1;
  v6 = 2048;
  v7 = v3;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "#wifi-service,No AWDL references to stop network: awdlInterface %p; fNetworkAwdl %p",
    (uint8_t *)&v4,
    0x16u);
  sub_10000BFC4();
}

void sub_1003CAC6C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029D84();
  sub_100010B04((void *)&_mh_execute_header, v0, v1, "#wifi-service,error %d when attempting to stop AWDL network", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003CACCC()
{
  __assert_rtn("stopAwdl", "PRWiFiRangingService_MW.mm", 376, "fStartNetworkCallbackWaitStartTime.has_value()");
}

void sub_1003CACF4()
{
  __assert_rtn("stopAwdl", "PRWiFiRangingService_MW.mm", 362, "fResultsCallbackWaitStartTime.has_value()");
}

void sub_1003CAD1C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100010AB8((void *)&_mh_execute_header, v0, v1, "#wifi-service,WiFiManagerClientCopyInterfaces returned null", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003CAD48()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100010AB8((void *)&_mh_execute_header, v0, v1, "#wifi-service,could not find AWDL Device Client", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003CAD74()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100010AB8((void *)&_mh_execute_header, v0, v1, "#wifi-service,Cannot update state machine. Manager interface faliure!", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003CADA0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100010AB8((void *)&_mh_execute_header, v0, v1, "#wifi-service,AWDL is up but device has no specified role, stopping AWDL", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003CADCC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100010AB8((void *)&_mh_execute_header, v0, v1, "#wifi-service,AWDL is up but we don't yet have a self ID!", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003CADF8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100010AB8((void *)&_mh_execute_header, v0, v1, "#wifi-service,AWDL is ready for ranging but device has no specified role, stopping AWDL", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003CAE24()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100010AB8((void *)&_mh_execute_header, v0, v1, "#wifi-service,attempting to set self ID with a null ID", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003CAE50()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029D84();
  sub_100010B04((void *)&_mh_execute_header, v0, v1, "#wifi-service,Setting wifi ranging self ID failed with error %d", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003CAEB0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100010AB8((void *)&_mh_execute_header, v0, v1, "#wifi-service,attempting to set self ID when AWDL is not active", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003CAEDC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100010AB8((void *)&_mh_execute_header, v0, v1, "#wifi-service,Cannot request ranging. WiFi not ready.", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003CAF08()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029D28();
  sub_100029D40((void *)&_mh_execute_header, v0, v1, "#wifi-service,Error starting ranging, wifi error %{public}d (%{public}#X)", v2, v3, v4, v5, v6);
  sub_10000BFC4();
}

void sub_1003CAF68(NSObject *a1, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t v4;

  v3 = 134217984;
  v4 = 0x3FF0000000000000;
  sub_100029D1C((void *)&_mh_execute_header, a1, a3, "#wifi-service,Ranging start failed: kA11OpNotPermitted; retrying in %f seconds",
    (uint8_t *)&v3);
  sub_10000BFC4();
}

void sub_1003CAFD8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100010AB8((void *)&_mh_execute_header, v0, v1, "#wifi-service,attempted to initiate wifi ranging with no peers", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003CB004()
{
  __assert_rtn("requestInitiatorRanging", "PRWiFiRangingService_MW.mm", 572, "fResultsCallbackWaitStartTime.has_value()");
}

void sub_1003CB02C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029D28();
  sub_100029D40((void *)&_mh_execute_header, v0, v1, "#wifi-service,Error setting rangeable, wifi error %{public}d (%{public}#X)", v2, v3, v4, v5, v6);
  sub_10000BFC4();
}

__n128 sub_1003CB08C(uint8_t *a1, unint64_t a2, int8x8_t *a3, NSObject *a4)
{
  uint64x2_t v4;
  int8x16_t v5;
  int8x16_t v6;
  __n128 result;

  v4 = (uint64x2_t)vdupq_n_s64(a2);
  v5.i64[0] = 255;
  v5.i64[1] = 255;
  v6 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vandq_s8((int8x16_t)vshlq_u64(v4, (uint64x2_t)xmmword_1004567B0), v5), (uint64x2_t)xmmword_1004567C0), vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vandq_s8((int8x16_t)vshlq_u64(v4, (uint64x2_t)xmmword_100456790), v5), (uint64x2_t)xmmword_1004567A0), (int8x16_t)vshlq_u64((uint64x2_t)vandq_s8((int8x16_t)vshlq_u64(v4, (uint64x2_t)xmmword_100456770), v5), (uint64x2_t)xmmword_100456780)));
  *(_DWORD *)a1 = 134217984;
  *a3 = vorr_s8(*(int8x8_t *)v6.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v6, v6, 8uLL));
  sub_100029D0C((void *)&_mh_execute_header, "#wifi-service,found empty peer list when creating array of peers for key 0x%llx", a1, a4);
  return result;
}

void sub_1003CB134(uint8_t *buf, _DWORD *a2, os_log_t log)
{
  *(_DWORD *)buf = 67109120;
  *a2 = 4;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "#wifi-service,maximum number of peers already being serviced: %i", buf, 8u);
}

void sub_1003CB17C(_BYTE *a1, _BYTE *a2)
{
  NSObject *v2;
  uint8_t *v3;

  sub_100029D74(a1, a2);
  sub_100029D00((void *)&_mh_execute_header, v2, (uint64_t)v2, "#wifi-service,part of a peer was nil! not adding to cfarray of peers", v3);
}

void sub_1003CB1A8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100010AB8((void *)&_mh_execute_header, v0, v1, "#wifi-service,could not find WiFi Device Client", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003CB1D4(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10001C964((void *)&_mh_execute_header, a1, a3, "#wifi-service,%s: fPeer2p4GHz should not be null when trying to call error callback", a5, a6, a7, a8, 2u);
  sub_10000BFC4();
}

void sub_1003CB244(void *a1, uint64_t a2, NSObject *a3)
{
  *(_DWORD *)a2 = 138412290;
  *(_QWORD *)(a2 + 4) = a1;
  sub_100029D1C((void *)&_mh_execute_header, a3, (uint64_t)a3, "#wifi-service,error callback is nullptr for peer ID: %@", (uint8_t *)a2);

  sub_100029D60();
}

void sub_1003CB28C()
{
  void *v0;
  uint64_t v1;
  float *v2;
  _QWORD *v3;
  uint8_t *v4;
  NSObject *v5;

  sub_100029D50();
  sub_100029D68(v1, v2, v3, 5.7779e-34);
  sub_100029D0C((void *)&_mh_execute_header, "#wifi-service,readiness callback is nullptr for peer ID: %@", v4, v5);

  sub_100029D60();
}

void sub_1003CB2C8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100010AB8((void *)&_mh_execute_header, v0, v1, "#wifi-service,ERROR: no awdl device 1", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003CB2F4(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10001C964((void *)&_mh_execute_header, a1, a3, "#wifi-service,%s: fPeer2p4GHz should not be null when trying to create array of peers for 2.4GHz ranging", a5, a6, a7, a8, 2u);
  sub_10000BFC4();
}

void sub_1003CB364()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100010AB8((void *)&_mh_execute_header, v0, v1, "#wifi-service,peer was nil! not adding to cfarray of peers", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003CB390()
{
  os_log_t v0;
  uint8_t v1[16];

  sub_100010AE0();
  _os_log_fault_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "#wifi-service,Didn't expect the 2.4GHz peer to be empty", v1, 2u);
  sub_10000991C();
}

void sub_1003CB3C8(_BYTE *a1, _BYTE *a2)
{
  NSObject *v2;
  uint8_t *v3;

  sub_100029D74(a1, a2);
  sub_100029D00((void *)&_mh_execute_header, v2, (uint64_t)v2, "#wifi-service,measurements is empty", v3);
}

void sub_1003CB3F4()
{
  void *v0;
  uint64_t v1;
  float *v2;
  _QWORD *v3;
  uint8_t *v4;
  NSObject *v5;

  sub_100029D50();
  sub_100029D68(v1, v2, v3, 5.7779e-34);
  sub_100029D0C((void *)&_mh_execute_header, "#wifi-service,No results callback for peer with matched ranging results. peerID: %@", v4, v5);

  sub_100029D60();
}

void sub_1003CB430(uint8_t *buf, _QWORD *a2, os_log_t log)
{
  *(_DWORD *)buf = 136315138;
  *a2 = "onWiFiDeviceClientRangingCallback2p4GHz";
  _os_log_fault_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_FAULT, "#wifi-service,%s: fPeer2p4GHz should not be null when we are processing ranging results", buf, 0xCu);
}

void sub_1003CB47C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100010AB8((void *)&_mh_execute_header, v0, v1, "#wifi-service,Releasing retained awdl network reference in start network callback", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003CB4A8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100010AB8((void *)&_mh_execute_header, v0, v1, "#wifi-service,Got valid network ref at network start with error EALREADY.", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003CB4D4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100010AB8((void *)&_mh_execute_header, v0, v1, "#wifi-service,Attempted to start AWDL when it was already up, resetting state", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003CB500()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029D84();
  sub_100029D40((void *)&_mh_execute_header, v0, v1, "#wifi-service,onWiFiDeviceClientStartNetworkCallback got called: error %d (%#x)", v2, v3, v4, v5, v6);
  sub_10000BFC4();
}

void sub_1003CB56C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100010AB8((void *)&_mh_execute_header, v0, v1, "#wifi-service,Device attachment callback returned but interfaces are still null", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003CB598()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100010AB8((void *)&_mh_execute_header, v0, v1, "#wifi-service,isLinkDown information missing from state info", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003CB5C4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100010AB8((void *)&_mh_execute_header, v0, v1, "#wifi-service,part of a peer was nil! not addding to peer map", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003CB5F0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100010AB8((void *)&_mh_execute_header, v0, v1, "#wifi-service,stop network callback refcon is NULL", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003CB61C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100010AB8((void *)&_mh_execute_header, v0, v1, "#wifi-service,WiFiDeviceClientRangingCallback refcon is NULL", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003CB648()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100010AB8((void *)&_mh_execute_header, v0, v1, "#wifi-service,WiFiDeviceClientRangingReportCallback refcon is NULL", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003CB674()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100010AB8((void *)&_mh_execute_header, v0, v1, "#wifi-service,device attach callback refcon is NULL", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003CB6A0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100010AB8((void *)&_mh_execute_header, v0, v1, "#wifi-service,start network callback refcon is NULL", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003CB6CC(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_fault_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_FAULT, "[NIPrivacyAuthorizationManager] asked to present prompt, but no display name.", v1, 2u);
}

void sub_1003CB70C(void *a1, uint64_t a2, uint8_t *buf, os_log_t log)
{
  *(_DWORD *)buf = 138412546;
  *(_QWORD *)(buf + 4) = a1;
  *((_WORD *)buf + 6) = 2112;
  *(_QWORD *)(buf + 14) = a2;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "#bundle Error while getting bundle proxy for app: %@. Error: %@", buf, 0x16u);

}

void sub_1003CB770(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "[PRRangingService] shouldAcceptNewConnection", v1, 2u);
  sub_10000991C();
}

void sub_1003CB7AC()
{
  __assert_rtn("PRCommonConvertTicksToSeconds", "PRCommon.mm", 43, "timebaseResult == KERN_SUCCESS");
}

void sub_1003CB7D4(int a1, NSObject *a2)
{
  _DWORD v2[2];

  v2[0] = 67109120;
  v2[1] = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#wifi,Default value set for \"WiFiServiceNumMeas\" must be 1, 2, 4, or 8. invalid value: %d", (uint8_t *)v2, 8u);
}

void sub_1003CB848(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "#wifi,ranging role unspecified", v1, 2u);
}

void sub_1003CB888()
{
  __assert_rtn("ErrorToString", "PRWiFiRangingSession.mm", 214, "false");
}

void sub_1003CB8B0()
{
  __assert_rtn("ReadinessToString", "PRWiFiRangingSession.mm", 227, "false");
}

void sub_1003CB8D8(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "[PRBeaconRangingService] shouldAcceptNewConnection", v1, 2u);
  sub_10000991C();
}

void sub_1003CB914(int a1, NSObject *a2)
{
  _DWORD v2[2];

  v2[0] = 67109120;
  v2[1] = a1;
  _os_log_fault_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_FAULT, "WRTT: Unexpected hardware %u in getUnlockThreshold", (uint8_t *)v2, 8u);
  sub_10000991C();
}

void sub_1003CB984()
{
  __assert_rtn("-[NIServerAnalyticsManager updateWithSASolution:]", "NIServerAnalyticsManager.mm", 1027, "solution.rangeResult.has_value()");
}

void sub_1003CB9AC()
{
  __assert_rtn("-[NIServerAnalyticsManager updateWithSASolution:]", "NIServerAnalyticsManager.mm", 1004, "solution.rangeResult.has_value()");
}

void sub_1003CB9D4(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "#ni-ca,Unexpected location type received", v1, 2u);
}

void sub_1003CBA14()
{
  __assert_rtn("-[NIServerAnalyticsManager _calculateErrorStatsFromVector:]", "NIServerAnalyticsManager.mm", 1938, "errorVector.size() > 0");
}

void sub_1003CBA3C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10001B110();
  sub_10000BFB4((void *)&_mh_execute_header, v0, v1, "PRBeaconRanging: actOnRemoteObjectWithBarrierBlock failed. Error: %@", v2, v3, v4, v5, v6);
  sub_10000BFC4();
}

void sub_1003CBA9C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100010AB8((void *)&_mh_execute_header, v0, v1, "Failed to create a beacon listener job.", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003CBAC8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10001B110();
  sub_10000BFB4((void *)&_mh_execute_header, v0, v1, "PRBeaconRangingClientProxy failed to parse range enable parameters. Error: %@", v2, v3, v4, v5, v6);
  sub_10000BFC4();
}

void sub_1003CBB28()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100010AB8((void *)&_mh_execute_header, v0, v1, "No point to share initiator job defined", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003CBB54()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100010AB8((void *)&_mh_execute_header, v0, v1, "createBeaconListenerJob: Configuration Manager Error.", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003CBB80()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100010AB8((void *)&_mh_execute_header, v0, v1, "PRBeaconRangingClientProxy: Failed to register for job: point to share responder", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003CBBAC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100010AB8((void *)&_mh_execute_header, v0, v1, "PRBeaconRangingClientProxy failed to parse range enable parameters.", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003CBBD8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10001B110();
  sub_10000BFB4((void *)&_mh_execute_header, v0, v1, "PRBTRanging: actOnRemoteObjectWithBarrierBlock failed. Error: %@", v2, v3, v4, v5, v6);
  sub_10000BFC4();
}

void sub_1003CBC38()
{
  uint64_t v0;
  os_log_t v1;
  uint8_t v2[12];
  __int16 v3;
  uint64_t v4;

  sub_10001B110();
  v3 = 2112;
  v4 = v0;
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "CLFindMyAccessoryManager failed with error: %@, for device: %@", v2, 0x16u);
  sub_10000BFC4();
}

void sub_1003CBCB4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10001B110();
  sub_10000BFB4((void *)&_mh_execute_header, v0, v1, "PRGenericRanging: actOnRemoteObjectWithBarrierBlock failed. Error: %@", v2, v3, v4, v5, v6);
  sub_10000BFC4();
}

void sub_1003CBD14()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10001B110();
  sub_10000BFB4((void *)&_mh_execute_header, v0, v1, "PRRangingServiceProxy failed to parse range enable parameters. Error: %@", v2, v3, v4, v5, v6);
  sub_10000BFC4();
}

void sub_1003CBD74(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100010AB8((void *)&_mh_execute_header, a1, a3, "peerADD passed in is too long", a5, a6, a7, a8, 0);
}

void sub_1003CBDA8(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100010AB8((void *)&_mh_execute_header, a1, a3, "peerID passed in is too long", a5, a6, a7, a8, 0);
}

void sub_1003CBDDC(void *a1, void *a2)
{
  NSObject *v3;
  void *v4;
  int v5;
  void *v6;
  __int16 v7;
  void *v8;

  v3 = a1;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "serviceName"));
  v5 = 138412546;
  v6 = v4;
  v7 = 2112;
  v8 = a2;
  _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "[PRXPCServicesManager] no service listening for %@, connection: %@", (uint8_t *)&v5, 0x16u);

}

void sub_1003CBE94()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100010AB8((void *)&_mh_execute_header, v0, v1, "#ses-container,Cannot add observers. Specialized session does not support observation.", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003CBEC0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100010AB8((void *)&_mh_execute_header, v0, v1, "#ses-container,Cannot remove observers. Specialized session does not support observation.", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003CBEEC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_1000553C0((void *)&_mh_execute_header, v0, v1, "#ses-container,FORCE CRASH: SESSION ACTIVATE", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003CBF18()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000553D0();
  sub_10000BFB4((void *)&_mh_execute_header, v0, v1, "#ses-container,Required parameter missing. Error: %ld", v2, v3, v4, v5, v6);
  sub_10000BFC4();
}

void sub_1003CBF7C()
{
  NSObject *v0;
  uint8_t v1[24];

  sub_100055430(__stack_chk_guard);
  sub_1000553E0();
  sub_100010AC8((void *)&_mh_execute_header, v0, (uint64_t)v0, "#ses-container,Failed to run specialized session %@. Error: %@", v1);
  sub_10000BFC4();
}

void sub_1003CBFE4()
{
  uint64_t v0;
  NSObject *v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  __int16 v5;
  uint64_t v6;

  sub_100055430(__stack_chk_guard);
  v3 = 138412546;
  v4 = v0;
  v5 = 2112;
  v6 = 0;
  sub_100010AC8((void *)&_mh_execute_header, v1, v2, "#ses-container,Failed to configure specialized session %@. Error: %@", (uint8_t *)&v3);
  sub_10000BFC4();
}

void sub_1003CC058()
{
  NSObject *v0;
  uint8_t v1[24];

  sub_100055430(__stack_chk_guard);
  sub_1000553E0();
  sub_100010AC8((void *)&_mh_execute_header, v0, (uint64_t)v0, "#ses-container,Failed to configure specialized session %@. Error: %@", v1);
  sub_10000BFC4();
}

void sub_1003CC0C0()
{
  NSObject *v0;
  uint8_t v1[24];

  sub_100055430(__stack_chk_guard);
  sub_1000553E0();
  sub_100010AC8((void *)&_mh_execute_header, v0, (uint64_t)v0, "#ses-container,Failed to create specialized session %@. Error: %@", v1);
  sub_10000BFC4();
}

void sub_1003CC128()
{
  NSObject *v0;
  uint8_t v1[24];

  sub_100055430(__stack_chk_guard);
  sub_1000553E0();
  sub_100010AC8((void *)&_mh_execute_header, v0, (uint64_t)v0, "#ses-container,Failed to categorize specialized session class %@. Error: %@", v1);
  sub_10000BFC4();
}

void sub_1003CC190(uint8_t *buf, uint64_t a2, os_log_t log)
{
  *(_DWORD *)buf = 134217984;
  *(_QWORD *)(buf + 4) = a2;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "#ses-container,Unable to run session due to activation failure. Activation error code: %ld", buf, 0xCu);
}

void sub_1003CC1D4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100055420();
  sub_10000BFB4((void *)&_mh_execute_header, v0, v1, "#ses-container,Required parameter missing. Error: %ld", v2, v3, v4, v5, v6);
  sub_10000BFC4();
}

void sub_1003CC238(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10000BFB4((void *)&_mh_execute_header, a1, a3, "#ses-container,processDCKMessage failed due to session interruptions (Error: %ld). See next log line for interruptions.", a5, a6, a7, a8, 0);
  sub_10000BFC4();
}

void sub_1003CC2A4(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10000BFB4((void *)&_mh_execute_header, a1, a3, "#ses-container,%@", a5, a6, a7, a8, 2u);
  sub_10000BFC4();
}

void sub_1003CC314(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10000BFB4((void *)&_mh_execute_header, a1, a3, "#ses-container,Required parameter missing. Error: %ld", a5, a6, a7, a8, 0);
  sub_10000BFC4();
}

void sub_1003CC380()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[14];
  uint64_t v3;

  sub_10005543C();
  v3 = -5888;
  sub_100010AC8((void *)&_mh_execute_header, v0, v1, "#ses-container,%@: Required parameter missing. Error: %ld", v2);
  sub_10000BFC4();
}

void sub_1003CC3EC()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[14];
  uint64_t v3;

  sub_10005543C();
  v3 = -10014;
  sub_100010AC8((void *)&_mh_execute_header, v0, v1, "#ses-container,%@ failed due to session interruptions (Error: %ld). See next log line for interruptions.", v2);
  sub_10000BFC4();
}

void sub_1003CC458()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint8_t *v4;
  NSObject *v5;

  sub_100029D50();
  sub_1000553F8(v1, v2, v3, 5.778e-34);
  sub_100055410((void *)&_mh_execute_header, "#ses-container,Configuring local device not authorized. Signing identity: %@, pid: %d.", v4, v5);

  sub_100029D60();
}

void sub_1003CC494(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10000BFB4((void *)&_mh_execute_header, a2, a3, "#ses-container,Specialized session invalidated: %@", a5, a6, a7, a8, 2u);
  sub_10000BFC4();
}

void sub_1003CC4F8(uint64_t a1, NSObject *a2)
{
  int v2;
  _DWORD v3[2];

  v2 = *(_DWORD *)(a1 + 244);
  v3[0] = 67109120;
  v3[1] = v2;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#ses-container,Failed to get bundle identifier for pid: %d. Non-fatal - bundle identifier will be nil", (uint8_t *)v3, 8u);
  sub_10000991C();
}

void sub_1003CC56C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_1000553C0((void *)&_mh_execute_header, v0, v1, "#ses-container,UWB provider is nil when requested from NIServerSessionResourceManager", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003CC598()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_1000553C0((void *)&_mh_execute_header, v0, v1, "#ses-container,WiFi provider is nil when requested from NIServerSessionResourceManager", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003CC5C4(int a1, NSObject *a2)
{
  _DWORD v2[2];

  v2[0] = 67109120;
  v2[1] = a1;
  _os_log_fault_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_FAULT, "#ses-container,Entitlement with integer value %d is out of bounds", (uint8_t *)v2, 8u);
  sub_10000991C();
}

void sub_1003CC634()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_1000553C0((void *)&_mh_execute_header, v0, v1, "#ses-container,Unexpectedly received didFailWithErrorCode:errorString:", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003CC660()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_1000553C0((void *)&_mh_execute_header, v0, v1, "#ses-container,Unexpectedly received didReceiveNewSolution:", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003CC68C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_1000553C0((void *)&_mh_execute_header, v0, v1, "#ses-container,Unexpectedly received didReceiveSessionStartNotification:", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003CC6B8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_1000553C0((void *)&_mh_execute_header, v0, v1, "#ses-container,Unexpectedly received didReceiveRemoteData:", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003CC6E4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_1000553C0((void *)&_mh_execute_header, v0, v1, "#ses-container,Unexpectedly received serviceRequestDidUpdateStatus:", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003CC710()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100010AB8((void *)&_mh_execute_header, v0, v1, "#ses-container,Error activating BT resource: no token data", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003CC73C(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10000BFB4((void *)&_mh_execute_header, a2, a3, "#ses-container,Error activating BT resource: %@", a5, a6, a7, a8, 2u);
  sub_10000BFC4();
}

void sub_1003CC7A0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_1000553C0((void *)&_mh_execute_header, v0, v1, "#ses-container,Unexpected BT state: CBManagerStateUnauthorized", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003CC7CC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_1000553C0((void *)&_mh_execute_header, v0, v1, "#ses-container,Unexpected BT state: CBManagerStateUnsupported", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003CC7F8(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10000BFB4((void *)&_mh_execute_header, a2, a3, "#ses-container,failed to pause session inside interruptSessionWithReason. Error: %@", a5, a6, a7, a8, 2u);
  sub_10000BFC4();
}

void sub_1003CC85C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100010AB8((void *)&_mh_execute_header, v0, v1, "#ses-container,#interrupt Session interruption ended but reason not present in queue.", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003CC888()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100010AB8((void *)&_mh_execute_header, v0, v1, "#ses-container,Fatal error: unsupported platform", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003CC8B4()
{
  __assert_rtn("-[NIServerSessionContainer _updateInterruptionForUWBServiceState:cause:requiresNarrowBand:]", "NIServerSessionContainer.mm", 2524, "false");
}

void sub_1003CC8DC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_1000553C0((void *)&_mh_execute_header, v0, v1, "#ses-container,UWB system is off with unspecified reason", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003CC908()
{
  __assert_rtn("-[NIServerSessionContainer _updateInterruptionForUWBSystemOffWithCause:]", "NIServerSessionContainer.mm", 2574, "false");
}

void sub_1003CC930()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_1000553C0((void *)&_mh_execute_header, v0, v1, "#ses-container,received app state unknown.", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003CC95C(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1000553C0((void *)&_mh_execute_header, a1, a3, "FORCE CRASH: STARTUP", a5, a6, a7, a8, 0);
}

void sub_1003CC990(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1000553C0((void *)&_mh_execute_header, a1, a3, "unable to set user directory", a5, a6, a7, a8, 0);
}

void sub_1003CC9C4(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "[PRCompanionRangingService] shouldAcceptNewConnection", v1, 2u);
  sub_10000991C();
}

void sub_1003CCA00()
{
  __assert_rtn("set_tracking_state", "CLPVisionEvent.pb.h", 3517, "::CLP::LogEntry::Vision::VIOTrackingState_IsValid(value)");
}

void sub_1003CCA28()
{
  __assert_rtn("set_global_reference_frame", "CLPVisionEvent.pb.h", 4274, "::CLP::LogEntry::Vision::LSLGlobalReferenceFrame_IsValid(value)");
}

void sub_1003CCA50()
{
  __assert_rtn("set_status", "CLPVisionEvent.pb.h", 4518, "::CLP::LogEntry::Vision::LSLHeadingStatus_IsValid(value)");
}

void sub_1003CCA78()
{
  __assert_rtn("set_status_deprecated", "CLPVisionEvent.pb.h", 4470, "::CLP::LogEntry::Vision::LSLStatus_DEPRECATED_IsValid(value)");
}

void sub_1003CCAA0()
{
  __assert_rtn("set_activity", "CLPNearbyd.pb.h", 3307, "::CLP::LogEntry::Nearbyd::AccessoryActivity_IsValid(value)");
}

void sub_1003CCAC8()
{
  __assert_rtn("set_accessory", "CLPNearbyd.pb.h", 3284, "::CLP::LogEntry::Nearbyd::AccessoryType_IsValid(value)");
}

void sub_1003CCAF0()
{
  __assert_rtn("set_accessory_type", "CLPNearbyd.pb.h", 3908, "::CLP::LogEntry::Nearbyd::AccessoryType_IsValid(value)");
}

void sub_1003CCB18()
{
  __assert_rtn("set_device_type", "CLPNearbyd.pb.h", 3772, "::CLP::LogEntry::Nearbyd::DeviceType_IsValid(value)");
}

void sub_1003CCB40()
{
  __assert_rtn("set_event_type", "CLPNearbyd.pb.h", 3935, "::CLP::LogEntry::Nearbyd::SolutionProviderEventType_IsValid(value)");
}

void sub_1003CCB68()
{
  __assert_rtn("set_accessory_type", "CLPNearbyd.pb.h", 4217, "::CLP::LogEntry::Nearbyd::AccessoryType_IsValid(value)");
}

void sub_1003CCB90()
{
  __assert_rtn("set_device_type", "CLPNearbyd.pb.h", 4006, "::CLP::LogEntry::Nearbyd::DeviceType_IsValid(value)");
}

void sub_1003CCBB8()
{
  __assert_rtn("set_accessory_type", "CLPNearbyd.pb.h", 4308, "::CLP::LogEntry::Nearbyd::AccessoryType_IsValid(value)");
}

void sub_1003CCBE0()
{
  __assert_rtn("set_source", "CLPNearbyd.pb.h", 4496, "::CLP::LogEntry::Nearbyd::NearbydEntry_FindeeDisplacementSource_IsValid(value)");
}

void sub_1003CCC08()
{
  __assert_rtn("set_category", "CLPNearbyd.pb.h", 4633, "::CLP::LogEntry::Nearbyd::NearbydEntry_FindeeBoundedDisplacementCategory_IsValid(value)");
}

void sub_1003CCC30()
{
  __assert_rtn("set_device_type", "CLPNearbyd.pb.h", 5929, "::CLP::LogEntry::Nearbyd::DeviceType_IsValid(value)");
}

void sub_1003CCC58()
{
  __assert_rtn("set_message_type", "CLPRoseCommunicationEvent.pb.h", 7890, "::CLP::LogEntry::Rose::RoseCommunicationEvent::RoseMessageType_IsValid(value)");
}

void sub_1003CCC80()
{
  __assert_rtn("set_message_category", "CLPRoseCommunicationEvent.pb.h", 7867, "::CLP::LogEntry::Rose::RoseCommunicationEvent::RoseMessageCategory_IsValid(value)");
}

void sub_1003CCCA8()
{
  __assert_rtn("set_session_role", "CLPRoseCommunicationEvent.pb.h", 9623, "::CLP::LogEntry::Rose::RoseCommunicationEvent::RoseSessionRole_IsValid(value)");
}

void sub_1003CCCD0()
{
  __assert_rtn("set_session_type", "CLPRoseCommunicationEvent.pb.h", 9600, "::CLP::LogEntry::Rose::RoseCommunicationEvent::RoseSessionType_IsValid(value)");
}

void sub_1003CCCF8()
{
  __assert_rtn("set_reason", "CLPRoseCommunicationEvent.pb.h", 10037, "::CLP::LogEntry::Rose::RoseCommunicationEvent::RoseRangeDisableReason_IsValid(value)");
}

void sub_1003CCD20()
{
  __assert_rtn("set_error_code", "CLPRoseCommunicationEvent.pb.h", 10231, "::CLP::LogEntry::Rose::RoseCommunicationEvent::RoseErrorCode_IsValid(value)");
}

void sub_1003CCD48()
{
  __assert_rtn("set_error_code", "CLPRoseCommunicationEvent.pb.h", 10312, "::CLP::LogEntry::Rose::RoseCommunicationEvent::RoseErrorCode_IsValid(value)");
}

void sub_1003CCD70()
{
  __assert_rtn("set_nb_band", "CLPRoseCommunicationEvent.pb.h", 12429, "::CLP::LogEntry::Rose::RoseCommunicationEvent::RoseNbBand_IsValid(value)");
}

void sub_1003CCD98()
{
  __assert_rtn("set_source", "CLPRoseCommunicationEvent.pb.h", 11881, "::CLP::LogEntry::Rose::RoseCommunicationEvent::RoseRangeResultEventSource_IsValid(value)");
}

void sub_1003CCDC0()
{
  __assert_rtn("set_rf_channel", "CLPRoseCommunicationEvent.pb.h", 11748, "::CLP::LogEntry::Rose::RoseCommunicationEvent::RoseRFChannel_IsValid(value)");
}

void sub_1003CCDE8()
{
  __assert_rtn("set_session_type", "CLPRoseCommunicationEvent.pb.h", 10992, "::CLP::LogEntry::Rose::RoseCommunicationEvent::RoseSessionType_IsValid(value)");
}

void sub_1003CCE10()
{
  __assert_rtn("set_reason", "CLPRoseCommunicationEvent.pb.h", 12692, "::CLP::LogEntry::Rose::RoseCommunicationEvent::RoseErrorCode_IsValid(value)");
}

void sub_1003CCE38()
{
  __assert_rtn("set_session_type", "CLPRoseCommunicationEvent.pb.h", 13320, "::CLP::LogEntry::Rose::RoseCommunicationEvent::RoseSessionType_IsValid(value)");
}

void sub_1003CCE60()
{
  __assert_rtn("set_session_type", "CLPRoseCommunicationEvent.pb.h", 13549, "::CLP::LogEntry::Rose::RoseCommunicationEvent::RoseSessionType_IsValid(value)");
}

void sub_1003CCE88()
{
  __assert_rtn("set_rf_channel", "CLPRoseCommunicationEvent.pb.h", 15313, "::CLP::LogEntry::Rose::RoseCommunicationEvent::RoseRFChannel_IsValid(value)");
}

void sub_1003CCEB0()
{
  __assert_rtn("set_error_code", "CLPRoseCommunicationEvent.pb.h", 15224, "::CLP::LogEntry::Rose::RoseCommunicationEvent::RoseErrorCode_IsValid(value)");
}

void sub_1003CCED8()
{
  __assert_rtn("set_rf_channel", "CLPRoseCommunicationEvent.pb.h", 16309, "::CLP::LogEntry::Rose::RoseCommunicationEvent::RoseRFChannel_IsValid(value)");
}

void sub_1003CCF00()
{
  __assert_rtn("set_error_code", "CLPRoseCommunicationEvent.pb.h", 16220, "::CLP::LogEntry::Rose::RoseCommunicationEvent::RoseErrorCode_IsValid(value)");
}

void sub_1003CCF28()
{
  __assert_rtn("set_channel", "CLPRoseCommunicationEvent.pb.h", 16945, "::CLP::LogEntry::Rose::RoseCommunicationEvent::RoseRFChannel_IsValid(value)");
}

void sub_1003CCF50()
{
  __assert_rtn("set_error_code", "CLPRoseCommunicationEvent.pb.h", 17412, "::CLP::LogEntry::Rose::RoseCommunicationEvent::RoseErrorCode_IsValid(value)");
}

void sub_1003CCF78()
{
  __assert_rtn("set_error_code", "CLPRoseCommunicationEvent.pb.h", 17640, "::CLP::LogEntry::Rose::RoseCommunicationEvent::RoseErrorCode_IsValid(value)");
}

void sub_1003CCFA0()
{
  __assert_rtn("set_session_role", "CLPRoseCommunicationEvent.pb.h", 17847, "::CLP::LogEntry::Rose::RoseCommunicationEvent::RoseSessionRole_IsValid(value)");
}

void sub_1003CCFC8()
{
  __assert_rtn("set_poll_rx_status", "CLPRoseCommunicationEvent.pb.h", 16827, "::CLP::LogEntry::Rose::RoseCommunicationEvent::RxStatus_IsValid(value)");
}

void sub_1003CCFF0()
{
  __assert_rtn("set_rx_preamble", "CLPRoseCommunicationEvent.pb.h", 16782, "::CLP::LogEntry::Rose::RoseCommunicationEvent::RosePreamble_IsValid(value)");
}

void sub_1003CD018()
{
  __assert_rtn("set_tx_preamble", "CLPRoseCommunicationEvent.pb.h", 16759, "::CLP::LogEntry::Rose::RoseCommunicationEvent::RosePreamble_IsValid(value)");
}

void sub_1003CD040()
{
  __assert_rtn("set_session_type", "CLPRoseCommunicationEvent.pb.h", 16534, "::CLP::LogEntry::Rose::RoseCommunicationEvent::RoseSessionType_IsValid(value)");
}

void sub_1003CD068()
{
  __assert_rtn("set_error_code", "CLPRoseCommunicationEvent.pb.h", 16473, "::CLP::LogEntry::Rose::RoseCommunicationEvent::RoseErrorCode_IsValid(value)");
}

void sub_1003CD090()
{
  __assert_rtn("set_error_code", "CLPRoseCommunicationEvent.pb.h", 9077, "::CLP::LogEntry::Rose::RoseCommunicationEvent::RoseErrorCode_IsValid(value)");
}

void sub_1003CD0B8()
{
  __assert_rtn("set_check_rssis_result", "CLPRoseCommunicationEvent.pb.h", 10927, "::CLP::LogEntry::Rose::RoseCommunicationEvent::ME_CheckRSSIsResult_IsValid(value)");
}

void sub_1003CD0E0()
{
  __assert_rtn("set_check_timestamps_result", "CLPRoseCommunicationEvent.pb.h", 10904, "::CLP::LogEntry::Rose::RoseCommunicationEvent::ME_CheckTimestampsResult_IsValid(value)");
}

void sub_1003CD108()
{
  __assert_rtn("set_check_fp_snrs_ok_for_sensor_fusion_result", "CLPRoseCommunicationEvent.pb.h", 10881, "::CLP::LogEntry::Rose::RoseCommunicationEvent::ME_CheckFPSNRsOkForSensorFusionResult_IsValid(value)");
}

void sub_1003CD130()
{
  __assert_rtn("set_check_toa_cir_result", "CLPRoseCommunicationEvent.pb.h", 10858, "::CLP::LogEntry::Rose::RoseCommunicationEvent::ME_CheckToaCirResult_IsValid(value)");
}

void sub_1003CD158()
{
  __assert_rtn("set_check_aoa_cir_result", "CLPRoseCommunicationEvent.pb.h", 10835, "::CLP::LogEntry::Rose::RoseCommunicationEvent::ME_CheckAoaCirResult_IsValid(value)");
}

void sub_1003CD180()
{
  __assert_rtn("set_check_fp_indices_result", "CLPRoseCommunicationEvent.pb.h", 10812, "::CLP::LogEntry::Rose::RoseCommunicationEvent::ME_CheckFPIndicesResult_IsValid(value)");
}

void sub_1003CD1A8()
{
  __assert_rtn("set_check_fp_snrs_result", "CLPRoseCommunicationEvent.pb.h", 10789, "::CLP::LogEntry::Rose::RoseCommunicationEvent::ME_CheckFPSNRsResult_IsValid(value)");
}

void sub_1003CD1D0()
{
  __assert_rtn("set_check_pdoa_result", "CLPRoseCommunicationEvent.pb.h", 10766, "::CLP::LogEntry::Rose::RoseCommunicationEvent::ME_CheckPDOAResult_IsValid(value)");
}

void sub_1003CD1F8()
{
  __assert_rtn("set_packet_type", "CLPRoseCommunicationEvent.pb.h", 12964, "::CLP::LogEntry::Rose::RoseCommunicationEvent::RangeCIRPacketType_IsValid(value)");
}

void sub_1003CD220()
{
  __assert_rtn("set_rx_status", "CLPRoseCommunicationEvent.pb.h", 16358, "::CLP::LogEntry::Rose::RoseCommunicationEvent::RxStatus_IsValid(value)");
}

void sub_1003CD248()
{
  __assert_rtn("set_source", "NearbyInteractionTypes.pb.h", 11458, "::CLP::LogEntry::Nearbyd::NI::TruthTag_Source_IsValid(value)");
}

void sub_1003CD270()
{
  __assert_rtn("set_intent_predictor_type", "NearbyInteractionTypes.pb.h", 14259, "::CLP::LogEntry::Nearbyd::NI::IntentPredictorType_IsValid(value)");
}

void sub_1003CD298()
{
  __assert_rtn("set_device_presence_preset", "NearbyInteractionTypes.pb.h", 10385, "::CLP::LogEntry::Nearbyd::NI::DevicePresencePreset_IsValid(value)");
}

void sub_1003CD2C0()
{
  __assert_rtn("set_pref_update_rate", "NearbyInteractionTypes.pb.h", 10340, "::CLP::LogEntry::Nearbyd::NI::PreferredUpdateRate_IsValid(value)");
}

void sub_1003CD2E8()
{
  __assert_rtn("set_reference_frame", "NearbyInteractionTypes.pb.h", 10434, "::CLP::LogEntry::Nearbyd::NI::AoAReferenceFrame_IsValid(value)");
}

void sub_1003CD310()
{
  __assert_rtn("set_relationship", "NearbyInteractionTypes.pb.h", 10619, "::CLP::LogEntry::Nearbyd::NI::ObjectRelationshipSpecifier_IsValid(value)");
}

void sub_1003CD338()
{
  __assert_rtn("set_filter", "NearbyInteractionTypes.pb.h", 12788, "::CLP::LogEntry::Nearbyd::NI::FilterType_IsValid(value)");
}

void sub_1003CD360()
{
  __assert_rtn("set_technology", "NearbyInteractionTypes.pb.h", 12765, "::CLP::LogEntry::Nearbyd::NI::RangingTechnology_IsValid(value)");
}

void sub_1003CD388()
{
  __assert_rtn("set_filter", "NearbyInteractionTypes.pb.h", 12837, "::CLP::LogEntry::Nearbyd::NI::BTFilter_IsValid(value)");
}

void sub_1003CD3B0()
{
  __assert_rtn("set_vio_tracking_state", "NearbyInteractionTypes.pb.h", 16407, "::CLP::LogEntry::Nearbyd::NI::VIOTrackingState_IsValid(value)");
}

void sub_1003CD3D8()
{
  __assert_rtn("set_motion_activity_confidence", "NearbyInteractionTypes.pb.h", 17184, "::CLP::LogEntry::Nearbyd::NI::MotionActivityConfidence_IsValid(value)");
}

void sub_1003CD400()
{
  __assert_rtn("set_location_type", "NearbyInteractionTypes.pb.h", 17677, "::CLP::LogEntry::Nearbyd::NI::LocationType_IsValid(value)");
}

void sub_1003CD428()
{
  __assert_rtn("set_signal_environment_type", "NearbyInteractionTypes.pb.h", 17654, "::CLP::LogEntry::Nearbyd::NI::SignalEnvironmentType_IsValid(value)");
}

void sub_1003CD450()
{
  __assert_rtn("set_position_context_state", "NearbyInteractionTypes.pb.h", 17587, "::CLP::LogEntry::Nearbyd::NI::PositionContextStateType_IsValid(value)");
}

void sub_1003CD478()
{
  __assert_rtn("set_satellite_system", "NearbyInteractionTypes.pb.h", 17936, "::CLP::LogEntry::Nearbyd::NI::SatelliteSystem_IsValid(value)");
}

void sub_1003CD4A0()
{
  __assert_rtn("set_algorithm_status", "NearbyInteractionTypes.pb.h", 18696, "::CLP::LogEntry::Nearbyd::NI::AlgorithmStatus_IsValid(value)");
}

void sub_1003CD4C8()
{
  __assert_rtn("set_target_motion_state", "NearbyInteractionTypes.pb.h", 19167, "::CLP::LogEntry::Nearbyd::NI::FindeeMotionState_IsValid(value)");
}

void sub_1003CD4F0()
{
  __assert_rtn("set_algorithm_source", "NearbyInteractionTypes.pb.h", 19144, "::CLP::LogEntry::Nearbyd::NI::AlgorithmSource_IsValid(value)");
}

void sub_1003CD518()
{
  __assert_rtn("set_vertical_state", "NearbyInteractionTypes.pb.h", 19001, "::CLP::LogEntry::Nearbyd::NI::VerticalState_IsValid(value)");
}

void sub_1003CD540()
{
  __assert_rtn("set_algorithm_container", "NearbyInteractionTypes.pb.h", 19264, "::CLP::LogEntry::Nearbyd::NI::AlgorithmContainer_IsValid(value)");
}

void sub_1003CD568()
{
  __assert_rtn("set_displacing_state", "NearbyInteractionTypes.pb.h", 20162, "::CLP::LogEntry::Nearbyd::NI::DisplacingState_IsValid(value)");
}

void sub_1003CD590()
{
  __assert_rtn("set_channel_usage_type", "CLPRangeAndAoaSolution.pb.h", 4744, "::CLP::LogEntry::Rose::RangeAndAoaSolution_SensorFusion_ChannelUsageType_IsValid(value)");
}

void sub_1003CD5B8()
{
  __assert_rtn("set_rf_channel", "CLPRangeAndAoaSolution.pb.h", 4721, "::CLP::LogEntry::Rose::RoseCommunicationEvent::RoseRFChannel_IsValid(value)");
}

void sub_1003CD5E0()
{
  __assert_rtn("set_status", "CLPRangeAndAoaSolution.pb.h", 4335, "::CLP::LogEntry::Rose::RangeAndAoaSolution_SensorFusion_EKFStatus_IsValid(value)");
}

void sub_1003CD608()
{
  __assert_rtn("set_ekf_status", "CLPRangeAndAoaSolution.pb.h", 3242, "::CLP::LogEntry::Rose::RangeAndAoaSolution_SensorFusion_EKFStatus_IsValid(value)");
}

void sub_1003CD630()
{
  __assert_rtn("set_tracking_target_status", "CLPRangeAndAoaSolution.pb.h", 3601, "::CLP::LogEntry::Rose::RangeAndAoaSolution_SensorFusion_TrackingTarget_TrackingTargetStatus_IsValid(value)");
}

void sub_1003CD658()
{
  __assert_rtn("coarseSearch", "LutGenerator.cpp", 129, "row >= 0 && column >= 0");
}

void sub_1003CD680()
{
  __assert_rtn("coarseSearch", "LutGenerator.cpp", 117, "errorTable.size() == kErrorTableSize && errorTable[0].size() == kErrorTableSize");
}

void sub_1003CD6A8()
{
  __assert_rtn("excludeCone", "LutGenerator.cpp", 161, "errorTable.size() == kErrorTableSize && errorTable[0].size() == kErrorTableSize");
}

void sub_1003CD6D0(uint64_t a1, _QWORD *a2, NSObject *a3)
{
  const char *v3;

  if (*(char *)(a1 + 63) < 0)
    a2 = (_QWORD *)*a2;
  LODWORD(v3) = 136315138;
  HIDWORD(v3) = (_DWORD)a2;
  sub_100134114((void *)&_mh_execute_header, (uint64_t)a2, a3, "#lut,setting AoACalculator LUT using file %s failed", v3);
}

void sub_1003CD744(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100010AB8((void *)&_mh_execute_header, a1, a3, "#lut,lutCalculation: pCalBlob is nullptr", a5, a6, a7, a8, 0);
  sub_10000991C();
}

void sub_1003CD774()
{
  __assert_rtn("lutCalculation", "AoALUTManager.mm", 161, "pCalBlob->ch9CalAvailable()");
}

void sub_1003CD79C(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100010AB8((void *)&_mh_execute_header, a1, a3, "#lut,lucCalculation: integrity check fails for pCalBlob", a5, a6, a7, a8, 0);
  sub_10000991C();
}

void sub_1003CD7CC(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100010AB8((void *)&_mh_execute_header, a1, a3, "#lut,#AoALUTManager: on-device calBlob or delta calBlob is contaminated", a5, a6, a7, a8, 0);
  sub_10000991C();
}

void sub_1003CD7FC()
{
  __assert_rtn("loadNNCoeffFromFile", "AoALUTManager.mm", 142, "NNClassifierPtr != nullptr");
}

void sub_1003CD824(uint64_t a1, _QWORD *a2, NSObject *a3)
{
  const char *v3;

  if (*(char *)(a1 + 63) < 0)
    a2 = (_QWORD *)*a2;
  LODWORD(v3) = 136315138;
  HIDWORD(v3) = (_DWORD)a2;
  sub_100134114((void *)&_mh_execute_header, (uint64_t)a2, a3, "#lut,writing LUT file %s fails", v3);
}

void sub_1003CD898(std::__shared_weak_count *a1)
{
  unint64_t *p_shared_owners;
  unint64_t v3;

  p_shared_owners = (unint64_t *)&a1->__shared_owners_;
  do
    v3 = __ldaxr(p_shared_owners);
  while (__stlxr(v3 - 1, p_shared_owners));
  if (!v3)
  {
    ((void (*)(std::__shared_weak_count *))a1->__on_zero_shared)(a1);
    std::__shared_weak_count::__release_weak(a1);
  }
}

void sub_1003CD8E4(os_log_t log, double a2)
{
  int v2;
  double v3;

  v2 = 134217984;
  v3 = a2;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "#me,MeasEngMetricsCalculator::checkTOACIRDataEvent: firstPathAmplitude <= 0: %3f\n", (uint8_t *)&v2, 0xCu);
}

void sub_1003CD95C()
{
  __assert_rtn("addRangeMeasurement", "MeasurementEngineTypes.cpp", 36, "timestampOfOldestMeasurement <= rangeMeasurement.machAbsoluteTimeSec");
}

void sub_1003CD984()
{
  __assert_rtn("getRangeOffsetFromMedian", "MeasurementEngineTypes.cpp", 62, "history.size() <= kNumMeasurementsForOutlierCheck");
}

void sub_1003CD9AC()
{
  __assert_rtn("getAoaHypotheses", "AoACalculator.cpp", 81, "fRevLUTs_ptr != nullptr");
}

void sub_1003CD9D4()
{
  __assert_rtn("nn_preprocess", "NeuralNetworkClassifier.cpp", 169, "fNNParamsPtr != nullptr");
}

void sub_1003CD9FC()
{
  __assert_rtn("nn_preprocess", "NeuralNetworkClassifier.cpp", 184, "cir_samples.size() == kNumOfChains && cir_samples[0].size() == kNumOfCirSamplesPerChain");
}

void sub_1003CDA24()
{
  __assert_rtn("nn_core", "NeuralNetworkClassifier.cpp", 244, "fNNParamsPtr != nullptr");
}

void sub_1003CDA4C()
{
  __assert_rtn("nn_core", "NeuralNetworkClassifier.cpp", 246, "input.size() == kNNLayer0InputDimension");
}

void sub_1003CDA74()
{
  __assert_rtn("getNeuralNetworkRegion", "NeuralNetworkClassifier.cpp", 530, "false");
}

void sub_1003CDA9C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100010AB8((void *)&_mh_execute_header, v0, v1, "#accessory,download,triggerUpdate,copyFromCLMobileAsset,skipped", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003CDAC8(char *a1, uint8_t *buf, os_log_t log)
{
  char *v4;

  if (a1[23] >= 0)
    v4 = a1;
  else
    v4 = *(char **)a1;
  *(_DWORD *)buf = 136315138;
  *(_QWORD *)(buf + 4) = v4;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "#accessory,download,data of accessory %s not present", buf, 0xCu);
  if (a1[23] < 0)
    operator delete(*(void **)a1);
}

void sub_1003CDB38()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100010AB8((void *)&_mh_execute_header, v0, v1, "#accessory,file queue,invalid PDOA correction file,calBolbPtr is null", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003CDB64()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100010AB8((void *)&_mh_execute_header, v0, v1, "#accessory,file queue,download,dstIsNull", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003CDB90()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100010AB8((void *)&_mh_execute_header, v0, v1, "#accessory,file queue,download,srcIsNull", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003CDBBC()
{
  __assert_rtn("loadNNCoefFromFile", "AccessoryFileManager.mm", 283, "NNClassifierPtr != nullptr");
}

void sub_1003CDBE4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100010AB8((void *)&_mh_execute_header, v0, v1, "#accessory,file queue,ch9 NN is not valid", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003CDC10(uint64_t a1, NSObject *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 48);
  v3 = 134217984;
  v4 = v2;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#aggr,addRangeResult: no mach continuous time (mach abs = %.9f), ignoring", (uint8_t *)&v3, 0xCu);
  sub_10000BFC4();
}

BOOL sub_1003CDC84(os_log_t log, _BYTE *a2)
{
  uint8_t v4[16];

  *(_WORD *)v4 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "#aggr,addRangeResult: got both AOA and TOA CIR events, purging both!", v4, 2u);
  return *a2 == 0;
}

void sub_1003CDCDC(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "#aggr,RoseMeasurementBuffer::clear", v1, 2u);
}

void sub_1003CDD1C()
{
  uint64_t v0;
  os_log_t v1;
  int v2;
  uint64_t v3;

  sub_100146AC8(__stack_chk_guard);
  sub_100146AB0();
  sub_100146A9C((void *)&_mh_execute_header, v0, v1, "#aggr,haveReceivedRoseMeasurements ticketId %hu targetMac 0x%016llx: no buffer slot", v2, v3);
  sub_10000BFC4();
}

void sub_1003CDD7C()
{
  uint64_t v0;
  os_log_t v1;
  int v2;
  uint64_t v3;

  sub_100146AC8(__stack_chk_guard);
  sub_100146AB0();
  sub_100146A9C((void *)&_mh_execute_header, v0, v1, "#aggr,haveReceivedRoseMeasurements ticketId %hu targetMac 0x%016llx YES", v2, v3);
  sub_10000BFC4();
}

void sub_1003CDDDC()
{
  uint64_t v0;
  os_log_t v1;
  int v2;
  uint64_t v3;

  sub_100146AC8(__stack_chk_guard);
  sub_100146AB0();
  sub_100146A9C((void *)&_mh_execute_header, v0, v1, "#aggr,haveReceivedRoseMeasurements ticketId %hu targetMac 0x%016llx NO", v2, v3);
  sub_10000BFC4();
}

void sub_1003CDE3C(unsigned __int16 a1, uint64_t a2, os_log_t log)
{
  _DWORD v3[2];
  __int16 v4;
  uint64_t v5;

  v3[0] = 67109376;
  v3[1] = a1;
  v4 = 2048;
  v5 = a2;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "#aggr,sendReceivedRoseMeasurements: no measurements for ticketId %hu targetMac 0x%016llx", (uint8_t *)v3, 0x12u);
  sub_10000BFC4();
}

void sub_1003CDEC0()
{
  __assert_rtn("addRangeTimestampEvent", "MeasurementAggregator.cpp", 239, "rangeTimestampEvent.rawLocalEvent().has_value()");
}

void sub_1003CDEE8(unsigned __int16 a1, NSObject *a2)
{
  _DWORD v2[2];

  v2[0] = 67109120;
  v2[1] = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#aggr,failed to obtain device mac address for ticket_id %hu", (uint8_t *)v2, 8u);
}

void sub_1003CDF60()
{
  __assert_rtn("sendIfHaveReceivedRoseMeasurementsFromTimestamps", "MeasurementAggregator.cpp", 490, "matchingLocalRangeTimestampEvent.value().ticketId() == matchingRemoteRangeTimestampEvent.value().ticketId()");
}

void sub_1003CDF88()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100010AB8((void *)&_mh_execute_header, v0, v1, "#me,handleReceivedRoseMeasurements: getRangeResult failed", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003CDFB4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100010AB8((void *)&_mh_execute_header, v0, v1, "#me,RoseMeasurementEngine::getRangeResult: error: localRangeTimestampEvent has no rawLocalEvent", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003CDFE0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100010AB8((void *)&_mh_execute_header, v0, v1, "#me,RoseMeasurementEngine::getRangeResult: error: localRangeTimestampEvent has no machAbsoluteTime", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003CE00C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100010AB8((void *)&_mh_execute_header, v0, v1, "#me,RoseMeasurementEngine::getRangeResult: error: localRangeTimestampEvent has no rfChannel", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003CE038()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100010AB8((void *)&_mh_execute_header, v0, v1, "#me,RoseMeasurementEngine::getRangeResult: error: remoteRangeTimestampEvent has no rfChannel", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003CE064(os_log_t log, double a2)
{
  int v2;
  double v3;

  v2 = 134217984;
  v3 = a2;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "#me,RoseMeasurementEngine::getRangeResult: error: local and remote timestamp values are inconsistent with measured frequency. Computed range: %lf", (uint8_t *)&v2, 0xCu);
}

void sub_1003CE0DC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100010AB8((void *)&_mh_execute_header, v0, v1, "#me,RoseMeasurementEngine::getRangeResult: error: no range result or range timestamps; cannot use measurement set",
    v2,
    v3,
    v4,
    v5,
    v6);
  sub_10000991C();
}

void sub_1003CE108()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100010AB8((void *)&_mh_execute_header, v0, v1, "#me,RoseMeasurementEngine::checkTimestampAndFrequencyConsistency: denominator is zero, returning false", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003CE134()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100010AB8((void *)&_mh_execute_header, v0, v1, "#me,RoseMeasurementEngine::computeRange: denominator is zero, returning NaN", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003CE160()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100010AB8((void *)&_mh_execute_header, v0, v1, "#lut,In AoaHypothesesFileUtils::prepareRevLutFile, PRFileUtils::writeHeader failed.", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003CE18C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10014BC8C(__stack_chk_guard);
  sub_100010AD4();
  sub_10000BFB4((void *)&_mh_execute_header, v0, v1, "#lut,closeFile(), Could not seekp to PRFileUtils::HeaderV1::kCrcOffset for file %s", v2, v3, v4, v5, v6);
  sub_10000BFC4();
}

void sub_1003CE1EC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10014BC8C(__stack_chk_guard);
  sub_100010AD4();
  sub_10000BFB4((void *)&_mh_execute_header, v0, v1, "#lut,closeFile(), PRFileUtils::generateCrc failed, for file %s", v2, v3, v4, v5, v6);
  sub_10000BFC4();
}

void sub_1003CE24C()
{
  __assert_rtn("readReverseLUTsFromFile", "AoAFileUtils.cpp", 85, "optFileSize.has_value()");
}

void sub_1003CE274()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10014BC8C(__stack_chk_guard);
  sub_100010AD4();
  sub_10000BFB4((void *)&_mh_execute_header, v0, v1, "#lut,cannot open reverse LUT file %s", v2, v3, v4, v5, v6);
  sub_10000BFC4();
}

void sub_1003CE2D4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100010AB8((void *)&_mh_execute_header, v0, v1, "#lut,reading ch9 reverse LUTs failed", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003CE300()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100010AB8((void *)&_mh_execute_header, v0, v1, "#lut,reading ch5 reverse LUTs failed", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003CE32C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100010AB8((void *)&_mh_execute_header, v0, v1, "#lut,file size does not match expected size", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003CE358()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100010AB8((void *)&_mh_execute_header, v0, v1, "#lut,readOneChannelReverseLUTsFromFile failed", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003CE384()
{
  __assert_rtn("writeSingleChannelReverseLUT", "AoAFileUtils.cpp", 162, "(*fRevLUTs_ptr).size() == kNumOfLUT");
}

void sub_1003CE3AC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100010AB8((void *)&_mh_execute_header, v0, v1, "#lut,writeReverseLUTs, AoaHypothesesFileUtils::prepareFile failed.", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003CE3D8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10014BC8C(__stack_chk_guard);
  sub_100010AD4();
  sub_10000BFB4((void *)&_mh_execute_header, v0, v1, "#lut,readNNCoefFromFile:integrity check fails for file %s", v2, v3, v4, v5, v6);
  sub_10000BFC4();
}

void sub_1003CE438()
{
  __assert_rtn("SymmetricalMultipeer", "RoseCycleIntervalPicker.cpp", 84, "lowest.has_value()");
}

void sub_1003CE460()
{
  __assert_rtn("SymmetricalMultipeer", "RoseCycleIntervalPicker.cpp", 71, "false");
}

void sub_1003CE488()
{
  __assert_rtn("relayMessage", "CoexProxyObject.cpp", 29, "fDataProvider != nullptr");
}

void sub_1003CE4B0(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "CoexProxy: skip event because EventConsumer is not ready yet", v1, 2u);
}

void sub_1003CE4F8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100154B18((void *)&_mh_execute_header, v0, v1, "#sp,Did not get nb_rx_status and(or) mms_rx_status", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003CE524(unsigned __int8 a1, uint64_t a2, NSObject *a3)
{
  *(_DWORD *)a2 = 67109120;
  *(_DWORD *)(a2 + 4) = a1;
  sub_100154B34((void *)&_mh_execute_header, a3, (uint64_t)a3, "#sp,mms_rx_status = %d", (uint8_t *)a2);
}

void sub_1003CE564()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100154B18((void *)&_mh_execute_header, v0, v1, "#sp,RoseSolutionProvider::ingestMeasEngineRoseMeasurementSet", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003CE590()
{
  __assert_rtn("registerForComputationType", "RoseSolutionProvider.cpp", 88, "type != RoseComputationPreference::Unspecified");
}

void sub_1003CE5B8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100154B28();
  sub_100010B04((void *)&_mh_execute_header, v0, v1, "#sp,No computation preference found for ticket id %d", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003CE61C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100154B18((void *)&_mh_execute_header, v0, v1, "#sp,RoseSolutionProvider::ingestMeasurement(RoseDeviceMotion)", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003CE648(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10000BFB4((void *)&_mh_execute_header, a2, a3, "#sp,[Solution Provider] computeAndEmitSensorFusionSolution(imu_data): No ticket IDs is associated with given mac address (0x%llx)", a5, a6, a7, a8, 0);
  sub_10000BFC4();
}

void sub_1003CE6AC(_QWORD *a1, NSObject *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;

  v2 = (a1[1] - *a1) / 144;
  v3 = 134217984;
  v4 = v2;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "#sp,computeAndEmitSensorFusionSolution(imu_data): got %zu solutions", (uint8_t *)&v3, 0xCu);
  sub_10000BFC4();
}

void sub_1003CE72C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100154B18((void *)&_mh_execute_header, v0, v1, "#sp,computeAndEmitSensorFusionSolution(imu_data)", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003CE758()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100154B18((void *)&_mh_execute_header, v0, v1, "#sp,         RoseRawMeasurement::Type::RangeResult", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003CE784()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100154B18((void *)&_mh_execute_header, v0, v1, "#sp,         RoseRawMeasurement::Type::CIRData", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003CE7B0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100154B18((void *)&_mh_execute_header, v0, v1, "#sp,         RoseRawMeasurement::Type::AOACIRDataEvent", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003CE7DC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100154B18((void *)&_mh_execute_header, v0, v1, "#sp,         RoseRawMeasurement::Type::TOACIRDataEvent", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003CE808()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100154B18((void *)&_mh_execute_header, v0, v1, "#sp,         RoseRawMeasurement::Type::TOACIRDataV2Event", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003CE834()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100154B18((void *)&_mh_execute_header, v0, v1, "#sp,         RoseRawMeasurement::Type::ResponderSuperframeStats", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003CE860()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100154B18((void *)&_mh_execute_header, v0, v1, "#sp,         RoseRawMeasurement::Type::TimestampEvent", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003CE88C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100154B18((void *)&_mh_execute_header, v0, v1, "#sp,         RoseRawMeasurement::Type::RangeResultDebugEvent", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003CE8B8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100154B18((void *)&_mh_execute_header, v0, v1, "#sp,         RoseRawMeasurement::Type::RangeResultV2DebugEvent", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003CE8E4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100154B18((void *)&_mh_execute_header, v0, v1, "#sp,         RoseRawMeasurement::Type::SessionStartNotification", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003CE910()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100154B18((void *)&_mh_execute_header, v0, v1, "#sp,         RoseRawMeasurement::Type::RangingRateUpdateEvent", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003CE93C()
{
  os_log_t v0;
  uint8_t v1[16];

  sub_100010AE0();
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "#sp,RoseSolutionProvider got RoseRawMeasurement::Type::Unspecified", v1, 2u);
  sub_10000991C();
}

void sub_1003CE974()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100154B18((void *)&_mh_execute_header, v0, v1, "#sp,RoseSolutionProvider::ingestMeasurement(RoseRawMeasurement)", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003CE9A0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100154B28();
  sub_100010B04((void *)&_mh_execute_header, v0, v1, "#sp,RoseSolutionProvider::ingestRangeResult: service request database entry has no computation preference for ticket ID: %d; ignoring event",
    v2,
    v3,
    v4,
    v5,
    v6);
  sub_10000991C();
}

void sub_1003CEA04()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100154B28();
  sub_100010B04((void *)&_mh_execute_header, v0, v1, "#sp,RoseSolutionProvider::ingestRangeResult: service request database entry has no UWB rx_ant_mask for ticket ID %d; ignoring event",
    v2,
    v3,
    v4,
    v5,
    v6);
  sub_10000991C();
}

void sub_1003CEA68()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[8];

  sub_100154B28();
  sub_100154B34((void *)&_mh_execute_header, v0, v1, "#sp,RoseSolutionProvider::ingestRangeResult: service request database entry has no NB rx_ant_mask for ticket ID %d; ignoring event",
    v2);
  sub_10000991C();
}

void sub_1003CEAD0()
{
  __assert_rtn("ingestRangeResult", "RoseSolutionProvider.cpp", 270, "range_rslt.source() == RangeResultSource::Firmware");
}

void sub_1003CEAF8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100154B18((void *)&_mh_execute_header, v0, v1, "#sp,RoseSolutionProvider::ingestRangeResult", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003CEB24()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100154B18((void *)&_mh_execute_header, v0, v1, "#sp,RoseSolutionProvider::ingestCIRData: no longer supported by ME, ignoring!", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003CEB50()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100154B18((void *)&_mh_execute_header, v0, v1, "#sp,RoseSolutionProvider::ingestAOACIRDataEvent", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003CEB7C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100154B18((void *)&_mh_execute_header, v0, v1, "#sp,RoseSolutionProvider::ingestTOACIRDataEvent", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003CEBA8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100154B18((void *)&_mh_execute_header, v0, v1, "#sp,RoseSolutionProvider::ingestTOACIRDataV2Event", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003CEBD4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100154B18((void *)&_mh_execute_header, v0, v1, "#sp,RoseSolutionProvider::ingestSuperframeStats", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003CEC00()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100154B18((void *)&_mh_execute_header, v0, v1, "#sp,RoseSolutionProvider::ingestSessionStartNotification", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003CEC2C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100154B18((void *)&_mh_execute_header, v0, v1, "#sp,RoseSolutionProvider::ingestRangingRateUpdateEvent", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003CEC58()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100154B18((void *)&_mh_execute_header, v0, v1, "#sp,RoseSolutionProvider::ingestAOACIRDataEvent logged AOACIRDataEvent", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003CEC84()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100154B28();
  sub_100010B04((void *)&_mh_execute_header, v0, v1, "#sp,RoseSolutionProvider::ingestRangeTimestampEvent: service request database entry has no rf_channel for ticket ID %d; ignoring event",
    v2,
    v3,
    v4,
    v5,
    v6);
  sub_10000991C();
}

void sub_1003CECE8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100154B18((void *)&_mh_execute_header, v0, v1, "#sp,RoseSolutionProvider::ingestRangeResultDebugEvent", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003CED14()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100154B18((void *)&_mh_execute_header, v0, v1, "#sp,RoseSolutionProvider::ingestRangeResultDebugV2Event", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003CED40()
{
  __assert_rtn("ingestContextEvent_block_invoke", "RoseSolutionProvider.cpp", 491, "eventCopy.accessoryEvent.has_value()");
}

void sub_1003CED68()
{
  uint64_t v0;
  os_log_t v1;
  int v2;
  uint64_t v3;

  sub_100146AB0();
  sub_10001B0FC((void *)&_mh_execute_header, v0, v1, "#sp,No computation preference found for ticket ID: %d. Peer: 0x%llx", v2, v3);
  sub_10000BFC4();
}

void sub_1003CEDD0()
{
  uint64_t v0;
  os_log_t v1;
  int v2;
  uint64_t v3;

  sub_100146AB0();
  sub_10001B0FC((void *)&_mh_execute_header, v0, v1, "#sp,Ticket id %d has unspecified solution type preference. Peer: 0x%llx", v2, v3);
  sub_10000BFC4();
}

void sub_1003CEE38()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100154B18((void *)&_mh_execute_header, v0, v1, "#sp,RoseSolutionProvider::ingestMeasEngineRoseMeasurementSet: logging rangeResult", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003CEE64(uint64_t a1, NSObject *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  __int16 v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 48);
  v3 = *(_QWORD *)(a1 + 64);
  v4 = 134218240;
  v5 = v2;
  v6 = 2048;
  v7 = v3;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#sp,computeAndEmitSensorFusionSolution(rose_data): failed to convert mach abs time %.9f to mach continuous; ignoring. Peer: 0x%llx",
    (uint8_t *)&v4,
    0x16u);
  sub_10000BFC4();
}

void sub_1003CEEE8(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10000BFB4((void *)&_mh_execute_header, a2, a3, "#sp,computeAndEmitSensorFusionSolution(rose_data): RangeResult with no hypotheses, ignoring. Peer: 0x%llx", a5, a6, a7, a8, 0);
  sub_10000BFC4();
}

void sub_1003CEF50()
{
  uint64_t v0;
  os_log_t v1;
  int v2;
  uint64_t v3;

  sub_100146AB0();
  sub_10001B0FC((void *)&_mh_execute_header, v0, v1, "#sp,computeAndEmitSensorFusionSolution(rose_data): Failed to add rose data to filter. Ticket ID: %d, Peer: 0x%llx", v2, v3);
  sub_10000BFC4();
}

void sub_1003CEFB8(uint64_t a1)
{
  sub_10003E3F0(a1 + 624, *(_QWORD **)(a1 + 632));
}

void sub_1003CEFC8(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 832);
  if (v2)
  {
    *(_QWORD *)(a1 + 840) = v2;
    operator delete(v2);
  }
}

void sub_1003CEFE0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100010AB8((void *)&_mh_execute_header, v0, v1, "Failed to probe proxy objects. Service considered OFF.", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003CF00C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100010AB8((void *)&_mh_execute_header, v0, v1, "[RoseServiceProvider] Timed out while waiting for ingestServiceRequest to complete", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003CF038()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100010AB8((void *)&_mh_execute_header, v0, v1, "[RoseServiceProvider] ingestServiceRequest failed.", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003CF064()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10015ABCC();
  sub_100010B04((void *)&_mh_execute_header, v0, v1, "fRequestsDatabase does not have an entry with ticket_id %d", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003CF0C4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10015ABCC();
  sub_100010B04((void *)&_mh_execute_header, v0, v1, "The ticket ID: %d start notification has already been submitted", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003CF124(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100010B04((void *)&_mh_execute_header, a2, a3, "submitRangingPowerLoggingEvent error in updating ticket ID %d power log submission", a5, a6, a7, a8, 0);
  sub_10000991C();
}

void sub_1003CF188()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10015ABCC();
  sub_100010B04((void *)&_mh_execute_header, v0, v1, "Could not find ticket id %d in fServiceRequestsDatabase", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003CF1E8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100010AB8((void *)&_mh_execute_header, v0, v1, "Error updating fServiceRequestsDatabase entry", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003CF214()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100010AB8((void *)&_mh_execute_header, v0, v1, "Got trigger stop, but state is ServiceRequestState::Inactive", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003CF240()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10015ABCC();
  sub_100010B04((void *)&_mh_execute_header, v0, v1, "Ticket ID %d not found in requests database.", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003CF2A0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100154B18((void *)&_mh_execute_header, v0, v1, "RoseServiceProvider::handleDataEvent", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003CF2CC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100154B18((void *)&_mh_execute_header, v0, v1, "RoseServiceProvider::updateSessionDataPayload", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003CF2F8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100010AB8((void *)&_mh_execute_header, v0, v1, "[RoseServiceProvider] Cannot service this request. Service is not ready.", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003CF324(uint64_t a1)
{
  sub_10003E3F0(a1 + 664, *(_QWORD **)(a1 + 672));
}

void sub_1003CF344(uint64_t a1)
{
  sub_10003E3F0(a1 + 624, *(_QWORD **)(a1 + 632));
}

void sub_1003CF364(uint64_t a1)
{
  sub_10003E3F0(a1 + 664, *(_QWORD **)(a1 + 672));
}

void sub_1003CF374()
{
  __assert_rtn("_handleSchedulerUpdate", "RoseServiceProvider.mm", 948, "update.service_request_status_update.has_value()");
}

void sub_1003CF39C()
{
  __assert_rtn("_handleSchedulerUpdate", "RoseServiceProvider.mm", 954, "update.infra_status_update.has_value()");
}

void sub_1003CF3C4()
{
  __assert_rtn("_handleSchedulerUpdate", "RoseServiceProvider.mm", 960, "update.regulatory_update.has_value()");
}

void sub_1003CF3EC()
{
  __assert_rtn("_handleSchedulerUpdate", "RoseServiceProvider.mm", 966, "update.time_conversion_state_update.has_value()");
}

void sub_1003CF414()
{
  __assert_rtn("_handleSchedulerUpdate", "RoseServiceProvider.mm", 972, "update.error.has_value()");
}

void sub_1003CF43C()
{
  __assert_rtn("emitServiceResponse", "RoseServiceProvider.mm", 414, "fServiceClient != nullptr");
}

void sub_1003CF464()
{
  __assert_rtn("onServiceReadyUWBState", "RoseServiceProvider.mm", 489, "status_update.reason.has_value()");
}

void sub_1003CF48C()
{
  __assert_rtn("onSystemOff", "RoseServiceProvider.mm", 537, "status_update.reason.has_value()");
}

void sub_1003CF4B4()
{
  __assert_rtn("onAOPError", "RoseServiceProvider.mm", 553, "error.ticket_id_valid");
}

void sub_1003CF4DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  uint8_t *v4;
  uint64_t v5;
  char v6;
  char v7;
  uint64_t v8;

  sub_10015ABF4();
  if (v6 != v7)
    v8 = v5;
  else
    v8 = v1;
  *(_DWORD *)v2 = 136315138;
  *(_QWORD *)(v2 + 4) = v8;
  sub_10015ABE4((void *)&_mh_execute_header, v2, v3, "[RoseServiceProvider] %s", v4);
  if (*(char *)(v0 + 23) < 0)
    operator delete(*(void **)v0);
}

void sub_1003CF530()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100010AB8((void *)&_mh_execute_header, v0, v1, "Failed to register computation type.", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003CF55C()
{
  __assert_rtn("onInfrastructureStatusUpdate", "RoseServiceProvider.mm", 810, "status_update.reason.has_value()");
}

void sub_1003CF584()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100010AB8((void *)&_mh_execute_header, v0, v1, "[RoseServiceProvider] RoseInfrastructureEvent::Unspecified", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003CF5B0(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    sub_10015ABDC(a1);
}

void sub_1003CF5C0(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    operator delete(v2);
  }
}

void sub_1003CF5D8()
{
  __assert_rtn("antennaMask", "RoseRawMeasurement.cpp", 165, "pkt_idx < kNumPackets");
}

void sub_1003CF600()
{
  __assert_rtn("firstPathIndex", "RoseRawMeasurement.cpp", 171, "pkt_idx < kNumPackets");
}

void sub_1003CF628()
{
  __assert_rtn("peakIndex", "RoseRawMeasurement.cpp", 177, "pkt_idx < kNumPackets");
}

void sub_1003CF650()
{
  __assert_rtn("anchorTimeOffsetRoseTicks", "RoseRawMeasurement.cpp", 183, "pkt_idx < kNumPackets");
}

void sub_1003CF678()
{
  __assert_rtn("cirSamples", "RoseRawMeasurement.cpp", 189, "pkt_idx < kNumPackets");
}

void sub_1003CF6A0()
{
  __assert_rtn("getHwString", "RoseRawMeasurement.cpp", 430, "false");
}

void sub_1003CF6C8(uint64_t a1, NSObject *a2)
{
  int v2;
  _DWORD v3[2];

  v2 = *(unsigned __int8 *)(a1 + 64);
  v3[0] = 67109120;
  v3[1] = v2;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "#sp,[Solution Provider]   r1 access_slot_index: %d", (uint8_t *)v3, 8u);
}

void sub_1003CF740(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "#sp,[Solution Provider] mach cont time: UNKNOWN", v1, 2u);
}

void sub_1003CF780(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100161C8C((void *)&_mh_execute_header, a2, a3, "#sp,[Solution Provider] mach cont time: %.6f", a5, a6, a7, a8, 0);
}

void sub_1003CF7EC(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100161C8C((void *)&_mh_execute_header, a2, a3, "#sp,[Solution Provider] mach abs time: %.6f", a5, a6, a7, a8, 0);
}

void sub_1003CF858()
{
  __assert_rtn("RoseServiceRequest", "RoseServiceRequest.cpp", 58, "role != serviceattributes::Role::Unspecified");
}

void sub_1003CF880()
{
  __assert_rtn("RoseServiceRequest", "RoseServiceRequest.cpp", 59, "mac_mode != serviceattributes::MacMode::Unspecified");
}

void sub_1003CF8A8()
{
  __assert_rtn("getAssignedRFChannels", "RoseServiceRequest.cpp", 116, "didAssignRFChannels");
}

void sub_1003CF8D0()
{
  __assert_rtn("getAssignedRFChannels", "RoseServiceRequest.cpp", 137, "!range_enable_params.alternate_channel.has_value()");
}

void sub_1003CF8F8()
{
  __assert_rtn("getAssignedRFChannels", "RoseServiceRequest.cpp", 136, "!range_enable_params.start_channel.has_value()");
}

void sub_1003CF920()
{
  __assert_rtn("getAssignedRFChannels", "RoseServiceRequest.cpp", 121, "!range_enable_params.rf_channel.has_value()");
}

void sub_1003CF948()
{
  __assert_rtn("getAssignedRFChannels", "RoseServiceRequest.cpp", 130, "range_enable_params.fira.channel.has_value()");
}

void sub_1003CF970()
{
  __assert_rtn("grJobRequestAssignInitiatorParameters", "RoseRequestsFactory.cpp", 331, "params.updateRate != UpdateRate::Unspecified");
}

void sub_1003CF998()
{
  __assert_rtn("grJobRequestAssignInitiatorParameters", "RoseRequestsFactory.cpp", 332, "requestParameters.rx_mslot_sz_250us.has_value()");
}

void sub_1003CF9C0()
{
  __assert_rtn("grJobRequestAssignInitiatorParameters", "RoseRequestsFactory.cpp", 333, "requestParameters.tx_mslot_sz_250us.has_value()");
}

void sub_1003CF9E8()
{
  __assert_rtn("grJobRequestAssignInitiatorParameters", "RoseRequestsFactory.cpp", 338, "txSlotSize250Usec >= GR_DEFAULT_TX_MINI_SLOT_SIZE_250us");
}

void sub_1003CFA10()
{
  __assert_rtn("grJobRequestAssignInitiatorParameters", "RoseRequestsFactory.cpp", 339, "rxSlotSize250Usec >= GR_DEFAULT_TX_MINI_SLOT_SIZE_250us");
}

void sub_1003CFA38()
{
  __assert_rtn("grJobRequestAssignInitiatorParameters", "RoseRequestsFactory.cpp", 376, "false");
}

void sub_1003CFA60()
{
  __assert_rtn("grJobRequestAssignInitiatorParameters", "RoseRequestsFactory.cpp", 350, "false");
}

void sub_1003CFA88()
{
  __assert_rtn("grJobRequestAssignInitiatorParameters", "RoseRequestsFactory.cpp", 355, "false");
}

void sub_1003CFAB0()
{
  __assert_rtn("grJobRequestAssignInitiatorParameters", "RoseRequestsFactory.cpp", 370, "params.expectedNumberOfPeers == 1");
}

void sub_1003CFAD8()
{
  __assert_rtn("getGrJobType", "RoseRequestsFactory.cpp", 656, "grType != HSI_GR_TYPE_MAX");
}

void sub_1003CFB00()
{
  __assert_rtn("ServiceRequest", "RoseRequestsFactory.cpp", 851, "aopJobType == aop::AOPRoseJobType::Alisha_CCC || aopJobType == aop::AOPRoseJobType::Alisha_ACWG");
}

void sub_1003CFB28()
{
  __assert_rtn("ServiceRequest", "RoseRequestsFactory.cpp", 925, "!debugParams.forcedRxSyncSearchAntennaMask.has_value()");
}

void sub_1003CFB50()
{
  __assert_rtn("ServiceRequest", "RoseRequestsFactory.cpp", 924, "!debugParams.forcedRxAntennaMask.has_value()");
}

void sub_1003CFB78()
{
  __assert_rtn("ServiceRequest", "RoseRequestsFactory.cpp", 923, "!debugParams.forcedTxAntennaMask.has_value()");
}

void sub_1003CFBA0()
{
  __assert_rtn("ServiceRequest", "RoseRequestsFactory.cpp", 916, "debugParams.forcedTxAntennaMask.has_value()");
}

void sub_1003CFBC8()
{
  __assert_rtn("ServiceRequest", "RoseRequestsFactory.cpp", 917, "debugParams.forcedRxAntennaMask.has_value()");
}

void sub_1003CFBF0()
{
  __assert_rtn("ServiceRequest", "RoseRequestsFactory.cpp", 918, "debugParams.forcedRxSyncSearchAntennaMask.has_value()");
}

void sub_1003CFC18()
{
  __assert_rtn("ServiceRequest", "RoseRequestsFactory.cpp", 871, "!debugParams.forcedHopKey.has_value()");
}

void sub_1003CFC40()
{
  __assert_rtn("ServiceRequest", "RoseRequestsFactory.cpp", 870, "!debugParams.forcedStsIndex0.has_value()");
}

void sub_1003CFC68()
{
  __assert_rtn("ServiceRequest", "RoseRequestsFactory.cpp", 866, "debugParams.forcedStsIndex0.has_value()");
}

void sub_1003CFC90()
{
  __assert_rtn("ServiceRequest", "RoseRequestsFactory.cpp", 867, "debugParams.forcedHopKey.has_value()");
}

void sub_1003CFCB8()
{
  __assert_rtn("ServiceRequest", "RoseRequestsFactory.cpp", 860, "!debugParams.responderIdx.has_value()");
}

void sub_1003CFCE0()
{
  __assert_rtn("ServiceRequest", "RoseRequestsFactory.cpp", 856, "debugParams.responderIdx.has_value()");
}

void sub_1003CFD08()
{
  __assert_rtn("ServiceRequest", "RoseRequestsFactory.cpp", 857, "debugParams.forceStsIndex0AndHopKey");
}

void sub_1003CFD30()
{
  __assert_rtn("ServiceRequest", "RoseRequestsFactory.cpp", 1209, "rangeEnableParameters.debug_flags.has_value()");
}

void sub_1003CFD58()
{
  __assert_rtn("ServiceRequest", "RoseRequestsFactory.cpp", 1269, "false");
}

void sub_1003CFD80(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Client has not provided values for antenna masks, using default values.", v1, 2u);
}

void sub_1003CFDC0(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "BluetoothProxyObject received event before event consumer defined. Dropping event.", v1, 2u);
}

void sub_1003CFE00()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100010AB8((void *)&_mh_execute_header, v0, v1, "Failed to probe bluetooth proxy object.", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003CFE2C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100010AB8((void *)&_mh_execute_header, v0, v1, "Failed to probe coex proxy object.", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003CFE58()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100010AB8((void *)&_mh_execute_header, v0, v1, "Failed to probe regulatory proxy object.", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003CFE84()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100010AB8((void *)&_mh_execute_header, v0, v1, "Failed to probe motion proxy object.", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003CFEB0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100010AB8((void *)&_mh_execute_header, v0, v1, "Rose did not become ready in time.", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003CFEDC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100010AB8((void *)&_mh_execute_header, v0, v1, "Failed to probe rose proxy object.", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003CFF08()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100010AB8((void *)&_mh_execute_header, v0, v1, "[AP Scheduler] Cannot send scheduling message to AOP.", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003CFF34()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100154B28();
  sub_100010B04((void *)&_mh_execute_header, v0, v1, "fRequestsDatabase does not have an entry with ticket_id %d", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003CFF98()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100154B28();
  sub_100010B04((void *)&_mh_execute_header, v0, v1, "Failed to schedule ranging start for ticket ID: %d", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003CFFFC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100010AB8((void *)&_mh_execute_header, v0, v1, "Failed to send RangingStart to AOPRoseProxy", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003D0028()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100010AB8((void *)&_mh_execute_header, v0, v1, "Unsupported or unspecified mac mode.", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003D0054()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100154B28();
  sub_100010B04((void *)&_mh_execute_header, v0, v1, "Stop Service: No service request matches ticket id %d", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003D00B8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100010AB8((void *)&_mh_execute_header, v0, v1, "Failed to send RangingStop to AOPRoseProxy", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003D00E4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100154B28();
  sub_100010B04((void *)&_mh_execute_header, v0, v1, "[AP Scheduler] Cancel Service: No service request matches ticket id %d", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003D0148()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100154B28();
  sub_100010B04((void *)&_mh_execute_header, v0, v1, "[AP Scheduler] Cancel Service: Failed to schedule P2P ranging cancel for ticket ID: %d", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003D01AC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100154B28();
  sub_100010B04((void *)&_mh_execute_header, v0, v1, "[AP Scheduler] Cancel Service: Failed to send CancelServiceRequest to AOPRoseProxy, ticket ID: %d", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003D0210()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100010AB8((void *)&_mh_execute_header, v0, v1, "Proxy objects are not ready", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003D023C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100010AB8((void *)&_mh_execute_header, v0, v1, "proxyObjRef is nullptr", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003D0268(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 688);
  if (v2)
    sub_10016A9E4(v2, a1);
}

void sub_1003D027C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100154B18((void *)&_mh_execute_header, v0, v1, "[AP Scheduler] Scheduler handleEvent", v2, v3, v4, v5, v6);
  sub_10000991C();
}

_QWORD *sub_1003D02A8(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;

  if ((_QWORD *)*result == a2)
  {
    v2 = 4;
  }
  else
  {
    if (!*result)
      return result;
    v2 = 5;
    a2 = (_QWORD *)*result;
  }
  return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*a2 + 8 * v2))(a2);
}

void sub_1003D02E8()
{
  __assert_rtn("handleEventInternal", "RoseScheduler.cpp", 444, "event.error.has_value()");
}

void sub_1003D0310()
{
  __assert_rtn("handleEventInternal", "RoseScheduler.cpp", 451, "event.task_status_update.has_value()");
}

void sub_1003D0338()
{
  __assert_rtn("handleEventInternal", "RoseScheduler.cpp", 458, "event.rose_infra_status_update.has_value()");
}

void sub_1003D0360()
{
  __assert_rtn("handleEventInternal", "RoseScheduler.cpp", 465, "event.time_conversion_state_update.has_value()");
}

void sub_1003D0388()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100010AB8((void *)&_mh_execute_header, v0, v1, "[AP Scheduler] handleEventInternal AOPRoseEvent unspecified type", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003D03B4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100010AB8((void *)&_mh_execute_header, v0, v1, "Failed to send Fatal Log Collection message to AOPRoseProxy", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003D03E0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100010AB8((void *)&_mh_execute_header, v0, v1, "RoseSupervisor reported BT_TIME_SYNC_EVENT_TIMEOUT.", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003D040C(unsigned __int16 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  void *__p;
  void *__pa;
  uint64_t v17;
  uint64_t v18;
  char v19;

  sub_10015B788(a1, a2, a3, a4, a5, a6, a7, a8);
  sub_10016AA14();
  sub_10016A9F8((void *)&_mh_execute_header, v8, v9, "RoseScheduler - %s", v10, v11, v12, v13, v14, (uint64_t)__p, v17, v18, 2u);
  if (v19 < 0)
    operator delete(__pa);
  sub_10016AA28();
}

void sub_1003D049C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100010AB8((void *)&_mh_execute_header, v0, v1, "Failed to communicate with MotionProxyObject!", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003D04C8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10016A9EC();
  sub_100154B28();
  sub_100010B04((void *)&_mh_execute_header, v0, v1, "JobStart: Failed to update service request state to Active. Ticket ID: %d", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003D0528()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10016A9EC();
  sub_100154B28();
  sub_100010B04((void *)&_mh_execute_header, v0, v1, "RangingDidStart: Failed to update service request state to Active. Ticket ID: %d", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003D0588()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10016A9EC();
  sub_100154B28();
  sub_100010B04((void *)&_mh_execute_header, v0, v1, "RangingFailedToStart: Failed to update service request state to Inactive. Ticket ID: %d", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003D05E8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10016A9EC();
  sub_100154B28();
  sub_100010B04((void *)&_mh_execute_header, v0, v1, "JobStop: Failed to update service request state to Inactive. Ticket ID: %d", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003D0648()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10016A9EC();
  sub_100154B28();
  sub_100010B04((void *)&_mh_execute_header, v0, v1, "RangingStopped: Failed to update service request state to Inactive. Ticket ID: %d", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003D06A8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10016A9EC();
  sub_100154B28();
  sub_100010B04((void *)&_mh_execute_header, v0, v1, "RequestInvalidated: Failed to update service request state to Inactive. Ticket ID: %d. Returning.", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003D0708()
{
  os_log_t v0;
  uint8_t v1[16];

  sub_100010AE0();
  _os_log_fault_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "[RoseScheduler] ServiceRequestStatusUpdate - Unspecified, cancel current service request.", v1, 2u);
  sub_10000991C();
}

void sub_1003D0740(int a1)
{
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  void *__p[2];
  uint64_t v10;
  uint64_t v11;

  sub_100169C60(a1, __p);
  sub_10016AA14();
  HIDWORD(v11) = v1;
  sub_10016A9F8((void *)&_mh_execute_header, v2, v3, "RoseScheduler::handleServiceRequestStatusUpdate got unexpected status update %s", v4, v5, v6, v7, v8, (uint64_t)__p[0], (uint64_t)__p[1], v10, 2u);
  if (SHIBYTE(v10) < 0)
    operator delete(__p[0]);
  sub_10016AA28();
}

void sub_1003D07D0()
{
  __assert_rtn("handleRoseInfrastructureStatusUpdate", "RoseScheduler.cpp", 730, "false");
}

void sub_1003D07F8()
{
  __assert_rtn("handleRoseInfrastructureStatusUpdate", "RoseScheduler.cpp", 725, "false");
}

void sub_1003D0820()
{
  __assert_rtn("handleEventInternal", "RoseScheduler.cpp", 483, "event.roll_evt.has_value()");
}

void sub_1003D0848()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100010AB8((void *)&_mh_execute_header, v0, v1, "Got RoseBluetoothEvent::Type::Unspecified.", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003D0874()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100010AB8((void *)&_mh_execute_header, v0, v1, "Failed to handle BT adv roll. setNewRoseMacAddress returned false.", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003D08A0()
{
  __assert_rtn("handleEventInternal", "RoseScheduler.cpp", 539, "fPendingChannelToTriggerGPIOBlanking.has_value()");
}

void sub_1003D08C8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100010AB8((void *)&_mh_execute_header, v0, v1, "Failed to inform AOP about R2 GPIO trigger blanking request", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003D08F4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100010AB8((void *)&_mh_execute_header, v0, v1, "Failed to inform AOP about NB channels to trigger GPIO blanking on", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003D0920()
{
  __assert_rtn("handleEventInternal", "RoseScheduler.cpp", 604, "event.action_required");
}

void sub_1003D0948()
{
  __assert_rtn("handleEventInternal", "RoseScheduler.cpp", 610, "event.action_required");
}

void sub_1003D0970()
{
  __assert_rtn("sendMessageToCoexProxy", "RoseScheduler.cpp", 1107, "false");
}

void sub_1003D0998()
{
  __assert_rtn("handleServiceRequestStatusUpdate_block_invoke", "RoseScheduler.cpp", 960, "msg.channel_to_trigger_GPIO_blanking.has_value()");
}

void sub_1003D09C0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100010AB8((void *)&_mh_execute_header, v0, v1, "Failed to inform AOP about request to trigger GPIO blanking", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003D09EC(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 648);
  if (v2)
  {
    *(_QWORD *)(a1 + 656) = v2;
    operator delete(v2);
  }
}

void sub_1003D0A04(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2)
    sub_10016A9DC(v2, a1);
}

void sub_1003D0A18(_BYTE *a1, uint64_t a2)
{
  void *v2;

  if (*a1)
  {
    v2 = *(void **)(a2 + 648);
    if (v2)
    {
      *(_QWORD *)(a2 + 656) = v2;
      operator delete(v2);
    }
  }
}

void sub_1003D0A34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_10016AA0C("SetupProxyObjects", "ProxyObjectConsumerBase.h", a3, "proxyObj != nullptr");
}

void sub_1003D0A58()
{
  __assert_rtn("relayMessage", "MotionProxyObject.cpp", 26, "fDataProvider");
}

void sub_1003D0A80()
{
  __assert_rtn("ingestEvent", "MotionProxyObject.cpp", 36, "fMeasurementConsumer != nullptr");
}

void sub_1003D0AA8()
{
  __assert_rtn("ingestEvent", "MotionProxyObject.cpp", 37, "event.device_motion_update.has_value()");
}

void sub_1003D0AD0()
{
  __assert_rtn("handleEvent", "RoseRemotePeerScheduler.cpp", 48, "event.peer_msg.has_value()");
}

void sub_1003D0AF8()
{
  __assert_rtn("relayMessage", "AOPRoseProxyObject.cpp", 26, "fDataProvider != nullptr");
}

void sub_1003D0B20()
{
  __assert_rtn("relayMessage", "AOPRoseProxyObject.cpp", 33, "fDataProvider != nullptr");
}

void sub_1003D0B48()
{
  __assert_rtn("ingestEvent", "AOPRoseProxyObject.cpp", 40, "fEventConsumer != nullptr");
}

void sub_1003D0B70()
{
  __assert_rtn("ingestEvent", "AOPRoseProxyObject.cpp", 48, "fMeasurementConsumer != nullptr");
}

void sub_1003D0B98()
{
  __assert_rtn("generateValidP2PInitMasks", "RoseAntennaSelection.cpp", 532, "isValid()");
}

void sub_1003D0BC0()
{
  __assert_rtn("generateValidP2PRespMasks", "RoseAntennaSelection.cpp", 537, "isValid()");
}

void sub_1003D0BE8()
{
  __assert_rtn("generateValidP2SInitMasks", "RoseAntennaSelection.cpp", 543, "isValid()");
}

void sub_1003D0C10()
{
  __assert_rtn("generateValidP2SRespMasks", "RoseAntennaSelection.cpp", 549, "isValid()");
}

void sub_1003D0C38()
{
  __assert_rtn("generateValidFindMyFinderMasks", "RoseAntennaSelection.cpp", 691, "isValid()");
}

void sub_1003D0C60()
{
  __assert_rtn("generateValidGRInitMasks", "RoseAntennaSelection.cpp", 697, "isValid(skipAntennaCompatibilityCheck)");
}

void sub_1003D0C88()
{
  __assert_rtn("generateValidGRRespMasks", "RoseAntennaSelection.cpp", 702, "isValid()");
}

void sub_1003D0CB0()
{
  __assert_rtn("generateValidNbammsInitMasks", "RoseAntennaSelection.cpp", 708, "isValid()");
}

void sub_1003D0CD8()
{
  __assert_rtn("generateValidAlishaMasks", "RoseAntennaSelection.cpp", 719, "isValid()");
}

void sub_1003D0D00()
{
  __assert_rtn("generateValidFiRaUnicastInitMasks", "RoseAntennaSelection.cpp", 724, "isValid()");
}

void sub_1003D0D28()
{
  __assert_rtn("forceAntennaMasks", "RoseAntennaSelection.cpp", 738, "isValid()");
}

void sub_1003D0D50()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100010AB8((void *)&_mh_execute_header, v0, v1, "#ant-selection,mismatching secondary Tx, Rx antennas", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003D0D7C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100010AB8((void *)&_mh_execute_header, v0, v1, "#ant-selection,mismatching primary Tx, Rx antennas", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003D0DA8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100010AB8((void *)&_mh_execute_header, v0, v1, "#ant-selection,conflicting ports used with recieve diversity", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003D0DD4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100010AB8((void *)&_mh_execute_header, v0, v1, "#ant-selection,wrong antenna has priority", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003D0E00()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100010AB8((void *)&_mh_execute_header, v0, v1, "#ant-selection,primary antenna masks are not NONE", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003D0E2C(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100010B04((void *)&_mh_execute_header, a2, a3, "Asked to delete service request, but no request found %d", a5, a6, a7, a8, 0);
  sub_10000991C();
}

void sub_1003D0E94(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100010B04((void *)&_mh_execute_header, a2, a3, "Asked to update service request, but no request found %d", a5, a6, a7, a8, 0);
  sub_10000991C();
}

void sub_1003D0F04()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100010AB8((void *)&_mh_execute_header, v0, v1, "Failed to populate qos config.", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003D0F30()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100010AB8((void *)&_mh_execute_header, v0, v1, "Failed to populate ranging trigger config", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003D0F5C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100010AB8((void *)&_mh_execute_header, v0, v1, "populateRangeEnableCommand failed", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003D0F88()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100010AB8((void *)&_mh_execute_header, v0, v1, "populateRangeEnableCommand failed with unknown HSI Version", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003D0FB4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100010AB8((void *)&_mh_execute_header, v0, v1, "populateRangeEnableCommand HSI1 failed", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003D0FE0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100010AB8((void *)&_mh_execute_header, v0, v1, "populateRangeEnableCommand HSI2 failed", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003D100C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_1000553C0((void *)&_mh_execute_header, v0, v1, "populateRangeEnableCommand failed: no alisha job type configured for Alisha mac mode.", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003D1038()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_1000553C0((void *)&_mh_execute_header, v0, v1, "populateRangeEnableCommand failed: invalid alisha job type configured for Alisha mac mode.", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003D1064()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_1000553C0((void *)&_mh_execute_header, v0, v1, "populateRangeEnableCommand failed: not gr config for gr job.", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003D1090()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100010AB8((void *)&_mh_execute_header, v0, v1, "newServiceRequest failed", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003D10BC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100010AB8((void *)&_mh_execute_header, v0, v1, "populate test NMI Range Enable Command failed", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003D10E8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100010AB8((void *)&_mh_execute_header, v0, v1, "populate NMI Range Enable Command failed", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003D1114()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100010AB8((void *)&_mh_execute_header, v0, v1, "PRRoseProvider::newServiceRequestPacket got Unspecified mac mode", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003D1140()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_1000553C0((void *)&_mh_execute_header, v0, v1, "PRSupervisorPacketBuilder::PTSCmd missing required parameter.", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003D116C()
{
  __assert_rtn("rangeEnable", "PRRoseSupervisorPacketBuilder.mm", 918, "Rose::isLegacyPacketType(params.rx_pkt_type.value())");
}

void sub_1003D1194()
{
  __assert_rtn("rangeEnable", "PRRoseSupervisorPacketBuilder.mm", 917, "Rose::isLegacyPacketType(params.tx_pkt_type.value())");
}

void sub_1003D11BC()
{
  __assert_rtn("rangeEnable", "PRRoseSupervisorPacketBuilder.mm", 916, "Rose::isLegacyPreamble(params.rx_preamble.value())");
}

void sub_1003D11E4()
{
  __assert_rtn("rangeEnable", "PRRoseSupervisorPacketBuilder.mm", 915, "Rose::isLegacyPreamble(params.tx_preamble.value())");
}

void sub_1003D120C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100010AB8((void *)&_mh_execute_header, v0, v1, "PRSupervisorPacketBuilder::PTSCmd initiator missing antenna diversity parameters.", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003D1238()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100010AB8((void *)&_mh_execute_header, v0, v1, "PRSupervisorPacketBuilder::PTSCmd responder missing antenna diversity parameters.", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003D1264(unsigned __int8 *a1, uint64_t a2, NSObject *a3)
{
  int v3;

  v3 = *a1;
  *(_DWORD *)a2 = 67109120;
  *(_DWORD *)(a2 + 4) = v3;
  sub_1001788A0((void *)&_mh_execute_header, a2, a3, "PRSupervisorPacketBuilder::PTSCmd: invalid session role %d", (uint8_t *)a2);
}

void sub_1003D12A0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100154B18((void *)&_mh_execute_header, v0, v1, "PRSupervisorPacketBuilder::populateRangeEnableCommand PointToShare", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003D12CC()
{
  __assert_rtn("rangeEnable", "PRRoseSupervisorPacketBuilder.mm", 1066, "Rose::isLegacyPacketType(params.rx_pkt_type.value())");
}

void sub_1003D12F4()
{
  __assert_rtn("rangeEnable", "PRRoseSupervisorPacketBuilder.mm", 1065, "Rose::isLegacyPacketType(params.tx_pkt_type.value())");
}

void sub_1003D131C()
{
  __assert_rtn("rangeEnable", "PRRoseSupervisorPacketBuilder.mm", 1064, "Rose::isLegacyPreamble(params.rx_preamble.value())");
}

void sub_1003D1344()
{
  __assert_rtn("rangeEnable", "PRRoseSupervisorPacketBuilder.mm", 1063, "Rose::isLegacyPreamble(params.tx_preamble.value())");
}

void sub_1003D136C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100154B18((void *)&_mh_execute_header, v0, v1, "PRSupervisorPacketBuilder::populateRangeEnableCommand PointToShareHSI2", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003D1398()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_1000553C0((void *)&_mh_execute_header, v0, v1, "PRSupervisorPacketBuilder::P2PCmd HSI1 missing required parameter.", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003D13C4()
{
  __assert_rtn("rangeEnable", "PRRoseSupervisorPacketBuilder.mm", 708, "Rose::isLegacyPacketType(params.rx_pkt_type.value())");
}

void sub_1003D13EC()
{
  __assert_rtn("rangeEnable", "PRRoseSupervisorPacketBuilder.mm", 707, "Rose::isLegacyPacketType(params.tx_pkt_type.value())");
}

void sub_1003D1414()
{
  __assert_rtn("rangeEnable", "PRRoseSupervisorPacketBuilder.mm", 706, "Rose::isLegacyPreamble(params.rx_preamble.value())");
}

void sub_1003D143C()
{
  __assert_rtn("rangeEnable", "PRRoseSupervisorPacketBuilder.mm", 705, "Rose::isLegacyPreamble(params.tx_preamble.value())");
}

void sub_1003D1464()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100154B18((void *)&_mh_execute_header, v0, v1, "PRSupervisorPacketBuilder::populateRangeEnableCommand P2P HSI1", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003D1490()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_1000553C0((void *)&_mh_execute_header, v0, v1, "PRSupervisorPacketBuilder::P2PCmd HSI2 missing required parameter.", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003D14BC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100154B18((void *)&_mh_execute_header, v0, v1, "PRSupervisorPacketBuilder::populateRangeEnableCommand P2P HSI2", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003D14E8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100010AB8((void *)&_mh_execute_header, v0, v1, "PRSupervisorPacketBuilder::AlishaCmd missing required parameter.", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003D1514()
{
  __assert_rtn("rangeEnable", "PRRoseSupervisorPacketBuilder.mm", 1827, "Rose::isLegacyPreamble(params.alisha.preamble.value())");
}

void sub_1003D153C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100010AB8((void *)&_mh_execute_header, v0, v1, "PRSupervisorPacketBuilder::AlishaCmd missing required ACWG parameters.", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003D1568()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100154B18((void *)&_mh_execute_header, v0, v1, "PRRoseProvider::populateRangeEnableCommand Alisha", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003D1594()
{
  __assert_rtn("rangeEnable", "PRRoseSupervisorPacketBuilder.mm", 2023, "Rose::isLegacyPreamble(params.alisha.preamble.value())");
}

void sub_1003D15BC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_1000553C0((void *)&_mh_execute_header, v0, v1, "PRSupervisorPacketBuilder::GRNoDataCmd missing required parameter.", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003D15E8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_1000553C0((void *)&_mh_execute_header, v0, v1, "PRSupervisorPacketBuilder::GRCmd addresses can't be set.", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003D1614()
{
  __assert_rtn("rangeEnable", "PRRoseSupervisorPacketBuilder.mm", 1541, "Rose::isLegacyPacketType(params.pkt_type.value())");
}

void sub_1003D163C()
{
  __assert_rtn("rangeEnable", "PRRoseSupervisorPacketBuilder.mm", 1540, "Rose::isLegacyPreamble(params.rx_preamble.value())");
}

void sub_1003D1664()
{
  __assert_rtn("rangeEnable", "PRRoseSupervisorPacketBuilder.mm", 1539, "Rose::isLegacyPreamble(params.tx_preamble.value())");
}

void sub_1003D168C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100154B18((void *)&_mh_execute_header, v0, v1, "PRSupervisorPacketBuilder::populateRangeEnableCommand GR NoData", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003D16B8()
{
  __assert_rtn("rangeEnable", "PRRoseSupervisorPacketBuilder.mm", 1671, "Rose::isLegacyPacketType(params.pkt_type.value())");
}

void sub_1003D16E0()
{
  __assert_rtn("rangeEnable", "PRRoseSupervisorPacketBuilder.mm", 1670, "Rose::isLegacyPreamble(params.rx_preamble.value())");
}

void sub_1003D1708()
{
  __assert_rtn("rangeEnable", "PRRoseSupervisorPacketBuilder.mm", 1669, "Rose::isLegacyPreamble(params.tx_preamble.value())");
}

void sub_1003D1730()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_1000553C0((void *)&_mh_execute_header, v0, v1, "PRSupervisorPacketBuilder::GRCmd missing required parameter.", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003D175C()
{
  __assert_rtn("rangeEnable", "PRRoseSupervisorPacketBuilder.mm", 1201, "Rose::isLegacyPacketType(params.rx_pkt_type.value())");
}

void sub_1003D1784()
{
  __assert_rtn("rangeEnable", "PRRoseSupervisorPacketBuilder.mm", 1200, "Rose::isLegacyPacketType(params.tx_pkt_type.value())");
}

void sub_1003D17AC()
{
  __assert_rtn("rangeEnable", "PRRoseSupervisorPacketBuilder.mm", 1199, "Rose::isLegacyPreamble(params.rx_preamble.value())");
}

void sub_1003D17D4()
{
  __assert_rtn("rangeEnable", "PRRoseSupervisorPacketBuilder.mm", 1198, "Rose::isLegacyPreamble(params.tx_preamble.value())");
}

void sub_1003D17FC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100154B18((void *)&_mh_execute_header, v0, v1, "PRSupervisorPacketBuilder::populateRangeEnableCommand GR", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003D1828()
{
  __assert_rtn("rangeEnable", "PRRoseSupervisorPacketBuilder.mm", 1371, "Rose::isLegacyPacketType(params.rx_pkt_type.value())");
}

void sub_1003D1850()
{
  __assert_rtn("rangeEnable", "PRRoseSupervisorPacketBuilder.mm", 1370, "Rose::isLegacyPacketType(params.tx_pkt_type.value())");
}

void sub_1003D1878()
{
  __assert_rtn("rangeEnable", "PRRoseSupervisorPacketBuilder.mm", 1369, "Rose::isLegacyPreamble(params.rx_preamble.value())");
}

void sub_1003D18A0()
{
  __assert_rtn("rangeEnable", "PRRoseSupervisorPacketBuilder.mm", 1368, "Rose::isLegacyPreamble(params.tx_preamble.value())");
}

void sub_1003D18C8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100010AB8((void *)&_mh_execute_header, v0, v1, "PRSupervisorPacketBuilder::FiRaUnicastCmdHSI1 missing required parameter.", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003D18F4()
{
  __assert_rtn("rangeEnable", "PRRoseSupervisorPacketBuilder.mm", 1925, "Rose::isLegacyPreamble(params.fira.preamble.value())");
}

void sub_1003D191C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100154B18((void *)&_mh_execute_header, v0, v1, "PRRoseProvider::populateRangeEnableCommand FiRa Unicast", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003D1948()
{
  __assert_rtn("rangeEnable", "PRRoseSupervisorPacketBuilder.mm", 2120, "Rose::isLegacyPreamble(params.fira.preamble.value())");
}

void sub_1003D1970()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100010AB8((void *)&_mh_execute_header, v0, v1, "PRSupervisorPacketBuilder::FiRaContentionBasedCmdHSI1 missing required parameter.", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003D199C()
{
  __assert_rtn("rangeEnable", "PRRoseSupervisorPacketBuilder.mm", 2219, "Rose::isLegacyPreamble(params.fira.preamble.value())");
}

void sub_1003D19C4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100154B18((void *)&_mh_execute_header, v0, v1, "PRRoseProvider::populateRangeEnableCommand FiRa Contention Based", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003D19F0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100010AB8((void *)&_mh_execute_header, v0, v1, "PRSupervisorPacketBuilder::FiRaContentionBasedCmdHSI2 missing required parameter.", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003D1A1C()
{
  __assert_rtn("rangeEnable", "PRRoseSupervisorPacketBuilder.mm", 2314, "Rose::isLegacyPreamble(params.fira.preamble.value())");
}

void sub_1003D1A44()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100010AB8((void *)&_mh_execute_header, v0, v1, "PRSupervisorPacketBuilder Test NMI missing required parameter.", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003D1A70()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100154B18((void *)&_mh_execute_header, v0, v1, "PRSupervisorPacketBuilder populate Test NMI Range Enable Command", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003D1A9C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100010AB8((void *)&_mh_execute_header, v0, v1, "PRSupervisorPacketBuilder NMI missing required parameter.", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003D1AC8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100154B18((void *)&_mh_execute_header, v0, v1, "PRRoseProvider::populateRangeEnableCommand NMI", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003D1AF4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_1000553C0((void *)&_mh_execute_header, v0, v1, "PRSupervisorPacketBuilder::triggerConfig for GR but gr_config is nullopt.", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003D1B20()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_1000553C0((void *)&_mh_execute_header, v0, v1, "PRSupervisorPacketBuilder::triggerConfig for test NMI but config is nullopt.", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003D1B4C()
{
  __assert_rtn("triggerConfig", "PRRoseSupervisorPacketBuilder.mm", 626, "false");
}

void sub_1003D1B74()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_1000553C0((void *)&_mh_execute_header, v0, v1, "PRSupervisorPacketBuilder::triggerConfig for NMI but config is nullopt.", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003D1BA0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100010AB8((void *)&_mh_execute_header, v0, v1, "PRSupervisorPacketBuilder::qosConfig - Unspecified quality of service.", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003D1BCC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_1000553C0((void *)&_mh_execute_header, v0, v1, "clientStartService start time cannot be specified as offset from next BT connection event without connection event descriptor (and vice versa)", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003D1BF8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_1000553C0((void *)&_mh_execute_header, v0, v1, "clientStartService gr request peer does not have a BT adv address.", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003D1C24()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_1000553C0((void *)&_mh_execute_header, v0, v1, "clientStartService given peer without Rose Mac Address.", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003D1C50()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_1000553C0((void *)&_mh_execute_header, v0, v1, "clientStartService NMI request peer does not have a BT adv address.", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003D1C7C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_1000553C0((void *)&_mh_execute_header, v0, v1, "clientStartService duty cycle should be <= 1", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003D1CA8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100154B18((void *)&_mh_execute_header, v0, v1, "PRSupervisorPacketBuilder::LPEMEnable", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003D1CD4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_1000553C0((void *)&_mh_execute_header, v0, v1, "Must specify a timebase to convert from", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003D1D00()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_1000553C0((void *)&_mh_execute_header, v0, v1, "Must specify a timebase to convert to", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003D1D2C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_1000553C0((void *)&_mh_execute_header, v0, v1, "Time bases must be different", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003D1D58()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100154B18((void *)&_mh_execute_header, v0, v1, "PRSupervisorPacketBuilder::convertTime", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003D1D84()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_1000553C0((void *)&_mh_execute_header, v0, v1, "Invalid deep sleep request", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003D1DB0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100154B18((void *)&_mh_execute_header, v0, v1, "PRSupervisorPacketBuilder::deepSleepRequest", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003D1DDC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100154B18((void *)&_mh_execute_header, v0, v1, "regulatory,geo,loc,invalidateCache", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003D1E08(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10017A058((void *)&_mh_execute_header, a2, a3, "regulatory,geo,loc,isAvailable,%d", a5, a6, a7, a8, 0);
  sub_10000991C();
}

void sub_1003D1E70()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100154B18((void *)&_mh_execute_header, v0, v1, "regulatory,geo,loc,tileIsAvailableFromFile", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003D1E9C()
{
  uint64_t v0;
  os_log_t v1;
  double v2;
  double v3;

  sub_10017A088();
  sub_10017A074((void *)&_mh_execute_header, v0, v1, "regulatory,geo,loc,isTileAvailableBasedOnFile,%.6f,%.6f", v2, v3);
  sub_10000BFC4();
}

void sub_1003D1F04()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100154B18((void *)&_mh_execute_header, v0, v1, "regulatory,geo,loc,knownLonLat,returnedTrue", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003D1F30()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100154B18((void *)&_mh_execute_header, v0, v1, "regulatory,geo,loc,knownLonLat,found", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003D1F5C(uint8_t *buf, _BYTE *a2, os_log_t log)
{
  *buf = 0;
  *a2 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "regulatory,geo,loc,knownLonLat", buf, 2u);
}

void sub_1003D1F98(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10017A058((void *)&_mh_execute_header, a2, a3, "regulatory,geo,loc,repeatedQuery,isAvailable,%d", a5, a6, a7, a8, 0);
  sub_10000991C();
}

void sub_1003D2000(unsigned __int8 *a1, int a2, os_log_t log)
{
  int v3;
  int v4;
  _DWORD v5[2];
  __int16 v6;
  int v7;
  __int16 v8;
  int v9;

  v3 = *a1;
  v4 = *((_DWORD *)a1 + 1);
  v5[0] = 67109632;
  v5[1] = a2;
  v6 = 1024;
  v7 = v3;
  v8 = 1024;
  v9 = v4;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "regulatory,geo,loc,latlon,%u,lastValid,%d,lastLonLat,%u", (uint8_t *)v5, 0x14u);
  sub_10000BFC4();
}

void sub_1003D2090()
{
  uint64_t v0;
  os_log_t v1;
  double v2;
  double v3;

  sub_10017A088();
  sub_10017A074((void *)&_mh_execute_header, v0, v1, "regulatory,geo,loc,in isUnrestrictedGrid,%.6f,%.6f", v2, v3);
  sub_10000BFC4();
}

void sub_1003D20F8(char *a1, _QWORD *a2, NSObject *a3)
{
  int v3;
  _QWORD *v4;

  if (*a1 < 0)
    a2 = (_QWORD *)*a2;
  v3 = 136446210;
  v4 = a2;
  sub_10017A068((void *)&_mh_execute_header, a3, (uint64_t)a3, "regulatory,gm,loc,grid,#Warning,could not open,%{public}s", (uint8_t *)&v3);
  sub_10000BFC4();
}

void sub_1003D2170()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100154B18((void *)&_mh_execute_header, v0, v1, "regulatory,gm,loc,grid,finished", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003D219C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100154B18((void *)&_mh_execute_header, v0, v1, "regulatory,gm,loc,grid,#Warning,Invalid PRReg availability file - unable to get data byte", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003D21C8(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10017A058((void *)&_mh_execute_header, a2, a3, "regulatory,gm,loc,grid,#Warning,avl byte index,%{public}d,is larger than the data available in the availabilty file", a5, a6, a7, a8, 0);
  sub_10000991C();
}

void sub_1003D222C(char *a1, _QWORD *a2, NSObject *a3)
{
  int v3;
  _QWORD *v4;

  if (*a1 < 0)
    a2 = (_QWORD *)*a2;
  v3 = 136446210;
  v4 = a2;
  sub_10017A068((void *)&_mh_execute_header, a3, (uint64_t)a3, "regulatory,gm,loc,grid,%{public}s", (uint8_t *)&v3);
  sub_10000BFC4();
}

void sub_1003D22A4(NSObject *a1, uint64_t a2, uint64_t a3)
{
  int v3;
  char *v4;

  v3 = 136315138;
  v4 = off_100852A10;
  sub_10017A068((void *)&_mh_execute_header, a1, a3, "regulatory,gm,loc,grid,fileDoesNotExist,%s", (uint8_t *)&v3);
  sub_10000BFC4();
}

void sub_1003D231C()
{
  os_log_t v0;
  uint8_t v1[16];

  sub_100010AE0();
  _os_log_fault_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "#btsampledistributor Registered for device presence bluetooth sample but does not support device presence.", v1, 2u);
  sub_10000991C();
}

void sub_1003D2354()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10001B110();
  sub_10000BFB4((void *)&_mh_execute_header, v0, v1, "#btsampledistributor CBDiscovery activation failed with error: %@", v2, v3, v4, v5, v6);
  sub_10000BFC4();
}

void sub_1003D23B4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100010AB8((void *)&_mh_execute_header, v0, v1, "#btsampledistributor LeechingAidingScanner for home device session activation failed due to CBManagerStatePoweredOff", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003D23E0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10017D318();
  sub_10017D330((void *)&_mh_execute_header, v0, v1, "#btsampledistributor BT Leeching with max rate scanner activation failed [%0.6f s]. Error: %@", v2, v3, v4, v5, v6);
  sub_10000BFC4();
}

void sub_1003D2440()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100010AB8((void *)&_mh_execute_header, v0, v1, "#btsampledistributor #nibtfinding btAddress is nil", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003D246C(uint64_t a1, uint64_t a2, NSObject *a3)
{
  *(_DWORD *)a1 = 134217984;
  *(_QWORD *)(a1 + 4) = a2;
  sub_100029D1C((void *)&_mh_execute_header, a3, (uint64_t)a3, "#btsampledistributor #nibtfinding macAddressHexString less than 1: %lu", (uint8_t *)a1);
}

void sub_1003D24A8(uint64_t a1, uint64_t a2, NSObject *a3)
{
  *(_DWORD *)a2 = 136315138;
  *(_QWORD *)(a2 + 4) = a1;
  sub_100029D1C((void *)&_mh_execute_header, a3, (uint64_t)a3, "#btsampledistributor #nibtfinding invalid btaddress length: %s", (uint8_t *)a2);
}

void sub_1003D24E4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10017D318();
  sub_10017D330((void *)&_mh_execute_header, v0, v1, "#btsampledistributor CBDiscovery activation failed [%0.6f s]. Error: %@", v2, v3, v4, v5, v6);
  sub_10000BFC4();
}

void sub_1003D2544()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10017D318();
  sub_10017D330((void *)&_mh_execute_header, v0, v1, "#btsampledistributor CBDiscovery Screen Off activation failed [%0.6f s]. Error: %@", v2, v3, v4, v5, v6);
  sub_10000BFC4();
}

void sub_1003D25A4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10017D318();
  sub_10017D330((void *)&_mh_execute_header, v0, v1, "#btsampledistributor CBDiscovery AirPods Leech activation failed [%0.6f s]. Error: %@", v2, v3, v4, v5, v6);
  sub_10000BFC4();
}

void sub_1003D2604()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100010AB8((void *)&_mh_execute_header, v0, v1, "#btsampledistributor _cbDiscoveryAirPodsLeech invalidated.", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003D2630()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100010AB8((void *)&_mh_execute_header, v0, v1, "#btsampledistributor _cbDiscoveryAirPodsLeech interrupted.", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003D265C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10001B110();
  sub_10000BFB4((void *)&_mh_execute_header, v0, v1, "#btsampledistributor _cbDiscoveryAirPodsLeech error: %@", v2, v3, v4, v5, v6);
  sub_10000BFC4();
}

void sub_1003D26BC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100010AB8((void *)&_mh_execute_header, v0, v1, "#btsampledistributor CBDiscoveryScreenOff invalidated.", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003D26E8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100010AB8((void *)&_mh_execute_header, v0, v1, "#btsampledistributor CBDiscoveryScreenOff interrupted.", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003D2714()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10001B110();
  sub_10000BFB4((void *)&_mh_execute_header, v0, v1, "#btsampledistributor CBDiscoveryScreenOff error: %@", v2, v3, v4, v5, v6);
  sub_10000BFC4();
}

void sub_1003D2774()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100010AB8((void *)&_mh_execute_header, v0, v1, "#btsampledistributor CBDiscovery invalidated.", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003D27A0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100010AE0();
  sub_100010AB8((void *)&_mh_execute_header, v0, v1, "#btsampledistributor CBDiscovery interrupted.", v2, v3, v4, v5, v6);
  sub_10000991C();
}

void sub_1003D27CC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10001B110();
  sub_10000BFB4((void *)&_mh_execute_header, v0, v1, "#btsampledistributor CBDiscovery error: %@", v2, v3, v4, v5, v6);
  sub_10000BFC4();
}

void sub_1003D282C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10001B110();
  sub_10000BFB4((void *)&_mh_execute_header, v0, v1, "#btsampledistributor Dropping sample with invalid RSSI %@", v2, v3, v4, v5, v6);
  sub_10000BFC4();
}

void sub_1003D288C(uint8_t *a1, _BYTE *a2, NSObject *a3)
{
  *a1 = 0;
  *a2 = 0;
  sub_100029D00((void *)&_mh_execute_header, a3, (uint64_t)a3, "enumerateFiles: null filename from reverseEnumerateFiles", a1);
}

void sub_1003D28C0(NSObject *a1, uint64_t a2, uint64_t a3)
{
  uint8_t v3[16];

  *(_WORD *)v3 = 0;
  sub_100029D00((void *)&_mh_execute_header, a1, a3, "pruneLogFiles: empty dir name", v3);
}

void sub_1003D28F8(int *a1, uint8_t *buf, os_log_t log)
{
  int v3;

  v3 = *a1;
  *(_DWORD *)buf = 67109120;
  *((_DWORD *)buf + 1) = v3;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "pruneLogFiles: clock_gettime failed with errno %d", buf, 8u);
}

