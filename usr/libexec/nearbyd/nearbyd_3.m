void sub_10015AC0C()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_100850468);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_100850468))
    {
      sub_10000BF04(&qword_100850450, "com.apple.nearbyd.accessory.download");
      __cxa_atexit((void (*)(void *))&std::string::~string, &qword_100850450, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_100850468);
    }
  }
}

void sub_10015AC88(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_100850468);
  _Unwind_Resume(a1);
}

void sub_10015ACA0()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_100850488);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_100850488))
    {
      sub_10000BF04(&qword_100850470, "com.apple.nearbyd.accessory.files");
      __cxa_atexit((void (*)(void *))&std::string::~string, &qword_100850470, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_100850488);
    }
  }
}

void sub_10015AD1C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_100850488);
  _Unwind_Resume(a1);
}

void sub_10015AD34()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_1008504A8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1008504A8))
    {
      sub_10000BF04(qword_100850490, "MA_");
      __cxa_atexit((void (*)(void *))&std::string::~string, qword_100850490, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1008504A8);
    }
  }
}

void sub_10015ADB0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1008504A8);
  _Unwind_Resume(a1);
}

void sub_10015ADC8()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_1008504C8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1008504C8))
    {
      sub_10000BF04(qword_1008504B0, "MB_");
      __cxa_atexit((void (*)(void *))&std::string::~string, qword_1008504B0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1008504C8);
    }
  }
}

void sub_10015AE44(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1008504C8);
  _Unwind_Resume(a1);
}

void sub_10015AE5C()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_1008504E8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1008504E8))
    {
      sub_10000BF04(qword_1008504D0, "D");
      __cxa_atexit((void (*)(void *))&std::string::~string, qword_1008504D0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1008504E8);
    }
  }
}

void sub_10015AED8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1008504E8);
  _Unwind_Resume(a1);
}

void sub_10015AEF0()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_100850508);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_100850508))
    {
      sub_10000BF04(&qword_1008504F0, "A");
      __cxa_atexit((void (*)(void *))&std::string::~string, &qword_1008504F0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_100850508);
    }
  }
}

void sub_10015AF6C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_100850508);
  _Unwind_Resume(a1);
}

void sub_10015AF84()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_100850528);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_100850528))
    {
      sub_10000BF04(qword_100850510, "FAS.bin");
      __cxa_atexit((void (*)(void *))&std::string::~string, qword_100850510, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_100850528);
    }
  }
}

void sub_10015B000(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_100850528);
  _Unwind_Resume(a1);
}

void sub_10015B018()
{
  unsigned __int8 v0;
  _OWORD *v1;

  v0 = atomic_load((unsigned __int8 *)&qword_100850548);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_100850548))
    {
      qword_100850530 = 0;
      qword_100850538 = 0;
      qword_100850540 = 0;
      v1 = operator new(0x30uLL);
      qword_100850538 = (uint64_t)(v1 + 3);
      qword_100850540 = (uint64_t)(v1 + 3);
      *v1 = xmmword_10046CDF8;
      v1[1] = unk_10046CE08;
      v1[2] = xmmword_10046CE18;
      qword_100850530 = (uint64_t)v1;
      __cxa_atexit((void (*)(void *))sub_100009C44, &qword_100850530, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_100850548);
    }
  }
}

void sub_10015B0B8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_100850548);
  _Unwind_Resume(a1);
}

void sub_10015B0D0()
{
  void *v0;
  std::string *v1;
  __int128 v2;
  std::string *v3;
  __int128 v4;
  std::string *v5;
  __int128 v6;
  std::string *v7;
  __int128 v8;
  std::string *v9;
  __int128 v10;
  std::string *v11;
  __int128 v12;
  std::string *v13;
  __int128 v14;
  std::string *v15;
  __int128 v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  __int128 v22;
  std::string *v23;
  __int128 v24;
  std::string *v25;
  __int128 v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  __int128 v30;
  std::string *v31;
  __int128 v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  __int128 v36;
  std::string v37;
  std::string v38;

  v0 = objc_autoreleasePoolPush();
  sub_1003610EC(0);
  v1 = std::string::insert(&v37, 0, "reverseLUT_A");
  v2 = *(_OWORD *)&v1->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v1->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v2;
  v1->__r_.__value_.__l.__size_ = 0;
  v1->__r_.__value_.__r.__words[2] = 0;
  v1->__r_.__value_.__r.__words[0] = 0;
  v3 = std::string::append(&v38, ".bin");
  v4 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
  qword_100855870 = v3->__r_.__value_.__r.__words[2];
  xmmword_100855860 = v4;
  v3->__r_.__value_.__l.__size_ = 0;
  v3->__r_.__value_.__r.__words[2] = 0;
  v3->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_100855860, (void *)&_mh_execute_header);
  sub_1003610EC(1);
  v5 = std::string::insert(&v37, 0, "reverseLUT_A");
  v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  v7 = std::string::append(&v38, ".bin");
  v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  qword_100855888 = v7->__r_.__value_.__r.__words[2];
  xmmword_100855878 = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_100855878, (void *)&_mh_execute_header);
  sub_1003610EC(2);
  v9 = std::string::insert(&v37, 0, "reverseLUT_A");
  v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  v11 = std::string::append(&v38, ".bin");
  v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  qword_1008558A0 = v11->__r_.__value_.__r.__words[2];
  xmmword_100855890 = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_100855890, (void *)&_mh_execute_header);
  sub_1003610EC(3);
  v13 = std::string::insert(&v37, 0, "reverseLUT_A");
  v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  v15 = std::string::append(&v38, ".bin");
  v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  qword_1008558B8 = v15->__r_.__value_.__r.__words[2];
  xmmword_1008558A8 = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1008558A8, (void *)&_mh_execute_header);
  sub_1003610EC(4);
  v17 = std::string::insert(&v37, 0, "reverseLUT_A");
  v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v18;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  v19 = std::string::append(&v38, ".bin");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  qword_1008558D0 = v19->__r_.__value_.__r.__words[2];
  xmmword_1008558C0 = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1008558C0, (void *)&_mh_execute_header);
  sub_1003610EC(5);
  v21 = std::string::insert(&v37, 0, "reverseLUT_A");
  v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  v23 = std::string::append(&v38, ".bin");
  v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  qword_1008558E8 = v23->__r_.__value_.__r.__words[2];
  xmmword_1008558D8 = v24;
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1008558D8, (void *)&_mh_execute_header);
  sub_1003610EC(6);
  v25 = std::string::insert(&v37, 0, "reverseLUT_A");
  v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v26;
  v25->__r_.__value_.__l.__size_ = 0;
  v25->__r_.__value_.__r.__words[2] = 0;
  v25->__r_.__value_.__r.__words[0] = 0;
  v27 = std::string::append(&v38, ".bin");
  v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
  qword_100855900 = v27->__r_.__value_.__r.__words[2];
  xmmword_1008558F0 = v28;
  v27->__r_.__value_.__l.__size_ = 0;
  v27->__r_.__value_.__r.__words[2] = 0;
  v27->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1008558F0, (void *)&_mh_execute_header);
  sub_1003610EC(7);
  v29 = std::string::insert(&v37, 0, "reverseLUT_A");
  v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v30;
  v29->__r_.__value_.__l.__size_ = 0;
  v29->__r_.__value_.__r.__words[2] = 0;
  v29->__r_.__value_.__r.__words[0] = 0;
  v31 = std::string::append(&v38, ".bin");
  v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
  qword_100855918 = v31->__r_.__value_.__r.__words[2];
  xmmword_100855908 = v32;
  v31->__r_.__value_.__l.__size_ = 0;
  v31->__r_.__value_.__r.__words[2] = 0;
  v31->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_100855908, (void *)&_mh_execute_header);
  sub_1003610EC(8);
  v33 = std::string::insert(&v37, 0, "reverseLUT_A");
  v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v34;
  v33->__r_.__value_.__l.__size_ = 0;
  v33->__r_.__value_.__r.__words[2] = 0;
  v33->__r_.__value_.__r.__words[0] = 0;
  v35 = std::string::append(&v38, ".bin");
  v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
  qword_100855930 = v35->__r_.__value_.__r.__words[2];
  xmmword_100855920 = v36;
  v35->__r_.__value_.__l.__size_ = 0;
  v35->__r_.__value_.__r.__words[2] = 0;
  v35->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_100855920, (void *)&_mh_execute_header);
  objc_autoreleasePoolPop(v0);
}

void sub_10015B6C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_10015B738@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, off_100808068[a1]);
}

_QWORD *sub_10015B74C@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, off_1008080C0[a1]);
}

_QWORD *sub_10015B760@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, off_100808108[a1]);
}

_QWORD *sub_10015B774@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, off_100808128[a1]);
}

void sub_10015B788(unsigned __int16 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  _QWORD *v10;
  unsigned int v11;
  const char *v12;
  size_t v13;
  _QWORD *v14;
  _QWORD *v15;
  unsigned int v16;
  const char *v17;
  size_t v18;
  _QWORD *v19;
  _QWORD *v20;
  std::string *v21;
  std::string::size_type size;
  _QWORD *v23;
  _QWORD *v24;
  void **v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  std::string v33;
  _QWORD v34[2];
  uint64_t v35;
  _QWORD v36[10];
  char v37;
  uint64_t v38;
  void *v39[2];
  unsigned __int8 v40;

  if (*((_BYTE *)a1 + 31))
  {
    v9 = sub_10036BAF8(a1[16], a2, a3, a4, a5, a6, a7, a8);
    sub_10036BB54(v9, v39);
  }
  else
  {
    sub_10000BF04(v39, "N/A");
  }
  sub_1000537E4((uint64_t)v34);
  sub_100054C60(&v35, (uint64_t)"AOPRoseError. ", 14);
  v10 = sub_100054C60(&v35, (uint64_t)"Status:", 7);
  v11 = *a1 - 1;
  if (v11 > 0x19)
    v12 = "UNDEFINED";
  else
    v12 = off_100808148[(__int16)v11];
  v13 = strlen(v12);
  v14 = sub_100054C60(v10, (uint64_t)v12, v13);
  sub_100054C60(v14, (uint64_t)", ", 2);
  v15 = sub_100054C60(&v35, (uint64_t)"Subtype: ", 9);
  v16 = a1[1] - 1;
  if (v16 > 0x13)
    v17 = "UNDEFINED";
  else
    v17 = off_100808218[(__int16)v16];
  v18 = strlen(v17);
  v19 = sub_100054C60(v15, (uint64_t)v17, v18);
  sub_100054C60(v19, (uint64_t)", ", 2);
  v20 = sub_100054C60(&v35, (uint64_t)"Ticket Id: ", 11);
  if (*((_BYTE *)a1 + 28))
    std::to_string(&v33, *(unsigned __int16 *)((char *)a1 + 29));
  else
    sub_10000BF04(&v33, "N/A");
  if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v21 = &v33;
  else
    v21 = (std::string *)v33.__r_.__value_.__r.__words[0];
  if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v33.__r_.__value_.__r.__words[2]);
  else
    size = v33.__r_.__value_.__l.__size_;
  v23 = sub_100054C60(v20, (uint64_t)v21, size);
  sub_100054C60(v23, (uint64_t)", ", 2);
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v33.__r_.__value_.__l.__data_);
  v24 = sub_100054C60(&v35, (uint64_t)"Rose Error Code: ", 17);
  if ((v40 & 0x80u) == 0)
    v25 = v39;
  else
    v25 = (void **)v39[0];
  if ((v40 & 0x80u) == 0)
    v26 = v40;
  else
    v26 = (uint64_t)v39[1];
  v27 = sub_100054C60(v24, (uint64_t)v25, v26);
  sub_100054C60(v27, (uint64_t)", ", 2);
  v28 = sub_100054C60(&v35, (uint64_t)"[Arg1: ", 7);
  std::ostream::operator<<(v28, *(_QWORD *)(a1 + 2));
  v29 = sub_100054C60(&v35, (uint64_t)", Arg2: ", 8);
  std::ostream::operator<<(v29, *(_QWORD *)(a1 + 6));
  v30 = sub_100054C60(&v35, (uint64_t)", Arg3: ", 8);
  v31 = (_QWORD *)std::ostream::operator<<(v30, *(_QWORD *)(a1 + 10));
  sub_100054C60(v31, (uint64_t)"]", 1);
  std::stringbuf::str(v36);
  *(_QWORD *)((char *)v34
  v35 = v32;
  if (v37 < 0)
    operator delete((void *)v36[8]);
  std::streambuf::~streambuf(v36);
  std::ios::~ios(&v38);
  if ((char)v40 < 0)
    operator delete(v39[0]);
}

void sub_10015BA94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  sub_100053910((uint64_t)&a16);
  if (*(char *)(v16 - 49) < 0)
    operator delete(*(void **)(v16 - 72));
  _Unwind_Resume(a1);
}

_QWORD *sub_10015BADC@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, off_1008082B8[a1]);
}

_QWORD *sub_10015BAF0@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, off_100808310[a1]);
}

_QWORD *sub_10015BB04@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, off_100808358[a1]);
}

_QWORD *sub_10015BB18@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, off_100808378[a1]);
}

uint64_t sub_10015BB2C(uint64_t a1, int a2, __int16 a3, __int128 *a4, double a5)
{
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  _QWORD *v10;

  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 32) = 0;
  *(_DWORD *)a1 = 0;
  *(_BYTE *)(a1 + 4) = 0;
  *(_DWORD *)(a1 + 40) = a2;
  *(double *)(a1 + 48) = a5;
  *(_WORD *)(a1 + 56) = a3;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)((char *)a4 + 19);
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  v7 = *a4;
  v8 = a4[1];
  v9 = *((_QWORD *)a4 + 4);
  *(_QWORD *)(a1 + 136) = 0;
  v10 = (_QWORD *)(a1 + 136);
  *(v10 - 1) = v9;
  *(_OWORD *)(v10 - 3) = v8;
  *(_OWORD *)(v10 - 5) = v7;
  v10[1] = 0;
  v10[2] = 0;
  sub_100137690(v10, *((const void **)a4 + 5), *((_QWORD *)a4 + 6), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((_QWORD *)a4 + 6) - *((_QWORD *)a4 + 5)) >> 3));
  memcpy((void *)(a1 + 160), a4 + 4, 0x181uLL);
  return a1;
}

void sub_10015BBE0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 80) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_10015BC00(uint64_t a1, int a2, uint64_t a3, uint64_t a4, __int16 a5, uint64_t a6)
{
  __n128 result;

  *(_WORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = a2;
  *(_QWORD *)(a1 + 32) = a3;
  *(_QWORD *)(a1 + 40) = a4;
  *(_WORD *)(a1 + 48) = *(_WORD *)a6;
  *(_WORD *)(a1 + 50) = a5;
  result = *(__n128 *)a6;
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a6 + 16);
  *(__n128 *)(a1 + 56) = result;
  *(_BYTE *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 208) = 0;
  return result;
}

uint64_t sub_10015BC3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  __int16 v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int16 v19;
  __int16 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;

  v10 = a2;
  *(_WORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(double *)(a1 + 32) = a9;
  *(_BYTE *)(a1 + 40) = 1;
  *(_WORD *)(a1 + 48) = sub_10036BAF8(*(unsigned __int16 *)(a3 + 20), a2, a3, a4, a5, a6, a7, a8);
  *(_WORD *)(a1 + 50) = v10;
  v19 = sub_10036BAF8(*(unsigned __int16 *)(a3 + 20), v12, v13, v14, v15, v16, v17, v18);
  v20 = *(_WORD *)(a3 + 26);
  v21 = *(_OWORD *)(a3 + 48);
  *(_WORD *)(a1 + 56) = v19;
  *(_WORD *)(a1 + 58) = v20;
  *(_OWORD *)(a1 + 64) = v21;
  v23 = *(_OWORD *)(a3 + 96);
  v22 = *(_OWORD *)(a3 + 112);
  v24 = *(_OWORD *)(a3 + 80);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a3 + 64);
  *(_OWORD *)(a1 + 160) = v24;
  *(_OWORD *)(a1 + 176) = v23;
  *(_OWORD *)(a1 + 192) = v22;
  v26 = *(_OWORD *)(a3 + 32);
  v25 = *(_OWORD *)(a3 + 48);
  v27 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)a3;
  *(_OWORD *)(a1 + 96) = v27;
  *(_OWORD *)(a1 + 112) = v26;
  *(_OWORD *)(a1 + 128) = v25;
  *(_BYTE *)(a1 + 208) = 1;
  return a1;
}

uint64_t sub_10015BCDC(uint64_t a1, __int16 a2, uint64_t a3, double a4)
{
  double v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;

  *(double *)a1 = a4;
  *(_WORD *)(a1 + 8) = a2;
  *(_BYTE *)(a1 + 10) = *(_BYTE *)(a3 + 20);
  *(_WORD *)(a1 + 12) = *(_WORD *)(a3 + 21);
  *(_WORD *)(a1 + 14) = *(_WORD *)(a3 + 23);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a3 + 28);
  v6 = sub_100360CC4(*(unsigned int *)(a3 + 28));
  v7 = 0;
  *(double *)(a1 + 24) = v6;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  v8 = a3 + 96;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  do
  {
    v9 = (_DWORD *)(a1 + v7);
    v9[8] = *(_DWORD *)(v8 + v7 - 64);
    v9[16] = *(_DWORD *)(v8 + v7 - 32);
    v9[24] = *(_DWORD *)(v8 + v7);
    v7 += 4;
  }
  while (v7 != 32);
  return a1;
}

uint64_t sub_10015BD7C(uint64_t a1, __int16 a2, uint64_t a3, double a4)
{
  double v6;
  uint64_t v7;

  *(double *)a1 = a4;
  *(_WORD *)(a1 + 8) = a2;
  *(_BYTE *)(a1 + 10) = *(_BYTE *)(a3 + 20);
  *(_WORD *)(a1 + 12) = *(_WORD *)(a3 + 21);
  *(_WORD *)(a1 + 14) = *(_WORD *)(a3 + 23);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a3 + 25);
  LOWORD(a4) = *(_WORD *)(a3 + 26);
  *(double *)(a1 + 24) = (double)*(unint64_t *)&a4 * 0.01;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a3 + 28);
  v6 = sub_100360CC4(*(unsigned int *)(a3 + 28));
  v7 = 0;
  *(double *)(a1 + 40) = v6;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  do
  {
    *(_DWORD *)(a1 + v7 + 48) = *(_DWORD *)(a3 + 32 + v7);
    v7 += 4;
  }
  while (v7 != 32);
  return a1;
}

uint64_t sub_10015BE20(uint64_t result, __int16 a2, uint64_t a3, double a4)
{
  uint64_t i;
  _OWORD *v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;

  *(double *)result = a4;
  *(_WORD *)(result + 8) = a2;
  *(_BYTE *)(result + 10) = *(_BYTE *)(a3 + 20);
  *(_BYTE *)(result + 11) = *(_BYTE *)(a3 + 23);
  *(_WORD *)(result + 12) = *(_WORD *)(a3 + 24);
  *(_WORD *)(result + 14) = *(_WORD *)(a3 + 26);
  for (i = 28; i != 116; i += 44)
  {
    v5 = (_OWORD *)(result + i);
    *v5 = 0uLL;
    v5[1] = 0uLL;
  }
  v6 = 0;
  v7 = 1;
  do
  {
    v8 = 0;
    v9 = 50 * v6;
    v10 = a3 + 50 * v6;
    v11 = result + 44 * v6;
    *(_BYTE *)(v11 + 16) = *(_BYTE *)(v10 + 28);
    *(_WORD *)(v11 + 18) = *(_WORD *)(v10 + 29);
    *(_WORD *)(v11 + 20) = *(_WORD *)(v10 + 31);
    v12 = v7;
    *(_DWORD *)(v11 + 24) = *(_DWORD *)(v10 + 33);
    do
    {
      *(_DWORD *)(v11 + 28 + v8) = *(_DWORD *)(a3 + 46 + v9 + v8);
      v8 += 4;
    }
    while (v8 != 32);
    v7 = 0;
    v6 = 1;
  }
  while ((v12 & 1) != 0);
  return result;
}

uint64_t sub_10015BEDC(uint64_t a1, int a2)
{
  if (a2 >= 2)
    sub_1003CF5D8();
  return *(unsigned __int8 *)(a1 + 44 * a2 + 16);
}

uint64_t sub_10015BF04(uint64_t a1, int a2)
{
  if (a2 >= 2)
    sub_1003CF600();
  return *(unsigned __int16 *)(a1 + 44 * a2 + 18);
}

uint64_t sub_10015BF2C(uint64_t a1, int a2)
{
  if (a2 >= 2)
    sub_1003CF628();
  return *(unsigned __int16 *)(a1 + 44 * a2 + 20);
}

uint64_t sub_10015BF54(uint64_t a1, int a2)
{
  if (a2 >= 2)
    sub_1003CF650();
  return *(unsigned int *)(a1 + 44 * a2 + 24);
}

uint64_t sub_10015BF7C(uint64_t a1, int a2)
{
  if (a2 >= 2)
    sub_1003CF678();
  return a1 + 44 * a2 + 28;
}

_QWORD *sub_10015BFA0(_QWORD *a1, char *a2)
{
  char *v3;
  int v4;
  const std::locale::facet *v5;
  int v6;
  std::locale v8;

  v3 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  v4 = *a2;
  if (*((_DWORD *)v3 + 36) == -1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
    v5 = std::locale::use_facet(&v8, &std::ctype<char>::id);
    v6 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 32);
    std::locale::~locale(&v8);
    *((_DWORD *)v3 + 36) = v6;
  }
  *((_DWORD *)v3 + 36) = v4;
  return a1;
}

void sub_10015C02C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

void sub_10015C040(unsigned __int8 *a1)
{
  int v2;
  NSObject *v3;
  int v4;
  const char *v5;
  _BYTE *v6;
  int v7;
  NSObject *v8;
  _BOOL4 v9;
  _BYTE *v10;
  int v11;
  uint64_t v12;
  _BOOL4 v13;
  uint64_t v14;
  const char *v15;
  NSObject *v16;
  uint32_t v17;
  int v18;
  uint64_t v19;
  _BOOL4 v20;
  uint64_t v21;
  const char *v22;
  NSObject *v23;
  uint32_t v24;
  int v25;
  uint64_t v26;
  _BOOL4 v27;
  double v28;
  const char *v29;
  NSObject *v30;
  uint32_t v31;
  NSObject *v32;
  int v33;
  int v34;
  NSObject *v35;
  _BOOL4 v36;
  const char *v37;
  NSObject *v38;
  uint32_t v39;
  uint64_t v40;
  uint64_t v41;
  _BYTE __p[12];
  char v43;
  uint8_t buf[4];
  _BYTE *v45;

  v2 = *((_DWORD *)a1 + 6);
  v3 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__p = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#sp,[Solution Provider] _printDebug timestamp_event:", __p, 2u);
    v3 = qword_10085F520;
  }
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *((unsigned __int16 *)a1 + 25);
    *(_DWORD *)__p = 67109120;
    *(_DWORD *)&__p[4] = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#sp,[Solution Provider] ticket id: %d", __p, 8u);
    v3 = qword_10085F520;
  }
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v5 = "Remote";
    if (!v2)
      v5 = "Local";
    *(_DWORD *)__p = 136315138;
    *(_QWORD *)&__p[4] = v5;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#sp,[Solution Provider]   source: %s", __p, 0xCu);
    v3 = qword_10085F520;
  }
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    sub_10036BB54(*((unsigned __int16 *)a1 + 24), __p);
    v6 = v43 >= 0 ? __p : *(_BYTE **)__p;
    *(_DWORD *)buf = 136315138;
    v45 = v6;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#sp,[Solution Provider]   status: %s", buf, 0xCu);
    if (v43 < 0)
      operator delete(*(void **)__p);
  }
  v7 = a1[1];
  v8 = qword_10085F520;
  v9 = os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT);
  if (v7)
  {
    if (v9)
    {
      sub_10036C290(*a1, __p);
      v10 = v43 >= 0 ? __p : *(_BYTE **)__p;
      *(_DWORD *)buf = 136315138;
      v45 = v10;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#sp,[Solution Provider]   rf channel: %s", buf, 0xCu);
      if (v43 < 0)
        operator delete(*(void **)__p);
    }
  }
  else if (v9)
  {
    *(_WORD *)__p = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#sp,[Solution Provider]   rf channel: UNKNOWN", __p, 2u);
  }
  v11 = a1[40];
  v12 = qword_10085F520;
  v13 = os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT);
  if (v11)
  {
    if (!v13)
      goto LABEL_30;
    v14 = *((_QWORD *)a1 + 4);
    *(_DWORD *)__p = 134217984;
    *(_QWORD *)&__p[4] = v14;
    v15 = "#sp,[Solution Provider]   mach_absolute_time_sec: %.6f";
    v16 = v12;
    v17 = 12;
  }
  else
  {
    if (!v13)
      goto LABEL_30;
    *(_WORD *)__p = 0;
    v15 = "#sp,[Solution Provider]   mach_absolute_time_sec: UNKNOWN";
    v16 = v12;
    v17 = 2;
  }
  _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, v15, __p, v17);
LABEL_30:
  v18 = a1[16];
  v19 = qword_10085F520;
  v20 = os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT);
  if (v18)
  {
    if (!v20)
      goto LABEL_36;
    v21 = *((_QWORD *)a1 + 1);
    *(_DWORD *)__p = 134217984;
    *(_QWORD *)&__p[4] = v21;
    v22 = "#sp,[Solution Provider]   mach_continuous_time_sec: %.6f";
    v23 = v19;
    v24 = 12;
  }
  else
  {
    if (!v20)
      goto LABEL_36;
    *(_WORD *)__p = 0;
    v22 = "#sp,[Solution Provider]   mach_continuous_time_sec: UNKNOWN";
    v23 = v19;
    v24 = 2;
  }
  _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, v22, __p, v24);
LABEL_36:
  v25 = a1[208];
  v26 = qword_10085F520;
  v27 = os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT);
  if (v25)
  {
    if (!v27)
      goto LABEL_42;
    v28 = sub_100360CC4(*(_QWORD *)(a1 + 108));
    *(_DWORD *)__p = 134217984;
    *(double *)&__p[4] = v28;
    v29 = "#sp,[Solution Provider]   r1 timestamp: %.9f sec";
    v30 = v26;
    v31 = 12;
  }
  else
  {
    if (!v27)
      goto LABEL_42;
    *(_WORD *)__p = 0;
    v29 = "#sp,[Solution Provider]   r1 timestamp: UNKNOWN";
    v30 = v26;
    v31 = 2;
  }
  _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, v29, __p, v31);
LABEL_42:
  v32 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    v33 = *((unsigned __int16 *)a1 + 29);
    *(_DWORD *)__p = 67109120;
    *(_DWORD *)&__p[4] = v33;
    _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "#sp,[Solution Provider]   r1 cycle_idx: %d", __p, 8u);
  }
  v34 = *((unsigned __int16 *)a1 + 24);
  v35 = qword_10085F520;
  v36 = os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT);
  if (v34)
  {
    if (v36)
    {
      *(_WORD *)__p = 0;
      _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "#sp,[Solution Provider]   round trip time: INVALID", __p, 2u);
      v35 = qword_10085F520;
    }
    if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__p = 0;
      v37 = "#sp,[Solution Provider]   turn around time: INVALID";
      v38 = v35;
      v39 = 2;
LABEL_53:
      _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, v37, __p, v39);
    }
  }
  else
  {
    if (v36)
    {
      v40 = *((_QWORD *)a1 + 8);
      *(_DWORD *)__p = 134217984;
      *(_QWORD *)&__p[4] = v40;
      _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "#sp,[Solution Provider]   round trip time: %llu rose fast ticks", __p, 0xCu);
      v35 = qword_10085F520;
    }
    if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
    {
      v41 = *((_QWORD *)a1 + 9);
      *(_DWORD *)__p = 134217984;
      *(_QWORD *)&__p[4] = v41;
      v37 = "#sp,[Solution Provider]   turn around time: %llu rose fast ticks";
      v38 = v35;
      v39 = 12;
      goto LABEL_53;
    }
  }
}

uint64_t sub_10015C590@<X0>(uint64_t a1@<X0>, char **a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  const std::locale::facet *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t p_size;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  const std::locale::facet *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t size;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  const std::locale::facet *v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  const std::locale::facet *v39;
  uint64_t v40;
  _QWORD *v41;
  const std::locale::facet *v42;
  uint64_t v43;
  _QWORD *v44;
  const std::locale::facet *v45;
  uint64_t v46;
  void *locale;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  const std::locale::facet *v53;
  uint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  const std::locale::facet *v61;
  uint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  _QWORD *v68;
  _QWORD *v69;
  _QWORD *v70;
  const std::locale::facet *v71;
  uint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  _QWORD *v78;
  void **v79;
  size_t v80;
  _QWORD *v81;
  _QWORD *v82;
  const std::locale::facet *v83;
  uint64_t v84;
  _QWORD *v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  _QWORD *v90;
  void **v91;
  size_t v92;
  _QWORD *v93;
  _QWORD *v94;
  const std::locale::facet *v95;
  uint64_t v96;
  _QWORD *v97;
  _QWORD *v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  _QWORD *v103;
  _QWORD *v104;
  _QWORD *v105;
  const std::locale::facet *v106;
  uint64_t v107;
  _QWORD *v108;
  _QWORD *v109;
  uint64_t v110;
  uint64_t v111;
  _QWORD *v112;
  _QWORD *v113;
  void **v114;
  size_t v115;
  _QWORD *v116;
  _QWORD *v117;
  const std::locale::facet *v118;
  uint64_t v119;
  _QWORD *v120;
  _QWORD *v121;
  uint64_t v122;
  uint64_t v123;
  _QWORD *v124;
  _QWORD *v125;
  unsigned int v126;
  const char *v127;
  size_t v128;
  _QWORD *v129;
  _QWORD *v130;
  const std::locale::facet *v131;
  uint64_t v132;
  _QWORD *v133;
  _QWORD *v134;
  uint64_t v135;
  uint64_t v136;
  _QWORD *v137;
  _QWORD *v138;
  int v139;
  std::string *p_dst;
  std::string::size_type v141;
  _QWORD *v142;
  _QWORD *v143;
  const std::locale::facet *v144;
  uint64_t v145;
  _QWORD *v146;
  _QWORD *v147;
  uint64_t v148;
  uint64_t v149;
  _QWORD *v150;
  _QWORD *v151;
  _QWORD *v152;
  _QWORD *v153;
  const std::locale::facet *v154;
  uint64_t v155;
  _QWORD *v156;
  _QWORD *v157;
  uint64_t v158;
  uint64_t v159;
  _QWORD *v160;
  _QWORD *v161;
  const std::locale::facet *v162;
  uint64_t v163;
  _QWORD *v164;
  _QWORD *v165;
  uint64_t v166;
  uint64_t v167;
  _QWORD *v168;
  _QWORD *v169;
  std::string *v170;
  std::string::size_type v171;
  _QWORD *v172;
  _QWORD *v173;
  const std::locale::facet *v174;
  uint64_t v175;
  _QWORD *v176;
  _QWORD *v177;
  uint64_t v178;
  uint64_t v179;
  _QWORD *v180;
  _QWORD *v181;
  std::string *v182;
  std::string::size_type v183;
  _QWORD *v184;
  _QWORD *v185;
  const std::locale::facet *v186;
  uint64_t v187;
  _QWORD *v188;
  _QWORD *v189;
  uint64_t v190;
  uint64_t v191;
  _QWORD *v192;
  _QWORD *v193;
  _QWORD *v194;
  _QWORD *v195;
  const std::locale::facet *v196;
  uint64_t v197;
  _QWORD *v198;
  _QWORD *v199;
  uint64_t v200;
  uint64_t v201;
  _QWORD *v202;
  _QWORD *v203;
  _QWORD *v204;
  _QWORD *v205;
  const std::locale::facet *v206;
  uint64_t v207;
  _QWORD *v208;
  _QWORD *v209;
  uint64_t v210;
  uint64_t v211;
  _QWORD *v212;
  _QWORD *v213;
  _QWORD *v214;
  _QWORD *v215;
  const std::locale::facet *v216;
  uint64_t v217;
  _QWORD *v218;
  _QWORD *v219;
  uint64_t v220;
  uint64_t v221;
  _QWORD *v222;
  _QWORD *v223;
  std::string *v224;
  std::string::size_type v225;
  _QWORD *v226;
  _QWORD *v227;
  const std::locale::facet *v228;
  uint64_t v229;
  _QWORD *v230;
  _QWORD *v231;
  uint64_t v232;
  uint64_t v233;
  _QWORD *v234;
  _QWORD *v235;
  std::string *v236;
  std::string::size_type v237;
  _QWORD *v238;
  _QWORD *v239;
  const std::locale::facet *v240;
  uint64_t v241;
  _QWORD *v242;
  _QWORD *v243;
  uint64_t v244;
  uint64_t v245;
  _QWORD *v246;
  _QWORD *v247;
  std::string *v248;
  std::string::size_type v249;
  _QWORD *v250;
  _QWORD *v251;
  const std::locale::facet *v252;
  uint64_t v253;
  _QWORD *v254;
  _QWORD *v255;
  uint64_t v256;
  uint64_t v257;
  _QWORD *v258;
  _QWORD *v259;
  _QWORD *v260;
  _QWORD *v261;
  const std::locale::facet *v262;
  uint64_t v263;
  _QWORD *v264;
  _QWORD *v265;
  uint64_t v266;
  uint64_t v267;
  _QWORD *v268;
  _QWORD *v269;
  std::string *v270;
  std::string::size_type v271;
  _QWORD *v272;
  _QWORD *v273;
  const std::locale::facet *v274;
  uint64_t v275;
  _QWORD *v276;
  _QWORD *v277;
  uint64_t v278;
  uint64_t v279;
  _QWORD *v280;
  _QWORD *v281;
  std::string *v282;
  std::string::size_type v283;
  _QWORD *v284;
  _QWORD *v285;
  const std::locale::facet *v286;
  uint64_t v287;
  _QWORD *v288;
  _QWORD *v289;
  uint64_t v290;
  uint64_t v291;
  _QWORD *v292;
  _QWORD *v293;
  std::string *v294;
  std::string::size_type v295;
  _QWORD *v296;
  _QWORD *v297;
  const std::locale::facet *v298;
  uint64_t v299;
  _QWORD *v300;
  _QWORD *v301;
  _QWORD *v302;
  _QWORD *v303;
  const std::locale::facet *v304;
  uint64_t v305;
  _QWORD *v306;
  const std::locale::facet *v307;
  uint64_t v308;
  _QWORD *v309;
  const std::locale::facet *v310;
  uint64_t v311;
  _QWORD *v312;
  const std::locale::facet *v313;
  uint64_t v314;
  void *v315;
  uint64_t v316;
  _QWORD *v317;
  _QWORD *v318;
  uint64_t v319;
  uint64_t v320;
  _QWORD *v321;
  _QWORD *v322;
  std::string *v323;
  std::string::size_type v324;
  _QWORD *v325;
  _QWORD *v326;
  const std::locale::facet *v327;
  uint64_t v328;
  _QWORD *v329;
  _QWORD *v330;
  uint64_t v331;
  uint64_t v332;
  _QWORD *v333;
  _QWORD *v334;
  std::string *v335;
  std::string::size_type v336;
  _QWORD *v337;
  _QWORD *v338;
  const std::locale::facet *v339;
  uint64_t v340;
  _QWORD *v341;
  _QWORD *v342;
  uint64_t v343;
  uint64_t v344;
  _QWORD *v345;
  _QWORD *v346;
  std::string *v347;
  std::string::size_type v348;
  _QWORD *v349;
  _QWORD *v350;
  const std::locale::facet *v351;
  uint64_t v352;
  _QWORD *v353;
  _QWORD *v354;
  uint64_t v355;
  uint64_t v356;
  _QWORD *v357;
  _QWORD *v358;
  std::string *v359;
  std::string::size_type v360;
  _QWORD *v361;
  _QWORD *v362;
  const std::locale::facet *v363;
  uint64_t v364;
  _QWORD *v365;
  _QWORD *v366;
  uint64_t v367;
  uint64_t v368;
  _QWORD *v369;
  _QWORD *v370;
  std::string *v371;
  std::string::size_type v372;
  _QWORD *v373;
  _QWORD *v374;
  const std::locale::facet *v375;
  uint64_t v376;
  _QWORD *v377;
  _QWORD *v378;
  uint64_t v379;
  uint64_t v380;
  _QWORD *v381;
  _QWORD *v382;
  std::string *v383;
  std::string::size_type v384;
  _QWORD *v385;
  _QWORD *v386;
  const std::locale::facet *v387;
  uint64_t v388;
  _QWORD *v389;
  _QWORD *v390;
  uint64_t v391;
  uint64_t v392;
  _QWORD *v393;
  _QWORD *v394;
  std::string *v395;
  std::string::size_type v396;
  _QWORD *v397;
  _QWORD *v398;
  const std::locale::facet *v399;
  uint64_t v400;
  _QWORD *v401;
  _QWORD *v402;
  uint64_t v403;
  uint64_t v404;
  _QWORD *v405;
  _QWORD *v406;
  std::string *v407;
  std::string::size_type v408;
  _QWORD *v409;
  _QWORD *v410;
  const std::locale::facet *v411;
  uint64_t v412;
  _QWORD *v413;
  _QWORD *v414;
  uint64_t v415;
  uint64_t v416;
  _QWORD *v417;
  _QWORD *v418;
  const std::locale::facet *v419;
  uint64_t v420;
  _QWORD *v421;
  _QWORD *v422;
  uint64_t v423;
  uint64_t v424;
  _QWORD *v425;
  _QWORD *v426;
  const std::locale::facet *v427;
  uint64_t v428;
  _QWORD *v429;
  _QWORD *v430;
  uint64_t v431;
  uint64_t v432;
  _QWORD *v433;
  _QWORD *v434;
  const std::locale::facet *v435;
  uint64_t v436;
  _QWORD *v437;
  _QWORD *v438;
  uint64_t v439;
  uint64_t v440;
  _QWORD *v441;
  _QWORD *v442;
  const std::locale::facet *v443;
  uint64_t v444;
  _QWORD *v445;
  _QWORD *v446;
  uint64_t v447;
  uint64_t v448;
  _QWORD *v449;
  _QWORD *v450;
  const std::locale::facet *v451;
  uint64_t v452;
  _QWORD *v453;
  const std::locale::facet *v454;
  uint64_t v455;
  char *v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  __int128 v462;
  std::string v463;
  std::string __dst;
  void *__p[2];
  char v466;
  std::locale v467;
  uint64_t v468;
  unsigned __int8 v469;
  _QWORD v470[2];
  uint64_t v471;
  _QWORD v472[10];
  char v473;
  uint64_t v474;
  _QWORD v475[2];
  uint64_t v476;
  _QWORD v477[10];
  char v478;
  uint64_t v479;
  _QWORD v480[2];
  uint64_t v481;
  _QWORD v482[10];
  char v483;
  uint64_t v484;
  std::string v485;
  unsigned __int8 v486;
  _BYTE v487[24];
  __int128 v488;

  sub_1000537E4((uint64_t)v480);
  sub_1000537E4((uint64_t)v475);
  sub_1000537E4((uint64_t)v470);
  v485.__r_.__value_.__s.__data_[8] = 9;
  v4 = sub_100054C60(&v471, (uint64_t)&v485.__r_.__value_.__l.__size_, 1);
  v5 = sub_100054C60(v4, (uint64_t)"'ticket id': ", 13);
  v6 = (_QWORD *)std::ostream::operator<<(v5, *(unsigned __int16 *)(a1 + 56));
  v7 = sub_100054C60(v6, (uint64_t)",", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v7 + *(_QWORD *)(*v7 - 24)));
  v8 = std::locale::use_facet((const std::locale *)&v485.__r_.__value_.__r.__words[1], &std::ctype<char>::id);
  v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v8->__vftable[2].~facet_0)(v8, 10);
  std::locale::~locale((std::locale *)&v485.__r_.__value_.__r.__words[1]);
  std::ostream::put(v7, v9);
  std::ostream::flush(v7);
  v485.__r_.__value_.__s.__data_[8] = 9;
  v10 = sub_100054C60(&v471, (uint64_t)&v485.__r_.__value_.__l.__size_, 1);
  v11 = sub_100054C60(v10, (uint64_t)"'", 1);
  sub_10015FF00(&v485.__r_.__value_.__l.__size_);
  if ((v486 & 0x80u) == 0)
    p_size = (uint64_t)&v485.__r_.__value_.__l.__size_;
  else
    p_size = v485.__r_.__value_.__l.__size_;
  if ((v486 & 0x80u) == 0)
    v13 = v486;
  else
    v13 = v485.__r_.__value_.__r.__words[2];
  v14 = sub_100054C60(v11, p_size, v13);
  v15 = sub_100054C60(v14, (uint64_t)" sess id': ", 11);
  v16 = (_QWORD *)std::ostream::operator<<(v15, *(unsigned __int16 *)(a1 + 98));
  v17 = sub_100054C60(v16, (uint64_t)",", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v17 + *(_QWORD *)(*v17 - 24)));
  v18 = std::locale::use_facet(&v467, &std::ctype<char>::id);
  v19 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v18->__vftable[2].~facet_0)(v18, 10);
  std::locale::~locale(&v467);
  std::ostream::put(v17, v19);
  std::ostream::flush(v17);
  if ((char)v486 < 0)
    operator delete((void *)v485.__r_.__value_.__l.__size_);
  v485.__r_.__value_.__s.__data_[8] = 9;
  v20 = sub_100054C60(&v471, (uint64_t)&v485.__r_.__value_.__l.__size_, 1);
  v21 = sub_100054C60(v20, (uint64_t)"'", 1);
  sub_10015FF00(&v485.__r_.__value_.__l.__size_);
  if ((v486 & 0x80u) == 0)
    size = (uint64_t)&v485.__r_.__value_.__l.__size_;
  else
    size = v485.__r_.__value_.__l.__size_;
  if ((v486 & 0x80u) == 0)
    v23 = v486;
  else
    v23 = v485.__r_.__value_.__r.__words[2];
  v24 = sub_100054C60(v21, size, v23);
  v25 = sub_100054C60(v24, (uint64_t)" cycle_idx': ", 13);
  v26 = (_QWORD *)std::ostream::operator<<(v25, *(unsigned __int16 *)(a1 + 112));
  v27 = sub_100054C60(v26, (uint64_t)",", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v27 + *(_QWORD *)(*v27 - 24)));
  v28 = std::locale::use_facet(&v467, &std::ctype<char>::id);
  v29 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v28->__vftable[2].~facet_0)(v28, 10);
  std::locale::~locale(&v467);
  std::ostream::put(v27, v29);
  std::ostream::flush(v27);
  if ((char)v486 < 0)
    operator delete((void *)v485.__r_.__value_.__l.__size_);
  v485.__r_.__value_.__s.__data_[8] = 48;
  v30 = sub_10015BFA0(&v471, &v485.__r_.__value_.__s.__data_[8]);
  *(_DWORD *)((char *)v30 + *(_QWORD *)(*v30 - 24) + 8) = *(_DWORD *)((_BYTE *)v30 + *(_QWORD *)(*v30 - 24) + 8) & 0xFFFFFFB5 | 8;
  v485.__r_.__value_.__s.__data_[8] = 9;
  v31 = sub_100054C60(&v471, (uint64_t)&v485.__r_.__value_.__l.__size_, 1);
  v32 = sub_100054C60(v31, (uint64_t)"'", 1);
  sub_10015FF00(&v485.__r_.__value_.__l.__size_);
  if ((v486 & 0x80u) == 0)
    v33 = (uint64_t)&v485.__r_.__value_.__l.__size_;
  else
    v33 = v485.__r_.__value_.__l.__size_;
  if ((v486 & 0x80u) == 0)
    v34 = v486;
  else
    v34 = v485.__r_.__value_.__r.__words[2];
  v35 = sub_100054C60(v32, v33, v34);
  v36 = sub_100054C60(v35, (uint64_t)" mac_addr': 0x", 14);
  *(_QWORD *)((char *)v36 + *(_QWORD *)(*v36 - 24) + 24) = 16;
  v37 = (_QWORD *)std::ostream::operator<<(v36, *(_QWORD *)(a1 + 64));
  v38 = sub_100054C60(v37, (uint64_t)",", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v38 + *(_QWORD *)(*v38 - 24)));
  v39 = std::locale::use_facet(&v467, &std::ctype<char>::id);
  v40 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v39->__vftable[2].~facet_0)(v39, 10);
  std::locale::~locale(&v467);
  std::ostream::put(v38, v40);
  std::ostream::flush(v38);
  if ((char)v486 < 0)
    operator delete((void *)v485.__r_.__value_.__l.__size_);
  *(_DWORD *)((char *)v472 + *(_QWORD *)(v471 - 24)) = *(_DWORD *)((_BYTE *)v472 + *(_QWORD *)(v471 - 24)) & 0xFFFFFFB5 | 2;
  std::stringbuf::str(v472);
  v41 = sub_100054C60(&v481, (uint64_t)"Range Result (Part 1 of 2):", 27);
  std::ios_base::getloc((const std::ios_base *)((char *)v41 + *(_QWORD *)(*v41 - 24)));
  v42 = std::locale::use_facet((const std::locale *)&v485.__r_.__value_.__r.__words[1], &std::ctype<char>::id);
  v43 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v42->__vftable[2].~facet_0)(v42, 10);
  std::locale::~locale((std::locale *)&v485.__r_.__value_.__r.__words[1]);
  std::ostream::put(v41, v43);
  std::ostream::flush(v41);
  v44 = sub_100054C60(&v481, (uint64_t)"{", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v44 + *(_QWORD *)(*v44 - 24)));
  v45 = std::locale::use_facet((const std::locale *)&v485.__r_.__value_.__r.__words[1], &std::ctype<char>::id);
  v46 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v45->__vftable[2].~facet_0)(v45, 10);
  std::locale::~locale((std::locale *)&v485.__r_.__value_.__r.__words[1]);
  std::ostream::put(v44, v46);
  std::ostream::flush(v44);
  if ((v469 & 0x80u) == 0)
    locale = &v467;
  else
    locale = v467.__locale_;
  if ((v469 & 0x80u) == 0)
    v48 = v469;
  else
    v48 = v468;
  sub_100054C60(&v481, (uint64_t)locale, v48);
  v485.__r_.__value_.__s.__data_[8] = 9;
  v49 = sub_100054C60(&v481, (uint64_t)&v485.__r_.__value_.__l.__size_, 1);
  v50 = sub_100054C60(v49, (uint64_t)"'mach abs time (sec)': ", 23);
  *(_QWORD *)((char *)v50 + *(_QWORD *)(*v50 - 24) + 16) = 6;
  v51 = (_QWORD *)std::ostream::operator<<(v50);
  v52 = sub_100054C60(v51, (uint64_t)",", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v52 + *(_QWORD *)(*v52 - 24)));
  v53 = std::locale::use_facet((const std::locale *)&v485.__r_.__value_.__r.__words[1], &std::ctype<char>::id);
  v54 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v53->__vftable[2].~facet_0)(v53, 10);
  std::locale::~locale((std::locale *)&v485.__r_.__value_.__r.__words[1]);
  std::ostream::put(v52, v54);
  std::ostream::flush(v52);
  v485.__r_.__value_.__s.__data_[8] = 9;
  v55 = sub_100054C60(&v481, (uint64_t)&v485.__r_.__value_.__l.__size_, 1);
  v56 = sub_100054C60(v55, (uint64_t)"'mach cont time (sec)': ", 24);
  *(_QWORD *)((char *)v56 + *(_QWORD *)(*v56 - 24) + 16) = 6;
  *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
  sub_10000BF04(__p, "UNKNOWN");
  sub_10015FF4C(&__dst, (uint64_t)__p, (std::string *)&v485.__r_.__value_.__r.__words[1]);
  if ((v486 & 0x80u) == 0)
    v57 = (uint64_t)&v485.__r_.__value_.__l.__size_;
  else
    v57 = v485.__r_.__value_.__l.__size_;
  if ((v486 & 0x80u) == 0)
    v58 = v486;
  else
    v58 = v485.__r_.__value_.__r.__words[2];
  v59 = sub_100054C60(v56, v57, v58);
  v60 = sub_100054C60(v59, (uint64_t)",", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v60 + *(_QWORD *)(*v60 - 24)));
  v61 = std::locale::use_facet((const std::locale *)&v463, &std::ctype<char>::id);
  v62 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v61->__vftable[2].~facet_0)(v61, 10);
  std::locale::~locale((std::locale *)&v463);
  std::ostream::put(v60, v62);
  std::ostream::flush(v60);
  if ((char)v486 < 0)
    operator delete((void *)v485.__r_.__value_.__l.__size_);
  if (v466 < 0)
    operator delete(__p[0]);
  v485.__r_.__value_.__s.__data_[8] = 9;
  v63 = sub_100054C60(&v481, (uint64_t)&v485.__r_.__value_.__l.__size_, 1);
  v64 = sub_100054C60(v63, (uint64_t)"'", 1);
  sub_10015FF00(&v485.__r_.__value_.__l.__size_);
  if ((v486 & 0x80u) == 0)
    v65 = (uint64_t)&v485.__r_.__value_.__l.__size_;
  else
    v65 = v485.__r_.__value_.__l.__size_;
  if ((v486 & 0x80u) == 0)
    v66 = v486;
  else
    v66 = v485.__r_.__value_.__r.__words[2];
  v67 = sub_100054C60(v64, v65, v66);
  v68 = sub_100054C60(v67, (uint64_t)" timestamp (sec)': ", 19);
  *(_QWORD *)((char *)v68 + *(_QWORD *)(*v68 - 24) + 16) = 6;
  v69 = (_QWORD *)std::ostream::operator<<(v68);
  v70 = sub_100054C60(v69, (uint64_t)",", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v70 + *(_QWORD *)(*v70 - 24)));
  v71 = std::locale::use_facet((const std::locale *)__p, &std::ctype<char>::id);
  v72 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v71->__vftable[2].~facet_0)(v71, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put(v70, v72);
  std::ostream::flush(v70);
  if ((char)v486 < 0)
    operator delete((void *)v485.__r_.__value_.__l.__size_);
  v485.__r_.__value_.__s.__data_[8] = 9;
  v73 = sub_100054C60(&v481, (uint64_t)&v485.__r_.__value_.__l.__size_, 1);
  v74 = sub_100054C60(v73, (uint64_t)"'", 1);
  sub_10015FF00(&v485.__r_.__value_.__l.__size_);
  if ((v486 & 0x80u) == 0)
    v75 = (uint64_t)&v485.__r_.__value_.__l.__size_;
  else
    v75 = v485.__r_.__value_.__l.__size_;
  if ((v486 & 0x80u) == 0)
    v76 = v486;
  else
    v76 = v485.__r_.__value_.__r.__words[2];
  v77 = sub_100054C60(v74, v75, v76);
  v78 = sub_100054C60(v77, (uint64_t)" sess status': ", 15);
  sub_10036BB54(*(unsigned __int16 *)(a1 + 96), __p);
  if (v466 >= 0)
    v79 = __p;
  else
    v79 = (void **)__p[0];
  v80 = strlen((const char *)v79);
  v81 = sub_100054C60(v78, (uint64_t)v79, v80);
  v82 = sub_100054C60(v81, (uint64_t)",", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v82 + *(_QWORD *)(*v82 - 24)));
  v83 = std::locale::use_facet((const std::locale *)&__dst, &std::ctype<char>::id);
  v84 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v83->__vftable[2].~facet_0)(v83, 10);
  std::locale::~locale((std::locale *)&__dst);
  std::ostream::put(v82, v84);
  std::ostream::flush(v82);
  if (v466 < 0)
    operator delete(__p[0]);
  if ((char)v486 < 0)
    operator delete((void *)v485.__r_.__value_.__l.__size_);
  v485.__r_.__value_.__s.__data_[8] = 9;
  v85 = sub_100054C60(&v481, (uint64_t)&v485.__r_.__value_.__l.__size_, 1);
  v86 = sub_100054C60(v85, (uint64_t)"'", 1);
  sub_10015FF00(&v485.__r_.__value_.__l.__size_);
  if ((v486 & 0x80u) == 0)
    v87 = (uint64_t)&v485.__r_.__value_.__l.__size_;
  else
    v87 = v485.__r_.__value_.__l.__size_;
  if ((v486 & 0x80u) == 0)
    v88 = v486;
  else
    v88 = v485.__r_.__value_.__r.__words[2];
  v89 = sub_100054C60(v86, v87, v88);
  v90 = sub_100054C60(v89, (uint64_t)" sess type': ", 13);
  sub_10036B8B0(*(unsigned __int8 *)(a1 + 100), __p);
  if (v466 >= 0)
    v91 = __p;
  else
    v91 = (void **)__p[0];
  v92 = strlen((const char *)v91);
  v93 = sub_100054C60(v90, (uint64_t)v91, v92);
  v94 = sub_100054C60(v93, (uint64_t)",", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v94 + *(_QWORD *)(*v94 - 24)));
  v95 = std::locale::use_facet((const std::locale *)&__dst, &std::ctype<char>::id);
  v96 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v95->__vftable[2].~facet_0)(v95, 10);
  std::locale::~locale((std::locale *)&__dst);
  std::ostream::put(v94, v96);
  std::ostream::flush(v94);
  if (v466 < 0)
    operator delete(__p[0]);
  if ((char)v486 < 0)
    operator delete((void *)v485.__r_.__value_.__l.__size_);
  v485.__r_.__value_.__s.__data_[8] = 48;
  v97 = sub_10015BFA0(&v481, &v485.__r_.__value_.__s.__data_[8]);
  *(_DWORD *)((char *)v97 + *(_QWORD *)(*v97 - 24) + 8) = *(_DWORD *)((_BYTE *)v97 + *(_QWORD *)(*v97 - 24) + 8) & 0xFFFFFFB5 | 8;
  v485.__r_.__value_.__s.__data_[8] = 9;
  v98 = sub_100054C60(&v481, (uint64_t)&v485.__r_.__value_.__l.__size_, 1);
  v99 = sub_100054C60(v98, (uint64_t)"'", 1);
  sub_10015FF00(&v485.__r_.__value_.__l.__size_);
  if ((v486 & 0x80u) == 0)
    v100 = (uint64_t)&v485.__r_.__value_.__l.__size_;
  else
    v100 = v485.__r_.__value_.__l.__size_;
  if ((v486 & 0x80u) == 0)
    v101 = v486;
  else
    v101 = v485.__r_.__value_.__r.__words[2];
  v102 = sub_100054C60(v99, v100, v101);
  v103 = sub_100054C60(v102, (uint64_t)" winning_tx_antenna_mask': 0x", 29);
  *(_QWORD *)((char *)v103 + *(_QWORD *)(*v103 - 24) + 24) = 2;
  v104 = (_QWORD *)std::ostream::operator<<(v103, *(unsigned __int8 *)(a1 + 312));
  v105 = sub_100054C60(v104, (uint64_t)",", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v105 + *(_QWORD *)(*v105 - 24)));
  v106 = std::locale::use_facet((const std::locale *)__p, &std::ctype<char>::id);
  v107 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v106->__vftable[2].~facet_0)(v106, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put(v105, v107);
  std::ostream::flush(v105);
  if ((char)v486 < 0)
    operator delete((void *)v485.__r_.__value_.__l.__size_);
  *(_DWORD *)((char *)v482 + *(_QWORD *)(v481 - 24)) = *(_DWORD *)((_BYTE *)v482 + *(_QWORD *)(v481 - 24)) & 0xFFFFFFB5 | 2;
  v485.__r_.__value_.__s.__data_[8] = 9;
  v108 = sub_100054C60(&v481, (uint64_t)&v485.__r_.__value_.__l.__size_, 1);
  v109 = sub_100054C60(v108, (uint64_t)"'", 1);
  sub_10015FF00(&v485.__r_.__value_.__l.__size_);
  if ((v486 & 0x80u) == 0)
    v110 = (uint64_t)&v485.__r_.__value_.__l.__size_;
  else
    v110 = v485.__r_.__value_.__l.__size_;
  if ((v486 & 0x80u) == 0)
    v111 = v486;
  else
    v111 = v485.__r_.__value_.__r.__words[2];
  v112 = sub_100054C60(v109, v110, v111);
  v113 = sub_100054C60(v112, (uint64_t)" UWB channel': ", 15);
  sub_10036C290(*(unsigned __int8 *)(a1 + 368), __p);
  if (v466 >= 0)
    v114 = __p;
  else
    v114 = (void **)__p[0];
  v115 = strlen((const char *)v114);
  v116 = sub_100054C60(v113, (uint64_t)v114, v115);
  v117 = sub_100054C60(v116, (uint64_t)",", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v117 + *(_QWORD *)(*v117 - 24)));
  v118 = std::locale::use_facet((const std::locale *)&__dst, &std::ctype<char>::id);
  v119 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v118->__vftable[2].~facet_0)(v118, 10);
  std::locale::~locale((std::locale *)&__dst);
  std::ostream::put(v117, v119);
  std::ostream::flush(v117);
  if (v466 < 0)
    operator delete(__p[0]);
  if ((char)v486 < 0)
    operator delete((void *)v485.__r_.__value_.__l.__size_);
  v485.__r_.__value_.__s.__data_[8] = 9;
  v120 = sub_100054C60(&v481, (uint64_t)&v485.__r_.__value_.__l.__size_, 1);
  v121 = sub_100054C60(v120, (uint64_t)"'", 1);
  sub_10015FF00(&v485.__r_.__value_.__l.__size_);
  if ((v486 & 0x80u) == 0)
    v122 = (uint64_t)&v485.__r_.__value_.__l.__size_;
  else
    v122 = v485.__r_.__value_.__l.__size_;
  if ((v486 & 0x80u) == 0)
    v123 = v486;
  else
    v123 = v485.__r_.__value_.__r.__words[2];
  v124 = sub_100054C60(v121, v122, v123);
  v125 = sub_100054C60(v124, (uint64_t)" Band select': ", 15);
  v126 = *(unsigned __int16 *)(a1 + 369);
  if (v126 >= 0x100)
  {
    sub_10036C2C0(*(_WORD *)(a1 + 369), __p);
    if (v466 >= 0)
      v127 = (const char *)__p;
    else
      v127 = (const char *)__p[0];
  }
  else
  {
    v127 = "N/A";
  }
  v128 = strlen(v127);
  v129 = sub_100054C60(v125, (uint64_t)v127, v128);
  v130 = sub_100054C60(v129, (uint64_t)",", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v130 + *(_QWORD *)(*v130 - 24)));
  v131 = std::locale::use_facet((const std::locale *)&__dst, &std::ctype<char>::id);
  v132 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v131->__vftable[2].~facet_0)(v131, 10);
  std::locale::~locale((std::locale *)&__dst);
  std::ostream::put(v130, v132);
  std::ostream::flush(v130);
  if (v126 >= 0x100 && v466 < 0)
    operator delete(__p[0]);
  if ((char)v486 < 0)
    operator delete((void *)v485.__r_.__value_.__l.__size_);
  v485.__r_.__value_.__s.__data_[8] = 9;
  v133 = sub_100054C60(&v481, (uint64_t)&v485.__r_.__value_.__l.__size_, 1);
  v134 = sub_100054C60(v133, (uint64_t)"'", 1);
  sub_10015FF00(&v485.__r_.__value_.__l.__size_);
  if ((v486 & 0x80u) == 0)
    v135 = (uint64_t)&v485.__r_.__value_.__l.__size_;
  else
    v135 = v485.__r_.__value_.__l.__size_;
  if ((v486 & 0x80u) == 0)
    v136 = v486;
  else
    v136 = v485.__r_.__value_.__r.__words[2];
  v137 = sub_100054C60(v134, v135, v136);
  v138 = sub_100054C60(v137, (uint64_t)" NB channel': ", 14);
  v139 = *(_DWORD *)(a1 + 372);
  sub_10000BF04(&v463, "N/A");
  if ((v139 & 0xFF0000) != 0)
  {
    std::to_string(&__dst, (unsigned __int16)v139);
  }
  else if (SHIBYTE(v463.__r_.__value_.__r.__words[2]) < 0)
  {
    sub_100004678(&__dst, v463.__r_.__value_.__l.__data_, v463.__r_.__value_.__l.__size_);
  }
  else
  {
    __dst = v463;
  }
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_dst = &__dst;
  else
    p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v141 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  else
    v141 = __dst.__r_.__value_.__l.__size_;
  v142 = sub_100054C60(v138, (uint64_t)p_dst, v141);
  v143 = sub_100054C60(v142, (uint64_t)",", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v143 + *(_QWORD *)(*v143 - 24)));
  v144 = std::locale::use_facet((const std::locale *)&v462, &std::ctype<char>::id);
  v145 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v144->__vftable[2].~facet_0)(v144, 10);
  std::locale::~locale((std::locale *)&v462);
  std::ostream::put(v143, v145);
  std::ostream::flush(v143);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  if (SHIBYTE(v463.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v463.__r_.__value_.__l.__data_);
  if ((char)v486 < 0)
    operator delete((void *)v485.__r_.__value_.__l.__size_);
  v485.__r_.__value_.__s.__data_[8] = 9;
  v146 = sub_100054C60(&v481, (uint64_t)&v485.__r_.__value_.__l.__size_, 1);
  v147 = sub_100054C60(v146, (uint64_t)"'", 1);
  sub_10015FF00(&v485.__r_.__value_.__l.__size_);
  if ((v486 & 0x80u) == 0)
    v148 = (uint64_t)&v485.__r_.__value_.__l.__size_;
  else
    v148 = v485.__r_.__value_.__l.__size_;
  if ((v486 & 0x80u) == 0)
    v149 = v486;
  else
    v149 = v485.__r_.__value_.__r.__words[2];
  v150 = sub_100054C60(v147, v148, v149);
  v151 = sub_100054C60(v150, (uint64_t)" range (m)': ", 13);
  *(_QWORD *)((char *)v151 + *(_QWORD *)(*v151 - 24) + 16) = 6;
  v152 = (_QWORD *)std::ostream::operator<<(v151);
  v153 = sub_100054C60(v152, (uint64_t)",", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v153 + *(_QWORD *)(*v153 - 24)));
  v154 = std::locale::use_facet((const std::locale *)&__dst, &std::ctype<char>::id);
  v155 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v154->__vftable[2].~facet_0)(v154, 10);
  std::locale::~locale((std::locale *)&__dst);
  std::ostream::put(v153, v155);
  std::ostream::flush(v153);
  if ((char)v486 < 0)
    operator delete((void *)v485.__r_.__value_.__l.__size_);
  v485.__r_.__value_.__s.__data_[8] = 9;
  v156 = sub_100054C60(&v481, (uint64_t)&v485.__r_.__value_.__l.__size_, 1);
  v157 = sub_100054C60(v156, (uint64_t)"'ME range unc (m)': ", 20);
  *(_QWORD *)((char *)v157 + *(_QWORD *)(*v157 - 24) + 16) = 6;
  *(_OWORD *)&v463.__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 520);
  sub_10000BF04(&__dst, "N/A");
  sub_10015FF4C(&v463, (uint64_t)&__dst, (std::string *)&v485.__r_.__value_.__r.__words[1]);
  if ((v486 & 0x80u) == 0)
    v158 = (uint64_t)&v485.__r_.__value_.__l.__size_;
  else
    v158 = v485.__r_.__value_.__l.__size_;
  if ((v486 & 0x80u) == 0)
    v159 = v486;
  else
    v159 = v485.__r_.__value_.__r.__words[2];
  v160 = sub_100054C60(v157, v158, v159);
  v161 = sub_100054C60(v160, (uint64_t)",", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v161 + *(_QWORD *)(*v161 - 24)));
  v162 = std::locale::use_facet((const std::locale *)&v462, &std::ctype<char>::id);
  v163 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v162->__vftable[2].~facet_0)(v162, 10);
  std::locale::~locale((std::locale *)&v462);
  std::ostream::put(v161, v163);
  std::ostream::flush(v161);
  if ((char)v486 < 0)
    operator delete((void *)v485.__r_.__value_.__l.__size_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  v485.__r_.__value_.__s.__data_[8] = 9;
  v164 = sub_100054C60(&v481, (uint64_t)&v485.__r_.__value_.__l.__size_, 1);
  v165 = sub_100054C60(v164, (uint64_t)"'", 1);
  sub_10015FF00(&v485.__r_.__value_.__l.__size_);
  if ((v486 & 0x80u) == 0)
    v166 = (uint64_t)&v485.__r_.__value_.__l.__size_;
  else
    v166 = v485.__r_.__value_.__l.__size_;
  if ((v486 & 0x80u) == 0)
    v167 = v486;
  else
    v167 = v485.__r_.__value_.__r.__words[2];
  v168 = sub_100054C60(v165, v166, v167);
  v169 = sub_100054C60(v168, (uint64_t)" azimuth PDOA (deg)': ", 22);
  *(_QWORD *)((char *)v169 + *(_QWORD *)(*v169 - 24) + 16) = 6;
  v462 = *(_OWORD *)(a1 + 256);
  sub_10000BF04(&v463, "invalid");
  sub_10015FF4C((std::string *)&v462, (uint64_t)&v463, &__dst);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v170 = &__dst;
  else
    v170 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v171 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  else
    v171 = __dst.__r_.__value_.__l.__size_;
  v172 = sub_100054C60(v169, (uint64_t)v170, v171);
  v173 = sub_100054C60(v172, (uint64_t)",", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v173 + *(_QWORD *)(*v173 - 24)));
  v174 = std::locale::use_facet((const std::locale *)&v485, &std::ctype<char>::id);
  v175 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v174->__vftable[2].~facet_0)(v174, 10);
  std::locale::~locale((std::locale *)&v485);
  std::ostream::put(v173, v175);
  std::ostream::flush(v173);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  if (SHIBYTE(v463.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v463.__r_.__value_.__l.__data_);
  if ((char)v486 < 0)
    operator delete((void *)v485.__r_.__value_.__l.__size_);
  v485.__r_.__value_.__s.__data_[8] = 9;
  v176 = sub_100054C60(&v481, (uint64_t)&v485.__r_.__value_.__l.__size_, 1);
  v177 = sub_100054C60(v176, (uint64_t)"'", 1);
  sub_10015FF00(&v485.__r_.__value_.__l.__size_);
  if ((v486 & 0x80u) == 0)
    v178 = (uint64_t)&v485.__r_.__value_.__l.__size_;
  else
    v178 = v485.__r_.__value_.__l.__size_;
  if ((v486 & 0x80u) == 0)
    v179 = v486;
  else
    v179 = v485.__r_.__value_.__r.__words[2];
  v180 = sub_100054C60(v177, v178, v179);
  v181 = sub_100054C60(v180, (uint64_t)" elevation PDOA (deg)': ", 24);
  *(_QWORD *)((char *)v181 + *(_QWORD *)(*v181 - 24) + 16) = 6;
  v462 = *(_OWORD *)(a1 + 272);
  sub_10000BF04(&v463, "invalid");
  sub_10015FF4C((std::string *)&v462, (uint64_t)&v463, &__dst);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v182 = &__dst;
  else
    v182 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v183 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  else
    v183 = __dst.__r_.__value_.__l.__size_;
  v184 = sub_100054C60(v181, (uint64_t)v182, v183);
  v185 = sub_100054C60(v184, (uint64_t)",", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v185 + *(_QWORD *)(*v185 - 24)));
  v186 = std::locale::use_facet((const std::locale *)&v485, &std::ctype<char>::id);
  v187 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v186->__vftable[2].~facet_0)(v186, 10);
  std::locale::~locale((std::locale *)&v485);
  std::ostream::put(v185, v187);
  std::ostream::flush(v185);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  if (SHIBYTE(v463.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v463.__r_.__value_.__l.__data_);
  if ((char)v486 < 0)
    operator delete((void *)v485.__r_.__value_.__l.__size_);
  v485.__r_.__value_.__s.__data_[8] = 9;
  v188 = sub_100054C60(&v481, (uint64_t)&v485.__r_.__value_.__l.__size_, 1);
  v189 = sub_100054C60(v188, (uint64_t)"'", 1);
  sub_10015FF00(&v485.__r_.__value_.__l.__size_);
  if ((v486 & 0x80u) == 0)
    v190 = (uint64_t)&v485.__r_.__value_.__l.__size_;
  else
    v190 = v485.__r_.__value_.__l.__size_;
  if ((v486 & 0x80u) == 0)
    v191 = v486;
  else
    v191 = v485.__r_.__value_.__r.__words[2];
  v192 = sub_100054C60(v189, v190, v191);
  v193 = sub_100054C60(v192, (uint64_t)" SOI RSSI (dBm)': ", 18);
  *(_QWORD *)((char *)v193 + *(_QWORD *)(*v193 - 24) + 16) = 6;
  v194 = (_QWORD *)std::ostream::operator<<(v193);
  v195 = sub_100054C60(v194, (uint64_t)",", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v195 + *(_QWORD *)(*v195 - 24)));
  v196 = std::locale::use_facet((const std::locale *)&__dst, &std::ctype<char>::id);
  v197 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v196->__vftable[2].~facet_0)(v196, 10);
  std::locale::~locale((std::locale *)&__dst);
  std::ostream::put(v195, v197);
  std::ostream::flush(v195);
  if ((char)v486 < 0)
    operator delete((void *)v485.__r_.__value_.__l.__size_);
  v485.__r_.__value_.__s.__data_[8] = 9;
  v198 = sub_100054C60(&v481, (uint64_t)&v485.__r_.__value_.__l.__size_, 1);
  v199 = sub_100054C60(v198, (uint64_t)"'", 1);
  sub_10015FF00(&v485.__r_.__value_.__l.__size_);
  if ((v486 & 0x80u) == 0)
    v200 = (uint64_t)&v485.__r_.__value_.__l.__size_;
  else
    v200 = v485.__r_.__value_.__l.__size_;
  if ((v486 & 0x80u) == 0)
    v201 = v486;
  else
    v201 = v485.__r_.__value_.__r.__words[2];
  v202 = sub_100054C60(v199, v200, v201);
  v203 = sub_100054C60(v202, (uint64_t)" anchor time offset raw (r1 ticks)': ", 37);
  v204 = (_QWORD *)std::ostream::operator<<(v203, *(unsigned int *)(a1 + 292));
  v205 = sub_100054C60(v204, (uint64_t)",", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v205 + *(_QWORD *)(*v205 - 24)));
  v206 = std::locale::use_facet((const std::locale *)&__dst, &std::ctype<char>::id);
  v207 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v206->__vftable[2].~facet_0)(v206, 10);
  std::locale::~locale((std::locale *)&__dst);
  std::ostream::put(v205, v207);
  std::ostream::flush(v205);
  if ((char)v486 < 0)
    operator delete((void *)v485.__r_.__value_.__l.__size_);
  v485.__r_.__value_.__s.__data_[8] = 9;
  v208 = sub_100054C60(&v481, (uint64_t)&v485.__r_.__value_.__l.__size_, 1);
  v209 = sub_100054C60(v208, (uint64_t)"'", 1);
  sub_10015FF00(&v485.__r_.__value_.__l.__size_);
  if ((v486 & 0x80u) == 0)
    v210 = (uint64_t)&v485.__r_.__value_.__l.__size_;
  else
    v210 = v485.__r_.__value_.__l.__size_;
  if ((v486 & 0x80u) == 0)
    v211 = v486;
  else
    v211 = v485.__r_.__value_.__r.__words[2];
  v212 = sub_100054C60(v209, v210, v211);
  v213 = sub_100054C60(v212, (uint64_t)" anchor time offset (ps)': ", 27);
  sub_100030398(*(double *)(a1 + 296));
  v214 = (_QWORD *)std::ostream::operator<<(v213);
  v215 = sub_100054C60(v214, (uint64_t)",", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v215 + *(_QWORD *)(*v215 - 24)));
  v216 = std::locale::use_facet((const std::locale *)&__dst, &std::ctype<char>::id);
  v217 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v216->__vftable[2].~facet_0)(v216, 10);
  std::locale::~locale((std::locale *)&__dst);
  std::ostream::put(v215, v217);
  std::ostream::flush(v215);
  if ((char)v486 < 0)
    operator delete((void *)v485.__r_.__value_.__l.__size_);
  v485.__r_.__value_.__s.__data_[8] = 9;
  v218 = sub_100054C60(&v481, (uint64_t)&v485.__r_.__value_.__l.__size_, 1);
  v219 = sub_100054C60(v218, (uint64_t)"'", 1);
  sub_10015FF00(&v485.__r_.__value_.__l.__size_);
  if ((v486 & 0x80u) == 0)
    v220 = (uint64_t)&v485.__r_.__value_.__l.__size_;
  else
    v220 = v485.__r_.__value_.__l.__size_;
  if ((v486 & 0x80u) == 0)
    v221 = v486;
  else
    v221 = v485.__r_.__value_.__r.__words[2];
  v222 = sub_100054C60(v219, v220, v221);
  v223 = sub_100054C60(v222, (uint64_t)" AOA first path SNR - center (dB)': ", 36);
  *(_QWORD *)((char *)v223 + *(_QWORD *)(*v223 - 24) + 16) = 6;
  v462 = *(_OWORD *)(a1 + 192);
  sub_10000BF04(&v463, "invalid");
  sub_10015FF4C((std::string *)&v462, (uint64_t)&v463, &__dst);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v224 = &__dst;
  else
    v224 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v225 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  else
    v225 = __dst.__r_.__value_.__l.__size_;
  v226 = sub_100054C60(v223, (uint64_t)v224, v225);
  v227 = sub_100054C60(v226, (uint64_t)",", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v227 + *(_QWORD *)(*v227 - 24)));
  v228 = std::locale::use_facet((const std::locale *)&v485, &std::ctype<char>::id);
  v229 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v228->__vftable[2].~facet_0)(v228, 10);
  std::locale::~locale((std::locale *)&v485);
  std::ostream::put(v227, v229);
  std::ostream::flush(v227);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  if (SHIBYTE(v463.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v463.__r_.__value_.__l.__data_);
  if ((char)v486 < 0)
    operator delete((void *)v485.__r_.__value_.__l.__size_);
  v485.__r_.__value_.__s.__data_[8] = 9;
  v230 = sub_100054C60(&v481, (uint64_t)&v485.__r_.__value_.__l.__size_, 1);
  v231 = sub_100054C60(v230, (uint64_t)"'", 1);
  sub_10015FF00(&v485.__r_.__value_.__l.__size_);
  if ((v486 & 0x80u) == 0)
    v232 = (uint64_t)&v485.__r_.__value_.__l.__size_;
  else
    v232 = v485.__r_.__value_.__l.__size_;
  if ((v486 & 0x80u) == 0)
    v233 = v486;
  else
    v233 = v485.__r_.__value_.__r.__words[2];
  v234 = sub_100054C60(v231, v232, v233);
  v235 = sub_100054C60(v234, (uint64_t)" AOA first path SNR - vertical (dB)': ", 38);
  *(_QWORD *)((char *)v235 + *(_QWORD *)(*v235 - 24) + 16) = 6;
  v462 = *(_OWORD *)(a1 + 208);
  sub_10000BF04(&v463, "invalid");
  sub_10015FF4C((std::string *)&v462, (uint64_t)&v463, &__dst);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v236 = &__dst;
  else
    v236 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v237 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  else
    v237 = __dst.__r_.__value_.__l.__size_;
  v238 = sub_100054C60(v235, (uint64_t)v236, v237);
  v239 = sub_100054C60(v238, (uint64_t)",", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v239 + *(_QWORD *)(*v239 - 24)));
  v240 = std::locale::use_facet((const std::locale *)&v485, &std::ctype<char>::id);
  v241 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v240->__vftable[2].~facet_0)(v240, 10);
  std::locale::~locale((std::locale *)&v485);
  std::ostream::put(v239, v241);
  std::ostream::flush(v239);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  if (SHIBYTE(v463.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v463.__r_.__value_.__l.__data_);
  if ((char)v486 < 0)
    operator delete((void *)v485.__r_.__value_.__l.__size_);
  v485.__r_.__value_.__s.__data_[8] = 9;
  v242 = sub_100054C60(&v481, (uint64_t)&v485.__r_.__value_.__l.__size_, 1);
  v243 = sub_100054C60(v242, (uint64_t)"'", 1);
  sub_10015FF00(&v485.__r_.__value_.__l.__size_);
  if ((v486 & 0x80u) == 0)
    v244 = (uint64_t)&v485.__r_.__value_.__l.__size_;
  else
    v244 = v485.__r_.__value_.__l.__size_;
  if ((v486 & 0x80u) == 0)
    v245 = v486;
  else
    v245 = v485.__r_.__value_.__r.__words[2];
  v246 = sub_100054C60(v243, v244, v245);
  v247 = sub_100054C60(v246, (uint64_t)" AOA first path SNR - horizontal (dB)': ", 40);
  *(_QWORD *)((char *)v247 + *(_QWORD *)(*v247 - 24) + 16) = 6;
  v462 = *(_OWORD *)(a1 + 224);
  sub_10000BF04(&v463, "invalid");
  sub_10015FF4C((std::string *)&v462, (uint64_t)&v463, &__dst);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v248 = &__dst;
  else
    v248 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v249 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  else
    v249 = __dst.__r_.__value_.__l.__size_;
  v250 = sub_100054C60(v247, (uint64_t)v248, v249);
  v251 = sub_100054C60(v250, (uint64_t)",", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v251 + *(_QWORD *)(*v251 - 24)));
  v252 = std::locale::use_facet((const std::locale *)&v485, &std::ctype<char>::id);
  v253 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v252->__vftable[2].~facet_0)(v252, 10);
  std::locale::~locale((std::locale *)&v485);
  std::ostream::put(v251, v253);
  std::ostream::flush(v251);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  if (SHIBYTE(v463.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v463.__r_.__value_.__l.__data_);
  if ((char)v486 < 0)
    operator delete((void *)v485.__r_.__value_.__l.__size_);
  v485.__r_.__value_.__s.__data_[8] = 9;
  v254 = sub_100054C60(&v481, (uint64_t)&v485.__r_.__value_.__l.__size_, 1);
  v255 = sub_100054C60(v254, (uint64_t)"'", 1);
  sub_10015FF00(&v485.__r_.__value_.__l.__size_);
  if ((v486 & 0x80u) == 0)
    v256 = (uint64_t)&v485.__r_.__value_.__l.__size_;
  else
    v256 = v485.__r_.__value_.__l.__size_;
  if ((v486 & 0x80u) == 0)
    v257 = v486;
  else
    v257 = v485.__r_.__value_.__r.__words[2];
  v258 = sub_100054C60(v255, v256, v257);
  v259 = sub_100054C60(v258, (uint64_t)" carrier freq offset (ppb)': ", 29);
  *(_QWORD *)((char *)v259 + *(_QWORD *)(*v259 - 24) + 16) = 6;
  sub_1000303A8(*(double *)(a1 + 240));
  v260 = (_QWORD *)std::ostream::operator<<(v259);
  v261 = sub_100054C60(v260, (uint64_t)",", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v261 + *(_QWORD *)(*v261 - 24)));
  v262 = std::locale::use_facet((const std::locale *)&__dst, &std::ctype<char>::id);
  v263 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v262->__vftable[2].~facet_0)(v262, 10);
  std::locale::~locale((std::locale *)&__dst);
  std::ostream::put(v261, v263);
  std::ostream::flush(v261);
  if ((char)v486 < 0)
    operator delete((void *)v485.__r_.__value_.__l.__size_);
  v485.__r_.__value_.__s.__data_[8] = 9;
  v264 = sub_100054C60(&v481, (uint64_t)&v485.__r_.__value_.__l.__size_, 1);
  v265 = sub_100054C60(v264, (uint64_t)"'", 1);
  sub_10015FF00(&v485.__r_.__value_.__l.__size_);
  if ((v486 & 0x80u) == 0)
    v266 = (uint64_t)&v485.__r_.__value_.__l.__size_;
  else
    v266 = v485.__r_.__value_.__l.__size_;
  if ((v486 & 0x80u) == 0)
    v267 = v486;
  else
    v267 = v485.__r_.__value_.__r.__words[2];
  v268 = sub_100054C60(v265, v266, v267);
  v269 = sub_100054C60(v268, (uint64_t)" AOA first path index - center (dB)': ", 38);
  *(_QWORD *)((char *)v269 + *(_QWORD *)(*v269 - 24) + 16) = 6;
  v462 = *(_OWORD *)(a1 + 320);
  sub_10000BF04(&v463, "invalid");
  sub_10015FF4C((std::string *)&v462, (uint64_t)&v463, &__dst);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v270 = &__dst;
  else
    v270 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v271 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  else
    v271 = __dst.__r_.__value_.__l.__size_;
  v272 = sub_100054C60(v269, (uint64_t)v270, v271);
  v273 = sub_100054C60(v272, (uint64_t)",", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v273 + *(_QWORD *)(*v273 - 24)));
  v274 = std::locale::use_facet((const std::locale *)&v485, &std::ctype<char>::id);
  v275 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v274->__vftable[2].~facet_0)(v274, 10);
  std::locale::~locale((std::locale *)&v485);
  std::ostream::put(v273, v275);
  std::ostream::flush(v273);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  if (SHIBYTE(v463.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v463.__r_.__value_.__l.__data_);
  if ((char)v486 < 0)
    operator delete((void *)v485.__r_.__value_.__l.__size_);
  v485.__r_.__value_.__s.__data_[8] = 9;
  v276 = sub_100054C60(&v481, (uint64_t)&v485.__r_.__value_.__l.__size_, 1);
  v277 = sub_100054C60(v276, (uint64_t)"'", 1);
  sub_10015FF00(&v485.__r_.__value_.__l.__size_);
  if ((v486 & 0x80u) == 0)
    v278 = (uint64_t)&v485.__r_.__value_.__l.__size_;
  else
    v278 = v485.__r_.__value_.__l.__size_;
  if ((v486 & 0x80u) == 0)
    v279 = v486;
  else
    v279 = v485.__r_.__value_.__r.__words[2];
  v280 = sub_100054C60(v277, v278, v279);
  v281 = sub_100054C60(v280, (uint64_t)" AOA first path index - vertical (dB)': ", 40);
  *(_QWORD *)((char *)v281 + *(_QWORD *)(*v281 - 24) + 16) = 6;
  v462 = *(_OWORD *)(a1 + 336);
  sub_10000BF04(&v463, "invalid");
  sub_10015FF4C((std::string *)&v462, (uint64_t)&v463, &__dst);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v282 = &__dst;
  else
    v282 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v283 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  else
    v283 = __dst.__r_.__value_.__l.__size_;
  v284 = sub_100054C60(v281, (uint64_t)v282, v283);
  v285 = sub_100054C60(v284, (uint64_t)",", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v285 + *(_QWORD *)(*v285 - 24)));
  v286 = std::locale::use_facet((const std::locale *)&v485, &std::ctype<char>::id);
  v287 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v286->__vftable[2].~facet_0)(v286, 10);
  std::locale::~locale((std::locale *)&v485);
  std::ostream::put(v285, v287);
  std::ostream::flush(v285);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  if (SHIBYTE(v463.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v463.__r_.__value_.__l.__data_);
  if ((char)v486 < 0)
    operator delete((void *)v485.__r_.__value_.__l.__size_);
  v485.__r_.__value_.__s.__data_[8] = 9;
  v288 = sub_100054C60(&v481, (uint64_t)&v485.__r_.__value_.__l.__size_, 1);
  v289 = sub_100054C60(v288, (uint64_t)"'", 1);
  sub_10015FF00(&v485.__r_.__value_.__l.__size_);
  if ((v486 & 0x80u) == 0)
    v290 = (uint64_t)&v485.__r_.__value_.__l.__size_;
  else
    v290 = v485.__r_.__value_.__l.__size_;
  if ((v486 & 0x80u) == 0)
    v291 = v486;
  else
    v291 = v485.__r_.__value_.__r.__words[2];
  v292 = sub_100054C60(v289, v290, v291);
  v293 = sub_100054C60(v292, (uint64_t)" AOA first path index - horizontal (dB)': ", 42);
  *(_QWORD *)((char *)v293 + *(_QWORD *)(*v293 - 24) + 16) = 6;
  v462 = *(_OWORD *)(a1 + 352);
  sub_10000BF04(&v463, "invalid");
  sub_10015FF4C((std::string *)&v462, (uint64_t)&v463, &__dst);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v294 = &__dst;
  else
    v294 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v295 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  else
    v295 = __dst.__r_.__value_.__l.__size_;
  v296 = sub_100054C60(v293, (uint64_t)v294, v295);
  v297 = sub_100054C60(v296, (uint64_t)",", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v297 + *(_QWORD *)(*v297 - 24)));
  v298 = std::locale::use_facet((const std::locale *)&v485, &std::ctype<char>::id);
  v299 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v298->__vftable[2].~facet_0)(v298, 10);
  std::locale::~locale((std::locale *)&v485);
  std::ostream::put(v297, v299);
  std::ostream::flush(v297);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  if (SHIBYTE(v463.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v463.__r_.__value_.__l.__data_);
  if ((char)v486 < 0)
    operator delete((void *)v485.__r_.__value_.__l.__size_);
  if (*(unsigned __int16 *)(a1 + 382) >= 0x100u)
  {
    v485.__r_.__value_.__s.__data_[8] = 9;
    v300 = sub_100054C60(&v481, (uint64_t)&v485.__r_.__value_.__l.__size_, 1);
    v301 = sub_100054C60(v300, (uint64_t)"'remote_tx_antenna_mask': 0x", 28);
    *(_QWORD *)((char *)v301 + *(_QWORD *)(*v301 - 24) + 24) = 2;
    if (*(unsigned __int16 *)(a1 + 382) <= 0xFFu)
      sub_10000BA44();
    v302 = (_QWORD *)std::ostream::operator<<(v301, *(_WORD *)(a1 + 382));
    v303 = sub_100054C60(v302, (uint64_t)",", 1);
    std::ios_base::getloc((const std::ios_base *)((char *)v303 + *(_QWORD *)(*v303 - 24)));
    v304 = std::locale::use_facet((const std::locale *)&v485.__r_.__value_.__r.__words[1], &std::ctype<char>::id);
    v305 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v304->__vftable[2].~facet_0)(v304, 10);
    std::locale::~locale((std::locale *)&v485.__r_.__value_.__r.__words[1]);
    std::ostream::put(v303, v305);
    std::ostream::flush(v303);
  }
  v306 = sub_100054C60(&v481, (uint64_t)"}", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v306 + *(_QWORD *)(*v306 - 24)));
  v307 = std::locale::use_facet((const std::locale *)&v485.__r_.__value_.__r.__words[1], &std::ctype<char>::id);
  v308 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v307->__vftable[2].~facet_0)(v307, 10);
  std::locale::~locale((std::locale *)&v485.__r_.__value_.__r.__words[1]);
  std::ostream::put(v306, v308);
  std::ostream::flush(v306);
  v309 = sub_100054C60(&v476, (uint64_t)"Range Result (Part 2 of 2):", 27);
  std::ios_base::getloc((const std::ios_base *)((char *)v309 + *(_QWORD *)(*v309 - 24)));
  v310 = std::locale::use_facet((const std::locale *)&v485.__r_.__value_.__r.__words[1], &std::ctype<char>::id);
  v311 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v310->__vftable[2].~facet_0)(v310, 10);
  std::locale::~locale((std::locale *)&v485.__r_.__value_.__r.__words[1]);
  std::ostream::put(v309, v311);
  std::ostream::flush(v309);
  v312 = sub_100054C60(&v476, (uint64_t)"{", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v312 + *(_QWORD *)(*v312 - 24)));
  v313 = std::locale::use_facet((const std::locale *)&v485.__r_.__value_.__r.__words[1], &std::ctype<char>::id);
  v314 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v313->__vftable[2].~facet_0)(v313, 10);
  std::locale::~locale((std::locale *)&v485.__r_.__value_.__r.__words[1]);
  std::ostream::put(v312, v314);
  std::ostream::flush(v312);
  if ((v469 & 0x80u) == 0)
    v315 = &v467;
  else
    v315 = v467.__locale_;
  if ((v469 & 0x80u) == 0)
    v316 = v469;
  else
    v316 = v468;
  sub_100054C60(&v476, (uint64_t)v315, v316);
  v485.__r_.__value_.__s.__data_[8] = 9;
  v317 = sub_100054C60(&v476, (uint64_t)&v485.__r_.__value_.__l.__size_, 1);
  v318 = sub_100054C60(v317, (uint64_t)"'", 1);
  sub_10015FF00(&v485.__r_.__value_.__l.__size_);
  if ((v486 & 0x80u) == 0)
    v319 = (uint64_t)&v485.__r_.__value_.__l.__size_;
  else
    v319 = v485.__r_.__value_.__l.__size_;
  if ((v486 & 0x80u) == 0)
    v320 = v486;
  else
    v320 = v485.__r_.__value_.__r.__words[2];
  v321 = sub_100054C60(v318, v319, v320);
  v322 = sub_100054C60(v321, (uint64_t)" SOI RSSI 2 (dBm)': ", 20);
  *(_QWORD *)((char *)v322 + *(_QWORD *)(*v322 - 24) + 16) = 6;
  v462 = *(_OWORD *)(a1 + 176);
  sub_10000BF04(&v463, "invalid");
  sub_10015FF4C((std::string *)&v462, (uint64_t)&v463, &__dst);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v323 = &__dst;
  else
    v323 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v324 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  else
    v324 = __dst.__r_.__value_.__l.__size_;
  v325 = sub_100054C60(v322, (uint64_t)v323, v324);
  v326 = sub_100054C60(v325, (uint64_t)",", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v326 + *(_QWORD *)(*v326 - 24)));
  v327 = std::locale::use_facet((const std::locale *)&v485, &std::ctype<char>::id);
  v328 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v327->__vftable[2].~facet_0)(v327, 10);
  std::locale::~locale((std::locale *)&v485);
  std::ostream::put(v326, v328);
  std::ostream::flush(v326);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  if (SHIBYTE(v463.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v463.__r_.__value_.__l.__data_);
  if ((char)v486 < 0)
    operator delete((void *)v485.__r_.__value_.__l.__size_);
  v485.__r_.__value_.__s.__data_[8] = 9;
  v329 = sub_100054C60(&v476, (uint64_t)&v485.__r_.__value_.__l.__size_, 1);
  v330 = sub_100054C60(v329, (uint64_t)"'", 1);
  sub_10015FF00(&v485.__r_.__value_.__l.__size_);
  if ((v486 & 0x80u) == 0)
    v331 = (uint64_t)&v485.__r_.__value_.__l.__size_;
  else
    v331 = v485.__r_.__value_.__l.__size_;
  if ((v486 & 0x80u) == 0)
    v332 = v486;
  else
    v332 = v485.__r_.__value_.__r.__words[2];
  v333 = sub_100054C60(v330, v331, v332);
  v334 = sub_100054C60(v333, (uint64_t)" OC SOI RSSI 2 (dBm)': ", 23);
  *(_QWORD *)((char *)v334 + *(_QWORD *)(*v334 - 24) + 16) = 6;
  v462 = *(_OWORD *)(a1 + 488);
  sub_10000BF04(&v463, "invalid");
  sub_10015FF4C((std::string *)&v462, (uint64_t)&v463, &__dst);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v335 = &__dst;
  else
    v335 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v336 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  else
    v336 = __dst.__r_.__value_.__l.__size_;
  v337 = sub_100054C60(v334, (uint64_t)v335, v336);
  v338 = sub_100054C60(v337, (uint64_t)",", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v338 + *(_QWORD *)(*v338 - 24)));
  v339 = std::locale::use_facet((const std::locale *)&v485, &std::ctype<char>::id);
  v340 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v339->__vftable[2].~facet_0)(v339, 10);
  std::locale::~locale((std::locale *)&v485);
  std::ostream::put(v338, v340);
  std::ostream::flush(v338);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  if (SHIBYTE(v463.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v463.__r_.__value_.__l.__data_);
  if ((char)v486 < 0)
    operator delete((void *)v485.__r_.__value_.__l.__size_);
  v485.__r_.__value_.__s.__data_[8] = 9;
  v341 = sub_100054C60(&v476, (uint64_t)&v485.__r_.__value_.__l.__size_, 1);
  v342 = sub_100054C60(v341, (uint64_t)"'", 1);
  sub_10015FF00(&v485.__r_.__value_.__l.__size_);
  if ((v486 & 0x80u) == 0)
    v343 = (uint64_t)&v485.__r_.__value_.__l.__size_;
  else
    v343 = v485.__r_.__value_.__l.__size_;
  if ((v486 & 0x80u) == 0)
    v344 = v486;
  else
    v344 = v485.__r_.__value_.__r.__words[2];
  v345 = sub_100054C60(v342, v343, v344);
  v346 = sub_100054C60(v345, (uint64_t)" mms val status':  ", 19);
  LOWORD(v485.__r_.__value_.__l.__data_) = *(_WORD *)(a1 + 466);
  sub_10000BF04(&v463, "N/A");
  sub_10015FF88(&v485, (uint64_t)&v463, &__dst);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v347 = &__dst;
  else
    v347 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v348 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  else
    v348 = __dst.__r_.__value_.__l.__size_;
  v349 = sub_100054C60(v346, (uint64_t)v347, v348);
  v350 = sub_100054C60(v349, (uint64_t)",", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v350 + *(_QWORD *)(*v350 - 24)));
  v351 = std::locale::use_facet((const std::locale *)&v462, &std::ctype<char>::id);
  v352 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v351->__vftable[2].~facet_0)(v351, 10);
  std::locale::~locale((std::locale *)&v462);
  std::ostream::put(v350, v352);
  std::ostream::flush(v350);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  if (SHIBYTE(v463.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v463.__r_.__value_.__l.__data_);
  if ((char)v486 < 0)
    operator delete((void *)v485.__r_.__value_.__l.__size_);
  v485.__r_.__value_.__s.__data_[8] = 9;
  v353 = sub_100054C60(&v476, (uint64_t)&v485.__r_.__value_.__l.__size_, 1);
  v354 = sub_100054C60(v353, (uint64_t)"'", 1);
  sub_10015FF00(&v485.__r_.__value_.__l.__size_);
  if ((v486 & 0x80u) == 0)
    v355 = (uint64_t)&v485.__r_.__value_.__l.__size_;
  else
    v355 = v485.__r_.__value_.__l.__size_;
  if ((v486 & 0x80u) == 0)
    v356 = v486;
  else
    v356 = v485.__r_.__value_.__r.__words[2];
  v357 = sub_100054C60(v354, v355, v356);
  v358 = sub_100054C60(v357, (uint64_t)" nb demod chain: ':  ", 21);
  LOWORD(v485.__r_.__value_.__l.__data_) = *(_WORD *)(a1 + 504);
  sub_10000BF04(&v463, "N/A");
  sub_10015FF88(&v485, (uint64_t)&v463, &__dst);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v359 = &__dst;
  else
    v359 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v360 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  else
    v360 = __dst.__r_.__value_.__l.__size_;
  v361 = sub_100054C60(v358, (uint64_t)v359, v360);
  v362 = sub_100054C60(v361, (uint64_t)",", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v362 + *(_QWORD *)(*v362 - 24)));
  v363 = std::locale::use_facet((const std::locale *)&v462, &std::ctype<char>::id);
  v364 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v363->__vftable[2].~facet_0)(v363, 10);
  std::locale::~locale((std::locale *)&v462);
  std::ostream::put(v362, v364);
  std::ostream::flush(v362);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  if (SHIBYTE(v463.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v463.__r_.__value_.__l.__data_);
  if ((char)v486 < 0)
    operator delete((void *)v485.__r_.__value_.__l.__size_);
  v485.__r_.__value_.__s.__data_[8] = 9;
  v365 = sub_100054C60(&v476, (uint64_t)&v485.__r_.__value_.__l.__size_, 1);
  v366 = sub_100054C60(v365, (uint64_t)"'", 1);
  sub_10015FF00(&v485.__r_.__value_.__l.__size_);
  if ((v486 & 0x80u) == 0)
    v367 = (uint64_t)&v485.__r_.__value_.__l.__size_;
  else
    v367 = v485.__r_.__value_.__l.__size_;
  if ((v486 & 0x80u) == 0)
    v368 = v486;
  else
    v368 = v485.__r_.__value_.__r.__words[2];
  v369 = sub_100054C60(v366, v367, v368);
  v370 = sub_100054C60(v369, (uint64_t)" nb rx0 elna hg: ':  ", 21);
  LOWORD(v485.__r_.__value_.__l.__data_) = *(_WORD *)(a1 + 506);
  sub_10000BF04(&v463, "N/A");
  sub_10015FF88(&v485, (uint64_t)&v463, &__dst);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v371 = &__dst;
  else
    v371 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v372 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  else
    v372 = __dst.__r_.__value_.__l.__size_;
  v373 = sub_100054C60(v370, (uint64_t)v371, v372);
  v374 = sub_100054C60(v373, (uint64_t)",", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v374 + *(_QWORD *)(*v374 - 24)));
  v375 = std::locale::use_facet((const std::locale *)&v462, &std::ctype<char>::id);
  v376 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v375->__vftable[2].~facet_0)(v375, 10);
  std::locale::~locale((std::locale *)&v462);
  std::ostream::put(v374, v376);
  std::ostream::flush(v374);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  if (SHIBYTE(v463.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v463.__r_.__value_.__l.__data_);
  if ((char)v486 < 0)
    operator delete((void *)v485.__r_.__value_.__l.__size_);
  v485.__r_.__value_.__s.__data_[8] = 9;
  v377 = sub_100054C60(&v476, (uint64_t)&v485.__r_.__value_.__l.__size_, 1);
  v378 = sub_100054C60(v377, (uint64_t)"'", 1);
  sub_10015FF00(&v485.__r_.__value_.__l.__size_);
  if ((v486 & 0x80u) == 0)
    v379 = (uint64_t)&v485.__r_.__value_.__l.__size_;
  else
    v379 = v485.__r_.__value_.__l.__size_;
  if ((v486 & 0x80u) == 0)
    v380 = v486;
  else
    v380 = v485.__r_.__value_.__r.__words[2];
  v381 = sub_100054C60(v378, v379, v380);
  v382 = sub_100054C60(v381, (uint64_t)" nb rx1 elna hg: ':  ", 21);
  LOWORD(v485.__r_.__value_.__l.__data_) = *(_WORD *)(a1 + 508);
  sub_10000BF04(&v463, "N/A");
  sub_10015FF88(&v485, (uint64_t)&v463, &__dst);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v383 = &__dst;
  else
    v383 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v384 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  else
    v384 = __dst.__r_.__value_.__l.__size_;
  v385 = sub_100054C60(v382, (uint64_t)v383, v384);
  v386 = sub_100054C60(v385, (uint64_t)",", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v386 + *(_QWORD *)(*v386 - 24)));
  v387 = std::locale::use_facet((const std::locale *)&v462, &std::ctype<char>::id);
  v388 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v387->__vftable[2].~facet_0)(v387, 10);
  std::locale::~locale((std::locale *)&v462);
  std::ostream::put(v386, v388);
  std::ostream::flush(v386);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  if (SHIBYTE(v463.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v463.__r_.__value_.__l.__data_);
  if ((char)v486 < 0)
    operator delete((void *)v485.__r_.__value_.__l.__size_);
  v485.__r_.__value_.__s.__data_[8] = 9;
  v389 = sub_100054C60(&v476, (uint64_t)&v485.__r_.__value_.__l.__size_, 1);
  v390 = sub_100054C60(v389, (uint64_t)"'", 1);
  sub_10015FF00(&v485.__r_.__value_.__l.__size_);
  if ((v486 & 0x80u) == 0)
    v391 = (uint64_t)&v485.__r_.__value_.__l.__size_;
  else
    v391 = v485.__r_.__value_.__l.__size_;
  if ((v486 & 0x80u) == 0)
    v392 = v486;
  else
    v392 = v485.__r_.__value_.__r.__words[2];
  v393 = sub_100054C60(v390, v391, v392);
  v394 = sub_100054C60(v393, (uint64_t)" nb tx antenna: ':  ", 20);
  LOWORD(v485.__r_.__value_.__l.__data_) = *(_WORD *)(a1 + 510);
  sub_10000BF04(&v463, "N/A");
  sub_10015FF88(&v485, (uint64_t)&v463, &__dst);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v395 = &__dst;
  else
    v395 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v396 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  else
    v396 = __dst.__r_.__value_.__l.__size_;
  v397 = sub_100054C60(v394, (uint64_t)v395, v396);
  v398 = sub_100054C60(v397, (uint64_t)",", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v398 + *(_QWORD *)(*v398 - 24)));
  v399 = std::locale::use_facet((const std::locale *)&v462, &std::ctype<char>::id);
  v400 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v399->__vftable[2].~facet_0)(v399, 10);
  std::locale::~locale((std::locale *)&v462);
  std::ostream::put(v398, v400);
  std::ostream::flush(v398);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  if (SHIBYTE(v463.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v463.__r_.__value_.__l.__data_);
  if ((char)v486 < 0)
    operator delete((void *)v485.__r_.__value_.__l.__size_);
  v485.__r_.__value_.__s.__data_[8] = 9;
  v401 = sub_100054C60(&v476, (uint64_t)&v485.__r_.__value_.__l.__size_, 1);
  v402 = sub_100054C60(v401, (uint64_t)"'", 1);
  sub_10015FF00(&v485.__r_.__value_.__l.__size_);
  if ((v486 & 0x80u) == 0)
    v403 = (uint64_t)&v485.__r_.__value_.__l.__size_;
  else
    v403 = v485.__r_.__value_.__l.__size_;
  if ((v486 & 0x80u) == 0)
    v404 = v486;
  else
    v404 = v485.__r_.__value_.__r.__words[2];
  v405 = sub_100054C60(v402, v403, v404);
  v406 = sub_100054C60(v405, (uint64_t)" cycle skipping':  ", 19);
  LOWORD(v485.__r_.__value_.__l.__data_) = *(_WORD *)(a1 + 512);
  sub_10000BF04(&v463, "N/A");
  sub_10015FF88(&v485, (uint64_t)&v463, &__dst);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v407 = &__dst;
  else
    v407 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v408 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  else
    v408 = __dst.__r_.__value_.__l.__size_;
  v409 = sub_100054C60(v406, (uint64_t)v407, v408);
  v410 = sub_100054C60(v409, (uint64_t)",", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v410 + *(_QWORD *)(*v410 - 24)));
  v411 = std::locale::use_facet((const std::locale *)&v462, &std::ctype<char>::id);
  v412 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v411->__vftable[2].~facet_0)(v411, 10);
  std::locale::~locale((std::locale *)&v462);
  std::ostream::put(v410, v412);
  std::ostream::flush(v410);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  if (SHIBYTE(v463.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v463.__r_.__value_.__l.__data_);
  if ((char)v486 < 0)
    operator delete((void *)v485.__r_.__value_.__l.__size_);
  v485.__r_.__value_.__s.__data_[8] = 9;
  v413 = sub_100054C60(&v476, (uint64_t)&v485.__r_.__value_.__l.__size_, 1);
  v414 = sub_100054C60(v413, (uint64_t)"'toa peak snr (dB)':", 20);
  LOWORD(v462) = *(_WORD *)(a1 + 452);
  sub_10000BF04(&__dst, "N/A");
  sub_10015FF88((std::string *)&v462, (uint64_t)&__dst, (std::string *)&v485.__r_.__value_.__r.__words[1]);
  if ((v486 & 0x80u) == 0)
    v415 = (uint64_t)&v485.__r_.__value_.__l.__size_;
  else
    v415 = v485.__r_.__value_.__l.__size_;
  if ((v486 & 0x80u) == 0)
    v416 = v486;
  else
    v416 = v485.__r_.__value_.__r.__words[2];
  v417 = sub_100054C60(v414, v415, v416);
  v418 = sub_100054C60(v417, (uint64_t)",", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v418 + *(_QWORD *)(*v418 - 24)));
  v419 = std::locale::use_facet((const std::locale *)&v463, &std::ctype<char>::id);
  v420 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v419->__vftable[2].~facet_0)(v419, 10);
  std::locale::~locale((std::locale *)&v463);
  std::ostream::put(v418, v420);
  std::ostream::flush(v418);
  if ((char)v486 < 0)
    operator delete((void *)v485.__r_.__value_.__l.__size_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  v485.__r_.__value_.__s.__data_[8] = 9;
  v421 = sub_100054C60(&v476, (uint64_t)&v485.__r_.__value_.__l.__size_, 1);
  v422 = sub_100054C60(v421, (uint64_t)"'toa peak index high res':", 26);
  LODWORD(v462) = *(_DWORD *)(a1 + 454);
  sub_10000BF04(&__dst, "N/A");
  sub_10015FFC4((std::string *)&v462, (uint64_t)&__dst, (std::string *)&v485.__r_.__value_.__r.__words[1]);
  if ((v486 & 0x80u) == 0)
    v423 = (uint64_t)&v485.__r_.__value_.__l.__size_;
  else
    v423 = v485.__r_.__value_.__l.__size_;
  if ((v486 & 0x80u) == 0)
    v424 = v486;
  else
    v424 = v485.__r_.__value_.__r.__words[2];
  v425 = sub_100054C60(v422, v423, v424);
  v426 = sub_100054C60(v425, (uint64_t)",", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v426 + *(_QWORD *)(*v426 - 24)));
  v427 = std::locale::use_facet((const std::locale *)&v463, &std::ctype<char>::id);
  v428 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v427->__vftable[2].~facet_0)(v427, 10);
  std::locale::~locale((std::locale *)&v463);
  std::ostream::put(v426, v428);
  std::ostream::flush(v426);
  if ((char)v486 < 0)
    operator delete((void *)v485.__r_.__value_.__l.__size_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  v485.__r_.__value_.__s.__data_[8] = 9;
  v429 = sub_100054C60(&v476, (uint64_t)&v485.__r_.__value_.__l.__size_, 1);
  v430 = sub_100054C60(v429, (uint64_t)"'toa peak signal level high res (dB)':", 38);
  LODWORD(v462) = *(_DWORD *)(a1 + 458);
  sub_10000BF04(&__dst, "N/A");
  sub_10015FFC4((std::string *)&v462, (uint64_t)&__dst, (std::string *)&v485.__r_.__value_.__r.__words[1]);
  if ((v486 & 0x80u) == 0)
    v431 = (uint64_t)&v485.__r_.__value_.__l.__size_;
  else
    v431 = v485.__r_.__value_.__l.__size_;
  if ((v486 & 0x80u) == 0)
    v432 = v486;
  else
    v432 = v485.__r_.__value_.__r.__words[2];
  v433 = sub_100054C60(v430, v431, v432);
  v434 = sub_100054C60(v433, (uint64_t)",", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v434 + *(_QWORD *)(*v434 - 24)));
  v435 = std::locale::use_facet((const std::locale *)&v463, &std::ctype<char>::id);
  v436 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v435->__vftable[2].~facet_0)(v435, 10);
  std::locale::~locale((std::locale *)&v463);
  std::ostream::put(v434, v436);
  std::ostream::flush(v434);
  if ((char)v486 < 0)
    operator delete((void *)v485.__r_.__value_.__l.__size_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  v485.__r_.__value_.__s.__data_[8] = 9;
  v437 = sub_100054C60(&v476, (uint64_t)&v485.__r_.__value_.__l.__size_, 1);
  v438 = sub_100054C60(v437, (uint64_t)"'nb rx status':", 15);
  LOWORD(v462) = *(_WORD *)(a1 + 448);
  sub_10000BF04(&__dst, "N/A");
  sub_10015FF88((std::string *)&v462, (uint64_t)&__dst, (std::string *)&v485.__r_.__value_.__r.__words[1]);
  if ((v486 & 0x80u) == 0)
    v439 = (uint64_t)&v485.__r_.__value_.__l.__size_;
  else
    v439 = v485.__r_.__value_.__l.__size_;
  if ((v486 & 0x80u) == 0)
    v440 = v486;
  else
    v440 = v485.__r_.__value_.__r.__words[2];
  v441 = sub_100054C60(v438, v439, v440);
  v442 = sub_100054C60(v441, (uint64_t)",", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v442 + *(_QWORD *)(*v442 - 24)));
  v443 = std::locale::use_facet((const std::locale *)&v463, &std::ctype<char>::id);
  v444 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v443->__vftable[2].~facet_0)(v443, 10);
  std::locale::~locale((std::locale *)&v463);
  std::ostream::put(v442, v444);
  std::ostream::flush(v442);
  if ((char)v486 < 0)
    operator delete((void *)v485.__r_.__value_.__l.__size_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  v485.__r_.__value_.__s.__data_[8] = 9;
  v445 = sub_100054C60(&v476, (uint64_t)&v485.__r_.__value_.__l.__size_, 1);
  v446 = sub_100054C60(v445, (uint64_t)"'mms rx status':", 16);
  LOWORD(v462) = *(_WORD *)(a1 + 450);
  sub_10000BF04(&__dst, "N/A");
  sub_10015FF88((std::string *)&v462, (uint64_t)&__dst, (std::string *)&v485.__r_.__value_.__r.__words[1]);
  if ((v486 & 0x80u) == 0)
    v447 = (uint64_t)&v485.__r_.__value_.__l.__size_;
  else
    v447 = v485.__r_.__value_.__l.__size_;
  if ((v486 & 0x80u) == 0)
    v448 = v486;
  else
    v448 = v485.__r_.__value_.__r.__words[2];
  v449 = sub_100054C60(v446, v447, v448);
  v450 = sub_100054C60(v449, (uint64_t)",", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v450 + *(_QWORD *)(*v450 - 24)));
  v451 = std::locale::use_facet((const std::locale *)&v463, &std::ctype<char>::id);
  v452 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v451->__vftable[2].~facet_0)(v451, 10);
  std::locale::~locale((std::locale *)&v463);
  std::ostream::put(v450, v452);
  std::ostream::flush(v450);
  if ((char)v486 < 0)
    operator delete((void *)v485.__r_.__value_.__l.__size_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  v453 = sub_100054C60(&v476, (uint64_t)"}", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v453 + *(_QWORD *)(*v453 - 24)));
  v454 = std::locale::use_facet((const std::locale *)&v485.__r_.__value_.__r.__words[1], &std::ctype<char>::id);
  v455 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v454->__vftable[2].~facet_0)(v454, 10);
  std::locale::~locale((std::locale *)&v485.__r_.__value_.__r.__words[1]);
  std::ostream::put(v453, v455);
  std::ostream::flush(v453);
  std::stringbuf::str(v482);
  std::stringbuf::str(v477);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
  __dst.__r_.__value_.__s.__data_[8] = 0;
  v456 = (char *)operator new(0x30uLL);
  *a2 = v456;
  a2[1] = v456;
  a2[2] = v456 + 48;
  v457 = 0;
  a2[1] = sub_100161ACC((uint64_t)(a2 + 2), (__int128 *)&v485.__r_.__value_.__r.__words[1], &v488, v456);
  do
  {
    if ((char)v487[v457 + 23] < 0)
      operator delete(*(void **)&v487[v457]);
    v457 -= 24;
  }
  while (v457 != -48);
  if ((char)v469 < 0)
    operator delete(v467.__locale_);
  *(_QWORD *)((char *)v470
  v471 = v459;
  if (v473 < 0)
    operator delete((void *)v472[8]);
  std::streambuf::~streambuf(v472);
  std::ios::~ios(&v474);
  v475[0] = v458;
  *(_QWORD *)((char *)v475 + *(_QWORD *)(v458 - 24)) = v460;
  v476 = v459;
  if (v478 < 0)
    operator delete((void *)v477[8]);
  std::streambuf::~streambuf(v477);
  std::ios::~ios(&v479);
  v480[0] = v458;
  *(_QWORD *)((char *)v480 + *(_QWORD *)(v458 - 24)) = v460;
  v481 = v459;
  if (v483 < 0)
    operator delete((void *)v482[8]);
  std::streambuf::~streambuf(v482);
  return std::ios::~ios(&v484);
}

void sub_10015FA0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, std::locale a11, uint64_t a12, uint64_t a13, uint64_t a14, std::locale a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  uint64_t v63;

  if (*(char *)(v63 - 121) < 0)
    operator delete(*(void **)(v63 - 144));
  if (a27 < 0)
    operator delete(__p);
  sub_100053910((uint64_t)&a28);
  sub_100053910((uint64_t)&a63);
  sub_100053910((uint64_t)&STACK[0x2B0]);
  _Unwind_Resume(a1);
}

_QWORD *sub_10015FF00@<X0>(_QWORD *a1@<X8>)
{
  int v2;
  char *v3;

  v2 = *((_DWORD *)sub_100004784() + 186);
  if (v2)
  {
    if (v2 != 1)
      sub_1003CF6A0();
    v3 = "r2";
  }
  else
  {
    v3 = "r1";
  }
  return sub_10000BF04(a1, v3);
}

std::string *sub_10015FF4C@<X0>(std::string *result@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  if (result->__r_.__value_.__s.__data_[8])
    return std::to_string(a3, *(double *)&result->__r_.__value_.__l.__data_);
  if (*(char *)(a2 + 23) < 0)
    return (std::string *)sub_100004678(a3, *(void **)a2, *(_QWORD *)(a2 + 8));
  *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
  a3->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
  return result;
}

std::string *sub_10015FF88@<X0>(std::string *result@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  if (result->__r_.__value_.__s.__data_[1])
    return std::to_string(a3, result->__r_.__value_.__s.__data_[0]);
  if (*(char *)(a2 + 23) < 0)
    return (std::string *)sub_100004678(a3, *(void **)a2, *(_QWORD *)(a2 + 8));
  *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
  a3->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
  return result;
}

std::string *sub_10015FFC4@<X0>(std::string *result@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  if (result->__r_.__value_.__s.__data_[2])
    return std::to_string(a3, SLOWORD(result->__r_.__value_.__l.__data_));
  if (*(char *)(a2 + 23) < 0)
    return (std::string *)sub_100004678(a3, *(void **)a2, *(_QWORD *)(a2 + 8));
  *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
  a3->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
  return result;
}

void sub_100160000(uint64_t a1)
{
  char *v1;
  char *v2;
  NSObject *v3;
  char *v4;
  char *v5;
  char *v6;
  _BYTE buf[24];

  sub_10015C590(a1, &v5);
  v1 = v5;
  v2 = v6;
  if (v5 != v6)
  {
    v3 = qword_10085F520;
    do
    {
      if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
      {
        v4 = v1;
        if (v1[23] < 0)
          v4 = *(char **)v1;
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = v4;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#sp,\n[Solution Provider] %s", buf, 0xCu);
        v3 = qword_10085F520;
      }
      v1 += 24;
    }
    while (v1 != v2);
  }
  *(_QWORD *)buf = &v5;
  sub_100161C00((void ***)buf);
}

void sub_100160104(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  NSObject *v10;
  _BOOL4 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  int v21;
  NSObject *v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  _BYTE *v29;
  int v30;
  _BYTE *v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  uint64_t v42;
  _BYTE buf[18];
  char v44;
  uint8_t v45[4];
  _BYTE *v46;
  __int16 v47;
  int v48;

  v2 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_debug_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "#sp,[Solution Provider] _printDebug responder_superframe_stats:", buf, 2u);
    v2 = qword_10085F520;
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    v25 = *(unsigned __int16 *)(a1 + 8);
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v25;
    _os_log_debug_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "#sp,[Solution Provider] ticket id: %d", buf, 8u);
    v2 = qword_10085F520;
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
    sub_1003CF7EC(a1, v2, v3, v4, v5, v6, v7, v8);
  v9 = *(unsigned __int8 *)(a1 + 104);
  v10 = qword_10085F520;
  v11 = os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG);
  if (v9)
  {
    if (v11)
      sub_1003CF780(a1 + 96, v10, v12, v13, v14, v15, v16, v17);
  }
  else if (v11)
  {
    sub_1003CF740(v10);
  }
  v18 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
  {
    v26 = *(_QWORD *)(a1 + 24);
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = v26;
    _os_log_debug_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "#sp,[Solution Provider]   r1 timestamp: %.9f sec", buf, 0xCu);
    v18 = qword_10085F520;
  }
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
  {
    v27 = *(unsigned __int16 *)(a1 + 18);
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v27;
    _os_log_debug_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "#sp,[Solution Provider]   r1 sess id: %d", buf, 8u);
    v18 = qword_10085F520;
  }
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
  {
    v28 = *(_QWORD *)(a1 + 32);
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = v28;
    _os_log_debug_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "#sp,[Solution Provider]   r1 mac_addr: 0x%llx", buf, 0xCu);
    v18 = qword_10085F520;
  }
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
  {
    sub_10036BB54(*(unsigned __int16 *)(a1 + 16), buf);
    if (v44 >= 0)
      v29 = buf;
    else
      v29 = *(_BYTE **)buf;
    v30 = *(unsigned __int16 *)(a1 + 16);
    *(_DWORD *)v45 = 136315394;
    v46 = v29;
    v47 = 1024;
    v48 = v30;
    _os_log_debug_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "#sp,[Solution Provider]   r1 sess status: %s (%d)", v45, 0x12u);
    if (v44 < 0)
      operator delete(*(void **)buf);
    v18 = qword_10085F520;
  }
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
  {
    sub_10036B8B0(*(unsigned __int8 *)(a1 + 20), buf);
    if (v44 >= 0)
      v31 = buf;
    else
      v31 = *(_BYTE **)buf;
    v32 = *(unsigned __int8 *)(a1 + 20);
    *(_DWORD *)v45 = 136315394;
    v46 = v31;
    v47 = 1024;
    v48 = v32;
    _os_log_debug_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "#sp,[Solution Provider]   r1 sess type: %s (%d)", v45, 0x12u);
    if (v44 < 0)
      operator delete(*(void **)buf);
    v18 = qword_10085F520;
  }
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
  {
    v33 = *(unsigned __int16 *)(a1 + 40);
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v33;
    _os_log_debug_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "#sp,[Solution Provider]   r1 cycle_idx: %d", buf, 8u);
    v18 = qword_10085F520;
  }
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
  {
    v34 = *(unsigned __int16 *)(a1 + 42);
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v34;
    _os_log_debug_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "#sp,[Solution Provider]   r1 interval_ms: %d", buf, 8u);
    v18 = qword_10085F520;
  }
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
  {
    v35 = *(unsigned __int16 *)(a1 + 44);
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v35;
    _os_log_debug_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "#sp,[Solution Provider]   r1 superframe_size_250us: %d", buf, 8u);
    v18 = qword_10085F520;
  }
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
  {
    v36 = *(unsigned __int8 *)(a1 + 46);
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v36;
    _os_log_debug_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "#sp,[Solution Provider]   r1 tx_mini_slot_size_250us: %d", buf, 8u);
    v18 = qword_10085F520;
  }
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
  {
    v37 = *(unsigned __int8 *)(a1 + 47);
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v37;
    _os_log_debug_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "#sp,[Solution Provider]   r1 rx_mini_slot_size_250us: %d", buf, 8u);
    v18 = qword_10085F520;
  }
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
  {
    v38 = *(unsigned __int8 *)(a1 + 48);
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v38;
    _os_log_debug_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "#sp,[Solution Provider]   r1 tx_preamble: %d", buf, 8u);
    v18 = qword_10085F520;
  }
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
  {
    v39 = *(unsigned __int8 *)(a1 + 49);
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v39;
    _os_log_debug_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "#sp,[Solution Provider]   r1 rx_preamble: %d", buf, 8u);
    v18 = qword_10085F520;
  }
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
  {
    v40 = *(unsigned __int8 *)(a1 + 50);
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v40;
    _os_log_debug_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "#sp,[Solution Provider]   r1 num_access_slots: %d", buf, 8u);
    v18 = qword_10085F520;
  }
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
  {
    v41 = *(unsigned __int8 *)(a1 + 51);
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v41;
    _os_log_debug_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "#sp,[Solution Provider]   r1 poll_rx_status: 0x%x", buf, 8u);
    v18 = qword_10085F520;
  }
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
  {
    v42 = *(_QWORD *)(a1 + 56);
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = v42;
    _os_log_debug_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "#sp,[Solution Provider]   r1 poll_rssi_dbm: %.3f", buf, 0xCu);
    v18 = qword_10085F520;
  }
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
    sub_1003CF6C8(a1, v18);
  v19 = *(unsigned __int8 **)(a1 + 72);
  v20 = *(unsigned __int8 **)(a1 + 80);
  if (v19 != v20)
  {
    v21 = 0;
    v22 = qword_10085F520;
    do
    {
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = v21;
        _os_log_debug_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "#sp,[Solution Provider]   rx packet #%d info:", buf, 8u);
        v22 = qword_10085F520;
        ++v21;
      }
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
      {
        v23 = *((_QWORD *)v19 + 1);
        *(_DWORD *)buf = 67109376;
        *(_DWORD *)&buf[4] = v21;
        *(_WORD *)&buf[8] = 2048;
        *(_QWORD *)&buf[10] = v23;
        _os_log_debug_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "#sp,[Solution Provider]       r1_rx_packet[%d]_rssi_dbm: %.3f", buf, 0x12u);
        v22 = qword_10085F520;
      }
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
      {
        v24 = *v19;
        *(_DWORD *)buf = 67109376;
        *(_DWORD *)&buf[4] = v21;
        *(_WORD *)&buf[8] = 1024;
        *(_DWORD *)&buf[10] = v24;
        _os_log_debug_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "#sp,[Solution Provider]       r1_rx_packet[%d]_rx_status: 0x%x", buf, 0xEu);
        v22 = qword_10085F520;
      }
      v19 += 16;
    }
    while (v19 != v20);
  }
}

_QWORD *sub_1001608F8@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  const char *v2;
  char *v3;

  v2 = "Unknown";
  if (a1 == 1)
    v2 = "Remote";
  if (a1)
    v3 = (char *)v2;
  else
    v3 = "Local";
  return sub_10000BF04(a2, v3);
}

void sub_100160928(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  int v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  double v20;
  double v21;
  double v22;
  double v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  double v30;
  double v31;
  unsigned __int8 *v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  double v36;
  unsigned __int8 *v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  double v41;
  unsigned __int8 *v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  unsigned __int8 *v46;
  unsigned int v47;
  NSObject *v48;
  int v49;
  int v50;
  int v51;
  int v52;
  double *v53;
  double v54;
  double v55;
  uint64_t v56;
  double *v57;
  double *v58;
  double *v59;
  double *v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  NSObject *v64;
  NSObject *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  int v73;
  double v74;
  double v75;
  double v76;
  double *v77;
  double *v78;
  unint64_t v79;
  unint64_t v80;
  char *v81;
  double *v82;
  char *v83;
  double *v84;
  double *v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  NSObject *v89;
  char v90;
  unint64_t v91;
  double v92;
  uint64_t v93;
  __int16 v94;
  __int16 v95;
  __int16 v96;
  double v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  int v102;
  __int16 v103;
  __int16 v104;
  int v105;
  char v106;
  __int16 v107;
  uint64_t v108;
  double v109;
  __int128 v110;
  unsigned int v111;
  double v112;
  double v113;
  double v114;
  char v115;
  __int16 v116;
  double *v118;
  double *v119;
  unint64_t v120;
  uint8_t buf[4];
  _BYTE v122[10];
  double v123;
  __int16 v124;
  double v125;
  uint64_t v126;

  v9 = a2;
  v116 = sub_10036BAF8(*(unsigned __int16 *)(a1 + 20), a2, a3, a4, a5, a6, a7, a8);
  v115 = sub_10036B814(*(unsigned __int8 *)(a1 + 24), v11, v12, v13, v14, v15, v16, v17);
  v126 = *(_QWORD *)(a1 + 75);
  v111 = *(_DWORD *)(a1 + 64);
  v114 = sub_100360CC4(v111);
  v18 = *(unsigned __int16 *)(a1 + 56);
  v19 = v18 & 0xF;
  if ((v19 & (v18 >> 4)) == 0xF)
  {
    v20 = 0.0;
    v108 = 0;
    v109 = 0.0;
    v21 = 0.0;
    v22 = 0.0;
    v110 = 0uLL;
    v112 = 0.0;
    v113 = 0.0;
  }
  else
  {
    v112 = (double)*(char *)(a1 + 69);
    v113 = (double)*(char *)(a1 + 68);
    v23 = (double)*(char *)(a1 + 70);
    *(double *)&v110 = v23;
    LOWORD(v23) = *(_WORD *)(a1 + 84);
    *(double *)&v24 = (double)*(unint64_t *)&v23;
    *(double *)&v25 = *(double *)&v24 * 0.01;
    LOWORD(v24) = *(_WORD *)(a1 + 86);
    *(double *)&v26 = (double)v24;
    v22 = *(double *)&v26 * 0.01;
    LOWORD(v26) = *(_WORD *)(a1 + 88);
    v21 = (double)v26 * 0.01;
    v108 = v25;
    v109 = (double)*(__int16 *)(a1 + 58);
    v20 = (double)*(__int16 *)(a1 + 60);
    *((_QWORD *)&v110 + 1) = 1;
  }
  v27 = 0;
  v28 = 0;
  v29 = v18 >> 4;
  v30 = (double)*(__int16 *)(a1 + 46);
  v31 = (double)*(__int16 *)(a1 + 48);
  v107 = *(_WORD *)(a1 + 62);
  v106 = *(_BYTE *)(a1 + 83);
  v105 = *(unsigned __int8 *)(a1 + 97);
  v118 = 0;
  v119 = 0;
  v120 = 0;
  v32 = (unsigned __int8 *)(a1 + 98);
  do
  {
    v33 = *v32++;
    v28 |= (unint64_t)v33 << v27;
    v27 += 8;
  }
  while (v27 != 40);
  v34 = 0;
  v35 = 0;
  v36 = v31 * 0.25;
  v37 = (unsigned __int8 *)(a1 + 103);
  do
  {
    v38 = *v37++;
    v35 |= (unint64_t)v38 << v34;
    v34 += 8;
  }
  while (v34 != 40);
  v39 = 0;
  v40 = 0;
  v41 = v30 * 0.25;
  v42 = (unsigned __int8 *)(a1 + 108);
  do
  {
    v43 = *v42++;
    v40 |= (unint64_t)v43 << v39;
    v39 += 8;
  }
  while (v39 != 40);
  v44 = 0;
  v45 = 0;
  v46 = (unsigned __int8 *)(a1 + 113);
  do
  {
    v47 = *v46++;
    v45 |= (unint64_t)v47 << v44;
    v44 += 8;
  }
  while (v44 != 40);
  if (v19 == 15)
  {
    v48 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
    {
      v49 = *(__int16 *)(a1 + 42);
      v50 = *(__int16 *)(a1 + 44);
      *(_DWORD *)buf = 67109632;
      *(_DWORD *)v122 = v49;
      *(_WORD *)&v122[4] = 1024;
      *(_DWORD *)&v122[6] = v50;
      LOWORD(v123) = 1024;
      *(_DWORD *)((char *)&v123 + 2) = 15;
      _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEFAULT, "#sp,Ignoring AOA hypothesis primary with az %d el %d intunc %d", buf, 0x14u);
    }
  }
  else
  {
    v51 = *(__int16 *)(a1 + 42);
    v52 = *(__int16 *)(a1 + 44);
    v53 = (double *)sub_100028A48((uint64_t)&v120, 1uLL);
    v54 = (double)v19 * 0.0666666667;
    v55 = (double)v51;
    v57 = &v53[7 * v56];
    *v53 = (double)v51;
    v53[1] = (double)v52;
    v53[2] = v54;
    *((_BYTE *)v53 + 24) = 0;
    *((_BYTE *)v53 + 32) = 0;
    *((_BYTE *)v53 + 40) = 0;
    *((_BYTE *)v53 + 48) = 0;
    v58 = v53 + 7;
    v60 = v118;
    v59 = v119;
    if (v119 != v118)
    {
      do
      {
        v61 = *(_OWORD *)(v59 - 7);
        v62 = *(_OWORD *)(v59 - 5);
        v63 = *(_OWORD *)(v59 - 3);
        *(v53 - 1) = *(v59 - 1);
        *(_OWORD *)(v53 - 3) = v63;
        *(_OWORD *)(v53 - 5) = v62;
        *(_OWORD *)(v53 - 7) = v61;
        v53 -= 7;
        v59 -= 7;
      }
      while (v59 != v60);
      v59 = v60;
    }
    v118 = v53;
    v119 = v58;
    v120 = (unint64_t)v57;
    if (v59)
      operator delete(v59);
    v119 = v58;
    v64 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134218496;
      *(double *)v122 = v55;
      *(_WORD *)&v122[8] = 2048;
      v123 = (double)v52;
      v124 = 2048;
      v125 = v54;
      _os_log_debug_impl((void *)&_mh_execute_header, v64, OS_LOG_TYPE_DEBUG, "#sp,AOA hypothesis primary: az %f el %f unc %f", buf, 0x20u);
    }
  }
  if (v29 == 15)
  {
    v65 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
    {
      v72 = *(__int16 *)(a1 + 71);
      v73 = *(__int16 *)(a1 + 73);
      *(_DWORD *)buf = 67109632;
      *(_DWORD *)v122 = v72;
      *(_WORD *)&v122[4] = 1024;
      *(_DWORD *)&v122[6] = v73;
      LOWORD(v123) = 1024;
      *(_DWORD *)((char *)&v123 + 2) = 15;
      _os_log_impl((void *)&_mh_execute_header, v65, OS_LOG_TYPE_DEFAULT, "#sp,Ignoring AOA hypothesis alt1 with az %d el %d intunc %d", buf, 0x14u);
    }
  }
  else
  {
    v74 = (double)v29 * 0.0666666667;
    v75 = (double)*(__int16 *)(a1 + 71);
    v76 = (double)*(__int16 *)(a1 + 73);
    v77 = v119;
    if ((unint64_t)v119 >= v120)
    {
      v79 = 0x6DB6DB6DB6DB6DB7 * (v119 - v118) + 1;
      if (v79 > 0x492492492492492)
        sub_100026E7C();
      if (0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(v120 - (_QWORD)v118) >> 3) > v79)
        v79 = 0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(v120 - (_QWORD)v118) >> 3);
      if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v120 - (_QWORD)v118) >> 3)) >= 0x249249249249249)
        v80 = 0x492492492492492;
      else
        v80 = v79;
      if (v80)
        v81 = (char *)sub_100028A48((uint64_t)&v120, v80);
      else
        v81 = 0;
      v82 = (double *)&v81[8 * (v119 - v118)];
      v83 = &v81[56 * v80];
      *v82 = v75;
      v82[1] = v76;
      v82[2] = v74;
      *((_BYTE *)v82 + 24) = 0;
      *((_BYTE *)v82 + 32) = 0;
      *((_BYTE *)v82 + 40) = 0;
      *((_BYTE *)v82 + 48) = 0;
      v78 = v82 + 7;
      v85 = v118;
      v84 = v119;
      if (v119 != v118)
      {
        do
        {
          v86 = *(_OWORD *)(v84 - 7);
          v87 = *(_OWORD *)(v84 - 5);
          v88 = *(_OWORD *)(v84 - 3);
          *(v82 - 1) = *(v84 - 1);
          *(_OWORD *)(v82 - 3) = v88;
          *(_OWORD *)(v82 - 5) = v87;
          *(_OWORD *)(v82 - 7) = v86;
          v82 -= 7;
          v84 -= 7;
        }
        while (v84 != v85);
        v84 = v85;
      }
      v118 = v82;
      v119 = v78;
      v120 = (unint64_t)v83;
      if (v84)
        operator delete(v84);
    }
    else
    {
      *v119 = v75;
      v77[1] = v76;
      v77[2] = v74;
      *((_BYTE *)v77 + 24) = 0;
      *((_BYTE *)v77 + 32) = 0;
      *((_BYTE *)v77 + 40) = 0;
      v78 = v77 + 7;
      *((_BYTE *)v77 + 48) = 0;
    }
    v119 = v78;
    v89 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134218496;
      *(double *)v122 = v75;
      *(_WORD *)&v122[8] = 2048;
      v123 = v76;
      v124 = 2048;
      v125 = (double)v29 * 0.0666666667;
      _os_log_debug_impl((void *)&_mh_execute_header, v89, OS_LOG_TYPE_DEBUG, "#sp,AOA hypothesis alt1: az %f el %f unc %f", buf, 0x20u);
    }
  }
  v90 = sub_10036C348(*(unsigned __int8 *)(a1 + 90), 1, v66, v67, v68, v69, v70, v71);
  v92 = 0.0;
  if (v9)
  {
    v93 = 65537;
    if (v9 == 1)
    {
      LOWORD(v91) = *(_WORD *)(a1 + 54);
      v92 = (double)v91;
    }
  }
  else
  {
    v93 = *(unsigned __int16 *)(a1 + 54) | 0x10000;
  }
  v94 = *(_WORD *)(a1 + 91);
  v95 = *(_WORD *)(a1 + 93);
  v96 = *(_WORD *)(a1 + 95);
  v104 = *(_WORD *)(a1 + 22);
  v97 = sub_100360CC4(*(_QWORD *)(a1 + 25));
  *((_QWORD *)&v101 + 1) = *((_QWORD *)&v110 + 1);
  *(double *)&v101 = v20;
  *((_QWORD *)&v100 + 1) = *((_QWORD *)&v110 + 1);
  *(double *)&v100 = v109;
  *((_QWORD *)&v99 + 1) = *((_QWORD *)&v110 + 1);
  *(double *)&v99 = v112;
  *((_QWORD *)&v98 + 1) = *((_QWORD *)&v110 + 1);
  *(double *)&v98 = v113;
  sub_100362740(a9, v116, v104, v115, *(_WORD *)(a1 + 33), *(_BYTE *)(a1 + 35), &v126, 0, v97, (double)*(int *)(a1 + 38), v41, v36, (double)*(int *)(a1 + 50), v92, v114, (uint64_t)&v118, v98, v99, v110,
    v100,
    v101,
    v107,
    v111,
    v106,
    v108,
    *((uint64_t *)&v110 + 1),
    *(uint64_t *)&v22,
    *((uint64_t *)&v110 + 1),
    *(uint64_t *)&v21,
    *((uint64_t *)&v110 + 1),
    v90,
    v102,
    0,
    0,
    0,
    0,
    v94,
    v95,
    v96,
    v103,
    v105 | ((v105 != 0) << 8),
    v28,
    v28 != 0,
    v35,
    v35 != 0,
    v40,
    v40 != 0,
    v45,
    v45 != 0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    v93,
    SHIDWORD(v93),
    0);
  if (v118)
  {
    v119 = v118;
    operator delete(v118);
  }
}

void sub_1001610D8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 - 232);
  if (v3)
  {
    *(_QWORD *)(v1 - 224) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_100161100(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  int v9;
  __int16 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  unint64_t v30;
  unint64_t v31;
  NSObject *v32;
  int v33;
  int v34;
  int v35;
  int v36;
  double *v37;
  double v38;
  uint64_t v39;
  double *v40;
  double *v41;
  double *v42;
  double *v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  NSObject *v47;
  unsigned int v48;
  NSObject *v49;
  int v50;
  int v51;
  double v52;
  double v53;
  double v54;
  double *v55;
  double *v56;
  unint64_t v57;
  unint64_t v58;
  char *v59;
  double *v60;
  char *v61;
  double *v62;
  double *v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  NSObject *v67;
  unint64_t v68;
  unint64_t v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  double v76;
  uint64_t v77;
  __int16 v78;
  int v79;
  unint64_t v80;
  char v81;
  uint64_t v82;
  __int16 v83;
  __int16 v84;
  double v85;
  const char *v86;
  int v87;
  const char *v88;
  int v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  int v94;
  __int16 v95;
  __int128 v96;
  __int16 v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  __int16 v101;
  uint64_t v102;
  char v103;
  __int16 v104;
  __int16 v105;
  __int16 v106;
  uint64_t v107;
  __int16 v108;
  char v109;
  int v110;
  int v111;
  int v112;
  int v113;
  char v114;
  __int16 v115;
  __int128 v116;
  double v117;
  int v118;
  double v119;
  double v120;
  double *v121;
  double *v122;
  unint64_t v123;
  uint8_t buf[4];
  _BYTE v125[10];
  double v126;
  __int16 v127;
  double v128;
  uint64_t v129;

  v9 = a2;
  v12 = sub_10036BAF8(*(unsigned __int16 *)(a1 + 20), a2, a3, a4, a5, a6, a7, a8);
  v20 = sub_10036B814(*(unsigned __int8 *)(a1 + 24), v13, v14, v15, v16, v17, v18, v19);
  v129 = *(_QWORD *)(a1 + 75);
  v21 = *(_DWORD *)(a1 + 64);
  v120 = sub_100360CC4(v21);
  v22 = *(unsigned __int16 *)(a1 + 56);
  v23 = v22 & 0xF;
  if ((v23 & (v22 >> 4)) == 0xF)
  {
    v24 = 0.0;
    v25 = 0.0;
    v26 = 0.0;
    v27 = 0.0;
    v28 = 0.0;
    v116 = 0uLL;
    v117 = 0.0;
    v119 = 0.0;
  }
  else
  {
    v119 = (double)*(char *)(a1 + 68);
    v117 = (double)*(char *)(a1 + 69);
    v29 = (double)*(char *)(a1 + 70);
    *(double *)&v116 = v29;
    LOWORD(v29) = *(_WORD *)(a1 + 84);
    *(double *)&v30 = (double)*(unint64_t *)&v29;
    v28 = *(double *)&v30 * 0.01;
    LOWORD(v30) = *(_WORD *)(a1 + 86);
    *(double *)&v31 = (double)v30;
    v27 = *(double *)&v31 * 0.01;
    LOWORD(v31) = *(_WORD *)(a1 + 88);
    v26 = (double)v31 * 0.01;
    v25 = (double)*(__int16 *)(a1 + 58);
    v24 = (double)*(__int16 *)(a1 + 60);
    *((_QWORD *)&v116 + 1) = 1;
  }
  v110 = *(__int16 *)(a1 + 46);
  v112 = *(__int16 *)(a1 + 48);
  v111 = *(__int16 *)(a1 + 99);
  v115 = *(_WORD *)(a1 + 62);
  v114 = *(_BYTE *)(a1 + 83);
  v113 = *(unsigned __int8 *)(a1 + 98);
  v121 = 0;
  v122 = 0;
  v123 = 0;
  v118 = v21;
  if (v23 == 15)
  {
    v32 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
    {
      v33 = *(__int16 *)(a1 + 42);
      v34 = *(__int16 *)(a1 + 44);
      *(_DWORD *)buf = 67109632;
      *(_DWORD *)v125 = v33;
      *(_WORD *)&v125[4] = 1024;
      *(_DWORD *)&v125[6] = v34;
      LOWORD(v126) = 1024;
      *(_DWORD *)((char *)&v126 + 2) = 15;
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "#sp,Ignoring AOA hypothesis primary with az %d el %d intunc %d", buf, 0x14u);
    }
  }
  else
  {
    v35 = *(__int16 *)(a1 + 42);
    v36 = *(__int16 *)(a1 + 44);
    v37 = (double *)sub_100028A48((uint64_t)&v123, 1uLL);
    v38 = (double)v23 * 0.0666666667;
    v40 = &v37[7 * v39];
    *v37 = (double)v35;
    v37[1] = (double)v36;
    v37[2] = v38;
    *((_BYTE *)v37 + 24) = 0;
    *((_BYTE *)v37 + 32) = 0;
    *((_BYTE *)v37 + 40) = 0;
    *((_BYTE *)v37 + 48) = 0;
    v41 = v37 + 7;
    v43 = v121;
    v42 = v122;
    if (v122 != v121)
    {
      do
      {
        v44 = *(_OWORD *)(v42 - 7);
        v45 = *(_OWORD *)(v42 - 5);
        v46 = *(_OWORD *)(v42 - 3);
        *(v37 - 1) = *(v42 - 1);
        *(_OWORD *)(v37 - 3) = v46;
        *(_OWORD *)(v37 - 5) = v45;
        *(_OWORD *)(v37 - 7) = v44;
        v37 -= 7;
        v42 -= 7;
      }
      while (v42 != v43);
      v42 = v43;
    }
    v121 = v37;
    v122 = v41;
    v123 = (unint64_t)v40;
    if (v42)
      operator delete(v42);
    v122 = v41;
    v47 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134218496;
      *(double *)v125 = (double)v35;
      *(_WORD *)&v125[8] = 2048;
      v126 = (double)v36;
      v127 = 2048;
      v128 = v38;
      _os_log_debug_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEBUG, "#sp,AOA hypothesis primary: az %f el %f unc %f", buf, 0x20u);
    }
  }
  v48 = v22 >> 4;
  if (v48 == 15)
  {
    v49 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
    {
      v50 = *(__int16 *)(a1 + 71);
      v51 = *(__int16 *)(a1 + 73);
      *(_DWORD *)buf = 67109632;
      *(_DWORD *)v125 = v50;
      *(_WORD *)&v125[4] = 1024;
      *(_DWORD *)&v125[6] = v51;
      LOWORD(v126) = 1024;
      *(_DWORD *)((char *)&v126 + 2) = 15;
      _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_DEFAULT, "#sp,Ignoring AOA hypothesis alt1 with az %d el %d intunc %d", buf, 0x14u);
    }
  }
  else
  {
    v52 = (double)v48 * 0.0666666667;
    v53 = (double)*(__int16 *)(a1 + 71);
    v54 = (double)*(__int16 *)(a1 + 73);
    v55 = v122;
    if ((unint64_t)v122 >= v123)
    {
      v57 = 0x6DB6DB6DB6DB6DB7 * (v122 - v121) + 1;
      if (v57 > 0x492492492492492)
        sub_100026E7C();
      if (0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(v123 - (_QWORD)v121) >> 3) > v57)
        v57 = 0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(v123 - (_QWORD)v121) >> 3);
      if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v123 - (_QWORD)v121) >> 3)) >= 0x249249249249249)
        v58 = 0x492492492492492;
      else
        v58 = v57;
      if (v58)
        v59 = (char *)sub_100028A48((uint64_t)&v123, v58);
      else
        v59 = 0;
      v60 = (double *)&v59[8 * (v122 - v121)];
      v61 = &v59[56 * v58];
      *v60 = v53;
      v60[1] = v54;
      v60[2] = v52;
      *((_BYTE *)v60 + 24) = 0;
      *((_BYTE *)v60 + 32) = 0;
      *((_BYTE *)v60 + 40) = 0;
      *((_BYTE *)v60 + 48) = 0;
      v56 = v60 + 7;
      v63 = v121;
      v62 = v122;
      if (v122 != v121)
      {
        do
        {
          v64 = *(_OWORD *)(v62 - 7);
          v65 = *(_OWORD *)(v62 - 5);
          v66 = *(_OWORD *)(v62 - 3);
          *(v60 - 1) = *(v62 - 1);
          *(_OWORD *)(v60 - 3) = v66;
          *(_OWORD *)(v60 - 5) = v65;
          *(_OWORD *)(v60 - 7) = v64;
          v60 -= 7;
          v62 -= 7;
        }
        while (v62 != v63);
        v62 = v63;
      }
      v121 = v60;
      v122 = v56;
      v123 = (unint64_t)v61;
      if (v62)
        operator delete(v62);
    }
    else
    {
      *v122 = v53;
      v55[1] = v54;
      v55[2] = v52;
      *((_BYTE *)v55 + 24) = 0;
      *((_BYTE *)v55 + 32) = 0;
      *((_BYTE *)v55 + 40) = 0;
      v56 = v55 + 7;
      *((_BYTE *)v55 + 48) = 0;
    }
    v122 = v56;
    v67 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134218496;
      *(double *)v125 = v53;
      *(_WORD *)&v125[8] = 2048;
      v126 = v54;
      v127 = 2048;
      v128 = v52;
      _os_log_debug_impl((void *)&_mh_execute_header, v67, OS_LOG_TYPE_DEBUG, "#sp,AOA hypothesis alt1: az %f el %f unc %f", buf, 0x20u);
    }
  }
  v68 = sub_10036C550(*(unsigned __int16 *)(a1 + 90));
  if (!v70)
    __assert_rtn("convertToLibRoseType", "RoseRawMeasurement.cpp", 674, "channelBand.has_value()");
  v71 = v68;
  if ((_BYTE)v68)
  {
    if ((v68 & 0xFF000000000000) != 0)
    {
      v72 = HIDWORD(v68) & 0xFF00;
      v73 = BYTE4(v68);
      LOBYTE(v74) = 9;
      v75 = 0x10000;
      goto LABEL_41;
    }
    v86 = "channelBand.value().uniiBandChannel.has_value()";
    v87 = 690;
LABEL_64:
    __assert_rtn("convertToLibRoseType", "RoseRawMeasurement.cpp", v87, v86);
  }
  if ((v68 & 0xFF0000) == 0)
  {
    v86 = "channelBand.value().uwbChannel.has_value()";
    v87 = 683;
    goto LABEL_64;
  }
  v75 = 0;
  v73 = 0;
  v72 = 0;
  v74 = v68 >> 8;
LABEL_41:
  v76 = 0.0;
  v107 = v75;
  if (v9)
  {
    v77 = 65537;
    if (v9 == 1)
    {
      LOWORD(v69) = *(_WORD *)(a1 + 54);
      v76 = (double)v69;
    }
  }
  else
  {
    v77 = *(unsigned __int16 *)(a1 + 54) | 0x10000;
  }
  v78 = *(_WORD *)(a1 + 92);
  v106 = *(_WORD *)(a1 + 96);
  v79 = *(unsigned __int8 *)(a1 + 24);
  v109 = v20;
  v108 = *(_WORD *)(a1 + 94);
  if (v79 != 27)
  {
    if (v79 == 26)
    {
      v104 = *(unsigned __int8 *)(a1 + 101);
      v105 = *(unsigned __int8 *)(a1 + 102);
    }
    else
    {
      v105 = 0;
      v104 = 0;
    }
    goto LABEL_53;
  }
  v104 = *(unsigned __int8 *)(a1 + 101);
  v105 = *(unsigned __int8 *)(a1 + 102);
  v80 = sub_10036C550(*(unsigned __int16 *)(a1 + 103));
  if (!v81)
  {
    v88 = "mmsChannelBand.has_value()";
    v89 = 735;
    goto LABEL_67;
  }
  if ((_BYTE)v80)
  {
    v88 = "mmsChannelBand.value().band == Rose::BandSelect::UWB500MHz";
    v89 = 736;
LABEL_67:
    __assert_rtn("convertToLibRoseType", "RoseRawMeasurement.cpp", v89, v88);
  }
  if ((v80 & 0xFF0000) == 0)
    sub_10000BA44();
  v74 = v80 >> 8;
LABEL_53:
  v102 = v77;
  v103 = v74;
  v101 = v78;
  v99 = *(unsigned __int16 *)(a1 + 106);
  v100 = *(unsigned __int8 *)(a1 + 105);
  v98 = *(unsigned __int16 *)(a1 + 108);
  if (*(_BYTE *)(a1 + 116))
  {
    if ((v79 & 0xFE) != 0x1A)
      __assert_rtn("convertToLibRoseType", "RoseRawMeasurement.cpp", 754, "isValidSessionTypeForMmsValStatus");
    v82 = v71;
    v83 = *(_BYTE *)(a1 + 116) & 7;
    v84 = 256;
  }
  else
  {
    v82 = v71;
    v83 = 0;
    v84 = 0;
  }
  v97 = *(_WORD *)(a1 + 22);
  v85 = sub_100360CC4(*(_QWORD *)(a1 + 25));
  *((_QWORD *)&v96 + 1) = 1;
  *(double *)&v96 = (double)v111 * 0.25;
  *((_QWORD *)&v93 + 1) = *((_QWORD *)&v116 + 1);
  *(double *)&v93 = v24;
  *((_QWORD *)&v92 + 1) = *((_QWORD *)&v116 + 1);
  *(double *)&v92 = v25;
  *((_QWORD *)&v91 + 1) = *((_QWORD *)&v116 + 1);
  *(double *)&v91 = v117;
  *((_QWORD *)&v90 + 1) = *((_QWORD *)&v116 + 1);
  *(double *)&v90 = v119;
  sub_100362740(a9, v12, v97, v109, *(_WORD *)(a1 + 33), *(_BYTE *)(a1 + 35), &v129, 0, v85, (double)*(int *)(a1 + 38), (double)v110 * 0.25, (double)v112 * 0.25, (double)*(int *)(a1 + 50), v76, v120, (uint64_t)&v121, v90, v91, v116,
    v92,
    v93,
    v115,
    v118,
    v114,
    *(uint64_t *)&v28,
    *((uint64_t *)&v116 + 1),
    *(uint64_t *)&v27,
    *((uint64_t *)&v116 + 1),
    *(uint64_t *)&v26,
    *((uint64_t *)&v116 + 1),
    v103,
    v94,
    v82 | 0x100,
    (v82 | 0x100uLL) >> 32,
    v73 | v107 | v72,
    (v73 | v107 | (unint64_t)v72) >> 32,
    v101,
    v108,
    v106,
    v95,
    v113 | ((v113 != 0) << 8),
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    v96,
    v104 | 0x100,
    0,
    v105 | 0x100,
    0,
    v100 | 0x100,
    (v100 | 0x100uLL) >> 32,
    v99 | 0x10000,
    (v99 | 0x10000uLL) >> 32,
    v98 | 0x10000,
    (v98 | 0x10000uLL) >> 32,
    v102,
    SHIDWORD(v102),
    v84 | v83);
  if (v121)
  {
    v122 = v121;
    operator delete(v121);
  }
}

void sub_100161A98(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 - 232);
  if (v3)
  {
    *(_QWORD *)(v1 - 224) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_100161ACC(uint64_t a1, __int128 *a2, __int128 *a3, char *__dst)
{
  char *v4;
  __int128 *v6;
  __int128 v7;
  _QWORD v9[3];
  char v10;
  char *v11;
  char *v12;

  v4 = __dst;
  v11 = __dst;
  v12 = __dst;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        sub_100004678(v4, *(void **)v6, *((_QWORD *)v6 + 1));
        v4 = v12;
      }
      else
      {
        v7 = *v6;
        *((_QWORD *)v4 + 2) = *((_QWORD *)v6 + 2);
        *(_OWORD *)v4 = v7;
      }
      v6 = (__int128 *)((char *)v6 + 24);
      v4 += 24;
      v12 = v4;
    }
    while (v6 != a3);
  }
  v10 = 1;
  sub_100161B88((uint64_t)v9);
  return v4;
}

void sub_100161B74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100161B88((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100161B88(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_100161BBC(a1);
  return a1;
}

void sub_100161BBC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = **(_QWORD **)(a1 + 16);
  v2 = **(_QWORD **)(a1 + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 - 1) < 0)
      operator delete(*(void **)(v1 - 24));
    v1 -= 24;
  }
}

void sub_100161C00(void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    sub_100161C40((uint64_t *)v2);
    operator delete(**a1);
  }
}

void sub_100161C40(uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 24)
  {
    if (*(char *)(i - 1) < 0)
      operator delete(*(void **)(i - 24));
  }
  a1[1] = v2;
}

void sub_100161C8C(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 0xCu);
}

uint64_t sub_100161C9C()
{
  std::string *v0;
  __int128 v1;
  std::string *v2;
  __int128 v3;
  std::string *v4;
  __int128 v5;
  std::string *v6;
  __int128 v7;
  std::string *v8;
  __int128 v9;
  std::string *v10;
  __int128 v11;
  std::string *v12;
  __int128 v13;
  std::string *v14;
  __int128 v15;
  std::string *v16;
  __int128 v17;
  std::string *v18;
  __int128 v19;
  std::string *v20;
  __int128 v21;
  std::string *v22;
  __int128 v23;
  std::string *v24;
  __int128 v25;
  std::string *v26;
  __int128 v27;
  std::string *v28;
  __int128 v29;
  std::string *v30;
  __int128 v31;
  std::string *v32;
  __int128 v33;
  std::string *v34;
  __int128 v35;
  std::string v37;
  std::string v38;

  sub_1003610EC(0);
  v0 = std::string::insert(&v37, 0, "reverseLUT_A");
  v1 = *(_OWORD *)&v0->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v0->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v1;
  v0->__r_.__value_.__l.__size_ = 0;
  v0->__r_.__value_.__r.__words[2] = 0;
  v0->__r_.__value_.__r.__words[0] = 0;
  v2 = std::string::append(&v38, ".bin");
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  qword_100855948 = v2->__r_.__value_.__r.__words[2];
  xmmword_100855938 = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_100855938, (void *)&_mh_execute_header);
  sub_1003610EC(1);
  v4 = std::string::insert(&v37, 0, "reverseLUT_A");
  v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  v6 = std::string::append(&v38, ".bin");
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  qword_100855960 = v6->__r_.__value_.__r.__words[2];
  xmmword_100855950 = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_100855950, (void *)&_mh_execute_header);
  sub_1003610EC(2);
  v8 = std::string::insert(&v37, 0, "reverseLUT_A");
  v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  v10 = std::string::append(&v38, ".bin");
  v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  qword_100855978 = v10->__r_.__value_.__r.__words[2];
  xmmword_100855968 = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_100855968, (void *)&_mh_execute_header);
  sub_1003610EC(3);
  v12 = std::string::insert(&v37, 0, "reverseLUT_A");
  v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  v14 = std::string::append(&v38, ".bin");
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  qword_100855990 = v14->__r_.__value_.__r.__words[2];
  xmmword_100855980 = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_100855980, (void *)&_mh_execute_header);
  sub_1003610EC(4);
  v16 = std::string::insert(&v37, 0, "reverseLUT_A");
  v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  v18 = std::string::append(&v38, ".bin");
  v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  qword_1008559A8 = v18->__r_.__value_.__r.__words[2];
  xmmword_100855998 = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_100855998, (void *)&_mh_execute_header);
  sub_1003610EC(5);
  v20 = std::string::insert(&v37, 0, "reverseLUT_A");
  v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  v22 = std::string::append(&v38, ".bin");
  v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  qword_1008559C0 = v22->__r_.__value_.__r.__words[2];
  xmmword_1008559B0 = v23;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1008559B0, (void *)&_mh_execute_header);
  sub_1003610EC(6);
  v24 = std::string::insert(&v37, 0, "reverseLUT_A");
  v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v25;
  v24->__r_.__value_.__l.__size_ = 0;
  v24->__r_.__value_.__r.__words[2] = 0;
  v24->__r_.__value_.__r.__words[0] = 0;
  v26 = std::string::append(&v38, ".bin");
  v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
  qword_1008559D8 = v26->__r_.__value_.__r.__words[2];
  xmmword_1008559C8 = v27;
  v26->__r_.__value_.__l.__size_ = 0;
  v26->__r_.__value_.__r.__words[2] = 0;
  v26->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1008559C8, (void *)&_mh_execute_header);
  sub_1003610EC(7);
  v28 = std::string::insert(&v37, 0, "reverseLUT_A");
  v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v29;
  v28->__r_.__value_.__l.__size_ = 0;
  v28->__r_.__value_.__r.__words[2] = 0;
  v28->__r_.__value_.__r.__words[0] = 0;
  v30 = std::string::append(&v38, ".bin");
  v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
  qword_1008559F0 = v30->__r_.__value_.__r.__words[2];
  xmmword_1008559E0 = v31;
  v30->__r_.__value_.__l.__size_ = 0;
  v30->__r_.__value_.__r.__words[2] = 0;
  v30->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1008559E0, (void *)&_mh_execute_header);
  sub_1003610EC(8);
  v32 = std::string::insert(&v37, 0, "reverseLUT_A");
  v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v33;
  v32->__r_.__value_.__l.__size_ = 0;
  v32->__r_.__value_.__r.__words[2] = 0;
  v32->__r_.__value_.__r.__words[0] = 0;
  v34 = std::string::append(&v38, ".bin");
  v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
  qword_100855A08 = v34->__r_.__value_.__r.__words[2];
  xmmword_1008559F8 = v35;
  v34->__r_.__value_.__l.__size_ = 0;
  v34->__r_.__value_.__r.__words[2] = 0;
  v34->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  return __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1008559F8, (void *)&_mh_execute_header);
}

void sub_100162280(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1001622F4@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, off_100808398[a1]);
}

_QWORD *sub_100162308@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, off_1008083F0[a1]);
}

_QWORD *sub_10016231C@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, off_100808438[a1]);
}

_QWORD *sub_100162330@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, off_100808458[a1]);
}

uint64_t sub_100162344(uint64_t a1, int a2, int a3, __int128 *a4, int a5, char a6, int a7, int a8, void *__src)
{
  __int128 v12;
  __int128 v13;

  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 1) = a2;
  *(_DWORD *)(a1 + 4) = a3;
  v12 = *a4;
  v13 = a4[1];
  *(_OWORD *)(a1 + 36) = *(__int128 *)((char *)a4 + 28);
  *(_OWORD *)(a1 + 24) = v13;
  *(_OWORD *)(a1 + 8) = v12;
  *(_BYTE *)(a1 + 52) = a6;
  *(_DWORD *)(a1 + 56) = a5;
  *(_DWORD *)(a1 + 60) = a7;
  *(_DWORD *)(a1 + 64) = a8;
  *(_DWORD *)(a1 + 68) = 0;
  *(_QWORD *)(a1 + 72) = -1;
  *(_WORD *)(a1 + 80) = -1;
  *(_BYTE *)(a1 + 82) = 0;
  *(_QWORD *)(a1 + 83) = 0xFFFFFFFFLL;
  *(_WORD *)(a1 + 91) = 0;
  memcpy((void *)(a1 + 96), __src, 0x198uLL);
  if (a2 == 100)
    sub_1003CF858();
  if (!a3)
    sub_1003CF880();
  if (*(_BYTE *)(a1 + 153) || *(_BYTE *)(a1 + 207) || *(_BYTE *)(a1 + 209) || *(_BYTE *)(a1 + 353))
  {
    *(_BYTE *)a1 = 1;
    sub_100162410(a1);
  }
  return a1;
}

void sub_100162410(uint64_t a1)
{
  NSObject *v2;
  int v3;
  NSObject *v4;
  NSObject *v5;
  const char *v6;
  uint8_t *v7;
  __int16 v8;
  uint8_t v9[16];
  uint8_t v10[2];
  uint8_t buf[16];

  v2 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "RoseServiceRequest::assignChannelDiversitySettings", buf, 2u);
  }
  if (*(_BYTE *)(a1 + 209))
  {
    if (!*(_BYTE *)(a1 + 207))
      goto LABEL_15;
    v3 = *(_DWORD *)(a1 + 64);
    if (v3 && *(unsigned __int8 *)(a1 + 206) != *(unsigned __int8 *)(a1 + 208))
    {
      if (v3 != 1)
      {
        if (v3 == 2)
        {
          v4 = qword_10085F520;
          if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)v9 = 0;
            _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "RoseServiceRequest::assignChannelDiversitySettings - Channel diversity preference RoundRobin_P2S", v9, 2u);
          }
          if (*(_BYTE *)(a1 + 120))
          {
            *(_WORD *)(a1 + 118) |= 4u;
          }
          else
          {
            *(_WORD *)(a1 + 118) = 4;
            *(_BYTE *)(a1 + 120) = 1;
          }
        }
        return;
      }
      v5 = qword_10085F520;
      if (!os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
        return;
      v8 = 0;
      v6 = "RoseServiceRequest::assignChannelDiversitySettings - Channel diversity preference RoundRobin";
      v7 = (uint8_t *)&v8;
LABEL_19:
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, v6, v7, 2u);
      return;
    }
  }
  else if (!*(_BYTE *)(a1 + 207))
  {
    goto LABEL_15;
  }
  *(_WORD *)(a1 + 208) = *(_WORD *)(a1 + 206);
LABEL_15:
  if (!*(_BYTE *)(a1 + 211))
    *(_BYTE *)(a1 + 211) = 1;
  *(_BYTE *)(a1 + 210) = 0;
  v5 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v10 = 0;
    v6 = "RoseServiceRequest::assignChannelDiversitySettings - channelDiversityPrecondition is false";
    v7 = v10;
    goto LABEL_19;
  }
}

uint64_t sub_1001625AC(uint64_t a1, int a2, int a3, __int128 *a4, int a5, char a6, int a7, int a8, void *__src)
{
  return sub_100162344(a1, a2, a3, a4, a5, a6, a7, a8, __src);
}

uint64_t sub_1001625B8(uint64_t a1)
{
  int v1;
  int v2;
  int v3;
  __int16 *v4;
  int v5;
  __int16 *v6;
  __int16 *v7;
  __int16 v9;

  if (!*(_BYTE *)a1)
    sub_1003CF8A8();
  v9 = 0;
  v1 = *(_DWORD *)(a1 + 4);
  if ((v1 - 5) >= 2)
  {
    if (v1 == 4)
    {
      if (*(_BYTE *)(a1 + 153))
        sub_1003CF920();
      if (!*(_BYTE *)(a1 + 207))
        goto LABEL_19;
      v3 = *(unsigned __int8 *)(a1 + 206);
      if (v3 == 5)
      {
        v4 = (__int16 *)((char *)&v9 + 1);
      }
      else
      {
        if (v3 != 9)
        {
LABEL_19:
          if (!*(_BYTE *)(a1 + 209))
            return HIBYTE(v9) | (v9 << 8);
          v2 = *(unsigned __int8 *)(a1 + 208);
          goto LABEL_21;
        }
        v4 = &v9;
      }
      *(_BYTE *)v4 = 1;
      goto LABEL_19;
    }
    if (*(_BYTE *)(a1 + 207))
      sub_1003CF8F8();
    if (*(_BYTE *)(a1 + 209))
      sub_1003CF8D0();
    if (*(_BYTE *)(a1 + 153))
    {
      v5 = *(unsigned __int8 *)(a1 + 152);
      if (v5 == 5)
      {
        v6 = (__int16 *)((char *)&v9 + 1);
        goto LABEL_27;
      }
      if (v5 == 9)
      {
        v6 = &v9;
LABEL_27:
        *(_BYTE *)v6 = 1;
      }
    }
    if (v1 == 1 && *(_BYTE *)(a1 + 120) && (*(_WORD *)(a1 + 118) & 4) != 0)
      v9 = 257;
    return HIBYTE(v9) | (v9 << 8);
  }
  if (!*(_BYTE *)(a1 + 353))
    sub_1003CF948();
  v2 = *(unsigned __int8 *)(a1 + 352);
LABEL_21:
  if (v2 == 5)
  {
    v7 = (__int16 *)((char *)&v9 + 1);
    goto LABEL_25;
  }
  if (v2 == 9)
  {
    v7 = &v9;
LABEL_25:
    *(_BYTE *)v7 = 1;
  }
  return HIBYTE(v9) | (v9 << 8);
}

uint64_t sub_1001626F4(uint64_t a1)
{
  int v2;
  char *v3;
  void *p_p;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  _QWORD *v10;
  const std::locale::facet *v11;
  uint64_t v12;
  uint64_t v13;
  void *__p;
  uint64_t v16;
  unsigned __int8 v17;
  _QWORD v18[2];
  uint64_t v19;
  _QWORD v20[10];
  char v21;
  uint64_t v22;
  std::locale v23;

  sub_1000537E4((uint64_t)v18);
  sub_100054C60(&v19, (uint64_t)"[Role]: ", 8);
  v2 = *(unsigned __int8 *)(a1 + 1);
  if (v2 == 100)
  {
    v3 = "Unspecified";
  }
  else if (v2 == 1)
  {
    v3 = "Responder";
  }
  else
  {
    v3 = "Initiator";
  }
  sub_10000BF04(&__p, v3);
  if ((v17 & 0x80u) == 0)
    p_p = &__p;
  else
    p_p = __p;
  if ((v17 & 0x80u) == 0)
    v5 = v17;
  else
    v5 = v16;
  sub_100054C60(&v19, (uint64_t)p_p, v5);
  if ((char)v17 < 0)
    operator delete(__p);
  sub_100054C60(&v19, (uint64_t)", [UseCase]: ", 13);
  sub_1001622F4(*(_DWORD *)(a1 + 156), &__p);
  if ((v17 & 0x80u) == 0)
    v6 = &__p;
  else
    v6 = __p;
  if ((v17 & 0x80u) == 0)
    v7 = v17;
  else
    v7 = v16;
  sub_100054C60(&v19, (uint64_t)v6, v7);
  if ((char)v17 < 0)
    operator delete(__p);
  sub_100054C60(&v19, (uint64_t)", [MacMode]: ", 13);
  sub_100162308(*(_DWORD *)(a1 + 4), &__p);
  if ((v17 & 0x80u) == 0)
    v8 = &__p;
  else
    v8 = __p;
  if ((v17 & 0x80u) == 0)
    v9 = v17;
  else
    v9 = v16;
  v10 = sub_100054C60(&v19, (uint64_t)v8, v9);
  std::ios_base::getloc((const std::ios_base *)((char *)v10 + *(_QWORD *)(*v10 - 24)));
  v11 = std::locale::use_facet(&v23, &std::ctype<char>::id);
  v12 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
  std::locale::~locale(&v23);
  std::ostream::put(v10, v12);
  std::ostream::flush(v10);
  if ((char)v17 < 0)
    operator delete(__p);
  std::stringbuf::str(v20);
  *(_QWORD *)((char *)v18
  v19 = v13;
  if (v21 < 0)
    operator delete((void *)v20[8]);
  std::streambuf::~streambuf(v20);
  return std::ios::~ios(&v22);
}

void sub_100162930(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  sub_100053910((uint64_t)&a16);
  _Unwind_Resume(a1);
}

_QWORD *sub_100162980@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, off_100808478[a1]);
}

_QWORD *sub_100162994@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, off_1008084D0[a1]);
}

_QWORD *sub_1001629A8@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, off_100808518[a1]);
}

_QWORD *sub_1001629BC@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, off_100808538[a1]);
}

BOOL sub_1001629D0(int a1)
{
  return (a1 - 3) < 4;
}

uint64_t sub_1001629E0(unsigned int a1)
{
  return (a1 < 7) & (0x54u >> a1);
}

_QWORD *sub_1001629F8@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, off_100808558[a1]);
}

_QWORD *sub_100162A0C@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, off_1008085B0[a1]);
}

_QWORD *sub_100162A20@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, off_1008085F8[a1]);
}

_QWORD *sub_100162A34@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, off_100808618[a1]);
}

void sub_100162A48(char *a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 v4;
  unsigned __int8 v5;
  __int16 v6;
  int v7;
  unsigned int v8;
  std::random_device::result_type v9;
  uint64_t i;
  unsigned __int8 v11[20];
  __int128 v12;
  __int128 v13;
  char v14;
  std::random_device __src;
  char v16;
  char v17;
  char v18;
  int v19;
  char v20;
  __int16 v21;
  char v22;
  __int16 v23;
  int v24;
  char v25;
  __int16 v26;
  char v27;
  char v28;
  char v29;
  char v30;
  char v31;
  char v32;
  char v33;
  int v34;
  __int16 v35;
  char v36;
  char v37;
  char v38;
  char v39;
  char v40;
  char v41;
  __int16 v42;
  char v43;
  char v44;
  char v45;
  char v46;
  char v47;
  __int16 v48;
  char v49;
  __int16 v50;
  char v51;
  int v52;
  uint64_t v53;
  char v54;
  char v55;
  __int16 v56;
  char v57;
  __int16 v58;
  char v59;
  char v60;
  char v61;
  char v62;
  char v63;
  int v64;
  char v65;
  char v66;
  int v67;
  char v68;
  char v69;
  char v70;
  char v71;
  uint64_t v72;
  char v73;
  char v74;
  char v75;
  char v76;
  uint64_t v77;
  int v78;
  char v79;
  char v80;
  _DWORD v81[2];
  char v82;
  char v83;
  char v84;
  char v85;
  char v86;
  char v87;
  char v88;
  char v89;
  char v90;
  char v91;
  char v92;
  char v93;
  char v94;
  int v95;
  __int16 v96;
  int v97;
  char v98;
  char v99;
  char v100;
  char v101;
  __int16 v102;
  char v103;
  char v104;
  _DWORD v105[2];
  char v106;
  int v107;
  char v108;
  char v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;

  v12 = xmmword_10046D380;
  v4 = atomic_load((unsigned __int8 *)&qword_1008563E8);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_1008563E8))
  {
    sub_10014C9F4(&__src);
    v9 = std::random_device::operator()(&__src);
    dword_100855A20[0] = v9;
    for (i = 1; i != 624; ++i)
    {
      v9 = i + 1812433253 * (v9 ^ (v9 >> 30));
      dword_100855A20[i] = v9;
    }
    qword_1008563E0 = 0;
    std::random_device::~random_device(&__src);
    __cxa_guard_release(&qword_1008563E8);
  }
  v5 = atomic_load((unsigned __int8 *)&qword_1008563F0);
  if ((v5 & 1) == 0 && __cxa_guard_acquire(&qword_1008563F0))
  {
    __cxa_atexit((void (*)(void *))&std::mutex::~mutex, &stru_100851D50, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_1008563F0);
  }
  std::mutex::lock(&stru_100851D50);
  v6 = word_10046D3F6[sub_10014CA64((uint64_t)&v12, (uint64_t)dword_100855A20, &v12)];
  v7 = *((_DWORD *)sub_100004784() + 144);
  if (*a1 == 5)
    v8 = 1;
  else
    v8 = 2;
  sub_10016C5A4((uint64_t)v11, v7, v8, 0);
  sub_10016C8DC(v11, 0);
  LOWORD(__src.__padding_) = 256;
  BYTE2(__src.__padding_) = sub_10016CC68((uint64_t)v11);
  HIBYTE(__src.__padding_) = 1;
  v16 = sub_10016CC70((uint64_t)v11);
  v17 = 1;
  v18 = sub_10016CC78((uint64_t)v11);
  v19 = 151062785;
  v20 = 1;
  v21 = 0;
  v22 = 1;
  v23 = 0;
  v24 = 201395201;
  v25 = 1;
  v26 = 2;
  v27 = 1;
  v28 = 0;
  v29 = 0;
  v30 = 0;
  v31 = 0;
  v32 = *a1;
  v33 = 1;
  v34 = 1;
  v35 = 0;
  v36 = sub_10016CC80((uint64_t)v11);
  v37 = 1;
  v38 = sub_10016CC88((uint64_t)v11);
  v39 = 1;
  v40 = sub_10016CC90((uint64_t)v11);
  v41 = 1;
  v42 = 0;
  v43 = 1;
  v44 = 0;
  v45 = 0;
  v46 = 0;
  v47 = 0;
  v48 = v6;
  v49 = 1;
  v50 = v6;
  v51 = 1;
  v52 = 17891601;
  v55 = 0;
  v56 = 0;
  v57 = 0;
  v58 = 0;
  v59 = 0;
  v60 = 0;
  v61 = 0;
  v62 = 0;
  v63 = 0;
  v66 = 0;
  v69 = 0;
  v70 = 0;
  v71 = 0;
  v74 = 0;
  v75 = 0;
  v76 = 0;
  v80 = 0;
  v82 = 0;
  v83 = 0;
  v84 = 0;
  v85 = 0;
  v86 = 0;
  v87 = 0;
  v88 = 0;
  v89 = 0;
  v90 = 0;
  v91 = 0;
  v92 = 0;
  v93 = 0;
  v94 = 0;
  v99 = 0;
  v100 = 0;
  v101 = 0;
  v102 = 0;
  v103 = 0;
  v104 = 0;
  v106 = 0;
  v109 = 0;
  v54 = 0;
  v53 = 0;
  v65 = 0;
  v64 = 0;
  v68 = 0;
  v67 = 0;
  v73 = 0;
  v72 = 0;
  v77 = 0;
  v79 = 0;
  v78 = 0;
  *(_DWORD *)((char *)v81 + 3) = 0;
  v81[0] = 0;
  v96 = 0;
  v95 = 0;
  v97 = 0;
  v98 = 0;
  v105[0] = 0;
  *(_DWORD *)((char *)v105 + 3) = 0;
  v108 = 0;
  v107 = 0;
  v112 = 0;
  v110 = 0;
  v111 = 0;
  LOBYTE(v13) = 0;
  v14 = 0;
  sub_1001625AC(a2, 0, 1, &v13, 4, 0, 3, 0, &__src);
  std::mutex::unlock(&stru_100851D50);
}

void sub_100162E24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::random_device a21)
{
  std::random_device::~random_device(&a21);
  __cxa_guard_abort(&qword_1008563E8);
  _Unwind_Resume(a1);
}

uint64_t sub_100162E8C@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  int v4;
  unsigned int v5;
  unsigned __int8 v7[20];
  __int128 v8;
  char v9;
  __int16 __src;
  char v11;
  char v12;
  char v13;
  char v14;
  char v15;
  int v16;
  char v17;
  __int16 v18;
  char v19;
  __int16 v20;
  int v21;
  char v22;
  __int16 v23;
  char v24;
  char v25;
  char v26;
  char v27;
  char v28;
  char v29;
  char v30;
  int v31;
  __int16 v32;
  char v33;
  char v34;
  char v35;
  char v36;
  char v37;
  char v38;
  __int16 v39;
  char v40;
  char v41;
  char v42;
  char v43;
  char v44;
  __int16 v45;
  char v46;
  __int16 v47;
  char v48;
  int v49;
  uint64_t v50;
  char v51;
  char v52;
  __int16 v53;
  char v54;
  __int16 v55;
  char v56;
  char v57;
  char v58;
  char v59;
  char v60;
  int v61;
  char v62;
  char v63;
  int v64;
  char v65;
  char v66;
  char v67;
  char v68;
  uint64_t v69;
  char v70;
  char v71;
  char v72;
  char v73;
  uint64_t v74;
  int v75;
  char v76;
  char v77;
  _DWORD v78[2];
  char v79;
  char v80;
  char v81;
  char v82;
  char v83;
  char v84;
  char v85;
  char v86;
  char v87;
  char v88;
  char v89;
  char v90;
  char v91;
  int v92;
  __int16 v93;
  int v94;
  char v95;
  char v96;
  char v97;
  char v98;
  __int16 v99;
  char v100;
  char v101;
  _DWORD v102[2];
  char v103;
  int v104;
  char v105;
  char v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;

  v4 = *((_DWORD *)sub_100004784() + 144);
  if (*a1 == 5)
    v5 = 1;
  else
    v5 = 2;
  sub_10016C5A4((uint64_t)v7, v4, v5, 0);
  sub_10016C914(v7, 0);
  __src = 257;
  v11 = sub_10016CC68((uint64_t)v7);
  v12 = 1;
  v13 = sub_10016CC70((uint64_t)v7);
  v14 = 1;
  v15 = sub_10016CC78((uint64_t)v7);
  v16 = 151062785;
  v17 = 1;
  v18 = 0;
  v19 = 1;
  v20 = 0;
  v21 = 201395201;
  v22 = 1;
  v23 = 3;
  v24 = 1;
  v25 = 0;
  v26 = 0;
  v27 = 0;
  v28 = 0;
  v29 = *a1;
  v30 = 1;
  v31 = 1;
  v32 = 0;
  v33 = sub_10016CC80((uint64_t)v7);
  v34 = 1;
  v35 = sub_10016CC88((uint64_t)v7);
  v36 = 1;
  v37 = sub_10016CC90((uint64_t)v7);
  v38 = 1;
  v39 = 0;
  v40 = 1;
  v41 = 0;
  v42 = 0;
  v43 = 0;
  v44 = 0;
  v45 = 75;
  v46 = 1;
  v47 = 1000;
  v48 = 1;
  v49 = 18874625;
  v52 = 0;
  v53 = 0;
  v54 = 0;
  v55 = 0;
  v56 = 0;
  v57 = 0;
  v58 = 0;
  v59 = 0;
  v60 = 0;
  v63 = 0;
  v66 = 0;
  v67 = 0;
  v68 = 0;
  v71 = 0;
  v72 = 0;
  v73 = 0;
  v77 = 0;
  v79 = 0;
  v80 = 0;
  v81 = 0;
  v82 = 0;
  v83 = 0;
  v84 = 0;
  v85 = 0;
  v86 = 0;
  v87 = 0;
  v88 = 0;
  v89 = 0;
  v90 = 0;
  v91 = 0;
  v96 = 0;
  v97 = 0;
  v98 = 0;
  v99 = 0;
  v100 = 0;
  v101 = 0;
  v103 = 0;
  v106 = 0;
  v51 = 0;
  v50 = 0;
  v62 = 0;
  v61 = 0;
  v65 = 0;
  v64 = 0;
  v70 = 0;
  v69 = 0;
  v74 = 0;
  v76 = 0;
  v75 = 0;
  *(_DWORD *)((char *)v78 + 3) = 0;
  v78[0] = 0;
  v93 = 0;
  v92 = 0;
  v94 = 0;
  v95 = 0;
  v102[0] = 0;
  *(_DWORD *)((char *)v102 + 3) = 0;
  v105 = 0;
  v104 = 0;
  v109 = 0;
  v107 = 0;
  v108 = 0;
  LOBYTE(v8) = 0;
  v9 = 0;
  return sub_1001625AC(a2, 1, 1, &v8, 1, 0, 1, 0, &__src);
}

void sub_100163150(char *a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 v4;
  unsigned __int8 v5;
  int v6;
  unsigned int v7;
  unsigned __int8 v8;
  uint64_t v9;
  const __int16 *v10;
  uint64_t v11;
  __int128 v12;
  int v13;
  int v14;
  std::random_device::result_type v15;
  uint64_t i;
  int v17[5];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21[2];
  uint64_t v22;
  char v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  std::random_device __src;
  char v28;
  char v29;
  char v30;
  __int16 v31;
  char v32;
  char v33;
  char v34;
  __int16 v35;
  char v36;
  __int16 v37;
  int v38;
  char v39;
  __int16 v40;
  char v41;
  char v42;
  char v43;
  char v44;
  char v45;
  char v46;
  char v47;
  int v48;
  __int16 v49;
  char v50;
  char v51;
  char v52;
  char v53;
  char v54;
  char v55;
  __int16 v56;
  char v57;
  __int16 v58;
  char v59;
  char v60;
  char v61;
  char v62;
  char v63;
  char v64;
  char v65;
  _BYTE v66[16];
  __int16 v67;
  char v68;
  __int16 v69;
  char v70;
  char v71;
  char v72;
  char v73;
  char v74;
  int v75;
  char v76;
  char v77;
  int v78;
  char v79;
  char v80;
  char v81;
  char v82;
  uint64_t v83;
  char v84;
  char v85;
  char v86;
  char v87;
  uint64_t v88;
  int v89;
  char v90;
  char v91;
  _DWORD v92[2];
  char v93;
  char v94;
  char v95;
  char v96;
  char v97;
  char v98;
  char v99;
  char v100;
  char v101;
  char v102;
  char v103;
  char v104;
  char v105;
  int v106;
  __int16 v107;
  int v108;
  char v109;
  char v110;
  char v111;
  char v112;
  __int16 v113;
  char v114;
  char v115;
  _DWORD v116[2];
  char v117;
  int v118;
  char v119;
  char v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;

  v19 = xmmword_10046D390;
  v20 = xmmword_10046D390;
  v18 = xmmword_10046D3A0;
  v4 = atomic_load((unsigned __int8 *)&qword_100856DC0);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_100856DC0))
  {
    sub_10014C9F4(&__src);
    v15 = std::random_device::operator()(&__src);
    dword_1008563F8[0] = v15;
    for (i = 1; i != 624; ++i)
    {
      v15 = i + 1812433253 * (v15 ^ (v15 >> 30));
      dword_1008563F8[i] = v15;
    }
    qword_100856DB8 = 0;
    std::random_device::~random_device(&__src);
    __cxa_guard_release(&qword_100856DC0);
  }
  v5 = atomic_load((unsigned __int8 *)&qword_100856DC8);
  if ((v5 & 1) == 0 && __cxa_guard_acquire(&qword_100856DC8))
  {
    __cxa_atexit((void (*)(void *))&std::mutex::~mutex, &stru_100851D90, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_100856DC8);
  }
  std::mutex::lock(&stru_100851D90);
  v6 = *((_DWORD *)sub_100004784() + 144);
  if (*a1 == 5)
    v7 = 1;
  else
    v7 = 2;
  sub_10016C5A4((uint64_t)v17, v6, v7, 0);
  sub_10016C94C((unsigned __int8 *)v17, 1);
  v8 = atomic_load((unsigned __int8 *)&qword_100856DD8);
  if ((v8 & 1) == 0 && __cxa_guard_acquire(&qword_100856DD8))
  {
    word_100856DD0 = sub_10016CC14(v17);
    __cxa_guard_release(&qword_100856DD8);
  }
  LOWORD(__src.__padding_) = 257;
  BYTE2(__src.__padding_) = sub_10016CC68((uint64_t)v17);
  HIBYTE(__src.__padding_) = 1;
  v28 = sub_10016CC70((uint64_t)v17);
  v29 = 1;
  v30 = sub_10016CC78((uint64_t)v17);
  v31 = 2561;
  v32 = 1;
  v33 = *((_BYTE *)&aGhijlmnoqrstvw[14] + sub_10014CA64((uint64_t)&v18, (uint64_t)dword_1008563F8, &v18));
  v34 = 1;
  v35 = 1024;
  v36 = 1;
  v37 = 1024;
  v38 = 65537;
  v39 = 1;
  v40 = 3;
  v41 = 1;
  v42 = 0;
  v43 = 0;
  v44 = 0;
  v45 = 0;
  v46 = *a1;
  v47 = 1;
  v48 = 4;
  v49 = 256;
  v50 = sub_10016CC80((uint64_t)v17);
  v51 = 1;
  v52 = sub_10016CC88((uint64_t)v17);
  v53 = 1;
  v54 = sub_10016CC90((uint64_t)v17);
  v55 = 1;
  v56 = word_100856DD0;
  v57 = 1;
  if (a1[17])
  {
    v9 = sub_10014CA64((uint64_t)&v19, (uint64_t)dword_1008563F8, &v19);
    v10 = aGhijlmnoqrstvw;
  }
  else
  {
    v9 = sub_10014CA64((uint64_t)&v20, (uint64_t)dword_1008563F8, &v20);
    v10 = a345689Bc;
  }
  v58 = v10[v9];
  v59 = 1;
  v60 = 0;
  v61 = 0;
  v62 = 0;
  v63 = 0;
  v64 = 0;
  v65 = 0;
  v66[14] = 0;
  v67 = 0;
  v68 = 0;
  v69 = 0;
  v70 = 0;
  v71 = 0;
  v72 = 0;
  v73 = 0;
  v74 = 0;
  v77 = 0;
  v80 = 0;
  v81 = 0;
  v82 = 0;
  v85 = 0;
  v86 = 0;
  v87 = 0;
  v91 = 0;
  v93 = 0;
  v94 = 0;
  v95 = 0;
  v96 = 0;
  v97 = 0;
  v98 = 0;
  v99 = 0;
  v100 = 0;
  v101 = 0;
  v102 = 0;
  v103 = 0;
  v104 = 0;
  v105 = 0;
  v110 = 0;
  v111 = 0;
  v112 = 0;
  v113 = 0;
  v114 = 0;
  v115 = 0;
  v117 = 0;
  v120 = 0;
  memset(v66, 0, 13);
  v76 = 0;
  v75 = 0;
  v79 = 0;
  v78 = 0;
  v84 = 0;
  v83 = 0;
  v88 = 0;
  v90 = 0;
  v89 = 0;
  *(_DWORD *)((char *)v92 + 3) = 0;
  v92[0] = 0;
  v107 = 0;
  v106 = 0;
  v108 = 0;
  v109 = 0;
  v116[0] = 0;
  *(_DWORD *)((char *)v116 + 3) = 0;
  v119 = 0;
  v118 = 0;
  v123 = 0;
  v121 = 0;
  v122 = 0;
  v11 = *((_QWORD *)a1 + 1);
  v12 = *(_OWORD *)(v11 + 16);
  v24 = *(_OWORD *)v11;
  v25 = v12;
  v26 = *(_QWORD *)(v11 + 32);
  v13 = a1[16];
  v21[0] = v24;
  v21[1] = v12;
  v22 = v26;
  if (v13)
    v14 = 5;
  else
    v14 = 1;
  v23 = 1;
  sub_1001625AC(a2, 1, 2, v21, v14, 0, 3, 0, &__src);
  std::mutex::unlock(&stru_100851D90);
}

void sub_100163600(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,std::random_device a31)
{
  __cxa_guard_abort(&qword_100856DD8);
  std::mutex::unlock(&stru_100851D90);
  _Unwind_Resume(a1);
}

uint64_t sub_100163678@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  int v4;
  unsigned int v5;
  uint64_t v6;
  __int128 v7;
  unsigned __int8 v9[20];
  __int128 v10[2];
  uint64_t v11;
  char v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  __int16 __src;
  char v17;
  char v18;
  char v19;
  char v20;
  char v21;
  int v22;
  char v23;
  __int16 v24;
  char v25;
  __int16 v26;
  int v27;
  char v28;
  __int16 v29;
  char v30;
  char v31;
  char v32;
  char v33;
  char v34;
  char v35;
  char v36;
  int v37;
  __int16 v38;
  char v39;
  char v40;
  char v41;
  char v42;
  char v43;
  char v44;
  __int16 v45;
  char v46;
  __int16 v47;
  char v48;
  char v49;
  char v50;
  char v51;
  char v52;
  char v53;
  char v54;
  _BYTE v55[16];
  __int16 v56;
  char v57;
  __int16 v58;
  char v59;
  char v60;
  char v61;
  char v62;
  char v63;
  int v64;
  char v65;
  char v66;
  int v67;
  char v68;
  char v69;
  char v70;
  char v71;
  uint64_t v72;
  char v73;
  char v74;
  char v75;
  char v76;
  uint64_t v77;
  int v78;
  char v79;
  char v80;
  _DWORD v81[2];
  char v82;
  char v83;
  char v84;
  char v85;
  char v86;
  char v87;
  char v88;
  char v89;
  char v90;
  char v91;
  char v92;
  char v93;
  char v94;
  int v95;
  __int16 v96;
  int v97;
  char v98;
  char v99;
  char v100;
  char v101;
  __int16 v102;
  char v103;
  char v104;
  _DWORD v105[2];
  char v106;
  int v107;
  char v108;
  char v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;

  v4 = *((_DWORD *)sub_100004784() + 144);
  if (*a1 == 5)
    v5 = 1;
  else
    v5 = 2;
  sub_10016C5A4((uint64_t)v9, v4, v5, 0);
  sub_10016C774(v9, 0, 1);
  __src = 256;
  v17 = sub_10016CC68((uint64_t)v9);
  v18 = 1;
  v19 = sub_10016CC70((uint64_t)v9);
  v20 = 1;
  v21 = sub_10016CC78((uint64_t)v9);
  v22 = 184617729;
  v23 = 1;
  v24 = 0;
  v25 = 1;
  v26 = 0;
  v27 = 65537;
  v28 = 1;
  v29 = 2;
  v30 = 1;
  v31 = 0;
  v32 = 0;
  v33 = 0;
  v34 = 0;
  v35 = *a1;
  v36 = 1;
  v37 = 0;
  v38 = 257;
  v39 = sub_10016CC80((uint64_t)v9);
  v40 = 1;
  v41 = sub_10016CC88((uint64_t)v9);
  v42 = 1;
  v43 = sub_10016CC90((uint64_t)v9);
  v44 = 1;
  v45 = 0;
  v46 = 1;
  v47 = 50;
  v48 = 1;
  v49 = 0;
  v50 = 0;
  v51 = 0;
  v52 = 0;
  v53 = 0;
  v54 = 0;
  v55[14] = 0;
  v56 = 0;
  v57 = 0;
  v58 = 0;
  v59 = 0;
  v60 = 0;
  v61 = 0;
  v62 = 0;
  v63 = 0;
  v66 = 0;
  v69 = 0;
  v70 = 0;
  v71 = 0;
  v74 = 0;
  v75 = 0;
  v76 = 0;
  v80 = 0;
  v82 = 0;
  v83 = 0;
  v84 = 0;
  v85 = 0;
  v86 = 0;
  v87 = 0;
  v88 = 0;
  v89 = 0;
  v90 = 0;
  v91 = 0;
  v92 = 0;
  v93 = 0;
  v94 = 0;
  v99 = 0;
  v100 = 0;
  v101 = 0;
  v102 = 0;
  v103 = 0;
  v104 = 0;
  v106 = 0;
  v109 = 0;
  memset(v55, 0, 13);
  v65 = 0;
  v64 = 0;
  v68 = 0;
  v67 = 0;
  v73 = 0;
  v72 = 0;
  v77 = 0;
  v79 = 0;
  v78 = 0;
  *(_DWORD *)((char *)v81 + 3) = 0;
  v81[0] = 0;
  v96 = 0;
  v95 = 0;
  v97 = 0;
  v98 = 0;
  v105[0] = 0;
  *(_DWORD *)((char *)v105 + 3) = 0;
  v108 = 0;
  v107 = 0;
  v112 = 0;
  v110 = 0;
  v111 = 0;
  v6 = *((_QWORD *)a1 + 1);
  v7 = *(_OWORD *)(v6 + 16);
  v13 = *(_OWORD *)v6;
  v14 = v7;
  v15 = *(_QWORD *)(v6 + 32);
  v10[0] = v13;
  v10[1] = v7;
  v11 = v15;
  v12 = 1;
  return sub_1001625AC(a2, 0, 2, v10, 1, 0, 3, 0, &__src);
}

uint64_t sub_100163948@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  int v4;
  unsigned int v5;
  uint64_t v6;
  __int128 v7;
  unsigned __int8 v9[20];
  __int128 v10[2];
  uint64_t v11;
  char v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  __int16 __src;
  char v17;
  char v18;
  char v19;
  char v20;
  char v21;
  int v22;
  char v23;
  __int16 v24;
  char v25;
  __int16 v26;
  int v27;
  char v28;
  __int16 v29;
  char v30;
  char v31;
  char v32;
  char v33;
  char v34;
  char v35;
  char v36;
  int v37;
  __int16 v38;
  char v39;
  char v40;
  char v41;
  char v42;
  char v43;
  char v44;
  __int16 v45;
  char v46;
  __int16 v47;
  char v48;
  char v49;
  char v50;
  char v51;
  char v52;
  char v53;
  char v54;
  _BYTE v55[16];
  __int16 v56;
  char v57;
  __int16 v58;
  char v59;
  char v60;
  char v61;
  char v62;
  char v63;
  int v64;
  char v65;
  char v66;
  int v67;
  char v68;
  char v69;
  char v70;
  char v71;
  uint64_t v72;
  char v73;
  char v74;
  char v75;
  char v76;
  uint64_t v77;
  int v78;
  char v79;
  char v80;
  _DWORD v81[2];
  char v82;
  char v83;
  char v84;
  char v85;
  char v86;
  char v87;
  char v88;
  char v89;
  char v90;
  char v91;
  char v92;
  char v93;
  char v94;
  int v95;
  __int16 v96;
  int v97;
  char v98;
  char v99;
  char v100;
  char v101;
  __int16 v102;
  char v103;
  char v104;
  _DWORD v105[2];
  char v106;
  int v107;
  char v108;
  char v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;

  v4 = *((_DWORD *)sub_100004784() + 144);
  if (*a1 == 5)
    v5 = 1;
  else
    v5 = 2;
  sub_10016C5A4((uint64_t)v9, v4, v5, 0);
  sub_10016C8A8(v9, 0, 1);
  __src = 257;
  v17 = sub_10016CC68((uint64_t)v9);
  v18 = 1;
  v19 = sub_10016CC70((uint64_t)v9);
  v20 = 1;
  v21 = sub_10016CC78((uint64_t)v9);
  v22 = 184617729;
  v23 = 1;
  v24 = 0;
  v25 = 1;
  v26 = 0;
  v27 = 65537;
  v28 = 1;
  v29 = 2;
  v30 = 1;
  v31 = 0;
  v32 = 0;
  v33 = 0;
  v34 = 0;
  v35 = *a1;
  v36 = 1;
  v37 = 0;
  v38 = 257;
  v39 = sub_10016CC80((uint64_t)v9);
  v40 = 1;
  v41 = sub_10016CC88((uint64_t)v9);
  v42 = 1;
  v43 = sub_10016CC90((uint64_t)v9);
  v44 = 1;
  v45 = 0;
  v46 = 1;
  v47 = 50;
  v48 = 1;
  v49 = 0;
  v50 = 0;
  v51 = 0;
  v52 = 0;
  v53 = 0;
  v54 = 0;
  v55[14] = 0;
  v56 = 0;
  v57 = 0;
  v58 = 0;
  v59 = 0;
  v60 = 0;
  v61 = 0;
  v62 = 0;
  v63 = 0;
  v66 = 0;
  v69 = 0;
  v70 = 0;
  v71 = 0;
  v74 = 0;
  v75 = 0;
  v76 = 0;
  v80 = 0;
  v82 = 0;
  v83 = 0;
  v84 = 0;
  v85 = 0;
  v86 = 0;
  v87 = 0;
  v88 = 0;
  v89 = 0;
  v90 = 0;
  v91 = 0;
  v92 = 0;
  v93 = 0;
  v94 = 0;
  v99 = 0;
  v100 = 0;
  v101 = 0;
  v102 = 0;
  v103 = 0;
  v104 = 0;
  v106 = 0;
  v109 = 0;
  memset(v55, 0, 13);
  v65 = 0;
  v64 = 0;
  v68 = 0;
  v67 = 0;
  v73 = 0;
  v72 = 0;
  v77 = 0;
  v79 = 0;
  v78 = 0;
  *(_DWORD *)((char *)v81 + 3) = 0;
  v81[0] = 0;
  v96 = 0;
  v95 = 0;
  v97 = 0;
  v98 = 0;
  v105[0] = 0;
  *(_DWORD *)((char *)v105 + 3) = 0;
  v108 = 0;
  v107 = 0;
  v112 = 0;
  v110 = 0;
  v111 = 0;
  v6 = *((_QWORD *)a1 + 1);
  v7 = *(_OWORD *)(v6 + 16);
  v13 = *(_OWORD *)v6;
  v14 = v7;
  v15 = *(_QWORD *)(v6 + 32);
  v10[0] = v13;
  v10[1] = v7;
  v11 = v15;
  v12 = 1;
  return sub_1001625AC(a2, 1, 2, v10, 1, 0, 3, 0, &__src);
}

uint64_t sub_100163C14@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  int v4;
  unsigned int v5;
  unsigned int v6;
  _BOOL4 v7;
  __int128 v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  __int16 v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  unsigned __int8 v20[20];
  __int128 v21;
  char v22;
  __int16 __src;
  char v24;
  char v25;
  char v26;
  char v27;
  char v28;
  _BYTE v29[7];
  _BYTE v30[3];
  _BYTE v31[5];
  __int16 v32;
  char v33;
  char v34;
  char v35;
  char v36;
  char v37;
  __int16 v38;
  int v39;
  __int16 v40;
  char v41;
  char v42;
  char v43;
  char v44;
  char v45;
  __int16 v46;
  char v47;
  __int16 v48;
  char v49;
  char v50;
  char v51;
  __int16 v52;
  char v53;
  __int16 v54;
  char v55;
  int v56;
  char v57;
  char v58;
  char v59;
  char v60;
  __int16 v61;
  int v62;
  char v63;
  __int16 v64;
  __int128 v65;
  _BYTE v66[3];
  char v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  char v71;
  char v72;
  char v73;
  int v74;
  char v75;
  char v76;
  int v77;
  char v78;
  char v79;
  char v80;
  char v81;
  uint64_t v82;
  char v83;
  char v84;
  char v85;
  char v86;
  uint64_t v87;
  int v88;
  char v89;
  char v90;
  _DWORD v91[2];
  char v92;
  char v93;
  char v94;
  char v95;
  char v96;
  char v97;
  char v98;
  char v99;
  char v100;
  char v101;
  char v102;
  char v103;
  char v104;
  int v105;
  __int16 v106;
  int v107;
  char v108;
  char v109;
  char v110;
  char v111;
  __int16 v112;
  char v113;
  char v114;
  _DWORD v115[2];
  char v116;
  int v117;
  char v118;
  char v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;

  v4 = *((_DWORD *)sub_100004784() + 144);
  v5 = a1[11];
  if (*a1 == 5)
    v6 = 1;
  else
    v6 = 2;
  sub_10016C5A4((uint64_t)v20, v4, v6, 0);
  if (a1[87])
    v7 = a1[86] != 0;
  else
    v7 = v4 == 201 && v5 == 4;
  sub_10016CAD0(v20, v7, a1[85]);
  __src = 256;
  v24 = sub_10016CC68((uint64_t)v20);
  v25 = 1;
  v26 = sub_10016CC70((uint64_t)v20);
  v27 = 1;
  v28 = sub_10016CC78((uint64_t)v20);
  *(_DWORD *)v29 = 201395201;
  *(_WORD *)&v29[4] = 1;
  *(_WORD *)v30 = 0;
  *(_DWORD *)v31 = 201395200;
  v31[4] = 1;
  v32 = 7;
  v33 = 1;
  v34 = 0;
  v35 = 0;
  v36 = 0;
  v37 = 0;
  v38 = 0;
  v39 = *((_DWORD *)a1 + 23);
  v40 = 0;
  v41 = sub_10016CC80((uint64_t)v20);
  v42 = 1;
  v43 = sub_10016CC88((uint64_t)v20);
  v44 = 1;
  v45 = sub_10016CC90((uint64_t)v20);
  v46 = 1;
  v47 = 0;
  LOBYTE(v48) = 0;
  v49 = 0;
  v50 = 0;
  v51 = 0;
  LOBYTE(v52) = 0;
  v53 = 0;
  LOBYTE(v54) = 0;
  v55 = 0;
  v56 = 0;
  v57 = sub_1001640F8(v5);
  v58 = 1;
  v59 = *a1;
  v60 = 1;
  v61 = *(_WORD *)(a1 + 1);
  v62 = 256;
  v63 = 1;
  v64 = 256;
  v65 = *(_OWORD *)(a1 + 60);
  *(_WORD *)v66 = 1;
  v67 = 0;
  v70 = *((_QWORD *)a1 + 5);
  v9 = *(_OWORD *)(a1 + 24);
  v68 = *(_OWORD *)(a1 + 8);
  v69 = v9;
  v71 = 1;
  v72 = 0;
  v73 = 0;
  v76 = 0;
  v79 = 0;
  v80 = 0;
  v81 = 0;
  v84 = 0;
  v85 = 0;
  v86 = 0;
  v90 = 0;
  v92 = 0;
  v93 = 0;
  v94 = 0;
  v95 = 0;
  v96 = 0;
  v97 = 0;
  v98 = 0;
  v99 = 0;
  v100 = 0;
  v101 = 0;
  v102 = 0;
  v103 = 0;
  v104 = 0;
  v109 = 0;
  v110 = 0;
  v111 = 0;
  v112 = 0;
  v113 = 0;
  v114 = 0;
  v116 = 0;
  v119 = 0;
  v75 = 0;
  v74 = 0;
  v78 = 0;
  v77 = 0;
  v83 = 0;
  v82 = 0;
  v87 = 0;
  v89 = 0;
  v88 = 0;
  *(_DWORD *)((char *)v91 + 3) = 0;
  v91[0] = 0;
  v106 = 0;
  v105 = 0;
  v107 = 0;
  v108 = 0;
  v115[0] = 0;
  *(_DWORD *)((char *)v115 + 3) = 0;
  v117 = 0;
  v118 = 0;
  v121 = 0;
  v120 = 0;
  v122 = 0;
  v10 = *((_DWORD *)a1 + 14);
  if (!v10)
    sub_1003CF970();
  if (!v31[4])
    sub_1003CF998();
  if (!v31[2])
    sub_1003CF9C0();
  if (v31[1] <= 0xBu)
    sub_1003CF9E8();
  if (v31[3] <= 0xBu)
    sub_1003CFA10();
  v11 = a1[11];
  if (v11 == 4)
  {
    v12 = *((_DWORD *)a1 + 20);
    if (v12 - 11 <= 0xFFFFFFF5)
      sub_1003CFA88();
    v13 = sub_10014C3E0(v10, v12, (unint64_t)v31[1] >> 2, (unint64_t)v31[3] >> 2);
    if (!v53)
      v53 = 1;
    v14 = *((_DWORD *)a1 + 20);
    v52 = v13;
    if (!v55)
      v55 = 1;
    v54 = v13;
    if (!BYTE1(v56))
      BYTE1(v56) = 1;
    LOBYTE(v56) = v14;
    if (!HIBYTE(v56))
      HIBYTE(v56) = 1;
    BYTE2(v56) = v14;
  }
  else
  {
    if (v11 != 5)
    {
      if (v11 <= 3)
        sub_1003CFA60();
      sub_1003CFA38();
    }
    if (*((_DWORD *)a1 + 20) != 1)
      sub_1003CFAB0();
  }
  if (a1[88])
  {
    if (!v67)
      v67 = 1;
    *(_WORD *)&v66[1] = 1024;
    v48 = 150;
    v49 = 1;
  }
  else if (a1[89])
  {
    if (!v30[0])
      v30[0] = 1;
    *(_WORD *)&v29[5] = 768;
    if (!v31[0])
      v31[0] = 1;
    *(_WORD *)&v30[1] = 768;
    *(_DWORD *)&v31[1] = 18874656;
    *(_DWORD *)&v29[1] = 17367305;
  }
  else
  {
    if (!v30[0])
      v30[0] = 1;
    *(_WORD *)&v29[5] = 0;
    if (!v31[0])
      v31[0] = 1;
    *(_WORD *)&v30[1] = 0;
  }
  v16 = *((_DWORD *)a1 + 12);
  v15 = *((_DWORD *)a1 + 13);
  v17 = a1[90];
  if (a1[84] && sub_100360E2C(v4))
  {
    LOWORD(v62) = 264;
    v18 = 1;
  }
  else
  {
    v18 = 0;
  }
  LOBYTE(v21) = 0;
  v22 = 0;
  return sub_1001625AC(a2, 0, 4, &v21, v15, v17 != 0, v16, v18, &__src);
}

unint64_t sub_1001640F8(unsigned int a1)
{
  if (a1 >= 6)
    sub_1003CFAD8();
  return (0x40403020100uLL >> (8 * a1)) & 7;
}

uint64_t sub_100164128@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  char v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  __int16 v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  int v12;
  int v13;
  int v14;
  int v15;
  unsigned __int8 v17[20];
  __int128 v18;
  char v19;
  __int16 __src;
  char v21;
  char v22;
  char v23;
  char v24;
  char v25;
  _BYTE v26[5];
  __int16 v27;
  char v28;
  __int16 v29;
  _BYTE v30[5];
  __int16 v31;
  char v32;
  char v33;
  char v34;
  char v35;
  char v36;
  __int16 v37;
  int v38;
  uint64_t v39;
  char v40;
  char v41;
  __int16 v42;
  char v43;
  char v44;
  char v45;
  __int16 v46;
  char v47;
  __int16 v48;
  char v49;
  int v50;
  char v51;
  char v52;
  char v53;
  char v54;
  __int16 v55;
  int v56;
  char v57;
  char v58;
  char v59;
  __int128 v60;
  _BYTE v61[3];
  char v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  char v66;
  char v67;
  char v68;
  int v69;
  char v70;
  char v71;
  int v72;
  char v73;
  char v74;
  char v75;
  char v76;
  uint64_t v77;
  char v78;
  char v79;
  char v80;
  char v81;
  uint64_t v82;
  int v83;
  char v84;
  char v85;
  _DWORD v86[2];
  char v87;
  char v88;
  char v89;
  char v90;
  char v91;
  char v92;
  char v93;
  char v94;
  char v95;
  char v96;
  char v97;
  char v98;
  char v99;
  int v100;
  __int16 v101;
  int v102;
  char v103;
  char v104;
  char v105;
  char v106;
  __int16 v107;
  char v108;
  char v109;
  _DWORD v110[2];
  char v111;
  int v112;
  char v113;
  char v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;

  if (a1[77])
    v4 = a1[76];
  else
    v4 = -1;
  v5 = *((_DWORD *)sub_100004784() + 144);
  v6 = a1[11];
  if (*a1 == 5)
    v7 = 1;
  else
    v7 = 2;
  sub_10016C5A4((uint64_t)v17, v5, v7, 0);
  sub_10016CB04(v17, 0, a1[85]);
  v8 = 0;
  v9 = *((int *)a1 + 13);
  if (v9 <= 6)
    v8 = word_10046D4A8[v9];
  if (*((_DWORD *)sub_100004784() + 186) == 1)
    v8 |= 0x20u;
  __src = 257;
  v21 = sub_10016CC68((uint64_t)v17);
  v22 = 1;
  v23 = sub_10016CC70((uint64_t)v17);
  v24 = 1;
  v25 = sub_10016CC78((uint64_t)v17);
  *(_DWORD *)v26 = 201395201;
  v26[4] = 1;
  v27 = 0;
  v28 = 1;
  v29 = 0;
  *(_DWORD *)v30 = 201395201;
  v30[4] = 1;
  v31 = v8;
  v32 = 1;
  v33 = 0;
  v34 = 0;
  v35 = 0;
  v36 = 0;
  v37 = 0;
  v38 = *((_DWORD *)a1 + 23);
  v41 = 0;
  LOBYTE(v42) = 0;
  v43 = 0;
  v44 = 0;
  v45 = 0;
  v40 = 0;
  v39 = 0;
  v46 = 30;
  v47 = 1;
  v48 = 5000;
  v49 = 1;
  v50 = 18874625;
  v51 = sub_1001640F8(v6);
  v52 = 1;
  v53 = *a1;
  v54 = 1;
  v55 = *(_WORD *)(a1 + 1);
  v56 = 256;
  v57 = 1;
  v58 = v4;
  v59 = 1;
  v60 = *(_OWORD *)(a1 + 60);
  *(_WORD *)v61 = 1;
  v62 = 0;
  v10 = *(_OWORD *)(a1 + 8);
  v11 = *(_OWORD *)(a1 + 24);
  v65 = *((_QWORD *)a1 + 5);
  v63 = v10;
  v64 = v11;
  v66 = 1;
  v67 = 0;
  v68 = 0;
  v71 = 0;
  v74 = 0;
  v75 = 0;
  v76 = 0;
  v79 = 0;
  v80 = 0;
  v81 = 0;
  v85 = 0;
  v87 = 0;
  v88 = 0;
  v89 = 0;
  v90 = 0;
  v91 = 0;
  v92 = 0;
  v93 = 0;
  v94 = 0;
  v95 = 0;
  v96 = 0;
  v97 = 0;
  v98 = 0;
  v99 = 0;
  v104 = 0;
  v105 = 0;
  v106 = 0;
  v107 = 0;
  v108 = 0;
  v109 = 0;
  v111 = 0;
  v114 = 0;
  v70 = 0;
  v69 = 0;
  v73 = 0;
  v72 = 0;
  v78 = 0;
  v77 = 0;
  v82 = 0;
  v84 = 0;
  v83 = 0;
  *(_DWORD *)((char *)v86 + 3) = 0;
  v86[0] = 0;
  v101 = 0;
  v100 = 0;
  v102 = 0;
  v103 = 0;
  v110[0] = 0;
  *(_DWORD *)((char *)v110 + 3) = 0;
  v112 = 0;
  v113 = 0;
  v116 = 0;
  v115 = 0;
  v117 = 0;
  if (a1[88])
  {
    v62 = 1;
    *(_WORD *)&v61[1] = 1024;
    v42 = 150;
    v43 = 1;
  }
  else if (a1[89])
  {
    if (!v28)
      v28 = 1;
    v27 = 768;
    if (!v30[0])
      v30[0] = 1;
    v29 = 768;
    *(_DWORD *)&v30[1] = 18874656;
    *(_DWORD *)&v26[1] = 17367305;
  }
  else
  {
    if (!v28)
      v28 = 1;
    v27 = 0;
    if (!v30[0])
      v30[0] = 1;
    v29 = 0;
  }
  v12 = a1[90];
  v13 = *((_DWORD *)a1 + 12);
  v14 = *((_DWORD *)a1 + 13);
  if (a1[84] && sub_100360E2C(v5))
  {
    LOWORD(v56) = 264;
    v15 = 1;
  }
  else
  {
    v15 = 0;
  }
  LOBYTE(v18) = 0;
  v19 = 0;
  return sub_1001625AC(a2, 1, 4, &v18, v14, v12 != 0, v13, v15, &__src);
}

__n128 sub_100164520@<Q0>(int *a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, unsigned __int8 *a4@<X3>, uint64_t a5@<X8>)
{
  char v6;
  __int16 v9;
  __int16 v10;
  int v11;
  BOOL v12;
  char v13;
  char v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  char v24;
  unsigned int v25;
  int v26;
  __n128 result;
  __int128 v29;
  int v30;
  __int128 v31;
  char v32;
  __int128 __src;
  _BYTE v34[5];
  char v35;
  __int16 v36;
  char v37;
  char v38;
  char v39;
  char v40;
  char v41;
  char v42;
  char v43;
  int v44;
  uint64_t v45;
  char v46;
  char v47;
  char v48;
  char v49;
  char v50;
  char v51;
  char v52;
  char v53;
  char v54;
  char v55;
  _BYTE v56[16];
  __int16 v57;
  char v58;
  __int16 v59;
  char v60;
  char v61;
  char v62;
  char v63;
  char v64;
  char v65;
  char v66;
  char v67;
  char v68;
  int v69;
  char v70;
  int v71;
  __int16 v72;
  char v73;
  __int16 v74;
  char v75;
  char v76;
  char v77;
  char v78;
  char v79;
  char v80;
  char v81;
  char v82;
  char v83;
  int v84;
  unsigned __int8 v85;
  int v86;
  unsigned __int8 v87;
  __int16 v88;
  char v89;
  char v90;
  char v91;
  char v92;
  char v93;
  char v94;
  int v95;
  char v96;
  char v97;
  _DWORD v98[2];
  char v99;
  char v100;
  char v101;
  char v102;
  char v103;
  char v104;
  char v105;
  char v106;
  char v107;
  char v108;
  char v109;
  char v110;
  char v111;
  int v112;
  __int16 v113;
  int v114;
  char v115;
  char v116;
  char v117;
  char v118;
  __int16 v119;
  char v120;
  char v121;
  _DWORD v122[2];
  char v123;
  int v124;
  char v125;
  char v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;

  v6 = a2;
  if (a2 != 102 && a2 != 106)
    sub_1003CFB00();
  if (*a4)
  {
    if (!a4[2])
      sub_1003CFCE0();
    if (!a4[3])
      sub_1003CFD08();
LABEL_9:
    if (!a4[8])
      sub_1003CFC68();
    if (!a4[16])
      sub_1003CFC90();
    v9 = 1;
    goto LABEL_12;
  }
  if (a4[2])
    sub_1003CFCB8();
  if (a4[3])
    goto LABEL_9;
  if (a4[8])
    sub_1003CFC40();
  v9 = a4[16];
  if (a4[16])
    sub_1003CFC18();
LABEL_12:
  if (a4[27])
    v9 |= 2u;
  if (a4[28])
    v10 = v9 | 4;
  else
    v10 = v9;
  if (*((_BYTE *)a1 + 18))
  {
    if (*((_BYTE *)a1 + 16))
    {
      v10 |= 0xC0u;
      v11 = *((unsigned __int8 *)a1 + 17);
      v12 = v11 != 0;
      v13 = v11 - 1;
      if (v12)
        v14 = v13;
      else
        v14 = 0;
    }
    else
    {
      v14 = 0;
      v10 |= 0x80u;
    }
  }
  else
  {
    v14 = 0;
  }
  v15 = *a1;
  v16 = *((_DWORD *)sub_100004784() + 144);
  v23 = sub_10036C348(*((unsigned __int8 *)a1 + 4), 1, v17, v18, v19, v20, v21, v22);
  v24 = v23;
  if (v23 == 5)
    v25 = 1;
  else
    v25 = 2;
  sub_10016C5A4((uint64_t)&v29, v16, v25, 0);
  if (a4[20])
  {
    if (!a4[22])
      sub_1003CFBA0();
    if (!a4[24])
      sub_1003CFBC8();
    if (!a4[26])
      sub_1003CFBF0();
    sub_10016CBDC((unsigned __int8 *)&v29, a4[21], a4[23], a4[25], 0, 0, 0);
  }
  else
  {
    if (a4[22])
      sub_1003CFB78();
    if (a4[24])
      sub_1003CFB50();
    if (a4[26])
      sub_1003CFB28();
    sub_1001649CC(v25, (uint64_t)&__src);
    v29 = __src;
    v30 = *(_DWORD *)v34;
  }
  LOBYTE(__src) = *a4;
  BYTE1(__src) = 1;
  BYTE2(__src) = sub_10016CC68((uint64_t)&v29);
  BYTE3(__src) = 1;
  BYTE4(__src) = sub_10016CC70((uint64_t)&v29);
  BYTE5(__src) = 1;
  BYTE6(__src) = sub_10016CC78((uint64_t)&v29);
  BYTE7(__src) = 1;
  BYTE8(__src) = sub_10036B5AC(*((unsigned __int8 *)a1 + 5), 1);
  BYTE9(__src) = 1;
  BYTE10(__src) = sub_10036B5AC(*((unsigned __int8 *)a1 + 5), 1);
  *(_WORD *)((char *)&__src + 11) = 1;
  HIWORD(__src) = 0;
  *(_DWORD *)&v34[1] = 0;
  v35 = 0;
  v36 = v10;
  v37 = 1;
  v38 = 0;
  v39 = 0;
  v40 = 0;
  v41 = 0;
  v42 = v24;
  v43 = 1;
  v44 = *((_DWORD *)a4 + 8);
  v47 = 0;
  v48 = 0;
  v49 = 0;
  v50 = 0;
  v51 = 0;
  v52 = 0;
  v53 = 0;
  v54 = 0;
  v55 = 0;
  v56[14] = 0;
  v57 = 0;
  v58 = 0;
  v59 = 0;
  v60 = 0;
  v61 = 0;
  v62 = 0;
  v63 = 0;
  v64 = 0;
  v46 = 0;
  v45 = 0;
  memset(v56, 0, 13);
  v65 = v6;
  v66 = 1;
  v67 = sub_10036B5AC(*((unsigned __int8 *)a1 + 5), 1);
  v68 = 1;
  v69 = v15;
  v70 = 1;
  v71 = 16777472;
  v72 = *((_WORD *)a1 + 3);
  v73 = 1;
  v74 = *((_WORD *)a1 + 4);
  v75 = 1;
  v76 = *((_BYTE *)a1 + 10);
  v77 = 1;
  v78 = *((_BYTE *)a1 + 11);
  v79 = 1;
  v80 = *((_BYTE *)a1 + 12);
  v81 = 1;
  v82 = *((_BYTE *)a1 + 13);
  v83 = 1;
  v84 = *((_DWORD *)a4 + 1);
  v85 = a4[8];
  v86 = *((_DWORD *)a4 + 3);
  v87 = a4[16];
  v88 = *(_WORD *)(a4 + 1);
  v89 = *((_BYTE *)a1 + 14);
  v90 = 1;
  v91 = *((_BYTE *)a1 + 15);
  v92 = 1;
  v93 = v14;
  v94 = 1;
  v97 = 0;
  v99 = 0;
  v100 = 0;
  v101 = 0;
  v102 = 0;
  v103 = 0;
  v104 = 0;
  v105 = 0;
  v106 = 0;
  v107 = 0;
  v108 = 0;
  v109 = 0;
  v110 = 0;
  v111 = 0;
  v116 = 0;
  v117 = 0;
  v118 = 0;
  v119 = 0;
  v120 = 0;
  v121 = 0;
  v123 = 0;
  v126 = 0;
  v96 = 0;
  v95 = 0;
  *(_DWORD *)((char *)v98 + 3) = 0;
  v98[0] = 0;
  v113 = 0;
  v112 = 0;
  v115 = 0;
  v114 = 0;
  *(_DWORD *)((char *)v122 + 3) = 0;
  v122[0] = 0;
  v124 = 0;
  v125 = 0;
  v129 = 0;
  v127 = 0;
  v128 = 0;
  v26 = *a4;
  LOBYTE(v31) = 0;
  v32 = 0;
  sub_1001625AC(a5, v26, 3, &v31, 1, 0, 2, 0, &__src);
  *(_OWORD *)(a5 + 68) = *(_OWORD *)a3;
  result = *(__n128 *)(a3 + 9);
  *(__n128 *)(a5 + 77) = result;
  return result;
}

uint64_t sub_1001649CC@<X0>(unsigned int a1@<W0>, uint64_t a2@<X8>)
{
  _DWORD *v4;
  unsigned __int8 *v5;

  v4 = sub_100004784();
  v5 = (unsigned __int8 *)sub_10016C5A4(a2, v4[144], a1, 0);
  return sub_10016CB6C(v5, 0);
}

uint64_t sub_100164A08@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  int v4;
  _BOOL4 v5;
  _BOOL4 v6;
  __int16 v7;
  __int16 v8;
  __int16 v9;
  unsigned int v10;
  _DWORD *v11;
  uint64_t v12;
  char v13;
  int v14;
  int v15;
  int v16;
  unsigned __int8 v18[20];
  __int128 v19;
  char v20;
  __int16 __src;
  char v22;
  char v23;
  char v24;
  char v25;
  char v26;
  int v27;
  __int16 v28;
  __int16 v29;
  int v30;
  char v31;
  __int16 v32;
  char v33;
  char v34;
  char v35;
  char v36;
  char v37;
  __int16 v38;
  int v39;
  uint64_t v40;
  char v41;
  char v42;
  char v43;
  char v44;
  char v45;
  char v46;
  char v47;
  char v48;
  char v49;
  char v50;
  _BYTE v51[16];
  __int16 v52;
  char v53;
  __int16 v54;
  char v55;
  char v56;
  char v57;
  char v58;
  char v59;
  int v60;
  char v61;
  char v62;
  int v63;
  char v64;
  char v65;
  char v66;
  char v67;
  uint64_t v68;
  char v69;
  char v70;
  char v71;
  char v72;
  uint64_t v73;
  char v74;
  __int16 v75;
  char v76;
  int v77;
  char v78;
  int v79;
  __int16 v80;
  __int16 v81;
  char v82;
  __int16 v83;
  char v84;
  __int16 v85;
  char v86;
  int v87;
  __int16 v88;
  char v89;
  __int16 v90;
  char v91;
  uint64_t v92;
  char v93;
  uint64_t v94;
  char v95;
  int v96;
  __int16 v97;
  int v98;
  char v99;
  char v100;
  char v101;
  char v102;
  __int16 v103;
  char v104;
  char v105;
  _DWORD v106[2];
  char v107;
  int v108;
  char v109;
  char v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;

  v4 = a1[52] | a1[53];
  v5 = a1[49] == 0;
  v6 = a1[51] == 0;
  if (v4)
  {
    v5 = 1;
    v6 = 1;
  }
  if (v5)
    v7 = 0;
  else
    v7 = 8;
  if (a1[50])
    v7 |= 6u;
  if (v6)
    v8 = 0;
  else
    v8 = 16;
  v9 = v7 | v8;
  if (*a1 == 5)
    v10 = 1;
  else
    v10 = 2;
  v11 = sub_100004784();
  sub_10016C5A4((uint64_t)v18, v11[144], v10, 0);
  sub_10016CBA4(v18, 0, a1[48]);
  __src = 256;
  v22 = sub_10016CC68((uint64_t)v18);
  v23 = 1;
  v24 = sub_10016CC70((uint64_t)v18);
  v25 = 1;
  v26 = sub_10016CC78((uint64_t)v18);
  v27 = 184617729;
  v28 = 1;
  v29 = 0;
  v30 = 0;
  v31 = 0;
  v32 = v9;
  v33 = 1;
  v34 = 0;
  v35 = 0;
  v36 = 0;
  v37 = 0;
  v38 = 0;
  v39 = *((_DWORD *)a1 + 14);
  v42 = 0;
  v43 = 0;
  v44 = 0;
  v45 = 0;
  v46 = 0;
  v47 = 0;
  v48 = 0;
  v49 = 0;
  v50 = 0;
  v51[14] = 0;
  v52 = 0;
  v53 = 0;
  v54 = 0;
  v55 = 0;
  v56 = 0;
  v57 = 0;
  v58 = 0;
  v59 = 0;
  v62 = 0;
  v65 = 0;
  v66 = 0;
  v67 = 0;
  v70 = 0;
  v71 = 0;
  v72 = 0;
  v41 = 0;
  v40 = 0;
  memset(v51, 0, 13);
  v61 = 0;
  v60 = 0;
  v64 = 0;
  v63 = 0;
  v68 = 0;
  v69 = 0;
  v73 = 0;
  v74 = *a1;
  v75 = 2817;
  v76 = 1;
  v77 = *((_DWORD *)a1 + 1);
  v78 = 1;
  v79 = 16908546;
  v80 = 258;
  v81 = *((_WORD *)a1 + 4);
  v82 = 1;
  v83 = *((_WORD *)a1 + 5);
  v84 = 1;
  v85 = *((_WORD *)a1 + 6);
  v86 = 1;
  v87 = *(_DWORD *)(a1 + 14);
  v88 = *((_WORD *)a1 + 9);
  v89 = 1;
  v90 = 76;
  v91 = 1;
  v12 = *((_QWORD *)a1 + 4);
  v92 = *((_QWORD *)a1 + 3);
  v93 = 1;
  v94 = v12;
  v95 = 1;
  v100 = 0;
  v101 = 0;
  v102 = 0;
  v103 = 0;
  v104 = 0;
  v105 = 0;
  v107 = 0;
  v110 = 0;
  v97 = 0;
  v96 = 0;
  v99 = 0;
  v98 = 0;
  *(_DWORD *)((char *)v106 + 3) = 0;
  v106[0] = 0;
  v109 = 0;
  v108 = 0;
  v112 = 0;
  v111 = 0;
  v113 = 0;
  if (v4)
  {
    if (a1[52])
      v13 = 3;
    else
      v13 = 0;
    BYTE1(v96) = 1;
    LOBYTE(v96) = v13;
    v97 = a1[55] | 0x100;
    HIWORD(v96) = a1[54] | 0x100;
    v14 = 6;
  }
  else
  {
    v14 = 5;
  }
  v16 = *((_DWORD *)a1 + 10);
  v15 = *((_DWORD *)a1 + 11);
  LOBYTE(v19) = 0;
  v20 = 0;
  return sub_1001625AC(a2, 0, v14, &v19, v15, 0, v16, 0, &__src);
}

uint64_t sub_100164D58@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  int v4;
  _BOOL4 v5;
  _BOOL4 v6;
  __int16 v7;
  __int16 v8;
  __int16 v9;
  unsigned int v10;
  _DWORD *v11;
  uint64_t v12;
  char v13;
  int v14;
  int v15;
  int v16;
  _BYTE v18[20];
  __int128 v19;
  char v20;
  __int16 __src;
  char v22;
  char v23;
  char v24;
  char v25;
  char v26;
  char v27;
  int v28;
  char v29;
  __int16 v30;
  int v31;
  char v32;
  __int16 v33;
  char v34;
  char v35;
  char v36;
  char v37;
  char v38;
  __int16 v39;
  int v40;
  uint64_t v41;
  char v42;
  char v43;
  char v44;
  char v45;
  char v46;
  char v47;
  char v48;
  char v49;
  char v50;
  char v51;
  _BYTE v52[16];
  __int16 v53;
  char v54;
  __int16 v55;
  char v56;
  char v57;
  char v58;
  char v59;
  char v60;
  int v61;
  char v62;
  char v63;
  int v64;
  char v65;
  char v66;
  char v67;
  char v68;
  uint64_t v69;
  char v70;
  char v71;
  char v72;
  char v73;
  uint64_t v74;
  char v75;
  __int16 v76;
  char v77;
  int v78;
  char v79;
  int v80;
  __int16 v81;
  __int16 v82;
  char v83;
  __int16 v84;
  char v85;
  __int16 v86;
  char v87;
  int v88;
  __int16 v89;
  char v90;
  __int16 v91;
  char v92;
  uint64_t v93;
  char v94;
  uint64_t v95;
  char v96;
  int v97;
  __int16 v98;
  int v99;
  char v100;
  char v101;
  char v102;
  char v103;
  __int16 v104;
  char v105;
  char v106;
  _DWORD v107[2];
  char v108;
  int v109;
  char v110;
  char v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;

  v4 = a1[52] | a1[53];
  v5 = a1[49] == 0;
  v6 = a1[51] == 0;
  if (v4)
  {
    v5 = 1;
    v6 = 1;
  }
  if (v5)
    v7 = 0;
  else
    v7 = 8;
  if (a1[50])
    v7 |= 6u;
  if (v6)
    v8 = 0;
  else
    v8 = 16;
  v9 = v7 | v8;
  if (*a1 == 5)
    v10 = 1;
  else
    v10 = 2;
  v11 = sub_100004784();
  sub_10016C5A4((uint64_t)v18, v11[144], v10, 0);
  sub_10016CBD8((uint64_t)v18, 0, a1[48]);
  __src = 257;
  v22 = sub_10016CC68((uint64_t)v18);
  v23 = 1;
  v24 = sub_10016CC70((uint64_t)v18);
  v25 = 1;
  v26 = sub_10016CC78((uint64_t)v18);
  v27 = 1;
  v30 = 0;
  v28 = 0;
  v29 = 0;
  v31 = 0;
  v32 = 0;
  v33 = v9;
  v34 = 1;
  v35 = 0;
  v36 = 0;
  v37 = 0;
  v38 = 0;
  v39 = 0;
  v40 = *((_DWORD *)a1 + 14);
  v43 = 0;
  v44 = 0;
  v45 = 0;
  v46 = 0;
  v47 = 0;
  v48 = 0;
  v49 = 0;
  v50 = 0;
  v51 = 0;
  v52[14] = 0;
  v53 = 0;
  v54 = 0;
  v55 = 0;
  v56 = 0;
  v57 = 0;
  v58 = 0;
  v59 = 0;
  v60 = 0;
  v63 = 0;
  v66 = 0;
  v67 = 0;
  v68 = 0;
  v71 = 0;
  v72 = 0;
  v73 = 0;
  v42 = 0;
  v41 = 0;
  memset(v52, 0, 13);
  v62 = 0;
  v61 = 0;
  v65 = 0;
  v64 = 0;
  v69 = 0;
  v70 = 0;
  v74 = 0;
  v75 = *a1;
  v76 = 2817;
  v77 = 1;
  v78 = *((_DWORD *)a1 + 1);
  v79 = 1;
  v80 = 16908546;
  v81 = 258;
  v82 = *((_WORD *)a1 + 4);
  v83 = 1;
  v84 = *((_WORD *)a1 + 5);
  v85 = 1;
  v86 = *((_WORD *)a1 + 6);
  v87 = 1;
  v88 = *(_DWORD *)(a1 + 14);
  v89 = *((_WORD *)a1 + 9);
  v90 = 1;
  v91 = 76;
  v92 = 1;
  v12 = *((_QWORD *)a1 + 4);
  v93 = *((_QWORD *)a1 + 3);
  v94 = 1;
  v95 = v12;
  v96 = 1;
  v101 = 0;
  v102 = 0;
  v103 = 0;
  v104 = 0;
  v105 = 0;
  v106 = 0;
  v108 = 0;
  v111 = 0;
  v98 = 0;
  v97 = 0;
  v100 = 0;
  v99 = 0;
  *(_DWORD *)((char *)v107 + 3) = 0;
  v107[0] = 0;
  v110 = 0;
  v109 = 0;
  v113 = 0;
  v112 = 0;
  v114 = 0;
  if (v4)
  {
    if (a1[52])
      v13 = 3;
    else
      v13 = 0;
    BYTE1(v97) = 1;
    LOBYTE(v97) = v13;
    v98 = a1[55] | 0x100;
    HIWORD(v97) = a1[54] | 0x100;
    v14 = 6;
  }
  else
  {
    v14 = 5;
  }
  v16 = *((_DWORD *)a1 + 10);
  v15 = *((_DWORD *)a1 + 11);
  LOBYTE(v19) = 0;
  v20 = 0;
  return sub_1001625AC(a2, 1, v14, &v19, v15, 0, v16, 0, &__src);
}

uint64_t sub_1001650A4@<X0>(char *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  int v5;
  void *v6;
  int v7;
  int v8;
  BOOL v9;
  char v10;
  BOOL v11;
  char v12;
  char v13;
  char v14;
  int v15;
  __int16 *v16;
  int v17;
  __int16 v18;
  __int16 *v19;
  __int16 v20;
  char *v21;
  unsigned int v22;
  unsigned int v23;
  char v24;
  std::random_device::result_type v25;
  uint64_t i;
  unsigned __int16 *v27;
  unsigned __int8 v28;
  char v29;
  char v30;
  BOOL v31;
  char v32;
  char v33;
  char v34;
  _BOOL4 v35;
  char v36;
  char v37;
  char v38;
  __int16 v39;
  char v40;
  char v41;
  __int16 *v42;
  char v43;
  char v44;
  __int16 v45;
  __int16 *v46;
  unsigned __int8 v47;
  int v48;
  unsigned __int8 v49;
  unsigned __int8 v50;
  __int16 v51;
  __int16 *v52;
  _BYTE *v53;
  unsigned __int8 v54;
  unsigned __int8 v55;
  int v56;
  int v57;
  __int16 v58;
  NSObject *v59;
  unsigned __int8 v60;
  char v62;
  char v63;
  char v64;
  void *__p;
  void *v67;
  _BYTE *v68;
  unsigned __int8 v69[20];
  std::random_device v70;
  __int128 v71[2];
  char v72;
  std::random_device::result_type __src;
  char v74;
  char v75;
  char v76;
  char v77;
  int v78;
  char v79;
  __int16 v80;
  _BYTE v81[7];
  char v82;
  char v83;
  char v84;
  char v85;
  char v86;
  char v87;
  char v88;
  int v89;
  __int16 v90;
  int v91;
  char v92;
  __int16 v93;
  char v94;
  __int16 v95;
  char v96;
  uint64_t v97;
  char v98;
  char v99;
  char v100;
  char v101;
  char v102;
  _BYTE v103[16];
  __int16 v104;
  char v105;
  __int16 v106;
  char v107;
  char v108;
  char v109;
  __int16 v110;
  char v111;
  int v112;
  char v113;
  char v114;
  int v115;
  char v116;
  char v117;
  char v118;
  char v119;
  uint64_t v120;
  char v121;
  char v122;
  char v123;
  char v124;
  uint64_t v125;
  int v126;
  char v127;
  char v128;
  _DWORD v129[2];
  char v130;
  char v131;
  char v132;
  char v133;
  char v134;
  char v135;
  char v136;
  char v137;
  char v138;
  char v139;
  char v140;
  char v141;
  char v142;
  int v143;
  __int16 v144;
  char v145;
  char v146;
  char v147;
  char v148;
  __int16 v149;
  char v150;
  __int16 v151;
  char v152;
  char v153;
  _BYTE v154[3];
  char v155;
  int v156;
  __int16 v157;
  __int16 v158;
  char v159;
  __int16 v160;
  char v161;
  _BYTE v162[3];
  char v163;
  _DWORD v164[6];
  uint64_t v165;

  v5 = *((_DWORD *)sub_100004784() + 144);
  v6 = sub_100004784();
  v7 = sub_100395658((uint64_t)v6);
  sub_10016C5A4((uint64_t)v69, v5, 2u, v7);
  v8 = a1[43];
  v9 = a1[43] != 0;
  if (a1[43])
    v10 = a1[47];
  else
    v10 = 0;
  if (a1[48])
    v11 = 0;
  else
    v11 = a1[43] != 0;
  if (a2)
    v12 = 85;
  else
    v12 = 51;
  if (v11 && a1[47] == 0)
    v13 = v12;
  else
    v13 = v10;
  v64 = v13;
  sub_10016CB38(v69, v8, a1[45]);
  if (a1[46])
    v14 = v9;
  else
    v14 = 1;
  if ((v14 & 1) != 0)
  {
LABEL_17:
    v15 = 0;
    goto LABEL_22;
  }
  if (!a1[15] || !a1[13] || !a1[17])
  {
    v59 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
      sub_1003CFD80(v59);
    goto LABEL_17;
  }
  v15 = 1;
LABEL_22:
  v16 = (__int16 *)(a1 + 22);
  if (!a1[24])
    v16 = &word_100855A1A;
  v17 = (unsigned __int16)*v16;
  v18 = sub_10036C674(v17 | 0x10000u);
  v19 = (__int16 *)(a1 + 18);
  if (!a1[20])
    v19 = &word_100855A14;
  v20 = *v19;
  if (a1[68])
  {
    v21 = (char *)&aGhijlmnoqrstvw[15] + 3 * *((int *)a1 + 16) + 1;
    LOBYTE(v22) = *v21;
    LOBYTE(v23) = v21[1];
    v24 = v21[2];
  }
  else
  {
    sub_10014C9F4(&v70);
    v25 = std::random_device::operator()(&v70);
    __src = v25;
    for (i = 1; i != 624; ++i)
    {
      v25 = i + 1812433253 * (v25 ^ (v25 >> 30));
      *(&__src + i) = v25;
    }
    v165 = 0;
    *(_QWORD *)&v71[0] = 0x1B00000000;
    v27 = (unsigned __int16 *)((char *)&aGhijlmnoqrstvw[15]
                             + 3 * (int)sub_100165990((uint64_t)v71, (uint64_t)&__src, v71)
                             + 1);
    v28 = *((_BYTE *)v27 + 2);
    v22 = *v27 | (v28 << 16);
    std::random_device::~random_device(&v70);
    v23 = v22 >> 8;
    v24 = v28;
  }
  if (word_100855A12 == v20)
  {
    v62 = 0;
    v63 = 0;
    v29 = 0;
  }
  else
  {
    if (a1[37])
      v30 = a1[36];
    else
      v30 = v22;
    v63 = v30;
    if (a1[39])
      LOBYTE(v23) = a1[38];
    v62 = v23;
    if (a1[41])
      v29 = a1[40];
    else
      v29 = v24;
  }
  v31 = a1[44] == 0;
  v32 = sub_10016CC70((uint64_t)v69);
  if (!v31)
    v32 |= sub_10016CC88((uint64_t)v69);
  if (a1[44])
  {
    v33 = sub_10016CC70((uint64_t)v69);
    v34 = sub_10016CC88((uint64_t)v69) | v33;
  }
  else
  {
    v34 = sub_10016CC88((uint64_t)v69);
  }
  v35 = a2 != 0;
  LOBYTE(__src) = v35;
  BYTE1(__src) = 1;
  if (v15)
  {
    if (!a1[13])
      sub_10000BA44();
    BYTE2(__src) = a1[12];
    HIBYTE(__src) = 1;
    if (!a1[15])
      sub_10000BA44();
    v74 = a1[14];
    v75 = 1;
    if (!a1[17])
      sub_10000BA44();
    v36 = a1[16];
  }
  else
  {
    BYTE2(__src) = sub_10016CC68((uint64_t)v69);
    HIBYTE(__src) = 1;
    v74 = v32;
    v75 = 1;
    v36 = sub_10016CC78((uint64_t)v69);
  }
  v76 = v36;
  v77 = 1;
  v80 = 0;
  v78 = 0;
  v79 = 0;
  memset(v81, 0, sizeof(v81));
  v82 = 1;
  v83 = 0;
  v84 = 0;
  v85 = 0;
  v86 = 0;
  if ((v18 & 0xFF00) != 0)
    v37 = v18;
  else
    v37 = 9;
  v87 = v37;
  v88 = 1;
  v89 = *((_DWORD *)a1 + 28);
  v90 = 0;
  if (v8)
  {
    LOBYTE(v91) = sub_10016CC80((uint64_t)v69);
    BYTE1(v91) = 1;
    BYTE2(v91) = v34;
    HIBYTE(v91) = 1;
    v38 = sub_10016CC90((uint64_t)v69);
  }
  else
  {
    v38 = 0;
    v91 = 16777472;
  }
  v92 = v38;
  v93 = 1;
  v94 = 0;
  if (a1[34])
    v39 = *((_WORD *)a1 + 16);
  else
    v39 = 99;
  v95 = v39;
  v96 = 1;
  v97 = *((_QWORD *)a1 + 10);
  v98 = a1[88];
  v99 = 0;
  v100 = 0;
  v101 = 0;
  v102 = 0;
  v103[14] = 0;
  v104 = 0;
  v105 = 0;
  v106 = 0;
  v107 = 0;
  v108 = 0;
  v109 = 0;
  memset(v103, 0, 13);
  v110 = *((_WORD *)a1 + 36);
  v111 = a1[74];
  v114 = 0;
  v117 = 0;
  v118 = 0;
  v119 = 0;
  v122 = 0;
  v123 = 0;
  v124 = 0;
  v128 = 0;
  v130 = 0;
  v131 = 0;
  v132 = 0;
  v133 = 0;
  v134 = 0;
  v135 = 0;
  v136 = 0;
  v137 = 0;
  v138 = 0;
  v139 = 0;
  v140 = 0;
  v141 = 0;
  v142 = 0;
  v113 = 0;
  v112 = 0;
  v116 = 0;
  v115 = 0;
  v121 = 0;
  v120 = 0;
  v125 = 0;
  v127 = 0;
  v126 = 0;
  *(_DWORD *)((char *)v129 + 3) = 0;
  v129[0] = 0;
  v143 = 0;
  v144 = 0;
  if (a1[1])
    v40 = *a1;
  else
    v40 = sub_10016CC98((uint64_t)v69);
  v145 = v40;
  v146 = 1;
  if (a1[3])
    v41 = a1[2];
  else
    v41 = sub_10016CCA0((uint64_t)v69);
  v147 = v41;
  v148 = 1;
  v42 = (__int16 *)(a1 + 4);
  if (!a1[6])
    v42 = &word_100856DE0;
  v149 = *v42;
  v150 = 1;
  LOBYTE(v151) = 0;
  v152 = 0;
  if (a1[29])
    v43 = a1[28];
  else
    v43 = 4;
  v153 = v43;
  v156 = 0;
  *(_WORD *)v154 = 1;
  v155 = 0;
  v157 = 0;
  v158 = v17;
  v159 = 1;
  v160 = 0;
  if (a1[27])
    v44 = a1[26];
  else
    v44 = 16;
  v161 = v44;
  *(_WORD *)v162 = 1;
  v163 = 0;
  memset(v164, 0, sizeof(v164));
  if (!v82)
    sub_1003CFD30();
  if (a1[48])
  {
    v45 = *(_WORD *)&v81[5];
    if (a1[42])
    {
      v45 = *(_WORD *)&v81[5] | 1;
      *(_WORD *)&v81[5] |= 1u;
    }
    v46 = (__int16 *)(a1 + 8);
    if (!a1[10])
      v46 = &word_100855A16;
    v151 = *v46;
    v152 = 1;
    if (a1[31])
      v47 = a1[30];
    else
      v47 = 72;
    v160 = v47 | 0x100;
    *(_WORD *)&v81[5] = v45 | 2;
    *(_WORD *)&v154[1] = word_100855A12;
    v155 = 1;
    v156 = 16777472;
    v157 = 256;
    v48 = 7;
  }
  else
  {
    if (a1[55])
      v49 = a1[54];
    else
      v49 = 6;
    LOWORD(v164[0]) = v49 | 0x100;
    if (a1[57])
      v50 = a1[56];
    else
      v50 = 10;
    HIWORD(v164[0]) = v50 | 0x100;
    BYTE1(v164[5]) = 1;
    LOBYTE(v164[5]) = v64;
    *(_WORD *)&v154[1] = v20;
    v155 = 1;
    BYTE1(v156) = 1;
    LOBYTE(v156) = v63;
    HIBYTE(v156) = 1;
    BYTE2(v156) = v62;
    HIBYTE(v157) = 1;
    LOBYTE(v157) = v29;
    v51 = *(_WORD *)&v81[5];
    *(_WORD *)&v81[5] |= 2u;
    if (a1[60])
      *(_WORD *)&v81[5] = v51 | 3;
    v52 = (__int16 *)(a1 + 8);
    if (!a1[10])
      v52 = &word_100855A18;
    v151 = *v52;
    v152 = 1;
    v53 = operator new(1uLL);
    __p = v53;
    *v53 = 1;
    v68 = v53 + 1;
    v67 = v53 + 1;
    v54 = sub_10036C1C0((unsigned __int8 **)&__p);
    if (a1[59])
      v55 = a1[58];
    else
      v55 = v54;
    if (__p)
    {
      v67 = __p;
      operator delete(__p);
    }
    if (!HIBYTE(v164[5]))
      HIBYTE(v164[5]) = 1;
    BYTE2(v164[5]) = 0;
    v56 = sub_10036C224(v55);
    v57 = sub_10036C240(v55);
    if (((v56 ^ 1 | v57) & 1) != 0)
    {
      if ((v56 | v57 ^ 1) == 1)
      {
        if (((v56 ^ 1 | v57 ^ 1) & 1) != 0)
          sub_1003CFD58();
        if (!HIBYTE(v164[5]))
          sub_10000BA44();
        BYTE2(v164[5]) |= 8u;
        v58 = 1;
      }
      else
      {
        v58 = 29;
      }
    }
    else
    {
      v58 = 253;
    }
    if (a1[52])
      v58 = *((_WORD *)a1 + 25);
    *(_WORD *)&v162[1] = v58;
    v163 = 1;
    if (a1[31])
      v60 = a1[30];
    else
      v60 = -60;
    v160 = v60 | 0x100;
    *(_OWORD *)&v164[1] = *((_OWORD *)a1 + 6);
    if (a1[48])
      v48 = 7;
    else
      v48 = 8;
  }
  LOBYTE(v71[0]) = 0;
  v72 = 0;
  return sub_1001625AC(a3, v35, v48, v71, 1, 0, 3, 0, &__src);
}

void sub_100165958(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, std::random_device a20,std::random_device a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100165990(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t result;
  int v4;
  unsigned int v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  unsigned int v13;

  result = a3[1];
  v4 = result - *a3;
  if ((_DWORD)result != *a3)
  {
    v6 = v4 + 1;
    if (v4 == -1)
    {
      return sub_10014CC9C(a2);
    }
    else
    {
      v8 = __clz(v6);
      v9 = 31;
      if (((v6 << v8) & 0x7FFFFFFF) != 0)
        v9 = 32;
      v10 = v9 - v8;
      v11 = v10 >> 5;
      if ((v10 & 0x1F) != 0)
        ++v11;
      if (v11 <= v10)
        v12 = 0xFFFFFFFF >> -(v10 / v11);
      else
        v12 = 0;
      do
        v13 = sub_10014CC9C(a2) & v12;
      while (v13 >= v6);
      return *a3 + v13;
    }
  }
  return result;
}

uint64_t sub_100165A40()
{
  uint64_t result;
  unsigned __int16 v1;
  char v2;
  __int16 v3;
  char v4;

  v1 = 272;
  word_100855A10 = sub_10036C724(&v1);
  v1 = 263;
  word_100855A12 = sub_10036C724(&v1);
  v1 = 1031;
  word_100855A14 = sub_10036C724(&v1);
  word_100856DE0 = word_100855A10;
  v1 = 1;
  v2 = 0;
  v3 = 5;
  v4 = 1;
  word_100855A16 = sub_10036C5B8((unsigned __int8 *)&v1);
  v1 = 6;
  v2 = 0;
  v3 = 2;
  v4 = 1;
  word_100855A18 = sub_10036C5B8((unsigned __int8 *)&v1);
  v1 = 2304;
  v2 = 1;
  LOBYTE(v3) = 0;
  v4 = 0;
  result = sub_10036C5B8((unsigned __int8 *)&v1);
  word_100855A1A = result;
  return result;
}

_QWORD *sub_100165B28@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, off_100808678[a1]);
}

_QWORD *sub_100165B3C@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, off_1008086D0[a1]);
}

_QWORD *sub_100165B50@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, off_100808718[a1]);
}

_QWORD *sub_100165B64@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, off_100808738[a1]);
}

double sub_100165B78(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)(a1 + 16) = a2;
  *(_QWORD *)(a1 + 24) = 850045863;
  result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)a1 = off_100808648;
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

void sub_100165BA4(uint64_t a1, uint64_t a2)
{
  std::mutex *v4;
  uint64_t v5;
  NSObject *v6;

  v4 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 24))(v5, a2);
  }
  else
  {
    v6 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
      sub_1003CFDC0(v6);
  }
  std::mutex::unlock(v4);
}

void sub_100165C24(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100165C38(uint64_t a1)
{
  *(_QWORD *)a1 = off_100806F08;
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  return a1;
}

void sub_100165C68(uint64_t a1)
{
  *(_QWORD *)a1 = off_100806F08;
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  operator delete();
}

_QWORD *sub_100165CA8@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, off_100808A50[a1]);
}

_QWORD *sub_100165CBC@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, off_100808AA8[a1]);
}

_QWORD *sub_100165CD0@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, off_100808AF0[a1]);
}

_QWORD *sub_100165CE4@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, off_100808B10[a1]);
}

uint64_t sub_100165CF8(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4)
{
  NSObject *v8;
  dispatch_queue_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::runtime_error *exception;
  uint64_t v24;
  std::__shared_weak_count *v25;

  *(_QWORD *)a1 = off_100808768;
  *(_QWORD *)(a1 + 8) = 850045863;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_QWORD *)(a1 + 112) = 0;
  v8 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_USER_INITIATED, 0);
  v9 = dispatch_queue_create("com.apple.RoseServiceProvider.RoseScheduler", v8);
  v10 = *a3;
  v11 = (std::__shared_weak_count *)a3[1];
  *(_QWORD *)(a1 + 128) = *a3;
  *(_QWORD *)(a1 + 120) = v9;
  *(_QWORD *)(a1 + 136) = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
    v10 = *(_QWORD *)(a1 + 128);
    v11 = *(std::__shared_weak_count **)(a1 + 136);
  }
  *(_QWORD *)(a1 + 160) = 1018212795;
  *(_QWORD *)(a1 + 144) = a2;
  *(_WORD *)(a1 + 152) = 0;
  *(_BYTE *)(a1 + 154) = 0;
  *(_DWORD *)(a1 + 156) = 0;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_QWORD *)(a1 + 200) = 0;
  v24 = v10;
  v25 = v11;
  if (v11)
  {
    v14 = (unint64_t *)&v11->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  sub_10016AE4C((_QWORD *)(a1 + 208), &v24, *(_QWORD *)(a1 + 120));
  v16 = v25;
  if (v25)
  {
    v17 = (unint64_t *)&v25->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = a4[1];
  *(_QWORD *)(a1 + 240) = *a4;
  *(_QWORD *)(a1 + 248) = v19;
  if (v19)
  {
    v20 = (unint64_t *)(v19 + 8);
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  *(_BYTE *)(a1 + 256) = 0;
  *(_BYTE *)(a1 + 260) = 0;
  *(_DWORD *)(a1 + 264) = 0;
  *(_BYTE *)(a1 + 268) = 0;
  *(_BYTE *)(a1 + 272) = 0;
  if (!*a3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "[RoseScheduler] database is nullptr. Normal opreation is not possible.");
    goto LABEL_21;
  }
  if (!a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "[RoseScheduler] Scheduler owner is nullptr. Normal opreation is not possible.");
LABEL_21:
  }
  return a1;
}

void sub_100165EF4(_Unwind_Exception *a1)
{
  std::mutex *v1;
  uint64_t v2;
  uint64_t v3;
  std::condition_variable *v4;
  uint64_t v5;
  void *v6;

  __cxa_free_exception(v6);
  sub_10001AE68(v5);
  *(_QWORD *)(v2 + 208) = off_100808EE8;
  sub_10001AE68(v2 + 216);
  std::condition_variable::~condition_variable(v4);
  sub_10001AE68(v3);
  std::mutex::~mutex(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100165F5C(uint64_t a1)
{
  NSObject *v2;

  *(_QWORD *)a1 = off_100808768;
  v2 = *(NSObject **)(a1 + 120);
  if (v2)
    dispatch_release(v2);
  sub_10001AE68(a1 + 240);
  *(_QWORD *)(a1 + 208) = off_100808EE8;
  sub_10001AE68(a1 + 216);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 160));
  sub_10001AE68(a1 + 128);
  std::mutex::~mutex((std::mutex *)(a1 + 8));
  return a1;
}

void sub_100165FD0(uint64_t a1)
{
  sub_100165F5C(a1);
  operator delete();
}

uint64_t sub_100165FF4(uint64_t a1, uint64_t *a2)
{
  std::mutex *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  v5 = *a2;
  *(_QWORD *)(a1 + 72) = *a2;
  *(_QWORD *)(a1 + 80) = a2[1];
  *(_QWORD *)(a1 + 88) = a2[2];
  *(_QWORD *)(a1 + 96) = a2[3];
  *(_QWORD *)(a1 + 104) = a2[4];
  *(_QWORD *)(a1 + 112) = a2[5];
  if (!v5 || (sub_10016A5F8(v5, a1), (v6 = *(_QWORD *)(a1 + 80)) == 0))
    __assert_rtn("SetupProxyObjects", "ProxyObjectConsumerBase.h", 49, "proxyObj != nullptr");
  sub_10016A5F8(v6, a1);
  v8 = sub_10016A67C(a1, (_QWORD *)(a1 + 72), v7);
  atomic_store(v8, (unsigned __int8 *)(a1 + 152));
  std::mutex::unlock(v4);
  return v8;
}

void sub_1001660C0(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1001660D4(uint64_t a1)
{
  uint64_t v2;
  std::chrono::system_clock::time_point v3;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v4;
  unsigned __int8 v5;
  std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> v6;
  unsigned __int8 v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::unique_lock<std::mutex> __lk;

  v2 = *(_QWORD *)(a1 + 80);
  v9 = *(_QWORD *)(a1 + 112);
  v10 = *(_QWORD *)(a1 + 88);
  v11 = *(_QWORD *)(a1 + 96);
  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 72) + 16))(*(_QWORD *)(a1 + 72)) & 1) == 0
    && os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
  {
    sub_1003CFEDC();
  }
  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 8);
  __lk.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 8));
  v3.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  v4 = v3.__d_.__rep_ + 10000000;
  while (1)
  {
    v5 = atomic_load((unsigned __int8 *)(a1 + 153));
    if ((v5 & 1) != 0)
      break;
    if (std::chrono::system_clock::now().__d_.__rep_ >= v4)
      goto LABEL_16;
    if (v3.__d_.__rep_ == -10000000)
    {
      v6.__d_.__rep_ = 0;
    }
    else if (v3.__d_.__rep_ < -9999999)
    {
      if ((unint64_t)v4 >= 0xFFDF3B645A1CAC09)
      {
LABEL_14:
        v6.__d_.__rep_ = 1000 * (v3.__d_.__rep_ + 10000000);
        goto LABEL_15;
      }
      v6.__d_.__rep_ = 0x8000000000000000;
    }
    else
    {
      if ((unint64_t)v4 <= 0x20C49BA5E353F7)
        goto LABEL_14;
      v6.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
    }
LABEL_15:
    std::condition_variable::__do_timed_wait((std::condition_variable *)(a1 + 160), &__lk, v6);
    if (std::chrono::system_clock::now().__d_.__rep_ >= v4)
    {
LABEL_16:
      atomic_load((unsigned __int8 *)(a1 + 153));
      break;
    }
  }
  v7 = atomic_load((unsigned __int8 *)(a1 + 153));
  if ((v7 & 1) != 0)
  {
    if (__lk.__owns_)
      std::mutex::unlock(__lk.__m_);
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2) & 1) == 0
      && os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
    {
      sub_1003CFE84();
    }
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9) & 1) == 0
      && os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
    {
      sub_1003CFE58();
    }
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10) & 1) == 0
      && os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
    {
      sub_1003CFE2C();
    }
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11) & 1) == 0
      && os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
    {
      sub_1003CFE00();
    }
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
      sub_1003CFEB0();
    if (__lk.__owns_)
      std::mutex::unlock(__lk.__m_);
  }
  return v7 & 1;
}

void sub_10016635C(uint64_t a1, const void *a2)
{
  NSObject *v4;
  NSObject *v5;
  uint8_t v6[8];
  _QWORD block[5];
  _BYTE v8[632];

  v4 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[AP Scheduler] Scheduler handleServiceRequestAsync", v6, 2u);
  }
  memcpy(v8, a2, sizeof(v8));
  v5 = *(NSObject **)(a1 + 120);
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = sub_10016644C;
  block[3] = &unk_1008087A8;
  block[4] = a1;
  dispatch_async(v5, block);
}

void sub_10016644C(uint64_t a1)
{
  sub_10016645C(*(_QWORD *)(a1 + 32), (__int16 *)(a1 + 40));
}

void sub_10016645C(uint64_t a1, __int16 *a2)
{
  NSObject *v4;
  void **v5;
  __int16 v6;
  __int16 v7;
  char v8;
  __int16 v9;
  void *__p;
  _QWORD v11[63];
  char v12;
  char v13;
  char v14;
  char v15;
  void *v16;
  void *v17;
  char v18;
  char v19;
  void *v20;
  void *v21;
  char v22;
  __int16 v23;
  char v24;
  char v25;
  __int16 v26;
  char v27;
  char v28;
  char v29;
  char v30;
  uint8_t buf[4];
  void **v32;

  v4 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(__p) = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "RoseScheduler::handleNewServiceRequestInternal", (uint8_t *)&__p, 2u);
    v4 = qword_10085F520;
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(__p) = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[AP Scheduler] Servicing dequeued service request. Passing message to AOP scheduler.", (uint8_t *)&__p, 2u);
    v4 = qword_10085F520;
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    sub_1001626F4((uint64_t)(a2 + 4));
    v5 = v11[1] >= 0 ? &__p : (void **)__p;
    *(_DWORD *)buf = 136315138;
    v32 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Request: %s", buf, 0xCu);
    if (SHIBYTE(v11[1]) < 0)
      operator delete(__p);
  }
  if (*((_DWORD *)a2 + 3) != 2)
  {
    v7 = *a2;
    LODWORD(__p) = 1;
    WORD2(__p) = v7;
    memcpy(v11, a2 + 4, sizeof(v11));
    v12 = 1;
    v13 = 0;
    v14 = 0;
    v15 = 0;
    v18 = 0;
    v19 = 0;
    v22 = 0;
    v23 = 0;
    v24 = 0;
    v25 = 0;
    v26 = 0;
    v27 = 0;
    v28 = 0;
    v29 = 0;
    v30 = 0;
    v8 = sub_1001673DC(a1, (uint64_t)&__p);
    if (v22 && v20)
    {
      v21 = v20;
      operator delete(v20);
    }
    if (v18 && v16)
    {
      v17 = v16;
      operator delete(v16);
    }
    if ((v8 & 1) == 0)
      goto LABEL_13;
LABEL_23:
    v9 = *a2;
    LODWORD(__p) = 1;
    WORD2(__p) = v9;
    v11[0] = 13;
    LOBYTE(v11[1]) = 1;
    LOBYTE(v11[2]) = 0;
    LOBYTE(v11[9]) = 0;
    LOBYTE(v11[10]) = 0;
    LOBYTE(v11[13]) = 0;
    BYTE4(v11[13]) = 0;
    LOBYTE(v11[14]) = 0;
    BYTE4(v11[14]) = 0;
    LOBYTE(v11[19]) = 0;
    (*(void (**)(_QWORD, void **))(**(_QWORD **)(a1 + 144) + 16))(*(_QWORD *)(a1 + 144), &__p);
    goto LABEL_24;
  }
  if ((sub_1001679E8(a1, 0, a2) & 1) != 0)
    goto LABEL_23;
LABEL_13:
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
    sub_1003CFF08();
  sub_10016D4CC(*(_QWORD *)(a1 + 128), (unsigned __int16)*a2);
  v6 = *a2;
  LODWORD(__p) = 1;
  WORD2(__p) = v6;
  v11[0] = 9;
  LOBYTE(v11[1]) = 1;
  LOBYTE(v11[2]) = 0;
  LOBYTE(v11[9]) = 0;
  LOBYTE(v11[10]) = 0;
  LOBYTE(v11[13]) = 0;
  BYTE4(v11[13]) = 0;
  LOBYTE(v11[14]) = 0;
  BYTE4(v11[14]) = 0;
  LOBYTE(v11[19]) = 0;
  (*(void (**)(_QWORD, void **))(**(_QWORD **)(a1 + 144) + 16))(*(_QWORD *)(a1 + 144), &__p);
LABEL_24:
  if (LOBYTE(v11[9]) && LOBYTE(v11[7]) && SHIBYTE(v11[6]) < 0)
    operator delete((void *)v11[4]);
}

void sub_10016677C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,uint64_t a21,char a22)
{
  if (a22 && a20 && a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

__n128 sub_1001667C4(uint64_t a1, __int16 a2, __int128 *a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  NSObject *v8;
  __n128 result;
  _QWORD block[5];
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int16 v18;

  v3 = a3[2];
  v4 = a3[4];
  v5 = a3[5];
  v14 = a3[3];
  v15 = v4;
  v6 = a3[6];
  v16 = v5;
  v17 = v6;
  v7 = a3[1];
  v11 = *a3;
  v12 = v7;
  v13 = v3;
  v8 = *(NSObject **)(a1 + 120);
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = sub_10016686C;
  block[3] = &unk_1008087C8;
  block[4] = a1;
  v18 = a2;
  dispatch_async(v8, block);
  return result;
}

void sub_10016686C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  double v5;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(v2 + 240);
  if (v3)
  {
    v4 = *(unsigned __int16 *)(a1 + 152);
    v5 = sub_100360D00();
    sub_10026C964(v3, v4, v5);
  }
  sub_1001668BC(v2, *(_WORD *)(a1 + 152), (__int128 *)(a1 + 40));
}

void sub_1001668BC(uint64_t a1, unsigned __int16 a2, __int128 *a3)
{
  NSObject *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  void *v10;
  int v11;
  unsigned __int16 v12;
  uint64_t v13;
  char v14;
  char v15;
  void *__p;
  char v17;
  char v18;
  char v19;
  char v20;
  char v21;
  char v22;
  char v23;
  char v24;
  char v25;
  uint8_t buf[4];
  unsigned __int16 v27;
  _QWORD v28[63];
  char v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  char v37;
  char v38;
  void *v39;
  void *v40;
  char v41;
  char v42;
  void *v43;
  void *v44;
  char v45;
  __int16 v46;
  char v47;
  char v48;
  __int16 v49;
  char v50;
  char v51;
  char v52;
  char v53;
  _DWORD __dst[158];
  char v55[8];
  _BYTE v56[648];

  v6 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "RoseScheduler::handleStartServiceInternal", buf, 2u);
  }
  sub_10016D118(*(_QWORD *)(a1 + 128), a2, v55);
  if (v56[640])
  {
    memcpy(__dst, v56, sizeof(__dst));
    if (__dst[3] > 8u)
      return;
    if (((1 << SLOBYTE(__dst[3])) & 0x6C) != 0)
    {
      if ((sub_1001679E8(a1, 1, (__int16 *)__dst) & 1) == 0)
      {
        if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
          sub_1003CFF98();
        *(_DWORD *)buf = 1;
        v27 = a2;
        v28[0] = 11;
        LOBYTE(v28[1]) = 1;
        LOBYTE(v28[2]) = 0;
        LOBYTE(v28[9]) = 0;
        LOBYTE(v28[10]) = 0;
        LOBYTE(v28[13]) = 0;
        BYTE4(v28[13]) = 0;
        LOBYTE(v28[14]) = 0;
        BYTE4(v28[14]) = 0;
        LOBYTE(v28[19]) = 0;
        (*(void (**)(_QWORD, uint8_t *))(**(_QWORD **)(a1 + 144) + 16))(*(_QWORD *)(a1 + 144), buf);
        if (LOBYTE(v28[9]))
        {
          if (LOBYTE(v28[7]) && SHIBYTE(v28[6]) < 0)
          {
            v10 = (void *)v28[4];
            goto LABEL_29;
          }
        }
      }
    }
    else if (((1 << SLOBYTE(__dst[3])) & 0x192) != 0)
    {
      *(_DWORD *)buf = 2;
      v27 = a2;
      memcpy(v28, &__dst[2], sizeof(v28));
      v29 = 1;
      v7 = a3[5];
      v34 = a3[4];
      v35 = v7;
      v36 = a3[6];
      v8 = a3[1];
      v30 = *a3;
      v31 = v8;
      v9 = a3[3];
      v32 = a3[2];
      v33 = v9;
      v37 = 1;
      v38 = 0;
      v41 = 0;
      v42 = 0;
      v45 = 0;
      v46 = 0;
      v47 = 0;
      v48 = 0;
      v49 = 0;
      v50 = 0;
      v51 = 0;
      v52 = 0;
      v53 = 0;
      if ((sub_1001673DC(a1, (uint64_t)buf) & 1) == 0)
      {
        if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
          sub_1003CFFFC();
        v11 = 1;
        v12 = a2;
        v13 = 11;
        v14 = 1;
        v15 = 0;
        v19 = 0;
        v20 = 0;
        v21 = 0;
        v22 = 0;
        v23 = 0;
        v24 = 0;
        v25 = 0;
        (*(void (**)(_QWORD, int *))(**(_QWORD **)(a1 + 144) + 16))(*(_QWORD *)(a1 + 144), &v11);
        if (v19 && v18 && v17 < 0)
          operator delete(__p);
      }
      if (v45 && v43)
      {
        v44 = v43;
        operator delete(v43);
      }
      if (v41)
      {
        v10 = v39;
        if (v39)
        {
          v40 = v39;
LABEL_29:
          operator delete(v10);
        }
      }
    }
    else if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
    {
      sub_1003D0028();
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
  {
    sub_1003CFF34();
  }
}

void sub_100166BF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44,char a45,uint64_t a46,char a47)
{
  if (a47 && a45 && a44 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100166C64(uint64_t a1, __int16 a2)
{
  NSObject *v2;
  _QWORD v3[5];
  __int16 v4;

  v2 = *(NSObject **)(a1 + 120);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 0x40000000;
  v3[2] = sub_100166CC0;
  v3[3] = &unk_1008087E8;
  v3[4] = a1;
  v4 = a2;
  dispatch_async(v2, v3);
}

void sub_100166CC0(uint64_t a1)
{
  sub_100166CD0(*(_QWORD *)(a1 + 32), *(unsigned __int16 *)(a1 + 40));
}

void sub_100166CD0(uint64_t a1, int a2)
{
  NSObject *v4;
  NSObject *v5;
  void *v6;
  uint8_t *v7;
  int v8;
  _BYTE v9[14];
  char v10;
  void *__p;
  char v12;
  char v13;
  char v14;
  char v15;
  char v16;
  char v17;
  char v18;
  char v19;
  char v20;
  uint8_t buf[8];
  _QWORD v22[63];
  char v23;
  char v24;
  char v25;
  char v26;
  void *v27;
  void *v28;
  char v29;
  char v30;
  void *v31;
  void *v32;
  char v33;
  __int16 v34;
  char v35;
  char v36;
  __int16 v37;
  char v38;
  char v39;
  char v40;
  char v41;
  int __dst[158];
  _BYTE v43[8];
  _BYTE v44[648];

  v4 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "RoseScheduler::handleStopServiceInternal", buf, 2u);
  }
  sub_10016D118(*(_QWORD *)(a1 + 128), a2, v43);
  if (v44[640])
  {
    memcpy(__dst, v44, sizeof(__dst));
    if (__dst[3] == 2)
    {
      if ((sub_1001679E8(a1, 2, (__int16 *)__dst) & 1) == 0)
      {
        v5 = qword_10085F520;
        if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
        {
          sub_100165CBC(__dst[3], buf);
          if (v22[1] >= 0)
            v7 = buf;
          else
            v7 = *(uint8_t **)buf;
          v8 = 136315394;
          *(_QWORD *)v9 = v7;
          *(_WORD *)&v9[8] = 1024;
          *(_DWORD *)&v9[10] = a2;
          _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Failed to schedule %s ranging stop for ticket ID: %d", (uint8_t *)&v8, 0x12u);
          if (SHIBYTE(v22[1]) < 0)
            operator delete(*(void **)buf);
        }
        *(_DWORD *)buf = 1;
        *(_WORD *)&buf[4] = a2;
        v22[0] = 10;
        LOBYTE(v22[1]) = 1;
        LOBYTE(v22[2]) = 0;
        LOBYTE(v22[9]) = 0;
        LOBYTE(v22[10]) = 0;
        LOBYTE(v22[13]) = 0;
        BYTE4(v22[13]) = 0;
        LOBYTE(v22[14]) = 0;
        BYTE4(v22[14]) = 0;
        LOBYTE(v22[19]) = 0;
        (*(void (**)(_QWORD, uint8_t *))(**(_QWORD **)(a1 + 144) + 16))(*(_QWORD *)(a1 + 144), buf);
        if (LOBYTE(v22[9]))
        {
          if (LOBYTE(v22[7]) && SHIBYTE(v22[6]) < 0)
          {
            v6 = (void *)v22[4];
LABEL_26:
            operator delete(v6);
          }
        }
      }
    }
    else
    {
      *(_DWORD *)buf = 3;
      *(_WORD *)&buf[4] = a2;
      memcpy(v22, &v44[8], sizeof(v22));
      v23 = 1;
      v24 = 0;
      v25 = 0;
      v26 = 0;
      v29 = 0;
      v30 = 0;
      v33 = 0;
      v34 = 0;
      v35 = 0;
      v36 = 0;
      v37 = 0;
      v38 = 0;
      v39 = 0;
      v40 = 0;
      v41 = 0;
      if ((sub_1001673DC(a1, (uint64_t)buf) & 1) == 0)
      {
        if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
          sub_1003D00B8();
        v8 = 1;
        *(_WORD *)v9 = a2;
        *(_QWORD *)&v9[4] = 10;
        v9[12] = 1;
        v10 = 0;
        v14 = 0;
        v15 = 0;
        v16 = 0;
        v17 = 0;
        v18 = 0;
        v19 = 0;
        v20 = 0;
        (*(void (**)(_QWORD, int *))(**(_QWORD **)(a1 + 144) + 16))(*(_QWORD *)(a1 + 144), &v8);
        if (v14 && v13 && v12 < 0)
          operator delete(__p);
      }
      if (v33 && v31)
      {
        v32 = v31;
        operator delete(v31);
      }
      if (v29)
      {
        v6 = v27;
        if (v27)
        {
          v28 = v27;
          goto LABEL_26;
        }
      }
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
  {
    sub_1003D0054();
  }
}

void sub_10016700C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,char a45,uint64_t a46,char a47)
{
  if (a22 && a20 && a19 < 0)
    operator delete(__p);
  sub_100167580((uint64_t)&a34);
  _Unwind_Resume(a1);
}

void sub_100167078(uint64_t a1, __int16 a2)
{
  NSObject *v2;
  _QWORD v3[5];
  __int16 v4;

  v2 = *(NSObject **)(a1 + 120);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 0x40000000;
  v3[2] = sub_1001670D4;
  v3[3] = &unk_100808808;
  v3[4] = a1;
  v4 = a2;
  dispatch_async(v2, v3);
}

void sub_1001670D4(uint64_t a1)
{
  sub_1001670E4(*(_QWORD *)(a1 + 32), *(unsigned __int16 *)(a1 + 40));
}

void sub_1001670E4(uint64_t a1, int a2)
{
  NSObject *v4;
  char v5;
  NSObject *v6;
  int v7;
  int v8;
  uint64_t v9;
  char v10;
  char v11;
  void *__p;
  char v13;
  char v14;
  char v15;
  char v16;
  char v17;
  char v18;
  char v19;
  char v20;
  char v21;
  uint8_t buf[4];
  __int16 v23;
  _BYTE v24[640];
  void *v25;
  void *v26;
  char v27;
  char v28;
  void *v29;
  void *v30;
  char v31;
  __int16 v32;
  char v33;
  char v34;
  __int16 v35;
  char v36;
  char v37;
  char v38;
  char v39;
  _DWORD __dst[158];
  _BYTE v41[8];
  _BYTE v42[648];

  v4 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[AP Scheduler] Canceling enqueued service request. Passing message to AOP scheduler.", buf, 2u);
  }
  sub_10016D118(*(_QWORD *)(a1 + 128), a2, v41);
  if (v42[640])
  {
    memcpy(__dst, v42, sizeof(__dst));
    if (__dst[3] == 2)
    {
      if ((sub_1001679E8(a1, 3, (__int16 *)__dst) & 1) == 0
        && os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
      {
        sub_1003D0148();
      }
    }
    else
    {
      *(_DWORD *)buf = 4;
      v23 = a2;
      memcpy(v24, &v42[8], 0x1F8uLL);
      v24[504] = 1;
      v24[512] = 0;
      v24[624] = 0;
      v24[632] = 0;
      v27 = 0;
      v28 = 0;
      v31 = 0;
      v32 = 0;
      v33 = 0;
      v34 = 0;
      v35 = 0;
      v36 = 0;
      v37 = 0;
      v38 = 0;
      v39 = 0;
      v5 = sub_1001673DC(a1, (uint64_t)buf);
      v6 = qword_10085F520;
      if ((v5 & 1) != 0)
      {
        if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
        {
          v7 = 67109120;
          v8 = a2;
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "[AP Scheduler] Cancel Service: Success canceling service request, ticket ID: %d", (uint8_t *)&v7, 8u);
        }
      }
      else
      {
        if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
          sub_1003D01AC();
        v7 = 1;
        LOWORD(v8) = a2;
        v9 = 12;
        v10 = 1;
        v11 = 0;
        v15 = 0;
        v16 = 0;
        v17 = 0;
        v18 = 0;
        v19 = 0;
        v20 = 0;
        v21 = 0;
        (*(void (**)(_QWORD, int *))(**(_QWORD **)(a1 + 144) + 16))(*(_QWORD *)(a1 + 144), &v7);
        if (v15 && v14 && v13 < 0)
          operator delete(__p);
      }
      if (v31 && v29)
      {
        v30 = v29;
        operator delete(v29);
      }
      if (v27 && v25)
      {
        v26 = v25;
        operator delete(v25);
      }
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
  {
    sub_1003D00E4();
  }
}

void sub_100167398(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  if (a22 && a20 && a19 < 0)
    operator delete(__p);
  sub_100167580((uint64_t)&a34);
  _Unwind_Resume(a1);
}

uint64_t sub_1001673DC(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  std::mutex *v6;
  uint64_t v7;

  v2 = atomic_load((unsigned __int8 *)(a1 + 152));
  if ((v2 & 1) != 0)
  {
    v6 = (std::mutex *)(a1 + 8);
    std::mutex::lock((std::mutex *)(a1 + 8));
    v7 = *(_QWORD *)(a1 + 72);
    if (v7)
    {
      v3 = sub_10016B8AC(v7, a2);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
        sub_1003D023C();
      v3 = 0;
    }
    std::mutex::unlock(v6);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
      sub_1003D0210();
    return 0;
  }
  return v3;
}

void sub_10016749C(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

__n128 sub_1001674B0(uint64_t a1, uint64_t a2)
{
  __n128 result;

  memcpy((void *)(a1 + 40), (const void *)(a2 + 40), 0x279uLL);
  sub_10016A3E8(a1 + 680, a2 + 680);
  sub_10016A47C((__n128 *)(a1 + 720), a2 + 720);
  result = *(__n128 *)(a2 + 776);
  *(_QWORD *)(a1 + 789) = *(_QWORD *)(a2 + 789);
  *(__n128 *)(a1 + 776) = result;
  return result;
}

void sub_100167510(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 712))
    sub_1003D0268(v1);
  _Unwind_Resume(exception_object);
}

void sub_10016752C(uint64_t a1)
{
  void *v2;
  void *v3;

  if (*(_BYTE *)(a1 + 768))
  {
    v2 = *(void **)(a1 + 728);
    if (v2)
    {
      *(_QWORD *)(a1 + 736) = v2;
      operator delete(v2);
    }
  }
  if (*(_BYTE *)(a1 + 712))
  {
    v3 = *(void **)(a1 + 688);
    if (v3)
    {
      *(_QWORD *)(a1 + 696) = v3;
      operator delete(v3);
    }
  }
}

uint64_t sub_100167580(uint64_t a1)
{
  void *v2;
  void *v3;

  if (*(_BYTE *)(a1 + 728))
  {
    v2 = *(void **)(a1 + 688);
    if (v2)
    {
      *(_QWORD *)(a1 + 696) = v2;
      operator delete(v2);
    }
  }
  if (*(_BYTE *)(a1 + 672))
  {
    v3 = *(void **)(a1 + 648);
    if (v3)
    {
      *(_QWORD *)(a1 + 656) = v3;
      operator delete(v3);
    }
  }
  return a1;
}

void sub_1001675D4(uint64_t a1, uint64_t *a2)
{
  __int128 v4;
  NSObject *v5;
  _QWORD block[6];
  int v7;
  uint64_t v8;
  void *__p;
  char v10;
  char v11;
  char v12;
  __int128 v13;
  __int128 v14;
  _OWORD v15[2];
  uint64_t v16;
  int v17;
  _BYTE v18[16];
  void *v19;
  char v20;
  char v21;
  char v22;
  __int128 v23;
  __int128 v24;
  _OWORD v25[2];

  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
    sub_1003D027C();
  v16 = *a2;
  v17 = *((_DWORD *)a2 + 2);
  sub_10015A4BC((uint64_t)v18, (uint64_t)(a2 + 2));
  v4 = *((_OWORD *)a2 + 6);
  v23 = *((_OWORD *)a2 + 5);
  v24 = v4;
  v25[0] = *((_OWORD *)a2 + 7);
  *(_OWORD *)((char *)v25 + 13) = *(_OWORD *)((char *)a2 + 125);
  v5 = *(NSObject **)(a1 + 120);
  block[0] = _NSConcreteStackBlock;
  block[1] = 1174405120;
  block[2] = sub_10016A6F0;
  block[3] = &unk_100808880;
  block[4] = a1;
  block[5] = v16;
  v7 = v17;
  sub_10015A4BC((uint64_t)&v8, (uint64_t)v18);
  v13 = v23;
  v14 = v24;
  v15[0] = v25[0];
  *(_OWORD *)((char *)v15 + 13) = *(_OWORD *)((char *)v25 + 13);
  dispatch_async(v5, block);
  if (v12 && v11 && v10 < 0)
    operator delete(__p);
  if (v22 && v21 && v20 < 0)
    operator delete(v19);
}

void sub_10016772C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42,char a43,uint64_t a44,char a45)
{
  if (a45 && a43 && a42 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10016775C(uint64_t a1, __int128 *a2)
{
  NSObject *v4;
  _QWORD v5[5];
  __int128 v6;
  uint64_t v7;

  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
    sub_1003D027C();
  v6 = *a2;
  v7 = *((_QWORD *)a2 + 2);
  v4 = *(NSObject **)(a1 + 120);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 0x40000000;
  v5[2] = sub_10016A764;
  v5[3] = &unk_1008088B0;
  v5[4] = a1;
  dispatch_async(v4, v5);
}

void sub_100167804(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  NSObject *v5;
  _QWORD block[5];
  __int128 v7;
  __int128 v8;

  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
    sub_1003D027C();
  v4 = a2[1];
  v7 = *a2;
  v8 = v4;
  v5 = *(NSObject **)(a1 + 120);
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = sub_10016A774;
  block[3] = &unk_1008088D0;
  block[4] = a1;
  dispatch_async(v5, block);
}

void sub_1001678A4(uint64_t a1, __int128 *a2)
{
  NSObject *v4;
  _QWORD v5[5];
  __int128 v6;
  uint64_t v7;

  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
    sub_1003D027C();
  v6 = *a2;
  v7 = *((_QWORD *)a2 + 2);
  v4 = *(NSObject **)(a1 + 120);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 0x40000000;
  v5[2] = sub_10016A784;
  v5[3] = &unk_1008088F0;
  v5[4] = a1;
  dispatch_async(v4, v5);
}

void sub_10016794C(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  NSObject *v5;
  _QWORD v6[6];

  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
    sub_1003D027C();
  v4 = *a2;
  v5 = *(NSObject **)(a1 + 120);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 0x40000000;
  v6[2] = sub_10016A794;
  v6[3] = &unk_100808910;
  v6[4] = a1;
  v6[5] = v4;
  dispatch_async(v5, v6);
}

uint64_t sub_1001679E8(uint64_t a1, int a2, __int16 *a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD v9[3];
  _QWORD *v10;
  _QWORD v11[3];
  _QWORD *v12;

  v11[0] = off_100808940;
  v11[1] = a1;
  v12 = v11;
  v9[0] = off_1008089D0;
  v9[1] = a1;
  v10 = v9;
  v3 = sub_10016AE80(a1 + 208, a3, a2, (uint64_t)v11, (uint64_t)v9);
  v4 = v10;
  if (v10 == v9)
  {
    v5 = 4;
    v4 = v9;
  }
  else
  {
    if (!v10)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = v12;
  if (v12 == v11)
  {
    v7 = 4;
    v6 = v11;
    goto LABEL_10;
  }
  if (v12)
  {
    v7 = 5;
LABEL_10:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  return v3;
}

void sub_100167AE8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  _QWORD *v2;
  va_list v3;
  va_list v5;
  uint64_t v6;
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  va_list v11;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, va_list);
  v5 = v11;
  if (v11 == v3)
  {
    v6 = 4;
    va_copy(v5, va);
  }
  else
  {
    if (!v11)
      goto LABEL_6;
    v6 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v5 + 8 * v6))();
LABEL_6:
  sub_1003D02A8(v2, (uint64_t *)va1);
  _Unwind_Resume(a1);
}

void sub_100167B34(unint64_t a1, uint64_t a2)
{
  NSObject *v4;
  NSObject *v5;
  NSObject *v6;
  NSObject *v7;
  NSObject *v8;
  std::runtime_error *exception;
  uint8_t v10[16];
  uint8_t v11[16];
  uint8_t v12[16];
  uint8_t v13[16];
  uint8_t buf[16];

  v4 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[AP Scheduler] handleEventInternal AOPRoseEvent", buf, 2u);
  }
  switch(*(_DWORD *)(a2 + 8))
  {
    case 0:
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
        sub_1003D0388();
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "[AP Scheduler] handleEventInternal AOPRoseEvent unspecified type");
    case 1:
      v5 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v12 = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "[AP Scheduler] received SchedulingTaskStatusUpdate event", v12, 2u);
      }
      if (!*(_BYTE *)(a2 + 92))
        sub_1003D0310();
      sub_100167FCC(a1, (unsigned __int16 *)(a2 + 80));
      break;
    case 2:
      v6 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v13 = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "[AP Scheduler] received SchedulerError event", v13, 2u);
      }
      if (!*(_BYTE *)(a2 + 140))
        sub_1003D02E8();
      sub_100167D88(a1, (unsigned __int16 *)(a2 + 104));
      break;
    case 3:
      v7 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v11 = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "[AP Scheduler] received InfrastructureStatusUpdate event", v11, 2u);
      }
      if (!*(_BYTE *)(a2 + 72))
        sub_1003D0338();
      sub_100168A70(a1, (int *)(a2 + 16));
      break;
    case 4:
      v8 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v10 = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "[AP Scheduler] received TimeConversionStateUpdate event", v10, 2u);
      }
      if (!*(_BYTE *)(a2 + 100))
        sub_1003D0360();
      sub_100168D48(a1, (int *)(a2 + 96));
      break;
    default:
      return;
  }
}

void sub_100167D74(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_100167D88(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  unsigned int v13;
  int v14;
  __int16 v15;
  char v16;
  char v17;
  char v18;
  void *__p;
  char v20;
  char v21;
  char v22;
  char v23;
  char v24;
  char v25;
  char v26;
  __int128 v27;
  __int128 v28;
  int v29;
  char v30;
  char v31;
  char v32;
  char v33;
  char v34;
  void *v35;
  void *v36;
  char v37;
  char v38;
  void *v39;
  void *v40;
  char v41;
  __int16 v42;
  char v43;
  char v44;
  __int16 v45;
  char v46;
  char v47;
  char v48;
  char v49;

  v4 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
    sub_1003D040C(a2, v4, v5, v6, v7, v8, v9, v10);
  if (*((_BYTE *)a2 + 28))
  {
    v11 = *(_OWORD *)a2;
    v28 = *((_OWORD *)a2 + 1);
    v12 = *(_QWORD *)(a1 + 144);
    v14 = 5;
    LOBYTE(v15) = 0;
    v17 = 0;
    v18 = 0;
    v22 = 0;
    v23 = 0;
    v24 = 0;
    v25 = 0;
    v26 = 0;
    v29 = *((_DWORD *)a2 + 8);
    v27 = v11;
    v30 = 1;
    (*(void (**)(uint64_t, int *))(*(_QWORD *)v12 + 16))(v12, &v14);
    if (v22)
    {
      if (v21 && v20 < 0)
        operator delete(__p);
    }
  }
  v13 = *a2;
  if (v13 <= 0x1A)
  {
    if (((1 << v13) & 0x48F801C) != 0)
    {
      v14 = 12;
      v15 = 0;
      v16 = 0;
      v31 = 0;
      v32 = 0;
      v33 = 0;
      v34 = 0;
      v37 = 0;
      v38 = 0;
      v41 = 0;
      v42 = 0;
      v43 = 0;
      v44 = 0;
      v45 = v13;
      v46 = 0;
      v47 = 0;
      v48 = 0;
      v49 = 0;
      if ((sub_1001673DC(a1, (uint64_t)&v14) & 1) == 0
        && os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
      {
        sub_1003D03B4();
      }
      if (v41 && v39)
      {
        v40 = v39;
        operator delete(v39);
      }
      if (v37)
      {
        if (v35)
        {
          v36 = v35;
          operator delete(v35);
        }
      }
    }
    else if (v13 == 22 && os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
    {
      sub_1003D03E0();
    }
  }
}

void sub_100167F88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,uint64_t a21,char a22)
{
  if (a22 && a20 && a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100167FCC(unint64_t a1, unsigned __int16 *a2)
{
  NSObject *v4;
  _BYTE *v5;
  int v6;
  int v7;
  unsigned __int16 v8;
  NSObject *v9;
  NSObject *v10;
  int v11;
  NSObject *v12;
  int v13;
  NSObject *v14;
  std::runtime_error *v15;
  NSObject *v16;
  std::runtime_error *v17;
  NSObject *v18;
  std::runtime_error *exception;
  NSObject *v20;
  int v21;
  NSObject *v22;
  NSObject *v23;
  uint8_t *v24;
  int v25;
  __int16 v26;
  char v27;
  int v28;
  unsigned __int8 v29;
  int v30;
  uint64_t v31;
  unint64_t v32;
  NSObject *v33;
  int v34;
  dispatch_time_t v35;
  NSObject *v36;
  std::runtime_error *v37;
  std::runtime_error *v38;
  std::runtime_error *v39;
  _QWORD v40[5];
  _BYTE v41[633];
  uint64_t v42;
  void *v43;
  void *v44;
  char v45;
  __n128 v46;
  unint64_t v47;
  char v48;
  _BYTE v49[21];
  _BYTE __p[640];
  _BYTE v51[8];
  void *v52;
  void *v53;
  char v54;
  _BYTE v55[8];
  void *v56;
  void *v57;
  char v58;
  _BYTE v59[21];
  uint8_t buf[640];
  uint8_t v61[4];
  uint8_t *v62;
  __int16 v63;
  int v64;

  v4 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    sub_10000BF04(__p, off_100808C08[*((int *)a2 + 1)]);
    v5 = __p[23] >= 0 ? __p : *(_BYTE **)__p;
    v6 = *a2;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v5;
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "++ RoseScheduler::handleServiceRequestStatusUpdate (%s), ticket id: %d ++", buf, 0x12u);
    if ((__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
  }
  v7 = *((_DWORD *)a2 + 1);
  switch(v7)
  {
    case 0:
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_FAULT))
        sub_1003D0708();
      v8 = *a2;
      v9 = *(NSObject **)(a1 + 120);
      *(_QWORD *)__p = _NSConcreteStackBlock;
      *(_QWORD *)&__p[8] = 0x40000000;
      *(_QWORD *)&__p[16] = sub_1001670D4;
      *(_QWORD *)&__p[24] = &unk_100808808;
      *(_QWORD *)&__p[32] = a1;
      *(_WORD *)&__p[40] = v8;
      dispatch_async(v9, __p);
      goto LABEL_13;
    case 1:
      v18 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)__p = 0;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "[RoseScheduler] RangingDidStart", __p, 2u);
      }
      if (!sub_10016D600(*(_QWORD *)(a1 + 128), *a2, 1))
      {
        if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
          sub_1003D0528();
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "RangingDidStart: Failed to update service request state to Active");
      }
      goto LABEL_39;
    case 2:
      v14 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)__p = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "[RoseScheduler] RangingFailedToStart", __p, 2u);
      }
      if (!sub_10016D600(*(_QWORD *)(a1 + 128), *a2, 0))
      {
        if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
          sub_1003D0588();
        v15 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v15, "RangingFailedToStart: Failed to update service request state to Inactive");
      }
      goto LABEL_43;
    case 3:
      v16 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)__p = 0;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "[RoseScheduler] RangingStopped", __p, 2u);
      }
      if (!sub_10016D600(*(_QWORD *)(a1 + 128), *a2, 0))
      {
        if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
          sub_1003D0648();
        v17 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v17, "RangingStopped: Failed to update service request state to Inactive");
      }
      goto LABEL_43;
    case 4:
      v12 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)__p = 0;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "[RoseScheduler] RequestInvalidated", __p, 2u);
      }
      if (sub_10016D600(*(_QWORD *)(a1 + 128), *a2, 0))
      {
        v13 = 0;
        v11 = 1;
LABEL_44:
        v21 = 1;
LABEL_45:
        sub_10016D118(*(_QWORD *)(a1 + 128), *a2, __p);
        v23 = qword_10085F520;
        if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
        {
          sub_10000BF04(buf, off_100808C08[*((int *)a2 + 1)]);
          v24 = (buf[23] & 0x80u) == 0 ? buf : *(uint8_t **)buf;
          v25 = *a2;
          *(_DWORD *)v61 = 136315394;
          v62 = v24;
          v63 = 1024;
          v64 = v25;
          _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "#coex,RoseScheduler::handleServiceRequestStatusUpdate,shouldUpdateCoexProxy- event_type(%s), ticket_id(%d)", v61, 0x12u);
          if ((char)buf[23] < 0)
            operator delete(*(void **)buf);
        }
        if ((_BYTE)v52)
        {
          memcpy(buf, &__p[8], 0x278uLL);
          v26 = sub_1001625B8((uint64_t)&buf[8]);
          v27 = 9;
          if ((v26 & 0x100) == 0)
            v27 = 0;
          v28 = (unsigned __int16)(v26 & 0x100) >> 8;
          if ((v26 & 1) != 0)
            v29 = 5;
          else
            v29 = v27;
          if ((v26 & 1) != 0)
            LOBYTE(v28) = 1;
        }
        else
        {
          v29 = 0;
          LOBYTE(v28) = 0;
        }
        sub_100169C74(a1, 2, v29 | (v28 << 8));
        if (v13)
        {
          if (!sub_10016DA18(*(_QWORD *)(a1 + 128)) && !sub_10016DB38(*(_QWORD *)(a1 + 128)))
            goto LABEL_72;
          *(_DWORD *)__p = 1;
          __p[8] = 0;
          __p[16] = 0;
          if ((sub_100169D18(a1, (uint64_t)__p) & 1) != 0
            || !os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
          {
            goto LABEL_72;
          }
        }
        else
        {
          if (!v21)
            goto LABEL_72;
          if (sub_10016DA18(*(_QWORD *)(a1 + 128)))
            goto LABEL_72;
          if (sub_10016DB38(*(_QWORD *)(a1 + 128)))
            goto LABEL_72;
          *(_DWORD *)__p = 2;
          __p[8] = 0;
          __p[16] = 0;
          if ((sub_100169D18(a1, (uint64_t)__p) & 1) != 0
            || !os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
          {
            goto LABEL_72;
          }
        }
        sub_1003D049C();
LABEL_72:
        *(_QWORD *)&buf[4] = *(_QWORD *)a2;
        v30 = *((_DWORD *)a2 + 2);
        *(_DWORD *)buf = 1;
        *(_DWORD *)&buf[12] = v30;
        buf[16] = 1;
        buf[24] = 0;
        buf[80] = 0;
        buf[88] = 0;
        buf[112] = 0;
        buf[116] = 0;
        buf[120] = 0;
        buf[124] = 0;
        buf[160] = 0;
        (*(void (**)(_QWORD, uint8_t *))(**(_QWORD **)(a1 + 144) + 16))(*(_QWORD *)(a1 + 144), buf);
        if (v11)
        {
          v31 = sub_10016D8AC(*(_QWORD *)(a1 + 128));
          v32 = sub_10016DC58(*(_QWORD *)(a1 + 128));
          if (!v31 && v32 <= 1 && *(_BYTE *)(a1 + 260))
          {
            v33 = qword_10085F520;
            if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)__p = 0;
              _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "[RoseScheduler] No active service requests, Informing AOP proxy object that UCM had received a R2 GPIO trigger blanking request", __p, 2u);
              if (!*(_BYTE *)(a1 + 260))
                sub_10000BA44();
            }
            v34 = *(_DWORD *)(a1 + 256);
            *(_DWORD *)__p = 15;
            *(_WORD *)&__p[4] = 0;
            __p[8] = 0;
            __p[512] = 0;
            __p[520] = 0;
            __p[632] = 0;
            v51[0] = 0;
            v54 = 0;
            v55[0] = 0;
            v58 = 0;
            *(_WORD *)v59 = 0;
            v59[2] = 0;
            v59[5] = 0;
            *(_WORD *)&v59[6] = 0;
            *(_DWORD *)&v59[8] = v34;
            v59[12] = 1;
            v59[16] = 0;
            v59[20] = 0;
            v35 = dispatch_time(0, 50000000);
            v36 = *(NSObject **)(a1 + 120);
            v40[0] = _NSConcreteStackBlock;
            v40[1] = 1174405120;
            v40[2] = sub_100169DEC;
            v40[3] = &unk_100808828;
            v40[4] = a1;
            memcpy(v41, __p, sizeof(v41));
            sub_10016A3E8((uint64_t)&v42, (uint64_t)v51);
            sub_10016A47C(&v46, (uint64_t)v55);
            *(_OWORD *)v49 = *(_OWORD *)v59;
            *(_QWORD *)&v49[13] = *(_QWORD *)&v59[13];
            dispatch_after(v35, v36, v40);
            if (v48 && v46.n128_u64[1])
            {
              v47 = v46.n128_u64[1];
              operator delete((void *)v46.n128_u64[1]);
            }
            if (v45 && v43)
            {
              v44 = v43;
              operator delete(v43);
            }
            if (v58 && v56)
            {
              v57 = v56;
              operator delete(v56);
            }
            if (v54 && v52)
            {
              v53 = v52;
              operator delete(v52);
            }
          }
        }
        if (buf[80] && buf[64] && (char)buf[63] < 0)
          operator delete(*(void **)&buf[40]);
        return;
      }
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
        sub_1003D06A8();
      return;
    case 5:
      v20 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)__p = 0;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "[RoseScheduler] JobStart", __p, 2u);
      }
      if (!sub_10016D600(*(_QWORD *)(a1 + 128), *a2, 1))
      {
        if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
          sub_1003D04C8();
        v38 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v38, "JobStart: Failed to update service request state to Active");
      }
LABEL_39:
      v11 = 0;
      v21 = 0;
      v13 = 1;
      goto LABEL_45;
    case 6:
      v22 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)__p = 0;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "[RoseScheduler] JobStop", __p, 2u);
      }
      if (!sub_10016D600(*(_QWORD *)(a1 + 128), *a2, 0))
      {
        if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
          sub_1003D05E8();
        v39 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v39, "JobStop: Failed to update service request state to Inactive");
      }
LABEL_43:
      v11 = 0;
      v13 = 0;
      goto LABEL_44;
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
        sub_1003D0740(v7);
      v37 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v37, "RoseScheduler::handleServiceRequestStatusUpdate got unexpected status update");
    case 14:
      v10 = qword_10085F520;
      v11 = 0;
      if (!os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
        goto LABEL_72;
      *(_WORD *)__p = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "[RoseScheduler] TriggerCommandUpdated", __p, 2u);
LABEL_13:
      v11 = 0;
      goto LABEL_72;
    default:
      goto LABEL_13;
  }
}

void sub_1001689DC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_100168A70(uint64_t a1, int *a2)
{
  NSObject *v4;
  void **v5;
  int v6;
  NSObject *v7;
  void *__p[2];
  char v9;
  char v10;
  int v11;
  _BYTE v12[8];
  void *v13;
  char v14;
  char v15;
  uint64_t v16;
  char v17;
  char v18;
  char v19;
  char v20;
  char v21;
  char v22;
  char v23;
  uint8_t buf[4];
  _QWORD v25[4];
  char v26;
  char v27;
  uint64_t v28;

  v4 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    sub_10000BF04(__p, off_100808B30[*a2]);
    v5 = v10 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136315138;
    v25[0] = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "RoseScheduler::handleRoseInfrastructureStatusUpdate, status: %s", buf, 0xCu);
    if (v10 < 0)
      operator delete(__p[0]);
  }
  switch(*a2)
  {
    case 0:
      sub_1003D07F8();
    case 1:
    case 5:
    case 6:
      atomic_store(0, (unsigned __int8 *)(a1 + 153));
      break;
    case 3:
      std::mutex::lock((std::mutex *)(a1 + 8));
      atomic_store(1u, (unsigned __int8 *)(a1 + 153));
      std::condition_variable::notify_one((std::condition_variable *)(a1 + 160));
      std::mutex::unlock((std::mutex *)(a1 + 8));
      break;
    case 4:
      sub_1003D07D0();
    default:
      break;
  }
  *(_DWORD *)buf = *a2;
  sub_10015A524((_BYTE *)v25 + 4, (uint64_t)(a2 + 2));
  v28 = *((_QWORD *)a2 + 6);
  v6 = *(_DWORD *)buf;
  if (*(_DWORD *)buf == 3)
  {
    if (*(_BYTE *)(a1 + 154))
    {
      v6 = 3;
    }
    else
    {
      v7 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(__p[0]) = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "NB not available, Ready to Ready_UWB", (uint8_t *)__p, 2u);
      }
      v6 = 4;
      *(_DWORD *)buf = 4;
      LODWORD(v28) = 4;
      BYTE4(v28) = 1;
    }
  }
  *(_DWORD *)(a1 + 156) = v6;
  LODWORD(__p[0]) = 2;
  BYTE4(__p[0]) = 0;
  v9 = 0;
  v11 = v6;
  sub_10015A524(v12, (uint64_t)v25 + 4);
  v16 = v28;
  v17 = 1;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  v21 = 0;
  v22 = 0;
  v23 = 0;
  (*(void (**)(_QWORD, void **))(**(_QWORD **)(a1 + 144) + 16))(*(_QWORD *)(a1 + 144), __p);
  if (v17 && v15 && v14 < 0)
    operator delete(v13);
  if (v27)
  {
    if (v26 < 0)
      operator delete(*(void **)((char *)&v25[1] + 4));
  }
}

void sub_100168CF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,uint64_t a21,char a22)
{
  uint64_t v22;

  if (a22 && a20 && a19 < 0)
    operator delete(__p);
  if (*(_BYTE *)(v22 - 72))
  {
    if (*(char *)(v22 - 73) < 0)
      operator delete(*(void **)(v22 - 96));
  }
  _Unwind_Resume(exception_object);
}

void sub_100168D48(uint64_t a1, int *a2)
{
  NSObject *v4;
  char *v5;
  void **v6;
  void *__p[2];
  char v8;
  char v9;
  char v10;
  void *v11;
  char v12;
  char v13;
  char v14;
  char v15;
  char v16;
  int v17;
  char v18;
  char v19;
  char v20;
  uint8_t buf[4];
  void **v22;

  v4 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *a2 ? "Ready" : "NotReady";
    sub_10000BF04(__p, v5);
    v6 = v9 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136315138;
    v22 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "RoseScheduler::handleTimeConversionStateUpdate (%s)", buf, 0xCu);
    if (v9 < 0)
      operator delete(__p[0]);
  }
  LODWORD(__p[0]) = 4;
  BYTE4(__p[0]) = 0;
  v8 = 0;
  v10 = 0;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v17 = *a2;
  v18 = 1;
  v19 = 0;
  v20 = 0;
  (*(void (**)(_QWORD, void **))(**(_QWORD **)(a1 + 144) + 16))(*(_QWORD *)(a1 + 144), __p);
  if (v14 && v13 && v12 < 0)
    operator delete(v11);
}

void sub_100168EB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,char a23)
{
  _Unwind_Resume(exception_object);
}

void sub_100168EE4(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  int v5;
  uint8_t v6[16];

  v4 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[AP Scheduler] handleEventInternal RoseBluetoothEvent", v6, 2u);
  }
  v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    if (v5 == 1)
    {
      if (!*(_BYTE *)(a2 + 18))
        sub_1003D0820();
      sub_100168FA4(a1, (unsigned __int16 *)(a2 + 12));
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
  {
    sub_1003D0848();
  }
}

void sub_100168FA4(uint64_t a1, unsigned __int16 *a2)
{
  unint64_t v2;
  int v3;
  unint64_t v4;
  char v5;

  v2 = *a2 | ((unint64_t)*(unsigned int *)(a2 + 1) << 16);
  v3 = 1;
  v4 = v2;
  v5 = 1;
  if ((sub_10016A178(a1, (uint64_t)&v3) & 1) == 0 && os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
    sub_1003D0874();
}

void sub_100169040(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  unsigned int v5;
  uint64_t v6;
  const char *v7;
  NSObject *v8;
  int v9;
  NSObject *v10;
  uint64_t v11;
  NSObject *v12;
  _BOOL4 v13;
  const char *v14;
  NSObject *v15;
  int v16;
  NSObject *v17;
  int v18;
  int v19;
  uint64_t v20;
  char v21;
  char v22;
  char v23;
  char v24;
  void *v25;
  void *v26;
  char v27;
  char v28;
  void *__p;
  void *v30;
  char v31;
  __int16 v32;
  char v33;
  char v34;
  __int16 v35;
  int v36;
  char v37;
  int v38;
  char v39;

  v4 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v19) = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[AP Scheduler] handleEventInternal RoseCoexEvent", (uint8_t *)&v19, 2u);
  }
  v5 = *(_DWORD *)(a2 + 8);
  switch(v5)
  {
    case 0u:
    case 1u:
    case 4u:
      v6 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
      {
        if (v5 > 4)
          v7 = "N/A";
        else
          v7 = off_100808B68[v5];
        v19 = 136315138;
        v20 = (uint64_t)v7;
        v14 = "Not expected to handle coex event %s";
        v15 = v6;
        goto LABEL_26;
      }
      break;
    case 2u:
      v10 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v19) = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "[AP Scheduler] handleEventInternal RoseCoexEvent: R2ChannelToTriggerGpioBlankingChanged", (uint8_t *)&v19, 2u);
      }
      *(_DWORD *)(a1 + 256) = *(_DWORD *)(a2 + 16);
      *(_BYTE *)(a1 + 260) = 1;
      v11 = sub_10016DD2C(*(_QWORD *)(a1 + 128));
      v12 = qword_10085F520;
      v13 = os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT);
      if (v11)
      {
        if (v13)
        {
          v19 = 134217984;
          v20 = v11;
          v14 = "[AP Scheduler] handleEventInternal Service requests count = %zu, cannot send a set config now to trigger GPIO blanking.";
          v15 = v12;
LABEL_26:
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, v14, (uint8_t *)&v19, 0xCu);
        }
      }
      else
      {
        if (v13)
        {
          LOWORD(v19) = 0;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "[AP Scheduler] handleEventInternal Informing AOP proxy object that UCM had received a R2 GPIO trigger blanking request", (uint8_t *)&v19, 2u);
        }
        if (!*(_BYTE *)(a1 + 260))
          sub_1003D08A0();
        v16 = *(_DWORD *)(a1 + 256);
        v19 = 15;
        LOWORD(v20) = 0;
        BYTE4(v20) = 0;
        v21 = 0;
        v22 = 0;
        v23 = 0;
        v24 = 0;
        v27 = 0;
        v28 = 0;
        v31 = 0;
        v32 = 0;
        v33 = 0;
        v34 = 0;
        v35 = 0;
        v36 = v16;
        v37 = 1;
        LOBYTE(v38) = 0;
        v39 = 0;
        if ((sub_1001673DC(a1, (uint64_t)&v19) & 1) != 0)
        {
          if (!*(_BYTE *)(a1 + 260))
            sub_10000BA44();
          *(_DWORD *)(a1 + 264) = *(_DWORD *)(a1 + 256);
        }
        else if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
        {
          sub_1003D08C8();
        }
        if (*(_BYTE *)(a1 + 260))
          *(_BYTE *)(a1 + 260) = 0;
        if (v31 && __p)
        {
          v30 = __p;
          operator delete(__p);
        }
        if (v27 && v25)
        {
          v26 = v25;
          operator delete(v25);
        }
      }
      break;
    case 3u:
      v8 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v19) = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "[AP Scheduler] handleEventInternal RoseCoexEvent: R2NbChannelIdxToTriggerGpioBlankingChanged", (uint8_t *)&v19, 2u);
      }
      if (*(_DWORD *)(a2 + 16) == 2 && *(_BYTE *)(a2 + 22) && *(_BYTE *)(a2 + 26))
      {
        if (*(_DWORD *)(a1 + 264) == 2)
        {
          v9 = *(unsigned __int16 *)(a2 + 20) | (*(unsigned __int16 *)(a2 + 24) << 16);
          v19 = 16;
          LOWORD(v20) = 0;
          BYTE4(v20) = 0;
          v21 = 0;
          v22 = 0;
          v23 = 0;
          v24 = 0;
          v27 = 0;
          v28 = 0;
          v31 = 0;
          v32 = 0;
          v33 = 0;
          v34 = 0;
          v35 = 0;
          LOBYTE(v36) = 0;
          v37 = 0;
          v38 = v9;
          v39 = 1;
          if ((sub_1001673DC(a1, (uint64_t)&v19) & 1) == 0
            && os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
          {
            sub_1003D08F4();
          }
          sub_100167580((uint64_t)&v19);
        }
        else
        {
          v17 = qword_10085F520;
          if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
          {
            LOWORD(v19) = 0;
            _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "GPIO blanking was not triggered on NB, Caching NB channel indices to request blanking when pending set config request goes through.", (uint8_t *)&v19, 2u);
            if (!*(_BYTE *)(a2 + 22))
              sub_10000BA44();
          }
          if (!*(_BYTE *)(a2 + 26))
            sub_10000BA44();
          v18 = *(unsigned __int16 *)(a2 + 20) | (*(unsigned __int16 *)(a2 + 24) << 16);
          if (!*(_BYTE *)(a1 + 272))
            *(_BYTE *)(a1 + 272) = 1;
          *(_DWORD *)(a1 + 268) = v18;
        }
      }
      else if (*(_BYTE *)(a1 + 272))
      {
        *(_BYTE *)(a1 + 272) = 0;
      }
      break;
    default:
      return;
  }
}

void sub_1001694B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100167580((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1001694D4()
{
  NSObject *v0;
  uint8_t v1[16];

  v0 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v1 = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "[AP Scheduler] handleEventInternal RoseSecureElementEvent", v1, 2u);
  }
}

void sub_100169538(uint64_t a1, int *a2)
{
  NSObject *v4;
  uint64_t v5;
  char *v6;
  uint8_t *v7;
  uint64_t v8;
  char *v9;
  void *p_p;
  unsigned int v11;
  unsigned int v12;
  NSObject *v13;
  int v14;
  NSObject *v15;
  int v16;
  char v17;
  NSObject *v18;
  uint64_t v19;
  int v20;
  NSObject *v21;
  uint64_t v22;
  int v23;
  NSObject *v24;
  uint64_t v25;
  void *__p;
  char v27[8];
  void *v28;
  char v29;
  char v30;
  uint64_t v31;
  uint8_t v32[8];
  char v33;
  char v34;
  char v35;
  int v36;
  char v37[8];
  void *v38;
  char v39;
  char v40;
  uint64_t v41;
  char v42;
  __int128 v43;
  uint64_t v44;
  char v45;
  char v46;
  char v47;
  char v48;
  char v49;
  char v50;
  char v51;
  char v52;
  char v53;
  void *v54;
  void *v55;
  char v56;
  char v57;
  void *v58;
  void *v59;
  char v60;
  _WORD v61[2];
  char v62;
  __int16 v63;
  char v64;
  char v65;
  char v66;
  char v67;
  uint8_t buf[4];
  uint8_t *v69;
  __int16 v70;
  void *v71;

  v4 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *a2;
    if (v5 > 5)
      v6 = "Unknown";
    else
      v6 = off_100808B90[v5];
    v7 = v32;
    sub_10000BF04(v32, v6);
    if (v35 < 0)
      v7 = *(uint8_t **)v32;
    v8 = a2[1];
    if (v8 > 8)
      v9 = "Unknown";
    else
      v9 = off_100808BC0[v8];
    sub_10000BF04(&__p, v9);
    if (SHIBYTE(v28) >= 0)
      p_p = &__p;
    else
      p_p = __p;
    *(_DWORD *)buf = 136315394;
    v69 = v7;
    v70 = 2080;
    v71 = p_p;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[RegulatoryEvent] type: %s, reason: %s", buf, 0x16u);
    if (SHIBYTE(v28) < 0)
      operator delete(__p);
    if (v35 < 0)
      operator delete(*(void **)v32);
  }
  switch(*a2)
  {
    case 0:
      if (!*((_BYTE *)a2 + 8))
        sub_1003D0948();
      v11 = a2[1] - 1;
      if (v11 > 6)
        v12 = 0;
      else
        v12 = *(_DWORD *)&asc_10046D86C[4 * v11];
      sub_10016A51C((uint64_t)v32, v12);
      sub_1001673DC(a1, (uint64_t)v32);
      goto LABEL_42;
    case 1:
      if (!*((_BYTE *)a2 + 8))
        sub_1003D0920();
      *(_DWORD *)v32 = 10;
      *(_WORD *)&v32[4] = 0;
      v33 = 0;
      v50 = 0;
      v51 = 0;
      v52 = 0;
      v53 = 0;
      v56 = 0;
      v57 = 0;
      v60 = 0;
      memset(v61, 0, 3);
      v62 = 0;
      v63 = 0;
      v64 = 0;
      v65 = 0;
      v66 = 0;
      v67 = 0;
      sub_1001673DC(a1, (uint64_t)v32);
      goto LABEL_42;
    case 2:
      if (*((_BYTE *)a2 + 8))
        goto LABEL_25;
      goto LABEL_48;
    case 3:
      v15 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v32 = 0;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "[RegulatoryEvent] Narrowband disallowed", v32, 2u);
      }
      *(_BYTE *)(a1 + 154) = 0;
      v14 = 1;
      goto LABEL_49;
    case 4:
      v13 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v32 = 0;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "[RegulatoryEvent] Narrowband allowed", v32, 2u);
      }
      v14 = 1;
      *(_BYTE *)(a1 + 154) = 1;
      goto LABEL_49;
    case 5:
      v16 = a2[1];
      if (*((_BYTE *)a2 + 8) && v16 == 8)
      {
        if (!*((_BYTE *)a2 + 21))
        {
LABEL_48:
          v14 = 0;
          goto LABEL_49;
        }
        v17 = *((_BYTE *)a2 + 20);
        *(_DWORD *)v32 = 9;
        *(_WORD *)&v32[4] = 0;
        v33 = 0;
        v50 = 0;
        v51 = 0;
        v52 = 0;
        v53 = 0;
        v56 = 0;
        v57 = 0;
        v60 = 0;
        LOBYTE(v61[0]) = v17;
        *(_WORD *)((char *)v61 + 1) = 1;
        v62 = 0;
        v63 = 0;
        v64 = 0;
        v65 = 0;
        v66 = 0;
        v67 = 0;
        sub_1001673DC(a1, (uint64_t)v32);
LABEL_42:
        if (v60 && v58)
        {
          v59 = v58;
          operator delete(v58);
        }
        if (v56 && v54)
        {
          v55 = v54;
          operator delete(v54);
        }
        goto LABEL_48;
      }
      v14 = 0;
      if (*((_BYTE *)a2 + 8) && v16 == 3)
      {
        v18 = qword_10085F520;
        if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)v32 = 0;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "NBConfigurationChanged due to Country Chagned", v32, 2u);
        }
LABEL_25:
        *(_DWORD *)v32 = 11;
        *(_WORD *)&v32[4] = 0;
        v33 = 0;
        v50 = 0;
        v51 = 0;
        v52 = 0;
        v53 = 0;
        v56 = 0;
        v57 = 0;
        v60 = 0;
        memset(v61, 0, 3);
        v62 = 0;
        v63 = 0;
        v64 = 0;
        v65 = 0;
        v66 = 0;
        v67 = 0;
        sub_1001673DC(a1, (uint64_t)v32);
        goto LABEL_42;
      }
LABEL_49:
      v19 = *(_QWORD *)(a1 + 144);
      *(_DWORD *)v32 = 3;
      v32[4] = 0;
      v34 = 0;
      LOBYTE(v36) = 0;
      v42 = 0;
      v44 = *((_QWORD *)a2 + 2);
      v43 = *(_OWORD *)a2;
      v45 = 1;
      v46 = 0;
      v47 = 0;
      v48 = 0;
      v49 = 0;
      (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v19 + 16))(v19, v32);
      if (v42 && v40 && v39 < 0)
        operator delete(v38);
      if (!v14)
        return;
      v20 = *(_DWORD *)(a1 + 156);
      if (v20 == 3)
      {
        if (*(_BYTE *)(a1 + 154))
          return;
        v24 = qword_10085F520;
        if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)v32 = 0;
          _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "Ready is switched to Ready_UWB because NB is not available", v32, 2u);
        }
        v22 = 0x100000004;
        v23 = 4;
      }
      else
      {
        if (v20 != 4 || !*(_BYTE *)(a1 + 154))
          return;
        v21 = qword_10085F520;
        if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)v32 = 0;
          _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "Ready_UWB is switched to Ready because NB is available", v32, 2u);
        }
        v22 = 0;
        v23 = 3;
      }
      *(_DWORD *)(a1 + 156) = v23;
      LODWORD(__p) = v23;
      v27[0] = 0;
      v30 = 0;
      v31 = v22;
      v25 = *(_QWORD *)(a1 + 144);
      *(_DWORD *)v32 = 2;
      v32[4] = 0;
      v34 = 0;
      v36 = v23;
      sub_10015A524(v37, (uint64_t)v27);
      v41 = v31;
      v42 = 1;
      LOBYTE(v43) = 0;
      v45 = 0;
      v46 = 0;
      v47 = 0;
      v48 = 0;
      v49 = 0;
      (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v25 + 16))(v25, v32);
      if (v42 && v40 && v39 < 0)
        operator delete(v38);
      if (v30)
      {
        if (v29 < 0)
          operator delete(v28);
      }
      return;
    default:
      goto LABEL_48;
  }
}

void sub_100169BB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,char a34,uint64_t a35,char a36)
{
  sub_100167580((uint64_t)&a20);
  _Unwind_Resume(a1);
}

_QWORD *sub_100169C60@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, off_100808C08[a1]);
}

unint64_t sub_100169C74(unint64_t result, int a2, __int16 a3)
{
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  int v7;
  char v8;
  __int16 v9;

  v3 = result;
  LOBYTE(v6) = 0;
  v8 = 0;
  v9 = 0;
  if (a2 == 2)
  {
    result = *(_QWORD *)(result + 128);
    if (!result)
      return result;
    if (HIBYTE(a3))
      v9 = a3 | 0x100;
    v5 = 2;
    v6 = sub_10016DD34(result);
    v7 = v4;
    v8 = 1;
    return sub_10016A24C(v3, (uint64_t)&v5);
  }
  if (a2 != 1)
    sub_1003D0970();
  if (HIBYTE(a3))
  {
    v5 = 1;
    v9 = a3 | 0x100;
    return sub_10016A24C(v3, (uint64_t)&v5);
  }
  return result;
}

uint64_t sub_100169D18(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  std::mutex *v6;
  uint64_t v7;

  v2 = atomic_load((unsigned __int8 *)(a1 + 152));
  if ((v2 & 1) != 0)
  {
    v6 = (std::mutex *)(a1 + 8);
    std::mutex::lock((std::mutex *)(a1 + 8));
    v7 = *(_QWORD *)(a1 + 80);
    if (v7)
    {
      v3 = sub_10016AC6C(v7, a2);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
        sub_1003D023C();
      v3 = 0;
    }
    std::mutex::unlock(v6);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
      sub_1003D0210();
    return 0;
  }
  return v3;
}

void sub_100169DD8(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_100169DEC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  int v6;
  int v7;
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = sub_10016DD2C(*(_QWORD *)(v2 + 128));
  if (v3)
  {
    v4 = v3;
    v5 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
    {
      v7 = 134217984;
      v8 = v4;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "[RoseScheduler] Service requests count = %zu, cannot send a set config now to trigger GPIO blanking.", (uint8_t *)&v7, 0xCu);
    }
  }
  else
  {
    v6 = sub_1001673DC(v2, a1 + 40);
    if (!*(_BYTE *)(a1 + 788))
      sub_1003D0998();
    sub_100169EF8(v2, v6, *(_DWORD *)(a1 + 784));
  }
}

void sub_100169EF8(uint64_t a1, int a2, int a3)
{
  NSObject *v3;
  NSObject *v6;
  int v7;
  int v8;
  int v9;
  NSObject *v10;
  int v11;
  int v12;
  __int16 v13;
  int v14;
  char v15;
  char v16;
  char v17;
  char v18;
  void *v19;
  void *v20;
  char v21;
  char v22;
  void *__p;
  void *v24;
  char v25;
  __int16 v26;
  char v27;
  char v28;
  __int16 v29;
  char v30;
  char v31;
  int v32;
  char v33;

  v3 = qword_10085F520;
  if (a2)
  {
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v11) = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Successfully sent set config to trigger GPIO blanking on UCM event", (uint8_t *)&v11, 2u);
    }
    *(_DWORD *)(a1 + 264) = a3;
    if (!*(_BYTE *)(a1 + 260))
      sub_10000BA44();
    if (*(_DWORD *)(a1 + 256) == a3)
    {
      *(_BYTE *)(a1 + 260) = 0;
      if (a3 == 2 && *(_BYTE *)(a1 + 272))
      {
        v6 = qword_10085F520;
        if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
        {
          v7 = *(unsigned __int16 *)(a1 + 268);
          v8 = *(unsigned __int16 *)(a1 + 270);
          v11 = 67109376;
          v12 = v7;
          v13 = 1024;
          v14 = v8;
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "[RoseScheduler] Sent setConfig to trigger GPIO blanking on NB, Informing AOP proxy object that UCM had received blanking request for NB channel indices %d -> %d", (uint8_t *)&v11, 0xEu);
          if (!*(_BYTE *)(a1 + 272))
            sub_10000BA44();
        }
        v9 = *(_DWORD *)(a1 + 268);
        v11 = 16;
        LOWORD(v12) = 0;
        LOBYTE(v13) = 0;
        v15 = 0;
        v16 = 0;
        v17 = 0;
        v18 = 0;
        v21 = 0;
        v22 = 0;
        v25 = 0;
        v26 = 0;
        v27 = 0;
        v28 = 0;
        v29 = 0;
        v30 = 0;
        v31 = 0;
        v32 = v9;
        v33 = 1;
        if ((sub_1001673DC(a1, (uint64_t)&v11) & 1) == 0
          && os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
        {
          sub_1003D08F4();
        }
        if (*(_BYTE *)(a1 + 272))
          *(_BYTE *)(a1 + 272) = 0;
        if (v25 && __p)
        {
          v24 = __p;
          operator delete(__p);
        }
        if (v21)
        {
          if (v19)
          {
            v20 = v19;
            operator delete(v19);
          }
        }
      }
    }
    else
    {
      v10 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v11) = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Potentially got a new UCM while sending the previous set config, not resetting pending channel", (uint8_t *)&v11, 2u);
      }
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
  {
    sub_1003D09C0();
  }
}

void sub_10016A15C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100167580((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10016A178(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  std::mutex *v6;
  uint64_t v7;

  v2 = atomic_load((unsigned __int8 *)(a1 + 152));
  if ((v2 & 1) != 0)
  {
    v6 = (std::mutex *)(a1 + 8);
    std::mutex::lock((std::mutex *)(a1 + 8));
    v7 = *(_QWORD *)(a1 + 72);
    if (v7)
    {
      v3 = sub_10016B924(v7, a2);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
        sub_1003D023C();
      v3 = 0;
    }
    std::mutex::unlock(v6);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
      sub_1003D0210();
    return 0;
  }
  return v3;
}

void sub_10016A238(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10016A24C(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  std::mutex *v6;
  uint64_t v7;

  v2 = atomic_load((unsigned __int8 *)(a1 + 152));
  if ((v2 & 1) != 0)
  {
    v6 = (std::mutex *)(a1 + 8);
    std::mutex::lock((std::mutex *)(a1 + 8));
    v7 = *(_QWORD *)(a1 + 88);
    if (v7)
    {
      v3 = sub_10014CF84(v7, a2);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
        sub_1003D023C();
      v3 = 0;
    }
    std::mutex::unlock(v6);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
      sub_1003D0210();
    return 0;
  }
  return v3;
}

void sub_10016A30C(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10016A324(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = 6;
  *(_WORD *)(a1 + 4) = *(_WORD *)a2;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 512) = 0;
  *(_BYTE *)(a1 + 520) = 0;
  *(_BYTE *)(a1 + 632) = 0;
  *(_BYTE *)(a1 + 640) = 0;
  *(_BYTE *)(a1 + 672) = 0;
  *(_WORD *)(a1 + 680) = *(_WORD *)a2;
  *(_QWORD *)(a1 + 696) = 0;
  *(_QWORD *)(a1 + 704) = 0;
  *(_QWORD *)(a1 + 688) = 0;
  sub_1001530EC((_QWORD *)(a1 + 688), *(const void **)(a2 + 8), *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8));
  *(_OWORD *)(a1 + 712) = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 728) = 1;
  *(_WORD *)(a1 + 736) = 0;
  *(_BYTE *)(a1 + 738) = 0;
  *(_BYTE *)(a1 + 741) = 0;
  *(_WORD *)(a1 + 742) = 0;
  *(_BYTE *)(a1 + 744) = 0;
  *(_BYTE *)(a1 + 748) = 0;
  *(_BYTE *)(a1 + 752) = 0;
  *(_BYTE *)(a1 + 756) = 0;
  return a1;
}

void sub_10016A3CC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 672))
    sub_1003D09EC(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10016A3E8(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 32) = 0;
  sub_10016A430((_QWORD *)a1, a2);
  return a1;
}

void sub_10016A414(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 32))
    sub_1003D0A04(v1);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_10016A430(_QWORD *result, uint64_t a2)
{
  _QWORD *v2;

  if (*(_BYTE *)(a2 + 32))
  {
    v2 = result;
    *(_DWORD *)result = *(_DWORD *)a2;
    result[2] = 0;
    result[3] = 0;
    result[1] = 0;
    result = sub_1001530EC(result + 1, *(const void **)(a2 + 8), *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8));
    *((_BYTE *)v2 + 32) = 1;
  }
  return result;
}

__n128 *sub_10016A47C(__n128 *a1, uint64_t a2)
{
  a1->n128_u8[0] = 0;
  a1[3].n128_u8[0] = 0;
  sub_10016A4C4(a1, a2);
  return a1;
}

void sub_10016A4A8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 48))
    sub_1003D0A04(v1);
  _Unwind_Resume(exception_object);
}

__n128 sub_10016A4C4(__n128 *a1, uint64_t a2)
{
  __n128 result;

  if (*(_BYTE *)(a2 + 48))
  {
    a1->n128_u16[0] = *(_WORD *)a2;
    a1[1].n128_u64[0] = 0;
    a1[1].n128_u64[1] = 0;
    a1->n128_u64[1] = 0;
    sub_1001530EC(&a1->n128_u64[1], *(const void **)(a2 + 8), *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8));
    result = *(__n128 *)(a2 + 32);
    a1[2] = result;
    a1[3].n128_u8[0] = 1;
  }
  return result;
}

uint64_t sub_10016A51C(uint64_t result, unsigned int a2)
{
  *(_DWORD *)result = a2;
  *(_WORD *)(result + 4) = 0;
  *(_BYTE *)(result + 8) = 0;
  *(_BYTE *)(result + 512) = 0;
  *(_BYTE *)(result + 520) = 0;
  *(_BYTE *)(result + 632) = 0;
  *(_BYTE *)(result + 640) = 0;
  *(_BYTE *)(result + 672) = 0;
  *(_BYTE *)(result + 680) = 0;
  *(_BYTE *)(result + 728) = 0;
  *(_WORD *)(result + 736) = 0;
  *(_BYTE *)(result + 738) = 0;
  *(_BYTE *)(result + 741) = 0;
  *(_WORD *)(result + 742) = 0;
  *(_BYTE *)(result + 744) = 0;
  *(_BYTE *)(result + 748) = 0;
  *(_BYTE *)(result + 752) = 0;
  *(_BYTE *)(result + 756) = 0;
  if (a2 > 0xE || ((1 << a2) & 0x6D00) == 0)
    __assert_rtn("AOPRoseCommandMessage", "AOPRoseCommandMessage.h", 68, "message_type == AOPRoseCommandMessageType::SystemOn || message_type == AOPRoseCommandMessageType::RefreshConfiguration || message_type == AOPRoseCommandMessageType::LPEMEnable || message_type == AOPRoseCommandMessageType::SystemOff_AirplaneMode || message_type == AOPRoseCommandMessageType::SystemOff_RestrictedRegion");
  return result;
}

void sub_10016A5CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  _BYTE *v10;

  if (*(_BYTE *)(a10 + 728))
    sub_1003D0268(a10);
  sub_1003D0A18(v10, a10);
  _Unwind_Resume(a1);
}

void sub_10016A5F8(uint64_t a1, uint64_t a2)
{
  std::mutex *v4;
  std::runtime_error *exception;

  if (!a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "[ProxyObjectBase] Given nullptr event consumer.");
  }
  v4 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  *(_QWORD *)(a1 + 8) = a2;
  std::mutex::unlock(v4);
}

void sub_10016A668(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10016A67C(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = a2[2];
  if (!v4)
    sub_1003D0A34(0, (uint64_t)a2, a3);
  sub_10016A5F8(v4, a1);
  v8 = a2[3];
  if (!v8)
    sub_1003D0A34(0, v6, v7);
  sub_10016A5F8(v8, a1);
  v11 = a2[4];
  if (!v11)
    sub_1003D0A34(0, v9, v10);
  sub_10016A5F8(v11, a1);
  v14 = a2[5];
  if (!v14)
    sub_1003D0A34(0, v12, v13);
  sub_10016A5F8(v14, a1);
  return 1;
}

void sub_10016A6F0(uint64_t a1)
{
  sub_100167B34(*(_QWORD *)(a1 + 32), a1 + 40);
}

__n128 sub_10016A700(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v5;
  __int128 v6;

  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  sub_10015A4BC(a1 + 56, a2 + 56);
  result = *(__n128 *)(a2 + 120);
  v5 = *(_OWORD *)(a2 + 136);
  v6 = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 165) = *(_OWORD *)(a2 + 165);
  *(_OWORD *)(a1 + 152) = v6;
  *(_OWORD *)(a1 + 136) = v5;
  *(__n128 *)(a1 + 120) = result;
  return result;
}

uint64_t sub_10016A75C(uint64_t a1)
{
  return sub_10015A5D0(a1 + 56);
}

void sub_10016A764(uint64_t a1)
{
  sub_100168EE4(*(_QWORD *)(a1 + 32), a1 + 40);
}

void sub_10016A774(uint64_t a1)
{
  sub_100169040(*(_QWORD *)(a1 + 32), a1 + 40);
}

void sub_10016A784(uint64_t a1)
{
  sub_100169538(*(_QWORD *)(a1 + 32), (int *)(a1 + 40));
}

void sub_10016A79C()
{
  operator delete();
}

_QWORD *sub_10016A7B0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_100808940;
  result[1] = v3;
  return result;
}

uint64_t sub_10016A7E4(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_100808940;
  a2[1] = v2;
  return result;
}

uint64_t sub_10016A800(uint64_t a1, uint64_t a2)
{
  return sub_1001673DC(*(_QWORD *)(a1 + 8), a2);
}

uint64_t sub_10016A808(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10016A844()
{
}

void sub_10016A854()
{
  operator delete();
}

_QWORD *sub_10016A868(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1008089D0;
  result[1] = v3;
  return result;
}

uint64_t sub_10016A89C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1008089D0;
  a2[1] = v2;
  return result;
}

uint64_t sub_10016A8B8(uint64_t a1)
{
  return sub_10016A908(*(_QWORD *)(a1 + 8));
}

uint64_t sub_10016A8C0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10016A8FC()
{
}

uint64_t sub_10016A908(uint64_t a1)
{
  unsigned __int8 v1;
  uint64_t v2;
  std::mutex *v4;

  v1 = atomic_load((unsigned __int8 *)(a1 + 152));
  if ((v1 & 1) != 0)
  {
    v4 = (std::mutex *)(a1 + 8);
    std::mutex::lock((std::mutex *)(a1 + 8));
    if (*(_QWORD *)(a1 + 104))
    {
      v2 = sub_10016E628();
    }
    else
    {
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
        sub_1003D023C();
      v2 = 0;
    }
    std::mutex::unlock(v4);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
      sub_1003D0210();
    return 0;
  }
  return v2;
}

void sub_10016A9C8(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_10016A9DC(void *__p@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)(a2 + 16) = __p;
  operator delete(__p);
}

void sub_10016A9E4(void *__p@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)(a2 + 696) = __p;
  operator delete(__p);
}

void sub_10016A9F8(void *a1, int a2, int a3, const char *a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint8_t buf)
{
  NSObject *v13;

  _os_log_error_impl(a1, v13, OS_LOG_TYPE_ERROR, a4, &buf, 0xCu);
}

void sub_10016AA0C(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 49, a4);
}

_QWORD *sub_10016AA34@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, off_100808CC0[a1]);
}

_QWORD *sub_10016AA48@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, off_100808D18[a1]);
}

_QWORD *sub_10016AA5C@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, off_100808D60[a1]);
}

_QWORD *sub_10016AA70@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, off_100808D80[a1]);
}

double sub_10016AA84(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)(a1 + 16) = a2;
  *(_QWORD *)(a1 + 24) = 850045863;
  result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)a1 = off_100808C90;
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

uint64_t sub_10016AAB0(uint64_t a1)
{
  *(_QWORD *)a1 = off_100806F08;
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  return a1;
}

void sub_10016AAE0(uint64_t a1)
{
  *(_QWORD *)a1 = off_100806F08;
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  operator delete();
}

void sub_10016AB20(uint64_t a1, uint64_t a2)
{
  std::mutex *v4;
  uint64_t v5;

  v4 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 48))(v5, a2);
  std::mutex::unlock(v4);
}

void sub_10016AB70(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_10016AB84@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, off_100808DF8[a1]);
}

_QWORD *sub_10016AB98@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, off_100808E50[a1]);
}

_QWORD *sub_10016ABAC@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, off_100808E98[a1]);
}

_QWORD *sub_10016ABC0@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, off_100808EB8[a1]);
}

double sub_10016ABD4(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)(a1 + 16) = a2;
  *(_QWORD *)(a1 + 24) = 850045863;
  result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_QWORD *)a1 = off_100808DB0;
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

uint64_t sub_10016ABFC(uint64_t a1)
{
  *(_QWORD *)a1 = off_100806F08;
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  return a1;
}

void sub_10016AC2C(uint64_t a1)
{
  *(_QWORD *)a1 = off_100806F08;
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  operator delete();
}

uint64_t sub_10016AC6C(uint64_t a1, uint64_t a2)
{
  std::mutex *v4;
  uint64_t v5;

  if (!*(_QWORD *)(a1 + 16))
    sub_1003D0A58();
  v4 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  v5 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 16) + 56))(*(_QWORD *)(a1 + 16), a2);
  std::mutex::unlock(v4);
  return v5;
}

void sub_10016ACD0(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_10016ACE4(uint64_t a1, uint64_t a2)
{
  int v2;
  std::runtime_error *exception;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _OWORD v12[9];
  uint64_t v13;

  v2 = *(_DWORD *)(a2 + 8);
  if (v2 == 1)
  {
    if (!*(_QWORD *)(a1 + 88))
      sub_1003D0A80();
    if (!*(_BYTE *)(a2 + 168))
      sub_1003D0AA8();
    std::mutex::lock((std::mutex *)(a1 + 24));
    if (!*(_BYTE *)(a2 + 168))
      sub_10000BA44();
    v6 = *(_QWORD *)(a1 + 88);
    v7 = *(_OWORD *)(a2 + 96);
    v12[4] = *(_OWORD *)(a2 + 80);
    v12[5] = v7;
    v8 = *(_OWORD *)(a2 + 64);
    v12[2] = *(_OWORD *)(a2 + 48);
    v12[3] = v8;
    v13 = *(_QWORD *)(a2 + 160);
    v9 = *(_OWORD *)(a2 + 144);
    v10 = *(_OWORD *)(a2 + 112);
    v12[7] = *(_OWORD *)(a2 + 128);
    v12[8] = v9;
    v12[6] = v10;
    v11 = *(_OWORD *)(a2 + 32);
    v12[0] = *(_OWORD *)(a2 + 16);
    v12[1] = v11;
    (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v6 + 24))(v6, v12);
    std::mutex::unlock((std::mutex *)(a1 + 24));
  }
  else if (!v2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "[MotionProxyObject] Ingest event of unspecified type.");
  }
}

void sub_10016ADD8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_10016ADFC@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, off_100808F40[a1]);
}

_QWORD *sub_10016AE10@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, off_100808F98[a1]);
}

_QWORD *sub_10016AE24@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, off_100808FE0[a1]);
}

_QWORD *sub_10016AE38@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, off_100809000[a1]);
}

_QWORD *sub_10016AE4C(_QWORD *result, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  v4 = *a2;
  v3 = a2[1];
  *result = off_100808EE8;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a3;
  return result;
}

uint64_t sub_10016AE80(uint64_t a1, __int16 *a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  _BYTE v22[24];
  _BYTE *v23;
  _BYTE v24[24];
  _BYTE *v25;
  _BYTE v26[24];
  _BYTE *v27;
  _BYTE v28[24];
  _BYTE *v29;
  _BYTE v30[24];
  _BYTE *v31;
  _BYTE v32[24];
  _BYTE *v33;
  _BYTE v34[24];
  _BYTE *v35;
  _BYTE v36[24];
  _BYTE *v37;

  switch(a3)
  {
    case 0:
      sub_100027674((uint64_t)v32, a4);
      v7 = sub_100027674((uint64_t)v30, a5);
      LOBYTE(a2) = sub_10016B38C(v7, a2, (uint64_t)v32);
      v8 = v31;
      if (v31 == v30)
      {
        v9 = 4;
        v8 = v30;
      }
      else
      {
        if (!v31)
        {
LABEL_24:
          v19 = v33;
          if (v33 != v32)
            goto LABEL_29;
          v20 = 4;
          v19 = v32;
          goto LABEL_31;
        }
        v9 = 5;
      }
      (*(void (**)(void))(*v8 + 8 * v9))();
      goto LABEL_24;
    case 1:
      sub_100027674((uint64_t)v28, a4);
      v10 = sub_100027674((uint64_t)v26, a5);
      LOBYTE(a2) = sub_10016B4AC(v10, a2, (uint64_t)v28);
      v11 = v27;
      if (v27 == v26)
      {
        v12 = 4;
        v11 = v26;
      }
      else
      {
        if (!v27)
          goto LABEL_28;
        v12 = 5;
      }
      (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_28:
      v19 = v29;
      if (v29 != v28)
        goto LABEL_29;
      v20 = 4;
      v19 = v28;
      goto LABEL_31;
    case 2:
      sub_100027674((uint64_t)v24, a4);
      v13 = sub_100027674((uint64_t)v22, a5);
      LOBYTE(a2) = sub_10016B5FC(v13, a2, (uint64_t)v24);
      v14 = v23;
      if (v23 == v22)
      {
        v15 = 4;
        v14 = v22;
      }
      else
      {
        if (!v23)
          goto LABEL_16;
        v15 = 5;
      }
      (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_16:
      v19 = v25;
      if (v25 != v24)
        goto LABEL_29;
      v20 = 4;
      v19 = v24;
      goto LABEL_31;
    case 3:
      sub_100027674((uint64_t)v36, a4);
      v16 = sub_100027674((uint64_t)v34, a5);
      LOBYTE(a2) = sub_10016B270(v16, a2, (uint64_t)v36);
      v17 = v35;
      if (v35 == v34)
      {
        v18 = 4;
        v17 = v34;
      }
      else
      {
        if (!v35)
          goto LABEL_20;
        v18 = 5;
      }
      (*(void (**)(void))(*v17 + 8 * v18))();
LABEL_20:
      v19 = v37;
      if (v37 == v36)
      {
        v20 = 4;
        v19 = v36;
      }
      else
      {
LABEL_29:
        if (!v19)
          return a2 & 1;
        v20 = 5;
      }
LABEL_31:
      (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
      return a2 & 1;
    default:
      return a2 & 1;
  }
}

void sub_10016B0EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,char *a21,char a22,uint64_t a23,uint64_t a24,char *a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;

  v30 = a21;
  if (a21 == &a18)
  {
    v31 = 4;
    v30 = &a18;
  }
  else
  {
    if (!a21)
      goto LABEL_6;
    v31 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v30 + 8 * v31))();
LABEL_6:
  v32 = a25;
  if (a25 == &a22)
  {
    v33 = 4;
    v32 = &a22;
  }
  else
  {
    if (!a25)
      goto LABEL_11;
    v33 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v32 + 8 * v33))();
LABEL_11:
  _Unwind_Resume(exception_object);
}

uint64_t sub_10016B270(uint64_t a1, __int16 *a2, uint64_t a3)
{
  __int16 v4;
  uint64_t v5;
  uint64_t v6;
  int v8;
  __int16 v9;
  _BYTE v10[640];
  void *v11;
  void *v12;
  char v13;
  char v14;
  void *__p;
  void *v16;
  char v17;
  __int16 v18;
  char v19;
  char v20;
  __int16 v21;
  char v22;
  char v23;
  char v24;
  char v25;

  v4 = *a2;
  v8 = 4;
  v9 = v4;
  memcpy(v10, a2 + 4, 0x1F8uLL);
  v10[504] = 1;
  v10[512] = 0;
  v10[624] = 0;
  v10[632] = 0;
  v13 = 0;
  v14 = 0;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  v21 = 0;
  v22 = 0;
  v23 = 0;
  v24 = 0;
  v25 = 0;
  v5 = *(_QWORD *)(a3 + 24);
  if (!v5)
    sub_100027BC4();
  v6 = (*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)v5 + 48))(v5, &v8);
  if (v17 && __p)
  {
    v16 = __p;
    operator delete(__p);
  }
  if (v13 && v11)
  {
    v12 = v11;
    operator delete(v11);
  }
  return v6;
}

void sub_10016B378(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100167580((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10016B38C(uint64_t a1, __int16 *a2, uint64_t a3)
{
  __int16 v4;
  uint64_t v5;
  uint64_t v6;
  int v8;
  __int16 v9;
  _BYTE v10[640];
  void *v11;
  void *v12;
  char v13;
  char v14;
  void *__p;
  void *v16;
  char v17;
  __int16 v18;
  char v19;
  char v20;
  __int16 v21;
  char v22;
  char v23;
  char v24;
  char v25;

  v4 = *a2;
  v8 = 1;
  v9 = v4;
  memcpy(v10, a2 + 4, 0x1F8uLL);
  v10[504] = 1;
  v10[512] = 0;
  v10[624] = 0;
  v10[632] = 0;
  v13 = 0;
  v14 = 0;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  v21 = 0;
  v22 = 0;
  v23 = 0;
  v24 = 0;
  v25 = 0;
  v5 = *(_QWORD *)(a3 + 24);
  if (!v5)
    sub_100027BC4();
  v6 = (*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)v5 + 48))(v5, &v8);
  if (v17 && __p)
  {
    v16 = __p;
    operator delete(__p);
  }
  if (v13 && v11)
  {
    v12 = v11;
    operator delete(v11);
  }
  return v6;
}

void sub_10016B498(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100167580((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10016B4AC(uint64_t a1, __int16 *a2, uint64_t a3)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int16 v7;
  uint64_t v8;
  uint64_t v9;
  int v11;
  __int16 v12;
  _BYTE v13[512];
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  char v21;
  char v22;
  void *v23;
  void *v24;
  char v25;
  char v26;
  void *__p;
  void *v28;
  char v29;
  __int16 v30;
  char v31;
  char v32;
  __int16 v33;
  char v34;
  char v35;
  char v36;
  char v37;

  if (!*((_BYTE *)a2 + 624))
    sub_10000BA44();
  v4 = *((_OWORD *)a2 + 37);
  v18 = *((_OWORD *)a2 + 36);
  v19 = v4;
  v20 = *((_OWORD *)a2 + 38);
  v5 = *((_OWORD *)a2 + 33);
  v14 = *((_OWORD *)a2 + 32);
  v15 = v5;
  v6 = *((_OWORD *)a2 + 35);
  v16 = *((_OWORD *)a2 + 34);
  v17 = v6;
  v7 = *a2;
  v11 = 2;
  v12 = v7;
  memcpy(v13, a2 + 4, 0x1F8uLL);
  v13[504] = 1;
  v21 = 1;
  v22 = 0;
  v25 = 0;
  v26 = 0;
  v29 = 0;
  v30 = 0;
  v31 = 0;
  v32 = 0;
  v33 = 0;
  v34 = 0;
  v35 = 0;
  v36 = 0;
  v37 = 0;
  v8 = *(_QWORD *)(a3 + 24);
  if (!v8)
    sub_100027BC4();
  v9 = (*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)v8 + 48))(v8, &v11);
  if (v29 && __p)
  {
    v28 = __p;
    operator delete(__p);
  }
  if (v25 && v23)
  {
    v24 = v23;
    operator delete(v23);
  }
  return v9;
}

void sub_10016B5E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100167580((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10016B5FC(uint64_t a1, __int16 *a2, uint64_t a3)
{
  __int16 v4;
  uint64_t v5;
  uint64_t v6;
  int v8;
  __int16 v9;
  _BYTE v10[640];
  void *v11;
  void *v12;
  char v13;
  char v14;
  void *__p;
  void *v16;
  char v17;
  __int16 v18;
  char v19;
  char v20;
  __int16 v21;
  char v22;
  char v23;
  char v24;
  char v25;

  v4 = *a2;
  v8 = 3;
  v9 = v4;
  memcpy(v10, a2 + 4, 0x1F8uLL);
  v10[504] = 1;
  v10[512] = 0;
  v10[624] = 0;
  v10[632] = 0;
  v13 = 0;
  v14 = 0;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  v21 = 0;
  v22 = 0;
  v23 = 0;
  v24 = 0;
  v25 = 0;
  v5 = *(_QWORD *)(a3 + 24);
  if (!v5)
    sub_100027BC4();
  v6 = (*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)v5 + 48))(v5, &v8);
  if (v17 && __p)
  {
    v16 = __p;
    operator delete(__p);
  }
  if (v13 && v11)
  {
    v12 = v11;
    operator delete(v11);
  }
  return v6;
}

void sub_10016B704(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100167580((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_10016B718(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 8) == 2 && *(_BYTE *)(a2 + 56) == 0)
    sub_1003D0AD0();
}

_QWORD *sub_10016B740(_QWORD *a1)
{
  *a1 = off_100808EE8;
  sub_10001AE68((uint64_t)(a1 + 1));
  return a1;
}

void sub_10016B770(_QWORD *a1)
{
  *a1 = off_100808EE8;
  sub_10001AE68((uint64_t)(a1 + 1));
  operator delete();
}

_QWORD *sub_10016B7C4@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, off_100809060[a1]);
}

_QWORD *sub_10016B7D8@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, off_1008090B8[a1]);
}

_QWORD *sub_10016B7EC@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, off_100809100[a1]);
}

_QWORD *sub_10016B800@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, off_100809120[a1]);
}

double sub_10016B814(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)(a1 + 16) = a2;
  *(_QWORD *)(a1 + 24) = 850045863;
  result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_QWORD *)a1 = off_100809030;
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

uint64_t sub_10016B83C(uint64_t a1)
{
  *(_QWORD *)a1 = off_100806F08;
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  return a1;
}

void sub_10016B86C(uint64_t a1)
{
  *(_QWORD *)a1 = off_100806F08;
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  operator delete();
}

uint64_t sub_10016B8AC(uint64_t a1, uint64_t a2)
{
  std::mutex *v4;
  uint64_t v5;

  if (!*(_QWORD *)(a1 + 16))
    sub_1003D0AF8();
  v4 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  v5 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 16) + 24))(*(_QWORD *)(a1 + 16), a2);
  std::mutex::unlock(v4);
  return v5;
}

void sub_10016B910(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10016B924(uint64_t a1, uint64_t a2)
{
  std::mutex *v4;
  uint64_t v5;

  if (!*(_QWORD *)(a1 + 16))
    sub_1003D0B20();
  v4 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  v5 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16), a2);
  std::mutex::unlock(v4);
  return v5;
}

void sub_10016B988(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_10016B99C(uint64_t a1, uint64_t *a2)
{
  __int128 v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  void *__p;
  char v9;
  char v10;
  char v11;
  __int128 v12;
  __int128 v13;
  _OWORD v14[2];

  if (!*(_QWORD *)(a1 + 8))
    sub_1003D0B48();
  v5 = *a2;
  v6 = *((_DWORD *)a2 + 2);
  sub_10015A4BC((uint64_t)&v7, (uint64_t)(a2 + 2));
  v4 = *((_OWORD *)a2 + 6);
  v12 = *((_OWORD *)a2 + 5);
  v13 = v4;
  v14[0] = *((_OWORD *)a2 + 7);
  *(_OWORD *)((char *)v14 + 13) = *(_OWORD *)((char *)a2 + 125);
  std::mutex::lock((std::mutex *)(a1 + 24));
  (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), &v5);
  std::mutex::unlock((std::mutex *)(a1 + 24));
  if (v11 && v10 && v9 < 0)
    operator delete(__p);
}

void sub_10016BA50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,char a21)
{
  std::mutex *v21;

  std::mutex::unlock(v21);
  if (a21 && a19 && a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_10016BA8C(uint64_t a1, int *a2)
{
  std::mutex *v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  int v13;
  _BYTE v14[560];
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  _BYTE v29[80];
  _BYTE v30[329];
  __n128 v31[4];
  void *__p;
  void *v33;
  char v34;
  _BYTE v35[473];

  if (!*(_QWORD *)(a1 + 88))
    sub_1003D0B70();
  v4 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  v5 = *(_QWORD *)(a1 + 88);
  v13 = *a2;
  sub_10015A39C(v14, (uint64_t)(a2 + 2));
  v6 = *(_OWORD *)(a2 + 186);
  v25 = *(_OWORD *)(a2 + 182);
  v26 = v6;
  v7 = *(_OWORD *)(a2 + 194);
  v27 = *(_OWORD *)(a2 + 190);
  v28 = v7;
  v8 = *(_OWORD *)(a2 + 170);
  v21 = *(_OWORD *)(a2 + 166);
  v22 = v8;
  v9 = *(_OWORD *)(a2 + 178);
  v23 = *(_OWORD *)(a2 + 174);
  v24 = v9;
  v10 = *(_OWORD *)(a2 + 154);
  v17 = *(_OWORD *)(a2 + 150);
  v18 = v10;
  v11 = *(_OWORD *)(a2 + 162);
  v19 = *(_OWORD *)(a2 + 158);
  v20 = v11;
  v12 = *(_OWORD *)(a2 + 146);
  v15 = *(_OWORD *)(a2 + 142);
  v16 = v12;
  sub_10016BC8C(v29, (uint64_t)(a2 + 198));
  memcpy(v30, a2 + 218, sizeof(v30));
  sub_10015A3F0(v31, (__n128 *)(a2 + 302));
  memcpy(v35, a2 + 332, sizeof(v35));
  (*(void (**)(uint64_t, int *))(*(_QWORD *)v5 + 16))(v5, &v13);
  if (v34 && __p)
  {
    v33 = __p;
    operator delete(__p);
  }
  sub_10016BD90((uint64_t)v29);
  sub_100144868((uint64_t)v14);
  std::mutex::unlock(v4);
}

void sub_10016BBF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  std::mutex *v2;
  va_list va;

  va_start(va, a2);
  sub_10016BC44((uint64_t)va);
  std::mutex::unlock(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_10016BC44(uint64_t a1)
{
  void *v2;

  if (*(_BYTE *)(a1 + 1320))
  {
    v2 = *(void **)(a1 + 1280);
    if (v2)
    {
      *(_QWORD *)(a1 + 1288) = v2;
      operator delete(v2);
    }
  }
  sub_10016BD90(a1 + 792);
  sub_100144868(a1 + 8);
  return a1;
}

_BYTE *sub_10016BC8C(_BYTE *a1, uint64_t a2)
{
  *a1 = 0;
  a1[72] = 0;
  if (*(_BYTE *)(a2 + 72))
  {
    sub_10016BCE0((uint64_t)a1, (__int128 *)a2);
    a1[72] = 1;
  }
  return a1;
}

void sub_10016BCCC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10016BD90(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10016BCE0(uint64_t a1, __int128 *a2)
{
  __int128 v4;

  v4 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  sub_100152E14((_QWORD *)(a1 + 24), *((__int16 **)a2 + 3), *((__int16 **)a2 + 4), 0x86BCA1AF286BCA1BLL * ((uint64_t)(*((_QWORD *)a2 + 4) - *((_QWORD *)a2 + 3)) >> 3));
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  sub_100153448((_QWORD *)(a1 + 48), *((_QWORD *)a2 + 6), *((_QWORD *)a2 + 7), (uint64_t)(*((_QWORD *)a2 + 7) - *((_QWORD *)a2 + 6)) >> 5);
  return a1;
}

void sub_10016BD78(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1001533C4((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10016BD90(uint64_t a1)
{
  void **v3;

  if (*(_BYTE *)(a1 + 72))
  {
    v3 = (void **)(a1 + 48);
    sub_100153338(&v3);
    v3 = (void **)(a1 + 24);
    sub_1001533C4(&v3);
  }
  return a1;
}

_QWORD *sub_10016BDE0@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, off_100809140[a1]);
}

_QWORD *sub_10016BDF4@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, off_100809198[a1]);
}

_QWORD *sub_10016BE08@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, off_1008091E0[a1]);
}

_QWORD *sub_10016BE1C@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, off_100809200[a1]);
}

void sub_10016BE30(uint64_t a1@<X8>)
{
  void *v2;
  id v3;
  uint64_t v4;
  id v5;
  __int128 v6;
  int v7;
  uint64_t v8;
  void *i;
  void *v10;
  uint64_t v11;
  int v12;
  NSObject *v13;
  char *v14;
  void **v15;
  __int128 v16;
  _BYTE *v17;
  void *__p[2];
  char v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint8_t buf[4];
  void **v25;
  __int16 v26;
  int v27;
  _BYTE v28[128];

  *(_BYTE *)a1 = 1;
  *(_DWORD *)(a1 + 5) = 0;
  v17 = (_BYTE *)(a1 + 5);
  *(_BYTE *)(a1 + 4) = 1;
  *(_DWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 12) = 1;
  *(_DWORD *)(a1 + 16) = 1;
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "dictionaryRepresentation"));
  v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v20, v28, 16);
  if (v5)
  {
    v7 = 1;
    v8 = *(_QWORD *)v21;
    *(_QWORD *)&v6 = 136315394;
    v16 = v6;
    do
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(_QWORD *)v21 != v8)
          objc_enumerationMutation(v3);
        v10 = *(void **)(*((_QWORD *)&v20 + 1) + 8 * (_QWORD)i);
        v11 = objc_opt_class(NSString, v4);
        if ((objc_opt_isKindOfClass(v10, v11) & 1) != 0)
        {
          if (objc_msgSend(v10, "isEqualToString:", CFSTR("CheckFPSNRsOkForSensorFusion")))
          {
            *(_BYTE *)(a1 + 4) = objc_msgSend(v2, "BOOLForKey:", CFSTR("CheckFPSNRsOkForSensorFusion"));
          }
          else if (objc_msgSend(v10, "isEqualToString:", CFSTR("CheckPDOA")))
          {
            *v17 = objc_msgSend(v2, "BOOLForKey:", CFSTR("CheckPDOA"));
          }
          else if (objc_msgSend(v10, "isEqualToString:", CFSTR("CheckFPSNRs")))
          {
            *(_BYTE *)(a1 + 6) = objc_msgSend(v2, "BOOLForKey:", CFSTR("CheckFPSNRs"));
          }
          else if (objc_msgSend(v10, "isEqualToString:", CFSTR("CheckFPIndices")))
          {
            *(_BYTE *)(a1 + 7) = objc_msgSend(v2, "BOOLForKey:", CFSTR("CheckFPIndices"));
          }
          else if (objc_msgSend(v10, "isEqualToString:", CFSTR("CheckAoaCirDataEvent")))
          {
            *(_BYTE *)(a1 + 8) = objc_msgSend(v2, "BOOLForKey:", CFSTR("CheckAoaCirDataEvent"));
          }
          else if (objc_msgSend(v10, "isEqualToString:", CFSTR("CheckToaCirDataEvent")))
          {
            *(_BYTE *)(a1 + 9) = objc_msgSend(v2, "BOOLForKey:", CFSTR("CheckToaCirDataEvent"));
          }
          else if (objc_msgSend(v10, "isEqualToString:", CFSTR("CheckTimestamps")))
          {
            *(_BYTE *)(a1 + 10) = objc_msgSend(v2, "BOOLForKey:", CFSTR("CheckTimestamps"));
          }
          else if (objc_msgSend(v10, "isEqualToString:", CFSTR("CheckRSSIs")))
          {
            *(_BYTE *)(a1 + 11) = objc_msgSend(v2, "BOOLForKey:", CFSTR("CheckRSSIs"));
          }
          else if (objc_msgSend(v10, "isEqualToString:", CFSTR("EnableAoaHypotheses")))
          {
            *(_BYTE *)a1 = objc_msgSend(v2, "BOOLForKey:", CFSTR("EnableAoaHypotheses"));
          }
          if (objc_msgSend(v10, "isEqualToString:", CFSTR("MmsValStatus"), v16))
          {
            v12 = objc_msgSend(v2, "integerForKey:", CFSTR("MmsValStatus"));
            switch(v12)
            {
              case 1:
                v7 = 1;
                break;
              case 3:
                v7 = 3;
                break;
              case 7:
                v7 = 7;
                break;
              default:
LABEL_33:
                v13 = (id)qword_10085F520;
                if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
                {
                  if (v7 == 1)
                  {
                    v14 = "Nominal";
                  }
                  else if (v7 == 7)
                  {
                    v14 = "Stricter";
                  }
                  else
                  {
                    v14 = "Strict";
                  }
                  sub_10000BF04(__p, v14);
                  v15 = __p;
                  if (v19 < 0)
                    v15 = (void **)__p[0];
                  *(_DWORD *)buf = v16;
                  v25 = v15;
                  v26 = 1024;
                  v27 = v7;
                  _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Required min mmsValStatus = %s (%d)", buf, 0x12u);
                  if (v19 < 0)
                    operator delete(__p[0]);
                }

                continue;
            }
            *(_DWORD *)(a1 + 16) = v7;
            goto LABEL_33;
          }
        }
      }
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v20, v28, 16);
    }
    while (v5);
  }

}

void sub_10016C238(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

double sub_10016C278()
{
  void *v0;
  void *v1;
  void *v2;
  uint64_t v3;
  NSObject *v4;
  int v6;
  uint64_t v7;

  if ((byte_100856DF0 & 1) == 0)
  {
    v0 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
    v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v0, "objectForKey:", CFSTR("UwbRangeBiasOffsetMeters")));

    if (v1)
    {
      v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
      objc_msgSend(v2, "doubleForKey:", CFSTR("UwbRangeBiasOffsetMeters"));
      qword_100856DE8 = v3;

      v4 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
      {
        v6 = 134217984;
        v7 = qword_100856DE8;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "UwbRangeBiasOffsetMeters set to %.2f m", (uint8_t *)&v6, 0xCu);
      }
    }
    byte_100856DF0 = 1;
  }
  return *(double *)&qword_100856DE8;
}

void sub_10016C39C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

double sub_10016C3B8()
{
  double result;

  if (byte_100856E00 == 1)
    return *(double *)&qword_100856DF8;
  result = sub_10016C278() * 1.0e12 / 299792458.0;
  qword_100856DF8 = *(_QWORD *)&result;
  byte_100856E00 = 1;
  return result;
}

uint64_t sub_10016C418(uint64_t result, int a2, unsigned int a3, int a4)
{
  int v4;
  char v5;
  char v6;
  __int16 v7;
  char v8;
  char v9;

  *(_QWORD *)(result + 12) = 0;
  *(_QWORD *)(result + 4) = 0;
  *(_DWORD *)result = a2;
  if (a2 > 99)
  {
    if (a2 < 113)
      goto LABEL_6;
    if ((a2 - 113) < 9)
    {
      *(_WORD *)(result + 12) = 257;
      *(_WORD *)(result + 16) = 257;
      return result;
    }
    if (a2 == 200)
    {
LABEL_6:
      *(_WORD *)(result + 12) = 257;
      return result;
    }
    if (a2 == 201)
      *(_DWORD *)(result + 12) = 16843266;
  }
  else
  {
    switch(a2)
    {
      case 0:
        v4 = 67371531;
        goto LABEL_44;
      case 1:
      case 2:
      case 3:
        goto LABEL_30;
      case 4:
      case 5:
      case 6:
        v4 = 67371275;
        goto LABEL_44;
      case 7:
      case 8:
      case 9:
      case 10:
        if (a3 >= 2)
        {
          if (a3 == 2)
          {
LABEL_30:
            v4 = 67373067;
LABEL_44:
            *(_DWORD *)(result + 12) = v4;
          }
        }
        else
        {
          *(_DWORD *)(result + 12) = 67372036;
        }
LABEL_45:
        v7 = 260;
LABEL_46:
        *(_WORD *)(result + 18) = v7;
        break;
      case 11:
      case 12:
      case 13:
      case 14:
        if (a3 >= 2)
        {
          if (a3 == 2)
            *(_DWORD *)(result + 12) = 16843266;
        }
        else
        {
          *(_DWORD *)(result + 12) = 16843009;
        }
        v7 = 257;
        goto LABEL_46;
      case 15:
      case 16:
      case 17:
      case 18:
      case 23:
        if (a3 >= 2)
        {
          if (a3 == 2)
            *(_DWORD *)(result + 12) = 67371522;
        }
        else
        {
          *(_DWORD *)(result + 12) = 67372036;
        }
        if ((unsigned __int16)a4 == 6)
          v5 = 5;
        else
          v5 = 4;
        if (BYTE2(a4))
          v6 = v5;
        else
          v6 = 4;
        *(_BYTE *)(result + 16) = v6;
        *(_BYTE *)(result + 17) = 4;
        goto LABEL_45;
      case 19:
      case 20:
      case 21:
      case 22:
        if (a3 >= 2)
        {
          if (a3 == 2)
            *(_DWORD *)(result + 12) = 67371522;
        }
        else
        {
          *(_DWORD *)(result + 12) = 67372036;
        }
        if ((unsigned __int16)a4 == 6)
          v8 = 5;
        else
          v8 = 4;
        if (BYTE2(a4))
          v9 = v8;
        else
          v9 = 4;
        *(_BYTE *)(result + 16) = v9;
        *(_BYTE *)(result + 17) = 4;
        v7 = 258;
        goto LABEL_46;
      default:
        return result;
    }
  }
  return result;
}

uint64_t sub_10016C5A4(uint64_t a1, int a2, unsigned int a3, int a4)
{
  return sub_10016C418(a1, a2, a3, a4);
}

uint64_t sub_10016C5AC(uint64_t result, int a2, int a3)
{
  int v3;
  char v4;
  char v5;
  char v6;
  char v7;
  char v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;

  v3 = *(_DWORD *)result;
  if (*(int *)result <= 99)
  {
    if (v3 > 0x17)
      goto LABEL_17;
    if (((1 << v3) & 0x87FFFF) != 0)
    {
      if (a2)
      {
        v6 = *(_BYTE *)(result + 15);
        *(_BYTE *)(result + 4) = v6;
        *(_BYTE *)(result + 5) = *(_BYTE *)(result + 14);
        *(_BYTE *)(result + 6) = v6;
        v7 = *(_BYTE *)(result + 13);
        *(_BYTE *)(result + 7) = v7;
        v8 = *(_BYTE *)(result + 12);
LABEL_9:
        *(_BYTE *)(result + 8) = v8;
        *(_BYTE *)(result + 11) = v7;
        goto LABEL_17;
      }
      v9 = a3 == 0;
      v10 = 15;
      if (a3)
        v10 = 13;
      v11 = 14;
      v12 = 12;
    }
    else
    {
      if (a2)
      {
        v15 = *(_BYTE *)(result + 13);
        *(_BYTE *)(result + 4) = v15;
        *(_BYTE *)(result + 5) = *(_BYTE *)(result + 12);
        *(_BYTE *)(result + 6) = v15;
        v7 = *(_BYTE *)(result + 15);
        *(_BYTE *)(result + 7) = v7;
        v8 = *(_BYTE *)(result + 14);
        goto LABEL_9;
      }
      v9 = a3 == 0;
      v10 = 13;
      if (a3)
        v10 = 15;
      v11 = 12;
      v12 = 14;
    }
    if (!v9)
      v11 = v12;
    v5 = *(_BYTE *)(result + v11);
    v4 = *(_BYTE *)(result + v10);
    *(_BYTE *)(result + 4) = v4;
    goto LABEL_16;
  }
  if (v3 <= 199)
  {
    if ((v3 - 100) < 0x16)
    {
LABEL_4:
      v4 = *(_BYTE *)(result + 13);
      *(_BYTE *)(result + 4) = v4;
      v5 = *(_BYTE *)(result + 12);
LABEL_16:
      *(_BYTE *)(result + 5) = v5;
      *(_BYTE *)(result + 6) = v4;
      *(_WORD *)(result + 7) = 0;
      *(_BYTE *)(result + 11) = 0;
    }
LABEL_17:
    if ((v3 - 113) < 9 || (v3 - 15) <= 8)
    {
      *(_BYTE *)(result + 9) = *(_BYTE *)(result + 17);
      *(_BYTE *)(result + 10) = *(_BYTE *)(result + 16);
    }
    return result;
  }
  if (v3 > 996)
  {
    if (v3 == 997 || v3 == 999)
    {
      *(_BYTE *)(result + 11) = 0;
      *(_DWORD *)(result + 4) = 0;
      *(_BYTE *)(result + 8) = 0;
    }
    goto LABEL_17;
  }
  if (v3 == 200)
    goto LABEL_4;
  if (v3 != 201)
    goto LABEL_17;
  if (a2)
  {
    v13 = *(_BYTE *)(result + 13);
    *(_BYTE *)(result + 4) = v13;
    *(_BYTE *)(result + 5) = *(_BYTE *)(result + 12);
    *(_BYTE *)(result + 6) = v13;
    v14 = *(_BYTE *)(result + 15);
    *(_BYTE *)(result + 7) = v14;
    *(_BYTE *)(result + 8) = *(_BYTE *)(result + 14);
    *(_BYTE *)(result + 11) = v14;
  }
  else
  {
    v16 = 15;
    if (a3)
      v16 = 13;
    v17 = 14;
    if (a3)
      v17 = 12;
    v18 = *(_BYTE *)(result + v17);
    v19 = *(_BYTE *)(result + v16);
    *(_BYTE *)(result + 4) = v19;
    *(_BYTE *)(result + 5) = v18;
    *(_BYTE *)(result + 6) = v19;
    *(_WORD *)(result + 7) = 0;
    *(_BYTE *)(result + 11) = 0;
  }
  return result;
}

uint64_t sub_10016C774(unsigned __int8 *a1, int a2, int a3)
{
  uint64_t result;

  sub_10016C5AC((uint64_t)a1, a2, a3);
  result = sub_10016C7A8(a1, 0);
  if ((result & 1) == 0)
    sub_1003D0B98();
  return result;
}

uint64_t sub_10016C7A8(unsigned __int8 *a1, char a2)
{
  int v3;
  uint64_t result;

  v3 = *(_DWORD *)a1;
  if (*(int *)a1 <= 199)
  {
    if ((v3 - 100) < 0x16)
      goto LABEL_11;
    if ((v3 - 11) >= 0xD)
    {
      if (v3 >= 0xB)
        return 1;
      result = sub_10016CCA8(a1);
      if (!(_DWORD)result)
        return result;
      if ((a2 & 1) == 0)
      {
        result = sub_10016CD68(a1);
        if (!(_DWORD)result)
          return result;
      }
    }
    else
    {
      result = sub_10016CCA8(a1);
      if (!(_DWORD)result)
        return result;
    }
    return sub_10016CDD0(a1);
  }
  if (v3 <= 996)
  {
    if (v3 != 200)
      return v3 != 201 || (sub_10016CCA8(a1) & 1) != 0;
LABEL_11:
    result = sub_10016CCA8(a1);
    if (!(_DWORD)result)
      return result;
    return sub_10016CEB8(a1);
  }
  if (v3 != 997 && v3 != 999)
    return 1;
  result = sub_10016CE54(a1);
  if ((_DWORD)result)
  {
    result = sub_10016CEB8(a1);
    if ((_DWORD)result)
      return 1;
  }
  return result;
}

uint64_t sub_10016C8A8(unsigned __int8 *a1, int a2, int a3)
{
  uint64_t result;

  sub_10016C5AC((uint64_t)a1, a2, a3);
  result = sub_10016C7A8(a1, 0);
  if ((result & 1) == 0)
    sub_1003D0BC0();
  return result;
}

uint64_t sub_10016C8DC(unsigned __int8 *a1, int a2)
{
  uint64_t result;

  sub_10016C5AC((uint64_t)a1, a2, 1);
  result = sub_10016C7A8(a1, 0);
  if ((result & 1) == 0)
    sub_1003D0BE8();
  return result;
}

uint64_t sub_10016C914(unsigned __int8 *a1, int a2)
{
  uint64_t result;

  sub_10016C5AC((uint64_t)a1, a2, 1);
  result = sub_10016C7A8(a1, 0);
  if ((result & 1) == 0)
    sub_1003D0C10();
  return result;
}

uint64_t sub_10016C94C(unsigned __int8 *a1, int a2)
{
  int v2;
  unsigned __int8 v3;
  int v4;
  unsigned __int8 v5;
  char v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  uint64_t result;
  unsigned __int8 v10;
  unsigned __int8 v11;

  v2 = *(_DWORD *)a1;
  if (*(int *)a1 <= 99)
  {
    if (v2 > 0x17)
      goto LABEL_20;
    v4 = 1 << v2;
    if ((v4 & 0x87FFFE) != 0)
    {
      if (a2)
      {
        v5 = a1[15];
        a1[4] = v5;
        a1[5] = a1[14];
        a1[6] = v5;
        v6 = a1[13];
LABEL_9:
        a1[7] = v6;
        v7 = a1[12];
LABEL_19:
        a1[8] = v7;
        a1[11] = v6;
        goto LABEL_20;
      }
      v3 = a1[13];
    }
    else
    {
      if ((v4 & 0x780000) == 0)
      {
        if (!a2)
        {
          a1[4] = 8;
          a1[5] = a1[12];
          *((_WORD *)a1 + 3) = 8;
          a1[8] = 0;
          goto LABEL_14;
        }
        v11 = a1[15];
        a1[4] = v11;
        a1[5] = a1[14];
        a1[6] = v11;
        v6 = 8;
        goto LABEL_9;
      }
      if (a2)
      {
        v8 = a1[13];
        a1[4] = v8;
        a1[5] = a1[12];
        a1[6] = v8;
LABEL_18:
        v6 = a1[15];
        a1[7] = v6;
        v7 = a1[14];
        goto LABEL_19;
      }
      v3 = a1[15];
    }
    a1[4] = v3;
    a1[5] = v3;
    goto LABEL_12;
  }
  if (v2 <= 199)
  {
    if ((v2 - 100) >= 0x16)
      goto LABEL_20;
    goto LABEL_4;
  }
  if (v2 > 996)
  {
    if (v2 == 997 || v2 == 999)
    {
      a1[11] = 0;
      *((_DWORD *)a1 + 1) = 0;
      a1[8] = 0;
    }
  }
  else
  {
    if (v2 == 200)
    {
LABEL_4:
      v3 = a1[13];
      a1[4] = v3;
      a1[5] = a1[12];
LABEL_12:
      a1[6] = v3;
LABEL_13:
      *(_WORD *)(a1 + 7) = 0;
LABEL_14:
      a1[11] = 0;
      goto LABEL_20;
    }
    if (v2 == 201)
    {
      v10 = a1[13];
      a1[4] = v10;
      a1[5] = a1[12];
      a1[6] = v10;
      if (!a2)
        goto LABEL_13;
      goto LABEL_18;
    }
  }
LABEL_20:
  result = sub_10016C7A8(a1, 0);
  if ((result & 1) == 0)
    sub_1003D0C38();
  return result;
}

uint64_t sub_10016CAD0(unsigned __int8 *a1, int a2, int a3)
{
  uint64_t result;

  sub_10016C5AC((uint64_t)a1, a2, a3);
  result = sub_10016C7A8(a1, 1);
  if ((result & 1) == 0)
    sub_1003D0C60();
  return result;
}

uint64_t sub_10016CB04(unsigned __int8 *a1, int a2, int a3)
{
  uint64_t result;

  sub_10016C5AC((uint64_t)a1, a2, a3);
  result = sub_10016C7A8(a1, 0);
  if ((result & 1) == 0)
    sub_1003D0C88();
  return result;
}

uint64_t sub_10016CB38(unsigned __int8 *a1, int a2, int a3)
{
  uint64_t result;

  sub_10016C5AC((uint64_t)a1, a2, a3);
  result = sub_10016C7A8(a1, 0);
  if ((result & 1) == 0)
    sub_1003D0CB0();
  return result;
}

uint64_t sub_10016CB6C(unsigned __int8 *a1, int a2)
{
  uint64_t result;

  sub_10016C5AC((uint64_t)a1, a2, 0);
  result = sub_10016C7A8(a1, 0);
  if ((result & 1) == 0)
    sub_1003D0CD8();
  return result;
}

uint64_t sub_10016CBA4(unsigned __int8 *a1, int a2, int a3)
{
  uint64_t result;

  sub_10016C5AC((uint64_t)a1, a2, a3);
  result = sub_10016C7A8(a1, 0);
  if ((result & 1) == 0)
    sub_1003D0D00();
  return result;
}

uint64_t sub_10016CBDC(unsigned __int8 *a1, unsigned __int8 a2, unsigned __int8 a3, unsigned __int8 a4, unsigned __int8 a5, unsigned __int8 a6, unsigned __int8 a7)
{
  uint64_t result;

  a1[4] = a2;
  a1[5] = a3;
  a1[6] = a4;
  a1[7] = a5;
  a1[8] = a6;
  a1[11] = a7;
  result = sub_10016C7A8(a1, 0);
  if ((result & 1) == 0)
    sub_1003D0D28();
  return result;
}

uint64_t sub_10016CC14(int *a1)
{
  int v1;
  __int16 v2;

  v1 = *a1;
  v2 = -408;
  if (*a1 > 199)
  {
    if ((v1 - 200) >= 2 && v1 != 997 && v1 != 999)
      return v2;
    return -420;
  }
  if ((v1 - 100) < 0x16 || (v1 - 3) < 0x15)
    return -420;
  return v2;
}

uint64_t sub_10016CC68(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 4);
}

uint64_t sub_10016CC70(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 5);
}

uint64_t sub_10016CC78(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 6);
}

uint64_t sub_10016CC80(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 7);
}

uint64_t sub_10016CC88(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

uint64_t sub_10016CC90(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 11);
}

uint64_t sub_10016CC98(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 9);
}

uint64_t sub_10016CCA0(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 10);
}

uint64_t sub_10016CCA8(unsigned __int8 *a1)
{
  int v2;
  int v3;
  int v4;
  int v5;

  v2 = a1[4];
  if (v2 != a1[6] || (v2 & ~a1[5]) != 0)
  {
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
      sub_1003D0D7C();
    v3 = 0;
  }
  else
  {
    v3 = 1;
  }
  v4 = a1[7];
  if (v4 != a1[11] || (v4 & ~a1[8]) != 0)
  {
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
      sub_1003D0D50();
    v5 = 0;
  }
  else
  {
    v5 = 1;
  }
  return v3 & v5;
}

BOOL sub_10016CD68(_BYTE *a1)
{
  _BOOL8 result;

  if (!a1[7] || a1[6] != 4 || a1[11] != 2)
    return 1;
  result = os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR);
  if (result)
  {
    sub_1003D0DA8();
    return 0;
  }
  return result;
}

BOOL sub_10016CDD0(_BYTE *a1)
{
  _BOOL8 result;

  if (!a1[7] || !a1[19] || (a1[4] & a1[18]) != 0 && (a1[5] & a1[18]) != 0 && (a1[6] & a1[18]) != 0)
    return 1;
  result = os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR);
  if (result)
  {
    sub_1003D0DD4();
    return 0;
  }
  return result;
}

BOOL sub_10016CE54(_BYTE *a1)
{
  _BOOL8 result;

  if (!a1[4] && !a1[5] && !a1[6])
    return 1;
  result = os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR);
  if (result)
  {
    sub_1003D0E00();
    return 0;
  }
  return result;
}

BOOL sub_10016CEB8(_BYTE *a1)
{
  _BOOL8 result;

  if (!a1[7] && !a1[8] && !a1[11])
    return 1;
  result = os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR);
  if (result)
  {
    sub_1003D0E00();
    return 0;
  }
  return result;
}

uint64_t sub_10016CF1C(uint64_t a1, int a2)
{
  int v3;
  uint64_t result;
  int v5;
  int v6;
  int v7;
  unsigned int v8;

  if (!a2)
    return 4;
  v3 = *(_DWORD *)a1;
  result = 4;
  if (v3 > 99)
  {
    if ((v3 - 100) < 0x16 || v3 == 200)
    {
      if ((a2 & ~*(unsigned __int8 *)(a1 + 12)) != 0)
        return 4;
      else
        return 2;
    }
    else if (v3 == 201)
    {
      v7 = *(unsigned __int8 *)(a1 + 14) | *(unsigned __int8 *)(a1 + 12);
      if ((v7 & a2) != 0)
        v8 = 2;
      else
        v8 = 4;
      if ((a2 & ~v7) != 0)
        return 4;
      else
        return v8;
    }
  }
  else if (v3 < 0x18)
  {
    v5 = *(unsigned __int8 *)(a1 + 12);
    v6 = *(unsigned __int8 *)(a1 + 14);
    if ((a2 & ~(v6 | v5)) == 0)
    {
      if ((a2 & ~v5) != 0 || (v5 & a2) == 0)
      {
        if ((a2 & ~v6) != 0 || (v6 & a2) == 0)
        {
          if (((v6 | v5) & a2) != 0)
            return 3;
          else
            return 4;
        }
        else
        {
          return 0;
        }
      }
      else
      {
        return 1;
      }
    }
  }
  return result;
}

_QWORD *sub_10016CFFC@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, off_100809480[a1]);
}

_QWORD *sub_10016D010@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, off_1008094D8[a1]);
}

_QWORD *sub_10016D024@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, off_100809520[a1]);
}

_QWORD *sub_10016D038@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, off_100809540[a1]);
}

double sub_10016D04C(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = off_100809230;
  *(_QWORD *)(a1 + 8) = 850045863;
  result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_QWORD *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 104) = 1065353216;
  *(_WORD *)(a1 + 112) = 1;
  return result;
}

_QWORD *sub_10016D088(_QWORD *a1)
{
  std::mutex *v2;

  *a1 = off_100809230;
  v2 = (std::mutex *)(a1 + 1);
  sub_10002AB34((uint64_t)(a1 + 9));
  std::mutex::~mutex(v2);
  return a1;
}

void sub_10016D0C8(_QWORD *a1)
{
  std::mutex *v1;

  *a1 = off_100809230;
  v1 = (std::mutex *)(a1 + 1);
  sub_10002AB34((uint64_t)(a1 + 9));
  std::mutex::~mutex(v1);
  operator delete();
}

void sub_10016D118(uint64_t a1@<X0>, unsigned __int16 a2@<W1>, _BYTE *a3@<X8>)
{
  std::mutex *v5;
  uint64_t **v6;
  char v7;
  unsigned __int16 v8;

  v8 = a2;
  v5 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  v6 = sub_100154A64((_QWORD *)(a1 + 72), &v8);
  if (v6)
  {
    memcpy(a3, v6 + 3, 0x288uLL);
    v7 = 1;
  }
  else
  {
    v7 = 0;
    *a3 = 0;
  }
  a3[648] = v7;
  std::mutex::unlock(v5);
}

void sub_10016D194(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_10016D1A8(uint64_t a1@<X0>, unsigned __int16 a2@<W1>, _BYTE *a3@<X8>)
{
  std::mutex *v5;
  uint64_t **v6;
  char v7;
  unsigned __int16 v8;

  v8 = a2;
  v5 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  v6 = sub_100154A64((_QWORD *)(a1 + 72), &v8);
  if (v6)
  {
    memcpy(a3, v6 + 4, 0x278uLL);
    v7 = 1;
  }
  else
  {
    v7 = 0;
    *a3 = 0;
  }
  a3[632] = v7;
  std::mutex::unlock(v5);
}

void sub_10016D224(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

BOOL sub_10016D238(uint64_t a1, unsigned __int16 a2, uint64_t a3)
{
  std::mutex *v5;
  uint64_t **v6;
  uint64_t v7;
  unsigned __int16 v9;

  v9 = a2;
  v5 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  v6 = sub_100154A64((_QWORD *)(a1 + 72), &v9);
  if (v6)
  {
    v7 = *(_QWORD *)(a3 + 24);
    if (!v7)
      sub_100027BC4();
    (*(void (**)(uint64_t, uint64_t **))(*(_QWORD *)v7 + 48))(v7, v6 + 3);
  }
  std::mutex::unlock(v5);
  return v6 != 0;
}

void sub_10016D2C0(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_10016D2D4(uint64_t a1, uint64_t a2)
{
  std::mutex *v4;
  _QWORD *i;
  uint64_t v6;

  v4 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  for (i = (_QWORD *)(a1 + 88); ; (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v6 + 48))(v6, i + 3))
  {
    i = (_QWORD *)*i;
    if (!i)
      break;
    v6 = *(_QWORD *)(a2 + 24);
    if (!v6)
      sub_100027BC4();
  }
  std::mutex::unlock(v4);
}

void sub_10016D33C(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_10016D354(uint64_t a1@<X0>, const void *a2@<X1>, uint64_t a3@<X8>)
{
  std::mutex *v6;
  int v7;
  NSObject *v8;
  unsigned __int16 v9;
  uint8_t buf[4];
  int v11;
  __int16 v12;
  _BYTE v13[640];
  _BYTE __src[510];

  v6 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  v7 = *(unsigned __int16 *)(a1 + 112);
  *(_WORD *)(a1 + 112) = v7 + 1;
  v9 = v7;
  if (((v7 + 1) & 0x10000) != 0)
    *(_WORD *)(a1 + 112) = 1;
  v8 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    v11 = v7;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Generated ticket_id for request. ID: %d", buf, 8u);
  }
  memcpy(&__src[6], a2, 0x1F8uLL);
  *(_DWORD *)buf = 0;
  v12 = v7;
  memcpy(v13, __src, 0x1FEuLL);
  v13[510] = 0;
  v13[622] = 0;
  v13[630] = 0;
  sub_10016DE88(a1 + 72, &v9, &v9, buf);
  *(_WORD *)a3 = v7;
  memcpy((void *)(a3 + 2), __src, 0x1FEuLL);
  *(_BYTE *)(a3 + 512) = 0;
  *(_BYTE *)(a3 + 624) = 0;
  *(_BYTE *)(a3 + 632) = 1;
  std::mutex::unlock(v6);
}

void sub_10016D4B8(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

BOOL sub_10016D4CC(uint64_t a1, int a2)
{
  NSObject *v4;
  std::mutex *v5;
  _QWORD *v6;
  uint64_t *v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int16 v16;
  uint8_t buf[4];
  int v18;

  v16 = a2;
  v4 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    v18 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "deleteServiceRequest for ticket id %d", buf, 8u);
  }
  v5 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  v6 = (_QWORD *)(a1 + 72);
  v7 = (uint64_t *)sub_100154A64((_QWORD *)(a1 + 72), &v16);
  if (v7)
  {
    sub_10002A560(v6, v7);
  }
  else
  {
    v8 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
      sub_1003D0E2C((uint64_t)&v16, v8, v9, v10, v11, v12, v13, v14);
  }
  std::mutex::unlock(v5);
  return v7 != 0;
}

void sub_10016D5E4(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

BOOL sub_10016D600(uint64_t a1, int a2, int a3)
{
  NSObject *v6;
  std::mutex *v7;
  uint64_t **v8;
  uint64_t **v9;
  NSObject *v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int16 v19;
  uint8_t buf[4];
  int v21;

  v19 = a2;
  v6 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    v21 = a2;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "updateServiceRequestState for ticket id %d", buf, 8u);
  }
  v7 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  v8 = sub_100154A64((_QWORD *)(a1 + 72), &v19);
  v9 = v8;
  if (v8)
  {
    if (*((_DWORD *)v8 + 6) == a3)
    {
      v10 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Asked to update service request to same as current state", buf, 2u);
      }
    }
    else
    {
      *((_DWORD *)v8 + 6) = a3;
    }
  }
  else
  {
    v11 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
      sub_1003D0E94((uint64_t)&v19, v11, v12, v13, v14, v15, v16, v17);
  }
  std::mutex::unlock(v7);
  return v9 != 0;
}

void sub_10016D764(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

BOOL sub_10016D780(uint64_t a1, int a2)
{
  NSObject *v4;
  std::mutex *v5;
  uint64_t **v6;
  uint64_t **v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int16 v16;
  uint8_t buf[4];
  int v18;

  v16 = a2;
  v4 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    v18 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "recordPowerLogSubmission for ticket id %d", buf, 8u);
  }
  v5 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  v6 = sub_100154A64((_QWORD *)(a1 + 72), &v16);
  v7 = v6;
  if (v6)
  {
    *((_BYTE *)v6 + 664) = 1;
  }
  else
  {
    v8 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
      sub_1003D0E94((uint64_t)&v16, v8, v9, v10, v11, v12, v13, v14);
  }
  std::mutex::unlock(v5);
  return v7 != 0;
}

void sub_10016D890(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10016D8AC(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD v5[3];
  _QWORD *v6;

  v5[0] = off_100809280;
  v6 = v5;
  v1 = sub_10016D980(a1, (uint64_t)v5);
  v2 = v6;
  if (v6 == v5)
  {
    v3 = 4;
    v2 = v5;
    goto LABEL_5;
  }
  if (v6)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return v1;
}

void sub_10016D948(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_10016D980(uint64_t a1, uint64_t a2)
{
  std::mutex *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  v5 = *(_QWORD **)(a1 + 88);
  if (v5)
  {
    LODWORD(v6) = 0;
    do
    {
      v7 = *(_QWORD *)(a2 + 24);
      if (!v7)
        sub_100027BC4();
      v6 = v6 + (*(unsigned int (**)(uint64_t, _QWORD *))(*(_QWORD *)v7 + 48))(v7, v5 + 3);
      v5 = (_QWORD *)*v5;
    }
    while (v5);
  }
  else
  {
    v6 = 0;
  }
  std::mutex::unlock(v4);
  return v6;
}

void sub_10016DA00(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10016DA18(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint8_t v7[8];
  _QWORD v8[3];
  _QWORD *v9;

  v2 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "countActiveSensorFusionRequests called", v7, 2u);
  }
  v8[0] = off_100809310;
  v9 = v8;
  v3 = sub_10016D980(a1, (uint64_t)v8);
  v4 = v9;
  if (v9 == v8)
  {
    v5 = 4;
    v4 = v8;
    goto LABEL_7;
  }
  if (v9)
  {
    v5 = 5;
LABEL_7:
    (*(void (**)(void))(*v4 + 8 * v5))();
  }
  return v3;
}

void sub_10016DB00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_10016DB38(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint8_t v7[8];
  _QWORD v8[3];
  _QWORD *v9;

  v2 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "countActiveWantsMotionRequests called", v7, 2u);
  }
  v8[0] = off_100809390;
  v9 = v8;
  v3 = sub_10016D980(a1, (uint64_t)v8);
  v4 = v9;
  if (v9 == v8)
  {
    v5 = 4;
    v4 = v8;
    goto LABEL_7;
  }
  if (v9)
  {
    v5 = 5;
LABEL_7:
    (*(void (**)(void))(*v4 + 8 * v5))();
  }
  return v3;
}

void sub_10016DC20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_10016DC58(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD v5[3];
  _QWORD *v6;

  v5[0] = off_100809410;
  v6 = v5;
  v1 = sub_10016D980(a1, (uint64_t)v5);
  v2 = v6;
  if (v6 == v5)
  {
    v3 = 4;
    v2 = v5;
    goto LABEL_5;
  }
  if (v6)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return v1;
}

void sub_10016DCF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_10016DD2C(uint64_t a1)
{
  return *(_QWORD *)(a1 + 96);
}

uint64_t sub_10016DD34(unint64_t a1)
{
  std::mutex *v2;
  uint64_t *i;
  __int16 v4;
  __int16 v5;
  uint64_t v6;
  _WORD v8[6];

  sub_10014D170((uint64_t)v8);
  v2 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  for (i = *(uint64_t **)(a1 + 88); i; i = (uint64_t *)*i)
  {
    if (*((_DWORD *)i + 6) == 1)
    {
      switch(*((_DWORD *)i + 11))
      {
        case 1:
          if (*((_BYTE *)i + 41))
            v5 = 2;
          else
            v5 = 1;
          if (*((_BYTE *)i + 41))
            v4 = 2;
          else
            v4 = 20;
          break;
        case 2:
        case 4:
        case 5:
          v4 = 3;
          goto LABEL_14;
        case 3:
          v4 = 9;
          v5 = 2;
          break;
        case 6:
          v4 = 12;
LABEL_14:
          v5 = 1;
          break;
        case 7:
          if (*((_BYTE *)i + 41))
            v5 = 2;
          else
            v5 = 1;
          goto LABEL_21;
        case 8:
          if (*((_BYTE *)i + 41))
            v5 = 1;
          else
            v5 = 2;
LABEL_21:
          v4 = 16;
          break;
        default:
          v4 = 0;
          v5 = 4;
          break;
      }
      a1 = a1 & 0xFFFFFFFF00000000 | *((unsigned int *)i + 122);
      sub_10014D184(v8, 1, v4, 1, v5, a1);
    }
  }
  v6 = sub_10014D1F4((uint64_t)v8);
  std::mutex::unlock(v2);
  return v6;
}

void sub_10016DE70(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_10016DE88(uint64_t a1, unsigned __int16 *a2, _WORD *a3, const void *a4)
{
  unint64_t v4;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  void **v11;
  _QWORD *v12;
  unint64_t v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;

  v8 = *a2;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v9 <= v8)
        v4 = v8 % v9;
    }
    else
    {
      v4 = ((_DWORD)v9 - 1) & v8;
    }
    v11 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v11)
    {
      v12 = *v11;
      if (*v11)
      {
        do
        {
          v13 = v12[1];
          if (v13 == v8)
          {
            if (*((unsigned __int16 *)v12 + 8) == (_DWORD)v8)
              return v12;
          }
          else
          {
            if (v10.u32[0] > 1uLL)
            {
              if (v13 >= v9)
                v13 %= v9;
            }
            else
            {
              v13 &= v9 - 1;
            }
            if (v13 != v4)
              break;
          }
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
    }
  }
  v12 = operator new(0x2A0uLL);
  *v12 = 0;
  v12[1] = v8;
  *((_WORD *)v12 + 8) = *a3;
  memcpy(v12 + 3, a4, 0x288uLL);
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v9 || (float)(v15 * (float)v9) < v14)
  {
    v16 = 1;
    if (v9 >= 3)
      v16 = (v9 & (v9 - 1)) != 0;
    v17 = v16 | (2 * v9);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      v19 = v18;
    else
      v19 = v17;
    sub_10002A900(a1, v19);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v9 <= v8)
        v4 = v8 % v9;
      else
        v4 = v8;
    }
    else
    {
      v4 = ((_DWORD)v9 - 1) & v8;
    }
  }
  v20 = *(_QWORD *)a1;
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v21)
  {
    *v12 = *v21;
LABEL_38:
    *v21 = v12;
    goto LABEL_39;
  }
  *v12 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v12;
  *(_QWORD *)(v20 + 8 * v4) = a1 + 16;
  if (*v12)
  {
    v22 = *(_QWORD *)(*v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v22 >= v9)
        v22 %= v9;
    }
    else
    {
      v22 &= v9 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v12;
}

void sub_10016E0AC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_10016E0C4()
{
  operator delete();
}

_QWORD *sub_10016E0D8()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_100809280;
  return result;
}

void sub_10016E0FC(uint64_t a1, _QWORD *a2)
{
  *a2 = off_100809280;
}

BOOL sub_10016E114(uint64_t a1, _DWORD *a2)
{
  return *a2 == 1;
}

uint64_t sub_10016E124(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_10016E160()
{
}

void sub_10016E170()
{
  operator delete();
}

_QWORD *sub_10016E184()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_100809310;
  return result;
}

void sub_10016E1A8(uint64_t a1, _QWORD *a2)
{
  *a2 = off_100809310;
}

BOOL sub_10016E1C0(uint64_t a1, int *a2)
{
  _BOOL4 v3;
  int v4;
  NSObject *v5;
  int v6;
  const char *v7;
  const char *v8;
  _DWORD v10[2];
  __int16 v11;
  const char *v12;
  __int16 v13;
  const char *v14;

  v3 = sub_1001629D0(a2[18]);
  v4 = *a2;
  v5 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    v6 = *((unsigned __int16 *)a2 + 4);
    v7 = "false";
    if (v4 == 1)
      v8 = "true";
    else
      v8 = "false";
    v10[0] = 67109634;
    v10[1] = v6;
    v11 = 2080;
    if (v3)
      v7 = "true";
    v12 = v8;
    v13 = 2080;
    v14 = v7;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Ticket ID %d active: %s, wants sensor fusion: %s", (uint8_t *)v10, 0x1Cu);
  }
  return v4 == 1 && v3;
}

uint64_t sub_10016E2B8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10016E2F4()
{
}

void sub_10016E304()
{
  operator delete();
}

_QWORD *sub_10016E318()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_100809390;
  return result;
}

void sub_10016E33C(uint64_t a1, _QWORD *a2)
{
  *a2 = off_100809390;
}

BOOL sub_10016E354(uint64_t a1, int *a2)
{
  int v3;
  int v4;
  NSObject *v5;
  int v6;
  const char *v7;
  const char *v8;
  _DWORD v11[2];
  __int16 v12;
  const char *v13;
  __int16 v14;
  const char *v15;

  v3 = *a2;
  v4 = *((unsigned __int8 *)a2 + 68);
  v5 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    v6 = *((unsigned __int16 *)a2 + 4);
    v7 = "false";
    if (v3 == 1)
      v8 = "true";
    else
      v8 = "false";
    v11[0] = 67109634;
    v11[1] = v6;
    v12 = 2080;
    if (v4)
      v7 = "true";
    v13 = v8;
    v14 = 2080;
    v15 = v7;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Ticket ID %d active: %s, wants motion: %s", (uint8_t *)v11, 0x1Cu);
  }
  return v3 == 1 && v4 != 0;
}

uint64_t sub_10016E448(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10016E484()
{
}

void sub_10016E494()
{
  operator delete();
}

_QWORD *sub_10016E4A8()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_100809410;
  return result;
}

void sub_10016E4CC(uint64_t a1, _QWORD *a2)
{
  *a2 = off_100809410;
}

BOOL sub_10016E4E4(uint64_t a1, _DWORD *a2)
{
  return *a2 == 0;
}

uint64_t sub_10016E4F4(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_10016E530()
{
}

_QWORD *sub_10016E53C@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, off_1008095A0[a1]);
}

_QWORD *sub_10016E550@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, off_1008095F8[a1]);
}

_QWORD *sub_10016E564@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, off_100809640[a1]);
}

_QWORD *sub_10016E578@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, off_100809660[a1]);
}

double sub_10016E58C(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)(a1 + 16) = a2;
  *(_QWORD *)(a1 + 24) = 850045863;
  result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)a1 = off_100809570;
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

uint64_t sub_10016E5B8(uint64_t a1)
{
  *(_QWORD *)a1 = off_100806F08;
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  return a1;
}

void sub_10016E5E8(uint64_t a1)
{
  *(_QWORD *)a1 = off_100806F08;
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  operator delete();
}

uint64_t sub_10016E628()
{
  return 0;
}

uint64_t sub_10016E630(uint64_t a1)
{
  *(_QWORD *)a1 = off_100809860;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_10016E66C(uint64_t a1)
{
  *(_QWORD *)a1 = off_100809860;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_10016E6A8(uint64_t a1)
{
  *(_QWORD *)a1 = off_100809860;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_10016E6E4(uint64_t a1)
{
  *(_QWORD *)a1 = off_100809860;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_10016E720(uint64_t a1)
{
  *(_QWORD *)a1 = off_100809860;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_10016E75C(uint64_t a1)
{
  *(_QWORD *)a1 = off_100809860;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_10016E798(uint64_t a1)
{
  *(_QWORD *)a1 = off_100809860;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

BOOL sub_10016E7D4(uint64_t a1, uint64_t a2)
{
  return *(double *)(a1 + 8) < *(double *)(a2 + 8);
}

double sub_10016E7E8(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t i;

  v2 = *a2;
  v3 = a2[1];
  if (v3 == *a2)
    return 0.0;
  for (i = v2 + 24; i != v3; i += 24)
  {
    if (*(double *)(v2 + 8) < *(double *)(i + 8))
      v2 = i;
  }
  return *(double *)(v2 + 8);
}

double sub_10016E828(uint64_t a1, uint64_t a2)
{
  const void *v2;
  uint64_t v3;
  double v5;
  double *v6;
  double v7;
  double *v9;
  double *v10;
  uint64_t v11;

  v2 = *(const void **)a2;
  v3 = *(_QWORD *)(a2 + 8);
  if ((const void *)v3 == v2)
    return 0.0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  sub_10016F900(&v9, v2, v3, 0xAAAAAAAAAAAAAAABLL * ((v3 - (uint64_t)v2) >> 3));
  if (v10 == v9)
  {
    v7 = 0.0;
    if (!v9)
      return v7;
LABEL_9:
    v10 = v9;
    operator delete(v9);
    return v7;
  }
  v5 = 0.0;
  v6 = v9;
  do
  {
    v5 = v5 + v6[1];
    v6 += 3;
  }
  while (v6 != v10);
  v7 = v5 / (double)(0xAAAAAAAAAAAAAAABLL * (v10 - v9));
  if (v9)
    goto LABEL_9;
  return v7;
}

double sub_10016E8D8(uint64_t a1, uint64_t *a2)
{
  __int128 *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  double result;
  BOOL (*v8)(uint64_t, uint64_t);

  v3 = (__int128 *)a2[1];
  v4 = *a2;
  if (v3 == (__int128 *)*a2)
    return 0.0;
  v5 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v3 - *a2) >> 3);
  v6 = v5 >> 1;
  v8 = sub_10016E7D4;
  sub_10016F978(v4, v3, (uint64_t (**)(__int128 *, __int128 *))&v8, 126 - 2 * __clz(v5), 1);
  result = *(double *)(*a2 + 24 * v6 + 8);
  if (((*((_DWORD *)a2 + 2) - *a2) & 8) == 0)
    return (result + *(double *)(*a2 + 24 * v6 - 16)) * 0.5;
  return result;
}

double sub_10016E980(uint64_t a1, uint64_t *a2)
{
  char *v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  char *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  double v18;
  double *v19;
  double v20;
  double v21;
  double *v23;
  double *v24;
  uint64_t v25;
  void *__p;
  char *v27;
  char *v28;

  if (a2[1] == *a2)
    return -200.0;
  v3 = 0;
  v4 = 0;
  __p = 0;
  v27 = 0;
  v28 = 0;
  v5 = -200.0;
  do
  {
    v7 = *a2;
    v6 = a2[1];
    if (v6 == *a2)
      goto LABEL_34;
    v8 = dword_10046DDBC[v4];
    do
    {
      if (*(_DWORD *)(v7 + 16) == v8)
      {
        if (v3 >= v28)
        {
          v10 = (char *)__p;
          v11 = (v3 - (_BYTE *)__p) >> 3;
          v12 = v11 + 1;
          if ((unint64_t)(v11 + 1) >> 61)
            sub_100026E7C();
          v13 = v28 - (_BYTE *)__p;
          if ((v28 - (_BYTE *)__p) >> 2 > v12)
            v12 = v13 >> 2;
          if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
            v14 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v14 = v12;
          if (v14)
          {
            v15 = (char *)sub_10005538C((uint64_t)&v28, v14);
            v10 = (char *)__p;
            v3 = v27;
          }
          else
          {
            v15 = 0;
          }
          v16 = &v15[8 * v11];
          *(_QWORD *)v16 = *(_QWORD *)(v7 + 8);
          v9 = v16 + 8;
          while (v3 != v10)
          {
            v17 = *((_QWORD *)v3 - 1);
            v3 -= 8;
            *((_QWORD *)v16 - 1) = v17;
            v16 -= 8;
          }
          __p = v16;
          v27 = v9;
          v28 = &v15[8 * v14];
          if (v10)
            operator delete(v10);
        }
        else
        {
          *(_QWORD *)v3 = *(_QWORD *)(v7 + 8);
          v9 = v3 + 8;
        }
        v27 = v9;
        v6 = a2[1];
        v3 = v9;
      }
      v7 += 24;
    }
    while (v7 != v6);
    if (v3 == __p)
    {
      v3 = (char *)__p;
      goto LABEL_34;
    }
    v23 = 0;
    v24 = 0;
    v25 = 0;
    sub_1001375D8(&v23, __p, (uint64_t)v3, (v3 - (_BYTE *)__p) >> 3);
    if (v24 == v23)
    {
      v21 = 0.0;
      if (!v23)
        goto LABEL_30;
    }
    else
    {
      v18 = 0.0;
      v19 = v23;
      do
      {
        v20 = *v19++;
        v18 = v18 + v20;
      }
      while (v19 != v24);
      v21 = v18 / (double)(unint64_t)(v24 - v23);
      if (!v23)
        goto LABEL_30;
    }
    v24 = v23;
    operator delete(v23);
LABEL_30:
    if (v21 > v5)
      v5 = v21;
    v3 = (char *)__p;
LABEL_34:
    v27 = v3;
    ++v4;
  }
  while (v4 != 3);
  if (v3)
    operator delete(v3);
  return v5;
}

void sub_10016EB94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double sub_10016EBB8(uint64_t a1, uint64_t *a2)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  char *v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  double v17;
  double *v18;
  double v19;
  double v20;
  double *v21;
  double *v22;
  double *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  double *v29;
  uint64_t v30;
  uint64_t v31;
  double v32;
  double v33;
  double v34;
  _BOOL4 v37;
  _BOOL4 v38;
  double *v40;
  double *v41;
  uint64_t v42;
  void *v43;
  double *v44;
  double *v45;
  void *__p;
  char *v47;
  char *v48;

  if (a2[1] == *a2)
    return -200.0;
  v3 = 0;
  v4 = 0;
  __p = 0;
  v47 = 0;
  v48 = 0;
  v43 = 0;
  v44 = 0;
  v45 = 0;
  do
  {
    v6 = *a2;
    v5 = a2[1];
    if (v5 == *a2)
      goto LABEL_50;
    v7 = dword_10046DDBC[v4];
    do
    {
      if (*(_DWORD *)(v6 + 16) == v7)
      {
        if (v3 >= v48)
        {
          v9 = (char *)__p;
          v10 = (v3 - (_BYTE *)__p) >> 3;
          v11 = v10 + 1;
          if ((unint64_t)(v10 + 1) >> 61)
            sub_100026E7C();
          v12 = v48 - (_BYTE *)__p;
          if ((v48 - (_BYTE *)__p) >> 2 > v11)
            v11 = v12 >> 2;
          if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
            v13 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v13 = v11;
          if (v13)
          {
            v14 = (char *)sub_10005538C((uint64_t)&v48, v13);
            v9 = (char *)__p;
            v3 = v47;
          }
          else
          {
            v14 = 0;
          }
          v15 = &v14[8 * v10];
          *(_QWORD *)v15 = *(_QWORD *)(v6 + 8);
          v8 = v15 + 8;
          while (v3 != v9)
          {
            v16 = *((_QWORD *)v3 - 1);
            v3 -= 8;
            *((_QWORD *)v15 - 1) = v16;
            v15 -= 8;
          }
          __p = v15;
          v47 = v8;
          v48 = &v14[8 * v13];
          if (v9)
            operator delete(v9);
        }
        else
        {
          *(_QWORD *)v3 = *(_QWORD *)(v6 + 8);
          v8 = v3 + 8;
        }
        v47 = v8;
        v5 = a2[1];
        v3 = v8;
      }
      v6 += 24;
    }
    while (v6 != v5);
    if (v3 == __p)
    {
      v3 = (char *)__p;
      goto LABEL_50;
    }
    v40 = 0;
    v41 = 0;
    v42 = 0;
    sub_1001375D8(&v40, __p, (uint64_t)v3, (v3 - (_BYTE *)__p) >> 3);
    if (v41 == v40)
    {
      v20 = 0.0;
      if (!v40)
        goto LABEL_30;
    }
    else
    {
      v17 = 0.0;
      v18 = v40;
      do
      {
        v19 = *v18++;
        v17 = v17 + v19;
      }
      while (v18 != v41);
      v20 = v17 / (double)(unint64_t)(v41 - v40);
      if (!v40)
        goto LABEL_30;
    }
    v41 = v40;
    operator delete(v40);
LABEL_30:
    v21 = v44;
    if (v44 >= v45)
    {
      v23 = (double *)v43;
      v24 = ((char *)v44 - (_BYTE *)v43) >> 3;
      v25 = v24 + 1;
      if ((unint64_t)(v24 + 1) >> 61)
        sub_100026E7C();
      v26 = (char *)v45 - (_BYTE *)v43;
      if (((char *)v45 - (_BYTE *)v43) >> 2 > v25)
        v25 = v26 >> 2;
      if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8)
        v27 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v27 = v25;
      if (v27)
      {
        v28 = (char *)sub_10005538C((uint64_t)&v45, v27);
        v23 = (double *)v43;
        v21 = v44;
      }
      else
      {
        v28 = 0;
      }
      v29 = (double *)&v28[8 * v24];
      *v29 = v20;
      v22 = v29 + 1;
      while (v21 != v23)
      {
        v30 = *((_QWORD *)v21-- - 1);
        *((_QWORD *)v29-- - 1) = v30;
      }
      v43 = v29;
      v44 = v22;
      v45 = (double *)&v28[8 * v27];
      if (v23)
        operator delete(v23);
    }
    else
    {
      *v44 = v20;
      v22 = v21 + 1;
    }
    v44 = v22;
    v3 = (char *)__p;
LABEL_50:
    v47 = v3;
    ++v4;
  }
  while (v4 != 3);
  v31 = ((char *)v44 - (_BYTE *)v43) >> 3;
  switch(v31)
  {
    case 1:
      v33 = *(double *)v43;
      goto LABEL_75;
    case 2:
      v33 = (*(double *)v43 + *((double *)v43 + 1)) * 0.5;
      goto LABEL_75;
    case 3:
      v33 = *(double *)v43;
      v32 = *((double *)v43 + 1);
      v34 = *((double *)v43 + 2);
      if ((*(double *)v43 < v32 || v33 > v34) && (v33 > v32 || v33 < v34))
      {
        v37 = v33 > v32;
        v38 = v33 < v32;
        if (v32 > v34)
          v37 = 1;
        if (v32 < v34)
          v38 = 1;
        if (v37 && v38)
          v33 = *((double *)v43 + 2);
        else
          v33 = *((double *)v43 + 1);
      }
LABEL_75:
      v44 = (double *)v43;
      operator delete(v43);
      v3 = (char *)__p;
      break;
    default:
      v33 = -200.0;
      if (v43)
        goto LABEL_75;
      break;
  }
  if (v3)
  {
    v47 = v3;
    operator delete(v3);
  }
  return v33;
}

void sub_10016EF10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  if (a16)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

double sub_10016EF48(uint64_t a1, __int128 **a2)
{
  __int128 *v2;
  __int128 *v3;
  unint64_t v4;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double *v10;
  double v11;
  double v12;
  double *v13;
  double v14;
  double *v16;
  double *v17;
  uint64_t v18;
  BOOL (*v19)(uint64_t, uint64_t);

  v3 = *a2;
  v2 = a2[1];
  v4 = 0xAAAAAAAAAAAAAAABLL * (((char *)v2 - (char *)*a2) >> 3);
  if (v4 <= 2 * *(int *)(a1 + 32))
  {
    if (v2 == v3)
      return 0.0;
    v16 = 0;
    v17 = 0;
    v18 = 0;
    sub_10016F900(&v16, v3, (uint64_t)v2, v4);
    if (v17 == v16)
    {
      v14 = 0.0;
      if (!v16)
        return v14;
    }
    else
    {
      v12 = 0.0;
      v13 = v16;
      do
      {
        v12 = v12 + v13[1];
        v13 += 3;
      }
      while (v13 != v17);
      v14 = v12 / (double)(0xAAAAAAAAAAAAAAABLL * (v17 - v16));
      if (!v16)
        return v14;
    }
    v17 = v16;
    operator delete(v16);
    return v14;
  }
  v19 = sub_10016E7D4;
  v7 = 126 - 2 * __clz(v4);
  if (v2 == v3)
    v8 = 0;
  else
    v8 = v7;
  sub_10016F978((uint64_t)v3, v2, (uint64_t (**)(__int128 *, __int128 *))&v19, v8, 1);
  v9 = *(int *)(a1 + 32);
  v10 = (double *)v3 + 3 * (int)v9;
  v11 = 0.0;
  while (v10 != (double *)((char *)v2 - 24 * v9))
  {
    v11 = v11 + v10[1];
    v10 += 3;
  }
  return v11 / (double)(0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3) - 2 * v9);
}

double sub_10016F0B4(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  unint64_t v4;
  double v5;
  double v6;
  double *v7;
  uint64_t v8;
  double *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  double *v15;
  uint64_t v16;
  double v17;
  double *v18;
  double v19;
  double v20;
  double v21;
  double *v23;
  double *v24;
  uint64_t v25;
  void *__p;
  double *v27;
  double *v28;

  __p = 0;
  v27 = 0;
  v28 = 0;
  v2 = *a2;
  if (a2[1] == *a2)
    return 0.0;
  v4 = 0;
  do
  {
    v5 = __exp10(*(double *)(v2 + 24 * v4 + 8) / 10.0);
    v6 = v5;
    v7 = v27;
    if (v27 >= v28)
    {
      v9 = (double *)__p;
      v10 = ((char *)v27 - (_BYTE *)__p) >> 3;
      v11 = v10 + 1;
      if ((unint64_t)(v10 + 1) >> 61)
        sub_100026E7C();
      v12 = (char *)v28 - (_BYTE *)__p;
      if (((char *)v28 - (_BYTE *)__p) >> 2 > v11)
        v11 = v12 >> 2;
      if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
        v13 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v13 = v11;
      if (v13)
      {
        v14 = (char *)sub_10005538C((uint64_t)&v28, v13);
        v9 = (double *)__p;
        v7 = v27;
      }
      else
      {
        v14 = 0;
      }
      v15 = (double *)&v14[8 * v10];
      *v15 = v6;
      v8 = (uint64_t)(v15 + 1);
      while (v7 != v9)
      {
        v16 = *((_QWORD *)v7-- - 1);
        *((_QWORD *)v15-- - 1) = v16;
      }
      __p = v15;
      v27 = (double *)v8;
      v28 = (double *)&v14[8 * v13];
      if (v9)
        operator delete(v9);
    }
    else
    {
      *v27 = v5;
      v8 = (uint64_t)(v7 + 1);
    }
    v27 = (double *)v8;
    ++v4;
    v2 = *a2;
  }
  while (0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3) > v4);
  v24 = 0;
  v25 = 0;
  v23 = 0;
  sub_1001375D8(&v23, __p, v8, (v8 - (uint64_t)__p) >> 3);
  if (v24 == v23)
  {
    v20 = 0.0;
    if (v23)
    {
LABEL_24:
      v24 = v23;
      operator delete(v23);
    }
  }
  else
  {
    v17 = 0.0;
    v18 = v23;
    do
    {
      v19 = *v18++;
      v17 = v17 + v19;
    }
    while (v18 != v24);
    v20 = v17 / (double)(unint64_t)(v24 - v23) * 0.797884561;
    if (v23)
      goto LABEL_24;
  }
  v21 = log10(v20) * 10.0;
  if (__p)
  {
    v27 = (double *)__p;
    operator delete(__p);
  }
  return v21;
}

void sub_10016F2A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10016F2CC(uint64_t a1)
{
  *(_QWORD *)a1 = off_100809860;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  operator delete();
}

void sub_10016F318(uint64_t a1)
{
  *(_QWORD *)a1 = off_100809860;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  operator delete();
}

void sub_10016F364(uint64_t a1)
{
  *(_QWORD *)a1 = off_100809860;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  operator delete();
}

void sub_10016F3B0(uint64_t a1)
{
  *(_QWORD *)a1 = off_100809860;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  operator delete();
}

void sub_10016F3FC(uint64_t a1)
{
  *(_QWORD *)a1 = off_100809860;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  operator delete();
}

void sub_10016F448(uint64_t a1)
{
  *(_QWORD *)a1 = off_100809860;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  operator delete();
}

void sub_10016F494(uint64_t a1)
{
  *(_QWORD *)a1 = off_100809860;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  operator delete();
}

_QWORD *sub_10016F4E0(_QWORD *a1)
{
  std::string __p;

  sub_10000BF04(&__p, "MAX_FILTER");
  sub_10016F55C((uint64_t)a1, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *a1 = off_100809690;
  return a1;
}

void sub_10016F540(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10016F55C(uint64_t a1, const std::string *a2)
{
  *(_QWORD *)a1 = off_100809860;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  std::string::operator=((std::string *)(a1 + 8), a2);
  return a1;
}

void sub_10016F5A4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_10016F5C0(_QWORD *a1)
{
  std::string __p;

  sub_10000BF04(&__p, "MEAN_FIILTER");
  sub_10016F55C((uint64_t)a1, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *a1 = off_1008096E0;
  return a1;
}

void sub_10016F620(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_10016F63C(_QWORD *a1)
{
  std::string __p;

  sub_10000BF04(&__p, "MEDIAN_FILTER");
  sub_10016F55C((uint64_t)a1, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *a1 = off_100809720;
  return a1;
}

void sub_10016F69C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_10016F6B8(_QWORD *a1)
{
  std::string __p;

  sub_10000BF04(&__p, "MAX_OF_MEAN_CHAN_FILTER");
  sub_10016F55C((uint64_t)a1, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *a1 = off_100809760;
  return a1;
}

void sub_10016F718(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_10016F734(_QWORD *a1)
{
  std::string __p;

  sub_10000BF04(&__p, "MEDIAN_OF_MEAN_CHAN_FILTER");
  sub_10016F55C((uint64_t)a1, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *a1 = off_1008097A0;
  return a1;
}

void sub_10016F794(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10016F7B0(uint64_t a1, int __val)
{
  std::string *v4;
  __int128 v5;
  std::string v7;
  std::string __p;

  std::to_string(&v7, __val);
  v4 = std::string::insert(&v7, 0, "OLYMPIC_FILTER");
  v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  sub_10016F55C(a1, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  *(_QWORD *)a1 = off_1008097E0;
  *(_DWORD *)(a1 + 32) = __val;
  return a1;
}

void sub_10016F850(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_10016F884(_QWORD *a1)
{
  std::string __p;

  sub_10000BF04(&__p, "RAYLEIGH_FILTER");
  sub_10016F55C((uint64_t)a1, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *a1 = off_100809820;
  return a1;
}

void sub_10016F8E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_10016F900(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = sub_100026E2C(result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_10016F95C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_10016F978(uint64_t a1, __int128 *a2, uint64_t (**a3)(__int128 *, __int128 *), uint64_t a4, char a5)
{
  __int128 *v9;
  __int128 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  __int128 *v16;
  uint64_t v17;
  __int128 *v18;
  __int128 *v19;
  __int128 *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t (*v24)(__int128 *, __int128 *);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  BOOL v29;
  uint64_t (*v30)(__int128 *, __int128 *);
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;

uint64_t sub_10016FCC8(uint64_t result, uint64_t a2, uint64_t (**a3)(__int128 *, __int128 *))
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(__int128 *, __int128 *);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(__int128 *, __int128 *);
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  if (result != a2)
  {
    v28 = v3;
    v29 = v4;
    v6 = result;
    v7 = result + 24;
    if (result + 24 != a2)
    {
      v9 = 0;
      v10 = result;
      do
      {
        v11 = v10;
        v10 = v7;
        v12 = *a3;
        v26 = *(_OWORD *)v10;
        v27 = *(_QWORD *)(v10 + 16);
        v13 = *(_QWORD *)(v11 + 16);
        v24 = *(_OWORD *)v11;
        v25 = v13;
        result = v12(&v26, &v24);
        if ((_DWORD)result)
        {
          v22 = *(_OWORD *)v10;
          v23 = *(_QWORD *)(v10 + 16);
          v14 = v9;
          while (1)
          {
            v15 = v6 + v14;
            *(_OWORD *)(v15 + 24) = *(_OWORD *)(v6 + v14);
            *(_QWORD *)(v15 + 40) = *(_QWORD *)(v6 + v14 + 16);
            if (!v14)
              break;
            v16 = *a3;
            v20 = v22;
            v21 = v23;
            v18 = *(_OWORD *)(v15 - 24);
            v19 = *(_QWORD *)(v15 - 8);
            result = v16(&v20, &v18);
            v14 -= 24;
            if ((result & 1) == 0)
            {
              v17 = v6 + v14 + 24;
              goto LABEL_10;
            }
          }
          v17 = v6;
LABEL_10:
          *(_OWORD *)v17 = v22;
          *(_QWORD *)(v17 + 16) = v23;
        }
        v7 = v10 + 24;
        v9 += 24;
      }
      while (v10 + 24 != a2);
    }
  }
  return result;
}

uint64_t sub_10016FDF0(uint64_t result, uint64_t a2, uint64_t (**a3)(__int128 *, __int128 *))
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t i;
  uint64_t v9;
  uint64_t (*v10)(__int128 *, __int128 *);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(__int128 *, __int128 *);
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  if (result != a2)
  {
    v25 = v3;
    v26 = v4;
    v6 = result;
    for (i = result + 24; v6 + 24 != a2; i = v6 + 24)
    {
      v9 = v6;
      v6 = i;
      v10 = *a3;
      v23 = *(_OWORD *)v6;
      v24 = *(_QWORD *)(v6 + 16);
      v11 = *(_QWORD *)(v9 + 16);
      v21 = *(_OWORD *)v9;
      v22 = v11;
      result = v10(&v23, &v21);
      if ((_DWORD)result)
      {
        v19 = *(_OWORD *)v6;
        v20 = *(_QWORD *)(v6 + 16);
        v12 = v6;
        do
        {
          v13 = v12 - 24;
          *(_OWORD *)v12 = *(_OWORD *)(v12 - 24);
          *(_QWORD *)(v12 + 16) = *(_QWORD *)(v12 - 8);
          v14 = *a3;
          v17 = v19;
          v18 = v20;
          v15 = *(_OWORD *)(v12 - 48);
          v16 = *(_QWORD *)(v12 - 32);
          result = v14(&v17, &v15);
          v12 = v13;
        }
        while ((result & 1) != 0);
        *(_OWORD *)v13 = v19;
        *(_QWORD *)(v13 + 16) = v20;
      }
    }
  }
  return result;
}

uint64_t sub_10016FEF0(__int128 *a1, __int128 *a2, __int128 *a3, uint64_t (**a4)(__int128 *, __int128 *))
{
  uint64_t (*v8)(__int128 *, __int128 *);
  char v9;
  uint64_t (*v10)(__int128 *, __int128 *);
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t (*v18)(__int128 *, __int128 *);
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t (*v26)(__int128 *, __int128 *);
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;

  v8 = *a4;
  v49 = *a2;
  v50 = *((_QWORD *)a2 + 2);
  v47 = *a1;
  v48 = *((_QWORD *)a1 + 2);
  v9 = v8(&v49, &v47);
  v10 = *a4;
  if ((v9 & 1) == 0)
  {
    v45 = *a3;
    v46 = *((_QWORD *)a3 + 2);
    v43 = *a2;
    v44 = *((_QWORD *)a2 + 2);
    result = v10(&v45, &v43);
    if (!(_DWORD)result)
      return result;
    v15 = *((_QWORD *)a2 + 2);
    v16 = *a2;
    v17 = *((_QWORD *)a3 + 2);
    *a2 = *a3;
    *((_QWORD *)a2 + 2) = v17;
    *a3 = v16;
    *((_QWORD *)a3 + 2) = v15;
    v18 = *a4;
    v42 = *((_QWORD *)a2 + 2);
    v41 = *a2;
    v19 = *a1;
    v40 = *((_QWORD *)a1 + 2);
    v39 = v19;
    if (!v18(&v41, &v39))
      return 1;
    v20 = *((_QWORD *)a1 + 2);
    v21 = *a1;
    v22 = *((_QWORD *)a2 + 2);
    *a1 = *a2;
    *((_QWORD *)a1 + 2) = v22;
    *a2 = v21;
    *((_QWORD *)a2 + 2) = v20;
    return 2;
  }
  v37 = *a3;
  v38 = *((_QWORD *)a3 + 2);
  v35 = *a2;
  v36 = *((_QWORD *)a2 + 2);
  if (!v10(&v37, &v35))
  {
    v23 = *((_QWORD *)a1 + 2);
    v24 = *a1;
    v25 = *((_QWORD *)a2 + 2);
    *a1 = *a2;
    *((_QWORD *)a1 + 2) = v25;
    *a2 = v24;
    *((_QWORD *)a2 + 2) = v23;
    v26 = *a4;
    v34 = *((_QWORD *)a3 + 2);
    v33 = *a3;
    v27 = *a2;
    v32 = *((_QWORD *)a2 + 2);
    v31 = v27;
    if (!v26(&v33, &v31))
      return 1;
    v28 = *((_QWORD *)a2 + 2);
    v29 = *a2;
    v30 = *((_QWORD *)a3 + 2);
    *a2 = *a3;
    *((_QWORD *)a2 + 2) = v30;
    *a3 = v29;
    *((_QWORD *)a3 + 2) = v28;
    return 2;
  }
  v11 = *((_QWORD *)a1 + 2);
  v12 = *a1;
  v13 = *((_QWORD *)a3 + 2);
  *a1 = *a3;
  *((_QWORD *)a1 + 2) = v13;
  *a3 = v12;
  *((_QWORD *)a3 + 2) = v11;
  return 1;
}

__int128 *sub_1001700E4(__int128 *a1, __int128 *a2, uint64_t (**a3)(__int128 *, __int128 *))
{
  __int128 *v4;
  uint64_t (*v6)(__int128 *, __int128 *);
  __int128 *v7;
  __int128 *v8;
  uint64_t (*v9)(__int128 *, __int128 *);
  char v10;
  __int128 *v11;
  uint64_t (*v12)(__int128 *, __int128 *);
  int v13;
  __int128 *v14;
  uint64_t (*v15)(__int128 *, __int128 *);
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  uint64_t (*v21)(__int128 *, __int128 *);
  uint64_t v22;
  __int128 v23;
  uint64_t (*v24)(__int128 *, __int128 *);
  __int128 *v25;
  __int128 v26;
  __int128 v27;
  __int128 v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;
  __int128 v55;
  uint64_t v56;

  v4 = a2;
  v53 = *a1;
  v54 = *((_QWORD *)a1 + 2);
  v6 = *a3;
  v51 = v53;
  v52 = v54;
  v49 = *(__int128 *)((char *)a2 - 24);
  v50 = *((_QWORD *)a2 - 1);
  if ((v6(&v51, &v49) & 1) != 0)
  {
    v7 = a1;
    do
    {
      v8 = (__int128 *)((char *)v7 + 24);
      v9 = *a3;
      v47 = v53;
      v48 = v54;
      v45 = *(__int128 *)((char *)v7 + 24);
      v46 = *((_QWORD *)v7 + 5);
      v10 = v9(&v47, &v45);
      v7 = v8;
    }
    while ((v10 & 1) == 0);
  }
  else
  {
    v11 = (__int128 *)((char *)a1 + 24);
    do
    {
      v8 = v11;
      if (v11 >= v4)
        break;
      v12 = *a3;
      v43 = v53;
      v44 = v54;
      v41 = *v8;
      v42 = *((_QWORD *)v8 + 2);
      v13 = v12(&v43, &v41);
      v11 = (__int128 *)((char *)v8 + 24);
    }
    while (!v13);
  }
  if (v8 >= v4)
  {
    v14 = v4;
  }
  else
  {
    do
    {
      v14 = (__int128 *)((char *)v4 - 24);
      v15 = *a3;
      v39 = v53;
      v40 = v54;
      v37 = *(__int128 *)((char *)v4 - 24);
      v38 = *((_QWORD *)v4 - 1);
      v4 = (__int128 *)((char *)v4 - 24);
    }
    while ((v15(&v39, &v37) & 1) != 0);
  }
  while (v8 < v14)
  {
    v16 = *v8;
    v56 = *((_QWORD *)v8 + 2);
    v55 = v16;
    v17 = *v14;
    *((_QWORD *)v8 + 2) = *((_QWORD *)v14 + 2);
    *v8 = v17;
    v18 = v55;
    *((_QWORD *)v14 + 2) = v56;
    *v14 = v18;
    do
    {
      v35 = v53;
      v36 = v54;
      v19 = *((_QWORD *)v8 + 5);
      v20 = *(__int128 *)((char *)v8 + 24);
      v8 = (__int128 *)((char *)v8 + 24);
      v21 = *a3;
      v33 = v20;
      v34 = v19;
    }
    while (!v21(&v35, &v33));
    do
    {
      v31 = v53;
      v32 = v54;
      v22 = *((_QWORD *)v14 - 1);
      v23 = *(__int128 *)((char *)v14 - 24);
      v14 = (__int128 *)((char *)v14 - 24);
      v24 = *a3;
      v29 = v23;
      v30 = v22;
    }
    while ((v24(&v31, &v29) & 1) != 0);
  }
  v25 = (__int128 *)((char *)v8 - 24);
  if ((__int128 *)((char *)v8 - 24) != a1)
  {
    v26 = *v25;
    *((_QWORD *)a1 + 2) = *((_QWORD *)v8 - 1);
    *a1 = v26;
  }
  v27 = v53;
  *((_QWORD *)v8 - 1) = v54;
  *v25 = v27;
  return v8;
}

uint64_t sub_100170310(__int128 *a1, unint64_t a2, uint64_t (**a3)(__int128 *, __int128 *))
{
  uint64_t v6;
  uint64_t (*v7)(__int128 *, __int128 *);
  __int128 *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t (*v11)(__int128 *, __int128 *);
  uint64_t (*v12)(__int128 *, __int128 *);
  __int128 *v13;
  unint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t (*v20)(__int128 *, __int128 *);
  uint64_t v21;
  __int128 v22;
  uint64_t (*v23)(__int128 *, __int128 *);
  __int128 v24;
  __int128 v25;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;

  v6 = 0;
  v47 = *a1;
  v48 = *((_QWORD *)a1 + 2);
  do
  {
    v7 = *a3;
    v45 = *(__int128 *)((char *)a1 + v6 + 24);
    v46 = *(_QWORD *)((char *)a1 + v6 + 40);
    v43 = v47;
    v44 = v48;
    v6 += 24;
  }
  while ((v7(&v45, &v43) & 1) != 0);
  v8 = (__int128 *)((char *)a1 + v6);
  v9 = (uint64_t)a1 + v6 - 24;
  if (v6 == 24)
  {
    while ((unint64_t)v8 < a2)
    {
      v12 = *a3;
      v10 = a2 - 24;
      v41 = *(_OWORD *)(a2 - 24);
      v42 = *(_QWORD *)(a2 - 8);
      v39 = v47;
      v40 = v48;
      a2 -= 24;
      if ((v12(&v41, &v39) & 1) != 0)
        goto LABEL_9;
    }
    v10 = a2;
  }
  else
  {
    do
    {
      v10 = a2 - 24;
      v11 = *a3;
      v37 = *(_OWORD *)(a2 - 24);
      v38 = *(_QWORD *)(a2 - 8);
      v35 = v47;
      v36 = v48;
      a2 -= 24;
    }
    while (!v11(&v37, &v35));
  }
LABEL_9:
  if ((unint64_t)v8 < v10)
  {
    v13 = v8;
    v14 = v10;
    do
    {
      v49 = *v13;
      v15 = v49;
      v50 = *((_QWORD *)v13 + 2);
      v16 = v50;
      v17 = *(_QWORD *)(v14 + 16);
      *v13 = *(_OWORD *)v14;
      *((_QWORD *)v13 + 2) = v17;
      *(_QWORD *)(v14 + 16) = v16;
      *(_OWORD *)v14 = v15;
      do
      {
        v18 = *((_QWORD *)v13 + 5);
        v19 = *(__int128 *)((char *)v13 + 24);
        v13 = (__int128 *)((char *)v13 + 24);
        v20 = *a3;
        v33 = v19;
        v34 = v18;
        v31 = v47;
        v32 = v48;
      }
      while ((v20(&v33, &v31) & 1) != 0);
      do
      {
        v21 = *(_QWORD *)(v14 - 8);
        v22 = *(_OWORD *)(v14 - 24);
        v14 -= 24;
        v23 = *a3;
        v29 = v22;
        v30 = v21;
        v27 = v47;
        v28 = v48;
      }
      while (!v23(&v29, &v27));
    }
    while ((unint64_t)v13 < v14);
    v9 = (uint64_t)v13 - 24;
  }
  if ((__int128 *)v9 != a1)
  {
    v24 = *(_OWORD *)v9;
    *((_QWORD *)a1 + 2) = *(_QWORD *)(v9 + 16);
    *a1 = v24;
  }
  v25 = v47;
  *(_QWORD *)(v9 + 16) = v48;
  *(_OWORD *)v9 = v25;
  return v9;
}

BOOL sub_100170524(uint64_t a1, uint64_t a2, uint64_t (**a3)(__int128 *, __int128 *))
{
  unint64_t v6;
  _BOOL8 result;
  uint64_t (*v8)(__int128 *, __int128 *);
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t (*v17)(__int128 *, __int128 *);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(__int128 *, __int128 *);
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;

  v6 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v8 = *a3;
      v35 = *(_OWORD *)(a2 - 24);
      v36 = *(_QWORD *)(a2 - 8);
      v33 = *(_OWORD *)a1;
      v34 = *(_QWORD *)(a1 + 16);
      if (v8(&v35, &v33))
      {
        v9 = a2 - 24;
        v10 = *(_QWORD *)(a1 + 16);
        v11 = *(_OWORD *)a1;
        v12 = *(_QWORD *)(a2 - 8);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 24);
        *(_QWORD *)(a1 + 16) = v12;
        *(_OWORD *)v9 = v11;
        *(_QWORD *)(v9 + 16) = v10;
      }
      return 1;
    case 3uLL:
      sub_10016FEF0((__int128 *)a1, (__int128 *)(a1 + 24), (__int128 *)(a2 - 24), a3);
      return 1;
    case 4uLL:
      sub_100170770(a1, a1 + 24, a1 + 48, (__int128 *)(a2 - 24), a3);
      return 1;
    case 5uLL:
      sub_1001708B8(a1, a1 + 24, a1 + 48, a1 + 72, (__int128 *)(a2 - 24), a3);
      return 1;
    default:
      v13 = a1 + 48;
      sub_10016FEF0((__int128 *)a1, (__int128 *)(a1 + 24), (__int128 *)(a1 + 48), a3);
      v14 = a1 + 72;
      if (a1 + 72 == a2)
        return 1;
      v15 = 0;
      v16 = 0;
      break;
  }
  while (1)
  {
    v17 = *a3;
    v31 = *(_OWORD *)v14;
    v32 = *(_QWORD *)(v14 + 16);
    v18 = *(_QWORD *)(v13 + 16);
    v29 = *(_OWORD *)v13;
    v30 = v18;
    if (v17(&v31, &v29))
    {
      v27 = *(_OWORD *)v14;
      v28 = *(_QWORD *)(v14 + 16);
      v19 = v15;
      while (1)
      {
        v20 = a1 + v19;
        *(_OWORD *)(v20 + 72) = *(_OWORD *)(a1 + v19 + 48);
        *(_QWORD *)(v20 + 88) = *(_QWORD *)(a1 + v19 + 64);
        if (v19 == -48)
          break;
        v21 = *a3;
        v25 = v27;
        v26 = v28;
        v23 = *(_OWORD *)(v20 + 24);
        v24 = *(_QWORD *)(v20 + 40);
        v19 -= 24;
        if ((v21(&v25, &v23) & 1) == 0)
        {
          v22 = a1 + v19 + 72;
          goto LABEL_12;
        }
      }
      v22 = a1;
LABEL_12:
      *(_OWORD *)v22 = v27;
      *(_QWORD *)(v22 + 16) = v28;
      if (++v16 == 8)
        return v14 + 24 == a2;
    }
    v13 = v14;
    v15 += 24;
    v14 += 24;
    if (v14 == a2)
      return 1;
  }
}

__n128 sub_100170770(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4, uint64_t (**a5)(__int128 *, __int128 *))
{
  uint64_t (*v10)(__int128 *, __int128 *);
  __n128 result;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t (*v15)(__int128 *, __int128 *);
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t (*v20)(__int128 *, __int128 *);
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;

  sub_10016FEF0((__int128 *)a1, (__int128 *)a2, (__int128 *)a3, a5);
  v10 = *a5;
  v34 = *a4;
  v35 = *((_QWORD *)a4 + 2);
  v32 = *(_OWORD *)a3;
  v33 = *(_QWORD *)(a3 + 16);
  if (v10(&v34, &v32))
  {
    v12 = *(_QWORD *)(a3 + 16);
    v13 = *(_OWORD *)a3;
    v14 = *((_QWORD *)a4 + 2);
    *(_OWORD *)a3 = *a4;
    *(_QWORD *)(a3 + 16) = v14;
    *a4 = v13;
    *((_QWORD *)a4 + 2) = v12;
    v15 = *a5;
    v31 = *(_QWORD *)(a3 + 16);
    v30 = *(_OWORD *)a3;
    v16 = *(_OWORD *)a2;
    v29 = *(_QWORD *)(a2 + 16);
    v28 = v16;
    if (v15(&v30, &v28))
    {
      v17 = *(_QWORD *)(a2 + 16);
      v18 = *(_OWORD *)a2;
      v19 = *(_QWORD *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_QWORD *)(a2 + 16) = v19;
      *(_OWORD *)a3 = v18;
      *(_QWORD *)(a3 + 16) = v17;
      v20 = *a5;
      v27 = *(_QWORD *)(a2 + 16);
      v26 = *(_OWORD *)a2;
      v21 = *(_OWORD *)a1;
      v25 = *(_QWORD *)(a1 + 16);
      v24 = v21;
      if (v20(&v26, &v24))
      {
        v22 = *(_QWORD *)(a1 + 16);
        result = *(__n128 *)a1;
        v23 = *(_QWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_QWORD *)(a1 + 16) = v23;
        *(__n128 *)a2 = result;
        *(_QWORD *)(a2 + 16) = v22;
      }
    }
  }
  return result;
}

__n128 sub_1001708B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int128 *a5, uint64_t (**a6)(__int128 *, __int128 *))
{
  uint64_t (*v12)(__int128 *, __int128 *);
  __n128 result;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t (*v17)(__int128 *, __int128 *);
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t (*v22)(__int128 *, __int128 *);
  __n128 v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v26;
  uint64_t (*v27)(__int128 *, __int128 *);
  __n128 v28;
  uint64_t v29;
  uint64_t v30;
  __n128 v31;
  uint64_t v32;
  __n128 v33;
  uint64_t v34;
  __n128 v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;

  sub_100170770(a1, a2, a3, (__int128 *)a4, a6);
  v12 = *a6;
  v45 = *a5;
  v46 = *((_QWORD *)a5 + 2);
  v43 = *(_OWORD *)a4;
  v44 = *(_QWORD *)(a4 + 16);
  if (v12(&v45, &v43))
  {
    v14 = *(_QWORD *)(a4 + 16);
    v15 = *(_OWORD *)a4;
    v16 = *((_QWORD *)a5 + 2);
    *(_OWORD *)a4 = *a5;
    *(_QWORD *)(a4 + 16) = v16;
    *a5 = v15;
    *((_QWORD *)a5 + 2) = v14;
    v17 = *a6;
    v42 = *(_QWORD *)(a4 + 16);
    v41 = *(_OWORD *)a4;
    v18 = *(_OWORD *)a3;
    v40 = *(_QWORD *)(a3 + 16);
    v39 = v18;
    if (v17(&v41, &v39))
    {
      v19 = *(_QWORD *)(a3 + 16);
      v20 = *(_OWORD *)a3;
      v21 = *(_QWORD *)(a4 + 16);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(_QWORD *)(a3 + 16) = v21;
      *(_OWORD *)a4 = v20;
      *(_QWORD *)(a4 + 16) = v19;
      v22 = *a6;
      v38 = *(_QWORD *)(a3 + 16);
      v37 = *(_OWORD *)a3;
      v23 = *(__n128 *)a2;
      v36 = *(_QWORD *)(a2 + 16);
      v35 = v23;
      if (v22(&v37, (__int128 *)&v35))
      {
        v24 = *(_QWORD *)(a2 + 16);
        v25 = *(__n128 *)a2;
        v26 = *(_QWORD *)(a3 + 16);
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(_QWORD *)(a2 + 16) = v26;
        *(__n128 *)a3 = v25;
        *(_QWORD *)(a3 + 16) = v24;
        v27 = *a6;
        v34 = *(_QWORD *)(a2 + 16);
        v33 = *(__n128 *)a2;
        v28 = *(__n128 *)a1;
        v32 = *(_QWORD *)(a1 + 16);
        v31 = v28;
        if (v27((__int128 *)&v33, (__int128 *)&v31))
        {
          v29 = *(_QWORD *)(a1 + 16);
          result = *(__n128 *)a1;
          v30 = *(_QWORD *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_QWORD *)(a1 + 16) = v30;
          *(__n128 *)a2 = result;
          *(_QWORD *)(a2 + 16) = v29;
        }
      }
    }
  }
  return result;
}

__n128 *sub_100170A60(__n128 *a1, __n128 *a2, __n128 *a3, unsigned int (**a4)(__n128 *, __int128 *))
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __n128 *v12;
  __n128 *v13;
  __n128 *v14;
  unsigned int (*v15)(__n128 *, __int128 *);
  unint64_t v16;
  __n128 v17;
  unint64_t v18;
  int64_t v19;
  __n128 *v20;
  uint64_t v21;
  __n128 v22;
  __n128 v25;
  unint64_t v26;
  __n128 v27;
  uint64_t v28;
  __n128 v29;
  unint64_t v30;

  if (a1 != a2)
  {
    v8 = (char *)a2 - (char *)a1;
    v9 = ((char *)a2 - (char *)a1) / 24;
    if ((char *)a2 - (char *)a1 >= 25)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = (__n128 *)((char *)a1 + 24 * v10);
      do
      {
        sub_100170C40((uint64_t)a1, a4, v9, v12);
        v12 = (__n128 *)((char *)v12 - 24);
        --v11;
      }
      while (v11);
    }
    v13 = a2;
    if (a2 != a3)
    {
      v14 = a2;
      do
      {
        v15 = *a4;
        v27 = *v14;
        v28 = v14[1].n128_i64[0];
        v25 = *a1;
        v26 = a1[1].n128_u64[0];
        if (v15(&v27, (__int128 *)&v25))
        {
          v16 = v14[1].n128_u64[0];
          v17 = *v14;
          v18 = a1[1].n128_u64[0];
          *v14 = *a1;
          v14[1].n128_u64[0] = v18;
          *a1 = v17;
          a1[1].n128_u64[0] = v16;
          sub_100170C40((uint64_t)a1, a4, v9, a1);
        }
        v14 = (__n128 *)((char *)v14 + 24);
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 25)
    {
      v19 = v8 / 0x18uLL;
      v20 = (__n128 *)((char *)a2 - 24);
      do
      {
        v29 = *a1;
        v30 = a1[1].n128_u64[0];
        v21 = sub_100170E24((uint64_t)a1, (unsigned int (**)(__int128 *, __int128 *))a4, v19);
        if (v20 == (__n128 *)v21)
        {
          *(__n128 *)v21 = v29;
          *(_QWORD *)(v21 + 16) = v30;
        }
        else
        {
          v22 = *v20;
          *(_QWORD *)(v21 + 16) = v20[1].n128_u64[0];
          *(__n128 *)v21 = v22;
          *v20 = v29;
          v20[1].n128_u64[0] = v30;
          sub_100170F0C((uint64_t)a1, v21 + 24, (unsigned int (**)(__int128 *, __int128 *))a4, 0xAAAAAAAAAAAAAAABLL * ((v21 + 24 - (uint64_t)a1) >> 3));
        }
        v20 = (__n128 *)((char *)v20 - 24);
      }
      while (v19-- > 2);
    }
    return v13;
  }
  return a3;
}

__n128 sub_100170C40(uint64_t a1, unsigned int (**a2)(__n128 *, __int128 *), uint64_t a3, __n128 *a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  __n128 *v7;
  uint64_t v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int (*v15)(__n128 *, __int128 *);
  uint64_t (*v16)(__n128 *, __n128 *);
  __n128 result;
  __n128 *v18;
  __n128 v19;
  uint64_t v20;
  unsigned int (*v21)(__n128 *, __int128 *);
  unsigned int (*v22)(__n128 *, __int128 *);
  __n128 v23;
  unint64_t v24;
  __n128 v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  __n128 v29;
  uint64_t v30;
  __n128 v31;
  unint64_t v32;
  __n128 v33;
  unint64_t v34;
  __n128 v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  __n128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v6 = a3 - 2;
  if (a3 >= 2)
  {
    v41 = v4;
    v42 = v5;
    v7 = a4;
    v9 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) >= (uint64_t)(0xAAAAAAAAAAAAAAABLL * (((uint64_t)a4 - a1) >> 3)))
    {
      v12 = (0x5555555555555556 * (((uint64_t)a4 - a1) >> 3)) | 1;
      v13 = a1 + 24 * v12;
      v14 = 0x5555555555555556 * (((uint64_t)a4 - a1) >> 3) + 2;
      if (v14 < a3)
      {
        v15 = *a2;
        v39 = *(__n128 *)v13;
        v40 = *(_QWORD *)(v13 + 16);
        v37 = *(_OWORD *)(v13 + 24);
        v38 = *(_QWORD *)(v13 + 40);
        if (v15(&v39, &v37))
        {
          v13 += 24;
          v12 = v14;
        }
      }
      v16 = (uint64_t (*)(__n128 *, __n128 *))*a2;
      v35 = *(__n128 *)v13;
      v36 = *(_QWORD *)(v13 + 16);
      v33 = *v7;
      v34 = v7[1].n128_u64[0];
      if ((v16(&v35, &v33) & 1) == 0)
      {
        v31 = *v7;
        v32 = v7[1].n128_u64[0];
        do
        {
          v18 = (__n128 *)v13;
          v19 = *(__n128 *)v13;
          v7[1].n128_u64[0] = *(_QWORD *)(v13 + 16);
          *v7 = v19;
          if (v9 < v12)
            break;
          v20 = (2 * v12) | 1;
          v13 = a1 + 24 * v20;
          if (2 * v12 + 2 < a3)
          {
            v21 = *a2;
            v29 = *(__n128 *)v13;
            v30 = *(_QWORD *)(v13 + 16);
            v27 = *(_OWORD *)(v13 + 24);
            v28 = *(_QWORD *)(v13 + 40);
            if (v21(&v29, &v27))
            {
              v13 += 24;
              v20 = 2 * v12 + 2;
            }
          }
          v22 = *a2;
          v25 = *(__n128 *)v13;
          v26 = *(_QWORD *)(v13 + 16);
          v23 = v31;
          v24 = v32;
          v7 = v18;
          v12 = v20;
        }
        while (!v22(&v25, (__int128 *)&v23));
        result = v31;
        v18[1].n128_u64[0] = v32;
        *v18 = result;
      }
    }
  }
  return result;
}

uint64_t sub_100170E24(uint64_t a1, unsigned int (**a2)(__int128 *, __int128 *), uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(__int128 *, __int128 *);
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;

  v6 = 0;
  v7 = a3 - 2;
  if (a3 < 2)
    v7 = a3 - 1;
  v8 = v7 >> 1;
  do
  {
    v9 = a1 + 24 * v6 + 24;
    v10 = (2 * v6) | 1;
    v11 = 2 * v6 + 2;
    if (v11 < a3)
    {
      v12 = *a2;
      v13 = *(_QWORD *)(v9 + 16);
      v19 = *(_OWORD *)v9;
      v20 = v13;
      v14 = *(_QWORD *)(v9 + 40);
      v17 = *(_OWORD *)(v9 + 24);
      v18 = v14;
      if (v12(&v19, &v17))
      {
        v9 += 24;
        v10 = v11;
      }
    }
    v15 = *(_OWORD *)v9;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(v9 + 16);
    *(_OWORD *)a1 = v15;
    a1 = v9;
    v6 = v10;
  }
  while (v10 <= v8);
  return v9;
}

double sub_100170F0C(uint64_t a1, uint64_t a2, unsigned int (**a3)(__int128 *, __int128 *), uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v10;
  __int128 *v11;
  unsigned int (*v12)(__int128 *, __int128 *);
  double result;
  __int128 *v14;
  __int128 *v15;
  __int128 v16;
  unsigned int (*v17)(__int128 *, __int128 *);
  char v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v6 = a4 - 2;
  if (a4 >= 2)
  {
    v29 = v4;
    v30 = v5;
    v10 = v6 >> 1;
    v11 = (__int128 *)(a1 + 24 * (v6 >> 1));
    v12 = *a3;
    v27 = *v11;
    v28 = *((_QWORD *)v11 + 2);
    v25 = *(_OWORD *)(a2 - 24);
    v26 = *(_QWORD *)(a2 - 8);
    if (v12(&v27, &v25))
    {
      v14 = (__int128 *)(a2 - 24);
      v23 = *(_OWORD *)(a2 - 24);
      v24 = *(_QWORD *)(a2 - 8);
      do
      {
        v15 = v11;
        v16 = *v11;
        *((_QWORD *)v14 + 2) = *((_QWORD *)v11 + 2);
        *v14 = v16;
        if (!v10)
          break;
        v10 = (v10 - 1) >> 1;
        v11 = (__int128 *)(a1 + 24 * v10);
        v17 = *a3;
        v21 = *v11;
        v22 = *((_QWORD *)v11 + 2);
        v19 = v23;
        v20 = v24;
        v18 = v17(&v21, &v19);
        v14 = v15;
      }
      while ((v18 & 1) != 0);
      result = *(double *)&v23;
      *v15 = v23;
      *((_QWORD *)v15 + 2) = v24;
    }
  }
  return result;
}

uint64_t sub_100171014()
{
  sub_10016F4E0(qword_100856E08);
  __cxa_atexit((void (*)(void *))sub_10016E630, qword_100856E08, (void *)&_mh_execute_header);
  sub_10016F5C0(qword_100856E28);
  __cxa_atexit((void (*)(void *))sub_10016E66C, qword_100856E28, (void *)&_mh_execute_header);
  sub_10016F63C(qword_100856E48);
  __cxa_atexit((void (*)(void *))sub_10016E6A8, qword_100856E48, (void *)&_mh_execute_header);
  sub_10016F6B8(qword_100856E68);
  __cxa_atexit((void (*)(void *))sub_10016E6E4, qword_100856E68, (void *)&_mh_execute_header);
  sub_10016F734(qword_100856E88);
  __cxa_atexit((void (*)(void *))sub_10016E720, qword_100856E88, (void *)&_mh_execute_header);
  sub_10016F7B0((uint64_t)&unk_100856EA8, 1);
  __cxa_atexit((void (*)(void *))sub_10016E75C, &unk_100856EA8, (void *)&_mh_execute_header);
  sub_10016F7B0((uint64_t)&unk_100856ED0, 2);
  __cxa_atexit((void (*)(void *))sub_10016E75C, &unk_100856ED0, (void *)&_mh_execute_header);
  sub_10016F884(qword_100856EF8);
  return __cxa_atexit((void (*)(void *))sub_10016E798, qword_100856EF8, (void *)&_mh_execute_header);
}

void sub_1001711A0(id a1)
{
  byte_100856F18 = MGGetBoolAnswer(CFSTR("InternalBuild"));
}

void sub_100171204(id a1)
{
  byte_100856F28 = MGGetBoolAnswer(CFSTR("DeviceProximityCapability"));
}

void sub_100171268(id a1)
{
  char v1;
  uint64_t v2;
  uint64_t v3;

  if (!MGGetBoolAnswer(CFSTR("DeviceProximityCapability")))
    goto LABEL_17;
  v1 = 1;
  v2 = MGGetProductType();
  if (v2 <= 2309863437)
  {
    if (v2 <= 1169082143)
    {
      if (v2 == 689804742)
        goto LABEL_18;
      v3 = 1060988941;
    }
    else
    {
      if (v2 == 1169082144 || v2 == 1371389549)
        goto LABEL_18;
      v3 = 2080700391;
    }
  }
  else if (v2 > 3585085678)
  {
    if (v2 == 3585085679 || v2 == 3885279870)
      goto LABEL_18;
    v3 = 4201643249;
  }
  else
  {
    if (v2 == 2309863438 || v2 == 2722529672)
      goto LABEL_18;
    v3 = 3001488778;
  }
  if (v2 != v3)
LABEL_17:
    v1 = 0;
LABEL_18:
  byte_100856F38 = v1;
}

void sub_1001713B8(id a1)
{
  BOOL v1;

  if (MGGetBoolAnswer(CFSTR("DeviceProximityCapability")))
    v1 = MGGetSInt32Answer(CFSTR("DeviceClassNumber"), 0xFFFFFFFFLL) == 1;
  else
    v1 = 0;
  byte_100856F48 = v1;
}

void sub_100171440(id a1)
{
  byte_100856F58 = MGGetBoolAnswer(CFSTR("arkit"));
}

void sub_1001714A4(id a1)
{
  char v1;
  uint64_t v2;
  uint64_t v3;

  if (!MGGetBoolAnswer(CFSTR("DeviceProximityCapability")))
    goto LABEL_14;
  v1 = 1;
  v2 = MGGetProductType();
  if (v2 > 2793418700)
  {
    if (v2 > 2941181570)
    {
      if (v2 == 2941181571)
        goto LABEL_15;
      v3 = 3825599860;
    }
    else
    {
      if (v2 == 2793418701)
        goto LABEL_15;
      v3 = 2795618603;
    }
  }
  else if (v2 > 574536382)
  {
    if (v2 == 574536383)
      goto LABEL_15;
    v3 = 851437781;
  }
  else
  {
    if (v2 == 133314240)
      goto LABEL_15;
    v3 = 330877086;
  }
  if (v2 != v3)
LABEL_14:
    v1 = 0;
LABEL_15:
  byte_100856F68 = v1;
}

_QWORD *sub_100171584@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, (&off_100809938)[a1]);
}

_QWORD *sub_100171598@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, (&off_100809990)[a1]);
}

_QWORD *sub_1001715AC@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, (&off_1008099D8)[a1]);
}

_QWORD *sub_1001715C0@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, (&off_1008099F8)[a1]);
}

void sub_1001715D4(uint64_t a1@<X0>, __int16 a2@<W1>, uint64_t a3@<X8>)
{
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  char v15;
  int v16;
  _BYTE v17[153];

  memset(&v17[37], 0, 116);
  *(_WORD *)v17 = a2;
  *(_QWORD *)&v17[2] = 0xFFFFFFFFLL;
  *(_WORD *)&v17[10] = 0;
  *(_OWORD *)&v17[12] = *(_OWORD *)(a1 + 68);
  *(_OWORD *)&v17[21] = *(_OWORD *)(a1 + 77);
  switch(*(_DWORD *)(a1 + 4))
  {
    case 0:
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
        sub_1003D1114();
      goto LABEL_102;
    case 1:
      v17[6] = 101;
      *(_DWORD *)&v17[2] = 20;
      v5 = *((_DWORD *)sub_100004784() + 187);
      if (!v5)
      {
        if (!os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
          goto LABEL_102;
        goto LABEL_89;
      }
      if (v5 == 2)
      {
        if (sub_1001724C8((uint64_t)&v17[37], a1))
          goto LABEL_48;
        if (!os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
          goto LABEL_102;
      }
      else
      {
        if (v5 != 1 || sub_100171DA4((uint64_t)&v17[37], a1))
          goto LABEL_48;
        if (!os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
          goto LABEL_102;
      }
      goto LABEL_101;
    case 2:
      v17[6] = 100;
      *(_DWORD *)&v17[2] = 17;
      v6 = *((_DWORD *)sub_100004784() + 187);
      if (!v6)
      {
        if (!os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
          goto LABEL_102;
        goto LABEL_89;
      }
      if (v6 == 2)
      {
        if (sub_100172FD8((uint64_t)&v17[37], a1))
          goto LABEL_48;
        if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
          sub_1003D0FE0();
      }
      else
      {
        if (v6 != 1 || (sub_100172BCC((uint64_t)&v17[37], a1) & 1) != 0)
          goto LABEL_48;
        if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
          sub_1003D0FB4();
      }
      goto LABEL_102;
    case 3:
      if (!*(_BYTE *)(a1 + 293))
      {
        if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_FAULT))
          sub_1003D100C();
        goto LABEL_102;
      }
      v17[6] = *(_BYTE *)(a1 + 292);
      if (v17[6] != 102 && v17[6] != 106)
      {
        if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_FAULT))
          sub_1003D1038();
        goto LABEL_102;
      }
      *(_DWORD *)&v17[2] = 16;
      v7 = *((_DWORD *)sub_100004784() + 187);
      if (!v7)
      {
        if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
LABEL_89:
          sub_1003D0F88();
        goto LABEL_102;
      }
      if (v7 == 2)
      {
        if (sub_100173854((uint64_t)&v17[37], a1))
          goto LABEL_48;
        if (!os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
          goto LABEL_102;
      }
      else
      {
        if (v7 != 1 || sub_100173390((uint64_t)&v17[37], a1))
          goto LABEL_48;
        if (!os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
          goto LABEL_102;
      }
      goto LABEL_101;
    case 4:
      if (!*(_BYTE *)(a1 + 280))
      {
        if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_FAULT))
          sub_1003D1064();
        goto LABEL_102;
      }
      v17[6] = *(_BYTE *)(a1 + 243);
      if (v17[6] == 5)
      {
        *(_DWORD *)&v17[2] = 23;
        v8 = *((_DWORD *)sub_100004784() + 187);
        if (v8)
        {
          if (v8 == 2)
          {
            if (sub_100174458((uint64_t)&v17[37], a1))
              goto LABEL_48;
          }
          else if (v8 == 1 && sub_100173D3C((uint64_t)&v17[37], a1))
          {
            goto LABEL_48;
          }
          goto LABEL_100;
        }
        if (!os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
          goto LABEL_100;
LABEL_94:
        sub_1003D1090();
        goto LABEL_100;
      }
      *(_DWORD *)&v17[2] = 22;
      v16 = *((_DWORD *)sub_100004784() + 187);
      if (v16)
      {
        if (v16 == 1)
        {
          if (sub_100174B8C((uint64_t)&v17[37], a1))
            goto LABEL_48;
        }
        else if (v16 == 2 && sub_1001754C0((uint64_t)&v17[37], a1))
        {
          goto LABEL_48;
        }
        goto LABEL_100;
      }
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
        goto LABEL_94;
LABEL_100:
      if (!os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
        goto LABEL_102;
LABEL_101:
      sub_1003D0F5C();
LABEL_102:
      v15 = 0;
      *(_BYTE *)a3 = 0;
LABEL_103:
      *(_BYTE *)(a3 + 153) = v15;
      return;
    case 5:
      v17[6] = 103;
      *(_DWORD *)&v17[2] = 24;
      v9 = *((_DWORD *)sub_100004784() + 187);
      if (!v9)
      {
        if (!os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
          goto LABEL_102;
        goto LABEL_77;
      }
      if (v9 == 2)
      {
        if (sub_100176220((uint64_t)&v17[37], a1))
          goto LABEL_48;
        if (!os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
          goto LABEL_102;
      }
      else
      {
        if (v9 != 1 || sub_100175E14((uint64_t)&v17[37], a1))
          goto LABEL_48;
        if (!os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
          goto LABEL_102;
      }
      goto LABEL_101;
    case 6:
      v17[6] = 103;
      *(_DWORD *)&v17[2] = 25;
      v10 = *((_DWORD *)sub_100004784() + 187);
      if (!v10)
      {
        if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
LABEL_77:
          sub_1003D0F5C();
        goto LABEL_102;
      }
      if (v10 == 2)
      {
        if (!sub_100176ABC((uint64_t)&v17[37], a1))
        {
          if (!os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
            goto LABEL_102;
          goto LABEL_101;
        }
      }
      else if (v10 == 1 && !sub_100176634((uint64_t)&v17[37], a1))
      {
        if (!os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
          goto LABEL_102;
        goto LABEL_101;
      }
LABEL_48:
      if (sub_1001779A4(&v17[7], a1))
      {
        if (sub_100177B2C(&v17[11], a1))
        {
          v11 = *(_OWORD *)&v17[112];
          *(_OWORD *)(a3 + 96) = *(_OWORD *)&v17[96];
          *(_OWORD *)(a3 + 112) = v11;
          *(_OWORD *)(a3 + 128) = *(_OWORD *)&v17[128];
          *(_OWORD *)(a3 + 137) = *(_OWORD *)&v17[137];
          v12 = *(_OWORD *)&v17[48];
          *(_OWORD *)(a3 + 32) = *(_OWORD *)&v17[32];
          *(_OWORD *)(a3 + 48) = v12;
          v13 = *(_OWORD *)&v17[80];
          *(_OWORD *)(a3 + 64) = *(_OWORD *)&v17[64];
          *(_OWORD *)(a3 + 80) = v13;
          v14 = *(_OWORD *)&v17[16];
          v15 = 1;
          *(_OWORD *)a3 = *(_OWORD *)v17;
          *(_OWORD *)(a3 + 16) = v14;
          goto LABEL_103;
        }
        if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
          sub_1003D0F04();
      }
      else if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
      {
        sub_1003D0F30();
      }
      goto LABEL_102;
    case 7:
      v17[6] = 104;
      *(_DWORD *)&v17[2] = 26;
      if (sub_100176F4C((uint64_t)&v17[37], a1))
        goto LABEL_48;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
        sub_1003D10BC();
      goto LABEL_102;
    case 8:
      v17[6] = 105;
      *(_DWORD *)&v17[2] = 27;
      if (sub_1001772FC((uint64_t)&v17[37], a1))
        goto LABEL_48;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
        sub_1003D10E8();
      goto LABEL_102;
    default:
      goto LABEL_48;
  }
}

BOOL sub_100171DA4(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  _BOOL8 result;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  uint64_t v38;
  int v39;
  int v40;
  uint64_t v41;
  const char *v42;
  NSObject *v43;
  uint32_t v44;
  uint64_t v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  uint64_t v63;
  int v64;
  int v65;
  uint64_t v66;
  uint8_t buf[4];
  int v68;
  __int16 v69;
  int v70;
  __int16 v71;
  int v72;
  __int16 v73;
  int v74;
  __int16 v75;
  int v76;
  __int16 v77;
  int v78;
  __int16 v79;
  int v80;
  __int16 v81;
  int v82;
  __int16 v83;
  int v84;
  __int16 v85;
  int v86;
  __int16 v87;
  int v88;
  __int16 v89;
  int v90;
  __int16 v91;
  int v92;
  __int16 v93;
  int v94;
  __int16 v95;
  int v96;
  __int16 v97;
  int v98;
  __int16 v99;
  int v100;
  __int16 v101;
  _BYTE v102[14];
  __int16 v103;
  int v104;
  __int16 v105;
  _QWORD v106[3];

  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
    sub_1003D12A0();
  if (!*(_BYTE *)(a2 + 97)
    || !*(_BYTE *)(a2 + 99)
    || !*(_BYTE *)(a2 + 163)
    || !*(_BYTE *)(a2 + 101)
    || !*(_BYTE *)(a2 + 103)
    || !*(_BYTE *)(a2 + 105)
    || !*(_BYTE *)(a2 + 107)
    || !*(_BYTE *)(a2 + 110)
    || !*(_BYTE *)(a2 + 113)
    || !*(_BYTE *)(a2 + 115)
    || !*(_BYTE *)(a2 + 117)
    || !*(_BYTE *)(a2 + 201)
    || !*(_BYTE *)(a2 + 203)
    || !*(_BYTE *)(a2 + 120)
    || !*(_BYTE *)(a2 + 194)
    || !*(_BYTE *)(a2 + 198)
    || !*(_BYTE *)(a2 + 153))
  {
    result = os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_FAULT);
    if (!result)
      return result;
    sub_1003D1140();
    return 0;
  }
  v4 = *(unsigned __int8 *)(a2 + 96);
  if (v4 >= 2)
  {
    v6 = (id)qword_10085F520;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
    {
      if (!*(_BYTE *)(a2 + 97))
        sub_10000BA44();
      sub_1003D1264((unsigned __int8 *)(a2 + 96), (uint64_t)buf, v6);
    }

    return 0;
  }
  *(_WORD *)(a1 + 16) = 16401;
  if (!*(_BYTE *)(a2 + 97))
    sub_10000BA44();
  *(_BYTE *)(a1 + 22) = *(_BYTE *)(a2 + 96);
  if (!*(_BYTE *)(a2 + 99))
    sub_10000BA44();
  *(_BYTE *)(a1 + 23) = *(_BYTE *)(a2 + 98);
  if (!*(_BYTE *)(a2 + 163))
    sub_10000BA44();
  *(_BYTE *)(a1 + 36) = *(_BYTE *)(a2 + 162);
  if (!*(_BYTE *)(a2 + 101))
    sub_10000BA44();
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 100);
  if (!*(_BYTE *)(a2 + 103))
    sub_10000BA44();
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 102);
  if (v4 == 1)
  {
    if (*(_BYTE *)(a2 + 170))
    {
      *(_WORD *)(a1 + 37) = *(_WORD *)(a2 + 168);
      goto LABEL_41;
    }
    result = os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR);
    if (result)
    {
      sub_1003D1238();
      return 0;
    }
  }
  else
  {
    if (*(_BYTE *)(a2 + 165) && *(_BYTE *)(a2 + 167))
    {
      *(_BYTE *)(a1 + 37) = *(_BYTE *)(a2 + 164);
      if (!*(_BYTE *)(a2 + 167))
        sub_10000BA44();
      *(_BYTE *)(a1 + 38) = *(_BYTE *)(a2 + 166);
LABEL_41:
      if (!*(_BYTE *)(a2 + 105))
        sub_10000BA44();
      if (!sub_10036B59C(*(unsigned __int8 *)(a2 + 104)))
        sub_1003D11E4();
      if (!*(_BYTE *)(a2 + 107))
        sub_10000BA44();
      if (!sub_10036B59C(*(unsigned __int8 *)(a2 + 106)))
        sub_1003D11BC();
      if (!*(_BYTE *)(a2 + 110))
        sub_10000BA44();
      if (!sub_10036C6C0((_BYTE *)(a2 + 108)))
        sub_1003D1194();
      if (!*(_BYTE *)(a2 + 113))
        sub_10000BA44();
      if (!sub_10036C6C0((_BYTE *)(a2 + 111)))
        sub_1003D116C();
      if (!*(_BYTE *)(a2 + 105))
        sub_10000BA44();
      *(_BYTE *)(a1 + 26) = sub_10036B654(*(unsigned __int8 *)(a2 + 104), 1, v7, v8, v9, v10, v11, v12);
      if (!*(_BYTE *)(a2 + 107))
        sub_10000BA44();
      *(_BYTE *)(a1 + 27) = sub_10036B654(*(unsigned __int8 *)(a2 + 106), 1, v13, v14, v15, v16, v17, v18);
      if (!*(_BYTE *)(a2 + 110))
        sub_10000BA44();
      *(_BYTE *)(a1 + 28) = *(_BYTE *)(a2 + 109);
      if (!*(_BYTE *)(a2 + 113))
        sub_10000BA44();
      *(_BYTE *)(a1 + 29) = *(_BYTE *)(a2 + 112);
      if (!*(_BYTE *)(a2 + 115))
        sub_10000BA44();
      *(_BYTE *)(a1 + 30) = *(_BYTE *)(a2 + 114);
      if (!*(_BYTE *)(a2 + 117))
        sub_10000BA44();
      *(_BYTE *)(a1 + 31) = *(_BYTE *)(a2 + 116);
      if (!*(_BYTE *)(a2 + 201))
        sub_10000BA44();
      *(_BYTE *)(a1 + 34) = *(_BYTE *)(a2 + 200);
      if (!*(_BYTE *)(a2 + 203))
        sub_10000BA44();
      *(_BYTE *)(a1 + 35) = *(_BYTE *)(a2 + 202);
      if (!*(_BYTE *)(a2 + 120))
        sub_10000BA44();
      *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 118) | 2;
      if (!*(_BYTE *)(a2 + 194))
        sub_10000BA44();
      *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 192);
      if (!*(_BYTE *)(a2 + 198))
        sub_10000BA44();
      *(_WORD *)(a1 + 54) = *(_WORD *)(a2 + 196);
      if (!*(_BYTE *)(a2 + 153))
        sub_10000BA44();
      *(_BYTE *)(a1 + 39) = sub_10036C4CC(*(unsigned __int8 *)(a2 + 152), 1);
      *(_QWORD *)(a1 + 56) = 0;
      if (v4 == 1)
      {
        v45 = qword_10085F520;
        if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
        {
          v46 = *(unsigned __int8 *)(a1 + 22);
          v47 = *(unsigned __int8 *)(a1 + 23);
          v48 = *(unsigned __int8 *)(a1 + 24);
          v49 = *(unsigned __int8 *)(a1 + 25);
          v50 = *(unsigned __int8 *)(a1 + 26);
          v51 = *(unsigned __int8 *)(a1 + 27);
          v52 = *(unsigned __int8 *)(a1 + 28);
          v53 = *(unsigned __int8 *)(a1 + 29);
          v54 = *(unsigned __int8 *)(a1 + 30);
          v55 = *(unsigned __int8 *)(a1 + 31);
          v56 = *(unsigned __int16 *)(a1 + 32);
          v57 = *(unsigned __int8 *)(a1 + 34);
          v58 = *(unsigned __int8 *)(a1 + 35);
          v59 = *(unsigned __int8 *)(a1 + 36);
          v60 = *(__int16 *)(a1 + 37);
          v61 = *(unsigned __int8 *)(a1 + 39);
          v62 = *(unsigned __int16 *)(a1 + 40);
          v63 = *(_QWORD *)(a1 + 42);
          v64 = *(_DWORD *)(a1 + 50);
          v65 = *(unsigned __int16 *)(a1 + 54);
          v66 = *(_QWORD *)(a1 + 56);
          *(_DWORD *)buf = 67114240;
          v68 = v46;
          v69 = 1024;
          v70 = v47;
          v71 = 1024;
          v72 = v48;
          v73 = 1024;
          v74 = v49;
          v75 = 1024;
          v76 = v50;
          v77 = 1024;
          v78 = v51;
          v79 = 1024;
          v80 = v52;
          v81 = 1024;
          v82 = v53;
          v83 = 1024;
          v84 = v54;
          v85 = 1024;
          v86 = v55;
          v87 = 1024;
          v88 = v56;
          v89 = 1024;
          v90 = v57;
          v91 = 1024;
          v92 = v58;
          v93 = 1024;
          v94 = v59;
          v95 = 1024;
          v96 = v60;
          v97 = 1024;
          v98 = v61;
          v99 = 1024;
          v100 = v62;
          v101 = 2048;
          *(_QWORD *)v102 = v63;
          *(_WORD *)&v102[8] = 1024;
          *(_DWORD *)&v102[10] = v64;
          v103 = 1024;
          v104 = v65;
          v105 = 2048;
          v106[0] = v66;
          v42 = "Built P2S packet V1: { \n"
                "ses_role: %d\n"
                ", tx_ant_mask: %d\n"
                ", rx_ant_mask: %d\n"
                ", rx_sync_search_ant_mask: %d\n"
                ", tx_preamble: %d\n"
                ", rx_preamble: %d\n"
                ", tx_pkt_type: %d\n"
                ", rx_pkt_type: %d\n"
                ", tx_mslot_sz_250us: %d\n"
                ", rx_mslot_sz_250us: %d\n"
                ", interval_min_ms: %d\n"
                ", naccess_slots_min: %d\n"
                ", naccess_slots_max: %d\n"
                ", tx_ant_mask2: %d\n"
                ", soi_rssi_thd2: %d\n"
                ", channel: %d\n"
                ", debug_flags: %d\n"
                ", start_time: %llu\n"
                ", start_time_uncertainty: %u\n"
                ", interval_max_ms: %d\n"
                ", peer_addr: 0x%llx\n"
                "}";
          v43 = v45;
          v44 = 136;
          goto LABEL_66;
        }
      }
      else
      {
        v19 = qword_10085F520;
        if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
        {
          v20 = *(unsigned __int8 *)(a1 + 22);
          v21 = *(unsigned __int8 *)(a1 + 23);
          v22 = *(unsigned __int8 *)(a1 + 24);
          v23 = *(unsigned __int8 *)(a1 + 25);
          v24 = *(unsigned __int8 *)(a1 + 26);
          v25 = *(unsigned __int8 *)(a1 + 27);
          v26 = *(unsigned __int8 *)(a1 + 28);
          v27 = *(unsigned __int8 *)(a1 + 29);
          v28 = *(unsigned __int8 *)(a1 + 30);
          v29 = *(unsigned __int8 *)(a1 + 31);
          v30 = *(unsigned __int16 *)(a1 + 32);
          v31 = *(unsigned __int8 *)(a1 + 34);
          v32 = *(unsigned __int8 *)(a1 + 35);
          v33 = *(unsigned __int8 *)(a1 + 36);
          v34 = *(unsigned __int8 *)(a1 + 37);
          v35 = *(unsigned __int8 *)(a1 + 38);
          v36 = *(unsigned __int8 *)(a1 + 39);
          v37 = *(unsigned __int16 *)(a1 + 40);
          v38 = *(_QWORD *)(a1 + 42);
          v39 = *(_DWORD *)(a1 + 50);
          v40 = *(unsigned __int16 *)(a1 + 54);
          v41 = *(_QWORD *)(a1 + 56);
          *(_DWORD *)buf = 67114496;
          v68 = v20;
          v69 = 1024;
          v70 = v21;
          v71 = 1024;
          v72 = v22;
          v73 = 1024;
          v74 = v23;
          v75 = 1024;
          v76 = v24;
          v77 = 1024;
          v78 = v25;
          v79 = 1024;
          v80 = v26;
          v81 = 1024;
          v82 = v27;
          v83 = 1024;
          v84 = v28;
          v85 = 1024;
          v86 = v29;
          v87 = 1024;
          v88 = v30;
          v89 = 1024;
          v90 = v31;
          v91 = 1024;
          v92 = v32;
          v93 = 1024;
          v94 = v33;
          v95 = 1024;
          v96 = v34;
          v97 = 1024;
          v98 = v35;
          v99 = 1024;
          v100 = v36;
          v101 = 1024;
          *(_DWORD *)v102 = v37;
          *(_WORD *)&v102[4] = 2048;
          *(_QWORD *)&v102[6] = v38;
          v103 = 1024;
          v104 = v39;
          v105 = 1024;
          LODWORD(v106[0]) = v40;
          WORD2(v106[0]) = 2048;
          *(_QWORD *)((char *)v106 + 6) = v41;
          v42 = "Built P2S packet V1: { \n"
                "ses_role: %d\n"
                ", tx_ant_mask: %d\n"
                ", rx_ant_mask: %d\n"
                ", rx_sync_search_ant_mask: %d\n"
                ", tx_preamble: %d\n"
                ", rx_preamble: %d\n"
                ", tx_pkt_type: %d\n"
                ", rx_pkt_type: %d\n"
                ", tx_mslot_sz_250us: %d\n"
                ", rx_mslot_sz_250us: %d\n"
                ", interval_min_ms: %d\n"
                ", naccess_slots_min: %d\n"
                ", naccess_slots_max: %d\n"
                ", tx_ant_mask2: %d\n"
                ", rx_ant_mask2: %d\n"
                ", rx_sync_search_ant_mask2: %d\n"
                ", channel: %d\n"
                ", debug_flags: %d\n"
                ", start_time: %llu\n"
                ", start_time_uncertainty: %u\n"
                ", interval_max_ms: %d\n"
                ", peer_addr: 0x%llx\n"
                "}";
          v43 = v19;
          v44 = 142;
LABEL_66:
          _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEFAULT, v42, buf, v44);
        }
      }
      return 1;
    }
    result = os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR);
    if (result)
    {
      sub_1003D120C();
      return 0;
    }
  }
  return result;
}

void sub_1001724B0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL sub_1001724C8(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  uint64_t v37;
  int v38;
  int v39;
  uint64_t v40;
  const char *v41;
  NSObject *v42;
  uint32_t v43;
  _BOOL8 result;
  NSObject *v45;
  uint64_t v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  uint64_t v63;
  int v64;
  int v65;
  uint64_t v66;
  int v67;
  int v68;
  __int16 v69;
  int v70;
  __int16 v71;
  int v72;
  __int16 v73;
  int v74;
  __int16 v75;
  int v76;
  __int16 v77;
  int v78;
  __int16 v79;
  int v80;
  __int16 v81;
  int v82;
  __int16 v83;
  int v84;
  __int16 v85;
  int v86;
  __int16 v87;
  int v88;
  __int16 v89;
  int v90;
  __int16 v91;
  int v92;
  __int16 v93;
  int v94;
  __int16 v95;
  int v96;
  __int16 v97;
  int v98;
  __int16 v99;
  _BYTE v100[10];
  _BYTE v101[10];
  __int16 v102;
  _BYTE v103[10];
  __int16 v104;
  uint64_t v105;

  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
    sub_1003D136C();
  if (!*(_BYTE *)(a2 + 97)
    || !*(_BYTE *)(a2 + 99)
    || !*(_BYTE *)(a2 + 163)
    || !*(_BYTE *)(a2 + 101)
    || !*(_BYTE *)(a2 + 103)
    || !*(_BYTE *)(a2 + 105)
    || !*(_BYTE *)(a2 + 107)
    || !*(_BYTE *)(a2 + 110)
    || !*(_BYTE *)(a2 + 113)
    || !*(_BYTE *)(a2 + 115)
    || !*(_BYTE *)(a2 + 117)
    || !*(_BYTE *)(a2 + 201)
    || !*(_BYTE *)(a2 + 203)
    || !*(_BYTE *)(a2 + 120)
    || !*(_BYTE *)(a2 + 194)
    || !*(_BYTE *)(a2 + 198)
    || !*(_BYTE *)(a2 + 153))
  {
    result = os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_FAULT);
    if (!result)
      return result;
    sub_1003D1140();
    return 0;
  }
  v4 = *(unsigned __int8 *)(a2 + 96);
  if (v4 >= 2)
  {
    v45 = (id)qword_10085F520;
    if (os_log_type_enabled(v45, OS_LOG_TYPE_FAULT))
    {
      if (!*(_BYTE *)(a2 + 97))
        sub_10000BA44();
      sub_1003D1264((unsigned __int8 *)(a2 + 96), (uint64_t)&v67, v45);
    }

    return 0;
  }
  *(_WORD *)(a1 + 16) = 16401;
  if (!*(_BYTE *)(a2 + 97))
    sub_10000BA44();
  *(_BYTE *)(a1 + 22) = *(_BYTE *)(a2 + 96);
  if (!*(_BYTE *)(a2 + 99))
    sub_10000BA44();
  *(_BYTE *)(a1 + 23) = *(_BYTE *)(a2 + 98);
  if (!*(_BYTE *)(a2 + 163))
    sub_10000BA44();
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 162);
  if (!*(_BYTE *)(a2 + 101))
    sub_10000BA44();
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 100);
  if (!*(_BYTE *)(a2 + 103))
    sub_10000BA44();
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 102);
  if (v4)
  {
LABEL_27:
    if (!*(_BYTE *)(a2 + 105))
      sub_10000BA44();
    if (!sub_10036B59C(*(unsigned __int8 *)(a2 + 104)))
      sub_1003D1344();
    if (!*(_BYTE *)(a2 + 107))
      sub_10000BA44();
    if (!sub_10036B59C(*(unsigned __int8 *)(a2 + 106)))
      sub_1003D131C();
    if (!*(_BYTE *)(a2 + 110))
      sub_10000BA44();
    if (!sub_10036C6C0((_BYTE *)(a2 + 108)))
      sub_1003D12F4();
    if (!*(_BYTE *)(a2 + 113))
      sub_10000BA44();
    if (!sub_10036C6C0((_BYTE *)(a2 + 111)))
      sub_1003D12CC();
    if (!*(_BYTE *)(a2 + 105))
      sub_10000BA44();
    *(_BYTE *)(a1 + 26) = sub_10036B654(*(unsigned __int8 *)(a2 + 104), 2, v5, v6, v7, v8, v9, v10);
    if (!*(_BYTE *)(a2 + 107))
      sub_10000BA44();
    *(_BYTE *)(a1 + 27) = sub_10036B654(*(unsigned __int8 *)(a2 + 106), 2, v11, v12, v13, v14, v15, v16);
    if (!*(_BYTE *)(a2 + 110))
      sub_10000BA44();
    *(_WORD *)(a1 + 28) = sub_10036C734((unsigned __int8 *)(a2 + 108));
    if (!*(_BYTE *)(a2 + 113))
      sub_10000BA44();
    *(_WORD *)(a1 + 30) = sub_10036C734((unsigned __int8 *)(a2 + 111));
    if (!*(_BYTE *)(a2 + 115))
      sub_10000BA44();
    *(_BYTE *)(a1 + 42) = *(_BYTE *)(a2 + 114);
    if (!*(_BYTE *)(a2 + 117))
      sub_10000BA44();
    *(_BYTE *)(a1 + 43) = *(_BYTE *)(a2 + 116);
    if (!*(_BYTE *)(a2 + 201))
      sub_10000BA44();
    *(_BYTE *)(a1 + 46) = *(_BYTE *)(a2 + 200);
    if (!*(_BYTE *)(a2 + 203))
      sub_10000BA44();
    *(_BYTE *)(a1 + 47) = *(_BYTE *)(a2 + 202);
    if (!*(_BYTE *)(a2 + 120))
      sub_10000BA44();
    *(_WORD *)(a1 + 63) = *(_WORD *)(a2 + 118) | 2;
    if (!*(_BYTE *)(a2 + 194))
      sub_10000BA44();
    *(_WORD *)(a1 + 44) = *(_WORD *)(a2 + 192);
    if (!*(_BYTE *)(a2 + 198))
      sub_10000BA44();
    *(_WORD *)(a1 + 77) = *(_WORD *)(a2 + 196);
    if (!*(_BYTE *)(a2 + 153))
      sub_10000BA44();
    v17 = *(_BYTE *)(a2 + 152);
    LOBYTE(v67) = 0;
    BYTE1(v67) = v17;
    BYTE2(v67) = 1;
    LOBYTE(v68) = 0;
    BYTE2(v68) = 0;
    *(_WORD *)(a1 + 51) = sub_10036C5B8((unsigned __int8 *)&v67);
    *(_QWORD *)(a1 + 79) = 0;
    if (v4 == 1)
    {
      v46 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
      {
        v47 = *(unsigned __int8 *)(a1 + 22);
        v48 = *(unsigned __int8 *)(a1 + 23);
        v49 = *(unsigned __int8 *)(a1 + 24);
        v50 = *(unsigned __int8 *)(a1 + 25);
        v51 = *(unsigned __int8 *)(a1 + 26);
        v52 = *(unsigned __int8 *)(a1 + 27);
        v53 = *(unsigned __int16 *)(a1 + 28);
        v54 = *(unsigned __int16 *)(a1 + 30);
        v55 = *(unsigned __int8 *)(a1 + 42);
        v56 = *(unsigned __int8 *)(a1 + 43);
        v57 = *(unsigned __int16 *)(a1 + 44);
        v58 = *(unsigned __int8 *)(a1 + 46);
        v59 = *(unsigned __int8 *)(a1 + 47);
        v60 = *(unsigned __int8 *)(a1 + 48);
        v61 = *(unsigned __int16 *)(a1 + 51);
        v62 = *(unsigned __int16 *)(a1 + 63);
        v63 = *(_QWORD *)(a1 + 65);
        v64 = *(_DWORD *)(a1 + 73);
        v65 = *(unsigned __int16 *)(a1 + 77);
        v66 = *(_QWORD *)(a1 + 79);
        v67 = 67113984;
        v68 = v47;
        v69 = 1024;
        v70 = v48;
        v71 = 1024;
        v72 = v49;
        v73 = 1024;
        v74 = v50;
        v75 = 1024;
        v76 = v51;
        v77 = 1024;
        v78 = v52;
        v79 = 1024;
        v80 = v53;
        v81 = 1024;
        v82 = v54;
        v83 = 1024;
        v84 = v55;
        v85 = 1024;
        v86 = v56;
        v87 = 1024;
        v88 = v57;
        v89 = 1024;
        v90 = v58;
        v91 = 1024;
        v92 = v59;
        v93 = 1024;
        v94 = v60;
        v95 = 1024;
        v96 = v61;
        v97 = 1024;
        v98 = v62;
        v99 = 2048;
        *(_QWORD *)v100 = v63;
        *(_WORD *)&v100[8] = 1024;
        *(_DWORD *)v101 = v64;
        *(_WORD *)&v101[4] = 1024;
        *(_DWORD *)&v101[6] = v65;
        v102 = 2048;
        *(_QWORD *)v103 = v66;
        v41 = "Built P2S packet V2: { \n"
              "ses_role: %d\n"
              ", tx_ant_mask: %d\n"
              ", rx_ant_mask: %d\n"
              ", rx_sync_search_ant_mask: %d\n"
              ", tx_preamble: %d\n"
              ", rx_preamble: %d\n"
              ", tx_pkt_type: 0x%04x\n"
              ", rx_pkt_type: 0x%04x\n"
              ", tx_mslot_sz_250us: %d\n"
              ", rx_mslot_sz_250us: %d\n"
              ", interval_min_ms: %d\n"
              ", naccess_slots_min: %d\n"
              ", naccess_slots_max: %d\n"
              ", tx_ant_mask2: %d\n"
              ", bch: %d\n"
              ", debug_flags: %d\n"
              ", start_time: %llu\n"
              ", start_time_uncertainty: %u\n"
              ", interval_max_ms: %d\n"
              ", peer_addr: 0x%llx\n"
              "}";
        v42 = v46;
        v43 = 130;
        goto LABEL_64;
      }
    }
    else
    {
      v18 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
      {
        v19 = *(unsigned __int8 *)(a1 + 22);
        v20 = *(unsigned __int8 *)(a1 + 23);
        v21 = *(unsigned __int8 *)(a1 + 24);
        v22 = *(unsigned __int8 *)(a1 + 25);
        v23 = *(unsigned __int8 *)(a1 + 26);
        v24 = *(unsigned __int8 *)(a1 + 27);
        v25 = *(unsigned __int16 *)(a1 + 28);
        v26 = *(unsigned __int16 *)(a1 + 30);
        v27 = *(unsigned __int8 *)(a1 + 42);
        v28 = *(unsigned __int8 *)(a1 + 43);
        v29 = *(unsigned __int16 *)(a1 + 44);
        v30 = *(unsigned __int8 *)(a1 + 46);
        v31 = *(unsigned __int8 *)(a1 + 47);
        v32 = *(unsigned __int8 *)(a1 + 48);
        v33 = *(unsigned __int8 *)(a1 + 49);
        v34 = *(unsigned __int8 *)(a1 + 50);
        v35 = *(unsigned __int16 *)(a1 + 51);
        v36 = *(unsigned __int16 *)(a1 + 63);
        v37 = *(_QWORD *)(a1 + 65);
        v38 = *(_DWORD *)(a1 + 73);
        v39 = *(unsigned __int16 *)(a1 + 77);
        v40 = *(_QWORD *)(a1 + 79);
        v67 = 67114496;
        v68 = v19;
        v69 = 1024;
        v70 = v20;
        v71 = 1024;
        v72 = v21;
        v73 = 1024;
        v74 = v22;
        v75 = 1024;
        v76 = v23;
        v77 = 1024;
        v78 = v24;
        v79 = 1024;
        v80 = v25;
        v81 = 1024;
        v82 = v26;
        v83 = 1024;
        v84 = v27;
        v85 = 1024;
        v86 = v28;
        v87 = 1024;
        v88 = v29;
        v89 = 1024;
        v90 = v30;
        v91 = 1024;
        v92 = v31;
        v93 = 1024;
        v94 = v32;
        v95 = 1024;
        v96 = v33;
        v97 = 1024;
        v98 = v34;
        v99 = 1024;
        *(_DWORD *)v100 = v35;
        *(_WORD *)&v100[4] = 1024;
        *(_DWORD *)&v100[6] = v36;
        *(_WORD *)v101 = 2048;
        *(_QWORD *)&v101[2] = v37;
        v102 = 1024;
        *(_DWORD *)v103 = v38;
        *(_WORD *)&v103[4] = 1024;
        *(_DWORD *)&v103[6] = v39;
        v104 = 2048;
        v105 = v40;
        v41 = "Built P2S packet V2: { \n"
              "ses_role: %d\n"
              ", tx_ant_mask: %d\n"
              ", rx_ant_mask: %d\n"
              ", rx_sync_search_ant_mask: %d\n"
              ", tx_preamble: %d\n"
              ", rx_preamble: %d\n"
              ", tx_pkt_type: 0x%04x\n"
              ", rx_pkt_type: 0x%04x\n"
              ", tx_mslot_sz_250us: %d\n"
              ", rx_mslot_sz_250us: %d\n"
              ", interval_min_ms: %d\n"
              ", naccess_slots_min: %d\n"
              ", naccess_slots_max: %d\n"
              ", tx_ant_mask2: %d\n"
              ", rx_ant_mask2: %d\n"
              ", rx_sync_search_ant_mask2: %d\n"
              ", bch: %hu\n"
              ", debug_flags: %d\n"
              ", start_time: %llu\n"
              ", start_time_uncertainty: %u\n"
              ", interval_max_ms: %d\n"
              ", peer_addr: 0x%llx\n"
              "}";
        v42 = v18;
        v43 = 142;
LABEL_64:
        _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEFAULT, v41, (uint8_t *)&v67, v43);
      }
    }
    return 1;
  }
  if (*(_BYTE *)(a2 + 165) && *(_BYTE *)(a2 + 167))
  {
    *(_BYTE *)(a1 + 49) = *(_BYTE *)(a2 + 164);
    if (!*(_BYTE *)(a2 + 167))
      sub_10000BA44();
    *(_BYTE *)(a1 + 50) = *(_BYTE *)(a2 + 166);
    goto LABEL_27;
  }
  result = os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR);
  if (result)
  {
    sub_1003D120C();
    return 0;
  }
  return result;
}

void sub_100172BB4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_100172BCC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  _DWORD v37[2];
  __int16 v38;
  int v39;
  __int16 v40;
  int v41;
  __int16 v42;
  int v43;
  __int16 v44;
  int v45;
  __int16 v46;
  int v47;
  __int16 v48;
  int v49;
  __int16 v50;
  int v51;
  __int16 v52;
  int v53;
  __int16 v54;
  int v55;
  __int16 v56;
  int v57;
  __int16 v58;
  int v59;
  __int16 v60;
  int v61;
  __int16 v62;
  int v63;
  __int16 v64;
  int v65;
  __int16 v66;
  int v67;
  __int16 v68;
  int v69;
  __int16 v70;
  int v71;

  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
    sub_1003D1464();
  if (*(_BYTE *)(a2 + 97)
    && *(_BYTE *)(a2 + 99)
    && *(_BYTE *)(a2 + 163)
    && *(_BYTE *)(a2 + 101)
    && *(_BYTE *)(a2 + 165)
    && *(_BYTE *)(a2 + 103)
    && *(_BYTE *)(a2 + 167)
    && *(_BYTE *)(a2 + 105)
    && *(_BYTE *)(a2 + 107)
    && *(_BYTE *)(a2 + 110)
    && *(_BYTE *)(a2 + 113)
    && *(_BYTE *)(a2 + 115)
    && *(_BYTE *)(a2 + 117)
    && *(_BYTE *)(a2 + 161)
    && *(_BYTE *)(a2 + 120)
    && *(_BYTE *)(a2 + 170)
    && *(_BYTE *)(a2 + 174)
    && *(_BYTE *)(a2 + 153))
  {
    *(_WORD *)(a1 + 16) = 16400;
    if (!*(_BYTE *)(a2 + 97))
      goto LABEL_57;
    *(_BYTE *)(a1 + 22) = *(_BYTE *)(a2 + 96);
    if (!*(_BYTE *)(a2 + 99))
      goto LABEL_57;
    *(_BYTE *)(a1 + 23) = *(_BYTE *)(a2 + 98);
    if (!*(_BYTE *)(a2 + 163))
      goto LABEL_57;
    *(_BYTE *)(a1 + 35) = *(_BYTE *)(a2 + 162);
    if (!*(_BYTE *)(a2 + 101))
      goto LABEL_57;
    *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 100);
    if (!*(_BYTE *)(a2 + 165))
      goto LABEL_57;
    *(_BYTE *)(a1 + 36) = *(_BYTE *)(a2 + 164);
    if (!*(_BYTE *)(a2 + 103))
      goto LABEL_57;
    *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 102);
    if (!*(_BYTE *)(a2 + 167))
      goto LABEL_57;
    *(_BYTE *)(a1 + 37) = *(_BYTE *)(a2 + 166);
    if (!*(_BYTE *)(a2 + 105))
      goto LABEL_57;
    if (!sub_10036B59C(*(unsigned __int8 *)(a2 + 104)))
      sub_1003D143C();
    if (!*(_BYTE *)(a2 + 107))
      goto LABEL_57;
    if (!sub_10036B59C(*(unsigned __int8 *)(a2 + 106)))
      sub_1003D1414();
    if (!*(_BYTE *)(a2 + 110))
      goto LABEL_57;
    if (!sub_10036C6C0((_BYTE *)(a2 + 108)))
      sub_1003D13EC();
    if (!*(_BYTE *)(a2 + 113))
      goto LABEL_57;
    if (!sub_10036C6C0((_BYTE *)(a2 + 111)))
      sub_1003D13C4();
    if (!*(_BYTE *)(a2 + 105))
      goto LABEL_57;
    *(_BYTE *)(a1 + 26) = sub_10036B654(*(unsigned __int8 *)(a2 + 104), 1, v4, v5, v6, v7, v8, v9);
    if (!*(_BYTE *)(a2 + 107))
      goto LABEL_57;
    *(_BYTE *)(a1 + 27) = sub_10036B654(*(unsigned __int8 *)(a2 + 106), 1, v10, v11, v12, v13, v14, v15);
    if (!*(_BYTE *)(a2 + 110))
      goto LABEL_57;
    *(_BYTE *)(a1 + 28) = *(_BYTE *)(a2 + 109);
    if (!*(_BYTE *)(a2 + 113)
      || (*(_BYTE *)(a1 + 29) = *(_BYTE *)(a2 + 112), !*(_BYTE *)(a2 + 115))
      || (*(_BYTE *)(a1 + 30) = *(_BYTE *)(a2 + 114), !*(_BYTE *)(a2 + 117))
      || (*(_BYTE *)(a1 + 31) = *(_BYTE *)(a2 + 116), !*(_BYTE *)(a2 + 161))
      || (*(_BYTE *)(a1 + 34) = *(_BYTE *)(a2 + 160), !*(_BYTE *)(a2 + 120))
      || (*(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 118) | 2, !*(_BYTE *)(a2 + 170))
      || (*(_WORD *)(a1 + 38) = *(_WORD *)(a2 + 168), !*(_BYTE *)(a2 + 174))
      || (*(_WORD *)(a1 + 54) = *(_WORD *)(a2 + 172), !*(_BYTE *)(a2 + 153)))
    {
LABEL_57:
      sub_10000BA44();
    }
    v16 = 1;
    *(_BYTE *)(a1 + 32) = sub_10036C4CC(*(unsigned __int8 *)(a2 + 152), 1);
    *(_QWORD *)(a1 + 56) = 0;
    v17 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
    {
      v18 = *(unsigned __int8 *)(a1 + 22);
      v19 = *(unsigned __int8 *)(a1 + 23);
      v20 = *(unsigned __int8 *)(a1 + 24);
      v21 = *(unsigned __int8 *)(a1 + 25);
      v22 = *(unsigned __int8 *)(a1 + 26);
      v23 = *(unsigned __int8 *)(a1 + 27);
      v24 = *(unsigned __int8 *)(a1 + 28);
      v25 = *(unsigned __int8 *)(a1 + 29);
      v26 = *(unsigned __int8 *)(a1 + 30);
      v27 = *(unsigned __int8 *)(a1 + 31);
      v28 = *(unsigned __int8 *)(a1 + 34);
      v29 = *(unsigned __int8 *)(a1 + 35);
      v30 = *(unsigned __int8 *)(a1 + 36);
      v31 = *(unsigned __int8 *)(a1 + 37);
      v32 = *(__int16 *)(a1 + 38);
      v33 = *(unsigned __int16 *)(a1 + 40);
      v34 = *(unsigned __int16 *)(a1 + 54);
      v35 = *(unsigned __int8 *)(a1 + 32);
      v37[0] = 67113472;
      v37[1] = v18;
      v38 = 1024;
      v39 = v19;
      v40 = 1024;
      v41 = v20;
      v42 = 1024;
      v43 = v21;
      v44 = 1024;
      v45 = v22;
      v46 = 1024;
      v47 = v23;
      v48 = 1024;
      v49 = v24;
      v50 = 1024;
      v51 = v25;
      v52 = 1024;
      v53 = v26;
      v54 = 1024;
      v55 = v27;
      v56 = 1024;
      v57 = v28;
      v58 = 1024;
      v59 = v29;
      v60 = 1024;
      v61 = v30;
      v62 = 1024;
      v63 = v31;
      v64 = 1024;
      v65 = v32;
      v66 = 1024;
      v67 = v33;
      v68 = 1024;
      v69 = v34;
      v70 = 1024;
      v71 = v35;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Built P2P packet V1: { \nses_role: %d\n tx_ant_mask: %d\n rx_ant_mask: %d\n rx_sync_search_ant_mask: %d\n tx_preamble: %d\n rx_preamble: %d\n tx_pkt_type: %d\n rx_pkt_type: %d\n tx_mslot_sz_250us: %d\n rx_mslot_sz_250us: %d\n dual_ranging_enable: %d\n tx_ant_mask2: %d\n rx_ant_mask2: %d\n rx_sync_search_ant_mask2: %d\n soi_rssi_thd2: %d\n"
        " debug_flags: %d\n"
        " interval_ms: %d\n"
        " channel:%d\n"
        "}",
        (uint8_t *)v37,
        0x6Eu);
    }
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_FAULT))
      sub_1003D1398();
    return 0;
  }
  return v16;
}

BOOL sub_100172FD8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  NSObject *v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  _BOOL8 result;
  _DWORD v37[2];
  __int16 v38;
  int v39;
  __int16 v40;
  int v41;
  __int16 v42;
  int v43;
  __int16 v44;
  int v45;
  __int16 v46;
  int v47;
  __int16 v48;
  int v49;
  __int16 v50;
  int v51;
  __int16 v52;
  int v53;
  __int16 v54;
  int v55;
  __int16 v56;
  int v57;
  __int16 v58;
  int v59;
  __int16 v60;
  int v61;
  __int16 v62;
  int v63;
  __int16 v64;
  int v65;
  __int16 v66;
  int v67;
  __int16 v68;
  int v69;
  __int16 v70;
  int v71;

  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
    sub_1003D14BC();
  if (*(_BYTE *)(a2 + 97)
    && *(_BYTE *)(a2 + 99)
    && *(_BYTE *)(a2 + 163)
    && *(_BYTE *)(a2 + 101)
    && *(_BYTE *)(a2 + 165)
    && *(_BYTE *)(a2 + 103)
    && *(_BYTE *)(a2 + 167)
    && *(_BYTE *)(a2 + 105)
    && *(_BYTE *)(a2 + 107)
    && *(_BYTE *)(a2 + 110)
    && *(_BYTE *)(a2 + 113)
    && *(_BYTE *)(a2 + 115)
    && *(_BYTE *)(a2 + 117)
    && *(_BYTE *)(a2 + 161)
    && *(_BYTE *)(a2 + 120)
    && *(_BYTE *)(a2 + 170)
    && *(_BYTE *)(a2 + 174)
    && *(_BYTE *)(a2 + 153))
  {
    *(_WORD *)(a1 + 16) = 16400;
    if (!*(_BYTE *)(a2 + 97))
      goto LABEL_48;
    *(_BYTE *)(a1 + 22) = *(_BYTE *)(a2 + 96);
    if (!*(_BYTE *)(a2 + 99))
      goto LABEL_48;
    *(_BYTE *)(a1 + 23) = *(_BYTE *)(a2 + 98);
    if (!*(_BYTE *)(a2 + 163))
      goto LABEL_48;
    *(_BYTE *)(a1 + 49) = *(_BYTE *)(a2 + 162);
    if (!*(_BYTE *)(a2 + 101))
      goto LABEL_48;
    *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 100);
    if (!*(_BYTE *)(a2 + 165))
      goto LABEL_48;
    *(_BYTE *)(a1 + 50) = *(_BYTE *)(a2 + 164);
    if (!*(_BYTE *)(a2 + 103))
      goto LABEL_48;
    *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 102);
    if (!*(_BYTE *)(a2 + 167))
      goto LABEL_48;
    *(_BYTE *)(a1 + 51) = *(_BYTE *)(a2 + 166);
    if (!*(_BYTE *)(a2 + 105))
      goto LABEL_48;
    *(_BYTE *)(a1 + 26) = sub_10036B654(*(unsigned __int8 *)(a2 + 104), 2, v4, v5, v6, v7, v8, v9);
    if (!*(_BYTE *)(a2 + 107))
      goto LABEL_48;
    *(_BYTE *)(a1 + 27) = sub_10036B654(*(unsigned __int8 *)(a2 + 106), 2, v10, v11, v12, v13, v14, v15);
    if (!*(_BYTE *)(a2 + 110))
      goto LABEL_48;
    *(_WORD *)(a1 + 28) = sub_10036C734((unsigned __int8 *)(a2 + 108));
    if (!*(_BYTE *)(a2 + 113)
      || (*(_WORD *)(a1 + 30) = sub_10036C734((unsigned __int8 *)(a2 + 111)), !*(_BYTE *)(a2 + 115))
      || (*(_BYTE *)(a1 + 44) = *(_BYTE *)(a2 + 114), !*(_BYTE *)(a2 + 117))
      || (*(_BYTE *)(a1 + 45) = *(_BYTE *)(a2 + 116), !*(_BYTE *)(a2 + 161))
      || (*(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 160), !*(_BYTE *)(a2 + 120))
      || (*(_WORD *)(a1 + 70) = *(_WORD *)(a2 + 118) | 2, !*(_BYTE *)(a2 + 170))
      || (*(_WORD *)(a1 + 52) = *(_WORD *)(a2 + 168), !*(_BYTE *)(a2 + 174))
      || (*(_WORD *)(a1 + 84) = *(_WORD *)(a2 + 172), !*(_BYTE *)(a2 + 153)))
    {
LABEL_48:
      sub_10000BA44();
    }
    v16 = *(unsigned __int8 *)(a2 + 152);
    if (v16 == 5 || v16 == 9)
      *(_WORD *)(a1 + 46) = v16;
    *(_QWORD *)(a1 + 86) = 0;
    v17 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
    {
      v18 = *(unsigned __int8 *)(a1 + 22);
      v19 = *(unsigned __int8 *)(a1 + 23);
      v20 = *(unsigned __int8 *)(a1 + 24);
      v21 = *(unsigned __int8 *)(a1 + 25);
      v22 = *(unsigned __int8 *)(a1 + 26);
      v23 = *(unsigned __int8 *)(a1 + 27);
      v24 = *(unsigned __int16 *)(a1 + 28);
      v25 = *(unsigned __int16 *)(a1 + 30);
      v26 = *(unsigned __int8 *)(a1 + 44);
      v27 = *(unsigned __int8 *)(a1 + 45);
      v28 = *(unsigned __int8 *)(a1 + 48);
      v29 = *(unsigned __int8 *)(a1 + 49);
      v30 = *(unsigned __int8 *)(a1 + 50);
      v31 = *(unsigned __int8 *)(a1 + 51);
      v32 = *(__int16 *)(a1 + 52);
      v33 = *(unsigned __int16 *)(a1 + 70);
      v34 = *(unsigned __int16 *)(a1 + 84);
      v35 = *(unsigned __int16 *)(a1 + 46);
      v37[0] = 67113472;
      v37[1] = v18;
      v38 = 1024;
      v39 = v19;
      v40 = 1024;
      v41 = v20;
      v42 = 1024;
      v43 = v21;
      v44 = 1024;
      v45 = v22;
      v46 = 1024;
      v47 = v23;
      v48 = 1024;
      v49 = v24;
      v50 = 1024;
      v51 = v25;
      v52 = 1024;
      v53 = v26;
      v54 = 1024;
      v55 = v27;
      v56 = 1024;
      v57 = v28;
      v58 = 1024;
      v59 = v29;
      v60 = 1024;
      v61 = v30;
      v62 = 1024;
      v63 = v31;
      v64 = 1024;
      v65 = v32;
      v66 = 1024;
      v67 = v33;
      v68 = 1024;
      v69 = v34;
      v70 = 1024;
      v71 = v35;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Built P2P packet V2: { \nses_role: %d\n tx_ant_mask: %d\n rx_ant_mask: %d\n rx_sync_search_ant_mask: %d\n first_preamble: %d\n subsequent_preamble: %d\n tx_pkt_type: %d\n rx_pkt_type: %d\n tx_mslot_sz_250us: %d\n rx_mslot_sz_250us: %d\n dual_ranging_enable: %d\n tx_ant_mask2: %d\n rx_ant_mask2: %d\n rx_sync_search_ant_mask2: %d\n ping_pong_soi_rssi_thd: %d\n"
        " debug_flags: %d\n"
        " interval_ms: %d\n"
        " band_channel:%hu\n"
        "}",
        (uint8_t *)v37,
        0x6Eu);
    }
    return 1;
  }
  else
  {
    result = os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_FAULT);
    if (result)
    {
      sub_1003D1490();
      return 0;
    }
  }
  return result;
}

BOOL sub_100173390(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  char v13;
  NSObject *v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  _DWORD v37[2];
  __int16 v38;
  int v39;
  __int16 v40;
  int v41;
  __int16 v42;
  int v43;
  __int16 v44;
  int v45;
  __int16 v46;
  int v47;
  __int16 v48;
  int v49;
  __int16 v50;
  int v51;
  __int16 v52;
  int v53;
  __int16 v54;
  int v55;
  __int16 v56;
  int v57;
  __int16 v58;
  int v59;
  __int16 v60;
  int v61;
  __int16 v62;
  int v63;
  __int16 v64;
  int v65;
  __int16 v66;
  int v67;
  __int16 v68;
  int v69;
  __int16 v70;
  int v71;
  __int16 v72;
  int v73;
  __int16 v74;
  int v75;
  __int16 v76;
  int v77;
  __int16 v78;
  int v79;

  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
    sub_1003D1568();
  if (*(_BYTE *)(a2 + 97)
    && *(_BYTE *)(a2 + 99)
    && *(_BYTE *)(a2 + 101)
    && *(_BYTE *)(a2 + 103)
    && *(_BYTE *)(a2 + 153)
    && *(_BYTE *)(a2 + 120)
    && *(_BYTE *)(a2 + 293)
    && *(_BYTE *)(a2 + 295)
    && *(_BYTE *)(a2 + 300)
    && *(_BYTE *)(a2 + 305)
    && *(_BYTE *)(a2 + 307)
    && *(_BYTE *)(a2 + 310)
    && *(_BYTE *)(a2 + 314)
    && *(_BYTE *)(a2 + 317)
    && *(_BYTE *)(a2 + 319)
    && *(_BYTE *)(a2 + 321)
    && *(_BYTE *)(a2 + 323)
    && *(_BYTE *)(a2 + 343)
    && *(_BYTE *)(a2 + 345))
  {
    if ((~*(unsigned __int16 *)(a2 + 118) & 0xC0) != 0 || *(_BYTE *)(a2 + 347))
    {
      *(_WORD *)(a1 + 16) = 16464;
      if (!*(_BYTE *)(a2 + 97))
        goto LABEL_75;
      *(_BYTE *)(a1 + 22) = *(_BYTE *)(a2 + 96);
      if (!*(_BYTE *)(a2 + 99))
        goto LABEL_75;
      *(_BYTE *)(a1 + 23) = *(_BYTE *)(a2 + 98);
      if (!*(_BYTE *)(a2 + 101))
        goto LABEL_75;
      *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 100);
      if (!*(_BYTE *)(a2 + 103))
        goto LABEL_75;
      *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 102);
      if (!*(_BYTE *)(a2 + 153))
        goto LABEL_75;
      *(_BYTE *)(a1 + 26) = sub_10036C4CC(*(unsigned __int8 *)(a2 + 152), 1);
      if (!*(_BYTE *)(a2 + 295))
        goto LABEL_75;
      if (!sub_10036B59C(*(unsigned __int8 *)(a2 + 294)))
        sub_1003D1514();
      if (!*(_BYTE *)(a2 + 295))
        goto LABEL_75;
      *(_BYTE *)(a1 + 27) = sub_10036B654(*(unsigned __int8 *)(a2 + 294), 1, v5, v6, v7, v8, v9, v10);
      if (!*(_BYTE *)(a2 + 300))
        goto LABEL_75;
      *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 296);
      v11 = *(_BYTE *)(a2 + 305) ? *(_BYTE *)(a2 + 304) : 0;
      *(_BYTE *)(a1 + 32) = v11;
      v12 = *(_BYTE *)(a2 + 307) ? *(_BYTE *)(a2 + 306) : 0;
      *(_BYTE *)(a1 + 33) = v12;
      if (!*(_BYTE *)(a2 + 310))
        goto LABEL_75;
      *(_WORD *)(a1 + 34) = *(_WORD *)(a2 + 308);
      if (!*(_BYTE *)(a2 + 314))
        goto LABEL_75;
      *(_WORD *)(a1 + 36) = *(_WORD *)(a2 + 312);
      if (!*(_BYTE *)(a2 + 317))
        goto LABEL_75;
      *(_BYTE *)(a1 + 38) = *(_BYTE *)(a2 + 316);
      if (!*(_BYTE *)(a2 + 319))
        goto LABEL_75;
      *(_BYTE *)(a1 + 39) = *(_BYTE *)(a2 + 318);
      if (!*(_BYTE *)(a2 + 321))
        goto LABEL_75;
      *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 320);
      if (!*(_BYTE *)(a2 + 323))
        goto LABEL_75;
      *(_BYTE *)(a1 + 41) = *(_BYTE *)(a2 + 322);
      if (!*(_BYTE *)(a2 + 343))
        goto LABEL_75;
      *(_BYTE *)(a1 + 51) = *(_BYTE *)(a2 + 342);
      if (!*(_BYTE *)(a2 + 345))
        goto LABEL_75;
      *(_BYTE *)(a1 + 52) = *(_BYTE *)(a2 + 344);
      if (*(_BYTE *)(a2 + 347))
        v13 = *(_BYTE *)(a2 + 346) & 0xF;
      else
        v13 = 0;
      *(_BYTE *)(a1 + 53) = *(_BYTE *)(a1 + 53) & 0xF0 | v13;
      if (*(_BYTE *)(a2 + 341))
        *(_BYTE *)(a1 + 50) = *(_BYTE *)(a2 + 340);
      if (*(_BYTE *)(a2 + 328))
        *(_DWORD *)(a1 + 42) = *(_DWORD *)(a2 + 324);
      if (*(_BYTE *)(a2 + 336))
        *(_DWORD *)(a1 + 46) = *(_DWORD *)(a2 + 332);
      if (!*(_BYTE *)(a2 + 120))
LABEL_75:
        sub_10000BA44();
      *(_WORD *)(a1 + 54) = *(_WORD *)(a2 + 118);
      v14 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
      {
        v15 = *(unsigned __int8 *)(a1 + 22);
        v16 = *(unsigned __int8 *)(a1 + 23);
        v17 = *(unsigned __int8 *)(a1 + 24);
        v18 = *(unsigned __int8 *)(a1 + 25);
        v19 = *(unsigned __int16 *)(a1 + 54);
        v20 = *(unsigned __int8 *)(a1 + 26);
        v21 = *(unsigned __int8 *)(a1 + 27);
        v22 = *(_DWORD *)(a1 + 28);
        v23 = 10 * *(unsigned __int8 *)(a1 + 32);
        v24 = 10 * *(unsigned __int8 *)(a1 + 33);
        v25 = *(unsigned __int16 *)(a1 + 34);
        v26 = *(unsigned __int16 *)(a1 + 36);
        v27 = *(unsigned __int8 *)(a1 + 38);
        v28 = *(unsigned __int8 *)(a1 + 39);
        v29 = *(unsigned __int8 *)(a1 + 40);
        v30 = *(unsigned __int8 *)(a1 + 41);
        v31 = *(unsigned __int8 *)(a1 + 51);
        v32 = *(unsigned __int8 *)(a1 + 52);
        v33 = *(_BYTE *)(a1 + 53) & 0xF;
        if (*(_BYTE *)(a2 + 341))
          v34 = *(unsigned __int8 *)(a1 + 50);
        else
          v34 = -1;
        if (*(_BYTE *)(a2 + 336))
          v35 = *(_DWORD *)(a1 + 46);
        else
          v35 = -1;
        v36 = *(_DWORD *)(a1 + 42);
        if (!*(_BYTE *)(a2 + 328))
          v36 = -1;
        v37[0] = 67114496;
        v37[1] = v15;
        v38 = 1024;
        v39 = v16;
        v40 = 1024;
        v41 = v17;
        v42 = 1024;
        v43 = v18;
        v44 = 1024;
        v45 = v19;
        v46 = 1024;
        v47 = v20;
        v48 = 1024;
        v49 = v21;
        v50 = 1024;
        v51 = v22;
        v52 = 1024;
        v53 = v23;
        v54 = 1024;
        v55 = v24;
        v56 = 1024;
        v57 = v25;
        v58 = 1024;
        v59 = v26;
        v60 = 1024;
        v61 = v27;
        v62 = 1024;
        v63 = v28;
        v64 = 1024;
        v65 = v29;
        v66 = 1024;
        v67 = v30;
        v68 = 1024;
        v69 = v31;
        v70 = 1024;
        v71 = v32;
        v72 = 1024;
        v73 = v33;
        v74 = 1024;
        v75 = v34;
        v76 = 1024;
        v77 = v35;
        v78 = 1024;
        v79 = v36;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Built Alisha packet V1: {\n  ses_role: %u\n, tx_ant_mask: %u\n, rx_ant_mask: %u\n, rx_sync_search_ant_mask: %u\n, debug_flags: 0x%x\n, channel: %u\n, preamble: %u\n, uwb_ses_id: %u\n, rsp_timeout_10s: %u (s)\n, total_timeout_10s: %u (s)\n, sel_protocol_version: %u\n, sel_uwb_cfg_id: %u\n, ran_multiplier: %u\n, nchaps_per_slot: %u\n, nslots_per_round: %u\n"
          ", nresponders: %u\n"
          ", sel_hop_cfg_bitmask: %u\n"
          ", sel_pulse_shape_combo: %u\n"
          ", space_between_ranging_rounds: %u\n"
          ", anchor_only_responder_idx: %d\n"
          ", anchor_only_responder_hop_key: %d\n"
          ", anchor_only_responder_sts_index_0: %d\n"
          "}",
          (uint8_t *)v37,
          0x86u);
      }
      return 1;
    }
    else
    {
      result = os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR);
      if (result)
      {
        sub_1003D153C();
        return 0;
      }
    }
  }
  else
  {
    result = os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR);
    if (result)
    {
      sub_1003D14E8();
      return 0;
    }
  }
  return result;
}

BOOL sub_100173854(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  char v14;
  NSObject *v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  __int16 v40;
  int v41;
  __int16 v42;
  int v43;
  __int16 v44;
  int v45;
  __int16 v46;
  int v47;
  __int16 v48;
  int v49;
  __int16 v50;
  int v51;
  __int16 v52;
  int v53;
  __int16 v54;
  int v55;
  __int16 v56;
  int v57;
  __int16 v58;
  int v59;
  __int16 v60;
  int v61;
  __int16 v62;
  int v63;
  __int16 v64;
  int v65;
  __int16 v66;
  int v67;
  __int16 v68;
  int v69;
  __int16 v70;
  int v71;
  __int16 v72;
  int v73;
  __int16 v74;
  int v75;
  __int16 v76;
  int v77;
  __int16 v78;
  int v79;
  __int16 v80;
  int v81;

  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
    sub_1003D1568();
  if (*(_BYTE *)(a2 + 97)
    && *(_BYTE *)(a2 + 99)
    && *(_BYTE *)(a2 + 101)
    && *(_BYTE *)(a2 + 103)
    && *(_BYTE *)(a2 + 153)
    && *(_BYTE *)(a2 + 120)
    && *(_BYTE *)(a2 + 293)
    && *(_BYTE *)(a2 + 295)
    && *(_BYTE *)(a2 + 300)
    && *(_BYTE *)(a2 + 305)
    && *(_BYTE *)(a2 + 307)
    && *(_BYTE *)(a2 + 310)
    && *(_BYTE *)(a2 + 314)
    && *(_BYTE *)(a2 + 317)
    && *(_BYTE *)(a2 + 319)
    && *(_BYTE *)(a2 + 321)
    && *(_BYTE *)(a2 + 323)
    && *(_BYTE *)(a2 + 343)
    && *(_BYTE *)(a2 + 345))
  {
    if ((~*(unsigned __int16 *)(a2 + 118) & 0xC0) != 0 || *(_BYTE *)(a2 + 347))
    {
      *(_WORD *)(a1 + 16) = 16464;
      if (!*(_BYTE *)(a2 + 97))
        goto LABEL_75;
      *(_BYTE *)(a1 + 22) = *(_BYTE *)(a2 + 96);
      if (!*(_BYTE *)(a2 + 99))
        goto LABEL_75;
      *(_BYTE *)(a1 + 23) = *(_BYTE *)(a2 + 98);
      if (!*(_BYTE *)(a2 + 101))
        goto LABEL_75;
      *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 100);
      if (!*(_BYTE *)(a2 + 103))
        goto LABEL_75;
      *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 102);
      if (!*(_BYTE *)(a2 + 153))
        goto LABEL_75;
      v5 = *(_BYTE *)(a2 + 152);
      LOBYTE(v38) = 0;
      BYTE1(v38) = v5;
      BYTE2(v38) = 1;
      LOBYTE(v39) = 0;
      BYTE2(v39) = 0;
      *(_WORD *)(a1 + 26) = sub_10036C5B8((unsigned __int8 *)&v38);
      if (!*(_BYTE *)(a2 + 295))
        goto LABEL_75;
      if (!sub_10036B59C(*(unsigned __int8 *)(a2 + 294)))
        sub_1003D1594();
      if (!*(_BYTE *)(a2 + 295))
        goto LABEL_75;
      *(_BYTE *)(a1 + 28) = sub_10036B654(*(unsigned __int8 *)(a2 + 294), 2, v6, v7, v8, v9, v10, v11);
      if (!*(_BYTE *)(a2 + 300))
        goto LABEL_75;
      *(_DWORD *)(a1 + 29) = *(_DWORD *)(a2 + 296);
      v12 = *(_BYTE *)(a2 + 305) ? *(_BYTE *)(a2 + 304) : 0;
      *(_BYTE *)(a1 + 33) = v12;
      v13 = *(_BYTE *)(a2 + 307) ? *(_BYTE *)(a2 + 306) : 0;
      *(_BYTE *)(a1 + 34) = v13;
      if (!*(_BYTE *)(a2 + 310))
        goto LABEL_75;
      *(_WORD *)(a1 + 35) = *(_WORD *)(a2 + 308);
      if (!*(_BYTE *)(a2 + 314))
        goto LABEL_75;
      *(_WORD *)(a1 + 37) = *(_WORD *)(a2 + 312);
      if (!*(_BYTE *)(a2 + 317))
        goto LABEL_75;
      *(_BYTE *)(a1 + 39) = *(_BYTE *)(a2 + 316);
      if (!*(_BYTE *)(a2 + 319))
        goto LABEL_75;
      *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 318);
      if (!*(_BYTE *)(a2 + 321))
        goto LABEL_75;
      *(_BYTE *)(a1 + 41) = *(_BYTE *)(a2 + 320);
      if (!*(_BYTE *)(a2 + 323))
        goto LABEL_75;
      *(_BYTE *)(a1 + 42) = *(_BYTE *)(a1 + 42) & 0xF0 | *(_BYTE *)(a2 + 322) & 0xF;
      if (!*(_BYTE *)(a2 + 343))
        goto LABEL_75;
      *(_BYTE *)(a1 + 52) = *(_BYTE *)(a2 + 342);
      if (!*(_BYTE *)(a2 + 345))
        goto LABEL_75;
      *(_BYTE *)(a1 + 53) = *(_BYTE *)(a2 + 344);
      if (*(_BYTE *)(a2 + 347))
        v14 = *(_BYTE *)(a2 + 346) & 0xF;
      else
        v14 = 0;
      *(_BYTE *)(a1 + 54) = *(_BYTE *)(a1 + 54) & 0xF0 | v14;
      if (*(_BYTE *)(a2 + 341))
        *(_BYTE *)(a1 + 51) = *(_BYTE *)(a2 + 340);
      if (*(_BYTE *)(a2 + 328))
        *(_DWORD *)(a1 + 43) = *(_DWORD *)(a2 + 324);
      if (*(_BYTE *)(a2 + 336))
        *(_DWORD *)(a1 + 47) = *(_DWORD *)(a2 + 332);
      if (!*(_BYTE *)(a2 + 120))
LABEL_75:
        sub_10000BA44();
      *(_WORD *)(a1 + 70) = *(_WORD *)(a2 + 118);
      v15 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
      {
        v16 = *(unsigned __int8 *)(a1 + 22);
        v17 = *(unsigned __int8 *)(a1 + 23);
        v18 = *(unsigned __int8 *)(a1 + 24);
        v19 = *(unsigned __int8 *)(a1 + 25);
        v20 = *(unsigned __int16 *)(a1 + 70);
        v21 = *(unsigned __int16 *)(a1 + 26);
        v22 = *(unsigned __int8 *)(a1 + 28);
        v23 = *(_DWORD *)(a1 + 29);
        v24 = 10 * *(unsigned __int8 *)(a1 + 33);
        v25 = 10 * *(unsigned __int8 *)(a1 + 34);
        v26 = *(unsigned __int16 *)(a1 + 35);
        v27 = *(unsigned __int16 *)(a1 + 37);
        v28 = *(unsigned __int8 *)(a1 + 39);
        v29 = *(unsigned __int8 *)(a1 + 40);
        v30 = *(unsigned __int8 *)(a1 + 41);
        v31 = *(_BYTE *)(a1 + 42) & 0xF;
        v32 = *(unsigned __int8 *)(a1 + 52);
        v33 = *(unsigned __int8 *)(a1 + 53);
        v34 = *(_BYTE *)(a1 + 54) & 0xF;
        if (*(_BYTE *)(a2 + 341))
          v35 = *(unsigned __int8 *)(a1 + 51);
        else
          v35 = -1;
        if (*(_BYTE *)(a2 + 336))
          v36 = *(_DWORD *)(a1 + 47);
        else
          v36 = -1;
        v37 = *(_DWORD *)(a1 + 43);
        if (!*(_BYTE *)(a2 + 328))
          v37 = -1;
        v38 = 67114496;
        v39 = v16;
        v40 = 1024;
        v41 = v17;
        v42 = 1024;
        v43 = v18;
        v44 = 1024;
        v45 = v19;
        v46 = 1024;
        v47 = v20;
        v48 = 1024;
        v49 = v21;
        v50 = 1024;
        v51 = v22;
        v52 = 1024;
        v53 = v23;
        v54 = 1024;
        v55 = v24;
        v56 = 1024;
        v57 = v25;
        v58 = 1024;
        v59 = v26;
        v60 = 1024;
        v61 = v27;
        v62 = 1024;
        v63 = v28;
        v64 = 1024;
        v65 = v29;
        v66 = 1024;
        v67 = v30;
        v68 = 1024;
        v69 = v31;
        v70 = 1024;
        v71 = v32;
        v72 = 1024;
        v73 = v33;
        v74 = 1024;
        v75 = v34;
        v76 = 1024;
        v77 = v35;
        v78 = 1024;
        v79 = v36;
        v80 = 1024;
        v81 = v37;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Built Alisha packet V2: {\n  ses_role: %u\n, tx_ant_mask: %u\n, rx_ant_mask: %u\n, rx_sync_search_ant_mask: %u\n, debug_flags: 0x%x\n, bch: %d\n, preamble: %u\n, uwb_ses_id: %u\n, rsp_timeout_10s: %u (s)\n, total_timeout_10s: %u (s)\n, sel_protocol_version: %u\n, sel_uwb_cfg_id: %u\n, ran_multiplier: %u\n, nchaps_per_slot: %u\n, nslots_per_round: %u\n"
          ", nresponders: %u\n"
          ", sel_hop_cfg_bitmask: %u\n"
          ", sel_pulse_shape_combo: %u\n"
          ", space_between_ranging_rounds: %u\n"
          ", anchor_only_responder_idx: %d\n"
          ", anchor_only_responder_hop_key: %d\n"
          ", anchor_only_responder_sts_index_0: %d\n"
          "}",
          (uint8_t *)&v38,
          0x86u);
      }
      return 1;
    }
    else
    {
      result = os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR);
      if (result)
      {
        sub_1003D153C();
        return 0;
      }
    }
  }
  else
  {
    result = os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR);
    if (result)
    {
      sub_1003D14E8();
      return 0;
    }
  }
  return result;
}

BOOL sub_100173D3C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t i;
  const std::string::value_type *v17;
  std::string::size_type v18;
  NSObject *v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  uint64_t v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  std::string *v37;
  _BOOL8 result;
  std::string v39;
  _BYTE __p[18];
  __int16 v41;
  const char *v42;
  __int16 v43;
  int v44;
  __int16 v45;
  const char *v46;
  __int16 v47;
  int v48;
  __int16 v49;
  const char *v50;
  __int16 v51;
  int v52;
  __int16 v53;
  const char *v54;
  __int16 v55;
  int v56;
  __int16 v57;
  const char *v58;
  __int16 v59;
  int v60;
  __int16 v61;
  const char *v62;
  __int16 v63;
  int v64;
  __int16 v65;
  const char *v66;
  __int16 v67;
  int v68;
  __int16 v69;
  const char *v70;
  __int16 v71;
  int v72;
  __int16 v73;
  const char *v74;
  __int16 v75;
  int v76;
  __int16 v77;
  const char *v78;
  __int16 v79;
  int v80;
  __int16 v81;
  const char *v82;
  __int16 v83;
  int v84;
  __int16 v85;
  const char *v86;
  __int16 v87;
  uint64_t v88;
  __int16 v89;
  const char *v90;
  __int16 v91;
  int v92;
  __int16 v93;
  const char *v94;
  __int16 v95;
  int v96;
  __int16 v97;
  const char *v98;
  __int16 v99;
  uint64_t v100;
  __int16 v101;
  const char *v102;
  __int16 v103;
  uint64_t v104;
  __int16 v105;
  const char *v106;
  __int16 v107;
  std::string *v108;
  char __str[8];

  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
    sub_1003D168C();
  if (!*(_BYTE *)(a2 + 97)
    || !*(_BYTE *)(a2 + 205)
    || !*(_BYTE *)(a2 + 99)
    || !*(_BYTE *)(a2 + 101)
    || !*(_BYTE *)(a2 + 103)
    || !*(_BYTE *)(a2 + 105)
    || !*(_BYTE *)(a2 + 107)
    || !*(_BYTE *)(a2 + 237)
    || !*(_BYTE *)(a2 + 214)
    || !*(_BYTE *)(a2 + 234)
    || !*(_BYTE *)(a2 + 120)
    || !*(_BYTE *)(a2 + 174)
    || !*(_BYTE *)(a2 + 207)
    || !*(_BYTE *)(a2 + 209)
    || !*(_BYTE *)(a2 + 211)
    || !*(_BYTE *)(a2 + 280))
  {
    result = os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_FAULT);
    if (!result)
      return result;
    sub_1003D15BC();
    return 0;
  }
  *(_WORD *)(a1 + 16) = 16422;
  if (!*(_BYTE *)(a2 + 97))
    sub_10000BA44();
  *(_BYTE *)(a1 + 22) = *(_BYTE *)(a2 + 96);
  if (!*(_BYTE *)(a2 + 205))
    sub_10000BA44();
  *(_BYTE *)(a1 + 23) = *(_BYTE *)(a2 + 204);
  if (!*(_BYTE *)(a2 + 99))
    sub_10000BA44();
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 98);
  if (!*(_BYTE *)(a2 + 101))
    sub_10000BA44();
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 100);
  if (!*(_BYTE *)(a2 + 103))
    sub_10000BA44();
  *(_BYTE *)(a1 + 26) = *(_BYTE *)(a2 + 102);
  if (!*(_BYTE *)(a2 + 105))
    sub_10000BA44();
  if (!sub_10036B59C(*(unsigned __int8 *)(a2 + 104)))
    sub_1003D1664();
  if (!*(_BYTE *)(a2 + 107))
    sub_10000BA44();
  if (!sub_10036B59C(*(unsigned __int8 *)(a2 + 106)))
    sub_1003D163C();
  if (!*(_BYTE *)(a2 + 237))
    sub_10000BA44();
  if (!sub_10036C6C0((_BYTE *)(a2 + 235)))
    sub_1003D1614();
  if (!*(_BYTE *)(a2 + 105))
    sub_10000BA44();
  *(_BYTE *)(a1 + 30) = sub_10036B654(*(unsigned __int8 *)(a2 + 104), 1, v4, v5, v6, v7, v8, v9);
  if (!*(_BYTE *)(a2 + 107))
    sub_10000BA44();
  *(_BYTE *)(a1 + 31) = sub_10036B654(*(unsigned __int8 *)(a2 + 106), 1, v10, v11, v12, v13, v14, v15);
  if (!*(_BYTE *)(a2 + 237))
    sub_10000BA44();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 236);
  if (!*(_BYTE *)(a2 + 115))
    sub_10000BA44();
  *(_BYTE *)(a1 + 38) = *(_BYTE *)(a2 + 114);
  if (!*(_BYTE *)(a2 + 117))
    sub_10000BA44();
  *(_BYTE *)(a1 + 39) = *(_BYTE *)(a2 + 116);
  if (!*(_BYTE *)(a2 + 120))
    sub_10000BA44();
  *(_WORD *)(a1 + 70) = *(_WORD *)(a2 + 118) | 2;
  if (!*(_BYTE *)(a2 + 174))
    sub_10000BA44();
  *(_WORD *)(a1 + 42) = *(_WORD *)(a2 + 172);
  if (!*(_BYTE *)(a2 + 207))
    sub_10000BA44();
  *(_BYTE *)(a1 + 27) = sub_10036C4CC(*(unsigned __int8 *)(a2 + 206), 1);
  if (!*(_BYTE *)(a2 + 209))
    sub_10000BA44();
  *(_BYTE *)(a1 + 28) = sub_10036C4CC(*(unsigned __int8 *)(a2 + 208), 1);
  if (!*(_BYTE *)(a2 + 211))
    sub_10000BA44();
  *(_BYTE *)(a1 + 29) = *(_BYTE *)(a2 + 210);
  if (!*(_BYTE *)(a2 + 280))
    sub_10000BA44();
  if (!*(_BYTE *)(a2 + 240))
  {
    if (*(_BYTE *)(a2 + 256) && *(_BYTE *)(a2 + 272))
    {
      *(_QWORD *)(a1 + 84) = *(_QWORD *)(a2 + 248);
      if (!*(_BYTE *)(a2 + 280))
        sub_10000BA44();
      if (!*(_BYTE *)(a2 + 272))
        sub_10000BA44();
      *(_QWORD *)(a1 + 92) = *(_QWORD *)(a2 + 264);
      goto LABEL_43;
    }
    result = os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_FAULT);
    if (!result)
      return result;
    sub_1003D15E8();
    return 0;
  }
  *(_QWORD *)(a1 + 92) = 0;
  *(_QWORD *)(a1 + 84) = 0;
LABEL_43:
  if (!*(_BYTE *)(a2 + 234))
    sub_10000BA44();
  *(_OWORD *)(a1 + 49) = *(_OWORD *)(a2 + 218);
  sub_10000BF04(&v39, "0x");
  if (!*(_BYTE *)(a2 + 234))
    sub_10000BA44();
  for (i = 0; i != 16; ++i)
  {
    snprintf(__str, 8uLL, "%02x", *(unsigned __int8 *)(a2 + 218 + i));
    sub_10000BF04(__p, __str);
    if (SBYTE3(v42) >= 0)
      v17 = __p;
    else
      v17 = *(const std::string::value_type **)__p;
    if (SBYTE3(v42) >= 0)
      v18 = BYTE3(v42);
    else
      v18 = *(_QWORD *)&__p[8];
    std::string::append(&v39, v17, v18);
    if (SBYTE3(v42) < 0)
      operator delete(*(void **)__p);
  }
  v19 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    v20 = *(unsigned __int8 *)(a1 + 22);
    v21 = *(unsigned __int8 *)(a1 + 24);
    v22 = *(unsigned __int8 *)(a1 + 25);
    v23 = *(unsigned __int8 *)(a1 + 26);
    v24 = *(unsigned __int8 *)(a1 + 30);
    v25 = *(unsigned __int8 *)(a1 + 32);
    v26 = *(unsigned __int8 *)(a1 + 38);
    v27 = *(unsigned __int8 *)(a1 + 39);
    v28 = *(unsigned __int8 *)(a1 + 27);
    v29 = *(unsigned __int8 *)(a1 + 28);
    v30 = *(unsigned __int8 *)(a1 + 29);
    v31 = *(unsigned __int16 *)(a1 + 70);
    v32 = *(_QWORD *)(a1 + 72);
    v33 = *(_DWORD *)(a1 + 80);
    v34 = *(unsigned __int16 *)(a1 + 42);
    v35 = *(_QWORD *)(a1 + 84);
    v36 = *(_QWORD *)(a1 + 92);
    v37 = &v39;
    if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v37 = (std::string *)v39.__r_.__value_.__r.__words[0];
    *(_DWORD *)__p = 136324098;
    *(_QWORD *)&__p[4] = "ses_role";
    *(_WORD *)&__p[12] = 1024;
    *(_DWORD *)&__p[14] = v20;
    v41 = 2080;
    v42 = "tx_ant_mask";
    v43 = 1024;
    v44 = v21;
    v45 = 2080;
    v46 = "rx_ant_mask";
    v47 = 1024;
    v48 = v22;
    v49 = 2080;
    v50 = "rx_sync_search_ant_mask";
    v51 = 1024;
    v52 = v23;
    v53 = 2080;
    v54 = "tx_preamble";
    v55 = 1024;
    v56 = v24;
    v57 = 2080;
    v58 = "pkt_type";
    v59 = 1024;
    v60 = v25;
    v61 = 2080;
    v62 = "tx_mslot_sz_250us";
    v63 = 1024;
    v64 = v26;
    v65 = 2080;
    v66 = "rx_mslot_sz_250us";
    v67 = 1024;
    v68 = v27;
    v69 = 2080;
    v70 = "start_channel";
    v71 = 1024;
    v72 = v28;
    v73 = 2080;
    v74 = "alternate_channel";
    v75 = 1024;
    v76 = v29;
    v77 = 2080;
    v78 = "channel_hop_pattern_mask";
    v79 = 1024;
    v80 = v30;
    v81 = 2080;
    v82 = "debug_flags";
    v83 = 1024;
    v84 = v31;
    v85 = 2080;
    v86 = "start_time";
    v87 = 2048;
    v88 = v32;
    v89 = 2080;
    v90 = "start_time_uncertainty";
    v91 = 1024;
    v92 = v33;
    v93 = 2080;
    v94 = "interval_ms";
    v95 = 1024;
    v96 = v34;
    v97 = 2080;
    v98 = "local_addr";
    v99 = 2048;
    v100 = v35;
    v101 = 2080;
    v102 = "peer_addr";
    v103 = 2048;
    v104 = v36;
    v105 = 2080;
    v106 = "sts_blob";
    v107 = 2080;
    v108 = v37;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Built GR ND packet V1: {\n              %s: %d\n             , %s : %d\n             , %s : %d\n             , %s : %d\n             , %s: %d\n             , %s: %d\n             , %s: %d\n             , %s: %d\n             , %s: %d\n             , %s: %d\n             , %s: %x\n             , %s: %d\n             , %s: %llu\n             , %s: %u\n             , %s: %d\n"
      "             , %s: 0x%llx\n"
      "             , %s: 0x%llx\n"
      "             , %s: %s\n"
      "     }",
      __p,
      0x132u);
  }
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v39.__r_.__value_.__l.__data_);
  return 1;
}

void sub_100174418(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_100174458(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t i;
  const std::string::value_type *v19;
  std::string::size_type v20;
  NSObject *v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  uint64_t v34;
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  std::string *v39;
  _BOOL8 result;
  std::string v41;
  _BYTE __p[18];
  __int16 v43;
  const char *v44;
  __int16 v45;
  int v46;
  __int16 v47;
  const char *v48;
  __int16 v49;
  int v50;
  __int16 v51;
  const char *v52;
  __int16 v53;
  int v54;
  __int16 v55;
  const char *v56;
  __int16 v57;
  int v58;
  __int16 v59;
  const char *v60;
  __int16 v61;
  int v62;
  __int16 v63;
  const char *v64;
  __int16 v65;
  int v66;
  __int16 v67;
  const char *v68;
  __int16 v69;
  int v70;
  __int16 v71;
  const char *v72;
  __int16 v73;
  int v74;
  __int16 v75;
  const char *v76;
  __int16 v77;
  int v78;
  __int16 v79;
  const char *v80;
  __int16 v81;
  int v82;
  __int16 v83;
  const char *v84;
  __int16 v85;
  int v86;
  __int16 v87;
  const char *v88;
  __int16 v89;
  uint64_t v90;
  __int16 v91;
  const char *v92;
  __int16 v93;
  int v94;
  __int16 v95;
  const char *v96;
  __int16 v97;
  int v98;
  __int16 v99;
  const char *v100;
  __int16 v101;
  uint64_t v102;
  __int16 v103;
  const char *v104;
  __int16 v105;
  uint64_t v106;
  __int16 v107;
  const char *v108;
  __int16 v109;
  std::string *v110;
  char __str[8];

  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
    sub_1003D168C();
  if (!*(_BYTE *)(a2 + 97)
    || !*(_BYTE *)(a2 + 205)
    || !*(_BYTE *)(a2 + 99)
    || !*(_BYTE *)(a2 + 101)
    || !*(_BYTE *)(a2 + 103)
    || !*(_BYTE *)(a2 + 105)
    || !*(_BYTE *)(a2 + 107)
    || !*(_BYTE *)(a2 + 237)
    || !*(_BYTE *)(a2 + 214)
    || !*(_BYTE *)(a2 + 234)
    || !*(_BYTE *)(a2 + 120)
    || !*(_BYTE *)(a2 + 174)
    || !*(_BYTE *)(a2 + 207)
    || !*(_BYTE *)(a2 + 209)
    || !*(_BYTE *)(a2 + 211)
    || !*(_BYTE *)(a2 + 280))
  {
    result = os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_FAULT);
    if (!result)
      return result;
    sub_1003D15BC();
    return 0;
  }
  *(_WORD *)(a1 + 16) = 16422;
  if (!*(_BYTE *)(a2 + 97))
    sub_10000BA44();
  *(_BYTE *)(a1 + 22) = *(_BYTE *)(a2 + 96);
  if (!*(_BYTE *)(a2 + 205))
    sub_10000BA44();
  *(_BYTE *)(a1 + 23) = *(_BYTE *)(a2 + 204);
  if (!*(_BYTE *)(a2 + 99))
    sub_10000BA44();
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 98);
  if (!*(_BYTE *)(a2 + 101))
    sub_10000BA44();
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 100);
  if (!*(_BYTE *)(a2 + 103))
    sub_10000BA44();
  *(_BYTE *)(a1 + 26) = *(_BYTE *)(a2 + 102);
  if (!*(_BYTE *)(a2 + 105))
    sub_10000BA44();
  if (!sub_10036B59C(*(unsigned __int8 *)(a2 + 104)))
    sub_1003D1708();
  if (!*(_BYTE *)(a2 + 107))
    sub_10000BA44();
  if (!sub_10036B59C(*(unsigned __int8 *)(a2 + 106)))
    sub_1003D16E0();
  if (!*(_BYTE *)(a2 + 237))
    sub_10000BA44();
  if (!sub_10036C6C0((_BYTE *)(a2 + 235)))
    sub_1003D16B8();
  if (!*(_BYTE *)(a2 + 105))
    sub_10000BA44();
  *(_BYTE *)(a1 + 32) = sub_10036B654(*(unsigned __int8 *)(a2 + 104), 2, v4, v5, v6, v7, v8, v9);
  if (!*(_BYTE *)(a2 + 107))
    sub_10000BA44();
  *(_BYTE *)(a1 + 33) = sub_10036B654(*(unsigned __int8 *)(a2 + 106), 2, v10, v11, v12, v13, v14, v15);
  if (!*(_BYTE *)(a2 + 237))
    sub_10000BA44();
  *(_WORD *)(a1 + 34) = sub_10036C734((unsigned __int8 *)(a2 + 235));
  if (!*(_BYTE *)(a2 + 115))
    sub_10000BA44();
  *(_BYTE *)(a1 + 46) = *(_BYTE *)(a2 + 114);
  if (!*(_BYTE *)(a2 + 117))
    sub_10000BA44();
  *(_BYTE *)(a1 + 47) = *(_BYTE *)(a2 + 116);
  if (!*(_BYTE *)(a2 + 120))
    sub_10000BA44();
  *(_WORD *)(a1 + 78) = *(_WORD *)(a2 + 118) | 2;
  if (!*(_BYTE *)(a2 + 174))
    sub_10000BA44();
  *(_WORD *)(a1 + 50) = *(_WORD *)(a2 + 172);
  if (!*(_BYTE *)(a2 + 207))
    sub_10000BA44();
  v16 = *(unsigned __int8 *)(a2 + 206);
  if (v16 == 5 || v16 == 9)
    *(_WORD *)(a1 + 27) = v16;
  if (!*(_BYTE *)(a2 + 209))
    sub_10000BA44();
  v17 = *(unsigned __int8 *)(a2 + 208);
  if (v17 == 5 || v17 == 9)
    *(_WORD *)(a1 + 29) = v17;
  if (!*(_BYTE *)(a2 + 211))
    sub_10000BA44();
  *(_BYTE *)(a1 + 31) = *(_BYTE *)(a2 + 210);
  if (!*(_BYTE *)(a2 + 280))
    sub_10000BA44();
  if (!*(_BYTE *)(a2 + 240))
  {
    if (*(_BYTE *)(a2 + 256) && *(_BYTE *)(a2 + 272))
    {
      *(_QWORD *)(a1 + 92) = *(_QWORD *)(a2 + 248);
      if (!*(_BYTE *)(a2 + 280))
        sub_10000BA44();
      if (!*(_BYTE *)(a2 + 272))
        sub_10000BA44();
      *(_QWORD *)(a1 + 100) = *(_QWORD *)(a2 + 264);
      goto LABEL_49;
    }
    result = os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_FAULT);
    if (!result)
      return result;
    sub_1003D15E8();
    return 0;
  }
  *(_QWORD *)(a1 + 100) = 0;
  *(_QWORD *)(a1 + 92) = 0;
LABEL_49:
  if (!*(_BYTE *)(a2 + 234))
    sub_10000BA44();
  *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 218);
  sub_10000BF04(&v41, "0x");
  if (!*(_BYTE *)(a2 + 234))
    sub_10000BA44();
  for (i = 0; i != 16; ++i)
  {
    snprintf(__str, 8uLL, "%02x", *(unsigned __int8 *)(a2 + 218 + i));
    sub_10000BF04(__p, __str);
    if (SBYTE3(v44) >= 0)
      v19 = __p;
    else
      v19 = *(const std::string::value_type **)__p;
    if (SBYTE3(v44) >= 0)
      v20 = BYTE3(v44);
    else
      v20 = *(_QWORD *)&__p[8];
    std::string::append(&v41, v19, v20);
    if (SBYTE3(v44) < 0)
      operator delete(*(void **)__p);
  }
  v21 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    v22 = *(unsigned __int8 *)(a1 + 22);
    v23 = *(unsigned __int8 *)(a1 + 24);
    v24 = *(unsigned __int8 *)(a1 + 25);
    v25 = *(unsigned __int8 *)(a1 + 26);
    v26 = *(unsigned __int8 *)(a1 + 32);
    v27 = *(unsigned __int16 *)(a1 + 34);
    v28 = *(unsigned __int8 *)(a1 + 46);
    v29 = *(unsigned __int8 *)(a1 + 47);
    v30 = *(unsigned __int16 *)(a1 + 27);
    v31 = *(unsigned __int16 *)(a1 + 29);
    v32 = *(unsigned __int8 *)(a1 + 31);
    v33 = *(unsigned __int16 *)(a1 + 78);
    v34 = *(_QWORD *)(a1 + 80);
    v35 = *(_DWORD *)(a1 + 88);
    v36 = *(unsigned __int16 *)(a1 + 50);
    v37 = *(_QWORD *)(a1 + 92);
    v38 = *(_QWORD *)(a1 + 100);
    v39 = &v41;
    if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v39 = (std::string *)v41.__r_.__value_.__r.__words[0];
    *(_DWORD *)__p = 136324098;
    *(_QWORD *)&__p[4] = "ses_role";
    *(_WORD *)&__p[12] = 1024;
    *(_DWORD *)&__p[14] = v22;
    v43 = 2080;
    v44 = "tx_ant_mask";
    v45 = 1024;
    v46 = v23;
    v47 = 2080;
    v48 = "rx_ant_mask";
    v49 = 1024;
    v50 = v24;
    v51 = 2080;
    v52 = "rx_sync_search_ant_mask";
    v53 = 1024;
    v54 = v25;
    v55 = 2080;
    v56 = "tx_preamble";
    v57 = 1024;
    v58 = v26;
    v59 = 2080;
    v60 = "pkt_type";
    v61 = 1024;
    v62 = v27;
    v63 = 2080;
    v64 = "tx_mslot_sz_250us";
    v65 = 1024;
    v66 = v28;
    v67 = 2080;
    v68 = "rx_mslot_sz_250us";
    v69 = 1024;
    v70 = v29;
    v71 = 2080;
    v72 = "start_channel";
    v73 = 1024;
    v74 = v30;
    v75 = 2080;
    v76 = "alternate_channel";
    v77 = 1024;
    v78 = v31;
    v79 = 2080;
    v80 = "channel_hop_pattern_mask";
    v81 = 1024;
    v82 = v32;
    v83 = 2080;
    v84 = "debug_flags";
    v85 = 1024;
    v86 = v33;
    v87 = 2080;
    v88 = "start_time";
    v89 = 2048;
    v90 = v34;
    v91 = 2080;
    v92 = "start_time_uncertainty";
    v93 = 1024;
    v94 = v35;
    v95 = 2080;
    v96 = "interval_ms";
    v97 = 1024;
    v98 = v36;
    v99 = 2080;
    v100 = "local_addr";
    v101 = 2048;
    v102 = v37;
    v103 = 2080;
    v104 = "peer_addr";
    v105 = 2048;
    v106 = v38;
    v107 = 2080;
    v108 = "sts_blob";
    v109 = 2080;
    v110 = v39;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "Built GR ND packet V2: {\n              %s: %d\n             , %s : %d\n             , %s : %d\n             , %s : %d\n             , %s: %d\n             , %s: %d\n             , %s: %d\n             , %s: %d\n             , %s: %d\n             , %s: %d\n             , %s: %x\n             , %s: %d\n             , %s: %llu\n             , %s: %u\n             , %s: %d\n"
      "             , %s: 0x%llx\n"
      "             , %s: 0x%llx\n"
      "             , %s: %s\n"
      "     }",
      __p,
      0x132u);
  }
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v41.__r_.__value_.__l.__data_);
  return 1;
}

void sub_100174B4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_100174B8C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t i;
  const std::string::value_type *v17;
  std::string::size_type v18;
  NSObject *v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  std::string *v44;
  _BOOL8 result;
  int v46;
  uint64_t v47;
  std::string v48;
  _BYTE __p[18];
  __int16 v50;
  const char *v51;
  __int16 v52;
  int v53;
  __int16 v54;
  const char *v55;
  __int16 v56;
  int v57;
  __int16 v58;
  const char *v59;
  __int16 v60;
  int v61;
  __int16 v62;
  const char *v63;
  __int16 v64;
  int v65;
  __int16 v66;
  const char *v67;
  __int16 v68;
  int v69;
  __int16 v70;
  const char *v71;
  __int16 v72;
  int v73;
  __int16 v74;
  const char *v75;
  __int16 v76;
  int v77;
  __int16 v78;
  const char *v79;
  __int16 v80;
  int v81;
  __int16 v82;
  const char *v83;
  __int16 v84;
  int v85;
  __int16 v86;
  const char *v87;
  __int16 v88;
  int v89;
  __int16 v90;
  const char *v91;
  __int16 v92;
  int v93;
  __int16 v94;
  const char *v95;
  __int16 v96;
  int v97;
  __int16 v98;
  const char *v99;
  __int16 v100;
  int v101;
  __int16 v102;
  const char *v103;
  __int16 v104;
  int v105;
  __int16 v106;
  const char *v107;
  __int16 v108;
  int v109;
  __int16 v110;
  const char *v111;
  __int16 v112;
  int v113;
  __int16 v114;
  const char *v115;
  __int16 v116;
  int v117;
  __int16 v118;
  const char *v119;
  __int16 v120;
  int v121;
  __int16 v122;
  const char *v123;
  __int16 v124;
  int v125;
  __int16 v126;
  const char *v127;
  __int16 v128;
  int v129;
  __int16 v130;
  const char *v131;
  __int16 v132;
  uint64_t v133;
  __int16 v134;
  const char *v135;
  __int16 v136;
  int v137;
  __int16 v138;
  const char *v139;
  __int16 v140;
  int v141;
  __int16 v142;
  const char *v143;
  __int16 v144;
  uint64_t v145;
  __int16 v146;
  const char *v147;
  __int16 v148;
  uint64_t v149;
  __int16 v150;
  const char *v151;
  __int16 v152;
  std::string *v153;
  char __str[8];

  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
    sub_1003D17FC();
  if (!*(_BYTE *)(a2 + 97)
    || !*(_BYTE *)(a2 + 205)
    || !*(_BYTE *)(a2 + 99)
    || !*(_BYTE *)(a2 + 101)
    || !*(_BYTE *)(a2 + 103)
    || !*(_BYTE *)(a2 + 105)
    || !*(_BYTE *)(a2 + 107)
    || !*(_BYTE *)(a2 + 110)
    || !*(_BYTE *)(a2 + 113)
    || !*(_BYTE *)(a2 + 115)
    || !*(_BYTE *)(a2 + 117)
    || !*(_BYTE *)(a2 + 201)
    || !*(_BYTE *)(a2 + 203)
    || !*(_BYTE *)(a2 + 217)
    || !*(_BYTE *)(a2 + 214)
    || !*(_BYTE *)(a2 + 234)
    || !*(_BYTE *)(a2 + 120)
    || !*(_BYTE *)(a2 + 194)
    || !*(_BYTE *)(a2 + 198)
    || !*(_BYTE *)(a2 + 207)
    || !*(_BYTE *)(a2 + 209)
    || !*(_BYTE *)(a2 + 211)
    || !*(_BYTE *)(a2 + 280))
  {
    result = os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_FAULT);
    if (!result)
      return result;
    sub_1003D1730();
    return 0;
  }
  *(_WORD *)(a1 + 16) = 16421;
  if (!*(_BYTE *)(a2 + 97))
    sub_10000BA44();
  *(_BYTE *)(a1 + 22) = *(_BYTE *)(a2 + 96);
  if (!*(_BYTE *)(a2 + 205))
    sub_10000BA44();
  *(_BYTE *)(a1 + 23) = *(_BYTE *)(a2 + 204);
  if (!*(_BYTE *)(a2 + 99))
    sub_10000BA44();
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 98);
  if (!*(_BYTE *)(a2 + 101))
    sub_10000BA44();
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 100);
  if (!*(_BYTE *)(a2 + 103))
    sub_10000BA44();
  *(_BYTE *)(a1 + 26) = *(_BYTE *)(a2 + 102);
  if (*(_BYTE *)(a2 + 163))
    *(_BYTE *)(a1 + 34) = *(_BYTE *)(a2 + 162);
  if (*(_BYTE *)(a2 + 165))
    *(_BYTE *)(a1 + 35) = *(_BYTE *)(a2 + 164);
  if (*(_BYTE *)(a2 + 167))
    *(_BYTE *)(a1 + 36) = *(_BYTE *)(a2 + 166);
  if (!*(_BYTE *)(a2 + 105))
    sub_10000BA44();
  if (!sub_10036B59C(*(unsigned __int8 *)(a2 + 104)))
    sub_1003D17D4();
  if (!*(_BYTE *)(a2 + 107))
    sub_10000BA44();
  if (!sub_10036B59C(*(unsigned __int8 *)(a2 + 106)))
    sub_1003D17AC();
  if (!*(_BYTE *)(a2 + 110))
    sub_10000BA44();
  if (!sub_10036C6C0((_BYTE *)(a2 + 108)))
    sub_1003D1784();
  if (!*(_BYTE *)(a2 + 113))
    sub_10000BA44();
  if (!sub_10036C6C0((_BYTE *)(a2 + 111)))
    sub_1003D175C();
  if (!*(_BYTE *)(a2 + 105))
    sub_10000BA44();
  *(_BYTE *)(a1 + 30) = sub_10036B654(*(unsigned __int8 *)(a2 + 104), 1, v4, v5, v6, v7, v8, v9);
  if (!*(_BYTE *)(a2 + 107))
    sub_10000BA44();
  *(_BYTE *)(a1 + 31) = sub_10036B654(*(unsigned __int8 *)(a2 + 106), 1, v10, v11, v12, v13, v14, v15);
  if (!*(_BYTE *)(a2 + 110))
    sub_10000BA44();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 109);
  if (!*(_BYTE *)(a2 + 113))
    sub_10000BA44();
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 112);
  if (!*(_BYTE *)(a2 + 115))
    sub_10000BA44();
  *(_BYTE *)(a1 + 38) = *(_BYTE *)(a2 + 114);
  if (!*(_BYTE *)(a2 + 117))
    sub_10000BA44();
  *(_BYTE *)(a1 + 39) = *(_BYTE *)(a2 + 116);
  if (!*(_BYTE *)(a2 + 201))
    sub_10000BA44();
  *(_BYTE *)(a1 + 46) = *(_BYTE *)(a2 + 200);
  if (!*(_BYTE *)(a2 + 203))
    sub_10000BA44();
  *(_BYTE *)(a1 + 47) = *(_BYTE *)(a2 + 202);
  if (!*(_BYTE *)(a2 + 217))
    sub_10000BA44();
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 216);
  if (!*(_BYTE *)(a2 + 120))
    sub_10000BA44();
  *(_WORD *)(a1 + 70) = *(_WORD *)(a2 + 118) | 2;
  if (!*(_BYTE *)(a2 + 194))
    sub_10000BA44();
  *(_WORD *)(a1 + 42) = *(_WORD *)(a2 + 192);
  if (!*(_BYTE *)(a2 + 198))
    sub_10000BA44();
  *(_WORD *)(a1 + 44) = *(_WORD *)(a2 + 196);
  if (!*(_BYTE *)(a2 + 207))
    sub_10000BA44();
  *(_BYTE *)(a1 + 27) = sub_10036C4CC(*(unsigned __int8 *)(a2 + 206), 1);
  if (!*(_BYTE *)(a2 + 209))
    sub_10000BA44();
  *(_BYTE *)(a1 + 28) = sub_10036C4CC(*(unsigned __int8 *)(a2 + 208), 1);
  if (!*(_BYTE *)(a2 + 211))
    sub_10000BA44();
  *(_BYTE *)(a1 + 29) = *(_BYTE *)(a2 + 210);
  if (!*(_BYTE *)(a2 + 280))
    sub_10000BA44();
  if (!*(_BYTE *)(a2 + 240))
  {
    if (*(_BYTE *)(a2 + 256) && *(_BYTE *)(a2 + 272))
    {
      *(_QWORD *)(a1 + 84) = *(_QWORD *)(a2 + 248);
      if (!*(_BYTE *)(a2 + 280))
        sub_10000BA44();
      if (!*(_BYTE *)(a2 + 272))
        sub_10000BA44();
      *(_QWORD *)(a1 + 92) = *(_QWORD *)(a2 + 264);
      goto LABEL_63;
    }
    result = os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_FAULT);
    if (!result)
      return result;
    sub_1003D15E8();
    return 0;
  }
  *(_QWORD *)(a1 + 92) = 0;
  *(_QWORD *)(a1 + 84) = 0;
LABEL_63:
  if (!*(_BYTE *)(a2 + 234))
    sub_10000BA44();
  *(_OWORD *)(a1 + 49) = *(_OWORD *)(a2 + 218);
  sub_10000BF04(&v48, "0x");
  if (!*(_BYTE *)(a2 + 234))
    sub_10000BA44();
  for (i = 0; i != 16; ++i)
  {
    snprintf(__str, 8uLL, "%02x", *(unsigned __int8 *)(a2 + 218 + i));
    sub_10000BF04(__p, __str);
    if (SBYTE3(v51) >= 0)
      v17 = __p;
    else
      v17 = *(const std::string::value_type **)__p;
    if (SBYTE3(v51) >= 0)
      v18 = BYTE3(v51);
    else
      v18 = *(_QWORD *)&__p[8];
    std::string::append(&v48, v17, v18);
    if (SBYTE3(v51) < 0)
      operator delete(*(void **)__p);
  }
  v19 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    v20 = *(unsigned __int8 *)(a1 + 22);
    v21 = *(unsigned __int8 *)(a1 + 24);
    v22 = *(unsigned __int8 *)(a1 + 25);
    v23 = *(unsigned __int8 *)(a1 + 26);
    v24 = *(unsigned __int8 *)(a1 + 34);
    v25 = *(unsigned __int8 *)(a1 + 35);
    v26 = *(unsigned __int8 *)(a1 + 36);
    v27 = *(unsigned __int8 *)(a1 + 30);
    v28 = *(unsigned __int8 *)(a1 + 31);
    v29 = *(unsigned __int8 *)(a1 + 32);
    v30 = *(unsigned __int8 *)(a1 + 33);
    v31 = *(unsigned __int8 *)(a1 + 38);
    v32 = *(unsigned __int8 *)(a1 + 39);
    v33 = *(unsigned __int16 *)(a1 + 42);
    v34 = *(unsigned __int8 *)(a1 + 46);
    v35 = *(unsigned __int8 *)(a1 + 47);
    v36 = *(unsigned __int8 *)(a1 + 48);
    v37 = *(unsigned __int8 *)(a1 + 27);
    v38 = *(unsigned __int8 *)(a1 + 28);
    v39 = *(unsigned __int8 *)(a1 + 29);
    v40 = *(unsigned __int16 *)(a1 + 70);
    v41 = *(_QWORD *)(a1 + 72);
    v42 = *(_DWORD *)(a1 + 80);
    v46 = *(unsigned __int16 *)(a1 + 44);
    v47 = *(_QWORD *)(a1 + 84);
    v43 = *(_QWORD *)(a1 + 92);
    v44 = &v48;
    if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v44 = (std::string *)v48.__r_.__value_.__r.__words[0];
    *(_DWORD *)__p = 136328706;
    *(_QWORD *)&__p[4] = "ses_role";
    *(_WORD *)&__p[12] = 1024;
    *(_DWORD *)&__p[14] = v20;
    v50 = 2080;
    v51 = "tx_ant_mask";
    v52 = 1024;
    v53 = v21;
    v54 = 2080;
    v55 = "rx_ant_mask";
    v56 = 1024;
    v57 = v22;
    v58 = 2080;
    v59 = "rx_sync_search_ant_mask";
    v60 = 1024;
    v61 = v23;
    v62 = 2080;
    v63 = "tx_ant_mask2";
    v64 = 1024;
    v65 = v24;
    v66 = 2080;
    v67 = "rx_ant_mask2";
    v68 = 1024;
    v69 = v25;
    v70 = 2080;
    v71 = "rx_sync_search_ant_mask2";
    v72 = 1024;
    v73 = v26;
    v74 = 2080;
    v75 = "tx_preamble";
    v76 = 1024;
    v77 = v27;
    v78 = 2080;
    v79 = "rx_preamble";
    v80 = 1024;
    v81 = v28;
    v82 = 2080;
    v83 = "tx_pkt_type";
    v84 = 1024;
    v85 = v29;
    v86 = 2080;
    v87 = "rx_pkt_type";
    v88 = 1024;
    v89 = v30;
    v90 = 2080;
    v91 = "tx_mslot_sz_250us";
    v92 = 1024;
    v93 = v31;
    v94 = 2080;
    v95 = "rx_mslot_sz_250us";
    v96 = 1024;
    v97 = v32;
    v98 = 2080;
    v99 = "interval_min_ms";
    v100 = 1024;
    v101 = v33;
    v102 = 2080;
    v103 = "naccess_slots_min";
    v104 = 1024;
    v105 = v34;
    v106 = 2080;
    v107 = "naccess_slots_max";
    v108 = 1024;
    v109 = v35;
    v110 = 2080;
    v111 = "access_slot_idx";
    v112 = 1024;
    v113 = v36;
    v114 = 2080;
    v115 = "start_channel";
    v116 = 1024;
    v117 = v37;
    v118 = 2080;
    v119 = "alternate_channel";
    v120 = 1024;
    v121 = v38;
    v122 = 2080;
    v123 = "channel_hop_pattern_mask";
    v124 = 1024;
    v125 = v39;
    v126 = 2080;
    v127 = "debug_flags";
    v128 = 1024;
    v129 = v40;
    v130 = 2080;
    v131 = "start_time";
    v132 = 2048;
    v133 = v41;
    v134 = 2080;
    v135 = "start_time_uncertainty";
    v136 = 1024;
    v137 = v42;
    v138 = 2080;
    v139 = "interval_max_ms";
    v140 = 1024;
    v141 = v46;
    v142 = 2080;
    v143 = "local_addr";
    v144 = 2048;
    v145 = v47;
    v146 = 2080;
    v147 = "peer_addr";
    v148 = 2048;
    v149 = v43;
    v150 = 2080;
    v151 = "sts_blob";
    v152 = 2080;
    v153 = v44;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Built GR packet V1: {\n                  %s: %d\n                 , %s : %d\n                 , %s : %d\n                 , %s : %d\n                 , %s : %d\n                 , %s : %d\n                 , %s : %d\n                 , %s: %d\n                 , %s: %d\n                 , %s: %d\n                 , %s: %d\n                 , %s: %d\n                 , %s: %d\n                 , %s: %d\n                 , %s: %d\n"
      "                 , %s: %d\n"
      "                 , %s: %u\n"
      "                 , %s: %d\n"
      "                 , %s: %x\n"
      "                 , %s: %x\n"
      "                 , %s: %d\n"
      "                 , %s: %llu\n"
      "                 , %s: %u\n"
      "                 , %s: %d\n"
      "                 , %s: 0x%llx\n"
      "                 , %s: 0x%llx\n"
      "                 , %s: %s\n"
      "     }",
      __p,
      0x1C2u);
  }
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v48.__r_.__value_.__l.__data_);
  return 1;
}

void sub_100175480(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_1001754C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t i;
  const std::string::value_type *v19;
  std::string::size_type v20;
  NSObject *v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  std::string *v46;
  _BOOL8 result;
  int v48;
  uint64_t v49;
  std::string v50;
  _BYTE __p[18];
  __int16 v52;
  const char *v53;
  __int16 v54;
  int v55;
  __int16 v56;
  const char *v57;
  __int16 v58;
  int v59;
  __int16 v60;
  const char *v61;
  __int16 v62;
  int v63;
  __int16 v64;
  const char *v65;
  __int16 v66;
  int v67;
  __int16 v68;
  const char *v69;
  __int16 v70;
  int v71;
  __int16 v72;
  const char *v73;
  __int16 v74;
  int v75;
  __int16 v76;
  const char *v77;
  __int16 v78;
  int v79;
  __int16 v80;
  const char *v81;
  __int16 v82;
  int v83;
  __int16 v84;
  const char *v85;
  __int16 v86;
  int v87;
  __int16 v88;
  const char *v89;
  __int16 v90;
  int v91;
  __int16 v92;
  const char *v93;
  __int16 v94;
  int v95;
  __int16 v96;
  const char *v97;
  __int16 v98;
  int v99;
  __int16 v100;
  const char *v101;
  __int16 v102;
  int v103;
  __int16 v104;
  const char *v105;
  __int16 v106;
  int v107;
  __int16 v108;
  const char *v109;
  __int16 v110;
  int v111;
  __int16 v112;
  const char *v113;
  __int16 v114;
  int v115;
  __int16 v116;
  const char *v117;
  __int16 v118;
  int v119;
  __int16 v120;
  const char *v121;
  __int16 v122;
  int v123;
  __int16 v124;
  const char *v125;
  __int16 v126;
  int v127;
  __int16 v128;
  const char *v129;
  __int16 v130;
  int v131;
  __int16 v132;
  const char *v133;
  __int16 v134;
  uint64_t v135;
  __int16 v136;
  const char *v137;
  __int16 v138;
  int v139;
  __int16 v140;
  const char *v141;
  __int16 v142;
  int v143;
  __int16 v144;
  const char *v145;
  __int16 v146;
  uint64_t v147;
  __int16 v148;
  const char *v149;
  __int16 v150;
  uint64_t v151;
  __int16 v152;
  const char *v153;
  __int16 v154;
  std::string *v155;
  char __str[8];

  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
    sub_1003D17FC();
  if (!*(_BYTE *)(a2 + 97)
    || !*(_BYTE *)(a2 + 205)
    || !*(_BYTE *)(a2 + 99)
    || !*(_BYTE *)(a2 + 101)
    || !*(_BYTE *)(a2 + 103)
    || !*(_BYTE *)(a2 + 105)
    || !*(_BYTE *)(a2 + 107)
    || !*(_BYTE *)(a2 + 110)
    || !*(_BYTE *)(a2 + 113)
    || !*(_BYTE *)(a2 + 115)
    || !*(_BYTE *)(a2 + 117)
    || !*(_BYTE *)(a2 + 201)
    || !*(_BYTE *)(a2 + 203)
    || !*(_BYTE *)(a2 + 217)
    || !*(_BYTE *)(a2 + 214)
    || !*(_BYTE *)(a2 + 234)
    || !*(_BYTE *)(a2 + 120)
    || !*(_BYTE *)(a2 + 194)
    || !*(_BYTE *)(a2 + 198)
    || !*(_BYTE *)(a2 + 207)
    || !*(_BYTE *)(a2 + 209)
    || !*(_BYTE *)(a2 + 211)
    || !*(_BYTE *)(a2 + 280))
  {
    result = os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_FAULT);
    if (!result)
      return result;
    sub_1003D1730();
    return 0;
  }
  *(_WORD *)(a1 + 16) = 16421;
  if (!*(_BYTE *)(a2 + 97))
    sub_10000BA44();
  *(_BYTE *)(a1 + 22) = *(_BYTE *)(a2 + 96);
  if (!*(_BYTE *)(a2 + 205))
    sub_10000BA44();
  *(_BYTE *)(a1 + 23) = *(_BYTE *)(a2 + 204);
  if (!*(_BYTE *)(a2 + 99))
    sub_10000BA44();
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 98);
  if (!*(_BYTE *)(a2 + 101))
    sub_10000BA44();
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 100);
  if (!*(_BYTE *)(a2 + 103))
    sub_10000BA44();
  *(_BYTE *)(a1 + 26) = *(_BYTE *)(a2 + 102);
  if (*(_BYTE *)(a2 + 163))
    *(_BYTE *)(a1 + 38) = *(_BYTE *)(a2 + 162);
  if (*(_BYTE *)(a2 + 165))
    *(_BYTE *)(a1 + 39) = *(_BYTE *)(a2 + 164);
  if (*(_BYTE *)(a2 + 167))
    *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 166);
  if (!*(_BYTE *)(a2 + 105))
    sub_10000BA44();
  if (!sub_10036B59C(*(unsigned __int8 *)(a2 + 104)))
    sub_1003D18A0();
  if (!*(_BYTE *)(a2 + 107))
    sub_10000BA44();
  if (!sub_10036B59C(*(unsigned __int8 *)(a2 + 106)))
    sub_1003D1878();
  if (!*(_BYTE *)(a2 + 110))
    sub_10000BA44();
  if (!sub_10036C6C0((_BYTE *)(a2 + 108)))
    sub_1003D1850();
  if (!*(_BYTE *)(a2 + 113))
    sub_10000BA44();
  if (!sub_10036C6C0((_BYTE *)(a2 + 111)))
    sub_1003D1828();
  if (!*(_BYTE *)(a2 + 105))
    sub_10000BA44();
  *(_BYTE *)(a1 + 32) = sub_10036B654(*(unsigned __int8 *)(a2 + 104), 2, v4, v5, v6, v7, v8, v9);
  if (!*(_BYTE *)(a2 + 107))
    sub_10000BA44();
  *(_BYTE *)(a1 + 33) = sub_10036B654(*(unsigned __int8 *)(a2 + 106), 2, v10, v11, v12, v13, v14, v15);
  if (!*(_BYTE *)(a2 + 110))
    sub_10000BA44();
  *(_WORD *)(a1 + 34) = sub_10036C734((unsigned __int8 *)(a2 + 108));
  if (!*(_BYTE *)(a2 + 113))
    sub_10000BA44();
  *(_WORD *)(a1 + 36) = sub_10036C734((unsigned __int8 *)(a2 + 111));
  if (!*(_BYTE *)(a2 + 115))
    sub_10000BA44();
  *(_BYTE *)(a1 + 46) = *(_BYTE *)(a2 + 114);
  if (!*(_BYTE *)(a2 + 117))
    sub_10000BA44();
  *(_BYTE *)(a1 + 47) = *(_BYTE *)(a2 + 116);
  if (!*(_BYTE *)(a2 + 201))
    sub_10000BA44();
  *(_BYTE *)(a1 + 54) = *(_BYTE *)(a2 + 200);
  if (!*(_BYTE *)(a2 + 203))
    sub_10000BA44();
  *(_BYTE *)(a1 + 55) = *(_BYTE *)(a2 + 202);
  if (!*(_BYTE *)(a2 + 217))
    sub_10000BA44();
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 216);
  if (!*(_BYTE *)(a2 + 120))
    sub_10000BA44();
  *(_WORD *)(a1 + 78) = *(_WORD *)(a2 + 118) | 2;
  if (!*(_BYTE *)(a2 + 194))
    sub_10000BA44();
  *(_WORD *)(a1 + 50) = *(_WORD *)(a2 + 192);
  if (!*(_BYTE *)(a2 + 198))
    sub_10000BA44();
  *(_WORD *)(a1 + 52) = *(_WORD *)(a2 + 196);
  if (!*(_BYTE *)(a2 + 207))
    sub_10000BA44();
  v16 = *(unsigned __int8 *)(a2 + 206);
  if (v16 == 5 || v16 == 9)
    *(_WORD *)(a1 + 27) = v16;
  if (!*(_BYTE *)(a2 + 209))
    sub_10000BA44();
  v17 = *(unsigned __int8 *)(a2 + 208);
  if (v17 == 5 || v17 == 9)
    *(_WORD *)(a1 + 29) = v17;
  if (!*(_BYTE *)(a2 + 211))
    sub_10000BA44();
  *(_BYTE *)(a1 + 31) = *(_BYTE *)(a2 + 210);
  if (!*(_BYTE *)(a2 + 280))
    sub_10000BA44();
  if (!*(_BYTE *)(a2 + 240))
  {
    if (*(_BYTE *)(a2 + 256) && *(_BYTE *)(a2 + 272))
    {
      *(_QWORD *)(a1 + 92) = *(_QWORD *)(a2 + 248);
      if (!*(_BYTE *)(a2 + 280))
        sub_10000BA44();
      if (!*(_BYTE *)(a2 + 272))
        sub_10000BA44();
      *(_QWORD *)(a1 + 100) = *(_QWORD *)(a2 + 264);
      goto LABEL_69;
    }
    result = os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_FAULT);
    if (!result)
      return result;
    sub_1003D15E8();
    return 0;
  }
  *(_QWORD *)(a1 + 100) = 0;
  *(_QWORD *)(a1 + 92) = 0;
LABEL_69:
  if (!*(_BYTE *)(a2 + 234))
    sub_10000BA44();
  *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 218);
  sub_10000BF04(&v50, "0x");
  if (!*(_BYTE *)(a2 + 234))
    sub_10000BA44();
  for (i = 0; i != 16; ++i)
  {
    snprintf(__str, 8uLL, "%02x", *(unsigned __int8 *)(a2 + 218 + i));
    sub_10000BF04(__p, __str);
    if (SBYTE3(v53) >= 0)
      v19 = __p;
    else
      v19 = *(const std::string::value_type **)__p;
    if (SBYTE3(v53) >= 0)
      v20 = BYTE3(v53);
    else
      v20 = *(_QWORD *)&__p[8];
    std::string::append(&v50, v19, v20);
    if (SBYTE3(v53) < 0)
      operator delete(*(void **)__p);
  }
  v21 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    v22 = *(unsigned __int8 *)(a1 + 22);
    v23 = *(unsigned __int8 *)(a1 + 24);
    v24 = *(unsigned __int8 *)(a1 + 25);
    v25 = *(unsigned __int8 *)(a1 + 26);
    v26 = *(unsigned __int8 *)(a1 + 38);
    v27 = *(unsigned __int8 *)(a1 + 39);
    v28 = *(unsigned __int8 *)(a1 + 40);
    v29 = *(unsigned __int8 *)(a1 + 32);
    v30 = *(unsigned __int8 *)(a1 + 33);
    v31 = *(unsigned __int16 *)(a1 + 34);
    v32 = *(unsigned __int16 *)(a1 + 36);
    v33 = *(unsigned __int8 *)(a1 + 46);
    v34 = *(unsigned __int8 *)(a1 + 47);
    v35 = *(unsigned __int16 *)(a1 + 50);
    v36 = *(unsigned __int8 *)(a1 + 54);
    v37 = *(unsigned __int8 *)(a1 + 55);
    v38 = *(unsigned __int8 *)(a1 + 56);
    v39 = *(unsigned __int16 *)(a1 + 27);
    v40 = *(unsigned __int16 *)(a1 + 29);
    v41 = *(unsigned __int8 *)(a1 + 31);
    v42 = *(unsigned __int16 *)(a1 + 78);
    v43 = *(_QWORD *)(a1 + 80);
    v44 = *(_DWORD *)(a1 + 88);
    v48 = *(unsigned __int16 *)(a1 + 52);
    v49 = *(_QWORD *)(a1 + 92);
    v45 = *(_QWORD *)(a1 + 100);
    v46 = &v50;
    if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v46 = (std::string *)v50.__r_.__value_.__r.__words[0];
    *(_DWORD *)__p = 136328706;
    *(_QWORD *)&__p[4] = "ses_role";
    *(_WORD *)&__p[12] = 1024;
    *(_DWORD *)&__p[14] = v22;
    v52 = 2080;
    v53 = "tx_ant_mask";
    v54 = 1024;
    v55 = v23;
    v56 = 2080;
    v57 = "rx_ant_mask";
    v58 = 1024;
    v59 = v24;
    v60 = 2080;
    v61 = "rx_sync_search_ant_mask";
    v62 = 1024;
    v63 = v25;
    v64 = 2080;
    v65 = "tx_ant_mask2";
    v66 = 1024;
    v67 = v26;
    v68 = 2080;
    v69 = "rx_ant_mask2";
    v70 = 1024;
    v71 = v27;
    v72 = 2080;
    v73 = "rx_sync_search_ant_mask2";
    v74 = 1024;
    v75 = v28;
    v76 = 2080;
    v77 = "tx_preamble";
    v78 = 1024;
    v79 = v29;
    v80 = 2080;
    v81 = "rx_preamble";
    v82 = 1024;
    v83 = v30;
    v84 = 2080;
    v85 = "tx_pkt_type";
    v86 = 1024;
    v87 = v31;
    v88 = 2080;
    v89 = "rx_pkt_type";
    v90 = 1024;
    v91 = v32;
    v92 = 2080;
    v93 = "tx_mslot_sz_250us";
    v94 = 1024;
    v95 = v33;
    v96 = 2080;
    v97 = "rx_mslot_sz_250us";
    v98 = 1024;
    v99 = v34;
    v100 = 2080;
    v101 = "interval_min_ms";
    v102 = 1024;
    v103 = v35;
    v104 = 2080;
    v105 = "naccess_slots_min";
    v106 = 1024;
    v107 = v36;
    v108 = 2080;
    v109 = "naccess_slots_max";
    v110 = 1024;
    v111 = v37;
    v112 = 2080;
    v113 = "access_slot_idx";
    v114 = 1024;
    v115 = v38;
    v116 = 2080;
    v117 = "start_channel";
    v118 = 1024;
    v119 = v39;
    v120 = 2080;
    v121 = "alternate_channel";
    v122 = 1024;
    v123 = v40;
    v124 = 2080;
    v125 = "channel_hop_pattern_mask";
    v126 = 1024;
    v127 = v41;
    v128 = 2080;
    v129 = "debug_flags";
    v130 = 1024;
    v131 = v42;
    v132 = 2080;
    v133 = "start_time";
    v134 = 2048;
    v135 = v43;
    v136 = 2080;
    v137 = "start_time_uncertainty";
    v138 = 1024;
    v139 = v44;
    v140 = 2080;
    v141 = "interval_max_ms";
    v142 = 1024;
    v143 = v48;
    v144 = 2080;
    v145 = "local_addr";
    v146 = 2048;
    v147 = v49;
    v148 = 2080;
    v149 = "peer_addr";
    v150 = 2048;
    v151 = v45;
    v152 = 2080;
    v153 = "sts_blob";
    v154 = 2080;
    v155 = v46;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "Built GR packet V2: {\n                  %s: %d\n                 , %s : %d\n                 , %s : %d\n                 , %s : %d\n                 , %s : %d\n                 , %s : %d\n                 , %s : %d\n                 , %s: %d\n                 , %s: %d\n                 , %s: %d\n                 , %s: %d\n                 , %s: %d\n                 , %s: %d\n                 , %s: %d\n                 , %s: %d\n"
      "                 , %s: %d\n"
      "                 , %s: %u\n"
      "                 , %s: %d\n"
      "                 , %s: %x\n"
      "                 , %s: %x\n"
      "                 , %s: %d\n"
      "                 , %s: %llu\n"
      "                 , %s: %u\n"
      "                 , %s: %d\n"
      "                 , %s: 0x%llx\n"
      "                 , %s: 0x%llx\n"
      "                 , %s: %s\n"
      "     }",
      __p,
      0x1C2u);
  }
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v50.__r_.__value_.__l.__data_);
  return 1;
}

void sub_100175DD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_100175E14(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  NSObject *v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  _BOOL8 result;
  _DWORD v36[2];
  __int16 v37;
  int v38;
  __int16 v39;
  int v40;
  __int16 v41;
  int v42;
  __int16 v43;
  int v44;
  __int16 v45;
  int v46;
  __int16 v47;
  int v48;
  __int16 v49;
  int v50;
  __int16 v51;
  int v52;
  __int16 v53;
  int v54;
  __int16 v55;
  int v56;
  __int16 v57;
  int v58;
  __int16 v59;
  int v60;
  __int16 v61;
  int v62;
  __int16 v63;
  int v64;
  __int16 v65;
  int v66;
  __int16 v67;
  int v68;
  __int16 v69;
  int v70;
  __int16 v71;
  int v72;
  __int16 v73;
  int v74;
  __int16 v75;
  int v76;
  __int16 v77;
  int v78;
  __int16 v79;
  int v80;

  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
    sub_1003D191C();
  if (*(_BYTE *)(a2 + 97)
    && *(_BYTE *)(a2 + 99)
    && *(_BYTE *)(a2 + 101)
    && *(_BYTE *)(a2 + 103)
    && *(_BYTE *)(a2 + 120)
    && *(_BYTE *)(a2 + 353)
    && *(_BYTE *)(a2 + 355)
    && *(_BYTE *)(a2 + 360)
    && *(_BYTE *)(a2 + 365)
    && *(_BYTE *)(a2 + 367)
    && *(_BYTE *)(a2 + 369)
    && *(_BYTE *)(a2 + 372)
    && *(_BYTE *)(a2 + 376)
    && *(_BYTE *)(a2 + 380)
    && *(_BYTE *)(a2 + 388)
    && *(_BYTE *)(a2 + 392)
    && *(_BYTE *)(a2 + 408)
    && *(_BYTE *)(a2 + 424))
  {
    *(_WORD *)(a1 + 16) = 16448;
    if (!*(_BYTE *)(a2 + 97))
      goto LABEL_48;
    *(_BYTE *)(a1 + 22) = *(_BYTE *)(a2 + 96);
    if (!*(_BYTE *)(a2 + 99))
      goto LABEL_48;
    *(_BYTE *)(a1 + 29) = *(_BYTE *)(a2 + 98);
    if (!*(_BYTE *)(a2 + 101))
      goto LABEL_48;
    *(_BYTE *)(a1 + 30) = *(_BYTE *)(a2 + 100);
    if (!*(_BYTE *)(a2 + 103))
      goto LABEL_48;
    *(_BYTE *)(a1 + 31) = *(_BYTE *)(a2 + 102);
    if (!*(_BYTE *)(a2 + 353))
      goto LABEL_48;
    *(_BYTE *)(a1 + 32) = sub_10036C4CC(*(unsigned __int8 *)(a2 + 352), 1);
    if (!*(_BYTE *)(a2 + 355))
      goto LABEL_48;
    if (!sub_10036B59C(*(unsigned __int8 *)(a2 + 354)))
      sub_1003D18F4();
    if (!*(_BYTE *)(a2 + 355))
      goto LABEL_48;
    *(_BYTE *)(a1 + 33) = sub_10036B654(*(unsigned __int8 *)(a2 + 354), 1, v4, v5, v6, v7, v8, v9);
    if (!*(_BYTE *)(a2 + 360))
      goto LABEL_48;
    *(_DWORD *)(a1 + 34) = *(_DWORD *)(a2 + 356);
    if (!*(_BYTE *)(a2 + 365))
      goto LABEL_48;
    *(_BYTE *)(a1 + 45) = *(_BYTE *)(a2 + 364);
    if (!*(_BYTE *)(a2 + 367))
      goto LABEL_48;
    *(_BYTE *)(a1 + 46) = *(_BYTE *)(a2 + 366);
    if (!*(_BYTE *)(a2 + 369))
      goto LABEL_48;
    *(_BYTE *)(a1 + 47) = *(_BYTE *)(a2 + 368);
    if (!*(_BYTE *)(a2 + 372)
      || (*(_WORD *)(a1 + 48) = *(_WORD *)(a2 + 370), !*(_BYTE *)(a2 + 376))
      || (*(_WORD *)(a1 + 50) = *(_WORD *)(a2 + 374), !*(_BYTE *)(a2 + 380))
      || (*(_WORD *)(a1 + 52) = *(_WORD *)(a2 + 378), !*(_BYTE *)(a2 + 392))
      || (*(_WORD *)(a1 + 70) = *(_WORD *)(a2 + 390), !*(_BYTE *)(a2 + 408))
      || (*(_WORD *)(a1 + 72) = *(_QWORD *)(a2 + 400), !*(_BYTE *)(a2 + 424))
      || (*(_WORD *)(a1 + 74) = *(_QWORD *)(a2 + 416), !*(_BYTE *)(a2 + 120))
      || (*(_WORD *)(a1 + 76) = *(_WORD *)(a2 + 118), !*(_BYTE *)(a2 + 388)))
    {
LABEL_48:
      sub_10000BA44();
    }
    v10 = *(_DWORD *)(a2 + 382);
    *(_WORD *)(a1 + 68) = *(_WORD *)(a2 + 386);
    *(_DWORD *)(a1 + 64) = v10;
    v11 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
    {
      v12 = *(unsigned __int8 *)(a1 + 22);
      v13 = *(unsigned __int8 *)(a1 + 29);
      v14 = *(unsigned __int8 *)(a1 + 30);
      v15 = *(unsigned __int8 *)(a1 + 31);
      v16 = *(unsigned __int16 *)(a1 + 76);
      v17 = *(unsigned __int8 *)(a1 + 32);
      v18 = *(unsigned __int8 *)(a1 + 33);
      v19 = *(_DWORD *)(a1 + 34);
      v20 = *(unsigned __int8 *)(a1 + 45);
      v21 = *(unsigned __int8 *)(a1 + 46);
      v22 = *(unsigned __int8 *)(a1 + 47);
      v23 = *(unsigned __int16 *)(a1 + 48);
      v24 = *(unsigned __int16 *)(a1 + 50);
      v25 = *(unsigned __int16 *)(a1 + 52);
      v26 = *(unsigned __int16 *)(a1 + 70);
      v27 = *(unsigned __int16 *)(a1 + 72);
      v28 = *(unsigned __int16 *)(a1 + 74);
      v29 = *(unsigned __int8 *)(a1 + 64);
      v30 = *(unsigned __int8 *)(a1 + 65);
      v31 = *(unsigned __int8 *)(a1 + 66);
      v32 = *(unsigned __int8 *)(a1 + 67);
      v33 = *(unsigned __int8 *)(a1 + 68);
      v34 = *(unsigned __int8 *)(a1 + 69);
      v36[0] = 67114752;
      v36[1] = v12;
      v37 = 1024;
      v38 = v13;
      v39 = 1024;
      v40 = v14;
      v41 = 1024;
      v42 = v15;
      v43 = 1024;
      v44 = v16;
      v45 = 1024;
      v46 = v17;
      v47 = 1024;
      v48 = v18;
      v49 = 1024;
      v50 = v19;
      v51 = 1024;
      v52 = v20;
      v53 = 1024;
      v54 = v21;
      v55 = 1024;
      v56 = v22;
      v57 = 1024;
      v58 = v23;
      v59 = 1024;
      v60 = v24;
      v61 = 1024;
      v62 = v25;
      v63 = 1024;
      v64 = v26;
      v65 = 1024;
      v66 = v27;
      v67 = 1024;
      v68 = v28;
      v69 = 1024;
      v70 = v29;
      v71 = 1024;
      v72 = v30;
      v73 = 1024;
      v74 = v31;
      v75 = 1024;
      v76 = v32;
      v77 = 1024;
      v78 = v33;
      v79 = 1024;
      v80 = v34;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Built FiRa Unicast packet V1: {\n  ses_role: %u\n, tx_ant_mask: %u\n, rx_ant_mask: %u\n, rx_sync_search_ant_mask: %u\n, debug_flags: 0x%x\n, channel: %u\n, preamble: %u\n, uwb_ses_id: 0x%x\n, tx_pulse_shape: %u\n, rx_pulse_shape: %u\n, sfd_id: %u \n, nrstus_per_slot: %u\n, nslots_per_round: %u\n, nrounds_per_block: %u\n, vendor_id: 0x%x\n"
        ", local_addr: 0x%x\n"
        ", peer_addr: 0x%x\n"
        ", static_sts_iv:[%x, %x, %x, %x, %x, %x]}",
        (uint8_t *)v36,
        0x8Cu);
    }
    return 1;
  }
  else
  {
    result = os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR);
    if (result)
    {
      sub_1003D18C8();
      return 0;
    }
  }
  return result;
}

BOOL sub_100176220(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  NSObject *v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  _BOOL8 result;
  _DWORD v37[2];
  __int16 v38;
  int v39;
  __int16 v40;
  int v41;
  __int16 v42;
  int v43;
  __int16 v44;
  int v45;
  __int16 v46;
  int v47;
  __int16 v48;
  int v49;
  __int16 v50;
  int v51;
  __int16 v52;
  int v53;
  __int16 v54;
  int v55;
  __int16 v56;
  int v57;
  __int16 v58;
  int v59;
  __int16 v60;
  int v61;
  __int16 v62;
  int v63;
  __int16 v64;
  int v65;
  __int16 v66;
  int v67;
  __int16 v68;
  int v69;
  __int16 v70;
  int v71;
  __int16 v72;
  int v73;
  __int16 v74;
  int v75;
  __int16 v76;
  int v77;
  __int16 v78;
  int v79;
  __int16 v80;
  int v81;

  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
    sub_1003D191C();
  if (*(_BYTE *)(a2 + 97)
    && *(_BYTE *)(a2 + 99)
    && *(_BYTE *)(a2 + 101)
    && *(_BYTE *)(a2 + 103)
    && *(_BYTE *)(a2 + 120)
    && *(_BYTE *)(a2 + 353)
    && *(_BYTE *)(a2 + 355)
    && *(_BYTE *)(a2 + 360)
    && *(_BYTE *)(a2 + 365)
    && *(_BYTE *)(a2 + 367)
    && *(_BYTE *)(a2 + 369)
    && *(_BYTE *)(a2 + 372)
    && *(_BYTE *)(a2 + 376)
    && *(_BYTE *)(a2 + 380)
    && *(_BYTE *)(a2 + 388)
    && *(_BYTE *)(a2 + 392)
    && *(_BYTE *)(a2 + 408)
    && *(_BYTE *)(a2 + 424))
  {
    *(_WORD *)(a1 + 16) = 16448;
    if (!*(_BYTE *)(a2 + 97))
      goto LABEL_51;
    *(_BYTE *)(a1 + 22) = *(_BYTE *)(a2 + 96);
    if (!*(_BYTE *)(a2 + 99))
      goto LABEL_51;
    *(_BYTE *)(a1 + 29) = *(_BYTE *)(a2 + 98);
    if (!*(_BYTE *)(a2 + 101))
      goto LABEL_51;
    *(_BYTE *)(a1 + 30) = *(_BYTE *)(a2 + 100);
    if (!*(_BYTE *)(a2 + 103))
      goto LABEL_51;
    *(_BYTE *)(a1 + 31) = *(_BYTE *)(a2 + 102);
    if (!*(_BYTE *)(a2 + 355))
      goto LABEL_51;
    if (!sub_10036B59C(*(unsigned __int8 *)(a2 + 354)))
      sub_1003D1948();
    if (!*(_BYTE *)(a2 + 355))
      goto LABEL_51;
    *(_BYTE *)(a1 + 34) = sub_10036B654(*(unsigned __int8 *)(a2 + 354), 2, v4, v5, v6, v7, v8, v9);
    if (!*(_BYTE *)(a2 + 360))
      goto LABEL_51;
    *(_DWORD *)(a1 + 35) = *(_DWORD *)(a2 + 356);
    if (!*(_BYTE *)(a2 + 365))
      goto LABEL_51;
    *(_BYTE *)(a1 + 55) = *(_BYTE *)(a2 + 364);
    if (!*(_BYTE *)(a2 + 367))
      goto LABEL_51;
    *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 366);
    if (!*(_BYTE *)(a2 + 369))
      goto LABEL_51;
    *(_BYTE *)(a1 + 57) = *(_BYTE *)(a2 + 368);
    if (!*(_BYTE *)(a2 + 372))
      goto LABEL_51;
    *(_WORD *)(a1 + 58) = *(_WORD *)(a2 + 370);
    if (!*(_BYTE *)(a2 + 376))
      goto LABEL_51;
    *(_WORD *)(a1 + 60) = *(_WORD *)(a2 + 374);
    if (!*(_BYTE *)(a2 + 380))
      goto LABEL_51;
    *(_WORD *)(a1 + 62) = *(_WORD *)(a2 + 378);
    if (!*(_BYTE *)(a2 + 392))
      goto LABEL_51;
    *(_WORD *)(a1 + 88) = *(_WORD *)(a2 + 390);
    if (!*(_BYTE *)(a2 + 408))
      goto LABEL_51;
    *(_WORD *)(a1 + 90) = *(_QWORD *)(a2 + 400);
    if (!*(_BYTE *)(a2 + 424))
      goto LABEL_51;
    *(_WORD *)(a1 + 92) = *(_QWORD *)(a2 + 416);
    if (!*(_BYTE *)(a2 + 120))
      goto LABEL_51;
    *(_WORD *)(a1 + 94) = *(_WORD *)(a2 + 118);
    if (!*(_BYTE *)(a2 + 353))
      goto LABEL_51;
    v10 = *(unsigned __int8 *)(a2 + 352);
    if (v10 == 5 || v10 == 9)
      *(_WORD *)(a1 + 32) = v10;
    if (!*(_BYTE *)(a2 + 388))
LABEL_51:
      sub_10000BA44();
    v11 = *(_DWORD *)(a2 + 382);
    *(_WORD *)(a1 + 86) = *(_WORD *)(a2 + 386);
    *(_DWORD *)(a1 + 82) = v11;
    v12 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
    {
      v13 = *(unsigned __int8 *)(a1 + 22);
      v14 = *(unsigned __int8 *)(a1 + 29);
      v15 = *(unsigned __int8 *)(a1 + 30);
      v16 = *(unsigned __int8 *)(a1 + 31);
      v17 = *(unsigned __int16 *)(a1 + 94);
      v18 = *(unsigned __int16 *)(a1 + 32);
      v19 = *(unsigned __int8 *)(a1 + 34);
      v20 = *(_DWORD *)(a1 + 35);
      v21 = *(unsigned __int8 *)(a1 + 55);
      v22 = *(unsigned __int8 *)(a1 + 56);
      v23 = *(unsigned __int8 *)(a1 + 57);
      v24 = *(unsigned __int16 *)(a1 + 58);
      v25 = *(unsigned __int16 *)(a1 + 60);
      v26 = *(unsigned __int16 *)(a1 + 62);
      v27 = *(unsigned __int16 *)(a1 + 88);
      v28 = *(unsigned __int16 *)(a1 + 90);
      v29 = *(unsigned __int16 *)(a1 + 92);
      v30 = *(unsigned __int8 *)(a1 + 82);
      v31 = *(unsigned __int8 *)(a1 + 83);
      v32 = *(unsigned __int8 *)(a1 + 84);
      v33 = *(unsigned __int8 *)(a1 + 85);
      v34 = *(unsigned __int8 *)(a1 + 86);
      v35 = *(unsigned __int8 *)(a1 + 87);
      v37[0] = 67114752;
      v37[1] = v13;
      v38 = 1024;
      v39 = v14;
      v40 = 1024;
      v41 = v15;
      v42 = 1024;
      v43 = v16;
      v44 = 1024;
      v45 = v17;
      v46 = 1024;
      v47 = v18;
      v48 = 1024;
      v49 = v19;
      v50 = 1024;
      v51 = v20;
      v52 = 1024;
      v53 = v21;
      v54 = 1024;
      v55 = v22;
      v56 = 1024;
      v57 = v23;
      v58 = 1024;
      v59 = v24;
      v60 = 1024;
      v61 = v25;
      v62 = 1024;
      v63 = v26;
      v64 = 1024;
      v65 = v27;
      v66 = 1024;
      v67 = v28;
      v68 = 1024;
      v69 = v29;
      v70 = 1024;
      v71 = v30;
      v72 = 1024;
      v73 = v31;
      v74 = 1024;
      v75 = v32;
      v76 = 1024;
      v77 = v33;
      v78 = 1024;
      v79 = v34;
      v80 = 1024;
      v81 = v35;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Built FiRa Unicast packet V2: {\n  ses_role: %u\n, tx_ant_mask: %u\n, rx_ant_mask: %u\n, rx_sync_search_ant_mask: %u\n, debug_flags: 0x%x\n, channel: %u\n, preamble: %u\n, uwb_ses_id: 0x%x\n, tx_pulse_shape: %u\n, rx_pulse_shape: %u\n, sfd_id: %u \n, nrstus_per_slot: %u\n, nslots_per_round: %u\n, nrounds_per_block: %u\n, vendor_id: 0x%x\n"
        ", local_addr: 0x%x\n"
        ", peer_addr: 0x%x\n"
        ", static_sts_iv:[%x, %x, %x, %x, %x, %x]\n"
        "}",
        (uint8_t *)v37,
        0x8Cu);
    }
    return 1;
  }
  else
  {
    result = os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR);
    if (result)
    {
      sub_1003D18C8();
      return 0;
    }
  }
  return result;
}

BOOL sub_100176634(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  NSObject *v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  _BOOL8 result;
  _DWORD v39[2];
  __int16 v40;
  int v41;
  __int16 v42;
  int v43;
  __int16 v44;
  int v45;
  __int16 v46;
  int v47;
  __int16 v48;
  int v49;
  __int16 v50;
  int v51;
  __int16 v52;
  int v53;
  __int16 v54;
  int v55;
  __int16 v56;
  int v57;
  __int16 v58;
  int v59;
  __int16 v60;
  int v61;
  __int16 v62;
  int v63;
  __int16 v64;
  int v65;
  __int16 v66;
  int v67;
  __int16 v68;
  int v69;
  __int16 v70;
  int v71;
  __int16 v72;
  int v73;
  __int16 v74;
  uint64_t v75;
  __int16 v76;
  uint64_t v77;
  __int16 v78;
  int v79;
  __int16 v80;
  int v81;
  __int16 v82;
  int v83;
  __int16 v84;
  int v85;
  __int16 v86;
  int v87;
  __int16 v88;
  int v89;

  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
    sub_1003D19C4();
  if (*(_BYTE *)(a2 + 97)
    && *(_BYTE *)(a2 + 99)
    && *(_BYTE *)(a2 + 101)
    && *(_BYTE *)(a2 + 103)
    && *(_BYTE *)(a2 + 120)
    && *(_BYTE *)(a2 + 353)
    && *(_BYTE *)(a2 + 355)
    && *(_BYTE *)(a2 + 360)
    && *(_BYTE *)(a2 + 365)
    && *(_BYTE *)(a2 + 367)
    && *(_BYTE *)(a2 + 369)
    && *(_BYTE *)(a2 + 372)
    && *(_BYTE *)(a2 + 376)
    && *(_BYTE *)(a2 + 380)
    && *(_BYTE *)(a2 + 433)
    && *(_BYTE *)(a2 + 435)
    && *(_BYTE *)(a2 + 437)
    && *(_BYTE *)(a2 + 388)
    && *(_BYTE *)(a2 + 392)
    && *(_BYTE *)(a2 + 408)
    && *(_BYTE *)(a2 + 424))
  {
    *(_WORD *)(a1 + 16) = 16449;
    if (!*(_BYTE *)(a2 + 97))
      goto LABEL_54;
    *(_BYTE *)(a1 + 22) = *(_BYTE *)(a2 + 96);
    if (!*(_BYTE *)(a2 + 99))
      goto LABEL_54;
    *(_BYTE *)(a1 + 29) = *(_BYTE *)(a2 + 98);
    if (!*(_BYTE *)(a2 + 101))
      goto LABEL_54;
    *(_BYTE *)(a1 + 30) = *(_BYTE *)(a2 + 100);
    if (!*(_BYTE *)(a2 + 103))
      goto LABEL_54;
    *(_BYTE *)(a1 + 31) = *(_BYTE *)(a2 + 102);
    if (!*(_BYTE *)(a2 + 353))
      goto LABEL_54;
    *(_BYTE *)(a1 + 32) = sub_10036C4CC(*(unsigned __int8 *)(a2 + 352), 1);
    if (!*(_BYTE *)(a2 + 355))
      goto LABEL_54;
    if (!sub_10036B59C(*(unsigned __int8 *)(a2 + 354)))
      sub_1003D199C();
    if (!*(_BYTE *)(a2 + 355))
      goto LABEL_54;
    *(_BYTE *)(a1 + 33) = sub_10036B654(*(unsigned __int8 *)(a2 + 354), 1, v4, v5, v6, v7, v8, v9);
    if (!*(_BYTE *)(a2 + 360))
      goto LABEL_54;
    *(_DWORD *)(a1 + 34) = *(_DWORD *)(a2 + 356);
    if (!*(_BYTE *)(a2 + 365))
      goto LABEL_54;
    *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 364);
    if (!*(_BYTE *)(a2 + 367))
      goto LABEL_54;
    *(_BYTE *)(a1 + 49) = *(_BYTE *)(a2 + 366);
    if (!*(_BYTE *)(a2 + 369))
      goto LABEL_54;
    *(_BYTE *)(a1 + 50) = *(_BYTE *)(a2 + 368);
    if (!*(_BYTE *)(a2 + 372))
      goto LABEL_54;
    *(_WORD *)(a1 + 51) = *(_WORD *)(a2 + 370);
    if (!*(_BYTE *)(a2 + 376))
      goto LABEL_54;
    *(_WORD *)(a1 + 53) = *(_WORD *)(a2 + 374);
    if (!*(_BYTE *)(a2 + 380))
      goto LABEL_54;
    *(_WORD *)(a1 + 55) = *(_WORD *)(a2 + 378);
    if (!*(_BYTE *)(a2 + 433)
      || (*(_BYTE *)(a1 + 23) = *(_BYTE *)(a2 + 432), !*(_BYTE *)(a2 + 435))
      || (*(_BYTE *)(a1 + 57) = *(_BYTE *)(a2 + 434), !*(_BYTE *)(a2 + 437))
      || (*(_BYTE *)(a1 + 58) = *(_BYTE *)(a2 + 436), !*(_BYTE *)(a2 + 392))
      || (*(_WORD *)(a1 + 75) = *(_WORD *)(a2 + 390), !*(_BYTE *)(a2 + 408))
      || (*(_QWORD *)(a1 + 77) = *(_QWORD *)(a2 + 400), !*(_BYTE *)(a2 + 424))
      || (*(_QWORD *)(a1 + 85) = *(_QWORD *)(a2 + 416), !*(_BYTE *)(a2 + 120))
      || (*(_WORD *)(a1 + 93) = *(_WORD *)(a2 + 118), !*(_BYTE *)(a2 + 388)))
    {
LABEL_54:
      sub_10000BA44();
    }
    v10 = *(_DWORD *)(a2 + 382);
    *(_WORD *)(a1 + 73) = *(_WORD *)(a2 + 386);
    *(_DWORD *)(a1 + 69) = v10;
    v11 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
    {
      v12 = *(unsigned __int8 *)(a1 + 22);
      v13 = *(unsigned __int8 *)(a1 + 29);
      v14 = *(unsigned __int8 *)(a1 + 30);
      v15 = *(unsigned __int8 *)(a1 + 31);
      v16 = *(unsigned __int16 *)(a1 + 93);
      v17 = *(unsigned __int8 *)(a1 + 32);
      v18 = *(unsigned __int8 *)(a1 + 33);
      v19 = *(_DWORD *)(a1 + 34);
      v20 = *(unsigned __int8 *)(a1 + 48);
      v21 = *(unsigned __int8 *)(a1 + 49);
      v22 = *(unsigned __int8 *)(a1 + 50);
      v23 = *(unsigned __int16 *)(a1 + 51);
      v24 = *(unsigned __int16 *)(a1 + 53);
      v25 = *(unsigned __int16 *)(a1 + 55);
      v26 = *(unsigned __int8 *)(a1 + 23);
      v27 = *(unsigned __int8 *)(a1 + 57);
      v28 = *(unsigned __int8 *)(a1 + 58);
      v29 = *(unsigned __int16 *)(a1 + 75);
      v30 = *(_QWORD *)(a1 + 77);
      v31 = *(_QWORD *)(a1 + 85);
      v32 = *(unsigned __int8 *)(a1 + 69);
      v33 = *(unsigned __int8 *)(a1 + 70);
      v34 = *(unsigned __int8 *)(a1 + 71);
      v35 = *(unsigned __int8 *)(a1 + 72);
      v36 = *(unsigned __int8 *)(a1 + 73);
      v37 = *(unsigned __int8 *)(a1 + 74);
      v39[0] = 67115520;
      v39[1] = v12;
      v40 = 1024;
      v41 = v13;
      v42 = 1024;
      v43 = v14;
      v44 = 1024;
      v45 = v15;
      v46 = 1024;
      v47 = v16;
      v48 = 1024;
      v49 = v17;
      v50 = 1024;
      v51 = v18;
      v52 = 1024;
      v53 = v19;
      v54 = 1024;
      v55 = v20;
      v56 = 1024;
      v57 = v21;
      v58 = 1024;
      v59 = v22;
      v60 = 1024;
      v61 = v23;
      v62 = 1024;
      v63 = v24;
      v64 = 1024;
      v65 = v25;
      v66 = 1024;
      v67 = v26;
      v68 = 1024;
      v69 = v27;
      v70 = 1024;
      v71 = v28;
      v72 = 1024;
      v73 = v29;
      v74 = 2048;
      v75 = v30;
      v76 = 2048;
      v77 = v31;
      v78 = 1024;
      v79 = v32;
      v80 = 1024;
      v81 = v33;
      v82 = 1024;
      v83 = v34;
      v84 = 1024;
      v85 = v35;
      v86 = 1024;
      v87 = v36;
      v88 = 1024;
      v89 = v37;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Built FiRa Contention Based packet V1: {\n  ses_role: %u\n, tx_ant_mask: %u\n, rx_ant_mask: %u\n, rx_sync_search_ant_mask: %u\n, debug_flags: 0x%x\n, channel: %u\n, preamble: %u\n, uwb_ses_id: 0x%x\n, tx_pulse_shape: %u\n, rx_pulse_shape: %u\n, sfd_id: %u \n, nrstus_per_slot: %u\n, nslots_per_round: %u\n, nrounds_per_block: %u\n, ranging_type: %u\n"
        ", cap_size_min: %u\n"
        ", cap_size_max: %u\n"
        ", vendor_id: 0x%x\n"
        ", local_addr: 0x%llx\n"
        ", peer_addr: 0x%llx\n"
        ", static_sts_iv:[%x, %x, %x, %x, %x, %x]}",
        (uint8_t *)v39,
        0xA6u);
    }
    return 1;
  }
  else
  {
    result = os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR);
    if (result)
    {
      sub_1003D1970();
      return 0;
    }
  }
  return result;
}

BOOL sub_100176ABC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  NSObject *v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  _BOOL8 result;
  _DWORD v40[2];
  __int16 v41;
  int v42;
  __int16 v43;
  int v44;
  __int16 v45;
  int v46;
  __int16 v47;
  int v48;
  __int16 v49;
  int v50;
  __int16 v51;
  int v52;
  __int16 v53;
  int v54;
  __int16 v55;
  int v56;
  __int16 v57;
  int v58;
  __int16 v59;
  int v60;
  __int16 v61;
  int v62;
  __int16 v63;
  int v64;
  __int16 v65;
  int v66;
  __int16 v67;
  int v68;
  __int16 v69;
  int v70;
  __int16 v71;
  int v72;
  __int16 v73;
  int v74;
  __int16 v75;
  uint64_t v76;
  __int16 v77;
  uint64_t v78;
  __int16 v79;
  int v80;
  __int16 v81;
  int v82;
  __int16 v83;
  int v84;
  __int16 v85;
  int v86;
  __int16 v87;
  int v88;
  __int16 v89;
  int v90;

  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
    sub_1003D19C4();
  if (*(_BYTE *)(a2 + 97)
    && *(_BYTE *)(a2 + 99)
    && *(_BYTE *)(a2 + 101)
    && *(_BYTE *)(a2 + 103)
    && *(_BYTE *)(a2 + 120)
    && *(_BYTE *)(a2 + 353)
    && *(_BYTE *)(a2 + 355)
    && *(_BYTE *)(a2 + 360)
    && *(_BYTE *)(a2 + 365)
    && *(_BYTE *)(a2 + 367)
    && *(_BYTE *)(a2 + 369)
    && *(_BYTE *)(a2 + 372)
    && *(_BYTE *)(a2 + 376)
    && *(_BYTE *)(a2 + 380)
    && *(_BYTE *)(a2 + 433)
    && *(_BYTE *)(a2 + 435)
    && *(_BYTE *)(a2 + 437)
    && *(_BYTE *)(a2 + 388)
    && *(_BYTE *)(a2 + 392)
    && *(_BYTE *)(a2 + 408)
    && *(_BYTE *)(a2 + 424))
  {
    *(_WORD *)(a1 + 16) = 16449;
    if (!*(_BYTE *)(a2 + 97))
      goto LABEL_57;
    *(_BYTE *)(a1 + 22) = *(_BYTE *)(a2 + 96);
    if (!*(_BYTE *)(a2 + 99))
      goto LABEL_57;
    *(_BYTE *)(a1 + 29) = *(_BYTE *)(a2 + 98);
    if (!*(_BYTE *)(a2 + 101))
      goto LABEL_57;
    *(_BYTE *)(a1 + 30) = *(_BYTE *)(a2 + 100);
    if (!*(_BYTE *)(a2 + 103))
      goto LABEL_57;
    *(_BYTE *)(a1 + 31) = *(_BYTE *)(a2 + 102);
    if (!*(_BYTE *)(a2 + 355))
      goto LABEL_57;
    if (!sub_10036B59C(*(unsigned __int8 *)(a2 + 354)))
      sub_1003D1A1C();
    if (!*(_BYTE *)(a2 + 355))
      goto LABEL_57;
    *(_BYTE *)(a1 + 34) = sub_10036B654(*(unsigned __int8 *)(a2 + 354), 2, v4, v5, v6, v7, v8, v9);
    if (!*(_BYTE *)(a2 + 360))
      goto LABEL_57;
    *(_DWORD *)(a1 + 35) = *(_DWORD *)(a2 + 356);
    if (!*(_BYTE *)(a2 + 365))
      goto LABEL_57;
    *(_BYTE *)(a1 + 49) = *(_BYTE *)(a2 + 364);
    if (!*(_BYTE *)(a2 + 367))
      goto LABEL_57;
    *(_BYTE *)(a1 + 50) = *(_BYTE *)(a2 + 366);
    if (!*(_BYTE *)(a2 + 369))
      goto LABEL_57;
    *(_BYTE *)(a1 + 51) = *(_BYTE *)(a2 + 368);
    if (!*(_BYTE *)(a2 + 372))
      goto LABEL_57;
    *(_WORD *)(a1 + 52) = *(_WORD *)(a2 + 370);
    if (!*(_BYTE *)(a2 + 376))
      goto LABEL_57;
    *(_WORD *)(a1 + 54) = *(_WORD *)(a2 + 374);
    if (!*(_BYTE *)(a2 + 380))
      goto LABEL_57;
    *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 378);
    if (!*(_BYTE *)(a2 + 433))
      goto LABEL_57;
    *(_BYTE *)(a1 + 23) = *(_BYTE *)(a2 + 432);
    if (!*(_BYTE *)(a2 + 435))
      goto LABEL_57;
    *(_BYTE *)(a1 + 58) = *(_BYTE *)(a2 + 434);
    if (!*(_BYTE *)(a2 + 437))
      goto LABEL_57;
    *(_BYTE *)(a1 + 59) = *(_BYTE *)(a2 + 436);
    if (!*(_BYTE *)(a2 + 392))
      goto LABEL_57;
    *(_WORD *)(a1 + 76) = *(_WORD *)(a2 + 390);
    if (!*(_BYTE *)(a2 + 408))
      goto LABEL_57;
    *(_QWORD *)(a1 + 78) = *(_QWORD *)(a2 + 400);
    if (!*(_BYTE *)(a2 + 424))
      goto LABEL_57;
    *(_QWORD *)(a1 + 86) = *(_QWORD *)(a2 + 416);
    if (!*(_BYTE *)(a2 + 120))
      goto LABEL_57;
    *(_WORD *)(a1 + 94) = *(_WORD *)(a2 + 118);
    if (!*(_BYTE *)(a2 + 353))
      goto LABEL_57;
    v10 = *(unsigned __int8 *)(a2 + 352);
    if (v10 == 5 || v10 == 9)
      *(_WORD *)(a1 + 32) = v10;
    if (!*(_BYTE *)(a2 + 388))
LABEL_57:
      sub_10000BA44();
    v11 = *(_DWORD *)(a2 + 382);
    *(_WORD *)(a1 + 74) = *(_WORD *)(a2 + 386);
    *(_DWORD *)(a1 + 70) = v11;
    v12 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
    {
      v13 = *(unsigned __int8 *)(a1 + 22);
      v14 = *(unsigned __int8 *)(a1 + 29);
      v15 = *(unsigned __int8 *)(a1 + 30);
      v16 = *(unsigned __int8 *)(a1 + 31);
      v17 = *(unsigned __int16 *)(a1 + 94);
      v18 = *(unsigned __int16 *)(a1 + 32);
      v19 = *(unsigned __int8 *)(a1 + 34);
      v20 = *(_DWORD *)(a1 + 35);
      v21 = *(unsigned __int8 *)(a1 + 49);
      v22 = *(unsigned __int8 *)(a1 + 50);
      v23 = *(unsigned __int8 *)(a1 + 51);
      v24 = *(unsigned __int16 *)(a1 + 52);
      v25 = *(unsigned __int16 *)(a1 + 54);
      v26 = *(unsigned __int16 *)(a1 + 56);
      v27 = *(unsigned __int8 *)(a1 + 23);
      v28 = *(unsigned __int8 *)(a1 + 58);
      v29 = *(unsigned __int8 *)(a1 + 59);
      v30 = *(unsigned __int16 *)(a1 + 76);
      v31 = *(_QWORD *)(a1 + 78);
      v32 = *(_QWORD *)(a1 + 86);
      v33 = *(unsigned __int8 *)(a1 + 70);
      v34 = *(unsigned __int8 *)(a1 + 71);
      v35 = *(unsigned __int8 *)(a1 + 72);
      v36 = *(unsigned __int8 *)(a1 + 73);
      v37 = *(unsigned __int8 *)(a1 + 74);
      v38 = *(unsigned __int8 *)(a1 + 75);
      v40[0] = 67115520;
      v40[1] = v13;
      v41 = 1024;
      v42 = v14;
      v43 = 1024;
      v44 = v15;
      v45 = 1024;
      v46 = v16;
      v47 = 1024;
      v48 = v17;
      v49 = 1024;
      v50 = v18;
      v51 = 1024;
      v52 = v19;
      v53 = 1024;
      v54 = v20;
      v55 = 1024;
      v56 = v21;
      v57 = 1024;
      v58 = v22;
      v59 = 1024;
      v60 = v23;
      v61 = 1024;
      v62 = v24;
      v63 = 1024;
      v64 = v25;
      v65 = 1024;
      v66 = v26;
      v67 = 1024;
      v68 = v27;
      v69 = 1024;
      v70 = v28;
      v71 = 1024;
      v72 = v29;
      v73 = 1024;
      v74 = v30;
      v75 = 2048;
      v76 = v31;
      v77 = 2048;
      v78 = v32;
      v79 = 1024;
      v80 = v33;
      v81 = 1024;
      v82 = v34;
      v83 = 1024;
      v84 = v35;
      v85 = 1024;
      v86 = v36;
      v87 = 1024;
      v88 = v37;
      v89 = 1024;
      v90 = v38;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Built FiRa Contention Based packet V2: {\n  ses_role: %u\n, tx_ant_mask: %u\n, rx_ant_mask: %u\n, rx_sync_search_ant_mask: %u\n, debug_flags: 0x%x\n, channel: %u\n, preamble: %u\n, uwb_ses_id: 0x%x\n, tx_pulse_shape: %u\n, rx_pulse_shape: %u\n, sfd_id: %u \n, nrstus_per_slot: %u\n, nslots_per_round: %u\n, nrounds_per_block: %u\n, ranging_type: %u\n"
        ", cap_size_min: %u\n"
        ", cap_size_max: %u\n"
        ", vendor_id: 0x%x\n"
        ", local_addr: 0x%llx\n"
        ", peer_addr: 0x%llx\n"
        ", static_sts_iv:[%x, %x, %x, %x, %x, %x]\n"
        "}",
        (uint8_t *)v40,
        0xA6u);
    }
    return 1;
  }
  else
  {
    result = os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR);
    if (result)
    {
      sub_1003D19F0();
      return 0;
    }
  }
  return result;
}

BOOL sub_100176F4C(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  _BOOL8 result;
  _DWORD v25[2];
  __int16 v26;
  int v27;
  __int16 v28;
  int v29;
  __int16 v30;
  int v31;
  __int16 v32;
  int v33;
  __int16 v34;
  int v35;
  __int16 v36;
  int v37;
  __int16 v38;
  int v39;
  __int16 v40;
  int v41;
  __int16 v42;
  int v43;
  __int16 v44;
  int v45;
  __int16 v46;
  int v47;
  __int16 v48;
  int v49;
  __int16 v50;
  int v51;
  __int16 v52;
  int v53;
  __int16 v54;
  int v55;
  __int16 v56;
  int v57;
  __int16 v58;
  int v59;
  __int16 v60;
  uint64_t v61;

  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
    sub_1003D1A70();
  if (*(_BYTE *)(a2 + 97)
    && *(_BYTE *)(a2 + 441)
    && *(_BYTE *)(a2 + 443)
    && *(_BYTE *)(a2 + 446)
    && *(_BYTE *)(a2 + 450)
    && *(_BYTE *)(a2 + 99)
    && *(_BYTE *)(a2 + 101)
    && *(_BYTE *)(a2 + 103)
    && *(_BYTE *)(a2 + 163)
    && *(_BYTE *)(a2 + 165)
    && *(_BYTE *)(a2 + 167)
    && *(_BYTE *)(a2 + 456)
    && *(_BYTE *)(a2 + 471)
    && *(_BYTE *)(a2 + 466)
    && *(_BYTE *)(a2 + 453)
    && *(_BYTE *)(a2 + 469)
    && *(_BYTE *)(a2 + 120)
    && *(_BYTE *)(a2 + 174)
    && *(_BYTE *)(a2 + 184))
  {
    *(_WORD *)(a1 + 16) = 16480;
    if (!*(_BYTE *)(a2 + 97))
      goto LABEL_47;
    *(_BYTE *)(a1 + 22) = *(_BYTE *)(a2 + 96);
    if (!*(_BYTE *)(a2 + 441))
      goto LABEL_47;
    *(_BYTE *)(a1 + 23) = *(_BYTE *)(a2 + 440);
    if (!*(_BYTE *)(a2 + 443))
      goto LABEL_47;
    *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 442);
    if (!*(_BYTE *)(a2 + 446))
      goto LABEL_47;
    *(_WORD *)(a1 + 25) = *(_WORD *)(a2 + 444);
    if (!*(_BYTE *)(a2 + 450))
      goto LABEL_47;
    *(_WORD *)(a1 + 27) = *(_WORD *)(a2 + 448);
    if (!*(_BYTE *)(a2 + 99))
      goto LABEL_47;
    *(_BYTE *)(a1 + 41) = *(_BYTE *)(a2 + 98);
    if (!*(_BYTE *)(a2 + 101))
      goto LABEL_47;
    *(_BYTE *)(a1 + 42) = *(_BYTE *)(a2 + 100);
    if (!*(_BYTE *)(a2 + 103))
      goto LABEL_47;
    *(_BYTE *)(a1 + 43) = *(_BYTE *)(a2 + 102);
    if (!*(_BYTE *)(a2 + 163))
      goto LABEL_47;
    *(_BYTE *)(a1 + 49) = *(_BYTE *)(a2 + 162);
    if (!*(_BYTE *)(a2 + 165))
      goto LABEL_47;
    *(_BYTE *)(a1 + 50) = *(_BYTE *)(a2 + 164);
    if (!*(_BYTE *)(a2 + 167))
      goto LABEL_47;
    *(_BYTE *)(a1 + 51) = *(_BYTE *)(a2 + 166);
    if (!*(_BYTE *)(a2 + 456)
      || (*(_WORD *)(a1 + 44) = *(_WORD *)(a2 + 454), !*(_BYTE *)(a2 + 471))
      || (*(_BYTE *)(a1 + 46) = *(_BYTE *)(a2 + 470), !*(_BYTE *)(a2 + 466))
      || (*(_WORD *)(a1 + 47) = *(_WORD *)(a2 + 464), !*(_BYTE *)(a2 + 453))
      || (*(_BYTE *)(a1 + 60) = *(_BYTE *)(a2 + 452), !*(_BYTE *)(a2 + 469))
      || (*(_BYTE *)(a1 + 61) = *(_BYTE *)(a2 + 468), !*(_BYTE *)(a2 + 120))
      || (*(_WORD *)(a1 + 78) = *(_WORD *)(a2 + 118), !*(_BYTE *)(a2 + 174))
      || (*(_WORD *)(a1 + 92) = *(_WORD *)(a2 + 172), !*(_BYTE *)(a2 + 184)))
    {
LABEL_47:
      sub_10000BA44();
    }
    *(_QWORD *)(a1 + 94) = *(_QWORD *)(a2 + 176);
    v4 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
    {
      v5 = *(unsigned __int8 *)(a1 + 22);
      v6 = *(unsigned __int8 *)(a1 + 23);
      v7 = *(unsigned __int8 *)(a1 + 24);
      v8 = *(unsigned __int16 *)(a1 + 25);
      v9 = *(unsigned __int16 *)(a1 + 27);
      v10 = *(unsigned __int8 *)(a1 + 41);
      v11 = *(unsigned __int8 *)(a1 + 42);
      v12 = *(unsigned __int8 *)(a1 + 43);
      v13 = *(unsigned __int8 *)(a1 + 49);
      v14 = *(unsigned __int8 *)(a1 + 50);
      v15 = *(unsigned __int8 *)(a1 + 51);
      v16 = *(unsigned __int16 *)(a1 + 44);
      v17 = *(unsigned __int8 *)(a1 + 46);
      v18 = *(unsigned __int16 *)(a1 + 47);
      v19 = *(unsigned __int8 *)(a1 + 60);
      v20 = *(unsigned __int8 *)(a1 + 61);
      v21 = *(unsigned __int16 *)(a1 + 78);
      v22 = *(unsigned __int16 *)(a1 + 92);
      v23 = *(_QWORD *)(a1 + 94);
      v25[0] = 67113728;
      v25[1] = v5;
      v26 = 1024;
      v27 = v6;
      v28 = 1024;
      v29 = v7;
      v30 = 1024;
      v31 = v8;
      v32 = 1024;
      v33 = v9;
      v34 = 1024;
      v35 = v10;
      v36 = 1024;
      v37 = v11;
      v38 = 1024;
      v39 = v12;
      v40 = 1024;
      v41 = v13;
      v42 = 1024;
      v43 = v14;
      v44 = 1024;
      v45 = v15;
      v46 = 1024;
      v47 = v16;
      v48 = 1024;
      v49 = v17;
      v50 = 1024;
      v51 = v18;
      v52 = 1024;
      v53 = v19;
      v54 = 1024;
      v55 = v20;
      v56 = 1024;
      v57 = v21;
      v58 = 1024;
      v59 = v22;
      v60 = 2048;
      v61 = v23;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Built Test NMI packet: {\n, ses_role: %u\n, nb_tx_ant_mask: %u\n, nb_rx_ant_mask: %u\n, nb_pkt_type: %u\n, nb_band_channel: %u\n, mms_tx_ant_mask: %u\n, mms_rx_ant_mask: %u\n, mms_sync_search_ant_mask: %u\n, mms_tx_ant_mask2: %u\n, mms_rx_ant_mask2: %u\n, mms_sync_search_ant_mask2: %u\n, mms_packet_type: %u\n, mms_num_fragments: %u\n, mms_band_channel: %u\n, nb_slot_size: %u\n"
        ", mms_slot_size: %u\n"
        ", debug_flags: 0x%x\n"
        ", interval_ms: %u\n"
        ", mac_addr: %llu",
        (uint8_t *)v25,
        0x78u);
    }
    return 1;
  }
  else
  {
    result = os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR);
    if (result)
    {
      sub_1003D1A44();
      return 0;
    }
  }
  return result;
}

BOOL sub_1001772FC(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  _BOOL8 result;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  uint64_t v35;
  int v36;
  uint8_t buf[4];
  int v38;
  __int16 v39;
  int v40;
  __int16 v41;
  int v42;
  __int16 v43;
  int v44;
  __int16 v45;
  int v46;
  __int16 v47;
  int v48;
  __int16 v49;
  int v50;
  __int16 v51;
  int v52;
  __int16 v53;
  int v54;
  __int16 v55;
  int v56;
  __int16 v57;
  int v58;
  __int16 v59;
  int v60;
  __int16 v61;
  int v62;
  __int16 v63;
  int v64;
  __int16 v65;
  int v66;
  __int16 v67;
  int v68;
  __int16 v69;
  int v70;
  __int16 v71;
  int v72;
  __int16 v73;
  int v74;
  __int16 v75;
  int v76;
  __int16 v77;
  int v78;
  __int16 v79;
  int v80;
  __int16 v81;
  int v82;
  __int16 v83;
  int v84;
  __int16 v85;
  int v86;
  __int16 v87;
  uint64_t v88;
  __int16 v89;
  int v90;
  __int16 v91;
  void *v92;

  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
    sub_1003D1AC8();
  if (*(_BYTE *)(a2 + 97)
    && *(_BYTE *)(a2 + 441)
    && *(_BYTE *)(a2 + 443)
    && *(_BYTE *)(a2 + 446)
    && *(_BYTE *)(a2 + 450)
    && *(_BYTE *)(a2 + 99)
    && *(_BYTE *)(a2 + 101)
    && *(_BYTE *)(a2 + 103)
    && *(_BYTE *)(a2 + 163)
    && *(_BYTE *)(a2 + 165)
    && *(_BYTE *)(a2 + 167)
    && *(_BYTE *)(a2 + 497)
    && *(_BYTE *)(a2 + 456)
    && *(_BYTE *)(a2 + 459)
    && *(_BYTE *)(a2 + 461)
    && *(_BYTE *)(a2 + 463)
    && *(_BYTE *)(a2 + 471)
    && *(_BYTE *)(a2 + 466)
    && *(_BYTE *)(a2 + 453)
    && *(_BYTE *)(a2 + 469)
    && *(_BYTE *)(a2 + 120)
    && *(_BYTE *)(a2 + 174)
    && *(_BYTE *)(a2 + 474)
    && *(_BYTE *)(a2 + 477)
    && *(_BYTE *)(a2 + 479)
    && *(_BYTE *)(a2 + 499)
    && *(_BYTE *)(a2 + 184))
  {
    *(_WORD *)(a1 + 16) = 16481;
    if (!*(_BYTE *)(a2 + 97))
      sub_10000BA44();
    *(_BYTE *)(a1 + 22) = *(_BYTE *)(a2 + 96);
    if (!*(_BYTE *)(a2 + 441))
      sub_10000BA44();
    *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 440);
    if (!*(_BYTE *)(a2 + 443))
      sub_10000BA44();
    *(_BYTE *)(a1 + 34) = *(_BYTE *)(a2 + 442);
    if (!*(_BYTE *)(a2 + 446))
      sub_10000BA44();
    *(_WORD *)(a1 + 35) = *(_WORD *)(a2 + 444);
    if (!*(_BYTE *)(a2 + 450))
      sub_10000BA44();
    *(_WORD *)(a1 + 23) = *(_WORD *)(a2 + 448);
    if (!*(_BYTE *)(a2 + 99))
      sub_10000BA44();
    *(_BYTE *)(a1 + 47) = *(_BYTE *)(a2 + 98);
    if (!*(_BYTE *)(a2 + 101))
      sub_10000BA44();
    *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 100);
    if (!*(_BYTE *)(a2 + 103))
      sub_10000BA44();
    *(_BYTE *)(a1 + 49) = *(_BYTE *)(a2 + 102);
    if (!*(_BYTE *)(a2 + 456))
      sub_10000BA44();
    *(_WORD *)(a1 + 50) = *(_WORD *)(a2 + 454);
    if (!*(_BYTE *)(a2 + 459))
      sub_10000BA44();
    *(_BYTE *)(a1 + 59) = *(_BYTE *)(a2 + 458) - 1;
    if (!*(_BYTE *)(a2 + 461))
      sub_10000BA44();
    *(_BYTE *)(a1 + 60) = *(_BYTE *)(a2 + 460);
    if (!*(_BYTE *)(a2 + 463))
      sub_10000BA44();
    *(_BYTE *)(a1 + 61) = *(_BYTE *)(a2 + 462);
    if (!*(_BYTE *)(a2 + 471))
      sub_10000BA44();
    *(_BYTE *)(a1 + 52) = *(_BYTE *)(a2 + 470);
    if (!*(_BYTE *)(a2 + 466))
      sub_10000BA44();
    *(_WORD *)(a1 + 53) = *(_WORD *)(a2 + 464);
    if (!*(_BYTE *)(a2 + 453))
      sub_10000BA44();
    *(_BYTE *)(a1 + 65) = *(_BYTE *)(a2 + 452);
    if (!*(_BYTE *)(a2 + 469))
      sub_10000BA44();
    *(_BYTE *)(a1 + 67) = *(_BYTE *)(a2 + 468);
    if (!*(_BYTE *)(a2 + 120))
      sub_10000BA44();
    *(_WORD *)(a1 + 76) = *(_WORD *)(a2 + 118);
    if (!*(_BYTE *)(a2 + 174))
      sub_10000BA44();
    *(_WORD *)(a1 + 90) = *(_WORD *)(a2 + 172);
    if (!*(_BYTE *)(a2 + 474))
      sub_10000BA44();
    *(_WORD *)(a1 + 37) = *(_WORD *)(a2 + 472);
    if (!*(_BYTE *)(a2 + 477))
      sub_10000BA44();
    *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 476);
    if (!*(_BYTE *)(a2 + 479))
      sub_10000BA44();
    *(_BYTE *)(a1 + 66) = *(_BYTE *)(a2 + 478);
    if (!*(_BYTE *)(a2 + 184))
      sub_10000BA44();
    *(_QWORD *)(a1 + 92) = *(_QWORD *)(a2 + 176);
    *(_OWORD *)(a1 + 100) = *(_OWORD *)(a2 + 480);
    if (!*(_BYTE *)(a2 + 497))
      sub_10000BA44();
    *(_BYTE *)(a1 + 58) = *(_BYTE *)(a2 + 496);
    if (!*(_BYTE *)(a2 + 163))
      sub_10000BA44();
    *(_BYTE *)(a1 + 55) = *(_BYTE *)(a2 + 162);
    if (!*(_BYTE *)(a2 + 165))
      sub_10000BA44();
    *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 164);
    if (!*(_BYTE *)(a2 + 167))
      sub_10000BA44();
    *(_BYTE *)(a1 + 57) = *(_BYTE *)(a2 + 166);
    if (!*(_BYTE *)(a2 + 499))
      sub_10000BA44();
    *(_BYTE *)(a1 + 75) = *(_BYTE *)(a2 + 498);
    v4 = (id)qword_10085F520;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      v5 = *(unsigned __int8 *)(a1 + 22);
      v6 = *(unsigned __int8 *)(a1 + 33);
      v7 = *(unsigned __int8 *)(a1 + 34);
      v8 = *(unsigned __int16 *)(a1 + 35);
      v9 = *(unsigned __int16 *)(a1 + 23);
      v10 = *(unsigned __int8 *)(a1 + 47);
      v11 = *(unsigned __int8 *)(a1 + 48);
      v17 = *(unsigned __int8 *)(a1 + 49);
      v18 = *(unsigned __int8 *)(a1 + 55);
      v19 = *(unsigned __int8 *)(a1 + 56);
      v20 = *(unsigned __int8 *)(a1 + 57);
      v21 = *(unsigned __int8 *)(a1 + 58);
      v22 = *(unsigned __int16 *)(a1 + 50);
      v23 = *(unsigned __int8 *)(a1 + 59);
      v24 = *(unsigned __int8 *)(a1 + 60);
      v25 = *(unsigned __int8 *)(a1 + 61);
      v26 = *(unsigned __int8 *)(a1 + 52);
      v27 = *(unsigned __int16 *)(a1 + 53);
      v28 = *(unsigned __int8 *)(a1 + 65);
      v29 = *(unsigned __int8 *)(a1 + 67);
      v30 = *(unsigned __int16 *)(a1 + 76);
      v31 = *(unsigned __int16 *)(a1 + 90);
      v32 = *(unsigned __int16 *)(a1 + 37);
      v33 = *(unsigned __int8 *)(a1 + 64);
      v34 = *(unsigned __int8 *)(a1 + 66);
      v35 = *(_QWORD *)(a1 + 92);
      v36 = *(unsigned __int8 *)(a1 + 75);
      v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", a1 + 100, 16));
      v14 = CUPrintNSObjectMasked(v12, v13);
      v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
      *(_DWORD *)buf = 67116034;
      v38 = v5;
      v39 = 1024;
      v40 = v6;
      v41 = 1024;
      v42 = v7;
      v43 = 1024;
      v44 = v8;
      v45 = 1024;
      v46 = v9;
      v47 = 1024;
      v48 = v10;
      v49 = 1024;
      v50 = v11;
      v51 = 1024;
      v52 = v17;
      v53 = 1024;
      v54 = v18;
      v55 = 1024;
      v56 = v19;
      v57 = 1024;
      v58 = v20;
      v59 = 1024;
      v60 = v21;
      v61 = 1024;
      v62 = v22;
      v63 = 1024;
      v64 = v23;
      v65 = 1024;
      v66 = v24;
      v67 = 1024;
      v68 = v25;
      v69 = 1024;
      v70 = v26;
      v71 = 1024;
      v72 = v27;
      v73 = 1024;
      v74 = v28;
      v75 = 1024;
      v76 = v29;
      v77 = 1024;
      v78 = v30;
      v79 = 1024;
      v80 = v31;
      v81 = 1024;
      v82 = v32;
      v83 = 1024;
      v84 = v33;
      v85 = 1024;
      v86 = v34;
      v87 = 2048;
      v88 = v35;
      v89 = 1024;
      v90 = v36;
      v91 = 2112;
      v92 = v15;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Built NMI packet: {\n, ses_role: %u\n, nb_tx_ant_mask: %u\n, nb_rx_ant_mask: %u\n, nb_pkt_type: %u\n, nap_band_channel: %u\n, mms_tx_ant_mask: %u\n, mms_rx_ant_mask: %u\n, mms_sync_search_ant_mask: %u\n, mms_tx_ant_mask2: %u\n, mms_rx_ant_mask2: %u\n, mms_sync_search_ant_mask2: %u\n, mms_ant_diversity_pattern: %u\n, mms_packet_type: %u\n, mms_psr_minus_one: %u\n, mms_gap: %u\n"
        ", mms_seq_idex: %u\n"
        ", mms_num_fragments: %u\n"
        ", mms_band_channel: %u\n"
        ", nb_slot_size: %u\n"
        ", mms_slot_size: %u\n"
        ", debug_flags: 0x%x\n"
        ", interval_ms: %u\n"
        ", nb_ch_sel_mask: %u\n"
        ", nap_slot_size: %u\n"
        ", data_slot_size: %u\n"
        ", mac_addr: %llu\n"
        ", misc_setting: %hu\n"
        ", irk: %@\n"
        "}",
        buf,
        0xB2u);

    }
    return 1;
  }
  else
  {
    result = os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR);
    if (result)
    {
      sub_1003D1A9C();
      return 0;
    }
  }
  return result;
}

void sub_100177980(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

BOOL sub_1001779A4(char *a1, uint64_t a2)
{
  char v2;
  _BOOL8 result;
  char v4;
  char v5;
  int v6;
  std::runtime_error *exception;

  switch(*(_DWORD *)(a2 + 4))
  {
    case 0:
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "PRRoseProvider::populateRangingTriggerConfig got Unspecified mac mode");
    case 1:
      v2 = *(_BYTE *)(a2 + 1) != 0;
      goto LABEL_3;
    case 2:
    case 3:
    case 5:
    case 6:
      goto LABEL_2;
    case 4:
      if (*(_BYTE *)(a2 + 280))
      {
        a1[3] = *(_BYTE *)(a2 + 241);
        v6 = *(unsigned __int8 *)(a2 + 240);
        a1[1] = v6;
        a1[2] = *(_BYTE *)(a2 + 242);
        if (v6)
          v2 = 5;
        else
          v2 = 4;
        goto LABEL_3;
      }
      result = os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_FAULT);
      if (!result)
        return result;
      sub_1003D1AF4();
      return 0;
    case 7:
      if (*(_BYTE *)(a2 + 290))
      {
        if (*(_BYTE *)(a2 + 288))
          sub_1003D1B4C();
LABEL_2:
        v2 = 4;
LABEL_3:
        *a1 = v2;
        return 1;
      }
      result = os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_FAULT);
      if (!result)
        return result;
      sub_1003D1B20();
      return 0;
    case 8:
      if (*(_BYTE *)(a2 + 290))
      {
        v4 = *(_BYTE *)(a2 + 288);
        if (v4)
          v5 = 5;
        else
          v5 = 4;
        *a1 = v5;
        a1[1] = v4;
        a1[2] = *(_BYTE *)(a2 + 289);
        return 1;
      }
      else
      {
        result = os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_FAULT);
        if (result)
        {
          sub_1003D1B74();
          return 0;
        }
      }
      return result;
    default:
      return 0;
  }
}

void sub_100177B18(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

BOOL sub_100177B2C(_BYTE *a1, uint64_t a2)
{
  _BOOL8 result;

  switch(*(_DWORD *)(a2 + 60))
  {
    case 0:
      result = os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR);
      if (result)
      {
        sub_1003D1BA0();
        return 0;
      }
      return result;
    case 1:
      *a1 = 0;
      return 1;
    case 2:
      result = 1;
      *a1 = 1;
      return result;
    case 3:
      *a1 = 2;
      return 1;
    default:
      return 1;
  }
}

uint64_t sub_100177BB8(int a1)
{
  return a1 | 0x10000u;
}

void sub_100177BC0(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int v7;
  unsigned __int8 v8;
  unsigned int v9;
  unsigned int v10;
  unsigned __int8 v11;
  unsigned int v12;
  uint64_t v13;
  unint64_t v14;
  _BOOL4 v15;
  unint64_t v16;
  unint64_t v18;
  int v19;
  int v20;
  float v21;
  char v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  int v26;
  unsigned int v27;
  unsigned __int16 v28;
  unint64_t v29;
  NSObject *v30;
  const char *v31;
  unint64_t v32;
  int v33;
  int v34;
  NSObject *log;
  unint64_t v36;
  __int16 v37;
  int v38;
  int v39;
  int v40;
  unsigned int v41;
  unsigned __int8 v42;
  unsigned __int8 v43;
  unint64_t v44;
  unsigned int v45;
  unsigned int v46;
  uint8_t buf[4];
  int v48;
  __int16 v49;
  const char *v50;
  __int16 v51;
  unint64_t v52;
  __int16 v53;
  int v54;
  __int16 v55;
  int v56;
  __int16 v57;
  unsigned int v58;
  __int16 v59;
  int v60;
  __int16 v61;
  int v62;
  __int16 v63;
  int v64;
  __int16 v65;
  int v66;
  __int16 v67;
  unsigned int v68;
  __int16 v69;
  int v70;
  __int16 v71;
  unint64_t v72;
  __int16 v73;
  int v74;

  v7 = *(unsigned __int8 *)(a3 + 56);
  if (*(_BYTE *)(a3 + 87))
    v8 = *(_BYTE *)(a3 + 86);
  else
    v8 = 0;
  v9 = *(_DWORD *)(a3 + 60);
  v10 = *(_DWORD *)(a3 + 64);
  if (*(_BYTE *)(a3 + 81))
    v11 = *(_BYTE *)(a3 + 80);
  else
    v11 = 0;
  v12 = v7 - 1;
  if ((v7 - 1) >= 2)
  {
    if (v7 == 3)
    {
      v14 = *(_QWORD *)(a3 + 48);
      v18 = HIDWORD(v14);
      v16 = v14 & 0xFFFF000000000000;
      v19 = 1;
    }
    else
    {
      v19 = 0;
      LODWORD(v14) = 0;
      LOWORD(v18) = 0;
      v16 = 0;
    }
    LODWORD(v13) = 0;
    v15 = *(_BYTE *)(a3 + 76) != 0;
  }
  else
  {
    v13 = *(_QWORD *)(a3 + 48);
    LODWORD(v14) = v13;
    v15 = *(_BYTE *)(a3 + 76) != 0;
    v16 = 0;
    if (v7 == 2 && *(_BYTE *)(a3 + 76) != 0)
    {
      v19 = 0;
      LODWORD(v18) = *(_DWORD *)(a3 + 72);
      v20 = 1;
      if (!v10)
        goto LABEL_33;
      goto LABEL_23;
    }
    LOWORD(v18) = 0;
    v19 = 0;
    if (v7 == 2)
    {
LABEL_26:
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_FAULT))
        sub_1003D1BCC();
      goto LABEL_28;
    }
  }
  if (v15)
    goto LABEL_26;
  v20 = 0;
  if (!v10)
  {
LABEL_33:
    LOWORD(v23) = 0;
    v45 = 0;
    LOWORD(v46) = 0;
    goto LABEL_34;
  }
LABEL_23:
  v21 = *(float *)(a3 + 68);
  if (v21 > 1.0)
  {
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_FAULT))
      sub_1003D1C7C();
    goto LABEL_28;
  }
  v9 = (float)(v21 * (float)v10);
  if (!*(_BYTE *)(a3 + 92))
    goto LABEL_33;
  LOWORD(v23) = 0;
  if (*(_BYTE *)(a3 + 100) && *(_BYTE *)(a3 + 108))
  {
    v23 = *(_DWORD *)(a3 + 88) / 0x3E8u;
    v24 = *(_DWORD *)(a3 + 96);
    v46 = v24 / 0x3E8;
    v45 = (float)(*(float *)(a3 + 104) * (float)v24);
  }
  else
  {
    v45 = 0;
    LOWORD(v46) = 0;
  }
LABEL_34:
  v25 = *(_DWORD *)(a2 + 4);
  if (v25 == 8)
  {
    if (!*(_BYTE *)(a3 + 40) || !*(_BYTE *)(a3 + 36))
    {
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_FAULT))
        sub_1003D1C50();
      goto LABEL_28;
    }
    v38 = v20;
    v39 = v19;
    v41 = v9;
    v42 = v11;
    v43 = v8;
    v44 = *(unsigned __int16 *)(a3 + 30) | ((unint64_t)*(unsigned int *)(a3 + 32) << 16);
    v40 = a1;
    if (!*(_BYTE *)(a3 + 84))
      goto LABEL_51;
    v36 = v16;
    v37 = v18;
    log = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEFAULT, "updating acquisition band & channel in trigger command", buf, 2u);
    }
    if (!*(_BYTE *)(a3 + 84))
      sub_10000BA44();
    v26 = *(unsigned __int16 *)(a3 + 82);
    v25 = *(_DWORD *)(a2 + 4);
    v11 = v42;
    v8 = v43;
    v9 = v41;
    v16 = v36;
    LOWORD(v18) = v37;
    v20 = v38;
    v19 = v39;
  }
  else
  {
    if (v25 == 2)
    {
      if (*(_BYTE *)(a3 + 40) && *(_BYTE *)(a3 + 29))
      {
        v38 = v20;
        v39 = v19;
        v41 = v9;
        v42 = v11;
        v43 = v8;
        v40 = a1;
        v44 = *(_QWORD *)(a3 + 21);
LABEL_51:
        v26 = 0xFFFF;
        goto LABEL_53;
      }
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_FAULT))
        sub_1003D1C24();
LABEL_28:
      v22 = 0;
      *(_BYTE *)a4 = 0;
      goto LABEL_71;
    }
    v40 = a1;
    v44 = 0;
    v26 = 0xFFFF;
  }
  if (v25 != 4 || !*(_BYTE *)(a3 + 40))
  {
    v38 = v20;
    v39 = v19;
    v41 = v9;
    v42 = v11;
    v43 = v8;
    goto LABEL_53;
  }
  if (!*(_BYTE *)(a3 + 36))
  {
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_FAULT))
      sub_1003D1BF8();
    goto LABEL_28;
  }
  v38 = v20;
  v39 = v19;
  v41 = v9;
  v42 = v11;
  v43 = v8;
  v44 = *(unsigned __int16 *)(a3 + 30) | ((unint64_t)*(unsigned int *)(a3 + 32) << 16);
LABEL_53:
  v27 = v10 / 0x3E8;
  v28 = v18;
  v29 = v14 | v16 | ((unint64_t)(unsigned __int16)v18 << 32);
  v30 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    if (v12 > 2)
      v31 = "Ignored";
    else
      v31 = (&off_100809A18)[(char)v12];
    if (v39)
      v32 = v29;
    else
      v32 = 0;
    *(_DWORD *)buf = 67112450;
    v33 = v28;
    v48 = v40;
    if (!v38)
      v33 = 0;
    v49 = 2080;
    v50 = v31;
    v51 = 2048;
    v52 = v32;
    v53 = 1024;
    if (v26 == 0xFFFF)
      v34 = -1;
    else
      v34 = v26;
    v54 = v13;
    v55 = 1024;
    v56 = v33;
    v57 = 1024;
    v58 = v41;
    v59 = 1024;
    v60 = v43;
    v61 = 1024;
    v62 = (unsigned __int16)v27;
    v63 = 1024;
    v64 = v42;
    v65 = 1024;
    v66 = (unsigned __int16)v23;
    v67 = 1024;
    v68 = v45;
    v69 = 1024;
    v70 = (unsigned __int16)v46;
    v71 = 2048;
    v72 = v44;
    v73 = 1024;
    v74 = v34;
    _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "Built clientStartService packet: {\n  tkt: %d\n, start_time_type: %s\n, start_time_absolute_us: %llu\n, start_time_offset_us: %d\n, bt_conn_interval_ms: %d\n, start_time_uncert_us: %d\n, cross_session_offset_ms: %d\n, scheduling_interval_ms: %d\n, dither_const_ms: %d\n, secondary_scheduling_delay_ms: %d\n, secondary_start_time_uncert_us: %d\n, secondary_scheduling_interval_ms: %d\n, addr: 0x%llx\n, nb_band_ch: %d }", buf,
      0x62u);
  }
  *(_WORD *)a4 = v40;
  *(_BYTE *)(a4 + 2) = v7;
  *(_QWORD *)(a4 + 3) = v29;
  *(_DWORD *)(a4 + 11) = v41;
  *(_BYTE *)(a4 + 15) = v43;
  *(_WORD *)(a4 + 16) = v27;
  *(_BYTE *)(a4 + 18) = v42;
  *(_WORD *)(a4 + 19) = v23;
  *(_DWORD *)(a4 + 21) = v45;
  *(_WORD *)(a4 + 25) = v46;
  *(_QWORD *)(a4 + 27) = v44;
  v22 = 1;
  *(_WORD *)(a4 + 35) = v26;
LABEL_71:
  *(_BYTE *)(a4 + 37) = v22;
}

void sub_100178170(unsigned __int8 **a1@<X0>, uint64_t a2@<X8>)
{
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  unsigned int v8;
  NSObject *v9;
  unint64_t v10;
  unsigned int v11;
  char v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  NSObject *v15;
  unsigned int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  uint8_t v21[20];
  uint8_t buf[4];
  unsigned int v23;
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;
  __int16 v28;
  int v29;
  __int16 v30;
  int v31;

  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
    sub_1003D1CA8();
  *(_WORD *)(a2 + 16) = 16420;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKey:", CFSTR("LPEMModeOverride")));
  if (v6 && (v7 = objc_opt_class(NSNumber, v5), (objc_opt_isKindOfClass(v6, v7) & 1) != 0))
  {
    v8 = objc_msgSend(v6, "unsignedShortValue");
    v9 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      v23 = v8;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "LPEM mode override: %d", buf, 8u);
    }
  }
  else
  {
    LOWORD(v8) = 0;
  }
  *(_WORD *)(a2 + 20) = v8;
  v10 = a1[1] - *a1;
  if (v10 <= 1)
  {
    if (v10 == 1)
    {
      if (**a1 == 5)
        v11 = 1;
      else
        v11 = 2;
    }
    else
    {
      v11 = 2;
    }
  }
  else
  {
    v11 = 0;
  }
  sub_1001649CC(v11, (uint64_t)v21);
  *(_BYTE *)(a2 + 22) = sub_10016CC68((uint64_t)v21);
  *(_BYTE *)(a2 + 23) = sub_10016CC70((uint64_t)v21);
  v12 = sub_10016CC78((uint64_t)v21);
  *(_BYTE *)(a2 + 25) = 0;
  *(_BYTE *)(a2 + 24) = v12;
  v14 = *a1;
  v13 = a1[1];
  while (v14 != v13)
    sub_10036C2F0((_BYTE *)(a2 + 25), *v14++);
  v15 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    v16 = *(unsigned __int16 *)(a2 + 20);
    v17 = *(unsigned __int8 *)(a2 + 22);
    v18 = *(unsigned __int8 *)(a2 + 23);
    v19 = *(unsigned __int8 *)(a2 + 24);
    v20 = *(unsigned __int8 *)(a2 + 25);
    *(_DWORD *)buf = 67110144;
    v23 = v16;
    v24 = 1024;
    v25 = v17;
    v26 = 1024;
    v27 = v18;
    v28 = 1024;
    v29 = v19;
    v30 = 1024;
    v31 = v20;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Built LPEM enable packet: {\n  mode: %d\n, tx_ant_mask: %d\n, rx_ant_mask: %d\n, rx_sync_search_ant_mask: %d\n, rf_channel_bitmask: %d\n}", buf, 0x20u);
  }

}

void sub_1001783C0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t sub_1001783F0(unsigned int a1, unsigned int a2, uint64_t a3)
{
  NSObject *v6;
  const char *v7;
  const char *v8;
  NSObject *v10;
  NSObject *v11;
  NSObject *v12;
  _BYTE v13[10];
  uint8_t buf[4];
  const char *v15;
  __int16 v16;
  _BYTE v17[18];

  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
    sub_1003D1D58();
  if (!a1)
  {
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_FAULT))
      sub_1003D1CD4();
    v10 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      v15 = "/Library/Caches/com.apple.xbs/Sources/Proximity/Libraries/DaemonCore/Ranging/Providers/Rose/PRRoseSupervisor"
            "PacketBuilder.mm";
      v16 = 1024;
      *(_DWORD *)v17 = 511;
      *(_WORD *)&v17[4] = 2080;
      *(_QWORD *)&v17[6] = "convertTime";
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "%s:%d: assertion failure in %s", buf, 0x1Cu);
    }
    abort();
  }
  if (!a2)
  {
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_FAULT))
      sub_1003D1D00();
    v11 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      v15 = "/Library/Caches/com.apple.xbs/Sources/Proximity/Libraries/DaemonCore/Ranging/Providers/Rose/PRRoseSupervisor"
            "PacketBuilder.mm";
      v16 = 1024;
      *(_DWORD *)v17 = 512;
      *(_WORD *)&v17[4] = 2080;
      *(_QWORD *)&v17[6] = "convertTime";
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "%s:%d: assertion failure in %s", buf, 0x1Cu);
    }
    abort();
  }
  if (a1 == a2)
  {
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_FAULT))
      sub_1003D1D2C();
    v12 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      v15 = "/Library/Caches/com.apple.xbs/Sources/Proximity/Libraries/DaemonCore/Ranging/Providers/Rose/PRRoseSupervisor"
            "PacketBuilder.mm";
      v16 = 1024;
      *(_DWORD *)v17 = 513;
      *(_WORD *)&v17[4] = 2080;
      *(_QWORD *)&v17[6] = "convertTime";
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "%s:%d: assertion failure in %s", buf, 0x1Cu);
    }
    abort();
  }
  v13[0] = a1;
  v13[1] = a2;
  *(_QWORD *)&v13[2] = a3;
  v6 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    if (a1 > 3)
      v7 = "Unspecified";
    else
      v7 = (&off_100809A30)[(char)(a1 - 1)];
    if (a2 > 3)
      v8 = "Unspecified";
    else
      v8 = (&off_100809A30)[(char)(a2 - 1)];
    *(_DWORD *)buf = 136315650;
    v15 = v7;
    v16 = 2080;
    *(_QWORD *)v17 = v8;
    *(_WORD *)&v17[8] = 2048;
    *(_QWORD *)&v17[10] = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Built convert time command packet: {\n, timebaseFrom: %s\n, timebaseTo: %s\n, timeToConvertUsec: %llu\n}", buf, 0x20u);
  }
  return *(_QWORD *)v13;
}

uint64_t sub_100178714(uint64_t a1)
{
  unsigned int v2;
  NSObject *v3;
  const char *v4;
  NSObject *v6;
  int v7;
  const char *v8;
  __int16 v9;
  int v10;
  __int16 v11;
  const char *v12;

  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
    sub_1003D1DB0();
  v2 = a1 - 1;
  v3 = qword_10085F520;
  if ((a1 - 1) > 2)
  {
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_FAULT))
      sub_1003D1D84();
    v6 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_INFO))
    {
      v7 = 136315650;
      v8 = "/Library/Caches/com.apple.xbs/Sources/Proximity/Libraries/DaemonCore/Ranging/Providers/Rose/PRRoseSupervisorPacketBuilder.mm";
      v9 = 1024;
      v10 = 543;
      v11 = 2080;
      v12 = "deepSleepRequest";
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "%s:%d: assertion failure in %s", (uint8_t *)&v7, 0x1Cu);
    }
    abort();
  }
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    if (v2 > 2)
      v4 = "";
    else
      v4 = (&off_100809A48)[(char)v2];
    v7 = 136315138;
    v8 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Built deep sleep request packet: {\n, request: %s\n}", (uint8_t *)&v7, 0xCu);
  }
  return a1;
}

void sub_1001788A0(void *a1, int a2, os_log_t log, const char *a4, uint8_t *a5)
{
  _os_log_fault_impl(a1, log, OS_LOG_TYPE_FAULT, a4, a5, 8u);
}

id sub_1001788B0()
{
  if (qword_100856F80 != -1)
    dispatch_once(&qword_100856F80, &stru_100809A60);
  return (id)qword_100856F78;
}

void sub_1001788F0(id a1)
{
  id v1;
  uint64_t v2;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  id v17;

  v1 = sub_100178A58((uint64_t)&OBJC_PROTOCOL___PRRangingServerProtocol);
  v2 = objc_claimAutoreleasedReturnValue(v1);
  v3 = (void *)qword_100856F78;
  qword_100856F78 = v2;

  v4 = objc_alloc((Class)NSSet);
  v6 = objc_opt_class(PRRemoteDevice, v5);
  v17 = objc_msgSend(v4, "initWithObjects:", v6, objc_opt_class(NSData, v7), 0);
  v8 = objc_alloc((Class)NSSet);
  v10 = objc_opt_class(NSDictionary, v9);
  v12 = objc_opt_class(NSArray, v11);
  v14 = objc_opt_class(NSNumber, v13);
  v16 = objc_msgSend(v8, "initWithObjects:", v10, v12, v14, objc_opt_class(NSString, v15), 0);
  objc_msgSend((id)qword_100856F78, "setClasses:forSelector:argumentIndex:ofReply:", v17, "configureForP2PRanging:options:reply:", 0, 0);
  objc_msgSend((id)qword_100856F78, "setClasses:forSelector:argumentIndex:ofReply:", v16, "configureForP2PRanging:options:reply:", 1, 0);
  objc_msgSend((id)qword_100856F78, "setClasses:forSelector:argumentIndex:ofReply:", v17, "startP2PRanging:reply:", 0, 0);
  objc_msgSend((id)qword_100856F78, "setClasses:forSelector:argumentIndex:ofReply:", v17, "stopP2PRanging:reply:", 0, 0);

}

id sub_100178A58(uint64_t a1)
{
  void *v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSXPCInterface interfaceWithProtocol:](NSXPCInterface, "interfaceWithProtocol:", a1));
  v2 = objc_alloc((Class)NSSet);
  v4 = objc_opt_class(NSDictionary, v3);
  v6 = objc_opt_class(NSNumber, v5);
  v8 = objc_msgSend(v2, "initWithObjects:", v4, v6, objc_opt_class(NSString, v7), 0);
  objc_msgSend(v1, "setClasses:forSelector:argumentIndex:ofReply:", v8, "connectWithClientInfo:", 0, 0);

  return v1;
}

id sub_100178B10()
{
  return sub_100178B1C((uint64_t)&OBJC_PROTOCOL___PRRangingClientProtocol);
}

id sub_100178B1C(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSSet *v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSXPCInterface interfaceWithProtocol:](NSXPCInterface, "interfaceWithProtocol:", a1));
  v3 = objc_opt_class(NSArray, v2);
  v5 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v3, objc_opt_class(PRRoseSolution, v4), 0);
  v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  v7 = objc_alloc((Class)NSSet);
  v9 = objc_opt_class(PRRemoteDevice, v8);
  v11 = objc_msgSend(v7, "initWithObjects:", v9, objc_opt_class(NSData, v10), 0);
  objc_msgSend(v1, "setClasses:forSelector:argumentIndex:ofReply:", v6, "didReceiveNewSolutions:", 0, 0);
  objc_msgSend(v1, "setClass:forSelector:argumentIndex:ofReply:", objc_opt_class(NSError, v12), "didFailWithError:", 0, 0);
  objc_msgSend(v1, "setClasses:forSelector:argumentIndex:ofReply:", v11, "remoteDevice:didChangeState:", 0, 0);

  return v1;
}

id sub_100178C40()
{
  void *v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  id v13;
  uint64_t v14;
  id v15;
  uint64_t v16;

  v0 = (void *)objc_claimAutoreleasedReturnValue(+[NSXPCInterface interfaceWithProtocol:](NSXPCInterface, "interfaceWithProtocol:", &OBJC_PROTOCOL___PRBTRangingClientProtocol));
  v1 = objc_alloc((Class)NSSet);
  v3 = objc_opt_class(NSNumber, v2);
  v5 = objc_opt_class(NSUUID, v4);
  v7 = objc_msgSend(v1, "initWithObjects:", v3, v5, objc_opt_class(NSError, v6), 0);
  v8 = objc_alloc((Class)NSSet);
  v10 = objc_opt_class(NSUUID, v9);
  v12 = objc_msgSend(v8, "initWithObjects:", v10, objc_opt_class(NSError, v11), 0);
  v13 = objc_alloc((Class)NSSet);
  v15 = objc_msgSend(v13, "initWithObjects:", objc_opt_class(PRBTRSSI, v14), 0);
  objc_msgSend(v0, "setClass:forSelector:argumentIndex:ofReply:", objc_opt_class(NSError, v16), "didFailWithError:", 0, 0);
  objc_msgSend(v0, "setClasses:forSelector:argumentIndex:ofReply:", v7, "didFetchTxPower:fromDevice:withError:", 0, 0);
  objc_msgSend(v0, "setClasses:forSelector:argumentIndex:ofReply:", v12, "didConnectDevice:error:", 0, 0);
  objc_msgSend(v0, "setClasses:forSelector:argumentIndex:ofReply:", v12, "didStartRangingOnDevice:withError:", 0, 0);
  objc_msgSend(v0, "setClasses:forSelector:argumentIndex:ofReply:", v12, "didStopOwnerRangingOnDevice:withError:", 0, 0);
  objc_msgSend(v0, "setClasses:forSelector:argumentIndex:ofReply:", v15, "didReceiveNewBTRSSI:", 0, 0);

  return v0;
}

id sub_100178E08()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSSet *v13;
  void *v14;

  v0 = (void *)objc_claimAutoreleasedReturnValue(+[NSXPCInterface interfaceWithProtocol:](NSXPCInterface, "interfaceWithProtocol:", &OBJC_PROTOCOL___PRDiagnosticsServerProtocol));
  objc_msgSend(v0, "setClass:forSelector:argumentIndex:ofReply:", objc_opt_class(PRHelloResponse, v1), "sendHelloSync:reply:", 0, 1);
  objc_msgSend(v0, "setClass:forSelector:argumentIndex:ofReply:", objc_opt_class(PRChipInfo, v2), "getChipInfo:", 0, 1);
  objc_msgSend(v0, "setClass:forSelector:argumentIndex:ofReply:", objc_opt_class(PRGetPowerStatsResponse, v3), "getPowerStatsSync:reply:", 0, 1);
  v5 = objc_opt_class(NSDictionary, v4);
  v7 = objc_opt_class(NSData, v6);
  v9 = objc_opt_class(NSString, v8);
  v11 = objc_opt_class(NSArray, v10);
  v13 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v5, v7, v9, v11, objc_opt_class(NSNumber, v12), 0);
  v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
  objc_msgSend(v0, "setClasses:forSelector:argumentIndex:ofReply:", v14, "getPreflightInfo:", 0, 1);
  objc_msgSend(v0, "setClasses:forSelector:argumentIndex:ofReply:", v14, "getChipPublicKey:", 0, 1);
  objc_msgSend(v0, "setClasses:forSelector:argumentIndex:ofReply:", v14, "setRoseGlobalConfigParams:reply:", 0, 0);

  return v0;
}

id sub_100178F9C()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;

  v0 = (void *)objc_claimAutoreleasedReturnValue(+[NSXPCInterface interfaceWithProtocol:](NSXPCInterface, "interfaceWithProtocol:", &OBJC_PROTOCOL___PRProtobufServerProtocol));
  objc_msgSend(v0, "setClass:forSelector:argumentIndex:ofReply:", objc_opt_class(NSUUID, v1), "startStreamingProtobufDataForClientId:reply:", 0, 0);
  objc_msgSend(v0, "setClass:forSelector:argumentIndex:ofReply:", objc_opt_class(NSUUID, v2), "stopStreamingProtobufDataForClientId:reply:", 0, 0);
  return v0;
}

id sub_100179020()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;

  v0 = (void *)objc_claimAutoreleasedReturnValue(+[NSXPCInterface interfaceWithProtocol:](NSXPCInterface, "interfaceWithProtocol:", &OBJC_PROTOCOL___PRProtobufClientProtocol));
  objc_msgSend(v0, "setClass:forSelector:argumentIndex:ofReply:", objc_opt_class(NSData, v1), "consumeProtobufBytes:", 0, 0);
  objc_msgSend(v0, "setClass:forSelector:argumentIndex:ofReply:", objc_opt_class(NSUUID, v2), "getUniqueClientIdentifier:", 0, 1);
  return v0;
}

id sub_1001790A8()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;

  v0 = (void *)objc_claimAutoreleasedReturnValue(+[NSXPCInterface interfaceWithProtocol:](NSXPCInterface, "interfaceWithProtocol:", &OBJC_PROTOCOL___PRRegulatoryAssistanceEndpointProtocol));
  objc_msgSend(v0, "setClass:forSelector:argumentIndex:ofReply:", objc_opt_class(NSString, v1), "injectIsoCode:", 0, 0);
  objc_msgSend(v0, "setClass:forSelector:argumentIndex:ofReply:", objc_opt_class(NSError, v2), "prepareForRegulatoryAssistance:", 0, 1);
  return v0;
}

id sub_100179130()
{
  id v0;
  void *v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;

  v0 = sub_100178A58((uint64_t)&OBJC_PROTOCOL___PRCompanionRangingServerProtocol);
  v1 = (void *)objc_claimAutoreleasedReturnValue(v0);
  v2 = objc_alloc((Class)NSSet);
  v4 = objc_opt_class(PRRemoteDevice, v3);
  v6 = objc_msgSend(v2, "initWithObjects:", v4, objc_opt_class(NSData, v5), 0);
  v7 = objc_alloc((Class)NSSet);
  v9 = objc_opt_class(NSDictionary, v8);
  v11 = objc_opt_class(NSArray, v10);
  v13 = objc_opt_class(NSNumber, v12);
  v15 = objc_msgSend(v7, "initWithObjects:", v9, v11, v13, objc_opt_class(NSString, v14), 0);
  objc_msgSend(v1, "setClasses:forSelector:argumentIndex:ofReply:", v6, "configureForCompanionRanging:options:reply:", 0, 0);
  objc_msgSend(v1, "setClasses:forSelector:argumentIndex:ofReply:", v15, "configureForCompanionRanging:options:reply:", 1, 0);
  objc_msgSend(v1, "setClasses:forSelector:argumentIndex:ofReply:", v6, "startCompanionRanging:options:reply:", 0, 0);
  objc_msgSend(v1, "setClasses:forSelector:argumentIndex:ofReply:", v15, "startCompanionRanging:options:reply:", 1, 0);
  objc_msgSend(v1, "setClasses:forSelector:argumentIndex:ofReply:", v6, "stopCompanionRanging:reply:", 0, 0);

  return v1;
}

id sub_1001792AC()
{
  void *v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;

  v0 = (void *)objc_claimAutoreleasedReturnValue(+[NSXPCInterface interfaceWithProtocol:](NSXPCInterface, "interfaceWithProtocol:", &OBJC_PROTOCOL___PRBTRangingServerProtocol));
  v1 = objc_alloc((Class)NSSet);
  v3 = objc_opt_class(NSUUID, v2);
  v5 = objc_msgSend(v1, "initWithObjects:", v3, objc_opt_class(NSData, v4), 0);
  v6 = objc_alloc((Class)NSSet);
  v8 = objc_opt_class(NSUUID, v7);
  v10 = objc_opt_class(NSNumber, v9);
  v12 = objc_msgSend(v6, "initWithObjects:", v8, v10, objc_opt_class(NSData, v11), 0);
  objc_msgSend(v0, "setClasses:forSelector:argumentIndex:ofReply:", v12, "fetchTxPower:isUT:reply:", 0, 0);
  objc_msgSend(v0, "setClasses:forSelector:argumentIndex:ofReply:", v5, "startUTRanging:reply:", 0, 0);
  objc_msgSend(v0, "setClasses:forSelector:argumentIndex:ofReply:", v5, "stopUTRanging:reply:", 0, 0);
  objc_msgSend(v0, "setClasses:forSelector:argumentIndex:ofReply:", v5, "startOwnerRanging:reply:", 0, 0);
  objc_msgSend(v0, "setClasses:forSelector:argumentIndex:ofReply:", v5, "stopOwnerRanging:reply:", 0, 0);

  return v0;
}

id sub_100179418()
{
  id v0;
  void *v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSSet *v14;
  void *v15;

  v0 = sub_100178A58((uint64_t)&OBJC_PROTOCOL___PRBeaconRangingProtocol);
  v1 = (void *)objc_claimAutoreleasedReturnValue(v0);
  v2 = objc_alloc((Class)NSSet);
  v4 = objc_opt_class(NSDictionary, v3);
  v6 = objc_opt_class(NSString, v5);
  v8 = objc_opt_class(NSNumber, v7);
  v10 = objc_msgSend(v2, "initWithObjects:", v4, v6, v8, objc_opt_class(NSArray, v9), 0);
  objc_msgSend(v1, "setClasses:forSelector:argumentIndex:ofReply:", v10, "startBeaconing:options:reply:", 1, 0);
  v12 = objc_opt_class(NSArray, v11);
  v14 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v12, objc_opt_class(PRRemoteDevice, v13), 0);
  v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
  objc_msgSend(v1, "setClasses:forSelector:argumentIndex:ofReply:", v15, "pushBeaconAllowlist:reply:", 0, 0);

  return v1;
}

uint64_t sub_100179A8C(uint64_t a1, void *a2)
{
  id v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD v7[3];
  _QWORD *v8;

  v3 = a2;
  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 4) = 0;
  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = a1 + 16;
  *(_QWORD *)(a1 + 24) = a1 + 16;
  *(_QWORD *)(a1 + 32) = 0;
  sub_10000BF04((_QWORD *)(a1 + 40), "prglobaltile.bin");
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  v7[0] = off_100809A90;
  v7[1] = a1;
  v8 = v7;
  sub_1001FCC38(a1 + 88, v3, v7);
  v4 = v8;
  if (v8 == v7)
  {
    v5 = 4;
    v4 = v7;
    goto LABEL_5;
  }
  if (v8)
  {
    v5 = 5;
LABEL_5:
    (*(void (**)(void))(*v4 + 8 * v5))();
  }

  return a1;
}

void sub_100179B84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  void *v13;
  uint64_t v14;
  _QWORD *v15;
  void **v16;
  void **v17;
  char *v19;
  uint64_t v20;

  v19 = a13;
  if (a13 == &a10)
  {
    v20 = 4;
    v19 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v20 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
LABEL_6:
  if (*(char *)(v14 + 87) < 0)
    operator delete(*v17);
  if (*(char *)(v14 + 63) < 0)
    operator delete(*v16);
  sub_100179F40(v15);

  _Unwind_Resume(a1);
}

_QWORD *sub_100179C00(uint64_t a1)
{
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
    sub_1003D1DDC();
  *(_BYTE *)a1 = 0;
  return sub_100179F40((_QWORD *)(a1 + 16));
}

uint64_t sub_100179C50(uint64_t a1, double a2, long double a3)
{
  char *v5;
  char **v6;
  char *v7;
  BOOL v8;
  NSObject *v9;
  _BOOL4 v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  FILE *v14;
  FILE *v15;
  char v16;
  int v17;
  double v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  NSObject *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *__p[2];
  char v32;
  __int16 v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  __int16 v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  char v42;
  char v43;

  v33 = 0;
  v39 = 0;
  v40 = 0;
  v38 = 0;
  v35 = 0;
  v36 = 0;
  v34 = 0;
  v37 = 0;
  v41 = xmmword_10046C230;
  v5 = (char *)(a1 + 87);
  v6 = (char **)(a1 + 64);
  v7 = (char *)(a1 + 64);
  if (*(char *)(a1 + 87) < 0)
    v7 = *v6;
  sub_10000BF04(__p, v7);
  v8 = sub_10029172C((const char *)__p);
  if (v32 < 0)
    operator delete(__p[0]);
  v9 = qword_10085F520;
  v10 = os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG);
  if (!v8)
  {
    if (v10)
      sub_1003D22A4(v9, v11, v12);
    goto LABEL_29;
  }
  if (v10)
    sub_1003D222C(v5, v6, v9);
  v13 = (const char *)v6;
  if (*v5 < 0)
    v13 = *v6;
  v14 = fopen(v13, "rb");
  v15 = v14;
  if (!v14)
  {
    v22 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
      sub_1003D20F8(v5, v6, v22);
    goto LABEL_29;
  }
  sub_1001FD8C0(v14, (uint64_t)&v33);
  if ((v16 & 1) == 0 || (v17 = v42, (double)v42 > a2) || (double)v43 <= a2)
  {
LABEL_28:
    fclose(v15);
LABEL_29:
    v21 = 0;
    goto LABEL_30;
  }
  v18 = fmod(a3, 360.0);
  if (v18 < 0.0)
    v18 = v18 + 360.0;
  v19 = vcvtmd_s64_f64(v18 * 10.0);
  v20 = ((int)(v19 + 3600 * ((int)(floor(a2 * 10.0) + 900.0) - 10 * v17 - 900)) / 8);
  LOBYTE(__p[0]) = 0;
  if (v20 >= DWORD2(v41))
  {
    v23 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
      sub_1003D21C8(v20, v23, v24, v25, v26, v27, v28, v29);
    goto LABEL_28;
  }
  fseek(v15, (int)v20, 1);
  if (fread(__p, 1uLL, 1uLL, v15) != 1)
  {
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
      sub_1003D219C();
    goto LABEL_28;
  }
  fclose(v15);
  v21 = (LOBYTE(__p[0]) >> (v19 & 7)) & 1;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
    sub_1003D2170();
LABEL_30:
  if (SHIBYTE(v40) < 0)
    operator delete(v38);
  if (SHIBYTE(v36) < 0)
    operator delete(v34);
  return v21;
}

void sub_100179F08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  sub_10013EC8C((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_100179F38(uint64_t a1)
{
  sub_1001FCC3C((NSObject **)(a1 + 88));
}

_QWORD *sub_100179F40(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  if (result[2])
  {
    v1 = result;
    result = (_QWORD *)result[1];
    v2 = *v1;
    v3 = *result;
    *(_QWORD *)(v3 + 8) = *(_QWORD *)(*v1 + 8);
    **(_QWORD **)(v2 + 8) = v3;
    v1[2] = 0;
    if (result != v1)
    {
      do
      {
        v4 = (_QWORD *)result[1];
        operator delete(result);
        result = v4;
      }
      while (v4 != v1);
    }
  }
  return result;
}

void sub_100179FA4()
{
  operator delete();
}

_QWORD *sub_100179FB8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_100809A90;
  result[1] = v3;
  return result;
}

uint64_t sub_100179FEC(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_100809A90;
  a2[1] = v2;
  return result;
}

_QWORD *sub_10017A008(uint64_t a1)
{
  return sub_100179C00(*(_QWORD *)(a1 + 8));
}

uint64_t sub_10017A010(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10017A04C()
{
}

void sub_10017A058(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 8u);
}

void sub_10017A068(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, a5, 0xCu);
}

void sub_10017A074(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_list va;

  va_start(va, a4);
  _os_log_debug_impl(a1, log, OS_LOG_TYPE_DEBUG, a4, (uint8_t *)va, 0x16u);
}

_QWORD *sub_10017A0A0@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, off_100809CF8[a1]);
}

_QWORD *sub_10017A0B4@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, off_100809D50[a1]);
}

_QWORD *sub_10017A0C8@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, off_100809D98[a1]);
}

_QWORD *sub_10017A0DC@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, off_100809DB8[a1]);
}

void sub_10017A188(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_10017A1E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_10017A410(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  void *v14;
  id *v15;
  void *v16;
  void *v17;
  void *v18;

  v18 = v17;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);

  _Unwind_Resume(a1);
}

void sub_10017A44C(uint64_t a1, void *a2)
{
  id *v2;
  id v3;
  id WeakRetained;

  v2 = (id *)(a1 + 32);
  v3 = a2;
  WeakRetained = objc_loadWeakRetained(v2);
  objc_msgSend(WeakRetained, "didDiscoverSample:", v3);

}

void sub_10017A494(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_10017A59C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_10017A634(uint64_t a1)
{
  id v1;
  void *v2;

  v1 = objc_msgSend(objc_alloc(*(Class *)(a1 + 32)), "_initPrivate");
  v2 = (void *)qword_100856F88;
  qword_100856F88 = (uint64_t)v1;

}

void sub_10017A6A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_10017A954(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, os_unfair_lock_t lock, void *a10)
{
  void *v10;

  os_unfair_lock_unlock(lock);
  _Unwind_Resume(a1);
}

id sub_10017A994(uint64_t a1)
{
  id result;

  result = objc_msgSend(*(id *)(a1 + 32), "isInteresetedInSample:", *(_QWORD *)(a1 + 40));
  if ((_DWORD)result)
    return objc_msgSend(*(id *)(a1 + 32), "consumeBluetoothSample:", *(_QWORD *)(a1 + 40));
  return result;
}

void sub_10017AA1C(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;
  void *v2;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_10017AB74(_Unwind_Exception *a1)
{
  void *v1;
  os_unfair_lock_s *v2;

  os_unfair_lock_unlock(v2);

  _Unwind_Resume(a1);
}

void sub_10017ACC4(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;
  id *v2;
  uint64_t v3;
  id *v4;

  v4 = v2;
  objc_destroyWeak(v4);
  objc_destroyWeak((id *)(v3 - 40));
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_10017ACFC(uint64_t a1, void *a2)
{
  id v3;
  double v4;
  double v5;
  unsigned __int8 *WeakRetained;
  double v7;
  NSObject *v8;
  int v9;
  double v10;

  v3 = a2;
  v4 = sub_10000883C();
  v5 = *(double *)(a1 + 40);
  WeakRetained = (unsigned __int8 *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v7 = v4 - v5;
    v8 = qword_10085F520;
    if (v3)
    {
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
        sub_1003D23E0();
    }
    else
    {
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
      {
        v9 = 134217984;
        v10 = v7;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#btsampledistributor BT Leeching with max rate scanner activation succeeded [%0.6f s]", (uint8_t *)&v9, 0xCu);
      }
      atomic_store(1u, WeakRetained + 96);
    }
  }

}

void sub_10017AE0C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10017AE90(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_10017AFC8(_Unwind_Exception *a1)
{
  void *v1;
  os_unfair_lock_s *v2;

  os_unfair_lock_unlock(v2);

  _Unwind_Resume(a1);
}

void sub_10017B444(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  os_unfair_lock_s *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  os_unfair_lock_unlock(v11);
  _Unwind_Resume(a1);
}

void sub_10017B7FC(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 72));
  _Unwind_Resume(a1);
}

void sub_10017B838(uint64_t a1, void *a2)
{
  id v3;
  double v4;
  double v5;
  unsigned __int8 *WeakRetained;
  double v7;
  NSObject *v8;
  int v9;
  double v10;

  v3 = a2;
  v4 = sub_10000883C();
  v5 = *(double *)(a1 + 40);
  WeakRetained = (unsigned __int8 *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v7 = v4 - v5;
    v8 = qword_10085F520;
    if (v3)
    {
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
        sub_1003D24E4();
    }
    else
    {
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
      {
        v9 = 134217984;
        v10 = v7;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#btsampledistributor CBDiscovery activation succeeded [%0.6f s]", (uint8_t *)&v9, 0xCu);
      }
      atomic_store(1u, WeakRetained + 72);
    }
  }

}

void sub_10017B948(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10017B960(uint64_t a1, void *a2)
{
  id v3;
  double v4;
  double v5;
  id WeakRetained;
  double v7;
  NSObject *v8;
  int v9;
  double v10;

  v3 = a2;
  v4 = sub_10000883C();
  v5 = *(double *)(a1 + 40);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v7 = v4 - v5;
    v8 = qword_10085F520;
    if (v3)
    {
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
        sub_1003D2544();
    }
    else if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
    {
      v9 = 134217984;
      v10 = v7;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#btsampledistributor CBDiscovery Screen Off activation succeeded [%0.6f s]", (uint8_t *)&v9, 0xCu);
    }
  }

}

void sub_10017BA64(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10017BA7C(uint64_t a1, void *a2)
{
  id v3;
  double v4;
  double v5;
  id WeakRetained;
  double v7;
  NSObject *v8;
  int v9;
  double v10;

  v3 = a2;
  v4 = sub_10000883C();
  v5 = *(double *)(a1 + 40);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v7 = v4 - v5;
    v8 = qword_10085F520;
    if (v3)
    {
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
        sub_1003D25A4();
    }
    else if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
    {
      v9 = 134217984;
      v10 = v7;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#btsampledistributor CBDiscovery AirPods Leech activation succeeded [%0.6f s]", (uint8_t *)&v9, 0xCu);
    }
  }

}

void sub_10017BB80(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10017BD4C(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 56));
  _Unwind_Resume(a1);
}

void sub_10017BD84(uint64_t a1, void *a2)
{
  id *v2;
  id v3;
  id WeakRetained;

  v2 = (id *)(a1 + 32);
  v3 = a2;
  WeakRetained = objc_loadWeakRetained(v2);
  objc_msgSend(WeakRetained, "didDiscoverDevice:", v3);

}

void sub_10017BDCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_10017BDE4(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  id v5;
  id v6;
  uint64_t v7;
  id *v8;
  void *v9;
  uint64_t v10;
  id WeakRetained;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint8_t v16[128];
  uint8_t buf[4];
  id v18;

  v3 = a2;
  v4 = (id)qword_10085F520;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 134217984;
    v18 = objc_msgSend(v3, "count");
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "#btsampledistributor deviceBufferedHandler devices: %lu", buf, 0xCu);
  }

  v14 = 0u;
  v15 = 0u;
  v12 = 0u;
  v13 = 0u;
  v5 = v3;
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
  if (v6)
  {
    v7 = *(_QWORD *)v13;
    v8 = (id *)(a1 + 32);
    do
    {
      v9 = 0;
      do
      {
        if (*(_QWORD *)v13 != v7)
          objc_enumerationMutation(v5);
        v10 = *(_QWORD *)(*((_QWORD *)&v12 + 1) + 8 * (_QWORD)v9);
        WeakRetained = objc_loadWeakRetained(v8);
        objc_msgSend(WeakRetained, "didDiscoverDevice:", v10, (_QWORD)v12);

        v9 = (char *)v9 + 1;
      }
      while (v6 != v9);
      v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
    }
    while (v6);
  }

}

void sub_10017BF60(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_10017BF9C(id a1)
{
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
    sub_1003D2604();
}

void sub_10017BFDC(uint64_t a1)
{
  id WeakRetained;

  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
    sub_1003D2630();
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "handleCBDiscoveryInterrupted");

}

void sub_10017C034(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10017C044(id a1, NSError *a2)
{
  NSError *v2;

  v2 = a2;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
    sub_1003D265C();

}

void sub_10017C1B0(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_10017C1D8(id a1)
{
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
    sub_1003D26BC();
}

void sub_10017C218(uint64_t a1)
{
  id WeakRetained;

  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
    sub_1003D26E8();
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "handleCBDiscoveryInterrupted");

}

void sub_10017C270(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10017C280(id a1, NSError *a2)
{
  NSError *v2;

  v2 = a2;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
    sub_1003D2714();

}

void sub_10017C484(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  id *v3;
  id *v4;
  uint64_t v5;

  objc_destroyWeak(v4);
  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v5 - 88));
  _Unwind_Resume(a1);
}

void sub_10017C4DC(id a1)
{
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
    sub_1003D2774();
}

void sub_10017C51C(uint64_t a1)
{
  id WeakRetained;

  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
    sub_1003D27A0();
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "handleCBDiscoveryInterrupted");

}

void sub_10017C574(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10017C584(id a1, NSError *a2)
{
  NSError *v2;

  v2 = a2;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
    sub_1003D27CC();

}

void sub_10017C5D4(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "handleCBDiscoveryStateChanged");

}

void sub_10017C608(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_10017C61C(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "handleCBDiscoverySystemOverride");

}

void sub_10017C650(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_10017C8DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, os_unfair_lock_t lock, void *a10)
{
  void *v10;

  os_unfair_lock_unlock(lock);
  _Unwind_Resume(a1);
}

id sub_10017C920(uint64_t a1)
{
  id result;

  result = objc_msgSend(*(id *)(a1 + 32), "isInteresetedInSample:", *(_QWORD *)(a1 + 40));
  if ((_DWORD)result)
    return objc_msgSend(*(id *)(a1 + 32), "consumeBluetoothSample:", *(_QWORD *)(a1 + 40));
  return result;
}

void sub_10017CB08(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  id *v3;
  id *v4;
  uint64_t v5;

  objc_destroyWeak(v4);
  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v5 - 88));
  _Unwind_Resume(a1);
}

void sub_10017CB5C(uint64_t a1, void *a2)
{
  id WeakRetained;
  void *v4;
  id v5;

  v5 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v4 = WeakRetained;
  if (WeakRetained)
    objc_msgSend(WeakRetained, "didDiscoverDevice:", v5);

}

void sub_10017CBAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_10017CBC4(id a1)
{
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
    sub_1003D2774();
}

void sub_10017CC04(uint64_t a1)
{
  id WeakRetained;
  void *v3;

  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
    sub_1003D27A0();
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v3 = WeakRetained;
  if (WeakRetained)
    objc_msgSend(WeakRetained, "handleCBDiscoveryInterrupted");

}

void sub_10017CC64(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10017CC74(id a1, NSError *a2)
{
  NSError *v2;

  v2 = a2;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
    sub_1003D27CC();

}

void sub_10017CCC4(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
    objc_msgSend(WeakRetained, "handleCBDiscoveryStateChanged");

}

void sub_10017CD00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_10017CD14(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
    objc_msgSend(WeakRetained, "handleCBDiscoverySystemOverride");

}

void sub_10017CD50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_10017CEC4(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;
  void *v2;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

id sub_10017CEEC(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "sampleProviderServiceInterrupted");
}

void sub_10017D0D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_unfair_lock_t lock)
{
  void *v10;

  os_unfair_lock_unlock(lock);
  _Unwind_Resume(a1);
}

id sub_10017D0F8(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "sampleProviderDidChangeState:", *(_QWORD *)(a1 + 40));
}

void sub_10017D27C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10017D330(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0x16u);
}

BOOL sub_10017D340(char *a1, std::string::size_type a2)
{
  NSObject *v4;
  std::string::size_type v5;
  std::string::size_type v6;
  std::shared_ptr<std::__fs::filesystem::__dir_stream>::element_type *ptr;
  std::__shared_weak_count *cntrl;
  uint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  std::string::size_type v15;
  std::string::size_type v16;
  std::shared_ptr<std::__fs::filesystem::__dir_stream>::element_type *v17;
  const std::__fs::filesystem::directory_entry *v18;
  int v19;
  std::string::size_type v20;
  size_t size;
  std::string *p_buf;
  const void *v23;
  uint64_t v24;
  NSObject *v25;
  const char *v26;
  uint64_t v27;
  char v28;
  std::__shared_weak_count *v29;
  uint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  uint64_t *v33;
  unint64_t v34;
  NSObject *v35;
  std::__fs::filesystem::directory_iterator v37;
  std::__fs::filesystem::directory_iterator v38;
  std::string __p;
  std::string buf;

  v4 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    if (a1[23] >= 0)
      v5 = (std::string::size_type)a1;
    else
      v5 = *(_QWORD *)a1;
    if (*(char *)(a2 + 23) >= 0)
      v6 = a2;
    else
      v6 = *(_QWORD *)a2;
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v5;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Logger::tooManyLogFilesToEnumerate: dir %s prefix %s", (uint8_t *)&buf, 0x16u);
  }
  sub_10017ED1C(&buf, a1);
  std::__fs::filesystem::directory_iterator::directory_iterator(&v38, (const std::__fs::filesystem::path *)&buf, 0, skip_permission_denied);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
  ptr = v38.__imp_.__ptr_;
  cntrl = v38.__imp_.__cntrl_;
  if (v38.__imp_.__cntrl_)
  {
    p_shared_owners = &v38.__imp_.__cntrl_->__shared_owners_;
    do
      v10 = __ldxr((unint64_t *)p_shared_owners);
    while (__stxr(v10 + 1, (unint64_t *)p_shared_owners));
    v11 = v38.__imp_.__cntrl_;
    v37.__imp_.__ptr_ = ptr;
    v37.__imp_.__cntrl_ = cntrl;
    if (v38.__imp_.__cntrl_)
    {
      v12 = &v38.__imp_.__cntrl_->__shared_owners_;
      do
        v13 = __ldxr((unint64_t *)v12);
      while (__stxr(v13 + 1, (unint64_t *)v12));
      do
        v14 = __ldaxr((unint64_t *)v12);
      while (__stlxr(v14 - 1, (unint64_t *)v12));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  else
  {
    v37.__imp_.__ptr_ = v38.__imp_.__ptr_;
    v37.__imp_.__cntrl_ = 0;
  }
  v15 = 0;
  v16 = 0;
  while (1)
  {
    v17 = v37.__imp_.__ptr_;
    if (!v37.__imp_.__ptr_)
      break;
    v18 = std::__fs::filesystem::directory_iterator::__dereference(&v37);
    std::__fs::filesystem::__status(&v18->__p_, 0);
    if (buf.__r_.__value_.__s.__data_[0] != 1)
      goto LABEL_58;
    sub_10017D830(&v18->__p_, (uint64_t)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      sub_100004678(&buf, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    else
    {
      buf = __p;
    }
    v19 = *(char *)(a2 + 23);
    if (v19 >= 0)
      v20 = *(unsigned __int8 *)(a2 + 23);
    else
      v20 = *(_QWORD *)(a2 + 8);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v20 == -1)
LABEL_73:
        sub_10017EF98();
      p_buf = (std::string *)buf.__r_.__value_.__r.__words[0];
      if (buf.__r_.__value_.__l.__size_ >= v20)
        size = v20;
      else
        size = buf.__r_.__value_.__l.__size_;
    }
    else
    {
      if (v20 == -1)
        goto LABEL_73;
      if (HIBYTE(buf.__r_.__value_.__r.__words[2]) >= v20)
        size = v20;
      else
        size = HIBYTE(buf.__r_.__value_.__r.__words[2]);
      p_buf = &buf;
    }
    if (v19 >= 0)
      v23 = (const void *)a2;
    else
      v23 = *(const void **)a2;
    if (!memcmp(p_buf, v23, size) && size == v20 && ++v15 >= 0x1F4)
    {
      v24 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(__p.__r_.__value_.__l.__data_) = 134217984;
        *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = v15;
        v25 = v24;
        v26 = "Logger::tooManyLogFilesToEnumerate: TRUE - found %zu matching files (there may be more than this!)";
        goto LABEL_52;
      }
      goto LABEL_53;
    }
    if (++v16 >= 0x3E8)
    {
      v27 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(__p.__r_.__value_.__l.__data_) = 134217984;
        *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = v16;
        v25 = v27;
        v26 = "Logger::tooManyLogFilesToEnumerate: TRUE - found %zu files (there may be more than this!)";
LABEL_52:
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, v26, (uint8_t *)&__p, 0xCu);
      }
LABEL_53:
      v28 = 0;
      goto LABEL_55;
    }
    v28 = 1;
LABEL_55:
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf.__r_.__value_.__l.__data_);
    if ((v28 & 1) == 0)
      break;
LABEL_58:
    std::__fs::filesystem::directory_iterator::__increment(&v37, 0);
  }
  v29 = v37.__imp_.__cntrl_;
  if (v37.__imp_.__cntrl_)
  {
    v30 = &v37.__imp_.__cntrl_->__shared_owners_;
    do
      v31 = __ldaxr((unint64_t *)v30);
    while (__stlxr(v31 - 1, (unint64_t *)v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  v32 = v38.__imp_.__cntrl_;
  if (v38.__imp_.__cntrl_)
  {
    v33 = &v38.__imp_.__cntrl_->__shared_owners_;
    do
      v34 = __ldaxr((unint64_t *)v33);
    while (__stlxr(v34 - 1, (unint64_t *)v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  if (!v17)
  {
    v35 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf.__r_.__value_.__l.__data_) = 134218240;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v15;
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v16;
      _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "Logger::tooManyLogFilesToEnumerate: FALSE - found %zu matches out of %zu files", (uint8_t *)&buf, 0x16u);
    }
  }
  return v17 != 0;
}

void sub_10017D7B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a29 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double sub_10017D830@<D0>(const std::__fs::filesystem::path *a1@<X0>, uint64_t a2@<X8>)
{
  std::__fs::filesystem::path::__string_view v3;
  __int128 *p_dst;
  std::basic_string_view<_CharT, _Traits>::size_type v5;
  std::basic_string_view<_CharT, _Traits>::size_type v6;
  double result;
  __int128 __dst;
  unint64_t v9;

  v3 = std::__fs::filesystem::path::__filename(a1);
  if (v3.__size_ >= 0x7FFFFFFFFFFFFFF8)
    sub_10000BD6C();
  if (v3.__size_ >= 0x17)
  {
    v5 = (v3.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3.__size_ | 7) != 0x17)
      v5 = v3.__size_ | 7;
    v6 = v5 + 1;
    p_dst = (__int128 *)operator new(v5 + 1);
    *((_QWORD *)&__dst + 1) = v3.__size_;
    v9 = v6 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
  }
  else
  {
    HIBYTE(v9) = v3.__size_;
    p_dst = &__dst;
    if (!v3.__size_)
      goto LABEL_9;
  }
  memmove(p_dst, v3.__data_, v3.__size_);
LABEL_9:
  *((_BYTE *)p_dst + v3.__size_) = 0;
  result = *(double *)&__dst;
  *(_OWORD *)a2 = __dst;
  *(_QWORD *)(a2 + 16) = v9;
  return result;
}

void sub_10017D8F0(uint64_t a1, char *a2, std::string::size_type a3)
{
  NSObject *v6;
  std::string::size_type v7;
  std::string::size_type v8;
  std::shared_ptr<std::__fs::filesystem::__dir_stream>::element_type *ptr;
  std::__shared_weak_count *cntrl;
  uint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  std::string::size_type v17;
  unint64_t v18;
  uint64_t v19;
  const std::__fs::filesystem::directory_entry *v20;
  NSObject *v21;
  std::string *p_buf;
  BOOL v23;
  int v24;
  int v25;
  std::string::size_type v26;
  size_t size;
  std::string *v28;
  const void *v29;
  std::__shared_weak_count *v30;
  uint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  uint64_t *v34;
  unint64_t v35;
  NSObject *v36;
  std::__fs::filesystem::directory_iterator v37;
  std::__fs::filesystem::directory_iterator v38;
  std::__fs::filesystem::directory_entry::_Path __p;
  std::__fs::filesystem::directory_entry::_Path buf;

  v6 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    if (a2[23] >= 0)
      v7 = (std::string::size_type)a2;
    else
      v7 = *(_QWORD *)a2;
    if (*(char *)(a3 + 23) >= 0)
      v8 = a3;
    else
      v8 = *(_QWORD *)a3;
    LODWORD(buf.__pn_.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)buf.__pn_.__r_.__value_.__r.__words + 4) = v7;
    WORD2(buf.__pn_.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&buf.__pn_.__r_.__value_.__r.__words[1] + 6) = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Logger::deleteFilesWithoutEnumerating: dir %s prefix %s", (uint8_t *)&buf, 0x16u);
  }
  sub_10017ED1C(&buf.__pn_, a2);
  std::__fs::filesystem::directory_iterator::directory_iterator(&v38, &buf, 0, skip_permission_denied);
  if (SHIBYTE(buf.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__pn_.__r_.__value_.__l.__data_);
  ptr = v38.__imp_.__ptr_;
  cntrl = v38.__imp_.__cntrl_;
  if (v38.__imp_.__cntrl_)
  {
    p_shared_owners = &v38.__imp_.__cntrl_->__shared_owners_;
    do
      v12 = __ldxr((unint64_t *)p_shared_owners);
    while (__stxr(v12 + 1, (unint64_t *)p_shared_owners));
    v13 = v38.__imp_.__cntrl_;
    v37.__imp_.__ptr_ = ptr;
    v37.__imp_.__cntrl_ = cntrl;
    if (v38.__imp_.__cntrl_)
    {
      v14 = &v38.__imp_.__cntrl_->__shared_owners_;
      do
        v15 = __ldxr((unint64_t *)v14);
      while (__stxr(v15 + 1, (unint64_t *)v14));
      do
        v16 = __ldaxr((unint64_t *)v14);
      while (__stlxr(v16 - 1, (unint64_t *)v14));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
  }
  else
  {
    v37.__imp_.__ptr_ = v38.__imp_.__ptr_;
    v37.__imp_.__cntrl_ = 0;
  }
  v17 = 0;
  v18 = 0;
  v19 = a1 + 56;
  while (v37.__imp_.__ptr_)
  {
    v20 = std::__fs::filesystem::directory_iterator::__dereference(&v37);
    std::__fs::filesystem::__status(&v20->__p_, 0);
    if (buf.__pn_.__r_.__value_.__s.__data_[0] != 1)
      goto LABEL_66;
    sub_10017D830(&v20->__p_, (uint64_t)&__p);
    if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0)
    {
      sub_100004678(&buf, __p.__pn_.__r_.__value_.__l.__data_, __p.__pn_.__r_.__value_.__l.__size_);
      if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__pn_.__r_.__value_.__l.__data_);
    }
    else
    {
      buf = __p;
    }
    if (sub_10017EFAC(v19, (const void **)&buf.__pn_.__r_.__value_.__l.__data_))
    {
      v21 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
      {
        p_buf = (std::string *)&buf;
        if ((buf.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          p_buf = (std::string *)buf.__pn_.__r_.__value_.__r.__words[0];
        LODWORD(__p.__pn_.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)__p.__pn_.__r_.__value_.__r.__words + 4) = (std::string::size_type)p_buf;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "pruneLogFiles: skipping %s, which is in the FilesToKeep list", (uint8_t *)&__p, 0xCu);
      }
      v23 = 0;
      v24 = 3;
    }
    else
    {
      v25 = *(char *)(a3 + 23);
      if (v25 >= 0)
        v26 = *(unsigned __int8 *)(a3 + 23);
      else
        v26 = *(_QWORD *)(a3 + 8);
      if (SHIBYTE(buf.__pn_.__r_.__value_.__r.__words[2]) < 0)
      {
        if (v26 == -1)
LABEL_80:
          sub_10017EF98();
        v28 = (std::string *)buf.__pn_.__r_.__value_.__r.__words[0];
        if (buf.__pn_.__r_.__value_.__l.__size_ >= v26)
          size = v26;
        else
          size = buf.__pn_.__r_.__value_.__l.__size_;
      }
      else
      {
        if (v26 == -1)
          goto LABEL_80;
        if (HIBYTE(buf.__pn_.__r_.__value_.__r.__words[2]) >= v26)
          size = v26;
        else
          size = HIBYTE(buf.__pn_.__r_.__value_.__r.__words[2]);
        v28 = (std::string *)&buf;
      }
      if (v25 >= 0)
        v29 = (const void *)a3;
      else
        v29 = *(const void **)a3;
      if (memcmp(v28, v29, size) || size != v26)
        goto LABEL_59;
      if (SHIBYTE(v20->__p_.__pn_.__r_.__value_.__r.__words[2]) < 0)
        sub_100004678(&__p, v20->__p_.__pn_.__r_.__value_.__l.__data_, v20->__p_.__pn_.__r_.__value_.__l.__size_);
      else
        __p.__pn_ = (std::__fs::filesystem::path::string_type)v20->__p_;
      sub_10017DE3C((const char *)&__p);
      if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__pn_.__r_.__value_.__l.__data_);
      if (++v17 > 0x1F3)
      {
        v23 = 0;
        v24 = 2;
      }
      else
      {
LABEL_59:
        v23 = ++v18 < 0x3E8;
        v24 = 2 * (v18 > 0x3E7);
      }
    }
    if (SHIBYTE(buf.__pn_.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(buf.__pn_.__r_.__value_.__l.__data_);
      if (v23)
        goto LABEL_66;
    }
    else if (v23)
    {
      goto LABEL_66;
    }
    if (v24 != 3 && v24)
      break;
LABEL_66:
    std::__fs::filesystem::directory_iterator::__increment(&v37, 0);
  }
  v30 = v37.__imp_.__cntrl_;
  if (v37.__imp_.__cntrl_)
  {
    v31 = &v37.__imp_.__cntrl_->__shared_owners_;
    do
      v32 = __ldaxr((unint64_t *)v31);
    while (__stlxr(v32 - 1, (unint64_t *)v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  v33 = v38.__imp_.__cntrl_;
  if (v38.__imp_.__cntrl_)
  {
    v34 = &v38.__imp_.__cntrl_->__shared_owners_;
    do
      v35 = __ldaxr((unint64_t *)v34);
    while (__stlxr(v35 - 1, (unint64_t *)v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  v36 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf.__pn_.__r_.__value_.__l.__data_) = 134217984;
    *(std::string::size_type *)((char *)buf.__pn_.__r_.__value_.__r.__words + 4) = v17;
    _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, "Logger::deleteFilesWithoutEnumerating: deleted %zu logs (there may be more than this!)", (uint8_t *)&buf, 0xCu);
  }
}

void sub_10017DDA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a29 < 0)
    operator delete(__p);
  sub_10001AE68((uint64_t)&a11);
  sub_10001AE68((uint64_t)&a13);
  sub_10001AE68((uint64_t)&a15);
  _Unwind_Resume(a1);
}

BOOL sub_10017DE3C(const char *a1)
{
  uint64_t *v1;
  int v2;
  NSObject *v3;
  int v5;
  uint64_t *v6;
  int *v7;
  uint64_t *v8;
  int v9;
  int v10;
  uint64_t *v11;
  __int16 v12;
  int v13;

  v1 = (uint64_t *)a1;
  if (a1[23] < 0)
    a1 = *(const char **)a1;
  v2 = unlink(a1);
  if (v2)
  {
    v3 = (id)qword_10085F520;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      v5 = *((char *)v1 + 23);
      v6 = (uint64_t *)*v1;
      v7 = __error();
      if (v5 >= 0)
        v8 = v1;
      else
        v8 = v6;
      v9 = *v7;
      v10 = 136315394;
      v11 = v8;
      v12 = 1024;
      v13 = v9;
      _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "deleteFile: could not unlink %s, errno %d", (uint8_t *)&v10, 0x12u);
    }

  }
  return v2 == 0;
}

void sub_10017DF40(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10017DF58(uint64_t *a1@<X0>, const void **a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  uint64_t v11;
  void *i;
  char *v13;
  int v14;
  unint64_t v15;
  unsigned __int8 v16;
  size_t v17;
  const void *v18;
  NSObject *v19;
  const void *v20;
  BOOL v21;
  unint64_t v22;
  unint64_t v23;
  __int128 v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  __int128 v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  void *v35;
  void *v36;
  void *__p[2];
  uint64_t v38;
  void *v39;
  size_t v40;
  unsigned __int8 v41;
  uint8_t v42;
  char v43[15];
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  _QWORD v48[5];
  _BYTE v49[128];

  v34 = objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](NSFileManager, "defaultManager"));
  if (*((char *)a1 + 23) >= 0)
    v6 = a1;
  else
    v6 = (uint64_t *)*a1;
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v6, v34));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v35, "contentsOfDirectoryAtPath:error:", v7, 0));

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v44 = 0u;
  v45 = 0u;
  v46 = 0u;
  v47 = 0u;
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "reverseObjectEnumerator"));
  v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v44, v49, 16);
  if (v10)
  {
    v11 = *(_QWORD *)v45;
    v36 = v8;
    do
    {
      for (i = 0; i != v10; i = (char *)i + 1)
      {
        if (*(_QWORD *)v45 != v11)
          objc_enumerationMutation(v9);
        v13 = (char *)objc_msgSend(objc_retainAutorelease(*(id *)(*((_QWORD *)&v44 + 1) + 8 * (_QWORD)i)), "UTF8String");
        if (v13)
        {
          sub_10000BF04(&v39, v13);
          v14 = *((char *)a2 + 23);
          if (v14 >= 0)
            v15 = *((unsigned __int8 *)a2 + 23);
          else
            v15 = (unint64_t)a2[1];
          v16 = v41;
          if ((char)v41 < 0)
          {
            if (v15 == -1)
LABEL_52:
              sub_10017EF98();
            v18 = v39;
            if (v40 >= v15)
              v17 = v15;
            else
              v17 = v40;
          }
          else
          {
            if (v15 == -1)
              goto LABEL_52;
            if (v41 >= v15)
              v17 = v15;
            else
              v17 = v41;
            v18 = &v39;
          }
          if (v14 >= 0)
            v20 = a2;
          else
            v20 = *a2;
          v21 = !memcmp(v18, v20, v17) && v17 == v15;
          v8 = v36;
          if (v21)
          {
            sub_10000BF04(__p, v13);
            v23 = a3[1];
            v22 = a3[2];
            if (v23 >= v22)
            {
              v25 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v23 - *a3) >> 3);
              v26 = v25 + 1;
              if (v25 + 1 > 0xAAAAAAAAAAAAAAALL)
                sub_100026E7C();
              v27 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - *a3) >> 3);
              if (2 * v27 > v26)
                v26 = 2 * v27;
              if (v27 >= 0x555555555555555)
                v28 = 0xAAAAAAAAAAAAAAALL;
              else
                v28 = v26;
              v48[4] = a3 + 2;
              if (v28)
                v29 = (char *)sub_100026E90((uint64_t)(a3 + 2), v28);
              else
                v29 = 0;
              v30 = &v29[24 * v25];
              v48[0] = v29;
              v48[1] = v30;
              v48[3] = &v29[24 * v28];
              v31 = *(_OWORD *)__p;
              *((_QWORD *)v30 + 2) = v38;
              *(_OWORD *)v30 = v31;
              __p[1] = 0;
              v38 = 0;
              __p[0] = 0;
              v48[2] = v30 + 24;
              sub_10017F028(a3, v48);
              v32 = a3[1];
              sub_10017F1B0((uint64_t)v48);
              v33 = SHIBYTE(v38);
              a3[1] = v32;
              if (v33 < 0)
                operator delete(__p[0]);
            }
            else
            {
              v24 = *(_OWORD *)__p;
              *(_QWORD *)(v23 + 16) = v38;
              *(_OWORD *)v23 = v24;
              a3[1] = v23 + 24;
            }
            v16 = v41;
          }
          if ((v16 & 0x80) != 0)
            operator delete(v39);
        }
        else
        {
          v19 = qword_10085F520;
          if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
            sub_1003D288C(&v42, v43, v19);
        }
      }
      v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v44, v49, 16);
    }
    while (v10);
  }

}

void sub_10017E2B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  void *v36;
  void *v37;

  sub_100161C00((void ***)&a19);
  _Unwind_Resume(a1);
}

BOOL sub_10017E358(const char *a1, timespec *a2, off_t *a3)
{
  uint64_t *v5;
  int v6;
  NSObject *v7;
  int v9;
  uint64_t *v10;
  int v11;
  uint64_t *v12;
  stat v13;
  uint8_t buf[4];
  uint64_t *v15;
  __int16 v16;
  int v17;

  v5 = (uint64_t *)a1;
  if (a1[23] < 0)
    a1 = *(const char **)a1;
  v6 = stat(a1, &v13);
  if (v6)
  {
    v7 = (id)qword_10085F520;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      v9 = *((char *)v5 + 23);
      v10 = (uint64_t *)*v5;
      v11 = *__error();
      if (v9 >= 0)
        v12 = v5;
      else
        v12 = v10;
      *(_DWORD *)buf = 136315394;
      v15 = v12;
      v16 = 1024;
      v17 = v11;
      _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "getFileModificationTimeAndSize: could not stat %s, errno %d", buf, 0x12u);
    }

  }
  else
  {
    *a2 = v13.st_mtimespec;
    *a3 = v13.st_size;
  }
  return v6 == 0;
}

void sub_10017E480(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10017E498(uint64_t a1)
{
  char *v2;
  const void **v3;
  const std::__fs::filesystem::path *v4;
  NSObject *v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  int *v10;
  NSObject *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  NSObject *v16;
  const std::string::value_type *v17;
  size_t v18;
  std::string *p_buf;
  char *v20;
  int v21;
  const std::string::value_type *v22;
  std::string::size_type v23;
  std::string *v24;
  __int128 v25;
  int v26;
  off_t v27;
  uint64_t v28;
  NSObject *v29;
  _BOOL4 v30;
  __darwin_time_t tv_sec;
  void **v32;
  int v33;
  int v34;
  NSObject *v35;
  void **v36;
  NSObject *v37;
  void **v38;
  uint64_t v39;
  NSObject *v40;
  void **v41;
  NSObject *v42;
  void **v43;
  uint64_t v44;
  __darwin_time_t v45;
  char *v46;
  void *__p[2];
  int64_t v48;
  off_t v49;
  timespec v50;
  uint64_t v51;
  char *v52;
  timespec __tp;
  uint64_t v54;
  std::error_code __ec;
  std::string buf;
  __darwin_time_t v57;
  __int16 v58;
  off_t v59;
  __int16 v60;
  uint64_t v61;

  v2 = (char *)(a1 + 31);
  if (*(char *)(a1 + 31) < 0)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_3;
LABEL_13:
    v6 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
      sub_1003D28C0(v6, v7, v8);
    return;
  }
  if (!*(_BYTE *)(a1 + 31))
    goto LABEL_13;
LABEL_3:
  v3 = (const void **)(a1 + 8);
  __ec.__val_ = 0;
  __ec.__cat_ = std::system_category();
  v4 = (const std::__fs::filesystem::path *)sub_10017ED1C(&buf, v2 - 23);
  std::__fs::filesystem::__status(v4, &__ec);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
  if ((_BYTE)v54 && v54 != 255 && v54 == 2)
  {
    if (sub_10017D340(v2 - 23, a1 + 32))
    {
      sub_10017D8F0(a1, v2 - 23, a1 + 32);
      return;
    }
    if (clock_gettime(_CLOCK_REALTIME, &__tp))
    {
      v9 = (id)qword_10085F520;
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        v10 = __error();
        sub_1003D28F8(v10, (uint8_t *)&buf, v9);
      }

      return;
    }
    if (__tp.tv_sec > 1209600)
    {
      v45 = __tp.tv_sec - 1209600;
    }
    else
    {
      v11 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf.__r_.__value_.__l.__data_) = 134217984;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = __tp.tv_sec;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "pruneLogFiles: timespecNow too small to use: %ld", (uint8_t *)&buf, 0xCu);
      }
      v45 = 0;
    }
    sub_10017DF58((uint64_t *)(v2 - 23), (const void **)(a1 + 32), &v51);
    v12 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v52[-v51] >> 3));
    if (v52 == (char *)v51)
      v13 = 0;
    else
      v13 = v12;
    sub_10017F238(v51, v52, (uint64_t)__p, v13, 1);
    v49 = 0;
    v14 = v51;
    v46 = v52;
    if ((char *)v51 == v52)
    {
LABEL_87:
      buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v51;
      sub_100161C00((void ***)&buf);
      return;
    }
    v15 = 0;
    v44 = 0;
    while (sub_10017EFAC(a1 + 56, (const void **)v14))
    {
      v16 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
      {
        v17 = (const std::string::value_type *)v14;
        if (*(char *)(v14 + 23) < 0)
          v17 = *(const std::string::value_type **)v14;
        LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v17;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "pruneLogFiles: skipping %s, which is in the FilesToKeep list", (uint8_t *)&buf, 0xCu);
      }
LABEL_86:
      v14 += 24;
      if ((char *)v14 == v46)
        goto LABEL_87;
    }
    if (*(char *)(a1 + 31) >= 0)
      v18 = *(unsigned __int8 *)(a1 + 31);
    else
      v18 = *(_QWORD *)(a1 + 16);
    sub_10013FDB8((uint64_t)&buf, v18 + 1);
    if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_buf = &buf;
    else
      p_buf = (std::string *)buf.__r_.__value_.__r.__words[0];
    if (v18)
    {
      if (*v2 >= 0)
        v20 = v2 - 23;
      else
        v20 = (char *)*v3;
      memmove(p_buf, v20, v18);
    }
    *(_WORD *)((char *)&p_buf->__r_.__value_.__l.__data_ + v18) = 47;
    v21 = *(char *)(v14 + 23);
    if (v21 >= 0)
      v22 = (const std::string::value_type *)v14;
    else
      v22 = *(const std::string::value_type **)v14;
    if (v21 >= 0)
      v23 = *(unsigned __int8 *)(v14 + 23);
    else
      v23 = *(_QWORD *)(v14 + 8);
    v24 = std::string::append(&buf, v22, v23);
    v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    v48 = v24->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v25;
    v24->__r_.__value_.__l.__size_ = 0;
    v24->__r_.__value_.__r.__words[2] = 0;
    v24->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf.__r_.__value_.__l.__data_);
    if (sub_10017E358((const char *)__p, &v50, &v49))
    {
      v26 = v15;
      v27 = v49;
      v28 = v49 + v44;
      v29 = qword_10085F520;
      v30 = os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT);
      tv_sec = v50.tv_sec;
      if (v30)
      {
        v32 = __p;
        if (v48 < 0)
          v32 = (void **)__p[0];
        LODWORD(buf.__r_.__value_.__l.__data_) = 136316162;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v32;
        WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
        *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v50.tv_sec;
        HIWORD(buf.__r_.__value_.__r.__words[2]) = 2048;
        v57 = v45;
        v58 = 2048;
        v59 = v27;
        v60 = 2048;
        v61 = v28;
        _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "pruneLogFiles: looking at %s, modTime %ld floorTime %ld size %lld new total %lld", (uint8_t *)&buf, 0x34u);
      }
      v33 = v26 + 1;
      if (tv_sec >= v45)
      {
        if (v26 < 250)
        {
          if (v27)
          {
            v39 = v28;
            if (v28 >= 314572801 && sub_10017DE3C((const char *)__p))
            {
              v15 = v33;
              v40 = qword_10085F520;
              if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
              {
                v41 = __p;
                if (v48 < 0)
                  v41 = (void **)__p[0];
                LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
                *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v41;
                _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "pruneLogFiles: deleted due to size: %s", (uint8_t *)&buf, 0xCu);
              }
              v44 = v39;
            }
            else
            {
              v44 = v28;
              v15 = v33;
            }
            goto LABEL_84;
          }
          v34 = v26 + 1;
          sub_10017DE3C((const char *)__p);
          v42 = qword_10085F520;
          if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
          {
            v43 = __p;
            if (v48 < 0)
              v43 = (void **)__p[0];
            LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
            *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v43;
            _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEFAULT, "pruneLogFiles: deleted due to zero size: %s", (uint8_t *)&buf, 0xCu);
          }
        }
        else
        {
          v34 = v26 + 1;
          sub_10017DE3C((const char *)__p);
          v37 = qword_10085F520;
          if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
          {
            v38 = __p;
            if (v48 < 0)
              v38 = (void **)__p[0];
            LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
            *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v38;
            WORD2(buf.__r_.__value_.__r.__words[1]) = 1024;
            v15 = v34;
            *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v34;
            _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "pruneLogFiles: deleted due to num files: %s num files %d", (uint8_t *)&buf, 0x12u);
            goto LABEL_84;
          }
        }
      }
      else
      {
        v34 = v26 + 1;
        sub_10017DE3C((const char *)__p);
        v35 = qword_10085F520;
        if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
        {
          v36 = __p;
          if (v48 < 0)
            v36 = (void **)__p[0];
          LODWORD(buf.__r_.__value_.__l.__data_) = 136315650;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v36;
          WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
          *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = tv_sec;
          HIWORD(buf.__r_.__value_.__r.__words[2]) = 2048;
          v57 = v45;
          _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "pruneLogFiles: deleted due to age %s fileTime %ld targetTime %ld", (uint8_t *)&buf, 0x20u);
        }
      }
      v15 = v34;
    }
LABEL_84:
    if (SHIBYTE(v48) < 0)
      operator delete(__p[0]);
    goto LABEL_86;
  }
  v5 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
    sub_1003D2940(v2, v2 - 23, v5);
}

void sub_10017EB94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  uint64_t v31;

  if (a26 < 0)
    operator delete(__p);
  *(_QWORD *)(v31 - 160) = &a31;
  sub_100161C00((void ***)(v31 - 160));
  _Unwind_Resume(a1);
}

uint64_t sub_10017EC14(uint64_t a1)
{
  *(_QWORD *)a1 = off_100809E40;
  sub_10017ECCC(a1 + 56, *(char **)(a1 + 64));
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_10017EC68(uint64_t a1)
{
  *(_QWORD *)a1 = off_100809E40;
  sub_10017ECCC(a1 + 56, *(char **)(a1 + 64));
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  operator delete();
}

void sub_10017ECCC(uint64_t a1, char *a2)
{
  if (a2)
  {
    sub_10017ECCC(a1, *(_QWORD *)a2);
    sub_10017ECCC(a1, *((_QWORD *)a2 + 1));
    if (a2[55] < 0)
      operator delete(*((void **)a2 + 4));
    operator delete(a2);
  }
}

std::string *sub_10017ED1C(std::string *a1, char *a2)
{
  uint64_t v3;
  BOOL v4;
  uint64_t v5;

  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  LODWORD(v3) = a2[23];
  v4 = (int)v3 < 0;
  v5 = *((_QWORD *)a2 + 1);
  if ((int)v3 < 0)
    a2 = *(char **)a2;
  v3 = v3;
  if (v4)
    v3 = v5;
  sub_10017ED80(a1, a2, &a2[v3]);
  return a1;
}

void sub_10017ED64(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::string *sub_10017ED80(std::string *this, char *a2, char *a3)
{
  char *v4;
  unint64_t v6;
  unint64_t v7;
  std::string::size_type size;
  std::string::size_type v9;
  std::string *v10;
  unint64_t v11;
  void **v12;
  std::string::size_type v13;
  std::string *v14;
  _BYTE *i;
  char v16;
  std::string::size_type v17;
  void *__p[2];
  unsigned __int8 v20;

  v4 = a2;
  LODWORD(v6) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  v7 = a3 - a2;
  if ((v6 & 0x80000000) != 0)
  {
    if (a3 == a2)
      return this;
    size = this->__r_.__value_.__l.__size_;
    v11 = this->__r_.__value_.__r.__words[2];
    v9 = (v11 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    v10 = (std::string *)this->__r_.__value_.__r.__words[0];
    v6 = HIBYTE(v11);
  }
  else
  {
    if (a3 == a2)
      return this;
    size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    v9 = 22;
    v10 = this;
  }
  if (v10 > (std::string *)v4 || (char *)&v10->__r_.__value_.__l.__data_ + size + 1 <= v4)
  {
    if (v9 - size < v7)
    {
      std::string::__grow_by(this, v9, size - v9 + v7, size, size, 0, 0);
      this->__r_.__value_.__l.__size_ = size;
      LOBYTE(v6) = *((_BYTE *)&this->__r_.__value_.__s + 23);
    }
    v14 = this;
    if ((v6 & 0x80) != 0)
      v14 = (std::string *)this->__r_.__value_.__r.__words[0];
    for (i = (char *)v14 + size; v4 != a3; ++i)
    {
      v16 = *v4++;
      *i = v16;
    }
    *i = 0;
    v17 = v7 + size;
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
      this->__r_.__value_.__l.__size_ = v17;
    else
      *((_BYTE *)&this->__r_.__value_.__s + 23) = v17 & 0x7F;
  }
  else
  {
    sub_10017EEF4(__p, v4, a3, v7);
    if ((v20 & 0x80u) == 0)
      v12 = __p;
    else
      v12 = (void **)__p[0];
    if ((v20 & 0x80u) == 0)
      v13 = v20;
    else
      v13 = (std::string::size_type)__p[1];
    std::string::append(this, (const std::string::value_type *)v12, v13);
    if ((char)v20 < 0)
      operator delete(__p[0]);
  }
  return this;
}

void sub_10017EED8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_10017EEF4(_QWORD *result, char *a2, char *a3, unint64_t a4)
{
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v4 = result;
  if (a4 >= 0x7FFFFFFFFFFFFFF8)
    sub_10000BD6C();
  if (a4 > 0x16)
  {
    v8 = (a4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a4 | 7) != 0x17)
      v8 = a4 | 7;
    v9 = v8 + 1;
    result = operator new(v8 + 1);
    v4[1] = a4;
    v4[2] = v9 | 0x8000000000000000;
    *v4 = result;
    v4 = result;
  }
  else
  {
    *((_BYTE *)result + 23) = a4;
  }
  while (a2 != a3)
  {
    v10 = *a2++;
    *(_BYTE *)v4 = v10;
    v4 = (_QWORD *)((char *)v4 + 1);
  }
  *(_BYTE *)v4 = 0;
  return result;
}

void sub_10017EF98()
{
  sub_100146798("basic_string");
}

uint64_t sub_10017EFAC(uint64_t a1, const void **a2)
{
  const void **v2;
  uint64_t v4;
  uint64_t v5;

  v2 = *(const void ***)(a1 + 8);
  if (v2)
  {
    v4 = a1 + 16;
    v5 = 1;
    do
    {
      if (!sub_1000272FC(v4, a2, v2 + 4))
      {
        if (!sub_1000272FC(v4, v2 + 4, a2))
          return v5;
        ++v2;
      }
      v2 = (const void **)*v2;
    }
    while (v2);
  }
  return 0;
}

uint64_t sub_10017F028(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_10017F09C((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_10017F09C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  __int128 v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 != a5)
  {
    v9 = a7;
    do
    {
      v10 = *(_OWORD *)(a3 - 24);
      *(_QWORD *)(v9 - 8) = *(_QWORD *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v10;
      v9 -= 24;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 8) = 0;
      *(_QWORD *)(a3 - 24) = 0;
      v7 -= 24;
      a3 -= 24;
    }
    while (a3 != a5);
    *((_QWORD *)&v15 + 1) = v9;
  }
  v13 = 1;
  sub_10017F138((uint64_t)v12);
  return a6;
}

uint64_t sub_10017F138(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_10017F16C(a1);
  return a1;
}

void sub_10017F16C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    v1 += 24;
  }
}

uint64_t sub_10017F1B0(uint64_t a1)
{
  sub_10017F1E4(a1, *(void ***)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_10017F1E4(uint64_t a1, void **a2)
{
  void **v2;
  void **v5;

  v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      v5 = v2 - 3;
      *(_QWORD *)(a1 + 16) = v2 - 3;
      if (*((char *)v2 - 1) < 0)
      {
        operator delete(*v5);
        v5 = *(void ***)(a1 + 16);
      }
      v2 = v5;
    }
    while (v5 != a2);
  }
}

void sub_10017F238(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, char a5)
{
  char *v9;
  const void **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  const void **v16;
  uint64_t v17;
  const void **v18;
  const void **v19;
  const void **v20;
  __int128 v21;
  const void **v22;
  char v23;
  BOOL v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  const void *v28;
  const void *v29;

BOOL sub_10017F5DC(uint64_t a1, _QWORD *a2, const void **a3)
{
  int v3;
  int v4;
  size_t v5;
  const void *v6;
  size_t v7;
  size_t v8;
  int v9;

  v3 = *((char *)a2 + 23);
  v4 = *((char *)a3 + 23);
  if (v4 >= 0)
    v5 = *((unsigned __int8 *)a3 + 23);
  else
    v5 = (size_t)a3[1];
  if (v4 >= 0)
    v6 = a3;
  else
    v6 = *a3;
  if (v3 >= 0)
    v7 = *((unsigned __int8 *)a2 + 23);
  else
    v7 = a2[1];
  if (v3 < 0)
    a2 = (_QWORD *)*a2;
  if (v7 >= v5)
    v8 = v5;
  else
    v8 = v7;
  v9 = memcmp(v6, a2, v8);
  if (v9)
    return v9 < 0;
  else
    return v5 < v7;
}

void sub_10017F644(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v7;
  uint64_t v9;
  _QWORD *v10;
  const void **v11;
  uint64_t v12;
  uint64_t v13;
  void **v14;
  int v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if ((_QWORD *)a1 != a2)
  {
    v19 = v3;
    v20 = v4;
    v7 = (_QWORD *)(a1 + 24);
    if ((_QWORD *)(a1 + 24) != a2)
    {
      v9 = 0;
      v10 = (_QWORD *)a1;
      do
      {
        v11 = (const void **)v10;
        v10 = v7;
        if (sub_10017F5DC(a3, v7, v11))
        {
          v17 = *(_OWORD *)v10;
          v18 = v10[2];
          v10[1] = 0;
          v10[2] = 0;
          *v10 = 0;
          v12 = v9;
          do
          {
            v13 = a1 + v12;
            v14 = (void **)(a1 + v12 + 24);
            if (*(char *)(a1 + v12 + 47) < 0)
              operator delete(*v14);
            *(_OWORD *)v14 = *(_OWORD *)v13;
            *(_QWORD *)(a1 + v12 + 40) = *(_QWORD *)(v13 + 16);
            *(_BYTE *)(v13 + 23) = 0;
            *(_BYTE *)v13 = 0;
            if (!v12)
            {
              v16 = a1;
              goto LABEL_13;
            }
            v12 -= 24;
          }
          while (sub_10017F5DC(a3, &v17, (const void **)(v12 + a1)));
          v15 = *(char *)(a1 + v12 + 47);
          v16 = a1 + v12 + 24;
          if (v15 < 0)
            operator delete(*(void **)v16);
LABEL_13:
          *(_OWORD *)v16 = v17;
          *(_QWORD *)(v16 + 16) = v18;
        }
        v7 = v10 + 3;
        v9 += 24;
      }
      while (v10 + 3 != a2);
    }
  }
}

void sub_10017F764(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v9;
  const void **v10;
  _QWORD *v11;
  void **v12;
  BOOL v13;
  int v14;
  void **v15;
  __int128 v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;

  if (a1 != a2)
  {
    v18 = v3;
    v19 = v4;
    v6 = a1;
    v7 = a1 + 3;
    if (a1 + 3 != a2)
    {
      v9 = a1 - 3;
      do
      {
        v10 = (const void **)v6;
        v6 = v7;
        if (sub_10017F5DC(a3, v7, v10))
        {
          v16 = *(_OWORD *)v6;
          v17 = (void *)v6[2];
          v6[1] = 0;
          v6[2] = 0;
          *v6 = 0;
          v11 = v9;
          do
          {
            v12 = (void **)(v11 + 6);
            if (*((char *)v11 + 71) < 0)
              operator delete(*v12);
            *(_OWORD *)v12 = *(_OWORD *)(v11 + 3);
            v11[8] = v11[5];
            *((_BYTE *)v11 + 47) = 0;
            *((_BYTE *)v11 + 24) = 0;
            v13 = sub_10017F5DC(a3, &v16, (const void **)v11);
            v11 -= 3;
          }
          while (v13);
          v14 = *((char *)v11 + 71);
          v15 = (void **)(v11 + 6);
          if (v14 < 0)
            operator delete(*v15);
          *(_OWORD *)v15 = v16;
          v15[2] = v17;
        }
        v7 = v6 + 3;
        v9 += 3;
      }
      while (v6 + 3 != a2);
    }
  }
}

uint64_t sub_10017F868(const void **a1, const void **a2, _QWORD *a3, uint64_t a4)
{
  BOOL v8;
  uint64_t result;
  const void *v10;
  __int128 v11;
  const void *v12;
  const void *v13;
  __int128 v14;
  const void *v15;
  const void *v16;
  __int128 v17;
  const void *v18;
  const void *v19;
  __int128 v20;
  const void *v21;
  const void *v22;
  __int128 v23;
  const void *v24;

  v8 = sub_10017F5DC(a4, a2, a1);
  result = sub_10017F5DC(a4, a3, a2);
  if (!v8)
  {
    if (!(_DWORD)result)
      return result;
    v13 = a2[2];
    v14 = *(_OWORD *)a2;
    v15 = (const void *)a3[2];
    *(_OWORD *)a2 = *(_OWORD *)a3;
    a2[2] = v15;
    *(_OWORD *)a3 = v14;
    a3[2] = v13;
    if (!sub_10017F5DC(a4, a2, a1))
      return 1;
    v16 = a1[2];
    v17 = *(_OWORD *)a1;
    v18 = a2[2];
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = v18;
    *(_OWORD *)a2 = v17;
    a2[2] = v16;
    return 2;
  }
  if (!(_DWORD)result)
  {
    v19 = a1[2];
    v20 = *(_OWORD *)a1;
    v21 = a2[2];
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = v21;
    *(_OWORD *)a2 = v20;
    a2[2] = v19;
    if (!sub_10017F5DC(a4, a3, a2))
      return 1;
    v22 = a2[2];
    v23 = *(_OWORD *)a2;
    v24 = (const void *)a3[2];
    *(_OWORD *)a2 = *(_OWORD *)a3;
    a2[2] = v24;
    *(_OWORD *)a3 = v23;
    a3[2] = v22;
    return 2;
  }
  v10 = a1[2];
  v11 = *(_OWORD *)a1;
  v12 = (const void *)a3[2];
  *(_OWORD *)a1 = *(_OWORD *)a3;
  a1[2] = v12;
  *(_OWORD *)a3 = v11;
  a3[2] = v10;
  return 1;
}

const void **sub_10017F9B0(const void **a1, unint64_t a2, uint64_t a3)
{
  unint64_t v4;
  const void **v6;
  const void **v7;
  _BOOL4 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  void **v12;
  __int128 v13;
  __int128 v14;
  __int128 v16;
  const void *v17;
  __int128 v18;
  const void *v19;

  v4 = a2;
  v16 = *(_OWORD *)a1;
  v17 = a1[2];
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  if (sub_10017F5DC(a3, &v16, (const void **)(a2 - 24)))
  {
    v6 = a1;
    do
      v6 += 3;
    while (!sub_10017F5DC(a3, &v16, v6));
  }
  else
  {
    v7 = a1 + 3;
    do
    {
      v6 = v7;
      if ((unint64_t)v7 >= v4)
        break;
      v8 = sub_10017F5DC(a3, &v16, v7);
      v7 = v6 + 3;
    }
    while (!v8);
  }
  if ((unint64_t)v6 < v4)
  {
    do
      v4 -= 24;
    while (sub_10017F5DC(a3, &v16, (const void **)v4));
  }
  while ((unint64_t)v6 < v4)
  {
    v9 = *(_OWORD *)v6;
    v19 = v6[2];
    v18 = v9;
    v10 = *(_OWORD *)v4;
    v6[2] = *(const void **)(v4 + 16);
    *(_OWORD *)v6 = v10;
    v11 = v18;
    *(_QWORD *)(v4 + 16) = v19;
    *(_OWORD *)v4 = v11;
    do
      v6 += 3;
    while (!sub_10017F5DC(a3, &v16, v6));
    do
      v4 -= 24;
    while (sub_10017F5DC(a3, &v16, (const void **)v4));
  }
  v12 = (void **)(v6 - 3);
  if (v6 - 3 == a1)
  {
    if (*((char *)v6 - 1) < 0)
      operator delete(*v12);
  }
  else
  {
    if (*((char *)a1 + 23) < 0)
      operator delete((void *)*a1);
    v13 = *(_OWORD *)v12;
    a1[2] = *(v6 - 1);
    *(_OWORD *)a1 = v13;
    *((_BYTE *)v6 - 1) = 0;
    *((_BYTE *)v6 - 24) = 0;
  }
  v14 = v16;
  *(v6 - 1) = v17;
  *(_OWORD *)v12 = v14;
  return v6;
}

_QWORD *sub_10017FB40(__int128 *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  void **v13;
  __int128 v14;
  __int128 v15;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;

  v6 = 0;
  v17 = *a1;
  v18 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 1) = 0;
  *((_QWORD *)a1 + 2) = 0;
  *(_QWORD *)a1 = 0;
  do
    v6 += 24;
  while (sub_10017F5DC(a3, (__int128 *)((char *)a1 + v6), (const void **)&v17));
  v7 = (unint64_t)a1 + v6;
  if (v6 == 24)
  {
    do
    {
      if (v7 >= (unint64_t)a2)
        break;
      a2 -= 3;
    }
    while (!sub_10017F5DC(a3, a2, (const void **)&v17));
  }
  else
  {
    do
      a2 -= 3;
    while (!sub_10017F5DC(a3, a2, (const void **)&v17));
  }
  v8 = (_QWORD *)((char *)a1 + v6);
  if (v7 < (unint64_t)a2)
  {
    v9 = a2;
    do
    {
      v19 = *(_OWORD *)v8;
      v10 = v19;
      v20 = v8[2];
      v11 = v20;
      v12 = v9[2];
      *(_OWORD *)v8 = *(_OWORD *)v9;
      v8[2] = v12;
      v9[2] = v11;
      *(_OWORD *)v9 = v10;
      do
        v8 += 3;
      while (sub_10017F5DC(a3, v8, (const void **)&v17));
      do
        v9 -= 3;
      while (!sub_10017F5DC(a3, v9, (const void **)&v17));
    }
    while (v8 < v9);
  }
  v13 = (void **)(v8 - 3);
  if (v8 - 3 == (_QWORD *)a1)
  {
    if (*((char *)v8 - 1) < 0)
      operator delete(*v13);
  }
  else
  {
    if (*((char *)a1 + 23) < 0)
      operator delete(*(void **)a1);
    v14 = *(_OWORD *)v13;
    *((_QWORD *)a1 + 2) = *(v8 - 1);
    *a1 = v14;
    *((_BYTE *)v8 - 1) = 0;
    *((_BYTE *)v8 - 24) = 0;
  }
  v15 = v17;
  *(v8 - 1) = v18;
  *(_OWORD *)v13 = v15;
  return v8 - 3;
}

BOOL sub_10017FCCC(uint64_t a1, const void **a2, uint64_t a3)
{
  unint64_t v6;
  _BOOL8 result;
  const void **v8;
  const void *v9;
  __int128 v10;
  const void *v11;
  const void **v12;
  const void **v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  void **v18;
  BOOL v19;
  int v20;
  uint64_t v21;
  __int128 v22;
  const void *v23;

  v6 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)a2 - a1) >> 3);
  result = 1;
  switch(v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v8 = a2 - 3;
      if (sub_10017F5DC(a3, a2 - 3, (const void **)a1))
      {
        v9 = *(const void **)(a1 + 16);
        v10 = *(_OWORD *)a1;
        v11 = v8[2];
        *(_OWORD *)a1 = *(_OWORD *)v8;
        *(_QWORD *)(a1 + 16) = v11;
        *(_OWORD *)v8 = v10;
        v8[2] = v9;
      }
      return 1;
    case 3uLL:
      sub_10017F868((const void **)a1, (const void **)(a1 + 24), a2 - 3, a3);
      return 1;
    case 4uLL:
      sub_10017FEFC(a1, (const void **)(a1 + 24), (const void **)(a1 + 48), a2 - 3, a3);
      return 1;
    case 5uLL:
      sub_10017FFE4(a1, (const void **)(a1 + 24), (const void **)(a1 + 48), (const void **)(a1 + 72), a2 - 3, a3);
      return 1;
    default:
      v12 = (const void **)(a1 + 48);
      sub_10017F868((const void **)a1, (const void **)(a1 + 24), (_QWORD *)(a1 + 48), a3);
      v13 = (const void **)(a1 + 72);
      if ((const void **)(a1 + 72) == a2)
        return 1;
      v14 = 0;
      v15 = 0;
      break;
  }
  while (1)
  {
    if (sub_10017F5DC(a3, v13, v12))
    {
      v22 = *(_OWORD *)v13;
      v23 = v13[2];
      v13[1] = 0;
      v13[2] = 0;
      *v13 = 0;
      v16 = v14;
      do
      {
        v17 = a1 + v16;
        v18 = (void **)(a1 + v16 + 72);
        if (*(char *)(a1 + v16 + 95) < 0)
          operator delete(*v18);
        *(_OWORD *)v18 = *(_OWORD *)(v17 + 48);
        *(_QWORD *)(a1 + v16 + 88) = *(_QWORD *)(v17 + 64);
        *(_BYTE *)(v17 + 71) = 0;
        *(_BYTE *)(v17 + 48) = 0;
        if (v16 == -48)
        {
          v21 = a1;
          goto LABEL_15;
        }
        v19 = sub_10017F5DC(a3, &v22, (const void **)(a1 + v16 + 24));
        v16 -= 24;
      }
      while (v19);
      v20 = *(char *)(a1 + v16 + 95);
      v21 = a1 + v16 + 72;
      if (v20 < 0)
        operator delete(*(void **)v21);
LABEL_15:
      *(_OWORD *)v21 = v22;
      *(_QWORD *)(v21 + 16) = v23;
      if (++v15 == 8)
        return v13 + 3 == a2;
    }
    v12 = v13;
    v14 += 24;
    v13 += 3;
    if (v13 == a2)
      return 1;
  }
}

__n128 sub_10017FEFC(uint64_t a1, const void **a2, const void **a3, _QWORD *a4, uint64_t a5)
{
  __n128 result;
  const void *v11;
  __int128 v12;
  const void *v13;
  const void *v14;
  __int128 v15;
  const void *v16;
  const void *v17;
  const void *v18;

  sub_10017F868((const void **)a1, a2, a3, a5);
  if (sub_10017F5DC(a5, a4, a3))
  {
    v11 = a3[2];
    v12 = *(_OWORD *)a3;
    v13 = (const void *)a4[2];
    *(_OWORD *)a3 = *(_OWORD *)a4;
    a3[2] = v13;
    *(_OWORD *)a4 = v12;
    a4[2] = v11;
    if (sub_10017F5DC(a5, a3, a2))
    {
      v14 = a2[2];
      v15 = *(_OWORD *)a2;
      v16 = a3[2];
      *(_OWORD *)a2 = *(_OWORD *)a3;
      a2[2] = v16;
      *(_OWORD *)a3 = v15;
      a3[2] = v14;
      if (sub_10017F5DC(a5, a2, (const void **)a1))
      {
        v17 = *(const void **)(a1 + 16);
        result = *(__n128 *)a1;
        v18 = a2[2];
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_QWORD *)(a1 + 16) = v18;
        *(__n128 *)a2 = result;
        a2[2] = v17;
      }
    }
  }
  return result;
}

__n128 sub_10017FFE4(uint64_t a1, const void **a2, const void **a3, const void **a4, _QWORD *a5, uint64_t a6)
{
  __n128 result;
  const void *v13;
  __int128 v14;
  const void *v15;
  const void *v16;
  __int128 v17;
  const void *v18;
  const void *v19;
  __int128 v20;
  const void *v21;
  const void *v22;
  const void *v23;

  sub_10017FEFC(a1, a2, a3, a4, a6);
  if (sub_10017F5DC(a6, a5, a4))
  {
    v13 = a4[2];
    v14 = *(_OWORD *)a4;
    v15 = (const void *)a5[2];
    *(_OWORD *)a4 = *(_OWORD *)a5;
    a4[2] = v15;
    *(_OWORD *)a5 = v14;
    a5[2] = v13;
    if (sub_10017F5DC(a6, a4, a3))
    {
      v16 = a3[2];
      v17 = *(_OWORD *)a3;
      v18 = a4[2];
      *(_OWORD *)a3 = *(_OWORD *)a4;
      a3[2] = v18;
      *(_OWORD *)a4 = v17;
      a4[2] = v16;
      if (sub_10017F5DC(a6, a3, a2))
      {
        v19 = a2[2];
        v20 = *(_OWORD *)a2;
        v21 = a3[2];
        *(_OWORD *)a2 = *(_OWORD *)a3;
        a2[2] = v21;
        *(_OWORD *)a3 = v20;
        a3[2] = v19;
        if (sub_10017F5DC(a6, a2, (const void **)a1))
        {
          v22 = *(const void **)(a1 + 16);
          result = *(__n128 *)a1;
          v23 = a2[2];
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_QWORD *)(a1 + 16) = v23;
          *(__n128 *)a2 = result;
          a2[2] = v22;
        }
      }
    }
  }
  return result;
}

_QWORD *sub_100180104(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __n128 *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  int64_t v18;
  _QWORD *v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  __int128 v25;
  _BYTE v28[15];

  if ((_QWORD *)a1 != a2)
  {
    v8 = (uint64_t)a2 - a1;
    v9 = ((uint64_t)a2 - a1) / 24;
    if ((uint64_t)a2 - a1 >= 25)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = (__n128 *)(a1 + 24 * v10);
      do
      {
        sub_10018034C(a1, a4, v9, v12);
        v12 = (__n128 *)((char *)v12 - 24);
        --v11;
      }
      while (v11);
    }
    v13 = a2;
    if (a2 != a3)
    {
      v14 = a2;
      do
      {
        if (sub_10017F5DC(a4, v14, (const void **)a1))
        {
          v15 = v14[2];
          v16 = *(_OWORD *)v14;
          v17 = *(_QWORD *)(a1 + 16);
          *(_OWORD *)v14 = *(_OWORD *)a1;
          v14[2] = v17;
          *(_OWORD *)a1 = v16;
          *(_QWORD *)(a1 + 16) = v15;
          sub_10018034C(a1, a4, v9, (__n128 *)a1);
        }
        v14 += 3;
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 25)
    {
      v18 = v8 / 0x18uLL;
      v19 = a2 - 3;
      do
      {
        v20 = *(_QWORD *)a1;
        *(_QWORD *)v28 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)&v28[7] = *(_QWORD *)(a1 + 15);
        v21 = *(_BYTE *)(a1 + 23);
        *(_QWORD *)(a1 + 8) = 0;
        *(_QWORD *)(a1 + 16) = 0;
        *(_QWORD *)a1 = 0;
        v22 = sub_1001804E0(a1, a4, v18);
        v23 = v22;
        v24 = *(char *)(v22 + 23);
        if (v19 == (_QWORD *)v22)
        {
          if (v24 < 0)
            operator delete(*(void **)v22);
          *(_QWORD *)v23 = v20;
          *(_QWORD *)(v23 + 8) = *(_QWORD *)v28;
          *(_QWORD *)(v23 + 15) = *(_QWORD *)&v28[7];
          *(_BYTE *)(v23 + 23) = v21;
        }
        else
        {
          if (v24 < 0)
            operator delete(*(void **)v22);
          v25 = *(_OWORD *)v19;
          *(_QWORD *)(v23 + 16) = v19[2];
          *(_OWORD *)v23 = v25;
          *v19 = v20;
          v19[1] = *(_QWORD *)v28;
          *(_QWORD *)((char *)v19 + 15) = *(_QWORD *)&v28[7];
          *((_BYTE *)v19 + 23) = v21;
          sub_1001805B8(a1, v23 + 24, a4, 0xAAAAAAAAAAAAAAABLL * ((v23 + 24 - a1) >> 3));
        }
        v19 -= 3;
      }
      while (v18-- > 2);
    }
    return v13;
  }
  return a3;
}

void sub_100180334(_Unwind_Exception *exception_object)
{
  void *v1;
  int v2;

  if (v2 < 0)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

__n128 sub_10018034C(uint64_t a1, uint64_t a2, uint64_t a3, __n128 *a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  __n128 *v7;
  uint64_t v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __n128 result;
  __n128 *v16;
  __n128 v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v6 = a3 - 2;
  if (a3 >= 2)
  {
    v22 = v4;
    v23 = v5;
    v7 = a4;
    v9 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) >= (uint64_t)(0xAAAAAAAAAAAAAAABLL * (((uint64_t)a4 - a1) >> 3)))
    {
      v12 = (0x5555555555555556 * (((uint64_t)a4 - a1) >> 3)) | 1;
      v13 = a1 + 24 * v12;
      v14 = 0x5555555555555556 * (((uint64_t)a4 - a1) >> 3) + 2;
      if (v14 < a3 && sub_10017F5DC(a2, (_QWORD *)(a1 + 24 * v12), (const void **)(v13 + 24)))
      {
        v13 += 24;
        v12 = v14;
      }
      if (!sub_10017F5DC(a2, (_QWORD *)v13, (const void **)v7))
      {
        v20 = *v7;
        v21 = v7[1].n128_u64[0];
        v7->n128_u64[1] = 0;
        v7[1].n128_u64[0] = 0;
        v7->n128_u64[0] = 0;
        while (1)
        {
          v16 = (__n128 *)v13;
          if (v7[1].n128_i8[7] < 0)
            operator delete((void *)v7->n128_u64[0]);
          v17 = *(__n128 *)v13;
          v7[1].n128_u64[0] = *(_QWORD *)(v13 + 16);
          *v7 = v17;
          *(_BYTE *)(v13 + 23) = 0;
          *(_BYTE *)v13 = 0;
          if (v9 < v12)
            break;
          v18 = (2 * v12) | 1;
          v13 = a1 + 24 * v18;
          v19 = 2 * v12 + 2;
          if (v19 < a3 && sub_10017F5DC(a2, (_QWORD *)(a1 + 24 * v18), (const void **)(v13 + 24)))
          {
            v13 += 24;
            v18 = v19;
          }
          v7 = v16;
          v12 = v18;
          if (sub_10017F5DC(a2, (_QWORD *)v13, (const void **)&v20))
          {
            if (v16[1].n128_i8[7] < 0)
              operator delete((void *)v16->n128_u64[0]);
            break;
          }
        }
        result = v20;
        v16[1].n128_u64[0] = v21;
        *v16 = result;
      }
    }
  }
  return result;
}

uint64_t sub_1001804E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;

  v6 = 0;
  v7 = a3 - 2;
  if (a3 < 2)
    v7 = a3 - 1;
  v8 = v7 >> 1;
  do
  {
    v9 = a1 + 24 * v6 + 24;
    v10 = 2 * v6;
    v6 = (2 * v6) | 1;
    v11 = v10 + 2;
    if (v10 + 2 < a3 && sub_10017F5DC(a2, (_QWORD *)v9, (const void **)(v9 + 24)))
    {
      v9 += 24;
      v6 = v11;
    }
    if (*(char *)(a1 + 23) < 0)
      operator delete(*(void **)a1);
    v12 = *(_OWORD *)v9;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(v9 + 16);
    *(_OWORD *)a1 = v12;
    *(_BYTE *)(v9 + 23) = 0;
    *(_BYTE *)v9 = 0;
    a1 = v9;
  }
  while (v6 <= v8);
  return v9;
}

double sub_1001805B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v8;
  __int128 *v9;
  __int128 *v10;
  double result;
  __int128 *v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (a4 >= 2)
  {
    v16 = v4;
    v17 = v5;
    v8 = (unint64_t)(a4 - 2) >> 1;
    v9 = (__int128 *)(a1 + 24 * v8);
    v10 = (__int128 *)(a2 - 24);
    if (sub_10017F5DC(a3, v9, (const void **)(a2 - 24)))
    {
      v14 = *v10;
      v15 = *((_QWORD *)v10 + 2);
      *((_QWORD *)v10 + 1) = 0;
      *((_QWORD *)v10 + 2) = 0;
      *(_QWORD *)v10 = 0;
      while (1)
      {
        v12 = v9;
        if (*((char *)v10 + 23) < 0)
          operator delete(*(void **)v10);
        v13 = *v9;
        *((_QWORD *)v10 + 2) = *((_QWORD *)v9 + 2);
        *v10 = v13;
        *((_BYTE *)v9 + 23) = 0;
        *(_BYTE *)v9 = 0;
        if (!v8)
          break;
        v8 = (v8 - 1) >> 1;
        v9 = (__int128 *)(a1 + 24 * v8);
        v10 = v12;
        if (!sub_10017F5DC(a3, v9, (const void **)&v14))
        {
          if (*((char *)v12 + 23) < 0)
            operator delete(*(void **)v12);
          break;
        }
      }
      result = *(double *)&v14;
      *v12 = v14;
      *((_QWORD *)v12 + 2) = v15;
    }
  }
  return result;
}

_QWORD *sub_1001806B4@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, off_10080A108[a1]);
}

_QWORD *sub_1001806C8@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, off_10080A160[a1]);
}

_QWORD *sub_1001806DC@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, off_10080A1A8[a1]);
}

_QWORD *sub_1001806F0@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, off_10080A1C8[a1]);
}

uint64_t sub_100180704(uint64_t a1)
{
  sub_10003E3F0(a1 + 440, *(_QWORD **)(a1 + 448));
  sub_10003E3F0(a1, *(_QWORD **)(a1 + 8));
  return a1;
}

void sub_100180944(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_100180AF4(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = (std::__shared_weak_count *)a1[1];
  *a1 = 0;
  a1[1] = 0;
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void sub_100180F9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  void *v33;
  void *v34;
  void *v35;

  sub_100182C64(&a11, 0);
  if (a17 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

_QWORD *sub_1001810D4(_QWORD *a1, _QWORD *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  if (*a2)
    operator new();
  *a2 = 0;
  v3 = (std::__shared_weak_count *)a1[1];
  *a1 = 0;
  a1[1] = 0;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void sub_10018150C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  v8 = v5;

  _Unwind_Resume(a1);
}

void sub_100181630(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_100181C20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27)
{
  void *v27;
  void *v28;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_100181CB8(uint64_t a1)
{
  id v2;
  void *v3;
  void *v4;
  objc_super v5;

  v5.receiver = *(id *)(a1 + 32);
  v5.super_class = (Class)NIServerRangingAuthSession;
  v2 = objc_msgSendSuper2(&v5, "resourcesManager");
  v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "remote"));
  objc_msgSend(v4, "didReceiveRangingAuthRecommendation:forObject:", *(unsigned __int8 *)(a1 + 48), *(_QWORD *)(a1 + 40));

}

void sub_100181D2C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_100181F18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  void *v23;

  if (a22 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_100181F54(uint64_t a1)
{
  id v2;
  void *v3;
  void *v4;
  objc_super v5;

  v5.receiver = *(id *)(a1 + 32);
  v5.super_class = (Class)NIServerRangingAuthSession;
  v2 = objc_msgSendSuper2(&v5, "resourcesManager");
  v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "remote"));
  objc_msgSend(v4, "uwbSessionDidInvalidateWithError:", *(_QWORD *)(a1 + 40));

}

void sub_100181FC4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1001820B8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100182168(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_100182284(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a3)
  {
    v6 = 8 * a3;
    do
    {
      sub_100182300((uint64_t **)a1, v4, a2, (uint64_t *)a2);
      a2 += 2;
      v6 -= 8;
    }
    while (v6);
  }
  return a1;
}

void sub_1001822E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10003E3F0(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_100182300(uint64_t **a1, uint64_t *a2, int *a3, uint64_t *a4)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t v10;
  uint64_t *v11;

  v6 = sub_100182384(a1, a2, &v11, &v10, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v7 + 28) = *a4;
    sub_1000272A8(a1, (uint64_t)v11, v8, v7);
  }
  return v7;
}

uint64_t *sub_100182384(_QWORD *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, int *a5)
{
  uint64_t *v5;
  int v6;
  int v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  BOOL v14;
  int v15;
  uint64_t v16;
  uint64_t *v17;
  int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  int v22;

  v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, v7 = *((_DWORD *)a2 + 7), *a5 < v7))
  {
    v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      v9 = (uint64_t *)*a2;
      do
      {
        v10 = v9;
        v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      v13 = a2;
      do
      {
        v10 = (uint64_t *)v13[2];
        v14 = *v10 == (_QWORD)v13;
        v13 = v10;
      }
      while (v14);
    }
    v15 = *a5;
    if (*((_DWORD *)v10 + 7) < *a5)
      goto LABEL_17;
    v16 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v17 = (uint64_t *)v16;
          v18 = *(_DWORD *)(v16 + 28);
          if (v15 >= v18)
            break;
          v16 = *v17;
          v5 = v17;
          if (!*v17)
            goto LABEL_29;
        }
        if (v18 >= v15)
          break;
        v5 = v17 + 1;
        v16 = v17[1];
      }
      while (v16);
    }
    else
    {
      v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }
  v11 = a2[1];
  if (v11)
  {
    v12 = (uint64_t *)a2[1];
    do
    {
      a4 = v12;
      v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  else
  {
    v19 = a2;
    do
    {
      a4 = (uint64_t *)v19[2];
      v14 = *a4 == (_QWORD)v19;
      v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= *((_DWORD *)a4 + 7))
  {
    v20 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v21 = (uint64_t *)v20;
          v22 = *(_DWORD *)(v20 + 28);
          if (v6 >= v22)
            break;
          v20 = *v21;
          v5 = v21;
          if (!*v21)
            goto LABEL_48;
        }
        if (v22 >= v6)
          break;
        v5 = v21 + 1;
        v20 = v21[1];
      }
      while (v20);
    }
    else
    {
      v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

uint64_t sub_10018252C(uint64_t a1, double *a2, uint64_t a3)
{
  double *v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (double *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a3)
  {
    v6 = 8 * a3;
    do
    {
      sub_1001825A8((uint64_t **)a1, v4, a2, (uint64_t *)a2);
      ++a2;
      v6 -= 8;
    }
    while (v6);
  }
  return a1;
}

void sub_100182590(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10003E3F0(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_1001825A8(uint64_t **a1, double *a2, double *a3, uint64_t *a4)
{
  double *v6;
  uint64_t *v7;
  uint64_t **v8;
  double v10;
  double *v11;

  v6 = sub_10018262C(a1, a2, &v11, &v10, a3);
  v7 = *(uint64_t **)v6;
  if (!*(_QWORD *)v6)
  {
    v8 = (uint64_t **)v6;
    v7 = (uint64_t *)operator new(0x28uLL);
    v7[4] = *a4;
    sub_1000272A8(a1, (uint64_t)v11, v8, v7);
  }
  return v7;
}

double *sub_10018262C(_QWORD *a1, double *a2, double **a3, double *a4, double *a5)
{
  double *v5;
  double v6;
  double v7;
  uint64_t *v8;
  uint64_t *v9;
  double *v10;
  uint64_t v11;
  double *v12;
  double *v13;
  BOOL v14;
  double v15;
  double *v16;
  double *v17;
  double v18;
  double *v19;
  double *v20;
  double v21;

  v5 = (double *)(a1 + 1);
  if (a1 + 1 == (_QWORD *)a2 || (v6 = *a5, v7 = a2[4], *a5 > v7))
  {
    v8 = *(uint64_t **)a2;
    if ((double *)*a1 == a2)
    {
      v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      v9 = *(uint64_t **)a2;
      do
      {
        v10 = (double *)v9;
        v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      v13 = a2;
      do
      {
        v10 = (double *)*((_QWORD *)v13 + 2);
        v14 = *(_QWORD *)v10 == (_QWORD)v13;
        v13 = v10;
      }
      while (v14);
    }
    v15 = *a5;
    if (v10[4] > *a5)
      goto LABEL_17;
    v16 = *(double **)v5;
    if (*(_QWORD *)v5)
    {
      do
      {
        while (1)
        {
          v17 = v16;
          v18 = v16[4];
          if (v15 <= v18)
            break;
          v16 = *(double **)v16;
          v5 = v17;
          if (!*(_QWORD *)v17)
            goto LABEL_43;
        }
        if (v18 <= v15)
          break;
        v5 = v16 + 1;
        v16 = (double *)*((_QWORD *)v16 + 1);
      }
      while (v16);
      goto LABEL_43;
    }
LABEL_42:
    v17 = (double *)(a1 + 1);
LABEL_43:
    *a3 = v17;
    return v5;
  }
  if (v7 <= v6)
  {
    *a3 = a2;
    *(_QWORD *)a4 = a2;
    return a4;
  }
  v11 = *((_QWORD *)a2 + 1);
  if (v11)
  {
    v12 = (double *)*((_QWORD *)a2 + 1);
    do
    {
      a4 = v12;
      v12 = *(double **)v12;
    }
    while (v12);
  }
  else
  {
    v19 = a2;
    do
    {
      a4 = (double *)*((_QWORD *)v19 + 2);
      v14 = *(_QWORD *)a4 == (_QWORD)v19;
      v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 <= a4[4])
  {
    v20 = *(double **)v5;
    if (*(_QWORD *)v5)
    {
      do
      {
        while (1)
        {
          v17 = v20;
          v21 = v20[4];
          if (v6 <= v21)
            break;
          v20 = *(double **)v20;
          v5 = v17;
          if (!*(_QWORD *)v17)
            goto LABEL_43;
        }
        if (v21 <= v6)
          break;
        v5 = v20 + 1;
        v20 = (double *)*((_QWORD *)v20 + 1);
      }
      while (v20);
      goto LABEL_43;
    }
    goto LABEL_42;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

void sub_1001827C8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_100809EB8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1001827D8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_100809EB8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_100182810(uint64_t a1)
{

  return a1;
}

void sub_100182838(uint64_t a1)
{

  operator delete();
}

_QWORD *sub_100182870(uint64_t a1)
{
  _QWORD *v2;

  v2 = operator new(0x10uLL);
  *v2 = off_100809F08;
  v2[1] = *(id *)(a1 + 8);
  return v2;
}

id sub_1001828B4(uint64_t a1, _QWORD *a2)
{
  id result;

  *a2 = off_100809F08;
  result = *(id *)(a1 + 8);
  a2[1] = result;
  return result;
}

void sub_1001828E8(uint64_t a1)
{

}

void sub_1001828F0(id *a1)
{

  operator delete(a1);
}

id sub_100182918(uint64_t a1, uint64_t a2)
{
  return _objc_msgSend(*(id *)(a1 + 8), "wifiRangingRangeResults:", a2);
}

uint64_t sub_100182924(uint64_t a1, uint64_t a2)
{
  if (sub_10003E27C(a2, (uint64_t)&off_100809F78))
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100182960()
{
  return &off_100809F78;
}

uint64_t sub_10018296C(uint64_t a1)
{

  return a1;
}

void sub_100182994(uint64_t a1)
{

  operator delete();
}

_QWORD *sub_1001829CC(uint64_t a1)
{
  _QWORD *v2;

  v2 = operator new(0x10uLL);
  *v2 = off_100809F98;
  v2[1] = *(id *)(a1 + 8);
  return v2;
}

id sub_100182A10(uint64_t a1, _QWORD *a2)
{
  id result;

  *a2 = off_100809F98;
  result = *(id *)(a1 + 8);
  a2[1] = result;
  return result;
}

void sub_100182A44(uint64_t a1)
{

}

void sub_100182A4C(id *a1)
{

  operator delete(a1);
}

id sub_100182A74(uint64_t a1, int *a2)
{
  int v3;

  v3 = *a2;
  return objc_msgSend(*(id *)(a1 + 8), "wifiRangingRangeError:", &v3);
}

uint64_t sub_100182AA0(uint64_t a1, uint64_t a2)
{
  if (sub_10003E27C(a2, (uint64_t)&off_10080A008))
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100182ADC()
{
  return &off_10080A008;
}

uint64_t sub_100182AE8(uint64_t a1)
{

  return a1;
}

void sub_100182B10(uint64_t a1)
{

  operator delete();
}

_QWORD *sub_100182B48(uint64_t a1)
{
  _QWORD *v2;

  v2 = operator new(0x10uLL);
  *v2 = off_10080A028;
  v2[1] = *(id *)(a1 + 8);
  return v2;
}

id sub_100182B8C(uint64_t a1, _QWORD *a2)
{
  id result;

  *a2 = off_10080A028;
  result = *(id *)(a1 + 8);
  a2[1] = result;
  return result;
}

void sub_100182BC0(uint64_t a1)
{

}

void sub_100182BC8(id *a1)
{

  operator delete(a1);
}

id sub_100182BF0(uint64_t a1, int *a2)
{
  int v3;

  v3 = *a2;
  return objc_msgSend(*(id *)(a1 + 8), "wifiRangingReadiness:", &v3);
}

uint64_t sub_100182C1C(uint64_t a1, uint64_t a2)
{
  if (sub_10003E27C(a2, (uint64_t)&off_10080A098))
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100182C58()
{
  return &off_10080A098;
}

uint64_t sub_100182C64(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_10002DEFC(result);
    operator delete();
  }
  return result;
}

void sub_100182CA4(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_100182CC8(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
  {
    sub_10002DEFC(result);
    operator delete();
  }
  return result;
}

uint64_t sub_100182CFC(uint64_t a1, uint64_t a2)
{
    return a1 + 24;
  else
    return 0;
}

void *sub_100182D3C(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x1642C8590B21643)
    sub_1000260B0();
  return operator new(184 * a2);
}

void sub_100182D84()
{
  void *v0;
  _OWORD *v6;
  _OWORD *v7;
  __int128 v8;
  unint64_t v9;
  __int128 v10;
  uint64_t v11;

  v0 = objc_autoreleasePoolPush();
  v10 = xmmword_10046E140;
  v11 = 0x300000003;
  sub_100182284((uint64_t)&unk_100856F98, (int *)&v10, 3);
  xmmword_100856FB0 = xmmword_10046E050;
  unk_100856FC0 = xmmword_10046E060;
  qword_100856FD8 = 0;
  unk_100856FE0 = 0;
  qword_100856FD0 = 0x3FD999999999999ALL;
  unk_100856FE8 = xmmword_10046E070;
  dword_100856FF8 = 5;
  qword_100857000 = 0x4000000000000000;
  dword_100857008 = 5;
  byte_100857010 = 0;
  *(_QWORD *)&algn_100857011[3] = 0x30000000ALL;
  xmmword_100857020 = xmmword_10046E080;
  unk_100857030 = xmmword_10046E090;
  xmmword_100857040 = xmmword_10046E0A0;
  qword_100857050 = 0x3FE3333333333333;
  dword_100857058 = 3;
  xmmword_100857060 = xmmword_10046E0B0;
  unk_100857070 = xmmword_10046E090;
  xmmword_100857080 = xmmword_10046E080;
  qword_100857090 = 0x3FE3333333333333;
  byte_100857098 = 0;
  xmmword_1008570A0 = xmmword_10046E0C0;
  unk_1008570B0 = xmmword_10046E0D0;
  __asm { FMOV            V0.2D, #1.0 }
  v8 = _Q0;
  xmmword_1008570C0 = _Q0;
  qword_1008570D0 = 0xBFD3333333333333;
  xmmword_1008570D8 = xmmword_10046E0E0;
  qword_1008570E8 = 0x3E99999A40000000;
  xmmword_1008570F0 = xmmword_10046E060;
  qword_100857108 = 0;
  unk_100857110 = 0;
  qword_100857100 = 0x3FD999999999999ALL;
  xmmword_100857118 = xmmword_10046E070;
  dword_100857128 = 5;
  qword_100857130 = 0x4000000000000000;
  dword_100857138 = 4;
  qword_100857140 = 0x300000008;
  qword_100857148 = 0xC04E800000000000;
  v9 = 0xC04E800000000000;
  sub_10018252C((uint64_t)&unk_100857150, (double *)&v9, 1);
  xmmword_100857168 = xmmword_10046E0F0;
  qword_100857178 = 0x4024000000000000;
  dword_100857180 = 45;
  byte_100857184 = 0;
  dword_100857188 = 1;
  byte_100857190 = 1;
  xmmword_100857198 = xmmword_10046E100;
  unk_1008571A8 = xmmword_10046E110;
  xmmword_1008571B8 = v8;
  qword_1008571C8 = 0xC059000000000000;
  xmmword_1008571D0 = xmmword_10046E120;
  qword_1008571E0 = (uint64_t)vdup_n_s32(0x3DCCCCCDu);
  xmmword_1008571E8 = xmmword_10046E060;
  qword_1008571F8 = 0x3FD999999999999ALL;
  qword_100857208 = 0;
  qword_100857200 = 0;
  xmmword_100857210 = xmmword_10046E070;
  dword_100857220 = 5;
  qword_100857228 = 0x4000000000000000;
  dword_100857230 = 10;
  qword_100857238 = 0x4034000000000000;
  dword_100857240 = 3;
  xmmword_100857248 = xmmword_10046E130;
  __cxa_atexit((void (*)(void *))sub_100180704, &unk_100856F98, (void *)&_mh_execute_header);
  qword_100857260 = 0;
  unk_100857268 = 0;
  qword_100857258 = 0;
  v6 = operator new(0x40uLL);
  qword_100857260 = (uint64_t)(v6 + 4);
  unk_100857268 = v6 + 4;
  *v6 = xmmword_10046E158;
  v6[1] = unk_10046E168;
  v6[2] = xmmword_10046E178;
  v6[3] = unk_10046E188;
  qword_100857258 = (uint64_t)v6;
  __cxa_atexit((void (*)(void *))sub_1000325D8, &qword_100857258, (void *)&_mh_execute_header);
  qword_100857278 = 0;
  unk_100857280 = 0;
  qword_100857270 = 0;
  v7 = operator new(0x10uLL);
  qword_100857278 = (uint64_t)(v7 + 1);
  unk_100857280 = v7 + 1;
  *v7 = xmmword_10046E198;
  qword_100857270 = (uint64_t)v7;
  __cxa_atexit((void (*)(void *))sub_1000325D8, &qword_100857270, (void *)&_mh_execute_header);
  objc_autoreleasePoolPop(v0);
}

void sub_1001830DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10003E3F0(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_1001832A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1001833B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_100183544(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1001836A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1001836E8()
{
  JUMPOUT(0x1001836D8);
}

void sub_1001837C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_100183918(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_100183954(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *__p;

  v3 = a2;
  *(_OWORD *)a1 = xmmword_10046E4F0;
  *(_DWORD *)(a1 + 16) = 1;
  sub_10000BF04(&__p, "regulatory,geof,qm,sm");
  v4 = a1;
  operator new();
}

void sub_100183B38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  void *v16;
  uint64_t v17;
  uint64_t v18;

  sub_1001841D0(v18);
  _Unwind_Resume(a1);
}

uint64_t sub_100183BD4(uint64_t a1, int a2)
{
  if (a2 != 4)
    return a2 == 3;
  *(double *)(a1 + 176) = *(double *)(a1 + 8) * (double)*(int *)(a1 + 16);
  return 2;
}

uint64_t sub_100183C08(uint64_t a1, int a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  double v6;
  char v7;
  char v8;

  result = 1;
  switch(a2)
  {
    case 0:
      v7 = 1;
      v4 = *(_QWORD *)(a1 + 208);
      if (!v4)
        goto LABEL_12;
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v4 + 48))(v4, &v7);
      sub_100184388(a1 + 24, 5, *(double *)a1);
      return 1;
    case 1:
      v8 = 0;
      v5 = *(_QWORD *)(a1 + 208);
      if (!v5)
LABEL_12:
        sub_100027BC4();
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v5 + 48))(v5, &v8);
      sub_100183E70((uint64_t **)(a1 + 24), 5);
      return 1;
    case 2:
      return 0;
    case 4:
      sub_100183E70((uint64_t **)(a1 + 24), 5);
      v6 = *(double *)(a1 + 8) * (double)*(int *)(a1 + 16);
      goto LABEL_10;
    case 5:
      v6 = -(*(double *)a1 - *(double *)(a1 + 8) * (double)*(int *)(a1 + 16));
LABEL_10:
      *(double *)(a1 + 176) = v6;
      result = 2;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100183CFC(uint64_t a1, int a2)
{
  uint64_t result;
  uint64_t v4;
  double v5;

  result = 2;
  switch(a2)
  {
    case 0:
      v4 = a1 + 24;
      v5 = *(double *)(a1 + 176);
      goto LABEL_6;
    case 1:
      sub_100183E70((uint64_t **)(a1 + 24), 6);
      goto LABEL_7;
    case 2:
      return 0;
    case 4:
      sub_100183E70((uint64_t **)(a1 + 24), 6);
      v5 = *(double *)(a1 + 8) * (double)*(int *)(a1 + 16);
      v4 = a1 + 24;
LABEL_6:
      sub_100184388(v4, 6, v5);
LABEL_7:
      result = 2;
      break;
    case 6:
      result = 1;
      break;
    default:
      return result;
  }
  return result;
}

void sub_100183DA0(double *a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  double v17;

  v17 = 0.0;
  if (sub_1003915AC((uint64_t)"GeofenceLocationQueryInterval", &v17) && v17 != 0.0)
  {
    a1[1] = v17;
    v2 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
      sub_1003D2BB8((uint64_t)(a1 + 1), v2, v3, v4, v5, v6, v7, v8);
  }
  v16 = 0.0;
  if (sub_1003915AC((uint64_t)"GeofenceLocationQueryTimeout", &v16) && v16 != 0.0)
  {
    *a1 = v16;
    v9 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
      sub_1003D2BB8((uint64_t)a1, v9, v10, v11, v12, v13, v14, v15);
  }
}

uint64_t **sub_100183E70(uint64_t **result, int a2)
{
  uint64_t *v2;
  uint64_t **v3;
  uint64_t **v4;
  int v5;
  BOOL v6;
  uint64_t **v7;
  int v8;
  int *v9;

  v8 = a2;
  v2 = result[8];
  if (v2)
  {
    v3 = result;
    v4 = result + 8;
    do
    {
      v5 = *((_DWORD *)v2 + 8);
      v6 = v5 < a2;
      if (v5 >= a2)
        v7 = (uint64_t **)v2;
      else
        v7 = (uint64_t **)(v2 + 1);
      if (!v6)
        v4 = (uint64_t **)v2;
      v2 = *v7;
    }
    while (*v7);
    if (v4 != result + 8 && *((_DWORD *)v4 + 8) <= a2)
    {
      result = (uint64_t **)v4[5];
      if (result)
      {
        dispatch_source_set_timer((dispatch_source_t)result, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0x1DCD6500uLL);
        v9 = &v8;
        result = sub_100184664(v3 + 10, &v8, (uint64_t)&unk_100472CF8, &v9);
        *((_BYTE *)result + 32) = 0;
      }
    }
  }
  return result;
}

uint64_t sub_100183F1C(uint64_t a1)
{
  return sub_1000061C4(a1 + 24, 2);
}

uint64_t sub_100183F28(uint64_t a1)
{
  return sub_1000061C4(a1 + 24, 3);
}

uint64_t sub_100183F34(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 16) = a2;
  return sub_1000061C4(a1 + 24, 4);
}

void sub_100183F48(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_100183F70(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_100183FB0(uint64_t a1, const void **a2, _QWORD *a3)
{
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  void **v8;
  size_t v9;
  __int128 *v10;
  const void *v11;
  __int128 v13;
  uint64_t v14;

  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 8) = a1 + 16;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = *a3;
  v5 = a3[1];
  *(_QWORD *)(a1 + 40) = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 56) = a1 + 64;
  *(_BYTE *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 88;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  v8 = (void **)(a1 + 120);
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  if ((*((char *)a2 + 23) & 0x80000000) == 0)
  {
    if (*((_BYTE *)a2 + 23))
      goto LABEL_6;
LABEL_21:
    __assert_rtn("PRStateMachine", "PRStateMachine.h", 55, "!name.empty()");
  }
  if (!a2[1])
    goto LABEL_21;
LABEL_6:
  if (*((char *)a2 + 23) >= 0)
    v9 = *((unsigned __int8 *)a2 + 23);
  else
    v9 = (size_t)a2[1];
  sub_10013FDB8((uint64_t)&v13, v9 + 1);
  if (v14 >= 0)
    v10 = &v13;
  else
    v10 = (__int128 *)v13;
  if (v9)
  {
    if (*((char *)a2 + 23) >= 0)
      v11 = a2;
    else
      v11 = *a2;
    memmove(v10, v11, v9);
  }
  *(_WORD *)((char *)v10 + v9) = 44;
  if (*(char *)(a1 + 143) < 0)
    operator delete(*v8);
  *(_OWORD *)v8 = v13;
  *(_QWORD *)(a1 + 136) = v14;
  return a1;
}

void sub_100184134(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void **v6;

  if (*(char *)(v1 + 143) < 0)
    operator delete(*v6);

  sub_10003E3F0(v5, *(_QWORD **)(v1 + 88));
  sub_100184188(v4, *(_QWORD **)(v1 + 64));
  sub_10001AE68(v3);
  sub_10003E3F0(v2, *(_QWORD **)(v1 + 16));
  _Unwind_Resume(a1);
}

void sub_100184188(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_100184188(a1, *a2);
    sub_100184188(a1, a2[1]);

    operator delete(a2);
  }
}

uint64_t sub_1001841D0(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + 56;
  sub_10018424C(*(_QWORD **)(a1 + 56), (_QWORD *)(a1 + 64), (uint64_t **)a1);
  if (*(char *)(a1 + 143) < 0)
    operator delete(*(void **)(a1 + 120));

  sub_10003E3F0(a1 + 80, *(_QWORD **)(a1 + 88));
  sub_100184188(v2, *(_QWORD **)(a1 + 64));
  sub_10001AE68(a1 + 32);
  sub_10003E3F0(a1 + 8, *(_QWORD **)(a1 + 16));
  return a1;
}

uint64_t **sub_10018424C(_QWORD *a1, _QWORD *a2, uint64_t **a3)
{
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      sub_100183E70(a3, *((_DWORD *)v5 + 8));
      v6 = (_QWORD *)v5[1];
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = (_QWORD *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (_QWORD *)v5[2];
          v8 = *v7 == (_QWORD)v5;
          v5 = v7;
        }
        while (!v8);
      }
      v5 = v7;
    }
    while (v7 != a2);
  }
  return a3;
}

uint64_t **sub_1001842C8(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  int v8;
  uint64_t **v9;
  int v10;
  _DWORD *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = operator new(0x38uLL);
    v11[8] = **a4;
    *((_QWORD *)v11 + 5) = 0;
    *((_QWORD *)v11 + 6) = 0;
    sub_1000272A8(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

void sub_100184388(uint64_t a1, int a2, double a3)
{
  NSObject *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  uint64_t *v11;
  void *v12;
  NSObject *v13;
  dispatch_source_t v14;
  uint64_t **v15;
  dispatch_time_t v16;
  _QWORD v17[5];
  int v18;
  int v19;
  int *v20;

  v19 = a2;
  v3 = *(NSObject **)(a1 + 104);
  if (!v3)
    sub_1003D2D14();
  if (a3 >= 0.0)
  {
    v7 = a1 + 64;
    v6 = *(_QWORD *)(a1 + 64);
    if (!v6)
      goto LABEL_15;
    v8 = a1 + 64;
    do
    {
      v9 = *(_DWORD *)(v6 + 32);
      v10 = v9 < a2;
      if (v9 >= a2)
        v11 = (uint64_t *)v6;
      else
        v11 = (uint64_t *)(v6 + 8);
      if (!v10)
        v8 = v6;
      v6 = *v11;
    }
    while (*v11);
    if (v8 != v7 && *(_DWORD *)(v8 + 32) <= a2 && (v12 = *(void **)(v8 + 40)) != 0)
    {
      v13 = v12;
    }
    else
    {
LABEL_15:
      v14 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, v3);
      if (!v14)
        return;
      v13 = v14;
      v20 = &v19;
      v15 = sub_1001845A4((uint64_t **)(v7 - 8), &v19, (uint64_t)&unk_100472CF8, &v20);
      objc_storeStrong((id *)v15 + 5, v13);
      dispatch_source_set_timer(v13, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0x1DCD6500uLL);
      v17[0] = _NSConcreteStackBlock;
      v17[1] = 3221225472;
      v17[2] = sub_10018454C;
      v17[3] = &unk_100807908;
      v17[4] = a1;
      v18 = v19;
      dispatch_source_set_event_handler(v13, v17);
      dispatch_resume(v13);
    }
    v16 = dispatch_time(0xFFFFFFFFFFFFFFFELL, (uint64_t)(a3 * 1000000000.0));
    dispatch_source_set_timer(v13, v16, 0xFFFFFFFFFFFFFFFFLL, 0x1DCD6500uLL);
    v20 = &v19;
    *((_BYTE *)sub_100184664((uint64_t **)(a1 + 80), &v19, (uint64_t)&unk_100472CF8, &v20) + 32) = 1;

  }
}

void sub_10018453C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t **sub_10018454C(uint64_t a1)
{
  _DWORD *v1;
  uint64_t v2;
  uint64_t **result;
  _DWORD *v4;

  v1 = (_DWORD *)(a1 + 40);
  v2 = *(_QWORD *)(a1 + 32);
  sub_1000061C4(v2, *(unsigned int *)(a1 + 40));
  v4 = v1;
  result = sub_100184664((uint64_t **)(v2 + 80), v1, (uint64_t)&unk_100472CF8, &v4);
  *((_BYTE *)result + 32) = 0;
  return result;
}

uint64_t **sub_1001845A4(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  int v8;
  uint64_t **v9;
  int v10;
  _DWORD *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = operator new(0x30uLL);
    v11[8] = **a4;
    *((_QWORD *)v11 + 5) = 0;
    sub_1000272A8(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

uint64_t **sub_100184664(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  int v8;
  uint64_t **v9;
  int v10;
  _DWORD *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *((_DWORD *)v6 + 7);
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = operator new(0x28uLL);
    v11[7] = **a4;
    *((_BYTE *)v11 + 32) = 0;
    sub_1000272A8(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

_QWORD *sub_100184724@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, off_10080A4D8[a1]);
}

_QWORD *sub_100184738@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, off_10080A530[a1]);
}

_QWORD *sub_10018474C@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, off_10080A578[a1]);
}

_QWORD *sub_100184760@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, off_10080A598[a1]);
}

void sub_100184808(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_100184ECC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_100185014(uint64_t a1, uint64_t a2)
{
  id *WeakRetained;
  NSObject *v4;
  void *v5;
  unsigned __int8 v6;
  NSObject *v7;
  _BOOL4 v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint8_t v25[16];
  uint8_t buf[16];
  uint8_t v27[16];

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  if (a2)
  {
    v4 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v25 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#ses-devicepresence,device discovery activate failed", v25, 2u);
    }
    if (WeakRetained)
    {
      objc_msgSend(WeakRetained[12], "invalidate");
    }
    else
    {
      v9 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
        sub_1003D2D70(v9, v10, v11, v12, v13, v14, v15, v16);
    }
  }
  else
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
    v6 = objc_msgSend(v5, "BOOLForKey:", CFSTR("disableDoubleBoostOnDevicePresenceActivation"));
    v7 = qword_10085F520;
    v8 = os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT);
    if ((v6 & 1) != 0)
    {
      if (v8)
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#ses-devicepresence,double boost on activation disabled by defaults write", buf, 2u);
      }
    }
    else
    {
      if (v8)
      {
        *(_WORD *)v27 = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#ses-devicepresence,Starting double boost on activation of device presence session", v27, 2u);
      }
      if (WeakRetained)
      {
        objc_msgSend(WeakRetained[12], "triggerEnhancedDiscovery:useCase:completion:", CFSTR("device presence session configuration"), 131085, &stru_10080A248);
      }
      else
      {
        v17 = qword_10085F520;
        if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
          sub_1003D2D3C(v17, v18, v19, v20, v21, v22, v23, v24);
      }
    }

  }
}

void sub_1001851C8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1001851E8(id a1, NSError *a2)
{
  NSError *v2;

  v2 = a2;
  if (v2 && os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
    sub_1003D2DA4();

}

void sub_100185480(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100185498(id a1, NSError *a2)
{
  NSError *v2;

  v2 = a2;
  if (v2 && os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
    sub_1003D2DA4();

}

void sub_100185D64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;

  sub_100186108((uint64_t)&a32);
  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_100185F14(uint64_t a1)
{
  id WeakRetained;
  NSObject *v3;
  uint64_t v4;
  id v5;
  uint64_t *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  double v10;
  id v11;
  id *v12;
  _BYTE buf[154];

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  if (WeakRetained)
  {
    v3 = (id)qword_10085F520;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      v4 = *(_QWORD *)(a1 + 64);
      v5 = objc_msgSend(*(id *)(a1 + 32), "hash");
      *(_DWORD *)buf = 134218240;
      *(_QWORD *)&buf[4] = v4;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = v5;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#ses-devicepresence,measurement timeout (%.1fs) fired for device token hash: 0x%lx", buf, 0x16u);
    }

    dispatch_source_cancel(*(dispatch_source_t *)(a1 + 40));
    *(_QWORD *)buf = objc_msgSend(*(id *)(a1 + 32), "hash");
    v6 = sub_1000550B8((_QWORD *)WeakRetained + 34, (unint64_t *)buf);
    if (v6)
      sub_100188100((_QWORD *)WeakRetained + 34, v6);
    objc_msgSend(*((id *)WeakRetained + 8), "clearStateForToken:", *(_QWORD *)(a1 + 32));
    v7 = *(_QWORD *)(a1 + 48);
    v11 = objc_msgSend(*(id *)(a1 + 32), "hash");
    v12 = &v11;
    v8 = sub_100187E74(v7 + 168, (unint64_t *)&v11, (uint64_t)&unk_100472CF8, &v12);
    sub_100268FEC((void *)v8[3], (uint64_t)buf);
    v9 = *((_QWORD *)WeakRetained + 6);
    if (v9)
    {
      v10 = sub_10000883C();
      sub_1002766B0(v9, (uint64_t)buf, v10);
    }
    if (*(_QWORD *)buf)
    {
      *(_QWORD *)&buf[8] = *(_QWORD *)buf;
      operator delete(*(void **)buf);
    }
  }

}

void sub_1001860C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

uint64_t sub_100186108(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  return a1;
}

void sub_100186294(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

BOOL sub_1001862C0(int a1)
{
  _BOOL8 result;

  result = 1;
  if ((a1 - 613) > 0x3A || ((1 << (a1 - 101)) & 0x4A0000000000095) == 0)
    return (a1 - 781) < 2;
  return result;
}

void sub_100186614(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_100186890(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  void *v4;
  va_list va;

  va_start(va, a3);
  sub_10001AE68((uint64_t)va);

  _Unwind_Resume(a1);
}

void sub_100186A6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_100186C24(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_100186C64(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 32))
  {

    *(_BYTE *)(a1 + 32) = 0;
  }
}

void sub_100186D30(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_100186EAC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100186EF4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100186FC0(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_100187028(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_10018716C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_100187188(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  id v4;
  id v5;
  double v6;
  id v7;
  void *v8;
  void *v9;
  NSObject *v10;
  objc_super v11;
  uint8_t buf[16];

  v1 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(v1 + 72))
  {
    v3 = *(_QWORD *)(v1 + 120);
    v4 = objc_msgSend(*(id *)(a1 + 40), "devicePresencePreset");
    v5 = objc_msgSend(*(id *)(a1 + 48), "devicePresencePreset");
    v6 = sub_10000883C();
    sub_10021A424(v3, (uint64_t)v4, (uint64_t)v5, v6);
    sub_100186C64(*(_QWORD *)(a1 + 32) + 128);
    v11.receiver = *(id *)(a1 + 32);
    v11.super_class = (Class)NIServerDevicePresenceSession;
    v7 = objc_msgSendSuper2(&v11, "resourcesManager");
    v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "remote"));
    objc_msgSend(v9, "object:didUpdateRegion:previousRegion:", *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));

  }
  else
  {
    v10 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#ses-devicepresence,#regions, didUpdateRegion:previousRegion. Should deliver is False.", buf, 2u);
    }
  }
}

void sub_1001872A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_100187370(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100187380(uint64_t a1)
{
  id v2;
  void *v3;
  __n128 *v4;
  void *v5;
  unsigned __int32 v6;
  unsigned __int32 v7;
  __n128 v8;
  double v9;
  void *v10;
  objc_super v11;

  v11.receiver = *(id *)(a1 + 32);
  v11.super_class = (Class)NIServerDevicePresenceSession;
  v2 = objc_msgSendSuper2(&v11, "resourcesManager");
  v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  v4 = *(__n128 **)(*(_QWORD *)(a1 + 32) + 120);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "firstObject"));
  objc_msgSend(v5, "boundedRegionRange");
  v7 = v6;
  v8.n128_f64[0] = sub_10000883C();
  v9 = v8.n128_f64[0];
  v8.n128_u32[0] = v7;
  sub_10021A3E8(v4, v8, v9);

  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "remote"));
  objc_msgSend(v10, "didUpdateNearbyObjects:", *(_QWORD *)(a1 + 40));

}

void sub_100187438(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1001875F0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t sub_100187824(uint64_t a1, int a2, __int128 *a3, uint64_t a4, uint64_t a5, uint64_t a6, double a7, double a8)
{
  __int128 v12;

  *(double *)a1 = a7;
  *(double *)(a1 + 8) = a8;
  *(_DWORD *)(a1 + 16) = a2;
  if (*((char *)a3 + 23) < 0)
  {
    sub_100004678((_BYTE *)(a1 + 24), *(void **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v12 = *a3;
    *(_QWORD *)(a1 + 40) = *((_QWORD *)a3 + 2);
    *(_OWORD *)(a1 + 24) = v12;
  }
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  sub_1001530EC((_QWORD *)(a1 + 48), *(const void **)a4, *(_QWORD *)(a4 + 8), *(_QWORD *)(a4 + 8) - *(_QWORD *)a4);
  *(_QWORD *)(a1 + 72) = a5;
  *(_QWORD *)(a1 + 80) = a6;
  return a1;
}

void sub_1001878B0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 47) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1001878CC(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 32))
  {

  }
  return a1;
}

void sub_10018790C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10080A2E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10018791C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10080A2E8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_10018794C(uint64_t a1)
{
  return sub_100265CD0(a1 + 24);
}

uint64_t sub_100187958(uint64_t a1)
{

  return a1;
}

void sub_100187980(uint64_t a1)
{

  operator delete();
}

_QWORD *sub_1001879B8(uint64_t a1)
{
  _QWORD *v2;

  v2 = operator new(0x10uLL);
  *v2 = off_10080A338;
  v2[1] = *(id *)(a1 + 8);
  return v2;
}

id sub_1001879FC(uint64_t a1, _QWORD *a2)
{
  id result;

  *a2 = off_10080A338;
  result = *(id *)(a1 + 8);
  a2[1] = result;
  return result;
}

void sub_100187A30(uint64_t a1)
{

}

void sub_100187A38(id *a1)
{

  operator delete(a1);
}

void sub_100187A60()
{
  NSObject *v0;
  uint8_t v1[16];

  v0 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v1 = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "#ses-devicepresence,ignoring backoff resume recommendation", v1, 2u);
  }
}

uint64_t sub_100187AC4(uint64_t a1, uint64_t a2)
{
  if (sub_10003E27C(a2, (uint64_t)&off_10080A3A8))
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100187B00()
{
  return &off_10080A3A8;
}

uint64_t sub_100187B0C(uint64_t a1)
{

  return a1;
}

void sub_100187B34(uint64_t a1)
{

  operator delete();
}

_QWORD *sub_100187B6C(uint64_t a1)
{
  _QWORD *v2;

  v2 = operator new(0x10uLL);
  *v2 = off_10080A3C8;
  v2[1] = *(id *)(a1 + 8);
  return v2;
}

id sub_100187BB0(uint64_t a1, _QWORD *a2)
{
  id result;

  *a2 = off_10080A3C8;
  result = *(id *)(a1 + 8);
  a2[1] = result;
  return result;
}

void sub_100187BE4(uint64_t a1)
{

}

void sub_100187BEC(id *a1)
{

  operator delete(a1);
}

id sub_100187C14(uint64_t a1, unsigned int *a2)
{
  return _objc_msgSend(*(id *)(a1 + 8), "_handleMotionStateChange:", *a2);
}

uint64_t sub_100187C20(uint64_t a1, uint64_t a2)
{
  if (sub_10003E27C(a2, (uint64_t)&off_10080A438))
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100187C5C()
{
  return &off_10080A438;
}

uint64_t sub_100187C68(uint64_t a1)
{

  return a1;
}

void sub_100187C90(uint64_t a1)
{

  operator delete();
}

_QWORD *sub_100187CC8(uint64_t a1)
{
  _QWORD *v2;

  v2 = operator new(0x10uLL);
  *v2 = off_10080A458;
  v2[1] = *(id *)(a1 + 8);
  return v2;
}

id sub_100187D0C(uint64_t a1, _QWORD *a2)
{
  id result;

  *a2 = off_10080A458;
  result = *(id *)(a1 + 8);
  a2[1] = result;
  return result;
}

void sub_100187D40(uint64_t a1)
{

}

void sub_100187D48(id *a1)
{

  operator delete(a1);
}

id sub_100187D70(uint64_t a1, unsigned int *a2)
{
  return _objc_msgSend(*(id *)(a1 + 8), "_handleScreenStateChange:", *a2);
}

uint64_t sub_100187D7C(uint64_t a1, uint64_t a2)
{
  if (sub_10003E27C(a2, (uint64_t)&off_10080A4C8))
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100187DB8()
{
  return &off_10080A4C8;
}

void sub_100187DC4(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_100187E2C(a2 + 144);
    sub_100187E2C(a2 + 48);
    if (*(char *)(a2 + 47) < 0)
      operator delete(*(void **)(a2 + 24));
    if (*(char *)(a2 + 23) < 0)
      operator delete(*(void **)a2);
    operator delete();
  }
}

uint64_t sub_100187E2C(uint64_t a1)
{
  void *v2;

  if (*(_BYTE *)(a1 + 88))
  {
    v2 = *(void **)(a1 + 48);
    if (v2)
    {
      *(_QWORD *)(a1 + 56) = v2;
      operator delete(v2);
    }
    if (*(char *)(a1 + 47) < 0)
      operator delete(*(void **)(a1 + 24));
  }
  return a1;
}

_QWORD *sub_100187E74(uint64_t a1, unint64_t *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD **v10;
  _QWORD *i;
  unint64_t v12;
  _QWORD *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      for (i = *v10; i; i = (_QWORD *)*i)
      {
        v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == v7)
            return i;
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8)
              v12 %= v8;
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4)
            break;
        }
      }
    }
  }
  v13 = (_QWORD *)(a1 + 16);
  i = operator new(0x20uLL);
  *i = 0;
  i[1] = v7;
  i[2] = **a4;
  i[3] = 0;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    v16 = 1;
    if (v8 >= 3)
      v16 = (v8 & (v8 - 1)) != 0;
    v17 = v16 | (2 * v8);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      v19 = v18;
    else
      v19 = v17;
    sub_10002A900(a1, v19);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v20 = *(_QWORD *)a1;
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v21)
  {
    *i = *v21;
LABEL_38:
    *v21 = i;
    goto LABEL_39;
  }
  *i = *v13;
  *v13 = i;
  *(_QWORD *)(v20 + 8 * v4) = v13;
  if (*i)
  {
    v22 = *(_QWORD *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v22 >= v8)
        v22 %= v8;
    }
    else
    {
      v22 &= v8 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_1001880A0(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  sub_1001880BC(v2, v1);
  _Unwind_Resume(a1);
}

void sub_1001880BC(uint64_t a1, id *a2)
{
  if (*(_BYTE *)(a1 + 8))
  {

  }
  else if (!a2)
  {
    return;
  }
  operator delete(a2);
}

uint64_t sub_100188100(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  id *v3;
  void *__p;
  char v6;

  v2 = *a2;
  sub_10002A5A0(a1, a2, (uint64_t)&__p);
  v3 = (id *)__p;
  __p = 0;
  if (v3)
  {
    if (v6)

    operator delete(v3);
  }
  return v2;
}

_QWORD *sub_100188154(uint64_t a1, unint64_t *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD **v10;
  _QWORD *i;
  unint64_t v12;
  _QWORD *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      for (i = *v10; i; i = (_QWORD *)*i)
      {
        v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == v7)
            return i;
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8)
              v12 %= v8;
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4)
            break;
        }
      }
    }
  }
  v13 = (_QWORD *)(a1 + 16);
  i = operator new(0x20uLL);
  *i = 0;
  i[1] = v7;
  i[2] = **a4;
  i[3] = 0;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    v16 = 1;
    if (v8 >= 3)
      v16 = (v8 & (v8 - 1)) != 0;
    v17 = v16 | (2 * v8);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      v19 = v18;
    else
      v19 = v17;
    sub_10002A900(a1, v19);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v20 = *(_QWORD *)a1;
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v21)
  {
    *i = *v21;
LABEL_38:
    *v21 = i;
    goto LABEL_39;
  }
  *i = *v13;
  *v13 = i;
  *(_QWORD *)(v20 + 8 * v4) = v13;
  if (*i)
  {
    v22 = *(_QWORD *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v22 >= v8)
        v22 %= v8;
    }
    else
    {
      v22 &= v8 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_100188380(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  sub_1001880BC(v2, v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10018839C(uint64_t a1)
{
  void *v2;

  sub_1001883D4(a1, *(id **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_1001883D4(uint64_t a1, id *a2)
{
  id *v2;
  id *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (id *)*v2;

      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void sub_100188410()
{
  void *v0;
  _OWORD *v6;
  _OWORD *v7;
  __int128 v8;
  unint64_t v9;
  __int128 v10;
  uint64_t v11;

  v0 = objc_autoreleasePoolPush();
  v10 = xmmword_10046E628;
  v11 = 0x300000003;
  sub_100182284((uint64_t)&unk_100857288, (int *)&v10, 3);
  xmmword_1008572A0 = xmmword_10046E050;
  *(_OWORD *)algn_1008572B0 = xmmword_10046E060;
  qword_1008572C8 = 0;
  unk_1008572D0 = 0;
  qword_1008572C0 = 0x3FD999999999999ALL;
  unk_1008572D8 = xmmword_10046E070;
  dword_1008572E8 = 5;
  qword_1008572F0 = 0x4000000000000000;
  dword_1008572F8 = 5;
  byte_100857300 = 0;
  *(_QWORD *)&algn_100857301[3] = 0x30000000ALL;
  xmmword_100857310 = xmmword_10046E080;
  unk_100857320 = xmmword_10046E090;
  xmmword_100857330 = xmmword_10046E0A0;
  qword_100857340 = 0x3FE3333333333333;
  dword_100857348 = 3;
  xmmword_100857350 = xmmword_10046E0B0;
  unk_100857360 = xmmword_10046E090;
  xmmword_100857370 = xmmword_10046E080;
  qword_100857380 = 0x3FE3333333333333;
  byte_100857388 = 0;
  xmmword_100857390 = xmmword_10046E0C0;
  unk_1008573A0 = xmmword_10046E0D0;
  __asm { FMOV            V0.2D, #1.0 }
  v8 = _Q0;
  xmmword_1008573B0 = _Q0;
  qword_1008573C0 = 0xBFD3333333333333;
  xmmword_1008573C8 = xmmword_10046E0E0;
  qword_1008573D8 = 0x3E99999A40000000;
  xmmword_1008573E0 = xmmword_10046E060;
  qword_1008573F8 = 0;
  unk_100857400 = 0;
  qword_1008573F0 = 0x3FD999999999999ALL;
  xmmword_100857408 = xmmword_10046E070;
  dword_100857418 = 5;
  qword_100857420 = 0x4000000000000000;
  dword_100857428 = 4;
  qword_100857430 = 0x300000008;
  qword_100857438 = 0xC04E800000000000;
  v9 = 0xC04E800000000000;
  sub_10018252C((uint64_t)&unk_100857440, (double *)&v9, 1);
  xmmword_100857458 = xmmword_10046E0F0;
  qword_100857468 = 0x4024000000000000;
  dword_100857470 = 45;
  byte_100857474 = 0;
  dword_100857478 = 1;
  byte_100857480 = 1;
  xmmword_100857488 = xmmword_10046E100;
  unk_100857498 = xmmword_10046E110;
  xmmword_1008574A8 = v8;
  qword_1008574B8 = 0xC059000000000000;
  xmmword_1008574C0 = xmmword_10046E120;
  qword_1008574D0 = (uint64_t)vdup_n_s32(0x3DCCCCCDu);
  xmmword_1008574D8 = xmmword_10046E060;
  qword_1008574E8 = 0x3FD999999999999ALL;
  qword_1008574F8 = 0;
  qword_1008574F0 = 0;
  xmmword_100857500 = xmmword_10046E070;
  dword_100857510 = 5;
  qword_100857518 = 0x4000000000000000;
  dword_100857520 = 10;
  qword_100857528 = 0x4034000000000000;
  dword_100857530 = 3;
  xmmword_100857538 = xmmword_10046E130;
  __cxa_atexit((void (*)(void *))sub_100180704, &unk_100857288, (void *)&_mh_execute_header);
  qword_100857550 = 0;
  unk_100857558 = 0;
  qword_100857548 = 0;
  v6 = operator new(0x40uLL);
  qword_100857550 = (uint64_t)(v6 + 4);
  unk_100857558 = v6 + 4;
  *v6 = xmmword_10046E640;
  v6[1] = unk_10046E650;
  v6[2] = xmmword_10046E660;
  v6[3] = unk_10046E670;
  qword_100857548 = (uint64_t)v6;
  __cxa_atexit((void (*)(void *))sub_1000325D8, &qword_100857548, (void *)&_mh_execute_header);
  qword_100857568 = 0;
  unk_100857570 = 0;
  qword_100857560 = 0;
  v7 = operator new(0x10uLL);
  qword_100857568 = (uint64_t)(v7 + 1);
  unk_100857570 = v7 + 1;
  *v7 = xmmword_10046E680;
  qword_100857560 = (uint64_t)v7;
  __cxa_atexit((void (*)(void *))sub_1000325D8, &qword_100857560, (void *)&_mh_execute_header);
  objc_autoreleasePoolPop(v0);
}

void sub_100188768(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10003E3F0(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_1001887C4()
{
  operator new();
}

void sub_100188808()
{
  operator delete();
}

uint64_t sub_10018882C(uint64_t a1)
{
  dispatch_queue_t v2;
  void *v3;
  id v4;
  void *v5;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  v2 = dispatch_queue_create("com.apple.nearbyd.systemHealth", 0);
  v3 = *(void **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v2;

  v4 = objc_msgSend(objc_alloc((Class)NSBackgroundActivityScheduler), "initWithIdentifier:", CFSTR("com.apple.nearbyd.systemHealth"));
  v5 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v4;

  objc_msgSend(*(id *)(a1 + 32), "invalidate");
  *(_DWORD *)(a1 + 40) = 0;
  return a1;
}

void sub_1001888A4(_Unwind_Exception *a1)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(a1);
}

uint64_t sub_1001888D4(uint64_t a1)
{
  int v2;
  std::__shared_weak_count *v3;

  objc_msgSend(*(id *)(a1 + 32), "invalidate");
  v2 = *(_DWORD *)(a1 + 40);
  if (v2)
  {
    notify_cancel(v2);
    *(_DWORD *)(a1 + 40) = 0;
  }

  v3 = *(std::__shared_weak_count **)(a1 + 8);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_100188934(uint64_t a1, uint64_t a2)
{
  char v2;
  NSObject *v4;
  _QWORD v5[5];
  char v6;

  v2 = a2;
  if (objc_opt_class(SystemHealthManager, a2))
  {
    v4 = *(NSObject **)(a1 + 24);
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    v5[2] = sub_1001889D8;
    v5[3] = &unk_10080A650;
    v5[4] = a1;
    v6 = v2;
    dispatch_sync(v4, v5);
  }
  else if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
  {
    sub_1003D3074();
  }
}

void sub_1001889D8(uint64_t a1)
{
  uint64_t *v1;
  std::__shared_weak_count *v2;
  uint64_t v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  int v6;
  int v7;
  NSObject *v8;
  const char *v9;
  int v10;
  const char *v11;
  const char *v12;
  NSObject *v13;
  unint64_t *v14;
  unint64_t v15;
  NSObject *v16;
  void *v17;
  unint64_t *v18;
  unint64_t v19;
  _QWORD v20[5];
  std::__shared_weak_count *v21;
  _QWORD handler[5];
  std::__shared_weak_count *v23;
  uint8_t buf[4];
  const char *v25;
  __int16 v26;
  const char *v27;

  v1 = *(uint64_t **)(a1 + 32);
  v3 = *v1;
  v2 = (std::__shared_weak_count *)v1[1];
  if (v2)
  {
    p_shared_weak_owners = (unint64_t *)&v2->__shared_weak_owners_;
    do
      v5 = __ldxr(p_shared_weak_owners);
    while (__stxr(v5 + 1, p_shared_weak_owners));
  }
  v6 = *((_DWORD *)v1 + 4);
  if (*(_BYTE *)(a1 + 40))
    v7 = 1;
  else
    v7 = 2;
  *((_DWORD *)v1 + 4) = v7;
  v8 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    v9 = "None";
    v10 = *((_DWORD *)v1 + 4);
    if (v10 == 1)
      v11 = "Healthy";
    else
      v11 = "None";
    if (v10 == 2)
      v12 = "NotHealthy";
    else
      v12 = v11;
    if (v6 == 1)
      v9 = "Healthy";
    if (v6 == 2)
      v9 = "NotHealthy";
    *(_DWORD *)buf = 136315394;
    v25 = v12;
    v26 = 2080;
    v27 = v9;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#system-health,scheduleSendingOfSystemHealthReport: New report %s. Previously scheduled report %s", buf, 0x16u);
  }
  if (!*((_DWORD *)v1 + 10))
  {
    v13 = v1[3];
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 3321888768;
    handler[2] = sub_100188C94;
    handler[3] = &unk_10080A5B8;
    handler[4] = v3;
    v23 = v2;
    if (v2)
    {
      v14 = (unint64_t *)&v2->__shared_weak_owners_;
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    notify_register_dispatch("com.apple.system.console_mode_changed", (int *)v1 + 10, v13, handler);
    v16 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "#system-health,scheduleSendingOfSystemHealthReport: Registered for game mode changed notifications", buf, 2u);
    }
    if (v23)
      std::__shared_weak_count::__release_weak(v23);
  }
  objc_msgSend((id)v1[4], "invalidate");
  objc_msgSend((id)v1[4], "setQualityOfService:", 17);
  objc_msgSend((id)v1[4], "setInterval:", 60.0);
  objc_msgSend((id)v1[4], "setTolerance:", 30.0);
  objc_msgSend((id)v1[4], "setRepeats:", 0);
  v17 = (void *)v1[4];
  v20[0] = _NSConcreteStackBlock;
  v20[1] = 3321888768;
  v20[2] = sub_100189054;
  v20[3] = &unk_10080A620;
  v20[4] = v3;
  v21 = v2;
  if (v2)
  {
    v18 = (unint64_t *)&v2->__shared_weak_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  objc_msgSend(v17, "scheduleWithBlock:", v20);
  if (v21)
    std::__shared_weak_count::__release_weak(v21);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
}

void sub_100188C58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20)
{
  std::__shared_weak_count *v20;

  if (a20)
    std::__shared_weak_count::__release_weak(a20);
  if (v20)
    std::__shared_weak_count::__release_weak(v20);
  _Unwind_Resume(exception_object);
}

void sub_100188C94(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  NSObject *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint8_t v8[16];
  uint64_t v9;
  std::__shared_weak_count *v10;

  v9 = 0;
  v10 = 0;
  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    v10 = v3;
    if (v3)
    {
      v4 = *(_QWORD *)(a1 + 32);
      v9 = v4;
      if (v4)
      {
        v5 = qword_10085F520;
        if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)v8 = 0;
          _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#system-health,scheduleSendingOfSystemHealthReport: Game mode changed notification fired. Try to send the scheduled health report.", v8, 2u);
        }
        sub_100188DAC(v4);
LABEL_11:
        p_shared_owners = (unint64_t *)&v3->__shared_owners_;
        do
          v7 = __ldaxr(p_shared_owners);
        while (__stlxr(v7 - 1, p_shared_owners));
        if (!v7)
        {
          ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
          std::__shared_weak_count::__release_weak(v3);
        }
        return;
      }
    }
  }
  else
  {
    v3 = 0;
  }
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
    sub_1003D30A0();
  if (v3)
    goto LABEL_11;
}

void sub_100188D98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_10001AE68((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100188DAC(uint64_t a1)
{
  NSObject *v2;
  int v3;
  const char *v4;
  const char *v5;
  int v6;
  NSObject *v7;
  const char *v8;
  int v9;
  void *v10;
  id v11;
  void *v12;
  int v13;
  uint64_t v14;
  _BOOL4 v15;
  uint8_t v16[16];
  _BYTE buf[24];

  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 24));
  v2 = qword_10085F520;
  if (*(_DWORD *)(a1 + 16))
  {
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
    {
      v3 = *(_DWORD *)(a1 + 16);
      v4 = "None";
      if (v3 == 1)
        v4 = "Healthy";
      if (v3 == 2)
        v5 = "NotHealthy";
      else
        v5 = v4;
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v5;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#system-health,_tryToSendScheduledHealthReport: Scheduled report %s", buf, 0xCu);
    }
    *(_QWORD *)buf = 0;
    v6 = *(_DWORD *)(a1 + 40);
    if (!v6 || notify_get_state(v6, (uint64_t *)buf))
    {
      v7 = qword_10085F520;
      if (!os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
      {
LABEL_14:
        v9 = *(_DWORD *)(a1 + 40);
        if (v9)
        {
          notify_cancel(v9);
          *(_DWORD *)(a1 + 40) = 0;
        }
        v10 = *(void **)(a1 + 48);
        if (v10
          || (v11 = objc_alloc_init((Class)SystemHealthManager),
              v12 = *(void **)(a1 + 48),
              *(_QWORD *)(a1 + 48) = v11,
              v12,
              (v10 = *(void **)(a1 + 48)) != 0))
        {
          *(_DWORD *)(a1 + 16) = 0;
          objc_msgSend(v10, "postComponentStatusEventFor:status:withReply:", 8);
        }
        else if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
        {
          sub_1003D30F8();
        }
        return;
      }
      *(_WORD *)v16 = 0;
      v8 = "#system-health,_tryToSendScheduledHealthReport: Game mode unknown. Continue with health report";
LABEL_13:
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, v8, v16, 2u);
      goto LABEL_14;
    }
    v14 = *(_QWORD *)buf;
    v7 = qword_10085F520;
    v15 = os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT);
    if (!v14)
    {
      if (!v15)
        goto LABEL_14;
      *(_WORD *)v16 = 0;
      v8 = "#system-health,_tryToSendScheduledHealthReport: Game mode disabled. Continue with health report";
      goto LABEL_13;
    }
    if (v15)
    {
      *(_WORD *)v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#system-health,_tryToSendScheduledHealthReport: Game mode enabled. Wait until game mode changes to send health report", v16, 2u);
    }
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
      sub_1003D30CC();
    v13 = *(_DWORD *)(a1 + 40);
    if (v13)
    {
      notify_cancel(v13);
      *(_DWORD *)(a1 + 40) = 0;
    }
  }
}

uint64_t sub_100189020(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void sub_100189044(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_100189054(uint64_t a1, void *a2)
{
  id v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  NSObject *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_weak_owners;
  unint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  _QWORD block[4];
  id v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;

  v3 = a2;
  v17 = 0;
  v18 = 0;
  v4 = *(std::__shared_weak_count **)(a1 + 40);
  if (v4)
  {
    v5 = std::__shared_weak_count::lock(v4);
    v18 = v5;
    if (v5)
    {
      v6 = *(_QWORD *)(a1 + 32);
      v17 = v6;
      if (v6)
      {
        v7 = *(NSObject **)(v6 + 24);
        block[0] = _NSConcreteStackBlock;
        block[1] = 3321888768;
        block[2] = sub_1001891B8;
        block[3] = &unk_10080A5F0;
        v8 = *(std::__shared_weak_count **)(a1 + 40);
        v15 = *(_QWORD *)(a1 + 32);
        v16 = v8;
        if (v8)
        {
          p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
          do
            v10 = __ldxr(p_shared_weak_owners);
          while (__stxr(v10 + 1, p_shared_weak_owners));
        }
        v14 = v3;
        dispatch_async(v7, block);

        if (v16)
          std::__shared_weak_count::__release_weak(v16);
LABEL_13:
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v12 = __ldaxr(p_shared_owners);
        while (__stlxr(v12 - 1, p_shared_owners));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
        goto LABEL_17;
      }
    }
  }
  else
  {
    v5 = 0;
  }
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
    sub_1003D3124();
  (*((void (**)(id, uint64_t))v3 + 2))(v3, 1);
  if (v5)
    goto LABEL_13;
LABEL_17:

}

void sub_1001891A0(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  sub_10001AE68(v2 - 48);

  _Unwind_Resume(a1);
}

void sub_1001891B8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  NSObject *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint8_t v8[16];
  uint64_t v9;
  std::__shared_weak_count *v10;

  v9 = 0;
  v10 = 0;
  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    v10 = v3;
    if (v3)
    {
      v4 = a1[5];
      v9 = v4;
      if (v4)
      {
        v5 = qword_10085F520;
        if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)v8 = 0;
          _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#system-health,scheduleSendingOfSystemHealthReport: Background activity fired. Try to send the scheduled health report.", v8, 2u);
        }
        sub_100188DAC(v4);
        (*(void (**)(void))(a1[4] + 16))();
LABEL_11:
        p_shared_owners = (unint64_t *)&v3->__shared_owners_;
        do
          v7 = __ldaxr(p_shared_owners);
        while (__stlxr(v7 - 1, p_shared_owners));
        if (!v7)
        {
          ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
          std::__shared_weak_count::__release_weak(v3);
        }
        return;
      }
    }
  }
  else
  {
    v3 = 0;
  }
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
    sub_1003D3150();
  (*(void (**)(void))(a1[4] + 16))();
  if (v3)
    goto LABEL_11;
}

void sub_1001892DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_10001AE68((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1001892F0(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void sub_100189314(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_100189324(uint64_t a1, int a2, void *a3)
{
  id v5;
  NSObject *v6;
  const char *v7;
  int v8;
  const char *v9;

  v5 = a3;
  v6 = qword_10085F520;
  if (a2)
  {
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
    {
      if (*(_QWORD *)(a1 + 32) == 1)
        v7 = "pass";
      else
        v7 = "fail";
      v8 = 136315138;
      v9 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#system-health,_tryToSendScheduledHealthReport: SystemHealthManager was notified of HW status: %s", (uint8_t *)&v8, 0xCu);
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
  {
    sub_1003D317C((uint64_t)v5, v6);
  }

}

void sub_10018941C(_QWORD *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_10018948C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100189540((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

void sub_1001894A8(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_1001894CC(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
  {
    sub_1001888D4(result);
    operator delete();
  }
  return result;
}

uint64_t sub_100189500(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_100189540(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_1001888D4(result);
    operator delete();
  }
  return result;
}

_QWORD *sub_10018957C@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, off_10080A768[a1]);
}

_QWORD *sub_100189590@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, off_10080A7C0[a1]);
}

_QWORD *sub_1001895A4@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, off_10080A808[a1]);
}

_QWORD *sub_1001895B8@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, off_10080A828[a1]);
}

void sub_100189A14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_100189C8C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_10018A088(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  void *v21;

  _Unwind_Resume(a1);
}

void sub_10018A120(uint64_t a1, uint64_t a2)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
    objc_msgSend(WeakRetained, "_handleSessionBackgroundContinuationAuth:", a2);

}

void sub_10018A164(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_10018A30C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v3;

  _Unwind_Resume(a1);
}

void sub_10018A42C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10018A530(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_10018A640(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;

  a9.super_class = (Class)NIServerNearbyAccessorySession;
  -[_Unwind_Exception dealloc](&a9, "dealloc");
  _Unwind_Resume(a1);
}

void sub_10018A748(uint64_t a1)
{
  id *WeakRetained;
  id *v3;
  id v4;
  void *v5;
  NINearbyObject *v6;
  void *v7;
  NINearbyObject *v8;
  void *v9;
  objc_super v10;

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 48));
  v3 = WeakRetained;
  if (WeakRetained && *((_BYTE *)WeakRetained + 88) != 6)
  {
    v10.receiver = *(id *)(a1 + 32);
    v10.super_class = (Class)NIServerNearbyAccessorySession;
    v4 = objc_msgSendSuper2(&v10, "resourcesManager");
    v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
    v6 = [NINearbyObject alloc];
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3[13], "accessoryDiscoveryToken"));
    v8 = -[NINearbyObject initWithToken:](v6, "initWithToken:", v7);

    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "remote"));
    objc_msgSend(v9, "didGenerateShareableConfigurationData:forObject:", *(_QWORD *)(a1 + 40), v8);

  }
  else if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
  {
    sub_1003D32BC();
  }

}

void sub_10018A858(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_10018AAAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, id a9, char a10)
{
  id *v10;
  uint64_t v11;

  if (LOBYTE(STACK[0x328]))
    sub_1003D32E8((uint64_t)&a10);
  sub_100144868(v11);
  objc_destroyWeak(v10);
  objc_destroyWeak(&a9);
  sub_10015154C((uint64_t)&STACK[0x5D0]);
  _Unwind_Resume(a1);
}

void sub_10018AB28(uint64_t a1)
{
  id *WeakRetained;
  id *v3;
  id v4;
  void *v5;
  void *v6;
  id v7;
  uint64_t v8;
  double v9;
  void *v10;
  id v11;
  void *v12;
  void *v13;
  NSObject *v14;
  objc_super v15;

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 40));
  v3 = WeakRetained;
  if (WeakRetained && *((_BYTE *)WeakRetained + 88) != 6)
  {
    if ((objc_msgSend(WeakRetained[13], "dataExchangeDisabledAndUsingParameterOverrides") & 1) != 0
      || (v4 = *(id *)(a1 + 88),
          v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3[13], "accessoryDiscoveryToken")),
          v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "shortDeviceAddress")),
          v7 = objc_msgSend(v6, "unsignedLongLongValue"),
          v6,
          v5,
          v4 == v7))
    {
      v8 = a1 + 80;
      if ((*(_DWORD *)(a1 + 80) - 1) >= 3)
      {
        v14 = qword_10085F520;
        if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_FAULT))
          sub_1003D3360((int *)(a1 + 80), v14);
      }
      else if (*(_BYTE *)(a1 + 72))
      {
        v9 = *(double *)(a1 + 64);
        v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3[13], "accessoryDiscoveryToken"));
        if (v10)
        {
          v15.receiver = *(id *)(a1 + 32);
          v15.super_class = (Class)NIServerNearbyAccessorySession;
          v11 = objc_msgSendSuper2(&v15, "resourcesManager");
          v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
          v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "lifecycleSupervisor"));
          if (objc_msgSend(v13, "timeoutOnPeerInactivity"))
            objc_msgSend(v13, "measurementReceivedForToken:contTimestamp:", v10, v9);
          objc_msgSend(v3[8], "acceptRoseSolution:", v8 - 32);
          objc_msgSend(v3[12], "measurementReceived");

        }
      }
      else if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
      {
        sub_1003D3334();
      }
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
  {
    sub_1003D3308();
  }

}

void sub_10018AD10(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void *sub_10018AD58(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;

  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 48) = v4;
  sub_10015A39C((_BYTE *)(a1 + 96), a2 + 96);
  sub_100153F08((_BYTE *)(a1 + 656), a2 + 656);
  sub_10015A3F0((__n128 *)(a1 + 808), (__n128 *)(a2 + 808));
  return memcpy((void *)(a1 + 928), (const void *)(a2 + 928), 0x221uLL);
}

void sub_10018ADC4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  if (*(_BYTE *)(v2 + 800))
    sub_1003D33D4(v2);
  sub_100144868(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10018ADF0(uint64_t a1)
{
  void *v2;

  if (*(_BYTE *)(a1 + 920))
  {
    v2 = *(void **)(a1 + 880);
    if (v2)
    {
      *(_QWORD *)(a1 + 888) = v2;
      operator delete(v2);
    }
  }
  if (*(_BYTE *)(a1 + 800))
    sub_10003E3F0(a1 + 672, *(_QWORD **)(a1 + 680));
  return sub_100144868(a1 + 96);
}

void sub_10018AEF8(uint64_t a1)
{
  id *WeakRetained;
  id *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  NSObject *v8;
  const char *v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  objc_super v17;
  uint8_t buf[16];
  objc_super v19;
  void *v20;

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 40));
  v3 = WeakRetained;
  if (!WeakRetained || *((_BYTE *)WeakRetained + 88) == 6)
  {
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
      sub_1003D33E4();
    goto LABEL_17;
  }
  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(unsigned int *)(a1 + 56);
  v19.receiver = *(id *)(a1 + 32);
  v19.super_class = (Class)NIServerNearbyAccessorySession;
  objc_msgSendSuper2(&v19, "serviceRequestDidUpdateStatus:", v4, v5);
  v6 = *(_DWORD *)(a1 + 52);
  if (v6 != 2)
  {
    if (v6 != 3)
      goto LABEL_17;
    v7 = *(_DWORD *)(a1 + 56);
    if (v7 != 8 && v7 != 5)
      goto LABEL_17;
    v8 = qword_10085F520;
    if (!os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
      goto LABEL_14;
    *(_WORD *)buf = 0;
    v9 = "#ses-ecosystem,Stop tracking peer due to FW-generated timeout";
    goto LABEL_13;
  }
  v8 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    v9 = "#ses-ecosystem,Stop tracking peer due to inability to start ranging (even with timeouts)";
LABEL_13:
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, v9, buf, 2u);
  }
LABEL_14:
  v17.receiver = *(id *)(a1 + 32);
  v17.super_class = (Class)NIServerNearbyAccessorySession;
  v10 = objc_msgSendSuper2(&v17, "resourcesManager");
  v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "lifecycleSupervisor"));
  if (objc_msgSend(v12, "timeoutOnPeerInactivity"))
  {
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3[13], "accessoryDiscoveryToken"));
    v20 = v13;
    v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v20, 1));
    objc_msgSend(v12, "stoppedDiscoveringPeersWithTokens:", v14);

  }
  v15 = *(void **)(a1 + 32);
  v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3[13], "accessoryDiscoveryToken"));
  objc_msgSend(v15, "peerInactivityPeriodExceeded:", v16);

LABEL_17:
}

void sub_10018B128(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_10018B22C(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  NSObject *v4;
  id v5;
  void (**v6)(_QWORD, _QWORD);
  void *v7;
  objc_super v8;
  _QWORD v9[3];
  _BYTE v10[24];

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v3 = WeakRetained;
  if (WeakRetained && *((_BYTE *)WeakRetained + 88) != 6)
  {
    v4 = (id)qword_10085F520;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      sub_1002B48E0(*(_DWORD *)(a1 + 48), v9);
      sub_1003D343C((char *)v9, (uint64_t)v10, v4);
    }

    objc_msgSend(v3, "invalidate");
    v8.receiver = *(id *)(a1 + 32);
    v8.super_class = (Class)NIServerNearbyAccessorySession;
    v5 = objc_msgSendSuper2(&v8, "invalidationHandler");
    v6 = (void (**)(_QWORD, _QWORD))objc_claimAutoreleasedReturnValue(v5);
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("com.apple.NearbyInteraction"), -5887, 0));
    ((void (**)(_QWORD, void *))v6)[2](v6, v7);

  }
  else if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
  {
    sub_1003D3410();
  }

}

void sub_10018B384(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_10018B41C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_10018B580(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_10018B62C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10018B698(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10018B7D4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10018BA2C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_10018BC24(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10018BD58(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_10018BD6C(uint64_t a1)
{
  id *WeakRetained;
  id *v3;
  id v4;
  void *v5;
  void *v6;
  _BOOL4 v7;
  NSObject *v8;
  unsigned int v9;
  objc_super v10;
  uint8_t buf[4];
  unsigned int v12;

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 48));
  v3 = WeakRetained;
  if (WeakRetained && *((_BYTE *)WeakRetained + 88) == 2)
  {
    v10.receiver = *(id *)(a1 + 32);
    v10.super_class = (Class)NIServerNearbyAccessorySession;
    v4 = objc_msgSendSuper2(&v10, "resourcesManager");
    v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "appStateMonitor"));
    v7 = objc_msgSend(v6, "currentAppState") == 3;

    if (v7 && objc_msgSend(v3[13], "backgroundMode") == (id)2)
    {
      v8 = (id)qword_10085F520;
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        v9 = objc_msgSend(v5, "clientPid");
        *(_DWORD *)buf = 67109120;
        v12 = v9;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#ses-ecosystem,Client with pid %d isn't visible. Skip sending nearby object", buf, 8u);
      }
    }
    else
    {
      v8 = objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "remote"));
      -[NSObject didUpdateNearbyObjects:](v8, "didUpdateNearbyObjects:", *(_QWORD *)(a1 + 40));
    }

  }
}

void sub_10018BED4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_10018C050(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_10018C068(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  id v4;
  void *v5;
  void *v6;
  objc_super v7;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  v3 = WeakRetained;
  if (WeakRetained && *((_BYTE *)WeakRetained + 88) == 2)
  {
    v7.receiver = *(id *)(a1 + 32);
    v7.super_class = (Class)NIServerNearbyAccessorySession;
    v4 = objc_msgSendSuper2(&v7, "resourcesManager");
    v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "remote"));
    objc_msgSend(v6, "didUpdateAlgorithmState:forObject:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));

  }
}

void sub_10018C100(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_10018C2E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_10018C3E8()
{
  void *v0;
  _OWORD *v6;
  _OWORD *v7;
  __int128 v8;
  unint64_t v9;
  __int128 v10;
  uint64_t v11;

  v0 = objc_autoreleasePoolPush();
  v10 = xmmword_10046EB58;
  v11 = 0x300000003;
  sub_100182284((uint64_t)&unk_100857578, (int *)&v10, 3);
  xmmword_100857590 = xmmword_10046E050;
  unk_1008575A0 = xmmword_10046E060;
  qword_1008575B8 = 0;
  unk_1008575C0 = 0;
  qword_1008575B0 = 0x3FD999999999999ALL;
  unk_1008575C8 = xmmword_10046E070;
  dword_1008575D8 = 5;
  qword_1008575E0 = 0x4000000000000000;
  dword_1008575E8 = 5;
  byte_1008575F0 = 0;
  *(_QWORD *)&algn_1008575F1[3] = 0x30000000ALL;
  xmmword_100857600 = xmmword_10046E080;
  unk_100857610 = xmmword_10046E090;
  xmmword_100857620 = xmmword_10046E0A0;
  qword_100857630 = 0x3FE3333333333333;
  dword_100857638 = 3;
  xmmword_100857640 = xmmword_10046E0B0;
  unk_100857650 = xmmword_10046E090;
  xmmword_100857660 = xmmword_10046E080;
  qword_100857670 = 0x3FE3333333333333;
  byte_100857678 = 0;
  xmmword_100857680 = xmmword_10046E0C0;
  unk_100857690 = xmmword_10046E0D0;
  __asm { FMOV            V0.2D, #1.0 }
  v8 = _Q0;
  xmmword_1008576A0 = _Q0;
  qword_1008576B0 = 0xBFD3333333333333;
  xmmword_1008576B8 = xmmword_10046E0E0;
  qword_1008576C8 = 0x3E99999A40000000;
  xmmword_1008576D0 = xmmword_10046E060;
  qword_1008576E8 = 0;
  unk_1008576F0 = 0;
  qword_1008576E0 = 0x3FD999999999999ALL;
  xmmword_1008576F8 = xmmword_10046E070;
  dword_100857708 = 5;
  qword_100857710 = 0x4000000000000000;
  dword_100857718 = 4;
  qword_100857720 = 0x300000008;
  qword_100857728 = 0xC04E800000000000;
  v9 = 0xC04E800000000000;
  sub_10018252C((uint64_t)&unk_100857730, (double *)&v9, 1);
  xmmword_100857748 = xmmword_10046E0F0;
  qword_100857758 = 0x4024000000000000;
  dword_100857760 = 45;
  byte_100857764 = 0;
  dword_100857768 = 1;
  byte_100857770 = 1;
  xmmword_100857778 = xmmword_10046E100;
  unk_100857788 = xmmword_10046E110;
  xmmword_100857798 = v8;
  qword_1008577A8 = 0xC059000000000000;
  xmmword_1008577B0 = xmmword_10046E120;
  qword_1008577C0 = (uint64_t)vdup_n_s32(0x3DCCCCCDu);
  xmmword_1008577C8 = xmmword_10046E060;
  qword_1008577D8 = 0x3FD999999999999ALL;
  qword_1008577E8 = 0;
  qword_1008577E0 = 0;
  xmmword_1008577F0 = xmmword_10046E070;
  dword_100857800 = 5;
  qword_100857808 = 0x4000000000000000;
  dword_100857810 = 10;
  qword_100857818 = 0x4034000000000000;
  dword_100857820 = 3;
  xmmword_100857828 = xmmword_10046E130;
  __cxa_atexit((void (*)(void *))sub_100180704, &unk_100857578, (void *)&_mh_execute_header);
  qword_100857840 = 0;
  unk_100857848 = 0;
  qword_100857838 = 0;
  v6 = operator new(0x40uLL);
  qword_100857840 = (uint64_t)(v6 + 4);
  unk_100857848 = v6 + 4;
  *v6 = xmmword_10046EB70;
  v6[1] = unk_10046EB80;
  v6[2] = xmmword_10046EB90;
  v6[3] = unk_10046EBA0;
  qword_100857838 = (uint64_t)v6;
  __cxa_atexit((void (*)(void *))sub_1000325D8, &qword_100857838, (void *)&_mh_execute_header);
  qword_100857858 = 0;
  unk_100857860 = 0;
  qword_100857850 = 0;
  v7 = operator new(0x10uLL);
  qword_100857858 = (uint64_t)(v7 + 1);
  unk_100857860 = v7 + 1;
  *v7 = xmmword_10046EBB0;
  qword_100857850 = (uint64_t)v7;
  __cxa_atexit((void (*)(void *))sub_1000325D8, &qword_100857850, (void *)&_mh_execute_header);
  objc_autoreleasePoolPop(v0);
}

void sub_10018C740(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10003E3F0(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_10018C8A8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10018CB7C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

char *sub_10018CB9C(uint64_t a1)
{
  void *v1;
  char *v2;

  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_internalPrintableState"));
  v2 = sub_10002D668(CFSTR("Accessory GATT Manager"), v1);

  return v2;
}

void sub_10018CBE0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10018CC64(uint64_t a1)
{
  id v1;
  void *v2;

  v1 = objc_msgSend(objc_alloc(*(Class *)(a1 + 32)), "_initInternal");
  v2 = (void *)qword_100857868;
  qword_100857868 = (uint64_t)v1;

}

void sub_10018CD80(_QWORD *a1)
{
  void *v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  ListenerTracking *v6;
  void *v7;
  NSObject *v8;
  NSObject *v9;
  uint64_t v10;
  unsigned int v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  PeerTracking *v15;
  void *v16;
  unsigned int v17;
  void *v18;
  void *v19;
  unsigned int v20;
  void *v21;
  void *v22;
  void *v23;
  const char *v24;
  void *v25;
  void *v26;
  uint64_t v27;
  void *v28;
  uint8_t buf[4];
  uint64_t v30;
  __int16 v31;
  uint64_t v32;
  __int16 v33;
  const char *v34;
  __int16 v35;
  unsigned int v36;
  __int16 v37;
  unsigned int v38;
  __int16 v39;
  unsigned int v40;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1[4] + 24), "objectForKeyedSubscript:", a1[5]));

  if (v2)
  {
    v3 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
    {
      v4 = a1[5];
      v5 = a1[6];
      *(_DWORD *)buf = 138412546;
      v30 = v4;
      v31 = 2112;
      v32 = v5;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#bt-accessory,AddServiceListener: existing listener [%@] for peer [%@]", buf, 0x16u);
    }
  }
  else
  {
    v6 = objc_opt_new(ListenerTracking);
    -[ListenerTracking setListener:](v6, "setListener:", a1[7]);
    -[ListenerTracking setPeerIdentifier:](v6, "setPeerIdentifier:", a1[6]);
    -[ListenerTracking setConfiguration:](v6, "setConfiguration:", a1[8]);
    objc_msgSend(*(id *)(a1[4] + 24), "setObject:forKey:", v6, a1[5]);
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1[4] + 32), "objectForKeyedSubscript:", a1[6]));

    v8 = qword_10085F520;
    if (v7)
    {
      v9 = (id)qword_10085F520;
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        v10 = a1[6];
        v27 = a1[5];
        v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1[4] + 32), "objectForKeyedSubscript:", v10));
        v11 = objc_msgSend(v28, "connectionState") - 1;
        if (v11 > 5)
          v12 = "Idle";
        else
          v12 = off_10080AA90[(char)v11];
        v24 = v12;
        v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1[4] + 32), "objectForKeyedSubscript:", a1[6]));
        v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v26, "resultConfigCharacteristics"));
        v17 = objc_msgSend(v25, "count");
        v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1[4] + 32), "objectForKeyedSubscript:", a1[6]));
        v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "cachedConfigCharacteristics"));
        v20 = objc_msgSend(v19, "count");
        v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1[4] + 32), "objectForKeyedSubscript:", a1[6]));
        v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "listeners"));
        *(_DWORD *)buf = 138413570;
        v30 = v27;
        v31 = 2112;
        v32 = v10;
        v33 = 2080;
        v34 = v24;
        v35 = 1024;
        v36 = v17;
        v37 = 1024;
        v38 = v20;
        v39 = 1024;
        v40 = objc_msgSend(v22, "count");
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#bt-accessory,AddServiceListener: new listener [%@] for existing peer [%@]. State: %s. Result: %d blobs. Cached: %d blobs. Previous listener count: %d", buf, 0x32u);

      }
      v15 = (PeerTracking *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1[4] + 32), "objectForKeyedSubscript:", a1[6]));
      v23 = (void *)objc_claimAutoreleasedReturnValue(-[PeerTracking listeners](v15, "listeners"));
      objc_msgSend(v23, "addObject:", a1[5]);

    }
    else
    {
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
      {
        v13 = a1[5];
        v14 = a1[6];
        *(_DWORD *)buf = 138412546;
        v30 = v13;
        v31 = 2112;
        v32 = v14;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#bt-accessory,AddServiceListener: new listener [%@] for new peer [%@]", buf, 0x16u);
      }
      v15 = objc_opt_new(PeerTracking);
      v16 = (void *)objc_claimAutoreleasedReturnValue(-[PeerTracking listeners](v15, "listeners"));
      objc_msgSend(v16, "addObject:", a1[5]);

      objc_msgSend(*(id *)(a1[4] + 32), "setObject:forKey:", v15, a1[6]);
    }

  }
}

void sub_10018D128(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

void sub_10018D25C(uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  NSObject *v9;
  NSObject *v10;
  unsigned int v11;
  const char *v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  void *v28;
  unsigned int v29;
  void *v30;
  void *v31;
  void *v32;
  _BOOL4 v33;
  void *v34;
  _BOOL4 v35;
  id *v36;
  unsigned int v37;
  NSObject *v38;
  _BOOL4 v39;
  uint64_t v40;
  NSObject *v41;
  void *v42;
  _BOOL4 v43;
  NSObject *v44;
  uint64_t v45;
  NSObject *v46;
  uint64_t v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  uint64_t v54;
  void *v55;
  void *v56;
  _QWORD v57[4];
  id v58;
  _QWORD block[4];
  id v60;
  void *v61;
  uint8_t buf[4];
  uint64_t v63;
  __int16 v64;
  void *v65;
  __int16 v66;
  const char *v67;
  __int16 v68;
  unsigned int v69;
  __int16 v70;
  unsigned int v71;

  v2 = (_QWORD *)(a1 + 40);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "objectForKeyedSubscript:", *(_QWORD *)(a1 + 40)));

  if (v3)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "objectForKeyedSubscript:", *(_QWORD *)(a1 + 40)));
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "listener"));

    v56 = v5;
    if (v5)
    {
      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "objectForKeyedSubscript:", *(_QWORD *)(a1 + 40)));
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "peerIdentifier"));

      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "objectForKeyedSubscript:", v7));
      v9 = qword_10085F520;
      if (v8)
      {
        v10 = (id)qword_10085F520;
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        {
          v54 = *(_QWORD *)(a1 + 40);
          v55 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "objectForKeyedSubscript:", v7));
          v11 = objc_msgSend(v55, "connectionState") - 1;
          if (v11 > 5)
            v12 = "Idle";
          else
            v12 = off_10080AA90[(char)v11];
          v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "objectForKeyedSubscript:", v7));
          v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v27, "resultConfigCharacteristics"));
          v29 = objc_msgSend(v28, "count");
          v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "objectForKeyedSubscript:", v7));
          v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v30, "cachedConfigCharacteristics"));
          *(_DWORD *)buf = 138413314;
          v63 = v54;
          v64 = 2112;
          v65 = v7;
          v66 = 2080;
          v67 = v12;
          v68 = 1024;
          v69 = v29;
          v70 = 1024;
          v71 = objc_msgSend(v31, "count");
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#bt-accessory,BackgroundAuthorization: probing authorization for listener [%@] for peer [%@]. State: %s. Result: %d blobs. Cached: %d blobs", buf, 0x2Cu);

        }
        v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "objectForKeyedSubscript:", v7));
        v33 = objc_msgSend(v32, "connectionState") == 0;

        if (v33)
          objc_msgSend(*(id *)(a1 + 32), "_connectToPeer:", v7);
        v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "objectForKeyedSubscript:", v7));
        v35 = objc_msgSend(v34, "connectionState") == 6;

        v36 = *(id **)(a1 + 32);
        if (v35)
        {
          v37 = objc_msgSend(v36, "_isListener:backgroundAuthorizedForPeer:useCache:", *v2, v7, 0);
          v38 = qword_10085F520;
          v39 = os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT);
          if (v37)
          {
            if (v39)
            {
              v40 = *v2;
              *(_DWORD *)buf = 138412546;
              v63 = v40;
              v64 = 2112;
              v65 = v7;
              _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "#bt-accessory,BackgroundAuthorization: listener [%@] for peer [%@] authorized", buf, 0x16u);
            }
            v41 = objc_claimAutoreleasedReturnValue(objc_msgSend(v56, "getQueueForInputingData"));
            block[0] = _NSConcreteStackBlock;
            block[1] = 3221225472;
            block[2] = sub_10018D984;
            block[3] = &unk_1007FB340;
            v60 = v56;
            dispatch_async(v41, block);

          }
          else
          {
            if (v39)
            {
              v47 = *v2;
              *(_DWORD *)buf = 138412546;
              v63 = v47;
              v64 = 2112;
              v65 = v7;
              _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "#bt-accessory,BackgroundAuthorization: listener [%@] for peer [%@] NOT authorized. Re-discover services", buf, 0x16u);
            }
            v48 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "objectForKeyedSubscript:", v7));
            v49 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v48, "peripheral"));
            v50 = (void *)objc_claimAutoreleasedReturnValue(+[CBUUID UUIDWithString:](CBUUID, "UUIDWithString:", CFSTR("48fe3e40-0817-4bb2-8633-3073689c2dba")));
            v61 = v50;
            v51 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v61, 1));
            objc_msgSend(v49, "discoverServices:", v51);

            v52 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "objectForKeyedSubscript:", v7));
            objc_msgSend(v52, "changeConnectionState:", 3);

            v53 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "objectForKeyedSubscript:", v7));
            objc_msgSend(v53, "cacheCharacteristics");

          }
        }
        else
        {
          v42 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v36[4], "objectForKeyedSubscript:", v7));
          v43 = objc_msgSend(v42, "connectionState") == 0;

          if (!v43
            && objc_msgSend(*(id *)(a1 + 32), "_isListener:backgroundAuthorizedForPeer:useCache:", *(_QWORD *)(a1 + 40), v7, 1))
          {
            v44 = qword_10085F520;
            if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
            {
              v45 = *v2;
              *(_DWORD *)buf = 138412546;
              v63 = v45;
              v64 = 2112;
              v65 = v7;
              _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEFAULT, "#bt-accessory,BackgroundAuthorization: listener [%@] for peer [%@] TEMPORARILY authorized pending confirmation", buf, 0x16u);
            }
            v46 = objc_claimAutoreleasedReturnValue(objc_msgSend(v56, "getQueueForInputingData"));
            v57[0] = _NSConcreteStackBlock;
            v57[1] = 3221225472;
            v57[2] = sub_10018D98C;
            v57[3] = &unk_1007FB340;
            v58 = v56;
            dispatch_async(v46, v57);

          }
        }
      }
      else if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
      {
        sub_1003D3630(v2, (uint64_t)v7, v9);
      }

    }
    else
    {
      v20 = qword_10085F520;
      if (!os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
      {
LABEL_32:

        return;
      }
      sub_1003D35C8((uint64_t)v2, v20, v21, v22, v23, v24, v25, v26);
    }
    v5 = v56;
    goto LABEL_32;
  }
  v13 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
    sub_1003D3560((uint64_t)v2, v13, v14, v15, v16, v17, v18, v19);
}

void sub_10018D888(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

id sub_10018D984(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "accessoryGATTServiceAuthorizedBackgroundOperation");
}

id sub_10018D98C(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "accessoryGATTServiceAuthorizedBackgroundOperation");
}

void sub_10018DA10(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  NSObject *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  _BOOL4 v13;
  void *v14;
  void *v15;
  BOOL v16;
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  int v23;
  uint64_t v24;
  __int16 v25;
  void *v26;
  __int16 v27;
  unsigned int v28;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "objectForKeyedSubscript:", *(_QWORD *)(a1 + 40)));

  if (v2)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "objectForKeyedSubscript:", *(_QWORD *)(a1 + 40)));
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "peerIdentifier"));

    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "removeObjectForKey:", *(_QWORD *)(a1 + 40));
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "objectForKeyedSubscript:", v4));
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "listeners"));
    objc_msgSend(v6, "removeObject:", *(_QWORD *)(a1 + 40));

    v7 = (id)qword_10085F520;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      v8 = *(_QWORD *)(a1 + 40);
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "objectForKeyedSubscript:", v4));
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "listeners"));
      v23 = 138412802;
      v24 = v8;
      v25 = 2112;
      v26 = v4;
      v27 = 1024;
      v28 = objc_msgSend(v10, "count");
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#bt-accessory,RemoveServiceListener: listener [%@] for peer [%@]. Listener count after removal: %d", (uint8_t *)&v23, 0x1Cu);

    }
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "objectForKeyedSubscript:", v4));
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "listeners"));
    v13 = objc_msgSend(v12, "count") == 0;

    if (v13)
    {
      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "objectForKeyedSubscript:", v4));
      v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "peripheral"));
      v16 = v15 == 0;

      if (!v16)
      {
        v17 = *(_QWORD *)(a1 + 32);
        v18 = *(void **)(v17 + 16);
        v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v17 + 32), "objectForKeyedSubscript:", v4));
        v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "peripheral"));
        objc_msgSend(v18, "cancelPeripheralConnection:", v20);

      }
      v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "objectForKeyedSubscript:", v4));
      objc_msgSend(v21, "changeConnectionState:", 0);

      v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "objectForKeyedSubscript:", v4));
      objc_msgSend(v22, "cacheCharacteristics");

    }
    objc_msgSend(*(id *)(a1 + 32), "_cleanupExcessiveDetachedPeers");

  }
}

void sub_10018DC8C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t sub_10018DDE4(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_10018DDF4(uint64_t a1)
{

}

void sub_10018DDFC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_internalPrintableState"));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_10018DFE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,id a26)
{
  void *v26;

  _Block_object_dispose(&a21, 8);
  _Unwind_Resume(a1);
}

void sub_10018E01C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  void *v15;
  void *v16;
  id v17;

  v17 = a2;
  v5 = a3;
  v6 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("    [%@]"), v17));
  objc_msgSend(v6, "addObject:", v7);

  v8 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "peerIdentifier"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("        Peer: %@"), v9));
  objc_msgSend(v8, "addObject:", v10);

  v11 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "configuration"));
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "accessoryConfigData"));
  v14 = sub_10002D250(v13, 0);
  v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
  v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("        Config blob: %@"), v15));
  objc_msgSend(v11, "addObject:", v16);

}

void sub_10018E170(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_10018E1D4(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  unsigned int v11;
  const char *v12;
  id v13;
  const char *v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  id v29;
  _QWORD v30[5];
  _QWORD v31[6];

  v29 = a2;
  v5 = a3;
  v6 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("    [%@]"), v29));
  objc_msgSend(v6, "addObject:", v7);

  v8 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "listeners"));
  v10 = objc_msgSend(v9, "count");
  v11 = objc_msgSend(v5, "connectionState") - 1;
  if (v11 > 5)
    v12 = "Idle";
  else
    v12 = off_10080AA90[(char)v11];
  v13 = objc_msgSend(v5, "numCharacteristicsLeftToRead");
  if (objc_msgSend(v5, "readingMultiConfigCharacteristics"))
    v14 = "multi-config";
  else
    v14 = "single-config";
  v15 = *(double *)(a1 + 40);
  objc_msgSend(v5, "initTime");
  v17 = v16;
  v18 = *(double *)(a1 + 40);
  objc_msgSend(v5, "timeOfLatestConnectionState");
  v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("        Listeners: %d. Connection state: %s (%d %s characteristics left to read). Age: total %.2f s, in-state %.2f s"), v10, v12, v13, v14, v15 - v17, v18 - v19));
  objc_msgSend(v8, "addObject:", v20);

  v21 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "resultConfigCharacteristics"));
  v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("        Result: %d blobs"), objc_msgSend(v22, "count")));
  objc_msgSend(v21, "addObject:", v23);

  v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "resultConfigCharacteristics"));
  v31[0] = _NSConcreteStackBlock;
  v31[1] = 3221225472;
  v31[2] = sub_10018E4E0;
  v31[3] = &unk_10080A940;
  v31[4] = *(_QWORD *)(a1 + 32);
  objc_msgSend(v24, "enumerateObjectsUsingBlock:", v31);

  v25 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "cachedConfigCharacteristics"));
  v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("        Cached: %d blobs"), objc_msgSend(v26, "count")));
  objc_msgSend(v25, "addObject:", v27);

  v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "cachedConfigCharacteristics"));
  v30[0] = _NSConcreteStackBlock;
  v30[1] = 3221225472;
  v30[2] = sub_10018E574;
  v30[3] = &unk_10080A940;
  v30[4] = *(_QWORD *)(a1 + 32);
  objc_msgSend(v28, "enumerateObjectsUsingBlock:", v30);

}

void sub_10018E494(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id a15)
{
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_10018E4E0(uint64_t a1, void *a2)
{
  void *v2;
  id v3;
  void *v4;
  id v5;

  v2 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  v3 = sub_10002D250(a2, 0);
  v5 = (id)objc_claimAutoreleasedReturnValue(v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("            Blob: %@"), v5));
  objc_msgSend(v2, "addObject:", v4);

}

void sub_10018E554(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_10018E574(uint64_t a1, void *a2)
{
  void *v2;
  id v3;
  void *v4;
  id v5;

  v2 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  v3 = sub_10002D250(a2, 0);
  v5 = (id)objc_claimAutoreleasedReturnValue(v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("            Blob: %@"), v5));
  objc_msgSend(v2, "addObject:", v4);

}

void sub_10018E5E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_10018EAF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  void *v18;
  void *v19;
  void *v20;
  void *v21;

  _Unwind_Resume(a1);
}

id sub_10018EC0C(uint64_t a1, void *a2)
{
  void *v3;
  id v4;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "identifier"));
  v4 = objc_msgSend(v3, "isEqual:", *(_QWORD *)(a1 + 32));

  return v4;
}

void sub_10018EC4C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id sub_10018EC5C(uint64_t a1, void *a2)
{
  void *v3;
  id v4;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "identifier"));
  v4 = objc_msgSend(v3, "isEqual:", *(_QWORD *)(a1 + 32));

  return v4;
}

void sub_10018EC9C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10018EDB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void sub_10018EDF0(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  NSObject *v6;
  _QWORD v7[4];
  id v8;
  id v9;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "objectForKeyedSubscript:", v3));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "listener"));

  if (v5)
  {
    v6 = objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "getQueueForInputingData"));
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_10018EEF0;
    v7[3] = &unk_1007FA518;
    v8 = v5;
    v9 = *(id *)(a1 + 40);
    dispatch_async(v6, v7);

  }
}

void sub_10018EEC8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id sub_10018EEF0(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "accessoryGATTServiceFailedWithError:", *(_QWORD *)(a1 + 40));
}

void sub_10018F030(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  v7 = v5;

  _Unwind_Resume(a1);
}

void sub_10018F248(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_10018F2A0(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  id v7;
  id v8;

  v8 = a2;
  v5 = a3;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "listeners"));
  v7 = objc_msgSend(v6, "count");

  if (!v7)
    objc_msgSend(*(id *)(a1 + 32), "addObject:", v8);

}

void sub_10018F310(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_10018F454(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id sub_10018F478(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "_connectToPeer:", a2);
}

void sub_10018F6B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_10018F964(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_10018FBB4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_10018FFC4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

BOOL sub_100190088(id a1, CBService *a2, unint64_t a3, BOOL *a4)
{
  void *v4;
  void *v5;
  unsigned __int8 v6;

  v4 = (void *)objc_claimAutoreleasedReturnValue(-[CBService UUID](a2, "UUID", a3, a4));
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[CBUUID UUIDWithString:](CBUUID, "UUIDWithString:", CFSTR("48fe3e40-0817-4bb2-8633-3073689c2dba")));
  v6 = objc_msgSend(v4, "isEqual:", v5);

  return v6;
}

void sub_1001900F0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_100190664(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,void *a24)
{
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;

  _Unwind_Resume(a1);
}

void sub_100190788(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  unsigned int v5;
  void *v6;
  void *v7;
  id v8;

  v8 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "UUID"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[CBUUID UUIDWithString:](CBUUID, "UUIDWithString:", CFSTR("1176cf7b-bed2-4690-bd69-5f34001e820c")));
  v5 = objc_msgSend(v3, "isEqual:", v4);

  if (v5)
  {
    objc_msgSend(*(id *)(a1 + 32), "readValueForCharacteristic:", v8);
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 32), "objectForKeyedSubscript:", *(_QWORD *)(a1 + 48)));
    objc_msgSend(v6, "setReadingMultiConfigCharacteristics:", 1);

    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 32), "objectForKeyedSubscript:", *(_QWORD *)(a1 + 48)));
    objc_msgSend(v7, "setNumCharacteristicsLeftToRead:", objc_msgSend(v7, "numCharacteristicsLeftToRead") + 1);

  }
}

void sub_100190858(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_10019088C(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  unsigned int v5;
  void *v6;
  id v7;

  v7 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "UUID"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[CBUUID UUIDWithString:](CBUUID, "UUIDWithString:", CFSTR("95e8d9d5-d8ef-4721-9a4e-807375f53328")));
  v5 = objc_msgSend(v3, "isEqual:", v4);

  if (v5)
  {
    objc_msgSend(*(id *)(a1 + 32), "readValueForCharacteristic:", v7);
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 32), "objectForKeyedSubscript:", *(_QWORD *)(a1 + 48)));
    objc_msgSend(v6, "setNumCharacteristicsLeftToRead:", objc_msgSend(v6, "numCharacteristicsLeftToRead") + 1);

  }
}

void sub_10019093C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_100191474(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_10019163C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  uint64_t *v6;
  uint64_t v7;
  unsigned int v8;
  NSObject *v9;
  uint64_t v10;
  NSObject *v11;
  id *v12;
  _QWORD *v13;
  _QWORD v14[4];
  id v15;
  _QWORD v16[4];
  id v17;
  uint8_t buf[4];
  id v19;
  __int16 v20;
  uint64_t v21;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "objectForKeyedSubscript:", v3));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "listener"));

  if (v5)
  {
    v7 = *(_QWORD *)(a1 + 40);
    v6 = (uint64_t *)(a1 + 40);
    v8 = objc_msgSend((id)*(v6 - 1), "_isListener:backgroundAuthorizedForPeer:useCache:", v3, v7, 0);
    v9 = qword_10085F520;
    if (v8)
    {
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
      {
        v10 = *v6;
        *(_DWORD *)buf = 138412546;
        v19 = v3;
        v20 = 2112;
        v21 = v10;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#bt-accessory,BackgroundAuthorization: listener [%@] for peer [%@] authorized", buf, 0x16u);
      }
      v11 = objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "getQueueForInputingData"));
      v16[0] = _NSConcreteStackBlock;
      v16[1] = 3221225472;
      v16[2] = sub_100191850;
      v16[3] = &unk_1007FB340;
      v12 = &v17;
      v17 = v5;
      v13 = v16;
    }
    else
    {
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
        sub_1003D3E84();
      v11 = objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "getQueueForInputingData"));
      v14[0] = _NSConcreteStackBlock;
      v14[1] = 3221225472;
      v14[2] = sub_100191858;
      v14[3] = &unk_1007FB340;
      v12 = &v15;
      v15 = v5;
      v13 = v14;
    }
    dispatch_async(v11, v13);

  }
}

void sub_100191820(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id sub_100191850(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "accessoryGATTServiceAuthorizedBackgroundOperation");
}

void sub_100191858(uint64_t a1)
{
  void *v1;
  id v2;

  v1 = *(void **)(a1 + 32);
  v2 = (id)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("com.apple.NearbyInteraction"), -5888, 0));
  objc_msgSend(v1, "accessoryGATTServiceFailedWithError:");

}

void sub_1001918B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

_QWORD *sub_100191910(_QWORD *a1, size_t a2, _BYTE *a3)
{
  size_t v5;
  _BYTE *v6;
  _BYTE *v7;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    v5 = a2;
    sub_10002D7AC(a1, a2);
    v6 = (_BYTE *)a1[1];
    v7 = &v6[v5];
    do
    {
      *v6++ = *a3;
      --v5;
    }
    while (v5);
    a1[1] = v7;
  }
  return a1;
}

void sub_100191970(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1001919AC(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_list va;

  va_start(va, a4);
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, (uint8_t *)va, 0x18u);
}

void sub_100191BDC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100191CAC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_100191CBC(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = dispatch_queue_create("com.apple.RosePowerManagerQueue", 0);
  *(_DWORD *)(a1 + 8) = 1;
  *(_QWORD *)(a1 + 16) = 15000000000;
  sub_100027674(a1 + 24, a2);
  *(_QWORD *)(a1 + 56) = 0;
  sub_1002AC078(a1 + 64);
  return a1;
}

void sub_100191D30(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;

  v3 = v2;

  v5 = *(_QWORD **)(v1 + 48);
  if (v5 == v3)
  {
    v6 = v3;
    v7 = 4;
  }
  else
  {
    if (!v5)
      goto LABEL_6;
    v7 = 5;
    v6 = *(_QWORD **)(v1 + 48);
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_6:

  _Unwind_Resume(a1);
}

uint64_t sub_100191D8C(uint64_t a1)
{
  NSObject *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD block[5];

  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
    sub_1003D3F6C();
  v2 = *(NSObject **)a1;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100191E58;
  block[3] = &unk_1007FA668;
  block[4] = a1;
  dispatch_sync(v2, block);

  v3 = *(_QWORD **)(a1 + 48);
  if (v3 == (_QWORD *)(a1 + 24))
  {
    v4 = 4;
    v3 = (_QWORD *)(a1 + 24);
    goto LABEL_7;
  }
  if (v3)
  {
    v4 = 5;
LABEL_7:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }

  return a1;
}

void sub_100191E58(uint64_t a1)
{
  sub_100191E60(*(_QWORD *)(a1 + 32));
}

void sub_100191E60(uint64_t a1)
{
  NSObject *v2;
  void *v3;
  uint8_t v4[16];

  if (*(_QWORD *)(a1 + 56))
  {
    v2 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "PRRosePowerManager: Cancelling fRoseIdleTimer", v4, 2u);
    }
    dispatch_source_cancel(*(dispatch_source_t *)(a1 + 56));
    v3 = *(void **)(a1 + 56);
    *(_QWORD *)(a1 + 56) = 0;

  }
}

void sub_100191EE8(NSObject **a1)
{
  NSObject *v1;
  _QWORD block[5];

  v1 = *a1;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100191F40;
  block[3] = &unk_1007FA668;
  block[4] = a1;
  dispatch_sync(v1, block);
}

uint64_t sub_100191F40(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  uint64_t result;
  uint8_t v4[16];

  v1 = *(_QWORD *)(a1 + 32);
  v2 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "PRRosePowerManager: initialize", v4, 2u);
  }
  result = sub_100191FB0();
  *(_DWORD *)(v1 + 8) = result;
  return result;
}

uint64_t sub_100191FB0()
{
  void *v0;
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  NSObject *v7;
  NSObject *v8;
  int v10;
  uint64_t v11;

  v0 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v0, "dictionaryRepresentation"));

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "objectForKey:", CFSTR("roseDefaultPowerVoteCount")));
  if (!v3 || (v4 = objc_opt_class(NSNumber, v2), (objc_opt_isKindOfClass(v3, v4) & 1) == 0))
  {
    if (sub_1001FDDF8())
    {
      v8 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v10) = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "PRRosePowerManager: NonUIInstall build", (uint8_t *)&v10, 2u);
      }
    }
    goto LABEL_11;
  }
  v5 = (uint64_t)objc_msgSend(v3, "integerValue");
  v6 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    v10 = 134217984;
    v11 = v5;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "PRRosePowerManager: User Default Exists, roseDefaultPowerVoteCount = %ld", (uint8_t *)&v10, 0xCu);
  }
  if (v5 < 0)
  {
    v7 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
      sub_1003D3F98(v7);
LABEL_11:
    v5 = 1;
  }

  return v5;
}

void sub_100192144(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_100192178(NSObject **a1, uint64_t a2)
{
  NSObject *v2;
  _QWORD v3[6];

  v2 = *a1;
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1001921D0;
  v3[3] = &unk_1008069B8;
  v3[4] = a1;
  v3[5] = a2;
  dispatch_sync(v2, v3);
}

void sub_1001921D0(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  double v4;
  int v5;
  double v6;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    v4 = (double)*(uint64_t *)(a1 + 40) / 1000.0;
    v5 = 134217984;
    v6 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "PRRosePowerManager: idle power down timeout %.3f s", (uint8_t *)&v5, 0xCu);
  }
  *(_QWORD *)(v2 + 16) = 1000000 * *(_QWORD *)(a1 + 40);
}

void sub_1001922A4(NSObject **a1)
{
  NSObject *v1;
  _QWORD block[5];

  v1 = *a1;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1001922FC;
  block[3] = &unk_1007FA668;
  block[4] = a1;
  dispatch_sync(v1, block);
}

void sub_1001922FC(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  int v3;
  uint8_t v4[16];

  v1 = *(_QWORD *)(a1 + 32);
  v2 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "PRRosePowerManager: requestPower", v4, 2u);
  }
  sub_100191E60(v1);
  v3 = *(_DWORD *)(v1 + 8);
  *(_DWORD *)(v1 + 8) = v3 + 1;
  if (!v3)
    sub_1002AC088(v1 + 64);
}

void sub_100192384(NSObject **a1)
{
  NSObject *v1;
  _QWORD block[5];

  v1 = *a1;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1001923DC;
  block[3] = &unk_1007FA668;
  block[4] = a1;
  dispatch_sync(v1, block);
}

void sub_1001923DC(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  int v3;
  NSObject *v4;
  uint8_t v5[16];
  uint8_t buf[16];

  v1 = *(_QWORD *)(a1 + 32);
  v2 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "PRRosePowerManager: releasePower", buf, 2u);
  }
  v3 = *(_DWORD *)(v1 + 8);
  if (!v3)
    goto LABEL_10;
  *(_DWORD *)(v1 + 8) = v3 - 1;
  if (v3 <= 0)
    sub_1003D4010();
  if (v3 == 1 && (sub_1001924DC(v1) & 1) == 0)
  {
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
      sub_1003D4038();
    abort_report_np("PRRosePowerManager: Failed to start RoseIdleTimer.");
LABEL_10:
    v4 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "PRRosePowerManager: releasePower fPowerVoteCount already 0, ignoring.", v5, 2u);
    }
  }
}

uint64_t sub_1001924DC(uint64_t a1)
{
  NSObject *v2;
  _QWORD *v3;
  dispatch_source_t v4;
  void *v5;
  NSObject *v6;
  int64_t v7;
  dispatch_time_t v8;
  NSObject *v9;
  uint64_t v10;
  _QWORD v12[4];
  _QWORD *v13;
  _QWORD v14[5];
  uint8_t buf[4];
  const char *v16;

  v2 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315138;
    v16 = "startRosePowerOffIdleTimer";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "PRRosePowerManager: %s", buf, 0xCu);
  }
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_100192738;
  v14[3] = &unk_1007FA668;
  v14[4] = a1;
  v3 = objc_retainBlock(v14);
  sub_100191E60(a1);
  v4 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, *(dispatch_queue_t *)a1);
  v5 = *(void **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v4;

  v6 = *(NSObject **)(a1 + 56);
  if (v6 && (v7 = *(_QWORD *)(a1 + 16)) != 0)
  {
    v8 = dispatch_time(0, v7);
    dispatch_source_set_timer(v6, v8, 0xFFFFFFFFFFFFFFFFLL, 0xBEBC200uLL);
    v9 = *(NSObject **)(a1 + 56);
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    v12[2] = sub_1001927E0;
    v12[3] = &unk_10080AC38;
    v13 = v3;
    dispatch_source_set_event_handler(v9, v12);
    dispatch_resume(*(dispatch_object_t *)(a1 + 56));

    v10 = 1;
  }
  else
  {
    v10 = 0;
  }

  return v10;
}

uint64_t sub_10019268C(NSObject **a1)
{
  NSObject *v1;
  uint64_t v2;
  _QWORD v4[6];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  char v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2020000000;
  v8 = 0;
  v1 = *a1;
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10019271C;
  v4[3] = &unk_10080AC10;
  v4[4] = &v5;
  v4[5] = a1;
  dispatch_sync(v1, v4);
  v2 = *((unsigned __int8 *)v6 + 24);
  _Block_object_dispose(&v5, 8);
  return v2;
}

uint64_t sub_10019271C(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = *(_DWORD *)(*(_QWORD *)(result + 40) + 8) > 0;
  return result;
}

void sub_100192738(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 32);
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
    sub_1003D4090();
  sub_100191E60(v1);
  if (*(int *)(v1 + 8) >= 1)
  {
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
      sub_1003D4064();
    abort_report_np("PRRosePowerManager: RoseIdleTimer timeout unexpected");
LABEL_9:
    sub_100027BC4();
  }
  v2 = *(_QWORD *)(v1 + 48);
  if (!v2)
    goto LABEL_9;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 48))(v2);
  sub_1002AC1B0(v1 + 64);
}

uint64_t sub_1001927E0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

NSObject ***sub_1001927EC(NSObject ***a1, NSObject **a2)
{
  NSObject *v3;
  _QWORD block[5];

  *a1 = a2;
  v3 = *a2;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1001922FC;
  block[3] = &unk_1007FA668;
  block[4] = a2;
  dispatch_sync(v3, block);
  return a1;
}

NSObject ***sub_100192854(NSObject ***a1)
{
  NSObject **v2;
  NSObject *v3;
  _QWORD block[5];

  v2 = *a1;
  v3 = **a1;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1001923DC;
  block[3] = &unk_1007FA668;
  block[4] = v2;
  dispatch_sync(v3, block);
  return a1;
}

_QWORD *sub_1001928BC@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, off_10080ADD0[a1]);
}

_QWORD *sub_1001928D0@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, off_10080AE28[a1]);
}

_QWORD *sub_1001928E4@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, off_10080AE70[a1]);
}

_QWORD *sub_1001928F8@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, off_10080AE90[a1]);
}

void sub_100192A7C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

char *sub_100192AA4(uint64_t a1)
{
  void *v1;
  char *v2;

  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "allSessionsPrintableState"));
  v2 = sub_10002D428(CFSTR("NIServerSessionManager"), v1);

  return v2;
}

void sub_100192AE8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100192B9C(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_100192C20(_Unwind_Exception *a1)
{
  void *v1;
  os_unfair_lock_s *v2;

  os_unfair_lock_unlock(v2);

  _Unwind_Resume(a1);
}

void sub_100193144(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,void *a39)
{
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  uint64_t v43;

  _Block_object_dispose((const void *)(v43 - 240), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10019325C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_10019326C(uint64_t a1)
{

}

void sub_100193274(uint64_t a1)
{
  NIServerSessionContainer *v2;
  NIServerSessionContainer *v3;
  uint64_t v4;
  void *v5;
  id v6;

  v2 = [NIServerSessionContainer alloc];
  v6 = (id)objc_claimAutoreleasedReturnValue(+[NIServerClient delegateProxyWithConnection:](NIServerClient, "delegateProxyWithConnection:", *(_QWORD *)(a1 + 32)));
  v3 = -[NIServerSessionContainer initWithClient:clientInfo:connection:authorizationManager:](v2, "initWithClient:clientInfo:connection:authorizationManager:");
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v5 = *(void **)(v4 + 40);
  *(_QWORD *)(v4 + 40) = v3;

}

void sub_1001932F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

id sub_100193304(uint64_t a1, uint64_t a2)
{
  id result;

  result = *(id *)(a2 + 56);
  *(_QWORD *)(a1 + 56) = result;
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  return result;
}

void sub_100193338(uint64_t a1)
{

}

id sub_100193340(_QWORD *a1)
{
  objc_msgSend(*(id *)(*(_QWORD *)(a1[6] + 8) + 40), "setAppStateMonitor:", a1[4]);
  objc_msgSend(*(id *)(*(_QWORD *)(a1[6] + 8) + 40), "setActivationGuard:", a1[5]);
  objc_msgSend(*(id *)(*(_QWORD *)(a1[6] + 8) + 40), "setObservationRegistrar:", a1[5]);
  objc_msgSend(*(id *)(*(_QWORD *)(a1[6] + 8) + 40), "setAggregateStateProvider:", a1[5]);
  return _objc_msgSend(*(id *)(*(_QWORD *)(a1[6] + 8) + 40), "setNearbyObjectsCache:", *(_QWORD *)(a1[5] + 48));
}

void sub_1001933B0(uint64_t a1)
{
  NSObject *v2;
  int v3;
  id WeakRetained;
  _DWORD v5[2];

  v2 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_DWORD *)(a1 + 48);
    v5[0] = 67109120;
    v5[1] = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#nisessmgr,connection interrupted for pid: %d", (uint8_t *)v5, 8u);
  }
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "_handleXPCDisconnection:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40));

}

void sub_100193474(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10019348C(uint64_t a1)
{
  NSObject *v2;
  int v3;
  id WeakRetained;
  _DWORD v5[2];

  v2 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_DWORD *)(a1 + 48);
    v5[0] = 67109120;
    v5[1] = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#nisessmgr,connection invalidated for pid: %d", (uint8_t *)v5, 8u);
  }
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "_handleXPCDisconnection:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40));

}

void sub_100193550(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1001939B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25)
{
  void *v25;
  void *v26;
  void *v27;
  void *v28;

  _Unwind_Resume(a1);
}

void sub_100193AA4(uint64_t a1)
{
  NSObject *v2;
  int v3;
  id WeakRetained;
  _DWORD v5[2];

  v2 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_DWORD *)(a1 + 48);
    v5[0] = 67109120;
    v5[1] = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#nisessmgr,connection interrupted for pid: %d", (uint8_t *)v5, 8u);
  }
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "_handleObserverSessionXPCDisconnection:", *(_QWORD *)(a1 + 32));

}

void sub_100193B60(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100193B78(uint64_t a1)
{
  NSObject *v2;
  int v3;
  id WeakRetained;
  _DWORD v5[2];

  v2 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_DWORD *)(a1 + 48);
    v5[0] = 67109120;
    v5[1] = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#nisessmgr,connection invalidated for pid: %d", (uint8_t *)v5, 8u);
  }
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "_handleObserverSessionXPCDisconnection:", *(_QWORD *)(a1 + 32));

}

void sub_100193C34(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100193E78(_Unwind_Exception *a1)
{
  void *v1;
  os_unfair_lock_s *v2;
  void *v3;

  os_unfair_lock_unlock(v2);
  _Unwind_Resume(a1);
}

void sub_10019411C(_Unwind_Exception *a1)
{
  void *v1;
  os_unfair_lock_s *v2;
  void *v3;

  os_unfair_lock_unlock(v2);
  _Unwind_Resume(a1);
}

void sub_100194350(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;
  void *v2;
  void *v3;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_100194554(_Unwind_Exception *a1)
{
  void *v1;
  os_unfair_lock_s *v2;
  void *v3;
  void *v4;

  os_unfair_lock_unlock(v2);
  _Unwind_Resume(a1);
}

void sub_100194930(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,void *a36)
{
  void *v36;
  void *v37;
  void *v38;

  _Unwind_Resume(a1);
}

void sub_100194A38(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  __CFString *v8;
  void *v9;
  id v10;

  v10 = a2;
  v5 = a3;
  v6 = *(void **)(a1 + 32);
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "monitoredProcessName"));
  if (v7)
    v8 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "monitoredProcessName"));
  else
    v8 = CFSTR("???");
  objc_msgSend(v6, "setObject:forKey:", v8, v10);
  if (v7)

  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "printableState"));
  if (v9)
    objc_msgSend(*(id *)(a1 + 40), "setObject:forKey:", v9, v10);

}

void sub_100194AFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_100194B38(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  __CFString *v8;
  void *v9;
  id v10;

  v10 = a2;
  v5 = a3;
  v6 = *(void **)(a1 + 32);
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", v10));
  if (v7)
    v8 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", v10));
  else
    v8 = CFSTR("???");
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("    [%@: %@] %d sessions"), v10, v8, objc_msgSend(v5, "count")));
  objc_msgSend(v6, "addObject:", v9);

  if (v7)
}

void sub_100194C10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_100194C50(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  __CFString *v8;
  void *v9;
  id v10;

  v10 = a2;
  v5 = a3;
  v6 = *(void **)(a1 + 32);
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", v10));
  if (v7)
    v8 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", v10));
  else
    v8 = CFSTR("???");
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("    [%@: %@] %d observers"), v10, v8, objc_msgSend(v5, "count")));
  objc_msgSend(v6, "addObject:", v9);

  if (v7)
}

void sub_100194D28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_100194D68(uint64_t a1, uint64_t a2, void *a3)
{
  _QWORD v4[4];
  id v5;

  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_100194DE8;
  v4[3] = &unk_10080AD38;
  v5 = *(id *)(a1 + 32);
  objc_msgSend(a3, "enumerateObjectsUsingBlock:", v4);

}

void sub_100194DD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{

  _Unwind_Resume(a1);
}

void sub_100194DE8(uint64_t a1, uint64_t a2)
{
  void *v2;
  id v3;

  v2 = *(void **)(a1 + 32);
  v3 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("    %@"), a2));
  objc_msgSend(v2, "addObject:");

}

void sub_100194E3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_100194E50(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  id v8;
  _QWORD v9[4];
  id v10;
  id v11;
  id v12;
  id v13;

  v5 = a2;
  v6 = a3;
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_100194F50;
  v9[3] = &unk_10080AD88;
  v10 = *(id *)(a1 + 32);
  v11 = v5;
  v12 = *(id *)(a1 + 40);
  v13 = v6;
  v7 = v6;
  v8 = v5;
  objc_msgSend(v7, "enumerateObjectsUsingBlock:", v9);

}

void sub_100194F18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, void *a17, void *a18)
{
  void *v18;

  _Unwind_Resume(a1);
}

void sub_100194F50(uint64_t a1, void *a2, int a3)
{
  id v5;
  NSObject *v6;
  id v7;
  void *v8;
  uint64_t v9;
  void *v10;
  __CFString *v11;
  void *v12;
  void *v13;
  _QWORD v14[4];
  id v15;
  _QWORD block[4];
  id v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t, uint64_t);
  void (*v23)(uint64_t);
  id v24;

  v5 = a2;
  v19 = 0;
  v20 = &v19;
  v21 = 0x3032000000;
  v22 = sub_10019325C;
  v23 = sub_10019326C;
  v24 = 0;
  v6 = objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "connectionQueue"));
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100195198;
  block[3] = &unk_10080A8F0;
  v18 = &v19;
  v7 = v5;
  v17 = v7;
  dispatch_sync(v6, block);

  v8 = *(void **)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 40);
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "objectForKeyedSubscript:", v9));
  if (v10)
    v11 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "objectForKeyedSubscript:", *(_QWORD *)(a1 + 40)));
  else
    v11 = CFSTR("???");
  v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("[%@: %@] Session %d of %d"), v9, v11, (a3 + 1), objc_msgSend(*(id *)(a1 + 56), "count")));
  objc_msgSend(v8, "addObject:", v12);

  if (v10)
  v13 = (void *)v20[5];
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_1001951D0;
  v14[3] = &unk_10080AD38;
  v15 = *(id *)(a1 + 32);
  objc_msgSend(v13, "enumerateObjectsUsingBlock:", v14);
  objc_msgSend(*(id *)(a1 + 32), "addObject:", &stru_10081D5E0);

  _Block_object_dispose(&v19, 8);
}

void sub_100195128(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,id a29)
{
  void *v29;
  void *v30;

  _Block_object_dispose(&a24, 8);
  _Unwind_Resume(a1);
}

void sub_100195198(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "printableState"));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_1001951D0(uint64_t a1, uint64_t a2)
{
  void *v2;
  id v3;

  v2 = *(void **)(a1 + 32);
  v3 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("    %@"), a2));
  objc_msgSend(v2, "addObject:");

}

void sub_100195224(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_100195338(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;
  void *v2;
  void *v3;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

id sub_100195374(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "addObservers:");
}

void sub_100195404(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{

  _Unwind_Resume(a1);
}

void sub_100195420(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  id v5;
  uint64_t v6;
  void *i;
  void *v8;
  void *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  _BYTE v15[128];

  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v4 = a3;
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v10, v15, 16);
  if (v5)
  {
    v6 = *(_QWORD *)v11;
    do
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(_QWORD *)v11 != v6)
          objc_enumerationMutation(v4);
        v8 = *(void **)(*((_QWORD *)&v10 + 1) + 8 * (_QWORD)i);
        if (objc_msgSend(v8, "supportsSessionObservers", (_QWORD)v10))
        {
          v14 = *(_QWORD *)(a1 + 32);
          v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v14, 1));
          objc_msgSend(v8, "addObservers:", v9);

        }
      }
      v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v10, v15, 16);
    }
    while (v5);
  }

}

void sub_10019555C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100195614(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{

  _Unwind_Resume(a1);
}

void sub_100195630(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  id v5;
  uint64_t v6;
  void *i;
  void *v8;
  void *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  _BYTE v15[128];

  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v4 = a3;
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v10, v15, 16);
  if (v5)
  {
    v6 = *(_QWORD *)v11;
    do
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(_QWORD *)v11 != v6)
          objc_enumerationMutation(v4);
        v8 = *(void **)(*((_QWORD *)&v10 + 1) + 8 * (_QWORD)i);
        if (objc_msgSend(v8, "supportsSessionObservers", (_QWORD)v10))
        {
          v14 = *(_QWORD *)(a1 + 32);
          v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v14, 1));
          objc_msgSend(v8, "removeObservers:", v9);

        }
      }
      v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v10, v15, 16);
    }
    while (v5);
  }

}

void sub_10019576C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_QWORD *sub_1001957FC@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, off_10080B1D0[a1]);
}

_QWORD *sub_100195810@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, off_10080B228[a1]);
}

_QWORD *sub_100195824@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, off_10080B270[a1]);
}

_QWORD *sub_100195838@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, off_10080B290[a1]);
}

void sub_10019584C(uint64_t a1, void *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  id v15;
  id v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  PRSettingsObserver *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  _BYTE v45[24];
  _BYTE *v46;

  v15 = a2;
  *(_QWORD *)a1 = off_10080AEC0;
  *(_QWORD *)(a1 + 8) = off_10080AF40;
  *(_QWORD *)(a1 + 16) = off_10080AF78;
  *(_QWORD *)(a1 + 32) = 1018212795;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 850045863;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_QWORD *)(a1 + 144) = 850045863;
  *(_QWORD *)(a1 + 136) = 0;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = 850045863;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_QWORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 272) = 850045863;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_QWORD *)(a1 + 328) = 0;
  *(_QWORD *)(a1 + 336) = 850045863;
  *(_QWORD *)(a1 + 392) = 0;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  v16 = v15;
  *(_QWORD *)(a1 + 400) = v16;
  *(_QWORD *)(a1 + 408) = a4;
  *(_QWORD *)(a1 + 416) = a5;
  *(_QWORD *)(a1 + 424) = a6;
  *(_QWORD *)(a1 + 440) = 0;
  *(_QWORD *)(a1 + 448) = 0;
  *(_QWORD *)(a1 + 432) = a7;
  v17 = operator new(0x20uLL);
  *v17 = off_10080B0B0;
  v17[1] = sub_100195EAC;
  v17[2] = 0;
  v17[3] = a1;
  v46 = v17;
  sub_100191D88(a1 + 456, (uint64_t)v45);
  v18 = v46;
  if (v46 == v45)
  {
    v19 = 4;
    v18 = v45;
  }
  else
  {
    if (!v46)
      goto LABEL_6;
    v19 = 5;
  }
  (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_6:
  v20 = (std::__shared_weak_count *)a3[1];
  v43 = *a3;
  v44 = v20;
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldxr(p_shared_owners);
    while (__stxr(v22 + 1, p_shared_owners));
  }
  v23 = (std::__shared_weak_count *)a8[1];
  v41 = *a8;
  v42 = v23;
  if (v23)
  {
    v24 = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  sub_1001FFA90(a1 + 544, v16, &v43, a1 + 456, &v41);
  v26 = v42;
  if (v42)
  {
    v27 = (unint64_t *)&v42->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v29 = v44;
  if (v44)
  {
    v30 = (unint64_t *)&v44->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  v32 = a8[1];
  *(_QWORD *)(a1 + 2248) = *a8;
  *(_QWORD *)(a1 + 2256) = v32;
  if (v32)
  {
    v33 = (unint64_t *)(v32 + 8);
    do
      v34 = __ldxr(v33);
    while (__stxr(v34 + 1, v33));
  }
  *(_BYTE *)(a1 + 2264) = 0;
  *(_BYTE *)(a1 + 2376) = 0;
  *(_BYTE *)(a1 + 2384) = 0;
  *(_WORD *)(a1 + 2477) = 0;
  *(_WORD *)(a1 + 2547) = 0;
  *(_BYTE *)(a1 + 2566) = 0;
  *(_BYTE *)(a1 + 2568) = 0;
  *(_BYTE *)(a1 + 2628) = 0;
  *(_WORD *)(a1 + 2632) = 0;
  v35 = [PRSettingsObserver alloc];
  v36 = (void *)objc_claimAutoreleasedReturnValue(+[PRGlobalDebugSettings sharedSettings](PRGlobalDebugSettings, "sharedSettings"));
  *(_QWORD *)(a1 + 2640) = -[PRSettingsObserver initWithSettings:queue:](v35, "initWithSettings:queue:", v36, *(_QWORD *)(a1 + 400));

  v38 = a3[1];
  *(_QWORD *)(a1 + 2648) = *a3;
  *(_QWORD *)(a1 + 2656) = v38;
  if (v38)
  {
    v39 = (unint64_t *)(v38 + 8);
    do
      v40 = __ldxr(v39);
    while (__stxr(v40 + 1, v39));
  }
  *(_DWORD *)(a1 + 2664) = 4;
  *(_BYTE *)(a1 + 2668) = 1;
  *(_DWORD *)(a1 + 2700) = 0;
  *(_OWORD *)(a1 + 2669) = 0u;
  *(_OWORD *)(a1 + 2685) = 0u;
  *(_QWORD *)(a1 + 2704) = 850045863;
  *(_WORD *)(a1 + 2892) = 0;
  *(_BYTE *)(a1 + 3042) = 0;
  *(_OWORD *)(a1 + 2712) = 0u;
  *(_OWORD *)(a1 + 2728) = 0u;
  *(_OWORD *)(a1 + 2744) = 0u;
  *(_OWORD *)(a1 + 2753) = 0u;
  sub_10028D4BC(a1 + 3048, v37);
  operator new();
}

void sub_100195D60(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::mutex *a10, std::mutex *a11, std::mutex *a12, std::mutex *a13, std::mutex *a14, std::condition_variable *a15, uint64_t a16, uint64_t a17)
{
  operator delete();
}

void sub_100195EAC(uint64_t a1)
{
  NSObject *v2;
  uint8_t v3[16];

  v2 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#roseprovider,powerManagerInvokePowerOffRose", v3, 2u);
  }
  sub_100210350((dispatch_queue_t *)(a1 + 544));
}

void sub_100195F1C(uint64_t a1, int a2)
{
  sub_100195F28(*(_QWORD *)(a1 + 32), a2 ^ 1);
}

void sub_100195F28(uint64_t a1, int a2)
{
  NSObject *v4;
  const char *v5;
  int v6;
  const char *v7;

  v4 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    v5 = "boot";
    if (a2)
      v5 = "DSLP";
    v6 = 136315138;
    v7 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#roseprovider,#lpm powerOnDemand update. Use %s on demand", (uint8_t *)&v6, 0xCu);
  }
  sub_100203C34(a1 + 544, a2);
}

void sub_100195FF8(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  sub_100196000(*(_QWORD *)(a1 + 32), a2, a3);
}

void sub_100196000(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  int v3;
  NSObject *v5;
  NSObject *v6;
  int v7;
  NSObject *v8;
  NSObject *v9;
  NSObject *v10;
  uint8_t *v11;
  NSObject *v12;
  NSObject *v13;
  const char *v14;
  NSObject *v15;
  uint64_t v16;
  uint8_t *v17;
  int v18;
  uint64_t v19;
  void *__p;
  char v21;
  char v22;
  char v23;
  __int128 v24;
  __int128 v25;
  _OWORD v26[2];
  uint8_t buf[8];
  int v28;
  uint64_t v29;
  void *v30;
  char v31;
  char v32;
  char v33;
  __int128 v34;
  __int128 v35;
  _OWORD v36[2];
  _QWORD block[5];
  int v38;
  char v39;
  void *v40;
  char v41;
  char v42;
  int v43;
  char v44;
  uint8_t v45[4];
  uint8_t *v46;

  v3 = a3;
  v38 = 0;
  v39 = 0;
  v42 = 0;
  v43 = a3;
  v44 = BYTE4(a3);
  switch(*a2)
  {
    case 0:
      v5 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#roseprovider,Got RoseState Event: BootStarted", buf, 2u);
      }
      return;
    case 1:
      v12 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#roseprovider,Got RoseState Event: BootError", buf, 2u);
      }
      v7 = 5;
      goto LABEL_26;
    case 2:
      v8 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#roseprovider,Got RoseState Event: BootSuccessful", buf, 2u);
      }
      v7 = 1;
      goto LABEL_26;
    case 3:
      v9 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#roseprovider,Got RoseState Event: AOPJobsReset", buf, 2u);
      }
      v7 = 2;
      goto LABEL_26;
    case 4:
      v6 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#roseprovider,Got RoseState Event: Ready", buf, 2u);
      }
      sub_10019D7B0((uint64_t *)(a1 + 3096), 0);
      v7 = 3;
LABEL_26:
      v38 = v7;
      goto LABEL_35;
    case 5:
      v13 = qword_10085F520;
      if (!os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
        goto LABEL_32;
      *(_WORD *)buf = 0;
      v14 = "#roseprovider,Got RoseState Event: RuntimeError";
      break;
    case 6:
      v13 = qword_10085F520;
      if (!os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
        goto LABEL_32;
      *(_WORD *)buf = 0;
      v14 = "#roseprovider,Got RoseState Event: FirmwareCrash";
      break;
    case 7:
      if (!BYTE4(a3))
        sub_1003D4264();
      sub_10000BF04(buf, off_10080B2B0[(int)a3]);
      v10 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
      {
        v11 = buf;
        if (v29 < 0)
          v11 = *(uint8_t **)buf;
        *(_DWORD *)v45 = 136315138;
        v46 = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#roseprovider,Got RoseState Event: RegulatoryDisallow, Reason: %s", v45, 0xCu);
      }
      v38 = 6;
      if (v3 == 5)
      {
        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472;
        block[2] = sub_10019D7EC;
        block[3] = &unk_1007FA668;
        block[4] = a1;
        if (qword_100857878 != -1)
          dispatch_once(&qword_100857878, block);
      }
      if (SHIBYTE(v29) < 0)
        operator delete(*(void **)buf);
      goto LABEL_35;
    default:
      goto LABEL_35;
  }
  _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, v14, buf, 2u);
LABEL_32:
  v38 = 5;
  v15 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#roseprovider,Clearing inflight sync commands state variables.", buf, 2u);
  }
  std::mutex::lock((std::mutex *)(a1 + 144));
  std::condition_variable::notify_all((std::condition_variable *)(a1 + 32));
  std::mutex::unlock((std::mutex *)(a1 + 144));
LABEL_35:
  sub_10019DF7C((uint64_t)buf, (uint64_t)&v38);
  v16 = *(_QWORD *)(a1 + 408);
  v17 = *(uint8_t **)buf;
  v18 = v28;
  sub_10015A4BC((uint64_t)&v19, (uint64_t)&v29);
  v24 = v34;
  v25 = v35;
  v26[0] = v36[0];
  *(_OWORD *)((char *)v26 + 13) = *(_OWORD *)((char *)v36 + 13);
  sub_10016B99C(v16, (uint64_t *)&v17);
  if (v23 && v22 && v21 < 0)
    operator delete(__p);
  if (v33 && v32 && v31 < 0)
    operator delete(v30);
  if (v42 && v41 < 0)
    operator delete(v40);
}

void sub_1001964C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,char a40,uint64_t a41,char a42)
{
  uint64_t v42;

  if (a21 && a19 && a18 < 0)
    operator delete(__p);
  if (a42 && a40 && a39 < 0)
    operator delete(a34);
  if (*(_BYTE *)(v42 - 96))
  {
    if (*(char *)(v42 - 97) < 0)
      operator delete(*(void **)(v42 - 120));
  }
  _Unwind_Resume(exception_object);
}

void sub_10019655C(uint64_t a1, uint64_t a2)
{
  sub_100196564(*(_QWORD *)(a1 + 32), a2);
}

void sub_100196564(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  void *v15;
  size_t v16;
  __int16 v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  int v23;
  NSObject *v24;
  NSObject *v25;
  __int16 v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  uint64_t v31;
  _BYTE *v32;
  size_t v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  std::mutex *v37;
  __int128 v38;
  NSObject *v39;
  _BOOL4 v40;
  uint64_t v41;
  void *v42;
  int v43;
  NSObject *v44;
  unint64_t v45;
  const char *v46;
  _OWORD *v47;
  NSObject *v48;
  int v49;
  uint64_t v50;
  double v51;
  __int16 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  NSObject *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  size_t v69;
  __int16 v70;
  uint64_t v71;
  uint64_t v72;
  _OWORD *v73;
  unsigned int v74;
  NSObject *v75;
  const char *v76;
  int v77;
  const void *v78;
  size_t v79;
  int v80;
  NSObject *v81;
  void **v82;
  uint64_t v83;
  NSObject *v84;
  double v85;
  size_t v86;
  uint64_t v87;
  uint64_t v88;
  NSObject *v89;
  _BYTE *v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  std::mutex *v95;
  NSObject *v96;
  NSObject *v97;
  int v98;
  double v99;
  NSObject *v100;
  double v101;
  NSObject *v102;
  __int128 v103;
  uint64_t v104;
  NSObject *v105;
  uint64_t v106;
  unsigned __int8 *v107;
  NSObject *v108;
  int v109;
  int v110;
  const char *v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  NSObject *v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  double v126;
  __int16 v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  NSObject *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  std::mutex *v147;
  unint64_t v148;
  const char *v149;
  const char *v150;
  uint64_t v151;
  _BYTE *v152;
  uint64_t v153;
  size_t v154;
  uint64_t v155;
  int v156;
  _QWORD v157[4];
  char v158;
  char v159;
  char v160;
  __int128 v161;
  __int128 v162;
  _OWORD v163[2];
  uint64_t v164;
  int v165;
  _QWORD v166[4];
  char v167;
  char v168;
  char v169;
  __int128 v170;
  __int128 v171;
  _OWORD v172[2];
  uint64_t v173;
  int v174;
  uint64_t v175;
  void *v176;
  char v177;
  char v178;
  char v179;
  __int128 v180;
  __int128 v181;
  _OWORD v182[2];
  int v183;
  _BYTE v184[560];
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  _BYTE v199[80];
  _BYTE v200[329];
  __n128 v201[4];
  void *v202;
  void *v203;
  char v204;
  _BYTE v205[473];
  int v206[452];
  int v207[452];
  void *v208[2];
  __int128 v209;
  __int128 v210;
  uint64_t v211;
  __int128 v212;
  uint64_t v213;
  int v214;
  _BYTE v215[784];
  _BYTE v216[304];
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  uint64_t v223;
  char v224;
  char v225;
  void *v226;
  void *v227;
  char v228;
  char v229;
  char v230;
  char v231;
  char v232;
  char v233;
  char v234;
  char v235;
  char v236;
  int v237;
  _BYTE v238[784];
  _BYTE v239[216];
  __int128 v240;
  __int128 v241;
  __int128 v242;
  __int128 v243;
  __int128 v244;
  char v245;
  char v246;
  char v247;
  char v248;
  void *v249;
  void *v250;
  char v251;
  char v252;
  char v253;
  char v254;
  char v255;
  char v256;
  char v257;
  char v258;
  char v259;
  int v260;
  _BYTE v261[784];
  _BYTE v262[80];
  __int128 v263;
  __int128 v264;
  __int128 v265;
  __int128 v266;
  __int128 v267;
  __int128 v268;
  __int128 v269;
  __int128 v270;
  char v271;
  char v272;
  char v273;
  char v274;
  char v275;
  char v276;
  void *v277;
  void *v278;
  char v279;
  char v280;
  char v281;
  char v282;
  char v283;
  char v284;
  char v285;
  char v286;
  char v287;
  int v288[452];
  __int128 v289;
  uint64_t v290;
  int v291[452];
  int v292[452];
  _BYTE __p[32];
  _BYTE v294[32];
  __int128 v295;
  __int128 v296;
  _BYTE v297[48];
  __int128 v298;
  __int128 v299;
  __int128 v300;
  __int128 v301;
  uint64_t v302;
  char v303;
  __int128 v304;
  __int128 v305;
  __int128 v306;
  __int128 v307;
  __int128 v308;
  __int128 v309;
  __int128 v310;
  __int128 v311;
  __int128 v312;
  __int128 v313;
  __int128 v314;
  __int128 v315;
  __int128 v316;
  __int128 v317;
  __int128 v318;
  uint64_t v319;
  __int128 v320;
  uint64_t v321;
  __int128 v322;
  uint64_t v323;
  char v324;
  _BYTE v325[329];
  __n128 v326[4];
  void *v327;
  void *v328;
  char v329;
  _OWORD v330[30];
  _BYTE v331[552];
  _BYTE v332[552];
  _BYTE v333[102];
  __int128 v334;
  __int128 v335;
  _BYTE v336[26];
  __int128 v337;
  __int128 v338;
  __int128 v339;
  __int128 v340;
  __int128 v341;
  uint64_t v342;
  __int128 v343[13];
  uint64_t v344;

  switch(*(_DWORD *)(a2 + 8))
  {
    case 0xE0:
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
        sub_1003D431C();
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
        sub_1003D42B8();
      v10 = *(unsigned __int8 *)(a2 + 12);
      if (*(_BYTE *)(a2 + 12))
      {
        if (v10 != 2)
        {
          if (v10 == 1)
          {
            sub_10015BCD8((uint64_t)__p, *(unsigned __int16 *)(a2 + 13), a2 + 23, v5, v6, v7, v8, v9, *(double *)a2);
            v11 = *(_QWORD *)(a1 + 408);
            v343[10] = v299;
            v343[11] = v300;
            v343[12] = v301;
            v344 = v302;
            v343[6] = *(_OWORD *)v297;
            v343[7] = *(_OWORD *)&v297[16];
            v343[8] = *(_OWORD *)&v297[32];
            v343[9] = v298;
            v343[2] = *(_OWORD *)v294;
            v343[3] = *(_OWORD *)&v294[16];
            v343[4] = v295;
            v343[5] = v296;
            v343[0] = *(_OWORD *)__p;
            v343[1] = *(_OWORD *)&__p[16];
            sub_10019CF2C(a1, v11, v343);
          }
          return;
        }
        sub_100161100(a2 + 23, 0, v4, v5, v6, v7, v8, v9, (uint64_t)v333);
        sub_10015BBFC(__p, 0, *(unsigned __int16 *)(a2 + 13), v333, *(double *)a2);
        v151 = *(_QWORD *)(a1 + 408);
        sub_10019D9DC((uint64_t)v331, (uint64_t)__p);
        sub_10019D92C(a1, v151, (uint64_t)v331);
        v152 = v331;
      }
      else
      {
        sub_100160928(a2 + 23, 0, v4, v5, v6, v7, v8, v9, (uint64_t)v333);
        sub_10015BBFC(__p, 0, *(unsigned __int16 *)(a2 + 13), v333, *(double *)a2);
        v153 = *(_QWORD *)(a1 + 408);
        sub_10019D9DC((uint64_t)v332, (uint64_t)__p);
        sub_10019D92C(a1, v153, (uint64_t)v332);
        v152 = v332;
      }
      sub_100137328(v152);
      sub_100137328(__p);
      v21 = *(void **)&v333[40];
      if (!*(_QWORD *)&v333[40])
        return;
      *(_QWORD *)&v333[48] = *(_QWORD *)&v333[40];
      goto LABEL_284;
    case 0xE1:
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
        sub_1003D428C();
      *(double *)__p = (double)std::chrono::steady_clock::now().__d_.__rep_;
      *(_DWORD *)&__p[8] = 2;
      __p[16] = 0;
      BYTE8(v295) = 0;
      LOBYTE(v296) = 0;
      BYTE12(v296) = 0;
      v297[0] = 0;
      v297[4] = 0;
      *(_OWORD *)&v297[8] = *(_OWORD *)(a2 + 12);
      *(_OWORD *)&v297[24] = *(_OWORD *)(a2 + 28);
      *(_DWORD *)&v297[40] = *(_DWORD *)(a2 + 44);
      v297[44] = 1;
      v72 = *(_QWORD *)(a1 + 408);
      v173 = *(uint64_t *)__p;
      v174 = 2;
      sub_10015A4BC((uint64_t)&v175, (uint64_t)&__p[16]);
      v180 = v296;
      v181 = *(_OWORD *)v297;
      v182[0] = *(_OWORD *)&v297[16];
      *(_OWORD *)((char *)v182 + 13) = *(_OWORD *)&v297[29];
      sub_10016B99C(v72, &v173);
      if (!v179 || !v178 || (v177 & 0x80000000) == 0)
        goto LABEL_136;
      v42 = v176;
      goto LABEL_135;
    case 0xE2:
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
        sub_1003D4348();
      v48 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
      {
        v49 = *(unsigned __int16 *)(a2 + 12);
        *(_DWORD *)__p = 67109120;
        *(_DWORD *)&__p[4] = v49;
        _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEFAULT, "#roseprovider,Got request status ticket id: %d", __p, 8u);
      }
      sub_10019DFF0((uint64_t)v333, *(_QWORD *)(a2 + 12));
      *(double *)__p = (double)std::chrono::steady_clock::now().__d_.__rep_;
      *(_DWORD *)&__p[8] = 1;
      __p[16] = 0;
      BYTE8(v295) = 0;
      *(_QWORD *)&v296 = *(_QWORD *)v333;
      DWORD2(v296) = *(_DWORD *)&v333[8];
      BYTE12(v296) = 1;
      v297[0] = 0;
      v297[4] = 0;
      v297[8] = 0;
      v297[44] = 0;
      v50 = *(_QWORD *)(a1 + 408);
      v164 = *(uint64_t *)__p;
      v165 = 1;
      sub_10015A4BC((uint64_t)v166, (uint64_t)&__p[16]);
      v170 = v296;
      v171 = *(_OWORD *)v297;
      v172[0] = *(_OWORD *)&v297[16];
      *(_OWORD *)((char *)v172 + 13) = *(_OWORD *)&v297[29];
      sub_10016B99C(v50, &v164);
      if (!v169 || !v168 || (v167 & 0x80000000) == 0)
        goto LABEL_136;
      v42 = (void *)v166[2];
      goto LABEL_135;
    case 0xE3:
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
        sub_1003D4904();
      if (*(_BYTE *)(a2 + 12) == 1)
      {
        v208[1] = 0;
        v208[0] = 0;
        *(_QWORD *)&v209 = 0;
        sub_10003A474(v208, (const void *)(a2 + 31), a2 + 99, 0x44uLL);
        v126 = *(double *)a2;
        v127 = *(_WORD *)(a2 + 13);
        sub_100365F9C(v208, v128, v129, v130, v131, v132, v133, v134, (uint64_t)v333);
        v330[18] = *(_OWORD *)v333;
        *(_DWORD *)__p = 8;
        __p[8] = 0;
        v303 = 0;
        LOBYTE(v304) = 0;
        BYTE8(v317) = 0;
        LOBYTE(v318) = 0;
        v324 = 0;
        v325[0] = 0;
        v325[128] = 0;
        v325[136] = 0;
        v325[216] = 0;
        v325[224] = 0;
        v325[328] = 0;
        v326[0].n128_u8[0] = 0;
        v329 = 0;
        LOBYTE(v330[0]) = 0;
        BYTE8(v330[16]) = 0;
        *(double *)&v330[17] = v126;
        WORD4(v330[17]) = v127;
        v330[19] = *(_OWORD *)&v333[16];
        v330[20] = *(_OWORD *)&v333[32];
        *(_QWORD *)&v330[21] = *(_QWORD *)&v333[48];
        BYTE8(v330[21]) = 1;
        LOBYTE(v330[22]) = 0;
        LOBYTE(v330[25]) = 0;
        BYTE8(v330[25]) = 0;
        BYTE8(v330[29]) = 0;
        v135 = *(_QWORD *)(a1 + 408);
        sub_10019DABC((uint64_t)v291, (uint64_t)__p);
        sub_10016BA8C(v135, v291);
        sub_10016BC44((uint64_t)v291);
        if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
          sub_1003D4374();
        if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
          sub_1003D48D8();
        if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
          sub_1003D4660();
        if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
          sub_1003D45FC();
        v136 = qword_10085F520;
        if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
          sub_1003D4870(v136, v137, v138, v139, v140, v141, v142, v143);
        if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
          sub_1003D4810();
        if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
          sub_1003D47B0();
        if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
          sub_1003D4750();
        if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
          sub_1003D46F0();
        if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
LABEL_262:
          sub_1003D4374();
      }
      else
      {
        if (*(_BYTE *)(a2 + 12))
          return;
        v208[1] = 0;
        v208[0] = 0;
        *(_QWORD *)&v209 = 0;
        sub_10003A474(v208, (const void *)(a2 + 31), a2 + 127, 0x60uLL);
        v51 = *(double *)a2;
        v52 = *(_WORD *)(a2 + 13);
        sub_100364D8C(v208, v53, v54, v55, v56, v57, v58, v59, (uint64_t)v333);
        *(_OWORD *)((char *)&v330[7] + 6) = v334;
        *(_OWORD *)((char *)&v330[8] + 6) = v335;
        *(_OWORD *)((char *)&v330[9] + 6) = *(_OWORD *)v336;
        *(_OWORD *)((char *)&v330[3] + 6) = *(_OWORD *)&v333[38];
        *(_OWORD *)((char *)&v330[4] + 6) = *(_OWORD *)&v333[54];
        *(_OWORD *)((char *)&v330[5] + 6) = *(_OWORD *)&v333[70];
        *(_OWORD *)((char *)&v330[6] + 6) = *(_OWORD *)&v333[86];
        *(_OWORD *)((char *)&v330[1] + 6) = *(_OWORD *)&v333[6];
        *(_OWORD *)((char *)&v330[2] + 6) = *(_OWORD *)&v333[22];
        v330[10] = *(_OWORD *)&v336[10];
        *(_DWORD *)__p = 7;
        __p[8] = 0;
        v303 = 0;
        LOBYTE(v304) = 0;
        BYTE8(v317) = 0;
        LOBYTE(v318) = 0;
        v324 = 0;
        v325[0] = 0;
        v325[128] = 0;
        v325[136] = 0;
        v325[216] = 0;
        v325[224] = 0;
        v325[328] = 0;
        v326[0].n128_u8[0] = 0;
        v329 = 0;
        *(double *)v330 = v51;
        WORD4(v330[0]) = v52;
        LODWORD(v330[1]) = *(_DWORD *)v333;
        WORD2(v330[1]) = *(_WORD *)&v333[4];
        v330[11] = v337;
        v330[12] = v338;
        v330[13] = v339;
        v330[14] = v340;
        v330[15] = v341;
        *(_QWORD *)&v330[16] = v342;
        BYTE8(v330[16]) = 1;
        LOBYTE(v330[17]) = 0;
        BYTE8(v330[21]) = 0;
        LOBYTE(v330[22]) = 0;
        LOBYTE(v330[25]) = 0;
        BYTE8(v330[25]) = 0;
        BYTE8(v330[29]) = 0;
        v60 = *(_QWORD *)(a1 + 408);
        sub_10019DABC((uint64_t)v292, (uint64_t)__p);
        sub_10016BA8C(v60, v292);
        sub_10016BC44((uint64_t)v292);
        if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
          sub_1003D4374();
        if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
          sub_1003D46C4();
        if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
          sub_1003D4660();
        if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
          sub_1003D45FC();
        if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
          sub_1003D4598();
        if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
          sub_1003D4534();
        if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
          sub_1003D44D0();
        if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
          sub_1003D446C();
        if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
          sub_1003D4408();
        v61 = qword_10085F520;
        if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
          sub_1003D43A0(v61, v62, v63, v64, v65, v66, v67, v68);
        if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
          goto LABEL_262;
      }
      sub_10016BC44((uint64_t)__p);
      v21 = v208[0];
      if (v208[0])
      {
        v208[1] = v208[0];
LABEL_284:
        operator delete(v21);
      }
      return;
    case 0xE4:
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
        sub_1003D4930();
      v33 = *(_QWORD *)(a2 + 140);
      v290 = 0;
      v289 = 0uLL;
      sub_10003A474(&v289, (const void *)(a2 + 28), a2 + 28 + v33, v33);
      sub_10036AE34(a1 + 2664, (uint64_t)&v289, v333);
      if (v333[72])
      {
        *(_OWORD *)v208 = *(_OWORD *)v333;
        v34 = *(_QWORD *)&v333[40];
        v35 = *(_OWORD *)&v333[24];
        memset(&v333[24], 0, 48);
        *(_DWORD *)__p = 3;
        v319 = *(_QWORD *)&v333[16];
        __p[8] = 0;
        v303 = 0;
        LOBYTE(v304) = 0;
        BYTE8(v317) = 0;
        v318 = *(_OWORD *)v333;
        v320 = v35;
        v321 = v34;
        v209 = *(unint64_t *)&v333[16];
        v210 = 0uLL;
        v322 = *(_OWORD *)&v333[48];
        v323 = *(_QWORD *)&v333[64];
        v212 = 0uLL;
        v211 = 0;
        v324 = 1;
        v325[0] = 0;
        v325[128] = 0;
        v325[136] = 0;
        v325[216] = 0;
        v325[224] = 0;
        v325[328] = 0;
        v326[0].n128_u8[0] = 0;
        v329 = 0;
        LOBYTE(v330[0]) = 0;
        BYTE8(v330[16]) = 0;
        LOBYTE(v330[17]) = 0;
        BYTE8(v330[21]) = 0;
        LOBYTE(v330[22]) = 0;
        LOBYTE(v330[25]) = 0;
        BYTE8(v330[25]) = 0;
        BYTE8(v330[29]) = 0;
        sub_100150CEC((uint64_t)v208);
        v36 = *(_QWORD *)(a1 + 408);
        sub_10019DABC((uint64_t)v288, (uint64_t)__p);
        sub_10016BA8C(v36, v288);
        sub_10016BC44((uint64_t)v288);
        sub_10016BC44((uint64_t)__p);
      }
      sub_10016BD90((uint64_t)v333);
      goto LABEL_127;
    case 0xE5:
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
        sub_1003D4B38();
      v37 = (std::mutex *)(a1 + 144);
      std::mutex::lock((std::mutex *)(a1 + 144));
      memset(v333, 0, 24);
      v77 = *((_DWORD *)sub_100004784() + 187);
      if (v77)
      {
        v78 = (const void *)(a2 + 28);
        if (v77 == 1)
        {
          v154 = *(unsigned __int8 *)(a2 + 68) - 27 + 68;
          memset(__p, 0, 24);
          sub_10003A474(__p, v78, (uint64_t)v78 + v154, v154);
        }
        else
        {
          if (v77 != 2)
            goto LABEL_289;
          memset(__p, 0, 24);
          sub_10003A474(__p, v78, a2 + 140, 0x70uLL);
        }
        *(_OWORD *)v333 = *(_OWORD *)__p;
        *(_QWORD *)&v333[16] = *(_QWORD *)&__p[16];
      }
      else if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
      {
        sub_1003D4B0C();
      }
LABEL_289:
      sub_10039702C(v333, __p);
      sub_10019E9A4(a1 + 2264);
      sub_10019E9E4((_QWORD *)(a1 + 2264), (__int128 *)__p);
      *(_BYTE *)(a1 + 2376) = 1;
      sub_10000BAB8((uint64_t)v294);
      if ((__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
      atomic_store(1u, (unsigned __int8 *)(a1 + 24));
LABEL_292:
      std::condition_variable::notify_all((std::condition_variable *)(a1 + 32));
      if (*(_QWORD *)v333)
      {
        *(_QWORD *)&v333[8] = *(_QWORD *)v333;
        operator delete(*(void **)v333);
      }
LABEL_294:
      v147 = v37;
LABEL_295:
      std::mutex::unlock(v147);
      return;
    case 0xE6:
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
        sub_1003D4BD4();
      v79 = *(_QWORD *)(a2 + 140);
      memset(__p, 0, 24);
      sub_10003A474(__p, (const void *)(a2 + 28), a2 + 28 + v79, v79);
      v80 = *(_DWORD *)(a2 + 28) & 0x3FF;
      if (v80 == 521)
      {
        sub_100366158(__p, (uint64_t)v333);
        v81 = (id)qword_10085F520;
        if (os_log_type_enabled(v81, OS_LOG_TYPE_DEFAULT))
        {
          sub_100361F6C((uint64_t)v333, (std::string *)v208);
          v82 = (SBYTE7(v209) & 0x80u) == 0 ? v208 : (void **)v208[0];
          LODWORD(v289) = 136315138;
          *(_QWORD *)((char *)&v289 + 4) = v82;
          _os_log_impl((void *)&_mh_execute_header, v81, OS_LOG_TYPE_DEFAULT, "#roseprovider,Coex Critical Event: %s", (uint8_t *)&v289, 0xCu);
          if (SBYTE7(v209) < 0)
            operator delete(v208[0]);
        }

      }
      else
      {
        v118 = qword_10085F520;
        if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
          sub_1003D4B64(v80, v118);
      }
      goto LABEL_237;
    case 0xE7:
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
        sub_1003D4C00();
      v69 = *(_QWORD *)(a2 + 15);
      v290 = 0;
      v289 = 0uLL;
      sub_10003A474(&v289, (const void *)(a2 + 39), a2 + 39 + v69, v69);
      if (*(_BYTE *)(a2 + 12) == 1)
      {
        sub_100366244((uint64_t *)&v289, (uint64_t)v208);
        v70 = *(_WORD *)(a2 + 13);
        *(_QWORD *)v333 = *(_QWORD *)a2;
        *(_WORD *)&v333[8] = v70;
        *(_OWORD *)&v333[16] = *(_OWORD *)v208;
        *(_OWORD *)&v333[32] = v209;
        *(_OWORD *)&v333[48] = v210;
        *(_DWORD *)&v333[64] = v211;
        *(_OWORD *)&v333[72] = v212;
        *(_QWORD *)&v333[88] = v213;
        v213 = 0;
        v212 = 0uLL;
        v333[96] = 0;
        BYTE2(v334) = 0;
        sub_10019E068((uint64_t)__p, (uint64_t *)v333);
        v71 = *(_QWORD *)(a1 + 408);
        sub_10019DABC((uint64_t)v207, (uint64_t)__p);
        sub_10016BA8C(v71, v207);
        sub_10016BC44((uint64_t)v207);
        sub_10016BC44((uint64_t)__p);
        if (*(_QWORD *)&v333[72])
        {
          *(_QWORD *)&v333[80] = *(_QWORD *)&v333[72];
          operator delete(*(void **)&v333[72]);
        }
        if ((_QWORD)v212)
        {
          *((_QWORD *)&v212 + 1) = v212;
          operator delete((void *)v212);
        }
      }
LABEL_127:
      v21 = (void *)v289;
      if (!(_QWORD)v289)
        return;
      *((_QWORD *)&v289 + 1) = v289;
      goto LABEL_284;
    case 0xE8:
      v84 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
      {
        v85 = *(double *)a2;
        *(_DWORD *)__p = 134217984;
        *(double *)&__p[4] = v85;
        _os_log_impl((void *)&_mh_execute_header, v84, OS_LOG_TYPE_DEFAULT, "#roseprovider,Received SPMI Message. Mach absolute time: %f", __p, 0xCu);
      }
      v86 = *(_QWORD *)(a2 + 76);
      memset(__p, 0, 24);
      sub_10003A474(__p, (const void *)(a2 + 12), a2 + 12 + v86, v86);
      sub_10000BF04(v208, "SPMI Message raw bytes:\n");
      v87 = *(_QWORD *)__p;
      v88 = *(_QWORD *)&__p[8];
      sub_10000BF04(&v289, "===========\n");
      sub_1003A21CC((uint64_t)v208, v87, v88 - v87, 4u, (uint64_t)&v289);
      if (SHIBYTE(v290) < 0)
        operator delete((void *)v289);
      if (SBYTE7(v209) < 0)
        operator delete(v208[0]);
      v89 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
      {
        v90 = v333;
        if (v333[23] < 0)
          v90 = *(_BYTE **)v333;
        LODWORD(v208[0]) = 136315138;
        *(void **)((char *)v208 + 4) = v90;
        _os_log_impl((void *)&_mh_execute_header, v89, OS_LOG_TYPE_DEFAULT, "#roseprovider,%s", (uint8_t *)v208, 0xCu);
      }
      if ((v333[23] & 0x80000000) != 0)
        operator delete(*(void **)v333);
LABEL_237:
      v21 = *(void **)__p;
      if (!*(_QWORD *)__p)
        return;
      *(_QWORD *)&__p[8] = *(_QWORD *)__p;
      goto LABEL_284;
    case 0xE9:
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
        sub_1003D4C2C();
      v37 = (std::mutex *)(a1 + 144);
      std::mutex::lock((std::mutex *)(a1 + 144));
      memset(v333, 0, 24);
      sub_10003A474(v333, (const void *)(a2 + 28), a2 + 104, 0x4CuLL);
      sub_1003982A0((uint64_t)v333, (uint64_t)__p);
      if (*(_BYTE *)(a1 + 2628))
        *(_BYTE *)(a1 + 2628) = 0;
      v38 = *(_OWORD *)&__p[16];
      *(_OWORD *)(a1 + 2568) = *(_OWORD *)__p;
      *(_OWORD *)(a1 + 2584) = v38;
      *(_OWORD *)(a1 + 2600) = *(_OWORD *)v294;
      *(_OWORD *)(a1 + 2612) = *(_OWORD *)&v294[12];
      *(_BYTE *)(a1 + 2628) = 1;
      atomic_store(1u, (unsigned __int8 *)(a1 + 25));
      goto LABEL_292;
    case 0xEA:
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
        sub_1003D49C0();
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
        sub_1003D495C();
      sub_10015BD78((uint64_t)__p, *(_WORD *)(a2 + 12), a2 + 14, *(double *)a2);
      v83 = *(_QWORD *)(a1 + 408);
      v260 = 4;
      v261[0] = 0;
      v261[552] = 0;
      v261[560] = 0;
      v261[776] = 0;
      v262[0] = 0;
      v262[72] = 0;
      v267 = v295;
      v268 = v296;
      v269 = *(_OWORD *)v297;
      v270 = *(_OWORD *)&v297[16];
      v263 = *(_OWORD *)__p;
      v264 = *(_OWORD *)&__p[16];
      v265 = *(_OWORD *)v294;
      v266 = *(_OWORD *)&v294[16];
      v271 = 1;
      v272 = 0;
      v273 = 0;
      v274 = 0;
      v275 = 0;
      v276 = 0;
      v279 = 0;
      v280 = 0;
      v281 = 0;
      v282 = 0;
      v283 = 0;
      v284 = 0;
      v285 = 0;
      v286 = 0;
      v287 = 0;
      sub_10016BA8C(v83, &v260);
      v13 = v261;
      v14 = v262;
      if (!v279)
        goto LABEL_171;
      v15 = v277;
      if (!v277)
        goto LABEL_171;
      v278 = v277;
      goto LABEL_170;
    case 0xEB:
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
        sub_1003D4A50();
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
        sub_1003D49EC();
      sub_10015BE1C((uint64_t)__p, *(_WORD *)(a2 + 12), a2 + 14, *(double *)a2);
      v22 = *(_QWORD *)(a1 + 408);
      v237 = 5;
      v238[0] = 0;
      v238[552] = 0;
      v238[560] = 0;
      v238[776] = 0;
      v239[0] = 0;
      v239[72] = 0;
      v239[80] = 0;
      v239[208] = 0;
      v242 = *(_OWORD *)v294;
      v243 = *(_OWORD *)&v294[16];
      v244 = v295;
      v241 = *(_OWORD *)&__p[16];
      v240 = *(_OWORD *)__p;
      v245 = 1;
      v246 = 0;
      v247 = 0;
      v248 = 0;
      v251 = 0;
      v252 = 0;
      v253 = 0;
      v254 = 0;
      v255 = 0;
      v256 = 0;
      v257 = 0;
      v258 = 0;
      v259 = 0;
      sub_10016BA8C(v22, &v237);
      v13 = v238;
      v14 = v239;
      if (!v251)
        goto LABEL_171;
      v15 = v249;
      if (!v249)
        goto LABEL_171;
      v250 = v249;
      goto LABEL_170;
    case 0xEC:
      sub_1003D4D4C();
    case 0xED:
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
        sub_1003D4C58();
      if (*(_BYTE *)(a2 + 12) == 1)
      {
        v26 = *(_WORD *)(a2 + 13);
        v27 = *(double *)a2;
        v28 = *(unsigned __int16 *)(a2 + 15);
        *(_DWORD *)__p = 9;
        __p[8] = 0;
        v303 = 0;
        LOBYTE(v304) = 0;
        BYTE8(v317) = 0;
        LOBYTE(v318) = 0;
        v324 = 0;
        v325[0] = 0;
        v325[128] = 0;
        v325[136] = 0;
        v325[216] = 0;
        v325[224] = 0;
        v325[328] = 0;
        v326[0].n128_u8[0] = 0;
        v329 = 0;
        LOBYTE(v330[0]) = 0;
        BYTE8(v330[16]) = 0;
        LOBYTE(v330[17]) = 0;
        BYTE8(v330[21]) = 0;
        LODWORD(v330[22]) = 0;
        WORD2(v330[22]) = v26;
        *((_QWORD *)&v330[22] + 1) = v28;
        LOBYTE(v330[23]) = 1;
        *((double *)&v330[23] + 1) = v27;
        LOBYTE(v330[24]) = 0;
        BYTE8(v330[24]) = 0;
        LOBYTE(v330[25]) = 1;
        BYTE8(v330[25]) = 0;
        BYTE8(v330[29]) = 0;
        v29 = *(_QWORD *)(a1 + 408);
        sub_10019DABC((uint64_t)v206, (uint64_t)__p);
        sub_10016BA8C(v29, v206);
        sub_10016BC44((uint64_t)v206);
        sub_10016BC44((uint64_t)__p);
      }
      return;
    case 0xEE:
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
        sub_1003D4C84();
      v16 = *(unsigned __int8 *)(a2 + 74);
      memset(v333, 0, 24);
      sub_10003A474(v333, (const void *)(a2 + 75), a2 + 75 + v16, v16);
      v17 = *(_WORD *)(a2 + 12);
      v18 = *(double *)a2;
      v19 = *(_QWORD *)(a2 + 50);
      *(_WORD *)__p = v17;
      memset(&__p[8], 0, 24);
      sub_1001530EC(&__p[8], *(const void **)v333, *(uint64_t *)&v333[8], *(_QWORD *)&v333[8] - *(_QWORD *)v333);
      *(double *)v294 = v18;
      *(_QWORD *)&v294[8] = v19;
      std::mutex::lock((std::mutex *)(a1 + 80));
      v20 = *(_QWORD *)(a1 + 440);
      if (v20)
        (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v20 + 16))(v20, __p);
      std::mutex::unlock((std::mutex *)(a1 + 80));
      if (*(_QWORD *)&__p[8])
      {
        *(_QWORD *)&__p[16] = *(_QWORD *)&__p[8];
        operator delete(*(void **)&__p[8]);
      }
      v21 = *(void **)v333;
      if (!*(_QWORD *)v333)
        return;
      *(_QWORD *)&v333[8] = *(_QWORD *)v333;
      goto LABEL_284;
    case 0xEF:
      std::mutex::lock((std::mutex *)(a1 + 144));
      if (*(_BYTE *)(a1 + 2477))
        *(_BYTE *)(a1 + 2477) = 0;
      v91 = *(_OWORD *)(a2 + 28);
      *(_OWORD *)(a1 + 2384) = *(_OWORD *)(a2 + 12);
      *(_OWORD *)(a1 + 2400) = v91;
      v92 = *(_OWORD *)(a2 + 44);
      v93 = *(_OWORD *)(a2 + 60);
      v94 = *(_OWORD *)(a2 + 76);
      *(_OWORD *)(a1 + 2461) = *(_OWORD *)(a2 + 89);
      *(_OWORD *)(a1 + 2432) = v93;
      *(_OWORD *)(a1 + 2448) = v94;
      *(_OWORD *)(a1 + 2416) = v92;
      *(_BYTE *)(a1 + 2477) = 1;
      std::condition_variable::notify_all((std::condition_variable *)(a1 + 32));
      v95 = (std::mutex *)(a1 + 144);
      goto LABEL_242;
    case 0xF0:
      v73 = (_OWORD *)(a2 + 12);
      v74 = *(unsigned __int8 *)(a2 + 12);
      v75 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
      {
        if ((v74 - 1) > 3u)
          v76 = "GetKeyResponse";
        else
          v76 = off_10080B2E0[(char)(v74 - 1)];
        *(_DWORD *)__p = 136315138;
        *(_QWORD *)&__p[4] = v76;
        _os_log_impl((void *)&_mh_execute_header, v75, OS_LOG_TYPE_DEFAULT, "#roseprovider,Got alisha key - subtype %s", __p, 0xCu);
      }
      if (v74 > 4)
        return;
      if (v74 == 2)
        sub_10019E174((uint64_t)__p, *(double *)a2);
      std::mutex::lock((std::mutex *)(a1 + 144));
      if (*(_BYTE *)(a1 + 2547))
        *(_BYTE *)(a1 + 2547) = 0;
      *(_OWORD *)(a1 + 2478) = *v73;
      v144 = *(_OWORD *)(a2 + 28);
      v145 = *(_OWORD *)(a2 + 44);
      v146 = *(_OWORD *)(a2 + 60);
      *(_QWORD *)(a1 + 2539) = *(_QWORD *)(a2 + 73);
      *(_OWORD *)(a1 + 2510) = v145;
      *(_OWORD *)(a1 + 2526) = v146;
      *(_OWORD *)(a1 + 2494) = v144;
      *(_BYTE *)(a1 + 2547) = 1;
      std::condition_variable::notify_all((std::condition_variable *)(a1 + 32));
      v147 = (std::mutex *)(a1 + 144);
      goto LABEL_295;
    case 0xF1:
      v97 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)__p = 0;
        _os_log_impl((void *)&_mh_execute_header, v97, OS_LOG_TYPE_DEFAULT, "#roseprovider,Got ranging block update", __p, 2u);
      }
      v98 = *(_DWORD *)(a2 + 15);
      if ((v98 - 24) < 2)
      {
        v99 = *(double *)a2;
        *(_WORD *)__p = *(_WORD *)(a2 + 13);
        *(double *)&__p[8] = v99;
        operator new();
      }
      if (v98 == 16)
        sub_10019E228((uint64_t)__p, a2 + 12, *(double *)a2);
      return;
    case 0xF2:
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
        sub_1003D4CB0();
      v30 = *(double *)a2;
      *(_OWORD *)((char *)&v330[27] + 2) = *(_OWORD *)(a2 + 12);
      *(_OWORD *)((char *)&v330[28] + 2) = *(_OWORD *)(a2 + 28);
      *(_QWORD *)&v330[29] = *(_QWORD *)(a2 + 42);
      *(_DWORD *)__p = 10;
      __p[8] = 0;
      v303 = 0;
      LOBYTE(v304) = 0;
      BYTE8(v317) = 0;
      LOBYTE(v318) = 0;
      v324 = 0;
      v325[0] = 0;
      v325[128] = 0;
      v325[136] = 0;
      v325[216] = 0;
      v325[224] = 0;
      v325[328] = 0;
      v326[0].n128_u8[0] = 0;
      v329 = 0;
      LOBYTE(v330[0]) = 0;
      BYTE8(v330[16]) = 0;
      LOBYTE(v330[17]) = 0;
      BYTE8(v330[21]) = 0;
      LOBYTE(v330[22]) = 0;
      LOBYTE(v330[25]) = 0;
      *((double *)&v330[25] + 1) = v30;
      LOBYTE(v330[26]) = 0;
      BYTE8(v330[26]) = 0;
      LOWORD(v330[27]) = WORD1(v330[27]);
      BYTE8(v330[29]) = 1;
      v183 = 10;
      v31 = *(_QWORD *)(a1 + 408);
      sub_10015A39C(v184, (uint64_t)&__p[8]);
      v195 = v314;
      v196 = v315;
      v197 = v316;
      v198 = v317;
      v191 = v310;
      v192 = v311;
      v193 = v312;
      v194 = v313;
      v187 = v306;
      v188 = v307;
      v189 = v308;
      v190 = v309;
      v185 = v304;
      v186 = v305;
      sub_10016BC8C(v199, (uint64_t)&v318);
      memcpy(v200, v325, sizeof(v200));
      sub_10015A3F0(v201, v326);
      memcpy(v205, v330, sizeof(v205));
      sub_10016BA8C(v31, &v183);
      if (v204 && v202)
      {
        v203 = v202;
        operator delete(v202);
      }
      sub_10016BD90((uint64_t)v199);
      sub_100144868((uint64_t)v184);
      if (v329 && v327)
      {
        v328 = v327;
        operator delete(v327);
      }
      sub_10016BD90((uint64_t)&v318);
      v32 = &__p[8];
      goto LABEL_172;
    case 0xF3:
      v100 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)__p = 0;
        _os_log_impl((void *)&_mh_execute_header, v100, OS_LOG_TYPE_DEFAULT, "#roseprovider,Got alisha range response", __p, 2u);
      }
      v101 = *(double *)a2;
      *(_WORD *)__p = *(_WORD *)(a2 + 12);
      *(double *)&__p[8] = v101;
      operator new();
    case 0xF4:
      v96 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)__p = 0;
        _os_log_impl((void *)&_mh_execute_header, v96, OS_LOG_TYPE_DEFAULT, "#roseprovider,Got alisha session stats", __p, 2u);
      }
      sub_10019E2D0((uint64_t)__p, a2 + 12, *(double *)a2);
    case 0xF5:
      v104 = *(unsigned __int8 *)(a2 + 20);
      v105 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__p = 67109120;
        *(_DWORD *)&__p[4] = v104;
        _os_log_impl((void *)&_mh_execute_header, v105, OS_LOG_TYPE_DEFAULT, "#roseprovider,#aop-activity, AOP Activity summary report (part 1). Num jobs: %d", __p, 8u);
      }
      if ((_DWORD)v104)
      {
        v106 = 0;
        v107 = (unsigned __int8 *)(a2 + 24);
        do
        {
          v108 = qword_10085F520;
          if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
          {
            v109 = *(unsigned __int16 *)(v107 - 3);
            v110 = *v107;
            switch(*(v107 - 1))
            {
              case 0u:
                v111 = "GRBroadcastingBeacon";
                break;
              case 1u:
                v111 = "GRSingleResponseSurvey";
                break;
              case 2u:
                v111 = "GRTranspondingBeacon";
                break;
              case 3u:
                v111 = "GRDoubleResponseSurvey";
                break;
              case 4u:
                v111 = "GRSymmetricalMultiPeer";
                break;
              case 5u:
                v111 = "GRNoDataSymmetricalSinglePeer";
                break;
              default:
                v111 = "Alisha_CCC";
                switch(*(v107 - 1))
                {
                  case 'd':
                    v111 = "P2P";
                    break;
                  case 'e':
                    v111 = "PTS";
                    break;
                  case 'g':
                    v111 = "FiRa";
                    break;
                  case 'h':
                    v111 = "TestNMI";
                    break;
                  case 'i':
                    v111 = "NMI";
                    break;
                  case 'j':
                    v111 = "Alisha_ACWG";
                    break;
                  default:
                    goto LABEL_223;
                }
                break;
            }
LABEL_223:
            *(_DWORD *)__p = 67109890;
            *(_DWORD *)&__p[4] = v106;
            *(_WORD *)&__p[8] = 1024;
            *(_DWORD *)&__p[10] = v109;
            *(_WORD *)&__p[14] = 1024;
            *(_DWORD *)&__p[16] = v110;
            *(_WORD *)&__p[20] = 2080;
            *(_QWORD *)&__p[22] = v111;
            _os_log_impl((void *)&_mh_execute_header, v108, OS_LOG_TYPE_DEFAULT, "#roseprovider,#aop-activity, [Job #%d] ticket id: [%d], is ranging: [%u], type: [%s]", __p, 0x1Eu);
          }
          ++v106;
          v107 += 4;
        }
        while (v104 != v106);
      }
      v37 = (std::mutex *)(a1 + 144);
      std::mutex::lock((std::mutex *)(a1 + 144));
      if (*(_BYTE *)(a1 + 2892))
        *(_BYTE *)(a1 + 2892) = 0;
      v112 = *(_OWORD *)(a2 + 12);
      v113 = *(_OWORD *)(a2 + 28);
      v114 = *(_OWORD *)(a2 + 60);
      *(_OWORD *)(a1 + 2800) = *(_OWORD *)(a2 + 44);
      *(_OWORD *)(a1 + 2816) = v114;
      *(_OWORD *)(a1 + 2768) = v112;
      *(_OWORD *)(a1 + 2784) = v113;
      v115 = *(_OWORD *)(a2 + 76);
      v116 = *(_OWORD *)(a2 + 92);
      v117 = *(_OWORD *)(a2 + 108);
      *(_OWORD *)(a1 + 2876) = *(_OWORD *)(a2 + 120);
      *(_OWORD *)(a1 + 2848) = v116;
      *(_OWORD *)(a1 + 2864) = v117;
      *(_OWORD *)(a1 + 2832) = v115;
      *(_BYTE *)(a1 + 2892) = 1;
      goto LABEL_228;
    case 0xF6:
      v39 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)__p = 0;
        _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "#roseprovider,#time-convert got time conversion state", __p, 2u);
      }
      v40 = *(unsigned __int8 *)(a2 + 12) == 1;
      *(double *)__p = (double)std::chrono::steady_clock::now().__d_.__rep_;
      *(_DWORD *)&__p[8] = 4;
      __p[16] = 0;
      BYTE8(v295) = 0;
      LOBYTE(v296) = 0;
      BYTE12(v296) = 0;
      *(_DWORD *)v297 = v40;
      v297[4] = 1;
      v297[8] = 0;
      v297[44] = 0;
      v41 = *(_QWORD *)(a1 + 408);
      v155 = *(uint64_t *)__p;
      v156 = 4;
      sub_10015A4BC((uint64_t)v157, (uint64_t)&__p[16]);
      v161 = v296;
      v162 = *(_OWORD *)v297;
      v163[0] = *(_OWORD *)&v297[16];
      *(_OWORD *)((char *)v163 + 13) = *(_OWORD *)&v297[29];
      sub_10016B99C(v41, &v155);
      if (!v160 || !v159 || (v158 & 0x80000000) == 0)
        goto LABEL_136;
      v42 = (void *)v157[2];
LABEL_135:
      operator delete(v42);
LABEL_136:
      if (!BYTE8(v295) || !v294[24] || (v294[23] & 0x80000000) == 0)
        return;
      v21 = *(void **)v294;
      goto LABEL_284;
    case 0xF7:
      v102 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)__p = 0;
        _os_log_impl((void *)&_mh_execute_header, v102, OS_LOG_TYPE_DEFAULT, "#roseprovider,#time-convert got time conversion result", __p, 2u);
      }
      v37 = (std::mutex *)(a1 + 144);
      std::mutex::lock((std::mutex *)(a1 + 144));
      if (*(_BYTE *)(a1 + 2566))
        *(_BYTE *)(a1 + 2566) = 0;
      v103 = *(_OWORD *)(a2 + 12);
      *(_WORD *)(a1 + 2564) = *(_WORD *)(a2 + 28);
      *(_OWORD *)(a1 + 2548) = v103;
      *(_BYTE *)(a1 + 2566) = 1;
LABEL_228:
      std::condition_variable::notify_all((std::condition_variable *)(a1 + 32));
      goto LABEL_294;
    case 0xF8:
      v23 = *(unsigned __int16 *)(a2 + 32);
      v24 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__p = 67109120;
        *(_DWORD *)&__p[4] = v23;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "#roseprovider,Got LPEM enable response. Status: %d", __p, 8u);
      }
      if (v23)
      {
        v25 = qword_10085F520;
        if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_FAULT))
          sub_1003D4CDC(v23, v25);
      }
      return;
    case 0xF9:
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
        sub_1003D4AE0();
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
        sub_1003D4A7C();
      sub_10015BED8((uint64_t)__p, *(_WORD *)(a2 + 12), a2 + 14, *(double *)a2);
      v12 = *(_QWORD *)(a1 + 408);
      v214 = 11;
      v215[0] = 0;
      v215[552] = 0;
      v215[560] = 0;
      v215[776] = 0;
      v216[0] = 0;
      v216[72] = 0;
      v216[80] = 0;
      v216[208] = 0;
      v216[216] = 0;
      v216[296] = 0;
      v221 = v295;
      v222 = v296;
      v217 = *(_OWORD *)__p;
      v218 = *(_OWORD *)&__p[16];
      v219 = *(_OWORD *)v294;
      v220 = *(_OWORD *)&v294[16];
      v223 = *(_QWORD *)v297;
      v224 = 1;
      v225 = 0;
      v228 = 0;
      v229 = 0;
      v230 = 0;
      v231 = 0;
      v232 = 0;
      v233 = 0;
      v234 = 0;
      v235 = 0;
      v236 = 0;
      sub_10016BA8C(v12, &v214);
      v13 = v215;
      v14 = v216;
      if (!v228)
        goto LABEL_171;
      v15 = v226;
      if (!v226)
        goto LABEL_171;
      v227 = v226;
LABEL_170:
      operator delete(v15);
LABEL_171:
      sub_10016BD90((uint64_t)v14);
      v32 = v13;
LABEL_172:
      sub_100144868((uint64_t)v32);
      return;
    case 0xFA:
      v37 = (std::mutex *)(a1 + 336);
      std::mutex::lock((std::mutex *)(a1 + 336));
      *(_WORD *)(a1 + 2632) = *(unsigned __int8 *)(a2 + 12) | 0x100;
      v43 = *(unsigned __int8 *)(a2 + 14);
      v44 = (id)qword_10085F520;
      if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
      {
        if (!*(_BYTE *)(a1 + 2633))
          sub_10000BA44();
        v45 = *(char *)(a1 + 2632);
        if (v45 > 2)
          v46 = "";
        else
          v46 = off_10080B320[v45];
        v148 = *(char *)(a2 + 13);
        if (v148 > 3)
          v149 = "";
        else
          v149 = off_10080B300[v148];
        v150 = "Y";
        *(_DWORD *)__p = 136315650;
        *(_QWORD *)&__p[4] = v46;
        *(_WORD *)&__p[12] = 2080;
        if (!v43)
          v150 = "N";
        *(_QWORD *)&__p[14] = v149;
        *(_WORD *)&__p[22] = 2080;
        *(_QWORD *)&__p[24] = v150;
        _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEFAULT, "#roseprovider,#deep-slp DeepSleepReport state %s, lastReq %s successful? %s", __p, 0x20u);
      }

      goto LABEL_294;
    case 0xFB:
      if (*(_QWORD *)(a1 + 2248))
      {
        memset(__p, 0, 24);
        sub_10019D8D0(a1, (uint64_t)__p, *(double *)a2);
        sub_10027BAAC(*(_QWORD *)(a1 + 2248), (uint64_t)__p, a2 + 12);
      }
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
        sub_1003D4D74();
      return;
    case 0xFC:
      if (*(_BYTE *)(a2 + 112) == 100)
      {
        if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
          sub_1003D4DF4();
      }
      else
      {
        if (*(_QWORD *)(a1 + 2248))
        {
          memset(__p, 0, 24);
          sub_10019D8D0(a1, (uint64_t)__p, *(double *)a2);
          sub_10027B818(*(_QWORD *)(a1 + 2248), (uint64_t)__p, a2 + 12);
        }
        if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
          sub_1003D4E6C();
      }
      return;
    case 0xFD:
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
        sub_1003D4EE4();
      *(_QWORD *)__p = *(_QWORD *)a2;
      operator new();
    case 0xFE:
      if (*(_QWORD *)(a1 + 2248))
      {
        memset(__p, 0, 24);
        sub_10019D8D0(a1, (uint64_t)__p, *(double *)a2);
        sub_10027BCA0(*(_QWORD *)(a1 + 2248), (uint64_t)__p, (unsigned __int16 *)(a2 + 12));
      }
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
        sub_1003D4F6C();
      return;
    case 0xFF:
      v47 = (_OWORD *)(a2 + 14);
      if (*(_WORD *)(a2 + 12) == 1)
      {
        std::mutex::lock((std::mutex *)(a1 + 144));
        if (*(_BYTE *)(a1 + 3042))
          *(_BYTE *)(a1 + 3042) = 0;
        v119 = *(_OWORD *)(a2 + 30);
        *(_OWORD *)(a1 + 2893) = *v47;
        *(_OWORD *)(a1 + 2909) = v119;
        v120 = *(_OWORD *)(a2 + 46);
        v121 = *(_OWORD *)(a2 + 62);
        v122 = *(_OWORD *)(a2 + 94);
        *(_OWORD *)(a1 + 2957) = *(_OWORD *)(a2 + 78);
        *(_OWORD *)(a1 + 2973) = v122;
        *(_OWORD *)(a1 + 2925) = v120;
        *(_OWORD *)(a1 + 2941) = v121;
        v123 = *(_OWORD *)(a2 + 110);
        v124 = *(_OWORD *)(a2 + 126);
        v125 = *(_OWORD *)(a2 + 142);
        *(_QWORD *)(a1 + 3034) = *(_QWORD *)(a2 + 155);
        *(_OWORD *)(a1 + 3005) = v124;
        *(_OWORD *)(a1 + 3021) = v125;
        *(_OWORD *)(a1 + 2989) = v123;
        *(_BYTE *)(a1 + 3042) = 1;
        std::condition_variable::notify_all((std::condition_variable *)(a1 + 32));
        v95 = (std::mutex *)(a1 + 144);
LABEL_242:
        std::mutex::unlock(v95);
      }
      else if (!*(_WORD *)(a2 + 12))
      {
        if (*(_QWORD *)(a1 + 2248))
        {
          memset(__p, 0, 24);
          sub_10019D8D0(a1, (uint64_t)__p, *(double *)a2);
          sub_10027BEF8(*(_QWORD *)(a1 + 2248), (uint64_t)__p, a2 + 14);
        }
        if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
          sub_1003D5018();
      }
      return;
    default:
      return;
  }
}

void sub_100198B9C(_Unwind_Exception *a1)
{
  sub_10019DBD4(&STACK[0x4200]);
  _Unwind_Resume(a1);
}

id sub_100198F5C(uint64_t a1)
{
  void *v2;
  void *v3;
  _QWORD v5[5];
  _QWORD v6[5];

  v2 = *(void **)(a1 + 2640);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10019DC74;
  v6[3] = &unk_10080AFF0;
  v6[4] = a1;
  objc_msgSend(v2, "startObserving:observeImmediately:callback:", PRDebugConfigArgDebugLevel, 0, v6);
  v3 = *(void **)(a1 + 2640);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10019DD90;
  v5[3] = &unk_10080AFF0;
  v5[4] = a1;
  return objc_msgSend(v3, "startObserving:observeImmediately:callback:", PRDebugConfigArgLeadingEdgeThresholds, 0, v5);
}

uint64_t sub_100199014()
{
  return 1;
}

uint64_t sub_10019901C(uint64_t a1)
{
  sub_100191EE8((NSObject **)(a1 + 456));
  sub_100200BB4((NSObject **)(a1 + 544), 0);
  return 1;
}

uint64_t sub_100199050(uint64_t a1)
{
  sub_100191EE8((NSObject **)(a1 + 448));
  sub_100200BB4((NSObject **)(a1 + 536), 0);
  return 1;
}

uint64_t sub_100199084(uint64_t a1)
{
  sub_1001FFC48((NSObject **)(a1 + 544), 0);
  return 1;
}

uint64_t sub_1001990A4(uint64_t a1)
{
  sub_1001FFC48((NSObject **)(a1 + 536), 0);
  return 1;
}

void sub_1001990C4(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  void *v4;
  _QWORD v5[5];
  uint8_t buf[16];

  v2 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#roseprovider,onFirstUnlockNotification, performing first unlock operations", buf, 2u);
  }
  if ((sub_1001FFEE4((NSObject **)(a1 + 544)) & 1) == 0)
  {
    v3 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#roseprovider,onFirstUnlockNotification, attempting reactivation of Rose state machine", buf, 2u);
    }
    sub_100200BB4((NSObject **)(a1 + 544), 2);
  }
  v4 = *(void **)(a1 + 400);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1001991C8;
  v5[3] = &unk_10080AFF0;
  v5[4] = a1;
  sub_1001DA7E4(v4, v5);
}

void sub_1001991C8(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  std::string *v6;
  __int128 v7;
  std::string v8;
  void *__p[2];
  std::string::size_type v10;

  v3 = a2;
  v4 = v3;
  if (v3)
  {
    v5 = *(_QWORD *)(a1 + 32);
    sub_10000BF04(&v8, (char *)objc_msgSend(objc_retainAutorelease(v3), "UTF8String"));
    v6 = std::string::insert(&v8, 0, "AlishaLPEM FW Crash - ");
    v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v10 = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    sub_100208124((NSObject **)(v5 + 544), 3, (std::string::size_type)__p);
    if (SHIBYTE(v10) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v8.__r_.__value_.__l.__data_);
  }

}

void sub_100199280(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);

  _Unwind_Resume(a1);
}

uint64_t sub_1001992C0(uint64_t a1, uint64_t a2, std::string::size_type a3)
{
  return sub_100208124((NSObject **)(a1 + 544), a2, a3);
}

void sub_1001992C8(uint64_t a1, int a2)
{
  NSObject *v3;
  NSObject *v4;
  uint8_t v5[16];
  uint8_t buf[16];

  if (a2)
  {
    v3 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#roseprovider,networkConnectionUpdate, attempting reactivation of Rose state machine", buf, 2u);
    }
    sub_100200BB4((NSObject **)(a1 + 544), 1);
    v4 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#roseprovider,deregistering network connection listener", v5, 2u);
    }
    sub_10025312C(*(NSObject ***)(a1 + 3096), (uint64_t)qword_100850430);
  }
}

uint64_t sub_100199394(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_10080AEC0;
  *(_QWORD *)(a1 + 8) = off_10080AF40;
  *(_QWORD *)(a1 + 16) = off_10080AF78;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
    sub_1003D50C4();
  sub_10019D7B0((uint64_t *)(a1 + 3096), 0);
  std::mutex::~mutex((std::mutex *)(a1 + 2704));

  v2 = *(void **)(a1 + 2672);
  if (v2)
  {
    *(_QWORD *)(a1 + 2680) = v2;
    operator delete(v2);
  }
  sub_10001AE68(a1 + 2648);

  sub_10000BA78(a1 + 2264);
  sub_10001AE68(a1 + 2248);
  sub_1001FFC44(a1 + 544);
  sub_100191EE4(a1 + 456);
  sub_10001AE68(a1 + 440);

  std::mutex::~mutex((std::mutex *)(a1 + 336));
  std::mutex::~mutex((std::mutex *)(a1 + 272));
  std::mutex::~mutex((std::mutex *)(a1 + 208));
  std::mutex::~mutex((std::mutex *)(a1 + 144));
  std::mutex::~mutex((std::mutex *)(a1 + 80));
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 32));
  return a1;
}

uint64_t sub_100199494(uint64_t a1)
{
  return sub_100199394(a1 - 8);
}

uint64_t sub_10019949C(uint64_t a1)
{
  return sub_100199394(a1 - 16);
}

void sub_1001994A4(uint64_t a1)
{
  sub_100199394(a1);
  operator delete();
}

void sub_1001994C8(uint64_t a1)
{
  sub_100199394(a1 - 8);
  operator delete();
}

void sub_1001994F0(uint64_t a1)
{
  sub_100199394(a1 - 16);
  operator delete();
}

uint64_t sub_100199518(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject **v5;

  sub_1001927EC(&v5, (NSObject **)(a1 + 456));
  v2 = a1 + 544;
  if ((sub_100210144(v2) & 1) != 0)
  {
    v3 = sub_100207C24(v2);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
      sub_1003D50F0();
    v3 = 0;
  }
  sub_100192854(&v5);
  return v3;
}

void sub_1001995A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100192854((NSObject ***)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1001995B8(uint64_t a1)
{
  return sub_1002018C8((NSObject **)(a1 + 544));
}

uint64_t sub_1001995C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject **v13;

  sub_1001927EC(&v13, (NSObject **)(a1 + 456));
  v4 = a1 + 544;
  if ((sub_100210144(v4) & 1) != 0)
  {
    v11 = sub_100207CE4(v4, a2, v5, v6, v7, v8, v9, v10);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
      sub_1003D511C();
    v11 = 0;
  }
  sub_100192854(&v13);
  return v11;
}

void sub_100199650(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100192854((NSObject ***)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100199668(uint64_t a1, BOOL *a2)
{
  return sub_100200FC8(a1 + 544, a2);
}

uint64_t sub_100199670(uint64_t a1, _BYTE *a2)
{
  return sub_100204488(a1 + 544, a2);
}

uint64_t sub_100199678(uint64_t a1, int a2)
{
  NSObject *v4;
  _DWORD v6[2];

  v4 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    v6[0] = 67109120;
    v6[1] = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#roseprovider,_requestPowerChange shouldPowerOn %d", (uint8_t *)v6, 8u);
  }
  if (a2)
    return sub_100199740(a1);
  sub_100192384((NSObject **)(a1 + 456));
  return 1;
}

uint64_t sub_100199740(uint64_t a1)
{
  NSObject *v2;
  NSObject **v3;
  uint64_t v4;
  uint8_t v6[16];

  v2 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#roseprovider,_ensureRosePowerOnAndReadySync", v6, 2u);
  }
  v3 = (NSObject **)(a1 + 456);
  sub_1001922A4((NSObject **)(a1 + 456));
  v4 = sub_100210144(a1 + 544);
  if ((v4 & 1) == 0)
    sub_100192384(v3);
  return v4;
}

CFDataRef sub_1001997D0(uint64_t a1)
{
  uint64_t v2;
  CFDataRef v3;
  NSObject **v5;

  sub_1001927EC(&v5, (NSObject **)(a1 + 456));
  v2 = a1 + 544;
  if ((sub_100210144(v2) & 1) != 0)
  {
    v3 = sub_1002084C0(v2);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
      sub_1003D5148();
    v3 = 0;
  }
  sub_100192854(&v5);
  return v3;
}

void sub_100199858(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100192854((NSObject ***)va);
  _Unwind_Resume(a1);
}

void sub_10019986C(uint64_t a1, uint64_t a2)
{
  unsigned __int16 *v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(unsigned __int16 **)a2;
  if (*(_QWORD *)(a2 + 8) - *(_QWORD *)a2 > 0x23uLL)
  {
    v3 = (id)qword_10085F520;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      sub_10015B788(v2, v4, v5, v6, v7, v8, v9, v10);
      sub_1003D51DC();
    }

  }
  else if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
  {
    sub_1003D5174();
  }
}

void sub_100199940(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100199958(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  BOOL v6;
  std::chrono::steady_clock::time_point v7;
  unsigned __int8 v8;
  std::chrono::steady_clock::time_point v9;
  std::chrono::system_clock::time_point v10;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v11;
  std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> v12;
  unsigned __int8 v13;
  NSObject *v14;
  uint64_t v15;
  void *__p;
  void *v17;
  uint64_t v18;
  std::unique_lock<std::mutex> __lk;
  void *v20;
  void *v21;
  uint64_t v22;

  v20 = 0;
  v21 = 0;
  v22 = 0;
  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 144);
  __lk.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 144));
  atomic_store(0, (unsigned __int8 *)(a1 + 24));
  __p = 0;
  v17 = 0;
  v18 = 0;
  v6 = sub_1002042C4(a1 + 544, 0x25u, (uint64_t)&__p, (unint64_t *)&v20);
  if (__p)
  {
    v17 = __p;
    operator delete(__p);
  }
  if (!v6)
  {
    v14 = (id)qword_10085F520;
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      sub_100360280(0x25u, &__p);
      sub_1003D5250();
    }

    sub_10019986C(v15, (uint64_t)&v20);
    goto LABEL_27;
  }
  v7.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_ + 1000000 * a2;
  do
  {
    v8 = atomic_load((unsigned __int8 *)(a1 + 24));
    if ((v8 & 1) != 0)
      goto LABEL_28;
    if (std::chrono::steady_clock::now().__d_.__rep_ >= v7.__d_.__rep_)
      break;
    v9.__d_.__rep_ = v7.__d_.__rep_ - std::chrono::steady_clock::now().__d_.__rep_;
    if (v9.__d_.__rep_ >= 1)
    {
      std::chrono::steady_clock::now();
      v10.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
      if (v10.__d_.__rep_)
      {
        if (v10.__d_.__rep_ < 1)
        {
          if ((unint64_t)v10.__d_.__rep_ < 0xFFDF3B645A1CAC09)
          {
            v11 = 0x8000000000000000;
            goto LABEL_18;
          }
        }
        else if ((unint64_t)v10.__d_.__rep_ > 0x20C49BA5E353F7)
        {
          v11 = 0x7FFFFFFFFFFFFFFFLL;
          goto LABEL_16;
        }
        v11 = 1000 * v10.__d_.__rep_;
      }
      else
      {
        v11 = 0;
      }
LABEL_16:
      if (v11 > (v9.__d_.__rep_ ^ 0x7FFFFFFFFFFFFFFFLL))
      {
        v12.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
LABEL_19:
        std::condition_variable::__do_timed_wait((std::condition_variable *)(a1 + 32), &__lk, v12);
        std::chrono::steady_clock::now();
        continue;
      }
LABEL_18:
      v12.__d_.__rep_ = v11 + v9.__d_.__rep_;
      goto LABEL_19;
    }
  }
  while (std::chrono::steady_clock::now().__d_.__rep_ < v7.__d_.__rep_);
  v13 = atomic_load((unsigned __int8 *)(a1 + 24));
  if ((v13 & 1) != 0)
  {
LABEL_28:
    sub_10000BC94(a3, a1 + 2264);
    goto LABEL_29;
  }
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
    sub_1003D5224();
LABEL_27:
  *a3 = 0;
  a3[112] = 0;
LABEL_29:
  if (__lk.__owns_)
    std::mutex::unlock(__lk.__m_);
  if (v20)
  {
    v21 = v20;
    operator delete(v20);
  }
}

void sub_100199BA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, std::mutex *a12, char a13, void *__p, uint64_t a15)
{
  void *v15;

  std::mutex::unlock(a12);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_100199C08(uint64_t a1)
{
  if (!sub_100204CB4(a1 + 544) && os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
    sub_1003D5298();
}

void sub_100199C54(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  _BYTE *v7;
  std::chrono::steady_clock::time_point v8;
  double v9;
  double v10;
  uint64_t v11;
  std::chrono::steady_clock::time_point v12;
  std::chrono::system_clock::time_point v13;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v14;
  std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  double v19;
  double v20;
  uint64_t v21;
  std::chrono::steady_clock::time_point v22;
  std::chrono::system_clock::time_point v23;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v24;
  std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _BYTE *v30;
  char v31;
  _BYTE *__dst;
  _BYTE __src[273];
  _BYTE v34[7];
  std::unique_lock<std::mutex> __lk;
  std::mutex *v36;
  char v37;

  v36 = (std::mutex *)(a1 + 2704);
  v37 = 0;
  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 144);
  __lk.__owns_ = 0;
  sub_10019A0A0((uint64_t)&v36, (uint64_t)&__lk);
  if (*(_BYTE *)(a1 + 2892))
    *(_BYTE *)(a1 + 2892) = 0;
  if (*(_BYTE *)(a1 + 3042))
    *(_BYTE *)(a1 + 3042) = 0;
  sub_100199C08(a1);
  v4 = 9;
  do
  {
    v5 = &__src[v4];
    *(_WORD *)v5 = 0;
    v5[3] = 0;
    v4 += 4;
  }
  while (v5 + 4 != &__src[113]);
  __dst = a2;
  memset(&__src[114], 0, 36);
  *(_WORD *)&__src[150] = -1;
  __src[152] = -127;
  v6 = 153;
  do
  {
    v7 = &__src[v6];
    *v7 = 0;
    *(_WORD *)(v7 + 1) = -1;
    *(_QWORD *)(v7 + 3) = 0;
    *(_DWORD *)(v7 + 11) = 129;
    v6 += 15;
  }
  while (v7 + 15 != v34);
  v8.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v9 = (double)v8.__d_.__rep_ + 2000000000.0;
  v10 = -9.22337204e18;
  if (v9 > -9.22337204e18)
    v10 = (double)v8.__d_.__rep_ + 2000000000.0;
  if (v9 < 9.22337204e18)
    v11 = (uint64_t)v10;
  else
    v11 = 0x7FFFFFFFFFFFFFFFLL;
  while (!*(_BYTE *)(a1 + 2892))
  {
    if (v9 <= (double)std::chrono::steady_clock::now().__d_.__rep_)
      goto LABEL_30;
    v12.__d_.__rep_ = v11 - std::chrono::steady_clock::now().__d_.__rep_;
    if (v12.__d_.__rep_ >= 1)
    {
      std::chrono::steady_clock::now();
      v13.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
      if (!v13.__d_.__rep_)
      {
        v14 = 0;
        goto LABEL_25;
      }
      if (v13.__d_.__rep_ < 1)
      {
        if ((unint64_t)v13.__d_.__rep_ >= 0xFFDF3B645A1CAC09)
          goto LABEL_24;
        v14 = 0x8000000000000000;
      }
      else
      {
        if ((unint64_t)v13.__d_.__rep_ > 0x20C49BA5E353F7)
        {
          v14 = 0x7FFFFFFFFFFFFFFFLL;
          goto LABEL_25;
        }
LABEL_24:
        v14 = 1000 * v13.__d_.__rep_;
LABEL_25:
        if (v14 > (v12.__d_.__rep_ ^ 0x7FFFFFFFFFFFFFFFLL))
        {
          v15.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
LABEL_28:
          std::condition_variable::__do_timed_wait((std::condition_variable *)(a1 + 32), &__lk, v15);
          std::chrono::steady_clock::now();
          goto LABEL_29;
        }
      }
      v15.__d_.__rep_ = v14 + v12.__d_.__rep_;
      goto LABEL_28;
    }
LABEL_29:
    if (v9 <= (double)std::chrono::steady_clock::now().__d_.__rep_)
    {
LABEL_30:
      if (!*(_BYTE *)(a1 + 2892))
      {
        if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_FAULT))
          sub_1003D52C4();
        goto LABEL_58;
      }
      break;
    }
  }
  v16 = *(_OWORD *)(a1 + 2848);
  *(_OWORD *)&__src[64] = *(_OWORD *)(a1 + 2832);
  *(_OWORD *)&__src[80] = v16;
  *(_OWORD *)&__src[96] = *(_OWORD *)(a1 + 2864);
  *(_OWORD *)&__src[108] = *(_OWORD *)(a1 + 2876);
  v17 = *(_OWORD *)(a1 + 2784);
  *(_OWORD *)__src = *(_OWORD *)(a1 + 2768);
  *(_OWORD *)&__src[16] = v17;
  v18 = *(_OWORD *)(a1 + 2816);
  *(_OWORD *)&__src[32] = *(_OWORD *)(a1 + 2800);
  *(_OWORD *)&__src[48] = v18;
  *(_BYTE *)(a1 + 2892) = 0;
  v19 = (double)std::chrono::steady_clock::now().__d_.__rep_ + 2000000000.0;
  v20 = -9.22337204e18;
  if (v19 > -9.22337204e18)
    v20 = v19;
  if (v19 < 9.22337204e18)
    v21 = (uint64_t)v20;
  else
    v21 = 0x7FFFFFFFFFFFFFFFLL;
  while (2)
  {
    if (*(_BYTE *)(a1 + 3042))
      goto LABEL_53;
    if (v19 <= (double)std::chrono::steady_clock::now().__d_.__rep_)
      break;
    v22.__d_.__rep_ = v21 - std::chrono::steady_clock::now().__d_.__rep_;
    if (v22.__d_.__rep_ >= 1)
    {
      std::chrono::steady_clock::now();
      v23.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
      if (!v23.__d_.__rep_)
      {
        v24 = 0;
        goto LABEL_47;
      }
      if (v23.__d_.__rep_ < 1)
      {
        if ((unint64_t)v23.__d_.__rep_ >= 0xFFDF3B645A1CAC09)
          goto LABEL_46;
        v24 = 0x8000000000000000;
      }
      else
      {
        if ((unint64_t)v23.__d_.__rep_ > 0x20C49BA5E353F7)
        {
          v24 = 0x7FFFFFFFFFFFFFFFLL;
          goto LABEL_47;
        }
LABEL_46:
        v24 = 1000 * v23.__d_.__rep_;
LABEL_47:
        if (v24 > (v22.__d_.__rep_ ^ 0x7FFFFFFFFFFFFFFFLL))
        {
          v25.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
          goto LABEL_50;
        }
      }
      v25.__d_.__rep_ = v24 + v22.__d_.__rep_;
LABEL_50:
      std::condition_variable::__do_timed_wait((std::condition_variable *)(a1 + 32), &__lk, v25);
      std::chrono::steady_clock::now();
    }
    if (v19 > (double)std::chrono::steady_clock::now().__d_.__rep_)
      continue;
    break;
  }
  if (*(_BYTE *)(a1 + 3042))
  {
LABEL_53:
    *(_QWORD *)&__src[265] = *(_QWORD *)(a1 + 3034);
    v26 = *(_OWORD *)(a1 + 3005);
    *(_OWORD *)&__src[220] = *(_OWORD *)(a1 + 2989);
    *(_OWORD *)&__src[236] = v26;
    *(_OWORD *)&__src[252] = *(_OWORD *)(a1 + 3021);
    v27 = *(_OWORD *)(a1 + 2941);
    *(_OWORD *)&__src[156] = *(_OWORD *)(a1 + 2925);
    *(_OWORD *)&__src[172] = v27;
    v28 = *(_OWORD *)(a1 + 2973);
    *(_OWORD *)&__src[188] = *(_OWORD *)(a1 + 2957);
    *(_OWORD *)&__src[204] = v28;
    v29 = *(_OWORD *)(a1 + 2909);
    *(_OWORD *)&__src[124] = *(_OWORD *)(a1 + 2893);
    *(_OWORD *)&__src[140] = v29;
    *(_BYTE *)(a1 + 3042) = 0;
    v30 = __dst;
    memcpy(__dst, __src, 0x111uLL);
    v31 = 1;
    goto LABEL_59;
  }
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_FAULT))
    sub_1003D52F0();
LABEL_58:
  v31 = 0;
  v30 = __dst;
  *__dst = 0;
LABEL_59:
  v30[273] = v31;
  if (__lk.__owns_)
    std::mutex::unlock(__lk.__m_);
  if (v37)
    std::mutex::unlock(v36);
}

void sub_10019A074(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 - 136))
    std::mutex::unlock(*(std::mutex **)(v1 - 144));
  if (*(_BYTE *)(v1 - 120))
    std::mutex::unlock(*(std::mutex **)(v1 - 128));
  _Unwind_Resume(exception_object);
}

uint64_t sub_10019A0A0(uint64_t a1, uint64_t a2)
{
  uint64_t v5;
  char v6;

  while (1)
  {
    v5 = a1;
    v6 = 1;
    sub_10019E4AC(a1);
    if ((sub_10019E458(a2) & 1) != 0)
      break;
    sub_10019E504((uint64_t)&v5);
    sched_yield();
    v5 = a2;
    v6 = 1;
    sub_10019E4AC(a2);
    if ((sub_10019E458(a1) & 1) != 0)
      break;
    sub_10019E504((uint64_t)&v5);
    sched_yield();
  }
  v5 = 0;
  v6 = 0;
  return sub_10019E504((uint64_t)&v5);
}

void sub_10019A138(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10019E504((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_10019A150(uint64_t a1@<X0>, unsigned int a2@<W1>, unsigned int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  _BYTE *v10;
  __int16 v11;
  uint64_t v12;
  std::condition_variable *v13;
  std::chrono::steady_clock::time_point v14;
  double v15;
  double v16;
  uint64_t v17;
  std::chrono::steady_clock::time_point v18;
  std::chrono::system_clock::time_point v19;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v20;
  std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> v21;
  char v22;
  _BOOL8 v23;
  void *__p;
  void *v25;
  uint64_t v26;
  void *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  __int16 v31;
  _BYTE v32[6];
  std::unique_lock<std::mutex> __lk;
  std::mutex *v34;
  char v35;

  v34 = (std::mutex *)(a1 + 272);
  v35 = 0;
  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 144);
  __lk.__owns_ = 0;
  sub_10019A0A0((uint64_t)&v34, (uint64_t)&__lk);
  v10 = (_BYTE *)(a1 + 2566);
  if (*(_BYTE *)(a1 + 2566))
    *v10 = 0;
  v29 = 0;
  v30 = sub_1001783F0(a2, a3, a4);
  v31 = v11;
  v27 = 0;
  v28 = 0;
  sub_10003A474(&v27, &v30, (uint64_t)v32, 0xAuLL);
  __p = 0;
  v25 = 0;
  v26 = 0;
  if (!sub_1002042C4(a1 + 544, 0x37u, (uint64_t)&v27, (unint64_t *)&__p))
  {
    v23 = os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_FAULT);
    if (v23)
      sub_1003D5348();
    sub_10019986C(v23, (uint64_t)&__p);
    goto LABEL_30;
  }
  v12 = a1 + 2548;
  v13 = (std::condition_variable *)(a1 + 32);
  v14.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v15 = (double)v14.__d_.__rep_ + 2500000000.0;
  v16 = -9.22337204e18;
  if (v15 > -9.22337204e18)
    v16 = (double)v14.__d_.__rep_ + 2500000000.0;
  if (v15 < 9.22337204e18)
    v17 = (uint64_t)v16;
  else
    v17 = 0x7FFFFFFFFFFFFFFFLL;
  do
  {
    if (*v10)
      goto LABEL_26;
    if (v15 <= (double)std::chrono::steady_clock::now().__d_.__rep_)
      break;
    v18.__d_.__rep_ = v17 - std::chrono::steady_clock::now().__d_.__rep_;
    if (v18.__d_.__rep_ >= 1)
    {
      std::chrono::steady_clock::now();
      v19.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
      if (v19.__d_.__rep_)
      {
        if (v19.__d_.__rep_ < 1)
        {
          if ((unint64_t)v19.__d_.__rep_ < 0xFFDF3B645A1CAC09)
          {
            v20 = 0x8000000000000000;
            goto LABEL_22;
          }
        }
        else if ((unint64_t)v19.__d_.__rep_ > 0x20C49BA5E353F7)
        {
          v20 = 0x7FFFFFFFFFFFFFFFLL;
          goto LABEL_20;
        }
        v20 = 1000 * v19.__d_.__rep_;
      }
      else
      {
        v20 = 0;
      }
LABEL_20:
      if (v20 > (v18.__d_.__rep_ ^ 0x7FFFFFFFFFFFFFFFLL))
      {
        v21.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
LABEL_23:
        std::condition_variable::__do_timed_wait(v13, &__lk, v21);
        std::chrono::steady_clock::now();
        continue;
      }
LABEL_22:
      v21.__d_.__rep_ = v20 + v18.__d_.__rep_;
      goto LABEL_23;
    }
  }
  while (v15 > (double)std::chrono::steady_clock::now().__d_.__rep_);
  if (*v10)
  {
LABEL_26:
    *(_OWORD *)a5 = *(_OWORD *)v12;
    *(_WORD *)(a5 + 16) = *(_WORD *)(v12 + 16);
    v22 = 1;
    goto LABEL_31;
  }
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_FAULT))
    sub_1003D531C();
LABEL_30:
  v22 = 0;
  v10 = (_BYTE *)a5;
LABEL_31:
  *v10 = 0;
  *(_BYTE *)(a5 + 18) = v22;
  if (__p)
  {
    v25 = __p;
    operator delete(__p);
  }
  if (v27)
  {
    v28 = v27;
    operator delete(v27);
  }
  if (__lk.__owns_)
    std::mutex::unlock(__lk.__m_);
  if (v35)
    std::mutex::unlock(v34);
}

void sub_10019A404(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::mutex *a17, char a18, std::mutex *a19, char a20)
{
  if (a18)
    std::mutex::unlock(a17);
  if (a20)
    std::mutex::unlock(a19);
  _Unwind_Resume(exception_object);
}

void sub_10019A460(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _OWORD *v6;
  __int128 v7;
  __int128 v8;
  char *v9;
  char v10;
  BOOL v11;
  std::chrono::steady_clock::time_point v12;
  std::chrono::steady_clock::time_point v13;
  std::chrono::system_clock::time_point v14;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v15;
  std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  NSObject *v26;
  uint64_t v27;
  int v28;
  void *__p;
  void *v30;
  uint64_t v31;
  void *v32;
  void *v33;
  uint64_t v34;
  std::unique_lock<std::mutex> __lk;

  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 144);
  __lk.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 144));
  v6 = (_OWORD *)(a1 + 2384);
  if (*(_BYTE *)(a1 + 2477))
  {
    *(_DWORD *)a3 = 0;
    v7 = *(_OWORD *)(a1 + 2432);
    *(_OWORD *)(a3 + 36) = *(_OWORD *)(a1 + 2416);
    *(_OWORD *)(a3 + 52) = v7;
    *(_OWORD *)(a3 + 68) = *(_OWORD *)(a1 + 2448);
    *(_OWORD *)(a3 + 82) = *(_OWORD *)(a1 + 2462);
    v8 = *(_OWORD *)(a1 + 2400);
    *(_OWORD *)(a3 + 4) = *v6;
    *(_OWORD *)(a3 + 20) = v8;
    goto LABEL_35;
  }
  v9 = (char *)sub_100004784();
  v10 = v9[213];
  if (v10)
  {
    *(_DWORD *)a3 = 0;
    *(_OWORD *)(a3 + 36) = *(_OWORD *)(v9 + 152);
    *(_OWORD *)(a3 + 52) = *(_OWORD *)(v9 + 168);
    *(_OWORD *)(a3 + 68) = *(_OWORD *)(v9 + 184);
    *(_OWORD *)(a3 + 81) = *(_OWORD *)(v9 + 197);
    *(_OWORD *)(a3 + 4) = *(_OWORD *)(v9 + 120);
    *(_OWORD *)(a3 + 20) = *(_OWORD *)(v9 + 136);
    *(_BYTE *)(a3 + 97) = v10;
    goto LABEL_34;
  }
  v32 = 0;
  v33 = 0;
  v34 = 0;
  __p = 0;
  v30 = 0;
  v31 = 0;
  v11 = sub_1002042C4(a1 + 544, 0x30u, (uint64_t)&__p, (unint64_t *)&v32);
  if (__p)
  {
    v30 = __p;
    operator delete(__p);
  }
  if (!v11)
  {
    v26 = (id)qword_10085F520;
    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
    {
      sub_100360280(0x30u, &__p);
      sub_1003D53A0();
    }

    sub_10019986C(v27, (uint64_t)&v32);
    v28 = -1005;
    goto LABEL_31;
  }
  v12.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_ + 1000000 * a2;
  do
  {
    if (*(_BYTE *)(a1 + 2477))
      goto LABEL_26;
    if (std::chrono::steady_clock::now().__d_.__rep_ >= v12.__d_.__rep_)
      break;
    v13.__d_.__rep_ = v12.__d_.__rep_ - std::chrono::steady_clock::now().__d_.__rep_;
    if (v13.__d_.__rep_ >= 1)
    {
      std::chrono::steady_clock::now();
      v14.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
      if (v14.__d_.__rep_)
      {
        if (v14.__d_.__rep_ < 1)
        {
          if ((unint64_t)v14.__d_.__rep_ < 0xFFDF3B645A1CAC09)
          {
            v15 = 0x8000000000000000;
            goto LABEL_22;
          }
        }
        else if ((unint64_t)v14.__d_.__rep_ > 0x20C49BA5E353F7)
        {
          v15 = 0x7FFFFFFFFFFFFFFFLL;
          goto LABEL_20;
        }
        v15 = 1000 * v14.__d_.__rep_;
      }
      else
      {
        v15 = 0;
      }
LABEL_20:
      if (v15 > (v13.__d_.__rep_ ^ 0x7FFFFFFFFFFFFFFFLL))
      {
        v16.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
LABEL_23:
        std::condition_variable::__do_timed_wait((std::condition_variable *)(a1 + 32), &__lk, v16);
        std::chrono::steady_clock::now();
        continue;
      }
LABEL_22:
      v16.__d_.__rep_ = v15 + v13.__d_.__rep_;
      goto LABEL_23;
    }
  }
  while (std::chrono::steady_clock::now().__d_.__rep_ < v12.__d_.__rep_);
  if (*(_BYTE *)(a1 + 2477))
  {
LABEL_26:
    v17 = sub_100004784();
    if (!*(_BYTE *)(a1 + 2477))
      sub_10000BA44();
    sub_1003950F0((uint64_t)v17, (__int128 *)(a1 + 2384), v18, v19, v20, v21, v22, v23);
    *(_DWORD *)a3 = 0;
    v24 = *(_OWORD *)(a1 + 2432);
    *(_OWORD *)(a3 + 36) = *(_OWORD *)(a1 + 2416);
    *(_OWORD *)(a3 + 52) = v24;
    *(_OWORD *)(a3 + 68) = *(_OWORD *)(a1 + 2448);
    *(_OWORD *)(a3 + 82) = *(_OWORD *)(a1 + 2462);
    v25 = *(_OWORD *)(a1 + 2400);
    *(_OWORD *)(a3 + 4) = *v6;
    *(_OWORD *)(a3 + 20) = v25;
    goto LABEL_32;
  }
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
    sub_1003D5374();
  v28 = -1006;
LABEL_31:
  *(_DWORD *)a3 = v28;
  *(_BYTE *)(a3 + 4) = 0;
  *(_BYTE *)(a3 + 97) = 0;
LABEL_32:
  if (v32)
  {
    v33 = v32;
    operator delete(v32);
  }
LABEL_34:
  if (__lk.__owns_)
LABEL_35:
    std::mutex::unlock(__lk.__m_);
}

void sub_10019A774(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, std::mutex *a15, char a16)
{
  void *v16;

  if (__p)
    operator delete(__p);
  if (a16)
    std::mutex::unlock(a15);
  _Unwind_Resume(a1);
}

void sub_10019A7D4(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  std::chrono::steady_clock::time_point v8;
  std::chrono::steady_clock::time_point v9;
  std::chrono::system_clock::time_point v10;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v11;
  std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  NSObject *v17;
  uint64_t v18;
  int v19;
  std::mutex *v20;
  void *v21[2];
  char v22;
  _OWORD v23[2];
  std::unique_lock<std::mutex> __lk;
  std::mutex *v25;
  char v26;
  void *__p;
  void *v28;
  uint64_t v29;
  void *v30;
  void *v31;
  uint64_t v32;

  v30 = 0;
  v31 = 0;
  v32 = 0;
  sub_10003F150((unint64_t *)&v30, 4uLL);
  *(_DWORD *)v30 = a2;
  __p = 0;
  v28 = 0;
  v29 = 0;
  v25 = (std::mutex *)(a1 + 208);
  v26 = 0;
  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 144);
  __lk.__owns_ = 0;
  sub_10019A0A0((uint64_t)&v25, (uint64_t)&__lk);
  if (*(_BYTE *)(a1 + 2547))
    *(_BYTE *)(a1 + 2547) = 0;
  if (!sub_1002042C4(a1 + 544, 0x31u, (uint64_t)&v30, (unint64_t *)&__p))
  {
    v17 = (id)qword_10085F520;
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      sub_100360280(0x31u, v21);
      sub_1003D53A0();
    }

    sub_10019986C(v18, (uint64_t)&__p);
    v19 = -1007;
    goto LABEL_26;
  }
  v8.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_ + 1000000 * a3;
  do
  {
    if (*(_BYTE *)(a1 + 2547))
      goto LABEL_22;
    if (std::chrono::steady_clock::now().__d_.__rep_ >= v8.__d_.__rep_)
      break;
    v9.__d_.__rep_ = v8.__d_.__rep_ - std::chrono::steady_clock::now().__d_.__rep_;
    if (v9.__d_.__rep_ >= 1)
    {
      std::chrono::steady_clock::now();
      v10.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
      if (v10.__d_.__rep_)
      {
        if (v10.__d_.__rep_ < 1)
        {
          if ((unint64_t)v10.__d_.__rep_ < 0xFFDF3B645A1CAC09)
          {
            v11 = 0x8000000000000000;
            goto LABEL_18;
          }
        }
        else if ((unint64_t)v10.__d_.__rep_ > 0x20C49BA5E353F7)
        {
          v11 = 0x7FFFFFFFFFFFFFFFLL;
          goto LABEL_16;
        }
        v11 = 1000 * v10.__d_.__rep_;
      }
      else
      {
        v11 = 0;
      }
LABEL_16:
      if (v11 > (v9.__d_.__rep_ ^ 0x7FFFFFFFFFFFFFFFLL))
      {
        v12.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
LABEL_19:
        std::condition_variable::__do_timed_wait((std::condition_variable *)(a1 + 32), &__lk, v12);
        std::chrono::steady_clock::now();
        continue;
      }
LABEL_18:
      v12.__d_.__rep_ = v11 + v9.__d_.__rep_;
      goto LABEL_19;
    }
  }
  while (std::chrono::steady_clock::now().__d_.__rep_ < v8.__d_.__rep_);
  if (*(_BYTE *)(a1 + 2547))
  {
LABEL_22:
    v13 = *(_OWORD *)(a1 + 2510);
    v23[0] = *(_OWORD *)(a1 + 2526);
    *(_QWORD *)((char *)v23 + 14) = *(_QWORD *)(a1 + 2540);
    v14 = *(_QWORD *)((char *)v23 + 14);
    v15 = *(_OWORD *)(a1 + 2478);
    v16 = *(_OWORD *)(a1 + 2494);
    *(_BYTE *)(a1 + 2547) = 0;
    *(_DWORD *)a4 = 0;
    *(_OWORD *)(a4 + 20) = v16;
    *(_OWORD *)(a4 + 36) = v13;
    *(_OWORD *)(a4 + 4) = v15;
    *(_OWORD *)(a4 + 52) = v23[0];
    *(_QWORD *)(a4 + 66) = v14;
    goto LABEL_27;
  }
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
    sub_1003D53E8();
  sub_10000BF04(v21, "AlishaGetKeyTimedOut");
  sub_100208124((NSObject **)(a1 + 544), 0, (std::string::size_type)v21);
  if (v22 < 0)
    operator delete(v21[0]);
  v20 = (std::mutex *)sub_100251854();
  sub_100251910(v20, 0, 1);
  v19 = -1002;
LABEL_26:
  *(_DWORD *)a4 = v19;
  *(_BYTE *)(a4 + 4) = 0;
  *(_BYTE *)(a4 + 73) = 0;
LABEL_27:
  if (__lk.__owns_)
    std::mutex::unlock(__lk.__m_);
  if (v26)
    std::mutex::unlock(v25);
  if (__p)
  {
    v28 = __p;
    operator delete(__p);
  }
  if (v30)
  {
    v31 = v30;
    operator delete(v30);
  }
}

void sub_10019AAD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,std::mutex *a22,char a23,std::mutex *a24,char a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30)
{
  if (a14 < 0)
    operator delete(__p);
  if (a23)
    std::mutex::unlock(a22);
  if (a25)
    std::mutex::unlock(a24);
  if (a26)
    operator delete(a26);
  if (a29)
    operator delete(a29);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10019AB5C(uint64_t a1)
{
  std::chrono::steady_clock::time_point v2;
  std::chrono::steady_clock::time_point v3;
  std::chrono::system_clock::time_point v4;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v5;
  std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  _QWORD v13[3];
  std::unique_lock<std::mutex> __lk;
  std::mutex *v15;
  char v16;
  void *__p;
  void *v18;
  uint64_t v19;
  void *v20;
  void *v21;
  uint64_t v22;

  v20 = 0;
  v21 = 0;
  v22 = 0;
  sub_10003F150((unint64_t *)&v20, 4uLL);
  *(_DWORD *)v20 = 0;
  __p = 0;
  v18 = 0;
  v19 = 0;
  v15 = (std::mutex *)(a1 + 208);
  v16 = 0;
  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 144);
  __lk.__owns_ = 0;
  sub_10019A0A0((uint64_t)&v15, (uint64_t)&__lk);
  if (*(_BYTE *)(a1 + 2547))
    *(_BYTE *)(a1 + 2547) = 0;
  if (!sub_1002042C4(a1 + 544, 0x31u, (uint64_t)&v20, (unint64_t *)&__p))
  {
    v10 = (id)qword_10085F520;
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      sub_100360280(0x31u, v13);
      sub_1003D53A0();
    }

    sub_10019986C(v11, (uint64_t)&__p);
    v9 = 4294966266;
    goto LABEL_31;
  }
  v2.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_ + 5000000000;
  do
  {
    if (*(_BYTE *)(a1 + 2547))
      goto LABEL_22;
    if (std::chrono::steady_clock::now().__d_.__rep_ >= v2.__d_.__rep_)
      break;
    v3.__d_.__rep_ = v2.__d_.__rep_ - std::chrono::steady_clock::now().__d_.__rep_;
    if (v3.__d_.__rep_ >= 1)
    {
      std::chrono::steady_clock::now();
      v4.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
      if (v4.__d_.__rep_)
      {
        if (v4.__d_.__rep_ < 1)
        {
          if ((unint64_t)v4.__d_.__rep_ < 0xFFDF3B645A1CAC09)
          {
            v5 = 0x8000000000000000;
            goto LABEL_18;
          }
        }
        else if ((unint64_t)v4.__d_.__rep_ > 0x20C49BA5E353F7)
        {
          v5 = 0x7FFFFFFFFFFFFFFFLL;
          goto LABEL_16;
        }
        v5 = 1000 * v4.__d_.__rep_;
      }
      else
      {
        v5 = 0;
      }
LABEL_16:
      if (v5 > (v3.__d_.__rep_ ^ 0x7FFFFFFFFFFFFFFFLL))
      {
        v6.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
LABEL_19:
        std::condition_variable::__do_timed_wait((std::condition_variable *)(a1 + 32), &__lk, v6);
        std::chrono::steady_clock::now();
        continue;
      }
LABEL_18:
      v6.__d_.__rep_ = v5 + v3.__d_.__rep_;
      goto LABEL_19;
    }
  }
  while (std::chrono::steady_clock::now().__d_.__rep_ < v2.__d_.__rep_);
  if (*(_BYTE *)(a1 + 2547))
  {
LABEL_22:
    v7 = *(unsigned __int16 *)(a1 + 2499);
    v8 = *(unsigned __int8 *)(a1 + 2478);
    *(_BYTE *)(a1 + 2547) = 0;
    if (v8 >= 2)
      v9 = 4294966263;
    else
      v9 = sub_100302364(v7);
    goto LABEL_31;
  }
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
    sub_1003D5414();
  v9 = 4294966265;
LABEL_31:
  if (__lk.__owns_)
    std::mutex::unlock(__lk.__m_);
  if (v16)
    std::mutex::unlock(v15);
  if (__p)
  {
    v18 = __p;
    operator delete(__p);
  }
  if (v20)
  {
    v21 = v20;
    operator delete(v20);
  }
  return v9;
}

void sub_10019ADF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::mutex *a13, char a14, std::mutex *a15, char a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21)
{
  if (a14)
    std::mutex::unlock(a13);
  if (a16)
    std::mutex::unlock(a15);
  if (__p)
    operator delete(__p);
  if (a20)
    operator delete(a20);
  _Unwind_Resume(exception_object);
}

void sub_10019AE60(uint64_t a1@<X0>, int a2@<W1>, __int128 *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  char *v10;
  __int128 v11;
  std::chrono::steady_clock::time_point v12;
  std::chrono::steady_clock::time_point v13;
  std::chrono::system_clock::time_point v14;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v15;
  std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  NSObject *v21;
  uint64_t v22;
  int v23;
  _QWORD v24[6];
  _OWORD v25[2];
  std::unique_lock<std::mutex> __lk;
  std::mutex *v27;
  char v28;
  void *__p;
  void *v30;
  uint64_t v31;
  void *v32;
  void *v33;
  uint64_t v34;

  v32 = 0;
  v33 = 0;
  v34 = 0;
  sub_10003F150((unint64_t *)&v32, 0x24uLL);
  v10 = (char *)v32;
  *(_DWORD *)v32 = a2;
  v11 = *a3;
  *(_OWORD *)(v10 + 20) = a3[1];
  *(_OWORD *)(v10 + 4) = v11;
  __p = 0;
  v30 = 0;
  v31 = 0;
  v27 = (std::mutex *)(a1 + 208);
  v28 = 0;
  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 144);
  __lk.__owns_ = 0;
  sub_10019A0A0((uint64_t)&v27, (uint64_t)&__lk);
  if (*(_BYTE *)(a1 + 2547))
    *(_BYTE *)(a1 + 2547) = 0;
  if (!sub_1002042C4(a1 + 544, 0x32u, (uint64_t)&v32, (unint64_t *)&__p))
  {
    v21 = (id)qword_10085F520;
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      sub_100360280(0x32u, v24);
      sub_1003D53A0();
    }

    sub_10019986C(v22, (uint64_t)&__p);
    v23 = -1009;
    goto LABEL_26;
  }
  v12.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_ + 1000000 * a4;
  do
  {
    if (*(_BYTE *)(a1 + 2547))
      goto LABEL_22;
    if (std::chrono::steady_clock::now().__d_.__rep_ >= v12.__d_.__rep_)
      break;
    v13.__d_.__rep_ = v12.__d_.__rep_ - std::chrono::steady_clock::now().__d_.__rep_;
    if (v13.__d_.__rep_ >= 1)
    {
      std::chrono::steady_clock::now();
      v14.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
      if (v14.__d_.__rep_)
      {
        if (v14.__d_.__rep_ < 1)
        {
          if ((unint64_t)v14.__d_.__rep_ < 0xFFDF3B645A1CAC09)
          {
            v15 = 0x8000000000000000;
            goto LABEL_18;
          }
        }
        else if ((unint64_t)v14.__d_.__rep_ > 0x20C49BA5E353F7)
        {
          v15 = 0x7FFFFFFFFFFFFFFFLL;
          goto LABEL_16;
        }
        v15 = 1000 * v14.__d_.__rep_;
      }
      else
      {
        v15 = 0;
      }
LABEL_16:
      if (v15 > (v13.__d_.__rep_ ^ 0x7FFFFFFFFFFFFFFFLL))
      {
        v16.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
LABEL_19:
        std::condition_variable::__do_timed_wait((std::condition_variable *)(a1 + 32), &__lk, v16);
        std::chrono::steady_clock::now();
        continue;
      }
LABEL_18:
      v16.__d_.__rep_ = v15 + v13.__d_.__rep_;
      goto LABEL_19;
    }
  }
  while (std::chrono::steady_clock::now().__d_.__rep_ < v12.__d_.__rep_);
  if (*(_BYTE *)(a1 + 2547))
  {
LABEL_22:
    v17 = *(_OWORD *)(a1 + 2510);
    v25[0] = *(_OWORD *)(a1 + 2526);
    *(_QWORD *)((char *)v25 + 14) = *(_QWORD *)(a1 + 2540);
    v18 = *(_QWORD *)((char *)v25 + 14);
    v19 = *(_OWORD *)(a1 + 2478);
    v20 = *(_OWORD *)(a1 + 2494);
    *(_BYTE *)(a1 + 2547) = 0;
    *(_DWORD *)a5 = 0;
    *(_OWORD *)(a5 + 20) = v20;
    *(_OWORD *)(a5 + 36) = v17;
    *(_OWORD *)(a5 + 4) = v19;
    *(_OWORD *)(a5 + 52) = v25[0];
    *(_QWORD *)(a5 + 66) = v18;
    goto LABEL_27;
  }
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
    sub_1003D5440();
  v23 = -1010;
LABEL_26:
  *(_DWORD *)a5 = v23;
  *(_BYTE *)(a5 + 4) = 0;
  *(_BYTE *)(a5 + 73) = 0;
LABEL_27:
  if (__lk.__owns_)
    std::mutex::unlock(__lk.__m_);
  if (v28)
    std::mutex::unlock(v27);
  if (__p)
  {
    v30 = __p;
    operator delete(__p);
  }
  if (v32)
  {
    v33 = v32;
    operator delete(v32);
  }
}

void sub_10019B130(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, std::mutex *a19, char a20,std::mutex *a21,char a22,void *__p,uint64_t a24,uint64_t a25,void *a26,uint64_t a27)
{
  void *v27;

  if (a20)
    std::mutex::unlock(a19);
  if (a22)
    std::mutex::unlock(a21);
  if (__p)
    operator delete(__p);
  if (a26)
    operator delete(a26);
  _Unwind_Resume(a1);
}

uint64_t sub_10019B198(uint64_t a1, int a2)
{
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  _QWORD v8[3];
  void *__p;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;

  v12 = 0;
  v13 = 0;
  v14 = 0;
  sub_10003F150((unint64_t *)&v12, 4uLL);
  *(_DWORD *)v12 = a2;
  __p = 0;
  v10 = 0;
  v11 = 0;
  if (sub_1002042C4(a1 + 544, 0x35u, (uint64_t)&v12, (unint64_t *)&__p))
  {
    v4 = 0;
  }
  else
  {
    v5 = (id)qword_10085F520;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      sub_100360280(0x35u, v8);
      sub_1003D53A0();
    }

    sub_10019986C(v6, (uint64_t)&__p);
    v4 = 4294966272;
  }
  if (__p)
  {
    v10 = __p;
    operator delete(__p);
  }
  if (v12)
  {
    v13 = v12;
    operator delete(v12);
  }
  return v4;
}

void sub_10019B2A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  void *v17;
  void *v18;

  v18 = v17;

  if (__p)
    operator delete(__p);
  if (a16)
    operator delete(a16);
  _Unwind_Resume(a1);
}

uint64_t sub_10019B2EC(uint64_t a1, uint64_t a2)
{
  if (sub_10020619C(a1 + 544, a2))
    return 0;
  else
    return 4294966279;
}

uint64_t sub_10019B310(uint64_t a1, int a2)
{
  if (sub_10020641C(a1 + 544, a2))
    return 0;
  else
    return 4294966268;
}

unint64_t sub_10019B334(uint64_t a1)
{
  unsigned __int16 v1;
  unsigned __int16 v2;
  uint64_t v3;

  v1 = sub_10020670C(a1 + 544);
  if ((v1 & 0xFF00) != 0)
    v2 = v1;
  else
    v2 = 0;
  v3 = 4294966267;
  if ((v1 & 0xFF00) != 0)
    v3 = 0;
  return v3 | ((unint64_t)v2 << 32);
}

BOOL sub_10019B364(uint64_t a1, char a2, __int16 a3)
{
  char *v6;
  _BOOL8 v7;
  NSObject *v8;
  uint64_t v9;
  _QWORD v11[3];
  void *__p;
  void *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;

  v15 = 0;
  v16 = 0;
  v17 = 0;
  sub_10003F150((unint64_t *)&v15, 3uLL);
  v6 = (char *)v15;
  *(_BYTE *)v15 = a2;
  *(_WORD *)(v6 + 1) = a3;
  __p = 0;
  v13 = 0;
  v14 = 0;
  v7 = sub_1002042C4(a1 + 544, 0x39u, (uint64_t)&v15, (unint64_t *)&__p);
  if (!v7)
  {
    v8 = (id)qword_10085F520;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      sub_100360280(0x39u, v11);
      sub_1003D546C();
    }

    sub_10019986C(v9, (uint64_t)&__p);
  }
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
  if (v15)
  {
    v16 = v15;
    operator delete(v15);
  }
  return v7;
}

void sub_10019B474(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  void *v17;

  if (__p)
    operator delete(__p);
  if (a16)
    operator delete(a16);
  _Unwind_Resume(a1);
}

uint64_t sub_10019B4BC(uint64_t a1)
{
  std::mutex *v2;
  char *v3;
  NSObject *v4;
  unint64_t v5;
  const char *v6;
  NSObject *v7;
  unsigned int v8;
  unsigned int v9;
  void *__p;
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  char v17;
  uint8_t buf[4];
  const char *v19;

  v2 = (std::mutex *)(a1 + 336);
  std::mutex::lock((std::mutex *)(a1 + 336));
  v17 = 1;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  sub_10003A474(&v14, &v17, (uint64_t)buf, 1uLL);
  __p = 0;
  v12 = 0;
  v13 = 0;
  if (!sub_1002042C4(a1 + 544, 0x2Du, (uint64_t)&v14, (unint64_t *)&__p))
  {
    v7 = (id)qword_10085F520;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      sub_100360280(0x2Du, buf);
      sub_1003D551C();
    }

    goto LABEL_9;
  }
  v3 = (char *)__p;
  if (v12 == __p)
  {
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
      sub_1003D54B4();
LABEL_9:
    LOBYTE(v8) = 0;
    v9 = 0;
    goto LABEL_15;
  }
  *(_WORD *)(a1 + 2632) = *(unsigned __int8 *)__p | 0x100;
  v4 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *v3;
    if (v5 > 2)
      v6 = "";
    else
      v6 = off_10080B320[v5];
    *(_DWORD *)buf = 136315138;
    v19 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#roseprovider,#deep-slp QueryDeepSleepState complete state: %s", buf, 0xCu);
  }
  v8 = *(unsigned __int16 *)(a1 + 2632);
  v9 = v8 >> 8;
LABEL_15:
  if (__p)
  {
    v12 = __p;
    operator delete(__p);
  }
  if (v14)
  {
    v15 = v14;
    operator delete(v14);
  }
  std::mutex::unlock(v2);
  return v8 | (v9 << 8);
}

void sub_10019B6AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  std::mutex *v14;
  void *v15;
  void *v16;

  v16 = v15;

  if (__p)
    operator delete(__p);
  if (a13)
    operator delete(a13);
  std::mutex::unlock(v14);
  _Unwind_Resume(a1);
}

uint64_t sub_10019B700(uint64_t a1)
{
  return sub_100204190((NSObject **)(a1 + 544));
}

uint64_t sub_10019B708(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v6;
  uint64_t *v7;
  _BYTE *v8;
  char v9;
  uint64_t v10;
  void *__p;
  _BYTE *v13;
  uint64_t v14;

  __p = 0;
  v13 = 0;
  v14 = 0;
  sub_10003F150((unint64_t *)&__p, 5uLL);
  v6 = (char *)__p;
  v7 = *(uint64_t **)(a2 + 16);
  while (1)
  {
    v8 = __p;
    if (!v7)
      break;
    if (v13 - (_BYTE *)__p >= 1)
      bzero(__p, v13 - (_BYTE *)__p);
    v9 = *v6;
    *(_DWORD *)(v6 + 1) = *((_DWORD *)v7 + 4);
    v7 = (uint64_t *)*v7;
    *v6 = v9 + 1;
    v10 = sub_10019B7EC(a1, &__p, a3);
    if ((_DWORD)v10)
    {
      v8 = __p;
      if (!__p)
        return v10;
      goto LABEL_9;
    }
  }
  v10 = 0;
  if (!__p)
    return v10;
LABEL_9:
  v13 = v8;
  operator delete(v8);
  return v10;
}

void sub_10019B7CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10019B7EC(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  std::chrono::steady_clock::time_point v6;
  std::chrono::steady_clock::time_point v7;
  std::chrono::system_clock::time_point v8;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v9;
  std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> v10;
  int v11;
  NSObject *v12;
  int v13;
  int v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  NSObject *v19;
  std::unique_lock<std::mutex> __lk;
  std::mutex *v21;
  char v22;
  void *__p;
  void *v24;
  uint64_t v25;
  uint8_t buf[4];
  _BYTE v27[10];
  int v28;
  __int16 v29;
  const char *v30;

  if (a2[1] - *a2 != 5)
    sub_1003D562C();
  __p = 0;
  v24 = 0;
  v25 = 0;
  v21 = (std::mutex *)(a1 + 208);
  v22 = 0;
  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 144);
  __lk.__owns_ = 0;
  sub_10019A0A0((uint64_t)&v21, (uint64_t)&__lk);
  if (*(_BYTE *)(a1 + 2547))
    *(_BYTE *)(a1 + 2547) = 0;
  if (!sub_1002042C4(a1 + 544, 0x33u, (uint64_t)a2, (unint64_t *)&__p))
  {
    v16 = (id)qword_10085F520;
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      sub_100360280(0x33u, buf);
      sub_1003D53A0();
    }

    sub_10019986C(v17, (uint64_t)&__p);
    v15 = 4294966278;
    goto LABEL_35;
  }
  v6.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_ + 1000000 * a3;
  do
  {
    if (*(_BYTE *)(a1 + 2547))
      goto LABEL_23;
    if (std::chrono::steady_clock::now().__d_.__rep_ >= v6.__d_.__rep_)
      break;
    v7.__d_.__rep_ = v6.__d_.__rep_ - std::chrono::steady_clock::now().__d_.__rep_;
    if (v7.__d_.__rep_ >= 1)
    {
      std::chrono::steady_clock::now();
      v8.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
      if (v8.__d_.__rep_)
      {
        if (v8.__d_.__rep_ < 1)
        {
          if ((unint64_t)v8.__d_.__rep_ < 0xFFDF3B645A1CAC09)
          {
            v9 = 0x8000000000000000;
            goto LABEL_19;
          }
        }
        else if ((unint64_t)v8.__d_.__rep_ > 0x20C49BA5E353F7)
        {
          v9 = 0x7FFFFFFFFFFFFFFFLL;
          goto LABEL_17;
        }
        v9 = 1000 * v8.__d_.__rep_;
      }
      else
      {
        v9 = 0;
      }
LABEL_17:
      if (v9 > (v7.__d_.__rep_ ^ 0x7FFFFFFFFFFFFFFFLL))
      {
        v10.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
LABEL_20:
        std::condition_variable::__do_timed_wait((std::condition_variable *)(a1 + 32), &__lk, v10);
        std::chrono::steady_clock::now();
        continue;
      }
LABEL_19:
      v10.__d_.__rep_ = v9 + v7.__d_.__rep_;
      goto LABEL_20;
    }
  }
  while (std::chrono::steady_clock::now().__d_.__rep_ < v6.__d_.__rep_);
  if (*(_BYTE *)(a1 + 2547))
  {
LABEL_23:
    v11 = *(unsigned __int8 *)(a1 + 2478);
    v12 = qword_10085F520;
    if (v11 != 4)
    {
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_FAULT))
        sub_1003D5590(v11, v12);
      v19 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)v27 = "/Library/Caches/com.apple.xbs/Sources/Proximity/Libraries/DaemonCore/Ranging/Providers/Rose/PRRoseProvider.mm";
        *(_WORD *)&v27[8] = 1024;
        v28 = 850;
        v29 = 2080;
        v30 = "_sendAlishaDeleteKeysCommandSync";
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "#roseprovider,%s:%d: assertion failure in %s", buf, 0x1Cu);
      }
      abort();
    }
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
    {
      v13 = *(_DWORD *)(a1 + 2501);
      v14 = *(unsigned __int16 *)(a1 + 2499);
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)v27 = v14;
      *(_WORD *)&v27[4] = 1024;
      *(_DWORD *)&v27[6] = v13;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#roseprovider,#alisha delete keys - status %u, uwb session id %u", buf, 0xEu);
    }
    v15 = 0;
    if (*(_BYTE *)(a1 + 2547))
      *(_BYTE *)(a1 + 2547) = 0;
    goto LABEL_35;
  }
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
    sub_1003D5564();
  v15 = 4294966277;
LABEL_35:
  if (__lk.__owns_)
    std::mutex::unlock(__lk.__m_);
  if (v22)
    std::mutex::unlock(v21);
  if (__p)
  {
    v24 = __p;
    operator delete(__p);
  }
  return v15;
}

void sub_10019BB6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::mutex *a10, char a11, std::mutex *a12, char a13, void *__p, uint64_t a15)
{
  void *v15;

  if (a11)
    std::mutex::unlock(a10);
  if (a13)
    std::mutex::unlock(a12);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_10019BBC0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *__p;
  void *v7;
  uint64_t v8;

  __p = 0;
  v7 = 0;
  v8 = 0;
  sub_10003F150((unint64_t *)&__p, 5uLL);
  *(_BYTE *)__p = 0;
  v4 = sub_10019B7EC(a1, &__p, a2);
  if (__p)
  {
    v7 = __p;
    operator delete(__p);
  }
  return v4;
}

void sub_10019BC2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10019BC4C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  BOOL v6;
  std::chrono::steady_clock::time_point v7;
  unsigned __int8 v8;
  std::chrono::steady_clock::time_point v9;
  std::chrono::system_clock::time_point v10;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v11;
  std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> v12;
  unsigned __int8 v13;
  NSObject *v14;
  NSObject *v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  void *__p;
  void *v20;
  uint64_t v21;
  BOOL v22;
  std::unique_lock<std::mutex> __lk;
  void *v24;
  void *v25;
  uint64_t v26;

  v24 = 0;
  v25 = 0;
  v26 = 0;
  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 144);
  __lk.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 144));
  atomic_store(0, (unsigned __int8 *)(a1 + 25));
  v22 = 0;
  if ((sub_100200FC8(a1 + 544, &v22) & 1) == 0)
  {
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
      sub_1003D5680();
    goto LABEL_33;
  }
  if (!v22)
  {
    v14 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__p) = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#roseprovider,Rose is powered off. Can't query power stats", (uint8_t *)&__p, 2u);
    }
    goto LABEL_33;
  }
  __p = 0;
  v20 = 0;
  v21 = 0;
  v6 = sub_1002042C4(a1 + 544, 0x26u, (uint64_t)&__p, (unint64_t *)&v24);
  if (__p)
  {
    v20 = __p;
    operator delete(__p);
  }
  if (!v6)
  {
    v15 = (id)qword_10085F520;
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      sub_100360280(0x26u, &__p);
      sub_1003D5250();
    }

    sub_10019986C(v16, (uint64_t)&v24);
    goto LABEL_33;
  }
  v7.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_ + 1000000 * a2;
  do
  {
    v8 = atomic_load((unsigned __int8 *)(a1 + 25));
    if ((v8 & 1) != 0)
      goto LABEL_39;
    if (std::chrono::steady_clock::now().__d_.__rep_ >= v7.__d_.__rep_)
      break;
    v9.__d_.__rep_ = v7.__d_.__rep_ - std::chrono::steady_clock::now().__d_.__rep_;
    if (v9.__d_.__rep_ >= 1)
    {
      std::chrono::steady_clock::now();
      v10.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
      if (v10.__d_.__rep_)
      {
        if (v10.__d_.__rep_ < 1)
        {
          if ((unint64_t)v10.__d_.__rep_ < 0xFFDF3B645A1CAC09)
          {
            v11 = 0x8000000000000000;
            goto LABEL_20;
          }
        }
        else if ((unint64_t)v10.__d_.__rep_ > 0x20C49BA5E353F7)
        {
          v11 = 0x7FFFFFFFFFFFFFFFLL;
          goto LABEL_18;
        }
        v11 = 1000 * v10.__d_.__rep_;
      }
      else
      {
        v11 = 0;
      }
LABEL_18:
      if (v11 > (v9.__d_.__rep_ ^ 0x7FFFFFFFFFFFFFFFLL))
      {
        v12.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
LABEL_21:
        std::condition_variable::__do_timed_wait((std::condition_variable *)(a1 + 32), &__lk, v12);
        std::chrono::steady_clock::now();
        continue;
      }
LABEL_20:
      v12.__d_.__rep_ = v11 + v9.__d_.__rep_;
      goto LABEL_21;
    }
  }
  while (std::chrono::steady_clock::now().__d_.__rep_ < v7.__d_.__rep_);
  v13 = atomic_load((unsigned __int8 *)(a1 + 25));
  if ((v13 & 1) != 0)
  {
LABEL_39:
    v17 = *(_OWORD *)(a1 + 2584);
    *(_OWORD *)a3 = *(_OWORD *)(a1 + 2568);
    *(_OWORD *)(a3 + 16) = v17;
    v18 = *(_OWORD *)(a1 + 2616);
    *(_OWORD *)(a3 + 32) = *(_OWORD *)(a1 + 2600);
    *(_OWORD *)(a3 + 48) = v18;
    goto LABEL_34;
  }
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
    sub_1003D5654();
LABEL_33:
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 60) = 0;
LABEL_34:
  if (__lk.__owns_)
    std::mutex::unlock(__lk.__m_);
  if (v24)
  {
    v25 = v24;
    operator delete(v24);
  }
}

void sub_10019BF38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  void *v17;
  std::mutex *v18;

  std::mutex::unlock(v18);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_10019BF90(uint64_t a1, uint64_t a2)
{
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
    sub_1003D56AC();
  return sub_10019BFEC(a1, a2);
}

uint64_t sub_10019BFEC(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  NSObject *v5;
  int v6;
  NSObject *v7;
  NSObject *v8;
  int v9;
  NSObject *v10;
  int v11;
  NSObject *v12;
  int v13;
  NSObject *v14;
  _BOOL4 v15;
  __int16 v16;
  __int16 v17;
  uint64_t v18;
  const void *v19;
  NSObject *v20;
  NSObject *v21;
  NSObject *v22;
  NSObject *v23;
  unsigned int v24;
  const char *v25;
  int v26;
  _BOOL4 v27;
  const char *v28;
  void *v29;
  uint64_t v30;
  NSObject *v31;
  uint64_t v32;
  unsigned int v34;
  char *v35;
  std::string *v36;
  __int128 v37;
  const char *v38;
  int v39;
  std::runtime_error *exception;
  std::string v41;
  std::string __p;
  _WORD v43[2];
  int v44;
  _BYTE buf[35];
  _BYTE v46[5];
  _BYTE v47[15];

  memset(&__p, 0, sizeof(__p));
  switch(*(_DWORD *)a2)
  {
    case 0:
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
        sub_1003D58AC();
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "relayCommandMessage of unspecified type.");
    case 1:
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
        sub_1003D574C();
      if (!*(_BYTE *)(a2 + 512))
      {
        v38 = "msg.request.has_value()";
        v39 = 977;
        goto LABEL_129;
      }
      sub_1001715D4(a2 + 8, *(_WORD *)(a2 + 4), (uint64_t)buf);
      if (!v47[0])
      {
        if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
          sub_1003D5720();
        goto LABEL_102;
      }
      memset(&v41, 0, sizeof(v41));
      sub_10003A474(&v41, buf, (uint64_t)v47, 0x99uLL);
      if (__p.__r_.__value_.__r.__words[0])
      {
        __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      __p = v41;
      v4 = 33;
LABEL_93:
      memset(buf, 0, 24);
      if (sub_1002042C4(a1 + 544, v4, (uint64_t)&__p, (unint64_t *)buf))
      {
        v29 = *(void **)buf;
        if (*(_QWORD *)buf)
        {
          *(_QWORD *)&buf[8] = *(_QWORD *)buf;
LABEL_96:
          operator delete(v29);
        }
        goto LABEL_97;
      }
      v31 = (id)qword_10085F520;
      if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
      {
        sub_100360280(v4, &v41);
        sub_1003D56D8();
      }

      sub_10019986C(v32, (uint64_t)buf);
      if (*(_QWORD *)buf)
      {
        *(_QWORD *)&buf[8] = *(_QWORD *)buf;
        operator delete(*(void **)buf);
      }
LABEL_102:
      v30 = 0;
LABEL_103:
      if (__p.__r_.__value_.__r.__words[0])
      {
        __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      return v30;
    case 2:
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
        sub_1003D57A4();
      if (*(_BYTE *)(a2 + 632))
      {
        if (*(_BYTE *)(a2 + 512))
        {
          sub_100177BC0(*(unsigned __int16 *)(a2 + 4), a2 + 8, a2 + 520, (uint64_t)buf);
          if (!v46[2])
          {
            if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
              sub_1003D5778();
            goto LABEL_102;
          }
          memset(&v41, 0, sizeof(v41));
          sub_10003A474(&v41, buf, (uint64_t)&v46[2], 0x25uLL);
          if (__p.__r_.__value_.__r.__words[0])
          {
            __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          __p = v41;
          v4 = 34;
          goto LABEL_93;
        }
        v38 = "msg.request.has_value()";
        v39 = 993;
      }
      else
      {
        v38 = "msg.start_options.has_value()";
        v39 = 992;
      }
      goto LABEL_129;
    case 3:
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
        sub_1003D57FC();
      v11 = sub_100177BB8(*(unsigned __int16 *)(a2 + 4));
      LOWORD(v41.__r_.__value_.__l.__data_) = v11;
      v41.__r_.__value_.__s.__data_[2] = BYTE2(v11);
      if ((v11 & 0xFF0000) == 0)
      {
        if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
          sub_1003D57D0();
        goto LABEL_102;
      }
      memset(buf, 0, 24);
      sub_10003A474(buf, &v41, (uint64_t)v41.__r_.__value_.__r.__words + 2, 2uLL);
      if (__p.__r_.__value_.__r.__words[0])
      {
        __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      __p = *(std::string *)buf;
      v4 = 35;
      goto LABEL_93;
    case 4:
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
        sub_1003D5854();
      v9 = sub_100177BB8(*(unsigned __int16 *)(a2 + 4));
      LOWORD(v41.__r_.__value_.__l.__data_) = v9;
      v41.__r_.__value_.__s.__data_[2] = BYTE2(v9);
      if ((v9 & 0xFF0000) == 0)
      {
        if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
          sub_1003D5828();
        goto LABEL_102;
      }
      memset(buf, 0, 24);
      sub_10003A474(buf, &v41, (uint64_t)v41.__r_.__value_.__r.__words + 2, 2uLL);
      if (__p.__r_.__value_.__r.__words[0])
      {
        __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      __p = *(std::string *)buf;
      v4 = 36;
      goto LABEL_93;
    case 5:
      v8 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#roseprovider,relayCommandMessage -- RawBytesCommand", buf, 2u);
      }
      if (*(_BYTE *)(a2 + 672))
      {
        v4 = *(_DWORD *)(a2 + 640);
        if (&__p != (std::string *)(a2 + 648))
          sub_10019E578(&__p, *(char **)(a2 + 648), *(char **)(a2 + 656), *(_QWORD *)(a2 + 656) - *(_QWORD *)(a2 + 648));
        goto LABEL_93;
      }
      v38 = "msg.raw_bytes_cmd.has_value()";
      v39 = 1033;
      goto LABEL_129;
    case 6:
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
        sub_1003D5880();
      if (*(_BYTE *)(a2 + 728))
      {
        memset(&buf[2], 0, 33);
        *(_WORD *)buf = *(_WORD *)(a2 + 680);
        v18 = *(_QWORD *)(a2 + 696);
        v19 = *(const void **)(a2 + 688);
        buf[2] = v18 - (_BYTE)v19;
        if ((unint64_t)(v18 - (_QWORD)v19) >= 0x21)
          __assert_rtn("relayCommandMessage", "PRRoseProvider.mm", 1044, "msg.session_data.value().bytes.size() <= sizeof(pkt.bytes)");
        memcpy(&buf[3], v19, v18 - (_QWORD)v19);
        memset(&v41, 0, sizeof(v41));
        sub_10003A474(&v41, buf, (uint64_t)v46, 0x23uLL);
        if (__p.__r_.__value_.__r.__words[0])
        {
          __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        __p = v41;
        v4 = 43;
        goto LABEL_93;
      }
      v38 = "msg.session_data.has_value()";
      v39 = 1040;
      goto LABEL_129;
    case 7:
      v21 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "#roseprovider,#throttle relayCommandMessage -- UpdateSessionSubrate", buf, 2u);
      }
      if (*(_BYTE *)(a2 + 741))
      {
        memset(buf, 0, 24);
        sub_10003A474(buf, (const void *)(a2 + 738), a2 + 741, 3uLL);
        __p = *(std::string *)buf;
        v4 = 47;
        goto LABEL_93;
      }
      v38 = "msg.subrate_cmd.has_value()";
      v39 = 1052;
      goto LABEL_129;
    case 8:
      v12 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#roseprovider,relayCommandMessage -- LPEMEnable", buf, 2u);
      }
      sub_100203B24((NSObject **)(a1 + 544));
      goto LABEL_97;
    case 9:
      v10 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#roseprovider,relayCommandMessage -- NBSARStateUpdate", buf, 2u);
      }
      if (*(_BYTE *)(a2 + 737))
      {
        v41.__r_.__value_.__s.__data_[0] = *(_BYTE *)(a2 + 736);
        memset(buf, 0, 24);
        sub_10003A474(buf, &v41, (uint64_t)v41.__r_.__value_.__r.__words + 1, 1uLL);
        if (__p.__r_.__value_.__r.__words[0])
        {
          __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        __p = *(std::string *)buf;
        v4 = 44;
        goto LABEL_93;
      }
      v38 = "msg.narrowband_sar_state.has_value()";
      v39 = 1069;
      goto LABEL_129;
    case 0xA:
      v22 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "#roseprovider,relayCommandMessage -- SystemOn", buf, 2u);
      }
      sub_100200BB4((NSObject **)(a1 + 544), 0);
      goto LABEL_97;
    case 0xB:
      v20 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "#roseprovider,relayCommandMessage -- RefreshConfiguration", buf, 2u);
      }
      sub_100203A14((NSObject **)(a1 + 544));
      goto LABEL_97;
    case 0xC:
      v23 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
      {
        v24 = *(unsigned __int16 *)(a2 + 742) - 1;
        if (v24 > 0x19)
          v25 = "UNDEFINED";
        else
          v25 = off_10080B350[(__int16)v24];
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = v25;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "#roseprovider,relayCommandMessage -- TriggerFatalErrorHandling for %s", buf, 0xCu);
      }
      v34 = *(unsigned __int16 *)(a2 + 742) - 1;
      if (v34 > 0x19)
        v35 = "UNDEFINED";
      else
        v35 = off_10080B350[(__int16)v34];
      sub_10000BF04(&v41, v35);
      v36 = std::string::insert(&v41, 0, "AOPRoseFatalError: ");
      v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
      *(_QWORD *)&buf[16] = *((_QWORD *)&v36->__r_.__value_.__l + 2);
      *(_OWORD *)buf = v37;
      v36->__r_.__value_.__l.__size_ = 0;
      v36->__r_.__value_.__r.__words[2] = 0;
      v36->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v41.__r_.__value_.__l.__data_);
      sub_100208124((NSObject **)(a1 + 544), 0, (std::string::size_type)buf);
      if ((buf[23] & 0x80000000) == 0)
        goto LABEL_97;
      v29 = *(void **)buf;
      goto LABEL_96;
    case 0xD:
      v7 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#roseprovider,relayCommandMessage -- SystemOff_AirplaneMode", buf, 2u);
      }
      v6 = 3;
      goto LABEL_15;
    case 0xE:
      v5 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#roseprovider,relayCommandMessage -- SystemOff_RestrictedRegion", buf, 2u);
      }
      v6 = 4;
LABEL_15:
      sub_1001FFC48((NSObject **)(a1 + 544), v6);
      goto LABEL_97;
    case 0xF:
      v26 = *((_DWORD *)sub_100004784() + 186);
      v14 = qword_10085F520;
      v27 = os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT);
      if (v26 == 1)
      {
        if (v27)
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#roseprovider,relayCommandMessage -- ChannelToTriggerR2GpioBlankingChanged", buf, 2u);
        }
        if (*(_BYTE *)(a2 + 748))
        {
          sub_100206608();
LABEL_97:
          v30 = 1;
          goto LABEL_103;
        }
        v38 = "msg.channel_to_trigger_GPIO_blanking.has_value()";
        v39 = 1084;
LABEL_129:
        __assert_rtn("relayCommandMessage", "PRRoseProvider.mm", v39, v38);
      }
      if (!v27)
        goto LABEL_97;
      *(_WORD *)buf = 0;
      v28 = "#roseprovider,relayCommandMessage -- ChannelToTriggerR2GpioBlankingChanged invalid on current chip type";
      break;
    case 0x10:
      v13 = *((_DWORD *)sub_100004784() + 186);
      v14 = qword_10085F520;
      v15 = os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT);
      if (v13 == 1)
      {
        if (v15)
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#roseprovider,relayCommandMessage -- UpdateCoexNBBch", buf, 2u);
        }
        if (*(_BYTE *)(a2 + 756))
        {
          v16 = *(_WORD *)(a2 + 752);
          *(_WORD *)buf = 6;
          buf[2] = 0;
          *(_WORD *)&buf[4] = v16;
          buf[6] = 1;
          v43[0] = sub_10036C5B8(buf);
          if (!*(_BYTE *)(a2 + 756))
            sub_10000BA44();
          v17 = *(_WORD *)(a2 + 754);
          LOWORD(v41.__r_.__value_.__l.__data_) = 6;
          v41.__r_.__value_.__s.__data_[2] = 0;
          WORD2(v41.__r_.__value_.__r.__words[0]) = v17;
          v41.__r_.__value_.__s.__data_[6] = 1;
          v43[1] = sub_10036C5B8((unsigned __int8 *)&v41);
          memset(buf, 0, 24);
          sub_10003A474(buf, v43, (uint64_t)&v44, 4uLL);
          if (__p.__r_.__value_.__r.__words[0])
          {
            __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          __p = *(std::string *)buf;
          v4 = 56;
          goto LABEL_93;
        }
        v38 = "msg.nb_gpio_blanking_channel_idx_range.has_value()";
        v39 = 1100;
        goto LABEL_129;
      }
      if (!v15)
        goto LABEL_97;
      *(_WORD *)buf = 0;
      v28 = "#roseprovider,relayCommandMessage -- UpdateCoexNBBch invalid on current platform";
      break;
    default:
      v4 = 0;
      goto LABEL_93;
  }
  _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, v28, buf, 2u);
  goto LABEL_97;
}

void sub_10019CBA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  void *v27;

  __cxa_free_exception(v27);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_10019CC68(uint64_t a1, uint64_t a2)
{
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
    sub_1003D58D8();
  return sub_10019CCC4(a1, a2);
}

uint64_t sub_10019CCC4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  NSObject *v4;
  uint8_t v6[16];

  if (*(_DWORD *)a2)
  {
    v2 = a1;
    if (*(_DWORD *)a2 == 1)
    {
      v4 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v6 = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#roseprovider,relayPropertyMessage -- SetRoseConnectionlessMacAddress", v6, 2u);
      }
      if (!*(_BYTE *)(a2 + 12))
        sub_1003D5904();
      LOBYTE(a1) = sub_100205904(v2 + 544, (unsigned __int8 *)(a2 + 4));
    }
  }
  else
  {
    LODWORD(a1) = os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR);
    if ((_DWORD)a1)
    {
      sub_1003D592C();
      LOBYTE(a1) = 0;
    }
  }
  return a1 & 1;
}

void sub_10019CD94(uint64_t a1, uint64_t *a2)
{
  std::mutex *v4;

  v4 = (std::mutex *)(a1 + 80);
  std::mutex::lock((std::mutex *)(a1 + 80));
  sub_100021C24((_QWORD *)(a1 + 440), a2);
  std::mutex::unlock(v4);
}

uint64_t sub_10019CDD8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _BYTE v5[648];
  void *v6;
  void *v7;
  char v8;
  void *__p;
  void *v10;
  char v11;

  sub_10016A324((uint64_t)v5, a2);
  v3 = sub_10019BFEC(a1, (uint64_t)v5);
  if (v11 && __p)
  {
    v10 = __p;
    operator delete(__p);
  }
  if (v8 && v6)
  {
    v7 = v6;
    operator delete(v6);
  }
  return v3;
}

void sub_10019CE74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100167580((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10019CE90(uint64_t a1, uint64_t a2)
{
  return sub_10019CDD8(a1 - 8, a2);
}

uint64_t sub_10019CE98(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v10[13];
  uint64_t v11;

  v2 = *(_QWORD *)(a1 + 408);
  v3 = *(_OWORD *)(a2 + 176);
  v10[10] = *(_OWORD *)(a2 + 160);
  v10[11] = v3;
  v10[12] = *(_OWORD *)(a2 + 192);
  v11 = *(_QWORD *)(a2 + 208);
  v4 = *(_OWORD *)(a2 + 112);
  v10[6] = *(_OWORD *)(a2 + 96);
  v10[7] = v4;
  v5 = *(_OWORD *)(a2 + 144);
  v10[8] = *(_OWORD *)(a2 + 128);
  v10[9] = v5;
  v6 = *(_OWORD *)(a2 + 48);
  v10[2] = *(_OWORD *)(a2 + 32);
  v10[3] = v6;
  v7 = *(_OWORD *)(a2 + 80);
  v10[4] = *(_OWORD *)(a2 + 64);
  v10[5] = v7;
  v8 = *(_OWORD *)(a2 + 16);
  v10[0] = *(_OWORD *)a2;
  v10[1] = v8;
  return sub_10019CF2C(a1, v2, v10);
}

uint64_t sub_10019CF2C(uint64_t a1, uint64_t a2, __int128 *a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  int v10;
  _BYTE v11[560];
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  char v26;
  _BYTE v27[488];
  void *__p;
  void *v29;
  char v30;
  char v31;
  char v32;
  char v33;
  char v34;
  char v35;
  char v36;
  char v37;
  char v38;

  v10 = 2;
  v11[0] = 0;
  v11[552] = 0;
  v3 = a3[11];
  v22 = a3[10];
  v23 = v3;
  v24 = a3[12];
  v4 = a3[7];
  v18 = a3[6];
  v19 = v4;
  v5 = a3[9];
  v20 = a3[8];
  v21 = v5;
  v6 = a3[3];
  v14 = a3[2];
  v15 = v6;
  v7 = a3[5];
  v16 = a3[4];
  v17 = v7;
  v8 = a3[1];
  v12 = *a3;
  v13 = v8;
  v25 = *((_QWORD *)a3 + 26);
  v26 = 1;
  v27[0] = 0;
  v27[72] = 0;
  v27[80] = 0;
  v27[208] = 0;
  v27[216] = 0;
  v27[296] = 0;
  v27[304] = 0;
  v27[408] = 0;
  v27[416] = 0;
  v30 = 0;
  v31 = 0;
  v32 = 0;
  v33 = 0;
  v34 = 0;
  v35 = 0;
  v36 = 0;
  v37 = 0;
  v38 = 0;
  sub_10016BA8C(a2, &v10);
  if (v30 && __p)
  {
    v29 = __p;
    operator delete(__p);
  }
  sub_10016BD90((uint64_t)v27);
  return sub_100144868((uint64_t)v11);
}

void sub_10019D064(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10016BC44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10019D078(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v10[13];
  uint64_t v11;

  v2 = *(_QWORD *)(a1 + 392);
  v3 = *(_OWORD *)(a2 + 176);
  v10[10] = *(_OWORD *)(a2 + 160);
  v10[11] = v3;
  v10[12] = *(_OWORD *)(a2 + 192);
  v11 = *(_QWORD *)(a2 + 208);
  v4 = *(_OWORD *)(a2 + 112);
  v10[6] = *(_OWORD *)(a2 + 96);
  v10[7] = v4;
  v5 = *(_OWORD *)(a2 + 144);
  v10[8] = *(_OWORD *)(a2 + 128);
  v10[9] = v5;
  v6 = *(_OWORD *)(a2 + 48);
  v10[2] = *(_OWORD *)(a2 + 32);
  v10[3] = v6;
  v7 = *(_OWORD *)(a2 + 80);
  v10[4] = *(_OWORD *)(a2 + 64);
  v10[5] = v7;
  v8 = *(_OWORD *)(a2 + 16);
  v10[0] = *(_OWORD *)a2;
  v10[1] = v8;
  return sub_10019CF2C(a1 - 16, v2, v10);
}

BOOL sub_10019D110(uint64_t a1, int **a2, _QWORD *a3)
{
  char *v4;
  int *v5;
  unint64_t v6;
  void *v7;
  void *v8;
  id v9;
  _BOOL8 v10;
  NSObject *v14;
  int *v15;
  int v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  id v21;
  NSObject *v22;
  int *v23;
  int v24;
  char *v25;
  _BYTE *v26;
  _BYTE *v27;
  NSObject *v28;
  void **v29;
  char v30;
  NSObject *v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  id v35;
  _BYTE *v36;
  _BYTE *v37;
  NSObject *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _BOOL8 v45;
  char v46;
  void *v47;
  id v48;
  void *__p[2];
  char v50;
  void *__src[2];
  char v52;
  uint8_t v53[8];
  void *__dst;
  uint64_t v55;
  NSErrorUserInfoKey v56;
  const __CFString *v57;
  _BYTE v58[12];
  char v59;
  NSErrorUserInfoKey v60;
  const __CFString *v61;
  NSErrorUserInfoKey v62;
  const __CFString *v63;
  _BYTE buf[17];
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  _BYTE v72[30];
  char v73;
  NSErrorUserInfoKey v74;
  void *v75;

  v5 = *a2;
  v4 = (char *)a2[1];
  v6 = 0xCCCCCCCCCCCCCCCDLL * ((v4 - (char *)*a2) >> 3);
  if (v6 >= 0x1A)
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("pushBeaconAllowlist: %lu beacons specified, but max allowed is: %d"), v6, 25));
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
      sub_1003D5958();
    if (a3)
    {
      v74 = NSLocalizedDescriptionKey;
      v75 = v7;
      v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v75, &v74, 1));
      v9 = PRErrorWithCodeAndUserInfo(107, v8);
      *a3 = (id)objc_claimAutoreleasedReturnValue(v9);

    }
    return 0;
  }
  v14 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = v6;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#roseprovider,pushBeaconAllowlist - passed size check. Given %lu beacons ++", buf, 0xCu);
  }
  memset(v72, 0, sizeof(v72));
  v71 = 0u;
  v70 = 0u;
  v69 = 0u;
  v68 = 0u;
  v67 = 0u;
  v66 = 0u;
  v65 = 0u;
  *(_OWORD *)&buf[1] = 0u;
  if (v4 == (char *)v5)
  {
    v22 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v53 = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "#roseprovider,pushBeaconAllowlist: 0 beacons specified. Purging allowlist.", v53, 2u);
    }
  }
  else
  {
    v15 = *a2;
    v16 = **a2;
    if ((v16 - 4) <= 0xFFFFFFFD)
    {
      v17 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
        sub_1003D5A30(v17, v18, v19);
      if (a3)
      {
        v62 = NSLocalizedDescriptionKey;
        v63 = CFSTR("pushBeaconAllowlist: may only push BLE or UUID identified beacons.");
        v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v63, &v62, 1));
        v21 = PRErrorWithCodeAndUserInfo(107, v20);
        *a3 = (id)objc_claimAutoreleasedReturnValue(v21);

      }
      return 0;
    }
    *(_QWORD *)v53 = 0;
    __dst = 0;
    v55 = 0;
    v23 = a2[1];
    if (v15 == v23)
    {
      v25 = (char *)v15;
LABEL_25:
      buf[0] = v16 != 2;
      *(_QWORD *)&buf[1] = 0xCCCCCCCCCCCCCCCDLL * ((v25 - (char *)v15) >> 3);
      sub_10000BF04(v58, "Beacon addresses: contiguously:\n");
      v26 = *(_BYTE **)v53;
      v27 = __dst;
      sub_10000BF04(__p, "===== + = + =====\n");
      sub_1003A21CC((uint64_t)v58, (uint64_t)v26, v27 - v26, 4u, (uint64_t)__p);
      if (v50 < 0)
        operator delete(__p[0]);
      if (v59 < 0)
        operator delete(*(void **)v58);
      v28 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
      {
        v29 = __src;
        if (v52 < 0)
          v29 = (void **)__src[0];
        *(_DWORD *)v58 = 136315138;
        *(_QWORD *)&v58[4] = v29;
        _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "#roseprovider,%s", v58, 0xCu);
      }
      memcpy(&buf[9], *(const void **)v53, (size_t)__dst - *(_QWORD *)v53);
      if (v52 < 0)
        operator delete(__src[0]);
      v30 = 1;
    }
    else
    {
      while (*v15 == v16)
      {
        if (!*((_BYTE *)v15 + 36))
          sub_10000BA44();
        v24 = *(int *)((char *)v15 + 30);
        WORD2(__src[0]) = *((_WORD *)v15 + 17);
        LODWORD(__src[0]) = v24;
        sub_10019E684((uint64_t)v53, (char *)__dst, (char *)__src, (char *)__src + 6, 6);
        v15 += 10;
        if (v15 == v23)
        {
          v15 = *a2;
          v25 = (char *)a2[1];
          goto LABEL_25;
        }
      }
      v31 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
        sub_1003D5AA4(v31, v32, v33);
      if (a3)
      {
        v60 = NSLocalizedDescriptionKey;
        v61 = CFSTR("Given vector of different types beacons. All beacons must be of the same identifer type.");
        v34 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v61, &v60, 1));
        v35 = PRErrorWithCodeAndUserInfo(107, v34);
        *a3 = (id)objc_claimAutoreleasedReturnValue(v35);

      }
      v30 = 0;
    }
    if (*(_QWORD *)v53)
    {
      __dst = *(void **)v53;
      operator delete(*(void **)v53);
    }
    if ((v30 & 1) == 0)
      return 0;
  }
  *(_QWORD *)v53 = 0;
  __dst = 0;
  v55 = 0;
  sub_10003A474(v53, buf, (uint64_t)&v73, 0x9FuLL);
  sub_10000BF04(v58, "Allowlist Beacons:\n");
  v36 = *(_BYTE **)v53;
  v37 = __dst;
  sub_10000BF04(__p, "===========\n");
  sub_1003A21CC((uint64_t)v58, (uint64_t)v36, v37 - v36, 4u, (uint64_t)__p);
  if (v50 < 0)
    operator delete(__p[0]);
  if (v59 < 0)
    operator delete(*(void **)v58);
  v38 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
    sub_1003D59BC((uint64_t)__src, v38, v39, v40, v41, v42, v43, v44);
  v45 = sub_1002044F4(a1 + 544, 0xD2u, (uint64_t)v53);
  v10 = v45;
  if (a3)
    v46 = v45;
  else
    v46 = 1;
  if ((v46 & 1) == 0)
  {
    v56 = NSLocalizedDescriptionKey;
    v57 = CFSTR("Failed to push beacon allowlist to AOP.");
    v47 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v57, &v56, 1));
    v48 = PRErrorWithCodeAndUserInfo(107, v47);
    *a3 = (id)objc_claimAutoreleasedReturnValue(v48);

  }
  if (v52 < 0)
    operator delete(__src[0]);
  if (*(_QWORD *)v53)
  {
    __dst = *(void **)v53;
    operator delete(*(void **)v53);
  }
  return v10;
}

void sub_10019D6F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  void *v34;

  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_10019D7B0(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_100252B7C();
    operator delete();
  }
  return result;
}

_QWORD *sub_10019D7EC(uint64_t a1)
{
  uint64_t v1;
  NSObject **v2;
  _QWORD *result;
  uint64_t v4;
  _QWORD v5[3];
  _QWORD *v6;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(NSObject ***)(v1 + 3096);
  v5[0] = off_10080B160;
  v5[1] = v1;
  v6 = v5;
  sub_100252B80(v2, (uint64_t)qword_100850430, (uint64_t)v5, *(void **)(v1 + 400));
  result = v6;
  if (v6 == v5)
  {
    v4 = 4;
    result = v5;
  }
  else
  {
    if (!v6)
      return result;
    v4 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v4))();
}

void sub_10019D894(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_10019D8D0(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;

  *(double *)(a2 + 8) = a3;
  v4 = sub_10028D4C0(a1 + 3048, a3);
  if (!v5)
    return 0;
  *(_QWORD *)(a2 + 16) = v4;
  v6 = sub_10028D8E8(*(double *)&v4);
  if (!v7)
    return 0;
  *(_QWORD *)a2 = v6;
  return 1;
}

uint64_t sub_10019D92C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  void *__p;
  void *v9;
  char v10;

  sub_10019E928((uint64_t)&v5, a3);
  sub_10016BA8C(a2, &v5);
  if (v10 && __p)
  {
    v9 = __p;
    operator delete(__p);
  }
  sub_10016BD90((uint64_t)&v7);
  return sub_100144868((uint64_t)&v6);
}

void sub_10019D9C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10016BC44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10019D9DC(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = *(_OWORD *)(a2 + 16);
  v5 = *(_OWORD *)(a2 + 32);
  v6 = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)(a1 + 48) = v6;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  sub_1001375D8((_QWORD *)(a1 + 72), *(const void **)(a2 + 72), *(_QWORD *)(a2 + 80), (uint64_t)(*(_QWORD *)(a2 + 80) - *(_QWORD *)(a2 + 72)) >> 3);
  v7 = *(_OWORD *)(a2 + 96);
  v8 = *(_OWORD *)(a2 + 112);
  v9 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 128) = v9;
  *(_OWORD *)(a1 + 112) = v8;
  *(_OWORD *)(a1 + 96) = v7;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  sub_100137690((_QWORD *)(a1 + 136), *(const void **)(a2 + 136), *(_QWORD *)(a2 + 144), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a2 + 144) - *(_QWORD *)(a2 + 136)) >> 3));
  memcpy((void *)(a1 + 160), (const void *)(a2 + 160), 0x181uLL);
  return a1;
}

void sub_10019DAA0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 80) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10019DABC(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  sub_10015A39C((_BYTE *)(a1 + 8), a2 + 8);
  v4 = *(_OWORD *)(a2 + 584);
  *(_OWORD *)(a1 + 568) = *(_OWORD *)(a2 + 568);
  *(_OWORD *)(a1 + 584) = v4;
  v5 = *(_OWORD *)(a2 + 600);
  v6 = *(_OWORD *)(a2 + 616);
  v7 = *(_OWORD *)(a2 + 648);
  *(_OWORD *)(a1 + 632) = *(_OWORD *)(a2 + 632);
  *(_OWORD *)(a1 + 648) = v7;
  *(_OWORD *)(a1 + 600) = v5;
  *(_OWORD *)(a1 + 616) = v6;
  v8 = *(_OWORD *)(a2 + 664);
  v9 = *(_OWORD *)(a2 + 680);
  v10 = *(_OWORD *)(a2 + 712);
  *(_OWORD *)(a1 + 696) = *(_OWORD *)(a2 + 696);
  *(_OWORD *)(a1 + 712) = v10;
  *(_OWORD *)(a1 + 664) = v8;
  *(_OWORD *)(a1 + 680) = v9;
  v11 = *(_OWORD *)(a2 + 728);
  v12 = *(_OWORD *)(a2 + 744);
  v13 = *(_OWORD *)(a2 + 776);
  *(_OWORD *)(a1 + 760) = *(_OWORD *)(a2 + 760);
  *(_OWORD *)(a1 + 776) = v13;
  *(_OWORD *)(a1 + 728) = v11;
  *(_OWORD *)(a1 + 744) = v12;
  sub_10016BC8C((_BYTE *)(a1 + 792), a2 + 792);
  memcpy((void *)(a1 + 872), (const void *)(a2 + 872), 0x149uLL);
  sub_10015A3F0((__n128 *)(a1 + 1208), (__n128 *)(a2 + 1208));
  memcpy((void *)(a1 + 1328), (const void *)(a2 + 1328), 0x1D9uLL);
  return a1;
}

void sub_10019DB78(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_10016BD90(v2);
  sub_100144868(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10019DB9C(uint64_t a1)
{
  sub_10000BAB8(a1 + 32);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

_QWORD *sub_10019DBD4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = a1[5];
  a1[5] = 0;
  if (v2)
    operator delete();
  v3 = a1[4];
  a1[4] = 0;
  if (v3)
    operator delete();
  v4 = a1[3];
  a1[3] = 0;
  if (v4)
    operator delete();
  v5 = a1[2];
  a1[2] = 0;
  if (v5)
    operator delete();
  return a1;
}

void sub_10019DC74(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  char *v6;
  NSObject *v7;
  int v8;
  char *v9;

  v3 = a2;
  v4 = *(_QWORD *)(a1 + 32);
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[PRGlobalDebugSettings sharedSettings](PRGlobalDebugSettings, "sharedSettings"));
  v6 = (char *)objc_msgSend(v5, "integerForKey:", v3);

  if ((unint64_t)(v6 - 4) >= 0xFFFFFFFFFFFFFFFDLL)
  {
    v7 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
    {
      v8 = 134217984;
      v9 = v6;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#roseprovider,logging level set via debug settings: %ld", (uint8_t *)&v8, 0xCu);
    }
    sub_100205B94(v4 + 544, (char)v6);
  }

}

void sub_10019DD68(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10019DD90(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  id v7;
  void *v8;
  id v9;
  NSObject *v10;
  void *v11;
  _WORD *v12;
  void *v13;
  int v14;
  void *v15;

  v3 = a2;
  v4 = *(_QWORD *)(a1 + 32);
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[PRGlobalDebugSettings sharedSettings](PRGlobalDebugSettings, "sharedSettings"));
  v7 = objc_msgSend(v5, "objectForKey:ofClass:", v3, objc_opt_class(NSArray, v6));
  v8 = (void *)objc_claimAutoreleasedReturnValue(v7);

  v9 = objc_msgSend(v8, "count");
  v10 = qword_10085F520;
  if (v9 == (id)2)
  {
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
    {
      v14 = 138412290;
      v15 = v8;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#roseprovider,LE thresholds set via debug settings: %@", (uint8_t *)&v14, 0xCu);
    }
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "objectAtIndexedSubscript:", 0));
    v12 = objc_msgSend(v11, "intValue");
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "objectAtIndexedSubscript:", 1));
    sub_100205F38(v4 + 544, v12, (int)objc_msgSend(v13, "intValue"));

  }
  else if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
  {
    sub_1003D5B18();
  }

}

void sub_10019DF0C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

uint64_t sub_10019DF54()
{
  return 0;
}

uint64_t sub_10019DF5C()
{
  return 0;
}

uint64_t sub_10019DF64()
{
  return 0;
}

uint64_t sub_10019DF6C()
{
  return 0;
}

uint64_t sub_10019DF74()
{
  return 0;
}

uint64_t sub_10019DF7C(uint64_t a1, uint64_t a2)
{
  *(double *)a1 = (double)std::chrono::steady_clock::now().__d_.__rep_;
  *(_DWORD *)(a1 + 8) = 3;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)a2;
  sub_10015A524((_BYTE *)(a1 + 24), a2 + 8);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 72) = 1;
  *(_BYTE *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 92) = 0;
  *(_BYTE *)(a1 + 96) = 0;
  *(_BYTE *)(a1 + 100) = 0;
  *(_BYTE *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 140) = 0;
  return a1;
}

uint64_t sub_10019DFF0(uint64_t a1, int a2)
{
  int v3;

  *(_WORD *)a1 = a2;
  if ((BYTE2(a2) - 1) > 6u)
    v3 = 0;
  else
    v3 = dword_10046EF58[(char)(BYTE2(a2) - 1)];
  *(_DWORD *)(a1 + 4) = v3;
  *(_DWORD *)(a1 + 8) = sub_10019E054(a1, HIBYTE(a2));
  return a1;
}

uint64_t sub_10019E054(uint64_t a1, int a2)
{
  if ((a2 - 1) < 0x13)
    return (a2 - 1) + 1;
  else
    return 0;
}

uint64_t sub_10019E068(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  *(_DWORD *)a1 = 6;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 560) = 0;
  *(_BYTE *)(a1 + 568) = 0;
  *(_BYTE *)(a1 + 784) = 0;
  *(_BYTE *)(a1 + 792) = 0;
  *(_BYTE *)(a1 + 864) = 0;
  *(_BYTE *)(a1 + 872) = 0;
  *(_BYTE *)(a1 + 1000) = 0;
  *(_BYTE *)(a1 + 1008) = 0;
  *(_BYTE *)(a1 + 1088) = 0;
  *(_BYTE *)(a1 + 1096) = 0;
  *(_BYTE *)(a1 + 1200) = 0;
  v4 = *a2;
  *(_WORD *)(a1 + 1216) = *((_WORD *)a2 + 4);
  *(_QWORD *)(a1 + 1208) = v4;
  v5 = *((_OWORD *)a2 + 1);
  v6 = *((_OWORD *)a2 + 2);
  v7 = *((_OWORD *)a2 + 3);
  *(_DWORD *)(a1 + 1272) = *((_DWORD *)a2 + 16);
  *(_OWORD *)(a1 + 1240) = v6;
  *(_OWORD *)(a1 + 1256) = v7;
  *(_OWORD *)(a1 + 1224) = v5;
  *(_QWORD *)(a1 + 1280) = 0;
  *(_QWORD *)(a1 + 1296) = 0;
  *(_QWORD *)(a1 + 1288) = 0;
  sub_10015366C((_QWORD *)(a1 + 1280), (const void *)a2[9], a2[10], (a2[10] - a2[9]) >> 4);
  *(_OWORD *)(a1 + 1304) = *((_OWORD *)a2 + 6);
  *(_BYTE *)(a1 + 1320) = 1;
  *(_BYTE *)(a1 + 1328) = 0;
  *(_BYTE *)(a1 + 1592) = 0;
  *(_BYTE *)(a1 + 1600) = 0;
  *(_BYTE *)(a1 + 1672) = 0;
  *(_BYTE *)(a1 + 1680) = 0;
  *(_BYTE *)(a1 + 1728) = 0;
  *(_BYTE *)(a1 + 1736) = 0;
  *(_BYTE *)(a1 + 1800) = 0;
  return a1;
}

void sub_10019E158(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_10016BD90(v2);
  sub_100144868(v1);
  _Unwind_Resume(a1);
}

void sub_10019E174(uint64_t a1, double a2)
{
  *(_WORD *)a1 = 0;
  *(double *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  operator new();
}

void sub_10019E1F0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;

  v5 = *(_QWORD *)(v1 + 32);
  *(_QWORD *)(v1 + 32) = 0;
  if (v5)
    operator delete();
  sub_1003D5B7C(v3, v2);
  _Unwind_Resume(a1);
}

void sub_10019E228(uint64_t a1, uint64_t a2, double a3)
{
  *(_WORD *)a1 = *(_WORD *)(a2 + 1);
  *(double *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = 0;
  operator new();
}

void sub_10019E2A4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v1 + 16) = 0;
  if (v3)
    operator delete();
  _Unwind_Resume(exception_object);
}

void sub_10019E2D0(uint64_t a1, uint64_t a2, double a3)
{
  *(_WORD *)a1 = *(_WORD *)(a2 + 1);
  *(double *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  operator new();
}

void sub_10019E340(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *(_QWORD *)(v1 + 24);
  *(_QWORD *)(v1 + 24) = 0;
  if (v4)
    operator delete();
  sub_1003D5BE0(v2);
  _Unwind_Resume(a1);
}

void sub_10019E378()
{
  operator delete();
}

__n128 sub_10019E38C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = off_10080B0B0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_10019E3CC(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = off_10080B0B0;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_10019E3F4(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

uint64_t sub_10019E410(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_10019E44C()
{
}

uint64_t sub_10019E458(uint64_t a1)
{
  std::mutex *v2;
  uint64_t result;

  v2 = *(std::mutex **)a1;
  if (v2)
  {
    if (!*(_BYTE *)(a1 + 8))
    {
      result = std::mutex::try_lock(v2);
      *(_BYTE *)(a1 + 8) = result;
      return result;
    }
  }
  else
  {
    std::__throw_system_error(1, "unique_lock::try_lock: references null mutex");
  }
  std::__throw_system_error(11, "unique_lock::try_lock: already locked");
  return sub_10019E4AC();
}

void sub_10019E4AC(uint64_t a1)
{
  std::mutex *v2;

  v2 = *(std::mutex **)a1;
  if (v2)
  {
    if (!*(_BYTE *)(a1 + 8))
    {
      std::mutex::lock(v2);
      *(_BYTE *)(a1 + 8) = 1;
      return;
    }
  }
  else
  {
    std::__throw_system_error(1, "unique_lock::lock: references null mutex");
  }
  std::__throw_system_error(11, "unique_lock::lock: already locked");
  sub_10019E504();
}

uint64_t sub_10019E504(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 8))
    sub_10019E538(*(_QWORD *)a1);
  return a1;
}

void sub_10019E538(uint64_t a1)
{
  int v2;
  void *v3;

  if (*(_BYTE *)(a1 + 8))
  {
    std::mutex::unlock(*(std::mutex **)a1);
    *(_BYTE *)(a1 + 8) = 0;
  }
  else
  {
    std::__throw_system_error(1, "unique_lock::unlock: not locked");
    sub_10019E578(v2, v3);
  }
}

_QWORD *sub_10019E578(_QWORD *result, char *__src, char *a3, unint64_t a4)
{
  _QWORD *v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  size_t v11;
  _BYTE *v12;
  size_t v13;
  char *v14;
  char *v15;
  size_t v16;

  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (v8 - *result < a4)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if ((a4 & 0x8000000000000000) != 0)
      sub_100026E7C();
    v10 = 2 * v8;
    if (2 * v8 <= a4)
      v10 = a4;
    if (v8 >= 0x3FFFFFFFFFFFFFFFLL)
      v11 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = sub_10002D7AC(v7, v11);
    v9 = (char *)v7[1];
    goto LABEL_17;
  }
  v12 = (_BYTE *)result[1];
  v13 = v12 - v9;
  if (v12 - v9 >= a4)
  {
LABEL_17:
    v16 = a3 - __src;
    if (v16)
      result = memmove(v9, __src, v16);
    v15 = &v9[v16];
    goto LABEL_20;
  }
  v14 = &__src[v13];
  if (v12 != v9)
  {
    result = memmove((void *)*result, __src, v13);
    v9 = (char *)v7[1];
  }
  if (a3 != v14)
    result = memmove(v9, v14, a3 - v14);
  v15 = &v9[a3 - v14];
LABEL_20:
  v7[1] = v15;
  return result;
}

char *sub_10019E684(uint64_t a1, char *__dst, char *__src, char *a4, int64_t a5)
{
  char *v5;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  size_t v15;
  size_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  int64_t v25;
  char v26;
  char *v27;
  char *v28;
  size_t v29;
  char *v30;
  char *v31;
  char *v32;

  v5 = __dst;
  if (a5 < 1)
    return v5;
  v10 = *(char **)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  if (v9 - (uint64_t)v10 < a5)
  {
    v11 = *(char **)a1;
    v12 = (uint64_t)&v10[a5 - *(_QWORD *)a1];
    if (v12 < 0)
      sub_100026E7C();
    v13 = (char *)(__dst - v11);
    v14 = v9 - (_QWORD)v11;
    if (2 * v14 > v12)
      v12 = 2 * v14;
    if (v14 >= 0x3FFFFFFFFFFFFFFFLL)
      v15 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v15 = v12;
    if (v15)
    {
      v16 = v15;
      v17 = (char *)operator new(v15);
    }
    else
    {
      v16 = 0;
      v17 = 0;
    }
    v27 = &v13[(_QWORD)v17];
    memcpy(&v13[(_QWORD)v17], __src, a5);
    v28 = &v13[(_QWORD)v17];
    v29 = v16;
    if (v11 != v5)
    {
      do
      {
        v13[(_QWORD)v17 - 1] = v13[(_QWORD)(v11 - 1)];
        --v13;
      }
      while (v13);
      v10 = *(char **)(a1 + 8);
      v28 = v17;
    }
    v30 = &v27[a5];
    v31 = &v17[v29];
    if (v10 != v5)
      memmove(v30, v5, v10 - v5);
    v32 = *(char **)a1;
    *(_QWORD *)a1 = v28;
    *(_QWORD *)(a1 + 8) = &v30[v10 - v5];
    *(_QWORD *)(a1 + 16) = v31;
    if (v32)
      operator delete(v32);
    return v27;
  }
  v18 = v10 - __dst;
  if (v10 - __dst >= a5)
  {
    v19 = &__src[a5];
    v21 = *(char **)(a1 + 8);
LABEL_17:
    v22 = &v5[a5];
    v23 = &v21[-a5];
    v24 = v21;
    if (&v21[-a5] < v10)
    {
      v25 = &v10[a5] - v21;
      v24 = v21;
      do
      {
        v26 = *v23++;
        *v24++ = v26;
        --v25;
      }
      while (v25);
    }
    *(_QWORD *)(a1 + 8) = v24;
    if (v21 != v22)
      memmove(&v5[a5], v5, v21 - v22);
    if (v19 != __src)
      memmove(v5, __src, v19 - __src);
    return v5;
  }
  v19 = &__src[v18];
  v20 = a4 - &__src[v18];
  if (a4 != &__src[v18])
    memmove(*(void **)(a1 + 8), &__src[v18], a4 - &__src[v18]);
  v21 = &v10[v20];
  *(_QWORD *)(a1 + 8) = &v10[v20];
  if (v18 >= 1)
    goto LABEL_17;
  return v5;
}

void sub_10019E870()
{
  operator delete();
}

_QWORD *sub_10019E884(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10080B160;
  result[1] = v3;
  return result;
}

uint64_t sub_10019E8B8(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10080B160;
  a2[1] = v2;
  return result;
}

void sub_10019E8D4(uint64_t a1, unsigned __int8 *a2)
{
  sub_1001992C8(*(_QWORD *)(a1 + 8), *a2);
}

uint64_t sub_10019E8E0(uint64_t a1, uint64_t a2)
{
  if (sub_10003E27C(a2, (uint64_t)&off_10080B1C0))
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_10019E91C()
{
  return &off_10080B1C0;
}

uint64_t sub_10019E928(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = 1;
  sub_100153C4C(a1 + 8, a2);
  *(_BYTE *)(a1 + 568) = 0;
  *(_BYTE *)(a1 + 784) = 0;
  *(_BYTE *)(a1 + 792) = 0;
  *(_BYTE *)(a1 + 864) = 0;
  *(_BYTE *)(a1 + 872) = 0;
  *(_BYTE *)(a1 + 1000) = 0;
  *(_BYTE *)(a1 + 1008) = 0;
  *(_BYTE *)(a1 + 1088) = 0;
  *(_BYTE *)(a1 + 1096) = 0;
  *(_BYTE *)(a1 + 1200) = 0;
  *(_BYTE *)(a1 + 1208) = 0;
  *(_BYTE *)(a1 + 1320) = 0;
  *(_BYTE *)(a1 + 1328) = 0;
  *(_BYTE *)(a1 + 1592) = 0;
  *(_BYTE *)(a1 + 1600) = 0;
  *(_BYTE *)(a1 + 1672) = 0;
  *(_BYTE *)(a1 + 1680) = 0;
  *(_BYTE *)(a1 + 1728) = 0;
  *(_BYTE *)(a1 + 1736) = 0;
  *(_BYTE *)(a1 + 1800) = 0;
  return a1;
}

void sub_10019E9A4(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 112))
  {
    sub_10000BAB8(a1 + 32);
    if (*(char *)(a1 + 23) < 0)
      operator delete(*(void **)a1);
    *(_BYTE *)(a1 + 112) = 0;
  }
}

_QWORD *sub_10019E9E4(_QWORD *__dst, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    sub_100004678(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    __dst[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  *((_DWORD *)__dst + 6) = *((_DWORD *)a2 + 6);
  sub_10000BDF4((_BYTE *)__dst + 32, (uint64_t)(a2 + 2));
  __dst[13] = *((_QWORD *)a2 + 13);
  return __dst;
}

void sub_10019EA4C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void sub_10019EA68()
{
  void **v0;

  operator delete(*v0);
}

void sub_10019EA70(uint64_t a1@<X1>, uint64_t a2@<X8>, float a3@<S0>)
{
  *(float *)a1 = a3;
  *(_QWORD *)(a1 + 4) = a2;
}

void sub_10019EAD0(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = a1;
}

void sub_10019EAF8()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_100850448);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_100850448))
    {
      sub_10000BF04(qword_100850430, "PRRoseProviderNetworkListener");
      __cxa_atexit((void (*)(void *))&std::string::~string, qword_100850430, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_100850448);
    }
  }
}

void sub_10019EB74(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_100850448);
  _Unwind_Resume(a1);
}

void sub_10019EB8C(int a1, int a2, int a3, double a4)
{
  CFNumberRef v5;
  CFNumberRef v6;
  CFTypeRef v7;
  const CFBooleanRef *v8;
  CFBooleanRef v9;
  CFNumberRef v10;
  CFDictionaryRef v11;
  NSObject *v12;
  int v13;
  int valuePtr;
  double v15;
  uint8_t buf[4];
  const __CFString *v17;
  __int16 v18;
  CFDictionaryRef v19;
  void *values[4];
  void *keys[2];
  __int128 v22;

  v15 = a4;
  v13 = a2;
  valuePtr = a1;
  *(_OWORD *)keys = *(_OWORD *)off_10080B420;
  v22 = *(_OWORD *)off_10080B430;
  v5 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &v13);
  values[0] = (void *)CFAutorelease(v5);
  v6 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &valuePtr);
  v7 = CFAutorelease(v6);
  v8 = &kCFBooleanTrue;
  if (!a3)
    v8 = &kCFBooleanFalse;
  v9 = *v8;
  values[1] = (void *)v7;
  values[2] = v9;
  v10 = CFNumberCreate(kCFAllocatorDefault, kCFNumberLongType, &v15);
  values[3] = (void *)CFAutorelease(v10);
  v11 = CFDictionaryCreate(kCFAllocatorDefault, (const void **)keys, (const void **)values, 4, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  v12 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412546;
    v17 = CFSTR("ClientState");
    v18 = 2112;
    v19 = v11;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "sending ranging event %@ to powerlog with dict: %@", buf, 0x16u);
  }
  PLLogRegisteredEvent(88, CFSTR("ClientState"), v11, 0);
  CFRelease(v11);
}

void sub_10019ED10(int a1)
{
  CFNumberRef v1;
  CFDictionaryRef v2;
  int valuePtr;
  void *values;
  void *keys;

  valuePtr = a1;
  keys = CFSTR("State");
  v1 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &valuePtr);
  values = (void *)CFAutorelease(v1);
  v2 = CFDictionaryCreate(kCFAllocatorDefault, (const void **)&keys, (const void **)&values, 1, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  PLLogRegisteredEvent(88, CFSTR("RadioState"), v2, 0);
  CFRelease(v2);
}

void sub_10019EDD8(unsigned int *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  CFNumberRef v7;
  CFNumberRef v8;
  CFNumberRef v9;
  CFNumberRef v10;
  CFNumberRef v11;
  CFNumberRef v12;
  CFNumberRef v13;
  CFNumberRef v14;
  CFNumberRef v15;
  CFNumberRef v16;
  CFNumberRef v17;
  CFNumberRef v18;
  CFDictionaryRef v19;
  NSObject *v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t valuePtr;
  uint8_t buf[4];
  _BYTE v38[10];
  __int16 v39;
  unsigned int v40;
  __int16 v41;
  unsigned int v42;
  void *values[12];
  void *keys[2];
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;

  v46 = *(_OWORD *)off_10080B460;
  v47 = *(_OWORD *)off_10080B470;
  v48 = *(_OWORD *)off_10080B480;
  v49 = *(_OWORD *)off_10080B490;
  v2 = *a1;
  v3 = a1[1];
  v35 = a1[14];
  valuePtr = v2;
  v4 = a1[3];
  v33 = a1[2];
  v34 = v3;
  v5 = a1[5];
  v31 = a1[4];
  v32 = v4;
  v6 = a1[7];
  v29 = a1[6];
  v30 = v5;
  *(_OWORD *)keys = *(_OWORD *)off_10080B440;
  v45 = *(_OWORD *)off_10080B450;
  v27 = a1[8];
  v28 = v6;
  v26 = *((unsigned __int16 *)a1 + 18);
  v25 = *((unsigned __int16 *)a1 + 19);
  v7 = CFNumberCreate(kCFAllocatorDefault, kCFNumberLongLongType, &valuePtr);
  values[0] = (void *)CFAutorelease(v7);
  v8 = CFNumberCreate(kCFAllocatorDefault, kCFNumberLongLongType, &v35);
  values[1] = (void *)CFAutorelease(v8);
  v9 = CFNumberCreate(kCFAllocatorDefault, kCFNumberLongLongType, &v34);
  values[2] = (void *)CFAutorelease(v9);
  v10 = CFNumberCreate(kCFAllocatorDefault, kCFNumberLongLongType, &v33);
  values[3] = (void *)CFAutorelease(v10);
  v11 = CFNumberCreate(kCFAllocatorDefault, kCFNumberLongLongType, &v32);
  values[4] = (void *)CFAutorelease(v11);
  v12 = CFNumberCreate(kCFAllocatorDefault, kCFNumberLongLongType, &v31);
  values[5] = (void *)CFAutorelease(v12);
  v13 = CFNumberCreate(kCFAllocatorDefault, kCFNumberLongLongType, &v30);
  values[6] = (void *)CFAutorelease(v13);
  v14 = CFNumberCreate(kCFAllocatorDefault, kCFNumberLongLongType, &v29);
  values[7] = (void *)CFAutorelease(v14);
  v15 = CFNumberCreate(kCFAllocatorDefault, kCFNumberLongLongType, &v28);
  values[8] = (void *)CFAutorelease(v15);
  v16 = CFNumberCreate(kCFAllocatorDefault, kCFNumberLongLongType, &v27);
  values[9] = (void *)CFAutorelease(v16);
  v17 = CFNumberCreate(kCFAllocatorDefault, kCFNumberLongType, &v26);
  values[10] = (void *)CFAutorelease(v17);
  v18 = CFNumberCreate(kCFAllocatorDefault, kCFNumberLongType, &v25);
  values[11] = (void *)CFAutorelease(v18);
  v19 = CFDictionaryCreate(kCFAllocatorDefault, (const void **)keys, (const void **)values, 12, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  v20 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    *(_QWORD *)v38 = v19;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "sending power stats to powerlog %@", buf, 0xCu);
    v20 = qword_10085F520;
  }
  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
  {
    v21 = a1[10];
    v22 = a1[11];
    v24 = a1[12];
    v23 = a1[13];
    *(_DWORD *)buf = 67109888;
    *(_DWORD *)v38 = v21;
    *(_WORD *)&v38[4] = 1024;
    *(_DWORD *)&v38[6] = v23;
    v39 = 1024;
    v40 = v22;
    v41 = 1024;
    v42 = v24;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "additional power stats - SLP count:%u, DSLP count:%u, wake count:%u, PMGR SLP count:%u", buf, 0x1Au);
  }
  PLLogRegisteredEvent(88, CFSTR("PowerStatistics"), v19, 0);
  CFRelease(v19);
}

void sub_10019F0C0(int a1)
{
  void **v1;
  CFDictionaryRef v2;
  NSObject *v3;
  int v4;
  CFDictionaryRef v5;
  void *values;
  void *keys;

  keys = CFSTR("state");
  v1 = (void **)&kCFBooleanTrue;
  if (!a1)
    v1 = (void **)&kCFBooleanFalse;
  values = *v1;
  v2 = CFDictionaryCreate(kCFAllocatorDefault, (const void **)&keys, (const void **)&values, 1, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  v3 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    v4 = 138412290;
    v5 = v2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "sending heartbeat status to powerlog %@", (uint8_t *)&v4, 0xCu);
  }
  PLLogRegisteredEvent(88, CFSTR("HeartBeatStatus"), v2, 0);
  CFRelease(v2);
}

id sub_10019F2E8(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "addObjectsFromArray:");
}

uint64_t sub_10019F780(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  *(_QWORD *)a1 = off_10080B4D8;
  *(_QWORD *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 20) = xmmword_10046EF80;
  *(_BYTE *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 72) = 0;
  *(_WORD *)(a1 + 79) = 0;
  *(_BYTE *)(a1 + 84) = 0;
  *(_BYTE *)(a1 + 140) = 0;
  *(_BYTE *)(a1 + 144) = 0;
  *(_BYTE *)(a1 + 148) = 0;
  *(_BYTE *)(a1 + 152) = 0;
  *(_BYTE *)(a1 + 156) = 0;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_BYTE *)(a1 + 136) = 0;
  *(_OWORD *)(a1 + 160) = xmmword_10046EF90;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_DWORD *)(a1 + 183) = 0;
  return a1;
}

void sub_10019F81C(uint64_t a1, char a2)
{
  double v4;
  NSObject *v5;
  void **v6;
  char *v7;
  int v8;
  void **v9;
  char *v10;
  void **v11;
  void **v12;
  void *__p[2];
  char v14;
  void *v15[2];
  char v16;
  void *v17[2];
  char v18;
  uint8_t buf[4];
  double v20;
  __int16 v21;
  void **v22;
  __int16 v23;
  void **v24;
  __int16 v25;
  void **v26;

  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 8));
  v4 = sub_10000883C();
  v5 = (id)qword_10085F520;
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v6 = v17;
    sub_10000BF04(v17, off_10080B580[a2]);
    if (v18 < 0)
      v6 = (void **)v17[0];
    if (*(_DWORD *)(a1 + 32))
      v7 = "WaitingForRequest";
    else
      v7 = "RequestReceived";
    sub_10000BF04(v15, v7);
    v8 = v16;
    v9 = (void **)v15[0];
    if (*(_DWORD *)(a1 + 164))
      v10 = "NotRunning";
    else
      v10 = "Running";
    sub_10000BF04(__p, v10);
    v11 = v15;
    if (v8 < 0)
      v11 = v9;
    if (v14 >= 0)
      v12 = __p;
    else
      v12 = (void **)__p[0];
    *(_DWORD *)buf = 134218754;
    v20 = v4;
    v21 = 2080;
    v22 = v6;
    v23 = 2080;
    v24 = v11;
    v25 = 2080;
    v26 = v12;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#alisha-ca,[%.06f] sessionRequested method:%s requestState:%s sessionState:%s", buf, 0x2Au);
    if (v14 < 0)
      operator delete(__p[0]);
    if (v16 < 0)
      operator delete(v15[0]);
    if (v18 < 0)
      operator delete(v17[0]);
  }

  if (*(_DWORD *)(a1 + 32) == 1)
  {
    *(double *)(a1 + 88) = v4;
    *(_BYTE *)(a1 + 16) = a2;
    *(_DWORD *)(a1 + 32) = 0;
  }
  else
  {
    ++*(_DWORD *)(a1 + 28);
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
      sub_1003D5C48();
  }
}

void sub_10019FA24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  void *v24;

  if (a18 < 0)
    operator delete(__p);
  if (a24 < 0)
    operator delete(a19);

  _Unwind_Resume(a1);
}

void sub_10019FA6C(uint64_t a1, int a2, int a3, int a4)
{
  double v8;
  NSObject *v9;
  char *v10;
  int v11;
  _BYTE *v12;
  char *v13;
  _BYTE *v14;
  void **v15;
  int v16;
  NSObject *v17;
  _BYTE *v18;
  void *__p[2];
  char v20;
  _BYTE v21[12];
  char v22;
  _BYTE buf[12];
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;
  __int16 v28;
  int v29;
  __int16 v30;
  _BYTE *v31;
  __int16 v32;
  void **v33;

  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 8));
  v8 = sub_10000883C();
  v9 = (id)qword_10085F520;
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    if (*(_DWORD *)(a1 + 32))
      v10 = "WaitingForRequest";
    else
      v10 = "RequestReceived";
    sub_10000BF04(v21, v10);
    v11 = v22;
    v12 = *(_BYTE **)v21;
    if (*(_DWORD *)(a1 + 164))
      v13 = "NotRunning";
    else
      v13 = "Running";
    sub_10000BF04(__p, v13);
    v14 = v21;
    if (v11 < 0)
      v14 = v12;
    if (v20 >= 0)
      v15 = __p;
    else
      v15 = (void **)__p[0];
    *(_DWORD *)buf = 134219266;
    *(double *)&buf[4] = v8;
    v24 = 1024;
    v25 = a2;
    v26 = 1024;
    v27 = a3;
    v28 = 1024;
    v29 = a4;
    v30 = 2080;
    v31 = v14;
    v32 = 2080;
    v33 = v15;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#alisha-ca,[%.06f] sessionStarted anchors:%d channel:%d rangingMultiplier:%d requestState:%s sessionState:%s", buf, 0x32u);
    if (v20 < 0)
      operator delete(__p[0]);
    if (v22 < 0)
      operator delete(*(void **)v21);
  }

  if (*(_DWORD *)(a1 + 164) == 1)
  {
    *(double *)(a1 + 96) = v8;
    *(_DWORD *)(a1 + 116) = a3;
    *(_DWORD *)(a1 + 120) = a2;
    *(_DWORD *)(a1 + 112) = a4;
    *(_DWORD *)(a1 + 164) = 0;
    if (v8 <= *(double *)(a1 + 176) + 5.0)
      v16 = *(_DWORD *)(a1 + 172);
    else
      v16 = 2;
    *(_DWORD *)(a1 + 168) = v16;
    v17 = (id)qword_10085F520;
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      sub_10000BF04(buf, off_10080B598[*(int *)(a1 + 168)]);
      if (v27 >= 0)
        v18 = buf;
      else
        v18 = *(_BYTE **)buf;
      *(_DWORD *)v21 = 136315138;
      *(_QWORD *)&v21[4] = v18;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "#alisha-ca,Reason for this session: %s", v21, 0xCu);
      if (SHIBYTE(v27) < 0)
        operator delete(*(void **)buf);
    }

    if (!*(_DWORD *)(a1 + 32))
    {
      sub_10019FD68(a1, 0);
      sub_1001A02C0(a1);
      *(_DWORD *)(a1 + 32) = 1;
    }
  }
  else
  {
    ++*(_DWORD *)(a1 + 160);
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
      sub_1003D5C74();
  }
}

void sub_10019FD34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  void *v18;

  _Unwind_Resume(a1);
}

void sub_10019FD68(uint64_t a1, int a2)
{
  NSObject *v4;
  char *v5;
  int v6;
  _BYTE *v7;
  char *v8;
  _BYTE *v9;
  void **v10;
  id v11;
  void *v12;
  int v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  id v19;
  NSObject *v20;
  id v21;
  id v22;
  id v23;
  _QWORD v24[4];
  id v25;
  void *__p[2];
  char v27;
  _BYTE v28[12];
  char v29;
  uint8_t buf[4];
  _BYTE *v31;
  __int16 v32;
  void **v33;

  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 8));
  v4 = (id)qword_10085F520;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    if (*(_DWORD *)(a1 + 32))
      v5 = "WaitingForRequest";
    else
      v5 = "RequestReceived";
    sub_10000BF04(v28, v5);
    v6 = v29;
    v7 = *(_BYTE **)v28;
    if (*(_DWORD *)(a1 + 164))
      v8 = "NotRunning";
    else
      v8 = "Running";
    sub_10000BF04(__p, v8);
    v9 = v28;
    if (v6 < 0)
      v9 = v7;
    if (v27 >= 0)
      v10 = __p;
    else
      v10 = (void **)__p[0];
    *(_DWORD *)buf = 136315394;
    v31 = v9;
    v32 = 2080;
    v33 = v10;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#alisha-ca,Sending core analytics for Alisha request; requestState:%s sessionState:%s",
      buf,
      0x16u);
    if (v27 < 0)
      operator delete(__p[0]);
    if (v29 < 0)
      operator delete(*(void **)v28);
  }

  v11 = objc_alloc_init((Class)NSMutableDictionary);
  v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 1));
  objc_msgSend(v11, "setValue:forKey:", v12, CFSTR("numSessionsRequested"));

  v13 = *(unsigned __int8 *)(a1 + 16);
  if (*(_BYTE *)(a1 + 16))
  {
    if (v13 == 1)
    {
      v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 1));
      objc_msgSend(v11, "setValue:forKey:", v14, CFSTR("numRecoveryRQSessions"));
    }
    else
    {
      if (v13 != 2)
        goto LABEL_24;
      v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 1));
      objc_msgSend(v11, "setValue:forKey:", v14, CFSTR("numConfigRecoveryRQSessions"));
    }
  }
  else
  {
    v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 1));
    objc_msgSend(v11, "setValue:forKey:", v14, CFSTR("numSessionRQSessions"));
  }

LABEL_24:
  switch(a2)
  {
    case 3:
      v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 1));
      objc_msgSend(v11, "setValue:forKey:", v15, CFSTR("numDCKUnrecoverableErrors"));
      goto LABEL_30;
    case 2:
      v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 1));
      objc_msgSend(v11, "setValue:forKey:", v15, CFSTR("numDCKRecoverableErrors"));
      goto LABEL_30;
    case 1:
      v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 1));
      objc_msgSend(v11, "setValue:forKey:", v15, CFSTR("numTimesRangingDisallowed"));
LABEL_30:

      break;
  }
  if (*(_BYTE *)(a1 + 48) && *(_BYTE *)(a1 + 64) && *(double *)(a1 + 56) - *(double *)(a1 + 40) > 0.0)
  {
    v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:"));
    objc_msgSend(v11, "setValue:forKey:", v16, CFSTR("getKeyDuration"));

  }
  if (*(_BYTE *)(a1 + 79) && *(_BYTE *)(a1 + 76))
  {
    v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned __int8 *)(a1 + 75)));
    objc_msgSend(v11, "setValue:forKey:", v17, CFSTR("recoverableErrorStatusCode"));

  }
  if (*(_BYTE *)(a1 + 84))
  {
    v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 80)));
    objc_msgSend(v11, "setValue:forKey:", v18, CFSTR("unrecoverableErrorStatusCode"));

  }
  v19 = objc_msgSend(v11, "mutableCopy");
  v20 = (id)qword_10085F520;
  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
  {
    v21 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "description")));
    v22 = objc_msgSend(v21, "UTF8String");
    *(_DWORD *)v28 = 136315138;
    *(_QWORD *)&v28[4] = v22;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "#alisha-ca,alisha request data to be uploaded:\n%s\n", v28, 0xCu);

  }
  v24[0] = _NSConcreteStackBlock;
  v24[1] = 3221225472;
  v24[2] = sub_1001A2D10;
  v24[3] = &unk_1007FA568;
  v23 = v19;
  v25 = v23;
  AnalyticsSendEventLazy(CFSTR("com.apple.alisha.request"), v24);
  sub_1001A02C0(a1);

}

void sub_1001A01DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  void *v23;

  _Unwind_Resume(a1);
}

uint64_t sub_1001A02C0(uint64_t result)
{
  *(_QWORD *)(result + 24) = 0;
  *(_DWORD *)(result + 20) = 0;
  if (*(_BYTE *)(result + 48))
    *(_BYTE *)(result + 48) = 0;
  if (*(_BYTE *)(result + 64))
    *(_BYTE *)(result + 64) = 0;
  if (*(_BYTE *)(result + 79))
    *(_BYTE *)(result + 79) = 0;
  if (*(_BYTE *)(result + 84))
    *(_BYTE *)(result + 84) = 0;
  return result;
}

void sub_1001A02FC(uint64_t a1, unsigned int a2)
{
  double v4;
  NSObject *v5;
  std::string *v6;
  char *v7;
  int v8;
  void **v9;
  char *v10;
  void **v11;
  void **v12;
  void *__p[2];
  char v14;
  void *v15[2];
  char v16;
  std::string v17;
  uint8_t buf[4];
  double v19;
  __int16 v20;
  std::string *v21;
  __int16 v22;
  void **v23;
  __int16 v24;
  void **v25;

  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 8));
  v4 = sub_10000883C();
  v5 = (id)qword_10085F520;
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    memset(&v17, 0, sizeof(v17));
    if (a2 >= 4)
    {
      v6 = &v17;
    }
    else
    {
      v6 = &v17;
      std::string::assign(&v17, off_10080B5B0[a2]);
      if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v6 = (std::string *)v17.__r_.__value_.__r.__words[0];
    }
    if (*(_DWORD *)(a1 + 32))
      v7 = "WaitingForRequest";
    else
      v7 = "RequestReceived";
    sub_10000BF04(v15, v7);
    v8 = v16;
    v9 = (void **)v15[0];
    if (*(_DWORD *)(a1 + 164))
      v10 = "NotRunning";
    else
      v10 = "Running";
    sub_10000BF04(__p, v10);
    v11 = v15;
    if (v8 < 0)
      v11 = v9;
    if (v14 >= 0)
      v12 = __p;
    else
      v12 = (void **)__p[0];
    *(_DWORD *)buf = 134218754;
    v19 = v4;
    v20 = 2080;
    v21 = v6;
    v22 = 2080;
    v23 = v11;
    v24 = 2080;
    v25 = v12;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#alisha-ca,[%.06f] sessionEnded reason:%s requestState:%s sessionState:%s", buf, 0x2Au);
    if (v14 < 0)
      operator delete(__p[0]);
    if (v16 < 0)
      operator delete(v15[0]);
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v17.__r_.__value_.__l.__data_);
  }

  if (*(_DWORD *)(a1 + 164) == 1)
  {
    ++*(_DWORD *)(a1 + 160);
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
      sub_1003D5CA0();
  }
  else
  {
    *(double *)(a1 + 104) = v4;
    sub_1001A0570(a1, a2);
    sub_1001A0E78(a1);
    *(_DWORD *)(a1 + 164) = 1;
  }
}

void sub_1001A052C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  void *v24;

  if (a24 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1001A0570(uint64_t a1, int a2)
{
  NSObject *v4;
  char *v5;
  int v6;
  _BYTE *v7;
  char *v8;
  _BYTE *v9;
  void **v10;
  id v11;
  void *v12;
  double v13;
  void *v14;
  void *v15;
  int v16;
  int v17;
  int v18;
  int v19;
  float v20;
  void *v21;
  double v22;
  void *v23;
  double v24;
  void *v25;
  double v26;
  double v27;
  double v28;
  float v29;
  void *v30;
  double v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  id v41;
  NSObject *v42;
  id v43;
  id v44;
  id v45;
  id v46;
  void *v47;
  void *v48;
  id v49;
  NSObject *v50;
  id v51;
  id v52;
  id v53;
  _QWORD v54[4];
  id v55;
  _QWORD v56[4];
  id v57;
  void *__p[2];
  char v59;
  _BYTE v60[12];
  char v61;
  uint8_t buf[4];
  _BYTE *v63;
  __int16 v64;
  void **v65;

  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 8));
  v4 = (id)qword_10085F520;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    if (*(_DWORD *)(a1 + 32))
      v5 = "WaitingForRequest";
    else
      v5 = "RequestReceived";
    sub_10000BF04(v60, v5);
    v6 = v61;
    v7 = *(_BYTE **)v60;
    if (*(_DWORD *)(a1 + 164))
      v8 = "NotRunning";
    else
      v8 = "Running";
    sub_10000BF04(__p, v8);
    v9 = v60;
    if (v6 < 0)
      v9 = v7;
    if (v59 >= 0)
      v10 = __p;
    else
      v10 = (void **)__p[0];
    *(_DWORD *)buf = 136315394;
    v63 = v9;
    v64 = 2080;
    v65 = v10;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#alisha-ca,Sending core analytics for Alisha session; requestState:%s sessionState:%s",
      buf,
      0x16u);
    if (v59 < 0)
      operator delete(__p[0]);
    if (v61 < 0)
      operator delete(*(void **)v60);
  }

  v11 = objc_alloc_init((Class)NSMutableDictionary);
  v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 1));
  objc_msgSend(v11, "setValue:forKey:", v12, CFSTR("numSessions"));

  if (a2)
  {
    if (a2 == 1)
    {
      v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 1));
      objc_msgSend(v11, "setValue:forKey:", v14, CFSTR("numSessionsTimeoutB"));
    }
    else
    {
      if (a2 != 2)
        goto LABEL_24;
      v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 1));
      objc_msgSend(v11, "setValue:forKey:", v14, CFSTR("numSessionsSuspendRQ"));
    }
  }
  else
  {
    v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 1));
    objc_msgSend(v11, "setValue:forKey:", v14, CFSTR("numSessionsTimeoutA"));
  }

LABEL_24:
  if (*(_BYTE *)(a1 + 156))
  {
    LODWORD(v13) = *(_DWORD *)(a1 + 152);
    v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v13));
    objc_msgSend(v11, "setValue:forKey:", v15, CFSTR("cyclesToFirstSuccessfulRange"));

  }
  v16 = *(_DWORD *)(a1 + 124);
  v17 = *(_DWORD *)(a1 + 128);
  v18 = *(_DWORD *)(a1 + 132);
  v19 = v17 + v16 + v18;
  if (v19 >= 1)
  {
    v20 = (float)v19;
    *(float *)&v13 = (float)v16 / (float)v19;
    v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v13));
    objc_msgSend(v11, "setValue:forKey:", v21, CFSTR("ratioCyclesNoAnchors"));

    *(float *)&v22 = (float)v17 / v20;
    v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v22));
    objc_msgSend(v11, "setValue:forKey:", v23, CFSTR("ratioCyclesSingleAnchor"));

    *(float *)&v24 = (float)v18 / v20;
    v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v24));
    objc_msgSend(v11, "setValue:forKey:", v25, CFSTR("ratioCyclesMultipleAnchors"));

  }
  v26 = *(double *)(a1 + 96);
  if (v26 > 0.0)
  {
    v27 = *(double *)(a1 + 104);
    if (v27 > 0.0 && v27 >= v26)
    {
      v28 = v27 - v26;
      v29 = v28;
      *(float *)&v28 = v29;
      v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v28));
      objc_msgSend(v11, "setValue:forKey:", v30, CFSTR("sessionDuration"));

      *(float *)&v31 = (float)(v29 * 14.0) / 3600.0;
      v32 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v31));
      objc_msgSend(v11, "setValue:forKey:", v32, CFSTR("energyExpenditure"));

    }
  }
  if (*(_BYTE *)(a1 + 140))
  {
    LODWORD(v26) = *(_DWORD *)(a1 + 136);
    v33 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v26));
    objc_msgSend(v11, "setValue:forKey:", v33, CFSTR("firstSOIRSSI"));

  }
  if (*(_BYTE *)(a1 + 148))
  {
    LODWORD(v26) = *(_DWORD *)(a1 + 144);
    v34 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v26));
    objc_msgSend(v11, "setValue:forKey:", v34, CFSTR("maxSOIRSSI"));

  }
  v35 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 168)));
  objc_msgSend(v11, "setValue:forKey:", v35, CFSTR("reasonForThisSession"));

  if (*(_BYTE *)(a1 + 184))
  {
    v36 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 1));
    objc_msgSend(v11, "setValue:forKey:", v36, CFSTR("numSessionsWithUnlockEvent"));

    if (*(double *)(a1 + 192) - *(double *)(a1 + 88) > 0.0)
    {
      v37 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:"));
      objc_msgSend(v11, "setValue:forKey:", v37, CFSTR("timeToUnlock"));

    }
  }
  if (*(_BYTE *)(a1 + 185))
  {
    v38 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 1));
    objc_msgSend(v11, "setValue:forKey:", v38, CFSTR("numSessionsWithLockEvent"));

  }
  if (*(_BYTE *)(a1 + 186))
  {
    v39 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 1));
    objc_msgSend(v11, "setValue:forKey:", v39, CFSTR("numSessionsWithReadyToDriveEvent"));

  }
  if (!*(_BYTE *)(a1 + 184) && !*(_BYTE *)(a1 + 185) && !*(_BYTE *)(a1 + 186))
  {
    v40 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 1));
    objc_msgSend(v11, "setValue:forKey:", v40, CFSTR("numSessionsWithNoEvent"));

  }
  v41 = objc_msgSend(v11, "mutableCopy");
  v42 = (id)qword_10085F520;
  if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
  {
    v43 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v41, "description")));
    v44 = objc_msgSend(v43, "UTF8String");
    *(_DWORD *)v60 = 136315138;
    *(_QWORD *)&v60[4] = v44;
    _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEFAULT, "#alisha-ca,alisha session data to be uploaded:\n%s\n", v60, 0xCu);

  }
  v56[0] = _NSConcreteStackBlock;
  v56[1] = 3221225472;
  v56[2] = sub_1001A2D00;
  v56[3] = &unk_1007FA568;
  v45 = v41;
  v57 = v45;
  AnalyticsSendEventLazy(CFSTR("com.apple.alisha.session"), v56);
  v46 = objc_alloc_init((Class)NSMutableDictionary);
  v47 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 112)));
  objc_msgSend(v46, "setValue:forKey:", v47, CFSTR("ranMultiplier"));

  v48 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 116)));
  objc_msgSend(v46, "setValue:forKey:", v48, CFSTR("selectedUwbChannel"));

  v49 = objc_msgSend(v46, "mutableCopy");
  v50 = (id)qword_10085F520;
  if (os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT))
  {
    v51 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v49, "description")));
    v52 = objc_msgSend(v51, "UTF8String");
    *(_DWORD *)v60 = 136315138;
    *(_QWORD *)&v60[4] = v52;
    _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_DEFAULT, "#alisha-ca,alisha parameter data to be uploaded:\n%s\n", v60, 0xCu);

  }
  v54[0] = _NSConcreteStackBlock;
  v54[1] = 3221225472;
  v54[2] = sub_1001A2D08;
  v54[3] = &unk_1007FA568;
  v53 = v49;
  v55 = v53;
  AnalyticsSendEventLazy(CFSTR("com.apple.alisha.parameters"), v54);

}

void sub_1001A0CD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  void *v28;
  void *v29;

  _Unwind_Resume(a1);
}

uint64_t sub_1001A0E78(uint64_t result)
{
  *(_QWORD *)(result + 112) = 0xFF00000000;
  *(_DWORD *)(result + 160) = 0;
  *(_QWORD *)(result + 96) = 0;
  *(_QWORD *)(result + 104) = 0;
  *(_QWORD *)(result + 88) = 0;
  *(_QWORD *)(result + 120) = 0;
  *(_QWORD *)(result + 128) = 0;
  if (*(_BYTE *)(result + 140))
    *(_BYTE *)(result + 140) = 0;
  if (*(_BYTE *)(result + 148))
    *(_BYTE *)(result + 148) = 0;
  if (*(_BYTE *)(result + 156))
    *(_BYTE *)(result + 156) = 0;
  *(_DWORD *)(result + 168) = 2;
  *(_WORD *)(result + 184) = 0;
  *(_BYTE *)(result + 186) = 0;
  *(_QWORD *)(result + 192) = 0;
  return result;
}

uint64_t sub_1001A0ECC(uint64_t a1)
{
  NSObject *v2;
  char *v3;
  int v4;
  void **v5;
  char *v6;
  void **v7;
  void **v8;
  uint64_t result;
  void *__p[2];
  char v11;
  void *v12[2];
  char v13;
  uint8_t buf[4];
  void **v15;
  __int16 v16;
  void **v17;

  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 8));
  v2 = (id)qword_10085F520;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    if (*(_DWORD *)(a1 + 32))
      v3 = "WaitingForRequest";
    else
      v3 = "RequestReceived";
    sub_10000BF04(v12, v3);
    v4 = v13;
    v5 = (void **)v12[0];
    if (*(_DWORD *)(a1 + 164))
      v6 = "NotRunning";
    else
      v6 = "Running";
    sub_10000BF04(__p, v6);
    v7 = v12;
    if (v4 < 0)
      v7 = v5;
    if (v11 >= 0)
      v8 = __p;
    else
      v8 = (void **)__p[0];
    *(_DWORD *)buf = 136315394;
    v15 = v7;
    v16 = 2080;
    v17 = v8;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#alisha-ca,rangingWasDisallowed requestState:%s sessionState:%s", buf, 0x16u);
    if (v11 < 0)
      operator delete(__p[0]);
    if (v13 < 0)
      operator delete(v12[0]);
  }

  if (*(_DWORD *)(a1 + 32) == 1)
  {
    ++*(_DWORD *)(a1 + 28);
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
      sub_1003D5CCC();
  }
  else
  {
    sub_10019FD68(a1, 1);
  }
  result = sub_1001A02C0(a1);
  *(_DWORD *)(a1 + 32) = 1;
  return result;
}

void sub_1001A107C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;

  if (a17 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

uint64_t sub_1001A10AC(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  std::string *v5;
  char *v6;
  int v7;
  void **v8;
  char *v9;
  void **v10;
  void **v11;
  int v12;
  int v13;
  uint64_t result;
  void *__p[2];
  char v16;
  void *v17[2];
  char v18;
  std::string v19;
  uint8_t buf[4];
  std::string *v21;
  __int16 v22;
  void **v23;
  __int16 v24;
  void **v25;

  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 8));
  v4 = (id)qword_10085F520;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5 = &v19;
    sub_1002FB05C((unsigned __int8 *)a2, &v19);
    if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v5 = (std::string *)v19.__r_.__value_.__r.__words[0];
    if (*(_DWORD *)(a1 + 32))
      v6 = "WaitingForRequest";
    else
      v6 = "RequestReceived";
    sub_10000BF04(v17, v6);
    v7 = v18;
    v8 = (void **)v17[0];
    if (*(_DWORD *)(a1 + 164))
      v9 = "NotRunning";
    else
      v9 = "Running";
    sub_10000BF04(__p, v9);
    v10 = v17;
    if (v7 < 0)
      v10 = v8;
    if (v16 >= 0)
      v11 = __p;
    else
      v11 = (void **)__p[0];
    *(_DWORD *)buf = 136315650;
    v21 = v5;
    v22 = 2080;
    v23 = v10;
    v24 = 2080;
    v25 = v11;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#alisha-ca,dckErrorSendEventNotification notification:%s requestState:%s sessionState:%s", buf, 0x20u);
    if (v16 < 0)
      operator delete(__p[0]);
    if (v18 < 0)
      operator delete(v17[0]);
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v19.__r_.__value_.__l.__data_);
  }

  if (*(_DWORD *)(a1 + 32) == 1)
  {
    ++*(_DWORD *)(a1 + 28);
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
      sub_1003D5CF8();
  }
  else
  {
    v12 = *(unsigned __int8 *)(a1 + 79);
    v13 = *(_DWORD *)(a2 + 3);
    *(_DWORD *)(a1 + 72) = *(_DWORD *)a2;
    *(_DWORD *)(a1 + 75) = v13;
    if (!v12)
      *(_BYTE *)(a1 + 79) = 1;
    sub_10019FD68(a1, 2);
  }
  result = sub_1001A02C0(a1);
  *(_DWORD *)(a1 + 32) = 1;
  return result;
}

void sub_1001A12C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  void *v24;

  if (a18 < 0)
    operator delete(__p);
  if (a24 < 0)
    operator delete(a19);

  _Unwind_Resume(a1);
}

uint64_t sub_1001A1308(uint64_t a1, int a2)
{
  NSObject *v4;
  void **v5;
  char *v6;
  int v7;
  void **v8;
  char *v9;
  void **v10;
  void **v11;
  uint64_t result;
  void *__p[2];
  char v14;
  void *v15[2];
  char v16;
  void *v17[2];
  char v18;
  uint8_t buf[4];
  void **v20;
  __int16 v21;
  void **v22;
  __int16 v23;
  void **v24;

  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 8));
  v4 = (id)qword_10085F520;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5 = v17;
    sub_100301BCC(a2, v17);
    if (v18 < 0)
      v5 = (void **)v17[0];
    if (*(_DWORD *)(a1 + 32))
      v6 = "WaitingForRequest";
    else
      v6 = "RequestReceived";
    sub_10000BF04(v15, v6);
    v7 = v16;
    v8 = (void **)v15[0];
    if (*(_DWORD *)(a1 + 164))
      v9 = "NotRunning";
    else
      v9 = "Running";
    sub_10000BF04(__p, v9);
    v10 = v15;
    if (v7 < 0)
      v10 = v8;
    if (v14 >= 0)
      v11 = __p;
    else
      v11 = (void **)__p[0];
    *(_DWORD *)buf = 136315650;
    v20 = v5;
    v21 = 2080;
    v22 = v10;
    v23 = 2080;
    v24 = v11;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#alisha-ca,dckErrorReturnErrorCode errorCode:%s requestState:%s sessionState:%s", buf, 0x20u);
    if (v14 < 0)
      operator delete(__p[0]);
    if (v16 < 0)
      operator delete(v15[0]);
    if (v18 < 0)
      operator delete(v17[0]);
  }

  if (*(_DWORD *)(a1 + 32) == 1)
  {
    ++*(_DWORD *)(a1 + 28);
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
      sub_1003D5D24();
  }
  else
  {
    *(_DWORD *)(a1 + 80) = a2;
    *(_BYTE *)(a1 + 84) = 1;
    sub_10019FD68(a1, 3);
  }
  result = sub_1001A02C0(a1);
  *(_DWORD *)(a1 + 32) = 1;
  return result;
}

void sub_1001A1508(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  void *v24;

  if (a18 < 0)
    operator delete(__p);
  if (a24 < 0)
    operator delete(a19);

  _Unwind_Resume(a1);
}

void sub_1001A1550(uint64_t a1)
{
  double v2;
  NSObject *v3;
  char *v4;
  int v5;
  void **v6;
  char *v7;
  void **v8;
  void **v9;
  void *__p[2];
  char v11;
  void *v12[2];
  char v13;
  uint8_t buf[4];
  double v15;
  __int16 v16;
  void **v17;
  __int16 v18;
  void **v19;

  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 8));
  v2 = sub_10000883C();
  v3 = (id)qword_10085F520;
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    if (*(_DWORD *)(a1 + 32))
      v4 = "WaitingForRequest";
    else
      v4 = "RequestReceived";
    sub_10000BF04(v12, v4);
    v5 = v13;
    v6 = (void **)v12[0];
    if (*(_DWORD *)(a1 + 164))
      v7 = "NotRunning";
    else
      v7 = "Running";
    sub_10000BF04(__p, v7);
    v8 = v12;
    if (v5 < 0)
      v8 = v6;
    if (v11 >= 0)
      v9 = __p;
    else
      v9 = (void **)__p[0];
    *(_DWORD *)buf = 134218498;
    v15 = v2;
    v16 = 2080;
    v17 = v8;
    v18 = 2080;
    v19 = v9;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#alisha-ca,[%.06f] reportRangingIntentOnNewBluetoothConnection requestState:%s sessionState:%s", buf, 0x20u);
    if (v11 < 0)
      operator delete(__p[0]);
    if (v13 < 0)
      operator delete(v12[0]);
  }

  *(_DWORD *)(a1 + 172) = 0;
  *(double *)(a1 + 176) = v2;
}

void sub_1001A16CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;

  if (a17 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1001A16FC(uint64_t a1)
{
  double v2;
  NSObject *v3;
  char *v4;
  int v5;
  void **v6;
  char *v7;
  void **v8;
  void **v9;
  void *__p[2];
  char v11;
  void *v12[2];
  char v13;
  uint8_t buf[4];
  double v15;
  __int16 v16;
  void **v17;
  __int16 v18;
  void **v19;

  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 8));
  v2 = sub_10000883C();
  v3 = (id)qword_10085F520;
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    if (*(_DWORD *)(a1 + 32))
      v4 = "WaitingForRequest";
    else
      v4 = "RequestReceived";
    sub_10000BF04(v12, v4);
    v5 = v13;
    v6 = (void **)v12[0];
    if (*(_DWORD *)(a1 + 164))
      v7 = "NotRunning";
    else
      v7 = "Running";
    sub_10000BF04(__p, v7);
    v8 = v12;
    if (v5 < 0)
      v8 = v6;
    if (v11 >= 0)
      v9 = __p;
    else
      v9 = (void **)__p[0];
    *(_DWORD *)buf = 134218498;
    v15 = v2;
    v16 = 2080;
    v17 = v8;
    v18 = 2080;
    v19 = v9;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#alisha-ca,[%.06f] reportRangingIntentOnApproachingVehicle requestState:%s sessionState:%s", buf, 0x20u);
    if (v11 < 0)
      operator delete(__p[0]);
    if (v13 < 0)
      operator delete(v12[0]);
  }

  *(_DWORD *)(a1 + 172) = 1;
  *(double *)(a1 + 176) = v2;
}

void sub_1001A187C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;

  if (a17 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1001A18AC(uint64_t a1)
{
  NSObject *v2;
  char *v3;
  int v4;
  void **v5;
  char *v6;
  void **v7;
  void **v8;
  void *__p[2];
  char v10;
  void *v11[2];
  char v12;
  uint8_t buf[4];
  void **v14;
  __int16 v15;
  void **v16;

  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 8));
  v2 = (id)qword_10085F520;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    if (*(_DWORD *)(a1 + 32))
      v3 = "WaitingForRequest";
    else
      v3 = "RequestReceived";
    sub_10000BF04(v11, v3);
    v4 = v12;
    v5 = (void **)v11[0];
    if (*(_DWORD *)(a1 + 164))
      v6 = "NotRunning";
    else
      v6 = "Running";
    sub_10000BF04(__p, v6);
    v7 = v11;
    if (v4 < 0)
      v7 = v5;
    if (v10 >= 0)
      v8 = __p;
    else
      v8 = (void **)__p[0];
    *(_DWORD *)buf = 136315394;
    v14 = v7;
    v15 = 2080;
    v16 = v8;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#alisha-ca,reportVehicleLocked requestState:%s sessionState:%s", buf, 0x16u);
    if (v10 < 0)
      operator delete(__p[0]);
    if (v12 < 0)
      operator delete(v11[0]);
  }

  if (*(_DWORD *)(a1 + 164) == 1)
  {
    ++*(_DWORD *)(a1 + 160);
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
      sub_1003D5D50();
  }
  else
  {
    *(_BYTE *)(a1 + 185) = 1;
  }
}

void sub_1001A1A48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;

  if (a17 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1001A1A78(uint64_t a1)
{
  double v2;
  NSObject *v3;
  char *v4;
  int v5;
  void **v6;
  char *v7;
  void **v8;
  void **v9;
  void *__p[2];
  char v11;
  void *v12[2];
  char v13;
  uint8_t buf[4];
  double v15;
  __int16 v16;
  void **v17;
  __int16 v18;
  void **v19;

  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 8));
  v2 = sub_10000883C();
  v3 = (id)qword_10085F520;
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    if (*(_DWORD *)(a1 + 32))
      v4 = "WaitingForRequest";
    else
      v4 = "RequestReceived";
    sub_10000BF04(v12, v4);
    v5 = v13;
    v6 = (void **)v12[0];
    if (*(_DWORD *)(a1 + 164))
      v7 = "NotRunning";
    else
      v7 = "Running";
    sub_10000BF04(__p, v7);
    v8 = v12;
    if (v5 < 0)
      v8 = v6;
    if (v11 >= 0)
      v9 = __p;
    else
      v9 = (void **)__p[0];
    *(_DWORD *)buf = 134218498;
    v15 = v2;
    v16 = 2080;
    v17 = v8;
    v18 = 2080;
    v19 = v9;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#alisha-ca,[%.06f] reportVehicleUnlocked requestState:%s sessionState:%s", buf, 0x20u);
    if (v11 < 0)
      operator delete(__p[0]);
    if (v13 < 0)
      operator delete(v12[0]);
  }

  if (*(_DWORD *)(a1 + 164) == 1)
  {
    ++*(_DWORD *)(a1 + 160);
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
      sub_1003D5D7C();
  }
  else if (!*(_BYTE *)(a1 + 184))
  {
    *(_BYTE *)(a1 + 184) = 1;
    *(double *)(a1 + 192) = v2;
  }
}

void sub_1001A1C38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;

  if (a17 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1001A1C68(uint64_t a1)
{
  NSObject *v2;
  char *v3;
  int v4;
  void **v5;
  char *v6;
  void **v7;
  void **v8;
  void *__p[2];
  char v10;
  void *v11[2];
  char v12;
  uint8_t buf[4];
  void **v14;
  __int16 v15;
  void **v16;

  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 8));
  v2 = (id)qword_10085F520;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    if (*(_DWORD *)(a1 + 32))
      v3 = "WaitingForRequest";
    else
      v3 = "RequestReceived";
    sub_10000BF04(v11, v3);
    v4 = v12;
    v5 = (void **)v11[0];
    if (*(_DWORD *)(a1 + 164))
      v6 = "NotRunning";
    else
      v6 = "Running";
    sub_10000BF04(__p, v6);
    v7 = v11;
    if (v4 < 0)
      v7 = v5;
    if (v10 >= 0)
      v8 = __p;
    else
      v8 = (void **)__p[0];
    *(_DWORD *)buf = 136315394;
    v14 = v7;
    v15 = 2080;
    v16 = v8;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#alisha-ca,reportVehicleReadyToDrive requestState:%s sessionState:%s", buf, 0x16u);
    if (v10 < 0)
      operator delete(__p[0]);
    if (v12 < 0)
      operator delete(v11[0]);
  }

  if (*(_DWORD *)(a1 + 164) == 1)
  {
    ++*(_DWORD *)(a1 + 160);
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
      sub_1003D5DA8();
  }
  else
  {
    *(_BYTE *)(a1 + 186) = 1;
  }
}

void sub_1001A1E04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;

  if (a17 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1001A1E34(uint64_t a1)
{
  double v2;
  NSObject *v3;
  char *v4;
  int v5;
  void **v6;
  char *v7;
  void **v8;
  void **v9;
  void *__p[2];
  char v11;
  void *v12[2];
  char v13;
  uint8_t buf[4];
  double v15;
  __int16 v16;
  void **v17;
  __int16 v18;
  void **v19;

  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 8));
  v2 = sub_10000883C();
  v3 = (id)qword_10085F520;
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    if (*(_DWORD *)(a1 + 32))
      v4 = "WaitingForRequest";
    else
      v4 = "RequestReceived";
    sub_10000BF04(v12, v4);
    v5 = v13;
    v6 = (void **)v12[0];
    if (*(_DWORD *)(a1 + 164))
      v7 = "NotRunning";
    else
      v7 = "Running";
    sub_10000BF04(__p, v7);
    v8 = v12;
    if (v5 < 0)
      v8 = v6;
    if (v11 >= 0)
      v9 = __p;
    else
      v9 = (void **)__p[0];
    *(_DWORD *)buf = 134218498;
    v15 = v2;
    v16 = 2080;
    v17 = v8;
    v18 = 2080;
    v19 = v9;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#alisha-ca,[%.06f] getKeyStarted requestState:%s sessionState:%s", buf, 0x20u);
    if (v11 < 0)
      operator delete(__p[0]);
    if (v13 < 0)
      operator delete(v12[0]);
  }

  if (*(_DWORD *)(a1 + 32) == 1)
  {
    ++*(_DWORD *)(a1 + 28);
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
      sub_1003D5DD4();
  }
  else
  {
    *(double *)(a1 + 40) = v2;
    *(_BYTE *)(a1 + 48) = 1;
    if (*(_BYTE *)(a1 + 64))
      *(_BYTE *)(a1 + 64) = 0;
  }
}

void sub_1001A1FF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;

  if (a17 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1001A2028(uint64_t a1)
{
  double v2;
  NSObject *v3;
  char *v4;
  int v5;
  void **v6;
  char *v7;
  void **v8;
  void **v9;
  void *__p[2];
  char v11;
  void *v12[2];
  char v13;
  uint8_t buf[4];
  double v15;
  __int16 v16;
  void **v17;
  __int16 v18;
  void **v19;

  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 8));
  v2 = sub_10000883C();
  v3 = (id)qword_10085F520;
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    if (*(_DWORD *)(a1 + 32))
      v4 = "WaitingForRequest";
    else
      v4 = "RequestReceived";
    sub_10000BF04(v12, v4);
    v5 = v13;
    v6 = (void **)v12[0];
    if (*(_DWORD *)(a1 + 164))
      v7 = "NotRunning";
    else
      v7 = "Running";
    sub_10000BF04(__p, v7);
    v8 = v12;
    if (v5 < 0)
      v8 = v6;
    if (v11 >= 0)
      v9 = __p;
    else
      v9 = (void **)__p[0];
    *(_DWORD *)buf = 134218498;
    v15 = v2;
    v16 = 2080;
    v17 = v8;
    v18 = 2080;
    v19 = v9;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#alisha-ca,[%.06f] getKeyFinished requestState:%s sessionState:%s", buf, 0x20u);
    if (v11 < 0)
      operator delete(__p[0]);
    if (v13 < 0)
      operator delete(v12[0]);
  }

  if (*(_DWORD *)(a1 + 32) == 1)
  {
    ++*(_DWORD *)(a1 + 28);
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
      sub_1003D5E00();
  }
  else
  {
    *(double *)(a1 + 56) = v2;
    *(_BYTE *)(a1 + 64) = 1;
  }
}

void sub_1001A21E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;

  if (a17 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1001A2210(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  char *v5;
  void **v6;
  char *v7;
  int v8;
  void **v9;
  void **v10;
  void *p_p;
  double v12;
  float v13;
  double v14;
  float v15;
  unsigned int v16;
  unsigned __int16 *v17;
  unsigned __int16 *v18;
  unsigned __int16 *v19;
  int v20;
  int v21;
  void *__p;
  char v23;
  void *v24[2];
  char v25;
  void *v26[2];
  char v27;
  uint8_t buf[4];
  void **v29;
  __int16 v30;
  void **v31;
  __int16 v32;
  void *v33;

  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 8));
  v4 = (id)qword_10085F520;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    if (*(_DWORD *)(a1 + 32))
      v5 = "WaitingForRequest";
    else
      v5 = "RequestReceived";
    v6 = v26;
    sub_10000BF04(v26, v5);
    if (v27 < 0)
      v6 = (void **)v26[0];
    if (*(_DWORD *)(a1 + 164))
      v7 = "NotRunning";
    else
      v7 = "Running";
    sub_10000BF04(v24, v7);
    v8 = v25;
    v9 = (void **)v24[0];
    sub_1001A24D8((unsigned int *)a2);
    v10 = v24;
    if (v8 < 0)
      v10 = v9;
    if (v23 >= 0)
      p_p = &__p;
    else
      p_p = __p;
    *(_DWORD *)buf = 136315650;
    v29 = v6;
    v30 = 2080;
    v31 = v10;
    v32 = 2080;
    v33 = p_p;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#alisha-ca,sessionStatsUpdated requestState:%s sessionState:%s stats:%s", buf, 0x20u);
    if (v23 < 0)
      operator delete(__p);
    if (v25 < 0)
      operator delete(v24[0]);
    if (v27 < 0)
      operator delete(v26[0]);
  }

  if (*(_DWORD *)(a1 + 164) == 1)
  {
    ++*(_DWORD *)(a1 + 160);
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
      sub_1003D5E2C();
  }
  else
  {
    v12 = *(double *)(a2 + 48);
    if (!*(_BYTE *)(a1 + 148))
      *(_BYTE *)(a1 + 148) = 1;
    v13 = v12;
    *(float *)(a1 + 144) = v13;
    v14 = *(double *)(a2 + 40);
    if (!*(_BYTE *)(a1 + 140))
      *(_BYTE *)(a1 + 140) = 1;
    v15 = v14;
    *(float *)(a1 + 136) = v15;
    v16 = *(unsigned __int16 *)(a2 + 32);
    if (!*(_BYTE *)(a1 + 156))
      *(_BYTE *)(a1 + 156) = 1;
    *(float *)(a1 + 152) = (float)v16;
    v18 = *(unsigned __int16 **)(a2 + 8);
    v17 = *(unsigned __int16 **)(a2 + 16);
    if ((unint64_t)((char *)v17 - (char *)v18) <= 5)
      sub_1003D5E58();
    *(_DWORD *)(a1 + 124) = *v18;
    v19 = v18 + 2;
    *(_DWORD *)(a1 + 128) = v18[1];
    if (v18 + 2 == v17)
    {
      v20 = 0;
    }
    else
    {
      v20 = 0;
      do
      {
        v21 = *v19++;
        v20 += v21;
      }
      while (v19 != v17);
    }
    *(_DWORD *)(a1 + 132) = v20;
  }
}

void sub_1001A2490(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  void *v24;

  if (a18 < 0)
    operator delete(__p);
  if (a24 < 0)
    operator delete(a19);

  _Unwind_Resume(a1);
}

uint64_t sub_1001A24D8(unsigned int *a1)
{
  const std::locale::facet *v2;
  uint64_t v3;
  _QWORD *v4;
  const std::locale::facet *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  void *locale;
  uint64_t v15;
  _QWORD *v16;
  const std::locale::facet *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  const std::locale::facet *v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  const std::locale::facet *v26;
  uint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  const std::locale::facet *v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  const std::locale::facet *v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  const std::locale::facet *v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;
  const std::locale::facet *v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  const std::locale::facet *v52;
  uint64_t v53;
  _QWORD *v54;
  const std::locale::facet *v55;
  uint64_t v56;
  uint64_t v57;
  std::locale v59;
  uint64_t v60;
  unsigned __int8 v61;
  _QWORD v62[2];
  uint64_t v63;
  _QWORD v64[10];
  char v65;
  uint64_t v66;
  std::locale v67;

  sub_1000537E4((uint64_t)v62);
  std::ios_base::getloc((const std::ios_base *)((char *)&v64[-1] + *(_QWORD *)(v63 - 24)));
  v2 = std::locale::use_facet(&v59, &std::ctype<char>::id);
  v3 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v2->__vftable[2].~facet_0)(v2, 10);
  std::locale::~locale(&v59);
  std::ostream::put(&v63, v3);
  std::ostream::flush(&v63);
  v4 = sub_100054C60(&v63, (uint64_t)"{", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(_QWORD *)(*v4 - 24)));
  v5 = std::locale::use_facet(&v59, &std::ctype<char>::id);
  v6 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v59);
  std::ostream::put(v4, v6);
  std::ostream::flush(v4);
  LOBYTE(v59.__locale_) = 9;
  v7 = sub_100054C60(&v63, (uint64_t)&v59, 1);
  v8 = sub_100054C60(v7, (uint64_t)"UWB session id: ", 16);
  v9 = (_QWORD *)std::ostream::operator<<(v8, *a1);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v59, &std::ctype<char>::id);
  v11 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v59);
  std::ostream::put(v9, v11);
  std::ostream::flush(v9);
  LOBYTE(v59.__locale_) = 9;
  v12 = sub_100054C60(&v63, (uint64_t)&v59, 1);
  v13 = sub_100054C60(v12, (uint64_t)"Reason: ", 8);
  sub_10000BF04(&v59, off_10080B5D0[*((char *)a1 + 4)]);
  if ((v61 & 0x80u) == 0)
    locale = &v59;
  else
    locale = v59.__locale_;
  if ((v61 & 0x80u) == 0)
    v15 = v61;
  else
    v15 = v60;
  v16 = sub_100054C60(v13, (uint64_t)locale, v15);
  std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(_QWORD *)(*v16 - 24)));
  v17 = std::locale::use_facet(&v67, &std::ctype<char>::id);
  v18 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
  std::locale::~locale(&v67);
  std::ostream::put(v16, v18);
  std::ostream::flush(v16);
  if ((char)v61 < 0)
    operator delete(v59.__locale_);
  LOBYTE(v59.__locale_) = 9;
  v19 = sub_100054C60(&v63, (uint64_t)&v59, 1);
  v20 = sub_100054C60(v19, (uint64_t)"# total blocks: ", 16);
  v21 = (_QWORD *)std::ostream::operator<<(v20, *((unsigned __int16 *)a1 + 3));
  std::ios_base::getloc((const std::ios_base *)((char *)v21 + *(_QWORD *)(*v21 - 24)));
  v22 = std::locale::use_facet(&v59, &std::ctype<char>::id);
  v23 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v22->__vftable[2].~facet_0)(v22, 10);
  std::locale::~locale(&v59);
  std::ostream::put(v21, v23);
  std::ostream::flush(v21);
  LOBYTE(v59.__locale_) = 9;
  v24 = sub_100054C60(&v63, (uint64_t)&v59, 1);
  v25 = sub_100054C60(v24, (uint64_t)"{", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v25 + *(_QWORD *)(*v25 - 24)));
  v26 = std::locale::use_facet(&v59, &std::ctype<char>::id);
  v27 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v26->__vftable[2].~facet_0)(v26, 10);
  std::locale::~locale(&v59);
  std::ostream::put(v25, v27);
  std::ostream::flush(v25);
  if (*((_QWORD *)a1 + 2) != *((_QWORD *)a1 + 1))
  {
    v28 = 0;
    do
    {
      LOBYTE(v59.__locale_) = 9;
      v29 = sub_100054C60(&v63, (uint64_t)&v59, 1);
      v30 = sub_100054C60(v29, (uint64_t)"    # blocks with ", 18);
      std::ostream::operator<<(v30, v28);
      if (v28 == ((uint64_t)(*((_QWORD *)a1 + 2) - *((_QWORD *)a1 + 1)) >> 1) - 1)
        sub_100054C60(&v63, (uint64_t)"+", 1);
      v31 = sub_100054C60(&v63, (uint64_t)" anchors: ", 10);
      v32 = (_QWORD *)std::ostream::operator<<(v31, *(unsigned __int16 *)(*((_QWORD *)a1 + 1) + 2 * v28));
      std::ios_base::getloc((const std::ios_base *)((char *)v32 + *(_QWORD *)(*v32 - 24)));
      v33 = std::locale::use_facet(&v59, &std::ctype<char>::id);
      v34 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v33->__vftable[2].~facet_0)(v33, 10);
      std::locale::~locale(&v59);
      std::ostream::put(v32, v34);
      std::ostream::flush(v32);
      ++v28;
    }
    while (v28 < (uint64_t)(*((_QWORD *)a1 + 2) - *((_QWORD *)a1 + 1)) >> 1);
  }
  LOBYTE(v59.__locale_) = 9;
  v35 = sub_100054C60(&v63, (uint64_t)&v59, 1);
  v36 = sub_100054C60(v35, (uint64_t)"}", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v36 + *(_QWORD *)(*v36 - 24)));
  v37 = std::locale::use_facet(&v59, &std::ctype<char>::id);
  v38 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v37->__vftable[2].~facet_0)(v37, 10);
  std::locale::~locale(&v59);
  std::ostream::put(v36, v38);
  std::ostream::flush(v36);
  LOBYTE(v59.__locale_) = 9;
  v39 = sub_100054C60(&v63, (uint64_t)&v59, 1);
  v40 = sub_100054C60(v39, (uint64_t)"First success block idx: ", 25);
  v41 = (_QWORD *)std::ostream::operator<<(v40, *((unsigned __int16 *)a1 + 16));
  std::ios_base::getloc((const std::ios_base *)((char *)v41 + *(_QWORD *)(*v41 - 24)));
  v42 = std::locale::use_facet(&v59, &std::ctype<char>::id);
  v43 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v42->__vftable[2].~facet_0)(v42, 10);
  std::locale::~locale(&v59);
  std::ostream::put(v41, v43);
  std::ostream::flush(v41);
  LOBYTE(v59.__locale_) = 9;
  v44 = sub_100054C60(&v63, (uint64_t)&v59, 1);
  v45 = sub_100054C60(v44, (uint64_t)"First success block soiRssi (dBm): ", 35);
  *(_QWORD *)((char *)v45 + *(_QWORD *)(*v45 - 24) + 16) = 5;
  v46 = (_QWORD *)std::ostream::operator<<(v45);
  std::ios_base::getloc((const std::ios_base *)((char *)v46 + *(_QWORD *)(*v46 - 24)));
  v47 = std::locale::use_facet(&v59, &std::ctype<char>::id);
  v48 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v47->__vftable[2].~facet_0)(v47, 10);
  std::locale::~locale(&v59);
  std::ostream::put(v46, v48);
  std::ostream::flush(v46);
  LOBYTE(v59.__locale_) = 9;
  v49 = sub_100054C60(&v63, (uint64_t)&v59, 1);
  v50 = sub_100054C60(v49, (uint64_t)"Max soiRssi (dbm): ", 19);
  *(_QWORD *)((char *)v50 + *(_QWORD *)(*v50 - 24) + 16) = 5;
  v51 = (_QWORD *)std::ostream::operator<<(v50);
  std::ios_base::getloc((const std::ios_base *)((char *)v51 + *(_QWORD *)(*v51 - 24)));
  v52 = std::locale::use_facet(&v59, &std::ctype<char>::id);
  v53 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v52->__vftable[2].~facet_0)(v52, 10);
  std::locale::~locale(&v59);
  std::ostream::put(v51, v53);
  std::ostream::flush(v51);
  v54 = sub_100054C60(&v63, (uint64_t)"}", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v54 + *(_QWORD *)(*v54 - 24)));
  v55 = std::locale::use_facet(&v59, &std::ctype<char>::id);
  v56 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v55->__vftable[2].~facet_0)(v55, 10);
  std::locale::~locale(&v59);
  std::ostream::put(v54, v56);
  std::ostream::flush(v54);
  std::stringbuf::str(v64);
  *(_QWORD *)((char *)v62
  v63 = v57;
  if (v65 < 0)
    operator delete((void *)v64[8]);
  std::streambuf::~streambuf(v64);
  return std::ios::~ios(&v66);
}

void sub_1001A2C7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::locale a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  sub_100053910((uint64_t)&a17);
  _Unwind_Resume(a1);
}

id sub_1001A2D00(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

id sub_1001A2D08(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

id sub_1001A2D10(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

uint64_t sub_1001A2D18(uint64_t a1)
{

  return a1;
}

void sub_1001A2D40(uint64_t a1)
{

  operator delete();
}

void sub_1001A2ED4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1001A2F3C(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1001A31EC(_Unwind_Exception *a1)
{
  std::mutex *v1;
  void *v2;
  void *v3;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1001A36A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void sub_1001A3AD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  void *v14;
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);

  _Unwind_Resume(a1);
}

void sub_1001A3B00(uint64_t a1, void *a2)
{
  id v3;
  id *v4;
  NSObject **WeakRetained;
  NSObject **v6;
  NSObject *v7;
  _QWORD v8[4];
  id v9;
  id v10;

  v3 = a2;
  v4 = (id *)(a1 + 32);
  WeakRetained = (NSObject **)objc_loadWeakRetained((id *)(a1 + 32));
  v6 = WeakRetained;
  if (WeakRetained)
  {
    v7 = WeakRetained[4];
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_1001A3BC0;
    v8[3] = &unk_1007FB518;
    objc_copyWeak(&v10, v4);
    v9 = v3;
    dispatch_async(v7, v8);

    objc_destroyWeak(&v10);
  }

}

void sub_1001A3BC0(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    objc_msgSend(WeakRetained, "_stateTimerExpired");
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  }

}

void sub_1001A3C10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1001A3EE0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1001A4050(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1001A41E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  void *v22;
  void *v23;
  void *v24;

  _Block_object_dispose(&a17, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1001A423C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1001A424C(uint64_t a1)
{

}

void sub_1001A4254(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  id v5;

  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKey:", a2));
  if (v5)
  {
    v4 = objc_opt_class(NSData, v3);
    if ((objc_opt_isKindOfClass(v5, v4) & 1) != 0)
    {
      if (objc_msgSend(v5, "length"))
        objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "appendData:", v5);
    }
  }

}

void sub_1001A42D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1001A43C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1001A4468(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1001A44FC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1001A45C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1001A46B0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1001A47B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  void *v20;

  _Block_object_dispose(&a15, 8);

  _Unwind_Resume(a1);
}

void sub_1001A47E8(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  char v8;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "rawToken"));
  v5 = objc_msgSend(v4, "length");

  if ((unint64_t)v5 >= 0x100)
    __assert_rtn("+[NIDiscoveryToken serialize:]_block_invoke", "NIConfiguration.mm", 195, "tokenLength <= std::numeric_limits<uint8_t>::max()");
  v8 = (char)v5;
  objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), "appendBytes:length:", &v8, 1);
  v6 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "rawToken"));
  objc_msgSend(v6, "appendData:", v7);

}

void sub_1001A48AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1001A49E0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1001A4AC4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1001A4BAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1001A4CD8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1001A4D78(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1001A4E18(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1001A4EB8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1001A501C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1001A50DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1001A5230(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  operator delete(v4);
  operator delete(v3);

  _Unwind_Resume(a1);
}

void sub_1001A53E8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1001A550C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1001A5620(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1001A5878(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  void *v9;
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1001A5920(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1001A5AFC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1001A5C64(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1001A5E00(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1001A62B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1001A644C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1001A6698(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1001A6760(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1001A688C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1001A6994(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1001A6C48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11)
{
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1001A6EA0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1001A7004(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1001A7160(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1001A7350(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1001A744C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1001A7500(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1001A7738(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  v7 = v5;

  _Unwind_Resume(a1);
}

void sub_1001A78AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1001A79B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1001A7AA4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t sub_1001A7B50(uint64_t a1, int a2, int a3, int a4, int a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  const char *v14;
  int v15;

  *(_DWORD *)a1 = a2;
  *(_DWORD *)(a1 + 4) = a3;
  *(_DWORD *)(a1 + 8) = a4;
  *(_DWORD *)(a1 + 12) = a5;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 48) = 0;
  sub_1001A8C8C((_QWORD *)(a1 + 32), *(const void **)a6, *(_QWORD *)(a6 + 8), (uint64_t)(*(_QWORD *)(a6 + 8) - *(_QWORD *)a6) >> 1);
  if (a3 < a2)
  {
    v14 = "maxAzDeg >= minAzDeg";
    v15 = 20;
    goto LABEL_8;
  }
  if (a5 < a4)
  {
    v14 = "maxElDeg >= minElDeg";
    v15 = 21;
    goto LABEL_8;
  }
  v11 = a3 - a2 + 1;
  v12 = a5 - a4 + 1;
  *(_QWORD *)(a1 + 16) = v11;
  *(_QWORD *)(a1 + 24) = v12;
  if (v12 * v11 != (uint64_t)(*(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32)) >> 1)
  {
    v14 = "fNumRows * fNumCols == fPDOATable.size()";
    v15 = 24;
LABEL_8:
    __assert_rtn("AOAtoPDOAMapping", "RoseAOAtoPDOAMapping.cpp", v15, v14);
  }
  return a1;
}

void sub_1001A7C3C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 40) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1001A7C58(uint64_t result, int a2, int a3, int a4, int a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  int v9;

  *(_DWORD *)result = a2;
  *(_DWORD *)(result + 4) = a3;
  *(_DWORD *)(result + 8) = a4;
  *(_DWORD *)(result + 12) = a5;
  *(_OWORD *)(result + 16) = 0u;
  *(_OWORD *)(result + 32) = 0u;
  *(_QWORD *)(result + 48) = 0;
  *(_OWORD *)(result + 32) = *(_OWORD *)a6;
  *(_QWORD *)(result + 48) = *(_QWORD *)(a6 + 16);
  *(_QWORD *)a6 = 0;
  *(_QWORD *)(a6 + 8) = 0;
  *(_QWORD *)(a6 + 16) = 0;
  if (a3 < a2)
  {
    v8 = "maxAzDeg >= minAzDeg";
    v9 = 30;
    goto LABEL_8;
  }
  if (a5 < a4)
  {
    v8 = "maxElDeg >= minElDeg";
    v9 = 31;
    goto LABEL_8;
  }
  v6 = a3 - a2 + 1;
  v7 = a5 - a4 + 1;
  *(_QWORD *)(result + 16) = v6;
  *(_QWORD *)(result + 24) = v7;
  if (v7 * v6 != (uint64_t)(*(_QWORD *)(result + 40) - *(_QWORD *)(result + 32)) >> 1)
  {
    v8 = "fNumRows * fNumCols == fPDOATable.size()";
    v9 = 34;
LABEL_8:
    __assert_rtn("AOAtoPDOAMapping", "RoseAOAtoPDOAMapping.cpp", v9, v8);
  }
  return result;
}

void sub_1001A7D20(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 32);
  if (v3)
  {
    *(_QWORD *)(v1 + 40) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1001A7D40(uint64_t a1, int a2, int a3)
{
  int v3;
  BOOL v4;
  int v5;

  if (a2 < *(_DWORD *)a1)
    sub_1003D600C();
  if (*(_DWORD *)(a1 + 4) < a2)
    sub_1003D6034();
  v3 = *(_DWORD *)(a1 + 8);
  v4 = __OFSUB__(a3, v3);
  v5 = a3 - v3;
  if (v5 < 0 != v4)
    sub_1003D605C();
  if (*(_DWORD *)(a1 + 12) < a3)
    sub_1003D6084();
  return *(__int16 *)(*(_QWORD *)(a1 + 32) + 2 * (*(_QWORD *)(a1 + 24) * (a2 - *(_DWORD *)a1) + v5));
}

uint64_t sub_1001A7DA4(uint64_t a1, int a2, int a3)
{
  int v3;
  BOOL v4;
  int v5;

  if (a2 < *(_DWORD *)a1)
    sub_1003D60AC();
  if (*(_DWORD *)(a1 + 4) < a2)
    sub_1003D60D4();
  v3 = *(_DWORD *)(a1 + 8);
  v4 = __OFSUB__(a3, v3);
  v5 = a3 - v3;
  if (v5 < 0 != v4)
    sub_1003D60FC();
  if (*(_DWORD *)(a1 + 12) < a3)
    sub_1003D6124();
  return *(_QWORD *)(a1 + 32) + 2 * (*(_QWORD *)(a1 + 24) * (a2 - *(_DWORD *)a1) + v5);
}

_BYTE *sub_1001A7E08(_BYTE *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int v37;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  __int16 v47;
  int v48;
  char *v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  __int16 v57;
  int v58;
  char *v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  __int16 v68;
  int v69;
  char *v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  __int16 v78;
  char *v79;
  int v81;
  const char *v82;
  uint64_t v83;
  __int16 v84;
  uint64_t v85;
  void *__p;
  char *v87;
  char *v88;
  _QWORD v89[4];
  void *v90;
  void *v91;
  uint64_t v92;
  void (__cdecl **v93[2])(std::ifstream *__hidden);
  _BYTE v94[408];
  uint64_t v95;

  *a1 = 0;
  a1[8] = 0;
  v4 = (uint64_t)(a1 + 8);
  a1[64] = 0;
  a1[72] = 0;
  v5 = (uint64_t)(a1 + 72);
  a1[136] = 0;
  v6 = (uint64_t)(a1 + 136);
  a1[128] = 0;
  a1[192] = 0;
  a1[200] = 0;
  v7 = (uint64_t)(a1 + 200);
  a1[256] = 0;
  if (sub_100292248(a2))
  {
    v15 = sub_100291614((uint64_t *)a2);
    if (!v16)
      sub_10000BA44();
    v17 = v15;
    if (v15 < 0x2009E)
      __assert_rtn("CalBlob", "RoseAOAtoPDOAMapping.cpp", 101, "fileSize >= kHeaderSize + kBytesPerChan");
    sub_10014AA68(v93, (uint64_t *)a2, 4);
    v25 = (char *)v93 + (unint64_t)*(v93[0] - 3);
    if (*((_DWORD *)v25 + 8))
    {
      if (*(char *)(a2 + 23) >= 0)
        v26 = a2;
      else
        v26 = *(_QWORD *)a2;
      sub_10036CAF0("CalBlob: error opening %s", v18, v19, v20, v21, v22, v23, v24, v26);
    }
    else
    {
      *((_DWORD *)v25 + 2) &= ~0x1000u;
      std::istream::seekg(v93, 178, 0);
      __p = 0;
      v87 = 0;
      v88 = 0;
      sub_1001A8708(&__p, 0x7FF9uLL);
      v85 = 0;
      v84 = 0;
      while (1)
      {
        v28 = (_QWORD *)std::istream::read(v93, (char *)&v85 + 4, 4);
        if ((*((_BYTE *)v28 + *(_QWORD *)(*v28 - 24) + 32) & 5) != 0)
          goto LABEL_113;
        std::istream::tellg(v89, v93);
        if (v92 == -1)
          break;
        std::istream::tellg(v89, v93);
        if (v92 + 131052 > v17 + 4)
          __assert_rtn("CalBlob", "RoseAOAtoPDOAMapping.cpp", 123, "static_cast<size_t>(f.tellg()) + kBytesPerChan <= fileSize + sizeof(tag)");
        v36 = HIDWORD(v85);
        if (!HIDWORD(v85))
        {
          std::istream::read(v93, &v85, 4);
          if ((_DWORD)v85 != 131044)
          {
            v81 = 127;
            v82 = "length == kCh5Length";
LABEL_120:
            __assert_rtn("CalBlob", "RoseAOAtoPDOAMapping.cpp", v81, v82);
          }
          v37 = 0;
          v87 = (char *)__p;
          do
          {
            std::istream::read(v93, &v84, 2);
            v38 = v87;
            if (v87 >= v88)
            {
              v40 = (char *)__p;
              v41 = v87 - (_BYTE *)__p;
              if (v87 - (_BYTE *)__p <= -3)
                sub_100026E7C();
              v42 = v41 >> 1;
              if (v88 - (_BYTE *)__p <= (unint64_t)((v41 >> 1) + 1))
                v43 = v42 + 1;
              else
                v43 = v88 - (_BYTE *)__p;
              if ((unint64_t)(v88 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFFELL)
                v44 = 0x7FFFFFFFFFFFFFFFLL;
              else
                v44 = v43;
              if (v44)
              {
                v45 = (char *)sub_100131980((uint64_t)&v88, v44);
                v40 = (char *)__p;
                v38 = v87;
              }
              else
              {
                v45 = 0;
              }
              v46 = &v45[2 * v42];
              *(_WORD *)v46 = v84;
              v39 = v46 + 2;
              while (v38 != v40)
              {
                v47 = *((_WORD *)v38 - 1);
                v38 -= 2;
                *((_WORD *)v46 - 1) = v47;
                v46 -= 2;
              }
              __p = v46;
              v87 = v39;
              v88 = &v45[2 * v44];
              if (v40)
                operator delete(v40);
            }
            else
            {
              *(_WORD *)v87 = v84;
              v39 = v38 + 2;
            }
            v87 = v39;
            ++v37;
          }
          while (v37 != 32761);
          sub_1001A7B50((uint64_t)v89, 0, 180, 0, 180, (uint64_t)&__p);
          sub_1001A8798(v4, (uint64_t)v89);
          if (v90)
          {
            v91 = v90;
            operator delete(v90);
          }
          v48 = 0;
          v87 = (char *)__p;
          do
          {
            std::istream::read(v93, &v84, 2);
            v49 = v87;
            if (v87 >= v88)
            {
              v51 = (char *)__p;
              v52 = v87 - (_BYTE *)__p;
              if (v87 - (_BYTE *)__p <= -3)
                sub_100026E7C();
              v53 = v52 >> 1;
              if (v88 - (_BYTE *)__p <= (unint64_t)((v52 >> 1) + 1))
                v54 = v53 + 1;
              else
                v54 = v88 - (_BYTE *)__p;
              if ((unint64_t)(v88 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFFELL)
                v29 = 0x7FFFFFFFFFFFFFFFLL;
              else
                v29 = v54;
              if (v29)
              {
                v55 = (char *)sub_100131980((uint64_t)&v88, v29);
                v51 = (char *)__p;
                v49 = v87;
              }
              else
              {
                v55 = 0;
              }
              v56 = &v55[2 * v53];
              *(_WORD *)v56 = v84;
              v50 = v56 + 2;
              while (v49 != v51)
              {
                v57 = *((_WORD *)v49 - 1);
                v49 -= 2;
                *((_WORD *)v56 - 1) = v57;
                v56 -= 2;
              }
              __p = v56;
              v87 = v50;
              v88 = &v55[2 * v29];
              if (v51)
                operator delete(v51);
            }
            else
            {
              *(_WORD *)v87 = v84;
              v50 = v49 + 2;
            }
            v87 = v50;
            ++v48;
          }
          while (v48 != 32761);
          if (*(_DWORD *)&v94[(unint64_t)*(v93[0] - 3) + 16])
          {
            v79 = "Reading Ch5 calblob failed";
            goto LABEL_112;
          }
          sub_1001A7B50((uint64_t)v89, 0, 180, 0, 180, (uint64_t)&__p);
          sub_1001A8798(v5, (uint64_t)v89);
          if (v90)
          {
            v91 = v90;
            operator delete(v90);
          }
          sub_10036C2F0(a1, 5);
          v36 = HIDWORD(v85);
        }
        if (v36 == 1)
        {
          std::istream::read(v93, &v85, 4);
          if ((_DWORD)v85 != 131044)
          {
            v81 = 156;
            v82 = "length == kCh9Length";
            goto LABEL_120;
          }
          v58 = 0;
          v87 = (char *)__p;
          do
          {
            std::istream::read(v93, &v84, 2);
            v59 = v87;
            if (v87 >= v88)
            {
              v61 = (char *)__p;
              v62 = v87 - (_BYTE *)__p;
              if (v87 - (_BYTE *)__p <= -3)
                sub_100026E7C();
              v63 = v62 >> 1;
              if (v88 - (_BYTE *)__p <= (unint64_t)((v62 >> 1) + 1))
                v64 = v63 + 1;
              else
                v64 = v88 - (_BYTE *)__p;
              if ((unint64_t)(v88 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFFELL)
                v65 = 0x7FFFFFFFFFFFFFFFLL;
              else
                v65 = v64;
              if (v65)
              {
                v66 = (char *)sub_100131980((uint64_t)&v88, v65);
                v61 = (char *)__p;
                v59 = v87;
              }
              else
              {
                v66 = 0;
              }
              v67 = &v66[2 * v63];
              *(_WORD *)v67 = v84;
              v60 = v67 + 2;
              while (v59 != v61)
              {
                v68 = *((_WORD *)v59 - 1);
                v59 -= 2;
                *((_WORD *)v67 - 1) = v68;
                v67 -= 2;
              }
              __p = v67;
              v87 = v60;
              v88 = &v66[2 * v65];
              if (v61)
                operator delete(v61);
            }
            else
            {
              *(_WORD *)v87 = v84;
              v60 = v59 + 2;
            }
            v87 = v60;
            ++v58;
          }
          while (v58 != 32761);
          sub_1001A7B50((uint64_t)v89, 0, 180, 0, 180, (uint64_t)&__p);
          sub_1001A8798(v6, (uint64_t)v89);
          if (v90)
          {
            v91 = v90;
            operator delete(v90);
          }
          v69 = 0;
          v87 = (char *)__p;
          do
          {
            std::istream::read(v93, &v84, 2);
            v70 = v87;
            if (v87 >= v88)
            {
              v72 = (char *)__p;
              v73 = v87 - (_BYTE *)__p;
              if (v87 - (_BYTE *)__p <= -3)
                sub_100026E7C();
              v74 = v73 >> 1;
              if (v88 - (_BYTE *)__p <= (unint64_t)((v73 >> 1) + 1))
                v75 = v74 + 1;
              else
                v75 = v88 - (_BYTE *)__p;
              if ((unint64_t)(v88 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFFELL)
                v29 = 0x7FFFFFFFFFFFFFFFLL;
              else
                v29 = v75;
              if (v29)
              {
                v76 = (char *)sub_100131980((uint64_t)&v88, v29);
                v72 = (char *)__p;
                v70 = v87;
              }
              else
              {
                v76 = 0;
              }
              v77 = &v76[2 * v74];
              *(_WORD *)v77 = v84;
              v71 = v77 + 2;
              while (v70 != v72)
              {
                v78 = *((_WORD *)v70 - 1);
                v70 -= 2;
                *((_WORD *)v77 - 1) = v78;
                v77 -= 2;
              }
              __p = v77;
              v87 = v71;
              v88 = &v76[2 * v29];
              if (v72)
                operator delete(v72);
            }
            else
            {
              *(_WORD *)v87 = v84;
              v71 = v70 + 2;
            }
            v87 = v71;
            ++v69;
          }
          while (v69 != 32761);
          if (*(_DWORD *)&v94[(unint64_t)*(v93[0] - 3) + 16])
          {
            v79 = "Reading Ch9 calblob failed";
            goto LABEL_112;
          }
          sub_1001A7B50((uint64_t)v89, 0, 180, 0, 180, (uint64_t)&__p);
          sub_1001A8798(v7, (uint64_t)v89);
          if (v90)
          {
            v91 = v90;
            operator delete(v90);
          }
          sub_10036C2F0(a1, 9);
        }
      }
      v79 = "Current position in the file stream is -1, return";
LABEL_112:
      sub_10036CAF0(v79, v29, v30, v31, v32, v33, v34, v35, v83);
LABEL_113:
      if (__p)
      {
        v87 = (char *)__p;
        operator delete(__p);
      }
    }
    std::filebuf::~filebuf(v94);
    std::ios::~ios(&v95);
  }
  else
  {
    if (*(char *)(a2 + 23) >= 0)
      v27 = a2;
    else
      v27 = *(_QWORD *)a2;
    sub_10036CAF0("CalBlob: file %s integrity check fails ", v8, v9, v10, v11, v12, v13, v14, v27);
  }
  return a1;
}

void sub_1001A8600(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  uint64_t v35;
  void *v37;
  void *v38;
  void *v39;
  void *v40;

  if (__p)
    operator delete(__p);
  sub_10014AEAC(&a35);
  if (*(_BYTE *)(v35 + 256))
  {
    v37 = *(void **)(v35 + 232);
    if (v37)
    {
      *(_QWORD *)(v35 + 240) = v37;
      operator delete(v37);
    }
  }
  if (*(_BYTE *)(v35 + 192))
  {
    v38 = *(void **)(v35 + 168);
    if (v38)
    {
      *(_QWORD *)(v35 + 176) = v38;
      operator delete(v38);
    }
  }
  if (*(_BYTE *)(v35 + 128))
  {
    v39 = *(void **)(v35 + 104);
    if (v39)
    {
      *(_QWORD *)(v35 + 112) = v39;
      operator delete(v39);
    }
  }
  if (*(_BYTE *)(v35 + 64))
  {
    v40 = *(void **)(v35 + 40);
    if (v40)
    {
      *(_QWORD *)(v35 + 48) = v40;
      operator delete(v40);
    }
  }
  _Unwind_Resume(a1);
}

void sub_1001A8708(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  __int16 v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 1)
  {
    if ((a2 & 0x8000000000000000) != 0)
      sub_100026E7C();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)sub_100131980(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFFELL];
    v9 = &v6[2 * v8];
    v10 = (char *)*a1;
    v11 = (char *)a1[1];
    v12 = v7;
    if (v11 != *a1)
    {
      v12 = v7;
      do
      {
        v13 = *((_WORD *)v11 - 1);
        v11 -= 2;
        *((_WORD *)v12 - 1) = v13;
        v12 -= 2;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

uint64_t sub_1001A8798(uint64_t a1, uint64_t a2)
{
  int v3;
  __int128 v4;
  _QWORD *v5;

  v3 = *(unsigned __int8 *)(a1 + 56);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = (_QWORD *)(a1 + 32);
  if (v3)
  {
    sub_10013775C((uint64_t)v5, (__n128 *)(a2 + 32));
  }
  else
  {
    *v5 = 0;
    v5[1] = 0;
    v5[2] = 0;
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(a2 + 40) = 0;
    *(_QWORD *)(a2 + 48) = 0;
    *(_BYTE *)(a1 + 56) = 1;
  }
  return a1;
}

_BYTE *sub_1001A8804(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

uint64_t sub_1001A880C(unsigned __int8 *a1)
{
  return *a1;
}

uint64_t sub_1001A8814(unsigned __int8 *a1)
{
  unsigned int v1;

  v1 = *a1;
  return (v1 >> sub_10036C4CC(5, 1)) & 1;
}

uint64_t sub_1001A8844(unsigned __int8 *a1)
{
  unsigned int v1;

  v1 = *a1;
  return (v1 >> sub_10036C4CC(9, 1)) & 1;
}

BOOL sub_1001A8874(unsigned __int8 *a1)
{
  unsigned int v1;
  unsigned int v3;
  _BOOL8 result;

  result = 0;
  if (*a1)
  {
    v1 = *a1;
    if (((v1 >> sub_10036C4CC(9, 1)) & 1) != 0)
    {
      if (a1[192])
      {
        if (a1[256])
        {
          if (*((_QWORD *)a1 + 19) == 181
            && *((_QWORD *)a1 + 20) == 181
            && *((_QWORD *)a1 + 27) == 181
            && *((_QWORD *)a1 + 28) == 181)
          {
            v3 = *a1;
            if (((v3 >> sub_10036C4CC(5, 1)) & 1) == 0
              || a1[64]
              && a1[128]
              && *((_QWORD *)a1 + 3) == 181
              && *((_QWORD *)a1 + 4) == 181
              && *((_QWORD *)a1 + 11) == 181
              && *((_QWORD *)a1 + 12) == 181)
            {
              return 1;
            }
          }
        }
      }
    }
  }
  return result;
}

unsigned __int8 *sub_1001A8950(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;
  int i;
  unsigned __int16 *v9;
  int v10;
  int v11;
  __int16 v12;
  BOOL v13;
  __int16 v14;
  unsigned __int16 *v15;
  int v16;
  int v17;
  __int16 v18;
  __int16 v19;
  unsigned __int16 *v20;
  int v21;
  int v22;
  __int16 v23;
  __int16 v24;
  unsigned __int16 *v25;
  int v26;
  int v27;
  __int16 v28;
  __int16 v29;
  int v31;
  uint64_t v32;

  if (!sub_1001A8874(a1) || !sub_1001A8874(a2) || (v4 = *a1, v4 != *a2))
    sub_1003D6174();
  if (((v4 >> sub_10036C4CC(9, 1)) & 1) == 0 || (v5 = *a2, ((v5 >> sub_10036C4CC(9, 1)) & 1) == 0))
    sub_1003D614C();
  v6 = *a2;
  v7 = 0;
  v31 = (1 << sub_10036C4CC(5, 1)) & v6;
  v32 = (uint64_t)(a1 + 8);
  do
  {
    for (i = 0; i != 181; ++i)
    {
      if (!a1[192])
        goto LABEL_56;
      v9 = (unsigned __int16 *)sub_1001A7DA4((uint64_t)(a1 + 136), v7, i);
      if (!a2[192])
        goto LABEL_56;
      v10 = *v9;
      v11 = sub_1001A7D40((uint64_t)(a2 + 136), v7, i);
      v12 = v11 + v10;
      if ((__int16)(v11 + v10) > 180)
        v12 = v11 + v10 - 360;
      if (v12 < -179)
        v12 += 360;
      v13 = v10 == 0x7FFF || v11 == 0x7FFF;
      v14 = v13 ? 0x7FFF : v12;
      if (!a1[192])
        goto LABEL_56;
      *(_WORD *)sub_1001A7DA4((uint64_t)(a1 + 136), v7, i) = v14;
      if (!a1[256])
        goto LABEL_56;
      v15 = (unsigned __int16 *)sub_1001A7DA4((uint64_t)(a1 + 200), v7, i);
      if (!a2[256])
        goto LABEL_56;
      v16 = *v15;
      v17 = sub_1001A7D40((uint64_t)(a2 + 200), v7, i);
      v18 = 0x7FFF;
      if (v16 != 0x7FFF && v17 != 0x7FFF)
      {
        v19 = v17 + v16;
        if ((__int16)(v17 + v16) > 180)
          v19 = v17 + v16 - 360;
        if (v19 >= -179)
          v18 = v19;
        else
          v18 = v19 + 360;
      }
      if (!a1[256])
LABEL_56:
        sub_10000BA44();
      *(_WORD *)sub_1001A7DA4((uint64_t)(a1 + 200), v7, i) = v18;
      if (v31)
      {
        if (!a1[64])
          goto LABEL_56;
        v20 = (unsigned __int16 *)sub_1001A7DA4(v32, v7, i);
        if (!a2[64])
          goto LABEL_56;
        v21 = *v20;
        v22 = sub_1001A7D40((uint64_t)(a2 + 8), v7, i);
        v23 = 0x7FFF;
        if (v21 != 0x7FFF && v22 != 0x7FFF)
        {
          v24 = v22 + v21;
          if ((__int16)(v22 + v21) > 180)
            v24 = v22 + v21 - 360;
          if (v24 >= -179)
            v23 = v24;
          else
            v23 = v24 + 360;
        }
        if (!a1[64])
          goto LABEL_56;
        *(_WORD *)sub_1001A7DA4(v32, v7, i) = v23;
        if (!a1[128])
          goto LABEL_56;
        v25 = (unsigned __int16 *)sub_1001A7DA4((uint64_t)(a1 + 72), v7, i);
        if (!a2[128])
          goto LABEL_56;
        v26 = *v25;
        v27 = sub_1001A7D40((uint64_t)(a2 + 72), v7, i);
        v28 = 0x7FFF;
        if (v26 != 0x7FFF && v27 != 0x7FFF)
        {
          v29 = v27 + v26;
          if ((__int16)(v27 + v26) > 180)
            v29 = v27 + v26 - 360;
          if (v29 >= -179)
            v28 = v29;
          else
            v28 = v29 + 360;
        }
        if (!a1[128])
          goto LABEL_56;
        *(_WORD *)sub_1001A7DA4((uint64_t)(a1 + 72), v7, i) = v28;
      }
    }
    ++v7;
  }
  while (v7 != 181);
  return a1;
}

_QWORD *sub_1001A8C8C(_QWORD *result, const void *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = sub_1001A8D04(result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1001A8CE8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_1001A8D04(_QWORD *a1, uint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 < 0)
    sub_100026E7C();
  result = (char *)sub_100131980((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[2 * v4];
  return result;
}

uint64_t sub_1001A8D40()
{
  std::string *v0;
  __int128 v1;
  std::string *v2;
  __int128 v3;
  std::string *v4;
  __int128 v5;
  std::string *v6;
  __int128 v7;
  std::string *v8;
  __int128 v9;
  std::string *v10;
  __int128 v11;
  std::string *v12;
  __int128 v13;
  std::string *v14;
  __int128 v15;
  std::string *v16;
  __int128 v17;
  std::string *v18;
  __int128 v19;
  std::string *v20;
  __int128 v21;
  std::string *v22;
  __int128 v23;
  std::string *v24;
  __int128 v25;
  std::string *v26;
  __int128 v27;
  std::string *v28;
  __int128 v29;
  std::string *v30;
  __int128 v31;
  std::string *v32;
  __int128 v33;
  std::string *v34;
  __int128 v35;
  std::string v37;
  std::string v38;

  sub_1003610EC(0);
  v0 = std::string::insert(&v37, 0, "reverseLUT_A");
  v1 = *(_OWORD *)&v0->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v0->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v1;
  v0->__r_.__value_.__l.__size_ = 0;
  v0->__r_.__value_.__r.__words[2] = 0;
  v0->__r_.__value_.__r.__words[0] = 0;
  v2 = std::string::append(&v38, ".bin");
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  qword_100857890 = v2->__r_.__value_.__r.__words[2];
  xmmword_100857880 = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_100857880, (void *)&_mh_execute_header);
  sub_1003610EC(1);
  v4 = std::string::insert(&v37, 0, "reverseLUT_A");
  v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  v6 = std::string::append(&v38, ".bin");
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  qword_1008578A8 = v6->__r_.__value_.__r.__words[2];
  xmmword_100857898 = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_100857898, (void *)&_mh_execute_header);
  sub_1003610EC(2);
  v8 = std::string::insert(&v37, 0, "reverseLUT_A");
  v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  v10 = std::string::append(&v38, ".bin");
  v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  qword_1008578C0 = v10->__r_.__value_.__r.__words[2];
  xmmword_1008578B0 = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1008578B0, (void *)&_mh_execute_header);
  sub_1003610EC(3);
  v12 = std::string::insert(&v37, 0, "reverseLUT_A");
  v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  v14 = std::string::append(&v38, ".bin");
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  qword_1008578D8 = v14->__r_.__value_.__r.__words[2];
  xmmword_1008578C8 = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1008578C8, (void *)&_mh_execute_header);
  sub_1003610EC(4);
  v16 = std::string::insert(&v37, 0, "reverseLUT_A");
  v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  v18 = std::string::append(&v38, ".bin");
  v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  qword_1008578F0 = v18->__r_.__value_.__r.__words[2];
  xmmword_1008578E0 = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1008578E0, (void *)&_mh_execute_header);
  sub_1003610EC(5);
  v20 = std::string::insert(&v37, 0, "reverseLUT_A");
  v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  v22 = std::string::append(&v38, ".bin");
  v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  qword_100857908 = v22->__r_.__value_.__r.__words[2];
  xmmword_1008578F8 = v23;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1008578F8, (void *)&_mh_execute_header);
  sub_1003610EC(6);
  v24 = std::string::insert(&v37, 0, "reverseLUT_A");
  v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v25;
  v24->__r_.__value_.__l.__size_ = 0;
  v24->__r_.__value_.__r.__words[2] = 0;
  v24->__r_.__value_.__r.__words[0] = 0;
  v26 = std::string::append(&v38, ".bin");
  v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
  qword_100857920 = v26->__r_.__value_.__r.__words[2];
  xmmword_100857910 = v27;
  v26->__r_.__value_.__l.__size_ = 0;
  v26->__r_.__value_.__r.__words[2] = 0;
  v26->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_100857910, (void *)&_mh_execute_header);
  sub_1003610EC(7);
  v28 = std::string::insert(&v37, 0, "reverseLUT_A");
  v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v29;
  v28->__r_.__value_.__l.__size_ = 0;
  v28->__r_.__value_.__r.__words[2] = 0;
  v28->__r_.__value_.__r.__words[0] = 0;
  v30 = std::string::append(&v38, ".bin");
  v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
  qword_100857938 = v30->__r_.__value_.__r.__words[2];
  xmmword_100857928 = v31;
  v30->__r_.__value_.__l.__size_ = 0;
  v30->__r_.__value_.__r.__words[2] = 0;
  v30->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_100857928, (void *)&_mh_execute_header);
  sub_1003610EC(8);
  v32 = std::string::insert(&v37, 0, "reverseLUT_A");
  v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v33;
  v32->__r_.__value_.__l.__size_ = 0;
  v32->__r_.__value_.__r.__words[2] = 0;
  v32->__r_.__value_.__r.__words[0] = 0;
  v34 = std::string::append(&v38, ".bin");
  v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
  qword_100857950 = v34->__r_.__value_.__r.__words[2];
  xmmword_100857940 = v35;
  v34->__r_.__value_.__l.__size_ = 0;
  v34->__r_.__value_.__r.__words[2] = 0;
  v34->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  return __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_100857940, (void *)&_mh_execute_header);
}

void sub_1001A9324(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1001A9398@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, off_10080B690[a1]);
}

_QWORD *sub_1001A93AC@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, off_10080B6E8[a1]);
}

_QWORD *sub_1001A93C0@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, off_10080B730[a1]);
}

_QWORD *sub_1001A93D4@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, off_10080B750[a1]);
}

void sub_1001A95C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1001A9794(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1001A98C0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1001A9944(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;

  a9.super_class = (Class)NIServerObservationSession;
  -[_Unwind_Exception dealloc](&a9, "dealloc");
  _Unwind_Resume(a1);
}

void sub_1001A9AC8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1001A9CEC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1001A9E40(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1001A9EB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1001A9F1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1001A9F78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1001AA004(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1001AA0F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

id **sub_1001AA1A8(id **result, id *a2)
{
  id *v2;

  v2 = *result;
  *result = a2;
  if (v2)
  {

    operator delete();
  }
  return result;
}

_QWORD *sub_1001AA1F4@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, off_10080BFF8[a1]);
}

_QWORD *sub_1001AA208@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, off_10080C050[a1]);
}

_QWORD *sub_1001AA21C@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, off_10080C098[a1]);
}

_QWORD *sub_1001AA230@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, off_10080C0B8[a1]);
}

void sub_1001AA4D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1001AA7F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  sub_10001AE68((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_1001AA8DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9, uint64_t a10, uint64_t a11, char a12)
{
  sub_10001AE68((uint64_t)&a12);
  a9.super_class = (Class)NIServerAcwgSession;
  -[_Unwind_Exception dealloc](&a9, "dealloc");
  _Unwind_Resume(a1);
}

void sub_1001AABDC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1001AB120(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,std::__shared_weak_count *a25,char a26)
{
  void *v26;

  sub_1001B06E0((uint64_t)&a14);
  _Unwind_Resume(a1);
}

void sub_1001AB3EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

void sub_1001AB71C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

void sub_1001ABC10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;

  _Unwind_Resume(a1);
}

uint64_t sub_1001ABCBC(uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
  v3 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v3;
    operator delete(v3);
  }
  return a1;
}

void sub_1001AC0A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;

  _Unwind_Resume(a1);
}

void sub_1001AC544(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;

  _Unwind_Resume(a1);
}

void sub_1001AC9F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  void *v18;
  void *v19;
  void *v20;
  void *v21;

  _Unwind_Resume(a1);
}

void sub_1001ACDA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  void *v21;

  _Unwind_Resume(a1);
}

void sub_1001AD2B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;

  _Unwind_Resume(a1);
}

void sub_1001AD570(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

void sub_1001AD834(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1001ADA50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1001ADEDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39)
{
  void *v39;
  void *v40;

  sub_10001AE68((uint64_t)&a13);
  if (a21 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1001AE1D0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1001AE868(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1001AECEC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1001AEFBC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id sub_1001AEFE0(uint64_t a1)
{
  void *v2;
  const __CFString *v3;
  void *v4;
  const __CFString *v5;
  void *v6;
  void *v7;
  _QWORD v9[4];
  _QWORD v10[4];

  v10[0] = &off_10082BFC8;
  v9[0] = CFSTR("numSessions");
  v9[1] = CFSTR("rangingDurationSecs");
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(a1 + 32)));
  v10[1] = v2;
  v9[2] = CFSTR("rangingReason");
  v3 = NIAcwgSessionTriggerReasonToString(*(_QWORD *)(a1 + 40));
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  v10[2] = v4;
  v9[3] = CFSTR("suspendReason");
  v5 = NIAcwgSuspendTriggerReasonToString(*(_QWORD *)(a1 + 48));
  v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  v10[3] = v6;
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v10, v9, 4));

  return v7;
}

void sub_1001AF0E8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1001AF44C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  void *v19;
  void *v20;

  _Unwind_Resume(a1);
}

void sub_1001AF664(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1001AF80C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1001AFBF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  void *v27;
  void *v28;
  void *v29;
  void *v30;

  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_1001AFD68(uint64_t a1)
{
  unsigned __int16 *WeakRetained;
  unsigned __int16 *v3;
  NSObject *v4;
  int v5;
  int v6;
  id v7;
  void *v8;
  NSObject *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  objc_super v13;
  uint8_t buf[4];
  _BYTE v15[10];
  void *v16;

  WeakRetained = (unsigned __int16 *)objc_loadWeakRetained((id *)(a1 + 40));
  v3 = WeakRetained;
  if (WeakRetained)
  {
    if (*(unsigned __int16 *)(a1 + 52) == WeakRetained[32])
    {
      v4 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
      {
        v5 = *(_DWORD *)(a1 + 48);
        v6 = *(unsigned __int16 *)(a1 + 52);
        *(_DWORD *)buf = 67109632;
        *(_DWORD *)v15 = v5;
        *(_WORD *)&v15[4] = 1024;
        *(_DWORD *)&v15[6] = v6;
        LOWORD(v16) = 1024;
        *(_DWORD *)((char *)&v16 + 2) = v6;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#ses-acwg,AopSensorFusionUpdate: update.type = %u, update.btConnHandle = 0x%04x (%u)", buf, 0x14u);
      }
      v13.receiver = *(id *)(a1 + 32);
      v13.super_class = (Class)NIServerAcwgSession;
      v7 = objc_msgSendSuper2(&v13, "resourcesManager");
      v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
      if (*(_DWORD *)(a1 + 48) == 1)
      {
        v9 = (id)qword_10085F520;
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        {
          v10 = *((_QWORD *)v3 + 7);
          v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*((id *)v3 + 42), "lockIdentifier"));
          *(_DWORD *)buf = 138412546;
          *(_QWORD *)v15 = v10;
          *(_WORD *)&v15[8] = 2112;
          v16 = v11;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#ses-acwg,Device stationary: Request suspending the session (c:%@, l:%@)", buf, 0x16u);

        }
        v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "remote"));
        objc_msgSend(v12, "requestAcwgRangingSessionSuspend:withSuspendTriggerReason:", sub_100305A2C(*((_QWORD *)v3 + 9)), 102);

      }
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
  {
    sub_1003D7654();
  }

}

void sub_1001AFF78(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1001B0210(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;

  if (a17 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1001B03FC(uint64_t a1, uint64_t a2)
{
  BOOL v4;
  uint64_t v5;

  if (*(unsigned __int8 *)(a1 + 64) == *(unsigned __int8 *)(a2 + 64))
  {
    if (*(_BYTE *)(a1 + 64))
      v4 = a1 == a2;
    else
      v4 = 1;
    if (!v4)
    {
      sub_1001B04E4((char *)a1, *(char **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 1);
      v5 = *(_QWORD *)(a2 + 24);
      *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
      *(_QWORD *)(a1 + 24) = v5;
      sub_10019E578((_QWORD *)(a1 + 40), *(char **)(a2 + 40), *(char **)(a2 + 48), *(_QWORD *)(a2 + 48) - *(_QWORD *)(a2 + 40));
    }
  }
  else if (*(_BYTE *)(a1 + 64))
  {
    sub_1001B049C(a1);
  }
  else
  {
    sub_1001B05E4(a1, a2);
    *(_BYTE *)(a1 + 64) = 1;
  }
}

void sub_1001B049C(uint64_t a1)
{
  void *v2;
  void *v3;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = *(void **)(a1 + 40);
    if (v2)
    {
      *(_QWORD *)(a1 + 48) = v2;
      operator delete(v2);
    }
    v3 = *(void **)a1;
    if (*(_QWORD *)a1)
    {
      *(_QWORD *)(a1 + 8) = v3;
      operator delete(v3);
    }
    *(_BYTE *)(a1 + 64) = 0;
  }
}

char *sub_1001B04E4(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  unint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (uint64_t)(v8 - *(_QWORD *)result) >> 1)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if ((a4 & 0x8000000000000000) != 0)
      sub_100026E7C();
    if (v8 <= a4)
      v10 = a4;
    else
      v10 = v8;
    if (v8 >= 0x7FFFFFFFFFFFFFFELL)
      v11 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = sub_1001A8D04(v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_17:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_19;
    }
    goto LABEL_20;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 1;
  if (v15 >= a4)
    goto LABEL_17;
  v16 = &__src[2 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_19:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_20:
  *v12 = &v9[v17];
  return result;
}

uint64_t sub_1001B05E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int16 v5;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  sub_1001B0668((_QWORD *)a1, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 1);
  v4 = *(_QWORD *)(a2 + 24);
  v5 = *(_WORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = 0;
  *(_WORD *)(a1 + 32) = v5;
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  sub_1001530EC((_QWORD *)(a1 + 40), *(const void **)(a2 + 40), *(_QWORD *)(a2 + 48), *(_QWORD *)(a2 + 48) - *(_QWORD *)(a2 + 40));
  return a1;
}

void sub_1001B064C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1001B0668(_QWORD *result, const void *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = sub_1001A8D04(result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1001B06C4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1001B06E0(uint64_t a1)
{
  void *v2;
  void *v3;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = *(void **)(a1 + 40);
    if (v2)
    {
      *(_QWORD *)(a1 + 48) = v2;
      operator delete(v2);
    }
    v3 = *(void **)a1;
    if (*(_QWORD *)a1)
    {
      *(_QWORD *)(a1 + 8) = v3;
      operator delete(v3);
    }
  }
  return a1;
}

void sub_1001B0728(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v4 = a1[2];
  v5 = a1[1];
  if (v4 == v5)
    v6 = 0;
  else
    v6 = ((v4 - v5) << 6) - 1;
  v7 = a1[5];
  v8 = v7 + a1[4];
  if (v6 == v8)
  {
    sub_1001B07AC(a1);
    v5 = a1[1];
    v7 = a1[5];
    v8 = a1[4] + v7;
  }
  *(_QWORD *)(*(_QWORD *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

void sub_1001B07AC(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x200;
  v4 = v2 - 512;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10005538C(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      sub_1001389D0(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    sub_100138AE4((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10005538C((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_10005538C((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  sub_100138C00(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_100138D14((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_1001B0A74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_1001B0AC0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10080B7A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1001B0AD0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10080B7A8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_1001B0B00(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_1001B0B10(_QWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;

  v4 = operator new(0x48uLL);
  sub_1001B0B70(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  sub_10001B020((uint64_t)a2, v4 + 4, (uint64_t)(v4 + 3));
}

void sub_1001B0B5C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1001B0B70(_QWORD *a1, _QWORD *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1007FA3F0;
  sub_1002A0F74(a1 + 3, *a2);
  return a1;
}

void sub_1001B0BA8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1001B0BBC(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v4 = a1[2];
  v5 = a1[1];
  if (v4 == v5)
    v6 = 0;
  else
    v6 = ((v4 - v5) << 6) - 1;
  v7 = a1[5];
  v8 = v7 + a1[4];
  if (v6 == v8)
  {
    sub_1001B0C40(a1);
    v5 = a1[1];
    v7 = a1[5];
    v8 = a1[4] + v7;
  }
  *(_QWORD *)(*(_QWORD *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

void sub_1001B0C40(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x200;
  v4 = v2 - 512;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10005538C(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      sub_1001389D0(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    sub_100138AE4((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10005538C((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_10005538C((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  sub_100138C00(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_100138D14((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_1001B0F08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_1001B0F54(_QWORD *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int v7;

  v3 = a1[1];
  v2 = a1[2];
  if (v2 == v3)
    v4 = 0;
  else
    v4 = ((v2 - v3) << 6) - 1;
  v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x200)
    a2 = 1;
  if (v5 < 0x400)
    v7 = a2;
  else
    v7 = 0;
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

void sub_1001B0FC0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10080B7F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1001B0FD0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10080B7F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_1001B1000(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_1001B1010(uint64_t a1)
{

  return a1;
}

void sub_1001B1038(uint64_t a1)
{

  operator delete();
}

_QWORD *sub_1001B1070(uint64_t a1)
{
  _QWORD *v2;

  v2 = operator new(0x10uLL);
  *v2 = off_10080B848;
  v2[1] = *(id *)(a1 + 8);
  return v2;
}

id sub_1001B10B4(uint64_t a1, _QWORD *a2)
{
  id result;

  *a2 = off_10080B848;
  result = *(id *)(a1 + 8);
  a2[1] = result;
  return result;
}

void sub_1001B10E8(uint64_t a1)
{

}

void sub_1001B10F0(id *a1)
{

  operator delete(a1);
}

void sub_1001B1118(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD block[6];
  int v10;

  v3 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(NSObject **)(v4 + 48);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1001B1210;
  block[3] = &unk_10080B8C0;
  v6 = *a3;
  block[4] = v4;
  block[5] = v6;
  v10 = *((_DWORD *)a3 + 2);
  dispatch_async(v5, block);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

uint64_t sub_1001B11C8(uint64_t a1, uint64_t a2)
{
  if (sub_10003E27C(a2, (uint64_t)&off_10080B8E0))
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_1001B1204()
{
  return &off_10080B8E0;
}

id sub_1001B1210(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "serviceRequestDidUpdateStatus:", *(_QWORD *)(a1 + 40), *(unsigned int *)(a1 + 48));
}

uint64_t sub_1001B1220(uint64_t a1)
{

  return a1;
}

void sub_1001B1248(uint64_t a1)
{

  operator delete();
}

_QWORD *sub_1001B1280(uint64_t a1)
{
  _QWORD *v2;

  v2 = operator new(0x10uLL);
  *v2 = off_10080B900;
  v2[1] = *(id *)(a1 + 8);
  return v2;
}

id sub_1001B12C4(uint64_t a1, _QWORD *a2)
{
  id result;

  *a2 = off_10080B900;
  result = *(id *)(a1 + 8);
  a2[1] = result;
  return result;
}

void sub_1001B12F8(uint64_t a1)
{

}

void sub_1001B1300(id *a1)
{

  operator delete(a1);
}

void sub_1001B1328(uint64_t a1, _QWORD *a2, int *a3)
{
  std::__shared_weak_count *v3;
  int v4;
  uint64_t v5;
  NSObject *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v9[5];
  int v10;

  v3 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  v4 = *a3;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(NSObject **)(v5 + 48);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_1001B141C;
  v9[3] = &unk_10080B978;
  v9[4] = v5;
  v10 = v4;
  dispatch_async(v6, v9);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

uint64_t sub_1001B13D4(uint64_t a1, uint64_t a2)
{
  if (sub_10003E27C(a2, (uint64_t)&off_10080B998))
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_1001B1410()
{
  return &off_10080B998;
}

id sub_1001B141C(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_alishaSessionInvalidatedWithReason:", *(unsigned int *)(a1 + 40));
}

uint64_t sub_1001B142C(uint64_t a1)
{

  return a1;
}

void sub_1001B1454(uint64_t a1)
{

  operator delete();
}

_QWORD *sub_1001B148C(uint64_t a1)
{
  _QWORD *v2;

  v2 = operator new(0x10uLL);
  *v2 = off_10080B9B8;
  v2[1] = *(id *)(a1 + 8);
  return v2;
}

id sub_1001B14D0(uint64_t a1, _QWORD *a2)
{
  id result;

  *a2 = off_10080B9B8;
  result = *(id *)(a1 + 8);
  a2[1] = result;
  return result;
}

void sub_1001B1504(uint64_t a1)
{

}

void sub_1001B150C(id *a1)
{

  operator delete(a1);
}

void sub_1001B1534(uint64_t a1, _QWORD *a2, __int128 *a3)
{
  std::__shared_weak_count *v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  _QWORD block[5];
  __int128 v13;
  _OWORD v14[2];
  void *v15;
  void *v16;
  uint64_t v17;
  _QWORD v18[2];
  void *__p;
  void *v20;
  uint64_t v21;
  __int128 v22;
  _OWORD v23[2];
  void *v24;
  _BYTE *v25;
  uint64_t v26;
  _QWORD v27[2];
  void *v28;
  _BYTE *v29;
  uint64_t v30;

  v5 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  v6 = a3[1];
  v22 = *a3;
  v23[0] = v6;
  *(_OWORD *)((char *)v23 + 11) = *(__int128 *)((char *)a3 + 27);
  v25 = 0;
  v26 = 0;
  v24 = 0;
  sub_1001B19CC(&v24, *((const void **)a3 + 6), *((_QWORD *)a3 + 7), *((_QWORD *)a3 + 7) - *((_QWORD *)a3 + 6));
  v7 = *(_QWORD *)((char *)a3 + 77);
  v27[0] = *((_QWORD *)a3 + 9);
  *(_QWORD *)((char *)v27 + 5) = v7;
  v28 = 0;
  v29 = 0;
  v30 = 0;
  sub_1001B1A44(&v28, *((const void **)a3 + 11), *((_QWORD *)a3 + 12), (uint64_t)(*((_QWORD *)a3 + 12) - *((_QWORD *)a3 + 11)) >> 4);
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(NSObject **)(v8 + 48);
  block[1] = 3321888768;
  v13 = v22;
  block[0] = _NSConcreteStackBlock;
  block[2] = sub_1001B17BC;
  block[3] = &unk_10080BA30;
  block[4] = v8;
  v14[0] = v23[0];
  *(_OWORD *)((char *)v14 + 11) = *(_OWORD *)((char *)v23 + 11);
  v16 = 0;
  v17 = 0;
  v15 = 0;
  sub_1001B19CC(&v15, v24, (uint64_t)v25, v25 - (_BYTE *)v24);
  v18[0] = v27[0];
  *(_QWORD *)((char *)v18 + 5) = *(_QWORD *)((char *)v27 + 5);
  __p = 0;
  v20 = 0;
  v21 = 0;
  sub_1001B1A44(&__p, v28, (uint64_t)v29, (v29 - (_BYTE *)v28) >> 4);
  dispatch_async(v9, block);
  if (__p)
  {
    v20 = __p;
    operator delete(__p);
  }
  if (v15)
  {
    v16 = v15;
    operator delete(v15);
  }
  if (v28)
  {
    v29 = v28;
    operator delete(v28);
  }
  if (v24)
  {
    v25 = v24;
    operator delete(v24);
  }
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_1001B16EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41)
{
  std::__shared_weak_count *v41;
  unint64_t *p_shared_owners;
  unint64_t v44;

  if (__p)
    operator delete(__p);
  if (a40)
    operator delete(a40);
  if (a35)
    operator delete(a35);
  if (v41)
  {
    p_shared_owners = (unint64_t *)&v41->__shared_owners_;
    do
      v44 = __ldaxr(p_shared_owners);
    while (__stlxr(v44 - 1, p_shared_owners));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1001B1774(uint64_t a1, uint64_t a2)
{
  if (sub_10003E27C(a2, (uint64_t)&off_10080BA60))
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_1001B17B0()
{
  return &off_10080BA60;
}

void sub_1001B17BC(uint64_t a1)
{
  void *v2;
  __int128 v3;
  uint64_t v4;
  __int128 v5;
  _OWORD v6[2];
  void *v7;
  void *v8;
  uint64_t v9;
  _QWORD v10[2];
  void *__p;
  void *v12;
  uint64_t v13;

  v2 = *(void **)(a1 + 32);
  v3 = *(_OWORD *)(a1 + 56);
  v5 = *(_OWORD *)(a1 + 40);
  v6[0] = v3;
  *(_OWORD *)((char *)v6 + 11) = *(_OWORD *)(a1 + 67);
  v8 = 0;
  v9 = 0;
  v7 = 0;
  sub_1001B19CC(&v7, *(const void **)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 96) - *(_QWORD *)(a1 + 88));
  v4 = *(_QWORD *)(a1 + 117);
  v10[0] = *(_QWORD *)(a1 + 112);
  *(_QWORD *)((char *)v10 + 5) = v4;
  __p = 0;
  v12 = 0;
  v13 = 0;
  sub_1001B1A44(&__p, *(const void **)(a1 + 128), *(_QWORD *)(a1 + 136), (uint64_t)(*(_QWORD *)(a1 + 136) - *(_QWORD *)(a1 + 128)) >> 4);
  objc_msgSend(v2, "_handleInitiatorRangingBlockUpdate:", &v5);
  if (__p)
  {
    v12 = __p;
    operator delete(__p);
  }
  if (v7)
  {
    v8 = v7;
    operator delete(v7);
  }
}

void sub_1001B1874(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  sub_1001B18A0(&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_1001B18A0(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[11];
  if (v2)
  {
    a1[12] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[6];
  if (v3)
  {
    a1[7] = v3;
    operator delete(v3);
  }
  return a1;
}

_QWORD *sub_1001B18E0(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_OWORD *)(a2 + 40);
  v5 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 67) = *(_OWORD *)(a2 + 67);
  *(_OWORD *)(a1 + 56) = v5;
  *(_QWORD *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 40) = v4;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  sub_1001B19CC((_QWORD *)(a1 + 88), *(const void **)(a2 + 88), *(_QWORD *)(a2 + 96), *(_QWORD *)(a2 + 96) - *(_QWORD *)(a2 + 88));
  v6 = *(_QWORD *)(a2 + 112);
  v7 = *(_QWORD *)(a2 + 117);
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 117) = v7;
  *(_QWORD *)(a1 + 112) = v6;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  return sub_1001B1A44((_QWORD *)(a1 + 128), *(const void **)(a2 + 128), *(_QWORD *)(a2 + 136), (uint64_t)(*(_QWORD *)(a2 + 136) - *(_QWORD *)(a2 + 128)) >> 4);
}

void sub_1001B196C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 96) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void sub_1001B1988(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[16];
  if (v2)
  {
    a1[17] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[11];
  if (v3)
  {
    a1[12] = v3;
    operator delete(v3);
  }
}

_QWORD *sub_1001B19CC(_QWORD *result, const void *a2, uint64_t a3, size_t __sz)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (__sz)
  {
    v6 = result;
    result = sub_10002D7AC(result, __sz);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1001B1A28(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1001B1A44(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = sub_10013C84C(result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1001B1AA0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1001B1ABC(uint64_t a1)
{

  return a1;
}

void sub_1001B1AE4(uint64_t a1)
{

  operator delete();
}

_QWORD *sub_1001B1B1C(uint64_t a1)
{
  _QWORD *v2;

  v2 = operator new(0x10uLL);
  *v2 = off_10080BA80;
  v2[1] = *(id *)(a1 + 8);
  return v2;
}

id sub_1001B1B60(uint64_t a1, _QWORD *a2)
{
  id result;

  *a2 = off_10080BA80;
  result = *(id *)(a1 + 8);
  a2[1] = result;
  return result;
}

void sub_1001B1B94(uint64_t a1)
{

}

void sub_1001B1B9C(id *a1)
{

  operator delete(a1);
}

void sub_1001B1BC4(uint64_t a1, uint64_t *a2)
{
  const void *v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  _QWORD block[6];
  void *__p;
  void *v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  _BYTE *v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;

  v5 = *a2;
  v4 = (const void *)a2[1];
  v14 = v5;
  v15 = 0;
  v16 = 0;
  v17 = 0;
  sub_1001B0668(&v15, v4, a2[2], (a2[2] - (uint64_t)v4) >> 1);
  v19 = a2[6];
  v18 = *((_OWORD *)a2 + 2);
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(NSObject **)(v6 + 48);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3321888768;
  block[2] = sub_1001B1D30;
  block[3] = &unk_10080BAF8;
  block[4] = v6;
  block[5] = v14;
  v10 = 0;
  v11 = 0;
  __p = 0;
  sub_1001B0668(&__p, v15, (uint64_t)v16, (v16 - (_BYTE *)v15) >> 1);
  v12 = v18;
  v13 = v19;
  dispatch_async(v7, block);
  if (__p)
  {
    v10 = __p;
    operator delete(__p);
  }
  if (v15)
  {
    v16 = v15;
    operator delete(v15);
  }
}

void sub_1001B1CCC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 - 80);
  if (v3)
  {
    *(_QWORD *)(v1 - 72) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1001B1CE8(uint64_t a1, uint64_t a2)
{
  if (sub_10003E27C(a2, (uint64_t)&off_10080BB28))
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_1001B1D24()
{
  return &off_10080BB28;
}

void sub_1001B1D30(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *__p;
  void *v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;

  v2 = *(void **)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  __p = 0;
  v5 = 0;
  v6 = 0;
  sub_1001B0668(&__p, *(const void **)(a1 + 48), *(_QWORD *)(a1 + 56), (uint64_t)(*(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 48)) >> 1);
  v7 = *(_OWORD *)(a1 + 72);
  v8 = *(_QWORD *)(a1 + 88);
  objc_msgSend(v2, "_handleSessionStats:", &v3);
  if (__p)
  {
    v5 = __p;
    operator delete(__p);
  }
}

void sub_1001B1DA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

__n128 sub_1001B1DC0(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  __n128 result;

  v3 = *(_QWORD *)(a2 + 40);
  a1[6] = 0;
  v4 = a1 + 6;
  a1[5] = v3;
  a1[7] = 0;
  a1[8] = 0;
  sub_1001B0668(a1 + 6, *(const void **)(a2 + 48), *(_QWORD *)(a2 + 56), (uint64_t)(*(_QWORD *)(a2 + 56) - *(_QWORD *)(a2 + 48)) >> 1);
  result = *(__n128 *)(a2 + 72);
  v4[5] = *(_QWORD *)(a2 + 88);
  *(__n128 *)(v4 + 3) = result;
  return result;
}

void sub_1001B1E18(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

uint64_t sub_1001B1E30(uint64_t a1)
{

  return a1;
}

void sub_1001B1E58(uint64_t a1)
{

  operator delete();
}

_QWORD *sub_1001B1E90(uint64_t a1)
{
  _QWORD *v2;

  v2 = operator new(0x10uLL);
  *v2 = off_10080BB48;
  v2[1] = *(id *)(a1 + 8);
  return v2;
}

id sub_1001B1ED4(uint64_t a1, _QWORD *a2)
{
  id result;

  *a2 = off_10080BB48;
  result = *(id *)(a1 + 8);
  a2[1] = result;
  return result;
}

void sub_1001B1F08(uint64_t a1)
{

}

void sub_1001B1F10(id *a1)
{

  operator delete(a1);
}

void sub_1001B1F38(uint64_t a1, int *a2)
{
  int v2;
  uint64_t v3;
  NSObject *v4;
  _QWORD v5[5];
  int v6;

  v2 = *a2;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(NSObject **)(v3 + 48);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1001B1FE8;
  v5[3] = &unk_10080B978;
  v5[4] = v3;
  v6 = v2;
  dispatch_async(v4, v5);
}

uint64_t sub_1001B1FA0(uint64_t a1, uint64_t a2)
{
  if (sub_10003E27C(a2, (uint64_t)&off_10080BBB8))
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_1001B1FDC()
{
  return &off_10080BBB8;
}

id sub_1001B1FE8(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_handleHealthChanged:", *(unsigned int *)(a1 + 40));
}

uint64_t sub_1001B1FF8(uint64_t a1)
{

  return a1;
}

void sub_1001B2020(uint64_t a1)
{

  operator delete();
}

_QWORD *sub_1001B2058(uint64_t a1)
{
  _QWORD *v2;

  v2 = operator new(0x10uLL);
  *v2 = off_10080BBD8;
  v2[1] = *(id *)(a1 + 8);
  return v2;
}

id sub_1001B209C(uint64_t a1, _QWORD *a2)
{
  id result;

  *a2 = off_10080BBD8;
  result = *(id *)(a1 + 8);
  a2[1] = result;
  return result;
}

void sub_1001B20D0(uint64_t a1)
{

}

void sub_1001B20D8(id *a1)
{

  operator delete(a1);
}

void sub_1001B2100(uint64_t a1, int *a2, uint64_t *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  _QWORD block[6];
  int v8;

  v3 = *a2;
  v4 = *a3;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(NSObject **)(v5 + 48);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1001B21B8;
  block[3] = &unk_10080B8C0;
  block[4] = v5;
  v8 = v3;
  block[5] = v4;
  dispatch_async(v6, block);
}

uint64_t sub_1001B2170(uint64_t a1, uint64_t a2)
{
  if (sub_10003E27C(a2, (uint64_t)&off_10080BC48))
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_1001B21AC()
{
  return &off_10080BC48;
}

id sub_1001B21B8(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_handleTimeoutEvent:time:", *(unsigned int *)(a1 + 48), *(double *)(a1 + 40));
}

_QWORD *sub_1001B21CC@<X0>(char *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x30uLL);
  result = sub_1001B2224(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1001B2210(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1001B2224(_QWORD *a1, char *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_10080BC68;
  sub_1001B22C0((uint64_t)(a1 + 3), *a2);
  return a1;
}

void sub_1001B225C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1001B2270(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10080BC68;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1001B2280(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10080BC68;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_1001B22B0(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_1001B22C0(uint64_t a1, char a2)
{
  int v4;
  double v5;

  *(_QWORD *)a1 = off_10080BCB8;
  v4 = sub_1002F7114(CFSTR("AcwgMinRanMultiplierOverride"), (id)3);
  if (v4 <= 0)
    sub_1003D76F0();
  if (v4 >= 0x100)
    sub_1003D7718();
  *(_BYTE *)(a1 + 8) = v4;
  v5 = 3.0;
  if ((a2 & 1) == 0)
  {
    v5 = sub_1002F73E4(CFSTR("AcwgStartTimeOffsetSeconds"), 0.1);
    if (v5 <= 0.0)
      sub_1003D7740();
  }
  *(_QWORD *)(a1 + 16) = llround(v5 * 1000000.0);
  return a1;
}

void sub_1001B235C()
{
  operator delete();
}

_WORD *sub_1001B2370@<X0>(_QWORD *a1@<X8>)
{
  _WORD *v2;
  _WORD *result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = operator new(2uLL);
  *a1 = v2;
  *v2 = 256;
  result = v2 + 1;
  a1[1] = result;
  a1[2] = result;
  return result;
}

void sub_1001B23AC(_QWORD *a1@<X8>)
{
  void *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  _BOOL4 v7;
  unint64_t *v8;
  unint64_t v9;
  BOOL v10;
  _BYTE *v11;
  _BYTE *v12;
  int v13;
  _BYTE *v14;
  BOOL v15;
  _BYTE *v16;
  __int16 v17;
  char v18;

  v17 = 0;
  v2 = sub_1002CA108();
  v3 = *((_QWORD *)v2 + 406);
  v4 = (std::__shared_weak_count *)*((_QWORD *)v2 + 407);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v18 = 0;
  v7 = sub_1002A4728(v3, &v18, (unsigned __int8 *)&v17, 0);
  if (v4)
  {
    v8 = (unint64_t *)&v4->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (v7)
  {
    v10 = v18 != 5;
    v11 = operator new(1uLL);
    *v11 = v10;
    a1[1] = v11 + 1;
    a1[2] = v11 + 1;
    *a1 = v11;
    if (HIBYTE(v17))
    {
      v12 = v11;
      v13 = v17;
      v14 = operator new(2uLL);
      v15 = v13 != 5;
      v16 = v14 + 2;
      v14[1] = v15;
      *v14 = *v12;
      *a1 = v14;
      a1[2] = v14 + 2;
      operator delete(v12);
      a1[1] = v16;
    }
  }
}

void sub_1001B24C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  void *v12;

  v12 = *(void **)v10;
  if (*(_QWORD *)v10)
  {
    *(_QWORD *)(v10 + 8) = v12;
    operator delete(v12);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_1001B24F4(uint64_t a1, unsigned int a2)
{
  void *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  unsigned int v7;
  std::string *v8;
  __int128 v9;
  std::string *v10;
  __int128 v11;
  std::string *v12;
  std::string::size_type size;
  std::string *v14;
  __int128 v15;
  std::string *v16;
  __int128 v17;
  uint8_t *v18;
  std::string::size_type v19;
  uint64_t *v20;
  uint64_t *v21;
  BOOL v22;
  NSObject *v23;
  std::string *v24;
  uint64_t v25;
  int v26;
  unsigned __int8 v27;
  int v28;
  unsigned __int8 v29;
  unsigned int v30;
  int v31;
  unsigned __int16 v32;
  std::string::value_type v33;
  char v34;
  uint64_t **v35;
  BOOL v36;
  uint64_t v37;
  NSObject *v38;
  unint64_t v39;
  unsigned int v41;
  std::string v42;
  std::string v43;
  std::string v44;
  std::string v45;
  std::string v46;
  std::string v47;
  uint64_t *v48;
  _QWORD *v49[2];
  uint8_t buf[16];
  int64_t v51;
  _QWORD v52[3];
  _QWORD *v53;

  v49[0] = 0;
  v49[1] = 0;
  v48 = (uint64_t *)v49;
  v3 = sub_1002CA108();
  v52[0] = off_10080BD28;
  v52[1] = &v48;
  v53 = v52;
  sub_1002CE1AC((uint64_t)v3, (uint64_t)v52);
  v4 = v53;
  if (v53 == v52)
  {
    v5 = 4;
    v4 = v52;
  }
  else
  {
    if (!v53)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  sub_10000BF04(&v47, "\n");
  v6 = v48;
  if (v48 != (uint64_t *)v49)
  {
    do
    {
      v7 = *(_DWORD *)((char *)v6 + 26);
      sub_10036B730(v7);
      v8 = std::string::insert(&v43, 0, "    ");
      v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
      v44.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v9;
      v8->__r_.__value_.__l.__size_ = 0;
      v8->__r_.__value_.__r.__words[2] = 0;
      v8->__r_.__value_.__r.__words[0] = 0;
      v10 = std::string::append(&v44, ": ");
      v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
      v45.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v11;
      v10->__r_.__value_.__l.__size_ = 0;
      v10->__r_.__value_.__r.__words[2] = 0;
      v10->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v42, HIWORD(v7));
      if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v12 = &v42;
      else
        v12 = (std::string *)v42.__r_.__value_.__r.__words[0];
      if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v42.__r_.__value_.__r.__words[2]);
      else
        size = v42.__r_.__value_.__l.__size_;
      v14 = std::string::append(&v45, (const std::string::value_type *)v12, size);
      v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v15;
      v14->__r_.__value_.__l.__size_ = 0;
      v14->__r_.__value_.__r.__words[2] = 0;
      v14->__r_.__value_.__r.__words[0] = 0;
      v16 = std::string::append(&v46, "\n");
      v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
      v51 = v16->__r_.__value_.__r.__words[2];
      *(_OWORD *)buf = v17;
      v16->__r_.__value_.__l.__size_ = 0;
      v16->__r_.__value_.__r.__words[2] = 0;
      v16->__r_.__value_.__r.__words[0] = 0;
      if (v51 >= 0)
        v18 = buf;
      else
        v18 = *(uint8_t **)buf;
      if (v51 >= 0)
        v19 = HIBYTE(v51);
      else
        v19 = *(_QWORD *)&buf[8];
      std::string::append(&v47, (const std::string::value_type *)v18, v19);
      if (SHIBYTE(v51) < 0)
        operator delete(*(void **)buf);
      if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v46.__r_.__value_.__l.__data_);
      if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v42.__r_.__value_.__l.__data_);
      if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v45.__r_.__value_.__l.__data_);
      if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v44.__r_.__value_.__l.__data_);
      if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v43.__r_.__value_.__l.__data_);
      v20 = (uint64_t *)v6[1];
      if (v20)
      {
        do
        {
          v21 = v20;
          v20 = (uint64_t *)*v20;
        }
        while (v20);
      }
      else
      {
        do
        {
          v21 = (uint64_t *)v6[2];
          v22 = *v21 == (_QWORD)v6;
          v6 = v21;
        }
        while (!v22);
      }
      v6 = v21;
    }
    while (v21 != (uint64_t *)v49);
  }
  v23 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    v24 = &v47;
    if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v24 = (std::string *)v47.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v24;
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "#ses-acwg,Preamble use counts: {%s}", buf, 0xCu);
  }
  v25 = 4294965278;
  if (a2)
  {
    v26 = 0;
    v27 = 0;
    v28 = 0;
    v29 = 0;
    v30 = a2;
    v31 = 0;
    v32 = 0;
    v33 = 1;
    v41 = v30;
    do
    {
      if ((v30 & 1) != 0)
      {
        switch(v33)
        {
          case 9:
            v34 = 0;
            goto LABEL_49;
          case 10:
            v34 = 1;
            goto LABEL_49;
          case 11:
            v34 = 2;
            goto LABEL_49;
          case 12:
            v34 = 3;
LABEL_49:
            v45.__r_.__value_.__s.__data_[0] = v33;
            *(_QWORD *)buf = &v45;
            v35 = sub_1001B2D60(&v48, (unsigned __int8 *)&v45, (uint64_t)&unk_100472CF8, (_BYTE **)buf);
            if (!v31 || *((unsigned __int16 *)v35 + 14) < v32)
            {
              v31 = 1;
              v32 = *((_WORD *)v35 + 14);
              v29 = v34;
              v28 = 1;
              v27 = v33;
              v26 = 1;
            }
            break;
          default:
            break;
        }
      }
      ++v33;
      v36 = v30 > 1;
      v30 >>= 1;
    }
    while (v36);
    v37 = 0;
    if (v26 && v28 && v31)
    {
      v38 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109632;
        *(_DWORD *)&buf[4] = v41;
        *(_WORD *)&buf[8] = 1024;
        *(_DWORD *)&buf[10] = v27;
        *(_WORD *)&buf[14] = 1024;
        LODWORD(v51) = v32;
        _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "#ses-acwg,Sync code bitmask 0x%x. Preferred sync code index %u. Current use count %u.", buf, 0x14u);
      }
      v25 = 0;
      v39 = (unint64_t)v27 << 32;
      v37 = 0x1000000000000;
    }
    else
    {
      v39 = 0;
      v25 = 4294965278;
    }
  }
  else
  {
    v29 = 0;
    v37 = 0;
    v39 = 0;
  }
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v47.__r_.__value_.__l.__data_);
  sub_10003E3F0((uint64_t)&v48, v49[0]);
  return v25 | ((unint64_t)v29 << 40) | v37 | v39;
}

void sub_1001B299C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,void *__p,uint64_t a45,int a46,__int16 a47,char a48,char a49,char a50,_QWORD *a51)
{
  sub_10003E3F0((uint64_t)&a50, a51);
  _Unwind_Resume(a1);
}

uint64_t sub_1001B2A98(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

uint64_t sub_1001B2AA0(uint64_t a1, _BYTE *a2)
{
  uint64_t v2;
  void *v3;
  unint64_t v4;
  char v5;
  BOOL v6;
  BOOL v7;
  NSObject *v9;
  uint8_t v11[16];

  v2 = *(_QWORD *)(a1 + 16);
  if (!*a2)
  {
    v3 = sub_1002CA108();
    v4 = sub_1002CCBE8((uint64_t)v3);
    v6 = HIWORD(v4) != 1 || (v4 & 0xFF00) == 0;
    v7 = v6 || v4 == 0;
    if (!v7 && v5 != 0)
    {
      v9 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v11 = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#ses-acwg,Applying additional start time offset for Ch5 coex", v11, 2u);
      }
      v2 += 50000;
    }
  }
  return v2;
}

void sub_1001B2B4C()
{
  operator delete();
}

_QWORD *sub_1001B2B60(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10080BD28;
  result[1] = v3;
  return result;
}

uint64_t sub_1001B2B94(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10080BD28;
  a2[1] = v2;
  return result;
}

void sub_1001B2BB0(uint64_t a1, uint64_t a2)
{
  sub_1001B2C00((uint64_t ***)(a1 + 8), a2);
}

uint64_t sub_1001B2BB8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1001B2BF4()
{
}

void sub_1001B2C00(uint64_t ***a1, uint64_t a2)
{
  uint64_t **v3;
  uint64_t **v4;
  NSObject *v5;
  unsigned __int8 v6;
  _BYTE buf[12];
  __int16 v8;
  int v9;
  __int16 v10;
  const char *v11;

  if (*(_BYTE *)(a2 + 105))
  {
    v6 = *(_BYTE *)(a2 + 104);
    if (!sub_10036B59C(v6))
    {
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_FAULT))
        sub_1003D7794();
      v5 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/Proximity/Daemon/Services/NearbyInteraction/Session/N"
                             "IServerAcwgSession.mm";
        v8 = 1024;
        v9 = 186;
        v10 = 2080;
        v11 = "operator()";
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "#ses-acwg,%s:%d: assertion failure in %s", buf, 0x1Cu);
      }
      abort();
    }
    v3 = *a1;
    *(_QWORD *)buf = &v6;
    v4 = sub_1001B2D60(v3, &v6, (uint64_t)&unk_100472CF8, (_BYTE **)buf);
    ++*((_WORD *)v4 + 14);
  }
  else if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_FAULT))
  {
    sub_1003D7768();
  }
}

uint64_t **sub_1001B2D60(uint64_t **a1, unsigned __int8 *a2, uint64_t a3, _BYTE **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unsigned int v8;
  uint64_t **v9;
  unsigned int v10;
  _BYTE *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *((unsigned __int8 *)v6 + 26);
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = operator new(0x20uLL);
    v11[26] = **a4;
    *((_WORD *)v11 + 14) = 0;
    sub_1000272A8(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

void sub_1001B2E20(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10080BDB8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1001B2E30(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10080BDB8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_1001B2E60(uint64_t a1)
{
  char v2;

  return sub_1001B2F28((uint64_t)&v2, (_QWORD *)(a1 + 24));
}

void sub_1001B2E8C()
{
  operator delete();
}

_QWORD *sub_1001B2EA0()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_10080BE08;
  return result;
}

void sub_1001B2EC4(uint64_t a1, _QWORD *a2)
{
  *a2 = off_10080BE08;
}

uint64_t sub_1001B2EE0(uint64_t a1, uint64_t a2)
{
  if (sub_10003E27C(a2, (uint64_t)&off_10080BE78))
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_1001B2F1C()
{
  return &off_10080BE78;
}

uint64_t sub_1001B2F28(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  void *v6;

  v3 = (_QWORD *)a2[16];
  if (v3 == a2 + 13)
  {
    v4 = 4;
    v3 = a2 + 13;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = (void *)a2[9];
  if (v5)
  {
    a2[10] = v5;
    operator delete(v5);
  }
  v6 = (void *)a2[4];
  if (v6)
  {
    a2[5] = v6;
    operator delete(v6);
  }
  sub_10001AE68((uint64_t)(a2 + 2));
  return sub_10001AE68((uint64_t)a2);
}

void sub_1001B2FA0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10080BE98;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1001B2FB0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10080BE98;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_1001B2FE0(uint64_t a1)
{
  return sub_100304DE8(a1 + 24);
}

uint64_t sub_1001B2FEC(uint64_t a1)
{

  return a1;
}

void sub_1001B3014(uint64_t a1)
{

  operator delete();
}

_QWORD *sub_1001B304C(uint64_t a1)
{
  _QWORD *v2;

  v2 = operator new(0x10uLL);
  *v2 = off_10080BEE8;
  v2[1] = *(id *)(a1 + 8);
  return v2;
}

id sub_1001B3090(uint64_t a1, _QWORD *a2)
{
  id result;

  *a2 = off_10080BEE8;
  result = *(id *)(a1 + 8);
  a2[1] = result;
  return result;
}

void sub_1001B30C4(uint64_t a1)
{

}

void sub_1001B30CC(id *a1)
{

  operator delete(a1);
}

void sub_1001B30F4(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  id *v6;
  void *v7;
  void *v8;
  double v9;
  void *v10;
  uint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  __int128 v20;
  int v21;
  _QWORD v22[3];
  char v23;
  unsigned __int8 v24[36];
  _BYTE v25[504];

  dispatch_assert_queue_V2(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 8) + 48));
  v6 = *(id **)(a1 + 8);
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6[42], "debugOptions"));
  objc_msgSend(v6, "_ownerDeviceServiceRequestDebugParams:", v7);

  v8 = *(void **)(a1 + 8);
  if (v8)
  {
    objc_msgSend(v8, "_aopJobConfigWithTimeouts");
  }
  else
  {
    memset(v22, 0, sizeof(v22));
    v23 = 0;
  }
  v20 = *a2;
  v21 = *((_DWORD *)a2 + 4);
  if ((sub_1002F7290(CFSTR("ACWGEnableMacModeVariant"), 0) & 1) == 0 && BYTE2(v21))
    BYTE2(v21) = 0;
  *(_QWORD *)&v9 = sub_100164520((int *)&v20, 106, (uint64_t)v22, v24, (uint64_t)v25).n128_u64[0];
  v10 = *(void **)(a1 + 8);
  if (v10)
  {
    objc_msgSend(v10, "_buildAlishaSession:", v25, v9);
    if (v18)
    {
      v11 = v18 + 8;
      if (v19)
      {
        p_shared_owners = (unint64_t *)&v19->__shared_owners_;
        do
          v13 = __ldxr(p_shared_owners);
        while (__stxr(v13 + 1, p_shared_owners));
        *(_DWORD *)a3 = 0;
        *(_QWORD *)(a3 + 8) = v11;
        *(_QWORD *)(a3 + 16) = v19;
        do
          v14 = __ldxr(p_shared_owners);
        while (__stxr(v14 + 1, p_shared_owners));
        *(_BYTE *)(a3 + 24) = 1;
        do
          v15 = __ldaxr(p_shared_owners);
        while (__stlxr(v15 - 1, p_shared_owners));
        if (!v15)
        {
          ((void (*)())v19->__on_zero_shared)();
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      else
      {
        *(_DWORD *)a3 = 0;
        *(_QWORD *)(a3 + 8) = v11;
        *(_QWORD *)(a3 + 16) = 0;
        *(_BYTE *)(a3 + 24) = 1;
      }
      goto LABEL_22;
    }
  }
  else
  {
    v19 = 0;
  }
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
    sub_1003D77C0();
  *(_DWORD *)a3 = -1013;
  *(_BYTE *)(a3 + 8) = 0;
  *(_BYTE *)(a3 + 24) = 0;
LABEL_22:
  if (v19)
  {
    v16 = (unint64_t *)&v19->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
}

void sub_1001B3318(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1001B3330(uint64_t a1, uint64_t a2)
{
  if (sub_10003E27C(a2, (uint64_t)&off_10080BF58))
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_1001B336C()
{
  return &off_10080BF58;
}

uint64_t sub_1001B3378(uint64_t a1)
{

  return a1;
}

void sub_1001B33A0(uint64_t a1)
{

  operator delete();
}

_QWORD *sub_1001B33D8(uint64_t a1)
{
  _QWORD *v2;

  v2 = operator new(0x10uLL);
  *v2 = off_10080BF78;
  v2[1] = *(id *)(a1 + 8);
  return v2;
}

id sub_1001B341C(uint64_t a1, _QWORD *a2)
{
  id result;

  *a2 = off_10080BF78;
  result = *(id *)(a1 + 8);
  a2[1] = result;
  return result;
}

void sub_1001B3450(uint64_t a1)
{

}

void sub_1001B3458(id *a1)
{

  operator delete(a1);
}

id sub_1001B3480(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *a2;
  v5 = *a3;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 8) + 48));
  return _objc_msgSend(*(id *)(a1 + 8), "_alishaStateChangedFromState:toNewState:", v4, v5);
}

uint64_t sub_1001B34CC(uint64_t a1, uint64_t a2)
{
  if (sub_10003E27C(a2, (uint64_t)&off_10080BFE8))
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_1001B3508()
{
  return &off_10080BFE8;
}

void sub_1001B3514(unint64_t *a1@<X8>)
{
  unint64_t v1;

  v1 = __ldaxr(a1);
  __stlxr(v1 - 1, a1);
}

uint64_t sub_1001B3524()
{
  uint64_t v0;

  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v0 + 16))(v0);
}

void sub_1001B3544()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_100850448);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_100850448))
    {
      sub_10000BF04(qword_100850430, "PRRoseProviderNetworkListener");
      __cxa_atexit((void (*)(void *))&std::string::~string, qword_100850430, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_100850448);
    }
  }
}

void sub_1001B35C0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_100850448);
  _Unwind_Resume(a1);
}

void sub_1001B35D8()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_100850468);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_100850468))
    {
      sub_10000BF04(&qword_100850450, "com.apple.nearbyd.accessory.download");
      __cxa_atexit((void (*)(void *))&std::string::~string, &qword_100850450, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_100850468);
    }
  }
}

void sub_1001B3654(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_100850468);
  _Unwind_Resume(a1);
}

void sub_1001B366C()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_100850488);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_100850488))
    {
      sub_10000BF04(&qword_100850470, "com.apple.nearbyd.accessory.files");
      __cxa_atexit((void (*)(void *))&std::string::~string, &qword_100850470, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_100850488);
    }
  }
}

void sub_1001B36E8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_100850488);
  _Unwind_Resume(a1);
}

void sub_1001B3700()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_1008504A8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1008504A8))
    {
      sub_10000BF04(qword_100850490, "MA_");
      __cxa_atexit((void (*)(void *))&std::string::~string, qword_100850490, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1008504A8);
    }
  }
}

void sub_1001B377C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1008504A8);
  _Unwind_Resume(a1);
}

void sub_1001B3794()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_1008504C8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1008504C8))
    {
      sub_10000BF04(qword_1008504B0, "MB_");
      __cxa_atexit((void (*)(void *))&std::string::~string, qword_1008504B0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1008504C8);
    }
  }
}

void sub_1001B3810(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1008504C8);
  _Unwind_Resume(a1);
}

void sub_1001B3828()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_1008504E8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1008504E8))
    {
      sub_10000BF04(qword_1008504D0, "D");
      __cxa_atexit((void (*)(void *))&std::string::~string, qword_1008504D0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1008504E8);
    }
  }
}

void sub_1001B38A4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1008504E8);
  _Unwind_Resume(a1);
}

void sub_1001B38BC()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_100850508);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_100850508))
    {
      sub_10000BF04(&qword_1008504F0, "A");
      __cxa_atexit((void (*)(void *))&std::string::~string, &qword_1008504F0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_100850508);
    }
  }
}

void sub_1001B3938(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_100850508);
  _Unwind_Resume(a1);
}

void sub_1001B3950()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_100850528);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_100850528))
    {
      sub_10000BF04(qword_100850510, "FAS.bin");
      __cxa_atexit((void (*)(void *))&std::string::~string, qword_100850510, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_100850528);
    }
  }
}

void sub_1001B39CC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_100850528);
  _Unwind_Resume(a1);
}

void sub_1001B39E4()
{
  unsigned __int8 v0;
  _OWORD *v1;

  v0 = atomic_load((unsigned __int8 *)&qword_100850548);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_100850548))
    {
      qword_100850530 = 0;
      qword_100850538 = 0;
      qword_100850540 = 0;
      v1 = operator new(0x30uLL);
      qword_100850538 = (uint64_t)(v1 + 3);
      qword_100850540 = (uint64_t)(v1 + 3);
      *v1 = xmmword_10046F068;
      v1[1] = unk_10046F078;
      v1[2] = xmmword_10046F088;
      qword_100850530 = (uint64_t)v1;
      __cxa_atexit((void (*)(void *))sub_100009C44, &qword_100850530, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_100850548);
    }
  }
}

void sub_1001B3A84(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_100850548);
  _Unwind_Resume(a1);
}

void sub_1001B3A9C()
{
  void *v0;
  std::string *v1;
  __int128 v2;
  std::string *v3;
  __int128 v4;
  std::string *v5;
  __int128 v6;
  std::string *v7;
  __int128 v8;
  std::string *v9;
  __int128 v10;
  std::string *v11;
  __int128 v12;
  std::string *v13;
  __int128 v14;
  std::string *v15;
  __int128 v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  __int128 v22;
  std::string *v23;
  __int128 v24;
  std::string *v25;
  __int128 v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  __int128 v30;
  std::string *v31;
  __int128 v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  __int128 v36;
  std::string v37;
  std::string v38;

  v0 = objc_autoreleasePoolPush();
  sub_1003610EC(0);
  v1 = std::string::insert(&v37, 0, "reverseLUT_A");
  v2 = *(_OWORD *)&v1->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v1->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v2;
  v1->__r_.__value_.__l.__size_ = 0;
  v1->__r_.__value_.__r.__words[2] = 0;
  v1->__r_.__value_.__r.__words[0] = 0;
  v3 = std::string::append(&v38, ".bin");
  v4 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
  qword_100857968 = v3->__r_.__value_.__r.__words[2];
  xmmword_100857958 = v4;
  v3->__r_.__value_.__l.__size_ = 0;
  v3->__r_.__value_.__r.__words[2] = 0;
  v3->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_100857958, (void *)&_mh_execute_header);
  sub_1003610EC(1);
  v5 = std::string::insert(&v37, 0, "reverseLUT_A");
  v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  v7 = std::string::append(&v38, ".bin");
  v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  qword_100857980 = v7->__r_.__value_.__r.__words[2];
  xmmword_100857970 = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_100857970, (void *)&_mh_execute_header);
  sub_1003610EC(2);
  v9 = std::string::insert(&v37, 0, "reverseLUT_A");
  v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  v11 = std::string::append(&v38, ".bin");
  v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  qword_100857998 = v11->__r_.__value_.__r.__words[2];
  xmmword_100857988 = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_100857988, (void *)&_mh_execute_header);
  sub_1003610EC(3);
  v13 = std::string::insert(&v37, 0, "reverseLUT_A");
  v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  v15 = std::string::append(&v38, ".bin");
  v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  qword_1008579B0 = v15->__r_.__value_.__r.__words[2];
  xmmword_1008579A0 = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1008579A0, (void *)&_mh_execute_header);
  sub_1003610EC(4);
  v17 = std::string::insert(&v37, 0, "reverseLUT_A");
  v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v18;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  v19 = std::string::append(&v38, ".bin");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  qword_1008579C8 = v19->__r_.__value_.__r.__words[2];
  xmmword_1008579B8 = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1008579B8, (void *)&_mh_execute_header);
  sub_1003610EC(5);
  v21 = std::string::insert(&v37, 0, "reverseLUT_A");
  v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  v23 = std::string::append(&v38, ".bin");
  v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  qword_1008579E0 = v23->__r_.__value_.__r.__words[2];
  xmmword_1008579D0 = v24;
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1008579D0, (void *)&_mh_execute_header);
  sub_1003610EC(6);
  v25 = std::string::insert(&v37, 0, "reverseLUT_A");
  v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v26;
  v25->__r_.__value_.__l.__size_ = 0;
  v25->__r_.__value_.__r.__words[2] = 0;
  v25->__r_.__value_.__r.__words[0] = 0;
  v27 = std::string::append(&v38, ".bin");
  v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
  qword_1008579F8 = v27->__r_.__value_.__r.__words[2];
  xmmword_1008579E8 = v28;
  v27->__r_.__value_.__l.__size_ = 0;
  v27->__r_.__value_.__r.__words[2] = 0;
  v27->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1008579E8, (void *)&_mh_execute_header);
  sub_1003610EC(7);
  v29 = std::string::insert(&v37, 0, "reverseLUT_A");
  v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v30;
  v29->__r_.__value_.__l.__size_ = 0;
  v29->__r_.__value_.__r.__words[2] = 0;
  v29->__r_.__value_.__r.__words[0] = 0;
  v31 = std::string::append(&v38, ".bin");
  v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
  qword_100857A10 = v31->__r_.__value_.__r.__words[2];
  xmmword_100857A00 = v32;
  v31->__r_.__value_.__l.__size_ = 0;
  v31->__r_.__value_.__r.__words[2] = 0;
  v31->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_100857A00, (void *)&_mh_execute_header);
  sub_1003610EC(8);
  v33 = std::string::insert(&v37, 0, "reverseLUT_A");
  v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v34;
  v33->__r_.__value_.__l.__size_ = 0;
  v33->__r_.__value_.__r.__words[2] = 0;
  v33->__r_.__value_.__r.__words[0] = 0;
  v35 = std::string::append(&v38, ".bin");
  v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
  qword_100857A28 = v35->__r_.__value_.__r.__words[2];
  xmmword_100857A18 = v36;
  v35->__r_.__value_.__l.__size_ = 0;
  v35->__r_.__value_.__r.__words[2] = 0;
  v35->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_100857A18, (void *)&_mh_execute_header);
  objc_autoreleasePoolPop(v0);
}

void sub_1001B4090(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void sub_1001B41FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1001B4264(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)PRLowPowerModeMonitor;
  -[_Unwind_Exception dealloc](&a9, "dealloc");
  _Unwind_Resume(a1);
}

void sub_1001B43C4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1001B4438(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  const char *v9;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSProcessInfo processInfo](NSProcessInfo, "processInfo"));
  v3 = objc_msgSend(v2, "isLowPowerModeEnabled");

  v4 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    v5 = "disabled";
    if ((_DWORD)v3)
      v5 = "enabled";
    v8 = 136315138;
    v9 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#lpm-mon, Callback. LPM is %s", (uint8_t *)&v8, 0xCu);
  }
  v6 = *(_QWORD *)(a1 + 32);
  if (*(unsigned __int8 *)(v6 + 25) != (_DWORD)v3)
  {
    *(_BYTE *)(v6 + 25) = (_BYTE)v3;
    v7 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16);
    if (v7)
      (*(void (**)(uint64_t, id))(v7 + 16))(v7, v3);
  }
}

void sub_1001B4544(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id sub_1001B45D0(uint64_t a1)
{
  NSObject *v2;
  uint8_t v4[16];

  v2 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#lpm-mon, startMonitoring", v4, 2u);
  }
  return objc_msgSend(*(id *)(a1 + 32), "_initLowPowerModeListner");
}

void sub_1001B46E4(uint64_t a1)
{
  NSObject *v2;
  id WeakRetained;
  void *v4;
  uint8_t v5[16];

  v2 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#lpm-mon, stopMonitoring", v5, 2u);
  }
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
    objc_msgSend(v4, "removeObserver:name:object:", WeakRetained, NSProcessInfoPowerStateDidChangeNotification, 0);

  }
}

void sub_1001B4798(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1001B48DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1001B493C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1001B4998(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;
  void *v2;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1001B4AC4(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;
  void *v2;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1001B4C14(_Unwind_Exception *a1)
{
  void *v1;
  os_unfair_lock_s *v2;
  void *v3;

  os_unfair_lock_unlock(v2);
  _Unwind_Resume(a1);
}

void sub_1001B4D78(_Unwind_Exception *a1)
{
  void *v1;
  os_unfair_lock_s *v2;
  void *v3;

  os_unfair_lock_unlock(v2);
  _Unwind_Resume(a1);
}

void sub_1001B4EC4(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;
  void *v2;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1001B5028(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  os_unfair_lock_s *v3;
  void *v4;

  os_unfair_lock_unlock(v3);
  _Unwind_Resume(a1);
}

void sub_1001B5184(_Unwind_Exception *a1)
{
  void *v1;
  os_unfair_lock_s *v2;
  void *v3;

  os_unfair_lock_unlock(v2);
  _Unwind_Resume(a1);
}

void sub_1001B52E8(_Unwind_Exception *a1)
{
  void *v1;
  os_unfair_lock_s *v2;
  void *v3;

  os_unfair_lock_unlock(v2);
  _Unwind_Resume(a1);
}

void sub_1001B5440(_Unwind_Exception *a1)
{
  void *v1;
  os_unfair_lock_s *v2;
  void *v3;

  os_unfair_lock_unlock(v2);
  _Unwind_Resume(a1);
}

void sub_1001B55D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  os_unfair_lock_s *v4;
  void *v5;

  os_unfair_lock_unlock(v4);
  _Unwind_Resume(a1);
}

void sub_1001B5724(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;
  void *v2;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1001B5870(_Unwind_Exception *a1)
{
  void *v1;
  os_unfair_lock_s *v2;
  void *v3;

  os_unfair_lock_unlock(v2);
  _Unwind_Resume(a1);
}

void sub_1001B59C8(_Unwind_Exception *a1)
{
  void *v1;
  os_unfair_lock_s *v2;
  void *v3;

  os_unfair_lock_unlock(v2);
  _Unwind_Resume(a1);
}

void sub_1001B5B20(_Unwind_Exception *a1)
{
  void *v1;
  os_unfair_lock_s *v2;
  void *v3;

  os_unfair_lock_unlock(v2);
  _Unwind_Resume(a1);
}

void sub_1001B5C7C(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;
  void *v2;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1001B5DCC(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;
  void *v2;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1001B5F30(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  os_unfair_lock_s *v3;
  void *v4;

  os_unfair_lock_unlock(v3);
  _Unwind_Resume(a1);
}

void sub_1001B6080(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;
  void *v2;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1001B61E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  os_unfair_lock_s *v3;
  void *v4;

  os_unfair_lock_unlock(v3);
  _Unwind_Resume(a1);
}

void sub_1001B6358(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  os_unfair_lock_s *v3;
  void *v4;

  os_unfair_lock_unlock(v3);
  _Unwind_Resume(a1);
}

void sub_1001B64CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  os_unfair_lock_s *v3;
  void *v4;

  os_unfair_lock_unlock(v3);
  _Unwind_Resume(a1);
}

void sub_1001B6624(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;
  void *v2;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1001B6764(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;
  void *v2;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1001B68A4(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;
  void *v2;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1001B69FC(_Unwind_Exception *a1)
{
  void *v1;
  os_unfair_lock_s *v2;
  void *v3;

  os_unfair_lock_unlock(v2);
  _Unwind_Resume(a1);
}

void sub_1001B6B54(_Unwind_Exception *a1)
{
  void *v1;
  os_unfair_lock_s *v2;
  void *v3;

  os_unfair_lock_unlock(v2);
  _Unwind_Resume(a1);
}

void sub_1001B6CB8(_Unwind_Exception *a1)
{
  void *v1;
  os_unfair_lock_s *v2;
  void *v3;

  os_unfair_lock_unlock(v2);
  _Unwind_Resume(a1);
}

void sub_1001B6E48(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1001B7000(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1001B7214(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1001B74D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1001B779C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,void *a21,void *a22,void *a23)
{
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  uint64_t v28;

  _Unwind_Resume(a1);
}

void sub_1001B781C()
{
  JUMPOUT(0x1001B77D4);
}

void sub_1001B7824()
{
  JUMPOUT(0x1001B77DCLL);
}

void sub_1001B782C()
{
  JUMPOUT(0x1001B77E4);
}

void sub_1001B7834()
{
  JUMPOUT(0x1001B77ECLL);
}

void sub_1001B783C()
{
  JUMPOUT(0x1001B77F4);
}

void sub_1001B7844()
{
  JUMPOUT(0x1001B77FCLL);
}

void sub_1001B784C()
{
  JUMPOUT(0x1001B7804);
}

void sub_1001B7854()
{
  JUMPOUT(0x1001B780CLL);
}

void sub_1001B78E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1001B7BEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27)
{
  void *v27;
  void *v28;
  void *v29;
  uint64_t v30;

  _Unwind_Resume(a1);
}

void sub_1001B7C9C()
{
  JUMPOUT(0x1001B7C5CLL);
}

void sub_1001B7CB0()
{
  JUMPOUT(0x1001B7C64);
}

void sub_1001B7CC0()
{
  JUMPOUT(0x1001B7C6CLL);
}

void sub_1001B7CD0()
{
  JUMPOUT(0x1001B7C74);
}

void sub_1001B7CE0()
{
  JUMPOUT(0x1001B7C7CLL);
}

void sub_1001B7CF0()
{
  JUMPOUT(0x1001B7C80);
}

void sub_1001B7CFC()
{
  JUMPOUT(0x1001B7C84);
}

void sub_1001B7D04()
{
  JUMPOUT(0x1001B7C8CLL);
}

void sub_1001B7EC0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1001B7F8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1001B8098(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1001B81E8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1001B82DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1001B8388(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1001B848C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

const __CFString *NIAcwgSessionTriggerReasonToString(uint64_t a1)
{
  const __CFString *v1;
  const __CFString *v2;
  const __CFString *v3;

  v1 = CFSTR("DeviceCloserIntent");
  v2 = CFSTR("DeviceFallbackWalletInteractionIntent");
  v3 = CFSTR("LockSelfInitiated");
  if (a1 != 200)
    v3 = CFSTR("DeviceCloserIntent");
  if (a1 != 103)
    v2 = v3;
  if (a1 == 102)
    v1 = CFSTR("DeviceFallbackGeofenceEntryIntent");
  if (a1 == 101)
    v1 = CFSTR("DeviceFallbackWristRaiseIntent");
  if (a1 <= 102)
    return v1;
  else
    return v2;
}

const __CFString *NIAcwgSuspendTriggerReasonToString(uint64_t a1)
{
  const __CFString *result;
  const __CFString *v2;

  switch(a1)
  {
    case 'e':
      result = CFSTR("DeviceReceivedUnlockNotification");
      break;
    case 'f':
      result = CFSTR("DeviceStationary");
      break;
    case 'g':
      result = CFSTR("DeviceNITimeout");
      break;
    case 'h':
      result = CFSTR("DeviceNIInterrupted");
      break;
    case 'i':
      result = CFSTR("DeviceNIInvalidated");
      break;
    case 'j':
      result = CFSTR("DeviceNIError");
      break;
    case 'k':
      result = CFSTR("DeviceClientPause");
      break;
    default:
      v2 = CFSTR("DeviceFarther");
      if (a1 == 201)
        v2 = CFSTR("LockUnilaterallySuspended");
      if (a1 == 200)
        result = CFSTR("LockSelfInitiatedRequest");
      else
        result = v2;
      break;
  }
  return result;
}

void sub_1001B86A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1001B8780(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1001B8814(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

void sub_1001B8848(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v3;
  id v4;
  uint64_t v5;
  void *i;
  id v7;
  unsigned __int16 v8;
  unsigned __int16 v9;
  char *v10;
  void *v11;
  char *v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  unsigned __int16 *v18;
  unsigned __int16 v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  void *__p[2];
  char *v26;
  _BYTE v27[128];

  __p[0] = 0;
  __p[1] = 0;
  v26 = 0;
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  v3 = a1;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v21, v27, 16);
  v20 = a2;
  if (v4)
  {
    v5 = *(_QWORD *)v22;
    do
    {
      for (i = 0; i != v4; i = (char *)i + 1)
      {
        if (*(_QWORD *)v22 != v5)
          objc_enumerationMutation(v3);
        v7 = *(id *)(*((_QWORD *)&v21 + 1) + 8 * (_QWORD)i);
        v8 = (unsigned __int16)objc_msgSend(v7, "longLongValue");
        v9 = v8;
        v10 = (char *)__p[1];
        if (__p[1] >= v26)
        {
          v12 = (char *)__p[0];
          v13 = (char *)__p[1] - (char *)__p[0];
          if ((char *)__p[1] - (char *)__p[0] <= -3)
            sub_100026E7C();
          v14 = v13 >> 1;
          if (v26 - (char *)__p[0] <= (unint64_t)((v13 >> 1) + 1))
            v15 = v14 + 1;
          else
            v15 = v26 - (char *)__p[0];
          if ((unint64_t)(v26 - (char *)__p[0]) >= 0x7FFFFFFFFFFFFFFELL)
            v16 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v16 = v15;
          if (v16)
          {
            v17 = (char *)sub_100131980((uint64_t)&v26, v16);
            v12 = (char *)__p[0];
            v10 = (char *)__p[1];
          }
          else
          {
            v17 = 0;
          }
          v18 = (unsigned __int16 *)&v17[2 * v14];
          *v18 = v9;
          v11 = v18 + 1;
          while (v10 != v12)
          {
            v19 = *((_WORD *)v10 - 1);
            v10 -= 2;
            *--v18 = v19;
          }
          __p[0] = v18;
          __p[1] = v11;
          v26 = &v17[2 * v16];
          if (v12)
            operator delete(v12);
        }
        else
        {
          *(_WORD *)__p[1] = v8;
          v11 = v10 + 2;
        }
        __p[1] = v11;

      }
      v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v21, v27, 16);
    }
    while (v4);
  }

  *(_OWORD *)v20 = *(_OWORD *)__p;
  *(_QWORD *)(v20 + 16) = v26;

}

void sub_1001B8A2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  void *v20;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1001B8A70(void *a1@<X0>, unsigned __int8 **a2@<X8>)
{
  id v3;
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  uint64_t v6;
  unsigned __int8 *i;
  id v8;
  unsigned __int8 v9;
  unsigned __int8 v10;
  unsigned __int8 *v11;
  _BYTE *v12;
  uint64_t v13;
  unint64_t v14;
  size_t v15;
  char *v16;
  char *v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  unsigned __int8 v21;
  unsigned __int8 *v22;
  unsigned __int8 **v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  unsigned __int8 *v28;
  unsigned __int8 *v29;
  unsigned __int8 *v30;
  _BYTE v31[128];

  v28 = 0;
  v29 = 0;
  v30 = 0;
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v3 = a1;
  v4 = (unsigned __int8 *)objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v24, v31, 16);
  v23 = a2;
  if (v4)
  {
    v5 = 0;
    v6 = *(_QWORD *)v25;
    do
    {
      for (i = 0; i != v4; ++i)
      {
        if (*(_QWORD *)v25 != v6)
          objc_enumerationMutation(v3);
        v8 = *(id *)(*((_QWORD *)&v24 + 1) + 8 * (_QWORD)i);
        v9 = objc_msgSend(v8, "longLongValue");
        v10 = v9;
        if (v5 >= v30)
        {
          v11 = v28;
          v12 = (_BYTE *)(v5 - v28);
          v13 = v5 - v28 + 1;
          if (v13 < 0)
            sub_100026E7C();
          v14 = v30 - v28;
          if (2 * (v30 - v28) > (unint64_t)v13)
            v13 = 2 * v14;
          if (v14 >= 0x3FFFFFFFFFFFFFFFLL)
            v15 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v15 = v13;
          if (v15)
            v16 = (char *)operator new(v15);
          else
            v16 = 0;
          v17 = &v12[(_QWORD)v16];
          v18 = &v12[(_QWORD)v16];
          *v18 = v10;
          v19 = v18 + 1;
          if (v5 != v11)
          {
            v20 = &v5[~(unint64_t)v11];
            do
            {
              v21 = *--v5;
              (v20--)[(_QWORD)v16] = v21;
            }
            while (v5 != v11);
            v5 = v28;
            v17 = v16;
          }
          v28 = (unsigned __int8 *)v17;
          v29 = v19;
          v30 = (unsigned __int8 *)&v16[v15];
          if (v5)
            operator delete(v5);
          v5 = v19;
        }
        else
        {
          *v5++ = v9;
        }
        v29 = v5;

      }
      v4 = (unsigned __int8 *)objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v24, v31, 16);
    }
    while (v4);
    v4 = v28;
    v22 = v30;
  }
  else
  {
    v22 = 0;
    v5 = 0;
  }

  *v23 = v4;
  v23[1] = v5;
  v23[2] = v22;

}

void sub_1001B8C6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  void *v21;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1001B8D6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1001B8E3C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1001B9038(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1001B91F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1001B92D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1001B94B4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1001B9600(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1001B96D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1001B9850(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1001B997C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1001B9A18(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1001B9B34(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1001B9C10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1001B9C84(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t sub_1001B9CA8(uint64_t a1, uint64_t a2, uint64_t a3, char a4, int a5)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  sub_1001B0668((_QWORD *)a1, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 1);
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  sub_1001530EC((_QWORD *)(a1 + 24), *(const void **)a3, *(_QWORD *)(a3 + 8), *(_QWORD *)(a3 + 8) - *(_QWORD *)a3);
  *(_BYTE *)(a1 + 48) = a4;
  *(_DWORD *)(a1 + 52) = a5;
  return a1;
}

void sub_1001B9D18(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

id sub_1001B9D34(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  __CFString *v6;
  __CFString *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
  v5 = a1 + 5889;
  if ((unint64_t)(a1 + 5889) <= 9)
  {
    v6 = off_10080C1E0[v5];
    v7 = off_10080C230[v5];
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[NILocalization _niLocalizedStringFromFrameworkBundleWithKey:](NILocalization, "_niLocalizedStringFromFrameworkBundleWithKey:", off_10080C190[v5]));
    objc_msgSend(v4, "setObject:forKeyedSubscript:", v8, NSLocalizedDescriptionKey);

    v9 = (void *)objc_claimAutoreleasedReturnValue(+[NILocalization _niLocalizedStringFromFrameworkBundleWithKey:](NILocalization, "_niLocalizedStringFromFrameworkBundleWithKey:", v6));
    objc_msgSend(v4, "setObject:forKeyedSubscript:", v9, NSLocalizedFailureReasonErrorKey);

    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NILocalization _niLocalizedStringFromFrameworkBundleWithKey:](NILocalization, "_niLocalizedStringFromFrameworkBundleWithKey:", v7));
    objc_msgSend(v4, "setObject:forKeyedSubscript:", v10, NSLocalizedRecoverySuggestionErrorKey);

  }
  if (v3)
    objc_msgSend(v4, "addEntriesFromDictionary:", v3);
  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("com.apple.NearbyInteraction"), a1, v4));

  return v11;
}

id sub_1001B9E88(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  const __CFString *v6;
  const __CFString *v7;
  void *v8;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
  v5 = v4;
  switch(a1)
  {
    case -19889:
      v6 = CFSTR("Check the message from the vehicle for format violation");
      v7 = CFSTR("The session was given an invalid or unexpected DCK message.");
      goto LABEL_25;
    case -19888:
      v6 = CFSTR("Try again or check the vehicle");
      v7 = CFSTR("The session was expecting a response from the vehicle and did not receive it for over the allowed time.");
      goto LABEL_25;
    case -19887:
      v6 = CFSTR("Event from bluetooth is corrupted");
      v7 = CFSTR("The bluetooth event provided to the session was of an invalid type or contained invalid values.");
      goto LABEL_25;
    case -19886:
      v6 = CFSTR("Check the logs for specific internal error");
      v7 = CFSTR("The given debug key was invalid or the system was not able to set it. Inspect error message.");
      goto LABEL_25;
    case -19885:
      v6 = CFSTR("Vehicle possibly changed its ranging capabilities");
      v7 = CFSTR("The capabilities specified in a DCK message are not supported. An action should be taken to indicate this to the vehicle.");
      goto LABEL_25;
    case -19884:
      v6 = CFSTR("Try again at a later time");
      v7 = CFSTR("A DCK request to recover a suspended ranging session has been received, but recovery has failed. An action should be taken to indicate this to the vehicle.");
      goto LABEL_25;
    case -19883:
      v6 = CFSTR("Most likely an internal error, try again.");
      v7 = CFSTR("URSKs could not be deleted");
      goto LABEL_25;
    case -19882:
      v6 = CFSTR("Pick one of the supported policies");
      v7 = CFSTR("The priority provided to the session was of an invalid type or contained invalid values");
      goto LABEL_25;
    case -19881:
      v6 = CFSTR("Check the event notification parameters or format");
      v7 = CFSTR("The session was notified of a Car Key event, but the event or its parameters were invalid");
LABEL_25:
      objc_msgSend(v4, "setObject:forKeyedSubscript:", v7, NSLocalizedFailureReasonErrorKey);
      objc_msgSend(v5, "setObject:forKeyedSubscript:", v6, NSLocalizedRecoverySuggestionErrorKey);
      break;
    default:
      v6 = CFSTR("Check Bluetooth settings, status and configuration.");
      v7 = CFSTR("Bluetooth is currently unavailable.");
      switch(a1)
      {
        case -10017:
          goto LABEL_25;
        case -10016:
          v7 = CFSTR("Failed to produce a Discovery Token.");
          goto LABEL_25;
        case -10015:
        case -10009:
          goto LABEL_26;
        case -10014:
          v6 = CFSTR("Monitor session suspension callbacks. Try again when suspension ends.");
          v7 = CFSTR("Usage while suspended.");
          goto LABEL_25;
        case -10013:
          v6 = CFSTR("Ensure region predicates are using NIDevicePresencePreset. Use NIRegionPredicate initWithName:devicePresencePreset: initializer. Ensure the smaller region predicate is specified as the inner boundary.");
          v7 = CFSTR("Region predicate verification failed.");
          goto LABEL_25;
        case -10012:
          v6 = CFSTR("Ensure peer discovery token was generated correctly.");
          v7 = CFSTR("Peer discovery token was either invalid or did not contain required information for specialized session.");
          goto LABEL_25;
        case -10011:
          v6 = CFSTR("Try running the session again at a later time. Implement throttling if necessary.");
          v7 = CFSTR("Activation reply not received. The server may be unavailable right now.");
          goto LABEL_25;
        case -10010:
          v6 = CFSTR("Check the errors and run the session again.");
          v7 = CFSTR("Camera Assistance ARSession failed.");
          goto LABEL_25;
        case -10008:
          v6 = CFSTR("No action needed as the session completed successfully");
          v7 = CFSTR("The session completed successfully");
          goto LABEL_25;
        default:
          switch(a1)
          {
            case -19703:
              v6 = CFSTR("Wrong UWB session ID possibly");
              v7 = CFSTR("Indicates URSK corresponding to the UWB Session Identifier is not found.");
              goto LABEL_25;
            case -19702:
              v6 = CFSTR("Rework the message parameters or fix the order");
              v7 = CFSTR("Indicates use of unsupported message or message format.");
              goto LABEL_25;
            case -19701:
              v6 = CFSTR("Try again later");
              v7 = CFSTR("Indicates internal resource unavailability.");
              goto LABEL_25;
            case -19700:
              v6 = CFSTR("Check the logs for specific internal error");
              v7 = CFSTR("No specific reason for failure is indicated.");
              goto LABEL_25;
            default:
              goto LABEL_26;
          }
      }
  }
LABEL_26:
  if (v3)
    objc_msgSend(v5, "addEntriesFromDictionary:", v3);
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("com.apple.NearbyInteraction"), a1, v5));

  return v8;
}

_QWORD *sub_1001BA140@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, off_10080C2A8[a1]);
}

_QWORD *sub_1001BA154@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, off_10080C300[a1]);
}

_QWORD *sub_1001BA168@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, off_10080C348[a1]);
}

_QWORD *sub_1001BA17C@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, off_10080C368[a1]);
}

void sub_1001BA37C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1001BA4E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1001BA68C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1001BA838(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1001BAAC0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1001BABF0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1001BACAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;

  a9.super_class = (Class)NIServerSystemConfiguratorSession;
  -[_Unwind_Exception dealloc](&a9, "dealloc");
  _Unwind_Resume(a1);
}

void sub_1001BAD84(uint64_t a1)
{
  id v2;
  void *v3;
  void *v4;
  objc_super v5;

  v5.receiver = *(id *)(a1 + 32);
  v5.super_class = (Class)NIServerSystemConfiguratorSession;
  v2 = objc_msgSendSuper2(&v5, "resourcesManager");
  v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "remote"));
  objc_msgSend(v4, "systemDidUpdateState:", *(_QWORD *)(a1 + 40));

}

void sub_1001BADF4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1001BAE74(uint64_t a1)
{
  id v2;
  void *v3;
  void *v4;
  int v5;
  NSString *v6;
  void *v7;
  objc_super v8;

  v8.receiver = *(id *)(a1 + 32);
  v8.super_class = (Class)NIServerSystemConfiguratorSession;
  v2 = objc_msgSendSuper2(&v8, "resourcesManager");
  v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "remote"));
  v5 = *(unsigned __int8 *)(a1 + 48);
  v6 = NSStringFromClass(*(Class *)(a1 + 40));
  v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  objc_msgSend(v4, "systemDidUpdateResourceUsageLimitExceeded:forSessionConfigurationTypeWithName:", v5 != 0, v7);

}

void sub_1001BAF08(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1001BB2B0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;

  objc_destroyWeak((id *)(v4 - 104));
  _Unwind_Resume(a1);
}

void sub_1001BB33C(uint64_t a1, void *a2, void *a3)
{
  id *v4;
  id v5;
  id v6;
  id WeakRetained;

  v4 = (id *)(a1 + 32);
  v5 = a3;
  v6 = a2;
  WeakRetained = objc_loadWeakRetained(v4);
  objc_msgSend(WeakRetained, "_process:didTerminate:", v6, v5);

}

void sub_1001BB3A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1001BB3BC(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  _QWORD v8[4];
  id v9;
  void *v10;
  uint64_t v11;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[RBSProcessStateDescriptor descriptor](RBSProcessStateDescriptor, "descriptor"));
  objc_msgSend(v4, "setValues:", 1);
  v11 = FBSSceneVisibilityEndowmentNamespace;
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v11, 1));
  objc_msgSend(v4, "setEndowmentNamespaces:", v5);

  objc_msgSend(v3, "setStateDescriptor:", v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[RBSProcessPredicate predicateMatchingIdentifier:](RBSProcessPredicate, "predicateMatchingIdentifier:", *(_QWORD *)(a1 + 32)));
  v10 = v6;
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v10, 1));
  objc_msgSend(v3, "setPredicates:", v7);

  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1001BB588;
  v8[3] = &unk_10080C3B8;
  objc_copyWeak(&v9, (id *)(a1 + 40));
  objc_msgSend(v3, "setUpdateHandler:", v8);
  objc_destroyWeak(&v9);

}

void sub_1001BB52C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  id *v4;

  objc_destroyWeak(v4);

  _Unwind_Resume(a1);
}

void sub_1001BB588(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id *v5;
  id v6;
  id v7;
  id WeakRetained;

  v5 = (id *)(a1 + 32);
  v6 = a4;
  v7 = a3;
  WeakRetained = objc_loadWeakRetained(v5);
  objc_msgSend(WeakRetained, "_process:didUpdateState:", v7, v6);

}

void sub_1001BB5EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1001BB64C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)PRAppStateMonitor;
  -[_Unwind_Exception dealloc](&a9, "dealloc");
  _Unwind_Resume(a1);
}

void sub_1001BB6C8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1001BB724(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1001BBB38(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

const __CFString *sub_1001BBB88(int a1)
{
  if ((a1 - 1) > 2)
    return CFSTR("Unknown");
  else
    return off_10080C438[a1 - 1];
}

void sub_1001BBF50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31)
{

  _Unwind_Resume(a1);
}

id sub_1001BBFD0(void *a1)
{
  id v1;
  id v2;
  void *v3;

  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "endowmentNamespaces"));
    objc_msgSend(v3, "containsObject:", FBSSceneVisibilityEndowmentNamespace);

  }
  return v2;
}

void sub_1001BC03C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t sub_1001BC058(uint64_t a1, uint64_t a2)
{
  int v4;
  id v5;
  void *v6;
  int v7;

  v4 = *(unsigned __int8 *)(a1 + 16);
  v5 = *(id *)a2;
  if (v4)
  {
    v6 = *(void **)a1;
    *(_QWORD *)a1 = v5;

    v7 = *(_DWORD *)(a2 + 8);
  }
  else
  {
    *(_QWORD *)a1 = v5;
    v7 = *(_DWORD *)(a2 + 8);
    *(_BYTE *)(a1 + 16) = 1;
  }
  *(_DWORD *)(a1 + 8) = v7;
  return a1;
}

id sub_1001BC0BC(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "monitoredApp:didChangeState:", *(unsigned int *)(a1 + 56), *(unsigned int *)(a1 + 48));
}

id sub_1001BC0D0(uint64_t a1, uint64_t a2)
{
  id result;

  result = *(id *)(a2 + 40);
  *(_QWORD *)(a1 + 40) = result;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  return result;
}

void sub_1001BC104(uint64_t a1)
{

}

void sub_1001BC28C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

id sub_1001BC2BC(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "monitoredApp:didChangeState:", *(unsigned int *)(a1 + 40), 1);
}

void sub_1001BC3FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1001BC550(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1001BC620(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1001BC75C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1001BC8CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1001BC98C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1001BCA20(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

_QWORD *sub_1001BCB70@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, (&off_10080C8D8)[a1]);
}

_QWORD *sub_1001BCB84@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, (&off_10080C930)[a1]);
}

_QWORD *sub_1001BCB98@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, (&off_10080C978)[a1]);
}

_QWORD *sub_1001BCBAC@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, (&off_10080C998)[a1]);
}

void sub_1001BCCE4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1001BCF40(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1001BD050(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  void *v10;
  void *v11;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1001BD300(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1001BD3C8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1001BD47C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1001BD4D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1001BD544(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1001BD650(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1001BDB9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47)
{
  void *v47;
  void *v48;
  void *v49;

  sub_10001AE68((uint64_t)&a17);
  if (a25 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1001BDE40(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1001BE724(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  void *v9;

  operator delete();
}

void sub_1001BEB04(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1001BEBA0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10080C460;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1001BEBB0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10080C460;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_1001BEBE0(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_1001BEBF0(uint64_t a1)
{

  return a1;
}

void sub_1001BEC18(uint64_t a1)
{

  operator delete();
}

_QWORD *sub_1001BEC50(uint64_t a1)
{
  _QWORD *v2;

  v2 = operator new(0x10uLL);
  *v2 = off_10080C4B0;
  v2[1] = *(id *)(a1 + 8);
  return v2;
}

id sub_1001BEC94(uint64_t a1, _QWORD *a2)
{
  id result;

  *a2 = off_10080C4B0;
  result = *(id *)(a1 + 8);
  a2[1] = result;
  return result;
}

void sub_1001BECC8(uint64_t a1)
{

}

void sub_1001BECD0(id *a1)
{

  operator delete(a1);
}

void sub_1001BECF8(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD block[6];
  int v10;

  v3 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  v4 = *a3;
  v10 = *((_DWORD *)a3 + 2);
  v5 = *(_QWORD *)(a1 + 8);
  block[0] = _NSConcreteStackBlock;
  block[2] = sub_1001BEDE8;
  block[3] = &unk_10080B8C0;
  v6 = *(NSObject **)(v5 + 56);
  block[1] = 3221225472;
  block[4] = v5;
  block[5] = v4;
  dispatch_async(v6, block);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

uint64_t sub_1001BEDA0(uint64_t a1, uint64_t a2)
{
  if (sub_10003E27C(a2, (uint64_t)&off_10080C510))
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_1001BEDDC()
{
  return &off_10080C510;
}

id sub_1001BEDE8(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "serviceRequestDidUpdateStatus:", *(_QWORD *)(a1 + 40), *(unsigned int *)(a1 + 48));
}

uint64_t sub_1001BEDF8(uint64_t a1)
{

  return a1;
}

void sub_1001BEE20(uint64_t a1)
{

  operator delete();
}

_QWORD *sub_1001BEE58(uint64_t a1)
{
  _QWORD *v2;

  v2 = operator new(0x10uLL);
  *v2 = off_10080C530;
  v2[1] = *(id *)(a1 + 8);
  return v2;
}

id sub_1001BEE9C(uint64_t a1, _QWORD *a2)
{
  id result;

  *a2 = off_10080C530;
  result = *(id *)(a1 + 8);
  a2[1] = result;
  return result;
}

void sub_1001BEED0(uint64_t a1)
{

}

void sub_1001BEED8(id *a1)
{

  operator delete(a1);
}

void sub_1001BEF00(uint64_t a1, _QWORD *a2, __int128 *a3)
{
  std::__shared_weak_count *v5;
  __int128 v6;
  uint64_t v7;
  NSObject *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  _QWORD v11[5];
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[560];
  _BYTE v16[16];
  _QWORD *v17[16];
  char v18;
  __n128 v19[4];
  void *__p;
  void *v21;
  char v22;
  _BYTE v23[545];
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _BYTE v27[560];
  _BYTE v28[16];
  _QWORD *v29[16];
  char v30;
  __n128 v31[4];
  void *v32;
  void *v33;
  char v34;
  _BYTE v35[545];

  v5 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  v6 = a3[1];
  v24 = *a3;
  v25 = v6;
  v26 = a3[2];
  sub_10015A39C(v27, (uint64_t)(a3 + 3));
  sub_100153F08(v28, (uint64_t)(a3 + 38));
  sub_10015A3F0(v31, (__n128 *)((char *)a3 + 760));
  memcpy(v35, a3 + 55, sizeof(v35));
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(NSObject **)(v7 + 56);
  v11[1] = 3321888768;
  v12 = v24;
  v14 = v26;
  v11[0] = _NSConcreteStackBlock;
  v11[2] = sub_1001BF238;
  v11[3] = &unk_10080C5A8;
  v11[4] = v7;
  v13 = v25;
  sub_10015A39C(v15, (uint64_t)v27);
  sub_100153F08(v16, (uint64_t)v28);
  sub_10015A3F0(v19, v31);
  memcpy(v23, v35, sizeof(v23));
  dispatch_async(v8, v11);
  if (v22 && __p)
  {
    v21 = __p;
    operator delete(__p);
  }
  if (v18)
    sub_10003E3F0((uint64_t)v17, v17[1]);
  sub_100144868((uint64_t)v15);
  if (v34 && v32)
  {
    v33 = v32;
    operator delete(v32);
  }
  if (v30)
    sub_10003E3F0((uint64_t)v29, v29[1]);
  sub_100144868((uint64_t)v27);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_1001BF11C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__shared_weak_count *v9;
  uint64_t v10;
  uint64_t v11;
  void *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;

  if (LOBYTE(STACK[0x318]))
    sub_1003CF324((uint64_t)&a9);
  sub_100144868(v11);
  if (LOBYTE(STACK[0x928]))
  {
    v13 = (void *)STACK[0x900];
    if (STACK[0x900])
    {
      STACK[0x908] = (unint64_t)v13;
      operator delete(v13);
    }
  }
  if (LOBYTE(STACK[0x8B0]))
    sub_10003E3F0((uint64_t)&STACK[0x830], (_QWORD *)STACK[0x838]);
  sub_100144868(v10);
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1001BF1F0(uint64_t a1, uint64_t a2)
{
  if (sub_10003E27C(a2, (uint64_t)&off_10080C5D8))
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_1001BF22C()
{
  return &off_10080C5D8;
}

id sub_1001BF238(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "didReceiveNewSolution:", a1 + 40);
}

uint64_t sub_1001BF248(uint64_t a1)
{

  return a1;
}

void sub_1001BF270(uint64_t a1)
{

  operator delete();
}

_QWORD *sub_1001BF2A8(uint64_t a1)
{
  _QWORD *v2;

  v2 = operator new(0x10uLL);
  *v2 = off_10080C5F8;
  v2[1] = *(id *)(a1 + 8);
  return v2;
}

id sub_1001BF2EC(uint64_t a1, _QWORD *a2)
{
  id result;

  *a2 = off_10080C5F8;
  result = *(id *)(a1 + 8);
  a2[1] = result;
  return result;
}

void sub_1001BF320(uint64_t a1)
{

}

void sub_1001BF328(id *a1)
{

  operator delete(a1);
}

void sub_1001BF350(uint64_t a1, _QWORD *a2, __int16 *a3)
{
  std::__shared_weak_count *v5;
  uint64_t v6;
  NSObject *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  _QWORD block[5];
  __int16 v11;
  void *__p;
  void *v13;
  uint64_t v14;
  __int128 v15;
  __int16 v16;
  void *v17;
  _BYTE *v18;
  uint64_t v19;
  __int128 v20;

  v5 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  v16 = *a3;
  v18 = 0;
  v19 = 0;
  v17 = 0;
  sub_1001530EC(&v17, *((const void **)a3 + 1), *((_QWORD *)a3 + 2), *((_QWORD *)a3 + 2) - *((_QWORD *)a3 + 1));
  v20 = *((_OWORD *)a3 + 2);
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(NSObject **)(v6 + 56);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3321888768;
  block[2] = sub_1001BF51C;
  block[3] = &unk_10080C670;
  block[4] = v6;
  v11 = v16;
  __p = 0;
  v13 = 0;
  v14 = 0;
  sub_1001530EC(&__p, v17, (uint64_t)v18, v18 - (_BYTE *)v17);
  v15 = v20;
  dispatch_async(v7, block);
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
  if (v17)
  {
    v18 = v17;
    operator delete(v17);
  }
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_1001BF47C(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  uint64_t v2;
  void *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v4 = *(void **)(v2 - 72);
  if (v4)
  {
    *(_QWORD *)(v2 - 64) = v4;
    operator delete(v4);
  }
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1001BF4D4(uint64_t a1, uint64_t a2)
{
  if (sub_10003E27C(a2, (uint64_t)&off_10080C6A0))
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_1001BF510()
{
  return &off_10080C6A0;
}

id sub_1001BF51C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "didReceiveRemoteData:", a1 + 40);
}

uint64_t sub_1001BF52C(uint64_t a1)
{

  return a1;
}

void sub_1001BF554(uint64_t a1)
{

  operator delete();
}

_QWORD *sub_1001BF58C(uint64_t a1)
{
  _QWORD *v2;

  v2 = operator new(0x10uLL);
  *v2 = off_10080C6C0;
  v2[1] = *(id *)(a1 + 8);
  return v2;
}

id sub_1001BF5D0(uint64_t a1, _QWORD *a2)
{
  id result;

  *a2 = off_10080C6C0;
  result = *(id *)(a1 + 8);
  a2[1] = result;
  return result;
}

void sub_1001BF604(uint64_t a1)
{

}

void sub_1001BF60C(id *a1)
{

  operator delete(a1);
}

void sub_1001BF634(uint64_t a1, _QWORD *a2, int *a3)
{
  std::__shared_weak_count *v3;
  int v4;
  uint64_t v5;
  NSObject *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v9[5];
  int v10;

  v3 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  v4 = *a3;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(NSObject **)(v5 + 56);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_1001BF720;
  v9[3] = &unk_10080B978;
  v9[4] = v5;
  v10 = v4;
  dispatch_async(v6, v9);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

uint64_t sub_1001BF6D8(uint64_t a1, uint64_t a2)
{
  if (sub_10003E27C(a2, (uint64_t)&off_10080C720))
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_1001BF714()
{
  return &off_10080C720;
}

id sub_1001BF720(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_grSessionInvalidatedWithReason:", *(unsigned int *)(a1 + 40));
}

uint64_t sub_1001BF730(uint64_t a1)
{

  return a1;
}

void sub_1001BF758(uint64_t a1)
{

  operator delete();
}

_QWORD *sub_1001BF790(uint64_t a1)
{
  _QWORD *v2;

  v2 = operator new(0x10uLL);
  *v2 = off_10080C740;
  v2[1] = *(id *)(a1 + 8);
  return v2;
}

id sub_1001BF7D4(uint64_t a1, _QWORD *a2)
{
  id result;

  *a2 = off_10080C740;
  result = *(id *)(a1 + 8);
  a2[1] = result;
  return result;
}

void sub_1001BF808(uint64_t a1)
{

}

void sub_1001BF810(id *a1)
{

  operator delete(a1);
}

void sub_1001BF838(uint64_t a1, _QWORD *a2)
{
  NSObject *v2;
  int v3;
  const char *v4;
  __int16 v5;
  int v6;
  __int16 v7;
  const char *v8;

  *a2 = 0;
  a2[1] = 0;
  v2 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_FAULT))
  {
    LOWORD(v3) = 0;
    _os_log_fault_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_FAULT, "#peer-gr,Unsupported functionality - update rate throttling.", (uint8_t *)&v3, 2u);
    v2 = qword_10085F520;
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    v3 = 136315650;
    v4 = "/Library/Caches/com.apple.xbs/Sources/Proximity/Daemon/Services/NearbyInteraction/Session/NIServerNearbyPeerGrSession.mm";
    v5 = 1024;
    v6 = 288;
    v7 = 2080;
    v8 = "operator()";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "#peer-gr,%s:%d: assertion failure in %s", (uint8_t *)&v3, 0x1Cu);
  }
  abort();
}

void sub_1001BF924(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1001BF964(uint64_t a1, uint64_t a2)
{
  if (sub_10003E27C(a2, (uint64_t)&off_10080C7B0))
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_1001BF9A0()
{
  return &off_10080C7B0;
}

void sub_1001BF9B0(uint64_t a1)
{
  sub_1002AE1E0(a1);
  operator delete();
}

uint64_t sub_1001BF9D4(uint64_t a1)
{
  return sub_1002AE1E0(a1 - 8);
}

void sub_1001BF9DC(uint64_t a1)
{
  sub_1002AE1E0(a1 - 8);
  operator delete();
}

void sub_1001BFA04()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_100850448);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_100850448))
    {
      sub_10000BF04(qword_100850430, "PRRoseProviderNetworkListener");
      __cxa_atexit((void (*)(void *))&std::string::~string, qword_100850430, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_100850448);
    }
  }
}

void sub_1001BFA80(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_100850448);
  _Unwind_Resume(a1);
}

void sub_1001BFA98()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_100850468);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_100850468))
    {
      sub_10000BF04(&qword_100850450, "com.apple.nearbyd.accessory.download");
      __cxa_atexit((void (*)(void *))&std::string::~string, &qword_100850450, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_100850468);
    }
  }
}

void sub_1001BFB14(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_100850468);
  _Unwind_Resume(a1);
}

void sub_1001BFB2C()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_100850488);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_100850488))
    {
      sub_10000BF04(&qword_100850470, "com.apple.nearbyd.accessory.files");
      __cxa_atexit((void (*)(void *))&std::string::~string, &qword_100850470, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_100850488);
    }
  }
}

void sub_1001BFBA8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_100850488);
  _Unwind_Resume(a1);
}

void sub_1001BFBC0()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_1008504A8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1008504A8))
    {
      sub_10000BF04(qword_100850490, "MA_");
      __cxa_atexit((void (*)(void *))&std::string::~string, qword_100850490, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1008504A8);
    }
  }
}

void sub_1001BFC3C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1008504A8);
  _Unwind_Resume(a1);
}

void sub_1001BFC54()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_1008504C8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1008504C8))
    {
      sub_10000BF04(qword_1008504B0, "MB_");
      __cxa_atexit((void (*)(void *))&std::string::~string, qword_1008504B0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1008504C8);
    }
  }
}

void sub_1001BFCD0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1008504C8);
  _Unwind_Resume(a1);
}

void sub_1001BFCE8()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_1008504E8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1008504E8))
    {
      sub_10000BF04(qword_1008504D0, "D");
      __cxa_atexit((void (*)(void *))&std::string::~string, qword_1008504D0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1008504E8);
    }
  }
}

void sub_1001BFD64(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1008504E8);
  _Unwind_Resume(a1);
}

void sub_1001BFD7C()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_100850508);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_100850508))
    {
      sub_10000BF04(&qword_1008504F0, "A");
      __cxa_atexit((void (*)(void *))&std::string::~string, &qword_1008504F0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_100850508);
    }
  }
}

void sub_1001BFDF8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_100850508);
  _Unwind_Resume(a1);
}

void sub_1001BFE10()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_100850528);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_100850528))
    {
      sub_10000BF04(qword_100850510, "FAS.bin");
      __cxa_atexit((void (*)(void *))&std::string::~string, qword_100850510, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_100850528);
    }
  }
}

void sub_1001BFE8C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_100850528);
  _Unwind_Resume(a1);
}

void sub_1001BFEA4()
{
  unsigned __int8 v0;
  _OWORD *v1;

  v0 = atomic_load((unsigned __int8 *)&qword_100850548);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_100850548))
    {
      qword_100850530 = 0;
      qword_100850538 = 0;
      qword_100850540 = 0;
      v1 = operator new(0x30uLL);
      qword_100850538 = (uint64_t)(v1 + 3);
      qword_100850540 = (uint64_t)(v1 + 3);
      *v1 = xmmword_10046FCC0;
      v1[1] = *(_OWORD *)algn_10046FCD0;
      v1[2] = xmmword_10046FCE0;
      qword_100850530 = (uint64_t)v1;
      __cxa_atexit((void (*)(void *))sub_100009C44, &qword_100850530, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_100850548);
    }
  }
}

void sub_1001BFF44(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_100850548);
  _Unwind_Resume(a1);
}

void sub_1001BFF5C()
{
  void *v0;
  _OWORD *v6;
  _OWORD *v7;
  std::string *v8;
  __int128 v9;
  std::string *v10;
  __int128 v11;
  std::string *v12;
  __int128 v13;
  std::string *v14;
  __int128 v15;
  std::string *v16;
  __int128 v17;
  std::string *v18;
  __int128 v19;
  std::string *v20;
  __int128 v21;
  std::string *v22;
  __int128 v23;
  std::string *v24;
  __int128 v25;
  std::string *v26;
  __int128 v27;
  std::string *v28;
  __int128 v29;
  std::string *v30;
  __int128 v31;
  std::string *v32;
  __int128 v33;
  std::string *v34;
  __int128 v35;
  std::string *v36;
  __int128 v37;
  std::string *v38;
  __int128 v39;
  std::string *v40;
  __int128 v41;
  std::string *v42;
  __int128 v43;
  __int128 v44;
  std::string v45;
  std::string v46;

  v0 = objc_autoreleasePoolPush();
  *(_OWORD *)&v46.__r_.__value_.__l.__data_ = xmmword_10046FC58;
  v46.__r_.__value_.__r.__words[2] = 0x300000003;
  sub_100182284((uint64_t)&unk_100857A30, (int *)&v46, 3);
  xmmword_100857A48 = xmmword_10046E050;
  unk_100857A58 = xmmword_10046E060;
  qword_100857A70 = 0;
  unk_100857A78 = 0;
  qword_100857A68 = 0x3FD999999999999ALL;
  unk_100857A80 = xmmword_10046E070;
  dword_100857A90 = 5;
  qword_100857A98 = 0x4000000000000000;
  dword_100857AA0 = 5;
  byte_100857AA8 = 0;
  unk_100857AAC = 0x30000000ALL;
  xmmword_100857AB8 = xmmword_10046E080;
  unk_100857AC8 = xmmword_10046E090;
  xmmword_100857AD8 = xmmword_10046E0A0;
  qword_100857AE8 = 0x3FE3333333333333;
  dword_100857AF0 = 3;
  xmmword_100857AF8 = xmmword_10046E0B0;
  unk_100857B08 = xmmword_10046E090;
  xmmword_100857B18 = xmmword_10046E080;
  qword_100857B28 = 0x3FE3333333333333;
  byte_100857B30 = 0;
  xmmword_100857B38 = xmmword_10046E0C0;
  unk_100857B48 = xmmword_10046E0D0;
  __asm { FMOV            V0.2D, #1.0 }
  v44 = _Q0;
  xmmword_100857B58 = _Q0;
  qword_100857B68 = 0xBFD3333333333333;
  xmmword_100857B70 = xmmword_10046E0E0;
  qword_100857B80 = 0x3E99999A40000000;
  xmmword_100857B88 = xmmword_10046E060;
  qword_100857BA0 = 0;
  unk_100857BA8 = 0;
  qword_100857B98 = 0x3FD999999999999ALL;
  xmmword_100857BB0 = xmmword_10046E070;
  dword_100857BC0 = 5;
  qword_100857BC8 = 0x4000000000000000;
  dword_100857BD0 = 4;
  qword_100857BD8 = 0x300000008;
  qword_100857BE0 = 0xC04E800000000000;
  v45.__r_.__value_.__r.__words[0] = 0xC04E800000000000;
  sub_10018252C((uint64_t)algn_100857BE8, (double *)&v45, 1);
  xmmword_100857C00 = xmmword_10046E0F0;
  qword_100857C10 = 0x4024000000000000;
  dword_100857C18 = 45;
  byte_100857C1C = 0;
  dword_100857C20 = 1;
  byte_100857C28 = 1;
  xmmword_100857C30 = xmmword_10046E100;
  unk_100857C40 = xmmword_10046E110;
  xmmword_100857C50 = v44;
  qword_100857C60 = 0xC059000000000000;
  xmmword_100857C68 = xmmword_10046E120;
  qword_100857C78 = (uint64_t)vdup_n_s32(0x3DCCCCCDu);
  xmmword_100857C80 = xmmword_10046E060;
  qword_100857C90 = 0x3FD999999999999ALL;
  qword_100857CA0 = 0;
  qword_100857C98 = 0;
  xmmword_100857CA8 = xmmword_10046E070;
  dword_100857CB8 = 5;
  qword_100857CC0 = 0x4000000000000000;
  dword_100857CC8 = 10;
  qword_100857CD0 = 0x4034000000000000;
  dword_100857CD8 = 3;
  xmmword_100857CE0 = xmmword_10046E130;
  __cxa_atexit((void (*)(void *))sub_100180704, &unk_100857A30, (void *)&_mh_execute_header);
  qword_100857CF8 = 0;
  unk_100857D00 = 0;
  qword_100857CF0 = 0;
  v6 = operator new(0x40uLL);
  qword_100857CF8 = (uint64_t)(v6 + 4);
  unk_100857D00 = v6 + 4;
  *v6 = xmmword_10046FC70;
  v6[1] = unk_10046FC80;
  v6[2] = xmmword_10046FC90;
  v6[3] = unk_10046FCA0;
  qword_100857CF0 = (uint64_t)v6;
  __cxa_atexit((void (*)(void *))sub_1000325D8, &qword_100857CF0, (void *)&_mh_execute_header);
  qword_100857D10 = 0;
  unk_100857D18 = 0;
  qword_100857D08 = 0;
  v7 = operator new(0x10uLL);
  qword_100857D10 = (uint64_t)(v7 + 1);
  unk_100857D18 = v7 + 1;
  *v7 = xmmword_10046FCB0;
  qword_100857D08 = (uint64_t)v7;
  __cxa_atexit((void (*)(void *))sub_1000325D8, &qword_100857D08, (void *)&_mh_execute_header);
  sub_1003610EC(0);
  v8 = std::string::insert(&v45, 0, "reverseLUT_A");
  v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v46.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  v10 = std::string::append(&v46, ".bin");
  v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  qword_100857D30 = v10->__r_.__value_.__r.__words[2];
  xmmword_100857D20 = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v46.__r_.__value_.__l.__data_);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_100857D20, (void *)&_mh_execute_header);
  sub_1003610EC(1);
  v12 = std::string::insert(&v45, 0, "reverseLUT_A");
  v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v46.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  v14 = std::string::append(&v46, ".bin");
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  qword_100857D48 = v14->__r_.__value_.__r.__words[2];
  xmmword_100857D38 = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v46.__r_.__value_.__l.__data_);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_100857D38, (void *)&_mh_execute_header);
  sub_1003610EC(2);
  v16 = std::string::insert(&v45, 0, "reverseLUT_A");
  v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v46.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  v18 = std::string::append(&v46, ".bin");
  v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  qword_100857D60 = v18->__r_.__value_.__r.__words[2];
  xmmword_100857D50 = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v46.__r_.__value_.__l.__data_);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_100857D50, (void *)&_mh_execute_header);
  sub_1003610EC(3);
  v20 = std::string::insert(&v45, 0, "reverseLUT_A");
  v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  v46.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  v22 = std::string::append(&v46, ".bin");
  v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  qword_100857D78 = v22->__r_.__value_.__r.__words[2];
  xmmword_100857D68 = v23;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v46.__r_.__value_.__l.__data_);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_100857D68, (void *)&_mh_execute_header);
  sub_1003610EC(4);
  v24 = std::string::insert(&v45, 0, "reverseLUT_A");
  v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
  v46.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v25;
  v24->__r_.__value_.__l.__size_ = 0;
  v24->__r_.__value_.__r.__words[2] = 0;
  v24->__r_.__value_.__r.__words[0] = 0;
  v26 = std::string::append(&v46, ".bin");
  v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
  qword_100857D90 = v26->__r_.__value_.__r.__words[2];
  xmmword_100857D80 = v27;
  v26->__r_.__value_.__l.__size_ = 0;
  v26->__r_.__value_.__r.__words[2] = 0;
  v26->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v46.__r_.__value_.__l.__data_);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_100857D80, (void *)&_mh_execute_header);
  sub_1003610EC(5);
  v28 = std::string::insert(&v45, 0, "reverseLUT_A");
  v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
  v46.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v29;
  v28->__r_.__value_.__l.__size_ = 0;
  v28->__r_.__value_.__r.__words[2] = 0;
  v28->__r_.__value_.__r.__words[0] = 0;
  v30 = std::string::append(&v46, ".bin");
  v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
  qword_100857DA8 = v30->__r_.__value_.__r.__words[2];
  xmmword_100857D98 = v31;
  v30->__r_.__value_.__l.__size_ = 0;
  v30->__r_.__value_.__r.__words[2] = 0;
  v30->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v46.__r_.__value_.__l.__data_);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_100857D98, (void *)&_mh_execute_header);
  sub_1003610EC(6);
  v32 = std::string::insert(&v45, 0, "reverseLUT_A");
  v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
  v46.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v33;
  v32->__r_.__value_.__l.__size_ = 0;
  v32->__r_.__value_.__r.__words[2] = 0;
  v32->__r_.__value_.__r.__words[0] = 0;
  v34 = std::string::append(&v46, ".bin");
  v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
  qword_100857DC0 = v34->__r_.__value_.__r.__words[2];
  xmmword_100857DB0 = v35;
  v34->__r_.__value_.__l.__size_ = 0;
  v34->__r_.__value_.__r.__words[2] = 0;
  v34->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v46.__r_.__value_.__l.__data_);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_100857DB0, (void *)&_mh_execute_header);
  sub_1003610EC(7);
  v36 = std::string::insert(&v45, 0, "reverseLUT_A");
  v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
  v46.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v37;
  v36->__r_.__value_.__l.__size_ = 0;
  v36->__r_.__value_.__r.__words[2] = 0;
  v36->__r_.__value_.__r.__words[0] = 0;
  v38 = std::string::append(&v46, ".bin");
  v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
  qword_100857DD8 = v38->__r_.__value_.__r.__words[2];
  xmmword_100857DC8 = v39;
  v38->__r_.__value_.__l.__size_ = 0;
  v38->__r_.__value_.__r.__words[2] = 0;
  v38->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v46.__r_.__value_.__l.__data_);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_100857DC8, (void *)&_mh_execute_header);
  sub_1003610EC(8);
  v40 = std::string::insert(&v45, 0, "reverseLUT_A");
  v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
  v46.__r_.__value_.__r.__words[2] = v40->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v41;
  v40->__r_.__value_.__l.__size_ = 0;
  v40->__r_.__value_.__r.__words[2] = 0;
  v40->__r_.__value_.__r.__words[0] = 0;
  v42 = std::string::append(&v46, ".bin");
  v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
  qword_100857DF0 = v42->__r_.__value_.__r.__words[2];
  xmmword_100857DE0 = v43;
  v42->__r_.__value_.__l.__size_ = 0;
  v42->__r_.__value_.__r.__words[2] = 0;
  v42->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v46.__r_.__value_.__l.__data_);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_100857DE0, (void *)&_mh_execute_header);
  objc_autoreleasePoolPop(v0);
}

void sub_1001C0878(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1001C0908@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, off_10080CEB0[a1]);
}

_QWORD *sub_1001C091C@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, off_10080CF08[a1]);
}

_QWORD *sub_1001C0930@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, off_10080CF50[a1]);
}

_QWORD *sub_1001C0944@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, off_10080CF70[a1]);
}

void sub_1001C0B48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  va_list va;

  va_start(va, a3);
  sub_10001AE68((uint64_t)va);

  _Unwind_Resume(a1);
}

void sub_1001C0BD4(id a1)
{
  uint64_t v1;
  void *v2;
  _BOOL8 v3;

  v1 = objc_claimAutoreleasedReturnValue(+[NIFindingConfiguration localDeviceConfiguration](NIFindingConfiguration, "localDeviceConfiguration"));
  v2 = (void *)qword_100857ED0;
  qword_100857ED0 = v1;

  v3 = +[NIPlatformInfo supportsSyntheticAperture](NIPlatformInfo, "supportsSyntheticAperture");
  objc_msgSend((id)qword_100857ED0, "setCameraAssistanceEnabled:", v3);
}

void sub_1001C0CB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1001C0D74(id a1)
{
  id v1;
  void *v2;

  v1 = -[NIServerFindableDeviceProxySessionManager _initInternal]([NIServerFindableDeviceProxySessionManager alloc], "_initInternal");
  v2 = (void *)qword_100857EE0;
  qword_100857EE0 = (uint64_t)v1;

}

void sub_1001C0E44(uint64_t a1)
{
  void *v1;

  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_internalPrepareTokenCache"));
  if (v1 && os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_FAULT))
    sub_1003D7C50();

}

void sub_1001C1460(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,id a34)
{
  void *v34;
  void *v35;
  void *v36;
  void *v37;

  _Block_object_dispose(&a20, 8);
  _Block_object_dispose(&a24, 8);
  _Block_object_dispose(&a29, 8);

  _Unwind_Resume(a1);
}

uint64_t sub_1001C154C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1001C155C(uint64_t a1)
{

}

void sub_1001C1564(_QWORD *a1, void *a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;

  v9 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "data"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NIDiscoveryToken deserialize:](NIDiscoveryToken, "deserialize:", v3));

  if (objc_msgSend(v4, "count"))
  {
    v5 = (void *)a1[4];
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "allObjects"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "account"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "_internalSetFindableDiscoveryTokens:tokenGroup:logInEventBuffer:", v6, v7, 0));

    if (v8)
      objc_storeStrong((id *)(*(_QWORD *)(a1[5] + 8) + 40), v8);
    ++*(_DWORD *)(*(_QWORD *)(a1[6] + 8) + 24);
    *(_DWORD *)(*(_QWORD *)(a1[7] + 8) + 24) += objc_msgSend(v4, "count");

  }
}

void sub_1001C1674(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1001C1CCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, void *a17, void *a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,void *a40)
{
  void *v40;
  void *v41;
  uint64_t v42;

  _Block_object_dispose((const void *)(v42 - 192), 8);
  _Unwind_Resume(a1);
}

void sub_1001C1E0C(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  if ((objc_msgSend(*(id *)(a1 + 32), "containsObject:") & 1) == 0)
    objc_msgSend(*(id *)(a1 + 40), "addObject:", v3);

}

void sub_1001C1E58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1001C1E6C(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  if ((objc_msgSend(*(id *)(a1 + 32), "containsObject:") & 1) == 0)
    objc_msgSend(*(id *)(a1 + 40), "addObject:", v3);

}

void sub_1001C1EB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1001C1ECC(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "stopAdvertisingToPeer:", v3));
  if (v4)
  {
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
      sub_1003D7EBC();
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), v4);
  }
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "stopRangingWithPeer:", v3));
  if (v5)
  {
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
      sub_1003D7E5C();
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), v5);
  }
  v6 = *(void **)(a1 + 32);
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NIServerFindingPeerTracking peerTrackingTerminalState](NIServerFindingPeerTracking, "peerTrackingTerminalState"));
  objc_msgSend(v6, "_updatePeerTrackingForToken:newTrackingState:", v3, v7);

}

void sub_1001C1FE8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v3;

  _Unwind_Resume(a1);
}

void sub_1001C21CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1001C21EC(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  id v4;
  void *v5;
  id v6;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_internalPrepareTokenCache"));
  v6 = v2;
  if (v2)
  {
    v3 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    v4 = v2;
    v5 = *(void **)(v3 + 40);
    *(_QWORD *)(v3 + 40) = v4;
  }
  else
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_internalSetFindableDiscoveryTokens:tokenGroup:logInEventBuffer:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), 1));
    if (v5)
      objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), v5);
  }

}

void sub_1001C2420(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1001C2440(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  id v4;
  id v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_internalPrepareTokenCache"));
  v10 = v2;
  if (v2)
  {
    v3 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    v4 = v2;
    v5 = *(id *)(v3 + 40);
    *(_QWORD *)(v3 + 40) = v4;
  }
  else
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 48), "objectForKey:", *(_QWORD *)(a1 + 40)));
    v5 = objc_msgSend(v6, "mutableCopy");

    if (v5)
      objc_msgSend(v5, "addObjectsFromArray:", *(_QWORD *)(a1 + 48));
    else
      v5 = (id)objc_claimAutoreleasedReturnValue(+[NSMutableSet setWithArray:](NSMutableSet, "setWithArray:", *(_QWORD *)(a1 + 48)));
    v7 = *(void **)(a1 + 32);
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "allObjects"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "_internalSetFindableDiscoveryTokens:tokenGroup:logInEventBuffer:", v8, *(_QWORD *)(a1 + 40), 1));

    if (v9)
      objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), v9);

  }
}

void sub_1001C253C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1001C2714(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1001C2734(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  id v4;
  id v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  _QWORD v13[4];
  id v14;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_internalPrepareTokenCache"));
  v12 = v2;
  if (v2)
  {
    v3 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    v4 = v2;
    v5 = *(id *)(v3 + 40);
    *(_QWORD *)(v3 + 40) = v4;
  }
  else
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 48), "objectForKey:", *(_QWORD *)(a1 + 40), 0));
    v7 = objc_msgSend(v6, "mutableCopy");

    v8 = *(void **)(a1 + 48);
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    v13[2] = sub_1001C2884;
    v13[3] = &unk_10080CAA0;
    v5 = v7;
    v14 = v5;
    objc_msgSend(v8, "enumerateObjectsUsingBlock:", v13);
    v9 = *(void **)(a1 + 32);
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "allObjects"));
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "_internalSetFindableDiscoveryTokens:tokenGroup:logInEventBuffer:", v10, *(_QWORD *)(a1 + 40), 1));

    if (v11)
      objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), v11);

  }
}

void sub_1001C2854(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

id sub_1001C2884(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "removeObject:", a2);
}

id sub_1001C2960(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "_activateProvidersLazy");
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "setDebugParameters:", *(_QWORD *)(a1 + 40));
}

void sub_1001C2A38(uint64_t a1)
{
  uint64_t v1;
  unsigned int v2;
  void *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  NSObject *v8;
  uint64_t v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  id v15;
  uint64_t v16;
  void *i;
  uint64_t v18;
  NSObject *v19;
  id v20;
  uint64_t v21;
  _QWORD block[5];
  id v24;
  id v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint8_t v30[128];
  uint8_t buf[4];
  uint64_t v32;
  __int16 v33;
  uint64_t v34;
  __int16 v35;
  unsigned int v36;
  __int16 v37;
  unsigned int v38;
  __int16 v39;
  unsigned int v40;

  v1 = a1 + 32;
  objc_msgSend(*(id *)(a1 + 32), "_activateProvidersLazy");
  v21 = objc_claimAutoreleasedReturnValue(+[NIServerFindingAdvertisement advertisementFromByteRepresentation:](NIServerFindingAdvertisement, "advertisementFromByteRepresentation:", *(_QWORD *)(v1 + 8)));
  v2 = objc_msgSend(*(id *)v1, "_isTokenFindable:", *(_QWORD *)(a1 + 48));
  v3 = (void *)v21;
  v4 = objc_msgSend(*(id *)(a1 + 32), "_shouldInteract");
  v5 = v4;
  if (v21)
    v6 = v4;
  else
    v6 = 0;
  if (v2)
    v7 = v6;
  else
    v7 = 0;
  v8 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    v9 = *(_QWORD *)(a1 + 48);
    *(_DWORD *)buf = 138478851;
    v32 = v9;
    v33 = 2113;
    v34 = v21;
    v35 = 1024;
    v36 = v2;
    v37 = 1024;
    v38 = v5;
    v39 = 1024;
    v40 = v7;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#find-proxy,processClientDiscoveryEvent. Token: %{private}@. Adv: %{private}@. Token findable: %d. Should interact: %d. Proceed: %d", buf, 0x28u);
  }
  if (v7)
  {
    v10 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "processAdvertisement:receivedOOBFromPeer:", v21, *(_QWORD *)(a1 + 48));
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "advertisingPeers"));
    v20 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "objectForKey:", *(_QWORD *)(a1 + 48)));

    v12 = v20;
    if (v20)
    {
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "byteRepresentation"));
      v28 = 0u;
      v29 = 0u;
      v26 = 0u;
      v27 = 0u;
      v14 = *(id *)(*(_QWORD *)(a1 + 32) + 72);
      v15 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v26, v30, 16);
      if (v15)
      {
        v16 = *(_QWORD *)v27;
        do
        {
          for (i = 0; i != v15; i = (char *)i + 1)
          {
            if (*(_QWORD *)v27 != v16)
              objc_enumerationMutation(v14);
            v18 = *(_QWORD *)(*((_QWORD *)&v26 + 1) + 8 * (_QWORD)i);
            if (v18)
            {
              v19 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)&v26 + 1) + 8 * (_QWORD)i), "getQueueForInputingData"));
              block[0] = _NSConcreteStackBlock;
              block[1] = 3221225472;
              block[2] = sub_1001C2D6C;
              block[3] = &unk_100809CB0;
              block[4] = v18;
              v24 = v13;
              v25 = *(id *)(a1 + 48);
              dispatch_async(v19, block);

            }
          }
          v15 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v26, v30, 16);
        }
        while (v15);
      }

      v12 = v20;
    }

    v3 = (void *)v21;
  }

}

void sub_1001C2D10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

id sub_1001C2D6C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "didGenerateShareableConfigurationData:forToken:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

void sub_1001C2DF8(uint64_t a1)
{
  unsigned int v2;
  unsigned int v3;
  NSObject *v4;
  uint64_t v5;
  id v6;
  id v7;
  id v8;
  int v9;
  uint64_t v10;
  __int16 v11;
  unsigned int v12;
  __int16 v13;
  unsigned int v14;
  __int16 v15;
  int v16;

  objc_msgSend(*(id *)(a1 + 32), "_activateProvidersLazy");
  v2 = objc_msgSend(*(id *)(a1 + 32), "_isTokenFindable:", *(_QWORD *)(a1 + 40));
  v3 = objc_msgSend(*(id *)(a1 + 32), "_shouldInteract");
  v4 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_QWORD *)(a1 + 40);
    v9 = 138478595;
    v10 = v5;
    v11 = 1024;
    v12 = v2;
    v13 = 1024;
    v14 = v3;
    v15 = 1024;
    v16 = v2 & v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#find-proxy,processClientRemovePeerEvent. Token: %{private}@. Token findable: %d. Should interact: %d. Proceed: %d", (uint8_t *)&v9, 0x1Eu);
  }
  if ((v2 & v3) != 0)
  {
    v6 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "stopAdvertisingToPeer:", *(_QWORD *)(a1 + 40));
    objc_msgSend(*(id *)(a1 + 32), "_updatePeerTrackingForToken:newAdvertisingState:", *(_QWORD *)(a1 + 40), 2);
    v7 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "stopRangingWithPeer:", *(_QWORD *)(a1 + 40));
    objc_msgSend(*(id *)(a1 + 32), "_updatePeerTrackingForToken:newRangingState:", *(_QWORD *)(a1 + 40), 4);
    v8 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "processLostEventReceivedOOBFromPeer:", *(_QWORD *)(a1 + 40));
  }
}

void sub_1001C30A0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;

  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1[4] + 48), "objectForKey:", a1[5]));
  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "allObjects"));
  v3 = *(_QWORD *)(a1[6] + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_1001C30F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1001C3278(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1001C3290(_QWORD *a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  id v5;
  uint64_t v6;
  _QWORD v7[5];
  id v8;
  uint64_t v9;

  v2 = a1[4];
  v3 = (void *)a1[5];
  v4 = *(void **)(v2 + 56);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1001C3320;
  v7[3] = &unk_10080CAC8;
  v7[4] = v2;
  v5 = v3;
  v6 = a1[6];
  v8 = v5;
  v9 = v6;
  objc_msgSend(v4, "enumerateKeysAndObjectsUsingBlock:", v7);

}

void sub_1001C330C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{

  _Unwind_Resume(a1);
}

void sub_1001C3320(_QWORD *a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  unsigned int v7;
  id v8;

  v8 = a2;
  v5 = a3;
  if (objc_msgSend(v5, "tellClientAboutPeer"))
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1[4] + 48), "objectForKey:", a1[5]));
    v7 = objc_msgSend(v6, "containsObject:", v8);

    if (v7)
      objc_msgSend(*(id *)(*(_QWORD *)(a1[6] + 8) + 40), "addObject:", v8);
  }

}

void sub_1001C33AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1001C344C(uint64_t a1)
{
  NSObject *v2;
  void *v3;
  _QWORD v4[4];
  id v5;
  uint8_t buf[16];

  if (*(_QWORD *)(a1 + 32)
    && (objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 72), "containsObject:") & 1) == 0)
  {
    v2 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#find-proxy,addObserver", buf, 2u);
    }
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 72), "addObject:", *(_QWORD *)(a1 + 32));
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 32), "advertisingPeers"));
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472;
    v4[2] = sub_1001C3554;
    v4[3] = &unk_10080CB18;
    v5 = *(id *)(a1 + 32);
    objc_msgSend(v3, "enumerateKeysAndObjectsUsingBlock:", v4);

  }
}

void sub_1001C353C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1001C3554(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  id v8;
  id v9;
  _QWORD block[4];
  id v11;
  id v12;
  id v13;

  v5 = a2;
  v6 = a3;
  v7 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "getQueueForInputingData"));
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1001C3634;
  block[3] = &unk_100809CB0;
  v11 = *(id *)(a1 + 32);
  v12 = v6;
  v13 = v5;
  v8 = v5;
  v9 = v6;
  dispatch_async(v7, block);

}

void sub_1001C3620(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1001C3634(uint64_t a1)
{
  void *v1;
  id v2;

  v1 = *(void **)(a1 + 32);
  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "byteRepresentation"));
  objc_msgSend(v1, "didGenerateShareableConfigurationData:forToken:");

}

void sub_1001C367C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

_QWORD *sub_1001C370C(_QWORD *result)
{
  _QWORD *v1;
  NSObject *v2;
  uint8_t v3[16];

  if (result[4])
  {
    v1 = result;
    result = objc_msgSend(*(id *)(result[5] + 72), "containsObject:");
    if ((_DWORD)result)
    {
      v2 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v3 = 0;
        _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#find-proxy,removeObserver", v3, 2u);
      }
      return objc_msgSend(*(id *)(v1[5] + 72), "removeObject:", v1[4]);
    }
  }
  return result;
}

void sub_1001C384C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_internalPrintableState"));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_1001C417C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  uint64_t v21;

  _Block_object_dispose((const void *)(v21 - 144), 8);
  _Unwind_Resume(a1);
}

void sub_1001C4268(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  id v12;

  v12 = a2;
  v5 = a3;
  v6 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("    %@ (%d tokens)"), v12, objc_msgSend(v5, "count")));
  objc_msgSend(v6, "addObject:", v7);

  v8 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "allObjects"));
  v10 = sub_1002B6FA8(v9, 10, 2);
  v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
  objc_msgSend(v8, "addObjectsFromArray:", v11);

}

void sub_1001C4340(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1001C437C(uint64_t a1, void *a2, void *a3)
{
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;

  v9 = a3;
  v5 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "descriptionInternal"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "description"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("    %@: %@"), v6, v7));
  objc_msgSend(v5, "addObject:", v8);

}

void sub_1001C4420(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1001C4458(uint64_t a1, void *a2, void *a3)
{
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  id v9;

  v9 = a3;
  v5 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "descriptionInternal"));
  objc_msgSend(v9, "doubleValue");
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("    %@: %0.1f s"), v6, v7));
  objc_msgSend(v5, "addObject:", v8);

}

void sub_1001C44F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1001C4634(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  double v5;
  NIServerFindingDiscoveryProvider *v6;
  NIServerFindingDiscoveryProvider *v7;
  uint64_t v8;
  void *v9;
  NIServerFindingRangingProvider *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  NIServerFindingRangingProvider *v17;
  uint64_t v18;
  void *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  NSMutableDictionary *v26;
  uint64_t v27;
  void *v28;
  NSMutableDictionary *v29;
  uint64_t v30;
  void *v31;
  NSMutableDictionary *v32;
  uint64_t v33;
  void *v34;
  NSMutableDictionary *v35;
  uint64_t v36;
  void *v37;
  NSMutableDictionary *v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  uint64_t v48;
  id v49;
  uint64_t v50;
  void *v51;
  void *v52;
  unsigned int v53;
  _QWORD *v54;
  uint64_t v55;
  _QWORD v56[4];
  _QWORD *v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  void *__p[2];
  char v61;

  v2 = objc_claimAutoreleasedReturnValue(+[NSDate now](NSDate, "now"));
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(void **)(v3 + 16);
  *(_QWORD *)(v3 + 16) = v2;

  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 24) = 0;
  v5 = sub_1002B6778(CFSTR("FindingBTDiscoveryTimeoutSecondsOverride"), 120.0);
  v6 = [NIServerFindingDiscoveryProvider alloc];
  sub_10000BF04(__p, "FindableDeviceProxy");
  v7 = -[NIServerFindingDiscoveryProvider initWithIdentifier:isFinder:enableBluetooth:launchOnDemand:scanRate:discoveryTimeout:oobRefreshPeriod:consumer:queue:](v6, "initWithIdentifier:isFinder:enableBluetooth:launchOnDemand:scanRate:discoveryTimeout:oobRefreshPeriod:consumer:queue:", __p, 0, 1, 1, 20, v5, 0.0, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8));
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(void **)(v8 + 32);
  *(_QWORD *)(v8 + 32) = v7;

  if (v61 < 0)
    operator delete(__p[0]);
  v10 = [NIServerFindingRangingProvider alloc];
  sub_10000BF04(__p, "FindableDeviceProxy");
  v11 = *(_QWORD *)(a1 + 32);
  v12 = *(_QWORD *)(v11 + 8);
  v13 = sub_1002CA108();
  v14 = (std::__shared_weak_count *)v13[21];
  v58 = v13[20];
  v59 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
  }
  v17 = -[NIServerFindingRangingProvider initWithIdentifier:isFinder:consumer:queue:pbLogger:](v10, "initWithIdentifier:isFinder:consumer:queue:pbLogger:", __p, 0, v11, v12, &v58);
  v18 = *(_QWORD *)(a1 + 32);
  v19 = *(void **)(v18 + 40);
  *(_QWORD *)(v18 + 40) = v17;

  v20 = v59;
  if (v59)
  {
    v21 = (unint64_t *)&v59->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  if (v61 < 0)
    operator delete(__p[0]);
  v23 = objc_claimAutoreleasedReturnValue(+[NSHashTable weakObjectsHashTable](NSHashTable, "weakObjectsHashTable"));
  v24 = *(_QWORD *)(a1 + 32);
  v25 = *(void **)(v24 + 72);
  *(_QWORD *)(v24 + 72) = v23;

  v26 = objc_opt_new(NSMutableDictionary);
  v27 = *(_QWORD *)(a1 + 32);
  v28 = *(void **)(v27 + 48);
  *(_QWORD *)(v27 + 48) = v26;

  v29 = objc_opt_new(NSMutableDictionary);
  v30 = *(_QWORD *)(a1 + 32);
  v31 = *(void **)(v30 + 56);
  *(_QWORD *)(v30 + 56) = v29;

  v32 = objc_opt_new(NSMutableDictionary);
  v33 = *(_QWORD *)(a1 + 32);
  v34 = *(void **)(v33 + 64);
  *(_QWORD *)(v33 + 64) = v32;

  v35 = objc_opt_new(NSMutableDictionary);
  v36 = *(_QWORD *)(a1 + 32);
  v37 = *(void **)(v36 + 80);
  *(_QWORD *)(v36 + 80) = v35;

  v38 = objc_opt_new(NSMutableDictionary);
  v39 = *(_QWORD *)(a1 + 32);
  v40 = *(void **)(v39 + 88);
  *(_QWORD *)(v39 + 88) = v38;

  v41 = *(_QWORD *)(a1 + 32);
  v42 = *(void **)(v41 + 104);
  *(_QWORD *)(v41 + 104) = 0;

  v43 = *(_QWORD *)(a1 + 32);
  v44 = *(void **)(v43 + 112);
  *(_QWORD *)(v43 + 112) = 0;

  *(_DWORD *)(*(_QWORD *)(a1 + 32) + 120) = 0;
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 124) = 0;
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 125) = 0;
  v45 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
  objc_msgSend(v45, "addObserver:selector:name:object:", *(_QWORD *)(a1 + 32), "_nanoRegistryDevicePairingChanged_r121951698:", NRPairedDeviceRegistryDeviceDidPairNotification, 0);

  v46 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
  objc_msgSend(v46, "addObserver:selector:name:object:", *(_QWORD *)(a1 + 32), "_nanoRegistryDevicePairingChanged_r121951698:", NRPairedDeviceRegistryDeviceIsSetupNotification, 0);

  v47 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
  objc_msgSend(v47, "addObserver:selector:name:object:", *(_QWORD *)(a1 + 32), "_nanoRegistryDevicePairingChanged_r121951698:", NRPairedDeviceRegistryDeviceDidUnpairNotification, 0);

  *(_DWORD *)(*(_QWORD *)(a1 + 32) + 128) = objc_msgSend((id)objc_opt_class(*(_QWORD *)(a1 + 32), v48), "_queryNumPairedFinderWatches_r121951698");
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 96) = 0;
  v49 = objc_alloc_init((Class)NSOperationQueue);
  v50 = *(_QWORD *)(a1 + 32);
  v51 = *(void **)(v50 + 136);
  *(_QWORD *)(v50 + 136) = v49;

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 136), "setUnderlyingQueue:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8));
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 248) = 0;
  sub_1001C4AA4((_QWORD *)(*(_QWORD *)(a1 + 32) + 256), 0xFuLL);
  sub_1001C4AA4((_QWORD *)(*(_QWORD *)(a1 + 32) + 304), 0x32uLL);
  sub_1001C4AA4((_QWORD *)(*(_QWORD *)(a1 + 32) + 352), 0xAuLL);
  if (+[NIPlatformInfo isInternalBuild](NIPlatformInfo, "isInternalBuild")
    || (v52 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults")),
        v53 = objc_msgSend(v52, "BOOLForKey:", CFSTR("EnableStateDump")),
        v52,
        v53))
  {
    v54 = *(_QWORD **)(a1 + 32);
    v55 = v54[1];
    v56[0] = _NSConcreteStackBlock;
    v56[1] = 3221225472;
    v56[2] = sub_1001C4B48;
    v56[3] = &unk_10080A8A0;
    v57 = v54;
    os_state_add_handler(v55, v56);

  }
}

void sub_1001C4A54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  void *v23;

  _Unwind_Resume(a1);
}

void sub_1001C4AA4(_QWORD *a1, unint64_t a2)
{
  unint64_t v3;
  BOOL v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  _QWORD *v10;
  unint64_t v11;

  v3 = a1[5];
  v4 = a2 >= v3;
  v5 = a2 - v3;
  if (v5 != 0 && v4)
  {
    sub_1001CC2C4(a1, v5);
  }
  else if (!v4)
  {
    v6 = a1[4];
    v7 = a1[1];
    v8 = (_QWORD *)(v7 + 8 * (v6 / 0xAA));
    if (a1[2] == v7)
      v9 = 0;
    else
      v9 = *v8 + 24 * (v6 % 0xAA);
    v10 = v8;
    v11 = v9;
    sub_1001CCBF4(&v10, a2);
    sub_1001CC430((uint64_t)a1, v10, v11);
  }
}

char *sub_1001C4B48(uint64_t a1)
{
  void *v1;
  char *v2;

  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_internalPrintableState"));
  v2 = sub_10002D668(CFSTR("Findable Device"), v1);

  return v2;
}

void sub_1001C4B8C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1001C4F28(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1001C50A4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1001C5554(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1001C5654(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1001C5754(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1001C5854(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1001C5960(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1001C6334(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v16;
  va_list va;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v16 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  v19 = va_arg(va1, _QWORD);
  v20 = va_arg(va1, _QWORD);
  v21 = va_arg(va1, _QWORD);
  v22 = va_arg(va1, _QWORD);

  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);

  _Unwind_Resume(a1);
}

void sub_1001C64BC(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;

  v4 = a3;
  if (objc_msgSend(v4, "isDoingAnything"))
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
  if (objc_msgSend(v4, "isAttemptingToRange"))
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;

}

void sub_1001C6520(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1001C6C30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24)
{
  void *v24;
  void *v25;
  void *v26;
  void *v27;

  _Unwind_Resume(a1);
}

void sub_1001C6E60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1001C70C0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1001C71BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

id sub_1001C71D4(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "unionSet:");
}

void sub_1001C7288(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, ...)
{
  void *v7;
  va_list va;

  va_start(va, a7);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1001C72AC(uint64_t a1, uint64_t a2, void *a3, _BYTE *a4)
{
  id result;

  result = objc_msgSend(a3, "containsObject:", *(_QWORD *)(a1 + 32));
  if ((_DWORD)result)
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
    *a4 = 1;
  }
  return result;
}

void sub_1001C73C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1001C747C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

id sub_1001C7524(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  NSObject *v5;
  void *v6;
  int v7;
  id result;
  int v9;
  void *v10;
  __int16 v11;
  int v12;
  __int16 v13;
  int v14;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_DWORD *)(v3 + 128);
  *(_DWORD *)(*(_QWORD *)(a1 + 32) + 128) = objc_msgSend((id)objc_opt_class(v3, a2), "_queryNumPairedFinderWatches_r121951698");
  v5 = (id)qword_10085F520;
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "name"));
    v7 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 128);
    v9 = 138412802;
    v10 = v6;
    v11 = 1024;
    v12 = v4;
    v13 = 1024;
    v14 = v7;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#find-proxy,rdar://121951698: pairing change notification (%@). Previous paired finder watches: %d. New: %d.", (uint8_t *)&v9, 0x18u);

  }
  result = objc_msgSend(*(id *)(a1 + 32), "_shouldInteract");
  if ((_DWORD)result)
    return objc_msgSend(*(id *)(a1 + 32), "_enableInteractionWithPersistedTokens");
  return result;
}

void sub_1001C7638(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1001C76B0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL sub_1001C76CC(id a1, NRDevice *a2)
{
  NRDevice *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  unsigned int v7;

  v2 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(-[NRDevice valueForProperty:](v2, "valueForProperty:", NRDevicePropertyIsPaired));
  v4 = (void *)objc_claimAutoreleasedReturnValue(-[NRDevice valueForProperty:](v2, "valueForProperty:", NRDevicePropertyIsSetup));
  v5 = (void *)objc_claimAutoreleasedReturnValue(-[NRDevice valueForProperty:](v2, "valueForProperty:", NRDevicePropertyIsAltAccount));
  v6 = (void *)objc_claimAutoreleasedReturnValue(-[NRDevice valueForProperty:](v2, "valueForProperty:", NRDevicePropertyIsArchived));
  if (objc_msgSend(v3, "BOOLValue")
    && objc_msgSend(v4, "BOOLValue")
    && (objc_msgSend(v5, "BOOLValue") & 1) == 0)
  {
    v7 = objc_msgSend(v6, "BOOLValue") ^ 1;
  }
  else
  {
    LOBYTE(v7) = 0;
  }

  return v7;
}

void sub_1001C77B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1001C7A68(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1001C7D08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1001C7D78(uint64_t a1)
{
  id *WeakRetained;
  NSObject *v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  int v8;
  void *v9;

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v3 = (id)qword_10085F520;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      v4 = sub_1002B69FC((uint64_t)"KeepAlive", 0, *(void **)(a1 + 32), CFSTR("Finished"));
      v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
      v8 = 138412290;
      v9 = v5;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#find-proxy,%@", (uint8_t *)&v8, 0xCu);

    }
    objc_msgSend(WeakRetained[10], "removeObjectForKey:", *(_QWORD *)(a1 + 32));
    objc_msgSend(WeakRetained[11], "removeObjectForKey:", *(_QWORD *)(a1 + 32));
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained[4], "stopAdvertisingToPeer:", *(_QWORD *)(a1 + 32)));
    if (v6 && os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_FAULT))
      sub_1003D828C();
    objc_msgSend(WeakRetained, "_updatePeerTrackingForToken:newAdvertisingState:", *(_QWORD *)(a1 + 32), 2);
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained[5], "stopRangingWithPeer:", *(_QWORD *)(a1 + 32)));
    if (v7 && os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_FAULT))
      sub_1003D822C();
    objc_msgSend(WeakRetained, "_updatePeerTrackingForToken:newRangingState:", *(_QWORD *)(a1 + 32), 4);

  }
}

void sub_1001C7F1C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1001C8204(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1001C84DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1001C8518(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  _BOOL4 v6;
  _DWORD *v7;
  int v8;
  void *v9;
  void *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  void *v16;
  void *v17[3];
  void *v18;
  void *v19;
  uint64_t v20;
  void *__p;
  void *v22;
  _DWORD *v23;

  v3 = a2;
  WORD2(v18) = 0;
  LODWORD(v18) = 0;
  v4 = -[NIServerFindingAdvertisement initForFinder:address:]([NIServerFindingAdvertisement alloc], "initForFinder:address:", 1, &v18);
  objc_msgSend(v4, "setCanRange:", 1);
  v5 = *(void **)(*(_QWORD *)(a1 + 32) + 40);
  if (v5)
  {
    objc_msgSend(v5, "supportedTechnologies");
  }
  else
  {
    v18 = 0;
    v19 = 0;
    v20 = 0;
  }
  v6 = sub_1002B7410(&v18, 1);
  __p = 0;
  v22 = 0;
  v23 = 0;
  v7 = operator new(4uLL);
  if (v6)
    v8 = 1;
  else
    v8 = 2;
  __p = v7;
  *v7 = v8;
  v22 = v7 + 1;
  v23 = v7 + 1;
  objc_msgSend(v4, "setSupportedTechnologies:", &__p);
  if (__p)
  {
    v22 = __p;
    operator delete(__p);
  }
  if (v18)
  {
    v19 = v18;
    operator delete(v18);
  }
  objc_msgSend(v4, "setProtocolVersion:", 1);
  v9 = sub_1002CA108();
  v10 = (void *)*((_QWORD *)v9 + 406);
  v11 = (std::__shared_weak_count *)*((_QWORD *)v9 + 407);
  v18 = v10;
  v19 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  sub_1002A4D2C((uint64_t)v10);
  objc_msgSend(v4, "setNarrowBandMask:", sub_10036C1C0((unsigned __int8 **)v17));
  if (v17[0])
  {
    v17[1] = v17[0];
    operator delete(v17[0]);
  }
  if (v11)
  {
    v14 = (unint64_t *)&v11->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  objc_msgSend(*(id *)(a1 + 32), "_updatePeerTrackingForToken:newDiscoveryState:", v3, 2);
  v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 5));
  objc_msgSend(*(id *)(a1 + 32), "_updatePeerTrackingForToken:newNbUwbAcquisitionChannelIdx:", v3, v16);
  objc_msgSend(*(id *)(a1 + 32), "_advertiseAndRangeWithPeer:peerAdvertisement:", v3, v4);

}

void sub_1001C86E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void sub_1001C88F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  void *v20;

  _Block_object_dispose(&a15, 8);
  _Unwind_Resume(a1);
}

void sub_1001C8920(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;

  v3 = a2;
  v4 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "stopAdvertisingToPeer:", v3));
  v5 = a1 + 40;
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v7 = *(void **)(v6 + 40);
  *(_QWORD *)(v6 + 40) = v4;

  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40)
    && os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
  {
    sub_1003D846C();
  }
  v8 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "stopRangingWithPeer:", v3));
  v9 = *(_QWORD *)(*(_QWORD *)v5 + 8);
  v10 = *(void **)(v9 + 40);
  *(_QWORD *)(v9 + 40) = v8;

  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v5 + 8) + 40)
    && os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
  {
    sub_1003D840C();
  }
  v11 = *(void **)(a1 + 32);
  v12 = (void *)objc_claimAutoreleasedReturnValue(+[NIServerFindingPeerTracking peerTrackingTerminalState](NIServerFindingPeerTracking, "peerTrackingTerminalState"));
  objc_msgSend(v11, "_updatePeerTrackingForToken:newTrackingState:", v3, v12);

}

void sub_1001C8A48(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1001C8C54(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1001C8DF8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1001C8F24(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1001C91B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11)
{
  void *v11;
  void *v12;
  void *v13;

  v13 = v12;

  _Unwind_Resume(a1);
}

id sub_1001C920C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "didGenerateShareableConfigurationData:forToken:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

void sub_1001C92F8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1001C9464(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1001C95F0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1001C97FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1001C9A40(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1001C9BF0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1001C9D0C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1001C9E24(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1001C9F58(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1001CA010(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1001CA198(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1001CA324(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1001CA3F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;
  void *v15;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1001CA418(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  _QWORD *WeakRetained;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  _QWORD v17[7];

  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    if (v6 && os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
    {
      sub_1003D862C();
      if (v5)
        goto LABEL_5;
    }
    else if (v5)
    {
LABEL_5:
      objc_msgSend(v5, "timestamp");
      v9 = v8;
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "relativeAltitude"));
      objc_msgSend(v10, "doubleValue");
      v12 = v11;
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "pressure"));
      objc_msgSend(v13, "doubleValue");
      v15 = v14;

      v16 = (void *)WeakRetained[8];
      v17[0] = _NSConcreteStackBlock;
      v17[1] = 3221225472;
      v17[2] = sub_1001CA59C;
      v17[3] = &unk_10080CCB8;
      v17[4] = v9;
      v17[5] = v12;
      v17[6] = v15;
      objc_msgSend(v16, "enumerateKeysAndObjectsUsingBlock:", v17);
      goto LABEL_9;
    }
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
      sub_1003D8600();
  }
LABEL_9:

}

void sub_1001CA568(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v6 = v5;

  _Unwind_Resume(a1);
}

void sub_1001CA59C(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;

  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a3, "updatesEngine"));
  objc_msgSend(v4, "acceptAltimeterData:", a1 + 32);

}

void sub_1001CA5DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1001CA6B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;
  void *v15;
  void *v16;
  void *v17;

  v17 = v16;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1001CA6E4(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject **WeakRetained;
  NSObject **v8;
  NSObject *v9;
  _QWORD block[4];
  id v11;
  id v12;
  NSObject **v13;

  v5 = a2;
  v6 = a3;
  WeakRetained = (NSObject **)objc_loadWeakRetained((id *)(a1 + 32));
  v8 = WeakRetained;
  if (WeakRetained)
  {
    v9 = WeakRetained[1];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1001CA79C;
    block[3] = &unk_100809CB0;
    v11 = v6;
    v12 = v5;
    v13 = v8;
    dispatch_async(v9, block);

  }
}

void sub_1001CA79C(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  unsigned int v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  unsigned int v19;
  void *v20;
  unsigned int v21;
  void *v22;
  void *v23;
  void *v24;
  _QWORD v25[6];
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;

  if (*(_QWORD *)(a1 + 32) && os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
    sub_1003D86B8();
  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "startDate"));
    objc_msgSend(v24, "timeIntervalSinceReferenceDate");
    v4 = v3;
    v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "endDate"));
    objc_msgSend(v23, "timeIntervalSinceReferenceDate");
    v6 = v5;
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "numberOfSteps"));
    v8 = objc_msgSend(v7, "unsignedIntValue");
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "distance"));
    objc_msgSend(v9, "doubleValue");
    v11 = v10;
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "currentPace"));
    objc_msgSend(v12, "doubleValue");
    v14 = v13;
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "currentCadence"));
    objc_msgSend(v15, "doubleValue");
    v17 = v16;
    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "floorsAscended"));
    v19 = objc_msgSend(v18, "unsignedIntValue");
    v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "floorsDescended"));
    v21 = objc_msgSend(v20, "unsignedIntValue");

    v22 = *(void **)(*(_QWORD *)(a1 + 48) + 64);
    v25[0] = _NSConcreteStackBlock;
    v25[1] = 3221225472;
    v25[2] = sub_1001CA9FC;
    v25[3] = &unk_10080CD00;
    v25[4] = v4;
    v25[5] = v6;
    v26 = v8;
    v27 = v11;
    v28 = v14;
    v29 = v17;
    v30 = v19;
    v31 = v21;
    objc_msgSend(v22, "enumerateKeysAndObjectsUsingBlock:", v25);
  }
  else if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
  {
    sub_1003D868C();
  }
}

void sub_1001CA990(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1001CA9E4()
{
  JUMPOUT(0x1001CA9C8);
}

void sub_1001CA9EC()
{
  JUMPOUT(0x1001CA9CCLL);
}

void sub_1001CA9F4()
{
  JUMPOUT(0x1001CA9D4);
}

void sub_1001CA9FC(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;

  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a3, "updatesEngine"));
  objc_msgSend(v4, "acceptPedometerData:", a1 + 32);

}

void sub_1001CAA3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1001CAAF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;
  void *v15;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1001CAB14(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject **WeakRetained;
  NSObject **v8;
  NSObject *v9;
  _QWORD block[4];
  id v11;
  id v12;
  NSObject **v13;

  v5 = a2;
  v6 = a3;
  WeakRetained = (NSObject **)objc_loadWeakRetained((id *)(a1 + 32));
  v8 = WeakRetained;
  if (WeakRetained)
  {
    v9 = WeakRetained[1];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1001CABCC;
    block[3] = &unk_100809CB0;
    v11 = v6;
    v12 = v5;
    v13 = v8;
    dispatch_async(v9, block);

  }
}

void sub_1001CABCC(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  void *v7;
  _QWORD v8[5];
  BOOL v9;

  if (*(_QWORD *)(a1 + 32) && os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
    sub_1003D871C();
  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "date"));
    objc_msgSend(v3, "timeIntervalSinceReferenceDate");
    v5 = v4;
    v6 = objc_msgSend(*(id *)(a1 + 40), "type") == (id)1;

    v7 = *(void **)(*(_QWORD *)(a1 + 48) + 64);
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_1001CACE0;
    v8[3] = &unk_10080CD48;
    v8[4] = v5;
    v9 = v6;
    objc_msgSend(v7, "enumerateKeysAndObjectsUsingBlock:", v8);
  }
  else if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
  {
    sub_1003D868C();
  }
}

void sub_1001CACD0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1001CACE0(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;

  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a3, "updatesEngine"));
  objc_msgSend(v4, "acceptPedometerEvent:", a1 + 32);

}

void sub_1001CAD20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1001CADDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;
  void *v15;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1001CADFC(uint64_t a1, void *a2)
{
  id v3;
  _QWORD *WeakRetained;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned __int8 v11;
  unsigned __int8 v12;
  unsigned __int8 v13;
  unsigned __int8 v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  void *v17;
  _QWORD v18[6];
  unsigned __int8 v19;
  unsigned __int8 v20;
  unsigned __int8 v21;
  unsigned __int8 v22;
  unsigned __int8 v23;
  unsigned __int8 v24;
  unsigned int v25;

  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    if (v3)
    {
      objc_msgSend(v3, "timestamp");
      v6 = v5;
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "startDate"));
      objc_msgSend(v7, "timeIntervalSinceReferenceDate");
      v9 = v8;
      v10 = objc_msgSend(v3, "confidence");
      v11 = objc_msgSend(v3, "stationary");
      v12 = objc_msgSend(v3, "walking");
      v13 = objc_msgSend(v3, "running");
      v14 = objc_msgSend(v3, "automotive");
      v15 = objc_msgSend(v3, "cycling");
      v16 = objc_msgSend(v3, "unknown");

      v17 = (void *)WeakRetained[8];
      v18[0] = _NSConcreteStackBlock;
      v18[1] = 3221225472;
      v18[2] = sub_1001CAF8C;
      v18[3] = &unk_10080CD90;
      v18[4] = v6;
      v18[5] = v9;
      v19 = v11;
      v20 = v12;
      v21 = v13;
      v22 = v14;
      v23 = v15;
      v24 = v16;
      v25 = v10;
      objc_msgSend(v17, "enumerateKeysAndObjectsUsingBlock:", v18);
    }
    else if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
    {
      sub_1003D8780();
    }
  }

}

void sub_1001CAF6C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1001CAF8C(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;

  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a3, "updatesEngine"));
  objc_msgSend(v4, "acceptMotionActivity:", a1 + 32);

}

void sub_1001CAFCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1001CB098(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;
  void *v15;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1001CB0B8(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  _QWORD *WeakRetained;
  double v8;
  char v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  void *v29;
  uint64_t v30;
  void *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  void *v37;
  double v38;
  double v39;
  void *v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  double v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  _BOOL4 v53;
  BOOL v54;
  int v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD v69[5];
  char v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  double v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char v88;

  v5 = a2;
  v6 = a3;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
    sub_1003D88C8();
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    if (v6 && os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
    {
      sub_1003D8868();
      if (v5)
      {
LABEL_7:
        objc_msgSend(v5, "timestamp");
        sub_10028D4C0((uint64_t)(WeakRetained + 22), v8);
        if (v9)
        {
          v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "deltaPositionX"));

          if (v10)
          {
            v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "deltaPositionX"));
            objc_msgSend(v11, "doubleValue");
            v13 = v12;

            v14 = 1;
          }
          else
          {
            v14 = 0;
            v13 = 0;
          }
          v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "deltaPositionY"));

          if (v15)
          {
            v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "deltaPositionY"));
            objc_msgSend(v16, "doubleValue");
            v18 = v17;

            v19 = 1;
          }
          else
          {
            v19 = 0;
            v18 = 0;
          }
          v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "deltaPositionZ"));

          if (v20)
          {
            v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "deltaPositionZ"));
            objc_msgSend(v21, "doubleValue");
            v68 = v22;

            v23 = 1;
          }
          else
          {
            v23 = 0;
            v68 = 0;
          }
          v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "deltaVelocityX"));

          if (v24)
          {
            v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "deltaVelocityX"));
            objc_msgSend(v25, "doubleValue");
            v67 = v26;

            v27 = 1;
          }
          else
          {
            v27 = 0;
            v67 = 0;
          }
          v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "deltaVelocityY"));

          if (v28)
          {
            v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "deltaVelocityY"));
            objc_msgSend(v29, "doubleValue");
            v66 = v30;

            v65 = 1;
          }
          else
          {
            v65 = 0;
            v66 = 0;
          }
          v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "deltaVelocityZ"));

          v63 = v19;
          v64 = v14;
          v61 = v27;
          v62 = v23;
          if (v31)
          {
            v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "deltaVelocityZ"));
            objc_msgSend(v32, "doubleValue");
            v34 = v33;

            v35 = 1;
          }
          else
          {
            v35 = 0;
            v34 = 0;
          }
          v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "quaternionW"));

          if (v36)
          {
            v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "quaternionW"));
            objc_msgSend(v37, "doubleValue");
            v39 = v38;

          }
          else
          {
            v39 = 0.0;
          }
          v40 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "quaternionX"));

          if (v40)
          {
            v41 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "quaternionX"));
            objc_msgSend(v41, "doubleValue");
            v43 = v42;

          }
          else
          {
            v43 = 0;
          }
          v44 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "quaternionY"));

          if (v44)
          {
            v45 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "quaternionY"));
            objc_msgSend(v45, "doubleValue");
            v47 = v46;

          }
          else
          {
            v47 = 0;
          }
          v48 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "quaternionZ"));

          v49 = 0.0;
          v50 = 0;
          if (v48)
          {
            v51 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "quaternionZ"));
            objc_msgSend(v51, "doubleValue");
            v50 = v52;

          }
          v53 = v48 != 0;
          if (v36)
            v54 = v40 == 0;
          else
            v54 = 1;
          v56 = !v54 && v44 != 0;
          v57 = v56 & v53;
          if ((v56 & v53) != 0)
            v49 = v39;
          objc_msgSend(v5, "timestamp");
          v59 = v58;
          if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
            sub_1003D8804();
          v60 = (void *)WeakRetained[8];
          v69[0] = _NSConcreteStackBlock;
          v69[1] = 3221225472;
          v69[2] = sub_1001CB640;
          v69[3] = &unk_10080CDD8;
          v69[4] = v59;
          v70 = 0;
          v71 = 0;
          v72 = v13;
          v73 = v64;
          v74 = v18;
          v75 = v63;
          v76 = v68;
          v77 = v62;
          v78 = v67;
          v79 = v61;
          v80 = v66;
          v81 = v65;
          v82 = v34;
          v83 = v35;
          v84 = v49;
          v85 = v43;
          v86 = v47;
          v87 = v50;
          v88 = v57;
          objc_msgSend(v60, "enumerateKeysAndObjectsUsingBlock:", v69);
        }
        else if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
        {
          sub_1003D87D8();
        }
        goto LABEL_56;
      }
    }
    else if (v5)
    {
      goto LABEL_7;
    }
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
      sub_1003D87AC();
  }
LABEL_56:

}

void sub_1001CB58C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1001CB640(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;

  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a3, "updatesEngine"));
  objc_msgSend(v4, "acceptDevicePDRInput:", a1 + 32);

}

void sub_1001CB680(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1001CB74C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;
  void *v15;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1001CB76C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  _QWORD *WeakRetained;
  double v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD v43[18];

  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (!WeakRetained)
    goto LABEL_12;
  if (v6 && os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
  {
    sub_1003D8920();
    if (v5)
    {
LABEL_5:
      objc_msgSend(v5, "timestamp");
      v9 = sub_10028D4C0((uint64_t)(WeakRetained + 22), v8);
      if (v10)
      {
        v11 = v9;
        objc_msgSend(v5, "userAcceleration");
        v42 = v12;
        objc_msgSend(v5, "userAcceleration");
        v41 = v13;
        objc_msgSend(v5, "userAcceleration");
        v40 = v14;
        objc_msgSend(v5, "rotationRate");
        v39 = v15;
        objc_msgSend(v5, "rotationRate");
        v38 = v16;
        objc_msgSend(v5, "rotationRate");
        v18 = v17;
        v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "attitude"));
        objc_msgSend(v19, "quaternion");
        v21 = v20;
        v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "attitude"));
        objc_msgSend(v22, "quaternion");
        v24 = v23;
        v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "attitude"));
        objc_msgSend(v25, "quaternion");
        v27 = v26;
        v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "attitude"));
        objc_msgSend(v28, "quaternion");
        v30 = v29;
        objc_msgSend(v5, "gravity");
        v32 = v31;
        objc_msgSend(v5, "gravity");
        v34 = v33;
        objc_msgSend(v5, "gravity");
        v36 = v35;

        v37 = (void *)WeakRetained[8];
        v43[0] = _NSConcreteStackBlock;
        v43[1] = 3221225472;
        v43[2] = sub_1001CBA5C;
        v43[3] = &unk_10080CE20;
        v43[4] = v11;
        v43[5] = v42;
        v43[6] = v41;
        v43[7] = v40;
        v43[8] = v39;
        v43[9] = v38;
        v43[10] = v18;
        v43[11] = v21;
        v43[12] = v24;
        v43[13] = v27;
        v43[14] = v30;
        v43[15] = v32;
        v43[16] = v34;
        v43[17] = v36;
        objc_msgSend(v37, "enumerateKeysAndObjectsUsingBlock:", v43);
      }
      else if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
      {
        sub_1003D88F4();
      }
      goto LABEL_12;
    }
  }
  else if (v5)
  {
    goto LABEL_5;
  }
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
    sub_1003D87AC();
LABEL_12:

}

void sub_1001CB9DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1001CBA5C(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;

  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a3, "updatesEngine"));
  objc_msgSend(v4, "acceptDeviceMotionInput:", a1 + 32);

}

void sub_1001CBA9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1001CBB1C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1001CBD74(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1001CBDB4(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;

  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a3, "updatesEngine"));
  objc_msgSend(v4, "acceptSelfLocationData:", a1 + 32);

}

void sub_1001CBDF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1001CBE84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{

  _Unwind_Resume(a1);
}

void sub_1001CBEA0(uint64_t a1, uint64_t a2, void *a3)
{
  void *v4;
  void *__p[3];

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a3, "updatesEngine"));
  +[NIGnssExtensionsManager getGnssSatelliteDataVecFromDict:](NIGnssExtensionsManager, "getGnssSatelliteDataVecFromDict:", *(_QWORD *)(a1 + 32));
  objc_msgSend(v4, "acceptGnssSatelliteData:", __p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }

}

void sub_1001CBF08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1001CC020(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1001CC0C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1001CC0E4(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;

  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a3, "updatesEngine"));
  objc_msgSend(v4, "acceptVisionInput:", *(_QWORD *)(a1 + 32));

}

void sub_1001CC124(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1001CC2C4(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  size_t v16;
  char *v17;
  char *v18;
  _QWORD *v19;
  char *v20;

  v4 = a1[1];
  v5 = a1[2];
  if (v5 == v4)
    v6 = 0;
  else
    v6 = 170 * ((v5 - v4) >> 3) - 1;
  v7 = a1[5] + a1[4];
  v8 = v6 - v7;
  v9 = a2 > v8;
  v10 = a2 - v8;
  if (v9)
  {
    sub_1001CC5D4(a1, v10);
    v4 = a1[1];
    v5 = a1[2];
    v7 = a1[4] + a1[5];
  }
  v11 = (_QWORD *)(v4 + 8 * (v7 / 0xAA));
  if (v5 == v4)
    v12 = 0;
  else
    v12 = (char *)(*v11 + 24 * (v7 % 0xAA));
  v19 = (_QWORD *)(v4 + 8 * (v7 / 0xAA));
  v20 = v12;
  sub_1001CCBF4(&v19, a2);
  v13 = (uint64_t)v20;
  if (v12 != v20)
  {
    v14 = v19;
    do
    {
      if (v11 == v14)
        v15 = v13;
      else
        v15 = *v11 + 4080;
      if (v12 == (char *)v15)
      {
        v17 = v12;
      }
      else
      {
        v16 = 24 * ((v15 - (uint64_t)v12 - 24) / 0x18uLL) + 24;
        bzero(v12, v16);
        v17 = &v12[v16];
      }
      a1[5] -= 0x5555555555555555 * ((v17 - v12) >> 3);
      if (v11 == v14)
        break;
      v18 = (char *)v11[1];
      ++v11;
      v12 = v18;
    }
    while (v18 != (char *)v13);
  }
}

uint64_t sub_1001CC430(uint64_t result, _QWORD *a2, uint64_t a3)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;

  v3 = (_QWORD *)result;
  v4 = *(_QWORD *)(result + 32);
  v5 = v4 + *(_QWORD *)(result + 40);
  v6 = *(_QWORD *)(result + 8);
  v7 = *(_QWORD *)(result + 16);
  v8 = (_QWORD *)(v6 + 8 * (v5 / 0xAA));
  if (v7 == v6)
    v9 = 0;
  else
    v9 = *v8 + 24 * (v5 % 0xAA);
  if (v9 != a3)
  {
    v10 = (a3 - *a2) >> 3;
    v11 = 170 * (v8 - a2) - 0x5555555555555555 * ((uint64_t)(v9 - *v8) >> 3) + 0x5555555555555555 * v10;
    if (v11 >= 1)
    {
      v12 = (_QWORD *)(v6 + 8 * (v4 / 0xAA));
      if (v7 == v6)
        v13 = 0;
      else
        v13 = *v12 + 24 * (v4 % 0xAA);
      if (a3 == v13)
        v14 = 0;
      else
        v14 = 170 * (a2 - v12) - 0x5555555555555555 * v10 + 0x5555555555555555 * ((uint64_t)(v13 - *v12) >> 3);
      v18 = v12;
      v19 = v13;
      sub_1001CCBF4(&v18, v14);
      v15 = v19;
      if (v19 != v9)
      {
        v16 = v18;
        do
        {
          if (*(char *)(v15 + 23) < 0)
            operator delete(*(void **)v15);
          v15 += 24;
          if (v15 - *v16 == 4080)
          {
            v17 = v16[1];
            ++v16;
            v15 = v17;
          }
        }
        while (v15 != v9);
      }
      v3[5] -= v11;
      do
        result = sub_1001CCB80(v3, 1);
      while ((result & 1) != 0);
    }
  }
  return result;
}

void sub_1001CC5D4(_QWORD *a1, unint64_t a2)
{
  char *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  int64_t v26;
  char *v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  _QWORD *v39;
  char *v40;
  int64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  int64_t v46;
  char *v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  void *v56;
  _QWORD *v57;
  uint64_t v58;
  char *v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint64_t i;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  _QWORD *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  int64_t v76;
  char *v77;
  unint64_t v78;
  char *v79;
  uint64_t v80;
  char *v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  char *v87;
  void *v88;
  void *__p[2];
  __int128 v90;
  _QWORD *v91;

  v3 = (char *)a1[2];
  v4 = (uint64_t)&v3[-a1[1]];
  if (v4)
    v5 = a2;
  else
    v5 = a2 + 1;
  if (v5 % 0xAA)
    v6 = v5 / 0xAA + 1;
  else
    v6 = v5 / 0xAA;
  v7 = a1[4];
  if (v6 >= v7 / 0xAA)
    v8 = v7 / 0xAA;
  else
    v8 = v6;
  if (v6 <= v7 / 0xAA)
  {
    for (a1[4] = v7 - 170 * v8; v8; --v8)
    {
      v16 = (_QWORD *)a1[1];
      v19 = *v16;
      v17 = (char *)(v16 + 1);
      v18 = v19;
      a1[1] = v17;
      if (v3 == (char *)a1[3])
      {
        v20 = (uint64_t)&v17[-*a1];
        if ((unint64_t)v17 <= *a1)
        {
          if (v3 == (char *)*a1)
            v28 = 1;
          else
            v28 = (uint64_t)&v3[-*a1] >> 2;
          v29 = (char *)sub_10005538C((uint64_t)(a1 + 3), v28);
          v31 = &v29[8 * (v28 >> 2)];
          v32 = (uint64_t *)a1[1];
          v3 = v31;
          v33 = a1[2] - (_QWORD)v32;
          if (v33)
          {
            v3 = &v31[v33 & 0xFFFFFFFFFFFFFFF8];
            v34 = 8 * (v33 >> 3);
            v35 = &v29[8 * (v28 >> 2)];
            do
            {
              v36 = *v32++;
              *(_QWORD *)v35 = v36;
              v35 += 8;
              v34 -= 8;
            }
            while (v34);
          }
          v37 = (char *)*a1;
          *a1 = v29;
          a1[1] = v31;
          a1[2] = v3;
          a1[3] = &v29[8 * v30];
          if (v37)
          {
            operator delete(v37);
            v3 = (char *)a1[2];
          }
        }
        else
        {
          v21 = v20 >> 3;
          v22 = v20 >> 3 < -1;
          v23 = (v20 >> 3) + 2;
          if (v22)
            v24 = v23;
          else
            v24 = v21 + 1;
          v25 = &v17[-8 * (v24 >> 1)];
          v26 = v3 - v17;
          if (v3 != v17)
          {
            memmove(&v17[-8 * (v24 >> 1)], v17, v3 - v17);
            v3 = (char *)a1[1];
          }
          v27 = &v3[-8 * (v24 >> 1)];
          v3 = &v25[v26];
          a1[1] = v27;
          a1[2] = &v25[v26];
        }
      }
      *(_QWORD *)v3 = v18;
      v3 = (char *)(a1[2] + 8);
      a1[2] = v3;
    }
  }
  else
  {
    v9 = v6 - v8;
    v10 = a1[3] - *a1;
    if (v6 - v8 <= (v10 >> 3) - (v4 >> 3))
    {
      if (v9)
      {
        while (a1[3] != a1[2])
        {
          __p[0] = operator new(0xFF0uLL);
          sub_1001389D0(a1, __p);
          --v6;
          if (!--v9)
            goto LABEL_75;
        }
        for (i = 0; i != v9; ++i)
        {
          __p[0] = operator new(0xFF0uLL);
          sub_100138AE4((uint64_t)a1, __p);
          if (a1[2] - a1[1] == 8)
            v64 = 169;
          else
            v64 = 170;
          v65 = v64 + a1[4];
          a1[4] = v65;
        }
        v8 = v6;
      }
      else
      {
LABEL_75:
        v65 = a1[4];
      }
      a1[4] = v65 - 170 * v8;
      if (v8)
      {
        v66 = (char *)a1[2];
        do
        {
          v67 = (_QWORD *)a1[1];
          v70 = *v67;
          v68 = (char *)(v67 + 1);
          v69 = v70;
          a1[1] = v68;
          if (v66 == (char *)a1[3])
          {
            v71 = (uint64_t)&v68[-*a1];
            if ((unint64_t)v68 <= *a1)
            {
              if (v66 == (char *)*a1)
                v78 = 1;
              else
                v78 = (uint64_t)&v66[-*a1] >> 2;
              v79 = (char *)sub_10005538C((uint64_t)(a1 + 3), v78);
              v81 = &v79[8 * (v78 >> 2)];
              v82 = (uint64_t *)a1[1];
              v66 = v81;
              v83 = a1[2] - (_QWORD)v82;
              if (v83)
              {
                v66 = &v81[v83 & 0xFFFFFFFFFFFFFFF8];
                v84 = 8 * (v83 >> 3);
                v85 = &v79[8 * (v78 >> 2)];
                do
                {
                  v86 = *v82++;
                  *(_QWORD *)v85 = v86;
                  v85 += 8;
                  v84 -= 8;
                }
                while (v84);
              }
              v87 = (char *)*a1;
              *a1 = v79;
              a1[1] = v81;
              a1[2] = v66;
              a1[3] = &v79[8 * v80];
              if (v87)
              {
                operator delete(v87);
                v66 = (char *)a1[2];
              }
            }
            else
            {
              v72 = v71 >> 3;
              v22 = v71 >> 3 < -1;
              v73 = (v71 >> 3) + 2;
              if (v22)
                v74 = v73;
              else
                v74 = v72 + 1;
              v75 = &v68[-8 * (v74 >> 1)];
              v76 = v66 - v68;
              if (v66 != v68)
              {
                memmove(&v68[-8 * (v74 >> 1)], v68, v66 - v68);
                v66 = (char *)a1[1];
              }
              v77 = &v66[-8 * (v74 >> 1)];
              v66 = &v75[v76];
              a1[1] = v77;
              a1[2] = &v75[v76];
            }
          }
          *(_QWORD *)v66 = v69;
          v66 = (char *)(a1[2] + 8);
          a1[2] = v66;
          --v8;
        }
        while (v8);
      }
    }
    else
    {
      v11 = v4 >> 3;
      v12 = v10 >> 2;
      if (v12 <= v9 + v11)
        v13 = v9 + v11;
      else
        v13 = v12;
      v14 = v11 - v8;
      v91 = a1 + 3;
      if (v13)
        v15 = (char *)sub_10005538C((uint64_t)(a1 + 3), v13);
      else
        v15 = 0;
      v38 = -170 * v8;
      __p[0] = v15;
      __p[1] = &v15[8 * v14];
      *(void **)&v90 = __p[1];
      *((_QWORD *)&v90 + 1) = &v15[8 * v13];
      do
      {
        v88 = operator new(0xFF0uLL);
        sub_100138C00(__p, &v88);
        --v9;
      }
      while (v9);
      if (v8)
      {
        v39 = (_QWORD *)a1[1];
        v40 = (char *)v90;
        do
        {
          if (v40 == *((char **)&v90 + 1))
          {
            v41 = (char *)__p[1] - (char *)__p[0];
            if (__p[1] <= __p[0])
            {
              if (v40 == __p[0])
                v48 = 1;
              else
                v48 = (v40 - (char *)__p[0]) >> 2;
              v49 = (char *)sub_10005538C((uint64_t)v91, v48);
              v51 = (uint64_t *)__p[1];
              v40 = &v49[8 * (v48 >> 2)];
              v52 = v90 - (unint64_t)__p[1];
              if ((void *)v90 != __p[1])
              {
                v40 = &v49[8 * (v48 >> 2) + (v52 & 0xFFFFFFFFFFFFFFF8)];
                v53 = 8 * (v52 >> 3);
                v54 = &v49[8 * (v48 >> 2)];
                do
                {
                  v55 = *v51++;
                  *(_QWORD *)v54 = v55;
                  v54 += 8;
                  v53 -= 8;
                }
                while (v53);
              }
              v56 = __p[0];
              __p[0] = v49;
              __p[1] = &v49[8 * (v48 >> 2)];
              *(_QWORD *)&v90 = v40;
              *((_QWORD *)&v90 + 1) = &v49[8 * v50];
              if (v56)
              {
                operator delete(v56);
                v40 = (char *)v90;
              }
            }
            else
            {
              v42 = v41 >> 3;
              v22 = v41 >> 3 < -1;
              v43 = (v41 >> 3) + 2;
              if (v22)
                v44 = v43;
              else
                v44 = v42 + 1;
              v45 = (char *)__p[1] - 8 * (v44 >> 1);
              v46 = v40 - (char *)__p[1];
              if (v40 != __p[1])
              {
                memmove((char *)__p[1] - 8 * (v44 >> 1), __p[1], v40 - (char *)__p[1]);
                v40 = (char *)__p[1];
              }
              v47 = &v40[-8 * (v44 >> 1)];
              v40 = &v45[v46];
              __p[1] = v47;
              *(_QWORD *)&v90 = &v45[v46];
            }
          }
          *(_QWORD *)v40 = *v39;
          v40 = (char *)(v90 + 8);
          *(_QWORD *)&v90 = v90 + 8;
          v39 = (_QWORD *)(a1[1] + 8);
          a1[1] = v39;
          --v8;
        }
        while (v8);
      }
      v57 = (_QWORD *)a1[2];
      v58 = -7 - (_QWORD)v57;
      while (v57 != (_QWORD *)a1[1])
      {
        --v57;
        v58 += 8;
        sub_100138D14((uint64_t)__p, v57);
      }
      v59 = (char *)*a1;
      v60 = *(_OWORD *)__p;
      v61 = v90;
      __p[0] = *(void **)a1;
      __p[1] = v57;
      v62 = *((_OWORD *)a1 + 1);
      *(_OWORD *)a1 = v60;
      *((_OWORD *)a1 + 1) = v61;
      v90 = v62;
      a1[4] += v38;
      if (v57 != (_QWORD *)v62)
        *(_QWORD *)&v90 = v62 + (-(v62 + v58) & 0xFFFFFFFFFFFFFFF8);
      if (v59)
        operator delete(v59);
    }
  }
}

void sub_1001CCB0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1001CCB80(_QWORD *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int v7;

  v3 = a1[1];
  v2 = a1[2];
  if (v2 == v3)
    v4 = 0;
  else
    v4 = 170 * ((v2 - v3) >> 3) - 1;
  v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0xAA)
    a2 = 1;
  if (v5 < 0x154)
    v7 = a2;
  else
    v7 = 0;
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

_QWORD *sub_1001CCBF4(_QWORD *result, uint64_t a2)
{
  _QWORD *v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;

  if (a2)
  {
    v2 = (_QWORD *)*result;
    v3 = a2 - 0x5555555555555555 * ((uint64_t)(result[1] - *(_QWORD *)*result) >> 3);
    if ((uint64_t)v3 < 1)
    {
      v5 = 169 - v3;
      v6 = &v2[-(v5 / 0xAA)];
      *result = v6;
      v4 = *v6 + 24 * (170 * (v5 / 0xAA) - v5) + 4056;
    }
    else
    {
      *result = &v2[v3 / 0xAA];
      v4 = v2[v3 / 0xAA] + 24 * (v3 % 0xAA);
    }
    result[1] = v4;
  }
  return result;
}

uint64_t sub_1001CCC90(_QWORD *a1)
{
  void **v2;
  void **v3;
  _QWORD *v4;
  unint64_t v5;
  void **v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  if (v3 == v2)
  {
    v4 = a1 + 5;
    v3 = (void **)a1[1];
  }
  else
  {
    v4 = a1 + 5;
    v5 = a1[4];
    v6 = &v2[v5 / 0xAA];
    v7 = (unint64_t)*v6;
    v8 = (unint64_t)*v6 + 24 * (v5 % 0xAA);
    v9 = (unint64_t)v2[(a1[5] + v5) / 0xAA] + 24 * ((a1[5] + v5) % 0xAA);
    if (v8 != v9)
    {
      do
      {
        if (*(char *)(v8 + 23) < 0)
        {
          operator delete(*(void **)v8);
          v7 = (unint64_t)*v6;
        }
        v8 += 24;
        if (v8 - v7 == 4080)
        {
          v10 = (unint64_t)v6[1];
          ++v6;
          v7 = v10;
          v8 = v10;
        }
      }
      while (v8 != v9);
      v2 = (void **)a1[1];
      v3 = (void **)a1[2];
    }
  }
  *v4 = 0;
  v11 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v11 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v12 = v11 >> 3;
  if (v12 == 1)
  {
    v13 = 85;
  }
  else
  {
    if (v12 != 2)
      goto LABEL_18;
    v13 = 170;
  }
  a1[4] = v13;
LABEL_18:
  while (v2 != v3)
  {
    v14 = *v2++;
    operator delete(v14);
  }
  return sub_10003A428((uint64_t)a1);
}

void sub_1001CCDD4(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_fault_impl(a1, a2, OS_LOG_TYPE_FAULT, a4, &a9, 8u);
}

void sub_1001CCDE4(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = a1;
}

void sub_1001CCDF8()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_100850448);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_100850448))
    {
      sub_10000BF04(qword_100850430, "PRRoseProviderNetworkListener");
      __cxa_atexit((void (*)(void *))&std::string::~string, qword_100850430, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_100850448);
    }
  }
}

void sub_1001CCE74(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_100850448);
  _Unwind_Resume(a1);
}

void sub_1001CCE8C()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_100850468);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_100850468))
    {
      sub_10000BF04(&qword_100850450, "com.apple.nearbyd.accessory.download");
      __cxa_atexit((void (*)(void *))&std::string::~string, &qword_100850450, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_100850468);
    }
  }
}

void sub_1001CCF08(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_100850468);
  _Unwind_Resume(a1);
}

void sub_1001CCF20()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_100850488);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_100850488))
    {
      sub_10000BF04(&qword_100850470, "com.apple.nearbyd.accessory.files");
      __cxa_atexit((void (*)(void *))&std::string::~string, &qword_100850470, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_100850488);
    }
  }
}

void sub_1001CCF9C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_100850488);
  _Unwind_Resume(a1);
}

void sub_1001CCFB4()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_1008504A8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1008504A8))
    {
      sub_10000BF04(qword_100850490, "MA_");
      __cxa_atexit((void (*)(void *))&std::string::~string, qword_100850490, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1008504A8);
    }
  }
}

void sub_1001CD030(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1008504A8);
  _Unwind_Resume(a1);
}

void sub_1001CD048()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_1008504C8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1008504C8))
    {
      sub_10000BF04(qword_1008504B0, "MB_");
      __cxa_atexit((void (*)(void *))&std::string::~string, qword_1008504B0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1008504C8);
    }
  }
}

void sub_1001CD0C4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1008504C8);
  _Unwind_Resume(a1);
}

void sub_1001CD0DC()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_1008504E8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1008504E8))
    {
      sub_10000BF04(qword_1008504D0, "D");
      __cxa_atexit((void (*)(void *))&std::string::~string, qword_1008504D0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1008504E8);
    }
  }
}

void sub_1001CD158(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1008504E8);
  _Unwind_Resume(a1);
}

void sub_1001CD170()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_100850508);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_100850508))
    {
      sub_10000BF04(&qword_1008504F0, "A");
      __cxa_atexit((void (*)(void *))&std::string::~string, &qword_1008504F0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_100850508);
    }
  }
}

void sub_1001CD1EC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_100850508);
  _Unwind_Resume(a1);
}

void sub_1001CD204()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_100850528);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_100850528))
    {
      sub_10000BF04(qword_100850510, "FAS.bin");
      __cxa_atexit((void (*)(void *))&std::string::~string, qword_100850510, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_100850528);
    }
  }
}

void sub_1001CD280(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_100850528);
  _Unwind_Resume(a1);
}

void sub_1001CD298()
{
  unsigned __int8 v0;
  _OWORD *v1;

  v0 = atomic_load((unsigned __int8 *)&qword_100850548);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_100850548))
    {
      qword_100850530 = 0;
      qword_100850538 = 0;
      qword_100850540 = 0;
      v1 = operator new(0x30uLL);
      qword_100850538 = (uint64_t)(v1 + 3);
      qword_100850540 = (uint64_t)(v1 + 3);
      *v1 = xmmword_100470278;
      v1[1] = unk_100470288;
      v1[2] = xmmword_100470298;
      qword_100850530 = (uint64_t)v1;
      __cxa_atexit((void (*)(void *))sub_100009C44, &qword_100850530, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_100850548);
    }
  }
}

void sub_1001CD338(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_100850548);
  _Unwind_Resume(a1);
}

void sub_1001CD350()
{
  void *v0;
  std::string *v1;
  __int128 v2;
  std::string *v3;
  __int128 v4;
  std::string *v5;
  __int128 v6;
  std::string *v7;
  __int128 v8;
  std::string *v9;
  __int128 v10;
  std::string *v11;
  __int128 v12;
  std::string *v13;
  __int128 v14;
  std::string *v15;
  __int128 v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  __int128 v22;
  std::string *v23;
  __int128 v24;
  std::string *v25;
  __int128 v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  __int128 v30;
  std::string *v31;
  __int128 v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  __int128 v36;
  std::string v37;
  std::string v38;

  v0 = objc_autoreleasePoolPush();
  sub_1003610EC(0);
  v1 = std::string::insert(&v37, 0, "reverseLUT_A");
  v2 = *(_OWORD *)&v1->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v1->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v2;
  v1->__r_.__value_.__l.__size_ = 0;
  v1->__r_.__value_.__r.__words[2] = 0;
  v1->__r_.__value_.__r.__words[0] = 0;
  v3 = std::string::append(&v38, ".bin");
  v4 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
  qword_100857E08 = v3->__r_.__value_.__r.__words[2];
  xmmword_100857DF8 = v4;
  v3->__r_.__value_.__l.__size_ = 0;
  v3->__r_.__value_.__r.__words[2] = 0;
  v3->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_100857DF8, (void *)&_mh_execute_header);
  sub_1003610EC(1);
  v5 = std::string::insert(&v37, 0, "reverseLUT_A");
  v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  v7 = std::string::append(&v38, ".bin");
  v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  qword_100857E20 = v7->__r_.__value_.__r.__words[2];
  xmmword_100857E10 = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_100857E10, (void *)&_mh_execute_header);
  sub_1003610EC(2);
  v9 = std::string::insert(&v37, 0, "reverseLUT_A");
  v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  v11 = std::string::append(&v38, ".bin");
  v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  qword_100857E38 = v11->__r_.__value_.__r.__words[2];
  xmmword_100857E28 = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_100857E28, (void *)&_mh_execute_header);
  sub_1003610EC(3);
  v13 = std::string::insert(&v37, 0, "reverseLUT_A");
  v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  v15 = std::string::append(&v38, ".bin");
  v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  qword_100857E50 = v15->__r_.__value_.__r.__words[2];
  xmmword_100857E40 = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_100857E40, (void *)&_mh_execute_header);
  sub_1003610EC(4);
  v17 = std::string::insert(&v37, 0, "reverseLUT_A");
  v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v18;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  v19 = std::string::append(&v38, ".bin");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  qword_100857E68 = v19->__r_.__value_.__r.__words[2];
  xmmword_100857E58 = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_100857E58, (void *)&_mh_execute_header);
  sub_1003610EC(5);
  v21 = std::string::insert(&v37, 0, "reverseLUT_A");
  v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  v23 = std::string::append(&v38, ".bin");
  v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  qword_100857E80 = v23->__r_.__value_.__r.__words[2];
  xmmword_100857E70 = v24;
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_100857E70, (void *)&_mh_execute_header);
  sub_1003610EC(6);
  v25 = std::string::insert(&v37, 0, "reverseLUT_A");
  v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v26;
  v25->__r_.__value_.__l.__size_ = 0;
  v25->__r_.__value_.__r.__words[2] = 0;
  v25->__r_.__value_.__r.__words[0] = 0;
  v27 = std::string::append(&v38, ".bin");
  v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
  qword_100857E98 = v27->__r_.__value_.__r.__words[2];
  xmmword_100857E88 = v28;
  v27->__r_.__value_.__l.__size_ = 0;
  v27->__r_.__value_.__r.__words[2] = 0;
  v27->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_100857E88, (void *)&_mh_execute_header);
  sub_1003610EC(7);
  v29 = std::string::insert(&v37, 0, "reverseLUT_A");
  v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v30;
  v29->__r_.__value_.__l.__size_ = 0;
  v29->__r_.__value_.__r.__words[2] = 0;
  v29->__r_.__value_.__r.__words[0] = 0;
  v31 = std::string::append(&v38, ".bin");
  v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
  qword_100857EB0 = v31->__r_.__value_.__r.__words[2];
  xmmword_100857EA0 = v32;
  v31->__r_.__value_.__l.__size_ = 0;
  v31->__r_.__value_.__r.__words[2] = 0;
  v31->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_100857EA0, (void *)&_mh_execute_header);
  sub_1003610EC(8);
  v33 = std::string::insert(&v37, 0, "reverseLUT_A");
  v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v34;
  v33->__r_.__value_.__l.__size_ = 0;
  v33->__r_.__value_.__r.__words[2] = 0;
  v33->__r_.__value_.__r.__words[0] = 0;
  v35 = std::string::append(&v38, ".bin");
  v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
  qword_100857EC8 = v35->__r_.__value_.__r.__words[2];
  xmmword_100857EB8 = v36;
  v35->__r_.__value_.__l.__size_ = 0;
  v35->__r_.__value_.__r.__words[2] = 0;
  v35->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_100857EB8, (void *)&_mh_execute_header);
  objc_autoreleasePoolPop(v0);
}

void sub_1001CD944(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1001CD9B8@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, (&off_10080D020)[a1]);
}

uint64_t sub_1001CD9CC(_QWORD *a1)
{
  sub_100152A44(a1 + 12);
  sub_100152A44(a1 + 6);
  return sub_100152A44(a1);
}

uint64_t sub_1001CD9FC(uint64_t a1, void *a2, uint64_t a3, char a4, int a5)
{
  id v9;
  id v10;
  const char *v12;
  int v13;
  _OWORD v14[3];
  _OWORD v15[3];
  _OWORD v16[3];
  __int128 v17;

  v9 = a2;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = a4;
  *(_BYTE *)(a1 + 17) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 20) = 0;
  sub_100027674(a1 + 32, a3);
  v10 = v9;
  *(_OWORD *)(a1 + 248) = xmmword_1004702B0;
  *(_QWORD *)(a1 + 64) = v10;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_QWORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 272) = objc_opt_new(NSMutableDictionary);
  if (a5)
  {
    memset(v16, 0, sizeof(v16));
    memset(v15, 0, sizeof(v15));
    memset(v14, 0, sizeof(v14));
    v17 = xmmword_1004702C0;
    sub_1001CFB94((_QWORD *)(a1 + 104), (uint64_t)v14);
    sub_1001CFB94((_QWORD *)(a1 + 152), (uint64_t)v15);
    sub_1001CFB94((_QWORD *)(a1 + 200), (uint64_t)v16);
    *(_OWORD *)(a1 + 248) = v17;
    sub_100152A44(v16);
    sub_100152A44(v15);
    sub_100152A44(v14);
  }
  if (!*(_QWORD *)(a1 + 64))
  {
    v12 = "fUpdatesQueue";
    v13 = 75;
    goto LABEL_8;
  }
  if (!*(_QWORD *)(a1 + 56))
  {
    v12 = "fStateUpdateCb";
    v13 = 76;
LABEL_8:
    __assert_rtn("HybridMotionDetector", "NIServerMotionDetector.mm", v13, v12);
  }

  return a1;
}

void sub_1001CDB80(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  sub_1001CD9CC(v4);
  v6 = *(_QWORD **)(v2 + 56);
  if (v6 == v3)
  {
    v7 = 4;
    v6 = v3;
  }
  else
  {
    if (!v6)
      goto LABEL_6;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_6:
  v8 = *(std::__shared_weak_count **)(v2 + 8);
  if (v8)
    std::__shared_weak_count::__release_weak(v8);

  _Unwind_Resume(a1);
}

uint64_t sub_1001CDC1C(uint64_t a1)
{
  NSObject *v2;
  _QWORD *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  uint8_t v7[16];

  v2 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#nimd,HybridMotionDetector destructed", v7, 2u);
  }

  sub_100152A44((_QWORD *)(a1 + 200));
  sub_100152A44((_QWORD *)(a1 + 152));
  sub_100152A44((_QWORD *)(a1 + 104));

  v3 = *(_QWORD **)(a1 + 56);
  if (v3 == (_QWORD *)(a1 + 32))
  {
    v4 = 4;
    v3 = (_QWORD *)(a1 + 32);
  }
  else
  {
    if (!v3)
      goto LABEL_8;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_8:
  v5 = *(std::__shared_weak_count **)(a1 + 8);
  if (v5)
    std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void sub_1001CDD1C(uint64_t a1)
{
  NSObject *v2;
  void *v3;
  _QWORD *v4;
  uint64_t v5;
  NSObject *v6;
  uint8_t v7[16];

  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 64));
  sub_1001CDDE0(a1);
  v2 = *(NSObject **)(a1 + 264);
  if (v2)
  {
    dispatch_source_cancel(v2);
    v3 = *(void **)(a1 + 264);
    *(_QWORD *)(a1 + 264) = 0;

  }
  v4 = *(_QWORD **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = 0;
  if (v4 == (_QWORD *)(a1 + 32))
  {
    v5 = 4;
    v4 = (_QWORD *)(a1 + 32);
  }
  else
  {
    if (!v4)
      goto LABEL_8;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_8:
  v6 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#nimd,HybridMotionDetector invalided", v7, 2u);
  }
}

void sub_1001CDDE0(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  NSObject *v6;
  uint8_t v7[16];

  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 64));
  sub_1001CE914(a1);
  v2 = *(void **)(a1 + 80);
  *(_QWORD *)(a1 + 80) = 0;

  v3 = *(void **)(a1 + 72);
  if (v3)
    objc_msgSend(v3, "cancelAllOperations");
  sub_1001CE990(a1);
  v4 = *(void **)(a1 + 96);
  *(_QWORD *)(a1 + 96) = 0;

  v5 = *(void **)(a1 + 88);
  if (v5)
    objc_msgSend(v5, "cancelAllOperations");
  *(_BYTE *)(a1 + 17) = 0;
  v6 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#nimd,Stopped monitoring motion updates", v7, 2u);
  }
}

void sub_1001CDE94(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  void *i;
  uint64_t v8;
  void *v9;
  void *v10;
  double v11;
  id v12;
  id v13;
  uint64_t v14;
  float v15;
  void *j;
  void *v17;
  double v18;
  float v19;
  int v20;
  NSObject *v21;
  NSObject *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint8_t buf[4];
  double v32;
  _BYTE v33[128];
  _BYTE v34[128];

  v3 = a2;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 64));
  if (!*(_BYTE *)(a1 + 16))
  {
    sub_1001CE21C(a1, 35.0);
    v29 = 0u;
    v30 = 0u;
    v27 = 0u;
    v28 = 0u;
    v4 = v3;
    v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v27, v34, 16);
    if (v5)
    {
      v6 = *(_QWORD *)v28;
      do
      {
        for (i = 0; i != v5; i = (char *)i + 1)
        {
          if (*(_QWORD *)v28 != v6)
            objc_enumerationMutation(v4);
          v8 = *(_QWORD *)(*((_QWORD *)&v27 + 1) + 8 * (_QWORD)i);
          if (v8)
          {
            v9 = *(void **)(a1 + 272);
            v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)&v27 + 1) + 8 * (_QWORD)i), "discoveryToken"));
            objc_msgSend(v9, "setObject:forKey:", v8, v10);

          }
        }
        v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v27, v34, 16);
      }
      while (v5);
    }

    v11 = sub_100360D00();
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    v12 = *(id *)(a1 + 272);
    v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v23, v33, 16);
    if (v13)
    {
      v14 = *(_QWORD *)v24;
      v15 = 3.4028e38;
      do
      {
        for (j = 0; j != v13; j = (char *)j + 1)
        {
          if (*(_QWORD *)v24 != v14)
            objc_enumerationMutation(v12);
          v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 272), "objectForKey:", *(_QWORD *)(*((_QWORD *)&v23 + 1) + 8 * (_QWORD)j), (_QWORD)v23));
          objc_msgSend(v17, "timestamp");
          if (v11 - v18 < 2.0)
          {
            objc_msgSend(v17, "distance");
            if (v19 < v15)
              v15 = v19;
          }

        }
        v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v23, v33, 16);
      }
      while (v13);
    }
    else
    {
      v15 = 3.4028e38;
    }

    v20 = *(_DWORD *)(a1 + 28);
    if (v20)
    {
      if (v20 == 1 && v15 > 1.25)
      {
        v21 = qword_10085F520;
        if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 134217984;
          v32 = v15;
          _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "#nimd,Minimum range measurement is %f, to switch motion detector type to MotionActivity", buf, 0xCu);
        }
        sub_1001CE3C0(a1);
      }
    }
    else if (v15 < 0.75)
    {
      v22 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134217984;
        v32 = v15;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "#nimd,Minimum range measurement is %f, to switch motion detector type to DeviceMotionGravity", buf, 0xCu);
      }
      sub_1001CE308(a1);
    }
  }

}

void sub_1001CE1B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1001CE21C(uint64_t a1, double a2)
{
  NSObject *v4;
  void *v5;
  dispatch_source_t v6;
  void *v7;
  NSObject *v8;
  dispatch_time_t v9;
  NSObject *v10;
  _QWORD handler[5];

  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 64));
  v4 = *(NSObject **)(a1 + 264);
  if (v4)
  {
    dispatch_source_cancel(v4);
    v5 = *(void **)(a1 + 264);
    *(_QWORD *)(a1 + 264) = 0;

  }
  v6 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, *(dispatch_queue_t *)(a1 + 64));
  v7 = *(void **)(a1 + 264);
  *(_QWORD *)(a1 + 264) = v6;

  v8 = *(NSObject **)(a1 + 264);
  v9 = dispatch_time(0, llround(a2 * 1000000000.0));
  dispatch_source_set_timer(v8, v9, 0xFFFFFFFFFFFFFFFFLL, 0x989680uLL);
  v10 = *(NSObject **)(a1 + 264);
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 3221225472;
  handler[2] = sub_1001CF810;
  handler[3] = &unk_1007FA668;
  handler[4] = a1;
  dispatch_source_set_event_handler(v10, handler);
  dispatch_resume(*(dispatch_object_t *)(a1 + 264));
}

void sub_1001CE308(uint64_t a1)
{
  NSObject *v2;
  uint8_t v3[16];

  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 64));
  if (*(_DWORD *)(a1 + 28))
  {
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
      sub_1003D8A90();
  }
  else
  {
    sub_1001CE914(a1);
    *(_DWORD *)(a1 + 28) = 1;
    sub_1001CEC30((uint64_t *)a1);
    v2 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v3 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#nimd,Switched to motion detector type DeviceMotionGravity", v3, 2u);
    }
  }
}

void sub_1001CE3C0(uint64_t a1)
{
  NSObject *v2;
  uint8_t v3[16];

  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 64));
  if (*(_DWORD *)(a1 + 28) == 1)
  {
    sub_1001CE990(a1);
    *(_DWORD *)(a1 + 28) = 0;
    sub_1001CE66C((uint64_t *)a1);
    v2 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v3 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#nimd,Switched to motion detector type MotionActivity", v3, 2u);
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
  {
    sub_1003D8ABC();
  }
}

void sub_1001CE47C(uint64_t a1)
{
  NSOperationQueue *v2;
  void *v3;
  id v4;
  void *v5;
  NSOperationQueue *v6;
  void *v7;
  id v8;
  void *v9;
  NSObject *v10;
  char *v11;
  void **v12;
  void *__p[2];
  char v14;
  uint8_t buf[4];
  void **v16;

  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 64));
  if (+[CMMotionActivityManager isActivityAvailable](CMMotionActivityManager, "isActivityAvailable"))
  {
    v2 = objc_opt_new(NSOperationQueue);
    v3 = *(void **)(a1 + 72);
    *(_QWORD *)(a1 + 72) = v2;

    objc_msgSend(*(id *)(a1 + 72), "setUnderlyingQueue:", *(_QWORD *)(a1 + 64));
    v4 = objc_alloc_init((Class)CMMotionActivityManager);
    v5 = *(void **)(a1 + 80);
    *(_QWORD *)(a1 + 80) = v4;

    sub_1001CE66C((uint64_t *)a1);
    *(_DWORD *)(a1 + 28) = 0;
    v6 = objc_opt_new(NSOperationQueue);
    v7 = *(void **)(a1 + 88);
    *(_QWORD *)(a1 + 88) = v6;

    objc_msgSend(*(id *)(a1 + 88), "setUnderlyingQueue:", *(_QWORD *)(a1 + 64));
    v8 = objc_alloc_init((Class)CMMotionManager);
    v9 = *(void **)(a1 + 96);
    *(_QWORD *)(a1 + 96) = v8;

    objc_msgSend(*(id *)(a1 + 96), "setDeviceMotionUpdateInterval:", 0.01);
    *(_BYTE *)(a1 + 17) = 1;
    if (*(_BYTE *)(a1 + 16))
      sub_1001CE308(a1);
    v10 = (id)qword_10085F520;
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      if (*(_DWORD *)(a1 + 28))
        v11 = "DeviceMotionGravity";
      else
        v11 = "MotionActivity";
      sub_10000BF04(__p, v11);
      if (v14 >= 0)
        v12 = __p;
      else
        v12 = (void **)__p[0];
      *(_DWORD *)buf = 136315138;
      v16 = v12;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#nimd,Started monitoring motion updates, detector type is %s", buf, 0xCu);
      if (v14 < 0)
        operator delete(__p[0]);
    }

  }
  else if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_FAULT))
  {
    sub_1003D8AE8();
  }
}

void sub_1001CE654(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1001CE66C(uint64_t *a1)
{
  void *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_weak_owners;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  NSObject *v10;
  uint8_t v11[16];
  _QWORD v12[5];
  std::__shared_weak_count *v13;

  dispatch_assert_queue_V2((dispatch_queue_t)a1[8]);
  v2 = (void *)a1[10];
  if (v2)
  {
    v3 = *a1;
    v4 = (std::__shared_weak_count *)a1[1];
    if (v4)
    {
      p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
      do
        v6 = __ldxr(p_shared_weak_owners);
      while (__stxr(v6 + 1, p_shared_weak_owners));
      v2 = (void *)a1[10];
    }
    v7 = a1[9];
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3321888768;
    v12[2] = sub_1001CF3C0;
    v12[3] = &unk_10080CF90;
    v12[4] = v3;
    v13 = v4;
    if (v4)
    {
      v8 = (unint64_t *)&v4->__shared_weak_owners_;
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
    }
    objc_msgSend(v2, "startActivityUpdatesToQueue:withHandler:", v7, v12);
    v10 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#nimd,Started motion activity updates", v11, 2u);
    }
    if (v13)
      std::__shared_weak_count::__release_weak(v13);
    if (v4)
      std::__shared_weak_count::__release_weak(v4);
  }
  else if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
  {
    sub_1003D8B20();
  }
}

void sub_1001CE79C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  std::__shared_weak_count *v16;

  if (a16)
    std::__shared_weak_count::__release_weak(a16);
  if (v16)
    std::__shared_weak_count::__release_weak(v16);
  _Unwind_Resume(exception_object);
}

void sub_1001CE7C0(uint64_t a1)
{
  int v2;
  int v3;
  NSObject *v4;
  char *v5;
  void **v6;
  void *__p[2];
  char v8;
  uint8_t buf[4];
  void **v10;

  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 64));
  sub_1001CE914(a1);
  sub_1001CE990(a1);
  if (objc_msgSend(*(id *)(a1 + 272), "count") || (v2 = *(unsigned __int8 *)(a1 + 16), *(_BYTE *)(a1 + 16)))
    v2 = 1;
  *(_DWORD *)(a1 + 28) = v2;
  *(_BYTE *)(a1 + 17) = 0;
  v3 = *(_DWORD *)(a1 + 24) + 1;
  *(_DWORD *)(a1 + 20) = 0;
  *(_DWORD *)(a1 + 24) = v3;
  sub_1001CEA14((uint64_t *)a1, v3);
  v4 = (id)qword_10085F520;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    if (*(_DWORD *)(a1 + 28))
      v5 = "DeviceMotionGravity";
    else
      v5 = "MotionActivity";
    sub_10000BF04(__p, v5);
    if (v8 >= 0)
      v6 = __p;
    else
      v6 = (void **)__p[0];
    *(_DWORD *)buf = 136315138;
    v10 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#nimd,Paused monitoring motion updates, detector type is %s", buf, 0xCu);
    if (v8 < 0)
      operator delete(__p[0]);
  }

}

void sub_1001CE8FC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1001CE914(uint64_t a1)
{
  void *v2;
  NSObject *v3;
  uint8_t v4[16];

  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 64));
  v2 = *(void **)(a1 + 80);
  if (v2)
    objc_msgSend(v2, "stopActivityUpdates");
  v3 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#nimd,Stopped motion activity updates", v4, 2u);
  }
}

void sub_1001CE990(uint64_t a1)
{
  void *v2;
  NSObject *v3;
  uint8_t v4[16];

  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 64));
  v2 = *(void **)(a1 + 96);
  if (v2)
    objc_msgSend(v2, "stopDeviceMotionUpdates");
  sub_1001CF544((_QWORD *)(a1 + 104));
  v3 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#nimd,Stopped device motion updates", v4, 2u);
  }
}

void sub_1001CEA14(uint64_t *a1, int a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  NSObject *v8;
  unint64_t *v9;
  unint64_t v10;
  _QWORD block[5];
  std::__shared_weak_count *v12;
  int v13;

  dispatch_assert_queue_V2((dispatch_queue_t)a1[8]);
  v4 = *a1;
  v5 = (std::__shared_weak_count *)a1[1];
  if (v5)
  {
    p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
    do
      v7 = __ldxr(p_shared_weak_owners);
    while (__stxr(v7 + 1, p_shared_weak_owners));
  }
  v8 = a1[8];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3321888768;
  block[2] = sub_1001CF668;
  block[3] = &unk_10080CFF0;
  block[4] = v4;
  v12 = v5;
  if (v5)
  {
    v9 = (unint64_t *)&v5->__shared_weak_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v13 = a2;
  dispatch_async(v8, block);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  if (v5)
    std::__shared_weak_count::__release_weak(v5);
}

void sub_1001CEAD8(uint64_t a1)
{
  int v2;
  NSObject *v3;
  char *v4;
  void **v5;
  void *__p[2];
  char v7;
  uint8_t buf[4];
  void **v9;

  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 64));
  if (!*(_BYTE *)(a1 + 17))
  {
    v2 = *(_DWORD *)(a1 + 28);
    if (v2 == 1)
    {
      sub_1001CEC30((uint64_t *)a1);
      *(_BYTE *)(a1 + 17) = 1;
      sub_1001CE21C(a1, 10.0);
    }
    else if (!v2)
    {
      sub_1001CE66C((uint64_t *)a1);
      *(_BYTE *)(a1 + 17) = 1;
    }
    v3 = (id)qword_10085F520;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      if (*(_DWORD *)(a1 + 28))
        v4 = "DeviceMotionGravity";
      else
        v4 = "MotionActivity";
      sub_10000BF04(__p, v4);
      if (v7 >= 0)
        v5 = __p;
      else
        v5 = (void **)__p[0];
      *(_DWORD *)buf = 136315138;
      v9 = v5;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#nimd,Continued monitoring motion updates, detector type is %s", buf, 0xCu);
      if (v7 < 0)
        operator delete(__p[0]);
    }

  }
}

void sub_1001CEC18(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1001CEC30(uint64_t *a1)
{
  void *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_weak_owners;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  NSObject *v10;
  uint8_t v11[16];
  _QWORD v12[5];
  std::__shared_weak_count *v13;

  dispatch_assert_queue_V2((dispatch_queue_t)a1[8]);
  v2 = (void *)a1[12];
  if (v2)
  {
    v3 = *a1;
    v4 = (std::__shared_weak_count *)a1[1];
    if (v4)
    {
      p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
      do
        v6 = __ldxr(p_shared_weak_owners);
      while (__stxr(v6 + 1, p_shared_weak_owners));
      v2 = (void *)a1[12];
    }
    v7 = a1[11];
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3321888768;
    v12[2] = sub_1001CF49C;
    v12[3] = &unk_10080CFC0;
    v12[4] = v3;
    v13 = v4;
    if (v4)
    {
      v8 = (unint64_t *)&v4->__shared_weak_owners_;
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
    }
    objc_msgSend(v2, "startDeviceMotionUpdatesToQueue:withHandler:", v7, v12);
    v10 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#nimd,Started device motion updates", v11, 2u);
    }
    if (v13)
      std::__shared_weak_count::__release_weak(v13);
    if (v4)
      std::__shared_weak_count::__release_weak(v4);
  }
  else if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
  {
    sub_1003D8B4C();
  }
}

void sub_1001CED60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  std::__shared_weak_count *v16;

  if (a16)
    std::__shared_weak_count::__release_weak(a16);
  if (v16)
    std::__shared_weak_count::__release_weak(v16);
  _Unwind_Resume(exception_object);
}

void sub_1001CED84(uint64_t a1)
{
  NSObject *v2;
  uint8_t v3[16];

  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 64));
  v2 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#nimd,Motion state is forced to be Moving", v3, 2u);
  }
  *(_DWORD *)(a1 + 20) = 1;
  sub_1001CEA14((uint64_t *)a1, *(_DWORD *)(a1 + 24));
}

void sub_1001CEE08(uint64_t a1, void *a2)
{
  id v3;
  int v4;
  int v5;
  NSObject *v6;
  int v7;
  void **v8;
  int v9;
  char *v10;
  void **v11;
  void **v12;
  void *__p[2];
  char v14;
  void *v15[2];
  char v16;
  uint8_t buf[4];
  void **v18;
  __int16 v19;
  int v20;
  __int16 v21;
  void **v22;

  v3 = a2;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 64));
  if (v3 && !*(_DWORD *)(a1 + 28))
  {
    if (objc_msgSend(v3, "stationary"))
      v4 = objc_msgSend(v3, "confidence") == (id)2 ? 2 : 1;
    else
      v4 = 1;
    if (*(_DWORD *)(a1 + 20) != v4)
    {
      v5 = *(_DWORD *)(a1 + 24) + 1;
      *(_DWORD *)(a1 + 20) = v4;
      *(_DWORD *)(a1 + 24) = v5;
      v6 = (id)qword_10085F520;
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        sub_10000BF04(v15, (&off_10080D020)[*(int *)(a1 + 20)]);
        v7 = v16;
        v8 = (void **)v15[0];
        v9 = *(_DWORD *)(a1 + 24);
        if (*(_DWORD *)(a1 + 28))
          v10 = "DeviceMotionGravity";
        else
          v10 = "MotionActivity";
        sub_10000BF04(__p, v10);
        v11 = v15;
        if (v7 < 0)
          v11 = v8;
        if (v14 >= 0)
          v12 = __p;
        else
          v12 = (void **)__p[0];
        *(_DWORD *)buf = 136315650;
        v18 = v11;
        v19 = 1024;
        v20 = v9;
        v21 = 2080;
        v22 = v12;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#nimd,Generated new motion state %s with event id %u, detector type is %s", buf, 0x1Cu);
        if (v14 < 0)
          operator delete(__p[0]);
        if (v16 < 0)
          operator delete(v15[0]);
      }

      sub_1001CEA14((uint64_t *)a1, *(_DWORD *)(a1 + 24));
    }
  }

}

void sub_1001CEFD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;
  void *v18;

  if (a17 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1001CF010(uint64_t a1, void *a2)
{
  id v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  unint64_t v9;
  int v10;
  NSObject *v11;
  int v12;
  void **v13;
  int v14;
  char *v15;
  void **v16;
  void **v17;
  void *__p[2];
  char v19;
  void *v20[2];
  char v21;
  uint8_t buf[4];
  void **v23;
  __int16 v24;
  int v25;
  __int16 v26;
  void **v27;

  v3 = a2;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 64));
  if (v3)
  {
    if (*(_DWORD *)(a1 + 28) == 1)
    {
      objc_msgSend(v3, "gravity");
      v5 = v4;
      objc_msgSend(v3, "gravity");
      v7 = v6;
      objc_msgSend(v3, "gravity");
      v9 = sub_1001CF254((_QWORD *)(a1 + 104), *(_DWORD *)(a1 + 20), v5 * -9.80665, v7 * -9.80665, v8 * -9.80665);
      if ((v9 & 0xFF00000000) != 0 && *(_DWORD *)(a1 + 20) != (_DWORD)v9)
      {
        v10 = *(_DWORD *)(a1 + 24) + 1;
        *(_DWORD *)(a1 + 20) = v9;
        *(_DWORD *)(a1 + 24) = v10;
        v11 = (id)qword_10085F520;
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          sub_10000BF04(v20, (&off_10080D020)[*(int *)(a1 + 20)]);
          v12 = v21;
          v13 = (void **)v20[0];
          v14 = *(_DWORD *)(a1 + 24);
          if (*(_DWORD *)(a1 + 28))
            v15 = "DeviceMotionGravity";
          else
            v15 = "MotionActivity";
          sub_10000BF04(__p, v15);
          v16 = v20;
          if (v12 < 0)
            v16 = v13;
          if (v19 >= 0)
            v17 = __p;
          else
            v17 = (void **)__p[0];
          *(_DWORD *)buf = 136315650;
          v23 = v16;
          v24 = 1024;
          v25 = v14;
          v26 = 2080;
          v27 = v17;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#nimd,Generated new motion state %s with event id %u, detector type is %s", buf, 0x1Cu);
          if (v19 < 0)
            operator delete(__p[0]);
          if (v21 < 0)
            operator delete(v20[0]);
        }

        sub_1001CEA14((uint64_t *)a1, *(_DWORD *)(a1 + 24));
      }
    }
  }

}

void sub_1001CF204(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;
  void *v18;

  if (a17 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

unint64_t sub_1001CF254(_QWORD *a1, int a2, double a3, double a4, double a5)
{
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  const mach_header_64 *v12;
  double v13;
  double *v14;
  BOOL v15;
  double v17;
  double v18;
  double v19;

  v18 = a4;
  v19 = a3;
  v17 = a5;
  sub_1001CF89C(a1, &v19);
  sub_1001CF89C(a1 + 6, &v18);
  sub_1001CF89C(a1 + 12, &v17);
  v7 = a1[5];
  if (v7 >= 0xB)
  {
    ++a1[4];
    a1[5] = v7 - 1;
    sub_1001CFCA4((uint64_t)a1, 1);
  }
  v8 = a1[11];
  if (v8 >= 0xB)
  {
    ++a1[10];
    a1[11] = v8 - 1;
    sub_1001CFCA4((uint64_t)(a1 + 6), 1);
  }
  v9 = a1[17];
  if (v9 >= 0xB)
  {
    ++a1[16];
    a1[17] = v9 - 1;
    sub_1001CFCA4((uint64_t)(a1 + 12), 1);
  }
  v10 = a1[5];
  if (v10 != a1[11])
    sub_1003D8BC8();
  if (v10 != a1[17])
    sub_1003D8BA0();
  if (v10 >= 0xA)
  {
    if (v10 != 10)
      sub_1003D8B78();
    v13 = sub_1001CF920((uint64_t)a1, a1, a1 + 6, a1 + 12);
    if (!a2 || a2 == 2)
    {
      v14 = (double *)(a1 + 19);
    }
    else
    {
      if (a2 != 1)
      {
        v11 = 0;
LABEL_22:
        v12 = &_mh_execute_header;
        return (unint64_t)v12 | v11;
      }
      v14 = (double *)(a1 + 18);
    }
    v15 = v13 <= *v14;
    v11 = 2;
    if (!v15)
      v11 = 1;
    goto LABEL_22;
  }
  v11 = 0;
  v12 = 0;
  return (unint64_t)v12 | v11;
}

void sub_1001CF3C0(uint64_t a1, void *a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  id v9;

  v9 = a2;
  v3 = *(std::__shared_weak_count **)(a1 + 40);
  if (v3)
  {
    v4 = std::__shared_weak_count::lock(v3);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)(a1 + 32);
      if (v6)
        sub_1001CEE08(v6, v9);
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }

}

void sub_1001CF44C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, char a11)
{
  sub_10001AE68((uint64_t)&a11);

  _Unwind_Resume(a1);
}

uint64_t sub_1001CF468(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void sub_1001CF48C(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_1001CF49C(uint64_t a1, void *a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  id v9;

  v9 = a2;
  v3 = *(std::__shared_weak_count **)(a1 + 40);
  if (v3)
  {
    v4 = std::__shared_weak_count::lock(v3);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)(a1 + 32);
      if (v6)
        sub_1001CF010(v6, v9);
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }

}

void sub_1001CF528(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, char a11)
{
  sub_10001AE68((uint64_t)&a11);

  _Unwind_Resume(a1);
}

void sub_1001CF544(_QWORD *a1)
{
  void **v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void **v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void **v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = (void **)a1[1];
  v3 = a1[2];
  a1[5] = 0;
  v4 = v3 - (_QWORD)v2;
  if (v4 >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v5 = a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v4 = v5 - (_QWORD)v2;
    }
    while (v4 > 0x10);
  }
  if (v4 >> 3 == 1)
  {
    v6 = 256;
  }
  else
  {
    if (v4 >> 3 != 2)
      goto LABEL_8;
    v6 = 512;
  }
  a1[4] = v6;
LABEL_8:
  v7 = (void **)a1[7];
  v8 = a1[8];
  a1[11] = 0;
  v9 = v8 - (_QWORD)v7;
  if (v9 >= 0x11)
  {
    do
    {
      operator delete(*v7);
      v10 = a1[8];
      v7 = (void **)(a1[7] + 8);
      a1[7] = v7;
      v9 = v10 - (_QWORD)v7;
    }
    while (v9 > 0x10);
  }
  if (v9 >> 3 == 1)
  {
    v11 = 256;
  }
  else
  {
    if (v9 >> 3 != 2)
      goto LABEL_15;
    v11 = 512;
  }
  a1[10] = v11;
LABEL_15:
  v12 = (void **)a1[13];
  v13 = a1[14];
  a1[17] = 0;
  v14 = v13 - (_QWORD)v12;
  if (v14 >= 0x11)
  {
    do
    {
      operator delete(*v12);
      v15 = a1[14];
      v12 = (void **)(a1[13] + 8);
      a1[13] = v12;
      v14 = v15 - (_QWORD)v12;
    }
    while (v14 > 0x10);
  }
  if (v14 >> 3 == 1)
  {
    v16 = 256;
  }
  else
  {
    if (v14 >> 3 != 2)
      return;
    v16 = 512;
  }
  a1[16] = v16;
}

void sub_1001CF668(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  void **v8;
  int v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  uint8_t buf[4];
  void **v17;
  __int16 v18;
  int v19;

  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    v15 = v3;
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 32);
      v14 = v5;
      if (v5)
      {
        if (*(_DWORD *)(a1 + 48) == *(_DWORD *)(v5 + 24))
        {
          v6 = *(_QWORD *)(v5 + 56);
          if (v6)
          {
            LODWORD(__p[0]) = *(_DWORD *)(v5 + 20);
            (*(void (**)(uint64_t, void **))(*(_QWORD *)v6 + 48))(v6, __p);
            v7 = (id)qword_10085F520;
            if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
            {
              sub_10000BF04(__p, (&off_10080D020)[*(int *)(v5 + 20)]);
              if (v13 >= 0)
                v8 = __p;
              else
                v8 = (void **)__p[0];
              v9 = *(_DWORD *)(a1 + 48);
              *(_DWORD *)buf = 136315394;
              v17 = v8;
              v18 = 1024;
              v19 = v9;
              _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#nimd,Delivered motion state %s with motion event id %u", buf, 0x12u);
              if (v13 < 0)
                operator delete(__p[0]);
            }

          }
        }
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_1001CF7E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  void *v5;
  va_list va;

  va_start(va, a5);

  sub_10001AE68((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1001CF810(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  uint8_t v3[16];

  v1 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(v1 + 17) && *(_DWORD *)(v1 + 28) == 1 && !*(_BYTE *)(v1 + 16))
  {
    v2 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v3 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#nimd,No range measurements for too long time, switch to detector type of MotionActivity", v3, 2u);
    }
    sub_1001CE3C0(v1);
  }
}

double sub_1001CF89C(_QWORD *a1, double *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  double result;

  v4 = a1[2];
  v5 = a1[1];
  if (v4 == v5)
    v6 = 0;
  else
    v6 = ((v4 - v5) << 6) - 1;
  v7 = a1[5];
  v8 = v7 + a1[4];
  if (v6 == v8)
  {
    sub_1001CFE2C(a1);
    v5 = a1[1];
    v7 = a1[5];
    v8 = a1[4] + v7;
  }
  result = *a2;
  *(double *)(*(_QWORD *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
  return result;
}

double sub_1001CF920(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  double v12;
  uint64_t v13;
  double v14;
  double v15;
  double v16;
  unint64_t v17;
  unint64_t v18;
  double v19;
  double v20;
  double v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  double v29[3];
  double v30[3];

  v4 = a2[5];
  if (a3[5] != v4)
    sub_1003D8C18();
  if (a4[5] != v4)
    sub_1003D8BF0();
  if (!v4)
    return 0.0;
  v5 = 0;
  v6 = a2[1];
  v7 = a3[1];
  v8 = a4[1];
  v23 = a4[4];
  v24 = a3[4];
  v9 = v23 + 1;
  v10 = v24 + 1;
  v25 = a2[4];
  v26 = a2[5];
  v11 = v25 + 1;
  v12 = 0.0;
  v13 = 1;
  do
  {
    v27 = v5 + 1;
    v28 = v9;
    if (v4 > v5 + 1)
    {
      v14 = *(double *)(*(_QWORD *)(v6 + (((unint64_t)(v25 + v5) >> 6) & 0x3FFFFFFFFFFFFF8))
                      + 8 * ((v25 + v5) & 0x1FF));
      v15 = *(double *)(*(_QWORD *)(v7 + (((unint64_t)(v24 + v5) >> 6) & 0x3FFFFFFFFFFFFF8))
                      + 8 * ((v24 + v5) & 0x1FF));
      v16 = *(double *)(*(_QWORD *)(v8 + (((unint64_t)(v23 + v5) >> 6) & 0x3FFFFFFFFFFFFF8))
                      + 8 * ((v23 + v5) & 0x1FF));
      v17 = v11;
      v18 = v10;
      do
      {
        v30[0] = v14;
        v30[1] = v15;
        v19 = *(double *)(*(_QWORD *)(v6 + ((v17 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v17 & 0x1FF));
        v30[2] = v16;
        v20 = *(double *)(*(_QWORD *)(v7 + ((v18 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v18 & 0x1FF));
        v29[0] = v19;
        v29[1] = v20;
        v29[2] = *(double *)(*(_QWORD *)(v8 + ((v9 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v9 & 0x1FF));
        v21 = sub_1001CFAE4(a1, v30, v29);
        if (v21 > v12)
          v12 = v21;
        ++v9;
        ++v18;
        ++v17;
        --v4;
      }
      while (v13 != v4);
    }
    ++v13;
    v9 = v28 + 1;
    ++v10;
    ++v11;
    v5 = v27;
    v4 = v26;
  }
  while (v27 != v26);
  return v12;
}

long double sub_1001CFAE4(uint64_t a1, double *a2, double *a3)
{
  double v3;
  double v4;
  double v5;
  double v6;
  long double result;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = sqrt(v4 * v4 + v3 * v3 + v5 * v5);
  result = 0.0;
  if (v6 != 0.0)
  {
    v8 = *a3;
    v9 = a3[1];
    v10 = a3[2];
    v11 = sqrt(v9 * v9 + v8 * v8 + v10 * v10);
    if (v11 != 0.0)
    {
      v12 = (v4 * v9 + v3 * v8 + v5 * v10) / v6 / v11;
      if (v12 <= 1.0)
      {
        if (v12 >= -1.0)
          return acos(v12) / 3.14159265 * 180.0;
        else
          return 180.0;
      }
    }
  }
  return result;
}

uint64_t sub_1001CFB94(_QWORD *a1, uint64_t a2)
{
  void **v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  v4 = (void **)a1[1];
  v5 = a1[2];
  a1[5] = 0;
  v6 = v5 - (_QWORD)v4;
  if (v6 >= 0x11)
  {
    do
    {
      operator delete(*v4);
      v7 = a1[2];
      v4 = (void **)(a1[1] + 8);
      a1[1] = v4;
      v6 = v7 - (_QWORD)v4;
    }
    while (v6 > 0x10);
  }
  if (v6 >> 3 == 1)
  {
    v8 = 256;
    goto LABEL_7;
  }
  if (v6 >> 3 == 2)
  {
    v8 = 512;
LABEL_7:
    a1[4] = v8;
  }
  sub_1001CFC34(a1);
  result = sub_1001CFDC0((uint64_t)a1, a2);
  a1[4] = *(_QWORD *)(a2 + 32);
  a1[5] = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1001CFC34(_QWORD *a1)
{
  uint64_t i;
  uint64_t v3;

  if (a1[5])
  {
    sub_1001CFCA4((uint64_t)a1, 0);
    sub_1001B0F54(a1, 0);
  }
  else
  {
    v3 = a1[1];
    for (i = a1[2]; i != v3; a1[2] = i)
    {
      operator delete(*(void **)(i - 8));
      v3 = a1[1];
      i = a1[2] - 8;
    }
    a1[4] = 0;
  }
  sub_1001CFD00((uint64_t)a1);
}

uint64_t sub_1001CFCA4(uint64_t a1, int a2)
{
  unint64_t v2;
  int v4;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2 < 0x200)
    a2 = 1;
  if (v2 < 0x400)
    v4 = a2;
  else
    v4 = 0;
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(_QWORD *)(a1 + 8) += 8;
    *(_QWORD *)(a1 + 32) -= 512;
  }
  return v4 ^ 1u;
}

void sub_1001CFD00(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;

  v3 = *(_QWORD *)(a1 + 24);
  v2 = a1 + 24;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v6 = (v5 - v4) >> 3;
  if (v6 < (v3 - *(_QWORD *)a1) >> 3)
  {
    if (v5 == v4)
    {
      v10 = 0;
      v7 = 0;
    }
    else
    {
      v7 = (char *)sub_10005538C(v2, v6);
      v8 = *(_QWORD *)(a1 + 8);
      v5 = *(_QWORD *)(a1 + 16);
      v10 = &v7[8 * v9];
      v11 = v5 - v8;
      if (v5 != v8)
      {
        v12 = 0;
        v13 = 8 * (v11 >> 3);
        do
        {
          *(_QWORD *)&v7[v12] = *(_QWORD *)(v8 + v12);
          v12 += 8;
        }
        while (v13 != v12);
        v5 = *(_QWORD *)(a1 + 8);
        v14 = *(_QWORD *)(a1 + 16);
        goto LABEL_9;
      }
    }
    v14 = v5;
LABEL_9:
    v15 = v14 - v5;
    v16 = *(void **)a1;
    *(_QWORD *)a1 = v7;
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = &v7[v15];
    *(_QWORD *)(a1 + 24) = v10;
    if (v16)
      operator delete(v16);
  }
}

uint64_t sub_1001CFDC0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  if (v4 != v5)
    *(_QWORD *)(a1 + 16) = v4 + ((v5 - v4 + 7) & 0xFFFFFFFFFFFFFFF8);
  sub_1001CFD00(a1);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  return a1;
}

void sub_1001CFE2C(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x200;
  v4 = v2 - 512;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10005538C(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      sub_1001389D0(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    sub_100138AE4((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10005538C((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_10005538C((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  sub_100138C00(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_100138D14((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_1001D00F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_1001D0140(unsigned int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unsigned int v12;
  uint64_t v13;

  if (qword_100857EF8 != -1)
    dispatch_once(&qword_100857EF8, &stru_10080D038);
  if (byte_100857EF0)
  {
    v12 = a1 | 1;
    if (a2 != 1)
      v12 = a1;
    if (a2 == 2)
      v13 = a1 | 2;
    else
      v13 = v12;
    kdebug_trace(v13, a3, a4, a5, a6);
  }
}

void sub_1001D01F0(id a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  byte_100857EF0 = objc_msgSend(v1, "BOOLForKey:", CFSTR("LogAriadneSignposts"));

}

void sub_1001D023C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1001D0448(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1001D07A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1001D0800(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1001D0B44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1001D10A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,void *a28,void *a29,void *a30,void *a31)
{
  void *v31;
  void *v32;
  void *v33;
  void *v34;

  _Unwind_Resume(a1);
}

void sub_1001D11A0()
{
  JUMPOUT(0x1001D1190);
}

void sub_1001D184C(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  _Unwind_Resume(a1);
}

void sub_1001D192C()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 160) = v0;
  JUMPOUT(0x1001D191CLL);
}

void sub_1001D1EA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13)
{
  uint64_t v13;
  float v14;
  double v15;
  float v16;
  float v17;
  double v18;
  float v19;

  if (v16 != v19)
  if (v15 != v18)

  if (v14 != v17)
  _Unwind_Resume(a1);
}

void sub_1001D1FB8()
{
  JUMPOUT(0x1001D1F14);
}

void sub_1001D1FC0()
{
  JUMPOUT(0x1001D1F18);
}

void sub_1001D1FC8()
{
  JUMPOUT(0x1001D1F1CLL);
}

void sub_1001D1FD0()
{
  JUMPOUT(0x1001D1F20);
}

void sub_1001D1FD8()
{
  JUMPOUT(0x1001D1F38);
}

void sub_1001D1FE0()
{
  JUMPOUT(0x1001D1F40);
}

void sub_1001D1FE8()
{
  JUMPOUT(0x1001D1F48);
}

void sub_1001D1FF0()
{
  JUMPOUT(0x1001D1F80);
}

void sub_1001D1FF8()
{
  JUMPOUT(0x1001D1F88);
}

void sub_1001D2000()
{
  JUMPOUT(0x1001D1F30);
}

void sub_1001D2008()
{
  JUMPOUT(0x1001D1F28);
}

void sub_1001D2010()
{
  JUMPOUT(0x1001D1F50);
}

void sub_1001D2018()
{
  JUMPOUT(0x1001D1F78);
}

unint64_t sub_1001D2020(__n128 a1)
{
  void *v1;
  unint64_t v2;
  double v3;
  void *v4;
  unint64_t v5;
  void *v6;
  unint64_t v7;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:"));
  v2 = (unint64_t)objc_msgSend(v1, "hash");
  HIDWORD(v3) = a1.n128_u32[1];
  LODWORD(v3) = a1.n128_u32[1];
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v3));
  v5 = (unint64_t)objc_msgSend(v4, "hash");
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", COERCE_DOUBLE(__PAIR64__(a1.n128_u32[1], a1.n128_u32[2]))));
  v7 = v5 ^ v2 ^ (unint64_t)objc_msgSend(v6, "hash");

  return v7;
}

void sub_1001D20C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1001D22DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1001D283C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  double v3;
  double v4;

  if (v3 != v4)

  _Unwind_Resume(a1);
}

void sub_1001D295C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1001D2CC4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1001D2DD4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1001D2E80(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1001D2F88(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1001D3110(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1001D3204(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1001D3270(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1001D3318(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1001D337C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1001D3504(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1001D36D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1001D37F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1001D38A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1001D3934(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1001D39A4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1001D3A28(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1001D3AA0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1001D3B18(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1001D3C50(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v3;

  _Unwind_Resume(a1);
}

uint64_t sub_1001D3C9C@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;
  __int128 v4;
  uint64_t v5;

  v4 = 0uLL;
  v5 = 0;
  result = sub_100360CC0(&v4, (char *)&v4 + 8, &v5);
  if ((_DWORD)result)
  {
    *(_OWORD *)a1 = v4;
    *(_QWORD *)(a1 + 16) = v5;
    v3 = 1;
  }
  else
  {
    v3 = 0;
    *(_BYTE *)a1 = 0;
  }
  *(_BYTE *)(a1 + 24) = v3;
  return result;
}

void sub_1001D3D08()
{
  operator delete();
}

void sub_1001D3D1C(_DWORD *a1, void *a2)
{
  id v3;
  uint8_t buf[8];
  void *__p;

  v3 = a2;
  *a1 = *((_DWORD *)sub_100004784() + 144);
  sub_10000BF04(&__p, "regulatory,geo,sm");
  *(_QWORD *)buf = a1;
  operator new();
}

void sub_1001D43B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void **a11, _QWORD *a12, _QWORD *a13, uint64_t a14, uint64_t a15, void **a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47)
{
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void **v50;
  void **v51;
  uint64_t v52;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;

  sub_1001FA9AC(v47);
  sub_1001D8FD0(v52);
  sub_1001D925C(a14, v54, v55, v56, v57, v58, v59, v60);
  sub_1001D4B7C(a15);

  if (*(char *)(v48 + 463) < 0)
    operator delete(*a11);

  sub_1001D8660((uint64_t *)(v48 + 408), 0, v61, v62, v63, v64, v65, v66);
  if (*(char *)(v48 + 399) < 0)
    operator delete(*a16);
  if (*(char *)(v48 + 375) < 0)
    operator delete(*(void **)(v48 + 352));
  if (*(char *)(v48 + 343) < 0)
    operator delete(*(void **)(v48 + 320));
  if (*(char *)(v48 + 319) < 0)
    operator delete(*v51);
  sub_1001D9FE8(v48 + 256);
  if (*(char *)(v48 + 239) < 0)
    operator delete(*v50);
  v67 = *(_QWORD **)(v48 + 208);
  if (v67 == a12)
  {
    v68 = 4;
    v67 = a12;
  }
  else
  {
    if (!v67)
      goto LABEL_18;
    v68 = 5;
  }
  (*(void (**)(void))(*v67 + 8 * v68))();
LABEL_18:
  v69 = *(_QWORD **)(v48 + 176);
  if (v69 == a13)
  {
    v70 = 4;
    v69 = a13;
  }
  else
  {
    if (!v69)
      goto LABEL_23;
    v70 = 5;
  }
  (*(void (**)(void))(*v69 + 8 * v70))();
LABEL_23:
  sub_1001D9F6C(v49);

  _Unwind_Resume(a1);
}

uint64_t sub_1001D4728(uint64_t a1, int a2)
{
  if (a2 != 3)
    return a2 == 2;
  sub_1001D4E40(a1);
  return 2;
}

uint64_t sub_1001D4758(uint64_t a1, int a2)
{
  switch(a2)
  {
    case 3:
      return 2;
    case 2:
      sub_1001D842C(a1, (std::string *)(a1 + 296));
      break;
    case 0:
      sub_1001D842C(a1, (std::string *)(a1 + 296));
      sub_1001D4F8C(a1);
      break;
  }
  return 1;
}

uint64_t sub_1001D47B8(uint64_t a1, int a2)
{
  void *v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  BOOL v15;
  int v16;
  uint64_t v17;
  double v18;
  int v19;
  int v20;

  v4 = sub_100007824();
  if ((byte_100857F08 & 1) == 0)
  {
    v5 = (uint64_t)v4;
    if (sub_100391AE8((uint64_t)v4, (_DWORD *)&qword_100852920 + 1, &qword_100852920))
    {
      if (!sub_100391BFC(v5, &dword_100852928))
        dword_100852928 = 35040;
    }
    else
    {
      qword_100852920 = 0x12C00000258;
    }
    v6 = qword_100857F00;
    if (os_log_type_enabled((os_log_t)qword_100857F00, OS_LOG_TYPE_DEBUG))
      sub_1003D8ECC(v6);
    byte_100857F08 = 1;
  }
  v7 = 2;
  switch(a2)
  {
    case 0:
      sub_1001D8500();
    case 1:
      sub_1001D50D8(a1);
      sub_100183E70((uint64_t **)(a1 + 8), 8);
      sub_100183E70((uint64_t **)(a1 + 8), 9);
      sub_1001D4F8C(a1);
      sub_1001D8660((uint64_t *)(a1 + 408), 0, v8, v9, v10, v11, v12, v13);
      return 2;
    case 2:
      goto LABEL_27;
    case 3:
      sub_1001D842C(a1, (std::string *)(a1 + 296));
      return v7;
    case 6:
      if (*(_BYTE *)(a1 + 432))
        return 3;
      else
        return 2;
    case 7:
      sub_1001D50D8(a1);
      *(_DWORD *)(a1 + 436) = dword_100852928;
      sub_100183E70((uint64_t **)(a1 + 8), 8);
      sub_100183E70((uint64_t **)(a1 + 8), 9);
      sub_1001D4F8C(a1);
      return 2;
    case 8:
      sub_1001D50D8(a1);
      v14 = *(_DWORD *)(a1 + 436);
      v15 = __OFSUB__(v14, 1);
      v16 = v14 - 1;
      if (v16 < 0 == v15)
      {
        *(_DWORD *)(a1 + 436) = v16;
        v17 = a1 + 8;
        v18 = (double)(int)qword_100852920;
        v19 = 9;
        goto LABEL_30;
      }
      *(_DWORD *)(a1 + 436) = dword_100852928;
      std::string::assign((std::string *)(a1 + 296), off_100853250[0]);
LABEL_27:
      v7 = 1;
      break;
    case 9:
      if (os_log_type_enabled((os_log_t)qword_100857F00, OS_LOG_TYPE_DEBUG))
        sub_1003D8E48();
      sub_1001D5064(a1);
      sub_1001DA560(a1 + 8, 8, (double)SHIDWORD(qword_100852920));
      return 2;
    case 10:
      if (*(_BYTE *)(a1 + 432))
      {
        *(_DWORD *)(a1 + 436) = dword_100852928;
        if (os_log_type_enabled((os_log_t)qword_100857F00, OS_LOG_TYPE_DEBUG))
          sub_1003D8DE4();
      }
      else
      {
        sub_1001D4E40(a1);
        if (*(_BYTE *)(a1 + 432))
        {
          sub_1001D5064(a1);
          v20 = HIDWORD(qword_100852920);
          *(_DWORD *)(a1 + 436) = dword_100852928;
          v17 = a1 + 8;
          v18 = (double)v20;
          v19 = 8;
LABEL_30:
          sub_1001DA560(v17, v19, v18);
        }
      }
      break;
    default:
      return v7;
  }
  return v7;
}

uint64_t sub_1001D4A6C(uint64_t a1, int a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;

  sub_100007824();
  v11 = 31536000;
  result = 3;
  switch(a2)
  {
    case 0:
      sub_1001D8500();
    case 1:
      sub_100183E70((uint64_t **)(a1 + 8), 4);
      sub_1001D8660((uint64_t *)(a1 + 408), 0, v5, v6, v7, v8, v9, v10);
      return 3;
    case 2:
      goto LABEL_5;
    case 4:
      std::string::assign((std::string *)(a1 + 296), off_100853250[0]);
LABEL_5:
      result = 1;
      break;
    case 5:
      sub_1001D4E40(a1);
      result = 2;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1001D4B7C(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  sub_1001D948C(a1 + 120, *(char **)(a1 + 128));
  sub_1001D94DC(a1 + 88, *(_QWORD **)(a1 + 96));
  v2 = *(_QWORD **)(a1 + 80);
  if (v2 == (_QWORD *)(a1 + 56))
  {
    v3 = 4;
    v2 = (_QWORD *)(a1 + 56);
    goto LABEL_5;
  }
  if (v2)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  sub_1001D9568(a1 + 32, *(char **)(a1 + 40));

  return a1;
}

uint64_t sub_1001D4C0C(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD block[5];

  v2 = *(NSObject **)(a1 + 424);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1001D4DE8;
  block[3] = &unk_1007FA668;
  block[4] = a1;
  dispatch_sync(v2, block);
  sub_1001FA9AC(a1 + 1736);
  sub_1001D8FD0(a1 + 1040);
  sub_1001D925C(a1 + 632, v3, v4, v5, v6, v7, v8, v9);
  sub_1001D948C(a1 + 600, *(char **)(a1 + 608));
  sub_1001D94DC(a1 + 568, *(_QWORD **)(a1 + 576));
  v10 = *(_QWORD **)(a1 + 560);
  if (v10 == (_QWORD *)(a1 + 536))
  {
    v11 = 4;
    v10 = (_QWORD *)(a1 + 536);
  }
  else
  {
    if (!v10)
      goto LABEL_6;
    v11 = 5;
  }
  (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_6:
  sub_1001D9568(a1 + 512, *(char **)(a1 + 520));

  if (*(char *)(a1 + 463) < 0)
    operator delete(*(void **)(a1 + 440));

  sub_1001D8660((uint64_t *)(a1 + 408), 0, v12, v13, v14, v15, v16, v17);
  if (*(char *)(a1 + 399) < 0)
    operator delete(*(void **)(a1 + 376));
  if (*(char *)(a1 + 375) < 0)
    operator delete(*(void **)(a1 + 352));
  if (*(char *)(a1 + 343) < 0)
    operator delete(*(void **)(a1 + 320));
  if (*(char *)(a1 + 319) < 0)
    operator delete(*(void **)(a1 + 296));
  sub_1001D9FE8(a1 + 256);
  if (*(char *)(a1 + 239) < 0)
    operator delete(*(void **)(a1 + 216));
  v18 = *(_QWORD **)(a1 + 208);
  if (v18 == (_QWORD *)(a1 + 184))
  {
    v19 = 4;
    v18 = (_QWORD *)(a1 + 184);
  }
  else
  {
    if (!v18)
      goto LABEL_23;
    v19 = 5;
  }
  (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_23:
  v20 = *(_QWORD **)(a1 + 176);
  if (v20 == (_QWORD *)(a1 + 152))
  {
    v21 = 4;
    v20 = (_QWORD *)(a1 + 152);
    goto LABEL_27;
  }
  if (v20)
  {
    v21 = 5;
LABEL_27:
    (*(void (**)(void))(*v20 + 8 * v21))();
  }
  sub_1001D9F6C(a1 + 8);
  return a1;
}

void sub_1001D4DE8(uint64_t a1)
{
  sub_1001D4DF0(*(_QWORD *)(a1 + 32));
}

void sub_1001D4DF0(uint64_t a1)
{
  NSObject *v2;
  void *v3;

  v2 = *(NSObject **)(a1 + 464);
  if (v2)
  {
    dispatch_source_cancel(v2);
    v3 = *(void **)(a1 + 464);
    *(_QWORD *)(a1 + 464) = 0;

  }
}

void sub_1001D4E30(uint64_t a1)
{
  sub_1002A585C(a1 + 632);
}

void sub_1001D4E38(uint64_t a1)
{
  sub_100263BA4(a1 + 1040);
}

void sub_1001D4E40(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  double v4;
  double v5;
  _BYTE v6[24];

  v2 = a1 + 216;
  if (!sub_100008B08(a1 + 216))
  {
    *(_BYTE *)(a1 + 432) = 1;
    v3 = (id)qword_100857F00;
    if (!os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
      goto LABEL_16;
    if (*(char *)(a1 + 239) < 0)
    {
      v2 = *(_QWORD *)(a1 + 216);
      if (*(_QWORD *)(a1 + 224))
        goto LABEL_9;
    }
    else if (*(_BYTE *)(a1 + 239))
    {
LABEL_9:
      v5 = CFAbsoluteTimeGetCurrent() - *(double *)(a1 + 248);
LABEL_15:
      sub_1003D9000(v2, (uint64_t)v6, *(uint64_t *)&v5);
      goto LABEL_16;
    }
    v5 = 0.0;
    goto LABEL_15;
  }
  v3 = (id)qword_100857F00;
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    if (*(char *)(a1 + 239) < 0)
    {
      v2 = *(_QWORD *)(a1 + 216);
      if (*(_QWORD *)(a1 + 224))
        goto LABEL_5;
    }
    else if (*(_BYTE *)(a1 + 239))
    {
LABEL_5:
      v4 = CFAbsoluteTimeGetCurrent() - *(double *)(a1 + 248);
LABEL_12:
      sub_1003D8FC8(v2, (uint64_t)v6, *(uint64_t *)&v4);
      goto LABEL_16;
    }
    v4 = 0.0;
    goto LABEL_12;
  }
LABEL_16:

}

void sub_1001D4F70(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1001D4F8C(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  double v4;
  uint64_t v5;

  v2 = (id)qword_100857F00;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    if (*(char *)(a1 + 239) < 0)
    {
      v3 = *(_QWORD *)(a1 + 216);
      if (*(_QWORD *)(a1 + 224))
        goto LABEL_4;
    }
    else
    {
      v3 = a1 + 216;
      if (*(_BYTE *)(a1 + 239))
      {
LABEL_4:
        v4 = CFAbsoluteTimeGetCurrent() - *(double *)(a1 + 248);
LABEL_7:
        sub_1003D9038(v3, (uint64_t)&v5, *(uint64_t *)&v4);
        goto LABEL_8;
      }
    }
    v4 = 0.0;
    goto LABEL_7;
  }
LABEL_8:

  *(_BYTE *)(a1 + 432) = 0;
}

void sub_1001D504C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1001D5064(uint64_t a1)
{
  int v2;
  _BOOL4 v3;

  v2 = *(unsigned __int8 *)(a1 + 432);
  v3 = os_log_type_enabled((os_log_t)qword_100857F00, OS_LOG_TYPE_DEBUG);
  if (v2)
  {
    if (v3)
      sub_1003D909C();
    sub_1002A5900((NSObject **)(a1 + 632));
    *(_BYTE *)(a1 + 433) = 1;
  }
  else if (v3)
  {
    sub_1003D9070();
  }
}

uint64_t sub_1001D50D8(uint64_t a1)
{
  uint64_t result;

  if (os_log_type_enabled((os_log_t)qword_100857F00, OS_LOG_TYPE_DEBUG))
    sub_1003D90C8();
  result = sub_1002A599C((NSObject **)(a1 + 632));
  *(_BYTE *)(a1 + 433) = 0;
  return result;
}

uint64_t sub_1001D5124(uint64_t a1, void *a2, unsigned int a3)
{
  id v5;
  dispatch_source_t v6;
  void *v7;
  NSObject *v8;
  dispatch_time_t v9;
  NSObject *v10;
  uint64_t v11;
  _QWORD v13[4];
  id v14;
  uint64_t v15;

  v5 = a2;
  if (!v5)
  {
    if (os_log_type_enabled((os_log_t)qword_100857F00, OS_LOG_TYPE_ERROR))
      sub_1003D90F4();
    goto LABEL_10;
  }
  sub_1001D4DF0(a1);
  v6 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, *(dispatch_queue_t *)(a1 + 424));
  v7 = *(void **)(a1 + 464);
  *(_QWORD *)(a1 + 464) = v6;

  v8 = *(NSObject **)(a1 + 464);
  if (!v8)
  {
    if (os_log_type_enabled((os_log_t)qword_100857F00, OS_LOG_TYPE_ERROR))
      sub_1003D9120();
LABEL_10:
    v11 = 0;
    goto LABEL_11;
  }
  v9 = dispatch_time(0, 1000000000 * a3);
  dispatch_source_set_timer(v8, v9, 0xFFFFFFFFFFFFFFFFLL, 0xBEBC200uLL);
  v10 = *(NSObject **)(a1 + 464);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_1001D5298;
  v13[3] = &unk_10080D110;
  v15 = a1;
  v14 = v5;
  dispatch_source_set_event_handler(v10, v13);
  if (os_log_type_enabled((os_log_t)qword_100857F00, OS_LOG_TYPE_DEBUG))
    sub_1003D914C();
  dispatch_resume(*(dispatch_object_t *)(a1 + 464));

  v11 = 1;
LABEL_11:

  return v11;
}

uint64_t sub_1001D5298(uint64_t a1)
{
  sub_1001D4DF0(*(_QWORD *)(a1 + 40));
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_1001D52C4(uint64_t a1)
{
  int v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[5];

  v2 = sub_1002C60B4(a1 + 480);
  if (os_log_type_enabled((os_log_t)qword_100857F00, OS_LOG_TYPE_DEBUG))
  {
    sub_1003D9208();
    if (v2)
      goto LABEL_3;
LABEL_11:
    v4 = 0;
    goto LABEL_12;
  }
  if (!v2)
    goto LABEL_11;
LABEL_3:
  if (sub_1000069CC(*(_DWORD *)a1))
  {
    sub_1001FAD40(a1 + 1736);
    if (os_log_type_enabled((os_log_t)qword_100857F00, OS_LOG_TYPE_DEBUG))
      sub_1003D91DC();
    if (sub_100360FA0(*(_DWORD *)a1))
    {
      v6[0] = _NSConcreteStackBlock;
      v6[1] = 3221225472;
      v6[2] = sub_1001D5480;
      v6[3] = &unk_1007FA668;
      v6[4] = a1;
      v3 = objc_retainBlock(v6);
      sub_1001D5124(a1, v3, 0x168u);

    }
  }
  else
  {
    sub_100360FA0(*(_DWORD *)a1);
  }
  v4 = sub_1002A5864((NSObject **)(a1 + 632));
LABEL_12:
  if (os_log_type_enabled((os_log_t)qword_100857F00, OS_LOG_TYPE_DEBUG))
    sub_1003D9178();
  return v4;
}

uint64_t sub_1001D5400(uint64_t a1)
{
  char *v1;
  char *v2;
  NSObject *v3;
  void *v4;

  v1 = (char *)(a1 + 376);
  v2 = (char *)(a1 + 399);
  if (*(char *)(a1 + 399) < 0)
  {
    **(_BYTE **)(a1 + 376) = 0;
    *(_QWORD *)(a1 + 384) = 0;
  }
  else
  {
    *v1 = 0;
    *v2 = 0;
  }
  v3 = qword_100857F00;
  if (os_log_type_enabled((os_log_t)qword_100857F00, OS_LOG_TYPE_DEBUG))
    sub_1003D926C(v2, v1, v3);
  v4 = sub_100007824();
  return sub_1003916D8((uint64_t)v4, v1);
}

void sub_1001D5480(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  char *v3;
  _BOOL4 v4;
  void *v5;
  _BOOL4 v6;
  int v7;
  _QWORD v8[4];
  int v9;
  void *__dst[2];
  uint64_t v11;
  int v12;
  void *__p[2];
  uint64_t v14;
  void *v15[2];
  void *v16[2];
  __int128 v17;
  __int16 v18;
  char v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int16 v23;
  char v24;
  int *v25;

  v1 = *(_QWORD *)(a1 + 32);
  v23 = 0;
  v21 = 0u;
  v22 = 0u;
  v20 = 0u;
  v24 = -1;
  v18 = 0;
  v17 = 0u;
  *(_OWORD *)v15 = 0u;
  *(_OWORD *)v16 = 0u;
  v19 = -1;
  v2 = sub_100007824();
  v12 = 0;
  v25 = &v12;
  v3 = sub_1001DA064(v1 + 256, &v12, (uint64_t)&unk_100472CF8, &v25);
  if (v3[55] < 0)
  {
    sub_100004678(__p, *((void **)v3 + 4), *((_QWORD *)v3 + 5));
  }
  else
  {
    *(_OWORD *)__p = *((_OWORD *)v3 + 2);
    v14 = *((_QWORD *)v3 + 6);
  }
  v4 = sub_1000042D0((uint64_t)v2, (uint64_t)__p, (std::string *)&v20);
  if (SHIBYTE(v14) < 0)
    operator delete(__p[0]);
  v5 = sub_100007824();
  if (*(char *)(v1 + 463) < 0)
  {
    sub_100004678(__dst, *(void **)(v1 + 440), *(_QWORD *)(v1 + 448));
  }
  else
  {
    *(_OWORD *)__dst = *(_OWORD *)(v1 + 440);
    v11 = *(_QWORD *)(v1 + 456);
  }
  v6 = sub_1000042D0((uint64_t)v5, (uint64_t)__dst, (std::string *)v15);
  if (SHIBYTE(v11) < 0)
    operator delete(__dst[0]);
  if (v4)
    v7 = 2;
  else
    v7 = 0;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1001D568C;
  v8[3] = &unk_10080D130;
  v9 = v7 | v6;
  AnalyticsSendEventLazy(CFSTR("com.apple.rose.regulatory.iso.sources"), v8);
  if (SHIBYTE(v17) < 0)
    operator delete(v16[1]);
  if (SHIBYTE(v16[0]) < 0)
    operator delete(v15[0]);
  if (SHIBYTE(v22) < 0)
    operator delete(*((void **)&v21 + 1));
  if (SBYTE7(v21) < 0)
    operator delete((void *)v20);
}

void sub_1001D5640(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,char a29)
{
  uint64_t v29;

  if (a20 < 0)
    operator delete(__p);
  sub_1001D5744((uint64_t)&a29);
  sub_1001D5744(v29 - 112);
  _Unwind_Resume(a1);
}

id sub_1001D568C(uint64_t a1)
{
  void *v1;
  void *v2;
  const __CFString *v4;
  void *v5;

  v4 = CFSTR("ISOSources");
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 32)));
  v5 = v1;
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v5, &v4, 1));

  return v2;
}

void sub_1001D572C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1001D5744(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void sub_1001D5784(int *a1@<X0>, BOOL *a2@<X1>, BOOL *a3@<X2>, std::string *a4@<X8>)
{
  void *v7;
  uint64_t v8;
  char *v9;
  BOOL *v10;
  char *v11;
  char *v12;
  _OWORD *v13;
  _BOOL4 v14;
  _BOOL4 v15;
  _BOOL4 v16;
  char *v17;
  BOOL v18;
  BOOL v19;
  char *v20;
  BOOL v21;
  char *v22;
  __int128 v23;
  int *v24;
  void *v26[2];
  uint64_t v27;
  void *__dst[2];
  uint64_t v29;
  void *__p[2];
  uint64_t v31;
  int v32;
  void *v33[2];
  void *v34[2];
  __int128 v35;
  __int16 v36;
  char v37;
  void *v38[2];
  void *v39[2];
  __int128 v40;
  __int16 v41;
  char v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int16 v46;
  char v47;
  _DWORD *v48[2];

  v7 = sub_100007824();
  v46 = 0;
  v44 = 0u;
  v45 = 0u;
  v43 = 0u;
  v47 = -1;
  v41 = 0;
  *(_OWORD *)v39 = 0u;
  v40 = 0u;
  *(_OWORD *)v38 = 0u;
  v42 = -1;
  v36 = 0;
  *(_OWORD *)v34 = 0u;
  v35 = 0u;
  *(_OWORD *)v33 = 0u;
  v37 = -1;
  v8 = (uint64_t)(a1 + 64);
  v32 = 0;
  v48[0] = &v32;
  v9 = sub_1001DA064((uint64_t)(a1 + 64), &v32, (uint64_t)&unk_100472CF8, v48);
  v24 = a1;
  v10 = a3;
  v32 = 2;
  v48[0] = &v32;
  v11 = sub_1001DA064(v8, &v32, (uint64_t)&unk_100472CF8, v48);
  v32 = 3;
  v48[0] = &v32;
  v12 = sub_1001DA064(v8, &v32, (uint64_t)&unk_100472CF8, v48);
  v13 = v9 + 32;
  if (v9[55] < 0)
  {
    sub_100004678(__p, *((void **)v9 + 4), *((_QWORD *)v9 + 5));
  }
  else
  {
    *(_OWORD *)__p = *v13;
    v31 = *((_QWORD *)v9 + 6);
  }
  v14 = sub_1000042D0((uint64_t)v7, (uint64_t)__p, (std::string *)&v43);
  if (SHIBYTE(v31) < 0)
    operator delete(__p[0]);
  if (v11[55] < 0)
  {
    sub_100004678(__dst, *((void **)v11 + 4), *((_QWORD *)v11 + 5));
  }
  else
  {
    *(_OWORD *)__dst = *((_OWORD *)v11 + 2);
    v29 = *((_QWORD *)v11 + 6);
  }
  v15 = sub_1000042D0((uint64_t)v7, (uint64_t)__dst, (std::string *)v38);
  if (SHIBYTE(v29) < 0)
    operator delete(__dst[0]);
  if (v12[55] < 0)
  {
    sub_100004678(v26, *((void **)v12 + 4), *((_QWORD *)v12 + 5));
  }
  else
  {
    *(_OWORD *)v26 = *((_OWORD *)v12 + 2);
    v27 = *((_QWORD *)v12 + 6);
  }
  v16 = sub_1000042D0((uint64_t)v7, (uint64_t)v26, (std::string *)v33);
  if (SHIBYTE(v27) < 0)
  {
    operator delete(v26[0]);
    if (v14)
    {
LABEL_16:
      *a2 = 1;
      v32 = 0;
      v48[0] = &v32;
      v17 = sub_1001DA064(v8, &v32, (uint64_t)&unk_100472CF8, v48);
      v18 = sub_1001D5BCC((uint64_t)(v17 + 24));
      if (!v15)
        goto LABEL_17;
      goto LABEL_22;
    }
  }
  else if (v14)
  {
    goto LABEL_16;
  }
  v18 = 0;
  *a2 = v15 || v16;
  if (!v15)
  {
LABEL_17:
    v19 = 0;
    if (v16)
      goto LABEL_18;
LABEL_23:
    v21 = 0;
    if (v18)
      goto LABEL_19;
    goto LABEL_24;
  }
LABEL_22:
  v32 = 2;
  v48[0] = &v32;
  v22 = sub_1001DA064(v8, &v32, (uint64_t)&unk_100472CF8, v48);
  v19 = sub_1001D5BCC((uint64_t)(v22 + 24));
  if (!v16)
    goto LABEL_23;
LABEL_18:
  v32 = 3;
  v48[0] = &v32;
  v20 = sub_1001DA064(v8, &v32, (uint64_t)&unk_100472CF8, v48);
  v21 = sub_1001D5BCC((uint64_t)(v20 + 24));
  if (v18)
  {
LABEL_19:
    *v10 = 1;
    goto LABEL_27;
  }
LABEL_24:
  *v10 = v19 || v21;
  if (v15 || v16)
  {
    sub_1001D5C44(v24, a2, v10, a4);
    goto LABEL_31;
  }
  if (!v14)
  {
    a4->__r_.__value_.__r.__words[0] = 0;
    a4->__r_.__value_.__l.__size_ = 0;
    a4->__r_.__value_.__r.__words[2] = 0;
    goto LABEL_31;
  }
LABEL_27:
  if (v9[55] < 0)
  {
    sub_100004678(a4, *((void **)v9 + 4), *((_QWORD *)v9 + 5));
  }
  else
  {
    v23 = *v13;
    a4->__r_.__value_.__r.__words[2] = *((_QWORD *)v9 + 6);
    *(_OWORD *)&a4->__r_.__value_.__l.__data_ = v23;
  }
LABEL_31:
  if (SHIBYTE(v35) < 0)
    operator delete(v34[1]);
  if (SHIBYTE(v34[0]) < 0)
    operator delete(v33[0]);
  if (SHIBYTE(v40) < 0)
    operator delete(v39[1]);
  if (SHIBYTE(v39[0]) < 0)
    operator delete(v38[0]);
  if (SHIBYTE(v45) < 0)
    operator delete(*((void **)&v44 + 1));
  if (SBYTE7(v44) < 0)
    operator delete((void *)v43);
}

void sub_1001D5B44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  uint64_t v40;

  sub_1001D5744((uint64_t)&a32);
  sub_1001D5744((uint64_t)&a40);
  sub_1001D5744(v40 - 160);
  _Unwind_Resume(a1);
}

BOOL sub_1001D5BCC(uint64_t a1)
{
  uint64_t v2;
  BOOL v3;
  char v4;
  double v5;

  if (*(char *)(a1 + 31) < 0)
  {
    v2 = *(_QWORD *)(a1 + 16);
    v3 = v2 == 0;
  }
  else
  {
    v2 = *(unsigned __int8 *)(a1 + 31);
    v3 = (_DWORD)v2 == 0;
  }
  v4 = v3;
  if (v2)
  {
    v5 = CFAbsoluteTimeGetCurrent() - *(double *)(a1 + 32);
    if ((v4 & 1) != 0)
      return 0;
  }
  else
  {
    v5 = 0.0;
    if ((v4 & 1) != 0)
      return 0;
  }
  return v5 < *(double *)&qword_100852828 || *(_BYTE *)a1 == 0;
}

void sub_1001D5C44(int *a1@<X0>, BOOL *a2@<X1>, _BYTE *a3@<X2>, std::string *a4@<X8>)
{
  void *v8;
  int v9;
  int v10;
  uint64_t v11;
  char *v12;
  char *v13;
  _BOOL4 v14;
  _OWORD *v15;
  _BOOL4 v16;
  char *v17;
  int v18;
  int v19;
  char *v20;
  NSObject *v21;
  NSObject *v22;
  const std::string *v23;
  const std::string *v24;
  unsigned int v25;
  unsigned int v26;
  char *v27;
  const std::string *v28;
  NSObject *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  double v35;
  _BOOL4 v36;
  double v37;
  _BOOL4 v38;
  char *v39;
  char *v40;
  char **v41;
  void *__dst[2];
  uint64_t v43;
  void *__p[2];
  uint64_t v45;
  unint64_t v46;
  void *v47[2];
  void *v48[2];
  __int128 v49;
  __int16 v50;
  char v51;
  void *v52[2];
  void *v53[2];
  __int128 v54;
  __int16 v55;
  char v56;
  unint64_t *v57;
  _BYTE buf[18];
  __int16 v59;
  double v60;
  __int16 v61;
  _BOOL4 v62;
  __int16 v63;
  int v64;

  a4->__r_.__value_.__r.__words[0] = 0;
  a4->__r_.__value_.__l.__size_ = 0;
  a4->__r_.__value_.__r.__words[2] = 0;
  v8 = sub_100007824();
  v55 = 0;
  *(_OWORD *)v53 = 0u;
  v54 = 0u;
  *(_OWORD *)v52 = 0u;
  v56 = -1;
  v50 = 0;
  *(_OWORD *)v48 = 0u;
  v49 = 0u;
  *(_OWORD *)v47 = 0u;
  v51 = -1;
  v46 = 0;
  if (sub_1000069CC(*a1))
  {
    v9 = 0;
    v10 = 1;
    goto LABEL_5;
  }
  if (sub_100360EFC(*a1))
  {
    v10 = 3;
    v9 = 2;
LABEL_5:
    v46 = __PAIR64__(v9, v10);
    v11 = (uint64_t)(a1 + 64);
    *(_QWORD *)buf = (char *)&v46 + 4;
    v12 = sub_1001DA308((uint64_t)(a1 + 64), (int *)&v46 + 1, (uint64_t)&unk_100472CF8, (_DWORD **)buf);
    *(_QWORD *)buf = &v46;
    v13 = sub_1001DA308(v11, (int *)&v46, (uint64_t)&unk_100472CF8, (_DWORD **)buf);
    v41 = (char **)(v12 + 32);
    if (v12[55] < 0)
    {
      sub_100004678(__p, *((void **)v12 + 4), *((_QWORD *)v12 + 5));
    }
    else
    {
      *(_OWORD *)__p = *((_OWORD *)v12 + 2);
      v45 = *((_QWORD *)v12 + 6);
    }
    v14 = sub_1000042D0((uint64_t)v8, (uint64_t)__p, (std::string *)v52);
    v15 = v13 + 32;
    if (SHIBYTE(v45) < 0)
      operator delete(__p[0]);
    if (v13[55] < 0)
    {
      sub_100004678(__dst, *((void **)v13 + 4), *((_QWORD *)v13 + 5));
    }
    else
    {
      *(_OWORD *)__dst = *v15;
      v43 = *((_QWORD *)v13 + 6);
    }
    v16 = sub_1000042D0((uint64_t)v8, (uint64_t)__dst, (std::string *)v47);
    if (SHIBYTE(v43) < 0)
      operator delete(__dst[0]);
    *a2 = v14 || v16;
    if (v14)
    {
      *(_QWORD *)buf = (char *)&v46 + 4;
      v17 = sub_1001DA308(v11, (int *)&v46 + 1, (uint64_t)&unk_100472CF8, (_DWORD **)buf);
      v18 = sub_1001D5BCC((uint64_t)(v17 + 24));
      if (!v16)
      {
LABEL_17:
        v19 = 0;
LABEL_20:
        *a3 = v18 | v19;
        v21 = (id)qword_100857F00;
        if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
        {
          v30 = v12 + 32;
          if (v12[55] < 0)
            v30 = *v41;
          v39 = v30;
          v57 = (unint64_t *)((char *)&v46 + 4);
          v31 = sub_1001DA308(v11, (int *)&v46 + 1, (uint64_t)&unk_100472CF8, (_DWORD **)&v57);
          if (v31[55] < 0)
            v32 = *((_QWORD *)v31 + 5);
          else
            v32 = v31[55];
          v35 = 0.0;
          if (v32)
            v35 = CFAbsoluteTimeGetCurrent() - *((double *)v31 + 7);
          v57 = (unint64_t *)((char *)&v46 + 4);
          v36 = sub_1001DA308(v11, (int *)&v46 + 1, (uint64_t)&unk_100472CF8, (_DWORD **)&v57)[24] == 0;
          *(_DWORD *)buf = 67110146;
          *(_DWORD *)&buf[4] = v14;
          *(_WORD *)&buf[8] = 2080;
          *(_QWORD *)&buf[10] = v39;
          v59 = 2048;
          v60 = v35;
          v61 = 1024;
          v62 = v36;
          v63 = 1024;
          v64 = v18;
          _os_log_debug_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "regulatory,geo,monitor,refreshCurrentGeoArea,candidate,mcc1Iso,valid:%d,value:%s,age:%.2f,current:%d,recent:%d", buf, 0x28u);
        }

        v22 = (id)qword_100857F00;
        if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
        {
          if (v13[55] < 0)
            v40 = *(char **)v15;
          else
            v40 = v13 + 32;
          v57 = &v46;
          v33 = sub_1001DA308(v11, (int *)&v46, (uint64_t)&unk_100472CF8, (_DWORD **)&v57);
          if (v33[55] < 0)
            v34 = *((_QWORD *)v33 + 5);
          else
            v34 = v33[55];
          v37 = 0.0;
          if (v34)
            v37 = CFAbsoluteTimeGetCurrent() - *((double *)v33 + 7);
          v57 = &v46;
          v38 = sub_1001DA308(v11, (int *)&v46, (uint64_t)&unk_100472CF8, (_DWORD **)&v57)[24] == 0;
          *(_DWORD *)buf = 67110146;
          *(_DWORD *)&buf[4] = v16;
          *(_WORD *)&buf[8] = 2080;
          *(_QWORD *)&buf[10] = v40;
          v59 = 2048;
          v60 = v37;
          v61 = 1024;
          v62 = v38;
          v63 = 1024;
          v64 = v19;
          _os_log_debug_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "regulatory,geo,monitor,refreshCurrentGeoArea,candidate,mcc2Iso,valid:%d,value:%s,age:%.2f,current:%d,recent:%d", buf, 0x28u);
        }

        if (v14 && v16)
        {
          if (v18 == v19)
          {
            if (HIBYTE(v55))
              v25 = (_BYTE)v55 == 0;
            else
              v25 = ((_BYTE)v55 == 0) + 1;
            if (HIBYTE(v50))
              v26 = (_BYTE)v50 == 0;
            else
              v26 = ((_BYTE)v50 == 0) + 1;
            v27 = v12 + 32;
            if (v25 <= v26)
              v28 = (const std::string *)(v13 + 32);
            else
              v28 = (const std::string *)(v12 + 32);
            std::string::operator=(a4, v28);
            v29 = qword_100857F00;
            if (os_log_type_enabled((os_log_t)qword_100857F00, OS_LOG_TYPE_DEBUG))
            {
              if (v12[55] < 0)
                v27 = *v41;
              *(_DWORD *)buf = 136315650;
              *(_QWORD *)&buf[4] = v27;
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = v25;
              v59 = 1024;
              LODWORD(v60) = v26;
              _os_log_debug_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEBUG, "regulatory,geo,monitor,refreshCurrentGeoArea,bestMccCandidate:%s,reason,restrictionCount,mcc1Count:%d,mcc2Count:%d,chosen", buf, 0x18u);
            }
          }
          else
          {
            if (v18)
              v23 = (const std::string *)(v12 + 32);
            else
              v23 = (const std::string *)(v13 + 32);
            std::string::operator=(a4, v23);
            if (os_log_type_enabled((os_log_t)qword_100857F00, OS_LOG_TYPE_DEBUG))
              sub_1003D92E4();
          }
        }
        else
        {
          if (v14)
            v24 = (const std::string *)(v12 + 32);
          else
            v24 = (const std::string *)(v13 + 32);
          std::string::operator=(a4, v24);
          if (os_log_type_enabled((os_log_t)qword_100857F00, OS_LOG_TYPE_DEBUG))
            sub_1003D9348();
        }
        goto LABEL_46;
      }
    }
    else
    {
      v18 = 0;
      if (!v16)
        goto LABEL_17;
    }
    *(_QWORD *)buf = &v46;
    v20 = sub_1001DA308(v11, (int *)&v46, (uint64_t)&unk_100472CF8, (_DWORD **)buf);
    v19 = sub_1001D5BCC((uint64_t)(v20 + 24));
    goto LABEL_20;
  }
  if (os_log_type_enabled((os_log_t)qword_100857F00, OS_LOG_TYPE_FAULT))
    sub_1003D93AC();
LABEL_46:
  if (SHIBYTE(v49) < 0)
    operator delete(v48[1]);
  if (SHIBYTE(v48[0]) < 0)
    operator delete(v47[0]);
  if (SHIBYTE(v54) < 0)
    operator delete(v53[1]);
  if (SHIBYTE(v53[0]) < 0)
    operator delete(v52[0]);
}

void sub_1001D62A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  uint64_t v35;

  sub_1001D5744((uint64_t)&a27);
  sub_1001D5744((uint64_t)&a35);
  if (*(char *)(v35 + 23) < 0)
    operator delete(*(void **)v35);
  _Unwind_Resume(a1);
}

void sub_1001D6328(uint64_t a1@<X0>, BOOL *a2@<X1>, BOOL *a3@<X2>, std::string *a4@<X8>)
{
  void *v8;
  char *v9;
  char *v10;
  const std::string *v11;
  _BOOL4 v12;
  _OWORD *v13;
  _BOOL4 v14;
  NSObject *v15;
  NSObject *v16;
  const std::string *v17;
  const std::string *v18;
  const std::string *v19;
  void *v20[2];
  uint64_t v21;
  void *__p[2];
  uint64_t v23;
  int v24;
  void *v25[2];
  void *v26[2];
  __int128 v27;
  __int16 v28;
  char v29;
  void *v30[2];
  void *v31[2];
  __int128 v32;
  __int16 v33;
  char v34;
  uint8_t buf[8];
  __int16 v36;
  const std::string *v37;

  a4->__r_.__value_.__r.__words[0] = 0;
  a4->__r_.__value_.__l.__size_ = 0;
  a4->__r_.__value_.__r.__words[2] = 0;
  v8 = sub_100007824();
  v33 = 0;
  *(_OWORD *)v31 = 0u;
  v32 = 0u;
  *(_OWORD *)v30 = 0u;
  v34 = -1;
  v28 = 0;
  *(_OWORD *)v26 = 0u;
  v27 = 0u;
  *(_OWORD *)v25 = 0u;
  v29 = -1;
  v24 = 0;
  *(_QWORD *)buf = &v24;
  v9 = sub_1001DA064(a1 + 256, &v24, (uint64_t)&unk_100472CF8, (_DWORD **)buf);
  v10 = v9;
  v11 = (const std::string *)(v9 + 32);
  if (v9[55] < 0)
  {
    sub_100004678(__p, *((void **)v9 + 4), *((_QWORD *)v9 + 5));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v23 = *((_QWORD *)v9 + 6);
  }
  v12 = sub_1000042D0((uint64_t)v8, (uint64_t)__p, (std::string *)v30);
  v13 = (_OWORD *)(a1 + 440);
  if (SHIBYTE(v23) < 0)
    operator delete(__p[0]);
  if (*(char *)(a1 + 463) < 0)
  {
    sub_100004678(v20, *(void **)(a1 + 440), *(_QWORD *)(a1 + 448));
  }
  else
  {
    *(_OWORD *)v20 = *v13;
    v21 = *(_QWORD *)(a1 + 456);
  }
  v14 = sub_1000042D0((uint64_t)v8, (uint64_t)v20, (std::string *)v25);
  if (SHIBYTE(v21) < 0)
    operator delete(v20[0]);
  *a2 = v12 || v14;
  *a3 = v12 || v14;
  v15 = qword_100857F00;
  if (os_log_type_enabled((os_log_t)qword_100857F00, OS_LOG_TYPE_DEBUG))
  {
    if (v10[55] < 0)
      v18 = (const std::string *)v11->__r_.__value_.__r.__words[0];
    else
      v18 = v11;
    *(_DWORD *)buf = 67109378;
    *(_DWORD *)&buf[4] = v12;
    v36 = 2080;
    v37 = v18;
    _os_log_debug_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "geo,monitor,MccForHomepod,chooseBestMccForHomepod,candidate,mcc1Iso,valid:%d,value:%s", buf, 0x12u);
  }
  v16 = qword_100857F00;
  if (os_log_type_enabled((os_log_t)qword_100857F00, OS_LOG_TYPE_DEBUG))
  {
    if (*(char *)(a1 + 463) < 0)
      v19 = *(const std::string **)v13;
    else
      v19 = (const std::string *)(a1 + 440);
    *(_DWORD *)buf = 67109378;
    *(_DWORD *)&buf[4] = v14;
    v36 = 2080;
    v37 = v19;
    _os_log_debug_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "geo,monitor,MccForHomepod,chooseBestMccForHomepod,candidate,mcc2Iso,valid:%d,value:%s", buf, 0x12u);
  }
  if (v12)
    v17 = v11;
  else
    v17 = (const std::string *)(a1 + 440);
  std::string::operator=(a4, v17);
  if (os_log_type_enabled((os_log_t)qword_100857F00, OS_LOG_TYPE_DEBUG))
    sub_1003D93E4();
  if (SHIBYTE(v27) < 0)
    operator delete(v26[1]);
  if (SHIBYTE(v26[0]) < 0)
    operator delete(v25[0]);
  if (SHIBYTE(v32) < 0)
    operator delete(v31[1]);
  if (SHIBYTE(v31[0]) < 0)
    operator delete(v30[0]);
}

void sub_1001D6604(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  _Unwind_Resume(exception_object);
}

void sub_1001D6668(uint64_t a1)
{
  std::string *v2;
  void *v3;
  const std::string *v4;
  NSObject *v5;
  const std::string::value_type *v6;
  const void **v7;
  uint64_t v8;
  uint64_t v9;
  std::string::size_type size;
  std::string *p_str;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;
  std::string::size_type v15;
  const void **v16;
  std::string *v17;
  int v18;
  NSObject *v19;
  const char *v20;
  const std::string::value_type *v21;
  std::string *v22;
  int v23;
  _QWORD *v24;
  std::string *v25;
  int v26;
  NSObject *v27;
  std::string *p_p;
  NSObject *v29;
  char *v30;
  char *v31;
  char *v32;
  void **v33;
  NSObject *v34;
  const char *v35;
  double v36;
  CFAbsoluteTime Current;
  uint64_t v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  uint64_t *v44;
  NSObject *v45;
  void **v46;
  const char *v47;
  double v48;
  int v49;
  std::string *v50;
  int v51;
  uint64_t v52;
  void *v53[2];
  char v54;
  std::string __p;
  __int16 v56;
  std::string v57;
  std::string __str;
  std::string buf;
  _BYTE v60[10];
  _BYTE v61[12];
  std::string *v62;
  __int16 v63;
  int v64;
  __int16 v65;
  int v66;

  memset(&__str, 0, sizeof(__str));
  sub_10000BF04(&v57, "none");
  v56 = 0;
  memset(&__p, 0, sizeof(__p));
  if (sub_100360F30(*(_DWORD *)a1))
  {
    sub_1001D5784((int *)a1, (BOOL *)&v56 + 1, (BOOL *)&v56, &buf);
  }
  else if (sub_100360FA0(*(_DWORD *)a1))
  {
    sub_1001D6328(a1, (BOOL *)&v56 + 1, (BOOL *)&v56, &buf);
  }
  else
  {
    sub_1001D5C44((int *)a1, (BOOL *)&v56 + 1, &v56, &buf);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  __p = buf;
  v2 = (std::string *)(a1 + 216);
  if (sub_100008B08(a1 + 216))
    sub_1001D7044(a1);
  v3 = sub_100007824();
  v4 = (const std::string *)(a1 + 376);
  v52 = a1;
  if (!sub_1003916E0((uint64_t)v3, (std::string *)(a1 + 376)))
  {
    v5 = (id)qword_100857F00;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      sub_1003D9448();

  }
  if (*(_BYTE *)(a1 + 434) == 1)
  {
    std::string::operator=(&__str, v4);
    v6 = "lastStoredBeforeAirplaneMode";
LABEL_18:
    std::string::assign(&v57, v6);
    v51 = 1;
    goto LABEL_19;
  }
  if ((_BYTE)v56)
  {
    std::string::operator=(&__str, &__p);
    v6 = "currentMcc";
    goto LABEL_18;
  }
  if (sub_100008B08((uint64_t)v2) && sub_1001D7098(v2))
  {
    std::string::operator=(&__str, v2);
    v6 = "recentLocation";
    goto LABEL_18;
  }
  if (*(char *)(a1 + 399) < 0)
  {
    if (*(_QWORD *)(a1 + 384))
      goto LABEL_64;
  }
  else if (*(_BYTE *)(a1 + 399))
  {
LABEL_64:
    std::string::operator=(&__str, v4);
    v21 = "lastStored";
LABEL_160:
    std::string::assign(&v57, v21);
    goto LABEL_161;
  }
  if (HIBYTE(v56))
  {
    std::string::operator=(&__str, &__p);
    v21 = "lastKnownMcc";
    goto LABEL_160;
  }
LABEL_161:
  v51 = 0;
LABEL_19:
  v7 = (const void **)(a1 + 296);
  v8 = *(unsigned __int8 *)(a1 + 319);
  if ((v8 & 0x80u) == 0)
    v9 = *(unsigned __int8 *)(a1 + 319);
  else
    v9 = *(_QWORD *)(a1 + 304);
  size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __str.__r_.__value_.__l.__size_;
  if (v9 != size)
    goto LABEL_54;
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_str = &__str;
  else
    p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
  if ((v8 & 0x80) != 0)
  {
    if (memcmp(*v7, p_str, *(_QWORD *)(a1 + 304)))
    {
LABEL_54:
      v18 = 1;
      goto LABEL_55;
    }
  }
  else if (*(_BYTE *)(a1 + 319))
  {
    v12 = (unsigned __int8 *)(a1 + 296);
    while (*v12 == p_str->__r_.__value_.__s.__data_[0])
    {
      ++v12;
      p_str = (std::string *)((char *)p_str + 1);
      if (!--v8)
        goto LABEL_38;
    }
    goto LABEL_54;
  }
LABEL_38:
  if (*(unsigned __int8 *)(a1 + 344) != v51 || !*(_BYTE *)(a1 + 345))
    goto LABEL_54;
  v13 = *(unsigned __int8 *)(a1 + 343);
  if ((v13 & 0x80u) == 0)
    v14 = *(unsigned __int8 *)(a1 + 343);
  else
    v14 = *(_QWORD *)(a1 + 328);
  v15 = HIBYTE(v57.__r_.__value_.__r.__words[2]);
  if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v15 = v57.__r_.__value_.__l.__size_;
  if (v14 == v15)
  {
    v16 = (const void **)(a1 + 320);
    if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v17 = &v57;
    else
      v17 = (std::string *)v57.__r_.__value_.__r.__words[0];
    if ((v13 & 0x80) != 0)
    {
      if (!memcmp(*v16, v17, *(_QWORD *)(a1 + 328)))
        goto LABEL_150;
    }
    else
    {
      if (!*(_BYTE *)(a1 + 343))
        goto LABEL_150;
      while (*(unsigned __int8 *)v16 == v17->__r_.__value_.__s.__data_[0])
      {
        v16 = (const void **)((char *)v16 + 1);
        v17 = (std::string *)((char *)v17 + 1);
        if (!--v13)
          goto LABEL_150;
      }
    }
  }
  v18 = 0;
LABEL_55:
  v19 = (id)qword_100857F00;
  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
  {
    if (*(char *)(a1 + 319) < 0)
    {
      if (*(_QWORD *)(a1 + 304))
        v20 = (const char *)*v7;
      else
        v20 = "__";
    }
    else if (*(_BYTE *)(a1 + 319))
    {
      v20 = (const char *)(a1 + 296);
    }
    else
    {
      v20 = "__";
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    {
      if (__str.__r_.__value_.__l.__size_)
        v22 = (std::string *)__str.__r_.__value_.__r.__words[0];
      else
        v22 = (std::string *)"__";
    }
    else
    {
      v22 = &__str;
      if (!*((_BYTE *)&__str.__r_.__value_.__s + 23))
        v22 = (std::string *)"__";
    }
    v23 = *(unsigned __int8 *)(a1 + 345);
    v24 = (_QWORD *)(a1 + 320);
    if (*(char *)(a1 + 343) < 0)
      v24 = (_QWORD *)*v24;
    v25 = &v57;
    if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v25 = (std::string *)v57.__r_.__value_.__r.__words[0];
    v26 = *(unsigned __int8 *)(a1 + 344);
    LODWORD(buf.__r_.__value_.__l.__data_) = 67110914;
    HIDWORD(buf.__r_.__value_.__r.__words[0]) = v18;
    LOWORD(buf.__r_.__value_.__r.__words[1]) = 1024;
    *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = v23;
    HIWORD(buf.__r_.__value_.__r.__words[1]) = 2080;
    buf.__r_.__value_.__r.__words[2] = (std::string::size_type)v20;
    *(_WORD *)v60 = 2080;
    *(_QWORD *)&v60[2] = v22;
    *(_WORD *)v61 = 2080;
    *(_QWORD *)&v61[2] = v24;
    *(_WORD *)&v61[10] = 2080;
    v62 = v25;
    v63 = 1024;
    v64 = v26;
    v65 = 1024;
    v66 = v51;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "regulatory,geo,monitor,refreshCurrentGeoArea,effectiveChange:%d,prevInitialized:%d,regulatoryArea:[%s]->[%s],source:[%s]->[%s],isCurrent:[%d]->[%d]", (uint8_t *)&buf, 0x42u);
  }
  v50 = (std::string *)(a1 + 296);

  v27 = (id)qword_100857F00;
  if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
  {
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      if (__p.__r_.__value_.__l.__size_)
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      else
        p_p = (std::string *)"__";
    }
    else
    {
      p_p = &__p;
      if (!*((_BYTE *)&__p.__r_.__value_.__s + 23))
        p_p = (std::string *)"__";
    }
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315650;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)p_p;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 1024;
    *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = HIBYTE(v56);
    WORD1(buf.__r_.__value_.__r.__words[2]) = 1024;
    HIDWORD(buf.__r_.__value_.__r.__words[2]) = v56;
    _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "regulatory,geo,monitor,refreshCurrentGeoArea,mccChoice,iso:%s,isAnyMccValid:%d,isAnyMccCurrent:%d", (uint8_t *)&buf, 0x18u);
  }

  v29 = (id)qword_100857F00;
  if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
  {
    if (*(char *)(a1 + 399) < 0)
      v30 = *(_QWORD *)(a1 + 384) ? (char *)v4->__r_.__value_.__r.__words[0] : "__";
    else
      v30 = *(_BYTE *)(a1 + 399) ? (char *)(a1 + 376) : "__";
    if (*(char *)(v52 + 375) < 0)
      v31 = *(_QWORD *)(v52 + 360) ? *(char **)(v52 + 352) : "__";
    else
      v31 = *(_BYTE *)(v52 + 375) ? (char *)(v52 + 352) : "__";
    if (*(char *)(v52 + 463) < 0)
      v32 = *(_QWORD *)(v52 + 448) ? *(char **)(v52 + 440) : "__";
    else
      v32 = *(_BYTE *)(v52 + 463) ? (char *)(v52 + 440) : "__";
    sub_10038DE8C(*(unsigned __int8 *)(v52 + 434), v53);
    v33 = v54 >= 0 ? v53 : (void **)v53[0];
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315906;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v30;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v31;
    HIWORD(buf.__r_.__value_.__r.__words[2]) = 2080;
    *(_QWORD *)v60 = v32;
    *(_WORD *)&v60[8] = 2080;
    *(_QWORD *)v61 = v33;
    _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "regulatory,geo,monitor,refreshCurrentGeoArea,state,lastStoredIso:%s,lastUpdatedIso:%s,wifiIso:%s,airplaneMode:%s", (uint8_t *)&buf, 0x2Au);
    if (v54 < 0)
      operator delete(v53[0]);
  }

  v34 = (id)qword_100857F00;
  if (!os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
    goto LABEL_127;
  if (*(char *)(v52 + 239) < 0)
  {
    if (!*(_QWORD *)(v52 + 224))
    {
      v36 = 0.0;
      v35 = "__";
      goto LABEL_125;
    }
    v35 = (const char *)v2->__r_.__value_.__r.__words[0];
  }
  else
  {
    if (*(_BYTE *)(v52 + 239))
      v35 = (const char *)v2;
    else
      v35 = "__";
    if (!*(_BYTE *)(v52 + 239))
    {
      v36 = 0.0;
LABEL_125:
      v38 = v52;
      goto LABEL_126;
    }
  }
  Current = CFAbsoluteTimeGetCurrent();
  v38 = v52;
  v36 = Current - *(double *)(v52 + 248);
LABEL_126:
  v39 = *(unsigned __int8 *)(v38 + 240);
  v40 = *(unsigned __int8 *)(v38 + 400);
  v41 = *(unsigned __int8 *)(v38 + 432);
  v42 = *(unsigned __int8 *)(v38 + 433);
  v43 = *(_DWORD *)(v38 + 436);
  LODWORD(buf.__r_.__value_.__l.__data_) = 136316674;
  *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v35;
  WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
  *(double *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v36;
  HIWORD(buf.__r_.__value_.__r.__words[2]) = 1024;
  *(_DWORD *)v60 = v39;
  *(_WORD *)&v60[4] = 1024;
  *(_DWORD *)&v60[6] = v40;
  *(_WORD *)v61 = 1024;
  *(_DWORD *)&v61[2] = v41;
  *(_WORD *)&v61[6] = 1024;
  *(_DWORD *)&v61[8] = v42;
  LOWORD(v62) = 1024;
  *(_DWORD *)((char *)&v62 + 2) = v43;
  _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "regulatory,geo,monitor,refreshCurrentGeoArea,state,locationIso:%s,age:%.2f,isLastKnown:%d,authorized:%d,needed:%d,monitoring:%d,retries:%d", (uint8_t *)&buf, 0x34u);
LABEL_127:

  v44 = *(uint64_t **)(v52 + 272);
  if (v44)
  {
    while (1)
    {
      v45 = (id)qword_100857F00;
      if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
        break;
LABEL_145:

      v44 = (uint64_t *)*v44;
      if (!v44)
        goto LABEL_146;
    }
    sub_1002C52F0(*((_DWORD *)v44 + 4), v53);
    if (v54 >= 0)
      v46 = v53;
    else
      v46 = (void **)v53[0];
    if (*((char *)v44 + 55) < 0)
    {
      if (v44[5])
        v47 = (const char *)v44[4];
      else
        v47 = "__";
      if (v44[5])
        goto LABEL_137;
    }
    else
    {
      if (*((_BYTE *)v44 + 55))
        v47 = (const char *)(v44 + 4);
      else
        v47 = "__";
      if (*((_BYTE *)v44 + 55))
      {
LABEL_137:
        v48 = CFAbsoluteTimeGetCurrent() - *((double *)v44 + 7);
        goto LABEL_143;
      }
    }
    v48 = 0.0;
LABEL_143:
    v49 = *((unsigned __int8 *)v44 + 24);
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315906;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v46;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v47;
    HIWORD(buf.__r_.__value_.__r.__words[2]) = 2048;
    *(double *)v60 = v48;
    *(_WORD *)&v60[8] = 1024;
    *(_DWORD *)v61 = v49;
    _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEFAULT, "regulatory,geo,monitor,refreshCurrentGeoArea,state,mccSlot:%s,iso:%s,age:%.2f,isLastKnown:%d", (uint8_t *)&buf, 0x26u);
    if (v54 < 0)
      operator delete(v53[0]);
    goto LABEL_145;
  }
LABEL_146:
  a1 = v52;
  if (v18)
  {
    std::string::operator=(v50, &__str);
    *(_BYTE *)(v52 + 344) = v51;
    *(_BYTE *)(v52 + 345) = 1;
    if (v51)
      sub_1001D7130(v52);
    else
      sub_1001D7188(v52);
  }
LABEL_150:
  std::string::operator=((std::string *)(a1 + 320), &v57);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v57.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
}

void sub_1001D6FA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a27 < 0)
    operator delete(__p);
  if (a34 < 0)
    operator delete(a29);
  if (a40 < 0)
    operator delete(a35);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1001D7044(uint64_t result)
{
  uint64_t v1;

  if (*(_BYTE *)(result + 472))
  {
    v1 = result;
    if (os_log_type_enabled((os_log_t)qword_100857F00, OS_LOG_TYPE_DEBUG))
      sub_1003D9474();
    return sub_1000061C4(v1 + 8, 7);
  }
  return result;
}

BOOL sub_1001D7098(_QWORD *a1)
{
  size_t v2;

  v2 = strlen(off_100853238[0]);
  if (*((char *)a1 + 23) < 0)
  {
    if (v2 == a1[1])
    {
      if (v2 == -1)
        goto LABEL_10;
      a1 = (_QWORD *)*a1;
      return memcmp(a1, off_100853238[0], v2) == 0;
    }
  }
  else if (v2 == *((unsigned __int8 *)a1 + 23))
  {
    if (v2 == -1)
LABEL_10:
      sub_10017EF98();
    return memcmp(a1, off_100853238[0], v2) == 0;
  }
  return 0;
}

uint64_t sub_1001D7130(uint64_t result)
{
  uint64_t v1;

  if (*(_BYTE *)(result + 472))
  {
    v1 = result;
    if (os_log_type_enabled((os_log_t)qword_100857F00, OS_LOG_TYPE_DEBUG))
      sub_1003D94A0();
    return sub_1000061C4(v1 + 8, 2);
  }
  return result;
}

uint64_t sub_1001D7188(uint64_t result)
{
  uint64_t v1;

  if (*(_BYTE *)(result + 472))
  {
    v1 = result;
    if (os_log_type_enabled((os_log_t)qword_100857F00, OS_LOG_TYPE_DEBUG))
      sub_1003D9514();
    return sub_1000061C4(v1 + 8, 3);
  }
  return result;
}

void sub_1001D71E0(uint64_t a1, int a2, uint64_t a3, int a4)
{
  unsigned int v7;
  BOOL v8;
  char *v9;
  char v10;
  NSObject *v11;
  _BOOL4 v12;
  _BOOL4 v13;
  int v14;
  void **v15;
  const char *v16;
  void **v17;
  const char *v18;
  const char *v19;
  const char *v20;
  int v21;
  int v22;
  void *__p[2];
  char v24;
  int v25;
  _BYTE buf[12];
  __int16 v27;
  const char *v28;
  __int16 v29;
  int v30;
  __int16 v31;
  const char *v32;
  __int16 v33;
  int v34;

  v25 = a2;
  v7 = a2 & 0xFFFFFFFE;
  v8 = (a2 & 0xFFFFFFFE) == 2;
  *(_QWORD *)buf = &v25;
  v9 = sub_1001DA308(a1 + 256, &v25, (uint64_t)&unk_100472CF8, (_DWORD **)buf);
  v10 = *(_BYTE *)(a1 + 434) != 1 || v8;
  v11 = (id)qword_100857F00;
  v12 = os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG);
  if ((v10 & 1) != 0)
  {
    if (v12)
    {
      sub_1002C52F0(v25, __p);
      if (v24 >= 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if (*(char *)(a3 + 23) < 0)
      {
        if (*(_QWORD *)(a3 + 8))
          v16 = *(const char **)a3;
        else
          v16 = "__";
      }
      else if (*(_BYTE *)(a3 + 23))
      {
        v16 = (const char *)a3;
      }
      else
      {
        v16 = "__";
      }
      v19 = v9 + 32;
      if (v9[55] < 0)
      {
        if (*((_QWORD *)v9 + 5))
          v19 = *(const char **)v19;
        else
          v19 = "__";
      }
      else if (!v9[55])
      {
        v19 = "__";
      }
      v21 = v9[24];
      *(_DWORD *)buf = 136316162;
      *(_QWORD *)&buf[4] = v15;
      v27 = 2080;
      v28 = v16;
      v29 = 1024;
      v30 = a4;
      v31 = 2080;
      v32 = v19;
      v33 = 1024;
      v34 = v21;
      _os_log_debug_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "regulatory,geo,monitor,procesMcc,slot:%s,new:(%s:%d),past:(%s:%d)", buf, 0x2Cu);
      if (v24 < 0)
        operator delete(__p[0]);
    }
    v13 = v7 == 2;

    std::string::operator=((std::string *)(v9 + 32), (const std::string *)a3);
    v14 = a4 ^ 1;
    if (!v9[24])
      v14 = 1;
    if ((v13 | v14) == 1)
      *((CFAbsoluteTime *)v9 + 7) = CFAbsoluteTimeGetCurrent();
    v9[24] = a4;
    sub_1001D6668(a1);
  }
  else
  {
    if (v12)
    {
      sub_1002C52F0(v25, __p);
      if (v24 >= 0)
        v17 = __p;
      else
        v17 = (void **)__p[0];
      if (*(char *)(a3 + 23) < 0)
      {
        if (*(_QWORD *)(a3 + 8))
          v18 = *(const char **)a3;
        else
          v18 = "__";
      }
      else if (*(_BYTE *)(a3 + 23))
      {
        v18 = (const char *)a3;
      }
      else
      {
        v18 = "__";
      }
      v20 = v9 + 32;
      if (v9[55] < 0)
      {
        if (*((_QWORD *)v9 + 5))
          v20 = *(const char **)v20;
        else
          v20 = "__";
      }
      else if (!v9[55])
      {
        v20 = "__";
      }
      v22 = v9[24];
      *(_DWORD *)buf = 136316162;
      *(_QWORD *)&buf[4] = v17;
      v27 = 2080;
      v28 = v18;
      v29 = 1024;
      v30 = a4;
      v31 = 2080;
      v32 = v20;
      v33 = 1024;
      v34 = v22;
      _os_log_debug_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "regulatory,geo,monitor,procesMcc,slot:%s,new:(%s:%d),past:(%s:%d),skip MCC update in airplane mode", buf, 0x2Cu);
      if (v24 < 0)
        operator delete(__p[0]);
    }

  }
}

void sub_1001D7508(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL sub_1001D7524(uint64_t a1)
{
  size_t v2;
  size_t v3;
  size_t v4;
  const void *v5;
  size_t v6;
  char *v7;
  size_t v8;
  const void *v9;
  char *v10;
  size_t v11;
  const void *v12;
  char *v13;
  size_t v14;
  const void *v15;
  char *v16;
  size_t v17;
  const void *v18;
  char *v19;
  size_t v20;
  const void *v21;

  v2 = strlen(off_100853208[0]);
  v3 = v2;
  v4 = *(unsigned __int8 *)(a1 + 23);
  if (*(char *)(a1 + 23) < 0)
  {
    v6 = *(_QWORD *)(a1 + 8);
    if (v2 != v6)
    {
      v7 = off_100853228[0];
      v8 = strlen(off_100853228[0]);
      goto LABEL_15;
    }
    if (v2 == -1)
      goto LABEL_57;
    v5 = *(const void **)a1;
  }
  else
  {
    if (v2 != v4)
    {
      v7 = off_100853228[0];
      v8 = strlen(off_100853228[0]);
      goto LABEL_12;
    }
    v5 = (const void *)a1;
    if (v3 == -1)
LABEL_57:
      sub_10017EF98();
  }
  if (!memcmp(v5, off_100853208[0], v3))
    return 1;
  v7 = off_100853228[0];
  v8 = strlen(off_100853228[0]);
  if ((v4 & 0x80) == 0)
  {
LABEL_12:
    v6 = v4;
    v9 = (const void *)a1;
    if (v8 != v4)
    {
      v10 = off_100853230[0];
      v11 = strlen(off_100853230[0]);
      goto LABEL_20;
    }
    goto LABEL_18;
  }
  v6 = *(_QWORD *)(a1 + 8);
LABEL_15:
  if (v8 != v6)
  {
    v10 = off_100853230[0];
    v11 = strlen(off_100853230[0]);
    goto LABEL_24;
  }
  if (v6 == -1)
    sub_10017EF98();
  v9 = *(const void **)a1;
LABEL_18:
  if (!memcmp(v9, v7, v6))
    return 1;
  v10 = off_100853230[0];
  v11 = strlen(off_100853230[0]);
  if ((v4 & 0x80) == 0)
  {
LABEL_20:
    v6 = v4;
    v12 = (const void *)a1;
    if (v11 != v4)
    {
      v13 = off_100853238[0];
      v14 = strlen(off_100853238[0]);
      goto LABEL_29;
    }
    goto LABEL_27;
  }
  v6 = *(_QWORD *)(a1 + 8);
LABEL_24:
  if (v11 != v6)
  {
    v13 = off_100853238[0];
    v14 = strlen(off_100853238[0]);
    goto LABEL_33;
  }
  if (v6 == -1)
    sub_10017EF98();
  v12 = *(const void **)a1;
LABEL_27:
  if (!memcmp(v12, v10, v6))
    return 1;
  v13 = off_100853238[0];
  v14 = strlen(off_100853238[0]);
  if ((v4 & 0x80) == 0)
  {
LABEL_29:
    v6 = v4;
    v15 = (const void *)a1;
    if (v14 != v4)
    {
      v16 = off_100853250[0];
      v17 = strlen(off_100853250[0]);
      goto LABEL_38;
    }
    goto LABEL_36;
  }
  v6 = *(_QWORD *)(a1 + 8);
LABEL_33:
  if (v14 != v6)
  {
    v16 = off_100853250[0];
    v17 = strlen(off_100853250[0]);
LABEL_42:
    if (v17 != v6)
    {
      v19 = off_100853220[0];
      v20 = strlen(off_100853220[0]);
      goto LABEL_51;
    }
    if (v6 == -1)
      sub_10017EF98();
    v18 = *(const void **)a1;
LABEL_45:
    if (!memcmp(v18, v16, v6))
      return 1;
    v19 = off_100853220[0];
    v20 = strlen(off_100853220[0]);
    if ((v4 & 0x80) == 0)
      goto LABEL_47;
    v6 = *(_QWORD *)(a1 + 8);
LABEL_51:
    if (v20 != v6)
      return sub_1001D8958((_QWORD *)a1, off_100853248[0]);
    if (v6 == -1)
      sub_10017EF98();
    v21 = *(const void **)a1;
    v4 = v6;
    goto LABEL_54;
  }
  if (v6 == -1)
    sub_10017EF98();
  v15 = *(const void **)a1;
LABEL_36:
  if (!memcmp(v15, v13, v6))
    return 1;
  v16 = off_100853250[0];
  v17 = strlen(off_100853250[0]);
  if ((v4 & 0x80) != 0)
  {
    v6 = *(_QWORD *)(a1 + 8);
    goto LABEL_42;
  }
LABEL_38:
  v6 = v4;
  v18 = (const void *)a1;
  if (v17 == v4)
    goto LABEL_45;
  v19 = off_100853220[0];
  v20 = strlen(off_100853220[0]);
LABEL_47:
  v21 = (const void *)a1;
  if (v20 != v4)
    return sub_1001D8958((_QWORD *)a1, off_100853248[0]);
LABEL_54:
  if (memcmp(v21, v19, v4))
    return sub_1001D8958((_QWORD *)a1, off_100853248[0]);
  return 1;
}

void sub_1001D78C0(int *a1, const std::string *a2)
{
  char v4;
  int64_t size;
  const std::string *v6;
  char *v7;
  std::string *v8;
  char *v9;
  std::string::size_type v10;
  std::string::size_type v11;
  const std::string::value_type *v12;
  std::string *v13;
  std::string *v14;
  NSObject *v15;
  int v16;
  NSObject *v17;
  std::string v18;
  std::string v19;
  std::string __p;
  _BYTE v21[24];

  if (os_log_type_enabled((os_log_t)qword_100857F00, OS_LOG_TYPE_DEBUG))
    sub_1003D9600();
  memset(&__p, 0, sizeof(__p));
  memset(&v19, 0, sizeof(v19));
  v4 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  if (v4 >= 0)
    size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  else
    size = a2->__r_.__value_.__l.__size_;
  if (v4 >= 0)
    v6 = a2;
  else
    v6 = (const std::string *)a2->__r_.__value_.__r.__words[0];
  if (size >= 1)
  {
    v7 = (char *)v6 + size;
    v8 = (std::string *)v6;
    do
    {
      v9 = (char *)memchr(v8, 44, size);
      if (!v9)
        break;
      if (*v9 == 44)
      {
        if (v9 == v7)
          break;
        v10 = v9 - (char *)v6;
        if (v10 == -1)
          break;
        std::string::basic_string(&v18, a2, 0, v10, (std::allocator<char> *)v21);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        __p = v18;
        if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v11 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
        else
          v11 = a2->__r_.__value_.__l.__size_;
        std::string::basic_string(&v18, a2, v10 + 1, v11, (std::allocator<char> *)v21);
        if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v19.__r_.__value_.__l.__data_);
        v19 = v18;
        goto LABEL_29;
      }
      v8 = (std::string *)(v9 + 1);
      size = v7 - (char *)v8;
    }
    while (v7 - (char *)v8 >= 1);
  }
  std::string::operator=(&__p, a2);
  if (sub_1000069CC(*a1))
    v12 = "1";
  else
    v12 = "p1";
  std::string::assign(&v19, v12);
LABEL_29:
  if (!std::string::compare(&__p, "000"))
  {
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      *__p.__r_.__value_.__l.__data_ = 0;
      __p.__r_.__value_.__l.__size_ = 0;
    }
    else
    {
      __p.__r_.__value_.__s.__data_[0] = 0;
      *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
    }
  }
  if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v13 = (std::string *)((char *)&v19 + HIBYTE(v19.__r_.__value_.__r.__words[2]));
  else
    v13 = (std::string *)(v19.__r_.__value_.__r.__words[0] + v19.__r_.__value_.__l.__size_);
  if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v14 = &v19;
  else
    v14 = (std::string *)v19.__r_.__value_.__r.__words[0];
  while (v14 != v13)
  {
    v14->__r_.__value_.__s.__data_[0] = __tolower(v14->__r_.__value_.__s.__data_[0]);
    v14 = (std::string *)((char *)v14 + 1);
  }
  if (!std::string::compare(&v19, "1") && (sub_1000069CC(*a1) || sub_100360F30(*a1)))
  {
    v15 = (id)qword_100857F00;
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
    {
      sub_1002C52F0(0, &v18);
      sub_1003D95B4();
    }
    v16 = 0;
LABEL_64:

    sub_1000070F0((uint64_t)(a1 + 120), v16, (uint64_t)&__p, 0);
    goto LABEL_65;
  }
  if (!std::string::compare(&v19, "2") && sub_1000069CC(*a1))
  {
    v15 = (id)qword_100857F00;
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
    {
      sub_1002C52F0(1, &v18);
      sub_1003D95B4();
    }
    v16 = 1;
    goto LABEL_64;
  }
  if (!std::string::compare(&v19, "p1") && !sub_1000069CC(*a1))
  {
    v15 = (id)qword_100857F00;
    v16 = 2;
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
    {
      sub_1002C52F0(2, &v18);
      sub_1003D95B4();
    }
    goto LABEL_64;
  }
  if (!std::string::compare(&v19, "p2") && !sub_1000069CC(*a1))
  {
    v15 = (id)qword_100857F00;
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
    {
      sub_1002C52F0(3, &v18);
      sub_1003D95B4();
    }
    v16 = 3;
    goto LABEL_64;
  }
  v17 = (id)qword_100857F00;
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
  {
    sub_1002C52F0(4, &v18);
    sub_1003D95B4();
  }

LABEL_65:
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v19.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1001D7CE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  void *v25;

  if (a18 < 0)
    operator delete(__p);
  if (a25 < 0)
    operator delete(a20);
  _Unwind_Resume(a1);
}

uint64_t sub_1001D7D64(int *a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  int64_t v6;
  uint64_t v7;
  _BYTE *v8;
  void *v9;
  _BYTE *v10;
  std::string::size_type v11;
  std::string::size_type v12;
  int64_t size;
  std::string *p_str;
  _BYTE *v15;
  std::string *v16;
  _BYTE *v17;
  std::string *v18;
  std::string *v19;
  int v20;
  NSObject *v21;
  NSObject *v22;
  int v23;
  std::string *v24;
  std::string *p_p;
  std::string::size_type v27;
  std::string::size_type v28;
  std::string *v29;
  std::string *v30;
  std::string v31;
  std::string v32;
  std::string __p;
  char v34;
  std::string __str;
  _BOOL4 v36;
  std::string v37;

  if (sub_1000069CC(*a1))
  {
    if (os_log_type_enabled((os_log_t)qword_100857F00, OS_LOG_TYPE_DEBUG))
      sub_1003D9664();
    return 0;
  }
  if (sub_100360FA0(*a1))
  {
    sub_1002C65B4((uint64_t)(a1 + 120), 0, a2, 0);
    return 1;
  }
  if (os_log_type_enabled((os_log_t)qword_100857F00, OS_LOG_TYPE_DEBUG))
    sub_1003D96DC();
  memset(&__p, 0, sizeof(__p));
  memset(&v32, 0, sizeof(v32));
  memset(&v31, 0, sizeof(v31));
  v5 = *(_BYTE *)(a2 + 23);
  if (v5 >= 0)
    v6 = *(unsigned __int8 *)(a2 + 23);
  else
    v6 = *(_QWORD *)(a2 + 8);
  if (v5 >= 0)
    v7 = a2;
  else
    v7 = *(_QWORD *)a2;
  if (v6 >= 1)
  {
    v8 = (_BYTE *)(v7 + v6);
    v9 = (void *)v7;
    do
    {
      v10 = memchr(v9, 44, v6);
      if (!v10)
        break;
      if (*v10 == 44)
      {
        if (v10 == v8)
          break;
        v11 = (std::string::size_type)&v10[-v7];
        if (v11 == -1)
          break;
        std::string::basic_string(&__str, (const std::string *)a2, 0, v11, (std::allocator<char> *)&v37);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        __p = __str;
        if (*(char *)(a2 + 23) >= 0)
          v12 = *(unsigned __int8 *)(a2 + 23);
        else
          v12 = *(_QWORD *)(a2 + 8);
        std::string::basic_string(&__str, (const std::string *)a2, v11 + 1, v12, (std::allocator<char> *)&v37);
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        else
          size = __str.__r_.__value_.__l.__size_;
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_str = &__str;
        else
          p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
        if (size >= 1)
        {
          v15 = (char *)p_str + size;
          v16 = p_str;
          do
          {
            v17 = memchr(v16, 44, size);
            if (!v17)
              break;
            if (*v17 == 44)
            {
              if (v17 == v15)
                break;
              v27 = v17 - (_BYTE *)p_str;
              if (v27 == -1)
                break;
              std::string::basic_string(&v37, &__str, 0, v27, (std::allocator<char> *)&v34);
              if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v32.__r_.__value_.__l.__data_);
              v32 = v37;
              if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v28 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
              else
                v28 = __str.__r_.__value_.__l.__size_;
              std::string::basic_string(&v37, &__str, v27 + 1, v28, (std::allocator<char> *)&v34);
              if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v31.__r_.__value_.__l.__data_);
              v31 = v37;
              goto LABEL_86;
            }
            v16 = (std::string *)(v17 + 1);
            size = v15 - (_BYTE *)v16;
          }
          while (v15 - (_BYTE *)v16 >= 1);
        }
        std::string::operator=(&v32, &__str);
        std::string::assign(&v31, "0");
LABEL_86:
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        goto LABEL_41;
      }
      v9 = v10 + 1;
      v6 = v8 - (_BYTE *)v9;
    }
    while (v8 - (_BYTE *)v9 >= 1);
  }
  std::string::operator=(&__p, (const std::string *)a2);
  std::string::assign(&v32, "p1");
  std::string::assign(&v31, "0");
LABEL_41:
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v18 = (std::string *)((char *)&v32 + HIBYTE(v32.__r_.__value_.__r.__words[2]));
  else
    v18 = (std::string *)(v32.__r_.__value_.__r.__words[0] + v32.__r_.__value_.__l.__size_);
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v19 = &v32;
  else
    v19 = (std::string *)v32.__r_.__value_.__r.__words[0];
  while (v19 != v18)
  {
    v19->__r_.__value_.__s.__data_[0] = __tolower(v19->__r_.__value_.__s.__data_[0]);
    v19 = (std::string *)((char *)v19 + 1);
  }
  v20 = std::string::compare(&v31, "0");
  if (!std::string::compare(&v32, "p1") && !sub_1000069CC(*a1))
  {
    v22 = (id)qword_100857F00;
    v23 = 2;
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
    {
      sub_1002C52F0(2, &v37);
      if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v24 = &v37;
      else
        v24 = (std::string *)v37.__r_.__value_.__r.__words[0];
      p_p = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      LODWORD(__str.__r_.__value_.__l.__data_) = 136315650;
      *(std::string::size_type *)((char *)__str.__r_.__value_.__r.__words + 4) = (std::string::size_type)v24;
      WORD2(__str.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&__str.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)p_p;
      HIWORD(__str.__r_.__value_.__r.__words[2]) = 1024;
      v36 = v20 != 0;
      _os_log_debug_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "regulatory,geo,monitor,processIsoCountryFromPhone,isoCountrySource=%s,isoCountry=%s,isLastKnown=%d.", (uint8_t *)&__str, 0x1Cu);
      if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v37.__r_.__value_.__l.__data_);
      v23 = 2;
    }
  }
  else
  {
    if (std::string::compare(&v32, "p2") || sub_1000069CC(*a1))
    {
      v21 = (id)qword_100857F00;
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
      {
        sub_1002C52F0(4, &__str);
        sub_1003D9690();
      }

      v4 = 0;
      goto LABEL_68;
    }
    v22 = (id)qword_100857F00;
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
    {
      sub_1002C52F0(3, &v37);
      if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v29 = &v37;
      else
        v29 = (std::string *)v37.__r_.__value_.__r.__words[0];
      v30 = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v30 = (std::string *)__p.__r_.__value_.__r.__words[0];
      LODWORD(__str.__r_.__value_.__l.__data_) = 136315650;
      *(std::string::size_type *)((char *)__str.__r_.__value_.__r.__words + 4) = (std::string::size_type)v29;
      WORD2(__str.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&__str.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v30;
      HIWORD(__str.__r_.__value_.__r.__words[2]) = 1024;
      v36 = v20 != 0;
      _os_log_debug_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "regulatory,geo,monitor,processIsoCountryFromPhone,isoCountrySource=%s,isoCountry=%s,isLastKnown=%d.", (uint8_t *)&__str, 0x1Cu);
      if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v37.__r_.__value_.__l.__data_);
    }
    v23 = 3;
  }

  sub_1002C65B4((uint64_t)(a1 + 120), v23, (uint64_t)&__p, v20 != 0);
  v4 = 1;
LABEL_68:
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v31.__r_.__value_.__l.__data_);
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v32.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v4;
}

void sub_1001D831C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a35 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  if (a21 < 0)
    operator delete(a16);
  if (a28 < 0)
    operator delete(a23);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1001D83B4(uint64_t a1)
{
  sub_1001D6668(a1);
  return sub_1001D83D8(a1);
}

uint64_t sub_1001D83D8(uint64_t result)
{
  uint64_t v1;

  if (*(_BYTE *)(result + 472))
  {
    v1 = result;
    if (os_log_type_enabled((os_log_t)qword_100857F00, OS_LOG_TYPE_DEBUG))
      sub_1003D9740();
    return sub_1000061C4(v1 + 8, 10);
  }
  return result;
}

uint64_t sub_1001D842C(uint64_t result, std::string *__str)
{
  const std::string *v2;
  uint64_t v3;
  std::string *v4;
  uint64_t v5;
  uint64_t v6;
  std::string::size_type size;
  int v8;
  unsigned __int8 *i;

  v2 = __str;
  v3 = result;
  v4 = (std::string *)(result + 352);
  v5 = *(unsigned __int8 *)(result + 375);
  if ((v5 & 0x80u) == 0)
    v6 = *(unsigned __int8 *)(result + 375);
  else
    v6 = *(_QWORD *)(result + 360);
  size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  v8 = (char)size;
  if ((size & 0x80u) != 0)
    size = __str->__r_.__value_.__l.__size_;
  if (v6 == size)
  {
    if (v8 < 0)
      __str = (std::string *)__str->__r_.__value_.__r.__words[0];
    if ((v5 & 0x80) != 0)
    {
      result = memcmp(v4->__r_.__value_.__l.__data_, __str, *(_QWORD *)(result + 360));
      if (!(_DWORD)result)
        return result;
    }
    else
    {
      if (!*(_BYTE *)(result + 375))
        return result;
      for (i = (unsigned __int8 *)(result + 352); *i == __str->__r_.__value_.__s.__data_[0]; ++i)
      {
        __str = (std::string *)((char *)__str + 1);
        if (!--v5)
          return result;
      }
    }
  }
  std::string::operator=(v4, v2);
  result = *(_QWORD *)(v3 + 176);
  if (result)
    return (*(uint64_t (**)(uint64_t, std::string *))(*(_QWORD *)result + 48))(result, v4);
  return result;
}

void sub_1001D8500()
{
  operator new();
}

uint64_t sub_1001D85F0(uint64_t result, int a2)
{
  uint64_t v3;
  uint64_t v4;

  if (*(_BYTE *)(result + 472))
  {
    v3 = result;
    if (os_log_type_enabled((os_log_t)qword_100857F00, OS_LOG_TYPE_DEBUG))
      sub_1003D9798();
    *(_BYTE *)(v3 + 400) = a2;
    if (a2)
      v4 = 5;
    else
      v4 = 6;
    return sub_1000061C4(v3 + 8, v4);
  }
  return result;
}

uint64_t sub_1001D8660(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_100008C00(result, a2, a3, a4, a5, a6, a7, a8);
    operator delete();
  }
  return result;
}

void sub_1001D869C(uint64_t a1, int a2)
{
  BOOL v3;
  char *v4;
  _QWORD *v5;
  size_t v6;
  char *v7;
  int v8;
  std::string __p;
  int *v10;

  if (!a2)
    sub_1003D97FC();
  if (*(_BYTE *)(a1 + 434))
    v3 = *(unsigned __int8 *)(a1 + 434) == a2;
  else
    v3 = 0;
  if (v3)
    return;
  *(_BYTE *)(a1 + 434) = a2;
  if (a2 == 2)
  {
    v5 = (_QWORD *)(a1 + 376);
    v6 = strlen(off_100853220[0]);
    if (*(char *)(a1 + 399) < 0)
    {
      if (v6 == *(_QWORD *)(a1 + 384))
      {
        if (v6 == -1)
          goto LABEL_35;
        v5 = (_QWORD *)*v5;
        goto LABEL_23;
      }
    }
    else if (v6 == *(unsigned __int8 *)(a1 + 399))
    {
      if (v6 == -1)
LABEL_35:
        sub_10017EF98();
LABEL_23:
      if (!memcmp(v5, off_100853220[0], v6))
      {
        if (os_log_type_enabled((os_log_t)qword_100857F00, OS_LOG_TYPE_DEBUG))
          sub_1003D987C();
        sub_1001D5400(a1);
      }
    }
LABEL_32:
    sub_1002C59B8(a1 + 480, *(unsigned __int8 *)(a1 + 434));
    sub_1001D6668(a1);
    return;
  }
  if (a2 == 1)
  {
    if (os_log_type_enabled((os_log_t)qword_100857F00, OS_LOG_TYPE_DEBUG))
      sub_1003D9850();
    sub_10000BF04(&__p, off_100853220[0]);
    sub_1001D88F0(a1, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    sub_1002646D8(a1 + 1040, 1);
    v8 = 0;
    v10 = &v8;
    v4 = sub_1001DA064(a1 + 256, &v8, (uint64_t)&unk_100472CF8, &v10);
    if (v4[55] < 0)
    {
      **((_BYTE **)v4 + 4) = 0;
      *((_QWORD *)v4 + 5) = 0;
    }
    else
    {
      v4[32] = 0;
      v4[55] = 0;
    }
    v4[24] = 0;
    *((_QWORD *)v4 + 7) = 0;
    v8 = 1;
    v10 = &v8;
    v7 = sub_1001DA064(a1 + 256, &v8, (uint64_t)&unk_100472CF8, &v10);
    if (v7[55] < 0)
    {
      **((_BYTE **)v7 + 4) = 0;
      *((_QWORD *)v7 + 5) = 0;
    }
    else
    {
      v7[32] = 0;
      v7[55] = 0;
    }
    v7[24] = 0;
    *((_QWORD *)v7 + 7) = 0;
    goto LABEL_32;
  }
  if (os_log_type_enabled((os_log_t)qword_100857F00, OS_LOG_TYPE_ERROR))
    sub_1003D9824();
}

void sub_1001D88D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1001D88F0(uint64_t a1, const std::string *a2)
{
  char *v3;
  NSObject *v4;
  void *v5;

  v3 = (char *)(a1 + 376);
  std::string::operator=((std::string *)(a1 + 376), a2);
  v4 = qword_100857F00;
  if (os_log_type_enabled((os_log_t)qword_100857F00, OS_LOG_TYPE_DEBUG))
    sub_1003D98A8(a1, v3, v4);
  v5 = sub_100007824();
  return sub_1003916D8((uint64_t)v5, v3);
}

BOOL sub_1001D8958(_QWORD *a1, char *__s)
{
  size_t v4;

  v4 = strlen(__s);
  if (*((char *)a1 + 23) < 0)
  {
    if (v4 == a1[1])
    {
      if (v4 == -1)
        goto LABEL_10;
      a1 = (_QWORD *)*a1;
      return memcmp(a1, __s, v4) == 0;
    }
  }
  else if (v4 == *((unsigned __int8 *)a1 + 23))
  {
    if (v4 == -1)
LABEL_10:
      sub_10017EF98();
    return memcmp(a1, __s, v4) == 0;
  }
  return 0;
}

NSMutableArray *sub_1001D89E8(uint64_t a1)
{
  NSMutableArray *v2;
  const char *v3;
  _QWORD *v4;
  const char *v5;
  const char *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  void **v10;
  void *v11;
  const char *v12;
  double v13;
  void *v14;
  uint64_t *i;
  void **v16;
  const char *v17;
  double v18;
  void *v19;
  _QWORD *v21;
  const char *v22;
  const char *v23;
  void *__p[2];
  char v25;

  v2 = objc_opt_new(NSMutableArray);
  v3 = (const char *)(a1 + 296);
  if (*(char *)(a1 + 319) < 0)
  {
    if (*(_QWORD *)(a1 + 304))
      v3 = *(const char **)v3;
    else
      v3 = "__";
  }
  else if (!*(_BYTE *)(a1 + 319))
  {
    v3 = "__";
  }
  v23 = v3;
  v4 = (_QWORD *)(a1 + 320);
  if (*(char *)(a1 + 343) < 0)
    v4 = (_QWORD *)*v4;
  v21 = v4;
  v5 = (const char *)(a1 + 376);
  if (*(char *)(a1 + 399) < 0)
  {
    if (*(_QWORD *)(a1 + 384))
      v5 = *(const char **)v5;
    else
      v5 = "__";
  }
  else if (!*(_BYTE *)(a1 + 399))
  {
    v5 = "__";
  }
  v22 = v5;
  if (*(char *)(a1 + 375) < 0)
  {
    if (*(_QWORD *)(a1 + 360))
      v6 = *(const char **)(a1 + 352);
    else
      v6 = "__";
  }
  else if (*(_BYTE *)(a1 + 375))
  {
    v6 = (const char *)(a1 + 352);
  }
  else
  {
    v6 = "__";
  }
  if (*(char *)(a1 + 463) < 0)
  {
    if (*(_QWORD *)(a1 + 448))
      v7 = *(const char **)(a1 + 440);
    else
      v7 = "__";
  }
  else if (*(_BYTE *)(a1 + 463))
  {
    v7 = (const char *)(a1 + 440);
  }
  else
  {
    v7 = "__";
  }
  v8 = *(unsigned __int8 *)(a1 + 345);
  v9 = *(unsigned __int8 *)(a1 + 344);
  sub_10038DE8C(*(unsigned __int8 *)(a1 + 434), __p);
  if (v25 >= 0)
    v10 = __p;
  else
    v10 = (void **)__p[0];
  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Chosen ISO: %s [initialized: %d, current: %d, source: %s]. Last stored ISO: %s. Last updated ISO: %s. WiFi ISO: %s. Airplane mode: %s"), v23, v8, v9, v21, v22, v6, v7, v10));
  -[NSMutableArray addObject:](v2, "addObject:", v11);

  if (v25 < 0)
    operator delete(__p[0]);
  if ((*(char *)(a1 + 239) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(a1 + 239))
      v12 = (const char *)(a1 + 216);
    else
      v12 = "__";
    if (!*(_BYTE *)(a1 + 239))
    {
      v13 = 0.0;
      goto LABEL_45;
    }
    goto LABEL_44;
  }
  if (*(_QWORD *)(a1 + 224))
  {
    v12 = *(const char **)(a1 + 216);
LABEL_44:
    v13 = CFAbsoluteTimeGetCurrent() - *(double *)(a1 + 248);
    goto LABEL_45;
  }
  v13 = 0.0;
  v12 = "__";
LABEL_45:
  v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Location ISO: %s. Age: %.2f s. Last known: %d. Auth: %d. Needed: %d. Monitoring: %d. Retries left: %d"), v12, *(_QWORD *)&v13, *(unsigned __int8 *)(a1 + 240), *(unsigned __int8 *)(a1 + 400), *(unsigned __int8 *)(a1 + 432), *(unsigned __int8 *)(a1 + 433), *(unsigned int *)(a1 + 436)));
  -[NSMutableArray addObject:](v2, "addObject:", v14);

  for (i = *(uint64_t **)(a1 + 272); i; i = (uint64_t *)*i)
  {
    sub_1002C52F0(*((_DWORD *)i + 4), __p);
    if (v25 >= 0)
      v16 = __p;
    else
      v16 = (void **)__p[0];
    if (*((char *)i + 55) < 0)
    {
      if (i[5])
        v17 = (const char *)i[4];
      else
        v17 = "__";
      if (!i[5])
      {
LABEL_59:
        v18 = 0.0;
        goto LABEL_60;
      }
    }
    else
    {
      if (*((_BYTE *)i + 55))
        v17 = (const char *)(i + 4);
      else
        v17 = "__";
      if (!*((_BYTE *)i + 55))
        goto LABEL_59;
    }
    v18 = CFAbsoluteTimeGetCurrent() - *((double *)i + 7);
LABEL_60:
    v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("MCC slot:%s. ISO:%s. Age: %.2f s. Last known: %d"), v16, v17, *(_QWORD *)&v18, *((unsigned __int8 *)i + 24)));
    -[NSMutableArray addObject:](v2, "addObject:", v19);

    if (v25 < 0)
      operator delete(__p[0]);
  }
  return v2;
}

void sub_1001D8D18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  void *v25;
  void *v26;

  _Unwind_Resume(a1);
}

uint64_t sub_1001D8D74(uint64_t a1)
{
  uint64_t v2;
  void **v4;

  v2 = a1 + 152;
  v4 = (void **)(a1 + 192);
  sub_100161C00(&v4);
  sub_1001D8DD8(v2);
  sub_1001D8F08(a1 + 112);
  std::mutex::~mutex((std::mutex *)(a1 + 48));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_1001D8DD8(uint64_t a1)
{
  void *v2;

  sub_1001D8E10(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_1001D8E10(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      sub_1001D8E4C((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

uint64_t sub_1001D8E4C(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 136))
    sub_1001D8E8C(a1 + 96);
  if (*(_BYTE *)(a1 + 88))
    sub_1001D8E8C(a1 + 48);
  return sub_1001D8E8C(a1 + 8);
}

uint64_t sub_1001D8E8C(uint64_t a1)
{
  void *v2;

  sub_1001D8EC4(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_1001D8EC4(int a1, _QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  if (__p)
  {
    v2 = __p;
    do
    {
      v3 = (_QWORD *)*v2;
      v4 = (void *)v2[3];
      if (v4)
      {
        v2[4] = v4;
        operator delete(v4);
      }
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

uint64_t sub_1001D8F08(uint64_t a1)
{
  void *v2;

  sub_1001D8F40(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_1001D8F40(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      sub_1001D8F7C((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void sub_1001D8F7C(uint64_t a1)
{
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t sub_1001D8FD0(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  void **v9;

  if (*(char *)(a1 + 695) < 0)
    operator delete(*(void **)(a1 + 672));
  if (*(char *)(a1 + 671) < 0)
    operator delete(*(void **)(a1 + 648));
  if (*(char *)(a1 + 647) < 0)
    operator delete(*(void **)(a1 + 624));
  if (*(char *)(a1 + 623) < 0)
    operator delete(*(void **)(a1 + 600));
  if (*(char *)(a1 + 599) < 0)
    operator delete(*(void **)(a1 + 576));
  if (*(char *)(a1 + 535) < 0)
    operator delete(*(void **)(a1 + 512));
  v2 = *(_QWORD **)(a1 + 504);
  if (v2 == (_QWORD *)(a1 + 480))
  {
    v3 = 4;
    v2 = (_QWORD *)(a1 + 480);
  }
  else
  {
    if (!v2)
      goto LABEL_18;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_18:
  v4 = *(_QWORD **)(a1 + 472);
  if (v4 == (_QWORD *)(a1 + 448))
  {
    v5 = 4;
    v4 = (_QWORD *)(a1 + 448);
  }
  else
  {
    if (!v4)
      goto LABEL_23;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_23:

  sub_1001D9118(a1 + 280);
  v6 = *(_QWORD **)(a1 + 272);
  if (v6 == (_QWORD *)(a1 + 248))
  {
    v7 = 4;
    v6 = (_QWORD *)(a1 + 248);
    goto LABEL_27;
  }
  if (v6)
  {
    v7 = 5;
LABEL_27:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }

  sub_1001841D0(a1 + 88);
  v9 = (void **)(a1 + 40);
  sub_1001D9194(&v9);
  return a1;
}

uint64_t sub_1001D9118(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + 56;
  sub_10018424C(*(_QWORD **)(a1 + 56), (_QWORD *)(a1 + 64), (uint64_t **)a1);
  if (*(char *)(a1 + 143) < 0)
    operator delete(*(void **)(a1 + 120));

  sub_10003E3F0(a1 + 80, *(_QWORD **)(a1 + 88));
  sub_100184188(v2, *(_QWORD **)(a1 + 64));
  sub_10001AE68(a1 + 32);
  sub_10003E3F0(a1 + 8, *(_QWORD **)(a1 + 16));
  return a1;
}

void sub_1001D9194(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 72;
        sub_1001D9218((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_1001D9218(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 47) < 0)
    operator delete(*(void **)(a2 + 24));
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

uint64_t sub_1001D925C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  void **v24;

  sub_1001D8660((uint64_t *)(a1 + 392), 0, a3, a4, a5, a6, a7, a8);
  sub_1001D8660((uint64_t *)(a1 + 376), 0, v9, v10, v11, v12, v13, v14);
  v15 = *(_QWORD **)(a1 + 360);
  if (v15 == (_QWORD *)(a1 + 336))
  {
    v16 = 4;
    v15 = (_QWORD *)(a1 + 336);
  }
  else
  {
    if (!v15)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*v15 + 8 * v16))();
LABEL_6:

  if (*(char *)(a1 + 311) < 0)
    operator delete(*(void **)(a1 + 288));
  if (*(char *)(a1 + 287) < 0)
    operator delete(*(void **)(a1 + 264));
  sub_100179F40((_QWORD *)(a1 + 240));

  v24 = (void **)(a1 + 192);
  sub_1001D93C4(&v24);
  v17 = *(_QWORD **)(a1 + 184);
  if (v17 == (_QWORD *)(a1 + 160))
  {
    v18 = 4;
    v17 = (_QWORD *)(a1 + 160);
  }
  else
  {
    if (!v17)
      goto LABEL_15;
    v18 = 5;
  }
  (*(void (**)(void))(*v17 + 8 * v18))();
LABEL_15:
  v19 = *(_QWORD **)(a1 + 152);
  if (v19 == (_QWORD *)(a1 + 128))
  {
    v20 = 4;
    v19 = (_QWORD *)(a1 + 128);
  }
  else
  {
    if (!v19)
      goto LABEL_20;
    v20 = 5;
  }
  (*(void (**)(void))(*v19 + 8 * v20))();
LABEL_20:
  v21 = *(_QWORD **)(a1 + 120);
  if (v21 == (_QWORD *)(a1 + 96))
  {
    v22 = 4;
    v21 = (_QWORD *)(a1 + 96);
  }
  else
  {
    if (!v21)
      goto LABEL_25;
    v22 = 5;
  }
  (*(void (**)(void))(*v21 + 8 * v22))();
LABEL_25:
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));

  return a1;
}

void sub_1001D93C4(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 80;
        sub_1001D9448((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_1001D9448(uint64_t a1, uint64_t a2)
{
  void *v3;

  v3 = *(void **)(a2 + 24);
  if (v3)
  {
    *(_QWORD *)(a2 + 32) = v3;
    operator delete(v3);
  }
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

void sub_1001D948C(uint64_t a1, char *a2)
{
  if (a2)
  {
    sub_1001D948C(a1, *(_QWORD *)a2);
    sub_1001D948C(a1, *((_QWORD *)a2 + 1));
    if (a2[71] < 0)
      operator delete(*((void **)a2 + 6));
    operator delete(a2);
  }
}

void sub_1001D94DC(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_1001D94DC(a1, *a2);
    sub_1001D94DC(a1, a2[1]);
    sub_1001D9524((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void sub_1001D9524(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void sub_1001D9568(uint64_t a1, char *a2)
{
  if (a2)
  {
    sub_1001D9568(a1, *(_QWORD *)a2);
    sub_1001D9568(a1, *((_QWORD *)a2 + 1));
    if (a2[63] < 0)
      operator delete(*((void **)a2 + 5));
    operator delete(a2);
  }
}

void sub_1001D95BC(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_1001D95E4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_1001D9624(uint64_t a1, const void **a2, _QWORD *a3)
{
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  void **v8;
  size_t v9;
  __int128 *v10;
  const void *v11;
  __int128 v13;
  uint64_t v14;

  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 8) = a1 + 16;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = *a3;
  v5 = a3[1];
  *(_QWORD *)(a1 + 40) = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 56) = a1 + 64;
  *(_BYTE *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 88;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  v8 = (void **)(a1 + 120);
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  if ((*((char *)a2 + 23) & 0x80000000) == 0)
  {
    if (*((_BYTE *)a2 + 23))
      goto LABEL_6;
LABEL_21:
    __assert_rtn("PRStateMachine", "PRStateMachine.h", 55, "!name.empty()");
  }
  if (!a2[1])
    goto LABEL_21;
LABEL_6:
  if (*((char *)a2 + 23) >= 0)
    v9 = *((unsigned __int8 *)a2 + 23);
  else
    v9 = (size_t)a2[1];
  sub_10013FDB8((uint64_t)&v13, v9 + 1);
  if (v14 >= 0)
    v10 = &v13;
  else
    v10 = (__int128 *)v13;
  if (v9)
  {
    if (*((char *)a2 + 23) >= 0)
      v11 = a2;
    else
      v11 = *a2;
    memmove(v10, v11, v9);
  }
  *(_WORD *)((char *)v10 + v9) = 44;
  if (*(char *)(a1 + 143) < 0)
    operator delete(*v8);
  *(_OWORD *)v8 = v13;
  *(_QWORD *)(a1 + 136) = v14;
  return a1;
}

void sub_1001D97A8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void **v6;

  if (*(char *)(v1 + 143) < 0)
    operator delete(*v6);

  sub_10003E3F0(v5, *(_QWORD **)(v1 + 88));
  sub_100184188(v4, *(_QWORD **)(v1 + 64));
  sub_10001AE68(v3);
  sub_10003E3F0(v2, *(_QWORD **)(v1 + 16));
  _Unwind_Resume(a1);
}

void sub_1001D9800()
{
  operator delete();
}

_QWORD *sub_1001D9814(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10080D1C0;
  result[1] = v3;
  return result;
}

uint64_t sub_1001D9848(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10080D1C0;
  a2[1] = v2;
  return result;
}

uint64_t sub_1001D9864(uint64_t a1, char *a2)
{
  uint64_t v2;
  uint64_t v3;
  char v5;

  v2 = *(_QWORD *)(a1 + 8);
  v5 = *a2;
  v3 = *(_QWORD *)(v2 + 208);
  if (!v3)
    sub_100027BC4();
  return (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)v3 + 48))(v3, &v5);
}

uint64_t sub_1001D98A4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1001D98E0()
{
}

void sub_1001D98F0()
{
  operator delete();
}

_QWORD *sub_1001D9904(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10080D240;
  result[1] = v3;
  return result;
}

uint64_t sub_1001D9938(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10080D240;
  a2[1] = v2;
  return result;
}

uint64_t sub_1001D9954(uint64_t a1, unsigned __int8 *a2)
{
  int v2;
  uint64_t v3;
  NSObject *v4;
  _BOOL4 v5;
  uint8_t v7[16];
  uint8_t buf[16];

  v2 = *a2;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = qword_100857F00;
  v5 = os_log_type_enabled((os_log_t)qword_100857F00, OS_LOG_TYPE_DEFAULT);
  if (v2)
  {
    if (v5)
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "regulatory,geof,startLocationRequest", buf, 2u);
    }
    return sub_1002A5900((NSObject **)(v3 + 632));
  }
  else
  {
    if (v5)
    {
      *(_WORD *)v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "regulatory,geof,stopLocationRequest", v7, 2u);
    }
    return sub_1002A599C((NSObject **)(v3 + 632));
  }
}

uint64_t sub_1001D9A08(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1001D9A44()
{
}

void sub_1001D9A54()
{
  operator delete();
}

_QWORD *sub_1001D9A68(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10080D2C0;
  result[1] = v3;
  return result;
}

uint64_t sub_1001D9A9C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10080D2C0;
  a2[1] = v2;
  return result;
}

void sub_1001D9AB8(uint64_t a1, int *a2, const std::string *a3, unsigned __int8 *a4)
{
  int v5;
  uint64_t v6;

  v5 = *a2;
  v6 = *(_QWORD *)(a1 + 8);
  sub_1001D71E0(v6, *a2, (uint64_t)a3, *a4);
  sub_100264548(v6 + 1040, v5, a3);
}

uint64_t sub_1001D9B00(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1001D9B3C()
{
}

void sub_1001D9B4C()
{
  operator delete();
}

_QWORD *sub_1001D9B60(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10080D350;
  result[1] = v3;
  return result;
}

uint64_t sub_1001D9B94(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10080D350;
  a2[1] = v2;
  return result;
}

uint64_t sub_1001D9BB0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1001D9BEC()
{
}

void sub_1001D9BFC()
{
  operator delete();
}

_QWORD *sub_1001D9C10(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10080D3E0;
  result[1] = v3;
  return result;
}

uint64_t sub_1001D9C44(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10080D3E0;
  a2[1] = v2;
  return result;
}

uint64_t sub_1001D9C60(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  v3 = *(_QWORD *)(a1 + 8);
  sub_1001D85F0(v3, *a2);
  return sub_1002644E0(v3 + 1040, v2);
}

uint64_t sub_1001D9C94(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1001D9CD0()
{
}

void sub_1001D9CE0()
{
  operator delete();
}

_QWORD *sub_1001D9CF4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10080D460;
  result[1] = v3;
  return result;
}

uint64_t sub_1001D9D28(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10080D460;
  a2[1] = v2;
  return result;
}

uint64_t sub_1001D9D44(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1001D9D80()
{
}

void sub_1001D9D90()
{
  operator delete();
}

_QWORD *sub_1001D9DA4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10080D4F0;
  result[1] = v3;
  return result;
}

uint64_t sub_1001D9DD8(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10080D4F0;
  a2[1] = v2;
  return result;
}

uint64_t sub_1001D9DF4(uint64_t a1, uint64_t a2)
{
  return sub_1001D7D64(*(int **)(a1 + 8), a2);
}

uint64_t sub_1001D9DFC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1001D9E38()
{
}

void sub_1001D9E48()
{
  operator delete();
}

_QWORD *sub_1001D9E5C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10080D580;
  result[1] = v3;
  return result;
}

uint64_t sub_1001D9E90(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10080D580;
  a2[1] = v2;
  return result;
}

void sub_1001D9EAC(uint64_t a1, const std::string *a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  if (os_log_type_enabled((os_log_t)qword_100857F00, OS_LOG_TYPE_DEBUG))
    sub_1003D9920();
  std::string::operator=((std::string *)(v3 + 440), a2);
  sub_1001D6668(v3);
  sub_100264548(v3 + 1040, 0, a2);
}

uint64_t sub_1001D9F24(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1001D9F60()
{
}

uint64_t sub_1001D9F6C(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + 56;
  sub_10018424C(*(_QWORD **)(a1 + 56), (_QWORD *)(a1 + 64), (uint64_t **)a1);
  if (*(char *)(a1 + 143) < 0)
    operator delete(*(void **)(a1 + 120));

  sub_10003E3F0(a1 + 80, *(_QWORD **)(a1 + 88));
  sub_100184188(v2, *(_QWORD **)(a1 + 64));
  sub_10001AE68(a1 + 32);
  sub_10003E3F0(a1 + 8, *(_QWORD **)(a1 + 16));
  return a1;
}

uint64_t sub_1001D9FE8(uint64_t a1)
{
  void *v2;

  sub_1001DA020(a1, *(void ***)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_1001DA020(int a1, void **__p)
{
  void **v2;
  void **v3;

  if (__p)
  {
    v2 = __p;
    do
    {
      v3 = (void **)*v2;
      if (*((char *)v2 + 55) < 0)
        operator delete(v2[4]);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

char *sub_1001DA064(uint64_t a1, int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  void **v10;
  char *v11;
  unint64_t v12;
  _QWORD *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = (char *)*v10;
      if (*v10)
      {
        do
        {
          v12 = *((_QWORD *)v11 + 1);
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == (_DWORD)v7)
              return v11;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4)
              break;
          }
          v11 = *(char **)v11;
        }
        while (v11);
      }
    }
  }
  v13 = (_QWORD *)(a1 + 16);
  v11 = (char *)operator new(0x40uLL);
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = v7;
  *((_DWORD *)v11 + 4) = **a4;
  *((_QWORD *)v11 + 7) = 0;
  *(_OWORD *)(v11 + 40) = 0u;
  *(_OWORD *)(v11 + 24) = 0u;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    v16 = 1;
    if (v8 >= 3)
      v16 = (v8 & (v8 - 1)) != 0;
    v17 = v16 | (2 * v8);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      v19 = v18;
    else
      v19 = v17;
    sub_10002A900(a1, v19);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v20 = *(_QWORD *)a1;
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v21)
  {
    *(_QWORD *)v11 = *v21;
LABEL_38:
    *v21 = v11;
    goto LABEL_39;
  }
  *(_QWORD *)v11 = *v13;
  *v13 = v11;
  *(_QWORD *)(v20 + 8 * v4) = v13;
  if (*(_QWORD *)v11)
  {
    v22 = *(_QWORD *)(*(_QWORD *)v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v22 >= v8)
        v22 %= v8;
    }
    else
    {
      v22 &= v8 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v11;
}

void sub_1001DA2A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void **v10;
  uint64_t v11;

  sub_1001DA2BC(v11, v10);
  _Unwind_Resume(a1);
}

void sub_1001DA2BC(uint64_t a1, void **__p)
{
  if (*(_BYTE *)(a1 + 8))
  {
    if (*((char *)__p + 55) < 0)
      operator delete(__p[4]);
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

char *sub_1001DA308(uint64_t a1, int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  void **v10;
  char *v11;
  unint64_t v12;
  _QWORD *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = (char *)*v10;
      if (*v10)
      {
        do
        {
          v12 = *((_QWORD *)v11 + 1);
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == (_DWORD)v7)
              return v11;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4)
              break;
          }
          v11 = *(char **)v11;
        }
        while (v11);
      }
    }
  }
  v13 = (_QWORD *)(a1 + 16);
  v11 = (char *)operator new(0x40uLL);
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = v7;
  *((_DWORD *)v11 + 4) = **a4;
  *((_QWORD *)v11 + 7) = 0;
  *(_OWORD *)(v11 + 40) = 0u;
  *(_OWORD *)(v11 + 24) = 0u;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    v16 = 1;
    if (v8 >= 3)
      v16 = (v8 & (v8 - 1)) != 0;
    v17 = v16 | (2 * v8);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      v19 = v18;
    else
      v19 = v17;
    sub_10002A900(a1, v19);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v20 = *(_QWORD *)a1;
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v21)
  {
    *(_QWORD *)v11 = *v21;
LABEL_38:
    *v21 = v11;
    goto LABEL_39;
  }
  *(_QWORD *)v11 = *v13;
  *v13 = v11;
  *(_QWORD *)(v20 + 8 * v4) = v13;
  if (*(_QWORD *)v11)
  {
    v22 = *(_QWORD *)(*(_QWORD *)v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v22 >= v8)
        v22 %= v8;
    }
    else
    {
      v22 &= v8 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v11;
}

void sub_1001DA544(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void **v10;
  uint64_t v11;

  sub_1001DA2BC(v11, v10);
  _Unwind_Resume(a1);
}

void sub_1001DA560(uint64_t a1, int a2, double a3)
{
  NSObject *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  uint64_t *v11;
  void *v12;
  NSObject *v13;
  dispatch_source_t v14;
  uint64_t **v15;
  dispatch_time_t v16;
  _QWORD v17[5];
  int v18;
  int v19;
  int *v20;

  v19 = a2;
  v3 = *(NSObject **)(a1 + 104);
  if (!v3)
    sub_1003D2D14();
  if (a3 >= 0.0)
  {
    v7 = a1 + 64;
    v6 = *(_QWORD *)(a1 + 64);
    if (!v6)
      goto LABEL_15;
    v8 = a1 + 64;
    do
    {
      v9 = *(_DWORD *)(v6 + 32);
      v10 = v9 < a2;
      if (v9 >= a2)
        v11 = (uint64_t *)v6;
      else
        v11 = (uint64_t *)(v6 + 8);
      if (!v10)
        v8 = v6;
      v6 = *v11;
    }
    while (*v11);
    if (v8 != v7 && *(_DWORD *)(v8 + 32) <= a2 && (v12 = *(void **)(v8 + 40)) != 0)
    {
      v13 = v12;
    }
    else
    {
LABEL_15:
      v14 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, v3);
      if (!v14)
        return;
      v13 = v14;
      v20 = &v19;
      v15 = sub_1001845A4((uint64_t **)(v7 - 8), &v19, (uint64_t)&unk_100472CF8, &v20);
      objc_storeStrong((id *)v15 + 5, v13);
      dispatch_source_set_timer(v13, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0x1DCD6500uLL);
      v17[0] = _NSConcreteStackBlock;
      v17[1] = 3221225472;
      v17[2] = sub_1001DA724;
      v17[3] = &unk_100807908;
      v17[4] = a1;
      v18 = v19;
      dispatch_source_set_event_handler(v13, v17);
      dispatch_resume(v13);
    }
    v16 = dispatch_time(0xFFFFFFFFFFFFFFFELL, (uint64_t)(a3 * 1000000000.0));
    dispatch_source_set_timer(v13, v16, 0xFFFFFFFFFFFFFFFFLL, 0x1DCD6500uLL);
    v20 = &v19;
    *((_BYTE *)sub_100184664((uint64_t **)(a1 + 80), &v19, (uint64_t)&unk_100472CF8, &v20) + 32) = 1;

  }
}

void sub_1001DA714(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t **sub_1001DA724(uint64_t a1)
{
  _DWORD *v1;
  uint64_t v2;
  uint64_t **result;
  _DWORD *v4;

  v1 = (_DWORD *)(a1 + 40);
  v2 = *(_QWORD *)(a1 + 32);
  sub_1000061C4(v2, *(unsigned int *)(a1 + 40));
  v4 = v1;
  result = sub_100184664((uint64_t **)(v2 + 80), v1, (uint64_t)&unk_100472CF8, &v4);
  *((_BYTE *)result + 32) = 0;
  return result;
}

uint64_t sub_1001DA77C(uint64_t result, uint64_t a2, uint64_t a3, float a4)
{
  *(float *)a2 = a4;
  *(_QWORD *)(a2 + 4) = result;
  *(_WORD *)(a2 + 12) = 2048;
  *(_QWORD *)(a2 + 14) = a3;
  return result;
}

void sub_1001DA794(void *a1@<X0>, const char *a2@<X3>, uint8_t *a3@<X4>, NSObject *a4@<X8>)
{
  _os_log_debug_impl(a1, a4, OS_LOG_TYPE_DEBUG, a2, a3, 0x16u);
}

void sub_1001DA7A4()
{
  void *v0;

  v0 = objc_autoreleasePoolPush();
  qword_100857F00 = (uint64_t)os_log_create("com.apple.nearbyd", "Regulatory");
  objc_autoreleasePoolPop(v0);
}

void sub_1001DA7E4(void *a1, void *a2)
{
  NSObject *v3;
  id v4;
  NSString *v5;
  void *v6;
  void *v7;
  void *v8;
  unsigned int v9;
  NSObject *v10;
  void *v11;
  void *v12;
  unsigned __int8 v13;
  NSObject *v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  unsigned int v17;
  NSObject *v18;
  dispatch_time_t v19;
  const char *v20;
  int v21;
  std::random_device::result_type v22;
  uint64_t i;
  _QWORD block[4];
  id v25;
  uint8_t buf[4];
  unsigned int v27;

  v3 = a1;
  v4 = a2;
  if (!v4)
  {
    v20 = "queryCallback";
    v21 = 29;
    goto LABEL_19;
  }
  if (!v3)
  {
    v20 = "dispatchQueue";
    v21 = 30;
LABEL_19:
    __assert_rtn("PRAlishaLEPMQueryCrashSummaryLog", "PRAlishaLPEMLogging.mm", v21, v20);
  }
  v5 = NSTemporaryDirectory();
  v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@/%s"), v6, "AlishaLEPMCrashQuery.tok"));

  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](NSFileManager, "defaultManager"));
  v9 = objc_msgSend(v8, "fileExistsAtPath:", v7);

  v10 = qword_10085F520;
  if (v9)
  {
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "PRAlishaLEPMQueryCrashSummaryLog token found", buf, 2u);
    }
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
      sub_1003D9A24(v10);
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](NSFileManager, "defaultManager"));
    v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSData data](NSData, "data"));
    v13 = objc_msgSend(v11, "createFileAtPath:contents:attributes:", v7, v12, 0);

    if ((v13 & 1) == 0)
    {
      v14 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
        sub_1003D99E4(v14);
    }
    v15 = atomic_load((unsigned __int8 *)&qword_100857F18);
    if ((v15 & 1) == 0 && __cxa_guard_acquire(&qword_100857F18))
    {
      dword_100857F10 = 1966090;
      __cxa_guard_release(&qword_100857F18);
    }
    v16 = atomic_load((unsigned __int8 *)&qword_1008588E8);
    if ((v16 & 1) == 0 && __cxa_guard_acquire(&qword_1008588E8))
    {
      sub_10014C9F4((std::random_device *)buf);
      v22 = std::random_device::operator()((std::random_device *)buf);
      dword_100857F20[0] = v22;
      for (i = 1; i != 624; ++i)
      {
        v22 = i + 1812433253 * (v22 ^ (v22 >> 30));
        dword_100857F20[i] = v22;
      }
      qword_1008588E0 = 0;
      std::random_device::~random_device((std::random_device *)buf);
      __cxa_guard_release(&qword_1008588E8);
    }
    v17 = sub_1001DB174((uint64_t)&dword_100857F10, (uint64_t)dword_100857F20, (unsigned __int16 *)&dword_100857F10);
    v18 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      v27 = v17;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "PRAlishaLEPMQueryCrashSummaryLog, Query AlishaLPEM Crash Summary in %d secs", buf, 8u);
    }
    v19 = dispatch_time(0, 1000000000 * v17);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1001DABE0;
    block[3] = &unk_10080AC38;
    v25 = v4;
    dispatch_after(v19, v3, block);

  }
}

void sub_1001DAB58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::random_device a17)
{
  void *v17;
  void *v18;
  void *v19;

  std::random_device::~random_device(&a17);
  __cxa_guard_abort(&qword_1008588E8);

  _Unwind_Resume(a1);
}

void sub_1001DABE0(uint64_t a1)
{
  void *v2;
  id v3;
  _QWORD v4[4];
  id v5;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NFHardwareManager sharedHardwareManager](NFHardwareManager, "sharedHardwareManager"));
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_1001DAC88;
  v4[3] = &unk_10080D608;
  v5 = *(id *)(a1 + 32);
  v3 = objc_msgSend(v2, "startSecureElementLoggingSession:", v4);

}

void sub_1001DAC70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1001DAC88(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  id v11;
  NSObject *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  char isKindOfClass;
  id v17;
  void *v18;
  id v19;
  NSObject *v20;
  id v21;
  void *v22;
  NSObject *v23;
  void *v24;
  _QWORD v25[4];
  id v26;
  id v27;
  id v28;
  uint8_t buf[4];
  id v30;

  v5 = a2;
  v6 = a3;
  if (v6)
  {
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
      sub_1003D9B84();
  }
  else
  {
    v28 = 0;
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NFSecureElement embeddedSecureElementWithError:](NFSecureElement, "embeddedSecureElementWithError:", &v28));
    v8 = v28;
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "serialNumber"));

    if (v8)
    {
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
        sub_1003D9B24();
      objc_msgSend(v5, "endSession");
    }
    else
    {
      v27 = 0;
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "getLogs:forSEID:error:", 5, v9, &v27));
      v11 = v27;
      v12 = qword_10085F520;
      if (v11)
      {
        if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
          sub_1003D9AC4();
      }
      else
      {
        if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412290;
          v30 = v10;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Alisha LPEM crash summary dictionary: %@", buf, 0xCu);
        }
        v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "valueForKey:", CFSTR("FTA Logging")));
        v15 = objc_opt_class(NSData, v14);
        isKindOfClass = objc_opt_isKindOfClass(v13, v15);

        if ((isKindOfClass & 1) != 0)
        {
          v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "valueForKey:", CFSTR("FTA Logging")));
          if ((unint64_t)objc_msgSend(v24, "length") >= 2)
          {
            v17 = objc_alloc((Class)NSString);
            v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "subdataWithRange:", 1, (char *)objc_msgSend(v24, "length") - 1));
            v19 = objc_msgSend(v17, "initWithData:encoding:", v18, 1);

            v20 = qword_10085F520;
            if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 138412290;
              v30 = v19;
              _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "Alisha LPEM crash summary string to submit: %@", buf, 0xCu);
            }
            v25[0] = _NSConcreteStackBlock;
            v25[1] = 3221225472;
            v25[2] = sub_1001DB104;
            v25[3] = &unk_1007FA568;
            v21 = v19;
            v26 = v21;
            AnalyticsSendEventLazy(CFSTR("com.apple.nearbyd.AlishaLPEM.FWCrash"), v25);
            v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "clearLogs:forSEID:", 5, v9));
            if (v22 && os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
              sub_1003D9A64();
            (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

          }
        }
        else
        {
          v23 = qword_10085F520;
          if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "Alisha LPEM log dictionary contains an incorrect value type", buf, 2u);
          }
        }
      }
      objc_msgSend(v5, "endSession");

    }
  }

}

void sub_1001DB064(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;

  _Unwind_Resume(a1);
}

id sub_1001DB104(uint64_t a1)
{
  uint64_t v1;
  const __CFString *v3;
  uint64_t v4;

  v1 = *(_QWORD *)(a1 + 32);
  v3 = CFSTR("CrashSummaryString");
  v4 = v1;
  return (id)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v4, &v3, 1));
}

uint64_t sub_1001DB174(uint64_t a1, uint64_t a2, unsigned __int16 *a3)
{
  uint64_t result;
  int v4;
  unsigned int v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  unsigned int v13;

  LODWORD(result) = a3[1];
  v4 = result - *a3;
  if (v4)
  {
    v6 = v4 + 1;
    if (v4 == -1)
    {
      LOWORD(result) = sub_10014CC9C(a2);
    }
    else
    {
      v8 = __clz(v6);
      v9 = 31;
      if (((v6 << v8) & 0x7FFFFFFF) != 0)
        v9 = 32;
      v10 = v9 - v8;
      v11 = v10 >> 5;
      if ((v10 & 0x1F) != 0)
        ++v11;
      if (v11 <= v10)
        v12 = 0xFFFFFFFF >> -(v10 / v11);
      else
        v12 = 0;
      do
        v13 = sub_10014CC9C(a2) & v12;
      while (v13 >= v6);
      LOWORD(result) = *a3 + v13;
    }
  }
  return (unsigned __int16)result;
}

_QWORD *sub_1001DB224@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, off_10080D628[a1]);
}

_QWORD *sub_1001DB238@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, off_10080D680[a1]);
}

_QWORD *sub_1001DB24C@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, off_10080D6C8[a1]);
}

_QWORD *sub_1001DB260@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, off_10080D6E8[a1]);
}

double sub_1001DB274(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 850045863;
  result = 0.0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_BYTE *)(a1 + 88) = 0;
  return result;
}

void sub_1001DB2A0(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void sub_1001DB2A8(uint64_t a1)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a1 + 80);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);

  std::mutex::~mutex((std::mutex *)a1);
}

uint64_t sub_1001DB2E0(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id v10;
  NSObject *v11;
  uint64_t v12;
  const char *v14;
  int v15;
  int v16;
  uint64_t v17;

  v7 = a3;
  v8 = a4;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  v9 = v8;
  *(_QWORD *)(a1 + 24) = v9;
  v10 = v7;
  *(_QWORD *)(a1 + 32) = v10;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  sub_100027674(a1 + 64, a2);
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 32));
  if (!*(_QWORD *)(a1 + 88))
  {
    v14 = "fTimeoutCallback";
    v15 = 25;
    goto LABEL_10;
  }
  if (!*(_QWORD *)(a1 + 32))
  {
    v14 = "fDispatchQueue";
    v15 = 26;
    goto LABEL_10;
  }
  if (!*(_QWORD *)(a1 + 24))
  {
    v14 = "fSessionIdentifier";
    v15 = 27;
LABEL_10:
    __assert_rtn("CarKeyTimeoutManager", "NIServerCarKeyTimeoutManager.mm", v15, v14);
  }
  v11 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    v12 = *(_QWORD *)(a1 + 24);
    v16 = 138412290;
    v17 = v12;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#alisha-tom,TimeoutManager is constructed for session identifier %@", (uint8_t *)&v16, 0xCu);
  }

  return a1;
}

void sub_1001DB44C(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t i;
  std::__shared_weak_count *v6;

  for (i = 56; i != 32; i -= 8)

  v6 = *(std::__shared_weak_count **)(v1 + 8);
  if (v6)
    std::__shared_weak_count::__release_weak(v6);

  _Unwind_Resume(a1);
}

uint64_t sub_1001DB4D8(uint64_t a1)
{
  unsigned __int8 v2;
  NSObject *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t i;
  std::__shared_weak_count *v8;
  int v10;
  uint64_t v11;

  v2 = atomic_load((unsigned __int8 *)(a1 + 16));
  v3 = qword_10085F520;
  if ((v2 & 1) == 0)
  {
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
      sub_1003D9BE4(a1, v3);
    __assert_rtn("~CarKeyTimeoutManager", "NIServerCarKeyTimeoutManager.mm", 34, "false");
  }
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(_QWORD *)(a1 + 24);
    v10 = 138412290;
    v11 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#alisha-tom,TimeoutManager is destructed for session identifier %@", (uint8_t *)&v10, 0xCu);
  }
  v5 = *(_QWORD **)(a1 + 88);
  if (v5 == (_QWORD *)(a1 + 64))
  {
    v6 = 4;
    v5 = (_QWORD *)(a1 + 64);
    goto LABEL_8;
  }
  if (v5)
  {
    v6 = 5;
LABEL_8:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  for (i = 56; i != 32; i -= 8)

  v8 = *(std::__shared_weak_count **)(a1 + 8);
  if (v8)
    std::__shared_weak_count::__release_weak(v8);
  return a1;
}

void sub_1001DB62C(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_1000131D8(a1);
  _Unwind_Resume(a1);
}

void sub_1001DB63C(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;

  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 32));
  sub_1001DB730(a1);
  v2 = *(_QWORD **)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v2 == (_QWORD *)(a1 + 64))
  {
    v3 = 4;
    v2 = (_QWORD *)(a1 + 64);
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  atomic_store(1u, (unsigned __int8 *)(a1 + 16));
  v4 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_QWORD *)(a1 + 24);
    v6 = 138412290;
    v7 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#alisha-tom,TimeoutManager is invalidated for session identifier %@", (uint8_t *)&v6, 0xCu);
  }
}

void sub_1001DB730(uint64_t a1)
{
  int i;

  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 32));
  for (i = 0; i != 3; ++i)
    sub_1001DBC40(a1, i);
}

void sub_1001DB770(uint64_t a1, int a2, int a3)
{
  NSObject *v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  NSObject *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;

  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 32));
  if (a3 == 1)
  {
    v8 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
    {
      v9 = *(_QWORD *)(a1 + 24);
      v20 = 138412290;
      v21 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#alisha-tom,Schedule timer for Session Requested monitoring. Session identifier %@", (uint8_t *)&v20, 0xCu);
    }
    sub_1001DBAF0(a1, 0, 5000000000, 0x989680uLL, 0);
  }
  else if (!a3)
  {
    v6 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
    {
      v7 = *(_QWORD *)(a1 + 24);
      v20 = 138412290;
      v21 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#alisha-tom,Cancel all timers (entering idle state). Session identifier %@", (uint8_t *)&v20, 0xCu);
    }
    sub_1001DB730(a1);
  }
  if (a2 == 1)
  {
    v10 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
    {
      v11 = *(_QWORD *)(a1 + 24);
      v20 = 138412290;
      v21 = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#alisha-tom,Cancel timer for Session Requested monitoring. Session identifier %@", (uint8_t *)&v20, 0xCu);
    }
    sub_1001DBC40(a1, 0);
  }
  if (a3 == 4)
  {
    v12 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
    {
      v13 = *(_QWORD *)(a1 + 24);
      v20 = 138412290;
      v21 = v13;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#alisha-tom,Schedule timer for awaiting suspend response monitoring. Session identifier %@", (uint8_t *)&v20, 0xCu);
    }
    sub_1001DBAF0(a1, 2, 5000000000, 0x989680uLL, 5);
  }
  if (a2 == 4)
  {
    v14 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
    {
      v15 = *(_QWORD *)(a1 + 24);
      v20 = 138412290;
      v21 = v15;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#alisha-tom,Cancel timer for awaiting suspend response monitoring. Session identifier %@", (uint8_t *)&v20, 0xCu);
    }
    sub_1001DBC40(a1, 2);
  }
  if (a3 == 2)
  {
    v16 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
    {
      v17 = *(_QWORD *)(a1 + 24);
      v20 = 138412290;
      v21 = v17;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "#alisha-tom,Schedule timer for suspension after ranging disallowed response. Session identifier %@", (uint8_t *)&v20, 0xCu);
    }
    sub_1001DBAF0(a1, 1, 1000000000, 0x989680uLL, 1);
  }
  if (a2 == 2)
  {
    v18 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
    {
      v19 = *(_QWORD *)(a1 + 24);
      v20 = 138412290;
      v21 = v19;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "#alisha-tom,Cancel timer for suspension after ranging disallowed response. Session identifier %@", (uint8_t *)&v20, 0xCu);
    }
    sub_1001DBC40(a1, 1);
  }
}

void sub_1001DBAF0(uint64_t a1, int a2, int64_t a3, uint64_t a4, int a5)
{
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  dispatch_source_t v14;
  void *v15;
  NSObject *v16;
  dispatch_time_t v17;
  NSObject *v18;
  unint64_t *v19;
  unint64_t v20;
  _QWORD v21[6];
  std::__shared_weak_count *v22;
  int v23;

  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 32));
  sub_1001DBC40(a1, a2);
  v11 = *(_QWORD *)a1;
  v10 = *(std::__shared_weak_count **)(a1 + 8);
  if (v10)
  {
    p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
  }
  v14 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, *(dispatch_queue_t *)(a1 + 32));
  v15 = *(void **)(a1 + 40 + 8 * a2);
  *(_QWORD *)(a1 + 40 + 8 * a2) = v14;

  v16 = *(NSObject **)(a1 + 40 + 8 * a2);
  v17 = dispatch_time(0, a3);
  dispatch_source_set_timer(v16, v17, 0xFFFFFFFFFFFFFFFFLL, a4);
  v18 = *(NSObject **)(a1 + 40 + 8 * a2);
  v21[0] = _NSConcreteStackBlock;
  v21[1] = 3321888768;
  v21[2] = sub_1001DBC90;
  v21[3] = &unk_10080D708;
  v21[4] = a1;
  v21[5] = v11;
  v22 = v10;
  if (v10)
  {
    v19 = (unint64_t *)&v10->__shared_weak_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  v23 = a5;
  dispatch_source_set_event_handler(v18, v21);
  dispatch_resume(*(dispatch_object_t *)(a1 + 40 + 8 * a2));
  if (v22)
    std::__shared_weak_count::__release_weak(v22);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
}

void sub_1001DBC40(uint64_t a1, int a2)
{
  uint64_t v4;
  NSObject *v5;
  void *v6;

  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 32));
  v4 = a1 + 40;
  v5 = *(NSObject **)(v4 + 8 * a2);
  if (v5)
  {
    dispatch_source_cancel(v5);
    v6 = *(void **)(v4 + 8 * a2);
    *(_QWORD *)(v4 + 8 * a2) = 0;

  }
}

void sub_1001DBC90(uint64_t a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  double v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 32);
    v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = v4;
      if (*(_QWORD *)(a1 + 40))
      {
        v6 = sub_10000883C();
        if (*(_QWORD *)(v3 + 88))
          sub_1001DBD50(v3 + 64, *(_DWORD *)(a1 + 56), v6);
      }
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_1001DBD3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10001AE68((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1001DBD50(uint64_t a1, int a2, double a3)
{
  uint64_t v3;
  double v5;
  int v6;

  v6 = a2;
  v5 = a3;
  v3 = *(_QWORD *)(a1 + 24);
  if (!v3)
    sub_100027BC4();
  return (*(uint64_t (**)(uint64_t, int *, double *))(*(_QWORD *)v3 + 48))(v3, &v6, &v5);
}

uint64_t sub_1001DBD90(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void sub_1001DBDB4(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

_QWORD *sub_1001DBDC4@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, off_10080DF78[a1]);
}

_QWORD *sub_1001DBDD8@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, off_10080DFD0[a1]);
}

_QWORD *sub_1001DBDEC@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, off_10080E018[a1]);
}

_QWORD *sub_1001DBE00@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, off_10080E038[a1]);
}

void sub_1001DBE54(id a1)
{
  id v1;
  void *v2;

  v1 = -[NIServerHomeDeviceService _initInternal]([NIServerHomeDeviceService alloc], "_initInternal");
  v2 = (void *)qword_100858CB8;
  qword_100858CB8 = (uint64_t)v1;

}

void sub_1001DBFD8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

char *sub_1001DBFF8(uint64_t a1)
{
  void *v1;
  char *v2;

  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_internalPrintableState"));
  v2 = sub_10002D668(CFSTR("Home Device Service"), v1);

  return v2;
}

void sub_1001DC03C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id sub_1001DC120(uint64_t a1)
{
  void *v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  int v11;
  uint64_t v12;
  __int16 v13;
  _QWORD v14[3];

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "objectForKey:", *(_QWORD *)(a1 + 40)));

  v3 = qword_10085F520;
  if (v2)
  {
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
    {
      v4 = *(_QWORD *)(a1 + 40);
      v5 = *(_QWORD *)(a1 + 48);
      v11 = 138478083;
      v12 = v4;
      v13 = 2113;
      v14[0] = v5;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#ses-home,Service updated client configuration for %{private}@. Configuration: %{private}@", (uint8_t *)&v11, 0x16u);
    }
  }
  else
  {
    v6 = (id)qword_10085F520;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      v7 = *(_QWORD *)(a1 + 40);
      v8 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "count");
      v9 = *(_QWORD *)(a1 + 48);
      v11 = 138478339;
      v12 = v7;
      v13 = 1024;
      LODWORD(v14[0]) = v8;
      WORD2(v14[0]) = 2112;
      *(_QWORD *)((char *)v14 + 6) = v9;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#ses-home,Service added client %{private}@ (%d previous clients). Configuration: %@", (uint8_t *)&v11, 0x1Cu);
    }

  }
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "setObject:forKey:", *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 40));
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "setObject:forKey:", *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 40));
  return objc_msgSend(*(id *)(a1 + 32), "_processCommonConfiguration");
}

void sub_1001DC2A4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1001DC338(uint64_t a1)
{
  void *v2;
  NSObject *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;

  if (*(_QWORD *)(a1 + 32))
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 24), "objectForKey:"));

    if (v2)
    {
      v3 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
      {
        v4 = *(_QWORD *)(a1 + 32);
        v5 = 138477827;
        v6 = v4;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#ses-home,Service removed client %{private}@", (uint8_t *)&v5, 0xCu);
      }
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 16), "removeObjectForKey:", *(_QWORD *)(a1 + 32));
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 24), "removeObjectForKey:", *(_QWORD *)(a1 + 32));
      objc_msgSend(*(id *)(a1 + 40), "_processCommonConfiguration");
    }
  }
}

uint64_t sub_1001DC4D4(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1001DC4E4(uint64_t a1)
{

}

void sub_1001DC4EC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_internalPrintableState"));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_1001DC5B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1001DC6D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1001DC700(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;

  v4 = a3;
  if (objc_msgSend(v4, "minimumPreferredUpdatedRate") != (id)2
    && +[NIUtils nearbyObjectUpdateRate:isGreaterThan:](NIUtils, "nearbyObjectUpdateRate:isGreaterThan:", objc_msgSend(v4, "minimumPreferredUpdatedRate"), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24)))
  {
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_msgSend(v4, "minimumPreferredUpdatedRate");
  }

}

void sub_1001DC77C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1001DCBD0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1001DD3E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1001DDC10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  void *v33;
  void *v34;
  void *v35;

  _Unwind_Resume(a1);
}

void sub_1001DDD70(id a1, NSError *a2)
{
  NSError *v2;

  v2 = a2;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
    sub_1003D9CB0();

}

void sub_1001DDDC0(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "remote"));
  objc_msgSend(v2, "didUpdateHomeDeviceUWBRangingAvailability:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + 97));

}

void sub_1001DDE0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1001DDE20(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  void *v8;
  double v9;
  double v10;
  double v11;
  double v12;
  float64x2_t v13;
  float v14;
  float64_t v15;
  float64_t v16;
  float64x2_t v17;

  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v8 = WeakRetained;
  if (v5 && !v6 && WeakRetained)
  {
    objc_msgSend(v5, "magneticField");
    v16 = v9;
    objc_msgSend(v5, "magneticField");
    v15 = v10;
    objc_msgSend(v5, "magneticField");
    v12 = v11;
    objc_msgSend(v5, "timestamp");
    v13.f64[0] = v16;
    v13.f64[1] = v15;
    *(float32x2_t *)&v13.f64[0] = vcvt_f32_f64(v13);
    v14 = v12;
    *(float *)&v13.f64[1] = v14;
    v17 = v13;
    objc_msgSend(v8, "didReceiveMagnetometerData:at:", &v17);
  }

}

void sub_1001DDEDC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1001DDFE8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1001DE324(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1001DE650(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1001DE7E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v6 = v4;

  _Unwind_Resume(a1);
}

void sub_1001DEA2C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v3;

  _Unwind_Resume(a1);
}

void sub_1001DECF4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1001DEDE8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1001DF00C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  void *v23;

  if (a22 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1001DF0E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;

  a9.super_class = (Class)NIServerHomeDeviceSession;
  -[_Unwind_Exception dealloc](&a9, "dealloc");
  _Unwind_Resume(a1);
}

void sub_1001E0098(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::locale a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,void *__p,uint64_t a30,uint64_t a31,uint64_t a32)
{
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;

  sub_10001AE68((uint64_t)&a27);
  _Unwind_Resume(a1);
}

uint64_t sub_1001E035C(void *a1)
{
  id v1;
  void *v2;
  id v3;
  int v4;
  NSObject *v5;
  NSObject *v6;
  id v7;
  int v8;
  NSObject *v9;
  uint64_t v10;
  id v11;
  int v12;
  NSObject *v13;
  int v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  id v19;
  id v20;
  id v21;
  uint64_t v22;
  uint8_t buf[4];
  id v24;
  __int16 v25;
  int v26;
  __int16 v27;
  int v28;

  v1 = a1;
  v2 = v1;
  if (!v1)
    goto LABEL_52;
  if (objc_msgSend(v1, "hasPrefix:", CFSTR("AudioAccessory")))
  {
    v22 = 0;
    v3 = objc_retainAutorelease(v2);
    v4 = sscanf((const char *)objc_msgSend(v3, "UTF8String"), "AudioAccessory%d,%d", (char *)&v22 + 4, &v22);
    v5 = (id)qword_10085F520;
    v6 = v5;
    if (v4 <= 1)
    {
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
        sub_1003DA050((uint64_t)objc_msgSend(objc_retainAutorelease(v3), "UTF8String"), (uint64_t)buf);
LABEL_23:

      goto LABEL_52;
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
    {
      v19 = objc_msgSend(objc_retainAutorelease(v3), "UTF8String");
      *(_DWORD *)buf = 136315650;
      v24 = v19;
      v25 = 1024;
      v26 = HIDWORD(v22);
      v27 = 1024;
      v28 = v22;
      _os_log_debug_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#ses-home,#allow-list model %s decoded as audio accessory %d, %d", buf, 0x18u);
    }

    v10 = 999;
    if (HIDWORD(v22) == 6)
    {
      if ((_DWORD)v22 == 1)
        v10 = 201;
      else
        v10 = 999;
    }
    else if (HIDWORD(v22) == 5)
    {
      if ((_DWORD)v22 == 1)
        v10 = 200;
      else
        v10 = 999;
    }
  }
  else
  {
    if (objc_msgSend(v2, "hasPrefix:", CFSTR("iPhone")))
    {
      v22 = 0;
      v7 = objc_retainAutorelease(v2);
      v8 = sscanf((const char *)objc_msgSend(v7, "UTF8String"), "iPhone%d,%d", (char *)&v22 + 4, &v22);
      v9 = (id)qword_10085F520;
      v6 = v9;
      if (v8 > 1)
      {
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
        {
          v20 = objc_msgSend(objc_retainAutorelease(v7), "UTF8String");
          *(_DWORD *)buf = 136315650;
          v24 = v20;
          v25 = 1024;
          v26 = HIDWORD(v22);
          v27 = 1024;
          v28 = v22;
          _os_log_debug_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#ses-home,#allow-list model %s decoded as iphone %d, %d", buf, 0x18u);
        }

        switch(HIDWORD(v22))
        {
          case 0xC:
            v14 = v22 - 1;
            if ((v22 - 1) >= 5)
              goto LABEL_52;
            v15 = (unsigned int *)&unk_1004721E4;
            goto LABEL_51;
          case 0xD:
            v16 = v22 - 1;
            v17 = v22 + 2;
            goto LABEL_44;
          case 0xE:
            v14 = v22 - 2;
            if ((v22 - 2) >= 7)
              goto LABEL_52;
            v15 = (unsigned int *)&unk_1004721F8;
            goto LABEL_51;
          case 0xF:
            v16 = v22 - 2;
            v17 = v22 + 11;
LABEL_44:
            if (v16 >= 4)
              v10 = 999;
            else
              v10 = v17;
            goto LABEL_53;
          case 0x10:
            v14 = v22 - 1;
            if ((v22 - 1) >= 3)
              goto LABEL_52;
            v15 = (unsigned int *)&unk_100472214;
            goto LABEL_51;
          case 0x11:
            v14 = v22 - 1;
            if ((v22 - 1) >= 4)
              goto LABEL_52;
            v15 = (unsigned int *)&unk_1004722B0;
            goto LABEL_51;
          default:
            goto LABEL_52;
        }
      }
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
        sub_1003DA088((uint64_t)objc_msgSend(objc_retainAutorelease(v7), "UTF8String"), (uint64_t)buf);
      goto LABEL_23;
    }
    if (!objc_msgSend(v2, "hasPrefix:", CFSTR("Watch")))
    {
LABEL_52:
      v10 = 999;
      goto LABEL_53;
    }
    v22 = 0;
    v11 = objc_retainAutorelease(v2);
    v12 = sscanf((const char *)objc_msgSend(v11, "UTF8String"), "Watch%d,%d", (char *)&v22 + 4, &v22);
    v13 = (id)qword_10085F520;
    v6 = v13;
    if (v12 <= 1)
    {
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
        sub_1003DA0C0((uint64_t)objc_msgSend(objc_retainAutorelease(v11), "UTF8String"), (uint64_t)buf);
      goto LABEL_23;
    }
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    {
      v21 = objc_msgSend(objc_retainAutorelease(v11), "UTF8String");
      *(_DWORD *)buf = 136315650;
      v24 = v21;
      v25 = 1024;
      v26 = HIDWORD(v22);
      v27 = 1024;
      v28 = v22;
      _os_log_debug_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#ses-home,#allow-list model %s decoded as watch %d, %d", buf, 0x18u);
    }

    if (HIDWORD(v22) == 7)
    {
      v14 = v22 - 1;
      if ((v22 - 1) >= 0xB)
        goto LABEL_52;
      v15 = (unsigned int *)&unk_100472268;
    }
    else
    {
      if (HIDWORD(v22) != 6)
        goto LABEL_52;
      v14 = v22 - 1;
      if ((v22 - 1) >= 0x12)
        goto LABEL_52;
      v15 = (unsigned int *)&unk_100472220;
    }
LABEL_51:
    v10 = v15[v14];
  }
LABEL_53:

  return v10;
}

void sub_1001E0808(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t sub_1001E0874(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  _BYTE v4[24];

  v2 = *a2;
  sub_10002A5A0(a1, a2, (uint64_t)v4);
  sub_1001E86F4((uint64_t)v4, 0);
  return v2;
}

void sub_1001E0900(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1001E1460(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, void *a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,uint64_t a27,uint64_t a28)
{
  void *v28;

  sub_10001AE68((uint64_t)&a21);

  _Unwind_Resume(a1);
}

void sub_1001E17F8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1001E1A80(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1001E1C70(void **a1, _OWORD *a2, double a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _OWORD *v9;
  _OWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  __int128 v20;
  unint64_t v21;
  double *v22;
  double *v23;
  double *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  double *v30;
  char *v31;
  uint64_t v32;

  v8 = (unint64_t)a1[2];
  v6 = (uint64_t)(a1 + 2);
  v7 = v8;
  v9 = *(_OWORD **)(v6 - 8);
  if ((unint64_t)v9 >= v8)
  {
    v11 = ((char *)v9 - (_BYTE *)*a1) >> 4;
    if ((unint64_t)(v11 + 1) >> 60)
      sub_100026E7C();
    v12 = v7 - (_QWORD)*a1;
    v13 = v12 >> 3;
    if (v12 >> 3 <= (unint64_t)(v11 + 1))
      v13 = v11 + 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0)
      v14 = 0xFFFFFFFFFFFFFFFLL;
    else
      v14 = v13;
    if (v14)
      v15 = (char *)sub_10013A59C(v6, v14);
    else
      v15 = 0;
    v16 = &v15[16 * v11];
    v17 = &v15[16 * v14];
    *(_OWORD *)v16 = *a2;
    v10 = v16 + 16;
    v19 = (char *)*a1;
    v18 = (char *)a1[1];
    if (v18 != *a1)
    {
      do
      {
        v20 = *((_OWORD *)v18 - 1);
        v18 -= 16;
        *((_OWORD *)v16 - 1) = v20;
        v16 -= 16;
      }
      while (v18 != v19);
      v18 = (char *)*a1;
    }
    *a1 = v16;
    a1[1] = v10;
    a1[2] = v17;
    if (v18)
      operator delete(v18);
  }
  else
  {
    *v9 = *a2;
    v10 = v9 + 1;
  }
  v21 = (unint64_t)a1[5];
  a1[1] = v10;
  v22 = (double *)a1[4];
  if ((unint64_t)v22 >= v21)
  {
    v24 = (double *)a1[3];
    v25 = v22 - v24;
    if ((unint64_t)(v25 + 1) >> 61)
      sub_100026E7C();
    v26 = v21 - (_QWORD)v24;
    v27 = (uint64_t)(v21 - (_QWORD)v24) >> 2;
    if (v27 <= v25 + 1)
      v27 = v25 + 1;
    if (v26 >= 0x7FFFFFFFFFFFFFF8)
      v28 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v28 = v27;
    if (v28)
    {
      v29 = (char *)sub_10005538C((uint64_t)(a1 + 5), v28);
      v24 = (double *)a1[3];
      v22 = (double *)a1[4];
    }
    else
    {
      v29 = 0;
    }
    v30 = (double *)&v29[8 * v25];
    v31 = &v29[8 * v28];
    *v30 = a3;
    v23 = v30 + 1;
    while (v22 != v24)
    {
      v32 = *((_QWORD *)v22-- - 1);
      *((_QWORD *)v30-- - 1) = v32;
    }
    a1[3] = v30;
    a1[4] = v23;
    a1[5] = v31;
    if (v24)
      operator delete(v24);
  }
  else
  {
    *v22 = a3;
    v23 = v22 + 1;
  }
  a1[4] = v23;
  sub_1001E7E38(a1);
  if (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 4 != ((_BYTE *)a1[4] - (_BYTE *)a1[3]) >> 3)
    sub_1003DA344();
}

void sub_1001E22D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1001E2370(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1001E25D8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1001E2A1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29)
{
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1001E2DD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  void *v21;
  void *v22;

  _Unwind_Resume(a1);
}

void sub_1001E3204(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v2;

  _Unwind_Resume(a1);
}

void sub_1001E3984(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  void *v4;
  va_list va;

  va_start(va, a3);

  sub_10001AE68((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1001E3D2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, std::__shared_weak_count *a20,char a21,uint64_t a22,uint64_t a23,char *a24,char a25,uint64_t a26,uint64_t a27,char *a28)
{
  void *v28;
  void *v29;
  std::__shared_weak_count *v30;
  uint64_t v31;
  unint64_t *p_shared_owners;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  void *v41;

  if (a18)
    sub_1003DA7D0(a18);
  if (a20)
  {
    p_shared_owners = (unint64_t *)&a20->__shared_owners_;
    do
      v34 = __ldaxr(p_shared_owners);
    while (__stlxr(v34 - 1, p_shared_owners));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))a20->__on_zero_shared)(a20);
      std::__shared_weak_count::__release_weak(a20);
    }
  }
  v35 = a24;
  if (a24 == &a21)
  {
    v36 = 4;
    v35 = &a21;
  }
  else
  {
    if (!a24)
      goto LABEL_13;
    v36 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v35 + 8 * v36))();
LABEL_13:
  v37 = a28;
  if (a28 == &a25)
  {
    v38 = 4;
    v37 = &a25;
  }
  else
  {
    if (!a28)
      goto LABEL_18;
    v38 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v37 + 8 * v38))();
LABEL_18:
  v39 = *(_QWORD **)(v31 - 96);
  if (v39 == (_QWORD *)(v31 - 120))
  {
    v40 = 4;
    v39 = (_QWORD *)(v31 - 120);
  }
  else
  {
    if (!v39)
      goto LABEL_23;
    v40 = 5;
  }
  (*(void (**)(void))(*v39 + 8 * v40))();
LABEL_23:
  std::__shared_weak_count::~__shared_weak_count(v30);
  operator delete(v41);
  if (a14 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1001E436C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43)
{
  void *v43;
  void *v44;

  sub_10001AE68((uint64_t)&a14);
  if (a21 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1001E4684(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1001E49D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1001E4B90(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1001E4D1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1001E50C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1001E5248(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1001E54D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1001E56BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1001E5B8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  void *v3;
  va_list va;

  va_start(va, a2);
  sub_10001AE68((uint64_t)va);

  _Unwind_Resume(a1);
}

void sub_1001E5EB4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1001E600C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1001E6254(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t sub_1001E6540(_QWORD *a1)
{
  uint64_t result;

  result = (uint64_t)(a1[4] - a1[3]) >> 3;
  if (result != (uint64_t)(a1[1] - *a1) >> 4)
    sub_1003DAAD8();
  return result;
}

void sub_1001E66D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1001E67A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1001E6948(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1001E6BD8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1001E6C28(uint64_t a1)
{
  id v2;
  void *v3;
  void *v4;
  objc_super v5;

  if (*(_BYTE *)(*(_QWORD *)(a1 + 32) + 72) || *(_BYTE *)(a1 + 48))
  {
    v5.receiver = *(id *)(a1 + 32);
    v5.super_class = (Class)NIServerHomeDeviceSession;
    v2 = objc_msgSendSuper2(&v5, "resourcesManager");
    v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "remote"));
    objc_msgSend(v4, "didUpdateNearbyObjects:", *(_QWORD *)(a1 + 40));

  }
}

void sub_1001E6CB0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1001E6E0C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1001E6E28(uint64_t a1)
{
  double v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  unsigned __int8 v6;
  uint64_t v7;
  id v8;
  void *v9;
  void *v10;
  NSObject *v11;
  NSObject *v12;
  void *v13;
  void *v14;
  id v15;
  id v16;
  id v17;
  objc_super v18;
  uint8_t buf[8];
  id v20;
  id v21;
  id v22;

  v2 = sub_10000883C();
  v3 = *(_QWORD *)(a1 + 32);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "discoveryToken"));
  sub_1002115CC(v3 + 240, (unint64_t)objc_msgSend(v4, "hash"), *(void **)(a1 + 48), v2);

  v5 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(v5 + 72))
  {
    v6 = objc_msgSend(*(id *)(v5 + 672), "isAnchor");
    v7 = *(_QWORD *)(a1 + 32);
    if ((v6 & 1) != 0 || *(_QWORD *)(v7 + 552) == 2)
    {
      sub_100186C64(v7 + 560);
      v18.receiver = *(id *)(a1 + 32);
      v18.super_class = (Class)NIServerHomeDeviceSession;
      v8 = objc_msgSendSuper2(&v18, "resourcesManager");
      v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "remote"));
      objc_msgSend(v10, "object:didUpdateRegion:previousRegion:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));

    }
    else
    {
      v12 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#ses-home,#region, region transition rejected because motion state is not moving, the region update event is cached", buf, 2u);
      }
      v13 = *(void **)(a1 + 48);
      v14 = *(void **)(a1 + 56);
      v15 = *(id *)(a1 + 40);
      v16 = v13;
      v17 = v14;
      *(double *)buf = v2;
      v20 = v15;
      v21 = v16;
      v22 = v17;
      sub_1001E7048(*(_QWORD *)(a1 + 32) + 560, buf);

    }
  }
  else
  {
    v11 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#ses-home,#regions, didUpdateRegion:previousRegion. Should deliver is False.", buf, 2u);
    }
  }
}

void sub_1001E7018(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1001E70DC((id *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1001E7048(uint64_t a1, _QWORD *a2)
{
  int v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  __int128 v11;
  uint64_t v12;

  v4 = *(unsigned __int8 *)(a1 + 32);
  *(_QWORD *)a1 = *a2;
  if (v4)
  {
    v5 = a2[1];
    a2[1] = 0;
    v6 = *(void **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v5;

    v7 = a2[2];
    a2[2] = 0;
    v8 = *(void **)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v7;

    v9 = a2[3];
    a2[3] = 0;
    v10 = *(void **)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v9;

  }
  else
  {
    v11 = *(_OWORD *)(a2 + 1);
    a2[1] = 0;
    a2[2] = 0;
    *(_OWORD *)(a1 + 8) = v11;
    v12 = a2[3];
    a2[3] = 0;
    *(_QWORD *)(a1 + 24) = v12;
    *(_BYTE *)(a1 + 32) = 1;
  }
  return a1;
}

id *sub_1001E70DC(id *a1)
{

  return a1;
}

void sub_1001E7298(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1001E731C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  _BOOL4 v5;
  const char *v6;
  const char *v7;
  const char *v8;
  int v9;
  const char *v10;
  __int16 v11;
  const char *v12;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 208);
  v4 = (id)qword_10085F520;
  v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
  if (v3 == v2)
  {
    if (v5)
    {
      v6 = +[NIUtils NINearbyObjectUpdateRateToString:](NIUtils, "NINearbyObjectUpdateRateToString:", *(_QWORD *)(a1 + 40));
      v9 = 136315138;
      v10 = v6;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#ses-home,didUpdateMinimumPreferredUpdateRate. %s (no change)", (uint8_t *)&v9, 0xCu);
    }

  }
  else
  {
    if (v5)
    {
      v7 = +[NIUtils NINearbyObjectUpdateRateToString:](NIUtils, "NINearbyObjectUpdateRateToString:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 208));
      v8 = +[NIUtils NINearbyObjectUpdateRateToString:](NIUtils, "NINearbyObjectUpdateRateToString:", *(_QWORD *)(a1 + 40));
      v9 = 136315394;
      v10 = v7;
      v11 = 2080;
      v12 = v8;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#ses-home,didUpdateMinimumPreferredUpdateRate. %s -> %s", (uint8_t *)&v9, 0x16u);
    }

    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 208) = *(_QWORD *)(a1 + 40);
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 64), "probeRegions");
  }
}

void sub_1001E7488(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1001E79A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  void *v10;
  void *v11;
  void *v12;

  sub_10001AE68((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1001E7A9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

__n128 *sub_1001E7D98(__n128 *a1, uint64_t a2)
{
  a1->n128_u8[0] = 0;
  a1[3].n128_u8[0] = 0;
  sub_1001E7DD8(a1, a2);
  return a1;
}

void sub_1001E7DC4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10002ED70(v1);
  _Unwind_Resume(a1);
}

__n128 sub_1001E7DD8(__n128 *a1, uint64_t a2)
{
  unint64_t v4;
  __n128 result;

  if (*(_BYTE *)(a2 + 48))
  {
    v4 = *(_QWORD *)a2;
    a1->n128_u32[2] = *(_DWORD *)(a2 + 8);
    a1->n128_u64[0] = v4;
    a1[1].n128_u64[0] = (unint64_t)*(id *)(a2 + 16);
    a1[1].n128_u64[1] = (unint64_t)*(id *)(a2 + 24);
    result = *(__n128 *)(a2 + 32);
    a1[2] = result;
    a1[3].n128_u8[0] = 1;
  }
  return result;
}

void sub_1001E7E38(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  char *v4;
  unint64_t v5;
  double v6;
  double v7;
  char *v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  int v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *__p;
  char *v26;
  char *v27;

  v2 = a1[3];
  v1 = a1[4];
  if (v1 != v2)
  {
    v4 = 0;
    v5 = 0;
    v6 = *(double *)(v1 - 8);
    __p = 0;
    v26 = 0;
    v27 = 0;
    v7 = v6 + -0.01;
    do
    {
      if (*(double *)(v2 + 8 * v5) < v7)
      {
        if (v4 >= v27)
        {
          v9 = __p;
          v10 = (v4 - __p) >> 2;
          v11 = v10 + 1;
          if ((unint64_t)(v10 + 1) >> 62)
            sub_100026E7C();
          v12 = v27 - __p;
          if ((v27 - __p) >> 1 > v11)
            v11 = v12 >> 1;
          if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL)
            v13 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v13 = v11;
          if (v13)
          {
            v14 = (char *)sub_10003B05C((uint64_t)&v27, v13);
            v9 = __p;
            v4 = v26;
          }
          else
          {
            v14 = 0;
          }
          v15 = &v14[4 * v10];
          *(_DWORD *)v15 = v5;
          v8 = v15 + 4;
          while (v4 != v9)
          {
            v16 = *((_DWORD *)v4 - 1);
            v4 -= 4;
            *((_DWORD *)v15 - 1) = v16;
            v15 -= 4;
          }
          __p = v15;
          v27 = &v14[4 * v13];
          if (v9)
            operator delete(v9);
        }
        else
        {
          *(_DWORD *)v4 = v5;
          v8 = v4 + 4;
        }
        v26 = v8;
        v4 = v8;
        v2 = a1[3];
        v1 = a1[4];
      }
      ++v5;
    }
    while (v5 < (v1 - v2) >> 3);
    v17 = __p;
    if (v4 == __p)
    {
      if (!__p)
        return;
    }
    else
    {
      v17 = v4;
      do
      {
        v19 = *((int *)v17 - 1);
        v17 -= 4;
        v18 = v19;
        v20 = a1[1];
        v21 = *a1 + 16 * v19;
        v22 = v20 - (v21 + 16);
        if (v20 != v21 + 16)
        {
          memmove((void *)v21, (const void *)(v21 + 16), v20 - (v21 + 16));
          v18 = *((int *)v4 - 1);
          v1 = a1[4];
        }
        a1[1] = v21 + v22;
        v23 = a1[3] + 8 * v18;
        v24 = v1 - (v23 + 8);
        if (v1 != v23 + 8)
          memmove((void *)(a1[3] + 8 * v18), (const void *)(v23 + 8), v1 - (v23 + 8));
        v1 = v23 + v24;
        a1[4] = v23 + v24;
        v4 = v17;
      }
      while (v17 != __p);
    }
    operator delete(v17);
  }
}

void sub_1001E8014(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1001E8034(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_1001E8034(a1, *a2);
    sub_1001E8034(a1, a2[1]);
    sub_1001E807C((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void sub_1001E807C(uint64_t a1)
{
  sub_10017ECCC(a1 + 152, *(char **)(a1 + 160));
  sub_10003E3F0(a1 + 128, *(_QWORD **)(a1 + 136));
  sub_10003E3F0(a1 + 104, *(_QWORD **)(a1 + 112));
}

uint64_t sub_1001E80B8(uint64_t a1)
{

  return a1;
}

void sub_1001E80E0(uint64_t a1)
{

  operator delete();
}

_QWORD *sub_1001E8118(uint64_t a1)
{
  _QWORD *v2;

  v2 = operator new(0x10uLL);
  *v2 = off_10080D7D8;
  v2[1] = *(id *)(a1 + 8);
  return v2;
}

id sub_1001E815C(uint64_t a1, _QWORD *a2)
{
  id result;

  *a2 = off_10080D7D8;
  result = *(id *)(a1 + 8);
  a2[1] = result;
  return result;
}

void sub_1001E8190(uint64_t a1)
{

}

void sub_1001E8198(id *a1)
{

  operator delete(a1);
}

id sub_1001E81C0(uint64_t a1, unsigned __int8 *a2)
{
  int v3;
  NSObject *v4;
  const char *v5;
  int v7;
  const char *v8;

  v3 = *a2;
  v4 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    v5 = "unavailable";
    if (v3)
      v5 = "available";
    v7 = 136315138;
    v8 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#ses-home,current wifi availability: %s", (uint8_t *)&v7, 0xCu);
  }
  return objc_msgSend(*(id *)(a1 + 8), "_handleWifiRangingAvailableUpdate:", v3 != 0);
}

uint64_t sub_1001E8294(uint64_t a1, uint64_t a2)
{
  if (sub_10003E27C(a2, (uint64_t)&off_10080D838))
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_1001E82D0()
{
  return &off_10080D838;
}

uint64_t sub_1001E82DC(uint64_t a1)
{

  return a1;
}

void sub_1001E8304(uint64_t a1)
{

  operator delete();
}

_QWORD *sub_1001E833C(uint64_t a1)
{
  _QWORD *v2;

  v2 = operator new(0x10uLL);
  *v2 = off_10080D858;
  v2[1] = *(id *)(a1 + 8);
  return v2;
}

id sub_1001E8380(uint64_t a1, _QWORD *a2)
{
  id result;

  *a2 = off_10080D858;
  result = *(id *)(a1 + 8);
  a2[1] = result;
  return result;
}

void sub_1001E83B4(uint64_t a1)
{

}

void sub_1001E83BC(id *a1)
{

  operator delete(a1);
}

id sub_1001E83E4(uint64_t a1, double *a2, unsigned int *a3)
{
  return _objc_msgSend(*(id *)(a1 + 8), "_handleBackoffManagerRecommendation:machContinuousTimeSec:", *a3, *a2);
}

uint64_t sub_1001E83F4(uint64_t a1, uint64_t a2)
{
  if (sub_10003E27C(a2, (uint64_t)&off_10080D8B8))
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_1001E8430()
{
  return &off_10080D8B8;
}

uint64_t sub_1001E843C(uint64_t a1)
{

  return a1;
}

void sub_1001E8464(uint64_t a1)
{

  operator delete();
}

_QWORD *sub_1001E849C(uint64_t a1)
{
  _QWORD *v2;

  v2 = operator new(0x10uLL);
  *v2 = off_10080D8D8;
  v2[1] = *(id *)(a1 + 8);
  return v2;
}

id sub_1001E84E0(uint64_t a1, _QWORD *a2)
{
  id result;

  *a2 = off_10080D8D8;
  result = *(id *)(a1 + 8);
  a2[1] = result;
  return result;
}

void sub_1001E8514(uint64_t a1)
{

}

void sub_1001E851C(id *a1)
{

  operator delete(a1);
}

id sub_1001E8544(uint64_t a1, unsigned int *a2)
{
  return _objc_msgSend(*(id *)(a1 + 8), "_handleMotionStateChange:", *a2);
}

uint64_t sub_1001E8550(uint64_t a1, uint64_t a2)
{
  if (sub_10003E27C(a2, (uint64_t)&off_10080D938))
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_1001E858C()
{
  return &off_10080D938;
}

uint64_t sub_1001E8598(uint64_t a1)
{

  return a1;
}

void sub_1001E85C0(uint64_t a1)
{

  operator delete();
}

_QWORD *sub_1001E85F8(uint64_t a1)
{
  _QWORD *v2;

  v2 = operator new(0x10uLL);
  *v2 = off_10080D958;
  v2[1] = *(id *)(a1 + 8);
  return v2;
}

id sub_1001E863C(uint64_t a1, _QWORD *a2)
{
  id result;

  *a2 = off_10080D958;
  result = *(id *)(a1 + 8);
  a2[1] = result;
  return result;
}

void sub_1001E8670(uint64_t a1)
{

}

void sub_1001E8678(id *a1)
{

  operator delete(a1);
}

id sub_1001E86A0(uint64_t a1, unsigned int *a2)
{
  return _objc_msgSend(*(id *)(a1 + 8), "_handleScreenStateChange:", *a2);
}

uint64_t sub_1001E86AC(uint64_t a1, uint64_t a2)
{
  if (sub_10003E27C(a2, (uint64_t)&off_10080D9B8))
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_1001E86E8()
{
  return &off_10080D9B8;
}

void sub_1001E86F4(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_10001AE68((uint64_t)v2 + 24);
    operator delete(v2);
  }
}

_QWORD *sub_1001E8738(uint64_t a1, uint64_t *a2, uint64_t a3, _QWORD **a4, uint64_t a5)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  _QWORD *v19;
  unint64_t v20;
  _QWORD v22[3];

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v5 = *a2;
      if (v7 >= v8)
        v5 = v7 % v8;
    }
    else
    {
      v5 = (v8 - 1) & v7;
    }
    v10 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v5);
    if (v10)
    {
      v11 = (_QWORD *)*v10;
      if (*v10)
      {
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (v11[2] == v7)
              return v11;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v5)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
  sub_1001E897C(a1, *a2, a4, a5, (uint64_t)v22);
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    v15 = 1;
    if (v8 >= 3)
      v15 = (v8 & (v8 - 1)) != 0;
    v16 = v15 | (2 * v8);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    sub_10002A900(a1, v18);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v5 = v7 % v8;
      else
        v5 = v7;
    }
    else
    {
      v5 = (v8 - 1) & v7;
    }
  }
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v5);
  if (v19)
  {
    *(_QWORD *)v22[0] = *v19;
    *v19 = v22[0];
  }
  else
  {
    *(_QWORD *)v22[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v22[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v5) = a1 + 16;
    if (*(_QWORD *)v22[0])
    {
      v20 = *(_QWORD *)(*(_QWORD *)v22[0] + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v20 >= v8)
          v20 %= v8;
      }
      else
      {
        v20 &= v8 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v20) = v22[0];
    }
  }
  v11 = (_QWORD *)v22[0];
  v22[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  sub_1001E86F4((uint64_t)v22, 0);
  return v11;
}

void sub_1001E8964(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1001E86F4((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_1001E897C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD **a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v9;
  _QWORD *v10;
  uint64_t result;

  v9 = a1 + 16;
  v10 = operator new(0x40uLL);
  *(_QWORD *)a5 = v10;
  *(_QWORD *)(a5 + 8) = v9;
  *(_BYTE *)(a5 + 16) = 0;
  *v10 = 0;
  v10[1] = a2;
  result = sub_1001E89F8((uint64_t)(v10 + 2), *a3, *(uint64_t **)a4, *(__int128 **)(a4 + 8));
  *(_BYTE *)(a5 + 16) = 1;
  return result;
}

void sub_1001E89E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1001E86F4(v1, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_1001E89F8(uint64_t a1, _QWORD *a2, uint64_t *a3, __int128 *a4)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  __int128 v10;
  unint64_t v11;
  __int128 v12;

  *(_QWORD *)a1 = *a2;
  v5 = *a3;
  v6 = (std::__shared_weak_count *)a3[1];
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    *(_QWORD *)(a1 + 8) = v5;
    *(_QWORD *)(a1 + 16) = v6;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    v10 = *a4;
    *(_QWORD *)(a1 + 40) = *((_QWORD *)a4 + 2);
    *(_OWORD *)(a1 + 24) = v10;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 8) = v5;
    *(_QWORD *)(a1 + 16) = 0;
    v12 = *a4;
    *(_QWORD *)(a1 + 40) = *((_QWORD *)a4 + 2);
    *(_OWORD *)(a1 + 24) = v12;
  }
  return a1;
}

_QWORD *sub_1001E8AA4(uint64_t a1, unint64_t *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  _QWORD *v21;
  unint64_t v22;
  _QWORD v24[2];
  char v25;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = (_QWORD *)*v10;
      if (*v10)
      {
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (v11[2] == v7)
              return v11;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
  v13 = a1 + 16;
  v14 = operator new(0x28uLL);
  v24[0] = v14;
  v24[1] = a1 + 16;
  *v14 = 0;
  v14[1] = v7;
  v14[2] = **a4;
  v14[3] = 0;
  v14[4] = 0;
  v25 = 1;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v8 || (float)(v16 * (float)v8) < v15)
  {
    v17 = 1;
    if (v8 >= 3)
      v17 = (v8 & (v8 - 1)) != 0;
    v18 = v17 | (2 * v8);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    sub_10002A900(a1, v20);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v21)
  {
    *(_QWORD *)v24[0] = *v21;
    *v21 = v24[0];
  }
  else
  {
    *(_QWORD *)v24[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v24[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = v13;
    if (*(_QWORD *)v24[0])
    {
      v22 = *(_QWORD *)(*(_QWORD *)v24[0] + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v22 >= v8)
          v22 %= v8;
      }
      else
      {
        v22 &= v8 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v22) = v24[0];
    }
  }
  v11 = (_QWORD *)v24[0];
  v24[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  sub_1001E86F4((uint64_t)v24, 0);
  return v11;
}

void sub_1001E8CE8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1001E86F4((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_1001E8D00(_QWORD *a1, unint64_t *a2)
{
  uint64_t result;
  _BYTE v4[24];

  result = (uint64_t)sub_1000550B8(a1, a2);
  if (result)
  {
    sub_10002A5A0(a1, (_QWORD *)result, (uint64_t)v4);
    sub_1001E86F4((uint64_t)v4, 0);
    return 1;
  }
  return result;
}

_QWORD *sub_1001E8D4C(uint64_t a1, unint64_t *a2, _QWORD *a3, uint64_t *a4)
{
  unint64_t v4;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  float v20;
  float v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  size_t v25;
  _QWORD *v26;
  unint64_t v27;
  _QWORD v29[2];
  char v30;

  v8 = *a2;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 >= v9)
        v4 = v8 % v9;
    }
    else
    {
      v4 = (v9 - 1) & v8;
    }
    v11 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v11)
    {
      v12 = (_QWORD *)*v11;
      if (*v11)
      {
        do
        {
          v13 = v12[1];
          if (v13 == v8)
          {
            if (v12[2] == v8)
              return v12;
          }
          else
          {
            if (v10.u32[0] > 1uLL)
            {
              if (v13 >= v9)
                v13 %= v9;
            }
            else
            {
              v13 &= v9 - 1;
            }
            if (v13 != v4)
              break;
          }
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
    }
  }
  v14 = a1 + 16;
  v15 = operator new(0x28uLL);
  v29[0] = v15;
  v29[1] = a1 + 16;
  *v15 = 0;
  v15[1] = v8;
  v17 = *a4;
  v16 = a4[1];
  v15[2] = *a3;
  v15[3] = v17;
  v15[4] = v16;
  if (v16)
  {
    v18 = (unint64_t *)(v16 + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  v30 = 1;
  v20 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v21 = *(float *)(a1 + 32);
  if (!v9 || (float)(v21 * (float)v9) < v20)
  {
    v22 = 1;
    if (v9 >= 3)
      v22 = (v9 & (v9 - 1)) != 0;
    v23 = v22 | (2 * v9);
    v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24)
      v25 = v24;
    else
      v25 = v23;
    sub_10002A900(a1, v25);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v4 = v8 % v9;
      else
        v4 = v8;
    }
    else
    {
      v4 = (v9 - 1) & v8;
    }
  }
  v26 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v26)
  {
    *(_QWORD *)v29[0] = *v26;
    *v26 = v29[0];
  }
  else
  {
    *(_QWORD *)v29[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v29[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = v14;
    if (*(_QWORD *)v29[0])
    {
      v27 = *(_QWORD *)(*(_QWORD *)v29[0] + 8);
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v27 >= v9)
          v27 %= v9;
      }
      else
      {
        v27 &= v9 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v27) = v29[0];
    }
  }
  v12 = (_QWORD *)v29[0];
  v29[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  sub_1001E86F4((uint64_t)v29, 0);
  return v12;
}

void sub_1001E8FB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1001E86F4((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void sub_1001E8FCC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10080D9D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1001E8FDC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10080D9D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_1001E900C(uint64_t a1)
{
  return sub_10002DEFC(a1 + 24);
}

uint64_t sub_1001E9018(uint64_t a1)
{

  return a1;
}

void sub_1001E9040(uint64_t a1)
{

  operator delete();
}

_QWORD *sub_1001E9078(uint64_t a1)
{
  _QWORD *v2;

  v2 = operator new(0x10uLL);
  *v2 = off_10080DA28;
  v2[1] = *(id *)(a1 + 8);
  return v2;
}

id sub_1001E90BC(uint64_t a1, _QWORD *a2)
{
  id result;

  *a2 = off_10080DA28;
  result = *(id *)(a1 + 8);
  a2[1] = result;
  return result;
}

void sub_1001E90F0(uint64_t a1)
{

}

void sub_1001E90F8(id *a1)
{

  operator delete(a1);
}

void sub_1001E9120(uint64_t a1, __int128 **a2)
{
  NSObject *v3;
  _QWORD v4[5];
  _QWORD v5[3];
  __int128 *v6;
  __int128 *v7;
  uint64_t v8;
  __int128 **v9;

  v6 = 0;
  v7 = 0;
  v8 = 0;
  sub_1001E948C(&v6, *a2, a2[1], 0x6DB6DB6DB6DB6DB7 * (((char *)a2[1] - (char *)*a2) >> 3));
  v3 = *(NSObject **)(*(_QWORD *)(a1 + 8) + 80);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3321888768;
  v4[2] = sub_1001E927C;
  v4[3] = &unk_10080DA90;
  memset(v5, 0, sizeof(v5));
  sub_1001E948C(v5, v6, v7, 0x6DB6DB6DB6DB6DB7 * (((char *)v7 - (char *)v6) >> 3));
  v4[4] = *(_QWORD *)(a1 + 8);
  dispatch_async(v3, v4);
  v9 = (__int128 **)v5;
  sub_100028810((void ***)&v9);
  v9 = &v6;
  sub_100028810((void ***)&v9);
}

void sub_1001E921C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 56) = v1;
  sub_100028810((void ***)(v2 - 56));
  _Unwind_Resume(a1);
}

uint64_t sub_1001E9234(uint64_t a1, uint64_t a2)
{
  if (sub_10003E27C(a2, (uint64_t)&off_10080DAC0))
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_1001E9270()
{
  return &off_10080DAC0;
}

void sub_1001E927C(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  unsigned __int8 v11;
  void *v12;
  uint64_t v13;
  objc_super v14;
  objc_super v15;

  v2 = *(uint64_t **)(a1 + 40);
  v13 = a1 + 40;
  v3 = *(uint64_t **)(a1 + 48);
  if (v2 == v3)
  {
LABEL_5:
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 64), "acceptWiFiRangeResults:", v13);
  }
  else
  {
    while (1)
    {
      v4 = *v2;
      v15.receiver = *(id *)(a1 + 32);
      v15.super_class = (Class)NIServerHomeDeviceSession;
      v5 = objc_msgSendSuper2(&v15, "discoveryTokenFromIdentifier:", v4);
      v6 = objc_claimAutoreleasedReturnValue(v5);
      if (!v6)
        break;
      v7 = (void *)v6;
      v14.receiver = *(id *)(a1 + 32);
      v14.super_class = (Class)NIServerHomeDeviceSession;
      v8 = objc_msgSendSuper2(&v14, "resourcesManager");
      v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "lifecycleSupervisor"));
      v11 = objc_msgSend(v10, "isTrackingPeer:", v7);

      if ((v11 & 1) == 0)
      {
        if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
          sub_1003DAE94();

        return;
      }
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "lifecycleSupervisor"));
      objc_msgSend(v12, "measurementReceivedForToken:contTimestamp:", v7, sub_10000883C());

      v2 += 7;
      if (v2 == v3)
        goto LABEL_5;
    }
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
      sub_1003DAE34();
  }
}

void sub_1001E9408(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

_QWORD *sub_1001E9434(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  v2 = (_QWORD *)(a1 + 40);
  v2[2] = 0;
  return sub_1001E948C(v2, *(__int128 **)(a2 + 40), *(__int128 **)(a2 + 48), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a2 + 48) - *(_QWORD *)(a2 + 40)) >> 3));
}

void sub_1001E9464(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 40);
  sub_100028810(&v1);
}

_QWORD *sub_1001E948C(_QWORD *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    sub_100137708(result, a4);
    result = (_QWORD *)sub_1001E9510((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1001E94F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  sub_100028810(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1001E9510(uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  uint64_t v4;
  __int128 *v6;
  __int128 v7;
  _QWORD v9[3];
  char v10;
  uint64_t v11;
  uint64_t v12;

  v4 = a4;
  v11 = a4;
  v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      v7 = *v6;
      *(_DWORD *)(v4 + 16) = *((_DWORD *)v6 + 4);
      *(_OWORD *)v4 = v7;
      *(_QWORD *)(v4 + 24) = 0;
      *(_QWORD *)(v4 + 32) = 0;
      *(_QWORD *)(v4 + 40) = 0;
      sub_100026DB4((_QWORD *)(v4 + 24), *((const void **)v6 + 3), *((_QWORD *)v6 + 4), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v6 + 4) - *((_QWORD *)v6 + 3)) >> 3));
      *(_DWORD *)(v4 + 48) = *((_DWORD *)v6 + 12);
      v4 = v12 + 56;
      v12 += 56;
      v6 = (__int128 *)((char *)v6 + 56);
    }
    while (v6 != a3);
  }
  v10 = 1;
  sub_100029C88((uint64_t)v9);
  return v4;
}

void sub_1001E95D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100029C88((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1001E95E4(uint64_t a1)
{

  return a1;
}

void sub_1001E960C(uint64_t a1)
{

  operator delete();
}

_QWORD *sub_1001E9644(uint64_t a1)
{
  _QWORD *v2;

  v2 = operator new(0x10uLL);
  *v2 = off_10080DAE0;
  v2[1] = *(id *)(a1 + 8);
  return v2;
}

id sub_1001E9688(uint64_t a1, _QWORD *a2)
{
  id result;

  *a2 = off_10080DAE0;
  result = *(id *)(a1 + 8);
  a2[1] = result;
  return result;
}

void sub_1001E96BC(uint64_t a1)
{

}

void sub_1001E96C4(id *a1)
{

  operator delete(a1);
}

void sub_1001E96EC(uint64_t a1, int *a2)
{
  void **v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  NSObject *v8;
  id v9;
  _QWORD v10[5];
  id v11;
  void *__p[2];
  char v13;
  NSErrorUserInfoKey v14;
  void *v15;

  sub_10002ED0C(*a2, __p);
  if (v13 >= 0)
    v3 = __p;
  else
    v3 = (void **)__p[0];
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v3));
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
    sub_1003DAEF4();
  v14 = NSLocalizedDescriptionKey;
  v15 = v4;
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v15, &v14, 1));
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("com.apple.NearbyInteraction"), -5887, v5));

  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(NSObject **)(v7 + 80);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_1001E98FC;
  v10[3] = &unk_1007FA518;
  v10[4] = v7;
  v11 = v6;
  v9 = v6;
  dispatch_async(v8, v10);

  if (v13 < 0)
    operator delete(__p[0]);
}

void sub_1001E9878(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  void *v21;

  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_1001E98B4(uint64_t a1, uint64_t a2)
{
  if (sub_10003E27C(a2, (uint64_t)&off_10080DB40))
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_1001E98F0()
{
  return &off_10080DB40;
}

void sub_1001E98FC(uint64_t a1)
{
  id v2;
  void *v3;
  void *v4;
  objc_super v5;

  v5.receiver = *(id *)(a1 + 32);
  v5.super_class = (Class)NIServerHomeDeviceSession;
  v2 = objc_msgSendSuper2(&v5, "resourcesManager");
  v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "remote"));
  objc_msgSend(v4, "uwbSessionDidFailWithError:", *(_QWORD *)(a1 + 40));

}

void sub_1001E996C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t sub_1001E9988(uint64_t a1)
{

  return a1;
}

void sub_1001E99B0(uint64_t a1)
{

  operator delete();
}

_QWORD *sub_1001E99E8(uint64_t a1)
{
  _QWORD *v2;

  v2 = operator new(0x10uLL);
  *v2 = off_10080DB60;
  v2[1] = *(id *)(a1 + 8);
  return v2;
}

id sub_1001E9A2C(uint64_t a1, _QWORD *a2)
{
  id result;

  *a2 = off_10080DB60;
  result = *(id *)(a1 + 8);
  a2[1] = result;
  return result;
}

void sub_1001E9A60(uint64_t a1)
{

}

void sub_1001E9A68(id *a1)
{

  operator delete(a1);
}

void sub_1001E9A90(uint64_t a1, int *a2)
{
  int v3;
  NSObject *v4;
  objc_super *v5;
  id v6;
  void *v7;
  void *v8;
  unsigned __int8 v9;
  BOOL v10;
  objc_super __p;
  char v12;
  uint8_t buf[4];
  objc_super *v14;

  v3 = *a2;
  v4 = (id)qword_10085F520;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    sub_10002ED3C(v3, &__p);
    v5 = v12 >= 0 ? &__p : (objc_super *)__p.receiver;
    *(_DWORD *)buf = 136315138;
    v14 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#ses-home,WiFi readiness update: %s", buf, 0xCu);
    if (v12 < 0)
      operator delete(__p.receiver);
  }

  __p.receiver = *(id *)(a1 + 8);
  __p.super_class = (Class)NIServerHomeDeviceSession;
  v6 = objc_msgSendSuper2(&__p, "resourcesManager");
  v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "wifiResource"));
  v9 = objc_msgSend(v8, "deviceCapabilities");

  if (*(_BYTE *)(*(_QWORD *)(a1 + 8) + 97))
    v10 = 1;
  else
    v10 = (v9 & 1) == 0;
  if (!v10)
  {
    if (v3)
    {
      if (v3 == 1)
        objc_msgSend(v7, "interruptSessionWithReason:monotonicTimeSeconds:", 5, sub_10000883C());
    }
    else
    {
      objc_msgSend(v7, "interruptionReasonEnded:monotonicTimeSeconds:", 5, sub_10000883C());
    }
  }

}

void sub_1001E9C10(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1001E9C38(uint64_t a1, uint64_t a2)
{
  if (sub_10003E27C(a2, (uint64_t)&off_10080DBC0))
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_1001E9C74()
{
  return &off_10080DBC0;
}

uint64_t sub_1001E9C80(uint64_t a1)
{

  return a1;
}

void sub_1001E9CA8(uint64_t a1)
{

  operator delete();
}

_QWORD *sub_1001E9CE0(uint64_t a1)
{
  _QWORD *v2;

  v2 = operator new(0x10uLL);
  *v2 = off_10080DBE0;
  v2[1] = *(id *)(a1 + 8);
  return v2;
}

id sub_1001E9D24(uint64_t a1, _QWORD *a2)
{
  id result;

  *a2 = off_10080DBE0;
  result = *(id *)(a1 + 8);
  a2[1] = result;
  return result;
}

void sub_1001E9D58(uint64_t a1)
{

}

void sub_1001E9D60(id *a1)
{

  operator delete(a1);
}

void sub_1001E9D88(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD block[6];
  int v10;

  v3 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(NSObject **)(v4 + 80);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1001E9E80;
  block[3] = &unk_10080B8C0;
  v6 = *a3;
  block[4] = v4;
  block[5] = v6;
  v10 = *((_DWORD *)a3 + 2);
  dispatch_async(v5, block);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

uint64_t sub_1001E9E38(uint64_t a1, uint64_t a2)
{
  if (sub_10003E27C(a2, (uint64_t)&off_10080DC40))
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_1001E9E74()
{
  return &off_10080DC40;
}

id sub_1001E9E80(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "serviceRequestDidUpdateStatus:", *(_QWORD *)(a1 + 40), *(unsigned int *)(a1 + 48));
}

uint64_t sub_1001E9E90(uint64_t a1)
{

  return a1;
}

void sub_1001E9EB8(uint64_t a1)
{

  operator delete();
}

_QWORD *sub_1001E9EF0(uint64_t a1)
{
  _QWORD *v2;

  v2 = operator new(0x10uLL);
  *v2 = off_10080DC60;
  v2[1] = *(id *)(a1 + 8);
  return v2;
}

id sub_1001E9F34(uint64_t a1, _QWORD *a2)
{
  id result;

  *a2 = off_10080DC60;
  result = *(id *)(a1 + 8);
  a2[1] = result;
  return result;
}

void sub_1001E9F68(uint64_t a1)
{

}

void sub_1001E9F70(id *a1)
{

  operator delete(a1);
}

void sub_1001E9F98(uint64_t a1, _QWORD *a2, __int128 *a3)
{
  std::__shared_weak_count *v5;
  __int128 v6;
  uint64_t v7;
  NSObject *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  _QWORD v11[5];
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[560];
  _BYTE v16[16];
  _QWORD *v17[16];
  char v18;
  __n128 v19[4];
  void *__p;
  void *v21;
  char v22;
  _BYTE v23[545];
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _BYTE v27[560];
  _BYTE v28[16];
  _QWORD *v29[16];
  char v30;
  __n128 v31[4];
  void *v32;
  void *v33;
  char v34;
  _BYTE v35[545];

  v5 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  v6 = a3[1];
  v24 = *a3;
  v25 = v6;
  v26 = a3[2];
  sub_10015A39C(v27, (uint64_t)(a3 + 3));
  sub_100153F08(v28, (uint64_t)(a3 + 38));
  sub_10015A3F0(v31, (__n128 *)((char *)a3 + 760));
  memcpy(v35, a3 + 55, sizeof(v35));
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(NSObject **)(v7 + 80);
  v11[1] = 3321888768;
  v14 = v26;
  v13 = v25;
  v11[0] = _NSConcreteStackBlock;
  v11[2] = sub_1001EA2D8;
  v11[3] = &unk_10080C5A8;
  v11[4] = v7;
  v12 = v24;
  sub_10015A39C(v15, (uint64_t)v27);
  sub_100153F08(v16, (uint64_t)v28);
  sub_10015A3F0(v19, v31);
  memcpy(v23, v35, sizeof(v23));
  dispatch_async(v8, v11);
  if (v22 && __p)
  {
    v21 = __p;
    operator delete(__p);
  }
  if (v18)
    sub_10003E3F0((uint64_t)v17, v17[1]);
  sub_100144868((uint64_t)v15);
  if (v34 && v32)
  {
    v33 = v32;
    operator delete(v32);
  }
  if (v30)
    sub_10003E3F0((uint64_t)v29, v29[1]);
  sub_100144868((uint64_t)v27);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_1001EA1BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__shared_weak_count *v9;
  uint64_t v10;
  uint64_t v11;
  void *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;

  if (LOBYTE(STACK[0x318]))
    sub_1003CF324((uint64_t)&a9);
  sub_100144868(v11);
  if (LOBYTE(STACK[0x928]))
  {
    v13 = (void *)STACK[0x900];
    if (STACK[0x900])
    {
      STACK[0x908] = (unint64_t)v13;
      operator delete(v13);
    }
  }
  if (LOBYTE(STACK[0x8B0]))
    sub_10003E3F0((uint64_t)&STACK[0x830], (_QWORD *)STACK[0x838]);
  sub_100144868(v10);
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1001EA290(uint64_t a1, uint64_t a2)
{
  if (sub_10003E27C(a2, (uint64_t)&off_10080DCC0))
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_1001EA2CC()
{
  return &off_10080DCC0;
}

id sub_1001EA2D8(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "didReceiveNewSolution:", a1 + 40);
}

uint64_t sub_1001EA2E8(uint64_t a1)
{

  return a1;
}

void sub_1001EA310(uint64_t a1)
{

  operator delete();
}

_QWORD *sub_1001EA348(uint64_t a1)
{
  _QWORD *v2;

  v2 = operator new(0x10uLL);
  *v2 = off_10080DCE0;
  v2[1] = *(id *)(a1 + 8);
  return v2;
}

id sub_1001EA38C(uint64_t a1, _QWORD *a2)
{
  id result;

  *a2 = off_10080DCE0;
  result = *(id *)(a1 + 8);
  a2[1] = result;
  return result;
}

void sub_1001EA3C0(uint64_t a1)
{

}

void sub_1001EA3C8(id *a1)
{

  operator delete(a1);
}

void sub_1001EA3F0(uint64_t a1, _QWORD *a2, __int16 *a3)
{
  std::__shared_weak_count *v5;
  uint64_t v6;
  NSObject *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  _QWORD block[5];
  __int16 v11;
  void *__p;
  void *v13;
  uint64_t v14;
  __int128 v15;
  __int16 v16;
  void *v17;
  _BYTE *v18;
  uint64_t v19;
  __int128 v20;

  v5 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  v16 = *a3;
  v18 = 0;
  v19 = 0;
  v17 = 0;
  sub_1001530EC(&v17, *((const void **)a3 + 1), *((_QWORD *)a3 + 2), *((_QWORD *)a3 + 2) - *((_QWORD *)a3 + 1));
  v20 = *((_OWORD *)a3 + 2);
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(NSObject **)(v6 + 80);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3321888768;
  block[2] = sub_1001EA5C4;
  block[3] = &unk_10080C670;
  block[4] = v6;
  v11 = v16;
  v13 = 0;
  v14 = 0;
  __p = 0;
  sub_1001530EC(&__p, v17, (uint64_t)v18, v18 - (_BYTE *)v17);
  v15 = v20;
  dispatch_async(v7, block);
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
  if (v17)
  {
    v18 = v17;
    operator delete(v17);
  }
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_1001EA524(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  uint64_t v2;
  void *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v4 = *(void **)(v2 - 72);
  if (v4)
  {
    *(_QWORD *)(v2 - 64) = v4;
    operator delete(v4);
  }
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1001EA57C(uint64_t a1, uint64_t a2)
{
  if (sub_10003E27C(a2, (uint64_t)&off_10080DD40))
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_1001EA5B8()
{
  return &off_10080DD40;
}

id sub_1001EA5C4(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "didReceiveRemoteData:", a1 + 40);
}

uint64_t sub_1001EA5D4(uint64_t a1)
{

  return a1;
}

void sub_1001EA5FC(uint64_t a1)
{

  operator delete();
}

_QWORD *sub_1001EA634(uint64_t a1)
{
  _QWORD *v2;

  v2 = operator new(0x10uLL);
  *v2 = off_10080DD60;
  v2[1] = *(id *)(a1 + 8);
  return v2;
}

id sub_1001EA678(uint64_t a1, _QWORD *a2)
{
  id result;

  *a2 = off_10080DD60;
  result = *(id *)(a1 + 8);
  a2[1] = result;
  return result;
}

void sub_1001EA6AC(uint64_t a1)
{

}

void sub_1001EA6B4(id *a1)
{

  operator delete(a1);
}

void sub_1001EA6DC(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  int v5;
  uint64_t v6;
  NSObject *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD v15[6];
  std::__shared_weak_count *v16;
  int v17;

  v3 = *a2;
  v4 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  v5 = *a3;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(NSObject **)(v6 + 80);
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3321888768;
  v15[2] = sub_1001EA82C;
  v15[3] = &unk_10080DDC8;
  v15[4] = v6;
  v15[5] = v3;
  v16 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v17 = v5;
  dispatch_async(v7, v15);
  v10 = v16;
  if (!v16)
    goto LABEL_8;
  v11 = (unint64_t *)&v16->__shared_owners_;
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 - 1, v11));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
    if (!v4)
      return;
  }
  else
  {
LABEL_8:
    if (!v4)
      return;
  }
  v13 = (unint64_t *)&v4->__shared_owners_;
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 - 1, v13));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
}

uint64_t sub_1001EA7E4(uint64_t a1, uint64_t a2)
{
  if (sub_10003E27C(a2, (uint64_t)&off_10080DDF8))
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_1001EA820()
{
  return &off_10080DDF8;
}

void sub_1001EA82C(uint64_t a1)
{
  void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;

  v2 = *(void **)(a1 + 32);
  v3 = *(std::__shared_weak_count **)(a1 + 48);
  v9 = *(_QWORD *)(a1 + 40);
  v10 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  objc_msgSend(v2, "_roseSession:invalidatedWithReason:", &v9, *(unsigned int *)(a1 + 56));
  v6 = v10;
  if (v10)
  {
    v7 = (unint64_t *)&v10->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1001EA8B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10001AE68((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1001EA8CC(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t sub_1001EA8F0(uint64_t a1)
{
  return sub_10001AE68(a1 + 40);
}

uint64_t sub_1001EA8F8(uint64_t a1)
{

  return a1;
}

void sub_1001EA920(uint64_t a1)
{

  operator delete();
}

_QWORD *sub_1001EA958(uint64_t a1)
{
  _QWORD *v2;

  v2 = operator new(0x10uLL);
  *v2 = off_10080DE18;
  v2[1] = *(id *)(a1 + 8);
  return v2;
}

id sub_1001EA99C(uint64_t a1, _QWORD *a2)
{
  id result;

  *a2 = off_10080DE18;
  result = *(id *)(a1 + 8);
  a2[1] = result;
  return result;
}

void sub_1001EA9D0(uint64_t a1)
{

}

void sub_1001EA9D8(id *a1)
{

  operator delete(a1);
}

void sub_1001EAA00(uint64_t a1, uint64_t *a2, int *a3, int *a4, int *a5, int *a6)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  int v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  NSObject *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  _QWORD block[6];
  std::__shared_weak_count *v22;
  int v23;
  int v24;
  int v25;
  int v26;

  v6 = *a2;
  v7 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  v8 = *a3;
  v9 = *a4;
  v10 = *a5;
  v11 = *a6;
  v12 = *(_QWORD *)(a1 + 8);
  v13 = *(NSObject **)(v12 + 80);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3321888768;
  block[2] = sub_1001EAB64;
  block[3] = &unk_10080DE80;
  block[4] = v12;
  block[5] = v6;
  v22 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  v23 = v8;
  v24 = v9;
  v25 = v10;
  v26 = v11;
  dispatch_async(v13, block);
  v16 = v22;
  if (!v22)
    goto LABEL_8;
  v17 = (unint64_t *)&v22->__shared_owners_;
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v18 - 1, v17));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
    if (!v7)
      return;
  }
  else
  {
LABEL_8:
    if (!v7)
      return;
  }
  v19 = (unint64_t *)&v7->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (!v20)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

uint64_t sub_1001EAB1C(uint64_t a1, uint64_t a2)
{
  if (sub_10003E27C(a2, (uint64_t)&off_10080DEB0))
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_1001EAB58()
{
  return &off_10080DEB0;
}

void sub_1001EAB64(uint64_t a1, double a2, double a3)
{
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;

  v4 = *(void **)(a1 + 32);
  v5 = *(std::__shared_weak_count **)(a1 + 48);
  v11 = *(_QWORD *)(a1 + 40);
  v12 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  LODWORD(a2) = *(_DWORD *)(a1 + 60);
  LODWORD(a3) = *(_DWORD *)(a1 + 64);
  objc_msgSend(v4, "_roseSession:didChangeRangingUpdateRate:newThrottleRate:prevThrottleRate:effectiveSinceCycleInde:", &v11, *(unsigned int *)(a1 + 56), *(unsigned int *)(a1 + 68), a2, a3);
  v8 = v12;
  if (v12)
  {
    v9 = (unint64_t *)&v12->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1001EABF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10001AE68((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1001EAC0C(uint64_t a1)
{

  return a1;
}

void sub_1001EAC34(uint64_t a1)
{

  operator delete();
}

_QWORD *sub_1001EAC6C(uint64_t a1)
{
  _QWORD *v2;

  v2 = operator new(0x10uLL);
  *v2 = off_10080DED0;
  v2[1] = *(id *)(a1 + 8);
  return v2;
}

id sub_1001EACB0(uint64_t a1, _QWORD *a2)
{
  id result;

  *a2 = off_10080DED0;
  result = *(id *)(a1 + 8);
  a2[1] = result;
  return result;
}

void sub_1001EACE4(uint64_t a1)
{

}

void sub_1001EACEC(id *a1)
{

  operator delete(a1);
}

void sub_1001EAD14(uint64_t a1, _QWORD *a2, __int128 *a3)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  NSObject *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  _QWORD v12[5];
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;

  v3 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(NSObject **)(v4 + 80);
  v12[1] = 3221225472;
  v6 = a3[7];
  v19 = a3[6];
  v20 = v6;
  v21 = a3[8];
  v7 = a3[3];
  v15 = a3[2];
  v16 = v7;
  v8 = a3[5];
  v17 = a3[4];
  v18 = v8;
  v9 = a3[1];
  v13 = *a3;
  v12[0] = _NSConcreteStackBlock;
  v12[2] = sub_1001EAE44;
  v12[3] = &unk_10080DF48;
  v12[4] = v4;
  v22 = *((_QWORD *)a3 + 18);
  v14 = v9;
  dispatch_async(v5, v12);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

uint64_t sub_1001EADFC(uint64_t a1, uint64_t a2)
{
  if (sub_10003E27C(a2, (uint64_t)&off_10080DF68))
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_1001EAE38()
{
  return &off_10080DF68;
}

id sub_1001EAE44(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "didReceiveDeviceMotion:", a1 + 40);
}

void sub_1001EAE54(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  if (*(_QWORD *)(a1 + 24))
  {
    sub_1001EAEA8(a1, *(_QWORD **)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      for (i = 0; i != v2; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
}

void sub_1001EAEA8(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      sub_10001AE68((uint64_t)(v2 + 3));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

uint64_t sub_1001EAEE4(uint64_t a1)
{
  void *v2;

  sub_1001EAEA8(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

uint64_t sub_1001EAF1C(uint64_t result, uint64_t a2, float a3)
{
  *(float *)a2 = a3;
  *(_QWORD *)(a2 + 4) = result;
  return result;
}

void sub_1001EAF28(void *a1, int a2, os_log_t log, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, a5, 0x16u);
}

void sub_1001EAF38(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = a1;
}

void sub_1001EAF44()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_100850448);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_100850448))
    {
      sub_10000BF04(qword_100850430, "PRRoseProviderNetworkListener");
      __cxa_atexit((void (*)(void *))&std::string::~string, qword_100850430, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_100850448);
    }
  }
}

void sub_1001EAFC0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_100850448);
  _Unwind_Resume(a1);
}

void sub_1001EAFD8()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_100850468);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_100850468))
    {
      sub_10000BF04(&qword_100850450, "com.apple.nearbyd.accessory.download");
      __cxa_atexit((void (*)(void *))&std::string::~string, &qword_100850450, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_100850468);
    }
  }
}

void sub_1001EB054(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_100850468);
  _Unwind_Resume(a1);
}

void sub_1001EB06C()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_100850488);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_100850488))
    {
      sub_10000BF04(&qword_100850470, "com.apple.nearbyd.accessory.files");
      __cxa_atexit((void (*)(void *))&std::string::~string, &qword_100850470, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_100850488);
    }
  }
}

void sub_1001EB0E8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_100850488);
  _Unwind_Resume(a1);
}

void sub_1001EB100()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_1008504A8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1008504A8))
    {
      sub_10000BF04(qword_100850490, "MA_");
      __cxa_atexit((void (*)(void *))&std::string::~string, qword_100850490, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1008504A8);
    }
  }
}

void sub_1001EB17C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1008504A8);
  _Unwind_Resume(a1);
}

void sub_1001EB194()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_1008504C8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1008504C8))
    {
      sub_10000BF04(qword_1008504B0, "MB_");
      __cxa_atexit((void (*)(void *))&std::string::~string, qword_1008504B0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1008504C8);
    }
  }
}

void sub_1001EB210(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1008504C8);
  _Unwind_Resume(a1);
}

void sub_1001EB228()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_1008504E8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1008504E8))
    {
      sub_10000BF04(qword_1008504D0, "D");
      __cxa_atexit((void (*)(void *))&std::string::~string, qword_1008504D0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1008504E8);
    }
  }
}

void sub_1001EB2A4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1008504E8);
  _Unwind_Resume(a1);
}

void sub_1001EB2BC()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_100850508);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_100850508))
    {
      sub_10000BF04(&qword_1008504F0, "A");
      __cxa_atexit((void (*)(void *))&std::string::~string, &qword_1008504F0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_100850508);
    }
  }
}

void sub_1001EB338(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_100850508);
  _Unwind_Resume(a1);
}

void sub_1001EB350()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_100850528);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_100850528))
    {
      sub_10000BF04(qword_100850510, "FAS.bin");
      __cxa_atexit((void (*)(void *))&std::string::~string, qword_100850510, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_100850528);
    }
  }
}

void sub_1001EB3CC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_100850528);
  _Unwind_Resume(a1);
}

void sub_1001EB3E4()
{
  unsigned __int8 v0;
  _OWORD *v1;

  v0 = atomic_load((unsigned __int8 *)&qword_100850548);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_100850548))
    {
      qword_100850530 = 0;
      qword_100850538 = 0;
      qword_100850540 = 0;
      v1 = operator new(0x30uLL);
      qword_100850538 = (uint64_t)(v1 + 3);
      qword_100850540 = (uint64_t)(v1 + 3);
      *v1 = xmmword_100471350;
      v1[1] = unk_100471360;
      v1[2] = xmmword_100471370;
      qword_100850530 = (uint64_t)v1;
      __cxa_atexit((void (*)(void *))sub_100009C44, &qword_100850530, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_100850548);
    }
  }
}

void sub_1001EB484(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_100850548);
  _Unwind_Resume(a1);
}

void sub_1001EB49C()
{
  void *v0;
  _OWORD *v6;
  _OWORD *v7;
  std::string *v8;
  __int128 v9;
  std::string *v10;
  __int128 v11;
  std::string *v12;
  __int128 v13;
  std::string *v14;
  __int128 v15;
  std::string *v16;
  __int128 v17;
  std::string *v18;
  __int128 v19;
  std::string *v20;
  __int128 v21;
  std::string *v22;
  __int128 v23;
  std::string *v24;
  __int128 v25;
  std::string *v26;
  __int128 v27;
  std::string *v28;
  __int128 v29;
  std::string *v30;
  __int128 v31;
  std::string *v32;
  __int128 v33;
  std::string *v34;
  __int128 v35;
  std::string *v36;
  __int128 v37;
  std::string *v38;
  __int128 v39;
  std::string *v40;
  __int128 v41;
  std::string *v42;
  __int128 v43;
  __int128 v44;
  std::string v45;
  std::string v46;

  v0 = objc_autoreleasePoolPush();
  *(_OWORD *)&v46.__r_.__value_.__l.__data_ = xmmword_1004712E8;
  v46.__r_.__value_.__r.__words[2] = 0x300000003;
  sub_100182284((uint64_t)&unk_1008588F0, (int *)&v46, 3);
  xmmword_100858908 = xmmword_10046E050;
  unk_100858918 = xmmword_10046E060;
  qword_100858930 = 0;
  unk_100858938 = 0;
  qword_100858928 = 0x3FD999999999999ALL;
  unk_100858940 = xmmword_10046E070;
  dword_100858950 = 5;
  qword_100858958 = 0x4000000000000000;
  dword_100858960 = 5;
  byte_100858968 = 0;
  unk_10085896C = 0x30000000ALL;
  xmmword_100858978 = xmmword_10046E080;
  unk_100858988 = xmmword_10046E090;
  xmmword_100858998 = xmmword_10046E0A0;
  qword_1008589A8 = 0x3FE3333333333333;
  dword_1008589B0 = 3;
  xmmword_1008589B8 = xmmword_10046E0B0;
  unk_1008589C8 = xmmword_10046E090;
  xmmword_1008589D8 = xmmword_10046E080;
  qword_1008589E8 = 0x3FE3333333333333;
  byte_1008589F0 = 0;
  xmmword_1008589F8 = xmmword_10046E0C0;
  unk_100858A08 = xmmword_10046E0D0;
  __asm { FMOV            V0.2D, #1.0 }
  v44 = _Q0;
  xmmword_100858A18 = _Q0;
  qword_100858A28 = 0xBFD3333333333333;
  xmmword_100858A30 = xmmword_10046E0E0;
  qword_100858A40 = 0x3E99999A40000000;
  xmmword_100858A48 = xmmword_10046E060;
  qword_100858A60 = 0;
  unk_100858A68 = 0;
  qword_100858A58 = 0x3FD999999999999ALL;
  xmmword_100858A70 = xmmword_10046E070;
  dword_100858A80 = 5;
  qword_100858A88 = 0x4000000000000000;
  dword_100858A90 = 4;
  qword_100858A98 = 0x300000008;
  qword_100858AA0 = 0xC04E800000000000;
  v45.__r_.__value_.__r.__words[0] = 0xC04E800000000000;
  sub_10018252C((uint64_t)algn_100858AA8, (double *)&v45, 1);
  xmmword_100858AC0 = xmmword_10046E0F0;
  qword_100858AD0 = 0x4024000000000000;
  dword_100858AD8 = 45;
  byte_100858ADC = 0;
  dword_100858AE0 = 1;
  byte_100858AE8 = 1;
  xmmword_100858AF0 = xmmword_10046E100;
  unk_100858B00 = xmmword_10046E110;
  xmmword_100858B10 = v44;
  qword_100858B20 = 0xC059000000000000;
  xmmword_100858B28 = xmmword_10046E120;
  qword_100858B38 = (uint64_t)vdup_n_s32(0x3DCCCCCDu);
  xmmword_100858B40 = xmmword_10046E060;
  qword_100858B50 = 0x3FD999999999999ALL;
  qword_100858B60 = 0;
  qword_100858B58 = 0;
  xmmword_100858B68 = xmmword_10046E070;
  dword_100858B78 = 5;
  qword_100858B80 = 0x4000000000000000;
  dword_100858B88 = 10;
  qword_100858B90 = 0x4034000000000000;
  dword_100858B98 = 3;
  xmmword_100858BA0 = xmmword_10046E130;
  __cxa_atexit((void (*)(void *))sub_100180704, &unk_1008588F0, (void *)&_mh_execute_header);
  qword_100858BB8 = 0;
  unk_100858BC0 = 0;
  qword_100858BB0 = 0;
  v6 = operator new(0x40uLL);
  qword_100858BB8 = (uint64_t)(v6 + 4);
  unk_100858BC0 = v6 + 4;
  *v6 = xmmword_100471300;
  v6[1] = unk_100471310;
  v6[2] = xmmword_100471320;
  v6[3] = unk_100471330;
  qword_100858BB0 = (uint64_t)v6;
  __cxa_atexit((void (*)(void *))sub_1000325D8, &qword_100858BB0, (void *)&_mh_execute_header);
  qword_100858BD0 = 0;
  unk_100858BD8 = 0;
  qword_100858BC8 = 0;
  v7 = operator new(0x10uLL);
  qword_100858BD0 = (uint64_t)(v7 + 1);
  unk_100858BD8 = v7 + 1;
  *v7 = xmmword_100471340;
  qword_100858BC8 = (uint64_t)v7;
  __cxa_atexit((void (*)(void *))sub_1000325D8, &qword_100858BC8, (void *)&_mh_execute_header);
  sub_1003610EC(0);
  v8 = std::string::insert(&v45, 0, "reverseLUT_A");
  v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v46.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  v10 = std::string::append(&v46, ".bin");
  v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  qword_100858BF0 = v10->__r_.__value_.__r.__words[2];
  xmmword_100858BE0 = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v46.__r_.__value_.__l.__data_);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_100858BE0, (void *)&_mh_execute_header);
  sub_1003610EC(1);
  v12 = std::string::insert(&v45, 0, "reverseLUT_A");
  v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v46.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  v14 = std::string::append(&v46, ".bin");
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  qword_100858C08 = v14->__r_.__value_.__r.__words[2];
  xmmword_100858BF8 = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v46.__r_.__value_.__l.__data_);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_100858BF8, (void *)&_mh_execute_header);
  sub_1003610EC(2);
  v16 = std::string::insert(&v45, 0, "reverseLUT_A");
  v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v46.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  v18 = std::string::append(&v46, ".bin");
  v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  qword_100858C20 = v18->__r_.__value_.__r.__words[2];
  xmmword_100858C10 = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v46.__r_.__value_.__l.__data_);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_100858C10, (void *)&_mh_execute_header);
  sub_1003610EC(3);
  v20 = std::string::insert(&v45, 0, "reverseLUT_A");
  v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  v46.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  v22 = std::string::append(&v46, ".bin");
  v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  qword_100858C38 = v22->__r_.__value_.__r.__words[2];
  xmmword_100858C28 = v23;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v46.__r_.__value_.__l.__data_);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_100858C28, (void *)&_mh_execute_header);
  sub_1003610EC(4);
  v24 = std::string::insert(&v45, 0, "reverseLUT_A");
  v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
  v46.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v25;
  v24->__r_.__value_.__l.__size_ = 0;
  v24->__r_.__value_.__r.__words[2] = 0;
  v24->__r_.__value_.__r.__words[0] = 0;
  v26 = std::string::append(&v46, ".bin");
  v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
  qword_100858C50 = v26->__r_.__value_.__r.__words[2];
  xmmword_100858C40 = v27;
  v26->__r_.__value_.__l.__size_ = 0;
  v26->__r_.__value_.__r.__words[2] = 0;
  v26->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v46.__r_.__value_.__l.__data_);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_100858C40, (void *)&_mh_execute_header);
  sub_1003610EC(5);
  v28 = std::string::insert(&v45, 0, "reverseLUT_A");
  v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
  v46.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v29;
  v28->__r_.__value_.__l.__size_ = 0;
  v28->__r_.__value_.__r.__words[2] = 0;
  v28->__r_.__value_.__r.__words[0] = 0;
  v30 = std::string::append(&v46, ".bin");
  v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
  qword_100858C68 = v30->__r_.__value_.__r.__words[2];
  xmmword_100858C58 = v31;
  v30->__r_.__value_.__l.__size_ = 0;
  v30->__r_.__value_.__r.__words[2] = 0;
  v30->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v46.__r_.__value_.__l.__data_);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_100858C58, (void *)&_mh_execute_header);
  sub_1003610EC(6);
  v32 = std::string::insert(&v45, 0, "reverseLUT_A");
  v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
  v46.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v33;
  v32->__r_.__value_.__l.__size_ = 0;
  v32->__r_.__value_.__r.__words[2] = 0;
  v32->__r_.__value_.__r.__words[0] = 0;
  v34 = std::string::append(&v46, ".bin");
  v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
  qword_100858C80 = v34->__r_.__value_.__r.__words[2];
  xmmword_100858C70 = v35;
  v34->__r_.__value_.__l.__size_ = 0;
  v34->__r_.__value_.__r.__words[2] = 0;
  v34->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v46.__r_.__value_.__l.__data_);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_100858C70, (void *)&_mh_execute_header);
  sub_1003610EC(7);
  v36 = std::string::insert(&v45, 0, "reverseLUT_A");
  v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
  v46.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v37;
  v36->__r_.__value_.__l.__size_ = 0;
  v36->__r_.__value_.__r.__words[2] = 0;
  v36->__r_.__value_.__r.__words[0] = 0;
  v38 = std::string::append(&v46, ".bin");
  v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
  qword_100858C98 = v38->__r_.__value_.__r.__words[2];
  xmmword_100858C88 = v39;
  v38->__r_.__value_.__l.__size_ = 0;
  v38->__r_.__value_.__r.__words[2] = 0;
  v38->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v46.__r_.__value_.__l.__data_);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_100858C88, (void *)&_mh_execute_header);
  sub_1003610EC(8);
  v40 = std::string::insert(&v45, 0, "reverseLUT_A");
  v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
  v46.__r_.__value_.__r.__words[2] = v40->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v41;
  v40->__r_.__value_.__l.__size_ = 0;
  v40->__r_.__value_.__r.__words[2] = 0;
  v40->__r_.__value_.__r.__words[0] = 0;
  v42 = std::string::append(&v46, ".bin");
  v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
  qword_100858CB0 = v42->__r_.__value_.__r.__words[2];
  xmmword_100858CA0 = v43;
  v42->__r_.__value_.__l.__size_ = 0;
  v42->__r_.__value_.__r.__words[2] = 0;
  v42->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v46.__r_.__value_.__l.__data_);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_100858CA0, (void *)&_mh_execute_header);
  objc_autoreleasePoolPop(v0);
}

void sub_1001EBDB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1001EBE48@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, off_10080E1F0[a1]);
}

_QWORD *sub_1001EBE5C@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, off_10080E248[a1]);
}

_QWORD *sub_1001EBE70@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, off_10080E290[a1]);
}

_QWORD *sub_1001EBE84@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, off_10080E2B0[a1]);
}

void sub_1001EBFBC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

char *sub_1001EBFDC(uint64_t a1)
{
  void *v1;
  char *v2;

  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "printableState"));
  v2 = sub_10002D668(CFSTR("Finding Service"), v1);

  return v2;
}

void sub_1001EC020(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1001EC070(id a1)
{
  NIServerFindingServicePool *v1;
  void *v2;

  v1 = objc_alloc_init(NIServerFindingServicePool);
  v2 = (void *)qword_100859090;
  qword_100859090 = (uint64_t)v1;

}

void sub_1001EC260(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  std::mutex *v3;
  void *v4;

  std::mutex::unlock(v3);
  _Unwind_Resume(a1);
}

void sub_1001EC420(_Unwind_Exception *a1)
{
  void *v1;
  std::mutex *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v3;

  std::mutex::unlock(v2);
  _Unwind_Resume(a1);
}

void sub_1001EC4B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  std::mutex *v10;

  std::mutex::unlock(v10);

  _Unwind_Resume(a1);
}

void sub_1001EC52C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  std::mutex *v10;

  std::mutex::unlock(v10);

  _Unwind_Resume(a1);
}

void sub_1001EC970(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::mutex *a11, void *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  void *v18;
  void *v19;

  std::mutex::unlock(a11);
  _Unwind_Resume(a1);
}

void sub_1001ECCB8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1001ECF6C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t sub_1001ECF94(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1001ECFA4(uint64_t a1)
{

}

void sub_1001ECFAC(uint64_t a1)
{
  void *v2;
  NSObject *v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  _DWORD *v10;
  NINearbyObject *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  __int16 v22;
  unsigned int v23;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "objectForKey:", *(_QWORD *)(a1 + 40)));

  if (!v2)
  {
    v3 = (id)qword_10085F520;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      v4 = *(_QWORD *)(a1 + 40);
      v5 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "count");
      v20 = 138543618;
      v21 = v4;
      v22 = 1026;
      v23 = v5;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#find-ses,Service add client %{public}@ (%{public}d previous clients)", (uint8_t *)&v20, 0x12u);
    }

    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "setObject:forKey:", *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 40));
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "setObject:forKey:", *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 40));
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 48), "setObject:forKey:", &__kCFBooleanTrue, *(_QWORD *)(a1 + 40));
    if (objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "count") == (id)1)
    {
      v6 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "specifiedToken"));
      v7 = *(_QWORD *)(a1 + 32);
      v8 = *(void **)(v7 + 88);
      *(_QWORD *)(v7 + 88) = v6;

    }
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[NIServerFindingServicePool sharedInstance](NIServerFindingServicePool, "sharedInstance"));
    objc_msgSend(v9, "setService:forToken:", *(_QWORD *)(a1 + 32), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 88));

    v10 = *(_DWORD **)(a1 + 32);
    if (v10[14] == 1)
    {
      v11 = -[NINearbyObject initWithToken:]([NINearbyObject alloc], "initWithToken:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 88));
      if (objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 136), "tellClientAboutPeer"))
        objc_msgSend(*(id *)(a1 + 48), "serviceDidDiscoverNearbyObject:", v11);
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 104), "advertisingPeers"));
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "objectForKey:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 88)));

      objc_msgSend(*(id *)(a1 + 32), "_processUpdatedCommonConfigurationIfNecessary");
      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 104), "advertisingPeers"));
      v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "objectForKey:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 88)));

      if (v15)
      {
        if (objc_msgSend(v15, "isEqual:", v13))
        {
          v16 = *(void **)(a1 + 48);
          v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "byteRepresentation"));
          objc_msgSend(v16, "serviceDidGenerateShareableConfigurationData:forObject:", v17, v11);

        }
      }

    }
    else
    {
      v18 = objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "_startService"));
      v19 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
      v11 = *(NINearbyObject **)(v19 + 40);
      *(_QWORD *)(v19 + 40) = v18;
    }

  }
}

void sub_1001ED244(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1001ED34C(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  unsigned int v6;
  NSObject *v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  int v11;
  int v12;
  const char *v13;
  const char *v14;
  _DWORD *v15;
  int v16;
  id v17;
  int v18;
  uint64_t v19;
  __int16 v20;
  int v21;
  __int16 v22;
  unsigned int v23;
  __int16 v24;
  int v25;
  __int16 v26;
  const char *v27;
  __int16 v28;
  unsigned int v29;

  if (*(_QWORD *)(a1 + 32))
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 32), "objectForKey:"));

    if (v2)
    {
      v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 48), "objectForKey:", *(_QWORD *)(a1 + 32)));
      if (!v3)
        __assert_rtn("-[NIServerFindingService clientWithIdentifier:updatedStateToRunning:dueToTimeout:]_block_invoke", "NIServerFindingSession.mm", 566, "previousRunState != nil");
      v4 = *(void **)(*(_QWORD *)(a1 + 40) + 48);
      v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 48)));
      objc_msgSend(v4, "setObject:forKey:", v5, *(_QWORD *)(a1 + 32));

      v6 = objc_msgSend(*(id *)(a1 + 40), "_isAnyClientRunning");
      v7 = (id)qword_10085F520;
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        v8 = *(_QWORD *)(a1 + 32);
        v9 = *(unsigned __int8 *)(a1 + 48);
        v10 = objc_msgSend(v3, "BOOLValue");
        v11 = *(unsigned __int8 *)(a1 + 49);
        v12 = *(_DWORD *)(*(_QWORD *)(a1 + 40) + 56);
        v13 = "Idle";
        if (v12 == 1)
          v13 = "Running";
        v18 = 138544642;
        if (v12 == 2)
          v14 = "Paused";
        else
          v14 = v13;
        v19 = v8;
        v20 = 1026;
        v21 = v9;
        v22 = 1026;
        v23 = v10;
        v24 = 1026;
        v25 = v11;
        v26 = 2082;
        v27 = v14;
        v28 = 1026;
        v29 = v6;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#find-ses,Service client %{public}@ updated its run state to %{public}d (previous %{public}d) due to timeout %{public}d. Service state: %{public}s. Is any client running %{public}d", (uint8_t *)&v18, 0x2Eu);
      }

      v15 = *(_DWORD **)(a1 + 40);
      v16 = v15[14];
      switch(v16)
      {
        case 2:
          goto LABEL_14;
        case 1:
          if ((v6 & 1) == 0)
            objc_msgSend(v15, "_pauseServiceDueToClientTimeout:", *(unsigned __int8 *)(a1 + 49));
          break;
        case 0:
LABEL_14:
          if (v6)
            v17 = objc_msgSend(v15, "_startService");
          break;
      }

    }
  }
}

void sub_1001ED558(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1001ED618(uint64_t a1)
{
  void *v2;
  NSObject *v3;
  int v4;
  uint64_t v5;
  unsigned int v6;
  id v7;
  id *v8;
  unsigned int v9;
  NSObject *v10;
  uint64_t v11;
  int v12;
  const char *v13;
  const char *v14;
  _DWORD *v15;
  char v16;
  id v17;
  void *v18;
  _BYTE v19[12];
  __int16 v20;
  _BYTE v21[10];
  unsigned int v22;

  if (*(_QWORD *)(a1 + 32))
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 40), "objectForKey:"));

    if (v2)
    {
      v3 = (id)qword_10085F520;
      if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
      {
        v4 = *(unsigned __int8 *)(a1 + 48);
        v5 = *(_QWORD *)(a1 + 32);
        v6 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 32), "count");
        *(_DWORD *)v19 = 138543874;
        *(_QWORD *)&v19[4] = v5;
        v20 = 1026;
        *(_DWORD *)v21 = v4;
        *(_WORD *)&v21[4] = 1026;
        *(_DWORD *)&v21[6] = v6;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#find-ses,Service removing client %{public}@ due to timeout %{public}d (%{public}d clients before removal)", v19, 0x18u);
      }

      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 32), "removeObjectForKey:", *(_QWORD *)(a1 + 32));
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 40), "removeObjectForKey:", *(_QWORD *)(a1 + 32));
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 48), "removeObjectForKey:", *(_QWORD *)(a1 + 32));
      v7 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 32), "count");
      v8 = *(id **)(a1 + 40);
      if (v7)
      {
        v9 = objc_msgSend(v8, "_isAnyClientRunning");
        v10 = qword_10085F520;
        if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
        {
          v11 = *(_QWORD *)(a1 + 32);
          v12 = *(_DWORD *)(*(_QWORD *)(a1 + 40) + 56);
          v13 = "Idle";
          if (v12 == 1)
            v13 = "Running";
          *(_DWORD *)v19 = 138543874;
          if (v12 == 2)
            v14 = "Paused";
          else
            v14 = v13;
          *(_QWORD *)&v19[4] = v11;
          v20 = 2082;
          *(_QWORD *)v21 = v14;
          *(_WORD *)&v21[8] = 1026;
          v22 = v9;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#find-ses,Update service after removing client %{public}@. Service state: %{public}s. Is any client running %{public}d", v19, 0x1Cu);
        }
        v15 = *(_DWORD **)(a1 + 40);
        if (v15[14] == 1)
          v16 = v9;
        else
          v16 = 1;
        if ((v16 & 1) == 0)
        {
          objc_msgSend(v15, "_pauseServiceDueToClientTimeout:", *(unsigned __int8 *)(a1 + 48));
          v15 = *(_DWORD **)(a1 + 40);
        }
        objc_msgSend(v15, "_processUpdatedCommonConfigurationIfNecessary", *(_QWORD *)v19);
      }
      else
      {
        v17 = v8[11];
        objc_msgSend(*(id *)(a1 + 40), "_resetServiceStateForOperation:", 2);
        v18 = (void *)objc_claimAutoreleasedReturnValue(+[NIServerFindingServicePool sharedInstance](NIServerFindingServicePool, "sharedInstance"));
        objc_msgSend(v18, "setService:forToken:", 0, v17);

      }
    }
  }
}

void sub_1001ED868(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1001ED914(uint64_t a1)
{
  void *v2;
  void *v3;
  NINearbyObject *v4;
  void *v5;
  void *v6;
  id v7;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 104), "advertisingPeers"));
  v7 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectForKey:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 88)));

  v3 = v7;
  if (v7)
  {
    v4 = -[NINearbyObject initWithToken:]([NINearbyObject alloc], "initWithToken:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 88));
    v5 = *(void **)(a1 + 40);
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "byteRepresentation"));
    objc_msgSend(v5, "serviceDidGenerateShareableConfigurationData:forObject:", v6, v4);

    v3 = v7;
  }

}

void sub_1001ED9C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  v12 = v10;

  _Unwind_Resume(a1);
}

id sub_1001EDAA4(uint64_t a1)
{
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "setObject:forKey:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
  return objc_msgSend(*(id *)(a1 + 32), "_processUpdatedCommonConfigurationIfNecessary");
}

void sub_1001EDB50(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  double v4;
  double v5;
  double v6;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(void **)(v2 + 160);
  if (v3)
  {
    objc_msgSend(v3, "timestamp");
    v5 = v4;
    objc_msgSend(*(id *)(a1 + 40), "timestamp");
    if (v5 >= v6)
      return;
    v2 = *(_QWORD *)(a1 + 32);
  }
  objc_msgSend(*(id *)(v2 + 120), "acceptVisionInput:", *(_QWORD *)(a1 + 40));
  objc_storeStrong((id *)(*(_QWORD *)(a1 + 32) + 160), *(id *)(a1 + 40));
}

void sub_1001EDD14(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

_QWORD *sub_1001EDD3C(_QWORD *result)
{
  uint64_t v1;

  v1 = result[4];
  if (*(_QWORD *)(v1 + 88))
    return objc_msgSend(*(id *)(v1 + 104), "processAdvertisement:receivedOOBFromPeer:", result[5]);
  return result;
}

void sub_1001EDE70(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_QWORD *sub_1001EDE88(_QWORD *result)
{
  uint64_t v1;

  v1 = result[4];
  if (*(_QWORD *)(v1 + 88))
    return objc_msgSend(*(id *)(v1 + 104), "processLostEventReceivedOOBFromPeer:");
  return result;
}

void sub_1001EDFAC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id sub_1001EDFC8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[11];
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;

  objc_msgSend(*(id *)(a1 + 32), "latitude");
  v28 = v2;
  objc_msgSend(*(id *)(a1 + 32), "longitude");
  v27 = v3;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "timestamp"));
  objc_msgSend(v4, "timeIntervalSinceReferenceDate");
  v26 = v5;
  objc_msgSend(*(id *)(a1 + 32), "course");
  v7 = v6;
  objc_msgSend(*(id *)(a1 + 32), "courseAccuracy");
  v9 = v8;
  objc_msgSend(*(id *)(a1 + 32), "speed");
  v11 = v10;
  objc_msgSend(*(id *)(a1 + 32), "speedAccuracy");
  v13 = v12;
  objc_msgSend(*(id *)(a1 + 32), "horizontalAccuracy");
  v15 = v14;
  objc_msgSend(*(id *)(a1 + 32), "verticalAccuracy");
  v17 = v16;
  objc_msgSend(*(id *)(a1 + 32), "altitude");
  v19 = v18;
  objc_msgSend(*(id *)(a1 + 32), "ellipsoidalAltitude");
  v21 = v20;
  v22 = objc_msgSend(*(id *)(a1 + 32), "floor");
  v23 = objc_msgSend(*(id *)(a1 + 32), "locationType");
  v24 = objc_msgSend(*(id *)(a1 + 32), "signalEnvironment");
  v29[0] = v28;
  v29[1] = v27;
  v29[2] = v26;
  v29[3] = v7;
  v29[4] = v9;
  v29[5] = v11;
  v29[6] = v13;
  v29[7] = v15;
  v29[8] = v17;
  v29[9] = v19;
  v29[10] = v21;
  v30 = v22;
  v31 = v23;
  v32 = v24;

  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 120), "acceptSelfLocationData:", v29);
}

void sub_1001EE104(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1001EE20C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id sub_1001EE228(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  _QWORD v11[4];

  objc_msgSend(*(id *)(a1 + 32), "magneticHeading");
  v3 = v2;
  objc_msgSend(*(id *)(a1 + 32), "trueHeading");
  v5 = v4;
  objc_msgSend(*(id *)(a1 + 32), "headingAccuracy");
  v7 = v6;
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "timestamp"));
  objc_msgSend(v8, "timeIntervalSinceReferenceDate");
  v11[0] = v3;
  v11[1] = v5;
  v11[2] = v7;
  v11[3] = v9;

  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 120), "acceptHeadingData:", v11);
}

void sub_1001EE2B0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1001EE42C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

id sub_1001EE44C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[11];
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;

  objc_msgSend(*(id *)(a1 + 32), "latitude");
  v28 = v2;
  objc_msgSend(*(id *)(a1 + 32), "longitude");
  v27 = v3;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "timestamp"));
  objc_msgSend(v4, "timeIntervalSinceReferenceDate");
  v26 = v5;
  objc_msgSend(*(id *)(a1 + 32), "course");
  v7 = v6;
  objc_msgSend(*(id *)(a1 + 32), "courseAccuracy");
  v9 = v8;
  objc_msgSend(*(id *)(a1 + 32), "speed");
  v11 = v10;
  objc_msgSend(*(id *)(a1 + 32), "speedAccuracy");
  v13 = v12;
  objc_msgSend(*(id *)(a1 + 32), "horizontalAccuracy");
  v15 = v14;
  objc_msgSend(*(id *)(a1 + 32), "verticalAccuracy");
  v17 = v16;
  objc_msgSend(*(id *)(a1 + 32), "altitude");
  v19 = v18;
  objc_msgSend(*(id *)(a1 + 32), "ellipsoidalAltitude");
  v21 = v20;
  v22 = objc_msgSend(*(id *)(a1 + 32), "floor");
  v23 = objc_msgSend(*(id *)(a1 + 32), "locationType");
  v24 = objc_msgSend(*(id *)(a1 + 32), "signalEnvironment");
  v29[0] = v28;
  v29[1] = v27;
  v29[2] = v26;
  v29[3] = v7;
  v29[4] = v9;
  v29[5] = v11;
  v29[6] = v13;
  v29[7] = v15;
  v29[8] = v17;
  v29[9] = v19;
  v29[10] = v21;
  v30 = v22;
  v31 = v23;
  v32 = v24;

  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 120), "acceptPeerLocationData:forPeer:", v29, *(_QWORD *)(a1 + 48));
}

void sub_1001EE588(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1001EF2C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  void *v28;

  _Unwind_Resume(a1);
}

void sub_1001EF72C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1001EF754(uint64_t a1)
{
  void *v1;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v1 = (void *)*((_QWORD *)WeakRetained + 12);
    *((_QWORD *)WeakRetained + 12) = 0;

    if (objc_msgSend(*((id *)WeakRetained + 4), "count"))
    {
      if ((objc_msgSend(WeakRetained, "_isAnyClientRunning") & 1) == 0)
        objc_msgSend(WeakRetained, "_resetServiceStateForOperation:", 0);
    }
  }

}

void sub_1001EF7C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1001EF984(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1001EFAD8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1001EFBC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1001EFBD8(uint64_t a1, uint64_t a2, void *a3, _BYTE *a4)
{
  id result;

  result = objc_msgSend(a3, "BOOLValue");
  if ((_DWORD)result)
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
    *a4 = 1;
  }
  return result;
}

void sub_1001F01D8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id sub_1001F02A8(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "serviceDidRemoveNearbyObject:", *(_QWORD *)(a1 + 32));
}

void sub_1001F054C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1001F05BC(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;

  v9 = a2;
  v5 = a3;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 72), "objectForKeyedSubscript:", v9));

  if (v6)
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 72), "objectForKeyedSubscript:", v9));
    objc_msgSend(v7, "timeIntervalSinceDate:", *(_QWORD *)(a1 + 40));
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:"));
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 72), "setObject:forKeyedSubscript:", v8, v5);

  }
}

void sub_1001F0678(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1001F06A8(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  id v5;
  void *v6;
  id v7;

  v7 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 72), "objectForKeyedSubscript:"));

  if (v3)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 72), "objectForKeyedSubscript:", v7));
    v5 = sub_1002B6B04(v4);
    v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 72), "setObject:forKeyedSubscript:", v6, v7);

  }
}

void sub_1001F0740(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1001F076C(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  id v7;

  v7 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 72), "objectForKeyedSubscript:"));

  if (v3)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 72), "objectForKeyedSubscript:", v7));
    objc_msgSend(v4, "doubleValue");
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%0.1f s"), v5));
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 72), "setObject:forKeyedSubscript:", v6, v7);

  }
}

void sub_1001F0820(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1001F084C(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  id v7;

  v7 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 72), "objectForKeyedSubscript:"));

  if (v3)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 72), "objectForKeyedSubscript:", v7));
    objc_msgSend(v4, "doubleValue");
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%0.2f m"), v5));
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 72), "setObject:forKeyedSubscript:", v6, v7);

  }
}

void sub_1001F0900(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1001F0AEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_10001AE68((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1001F0BA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;
  void *v15;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1001F0BC4(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id *WeakRetained;
  double v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD v41[14];

  v5 = a2;
  v6 = a3;
  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  if (!WeakRetained)
    goto LABEL_12;
  if (v6 && os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
  {
    sub_1003DB1EC();
    if (v5)
    {
LABEL_5:
      objc_msgSend(v5, "timestamp");
      v9 = sub_10028D4C0((uint64_t)(WeakRetained + 27), v8);
      if (v10)
      {
        v11 = v9;
        objc_msgSend(v5, "userAcceleration");
        v40 = v12;
        objc_msgSend(v5, "userAcceleration");
        v39 = v13;
        objc_msgSend(v5, "userAcceleration");
        v38 = v14;
        objc_msgSend(v5, "rotationRate");
        v37 = v15;
        objc_msgSend(v5, "rotationRate");
        v17 = v16;
        objc_msgSend(v5, "rotationRate");
        v19 = v18;
        v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "attitude"));
        objc_msgSend(v20, "quaternion");
        v22 = v21;
        v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "attitude"));
        objc_msgSend(v23, "quaternion");
        v25 = v24;
        v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "attitude"));
        objc_msgSend(v26, "quaternion");
        v28 = v27;
        v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "attitude"));
        objc_msgSend(v29, "quaternion");
        v31 = v30;
        objc_msgSend(v5, "gravity");
        v33 = v32;
        objc_msgSend(v5, "gravity");
        v35 = v34;
        objc_msgSend(v5, "gravity");
        v41[0] = v11;
        v41[1] = v40;
        v41[2] = v39;
        v41[3] = v38;
        v41[4] = v37;
        v41[5] = v17;
        v41[6] = v19;
        v41[7] = v22;
        v41[8] = v25;
        v41[9] = v28;
        v41[10] = v31;
        v41[11] = v33;
        v41[12] = v35;
        v41[13] = v36;

        objc_msgSend(WeakRetained[15], "acceptDeviceMotionInput:", v41);
      }
      else if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
      {
        sub_1003DB1C0();
      }
      goto LABEL_12;
    }
  }
  else if (v5)
  {
    goto LABEL_5;
  }
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
    sub_1003DB194();
LABEL_12:

}

void sub_1001F0E00(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1001F0F28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;
  void *v15;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1001F0F48(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id *WeakRetained;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  _QWORD v15[3];

  v5 = a2;
  v6 = a3;
  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    if (v6 && os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
    {
      sub_1003DB278();
      if (v5)
        goto LABEL_5;
    }
    else if (v5)
    {
LABEL_5:
      objc_msgSend(v5, "timestamp");
      v9 = v8;
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "relativeAltitude"));
      objc_msgSend(v10, "doubleValue");
      v12 = v11;
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "pressure"));
      objc_msgSend(v13, "doubleValue");
      v15[0] = v9;
      v15[1] = v12;
      v15[2] = v14;

      objc_msgSend(WeakRetained[15], "acceptAltimeterData:", v15);
      goto LABEL_9;
    }
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
      sub_1003DB24C();
  }
LABEL_9:

}

void sub_1001F1060(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v6 = v5;

  _Unwind_Resume(a1);
}

void sub_1001F114C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;
  void *v15;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1001F116C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id *WeakRetained;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  void *v36;
  double v37;
  double v38;
  void *v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  BOOL v52;
  BOOL v53;
  char v54;
  double v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  double v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char v81;

  v5 = a2;
  v6 = a3;
  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  if (!WeakRetained)
    goto LABEL_52;
  if (v6 && os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
  {
    sub_1003DB338();
    if (v5)
      goto LABEL_5;
  }
  else if (v5)
  {
LABEL_5:
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "deltaPositionX"));

    if (v8)
    {
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "deltaPositionX"));
      objc_msgSend(v9, "doubleValue");
      v61 = v10;

      v11 = 1;
    }
    else
    {
      v11 = 0;
      v61 = 0;
    }
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "deltaPositionY"));

    if (v12)
    {
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "deltaPositionY"));
      objc_msgSend(v13, "doubleValue");
      v60 = v14;

      v15 = 1;
    }
    else
    {
      v15 = 0;
      v60 = 0;
    }
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "deltaPositionZ"));

    if (v16)
    {
      v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "deltaPositionZ"));
      objc_msgSend(v17, "doubleValue");
      v19 = v18;

      v20 = 1;
    }
    else
    {
      v20 = 0;
      v19 = 0;
    }
    v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "deltaVelocityX"));

    if (v21)
    {
      v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "deltaVelocityX"));
      objc_msgSend(v22, "doubleValue");
      v24 = v23;

      v25 = 1;
    }
    else
    {
      v25 = 0;
      v24 = 0;
    }
    v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "deltaVelocityY"));

    if (v26)
    {
      v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "deltaVelocityY"));
      objc_msgSend(v27, "doubleValue");
      v29 = v28;

      v59 = 1;
    }
    else
    {
      v59 = 0;
      v29 = 0;
    }
    v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "deltaVelocityZ"));

    v57 = v20;
    v58 = v15;
    v56 = v25;
    if (v30)
    {
      v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "deltaVelocityZ"));
      objc_msgSend(v31, "doubleValue");
      v33 = v32;

      v34 = 1;
    }
    else
    {
      v34 = 0;
      v33 = 0;
    }
    v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "quaternionW"));

    if (v35)
    {
      v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "quaternionW"));
      objc_msgSend(v36, "doubleValue");
      v38 = v37;

    }
    else
    {
      v38 = 0.0;
    }
    v39 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "quaternionX"));

    if (v39)
    {
      v40 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "quaternionX"));
      objc_msgSend(v40, "doubleValue");
      v42 = v41;

    }
    else
    {
      v42 = 0;
    }
    v43 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "quaternionY"));

    if (v43)
    {
      v44 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "quaternionY"));
      objc_msgSend(v44, "doubleValue");
      v46 = v45;

    }
    else
    {
      v46 = 0;
    }
    v47 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "quaternionZ"));

    if (v47)
    {
      v48 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "quaternionZ"));
      objc_msgSend(v48, "doubleValue");
      v50 = v49;

    }
    else
    {
      v50 = 0;
    }
    objc_msgSend(v5, "timestamp");
    v62 = v51;
    v63 = 0;
    if (v35)
      v52 = v39 == 0;
    else
      v52 = 1;
    v53 = v52 || v43 == 0;
    v64 = 0;
    v54 = !v53;
    v65 = v61;
    v55 = 0.0;
    if ((v54 & (v47 != 0)) != 0)
      v55 = v38;
    v66 = v11;
    v67 = v60;
    v68 = v58;
    v69 = v19;
    v70 = v57;
    v71 = v24;
    v72 = v56;
    v73 = v29;
    v74 = v59;
    v75 = v33;
    v76 = v34;
    v77 = v55;
    v78 = v42;
    v79 = v46;
    v80 = v50;
    v81 = v54 & (v47 != 0);
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
      sub_1003DB2D8();
    objc_msgSend(WeakRetained[15], "acceptDevicePDRInput:", &v62);
    goto LABEL_52;
  }
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
    sub_1003DB194();
LABEL_52:

}

void sub_1001F15B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1001F17CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1001F1904(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1001F1A2C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1001F1C90(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

id sub_1001F1D14(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "serviceDidGenerateShareableConfigurationData:forObject:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
}

void sub_1001F1DFC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1001F1EF0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1001F1FE4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1001F21AC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1001F22B8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1001F25E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1001F2778(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1001F289C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1001F29B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1001F2C18(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1001F2D14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1001F2D7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1001F2DE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1001F2E4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1001F2EBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1001F2F2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1001F3848(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1001F3AFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  void *v15;

  sub_10001AE68((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_1001F3E6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1001F4060(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id a11)
{
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1001F40A8(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  float v5;
  void *v6;
  float v7;
  uint8_t v8[16];

  v3 = a2;
  if (objc_msgSend(v3, "revokeFindingExperience"))
  {
    objc_msgSend(*(id *)(a1 + 32), "_removeAlgorithmOutputFlagsFromPeerTrackingState:", 255);
    v4 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#find-ses,Revoking finding experience", v8, 2u);
    }
  }
  else
  {
    objc_msgSend(v3, "distance");
    if (v5 != NINearbyObjectDistanceNotAvailable)
    {
      v6 = *(void **)(*(_QWORD *)(a1 + 32) + 280);
      objc_msgSend(v3, "distance");
      objc_msgSend(v6, "updateWithMostRecentDistance:", v7);
      objc_msgSend(*(id *)(a1 + 32), "_addAlgorithmOutputFlagsToPeerTrackingState:", 1);
    }
  }

}

void sub_1001F4180(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1001F4274(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1001F437C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1001F45B0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1001F46E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1001F4820(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1001F4880(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1001F4A30(id a1)
{
  NIServerFindingServiceObserverRelay *v1;
  void *v2;

  v1 = objc_alloc_init(NIServerFindingServiceObserverRelay);
  v2 = (void *)qword_1008590A0;
  qword_1008590A0 = (uint64_t)v1;

}

void sub_1001F4AE0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1001F4C40(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1001F4D90(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1001F4E04(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1001F4F1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  std::mutex *v11;

  std::mutex::unlock(v11);

  _Unwind_Resume(a1);
}

void sub_1001F5068(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,id a26)
{
  _Block_object_dispose(&a21, 8);

  _Unwind_Resume(a1);
}

void sub_1001F508C(uint64_t a1, void *a2)
{
  void *v3;
  id v4;

  v4 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "objectForKey:"));

  if (!v3)
    objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "addObject:", v4);

}

void sub_1001F50F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1001F5104(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  int v5;
  id v6;

  v3 = a2;
  v4 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    v5 = 138543362;
    v6 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#find-ses,Remove stale observer from relay: %{public}@", (uint8_t *)&v5, 0xCu);
  }
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "removeObjectForKey:", v3);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "removeObjectForKey:", v3);

}

void sub_1001F51D8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1001F54FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1001F57F0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1001F5B40(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1001F5EA4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1001F5FA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  _Unwind_Resume(exception_object);
}

void sub_1001F62B0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1001F64FC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1001F6520(uint64_t a1)
{
  void *v1;
  _QWORD *WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v1 = (void *)WeakRetained[11];
    WeakRetained[11] = 0;

    objc_msgSend(WeakRetained, "_resetSessionStateForOperation:", 1);
  }

}

void sub_1001F6578(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1001F663C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1001F6A48(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_1001F6B90(uint64_t a1)
{
  id v2;
  void *v3;
  void *v4;
  objc_super v5;

  v5.receiver = *(id *)(a1 + 32);
  v5.super_class = (Class)NIServerFindingSession;
  v2 = objc_msgSendSuper2(&v5, "resourcesManager");
  v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "remote"));
  objc_msgSend(v4, "didGenerateShareableConfigurationData:forObject:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));

}

void sub_1001F6C00(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1001F6CA0(uint64_t a1)
{
  id v2;
  void *v3;
  void *v4;
  objc_super v5;

  v5.receiver = *(id *)(a1 + 32);
  v5.super_class = (Class)NIServerFindingSession;
  v2 = objc_msgSendSuper2(&v5, "resourcesManager");
  v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "remote"));
  objc_msgSend(v4, "didDiscoverNearbyObject:", *(_QWORD *)(a1 + 40));

}

void sub_1001F6D10(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1001F6DB0(uint64_t a1)
{
  id v2;
  void *v3;
  void *v4;
  void *v5;
  objc_super v6;
  uint64_t v7;

  v6.receiver = *(id *)(a1 + 32);
  v6.super_class = (Class)NIServerFindingSession;
  v2 = objc_msgSendSuper2(&v6, "resourcesManager");
  v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "remote"));
  v7 = *(_QWORD *)(a1 + 40);
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v7, 1));
  objc_msgSend(v4, "didRemoveNearbyObjects:withReason:", v5, 0);

}

void sub_1001F6E7C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1001F6F34(uint64_t a1)
{
  _BYTE *v2;
  NSObject *v3;
  uint64_t v4;
  void *v5;
  float v6;
  id v7;
  void *v8;
  void *v9;
  objc_super v10;
  uint8_t buf[4];
  uint64_t v12;
  __int16 v13;
  double v14;

  if (objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 104), "preferredUpdateRate") != (id)3)
  {
    v2 = *(_BYTE **)(a1 + 32);
    if (v2[57])
    {
      if (!v2[58])
      {
        v2[58] = 1;
        v3 = (id)qword_10085F520;
        if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
        {
          v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 80);
          v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "firstObject"));
          objc_msgSend(v5, "distance");
          *(_DWORD *)buf = 138543618;
          v12 = v4;
          v13 = 2050;
          v14 = v6;
          _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#find-ses,Delivered first update [%{public}@]. Range: %{public}0.2f", buf, 0x16u);

        }
        v2 = *(_BYTE **)(a1 + 32);
      }
      v10.receiver = v2;
      v10.super_class = (Class)NIServerFindingSession;
      v7 = objc_msgSendSuper2(&v10, "resourcesManager");
      v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "remote"));
      objc_msgSend(v9, "didUpdateNearbyObjects:", *(_QWORD *)(a1 + 40));

    }
  }
}

void sub_1001F70A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1001F7190(uint64_t a1)
{
  id v2;
  void *v3;
  void *v4;
  objc_super v5;

  if (objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 104), "preferredUpdateRate") != (id)3)
  {
    if (*(_BYTE *)(*(_QWORD *)(a1 + 32) + 57))
    {
      v5.receiver = *(id *)(a1 + 32);
      v5.super_class = (Class)NIServerFindingSession;
      v2 = objc_msgSendSuper2(&v5, "resourcesManager");
      v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
      v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "remote"));
      objc_msgSend(v4, "didUpdateAlgorithmState:forObject:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));

    }
  }
}

void sub_1001F722C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1001F7320(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v6 = v5;

  _Unwind_Resume(a1);
}

void sub_1001F73FC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1001F74C0(uint64_t result, uint64_t a2, uint64_t a3, float a4)
{
  *(float *)a3 = a4;
  *(_QWORD *)(a3 + 4) = result;
  *(_WORD *)(a3 + 12) = 2113;
  *(_QWORD *)(a3 + 14) = a2;
  return result;
}

void sub_1001F74D8()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_100850448);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_100850448))
    {
      sub_10000BF04(qword_100850430, "PRRoseProviderNetworkListener");
      __cxa_atexit((void (*)(void *))&std::string::~string, qword_100850430, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_100850448);
    }
  }
}

void sub_1001F7554(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_100850448);
  _Unwind_Resume(a1);
}

void sub_1001F756C()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_100850468);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_100850468))
    {
      sub_10000BF04(&qword_100850450, "com.apple.nearbyd.accessory.download");
      __cxa_atexit((void (*)(void *))&std::string::~string, &qword_100850450, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_100850468);
    }
  }
}

void sub_1001F75E8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_100850468);
  _Unwind_Resume(a1);
}

void sub_1001F7600()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_100850488);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_100850488))
    {
      sub_10000BF04(&qword_100850470, "com.apple.nearbyd.accessory.files");
      __cxa_atexit((void (*)(void *))&std::string::~string, &qword_100850470, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_100850488);
    }
  }
}

void sub_1001F767C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_100850488);
  _Unwind_Resume(a1);
}

void sub_1001F7694()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_1008504A8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1008504A8))
    {
      sub_10000BF04(qword_100850490, "MA_");
      __cxa_atexit((void (*)(void *))&std::string::~string, qword_100850490, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1008504A8);
    }
  }
}

void sub_1001F7710(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1008504A8);
  _Unwind_Resume(a1);
}

void sub_1001F7728()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_1008504C8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1008504C8))
    {
      sub_10000BF04(qword_1008504B0, "MB_");
      __cxa_atexit((void (*)(void *))&std::string::~string, qword_1008504B0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1008504C8);
    }
  }
}

void sub_1001F77A4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1008504C8);
  _Unwind_Resume(a1);
}

void sub_1001F77BC()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_1008504E8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1008504E8))
    {
      sub_10000BF04(qword_1008504D0, "D");
      __cxa_atexit((void (*)(void *))&std::string::~string, qword_1008504D0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1008504E8);
    }
  }
}

void sub_1001F7838(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1008504E8);
  _Unwind_Resume(a1);
}

void sub_1001F7850()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_100850508);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_100850508))
    {
      sub_10000BF04(&qword_1008504F0, "A");
      __cxa_atexit((void (*)(void *))&std::string::~string, &qword_1008504F0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_100850508);
    }
  }
}

void sub_1001F78CC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_100850508);
  _Unwind_Resume(a1);
}

void sub_1001F78E4()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_100850528);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_100850528))
    {
      sub_10000BF04(qword_100850510, "FAS.bin");
      __cxa_atexit((void (*)(void *))&std::string::~string, qword_100850510, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_100850528);
    }
  }
}

void sub_1001F7960(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_100850528);
  _Unwind_Resume(a1);
}

void sub_1001F7978()
{
  unsigned __int8 v0;
  _OWORD *v1;

  v0 = atomic_load((unsigned __int8 *)&qword_100850548);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_100850548))
    {
      qword_100850530 = 0;
      qword_100850538 = 0;
      qword_100850540 = 0;
      v1 = operator new(0x30uLL);
      qword_100850538 = (uint64_t)(v1 + 3);
      qword_100850540 = (uint64_t)(v1 + 3);
      *v1 = xmmword_100472378;
      v1[1] = unk_100472388;
      v1[2] = xmmword_100472398;
      qword_100850530 = (uint64_t)v1;
      __cxa_atexit((void (*)(void *))sub_100009C44, &qword_100850530, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_100850548);
    }
  }
}

void sub_1001F7A18(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_100850548);
  _Unwind_Resume(a1);
}

void sub_1001F7A30()
{
  void *v0;
  _OWORD *v6;
  _OWORD *v7;
  std::string *v8;
  __int128 v9;
  std::string *v10;
  __int128 v11;
  std::string *v12;
  __int128 v13;
  std::string *v14;
  __int128 v15;
  std::string *v16;
  __int128 v17;
  std::string *v18;
  __int128 v19;
  std::string *v20;
  __int128 v21;
  std::string *v22;
  __int128 v23;
  std::string *v24;
  __int128 v25;
  std::string *v26;
  __int128 v27;
  std::string *v28;
  __int128 v29;
  std::string *v30;
  __int128 v31;
  std::string *v32;
  __int128 v33;
  std::string *v34;
  __int128 v35;
  std::string *v36;
  __int128 v37;
  std::string *v38;
  __int128 v39;
  std::string *v40;
  __int128 v41;
  std::string *v42;
  __int128 v43;
  __int128 v44;
  std::string v45;
  std::string v46;

  v0 = objc_autoreleasePoolPush();
  *(_OWORD *)&v46.__r_.__value_.__l.__data_ = xmmword_100472310;
  v46.__r_.__value_.__r.__words[2] = 0x300000003;
  sub_100182284((uint64_t)&unk_100858CC8, (int *)&v46, 3);
  xmmword_100858CE0 = xmmword_10046E050;
  *(_OWORD *)algn_100858CF0 = xmmword_10046E060;
  qword_100858D08 = 0;
  unk_100858D10 = 0;
  qword_100858D00 = 0x3FD999999999999ALL;
  unk_100858D18 = xmmword_10046E070;
  dword_100858D28 = 5;
  qword_100858D30 = 0x4000000000000000;
  dword_100858D38 = 5;
  byte_100858D40 = 0;
  *(_QWORD *)&algn_100858D41[3] = 0x30000000ALL;
  xmmword_100858D50 = xmmword_10046E080;
  unk_100858D60 = xmmword_10046E090;
  xmmword_100858D70 = xmmword_10046E0A0;
  qword_100858D80 = 0x3FE3333333333333;
  dword_100858D88 = 3;
  xmmword_100858D90 = xmmword_10046E0B0;
  unk_100858DA0 = xmmword_10046E090;
  xmmword_100858DB0 = xmmword_10046E080;
  qword_100858DC0 = 0x3FE3333333333333;
  byte_100858DC8 = 0;
  xmmword_100858DD0 = xmmword_10046E0C0;
  unk_100858DE0 = xmmword_10046E0D0;
  __asm { FMOV            V0.2D, #1.0 }
  v44 = _Q0;
  xmmword_100858DF0 = _Q0;
  qword_100858E00 = 0xBFD3333333333333;
  xmmword_100858E08 = xmmword_10046E0E0;
  qword_100858E18 = 0x3E99999A40000000;
  xmmword_100858E20 = xmmword_10046E060;
  qword_100858E38 = 0;
  unk_100858E40 = 0;
  qword_100858E30 = 0x3FD999999999999ALL;
  xmmword_100858E48 = xmmword_10046E070;
  dword_100858E58 = 5;
  qword_100858E60 = 0x4000000000000000;
  dword_100858E68 = 4;
  qword_100858E70 = 0x300000008;
  qword_100858E78 = 0xC04E800000000000;
  v45.__r_.__value_.__r.__words[0] = 0xC04E800000000000;
  sub_10018252C((uint64_t)&unk_100858E80, (double *)&v45, 1);
  xmmword_100858E98 = xmmword_10046E0F0;
  qword_100858EA8 = 0x4024000000000000;
  dword_100858EB0 = 45;
  byte_100858EB4 = 0;
  dword_100858EB8 = 1;
  byte_100858EC0 = 1;
  xmmword_100858EC8 = xmmword_10046E100;
  unk_100858ED8 = xmmword_10046E110;
  xmmword_100858EE8 = v44;
  qword_100858EF8 = 0xC059000000000000;
  xmmword_100858F00 = xmmword_10046E120;
  qword_100858F10 = (uint64_t)vdup_n_s32(0x3DCCCCCDu);
  xmmword_100858F18 = xmmword_10046E060;
  qword_100858F28 = 0x3FD999999999999ALL;
  qword_100858F38 = 0;
  qword_100858F30 = 0;
  xmmword_100858F40 = xmmword_10046E070;
  dword_100858F50 = 5;
  qword_100858F58 = 0x4000000000000000;
  dword_100858F60 = 10;
  qword_100858F68 = 0x4034000000000000;
  dword_100858F70 = 3;
  xmmword_100858F78 = xmmword_10046E130;
  __cxa_atexit((void (*)(void *))sub_100180704, &unk_100858CC8, (void *)&_mh_execute_header);
  qword_100858F90 = 0;
  unk_100858F98 = 0;
  qword_100858F88 = 0;
  v6 = operator new(0x40uLL);
  qword_100858F90 = (uint64_t)(v6 + 4);
  unk_100858F98 = v6 + 4;
  *v6 = xmmword_100472328;
  v6[1] = unk_100472338;
  v6[2] = xmmword_100472348;
  v6[3] = unk_100472358;
  qword_100858F88 = (uint64_t)v6;
  __cxa_atexit((void (*)(void *))sub_1000325D8, &qword_100858F88, (void *)&_mh_execute_header);
  qword_100858FA8 = 0;
  unk_100858FB0 = 0;
  qword_100858FA0 = 0;
  v7 = operator new(0x10uLL);
  qword_100858FA8 = (uint64_t)(v7 + 1);
  unk_100858FB0 = v7 + 1;
  *v7 = xmmword_100472368;
  qword_100858FA0 = (uint64_t)v7;
  __cxa_atexit((void (*)(void *))sub_1000325D8, &qword_100858FA0, (void *)&_mh_execute_header);
  sub_1003610EC(0);
  v8 = std::string::insert(&v45, 0, "reverseLUT_A");
  v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v46.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  v10 = std::string::append(&v46, ".bin");
  v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  qword_100858FC8 = v10->__r_.__value_.__r.__words[2];
  xmmword_100858FB8 = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v46.__r_.__value_.__l.__data_);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_100858FB8, (void *)&_mh_execute_header);
  sub_1003610EC(1);
  v12 = std::string::insert(&v45, 0, "reverseLUT_A");
  v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v46.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  v14 = std::string::append(&v46, ".bin");
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  qword_100858FE0 = v14->__r_.__value_.__r.__words[2];
  xmmword_100858FD0 = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v46.__r_.__value_.__l.__data_);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_100858FD0, (void *)&_mh_execute_header);
  sub_1003610EC(2);
  v16 = std::string::insert(&v45, 0, "reverseLUT_A");
  v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v46.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  v18 = std::string::append(&v46, ".bin");
  v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  qword_100858FF8 = v18->__r_.__value_.__r.__words[2];
  xmmword_100858FE8 = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v46.__r_.__value_.__l.__data_);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_100858FE8, (void *)&_mh_execute_header);
  sub_1003610EC(3);
  v20 = std::string::insert(&v45, 0, "reverseLUT_A");
  v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  v46.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  v22 = std::string::append(&v46, ".bin");
  v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  qword_100859010 = v22->__r_.__value_.__r.__words[2];
  xmmword_100859000 = v23;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v46.__r_.__value_.__l.__data_);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_100859000, (void *)&_mh_execute_header);
  sub_1003610EC(4);
  v24 = std::string::insert(&v45, 0, "reverseLUT_A");
  v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
  v46.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v25;
  v24->__r_.__value_.__l.__size_ = 0;
  v24->__r_.__value_.__r.__words[2] = 0;
  v24->__r_.__value_.__r.__words[0] = 0;
  v26 = std::string::append(&v46, ".bin");
  v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
  qword_100859028 = v26->__r_.__value_.__r.__words[2];
  xmmword_100859018 = v27;
  v26->__r_.__value_.__l.__size_ = 0;
  v26->__r_.__value_.__r.__words[2] = 0;
  v26->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v46.__r_.__value_.__l.__data_);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_100859018, (void *)&_mh_execute_header);
  sub_1003610EC(5);
  v28 = std::string::insert(&v45, 0, "reverseLUT_A");
  v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
  v46.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v29;
  v28->__r_.__value_.__l.__size_ = 0;
  v28->__r_.__value_.__r.__words[2] = 0;
  v28->__r_.__value_.__r.__words[0] = 0;
  v30 = std::string::append(&v46, ".bin");
  v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
  qword_100859040 = v30->__r_.__value_.__r.__words[2];
  xmmword_100859030 = v31;
  v30->__r_.__value_.__l.__size_ = 0;
  v30->__r_.__value_.__r.__words[2] = 0;
  v30->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v46.__r_.__value_.__l.__data_);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_100859030, (void *)&_mh_execute_header);
  sub_1003610EC(6);
  v32 = std::string::insert(&v45, 0, "reverseLUT_A");
  v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
  v46.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v33;
  v32->__r_.__value_.__l.__size_ = 0;
  v32->__r_.__value_.__r.__words[2] = 0;
  v32->__r_.__value_.__r.__words[0] = 0;
  v34 = std::string::append(&v46, ".bin");
  v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
  qword_100859058 = v34->__r_.__value_.__r.__words[2];
  xmmword_100859048 = v35;
  v34->__r_.__value_.__l.__size_ = 0;
  v34->__r_.__value_.__r.__words[2] = 0;
  v34->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v46.__r_.__value_.__l.__data_);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_100859048, (void *)&_mh_execute_header);
  sub_1003610EC(7);
  v36 = std::string::insert(&v45, 0, "reverseLUT_A");
  v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
  v46.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v37;
  v36->__r_.__value_.__l.__size_ = 0;
  v36->__r_.__value_.__r.__words[2] = 0;
  v36->__r_.__value_.__r.__words[0] = 0;
  v38 = std::string::append(&v46, ".bin");
  v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
  qword_100859070 = v38->__r_.__value_.__r.__words[2];
  xmmword_100859060 = v39;
  v38->__r_.__value_.__l.__size_ = 0;
  v38->__r_.__value_.__r.__words[2] = 0;
  v38->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v46.__r_.__value_.__l.__data_);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_100859060, (void *)&_mh_execute_header);
  sub_1003610EC(8);
  v40 = std::string::insert(&v45, 0, "reverseLUT_A");
  v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
  v46.__r_.__value_.__r.__words[2] = v40->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v41;
  v40->__r_.__value_.__l.__size_ = 0;
  v40->__r_.__value_.__r.__words[2] = 0;
  v40->__r_.__value_.__r.__words[0] = 0;
  v42 = std::string::append(&v46, ".bin");
  v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
  qword_100859088 = v42->__r_.__value_.__r.__words[2];
  xmmword_100859078 = v43;
  v42->__r_.__value_.__l.__size_ = 0;
  v42->__r_.__value_.__r.__words[2] = 0;
  v42->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v46.__r_.__value_.__l.__data_);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_100859078, (void *)&_mh_execute_header);
  objc_autoreleasePoolPop(v0);
}

void sub_1001F834C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

void sub_1001F8570(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1001F86A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1001F8778(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1001F8A44(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1001F9050(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20)
{
  void *v20;
  uint64_t v21;
  void *v23;
  void *v24;

  v23 = *(void **)(v21 - 112);
  if (v23)
  {
    *(_QWORD *)(v21 - 104) = v23;
    operator delete(v23);
  }
  if (__p)
    operator delete(__p);
  if (a19)
    operator delete(a19);
  v24 = *(void **)(v21 - 80);
  if (v24)
  {
    *(_QWORD *)(v21 - 72) = v24;
    operator delete(v24);
  }

  _Unwind_Resume(a1);
}

void sub_1001F90EC(unint64_t *a1, unint64_t a2)
{
  unint64_t v2;
  BOOL v3;
  size_t v4;

  v2 = a1[1] - *a1;
  v3 = a2 >= v2;
  v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    sub_10003F150(a1, v4);
  }
  else if (!v3)
  {
    a1[1] = *a1 + a2;
  }
}

void sub_1001F992C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26)
{
  void *v26;
  void *v27;
  uint64_t v28;
  void *v30;
  void *v31;
  void *v32;

  if (__p)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  if (a19)
    operator delete(a19);
  v30 = *(void **)(v28 - 144);
  if (v30)
  {
    *(_QWORD *)(v28 - 136) = v30;
    operator delete(v30);
  }
  v31 = *(void **)(v28 - 112);
  if (v31)
  {
    *(_QWORD *)(v28 - 104) = v31;
    operator delete(v31);
  }
  v32 = *(void **)(v28 - 80);
  if (v32)
  {
    *(_QWORD *)(v28 - 72) = v32;
    operator delete(v32);
  }

  _Unwind_Resume(a1);
}

void sub_1001F9A38(_QWORD *a1, unint64_t a2, _BYTE *a3)
{
  unint64_t v3;
  BOOL v4;
  unint64_t v5;

  v3 = a1[1] - *a1;
  v4 = a2 >= v3;
  v5 = a2 - v3;
  if (v5 != 0 && v4)
  {
    sub_1001F9D10(a1, v5, a3);
  }
  else if (!v4)
  {
    a1[1] = *a1 + a2;
  }
}

void sub_1001F9C74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  void *v12;
  void *v13;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1001F9D10(_QWORD *a1, unint64_t a2, _BYTE *a3)
{
  unint64_t v4;
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  unint64_t v9;
  unint64_t v10;
  size_t v11;
  void *v12;
  _BYTE *v13;
  char *v14;
  char *v15;
  _BYTE *v16;
  _BYTE *v17;
  char v18;

  v4 = a2;
  v7 = (_BYTE *)a1[1];
  v6 = a1[2];
  if (v6 - (uint64_t)v7 >= a2)
  {
    if (a2)
    {
      v13 = &v7[a2];
      do
      {
        *v7++ = *a3;
        --v4;
      }
      while (v4);
      v7 = v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = &v7[-*a1];
    v9 = (unint64_t)&v8[a2];
    if ((uint64_t)&v8[a2] < 0)
      sub_100026E7C();
    v10 = v6 - *a1;
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x3FFFFFFFFFFFFFFFLL)
      v11 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v11 = v9;
    if (v11)
      v12 = operator new(v11);
    else
      v12 = 0;
    v14 = &v8[(_QWORD)v12];
    v15 = &v8[(_QWORD)v12 + v4];
    v16 = &v8[(_QWORD)v12];
    do
    {
      *v16++ = *a3;
      --v4;
    }
    while (v4);
    v17 = (_BYTE *)*a1;
    if (v7 != (_BYTE *)*a1)
    {
      do
      {
        v18 = *--v7;
        *--v14 = v18;
      }
      while (v7 != v17);
      v7 = (_BYTE *)*a1;
    }
    *a1 = v14;
    a1[1] = v15;
    a1[2] = (char *)v12 + v11;
    if (v7)
      operator delete(v7);
  }
}

void sub_1001F9E40(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = a1;
}

uint64_t sub_1001F9E4C(uint64_t result, int a2, uint64_t a3, float a4)
{
  *(float *)a3 = a4;
  *(_QWORD *)(a3 + 4) = result;
  *(_WORD *)(a3 + 12) = 1024;
  *(_DWORD *)(a3 + 14) = a2;
  *(_WORD *)(a3 + 18) = 1024;
  return result;
}

void sub_1001F9E68(void *a1@<X0>, const char *a2@<X3>, uint8_t *a3@<X4>, NSObject *a4@<X8>)
{
  _os_log_error_impl(a1, a4, OS_LOG_TYPE_ERROR, a2, a3, 0x18u);
}

void sub_1001F9F8C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1001FA07C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1001FA198(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1001FA2F4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1001FA38C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1001FA51C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1001FA59C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v7;
  id v8;
  _QWORD *v9;
  uint64_t v10;
  const char *v12;
  int v13;
  _BYTE v14[24];
  _BYTE *v15;

  v7 = a2;
  *(_DWORD *)a1 = *((_DWORD *)sub_100004784() + 144);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  sub_100027674(a1 + 24, a4);
  v8 = v7;
  *(_QWORD *)(a1 + 56) = v8;
  sub_100027674((uint64_t)v14, a3);
  sub_1001FC428(a1 + 64, (uint64_t)v14);
  v9 = v15;
  if (v15 == v14)
  {
    v10 = 4;
    v9 = v14;
  }
  else
  {
    if (!v15)
      goto LABEL_6;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_6:
  *(_QWORD *)(a1 + 96) = 0;
  *(_BYTE *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  if (!*(_QWORD *)(a1 + 56))
  {
    v12 = "fDispatchQueue";
    v13 = 53;
    goto LABEL_13;
  }
  if (!*(_QWORD *)(a1 + 88))
  {
    v12 = "fInjectIsoCb";
    v13 = 54;
    goto LABEL_13;
  }
  if (!*(_QWORD *)(a1 + 48))
  {
    v12 = "fGetIsoCb";
    v13 = 55;
LABEL_13:
    __assert_rtn("PRIsoQueryManager", "PRIsoQueryManager.mm", v13, v12);
  }

  return a1;
}

void sub_1001FA6F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  uint64_t v13;
  void *v14;
  _QWORD *v15;
  char *v16;
  char *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;

  v18 = a13;
  if (a13 == v16)
  {
    v19 = 4;
    v18 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v19 = 5;
  }
  (*(void (**)(char *))(*(_QWORD *)v18 + 8 * v19))(v18);
LABEL_6:

  v20 = *(_QWORD **)(v13 + 48);
  if (v20 == v15)
  {
    v21 = 4;
    v20 = v15;
  }
  else
  {
    if (!v20)
      goto LABEL_11;
    v21 = 5;
  }
  (*(void (**)(void))(*v20 + 8 * v21))();
LABEL_11:

  _Unwind_Resume(a1);
}

uint64_t sub_1001FA7D8(uint64_t a1)
{
  void *v2;
  NSObject *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD block[5];

  sub_1001FA8CC(a1);
  v2 = *(void **)(a1 + 112);
  if (v2)
  {
    v3 = *(NSObject **)(a1 + 56);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1001FA924;
    block[3] = &unk_1007FA668;
    block[4] = a1;
    dispatch_sync(v3, block);
    v2 = *(void **)(a1 + 112);
  }

  v4 = *(_QWORD **)(a1 + 88);
  if (v4 == (_QWORD *)(a1 + 64))
  {
    v5 = 4;
    v4 = (_QWORD *)(a1 + 64);
  }
  else
  {
    if (!v4)
      goto LABEL_8;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_8:

  v6 = *(_QWORD **)(a1 + 48);
  if (v6 == (_QWORD *)(a1 + 24))
  {
    v7 = 4;
    v6 = (_QWORD *)(a1 + 24);
    goto LABEL_12;
  }
  if (v6)
  {
    v7 = 5;
LABEL_12:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }

  return a1;
}

void sub_1001FA8CC(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = *(void **)(a1 + 96);
  if (v2)
  {
    objc_msgSend(v2, "enumerateObjectsUsingBlock:", &stru_10080E4E0);
    objc_msgSend(*(id *)(a1 + 96), "removeAllObjects");
  }
  v3 = *(void **)(a1 + 16);
  if (v3)
  {
    objc_msgSend(v3, "invalidate");
    v4 = *(void **)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;

  }
}

void sub_1001FA924(uint64_t a1)
{
  sub_1001FA92C(*(_QWORD *)(a1 + 32));
}

void sub_1001FA92C(uint64_t a1)
{
  NSObject *v2;
  void *v3;
  uint8_t v4[16];

  if (*(_QWORD *)(a1 + 112))
  {
    v2 = qword_1008590B0;
    if (os_log_type_enabled((os_log_t)qword_1008590B0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#regulatory,isoquerymgr,PRIsoQueryManager: Cancelling fNoDeviceFoundErrorSubmissionTimer", v4, 2u);
    }
    dispatch_source_cancel(*(dispatch_source_t *)(a1 + 112));
    v3 = *(void **)(a1 + 112);
    *(_QWORD *)(a1 + 112) = 0;

  }
}

void sub_1001FA9B0(uint64_t a1)
{
  id v2;
  void *v3;
  void *v4;
  NSObject *v5;
  uint8_t v6[8];
  _QWORD v7[5];

  if (os_log_type_enabled((os_log_t)qword_1008590B0, OS_LOG_TYPE_DEBUG))
    sub_1003DC1CC();
  v2 = objc_alloc_init((Class)RPCompanionLinkClient);
  v3 = *(void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v2;

  objc_msgSend(*(id *)(a1 + 16), "setInvalidationHandler:", &stru_10080E2E8);
  v4 = *(void **)(a1 + 16);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1001FAB0C;
  v7[3] = &unk_10080E308;
  v7[4] = a1;
  objc_msgSend(v4, "registerRequestID:options:handler:", CFSTR("com.apple.proximity.regulatoryrappportlink"), 0, v7);
  v5 = qword_1008590B0;
  if (os_log_type_enabled((os_log_t)qword_1008590B0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#regulatory,isoquerymgr,registerIsoQueryListener request handler registered", v6, 2u);
  }
}

void sub_1001FAAAC(id a1)
{
  NSObject *v1;
  uint8_t v2[16];

  v1 = qword_1008590B0;
  if (os_log_type_enabled((os_log_t)qword_1008590B0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v2 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "#regulatory,isoquerymgr,isoQueryListener client invalidation", v2, 2u);
  }
}

void sub_1001FAB0C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  void **v11;
  void *v12;
  void *v13;
  NSObject *v14;
  void **v15;
  void *__p[2];
  char v17;
  uint8_t buf[4];
  void **v19;
  _QWORD v20[3];
  _QWORD v21[3];

  v7 = a2;
  v8 = a3;
  v9 = a4;
  v10 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 48);
  if (!v10)
    sub_100027BC4();
  (*(void (**)(void **__return_ptr))(*(_QWORD *)v10 + 48))(__p);
  if (v17 >= 0)
    v11 = __p;
  else
    v11 = (void **)__p[0];
  v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithCString:encoding:](NSString, "stringWithCString:encoding:", v11, 4));
  v20[0] = CFSTR("name");
  v20[1] = CFSTR("version");
  v21[0] = CFSTR("RegulatoryInfo");
  v21[1] = CFSTR("1.0");
  v20[2] = CFSTR("country");
  v21[2] = v12;
  v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v21, v20, 3));
  v14 = qword_1008590B0;
  if (os_log_type_enabled((os_log_t)qword_1008590B0, OS_LOG_TYPE_DEFAULT))
  {
    if (v17 < 0)
    {
      if (__p[1])
        v15 = (void **)__p[0];
      else
        v15 = (void **)"__";
    }
    else
    {
      v15 = __p;
      if (!v17)
        v15 = (void **)"__";
    }
    *(_DWORD *)buf = 136315138;
    v19 = v15;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#regulatory,isoquerymgr,isoQueryListener,request received,isoCountry:%s", buf, 0xCu);
  }
  (*((void (**)(id, void *, _QWORD, _QWORD))v9 + 2))(v9, v13, 0, 0);

  if (v17 < 0)
    operator delete(__p[0]);

}

void sub_1001FACF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;

  if (a15 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1001FAD40(uint64_t a1)
{
  NSObject *v2;
  id v3;
  void *v4;
  id v5;
  void *v6;
  NSObject *v7;
  _QWORD v8[5];
  _QWORD v9[5];
  uint8_t buf[16];

  if (sub_1000069CC(*(_DWORD *)a1))
  {
    sub_1001FA9B0(a1);
  }
  else if (sub_100360FA0(*(_DWORD *)a1))
  {
    if (*(_QWORD *)(a1 + 16))
    {
      v2 = qword_1008590B0;
      if (os_log_type_enabled((os_log_t)qword_1008590B0, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#regulatory,isoquerymgr,start, active discovery client present", buf, 2u);
      }
    }
    else
    {
      *(_BYTE *)(a1 + 104) = 0;
      v3 = objc_alloc_init((Class)NSMutableArray);
      v4 = *(void **)(a1 + 96);
      *(_QWORD *)(a1 + 96) = v3;

      v5 = objc_alloc_init((Class)RPCompanionLinkClient);
      v6 = *(void **)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v5;

      objc_msgSend(*(id *)(a1 + 16), "setDispatchQueue:", *(_QWORD *)(a1 + 56));
      objc_msgSend(*(id *)(a1 + 16), "setInvalidationHandler:", &stru_10080E328);
      v9[0] = _NSConcreteStackBlock;
      v9[1] = 3221225472;
      v9[2] = sub_1001FAF94;
      v9[3] = &unk_1007FA668;
      v9[4] = a1;
      objc_msgSend(*(id *)(a1 + 16), "setInterruptionHandler:", v9);
      v8[0] = _NSConcreteStackBlock;
      v8[1] = 3221225472;
      v8[2] = sub_1001FB000;
      v8[3] = &unk_10080E348;
      v8[4] = a1;
      objc_msgSend(*(id *)(a1 + 16), "setDeviceFoundHandler:", v8);
      v7 = qword_1008590B0;
      if (os_log_type_enabled((os_log_t)qword_1008590B0, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#regulatory,isoquerymgr,start, activating discovery client", buf, 2u);
      }
      objc_msgSend(*(id *)(a1 + 16), "setFlags:", objc_msgSend(*(id *)(a1 + 16), "flags") | 0x10);
      objc_msgSend(*(id *)(a1 + 16), "setControlFlags:", (unint64_t)objc_msgSend(*(id *)(a1 + 16), "controlFlags") | 0x980E);
      *(double *)(a1 + 8) = sub_10000883C();
      objc_msgSend(*(id *)(a1 + 16), "activateWithCompletion:", &stru_10080E368);
      sub_1001FB3F8(a1);
    }
  }
}

void sub_1001FAF34(id a1)
{
  NSObject *v1;
  uint8_t v2[16];

  v1 = qword_1008590B0;
  if (os_log_type_enabled((os_log_t)qword_1008590B0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v2 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "#regulatory,isoquerymgr,start,invalidationHandler, discovery client invalidation", v2, 2u);
  }
}

id sub_1001FAF94(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  uint8_t v4[16];

  v1 = *(_QWORD *)(a1 + 32);
  v2 = qword_1008590B0;
  if (os_log_type_enabled((os_log_t)qword_1008590B0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#regulatory,isoquerymgr,start,interruptionHandler,discovery client", v4, 2u);
  }
  return objc_msgSend(*(id *)(v1 + 96), "removeAllObjects");
}

void sub_1001FB000(uint64_t a1, void *a2)
{
  sub_1001FB008(*(_QWORD *)(a1 + 32), a2);
}

void sub_1001FB008(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  void *v5;
  void *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  unsigned __int8 v10;
  NSObject *v11;
  void *v12;
  void *v13;
  id v14;
  id v15;
  _QWORD v16[4];
  id v17;
  uint64_t v18;
  uint8_t buf[4];
  void *v20;
  __int16 v21;
  void *v22;

  v3 = a2;
  if (v3)
  {
    v4 = (id)qword_1008590B0;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "effectiveIdentifier"));
      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "model"));
      *(_DWORD *)buf = 138478083;
      v20 = v5;
      v21 = 2112;
      v22 = v6;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#regulatory,isoquerymgr,connectWithActiveDevice, device found: %{private}@ %@", buf, 0x16u);

    }
    if (*(_BYTE *)(a1 + 104))
    {
      v7 = qword_1008590B0;
      if (os_log_type_enabled((os_log_t)qword_1008590B0, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#regulatory,isoquerymgr,connectWithActiveDevice, device found, ignoring, Iso already available", buf, 2u);
      }
    }
    else
    {
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "model"));
      if (!v8
        || (v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "model")),
            v10 = objc_msgSend(v9, "containsString:", CFSTR("iPhone")),
            v9,
            v8,
            (v10 & 1) != 0))
      {
        sub_1001FA92C(a1);
        v11 = (id)qword_1008590B0;
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "effectiveIdentifier"));
          v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "model"));
          *(_DWORD *)buf = 138478083;
          v20 = v12;
          v21 = 2112;
          v22 = v13;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#regulatory,isoquerymgr,connectWithActiveDevice, activating %{private}@ %@", buf, 0x16u);

        }
        v14 = objc_alloc_init((Class)RPCompanionLinkClient);
        objc_msgSend(v14, "setControlFlags:", (unint64_t)objc_msgSend(v14, "controlFlags") | 0x980E);
        objc_msgSend(v14, "setDestinationDevice:", v3);
        objc_msgSend(v14, "setDispatchQueue:", *(_QWORD *)(a1 + 56));
        objc_msgSend(v14, "setInvalidationHandler:", &stru_10080E3C8);
        objc_msgSend(v14, "setInterruptionHandler:", &stru_10080E3E8);
        objc_msgSend(*(id *)(a1 + 96), "addObject:", v14);
        v16[0] = _NSConcreteStackBlock;
        v16[1] = 3221225472;
        v16[2] = sub_1001FB694;
        v16[3] = &unk_10080E410;
        v18 = a1;
        v15 = v14;
        v17 = v15;
        objc_msgSend(v15, "activateWithCompletion:", v16);

      }
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_1008590B0, OS_LOG_TYPE_ERROR))
  {
    sub_1003DC1F8();
  }

}

void sub_1001FB2E8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1001FB368(id a1, NSError *a2)
{
  NSError *v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint8_t v10[16];

  v2 = a2;
  v3 = qword_1008590B0;
  if (v2)
  {
    if (os_log_type_enabled((os_log_t)qword_1008590B0, OS_LOG_TYPE_ERROR))
      sub_1003DC224((uint64_t)v2, v3, v4, v5, v6, v7, v8, v9);
  }
  else if (os_log_type_enabled((os_log_t)qword_1008590B0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#regulatory,isoquerymgr,start, activateWithCompletion, success", v10, 2u);
  }

}

BOOL sub_1001FB3F8(uint64_t a1)
{
  dispatch_source_t v2;
  void *v3;
  NSObject *v4;
  dispatch_time_t v5;
  NSObject *v6;
  _QWORD handler[5];

  sub_1001FA92C(a1);
  v2 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, *(dispatch_queue_t *)(a1 + 56));
  v3 = *(void **)(a1 + 112);
  *(_QWORD *)(a1 + 112) = v2;

  v4 = *(NSObject **)(a1 + 112);
  if (v4)
  {
    v5 = dispatch_time(0, 1800000000000);
    dispatch_source_set_timer(v4, v5, 0xFFFFFFFFFFFFFFFFLL, 0xBEBC200uLL);
    v6 = *(NSObject **)(a1 + 112);
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 3221225472;
    handler[2] = sub_1001FB4C4;
    handler[3] = &unk_1007FA668;
    handler[4] = a1;
    dispatch_source_set_event_handler(v6, handler);
    dispatch_resume(*(dispatch_object_t *)(a1 + 112));
  }
  return v4 != 0;
}

uint64_t sub_1001FB4C4(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  if (os_log_type_enabled((os_log_t)qword_1008590B0, OS_LOG_TYPE_DEBUG))
    sub_1003DC288();
  sub_1001FA92C(v1);
  return AnalyticsSendEventLazy(CFSTR("com.apple.nearbyd.PhoneIsoError"), &stru_10080E3A8);
}

NSDictionary *__cdecl sub_1001FB520(id a1)
{
  void *v1;
  void *v2;
  const __CFString *v4;
  void *v5;

  v4 = CFSTR("ErrorCode");
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 6));
  v5 = v1;
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v5, &v4, 1));

  return (NSDictionary *)v2;
}

void sub_1001FB5BC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1001FB5D4(id a1)
{
  NSObject *v1;
  uint8_t v2[16];

  v1 = qword_1008590B0;
  if (os_log_type_enabled((os_log_t)qword_1008590B0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v2 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "#regulatory,isoquerymgr,connectWithActiveDevice, client invalidation", v2, 2u);
  }
}

void sub_1001FB634(id a1)
{
  NSObject *v1;
  uint8_t v2[16];

  v1 = qword_1008590B0;
  if (os_log_type_enabled((os_log_t)qword_1008590B0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v2 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "#regulatory,isoquerymgr,connectWithActiveDevice,interruptionHandler, connectionClient interrupted", v2, 2u);
  }
}

void sub_1001FB694(uint64_t a1, void *a2)
{
  sub_1001FB6A4(*(_QWORD *)(a1 + 40), *(void **)(a1 + 32), a2);
}

void sub_1001FB6A4(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  void *v8;
  void *v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  void *v19;
  void *v20;
  NSObject *v21;
  int v22;
  _QWORD v23[4];
  id v24;
  uint64_t v25;
  _QWORD v26[5];
  uint64_t v27;
  void *v28;
  __int128 buf;
  uint64_t v30;
  int v31;

  v5 = a2;
  v6 = a3;
  v7 = (id)qword_1008590B0;
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "destinationDevice"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "effectiveIdentifier"));
    LODWORD(buf) = 138477827;
    *(_QWORD *)((char *)&buf + 4) = v9;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#regulatory,isoquerymgr,sendIsoRequest, device:%{private}@", (uint8_t *)&buf, 0xCu);

  }
  if (v6)
  {
    v10 = qword_1008590B0;
    if (os_log_type_enabled((os_log_t)qword_1008590B0, OS_LOG_TYPE_ERROR))
      sub_1003DC2B4((uint64_t)v6, v10, v11, v12, v13, v14, v15, v16);
    objc_msgSend(*(id *)(a1 + 96), "removeObject:", v5);
    if (!*(_BYTE *)(a1 + 104))
    {
      *(_QWORD *)&buf = 0;
      *((_QWORD *)&buf + 1) = &buf;
      v30 = 0x2020000000;
      v31 = 0;
      v17 = (uint64_t)objc_msgSend(v6, "code");
      if (v17 > -6723)
      {
        if (v17 == -6714)
        {
          v18 = 2;
          goto LABEL_21;
        }
        if (v17 == -6722)
        {
          v18 = 1;
          goto LABEL_21;
        }
      }
      else
      {
        if (v17 == -71143)
        {
          v18 = 5;
          goto LABEL_21;
        }
        if (v17 == -6727)
        {
          v18 = 3;
LABEL_21:
          v31 = v18;
          v26[0] = _NSConcreteStackBlock;
          v26[1] = 3221225472;
          v26[2] = sub_1001FBA34;
          v26[3] = &unk_10080E438;
          v26[4] = &buf;
          AnalyticsSendEventLazy(CFSTR("com.apple.nearbyd.PhoneIsoError"), v26);
          _Block_object_dispose(&buf, 8);
          goto LABEL_22;
        }
      }
      v18 = 0;
      goto LABEL_21;
    }
  }
  else if ((objc_msgSend(*(id *)(a1 + 96), "containsObject:", v5) & 1) != 0)
  {
    v27 = RPOptionStatusFlags;
    v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", 24590));
    v28 = v19;
    v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v28, &v27, 1));

    v23[0] = _NSConcreteStackBlock;
    v23[1] = 3221225472;
    v23[2] = sub_1001FBAF4;
    v23[3] = &unk_10080E4A0;
    v25 = a1;
    v24 = v5;
    objc_msgSend(v24, "sendRequestID:request:options:responseHandler:", CFSTR("com.apple.proximity.regulatoryrappportlink"), &__NSDictionary0__struct, v20, v23);

  }
  else
  {
    v21 = qword_1008590B0;
    if (os_log_type_enabled((os_log_t)qword_1008590B0, OS_LOG_TYPE_DEFAULT))
    {
      v22 = *(unsigned __int8 *)(a1 + 104);
      LODWORD(buf) = 67109120;
      DWORD1(buf) = v22;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "#regulatory,isoquerymgr,sendIsoRequest, client invalid fIsoKnown = %d", (uint8_t *)&buf, 8u);
    }
  }
LABEL_22:

}

void sub_1001FB9C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

id sub_1001FBA34(uint64_t a1)
{
  void *v1;
  void *v2;
  const __CFString *v4;
  void *v5;

  v4 = CFSTR("ErrorCode");
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24)));
  v5 = v1;
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v5, &v4, 1));

  return v2;
}

void sub_1001FBADC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1001FBAF4(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  NSObject *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  const char *v15;
  NSObject *v16;
  uint32_t v17;
  uint64_t v18;
  int v19;
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  void *v29;
  void *v30;
  void *v31;
  BOOL v32;
  NSObject *v33;
  void *v34;
  void *v35;
  NSObject *v36;
  id v37;
  id v38;
  BOOL v39;
  NSObject *v40;
  double v41;
  void *v42;
  _QWORD v43[5];
  _QWORD block[4];
  id v45;
  uint64_t v46;
  _QWORD v47[5];
  _BYTE buf[24];
  void *v49;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  v10 = *(_QWORD *)(a1 + 40);
  v11 = (id)qword_1008590B0;
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "destinationDevice"));
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "effectiveIdentifier"));
    *(_DWORD *)buf = 138477827;
    *(_QWORD *)&buf[4] = v13;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#regulatory,isoquerymgr,sendIsoRequest,response, device:%{private}@", buf, 0xCu);

  }
  if ((objc_msgSend(*(id *)(v10 + 96), "containsObject:", *(_QWORD *)(a1 + 32)) & 1) != 0)
  {
    if (*(_BYTE *)(v10 + 104))
    {
      v14 = qword_1008590B0;
      if (os_log_type_enabled((os_log_t)qword_1008590B0, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        *(_QWORD *)&buf[4] = v9;
        v15 = "#regulatory,isoquerymgr,sendIsoRequest,response, Iso available, ignoring error = %@";
        v16 = v14;
        v17 = 12;
LABEL_9:
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, v15, buf, v17);
        goto LABEL_41;
      }
      goto LABEL_41;
    }
    if (v9)
    {
      v20 = qword_1008590B0;
      if (os_log_type_enabled((os_log_t)qword_1008590B0, OS_LOG_TYPE_ERROR))
        sub_1003DC344((uint64_t)v9, v20, v21, v22, v23, v24, v25, v26);
      objc_msgSend(*(id *)(a1 + 32), "invalidate");
      objc_msgSend(*(id *)(v10 + 96), "removeObject:", *(_QWORD *)(a1 + 32));
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = buf;
      *(_QWORD *)&buf[16] = 0x2020000000;
      LODWORD(v49) = 0;
      v27 = (uint64_t)objc_msgSend(v9, "code");
      if (v27 > -6723)
      {
        if (v27 == -6714)
        {
          v28 = 2;
          goto LABEL_31;
        }
        if (v27 == -6722)
        {
          v28 = 1;
          goto LABEL_31;
        }
      }
      else
      {
        if (v27 == -71143)
        {
          v28 = 5;
          goto LABEL_31;
        }
        if (v27 == -6727)
        {
          v28 = 3;
LABEL_31:
          LODWORD(v49) = v28;
          v47[0] = _NSConcreteStackBlock;
          v47[1] = 3221225472;
          v47[2] = sub_1001FC148;
          v47[3] = &unk_10080E438;
          v47[4] = buf;
          AnalyticsSendEventLazy(CFSTR("com.apple.nearbyd.PhoneIsoError"), v47);
          _Block_object_dispose(buf, 8);
          goto LABEL_41;
        }
      }
      v28 = 0;
      goto LABEL_31;
    }
    if (v7)
    {
      v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("name")));
      if (v29)
      {
        v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("version")));
        if (v30)
        {
          v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("country")));
          v32 = v31 == 0;

          if (!v32)
          {
            v33 = (id)qword_1008590B0;
            if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
            {
              v42 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("name")));
              v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("version")));
              v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("country")));
              *(_DWORD *)buf = 138412802;
              *(_QWORD *)&buf[4] = v42;
              *(_WORD *)&buf[12] = 2112;
              *(_QWORD *)&buf[14] = v34;
              *(_WORD *)&buf[22] = 2112;
              v49 = v35;
              _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "#regulatory,isoquerymgr,sendIsoRequest,response, %@ %@ %@", buf, 0x20u);

            }
            v36 = *(NSObject **)(v10 + 56);
            block[0] = _NSConcreteStackBlock;
            block[1] = 3221225472;
            block[2] = sub_1001FC208;
            block[3] = &unk_100809CD8;
            v46 = v10;
            v37 = v7;
            v45 = v37;
            dispatch_async(v36, block);
            v38 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v37, "objectForKeyedSubscript:", CFSTR("country"))));
            sub_10000BF04(buf, (char *)objc_msgSend(v38, "UTF8String"));
            if ((buf[23] & 0x80000000) != 0)
            {
              v39 = *(_QWORD *)&buf[8] == 0;
              operator delete(*(void **)buf);
            }
            else
            {
              v39 = buf[23] == 0;
            }

            if (!v39)
            {
              *(_BYTE *)(v10 + 104) = 1;
              v41 = floor(sub_10000883C() - *(double *)(v10 + 8));
              v43[0] = _NSConcreteStackBlock;
              v43[1] = 3221225472;
              v43[2] = sub_1001FC2B0;
              v43[3] = &unk_10080E458;
              *(double *)&v43[4] = v41;
              AnalyticsSendEventLazy(CFSTR("com.apple.rose.regulatory.mcc.isosearchtime"), v43);
            }

LABEL_36:
            if (*(_BYTE *)(v10 + 104))
            {
              v40 = qword_1008590B0;
              if (os_log_type_enabled((os_log_t)qword_1008590B0, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "#regulatory,isoquerymgr,sendIsoRequest,response, Iso available,teardown", buf, 2u);
              }
              sub_1001FA8CC(v10);
            }
            else
            {
              objc_msgSend(*(id *)(a1 + 32), "invalidate");
              objc_msgSend(*(id *)(v10 + 96), "removeObject:", *(_QWORD *)(a1 + 32));
            }
            goto LABEL_41;
          }
        }
        else
        {

        }
      }
    }
    if (os_log_type_enabled((os_log_t)qword_1008590B0, OS_LOG_TYPE_ERROR))
      sub_1003DC318();
    AnalyticsSendEventLazy(CFSTR("com.apple.nearbyd.PhoneIsoError"), &stru_10080E478);
    goto LABEL_36;
  }
  v18 = qword_1008590B0;
  if (os_log_type_enabled((os_log_t)qword_1008590B0, OS_LOG_TYPE_DEFAULT))
  {
    v19 = *(unsigned __int8 *)(v10 + 104);
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v19;
    v15 = "#regulatory,isoquerymgr,sendIsoRequest,response, client connection invalid fIsoKnown = %d";
    v16 = v18;
    v17 = 8;
    goto LABEL_9;
  }
LABEL_41:

}

void sub_1001FC098(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

id sub_1001FC148(uint64_t a1)
{
  void *v1;
  void *v2;
  const __CFString *v4;
  void *v5;

  v4 = CFSTR("ErrorCode");
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24)));
  v5 = v1;
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v5, &v4, 1));

  return v2;
}

void sub_1001FC1F0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1001FC208(uint64_t a1)
{
  uint64_t v1;
  id v2;
  uint64_t v3;
  void *__p[2];
  char v5;

  v1 = *(_QWORD *)(a1 + 40);
  v2 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("country"))));
  sub_10000BF04(__p, (char *)objc_msgSend(v2, "UTF8String"));
  v3 = *(_QWORD *)(v1 + 88);
  if (!v3)
    sub_100027BC4();
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v3 + 48))(v3, __p);
  if (v5 < 0)
    operator delete(__p[0]);

}

void sub_1001FC288(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  if (a15 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

id sub_1001FC2B0(uint64_t a1)
{
  void *v1;
  void *v2;
  const __CFString *v4;
  void *v5;

  v4 = CFSTR("MCCSearchTime");
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", (int)*(double *)(a1 + 32)));
  v5 = v1;
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v5, &v4, 1));

  return v2;
}

void sub_1001FC354(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

NSDictionary *__cdecl sub_1001FC36C(id a1)
{
  void *v1;
  void *v2;
  const __CFString *v4;
  void *v5;

  v4 = CFSTR("ErrorCode");
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 4));
  v5 = v1;
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v5, &v4, 1));

  return (NSDictionary *)v2;
}

void sub_1001FC408(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1001FC420(id a1, RPCompanionLinkClient *a2, unint64_t a3, BOOL *a4)
{
  -[RPCompanionLinkClient invalidate](a2, "invalidate", a3, a4);
}

uint64_t sub_1001FC428(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;

  *(_QWORD *)(a1 + 24) = 0;
  if (*(_QWORD *)(a2 + 24))
  {
    v4 = operator new(0x28uLL);
    *v4 = off_10080E510;
    sub_1001FC6C0((uint64_t)(v4 + 1), a2);
    *(_QWORD *)(a1 + 24) = v4;
  }
  return a1;
}

_QWORD *sub_1001FC488(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = off_10080E510;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void sub_1001FC4E8(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = off_10080E510;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  operator delete();
}

_QWORD *sub_1001FC558(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x28uLL);
  *v2 = off_10080E510;
  sub_100027674((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1001FC59C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1001FC5B0(uint64_t a1, _QWORD *a2)
{
  *a2 = off_10080E510;
  return sub_100027674((uint64_t)(a2 + 1), a1 + 8);
}

_QWORD *sub_1001FC5D0(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_1001FC604(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

uint64_t sub_1001FC654(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  if (!v1)
    sub_100027BC4();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 48))(v1);
}

uint64_t sub_1001FC678(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_1001FC6B4()
{
}

uint64_t sub_1001FC6C0(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

void sub_1001FC724()
{
  void *v0;

  v0 = objc_autoreleasePoolPush();
  qword_1008590B0 = (uint64_t)os_log_create("com.apple.nearbyd", "Regulatory");
  objc_autoreleasePoolPop(v0);
}

uint64_t sub_1001FC764(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  id v6;
  NSObject *v7;
  void *v8;
  _BOOL4 v9;
  xpc_object_t v11;
  _QWORD handler[5];
  uint8_t buf[8];

  v5 = a2;
  *(_QWORD *)a1 = dispatch_queue_create(off_1008529F0[0], 0);
  v6 = v5;
  *(_QWORD *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + 16) = 0;
  sub_100027674(a1 + 24, a3);
  *(_QWORD *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 72) = 345600;
  v7 = qword_1008590B8;
  if (os_log_type_enabled((os_log_t)qword_1008590B8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "regulatory,download,sm,init", buf, 2u);
  }
  *(_QWORD *)buf = 0;
  v8 = sub_100007824();
  v9 = sub_100391A5C((uint64_t)v8, buf);
  if (*(uint64_t *)buf > 300 && v9)
    *(_QWORD *)(a1 + 72) = *(_QWORD *)buf;
  v11 = xpc_dictionary_create(0, 0, 0);
  xpc_dictionary_set_BOOL(v11, XPC_ACTIVITY_REPEATING, 1);
  xpc_dictionary_set_string(v11, XPC_ACTIVITY_PRIORITY, XPC_ACTIVITY_PRIORITY_UTILITY);
  xpc_dictionary_set_int64(v11, XPC_ACTIVITY_INTERVAL, *(_QWORD *)(a1 + 72));
  xpc_dictionary_set_int64(v11, XPC_ACTIVITY_GRACE_PERIOD, XPC_ACTIVITY_INTERVAL_15_MIN);
  xpc_activity_unregister(off_1008529F0[0]);
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 3221225472;
  handler[2] = sub_1001FC9A4;
  handler[3] = &unk_10080E5E0;
  handler[4] = a1;
  xpc_activity_register(off_1008529F0[0], v11, handler);
  sub_1001FCB98((NSObject **)a1);

  return a1;
}

void sub_1001FC934(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  void *v9;
  _QWORD *v10;
  uint64_t *v11;
  _QWORD *v13;
  uint64_t v14;

  sub_1001D8660(v11, 0, a3, a4, a5, a6, a7, a8);
  v13 = *(_QWORD **)(v8 + 48);
  if (v13 == v10)
  {
    v14 = 4;
    v13 = v10;
  }
  else
  {
    if (!v13)
      goto LABEL_6;
    v14 = 5;
  }
  (*(void (**)(void))(*v13 + 8 * v14))();
LABEL_6:

  _Unwind_Resume(a1);
}

void sub_1001FC9A4(uint64_t a1, void *a2)
{
  _xpc_activity_s *v3;
  NSObject **v4;
  xpc_activity_state_t state;
  NSObject *v6;
  NSObject *v7;
  int v8;
  xpc_activity_state_t v9;

  v3 = a2;
  v4 = *(NSObject ***)(a1 + 32);
  state = xpc_activity_get_state(v3);
  v6 = qword_1008590B8;
  if (os_log_type_enabled((os_log_t)qword_1008590B8, OS_LOG_TYPE_DEFAULT))
  {
    v8 = 134217984;
    v9 = state;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "regulatory,download,state,%ld", (uint8_t *)&v8, 0xCu);
  }
  if ((unint64_t)(state - 3) < 3)
    goto LABEL_6;
  if (state == 2)
  {
    sub_1001FCACC(v4, v3);
    goto LABEL_9;
  }
  if (state == 1)
  {
LABEL_6:
    v7 = qword_1008590B8;
    if (os_log_type_enabled((os_log_t)qword_1008590B8, OS_LOG_TYPE_ERROR))
      sub_1003DC3A8(state, v7);
  }
LABEL_9:

}

void sub_1001FCAB4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1001FCACC(NSObject **a1, void *a2)
{
  id v3;
  NSObject *v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[4];
  id v14;
  NSObject **v15;

  v3 = a2;
  if (xpc_activity_set_state((xpc_activity_t)v3, 4))
  {
    v4 = *a1;
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    v13[2] = sub_1001FCFAC;
    v13[3] = &unk_100809CD8;
    v15 = a1;
    v14 = v3;
    dispatch_async(v4, v13);

  }
  else
  {
    v5 = qword_1008590B8;
    if (os_log_type_enabled((os_log_t)qword_1008590B8, OS_LOG_TYPE_ERROR))
      sub_1003DC41C(v5, v6, v7, v8, v9, v10, v11, v12);
  }

}

void sub_1001FCB88(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1001FCB98(NSObject **a1)
{
  NSObject *v2;
  NSObject *v3;
  _QWORD block[5];
  uint8_t buf[16];

  v2 = qword_1008590B8;
  if (os_log_type_enabled((os_log_t)qword_1008590B8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "regulatory,download,triggerUpdate,startup", buf, 2u);
  }
  v3 = *a1;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1001FCFA4;
  block[3] = &unk_1007FA668;
  block[4] = a1;
  dispatch_async(v3, block);
}

void sub_1001FCC3C(NSObject **a1)
{
  NSObject *v2;
  NSObject *v3;
  _QWORD block[5];
  uint8_t buf[16];

  v2 = qword_1008590B8;
  if (os_log_type_enabled((os_log_t)qword_1008590B8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "regulatory,download,onFirstUnlock", buf, 2u);
  }
  v3 = *a1;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1001FCCDC;
  block[3] = &unk_1007FA668;
  block[4] = a1;
  dispatch_async(v3, block);
}

void sub_1001FCCDC(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  if (sub_1001FCD18(v1))
  {
    *(_DWORD *)(v1 + 56) = 0;
    sub_1001FCE94(v1);
  }
}

uint64_t sub_1001FCD18(uint64_t a1)
{
  std::string *v2;
  std::string *v3;
  double v4;
  uint64_t v5;
  std::string *v6;
  void *__p[2];
  char v9;
  void *v10[2];
  char v11;
  void *v12[2];
  char v13;
  std::string v14;

  sub_100004784();
  sub_100004814(off_100852A10, &v14);
  if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v2 = &v14;
  else
    v2 = (std::string *)v14.__r_.__value_.__r.__words[0];
  sub_10000BF04(v12, (char *)v2);
  if (sub_10029172C((const char *)v12))
  {
    if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v3 = &v14;
    else
      v3 = (std::string *)v14.__r_.__value_.__r.__words[0];
    sub_10000BF04(v10, (char *)v3);
    sub_100291764((const char *)v10);
    if (v4 <= (double)*(uint64_t *)(a1 + 72))
    {
      if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v6 = &v14;
      else
        v6 = (std::string *)v14.__r_.__value_.__r.__words[0];
      sub_10000BF04(__p, (char *)v6);
      v5 = sub_100292054((uint64_t)__p) ^ 1;
      if (v9 < 0)
        operator delete(__p[0]);
    }
    else
    {
      v5 = 1;
    }
    if (v11 < 0)
      operator delete(v10[0]);
  }
  else
  {
    v5 = 1;
  }
  if (v13 < 0)
    operator delete(v12[0]);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  return v5;
}

void sub_1001FCE28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;

  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a26 < 0)
    operator delete(a21);
  if (*(char *)(v26 - 17) < 0)
    operator delete(*(void **)(v26 - 40));
  _Unwind_Resume(exception_object);
}

void sub_1001FCE94(uint64_t a1)
{
  int v2;

  if (sub_1001FCD18(a1) && (sub_1001FD054((dispatch_queue_t *)a1) & 1) == 0)
  {
    v2 = *(_DWORD *)(a1 + 56);
    *(_DWORD *)(a1 + 56) = v2 + 1;
    if (v2 <= 3)
      sub_1001FCEE8((NSObject **)a1);
  }
}

void sub_1001FCEE8(NSObject **a1)
{
  NSObject *v2;
  dispatch_time_t v3;
  NSObject *v4;
  _QWORD block[5];
  uint8_t buf[16];

  v2 = qword_1008590B8;
  if (os_log_type_enabled((os_log_t)qword_1008590B8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "regulatory,download,triggerUpdate,retry", buf, 2u);
  }
  v3 = dispatch_time(0, 60000000000);
  v4 = *a1;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1001FCF9C;
  block[3] = &unk_1007FA668;
  block[4] = a1;
  dispatch_after(v3, v4, block);
}

uint64_t sub_1001FCF9C(uint64_t a1)
{
  return sub_1001FCE94(*(_QWORD *)(a1 + 32));
}

void sub_1001FCFA4(uint64_t a1)
{
  sub_1001FCE94(*(_QWORD *)(a1 + 32));
}

void sub_1001FCFAC(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint8_t v12[16];

  v2 = *(_QWORD *)(a1 + 40);
  v3 = qword_1008590B8;
  if (os_log_type_enabled((os_log_t)qword_1008590B8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v12 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "regulatory,download,xpc,triggerUpdate", v12, 2u);
  }
  sub_1001FCE94(v2);
  if (!xpc_activity_set_state(*(xpc_activity_t *)(a1 + 32), 5))
  {
    v4 = qword_1008590B8;
    if (os_log_type_enabled((os_log_t)qword_1008590B8, OS_LOG_TYPE_ERROR))
      sub_1003DC488(v4, v5, v6, v7, v8, v9, v10, v11);
  }
}

uint64_t sub_1001FD054(dispatch_queue_t *a1)
{
  const __CFDictionary *v1;
  const __CFDictionary *v2;
  CFTypeID v3;
  NSObject *v4;
  int ValueIfPresent;
  CFTypeID v6;
  NSObject *v7;
  uint64_t result;
  std::string v9;
  void *value;
  uint8_t buf[23];

  dispatch_assert_queue_V2(*a1);
  v1 = (const __CFDictionary *)CLCopyNearbyAssetSettings();
  v2 = v1;
  if (v1)
  {
    v3 = CFGetTypeID(v1);
    if (v3 == CFDictionaryGetTypeID())
    {
      v4 = qword_1008590B8;
      if (os_log_type_enabled((os_log_t)qword_1008590B8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "regulatory,download,copyFromCLMobileAsset,copyData", buf, 2u);
      }
      value = 0;
      ValueIfPresent = CFDictionaryGetValueIfPresent(v2, CFSTR("PrGlobalTileKey"), (const void **)&value);
      sub_100004784();
      sub_100004814(off_100852A08[0], &v9);
      if (ValueIfPresent)
      {
        if (value)
        {
          v6 = CFGetTypeID(value);
          if (v6 == CFDataGetTypeID())
            operator new();
        }
      }
      if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v9.__r_.__value_.__l.__data_);
LABEL_15:
      CFRelease(v2);
      return 0;
    }
  }
  v7 = qword_1008590B8;
  if (os_log_type_enabled((os_log_t)qword_1008590B8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "regulatory,download,triggerUpdate,copyFromCLMobileAsset,skipped", buf, 2u);
  }
  result = 0;
  if (v2)
    goto LABEL_15;
  return result;
}

void sub_1001FD450(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  void *v36;
  uint64_t v37;

  if (a29 < 0)
    operator delete(__p);
  if (*(char *)(v37 - 73) < 0)
    operator delete(*(void **)(v37 - 96));

  if (a36 < 0)
    operator delete(a31);
  _Unwind_Resume(a1);
}

void sub_1001FD514(uint64_t a1)
{
  uint64_t v1;
  char *v2;
  void *__p[2];
  char v4;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = (char *)(a1 + 40);
  if (*(char *)(a1 + 63) < 0)
    v2 = *(char **)v2;
  sub_10000BF04(__p, v2);
  sub_1001FD588(v1, (uint64_t *)__p);
  if (v4 < 0)
    operator delete(__p[0]);
}

void sub_1001FD56C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

id sub_1001FD588(uint64_t a1, uint64_t *a2)
{
  std::string *p_p;
  void *v5;
  void *v6;
  uint64_t *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  id v12;
  id v13;
  NSObject *v14;
  NSObject *v15;
  uint64_t *v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD v34[5];
  id v35;
  id v36;
  std::string __p;
  uint8_t buf[4];
  uint64_t *v39;
  __int16 v40;
  int v41;

  sub_100004784();
  sub_100004814(off_100852A10, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithCString:encoding:](NSString, "stringWithCString:encoding:", p_p, 4));
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL fileURLWithPath:isDirectory:](NSURL, "fileURLWithPath:isDirectory:", v5, 0));

  if (v6)
  {
    if (*((char *)a2 + 23) >= 0)
      v7 = a2;
    else
      v7 = (uint64_t *)*a2;
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v7));
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL fileURLWithPath:isDirectory:](NSURL, "fileURLWithPath:isDirectory:", v8, 0));

    if (v9)
    {
      v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](NSFileManager, "defaultManager"));
      v35 = 0;
      v36 = 0;
      v11 = objc_msgSend(v10, "replaceItemAtURL:withItemAtURL:backupItemName:options:resultingItemURL:error:", v6, v9, 0, 1, &v36, &v35);
      v12 = v36;
      v13 = v35;

      v14 = *(NSObject **)(a1 + 8);
      v34[0] = _NSConcreteStackBlock;
      v34[1] = 3221225472;
      v34[2] = sub_1001FD950;
      v34[3] = &unk_1007FA668;
      v34[4] = a1;
      dispatch_async(v14, v34);
      v15 = qword_1008590B8;
      if (os_log_type_enabled((os_log_t)qword_1008590B8, OS_LOG_TYPE_DEFAULT))
      {
        if (*((char *)a2 + 23) >= 0)
          v16 = a2;
        else
          v16 = (uint64_t *)*a2;
        *(_DWORD *)buf = 136315394;
        v39 = v16;
        v40 = 1024;
        v41 = (int)v11;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "regulatory,download,safeReplaceFileOnDiskWith,%s,replacementSucceeded,%d", buf, 0x12u);
      }
    }
    else
    {
      v25 = qword_1008590B8;
      if (os_log_type_enabled((os_log_t)qword_1008590B8, OS_LOG_TYPE_ERROR))
        sub_1003DC524(v25, v26, v27, v28, v29, v30, v31, v32);
      v12 = 0;
      v13 = 0;
      v11 = 0;
    }

  }
  else
  {
    v17 = qword_1008590B8;
    if (os_log_type_enabled((os_log_t)qword_1008590B8, OS_LOG_TYPE_ERROR))
      sub_1003DC4F4(v17, v18, v19, v20, v21, v22, v23, v24);
    v12 = 0;
    v13 = 0;
    v11 = 0;
  }

  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);

  return v11;
}

void sub_1001FD81C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  void *v22;
  void *v23;

  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

_QWORD *sub_1001FD87C(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  __int128 v3;

  result = (_QWORD *)(a1 + 40);
  if (*(char *)(a2 + 63) < 0)
    return sub_100004678(result, *(void **)(a2 + 40), *(_QWORD *)(a2 + 48));
  v3 = *(_OWORD *)(a2 + 40);
  result[2] = *(_QWORD *)(a2 + 56);
  *(_OWORD *)result = v3;
  return result;
}

void sub_1001FD8AC(uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
}

float sub_1001FD8C0(FILE *a1, uint64_t a2)
{
  float result;
  unsigned int v5;
  __int16 __ptr;
  unsigned int v7;

  if (a1 && sub_1002919A8(a1, a2) && fread(&__ptr, 1uLL, 6uLL, a1) == 6)
  {
    *(_WORD *)(a2 + 84) = __ptr;
    if (*(_BYTE *)a2 == 2)
      v5 = bswap32(v7);
    else
      v5 = v7;
    result = (double)v5 / 100.0;
    *(float *)(a2 + 80) = result;
  }
  return result;
}

uint64_t sub_1001FD950(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 48);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 48))(result);
  return result;
}

void sub_1001FD96C()
{
  void *v0;

  v0 = objc_autoreleasePoolPush();
  qword_1008590B8 = (uint64_t)os_log_create("com.apple.nearbyd", "Regulatory");
  objc_autoreleasePoolPop(v0);
}

__CFString *sub_1001FD9AC()
{
  if (qword_1008590C0 != -1)
    dispatch_once(&qword_1008590C0, &stru_10080E630);
  return off_100852A18;
}

void sub_1001FD9EC(id a1)
{
  __CFString *v1;
  __CFString *v2;
  CFTypeID v3;
  __CFString *v4;

  v1 = (__CFString *)MGCopyAnswer(CFSTR("ProductType"), 0);
  if (v1)
  {
    v2 = v1;
    v3 = CFGetTypeID(v1);
    if (v3 != CFStringGetTypeID())
      sub_1003DC554();
    v4 = off_100852A18;
    off_100852A18 = v2;

  }
}

id sub_1001FDA4C()
{
  int v1;

  v1 = 0;
  return (id)MGCopyAnswerWithError(CFSTR("UserAssignedDeviceName"), 0, &v1);
}

id sub_1001FDA7C()
{
  if (qword_1008590D0 != -1)
    dispatch_once(&qword_1008590D0, &stru_10080E650);
  return (id)qword_1008590C8;
}

void sub_1001FDABC(id a1)
{
  uint64_t v1;
  void *v2;
  int v3;

  v3 = 0;
  v1 = MGCopyAnswerWithError(CFSTR("BuildVersion"), 0, &v3);
  v2 = (void *)qword_1008590C8;
  qword_1008590C8 = v1;

}

id sub_1001FDAFC()
{
  if (qword_1008590E0 != -1)
    dispatch_once(&qword_1008590E0, &stru_10080E670);
  return (id)qword_1008590D8;
}

void sub_1001FDB3C(id a1)
{
  uint64_t v1;
  void *v2;
  int v3;

  v3 = 0;
  v1 = MGCopyAnswerWithError(CFSTR("WifiChipset"), 0, &v3);
  v2 = (void *)qword_1008590D8;
  qword_1008590D8 = v1;

}

__CFString *sub_1001FDB7C()
{
  if (qword_1008590E8 != -1)
    dispatch_once(&qword_1008590E8, &stru_10080E690);
  return off_100852A20;
}

void sub_1001FDBBC(id a1)
{
  void *v1;
  __CFString *v2;
  unsigned __int8 *v3;
  unint64_t i;
  __CFString *v5;
  id v6;

  v1 = (void *)MGCopyAnswer(CFSTR("gD8SNRcHQeIxCAvsp+2vjA"), 0);
  v2 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSMutableString stringWithCapacity:](NSMutableString, "stringWithCapacity:", 2 * (_QWORD)objc_msgSend(v1, "length")));
  v6 = objc_retainAutorelease(v1);
  v3 = (unsigned __int8 *)objc_msgSend(v6, "bytes");
  for (i = 0; i < (unint64_t)objc_msgSend(v6, "length"); ++i)
    -[__CFString appendFormat:](v2, "appendFormat:", CFSTR("%02lX"), v3[i]);
  if (!v2)
    __assert_rtn("PRGetDeviceWifiSKU_block_invoke", "PRUtilities.m", 104, "mutableString");
  v5 = off_100852A20;
  off_100852A20 = v2;

}

void sub_1001FDCA4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1001FDCC8()
{
  if (qword_1008590F8 != -1)
    dispatch_once(&qword_1008590F8, &stru_10080E6B0);
  return byte_1008590F0;
}

void sub_1001FDD08(id a1)
{
  id v1;

  v1 = (id)MGCopyAnswer(CFSTR("9RryeqF6OCWlbaXP2Qsoag"), 0);
  byte_1008590F0 = objc_msgSend(v1, "BOOLValue");

}

void sub_1001FDD4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t sub_1001FDD60()
{
  if (qword_100859108 != -1)
    dispatch_once(&qword_100859108, &stru_10080E6D0);
  return byte_100859100;
}

void sub_1001FDDA0(id a1)
{
  id v1;

  v1 = (id)MGCopyAnswer(CFSTR("InternalBuild"), 0);
  byte_100859100 = objc_msgSend(v1, "BOOLValue");

}

void sub_1001FDDE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t sub_1001FDDF8()
{
  if (qword_100859118 != -1)
    dispatch_once(&qword_100859118, &stru_10080E6F0);
  return byte_100859110;
}

void sub_1001FDE38(id a1)
{
  const void *v1;
  const void *v2;

  v1 = (const void *)MGCopyAnswer(CFSTR("ReleaseType"), 0);
  if (v1)
  {
    v2 = v1;
    byte_100859110 = CFEqual(v1, CFSTR("NonUI")) != 0;
    CFRelease(v2);
  }
  else
  {
    byte_100859110 = 0;
  }
}

id sub_1001FDE9C(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  id v4;
  id v5;
  char *i;

  v1 = a1;
  v2 = v1;
  if (v1 && objc_msgSend(v1, "length") == (id)6)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableString string](NSMutableString, "string"));
    v4 = objc_retainAutorelease(v2);
    v5 = objc_msgSend(v4, "bytes");
    for (i = 0; objc_msgSend(v4, "length") > i; ++i)
    {
      objc_msgSend(v3, "appendFormat:", CFSTR("%02lX"), i[(_QWORD)v5]);
      if ((char *)objc_msgSend(v4, "length") - 1 > i)
        objc_msgSend(v3, "appendString:", CFSTR(":"));
    }
  }
  else
  {
    v3 = 0;
  }

  return v3;
}

void sub_1001FDF84(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1001FE0BC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;

  v2 = objc_claimAutoreleasedReturnValue(+[NSMapTable strongToWeakObjectsMapTable](NSMapTable, "strongToWeakObjectsMapTable"));
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(void **)(v3 + 16);
  *(_QWORD *)(v3 + 16) = v2;

  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(void **)(v5 + 24);
  *(_QWORD *)(v5 + 24) = 0;

}

void sub_1001FE144(id a1)
{
  id v1;
  void *v2;

  v1 = -[_InternalVisionSession _initInternal]([_InternalVisionSession alloc], "_initInternal");
  v2 = (void *)qword_100859120;
  qword_100859120 = (uint64_t)v1;

}

void sub_1001FE218(uint64_t a1)
{
  id v2;
  id v3;
  NSObject *v4;
  uint64_t v5;
  BOOL v6;
  int v7;
  uint64_t v8;
  __int16 v9;
  int v10;
  __int16 v11;
  int v12;

  v2 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "count");
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "setObject:forKey:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
  v3 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "count");
  v4 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_QWORD *)(a1 + 48);
    v7 = 138412802;
    v8 = v5;
    v9 = 1024;
    v10 = (int)v2;
    v11 = 1024;
    v12 = (int)v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#vision,registerObserver: %@. Before: %d, after: %d.", (uint8_t *)&v7, 0x18u);
  }
  if (v2)
    v6 = 1;
  else
    v6 = v3 == 0;
  if (!v6)
    objc_msgSend(*(id *)(a1 + 32), "_setUpARSession");
}

void sub_1001FE398(uint64_t a1)
{
  id v2;
  id v3;
  NSObject *v4;
  uint64_t v5;
  BOOL v6;
  int v7;
  uint64_t v8;
  __int16 v9;
  int v10;
  __int16 v11;
  int v12;

  v2 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "count");
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "removeObjectForKey:", *(_QWORD *)(a1 + 40));
  v3 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "count");
  v4 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_QWORD *)(a1 + 40);
    v7 = 138412802;
    v8 = v5;
    v9 = 1024;
    v10 = (int)v2;
    v11 = 1024;
    v12 = (int)v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#vision,unregisterObserver: %@. Before: %d, after: %d.", (uint8_t *)&v7, 0x18u);
  }
  if (v2)
    v6 = v3 == 0;
  else
    v6 = 0;
  if (v6)
    objc_msgSend(*(id *)(a1 + 32), "_tearDownARSession");
}

void sub_1001FE568(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id sub_1001FE688(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_handleARSessionDidUpdateFrame:", *(_QWORD *)(a1 + 40));
}

void sub_1001FE750(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1001FE760(uint64_t a1)
{
  NSObject *v2;
  _DWORD v4[2];

  v2 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_INFO))
  {
    v4[0] = 67109120;
    v4[1] = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "#vision,Attempt relocalization: %d", (uint8_t *)v4, 8u);
  }
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1001FEBF4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1001FED80(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1001FEDF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;

  a9.super_class = (Class)NIServerVisionInternalSessionRequest;
  -[_Unwind_Exception dealloc](&a9, "dealloc");
  _Unwind_Resume(a1);
}

void sub_1001FEE90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1001FEEEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

_QWORD *sub_1001FEF2C@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, off_10080EC20[a1]);
}

_QWORD *sub_1001FEF40@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, off_10080EC78[a1]);
}

_QWORD *sub_1001FEF54@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, off_10080ECC0[a1]);
}

_QWORD *sub_1001FEF68@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, off_10080ECE0[a1]);
}

void sub_1001FEF7C(uint64_t a1, void *a2, _QWORD *a3, uint64_t a4, _QWORD *a5)
{
  dispatch_queue_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  dispatch_queue_attr_t v16;
  NSObject *v17;
  dispatch_queue_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  void *v25;
  _BYTE v26[24];
  _BYTE *v27;
  _BYTE v28[24];
  _BYTE *v29;

  *(_QWORD *)a1 = a2;
  v9 = dispatch_queue_create("com.apple.nearbyd.Rose.analytics", 0);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 8) = v9;
  v10 = operator new(0x20uLL);
  *v10 = off_10080E9B8;
  v10[1] = sub_1001FF63C;
  v10[2] = 0;
  v10[3] = a1;
  v29 = v10;
  v11 = operator new(0x20uLL);
  *v11 = off_10080EA78;
  v11[1] = sub_1001FF698;
  v11[2] = 0;
  v11[3] = a1;
  v27 = v11;
  sub_1003A76B4(a1 + 32, 0, 5, v28, v26);
  v12 = v27;
  if (v27 == v26)
  {
    v13 = 4;
    v12 = v26;
  }
  else
  {
    if (!v27)
      goto LABEL_6;
    v13 = 5;
  }
  (*(void (**)(void))(*v12 + 8 * v13))();
LABEL_6:
  v14 = v29;
  if (v29 == v28)
  {
    v15 = 4;
    v14 = v28;
  }
  else
  {
    if (!v29)
      goto LABEL_11;
    v15 = 5;
  }
  (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_11:
  *(_QWORD *)(a1 + 1232) = 0;
  v16 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_USER_INITIATED, 0);
  v17 = objc_claimAutoreleasedReturnValue(v16);
  v18 = dispatch_queue_create("com.apple.nearbyd.rose-hid-queue", v17);
  sub_10035F9AC(a1 + 1240, v18);

  *(_OWORD *)(a1 + 1272) = 0u;
  *(_QWORD *)(a1 + 1288) = *a3;
  v19 = a3[1];
  *(_QWORD *)(a1 + 1296) = v19;
  if (v19)
  {
    v20 = (unint64_t *)(v19 + 8);
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  *(_QWORD *)(a1 + 1304) = *a5;
  v22 = a5[1];
  *(_QWORD *)(a1 + 1312) = v22;
  if (v22)
  {
    v23 = (unint64_t *)(v22 + 8);
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  *(_QWORD *)(a1 + 1320) = 0;
  *(_DWORD *)(a1 + 1327) = 0;
  *(_QWORD *)(a1 + 1336) = 850045863;
  *(_OWORD *)(a1 + 1344) = 0u;
  *(_OWORD *)(a1 + 1360) = 0u;
  *(_OWORD *)(a1 + 1376) = 0u;
  *(_QWORD *)(a1 + 1392) = 0;
  *(_QWORD *)(a1 + 1400) = 1018212795;
  *(_BYTE *)(a1 + 1456) = 0;
  *(_BYTE *)(a1 + 1464) = 0;
  *(_BYTE *)(a1 + 1472) = 0;
  *(_BYTE *)(a1 + 1480) = 0;
  *(_OWORD *)(a1 + 1408) = 0u;
  *(_OWORD *)(a1 + 1424) = 0u;
  *(_OWORD *)(a1 + 1434) = 0u;
  v25 = sub_100004784();
  *(_BYTE *)(a1 + 1488) = sub_1003956D8((uint64_t)v25);
  *(std::chrono::steady_clock::time_point *)(a1 + 1496) = std::chrono::steady_clock::now();
  *(_OWORD *)(a1 + 1504) = 0u;
  *(_BYTE *)(a1 + 1520) = 0;
  *(_QWORD *)(a1 + 1528) = a4;
  *(_DWORD *)(a1 + 1536) = 0;
  *(_QWORD *)(a1 + 1544) = 1018212795;
  *(_OWORD *)(a1 + 1552) = 0u;
  *(_OWORD *)(a1 + 1568) = 0u;
  *(_QWORD *)(a1 + 1584) = 0;
  *(_QWORD *)(a1 + 1592) = 850045863;
  *(_OWORD *)(a1 + 1600) = 0u;
  *(_OWORD *)(a1 + 1616) = 0u;
  *(_OWORD *)(a1 + 1632) = 0u;
  *(_QWORD *)(a1 + 1648) = 0;
  *(_QWORD *)(a1 + 1672) = 0;
  *(_DWORD *)(a1 + 1679) = 0;
  sub_1001887C4();
}

void sub_1001FF4F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  std::condition_variable *v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  sub_10001AE68(v16);
  std::mutex::~mutex((std::mutex *)(v10 + 1592));
  std::condition_variable::~condition_variable((std::condition_variable *)(v10 + 1544));
  std::condition_variable::~condition_variable(v15);
  std::mutex::~mutex((std::mutex *)(v10 + 1336));
  sub_1001D8660(v14, 0, v18, v19, v20, v21, v22, v23);
  sub_10001AE68(v10 + 1304);
  sub_10001AE68(v13);

  sub_10035FA44(v12);
  sub_1003A7828(a10);

  _Unwind_Resume(a1);
}

void sub_1001FF63C(NSObject **a1, int a2)
{
  NSObject *v2;
  _QWORD v3[5];
  int v4;

  v2 = *a1;
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_10020F348;
  v3[3] = &unk_100807908;
  v3[4] = a1;
  v4 = a2;
  dispatch_async(v2, v3);
}

void sub_1001FF698(uint64_t a1, int a2, uint64_t a3)
{
  NSObject *v4;
  const __CFString *v5;
  _QWORD *v6;
  _QWORD v7[5];
  _QWORD v8[5];
  _QWORD v9[5];
  uint8_t buf[16];

  switch(a2)
  {
    case 2:
      if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_ERROR))
        sub_1003DC6E0();
      v7[0] = _NSConcreteStackBlock;
      v7[1] = 3221225472;
      v7[2] = sub_10020F28C;
      v7[3] = &unk_10080E458;
      v7[4] = a3;
      v5 = CFSTR("com.apple.nearbyd.RoseCrashLogCorrupted");
      v6 = v7;
      goto LABEL_15;
    case 1:
      if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_ERROR))
        sub_1003DC6B4();
      v8[0] = _NSConcreteStackBlock;
      v8[1] = 3221225472;
      v8[2] = sub_10020F114;
      v8[3] = &unk_10080E458;
      v8[4] = a3;
      v5 = CFSTR("com.apple.nearbyd.RoseFWGeneratedCrashError");
      v6 = v8;
      goto LABEL_15;
    case 0:
      v4 = qword_100859130;
      if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "FW crash metric being submitted", buf, 2u);
      }
      if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_ERROR))
        sub_1003DC61C();
      v9[0] = _NSConcreteStackBlock;
      v9[1] = 3221225472;
      v9[2] = sub_10020EFD0;
      v9[3] = &unk_10080E458;
      v9[4] = a3;
      v5 = CFSTR("com.apple.nearbyd.RoseFWGeneratedCrash");
      v6 = v9;
LABEL_15:
      AnalyticsSendEventLazy(v5, v6);
      return;
  }
  if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_ERROR))
    sub_1003DC5F0();
}

void sub_1001FF868(uint64_t a1, uint64_t *a2)
{
  sub_1001FF870(*(NSObject ***)(a1 + 32), a2);
}

void sub_1001FF870(NSObject **a1, uint64_t *a2)
{
  __int128 *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  uint64_t v16;
  _QWORD v17[6];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _OWORD v26[2];
  uint8_t buf[4];
  uint64_t v28;
  __int16 v29;
  uint64_t v30;
  __int16 v31;
  int v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  _OWORD v41[2];

  v3 = a2 + 1;
  v2 = (__int128 *)a2[1];
  v4 = a2 + 2;
  v5 = a2[2] - (_QWORD)v2;
  if (v5)
  {
    if (v5 == 155)
    {
      v8 = v2[7];
      v39 = v2[6];
      v40 = v8;
      v41[0] = v2[8];
      *(_OWORD *)((char *)v41 + 11) = *(__int128 *)((char *)v2 + 139);
      v9 = v2[3];
      v35 = v2[2];
      v36 = v9;
      v10 = v2[5];
      v37 = v2[4];
      v38 = v10;
      v11 = v2[1];
      v33 = *v2;
      v34 = v11;
      v12 = qword_100859130;
      v13 = v33;
      if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_DEBUG))
      {
        v16 = *v4 - *v3;
        *(_DWORD *)buf = 134218496;
        v28 = v16;
        v29 = 2048;
        v30 = 155;
        v31 = 1024;
        v32 = v33;
        _os_log_debug_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "HID event size [%lu] (expected [%lu]). Report type %08x", buf, 0x1Cu);
      }
      kdebug_trace(728956932, v13, 0, 0, 0);
      if ((_DWORD)v13 == 236)
      {
        sub_100204558((uint64_t)a1, (unsigned __int8 *)&v33 + 4);
      }
      else
      {
        v14 = *a2;
        v15 = *a1;
        v17[0] = _NSConcreteStackBlock;
        v17[1] = 3221225472;
        v17[2] = sub_1002085EC;
        v17[3] = &unk_10080E7F8;
        v17[4] = a1;
        v17[5] = v14;
        v24 = v39;
        v25 = v40;
        v26[0] = v41[0];
        *(_OWORD *)((char *)v26 + 11) = *(_OWORD *)((char *)v41 + 11);
        v20 = v35;
        v21 = v36;
        v22 = v37;
        v23 = v38;
        v18 = v33;
        v19 = v34;
        dispatch_async(v15, v17);
      }
    }
    else if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_ERROR))
    {
      sub_1003DC70C();
    }
  }
}

uint64_t sub_1001FFA94(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD block[5];
  uint8_t buf[16];

  v2 = qword_100859130;
  if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "~PRRose()", buf, 2u);
  }
  v3 = *(NSObject **)a1;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1001FFBBC;
  block[3] = &unk_1007FA668;
  block[4] = a1;
  dispatch_sync(v3, block);
  sub_10001AE68(a1 + 1688);
  std::mutex::~mutex((std::mutex *)(a1 + 1592));
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 1544));
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 1400));
  std::mutex::~mutex((std::mutex *)(a1 + 1336));
  sub_1001D8660((uint64_t *)(a1 + 1320), 0, v4, v5, v6, v7, v8, v9);
  sub_10001AE68(a1 + 1304);
  sub_10001AE68(a1 + 1288);

  sub_10035FA44(a1 + 1240);
  sub_1003A7828(a1 + 32);

  return a1;
}

void sub_1001FFBBC(uint64_t a1)
{
  sub_1001FFBC4(*(_QWORD *)(a1 + 32));
}

void sub_1001FFBC4(uint64_t a1)
{
  NSObject *v2;
  void *v3;
  uint8_t v4[16];

  if (*(_QWORD *)(a1 + 16))
  {
    v2 = qword_100859130;
    if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "PRRose: Cancelling SecureRom timer", v4, 2u);
    }
    dispatch_source_cancel(*(dispatch_source_t *)(a1 + 16));
    v3 = *(void **)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;

  }
}

void sub_1001FFC48(NSObject **a1, int a2)
{
  NSObject *v2;
  _QWORD v3[5];
  int v4;

  v2 = *a1;
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1001FFCA4;
  v3[3] = &unk_100807908;
  v3[4] = a1;
  v4 = a2;
  dispatch_async(v2, v3);
}

void sub_1001FFCA4(uint64_t a1)
{
  sub_1001FFCB4(*(_QWORD *)(a1 + 32), *(_DWORD *)(a1 + 40));
}

void sub_1001FFCB4(uint64_t a1, int a2)
{
  NSObject *v4;
  void **v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  NSObject *v11;
  _QWORD v12[5];
  int v13;
  void *__p[2];
  char v15;
  uint8_t buf[4];
  void **v17;

  v4 = (id)qword_100859130;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    sub_10000BF04(__p, off_10080ED00[a2]);
    v5 = v15 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136315138;
    v17 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Deactivating Rose with reason: %s", buf, 0xCu);
    if (v15 < 0)
      operator delete(__p[0]);
  }

  dispatch_assert_queue_V2(*(dispatch_queue_t *)a1);
  v6 = (unsigned int *)(a1 + 1232);
  v7 = atomic_load((unsigned int *)(a1 + 1232));
  if (v7 == 8 || (v8 = atomic_load(v6), v8 == 10) || (v9 = atomic_load(v6)) == 0)
  {
    if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_ERROR))
      sub_1003DC784(v6);
  }
  else
  {
    v10 = atomic_load(v6);
    if (v10 == 11)
    {
      v11 = qword_100859130;
      if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(__p[0]) = 0;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "PRRose waking Rose from DSLP to properly power down", (uint8_t *)__p, 2u);
      }
      sub_10020156C(a1);
    }
    if (!sub_10020162C((NSObject **)a1) && os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_ERROR))
      sub_1003DC804();
    if (v10 == 11)
      sub_100201774(a1);
    else
      atomic_store(8u, v6);
    *(_DWORD *)(a1 + 1236) = a2;
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    v12[2] = sub_100201888;
    v12[3] = &unk_100807908;
    v12[4] = a1;
    v13 = a2;
    sub_100200F10((NSObject **)a1, v12);
  }
}

void sub_1001FFECC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1001FFEE4(NSObject **a1)
{
  NSObject *v1;
  uint64_t v2;
  _QWORD v4[6];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  char v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2020000000;
  v8 = 0;
  v1 = *a1;
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_1001FFF74;
  v4[3] = &unk_10080AC10;
  v4[4] = &v5;
  v4[5] = a1;
  dispatch_sync(v1, v4);
  v2 = *((unsigned __int8 *)v6 + 24);
  _Block_object_dispose(&v5, 8);
  return v2;
}

uint64_t sub_1001FFF74(uint64_t result)
{
  unsigned int v1;

  v1 = atomic_load((unsigned int *)(*(_QWORD *)(result + 40) + 1232));
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = v1 - 10 < 0xFFFFFFFE;
  return result;
}

uint64_t sub_1001FFF98(uint64_t a1, io_iterator_t a2)
{
  NSObject *v4;
  uint64_t result;
  __int128 v6;
  io_registry_entry_t v7;
  NSObject *v8;
  void *p_s1;
  uint64_t v10;
  int v11;
  size_t v12;
  size_t v13;
  unint64_t v14;
  void **v15;
  void **v16;
  uint64_t v17;
  unint64_t v18;
  void **v19;
  void **v20;
  NSObject *v21;
  __int128 v22;
  void *__s1;
  size_t __n;
  unsigned __int8 v25;
  void *__p[2];
  unsigned __int8 v27;
  void *v28[2];
  unsigned __int8 v29;
  uint8_t v30[4];
  void *v31;
  uint8_t buf[16];
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;

  v4 = qword_100859130;
  if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "_serviceMatchRoseSupervisor is called", buf, 2u);
  }
  if (!a1)
    sub_1003DC830();
  result = IOIteratorNext(a2);
  v7 = result;
  if ((_DWORD)result)
  {
    *(_QWORD *)&v6 = 136315138;
    v22 = v6;
    while (1)
    {
      v38 = 0u;
      v39 = 0u;
      v36 = 0u;
      v37 = 0u;
      v35 = 0u;
      v33 = 0u;
      v34 = 0u;
      *(_OWORD *)buf = 0u;
      sub_10000BF04(v28, "rose");
      sub_10000BF04(__p, "rose-supervisor");
      if (!IORegistryEntryGetName(v7, (char *)buf))
        break;
LABEL_48:
      IOObjectRelease(v7);
      if ((char)v27 < 0)
        operator delete(__p[0]);
      if ((char)v29 < 0)
        operator delete(v28[0]);
      result = IOIteratorNext(a2);
      v7 = result;
      if (!(_DWORD)result)
        return result;
    }
    sub_10000BF04(&__s1, (char *)buf);
    v8 = qword_100859130;
    if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_DEFAULT))
    {
      p_s1 = &__s1;
      if ((v25 & 0x80u) != 0)
        p_s1 = __s1;
      *(_DWORD *)v30 = v22;
      v31 = p_s1;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Found matching name: %s", v30, 0xCu);
    }
    v10 = v25;
    v11 = v25;
    v12 = __n;
    if ((v25 & 0x80u) == 0)
      v13 = v25;
    else
      v13 = __n;
    v14 = v29;
    if ((v29 & 0x80u) != 0)
      v14 = (unint64_t)v28[1];
    if (v13 == v14)
    {
      if ((v29 & 0x80u) == 0)
        v15 = v28;
      else
        v15 = (void **)v28[0];
      if ((v25 & 0x80) != 0)
      {
        if (memcmp(__s1, v15, __n))
          goto LABEL_27;
      }
      else if (v25)
      {
        v16 = &__s1;
        v17 = v25;
        while (*(unsigned __int8 *)v16 == *(unsigned __int8 *)v15)
        {
          v16 = (void **)((char *)v16 + 1);
          v15 = (void **)((char *)v15 + 1);
          if (!--v17)
            goto LABEL_39;
        }
        goto LABEL_27;
      }
LABEL_39:
      *(_BYTE *)(a1 + 1680) = 1;
      if (!*(_BYTE *)(a1 + 1681))
      {
LABEL_46:
        if ((v11 & 0x80) != 0)
          operator delete(__s1);
        goto LABEL_48;
      }
LABEL_43:
      v21 = qword_100859130;
      if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v30 = 0;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "both rose and rose-supervisor services are now matched.", v30, 2u);
      }
      sub_100200364(a1, 0);
      IOObjectRelease(*(_DWORD *)(a1 + 1660));
      IOObjectRelease(*(_DWORD *)(a1 + 1664));
      IONotificationPortDestroy(*(IONotificationPortRef *)(a1 + 1672));
      *(_BYTE *)(a1 + 1682) = 0;
      LOBYTE(v11) = v25;
      goto LABEL_46;
    }
LABEL_27:
    v18 = v27;
    if ((v27 & 0x80u) != 0)
      v18 = (unint64_t)__p[1];
    if (v13 != v18)
      goto LABEL_54;
    if ((v27 & 0x80u) == 0)
      v19 = __p;
    else
      v19 = (void **)__p[0];
    if ((v11 & 0x80) != 0)
    {
      if (memcmp(__s1, v19, v12))
        goto LABEL_54;
    }
    else if (v11)
    {
      v20 = &__s1;
      while (*(unsigned __int8 *)v20 == *(unsigned __int8 *)v19)
      {
        v20 = (void **)((char *)v20 + 1);
        v19 = (void **)((char *)v19 + 1);
        if (!--v10)
          goto LABEL_42;
      }
LABEL_54:
      abort_report_np("unexpected matching name", v22);
      __break(1u);
    }
LABEL_42:
    *(_BYTE *)(a1 + 1681) = 1;
    if (!*(_BYTE *)(a1 + 1680))
      goto LABEL_46;
    goto LABEL_43;
  }
  return result;
}

void sub_100200308(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a23 < 0)
    operator delete(__p);
  if (a29 < 0)
    operator delete(a24);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100200364(uint64_t a1, int a2)
{
  unsigned int *v4;
  unsigned int v5;
  NSObject *v6;
  NSObject *v8;
  const char *v9;
  const char *v10;
  const char *v11;
  NSObject *v12;
  const char *v13;
  const char *v14;
  const char *v15;
  NSString *v16;
  void *v17;
  void *v18;
  void *v19;
  unsigned __int8 v20;
  uint64_t v21;
  NSObject *v22;
  int v23;
  NSObject *v24;
  int v25;
  int v26;
  uint64_t v27;
  const char *v28;
  NSObject *v29;
  void *v30;
  void *v31;
  unsigned __int8 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _DWORD *v39;
  uint64_t v40;
  uint64_t v41;
  void *v44;
  int v45;
  NSObject *v46;
  _BOOL4 v47;
  int v48;
  uint64_t v49;
  void *__p[2];
  char v51;
  uint8_t v52[15];
  BOOL v53;
  _QWORD v54[5];
  Boolean keyExistsAndHasValidFormat;
  __int128 buf;
  uint64_t v57;

  if (!*(_QWORD *)(a1 + 1280))
    sub_1003DC844();
  if (!*(_QWORD *)(a1 + 1272))
    sub_1003DC86C();
  dispatch_assert_queue_V2(*(dispatch_queue_t *)a1);
  v4 = (unsigned int *)(a1 + 1232);
  v5 = atomic_load((unsigned int *)(a1 + 1232));
  v6 = qword_100859130;
  if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf) = 67109120;
    DWORD1(buf) = a2;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "PRRose: activateInternal (ActivationEvent: %d)", (uint8_t *)&buf, 8u);
  }
  if (v5 - 8 >= 4 && v5 != 0)
  {
    if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_ERROR))
      sub_1003DC894();
    return 0;
  }
  atomic_store(0, (unsigned int *)(a1 + 1232));
  keyExistsAndHasValidFormat = 0;
  *(_BYTE *)(a1 + 1328) = CFPreferencesGetAppBooleanValue(CFSTR("roseEnableFirmwareLogs"), CFSTR("com.apple.nearbyd"), &keyExistsAndHasValidFormat) != 0;
  if (keyExistsAndHasValidFormat)
  {
    v8 = qword_100859130;
    if (!os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_DEFAULT))
      goto LABEL_22;
    if (*(_BYTE *)(a1 + 1328))
      v9 = "enabled";
    else
      v9 = "disabled";
    LODWORD(buf) = 136315138;
    *(_QWORD *)((char *)&buf + 4) = v9;
    v10 = "PRRose: OVERRIDE: firmware logging config: %s";
  }
  else
  {
    *(_BYTE *)(a1 + 1328) = sub_1001FDD60();
    v8 = qword_100859130;
    if (!os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_DEFAULT))
      goto LABEL_22;
    if (*(_BYTE *)(a1 + 1328))
      v11 = "enabled";
    else
      v11 = "disabled";
    LODWORD(buf) = 136315138;
    *(_QWORD *)((char *)&buf + 4) = v11;
    v10 = "PRRose: firmware logging config: %s";
  }
  _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, v10, (uint8_t *)&buf, 0xCu);
LABEL_22:
  keyExistsAndHasValidFormat = 0;
  *(_BYTE *)(a1 + 1329) = CFPreferencesGetAppBooleanValue(CFSTR("roseSaveCrashLogs"), CFSTR("com.apple.nearbyd"), &keyExistsAndHasValidFormat) != 0;
  if (keyExistsAndHasValidFormat)
  {
    v12 = qword_100859130;
    if (!os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_DEFAULT))
      goto LABEL_34;
    if (*(_BYTE *)(a1 + 1329))
      v13 = "enabled";
    else
      v13 = "disabled";
    LODWORD(buf) = 136315138;
    *(_QWORD *)((char *)&buf + 4) = v13;
    v14 = "PRRose: OVERRIDE: crash log config: %s";
  }
  else
  {
    *(_BYTE *)(a1 + 1329) = sub_1001FDD60();
    v12 = qword_100859130;
    if (!os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_DEFAULT))
      goto LABEL_34;
    if (*(_BYTE *)(a1 + 1329))
      v15 = "enabled";
    else
      v15 = "disabled";
    LODWORD(buf) = 136315138;
    *(_QWORD *)((char *)&buf + 4) = v15;
    v14 = "PRRose: crash log config: %s";
  }
  _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, v14, (uint8_t *)&buf, 0xCu);
LABEL_34:
  if (sub_100200E00(a1))
  {
    v16 = NSTemporaryDirectory();
    v17 = (void *)objc_claimAutoreleasedReturnValue(v16);
    v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@/%s"), v17, "healAttemped.tok"));

    v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](NSFileManager, "defaultManager"));
    v20 = objc_msgSend(v19, "fileExistsAtPath:", v18);

    if ((v20 & 1) != 0 || !sub_1003AC324(a1 + 32))
    {
      if (a2 == 1)
      {
        if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_ERROR))
          sub_1003DC9F4();
        v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](NSFileManager, "defaultManager"));
        v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSData data](NSData, "data"));
        v32 = objc_msgSend(v30, "createFileAtPath:contents:attributes:", v18, v31, 0);

        if ((v32 & 1) == 0 && os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_ERROR))
          sub_1003DC9C8();
      }
      if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_ERROR))
        sub_1003DC99C();
      if (sub_1003A7850(a1 + 32, *(_BYTE *)(a1 + 1328), *(_BYTE *)(a1 + 1329))
        && !sub_1003AC564(a1 + 32, 0, v33, v34, v35, v36, v37, v38)
        && os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_ERROR))
      {
        sub_1003DC91C((unsigned int *)(a1 + 1232));
      }
      sub_1003A77E8(a1 + 32);
      usleep(0x30D40u);
      v39 = sub_100004784();
      if (sub_1000069CC(v39[144]))
      {
        v40 = *(_QWORD *)(a1 + 1688);
        if (v40)
          sub_100188934(v40, 0);
      }
      else
      {
        AnalyticsSendEventLazy(CFSTR("com.apple.nearbyd.RoseFailedForward2"), &stru_10080E750);
      }
      atomic_store(9u, (unsigned int *)(a1 + 1232));
      v54[0] = _NSConcreteStackBlock;
      v54[1] = 3221225472;
      v54[2] = sub_100200F8C;
      v54[3] = &unk_1007FA668;
      v54[4] = a1;
      sub_100200F10((NSObject **)a1, v54);

      return 0;
    }
    v21 = *(_QWORD *)(a1 + 1688);
    if (v21)
      sub_100188934(v21, 1);
    v22 = qword_100859130;
    if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf) = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "Rose successfully healed ^_^", (uint8_t *)&buf, 2u);
    }

  }
  if ((sub_1003AAC74() & 1) == 0)
  {
    if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_ERROR))
      sub_1003DCA4C();
    sub_1001FFCB4(a1, 2);
    v41 = 0;
    atomic_store(9u, (unsigned int *)(a1 + 1232));
    return v41;
  }
  if (!sub_1003A7850(a1 + 32, *(_BYTE *)(a1 + 1328), *(_BYTE *)(a1 + 1329)) || !sub_10035FA48(a1 + 1240))
  {
    if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_ERROR))
      sub_1003DCA20();
    v41 = 0;
    atomic_store(9u, v4);
    return v41;
  }
  v23 = sub_10019268C(*(NSObject ***)(a1 + 1528));
  v24 = qword_100859130;
  if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf) = 67109120;
    DWORD1(buf) = v23;
    _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "PRRose::shouldPowerOnRose %d ", (uint8_t *)&buf, 8u);
  }
  if ((v23 & 1) != 0)
    goto LABEL_98;
  v53 = 0;
  v25 = sub_1003AC638(a1 + 32, &v53);
  if (v53)
    v26 = 0;
  else
    v26 = v25;
  if (v26 != 1)
  {
LABEL_97:
    *(_DWORD *)(a1 + 1536) = 2;
LABEL_98:
    v49 = *(_QWORD *)(a1 + 1688);
    if (v49)
      sub_100188934(v49, 1);
    sub_10000BF04(__p, "");
    sub_100200FD0(a1, 0, (__int128 *)__p);
    if (v51 < 0)
      operator delete(__p[0]);
    return 1;
  }
  buf = 0uLL;
  v57 = 0;
  if (*(_BYTE *)(a1 + 1449))
  {
    v27 = qword_100859130;
    if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v52 = 0;
      v28 = "Rose is powered off, but deep sleep on demand is enabled";
      v29 = v27;
LABEL_55:
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, v28, v52, 2u);
    }
  }
  else if (sub_1003605CC(a1 + 1240, 0xD9u, (unint64_t *)&buf))
  {
    v44 = (void *)buf;
    if (*((_QWORD *)&buf + 1) - (_QWORD)buf != 1)
    {
      v41 = 0;
      v48 = 1;
      goto LABEL_94;
    }
    v45 = *(unsigned __int8 *)buf;
    v46 = qword_100859130;
    v47 = os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_DEFAULT);
    if (v45)
    {
      if (v47)
      {
        *(_WORD *)v52 = 0;
        _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEFAULT, "OTP workaround already completed. No need to boot rose again.", v52, 2u);
      }
      v48 = 0;
      atomic_store(0xAu, v4);
      v41 = 1;
      goto LABEL_93;
    }
    if (v47)
    {
      *(_WORD *)v52 = 0;
      v28 = "Rose is powered off, but the OTP workaround hasn't been done yet";
      v29 = v46;
      goto LABEL_55;
    }
  }
  v41 = 0;
  v48 = 1;
LABEL_93:
  v44 = (void *)buf;
LABEL_94:
  if (v44)
  {
    *((_QWORD *)&buf + 1) = v44;
    operator delete(v44);
  }
  if (v48)
    goto LABEL_97;
  return v41;
}

void sub_100200B3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;
  void *v19;

  v19 = *(void **)(v17 - 96);
  if (v19)
  {
    *(_QWORD *)(v17 - 88) = v19;
    operator delete(v19);
  }
  _Unwind_Resume(exception_object);
}

void sub_100200BB4(NSObject **a1, int a2)
{
  NSObject *v2;
  _QWORD v3[5];
  int v4;

  v2 = *a1;
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100200C10;
  v3[3] = &unk_100807908;
  v3[4] = a1;
  v4 = a2;
  dispatch_async(v2, v3);
}

void sub_100200C10(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  NSObject *v4;
  NSObject *v5;
  IONotificationPort *v6;
  IONotificationPort *v7;
  const __CFDictionary *v8;
  IONotificationPort *v9;
  const __CFDictionary *v10;
  uint64_t v11;
  int v12;
  uint8_t v13[16];
  uint8_t v14[16];
  uint8_t buf[16];

  v1 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(v1 + 1682))
  {
    v2 = qword_100859130;
    if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "PRRose: activation and matching is already in progress", v13, 2u);
    }
  }
  else if (*(_BYTE *)(v1 + 1681) && *(_BYTE *)(v1 + 1680))
  {
    v4 = qword_100859130;
    if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "PRRose activate: rose and rose service are already matched", buf, 2u);
    }
    sub_100200364(v1, *(_DWORD *)(a1 + 40));
  }
  else
  {
    v5 = qword_100859130;
    if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "PRRose activate: registering for a matching service", v14, 2u);
    }
    *(_BYTE *)(v1 + 1682) = 1;
    v6 = IONotificationPortCreate(kIOMainPortDefault);
    *(_QWORD *)(v1 + 1672) = v6;
    if (v6)
    {
      IONotificationPortSetDispatchQueue(v6, *(dispatch_queue_t *)v1);
      v7 = *(IONotificationPort **)(v1 + 1672);
      v8 = IOServiceNameMatching("rose");
      IOServiceAddMatchingNotification(v7, "IOServiceFirstMatch", v8, (IOServiceMatchingCallback)sub_1001FFF98, (void *)v1, (io_iterator_t *)(v1 + 1660));
      v9 = *(IONotificationPort **)(v1 + 1672);
      v10 = IOServiceNameMatching("rose-supervisor");
      IOServiceAddMatchingNotification(v9, "IOServiceFirstMatch", v10, (IOServiceMatchingCallback)sub_1001FFF98, (void *)v1, (io_iterator_t *)(v1 + 1664));
      sub_1001FFF98(v1, *(_DWORD *)(v1 + 1660));
      sub_1001FFF98(v1, *(_DWORD *)(v1 + 1664));
    }
    else
    {
      v11 = sub_1003DCA78();
      sub_100200DD8(v11, v12);
    }
  }
}

const char *sub_100200DD8(uint64_t a1, int a2)
{
  if ((a2 - 1) > 0xA)
    return "UnknownToHost";
  else
    return off_10080F090[a2 - 1];
}

uint64_t sub_100200E00(uint64_t a1)
{
  unsigned __int8 v2;

  v2 = 0;
  if ((sub_1003AC31C(a1 + 32, &v2) & 1) == 0 && os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_ERROR))
    sub_1003DCA8C();
  return v2;
}

NSDictionary *__cdecl sub_100200E5C(id a1)
{
  void *v1;
  void *v2;
  const __CFString *v4;
  void *v5;

  v4 = CFSTR("UpdateFailed");
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", 1));
  v5 = v1;
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v5, &v4, 1));

  return (NSDictionary *)v2;
}

void sub_100200EF8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100200F10(NSObject **a1, void *a2)
{
  id v3;
  NSObject *v4;
  id v5;
  _QWORD block[4];
  id v7;

  v3 = a2;
  v4 = *a1;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100210138;
  block[3] = &unk_10080AC38;
  v7 = v3;
  v5 = v3;
  dispatch_async(v4, block);

}

uint64_t sub_100200F8C(uint64_t a1)
{
  uint64_t v1;
  char v3;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1280);
  v3 = 7;
  return (*(uint64_t (**)(void))(v1 + 16))();
}

uint64_t sub_100200FC8(uint64_t a1, BOOL *a2)
{
  return sub_1003AC638(a1 + 32, a2);
}

void sub_100200FD0(uint64_t a1, uint64_t a2, __int128 *a3)
{
  NSObject *v6;
  unsigned int v7;
  unsigned int v8;
  const char *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  NSObject *v17;
  unsigned int v18;
  unsigned int v19;
  const char *v20;
  const char *v21;
  void *v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  void *__p[2];
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  __int128 __dst;
  uint64_t v42;
  uint8_t buf[4];
  const char *v44;
  __int16 v45;
  const char *v46;

  v6 = qword_100859130;
  if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_DEFAULT))
  {
    v7 = atomic_load((unsigned int *)(a1 + 1232));
    v8 = v7 - 1;
    if (v8 > 0xA)
      v9 = "UnknownToHost";
    else
      v9 = off_10080F090[v8];
    if ((a2 - 1) > 0xA)
      v10 = "HostStartup";
    else
      v10 = off_10080F038[(int)a2 - 1];
    *(_DWORD *)buf = 136315394;
    v44 = v9;
    v45 = 2080;
    v46 = v10;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "PRRose::setState, currState: [%s], event: [%s]", buf, 0x16u);
  }
  dispatch_assert_queue_V2(*(dispatch_queue_t *)a1);
  v16 = atomic_load((unsigned int *)(a1 + 1232));
  switch(v16)
  {
    case 0u:
      if (*((char *)a3 + 23) < 0)
      {
        sub_100004678(&__dst, *(void **)a3, *((_QWORD *)a3 + 1));
      }
      else
      {
        __dst = *a3;
        v42 = *((_QWORD *)a3 + 2);
      }
      sub_1002086B8(a1, a2, (uint64_t)&__dst);
      if (SHIBYTE(v42) < 0)
      {
        v22 = (void *)__dst;
        goto LABEL_68;
      }
      break;
    case 1u:
      if (*((char *)a3 + 23) < 0)
      {
        sub_100004678(&v39, *(void **)a3, *((_QWORD *)a3 + 1));
      }
      else
      {
        v39 = *a3;
        v40 = *((_QWORD *)a3 + 2);
      }
      sub_1002091DC(a1, a2, &v39);
      if (SHIBYTE(v40) < 0)
      {
        v22 = (void *)v39;
        goto LABEL_68;
      }
      break;
    case 2u:
      if (*((char *)a3 + 23) < 0)
      {
        sub_100004678(&v37, *(void **)a3, *((_QWORD *)a3 + 1));
      }
      else
      {
        v37 = *a3;
        v38 = *((_QWORD *)a3 + 2);
      }
      sub_1002095F0(a1, a2, (uint64_t)&v37);
      if (SHIBYTE(v38) < 0)
      {
        v22 = (void *)v37;
        goto LABEL_68;
      }
      break;
    case 3u:
      if (*((char *)a3 + 23) < 0)
      {
        sub_100004678(&v35, *(void **)a3, *((_QWORD *)a3 + 1));
      }
      else
      {
        v35 = *a3;
        v36 = *((_QWORD *)a3 + 2);
      }
      sub_10020BE70(a1, a2, (uint64_t)&v35, v11, v12, v13, v14, v15);
      if (SHIBYTE(v36) < 0)
      {
        v22 = (void *)v35;
        goto LABEL_68;
      }
      break;
    case 4u:
      if (*((char *)a3 + 23) < 0)
      {
        sub_100004678(&v33, *(void **)a3, *((_QWORD *)a3 + 1));
      }
      else
      {
        v33 = *a3;
        v34 = *((_QWORD *)a3 + 2);
      }
      sub_10020C358(a1, a2);
      if (SHIBYTE(v34) < 0)
      {
        v22 = (void *)v33;
        goto LABEL_68;
      }
      break;
    case 5u:
    case 9u:
      v17 = qword_100859130;
      if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_DEFAULT))
      {
        v18 = atomic_load((unsigned int *)(a1 + 1232));
        v19 = v18 - 1;
        if (v19 > 0xA)
          v20 = "UnknownToHost";
        else
          v20 = off_10080F090[v19];
        if ((a2 - 1) > 0xA)
          v21 = "HostStartup";
        else
          v21 = off_10080F038[(int)a2 - 1];
        *(_DWORD *)buf = 136315394;
        v44 = v20;
        v45 = 2080;
        v46 = v21;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "PRRose unexpected event while in state: %s, event: %s, ignoring", buf, 0x16u);
      }
      break;
    case 6u:
      if (*((char *)a3 + 23) < 0)
      {
        sub_100004678(&v31, *(void **)a3, *((_QWORD *)a3 + 1));
      }
      else
      {
        v31 = *a3;
        v32 = *((_QWORD *)a3 + 2);
      }
      sub_10020C7DC(a1, a2, &v31);
      if (SHIBYTE(v32) < 0)
      {
        v22 = (void *)v31;
        goto LABEL_68;
      }
      break;
    case 7u:
      if (*((char *)a3 + 23) < 0)
      {
        sub_100004678(__p, *(void **)a3, *((_QWORD *)a3 + 1));
      }
      else
      {
        *(_OWORD *)__p = *a3;
        v30 = *((_QWORD *)a3 + 2);
      }
      sub_10020CD10(a1, a2);
      if (SHIBYTE(v30) < 0)
      {
        v22 = __p[0];
        goto LABEL_68;
      }
      break;
    case 8u:
      if (*((char *)a3 + 23) < 0)
      {
        sub_100004678(&v27, *(void **)a3, *((_QWORD *)a3 + 1));
      }
      else
      {
        v27 = *a3;
        v28 = *((_QWORD *)a3 + 2);
      }
      sub_10020D004(a1, a2);
      if (SHIBYTE(v28) < 0)
      {
        v22 = (void *)v27;
        goto LABEL_68;
      }
      break;
    case 0xAu:
      if (*((char *)a3 + 23) < 0)
      {
        sub_100004678(&v25, *(void **)a3, *((_QWORD *)a3 + 1));
      }
      else
      {
        v25 = *a3;
        v26 = *((_QWORD *)a3 + 2);
      }
      sub_10020D45C(a1, a2, (uint64_t)&v25);
      if (SHIBYTE(v26) < 0)
      {
        v22 = (void *)v25;
        goto LABEL_68;
      }
      break;
    case 0xBu:
      if (*((char *)a3 + 23) < 0)
      {
        sub_100004678(&v23, *(void **)a3, *((_QWORD *)a3 + 1));
      }
      else
      {
        v23 = *a3;
        v24 = *((_QWORD *)a3 + 2);
      }
      sub_10020D630(a1, a2);
      if (SHIBYTE(v24) < 0)
      {
        v22 = (void *)v23;
LABEL_68:
        operator delete(v22);
      }
      break;
    default:
      return;
  }
}

void sub_100201490(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,char a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,char a44,uint64_t a45,int a46,__int16 a47,char a48,char a49,uint64_t a50,char a51,uint64_t a52,int a53,__int16 a54,char a55,char a56)
{
  if (a35 < 0)
    operator delete(a30);
  _Unwind_Resume(exception_object);
}

void sub_10020156C(uint64_t a1)
{
  NSObject *v2;
  void *__p[2];
  char v4;
  uint8_t buf[16];

  v2 = qword_100859130;
  if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "PRRose: powerOnInternal", buf, 2u);
  }
  dispatch_assert_queue_V2(*(dispatch_queue_t *)a1);
  *(_DWORD *)(a1 + 1536) = 1;
  sub_10000BF04(__p, "");
  sub_100200FD0(a1, 10, (__int128 *)__p);
  if (v4 < 0)
    operator delete(__p[0]);
}

void sub_100201610(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_10020162C(NSObject **a1)
{
  NSObject *v2;
  _BOOL8 v3;
  _QWORD v5[5];
  void *__p;
  void *v7;
  uint64_t v8;
  uint8_t buf[8];
  void *v10;
  uint64_t v11;

  v2 = qword_100859130;
  if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "PRRose: sendHostGoodbye", buf, 2u);
  }
  *(_QWORD *)buf = 0;
  v10 = 0;
  v11 = 0;
  __p = 0;
  v7 = 0;
  v8 = 0;
  v3 = sub_10035FF18((uint64_t)(a1 + 155), 0x29u, (uint64_t)&__p, (unint64_t *)buf);
  if (__p)
  {
    v7 = __p;
    operator delete(__p);
  }
  if (v3)
  {
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    v5[2] = sub_100206E24;
    v5[3] = &unk_1007FA668;
    v5[4] = a1;
    sub_100200F10(a1, v5);
  }
  else if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_ERROR))
  {
    sub_1003DCAB8();
  }
  if (*(_QWORD *)buf)
  {
    v10 = *(void **)buf;
    operator delete(*(void **)buf);
  }
  return v3;
}

void sub_100201748(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, void *a17, uint64_t a18)
{
  if (__p)
    operator delete(__p);
  if (a17)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

void sub_100201774(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  uint8_t v11[16];
  uint8_t buf[16];

  v2 = qword_100859130;
  if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "PRRose: executePowerOff starting.", buf, 2u);
  }
  dispatch_assert_queue_V2(*(dispatch_queue_t *)a1);
  if (sub_1003AC564(a1 + 32, 0, v3, v4, v5, v6, v7, v8))
  {
    atomic_store(0xAu, (unsigned int *)(a1 + 1232));
    dispatch_async(*(dispatch_queue_t *)(a1 + 8), &stru_10080E908);
    dispatch_assert_queue_V2(*(dispatch_queue_t *)a1);
    *(_DWORD *)(a1 + 1536) = 0;
    v9 = qword_100859130;
    if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "PRRose: executePowerOff complete.", v11, 2u);
    }
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_ERROR))
      sub_1003DCAE4();
    v10 = abort_report_np("PRRose:: Failed to Power off Rose");
    sub_100201888(v10);
  }
}

uint64_t sub_100201888(uint64_t a1)
{
  uint64_t v1;
  char v3;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1280);
  v3 = 7;
  return (*(uint64_t (**)(uint64_t, char *, unint64_t))(v1 + 16))(v1, &v3, *(unsigned int *)(a1 + 40) | (unint64_t)&_mh_execute_header);
}

uint64_t sub_1002018C8(NSObject **a1)
{
  NSObject *v1;
  uint64_t v2;
  _QWORD v4[6];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  char v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2020000000;
  v8 = 0;
  v1 = *a1;
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_100201958;
  v4[3] = &unk_10080AC10;
  v4[4] = &v5;
  v4[5] = a1;
  dispatch_sync(v1, v4);
  v2 = *((unsigned __int8 *)v6 + 24);
  _Block_object_dispose(&v5, 8);
  return v2;
}

void sub_100201958(uint64_t a1)
{
  uint64_t v2;
  NSString *v3;
  void *v4;
  void *v5;
  void *v6;
  unsigned int v7;
  NSObject *v8;
  _BOOL4 v9;
  uint8_t v10[16];
  uint8_t buf[16];

  v2 = *(_QWORD *)(a1 + 40);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = sub_100200E00(v2);
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    v3 = NSTemporaryDirectory();
    v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@/%s"), v4, "healAttemped.tok"));

    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](NSFileManager, "defaultManager"));
    v7 = objc_msgSend(v6, "fileExistsAtPath:", v5);

    v8 = qword_100859130;
    v9 = os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_DEFAULT);
    if (v7)
    {
      if (v9)
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Healing skipped as it was attempted before without success...", buf, 2u);
      }
    }
    else
    {
      if (v9)
      {
        *(_WORD *)v10 = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Attempting healing for the first time", v10, 2u);
      }
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = sub_1003AC324(v2 + 32) ^ 1;
    }

  }
}

void sub_100201AA4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t sub_100201ACC(uint64_t a1)
{
  int v2;
  int v3;
  void *__p[2];
  char v6;
  _BYTE v7[104];
  int v8;
  _BYTE v9[104];

  dispatch_assert_queue_V2(*(dispatch_queue_t *)a1);
  sub_1002A42D0(*(_QWORD *)(a1 + 1288), (uint64_t)&v8);
  sub_100210574(v7, (uint64_t)v9);
  v2 = v8;
  if (v8 || !v7[96])
  {
    if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_ERROR))
      sub_1003DCB3C();
    if (v2 == 1)
      v3 = 3;
    else
      v3 = 4 * (v2 == 2);
    sub_1001FFCB4(a1, v3);
  }
  else if ((sub_100201C60((_BYTE *)a1, (uint64_t)v7) & 1) == 0)
  {
    if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_ERROR))
      sub_1003DCB10();
    sub_10000BF04(__p, "Failed to apply config parameters");
    sub_100203494(a1, 0, (std::string::size_type)__p);
    if (v6 < 0)
      operator delete(__p[0]);
  }
  sub_100210808((uint64_t)v7);
  return sub_100210808((uint64_t)v9);
}

void sub_100201C18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (a15 < 0)
    operator delete(__p);
  sub_100210808((uint64_t)&a16);
  sub_100210808(v16);
  _Unwind_Resume(a1);
}

uint64_t sub_100201C60(_BYTE *a1, uint64_t a2)
{
  int v2;
  _WORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  BOOL v7;
  NSObject *v8;
  int v9;
  __int128 *v10;
  __int128 *v11;
  void *p_p;
  NSObject *v13;
  int v14;
  NSObject *v15;
  uint64_t v16;
  unsigned int v17;
  NSObject *v18;
  _BOOL4 v19;
  const char *v20;
  NSObject *v21;
  NSObject *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  __int128 *v27;
  _WORD *v28;
  __int128 v29;
  int v30;
  __int16 v31;
  NSObject *v32;
  _WORD *v33;
  NSObject *v34;
  BOOL v35;
  __int128 *v36;
  uint64_t v37;
  BOOL v38;
  uint8_t *v39;
  uint8_t *v40;
  NSObject *v41;
  int v42;
  NSObject *v43;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  const void *v48;
  char *v49;
  NSObject *v50;
  NSObject *v51;
  BOOL v52;
  __int128 *v53;
  uint64_t v54;
  NSObject *v55;
  BOOL v56;
  uint8_t *v57;
  uint8_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  const void *v62;
  char *v63;
  NSObject *v64;
  NSObject *v65;
  BOOL v66;
  __int128 *v67;
  uint64_t v68;
  NSObject *v69;
  BOOL v70;
  uint8_t *v71;
  uint8_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  const void *v76;
  char *v77;
  NSObject *v78;
  NSObject *v79;
  BOOL v80;
  __int128 *v81;
  uint64_t v82;
  NSObject *v83;
  BOOL v84;
  uint8_t *v85;
  uint8_t *v86;
  int v87;
  const char *v88;
  void *v89;
  char v91;
  unsigned int v93;
  int v94;
  char v95;
  char v96[15];
  char v97;
  char v98[15];
  char v99;
  _BYTE v100[15];
  char *v101;
  _BYTE *v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  __int16 v107;
  char v108;
  void *__p;
  _BYTE *v110;
  uint64_t v111;
  char *v112;
  _BYTE *v113;
  char *v114;
  uint8_t v115[8];
  void *v116;
  _BYTE *v117;
  uint64_t v118;
  void *v119;
  _BYTE *v120;
  void *v121;
  void *v122;
  _WORD *v123;
  uint8_t v124[8];
  void *v125;
  _BYTE *v126;
  char **v127;
  char v128;
  __int128 v129;
  uint64_t v130;
  __int128 *v131;
  uint8_t buf[40];
  _QWORD v133[3];
  char v134;
  uint64_t v135;
  _QWORD v136[2];
  uint64_t v137;

  v89 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  sub_100210860((uint64_t)v124, 4, *(_BYTE *)a2);
  v2 = *(unsigned __int16 *)(a2 + 80);
  v3 = operator new(2uLL);
  v121 = v3;
  *v3 = v2;
  v122 = v3 + 1;
  v123 = v3 + 1;
  sub_1002108D8(&v118, 22, (__int16 **)&v121);
  sub_100210860((uint64_t)v115, 21, 2);
  buf[0] = v124[0];
  memset(&buf[8], 0, 24);
  sub_1001530EC(&buf[8], v125, (uint64_t)v126, v126 - (_BYTE *)v125);
  buf[32] = v115[0];
  memset(v133, 0, sizeof(v133));
  sub_1001530EC(v133, v116, (uint64_t)v117, v117 - (_BYTE *)v116);
  v134 = v118;
  v136[0] = 0;
  v136[1] = 0;
  v135 = 0;
  sub_1001530EC(&v135, v119, (uint64_t)v120, v120 - (_BYTE *)v119);
  v112 = 0;
  v113 = 0;
  v114 = 0;
  *(_QWORD *)&v129 = &v112;
  BYTE8(v129) = 0;
  v112 = (char *)operator new(0x60uLL);
  v113 = v112;
  v114 = v112 + 96;
  v4 = 0;
  v113 = (_BYTE *)sub_100210EC0((uint64_t)&v114, (uint64_t)buf, (uint64_t)&v137, (uint64_t)v112);
  do
  {
    v5 = (void *)v136[v4 - 1];
    if (v5)
    {
      v136[v4] = v5;
      operator delete(v5);
    }
    v4 -= 4;
  }
  while (v4 != -12);
  memset(buf, 0, 24);
  sub_100210B80(buf, (uint64_t)v112, (uint64_t)v113, (v113 - v112) >> 5);
  v6 = (uint64_t)(a1 + 32);
  v7 = sub_1003A98C0((uint64_t)(a1 + 32), (uint64_t *)buf);
  *(_QWORD *)&v129 = buf;
  sub_100153338((void ***)&v129);
  if (!v7)
  {
    if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_ERROR))
      sub_1003DCC70();
    v16 = 0;
    ++a1[1516];
    goto LABEL_88;
  }
  v8 = (id)qword_100859130;
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    sub_10036B2B8(v124);
    v9 = SHIBYTE(v130);
    v10 = (__int128 *)v129;
    sub_10036B2B8(v115);
    v11 = &v129;
    if (v9 < 0)
      v11 = v10;
    if (v111 >= 0)
      p_p = &__p;
    else
      p_p = __p;
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = v11;
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = p_p;
    *(_WORD *)&buf[22] = 1024;
    *(_DWORD *)&buf[24] = v2;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "PRRose::setConfigParameters: debugLevelParam (%s), cirMessageVersionParam (%s), coexModeParam,%d,", buf, 0x1Cu);
    if (SHIBYTE(v111) < 0)
      operator delete(__p);
    if (SHIBYTE(v130) < 0)
      operator delete((void *)v129);
  }

  if (!sub_1002053D8((uint64_t)a1, 1))
  {
    if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_ERROR))
      sub_1003DCC44();
    v16 = 0;
    ++a1[1517];
    goto LABEL_88;
  }
  v13 = (id)qword_100859130;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "PRRose::setConfigParameters: _updateCoexGlobalEventStatus, success", buf, 2u);
  }

  LOBYTE(v107) = 0;
  v108 = 0;
  v14 = *((_DWORD *)sub_100004784() + 187);
  if (v14 != 1)
  {
    if (v14 != 2)
    {
      if (!v14)
      {
        if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_FAULT))
          sub_1003DCC18();
        v15 = qword_100859130;
        if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/Proximity/Libraries/DaemonCore/Ranging/Providers/Rose/IO/PRRose.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1212;
          *(_WORD *)&buf[18] = 2080;
          *(_QWORD *)&buf[20] = "applyConfigOptions";
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "%s:%d: assertion failure in %s", buf, 0x1Cu);
        }
        abort();
      }
LABEL_80:
      v41 = (id)qword_100859130;
      if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, "PRRose:applyConfigOptions,regulatory,sendingPowerTable,success", buf, 2u);
      }
      goto LABEL_82;
    }
    v17 = objc_msgSend(v89, "BOOLForKey:", CFSTR("NBUWBTxPowerTablesMaxOverride"));
    v18 = (id)qword_100859130;
    v19 = os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT);
    v93 = v17;
    if (v17)
    {
      if (v19)
      {
        *(_WORD *)buf = 0;
        v20 = "PRRose:applyConfigOptions,regulatory,sendingPowerTable,nbUwbTxPowerTablesMaxOverride";
LABEL_99:
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, v20, buf, 2u);
      }
    }
    else if (v19)
    {
      *(_WORD *)buf = 0;
      v20 = "PRRose:applyConfigOptions,regulatory,sendingPowerTable";
      goto LABEL_99;
    }

    v45 = *(_QWORD *)(a2 + 8);
    v46 = *(_QWORD *)(a2 + 16);
    if (v45 != v46)
    {
      v47 = v45 + 8;
      v91 = 1;
      while (1)
      {
        v48 = *(const void **)(v47 - 8);
        __p = 0;
        v110 = 0;
        v111 = 0;
        sub_10003A474(&__p, v48, (uint64_t)v48 + 33, 0x21uLL);
        if (v93)
        {
          v49 = (char *)__p;
          if (v110 - (_BYTE *)__p != 33)
            __assert_rtn("applyConfigOptions", "PRRose.mm", 1137, "r2UWBPowerTableEntry.size() == sizeof(set_cfg_pwrtbl_entry_v3_t)");
          if (*(_BYTE *)__p != 3)
            __assert_rtn("applyConfigOptions", "PRRose.mm", 1139, "ptEntry->pwr_tbl_ver == SET_CFG_PWRTBL_ENTRY_V3_VERSION");
          v50 = (id)qword_100859130;
          if (os_log_type_enabled(v50, OS_LOG_TYPE_DEBUG))
          {
            sub_100205770((uint64_t *)&__p);
            v57 = buf;
            if ((buf[23] & 0x80u) != 0)
              v57 = *(uint8_t **)buf;
            LODWORD(v129) = 136380675;
            *(_QWORD *)((char *)&v129 + 4) = v57;
            _os_log_debug_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_DEBUG, "PwrTblMax before: %{private}s", (uint8_t *)&v129, 0xCu);
            if ((char)buf[23] < 0)
              operator delete(*(void **)buf);
          }

          *(_QWORD *)(v49 + 19) = 0x50005000500050;
          v51 = (id)qword_100859130;
          if (os_log_type_enabled(v51, OS_LOG_TYPE_DEBUG))
          {
            sub_100205770((uint64_t *)&__p);
            v58 = buf;
            if ((buf[23] & 0x80u) != 0)
              v58 = *(uint8_t **)buf;
            LODWORD(v129) = 136380675;
            *(_QWORD *)((char *)&v129 + 4) = v58;
            _os_log_debug_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_DEBUG, "           after: %{private}s", (uint8_t *)&v129, 0xCu);
            if ((char)buf[23] < 0)
              operator delete(*(void **)buf);
          }

        }
        buf[0] = 41;
        memset(&buf[8], 0, 24);
        sub_1001530EC(&buf[8], __p, (uint64_t)v110, v110 - (_BYTE *)__p);
        LOBYTE(v129) = buf[0];
        v130 = 0;
        v131 = 0;
        *((_QWORD *)&v129 + 1) = 0;
        sub_1001530EC((_QWORD *)&v129 + 1, *(const void **)&buf[8], *(uint64_t *)&buf[16], *(_QWORD *)&buf[16] - *(_QWORD *)&buf[8]);
        v101 = 0;
        v102 = 0;
        v103 = 0;
        v127 = &v101;
        v128 = 0;
        v101 = (char *)operator new(0x20uLL);
        v102 = v101;
        v103 = v101 + 32;
        v102 = (_BYTE *)sub_100210EC0((uint64_t)&v103, (uint64_t)&v129, (uint64_t)buf, (uint64_t)v101);
        v105 = 0;
        v106 = 0;
        v104 = 0;
        sub_100210B80(&v104, (uint64_t)v101, (uint64_t)v102, (v102 - v101) >> 5);
        v127 = &v101;
        sub_100153338((void ***)&v127);
        if (*((_QWORD *)&v129 + 1))
        {
          v130 = *((_QWORD *)&v129 + 1);
          operator delete(*((void **)&v129 + 1));
        }
        *(_QWORD *)&v129 = off_10080EB20;
        *((_QWORD *)&v129 + 1) = &v107;
        v131 = &v129;
        v52 = sub_1003A9A64(v6, &v104, (uint64_t)&v129);
        v53 = v131;
        if (v131 == &v129)
          break;
        if (v131)
        {
          v54 = 5;
LABEL_114:
          (*(void (**)(void))(*(_QWORD *)v53 + 8 * v54))();
        }
        if (!v52)
        {
          v55 = (id)qword_100859130;
          if (os_log_type_enabled(v55, OS_LOG_TYPE_ERROR))
            sub_1003DCB94(&v99, v100);

          v91 = 0;
        }
        *(_QWORD *)&v129 = &v104;
        sub_100153338((void ***)&v129);
        if (*(_QWORD *)&buf[8])
        {
          *(_QWORD *)&buf[16] = *(_QWORD *)&buf[8];
          operator delete(*(void **)&buf[8]);
        }
        if (__p)
        {
          v110 = __p;
          operator delete(__p);
        }
        v56 = v47 != v46 && v52;
        v47 += 8;
        if (!v56)
          goto LABEL_137;
      }
      v53 = &v129;
      v54 = 4;
      goto LABEL_114;
    }
    v91 = 1;
LABEL_137:
    v59 = *(_QWORD *)(a2 + 56);
    v60 = *(_QWORD *)(a2 + 64);
    if (v59 != v60)
    {
      v61 = v59 + 8;
      while (1)
      {
        v62 = *(const void **)(v61 - 8);
        __p = 0;
        v110 = 0;
        v111 = 0;
        sub_10003A474(&__p, v62, (uint64_t)v62 + 18, 0x12uLL);
        if (v93)
        {
          v63 = (char *)__p;
          if (v110 - (_BYTE *)__p != 18)
            __assert_rtn("applyConfigOptions", "PRRose.mm", 1164, "r2NBPowerTableEntry.size() == sizeof(set_cfg_nb_reg_tbl_entry_t)");
          if (*(_BYTE *)__p != 1)
            __assert_rtn("applyConfigOptions", "PRRose.mm", 1166, "ptEntry->ver_type == SET_CFG_NB_REG_TBL_ENTRY_VERSION");
          v64 = (id)qword_100859130;
          if (os_log_type_enabled(v64, OS_LOG_TYPE_DEBUG))
          {
            sub_100205770((uint64_t *)&__p);
            v71 = buf;
            if ((buf[23] & 0x80u) != 0)
              v71 = *(uint8_t **)buf;
            LODWORD(v129) = 136380675;
            *(_QWORD *)((char *)&v129 + 4) = v71;
            _os_log_debug_impl((void *)&_mh_execute_header, v64, OS_LOG_TYPE_DEBUG, "NBRegPwrTblMax before: %{private}s", (uint8_t *)&v129, 0xCu);
            if ((char)buf[23] < 0)
              operator delete(*(void **)buf);
          }

          *(_DWORD *)(v63 + 6) = 26214800;
          *(_DWORD *)(v63 + 14) = 26214800;
          v65 = (id)qword_100859130;
          if (os_log_type_enabled(v65, OS_LOG_TYPE_DEBUG))
          {
            sub_100205770((uint64_t *)&__p);
            v72 = buf;
            if ((buf[23] & 0x80u) != 0)
              v72 = *(uint8_t **)buf;
            LODWORD(v129) = 136380675;
            *(_QWORD *)((char *)&v129 + 4) = v72;
            _os_log_debug_impl((void *)&_mh_execute_header, v65, OS_LOG_TYPE_DEBUG, "              after: %{private}s", (uint8_t *)&v129, 0xCu);
            if ((char)buf[23] < 0)
              operator delete(*(void **)buf);
          }

        }
        buf[0] = 46;
        memset(&buf[8], 0, 24);
        sub_1001530EC(&buf[8], __p, (uint64_t)v110, v110 - (_BYTE *)__p);
        LOBYTE(v129) = buf[0];
        v130 = 0;
        v131 = 0;
        *((_QWORD *)&v129 + 1) = 0;
        sub_1001530EC((_QWORD *)&v129 + 1, *(const void **)&buf[8], *(uint64_t *)&buf[16], *(_QWORD *)&buf[16] - *(_QWORD *)&buf[8]);
        v101 = 0;
        v102 = 0;
        v103 = 0;
        v127 = &v101;
        v128 = 0;
        v101 = (char *)operator new(0x20uLL);
        v102 = v101;
        v103 = v101 + 32;
        v102 = (_BYTE *)sub_100210EC0((uint64_t)&v103, (uint64_t)&v129, (uint64_t)buf, (uint64_t)v101);
        v105 = 0;
        v106 = 0;
        v104 = 0;
        sub_100210B80(&v104, (uint64_t)v101, (uint64_t)v102, (v102 - v101) >> 5);
        v127 = &v101;
        sub_100153338((void ***)&v127);
        if (*((_QWORD *)&v129 + 1))
        {
          v130 = *((_QWORD *)&v129 + 1);
          operator delete(*((void **)&v129 + 1));
        }
        *(_QWORD *)&v129 = off_10080EB20;
        *((_QWORD *)&v129 + 1) = &v107;
        v131 = &v129;
        v66 = sub_1003A9A64(v6, &v104, (uint64_t)&v129);
        v67 = v131;
        if (v131 == &v129)
          break;
        if (v131)
        {
          v68 = 5;
LABEL_151:
          (*(void (**)(void))(*(_QWORD *)v67 + 8 * v68))();
        }
        if (!v66)
        {
          v69 = (id)qword_100859130;
          if (os_log_type_enabled(v69, OS_LOG_TYPE_ERROR))
            sub_1003DCBEC(&v97, v98);

          v91 = 0;
        }
        *(_QWORD *)&v129 = &v104;
        sub_100153338((void ***)&v129);
        if (*(_QWORD *)&buf[8])
        {
          *(_QWORD *)&buf[16] = *(_QWORD *)&buf[8];
          operator delete(*(void **)&buf[8]);
        }
        if (__p)
        {
          v110 = __p;
          operator delete(__p);
        }
        v70 = v61 != v60 && v66;
        v61 += 8;
        if (!v70)
          goto LABEL_173;
      }
      v67 = &v129;
      v68 = 4;
      goto LABEL_151;
    }
LABEL_173:
    v73 = *(_QWORD *)(a2 + 32);
    v74 = *(_QWORD *)(a2 + 40);
    if (v73 == v74)
    {
LABEL_209:
      if ((v91 & 1) != 0)
        goto LABEL_80;
      goto LABEL_210;
    }
    v75 = v73 + 8;
    while (1)
    {
      v76 = *(const void **)(v75 - 8);
      __p = 0;
      v110 = 0;
      v111 = 0;
      sub_10003A474(&__p, v76, (uint64_t)v76 + 38, 0x26uLL);
      if (v93)
      {
        v77 = (char *)__p;
        if (v110 - (_BYTE *)__p != 38)
          __assert_rtn("applyConfigOptions", "PRRose.mm", 1188, "r2NBSARTableEntry.size() == sizeof(set_cfg_nb_sar_tbl_entry_t)");
        if (*(_BYTE *)__p != 2)
          __assert_rtn("applyConfigOptions", "PRRose.mm", 1190, "sarEntry->ver_type == SET_CFG_NB_SAR_TBL_ENTRY_VERSION");
        v78 = (id)qword_100859130;
        if (os_log_type_enabled(v78, OS_LOG_TYPE_DEBUG))
        {
          sub_100205770((uint64_t *)&__p);
          v85 = buf;
          if ((buf[23] & 0x80u) != 0)
            v85 = *(uint8_t **)buf;
          LODWORD(v129) = 136380675;
          *(_QWORD *)((char *)&v129 + 4) = v85;
          _os_log_debug_impl((void *)&_mh_execute_header, v78, OS_LOG_TYPE_DEBUG, "NBSARTblMax before: %{private}s", (uint8_t *)&v129, 0xCu);
          if ((char)buf[23] < 0)
            operator delete(*(void **)buf);
        }

        memset_pattern16(v77 + 6, &unk_100472C70, 0x20uLL);
        v79 = (id)qword_100859130;
        if (os_log_type_enabled(v79, OS_LOG_TYPE_DEBUG))
        {
          sub_100205770((uint64_t *)&__p);
          v86 = buf;
          if ((buf[23] & 0x80u) != 0)
            v86 = *(uint8_t **)buf;
          LODWORD(v129) = 136380675;
          *(_QWORD *)((char *)&v129 + 4) = v86;
          _os_log_debug_impl((void *)&_mh_execute_header, v79, OS_LOG_TYPE_DEBUG, "           after: %{private}s", (uint8_t *)&v129, 0xCu);
          if ((char)buf[23] < 0)
            operator delete(*(void **)buf);
        }

      }
      buf[0] = 47;
      memset(&buf[8], 0, 24);
      sub_1001530EC(&buf[8], __p, (uint64_t)v110, v110 - (_BYTE *)__p);
      LOBYTE(v129) = buf[0];
      v130 = 0;
      v131 = 0;
      *((_QWORD *)&v129 + 1) = 0;
      sub_1001530EC((_QWORD *)&v129 + 1, *(const void **)&buf[8], *(uint64_t *)&buf[16], *(_QWORD *)&buf[16] - *(_QWORD *)&buf[8]);
      v101 = 0;
      v102 = 0;
      v103 = 0;
      v127 = &v101;
      v128 = 0;
      v101 = (char *)operator new(0x20uLL);
      v102 = v101;
      v103 = v101 + 32;
      v102 = (_BYTE *)sub_100210EC0((uint64_t)&v103, (uint64_t)&v129, (uint64_t)buf, (uint64_t)v101);
      v105 = 0;
      v106 = 0;
      v104 = 0;
      sub_100210B80(&v104, (uint64_t)v101, (uint64_t)v102, (v102 - v101) >> 5);
      v127 = &v101;
      sub_100153338((void ***)&v127);
      if (*((_QWORD *)&v129 + 1))
      {
        v130 = *((_QWORD *)&v129 + 1);
        operator delete(*((void **)&v129 + 1));
      }
      *(_QWORD *)&v129 = off_10080EB20;
      *((_QWORD *)&v129 + 1) = &v107;
      v131 = &v129;
      v80 = sub_1003A9A64(v6, &v104, (uint64_t)&v129);
      v81 = v131;
      if (v131 == &v129)
        break;
      if (v131)
      {
        v82 = 5;
LABEL_187:
        (*(void (**)(void))(*(_QWORD *)v81 + 8 * v82))();
      }
      if (!v80)
      {
        v83 = (id)qword_100859130;
        if (os_log_type_enabled(v83, OS_LOG_TYPE_ERROR))
          sub_1003DCBC0(&v95, v96);

        v91 = 0;
      }
      *(_QWORD *)&v129 = &v104;
      sub_100153338((void ***)&v129);
      if (*(_QWORD *)&buf[8])
      {
        *(_QWORD *)&buf[16] = *(_QWORD *)&buf[8];
        operator delete(*(void **)&buf[8]);
      }
      if (__p)
      {
        v110 = __p;
        operator delete(__p);
      }
      v84 = v75 != v74 && v80;
      v75 += 8;
      if (!v84)
        goto LABEL_209;
    }
    v81 = &v129;
    v82 = 4;
    goto LABEL_187;
  }
  if (objc_msgSend(v89, "BOOLForKey:", CFSTR("TxPowerTablesMaxOverride"))
    && sub_1001FDD60())
  {
    v21 = qword_100859130;
    if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "PRRose:applyConfigOptions,regulatory,sendingPowerTable,txPowerTablesMaxOverride", buf, 2u);
    }
    v94 = 1;
  }
  else
  {
    v22 = qword_100859130;
    v94 = 0;
    if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "PRRose:applyConfigOptions,regulatory,sendingPowerTable", buf, 2u);
      v94 = 0;
    }
  }
  v23 = *(_QWORD *)(a2 + 8);
  v24 = *(_QWORD *)(a2 + 16);
  if (v23 == v24)
    goto LABEL_80;
  v25 = v23 + 8;
  v26 = 1;
  do
  {
    buf[0] = 0;
    sub_100191910(&__p, 0x17uLL, buf);
    v27 = *(__int128 **)(v25 - 8);
    v28 = __p;
    v29 = *v27;
    v30 = *((_DWORD *)v27 + 4);
    v31 = *((_WORD *)v27 + 10);
    *((_BYTE *)__p + 22) = *((_BYTE *)v27 + 22);
    v28[10] = v31;
    *((_DWORD *)v28 + 4) = v30;
    *(_OWORD *)v28 = v29;
    if (!v94)
      goto LABEL_51;
    if (*(_BYTE *)__p != 2)
    {
      v87 = 1095;
      v88 = "r1PowerTableEntry[0] == SET_CFG_PWRTBL_ENTRY_V2_VERSION";
      goto LABEL_219;
    }
    if (v110 - (_BYTE *)__p != 23)
    {
      v87 = 1096;
      v88 = "r1PowerTableEntry.size() == sizeof(powerTableV2)";
LABEL_219:
      __assert_rtn("applyConfigOptions", "PRRose.mm", v87, v88);
    }
    v32 = (id)qword_100859130;
    if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
    {
      sub_100205770((uint64_t *)&__p);
      v39 = buf;
      if ((buf[23] & 0x80u) != 0)
        v39 = *(uint8_t **)buf;
      LODWORD(v129) = 136380675;
      *(_QWORD *)((char *)&v129 + 4) = v39;
      _os_log_debug_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEBUG, "PwrTblMax before: %{private}s", (uint8_t *)&v129, 0xCu);
      if ((char)buf[23] < 0)
        operator delete(*(void **)buf);
    }

    v33 = __p;
    *(_DWORD *)((char *)__p + 14) = 5242960;
    v33[9] = 80;
    v34 = (id)qword_100859130;
    if (os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG))
    {
      sub_100205770((uint64_t *)&__p);
      v40 = buf;
      if ((buf[23] & 0x80u) != 0)
        v40 = *(uint8_t **)buf;
      LODWORD(v129) = 136380675;
      *(_QWORD *)((char *)&v129 + 4) = v40;
      _os_log_debug_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEBUG, "           after: %{private}s", (uint8_t *)&v129, 0xCu);
      if ((char)buf[23] < 0)
        operator delete(*(void **)buf);
    }

LABEL_51:
    buf[0] = 31;
    memset(&buf[8], 0, 24);
    sub_1001530EC(&buf[8], __p, (uint64_t)v110, v110 - (_BYTE *)__p);
    LOBYTE(v129) = buf[0];
    v130 = 0;
    v131 = 0;
    *((_QWORD *)&v129 + 1) = 0;
    sub_1001530EC((_QWORD *)&v129 + 1, *(const void **)&buf[8], *(uint64_t *)&buf[16], *(_QWORD *)&buf[16] - *(_QWORD *)&buf[8]);
    v101 = 0;
    v102 = 0;
    v103 = 0;
    v127 = &v101;
    v128 = 0;
    v101 = (char *)operator new(0x20uLL);
    v102 = v101;
    v103 = v101 + 32;
    v102 = (_BYTE *)sub_100210EC0((uint64_t)&v103, (uint64_t)&v129, (uint64_t)buf, (uint64_t)v101);
    v105 = 0;
    v106 = 0;
    v104 = 0;
    sub_100210B80(&v104, (uint64_t)v101, (uint64_t)v102, (v102 - v101) >> 5);
    v127 = &v101;
    sub_100153338((void ***)&v127);
    if (*((_QWORD *)&v129 + 1))
    {
      v130 = *((_QWORD *)&v129 + 1);
      operator delete(*((void **)&v129 + 1));
    }
    *(_QWORD *)&v129 = off_10080EB20;
    *((_QWORD *)&v129 + 1) = &v107;
    v131 = &v129;
    v35 = sub_1003A9A64(v6, &v104, (uint64_t)&v129);
    v36 = v131;
    if (v131 == &v129)
    {
      v36 = &v129;
      v37 = 4;
    }
    else
    {
      if (!v131)
        goto LABEL_58;
      v37 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v36 + 8 * v37))();
LABEL_58:
    if (!v35)
    {
      if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_ERROR))
        sub_1003DCB94(&v99, v100);
      v26 = 0;
    }
    *(_QWORD *)&v129 = &v104;
    sub_100153338((void ***)&v129);
    if (*(_QWORD *)&buf[8])
    {
      *(_QWORD *)&buf[16] = *(_QWORD *)&buf[8];
      operator delete(*(void **)&buf[8]);
    }
    if (__p)
    {
      v110 = __p;
      operator delete(__p);
    }
    v38 = v25 != v24 && v35;
    v25 += 8;
  }
  while (v38);
  if ((v26 & 1) != 0)
    goto LABEL_80;
LABEL_210:
  if (v108 && v107 == 6)
  {
    v41 = (id)qword_100859130;
    if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = "chip had an active session and returned busy";
      _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, "PRRose:applyConfigOptions,regulatory,sendingPowerTable,%s", buf, 0xCu);
    }
LABEL_82:

    v16 = 1;
  }
  else
  {
    v16 = 0;
    ++a1[1518];
  }
  v42 = *(unsigned __int8 *)(a2 + 90);
  *(_QWORD *)buf = *(_QWORD *)(a2 + 82);
  buf[8] = v42;
  if (v42 && !sub_100205904((uint64_t)a1, buf))
  {
    v43 = (id)qword_100859130;
    if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
      sub_1003DCB68();

    v16 = 0;
    ++a1[1519];
  }
LABEL_88:
  *(_QWORD *)buf = &v112;
  sub_100153338((void ***)buf);
  if (v116)
  {
    v117 = v116;
    operator delete(v116);
  }
  if (v119)
  {
    v120 = v119;
    operator delete(v119);
  }
  if (v121)
  {
    v122 = v121;
    operator delete(v121);
  }
  if (v125)
  {
    v126 = v125;
    operator delete(v125);
  }

  return v16;
}

void sub_1002031B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,uint64_t a53)
{
  uint64_t v53;

  *(_QWORD *)(v53 - 256) = &a35;
  sub_100153338((void ***)(v53 - 256));
  if (__p)
  {
    a40 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a43)
  {
    a44 = (uint64_t)a43;
    operator delete(a43);
  }
  if (a46)
  {
    a47 = (uint64_t)a46;
    operator delete(a46);
  }
  if (a50)
  {
    a51 = (uint64_t)a50;
    operator delete(a50);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_100203494(uint64_t a1, uint64_t a2, std::string::size_type a3)
{
  NSObject *v6;
  void **v7;
  std::string::size_type v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  std::string::size_type v16;
  void *v17;
  unsigned int v18;
  int v19;
  int v20;
  BOOL v22;
  NSObject *v23;
  _BOOL4 v24;
  uint64_t v25;
  NSObject *v26;
  _BOOL4 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t result;
  NSObject *v35;
  _QWORD v36[5];
  int v37;
  int v38;
  BOOL v39;
  _QWORD v40[5];
  void *__p[2];
  char v42;
  uint8_t buf[4];
  void **v44;
  __int16 v45;
  std::string::size_type v46;

  v6 = (id)qword_100859130;
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    sub_10039FA60(a2, __p);
    v7 = v42 >= 0 ? __p : (void **)__p[0];
    v8 = *(char *)(a3 + 23) >= 0 ? a3 : *(_QWORD *)a3;
    *(_DWORD *)buf = 136315394;
    v44 = v7;
    v45 = 2080;
    v46 = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "PRRose::_triggerLogCollection: type: %s, reason: %s", buf, 0x16u);
    if (v42 < 0)
      operator delete(__p[0]);
  }

  if (!(_DWORD)a2)
  {
    sub_1001FFBC4(a1);
    atomic_store(7u, (unsigned int *)(a1 + 1232));
    v40[0] = _NSConcreteStackBlock;
    v40[1] = 3221225472;
    v40[2] = sub_100207F74;
    v40[3] = &unk_1007FA668;
    v40[4] = a1;
    sub_100200F10((NSObject **)a1, v40);
    if (!*(_QWORD *)(a1 + 1320))
      operator new();
    v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
    if (objc_msgSend(v14, "BOOLForKey:", CFSTR("HaltPRRoseOnFatalError")))
    {
      if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_FAULT))
        sub_1003DCCC8();
      while (1)
        sleep(0xAu);
    }
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "stringForKey:", CFSTR("HaltPRRoseOnFatalErrorReason")));
    if (*(char *)(a3 + 23) >= 0)
      v16 = a3;
    else
      v16 = *(_QWORD *)a3;
    v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v16));
    v18 = objc_msgSend(v15, "isEqualToString:", v17);

    if (v18)
    {
      v35 = qword_100859130;
      if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_FAULT))
        sub_1003DCCF4((uint64_t)v15, v35);
      while (1)
        sleep(0xAu);
    }

  }
  v19 = sub_1003AAC78(a1 + 32, a2, a3, v9, v10, v11, v12, v13);
  v20 = v19;
  v22 = (_DWORD)a2 == 1 && v19 == 1;
  v36[0] = _NSConcreteStackBlock;
  v36[1] = 3221225472;
  v36[2] = sub_100207FAC;
  v36[3] = &unk_10080E7B0;
  v36[4] = a3;
  v37 = a2;
  v38 = v19;
  v39 = v22;
  AnalyticsSendEventLazy(CFSTR("com.apple.nearbyd.RoseHostTriggeredLogCollection"), v36);
  switch(v20)
  {
    case 0:
      v23 = qword_100859130;
      if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(__p[0]) = 0;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "Successfully triggered log collection", (uint8_t *)__p, 2u);
      }
      return 1;
    case 1:
      v26 = qword_100859130;
      v27 = os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_ERROR);
      if ((_DWORD)a2 == 1)
      {
        if (v27)
          sub_1003DCD64();
        std::operator+<char>(__p, "Failed to trigger non-fatal log collection. Promoting to fatal. - ", a3);
        v25 = sub_100203494(a1, 0, __p);
        if (v42 < 0)
          operator delete(__p[0]);
        return v25;
      }
      if ((_DWORD)a2)
      {
        if (v27)
          sub_1003DCDBC(a2, v26, v28, v29, v30, v31, v32, v33);
        result = abort_report_np("Failed to trigger log collection.");
      }
      else
      {
        if (v27)
          sub_1003DCD90();
        result = abort_report_np("Failed to triggered fatal log collection.");
      }
      goto LABEL_61;
    case 2:
      v24 = os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_ERROR);
      if ((_DWORD)a2)
      {
        if (v24)
          sub_1003DCE4C();
        return 0;
      }
      else
      {
        if (v24)
          sub_1003DCE20();
        result = abort_report_np("Unexpected BusyNonFatalInProgress after triggering fatal log collection.");
LABEL_61:
        __break(1u);
      }
      return result;
    case 3:
      if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_ERROR))
        sub_1003DCE78();
      return 1;
    case 4:
      if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_ERROR))
        sub_1003DCEA4();
      return 0;
    case 5:
      if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_ERROR))
        sub_1003DCED0();
      return 0;
    default:
      return 1;
  }
}

void sub_10020397C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0)
    operator delete(__p);
  operator delete();
}

void sub_100203A14(NSObject **a1)
{
  NSObject *v2;
  NSObject *v3;
  _QWORD block[5];
  uint8_t buf[16];

  v2 = qword_100859130;
  if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "regulatory,refreshConfiguration()", buf, 2u);
  }
  v3 = *a1;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100203AB4;
  block[3] = &unk_1007FA668;
  block[4] = a1;
  dispatch_async(v3, block);
}

void sub_100203AB4(uint64_t a1)
{
  uint64_t v1;
  void *__p[2];
  char v3;

  v1 = *(_QWORD *)(a1 + 32);
  sub_10000BF04(__p, "");
  sub_100200FD0(v1, 8, (__int128 *)__p);
  if (v3 < 0)
    operator delete(__p[0]);
}

void sub_100203B08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100203B24(NSObject **a1)
{
  NSObject *v2;
  NSObject *v3;
  _QWORD block[5];
  uint8_t buf[16];

  v2 = qword_100859130;
  if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "PRRose: LPEM enable", buf, 2u);
  }
  v3 = *a1;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100203BC4;
  block[3] = &unk_1007FA668;
  block[4] = a1;
  dispatch_async(v3, block);
}

void sub_100203BC4(uint64_t a1)
{
  uint64_t v1;
  void *__p[2];
  char v3;

  v1 = *(_QWORD *)(a1 + 32);
  sub_10000BF04(__p, "");
  sub_100200FD0(v1, 11, (__int128 *)__p);
  if (v3 < 0)
    operator delete(__p[0]);
}

void sub_100203C18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100203C34(uint64_t a1, int a2)
{
  NSObject *v4;
  void *v5;
  NSObject *v6;
  NSObject *v7;
  _QWORD v8[5];
  char v9;
  uint8_t buf[4];
  int v11;

  v4 = qword_100859130;
  if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    v11 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "PRRose: enableDeepSleepOnDemand %u", buf, 8u);
  }
  v5 = sub_100004784();
  if (sub_1003956D8((uint64_t)v5))
  {
    if (*(_BYTE *)(a1 + 1488))
    {
      v6 = *(NSObject **)a1;
      v8[0] = _NSConcreteStackBlock;
      v8[1] = 3221225472;
      v8[2] = sub_100203D70;
      v8[3] = &unk_10080A650;
      v8[4] = a1;
      v9 = a2;
      dispatch_async(v6, v8);
    }
    else
    {
      v7 = qword_100859130;
      if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "PRRose: ignoring deep sleep on demand change because deep sleep feature is disabled", buf, 2u);
      }
    }
  }
}

void sub_100203D70(uint64_t a1)
{
  uint64_t v1;
  NSObject *v3;
  const char *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  NSObject *v9;
  unsigned int v10;
  NSObject *v11;
  void *__p[2];
  char v13;
  uint8_t buf[4];
  const char *v15;

  v1 = *(_QWORD *)(a1 + 32);
  if (*(unsigned __int8 *)(a1 + 40) == *(unsigned __int8 *)(v1 + 1449))
    return;
  v3 = qword_100859130;
  if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_DEFAULT))
  {
    if (*(_BYTE *)(a1 + 40))
      v4 = "enabled";
    else
      v4 = "disabled";
    *(_DWORD *)buf = 136315138;
    v15 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "PRRose: deep sleep on demand has been %s", buf, 0xCu);
  }
  v5 = *(unsigned __int8 *)(a1 + 40);
  *(_BYTE *)(v1 + 1449) = v5;
  if (*(_BYTE *)(v1 + 1480))
    v6 = *(_QWORD *)(v1 + 1472);
  else
    v6 = 1000;
  if (v5)
    v7 = v6;
  else
    v7 = 15000;
  sub_100192178(*(NSObject ***)(v1 + 1528), v7);
  if (*(_BYTE *)(v1 + 1449))
  {
    v8 = atomic_load((unsigned int *)(v1 + 1232));
    if (v8 == 10)
    {
      v9 = qword_100859130;
      if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "PRRose: deep sleep on demand is enabled but we're in PoweredOff, need to power on and then enter deep sleep", buf, 2u);
      }
      *(_DWORD *)(v1 + 1536) = 2;
      sub_10000BF04(__p, "");
      sub_100200FD0(v1, 10, (__int128 *)__p);
      if (v13 < 0)
        operator delete(__p[0]);
      return;
    }
    if (*(_BYTE *)(v1 + 1449))
      return;
  }
  v10 = atomic_load((unsigned int *)(v1 + 1232));
  if (v10 == 11)
  {
    v11 = qword_100859130;
    if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "PRRose: deep sleep on demand is disabled but we're in DeepSleep, need to exit deep sleep and then power off", buf, 2u);
    }
    *(_DWORD *)(v1 + 1536) = 2;
    sub_100203F94(v1, 1);
  }
}

void sub_100203F70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100203F94(uint64_t a1, int a2)
{
  NSObject *v4;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v5;
  NSObject *v6;
  BOOL v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t result;
  uint8_t v11[8];
  void *__p;
  void *v13;
  uint64_t v14;
  uint8_t buf[8];
  void *v16;
  uint64_t v17;
  char v18;
  uint64_t v19;

  v4 = qword_100859130;
  if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "PRRose: requestDeepSleepExit", buf, 2u);
  }
  dispatch_assert_queue_V2(*(dispatch_queue_t *)a1);
  v5 = *(_QWORD *)(a1 + 1496) + 50000000;
  if (std::chrono::steady_clock::now().__d_.__rep_ < v5)
  {
    v6 = qword_100859130;
    if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "PRRose: deep sleep exit request too quick after previous entry. waiting...", buf, 2u);
    }
    *(_QWORD *)buf = v5 - std::chrono::steady_clock::now().__d_.__rep_;
    std::this_thread::sleep_for ((const std::chrono::nanoseconds *)buf);
  }
  v18 = sub_100178714(3);
  *(_QWORD *)buf = 0;
  v16 = 0;
  v17 = 0;
  sub_10003A474(buf, &v18, (uint64_t)&v19, 1uLL);
  __p = 0;
  v13 = 0;
  v14 = 0;
  v7 = sub_10035FF18(a1 + 1240, 0x2Du, (uint64_t)buf, (unint64_t *)&__p);
  v8 = qword_100859130;
  if (v7)
  {
    if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "PRRose: sent deep sleep exit request to RoseSupervisor. Polling for completion.", v11, 2u);
    }
    v9 = sub_10020DB7C(a1, a2);
    if (__p)
    {
      v13 = __p;
      operator delete(__p);
    }
    if (*(_QWORD *)buf)
    {
      v16 = *(void **)buf;
      operator delete(*(void **)buf);
    }
    return v9;
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_ERROR))
      sub_1003DCEFC();
    result = abort_report_np("PRRose: sending deep sleep exit request to RoseSupervisor failed. Aborting nearbyd.");
    __break(1u);
  }
  return result;
}

void sub_100204164(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  if (a13)
    operator delete(a13);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100204190(NSObject **a1)
{
  NSObject *v1;
  uint64_t v2;
  _QWORD v4[6];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  char v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2020000000;
  v8 = 0;
  v1 = *a1;
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_100204220;
  v4[3] = &unk_10080AC10;
  v4[4] = &v5;
  v4[5] = a1;
  dispatch_sync(v1, v4);
  v2 = *((unsigned __int8 *)v6 + 24);
  _Block_object_dispose(&v5, 8);
  return v2;
}

uint64_t sub_100204220(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = *(_BYTE *)(*(_QWORD *)(result + 40) + 1449);
  return result;
}

void sub_100204234(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  id v6;

  v3 = a2;
  if (!v3)
    sub_1003DCF28();
  v6 = v3;
  v4 = objc_retainBlock(v3);
  v5 = *(void **)(a1 + 1272);
  *(_QWORD *)(a1 + 1272) = v4;

}

void sub_10020427C(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  id v6;

  v3 = a2;
  if (!v3)
    sub_1003DCF50();
  v6 = v3;
  v4 = objc_retainBlock(v3);
  v5 = *(void **)(a1 + 1280);
  *(_QWORD *)(a1 + 1280) = v4;

}

BOOL sub_1002042C4(uint64_t a1, unsigned int a2, uint64_t a3, unint64_t *a4)
{
  unsigned int v8;
  _BOOL8 result;
  NSObject *v10;
  _QWORD v11[3];
  char v12;

  v8 = atomic_load((unsigned int *)(a1 + 1232));
  if (v8 - 3 <= 1 || a2 <= 0x39 && ((1 << a2) & 0x240219800000001) != 0)
    return sub_10035FF18(a1 + 1240, a2, a3, a4);
  if (a2 - 37 > 1)
  {
    result = os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    sub_1003DCFF4();
    return 0;
  }
  v12 = 0;
  if ((sub_100204488(a1, &v12) & 1) == 0 && os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_ERROR))
    sub_1003DCFC8();
  if (v12)
  {
    v10 = (id)qword_100859130;
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      sub_100360280(a2, v11);
      sub_1003DCF78();
    }

    return 0;
  }
  return sub_10035FF18(a1 + 1240, a2, a3, a4);
}

void sub_100204470(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_100204488(uint64_t a1, _BYTE *a2)
{
  void *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;

  v4 = sub_100004784();
  if (!sub_1003956D8((uint64_t)v4))
  {
    LOBYTE(v7) = 0;
    LOBYTE(v6) = 1;
    goto LABEL_5;
  }
  v5 = sub_100207D54(a1);
  if (v5 <= 3)
  {
    v7 = 0x1010000u >> (8 * v5);
    v6 = (0xEu >> (v5 & 0xF)) & 1;
LABEL_5:
    *a2 = v7;
  }
  return v6 & 1;
}

BOOL sub_1002044F4(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unsigned int v3;

  v3 = atomic_load((unsigned int *)(a1 + 1232));
  if (v3 - 3 < 2)
    return sub_1003602AC(a1 + 1240, a2, a3);
  if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_ERROR))
    sub_1003DD020();
  return 0;
}

void sub_100204558(uint64_t a1, unsigned __int8 *a2)
{
  int v3;
  NSObject *v4;
  _BOOL4 v5;
  uint8_t v6[16];

  v3 = *a2;
  v4 = qword_100859130;
  v5 = os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_DEFAULT);
  if (v3 != 1)
    sub_1003DD04C(v5);
  if (v5)
  {
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "PRRose::_handleRoseControlReport - ResetCompleteSuccess", v6, 2u);
  }
  std::mutex::lock((std::mutex *)(a1 + 1336));
  atomic_store(1u, (unsigned __int8 *)(a1 + 1448));
  std::condition_variable::notify_all((std::condition_variable *)(a1 + 1400));
  std::mutex::unlock((std::mutex *)(a1 + 1336));
}

BOOL sub_100204608(uint64_t a1)
{
  NSObject *v2;
  _BOOL8 v3;
  void *__p;
  void *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;

  v2 = qword_100859130;
  if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(__p) = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "PRRose: assertUWBCommsOwnership", (uint8_t *)&__p, 2u);
  }
  v8 = 1;
  __p = 0;
  v6 = 0;
  v7 = 0;
  sub_10003A474(&__p, &v8, (uint64_t)&v9, 1uLL);
  v3 = sub_1003602AC(a1 + 1240, 0xD1u, (uint64_t)&__p);
  if (__p)
  {
    v6 = __p;
    operator delete(__p);
  }
  return v3;
}

void sub_1002046BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_1002046D8(uint64_t a1)
{
  NSObject *v2;
  _BOOL8 v3;
  void *__p;
  void *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;

  v2 = qword_100859130;
  if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(__p) = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "PRRose: deassertUWBCommsOwnership", (uint8_t *)&__p, 2u);
  }
  v8 = 0;
  __p = 0;
  v6 = 0;
  v7 = 0;
  sub_10003A474(&__p, &v8, (uint64_t)&v9, 1uLL);
  v3 = sub_1003602AC(a1 + 1240, 0xD1u, (uint64_t)&__p);
  if (__p)
  {
    v6 = __p;
    operator delete(__p);
  }
  return v3;
}

void sub_100204788(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_1002047A4(uint64_t a1)
{
  NSObject *v2;
  _BOOL8 v3;
  void *__p;
  void *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;

  v2 = qword_100859130;
  if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(__p) = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "PRRose: allowRoseSleep", (uint8_t *)&__p, 2u);
  }
  v8 = 1;
  __p = 0;
  v6 = 0;
  v7 = 0;
  sub_10003A474(&__p, &v8, (uint64_t)&v9, 1uLL);
  v3 = sub_1003602AC(a1 + 1240, 0xD4u, (uint64_t)&__p);
  if (__p)
  {
    v6 = __p;
    operator delete(__p);
  }
  return v3;
}

void sub_100204858(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_100204874(uint64_t a1)
{
  NSObject *v2;
  _BOOL8 v3;
  void *__p;
  void *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;

  v2 = qword_100859130;
  if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(__p) = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "PRRose: disallowRoseSleep", (uint8_t *)&__p, 2u);
  }
  v8 = 0;
  __p = 0;
  v6 = 0;
  v7 = 0;
  sub_10003A474(&__p, &v8, (uint64_t)&v9, 1uLL);
  v3 = sub_1003602AC(a1 + 1240, 0xD4u, (uint64_t)&__p);
  if (__p)
  {
    v6 = __p;
    operator delete(__p);
  }
  return v3;
}

void sub_100204924(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_100204940(uint64_t a1)
{
  int v2;
  unsigned int v3;
  BOOL v4;
  int v5;
  _BOOL4 v7;
  void *v8;
  NSObject *v9;
  NSObject *v10;
  _BOOL8 v11;
  _BOOL4 v13;
  uint8_t buf[8];
  void *v15;
  uint64_t v16;

  v2 = *((_DWORD *)sub_100004784() + 144);
  v7 = 1;
  if ((v2 - 3) >= 0x15)
  {
    v3 = v2 - 102;
    v4 = v3 > 0x13;
    v5 = (1 << v3) & 0xCE733;
    if (v4 || v5 == 0)
      v7 = 0;
  }
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  if (objc_msgSend(v8, "BOOLForKey:", CFSTR("DisableUwbBasebandCoexMessaging")))
  {
    v9 = qword_100859130;
    v7 = 0;
    if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Disabling UWB-BB coex messaging. DisableUwbBasebandCoexMessaging is set to true.", buf, 2u);
      v7 = 0;
    }
  }
  v10 = qword_100859130;
  if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v7;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Support Rose-BB Coex: %d", buf, 8u);
  }
  v13 = v7;
  *(_QWORD *)buf = 0;
  v15 = 0;
  v16 = 0;
  sub_10003A474(buf, &v13, (uint64_t)buf, 4uLL);
  v11 = sub_1003602AC(a1 + 1240, 0xD8u, (uint64_t)buf);
  if (*(_QWORD *)buf)
  {
    v15 = *(void **)buf;
    operator delete(*(void **)buf);
  }

  return v11;
}

void sub_100204AE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  void *v12;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

BOOL sub_100204B1C(uint64_t a1)
{
  NSObject *v2;
  _BOOL8 v3;
  void *__p;
  void *v6;
  uint64_t v7;
  uint8_t buf[8];
  void *v9;
  uint64_t v10;
  _QWORD v11[5];

  v2 = qword_100859130;
  if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "PRRose: resetSupervisorJobs", buf, 2u);
  }
  std::mutex::lock((std::mutex *)(a1 + 1336));
  atomic_store(0, (unsigned __int8 *)(a1 + 1448));
  std::mutex::unlock((std::mutex *)(a1 + 1336));
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_100204C7C;
  v11[3] = &unk_1007FA668;
  v11[4] = a1;
  sub_100200F10((NSObject **)a1, v11);
  *(_QWORD *)buf = 0;
  v9 = 0;
  v10 = 0;
  __p = 0;
  v6 = 0;
  v7 = 0;
  v3 = sub_10035FF18(a1 + 1240, 0x27u, (uint64_t)&__p, (unint64_t *)buf);
  if (__p)
  {
    v6 = __p;
    operator delete(__p);
  }
  if (!v3 && os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_ERROR))
    sub_1003DD0D0();
  if (*(_QWORD *)buf)
  {
    v9 = *(void **)buf;
    operator delete(*(void **)buf);
  }
  return v3;
}

void sub_100204C50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  if (a13)
    operator delete(a13);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100204C7C(uint64_t a1)
{
  uint64_t v1;
  char v3;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1280);
  v3 = 3;
  return (*(uint64_t (**)(void))(v1 + 16))();
}

BOOL sub_100204CB4(uint64_t a1)
{
  _BOOL8 v2;
  void *__p;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;

  if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_DEBUG))
    sub_1003DD128();
  v7 = 0;
  v8 = 0;
  v9 = 0;
  __p = 0;
  v5 = 0;
  v6 = 0;
  v2 = sub_10035FF18(a1 + 1240, 0x36u, (uint64_t)&__p, (unint64_t *)&v7);
  if (__p)
  {
    v5 = __p;
    operator delete(__p);
  }
  if (!v2 && os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_ERROR))
    sub_1003DD0FC();
  if (v7)
  {
    v8 = v7;
    operator delete(v7);
  }
  return v2;
}

void sub_100204D74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100204DA0(uint64_t a1)
{
  NSObject *v2;
  void *v3;
  _BOOL8 v4;
  void *__p;
  void *v7;
  uint64_t v8;
  uint8_t buf[8];
  void *v10;
  uint64_t v11;

  v2 = qword_100859130;
  if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "PRRose: activateAOPTimeSync", buf, 2u);
  }
  v3 = sub_100004784();
  if (sub_100395734((uint64_t)v3))
    return 1;
  *(_QWORD *)buf = 0;
  v10 = 0;
  v11 = 0;
  __p = 0;
  v7 = 0;
  v8 = 0;
  v4 = sub_10035FF18(a1 + 1240, 0x2Au, (uint64_t)&__p, (unint64_t *)buf);
  if (__p)
  {
    v7 = __p;
    operator delete(__p);
  }
  if (!v4 && os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_ERROR))
    sub_1003DD160();
  if (*(_QWORD *)buf)
  {
    v10 = *(void **)buf;
    operator delete(*(void **)buf);
  }
  return v4;
}

void sub_100204E90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  if (a13)
    operator delete(a13);
  _Unwind_Resume(exception_object);
}

BOOL sub_100204EBC(uint64_t a1)
{
  _BOOL8 v1;
  NSObject *v2;
  void *__p;
  _BYTE *v5;
  uint64_t v6;
  uint8_t buf[4];
  _BOOL4 v8;

  __p = 0;
  v5 = 0;
  v6 = 0;
  if (sub_1003605CC(a1 + 1240, 0xD5u, (unint64_t *)&__p))
  {
    if (v5 - (_BYTE *)__p == 1)
    {
      v1 = *(unsigned __int8 *)__p != 0;
      goto LABEL_9;
    }
    if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_ERROR))
      sub_1003DD18C();
  }
  else if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_ERROR))
  {
    sub_1003DD1F4();
  }
  v1 = 0;
LABEL_9:
  v2 = qword_100859130;
  if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    v8 = v1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "PRRose: hasCalDataBeenPushed %u", buf, 8u);
  }
  if (__p)
  {
    v5 = __p;
    operator delete(__p);
  }
  return v1;
}

void sub_100204FF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  _Unwind_Resume(exception_object);
}

unint64_t sub_100205014(uint64_t a1)
{
  BOOL v1;
  _BYTE *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *__p;
  void *v8;
  uint64_t v9;
  void *v10;
  _BYTE *v11;
  uint64_t v12;

  v10 = 0;
  v11 = 0;
  v12 = 0;
  __p = 0;
  v8 = 0;
  v9 = 0;
  v1 = sub_10035FF18(a1 + 1240, 0x28u, (uint64_t)&__p, (unint64_t *)&v10);
  if (__p)
  {
    v8 = __p;
    operator delete(__p);
  }
  if (!v1 && os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_ERROR))
    sub_1003DD24C();
  v2 = v10;
  if (v11 - (_BYTE *)v10 == 8)
  {
    v3 = *(_QWORD *)v10 & 0xFFFFFFFFFFFFFF00;
    v4 = *(_QWORD *)v10;
LABEL_11:
    v11 = v2;
    operator delete(v2);
    return v3 | v4;
  }
  if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_ERROR))
    sub_1003DD220();
  v3 = 0;
  v4 = 0;
  v5 = 0;
  v2 = v10;
  if (v10)
    goto LABEL_11;
  return v5;
}

void sub_100205110(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

BOOL sub_10020513C()
{
  const __CFDictionary *v0;
  io_service_t MatchingService;
  const __CFData *CFProperty;
  const __CFData *v3;
  CFTypeID v4;
  const UInt8 *BytePtr;
  NSObject *v6;
  const UInt8 *v7;
  int v8;
  _BOOL8 v9;
  NSObject *v10;
  CFTypeID v11;
  NSObject *v12;
  _DWORD v14[6];

  v0 = IOServiceNameMatching("rose");
  MatchingService = IOServiceGetMatchingService(kIOMainPortDefault, v0);
  if (!MatchingService)
  {
    sub_1003DD278();
    __break(1u);
  }
  CFProperty = (const __CFData *)IORegistryEntryCreateCFProperty(MatchingService, CFSTR("use-internal-32k-clock"), kCFAllocatorDefault, 0);
  if (CFProperty)
  {
    v3 = CFProperty;
    v4 = CFGetTypeID(CFProperty);
    if (v4 == CFDataGetTypeID() && CFDataGetLength(v3) == 4)
    {
      BytePtr = CFDataGetBytePtr(v3);
      v6 = qword_100859130;
      if (BytePtr)
      {
        v7 = BytePtr;
        if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_DEFAULT))
        {
          v8 = *(_DWORD *)v7;
          v14[0] = 67109120;
          v14[1] = v8;
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "use-internal-32k-clock property exists: 0x%x", (uint8_t *)v14, 8u);
        }
        v9 = *(_DWORD *)v7 != 0;
        goto LABEL_13;
      }
      if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_ERROR))
        sub_1003DD28C();
    }
    else
    {
      v10 = (id)qword_100859130;
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        v11 = CFGetTypeID(v3);
        sub_1003DD2B8((uint64_t)v14, v11, v10);
      }

    }
    v9 = 0;
LABEL_13:
    CFRelease(v3);
    return v9;
  }
  v12 = qword_100859130;
  v9 = 0;
  if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v14[0]) = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "use-internal-32k-clock property does not exist", (uint8_t *)v14, 2u);
    return 0;
  }
  return v9;
}

void sub_100205328(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_QWORD *sub_100205340(_QWORD *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4;

  a1[2] = 0;
  v4 = (uint64_t)(a1 + 2);
  *a1 = 0;
  a1[1] = 0;
  if (a3)
  {
    sub_1001534CC(a1, a3);
    a1[1] = sub_100210EC0(v4, a2, a2 + 32 * a3, a1[1]);
  }
  return a1;
}

void sub_1002053B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  sub_100153338(&a9);
  _Unwind_Resume(a1);
}

BOOL sub_1002053D8(uint64_t a1, char a2)
{
  _BYTE *v4;
  uint64_t v5;
  unsigned __int16 v6;
  unsigned __int8 v7;
  NSObject *v8;
  _BOOL8 v9;
  char *v11;
  _BYTE *v12;
  char *v13;
  uint64_t v14[3];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18[8];
  uint64_t v19;
  uint64_t v20;
  void *__p[3];
  char v22;
  void *v23;
  void *v24;
  uint64_t v25;
  char **v26;
  char v27;
  uint8_t buf[8];
  void *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;

  v4 = operator new(1uLL);
  *v4 = 23;
  v24 = 0;
  v25 = 0;
  v23 = 0;
  sub_1001530EC(&v23, v4, (uint64_t)(v4 + 1), 1uLL);
  operator delete(v4);
  v5 = a1 + 32;
  sub_1003A96EC(v5, (char **)&v23, 2000, (uint64_t)__p);
  if (!v22)
  {
    v9 = 0;
    goto LABEL_17;
  }
  sub_100397AAC(__p, (uint64_t)v18);
  v15 = 0;
  v16 = 0;
  v17 = 0;
  sub_100210B80(&v15, v19, v20, (v20 - v19) >> 5);
  if (v16 == v15 || *(_BYTE *)v15 != 23)
  {
    if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_ERROR))
      sub_1003DD2F4();
  }
  else
  {
    v6 = sub_10036B540(v15, 0);
    v7 = v6;
    if (v6 >= 0x100u)
    {
      v8 = qword_100859130;
      if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = v7;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Coex: global event config (%d) ", buf, 8u);
      }
      sub_10036B578(v15, 0, v7 & 0xFE | a2);
      buf[0] = *(_BYTE *)v15;
      v30 = 0;
      v31 = 0;
      v29 = 0;
      sub_1001530EC(&v29, *(const void **)(v15 + 8), *(_QWORD *)(v15 + 16), *(_QWORD *)(v15 + 16) - *(_QWORD *)(v15 + 8));
      v11 = 0;
      v12 = 0;
      v13 = 0;
      v26 = &v11;
      v27 = 0;
      v11 = (char *)operator new(0x20uLL);
      v12 = v11;
      v13 = v11 + 32;
      v12 = (_BYTE *)sub_100210EC0((uint64_t)&v13, (uint64_t)buf, (uint64_t)&v32, (uint64_t)v11);
      memset(v14, 0, sizeof(v14));
      sub_100210B80(v14, (uint64_t)v11, (uint64_t)v12, (v12 - v11) >> 5);
      v26 = &v11;
      sub_100153338((void ***)&v26);
      if (v29)
      {
        v30 = v29;
        operator delete(v29);
      }
      v9 = sub_1003A98C0(v5, v14);
      *(_QWORD *)buf = v14;
      sub_100153338((void ***)buf);
      goto LABEL_13;
    }
  }
  v9 = 0;
LABEL_13:
  *(_QWORD *)buf = &v15;
  sub_100153338((void ***)buf);
  *(_QWORD *)buf = &v19;
  sub_100153338((void ***)buf);
  if (v22 && __p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
LABEL_17:
  if (v23)
  {
    v24 = v23;
    operator delete(v23);
  }
  return v9;
}

void sub_1002056A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,char a25,void *a26,uint64_t a27)
{
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  *(_QWORD *)(v29 - 96) = v27;
  sub_100153338((void ***)(v29 - 96));
  *(_QWORD *)(v29 - 96) = &a15;
  sub_100153338((void ***)(v29 - 96));
  *(_QWORD *)(v29 - 96) = v28;
  sub_100153338((void ***)(v29 - 96));
  if (a25 && __p)
  {
    a23 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a26)
  {
    a27 = (uint64_t)a26;
    operator delete(a26);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100205770(uint64_t *a1)
{
  unint64_t v2;
  _QWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v9;
  uint64_t v10;
  _QWORD v11[10];
  char v12;
  uint64_t v13;

  sub_100210A10((uint64_t)&v10);
  if (a1[1] != *a1)
  {
    v2 = 0;
    do
    {
      v3 = sub_100054C60(&v10, (uint64_t)"0x", 2);
      v9 = 48;
      v4 = sub_10015BFA0(v3, &v9);
      v5 = *v4;
      *(_DWORD *)((char *)v4 + *(_QWORD *)(*v4 - 24) + 8) = *(_DWORD *)((_BYTE *)v4 + *(_QWORD *)(*v4 - 24) + 8) & 0xFFFFFFB5 | 8;
      *(uint64_t *)((char *)v4 + *(_QWORD *)(v5 - 24) + 24) = 2;
      std::ostream::operator<<(v4, *(unsigned __int8 *)(*a1 + v2));
      v7 = *a1;
      v6 = a1[1];
      if (v2 != ~*a1 + v6)
      {
        sub_100054C60(&v10, (uint64_t)",", 1);
        v7 = *a1;
        v6 = a1[1];
      }
      ++v2;
    }
    while (v6 - v7 > v2);
  }
  std::stringbuf::str(v11);
  if (v12 < 0)
    operator delete((void *)v11[8]);
  std::streambuf::~streambuf(v11);
  return std::ios::~ios(&v13);
}

void sub_1002058E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100210AFC((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_100205904(uint64_t a1, unsigned __int8 *a2)
{
  unsigned int v2;
  NSObject *v5;
  _BOOL8 v6;
  _QWORD *v8;
  uint64_t i;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  char v14;
  char v15;
  void *__p;
  void *v17;
  uint64_t v18;
  _QWORD v19[10];
  char v20;
  uint64_t v21;
  uint8_t buf[4];
  void *v23;

  v2 = atomic_load((unsigned int *)(a1 + 1232));
  if (v2 - 3 > 1)
    return 0;
  v5 = (id)qword_100859130;
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    sub_1000537E4((uint64_t)&__p);
    v15 = 48;
    v8 = sub_10015BFA0(&v18, &v15);
    *(_DWORD *)((char *)v8 + *(_QWORD *)(*v8 - 24) + 8) = *(_DWORD *)((_BYTE *)v8 + *(_QWORD *)(*v8 - 24) + 8) & 0xFFFFFFB5 | 8;
    sub_100054C60(&v18, (uint64_t)"0x", 2);
    for (i = 7; i != -1; --i)
    {
      *(_QWORD *)((char *)&v19[2] + *(_QWORD *)(v18 - 24)) = 2;
      v10 = a2[i];
      std::ostream::operator<<(&v18, v10);
    }
    std::stringbuf::str(v19);
    *(void **)((char *)&__p
    v18 = v11;
    if (v20 < 0)
      operator delete((void *)v19[8]);
    std::streambuf::~streambuf(v19);
    std::ios::~ios(&v21);
    v12 = &v13;
    if (v14 < 0)
      v12 = v13;
    *(_DWORD *)buf = 136315138;
    v23 = v12;
    _os_log_debug_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "PRRose::setRoseConnectionlessMacAddress: %s", buf, 0xCu);
    if (v14 < 0)
      operator delete(v13);
  }

  __p = 0;
  v17 = 0;
  v18 = 0;
  sub_10003A474(&__p, a2, (uint64_t)(a2 + 8), 8uLL);
  v6 = sub_1002044F4(a1, 0xD3u, (uint64_t)&__p);
  if (__p)
  {
    v17 = __p;
    operator delete(__p);
  }
  return v6;
}

void sub_100205B4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  void *v15;

  sub_100053910((uint64_t)&__p);

  _Unwind_Resume(a1);
}

BOOL sub_100205B94(uint64_t a1, char a2)
{
  unsigned int v2;
  _BOOL8 v4;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  _BYTE v9[8];
  void *v10;
  _BYTE *v11;
  unsigned __int8 **v12;
  char v13;
  _BYTE v14[8];
  void *__p;
  void *v16;
  uint64_t v17;
  uint64_t v18;

  v2 = atomic_load((unsigned int *)(a1 + 1232));
  if (v2 - 3 >= 2)
  {
    if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_ERROR))
      sub_1003DD320();
    return 0;
  }
  else
  {
    sub_100210860((uint64_t)v9, 4, a2);
    v14[0] = v9[0];
    v16 = 0;
    v17 = 0;
    __p = 0;
    sub_1001530EC(&__p, v10, (uint64_t)v11, v11 - (_BYTE *)v10);
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v12 = &v6;
    v13 = 0;
    v6 = (unsigned __int8 *)operator new(0x20uLL);
    v7 = v6;
    v8 = v6 + 32;
    v7 = (unsigned __int8 *)sub_100210EC0((uint64_t)&v8, (uint64_t)v14, (uint64_t)&v18, (uint64_t)v6);
    v4 = sub_100205D44(a1, &v6);
    v12 = &v6;
    sub_100153338((void ***)&v12);
    if (__p)
    {
      v16 = __p;
      operator delete(__p);
    }
    if (v10)
    {
      v11 = v10;
      operator delete(v10);
    }
  }
  return v4;
}

void sub_100205CE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  sub_100153338((void ***)&a16);
  if (__p)
  {
    a20 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a13)
    operator delete(a13);
  _Unwind_Resume(a1);
}

BOOL sub_100205D44(uint64_t a1, unsigned __int8 **a2)
{
  NSObject *v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  NSObject *v7;
  uint8_t *v8;
  uint64_t v9;
  _BOOL8 v10;
  uint8_t buf[8];
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[24];

  v4 = qword_100859130;
  if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Setting config parameters:", buf, 2u);
  }
  v5 = *a2;
  v6 = a2[1];
  if (*a2 == v6)
  {
    v9 = (uint64_t)*a2;
  }
  else
  {
    do
    {
      v7 = (id)qword_100859130;
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        sub_10036B2B8(v5);
        v8 = v14 >= 0 ? buf : *(uint8_t **)buf;
        *(_DWORD *)v15 = 136315138;
        *(_QWORD *)&v15[4] = v8;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "\t%s", v15, 0xCu);
        if (SHIBYTE(v14) < 0)
          operator delete(*(void **)buf);
      }

      v5 += 32;
    }
    while (v5 != v6);
    v9 = (uint64_t)*a2;
    v5 = a2[1];
  }
  *(_QWORD *)buf = 0;
  v13 = 0;
  v14 = 0;
  sub_100210B80(buf, v9, (uint64_t)v5, (uint64_t)&v5[-v9] >> 5);
  v10 = sub_1003A98C0(a1 + 32, (uint64_t *)buf);
  *(_QWORD *)v15 = buf;
  sub_100153338((void ***)v15);
  if (!v10 && os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_ERROR))
    sub_1003DD34C();
  return v10;
}

void sub_100205F0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_100153338((void ***)va);
  _Unwind_Resume(a1);
}

BOOL sub_100205F38(uint64_t a1, _WORD *a2, int a3)
{
  NSObject *v6;
  _BOOL8 v7;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  char v12;
  void *v13;
  _BYTE *v14;
  uint64_t v15;
  unsigned __int8 **v16;
  char v17;
  char v18[8];
  void *__p;
  void *v20;
  uint64_t v21;
  uint8_t buf[8];
  const void *v23;
  char v24;

  v6 = qword_100859130;
  if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)&buf[4] = (_DWORD)a2;
    LOWORD(v23) = 1024;
    *(_DWORD *)((char *)&v23 + 2) = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "setRoseLeadingEdgeThresholds: %d, %d", buf, 0xEu);
  }
  sub_10036BA8C(a2, a3, (uint64_t)buf);
  if (v24)
  {
    v12 = 35;
    v14 = 0;
    v15 = 0;
    v13 = 0;
    sub_1001530EC(&v13, *(const void **)buf, (uint64_t)v23, (size_t)v23 - *(_QWORD *)buf);
    v18[0] = 35;
    v20 = 0;
    v21 = 0;
    __p = 0;
    sub_1001530EC(&__p, v13, (uint64_t)v14, v14 - (_BYTE *)v13);
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v16 = &v9;
    v17 = 0;
    v9 = (unsigned __int8 *)operator new(0x20uLL);
    v10 = v9;
    v11 = v9 + 32;
    v10 = (unsigned __int8 *)sub_100210EC0((uint64_t)&v11, (uint64_t)v18, (uint64_t)buf, (uint64_t)v9);
    v7 = sub_100205D44(a1, &v9);
    v16 = &v9;
    sub_100153338((void ***)&v16);
    if (__p)
    {
      v20 = __p;
      operator delete(__p);
    }
    if (v13)
    {
      v14 = v13;
      operator delete(v13);
    }
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_ERROR))
      sub_1003DD378();
    v7 = 0;
  }
  if (v24 && *(_QWORD *)buf)
  {
    v23 = *(const void **)buf;
    operator delete(*(void **)buf);
  }
  return v7;
}

void sub_100206120(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  uint64_t v21;
  void *v23;

  sub_100153338((void ***)&a17);
  if (__p)
  {
    a21 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a14)
    operator delete(a14);
  if (*(_BYTE *)(v21 - 72))
  {
    v23 = *(void **)(v21 - 96);
    if (v23)
    {
      *(_QWORD *)(v21 - 88) = v23;
      operator delete(v23);
    }
  }
  _Unwind_Resume(a1);
}

BOOL sub_10020619C(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  _QWORD *v5;
  _BOOL8 v6;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  unsigned __int8 **v11;
  char v12;
  uint8_t v13[8];
  void *__p;
  void *v15;
  uint64_t v16;
  uint8_t buf[4];
  _BYTE v18[12];
  uint64_t v19;
  uint64_t v20;

  v4 = qword_100859130;
  if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)v18 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "setRoseAlishaURSKTTL: %llu", buf, 0xCu);
  }
  v5 = operator new(8uLL);
  *v5 = a2;
  buf[0] = 7;
  v19 = 0;
  v20 = 0;
  *(_QWORD *)&v18[4] = 0;
  sub_1001530EC(&v18[4], v5, (uint64_t)(v5 + 1), 8uLL);
  v13[0] = buf[0];
  v15 = 0;
  v16 = 0;
  __p = 0;
  sub_1001530EC(&__p, *(const void **)&v18[4], v19, v19 - *(_QWORD *)&v18[4]);
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = &v8;
  v12 = 0;
  v8 = (unsigned __int8 *)operator new(0x20uLL);
  v9 = v8;
  v10 = v8 + 32;
  v9 = (unsigned __int8 *)sub_100210EC0((uint64_t)&v10, (uint64_t)v13, (uint64_t)buf, (uint64_t)v8);
  v6 = sub_100205D44(a1, &v8);
  v11 = &v8;
  sub_100153338((void ***)&v11);
  if (__p)
  {
    v15 = __p;
    operator delete(__p);
  }
  if (*(_QWORD *)&v18[4])
  {
    v19 = *(_QWORD *)&v18[4];
    operator delete(*(void **)&v18[4]);
  }
  operator delete(v5);
  return v6;
}

void sub_100206330(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21)
{
  void *v21;

  sub_100153338((void ***)&a13);
  if (__p)
  {
    a17 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a20)
  {
    a21 = (uint64_t)a20;
    operator delete(a20);
  }
  operator delete(v21);
  _Unwind_Resume(a1);
}

void sub_100206394()
{
  JUMPOUT(0x10020638CLL);
}

_QWORD *sub_10020639C(_QWORD *a1, const void *a2, size_t __sz)
{
  char *v6;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (__sz)
  {
    sub_10002D7AC(a1, __sz);
    v6 = (char *)a1[1];
    memmove(v6, a2, __sz);
    a1[1] = &v6[__sz];
  }
  return a1;
}

void sub_100206400(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_10020641C(uint64_t a1, int a2)
{
  void *v4;
  unsigned __int16 v5;
  _BOOL8 v6;
  NSObject *v7;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  uint8_t v12[8];
  void *v13;
  _BYTE *v14;
  unsigned __int8 **v15;
  char v16;
  uint8_t buf[4];
  _BOOL4 v18;
  void *__p;
  void *v20;
  uint64_t v21;
  uint64_t v22;

  v4 = sub_100004784();
  v5 = sub_1003957B4((uint64_t)v4);
  if (v5 < 0x100u)
    return 0;
  sub_100210860((uint64_t)v12, v5, a2);
  buf[0] = v12[0];
  v20 = 0;
  v21 = 0;
  __p = 0;
  sub_1001530EC(&__p, v13, (uint64_t)v14, v14 - (_BYTE *)v13);
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v15 = &v9;
  v16 = 0;
  v9 = (unsigned __int8 *)operator new(0x20uLL);
  v10 = v9;
  v11 = v9 + 32;
  v10 = (unsigned __int8 *)sub_100210EC0((uint64_t)&v11, (uint64_t)buf, (uint64_t)&v22, (uint64_t)v9);
  v6 = sub_100205D44(a1, &v9);
  v15 = &v9;
  sub_100153338((void ***)&v15);
  if (__p)
  {
    v20 = __p;
    operator delete(__p);
  }
  v7 = qword_100859130;
  if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109376;
    v18 = v6;
    LOWORD(__p) = 1024;
    *(_DWORD *)((char *)&__p + 2) = a2;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "setRoseAlishaTestMode. Success: %d. Enable: %d", buf, 0xEu);
  }
  if (v13)
  {
    v14 = v13;
    operator delete(v13);
  }
  return v6;
}

void sub_1002065AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  sub_100153338((void ***)&a17);
  if (__p)
  {
    a21 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a14)
    operator delete(a14);
  _Unwind_Resume(a1);
}

uint64_t sub_100206608()
{
  NSObject *v0;
  void *v1;
  unsigned int v2;
  NSObject *v3;
  _BOOL4 v4;
  const char *v5;
  uint8_t *v6;
  __int16 v8;
  __int16 v9;
  uint8_t buf[16];

  v0 = qword_100859130;
  if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "setRoseCoexMode called", buf, 2u);
  }
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  v2 = objc_msgSend(v1, "BOOLForKey:", CFSTR("DisableCoex"));

  v3 = qword_100859130;
  v4 = os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_DEFAULT);
  if (v2)
  {
    if (v4)
    {
      v9 = 0;
      v5 = "Coex disabled using default writes: DisableCoex";
      v6 = (uint8_t *)&v9;
LABEL_8:
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, v5, v6, 2u);
    }
  }
  else if (v4)
  {
    v8 = 0;
    v5 = "Nothing to do on non-watchOS platforms";
    v6 = (uint8_t *)&v8;
    goto LABEL_8;
  }
  return 1;
}

void sub_1002066FC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_10020670C(uint64_t a1)
{
  NSObject *v2;
  void *v3;
  unsigned __int16 v4;
  unsigned __int8 v5;
  int v6;
  int v7;
  _BYTE *v8;
  int v9;
  NSObject *v10;
  unsigned __int8 *i;
  unsigned __int16 v13;
  NSObject *v14;
  NSObject *v15;
  const char *v16;
  int v17;
  uint8_t v18[32];
  unsigned __int16 v19;
  _QWORD v20[3];
  uint8_t buf[8];
  void *v22;
  char v23;
  void *__p;
  void *v25;
  uint64_t v26;
  void **v27;

  v2 = qword_100859130;
  if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "getRoseAlishaTestMode called", buf, 2u);
  }
  v3 = sub_100004784();
  v4 = sub_1003957B4((uint64_t)v3);
  v5 = v4;
  if (v4 >= 0x100u)
  {
    v8 = operator new(1uLL);
    *v8 = v5;
    v25 = 0;
    v26 = 0;
    __p = 0;
    sub_1001530EC(&__p, v8, (uint64_t)(v8 + 1), 1uLL);
    operator delete(v8);
    sub_1003A96EC(a1 + 32, (char **)&__p, 2000, (uint64_t)buf);
    if (v23)
    {
      sub_100397AAC(buf, (uint64_t)&v19);
      v9 = v19;
      if (v19)
      {
        v10 = (id)qword_100859130;
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        {
          sub_10036BB54(v9, v18);
          sub_1003DD3FC();
        }

LABEL_10:
        v6 = 0;
        v7 = 0;
      }
      else
      {
        for (i = (unsigned __int8 *)v20[0]; ; i += 32)
        {
          if (i == (unsigned __int8 *)v20[1])
          {
            if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_ERROR))
              sub_1003DD3D0();
            goto LABEL_10;
          }
          if (*i == v5)
            break;
        }
        v13 = sub_10036B540((uint64_t)i, 0);
        if (v13 < 0x100u)
        {
          v16 = "optTestModeEnabled.has_value()";
          v17 = 1406;
          goto LABEL_38;
        }
        if (v13 != 1)
        {
          if (!(_BYTE)v13)
          {
            v14 = qword_100859130;
            if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)v18 = 0;
              _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "getRoseAlishaTestMode: disabled", v18, 2u);
            }
            v6 = 0;
            goto LABEL_36;
          }
          v16 = "false";
          v17 = 1418;
LABEL_38:
          __assert_rtn("getRoseAlishaTestMode", "PRRose.mm", v17, v16);
        }
        v15 = qword_100859130;
        if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)v18 = 0;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "getRoseAlishaTestMode: enabled", v18, 2u);
        }
        v6 = 1;
LABEL_36:
        v7 = 1;
      }
      v27 = (void **)v20;
      sub_100153338(&v27);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_ERROR))
        sub_1003DD3A4();
      v6 = 0;
      v7 = 0;
    }
    if (v23 && *(_QWORD *)buf)
    {
      v22 = *(void **)buf;
      operator delete(*(void **)buf);
    }
    if (__p)
    {
      v25 = __p;
      operator delete(__p);
    }
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  return v6 | (v7 << 8);
}

void sub_1002069FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t *a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, char a20,void *a21,uint64_t a22)
{
  void *v22;
  void *v23;

  v23 = v22;

  a9 = &a14;
  sub_100153338((void ***)&a9);
  if (a20 && __p)
  {
    a18 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a21)
  {
    a22 = (uint64_t)a21;
    operator delete(a21);
  }
  _Unwind_Resume(a1);
}

void sub_100206A78(uint64_t a1)
{
  _WORD *v2;
  int v3;
  NSObject *v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  int v7;
  unsigned __int16 v8;
  unsigned __int16 v9;
  uint64_t v10;
  _BOOL4 v11;
  NSObject *v12;
  const char *v13;
  uint32_t v14;
  unsigned __int16 v15;
  unsigned __int16 v16;
  uint64_t v17;
  _BOOL4 v18;
  NSObject *v19;
  const char *v20;
  uint32_t v21;
  unsigned __int16 v22;
  unsigned __int8 *v23;
  unsigned __int8 *v24;
  void *__p[3];
  char v26;
  void *v27;
  void *v28;
  uint64_t v29;
  unsigned __int8 **v30;
  uint64_t buf;
  __int16 v32;
  int v33;

  v2 = operator new(2uLL);
  *v2 = 11558;
  v28 = 0;
  v29 = 0;
  v27 = 0;
  sub_1001530EC(&v27, v2, (uint64_t)(v2 + 1), 2uLL);
  operator delete(v2);
  sub_1003A96EC(a1 + 32, (char **)&v27, 2000, (uint64_t)__p);
  if (v26)
  {
    sub_100397AAC(__p, (uint64_t)&v22);
    v3 = v22;
    if (v22)
    {
      v4 = (id)qword_100859130;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      {
        sub_10036BB54(v3, &buf);
        sub_1003DD478();
      }

      goto LABEL_27;
    }
    v5 = v23;
    v6 = v24;
    if (v23 == v24)
    {
LABEL_27:
      v30 = &v23;
      sub_100153338((void ***)&v30);
      goto LABEL_28;
    }
    while (1)
    {
      v7 = *v5;
      if (v7 != 38)
        goto LABEL_18;
      v8 = sub_10036B540((uint64_t)v5, 0);
      v9 = sub_10036B540((uint64_t)v5, 1);
      v10 = qword_100859130;
      v11 = os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_DEFAULT);
      if (v8 < 0x100u || v9 < 0x100u)
      {
        if (v11)
        {
          LOWORD(buf) = 0;
          v12 = v10;
          v13 = "UWB ePA mode: N/A, eLNA mode: N/A";
          v14 = 2;
          goto LABEL_16;
        }
      }
      else if (v11)
      {
        LODWORD(buf) = 67109376;
        HIDWORD(buf) = v8;
        v32 = 1024;
        v33 = v9;
        v12 = v10;
        v13 = "UWB ePA mode: 0x%02x, eLNA mode: 0x%02x";
        v14 = 14;
LABEL_16:
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, v13, (uint8_t *)&buf, v14);
      }
      v7 = *v5;
LABEL_18:
      if (v7 == 45)
      {
        v15 = sub_10036B540((uint64_t)v5, 0);
        v16 = sub_10036B540((uint64_t)v5, 1);
        v17 = qword_100859130;
        v18 = os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_DEFAULT);
        if (v15 < 0x100u || v16 < 0x100u)
        {
          if (v18)
          {
            LOWORD(buf) = 0;
            v19 = v17;
            v20 = "NB ePA mode: N/A, eLNA mode: N/A";
            v21 = 2;
            goto LABEL_25;
          }
        }
        else if (v18)
        {
          LODWORD(buf) = 67109376;
          HIDWORD(buf) = v15;
          v32 = 1024;
          v33 = v16;
          v19 = v17;
          v20 = "NB ePA mode: 0x%02x, eLNA mode: 0x%02x";
          v21 = 14;
LABEL_25:
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, v20, (uint8_t *)&buf, v21);
        }
      }
      v5 += 32;
      if (v5 == v6)
        goto LABEL_27;
    }
  }
  if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_ERROR))
    sub_1003DD44C();
LABEL_28:
  if (v26 && __p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v27)
  {
    v28 = v27;
    operator delete(v27);
  }
}

void sub_100206DA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, char a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t *a23)
{
  void *v23;

  a23 = &a12;
  sub_100153338((void ***)&a23);
  if (a18 && __p)
  {
    a16 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a19)
  {
    a20 = (uint64_t)a19;
    operator delete(a19);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100206E24(uint64_t a1)
{
  uint64_t v1;
  char v3;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1280);
  v3 = 3;
  return (*(uint64_t (**)(void))(v1 + 16))();
}

void sub_100206E5C(uint64_t a1)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  NSObject *v11;
  __int16 v12[8];
  void *__p;
  void *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;

  v2 = sub_1002F7290(CFSTR("AOPSensorFusionDataForwarding"), 0);
  v3 = sub_1002F7290(CFSTR("UseNIPathForSuspendOnStationary"), 0);
  v4 = 2;
  if (!v3)
    v4 = 0;
  v5 = v4 | v2 | (4 * (sub_1002F7114(CFSTR("AopSFStationaryTimeoutIn100msUnits"), (id)0x32) & 0x7Fu));
  v6 = sub_1002F7114(CFSTR("AopSFIOReportIntervalIn10msUnits"), (id)5) << 9;
  v7 = v5 | v6 | (sub_1002F7114(CFSTR("AopSFCloserThresholddBm"), (id)0xFFFFFFA8) << 17);
  v8 = sub_1002F7114(CFSTR("AopSFFurtherThresholddBm"), (id)0xFFFFFFA3);
  v9 = sub_1002F7114(CFSTR("AopSFTxPowerdBm"), (id)0x7F);
  v15 = 0;
  v16 = v7 | (v8 << 25) | (v9 << 33) | (((unint64_t)sub_1002F7114(CFSTR("AopSFSimulateDisplacement"), 0) & 3) << 41);
  __p = 0;
  v14 = 0;
  sub_10003A474(&__p, &v16, (uint64_t)&v17, 8uLL);
  v10 = sub_1003602AC(a1 + 1240, 0xDBu, (uint64_t)&__p);
  v11 = qword_100859130;
  if (v10)
  {
    if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_DEFAULT))
    {
      v12[0] = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Wrote the AOP UserDefaults property", (uint8_t *)v12, 2u);
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_ERROR))
  {
    sub_1003DD4C8();
  }
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
}

void sub_100206FF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10020700C(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[4];
  char v11;
  _QWORD v12[4];
  __int128 v13;
  int v14;
  uint8_t buf[16];
  int v16;

  v2 = qword_100859130;
  if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "PRRose: boot rose", buf, 2u);
  }
  if (!sub_1002046D8(a1))
  {
    if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_ERROR))
      sub_1003DD578();
    return 0;
  }
  if ((sub_1003A7850(a1 + 32, *(_BYTE *)(a1 + 1328), *(_BYTE *)(a1 + 1329)) & 1) == 0)
  {
    if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_ERROR))
      sub_1003DD54C();
    return 0;
  }
  if ((sub_1003AAC74() & 1) == 0)
  {
    if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_ERROR))
      sub_1003DD520();
    return 0;
  }
  v8 = sub_1003AA3DC(a1 + 32, 1, (uint64_t)buf, v3, v4, v5, v6, v7);
  if ((v8 & 1) == 0)
  {
    if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_ERROR))
      sub_1003DD4F4();
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    v12[2] = sub_1002071D0;
    v12[3] = &unk_10080E770;
    v13 = *(_OWORD *)buf;
    v14 = v16;
    AnalyticsSendEventLazy(CFSTR("com.apple.nearbyd.RoseBootFailure"), v12);
  }
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_100207414;
  v10[3] = &unk_10080E790;
  v11 = v8;
  AnalyticsSendEventLazy(CFSTR("com.apple.nearbyd.RoseBootResult"), v10);
  return v8;
}

id sub_1002071D0(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  _QWORD v12[8];
  _QWORD v13[8];

  v12[0] = CFSTR("BootReturnValue");
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 32)));
  v13[0] = v2;
  v12[1] = CFSTR("DriverState");
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 36)));
  v13[1] = v3;
  v12[2] = CFSTR("BootStatusRegister");
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 40)));
  v13[2] = v4;
  v12[3] = CFSTR("CalibrationReturnValue");
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 44)));
  v13[3] = v5;
  v12[4] = CFSTR("SendCalibrationTimeout");
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned __int8 *)(a1 + 48)));
  v13[4] = v6;
  v12[5] = CFSTR("UWBInitDoneTimeout");
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned __int8 *)(a1 + 49)));
  v13[5] = v7;
  v12[6] = CFSTR("SetCalDataPushedFalseFailure");
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned __int8 *)(a1 + 50)));
  v13[6] = v8;
  v12[7] = CFSTR("SetCalDataPushedTrueFailure");
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned __int8 *)(a1 + 51)));
  v13[7] = v9;
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v13, v12, 8));

  return v10;
}

void sub_1002073A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  _Unwind_Resume(a1);
}

id sub_100207414(uint64_t a1)
{
  void *v1;
  void *v2;
  const __CFString *v4;
  void *v5;

  v4 = CFSTR("BootSuccess");
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned __int8 *)(a1 + 32)));
  v5 = v1;
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v5, &v4, 1));

  return v2;
}

void sub_1002074B4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1002074CC(uint64_t a1)
{
  NSObject *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD v34[5];
  _QWORD v35[5];
  uint8_t buf[16];

  v2 = qword_100859130;
  if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "PRRose: Resetting chip.", buf, 2u);
  }
  v3 = *(_DWORD *)(a1 + 1504);
  if (v3 >= 6)
  {
    v35[0] = _NSConcreteStackBlock;
    v35[1] = 3221225472;
    v35[2] = sub_10020783C;
    v35[3] = &unk_10080E458;
    v35[4] = a1;
    AnalyticsSendEventLazy(CFSTR("com.apple.nearbyd.RoseBootFailureBreakdown"), v35);
    v25 = qword_100859130;
    if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_ERROR))
      sub_1003DDA80(v25, v26, v27, v28, v29, v30, v31, v32);
    if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_ERROR))
      sub_1003DDA54();
    if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_ERROR))
      sub_1003DD9F0();
    if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_ERROR))
      sub_1003DD98C();
    if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_ERROR))
      sub_1003DD928();
    if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_ERROR))
      sub_1003DD8C4();
    if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_ERROR))
      sub_1003DD860();
    if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_ERROR))
      sub_1003DD7FC();
    if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_ERROR))
      sub_1003DD798();
    if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_ERROR))
      sub_1003DD734();
    if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_ERROR))
      sub_1003DD6D0();
    if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_ERROR))
      sub_1003DD66C();
    if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_ERROR))
      sub_1003DD608();
    if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_ERROR))
      sub_1003DD5A4();
    abort_report_np("fResetCounter exceeded kMaxChipResets (%d)", 5);
LABEL_39:
    if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_ERROR))
      sub_1003DDB18();
    abort_report_np("Unable to power off Rose");
    goto LABEL_42;
  }
  *(_DWORD *)(a1 + 1504) = v3 + 1;
  v34[0] = _NSConcreteStackBlock;
  v34[1] = 3221225472;
  v34[2] = sub_100207B6C;
  v34[3] = &unk_10080E458;
  v34[4] = a1;
  AnalyticsSendEventLazy(CFSTR("com.apple.nearbyd.RoseExternalChipReset"), v34);
  v4 = a1 + 32;
  if ((sub_1003AA9AC(v4, v5, v6, v7, v8, v9, v10, v11) & 1) != 0)
    return 1;
  if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_ERROR))
    sub_1003DDB44();
  if (!sub_1003AC564(v4, 0, v12, v13, v14, v15, v16, v17))
    goto LABEL_39;
  if (sub_1003AC564(v4, 1, v18, v19, v20, v21, v22, v23))
    return 1;
LABEL_42:
  if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_ERROR))
    sub_1003DDAEC();
  v33 = abort_report_np("Unable to power on Rose");
  return (uint64_t)sub_10020783C(v33);
}

id sub_10020783C(uint64_t a1)
{
  unsigned __int8 *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v13;
  void *v14;
  void *v15;
  _QWORD v16[12];
  _QWORD v17[12];

  v1 = *(unsigned __int8 **)(a1 + 32);
  v16[0] = CFSTR("PushFWFailure");
  v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v1[1508]));
  v17[0] = v15;
  v16[1] = CFSTR("PingFWFailure");
  v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v1[1509]));
  v17[1] = v14;
  v16[2] = CFSTR("PushCalFailure");
  v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v1[1510]));
  v17[2] = v13;
  v16[3] = CFSTR("ExtClockSettingFailure");
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v1[1511]));
  v17[3] = v2;
  v16[4] = CFSTR("ConfigureFWSleepFailure");
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v1[1512]));
  v17[4] = v3;
  v16[5] = CFSTR("DisableFWLogsFailure");
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v1[1513]));
  v17[5] = v4;
  v16[6] = CFSTR("FWTimeSyncEnableFailure");
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v1[1514]));
  v17[6] = v5;
  v16[7] = CFSTR("AOPActivateTimeSyncEnableFailure");
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v1[1515]));
  v17[7] = v6;
  v16[8] = CFSTR("ApplyConfigParamsCIRVersionFailure");
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v1[1516]));
  v17[8] = v7;
  v16[9] = CFSTR("ApplyConfigParamsCoExStatusFailure");
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v1[1517]));
  v17[9] = v8;
  v16[10] = CFSTR("ApplyConfigParamsSendPowerTableFailure");
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v1[1518]));
  v17[10] = v9;
  v16[11] = CFSTR("ApplyConfigParamsSetMACAddressFailure");
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v1[1519]));
  v17[11] = v10;
  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v17, v16, 12));

  return v11;
}

void sub_100207AC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;

  _Unwind_Resume(a1);
}

id sub_100207B6C(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  void *v3;
  const __CFString *v5;
  void *v6;

  v1 = *(_QWORD *)(a1 + 32);
  v5 = CFSTR("ResetCounter");
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(v1 + 1504)));
  v6 = v2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v6, &v5, 1));

  return v3;
}

void sub_100207C0C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_100207C24(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t result;

  if ((sub_1003AAC74() & 1) != 0)
  {
    v9 = (unsigned int *)(a1 + 1232);
    v10 = atomic_load((unsigned int *)(a1 + 1232));
    if (v10 == 4 || (v11 = atomic_load(v9), v11 == 8))
    {
      result = sub_1003AA888(a1 + 32, v2, v3, v4, v5, v6, v7, v8);
      if (result)
        return result;
      if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_ERROR))
        sub_1003DDB70();
    }
    else if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_ERROR))
    {
      sub_1003DDB9C(v9);
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_ERROR))
  {
    sub_1003DDC1C();
  }
  return 0;
}

uint64_t sub_100207CE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  v8 = (unsigned int *)(a1 + 1232);
  v9 = atomic_load((unsigned int *)(a1 + 1232));
  if (v9 == 4)
    return sub_1003AA8EC(a1 + 32, a2, a3, a4, a5, a6, a7, a8);
  v10 = atomic_load(v8);
  if (v10 == 8)
    return sub_1003AA8EC(a1 + 32, a2, a3, a4, a5, a6, a7, a8);
  if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_ERROR))
    sub_1003DDC48(v8);
  return 0;
}

uint64_t sub_100207D54(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  NSObject *v4;
  const char *v5;
  const char *v7;
  void *__p;
  _BYTE *v9;
  uint64_t v10;
  uint8_t buf[8];
  void *v12;
  uint64_t v13;
  char v14;
  uint8_t v15[4];
  const char *v16;

  v2 = qword_100859130;
  if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "PRRose: getDeepSleepStateInternal", buf, 2u);
  }
  v14 = sub_100178714(1);
  *(_QWORD *)buf = 0;
  v12 = 0;
  v13 = 0;
  sub_10003A474(buf, &v14, (uint64_t)v15, 1uLL);
  __p = 0;
  v9 = 0;
  v10 = 0;
  if (!sub_10035FF18(a1 + 1240, 0x2Du, (uint64_t)buf, (unint64_t *)&__p))
  {
    if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_ERROR))
      sub_1003DDD30();
    v7 = "PRRose: sending deep sleep state query to RoseSupervisor failed";
LABEL_24:
    abort_report_np(v7);
    __break(1u);
  }
  if (v9 - (_BYTE *)__p != 1)
  {
    if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_ERROR))
      sub_1003DDCC8();
    v7 = "PRRose: RoseSupervisor returned unexpected size for deep sleep state";
    goto LABEL_24;
  }
  v3 = *(char *)__p;
  v4 = qword_100859130;
  if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_DEFAULT))
  {
    if (v3 > 2)
      v5 = "";
    else
      v5 = off_10080ED88[v3];
    *(_DWORD *)v15 = 136315138;
    v16 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "PRRose: deep sleep state %s", v15, 0xCu);
  }
  if (__p)
  {
    v9 = __p;
    operator delete(__p);
  }
  if (*(_QWORD *)buf)
  {
    v12 = *(void **)buf;
    operator delete(*(void **)buf);
  }
  if (v3 < 3)
    return v3 + 1;
  else
    return 0;
}

void sub_100207F40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  if (a13)
    operator delete(a13);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100207F74(uint64_t a1)
{
  uint64_t v1;
  char v3;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1280);
  v3 = 6;
  return (*(uint64_t (**)(void))(v1 + 16))();
}

id sub_100207FAC(uint64_t a1)
{
  void *v2;
  id v3;
  uint64_t *v4;
  id v5;
  void *v6;
  void *v7;
  void *v8;
  _QWORD v10[4];
  _QWORD v11[4];

  v10[0] = CFSTR("LogCollectionType");
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 40)));
  v11[0] = v2;
  v10[1] = CFSTR("LogCollectionReason");
  v3 = objc_alloc((Class)NSString);
  v4 = *(uint64_t **)(a1 + 32);
  if (*((char *)v4 + 23) < 0)
    v4 = (uint64_t *)*v4;
  v5 = objc_msgSend(v3, "initWithCString:encoding:", v4, 4);
  v11[1] = v5;
  v10[2] = CFSTR("Result");
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 44)));
  v11[2] = v6;
  v10[3] = CFSTR("PromotedToFatal");
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned __int8 *)(a1 + 48)));
  v11[3] = v7;
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v11, v10, 4));

  return v8;
}

void sub_1002080E8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

uint64_t sub_100208124(NSObject **a1, uint64_t a2, std::string::size_type a3)
{
  NSObject *v6;
  __int128 *v7;
  std::string::size_type v8;
  unint64_t v9;
  char v10;
  char v11;
  NSObject *v12;
  unint64_t v13;
  uint64_t v14;
  NSObject *v15;
  _QWORD block[6];
  int v18;
  __int128 __p;
  uint64_t v20;
  __n128 (*v21)(__n128 *, __n128 *);
  void (*v22)(uint64_t);
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint8_t buf[4];
  __int128 *v27;
  __int16 v28;
  std::string::size_type v29;

  v6 = (id)qword_100859130;
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    sub_10039FA60(a2, &__p);
    v7 = v20 >= 0 ? &__p : (__int128 *)__p;
    v8 = *(char *)(a3 + 23) >= 0 ? a3 : *(_QWORD *)a3;
    *(_DWORD *)buf = 136315394;
    v27 = v7;
    v28 = 2080;
    v29 = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "PRRose::triggerLogCollection: type: %s, reason: %s", buf, 0x16u);
    if (SHIBYTE(v20) < 0)
      operator delete((void *)__p);
  }

  v9 = sub_100205014((uint64_t)a1);
  v11 = v10;
  v12 = qword_100859130;
  if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_DEFAULT))
  {
    if (v11)
      v13 = v9;
    else
      v13 = 0;
    LODWORD(__p) = 134217984;
    *(_QWORD *)((char *)&__p + 4) = v13;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Last known Rose MAC Timestamp: %llu", (uint8_t *)&__p, 0xCu);
  }
  if ((sub_1003AAC74() & 1) != 0)
  {
    if ((a2 & 0xFFFFFFFE) == 2)
    {
      v14 = sub_100203494((uint64_t)a1, a2, a3);
    }
    else
    {
      *(_QWORD *)&__p = 0;
      *((_QWORD *)&__p + 1) = &__p;
      v20 = 0x4812000000;
      v21 = sub_1002083E4;
      v22 = sub_100208400;
      v23 = 0;
      if (*(char *)(a3 + 23) < 0)
      {
        sub_100004678(&v24, *(void **)a3, *(_QWORD *)(a3 + 8));
      }
      else
      {
        v24 = *(_OWORD *)a3;
        v25 = *(_QWORD *)(a3 + 16);
      }
      v15 = *a1;
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_100208414;
      block[3] = &unk_10080E7D8;
      v18 = a2;
      block[4] = &__p;
      block[5] = a1;
      dispatch_async(v15, block);
      _Block_object_dispose(&__p, 8);
      if (SHIBYTE(v25) < 0)
        operator delete((void *)v24);
      v14 = 1;
    }
    if (!sub_100204CB4((uint64_t)a1) && os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_ERROR))
      sub_1003DDD5C();
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_ERROR))
      sub_1003DDD88();
    return 0;
  }
  return v14;
}

void sub_1002083CC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

__n128 sub_1002083E4(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = a2[3];
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a1[3] = result;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  a2[3].n128_u64[0] = 0;
  return result;
}

void sub_100208400(uint64_t a1)
{
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
}

void sub_100208414(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = (unsigned int *)(v2 + 1232);
  v4 = atomic_load((unsigned int *)(v2 + 1232));
  if (v4 == 4 || (v5 = atomic_load(v3), v5 == 8) || (v6 = atomic_load(v3), v6 == 11))
  {
    if ((sub_100203494(v2, *(unsigned int *)(a1 + 48), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 48) & 1) == 0
      && os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_ERROR))
    {
      sub_1003DDDB4();
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_ERROR))
  {
    sub_1003DDDE0(v3);
  }
}

CFDataRef sub_1002084C0(uint64_t a1)
{
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;
  CFDataRef result;

  if ((sub_1003AAC74() & 1) != 0)
  {
    v2 = (unsigned int *)(a1 + 1232);
    v3 = atomic_load((unsigned int *)(a1 + 1232));
    if (v3 == 4 || (v4 = atomic_load(v2), v4 == 8))
    {
      result = sub_1003AAC88(a1 + 32);
      if (result)
        return result;
      if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_ERROR))
        sub_1003DDE60();
    }
    else if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_ERROR))
    {
      sub_1003DDE8C(v2);
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_ERROR))
  {
    sub_1003DDF0C();
  }
  return 0;
}

id sub_100208580(uint64_t a1)
{
  NSObject *v2;
  uint8_t v4[16];

  v2 = qword_100859130;
  if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "PRRose: _startReceivingHIDEvents", v4, 2u);
  }
  return sub_100360944(a1 + 1240);
}

uint64_t sub_1002085EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _BYTE v23[27];

  v14 = *(_QWORD *)(a1 + 40);
  v8 = *(_OWORD *)(a1 + 112);
  v20 = *(_OWORD *)(a1 + 128);
  v19 = v8;
  v9 = *(_OWORD *)(a1 + 80);
  v18 = *(_OWORD *)(a1 + 96);
  v17 = v9;
  *(_OWORD *)&v23[11] = *(_OWORD *)(a1 + 187);
  *(_OWORD *)v23 = *(_OWORD *)(a1 + 176);
  v10 = *(_OWORD *)(a1 + 144);
  v22 = *(_OWORD *)(a1 + 160);
  v21 = v10;
  v11 = *(_OWORD *)(a1 + 64);
  v15 = *(_OWORD *)(a1 + 48);
  v12 = *(_QWORD *)(a1 + 32);
  v16 = v11;
  return (*(uint64_t (**)(_QWORD, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 + 1272) + 16))(*(_QWORD *)(v12 + 1272), &v14, a3, a4, a5, a6, a7, a8);
}

const char *sub_100208690(uint64_t a1, int a2)
{
  if ((a2 - 1) > 0xA)
    return "HostStartup";
  else
    return off_10080F038[a2 - 1];
}

void sub_1002086B8(uint64_t a1, unsigned int a2, uint64_t a3)
{
  NSObject *v5;
  unsigned int v6;
  unsigned int v7;
  const char *v8;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  NSObject *v27;
  const char *v28;
  char v29;
  const char *v30;
  void *v31;
  NSObject *v32;
  NSObject *v33;
  NSObject *v34;
  int v35;
  unsigned __int8 v36;
  int v37;
  NSObject *v38;
  std::chrono::steady_clock::time_point v39;
  unsigned __int8 v40;
  std::chrono::steady_clock::time_point v41;
  std::chrono::system_clock::time_point v42;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v43;
  std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> v44;
  unsigned __int8 v45;
  char v46;
  void *__p[2];
  uint64_t v48;
  std::unique_lock<std::mutex> __lk;
  _QWORD v50[5];
  BOOL v51;
  uint8_t v52[8];
  __int16 v53;
  int v54;
  char v55;
  uint8_t buf[24];

  if (a2)
  {
    v5 = qword_100859130;
    if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_DEFAULT))
    {
      v6 = atomic_load((unsigned int *)(a1 + 1232));
      v7 = v6 - 1;
      if (v7 > 0xA)
        v8 = "UnknownToHost";
      else
        v8 = off_10080F090[v7];
      if (a2 > 0xB)
        v30 = "HostStartup";
      else
        v30 = off_10080F038[a2 - 1];
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = v8;
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = v30;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "PRRose::setStateFromUnknownToHost ignoring unexpected event while in state: %s, event: %s", buf, 0x16u);
    }
    return;
  }
  sub_100208580(a1);
  if (!sub_100204608(a1))
  {
    if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_ERROR))
      sub_1003DE1A4();
    abort_report_np("PRRose::setStateFromUnknownToHost failed to assert UWB comms ownership");
    goto LABEL_103;
  }
  if (sub_100204B1C(a1))
  {
    v51 = 0;
    v10 = sub_1003AC638(a1 + 32, &v51);
    if (v51)
      v18 = v10;
    else
      v18 = 0;
    if ((v18 & 1) == 0)
    {
      v19 = qword_100859130;
      if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Rose powered off or unable to read the power state. Powering it on", buf, 2u);
      }
      if (!sub_1003AC564(a1 + 32, 1, v20, v21, v22, v23, v24, v25))
      {
        if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_ERROR))
          sub_1003DE120();
        abort_report_np("Unable to power on R1");
        goto LABEL_103;
      }
    }
    v26 = sub_1003AAC80(a1 + 32, v11, v12, v13, v14, v15, v16, v17);
    v27 = qword_100859130;
    if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_DEFAULT))
    {
      if ((v26 - 1) > 3)
        v28 = "SecureROM";
      else
        v28 = off_10080F018[v26 - 1];
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v28;
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "PRRose: Firmware State: %s", buf, 0xCu);
    }
    if (v26 != 1)
      operator new();
    v31 = sub_100004784();
    if (sub_1003956D8((uint64_t)v31))
    {
      switch(sub_100207D54(a1))
      {
        case 0u:
          if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_ERROR))
            sub_1003DDFBC();
          abort_report_np("failed to get deep sleep state during startup");
          goto LABEL_103;
        case 1u:
          v32 = qword_100859130;
          if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "PRRose: not in deep sleep, proceeding", buf, 2u);
          }
          goto LABEL_48;
        case 2u:
          v33 = qword_100859130;
          if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "PRRose: requesting deep sleep exit before proceeding", buf, 2u);
          }
          if ((sub_100203F94(a1, 0) & 1) != 0)
            goto LABEL_48;
          sub_1002074CC(a1);
          if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_ERROR))
            sub_1003DDFE8();
          break;
        case 3u:
          v34 = qword_100859130;
          if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "PRRose: waiting for deep sleep exit to complete before proceeding", buf, 2u);
          }
          if ((sub_10020DB7C(a1, 0) & 1) != 0)
            goto LABEL_48;
          sub_1002074CC(a1);
          if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_ERROR))
            sub_1003DDFE8();
          break;
        default:
          goto LABEL_48;
      }
      abort_report_np("failed to exit deep sleep during startup");
      goto LABEL_103;
    }
LABEL_48:
    atomic_store(2u, (unsigned int *)(a1 + 1232));
    v50[0] = _NSConcreteStackBlock;
    v50[1] = 3221225472;
    v50[2] = sub_10020DDB0;
    v50[3] = &unk_1007FA668;
    v50[4] = a1;
    sub_100200F10((NSObject **)a1, v50);
    memset(buf, 0, sizeof(buf));
    if (!sub_1003605CC(a1 + 1240, 0xD6u, (unint64_t *)buf))
    {
      if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_ERROR))
        sub_1003DDF90();
      abort_report_np("PRRose::setStateFromUnknownToHost: failed to get AOP property CmdQueueClearAllowed");
LABEL_103:
      __break(1u);
      return;
    }
    v35 = **(_BYTE **)buf;
    __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 1336);
    __lk.__owns_ = 1;
    std::mutex::lock((std::mutex *)(a1 + 1336));
    v36 = atomic_load((unsigned __int8 *)(a1 + 1448));
    v37 = v36 & 1;
    v38 = qword_100859130;
    if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)v52 = 67109376;
      *(_DWORD *)&v52[4] = v35 != 0;
      v53 = 1024;
      v54 = v37;
      _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "PRRose aopCmdQueueClearAllowedProperty = %d, fAopResetCompleted = %d", v52, 0xEu);
    }
    if (!v35 && !v37)
    {
      v39.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_ + 200000000;
      while (1)
      {
        v40 = atomic_load((unsigned __int8 *)(a1 + 1448));
        if ((v40 & 1) != 0)
          goto LABEL_79;
        if (std::chrono::steady_clock::now().__d_.__rep_ >= v39.__d_.__rep_)
          goto LABEL_70;
        v41.__d_.__rep_ = v39.__d_.__rep_ - std::chrono::steady_clock::now().__d_.__rep_;
        if (v41.__d_.__rep_ >= 1)
          break;
LABEL_69:
        if (std::chrono::steady_clock::now().__d_.__rep_ >= v39.__d_.__rep_)
        {
LABEL_70:
          v45 = atomic_load((unsigned __int8 *)(a1 + 1448));
          if ((v45 & 1) != 0)
            goto LABEL_79;
          if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_ERROR))
            sub_1003DDF64();
          atomic_store(6u, (unsigned int *)(a1 + 1232));
          sub_10000BF04(v52, "PRRose::setStateFromUnknownToHost: failed to clear AOP command queue.");
          v46 = sub_100203494(a1, 0, (std::string::size_type)v52);
          if (v55 < 0)
            operator delete(*(void **)v52);
          if ((v46 & 1) == 0)
          {
            if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_ERROR))
              sub_1003DDF38();
            abort_report_np("PRRose::setStateFromUnknownToHost: Failed to trigger fatal crashLog");
            goto LABEL_103;
          }
          goto LABEL_84;
        }
      }
      std::chrono::steady_clock::now();
      v42.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
      if (v42.__d_.__rep_)
      {
        if (v42.__d_.__rep_ < 1)
        {
          if ((unint64_t)v42.__d_.__rep_ < 0xFFDF3B645A1CAC09)
          {
            v43 = 0x8000000000000000;
            goto LABEL_67;
          }
        }
        else if ((unint64_t)v42.__d_.__rep_ > 0x20C49BA5E353F7)
        {
          v43 = 0x7FFFFFFFFFFFFFFFLL;
          goto LABEL_65;
        }
        v43 = 1000 * v42.__d_.__rep_;
      }
      else
      {
        v43 = 0;
      }
LABEL_65:
      if (v43 > (v41.__d_.__rep_ ^ 0x7FFFFFFFFFFFFFFFLL))
      {
        v44.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
LABEL_68:
        std::condition_variable::__do_timed_wait((std::condition_variable *)(a1 + 1400), &__lk, v44);
        std::chrono::steady_clock::now();
        goto LABEL_69;
      }
LABEL_67:
      v44.__d_.__rep_ = v43 + v41.__d_.__rep_;
      goto LABEL_68;
    }
LABEL_79:
    sub_1002046D8(a1);
    if (*(char *)(a3 + 23) < 0)
    {
      sub_100004678(__p, *(void **)a3, *(_QWORD *)(a3 + 8));
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)a3;
      v48 = *(_QWORD *)(a3 + 16);
    }
    sub_100200FD0(a1, 2, __p);
    if (SHIBYTE(v48) < 0)
      operator delete(__p[0]);
LABEL_84:
    if (__lk.__owns_)
      std::mutex::unlock(__lk.__m_);
    if (*(_QWORD *)buf)
    {
      *(_QWORD *)&buf[8] = *(_QWORD *)buf;
      operator delete(*(void **)buf);
    }
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_ERROR))
      sub_1003DE178();
    atomic_store(6u, (unsigned int *)(a1 + 1232));
    sub_10000BF04(buf, "PRRose::setStateFromUnknownToHost: failed to reset AOP jobs");
    v29 = sub_100203494(a1, 0, (std::string::size_type)buf);
    if ((char)buf[23] < 0)
      operator delete(*(void **)buf);
    if ((v29 & 1) == 0)
    {
      if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_ERROR))
        sub_1003DE14C();
      abort_report_np("PRRose::setStateFromUnknownToHost: Failed to trigger fatal crashLog");
      goto LABEL_103;
    }
  }
}

void sub_100209100(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, std::mutex *a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  uint64_t v36;
  void *v38;

  if (a36 < 0)
    operator delete(__p);
  if (a18)
    std::mutex::unlock(a17);
  v38 = *(void **)(v36 - 112);
  if (v38)
  {
    *(_QWORD *)(v36 - 104) = v38;
    operator delete(v38);
  }
  _Unwind_Resume(exception_object);
}

void sub_1002091DC(uint64_t a1, int a2, __int128 *a3)
{
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  const char *v10;
  uint64_t v11;
  NSObject *v12;
  uint32_t v13;
  unsigned int v14;
  unsigned int v15;
  const char *v16;
  void *v17;
  _BOOL8 v19;
  int v20;
  const char *v21;
  const char *v22;
  __int128 v23;
  uint64_t v24;
  __int128 __dst;
  uint64_t v26;
  _QWORD v27[5];
  void *__p[2];
  uint64_t v29;
  _QWORD v30[5];
  uint8_t buf[4];
  const char *v32;

  switch(a2)
  {
    case 0:
      v5 = qword_100859130;
      if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        v6 = "PRRose, already started, ignoring HostStartup";
        goto LABEL_11;
      }
      break;
    case 1:
      atomic_store(2u, (unsigned int *)(a1 + 1232));
      v30[0] = _NSConcreteStackBlock;
      v30[1] = 3221225472;
      v30[2] = sub_10020E0E0;
      v30[3] = &unk_1007FA668;
      v30[4] = a1;
      sub_100200F10((NSObject **)a1, v30);
      if ((sub_10020700C(a1) & 1) != 0)
      {
        v11 = 2;
      }
      else
      {
        ++*(_BYTE *)(a1 + 1508);
        v11 = 3;
      }
      if (*((char *)a3 + 23) < 0)
      {
        sub_100004678(__p, *(void **)a3, *((_QWORD *)a3 + 1));
      }
      else
      {
        *(_OWORD *)__p = *a3;
        v29 = *((_QWORD *)a3 + 2);
      }
      sub_100200FD0(a1, v11, __p);
      if (SHIBYTE(v29) < 0)
      {
        v17 = __p[0];
        goto LABEL_31;
      }
      break;
    case 6:
      atomic_store(6u, (unsigned int *)(a1 + 1232));
      v27[0] = _NSConcreteStackBlock;
      v27[1] = 3221225472;
      v27[2] = sub_10020E114;
      v27[3] = &unk_1007FA668;
      v27[4] = a1;
      sub_100200F10((NSObject **)a1, v27);
      if (*((char *)a3 + 23) < 0)
      {
        sub_100004678(&__dst, *(void **)a3, *((_QWORD *)a3 + 1));
      }
      else
      {
        __dst = *a3;
        v26 = *((_QWORD *)a3 + 2);
      }
      sub_100200FD0(a1, 6, &__dst);
      if (SHIBYTE(v26) < 0)
      {
        v17 = (void *)__dst;
        goto LABEL_31;
      }
      break;
    case 7:
      sub_1001FFBC4(a1);
      if (*((char *)a3 + 23) < 0)
      {
        sub_100004678(&v23, *(void **)a3, *((_QWORD *)a3 + 1));
      }
      else
      {
        v23 = *a3;
        v24 = *((_QWORD *)a3 + 2);
      }
      sub_100200FD0(a1, 1, &v23);
      if (SHIBYTE(v24) < 0)
      {
        v17 = (void *)v23;
LABEL_31:
        operator delete(v17);
      }
      break;
    case 8:
      v7 = qword_100859130;
      if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_DEFAULT))
      {
        v8 = atomic_load((unsigned int *)(a1 + 1232));
        v9 = v8 - 1;
        if (v9 > 0xA)
          v10 = "UnknownToHost";
        else
          v10 = off_10080F090[v9];
        *(_DWORD *)buf = 136315138;
        v32 = v10;
        v6 = "PRRose, regulatory,configuration update ignored during %s";
        goto LABEL_36;
      }
      break;
    case 10:
      v5 = qword_100859130;
      if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        v6 = "PRRose, already started, ignoring PowerOn";
LABEL_11:
        v12 = v5;
        v13 = 2;
        goto LABEL_37;
      }
      break;
    case 11:
      v7 = qword_100859130;
      if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_DEFAULT))
      {
        v14 = atomic_load((unsigned int *)(a1 + 1232));
        v15 = v14 - 1;
        if (v15 > 0xA)
          v16 = "UnknownToHost";
        else
          v16 = off_10080F090[v15];
        *(_DWORD *)buf = 136315138;
        v32 = v16;
        v6 = "PRRose, LPEM enable event ignored during %s";
LABEL_36:
        v12 = v7;
        v13 = 12;
LABEL_37:
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, v6, buf, v13);
      }
      break;
    default:
      v19 = os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_ERROR);
      if (v19)
        sub_1003DE1D0(a1);
      v20 = atomic_load((unsigned int *)(a1 + 1232));
      v21 = sub_100200DD8(v19, v20);
      v22 = sub_100208690((uint64_t)v21, a2);
      abort_report_np("PRRose unexpected event while in state: %s, event: %s", v21, v22);
      __break(1u);
      break;
  }
}

void sub_1002095A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a34 < 0)
    operator delete(a29);
  _Unwind_Resume(exception_object);
}

void sub_1002095F0(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5;
  const char *v6;
  NSObject *v7;
  uint32_t v8;
  uint64_t v9;
  void *v10;
  NSObject *v11;
  uint64_t p_p;
  void *v13;
  NSObject *v14;
  uint64_t v15;
  NSObject *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  char v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  const char *v26;
  unsigned int v27;
  unsigned int v28;
  const char *v29;
  _QWORD *v30;
  void *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint8_t v36;
  char v37;
  unint64_t v38;
  void *v39;
  int v40;
  void *v41;
  int v42;
  _BOOL4 v44;
  NSObject *v45;
  NSObject *v46;
  int v47;
  int v48;
  BOOL v49;
  void *v50;
  int v51;
  NSObject *v52;
  void *v53;
  NSObject *v54;
  int v55;
  int v56;
  int v57;
  uint64_t i;
  void *v59;
  BOOL v60;
  void *v61;
  void *v62;
  NSObject *v63;
  BOOL v64;
  NSObject *v65;
  void *v66;
  NSObject *v67;
  BOOL v68;
  BOOL v69;
  int AppBooleanValue;
  int v71;
  NSObject *v72;
  _BOOL4 v73;
  void *v74;
  BOOL v75;
  NSObject *v76;
  NSObject *v77;
  NSObject *v78;
  NSObject *v79;
  NSObject *v80;
  NSObject *v81;
  void *v82;
  unsigned int v83;
  unsigned int v84;
  _BOOL4 v85;
  NSObject *v86;
  NSObject *v87;
  void *v88;
  void *v89;
  BOOL v90;
  unsigned int v91;
  NSObject *v92;
  int v93;
  NSObject *v94;
  const char *v95;
  BOOL v96;
  __int128 *v97;
  uint64_t v98;
  NSObject *v99;
  NSObject *v100;
  NSObject *v101;
  _BOOL4 v102;
  NSObject *v103;
  NSObject *v104;
  unsigned __int8 v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  NSObject *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  NSObject *v131;
  uint64_t v132;
  void *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  NSObject *v140;
  NSObject *v141;
  void *v142;
  _BOOL4 v143;
  void *v144;
  _BOOL4 v145;
  NSObject *v146;
  void *v147;
  _BOOL4 v148;
  void *v149;
  _BOOL4 v150;
  void *v151;
  _BOOL4 v152;
  void *v153;
  int v154;
  NSObject *v155;
  BOOL v156;
  int v157;
  _BOOL4 v158;
  uint64_t v159;
  void **v160;
  NSObject *v161;
  void *v162;
  NSObject *v163;
  void *v164;
  NSObject *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  int v172;
  unsigned int v173;
  NSObject *v174;
  NSObject *v175;
  _BOOL8 v176;
  int v177;
  const char *v178;
  const char *v179;
  uint64_t v180;
  unint64_t v181;
  void *v182;
  void *v183;
  uint64_t v184;
  _QWORD v185[5];
  void *v186[2];
  uint64_t v187;
  _QWORD v188[5];
  void *__dst[2];
  uint64_t v190;
  _QWORD v191[2];
  char v192;
  _QWORD v193[5];
  _QWORD v194[2];
  char v195;
  _QWORD v196[2];
  char v197;
  void *v198[2];
  char v199;
  _QWORD v200[2];
  char v201;
  _QWORD v202[2];
  char v203;
  char v204;
  void *v205[2];
  char v206;
  _QWORD v207[2];
  char v208;
  _QWORD v209[2];
  char v210;
  void *v211[2];
  char v212;
  _QWORD v213[2];
  char v214;
  void *v215[2];
  char v216;
  void *v217[2];
  char v218;
  uint8_t v219[8];
  uint64_t v220;
  uint8_t v221[8];
  void *v222;
  int v223[2];
  uint64_t v224;
  void *p_buf;
  int v226[2];
  uint64_t v227;
  _QWORD v228[2];
  char v229;
  void *v230;
  int v231[2];
  uint64_t v232;
  void *v233[2];
  char v234;
  _QWORD v235[2];
  char v236;
  __int128 v237[2];
  int v238[16];
  char v239;
  char v240;
  std::string v241;
  Boolean keyExistsAndHasValidFormat[8];
  __int128 buf;
  int v244[2];
  __int128 *v245;
  char v246;
  __int128 __p;
  __int128 v248;
  __int16 v249;
  uint64_t v250;
  _QWORD v251[35];
  uint64_t v252[4];

  switch(a2)
  {
    case 0:
      v5 = qword_100859130;
      if (!os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_DEFAULT))
        return;
      LOWORD(__p) = 0;
      v6 = "PRRose, already started, ignoring HostStartup";
      v7 = v5;
      v8 = 2;
      goto LABEL_71;
    case 2:
      sub_100206E5C(a1);
      atomic_store(3u, (unsigned int *)(a1 + 1232));
      sub_10000BF04(&__p, "shenan");
      sub_100210930(&v241, &__p);
      if (SBYTE7(v248) < 0)
        operator delete((void *)__p);
      v184 = a1 + 32;
      sub_1003A81A8(a1 + 32, (unsigned __int8 *)&v241, (uint64_t)v237);
      v9 = *(_QWORD *)(a1 + 1304);
      if (v9)
        sub_10026CC88(v9, &v241);
      if (!v240)
      {
        if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_ERROR))
          sub_1003DE318();
        ++*(_BYTE *)(a1 + 1509);
        sub_10000BF04(v235, "Failed to send hello.");
        sub_100200FD0(a1, 3, v235);
        if ((v236 & 0x80000000) == 0)
          goto LABEL_344;
        v31 = (void *)v235[0];
LABEL_65:
        operator delete(v31);
        goto LABEL_344;
      }
      v10 = sub_100004784();
      if (!v240)
        goto LABEL_348;
      sub_100394ED8((uint64_t)v10, v237);
      v11 = (id)qword_100859130;
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        if (!v240)
          sub_10000BA44();
        sub_10038CB30((uint64_t)v237);
        if ((SBYTE7(v248) & 0x80u) == 0)
          p_p = (uint64_t)&__p;
        else
          p_p = __p;
        LODWORD(buf) = 136315138;
        *(_QWORD *)((char *)&buf + 4) = p_p;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Hello Response: %s", (uint8_t *)&buf, 0xCu);
        if (SBYTE7(v248) < 0)
          operator delete((void *)__p);
      }

      if (*(_BYTE *)(a1 + 1488))
      {
        v13 = sub_100004784();
        if ((sub_1003956F0((uint64_t)v13) & 1) == 0)
        {
          v14 = (id)qword_100859130;
          if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
            sub_1003DE65C();

          *(_BYTE *)(a1 + 1488) = 0;
          *(_BYTE *)(a1 + 1449) = 0;
          sub_100192178(*(NSObject ***)(a1 + 1528), 15000);
        }
      }
      v15 = *(_QWORD *)(a1 + 1304);
      if (v15)
      {
        if (!v240)
          goto LABEL_348;
        sub_10026CFD0(v15, (uint64_t)v237);
      }
      if (!sub_100204EBC(a1))
      {
        if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_ERROR))
          sub_1003DE630();
        AnalyticsSendEventLazy(CFSTR("com.apple.nearbyd.RoseCalDataMissing"), &stru_10080E818);
        ++*(_BYTE *)(a1 + 1510);
        sub_10000BF04(v233, "Resetting chip since cal data has not been pushed");
        sub_100200FD0(a1, 3, v233);
        if ((v234 & 0x80000000) == 0)
          goto LABEL_344;
        v31 = v233[0];
        goto LABEL_65;
      }
      if (!v240)
LABEL_348:
        sub_10000BA44();
      if (v239)
      {
        sub_10020E200((uint64_t)&__p, v238);
        if (!v249)
        {
          v16 = (id)qword_100859130;
          if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
            sub_1003DE604();

        }
        sub_10013EC8C((uint64_t)&__p);
      }
      v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
      v183 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "objectForKey:", CFSTR("NBePAeLNA")));

      if (v183 && (v19 = objc_opt_class(NSNumber, v18), (objc_opt_isKindOfClass(v183, v19) & 1) != 0))
      {
        v20 = (unint64_t)objc_msgSend(v183, "integerValue");
        v21 = v20;
        v22 = 0;
        v181 = v20 >> 8;
      }
      else
      {
        v21 = 0;
        LOBYTE(v181) = 0;
        v22 = 1;
      }
      v32 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
      v182 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v32, "objectForKey:", CFSTR("UWBePAeLNA")));

      if (v182 && (v34 = objc_opt_class(NSNumber, v33), (objc_opt_isKindOfClass(v182, v34) & 1) != 0))
      {
        v35 = (unint64_t)objc_msgSend(v182, "integerValue");
        v36 = v35;
        v37 = 0;
        v38 = v35 >> 8;
      }
      else
      {
        v36 = 0;
        LOBYTE(v38) = 0;
        v37 = 1;
      }
      v39 = sub_100004784();
      v40 = sub_100395658((uint64_t)v39);
      v41 = sub_100004784();
      v42 = sub_100395790((uint64_t)v41);
      v44 = (v40 & 0xFF0000) != 0 && (unsigned __int16)v40 == 5;
      if (v42)
      {
        v222 = 0;
        *(_QWORD *)v221 = 0;
        *(_QWORD *)v223 = 0;
        if ((v22 & 1) != 0)
        {
          if (v44)
            LOBYTE(__p) = 2;
          else
            LOBYTE(__p) = 3;
          sub_10020E2BC((unint64_t *)v221, &__p);
          LOBYTE(__p) = 2;
          sub_10020E2BC((unint64_t *)v221, &__p);
        }
        else
        {
          LOBYTE(__p) = v21;
          LOBYTE(buf) = v181;
          sub_10020E2BC((unint64_t *)v221, &__p);
          sub_10020E2BC((unint64_t *)v221, &buf);
        }
        v46 = (id)qword_100859130;
        if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
        {
          v47 = **(_BYTE **)v221;
          v48 = *(unsigned __int8 *)(*(_QWORD *)v221 + 1);
          LODWORD(__p) = 67109376;
          DWORD1(__p) = v47;
          WORD4(__p) = 1024;
          *(_DWORD *)((char *)&__p + 10) = v48;
          _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEFAULT, "Set NB ePA&eLNA to high gain mode, NB:(0x%02x, 0x%02x)", (uint8_t *)&__p, 0xEu);
        }

        LOBYTE(__p) = 45;
        *((_QWORD *)&__p + 1) = 0;
        v248 = 0uLL;
        sub_1001530EC((_QWORD *)&__p + 1, *(const void **)v221, (uint64_t)v222, (size_t)v222 - *(_QWORD *)v221);
        LOBYTE(buf) = __p;
        v245 = 0;
        *((_QWORD *)&buf + 1) = 0;
        *(_QWORD *)v244 = 0;
        sub_1001530EC((_QWORD *)&buf + 1, *((const void **)&__p + 1), v248, v248 - *((_QWORD *)&__p + 1));
        sub_100205340(&v230, (uint64_t)&buf, 1uLL);
        if (*((_QWORD *)&buf + 1))
        {
          *(_QWORD *)v244 = *((_QWORD *)&buf + 1);
          operator delete(*((void **)&buf + 1));
        }
        buf = 0uLL;
        *(_QWORD *)v244 = 0;
        sub_100210B80(&buf, (uint64_t)v230, *(uint64_t *)v231, (uint64_t)(*(_QWORD *)v231 - (_QWORD)v230) >> 5);
        v49 = sub_1003A98C0(v184, (uint64_t *)&buf);
        p_buf = &buf;
        sub_100153338((void ***)&p_buf);
        if (!v49)
        {
          if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_ERROR))
            sub_1003DE5D8();
          sub_10000BF04(v228, "Failed to set NB ePA/eLNA mode on the FW");
          sub_100200FD0(a1, 3, v228);
          if ((v229 & 0x80000000) == 0)
            goto LABEL_202;
          v53 = (void *)v228[0];
          goto LABEL_201;
        }
        *(_QWORD *)&buf = &v230;
        sub_100153338((void ***)&buf);
        if (*((_QWORD *)&__p + 1))
        {
          *(_QWORD *)&v248 = *((_QWORD *)&__p + 1);
          operator delete(*((void **)&__p + 1));
        }
        if (*(_QWORD *)v221)
        {
          v222 = *(void **)v221;
          operator delete(*(void **)v221);
        }
      }
      else
      {
        v45 = (id)qword_100859130;
        if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(__p) = 0;
          _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEFAULT, "Use default NB ePA&eLNA settings", (uint8_t *)&__p, 2u);
        }

      }
      v50 = sub_100004784();
      v51 = sub_1003956D8((uint64_t)v50);
      if ((v22 & 1) != 0)
      {
        if (v51)
        {
          *(_QWORD *)v231 = 0;
          v230 = 0;
          v232 = 0;
          *(_QWORD *)v226 = 0;
          p_buf = 0;
          v227 = 0;
          goto LABEL_107;
        }
LABEL_110:
        v52 = (id)qword_100859130;
        if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(__p) = 0;
          _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_DEFAULT, "Use default NB&UWB eLNA settings", (uint8_t *)&__p, 2u);
        }

LABEL_134:
        sub_100206A78(a1);
        v61 = sub_100004784();
        if (sub_1003956D8((uint64_t)v61))
        {
          v62 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
          if ((objc_msgSend(v62, "BOOLForKey:", CFSTR("disableUWBRxLP")) & 1) == 0)
          {
            v63 = (id)qword_100859130;
            if (os_log_type_enabled(v63, OS_LOG_TYPE_DEFAULT))
            {
              LOWORD(__p) = 0;
              _os_log_impl((void *)&_mh_execute_header, v63, OS_LOG_TYPE_DEFAULT, "enable UWB RX LP", (uint8_t *)&__p, 2u);
            }

            LOBYTE(__p) = 1;
            sub_10020639C(v221, &__p, 1uLL);
            LOBYTE(__p) = 40;
            *((_QWORD *)&__p + 1) = 0;
            v248 = 0uLL;
            sub_1001530EC((_QWORD *)&__p + 1, *(const void **)v221, (uint64_t)v222, (size_t)v222 - *(_QWORD *)v221);
            LOBYTE(buf) = __p;
            v245 = 0;
            *((_QWORD *)&buf + 1) = 0;
            *(_QWORD *)v244 = 0;
            sub_1001530EC((_QWORD *)&buf + 1, *((const void **)&__p + 1), v248, v248 - *((_QWORD *)&__p + 1));
            sub_100205340(&v230, (uint64_t)&buf, 1uLL);
            if (*((_QWORD *)&buf + 1))
            {
              *(_QWORD *)v244 = *((_QWORD *)&buf + 1);
              operator delete(*((void **)&buf + 1));
            }
            buf = 0uLL;
            *(_QWORD *)v244 = 0;
            sub_100210B80(&buf, (uint64_t)v230, *(uint64_t *)v231, (uint64_t)(*(_QWORD *)v231 - (_QWORD)v230) >> 5);
            v64 = sub_1003A98C0(v184, (uint64_t *)&buf);
            p_buf = &buf;
            sub_100153338((void ***)&p_buf);
            if (!v64)
            {
              v65 = (id)qword_100859130;
              if (os_log_type_enabled(v65, OS_LOG_TYPE_ERROR))
                sub_1003DE580();

              sub_10000BF04(v215, "");
              sub_100200FD0(a1, 3, v215);
              if (v216 < 0)
                operator delete(v215[0]);
            }
            *(_QWORD *)&buf = &v230;
            sub_100153338((void ***)&buf);
            if (*((_QWORD *)&__p + 1))
            {
              *(_QWORD *)&v248 = *((_QWORD *)&__p + 1);
              operator delete(*((void **)&__p + 1));
            }
            if (*(_QWORD *)v221)
            {
              v222 = *(void **)v221;
              operator delete(*(void **)v221);
            }
            if (!v64)
            {

              goto LABEL_343;
            }
          }

        }
        v66 = sub_100004784();
        if (sub_100395734((uint64_t)v66))
        {
          v67 = (id)qword_100859130;
          if (os_log_type_enabled(v67, OS_LOG_TYPE_DEFAULT))
          {
            LOWORD(__p) = 0;
            _os_log_impl((void *)&_mh_execute_header, v67, OS_LOG_TYPE_DEFAULT, "Enable Host GTB", (uint8_t *)&__p, 2u);
          }

          LOBYTE(__p) = 1;
          sub_10020639C(v221, &__p, 1uLL);
          LOBYTE(__p) = 51;
          *((_QWORD *)&__p + 1) = 0;
          v248 = 0uLL;
          sub_1001530EC((_QWORD *)&__p + 1, *(const void **)v221, (uint64_t)v222, (size_t)v222 - *(_QWORD *)v221);
          LOBYTE(buf) = __p;
          v245 = 0;
          *((_QWORD *)&buf + 1) = 0;
          *(_QWORD *)v244 = 0;
          sub_1001530EC((_QWORD *)&buf + 1, *((const void **)&__p + 1), v248, v248 - *((_QWORD *)&__p + 1));
          sub_100205340(&v230, (uint64_t)&buf, 1uLL);
          if (*((_QWORD *)&buf + 1))
          {
            *(_QWORD *)v244 = *((_QWORD *)&buf + 1);
            operator delete(*((void **)&buf + 1));
          }
          buf = 0uLL;
          *(_QWORD *)v244 = 0;
          sub_100210B80(&buf, (uint64_t)v230, *(uint64_t *)v231, (uint64_t)(*(_QWORD *)v231 - (_QWORD)v230) >> 5);
          v68 = sub_1003A98C0(v184, (uint64_t *)&buf);
          p_buf = &buf;
          sub_100153338((void ***)&p_buf);
          if (!v68)
          {
            v78 = (id)qword_100859130;
            if (os_log_type_enabled(v78, OS_LOG_TYPE_ERROR))
              sub_1003DE554();

            sub_10000BF04(v213, "Failed to configure Rose to use host GTB");
            sub_100200FD0(a1, 3, v213);
            if ((v214 & 0x80000000) == 0)
              goto LABEL_202;
            v53 = (void *)v213[0];
LABEL_201:
            operator delete(v53);
LABEL_202:
            *(_QWORD *)&buf = &v230;
            sub_100153338((void ***)&buf);
            if (*((_QWORD *)&__p + 1))
            {
              *(_QWORD *)&v248 = *((_QWORD *)&__p + 1);
              operator delete(*((void **)&__p + 1));
            }
            v74 = *(void **)v221;
            if (!*(_QWORD *)v221)
              goto LABEL_343;
            v222 = *(void **)v221;
            goto LABEL_206;
          }
          *(_QWORD *)&buf = &v230;
          sub_100153338((void ***)&buf);
          if (*((_QWORD *)&__p + 1))
          {
            *(_QWORD *)&v248 = *((_QWORD *)&__p + 1);
            operator delete(*((void **)&__p + 1));
          }
          if (*(_QWORD *)v221)
          {
            v222 = *(void **)v221;
            operator delete(*(void **)v221);
          }
        }
        if (sub_10020513C())
          goto LABEL_169;
        LOWORD(__p) = 1;
        sub_10020639C(v221, &__p, 2uLL);
        LOBYTE(__p) = 13;
        *((_QWORD *)&__p + 1) = 0;
        v248 = 0uLL;
        sub_1001530EC((_QWORD *)&__p + 1, *(const void **)v221, (uint64_t)v222, (size_t)v222 - *(_QWORD *)v221);
        LOBYTE(buf) = __p;
        v245 = 0;
        *((_QWORD *)&buf + 1) = 0;
        *(_QWORD *)v244 = 0;
        sub_1001530EC((_QWORD *)&buf + 1, *((const void **)&__p + 1), v248, v248 - *((_QWORD *)&__p + 1));
        sub_100205340(&v230, (uint64_t)&buf, 1uLL);
        if (*((_QWORD *)&buf + 1))
        {
          *(_QWORD *)v244 = *((_QWORD *)&buf + 1);
          operator delete(*((void **)&buf + 1));
        }
        buf = 0uLL;
        *(_QWORD *)v244 = 0;
        sub_100210B80(&buf, (uint64_t)v230, *(uint64_t *)v231, (uint64_t)(*(_QWORD *)v231 - (_QWORD)v230) >> 5);
        v69 = sub_1003A98C0(v184, (uint64_t *)&buf);
        p_buf = &buf;
        sub_100153338((void ***)&p_buf);
        if (v69)
        {
          *(_QWORD *)&buf = &v230;
          sub_100153338((void ***)&buf);
          if (*((_QWORD *)&__p + 1))
          {
            *(_QWORD *)&v248 = *((_QWORD *)&__p + 1);
            operator delete(*((void **)&__p + 1));
          }
          if (*(_QWORD *)v221)
          {
            v222 = *(void **)v221;
            operator delete(*(void **)v221);
          }
LABEL_169:
          keyExistsAndHasValidFormat[0] = 0;
          AppBooleanValue = CFPreferencesGetAppBooleanValue(CFSTR("enableRoseFirmwareSleep"), CFSTR("com.apple.nearbyd"), keyExistsAndHasValidFormat);
          v71 = keyExistsAndHasValidFormat[0];
          v72 = (id)qword_100859130;
          v73 = os_log_type_enabled(v72, OS_LOG_TYPE_DEFAULT);
          if (!v71 || AppBooleanValue)
          {
            if (v73)
            {
              LOWORD(__p) = 0;
              _os_log_impl((void *)&_mh_execute_header, v72, OS_LOG_TYPE_DEFAULT, "Enabling FW sleep", (uint8_t *)&__p, 2u);
            }

            LOWORD(buf) = 257;
            BYTE2(buf) = 0;
            *((_QWORD *)&buf + 1) = 3;
            if (sub_1003AC32C(v184, (uint64_t)&buf))
            {
              sub_1002047A4(a1);
              LOBYTE(v230) = 1;
              __p = 0uLL;
              *(_QWORD *)&v248 = 0;
              sub_10003A474(&__p, &v230, (uint64_t)&v230 + 1, 1uLL);
              v75 = sub_1003602AC(a1 + 1240, 0xD9u, (uint64_t)&__p);
              v76 = (id)qword_100859130;
              v77 = v76;
              if (v75)
              {
                if (os_log_type_enabled(v76, OS_LOG_TYPE_DEFAULT))
                {
                  *(_WORD *)v221 = 0;
                  _os_log_impl((void *)&_mh_execute_header, v77, OS_LOG_TYPE_DEFAULT, "Wrote the OTPWorkaroundCompleted property", v221, 2u);
                }
              }
              else if (os_log_type_enabled(v76, OS_LOG_TYPE_ERROR))
              {
                sub_1003DE4D0();
              }

              if ((_QWORD)__p)
              {
                *((_QWORD *)&__p + 1) = __p;
                operator delete((void *)__p);
              }
LABEL_220:
              v82 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
              v83 = objc_msgSend(v82, "BOOLForKey:", CFSTR("DisablePowerTable"));
              if (sub_100393C4C() == 1)
                v84 = v83;
              else
                v84 = 0;
              if (v84 == 1)
              {
                LOBYTE(__p) = 0;
                sub_10020639C(&buf, &__p, 1uLL);
                LOBYTE(__p) = 17;
                *((_QWORD *)&__p + 1) = 0;
                v248 = 0uLL;
                sub_1001530EC((_QWORD *)&__p + 1, (const void *)buf, *((uint64_t *)&buf + 1), *((_QWORD *)&buf + 1) - buf);
                sub_100205340(&v230, (uint64_t)&__p, 1uLL);
                v222 = 0;
                *(_QWORD *)v221 = 0;
                *(_QWORD *)v223 = 0;
                sub_100210B80(v221, (uint64_t)v230, *(uint64_t *)v231, (uint64_t)(*(_QWORD *)v231 - (_QWORD)v230) >> 5);
                p_buf = &v230;
                sub_100153338((void ***)&p_buf);
                if (*((_QWORD *)&__p + 1))
                {
                  *(_QWORD *)&v248 = *((_QWORD *)&__p + 1);
                  operator delete(*((void **)&__p + 1));
                }
                v85 = sub_100205D44(a1, (unsigned __int8 **)v221);
                v86 = (id)qword_100859130;
                v87 = v86;
                if (v85)
                {
                  if (os_log_type_enabled(v86, OS_LOG_TYPE_DEFAULT))
                  {
                    LOWORD(__p) = 0;
                    _os_log_impl((void *)&_mh_execute_header, v87, OS_LOG_TYPE_DEFAULT, "Disabled UWB power table", (uint8_t *)&__p, 2u);
                  }
                }
                else if (os_log_type_enabled(v86, OS_LOG_TYPE_ERROR))
                {
                  sub_1003DE478();
                }

                *(_QWORD *)&__p = v221;
                sub_100153338((void ***)&__p);
                if ((_QWORD)buf)
                {
                  *((_QWORD *)&buf + 1) = buf;
                  operator delete((void *)buf);
                }
              }
              v88 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
              v89 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v88, "objectForKey:", CFSTR("DisableSleepBetweenRangingCycles")));
              v90 = v89 == 0;

              if (v90)
              {
                v93 = 1;
              }
              else
              {
                v91 = objc_msgSend(v88, "BOOLForKey:", CFSTR("DisableSleepBetweenRangingCycles"));
                v92 = (id)qword_100859130;
                if (os_log_type_enabled(v92, OS_LOG_TYPE_DEFAULT))
                {
                  LOWORD(__p) = 0;
                  _os_log_impl((void *)&_mh_execute_header, v92, OS_LOG_TYPE_DEFAULT, "OVERRIDE: UWB sleep between ranging settings", (uint8_t *)&__p, 2u);
                }

                v93 = v91 ^ 1;
              }
              v94 = (id)qword_100859130;
              if (os_log_type_enabled(v94, OS_LOG_TYPE_DEFAULT))
              {
                v95 = "NO";
                if (v93)
                  v95 = "YES";
                LODWORD(__p) = 136315138;
                *(_QWORD *)((char *)&__p + 4) = v95;
                _os_log_impl((void *)&_mh_execute_header, v94, OS_LOG_TYPE_DEFAULT, "Platform supports UWB sleep between ranging cycles. Enable? %s", (uint8_t *)&__p, 0xCu);
              }

              if (!v93)
                goto LABEL_261;
              sub_100210860((uint64_t)&__p, 5, 2);
              LOBYTE(buf) = __p;
              v245 = 0;
              *((_QWORD *)&buf + 1) = 0;
              *(_QWORD *)v244 = 0;
              sub_1001530EC((_QWORD *)&buf + 1, *((const void **)&__p + 1), v248, v248 - *((_QWORD *)&__p + 1));
              sub_100205340(v221, (uint64_t)&buf, 1uLL);
              if (*((_QWORD *)&buf + 1))
              {
                *(_QWORD *)v244 = *((_QWORD *)&buf + 1);
                operator delete(*((void **)&buf + 1));
              }
              *(_QWORD *)v231 = 0;
              v230 = 0;
              v232 = 0;
              sub_100210B80(&v230, *(uint64_t *)v221, (uint64_t)v222, ((uint64_t)v222 - *(_QWORD *)v221) >> 5);
              *(_QWORD *)&buf = off_10080EBB0;
              v245 = &buf;
              v96 = sub_1003A9A64(v184, (uint64_t *)&v230, (uint64_t)&buf);
              v97 = v245;
              if (v245 == &buf)
              {
                v98 = 4;
                v97 = &buf;
              }
              else
              {
                if (!v245)
                  goto LABEL_250;
                v98 = 5;
              }
              (*(void (**)(void))(*(_QWORD *)v97 + 8 * v98))();
LABEL_250:
              *(_QWORD *)&buf = &v230;
              sub_100153338((void ***)&buf);
              v99 = (id)qword_100859130;
              v100 = v99;
              if (v96)
              {
                if (os_log_type_enabled(v99, OS_LOG_TYPE_DEFAULT))
                {
                  LOWORD(buf) = 0;
                  _os_log_impl((void *)&_mh_execute_header, v100, OS_LOG_TYPE_DEFAULT, "Successfully enabled UWB sleep between ranging cycles", (uint8_t *)&buf, 2u);
                }

              }
              else
              {
                if (os_log_type_enabled(v99, OS_LOG_TYPE_ERROR))
                  sub_1003DE44C();

                sub_10000BF04(v205, "Failed to enable UWB sleep between ranging cycles");
                sub_100200FD0(a1, 3, v205);
                if (v206 < 0)
                  operator delete(v205[0]);
              }
              *(_QWORD *)&buf = v221;
              sub_100153338((void ***)&buf);
              if (*((_QWORD *)&__p + 1))
              {
                *(_QWORD *)&v248 = *((_QWORD *)&__p + 1);
                operator delete(*((void **)&__p + 1));
              }
              if (!v96)
                goto LABEL_342;
LABEL_261:
              v204 = v93;
              *(_QWORD *)v231 = 0;
              v230 = 0;
              v232 = 0;
              sub_10003A474(&v230, &v204, (uint64_t)v205, 1uLL);
              if (!sub_1003602AC(a1 + 1240, 0xDAu, (uint64_t)&v230))
              {
                v101 = (id)qword_100859130;
                if (os_log_type_enabled(v101, OS_LOG_TYPE_FAULT))
                  sub_1003DE420();

              }
              if (!*(_BYTE *)(a1 + 1328))
              {
                LOWORD(__p) = 264;
                v102 = sub_1003A9E6C(v184, (__int16 *)&__p);
                v103 = (id)qword_100859130;
                v104 = v103;
                if (!v102)
                {
                  if (os_log_type_enabled(v103, OS_LOG_TYPE_ERROR))
                    sub_1003DE3F4();

                  ++*(_BYTE *)(a1 + 1513);
                  sub_10000BF04(v202, "Failed to disable firmware logging");
                  sub_100200FD0(a1, 3, v202);
                  if ((v203 & 0x80000000) == 0)
                    goto LABEL_340;
                  v164 = (void *)v202[0];
                  goto LABEL_339;
                }
                if (os_log_type_enabled(v103, OS_LOG_TYPE_DEFAULT))
                {
                  LOWORD(buf) = 0;
                  _os_log_impl((void *)&_mh_execute_header, v104, OS_LOG_TYPE_DEFAULT, "Successfully disabled firmware logging", (uint8_t *)&buf, 2u);
                }

              }
              v105 = atomic_load((unsigned __int8 *)(a1 + 1330));
              if ((v105 & 1) != 0)
              {
                v140 = (id)qword_100859130;
                if (os_log_type_enabled(v140, OS_LOG_TYPE_DEFAULT))
                {
                  LOWORD(__p) = 0;
                  _os_log_impl((void *)&_mh_execute_header, v140, OS_LOG_TYPE_DEFAULT, "Skip parsing cal files because it was done previously", (uint8_t *)&__p, 2u);
                }

              }
              else
              {
                atomic_store(1u, (unsigned __int8 *)(a1 + 1330));
                sub_1002A5D20((uint64_t)&__p, 0);
                sub_1003AA250(v184, 1, v106, v107, v108, v109, v110, v111, (unint64_t *)&buf);
                sub_1002A5D68((unsigned __int8 *)&__p, (uint64_t *)&buf, v112, v113, v114, v115, v116, v117);
                v118 = (id)qword_100859130;
                if (os_log_type_enabled(v118, OS_LOG_TYPE_DEFAULT))
                {
                  *(_WORD *)v221 = 0;
                  _os_log_impl((void *)&_mh_execute_header, v118, OS_LOG_TYPE_DEFAULT, "Parsing rMCL file finished", v221, 2u);
                }

                if ((_QWORD)buf)
                {
                  *((_QWORD *)&buf + 1) = buf;
                  operator delete((void *)buf);
                }
                sub_1003AA250(v184, 2, v119, v120, v121, v122, v123, v124, (unint64_t *)&buf);
                sub_1002A5D68((unsigned __int8 *)&__p, (uint64_t *)&buf, v125, v126, v127, v128, v129, v130);
                v131 = (id)qword_100859130;
                if (os_log_type_enabled(v131, OS_LOG_TYPE_DEFAULT))
                {
                  *(_WORD *)v221 = 0;
                  _os_log_impl((void *)&_mh_execute_header, v131, OS_LOG_TYPE_DEFAULT, "Parsing rSCL file finished", v221, 2u);
                }

                if ((_QWORD)buf)
                {
                  *((_QWORD *)&buf + 1) = buf;
                  operator delete((void *)buf);
                }
                v132 = *(_QWORD *)(a1 + 1304);
                if (v132)
                  sub_100273168(v132, v252);
                v133 = sub_100004784();
                sub_100395158((uint64_t)v133, &__p, v134, v135, v136, v137, v138, v139, v180);
                sub_10020E3B0((uint64_t)&__p);
              }
              v141 = (id)qword_100859130;
              if (os_log_type_enabled(v141, OS_LOG_TYPE_DEFAULT))
              {
                v142 = sub_100004784();
                v143 = sub_100395734((uint64_t)v142);
                v144 = sub_100004784();
                v145 = sub_100395734((uint64_t)v144);
                LODWORD(__p) = 67109376;
                DWORD1(__p) = v143;
                WORD4(__p) = 1024;
                *(_DWORD *)((char *)&__p + 10) = !v145;
                _os_log_impl((void *)&_mh_execute_header, v141, OS_LOG_TYPE_DEFAULT, "Host and UWB share clock: %d. Enabling UWB time sync with host: %d", (uint8_t *)&__p, 0xEu);
              }

              v146 = (id)qword_100859130;
              if (os_log_type_enabled(v146, OS_LOG_TYPE_DEFAULT))
              {
                v147 = sub_100004784();
                v148 = sub_100395744((uint64_t)v147);
                v149 = sub_100004784();
                v150 = sub_100395744((uint64_t)v149);
                LODWORD(__p) = 67109376;
                DWORD1(__p) = v148;
                WORD4(__p) = 1024;
                *(_DWORD *)((char *)&__p + 10) = !v150;
                _os_log_impl((void *)&_mh_execute_header, v146, OS_LOG_TYPE_DEFAULT, "Host and BT share clock: %d. Enabling UWB time sync with BT: %d", (uint8_t *)&__p, 0xEu);
              }

              v151 = sub_100004784();
              v152 = sub_100395734((uint64_t)v151);
              v153 = sub_100004784();
              if (sub_100395744((uint64_t)v153))
                v154 = !v152;
              else
                v154 = !v152 | 2;
              sub_100210860((uint64_t)v221, 26, v154);
              LOBYTE(__p) = v221[0];
              *((_QWORD *)&__p + 1) = 0;
              v248 = 0uLL;
              sub_1001530EC((_QWORD *)&__p + 1, v222, *(uint64_t *)v223, *(_QWORD *)v223 - (_QWORD)v222);
              sub_100205340(&p_buf, (uint64_t)&__p, 1uLL);
              if (*((_QWORD *)&__p + 1))
              {
                *(_QWORD *)&v248 = *((_QWORD *)&__p + 1);
                operator delete(*((void **)&__p + 1));
              }
              v155 = (id)qword_100859130;
              if (os_log_type_enabled(v155, OS_LOG_TYPE_DEFAULT))
              {
                LODWORD(__p) = 67109120;
                DWORD1(__p) = v154;
                _os_log_impl((void *)&_mh_execute_header, v155, OS_LOG_TYPE_DEFAULT, "PRRose:enabling timesync on the FW with parameters: %d", (uint8_t *)&__p, 8u);
              }

              __p = 0uLL;
              *(_QWORD *)&v248 = 0;
              sub_100210B80(&__p, (uint64_t)p_buf, *(uint64_t *)v226, (uint64_t)(*(_QWORD *)v226 - (_QWORD)p_buf) >> 5);
              v156 = sub_1003A98C0(v184, (uint64_t *)&__p);
              *(_QWORD *)&buf = &__p;
              sub_100153338((void ***)&buf);
              if (v156)
              {
                if ((sub_100204DA0(a1) & 1) != 0)
                {
                  sub_1002A42D0(*(_QWORD *)(a1 + 1288), (uint64_t)&__p);
                  sub_100210574(&buf, (uint64_t)&__p + 8);
                  v157 = __p;
                  if ((_DWORD)__p || !v246)
                  {
                    v165 = (id)qword_100859130;
                    if (os_log_type_enabled(v165, OS_LOG_TYPE_ERROR))
                      sub_1003DE370();

                    sub_1001D8660((uint64_t *)(a1 + 1320), 0, v166, v167, v168, v169, v170, v171);
                    if (v157 == 1)
                      v172 = 3;
                    else
                      v172 = 4 * (v157 == 2);
                    *(_OWORD *)(a1 + 1504) = 0u;
                    sub_1001FFCB4(a1, v172);
                    sub_100204608(a1);
                    v173 = atomic_load((unsigned int *)(a1 + 1232));
                    if (v173 != 8)
                      goto LABEL_336;
                    dispatch_assert_queue_V2(*(dispatch_queue_t *)a1);
                    if (*(_DWORD *)(a1 + 1536) == 1)
                    {
                      sub_10020E448(a1);
LABEL_336:
                      sub_100210808((uint64_t)&buf);
                      sub_100210808((uint64_t)&__p + 8);
                      goto LABEL_337;
                    }
                    dispatch_assert_queue_V2(*(dispatch_queue_t *)a1);
                    if (*(_DWORD *)(a1 + 1536) != 2)
                      goto LABEL_336;
                    v175 = (id)qword_100859130;
                    if (os_log_type_enabled(v175, OS_LOG_TYPE_DEFAULT))
                    {
                      *(_WORD *)v219 = 0;
                      _os_log_impl((void *)&_mh_execute_header, v175, OS_LOG_TYPE_DEFAULT, "PRRose Executing pending power off", v219, 2u);
                    }

                    sub_10000BF04(v196, "");
                    sub_100200FD0(a1, 9, v196);
                    if ((v197 & 0x80000000) == 0)
                      goto LABEL_336;
                    v160 = (void **)v196;
                  }
                  else if ((sub_100201C60((_BYTE *)a1, (uint64_t)&buf) & 1) != 0)
                  {
                    *(_OWORD *)(a1 + 1504) = 0u;
                    v193[0] = _NSConcreteStackBlock;
                    v193[1] = 3221225472;
                    v193[2] = sub_10020E4F8;
                    v193[3] = &unk_1007FA668;
                    v193[4] = a1;
                    sub_100200F10((NSObject **)a1, v193);
                    v158 = sub_100204608(a1);
                    sub_10000BF04(v191, "");
                    if (v158)
                      v159 = 4;
                    else
                      v159 = 5;
                    sub_100200FD0(a1, v159, v191);
                    if ((v192 & 0x80000000) == 0)
                      goto LABEL_336;
                    v160 = (void **)v191;
                  }
                  else
                  {
                    v174 = (id)qword_100859130;
                    if (os_log_type_enabled(v174, OS_LOG_TYPE_ERROR))
                      sub_1003DE344();

                    sub_10000BF04(v194, "Failed to apply config parameters.");
                    sub_100200FD0(a1, 3, v194);
                    if ((v195 & 0x80000000) == 0)
                      goto LABEL_336;
                    v160 = (void **)v194;
                  }
                  operator delete(*v160);
                  goto LABEL_336;
                }
                v163 = (id)qword_100859130;
                if (os_log_type_enabled(v163, OS_LOG_TYPE_ERROR))
                  sub_1003DE39C();

                ++*(_BYTE *)(a1 + 1515);
                sub_10000BF04(v198, "Failed to activate AOP timesync.");
                sub_100200FD0(a1, 3, v198);
                if ((v199 & 0x80000000) == 0)
                  goto LABEL_337;
                v162 = v198[0];
              }
              else
              {
                v161 = (id)qword_100859130;
                if (os_log_type_enabled(v161, OS_LOG_TYPE_ERROR))
                  sub_1003DE3C8();

                ++*(_BYTE *)(a1 + 1514);
                sub_10000BF04(v200, "Failed to enable timesync on the FW");
                sub_100200FD0(a1, 3, v200);
                if ((v201 & 0x80000000) == 0)
                  goto LABEL_337;
                v162 = (void *)v200[0];
              }
              operator delete(v162);
LABEL_337:
              *(_QWORD *)&__p = &p_buf;
              sub_100153338((void ***)&__p);
              v164 = v222;
              if (!v222)
                goto LABEL_340;
              *(_QWORD *)v223 = v222;
LABEL_339:
              operator delete(v164);
LABEL_340:
              if (v230)
              {
                *(_QWORD *)v231 = v230;
                operator delete(v230);
              }
LABEL_342:

              goto LABEL_343;
            }
            v80 = (id)qword_100859130;
            if (os_log_type_enabled(v80, OS_LOG_TYPE_ERROR))
              sub_1003DE4FC();

            ++*(_BYTE *)(a1 + 1512);
            sub_10000BF04(v207, "Enabling sleep failed");
            sub_100200FD0(a1, 3, v207);
            if ((v208 & 0x80000000) == 0)
              goto LABEL_343;
            v74 = (void *)v207[0];
          }
          else
          {
            if (v73)
            {
              LOWORD(__p) = 0;
              _os_log_impl((void *)&_mh_execute_header, v72, OS_LOG_TYPE_DEFAULT, "enableRoseFirmwareSleep defaults value set to false. Disabling FW sleep", (uint8_t *)&__p, 2u);
            }

            LOWORD(__p) = 256;
            BYTE2(__p) = 0;
            *((_QWORD *)&__p + 1) = 3;
            if (sub_1003AC32C(v184, (uint64_t)&__p))
            {
              sub_100204874(a1);
              goto LABEL_220;
            }
            v81 = (id)qword_100859130;
            if (os_log_type_enabled(v81, OS_LOG_TYPE_ERROR))
              sub_1003DE4A4();

            ++*(_BYTE *)(a1 + 1512);
            sub_10000BF04(v209, "Disabling sleep failed");
            sub_100200FD0(a1, 3, v209);
            if ((v210 & 0x80000000) == 0)
              goto LABEL_343;
            v74 = (void *)v209[0];
          }
          goto LABEL_206;
        }
        v79 = (id)qword_100859130;
        if (os_log_type_enabled(v79, OS_LOG_TYPE_ERROR))
          sub_1003DE528();

        ++*(_BYTE *)(a1 + 1511);
        sub_10000BF04(v211, "Failed to enable internal clock on the FW");
        sub_100200FD0(a1, 3, v211);
        if ((v212 & 0x80000000) == 0)
          goto LABEL_202;
        v53 = v211[0];
        goto LABEL_201;
      }
      if ((v51 & 1) == 0)
        goto LABEL_110;
      *(_QWORD *)v231 = 0;
      v230 = 0;
      v232 = 0;
      *(_QWORD *)v226 = 0;
      p_buf = 0;
      v227 = 0;
      if ((v37 & 1) == 0)
      {
        LOBYTE(__p) = v21;
        LOBYTE(buf) = v181;
        v221[0] = v36;
        v219[0] = v38;
        sub_10020E2BC((unint64_t *)&v230, &__p);
        sub_10020E2BC((unint64_t *)&v230, &buf);
        sub_10020E2BC((unint64_t *)&p_buf, v221);
        sub_10020E2BC((unint64_t *)&p_buf, v219);
        goto LABEL_119;
      }
LABEL_107:
      LOBYTE(__p) = 0;
      sub_10020E2BC((unint64_t *)&v230, &__p);
      LOBYTE(__p) = 2;
      sub_10020E2BC((unint64_t *)&v230, &__p);
      LOBYTE(__p) = 0;
      sub_10020E2BC((unint64_t *)&p_buf, &__p);
      if (v44)
        LOBYTE(__p) = 2;
      else
        LOBYTE(__p) = 3;
      sub_10020E2BC((unint64_t *)&p_buf, &__p);
LABEL_119:
      v54 = (id)qword_100859130;
      if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
      {
        v55 = *((unsigned __int8 *)v230 + 1);
        v56 = *(unsigned __int8 *)p_buf;
        v57 = *((unsigned __int8 *)p_buf + 1);
        *(_QWORD *)&__p = __PAIR64__(*(unsigned __int8 *)v230, 67109888);
        WORD4(__p) = 1024;
        *(_DWORD *)((char *)&__p + 10) = v55;
        HIWORD(__p) = 1024;
        LODWORD(v248) = v56;
        WORD2(v248) = 1024;
        *(_DWORD *)((char *)&v248 + 6) = v57;
        _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_DEFAULT, "Set NB&UWB eLNA to high gain mode: NB: (0x%02x, 0x%02x), UWB: (0x%02x, 0x%02x)", (uint8_t *)&__p, 0x1Au);
      }

      LOBYTE(buf) = 45;
      v245 = 0;
      *((_QWORD *)&buf + 1) = 0;
      *(_QWORD *)v244 = 0;
      sub_1001530EC((_QWORD *)&buf + 1, v230, *(uint64_t *)v231, *(_QWORD *)v231 - (_QWORD)v230);
      v221[0] = 38;
      v224 = 0;
      v222 = 0;
      *(_QWORD *)v223 = 0;
      sub_1001530EC(&v222, p_buf, *(uint64_t *)v226, *(_QWORD *)v226 - (_QWORD)p_buf);
      LOBYTE(__p) = buf;
      *((_QWORD *)&__p + 1) = 0;
      v248 = 0uLL;
      sub_1001530EC((_QWORD *)&__p + 1, *((const void **)&buf + 1), *(uint64_t *)v244, *(_QWORD *)v244 - *((_QWORD *)&buf + 1));
      LOBYTE(v249) = v221[0];
      v251[1] = 0;
      v250 = 0;
      v251[0] = 0;
      sub_1001530EC(&v250, v222, *(uint64_t *)v223, *(_QWORD *)v223 - (_QWORD)v222);
      sub_100205340(v219, (uint64_t)&__p, 2uLL);
      for (i = 0; i != -8; i -= 4)
      {
        v59 = (void *)v251[i - 1];
        if (v59)
        {
          v251[i] = v59;
          operator delete(v59);
        }
      }
      __p = 0uLL;
      *(_QWORD *)&v248 = 0;
      sub_100210B80(&__p, *(uint64_t *)v219, v220, (v220 - *(_QWORD *)v219) >> 5);
      v60 = sub_1003A98C0(v184, (uint64_t *)&__p);
      *(_QWORD *)keyExistsAndHasValidFormat = &__p;
      sub_100153338((void ***)keyExistsAndHasValidFormat);
      if (v60)
      {
        *(_QWORD *)&__p = v219;
        sub_100153338((void ***)&__p);
        if (v222)
        {
          *(_QWORD *)v223 = v222;
          operator delete(v222);
        }
        if (*((_QWORD *)&buf + 1))
        {
          *(_QWORD *)v244 = *((_QWORD *)&buf + 1);
          operator delete(*((void **)&buf + 1));
        }
        if (p_buf)
        {
          *(_QWORD *)v226 = p_buf;
          operator delete(p_buf);
        }
        if (v230)
        {
          *(_QWORD *)v231 = v230;
          operator delete(v230);
        }
        goto LABEL_134;
      }
      if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_ERROR))
        sub_1003DE5AC();
      sub_10000BF04(v217, "Failed to enforce NB/UWB eLNA mode on the FW");
      sub_100200FD0(a1, 3, v217);
      if (v218 < 0)
        operator delete(v217[0]);
      *(_QWORD *)&__p = v219;
      sub_100153338((void ***)&__p);
      if (v222)
      {
        *(_QWORD *)v223 = v222;
        operator delete(v222);
      }
      if (*((_QWORD *)&buf + 1))
      {
        *(_QWORD *)v244 = *((_QWORD *)&buf + 1);
        operator delete(*((void **)&buf + 1));
      }
      if (p_buf)
      {
        *(_QWORD *)v226 = p_buf;
        operator delete(p_buf);
      }
      v74 = v230;
      if (!v230)
        goto LABEL_343;
      *(_QWORD *)v231 = v230;
LABEL_206:
      operator delete(v74);
LABEL_343:

LABEL_344:
      sub_10000BA78((uint64_t)v237);
      if (SHIBYTE(v241.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v241.__r_.__value_.__l.__data_);
      return;
    case 3:
      atomic_store(6u, (unsigned int *)(a1 + 1232));
      if (*(char *)(a3 + 23) < 0)
      {
        sub_100004678(__dst, *(void **)a3, *(_QWORD *)(a3 + 8));
      }
      else
      {
        *(_OWORD *)__dst = *(_OWORD *)a3;
        v190 = *(_QWORD *)(a3 + 16);
      }
      sub_100200FD0(a1, 3, __dst);
      if (SHIBYTE(v190) < 0)
        operator delete(__dst[0]);
      v188[0] = _NSConcreteStackBlock;
      v188[1] = 3221225472;
      v188[2] = sub_10020E530;
      v188[3] = &unk_1007FA668;
      v188[4] = a1;
      v30 = v188;
      goto LABEL_56;
    case 6:
      atomic_store(6u, (unsigned int *)(a1 + 1232));
      if (*(char *)(a3 + 23) < 0)
      {
        sub_100004678(v186, *(void **)a3, *(_QWORD *)(a3 + 8));
      }
      else
      {
        *(_OWORD *)v186 = *(_OWORD *)a3;
        v187 = *(_QWORD *)(a3 + 16);
      }
      sub_100200FD0(a1, 6, v186);
      if (SHIBYTE(v187) < 0)
        operator delete(v186[0]);
      v185[0] = _NSConcreteStackBlock;
      v185[1] = 3221225472;
      v185[2] = sub_10020E568;
      v185[3] = &unk_1007FA668;
      v185[4] = a1;
      v30 = v185;
LABEL_56:
      sub_100200F10((NSObject **)a1, v30);
      return;
    case 7:
      if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_ERROR))
        sub_1003DE688();
      return;
    case 8:
      v23 = qword_100859130;
      if (!os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_DEFAULT))
        return;
      v24 = atomic_load((unsigned int *)(a1 + 1232));
      v25 = v24 - 1;
      if (v25 > 0xA)
        v26 = "UnknownToHost";
      else
        v26 = off_10080F090[v25];
      LODWORD(__p) = 136315138;
      *(_QWORD *)((char *)&__p + 4) = v26;
      v6 = "PRRose, regulatory,configuration update ignored during %s";
      goto LABEL_70;
    case 11:
      v23 = qword_100859130;
      if (!os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_DEFAULT))
        return;
      v27 = atomic_load((unsigned int *)(a1 + 1232));
      v28 = v27 - 1;
      if (v28 > 0xA)
        v29 = "UnknownToHost";
      else
        v29 = off_10080F090[v28];
      LODWORD(__p) = 136315138;
      *(_QWORD *)((char *)&__p + 4) = v29;
      v6 = "PRRose, LPEM enable event ignored during %s";
LABEL_70:
      v7 = v23;
      v8 = 12;
LABEL_71:
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, v6, (uint8_t *)&__p, v8);
      return;
    default:
      v176 = os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_ERROR);
      if (v176)
        sub_1003DE274(a1);
      v177 = atomic_load((unsigned int *)(a1 + 1232));
      v178 = sub_100200DD8(v176, v177);
      v179 = sub_100208690((uint64_t)v178, a2);
      abort_report_np("PRRose unexpected event while in state: %s, event: %s", v178, v179);
      __break(1u);
      return;
  }
}

void sub_10020B7C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *__p,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  uint64_t v48;
  void *v49;
  void *v50;
  void *v52;
  void *v53;

  if (a48 < 0)
    operator delete(__p);
  sub_100210808((uint64_t)&STACK[0x370]);
  sub_100210808(v48);
  STACK[0x3E0] = (unint64_t)&STACK[0x260];
  sub_100153338((void ***)&STACK[0x3E0]);
  v52 = (void *)STACK[0x248];
  if (STACK[0x248])
  {
    STACK[0x250] = (unint64_t)v52;
    operator delete(v52);
  }
  v53 = (void *)STACK[0x290];
  if (STACK[0x290])
  {
    STACK[0x298] = (unint64_t)v53;
    operator delete(v53);
  }

  sub_10000BA78((uint64_t)&STACK[0x2D8]);
  if (SLOBYTE(STACK[0x367]) < 0)
    operator delete((void *)STACK[0x350]);
  _Unwind_Resume(a1);
}

void sub_10020BE70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v11;
  uint64_t v12;
  const char *v13;
  NSObject *v14;
  uint32_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  const char *v19;
  dispatch_time_t v20;
  NSObject *v21;
  _BOOL8 v22;
  int v23;
  const char *v24;
  const char *v25;
  void *__p[2];
  uint64_t v27;
  _QWORD v28[5];
  __int128 __dst;
  uint64_t v30;
  _QWORD v31[5];
  _QWORD block[5];
  __int128 v33;
  uint64_t v34;
  _QWORD v35[5];
  uint8_t buf[4];
  const char *v37;

  switch((int)a2)
  {
    case 0:
      v12 = qword_100859130;
      if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        v13 = "PRRose, already started, ignoring HostStartup";
        goto LABEL_18;
      }
      break;
    case 3:
    case 5:
    case 7:
      atomic_store(6u, (unsigned int *)(a1 + 1232));
      v31[0] = _NSConcreteStackBlock;
      v31[1] = 3221225472;
      v31[2] = sub_10020E6C4;
      v31[3] = &unk_1007FA668;
      v31[4] = a1;
      sub_100200F10((NSObject **)a1, v31);
      if (*(char *)(a3 + 23) < 0)
      {
        sub_100004678(&__dst, *(void **)a3, *(_QWORD *)(a3 + 8));
      }
      else
      {
        __dst = *(_OWORD *)a3;
        v30 = *(_QWORD *)(a3 + 16);
      }
      sub_100200FD0(a1, a2, &__dst);
      if (SHIBYTE(v30) < 0)
      {
        v11 = (void *)__dst;
        goto LABEL_29;
      }
      break;
    case 4:
      atomic_store(4u, (unsigned int *)(a1 + 1232));
      sub_1001D8660((uint64_t *)(a1 + 1320), 0, a3, a4, a5, a6, a7, a8);
      v35[0] = _NSConcreteStackBlock;
      v35[1] = 3221225472;
      v35[2] = sub_10020E5A0;
      v35[3] = &unk_1007FA668;
      v35[4] = a1;
      sub_100200F10((NSObject **)a1, v35);
      sub_100204940(a1);
      dispatch_assert_queue_V2(*(dispatch_queue_t *)a1);
      if (*(_DWORD *)(a1 + 1536) == 1)
      {
        sub_10020E448(a1);
      }
      else
      {
        dispatch_assert_queue_V2(*(dispatch_queue_t *)a1);
        if (*(_DWORD *)(a1 + 1536) == 2)
        {
          v20 = dispatch_time(0, 500000000);
          v21 = *(NSObject **)a1;
          block[0] = _NSConcreteStackBlock;
          block[1] = 3321888768;
          block[2] = sub_10020E5D8;
          block[3] = &unk_10080E600;
          block[4] = a1;
          if (*(char *)(a3 + 23) < 0)
          {
            sub_100004678(&v33, *(void **)a3, *(_QWORD *)(a3 + 8));
          }
          else
          {
            v33 = *(_OWORD *)a3;
            v34 = *(_QWORD *)(a3 + 16);
          }
          dispatch_after(v20, v21, block);
          if (SHIBYTE(v34) < 0)
          {
            v11 = (void *)v33;
            goto LABEL_29;
          }
        }
      }
      break;
    case 6:
      atomic_store(6u, (unsigned int *)(a1 + 1232));
      v28[0] = _NSConcreteStackBlock;
      v28[1] = 3221225472;
      v28[2] = sub_10020E6FC;
      v28[3] = &unk_1007FA668;
      v28[4] = a1;
      sub_100200F10((NSObject **)a1, v28);
      if (*(char *)(a3 + 23) < 0)
      {
        sub_100004678(__p, *(void **)a3, *(_QWORD *)(a3 + 8));
      }
      else
      {
        *(_OWORD *)__p = *(_OWORD *)a3;
        v27 = *(_QWORD *)(a3 + 16);
      }
      sub_100200FD0(a1, 6, __p);
      if (SHIBYTE(v27) < 0)
      {
        v11 = __p[0];
LABEL_29:
        operator delete(v11);
      }
      break;
    case 8:
      sub_100201ACC(a1);
      break;
    case 9:
      if (*(_BYTE *)(a1 + 1449))
        sub_10020E734(a1);
      else
        sub_100201774(a1);
      break;
    case 10:
      v12 = qword_100859130;
      if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        v13 = "PRRose, already started, ignoring";
LABEL_18:
        v14 = v12;
        v15 = 2;
        goto LABEL_32;
      }
      break;
    case 11:
      v16 = qword_100859130;
      if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_DEFAULT))
      {
        v17 = atomic_load((unsigned int *)(a1 + 1232));
        v18 = v17 - 1;
        if (v18 > 0xA)
          v19 = "UnknownToHost";
        else
          v19 = off_10080F090[v18];
        *(_DWORD *)buf = 136315138;
        v37 = v19;
        v13 = "PRRose, LPEM enable event ignored during %s";
        v14 = v16;
        v15 = 12;
LABEL_32:
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, v13, buf, v15);
      }
      break;
    default:
      v22 = os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_ERROR);
      if (v22)
        sub_1003DE6B4(a1);
      v23 = atomic_load((unsigned int *)(a1 + 1232));
      v24 = sub_100200DD8(v22, v23);
      v25 = sub_100208690((uint64_t)v24, a2);
      abort_report_np("PRRose unexpected event while in state: %s, event: %s", v24, v25);
      __break(1u);
      break;
  }
}

void sub_10020C31C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a16 < 0)
    operator delete(a11);
  _Unwind_Resume(exception_object);
}

void sub_10020C358(uint64_t a1, int a2)
{
  NSObject *v4;
  NSObject *v5;
  _BOOL8 v6;
  int v7;
  const char *v8;
  const char *v9;
  _BOOL8 v10;
  int v11;
  const char *v12;
  _Unwind_Exception *v13;
  void *__p;
  char v15;
  uint8_t buf[23];

  switch(a2)
  {
    case 0:
      v4 = qword_100859130;
      if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "PRRose, already started, ignoring HostStartup", buf, 2u);
      }
      break;
    case 6:
      operator new();
    case 7:
      operator new();
    case 8:
      sub_100201ACC(a1);
      break;
    case 9:
      if (*(_BYTE *)(a1 + 1449))
        sub_10020E734(a1);
      else
        sub_100201774(a1);
      break;
    case 10:
      v5 = qword_100859130;
      if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "PRRose already Ready", buf, 2u);
      }
      sub_10020E448(a1);
      break;
    case 11:
      sub_10020E938(a1);
      break;
    default:
      v6 = os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_ERROR);
      if (v6)
        sub_1003DE758(a1);
      v7 = atomic_load((unsigned int *)(a1 + 1232));
      v8 = sub_100200DD8(v6, v7);
      v9 = sub_100208690((uint64_t)v8, a2);
      abort_report_np("PRRose unexpected event while in state: %s, event: %s", v8, v9);
      v10 = os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_ERROR);
      if (v10)
        sub_1003DE7FC((uint64_t)v8);
      v11 = atomic_load((unsigned int *)v8 + 308);
      v12 = sub_100200DD8(v10, v11);
      v13 = (_Unwind_Exception *)abort_report_np("PRRose failed to take assertion. state %s, event: %s, aborting nearbyd", v12, "FatalChipError");
      if (v15 < 0)
        operator delete(__p);
      _Unwind_Resume(v13);
      return;
  }
}

void sub_10020C7DC(uint64_t a1, int a2, __int128 *a3)
{
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  const char *v10;
  NSObject *v11;
  unsigned int v12;
  unsigned int v13;
  const char *v14;
  NSObject *v15;
  uint32_t v16;
  _QWORD *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  _BOOL8 v24;
  int v25;
  const char *v26;
  const char *v27;
  void *v28[2];
  char v29;
  void *v30;
  char v31;
  _QWORD block[5];
  __int128 __p;
  uint64_t v34;
  int v35;
  uint8_t buf[16];
  uint64_t v37;
  _QWORD v38[10];
  char v39;
  uint64_t v40;

  switch(a2)
  {
    case 0:
      v5 = qword_100859130;
      if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        v6 = "PRRose, already started, ignoring HostStartup";
        goto LABEL_24;
      }
      return;
    case 1:
      v5 = qword_100859130;
      if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        v6 = "PRRose, in error state, but getting StartBoot dispatch block that is executed after the state changed to er"
             "ror due to firmware issues";
        goto LABEL_24;
      }
      return;
    case 3:
      v11 = *(NSObject **)a1;
      block[0] = _NSConcreteStackBlock;
      block[1] = 3321888768;
      block[2] = sub_10020EBF0;
      block[3] = &unk_10080E838;
      block[4] = a1;
      v35 = 3;
      if (*((char *)a3 + 23) < 0)
      {
        sub_100004678(&__p, *(void **)a3, *((_QWORD *)a3 + 1));
      }
      else
      {
        __p = *a3;
        v34 = *((_QWORD *)a3 + 2);
      }
      dispatch_async(v11, block);
      if (SHIBYTE(v34) < 0)
        operator delete((void *)__p);
      return;
    case 5:
      if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_ERROR))
        sub_1003DEA14();
      abort_report_np("RoseServiceHandshakeError");
      goto LABEL_60;
    case 6:
      if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_ERROR))
        sub_1003DE9BC();
      atomic_store(7u, (unsigned int *)(a1 + 1232));
      return;
    case 7:
      sub_1000537E4((uint64_t)buf);
      sub_100054C60(&v37, (uint64_t)"ChipReset", 9);
      if (*((char *)a3 + 23) < 0)
      {
        if (!*((_QWORD *)a3 + 1))
          goto LABEL_36;
      }
      else if (!*((_BYTE *)a3 + 23))
      {
        goto LABEL_36;
      }
      v17 = sub_100054C60(&v37, (uint64_t)": ", 2);
      v18 = *((char *)a3 + 23);
      if (v18 >= 0)
        v19 = (uint64_t)a3;
      else
        v19 = *(_QWORD *)a3;
      if (v18 >= 0)
        v20 = *((unsigned __int8 *)a3 + 23);
      else
        v20 = *((_QWORD *)a3 + 1);
      sub_100054C60(v17, v19, v20);
LABEL_36:
      std::stringbuf::str(v38);
      v21 = sub_100203494(a1, 3, (std::string::size_type)&v30);
      if (v31 < 0)
        operator delete(v30);
      if ((v21 & 1) != 0)
      {
        atomic_store(1u, (unsigned int *)(a1 + 1232));
        sub_10000BF04(v28, "");
        sub_100200FD0(a1, 1, v28);
        if (v29 < 0)
          operator delete(v28[0]);
        v37 = v22;
        if (v39 < 0)
          operator delete((void *)v38[8]);
        std::streambuf::~streambuf(v38);
        std::ios::~ios(&v40);
      }
      else
      {
        if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_ERROR))
          sub_1003DE9E8();
        abort_report_np("Failed to dump firmware logs");
LABEL_60:
        __break(1u);
      }
      return;
    case 8:
      v7 = qword_100859130;
      if (!os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_DEFAULT))
        return;
      v8 = atomic_load((unsigned int *)(a1 + 1232));
      v9 = v8 - 1;
      if (v9 > 0xA)
        v10 = "UnknownToHost";
      else
        v10 = off_10080F090[v9];
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v10;
      v6 = "PRRose, regulatory,configuration update ignored during %s";
      goto LABEL_48;
    case 9:
      v5 = qword_100859130;
      if (!os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_DEFAULT))
        return;
      *(_WORD *)buf = 0;
      v6 = "PRRose, in error state, Power off delayed";
      goto LABEL_24;
    case 10:
      v5 = qword_100859130;
      if (!os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_DEFAULT))
        return;
      *(_WORD *)buf = 0;
      v6 = "PRRose, already started";
LABEL_24:
      v15 = v5;
      v16 = 2;
      goto LABEL_49;
    case 11:
      v7 = qword_100859130;
      if (!os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_DEFAULT))
        return;
      v12 = atomic_load((unsigned int *)(a1 + 1232));
      v13 = v12 - 1;
      if (v13 > 0xA)
        v14 = "UnknownToHost";
      else
        v14 = off_10080F090[v13];
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v14;
      v6 = "PRRose, LPEM enable event ignored during %s";
LABEL_48:
      v15 = v7;
      v16 = 12;
LABEL_49:
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, v6, buf, v16);
      return;
    default:
      v24 = os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_ERROR);
      if (v24)
        sub_1003DE914(a1);
      v25 = atomic_load((unsigned int *)(a1 + 1232));
      v26 = sub_100200DD8(v24, v25);
      v27 = sub_100208690((uint64_t)v26, a2);
      abort_report_np("PRRose unexpected event while in state: %s, event: %s", v26, v27);
      goto LABEL_60;
  }
}

void sub_10020CCC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  if (a17 < 0)
    operator delete(__p);
  sub_100053910((uint64_t)&a33);
  _Unwind_Resume(a1);
}

void sub_10020CD10(uint64_t a1, int a2)
{
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  const char *v9;
  unsigned int v10;
  unsigned int v11;
  const char *v12;
  NSObject *v13;
  uint32_t v14;
  _BOOL8 v15;
  int v16;
  const char *v17;
  const char *v18;
  uint8_t buf[4];
  const char *v20;

  switch(a2)
  {
    case 0:
      v4 = qword_100859130;
      if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        v5 = "PRRose, already started, ignoring HostStartup";
        goto LABEL_22;
      }
      break;
    case 1:
      v4 = qword_100859130;
      if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        v5 = "PRRose, in error handling state, but getting StartBoot dispatch block that is executed after the state chan"
             "ged to error due to firmware issues";
        goto LABEL_22;
      }
      break;
    case 3:
      if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_ERROR))
        sub_1003DEA98();
      break;
    case 6:
      if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_ERROR))
        sub_1003DEA40();
      break;
    case 7:
      if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_ERROR))
        sub_1003DEA6C();
      break;
    case 8:
      v6 = qword_100859130;
      if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_DEFAULT))
      {
        v10 = atomic_load((unsigned int *)(a1 + 1232));
        v11 = v10 - 1;
        if (v11 > 0xA)
          v12 = "UnknownToHost";
        else
          v12 = off_10080F090[v11];
        *(_DWORD *)buf = 136315138;
        v20 = v12;
        v5 = "PRRose, regulatory,configuration update ignored during %s";
        goto LABEL_27;
      }
      break;
    case 9:
      v4 = qword_100859130;
      if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        v5 = "PRRose, in error state, Power off delayed";
        goto LABEL_22;
      }
      break;
    case 10:
      v4 = qword_100859130;
      if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        v5 = "PRRose, already started";
LABEL_22:
        v13 = v4;
        v14 = 2;
        goto LABEL_28;
      }
      break;
    case 11:
      v6 = qword_100859130;
      if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_DEFAULT))
      {
        v7 = atomic_load((unsigned int *)(a1 + 1232));
        v8 = v7 - 1;
        if (v8 > 0xA)
          v9 = "UnknownToHost";
        else
          v9 = off_10080F090[v8];
        *(_DWORD *)buf = 136315138;
        v20 = v9;
        v5 = "PRRose, LPEM enable event ignored during %s";
LABEL_27:
        v13 = v6;
        v14 = 12;
LABEL_28:
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, v5, buf, v14);
      }
      break;
    default:
      v15 = os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_ERROR);
      if (v15)
        sub_1003DE758(a1);
      v16 = atomic_load((unsigned int *)(a1 + 1232));
      v17 = sub_100200DD8(v15, v16);
      v18 = sub_100208690((uint64_t)v17, a2);
      abort_report_np("PRRose unexpected event while in state: %s, event: %s", v17, v18);
      __break(1u);
      break;
  }
}

void sub_10020D004(uint64_t a1, int a2)
{
  NSObject *v3;
  NSObject *v4;
  NSObject *v5;
  uint8_t buf[23];

  switch(a2)
  {
    case 6:
      operator new();
    case 7:
      operator new();
    case 9:
      v3 = qword_100859130;
      if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "PRRose power down Rose after regulatory disallowment", buf, 2u);
      }
      sub_100201774(a1);
      break;
    case 10:
      v4 = qword_100859130;
      if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "PRRose already started", buf, 2u);
      }
      sub_10020E448(a1);
      break;
    case 11:
      if (*(_DWORD *)(a1 + 1236) == 3)
      {
        v5 = qword_100859130;
        if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "PRRose: enabling LPEM while in Airplane Mode", buf, 2u);
        }
        sub_10020E938(a1);
      }
      break;
    default:
      if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_ERROR))
        sub_1003DEAC4(a1);
      break;
  }
}

void sub_10020D45C(uint64_t a1, int a2, uint64_t a3)
{
  NSObject *v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  int v15;
  const char *v16;
  _Unwind_Exception *v17;
  void *__p[2];
  uint64_t v19;
  uint8_t buf[16];

  v6 = qword_100859130;
  if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "PRRose setStateFromPowerOff", buf, 2u);
  }
  if (a2 == 8)
  {
    if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_ERROR))
      sub_1003DEC90(a1);
  }
  else if (a2 == 10)
  {
    v7 = qword_100859130;
    if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "PRRose Powering On", buf, 2u);
    }
    if (!sub_1003AC564(a1 + 32, 1, v8, v9, v10, v11, v12, v13))
    {
      v14 = os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_ERROR);
      if (v14)
        sub_1003DEC04(a1);
      v15 = atomic_load((unsigned int *)(a1 + 1232));
      v16 = sub_100200DD8(v14, v15);
      v17 = (_Unwind_Exception *)abort_report_np("PRRose Power On Failed  while in state: %s, event: %s", v16, "PowerOn");
      if (SHIBYTE(v19) < 0)
        operator delete(__p[0]);
      _Unwind_Resume(v17);
    }
    atomic_store(0, (unsigned int *)(a1 + 1232));
    if (*(char *)(a3 + 23) < 0)
    {
      sub_100004678(__p, *(void **)a3, *(_QWORD *)(a3 + 8));
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)a3;
      v19 = *(_QWORD *)(a3 + 16);
    }
    sub_100200FD0(a1, 0, __p);
    if (SHIBYTE(v19) < 0)
      operator delete(__p[0]);
  }
  else if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_FAULT))
  {
    sub_1003DEB68(a1);
  }
}

void sub_10020D630(uint64_t a1, int a2)
{
  NSObject *v4;
  NSObject *v5;
  unsigned int v6;
  NSObject *v7;
  _BOOL4 v8;
  NSObject *v9;
  NSObject *v10;
  uint8_t buf[23];

  v4 = qword_100859130;
  if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "PRRose setStateFromDeepSleep", buf, 2u);
  }
  switch(a2)
  {
    case 6:
      operator new();
    case 7:
      operator new();
    case 8:
      v5 = qword_100859130;
      if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "PRRose reconfigure Rose from deep sleep", buf, 2u);
      }
      sub_10020156C(a1);
      sub_100201ACC(a1);
      v6 = atomic_load((unsigned int *)(a1 + 1232));
      v7 = qword_100859130;
      v8 = os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_DEFAULT);
      if (v6 == 8)
      {
        if (v8)
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "PRRose UWB not allowed. Power off rose", buf, 2u);
        }
        sub_100201774(a1);
      }
      else
      {
        if (v8)
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "PRRose Reconfigured. Reenter deep sleep", buf, 2u);
        }
        sub_10020EE6C(a1);
      }
      break;
    case 10:
      v9 = qword_100859130;
      if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "PRRose Exiting Deep Sleep", buf, 2u);
      }
      sub_100203F94(a1, 1);
      break;
    case 11:
      v10 = qword_100859130;
      if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "PRRose: exiting Deep Sleep before entering LPEM", buf, 2u);
      }
      if (sub_100203F94(a1, 1))
        sub_10020E938(a1);
      break;
    default:
      if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_FAULT))
        sub_1003DED1C(a1);
      break;
  }
}

const char *sub_10020DB54(uint64_t a1, int a2)
{
  if ((a2 - 1) > 3)
    return "SecureROM";
  else
    return off_10080F018[a2 - 1];
}

uint64_t sub_10020DB7C(uint64_t a1, int a2)
{
  uint64_t *v4;
  uint64_t v5;
  std::chrono::steady_clock::time_point v6;
  int v7;
  char v8;
  NSObject *v9;
  _Unwind_Exception *v11;
  void *__p[2];
  char v13;

  v4 = (uint64_t *)(a1 + 1456);
  if (!*(_BYTE *)(a1 + 1464))
    v4 = (uint64_t *)&unk_100472690;
  v5 = *v4;
  v6.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_ + 1000000 * v5;
  while (1)
  {
    __p[0] = (void *)10000000;
    std::this_thread::sleep_for ((const std::chrono::nanoseconds *)__p);
    v7 = sub_100207D54(a1);
    if (v7 != 3)
      break;
    if (std::chrono::steady_clock::now().__d_.__rep_ >= v6.__d_.__rep_)
    {
      if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_ERROR))
      {
        sub_1003DEDB8();
        if (a2)
        {
LABEL_8:
          sub_10000BF04(__p, "Deep sleep exit timeout");
          sub_100203494(a1, 0, (std::string::size_type)__p);
          if (v13 < 0)
            operator delete(__p[0]);
          AnalyticsSendEventLazy(CFSTR("com.apple.nearbyd.uwb.deepsleep.failure"), &stru_10080E968);
        }
      }
      else if (a2)
      {
        goto LABEL_8;
      }
      v8 = 0;
      return v8 & 1;
    }
  }
  if (v7 != 1)
  {
    if (v7)
    {
      if (v7 != 2)
        return v8 & 1;
    }
    else
    {
      AnalyticsSendEventLazy(CFSTR("com.apple.nearbyd.uwb.deepsleep.failure"), &stru_10080E988);
    }
    if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_ERROR))
      sub_1003DEDE4();
    v11 = (_Unwind_Exception *)abort_report_np("PRRose: invalid deep sleep state after requesting deep sleep exit");
    if (v13 < 0)
      operator delete(__p[0]);
    _Unwind_Resume(v11);
  }
  v9 = qword_100859130;
  if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(__p[0]) = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "PRRose: deep sleep exit completed successfully", (uint8_t *)__p, 2u);
  }
  if (a2)
  {
    atomic_store(4u, (unsigned int *)(a1 + 1232));
    dispatch_assert_queue_V2(*(dispatch_queue_t *)a1);
    if (*(_DWORD *)(a1 + 1536) == 1)
    {
      sub_10020E448(a1);
    }
    else
    {
      dispatch_assert_queue_V2(*(dispatch_queue_t *)a1);
      if (*(_DWORD *)(a1 + 1536) == 2)
        sub_100201774(a1);
    }
    AnalyticsSendEventLazy(CFSTR("com.apple.nearbyd.uwb.deepsleep.wakesuccess"), &stru_10080E948);
  }
  v8 = 1;
  return v8 & 1;
}

uint64_t sub_10020DDB0(uint64_t a1)
{
  uint64_t v1;
  char v3;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1280);
  v3 = 0;
  return (*(uint64_t (**)(void))(v1 + 16))();
}

void sub_10020DDE4(uint64_t a1, int a2)
{
  NSObject *v4;
  unsigned int v5;
  unsigned int v6;
  const char *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  char v17;
  void *v18;
  _QWORD v19[2];
  char v20;
  _QWORD v21[5];
  void *__p[2];
  char v23;
  _BYTE buf[12];
  __int16 v25;
  const char *v26;
  char v27;

  v4 = qword_100859130;
  if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_DEFAULT))
  {
    v5 = atomic_load((unsigned int *)(a1 + 1232));
    v6 = v5 - 1;
    if (v6 > 0xA)
      v7 = "UnknownToHost";
    else
      v7 = off_10080F090[v6];
    if ((a2 - 1) > 2)
      v8 = "DoNothing";
    else
      v8 = off_10080F188[a2 - 1];
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v7;
    v25 = 2080;
    v26 = v8;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "PRRose: errorHandlingRoutine. Current state: [%s], Next Step: [%s]", buf, 0x16u);
  }
  dispatch_assert_queue_V2(*(dispatch_queue_t *)a1);
  switch(a2)
  {
    case 1:
      sub_1002074CC(a1);
      atomic_store(1u, (unsigned int *)(a1 + 1232));
      sub_10000BF04(v19, "");
      sub_100200FD0(a1, 1, v19);
      if ((v20 & 0x80000000) == 0)
        return;
      v18 = (void *)v19[0];
      goto LABEL_25;
    case 3:
      atomic_store(7u, (unsigned int *)(a1 + 1232));
      sub_10000BF04(buf, "PRRose::errorHandlingRoutine: current state: ErrorHandling, next step: PromoteToFatal");
      v17 = sub_100203494(a1, 0, (std::string::size_type)buf);
      if (v27 < 0)
        operator delete(*(void **)buf);
      if ((v17 & 1) == 0)
      {
        if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_ERROR))
          sub_1003DEE60();
        abort_report_np("PRRose::errorHandlingRoutine: Failed to promote error to fatal.");
LABEL_30:
        __break(1u);
      }
      break;
    case 2:
      atomic_store(1u, (unsigned int *)(a1 + 1232));
      if (sub_1003AAC80(a1 + 32, v9, v10, v11, v12, v13, v14, v15))
      {
        v21[0] = _NSConcreteStackBlock;
        v21[1] = 3221225472;
        v21[2] = sub_1002100C8;
        v21[3] = &unk_1007FA668;
        v21[4] = a1;
        v16 = objc_retainBlock(v21);
        if ((sub_10020FEE0((dispatch_queue_t *)a1, v16, 1u) & 1) != 0)
        {

          return;
        }
        if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_ERROR))
          sub_1003DEE8C();
        abort_report_np("PRRose: Failed to start secureROM Timer.");
        goto LABEL_30;
      }
      sub_10000BF04(__p, "");
      sub_100200FD0(a1, 1, __p);
      if (v23 < 0)
      {
        v18 = __p[0];
LABEL_25:
        operator delete(v18);
      }
      break;
  }
}

void sub_10020E088(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10020E0E0(uint64_t a1)
{
  uint64_t v1;
  char v3;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1280);
  v3 = 0;
  return (*(uint64_t (**)(void))(v1 + 16))();
}

uint64_t sub_10020E114(uint64_t a1)
{
  uint64_t v1;
  char v3;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1280);
  v3 = 6;
  return (*(uint64_t (**)(void))(v1 + 16))();
}

NSDictionary *__cdecl sub_10020E14C(id a1)
{
  void *v1;
  void *v2;
  const __CFString *v4;
  void *v5;

  v4 = CFSTR("HasCalDataBeenPushed");
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", 0));
  v5 = v1;
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v5, &v4, 1));

  return (NSDictionary *)v2;
}

void sub_10020E1E8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_10020E200(uint64_t a1, int *a2)
{
  int v4;
  __int128 v5;
  _BYTE *v6;
  __int128 v7;

  v4 = *a2;
  *(_WORD *)(a1 + 4) = *((_WORD *)a2 + 2);
  *(_DWORD *)a1 = v4;
  if (*((char *)a2 + 31) < 0)
  {
    sub_100004678((_BYTE *)(a1 + 8), *((void **)a2 + 1), *((_QWORD *)a2 + 2));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 2);
    *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 3);
    *(_OWORD *)(a1 + 8) = v5;
  }
  *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
  v6 = (_BYTE *)(a1 + 40);
  if (*((char *)a2 + 63) < 0)
  {
    sub_100004678(v6, *((void **)a2 + 5), *((_QWORD *)a2 + 6));
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 10);
    *(_QWORD *)(a1 + 56) = *((_QWORD *)a2 + 7);
    *(_OWORD *)v6 = v7;
  }
  return a1;
}

void sub_10020E2A0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void sub_10020E2BC(unint64_t *a1, _BYTE *a2)
{
  unint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  unint64_t v7;
  _BYTE *v8;
  unint64_t v9;
  unint64_t v10;
  size_t v11;
  unint64_t v12;
  char *v13;
  _BYTE *v14;
  char v15;

  v5 = (_BYTE *)a1[1];
  v4 = a1[2];
  if ((unint64_t)v5 >= v4)
  {
    v7 = *a1;
    v8 = &v5[-*a1];
    v9 = (unint64_t)(v8 + 1);
    if ((uint64_t)(v8 + 1) < 0)
      sub_100026E7C();
    v10 = v4 - v7;
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x3FFFFFFFFFFFFFFFLL)
      v11 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v11 = v9;
    if (v11)
      v12 = (unint64_t)operator new(v11);
    else
      v12 = 0;
    v13 = (char *)(v12 + v11);
    v8[v12] = *a2;
    v6 = (uint64_t)&v8[v12 + 1];
    if (v5 == (_BYTE *)v7)
    {
      v12 += (unint64_t)v8;
    }
    else
    {
      v14 = &v5[~v7];
      do
      {
        v15 = *--v5;
        (v14--)[v12] = v15;
      }
      while (v5 != (_BYTE *)v7);
      v5 = (_BYTE *)*a1;
    }
    *a1 = v12;
    a1[1] = v6;
    a1[2] = (unint64_t)v13;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *v5 = *a2;
    v6 = (uint64_t)(v5 + 1);
  }
  a1[1] = v6;
}

uint64_t sub_10020E3B0(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void **v7;

  v7 = (void **)(a1 + 328);
  sub_10000BC08(&v7);
  if (*(_BYTE *)(a1 + 312))
  {
    v2 = *(void **)(a1 + 288);
    if (v2)
    {
      *(_QWORD *)(a1 + 296) = v2;
      operator delete(v2);
    }
  }
  if (*(_BYTE *)(a1 + 248))
  {
    v3 = *(void **)(a1 + 224);
    if (v3)
    {
      *(_QWORD *)(a1 + 232) = v3;
      operator delete(v3);
    }
  }
  if (*(_BYTE *)(a1 + 184))
  {
    v4 = *(void **)(a1 + 160);
    if (v4)
    {
      *(_QWORD *)(a1 + 168) = v4;
      operator delete(v4);
    }
  }
  if (*(_BYTE *)(a1 + 120))
  {
    v5 = *(void **)(a1 + 96);
    if (v5)
    {
      *(_QWORD *)(a1 + 104) = v5;
      operator delete(v5);
    }
  }
  return a1;
}

void sub_10020E448(uint64_t a1)
{
  NSObject *v2;
  uint8_t v3[16];

  v2 = qword_100859130;
  if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "PRRose: notifyPowerOnReadyAndClearRequest", v3, 2u);
  }
  dispatch_assert_queue_V2(*(dispatch_queue_t *)a1);
  std::mutex::lock((std::mutex *)(a1 + 1592));
  *(_BYTE *)(a1 + 1656) = 1;
  std::condition_variable::notify_all((std::condition_variable *)(a1 + 1544));
  dispatch_assert_queue_V2(*(dispatch_queue_t *)a1);
  *(_DWORD *)(a1 + 1536) = 0;
  std::mutex::unlock((std::mutex *)(a1 + 1592));
}

void sub_10020E4E4(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10020E4F8(uint64_t a1)
{
  uint64_t v1;
  char v3;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1280);
  v3 = 2;
  return (*(uint64_t (**)(void))(v1 + 16))();
}

uint64_t sub_10020E530(uint64_t a1)
{
  uint64_t v1;
  char v3;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1280);
  v3 = 1;
  return (*(uint64_t (**)(void))(v1 + 16))();
}

uint64_t sub_10020E568(uint64_t a1)
{
  uint64_t v1;
  char v3;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1280);
  v3 = 6;
  return (*(uint64_t (**)(void))(v1 + 16))();
}

uint64_t sub_10020E5A0(uint64_t a1)
{
  uint64_t v1;
  char v3;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1280);
  v3 = 4;
  return (*(uint64_t (**)(void))(v1 + 16))();
}

void sub_10020E5D8(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  void *__p[2];
  uint64_t v5;
  uint8_t buf[16];

  v2 = *(_QWORD *)(a1 + 32);
  dispatch_assert_queue_V2(*(dispatch_queue_t *)v2);
  if (*(_DWORD *)(v2 + 1536) == 2)
  {
    v3 = qword_100859130;
    if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "PRRose Executing pending power off", buf, 2u);
    }
    if (*(char *)(a1 + 63) < 0)
    {
      sub_100004678(__p, *(void **)(a1 + 40), *(_QWORD *)(a1 + 48));
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)(a1 + 40);
      v5 = *(_QWORD *)(a1 + 56);
    }
    sub_100200FD0(v2, 9, __p);
    if (SHIBYTE(v5) < 0)
      operator delete(__p[0]);
  }
}

void sub_10020E6A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10020E6C4(uint64_t a1)
{
  uint64_t v1;
  char v3;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1280);
  v3 = 5;
  return (*(uint64_t (**)(void))(v1 + 16))();
}

uint64_t sub_10020E6FC(uint64_t a1)
{
  uint64_t v1;
  char v3;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1280);
  v3 = 6;
  return (*(uint64_t (**)(void))(v1 + 16))();
}

void sub_10020E734(uint64_t a1)
{
  NSObject *v2;
  BOOL v3;
  NSObject *v4;
  uint8_t v5[8];
  void *__p;
  void *v7;
  uint64_t v8;
  uint8_t buf[8];
  void *v10;
  uint64_t v11;
  char v12;
  uint64_t v13;

  v2 = qword_100859130;
  if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "PRRose: requestDeepSleepEntry", buf, 2u);
  }
  dispatch_assert_queue_V2(*(dispatch_queue_t *)a1);
  v12 = sub_100178714(2);
  *(_QWORD *)buf = 0;
  v10 = 0;
  v11 = 0;
  sub_10003A474(buf, &v12, (uint64_t)&v13, 1uLL);
  __p = 0;
  v7 = 0;
  v8 = 0;
  v3 = sub_10035FF18(a1 + 1240, 0x2Du, (uint64_t)buf, (unint64_t *)&__p);
  v4 = qword_100859130;
  if (v3)
  {
    if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "PRRose: sent deep sleep entry request to RoseSupervisor. Going to DeepSleep state.", v5, 2u);
    }
    atomic_store(0xBu, (unsigned int *)(a1 + 1232));
    *(std::chrono::steady_clock::time_point *)(a1 + 1496) = std::chrono::steady_clock::now();
    dispatch_async(*(dispatch_queue_t *)(a1 + 8), &stru_10080E928);
    if (__p)
    {
      v7 = __p;
      operator delete(__p);
    }
    if (*(_QWORD *)buf)
    {
      v10 = *(void **)buf;
      operator delete(*(void **)buf);
    }
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_ERROR))
      sub_1003DEEB8();
    abort_report_np("PRRose: sending deep sleep entry request to RoseSupervisor failed");
    __break(1u);
  }
}

void sub_10020E89C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  if (a13)
    operator delete(a13);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10020E8C8(uint64_t a1)
{
  uint64_t v1;
  char v3;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1280);
  v3 = 6;
  return (*(uint64_t (**)(void))(v1 + 16))();
}

uint64_t sub_10020E900(uint64_t a1)
{
  uint64_t v1;
  char v3;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1280);
  v3 = 5;
  return (*(uint64_t (**)(void))(v1 + 16))();
}

void sub_10020E938(uint64_t a1)
{
  NSObject *v2;
  unsigned int v3;
  NSObject *v4;
  _BOOL4 v5;
  NSObject *v6;
  uint8_t v7[8];
  void *__p;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14[3];
  uint8_t buf[16];
  __int128 v16;
  __int128 v17;
  int v18;
  int v19;

  v2 = qword_100859130;
  if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "PRRose: LPEMEnableInternal", buf, 2u);
  }
  dispatch_assert_queue_V2(*(dispatch_queue_t *)a1);
  v3 = atomic_load((unsigned int *)(a1 + 1232));
  if (v3 == 5)
  {
    v4 = qword_100859130;
    if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "PRRose: LPEM already enabled", buf, 2u);
    }
  }
  else
  {
    sub_1002A4718(*(_QWORD *)(a1 + 1288));
    v18 = 0;
    v16 = 0u;
    v17 = 0u;
    *(_OWORD *)buf = 0u;
    sub_100178170((unsigned __int8 **)v14, (uint64_t)buf);
    v11 = 0;
    v12 = 0;
    v13 = 0;
    sub_10003A474(&v11, buf, (uint64_t)&v19, 0x34uLL);
    __p = 0;
    v9 = 0;
    v10 = 0;
    v5 = sub_10035FF18(a1 + 1240, 0x34u, (uint64_t)&v11, (unint64_t *)&__p);
    v6 = qword_100859130;
    if (v5)
    {
      if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v7 = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "PRRose: sent LPEM Enable command to Rose. Going to LPEM state.", v7, 2u);
      }
      atomic_store(5u, (unsigned int *)(a1 + 1232));
      if (__p)
      {
        v9 = __p;
        operator delete(__p);
      }
      if (v11)
      {
        v12 = v11;
        operator delete(v11);
      }
      if (v14[0])
      {
        v14[1] = v14[0];
        operator delete(v14[0]);
      }
    }
    else
    {
      if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_ERROR))
        sub_1003DEEE4();
      abort_report_np("PRRose: sending LPEM Enable command to Rose failed. Aborting nearbyd.");
      __break(1u);
    }
  }
}

void sub_10020EB30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10020EB80(uint64_t a1)
{
  uint64_t v1;
  char v3;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1280);
  v3 = 6;
  return (*(uint64_t (**)(void))(v1 + 16))();
}

uint64_t sub_10020EBB8(uint64_t a1)
{
  uint64_t v1;
  char v3;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1280);
  v3 = 5;
  return (*(uint64_t (**)(void))(v1 + 16))();
}

void sub_10020EBF0(uint64_t a1)
{
  uint64_t v1;
  unsigned int v2;
  unsigned int v4;
  const char *v5;
  size_t v6;
  _QWORD *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  void *__p;
  char v14;
  _QWORD v15[2];
  uint64_t v16;
  _QWORD v17[10];
  char v18;
  uint64_t v19;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = atomic_load((unsigned int *)(v1 + 1232));
  if (v2 == 6)
  {
    sub_1000537E4((uint64_t)v15);
    v4 = *(_DWORD *)(a1 + 64) - 1;
    if (v4 > 0xA)
      v5 = "HostStartup";
    else
      v5 = off_10080F038[v4];
    v6 = strlen(v5);
    sub_100054C60(&v16, (uint64_t)v5, v6);
    if (*(char *)(a1 + 63) < 0)
    {
      if (!*(_QWORD *)(a1 + 48))
      {
LABEL_18:
        std::stringbuf::str(v17);
        v11 = sub_100203494(v1, 0, (std::string::size_type)&__p);
        if (v14 < 0)
          operator delete(__p);
        if ((v11 & 1) != 0)
        {
          *(_BYTE *)(v1 + 1520) = 1;
          *(_QWORD *)((char *)v15
          v16 = v12;
          if (v18 < 0)
            operator delete((void *)v17[8]);
          std::streambuf::~streambuf(v17);
          std::ios::~ios(&v19);
        }
        else
        {
          if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_ERROR))
            sub_1003DEF10();
          abort_report_np("Failed to trigger fatal crash logs");
          __break(1u);
        }
        return;
      }
    }
    else if (!*(_BYTE *)(a1 + 63))
    {
      goto LABEL_18;
    }
    v7 = sub_100054C60(&v16, (uint64_t)": ", 2);
    v8 = *(char *)(a1 + 63);
    if (v8 >= 0)
      v9 = a1 + 40;
    else
      v9 = *(_QWORD *)(a1 + 40);
    if (v8 >= 0)
      v10 = *(unsigned __int8 *)(a1 + 63);
    else
      v10 = *(_QWORD *)(a1 + 48);
    sub_100054C60(v7, v9, v10);
    goto LABEL_18;
  }
  if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_ERROR))
    sub_1003DEF3C();
}

void sub_10020EDCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  sub_100053910((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_10020EDFC(uint64_t a1)
{
  uint64_t v1;
  char v3;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1280);
  v3 = 6;
  return (*(uint64_t (**)(void))(v1 + 16))();
}

uint64_t sub_10020EE34(uint64_t a1)
{
  uint64_t v1;
  char v3;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1280);
  v3 = 5;
  return (*(uint64_t (**)(void))(v1 + 16))();
}

void sub_10020EE6C(uint64_t a1)
{
  NSObject *v2;
  unsigned int v3;
  NSObject *v4;
  const char *v5;
  unsigned int v6;
  unsigned int v7;
  void *__p[2];
  char v9;
  uint8_t buf[16];

  v2 = qword_100859130;
  if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "PRRose: powerOffInternal", buf, 2u);
  }
  dispatch_assert_queue_V2(*(dispatch_queue_t *)a1);
  v3 = atomic_load((unsigned int *)(a1 + 1232));
  if (v3 == 10)
  {
    v4 = qword_100859130;
    if (!os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_DEFAULT))
      return;
    *(_WORD *)buf = 0;
    v5 = "PRRose: Already Powered Off";
    goto LABEL_6;
  }
  *(_DWORD *)(a1 + 1536) = 2;
  v6 = atomic_load((unsigned int *)(a1 + 1232));
  if (v6 == 4 || (v7 = atomic_load((unsigned int *)(a1 + 1232)), v7 == 8))
  {
    sub_10000BF04(__p, "");
    sub_100200FD0(a1, 9, __p);
    if (v9 < 0)
      operator delete(__p[0]);
  }
  else
  {
    v4 = qword_100859130;
    if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      v5 = "PRRose: Delay Powering off";
LABEL_6:
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, v5, buf, 2u);
    }
  }
}

void sub_10020EFB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

id sub_10020EFD0(uint64_t a1)
{
  id v2;
  uint64_t *v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  _QWORD v9[3];
  _QWORD v10[3];

  v9[0] = CFSTR("CrashLogReason");
  v2 = objc_alloc((Class)NSString);
  v3 = *(uint64_t **)(a1 + 32);
  if (*((char *)v3 + 23) < 0)
    v3 = (uint64_t *)*v3;
  v4 = objc_msgSend(v2, "initWithCString:encoding:", v3, 4);
  v10[0] = v4;
  v9[1] = CFSTR("IsFatal");
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 28)));
  v10[1] = v5;
  v9[2] = CFSTR("Core");
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 29)));
  v10[2] = v6;
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v10, v9, 3));

  return v7;
}

void sub_10020F0E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

id sub_10020F114(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  _QWORD v9[4];
  _QWORD v10[4];

  v9[0] = CFSTR("CrashStringSectionFound");
  v2 = a1 + 32;
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", **(unsigned __int8 **)(a1 + 32)));
  v10[0] = v3;
  v9[1] = CFSTR("CrashStringSectionVersionFound");
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned __int8 *)(*(_QWORD *)v2 + 1)));
  v10[1] = v4;
  v9[2] = CFSTR("IsFatal");
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 8)));
  v10[2] = v5;
  v9[3] = CFSTR("Core");
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 9)));
  v10[3] = v6;
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v10, v9, 4));

  return v7;
}

void sub_10020F250(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

id sub_10020F28C(uint64_t a1)
{
  void *v1;
  void *v2;
  const __CFString *v4;
  void *v5;

  v4 = CFSTR("Core");
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", **(unsigned __int8 **)(a1 + 32)));
  v5 = v1;
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v5, &v4, 1));

  return v2;
}

void sub_10020F330(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10020F348(uint64_t a1)
{
  sub_10020F358(*(_QWORD *)(a1 + 32), *(_DWORD *)(a1 + 40));
}

void sub_10020F358(uint64_t a1, int a2)
{
  NSObject *v4;
  _BOOL8 v5;
  unsigned int v6;
  unsigned int v7;
  const char *v8;
  unsigned int v9;
  NSObject *v10;
  int v11;
  NSObject *v12;
  _BOOL4 v13;
  const char *v14;
  NSObject *v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  _QWORD *v25;
  void *v26;
  unsigned int v27;
  _BOOL4 v28;
  _BOOL4 v29;
  _QWORD v30[4];
  int v31;
  void *__p[2];
  char v33;
  __int128 v34;
  char v35;
  _QWORD v36[5];
  uint8_t buf[4];
  const char *v38;
  __int16 v39;
  const char *v40;

  dispatch_assert_queue_V2(*(dispatch_queue_t *)a1);
  v4 = qword_100859130;
  v5 = os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_DEFAULT);
  if (v5)
  {
    v6 = atomic_load((unsigned int *)(a1 + 1232));
    v7 = v6 - 1;
    if (v7 > 0xA)
      v8 = "UnknownToHost";
    else
      v8 = off_10080F090[v7];
    *(_DWORD *)buf = 136315394;
    v38 = v8;
    v39 = 2080;
    v40 = sub_10020F8B0(v5, a2);
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "PRRose::debugEventHandler received DebugManagerEvent while in state: %s, event: %s", buf, 0x16u);
  }
  v9 = atomic_load((unsigned int *)(a1 + 1232));
  if (v9 == 10)
  {
    v10 = qword_100859130;
    if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "PRRose:Ignore event, Nothing to do", buf, 2u);
    }
  }
  else
  {
    switch(a2)
    {
      case 0:
        if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_ERROR))
          sub_1003DEF94();
        v24 = atomic_load((unsigned int *)(a1 + 1232));
        if (v24 == 7)
          goto LABEL_34;
        v36[0] = _NSConcreteStackBlock;
        v36[1] = 3221225472;
        v36[2] = sub_10020F8D8;
        v36[3] = &unk_1007FA668;
        v36[4] = a1;
        v25 = objc_retainBlock(v36);
        if ((sub_10020F948((dispatch_queue_t *)a1, v25, 0xAu) & 1) != 0)
        {

LABEL_34:
          sub_10000BF04(&v34, "");
          sub_100200FD0(a1, 6, &v34);
          if (v35 < 0)
          {
            v26 = (void *)v34;
            goto LABEL_53;
          }
        }
        else
        {
          if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_ERROR))
            sub_1003DEF68();
          abort_report_np("PRRose: Failed to start LogCollectionCompleted Timer.");
          __break(1u);
        }
        return;
      case 1:
        if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_ERROR))
          sub_1003DF06C();
        AnalyticsSendEventLazy(CFSTR("com.apple.nearbyd.RoseLogCollectionFailed"), &stru_10080E868);
        sub_10020FB8C(a1);
        v27 = atomic_load((unsigned int *)(a1 + 1232));
        if (v27 == 7)
          goto LABEL_39;
        v12 = qword_100859130;
        v29 = os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_DEFAULT);
        v11 = 0;
        if (!v29)
          goto LABEL_12;
        *(_WORD *)buf = 0;
        v14 = "PRRose: DebugManagerEvent::LogCollectionFatalFailed is ignored if the state is not ErrorHandling";
        goto LABEL_50;
      case 2:
        v15 = qword_100859130;
        if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "PRRose: DebugManagerEvent::LogCollectionFatalSucceeded", buf, 2u);
        }
        sub_10020FB8C(a1);
        v16 = atomic_load((unsigned int *)(a1 + 1232));
        if (v16 == 7)
        {
          if (*(_BYTE *)(a1 + 1520))
          {
            *(_BYTE *)(a1 + 1520) = 0;
LABEL_39:
            v11 = 1;
          }
          else
          {
            v11 = 2;
          }
        }
        else
        {
          v12 = qword_100859130;
          v28 = os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_DEFAULT);
          v11 = 0;
          if (v28)
          {
            *(_WORD *)buf = 0;
            v14 = "PRRose: DebugManagerEvent::LogCollectionFatalSucceeded is ignored if the state is not ErrorHandling";
LABEL_50:
            _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, v14, buf, 2u);
LABEL_11:
            v11 = 0;
          }
        }
LABEL_12:
        sub_10020DDE4(a1, v11);
        break;
      case 3:
        if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_ERROR))
          sub_1003DF098();
        AnalyticsSendEventLazy(CFSTR("com.apple.nearbyd.RoseLogCollectionFailed"), &stru_10080E888);
        v11 = 3;
        goto LABEL_12;
      case 4:
        v12 = qword_100859130;
        v13 = os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_DEFAULT);
        v11 = 0;
        if (!v13)
          goto LABEL_12;
        *(_WORD *)buf = 0;
        v14 = "PRRose: DebugManagerEvent::LogCollectionNonFatalSucceeded";
        goto LABEL_50;
      case 5:
        if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_ERROR))
          sub_1003DF0C4();
        AnalyticsSendEventLazy(CFSTR("com.apple.nearbyd.RoseInterfaceError"), &stru_10080E8A8);
        goto LABEL_11;
      case 6:
        if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_ERROR))
          sub_1003DF0F0();
        AnalyticsSendEventLazy(CFSTR("com.apple.nearbyd.RoseFilesystemError"), &stru_10080E8C8);
        goto LABEL_11;
      case 7:
        if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_ERROR))
          sub_1003DEFEC((unsigned int *)(a1 + 1232));
        if (sub_1003AAC80(a1 + 32, v17, v18, v19, v20, v21, v22, v23))
        {
          if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_ERROR))
            sub_1003DEFC0();
        }
        else
        {
          sub_10000BF04(__p, "");
          sub_100200FD0(a1, 7, (__int128 *)__p);
          if (v33 < 0)
          {
            v26 = __p[0];
LABEL_53:
            operator delete(v26);
          }
        }
        return;
      case 8:
      case 9:
      case 10:
      case 11:
      case 12:
      case 13:
      case 14:
      case 15:
      case 16:
      case 17:
      case 18:
      case 19:
      case 20:
        v30[0] = _NSConcreteStackBlock;
        v30[1] = 3221225472;
        v30[2] = sub_10020FE28;
        v30[3] = &unk_10080D130;
        v31 = a2;
        AnalyticsSendEventLazy(CFSTR("com.apple.nearbyd.RoseControllerError"), v30);
        goto LABEL_11;
      default:
        goto LABEL_11;
    }
  }
}

void sub_10020F86C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

const char *sub_10020F8B0(uint64_t a1, int a2)
{
  if ((a2 - 1) > 0x13)
    return "Dead";
  else
    return off_10080F0E8[a2 - 1];
}

void sub_10020F8D8(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  uint8_t v3[16];

  v1 = *(_QWORD *)(a1 + 32);
  v2 = qword_100859130;
  if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "PRRose: Executing LogCollectionCompleted Timeout Callback.", v3, 2u);
  }
  sub_10020DDE4(v1, 1);
}

uint64_t sub_10020F948(dispatch_queue_t *a1, void *a2, unsigned int a3)
{
  id v5;
  dispatch_source_t v6;
  dispatch_queue_t v7;
  NSObject *v8;
  dispatch_time_t v9;
  NSObject *v10;
  NSObject *v11;
  uint64_t v12;
  uint8_t v14[16];
  _QWORD handler[4];
  id v16;
  dispatch_queue_t *v17;

  v5 = a2;
  sub_10020FB8C((uint64_t)a1);
  if (!v5)
  {
    if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_ERROR))
      sub_1003DF11C();
    goto LABEL_10;
  }
  v6 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, *a1);
  v7 = a1[3];
  a1[3] = v6;

  v8 = a1[3];
  if (!v8)
  {
    if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_ERROR))
      sub_1003DF148();
LABEL_10:
    v12 = 0;
    goto LABEL_11;
  }
  v9 = dispatch_time(0, 1000000000 * a3);
  dispatch_source_set_timer(v8, v9, 0xFFFFFFFFFFFFFFFFLL, 0xBEBC200uLL);
  v10 = a1[3];
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 3221225472;
  handler[2] = sub_10021009C;
  handler[3] = &unk_10080D110;
  v17 = a1;
  v16 = v5;
  dispatch_source_set_event_handler(v10, handler);
  v11 = qword_100859130;
  if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v14 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "PRRose: Starting LogCollectionCompleted timer.", v14, 2u);
  }
  dispatch_resume(a1[3]);

  v12 = 1;
LABEL_11:

  return v12;
}

NSDictionary *__cdecl sub_10020FAD8(id a1)
{
  void *v1;
  void *v2;
  const __CFString *v4;
  void *v5;

  v4 = CFSTR("IsFatal");
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 1));
  v5 = v1;
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v5, &v4, 1));

  return (NSDictionary *)v2;
}

void sub_10020FB74(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10020FB8C(uint64_t a1)
{
  NSObject *v2;
  void *v3;
  uint8_t v4[16];

  if (*(_QWORD *)(a1 + 24))
  {
    v2 = qword_100859130;
    if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "PRRose: Cancelling LogCollectionCompleted timer", v4, 2u);
    }
    dispatch_source_cancel(*(dispatch_source_t *)(a1 + 24));
    v3 = *(void **)(a1 + 24);
    *(_QWORD *)(a1 + 24) = 0;

  }
}

NSDictionary *__cdecl sub_10020FC0C(id a1)
{
  void *v1;
  void *v2;
  const __CFString *v4;
  void *v5;

  v4 = CFSTR("IsFatal");
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 0));
  v5 = v1;
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v5, &v4, 1));

  return (NSDictionary *)v2;
}

void sub_10020FCA8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

NSDictionary *__cdecl sub_10020FCC0(id a1)
{
  void *v1;
  void *v2;
  const __CFString *v4;
  void *v5;

  v4 = CFSTR("InterfaceError");
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 1));
  v5 = v1;
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v5, &v4, 1));

  return (NSDictionary *)v2;
}

void sub_10020FD5C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

NSDictionary *__cdecl sub_10020FD74(id a1)
{
  void *v1;
  void *v2;
  const __CFString *v4;
  void *v5;

  v4 = CFSTR("FilesystemError");
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 1));
  v5 = v1;
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v5, &v4, 1));

  return (NSDictionary *)v2;
}

void sub_10020FE10(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id sub_10020FE28(uint64_t a1)
{
  void *v1;
  void *v2;
  const __CFString *v4;
  void *v5;

  v4 = CFSTR("ErrorCode");
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 32)));
  v5 = v1;
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v5, &v4, 1));

  return v2;
}

void sub_10020FEC8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_10020FEE0(dispatch_queue_t *a1, void *a2, unsigned int a3)
{
  id v5;
  dispatch_source_t v6;
  dispatch_queue_t v7;
  NSObject *v8;
  dispatch_time_t v9;
  NSObject *v10;
  NSObject *v11;
  uint64_t v12;
  uint8_t v14[16];
  _QWORD handler[4];
  id v16;
  dispatch_queue_t *v17;

  v5 = a2;
  sub_1001FFBC4((uint64_t)a1);
  if (!v5)
  {
    if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_ERROR))
      sub_1003DF11C();
    goto LABEL_10;
  }
  v6 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, *a1);
  v7 = a1[2];
  a1[2] = v6;

  v8 = a1[2];
  if (!v8)
  {
    if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_ERROR))
      sub_1003DF174();
LABEL_10:
    v12 = 0;
    goto LABEL_11;
  }
  v9 = dispatch_time(0, 1000000000 * a3);
  dispatch_source_set_timer(v8, v9, 0xFFFFFFFFFFFFFFFFLL, 0xBEBC200uLL);
  v10 = a1[2];
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 3221225472;
  handler[2] = sub_100210070;
  handler[3] = &unk_10080D110;
  v17 = a1;
  v16 = v5;
  dispatch_source_set_event_handler(v10, handler);
  v11 = qword_100859130;
  if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v14 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "PRRose: Starting SecureROM timer.", v14, 2u);
  }
  dispatch_resume(a1[2]);

  v12 = 1;
LABEL_11:

  return v12;
}

uint64_t sub_100210070(uint64_t a1)
{
  sub_1001FFBC4(*(_QWORD *)(a1 + 40));
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_10021009C(uint64_t a1)
{
  sub_10020FB8C(*(_QWORD *)(a1 + 40));
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_1002100C8(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  uint8_t v4[16];

  v1 = *(_QWORD *)(a1 + 32);
  v2 = qword_100859130;
  if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "PRRose: Executing SecureROM Timeout Callback.", v4, 2u);
  }
  return sub_10020DDE4(v1, 1);
}

uint64_t sub_100210138(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_100210144(uint64_t a1)
{
  unsigned int v2;
  uint64_t v3;
  NSObject *v4;
  std::chrono::steady_clock::time_point v5;
  std::chrono::steady_clock::time_point v6;
  std::chrono::system_clock::time_point v7;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v8;
  std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> v9;
  _QWORD block[5];
  std::unique_lock<std::mutex> __lk;

  dispatch_assert_queue_not_V2(*(dispatch_queue_t *)a1);
  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 1592);
  __lk.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 1592));
  v2 = atomic_load((unsigned int *)(a1 + 1232));
  if (v2 == 9)
  {
    if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_ERROR))
      sub_1003DF1A0();
    goto LABEL_4;
  }
  *(_BYTE *)(a1 + 1656) = 0;
  v4 = *(NSObject **)a1;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100210340;
  block[3] = &unk_1007FA668;
  block[4] = a1;
  dispatch_async(v4, block);
  v5.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_ + 30000000000;
  do
  {
    if (*(_BYTE *)(a1 + 1656))
      goto LABEL_23;
    if (std::chrono::steady_clock::now().__d_.__rep_ >= v5.__d_.__rep_)
      break;
    v6.__d_.__rep_ = v5.__d_.__rep_ - std::chrono::steady_clock::now().__d_.__rep_;
    if (v6.__d_.__rep_ >= 1)
    {
      std::chrono::steady_clock::now();
      v7.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
      if (v7.__d_.__rep_)
      {
        if (v7.__d_.__rep_ < 1)
        {
          if ((unint64_t)v7.__d_.__rep_ < 0xFFDF3B645A1CAC09)
          {
            v8 = 0x8000000000000000;
            goto LABEL_19;
          }
        }
        else if ((unint64_t)v7.__d_.__rep_ > 0x20C49BA5E353F7)
        {
          v8 = 0x7FFFFFFFFFFFFFFFLL;
          goto LABEL_17;
        }
        v8 = 1000 * v7.__d_.__rep_;
      }
      else
      {
        v8 = 0;
      }
LABEL_17:
      if (v8 > (v6.__d_.__rep_ ^ 0x7FFFFFFFFFFFFFFFLL))
      {
        v9.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
LABEL_20:
        std::condition_variable::__do_timed_wait((std::condition_variable *)(a1 + 1544), &__lk, v9);
        std::chrono::steady_clock::now();
        continue;
      }
LABEL_19:
      v9.__d_.__rep_ = v8 + v6.__d_.__rep_;
      goto LABEL_20;
    }
  }
  while (std::chrono::steady_clock::now().__d_.__rep_ < v5.__d_.__rep_);
  if (*(_BYTE *)(a1 + 1656))
  {
LABEL_23:
    dispatch_async(*(dispatch_queue_t *)(a1 + 8), &stru_10080E8E8);
    v3 = 1;
    goto LABEL_24;
  }
  if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_ERROR))
    sub_1003DF1CC();
LABEL_4:
  v3 = 0;
LABEL_24:
  if (__lk.__owns_)
    std::mutex::unlock(__lk.__m_);
  return v3;
}

void sub_100210340(uint64_t a1)
{
  sub_10020156C(*(_QWORD *)(a1 + 32));
}

void sub_100210348(id a1)
{
  sub_10019ED10(1);
}

void sub_100210350(dispatch_queue_t *a1)
{
  NSObject *v2;
  _QWORD block[5];

  dispatch_assert_queue_not_V2(*a1);
  v2 = *a1;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1002103B8;
  block[3] = &unk_1007FA668;
  block[4] = a1;
  dispatch_async(v2, block);
}

void sub_1002103B8(uint64_t a1)
{
  sub_10020EE6C(*(_QWORD *)(a1 + 32));
}

void sub_1002103C0(id a1)
{
  sub_10019ED10(0);
}

void sub_1002103C8(id a1)
{
  sub_10019ED10(2);
}

NSDictionary *__cdecl sub_1002103D0(id a1)
{
  return (NSDictionary *)&off_10082C350;
}

NSDictionary *__cdecl sub_1002103DC(id a1)
{
  void *v1;
  void *v2;
  _QWORD v4[2];
  _QWORD v5[2];

  v4[0] = CFSTR("NumberOfFailures");
  v4[1] = CFSTR("Reason");
  v5[0] = &off_10082C040;
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 1));
  v5[1] = v1;
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v5, v4, 2));

  return (NSDictionary *)v2;
}

void sub_100210490(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

NSDictionary *__cdecl sub_1002104A8(id a1)
{
  void *v1;
  void *v2;
  _QWORD v4[2];
  _QWORD v5[2];

  v4[0] = CFSTR("NumberOfFailures");
  v4[1] = CFSTR("Reason");
  v5[0] = &off_10082C040;
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 2));
  v5[1] = v1;
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v5, v4, 2));

  return (NSDictionary *)v2;
}

void sub_10021055C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_BYTE *sub_100210574(_BYTE *a1, uint64_t a2)
{
  *a1 = 0;
  a1[96] = 0;
  if (*(_BYTE *)(a2 + 96))
  {
    sub_1002105C8((uint64_t)a1, a2);
    a1[96] = 1;
  }
  return a1;
}

void sub_1002105B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100210808(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1002105C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  sub_1002106A0((_QWORD *)(a1 + 8), *(const void **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 3);
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  sub_100210718((_QWORD *)(a1 + 32), *(const void **)(a2 + 32), *(_QWORD *)(a2 + 40), (uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 3);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  sub_100210790((_QWORD *)(a1 + 56), *(const void **)(a2 + 56), *(_QWORD *)(a2 + 64), (uint64_t)(*(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56)) >> 3);
  v4 = *(_QWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 87) = *(_DWORD *)(a2 + 87);
  *(_QWORD *)(a1 + 80) = v4;
  return a1;
}

void sub_10021066C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;
  void *v6;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 40) = v5;
    operator delete(v5);
  }
  v6 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 16) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1002106A0(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = sub_100137650(result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1002106FC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_100210718(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = sub_100137650(result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_100210774(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_100210790(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = sub_100137650(result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1002107EC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100210808(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;

  if (*(_BYTE *)(a1 + 96))
  {
    v2 = *(void **)(a1 + 56);
    if (v2)
    {
      *(_QWORD *)(a1 + 64) = v2;
      operator delete(v2);
    }
    v3 = *(void **)(a1 + 32);
    if (v3)
    {
      *(_QWORD *)(a1 + 40) = v3;
      operator delete(v3);
    }
    v4 = *(void **)(a1 + 8);
    if (v4)
    {
      *(_QWORD *)(a1 + 16) = v4;
      operator delete(v4);
    }
  }
  return a1;
}

uint64_t sub_100210860(uint64_t a1, char a2, char a3)
{
  char __src;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)a1 = a2;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  __src = a3;
  sub_10019E578((_QWORD *)(a1 + 8), &__src, (char *)&v6, 1uLL);
  return a1;
}

void sub_1002108BC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1002108D8(_QWORD *a1, char a2, __int16 **a3)
{
  *(_BYTE *)a1 = a2;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  sub_10036B0E0(a1, a3);
  return a1;
}

void sub_100210910(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;

  v3 = v2;
  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 16) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_100210930(_QWORD *__dst, __int128 *a2)
{
  __int128 v4;
  unint64_t v5;
  std::runtime_error *exception;

  if (*((char *)a2 + 23) < 0)
  {
    sub_100004678(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    __dst[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  v5 = *((unsigned __int8 *)a2 + 23);
  if ((v5 & 0x80u) != 0)
    v5 = *((_QWORD *)a2 + 1);
  if (v5 >= 0x20)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "string length exceeds maximum");
  }
  return __dst;
}

void sub_1002109E4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100210A10(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  std::ios_base *v5;

  v2 = a1 + 8;
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = v4;
  v5 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v5, (void *)(a1 + 8));
  v5[1].__vftable = 0;
  v5[1].__fmtflags_ = -1;
  std::streambuf::basic_streambuf(v2);
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 16;
  return a1;
}

void sub_100210AD4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  std::ostream::~ostream(v2, v3 + 8);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100210AFC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v3 = a1 + 8;
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  std::streambuf::~streambuf(v3);
  std::ios::~ios(a1 + 112);
  return a1;
}

_QWORD *sub_100210B80(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    sub_1001534CC(result, a4);
    result = (_QWORD *)sub_100210C04((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_100210BE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  sub_100153338(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100210C04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  uint64_t v10;
  uint64_t v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *(_BYTE *)v4 = *(_BYTE *)v6;
      *(_QWORD *)(v4 + 16) = 0;
      *(_QWORD *)(v4 + 24) = 0;
      *(_QWORD *)(v4 + 8) = 0;
      sub_1001530EC((_QWORD *)(v4 + 8), *(const void **)(v6 + 8), *(_QWORD *)(v6 + 16), *(_QWORD *)(v6 + 16) - *(_QWORD *)(v6 + 8));
      v4 = v11 + 32;
      v11 += 32;
      v6 += 32;
    }
    while (v6 != a3);
  }
  v9 = 1;
  sub_100210CB8((uint64_t)v8);
  return v4;
}

void sub_100210CA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100210CB8((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100210CB8(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_100153628(a1);
  return a1;
}

void sub_100210CF0()
{
  operator delete();
}

__n128 sub_100210D04(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = off_10080E9B8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_100210D44(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = off_10080E9B8;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_100210D6C(_QWORD *a1, unsigned int *a2)
{
  uint64_t v2;
  uint64_t (*v3)(_QWORD *, _QWORD);
  _QWORD *v4;

  v2 = a1[2];
  v3 = (uint64_t (*)(_QWORD *, _QWORD))a1[1];
  v4 = (_QWORD *)(a1[3] + (v2 >> 1));
  if ((v2 & 1) != 0)
    v3 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v3);
  return v3(v4, *a2);
}

uint64_t sub_100210D8C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100210DC8()
{
}

void sub_100210DD8()
{
  operator delete();
}

__n128 sub_100210DEC(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = off_10080EA78;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_100210E2C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = off_10080EA78;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_100210E54(_QWORD *a1, unsigned int *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t (*v4)(_QWORD *, _QWORD, _QWORD);
  _QWORD *v5;

  v3 = a1[2];
  v4 = (uint64_t (*)(_QWORD *, _QWORD, _QWORD))a1[1];
  v5 = (_QWORD *)(a1[3] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v4 = *(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(*v5 + v4);
  return v4(v5, *a2, *a3);
}

uint64_t sub_100210E78(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100210EB4()
{
}

uint64_t sub_100210EC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  uint64_t v10;
  uint64_t v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *(_BYTE *)v4 = *(_BYTE *)v6;
      *(_QWORD *)(v4 + 16) = 0;
      *(_QWORD *)(v4 + 24) = 0;
      *(_QWORD *)(v4 + 8) = 0;
      sub_1001530EC((_QWORD *)(v4 + 8), *(const void **)(v6 + 8), *(_QWORD *)(v6 + 16), *(_QWORD *)(v6 + 16) - *(_QWORD *)(v6 + 8));
      v4 = v11 + 32;
      v11 += 32;
      v6 += 32;
    }
    while (v6 != a3);
  }
  v9 = 1;
  sub_100210CB8((uint64_t)v8);
  return v4;
}

void sub_100210F60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100210CB8((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_100210F78()
{
  operator delete();
}

_QWORD *sub_100210F8C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10080EB20;
  result[1] = v3;
  return result;
}

uint64_t sub_100210FC0(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10080EB20;
  a2[1] = v2;
  return result;
}

uint64_t sub_100210FDC(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  unint64_t v6;
  int v7;
  uint64_t v8;
  NSObject *v10;
  void **v11;
  std::string *v12;
  void *__p[2];
  char v14;
  std::string v15;
  uint8_t buf[4];
  void **v17;
  __int16 v18;
  int v19;
  __int16 v20;
  std::string *v21;

  if (sub_10036A9E4(a2))
  {
    if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_ERROR))
      sub_1003DF25C();
  }
  else if (sub_10036AA4C(a2) == 5)
  {
    v6 = sub_100397E60(a3);
    v7 = v6;
    if (!(_WORD)v6)
      return 0;
    v8 = *(_QWORD *)(a1 + 8);
    *(_WORD *)v8 = v6;
    *(_BYTE *)(v8 + 2) = 1;
    if ((v6 & 0xFF00000000) != 0)
      std::to_string(&v15, BYTE3(v6));
    else
      sub_10000BF04(&v15, "N/A");
    v10 = (id)qword_100859130;
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      sub_10036BB54((unsigned __int16)v7, __p);
      if (v14 >= 0)
        v11 = __p;
      else
        v11 = (void **)__p[0];
      v12 = &v15;
      if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v12 = (std::string *)v15.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136315650;
      v17 = v11;
      v18 = 1024;
      v19 = BYTE2(v7);
      v20 = 2080;
      v21 = v12;
      _os_log_error_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "PRRose:applyConfigOptions,regulatory,failed to send regulatory config. Status: %s, numConfigsSetSuccessfully: %u, firstErroneousConfigId: %s", buf, 0x1Cu);
      if (v14 < 0)
        operator delete(__p[0]);
    }

    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v15.__r_.__value_.__l.__data_);
  }
  else if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_ERROR))
  {
    sub_1003DF1F8();
  }
  return 1;
}

void sub_1002111D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;

  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_1002111F8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100211234()
{
}

void sub_100211244()
{
  operator delete();
}

_QWORD *sub_100211258()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_10080EBB0;
  return result;
}

void sub_10021127C(uint64_t a1, _QWORD *a2)
{
  *a2 = off_10080EBB0;
}

uint64_t sub_100211294(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  int v5;
  int v6;

  v5 = sub_10036A9E4(a2);
  v6 = sub_10036AA4C(a2);
  if (v5 || v6 != 5)
  {
    if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_FAULT))
      sub_1003DF2C0();
    return 1;
  }
  if ((unsigned __int16)sub_100397E60(a3))
  {
    if (os_log_type_enabled((os_log_t)qword_100859130, OS_LOG_TYPE_FAULT))
      sub_1003DF2EC();
    return 1;
  }
  return 0;
}

uint64_t sub_100211348(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100211384()
{
}

uint64_t sub_100211390@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 8) = a2;
  atomic_load((unsigned int *)(result + 1232));
  return result;
}

uint64_t sub_1002113A8@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 8) = a2;
  atomic_load((unsigned int *)(result + 1232));
  return result;
}

unsigned int *sub_1002113D4@<X0>(unsigned int *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 8) = a2;
  atomic_load(result);
  return result;
}

void sub_1002113F4(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_list va;

  va_start(va, a4);
  _os_log_fault_impl(a1, log, OS_LOG_TYPE_FAULT, a4, (uint8_t *)va, 0x16u);
}

void sub_100211408()
{
  void *v0;

  v0 = objc_autoreleasePoolPush();
  qword_100859130 = (uint64_t)os_log_create("com.apple.nearbyd", "Driver");
  objc_autoreleasePoolPop(v0);
}

double sub_100211448(uint64_t a1)
{
  uint64_t v1;
  double result;
  _OWORD v3[5];

  v3[2] = xmmword_100472CB8;
  v3[3] = unk_100472CC8;
  v3[4] = xmmword_100472CD8;
  v3[0] = xmmword_100472C98;
  v3[1] = unk_100472CA8;
  v1 = sub_1002123E0(a1, (int *)v3, 5);
  *(_QWORD *)(v1 + 32) = 0;
  *(_QWORD *)(v1 + 24) = v1 + 32;
  *(_QWORD *)(v1 + 40) = 0;
  *(_QWORD *)(v1 + 48) = 0;
  *(_BYTE *)(v1 + 56) = 0;
  *(_BYTE *)(v1 + 108) = 0;
  result = 0.0;
  *(_OWORD *)(v1 + 64) = 0u;
  *(_OWORD *)(v1 + 80) = 0u;
  *(_OWORD *)(v1 + 89) = 0u;
  return result;
}

void sub_1002114E0(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_1000131D8(a1);
}

void sub_1002114F0(uint64_t a1, unint64_t a2, int a3, double a4)
{
  _QWORD *v8;
  uint64_t **v9;
  _QWORD *v10;
  uint64_t **v11;
  unint64_t v12;
  BOOL v13;
  _QWORD *v14;

  if (*(_BYTE *)(a1 + 56))
  {
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
      sub_1003DF388();
    v10 = *(_QWORD **)(a1 + 32);
    v9 = (uint64_t **)(a1 + 32);
    v8 = v10;
    if (v10)
    {
      v11 = v9;
      do
      {
        v12 = v8[4];
        v13 = v12 >= a2;
        if (v12 >= a2)
          v14 = v8;
        else
          v14 = v8 + 1;
        if (v13)
          v11 = (uint64_t **)v8;
        v8 = (_QWORD *)*v14;
      }
      while (*v14);
      if (v11 != v9 && (unint64_t)v11[4] <= a2)
        sub_1002AB1E0(v11 + 5, a3, a4);
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
  {
    sub_1003DF35C();
  }
}

void sub_1002115CC(uint64_t a1, unint64_t a2, void *a3, double a4)
{
  id v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  BOOL v13;
  _QWORD *v14;

  v7 = a3;
  if (*(_BYTE *)(a1 + 56))
  {
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
      sub_1003DF42C();
    v10 = *(_QWORD **)(a1 + 32);
    v9 = (_QWORD *)(a1 + 32);
    v8 = v10;
    if (v10)
    {
      v11 = v9;
      do
      {
        v12 = v8[4];
        v13 = v12 >= a2;
        if (v12 >= a2)
          v14 = v8;
        else
          v14 = v8 + 1;
        if (v13)
          v11 = v8;
        v8 = (_QWORD *)*v14;
      }
      while (*v14);
      if (v11 != v9 && v11[4] <= a2)
        sub_1002ABD70((uint64_t)(v11 + 5), v7, a4);
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
  {
    sub_1003DF400();
  }

}

void sub_1002116A8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

double sub_1002116B8(uint64_t a1, double a2)
{
  int v4;
  double v5;
  uint64_t **v6;
  double result;
  int v8;
  int *v9;

  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
    sub_1003DF490();
  v4 = *(_DWORD *)(a1 + 40);
  if (v4 >= 4)
    v4 = 4;
  v8 = v4;
  v5 = a2 - *(double *)(a1 + 88);
  v9 = &v8;
  v6 = sub_1001845A4((uint64_t **)a1, &v8, (uint64_t)&unk_100472CF8, &v9);
  result = v5 + *((double *)v6 + 5);
  *((double *)v6 + 5) = result;
  *(double *)(a1 + 88) = a2;
  return result;
}

void sub_100211764(uint64_t a1, unint64_t a2, int a3, double a4)
{
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  BOOL v11;
  _QWORD *v12;
  uint64_t *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t *v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  _OWORD v29[4];
  _BYTE v30[25];
  _QWORD **v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD **v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t *v41;

  v40 = a2;
  if (*(_BYTE *)(a1 + 56))
  {
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
      sub_1003DF584();
    v8 = *(_QWORD **)(a1 + 32);
    if (!v8)
      goto LABEL_31;
    v9 = a1 + 32;
    do
    {
      v10 = v8[4];
      v11 = v10 >= a2;
      if (v10 >= a2)
        v12 = v8;
      else
        v12 = v8 + 1;
      if (v11)
        v9 = (uint64_t)v8;
      v8 = (_QWORD *)*v12;
    }
    while (*v12);
    if (v9 == a1 + 32 || *(_QWORD *)(v9 + 32) > a2)
    {
LABEL_31:
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
        sub_1003DF520();
      sub_1002116B8(a1, a4);
      sub_1002AAF8C(v29);
      v41 = &v40;
      v13 = sub_100212688((uint64_t **)(a1 + 24), &v40, (uint64_t)&unk_100472CF8, (uint64_t **)&v41);
      v14 = *(_OWORD *)&v30[9];
      v16 = v29[3];
      v15 = *(_OWORD *)v30;
      *(_OWORD *)(v13 + 9) = v29[2];
      *(_OWORD *)(v13 + 11) = v16;
      *(_OWORD *)(v13 + 13) = v15;
      *(_OWORD *)((char *)v13 + 113) = v14;
      v17 = v29[1];
      *(_OWORD *)(v13 + 5) = v29[0];
      *(_OWORD *)(v13 + 7) = v17;
      v18 = v13 + 18;
      sub_10003E3F0((uint64_t)(v13 + 17), (_QWORD *)v13[18]);
      v19 = v32;
      v13[17] = (uint64_t)v31;
      v13[18] = (uint64_t)v19;
      v20 = v33;
      v13[19] = v33;
      if (v20)
      {
        v19[2] = v18;
        v31 = &v32;
        v32 = 0;
        v33 = 0;
      }
      else
      {
        v13[17] = (uint64_t)v18;
      }
      v21 = v13 + 21;
      sub_10003E3F0((uint64_t)(v13 + 20), (_QWORD *)v13[21]);
      v22 = v35;
      v13[20] = (uint64_t)v34;
      v13[21] = (uint64_t)v22;
      v23 = v36;
      v13[22] = v36;
      if (v23)
      {
        v22[2] = v21;
        v34 = &v35;
        v35 = 0;
        v36 = 0;
      }
      else
      {
        v13[20] = (uint64_t)v21;
      }
      v25 = (char *)v13[24];
      v24 = v13 + 24;
      sub_10017ECCC((uint64_t)(v24 - 1), v25);
      v26 = v38;
      *(v24 - 1) = v37;
      *v24 = v26;
      v27 = v39;
      v24[1] = v39;
      if (v27)
      {
        *(_QWORD *)(v26 + 16) = v24;
        v37 = &v38;
        v38 = 0;
        v39 = 0;
        v26 = 0;
      }
      else
      {
        *(v24 - 1) = v24;
      }
      sub_10017ECCC((uint64_t)&v37, (char *)v26);
      sub_10003E3F0((uint64_t)&v34, v35);
      sub_10003E3F0((uint64_t)&v31, v32);
      *(_QWORD *)&v29[0] = &v40;
      v28 = sub_100212688((uint64_t **)(a1 + 24), &v40, (uint64_t)&unk_100472CF8, (uint64_t **)v29);
      sub_1002AAF90((uint64_t)(v28 + 5), a3, *(void **)(a1 + 48), *(_QWORD *)(a1 + 104), a4);
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
  {
    sub_1003DF4F4();
  }
}

void sub_100211A14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100211A28((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100211A28(uint64_t a1)
{
  sub_10017ECCC(a1 + 144, *(char **)(a1 + 152));
  sub_10003E3F0(a1 + 120, *(_QWORD **)(a1 + 128));
  sub_10003E3F0(a1 + 96, *(_QWORD **)(a1 + 104));
  return a1;
}

void sub_100211A6C(uint64_t a1, unint64_t a2, double a3)
{
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  BOOL v9;
  _QWORD *v10;

  if (*(_BYTE *)(a1 + 56))
  {
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
      sub_1003DF678();
    v6 = *(_QWORD **)(a1 + 32);
    if (v6)
    {
      v7 = a1 + 32;
      do
      {
        v8 = v6[4];
        v9 = v8 >= a2;
        if (v8 >= a2)
          v10 = v6;
        else
          v10 = v6 + 1;
        if (v9)
          v7 = (uint64_t)v6;
        v6 = (_QWORD *)*v10;
      }
      while (*v10);
      if (v7 != a1 + 32 && *(_QWORD *)(v7 + 32) <= a2)
      {
        if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
          sub_1003DF614();
        sub_1002116B8(a1, a3);
        sub_1002AB2EC((double *)(v7 + 40), a3);
        *(double *)(a1 + 80) = *(double *)(v7 + 48) + *(double *)(a1 + 80);
        sub_100027730((uint64_t **)(a1 + 24), (uint64_t *)v7);
        sub_1001E807C(v7 + 32);
        operator delete((void *)v7);
      }
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
  {
    sub_1003DF5E8();
  }
}

void sub_100211BAC(uint64_t a1, void *a2, int a3)
{
  objc_storeStrong((id *)(a1 + 48), a2);
  *(_DWORD *)(a1 + 104) = a3;
  *(_BYTE *)(a1 + 108) = 1;
}

void sub_100211BE0(uint64_t a1, double a2)
{
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
    sub_1003DF6DC();
  *(double *)(a1 + 64) = a2;
  *(_BYTE *)(a1 + 56) = 1;
}

void sub_100211C40(uint64_t a1, double a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;
  NSObject *v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint8_t buf[4];
  double v14;
  __int16 v15;
  uint64_t v16;
  __int16 v17;
  uint64_t v18;

  if (*(_BYTE *)(a1 + 56))
  {
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
      sub_1003DF76C();
    v4 = *(_QWORD **)(a1 + 24);
    if (v4 != (_QWORD *)(a1 + 32))
    {
      do
      {
        v5 = (_QWORD *)v4[1];
        v6 = v4;
        if (v5)
        {
          do
          {
            v7 = v5;
            v5 = (_QWORD *)*v5;
          }
          while (v5);
        }
        else
        {
          do
          {
            v7 = (_QWORD *)v6[2];
            v8 = *v7 == (_QWORD)v6;
            v6 = v7;
          }
          while (!v8);
        }
        v9 = qword_10085F520;
        if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 134217984;
          v14 = a2;
          _os_log_debug_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "#handoffca removedDevice() called within sessionEnded(), monotonicTimeSeconds: %f, s", buf, 0xCu);
        }
        sub_100211A6C(a1, v4[4], a2);
        v4 = v7;
      }
      while (v7 != (_QWORD *)(a1 + 32));
    }
    *(double *)(a1 + 72) = a2 - *(double *)(a1 + 64);
    v10 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
    {
      v11 = *(_QWORD *)(a1 + 64);
      v12 = *(_QWORD *)(a1 + 72);
      *(_DWORD *)buf = 134218496;
      v14 = a2;
      v15 = 2048;
      v16 = v11;
      v17 = 2048;
      v18 = v12;
      _os_log_debug_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "#handoffca no objects in session. Calling resetStatistics within removedDevice() monotonicTimeSeconds: %f s, fSessionStartTime: %f s, fSessionDuration: %f s", buf, 0x20u);
    }
    *(double *)(a1 + 96) = *(double *)(a1 + 80) + *(double *)(a1 + 72) / 3600.0 * 12.65;
    sub_100211E64(a1);
    sub_100212308(a1);
  }
  else if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
  {
    sub_1003DF740();
  }
}

void sub_100211E64(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  void *v9;
  void *v10;
  void *v11;
  NSNumber *v12;
  void *v13;
  NSNumber *v14;
  void *v15;
  NSNumber *v16;
  void *v17;
  NSNumber *v18;
  void *v19;
  void *v20;
  id v21;
  NSObject *v22;
  _QWORD v23[4];
  id v24;
  int *v25;
  _QWORD v26[7];
  _QWORD v27[7];
  _BYTE buf[12];
  __int16 v29;
  int v30;
  __int16 v31;
  uint64_t v32;
  __int16 v33;
  uint64_t *v34;
  __int16 v35;
  uint64_t *v36;
  __int16 v37;
  uint64_t *v38;
  __int16 v39;
  uint64_t *v40;

  v2 = (id)qword_10085F520;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_QWORD *)(a1 + 96);
    v4 = *(_QWORD *)(a1 + 72);
    v25 = &dword_100472CE8;
    v5 = sub_1001845A4((uint64_t **)a1, &dword_100472CE8, (uint64_t)&unk_100472CF8, &v25)[5];
    v25 = &dword_100472CEC;
    v6 = sub_1001845A4((uint64_t **)a1, &dword_100472CEC, (uint64_t)&unk_100472CF8, &v25)[5];
    v25 = &dword_100472CF0;
    v7 = sub_1001845A4((uint64_t **)a1, &dword_100472CF0, (uint64_t)&unk_100472CF8, &v25)[5];
    v25 = &dword_100472CF4;
    v8 = sub_1001845A4((uint64_t **)a1, &dword_100472CF4, (uint64_t)&unk_100472CF8, &v25)[5];
    *(_DWORD *)buf = 134219520;
    *(_QWORD *)&buf[4] = v3;
    v29 = 1024;
    v30 = 1;
    v31 = 2048;
    v32 = v4;
    v33 = 2048;
    v34 = v5;
    v35 = 2048;
    v36 = v6;
    v37 = 2048;
    v38 = v7;
    v39 = 2048;
    v40 = v8;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#handoffca Handoff ranging session report: {\nEnergyExpendedPerSession:%f mWh,\nNumberOfSessions %d,\nSessionDuration %f s,\nTimeSpentRanging1Device %f s,\nTimeSpentRanging2Device %f s,\nTimeSpentRanging3Device %f s,\nTimeSpentRanging4OrMoreDevice %f s}", buf, 0x44u);
  }

  v26[0] = CFSTR("energyExpendedPerSession");
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(a1 + 96)));
  v27[0] = v9;
  v26[1] = CFSTR("numberOfSessions");
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 1));
  v27[1] = v10;
  v26[2] = CFSTR("sessionDuration");
  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(a1 + 72)));
  v27[2] = v11;
  v26[3] = CFSTR("timeSpentRanging1Device");
  *(_QWORD *)buf = &dword_100472CE8;
  v12 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *((double *)sub_1001845A4((uint64_t **)a1, &dword_100472CE8, (uint64_t)&unk_100472CF8, (_DWORD **)buf) + 5));
  v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
  v27[3] = v13;
  v26[4] = CFSTR("timeSpentRanging2Device");
  *(_QWORD *)buf = &dword_100472CEC;
  v14 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *((double *)sub_1001845A4((uint64_t **)a1, &dword_100472CEC, (uint64_t)&unk_100472CF8, (_DWORD **)buf) + 5));
  v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
  v27[4] = v15;
  v26[5] = CFSTR("timeSpentRanging3Device");
  *(_QWORD *)buf = &dword_100472CF0;
  v16 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *((double *)sub_1001845A4((uint64_t **)a1, &dword_100472CF0, (uint64_t)&unk_100472CF8, (_DWORD **)buf) + 5));
  v17 = (void *)objc_claimAutoreleasedReturnValue(v16);
  v27[5] = v17;
  v26[6] = CFSTR("timeSpentRanging4OrMoreDevice");
  *(_QWORD *)buf = &dword_100472CF4;
  v18 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *((double *)sub_1001845A4((uint64_t **)a1, &dword_100472CF4, (uint64_t)&unk_100472CF8, (_DWORD **)buf) + 5));
  v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
  v27[6] = v19;
  v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v27, v26, 7));

  v23[0] = _NSConcreteStackBlock;
  v23[1] = 3221225472;
  v23[2] = sub_1002123D8;
  v23[3] = &unk_1007FA568;
  v21 = v20;
  v24 = v21;
  AnalyticsSendEventLazy(CFSTR("com.apple.nearbyinteraction.b520session"), v23);
  v22 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "#handoffca Uploaded ranging session information through AnalyticsSendEventLazy", buf, 2u);
  }

}

