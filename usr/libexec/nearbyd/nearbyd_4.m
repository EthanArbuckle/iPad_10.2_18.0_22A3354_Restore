void sub_100212294(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

double sub_100212308(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  double result;
  _OWORD v5[5];
  int v6;

  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
    sub_1003DF7D0();
  v5[2] = xmmword_100472CB8;
  v5[3] = unk_100472CC8;
  v5[4] = xmmword_100472CD8;
  v5[0] = xmmword_100472C98;
  v5[1] = unk_100472CA8;
  sub_1002127B4((uint64_t **)a1, (int *)v5, &v6);
  v3 = *(_QWORD **)(a1 + 32);
  v2 = a1 + 32;
  sub_1001E8034(v2 - 8, v3);
  *(_QWORD *)(v2 - 8) = v2;
  *(_QWORD *)v2 = 0;
  *(_QWORD *)(v2 + 8) = 0;
  *(_BYTE *)(v2 + 24) = 0;
  result = 0.0;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_QWORD *)(v2 + 64) = 0;
  return result;
}

id sub_1002123D8(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

uint64_t sub_1002123E0(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a3)
  {
    v6 = 16 * a3;
    do
    {
      sub_10021245C((uint64_t **)a1, v4, a2, a2);
      a2 += 4;
      v6 -= 16;
    }
    while (v6);
  }
  return a1;
}

void sub_100212444(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10003E3F0(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_10021245C(uint64_t **a1, uint64_t *a2, int *a3, _OWORD *a4)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t v10;
  uint64_t *v11;

  v6 = sub_1002124E0(a1, a2, &v11, &v10, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = (uint64_t *)operator new(0x30uLL);
    *((_OWORD *)v7 + 2) = *a4;
    sub_1000272A8(a1, (uint64_t)v11, v8, v7);
  }
  return v7;
}

uint64_t *sub_1002124E0(_QWORD *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, int *a5)
{
  uint64_t *v5;
  int v6;
  int v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  BOOL v14;
  int v15;
  uint64_t v16;
  uint64_t *v17;
  int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  int v22;

  v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, v7 = *((_DWORD *)a2 + 8), *a5 < v7))
  {
    v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      v9 = (uint64_t *)*a2;
      do
      {
        v10 = v9;
        v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      v13 = a2;
      do
      {
        v10 = (uint64_t *)v13[2];
        v14 = *v10 == (_QWORD)v13;
        v13 = v10;
      }
      while (v14);
    }
    v15 = *a5;
    if (*((_DWORD *)v10 + 8) < *a5)
      goto LABEL_17;
    v16 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v17 = (uint64_t *)v16;
          v18 = *(_DWORD *)(v16 + 32);
          if (v15 >= v18)
            break;
          v16 = *v17;
          v5 = v17;
          if (!*v17)
            goto LABEL_29;
        }
        if (v18 >= v15)
          break;
        v5 = v17 + 1;
        v16 = v17[1];
      }
      while (v16);
    }
    else
    {
      v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }
  v11 = a2[1];
  if (v11)
  {
    v12 = (uint64_t *)a2[1];
    do
    {
      a4 = v12;
      v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  else
  {
    v19 = a2;
    do
    {
      a4 = (uint64_t *)v19[2];
      v14 = *a4 == (_QWORD)v19;
      v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= *((_DWORD *)a4 + 8))
  {
    v20 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v21 = (uint64_t *)v20;
          v22 = *(_DWORD *)(v20 + 32);
          if (v6 >= v22)
            break;
          v20 = *v21;
          v5 = v21;
          if (!*v21)
            goto LABEL_48;
        }
        if (v22 >= v6)
          break;
        v5 = v21 + 1;
        v20 = v21[1];
      }
      while (v20);
    }
    else
    {
      v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

uint64_t *sub_100212688(uint64_t **a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  uint64_t **v8;
  uint64_t **v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  _QWORD v14[2];
  char v15;

  v7 = a1 + 1;
  v6 = a1[1];
  v8 = a1 + 1;
  v9 = a1 + 1;
  if (v6)
  {
    v10 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v11 = v6[4];
        if (v10 >= v11)
          break;
        v6 = *v9;
        v8 = v9;
        if (!*v9)
          goto LABEL_9;
      }
      if (v11 >= v10)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v8 = v9 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:
    v12 = (uint64_t *)operator new(0xD0uLL);
    v14[1] = v7;
    v12[4] = **a4;
    sub_1002AAF8C(v12 + 5);
    v15 = 1;
    sub_1000272A8(a1, (uint64_t)v9, v8, v12);
    v14[0] = 0;
    sub_100212770((uint64_t)v14, 0);
    return v12;
  }
  return (uint64_t *)v9;
}

void sub_100212770(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_1001E807C((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

uint64_t **sub_1002127B4(uint64_t **result, int *a2, int *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  char v9;
  uint64_t **v10;
  uint64_t *v11;
  uint64_t *v12;

  v5 = result;
  if (result[2])
  {
    v6 = *result;
    v7 = result[1];
    *result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1])
      v8 = (uint64_t *)v6[1];
    else
      v8 = v6;
    v10 = result;
    v11 = v8;
    v12 = v8;
    if (v8)
    {
      v11 = sub_100153A8C((uint64_t)v8);
      while (a2 != a3)
      {
        sub_1002128B8(v5, a2, (uint64_t)v8);
        if ((v9 & 1) != 0)
        {
          v8 = v11;
          v12 = v11;
          if (!v11)
          {
            a2 += 4;
            break;
          }
          v11 = sub_100153A8C((uint64_t)v11);
        }
        else
        {
          v8 = v12;
        }
        a2 += 4;
        if (!v8)
          break;
      }
    }
    result = (uint64_t **)sub_100153AE0((uint64_t)&v10);
  }
  while (a2 != a3)
  {
    result = sub_10021294C(v5, a2, a2);
    a2 += 4;
  }
  return result;
}

void sub_1002128A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100153AE0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t **sub_1002128B8(uint64_t **a1, int *a2, uint64_t a3)
{
  uint64_t **v4;
  uint64_t *v5;
  int v6;
  uint64_t **v7;
  int v8;

  v4 = a1 + 1;
  v5 = a1[1];
  v6 = *a2;
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = *((_DWORD *)v5 + 8);
        if (v6 >= v8)
          break;
        v5 = *v7;
        v4 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= v6)
        return v7;
      v5 = v7[1];
      if (!v5)
      {
        v4 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = a1 + 1;
LABEL_9:
    *(_DWORD *)(a3 + 32) = v6;
    *(_QWORD *)(a3 + 40) = *((_QWORD *)a2 + 1);
    sub_1000272A8(a1, (uint64_t)v7, v4, (uint64_t *)a3);
  }
  return (uint64_t **)a3;
}

uint64_t **sub_10021294C(uint64_t **a1, int *a2, _OWORD *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  int v7;
  uint64_t **v8;
  int v9;
  uint64_t *v10;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = *((_DWORD *)v5 + 8);
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_10:
    v10 = (uint64_t *)operator new(0x30uLL);
    *((_OWORD *)v10 + 2) = *a3;
    sub_1000272A8(a1, (uint64_t)v8, v6, v10);
    return (uint64_t **)v10;
  }
  return v8;
}

_QWORD *sub_100212A04@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, off_10080F1A0[a1]);
}

_QWORD *sub_100212A18@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, off_10080F1F8[a1]);
}

_QWORD *sub_100212A2C@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, off_10080F240[a1]);
}

_QWORD *sub_100212A40@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, off_10080F260[a1]);
}

void sub_100212AC4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100212B48(uint64_t a1)
{
  id v1;
  void *v2;

  v1 = objc_msgSend(objc_alloc(*(Class *)(a1 + 32)), "initPrivate");
  v2 = (void *)qword_100859138;
  qword_100859138 = (uint64_t)v1;

}

void sub_100212D1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, os_unfair_lock_t lock, void *a10)
{
  void *v10;

  os_unfair_lock_unlock(lock);
  _Unwind_Resume(a1);
}

id sub_100212D54(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "processVisionInput:", *(_QWORD *)(a1 + 40));
}

void sub_100212E90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  os_unfair_lock_s *v10;

  os_unfair_lock_unlock(v10);

  _Unwind_Resume(a1);
}

void sub_100212F00(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;
  void *v2;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

BOOL sub_100212F4C(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  unsigned __int8 v5;
  NSObject *v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double *v15;
  unsigned int v16;
  double v17;
  int v18;
  double v19;
  double v20;
  int v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  unsigned int v31;
  unsigned __int8 v32;
  unsigned int v33;
  unsigned __int8 v34;
  unsigned int v35;
  unsigned __int8 v36;
  unsigned int v37;
  unsigned __int8 v38;
  unsigned int v39;
  unsigned int v40;
  unsigned __int8 v41;
  unsigned int v42;
  void *__p[2];
  char v44;
  uint64_t v45;
  int v46;

  v45 = a1;
  v46 = 0;
  v5 = *(_BYTE *)(a2 + 16);
  if (*(_BYTE *)(a2 + 160))
    v5 |= 8u;
  if (*(_BYTE *)(a2 + 72))
  {
    if (*(_BYTE *)(a2 + 112))
    {
      v6 = qword_10085F520;
      result = os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_FAULT);
      if (result)
      {
        sub_1003DF848(v6, v8, v9, v10, v11, v12, v13, v14);
        return 0;
      }
      return result;
    }
    v5 |= 2u;
    v15 = (double *)(a2 + 80);
  }
  else
  {
    v15 = (double *)(a2 + 80);
    if (*(_BYTE *)(a2 + 112))
      v5 |= 4u;
  }
  v16 = v5;
  sub_10000BF04(__p, "measurement type");
  sub_100213728((uint64_t)&v45, 4u, v16);
  if (v44 < 0)
    operator delete(__p[0]);
  if (*(_BYTE *)(a2 + 16))
  {
    v17 = *(double *)a2;
    sub_10000BF04(__p, "bounded displacement enter timestamp");
    sub_100213818((uint64_t)&v45, 0xCu, 0.0, 409.5, 0.1, v17);
    if (v44 < 0)
      operator delete(__p[0]);
    if (!*(_BYTE *)(a2 + 16))
      goto LABEL_90;
    v18 = *(_DWORD *)(a2 + 8);
    if (v18)
    {
      if (v18 == 1)
      {
        sub_10000BF04(__p, "bounded displacement category::slowly_moving");
        sub_100213728((uint64_t)&v45, 2u, 1u);
      }
      else
      {
        if (v18 != 2)
          goto LABEL_24;
        sub_10000BF04(__p, "bounded displacement category::walking_or_unknown");
        sub_100213728((uint64_t)&v45, 2u, 2u);
      }
    }
    else
    {
      sub_10000BF04(__p, "bounded displacement category::static");
      sub_100213728((uint64_t)&v45, 2u, 0);
    }
    if (v44 < 0)
      operator delete(__p[0]);
  }
LABEL_24:
  if (*(_BYTE *)(a2 + 72))
  {
    v19 = *(double *)(a2 + 24);
    sub_10000BF04(__p, "measured displacement enter timestamp");
    sub_100213818((uint64_t)&v45, 0xCu, 0.0, 409.5, 0.1, v19);
    if (v44 < 0)
      operator delete(__p[0]);
    v20 = *(double *)(a2 + 32);
    sub_10000BF04(__p, "measured displacement applicability timestamp");
    sub_100213818((uint64_t)&v45, 6u, 0.0, 6.3, 0.1, v20);
    if (v44 < 0)
      operator delete(__p[0]);
    v21 = *(_DWORD *)(a2 + 40);
    if (v21)
    {
      if (v21 != 1)
      {
LABEL_43:
        v26 = *(double *)(a2 + 48);
        sub_10000BF04(__p, "measured displacement h1");
        sub_100213818((uint64_t)&v45, 0xDu, -409.6, 409.5, 0.1, v26);
        if (v44 < 0)
          operator delete(__p[0]);
        v27 = *(double *)(a2 + 56);
        sub_10000BF04(__p, "measured displacement h2");
        sub_100213818((uint64_t)&v45, 0xDu, -409.6, 409.5, 0.1, v27);
        if (v44 < 0)
          operator delete(__p[0]);
        v28 = *(double *)(a2 + 64);
        sub_10000BF04(__p, "measured displacement v");
        sub_100213818((uint64_t)&v45, 9u, -25.6, 25.5, 0.1, v28);
        goto LABEL_48;
      }
      sub_10000BF04(__p, "measured displacement source::INERTIAL");
      sub_100213728((uint64_t)&v45, 1u, 1u);
    }
    else
    {
      sub_10000BF04(__p, "measured displacement source::VIO");
      sub_100213728((uint64_t)&v45, 1u, 0);
    }
    if (v44 < 0)
      operator delete(__p[0]);
    goto LABEL_43;
  }
  if (!*(_BYTE *)(a2 + 112))
    goto LABEL_50;
  v22 = *v15;
  sub_10000BF04(__p, "measured velocity enter timestamp");
  sub_100213818((uint64_t)&v45, 0xCu, 0.0, 409.5, 0.1, v22);
  if (v44 < 0)
    operator delete(__p[0]);
  v23 = *(double *)(a2 + 88);
  sub_10000BF04(__p, "measured velocity applicability timestamp");
  sub_100213818((uint64_t)&v45, 6u, 0.0, 6.3, 0.1, v23);
  if (v44 < 0)
    operator delete(__p[0]);
  v24 = *(double *)(a2 + 96);
  sub_10000BF04(__p, "measured velocity change h1");
  sub_100213818((uint64_t)&v45, 8u, -6.4, 6.35, 0.05, v24);
  if (v44 < 0)
    operator delete(__p[0]);
  v25 = *(double *)(a2 + 104);
  sub_10000BF04(__p, "measured velocity change h2");
  sub_100213818((uint64_t)&v45, 8u, -6.4, 6.35, 0.05, v25);
LABEL_48:
  if (v44 < 0)
    operator delete(__p[0]);
LABEL_50:
  if (*(_BYTE *)(a2 + 160))
  {
    v29 = *(double *)(a2 + 136);
    sub_10000BF04(__p, "northerly offset");
    sub_100213818((uint64_t)&v45, 0xAu, -512.0, 511.0, 1.0, v29);
    if (v44 < 0)
      operator delete(__p[0]);
    if (*(_BYTE *)(a2 + 160))
    {
      v30 = *(double *)(a2 + 144);
      sub_10000BF04(__p, "easterly offset");
      sub_100213818((uint64_t)&v45, 0xAu, -512.0, 511.0, 1.0, v30);
      if (v44 < 0)
        operator delete(__p[0]);
      if (*(_BYTE *)(a2 + 160))
      {
        v31 = *(_DWORD *)(a2 + 152);
        sub_10000BF04(__p, "location data uncertainty");
        sub_100213728((uint64_t)&v45, 4u, v31);
        if (v44 < 0)
          operator delete(__p[0]);
        goto LABEL_59;
      }
    }
LABEL_90:
    sub_10000BA44();
  }
LABEL_59:
  if (a3[1])
    v32 = *a3;
  else
    v32 = 0;
  v33 = v32;
  sub_10000BF04(__p, "hangup bit");
  sub_100213728((uint64_t)&v45, 1u, v33);
  if (v44 < 0)
    operator delete(__p[0]);
  if (a3[3])
    v34 = a3[2];
  else
    v34 = 0;
  v35 = v34;
  sub_10000BF04(__p, "finder_gone bit");
  sub_100213728((uint64_t)&v45, 1u, v35);
  if (v44 < 0)
    operator delete(__p[0]);
  if (a3[5])
    v36 = a3[4];
  else
    v36 = 0;
  v37 = v36;
  sub_10000BF04(__p, "findee_gone bit");
  sub_100213728((uint64_t)&v45, 1u, v37);
  if (v44 < 0)
    operator delete(__p[0]);
  if (a3[7])
    v38 = a3[6];
  else
    v38 = 0;
  v39 = v38;
  sub_10000BF04(__p, "finder_wants_updates bit");
  sub_100213728((uint64_t)&v45, 1u, v39);
  if (v44 < 0)
    operator delete(__p[0]);
  v40 = a3[8];
  sub_10000BF04(__p, "finder_isPhone bit");
  sub_100213728((uint64_t)&v45, 1u, v40);
  if (v44 < 0)
    operator delete(__p[0]);
  if (*(_BYTE *)(a2 + 169))
    v41 = *(_BYTE *)(a2 + 168);
  else
    v41 = 0;
  v42 = v41;
  sub_10000BF04(__p, "findee_is_in_good_gnss_conditions bit");
  sub_100213728((uint64_t)&v45, 1u, v42);
  if (v44 < 0)
    operator delete(__p[0]);
  sub_10000BF04(__p, "finding_data_reserved");
  sub_100213728((uint64_t)&v45, 7u, 0);
  if (v44 < 0)
    operator delete(__p[0]);
  return 1;
}

void sub_1002136A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100213728(uint64_t a1, unsigned int a2, unsigned int a3)
{
  NSObject *v6;
  int v8;
  _DWORD v9[2];
  __int16 v10;
  unsigned int v11;
  __int16 v12;
  unsigned int v13;

  v6 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
  {
    v8 = *(_DWORD *)(a1 + 8);
    v9[0] = 67109632;
    v9[1] = v8;
    v10 = 1024;
    v11 = a2;
    v12 = 1024;
    v13 = a3;
    _os_log_debug_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "FindingFrame,writing unsigned curPos=%i, bitLen=%i, bitContents=%x", (uint8_t *)v9, 0x14u);
  }
  sub_10021435C((unint64_t **)a1, *(_DWORD *)(a1 + 8), a2, a3);
  *(_DWORD *)(a1 + 8) += a2;
  return 1;
}

uint64_t sub_100213818(uint64_t a1, unsigned int a2, double a3, double a4, double a5, double a6)
{
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  NSObject *v21;
  int v23;
  _DWORD v24[2];
  __int16 v25;
  unsigned int v26;
  __int16 v27;
  unsigned int v28;
  __int16 v29;
  double v30;

  if (a6 < a3 || a6 > a4)
  {
    v12 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_FAULT))
      sub_1003DF87C(v12, v13, v14, v15, v16, v17, v18, v19);
  }
  v20 = vcvtad_u64_f64((a6 - a3) / a5);
  v21 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
  {
    v23 = *(_DWORD *)(a1 + 8);
    v24[0] = 67109888;
    v24[1] = v23;
    v25 = 1024;
    v26 = a2;
    v27 = 1024;
    v28 = v20;
    v29 = 2048;
    v30 = a6;
    _os_log_debug_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "FindingFrame,writing double curPos=%i, bitLen=%i, bitContents=%x, contents=%lf", (uint8_t *)v24, 0x1Eu);
  }
  sub_10021435C((unint64_t **)a1, *(_DWORD *)(a1 + 8), a2, v20);
  *(_DWORD *)(a1 + 8) += a2;
  return 1;
}

uint64_t sub_100213960(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  char v6;
  _BOOL4 v7;
  int v8;
  _BOOL4 v9;
  int v10;
  int v11;
  int v12;
  _BOOL4 v13;
  _BOOL4 v14;
  int v15;
  unsigned int v16;
  int v17;
  _BOOL4 v18;
  _BOOL4 v19;
  _BOOL4 v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  _BOOL4 v26;
  _BOOL4 v27;
  _BOOL4 v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  _BOOL4 v33;
  _BOOL4 v34;
  int v35;
  int v36;
  uint64_t v37;
  double v38;
  int v39;
  unsigned int v40;
  __int16 v41;
  __int16 v42;
  __int16 v43;
  int v44;
  __int16 v45;
  char v46;
  uint64_t v47;
  __int16 v48;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  double v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  _BYTE __p[24];
  int v58;

  memset(&__p[7], 0, 17);
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 16) = 0;
  *(_BYTE *)(a2 + 24) = 0;
  *(_BYTE *)(a2 + 72) = 0;
  *(_BYTE *)(a2 + 80) = 0;
  *(_BYTE *)(a2 + 112) = 0;
  *(_OWORD *)(a2 + 113) = *(_OWORD *)__p;
  *(_QWORD *)(a2 + 129) = *(_QWORD *)&__p[16];
  *(_BYTE *)(a2 + 160) = 0;
  *(_WORD *)(a2 + 168) = 0;
  memset(__p, 0, sizeof(__p));
  sub_1001530EC(__p, *(const void **)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 8) - *(_QWORD *)a1);
  v58 = 0;
  v56 = 0;
  v5 = sub_100213EF0((uint64_t)__p, 4u, (int *)&v56);
  v6 = v56;
  if ((v56 & 1) == 0)
    goto LABEL_13;
  v55 = 0;
  v7 = sub_100213FF0((uint64_t)__p, 0xCu, (double *)&v55, 0.0, 0.1);
  v8 = sub_100213EF0((uint64_t)__p, 2u, (int *)&v56 + 1);
  if (v5)
    v9 = v7;
  else
    v9 = 0;
  if (HIDWORD(v56) == 2)
  {
    v44 = *(unsigned __int8 *)(a2 + 16);
    *(_QWORD *)a2 = v55;
    *(_DWORD *)(a2 + 8) = 2;
    if (v44)
      goto LABEL_12;
    goto LABEL_11;
  }
  if (HIDWORD(v56) != 1)
  {
    if (HIDWORD(v56))
      goto LABEL_72;
    v10 = *(unsigned __int8 *)(a2 + 16);
    *(_QWORD *)a2 = v55;
    *(_DWORD *)(a2 + 8) = 0;
    if (v10)
      goto LABEL_12;
    goto LABEL_11;
  }
  v11 = *(unsigned __int8 *)(a2 + 16);
  *(_QWORD *)a2 = v55;
  *(_DWORD *)(a2 + 8) = 1;
  if (!v11)
LABEL_11:
    *(_BYTE *)(a2 + 16) = 1;
LABEL_12:
  v5 = v8 & v9;
LABEL_13:
  v12 = v5 != 0;
  if ((v6 & 2) == 0)
    goto LABEL_22;
  v54 = 0;
  v55 = 0;
  v52 = 0;
  v53 = 0.0;
  v50 = 0;
  v51 = 0;
  v13 = sub_100213FF0((uint64_t)__p, 0xCu, (double *)&v55, 0.0, 0.1);
  v14 = sub_100213FF0((uint64_t)__p, 6u, &v53, 0.0, 0.1);
  v15 = sub_100213EF0((uint64_t)__p, 1u, (int *)&v54);
  v16 = v54;
  if (v54 > 1)
    goto LABEL_72;
  v17 = v15 && v13 && v14;
  v18 = sub_100213FF0((uint64_t)__p, 0xDu, (double *)&v52, -409.6, 0.1);
  v19 = sub_100213FF0((uint64_t)__p, 0xDu, (double *)&v51, -409.6, 0.1);
  v20 = sub_100213FF0((uint64_t)__p, 9u, (double *)&v50, -25.6, 0.1);
  v22 = v52;
  v21 = v53;
  v12 = v5 && v17 & (v18 && v19 && v20);
  v24 = v50;
  v23 = v51;
  v25 = *(unsigned __int8 *)(a2 + 72);
  *(_QWORD *)(a2 + 24) = v55;
  *(double *)(a2 + 32) = v21;
  *(_DWORD *)(a2 + 40) = v16;
  *(_QWORD *)(a2 + 48) = v22;
  *(_QWORD *)(a2 + 56) = v23;
  *(_QWORD *)(a2 + 64) = v24;
  if (!v25)
  {
    *(_BYTE *)(a2 + 72) = 1;
    if ((v6 & 4) == 0)
      goto LABEL_24;
  }
  else
  {
LABEL_22:
    if ((v6 & 4) == 0)
      goto LABEL_24;
  }
  v55 = 0;
  v52 = 0;
  v53 = 0.0;
  v51 = 0;
  v26 = sub_100213FF0((uint64_t)__p, 0xCu, (double *)&v55, 0.0, 0.1);
  v27 = sub_100213FF0((uint64_t)__p, 6u, &v53, 0.0, 0.1);
  v28 = sub_100213FF0((uint64_t)__p, 8u, (double *)&v52, -6.4, 0.05);
  v12 &= (v26 && v27) & v28 & sub_100213FF0((uint64_t)__p, 8u, (double *)&v51, -6.4, 0.05);
  v30 = v52;
  v29 = v53;
  v31 = v51;
  v32 = *(unsigned __int8 *)(a2 + 112);
  *(_QWORD *)(a2 + 80) = v55;
  *(double *)(a2 + 88) = v29;
  *(_QWORD *)(a2 + 96) = v30;
  *(_QWORD *)(a2 + 104) = v31;
  if (!v32)
  {
    *(_BYTE *)(a2 + 112) = 1;
    if ((v6 & 8) == 0)
      goto LABEL_30;
    goto LABEL_25;
  }
LABEL_24:
  if ((v6 & 8) == 0)
    goto LABEL_30;
LABEL_25:
  v55 = 0;
  v53 = 0.0;
  LODWORD(v52) = 0;
  v33 = sub_100213FF0((uint64_t)__p, 0xAu, (double *)&v55, -512.0, 1.0);
  v34 = sub_100213FF0((uint64_t)__p, 0xAu, &v53, -512.0, 1.0);
  v35 = sub_100213EF0((uint64_t)__p, 4u, (int *)&v52);
  v36 = v33 && v34;
  if (!v35)
    v36 = 0;
  v12 &= v36;
  v37 = v55;
  v38 = v53;
  v39 = v52;
  if (!*(_BYTE *)(a2 + 160))
    *(_BYTE *)(a2 + 160) = 1;
  *(_QWORD *)(a2 + 136) = v37;
  *(double *)(a2 + 144) = v38;
  *(_DWORD *)(a2 + 152) = v39;
LABEL_30:
  if (sub_100213EF0((uint64_t)__p, 1u, (int *)&v56 + 1))
    v40 = v12;
  else
    v40 = 0;
  if (HIDWORD(v56) == 1)
  {
    v41 = 257;
  }
  else
  {
    if (HIDWORD(v56))
      goto LABEL_72;
    v41 = 256;
  }
  *(_WORD *)a3 = v41;
  if (!sub_100213EF0((uint64_t)__p, 1u, (int *)&v56 + 1))
    v40 = 0;
  if (HIDWORD(v56) == 1)
  {
    v42 = 257;
  }
  else
  {
    if (HIDWORD(v56))
      goto LABEL_72;
    v42 = 256;
  }
  *(_WORD *)(a3 + 2) = v42;
  if (!sub_100213EF0((uint64_t)__p, 1u, (int *)&v56 + 1))
    v40 = 0;
  if (HIDWORD(v56) == 1)
  {
    v43 = 257;
  }
  else
  {
    if (HIDWORD(v56))
      goto LABEL_72;
    v43 = 256;
  }
  *(_WORD *)(a3 + 4) = v43;
  if (!sub_100213EF0((uint64_t)__p, 1u, (int *)&v56 + 1))
    v40 = 0;
  if (HIDWORD(v56) == 1)
  {
    v45 = 257;
  }
  else
  {
    if (HIDWORD(v56))
      goto LABEL_72;
    v45 = 256;
  }
  *(_WORD *)(a3 + 6) = v45;
  v46 = 1;
  if (!sub_100213EF0((uint64_t)__p, 1u, (int *)&v56 + 1))
    v40 = 0;
  if (HIDWORD(v56) != 1)
  {
    if (HIDWORD(v56))
      goto LABEL_72;
    v46 = 0;
  }
  *(_BYTE *)(a3 + 8) = v46;
  if (sub_100213EF0((uint64_t)__p, 1u, (int *)&v56 + 1))
    v47 = v40;
  else
    v47 = 0;
  if (!HIDWORD(v56))
  {
    v48 = 256;
    goto LABEL_77;
  }
  if (HIDWORD(v56) != 1)
  {
LABEL_72:
    v47 = 0;
    goto LABEL_73;
  }
  v48 = 257;
LABEL_77:
  *(_WORD *)(a2 + 168) = v48;
LABEL_73:
  if (*(_QWORD *)__p)
  {
    *(_QWORD *)&__p[8] = *(_QWORD *)__p;
    operator delete(*(void **)__p);
  }
  return v47;
}

uint64_t sub_100213EF0(uint64_t a1, unsigned int a2, int *a3)
{
  _BOOL4 v6;
  uint64_t result;
  NSObject *v8;
  int v9;
  int v10;
  _DWORD v11[2];
  __int16 v12;
  unsigned int v13;
  __int16 v14;
  int v15;

  *a3 = 0;
  v6 = sub_100214428((uint64_t *)a1, *(_DWORD *)(a1 + 24), a2, a3);
  result = 0;
  if (v6)
  {
    v8 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
    {
      v9 = *(_DWORD *)(a1 + 24);
      v10 = *a3;
      v11[0] = 67109632;
      v11[1] = v9;
      v12 = 1024;
      v13 = a2;
      v14 = 1024;
      v15 = v10;
      _os_log_debug_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "FindingFrame,reading unsigned curPos=%i, bitLen=%i, retVal=%x", (uint8_t *)v11, 0x14u);
    }
    *(_DWORD *)(a1 + 24) += a2;
    return 1;
  }
  return result;
}

BOOL sub_100213FF0(uint64_t a1, unsigned int a2, double *a3, double a4, double a5)
{
  _BOOL8 v10;
  unsigned int v11;
  NSObject *v12;
  int v14;
  double v15;
  unsigned int v16;
  uint8_t buf[4];
  int v18;
  __int16 v19;
  unsigned int v20;
  __int16 v21;
  unsigned int v22;
  __int16 v23;
  double v24;

  v16 = 0;
  v10 = sub_100214428((uint64_t *)a1, *(_DWORD *)(a1 + 24), a2, &v16);
  if (v10)
  {
    v11 = v16;
    *a3 = a4 + (double)v16 * a5;
    v12 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
    {
      v14 = *(_DWORD *)(a1 + 24);
      v15 = *a3;
      *(_DWORD *)buf = 67109888;
      v18 = v14;
      v19 = 1024;
      v20 = a2;
      v21 = 1024;
      v22 = v11;
      v23 = 2048;
      v24 = v15;
      _os_log_debug_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "FindingFrame,reading double curPos=%i, bitLen=%i, extractedVal=%x, retVal=%lf", buf, 0x1Eu);
    }
    *(_DWORD *)(a1 + 24) += a2;
  }
  return v10;
}

uint64_t sub_10021411C(uint64_t **a1, unsigned __int8 **a2)
{
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  int v12;
  uint64_t **v13;
  uint64_t v14;
  void **v15;
  void *v16[2];
  char v17;
  _QWORD v18[2];
  uint64_t v19;
  _QWORD v20[10];
  char v21;
  uint64_t v22;
  uint8_t buf[4];
  uint64_t v24;
  __int16 v25;
  void **v26;

  sub_1000537E4((uint64_t)v18);
  v4 = *a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      v6 = *v4;
      *(_DWORD *)((char *)v20 + *(_QWORD *)(v19 - 24)) |= 0x4000u;
      LOBYTE(v16[0]) = 48;
      v7 = sub_10015BFA0(&v19, (char *)v16);
      v8 = *v7;
      *(uint64_t *)((char *)v7 + *(_QWORD *)(*v7 - 24) + 24) = 2;
      *(_DWORD *)((char *)v7 + *(_QWORD *)(v8 - 24) + 8) = *(_DWORD *)((_BYTE *)v7 + *(_QWORD *)(v8 - 24) + 8) & 0xFFFFFFB5 | 8;
      std::ostream::operator<<(v7, v6);
      ++v4;
    }
    while (v4 != v5);
  }
  v9 = (id)qword_10085F520;
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
  {
    v12 = *((char *)a1 + 23);
    v13 = (uint64_t **)*a1;
    std::stringbuf::str(v20);
    v14 = (uint64_t)(v12 >= 0 ? a1 : v13);
    v15 = v17 >= 0 ? v16 : (void **)v16[0];
    *(_DWORD *)buf = 136315394;
    v24 = v14;
    v25 = 2080;
    v26 = v15;
    _os_log_debug_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "FindingFrame,dataFrame [%s]: %s", buf, 0x16u);
    if (v17 < 0)
      operator delete(v16[0]);
  }

  *(_QWORD *)((char *)v18
  v19 = v10;
  if (v21 < 0)
    operator delete((void *)v20[8]);
  std::streambuf::~streambuf(v20);
  return std::ios::~ios(&v22);
}

void sub_100214330(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  void *v4;
  va_list va;

  va_start(va, a4);

  sub_100053910((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10021435C(unint64_t **a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  unsigned int v5;
  unsigned int v7;
  unint64_t v8;
  char v9;
  int v10;
  unint64_t v11;
  unint64_t v12;

  if (a3)
  {
    v5 = a3;
    do
    {
      v7 = a2;
      v8 = (unint64_t)a2 >> 3;
      v9 = a2 & 7;
      if (v5 >= 8 - (a2 & 7))
        v10 = 8 - (a2 & 7);
      else
        v10 = v5;
      v11 = **a1;
      v12 = (*a1)[1] - v11;
      if (v12 <= (unint64_t)a2 >> 3)
      {
        sub_10003F150(*a1, (v8 + 1) - v12);
        v11 = **a1;
        v12 = (*a1)[1] - v11;
      }
      if (v12 <= v8)
        sub_1002144A4();
      *(_BYTE *)(v11 + v8) |= (a4 & ~(-1 << v10)) << v9;
      a4 >>= v10;
      a2 = v10 + v7;
      v5 -= v10;
    }
    while (v5);
  }
  return 1;
}

BOOL sub_100214428(uint64_t *a1, unsigned int a2, unsigned int a3, _DWORD *a4)
{
  int v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  _BOOL8 result;
  unsigned int v9;

  *a4 = 0;
  if (!a3)
    return 1;
  v4 = 0;
  v5 = 0;
  v6 = *a1;
  v7 = a1[1] - *a1;
  do
  {
    result = v7 > (unint64_t)a2 >> 3;
    if (v7 <= (unint64_t)a2 >> 3)
      break;
    v9 = 8 - (a2 & 7);
    if (a3 < v9)
      v9 = a3;
    v5 |= ((*(unsigned __int8 *)(v6 + ((unint64_t)a2 >> 3)) >> (a2 & 7)) & ~(-1 << v9)) << v4;
    *a4 = v5;
    a2 += v9;
    v4 += v9;
    a3 -= v9;
  }
  while (a3);
  return result;
}

void sub_1002144A4()
{
  sub_100146798("vector");
}

void sub_100214588(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100214620(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002146D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1002147A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_100214874(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_10021495C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100214A40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_100214ACC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_100214B84(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_100214C38(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_100214CDC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

_QWORD *sub_100214D18@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, (&off_10080F2D8)[a1]);
}

_QWORD *sub_100214D2C@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, (&off_10080F330)[a1]);
}

_QWORD *sub_100214D40@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, (&off_10080F378)[a1]);
}

_QWORD *sub_100214D54@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, (&off_10080F398)[a1]);
}

void sub_1002150E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_10021517C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)NIServerSessionLifeCycleManager;
  -[_Unwind_Exception dealloc](&a9, "dealloc");
  _Unwind_Resume(a1);
}

void sub_100215240(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

void sub_100215300(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

uint64_t sub_1002153E0(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1002153F0(uint64_t a1)
{

}

void sub_1002153F8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "allKeys"));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_1002154C8(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  NSObject *v4;
  uint64_t v5;
  __int128 *v6;
  _BYTE __p[12];
  __int16 v8;
  uint64_t v9;
  char v10;

  v2 = *(_QWORD *)(a1 + 32);
  sub_10000BF04(__p, "runWithConfigurationCalled");
  v6 = (__int128 *)__p;
  v3 = sub_1002175EC(v2 + 56, __p, (uint64_t)&unk_100472CF8, &v6);
  ++v3[5];
  if (v10 < 0)
    operator delete(*(void **)__p);
  v4 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 136);
    *(_DWORD *)__p = 138412546;
    *(_QWORD *)&__p[4] = CFSTR("runWithConfigurationCalled");
    v8 = 2112;
    v9 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#lifecycle,%@ for session identifier: %@", __p, 0x16u);
  }
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 49) = 1;
}

void sub_1002155EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

id sub_100215610(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_watchdogLoop");
}

id sub_100215670(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  NSObject *v4;
  uint64_t v5;
  id result;
  __int128 *v7;
  _BYTE __p[12];
  __int16 v9;
  uint64_t v10;
  char v11;

  v2 = *(_QWORD *)(a1 + 32);
  sub_10000BF04(__p, "pauseCalled");
  v7 = (__int128 *)__p;
  v3 = sub_1002175EC(v2 + 56, __p, (uint64_t)&unk_100472CF8, &v7);
  ++v3[5];
  if (v11 < 0)
    operator delete(*(void **)__p);
  v4 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 136);
    *(_DWORD *)__p = 138412546;
    *(_QWORD *)&__p[4] = CFSTR("pauseCalled");
    v9 = 2112;
    v10 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#lifecycle,%@ for session identifier: %@", __p, 0x16u);
  }
  result = objc_msgSend(*(id *)(a1 + 32), "_removeAllPeers");
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 49) = 0;
  return result;
}

void sub_100215798(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

id sub_100215814(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  NSObject *v4;
  uint64_t v5;
  id result;
  __int128 *v7;
  _BYTE __p[12];
  __int16 v9;
  uint64_t v10;
  char v11;

  v2 = *(_QWORD *)(a1 + 32);
  sub_10000BF04(__p, "invalidateCalled");
  v7 = (__int128 *)__p;
  v3 = sub_1002175EC(v2 + 56, __p, (uint64_t)&unk_100472CF8, &v7);
  ++v3[5];
  if (v11 < 0)
    operator delete(*(void **)__p);
  v4 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 136);
    *(_DWORD *)__p = 138412546;
    *(_QWORD *)&__p[4] = CFSTR("invalidateCalled");
    v9 = 2112;
    v10 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#lifecycle,%@ for session identifier: %@", __p, 0x16u);
  }
  result = objc_msgSend(*(id *)(a1 + 32), "_removeAllPeers");
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 52) = 1;
  return result;
}

void sub_100215940(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1002159BC(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  NSObject *v4;
  uint64_t v5;
  __int128 *v6;
  _BYTE __p[12];
  __int16 v8;
  uint64_t v9;
  char v10;

  v2 = *(_QWORD *)(a1 + 32);
  sub_10000BF04(__p, "failedToAddPeer");
  v6 = (__int128 *)__p;
  v3 = sub_1002175EC(v2 + 56, __p, (uint64_t)&unk_100472CF8, &v6);
  ++v3[5];
  if (v10 < 0)
    operator delete(*(void **)__p);
  v4 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 136);
    *(_DWORD *)__p = 138412546;
    *(_QWORD *)&__p[4] = CFSTR("failedToAddPeer");
    v8 = 2112;
    v9 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#lifecycle,%@ for session identifier: %@", __p, 0x16u);
  }
}

void sub_100215AD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100215B50(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  NSObject *v4;
  uint64_t v5;
  __int128 *v6;
  _BYTE __p[12];
  __int16 v8;
  uint64_t v9;
  char v10;

  v2 = *(_QWORD *)(a1 + 32);
  sub_10000BF04(__p, "failedToRemovePeer");
  v6 = (__int128 *)__p;
  v3 = sub_1002175EC(v2 + 56, __p, (uint64_t)&unk_100472CF8, &v6);
  ++v3[5];
  if (v10 < 0)
    operator delete(*(void **)__p);
  v4 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 136);
    *(_DWORD *)__p = 138412546;
    *(_QWORD *)&__p[4] = CFSTR("failedToRemovePeer");
    v8 = 2112;
    v9 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#lifecycle,%@ for session identifier: %@", __p, 0x16u);
  }
}

void sub_100215C68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

id sub_100215D08(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  NSObject *v4;
  uint64_t v5;
  __int128 *v7;
  _BYTE __p[12];
  __int16 v9;
  uint64_t v10;
  char v11;

  v2 = *(_QWORD *)(a1 + 32);
  sub_10000BF04(__p, "startedDiscoveringPeersWithTokens");
  v7 = (__int128 *)__p;
  v3 = sub_1002175EC(v2 + 56, __p, (uint64_t)&unk_100472CF8, &v7);
  ++v3[5];
  if (v11 < 0)
    operator delete(*(void **)__p);
  v4 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 136);
    *(_DWORD *)__p = 138412546;
    *(_QWORD *)&__p[4] = CFSTR("startedDiscoveringPeersWithTokens");
    v9 = 2112;
    v10 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#lifecycle,%@ for session identifier: %@", __p, 0x16u);
  }
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 48) = 1;
  return objc_msgSend(*(id *)(a1 + 32), "_startMonitoringPeersActivity:", *(_QWORD *)(a1 + 40));
}

void sub_100215E34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100215ED4(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  __int128 *v9;
  _BYTE __p[12];
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  uint64_t v14;

  v2 = *(_QWORD *)(a1 + 32);
  sub_10000BF04(__p, "stoppedDiscoveringPeersWithTokens");
  v9 = (__int128 *)__p;
  v3 = sub_1002175EC(v2 + 56, __p, (uint64_t)&unk_100472CF8, &v9);
  ++v3[5];
  if (SHIBYTE(v13) < 0)
    operator delete(*(void **)__p);
  v4 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_QWORD *)(a1 + 40);
    v6 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 136);
    *(_DWORD *)__p = 138412802;
    *(_QWORD *)&__p[4] = CFSTR("stoppedDiscoveringPeersWithTokens");
    v11 = 2112;
    v12 = v5;
    v13 = 2112;
    v14 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#lifecycle,%@ %@ for session identifier: %@", __p, 0x20u);
  }
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "removeObjectsForKeys:", *(_QWORD *)(a1 + 40));
  if (!objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "count"))
  {
    *(_BYTE *)(*(_QWORD *)(a1 + 32) + 48) = 0;
    v7 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
    {
      v8 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 136);
      *(_DWORD *)__p = 138412546;
      *(_QWORD *)&__p[4] = CFSTR("removed all peers, discovery is inactive.");
      v11 = 2112;
      v12 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#lifecycle,%@ for session identifier: %@", __p, 0x16u);
    }
  }
}

void sub_100216080(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

id sub_1002160FC(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  NSObject *v4;
  uint64_t v5;
  __int128 *v7;
  _BYTE __p[12];
  __int16 v9;
  uint64_t v10;
  char v11;

  v2 = *(_QWORD *)(a1 + 32);
  sub_10000BF04(__p, "stoppedDiscoveringAllPeers");
  v7 = (__int128 *)__p;
  v3 = sub_1002175EC(v2 + 56, __p, (uint64_t)&unk_100472CF8, &v7);
  ++v3[5];
  if (v11 < 0)
    operator delete(*(void **)__p);
  v4 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 136);
    *(_DWORD *)__p = 138412546;
    *(_QWORD *)&__p[4] = CFSTR("stoppedDiscoveringAllPeers");
    v9 = 2112;
    v10 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#lifecycle,%@ for session identifier: %@", __p, 0x16u);
  }
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 48) = 0;
  return objc_msgSend(*(id *)(a1 + 32), "_removeAllPeers");
}

void sub_100216224(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1002162C4(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  NSObject *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  __int128 *v8;
  _BYTE __p[12];
  __int16 v10;
  uint64_t v11;
  char v12;

  v2 = *(_QWORD *)(a1 + 32);
  sub_10000BF04(__p, "peerLostCallbackReceived");
  v8 = (__int128 *)__p;
  v3 = sub_1002175EC(v2 + 56, __p, (uint64_t)&unk_100472CF8, &v8);
  ++v3[5];
  if (v12 < 0)
    operator delete(*(void **)__p);
  v4 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 136);
    *(_DWORD *)__p = 138412546;
    *(_QWORD *)&__p[4] = CFSTR("peerLostCallbackReceived");
    v10 = 2112;
    v11 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#lifecycle,%@ for session identifier: %@", __p, 0x16u);
  }
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "objectForKey:", *(_QWORD *)(a1 + 40)));
  v7 = v6;
  if (v6)
  {
    objc_msgSend(v6, "setPeerLostCallbackReceived:", 1);
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "setObject:forKeyedSubscript:", v7, *(_QWORD *)(a1 + 40));
  }

}

void sub_100216414(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10021649C(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  NSObject *v4;
  uint64_t v5;
  __int128 *v6;
  _BYTE __p[12];
  __int16 v8;
  uint64_t v9;
  char v10;

  v2 = *(_QWORD *)(a1 + 32);
  sub_10000BF04(__p, "positioningSensorSessionStarted");
  v6 = (__int128 *)__p;
  v3 = sub_1002175EC(v2 + 56, __p, (uint64_t)&unk_100472CF8, &v6);
  ++v3[5];
  if (v10 < 0)
    operator delete(*(void **)__p);
  v4 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 136);
    *(_DWORD *)__p = 138412546;
    *(_QWORD *)&__p[4] = CFSTR("positioningSensorSessionStarted");
    v8 = 2112;
    v9 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#lifecycle,%@ for session identifier: %@", __p, 0x16u);
  }
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 50) = 1;
}

void sub_1002165C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10021663C(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  NSObject *v4;
  uint64_t v5;
  __int128 *v6;
  _BYTE __p[12];
  __int16 v8;
  uint64_t v9;
  char v10;

  v2 = *(_QWORD *)(a1 + 32);
  sub_10000BF04(__p, "positioningSensorSessionStopped");
  v6 = (__int128 *)__p;
  v3 = sub_1002175EC(v2 + 56, __p, (uint64_t)&unk_100472CF8, &v6);
  ++v3[5];
  if (v10 < 0)
    operator delete(*(void **)__p);
  v4 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 136);
    *(_DWORD *)__p = 138412546;
    *(_QWORD *)&__p[4] = CFSTR("positioningSensorSessionStopped");
    v8 = 2112;
    v9 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#lifecycle,%@ for session identifier: %@", __p, 0x16u);
  }
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 50) = 0;
}

void sub_10021675C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10021680C(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  _QWORD *v4;
  void *__p[2];
  char v6;
  void **v7;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "objectForKeyedSubscript:", *(_QWORD *)(a1 + 40)));
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 32);
    sub_10000BF04(__p, "measurementReceivedForToken");
    v7 = __p;
    v4 = sub_1002175EC(v3 + 56, (unsigned __int8 *)__p, (uint64_t)&unk_100472CF8, (__int128 **)&v7);
    ++v4[5];
    if (v6 < 0)
      operator delete(__p[0]);
    objc_msgSend(v2, "setLatestActivityTimestamp:", *(double *)(a1 + 48));
    objc_msgSend(v2, "setLatestActivityType:", 1);
  }

}

void sub_1002168C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  if (a15 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

id sub_100216968(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  void *__p[2];
  char v6;
  void **v7;

  v2 = *(_QWORD *)(a1 + 32) + 56;
  sub_10000BF04(__p, "peerHangupReceived");
  v7 = __p;
  v3 = sub_1002175EC(v2, (unsigned __int8 *)__p, (uint64_t)&unk_100472CF8, (__int128 **)&v7);
  ++v3[5];
  if (v6 < 0)
    operator delete(__p[0]);
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "removeObjectForKey:", *(_QWORD *)(a1 + 40));
}

void sub_1002169F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100216AC4(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  void *v4;
  void *__p[2];
  char v6;
  void **v7;

  v2 = a1[4] + 56;
  sub_10000BF04(__p, "isTrackingPeer:");
  v7 = __p;
  v3 = sub_1002175EC(v2, (unsigned __int8 *)__p, (uint64_t)&unk_100472CF8, (__int128 **)&v7);
  ++v3[5];
  if (v6 < 0)
    operator delete(__p[0]);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1[4] + 8), "objectForKey:", a1[5]));
  *(_BYTE *)(*(_QWORD *)(a1[6] + 8) + 24) = v4 != 0;

}

void sub_100216B70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100216D08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_100216DA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

id sub_100216DE0(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "peerInactivityPeriodExceeded:", *(_QWORD *)(a1 + 40));
}

void sub_100216DEC(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 96));
  objc_msgSend(WeakRetained, "lifecycleTimeoutBeforeTrackingForDiscoveryToken:", *(_QWORD *)(a1 + 40));

}

void sub_100216E2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

id sub_100216E40(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "peerInactivityPeriodExceeded:", *(_QWORD *)(a1 + 40));
}

void sub_100216E4C(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 96));
  objc_msgSend(WeakRetained, "lifecycleTimeoutAfterTrackingForDiscoveryToken:", *(_QWORD *)(a1 + 40));

}

void sub_100216E8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

id sub_100216EA0(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "cycleElapsed");
}

id sub_100216EA8(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_watchdogLoop");
}

void sub_100216EE4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_100216FD8(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 24) = *(_BYTE *)(*(_QWORD *)(result + 32) + 48);
  return result;
}

uint64_t sub_1002170A8(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 24) = *(_BYTE *)(*(_QWORD *)(result + 32) + 49);
  return result;
}

uint64_t sub_100217178(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 24) = *(_BYTE *)(*(_QWORD *)(result + 32) + 50);
  return result;
}

uint64_t sub_100217248(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 24) = *(_BYTE *)(*(_QWORD *)(result + 32) + 51);
  return result;
}

uint64_t sub_100217318(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 24) = *(_BYTE *)(*(_QWORD *)(result + 32) + 52);
  return result;
}

void sub_100217434(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_1002175A8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void *sub_1002175EC(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  void **v14;
  void *i;
  unint64_t v16;
  _QWORD *v17;
  __int128 *v18;
  __int128 v19;
  float v20;
  float v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  size_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;

  v8 = (_QWORD *)(a1 + 24);
  v9 = sub_10003AAC4(a1 + 24, (uint64_t)a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(void **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((sub_10003AF6C(a1 + 32, (unsigned __int8 *)i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  v17 = (_QWORD *)(a1 + 16);
  i = operator new(0x30uLL);
  *(_QWORD *)i = 0;
  *((_QWORD *)i + 1) = v10;
  v18 = *a4;
  v19 = **a4;
  *((_QWORD *)i + 4) = *((_QWORD *)*a4 + 2);
  *((_OWORD *)i + 1) = v19;
  *((_QWORD *)v18 + 1) = 0;
  *((_QWORD *)v18 + 2) = 0;
  *(_QWORD *)v18 = 0;
  *((_QWORD *)i + 5) = 0;
  v20 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v21 = *(float *)(a1 + 32);
  if (!v11 || (float)(v21 * (float)v11) < v20)
  {
    v22 = 1;
    if (v11 >= 3)
      v22 = (v11 & (v11 - 1)) != 0;
    v23 = v22 | (2 * v11);
    v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24)
      v25 = v24;
    else
      v25 = v23;
    sub_10002A900(a1, v25);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v26 = *(_QWORD *)a1;
  v27 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v27)
  {
    *(_QWORD *)i = *v27;
LABEL_38:
    *v27 = i;
    goto LABEL_39;
  }
  *(_QWORD *)i = *v17;
  *v17 = i;
  *(_QWORD *)(v26 + 8 * v4) = v17;
  if (*(_QWORD *)i)
  {
    v28 = *(_QWORD *)(*(_QWORD *)i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v28 >= v11)
        v28 %= v11;
    }
    else
    {
      v28 &= v11 - 1;
    }
    v27 = (_QWORD *)(*(_QWORD *)a1 + 8 * v28);
    goto LABEL_38;
  }
LABEL_39:
  ++*v8;
  return i;
}

void sub_100217858(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void **v10;
  uint64_t v11;

  sub_10003B010(v11, v10);
  _Unwind_Resume(a1);
}

void sub_1002178EC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1002179D0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100217A78(uint64_t a1)
{
  id v1;
  void *v2;

  v1 = objc_msgSend(objc_alloc(*(Class *)(a1 + 32)), "_initInternal");
  v2 = (void *)qword_100859148;
  qword_100859148 = (uint64_t)v1;

}

void sub_100217B30(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100217F04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, os_unfair_lock_t lock)
{
  void *v9;
  void *v10;

  os_unfair_lock_unlock(lock);
  _Unwind_Resume(a1);
}

id sub_100217F64(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "payloadDidChange");
}

id sub_100217F6C(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "payloadDidChange");
}

void sub_1002181D0(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;
  void *v2;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_100218234(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;
  void *v2;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_10021838C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1002184FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_10021860C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_10021885C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_100218AD8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_100218C2C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_100218D6C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_100218FE0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_100219098(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_100219298(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1002193FC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100219520(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100219714(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_100219924(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_100219AA8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_100219C4C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_100219DF8(id a1)
{
  uint64_t v1;
  void *v2;
  id v3;

  v3 = (id)objc_claimAutoreleasedReturnValue(+[NSURL fileURLWithPath:](NSURL, "fileURLWithPath:", CFSTR("/System/Library/Frameworks/NearbyInteraction.framework")));
  v1 = objc_claimAutoreleasedReturnValue(+[NSBundle bundleWithURL:](NSBundle, "bundleWithURL:", v3));
  v2 = (void *)qword_100859158;
  qword_100859158 = v1;

}

double sub_10021A2C8(uint64_t a1)
{
  double result;

  *(_BYTE *)(a1 + 136) = 0;
  *(_BYTE *)(a1 + 144) = 0;
  *(_BYTE *)(a1 + 232) = 0;
  *(_BYTE *)(a1 + 240) = 0;
  *(_BYTE *)(a1 + 256) = 0;
  *(_BYTE *)(a1 + 264) = 0;
  *(_BYTE *)(a1 + 280) = 0;
  *(_BYTE *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 328) = 0;
  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_BYTE *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 296) = 0;
  *(_BYTE *)(a1 + 304) = 0;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  return result;
}

std::string *sub_10021A314(std::string *this, const std::string *__str, double a3)
{
  *(double *)&this[12].__r_.__value_.__l.__data_ = a3;
  *(double *)&this[16].__r_.__value_.__l.__data_ = a3;
  return std::string::operator=(this, __str);
}

uint64_t sub_10021A320(std::string *a1, const std::string *a2)
{
  if (!a1[9].__r_.__value_.__s.__data_[16])
  {
    sub_10021A368((uint64_t)&a1[6], (uint64_t)a2);
    std::string::operator=(a1 + 1, a2 + 1);
  }
  return sub_10021A368((uint64_t)&a1[2], (uint64_t)a2);
}

uint64_t sub_10021A368(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  if (*(_BYTE *)(a1 + 88))
  {
    v4 = *(_OWORD *)a2;
    *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
    *(_OWORD *)a1 = v4;
    std::string::operator=((std::string *)(a1 + 24), (const std::string *)(a2 + 24));
    if (a1 != a2)
      sub_10019E578((_QWORD *)(a1 + 48), *(char **)(a2 + 48), *(char **)(a2 + 56), *(_QWORD *)(a2 + 56) - *(_QWORD *)(a2 + 48));
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  }
  else
  {
    sub_10021ADD0(a1, (__int128 *)a2);
    *(_BYTE *)(a1 + 88) = 1;
  }
  return a1;
}

__n128 sub_10021A3E8(__n128 *a1, __n128 result, double a3)
{
  if (!a1[17].n128_u8[8])
    a1[17].n128_u8[8] = 1;
  a1[16].n128_f64[1] = a3;
  a1[17].n128_u32[0] = result.n128_u32[0];
  if (!a1[16].n128_u8[0])
  {
    result = *(__n128 *)((char *)a1 + 264);
    a1[15] = result;
    a1[16].n128_u8[0] = 1;
  }
  return result;
}

uint64_t sub_10021A424(uint64_t result, uint64_t a2, uint64_t a3, double a4)
{
  double *v4;

  switch(a3)
  {
    case 0:
      *(double *)(result + 376) = *(double *)(result + 376) + a4 - *(double *)(result + 288);
      if (a2 < 0)
        goto LABEL_9;
      goto LABEL_11;
    case 1:
      v4 = (double *)(result + 352);
      goto LABEL_7;
    case 4:
      v4 = (double *)(result + 360);
      goto LABEL_7;
    case 5:
      v4 = (double *)(result + 368);
LABEL_7:
      *v4 = *v4 + a4 - *(double *)(result + 384);
      break;
    default:
      break;
  }
  if (a2 >= a3)
    ++*(_DWORD *)(result + 332);
  else
LABEL_9:
    ++*(_DWORD *)(result + 328);
LABEL_11:
  if (a2 == 1 && *(double *)(result + 344) == 0.0)
    *(double *)(result + 344) = a4 - *(double *)(result + 288);
  *(_QWORD *)(result + 336) = a2;
  *(double *)(result + 384) = a4;
  return result;
}

void sub_10021A4D8(uint64_t a1, double a2)
{
  double *v3;

  switch(*(_QWORD *)(a1 + 336))
  {
    case 0:
      v3 = (double *)(a1 + 376);
      goto LABEL_6;
    case 1:
      v3 = (double *)(a1 + 352);
      goto LABEL_6;
    case 4:
      v3 = (double *)(a1 + 360);
      goto LABEL_6;
    case 5:
      v3 = (double *)(a1 + 368);
LABEL_6:
      *v3 = *v3 + a2 - *(double *)(a1 + 384);
      break;
    default:
      break;
  }
  *(double *)(a1 + 296) = a2;
  sub_10021A558(a1);
  sub_10021AA28(a1);
}

void sub_10021A558(uint64_t a1)
{
  id v2;
  double v3;
  void *v4;
  double v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  _QWORD *v17;
  _QWORD *v18;
  void *v19;
  void *v20;
  void *v21;
  __CFString *v22;
  id v23;
  NSObject *v24;
  id v25;
  id v26;
  void **v27;
  uint64_t v28;
  id (*v29)(uint64_t);
  void *v30;
  id v31;
  uint8_t buf[4];
  id v33;

  v2 = objc_msgSend((id)qword_10085FC20, "mutableCopy");
  if (*(_BYTE *)(a1 + 280) && *(_BYTE *)(a1 + 256))
  {
    LODWORD(v3) = *(_DWORD *)(a1 + 272);
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v3));
    objc_msgSend(v2, "setObject:forKeyedSubscript:", v4, CFSTR("endingBRRMeasurement"));

    if (!*(_BYTE *)(a1 + 256))
      sub_10000BA44();
    LODWORD(v5) = *(_DWORD *)(a1 + 248);
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v5));
    objc_msgSend(v2, "setObject:forKeyedSubscript:", v6, CFSTR("firstBRRMeasurement"));

  }
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 328)));
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v7, CFSTR("numberOfGotCloserRegionTransitions"));

  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 332)));
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v8, CFSTR("numberOfGotFartherRegionTransitions"));

  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(a1 + 296) - *(double *)(a1 + 288)));
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v9, CFSTR("sessionDuration"));

  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(a1 + 376)));
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v10, CFSTR("timeSpentInSearching"));

  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(a1 + 368)));
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v11, CFSTR("timeSpentInFar"));

  v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(a1 + 352)));
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v12, CFSTR("timeSpentInHere"));

  v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(a1 + 360)));
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v13, CFSTR("timeSpentInNear"));

  if (*(_BYTE *)(a1 + 256))
  {
    v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(a1 + 240) - *(double *)(a1 + 288)));
    objc_msgSend(v2, "setObject:forKeyedSubscript:", v14, CFSTR("timeToFirstBRRMeasurement"));

  }
  if (*(_BYTE *)(a1 + 232))
  {
    v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(a1 + 144) - *(double *)(a1 + 288)));
    objc_msgSend(v2, "setObject:forKeyedSubscript:", v15, CFSTR("timeToFirstBTSample"));

  }
  v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(a1 + 344)));
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v16, CFSTR("timeToHere"));

  v17 = (_QWORD *)(a1 + 24);
  v18 = (_QWORD *)(a1 + 24);
  if (*(char *)(a1 + 47) < 0)
    v18 = (_QWORD *)*v17;
  v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v18));
  v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(&off_10082C378, "objectForKeyedSubscript:", v19));
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v20, CFSTR("advertiserEnum"));

  if (*(char *)(a1 + 47) < 0)
    v17 = (_QWORD *)*v17;
  v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v17));
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v21, CFSTR("advertiserString"));

  v22 = off_100852BA8;
  v27 = _NSConcreteStackBlock;
  v28 = 3221225472;
  v29 = sub_10021AAD8;
  v30 = &unk_10080F3F8;
  v23 = v2;
  v31 = v23;
  AnalyticsSendEventLazy(v22, &v27);
  v24 = (id)qword_10085F520;
  if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
  {
    v25 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@"), v23, v27, v28, v29, v30)));
    v26 = objc_msgSend(v25, "UTF8String");
    *(_DWORD *)buf = 136315138;
    v33 = v26;
    _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "#ni-ca-devicepresence submitting %s", buf, 0xCu);

  }
}

void sub_10021A98C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_10021AA28(uint64_t a1)
{
  void *v1[2];
  void *__p[2];
  __int128 v3;
  _BYTE v4[96];
  _BYTE v5[144];
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;

  v4[88] = 0;
  v5[0] = 0;
  v5[88] = 0;
  v5[96] = 0;
  v5[112] = 0;
  v5[120] = 0;
  v5[136] = 0;
  v9 = 0;
  *(_OWORD *)v1 = 0u;
  *(_OWORD *)__p = 0u;
  v3 = 0u;
  v4[0] = 0;
  v6 = 0;
  v7 = 0;
  v8 = 0;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  sub_10021AAE0(a1, (__int128 *)v1);
  sub_100187E2C((uint64_t)v5);
  sub_100187E2C((uint64_t)v4);
  if (SHIBYTE(v3) < 0)
    operator delete(__p[1]);
  if (SHIBYTE(__p[0]) < 0)
    operator delete(v1[0]);
}

id sub_10021AAD8(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

uint64_t sub_10021AAE0(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  void **v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;

  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  v4 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *((_BYTE *)a2 + 23) = 0;
  *(_BYTE *)a2 = 0;
  v5 = (void **)(a1 + 24);
  if (*(char *)(a1 + 47) < 0)
    operator delete(*v5);
  v6 = *(__int128 *)((char *)a2 + 24);
  *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
  *(_OWORD *)v5 = v6;
  *((_BYTE *)a2 + 47) = 0;
  *((_BYTE *)a2 + 24) = 0;
  sub_10021AC88(a1 + 48, a2 + 3);
  sub_10021AC88(a1 + 144, a2 + 9);
  if (*(unsigned __int8 *)(a1 + 256) == *((unsigned __int8 *)a2 + 256))
  {
    if (*(_BYTE *)(a1 + 256))
    {
      *(_QWORD *)(a1 + 240) = *((_QWORD *)a2 + 30);
      *(_DWORD *)(a1 + 248) = *((_DWORD *)a2 + 62);
    }
  }
  else if (*(_BYTE *)(a1 + 256))
  {
    *(_BYTE *)(a1 + 256) = 0;
  }
  else
  {
    *(_OWORD *)(a1 + 240) = a2[15];
    *(_BYTE *)(a1 + 256) = 1;
  }
  if (*(unsigned __int8 *)(a1 + 280) == *((unsigned __int8 *)a2 + 280))
  {
    if (*(_BYTE *)(a1 + 280))
    {
      *(_QWORD *)(a1 + 264) = *((_QWORD *)a2 + 33);
      *(_DWORD *)(a1 + 272) = *((_DWORD *)a2 + 68);
    }
  }
  else if (*(_BYTE *)(a1 + 280))
  {
    *(_BYTE *)(a1 + 280) = 0;
  }
  else
  {
    *(_OWORD *)(a1 + 264) = *(__int128 *)((char *)a2 + 264);
    *(_BYTE *)(a1 + 280) = 1;
  }
  *(_OWORD *)(a1 + 288) = a2[18];
  if (*(unsigned __int8 *)(a1 + 320) == *((unsigned __int8 *)a2 + 320))
  {
    if (*(_BYTE *)(a1 + 320))
    {
      *(_QWORD *)(a1 + 304) = *((_QWORD *)a2 + 38);
      *(_DWORD *)(a1 + 312) = *((_DWORD *)a2 + 78);
    }
  }
  else if (*(_BYTE *)(a1 + 320))
  {
    *(_BYTE *)(a1 + 320) = 0;
  }
  else
  {
    *(_OWORD *)(a1 + 304) = a2[19];
    *(_BYTE *)(a1 + 320) = 1;
  }
  v7 = *(__int128 *)((char *)a2 + 328);
  v8 = *(__int128 *)((char *)a2 + 344);
  v9 = *(__int128 *)((char *)a2 + 376);
  *(_OWORD *)(a1 + 360) = *(__int128 *)((char *)a2 + 360);
  *(_OWORD *)(a1 + 376) = v9;
  *(_OWORD *)(a1 + 328) = v7;
  *(_OWORD *)(a1 + 344) = v8;
  return a1;
}

__n128 sub_10021AC88(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  void **v5;
  __int128 v6;
  __n128 result;
  __n128 v8;
  __int128 v9;

  if (*(unsigned __int8 *)(a1 + 88) == *((unsigned __int8 *)a2 + 88))
  {
    if (*(_BYTE *)(a1 + 88))
    {
      v4 = *a2;
      *(_DWORD *)(a1 + 16) = *((_DWORD *)a2 + 4);
      *(_OWORD *)a1 = v4;
      v5 = (void **)(a1 + 24);
      if (*(char *)(a1 + 47) < 0)
        operator delete(*v5);
      v6 = *(__int128 *)((char *)a2 + 24);
      *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
      *(_OWORD *)v5 = v6;
      *((_BYTE *)a2 + 47) = 0;
      *((_BYTE *)a2 + 24) = 0;
      sub_10013775C(a1 + 48, (__n128 *)a2 + 3);
      result = *(__n128 *)((char *)a2 + 72);
      *(__n128 *)(a1 + 72) = result;
    }
  }
  else if (*(_BYTE *)(a1 + 88))
  {
    sub_10021AD88(a1);
  }
  else
  {
    v8 = (__n128)*a2;
    *(_DWORD *)(a1 + 16) = *((_DWORD *)a2 + 4);
    *(__n128 *)a1 = v8;
    v9 = *(__int128 *)((char *)a2 + 24);
    *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
    *(_OWORD *)(a1 + 24) = v9;
    *((_QWORD *)a2 + 4) = 0;
    *((_QWORD *)a2 + 5) = 0;
    *((_QWORD *)a2 + 3) = 0;
    *(_QWORD *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = 0;
    *(_OWORD *)(a1 + 48) = a2[3];
    *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 8);
    *((_QWORD *)a2 + 7) = 0;
    *((_QWORD *)a2 + 8) = 0;
    *((_QWORD *)a2 + 6) = 0;
    result = *(__n128 *)((char *)a2 + 72);
    *(__n128 *)(a1 + 72) = result;
    *(_BYTE *)(a1 + 88) = 1;
  }
  return result;
}

void sub_10021AD88(uint64_t a1)
{
  void *v2;

  if (*(_BYTE *)(a1 + 88))
  {
    v2 = *(void **)(a1 + 48);
    if (v2)
    {
      *(_QWORD *)(a1 + 56) = v2;
      operator delete(v2);
    }
    if (*(char *)(a1 + 47) < 0)
      operator delete(*(void **)(a1 + 24));
    *(_BYTE *)(a1 + 88) = 0;
  }
}

uint64_t sub_10021ADD0(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;

  v4 = *a2;
  *(_DWORD *)(a1 + 16) = *((_DWORD *)a2 + 4);
  *(_OWORD *)a1 = v4;
  if (*((char *)a2 + 47) < 0)
  {
    sub_100004678((_BYTE *)(a1 + 24), *((void **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v5 = *(__int128 *)((char *)a2 + 24);
    *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
    *(_OWORD *)(a1 + 24) = v5;
  }
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  sub_1001530EC((_QWORD *)(a1 + 48), *((const void **)a2 + 6), *((_QWORD *)a2 + 7), *((_QWORD *)a2 + 7) - *((_QWORD *)a2 + 6));
  *(_OWORD *)(a1 + 72) = *(__int128 *)((char *)a2 + 72);
  return a1;
}

void sub_10021AE5C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 47) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void sub_10021AE78()
{
  void *v0;
  _OWORD *v6;
  _OWORD *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  __int128 v13;
  double v14[14];
  __int128 v15;
  uint64_t v16;
  _UNKNOWN **v17;
  void *v18;
  _UNKNOWN **v19;
  _UNKNOWN **v20;
  _UNKNOWN **v21;
  _UNKNOWN **v22;
  _UNKNOWN **v23;
  _UNKNOWN **v24;
  _UNKNOWN **v25;
  void *v26;
  void *v27;

  v0 = objc_autoreleasePoolPush();
  v15 = xmmword_100472D64;
  v16 = 0x300000003;
  sub_100182284((uint64_t)&unk_100859168, (int *)&v15, 3);
  xmmword_100859180 = xmmword_10046E050;
  *(_OWORD *)algn_100859190 = xmmword_10046E060;
  qword_1008591A8 = 0;
  unk_1008591B0 = 0;
  qword_1008591A0 = 0x3FD999999999999ALL;
  unk_1008591B8 = xmmword_10046E070;
  dword_1008591C8 = 5;
  qword_1008591D0 = 0x4000000000000000;
  dword_1008591D8 = 5;
  byte_1008591E0 = 0;
  *(_QWORD *)&algn_1008591E1[3] = 0x30000000ALL;
  xmmword_1008591F0 = xmmword_10046E080;
  unk_100859200 = xmmword_10046E090;
  xmmword_100859210 = xmmword_10046E0A0;
  qword_100859220 = 0x3FE3333333333333;
  dword_100859228 = 3;
  xmmword_100859230 = xmmword_10046E0B0;
  unk_100859240 = xmmword_10046E090;
  xmmword_100859250 = xmmword_10046E080;
  qword_100859260 = 0x3FE3333333333333;
  byte_100859268 = 0;
  xmmword_100859270 = xmmword_10046E0C0;
  unk_100859280 = xmmword_10046E0D0;
  __asm { FMOV            V0.2D, #1.0 }
  v13 = _Q0;
  xmmword_100859290 = _Q0;
  qword_1008592A0 = 0xBFD3333333333333;
  xmmword_1008592A8 = xmmword_10046E0E0;
  qword_1008592B8 = 0x3E99999A40000000;
  xmmword_1008592C0 = xmmword_10046E060;
  qword_1008592D8 = 0;
  unk_1008592E0 = 0;
  qword_1008592D0 = 0x3FD999999999999ALL;
  xmmword_1008592E8 = xmmword_10046E070;
  dword_1008592F8 = 5;
  qword_100859300 = 0x4000000000000000;
  dword_100859308 = 4;
  qword_100859310 = 0x300000008;
  qword_100859318 = 0xC04E800000000000;
  v14[0] = -61.0;
  sub_10018252C((uint64_t)&unk_100859320, v14, 1);
  xmmword_100859338 = xmmword_10046E0F0;
  qword_100859348 = 0x4024000000000000;
  dword_100859350 = 45;
  byte_100859354 = 0;
  dword_100859358 = 1;
  byte_100859360 = 1;
  xmmword_100859368 = xmmword_10046E100;
  unk_100859378 = xmmword_10046E110;
  xmmword_100859388 = v13;
  qword_100859398 = 0xC059000000000000;
  xmmword_1008593A0 = xmmword_10046E120;
  qword_1008593B0 = (uint64_t)vdup_n_s32(0x3DCCCCCDu);
  xmmword_1008593B8 = xmmword_10046E060;
  qword_1008593C8 = 0x3FD999999999999ALL;
  qword_1008593D8 = 0;
  qword_1008593D0 = 0;
  xmmword_1008593E0 = xmmword_10046E070;
  dword_1008593F0 = 5;
  qword_1008593F8 = 0x4000000000000000;
  dword_100859400 = 10;
  qword_100859408 = 0x4034000000000000;
  dword_100859410 = 3;
  xmmword_100859418 = xmmword_10046E130;
  __cxa_atexit((void (*)(void *))sub_100180704, &unk_100859168, (void *)&_mh_execute_header);
  qword_100859430 = 0;
  unk_100859438 = 0;
  qword_100859428 = 0;
  v6 = operator new(0x40uLL);
  qword_100859430 = (uint64_t)(v6 + 4);
  unk_100859438 = v6 + 4;
  *v6 = xmmword_100472D80;
  v6[1] = unk_100472D90;
  v6[2] = xmmword_100472DA0;
  v6[3] = unk_100472DB0;
  qword_100859428 = (uint64_t)v6;
  __cxa_atexit((void (*)(void *))sub_1000325D8, &qword_100859428, (void *)&_mh_execute_header);
  qword_100859448 = 0;
  unk_100859450 = 0;
  qword_100859440 = 0;
  v7 = operator new(0x10uLL);
  qword_100859448 = (uint64_t)(v7 + 1);
  unk_100859450 = v7 + 1;
  *v7 = xmmword_100472DC0;
  qword_100859440 = (uint64_t)v7;
  __cxa_atexit((void (*)(void *))sub_1000325D8, &qword_100859440, (void *)&_mh_execute_header);
  *(_QWORD *)&v14[0] = CFSTR("endingBRRMeasurement");
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](NSNull, "null"));
  *(_QWORD *)&v15 = v8;
  *(_QWORD *)&v14[1] = CFSTR("firstBRRMeasurement");
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](NSNull, "null"));
  *((_QWORD *)&v15 + 1) = v9;
  *(_QWORD *)&v14[2] = CFSTR("numberOfGotCloserRegionTransitions");
  *(_QWORD *)&v14[3] = CFSTR("numberOfGotFartherRegionTransitions");
  v16 = (uint64_t)&off_10082C058;
  v17 = &off_10082C058;
  *(_QWORD *)&v14[4] = CFSTR("sessionDuration");
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](NSNull, "null"));
  v18 = v10;
  v19 = &off_10082C058;
  *(_QWORD *)&v14[5] = CFSTR("timeSpentInFar");
  *(_QWORD *)&v14[6] = CFSTR("timeSpentInHere");
  v20 = &off_10082C058;
  v21 = &off_10082C058;
  *(_QWORD *)&v14[7] = CFSTR("timeSpentInNear");
  *(_QWORD *)&v14[8] = CFSTR("timeSpentInSearching");
  v22 = &off_10082C058;
  v23 = &off_10082C058;
  *(_QWORD *)&v14[9] = CFSTR("timeToFirstBRRMeasurement");
  *(_QWORD *)&v14[10] = CFSTR("timeToFirstBTSample");
  v24 = &off_10082C058;
  v25 = &off_10082C058;
  *(_QWORD *)&v14[11] = CFSTR("timeToHere");
  *(_QWORD *)&v14[12] = CFSTR("advertiserEnum");
  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](NSNull, "null"));
  v26 = v11;
  *(_QWORD *)&v14[13] = CFSTR("advertiserString");
  v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](NSNull, "null"));
  v27 = v12;
  qword_10085FC20 = objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v15, v14, 14));

  objc_autoreleasePoolPop(v0);
}

void sub_10021B328(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

_QWORD *sub_10021B384@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, off_10080F9E8[a1]);
}

_QWORD *sub_10021B398@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, off_10080FA40[a1]);
}

_QWORD *sub_10021B3AC@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, off_10080FA88[a1]);
}

_QWORD *sub_10021B3C0@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, off_10080FAA8[a1]);
}

void sub_10021B6B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_10021B6D8(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  if (qword_100852C10 != -1)
    dispatch_once(&qword_100852C10, &stru_10080F5E0);
  *(_BYTE *)a1 = byte_100852C18;
  v2 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;

  v3 = *(void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;

  *(_BYTE *)(a1 + 24) = 0;
  v4 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;

  v5 = *(void **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;

  *(_DWORD *)(a1 + 48) = 0;
}

void sub_10021C47C(_Unwind_Exception *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  void *v13;
  void *v14;
  void *v15;
  va_list va;

  va_start(va, a13);

  sub_10001AE68((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10021CC70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  void *v5;
  void *v6;
  void *v7;
  va_list va;

  va_start(va, a5);

  sub_10001AE68((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10021CEB4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_10021D08C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_10021D3D4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id sub_10021D3E4(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "didFailMutualAuthWithToken:", *(_QWORD *)(*(_QWORD *)(a1 + 40) + 304));
}

id sub_10021D3F4(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "didFailMutualAuthWithToken:", *(_QWORD *)(*(_QWORD *)(a1 + 40) + 1040));
}

void sub_10021D608(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10021D6C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_10021D8A4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id sub_10021D8D4(unsigned int a1)
{
  if (a1 >= 4)
    return (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Unknown [%d]"), a1));
  else
    return *((id *)&off_10080FAC8 + (char)a1);
}

void sub_10021DBE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22)
{
  void *v22;
  void *v23;

  if (__p)
    operator delete(__p);
  if (a21)
    operator delete(a21);
  _Unwind_Resume(a1);
}

unint64_t sub_10021DC78(uint64_t a1, uint64_t a2)
{
  _WORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  LOWORD(v2) = *(unsigned __int8 *)(a2 + 9);
  if (*(_BYTE *)(a1 + 9))
  {
    if (*(_BYTE *)(a2 + 9))
    {
      if (*(_BYTE *)(a1 + 1))
        v2 = (_WORD *)a1;
      else
        v2 = (_WORD *)a2;
      LOWORD(v2) = *v2;
      if (*(_BYTE *)(a1 + 3))
        v3 = a1;
      else
        v3 = a2;
      LOWORD(v4) = *(_WORD *)(v3 + 2);
      if (*(_BYTE *)(a1 + 5))
        v5 = a1;
      else
        v5 = a2;
      LOWORD(v5) = *(_WORD *)(v5 + 4);
      if (*(_BYTE *)(a1 + 7))
        v6 = a1;
      else
        v6 = a2;
      v7 = *(unsigned __int16 *)(v6 + 6);
    }
    else
    {
      v2 = *(_WORD **)a1;
      v4 = *(_QWORD *)a1 >> 16;
      v5 = HIDWORD(*(_QWORD *)a1);
      v7 = HIWORD(*(_QWORD *)a1);
    }
  }
  else if (*(_BYTE *)(a2 + 9))
  {
    v2 = *(_WORD **)a2;
    v4 = *(_QWORD *)a2 >> 16;
    v5 = HIDWORD(*(_QWORD *)a2);
    v7 = HIWORD(*(_QWORD *)a2);
  }
  else
  {
    v7 = 0;
    LOWORD(v5) = 0;
    LOWORD(v4) = 0;
  }
  return (v7 << 48) | ((unint64_t)(unsigned __int16)v5 << 32) | ((unint64_t)(unsigned __int16)v4 << 16) | (unsigned __int16)v2;
}

void sub_10021E10C(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;
  void *v4;

  v4 = *(void **)(v2 - 88);
  if (v4)
  {
    *(_QWORD *)(v2 - 80) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(a1);
}

id sub_10021E154(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "didReceiveNbammsPeerAlgorithmAidingData:signallingData:token:", a1 + 48, a1 + 224, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 304));
}

id sub_10021E16C(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "didReceiveNbammsPeerAlgorithmAidingData:signallingData:token:", a1 + 48, a1 + 224, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 1040));
}

void sub_10021E6CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  void *v26;
  void *v27;

  _Unwind_Resume(a1);
}

void sub_10021E7B0(_BYTE *a1@<X0>, std::string *a2@<X8>)
{
  char *v4;
  std::string *v5;
  __int128 v6;
  std::string *v7;
  __int128 v8;
  char *v9;
  void **v10;
  std::string::size_type v11;
  std::string *v12;
  __int128 v13;
  std::string *v14;
  __int128 v15;
  char *v16;
  void **v17;
  std::string::size_type v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  __int128 v22;
  char *v23;
  void **v24;
  std::string::size_type v25;
  std::string *v26;
  __int128 v27;
  std::string *v28;
  __int128 v29;
  char *v30;
  void **v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  void *__p[2];
  unsigned __int8 v37;
  void *v38[2];
  unsigned __int8 v39;
  void *v40[2];
  unsigned __int8 v41;
  void *v42[2];
  unsigned __int8 v43;
  std::string v44;
  std::string v45;
  std::string v46;
  std::string v47;
  std::string v48;
  std::string v49;
  std::string v50;
  std::string v51;
  std::string v52;
  std::string v53;

  if (a1[1])
  {
    if (*a1)
      v4 = "Hng:Y";
    else
      v4 = "Hng:N";
  }
  else
  {
    v4 = "Hng:-";
  }
  sub_10000BF04(&v44, v4);
  v5 = std::string::insert(&v44, 0, "[ ");
  v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  v45.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  v7 = std::string::append(&v45, " | ");
  v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  v46.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  if (a1[3])
  {
    if (a1[2])
      v9 = "FrG:Y";
    else
      v9 = "FrG:N";
  }
  else
  {
    v9 = "FrG:-";
  }
  sub_10000BF04(v42, v9);
  if ((v43 & 0x80u) == 0)
    v10 = v42;
  else
    v10 = (void **)v42[0];
  if ((v43 & 0x80u) == 0)
    v11 = v43;
  else
    v11 = (std::string::size_type)v42[1];
  v12 = std::string::append(&v46, (const std::string::value_type *)v10, v11);
  v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v47.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  v14 = std::string::append(&v47, " | ");
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v48.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  if (a1[5])
  {
    if (a1[4])
      v16 = "FeG:Y";
    else
      v16 = "FeG:N";
  }
  else
  {
    v16 = "FeG:-";
  }
  sub_10000BF04(v40, v16);
  if ((v41 & 0x80u) == 0)
    v17 = v40;
  else
    v17 = (void **)v40[0];
  if ((v41 & 0x80u) == 0)
    v18 = v41;
  else
    v18 = (std::string::size_type)v40[1];
  v19 = std::string::append(&v48, (const std::string::value_type *)v17, v18);
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  v49.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  v21 = std::string::append(&v49, " | ");
  v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  v50.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  if (a1[7])
  {
    if (a1[6])
      v23 = "FrU:Y";
    else
      v23 = "FrU:N";
  }
  else
  {
    v23 = "FrU:-";
  }
  sub_10000BF04(v38, v23);
  if ((v39 & 0x80u) == 0)
    v24 = v38;
  else
    v24 = (void **)v38[0];
  if ((v39 & 0x80u) == 0)
    v25 = v39;
  else
    v25 = (std::string::size_type)v38[1];
  v26 = std::string::append(&v50, (const std::string::value_type *)v24, v25);
  v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
  v51.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v27;
  v26->__r_.__value_.__l.__size_ = 0;
  v26->__r_.__value_.__r.__words[2] = 0;
  v26->__r_.__value_.__r.__words[0] = 0;
  v28 = std::string::append(&v51, " | ");
  v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
  v52.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v29;
  v28->__r_.__value_.__l.__size_ = 0;
  v28->__r_.__value_.__r.__words[2] = 0;
  v28->__r_.__value_.__r.__words[0] = 0;
  if (a1[8])
    v30 = "DT:P";
  else
    v30 = "DT:W";
  sub_10000BF04(__p, v30);
  if ((v37 & 0x80u) == 0)
    v31 = __p;
  else
    v31 = (void **)__p[0];
  if ((v37 & 0x80u) == 0)
    v32 = v37;
  else
    v32 = (std::string::size_type)__p[1];
  v33 = std::string::append(&v52, (const std::string::value_type *)v31, v32);
  v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
  v53.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v34;
  v33->__r_.__value_.__l.__size_ = 0;
  v33->__r_.__value_.__r.__words[2] = 0;
  v33->__r_.__value_.__r.__words[0] = 0;
  v35 = std::string::append(&v53, " ]");
  *a2 = *v35;
  v35->__r_.__value_.__l.__size_ = 0;
  v35->__r_.__value_.__r.__words[2] = 0;
  v35->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v53.__r_.__value_.__l.__data_);
  if ((char)v37 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v52.__r_.__value_.__l.__data_);
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v51.__r_.__value_.__l.__data_);
  if ((char)v39 < 0)
    operator delete(v38[0]);
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v50.__r_.__value_.__l.__data_);
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v49.__r_.__value_.__l.__data_);
  if ((char)v41 < 0)
    operator delete(v40[0]);
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v48.__r_.__value_.__l.__data_);
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v47.__r_.__value_.__l.__data_);
  if ((char)v43 < 0)
    operator delete(v42[0]);
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v46.__r_.__value_.__l.__data_);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45.__r_.__value_.__l.__data_);
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v44.__r_.__value_.__l.__data_);
}

void sub_10021EBB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59,uint64_t a60,void *a61,uint64_t a62,int a63)
{
  char a66;
  uint64_t v66;

  if (*(char *)(v66 - 57) < 0)
    operator delete(*(void **)(v66 - 80));
  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v66 - 89) < 0)
    operator delete(*(void **)(v66 - 112));
  if (*(char *)(v66 - 121) < 0)
    operator delete(*(void **)(v66 - 144));
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v66 - 153) < 0)
    operator delete(*(void **)(v66 - 176));
  if (*(char *)(v66 - 185) < 0)
    operator delete(*(void **)(v66 - 208));
  if (a27 < 0)
    operator delete(a22);
  if (a66 < 0)
    operator delete(a61);
  if (a59 < 0)
    operator delete(a54);
  if (a33 < 0)
    operator delete(a28);
  if (a52 < 0)
    operator delete(a47);
  if (a45 < 0)
    operator delete(a40);
  if (a39 < 0)
    operator delete(a34);
  _Unwind_Resume(a1);
}

void sub_10021ECE0()
{
  JUMPOUT(0x10021EC88);
}

void sub_10021ECE8()
{
  JUMPOUT(0x10021EC98);
}

void sub_10021ECF0()
{
  JUMPOUT(0x10021ECA8);
}

void sub_10021ECF8()
{
  JUMPOUT(0x10021ECB8);
}

void sub_10021ED00()
{
  JUMPOUT(0x10021ECC8);
}

id sub_10021ED08(unsigned __int8 *a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __CFString *v8;
  unsigned int v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  __CFString *v13;
  uint64_t v14;
  uint64_t v15;
  __CFString *v16;
  void *v17;
  void *v19;
  __CFString *v20;

  v3 = *a1;
  if (v3 < 0xC && ((0xC7Fu >> v3) & 1) != 0)
    v19 = (void *)*((_QWORD *)&off_10080FAE8 + (char)v3);
  else
    v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Unknown [%d]"), *a1));
  v4 = *((_QWORD *)a1 + 1);
  if (v4)
  {
    v5 = CUPrintNSObjectMasked(*((_QWORD *)a1 + 1), a2);
    v20 = (__CFString *)objc_claimAutoreleasedReturnValue(v5);
  }
  else
  {
    v20 = CFSTR("---------");
  }
  v6 = *((_QWORD *)a1 + 2);
  if (v6)
  {
    v7 = CUPrintNSObjectMasked(*((_QWORD *)a1 + 2), a2);
    v8 = (__CFString *)objc_claimAutoreleasedReturnValue(v7);
  }
  else
  {
    v8 = CFSTR("---------");
  }
  v9 = a1[24];
  if (v9 >= 3)
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Unknown [%d]"), a1[24]));
  else
    v10 = (void *)*((_QWORD *)&off_10080FB48 + (char)v9);
  v11 = *((_QWORD *)a1 + 4);
  if (v11)
  {
    v12 = CUPrintNSObjectMasked(*((_QWORD *)a1 + 4), a2);
    v13 = (__CFString *)objc_claimAutoreleasedReturnValue(v12);
  }
  else
  {
    v13 = CFSTR("---------");
  }
  v14 = *((_QWORD *)a1 + 5);
  if (v14)
  {
    v15 = CUPrintNSObjectMasked(*((_QWORD *)a1 + 5), a2);
    v16 = (__CFString *)objc_claimAutoreleasedReturnValue(v15);
  }
  else
  {
    v16 = CFSTR("---------");
  }
  v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("[ Out:%@ C:%@ R:%@ | In:%@ C:%@ R:%@ | Missed:%-3d ]"), v19, v20, v8, v10, v13, v16, *((unsigned int *)a1 + 12)));
  if (v14)

  if (v11)
  if (v6)

  if (v4)
  return v17;
}

void sub_10021EED0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18)
{
  uint64_t v18;
  uint64_t v19;
  void *v20;

  if (v19)

  if (v18)
  _Unwind_Resume(a1);
}

void sub_10021F0B8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id sub_10021F0C8(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "didReceiveNbammsSessionStatusUpdate:token:", a1 + 48, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 304));
}

id sub_10021F0DC(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "didReceiveNbammsSessionStatusUpdate:token:", a1 + 48, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 1040));
}

void sub_10021F570(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, id a13)
{
  void *v13;
  void *v14;
  uint64_t v15;

  if (LOBYTE(STACK[0x320]))
    sub_1003DFE44((uint64_t)&a9);
  sub_100144868(v15);

  sub_10015154C((uint64_t)&STACK[0xB90]);
  _Unwind_Resume(a1);
}

id sub_10021F634(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "didReceiveNewNbammsSolution:token:", a1 + 48, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 304));
}

void *sub_10021F648(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;

  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 48) = v4;
  sub_10015A39C((_BYTE *)(a1 + 96), a2 + 96);
  sub_100153F08((_BYTE *)(a1 + 656), a2 + 656);
  sub_10015A3F0((__n128 *)(a1 + 808), (__n128 *)(a2 + 808));
  return memcpy((void *)(a1 + 928), (const void *)(a2 + 928), 0x221uLL);
}

void sub_10021F6B4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  if (*(_BYTE *)(v2 + 800))
    sub_1003DFE74(v2);
  sub_100144868(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10021F6E0(uint64_t a1)
{
  void *v2;

  if (*(_BYTE *)(a1 + 920))
  {
    v2 = *(void **)(a1 + 880);
    if (v2)
    {
      *(_QWORD *)(a1 + 888) = v2;
      operator delete(v2);
    }
  }
  if (*(_BYTE *)(a1 + 800))
    sub_10003E3F0(a1 + 672, *(_QWORD **)(a1 + 680));
  return sub_100144868(a1 + 96);
}

id sub_10021F72C(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "didReceiveNewNbammsSolution:token:", a1 + 48, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 1040));
}

void sub_10021FB38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, id a13)
{
  void *v13;
  void *v14;
  uint64_t v15;

  if (LOBYTE(STACK[0x320]))
    sub_1003DFE44((uint64_t)&a9);
  sub_100144868(v15);

  sub_10015154C((uint64_t)&STACK[0xB90]);
  _Unwind_Resume(a1);
}

id sub_10021FBFC(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "didReceiveUnsuccessfulNbammsSolution:token:", a1 + 48, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 304));
}

id sub_10021FC10(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "didReceiveUnsuccessfulNbammsSolution:token:", a1 + 48, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 1040));
}

void sub_10021FF50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_100220388(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id sub_1002203A0(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "didReceiveNbammsPeerAlgorithmAidingData:signallingData:token:", a1 + 48, a1 + 224, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 304));
}

id sub_1002203B8(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "didReceiveNbammsPeerAlgorithmAidingData:signallingData:token:", a1 + 48, a1 + 224, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 1040));
}

void sub_10022052C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id sub_10022053C(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "didInvalidateNbammsSessionWithReason:token:", *(unsigned int *)(a1 + 48), *(_QWORD *)(*(_QWORD *)(a1 + 40) + 304));
}

id sub_100220550(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "didInvalidateNbammsSessionWithReason:token:", *(unsigned int *)(a1 + 48), *(_QWORD *)(*(_QWORD *)(a1 + 40) + 1040));
}

void sub_1002207F0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_10022095C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_100220EF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45)
{
  void *v45;
  void *v46;

  sub_10001AE68((uint64_t)&a15);
  if (a22 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_100221244(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1002215F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100221A3C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_100221C34(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_100221CC4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100221D28(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100221F84(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id sub_100221F94(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "didFailCryptoWithToken:", *(_QWORD *)(*(_QWORD *)(a1 + 40) + 304));
}

id sub_100221FA4(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "didFailCryptoWithToken:", *(_QWORD *)(*(_QWORD *)(a1 + 40) + 1040));
}

void sub_100222028(uint64_t a1)
{
  void *v2;
  NSObject *v3;
  uint64_t v4;
  _DWORD v5[2];
  __int16 v6;
  uint64_t v7;

  if (+[NIPlatformInfo isInternalBuild](NIPlatformInfo, "isInternalBuild"))
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
    byte_100859538 = objc_msgSend(v2, "BOOLForKey:", CFSTR("FindingDisableCrypto"));

    v3 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
    {
      v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16);
      v5[0] = 67109378;
      v5[1] = byte_100859538;
      v6 = 2112;
      v7 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#find-range,#crypto Disable crypto: %d, %@", (uint8_t *)v5, 0x12u);
    }
  }
  else
  {
    byte_100859538 = 0;
  }
}

void sub_100222130(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002223F8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100222B44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  void *v18;
  void *v19;

  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_100222BA8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = NSRandomData(3, 0);
  v3 = objc_claimAutoreleasedReturnValue(v2);
  v4 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v3;

}

void sub_100222D70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  void *v17;

  sub_10022CEA4((uint64_t)&a9);
  sub_10022CEA4((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_100222DA8(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  unsigned __int8 *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  void *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  void *v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[8];
  __int128 v21;
  char v22;
  __int128 v23;
  int v24;

  v21 = 0uLL;
  v23 = 0uLL;
  sub_10021B6D8((uint64_t)v20);
  v6 = (unsigned __int8 *)(a1 + 11);
  if (a2)
    v6 = (unsigned __int8 *)(a1 + 1);
  v7 = *v6;
  if (a2)
    v8 = a1 + 2;
  else
    v8 = a1 + 12;
  if (a2)
    v9 = a1 + 5;
  else
    v9 = a1 + 15;
  v10 = v7 >> 4;
  v20[0] = v7 >> 4;
  v11 = v7 & 0xF;
  v22 = v11;
  if (v10 > 0xB)
    goto LABEL_18;
  if (((1 << v10) & 0xC03) != 0)
  {
    if (v11 < 3)
      goto LABEL_21;
  }
  else
  {
    if (((1 << v10) & 0x38) != 0)
    {
      v12 = 1;
LABEL_17:
      if (v11 > 2)
        goto LABEL_18;
      v14 = objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", v8, 3));
      v15 = (void *)v21;
      *(_QWORD *)&v21 = v14;

      if (v12)
      {
        v16 = objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", v9, 6));
        v17 = (void *)*((_QWORD *)&v21 + 1);
        *((_QWORD *)&v21 + 1) = v16;

      }
LABEL_21:
      v13 = 0;
      *(_BYTE *)a3 = v20[0];
      *(_BYTE *)(a3 + 24) = v22;
      *(_DWORD *)(a3 + 48) = v24;
      *(_BYTE *)(a3 + 56) = 1;
      v18 = v21;
      v21 = 0u;
      *(_OWORD *)(a3 + 8) = v18;
      v19 = v23;
      v23 = 0u;
      *(_OWORD *)(a3 + 32) = v19;
      goto LABEL_22;
    }
    if (((1 << v10) & 0x44) != 0)
    {
      v12 = 0;
      goto LABEL_17;
    }
  }
LABEL_18:
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 56) = 0;
  v13 = (void *)*((_QWORD *)&v23 + 1);
LABEL_22:

}

void sub_100222F2C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1002237F8((id *)va);
  _Unwind_Resume(a1);
}

void sub_100223364(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002233B4(char *a1)
{
  unsigned int v1;
  char v3;

  v1 = *a1;
  if (v1 >= 7)
  {
    if (v1 == 10)
    {
      v3 = 11;
    }
    else
    {
      if (v1 != 11)
        return;
      sub_100222BA8((uint64_t)a1);
      v3 = 2;
    }
    *a1 = v3;
  }
  else if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
  {
    sub_1003E04EC();
  }
}

void sub_10022342C(uint64_t a1, unsigned int a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  if (a2 >= 7)
  {
    if (a2 - 10 < 2)
    {
      *(_BYTE *)a1 = a2;
      v3 = *(void **)(a1 + 8);
      *(_QWORD *)(a1 + 8) = 0;

      v4 = *(void **)(a1 + 16);
      *(_QWORD *)(a1 + 16) = 0;

      *(_BYTE *)(a1 + 24) = 0;
      v5 = *(void **)(a1 + 32);
      *(_QWORD *)(a1 + 32) = 0;

      v6 = *(void **)(a1 + 40);
      *(_QWORD *)(a1 + 40) = 0;

    }
  }
  else if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
  {
    sub_1003E0518();
  }
}

void sub_1002234C4(_QWORD *a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  id v6;
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;

  v3 = a2;
  v4 = (void *)a1[1];
  if (v4 && a1[4])
  {
    v5 = objc_msgSend(v4, "mutableCopy");
    objc_msgSend(v5, "appendData:", a1[4]);
    v6 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "getIRK")));
    v7 = objc_msgSend(v6, "bytes");
    v8 = objc_retainAutorelease(v5);
    v9 = SipHash(v7, objc_msgSend(v8, "bytes"), objc_msgSend(v8, "length"));

    v12 = v9;
    v10 = objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", &v12, 6));
    v11 = (void *)a1[2];
    a1[2] = v10;

  }
}

void sub_1002235A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id sub_1002235D4(_QWORD *a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  id v6;
  id v7;
  id v8;
  uint64_t v9;
  void *v10;
  id v11;
  uint64_t v13;

  v3 = a2;
  if (a1[1] && (v4 = (void *)a1[4]) != 0 && a1[5])
  {
    v5 = objc_msgSend(v4, "mutableCopy");
    objc_msgSend(v5, "appendData:", a1[1]);
    v6 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "getIRK")));
    v7 = objc_msgSend(v6, "bytes");
    v8 = objc_retainAutorelease(v5);
    v9 = SipHash(v7, objc_msgSend(v8, "bytes"), objc_msgSend(v8, "length"));

    v13 = v9;
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", &v13, 6));
    v11 = objc_msgSend(v10, "isEqualToData:", a1[5]);

  }
  else
  {
    v11 = 0;
  }

  return v11;
}

void sub_1002236D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

BOOL sub_100223708(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unint64_t v4;
  unsigned int v5;
  unint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  unsigned int v13;

  v4 = *((_QWORD *)a1 + 1);
  if (v4 | *((_QWORD *)a2 + 1))
    v5 = objc_msgSend((id)v4, "isEqualToData:") ^ 1;
  else
    v5 = 0;
  v6 = *((_QWORD *)a1 + 2);
  if (v6 | *((_QWORD *)a2 + 2))
    v7 = objc_msgSend((id)v6, "isEqualToData:") ^ 1;
  else
    v7 = 0;
  v8 = *((_QWORD *)a1 + 4);
  if (v8 | *((_QWORD *)a2 + 4))
    v9 = objc_msgSend((id)v8, "isEqualToData:") ^ 1;
  else
    v9 = 0;
  v10 = *((_QWORD *)a1 + 5);
  v11 = v10 | *((_QWORD *)a2 + 5);
  if (v11)
    LODWORD(v11) = objc_msgSend((id)v10, "isEqualToData:") ^ 1;
  if (*a1 == *a2)
    v12 = v5;
  else
    v12 = 1;
  if (((v12 | v7) & 1) != 0)
    return 0;
  v13 = a1[24] == a2[24] ? v9 : 1;
  return ((v13 | v11) & 1) == 0 && *((_DWORD *)a1 + 12) == *((_DWORD *)a2 + 12);
}

id *sub_1002237F8(id *a1)
{

  return a1;
}

void sub_100223AE0(uint64_t a1)
{
  id WeakRetained;
  id v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v3 = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 240));

    if (v3)
    {
      v4 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
      {
        v5 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16);
        v8 = 138412290;
        v9 = v5;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#find-range,Finder mutual-auth timer fires, failed mutual-auth, session %@", (uint8_t *)&v8, 0xCu);
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 32) + 296) = 50;
      *(_BYTE *)(*(_QWORD *)(a1 + 32) + 248) = 6;
      v6 = *(_QWORD *)(a1 + 32);
      v7 = *(_QWORD *)(v6 + 1904);
      if (v7)
        (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD))(v7 + 16))(v7, v6, *(_QWORD *)(v6 + 304), *(unsigned __int8 *)(a1 + 48), 0);
    }
  }

}

void sub_100223BF4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100223C0C(uint64_t a1)
{
  id WeakRetained;
  id v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v3 = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 976));

    if (v3)
    {
      v4 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
      {
        v5 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16);
        v8 = 138412290;
        v9 = v5;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#find-range,Findee mutual-auth timer fires, failed mutual-auth, session %@", (uint8_t *)&v8, 0xCu);
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 32) + 1032) = 50;
      *(_BYTE *)(*(_QWORD *)(a1 + 32) + 984) = 6;
      v6 = *(_QWORD *)(a1 + 32);
      v7 = *(_QWORD *)(v6 + 1904);
      if (v7)
        (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD))(v7 + 16))(v7, v6, *(_QWORD *)(v6 + 1040), *(unsigned __int8 *)(a1 + 48), 0);
    }
  }

}

void sub_100223D20(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100224158(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  void *v21;

  _Unwind_Resume(a1);
}

void sub_1002241A8(uint64_t a1, void *a2, int a3)
{
  id v5;
  id WeakRetained;
  void *v7;
  NSObject *v8;
  _QWORD block[4];
  id v10;
  id v11;
  int v12;

  v5 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v7 = WeakRetained;
  if (WeakRetained)
  {
    v8 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 40);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10022425C;
    block[3] = &unk_10080F4A8;
    v10 = WeakRetained;
    v11 = v5;
    v12 = a3;
    dispatch_async(v8, block);

  }
}

id sub_10022425C(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "session:updateState:", *(_QWORD *)(a1 + 40), *(unsigned int *)(a1 + 48));
}

void sub_10022426C(uint64_t a1, void *a2, void *a3, char a4, char a5)
{
  id v9;
  id v10;
  id WeakRetained;
  void *v12;
  NSObject *v13;
  _QWORD v14[4];
  id v15;
  id v16;
  id v17;
  char v18;
  char v19;

  v9 = a2;
  v10 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v12 = WeakRetained;
  if (WeakRetained)
  {
    v13 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 40);
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    v14[2] = sub_100224350;
    v14[3] = &unk_10080F520;
    v15 = WeakRetained;
    v16 = v9;
    v17 = v10;
    v18 = a4;
    v19 = a5;
    dispatch_async(v13, v14);

  }
}

id sub_100224350(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "mutualAuthUpdateForSession:token:isFinder:result:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(unsigned __int8 *)(a1 + 56), *(unsigned __int8 *)(a1 + 57));
}

void sub_1002243DC(uint64_t a1)
{
  id v1;
  void *v2;

  v1 = objc_alloc_init(*(Class *)(a1 + 32));
  v2 = (void *)qword_100859540;
  qword_100859540 = (uint64_t)v1;

}

void sub_100224654(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t sub_10022467C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_10022468C(uint64_t a1)
{

}

void sub_100224694(uint64_t a1)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  id v5;
  unsigned int v6;
  uint64_t v7;
  id v8;
  int v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  NSMutableArray *v14;
  int v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  NSMutableArray *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  unsigned int v30;
  _BYTE *v31;
  BOOL v32;
  int v33;
  id v34;
  int v35;
  void *v36;
  unsigned int v37;
  _BYTE *v38;
  int v39;
  id v40;
  NSObject *v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  void *__p;
  _BYTE *v47;
  uint64_t v48;
  NSErrorUserInfoKey v49;
  const __CFString *v50;
  NSErrorUserInfoKey v51;
  const __CFString *v52;

  if ((objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "sessionRegistered") & 1) == 0
    && (objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "sessionRegistered") & 1) == 0)
  {
    v18 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "registerNBAMMSSessionWithToken:isFinder:client:serviceRequest:startRangingOptions:sharedProtocol:", *(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 84), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(unsigned int *)(a1 + 80)));
    v19 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    v20 = *(void **)(v19 + 40);
    *(_QWORD *)(v19 + 40) = v18;

    objc_msgSend(*(id *)(a1 + 32), "_updateAnalyticsWithSuccessfulRangingRequest");
    return;
  }
  v2 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "sessionRegistered");
  if (v2 != objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "sessionRegistered"))
  {
    v3 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "sessionRegistered");
    v4 = 16;
    if (v3)
      v4 = 8;
    v5 = *(id *)(*(_QWORD *)(a1 + 32) + v4);
    v6 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "sessionRegistered");
    v7 = 8;
    if (v6)
      v7 = 16;
    v8 = *(id *)(*(_QWORD *)(a1 + 32) + v7);
    if (objc_msgSend(v5, "sharedProtocol"))
    {
      if (objc_msgSend(v5, "sharedProtocol") != 1)
        __assert_rtn("-[NIServerFindingNBAMMSSessionManager registerNBAMMSSessionWithToken:isFinder:client:serviceRequest:startRangingOptions:sharedProtocol:]_block_invoke", "NIServerFindingRanging.mm", 2842, "false");
      v9 = *(_DWORD *)(a1 + 80);
      if (v9 != 1)
      {
        if (!v9)
        {
          if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
            sub_1003E0544();
          v51 = NSLocalizedFailureReasonErrorKey;
          v52 = CFSTR("protocol version does not support group finding");
          v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v52, &v51, 1));
          v11 = objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("com.apple.NearbyInteraction"), -10020, v10));
          v12 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
          v13 = *(void **)(v12 + 40);
          *(_QWORD *)(v12 + 40) = v11;

        }
LABEL_25:

        return;
      }
    }
    else
    {
      v22 = *(_DWORD *)(a1 + 80);
      if (v22 != 1)
      {
        if (!v22)
        {
          v23 = objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "registerNBAMMSSessionWithToken:isFinder:client:serviceRequest:startRangingOptions:sharedProtocol:", *(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 84), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), 0));
          v24 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
          v25 = *(void **)(v24 + 40);
          *(_QWORD *)(v24 + 40) = v23;

          v26 = objc_opt_new(NSMutableArray);
          -[NSMutableArray addObject:](v26, "addObject:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8));
          objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "setObject:forKey:", v26, *(_QWORD *)(a1 + 40));

        }
        goto LABEL_25;
      }
    }
    v27 = objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "registerNBAMMSSessionWithToken:isFinder:client:serviceRequest:startRangingOptions:sharedProtocol:", *(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 84), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), 1));
    v28 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    v29 = *(void **)(v28 + 40);
    *(_QWORD *)(v28 + 40) = v27;

    if ((objc_msgSend(*(id *)(a1 + 32), "_isReciprocalFindingPossibleRoleIsFinder:rangingSession:", *(unsigned __int8 *)(a1 + 84), v5) & 1) == 0)objc_msgSend(*(id *)(a1 + 32), "_updateAnalyticsWithSuccessfulRangingRequest");
    goto LABEL_25;
  }
  v14 = objc_opt_new(NSMutableArray);
  v15 = *(_DWORD *)(a1 + 80);
  if (v15 != objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "sharedProtocol"))
  {
    v21 = 0;
    goto LABEL_40;
  }
  v16 = *(_QWORD *)(a1 + 32);
  v17 = *(void **)(v16 + 8);
  if (v17)
  {
    objc_msgSend(v17, "attachedRoles");
    v16 = *(_QWORD *)(a1 + 32);
  }
  else
  {
    __p = 0;
    v47 = 0;
    v48 = 0;
  }
  v30 = objc_msgSend(*(id *)(v16 + 8), "sessionState", __p);
  v31 = __p;
  v32 = v47 - (_BYTE *)__p == 4 && v30 == 2;
  v21 = v32;
  if (!v32)
  {
LABEL_38:
    if (!v31)
      goto LABEL_40;
    goto LABEL_39;
  }
  v33 = *(unsigned __int8 *)(a1 + 84);
  if (v33 != (*(_DWORD *)__p == 0))
  {
    v34 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "registerNBAMMSSessionWithToken:isFinder:client:serviceRequest:startRangingOptions:sharedProtocol:", *(_QWORD *)(a1 + 40), v33 != 0, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(unsigned int *)(a1 + 80));
    -[NSMutableArray addObject:](v14, "addObject:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8));
    v31 = __p;
    goto LABEL_38;
  }
  v21 = 0;
LABEL_39:
  v47 = v31;
  operator delete(v31);
LABEL_40:
  v35 = *(_DWORD *)(a1 + 80);
  if (v35 == objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "sharedProtocol"))
  {
    v36 = *(void **)(*(_QWORD *)(a1 + 32) + 16);
    if (v36)
    {
      objc_msgSend(v36, "attachedRoles");
      v36 = *(void **)(*(_QWORD *)(a1 + 32) + 16);
    }
    else
    {
      __p = 0;
      v47 = 0;
      v48 = 0;
    }
    v37 = objc_msgSend(v36, "sessionState", __p);
    v38 = __p;
    if (v47 - (_BYTE *)__p == 4 && v37 == 2)
    {
      v39 = *(unsigned __int8 *)(a1 + 84);
      if (v39 == (*(_DWORD *)__p == 0))
      {
LABEL_51:
        v47 = v38;
        operator delete(v38);
LABEL_52:
        if ((v21 & 1) == 0)
          goto LABEL_53;
        goto LABEL_44;
      }
      v40 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "registerNBAMMSSessionWithToken:isFinder:client:serviceRequest:startRangingOptions:sharedProtocol:", *(_QWORD *)(a1 + 40), v39 != 0, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(unsigned int *)(a1 + 80));
      -[NSMutableArray addObject:](v14, "addObject:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16));
      LOBYTE(v21) = 1;
      v38 = __p;
    }
    if (!v38)
      goto LABEL_52;
    goto LABEL_51;
  }
  if (!v21)
  {
LABEL_53:
    v41 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__p) = 0;
      _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, "#find-range,Reached maximum NMI sessions", (uint8_t *)&__p, 2u);
    }
    v49 = NSLocalizedFailureReasonErrorKey;
    v50 = CFSTR("Reached maximum NMI sessions");
    v42 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v50, &v49, 1));
    v43 = objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("com.apple.NearbyInteraction"), -10020, v42));
    v44 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    v45 = *(void **)(v44 + 40);
    *(_QWORD *)(v44 + 40) = v43;

    objc_msgSend(*(id *)(a1 + 32), "_updateAnalyticsWithFailedRangingRequestToken:isFinder:", *(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 84));
    goto LABEL_56;
  }
LABEL_44:
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "setObject:forKey:", v14, *(_QWORD *)(a1 + 40));
LABEL_56:

}

void sub_100224C4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_100224D44(uint64_t a1)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  int v5;
  int v6;
  void *v7;
  id v8;
  id v9;
  uint64_t v10;
  void *v11;
  NSObject *v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint8_t buf[4];
  uint64_t v19;
  _BYTE v20[128];

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "removeObjectForKey:", *(_QWORD *)(a1 + 40));
  v2 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "sessionState");
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "unregisterNBAMMSSessionForToken:", *(_QWORD *)(a1 + 40));
  *(_DWORD *)(*(_QWORD *)(a1 + 32) + 24) = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "sessionState");
  v3 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "sessionState");
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "unregisterNBAMMSSessionForToken:", *(_QWORD *)(a1 + 40));
  *(_DWORD *)(*(_QWORD *)(a1 + 32) + 28) = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "sessionState");
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_DWORD *)(v4 + 24);
  if (v2 == v5)
  {
    if (v2)
      return;
    v6 = *(_DWORD *)(v4 + 28);
    if (v3 == v6 || v6)
      return;
  }
  else if (v5 || *(_DWORD *)(v4 + 28))
  {
    return;
  }
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v4 + 64), "descriptions"));
  v16 = 0u;
  v17 = 0u;
  v14 = 0u;
  v15 = 0u;
  v8 = v7;
  v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v14, v20, 16);
  if (v9)
  {
    v10 = *(_QWORD *)v15;
    do
    {
      v11 = 0;
      do
      {
        if (*(_QWORD *)v15 != v10)
          objc_enumerationMutation(v8);
        v12 = qword_10085F520;
        if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
        {
          v13 = *(_QWORD *)(*((_QWORD *)&v14 + 1) + 8 * (_QWORD)v11);
          *(_DWORD *)buf = 138412290;
          v19 = v13;
          _os_log_debug_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "#find-range,GF-CA: %@", buf, 0xCu);
        }
        v11 = (char *)v11 + 1;
      }
      while (v9 != v11);
      v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v14, v20, 16);
    }
    while (v9);
  }

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 64), "submitAnalytics");
}

void sub_100224F5C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id sub_100225004(uint64_t a1)
{
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "refreshRangingForToken:", *(_QWORD *)(a1 + 40));
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "refreshRangingForToken:", *(_QWORD *)(a1 + 40));
}

id sub_1002250C0(_QWORD *a1)
{
  objc_msgSend(*(id *)(a1[4] + 8), "updateAlgorithmAidingData:token:", a1[6], a1[5]);
  return objc_msgSend(*(id *)(a1[4] + 16), "updateAlgorithmAidingData:token:", a1[6], a1[5]);
}

id sub_100225184(_QWORD *a1)
{
  objc_msgSend(*(id *)(a1[4] + 8), "updateSignallingData:token:", a1[6], a1[5]);
  return objc_msgSend(*(id *)(a1[4] + 16), "updateSignallingData:token:", a1[6], a1[5]);
}

id sub_100225248(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_updateAnalyticsWithFailedRangingRequestToken:isFinder:", *(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 48));
}

void sub_100225364(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,id a28)
{
  _Block_object_dispose(&a23, 8);

  _Unwind_Resume(a1);
}

void sub_100225384(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  void *i;
  void *v10;
  NSMutableString *v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  uint64_t v16;
  void *j;
  void *v18;
  void *v19;
  id obj;
  uint64_t v21;
  id v22;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  _BYTE v32[128];
  _BYTE v33[128];

  v1 = a1 + 4;
  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1[4] + 8), "printableState"));
  v3 = *(_QWORD *)(a1[5] + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

  v5 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*v1 + 16), "printableState"));
  v6 = *(_QWORD *)(a1[6] + 8);
  v7 = *(void **)(v6 + 40);
  *(_QWORD *)(v6 + 40) = v5;

  objc_msgSend(*(id *)(*(_QWORD *)(a1[5] + 8) + 40), "addObjectsFromArray:", *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 40));
  objc_msgSend(*(id *)(*(_QWORD *)(a1[5] + 8) + 40), "addObject:", CFSTR("TokensToMutualAuthSessions:"));
  v30 = 0u;
  v31 = 0u;
  v28 = 0u;
  v29 = 0u;
  obj = *(id *)(*v1 + 32);
  v8 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v28, v33, 16);
  if (v8)
  {
    v21 = *(_QWORD *)v29;
    do
    {
      v22 = v8;
      for (i = 0; i != v22; i = (char *)i + 1)
      {
        if (*(_QWORD *)v29 != v21)
          objc_enumerationMutation(obj);
        v10 = *(void **)(*((_QWORD *)&v28 + 1) + 8 * (_QWORD)i);
        v11 = objc_opt_new(NSMutableString);
        v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "descriptionInternal"));
        v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Token %@: "), v12));
        -[NSMutableString appendString:](v11, "appendString:", v13);

        v26 = 0u;
        v27 = 0u;
        v24 = 0u;
        v25 = 0u;
        v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1[4] + 32), "objectForKey:", v10));
        v15 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v24, v32, 16);
        if (v15)
        {
          v16 = *(_QWORD *)v25;
          do
          {
            for (j = 0; j != v15; j = (char *)j + 1)
            {
              if (*(_QWORD *)v25 != v16)
                objc_enumerationMutation(v14);
              v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)&v24 + 1)
                                                                                 + 8 * (_QWORD)j), "identityString"));
              v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("ses-%@ "), v18));
              -[NSMutableString appendString:](v11, "appendString:", v19);

            }
            v15 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v24, v32, 16);
          }
          while (v15);
        }

        objc_msgSend(*(id *)(*(_QWORD *)(a1[5] + 8) + 40), "addObject:", v11);
      }
      v8 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v28, v33, 16);
    }
    while (v8);
  }

}

void sub_100225664(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{

  _Unwind_Resume(a1);
}

void sub_100225B40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_100225CD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

void sub_100225E00(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_100225E44()
{
  JUMPOUT(0x100225E38);
}

void sub_1002260B0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1002261D4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100226438(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_100226540(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100226950(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_100226C54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, char a11)
{
  void *v11;

  if (a10)
    std::__shared_weak_count::__release_weak(a10);

  _Unwind_Resume(a1);
}

void sub_100226E9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  sub_10001AE68((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_100226FA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9, uint64_t a10, uint64_t a11, char a12)
{
  sub_10001AE68((uint64_t)&a12);
  a9.super_class = (Class)NIServerFindingRangingProvider;
  -[_Unwind_Exception dealloc](&a9, "dealloc");
  _Unwind_Resume(a1);
}

void sub_100227228(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_100227810(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_100227AF8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_100227C20(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_100227D38(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_100227E74(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_100228104(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1002281C8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_10022838C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_100228A80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *__p,uint64_t a60,uint64_t a61,char a62,uint64_t a63)
{
  uint64_t a67;
  void *v67;

  _Block_object_dispose(&a62, 8);
  _Unwind_Resume(a1);
}

void sub_100228BC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  id v4;

  v3 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  v4 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("        %@: %@"), a2, a3));
  objc_msgSend(v3, "addObject:");

}

void sub_100228C24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{

  _Unwind_Resume(a1);
}

void sub_100228CCC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_100228D74(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_100228F60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void sub_1002291E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_100229330(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_100229454(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_100229574(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1002297E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  void *v25;

  if (a25 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_100229818(uint64_t a1)
{
  uint64_t v1;
  int v3;
  id v4;
  id v5;
  uint64_t v6;
  void *v7;
  id v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];

  v1 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(v1 + 72))
  {
    v3 = *(_DWORD *)(a1 + 48);
    if ((v3 - 2) >= 3)
    {
      if (v3 == 1)
      {
        _objc_msgSend(*(id *)(a1 + 40), "rangingBecameAvailable");
      }
      else if (!v3)
      {
        sub_1003E09C0();
      }
    }
    else
    {
      v11 = 0u;
      v12 = 0u;
      v9 = 0u;
      v10 = 0u;
      v4 = *(id *)(v1 + 112);
      v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
      if (v5)
      {
        v6 = *(_QWORD *)v10;
        do
        {
          v7 = 0;
          do
          {
            if (*(_QWORD *)v10 != v6)
              objc_enumerationMutation(v4);
            v8 = *(id *)(*((_QWORD *)&v9 + 1) + 8 * (_QWORD)v7);
            objc_msgSend(*(id *)(a1 + 32), "_resetRangingStateForToken:", v8, (_QWORD)v9);
            objc_msgSend(*(id *)(a1 + 40), "didStopRangingWithPeer:", v8);

            v7 = (char *)v7 + 1;
          }
          while (v5 != v7);
          v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
        }
        while (v5);
      }

      objc_msgSend(*(id *)(a1 + 40), "rangingBecameUnavailable");
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
  {
    sub_1003E0994();
  }
}

void sub_1002299C8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100229AD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_10022A994(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_10022B338(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_10022B53C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_10022B674(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_10022B8D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_10022BC00(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_10022BCD4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10022C144(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_guard_abort(&qword_100859558);

  _Unwind_Resume(a1);
}

void sub_10022CC6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_10022CDA4(id a1)
{
  void *v1;
  NSObject *v2;
  _DWORD v3[2];

  if (+[NIPlatformInfo isInternalBuild](NIPlatformInfo, "isInternalBuild"))
  {
    v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
    byte_100852C18 = objc_msgSend(v1, "BOOLForKey:", CFSTR("FindingDisableMutualAuth"));

    v2 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
    {
      v3[0] = 67109120;
      v3[1] = byte_100852C18;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#find-range,#auth Disable mutual auth: %d", (uint8_t *)v3, 8u);
    }
  }
  else
  {
    byte_100852C18 = 0;
  }
}

void sub_10022CE8C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_10022CEA4(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 56))
  {

  }
  return a1;
}

char *sub_10022CEEC(uint64_t a1, char *__dst, char *__src, char *a4, uint64_t a5)
{
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  size_t v15;
  void *v16;
  uint64_t v17;
  char *v18;
  int64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  int64_t v24;
  char v25;
  char *v26;
  char *v27;
  char *v28;
  char v29;
  char *v30;
  char *v31;
  char *v32;
  char v33;
  char *v34;
  char *v35;

  v5 = __dst;
  if (a5 < 1)
    return v5;
  v6 = a5;
  v7 = __src;
  v10 = *(char **)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  if (v9 - (uint64_t)v10 < a5)
  {
    v11 = *(char **)a1;
    v12 = (uint64_t)&v10[a5 - *(_QWORD *)a1];
    if (v12 < 0)
      sub_100026E7C();
    v13 = (char *)(__dst - v11);
    v14 = v9 - (_QWORD)v11;
    if (2 * v14 > v12)
      v12 = 2 * v14;
    if (v14 >= 0x3FFFFFFFFFFFFFFFLL)
      v15 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v15 = v12;
    if (v15)
      v16 = operator new(v15);
    else
      v16 = 0;
    v26 = &v13[(_QWORD)v16];
    v27 = &v13[(_QWORD)v16 + v6];
    v28 = v26;
    do
    {
      v29 = *v7++;
      *v28++ = v29;
      --v6;
    }
    while (v6);
    v30 = *(char **)a1;
    if (*(char **)a1 == v5)
    {
      v32 = v26;
    }
    else
    {
      v31 = v5;
      v32 = v26;
      do
      {
        v33 = *--v31;
        *--v32 = v33;
      }
      while (v31 != v30);
      v10 = *(char **)(a1 + 8);
    }
    v34 = (char *)v16 + v15;
    if (v10 != v5)
      memmove(v27, v5, v10 - v5);
    v35 = *(char **)a1;
    *(_QWORD *)a1 = v32;
    *(_QWORD *)(a1 + 8) = &v27[v10 - v5];
    *(_QWORD *)(a1 + 16) = v34;
    if (v35)
      operator delete(v35);
    return v26;
  }
  v17 = v10 - __dst;
  if (v10 - __dst >= a5)
  {
    v18 = &__src[a5];
    v20 = *(char **)(a1 + 8);
LABEL_17:
    v21 = &v5[v6];
    v22 = &v20[-v6];
    v23 = v20;
    if (&v20[-v6] < v10)
    {
      v24 = &v10[v6] - v20;
      v23 = v20;
      do
      {
        v25 = *v22++;
        *v23++ = v25;
        --v24;
      }
      while (v24);
    }
    *(_QWORD *)(a1 + 8) = v23;
    if (v20 != v21)
      memmove(&v5[v6], v5, v20 - v21);
    if (v18 != v7)
      memmove(v5, v7, v18 - v7);
    return v5;
  }
  v18 = &__src[v17];
  v19 = a4 - &__src[v17];
  if (a4 != &__src[v17])
    memmove(*(void **)(a1 + 8), &__src[v17], a4 - &__src[v17]);
  v20 = &v10[v19];
  *(_QWORD *)(a1 + 8) = &v10[v19];
  if (v17 >= 1)
    goto LABEL_17;
  return v5;
}

_QWORD *sub_10022D0C8(_QWORD *result, const void *a2, uint64_t a3, size_t __sz)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (__sz)
  {
    v6 = result;
    result = sub_10002D7AC(result, __sz);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_10022D124(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_10022D140(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10080F610;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10022D150(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10080F610;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_10022D180(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_10022D190(uint64_t a1)
{

  return a1;
}

void sub_10022D1B8(uint64_t a1)
{

  operator delete();
}

_QWORD *sub_10022D1F0(uint64_t a1)
{
  _QWORD *v2;

  v2 = operator new(0x10uLL);
  *v2 = off_10080F660;
  v2[1] = *(id *)(a1 + 8);
  return v2;
}

id sub_10022D234(uint64_t a1, _QWORD *a2)
{
  id result;

  *a2 = off_10080F660;
  result = *(id *)(a1 + 8);
  a2[1] = result;
  return result;
}

void sub_10022D268(uint64_t a1)
{

}

void sub_10022D270(id *a1)
{

  operator delete(a1);
}

void sub_10022D298(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD block[6];
  int v10;

  v3 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(NSObject **)(v4 + 8);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10022D388;
  block[3] = &unk_10080B8C0;
  v6 = *a3;
  block[4] = v4;
  block[5] = v6;
  v10 = *((_DWORD *)a3 + 2);
  dispatch_async(v5, block);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

uint64_t sub_10022D340(uint64_t a1, uint64_t a2)
{
  if (sub_10003E27C(a2, (uint64_t)&off_10080F6C0))
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_10022D37C()
{
  return &off_10080F6C0;
}

id sub_10022D388(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_serviceRequestStatusUpdate:", a1 + 40);
}

uint64_t sub_10022D398(uint64_t a1)
{

  return a1;
}

void sub_10022D3C0(uint64_t a1)
{

  operator delete();
}

_QWORD *sub_10022D3F8(uint64_t a1)
{
  _QWORD *v2;

  v2 = operator new(0x10uLL);
  *v2 = off_10080F6E0;
  v2[1] = *(id *)(a1 + 8);
  return v2;
}

id sub_10022D43C(uint64_t a1, _QWORD *a2)
{
  id result;

  *a2 = off_10080F6E0;
  result = *(id *)(a1 + 8);
  a2[1] = result;
  return result;
}

void sub_10022D470(uint64_t a1)
{

}

void sub_10022D478(id *a1)
{

  operator delete(a1);
}

void sub_10022D4A0(uint64_t a1, _QWORD *a2, __int128 *a3)
{
  std::__shared_weak_count *v5;
  __int128 v6;
  uint64_t v7;
  NSObject *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  _QWORD v11[5];
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[560];
  _BYTE v16[16];
  _QWORD *v17[16];
  char v18;
  __n128 v19[4];
  void *__p;
  void *v21;
  char v22;
  _BYTE v23[545];
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _BYTE v27[560];
  _BYTE v28[16];
  _QWORD *v29[16];
  char v30;
  __n128 v31[4];
  void *v32;
  void *v33;
  char v34;
  _BYTE v35[545];

  v5 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  v6 = a3[1];
  v24 = *a3;
  v25 = v6;
  v26 = a3[2];
  sub_10015A39C(v27, (uint64_t)(a3 + 3));
  sub_100153F08(v28, (uint64_t)(a3 + 38));
  sub_10015A3F0(v31, (__n128 *)((char *)a3 + 760));
  memcpy(v35, a3 + 55, sizeof(v35));
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(NSObject **)(v7 + 8);
  v11[1] = 3321888768;
  v14 = v26;
  v13 = v25;
  v11[0] = _NSConcreteStackBlock;
  v11[2] = sub_10022D7D8;
  v11[3] = &unk_10080C5A8;
  v11[4] = v7;
  v12 = v24;
  sub_10015A39C(v15, (uint64_t)v27);
  sub_100153F08(v16, (uint64_t)v28);
  sub_10015A3F0(v19, v31);
  memcpy(v23, v35, sizeof(v23));
  dispatch_async(v8, v11);
  if (v22 && __p)
  {
    v21 = __p;
    operator delete(__p);
  }
  if (v18)
    sub_10003E3F0((uint64_t)v17, v17[1]);
  sub_100144868((uint64_t)v15);
  if (v34 && v32)
  {
    v33 = v32;
    operator delete(v32);
  }
  if (v30)
    sub_10003E3F0((uint64_t)v29, v29[1]);
  sub_100144868((uint64_t)v27);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_10022D6BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__shared_weak_count *v9;
  uint64_t v10;
  uint64_t v11;
  void *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;

  if (LOBYTE(STACK[0x318]))
    sub_1003E0A40((uint64_t)&a9);
  sub_100144868(v11);
  if (LOBYTE(STACK[0x928]))
  {
    v13 = (void *)STACK[0x900];
    if (STACK[0x900])
    {
      STACK[0x908] = (unint64_t)v13;
      operator delete(v13);
    }
  }
  if (LOBYTE(STACK[0x8B0]))
    sub_10003E3F0((uint64_t)&STACK[0x830], (_QWORD *)STACK[0x838]);
  sub_100144868(v10);
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10022D790(uint64_t a1, uint64_t a2)
{
  if (sub_10003E27C(a2, (uint64_t)&off_10080F740))
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_10022D7CC()
{
  return &off_10080F740;
}

id sub_10022D7D8(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_didReceiveNewSolution:", a1 + 40);
}

uint64_t sub_10022D7E8(uint64_t a1)
{

  return a1;
}

void sub_10022D810(uint64_t a1)
{

  operator delete();
}

_QWORD *sub_10022D848(uint64_t a1)
{
  _QWORD *v2;

  v2 = operator new(0x10uLL);
  *v2 = off_10080F760;
  v2[1] = *(id *)(a1 + 8);
  return v2;
}

id sub_10022D88C(uint64_t a1, _QWORD *a2)
{
  id result;

  *a2 = off_10080F760;
  result = *(id *)(a1 + 8);
  a2[1] = result;
  return result;
}

void sub_10022D8C0(uint64_t a1)
{

}

void sub_10022D8C8(id *a1)
{

  operator delete(a1);
}

void sub_10022D8F0(uint64_t a1, _QWORD *a2, __int16 *a3)
{
  std::__shared_weak_count *v5;
  uint64_t v6;
  NSObject *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  _QWORD block[5];
  __int16 v11;
  void *__p;
  void *v13;
  uint64_t v14;
  __int128 v15;
  __int16 v16;
  void *v17;
  _BYTE *v18;
  uint64_t v19;
  __int128 v20;

  v5 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  v16 = *a3;
  v18 = 0;
  v19 = 0;
  v17 = 0;
  sub_1001530EC(&v17, *((const void **)a3 + 1), *((_QWORD *)a3 + 2), *((_QWORD *)a3 + 2) - *((_QWORD *)a3 + 1));
  v20 = *((_OWORD *)a3 + 2);
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(NSObject **)(v6 + 8);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3321888768;
  block[2] = sub_10022DABC;
  block[3] = &unk_10080C670;
  block[4] = v6;
  v11 = v16;
  v13 = 0;
  v14 = 0;
  __p = 0;
  sub_1001530EC(&__p, v17, (uint64_t)v18, v18 - (_BYTE *)v17);
  v15 = v20;
  dispatch_async(v7, block);
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
  if (v17)
  {
    v18 = v17;
    operator delete(v17);
  }
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_10022DA1C(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  uint64_t v2;
  void *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v4 = *(void **)(v2 - 72);
  if (v4)
  {
    *(_QWORD *)(v2 - 64) = v4;
    operator delete(v4);
  }
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10022DA74(uint64_t a1, uint64_t a2)
{
  if (sub_10003E27C(a2, (uint64_t)&off_10080F7C0))
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_10022DAB0()
{
  return &off_10080F7C0;
}

id sub_10022DABC(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_didReceivePeerData:", a1 + 40);
}

uint64_t sub_10022DACC(uint64_t a1)
{

  return a1;
}

void sub_10022DAF4(uint64_t a1)
{

  operator delete();
}

_QWORD *sub_10022DB2C(uint64_t a1)
{
  _QWORD *v2;

  v2 = operator new(0x10uLL);
  *v2 = off_10080F7E0;
  v2[1] = *(id *)(a1 + 8);
  return v2;
}

id sub_10022DB70(uint64_t a1, _QWORD *a2)
{
  id result;

  *a2 = off_10080F7E0;
  result = *(id *)(a1 + 8);
  a2[1] = result;
  return result;
}

void sub_10022DBA4(uint64_t a1)
{

}

void sub_10022DBAC(id *a1)
{

  operator delete(a1);
}

void sub_10022DBD4(uint64_t a1, _QWORD *a2, int *a3)
{
  std::__shared_weak_count *v3;
  int v4;
  uint64_t v5;
  NSObject *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v9[5];
  int v10;

  v3 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  v4 = *a3;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(NSObject **)(v5 + 8);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_10022DCC0;
  v9[3] = &unk_10080B978;
  v9[4] = v5;
  v10 = v4;
  dispatch_async(v6, v9);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

uint64_t sub_10022DC78(uint64_t a1, uint64_t a2)
{
  if (sub_10003E27C(a2, (uint64_t)&off_10080F840))
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_10022DCB4()
{
  return &off_10080F840;
}

id sub_10022DCC0(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_didReceiveInvalidation:", *(unsigned int *)(a1 + 40));
}

uint64_t sub_10022DCD0(uint64_t a1)
{

  return a1;
}

void sub_10022DCF8(uint64_t a1)
{

  operator delete();
}

_QWORD *sub_10022DD30(uint64_t a1)
{
  _QWORD *v2;

  v2 = operator new(0x10uLL);
  *v2 = off_10080F860;
  v2[1] = *(id *)(a1 + 8);
  return v2;
}

id sub_10022DD74(uint64_t a1, _QWORD *a2)
{
  id result;

  *a2 = off_10080F860;
  result = *(id *)(a1 + 8);
  a2[1] = result;
  return result;
}

void sub_10022DDA8(uint64_t a1)
{

}

void sub_10022DDB0(id *a1)
{

  operator delete(a1);
}

void sub_10022DDD8(uint64_t a1, _QWORD *a2, __int128 *a3)
{
  std::__shared_weak_count *v5;
  __int128 v6;
  uint64_t v7;
  NSObject *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  _QWORD v11[5];
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[560];
  _BYTE v16[16];
  _QWORD *v17[16];
  char v18;
  __n128 v19[4];
  void *__p;
  void *v21;
  char v22;
  _BYTE v23[545];
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _BYTE v27[560];
  _BYTE v28[16];
  _QWORD *v29[16];
  char v30;
  __n128 v31[4];
  void *v32;
  void *v33;
  char v34;
  _BYTE v35[545];

  v5 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  v6 = a3[1];
  v24 = *a3;
  v25 = v6;
  v26 = a3[2];
  sub_10015A39C(v27, (uint64_t)(a3 + 3));
  sub_100153F08(v28, (uint64_t)(a3 + 38));
  sub_10015A3F0(v31, (__n128 *)((char *)a3 + 760));
  memcpy(v35, a3 + 55, sizeof(v35));
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(NSObject **)(v7 + 8);
  v11[1] = 3321888768;
  v14 = v26;
  v13 = v25;
  v11[0] = _NSConcreteStackBlock;
  v11[2] = sub_10022E110;
  v11[3] = &unk_10080C5A8;
  v11[4] = v7;
  v12 = v24;
  sub_10015A39C(v15, (uint64_t)v27);
  sub_100153F08(v16, (uint64_t)v28);
  sub_10015A3F0(v19, v31);
  memcpy(v23, v35, sizeof(v23));
  dispatch_async(v8, v11);
  if (v22 && __p)
  {
    v21 = __p;
    operator delete(__p);
  }
  if (v18)
    sub_10003E3F0((uint64_t)v17, v17[1]);
  sub_100144868((uint64_t)v15);
  if (v34 && v32)
  {
    v33 = v32;
    operator delete(v32);
  }
  if (v30)
    sub_10003E3F0((uint64_t)v29, v29[1]);
  sub_100144868((uint64_t)v27);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_10022DFF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__shared_weak_count *v9;
  uint64_t v10;
  uint64_t v11;
  void *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;

  if (LOBYTE(STACK[0x318]))
    sub_1003E0A40((uint64_t)&a9);
  sub_100144868(v11);
  if (LOBYTE(STACK[0x928]))
  {
    v13 = (void *)STACK[0x900];
    if (STACK[0x900])
    {
      STACK[0x908] = (unint64_t)v13;
      operator delete(v13);
    }
  }
  if (LOBYTE(STACK[0x8B0]))
    sub_10003E3F0((uint64_t)&STACK[0x830], (_QWORD *)STACK[0x838]);
  sub_100144868(v10);
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10022E0C8(uint64_t a1, uint64_t a2)
{
  if (sub_10003E27C(a2, (uint64_t)&off_10080F8C0))
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_10022E104()
{
  return &off_10080F8C0;
}

id sub_10022E110(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_didReceiveUnsuccessfulSolution:", a1 + 40);
}

void sub_10022E124(uint64_t a1)
{
  sub_1002AE1E0(a1);
  operator delete();
}

uint64_t sub_10022E148(uint64_t a1)
{
  return sub_1002AE1E0(a1 - 8);
}

void sub_10022E150(uint64_t a1)
{
  sub_1002AE1E0(a1 - 8);
  operator delete();
}

void sub_10022E178(_QWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;

  v4 = operator new(0x48uLL);
  sub_10022E1D8(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  sub_10001B020((uint64_t)a2, v4 + 4, (uint64_t)(v4 + 3));
}

void sub_10022E1C4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_10022E1D8(_QWORD *a1, _QWORD *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1007FA3F0;
  sub_1002A0F74(a1 + 3, *a2);
  return a1;
}

void sub_10022E210(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_10022E224(void *a1@<X0>, const char *a2@<X3>, uint8_t *a3@<X4>, NSObject *a4@<X8>)
{
  _os_log_error_impl(a1, a4, OS_LOG_TYPE_ERROR, a2, a3, 0x16u);
}

void sub_10022E234(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  sub_10003E3F0(a2, a1);
}

void sub_10022E23C(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_list va;

  va_start(va, a4);
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, (uint8_t *)va, 8u);
}

void sub_10022E250(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = a1;
}

uint64_t sub_10022E25C(uint64_t result, _QWORD *a2, uint64_t a3, float a4)
{
  int v4;
  _QWORD *v5;

  if (v4 >= 0)
    v5 = a2;
  else
    v5 = (_QWORD *)*a2;
  *(float *)a3 = a4;
  *(_QWORD *)(a3 + 4) = result;
  *(_WORD *)(a3 + 12) = 2080;
  *(_QWORD *)(a3 + 14) = v5;
  return result;
}

uint64_t sub_10022E294(uint64_t result, float a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(float *)a4 = a2;
  *(_QWORD *)(a4 + 4) = result;
  *(_WORD *)(a4 + 12) = 2112;
  *(_QWORD *)(a4 + 14) = v4;
  return result;
}

void sub_10022E2D4(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0x20u);
}

void sub_10022E2E0()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_100850448);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_100850448))
    {
      sub_10000BF04(qword_100850430, "PRRoseProviderNetworkListener");
      __cxa_atexit((void (*)(void *))&std::string::~string, qword_100850430, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_100850448);
    }
  }
}

void sub_10022E35C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_100850448);
  _Unwind_Resume(a1);
}

void sub_10022E374()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_100850468);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_100850468))
    {
      sub_10000BF04(&qword_100850450, "com.apple.nearbyd.accessory.download");
      __cxa_atexit((void (*)(void *))&std::string::~string, &qword_100850450, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_100850468);
    }
  }
}

void sub_10022E3F0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_100850468);
  _Unwind_Resume(a1);
}

void sub_10022E408()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_100850488);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_100850488))
    {
      sub_10000BF04(&qword_100850470, "com.apple.nearbyd.accessory.files");
      __cxa_atexit((void (*)(void *))&std::string::~string, &qword_100850470, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_100850488);
    }
  }
}

void sub_10022E484(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_100850488);
  _Unwind_Resume(a1);
}

void sub_10022E49C()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_1008504A8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1008504A8))
    {
      sub_10000BF04(qword_100850490, "MA_");
      __cxa_atexit((void (*)(void *))&std::string::~string, qword_100850490, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1008504A8);
    }
  }
}

void sub_10022E518(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1008504A8);
  _Unwind_Resume(a1);
}

void sub_10022E530()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_1008504C8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1008504C8))
    {
      sub_10000BF04(qword_1008504B0, "MB_");
      __cxa_atexit((void (*)(void *))&std::string::~string, qword_1008504B0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1008504C8);
    }
  }
}

void sub_10022E5AC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1008504C8);
  _Unwind_Resume(a1);
}

void sub_10022E5C4()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_1008504E8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1008504E8))
    {
      sub_10000BF04(qword_1008504D0, "D");
      __cxa_atexit((void (*)(void *))&std::string::~string, qword_1008504D0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1008504E8);
    }
  }
}

void sub_10022E640(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1008504E8);
  _Unwind_Resume(a1);
}

void sub_10022E658()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_100850508);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_100850508))
    {
      sub_10000BF04(&qword_1008504F0, "A");
      __cxa_atexit((void (*)(void *))&std::string::~string, &qword_1008504F0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_100850508);
    }
  }
}

void sub_10022E6D4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_100850508);
  _Unwind_Resume(a1);
}

void sub_10022E6EC()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_100850528);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_100850528))
    {
      sub_10000BF04(qword_100850510, "FAS.bin");
      __cxa_atexit((void (*)(void *))&std::string::~string, qword_100850510, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_100850528);
    }
  }
}

void sub_10022E768(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_100850528);
  _Unwind_Resume(a1);
}

void sub_10022E780()
{
  unsigned __int8 v0;
  _OWORD *v1;

  v0 = atomic_load((unsigned __int8 *)&qword_100850548);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_100850548))
    {
      qword_100850530 = 0;
      qword_100850538 = 0;
      qword_100850540 = 0;
      v1 = operator new(0x30uLL);
      qword_100850538 = (uint64_t)(v1 + 3);
      qword_100850540 = (uint64_t)(v1 + 3);
      *v1 = xmmword_100472DE8;
      v1[1] = unk_100472DF8;
      v1[2] = xmmword_100472E08;
      qword_100850530 = (uint64_t)v1;
      __cxa_atexit((void (*)(void *))sub_100009C44, &qword_100850530, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_100850548);
    }
  }
}

void sub_10022E820(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_100850548);
  _Unwind_Resume(a1);
}

void sub_10022E838()
{
  void *v0;
  std::string *v1;
  __int128 v2;
  std::string *v3;
  __int128 v4;
  std::string *v5;
  __int128 v6;
  std::string *v7;
  __int128 v8;
  std::string *v9;
  __int128 v10;
  std::string *v11;
  __int128 v12;
  std::string *v13;
  __int128 v14;
  std::string *v15;
  __int128 v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  __int128 v22;
  std::string *v23;
  __int128 v24;
  std::string *v25;
  __int128 v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  __int128 v30;
  std::string *v31;
  __int128 v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  __int128 v36;
  std::string v37;
  std::string v38;

  v0 = objc_autoreleasePoolPush();
  sub_1003610EC(0);
  v1 = std::string::insert(&v37, 0, "reverseLUT_A");
  v2 = *(_OWORD *)&v1->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v1->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v2;
  v1->__r_.__value_.__l.__size_ = 0;
  v1->__r_.__value_.__r.__words[2] = 0;
  v1->__r_.__value_.__r.__words[0] = 0;
  v3 = std::string::append(&v38, ".bin");
  v4 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
  qword_100859468 = v3->__r_.__value_.__r.__words[2];
  xmmword_100859458 = v4;
  v3->__r_.__value_.__l.__size_ = 0;
  v3->__r_.__value_.__r.__words[2] = 0;
  v3->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_100859458, (void *)&_mh_execute_header);
  sub_1003610EC(1);
  v5 = std::string::insert(&v37, 0, "reverseLUT_A");
  v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  v7 = std::string::append(&v38, ".bin");
  v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  qword_100859480 = v7->__r_.__value_.__r.__words[2];
  xmmword_100859470 = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_100859470, (void *)&_mh_execute_header);
  sub_1003610EC(2);
  v9 = std::string::insert(&v37, 0, "reverseLUT_A");
  v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  v11 = std::string::append(&v38, ".bin");
  v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  qword_100859498 = v11->__r_.__value_.__r.__words[2];
  xmmword_100859488 = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_100859488, (void *)&_mh_execute_header);
  sub_1003610EC(3);
  v13 = std::string::insert(&v37, 0, "reverseLUT_A");
  v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  v15 = std::string::append(&v38, ".bin");
  v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  qword_1008594B0 = v15->__r_.__value_.__r.__words[2];
  xmmword_1008594A0 = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1008594A0, (void *)&_mh_execute_header);
  sub_1003610EC(4);
  v17 = std::string::insert(&v37, 0, "reverseLUT_A");
  v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v18;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  v19 = std::string::append(&v38, ".bin");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  qword_1008594C8 = v19->__r_.__value_.__r.__words[2];
  xmmword_1008594B8 = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1008594B8, (void *)&_mh_execute_header);
  sub_1003610EC(5);
  v21 = std::string::insert(&v37, 0, "reverseLUT_A");
  v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  v23 = std::string::append(&v38, ".bin");
  v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  qword_1008594E0 = v23->__r_.__value_.__r.__words[2];
  xmmword_1008594D0 = v24;
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1008594D0, (void *)&_mh_execute_header);
  sub_1003610EC(6);
  v25 = std::string::insert(&v37, 0, "reverseLUT_A");
  v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v26;
  v25->__r_.__value_.__l.__size_ = 0;
  v25->__r_.__value_.__r.__words[2] = 0;
  v25->__r_.__value_.__r.__words[0] = 0;
  v27 = std::string::append(&v38, ".bin");
  v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
  qword_1008594F8 = v27->__r_.__value_.__r.__words[2];
  xmmword_1008594E8 = v28;
  v27->__r_.__value_.__l.__size_ = 0;
  v27->__r_.__value_.__r.__words[2] = 0;
  v27->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1008594E8, (void *)&_mh_execute_header);
  sub_1003610EC(7);
  v29 = std::string::insert(&v37, 0, "reverseLUT_A");
  v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v30;
  v29->__r_.__value_.__l.__size_ = 0;
  v29->__r_.__value_.__r.__words[2] = 0;
  v29->__r_.__value_.__r.__words[0] = 0;
  v31 = std::string::append(&v38, ".bin");
  v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
  qword_100859510 = v31->__r_.__value_.__r.__words[2];
  xmmword_100859500 = v32;
  v31->__r_.__value_.__l.__size_ = 0;
  v31->__r_.__value_.__r.__words[2] = 0;
  v31->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_100859500, (void *)&_mh_execute_header);
  sub_1003610EC(8);
  v33 = std::string::insert(&v37, 0, "reverseLUT_A");
  v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v34;
  v33->__r_.__value_.__l.__size_ = 0;
  v33->__r_.__value_.__r.__words[2] = 0;
  v33->__r_.__value_.__r.__words[0] = 0;
  v35 = std::string::append(&v38, ".bin");
  v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
  qword_100859528 = v35->__r_.__value_.__r.__words[2];
  xmmword_100859518 = v36;
  v35->__r_.__value_.__l.__size_ = 0;
  v35->__r_.__value_.__r.__words[2] = 0;
  v35->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_100859518, (void *)&_mh_execute_header);
  objc_autoreleasePoolPop(v0);
}

void sub_10022EE2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10022EEA0(uint64_t a1)
{
  sub_1001D9568(a1, *(char **)(a1 + 8));
  return a1;
}

uint64_t sub_10022EEC8(uint64_t a1)
{
  sub_10003E3F0(a1 + 16, *(_QWORD **)(a1 + 24));
  return a1;
}

uint64_t sub_10022EEF4(uint64_t a1)
{
  sub_100233268(a1, *(_QWORD **)(a1 + 8));
  return a1;
}

uint64_t sub_10022EF1C(uint64_t a1)
{
  sub_100233AA8(a1, *(_QWORD **)(a1 + 8));
  return a1;
}

uint64_t sub_10022EF44(uint64_t a1)
{
  sub_100233B7C(a1 + 24, *(_QWORD **)(a1 + 32));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_10022EF80(uint64_t a1)
{
  sub_10003E3F0(a1 + 40, *(_QWORD **)(a1 + 48));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_10022EFBC(uint64_t a1)
{
  sub_100234430(a1, *(_QWORD **)(a1 + 8));
  return a1;
}

uint64_t sub_10022EFE4(uint64_t a1)
{
  sub_100234938(a1, *(_QWORD **)(a1 + 8));
  return a1;
}

uint64_t sub_10022F00C(uint64_t a1)
{
  sub_1002332FC(a1 + 24, *(_QWORD **)(a1 + 32));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_10022F048(uint64_t a1)
{
  sub_100234EE4(a1, *(_QWORD **)(a1 + 8));
  return a1;
}

void sub_10022F070(uint64_t a1, uint64_t a2, uint64_t *a3, __int128 *a4, const void **a5, __int128 *a6, __int128 *a7)
{
  uint64_t v13;
  int v14;
  uint64_t *v15;
  int v16;
  BOOL v17;
  uint64_t *v18;
  uint64_t **v19;
  uint64_t *v20;
  _QWORD **v21;
  uint64_t *v22;
  uint64_t v23;
  int v24;
  uint64_t *v25;
  int v26;
  BOOL v27;
  uint64_t *v28;
  uint64_t **v29;
  _QWORD *v30;
  int v31;
  _QWORD **v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD **v35;
  int v36;
  _QWORD *v37;
  uint64_t **v38;
  _QWORD **v39;
  uint64_t *v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  int v53;
  uint64_t *v54;
  int v55;
  BOOL v56;
  uint64_t *v57;
  uint64_t **v58;
  uint64_t *v59;
  _QWORD **v60;
  uint64_t v61;
  int v62;
  uint64_t *v63;
  int v64;
  BOOL v65;
  uint64_t *v66;
  uint64_t **v67;
  uint64_t *v68;
  int v69;
  _QWORD **v70;
  _QWORD *v71;
  _QWORD *v72;
  _QWORD **v73;
  int v74;
  _QWORD *v75;
  uint64_t v76;
  int v77;
  uint64_t *v78;
  int v79;
  BOOL v80;
  uint64_t *v81;
  uint64_t **v82;
  uint64_t *v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  uint64_t *v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  uint64_t *v107;
  _QWORD *v108[2];
  uint64_t *v109;
  _QWORD *v110[2];
  __int128 *v111;

  v13 = qword_10085FC48;
  if (qword_10085FC48)
  {
    v14 = *(_DWORD *)a3;
    v15 = &qword_10085FC48;
    do
    {
      v16 = *(_DWORD *)(v13 + 32);
      v17 = v16 < v14;
      if (v16 >= v14)
        v18 = (uint64_t *)v13;
      else
        v18 = (uint64_t *)(v13 + 8);
      if (!v17)
        v15 = (uint64_t *)v13;
      v13 = *v18;
    }
    while (*v18);
    if (v15 != &qword_10085FC48 && v14 >= *((_DWORD *)v15 + 8))
    {
      v107 = a3;
      v19 = sub_100234F30(&qword_10085FC40, (int *)a3, (uint64_t)&unk_100472CF8, (_DWORD **)&v107);
      sub_10023418C((uint64_t *)&v109, (const void ***)v19 + 5);
      if (v110 != (_QWORD **)sub_100004DF0((uint64_t)&v109, (const void **)a4))
      {
        v111 = a4;
        v20 = sub_100234FFC(&v109, (const void **)a4, (uint64_t)&unk_100472CF8, &v111);
        sub_100233E80((uint64_t *)&v107, (const void ***)v20 + 7);
        v21 = (_QWORD **)sub_100004DF0((uint64_t)&v107, a5);
        if (v108 != v21)
        {
          v111 = (__int128 *)a5;
          v22 = sub_100235138(&v107, a5, (uint64_t)&unk_100472CF8, &v111);
          *(_OWORD *)a2 = *(_OWORD *)(v22 + 7);
          if (v22 + 7 != (uint64_t *)a2)
LABEL_94:
            sub_1002324B8((uint64_t **)(a2 + 16), (_QWORD *)v22[9], v22 + 10);
LABEL_95:
          v84 = *((_OWORD *)v22 + 6);
          v85 = *((_OWORD *)v22 + 7);
          *(_OWORD *)(a2 + 72) = *((_OWORD *)v22 + 8);
          *(_OWORD *)(a2 + 56) = v85;
          *(_OWORD *)(a2 + 40) = v84;
          v86 = *((_OWORD *)v22 + 9);
          v87 = *((_OWORD *)v22 + 10);
          v88 = *((_OWORD *)v22 + 11);
          *(_OWORD *)(a2 + 136) = *((_OWORD *)v22 + 12);
          *(_OWORD *)(a2 + 120) = v88;
          *(_OWORD *)(a2 + 104) = v87;
          *(_OWORD *)(a2 + 88) = v86;
          v89 = *((_OWORD *)v22 + 13);
          v90 = *((_OWORD *)v22 + 14);
          v91 = *((_OWORD *)v22 + 15);
          *(_OWORD *)(a2 + 200) = *((_OWORD *)v22 + 16);
          *(_OWORD *)(a2 + 184) = v91;
          *(_OWORD *)(a2 + 168) = v90;
          *(_OWORD *)(a2 + 152) = v89;
          v92 = *((_OWORD *)v22 + 17);
          v93 = *((_OWORD *)v22 + 18);
          v94 = *((_OWORD *)v22 + 19);
          *(_OWORD *)(a2 + 264) = *((_OWORD *)v22 + 20);
          *(_OWORD *)(a2 + 248) = v94;
          *(_OWORD *)(a2 + 232) = v93;
          *(_OWORD *)(a2 + 216) = v92;
          sub_100233B7C((uint64_t)&v107, v108[0]);
          goto LABEL_96;
        }
        sub_100233B7C((uint64_t)&v107, *v21);
      }
      sub_100233AF4((uint64_t)&v109, v110[0]);
    }
  }
  v23 = qword_10085FC60;
  if (qword_10085FC60)
  {
    v24 = *(_DWORD *)a3;
    v25 = &qword_10085FC60;
    do
    {
      v26 = *(_DWORD *)(v23 + 32);
      v27 = v26 < v24;
      if (v26 >= v24)
        v28 = (uint64_t *)v23;
      else
        v28 = (uint64_t *)(v23 + 8);
      if (!v27)
        v25 = (uint64_t *)v23;
      v23 = *v28;
    }
    while (*v28);
    if (v25 != &qword_10085FC60 && v24 >= *((_DWORD *)v25 + 8))
    {
      v107 = a3;
      v29 = sub_100234F30(&qword_10085FC58, (int *)a3, (uint64_t)&unk_100472CF8, (_DWORD **)&v107);
      sub_100234694((uint64_t *)&v109, (uint64_t)(v29 + 5));
      v30 = v110[0];
      if (v110[0])
      {
        v31 = *(_DWORD *)a6;
        v32 = v110;
        v33 = v110[0];
        do
        {
          v34 = v33;
          v35 = v32;
          v36 = *((_DWORD *)v33 + 8);
          if (v36 >= v31)
            v32 = (_QWORD **)v33;
          else
            ++v33;
          v33 = (_QWORD *)*v33;
        }
        while (v33);
        if (v32 != v110)
        {
          v37 = v36 >= v31 ? v34 : v35;
          if (v31 >= *((_DWORD *)v37 + 8))
          {
            v111 = a6;
            v38 = sub_100234F30(&v109, (int *)a6, (uint64_t)&unk_100472CF8, (_DWORD **)&v111);
            sub_100233E80((uint64_t *)&v107, (const void ***)v38 + 5);
            v39 = (_QWORD **)sub_100004DF0((uint64_t)&v107, a5);
            if (v108 != v39)
            {
              v111 = (__int128 *)a5;
              v40 = sub_100235138(&v107, a5, (uint64_t)&unk_100472CF8, &v111);
              *(_OWORD *)a2 = *(_OWORD *)(v40 + 7);
              if (v40 + 7 != (uint64_t *)a2)
                sub_1002324B8((uint64_t **)(a2 + 16), (_QWORD *)v40[9], v40 + 10);
              v41 = *((_OWORD *)v40 + 6);
              v42 = *((_OWORD *)v40 + 7);
              *(_OWORD *)(a2 + 72) = *((_OWORD *)v40 + 8);
              *(_OWORD *)(a2 + 56) = v42;
              *(_OWORD *)(a2 + 40) = v41;
              v43 = *((_OWORD *)v40 + 9);
              v44 = *((_OWORD *)v40 + 10);
              v45 = *((_OWORD *)v40 + 11);
              *(_OWORD *)(a2 + 136) = *((_OWORD *)v40 + 12);
              *(_OWORD *)(a2 + 120) = v45;
              *(_OWORD *)(a2 + 104) = v44;
              *(_OWORD *)(a2 + 88) = v43;
              v46 = *((_OWORD *)v40 + 13);
              v47 = *((_OWORD *)v40 + 14);
              v48 = *((_OWORD *)v40 + 15);
              *(_OWORD *)(a2 + 200) = *((_OWORD *)v40 + 16);
              *(_OWORD *)(a2 + 184) = v48;
              *(_OWORD *)(a2 + 168) = v47;
              *(_OWORD *)(a2 + 152) = v46;
              v49 = *((_OWORD *)v40 + 17);
              v50 = *((_OWORD *)v40 + 18);
              v51 = *((_OWORD *)v40 + 19);
              *(_OWORD *)(a2 + 264) = *((_OWORD *)v40 + 20);
              *(_OWORD *)(a2 + 248) = v51;
              *(_OWORD *)(a2 + 232) = v50;
              *(_OWORD *)(a2 + 216) = v49;
              sub_100233B7C((uint64_t)&v107, v108[0]);
              sub_10023447C((uint64_t)&v109, v110[0]);
              return;
            }
            sub_100233B7C((uint64_t)&v107, *v39);
            v30 = v110[0];
          }
        }
      }
      sub_10023447C((uint64_t)&v109, v30);
    }
  }
  v52 = qword_10085FC78;
  if (qword_10085FC78)
  {
    v53 = *(_DWORD *)a3;
    v54 = &qword_10085FC78;
    do
    {
      v55 = *(_DWORD *)(v52 + 32);
      v56 = v55 < v53;
      if (v55 >= v53)
        v57 = (uint64_t *)v52;
      else
        v57 = (uint64_t *)(v52 + 8);
      if (!v56)
        v54 = (uint64_t *)v52;
      v52 = *v57;
    }
    while (*v57);
    if (v54 != &qword_10085FC78 && v53 >= *((_DWORD *)v54 + 8))
    {
      v107 = a3;
      v58 = sub_100234F30(&qword_10085FC70, (int *)a3, (uint64_t)&unk_100472CF8, (_DWORD **)&v107);
      sub_10023418C((uint64_t *)&v109, (const void ***)v58 + 5);
      v111 = &qword_100859D48;
      v59 = sub_100234FFC(&v109, (const void **)&qword_100859D48, (uint64_t)&unk_100472CF8, &v111);
      sub_100233E80((uint64_t *)&v107, (const void ***)v59 + 7);
      v60 = (_QWORD **)sub_100004DF0((uint64_t)&v107, a5);
      if (v108 != v60)
      {
        v111 = (__int128 *)a5;
        v22 = sub_100235138(&v107, a5, (uint64_t)&unk_100472CF8, &v111);
        *(_OWORD *)a2 = *(_OWORD *)(v22 + 7);
        if (v22 + 7 != (uint64_t *)a2)
          goto LABEL_94;
        goto LABEL_95;
      }
      sub_100233B7C((uint64_t)&v107, *v60);
      sub_100233AF4((uint64_t)&v109, v110[0]);
    }
  }
  v61 = qword_10085FC90;
  if (qword_10085FC90)
  {
    v62 = *(_DWORD *)a3;
    v63 = &qword_10085FC90;
    do
    {
      v64 = *(_DWORD *)(v61 + 32);
      v65 = v64 < v62;
      if (v64 >= v62)
        v66 = (uint64_t *)v61;
      else
        v66 = (uint64_t *)(v61 + 8);
      if (!v65)
        v63 = (uint64_t *)v61;
      v61 = *v66;
    }
    while (*v66);
    if (v63 != &qword_10085FC90 && v62 >= *((_DWORD *)v63 + 8))
    {
      v107 = a3;
      v67 = sub_100234F30(&qword_10085FC88, (int *)a3, (uint64_t)&unk_100472CF8, (_DWORD **)&v107);
      sub_100234C40((uint64_t *)&v109, (const void ***)v67 + 5);
      if (v110 != (_QWORD **)sub_100004DF0((uint64_t)&v109, (const void **)a4))
      {
        v111 = a4;
        v68 = sub_100235424(&v109, (const void **)a4, (uint64_t)&unk_100472CF8, &v111);
        sub_100233560((uint64_t *)&v107, (uint64_t)(v68 + 7));
        if (v108[0])
        {
          v69 = *(_DWORD *)a7;
          v70 = v108;
          v71 = v108[0];
          do
          {
            v72 = v71;
            v73 = v70;
            v74 = *((_DWORD *)v71 + 8);
            if (v74 >= v69)
              v70 = (_QWORD **)v71;
            else
              ++v71;
            v71 = (_QWORD *)*v71;
          }
          while (v71);
          if (v70 != v108)
          {
            v75 = v74 >= v69 ? v72 : v73;
            if (v69 >= *((_DWORD *)v75 + 8))
            {
              v111 = a7;
              v95 = sub_100235560((uint64_t)&v107, (int *)a7, (uint64_t)&unk_100472CF8, (_DWORD **)&v111);
              *(_OWORD *)a2 = *(_OWORD *)(v95 + 5);
              if (v95 + 5 != (uint64_t *)a2)
                sub_1002324B8((uint64_t **)(a2 + 16), (_QWORD *)v95[7], v95 + 8);
              v96 = *((_OWORD *)v95 + 5);
              v97 = *((_OWORD *)v95 + 6);
              *(_OWORD *)(a2 + 72) = *((_OWORD *)v95 + 7);
              *(_OWORD *)(a2 + 56) = v97;
              *(_OWORD *)(a2 + 40) = v96;
              v98 = *((_OWORD *)v95 + 8);
              v99 = *((_OWORD *)v95 + 9);
              v100 = *((_OWORD *)v95 + 10);
              *(_OWORD *)(a2 + 136) = *((_OWORD *)v95 + 11);
              *(_OWORD *)(a2 + 120) = v100;
              *(_OWORD *)(a2 + 104) = v99;
              *(_OWORD *)(a2 + 88) = v98;
              v101 = *((_OWORD *)v95 + 12);
              v102 = *((_OWORD *)v95 + 13);
              v103 = *((_OWORD *)v95 + 14);
              *(_OWORD *)(a2 + 200) = *((_OWORD *)v95 + 15);
              *(_OWORD *)(a2 + 184) = v103;
              *(_OWORD *)(a2 + 168) = v102;
              *(_OWORD *)(a2 + 152) = v101;
              v104 = *((_OWORD *)v95 + 16);
              v105 = *((_OWORD *)v95 + 17);
              v106 = *((_OWORD *)v95 + 18);
              *(_OWORD *)(a2 + 264) = *((_OWORD *)v95 + 19);
              *(_OWORD *)(a2 + 248) = v106;
              *(_OWORD *)(a2 + 232) = v105;
              *(_OWORD *)(a2 + 216) = v104;
              sub_1002332FC((uint64_t)&v107, v108[0]);
              sub_100234984((uint64_t)&v109, v110[0]);
              return;
            }
          }
        }
        sub_1002332FC((uint64_t)&v107, v108[0]);
      }
      sub_100234984((uint64_t)&v109, v110[0]);
    }
  }
  v76 = qword_10085FCA8;
  if (qword_10085FCA8)
  {
    v77 = *(_DWORD *)a3;
    v78 = &qword_10085FCA8;
    do
    {
      v79 = *(_DWORD *)(v76 + 32);
      v80 = v79 < v77;
      if (v79 >= v77)
        v81 = (uint64_t *)v76;
      else
        v81 = (uint64_t *)(v76 + 8);
      if (!v80)
        v78 = (uint64_t *)v76;
      v76 = *v81;
    }
    while (*v81);
    if (v78 != &qword_10085FCA8 && v77 >= *((_DWORD *)v78 + 8))
    {
      v107 = a3;
      v82 = sub_100234F30(&qword_10085FCA0, (int *)a3, (uint64_t)&unk_100472CF8, (_DWORD **)&v107);
      sub_10023418C((uint64_t *)&v109, (const void ***)v82 + 5);
      if (v110 == (_QWORD **)sub_100004DF0((uint64_t)&v109, (const void **)a4))
      {
LABEL_96:
        sub_100233AF4((uint64_t)&v109, v110[0]);
        return;
      }
      v111 = a4;
      v83 = sub_100234FFC(&v109, (const void **)a4, (uint64_t)&unk_100472CF8, &v111);
      sub_100233E80((uint64_t *)&v107, (const void ***)v83 + 7);
      v111 = &qword_100859D48;
      v22 = sub_100235138(&v107, (const void **)&qword_100859D48, (uint64_t)&unk_100472CF8, &v111);
      *(_OWORD *)a2 = *(_OWORD *)(v22 + 7);
      if (v22 + 7 != (uint64_t *)a2)
        goto LABEL_94;
      goto LABEL_95;
    }
  }
}

void sub_10022F8AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10, uint64_t a11, char a12, _QWORD *a13)
{
  sub_1002332FC((uint64_t)&a9, a10);
  sub_100234984((uint64_t)&a12, a13);
  _Unwind_Resume(a1);
}

void sub_10022F950(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t *a4, uint64_t *a5, _DWORD *a6, _DWORD *a7)
{
  uint64_t *v12;
  void *v13;
  uint64_t *v14;
  uint64_t *v15;
  __int128 *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  void *v26;
  uint64_t *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  void *v44;
  void *v45;
  void *v46;
  uint64_t *v47;
  void *v48;
  void *v49;
  void *v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  void *v54;
  void *v55;
  void *v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  __int128 v69;
  _QWORD *v70;
  _QWORD *v71;
  uint64_t v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;

  v12 = sub_100230424(a3);
  v68 = (void *)objc_claimAutoreleasedReturnValue(v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  if (*((char *)a4 + 23) >= 0)
    v14 = a4;
  else
    v14 = (uint64_t *)*a4;
  v66 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v14));
  if (*((char *)a5 + 23) >= 0)
    v15 = a5;
  else
    v15 = (uint64_t *)*a5;
  v67 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v15));
  if (byte_100859D5F >= 0)
    v16 = &qword_100859D48;
  else
    v16 = (__int128 *)qword_100859D48;
  v61 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v16));
  v65 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "objectForKey:", CFSTR("BtThresholdScannerModelAdvertiserModel")));
  v64 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "objectForKey:", CFSTR("BtThresholdScannerClassAdvertiserModel")));
  v62 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "objectForKey:", CFSTR("BtThresholdScannerModelAdvertiserClass")));
  v63 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "objectForKey:", CFSTR("BtThresholdAdvertiserModel")));
  v60 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "objectForKey:", CFSTR("BtThresholdScannerModel")));
  v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v65, "objectForKey:", v68));

  if (!v17)
  {
LABEL_17:
    v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v64, "objectForKey:", v68));

    if (v26)
    {
      v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v64, "objectForKeyedSubscript:", v68));
      v27 = sub_100230A74(a6);
      v28 = (void *)objc_claimAutoreleasedReturnValue(v27);
      v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "objectForKey:", v28));

      if (v29)
      {
        v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "objectForKeyedSubscript:", v28));
        v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v30, "objectForKey:", v67));

        if (v31)
        {
          v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v30, "objectForKey:", v67));
          sub_1002305B4(v32, (uint64_t)&v69);
          *(_OWORD *)a2 = v69;
          v33 = a2 + 24;
          sub_10003E3F0(a2 + 16, *(_QWORD **)(a2 + 24));
          v34 = v71;
          *(_QWORD *)(a2 + 16) = v70;
          *(_QWORD *)(a2 + 24) = v34;
          v35 = v72;
          *(_QWORD *)(a2 + 32) = v72;
          if (v35)
          {
            v34[2] = v33;
            v70 = &v71;
            v71 = 0;
            v72 = 0;
            v34 = 0;
          }
          else
          {
            *(_QWORD *)(a2 + 16) = v33;
          }
          *(_OWORD *)(a2 + 216) = v84;
          *(_OWORD *)(a2 + 232) = v85;
          *(_OWORD *)(a2 + 248) = v86;
          *(_OWORD *)(a2 + 152) = v80;
          *(_OWORD *)(a2 + 168) = v81;
          *(_OWORD *)(a2 + 184) = v82;
          *(_OWORD *)(a2 + 200) = v83;
          *(_OWORD *)(a2 + 88) = v76;
          *(_OWORD *)(a2 + 104) = v77;
          *(_OWORD *)(a2 + 120) = v78;
          *(_OWORD *)(a2 + 136) = v79;
          *(_OWORD *)(a2 + 40) = v73;
          *(_OWORD *)(a2 + 56) = v74;
          *(_OWORD *)(a2 + 72) = v75;
          *(_OWORD *)(a2 + 264) = v87;
          sub_10003E3F0((uint64_t)&v70, v34);

          goto LABEL_40;
        }

      }
    }
    v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v63, "objectForKey:", v68));

    if (v36)
    {
      v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v63, "objectForKeyedSubscript:", v68));
      v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v37, "objectForKeyedSubscript:", v61));

      v39 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v38, "objectForKey:", v67));
      if (v39)
      {
        v40 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v38, "objectForKey:", v67));
        sub_1002305B4(v40, (uint64_t)&v69);
        *(_OWORD *)a2 = v69;
        v41 = a2 + 24;
        sub_10003E3F0(a2 + 16, *(_QWORD **)(a2 + 24));
        v42 = v71;
        *(_QWORD *)(a2 + 16) = v70;
        *(_QWORD *)(a2 + 24) = v42;
        v43 = v72;
        *(_QWORD *)(a2 + 32) = v72;
        if (v43)
        {
          v42[2] = v41;
          v70 = &v71;
          v71 = 0;
          v72 = 0;
          v42 = 0;
        }
        else
        {
          *(_QWORD *)(a2 + 16) = v41;
        }
        *(_OWORD *)(a2 + 216) = v84;
        *(_OWORD *)(a2 + 232) = v85;
        *(_OWORD *)(a2 + 248) = v86;
        *(_OWORD *)(a2 + 152) = v80;
        *(_OWORD *)(a2 + 168) = v81;
        *(_OWORD *)(a2 + 184) = v82;
        *(_OWORD *)(a2 + 200) = v83;
        *(_OWORD *)(a2 + 88) = v76;
        *(_OWORD *)(a2 + 104) = v77;
        *(_OWORD *)(a2 + 120) = v78;
        *(_OWORD *)(a2 + 136) = v79;
        *(_OWORD *)(a2 + 40) = v73;
        *(_OWORD *)(a2 + 56) = v74;
        *(_OWORD *)(a2 + 72) = v75;
        *(_OWORD *)(a2 + 264) = v87;
        sub_10003E3F0((uint64_t)&v70, v42);
        goto LABEL_49;
      }

    }
    v44 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v62, "objectForKey:", v68));

    if (v44)
    {
      v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v62, "objectForKeyedSubscript:", v68));
      v45 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v38, "objectForKey:", v66));

      if (v45)
      {
        v46 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v38, "objectForKeyedSubscript:", v66));
        v47 = sub_100230A74(a7);
        v48 = (void *)objc_claimAutoreleasedReturnValue(v47);
        v49 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v46, "objectForKey:", v48));

        if (v49)
        {
          v50 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v46, "objectForKey:", v48));
          sub_1002305B4(v50, (uint64_t)&v69);
          *(_OWORD *)a2 = v69;
          v51 = a2 + 24;
          sub_10003E3F0(a2 + 16, *(_QWORD **)(a2 + 24));
          v52 = v71;
          *(_QWORD *)(a2 + 16) = v70;
          *(_QWORD *)(a2 + 24) = v52;
          v53 = v72;
          *(_QWORD *)(a2 + 32) = v72;
          if (v53)
          {
            v52[2] = v51;
            v70 = &v71;
            v71 = 0;
            v72 = 0;
            v52 = 0;
          }
          else
          {
            *(_QWORD *)(a2 + 16) = v51;
          }
          *(_OWORD *)(a2 + 216) = v84;
          *(_OWORD *)(a2 + 232) = v85;
          *(_OWORD *)(a2 + 248) = v86;
          *(_OWORD *)(a2 + 152) = v80;
          *(_OWORD *)(a2 + 168) = v81;
          *(_OWORD *)(a2 + 184) = v82;
          *(_OWORD *)(a2 + 200) = v83;
          *(_OWORD *)(a2 + 88) = v76;
          *(_OWORD *)(a2 + 104) = v77;
          *(_OWORD *)(a2 + 120) = v78;
          *(_OWORD *)(a2 + 136) = v79;
          *(_OWORD *)(a2 + 40) = v73;
          *(_OWORD *)(a2 + 56) = v74;
          *(_OWORD *)(a2 + 72) = v75;
          *(_OWORD *)(a2 + 264) = v87;
          sub_10003E3F0((uint64_t)&v70, v52);

          goto LABEL_52;
        }

      }
    }
    v54 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v60, "objectForKey:", v68));

    if (!v54)
      goto LABEL_53;
    v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v60, "objectForKeyedSubscript:", v68));
    v55 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v38, "objectForKey:", v66));

    if (!v55)
    {
LABEL_52:

      goto LABEL_53;
    }
    v40 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v38, "objectForKey:", v66));
    v56 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v40, "objectForKeyedSubscript:", v61));
    sub_1002305B4(v56, (uint64_t)&v69);
    *(_OWORD *)a2 = v69;
    v57 = a2 + 24;
    sub_10003E3F0(a2 + 16, *(_QWORD **)(a2 + 24));
    v58 = v71;
    *(_QWORD *)(a2 + 16) = v70;
    *(_QWORD *)(a2 + 24) = v58;
    v59 = v72;
    *(_QWORD *)(a2 + 32) = v72;
    if (v59)
    {
      v58[2] = v57;
      v70 = &v71;
      v71 = 0;
      v72 = 0;
      v58 = 0;
    }
    else
    {
      *(_QWORD *)(a2 + 16) = v57;
    }
    *(_OWORD *)(a2 + 216) = v84;
    *(_OWORD *)(a2 + 232) = v85;
    *(_OWORD *)(a2 + 248) = v86;
    *(_OWORD *)(a2 + 152) = v80;
    *(_OWORD *)(a2 + 168) = v81;
    *(_OWORD *)(a2 + 184) = v82;
    *(_OWORD *)(a2 + 200) = v83;
    *(_OWORD *)(a2 + 88) = v76;
    *(_OWORD *)(a2 + 104) = v77;
    *(_OWORD *)(a2 + 120) = v78;
    *(_OWORD *)(a2 + 136) = v79;
    *(_OWORD *)(a2 + 40) = v73;
    *(_OWORD *)(a2 + 56) = v74;
    *(_OWORD *)(a2 + 72) = v75;
    *(_OWORD *)(a2 + 264) = v87;
    sub_10003E3F0((uint64_t)&v70, v58);

LABEL_49:
    goto LABEL_52;
  }
  v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v65, "objectForKeyedSubscript:", v68));
  v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "objectForKey:", v66));

  if (!v19)
  {
LABEL_16:

    goto LABEL_17;
  }
  v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "objectForKeyedSubscript:", v66));
  v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "objectForKey:", v67));

  if (!v21)
  {

    goto LABEL_16;
  }
  v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "objectForKey:", v67));
  sub_1002305B4(v22, (uint64_t)&v69);
  *(_OWORD *)a2 = v69;
  v23 = a2 + 24;
  sub_10003E3F0(a2 + 16, *(_QWORD **)(a2 + 24));
  v24 = v71;
  *(_QWORD *)(a2 + 16) = v70;
  *(_QWORD *)(a2 + 24) = v24;
  v25 = v72;
  *(_QWORD *)(a2 + 32) = v72;
  if (v25)
  {
    v24[2] = v23;
    v70 = &v71;
    v71 = 0;
    v72 = 0;
    v24 = 0;
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v23;
  }
  *(_OWORD *)(a2 + 216) = v84;
  *(_OWORD *)(a2 + 232) = v85;
  *(_OWORD *)(a2 + 248) = v86;
  *(_OWORD *)(a2 + 152) = v80;
  *(_OWORD *)(a2 + 168) = v81;
  *(_OWORD *)(a2 + 184) = v82;
  *(_OWORD *)(a2 + 200) = v83;
  *(_OWORD *)(a2 + 88) = v76;
  *(_OWORD *)(a2 + 104) = v77;
  *(_OWORD *)(a2 + 120) = v78;
  *(_OWORD *)(a2 + 136) = v79;
  *(_OWORD *)(a2 + 40) = v73;
  *(_OWORD *)(a2 + 56) = v74;
  *(_OWORD *)(a2 + 72) = v75;
  *(_OWORD *)(a2 + 264) = v87;
  sub_10003E3F0((uint64_t)&v70, v24);

LABEL_40:
LABEL_53:

}

void sub_1002302A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18)
{
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;

  _Unwind_Resume(a1);
}

uint64_t *sub_100230424(_DWORD *a1)
{
  uint64_t i;
  uint64_t *v3;
  uint64_t *v5[3];
  _DWORD *v6[2];
  int v7;
  const __CFString *v8;
  int v9;
  const __CFString *v10;
  int v11;
  const __CFString *v12;
  int v13;
  const __CFString *v14;
  int v15;
  const __CFString *v16;
  int v17;
  const __CFString *v18;

  LODWORD(v6[0]) = 1;
  v6[1] = CFSTR("unspecified");
  v7 = 2;
  v8 = CFSTR("immediate");
  v9 = 3;
  v10 = CFSTR("near");
  v11 = 4;
  v12 = CFSTR("desk");
  v13 = 5;
  v14 = CFSTR("vicinity");
  v15 = 6;
  v16 = CFSTR("sensorMax");
  v17 = 7;
  v18 = CFSTR("superImmediate");
  sub_100232710((uint64_t)v5, (int *)v6, 7);
  for (i = 13; i != -1; i -= 2)

  v6[0] = a1;
  v3 = sub_1001845A4(v5, a1, (uint64_t)&unk_100472CF8, v6)[5];
  sub_100184188((uint64_t)v5, v5[1]);
  return v3;
}

void sub_100230574(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11)
{
  sub_100184188((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

void sub_1002305B4(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v3;
  void *v4;
  float v5;
  float v6;
  void *v7;
  unsigned int v8;
  NSObject *v9;
  void *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  void *v18;
  unsigned int v19;
  void *v20;
  unsigned int v21;
  void *v27;
  unsigned int v28;
  _BYTE buf[24];

  v3 = a1;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("threshold")));
  objc_msgSend(v4, "floatValue");
  v6 = v5;

  if (v6 >= 0.0)
  {
    v9 = (id)qword_10085F520;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("threshold")));
      *(_DWORD *)buf = 138412290;
      *(_QWORD *)&buf[4] = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#btproximitydatabase Invalid OTA threshold value of: %@", buf, 0xCu);

    }
  }
  else
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("custom_threshold_type")));
    v8 = objc_msgSend(v7, "isEqualToString:", CFSTR("default_bluetooth_filter"));

    if (v8)
    {
      *(_QWORD *)a2 = 0x300000008;
      *(double *)(a2 + 8) = v6;
      *(double *)buf = v6;
      sub_10018252C(a2 + 16, (double *)buf, 1);
LABEL_12:
      *(_OWORD *)(a2 + 40) = xmmword_10046E0F0;
      *(_QWORD *)(a2 + 56) = 0x4024000000000000;
      *(_DWORD *)(a2 + 64) = 45;
      *(_BYTE *)(a2 + 68) = 0;
      *(_DWORD *)(a2 + 72) = 1;
      *(_BYTE *)(a2 + 80) = 1;
      *(_OWORD *)(a2 + 88) = xmmword_10046E100;
      *(_OWORD *)(a2 + 104) = xmmword_10046E110;
      __asm { FMOV            V0.2D, #1.0 }
      *(_OWORD *)(a2 + 120) = _Q0;
      *(_QWORD *)(a2 + 136) = 0xC059000000000000;
      *(_OWORD *)(a2 + 144) = xmmword_10046E120;
      *(int32x2_t *)(a2 + 160) = vdup_n_s32(0x3DCCCCCDu);
      *(_OWORD *)(a2 + 168) = xmmword_10046E060;
      *(_QWORD *)(a2 + 192) = 0;
      *(_QWORD *)(a2 + 200) = 0;
      *(_QWORD *)(a2 + 184) = 0x3FD999999999999ALL;
      *(_OWORD *)(a2 + 208) = xmmword_10046E070;
      *(_DWORD *)(a2 + 224) = 5;
LABEL_13:
      *(_QWORD *)(a2 + 232) = 0x4000000000000000;
      *(_DWORD *)(a2 + 240) = 10;
      *(_QWORD *)(a2 + 248) = 0x4034000000000000;
      *(_DWORD *)(a2 + 256) = 3;
      *(_QWORD *)(a2 + 264) = 0x3FF0000000000000;
      *(_QWORD *)(a2 + 272) = 0x4008000000000000;
      goto LABEL_14;
    }
    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("custom_threshold_type")));
    v19 = objc_msgSend(v18, "isEqualToString:", CFSTR("rssi_estimator"));

    if (v19)
    {
      *(_QWORD *)a2 = 0x200000003;
      *(double *)(a2 + 8) = v6;
      *(double *)buf = v6;
      sub_10018252C(a2 + 16, (double *)buf, 1);
      goto LABEL_12;
    }
    v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("custom_threshold_type")));
    v21 = objc_msgSend(v20, "isEqualToString:", CFSTR("default_setup"));

    if (v21)
    {
      *(_QWORD *)a2 = 0x300000010;
      *(double *)(a2 + 8) = v6;
      *(double *)buf = v6;
      sub_10018252C(a2 + 16, (double *)buf, 1);
      goto LABEL_12;
    }
    v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("custom_threshold_type")));
    v28 = objc_msgSend(v27, "isEqualToString:", CFSTR("high_rate_hysteresis"));

    if (v28)
    {
      *(_QWORD *)a2 = 0x200000003;
      *(double *)(a2 + 8) = v6;
      *(double *)buf = v6;
      sub_10018252C(a2 + 16, (double *)buf, 1);
      *(_OWORD *)(a2 + 40) = xmmword_100473420;
      *(_QWORD *)(a2 + 56) = 0x4000000000000000;
      *(_DWORD *)(a2 + 64) = 20;
      *(_BYTE *)(a2 + 68) = 0;
      *(_DWORD *)(a2 + 72) = 1;
      *(_BYTE *)(a2 + 80) = 1;
      *(_OWORD *)(a2 + 88) = xmmword_10046E100;
      *(_OWORD *)(a2 + 104) = xmmword_10046E110;
      __asm { FMOV            V0.2D, #1.0 }
      *(_OWORD *)(a2 + 120) = _Q0;
      *(_QWORD *)(a2 + 136) = 0xC059000000000000;
      *(_OWORD *)(a2 + 144) = xmmword_10046E120;
      *(int32x2_t *)(a2 + 160) = vdup_n_s32(0x3DCCCCCDu);
      *(_OWORD *)(a2 + 168) = xmmword_10046E060;
      *(_QWORD *)(a2 + 192) = 0;
      *(_QWORD *)(a2 + 200) = 0;
      *(_QWORD *)(a2 + 184) = 0x3FD999999999999ALL;
      *(_OWORD *)(a2 + 208) = xmmword_10046E070;
      *(_DWORD *)(a2 + 224) = 5;
      goto LABEL_13;
    }
  }
  *(_OWORD *)a2 = xmmword_100859D90;
  sub_100232898((uint64_t *)(a2 + 16), (uint64_t)&unk_100859DA0);
  v11 = xmmword_100859E58;
  *(_OWORD *)(a2 + 216) = unk_100859E68;
  v12 = *(_OWORD *)&qword_100859E88;
  *(_OWORD *)(a2 + 232) = xmmword_100859E78;
  *(_OWORD *)(a2 + 248) = v12;
  *(_OWORD *)(a2 + 264) = xmmword_100859E98;
  v13 = xmmword_100859E18;
  *(_OWORD *)(a2 + 152) = unk_100859E28;
  v14 = *(_OWORD *)&qword_100859E48;
  *(_OWORD *)(a2 + 168) = xmmword_100859E38;
  *(_OWORD *)(a2 + 184) = v14;
  *(_OWORD *)(a2 + 200) = v11;
  v15 = xmmword_100859DD8;
  *(_OWORD *)(a2 + 88) = unk_100859DE8;
  v16 = unk_100859E08;
  *(_OWORD *)(a2 + 104) = xmmword_100859DF8;
  *(_OWORD *)(a2 + 120) = v16;
  *(_OWORD *)(a2 + 136) = v13;
  v17 = *(_OWORD *)&qword_100859DC8;
  *(_OWORD *)(a2 + 40) = xmmword_100859DB8;
  *(_OWORD *)(a2 + 56) = v17;
  *(_OWORD *)(a2 + 72) = v15;
LABEL_14:

}

void sub_100230A2C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t *sub_100230A74(_DWORD *a1)
{
  uint64_t i;
  uint64_t *v3;
  uint64_t *v5[3];
  _DWORD *v6[2];
  int v7;
  const __CFString *v8;
  int v9;
  const __CFString *v10;
  int v11;
  const __CFString *v12;
  int v13;
  const __CFString *v14;
  int v15;
  const __CFString *v16;
  int v17;
  const __CFString *v18;
  int v19;
  const __CFString *v20;
  int v21;
  const __CFString *v22;
  int v23;
  const __CFString *v24;
  int v25;
  const __CFString *v26;
  int v27;
  const __CFString *v28;
  int v29;
  const __CFString *v30;
  int v31;
  const __CFString *v32;
  int v33;
  const __CFString *v34;
  int v35;
  const __CFString *v36;
  int v37;
  const __CFString *v38;
  int v39;
  const __CFString *v40;

  v6[1] = CFSTR("DeviceClassInvalid");
  v7 = 1;
  v8 = CFSTR("DeviceClassMacBook");
  v9 = 2;
  v10 = CFSTR("DeviceClassMacBookAir");
  v11 = 3;
  v12 = CFSTR("DeviceClassMacBookPro");
  v13 = 4;
  v14 = CFSTR("DeviceClassiMac");
  v15 = 5;
  v16 = CFSTR("DeviceClassMacMini");
  v17 = 6;
  v18 = CFSTR("DeviceClassIpad");
  v19 = 7;
  v20 = CFSTR("DeviceClassIphone");
  v21 = 8;
  v22 = CFSTR("DeviceClassMax");
  v23 = 9;
  v24 = CFSTR("DeviceClassMacPro");
  v25 = 10;
  v26 = CFSTR("DeviceClassMacStudio");
  v27 = 11;
  v28 = CFSTR("DeviceClassAirTag");
  v29 = 12;
  v30 = CFSTR("DeviceClassDefaultMac");
  v31 = 13;
  v32 = CFSTR("DeviceClassAudioAccessory");
  v33 = 14;
  v34 = CFSTR("DeviceClassHomePod");
  v35 = 15;
  LODWORD(v6[0]) = 0;
  v36 = CFSTR("DeviceClassWatch");
  v37 = 16;
  v38 = CFSTR("DeviceClassRemote");
  v39 = 18;
  v40 = CFSTR("DeviceClassPencil");
  sub_10023281C((uint64_t)v5, (int *)v6, 18);
  for (i = 35; i != -1; i -= 2)

  v6[0] = a1;
  v3 = sub_1001845A4(v5, a1, (uint64_t)&unk_100472CF8, v6)[5];
  sub_100184188((uint64_t)v5, v5[1]);
  return v3;
}

void sub_100230C9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11)
{
  sub_100184188((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

uint64_t sub_100230CDC(uint64_t a1, char *__s)
{
  char *v2;
  int64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t *v6;
  int64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  int v13;
  char *v14;
  uint64_t v15;
  uint64_t *v16;
  int64_t v17;
  char *v18;
  char *v19;
  int v20;
  char *v21;
  uint64_t v22;
  char *v23;
  int64_t v24;
  uint64_t *v25;
  int64_t v26;
  char *v27;
  uint64_t *v28;
  int64_t v29;
  char *v31;
  int v32;
  char *v33;
  int64_t v34;
  char *v35;
  char *v36;
  char *v37;
  int v38;
  char *v39;
  char *v40;
  char *v41;
  uint64_t *v42;
  int64_t v43;
  uint64_t v44;
  char *v45;
  int v46;
  uint64_t v47;

  v2 = __s;
  v3 = __s[23];
  if (__s[23] < 0)
  {
    v4 = *(_QWORD *)__s;
    v5 = (char *)*((_QWORD *)__s + 1);
  }
  else
  {
    v4 = (uint64_t)__s;
    v5 = (char *)__s[23];
  }
  if (byte_100859837 >= 0)
    v6 = &qword_100859820;
  else
    v6 = (uint64_t *)qword_100859820;
  if (byte_100859837 >= 0)
    v7 = byte_100859837;
  else
    v7 = unk_100859828;
  if (v7)
  {
    if ((uint64_t)v5 >= v7)
    {
      v12 = &v5[v4];
      v13 = *(char *)v6;
      a1 = v4;
      do
      {
        v14 = &v5[-v7];
        if (v14 == (char *)-1)
          break;
        a1 = (uint64_t)memchr((void *)a1, v13, (size_t)(v14 + 1));
        if (!a1)
          break;
        v15 = a1;
        a1 = memcmp((const void *)a1, v6, v7);
        if (!(_DWORD)a1)
        {
          if ((char *)v15 == v12 || v15 - v4 == -1)
            break;
          goto LABEL_40;
        }
        a1 = v15 + 1;
        v5 = &v12[-v15 - 1];
      }
      while ((uint64_t)v5 >= v7);
    }
    v8 = sub_1002312BC(a1, (char **)v2);
    if ((v8 & 1) == 0)
    {
      v9 = (char *)v2[23];
      if (v2[23] < 0)
      {
        v10 = *(char **)v2;
        v11 = (char *)*((_QWORD *)v2 + 1);
      }
      else
      {
        v10 = v2;
        v11 = (char *)v2[23];
      }
      if (byte_10085987F >= 0)
        v16 = &qword_100859868;
      else
        v16 = (uint64_t *)qword_100859868;
      if (byte_10085987F >= 0)
        v17 = byte_10085987F;
      else
        v17 = unk_100859870;
      if (!v17)
        return 4;
      if ((uint64_t)v11 >= v17)
      {
        v19 = &v11[(_QWORD)v10];
        v20 = *(char *)v16;
        v8 = (uint64_t)v10;
        do
        {
          v21 = &v11[-v17];
          if (v21 == (char *)-1)
            break;
          v8 = (uint64_t)memchr((void *)v8, v20, (size_t)(v21 + 1));
          if (!v8)
            break;
          v22 = v8;
          v8 = memcmp((const void *)v8, v16, v17);
          if (!(_DWORD)v8)
          {
            if ((char *)v22 == v19 || v22 - (_QWORD)v10 == -1)
              break;
            return 4;
          }
          v8 = v22 + 1;
          v11 = &v19[-v22 - 1];
        }
        while ((uint64_t)v11 >= v17);
      }
      if ((v9 & 0x80) != 0)
      {
        v18 = *(char **)v2;
        v9 = (char *)*((_QWORD *)v2 + 1);
      }
      else
      {
        v18 = v2;
      }
      if (byte_100859897 >= 0)
        v42 = &qword_100859880;
      else
        v42 = (uint64_t *)qword_100859880;
      if (byte_100859897 >= 0)
        v43 = byte_100859897;
      else
        v43 = unk_100859888;
      if (!v43)
        return 5;
      if ((uint64_t)v9 >= v43)
      {
        v45 = &v9[(_QWORD)v18];
        v46 = *(char *)v42;
        v8 = (uint64_t)v18;
        do
        {
          if (&v9[-v43] == (char *)-1)
            break;
          v8 = (uint64_t)memchr((void *)v8, v46, (size_t)&v9[-v43 + 1]);
          if (!v8)
            break;
          v47 = v8;
          v8 = memcmp((const void *)v8, v42, v43);
          if (!(_DWORD)v8)
          {
            if ((char *)v47 == v45 || v47 - (_QWORD)v18 == -1)
              break;
            return 5;
          }
          v8 = v47 + 1;
          v9 = &v45[-v47 - 1];
        }
        while ((uint64_t)v9 >= v43);
      }
      v44 = sub_100231548(v8, (char **)v2);
      if ((v44 & 1) != 0 || sub_1002316A4(v44, (char **)v2))
        return 5;
      if (sub_1002311E4((uint64_t *)v2, (char *)qword_100859898, 0) != -1)
        return 9;
      if (sub_1002311E4((uint64_t *)v2, (char *)qword_1008598B0, 0) != -1)
        return 12;
      if (sub_1002311E4((uint64_t *)v2, (char *)qword_1008598C8, 0) != -1)
        return 6;
      if (sub_1002311E4((uint64_t *)v2, (char *)qword_1008598E0, 0) != -1)
        return 7;
      if (sub_10023190C(-1, (char **)v2))
        return 13;
      if (sub_1002311E4((uint64_t *)v2, (char *)qword_100859928, 0) != -1)
        return 14;
      if (sub_1002311E4((uint64_t *)v2, (char *)qword_100859940, 0) != -1)
        return 15;
      if (sub_1002311E4((uint64_t *)v2, (char *)qword_100859958, 0) != -1)
        return 16;
      if (sub_1002311E4((uint64_t *)v2, (char *)&xmmword_100859910, 0) != -1)
        return 11;
      if ((sub_100231C38(-1, (char **)v2) & 1) != 0)
        return 18;
      if (sub_1002311E4((uint64_t *)v2, (char *)&xmmword_100859D78, 0) == -1)
        return 0;
      return 17;
    }
    return 3;
  }
LABEL_40:
  if ((v3 & 0x80) != 0)
  {
    v23 = *(char **)v2;
    v24 = *((_QWORD *)v2 + 1);
  }
  else
  {
    v23 = v2;
    v24 = v3;
  }
  if (byte_10085984F >= 0)
    v25 = &qword_100859838;
  else
    v25 = (uint64_t *)qword_100859838;
  if (byte_10085984F >= 0)
    v26 = byte_10085984F;
  else
    v26 = unk_100859840;
  if (!v26)
    return 2;
  if (v24 >= v26)
  {
    v31 = &v23[v24];
    v32 = *(char *)v25;
    v33 = v23;
    do
    {
      v34 = v24 - v26;
      if (v34 == -1)
        break;
      v35 = (char *)memchr(v33, v32, v34 + 1);
      if (!v35)
        break;
      v36 = v35;
      if (!memcmp(v35, v25, v26))
      {
        if (v36 == v31 || v36 - v23 == -1)
          break;
        return 2;
      }
      v33 = v36 + 1;
      v24 = v31 - (v36 + 1);
    }
    while (v24 >= v26);
  }
  if ((v3 & 0x80) != 0)
  {
    v27 = v2;
    v2 = *(char **)v2;
    v3 = *((_QWORD *)v27 + 1);
  }
  if (byte_100859867 >= 0)
    v28 = &qword_100859850;
  else
    v28 = (uint64_t *)qword_100859850;
  if (byte_100859867 >= 0)
    v29 = byte_100859867;
  else
    v29 = unk_100859858;
  if (!v29)
    return 3;
  if (v3 >= v29)
  {
    v37 = &v2[v3];
    v38 = *(char *)v28;
    v39 = v2;
    do
    {
      if (v3 - v29 == -1)
        break;
      v40 = (char *)memchr(v39, v38, v3 - v29 + 1);
      if (!v40)
        break;
      v41 = v40;
      if (!memcmp(v40, v28, v29))
      {
        if (v41 == v37 || v41 - v2 == -1)
          return 1;
        return 3;
      }
      v39 = v41 + 1;
      v3 = v37 - (v41 + 1);
    }
    while (v3 >= v29);
  }
  return 1;
}

uint64_t sub_1002311E4(uint64_t *a1, char *a2, unint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  int v5;
  char *v6;
  int64_t v7;
  void *v8;
  char *v9;
  int64_t v10;
  char *v11;
  int v13;
  uint64_t v14;
  char *v15;

  v3 = (uint64_t)a1;
  if (*((char *)a1 + 23) < 0)
  {
    v3 = *a1;
    v4 = a1[1];
  }
  else
  {
    v4 = *((unsigned __int8 *)a1 + 23);
  }
  v5 = a2[23];
  if (v5 >= 0)
    v6 = a2;
  else
    v6 = *(char **)a2;
  if (v5 >= 0)
    v7 = a2[23];
  else
    v7 = *((_QWORD *)a2 + 1);
  if (v4 < a3)
    return -1;
  if (v7)
  {
    v8 = (void *)(v3 + a3);
    v9 = (char *)(v3 + v4);
    v10 = v4 - a3;
    if (v10 >= v7)
    {
      v13 = *v6;
      do
      {
        v14 = v10 - v7;
        if (v14 == -1)
          break;
        v15 = (char *)memchr(v8, v13, v14 + 1);
        if (!v15)
          break;
        v11 = v15;
        if (!memcmp(v15, v6, v7))
          goto LABEL_15;
        v8 = v11 + 1;
        v10 = v9 - (v11 + 1);
      }
      while (v10 >= v7);
    }
    v11 = v9;
LABEL_15:
    if (v11 == v9)
      return -1;
    else
      return (uint64_t)&v11[-v3];
  }
  return a3;
}

BOOL sub_1002312BC(uint64_t a1, char **a2)
{
  unsigned __int8 v3;
  char *v4;
  char *v5;
  uint64_t *v6;
  int64_t v7;
  unsigned __int8 v8;
  char *v9;
  char **v10;
  uint64_t *v11;
  int64_t v12;
  char *v14;
  int v15;
  void *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  int v21;
  char **v22;
  char *v23;
  char *v24;
  char *v25;

  v3 = atomic_load((unsigned __int8 *)&qword_10085A108);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_10085A108))
  {
    sub_10000BF04(&qword_10085A0F0, "Mac14,5");
    __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10085A0F0, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10085A108);
  }
  v4 = (char *)*((unsigned __int8 *)a2 + 23);
  if ((char)v4 >= 0)
    v5 = (char *)a2;
  else
    v5 = *a2;
  if (byte_10085A107 >= 0)
    v6 = &qword_10085A0F0;
  else
    v6 = (uint64_t *)qword_10085A0F0;
  if (byte_10085A107 >= 0)
    v7 = byte_10085A107;
  else
    v7 = unk_10085A0F8;
  if (!v7)
    return 1;
  if ((char)v4 < 0)
    v4 = a2[1];
  if ((uint64_t)v4 >= v7)
  {
    v14 = &v4[(_QWORD)v5];
    v15 = *(char *)v6;
    v16 = v5;
    do
    {
      v17 = &v4[-v7];
      if (v17 == (char *)-1)
        break;
      v18 = (char *)memchr(v16, v15, (size_t)(v17 + 1));
      if (!v18)
        break;
      v19 = v18;
      if (!memcmp(v18, v6, v7))
      {
        if (v19 != v14 && v19 - v5 != -1)
          return 1;
        break;
      }
      v16 = v19 + 1;
      v4 = (char *)(v14 - (v19 + 1));
    }
    while ((uint64_t)v4 >= v7);
  }
  v8 = atomic_load((unsigned __int8 *)&qword_10085A128);
  if ((v8 & 1) == 0 && __cxa_guard_acquire(&qword_10085A128))
  {
    sub_10000BF04(&qword_10085A110, "Mac14,6");
    __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10085A110, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10085A128);
  }
  v9 = (char *)*((unsigned __int8 *)a2 + 23);
  v10 = (char)v9 >= 0 ? a2 : (char **)*a2;
  v11 = byte_10085A127 >= 0 ? &qword_10085A110 : (uint64_t *)qword_10085A110;
  v12 = byte_10085A127 >= 0 ? byte_10085A127 : unk_10085A118;
  if (!v12)
    return 1;
  if ((char)v9 < 0)
    v9 = a2[1];
  if ((uint64_t)v9 >= v12)
  {
    v20 = &v9[(_QWORD)v10];
    v21 = *(char *)v11;
    v22 = v10;
    do
    {
      v23 = &v9[-v12];
      if (v23 == (char *)-1)
        break;
      v24 = (char *)memchr(v22, v21, (size_t)(v23 + 1));
      if (!v24)
        break;
      v25 = v24;
      if (!memcmp(v24, v11, v12))
        return v25 != v20 && v25 - (char *)v10 != -1;
      v22 = (char **)(v25 + 1);
      v9 = (char *)(v20 - (v25 + 1));
    }
    while ((uint64_t)v9 >= v12);
  }
  return 0;
}

void sub_100231520(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_10085A128);
  _Unwind_Resume(a1);
}

uint64_t sub_100231548(uint64_t a1, char **a2)
{
  unsigned __int8 v3;
  char *v4;
  char *v5;
  uint64_t *v6;
  int64_t v7;
  char *v8;
  char *v9;
  int v12;
  void *v13;
  char *v14;
  char *v15;

  v3 = atomic_load((unsigned __int8 *)&qword_10085A188);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_10085A188))
  {
    sub_10000BF04(&qword_10085A170, "Mac14,3");
    __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10085A170, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10085A188);
  }
  v4 = (char *)*((unsigned __int8 *)a2 + 23);
  if ((char)v4 >= 0)
    v5 = (char *)a2;
  else
    v5 = *a2;
  if (byte_10085A187 >= 0)
    v6 = &qword_10085A170;
  else
    v6 = (uint64_t *)qword_10085A170;
  if (byte_10085A187 >= 0)
    v7 = byte_10085A187;
  else
    v7 = unk_10085A178;
  if (!v7)
    return 1;
  if ((char)v4 < 0)
    v4 = a2[1];
  v8 = &v4[(_QWORD)v5];
  if ((uint64_t)v4 >= v7)
  {
    v12 = *(char *)v6;
    v13 = v5;
    do
    {
      v14 = &v4[-v7];
      if (v14 == (char *)-1)
        break;
      v15 = (char *)memchr(v13, v12, (size_t)(v14 + 1));
      if (!v15)
        break;
      v9 = v15;
      if (!memcmp(v15, v6, v7))
        return v9 != v8 && v9 - v5 != -1;
      v13 = v9 + 1;
      v4 = (char *)(v8 - (v9 + 1));
    }
    while ((uint64_t)v4 >= v7);
  }
  v9 = v8;
  return v9 != v8 && v9 - v5 != -1;
}

void sub_10023168C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_10085A188);
  _Unwind_Resume(a1);
}

BOOL sub_1002316A4(uint64_t a1, char **a2)
{
  unsigned __int8 v3;
  unsigned __int8 v4;
  char v5;
  char *v6;
  uint64_t *v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  uint64_t *v11;
  int64_t v12;
  int v14;
  int64_t v15;
  void *v16;
  int64_t v17;
  char *v18;
  char *v19;
  int v20;
  void *v21;
  char *v22;
  char *v23;

  v3 = atomic_load((unsigned __int8 *)&qword_10085A148);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_10085A148))
  {
    sub_10000BF04(&qword_10085A130, "Mac13,1");
    __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10085A130, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10085A148);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_10085A168);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_10085A168))
  {
    sub_10000BF04(&qword_10085A150, "Mac13,2");
    __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10085A150, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10085A168);
  }
  v5 = *((_BYTE *)a2 + 23);
  if (v5 >= 0)
    v6 = (char *)a2;
  else
    v6 = *a2;
  if (byte_10085A147 >= 0)
    v7 = &qword_10085A130;
  else
    v7 = (uint64_t *)qword_10085A130;
  if (byte_10085A147 >= 0)
    v8 = byte_10085A147;
  else
    v8 = unk_10085A138;
  if (!v8)
    return 1;
  if (v5 >= 0)
    v9 = *((unsigned __int8 *)a2 + 23);
  else
    v9 = (int64_t)a2[1];
  v10 = &v6[v9];
  if (v9 >= v8)
  {
    v14 = *(char *)v7;
    v15 = v9;
    v16 = v6;
    do
    {
      v17 = v15 - v8;
      if (v17 == -1)
        break;
      v18 = (char *)memchr(v16, v14, v17 + 1);
      if (!v18)
        break;
      v19 = v18;
      if (!memcmp(v18, v7, v8))
      {
        if (v19 != v10 && v19 - v6 != -1)
          return 1;
        break;
      }
      v16 = v19 + 1;
      v15 = v10 - (v19 + 1);
    }
    while (v15 >= v8);
  }
  v11 = byte_10085A167 >= 0 ? &qword_10085A150 : (uint64_t *)qword_10085A150;
  v12 = byte_10085A167 >= 0 ? byte_10085A167 : unk_10085A158;
  if (!v12)
    return 1;
  if (v9 >= v12)
  {
    v20 = *(char *)v11;
    v21 = v6;
    do
    {
      if (v9 - v12 == -1)
        break;
      v22 = (char *)memchr(v21, v20, v9 - v12 + 1);
      if (!v22)
        break;
      v23 = v22;
      if (!memcmp(v22, v11, v12))
        return v23 != v10 && v23 - v6 != -1;
      v21 = v23 + 1;
      v9 = v10 - (v23 + 1);
    }
    while (v9 >= v12);
  }
  return 0;
}

void sub_1002318E4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_10085A168);
  _Unwind_Resume(a1);
}

BOOL sub_10023190C(uint64_t a1, char **a2)
{
  char v2;
  char *v3;
  uint64_t *v4;
  int64_t v5;
  int64_t v6;
  char *v7;
  __int128 *v8;
  int64_t v9;
  uint64_t *v10;
  int64_t v11;
  uint64_t *v12;
  int64_t v13;
  uint64_t *v14;
  int64_t v15;
  int v17;
  int64_t v18;
  void *v19;
  int64_t v20;
  char *v21;
  char *v22;
  int v23;
  int64_t v24;
  void *v25;
  int64_t v26;
  char *v27;
  char *v28;
  int v29;
  int64_t v30;
  void *v31;
  int64_t v32;
  char *v33;
  char *v34;
  int v35;
  int64_t v36;
  void *v37;
  int64_t v38;
  char *v39;
  char *v40;
  int v41;
  void *v42;
  char *v43;
  char *v44;

  v2 = *((_BYTE *)a2 + 23);
  if (v2 >= 0)
    v3 = (char *)a2;
  else
    v3 = *a2;
  if (byte_1008599CF >= 0)
    v4 = &qword_1008599B8;
  else
    v4 = (uint64_t *)qword_1008599B8;
  if (byte_1008599CF >= 0)
    v5 = byte_1008599CF;
  else
    v5 = unk_1008599C0;
  if (!v5)
    return 1;
  if (v2 >= 0)
    v6 = *((unsigned __int8 *)a2 + 23);
  else
    v6 = (int64_t)a2[1];
  v7 = &v3[v6];
  if (v6 >= v5)
  {
    v17 = *(char *)v4;
    v18 = v6;
    v19 = v3;
    do
    {
      v20 = v18 - v5;
      if (v20 == -1)
        break;
      v21 = (char *)memchr(v19, v17, v20 + 1);
      if (!v21)
        break;
      v22 = v21;
      if (!memcmp(v21, v4, v5))
      {
        if (v22 != v7 && v22 - v3 != -1)
          return 1;
        break;
      }
      v19 = v22 + 1;
      v18 = v7 - (v22 + 1);
    }
    while (v18 >= v5);
  }
  v8 = byte_1008599E7 >= 0 ? &xmmword_1008599D0 : (__int128 *)xmmword_1008599D0;
  v9 = byte_1008599E7 >= 0 ? byte_1008599E7 : *((_QWORD *)&xmmword_1008599D0 + 1);
  if (!v9)
    return 1;
  if (v6 >= v9)
  {
    v23 = *(char *)v8;
    v24 = v6;
    v25 = v3;
    do
    {
      v26 = v24 - v9;
      if (v26 == -1)
        break;
      v27 = (char *)memchr(v25, v23, v26 + 1);
      if (!v27)
        break;
      v28 = v27;
      if (!memcmp(v27, v8, v9))
      {
        if (v28 != v7 && v28 - v3 != -1)
          return 1;
        break;
      }
      v25 = v28 + 1;
      v24 = v7 - (v28 + 1);
    }
    while (v24 >= v9);
  }
  v10 = byte_100859987 >= 0 ? &qword_100859970 : (uint64_t *)qword_100859970;
  v11 = byte_100859987 >= 0 ? byte_100859987 : unk_100859978;
  if (!v11)
    return 1;
  if (v6 >= v11)
  {
    v29 = *(char *)v10;
    v30 = v6;
    v31 = v3;
    do
    {
      v32 = v30 - v11;
      if (v32 == -1)
        break;
      v33 = (char *)memchr(v31, v29, v32 + 1);
      if (!v33)
        break;
      v34 = v33;
      if (!memcmp(v33, v10, v11))
      {
        if (v34 != v7 && v34 - v3 != -1)
          return 1;
        break;
      }
      v31 = v34 + 1;
      v30 = v7 - (v34 + 1);
    }
    while (v30 >= v11);
  }
  v12 = byte_10085999F >= 0 ? &qword_100859988 : (uint64_t *)qword_100859988;
  v13 = byte_10085999F >= 0 ? byte_10085999F : unk_100859990;
  if (!v13)
    return 1;
  if (v6 >= v13)
  {
    v35 = *(char *)v12;
    v36 = v6;
    v37 = v3;
    do
    {
      v38 = v36 - v13;
      if (v38 == -1)
        break;
      v39 = (char *)memchr(v37, v35, v38 + 1);
      if (!v39)
        break;
      v40 = v39;
      if (!memcmp(v39, v12, v13))
      {
        if (v40 != v7 && v40 - v3 != -1)
          return 1;
        break;
      }
      v37 = v40 + 1;
      v36 = v7 - (v40 + 1);
    }
    while (v36 >= v13);
  }
  v14 = byte_1008599B7 >= 0 ? &qword_1008599A0 : (uint64_t *)qword_1008599A0;
  v15 = byte_1008599B7 >= 0 ? byte_1008599B7 : unk_1008599A8;
  if (!v15)
    return 1;
  if (v6 >= v15)
  {
    v41 = *(char *)v14;
    v42 = v3;
    do
    {
      if (v6 - v15 == -1)
        break;
      v43 = (char *)memchr(v42, v41, v6 - v15 + 1);
      if (!v43)
        break;
      v44 = v43;
      if (!memcmp(v43, v14, v15))
        return v44 != v7 && v44 - v3 != -1;
      v42 = v44 + 1;
      v6 = v7 - (v44 + 1);
    }
    while (v6 >= v15);
  }
  return 0;
}

uint64_t sub_100231C38(uint64_t a1, char **a2)
{
  char *v2;
  char *v3;
  __int128 *v4;
  int64_t v5;
  char *v6;
  char *v7;
  int v10;
  void *v11;
  char *v12;
  char *v13;

  v2 = (char *)*((unsigned __int8 *)a2 + 23);
  if ((char)v2 >= 0)
    v3 = (char *)a2;
  else
    v3 = *a2;
  if (byte_100859A2F >= 0)
    v4 = &xmmword_100859A18;
  else
    v4 = (__int128 *)xmmword_100859A18;
  if (byte_100859A2F >= 0)
    v5 = byte_100859A2F;
  else
    v5 = *((_QWORD *)&xmmword_100859A18 + 1);
  if (!v5)
    return 1;
  if ((char)v2 < 0)
    v2 = a2[1];
  v6 = &v2[(_QWORD)v3];
  if ((uint64_t)v2 >= v5)
  {
    v10 = *(char *)v4;
    v11 = v3;
    do
    {
      v12 = &v2[-v5];
      if (v12 == (char *)-1)
        break;
      v13 = (char *)memchr(v11, v10, (size_t)(v12 + 1));
      if (!v13)
        break;
      v7 = v13;
      if (!memcmp(v13, v4, v5))
        return v7 != v6 && v7 - v3 != -1;
      v11 = v7 + 1;
      v2 = (char *)(v6 - (v7 + 1));
    }
    while ((uint64_t)v2 >= v5);
  }
  v7 = v6;
  return v7 != v6 && v7 - v3 != -1;
}

uint64_t *sub_100231D18(uint64_t a1, unsigned int *a2)
{
  uint64_t *v2;
  unsigned int v3;
  unsigned int v4;

  v2 = *(uint64_t **)(a1 + 8);
  if (!v2)
LABEL_8:
    sub_100146798("map::at:  key not found");
  v3 = *a2;
  while (1)
  {
    while (1)
    {
      v4 = *((_DWORD *)v2 + 8);
      if (v3 >= v4)
        break;
      v2 = (uint64_t *)*v2;
      if (!v2)
        goto LABEL_8;
    }
    if (v4 >= v3)
      return v2 + 5;
    v2 = (uint64_t *)v2[1];
    if (!v2)
      goto LABEL_8;
  }
}

uint64_t *sub_100231D6C(_DWORD *a1, const void **a2)
{
  uint64_t v4;
  int v5;
  _QWORD **v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD **v9;
  int v10;
  _QWORD *v11;
  uint64_t *v12;
  uint64_t *v14;
  _QWORD *v15[2];
  _DWORD *v16;

  if ((_UNKNOWN *)sub_100004DF0((uint64_t)&unk_10085A0D8, a2) != &unk_10085A0E0)
  {
    v4 = sub_100231E94((uint64_t)&unk_10085A0D8, a2);
    sub_100232D84((uint64_t *)&v14, v4);
    if (v15[0])
    {
      v5 = *a1;
      v6 = v15;
      v7 = v15[0];
      do
      {
        v8 = v7;
        v9 = v6;
        v10 = *((_DWORD *)v7 + 8);
        if (v10 >= v5)
          v6 = (_QWORD **)v7;
        else
          ++v7;
        v7 = (_QWORD *)*v7;
      }
      while (v7);
      if (v6 != v15)
      {
        v11 = v10 >= v5 ? v8 : v9;
        if (v5 >= *((_DWORD *)v11 + 8))
        {
          v16 = a1;
          v12 = sub_1001845A4(&v14, a1, (uint64_t)&unk_100472CF8, &v16)[5];
          sub_10003E3F0((uint64_t)&v14, v15[0]);
          return v12;
        }
      }
    }
    sub_10003E3F0((uint64_t)&v14, v15[0]);
  }
  return 0;
}

void sub_100231E7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11)
{
  sub_10003E3F0((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

uint64_t sub_100231E94(uint64_t a1, const void **a2)
{
  uint64_t v2;
  uint64_t v4;

  v2 = *sub_1000271A4(a1, &v4, a2);
  if (!v2)
    sub_100146798("map::at:  key not found");
  return v2 + 56;
}

void sub_100231ED0(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  int v10;
  int v11;
  uint64_t v12;
  uint64_t *v13;
  int v14;
  BOOL v15;
  uint64_t *v16;
  uint64_t **v17;
  _QWORD *v18;
  _QWORD **v19;
  _QWORD *v20;
  _QWORD **v21;
  int v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t **v25;
  _QWORD *v26;
  _QWORD **v27;
  _QWORD *v28;
  _QWORD **v29;
  int v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t *v33;
  uint64_t *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  uint64_t *v47;
  _QWORD *v48[2];
  uint64_t *v49;
  _QWORD *v50[2];
  void *__dst[2];
  uint64_t v52;
  int v53;
  void *__p[2];
  uint64_t v55;
  int v56;
  uint64_t v57;
  int *v58;

  LODWORD(v57) = a2;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_100004678(__p, *(void **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a3;
    v55 = *(_QWORD *)(a3 + 16);
  }
  v10 = sub_100230CDC(a1, (char *)__p);
  if (SHIBYTE(v55) < 0)
    operator delete(__p[0]);
  v56 = v10;
  if (*(char *)(a4 + 23) < 0)
  {
    sub_100004678(__dst, *(void **)a4, *(_QWORD *)(a4 + 8));
  }
  else
  {
    *(_OWORD *)__dst = *(_OWORD *)a4;
    v52 = *(_QWORD *)(a4 + 16);
  }
  v11 = sub_100230CDC(a1, (char *)__dst);
  if (SHIBYTE(v52) < 0)
    operator delete(__dst[0]);
  v53 = v11;
  v12 = qword_10085FC30;
  if (!qword_10085FC30)
    goto LABEL_21;
  v13 = &qword_10085FC30;
  do
  {
    v14 = *(_DWORD *)(v12 + 32);
    v15 = v14 < a2;
    if (v14 >= a2)
      v16 = (uint64_t *)v12;
    else
      v16 = (uint64_t *)(v12 + 8);
    if (!v15)
      v13 = (uint64_t *)v12;
    v12 = *v16;
  }
  while (*v16);
  if (v13 == &qword_10085FC30 || *((_DWORD *)v13 + 8) > a2)
LABEL_21:
    LODWORD(v57) = 1;
  v47 = &v57;
  v17 = sub_100234F30(&qword_10085FC28, (int *)&v57, (uint64_t)&unk_100472CF8, (_DWORD **)&v47);
  sub_100233804((uint64_t *)&v49, (uint64_t)(v17 + 5));
  v18 = v50[0];
  if (!v50[0])
    goto LABEL_32;
  v19 = v50;
  do
  {
    v20 = v18;
    v21 = v19;
    v22 = *((_DWORD *)v18 + 8);
    v23 = v18 + 1;
    if (v22 >= v10)
    {
      v23 = v20;
      v19 = (_QWORD **)v20;
    }
    v18 = (_QWORD *)*v23;
  }
  while (v18);
  if (v19 == v50 || (v22 >= v10 ? (v24 = v20) : (v24 = v21), v10 < *((_DWORD *)v24 + 8)))
LABEL_32:
    v56 = 0;
  v58 = &v56;
  v25 = sub_100234F30(&v49, &v56, (uint64_t)&unk_100472CF8, &v58);
  sub_100233560((uint64_t *)&v47, (uint64_t)(v25 + 5));
  v26 = v48[0];
  if (!v48[0])
    goto LABEL_43;
  v27 = v48;
  do
  {
    v28 = v26;
    v29 = v27;
    v30 = *((_DWORD *)v26 + 8);
    v31 = v26 + 1;
    if (v30 >= v11)
    {
      v31 = v28;
      v27 = (_QWORD **)v28;
    }
    v26 = (_QWORD *)*v31;
  }
  while (v26);
  if (v27 == v48 || (v30 >= v11 ? (v32 = v28) : (v32 = v29), v11 < *((_DWORD *)v32 + 8)))
LABEL_43:
    v53 = 0;
  v58 = &v53;
  v33 = sub_100235560((uint64_t)&v47, &v53, (uint64_t)&unk_100472CF8, &v58);
  *(_OWORD *)a5 = *(_OWORD *)(v33 + 5);
  v34 = sub_100232898((uint64_t *)(a5 + 16), (uint64_t)(v33 + 7));
  v35 = *((_OWORD *)v33 + 5);
  v36 = *((_OWORD *)v33 + 6);
  *(_OWORD *)(a5 + 72) = *((_OWORD *)v33 + 7);
  *(_OWORD *)(a5 + 56) = v36;
  *(_OWORD *)(a5 + 40) = v35;
  v37 = *((_OWORD *)v33 + 8);
  v38 = *((_OWORD *)v33 + 9);
  v39 = *((_OWORD *)v33 + 10);
  *(_OWORD *)(a5 + 136) = *((_OWORD *)v33 + 11);
  *(_OWORD *)(a5 + 120) = v39;
  *(_OWORD *)(a5 + 104) = v38;
  *(_OWORD *)(a5 + 88) = v37;
  v40 = *((_OWORD *)v33 + 12);
  v41 = *((_OWORD *)v33 + 13);
  v42 = *((_OWORD *)v33 + 14);
  *(_OWORD *)(a5 + 200) = *((_OWORD *)v33 + 15);
  *(_OWORD *)(a5 + 184) = v42;
  *(_OWORD *)(a5 + 168) = v41;
  *(_OWORD *)(a5 + 152) = v40;
  v43 = *((_OWORD *)v33 + 16);
  v44 = *((_OWORD *)v33 + 17);
  v45 = *((_OWORD *)v33 + 18);
  *(_OWORD *)(a5 + 264) = *((_OWORD *)v33 + 19);
  *(_OWORD *)(a5 + 248) = v45;
  *(_OWORD *)(a5 + 232) = v44;
  *(_OWORD *)(a5 + 216) = v43;
  sub_10022F070((uint64_t)v34, a5, &v57, (__int128 *)a3, (const void **)a4, (__int128 *)&v56, (__int128 *)&v53);
  sub_10022F950(v46, a5, &v57, (uint64_t *)a3, (uint64_t *)a4, &v56, &v53);
  sub_1002332FC((uint64_t)&v47, v48[0]);
  sub_1002332B0((uint64_t)&v49, v50[0]);
}

void sub_100232204(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_100232270(_QWORD *__dst, __int128 *a2, uint64_t a3)
{
  __int128 v5;

  if (*((char *)a2 + 23) < 0)
  {
    sub_100004678(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    __dst[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v5;
  }
  sub_100232D84(__dst + 3, a3);
  return __dst;
}

void sub_1002322CC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

char *sub_1002322E8(char *__dst, __int128 *a2, _OWORD *a3)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;

  if (*((char *)a2 + 23) < 0)
  {
    sub_100004678(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v5;
  }
  *(_OWORD *)(__dst + 24) = *a3;
  sub_100232898((uint64_t *)__dst + 5, (uint64_t)(a3 + 1));
  v6 = *(_OWORD *)((char *)a3 + 40);
  v7 = *(_OWORD *)((char *)a3 + 72);
  *((_OWORD *)__dst + 5) = *(_OWORD *)((char *)a3 + 56);
  *((_OWORD *)__dst + 6) = v7;
  *((_OWORD *)__dst + 4) = v6;
  v8 = *(_OWORD *)((char *)a3 + 88);
  v9 = *(_OWORD *)((char *)a3 + 104);
  v10 = *(_OWORD *)((char *)a3 + 136);
  *((_OWORD *)__dst + 9) = *(_OWORD *)((char *)a3 + 120);
  *((_OWORD *)__dst + 10) = v10;
  *((_OWORD *)__dst + 7) = v8;
  *((_OWORD *)__dst + 8) = v9;
  v11 = *(_OWORD *)((char *)a3 + 152);
  v12 = *(_OWORD *)((char *)a3 + 168);
  v13 = *(_OWORD *)((char *)a3 + 200);
  *((_OWORD *)__dst + 13) = *(_OWORD *)((char *)a3 + 184);
  *((_OWORD *)__dst + 14) = v13;
  *((_OWORD *)__dst + 11) = v11;
  *((_OWORD *)__dst + 12) = v12;
  v14 = *(_OWORD *)((char *)a3 + 216);
  v15 = *(_OWORD *)((char *)a3 + 232);
  v16 = *(_OWORD *)((char *)a3 + 264);
  *((_OWORD *)__dst + 17) = *(_OWORD *)((char *)a3 + 248);
  *((_OWORD *)__dst + 18) = v16;
  *((_OWORD *)__dst + 15) = v14;
  *((_OWORD *)__dst + 16) = v15;
  return __dst;
}

void sub_1002323AC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1002323C8(_QWORD *__dst, __int128 *a2, const void ***a3)
{
  __int128 v5;

  if (*((char *)a2 + 23) < 0)
  {
    sub_100004678(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    __dst[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v5;
  }
  sub_100233E80(__dst + 3, a3);
  return __dst;
}

void sub_100232424(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_100232440(_QWORD *__dst, __int128 *a2, uint64_t a3)
{
  __int128 v5;

  if (*((char *)a2 + 23) < 0)
  {
    sub_100004678(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    __dst[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v5;
  }
  sub_100233560(__dst + 3, a3);
  return __dst;
}

void sub_10023249C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t **sub_1002324B8(uint64_t **result, _QWORD *a2, _QWORD *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  _QWORD *v9;
  _QWORD *v10;
  BOOL v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t *v16;

  v5 = result;
  if (result[2])
  {
    v6 = *result;
    v7 = result[1];
    *result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1])
      v8 = (uint64_t *)v6[1];
    else
      v8 = v6;
    v14 = result;
    v15 = v8;
    v16 = v8;
    if (v8)
    {
      v15 = sub_100153A8C((uint64_t)v8);
      if (a2 != a3)
      {
        v9 = a2;
        do
        {
          v8[4] = v9[4];
          sub_100232618(v5, (uint64_t)v8);
          v8 = v15;
          v16 = v15;
          if (v15)
            v15 = sub_100153A8C((uint64_t)v15);
          v10 = (_QWORD *)v9[1];
          if (v10)
          {
            do
            {
              a2 = v10;
              v10 = (_QWORD *)*v10;
            }
            while (v10);
          }
          else
          {
            do
            {
              a2 = (_QWORD *)v9[2];
              v11 = *a2 == (_QWORD)v9;
              v9 = a2;
            }
            while (!v11);
          }
          if (!v8)
            break;
          v9 = a2;
        }
        while (a2 != a3);
      }
    }
    result = (uint64_t **)sub_100153AE0((uint64_t)&v14);
  }
  if (a2 != a3)
  {
    do
    {
      result = (uint64_t **)sub_100232684(v5, (double *)a2 + 4);
      v12 = (_QWORD *)a2[1];
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (_QWORD *)a2[2];
          v11 = *v13 == (_QWORD)a2;
          a2 = v13;
        }
        while (!v11);
      }
      a2 = v13;
    }
    while (v13 != a3);
  }
  return result;
}

void sub_100232604(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100153AE0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100232618(uint64_t **a1, uint64_t a2)
{
  uint64_t **v3;
  uint64_t *v4;
  uint64_t **v5;

  v3 = a1 + 1;
  v4 = a1[1];
  if (v4)
  {
    do
    {
      while (1)
      {
        v3 = (uint64_t **)v4;
        if (*(double *)(a2 + 32) <= *((double *)v4 + 4))
          break;
        v4 = (uint64_t *)*v4;
        v5 = v3;
        if (!*v3)
          goto LABEL_8;
      }
      v4 = (uint64_t *)v4[1];
    }
    while (v4);
    v5 = v3 + 1;
  }
  else
  {
    v5 = a1 + 1;
  }
LABEL_8:
  sub_1000272A8(a1, (uint64_t)v3, v5, (uint64_t *)a2);
  return a2;
}

uint64_t *sub_100232684(uint64_t **a1, double *a2)
{
  uint64_t *v4;
  double v5;
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;

  v4 = (uint64_t *)operator new(0x28uLL);
  v5 = *a2;
  v4[4] = *(_QWORD *)a2;
  v6 = a1 + 1;
  v7 = a1[1];
  if (v7)
  {
    do
    {
      while (1)
      {
        v6 = (uint64_t **)v7;
        if (v5 <= *((double *)v7 + 4))
          break;
        v7 = (uint64_t *)*v7;
        v8 = v6;
        if (!*v6)
          goto LABEL_8;
      }
      v7 = (uint64_t *)v7[1];
    }
    while (v7);
    v8 = v6 + 1;
  }
  else
  {
    v8 = a1 + 1;
  }
LABEL_8:
  sub_1000272A8(a1, (uint64_t)v6, v8, v4);
  return v4;
}

uint64_t sub_100232710(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a3)
  {
    v6 = 16 * a3;
    do
    {
      sub_10023278C((uint64_t **)a1, v4, a2, (uint64_t)a2);
      a2 += 4;
      v6 -= 16;
    }
    while (v6);
  }
  return a1;
}

void sub_100232774(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100184188(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

_DWORD *sub_10023278C(uint64_t **a1, uint64_t *a2, int *a3, uint64_t a4)
{
  uint64_t *v6;
  _DWORD *v7;
  uint64_t **v8;
  uint64_t v10;
  uint64_t *v11;

  v6 = sub_1002124E0(a1, a2, &v11, &v10, a3);
  v7 = (_DWORD *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x30uLL);
    v7[8] = *(_DWORD *)a4;
    *((_QWORD *)v7 + 5) = *(id *)(a4 + 8);
    sub_1000272A8(a1, (uint64_t)v11, v8, (uint64_t *)v7);
  }
  return v7;
}

uint64_t sub_10023281C(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a3)
  {
    v6 = 16 * a3;
    do
    {
      sub_10023278C((uint64_t **)a1, v4, a2, (uint64_t)a2);
      a2 += 4;
      v6 -= 16;
    }
    while (v6);
  }
  return a1;
}

void sub_100232880(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100184188(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_100232898(uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_1002328EC(a1, *(double **)a2, (double *)(a2 + 8));
  return a1;
}

void sub_1002328D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10003E3F0(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_1002328EC(uint64_t *result, double *a2, double *a3)
{
  double *v4;
  uint64_t **v5;
  double *v6;
  double *v7;
  double *v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = (double *)(result + 1);
    do
    {
      result = sub_1001825A8(v5, v6, v4 + 4, (uint64_t *)v4 + 4);
      v7 = (double *)*((_QWORD *)v4 + 1);
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = *(double **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (double *)*((_QWORD *)v4 + 2);
          v9 = *(_QWORD *)v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t sub_100232970(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a3)
  {
    v6 = 32 * a3;
    do
    {
      sub_1002329EC((uint64_t **)a1, v4, a2, (uint64_t)a2);
      a2 += 8;
      v6 -= 32;
    }
    while (v6);
  }
  return a1;
}

void sub_1002329D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1001D9568(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_1002329EC(uint64_t **a1, uint64_t *a2, unsigned int *a3, uint64_t a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;

  v6 = (uint64_t **)sub_100232A6C(a1, a2, &v10, &v9, a3);
  result = *v6;
  if (!*v6)
  {
    sub_100232C14((uint64_t)a1, a4, (uint64_t)&v8);
    sub_1000272A8(a1, (uint64_t)v10, v6, v8);
    return v8;
  }
  return result;
}

uint64_t *sub_100232A6C(_QWORD *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, unsigned int *a5)
{
  uint64_t *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  BOOL v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t *v17;
  unsigned int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  unsigned int v22;

  v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, v7 = *((_DWORD *)a2 + 8), *a5 < v7))
  {
    v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      v9 = (uint64_t *)*a2;
      do
      {
        v10 = v9;
        v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      v13 = a2;
      do
      {
        v10 = (uint64_t *)v13[2];
        v14 = *v10 == (_QWORD)v13;
        v13 = v10;
      }
      while (v14);
    }
    v15 = *a5;
    if (*((_DWORD *)v10 + 8) < *a5)
      goto LABEL_17;
    v16 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v17 = (uint64_t *)v16;
          v18 = *(_DWORD *)(v16 + 32);
          if (v15 >= v18)
            break;
          v16 = *v17;
          v5 = v17;
          if (!*v17)
            goto LABEL_29;
        }
        if (v18 >= v15)
          break;
        v5 = v17 + 1;
        v16 = v17[1];
      }
      while (v16);
    }
    else
    {
      v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }
  v11 = a2[1];
  if (v11)
  {
    v12 = (uint64_t *)a2[1];
    do
    {
      a4 = v12;
      v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  else
  {
    v19 = a2;
    do
    {
      a4 = (uint64_t *)v19[2];
      v14 = *a4 == (_QWORD)v19;
      v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= *((_DWORD *)a4 + 8))
  {
    v20 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v21 = (uint64_t *)v20;
          v22 = *(_DWORD *)(v20 + 32);
          if (v6 >= v22)
            break;
          v20 = *v21;
          v5 = v21;
          if (!*v21)
            goto LABEL_48;
        }
        if (v22 >= v6)
          break;
        v5 = v21 + 1;
        v20 = v21[1];
      }
      while (v20);
    }
    else
    {
      v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

_QWORD *sub_100232C14@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _DWORD *v6;
  _QWORD *result;

  v5 = a1 + 8;
  v6 = operator new(0x40uLL);
  *(_QWORD *)(a3 + 8) = v5;
  *(_QWORD *)a3 = v6;
  *(_BYTE *)(a3 + 16) = 0;
  v6[8] = *(_DWORD *)a2;
  result = v6 + 10;
  if (*(char *)(a2 + 31) < 0)
  {
    result = sub_100004678(result, *(void **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    *(_OWORD *)result = *(_OWORD *)(a2 + 8);
    result[2] = *(_QWORD *)(a2 + 24);
  }
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_100232CA0(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  sub_100232CBC(v3, v2);
  _Unwind_Resume(a1);
}

void sub_100232CBC(uint64_t a1, void **__p)
{
  if (*(_BYTE *)(a1 + 8))
  {
    if (*((char *)__p + 63) < 0)
      operator delete(__p[5]);
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

uint64_t sub_100232D08(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a3)
  {
    v6 = 16 * a3;
    do
    {
      sub_10021245C((uint64_t **)a1, v4, a2, a2);
      a2 += 4;
      v6 -= 16;
    }
    while (v6);
  }
  return a1;
}

void sub_100232D6C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10003E3F0(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_100232D84(uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_100232DD8(a1, *(int **)a2, (int *)(a2 + 8));
  return a1;
}

void sub_100232DC0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10003E3F0(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_100232DD8(uint64_t *result, int *a2, int *a3)
{
  int *v4;
  uint64_t **v5;
  uint64_t *v6;
  int *v7;
  int *v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = sub_10021245C(v5, v6, v4 + 8, (_OWORD *)v4 + 2);
      v7 = (int *)*((_QWORD *)v4 + 1);
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = *(int **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (int *)*((_QWORD *)v4 + 2);
          v9 = *(_QWORD *)v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t sub_100232E5C(uint64_t a1, const void **a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a3)
  {
    v6 = 48 * a3;
    do
    {
      sub_100232EDC((uint64_t **)a1, v4, a2, (__int128 *)a2);
      a2 += 6;
      v6 -= 48;
    }
    while (v6);
  }
  return a1;
}

void sub_100232EC4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100233268(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_100232EDC(uint64_t **a1, uint64_t *a2, const void **a3, __int128 *a4)
{
  const void **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;
  const void **v12;

  v6 = sub_100232F70(a1, a2, &v12, &v11, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    sub_100233108((uint64_t)a1, a4, (uint64_t)v10);
    sub_1000272A8(a1, (uint64_t)v12, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    sub_1002331E4((uint64_t)v10, 0);
  }
  return v7;
}

const void **sub_100232F70(_QWORD *a1, uint64_t *a2, const void ***a3, uint64_t *a4, const void **a5)
{
  const void **v9;
  const void **v11;
  const void **v12;
  uint64_t v13;
  const void **v14;
  const void **v15;
  uint64_t *v16;
  BOOL v17;
  const void **v18;

  v9 = (const void **)(a1 + 1);
  if (a1 + 1 == a2 || sub_1000272FC((uint64_t)(a1 + 2), a5, (const void **)a2 + 4))
  {
    if ((uint64_t *)*a1 == a2)
    {
      v12 = (const void **)a2;
LABEL_16:
      if (*a2)
      {
        *a3 = v12;
        return v12 + 1;
      }
      else
      {
        *a3 = (const void **)a2;
        return (const void **)a2;
      }
    }
    v11 = (const void **)*a2;
    if (*a2)
    {
      do
      {
        v12 = v11;
        v11 = (const void **)v11[1];
      }
      while (v11);
    }
    else
    {
      v16 = a2;
      do
      {
        v12 = (const void **)v16[2];
        v17 = *v12 == v16;
        v16 = (uint64_t *)v12;
      }
      while (v17);
    }
    if (sub_1000272FC((uint64_t)(a1 + 2), v12 + 4, a5))
      goto LABEL_16;
    return (const void **)sub_1000271A4((uint64_t)a1, a3, a5);
  }
  if (sub_1000272FC((uint64_t)(a1 + 2), (const void **)a2 + 4, a5))
  {
    a4 = a2 + 1;
    v13 = a2[1];
    if (v13)
    {
      v14 = (const void **)a2[1];
      do
      {
        v15 = v14;
        v14 = (const void **)*v14;
      }
      while (v14);
    }
    else
    {
      v18 = (const void **)a2;
      do
      {
        v15 = (const void **)v18[2];
        v17 = *v15 == v18;
        v18 = v15;
      }
      while (!v17);
    }
    if (v15 != v9)
    {
      if (!sub_1000272FC((uint64_t)(a1 + 2), a5, v15 + 4))
        return (const void **)sub_1000271A4((uint64_t)a1, a3, a5);
      v13 = *a4;
    }
    if (v13)
    {
      *a3 = v15;
      return v15;
    }
    else
    {
      *a3 = (const void **)a2;
    }
    return (const void **)a4;
  }
  *a3 = (const void **)a2;
  *a4 = (uint64_t)a2;
  return (const void **)a4;
}

_QWORD *sub_100233108@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  _QWORD *result;

  v5 = a1 + 8;
  v6 = operator new(0x50uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = sub_100233170(v6 + 4, a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_100233158(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1002331E4(v1, 0);
  _Unwind_Resume(a1);
}

_QWORD *sub_100233170(_QWORD *__dst, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    sub_100004678(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    __dst[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  sub_100232D84(__dst + 3, (uint64_t)a2 + 24);
  return __dst;
}

void sub_1002331C8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void sub_1002331E4(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_100233228((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

void sub_100233228(uint64_t a1)
{
  sub_10003E3F0(a1 + 24, *(_QWORD **)(a1 + 32));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void sub_100233268(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_100233268(a1, *a2);
    sub_100233268(a1, a2[1]);
    sub_100233228((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void sub_1002332B0(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_1002332B0(a1, *a2);
    sub_1002332B0(a1, a2[1]);
    sub_1002332FC((uint64_t)(a2 + 5), (_QWORD *)a2[6]);
    operator delete(a2);
  }
}

void sub_1002332FC(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_1002332FC(a1, *a2);
    sub_1002332FC(a1, a2[1]);
    sub_10003E3F0((uint64_t)(a2 + 7), (_QWORD *)a2[8]);
    operator delete(a2);
  }
}

uint64_t sub_100233348(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a3)
  {
    v6 = 288 * a3;
    do
    {
      sub_1002333C8((uint64_t **)a1, v4, a2, (uint64_t)a2);
      a2 += 72;
      v6 -= 288;
    }
    while (v6);
  }
  return a1;
}

void sub_1002333B0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1002332FC(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_1002333C8(uint64_t **a1, uint64_t *a2, int *a3, uint64_t a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;

  v6 = (uint64_t **)sub_1002124E0(a1, a2, &v10, &v9, a3);
  result = *v6;
  if (!*v6)
  {
    sub_100233448((uint64_t)a1, a4, (uint64_t)&v8);
    sub_1000272A8(a1, (uint64_t)v10, v6, v8);
    return v8;
  }
  return result;
}

__n128 sub_100233448@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __n128 result;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x140uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  *((_DWORD *)v6 + 8) = *(_DWORD *)a2;
  *(_OWORD *)(v6 + 40) = *(_OWORD *)(a2 + 8);
  sub_100232898((uint64_t *)v6 + 7, a2 + 24);
  v7 = *(_OWORD *)(a2 + 256);
  *((_OWORD *)v6 + 17) = *(_OWORD *)(a2 + 240);
  *((_OWORD *)v6 + 18) = v7;
  *((_OWORD *)v6 + 19) = *(_OWORD *)(a2 + 272);
  v8 = *(_OWORD *)(a2 + 192);
  *((_OWORD *)v6 + 13) = *(_OWORD *)(a2 + 176);
  *((_OWORD *)v6 + 14) = v8;
  v9 = *(_OWORD *)(a2 + 224);
  *((_OWORD *)v6 + 15) = *(_OWORD *)(a2 + 208);
  *((_OWORD *)v6 + 16) = v9;
  v10 = *(_OWORD *)(a2 + 128);
  *((_OWORD *)v6 + 9) = *(_OWORD *)(a2 + 112);
  *((_OWORD *)v6 + 10) = v10;
  v11 = *(_OWORD *)(a2 + 160);
  *((_OWORD *)v6 + 11) = *(_OWORD *)(a2 + 144);
  *((_OWORD *)v6 + 12) = v11;
  v12 = *(_OWORD *)(a2 + 64);
  *((_OWORD *)v6 + 5) = *(_OWORD *)(a2 + 48);
  *((_OWORD *)v6 + 6) = v12;
  result = *(__n128 *)(a2 + 96);
  *((_OWORD *)v6 + 7) = *(_OWORD *)(a2 + 80);
  *((__n128 *)v6 + 8) = result;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_1002334FC(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD **v2;
  uint64_t v3;

  *v1 = 0;
  sub_100233518(v3, v2);
  _Unwind_Resume(a1);
}

void sub_100233518(uint64_t a1, _QWORD **a2)
{
  if (*(_BYTE *)(a1 + 8))
  {
    sub_10003E3F0((uint64_t)(a2 + 7), a2[8]);
  }
  else if (!a2)
  {
    return;
  }
  operator delete(a2);
}

uint64_t *sub_100233560(uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_1002335B4(a1, *(int **)a2, (int *)(a2 + 8));
  return a1;
}

void sub_10023359C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1002332FC(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_1002335B4(uint64_t *result, int *a2, int *a3)
{
  int *v4;
  uint64_t **v5;
  uint64_t *v6;
  int *v7;
  int *v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = sub_1002333C8(v5, v6, v4 + 8, (uint64_t)(v4 + 8));
      v7 = (int *)*((_QWORD *)v4 + 1);
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = *(int **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (int *)*((_QWORD *)v4 + 2);
          v9 = *(_QWORD *)v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t sub_100233638(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a3)
  {
    v6 = 32 * a3;
    do
    {
      sub_1002336B4((uint64_t **)a1, v4, a2, a2);
      a2 += 8;
      v6 -= 32;
    }
    while (v6);
  }
  return a1;
}

void sub_10023369C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1002332B0(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_1002336B4(uint64_t **a1, uint64_t *a2, int *a3, _DWORD *a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;

  v6 = (uint64_t **)sub_1002124E0(a1, a2, &v10, &v9, a3);
  result = *v6;
  if (!*v6)
  {
    sub_100233734((uint64_t)a1, a4, (uint64_t)&v8);
    sub_1000272A8(a1, (uint64_t)v10, v6, v8);
    return v8;
  }
  return result;
}

uint64_t *sub_100233734@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  void *v6;
  uint64_t *result;

  v5 = a1 + 8;
  v6 = operator new(0x40uLL);
  *(_QWORD *)(a3 + 8) = v5;
  *(_QWORD *)a3 = v6;
  *(_BYTE *)(a3 + 16) = 0;
  *((_DWORD *)v6 + 8) = *a2;
  result = sub_100233560((uint64_t *)v6 + 5, (uint64_t)(a2 + 2));
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_1002337A0(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD **v2;
  uint64_t v3;

  *v1 = 0;
  sub_1002337BC(v3, v2);
  _Unwind_Resume(a1);
}

void sub_1002337BC(uint64_t a1, _QWORD **a2)
{
  if (*(_BYTE *)(a1 + 8))
  {
    sub_1002332FC((uint64_t)(a2 + 5), a2[6]);
  }
  else if (!a2)
  {
    return;
  }
  operator delete(a2);
}

uint64_t *sub_100233804(uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_100233858(a1, *(int **)a2, (int *)(a2 + 8));
  return a1;
}

void sub_100233840(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1002332B0(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_100233858(uint64_t *result, int *a2, int *a3)
{
  int *v4;
  uint64_t **v5;
  uint64_t *v6;
  int *v7;
  int *v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = sub_1002336B4(v5, v6, v4 + 8, v4 + 8);
      v7 = (int *)*((_QWORD *)v4 + 1);
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = *(int **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (int *)*((_QWORD *)v4 + 2);
          v9 = *(_QWORD *)v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t sub_1002338DC(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a3)
  {
    v6 = 32 * a3;
    do
    {
      sub_100233958((uint64_t **)a1, v4, a2, a2);
      a2 += 8;
      v6 -= 32;
    }
    while (v6);
  }
  return a1;
}

void sub_100233940(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100233AA8(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_100233958(uint64_t **a1, uint64_t *a2, int *a3, _DWORD *a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;

  v6 = (uint64_t **)sub_1002124E0(a1, a2, &v10, &v9, a3);
  result = *v6;
  if (!*v6)
  {
    sub_1002339D8((uint64_t)a1, a4, (uint64_t)&v8);
    sub_1000272A8(a1, (uint64_t)v10, v6, v8);
    return v8;
  }
  return result;
}

uint64_t *sub_1002339D8@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  void *v6;
  uint64_t *result;

  v5 = a1 + 8;
  v6 = operator new(0x40uLL);
  *(_QWORD *)(a3 + 8) = v5;
  *(_QWORD *)a3 = v6;
  *(_BYTE *)(a3 + 16) = 0;
  *((_DWORD *)v6 + 8) = *a2;
  result = sub_100233804((uint64_t *)v6 + 5, (uint64_t)(a2 + 2));
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_100233A44(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD **v2;
  uint64_t v3;

  *v1 = 0;
  sub_100233A60(v3, v2);
  _Unwind_Resume(a1);
}

void sub_100233A60(uint64_t a1, _QWORD **a2)
{
  if (*(_BYTE *)(a1 + 8))
  {
    sub_1002332B0((uint64_t)(a2 + 5), a2[6]);
  }
  else if (!a2)
  {
    return;
  }
  operator delete(a2);
}

void sub_100233AA8(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_100233AA8(a1, *a2);
    sub_100233AA8(a1, a2[1]);
    sub_1002332B0((uint64_t)(a2 + 5), (_QWORD *)a2[6]);
    operator delete(a2);
  }
}

void sub_100233AF4(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_100233AF4(a1, *a2);
    sub_100233AF4(a1, a2[1]);
    sub_100233B3C((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void sub_100233B3C(uint64_t a1)
{
  sub_100233B7C(a1 + 24, *(_QWORD **)(a1 + 32));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void sub_100233B7C(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_100233B7C(a1, *a2);
    sub_100233B7C(a1, a2[1]);
    sub_100233BC4((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void sub_100233BC4(uint64_t a1)
{
  sub_10003E3F0(a1 + 40, *(_QWORD **)(a1 + 48));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t sub_100233C04(uint64_t a1, const void **a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a3)
  {
    v6 = 304 * a3;
    do
    {
      sub_100233C84((uint64_t **)a1, v4, a2, (__int128 *)a2);
      a2 += 38;
      v6 -= 304;
    }
    while (v6);
  }
  return a1;
}

void sub_100233C6C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100233B7C(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_100233C84(uint64_t **a1, uint64_t *a2, const void **a3, __int128 *a4)
{
  const void **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;
  const void **v12;

  v6 = sub_100232F70(a1, a2, &v12, &v11, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    sub_100233D18((uint64_t)a1, a4, (uint64_t)v10);
    sub_1000272A8(a1, (uint64_t)v12, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    sub_100233E3C((uint64_t)v10, 0);
  }
  return v7;
}

char *sub_100233D18@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  char *result;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x150uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = sub_100233D80(v6 + 32, a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_100233D68(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100233E3C(v1, 0);
  _Unwind_Resume(a1);
}

char *sub_100233D80(char *__dst, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;

  if (*((char *)a2 + 23) < 0)
  {
    sub_100004678(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  *(_OWORD *)(__dst + 24) = *(__int128 *)((char *)a2 + 24);
  sub_100232898((uint64_t *)__dst + 5, (uint64_t)a2 + 40);
  v5 = a2[4];
  v6 = a2[6];
  *((_OWORD *)__dst + 5) = a2[5];
  *((_OWORD *)__dst + 6) = v6;
  *((_OWORD *)__dst + 4) = v5;
  v7 = a2[7];
  v8 = a2[8];
  v9 = a2[10];
  *((_OWORD *)__dst + 9) = a2[9];
  *((_OWORD *)__dst + 10) = v9;
  *((_OWORD *)__dst + 7) = v7;
  *((_OWORD *)__dst + 8) = v8;
  v10 = a2[11];
  v11 = a2[12];
  v12 = a2[14];
  *((_OWORD *)__dst + 13) = a2[13];
  *((_OWORD *)__dst + 14) = v12;
  *((_OWORD *)__dst + 11) = v10;
  *((_OWORD *)__dst + 12) = v11;
  v13 = a2[15];
  v14 = a2[16];
  v15 = a2[18];
  *((_OWORD *)__dst + 17) = a2[17];
  *((_OWORD *)__dst + 18) = v15;
  *((_OWORD *)__dst + 15) = v13;
  *((_OWORD *)__dst + 16) = v14;
  return __dst;
}

void sub_100233E20(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void sub_100233E3C(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_100233BC4((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

uint64_t *sub_100233E80(uint64_t *a1, const void ***a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_100233ED4(a1, *a2, a2 + 1);
  return a1;
}

void sub_100233EBC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100233B7C(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_100233ED4(uint64_t *result, const void **a2, const void ***a3)
{
  const void **v4;
  uint64_t **v5;
  uint64_t *v6;
  const void **v7;
  const void ***v8;
  BOOL v9;

  if (a2 != (const void **)a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = sub_100233C84(v5, v6, v4 + 4, (__int128 *)v4 + 2);
      v7 = (const void **)v4[1];
      if (v7)
      {
        do
        {
          v8 = (const void ***)v7;
          v7 = (const void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (const void ***)v4[2];
          v9 = *v8 == v4;
          v4 = (const void **)v8;
        }
        while (!v9);
      }
      v4 = (const void **)v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t sub_100233F58(uint64_t a1, const void **a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a3)
  {
    v6 = 48 * a3;
    do
    {
      sub_100233FD8((uint64_t **)a1, v4, a2, (__int128 *)a2);
      a2 += 6;
      v6 -= 48;
    }
    while (v6);
  }
  return a1;
}

void sub_100233FC0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100233AF4(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_100233FD8(uint64_t **a1, uint64_t *a2, const void **a3, __int128 *a4)
{
  const void **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;
  const void **v12;

  v6 = sub_100232F70(a1, a2, &v12, &v11, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    sub_10023406C((uint64_t)a1, a4, (uint64_t)v10);
    sub_1000272A8(a1, (uint64_t)v12, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    sub_100234148((uint64_t)v10, 0);
  }
  return v7;
}

_QWORD *sub_10023406C@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  _QWORD *result;

  v5 = a1 + 8;
  v6 = operator new(0x50uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = sub_1002340D4(v6 + 4, a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_1002340BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100234148(v1, 0);
  _Unwind_Resume(a1);
}

_QWORD *sub_1002340D4(_QWORD *__dst, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    sub_100004678(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    __dst[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  sub_100233E80(__dst + 3, (const void ***)a2 + 3);
  return __dst;
}

void sub_10023412C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void sub_100234148(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_100233B3C((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

uint64_t *sub_10023418C(uint64_t *a1, const void ***a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_1002341E0(a1, *a2, a2 + 1);
  return a1;
}

void sub_1002341C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100233AF4(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_1002341E0(uint64_t *result, const void **a2, const void ***a3)
{
  const void **v4;
  uint64_t **v5;
  uint64_t *v6;
  const void **v7;
  const void ***v8;
  BOOL v9;

  if (a2 != (const void **)a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = sub_100233FD8(v5, v6, v4 + 4, (__int128 *)v4 + 2);
      v7 = (const void **)v4[1];
      if (v7)
      {
        do
        {
          v8 = (const void ***)v7;
          v7 = (const void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (const void ***)v4[2];
          v9 = *v8 == v4;
          v4 = (const void **)v8;
        }
        while (!v9);
      }
      v4 = (const void **)v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t sub_100234264(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a3)
  {
    v6 = 32 * a3;
    do
    {
      sub_1002342E0((uint64_t **)a1, v4, a2, (uint64_t)a2);
      a2 += 8;
      v6 -= 32;
    }
    while (v6);
  }
  return a1;
}

void sub_1002342C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100234430(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_1002342E0(uint64_t **a1, uint64_t *a2, int *a3, uint64_t a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;

  v6 = (uint64_t **)sub_1002124E0(a1, a2, &v10, &v9, a3);
  result = *v6;
  if (!*v6)
  {
    sub_100234360((uint64_t)a1, a4, (uint64_t)&v8);
    sub_1000272A8(a1, (uint64_t)v10, v6, v8);
    return v8;
  }
  return result;
}

uint64_t *sub_100234360@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  void *v6;
  uint64_t *result;

  v5 = a1 + 8;
  v6 = operator new(0x40uLL);
  *(_QWORD *)(a3 + 8) = v5;
  *(_QWORD *)a3 = v6;
  *(_BYTE *)(a3 + 16) = 0;
  *((_DWORD *)v6 + 8) = *(_DWORD *)a2;
  result = sub_10023418C((uint64_t *)v6 + 5, (const void ***)(a2 + 8));
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_1002343CC(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD **v2;
  uint64_t v3;

  *v1 = 0;
  sub_1002343E8(v3, v2);
  _Unwind_Resume(a1);
}

void sub_1002343E8(uint64_t a1, _QWORD **a2)
{
  if (*(_BYTE *)(a1 + 8))
  {
    sub_100233AF4((uint64_t)(a2 + 5), a2[6]);
  }
  else if (!a2)
  {
    return;
  }
  operator delete(a2);
}

void sub_100234430(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_100234430(a1, *a2);
    sub_100234430(a1, a2[1]);
    sub_100233AF4((uint64_t)(a2 + 5), (_QWORD *)a2[6]);
    operator delete(a2);
  }
}

void sub_10023447C(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_10023447C(a1, *a2);
    sub_10023447C(a1, a2[1]);
    sub_100233B7C((uint64_t)(a2 + 5), (_QWORD *)a2[6]);
    operator delete(a2);
  }
}

uint64_t sub_1002344C8(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a3)
  {
    v6 = 32 * a3;
    do
    {
      sub_100234544((uint64_t **)a1, v4, a2, (uint64_t)a2);
      a2 += 8;
      v6 -= 32;
    }
    while (v6);
  }
  return a1;
}

void sub_10023452C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10023447C(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_100234544(uint64_t **a1, uint64_t *a2, int *a3, uint64_t a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;

  v6 = (uint64_t **)sub_1002124E0(a1, a2, &v10, &v9, a3);
  result = *v6;
  if (!*v6)
  {
    sub_1002345C4((uint64_t)a1, a4, (uint64_t)&v8);
    sub_1000272A8(a1, (uint64_t)v10, v6, v8);
    return v8;
  }
  return result;
}

uint64_t *sub_1002345C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  void *v6;
  uint64_t *result;

  v5 = a1 + 8;
  v6 = operator new(0x40uLL);
  *(_QWORD *)(a3 + 8) = v5;
  *(_QWORD *)a3 = v6;
  *(_BYTE *)(a3 + 16) = 0;
  *((_DWORD *)v6 + 8) = *(_DWORD *)a2;
  result = sub_100233E80((uint64_t *)v6 + 5, (const void ***)(a2 + 8));
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_100234630(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD **v2;
  uint64_t v3;

  *v1 = 0;
  sub_10023464C(v3, v2);
  _Unwind_Resume(a1);
}

void sub_10023464C(uint64_t a1, _QWORD **a2)
{
  if (*(_BYTE *)(a1 + 8))
  {
    sub_100233B7C((uint64_t)(a2 + 5), a2[6]);
  }
  else if (!a2)
  {
    return;
  }
  operator delete(a2);
}

uint64_t *sub_100234694(uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_1002346E8(a1, *(int **)a2, (int *)(a2 + 8));
  return a1;
}

void sub_1002346D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10023447C(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_1002346E8(uint64_t *result, int *a2, int *a3)
{
  int *v4;
  uint64_t **v5;
  uint64_t *v6;
  int *v7;
  int *v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = sub_100234544(v5, v6, v4 + 8, (uint64_t)(v4 + 8));
      v7 = (int *)*((_QWORD *)v4 + 1);
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = *(int **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (int *)*((_QWORD *)v4 + 2);
          v9 = *(_QWORD *)v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t sub_10023476C(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a3)
  {
    v6 = 32 * a3;
    do
    {
      sub_1002347E8((uint64_t **)a1, v4, a2, a2);
      a2 += 8;
      v6 -= 32;
    }
    while (v6);
  }
  return a1;
}

void sub_1002347D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100234938(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_1002347E8(uint64_t **a1, uint64_t *a2, int *a3, _DWORD *a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;

  v6 = (uint64_t **)sub_1002124E0(a1, a2, &v10, &v9, a3);
  result = *v6;
  if (!*v6)
  {
    sub_100234868((uint64_t)a1, a4, (uint64_t)&v8);
    sub_1000272A8(a1, (uint64_t)v10, v6, v8);
    return v8;
  }
  return result;
}

uint64_t *sub_100234868@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  void *v6;
  uint64_t *result;

  v5 = a1 + 8;
  v6 = operator new(0x40uLL);
  *(_QWORD *)(a3 + 8) = v5;
  *(_QWORD *)a3 = v6;
  *(_BYTE *)(a3 + 16) = 0;
  *((_DWORD *)v6 + 8) = *a2;
  result = sub_100234694((uint64_t *)v6 + 5, (uint64_t)(a2 + 2));
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_1002348D4(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD **v2;
  uint64_t v3;

  *v1 = 0;
  sub_1002348F0(v3, v2);
  _Unwind_Resume(a1);
}

void sub_1002348F0(uint64_t a1, _QWORD **a2)
{
  if (*(_BYTE *)(a1 + 8))
  {
    sub_10023447C((uint64_t)(a2 + 5), a2[6]);
  }
  else if (!a2)
  {
    return;
  }
  operator delete(a2);
}

void sub_100234938(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_100234938(a1, *a2);
    sub_100234938(a1, a2[1]);
    sub_10023447C((uint64_t)(a2 + 5), (_QWORD *)a2[6]);
    operator delete(a2);
  }
}

void sub_100234984(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_100234984(a1, *a2);
    sub_100234984(a1, a2[1]);
    sub_1002349CC((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void sub_1002349CC(uint64_t a1)
{
  sub_1002332FC(a1 + 24, *(_QWORD **)(a1 + 32));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t sub_100234A0C(uint64_t a1, const void **a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a3)
  {
    v6 = 48 * a3;
    do
    {
      sub_100234A8C((uint64_t **)a1, v4, a2, (__int128 *)a2);
      a2 += 6;
      v6 -= 48;
    }
    while (v6);
  }
  return a1;
}

void sub_100234A74(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100234984(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_100234A8C(uint64_t **a1, uint64_t *a2, const void **a3, __int128 *a4)
{
  const void **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;
  const void **v12;

  v6 = sub_100232F70(a1, a2, &v12, &v11, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    sub_100234B20((uint64_t)a1, a4, (uint64_t)v10);
    sub_1000272A8(a1, (uint64_t)v12, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    sub_100234BFC((uint64_t)v10, 0);
  }
  return v7;
}

_QWORD *sub_100234B20@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  _QWORD *result;

  v5 = a1 + 8;
  v6 = operator new(0x50uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = sub_100234B88(v6 + 4, a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_100234B70(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100234BFC(v1, 0);
  _Unwind_Resume(a1);
}

_QWORD *sub_100234B88(_QWORD *__dst, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    sub_100004678(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    __dst[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  sub_100233560(__dst + 3, (uint64_t)a2 + 24);
  return __dst;
}

void sub_100234BE0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void sub_100234BFC(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_1002349CC((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

uint64_t *sub_100234C40(uint64_t *a1, const void ***a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_100234C94(a1, *a2, a2 + 1);
  return a1;
}

void sub_100234C7C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100234984(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_100234C94(uint64_t *result, const void **a2, const void ***a3)
{
  const void **v4;
  uint64_t **v5;
  uint64_t *v6;
  const void **v7;
  const void ***v8;
  BOOL v9;

  if (a2 != (const void **)a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = sub_100234A8C(v5, v6, v4 + 4, (__int128 *)v4 + 2);
      v7 = (const void **)v4[1];
      if (v7)
      {
        do
        {
          v8 = (const void ***)v7;
          v7 = (const void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (const void ***)v4[2];
          v9 = *v8 == v4;
          v4 = (const void **)v8;
        }
        while (!v9);
      }
      v4 = (const void **)v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t sub_100234D18(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a3)
  {
    v6 = 32 * a3;
    do
    {
      sub_100234D94((uint64_t **)a1, v4, a2, (uint64_t)a2);
      a2 += 8;
      v6 -= 32;
    }
    while (v6);
  }
  return a1;
}

void sub_100234D7C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100234EE4(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_100234D94(uint64_t **a1, uint64_t *a2, int *a3, uint64_t a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;

  v6 = (uint64_t **)sub_1002124E0(a1, a2, &v10, &v9, a3);
  result = *v6;
  if (!*v6)
  {
    sub_100234E14((uint64_t)a1, a4, (uint64_t)&v8);
    sub_1000272A8(a1, (uint64_t)v10, v6, v8);
    return v8;
  }
  return result;
}

uint64_t *sub_100234E14@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  void *v6;
  uint64_t *result;

  v5 = a1 + 8;
  v6 = operator new(0x40uLL);
  *(_QWORD *)(a3 + 8) = v5;
  *(_QWORD *)a3 = v6;
  *(_BYTE *)(a3 + 16) = 0;
  *((_DWORD *)v6 + 8) = *(_DWORD *)a2;
  result = sub_100234C40((uint64_t *)v6 + 5, (const void ***)(a2 + 8));
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_100234E80(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD **v2;
  uint64_t v3;

  *v1 = 0;
  sub_100234E9C(v3, v2);
  _Unwind_Resume(a1);
}

void sub_100234E9C(uint64_t a1, _QWORD **a2)
{
  if (*(_BYTE *)(a1 + 8))
  {
    sub_100234984((uint64_t)(a2 + 5), a2[6]);
  }
  else if (!a2)
  {
    return;
  }
  operator delete(a2);
}

void sub_100234EE4(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_100234EE4(a1, *a2);
    sub_100234EE4(a1, a2[1]);
    sub_100234984((uint64_t)(a2 + 5), (_QWORD *)a2[6]);
    operator delete(a2);
  }
}

uint64_t **sub_100234F30(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  int v8;
  uint64_t **v9;
  int v10;
  _DWORD *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = operator new(0x40uLL);
    v11[8] = **a4;
    *((_QWORD *)v11 + 7) = 0;
    *((_QWORD *)v11 + 6) = 0;
    *((_QWORD *)v11 + 5) = v11 + 12;
    sub_1000272A8(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

uint64_t *sub_100234FFC(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)sub_1000271A4((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    sub_1002350A4((uint64_t)a1, a4, (uint64_t)v10);
    sub_1000272A8(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    sub_100234148((uint64_t)v10, 0);
  }
  return v7;
}

_BYTE *sub_1002350A4@<X0>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  _BYTE *result;
  __int128 *v8;
  __int128 v9;

  v5 = a1 + 8;
  v6 = operator new(0x50uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = v6 + 4;
  v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    result = sub_100004678(result, *(void **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    v6[6] = *((_QWORD *)v8 + 2);
    *(_OWORD *)result = v9;
  }
  v6[8] = 0;
  v6[9] = 0;
  v6[7] = v6 + 8;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_100235120(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100234148(v1, 0);
  _Unwind_Resume(a1);
}

uint64_t *sub_100235138(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)sub_1000271A4((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    sub_1002351E0((uint64_t)a1, a4, (uint64_t)v10);
    sub_1000272A8(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    sub_100233E3C((uint64_t)v10, 0);
  }
  return v7;
}

char *sub_1002351E0@<X0>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  char *result;
  __int128 *v8;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x150uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v8 = *a2;
  result = sub_10023525C(v6 + 32, &v8);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_100235244(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100233E3C(v1, 0);
  _Unwind_Resume(a1);
}

char *sub_10023525C(char *__dst, __int128 **a2)
{
  __int128 *v3;
  __int128 v4;
  unint64_t v11;

  v3 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    sub_100004678(__dst, *(void **)v3, *((_QWORD *)v3 + 1));
  }
  else
  {
    v4 = *v3;
    *((_QWORD *)__dst + 2) = *((_QWORD *)v3 + 2);
    *(_OWORD *)__dst = v4;
  }
  *(_OWORD *)(__dst + 40) = 0u;
  *((_QWORD *)__dst + 37) = 0;
  *(_OWORD *)(__dst + 232) = 0u;
  *(_OWORD *)(__dst + 248) = 0u;
  *(_OWORD *)(__dst + 200) = 0u;
  *(_OWORD *)(__dst + 216) = 0u;
  *(_OWORD *)(__dst + 168) = 0u;
  *(_OWORD *)(__dst + 184) = 0u;
  *(_OWORD *)(__dst + 136) = 0u;
  *(_OWORD *)(__dst + 152) = 0u;
  *(_OWORD *)(__dst + 104) = 0u;
  *(_OWORD *)(__dst + 120) = 0u;
  *(_OWORD *)(__dst + 72) = 0u;
  *(_OWORD *)(__dst + 88) = 0u;
  *(_OWORD *)(__dst + 56) = 0u;
  *(_OWORD *)(__dst + 264) = 0u;
  *(_OWORD *)(__dst + 280) = 0u;
  *((_QWORD *)__dst + 3) = 0x300000008;
  *((_QWORD *)__dst + 4) = 0xC04E800000000000;
  v11 = 0xC04E800000000000;
  sub_10018252C((uint64_t)(__dst + 40), (double *)&v11, 1);
  *((_OWORD *)__dst + 4) = xmmword_10046E0F0;
  *((_QWORD *)__dst + 10) = 0x4024000000000000;
  *((_DWORD *)__dst + 22) = 45;
  __dst[92] = 0;
  *((_DWORD *)__dst + 24) = 1;
  __dst[104] = 1;
  *((_OWORD *)__dst + 7) = xmmword_10046E100;
  *((_OWORD *)__dst + 8) = xmmword_10046E110;
  __asm { FMOV            V0.2D, #1.0 }
  *((_OWORD *)__dst + 9) = _Q0;
  *((_QWORD *)__dst + 20) = 0xC059000000000000;
  *(_OWORD *)(__dst + 168) = xmmword_10046E120;
  *((int32x2_t *)__dst + 23) = vdup_n_s32(0x3DCCCCCDu);
  *((_OWORD *)__dst + 12) = xmmword_10046E060;
  *((_QWORD *)__dst + 27) = 0;
  *((_QWORD *)__dst + 28) = 0;
  *((_QWORD *)__dst + 26) = 0x3FD999999999999ALL;
  *(_OWORD *)(__dst + 232) = xmmword_10046E070;
  *((_DWORD *)__dst + 62) = 5;
  *((_QWORD *)__dst + 32) = 0x4000000000000000;
  *((_DWORD *)__dst + 66) = 10;
  *((_QWORD *)__dst + 34) = 0x4034000000000000;
  *((_DWORD *)__dst + 70) = 3;
  *((_OWORD *)__dst + 18) = xmmword_10046E130;
  return __dst;
}

void sub_100235408(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_100235424(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)sub_1000271A4((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    sub_1002354CC((uint64_t)a1, a4, (uint64_t)v10);
    sub_1000272A8(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    sub_100234BFC((uint64_t)v10, 0);
  }
  return v7;
}

_BYTE *sub_1002354CC@<X0>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  _BYTE *result;
  __int128 *v8;
  __int128 v9;

  v5 = a1 + 8;
  v6 = operator new(0x50uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = v6 + 4;
  v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    result = sub_100004678(result, *(void **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    v6[6] = *((_QWORD *)v8 + 2);
    *(_OWORD *)result = v9;
  }
  v6[8] = 0;
  v6[9] = 0;
  v6[7] = v6 + 8;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_100235548(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100234BFC(v1, 0);
  _Unwind_Resume(a1);
}

uint64_t *sub_100235560(uint64_t a1, int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t *v5;
  uint64_t **v6;
  int v7;
  uint64_t **v8;
  int v9;
  uint64_t *v11;

  v6 = (uint64_t **)(a1 + 8);
  v5 = *(uint64_t **)(a1 + 8);
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = *((_DWORD *)v5 + 8);
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = (uint64_t **)(a1 + 8);
LABEL_10:
    sub_100235618(a1, a4, (uint64_t)&v11);
    sub_1000272A8((uint64_t **)a1, (uint64_t)v8, v6, v11);
    return v11;
  }
  return (uint64_t *)v8;
}

uint64_t sub_100235618@<X0>(uint64_t a1@<X0>, _DWORD **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  void *v6;
  uint64_t result;

  v5 = a1 + 8;
  v6 = operator new(0x140uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = sub_100235698((uint64_t)v6 + 32, *a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_10023567C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD **v2;
  uint64_t v3;

  *v1 = 0;
  sub_100233518(v3, v2);
  _Unwind_Resume(a1);
}

uint64_t sub_100235698(uint64_t a1, _DWORD *a2)
{
  unint64_t v9;

  *(_DWORD *)a1 = *a2;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_QWORD *)(a1 + 280) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_QWORD *)(a1 + 8) = 0x300000008;
  *(_QWORD *)(a1 + 16) = 0xC04E800000000000;
  v9 = 0xC04E800000000000;
  sub_10018252C(a1 + 24, (double *)&v9, 1);
  *(_OWORD *)(a1 + 48) = xmmword_10046E0F0;
  *(_QWORD *)(a1 + 64) = 0x4024000000000000;
  *(_DWORD *)(a1 + 72) = 45;
  *(_BYTE *)(a1 + 76) = 0;
  *(_DWORD *)(a1 + 80) = 1;
  *(_BYTE *)(a1 + 88) = 1;
  *(_OWORD *)(a1 + 96) = xmmword_10046E100;
  *(_OWORD *)(a1 + 112) = xmmword_10046E110;
  __asm { FMOV            V0.2D, #1.0 }
  *(_OWORD *)(a1 + 128) = _Q0;
  *(_QWORD *)(a1 + 144) = 0xC059000000000000;
  *(_OWORD *)(a1 + 152) = xmmword_10046E120;
  *(int32x2_t *)(a1 + 168) = vdup_n_s32(0x3DCCCCCDu);
  *(_OWORD *)(a1 + 176) = xmmword_10046E060;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 192) = 0x3FD999999999999ALL;
  *(_OWORD *)(a1 + 216) = xmmword_10046E070;
  *(_DWORD *)(a1 + 232) = 5;
  *(_QWORD *)(a1 + 240) = 0x4000000000000000;
  *(_DWORD *)(a1 + 248) = 10;
  *(_QWORD *)(a1 + 256) = 0x4034000000000000;
  *(_DWORD *)(a1 + 264) = 3;
  *(_OWORD *)(a1 + 272) = xmmword_10046E130;
  return a1;
}

uint64_t sub_100235838()
{
  uint64_t i;
  uint64_t j;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v33;
  _BYTE v34[8];
  _QWORD *v35;
  _BYTE v36[8];
  _QWORD *v37;
  __int128 v38;
  _QWORD *v39[3];
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  _OWORD v46[2];
  __int128 v47;
  __int128 v48;
  _OWORD v49[2];
  __int128 v50;
  __int128 v51;
  __int128 v52;
  _BYTE v53[8];
  _QWORD *v54;
  __int128 v55;
  _QWORD *v56[3];
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  _OWORD v63[2];
  __int128 v64;
  __int128 v65;
  _OWORD v66[2];
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  _QWORD *v71[3];
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  _OWORD v78[2];
  __int128 v79;
  __int128 v80;
  _OWORD v81[2];
  __int128 v82;
  __int128 v83;
  __int128 v84;
  _BYTE v85[8];
  _QWORD *v86;
  __int128 v87;
  _QWORD *v88[3];
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  _OWORD v95[2];
  __int128 v96;
  __int128 v97;
  _OWORD v98[2];
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  _QWORD *v103[3];
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  _OWORD v110[2];
  __int128 v111;
  __int128 v112;
  _OWORD v113[2];
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  _QWORD *v118[3];
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  _OWORD v125[2];
  __int128 v126;
  __int128 v127;
  _OWORD v128[2];
  __int128 v129;
  __int128 v130;
  __int128 v131;
  _BYTE v132[8];
  _QWORD *v133;
  _BYTE v134[8];
  _QWORD *v135;
  _BYTE v136[8];
  _QWORD *v137;
  __int128 v138;
  _QWORD *v139[3];
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  _OWORD v146[2];
  __int128 v147;
  __int128 v148;
  _OWORD v149[2];
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  _QWORD *v154[3];
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  _OWORD v161[2];
  __int128 v162;
  __int128 v163;
  _OWORD v164[2];
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  _QWORD *v169[3];
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  _OWORD v176[2];
  __int128 v177;
  __int128 v178;
  _OWORD v179[2];
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  _QWORD *v184[3];
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  _OWORD v191[2];
  __int128 v192;
  __int128 v193;
  _OWORD v194[2];
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  _QWORD *v199[3];
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  _OWORD v206[2];
  __int128 v207;
  __int128 v208;
  _OWORD v209[2];
  __int128 v210;
  __int128 v211;
  __int128 v212;
  _BYTE v213[8];
  _QWORD *v214;
  __int128 v215;
  _QWORD *v216[3];
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  _OWORD v223[2];
  __int128 v224;
  __int128 v225;
  _OWORD v226[2];
  __int128 v227;
  __int128 v228;
  __int128 v229;
  __int128 v230;
  _QWORD *v231[3];
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  _OWORD v238[2];
  __int128 v239;
  __int128 v240;
  _OWORD v241[2];
  __int128 v242;
  __int128 v243;
  __int128 v244;
  __int128 v245;
  _QWORD *v246[3];
  __int128 v247;
  __int128 v248;
  __int128 v249;
  __int128 v250;
  __int128 v251;
  __int128 v252;
  _OWORD v253[2];
  __int128 v254;
  __int128 v255;
  _OWORD v256[2];
  __int128 v257;
  __int128 v258;
  __int128 v259;
  __int128 v260;
  _QWORD *v261[3];
  __int128 v262;
  __int128 v263;
  __int128 v264;
  __int128 v265;
  __int128 v266;
  __int128 v267;
  _OWORD v268[2];
  __int128 v269;
  __int128 v270;
  _OWORD v271[2];
  __int128 v272;
  __int128 v273;
  __int128 v274;
  __int128 v275;
  _QWORD *v276[3];
  __int128 v277;
  __int128 v278;
  __int128 v279;
  __int128 v280;
  __int128 v281;
  __int128 v282;
  _OWORD v283[2];
  __int128 v284;
  __int128 v285;
  _OWORD v286[2];
  __int128 v287;
  __int128 v288;
  __int128 v289;
  __int128 v290;
  _QWORD *v291[3];
  __int128 v292;
  __int128 v293;
  __int128 v294;
  __int128 v295;
  __int128 v296;
  __int128 v297;
  _OWORD v298[2];
  __int128 v299;
  __int128 v300;
  _OWORD v301[2];
  __int128 v302;
  __int128 v303;
  __int128 v304;
  _QWORD *v305[3];
  _QWORD *v306[4];
  __int128 v307;
  _QWORD *v308[3];
  __int128 v309;
  __int128 v310;
  __int128 v311;
  __int128 v312;
  __int128 v313;
  __int128 v314;
  _OWORD v315[2];
  __int128 v316;
  __int128 v317;
  _OWORD v318[2];
  __int128 v319;
  __int128 v320;
  __int128 v321;
  __int128 v322;
  _QWORD *v323[3];
  __int128 v324;
  __int128 v325;
  __int128 v326;
  __int128 v327;
  __int128 v328;
  __int128 v329;
  _OWORD v330[2];
  __int128 v331;
  __int128 v332;
  _OWORD v333[2];
  __int128 v334;
  __int128 v335;
  __int128 v336;
  _QWORD *v337[4];
  __int128 v338;
  _QWORD *v339[3];
  __int128 v340;
  __int128 v341;
  __int128 v342;
  __int128 v343;
  __int128 v344;
  __int128 v345;
  _OWORD v346[2];
  __int128 v347;
  __int128 v348;
  _OWORD v349[2];
  __int128 v350;
  __int128 v351;
  __int128 v352;
  __int128 v353;
  _QWORD *v354[3];
  __int128 v355;
  __int128 v356;
  __int128 v357;
  __int128 v358;
  __int128 v359;
  __int128 v360;
  _OWORD v361[2];
  __int128 v362;
  __int128 v363;
  _OWORD v364[2];
  __int128 v365;
  __int128 v366;
  __int128 v367;
  __int128 v368;
  _QWORD *v369[3];
  __int128 v370;
  __int128 v371;
  __int128 v372;
  __int128 v373;
  __int128 v374;
  __int128 v375;
  _OWORD v376[2];
  __int128 v377;
  __int128 v378;
  _OWORD v379[2];
  __int128 v380;
  __int128 v381;
  __int128 v382;
  _QWORD *v383[3];
  _QWORD *v384[4];
  _QWORD *v385[4];
  __int128 v386;
  _QWORD *v387[3];
  __int128 v388;
  __int128 v389;
  __int128 v390;
  __int128 v391;
  __int128 v392;
  __int128 v393;
  _OWORD v394[2];
  __int128 v395;
  __int128 v396;
  _OWORD v397[2];
  __int128 v398;
  __int128 v399;
  __int128 v400;
  __int128 v401;
  _QWORD *v402[3];
  __int128 v403;
  __int128 v404;
  __int128 v405;
  __int128 v406;
  __int128 v407;
  __int128 v408;
  _OWORD v409[2];
  __int128 v410;
  __int128 v411;
  _OWORD v412[2];
  __int128 v413;
  __int128 v414;
  __int128 v415;
  __int128 v416;
  _QWORD *v417[3];
  __int128 v418;
  __int128 v419;
  __int128 v420;
  __int128 v421;
  __int128 v422;
  __int128 v423;
  _OWORD v424[2];
  __int128 v425;
  __int128 v426;
  _OWORD v427[2];
  __int128 v428;
  __int128 v429;
  __int128 v430;
  _QWORD *v431[4];
  __int128 v432;
  _QWORD *v433[3];
  __int128 v434;
  __int128 v435;
  __int128 v436;
  __int128 v437;
  __int128 v438;
  __int128 v439;
  _OWORD v440[2];
  __int128 v441;
  __int128 v442;
  _OWORD v443[2];
  __int128 v444;
  __int128 v445;
  __int128 v446;
  __int128 v447;
  _QWORD *v448[3];
  __int128 v449;
  __int128 v450;
  __int128 v451;
  __int128 v452;
  __int128 v453;
  __int128 v454;
  _OWORD v455[2];
  __int128 v456;
  __int128 v457;
  _OWORD v458[2];
  __int128 v459;
  __int128 v460;
  __int128 v461;
  __int128 v462;
  _QWORD *v463[3];
  __int128 v464;
  __int128 v465;
  __int128 v466;
  __int128 v467;
  __int128 v468;
  __int128 v469;
  _OWORD v470[2];
  __int128 v471;
  __int128 v472;
  _OWORD v473[2];
  __int128 v474;
  __int128 v475;
  __int128 v476;
  __int128 v477;
  _QWORD *v478[3];
  __int128 v479;
  __int128 v480;
  __int128 v481;
  __int128 v482;
  __int128 v483;
  __int128 v484;
  _OWORD v485[2];
  __int128 v486;
  __int128 v487;
  _OWORD v488[2];
  __int128 v489;
  __int128 v490;
  __int128 v491;
  __int128 v492;
  _QWORD *v493[3];
  __int128 v494;
  __int128 v495;
  __int128 v496;
  __int128 v497;
  __int128 v498;
  __int128 v499;
  _OWORD v500[2];
  __int128 v501;
  __int128 v502;
  _OWORD v503[2];
  __int128 v504;
  __int128 v505;
  __int128 v506;
  __int128 v507;
  _QWORD *v508[3];
  __int128 v509;
  __int128 v510;
  __int128 v511;
  __int128 v512;
  __int128 v513;
  __int128 v514;
  _OWORD v515[2];
  __int128 v516;
  __int128 v517;
  _OWORD v518[2];
  __int128 v519;
  __int128 v520;
  __int128 v521;
  __int128 v522;
  _QWORD *v523[3];
  __int128 v524;
  __int128 v525;
  __int128 v526;
  __int128 v527;
  __int128 v528;
  __int128 v529;
  _OWORD v530[2];
  __int128 v531;
  __int128 v532;
  _OWORD v533[2];
  __int128 v534;
  __int128 v535;
  __int128 v536;
  __int128 v537;
  _QWORD *v538[3];
  __int128 v539;
  __int128 v540;
  __int128 v541;
  __int128 v542;
  __int128 v543;
  __int128 v544;
  _OWORD v545[2];
  __int128 v546;
  __int128 v547;
  _OWORD v548[2];
  __int128 v549;
  __int128 v550;
  __int128 v551;
  _QWORD *v552[4];
  _QWORD *v553[4];
  __int128 v554;
  _QWORD *v555[3];
  __int128 v556;
  __int128 v557;
  __int128 v558;
  __int128 v559;
  __int128 v560;
  __int128 v561;
  _OWORD v562[2];
  __int128 v563;
  __int128 v564;
  _OWORD v565[2];
  __int128 v566;
  __int128 v567;
  __int128 v568;
  _QWORD *v569[4];
  __int128 v570;
  _QWORD *v571[3];
  __int128 v572;
  __int128 v573;
  __int128 v574;
  __int128 v575;
  __int128 v576;
  __int128 v577;
  _OWORD v578[2];
  __int128 v579;
  __int128 v580;
  _OWORD v581[2];
  __int128 v582;
  __int128 v583;
  __int128 v584;
  _QWORD *v585[4];
  __int128 v586;
  _QWORD *v587[3];
  __int128 v588;
  __int128 v589;
  __int128 v590;
  __int128 v591;
  __int128 v592;
  __int128 v593;
  _OWORD v594[2];
  __int128 v595;
  __int128 v596;
  _OWORD v597[2];
  __int128 v598;
  __int128 v599;
  __int128 v600;
  _QWORD *v601[4];
  __int128 v602;
  _QWORD *v603[3];
  __int128 v604;
  __int128 v605;
  __int128 v606;
  __int128 v607;
  __int128 v608;
  __int128 v609;
  _OWORD v610[2];
  __int128 v611;
  __int128 v612;
  _OWORD v613[2];
  __int128 v614;
  __int128 v615;
  __int128 v616;
  _QWORD *v617[4];
  __int128 v618;
  _QWORD *v619[3];
  __int128 v620;
  __int128 v621;
  __int128 v622;
  __int128 v623;
  __int128 v624;
  __int128 v625;
  _OWORD v626[2];
  __int128 v627;
  __int128 v628;
  _OWORD v629[2];
  __int128 v630;
  __int128 v631;
  __int128 v632;
  _QWORD *v633[3];
  _QWORD *v634[4];
  __int128 v635;
  _QWORD *v636[3];
  __int128 v637;
  __int128 v638;
  __int128 v639;
  __int128 v640;
  __int128 v641;
  __int128 v642;
  _OWORD v643[2];
  __int128 v644;
  __int128 v645;
  _OWORD v646[2];
  __int128 v647;
  __int128 v648;
  __int128 v649;
  _QWORD *v650[4];
  __int128 v651;
  _QWORD *v652[3];
  __int128 v653;
  __int128 v654;
  __int128 v655;
  __int128 v656;
  __int128 v657;
  __int128 v658;
  _OWORD v659[2];
  __int128 v660;
  __int128 v661;
  _OWORD v662[2];
  __int128 v663;
  __int128 v664;
  __int128 v665;
  __int128 v666;
  _QWORD *v667[3];
  __int128 v668;
  __int128 v669;
  __int128 v670;
  __int128 v671;
  __int128 v672;
  __int128 v673;
  _OWORD v674[2];
  __int128 v675;
  __int128 v676;
  _OWORD v677[2];
  __int128 v678;
  __int128 v679;
  __int128 v680;
  _QWORD *v681[4];
  __int128 v682;
  _QWORD *v683[3];
  __int128 v684;
  __int128 v685;
  __int128 v686;
  __int128 v687;
  __int128 v688;
  __int128 v689;
  _OWORD v690[2];
  __int128 v691;
  __int128 v692;
  _OWORD v693[2];
  __int128 v694;
  __int128 v695;
  __int128 v696;
  __int128 v697;
  _QWORD *v698[3];
  __int128 v699;
  __int128 v700;
  __int128 v701;
  __int128 v702;
  __int128 v703;
  __int128 v704;
  _OWORD v705[2];
  __int128 v706;
  __int128 v707;
  _OWORD v708[2];
  __int128 v709;
  __int128 v710;
  __int128 v711;
  __int128 v712;
  _QWORD *v713[3];
  __int128 v714;
  __int128 v715;
  __int128 v716;
  __int128 v717;
  __int128 v718;
  __int128 v719;
  _OWORD v720[2];
  __int128 v721;
  __int128 v722;
  _OWORD v723[2];
  __int128 v724;
  __int128 v725;
  __int128 v726;
  __int128 v727;
  _QWORD *v728[3];
  __int128 v729;
  __int128 v730;
  __int128 v731;
  __int128 v732;
  __int128 v733;
  __int128 v734;
  _OWORD v735[2];
  __int128 v736;
  __int128 v737;
  _OWORD v738[2];
  __int128 v739;
  __int128 v740;
  __int128 v741;
  __int128 v742;
  _QWORD *v743[3];
  __int128 v744;
  __int128 v745;
  __int128 v746;
  __int128 v747;
  __int128 v748;
  __int128 v749;
  _OWORD v750[2];
  __int128 v751;
  __int128 v752;
  _OWORD v753[2];
  __int128 v754;
  __int128 v755;
  __int128 v756;
  __int128 v757;
  _QWORD *v758[3];
  __int128 v759;
  __int128 v760;
  __int128 v761;
  __int128 v762;
  __int128 v763;
  __int128 v764;
  _OWORD v765[2];
  __int128 v766;
  __int128 v767;
  _OWORD v768[2];
  __int128 v769;
  __int128 v770;
  __int128 v771;
  _QWORD *v772[4];
  _QWORD *v773[4];
  _QWORD *v774[4];
  __int128 v775;
  _QWORD *v776[3];
  __int128 v777;
  __int128 v778;
  __int128 v779;
  __int128 v780;
  __int128 v781;
  __int128 v782;
  _OWORD v783[2];
  __int128 v784;
  __int128 v785;
  _OWORD v786[2];
  __int128 v787;
  __int128 v788;
  __int128 v789;
  __int128 v790;
  _QWORD *v791[3];
  __int128 v792;
  __int128 v793;
  __int128 v794;
  __int128 v795;
  __int128 v796;
  __int128 v797;
  _OWORD v798[2];
  __int128 v799;
  __int128 v800;
  _OWORD v801[2];
  __int128 v802;
  __int128 v803;
  __int128 v804;
  _QWORD *v805[4];
  __int128 v806;
  _QWORD *v807[3];
  __int128 v808;
  __int128 v809;
  __int128 v810;
  __int128 v811;
  __int128 v812;
  __int128 v813;
  _OWORD v814[2];
  __int128 v815;
  __int128 v816;
  _OWORD v817[2];
  __int128 v818;
  __int128 v819;
  __int128 v820;
  __int128 v821;
  _QWORD *v822[3];
  __int128 v823;
  __int128 v824;
  __int128 v825;
  __int128 v826;
  __int128 v827;
  __int128 v828;
  _OWORD v829[2];
  __int128 v830;
  __int128 v831;
  _OWORD v832[2];
  __int128 v833;
  __int128 v834;
  __int128 v835;
  _QWORD *v836[4];
  _QWORD *v837[4];
  _QWORD *v838[4];
  _QWORD *v839[3];
  _QWORD *v840[3];
  double v841;
  __int128 v842;
  uint64_t v843[3];
  __int128 v844;
  __int128 v845;
  __int128 v846;
  __int128 v847;
  __int128 v848;
  __int128 v849;
  __int128 v850;
  __int128 v851;
  __int128 v852;
  __int128 v853;
  __int128 v854;
  __int128 v855;
  __int128 v856;
  __int128 v857;
  __int128 v858;
  int v859;
  uint64_t v860[3];
  double v861;
  __int128 v862;
  uint64_t v863;
  _QWORD *v864[2];
  __int128 v865;
  __int128 v866;
  __int128 v867;
  __int128 v868;
  __int128 v869;
  __int128 v870;
  __int128 v871;
  __int128 v872;
  __int128 v873;
  __int128 v874;
  __int128 v875;
  __int128 v876;
  __int128 v877;
  __int128 v878;
  __int128 v879;
  double v880;
  __int128 v881;
  uint64_t v882[3];
  __int128 v883;
  __int128 v884;
  __int128 v885;
  __int128 v886;
  __int128 v887;
  __int128 v888;
  __int128 v889;
  __int128 v890;
  __int128 v891;
  __int128 v892;
  __int128 v893;
  __int128 v894;
  __int128 v895;
  __int128 v896;
  __int128 v897;
  int v898;
  __int128 v899;
  uint64_t v900[3];
  __int128 v901;
  __int128 v902;
  __int128 v903;
  __int128 v904;
  __int128 v905;
  __int128 v906;
  __int128 v907;
  __int128 v908;
  __int128 v909;
  __int128 v910;
  __int128 v911;
  __int128 v912;
  __int128 v913;
  __int128 v914;
  __int128 v915;
  double v916;
  __int128 v917;
  uint64_t v918[3];
  __int128 v919;
  __int128 v920;
  __int128 v921;
  __int128 v922;
  __int128 v923;
  __int128 v924;
  __int128 v925;
  __int128 v926;
  __int128 v927;
  __int128 v928;
  __int128 v929;
  __int128 v930;
  __int128 v931;
  __int128 v932;
  __int128 v933;
  int v934;
  __int128 v935;
  uint64_t v936[3];
  __int128 v937;
  __int128 v938;
  __int128 v939;
  __int128 v940;
  __int128 v941;
  __int128 v942;
  __int128 v943;
  __int128 v944;
  __int128 v945;
  __int128 v946;
  __int128 v947;
  __int128 v948;
  __int128 v949;
  __int128 v950;
  __int128 v951;
  int v952;
  __int128 v953;
  uint64_t v954[3];
  __int128 v955;
  __int128 v956;
  __int128 v957;
  __int128 v958;
  __int128 v959;
  __int128 v960;
  __int128 v961;
  __int128 v962;
  __int128 v963;
  __int128 v964;
  __int128 v965;
  __int128 v966;
  __int128 v967;
  __int128 v968;
  __int128 v969;
  int v970;
  uint64_t v971[3];
  int v972;
  uint64_t v973[3];
  int v974;
  uint64_t v975[3];
  int v976;
  __int128 v977;
  uint64_t v978;
  _QWORD *v979[2];
  __int128 v980;
  __int128 v981;
  __int128 v982;
  __int128 v983;
  __int128 v984;
  __int128 v985;
  __int128 v986;
  __int128 v987;
  __int128 v988;
  __int128 v989;
  __int128 v990;
  __int128 v991;
  __int128 v992;
  __int128 v993;
  __int128 v994;
  double v995;
  __int128 v996;
  uint64_t v997[3];
  __int128 v998;
  __int128 v999;
  __int128 v1000;
  __int128 v1001;
  __int128 v1002;
  __int128 v1003;
  __int128 v1004;
  __int128 v1005;
  __int128 v1006;
  __int128 v1007;
  __int128 v1008;
  __int128 v1009;
  __int128 v1010;
  __int128 v1011;
  __int128 v1012;
  int v1013;
  __int128 v1014;
  uint64_t v1015[3];
  __int128 v1016;
  __int128 v1017;
  __int128 v1018;
  __int128 v1019;
  __int128 v1020;
  __int128 v1021;
  __int128 v1022;
  __int128 v1023;
  __int128 v1024;
  __int128 v1025;
  __int128 v1026;
  __int128 v1027;
  __int128 v1028;
  __int128 v1029;
  __int128 v1030;
  int v1031;
  __int128 v1032;
  uint64_t v1033[3];
  __int128 v1034;
  __int128 v1035;
  __int128 v1036;
  __int128 v1037;
  __int128 v1038;
  __int128 v1039;
  __int128 v1040;
  __int128 v1041;
  __int128 v1042;
  __int128 v1043;
  __int128 v1044;
  __int128 v1045;
  __int128 v1046;
  __int128 v1047;
  __int128 v1048;
  int v1049;
  __int128 v1050;
  uint64_t v1051[3];
  __int128 v1052;
  __int128 v1053;
  __int128 v1054;
  __int128 v1055;
  __int128 v1056;
  __int128 v1057;
  __int128 v1058;
  __int128 v1059;
  __int128 v1060;
  __int128 v1061;
  __int128 v1062;
  __int128 v1063;
  __int128 v1064;
  __int128 v1065;
  __int128 v1066;
  int v1067;
  __int128 v1068;
  uint64_t v1069[3];
  __int128 v1070;
  __int128 v1071;
  __int128 v1072;
  __int128 v1073;
  __int128 v1074;
  __int128 v1075;
  __int128 v1076;
  __int128 v1077;
  __int128 v1078;
  __int128 v1079;
  __int128 v1080;
  __int128 v1081;
  __int128 v1082;
  __int128 v1083;
  __int128 v1084;
  int v1085;
  __int128 v1086;
  uint64_t v1087[3];
  __int128 v1088;
  __int128 v1089;
  __int128 v1090;
  __int128 v1091;
  __int128 v1092;
  __int128 v1093;
  __int128 v1094;
  __int128 v1095;
  __int128 v1096;
  __int128 v1097;
  __int128 v1098;
  __int128 v1099;
  __int128 v1100;
  __int128 v1101;
  __int128 v1102;
  int v1103;
  __int128 v1104;
  uint64_t v1105[3];
  __int128 v1106;
  __int128 v1107;
  __int128 v1108;
  __int128 v1109;
  __int128 v1110;
  __int128 v1111;
  __int128 v1112;
  __int128 v1113;
  __int128 v1114;
  __int128 v1115;
  __int128 v1116;
  __int128 v1117;
  __int128 v1118;
  __int128 v1119;
  __int128 v1120;
  int v1121;
  __int128 v1122;
  uint64_t v1123[3];
  __int128 v1124;
  __int128 v1125;
  __int128 v1126;
  __int128 v1127;
  __int128 v1128;
  __int128 v1129;
  __int128 v1130;
  __int128 v1131;
  __int128 v1132;
  __int128 v1133;
  __int128 v1134;
  __int128 v1135;
  __int128 v1136;
  __int128 v1137;
  __int128 v1138;
  double v1139;
  __int128 v1140;
  uint64_t v1141[3];
  __int128 v1142;
  __int128 v1143;
  __int128 v1144;
  __int128 v1145;
  __int128 v1146;
  __int128 v1147;
  __int128 v1148;
  __int128 v1149;
  __int128 v1150;
  __int128 v1151;
  __int128 v1152;
  __int128 v1153;
  __int128 v1154;
  __int128 v1155;
  __int128 v1156;
  int v1157;
  __int128 v1158;
  uint64_t v1159[3];
  __int128 v1160;
  __int128 v1161;
  __int128 v1162;
  __int128 v1163;
  __int128 v1164;
  __int128 v1165;
  __int128 v1166;
  __int128 v1167;
  __int128 v1168;
  __int128 v1169;
  __int128 v1170;
  __int128 v1171;
  __int128 v1172;
  __int128 v1173;
  __int128 v1174;
  int v1175;
  __int128 v1176;
  uint64_t v1177[3];
  __int128 v1178;
  __int128 v1179;
  __int128 v1180;
  __int128 v1181;
  __int128 v1182;
  __int128 v1183;
  __int128 v1184;
  __int128 v1185;
  __int128 v1186;
  __int128 v1187;
  __int128 v1188;
  __int128 v1189;
  __int128 v1190;
  __int128 v1191;
  __int128 v1192;
  int v1193;
  __int128 v1194;
  uint64_t v1195[3];
  __int128 v1196;
  __int128 v1197;
  __int128 v1198;
  __int128 v1199;
  __int128 v1200;
  __int128 v1201;
  __int128 v1202;
  __int128 v1203;
  __int128 v1204;
  __int128 v1205;
  __int128 v1206;
  __int128 v1207;
  __int128 v1208;
  __int128 v1209;
  __int128 v1210;
  int v1211;
  __int128 v1212;
  uint64_t v1213[3];
  __int128 v1214;
  __int128 v1215;
  __int128 v1216;
  __int128 v1217;
  __int128 v1218;
  __int128 v1219;
  __int128 v1220;
  __int128 v1221;
  __int128 v1222;
  __int128 v1223;
  __int128 v1224;
  __int128 v1225;
  __int128 v1226;
  __int128 v1227;
  __int128 v1228;
  int v1229;
  __int128 v1230;
  uint64_t v1231[3];
  __int128 v1232;
  __int128 v1233;
  __int128 v1234;
  __int128 v1235;
  __int128 v1236;
  __int128 v1237;
  __int128 v1238;
  __int128 v1239;
  __int128 v1240;
  __int128 v1241;
  __int128 v1242;
  __int128 v1243;
  __int128 v1244;
  __int128 v1245;
  __int128 v1246;
  int v1247;
  __int128 v1248;
  uint64_t v1249[3];
  __int128 v1250;
  __int128 v1251;
  __int128 v1252;
  __int128 v1253;
  __int128 v1254;
  __int128 v1255;
  __int128 v1256;
  __int128 v1257;
  __int128 v1258;
  __int128 v1259;
  __int128 v1260;
  __int128 v1261;
  __int128 v1262;
  __int128 v1263;
  __int128 v1264;
  int v1265;
  __int128 v1266;
  uint64_t v1267[3];
  __int128 v1268;
  __int128 v1269;
  __int128 v1270;
  __int128 v1271;
  __int128 v1272;
  __int128 v1273;
  __int128 v1274;
  __int128 v1275;
  __int128 v1276;
  __int128 v1277;
  __int128 v1278;
  __int128 v1279;
  __int128 v1280;
  __int128 v1281;
  __int128 v1282;
  int v1283;
  __int128 v1284;
  uint64_t v1285[3];
  __int128 v1286;
  __int128 v1287;
  __int128 v1288;
  __int128 v1289;
  __int128 v1290;
  __int128 v1291;
  __int128 v1292;
  __int128 v1293;
  __int128 v1294;
  __int128 v1295;
  __int128 v1296;
  __int128 v1297;
  __int128 v1298;
  __int128 v1299;
  __int128 v1300;
  int v1301;
  __int128 v1302;
  uint64_t v1303[3];
  __int128 v1304;
  __int128 v1305;
  __int128 v1306;
  __int128 v1307;
  __int128 v1308;
  _OWORD v1309[10];
  int v1310;
  uint64_t v1311[3];
  int v1312;
  uint64_t v1313[3];
  int v1314;
  uint64_t v1315[3];
  int v1316;
  __int128 v1317;
  uint64_t v1318[3];
  __int128 v1319;
  __int128 v1320;
  __int128 v1321;
  __int128 v1322;
  __int128 v1323;
  __int128 v1324;
  __int128 v1325;
  __int128 v1326;
  __int128 v1327;
  __int128 v1328;
  __int128 v1329;
  __int128 v1330;
  __int128 v1331;
  __int128 v1332;
  __int128 v1333;
  int v1334;
  __int128 v1335;
  uint64_t v1336[3];
  __int128 v1337;
  __int128 v1338;
  __int128 v1339;
  __int128 v1340;
  __int128 v1341;
  __int128 v1342;
  __int128 v1343;
  __int128 v1344;
  __int128 v1345;
  __int128 v1346;
  __int128 v1347;
  __int128 v1348;
  __int128 v1349;
  __int128 v1350;
  __int128 v1351;
  int v1352;
  __int128 v1353;
  uint64_t v1354[3];
  __int128 v1355;
  __int128 v1356;
  __int128 v1357;
  __int128 v1358;
  __int128 v1359;
  __int128 v1360;
  __int128 v1361;
  __int128 v1362;
  __int128 v1363;
  __int128 v1364;
  __int128 v1365;
  __int128 v1366;
  __int128 v1367;
  __int128 v1368;
  __int128 v1369;
  int v1370;
  __int128 v1371;
  uint64_t v1372[3];
  __int128 v1373;
  __int128 v1374;
  __int128 v1375;
  __int128 v1376;
  __int128 v1377;
  __int128 v1378;
  __int128 v1379;
  __int128 v1380;
  __int128 v1381;
  __int128 v1382;
  __int128 v1383;
  __int128 v1384;
  __int128 v1385;
  __int128 v1386;
  __int128 v1387;
  int v1388;
  __int128 v1389;
  uint64_t v1390[3];
  __int128 v1391;
  __int128 v1392;
  __int128 v1393;
  __int128 v1394;
  __int128 v1395;
  __int128 v1396;
  __int128 v1397;
  __int128 v1398;
  __int128 v1399;
  __int128 v1400;
  __int128 v1401;
  __int128 v1402;
  __int128 v1403;
  __int128 v1404;
  __int128 v1405;
  int v1406;
  uint64_t v1407[3];
  int v1408;
  uint64_t v1409[3];
  int v1410;
  __int128 v1411;
  uint64_t v1412;
  _QWORD *v1413[2];
  __int128 v1414;
  __int128 v1415;
  __int128 v1416;
  __int128 v1417;
  __int128 v1418;
  __int128 v1419;
  __int128 v1420;
  __int128 v1421;
  __int128 v1422;
  __int128 v1423;
  __int128 v1424;
  __int128 v1425;
  __int128 v1426;
  __int128 v1427;
  __int128 v1428;
  int v1429;
  __int128 v1430;
  uint64_t v1431[3];
  __int128 v1432;
  __int128 v1433;
  __int128 v1434;
  __int128 v1435;
  __int128 v1436;
  __int128 v1437;
  __int128 v1438;
  __int128 v1439;
  __int128 v1440;
  __int128 v1441;
  __int128 v1442;
  __int128 v1443;
  __int128 v1444;
  __int128 v1445;
  __int128 v1446;
  int v1447;
  __int128 v1448;
  uint64_t v1449[3];
  __int128 v1450;
  __int128 v1451;
  __int128 v1452;
  __int128 v1453;
  __int128 v1454;
  __int128 v1455;
  __int128 v1456;
  __int128 v1457;
  __int128 v1458;
  __int128 v1459;
  __int128 v1460;
  __int128 v1461;
  __int128 v1462;
  __int128 v1463;
  __int128 v1464;
  int v1465;
  __int128 v1466;
  uint64_t v1467[3];
  __int128 v1468;
  __int128 v1469;
  __int128 v1470;
  __int128 v1471;
  __int128 v1472;
  __int128 v1473;
  __int128 v1474;
  __int128 v1475;
  __int128 v1476;
  __int128 v1477;
  __int128 v1478;
  __int128 v1479;
  __int128 v1480;
  __int128 v1481;
  __int128 v1482;
  double v1483;
  __int128 v1484;
  uint64_t v1485[3];
  __int128 v1486;
  __int128 v1487;
  __int128 v1488;
  __int128 v1489;
  __int128 v1490;
  __int128 v1491;
  __int128 v1492;
  __int128 v1493;
  __int128 v1494;
  __int128 v1495;
  __int128 v1496;
  __int128 v1497;
  __int128 v1498;
  __int128 v1499;
  __int128 v1500;
  int v1501;
  __int128 v1502;
  uint64_t v1503[3];
  __int128 v1504;
  __int128 v1505;
  __int128 v1506;
  __int128 v1507;
  __int128 v1508;
  __int128 v1509;
  __int128 v1510;
  __int128 v1511;
  __int128 v1512;
  __int128 v1513;
  __int128 v1514;
  __int128 v1515;
  __int128 v1516;
  __int128 v1517;
  __int128 v1518;
  int v1519;
  __int128 v1520;
  uint64_t v1521[3];
  __int128 v1522;
  __int128 v1523;
  __int128 v1524;
  __int128 v1525;
  __int128 v1526;
  __int128 v1527;
  __int128 v1528;
  __int128 v1529;
  __int128 v1530;
  __int128 v1531;
  __int128 v1532;
  __int128 v1533;
  __int128 v1534;
  __int128 v1535;
  __int128 v1536;
  int v1537;
  __int128 v1538;
  uint64_t v1539[3];
  __int128 v1540;
  __int128 v1541;
  __int128 v1542;
  __int128 v1543;
  __int128 v1544;
  __int128 v1545;
  __int128 v1546;
  __int128 v1547;
  __int128 v1548;
  __int128 v1549;
  __int128 v1550;
  __int128 v1551;
  __int128 v1552;
  __int128 v1553;
  __int128 v1554;
  int v1555;
  __int128 v1556;
  uint64_t v1557[3];
  __int128 v1558;
  __int128 v1559;
  __int128 v1560;
  __int128 v1561;
  __int128 v1562;
  __int128 v1563;
  __int128 v1564;
  __int128 v1565;
  __int128 v1566;
  __int128 v1567;
  __int128 v1568;
  __int128 v1569;
  __int128 v1570;
  __int128 v1571;
  __int128 v1572;
  int v1573;
  __int128 v1574;
  uint64_t v1575[3];
  __int128 v1576;
  __int128 v1577;
  __int128 v1578;
  __int128 v1579;
  __int128 v1580;
  __int128 v1581;
  __int128 v1582;
  __int128 v1583;
  __int128 v1584;
  __int128 v1585;
  __int128 v1586;
  __int128 v1587;
  __int128 v1588;
  __int128 v1589;
  __int128 v1590;
  int v1591;
  __int128 v1592;
  uint64_t v1593[3];
  __int128 v1594;
  __int128 v1595;
  __int128 v1596;
  __int128 v1597;
  __int128 v1598;
  __int128 v1599;
  __int128 v1600;
  __int128 v1601;
  __int128 v1602;
  __int128 v1603;
  __int128 v1604;
  __int128 v1605;
  __int128 v1606;
  __int128 v1607;
  __int128 v1608;
  int v1609;
  __int128 v1610;
  uint64_t v1611[3];
  __int128 v1612;
  __int128 v1613;
  __int128 v1614;
  __int128 v1615;
  __int128 v1616;
  __int128 v1617;
  __int128 v1618;
  __int128 v1619;
  __int128 v1620;
  __int128 v1621;
  __int128 v1622;
  __int128 v1623;
  __int128 v1624;
  __int128 v1625;
  __int128 v1626;
  int v1627;
  __int128 v1628;
  uint64_t v1629[3];
  __int128 v1630;
  __int128 v1631;
  __int128 v1632;
  __int128 v1633;
  __int128 v1634;
  __int128 v1635;
  __int128 v1636;
  __int128 v1637;
  __int128 v1638;
  __int128 v1639;
  __int128 v1640;
  __int128 v1641;
  __int128 v1642;
  __int128 v1643;
  __int128 v1644;
  int v1645;
  __int128 v1646;
  uint64_t v1647[3];
  __int128 v1648;
  __int128 v1649;
  __int128 v1650;
  __int128 v1651;
  __int128 v1652;
  __int128 v1653;
  __int128 v1654;
  __int128 v1655;
  __int128 v1656;
  __int128 v1657;
  __int128 v1658;
  __int128 v1659;
  __int128 v1660;
  __int128 v1661;
  __int128 v1662;
  int v1663;
  __int128 v1664;
  uint64_t v1665[3];
  __int128 v1666;
  __int128 v1667;
  __int128 v1668;
  __int128 v1669;
  __int128 v1670;
  __int128 v1671;
  __int128 v1672;
  __int128 v1673;
  __int128 v1674;
  __int128 v1675;
  __int128 v1676;
  __int128 v1677;
  __int128 v1678;
  __int128 v1679;
  __int128 v1680;
  int v1681;
  __int128 v1682;
  uint64_t v1683[3];
  __int128 v1684;
  __int128 v1685;
  __int128 v1686;
  __int128 v1687;
  __int128 v1688;
  __int128 v1689;
  __int128 v1690;
  __int128 v1691;
  __int128 v1692;
  __int128 v1693;
  __int128 v1694;
  __int128 v1695;
  __int128 v1696;
  __int128 v1697;
  __int128 v1698;
  int v1699;
  __int128 v1700;
  uint64_t v1701[3];
  __int128 v1702;
  __int128 v1703;
  __int128 v1704;
  __int128 v1705;
  __int128 v1706;
  __int128 v1707;
  __int128 v1708;
  __int128 v1709;
  __int128 v1710;
  __int128 v1711;
  __int128 v1712;
  __int128 v1713;
  __int128 v1714;
  __int128 v1715;
  __int128 v1716;
  int v1717;
  __int128 v1718;
  uint64_t v1719[3];
  __int128 v1720;
  __int128 v1721;
  __int128 v1722;
  __int128 v1723;
  __int128 v1724;
  __int128 v1725;
  __int128 v1726;
  __int128 v1727;
  __int128 v1728;
  __int128 v1729;
  __int128 v1730;
  __int128 v1731;
  __int128 v1732;
  __int128 v1733;
  __int128 v1734;
  int v1735;
  __int128 v1736;
  uint64_t v1737[3];
  __int128 v1738;
  __int128 v1739;
  __int128 v1740;
  __int128 v1741;
  __int128 v1742;
  __int128 v1743;
  __int128 v1744;
  __int128 v1745;
  __int128 v1746;
  __int128 v1747;
  __int128 v1748;
  __int128 v1749;
  __int128 v1750;
  __int128 v1751;
  __int128 v1752;
  int v1753;
  __int128 v1754;
  uint64_t v1755[3];
  __int128 v1756;
  __int128 v1757;
  __int128 v1758;
  __int128 v1759;
  __int128 v1760;
  __int128 v1761;
  __int128 v1762;
  __int128 v1763;
  __int128 v1764;
  __int128 v1765;
  __int128 v1766;
  __int128 v1767;
  __int128 v1768;
  __int128 v1769;
  __int128 v1770;
  int v1771;
  __int128 v1772;
  uint64_t v1773[3];
  __int128 v1774;
  __int128 v1775;
  __int128 v1776;
  __int128 v1777;
  __int128 v1778;
  __int128 v1779;
  __int128 v1780;
  __int128 v1781;
  __int128 v1782;
  __int128 v1783;
  __int128 v1784;
  __int128 v1785;
  __int128 v1786;
  __int128 v1787;
  __int128 v1788;
  int v1789;
  __int128 v1790;
  uint64_t v1791[3];
  __int128 v1792;
  __int128 v1793;
  __int128 v1794;
  __int128 v1795;
  __int128 v1796;
  __int128 v1797;
  __int128 v1798;
  __int128 v1799;
  __int128 v1800;
  __int128 v1801;
  __int128 v1802;
  __int128 v1803;
  __int128 v1804;
  __int128 v1805;
  __int128 v1806;
  int v1807;
  __int128 v1808;
  uint64_t v1809[3];
  __int128 v1810;
  __int128 v1811;
  __int128 v1812;
  __int128 v1813;
  __int128 v1814;
  __int128 v1815;
  __int128 v1816;
  __int128 v1817;
  __int128 v1818;
  __int128 v1819;
  __int128 v1820;
  __int128 v1821;
  __int128 v1822;
  __int128 v1823;
  __int128 v1824;
  int v1825;
  __int128 v1826;
  uint64_t v1827[3];
  __int128 v1828;
  __int128 v1829;
  __int128 v1830;
  __int128 v1831;
  __int128 v1832;
  __int128 v1833;
  __int128 v1834;
  __int128 v1835;
  __int128 v1836;
  __int128 v1837;
  __int128 v1838;
  __int128 v1839;
  __int128 v1840;
  __int128 v1841;
  __int128 v1842;
  int v1843;
  __int128 v1844;
  uint64_t v1845[3];
  __int128 v1846;
  __int128 v1847;
  __int128 v1848;
  __int128 v1849;
  __int128 v1850;
  __int128 v1851;
  __int128 v1852;
  __int128 v1853;
  __int128 v1854;
  __int128 v1855;
  __int128 v1856;
  __int128 v1857;
  __int128 v1858;
  __int128 v1859;
  __int128 v1860;
  int v1861;
  __int128 v1862;
  uint64_t v1863[3];
  __int128 v1864;
  __int128 v1865;
  __int128 v1866;
  __int128 v1867;
  __int128 v1868;
  __int128 v1869;
  __int128 v1870;
  __int128 v1871;
  __int128 v1872;
  __int128 v1873;
  __int128 v1874;
  __int128 v1875;
  __int128 v1876;
  __int128 v1877;
  __int128 v1878;
  int v1879;
  uint64_t v1880[3];
  int v1881;
  uint64_t v1882[3];
  int v1883;
  uint64_t v1884[3];
  int v1885;
  uint64_t v1886[3];
  int v1887;
  uint64_t v1888[3];
  int v1889;
  uint64_t v1890[3];
  int v1891;
  uint64_t v1892[3];
  int v1893;
  uint64_t v1894[3];
  int v1895;
  uint64_t v1896[3];
  int v1897;
  __int128 v1898;
  uint64_t v1899;
  _QWORD *v1900[2];
  __int128 v1901;
  __int128 v1902;
  __int128 v1903;
  __int128 v1904;
  __int128 v1905;
  __int128 v1906;
  __int128 v1907;
  __int128 v1908;
  __int128 v1909;
  __int128 v1910;
  __int128 v1911;
  __int128 v1912;
  __int128 v1913;
  __int128 v1914;
  __int128 v1915;
  int v1916;
  __int128 v1917;
  uint64_t v1918[3];
  __int128 v1919;
  __int128 v1920;
  __int128 v1921;
  __int128 v1922;
  __int128 v1923;
  __int128 v1924;
  __int128 v1925;
  __int128 v1926;
  __int128 v1927;
  __int128 v1928;
  __int128 v1929;
  __int128 v1930;
  __int128 v1931;
  __int128 v1932;
  __int128 v1933;
  int v1934;
  __int128 v1935;
  uint64_t v1936[3];
  __int128 v1937;
  __int128 v1938;
  __int128 v1939;
  __int128 v1940;
  __int128 v1941;
  __int128 v1942;
  __int128 v1943;
  __int128 v1944;
  __int128 v1945;
  __int128 v1946;
  __int128 v1947;
  __int128 v1948;
  __int128 v1949;
  __int128 v1950;
  __int128 v1951;
  int v1952;
  __int128 v1953;
  uint64_t v1954[3];
  __int128 v1955;
  __int128 v1956;
  __int128 v1957;
  __int128 v1958;
  __int128 v1959;
  __int128 v1960;
  __int128 v1961;
  __int128 v1962;
  __int128 v1963;
  __int128 v1964;
  __int128 v1965;
  __int128 v1966;
  __int128 v1967;
  __int128 v1968;
  __int128 v1969;
  int v1970;
  __int128 v1971;
  uint64_t v1972[3];
  __int128 v1973;
  __int128 v1974;
  __int128 v1975;
  __int128 v1976;
  __int128 v1977;
  __int128 v1978;
  __int128 v1979;
  __int128 v1980;
  __int128 v1981;
  __int128 v1982;
  __int128 v1983;
  __int128 v1984;
  __int128 v1985;
  __int128 v1986;
  __int128 v1987;
  int v1988;
  __int128 v1989;
  uint64_t v1990[3];
  __int128 v1991;
  __int128 v1992;
  __int128 v1993;
  __int128 v1994;
  __int128 v1995;
  __int128 v1996;
  __int128 v1997;
  __int128 v1998;
  __int128 v1999;
  __int128 v2000;
  __int128 v2001;
  __int128 v2002;
  __int128 v2003;
  __int128 v2004;
  __int128 v2005;
  int v2006;
  __int128 v2007;
  uint64_t v2008[3];
  __int128 v2009;
  __int128 v2010;
  __int128 v2011;
  __int128 v2012;
  __int128 v2013;
  __int128 v2014;
  __int128 v2015;
  __int128 v2016;
  __int128 v2017;
  __int128 v2018;
  __int128 v2019;
  __int128 v2020;
  __int128 v2021;
  __int128 v2022;
  __int128 v2023;
  int v2024;
  __int128 v2025;
  uint64_t v2026[3];
  __int128 v2027;
  __int128 v2028;
  __int128 v2029;
  __int128 v2030;
  __int128 v2031;
  __int128 v2032;
  __int128 v2033;
  __int128 v2034;
  __int128 v2035;
  __int128 v2036;
  __int128 v2037;
  __int128 v2038;
  __int128 v2039;
  __int128 v2040;
  __int128 v2041;
  double v2042;
  __int128 v2043;
  uint64_t v2044[3];
  __int128 v2045;
  __int128 v2046;
  __int128 v2047;
  __int128 v2048;
  __int128 v2049;
  __int128 v2050;
  __int128 v2051;
  __int128 v2052;
  __int128 v2053;
  __int128 v2054;
  __int128 v2055;
  __int128 v2056;
  __int128 v2057;
  __int128 v2058;
  __int128 v2059;
  int v2060;
  __int128 v2061;
  uint64_t v2062[3];
  __int128 v2063;
  __int128 v2064;
  __int128 v2065;
  __int128 v2066;
  __int128 v2067;
  __int128 v2068;
  __int128 v2069;
  __int128 v2070;
  __int128 v2071;
  __int128 v2072;
  __int128 v2073;
  __int128 v2074;
  __int128 v2075;
  __int128 v2076;
  __int128 v2077;
  int v2078;
  __int128 v2079;
  uint64_t v2080[3];
  __int128 v2081;
  __int128 v2082;
  __int128 v2083;
  __int128 v2084;
  __int128 v2085;
  __int128 v2086;
  __int128 v2087;
  __int128 v2088;
  __int128 v2089;
  __int128 v2090;
  __int128 v2091;
  __int128 v2092;
  __int128 v2093;
  __int128 v2094;
  __int128 v2095;
  int v2096;
  __int128 v2097;
  uint64_t v2098[3];
  __int128 v2099;
  __int128 v2100;
  __int128 v2101;
  __int128 v2102;
  __int128 v2103;
  __int128 v2104;
  __int128 v2105;
  __int128 v2106;
  __int128 v2107;
  __int128 v2108;
  __int128 v2109;
  __int128 v2110;
  __int128 v2111;
  __int128 v2112;
  __int128 v2113;
  int v2114;
  __int128 v2115;
  uint64_t v2116[3];
  __int128 v2117;
  __int128 v2118;
  __int128 v2119;
  __int128 v2120;
  __int128 v2121;
  __int128 v2122;
  __int128 v2123;
  __int128 v2124;
  __int128 v2125;
  __int128 v2126;
  __int128 v2127;
  __int128 v2128;
  __int128 v2129;
  __int128 v2130;
  __int128 v2131;
  int v2132;
  __int128 v2133;
  uint64_t v2134[3];
  __int128 v2135;
  __int128 v2136;
  __int128 v2137;
  __int128 v2138;
  __int128 v2139;
  __int128 v2140;
  __int128 v2141;
  __int128 v2142;
  __int128 v2143;
  __int128 v2144;
  __int128 v2145;
  __int128 v2146;
  __int128 v2147;
  __int128 v2148;
  __int128 v2149;
  int v2150;
  __int128 v2151;
  uint64_t v2152[3];
  __int128 v2153;
  __int128 v2154;
  __int128 v2155;
  __int128 v2156;
  __int128 v2157;
  __int128 v2158;
  __int128 v2159;
  __int128 v2160;
  __int128 v2161;
  __int128 v2162;
  __int128 v2163;
  __int128 v2164;
  __int128 v2165;
  __int128 v2166;
  __int128 v2167;
  int v2168;
  __int128 v2169;
  uint64_t v2170[3];
  __int128 v2171;
  __int128 v2172;
  __int128 v2173;
  __int128 v2174;
  __int128 v2175;
  __int128 v2176;
  __int128 v2177;
  __int128 v2178;
  __int128 v2179;
  __int128 v2180;
  __int128 v2181;
  __int128 v2182;
  __int128 v2183;
  __int128 v2184;
  __int128 v2185;
  int v2186;
  __int128 v2187;
  uint64_t v2188[3];
  __int128 v2189;
  __int128 v2190;
  __int128 v2191;
  __int128 v2192;
  __int128 v2193;
  __int128 v2194;
  __int128 v2195;
  __int128 v2196;
  __int128 v2197;
  __int128 v2198;
  __int128 v2199;
  __int128 v2200;
  __int128 v2201;
  __int128 v2202;
  __int128 v2203;
  int v2204;
  __int128 v2205;
  uint64_t v2206[3];
  __int128 v2207;
  __int128 v2208;
  __int128 v2209;
  __int128 v2210;
  __int128 v2211;
  __int128 v2212;
  __int128 v2213;
  __int128 v2214;
  __int128 v2215;
  __int128 v2216;
  __int128 v2217;
  __int128 v2218;
  __int128 v2219;
  __int128 v2220;
  __int128 v2221;
  int v2222;
  __int128 v2223;
  uint64_t v2224[3];
  __int128 v2225;
  __int128 v2226;
  __int128 v2227;
  __int128 v2228;
  __int128 v2229;
  __int128 v2230;
  __int128 v2231;
  __int128 v2232;
  __int128 v2233;
  __int128 v2234;
  __int128 v2235;
  __int128 v2236;
  __int128 v2237;
  __int128 v2238;
  __int128 v2239;
  int v2240;
  __int128 v2241;
  uint64_t v2242[3];
  __int128 v2243;
  __int128 v2244;
  __int128 v2245;
  __int128 v2246;
  __int128 v2247;
  __int128 v2248;
  __int128 v2249;
  __int128 v2250;
  __int128 v2251;
  __int128 v2252;
  __int128 v2253;
  __int128 v2254;
  __int128 v2255;
  __int128 v2256;
  __int128 v2257;
  int v2258;
  __int128 v2259;
  uint64_t v2260[3];
  __int128 v2261;
  __int128 v2262;
  __int128 v2263;
  __int128 v2264;
  __int128 v2265;
  __int128 v2266;
  __int128 v2267;
  __int128 v2268;
  __int128 v2269;
  __int128 v2270;
  __int128 v2271;
  __int128 v2272;
  __int128 v2273;
  __int128 v2274;
  __int128 v2275;
  int v2276;
  __int128 v2277;
  uint64_t v2278[3];
  __int128 v2279;
  __int128 v2280;
  __int128 v2281;
  __int128 v2282;
  __int128 v2283;
  __int128 v2284;
  __int128 v2285;
  __int128 v2286;
  __int128 v2287;
  __int128 v2288;
  __int128 v2289;
  __int128 v2290;
  __int128 v2291;
  __int128 v2292;
  __int128 v2293;
  int v2294;
  __int128 v2295;
  uint64_t v2296[3];
  __int128 v2297;
  __int128 v2298;
  __int128 v2299;
  __int128 v2300;
  __int128 v2301;
  __int128 v2302;
  __int128 v2303;
  __int128 v2304;
  __int128 v2305;
  __int128 v2306;
  __int128 v2307;
  __int128 v2308;
  __int128 v2309;
  __int128 v2310;
  __int128 v2311;
  int v2312;
  __int128 v2313;
  uint64_t v2314[3];
  __int128 v2315;
  __int128 v2316;
  __int128 v2317;
  __int128 v2318;
  __int128 v2319;
  __int128 v2320;
  __int128 v2321;
  __int128 v2322;
  __int128 v2323;
  __int128 v2324;
  __int128 v2325;
  __int128 v2326;
  __int128 v2327;
  __int128 v2328;
  __int128 v2329;
  int v2330;
  __int128 v2331;
  uint64_t v2332[3];
  __int128 v2333;
  __int128 v2334;
  __int128 v2335;
  __int128 v2336;
  __int128 v2337;
  __int128 v2338;
  __int128 v2339;
  __int128 v2340;
  __int128 v2341;
  __int128 v2342;
  __int128 v2343;
  __int128 v2344;
  __int128 v2345;
  __int128 v2346;
  __int128 v2347;
  int v2348;
  __int128 v2349;
  uint64_t v2350[3];
  __int128 v2351;
  __int128 v2352;
  __int128 v2353;
  __int128 v2354;
  __int128 v2355;
  __int128 v2356;
  __int128 v2357;
  __int128 v2358;
  __int128 v2359;
  __int128 v2360;
  __int128 v2361;
  __int128 v2362;
  __int128 v2363;
  __int128 v2364;
  __int128 v2365;
  int v2366;
  __int128 v2367;
  uint64_t v2368[3];
  __int128 v2369;
  __int128 v2370;
  __int128 v2371;
  __int128 v2372;
  __int128 v2373;
  __int128 v2374;
  __int128 v2375;
  __int128 v2376;
  __int128 v2377;
  __int128 v2378;
  __int128 v2379;
  __int128 v2380;
  __int128 v2381;
  __int128 v2382;
  __int128 v2383;
  int v2384;
  __int128 v2385;
  uint64_t v2386[3];
  __int128 v2387;
  __int128 v2388;
  __int128 v2389;
  __int128 v2390;
  __int128 v2391;
  __int128 v2392;
  __int128 v2393;
  __int128 v2394;
  __int128 v2395;
  __int128 v2396;
  __int128 v2397;
  __int128 v2398;
  __int128 v2399;
  __int128 v2400;
  __int128 v2401;
  int v2402;
  __int128 v2403;
  uint64_t v2404[3];
  __int128 v2405;
  __int128 v2406;
  __int128 v2407;
  __int128 v2408;
  __int128 v2409;
  __int128 v2410;
  __int128 v2411;
  __int128 v2412;
  __int128 v2413;
  __int128 v2414;
  __int128 v2415;
  __int128 v2416;
  __int128 v2417;
  __int128 v2418;
  __int128 v2419;
  int v2420;
  __int128 v2421;
  uint64_t v2422[3];
  __int128 v2423;
  __int128 v2424;
  __int128 v2425;
  __int128 v2426;
  __int128 v2427;
  __int128 v2428;
  __int128 v2429;
  __int128 v2430;
  __int128 v2431;
  __int128 v2432;
  __int128 v2433;
  __int128 v2434;
  __int128 v2435;
  __int128 v2436;
  __int128 v2437;
  int v2438;
  __int128 v2439;
  uint64_t v2440[3];
  __int128 v2441;
  __int128 v2442;
  __int128 v2443;
  __int128 v2444;
  __int128 v2445;
  __int128 v2446;
  __int128 v2447;
  __int128 v2448;
  __int128 v2449;
  __int128 v2450;
  __int128 v2451;
  __int128 v2452;
  __int128 v2453;
  __int128 v2454;
  __int128 v2455;
  int v2456;
  __int128 v2457;
  uint64_t v2458[3];
  __int128 v2459;
  __int128 v2460;
  __int128 v2461;
  __int128 v2462;
  __int128 v2463;
  __int128 v2464;
  __int128 v2465;
  __int128 v2466;
  __int128 v2467;
  __int128 v2468;
  __int128 v2469;
  __int128 v2470;
  __int128 v2471;
  __int128 v2472;
  __int128 v2473;
  int v2474;
  __int128 v2475;
  uint64_t v2476[3];
  __int128 v2477;
  __int128 v2478;
  __int128 v2479;
  __int128 v2480;
  __int128 v2481;
  __int128 v2482;
  __int128 v2483;
  __int128 v2484;
  __int128 v2485;
  __int128 v2486;
  __int128 v2487;
  __int128 v2488;
  __int128 v2489;
  __int128 v2490;
  __int128 v2491;
  int v2492;
  __int128 v2493;
  uint64_t v2494[3];
  __int128 v2495;
  __int128 v2496;
  __int128 v2497;
  __int128 v2498;
  __int128 v2499;
  __int128 v2500;
  __int128 v2501;
  __int128 v2502;
  __int128 v2503;
  __int128 v2504;
  __int128 v2505;
  __int128 v2506;
  __int128 v2507;
  __int128 v2508;
  __int128 v2509;
  int v2510;
  __int128 v2511;
  uint64_t v2512[3];
  __int128 v2513;
  __int128 v2514;
  __int128 v2515;
  __int128 v2516;
  __int128 v2517;
  __int128 v2518;
  __int128 v2519;
  __int128 v2520;
  __int128 v2521;
  __int128 v2522;
  __int128 v2523;
  __int128 v2524;
  __int128 v2525;
  __int128 v2526;
  __int128 v2527;
  int v2528;
  __int128 v2529;
  uint64_t v2530[3];
  __int128 v2531;
  __int128 v2532;
  __int128 v2533;
  __int128 v2534;
  __int128 v2535;
  __int128 v2536;
  __int128 v2537;
  __int128 v2538;
  __int128 v2539;
  __int128 v2540;
  __int128 v2541;
  __int128 v2542;
  __int128 v2543;
  __int128 v2544;
  __int128 v2545;
  int v2546;
  __int128 v2547;
  uint64_t v2548[3];
  __int128 v2549;
  __int128 v2550;
  __int128 v2551;
  __int128 v2552;
  __int128 v2553;
  __int128 v2554;
  __int128 v2555;
  __int128 v2556;
  __int128 v2557;
  __int128 v2558;
  __int128 v2559;
  __int128 v2560;
  __int128 v2561;
  __int128 v2562;
  __int128 v2563;
  int v2564;
  __int128 v2565;
  uint64_t v2566[3];
  __int128 v2567;
  __int128 v2568;
  __int128 v2569;
  __int128 v2570;
  __int128 v2571;
  __int128 v2572;
  __int128 v2573;
  __int128 v2574;
  __int128 v2575;
  __int128 v2576;
  __int128 v2577;
  __int128 v2578;
  __int128 v2579;
  __int128 v2580;
  __int128 v2581;
  int v2582;
  __int128 v2583;
  uint64_t v2584[3];
  __int128 v2585;
  __int128 v2586;
  __int128 v2587;
  __int128 v2588;
  __int128 v2589;
  __int128 v2590;
  __int128 v2591;
  __int128 v2592;
  __int128 v2593;
  __int128 v2594;
  __int128 v2595;
  __int128 v2596;
  __int128 v2597;
  __int128 v2598;
  __int128 v2599;
  int v2600;
  __int128 v2601;
  uint64_t v2602[3];
  __int128 v2603;
  __int128 v2604;
  __int128 v2605;
  __int128 v2606;
  __int128 v2607;
  __int128 v2608;
  __int128 v2609;
  __int128 v2610;
  __int128 v2611;
  __int128 v2612;
  __int128 v2613;
  __int128 v2614;
  __int128 v2615;
  __int128 v2616;
  __int128 v2617;
  int v2618;
  __int128 v2619;
  uint64_t v2620[3];
  __int128 v2621;
  __int128 v2622;
  __int128 v2623;
  __int128 v2624;
  __int128 v2625;
  __int128 v2626;
  __int128 v2627;
  __int128 v2628;
  __int128 v2629;
  __int128 v2630;
  __int128 v2631;
  __int128 v2632;
  __int128 v2633;
  __int128 v2634;
  __int128 v2635;
  int v2636;
  uint64_t v2637[3];
  int v2638;
  uint64_t v2639[3];
  int v2640;
  uint64_t v2641[3];
  int v2642;
  uint64_t v2643[3];
  int v2644;
  uint64_t v2645[3];
  int v2646;
  uint64_t v2647[3];
  int v2648;
  uint64_t v2649[3];
  int v2650;
  uint64_t v2651[3];
  int v2652;
  uint64_t v2653[3];
  int v2654;
  uint64_t v2655[3];
  int v2656;
  uint64_t v2657[3];
  int v2658;
  uint64_t v2659[3];
  int v2660;
  uint64_t v2661[3];
  int v2662;
  uint64_t v2663[3];
  int v2664;
  uint64_t v2665[3];
  int v2666;
  uint64_t v2667[3];

  v2582 = 6;
  v2583 = xmmword_100859D90;
  sub_100232898(v2584, (uint64_t)&unk_100859DA0);
  v2597 = xmmword_100859E78;
  v2598 = *(_OWORD *)&qword_100859E88;
  v2593 = xmmword_100859E38;
  v2594 = *(_OWORD *)&qword_100859E48;
  v2595 = xmmword_100859E58;
  v2596 = unk_100859E68;
  v2589 = xmmword_100859DF8;
  v2590 = unk_100859E08;
  v2591 = xmmword_100859E18;
  v2592 = unk_100859E28;
  v2585 = xmmword_100859DB8;
  v2586 = *(_OWORD *)&qword_100859DC8;
  v2587 = xmmword_100859DD8;
  v2588 = unk_100859DE8;
  v2599 = xmmword_100859E98;
  v2600 = 7;
  v2601 = xmmword_100859D90;
  sub_100232898(v2602, (uint64_t)&unk_100859DA0);
  v2615 = xmmword_100859E78;
  v2616 = *(_OWORD *)&qword_100859E88;
  v2611 = xmmword_100859E38;
  v2612 = *(_OWORD *)&qword_100859E48;
  v2613 = xmmword_100859E58;
  v2614 = unk_100859E68;
  v2607 = xmmword_100859DF8;
  v2608 = unk_100859E08;
  v2609 = xmmword_100859E18;
  v2610 = unk_100859E28;
  v2603 = xmmword_100859DB8;
  v2604 = *(_OWORD *)&qword_100859DC8;
  v2605 = xmmword_100859DD8;
  v2606 = unk_100859DE8;
  v2617 = xmmword_100859E98;
  v2618 = 0;
  v2619 = xmmword_100859D90;
  sub_100232898(v2620, (uint64_t)&unk_100859DA0);
  v2633 = xmmword_100859E78;
  v2634 = *(_OWORD *)&qword_100859E88;
  v2635 = xmmword_100859E98;
  v2629 = xmmword_100859E38;
  v2630 = *(_OWORD *)&qword_100859E48;
  v2631 = xmmword_100859E58;
  v2632 = unk_100859E68;
  v2625 = xmmword_100859DF8;
  v2626 = unk_100859E08;
  v2627 = xmmword_100859E18;
  v2628 = unk_100859E28;
  v2621 = xmmword_100859DB8;
  v2622 = *(_OWORD *)&qword_100859DC8;
  v2623 = xmmword_100859DD8;
  v2624 = unk_100859DE8;
  sub_100233348((uint64_t)v839, &v2582, 3);
  v2636 = 1;
  sub_100233560(v2637, (uint64_t)v839);
  v2528 = 6;
  v2529 = xmmword_100859D90;
  sub_100232898(v2530, (uint64_t)&unk_100859DA0);
  v2543 = xmmword_100859E78;
  v2544 = *(_OWORD *)&qword_100859E88;
  v2539 = xmmword_100859E38;
  v2540 = *(_OWORD *)&qword_100859E48;
  v2541 = xmmword_100859E58;
  v2542 = unk_100859E68;
  v2535 = xmmword_100859DF8;
  v2536 = unk_100859E08;
  v2537 = xmmword_100859E18;
  v2538 = unk_100859E28;
  v2531 = xmmword_100859DB8;
  v2532 = *(_OWORD *)&qword_100859DC8;
  v2533 = xmmword_100859DD8;
  v2534 = unk_100859DE8;
  v2545 = xmmword_100859E98;
  v2546 = 7;
  v2547 = xmmword_100859D90;
  sub_100232898(v2548, (uint64_t)&unk_100859DA0);
  v2561 = xmmword_100859E78;
  v2562 = *(_OWORD *)&qword_100859E88;
  v2557 = xmmword_100859E38;
  v2558 = *(_OWORD *)&qword_100859E48;
  v2559 = xmmword_100859E58;
  v2560 = unk_100859E68;
  v2553 = xmmword_100859DF8;
  v2554 = unk_100859E08;
  v2555 = xmmword_100859E18;
  v2556 = unk_100859E28;
  v2549 = xmmword_100859DB8;
  v2550 = *(_OWORD *)&qword_100859DC8;
  v2551 = xmmword_100859DD8;
  v2552 = unk_100859DE8;
  v2563 = xmmword_100859E98;
  v2564 = 0;
  v2565 = xmmword_100859D90;
  sub_100232898(v2566, (uint64_t)&unk_100859DA0);
  v2579 = xmmword_100859E78;
  v2580 = *(_OWORD *)&qword_100859E88;
  v2581 = xmmword_100859E98;
  v2575 = xmmword_100859E38;
  v2576 = *(_OWORD *)&qword_100859E48;
  v2577 = xmmword_100859E58;
  v2578 = unk_100859E68;
  v2571 = xmmword_100859DF8;
  v2572 = unk_100859E08;
  v2573 = xmmword_100859E18;
  v2574 = unk_100859E28;
  v2567 = xmmword_100859DB8;
  v2568 = *(_OWORD *)&qword_100859DC8;
  v2569 = xmmword_100859DD8;
  v2570 = unk_100859DE8;
  sub_100233348((uint64_t)v838, &v2528, 3);
  v2638 = 2;
  sub_100233560(v2639, (uint64_t)v838);
  v2456 = 6;
  v2457 = xmmword_100859D90;
  sub_100232898(v2458, (uint64_t)&unk_100859DA0);
  v2471 = xmmword_100859E78;
  v2472 = *(_OWORD *)&qword_100859E88;
  v2467 = xmmword_100859E38;
  v2468 = *(_OWORD *)&qword_100859E48;
  v2469 = xmmword_100859E58;
  v2470 = unk_100859E68;
  v2463 = xmmword_100859DF8;
  v2464 = unk_100859E08;
  v2465 = xmmword_100859E18;
  v2466 = unk_100859E28;
  v2459 = xmmword_100859DB8;
  v2460 = *(_OWORD *)&qword_100859DC8;
  v2461 = xmmword_100859DD8;
  v2462 = unk_100859DE8;
  v2473 = xmmword_100859E98;
  v2474 = 4;
  v2475 = xmmword_100859D90;
  sub_100232898(v2476, (uint64_t)&unk_100859DA0);
  v2489 = xmmword_100859E78;
  v2490 = *(_OWORD *)&qword_100859E88;
  v2485 = xmmword_100859E38;
  v2486 = *(_OWORD *)&qword_100859E48;
  v2487 = xmmword_100859E58;
  v2488 = unk_100859E68;
  v2481 = xmmword_100859DF8;
  v2482 = unk_100859E08;
  v2483 = xmmword_100859E18;
  v2484 = unk_100859E28;
  v2477 = xmmword_100859DB8;
  v2478 = *(_OWORD *)&qword_100859DC8;
  v2479 = xmmword_100859DD8;
  v2480 = unk_100859DE8;
  v2491 = xmmword_100859E98;
  v2492 = 7;
  v2493 = xmmword_100859D90;
  sub_100232898(v2494, (uint64_t)&unk_100859DA0);
  v2507 = xmmword_100859E78;
  v2508 = *(_OWORD *)&qword_100859E88;
  v2503 = xmmword_100859E38;
  v2504 = *(_OWORD *)&qword_100859E48;
  v2505 = xmmword_100859E58;
  v2506 = unk_100859E68;
  v2499 = xmmword_100859DF8;
  v2500 = unk_100859E08;
  v2501 = xmmword_100859E18;
  v2502 = unk_100859E28;
  v2495 = xmmword_100859DB8;
  v2496 = *(_OWORD *)&qword_100859DC8;
  v2497 = xmmword_100859DD8;
  v2498 = unk_100859DE8;
  v2509 = xmmword_100859E98;
  v2510 = 0;
  v2511 = xmmword_100859D90;
  sub_100232898(v2512, (uint64_t)&unk_100859DA0);
  v2524 = unk_100859E68;
  v2525 = xmmword_100859E78;
  v2526 = *(_OWORD *)&qword_100859E88;
  v2527 = xmmword_100859E98;
  v2521 = xmmword_100859E38;
  v2522 = *(_OWORD *)&qword_100859E48;
  v2523 = xmmword_100859E58;
  v2517 = xmmword_100859DF8;
  v2518 = unk_100859E08;
  v2519 = xmmword_100859E18;
  v2520 = unk_100859E28;
  v2513 = xmmword_100859DB8;
  v2514 = *(_OWORD *)&qword_100859DC8;
  v2515 = xmmword_100859DD8;
  v2516 = unk_100859DE8;
  sub_100233348((uint64_t)v837, &v2456, 4);
  v2640 = 3;
  sub_100233560(v2641, (uint64_t)v837);
  v2384 = 6;
  v2385 = xmmword_100859D90;
  sub_100232898(v2386, (uint64_t)&unk_100859DA0);
  v2399 = xmmword_100859E78;
  v2400 = *(_OWORD *)&qword_100859E88;
  v2401 = xmmword_100859E98;
  v2395 = xmmword_100859E38;
  v2396 = *(_OWORD *)&qword_100859E48;
  v2397 = xmmword_100859E58;
  v2398 = unk_100859E68;
  v2391 = xmmword_100859DF8;
  v2392 = unk_100859E08;
  v2393 = xmmword_100859E18;
  v2394 = unk_100859E28;
  v2387 = xmmword_100859DB8;
  v2388 = *(_OWORD *)&qword_100859DC8;
  v2389 = xmmword_100859DD8;
  v2390 = unk_100859DE8;
  *(_QWORD *)&v821 = 0x300000008;
  *((_QWORD *)&v821 + 1) = 0xC04F000000000000;
  v2042 = -62.0;
  sub_10018252C((uint64_t)v822, &v2042, 1);
  v823 = xmmword_10046E0F0;
  *(_QWORD *)&v824 = 0x4024000000000000;
  DWORD2(v824) = 45;
  BYTE12(v824) = 0;
  LODWORD(v825) = 1;
  BYTE8(v825) = 1;
  v826 = xmmword_10046E100;
  v827 = xmmword_10046E110;
  __asm { FMOV            V0.2D, #1.0 }
  v33 = _Q0;
  v828 = _Q0;
  *(_QWORD *)&v829[0] = 0xC059000000000000;
  *(_OWORD *)((char *)v829 + 8) = xmmword_10046E120;
  *((int32x2_t *)&v829[1] + 1) = vdup_n_s32(0x3DCCCCCDu);
  v830 = xmmword_10046E060;
  *(_QWORD *)&v832[0] = 0;
  v831 = 0x3FD999999999999AuLL;
  *(_OWORD *)((char *)v832 + 8) = xmmword_10046E070;
  DWORD2(v832[1]) = 5;
  *(_QWORD *)&v833 = 0x4000000000000000;
  DWORD2(v833) = 10;
  *(_QWORD *)&v834 = 0x4034000000000000;
  DWORD2(v834) = 3;
  *(_QWORD *)&v835 = 0x3FF0000000000000;
  *((_QWORD *)&v835 + 1) = 0x4008000000000000;
  v2402 = 3;
  v2403 = v821;
  sub_100232898(v2404, (uint64_t)v822);
  v2417 = v833;
  v2418 = v834;
  v2419 = v835;
  v2413 = v830;
  v2414 = v831;
  v2415 = v832[0];
  v2416 = v832[1];
  v2409 = v827;
  v2410 = v828;
  v2411 = v829[0];
  v2412 = v829[1];
  v2405 = v823;
  v2406 = v824;
  v2407 = v825;
  v2408 = v826;
  v2420 = 7;
  v2421 = xmmword_100859D90;
  sub_100232898(v2422, (uint64_t)&unk_100859DA0);
  v2435 = xmmword_100859E78;
  v2436 = *(_OWORD *)&qword_100859E88;
  v2437 = xmmword_100859E98;
  v2431 = xmmword_100859E38;
  v2432 = *(_OWORD *)&qword_100859E48;
  v2433 = xmmword_100859E58;
  v2434 = unk_100859E68;
  v2427 = xmmword_100859DF8;
  v2428 = unk_100859E08;
  v2429 = xmmword_100859E18;
  v2430 = unk_100859E28;
  v2423 = xmmword_100859DB8;
  v2424 = *(_OWORD *)&qword_100859DC8;
  v2425 = xmmword_100859DD8;
  v2426 = unk_100859DE8;
  *(_QWORD *)&v806 = 0x300000008;
  *((_QWORD *)&v806 + 1) = 0xC04F000000000000;
  v2042 = -62.0;
  sub_10018252C((uint64_t)v807, &v2042, 1);
  v808 = xmmword_10046E0F0;
  *(_QWORD *)&v809 = 0x4024000000000000;
  DWORD2(v809) = 45;
  BYTE12(v809) = 0;
  LODWORD(v810) = 1;
  BYTE8(v810) = 1;
  v811 = xmmword_10046E100;
  v812 = xmmword_10046E110;
  v813 = v33;
  *(_QWORD *)&v814[0] = 0xC059000000000000;
  *(_OWORD *)((char *)v814 + 8) = xmmword_10046E120;
  *((int32x2_t *)&v814[1] + 1) = vdup_n_s32(0x3DCCCCCDu);
  v815 = xmmword_10046E060;
  *(_QWORD *)&v817[0] = 0;
  v816 = 0x3FD999999999999AuLL;
  *(_OWORD *)((char *)v817 + 8) = xmmword_10046E070;
  DWORD2(v817[1]) = 5;
  *(_QWORD *)&v818 = 0x4000000000000000;
  DWORD2(v818) = 10;
  *(_QWORD *)&v819 = 0x4034000000000000;
  DWORD2(v819) = 3;
  *(_QWORD *)&v820 = 0x3FF0000000000000;
  *((_QWORD *)&v820 + 1) = 0x4008000000000000;
  v2438 = 0;
  v2439 = v806;
  sub_100232898(v2440, (uint64_t)v807);
  v2452 = v817[1];
  v2453 = v818;
  v2454 = v819;
  v2455 = v820;
  v2449 = v815;
  v2450 = v816;
  v2451 = v817[0];
  v2445 = v812;
  v2446 = v813;
  v2447 = v814[0];
  v2448 = v814[1];
  v2441 = v808;
  v2442 = v809;
  v2443 = v810;
  v2444 = v811;
  sub_100233348((uint64_t)v836, &v2384, 4);
  v2642 = 4;
  sub_100233560(v2643, (uint64_t)v836);
  *(_QWORD *)&v790 = 0x300000008;
  *((_QWORD *)&v790 + 1) = 0xC04F19999999999ALL;
  v2042 = -62.2;
  sub_10018252C((uint64_t)v791, &v2042, 1);
  v792 = xmmword_10046E0F0;
  *(_QWORD *)&v793 = 0x4024000000000000;
  DWORD2(v793) = 45;
  BYTE12(v793) = 0;
  LODWORD(v794) = 1;
  BYTE8(v794) = 1;
  v795 = xmmword_10046E100;
  v796 = xmmword_10046E110;
  v797 = v33;
  *(_QWORD *)&v798[0] = 0xC059000000000000;
  *(_OWORD *)((char *)v798 + 8) = xmmword_10046E120;
  *((int32x2_t *)&v798[1] + 1) = vdup_n_s32(0x3DCCCCCDu);
  v799 = xmmword_10046E060;
  *(_QWORD *)&v801[0] = 0;
  v800 = 0x3FD999999999999AuLL;
  *(_OWORD *)((char *)v801 + 8) = xmmword_10046E070;
  DWORD2(v801[1]) = 5;
  *(_QWORD *)&v802 = 0x4000000000000000;
  DWORD2(v802) = 10;
  *(_QWORD *)&v803 = 0x4034000000000000;
  DWORD2(v803) = 3;
  *(_QWORD *)&v804 = 0x3FF0000000000000;
  *((_QWORD *)&v804 + 1) = 0x4008000000000000;
  v2330 = 6;
  v2331 = v790;
  sub_100232898(v2332, (uint64_t)v791);
  v2345 = v802;
  v2346 = v803;
  v2347 = v804;
  v2341 = v799;
  v2342 = v800;
  v2343 = v801[0];
  v2344 = v801[1];
  v2337 = v796;
  v2338 = v797;
  v2339 = v798[0];
  v2340 = v798[1];
  v2333 = v792;
  v2334 = v793;
  v2335 = v794;
  v2336 = v795;
  v2348 = 7;
  v2349 = xmmword_100859D90;
  sub_100232898(v2350, (uint64_t)&unk_100859DA0);
  v2363 = xmmword_100859E78;
  v2364 = *(_OWORD *)&qword_100859E88;
  v2365 = xmmword_100859E98;
  v2359 = xmmword_100859E38;
  v2360 = *(_OWORD *)&qword_100859E48;
  v2361 = xmmword_100859E58;
  v2362 = unk_100859E68;
  v2355 = xmmword_100859DF8;
  v2356 = unk_100859E08;
  v2357 = xmmword_100859E18;
  v2358 = unk_100859E28;
  v2351 = xmmword_100859DB8;
  v2352 = *(_OWORD *)&qword_100859DC8;
  v2353 = xmmword_100859DD8;
  v2354 = unk_100859DE8;
  *(_QWORD *)&v775 = 0x300000008;
  *((_QWORD *)&v775 + 1) = 0xC04F19999999999ALL;
  v2042 = -62.2;
  sub_10018252C((uint64_t)v776, &v2042, 1);
  v777 = xmmword_10046E0F0;
  *(_QWORD *)&v778 = 0x4024000000000000;
  DWORD2(v778) = 45;
  BYTE12(v778) = 0;
  LODWORD(v779) = 1;
  BYTE8(v779) = 1;
  v780 = xmmword_10046E100;
  v781 = xmmword_10046E110;
  v782 = v33;
  *(_QWORD *)&v783[0] = 0xC059000000000000;
  *(_OWORD *)((char *)v783 + 8) = xmmword_10046E120;
  *((int32x2_t *)&v783[1] + 1) = vdup_n_s32(0x3DCCCCCDu);
  v784 = xmmword_10046E060;
  *(_QWORD *)&v786[0] = 0;
  v785 = 0x3FD999999999999AuLL;
  *(_OWORD *)((char *)v786 + 8) = xmmword_10046E070;
  DWORD2(v786[1]) = 5;
  *(_QWORD *)&v787 = 0x4000000000000000;
  DWORD2(v787) = 10;
  *(_QWORD *)&v788 = 0x4034000000000000;
  DWORD2(v788) = 3;
  *(_QWORD *)&v789 = 0x3FF0000000000000;
  *((_QWORD *)&v789 + 1) = 0x4008000000000000;
  v2366 = 0;
  v2367 = v775;
  sub_100232898(v2368, (uint64_t)v776);
  v2381 = v787;
  v2382 = v788;
  v2383 = v789;
  v2377 = v784;
  v2378 = v785;
  v2379 = v786[0];
  v2380 = v786[1];
  v2373 = v781;
  v2374 = v782;
  v2375 = v783[0];
  v2376 = v783[1];
  v2369 = v777;
  v2370 = v778;
  v2371 = v779;
  v2372 = v780;
  sub_100233348((uint64_t)v805, &v2330, 3);
  v2644 = 5;
  sub_100233560(v2645, (uint64_t)v805);
  v2276 = 6;
  v2277 = xmmword_100859D90;
  sub_100232898(v2278, (uint64_t)&unk_100859DA0);
  v2291 = xmmword_100859E78;
  v2292 = *(_OWORD *)&qword_100859E88;
  v2287 = xmmword_100859E38;
  v2288 = *(_OWORD *)&qword_100859E48;
  v2289 = xmmword_100859E58;
  v2290 = unk_100859E68;
  v2283 = xmmword_100859DF8;
  v2284 = unk_100859E08;
  v2285 = xmmword_100859E18;
  v2286 = unk_100859E28;
  v2279 = xmmword_100859DB8;
  v2280 = *(_OWORD *)&qword_100859DC8;
  v2281 = xmmword_100859DD8;
  v2282 = unk_100859DE8;
  v2293 = xmmword_100859E98;
  v2294 = 7;
  v2295 = xmmword_100859D90;
  sub_100232898(v2296, (uint64_t)&unk_100859DA0);
  v2309 = xmmword_100859E78;
  v2310 = *(_OWORD *)&qword_100859E88;
  v2305 = xmmword_100859E38;
  v2306 = *(_OWORD *)&qword_100859E48;
  v2307 = xmmword_100859E58;
  v2308 = unk_100859E68;
  v2301 = xmmword_100859DF8;
  v2302 = unk_100859E08;
  v2303 = xmmword_100859E18;
  v2304 = unk_100859E28;
  v2297 = xmmword_100859DB8;
  v2298 = *(_OWORD *)&qword_100859DC8;
  v2299 = xmmword_100859DD8;
  v2300 = unk_100859DE8;
  v2311 = xmmword_100859E98;
  v2312 = 0;
  v2313 = xmmword_100859D90;
  sub_100232898(v2314, (uint64_t)&unk_100859DA0);
  v2327 = xmmword_100859E78;
  v2328 = *(_OWORD *)&qword_100859E88;
  v2329 = xmmword_100859E98;
  v2323 = xmmword_100859E38;
  v2324 = *(_OWORD *)&qword_100859E48;
  v2325 = xmmword_100859E58;
  v2326 = unk_100859E68;
  v2319 = xmmword_100859DF8;
  v2320 = unk_100859E08;
  v2321 = xmmword_100859E18;
  v2322 = unk_100859E28;
  v2315 = xmmword_100859DB8;
  v2316 = *(_OWORD *)&qword_100859DC8;
  v2317 = xmmword_100859DD8;
  v2318 = unk_100859DE8;
  sub_100233348((uint64_t)v774, &v2276, 3);
  v2646 = 9;
  sub_100233560(v2647, (uint64_t)v774);
  v2222 = 6;
  v2223 = xmmword_100859D90;
  sub_100232898(v2224, (uint64_t)&unk_100859DA0);
  v2237 = xmmword_100859E78;
  v2238 = *(_OWORD *)&qword_100859E88;
  v2233 = xmmword_100859E38;
  v2234 = *(_OWORD *)&qword_100859E48;
  v2235 = xmmword_100859E58;
  v2236 = unk_100859E68;
  v2229 = xmmword_100859DF8;
  v2230 = unk_100859E08;
  v2231 = xmmword_100859E18;
  v2232 = unk_100859E28;
  v2225 = xmmword_100859DB8;
  v2226 = *(_OWORD *)&qword_100859DC8;
  v2227 = xmmword_100859DD8;
  v2228 = unk_100859DE8;
  v2239 = xmmword_100859E98;
  v2240 = 7;
  v2241 = xmmword_100859D90;
  sub_100232898(v2242, (uint64_t)&unk_100859DA0);
  v2255 = xmmword_100859E78;
  v2256 = *(_OWORD *)&qword_100859E88;
  v2251 = xmmword_100859E38;
  v2252 = *(_OWORD *)&qword_100859E48;
  v2253 = xmmword_100859E58;
  v2254 = unk_100859E68;
  v2247 = xmmword_100859DF8;
  v2248 = unk_100859E08;
  v2249 = xmmword_100859E18;
  v2250 = unk_100859E28;
  v2243 = xmmword_100859DB8;
  v2244 = *(_OWORD *)&qword_100859DC8;
  v2245 = xmmword_100859DD8;
  v2246 = unk_100859DE8;
  v2257 = xmmword_100859E98;
  v2258 = 0;
  v2259 = xmmword_100859D90;
  sub_100232898(v2260, (uint64_t)&unk_100859DA0);
  v2273 = xmmword_100859E78;
  v2274 = *(_OWORD *)&qword_100859E88;
  v2275 = xmmword_100859E98;
  v2269 = xmmword_100859E38;
  v2270 = *(_OWORD *)&qword_100859E48;
  v2271 = xmmword_100859E58;
  v2272 = unk_100859E68;
  v2265 = xmmword_100859DF8;
  v2266 = unk_100859E08;
  v2267 = xmmword_100859E18;
  v2268 = unk_100859E28;
  v2261 = xmmword_100859DB8;
  v2262 = *(_OWORD *)&qword_100859DC8;
  v2263 = xmmword_100859DD8;
  v2264 = unk_100859DE8;
  sub_100233348((uint64_t)v773, &v2222, 3);
  v2648 = 12;
  sub_100233560(v2649, (uint64_t)v773);
  LODWORD(v2042) = 1;
  v2043 = xmmword_100859D90;
  sub_100232898(v2044, (uint64_t)&unk_100859DA0);
  v2057 = xmmword_100859E78;
  v2058 = *(_OWORD *)&qword_100859E88;
  v2059 = xmmword_100859E98;
  v2053 = xmmword_100859E38;
  v2054 = *(_OWORD *)&qword_100859E48;
  v2055 = xmmword_100859E58;
  v2056 = unk_100859E68;
  v2049 = xmmword_100859DF8;
  v2050 = unk_100859E08;
  v2051 = xmmword_100859E18;
  v2052 = unk_100859E28;
  v2045 = xmmword_100859DB8;
  v2046 = *(_OWORD *)&qword_100859DC8;
  v2047 = xmmword_100859DD8;
  v2048 = unk_100859DE8;
  *(_QWORD *)&v757 = 0x300000008;
  *((_QWORD *)&v757 + 1) = 0xC050933333333333;
  v1483 = -66.3;
  sub_10018252C((uint64_t)v758, &v1483, 1);
  v759 = xmmword_10046E0F0;
  *(_QWORD *)&v760 = 0x4024000000000000;
  DWORD2(v760) = 45;
  BYTE12(v760) = 0;
  LODWORD(v761) = 1;
  BYTE8(v761) = 1;
  v762 = xmmword_10046E100;
  v763 = xmmword_10046E110;
  v764 = v33;
  *(_QWORD *)&v765[0] = 0xC059000000000000;
  *(_OWORD *)((char *)v765 + 8) = xmmword_10046E120;
  *((int32x2_t *)&v765[1] + 1) = vdup_n_s32(0x3DCCCCCDu);
  v766 = xmmword_10046E060;
  *(_QWORD *)&v768[0] = 0;
  v767 = 0x3FD999999999999AuLL;
  *(_OWORD *)((char *)v768 + 8) = xmmword_10046E070;
  DWORD2(v768[1]) = 5;
  *(_QWORD *)&v769 = 0x4000000000000000;
  DWORD2(v769) = 10;
  *(_QWORD *)&v770 = 0x4034000000000000;
  DWORD2(v770) = 3;
  *(_QWORD *)&v771 = 0x3FF0000000000000;
  *((_QWORD *)&v771 + 1) = 0x4008000000000000;
  v2060 = 3;
  v2061 = v757;
  sub_100232898(v2062, (uint64_t)v758);
  v2075 = v769;
  v2076 = v770;
  v2077 = v771;
  v2071 = v766;
  v2072 = v767;
  v2073 = v768[0];
  v2074 = v768[1];
  v2067 = v763;
  v2068 = v764;
  v2069 = v765[0];
  v2070 = v765[1];
  v2063 = v759;
  v2064 = v760;
  v2065 = v761;
  v2066 = v762;
  *(_QWORD *)&v742 = 0x300000008;
  *((_QWORD *)&v742 + 1) = 0xC050B9999999999ALL;
  v1483 = -66.9;
  sub_10018252C((uint64_t)v743, &v1483, 1);
  v744 = xmmword_10046E0F0;
  *(_QWORD *)&v745 = 0x4024000000000000;
  DWORD2(v745) = 45;
  BYTE12(v745) = 0;
  LODWORD(v746) = 1;
  BYTE8(v746) = 1;
  v747 = xmmword_10046E100;
  v748 = xmmword_10046E110;
  v749 = v33;
  *(_QWORD *)&v750[0] = 0xC059000000000000;
  *(_OWORD *)((char *)v750 + 8) = xmmword_10046E120;
  *((int32x2_t *)&v750[1] + 1) = vdup_n_s32(0x3DCCCCCDu);
  v751 = xmmword_10046E060;
  *(_QWORD *)&v753[0] = 0;
  v752 = 0x3FD999999999999AuLL;
  *(_OWORD *)((char *)v753 + 8) = xmmword_10046E070;
  DWORD2(v753[1]) = 5;
  *(_QWORD *)&v754 = 0x4000000000000000;
  DWORD2(v754) = 10;
  *(_QWORD *)&v755 = 0x4034000000000000;
  DWORD2(v755) = 3;
  *(_QWORD *)&v756 = 0x3FF0000000000000;
  *((_QWORD *)&v756 + 1) = 0x4008000000000000;
  v2078 = 2;
  v2079 = v742;
  sub_100232898(v2080, (uint64_t)v743);
  v2093 = v754;
  v2094 = v755;
  v2095 = v756;
  v2089 = v751;
  v2090 = v752;
  v2091 = v753[0];
  v2092 = v753[1];
  v2085 = v748;
  v2086 = v749;
  v2087 = v750[0];
  v2088 = v750[1];
  v2081 = v744;
  v2082 = v745;
  v2083 = v746;
  v2084 = v747;
  *(_QWORD *)&v727 = 0x300000008;
  *((_QWORD *)&v727 + 1) = 0xC05079999999999ALL;
  v1483 = -65.9;
  sub_10018252C((uint64_t)v728, &v1483, 1);
  v729 = xmmword_10046E0F0;
  *(_QWORD *)&v730 = 0x4024000000000000;
  DWORD2(v730) = 45;
  BYTE12(v730) = 0;
  LODWORD(v731) = 1;
  BYTE8(v731) = 1;
  v732 = xmmword_10046E100;
  v733 = xmmword_10046E110;
  v734 = v33;
  *(_QWORD *)&v735[0] = 0xC059000000000000;
  *(_OWORD *)((char *)v735 + 8) = xmmword_10046E120;
  *((int32x2_t *)&v735[1] + 1) = vdup_n_s32(0x3DCCCCCDu);
  v736 = xmmword_10046E060;
  *(_QWORD *)&v738[0] = 0;
  v737 = 0x3FD999999999999AuLL;
  *(_OWORD *)((char *)v738 + 8) = xmmword_10046E070;
  DWORD2(v738[1]) = 5;
  *(_QWORD *)&v739 = 0x4000000000000000;
  DWORD2(v739) = 10;
  *(_QWORD *)&v740 = 0x4034000000000000;
  DWORD2(v740) = 3;
  *(_QWORD *)&v741 = 0x3FF0000000000000;
  *((_QWORD *)&v741 + 1) = 0x4008000000000000;
  v2096 = 4;
  v2097 = v727;
  sub_100232898(v2098, (uint64_t)v728);
  v2110 = v738[1];
  v2111 = v739;
  v2112 = v740;
  v2113 = v741;
  v2107 = v736;
  v2108 = v737;
  v2109 = v738[0];
  v2103 = v733;
  v2104 = v734;
  v2105 = v735[0];
  v2106 = v735[1];
  v2099 = v729;
  v2100 = v730;
  v2101 = v731;
  v2102 = v732;
  v2114 = 5;
  v2115 = xmmword_100859D90;
  sub_100232898(v2116, (uint64_t)&unk_100859DA0);
  v2128 = unk_100859E68;
  v2129 = xmmword_100859E78;
  v2130 = *(_OWORD *)&qword_100859E88;
  v2131 = xmmword_100859E98;
  v2124 = unk_100859E28;
  v2125 = xmmword_100859E38;
  v2126 = *(_OWORD *)&qword_100859E48;
  v2127 = xmmword_100859E58;
  v2120 = unk_100859DE8;
  v2121 = xmmword_100859DF8;
  v2122 = unk_100859E08;
  v2123 = xmmword_100859E18;
  v2117 = xmmword_100859DB8;
  v2118 = *(_OWORD *)&qword_100859DC8;
  v2119 = xmmword_100859DD8;
  *(_QWORD *)&v712 = 0x300000008;
  *((_QWORD *)&v712 + 1) = 0xC04F400000000000;
  v1483 = -62.5;
  sub_10018252C((uint64_t)v713, &v1483, 1);
  v714 = xmmword_10046E0F0;
  *(_QWORD *)&v715 = 0x4024000000000000;
  DWORD2(v715) = 45;
  BYTE12(v715) = 0;
  LODWORD(v716) = 1;
  BYTE8(v716) = 1;
  v717 = xmmword_10046E100;
  v718 = xmmword_10046E110;
  v719 = v33;
  *(_QWORD *)&v720[0] = 0xC059000000000000;
  *(_OWORD *)((char *)v720 + 8) = xmmword_10046E120;
  *((int32x2_t *)&v720[1] + 1) = vdup_n_s32(0x3DCCCCCDu);
  v721 = xmmword_10046E060;
  *(_QWORD *)&v723[0] = 0;
  v722 = 0x3FD999999999999AuLL;
  *(_OWORD *)((char *)v723 + 8) = xmmword_10046E070;
  DWORD2(v723[1]) = 5;
  *(_QWORD *)&v724 = 0x4000000000000000;
  DWORD2(v724) = 10;
  *(_QWORD *)&v725 = 0x4034000000000000;
  DWORD2(v725) = 3;
  *(_QWORD *)&v726 = 0x3FF0000000000000;
  *((_QWORD *)&v726 + 1) = 0x4008000000000000;
  v2132 = 9;
  v2133 = v712;
  sub_100232898(v2134, (uint64_t)v713);
  v2146 = v723[1];
  v2147 = v724;
  v2148 = v725;
  v2149 = v726;
  v2142 = v720[1];
  v2143 = v721;
  v2144 = v722;
  v2145 = v723[0];
  v2138 = v717;
  v2139 = v718;
  v2140 = v719;
  v2141 = v720[0];
  v2135 = v714;
  v2136 = v715;
  v2137 = v716;
  v2150 = 12;
  v2151 = xmmword_100859D90;
  sub_100232898(v2152, (uint64_t)&unk_100859DA0);
  v2164 = unk_100859E68;
  v2165 = xmmword_100859E78;
  v2166 = *(_OWORD *)&qword_100859E88;
  v2160 = unk_100859E28;
  v2161 = xmmword_100859E38;
  v2162 = *(_OWORD *)&qword_100859E48;
  v2163 = xmmword_100859E58;
  v2156 = unk_100859DE8;
  v2157 = xmmword_100859DF8;
  v2158 = unk_100859E08;
  v2159 = xmmword_100859E18;
  v2153 = xmmword_100859DB8;
  v2154 = *(_OWORD *)&qword_100859DC8;
  v2155 = xmmword_100859DD8;
  v2167 = xmmword_100859E98;
  v2168 = 6;
  v2169 = xmmword_100859D90;
  sub_100232898(v2170, (uint64_t)&unk_100859DA0);
  v2182 = unk_100859E68;
  v2183 = xmmword_100859E78;
  v2184 = *(_OWORD *)&qword_100859E88;
  v2185 = xmmword_100859E98;
  v2178 = unk_100859E28;
  v2179 = xmmword_100859E38;
  v2180 = *(_OWORD *)&qword_100859E48;
  v2181 = xmmword_100859E58;
  v2174 = unk_100859DE8;
  v2175 = xmmword_100859DF8;
  v2176 = unk_100859E08;
  v2177 = xmmword_100859E18;
  v2171 = xmmword_100859DB8;
  v2172 = *(_OWORD *)&qword_100859DC8;
  v2173 = xmmword_100859DD8;
  *(_QWORD *)&v697 = 0x200000003;
  *((_QWORD *)&v697 + 1) = 0xC04E000000000000;
  v1483 = -60.0;
  sub_10018252C((uint64_t)v698, &v1483, 1);
  v699 = xmmword_100473420;
  *(_QWORD *)&v700 = 0x4000000000000000;
  DWORD2(v700) = 20;
  BYTE12(v700) = 0;
  LODWORD(v701) = 1;
  BYTE8(v701) = 1;
  v702 = xmmword_10046E100;
  v703 = xmmword_10046E110;
  v704 = v33;
  *(_QWORD *)&v705[0] = 0xC059000000000000;
  *(_OWORD *)((char *)v705 + 8) = xmmword_10046E120;
  *((int32x2_t *)&v705[1] + 1) = vdup_n_s32(0x3DCCCCCDu);
  v706 = xmmword_10046E060;
  *(_QWORD *)&v708[0] = 0;
  v707 = 0x3FD999999999999AuLL;
  *(_OWORD *)((char *)v708 + 8) = xmmword_10046E070;
  DWORD2(v708[1]) = 5;
  *(_QWORD *)&v709 = 0x4000000000000000;
  DWORD2(v709) = 10;
  *(_QWORD *)&v710 = 0x4034000000000000;
  DWORD2(v710) = 3;
  *(_QWORD *)&v711 = 0x3FF0000000000000;
  *((_QWORD *)&v711 + 1) = 0x4008000000000000;
  v2186 = 18;
  v2187 = v697;
  sub_100232898(v2188, (uint64_t)v698);
  v2200 = v708[1];
  v2201 = v709;
  v2202 = v710;
  v2203 = v711;
  v2196 = v705[1];
  v2197 = v706;
  v2198 = v707;
  v2199 = v708[0];
  v2192 = v702;
  v2193 = v703;
  v2194 = v704;
  v2195 = v705[0];
  v2189 = v699;
  v2190 = v700;
  v2191 = v701;
  *(_QWORD *)&v682 = 0x300000008;
  *((_QWORD *)&v682 + 1) = 0xC050B9999999999ALL;
  v1483 = -66.9;
  sub_10018252C((uint64_t)v683, &v1483, 1);
  v684 = xmmword_10046E0F0;
  *(_QWORD *)&v685 = 0x4024000000000000;
  DWORD2(v685) = 45;
  BYTE12(v685) = 0;
  LODWORD(v686) = 1;
  BYTE8(v686) = 1;
  v687 = xmmword_10046E100;
  v688 = xmmword_10046E110;
  v689 = v33;
  *(_QWORD *)&v690[0] = 0xC059000000000000;
  *(_OWORD *)((char *)v690 + 8) = xmmword_10046E120;
  *((int32x2_t *)&v690[1] + 1) = vdup_n_s32(0x3DCCCCCDu);
  v691 = xmmword_10046E060;
  *(_QWORD *)&v693[0] = 0;
  v692 = 0x3FD999999999999AuLL;
  *(_OWORD *)((char *)v693 + 8) = xmmword_10046E070;
  DWORD2(v693[1]) = 5;
  *(_QWORD *)&v694 = 0x4000000000000000;
  DWORD2(v694) = 10;
  *(_QWORD *)&v695 = 0x4034000000000000;
  DWORD2(v695) = 3;
  *(_QWORD *)&v696 = 0x3FF0000000000000;
  *((_QWORD *)&v696 + 1) = 0x4008000000000000;
  v2204 = 0;
  v2205 = v682;
  sub_100232898(v2206, (uint64_t)v683);
  v2218 = v693[1];
  v2219 = v694;
  v2220 = v695;
  v2221 = v696;
  v2214 = v690[1];
  v2215 = v691;
  v2216 = v692;
  v2217 = v693[0];
  v2210 = v687;
  v2211 = v688;
  v2212 = v689;
  v2213 = v690[0];
  v2207 = v684;
  v2208 = v685;
  v2209 = v686;
  sub_100233348((uint64_t)v772, (int *)&v2042, 10);
  v2650 = 6;
  sub_100233560(v2651, (uint64_t)v772);
  v1916 = 4;
  v1917 = xmmword_100859D90;
  sub_100232898(v1918, (uint64_t)&unk_100859DA0);
  v1931 = xmmword_100859E78;
  v1932 = *(_OWORD *)&qword_100859E88;
  v1927 = xmmword_100859E38;
  v1928 = *(_OWORD *)&qword_100859E48;
  v1929 = xmmword_100859E58;
  v1930 = unk_100859E68;
  v1923 = xmmword_100859DF8;
  v1924 = unk_100859E08;
  v1925 = xmmword_100859E18;
  v1926 = unk_100859E28;
  v1919 = xmmword_100859DB8;
  v1920 = *(_OWORD *)&qword_100859DC8;
  v1921 = xmmword_100859DD8;
  v1922 = unk_100859DE8;
  v1933 = xmmword_100859E98;
  v1934 = 1;
  v1935 = xmmword_100859D90;
  sub_100232898(v1936, (uint64_t)&unk_100859DA0);
  v1949 = xmmword_100859E78;
  v1950 = *(_OWORD *)&qword_100859E88;
  v1945 = xmmword_100859E38;
  v1946 = *(_OWORD *)&qword_100859E48;
  v1947 = xmmword_100859E58;
  v1948 = unk_100859E68;
  v1941 = xmmword_100859DF8;
  v1942 = unk_100859E08;
  v1943 = xmmword_100859E18;
  v1944 = unk_100859E28;
  v1937 = xmmword_100859DB8;
  v1938 = *(_OWORD *)&qword_100859DC8;
  v1939 = xmmword_100859DD8;
  v1940 = unk_100859DE8;
  v1951 = xmmword_100859E98;
  v1952 = 5;
  v1953 = xmmword_100859D90;
  sub_100232898(v1954, (uint64_t)&unk_100859DA0);
  v1967 = xmmword_100859E78;
  v1968 = *(_OWORD *)&qword_100859E88;
  v1963 = xmmword_100859E38;
  v1964 = *(_OWORD *)&qword_100859E48;
  v1965 = xmmword_100859E58;
  v1966 = unk_100859E68;
  v1959 = xmmword_100859DF8;
  v1960 = unk_100859E08;
  v1961 = xmmword_100859E18;
  v1962 = unk_100859E28;
  v1955 = xmmword_100859DB8;
  v1956 = *(_OWORD *)&qword_100859DC8;
  v1957 = xmmword_100859DD8;
  v1958 = unk_100859DE8;
  v1969 = xmmword_100859E98;
  v1970 = 12;
  v1971 = xmmword_100859D90;
  sub_100232898(v1972, (uint64_t)&unk_100859DA0);
  v1984 = unk_100859E68;
  v1985 = xmmword_100859E78;
  v1986 = *(_OWORD *)&qword_100859E88;
  v1987 = xmmword_100859E98;
  v1981 = xmmword_100859E38;
  v1982 = *(_OWORD *)&qword_100859E48;
  v1983 = xmmword_100859E58;
  v1977 = xmmword_100859DF8;
  v1978 = unk_100859E08;
  v1979 = xmmword_100859E18;
  v1980 = unk_100859E28;
  v1973 = xmmword_100859DB8;
  v1974 = *(_OWORD *)&qword_100859DC8;
  v1975 = xmmword_100859DD8;
  v1976 = unk_100859DE8;
  *(_QWORD *)&v666 = 0x200000003;
  *((_QWORD *)&v666 + 1) = 0xC04E000000000000;
  v1483 = -60.0;
  sub_10018252C((uint64_t)v667, &v1483, 1);
  v668 = xmmword_100473420;
  *(_QWORD *)&v669 = 0x4000000000000000;
  DWORD2(v669) = 20;
  BYTE12(v669) = 0;
  LODWORD(v670) = 1;
  BYTE8(v670) = 1;
  v671 = xmmword_10046E100;
  v672 = xmmword_10046E110;
  v673 = v33;
  *(_QWORD *)&v674[0] = 0xC059000000000000;
  *(_OWORD *)((char *)v674 + 8) = xmmword_10046E120;
  *((int32x2_t *)&v674[1] + 1) = vdup_n_s32(0x3DCCCCCDu);
  v675 = xmmword_10046E060;
  *(_QWORD *)&v677[0] = 0;
  v676 = 0x3FD999999999999AuLL;
  *(_OWORD *)((char *)v677 + 8) = xmmword_10046E070;
  DWORD2(v677[1]) = 5;
  *(_QWORD *)&v678 = 0x4000000000000000;
  DWORD2(v678) = 10;
  *(_QWORD *)&v679 = 0x4034000000000000;
  DWORD2(v679) = 3;
  *(_QWORD *)&v680 = 0x3FF0000000000000;
  *((_QWORD *)&v680 + 1) = 0x4008000000000000;
  v1988 = 18;
  v1989 = v666;
  sub_100232898(v1990, (uint64_t)v667);
  v2002 = v677[1];
  v2003 = v678;
  v2004 = v679;
  v2005 = v680;
  v1998 = v674[1];
  v1999 = v675;
  v2000 = v676;
  v2001 = v677[0];
  v1994 = v671;
  v1995 = v672;
  v1996 = v673;
  v1997 = v674[0];
  v1991 = v668;
  v1992 = v669;
  v1993 = v670;
  v2006 = 0;
  v2007 = xmmword_100859D90;
  sub_100232898(v2008, (uint64_t)&unk_100859DA0);
  v2020 = unk_100859E68;
  v2021 = xmmword_100859E78;
  v2022 = *(_OWORD *)&qword_100859E88;
  v2023 = xmmword_100859E98;
  v2016 = unk_100859E28;
  v2017 = xmmword_100859E38;
  v2018 = *(_OWORD *)&qword_100859E48;
  v2019 = xmmword_100859E58;
  v2012 = unk_100859DE8;
  v2013 = xmmword_100859DF8;
  v2014 = unk_100859E08;
  v2015 = xmmword_100859E18;
  v2009 = xmmword_100859DB8;
  v2010 = *(_OWORD *)&qword_100859DC8;
  v2011 = xmmword_100859DD8;
  *(_QWORD *)&v651 = 0x300000008;
  *((_QWORD *)&v651 + 1) = 0xC050000000000000;
  v1483 = -64.0;
  sub_10018252C((uint64_t)v652, &v1483, 1);
  v653 = xmmword_10046E0F0;
  *(_QWORD *)&v654 = 0x4024000000000000;
  DWORD2(v654) = 45;
  BYTE12(v654) = 0;
  LODWORD(v655) = 1;
  BYTE8(v655) = 1;
  v656 = xmmword_10046E100;
  v657 = xmmword_10046E110;
  v658 = v33;
  *(_QWORD *)&v659[0] = 0xC059000000000000;
  *(_OWORD *)((char *)v659 + 8) = xmmword_10046E120;
  *((int32x2_t *)&v659[1] + 1) = vdup_n_s32(0x3DCCCCCDu);
  v660 = xmmword_10046E060;
  *(_QWORD *)&v662[0] = 0;
  v661 = 0x3FD999999999999AuLL;
  *(_OWORD *)((char *)v662 + 8) = xmmword_10046E070;
  DWORD2(v662[1]) = 5;
  *(_QWORD *)&v663 = 0x4000000000000000;
  DWORD2(v663) = 10;
  *(_QWORD *)&v664 = 0x4034000000000000;
  DWORD2(v664) = 3;
  *(_QWORD *)&v665 = 0x3FF0000000000000;
  *((_QWORD *)&v665 + 1) = 0x4008000000000000;
  v2024 = 7;
  v2025 = v651;
  sub_100232898(v2026, (uint64_t)v652);
  v2038 = v662[1];
  v2039 = v663;
  v2040 = v664;
  v2041 = v665;
  v2034 = v659[1];
  v2035 = v660;
  v2036 = v661;
  v2037 = v662[0];
  v2030 = v656;
  v2031 = v657;
  v2032 = v658;
  v2033 = v659[0];
  v2027 = v653;
  v2028 = v654;
  v2029 = v655;
  sub_100233348((uint64_t)v681, &v1916, 7);
  v2652 = 7;
  sub_100233560(v2653, (uint64_t)v681);
  *(_QWORD *)&v635 = 0x300000008;
  *((_QWORD *)&v635 + 1) = 0xC050B9999999999ALL;
  v1483 = -66.9;
  sub_10018252C((uint64_t)v636, &v1483, 1);
  v637 = xmmword_10046E0F0;
  *(_QWORD *)&v638 = 0x4024000000000000;
  DWORD2(v638) = 45;
  BYTE12(v638) = 0;
  LODWORD(v639) = 1;
  BYTE8(v639) = 1;
  v640 = xmmword_10046E100;
  v641 = xmmword_10046E110;
  v642 = v33;
  *(_QWORD *)&v643[0] = 0xC059000000000000;
  *(_OWORD *)((char *)v643 + 8) = xmmword_10046E120;
  *((int32x2_t *)&v643[1] + 1) = vdup_n_s32(0x3DCCCCCDu);
  v644 = xmmword_10046E060;
  *(_QWORD *)&v646[0] = 0;
  v645 = 0x3FD999999999999AuLL;
  *(_OWORD *)((char *)v646 + 8) = xmmword_10046E070;
  DWORD2(v646[1]) = 5;
  *(_QWORD *)&v647 = 0x4000000000000000;
  DWORD2(v647) = 10;
  *(_QWORD *)&v648 = 0x4034000000000000;
  DWORD2(v648) = 3;
  *(_QWORD *)&v649 = 0x3FF0000000000000;
  *((_QWORD *)&v649 + 1) = 0x4008000000000000;
  v1897 = 0;
  v1898 = v635;
  sub_100232898(&v1899, (uint64_t)v636);
  v1913 = v647;
  v1914 = v648;
  v1915 = v649;
  v1909 = v644;
  v1910 = v645;
  v1911 = v646[0];
  v1912 = v646[1];
  v1905 = v641;
  v1906 = v642;
  v1907 = v643[0];
  v1908 = v643[1];
  v1901 = v637;
  v1902 = v638;
  v1903 = v639;
  v1904 = v640;
  sub_100233348((uint64_t)v650, &v1897, 1);
  v2654 = 0;
  sub_100233560(v2655, (uint64_t)v650);
  sub_100233638((uint64_t)v840, &v2636, 10);
  v2656 = 4;
  sub_100233804(v2657, (uint64_t)v840);
  *(_QWORD *)&v618 = 0x300000008;
  *((_QWORD *)&v618 + 1) = 0xC04CC00000000000;
  v1483 = -57.5;
  sub_10018252C((uint64_t)v619, &v1483, 1);
  v620 = xmmword_10046E0F0;
  *(_QWORD *)&v621 = 0x4024000000000000;
  DWORD2(v621) = 45;
  BYTE12(v621) = 0;
  LODWORD(v622) = 1;
  BYTE8(v622) = 1;
  v623 = xmmword_10046E100;
  v624 = xmmword_10046E110;
  v625 = v33;
  *(_QWORD *)&v626[0] = 0xC059000000000000;
  *(_OWORD *)((char *)v626 + 8) = xmmword_10046E120;
  *((int32x2_t *)&v626[1] + 1) = vdup_n_s32(0x3DCCCCCDu);
  v627 = xmmword_10046E060;
  *(_QWORD *)&v629[0] = 0;
  v628 = 0x3FD999999999999AuLL;
  *(_OWORD *)((char *)v629 + 8) = xmmword_10046E070;
  DWORD2(v629[1]) = 5;
  *(_QWORD *)&v630 = 0x4000000000000000;
  DWORD2(v630) = 10;
  *(_QWORD *)&v631 = 0x4034000000000000;
  DWORD2(v631) = 3;
  *(_QWORD *)&v632 = 0x3FF0000000000000;
  *((_QWORD *)&v632 + 1) = 0x4008000000000000;
  v1843 = 7;
  v1844 = v618;
  sub_100232898(v1845, (uint64_t)v619);
  v1858 = v630;
  v1859 = v631;
  v1860 = v632;
  v1854 = v627;
  v1855 = v628;
  v1856 = v629[0];
  v1857 = v629[1];
  v1850 = v624;
  v1851 = v625;
  v1852 = v626[0];
  v1853 = v626[1];
  v1846 = v620;
  v1847 = v621;
  v1848 = v622;
  v1849 = v623;
  v1861 = 0;
  v1862 = xmmword_100859D90;
  sub_100232898(v1863, (uint64_t)&unk_100859DA0);
  v1876 = xmmword_100859E78;
  v1877 = *(_OWORD *)&qword_100859E88;
  v1878 = xmmword_100859E98;
  v1872 = xmmword_100859E38;
  v1873 = *(_OWORD *)&qword_100859E48;
  v1874 = xmmword_100859E58;
  v1875 = unk_100859E68;
  v1868 = xmmword_100859DF8;
  v1869 = unk_100859E08;
  v1870 = xmmword_100859E18;
  v1871 = unk_100859E28;
  v1864 = xmmword_100859DB8;
  v1865 = *(_OWORD *)&qword_100859DC8;
  v1866 = xmmword_100859DD8;
  v1867 = unk_100859DE8;
  sub_100233348((uint64_t)v633, &v1843, 2);
  v1879 = 1;
  sub_100233560(v1880, (uint64_t)v633);
  *(_QWORD *)&v602 = 0x300000008;
  *((_QWORD *)&v602 + 1) = 0xC04B800000000000;
  v1483 = -55.0;
  sub_10018252C((uint64_t)v603, &v1483, 1);
  v604 = xmmword_10046E0F0;
  *(_QWORD *)&v605 = 0x4024000000000000;
  DWORD2(v605) = 45;
  BYTE12(v605) = 0;
  LODWORD(v606) = 1;
  BYTE8(v606) = 1;
  v607 = xmmword_10046E100;
  v608 = xmmword_10046E110;
  v609 = v33;
  *(_QWORD *)&v610[0] = 0xC059000000000000;
  *(_OWORD *)((char *)v610 + 8) = xmmword_10046E120;
  *((int32x2_t *)&v610[1] + 1) = vdup_n_s32(0x3DCCCCCDu);
  v611 = xmmword_10046E060;
  *(_QWORD *)&v613[0] = 0;
  v612 = 0x3FD999999999999AuLL;
  *(_OWORD *)((char *)v613 + 8) = xmmword_10046E070;
  DWORD2(v613[1]) = 5;
  *(_QWORD *)&v614 = 0x4000000000000000;
  DWORD2(v614) = 10;
  *(_QWORD *)&v615 = 0x4034000000000000;
  DWORD2(v615) = 3;
  *(_QWORD *)&v616 = 0x3FF0000000000000;
  *((_QWORD *)&v616 + 1) = 0x4008000000000000;
  v1807 = 7;
  v1808 = v602;
  sub_100232898(v1809, (uint64_t)v603);
  v1822 = v614;
  v1823 = v615;
  v1824 = v616;
  v1818 = v611;
  v1819 = v612;
  v1820 = v613[0];
  v1821 = v613[1];
  v1814 = v608;
  v1815 = v609;
  v1816 = v610[0];
  v1817 = v610[1];
  v1810 = v604;
  v1811 = v605;
  v1812 = v606;
  v1813 = v607;
  v1825 = 0;
  v1826 = xmmword_100859D90;
  sub_100232898(v1827, (uint64_t)&unk_100859DA0);
  v1840 = xmmword_100859E78;
  v1841 = *(_OWORD *)&qword_100859E88;
  v1842 = xmmword_100859E98;
  v1836 = xmmword_100859E38;
  v1837 = *(_OWORD *)&qword_100859E48;
  v1838 = xmmword_100859E58;
  v1839 = unk_100859E68;
  v1832 = xmmword_100859DF8;
  v1833 = unk_100859E08;
  v1834 = xmmword_100859E18;
  v1835 = unk_100859E28;
  v1828 = xmmword_100859DB8;
  v1829 = *(_OWORD *)&qword_100859DC8;
  v1830 = xmmword_100859DD8;
  v1831 = unk_100859DE8;
  sub_100233348((uint64_t)v617, &v1807, 2);
  v1881 = 2;
  sub_100233560(v1882, (uint64_t)v617);
  *(_QWORD *)&v586 = 0x300000008;
  *((_QWORD *)&v586 + 1) = 0xC04A000000000000;
  v1483 = -52.0;
  sub_10018252C((uint64_t)v587, &v1483, 1);
  v588 = xmmword_10046E0F0;
  *(_QWORD *)&v589 = 0x4024000000000000;
  DWORD2(v589) = 45;
  BYTE12(v589) = 0;
  LODWORD(v590) = 1;
  BYTE8(v590) = 1;
  v591 = xmmword_10046E100;
  v592 = xmmword_10046E110;
  v593 = v33;
  *(_QWORD *)&v594[0] = 0xC059000000000000;
  *(_OWORD *)((char *)v594 + 8) = xmmword_10046E120;
  *((int32x2_t *)&v594[1] + 1) = vdup_n_s32(0x3DCCCCCDu);
  v595 = xmmword_10046E060;
  *(_QWORD *)&v597[0] = 0;
  v596 = 0x3FD999999999999AuLL;
  *(_OWORD *)((char *)v597 + 8) = xmmword_10046E070;
  DWORD2(v597[1]) = 5;
  *(_QWORD *)&v598 = 0x4000000000000000;
  DWORD2(v598) = 10;
  *(_QWORD *)&v599 = 0x4034000000000000;
  DWORD2(v599) = 3;
  *(_QWORD *)&v600 = 0x3FF0000000000000;
  *((_QWORD *)&v600 + 1) = 0x4008000000000000;
  v1771 = 7;
  v1772 = v586;
  sub_100232898(v1773, (uint64_t)v587);
  v1786 = v598;
  v1787 = v599;
  v1788 = v600;
  v1782 = v595;
  v1783 = v596;
  v1784 = v597[0];
  v1785 = v597[1];
  v1778 = v592;
  v1779 = v593;
  v1780 = v594[0];
  v1781 = v594[1];
  v1774 = v588;
  v1775 = v589;
  v1776 = v590;
  v1777 = v591;
  v1789 = 0;
  v1790 = xmmword_100859D90;
  sub_100232898(v1791, (uint64_t)&unk_100859DA0);
  v1804 = xmmword_100859E78;
  v1805 = *(_OWORD *)&qword_100859E88;
  v1806 = xmmword_100859E98;
  v1800 = xmmword_100859E38;
  v1801 = *(_OWORD *)&qword_100859E48;
  v1802 = xmmword_100859E58;
  v1803 = unk_100859E68;
  v1796 = xmmword_100859DF8;
  v1797 = unk_100859E08;
  v1798 = xmmword_100859E18;
  v1799 = unk_100859E28;
  v1792 = xmmword_100859DB8;
  v1793 = *(_OWORD *)&qword_100859DC8;
  v1794 = xmmword_100859DD8;
  v1795 = unk_100859DE8;
  sub_100233348((uint64_t)v601, &v1771, 2);
  v1883 = 3;
  sub_100233560(v1884, (uint64_t)v601);
  *(_QWORD *)&v570 = 0x300000008;
  *((_QWORD *)&v570 + 1) = 0xC04A400000000000;
  v1483 = -52.5;
  sub_10018252C((uint64_t)v571, &v1483, 1);
  v572 = xmmword_10046E0F0;
  *(_QWORD *)&v573 = 0x4024000000000000;
  DWORD2(v573) = 45;
  BYTE12(v573) = 0;
  LODWORD(v574) = 1;
  BYTE8(v574) = 1;
  v575 = xmmword_10046E100;
  v576 = xmmword_10046E110;
  v577 = v33;
  *(_QWORD *)&v578[0] = 0xC059000000000000;
  *(_OWORD *)((char *)v578 + 8) = xmmword_10046E120;
  *((int32x2_t *)&v578[1] + 1) = vdup_n_s32(0x3DCCCCCDu);
  v579 = xmmword_10046E060;
  *(_QWORD *)&v581[0] = 0;
  v580 = 0x3FD999999999999AuLL;
  *(_OWORD *)((char *)v581 + 8) = xmmword_10046E070;
  DWORD2(v581[1]) = 5;
  *(_QWORD *)&v582 = 0x4000000000000000;
  DWORD2(v582) = 10;
  *(_QWORD *)&v583 = 0x4034000000000000;
  DWORD2(v583) = 3;
  *(_QWORD *)&v584 = 0x3FF0000000000000;
  *((_QWORD *)&v584 + 1) = 0x4008000000000000;
  v1735 = 7;
  v1736 = v570;
  sub_100232898(v1737, (uint64_t)v571);
  v1750 = v582;
  v1751 = v583;
  v1752 = v584;
  v1746 = v579;
  v1747 = v580;
  v1748 = v581[0];
  v1749 = v581[1];
  v1742 = v576;
  v1743 = v577;
  v1744 = v578[0];
  v1745 = v578[1];
  v1738 = v572;
  v1739 = v573;
  v1740 = v574;
  v1741 = v575;
  v1753 = 0;
  v1754 = xmmword_100859D90;
  sub_100232898(v1755, (uint64_t)&unk_100859DA0);
  v1768 = xmmword_100859E78;
  v1769 = *(_OWORD *)&qword_100859E88;
  v1770 = xmmword_100859E98;
  v1764 = xmmword_100859E38;
  v1765 = *(_OWORD *)&qword_100859E48;
  v1766 = xmmword_100859E58;
  v1767 = unk_100859E68;
  v1760 = xmmword_100859DF8;
  v1761 = unk_100859E08;
  v1762 = xmmword_100859E18;
  v1763 = unk_100859E28;
  v1756 = xmmword_100859DB8;
  v1757 = *(_OWORD *)&qword_100859DC8;
  v1758 = xmmword_100859DD8;
  v1759 = unk_100859DE8;
  sub_100233348((uint64_t)v585, &v1735, 2);
  v1885 = 4;
  sub_100233560(v1886, (uint64_t)v585);
  *(_QWORD *)&v554 = 0x300000008;
  *((_QWORD *)&v554 + 1) = 0xC048A66666666666;
  v1483 = -49.3;
  sub_10018252C((uint64_t)v555, &v1483, 1);
  v556 = xmmword_10046E0F0;
  *(_QWORD *)&v557 = 0x4024000000000000;
  DWORD2(v557) = 45;
  BYTE12(v557) = 0;
  LODWORD(v558) = 1;
  BYTE8(v558) = 1;
  v559 = xmmword_10046E100;
  v560 = xmmword_10046E110;
  v561 = v33;
  *(_QWORD *)&v562[0] = 0xC059000000000000;
  *(_OWORD *)((char *)v562 + 8) = xmmword_10046E120;
  *((int32x2_t *)&v562[1] + 1) = vdup_n_s32(0x3DCCCCCDu);
  v563 = xmmword_10046E060;
  *(_QWORD *)&v565[0] = 0;
  v564 = 0x3FD999999999999AuLL;
  *(_OWORD *)((char *)v565 + 8) = xmmword_10046E070;
  DWORD2(v565[1]) = 5;
  *(_QWORD *)&v566 = 0x4000000000000000;
  DWORD2(v566) = 10;
  *(_QWORD *)&v567 = 0x4034000000000000;
  DWORD2(v567) = 3;
  *(_QWORD *)&v568 = 0x3FF0000000000000;
  *((_QWORD *)&v568 + 1) = 0x4008000000000000;
  v1699 = 7;
  v1700 = v554;
  sub_100232898(v1701, (uint64_t)v555);
  v1714 = v566;
  v1715 = v567;
  v1716 = v568;
  v1710 = v563;
  v1711 = v564;
  v1712 = v565[0];
  v1713 = v565[1];
  v1706 = v560;
  v1707 = v561;
  v1708 = v562[0];
  v1709 = v562[1];
  v1702 = v556;
  v1703 = v557;
  v1704 = v558;
  v1705 = v559;
  v1717 = 0;
  v1718 = xmmword_100859D90;
  sub_100232898(v1719, (uint64_t)&unk_100859DA0);
  v1732 = xmmword_100859E78;
  v1733 = *(_OWORD *)&qword_100859E88;
  v1734 = xmmword_100859E98;
  v1728 = xmmword_100859E38;
  v1729 = *(_OWORD *)&qword_100859E48;
  v1730 = xmmword_100859E58;
  v1731 = unk_100859E68;
  v1724 = xmmword_100859DF8;
  v1725 = unk_100859E08;
  v1726 = xmmword_100859E18;
  v1727 = unk_100859E28;
  v1720 = xmmword_100859DB8;
  v1721 = *(_OWORD *)&qword_100859DC8;
  v1722 = xmmword_100859DD8;
  v1723 = unk_100859DE8;
  sub_100233348((uint64_t)v569, &v1699, 2);
  v1887 = 5;
  sub_100233560(v1888, (uint64_t)v569);
  v1663 = 7;
  v1664 = xmmword_100859D90;
  sub_100232898(v1665, (uint64_t)&unk_100859DA0);
  v1678 = xmmword_100859E78;
  v1679 = *(_OWORD *)&qword_100859E88;
  v1674 = xmmword_100859E38;
  v1675 = *(_OWORD *)&qword_100859E48;
  v1676 = xmmword_100859E58;
  v1677 = unk_100859E68;
  v1670 = xmmword_100859DF8;
  v1671 = unk_100859E08;
  v1672 = xmmword_100859E18;
  v1673 = unk_100859E28;
  v1666 = xmmword_100859DB8;
  v1667 = *(_OWORD *)&qword_100859DC8;
  v1668 = xmmword_100859DD8;
  v1669 = unk_100859DE8;
  v1680 = xmmword_100859E98;
  v1681 = 0;
  v1682 = xmmword_100859D90;
  sub_100232898(v1683, (uint64_t)&unk_100859DA0);
  v1696 = xmmword_100859E78;
  v1697 = *(_OWORD *)&qword_100859E88;
  v1698 = xmmword_100859E98;
  v1692 = xmmword_100859E38;
  v1693 = *(_OWORD *)&qword_100859E48;
  v1694 = xmmword_100859E58;
  v1695 = unk_100859E68;
  v1688 = xmmword_100859DF8;
  v1689 = unk_100859E08;
  v1690 = xmmword_100859E18;
  v1691 = unk_100859E28;
  v1684 = xmmword_100859DB8;
  v1685 = *(_OWORD *)&qword_100859DC8;
  v1686 = xmmword_100859DD8;
  v1687 = unk_100859DE8;
  sub_100233348((uint64_t)v553, &v1663, 2);
  v1889 = 12;
  sub_100233560(v1890, (uint64_t)v553);
  *(_QWORD *)&v537 = 0x300000008;
  *((_QWORD *)&v537 + 1) = 0xC04A000000000000;
  v1139 = -52.0;
  sub_10018252C((uint64_t)v538, &v1139, 1);
  v539 = xmmword_10046E0F0;
  *(_QWORD *)&v540 = 0x4024000000000000;
  DWORD2(v540) = 45;
  BYTE12(v540) = 0;
  LODWORD(v541) = 1;
  BYTE8(v541) = 1;
  v542 = xmmword_10046E100;
  v543 = xmmword_10046E110;
  v544 = v33;
  *(_QWORD *)&v545[0] = 0xC059000000000000;
  *(_OWORD *)((char *)v545 + 8) = xmmword_10046E120;
  *((int32x2_t *)&v545[1] + 1) = vdup_n_s32(0x3DCCCCCDu);
  v546 = xmmword_10046E060;
  *(_QWORD *)&v548[0] = 0;
  v547 = 0x3FD999999999999AuLL;
  *(_OWORD *)((char *)v548 + 8) = xmmword_10046E070;
  DWORD2(v548[1]) = 5;
  *(_QWORD *)&v549 = 0x4000000000000000;
  DWORD2(v549) = 10;
  *(_QWORD *)&v550 = 0x4034000000000000;
  DWORD2(v550) = 3;
  *(_QWORD *)&v551 = 0x3FF0000000000000;
  *((_QWORD *)&v551 + 1) = 0x4008000000000000;
  LODWORD(v1483) = 4;
  v1484 = v537;
  sub_100232898(v1485, (uint64_t)v538);
  v1498 = v549;
  v1499 = v550;
  v1500 = v551;
  v1494 = v546;
  v1495 = v547;
  v1496 = v548[0];
  v1497 = v548[1];
  v1490 = v543;
  v1491 = v544;
  v1492 = v545[0];
  v1493 = v545[1];
  v1486 = v539;
  v1487 = v540;
  v1488 = v541;
  v1489 = v542;
  *(_QWORD *)&v522 = 0x300000008;
  *((_QWORD *)&v522 + 1) = 0xC04B800000000000;
  v1139 = -55.0;
  sub_10018252C((uint64_t)v523, &v1139, 1);
  v524 = xmmword_10046E0F0;
  *(_QWORD *)&v525 = 0x4024000000000000;
  DWORD2(v525) = 45;
  BYTE12(v525) = 0;
  LODWORD(v526) = 1;
  BYTE8(v526) = 1;
  v527 = xmmword_10046E100;
  v528 = xmmword_10046E110;
  v529 = v33;
  *(_QWORD *)&v530[0] = 0xC059000000000000;
  *(_OWORD *)((char *)v530 + 8) = xmmword_10046E120;
  *((int32x2_t *)&v530[1] + 1) = vdup_n_s32(0x3DCCCCCDu);
  v531 = xmmword_10046E060;
  *(_QWORD *)&v533[0] = 0;
  v532 = 0x3FD999999999999AuLL;
  *(_OWORD *)((char *)v533 + 8) = xmmword_10046E070;
  DWORD2(v533[1]) = 5;
  *(_QWORD *)&v534 = 0x4000000000000000;
  DWORD2(v534) = 10;
  *(_QWORD *)&v535 = 0x4034000000000000;
  DWORD2(v535) = 3;
  *(_QWORD *)&v536 = 0x3FF0000000000000;
  *((_QWORD *)&v536 + 1) = 0x4008000000000000;
  v1501 = 1;
  v1502 = v522;
  sub_100232898(v1503, (uint64_t)v523);
  v1516 = v534;
  v1517 = v535;
  v1518 = v536;
  v1512 = v531;
  v1513 = v532;
  v1514 = v533[0];
  v1515 = v533[1];
  v1508 = v528;
  v1509 = v529;
  v1510 = v530[0];
  v1511 = v530[1];
  v1504 = v524;
  v1505 = v525;
  v1506 = v526;
  v1507 = v527;
  *(_QWORD *)&v507 = 0x300000008;
  *((_QWORD *)&v507 + 1) = 0xC04A800000000000;
  v1139 = -53.0;
  sub_10018252C((uint64_t)v508, &v1139, 1);
  v509 = xmmword_10046E0F0;
  *(_QWORD *)&v510 = 0x4024000000000000;
  DWORD2(v510) = 45;
  BYTE12(v510) = 0;
  LODWORD(v511) = 1;
  BYTE8(v511) = 1;
  v512 = xmmword_10046E100;
  v513 = xmmword_10046E110;
  v514 = v33;
  *(_QWORD *)&v515[0] = 0xC059000000000000;
  *(_OWORD *)((char *)v515 + 8) = xmmword_10046E120;
  *((int32x2_t *)&v515[1] + 1) = vdup_n_s32(0x3DCCCCCDu);
  v516 = xmmword_10046E060;
  *(_QWORD *)&v518[0] = 0;
  v517 = 0x3FD999999999999AuLL;
  *(_OWORD *)((char *)v518 + 8) = xmmword_10046E070;
  DWORD2(v518[1]) = 5;
  *(_QWORD *)&v519 = 0x4000000000000000;
  DWORD2(v519) = 10;
  *(_QWORD *)&v520 = 0x4034000000000000;
  DWORD2(v520) = 3;
  *(_QWORD *)&v521 = 0x3FF0000000000000;
  *((_QWORD *)&v521 + 1) = 0x4008000000000000;
  v1519 = 2;
  v1520 = v507;
  sub_100232898(v1521, (uint64_t)v508);
  v1534 = v519;
  v1535 = v520;
  v1536 = v521;
  v1530 = v516;
  v1531 = v517;
  v1532 = v518[0];
  v1533 = v518[1];
  v1526 = v513;
  v1527 = v514;
  v1528 = v515[0];
  v1529 = v515[1];
  v1522 = v509;
  v1523 = v510;
  v1524 = v511;
  v1525 = v512;
  *(_QWORD *)&v492 = 0x300000008;
  *((_QWORD *)&v492 + 1) = 0xC04B800000000000;
  v1139 = -55.0;
  sub_10018252C((uint64_t)v493, &v1139, 1);
  v494 = xmmword_10046E0F0;
  *(_QWORD *)&v495 = 0x4024000000000000;
  DWORD2(v495) = 45;
  BYTE12(v495) = 0;
  LODWORD(v496) = 1;
  BYTE8(v496) = 1;
  v497 = xmmword_10046E100;
  v498 = xmmword_10046E110;
  v499 = v33;
  *(_QWORD *)&v500[0] = 0xC059000000000000;
  *(_OWORD *)((char *)v500 + 8) = xmmword_10046E120;
  *((int32x2_t *)&v500[1] + 1) = vdup_n_s32(0x3DCCCCCDu);
  v501 = xmmword_10046E060;
  *(_QWORD *)&v503[0] = 0;
  v502 = 0x3FD999999999999AuLL;
  *(_OWORD *)((char *)v503 + 8) = xmmword_10046E070;
  DWORD2(v503[1]) = 5;
  *(_QWORD *)&v504 = 0x4000000000000000;
  DWORD2(v504) = 10;
  *(_QWORD *)&v505 = 0x4034000000000000;
  DWORD2(v505) = 3;
  *(_QWORD *)&v506 = 0x3FF0000000000000;
  *((_QWORD *)&v506 + 1) = 0x4008000000000000;
  v1537 = 3;
  v1538 = v492;
  sub_100232898(v1539, (uint64_t)v493);
  v1551 = v503[1];
  v1552 = v504;
  v1553 = v505;
  v1554 = v506;
  v1548 = v501;
  v1549 = v502;
  v1550 = v503[0];
  v1544 = v498;
  v1545 = v499;
  v1546 = v500[0];
  v1547 = v500[1];
  v1540 = v494;
  v1541 = v495;
  v1542 = v496;
  v1543 = v497;
  *(_QWORD *)&v477 = 0x300000008;
  *((_QWORD *)&v477 + 1) = 0xC04E000000000000;
  v1139 = -60.0;
  sub_10018252C((uint64_t)v478, &v1139, 1);
  v479 = xmmword_10046E0F0;
  *(_QWORD *)&v480 = 0x4024000000000000;
  DWORD2(v480) = 45;
  BYTE12(v480) = 0;
  LODWORD(v481) = 1;
  BYTE8(v481) = 1;
  v482 = xmmword_10046E100;
  v483 = xmmword_10046E110;
  v484 = v33;
  *(_QWORD *)&v485[0] = 0xC059000000000000;
  *(_OWORD *)((char *)v485 + 8) = xmmword_10046E120;
  *((int32x2_t *)&v485[1] + 1) = vdup_n_s32(0x3DCCCCCDu);
  v486 = xmmword_10046E060;
  *(_QWORD *)&v488[0] = 0;
  v487 = 0x3FD999999999999AuLL;
  *(_OWORD *)((char *)v488 + 8) = xmmword_10046E070;
  DWORD2(v488[1]) = 5;
  *(_QWORD *)&v489 = 0x4000000000000000;
  DWORD2(v489) = 10;
  *(_QWORD *)&v490 = 0x4034000000000000;
  DWORD2(v490) = 3;
  *(_QWORD *)&v491 = 0x3FF0000000000000;
  *((_QWORD *)&v491 + 1) = 0x4008000000000000;
  v1555 = 5;
  v1556 = v477;
  sub_100232898(v1557, (uint64_t)v478);
  v1569 = v488[1];
  v1570 = v489;
  v1571 = v490;
  v1572 = v491;
  v1565 = v485[1];
  v1566 = v486;
  v1567 = v487;
  v1568 = v488[0];
  v1561 = v482;
  v1562 = v483;
  v1563 = v484;
  v1564 = v485[0];
  v1558 = v479;
  v1559 = v480;
  v1560 = v481;
  v1573 = 12;
  v1574 = xmmword_100859D90;
  sub_100232898(v1575, (uint64_t)&unk_100859DA0);
  v1587 = unk_100859E68;
  v1588 = xmmword_100859E78;
  v1589 = *(_OWORD *)&qword_100859E88;
  v1590 = xmmword_100859E98;
  v1583 = unk_100859E28;
  v1584 = xmmword_100859E38;
  v1585 = *(_OWORD *)&qword_100859E48;
  v1586 = xmmword_100859E58;
  v1579 = unk_100859DE8;
  v1580 = xmmword_100859DF8;
  v1581 = unk_100859E08;
  v1582 = xmmword_100859E18;
  v1576 = xmmword_100859DB8;
  v1577 = *(_OWORD *)&qword_100859DC8;
  v1578 = xmmword_100859DD8;
  *(_QWORD *)&v462 = 0x300000008;
  *((_QWORD *)&v462 + 1) = 0xC045000000000000;
  v1139 = -42.0;
  sub_10018252C((uint64_t)v463, &v1139, 1);
  v464 = xmmword_10046E0F0;
  *(_QWORD *)&v465 = 0x4024000000000000;
  DWORD2(v465) = 45;
  BYTE12(v465) = 0;
  LODWORD(v466) = 1;
  BYTE8(v466) = 1;
  v467 = xmmword_10046E100;
  v468 = xmmword_10046E110;
  v469 = v33;
  *(_QWORD *)&v470[0] = 0xC059000000000000;
  *(_OWORD *)((char *)v470 + 8) = xmmword_10046E120;
  *((int32x2_t *)&v470[1] + 1) = vdup_n_s32(0x3DCCCCCDu);
  v471 = xmmword_10046E060;
  *(_QWORD *)&v473[0] = 0;
  v472 = 0x3FD999999999999AuLL;
  *(_OWORD *)((char *)v473 + 8) = xmmword_10046E070;
  DWORD2(v473[1]) = 5;
  *(_QWORD *)&v474 = 0x4000000000000000;
  DWORD2(v474) = 10;
  *(_QWORD *)&v475 = 0x4034000000000000;
  DWORD2(v475) = 3;
  *(_QWORD *)&v476 = 0x3FF0000000000000;
  *((_QWORD *)&v476 + 1) = 0x4008000000000000;
  v1591 = 16;
  v1592 = v462;
  sub_100232898(v1593, (uint64_t)v463);
  v1605 = v473[1];
  v1606 = v474;
  v1607 = v475;
  v1608 = v476;
  v1601 = v470[1];
  v1602 = v471;
  v1603 = v472;
  v1604 = v473[0];
  v1597 = v467;
  v1598 = v468;
  v1599 = v469;
  v1600 = v470[0];
  v1594 = v464;
  v1595 = v465;
  v1596 = v466;
  *(_QWORD *)&v447 = 0x300000008;
  *((_QWORD *)&v447 + 1) = 0xC046800000000000;
  v1139 = -45.0;
  sub_10018252C((uint64_t)v448, &v1139, 1);
  v449 = xmmword_10046E0F0;
  *(_QWORD *)&v450 = 0x4024000000000000;
  DWORD2(v450) = 45;
  BYTE12(v450) = 0;
  LODWORD(v451) = 1;
  BYTE8(v451) = 1;
  v452 = xmmword_10046E100;
  v453 = xmmword_10046E110;
  v454 = v33;
  *(_QWORD *)&v455[0] = 0xC059000000000000;
  *(_OWORD *)((char *)v455 + 8) = xmmword_10046E120;
  *((int32x2_t *)&v455[1] + 1) = vdup_n_s32(0x3DCCCCCDu);
  v456 = xmmword_10046E060;
  *(_QWORD *)&v458[0] = 0;
  v457 = 0x3FD999999999999AuLL;
  *(_OWORD *)((char *)v458 + 8) = xmmword_10046E070;
  DWORD2(v458[1]) = 5;
  *(_QWORD *)&v459 = 0x4000000000000000;
  DWORD2(v459) = 10;
  *(_QWORD *)&v460 = 0x4034000000000000;
  DWORD2(v460) = 3;
  *(_QWORD *)&v461 = 0x3FF0000000000000;
  *((_QWORD *)&v461 + 1) = 0x4008000000000000;
  v1609 = 7;
  v1610 = v447;
  sub_100232898(v1611, (uint64_t)v448);
  v1623 = v458[1];
  v1624 = v459;
  v1625 = v460;
  v1626 = v461;
  v1619 = v455[1];
  v1620 = v456;
  v1621 = v457;
  v1622 = v458[0];
  v1615 = v452;
  v1616 = v453;
  v1617 = v454;
  v1618 = v455[0];
  v1612 = v449;
  v1613 = v450;
  v1614 = v451;
  *(_QWORD *)&v432 = 0x300000008;
  *((_QWORD *)&v432 + 1) = 0xC045800000000000;
  v1139 = -43.0;
  sub_10018252C((uint64_t)v433, &v1139, 1);
  v434 = xmmword_10046E0F0;
  *(_QWORD *)&v435 = 0x4024000000000000;
  DWORD2(v435) = 45;
  BYTE12(v435) = 0;
  LODWORD(v436) = 1;
  BYTE8(v436) = 1;
  v437 = xmmword_10046E100;
  v438 = xmmword_10046E110;
  v439 = v33;
  *(_QWORD *)&v440[0] = 0xC059000000000000;
  *(_OWORD *)((char *)v440 + 8) = xmmword_10046E120;
  *((int32x2_t *)&v440[1] + 1) = vdup_n_s32(0x3DCCCCCDu);
  v441 = xmmword_10046E060;
  *(_QWORD *)&v443[0] = 0;
  v442 = 0x3FD999999999999AuLL;
  *(_OWORD *)((char *)v443 + 8) = xmmword_10046E070;
  DWORD2(v443[1]) = 5;
  *(_QWORD *)&v444 = 0x4000000000000000;
  DWORD2(v444) = 10;
  *(_QWORD *)&v445 = 0x4034000000000000;
  DWORD2(v445) = 3;
  *(_QWORD *)&v446 = 0x3FF0000000000000;
  *((_QWORD *)&v446 + 1) = 0x4008000000000000;
  v1627 = 6;
  v1628 = v432;
  sub_100232898(v1629, (uint64_t)v433);
  v1641 = v443[1];
  v1642 = v444;
  v1643 = v445;
  v1644 = v446;
  v1637 = v440[1];
  v1638 = v441;
  v1639 = v442;
  v1640 = v443[0];
  v1633 = v437;
  v1634 = v438;
  v1635 = v439;
  v1636 = v440[0];
  v1630 = v434;
  v1631 = v435;
  v1632 = v436;
  v1645 = 0;
  v1646 = xmmword_100859D90;
  sub_100232898(v1647, (uint64_t)&unk_100859DA0);
  v1659 = unk_100859E68;
  v1660 = xmmword_100859E78;
  v1661 = *(_OWORD *)&qword_100859E88;
  v1662 = xmmword_100859E98;
  v1655 = unk_100859E28;
  v1656 = xmmword_100859E38;
  v1657 = *(_OWORD *)&qword_100859E48;
  v1658 = xmmword_100859E58;
  v1651 = unk_100859DE8;
  v1652 = xmmword_100859DF8;
  v1653 = unk_100859E08;
  v1654 = xmmword_100859E18;
  v1648 = xmmword_100859DB8;
  v1649 = *(_OWORD *)&qword_100859DC8;
  v1650 = xmmword_100859DD8;
  sub_100233348((uint64_t)v552, (int *)&v1483, 10);
  v1891 = 7;
  sub_100233560(v1892, (uint64_t)v552);
  *(_QWORD *)&v416 = 0x300000008;
  *((_QWORD *)&v416 + 1) = 0xC045800000000000;
  v1139 = -43.0;
  sub_10018252C((uint64_t)v417, &v1139, 1);
  v418 = xmmword_10046E0F0;
  *(_QWORD *)&v419 = 0x4024000000000000;
  DWORD2(v419) = 45;
  BYTE12(v419) = 0;
  LODWORD(v420) = 1;
  BYTE8(v420) = 1;
  v421 = xmmword_10046E100;
  v422 = xmmword_10046E110;
  v423 = v33;
  *(_QWORD *)&v424[0] = 0xC059000000000000;
  *(_OWORD *)((char *)v424 + 8) = xmmword_10046E120;
  *((int32x2_t *)&v424[1] + 1) = vdup_n_s32(0x3DCCCCCDu);
  v425 = xmmword_10046E060;
  *(_QWORD *)&v427[0] = 0;
  v426 = 0x3FD999999999999AuLL;
  *(_OWORD *)((char *)v427 + 8) = xmmword_10046E070;
  DWORD2(v427[1]) = 5;
  *(_QWORD *)&v428 = 0x4000000000000000;
  DWORD2(v428) = 10;
  *(_QWORD *)&v429 = 0x4034000000000000;
  DWORD2(v429) = 3;
  *(_QWORD *)&v430 = 0x3FF0000000000000;
  *((_QWORD *)&v430 + 1) = 0x4008000000000000;
  v1429 = 6;
  v1430 = v416;
  sub_100232898(v1431, (uint64_t)v417);
  v1444 = v428;
  v1445 = v429;
  v1446 = v430;
  v1440 = v425;
  v1441 = v426;
  v1442 = v427[0];
  v1443 = v427[1];
  v1436 = v422;
  v1437 = v423;
  v1438 = v424[0];
  v1439 = v424[1];
  v1432 = v418;
  v1433 = v419;
  v1434 = v420;
  v1435 = v421;
  *(_QWORD *)&v401 = 0x300000008;
  *((_QWORD *)&v401 + 1) = 0xC045800000000000;
  v1139 = -43.0;
  sub_10018252C((uint64_t)v402, &v1139, 1);
  v403 = xmmword_10046E0F0;
  *(_QWORD *)&v404 = 0x4024000000000000;
  DWORD2(v404) = 45;
  BYTE12(v404) = 0;
  LODWORD(v405) = 1;
  BYTE8(v405) = 1;
  v406 = xmmword_10046E100;
  v407 = xmmword_10046E110;
  v408 = v33;
  *(_QWORD *)&v409[0] = 0xC059000000000000;
  *(_OWORD *)((char *)v409 + 8) = xmmword_10046E120;
  *((int32x2_t *)&v409[1] + 1) = vdup_n_s32(0x3DCCCCCDu);
  v410 = xmmword_10046E060;
  *(_QWORD *)&v412[0] = 0;
  v411 = 0x3FD999999999999AuLL;
  *(_OWORD *)((char *)v412 + 8) = xmmword_10046E070;
  DWORD2(v412[1]) = 5;
  *(_QWORD *)&v413 = 0x4000000000000000;
  DWORD2(v413) = 10;
  *(_QWORD *)&v414 = 0x4034000000000000;
  DWORD2(v414) = 3;
  *(_QWORD *)&v415 = 0x3FF0000000000000;
  *((_QWORD *)&v415 + 1) = 0x4008000000000000;
  v1447 = 7;
  v1448 = v401;
  sub_100232898(v1449, (uint64_t)v402);
  v1462 = v413;
  v1463 = v414;
  v1464 = v415;
  v1458 = v410;
  v1459 = v411;
  v1460 = v412[0];
  v1461 = v412[1];
  v1454 = v407;
  v1455 = v408;
  v1456 = v409[0];
  v1457 = v409[1];
  v1450 = v403;
  v1451 = v404;
  v1452 = v405;
  v1453 = v406;
  *(_QWORD *)&v386 = 0x300000008;
  *((_QWORD *)&v386 + 1) = 0xC045800000000000;
  v1139 = -43.0;
  sub_10018252C((uint64_t)v387, &v1139, 1);
  v388 = xmmword_10046E0F0;
  *(_QWORD *)&v389 = 0x4024000000000000;
  DWORD2(v389) = 45;
  BYTE12(v389) = 0;
  LODWORD(v390) = 1;
  BYTE8(v390) = 1;
  v391 = xmmword_10046E100;
  v392 = xmmword_10046E110;
  v393 = v33;
  *(_QWORD *)&v394[0] = 0xC059000000000000;
  *(_OWORD *)((char *)v394 + 8) = xmmword_10046E120;
  *((int32x2_t *)&v394[1] + 1) = vdup_n_s32(0x3DCCCCCDu);
  v395 = xmmword_10046E060;
  *(_QWORD *)&v397[0] = 0;
  v396 = 0x3FD999999999999AuLL;
  *(_OWORD *)((char *)v397 + 8) = xmmword_10046E070;
  DWORD2(v397[1]) = 5;
  *(_QWORD *)&v398 = 0x4000000000000000;
  DWORD2(v398) = 10;
  *(_QWORD *)&v399 = 0x4034000000000000;
  DWORD2(v399) = 3;
  *(_QWORD *)&v400 = 0x3FF0000000000000;
  *((_QWORD *)&v400 + 1) = 0x4008000000000000;
  v1465 = 0;
  v1466 = v386;
  sub_100232898(v1467, (uint64_t)v387);
  v1480 = v398;
  v1481 = v399;
  v1482 = v400;
  v1476 = v395;
  v1477 = v396;
  v1478 = v397[0];
  v1479 = v397[1];
  v1472 = v392;
  v1473 = v393;
  v1474 = v394[0];
  v1475 = v394[1];
  v1468 = v388;
  v1469 = v389;
  v1470 = v390;
  v1471 = v391;
  sub_100233348((uint64_t)v431, &v1429, 3);
  v1893 = 6;
  sub_100233560(v1894, (uint64_t)v431);
  v1410 = 0;
  v1411 = xmmword_100859D90;
  sub_100232898(&v1412, (uint64_t)&unk_100859DA0);
  v1426 = xmmword_100859E78;
  v1427 = *(_OWORD *)&qword_100859E88;
  v1428 = xmmword_100859E98;
  v1422 = xmmword_100859E38;
  v1423 = *(_OWORD *)&qword_100859E48;
  v1424 = xmmword_100859E58;
  v1425 = unk_100859E68;
  v1418 = xmmword_100859DF8;
  v1419 = unk_100859E08;
  v1420 = xmmword_100859E18;
  v1421 = unk_100859E28;
  v1414 = xmmword_100859DB8;
  v1415 = *(_OWORD *)&qword_100859DC8;
  v1416 = xmmword_100859DD8;
  v1417 = unk_100859DE8;
  sub_100233348((uint64_t)v385, &v1410, 1);
  v1895 = 0;
  sub_100233560(v1896, (uint64_t)v385);
  sub_100233638((uint64_t)v634, &v1879, 9);
  v2658 = 3;
  sub_100233804(v2659, (uint64_t)v634);
  *(_QWORD *)&v368 = 0x300000008;
  *((_QWORD *)&v368 + 1) = 0xC050C00000000000;
  v1139 = -67.0;
  sub_10018252C((uint64_t)v369, &v1139, 1);
  v370 = xmmword_10046E0F0;
  *(_QWORD *)&v371 = 0x4024000000000000;
  DWORD2(v371) = 45;
  BYTE12(v371) = 0;
  LODWORD(v372) = 1;
  BYTE8(v372) = 1;
  v373 = xmmword_10046E100;
  v374 = xmmword_10046E110;
  v375 = v33;
  *(_QWORD *)&v376[0] = 0xC059000000000000;
  *(_OWORD *)((char *)v376 + 8) = xmmword_10046E120;
  *((int32x2_t *)&v376[1] + 1) = vdup_n_s32(0x3DCCCCCDu);
  v377 = xmmword_10046E060;
  *(_QWORD *)&v379[0] = 0;
  v378 = 0x3FD999999999999AuLL;
  *(_OWORD *)((char *)v379 + 8) = xmmword_10046E070;
  DWORD2(v379[1]) = 5;
  *(_QWORD *)&v380 = 0x4000000000000000;
  DWORD2(v380) = 10;
  *(_QWORD *)&v381 = 0x4034000000000000;
  DWORD2(v381) = 3;
  *(_QWORD *)&v382 = 0x3FF0000000000000;
  *((_QWORD *)&v382 + 1) = 0x4008000000000000;
  v1352 = 0;
  v1353 = v368;
  sub_100232898(v1354, (uint64_t)v369);
  v1367 = v380;
  v1368 = v381;
  v1369 = v382;
  v1363 = v377;
  v1364 = v378;
  v1365 = v379[0];
  v1366 = v379[1];
  v1359 = v374;
  v1360 = v375;
  v1361 = v376[0];
  v1362 = v376[1];
  v1355 = v370;
  v1356 = v371;
  v1357 = v372;
  v1358 = v373;
  *(_QWORD *)&v353 = 0x200000003;
  *((_QWORD *)&v353 + 1) = 0xC052000000000000;
  v1139 = -72.0;
  sub_10018252C((uint64_t)v354, &v1139, 1);
  v355 = xmmword_100473420;
  *(_QWORD *)&v356 = 0x4000000000000000;
  DWORD2(v356) = 20;
  BYTE12(v356) = 0;
  LODWORD(v357) = 1;
  BYTE8(v357) = 1;
  v358 = xmmword_10046E100;
  v359 = xmmword_10046E110;
  v360 = v33;
  *(_QWORD *)&v361[0] = 0xC059000000000000;
  *(_OWORD *)((char *)v361 + 8) = xmmword_10046E120;
  *((int32x2_t *)&v361[1] + 1) = vdup_n_s32(0x3DCCCCCDu);
  v362 = xmmword_10046E060;
  *(_QWORD *)&v364[0] = 0;
  v363 = 0x3FD999999999999AuLL;
  *(_OWORD *)((char *)v364 + 8) = xmmword_10046E070;
  DWORD2(v364[1]) = 5;
  *(_QWORD *)&v365 = 0x4000000000000000;
  DWORD2(v365) = 10;
  *(_QWORD *)&v366 = 0x4034000000000000;
  DWORD2(v366) = 3;
  *(_QWORD *)&v367 = 0x3FF0000000000000;
  *((_QWORD *)&v367 + 1) = 0x4008000000000000;
  v1370 = 16;
  v1371 = v353;
  sub_100232898(v1372, (uint64_t)v354);
  v1385 = v365;
  v1386 = v366;
  v1387 = v367;
  v1381 = v362;
  v1382 = v363;
  v1383 = v364[0];
  v1384 = v364[1];
  v1377 = v359;
  v1378 = v360;
  v1379 = v361[0];
  v1380 = v361[1];
  v1373 = v355;
  v1374 = v356;
  v1375 = v357;
  v1376 = v358;
  *(_QWORD *)&v338 = 0x200000003;
  *((_QWORD *)&v338 + 1) = 0xC052000000000000;
  v1139 = -72.0;
  sub_10018252C((uint64_t)v339, &v1139, 1);
  v340 = xmmword_100473420;
  *(_QWORD *)&v341 = 0x4000000000000000;
  DWORD2(v341) = 20;
  BYTE12(v341) = 0;
  LODWORD(v342) = 1;
  BYTE8(v342) = 1;
  v343 = xmmword_10046E100;
  v344 = xmmword_10046E110;
  v345 = v33;
  *(_QWORD *)&v346[0] = 0xC059000000000000;
  *(_OWORD *)((char *)v346 + 8) = xmmword_10046E120;
  *((int32x2_t *)&v346[1] + 1) = vdup_n_s32(0x3DCCCCCDu);
  v347 = xmmword_10046E060;
  *(_QWORD *)&v349[0] = 0;
  v348 = 0x3FD999999999999AuLL;
  *(_OWORD *)((char *)v349 + 8) = xmmword_10046E070;
  DWORD2(v349[1]) = 5;
  *(_QWORD *)&v350 = 0x4000000000000000;
  DWORD2(v350) = 10;
  *(_QWORD *)&v351 = 0x4034000000000000;
  DWORD2(v351) = 3;
  *(_QWORD *)&v352 = 0x3FF0000000000000;
  *((_QWORD *)&v352 + 1) = 0x4008000000000000;
  v1388 = 18;
  v1389 = v338;
  sub_100232898(v1390, (uint64_t)v339);
  v1403 = v350;
  v1404 = v351;
  v1405 = v352;
  v1399 = v347;
  v1400 = v348;
  v1401 = v349[0];
  v1402 = v349[1];
  v1395 = v344;
  v1396 = v345;
  v1397 = v346[0];
  v1398 = v346[1];
  v1391 = v340;
  v1392 = v341;
  v1393 = v342;
  v1394 = v343;
  sub_100233348((uint64_t)v383, &v1352, 3);
  v1406 = 7;
  sub_100233560(v1407, (uint64_t)v383);
  *(_QWORD *)&v322 = 0x300000008;
  *((_QWORD *)&v322 + 1) = 0xC050C00000000000;
  v1139 = -67.0;
  sub_10018252C((uint64_t)v323, &v1139, 1);
  v324 = xmmword_10046E0F0;
  *(_QWORD *)&v325 = 0x4024000000000000;
  DWORD2(v325) = 45;
  BYTE12(v325) = 0;
  LODWORD(v326) = 1;
  BYTE8(v326) = 1;
  v327 = xmmword_10046E100;
  v328 = xmmword_10046E110;
  v329 = v33;
  *(_QWORD *)&v330[0] = 0xC059000000000000;
  *(_OWORD *)((char *)v330 + 8) = xmmword_10046E120;
  *((int32x2_t *)&v330[1] + 1) = vdup_n_s32(0x3DCCCCCDu);
  v331 = xmmword_10046E060;
  *(_QWORD *)&v333[0] = 0;
  v332 = 0x3FD999999999999AuLL;
  *(_OWORD *)((char *)v333 + 8) = xmmword_10046E070;
  DWORD2(v333[1]) = 5;
  *(_QWORD *)&v334 = 0x4000000000000000;
  DWORD2(v334) = 10;
  *(_QWORD *)&v335 = 0x4034000000000000;
  DWORD2(v335) = 3;
  *(_QWORD *)&v336 = 0x3FF0000000000000;
  *((_QWORD *)&v336 + 1) = 0x4008000000000000;
  v1316 = 0;
  v1317 = v322;
  sub_100232898(v1318, (uint64_t)v323);
  v1331 = v334;
  v1332 = v335;
  v1333 = v336;
  v1327 = v331;
  v1328 = v332;
  v1329 = v333[0];
  v1330 = v333[1];
  v1323 = v328;
  v1324 = v329;
  v1325 = v330[0];
  v1326 = v330[1];
  v1319 = v324;
  v1320 = v325;
  v1321 = v326;
  v1322 = v327;
  *(_QWORD *)&v307 = 0x200000003;
  *((_QWORD *)&v307 + 1) = 0xC051000000000000;
  v1139 = -68.0;
  sub_10018252C((uint64_t)v308, &v1139, 1);
  v309 = xmmword_100473420;
  *(_QWORD *)&v310 = 0x4000000000000000;
  DWORD2(v310) = 20;
  BYTE12(v310) = 0;
  LODWORD(v311) = 1;
  BYTE8(v311) = 1;
  v312 = xmmword_10046E100;
  v313 = xmmword_10046E110;
  v314 = v33;
  *(_QWORD *)&v315[0] = 0xC059000000000000;
  *(_OWORD *)((char *)v315 + 8) = xmmword_10046E120;
  *((int32x2_t *)&v315[1] + 1) = vdup_n_s32(0x3DCCCCCDu);
  v316 = xmmword_10046E060;
  *(_QWORD *)&v318[0] = 0;
  v317 = 0x3FD999999999999AuLL;
  *(_OWORD *)((char *)v318 + 8) = xmmword_10046E070;
  DWORD2(v318[1]) = 5;
  *(_QWORD *)&v319 = 0x4000000000000000;
  DWORD2(v319) = 10;
  *(_QWORD *)&v320 = 0x4034000000000000;
  DWORD2(v320) = 3;
  *(_QWORD *)&v321 = 0x3FF0000000000000;
  *((_QWORD *)&v321 + 1) = 0x4008000000000000;
  v1334 = 18;
  v1335 = v307;
  sub_100232898(v1336, (uint64_t)v308);
  v1349 = v319;
  v1350 = v320;
  v1351 = v321;
  v1345 = v316;
  v1346 = v317;
  v1347 = v318[0];
  v1348 = v318[1];
  v1341 = v313;
  v1342 = v314;
  v1343 = v315[0];
  v1344 = v315[1];
  v1337 = v309;
  v1338 = v310;
  v1339 = v311;
  v1340 = v312;
  sub_100233348((uint64_t)v337, &v1316, 2);
  v1408 = 6;
  sub_100233560(v1409, (uint64_t)v337);
  sub_100233638((uint64_t)v384, &v1406, 2);
  v2660 = 5;
  sub_100233804(v2661, (uint64_t)v384);
  LODWORD(v1139) = 13;
  v1140 = xmmword_100859FC0;
  sub_100232898(v1141, (uint64_t)&unk_100859FD0);
  v1154 = xmmword_10085A0A8;
  v1155 = *(_OWORD *)&qword_10085A0B8;
  v1156 = xmmword_10085A0C8;
  v1150 = xmmword_10085A068;
  v1151 = *(_OWORD *)&qword_10085A078;
  v1152 = xmmword_10085A088;
  v1153 = unk_10085A098;
  v1146 = xmmword_10085A028;
  v1147 = unk_10085A038;
  v1148 = xmmword_10085A048;
  v1149 = unk_10085A058;
  v1142 = xmmword_100859FE8;
  v1143 = *(_OWORD *)&qword_100859FF8;
  v1144 = xmmword_10085A008;
  v1145 = unk_10085A018;
  v1157 = 7;
  v1158 = xmmword_100859EA8;
  sub_100232898(v1159, (uint64_t)&unk_100859EB8);
  v1172 = xmmword_100859F90;
  v1173 = *(_OWORD *)&qword_100859FA0;
  v1174 = xmmword_100859FB0;
  v1168 = xmmword_100859F50;
  v1169 = *(_OWORD *)&qword_100859F60;
  v1170 = xmmword_100859F70;
  v1171 = unk_100859F80;
  v1164 = xmmword_100859F10;
  v1165 = unk_100859F20;
  v1166 = xmmword_100859F30;
  v1167 = unk_100859F40;
  v1160 = xmmword_100859ED0;
  v1161 = *(_OWORD *)&qword_100859EE0;
  v1162 = xmmword_100859EF0;
  v1163 = unk_100859F00;
  v1175 = 11;
  v1176 = xmmword_100859FC0;
  sub_100232898(v1177, (uint64_t)&unk_100859FD0);
  v1190 = xmmword_10085A0A8;
  v1191 = *(_OWORD *)&qword_10085A0B8;
  v1192 = xmmword_10085A0C8;
  v1186 = xmmword_10085A068;
  v1187 = *(_OWORD *)&qword_10085A078;
  v1188 = xmmword_10085A088;
  v1189 = unk_10085A098;
  v1182 = xmmword_10085A028;
  v1183 = unk_10085A038;
  v1184 = xmmword_10085A048;
  v1185 = unk_10085A058;
  v1178 = xmmword_100859FE8;
  v1179 = *(_OWORD *)&qword_100859FF8;
  v1180 = xmmword_10085A008;
  v1181 = unk_10085A018;
  *(_QWORD *)&v290 = 0x300000010;
  *((_QWORD *)&v290 + 1) = 0xC043800000000000;
  v995 = -39.0;
  sub_10018252C((uint64_t)v291, &v995, 1);
  v292 = xmmword_10046E0F0;
  *(_QWORD *)&v293 = 0x4024000000000000;
  DWORD2(v293) = 45;
  BYTE12(v293) = 0;
  LODWORD(v294) = 1;
  BYTE8(v294) = 1;
  v295 = xmmword_10046E100;
  v296 = xmmword_10046E110;
  v297 = v33;
  *(_QWORD *)&v298[0] = 0xC059000000000000;
  *(_OWORD *)((char *)v298 + 8) = xmmword_10046E120;
  *((int32x2_t *)&v298[1] + 1) = vdup_n_s32(0x3DCCCCCDu);
  v299 = xmmword_10046E060;
  *(_QWORD *)&v301[0] = 0;
  v300 = 0x3FD999999999999AuLL;
  *(_OWORD *)((char *)v301 + 8) = xmmword_10046E070;
  DWORD2(v301[1]) = 5;
  *(_QWORD *)&v302 = 0x4000000000000000;
  DWORD2(v302) = 10;
  *(_QWORD *)&v303 = 0x4034000000000000;
  DWORD2(v303) = 3;
  *(_QWORD *)&v304 = 0x3FF0000000000000;
  *((_QWORD *)&v304 + 1) = 0x4008000000000000;
  v1193 = 14;
  v1194 = v290;
  sub_100232898(v1195, (uint64_t)v291);
  v1207 = v301[1];
  v1208 = v302;
  v1209 = v303;
  v1210 = v304;
  v1204 = v299;
  v1205 = v300;
  v1206 = v301[0];
  v1200 = v296;
  v1201 = v297;
  v1202 = v298[0];
  v1203 = v298[1];
  v1196 = v292;
  v1197 = v293;
  v1198 = v294;
  v1199 = v295;
  *(_QWORD *)&v275 = 0x300000008;
  *((_QWORD *)&v275 + 1) = 0xC044000000000000;
  v995 = -40.0;
  sub_10018252C((uint64_t)v276, &v995, 1);
  v277 = xmmword_10046E0F0;
  *(_QWORD *)&v278 = 0x4024000000000000;
  DWORD2(v278) = 45;
  BYTE12(v278) = 0;
  LODWORD(v279) = 1;
  BYTE8(v279) = 1;
  v280 = xmmword_10046E100;
  v281 = xmmword_10046E110;
  v282 = v33;
  *(_QWORD *)&v283[0] = 0xC059000000000000;
  *(_OWORD *)((char *)v283 + 8) = xmmword_10046E120;
  *((int32x2_t *)&v283[1] + 1) = vdup_n_s32(0x3DCCCCCDu);
  v284 = xmmword_10046E060;
  *(_QWORD *)&v286[0] = 0;
  v285 = 0x3FD999999999999AuLL;
  *(_OWORD *)((char *)v286 + 8) = xmmword_10046E070;
  DWORD2(v286[1]) = 5;
  *(_QWORD *)&v287 = 0x4000000000000000;
  DWORD2(v287) = 10;
  *(_QWORD *)&v288 = 0x4034000000000000;
  DWORD2(v288) = 3;
  *(_QWORD *)&v289 = 0x3FF0000000000000;
  *((_QWORD *)&v289 + 1) = 0x4008000000000000;
  v1211 = 6;
  v1212 = v275;
  sub_100232898(v1213, (uint64_t)v276);
  v1225 = v286[1];
  v1226 = v287;
  v1227 = v288;
  v1228 = v289;
  v1221 = v283[1];
  v1222 = v284;
  v1223 = v285;
  v1224 = v286[0];
  v1217 = v280;
  v1218 = v281;
  v1219 = v282;
  v1220 = v283[0];
  v1214 = v277;
  v1215 = v278;
  v1216 = v279;
  *(_QWORD *)&v260 = 0x300000010;
  *((_QWORD *)&v260 + 1) = 0xC044000000000000;
  v995 = -40.0;
  sub_10018252C((uint64_t)v261, &v995, 1);
  v262 = xmmword_10046E0F0;
  *(_QWORD *)&v263 = 0x4024000000000000;
  DWORD2(v263) = 45;
  BYTE12(v263) = 0;
  LODWORD(v264) = 1;
  BYTE8(v264) = 1;
  v265 = xmmword_10046E100;
  v266 = xmmword_10046E110;
  v267 = v33;
  *(_QWORD *)&v268[0] = 0xC059000000000000;
  *(_OWORD *)((char *)v268 + 8) = xmmword_10046E120;
  *((int32x2_t *)&v268[1] + 1) = vdup_n_s32(0x3DCCCCCDu);
  v269 = xmmword_10046E060;
  *(_QWORD *)&v271[0] = 0;
  v270 = 0x3FD999999999999AuLL;
  *(_OWORD *)((char *)v271 + 8) = xmmword_10046E070;
  DWORD2(v271[1]) = 5;
  *(_QWORD *)&v272 = 0x4000000000000000;
  DWORD2(v272) = 10;
  *(_QWORD *)&v273 = 0x4034000000000000;
  DWORD2(v273) = 3;
  *(_QWORD *)&v274 = 0x3FF0000000000000;
  *((_QWORD *)&v274 + 1) = 0x4008000000000000;
  v1229 = 15;
  v1230 = v260;
  sub_100232898(v1231, (uint64_t)v261);
  v1243 = v271[1];
  v1244 = v272;
  v1245 = v273;
  v1246 = v274;
  v1239 = v268[1];
  v1240 = v269;
  v1241 = v270;
  v1242 = v271[0];
  v1235 = v265;
  v1236 = v266;
  v1237 = v267;
  v1238 = v268[0];
  v1232 = v262;
  v1233 = v263;
  v1234 = v264;
  *(_QWORD *)&v245 = 0x300000008;
  *((_QWORD *)&v245 + 1) = 0xC044000000000000;
  v995 = -40.0;
  sub_10018252C((uint64_t)v246, &v995, 1);
  v247 = xmmword_10046E0F0;
  *(_QWORD *)&v248 = 0x4024000000000000;
  DWORD2(v248) = 45;
  BYTE12(v248) = 0;
  LODWORD(v249) = 1;
  BYTE8(v249) = 1;
  v250 = xmmword_10046E100;
  v251 = xmmword_10046E110;
  v252 = v33;
  *(_QWORD *)&v253[0] = 0xC059000000000000;
  *(_OWORD *)((char *)v253 + 8) = xmmword_10046E120;
  *((int32x2_t *)&v253[1] + 1) = vdup_n_s32(0x3DCCCCCDu);
  v254 = xmmword_10046E060;
  *(_QWORD *)&v256[0] = 0;
  v255 = 0x3FD999999999999AuLL;
  *(_OWORD *)((char *)v256 + 8) = xmmword_10046E070;
  DWORD2(v256[1]) = 5;
  *(_QWORD *)&v257 = 0x4000000000000000;
  DWORD2(v257) = 10;
  *(_QWORD *)&v258 = 0x4034000000000000;
  DWORD2(v258) = 3;
  *(_QWORD *)&v259 = 0x3FF0000000000000;
  *((_QWORD *)&v259 + 1) = 0x4008000000000000;
  v1247 = 16;
  v1248 = v245;
  sub_100232898(v1249, (uint64_t)v246);
  v1261 = v256[1];
  v1262 = v257;
  v1263 = v258;
  v1264 = v259;
  v1257 = v253[1];
  v1258 = v254;
  v1259 = v255;
  v1260 = v256[0];
  v1253 = v250;
  v1254 = v251;
  v1255 = v252;
  v1256 = v253[0];
  v1250 = v247;
  v1251 = v248;
  v1252 = v249;
  *(_QWORD *)&v230 = 0x300000010;
  *((_QWORD *)&v230 + 1) = 0xC044000000000000;
  v995 = -40.0;
  sub_10018252C((uint64_t)v231, &v995, 1);
  v232 = xmmword_10046E0F0;
  *(_QWORD *)&v233 = 0x4024000000000000;
  DWORD2(v233) = 45;
  BYTE12(v233) = 0;
  LODWORD(v234) = 1;
  BYTE8(v234) = 1;
  v235 = xmmword_10046E100;
  v236 = xmmword_10046E110;
  v237 = v33;
  *(_QWORD *)&v238[0] = 0xC059000000000000;
  *(_OWORD *)((char *)v238 + 8) = xmmword_10046E120;
  *((int32x2_t *)&v238[1] + 1) = vdup_n_s32(0x3DCCCCCDu);
  v239 = xmmword_10046E060;
  *(_QWORD *)&v241[0] = 0;
  v240 = 0x3FD999999999999AuLL;
  *(_OWORD *)((char *)v241 + 8) = xmmword_10046E070;
  DWORD2(v241[1]) = 5;
  *(_QWORD *)&v242 = 0x4000000000000000;
  DWORD2(v242) = 10;
  *(_QWORD *)&v243 = 0x4034000000000000;
  DWORD2(v243) = 3;
  *(_QWORD *)&v244 = 0x3FF0000000000000;
  *((_QWORD *)&v244 + 1) = 0x4008000000000000;
  v1265 = 17;
  v1266 = v230;
  sub_100232898(v1267, (uint64_t)v231);
  v1279 = v241[1];
  v1280 = v242;
  v1281 = v243;
  v1282 = v244;
  v1275 = v238[1];
  v1276 = v239;
  v1277 = v240;
  v1278 = v241[0];
  v1271 = v235;
  v1272 = v236;
  v1273 = v237;
  v1274 = v238[0];
  v1268 = v232;
  v1269 = v233;
  v1270 = v234;
  *(_QWORD *)&v215 = 0x200000003;
  *((_QWORD *)&v215 + 1) = 0xC04B800000000000;
  v995 = -55.0;
  sub_10018252C((uint64_t)v216, &v995, 1);
  v217 = xmmword_100473420;
  *(_QWORD *)&v218 = 0x4000000000000000;
  DWORD2(v218) = 20;
  BYTE12(v218) = 0;
  LODWORD(v219) = 1;
  BYTE8(v219) = 1;
  v220 = xmmword_10046E100;
  v221 = xmmword_10046E110;
  v222 = v33;
  *(_QWORD *)&v223[0] = 0xC059000000000000;
  *(_OWORD *)((char *)v223 + 8) = xmmword_10046E120;
  *((int32x2_t *)&v223[1] + 1) = vdup_n_s32(0x3DCCCCCDu);
  v224 = xmmword_10046E060;
  *(_QWORD *)&v226[0] = 0;
  v225 = 0x3FD999999999999AuLL;
  *(_OWORD *)((char *)v226 + 8) = xmmword_10046E070;
  DWORD2(v226[1]) = 5;
  *(_QWORD *)&v227 = 0x4000000000000000;
  DWORD2(v227) = 10;
  *(_QWORD *)&v228 = 0x4034000000000000;
  DWORD2(v228) = 3;
  *(_QWORD *)&v229 = 0x3FF0000000000000;
  *((_QWORD *)&v229 + 1) = 0x4008000000000000;
  v1283 = 18;
  v1284 = v215;
  sub_100232898(v1285, (uint64_t)v216);
  v1297 = v226[1];
  v1298 = v227;
  v1299 = v228;
  v1300 = v229;
  v1293 = v223[1];
  v1294 = v224;
  v1295 = v225;
  v1296 = v226[0];
  v1289 = v220;
  v1290 = v221;
  v1291 = v222;
  v1292 = v223[0];
  v1286 = v217;
  v1287 = v218;
  v1288 = v219;
  v1301 = 0;
  v1302 = xmmword_100859FC0;
  sub_100232898(v1303, (uint64_t)&unk_100859FD0);
  v1309[6] = unk_10085A098;
  v1309[7] = xmmword_10085A0A8;
  v1309[8] = *(_OWORD *)&qword_10085A0B8;
  v1309[9] = xmmword_10085A0C8;
  v1309[2] = unk_10085A058;
  v1309[3] = xmmword_10085A068;
  v1309[4] = *(_OWORD *)&qword_10085A078;
  v1309[5] = xmmword_10085A088;
  v1307 = unk_10085A018;
  v1308 = xmmword_10085A028;
  v1309[0] = unk_10085A038;
  v1309[1] = xmmword_10085A048;
  v1304 = xmmword_100859FE8;
  v1305 = *(_OWORD *)&qword_100859FF8;
  v1306 = xmmword_10085A008;
  sub_100233348((uint64_t)v305, (int *)&v1139, 10);
  v1310 = 7;
  sub_100233560(v1311, (uint64_t)v305);
  LODWORD(v995) = 13;
  v996 = xmmword_100859FC0;
  sub_100232898(v997, (uint64_t)&unk_100859FD0);
  v1010 = xmmword_10085A0A8;
  v1011 = *(_OWORD *)&qword_10085A0B8;
  v1012 = xmmword_10085A0C8;
  v1006 = xmmword_10085A068;
  v1007 = *(_OWORD *)&qword_10085A078;
  v1008 = xmmword_10085A088;
  v1009 = unk_10085A098;
  v1002 = xmmword_10085A028;
  v1003 = unk_10085A038;
  v1004 = xmmword_10085A048;
  v1005 = unk_10085A058;
  v998 = xmmword_100859FE8;
  v999 = *(_OWORD *)&qword_100859FF8;
  v1000 = xmmword_10085A008;
  v1001 = unk_10085A018;
  *(_QWORD *)&v198 = 0x300000008;
  *((_QWORD *)&v198 + 1) = 0xC046800000000000;
  v916 = -45.0;
  sub_10018252C((uint64_t)v199, &v916, 1);
  v200 = xmmword_10046E0F0;
  *(_QWORD *)&v201 = 0x4024000000000000;
  DWORD2(v201) = 45;
  BYTE12(v201) = 0;
  LODWORD(v202) = 1;
  BYTE8(v202) = 1;
  v203 = xmmword_10046E100;
  v204 = xmmword_10046E110;
  v205 = v33;
  *(_QWORD *)&v206[0] = 0xC059000000000000;
  *(_OWORD *)((char *)v206 + 8) = xmmword_10046E120;
  *((int32x2_t *)&v206[1] + 1) = vdup_n_s32(0x3DCCCCCDu);
  v207 = xmmword_10046E060;
  *(_QWORD *)&v209[0] = 0;
  v208 = 0x3FD999999999999AuLL;
  *(_OWORD *)((char *)v209 + 8) = xmmword_10046E070;
  DWORD2(v209[1]) = 5;
  *(_QWORD *)&v210 = 0x4000000000000000;
  DWORD2(v210) = 10;
  *(_QWORD *)&v211 = 0x4034000000000000;
  DWORD2(v211) = 3;
  *(_QWORD *)&v212 = 0x3FF0000000000000;
  *((_QWORD *)&v212 + 1) = 0x4008000000000000;
  v1013 = 7;
  v1014 = v198;
  sub_100232898(v1015, (uint64_t)v199);
  v1028 = v210;
  v1029 = v211;
  v1030 = v212;
  v1024 = v207;
  v1025 = v208;
  v1026 = v209[0];
  v1027 = v209[1];
  v1020 = v204;
  v1021 = v205;
  v1022 = v206[0];
  v1023 = v206[1];
  v1016 = v200;
  v1017 = v201;
  v1018 = v202;
  v1019 = v203;
  v1031 = 11;
  v1032 = xmmword_100859FC0;
  sub_100232898(v1033, (uint64_t)&unk_100859FD0);
  v1046 = xmmword_10085A0A8;
  v1047 = *(_OWORD *)&qword_10085A0B8;
  v1048 = xmmword_10085A0C8;
  v1042 = xmmword_10085A068;
  v1043 = *(_OWORD *)&qword_10085A078;
  v1044 = xmmword_10085A088;
  v1045 = unk_10085A098;
  v1038 = xmmword_10085A028;
  v1039 = unk_10085A038;
  v1040 = xmmword_10085A048;
  v1041 = unk_10085A058;
  v1034 = xmmword_100859FE8;
  v1035 = *(_OWORD *)&qword_100859FF8;
  v1036 = xmmword_10085A008;
  v1037 = unk_10085A018;
  *(_QWORD *)&v183 = 0x300000008;
  *((_QWORD *)&v183 + 1) = 0xC046000000000000;
  v916 = -44.0;
  sub_10018252C((uint64_t)v184, &v916, 1);
  v185 = xmmword_10046E0F0;
  *(_QWORD *)&v186 = 0x4024000000000000;
  DWORD2(v186) = 45;
  BYTE12(v186) = 0;
  LODWORD(v187) = 1;
  BYTE8(v187) = 1;
  v188 = xmmword_10046E100;
  v189 = xmmword_10046E110;
  v190 = v33;
  *(_QWORD *)&v191[0] = 0xC059000000000000;
  *(_OWORD *)((char *)v191 + 8) = xmmword_10046E120;
  *((int32x2_t *)&v191[1] + 1) = vdup_n_s32(0x3DCCCCCDu);
  v192 = xmmword_10046E060;
  *(_QWORD *)&v194[0] = 0;
  v193 = 0x3FD999999999999AuLL;
  *(_OWORD *)((char *)v194 + 8) = xmmword_10046E070;
  DWORD2(v194[1]) = 5;
  *(_QWORD *)&v195 = 0x4000000000000000;
  DWORD2(v195) = 10;
  *(_QWORD *)&v196 = 0x4034000000000000;
  DWORD2(v196) = 3;
  *(_QWORD *)&v197 = 0x3FF0000000000000;
  *((_QWORD *)&v197 + 1) = 0x4008000000000000;
  v1049 = 14;
  v1050 = v183;
  sub_100232898(v1051, (uint64_t)v184);
  v1063 = v194[1];
  v1064 = v195;
  v1065 = v196;
  v1066 = v197;
  v1060 = v192;
  v1061 = v193;
  v1062 = v194[0];
  v1056 = v189;
  v1057 = v190;
  v1058 = v191[0];
  v1059 = v191[1];
  v1052 = v185;
  v1053 = v186;
  v1054 = v187;
  v1055 = v188;
  *(_QWORD *)&v168 = 0x300000008;
  *((_QWORD *)&v168 + 1) = 0xC044000000000000;
  v916 = -40.0;
  sub_10018252C((uint64_t)v169, &v916, 1);
  v170 = xmmword_10046E0F0;
  *(_QWORD *)&v171 = 0x4024000000000000;
  DWORD2(v171) = 45;
  BYTE12(v171) = 0;
  LODWORD(v172) = 1;
  BYTE8(v172) = 1;
  v173 = xmmword_10046E100;
  v174 = xmmword_10046E110;
  v175 = v33;
  *(_QWORD *)&v176[0] = 0xC059000000000000;
  *(_OWORD *)((char *)v176 + 8) = xmmword_10046E120;
  *((int32x2_t *)&v176[1] + 1) = vdup_n_s32(0x3DCCCCCDu);
  v177 = xmmword_10046E060;
  *(_QWORD *)&v179[0] = 0;
  v178 = 0x3FD999999999999AuLL;
  *(_OWORD *)((char *)v179 + 8) = xmmword_10046E070;
  DWORD2(v179[1]) = 5;
  *(_QWORD *)&v180 = 0x4000000000000000;
  DWORD2(v180) = 10;
  *(_QWORD *)&v181 = 0x4034000000000000;
  DWORD2(v181) = 3;
  *(_QWORD *)&v182 = 0x3FF0000000000000;
  *((_QWORD *)&v182 + 1) = 0x4008000000000000;
  v1067 = 6;
  v1068 = v168;
  sub_100232898(v1069, (uint64_t)v169);
  v1081 = v179[1];
  v1082 = v180;
  v1083 = v181;
  v1084 = v182;
  v1077 = v176[1];
  v1078 = v177;
  v1079 = v178;
  v1080 = v179[0];
  v1073 = v173;
  v1074 = v174;
  v1075 = v175;
  v1076 = v176[0];
  v1070 = v170;
  v1071 = v171;
  v1072 = v172;
  *(_QWORD *)&v153 = 0x300000008;
  *((_QWORD *)&v153 + 1) = 0xC042800000000000;
  v916 = -37.0;
  sub_10018252C((uint64_t)v154, &v916, 1);
  v155 = xmmword_10046E0F0;
  *(_QWORD *)&v156 = 0x4024000000000000;
  DWORD2(v156) = 45;
  BYTE12(v156) = 0;
  LODWORD(v157) = 1;
  BYTE8(v157) = 1;
  v158 = xmmword_10046E100;
  v159 = xmmword_10046E110;
  v160 = v33;
  *(_QWORD *)&v161[0] = 0xC059000000000000;
  *(_OWORD *)((char *)v161 + 8) = xmmword_10046E120;
  *((int32x2_t *)&v161[1] + 1) = vdup_n_s32(0x3DCCCCCDu);
  v162 = xmmword_10046E060;
  *(_QWORD *)&v164[0] = 0;
  v163 = 0x3FD999999999999AuLL;
  *(_OWORD *)((char *)v164 + 8) = xmmword_10046E070;
  DWORD2(v164[1]) = 5;
  *(_QWORD *)&v165 = 0x4000000000000000;
  DWORD2(v165) = 10;
  *(_QWORD *)&v166 = 0x4034000000000000;
  DWORD2(v166) = 3;
  *(_QWORD *)&v167 = 0x3FF0000000000000;
  *((_QWORD *)&v167 + 1) = 0x4008000000000000;
  v1085 = 17;
  v1086 = v153;
  sub_100232898(v1087, (uint64_t)v154);
  v1099 = v164[1];
  v1100 = v165;
  v1101 = v166;
  v1102 = v167;
  v1095 = v161[1];
  v1096 = v162;
  v1097 = v163;
  v1098 = v164[0];
  v1091 = v158;
  v1092 = v159;
  v1093 = v160;
  v1094 = v161[0];
  v1088 = v155;
  v1089 = v156;
  v1090 = v157;
  *(_QWORD *)&v138 = 0x200000003;
  *((_QWORD *)&v138 + 1) = 0xC04B000000000000;
  v916 = -54.0;
  sub_10018252C((uint64_t)v139, &v916, 1);
  v140 = xmmword_100473420;
  *(_QWORD *)&v141 = 0x4000000000000000;
  DWORD2(v141) = 20;
  BYTE12(v141) = 0;
  LODWORD(v142) = 1;
  BYTE8(v142) = 1;
  v143 = xmmword_10046E100;
  v144 = xmmword_10046E110;
  v145 = v33;
  *(_QWORD *)&v146[0] = 0xC059000000000000;
  *(_OWORD *)((char *)v146 + 8) = xmmword_10046E120;
  *((int32x2_t *)&v146[1] + 1) = vdup_n_s32(0x3DCCCCCDu);
  v147 = xmmword_10046E060;
  *(_QWORD *)&v149[0] = 0;
  v148 = 0x3FD999999999999AuLL;
  *(_OWORD *)((char *)v149 + 8) = xmmword_10046E070;
  DWORD2(v149[1]) = 5;
  *(_QWORD *)&v150 = 0x4000000000000000;
  DWORD2(v150) = 10;
  *(_QWORD *)&v151 = 0x4034000000000000;
  DWORD2(v151) = 3;
  *(_QWORD *)&v152 = 0x3FF0000000000000;
  *((_QWORD *)&v152 + 1) = 0x4008000000000000;
  v1103 = 18;
  v1104 = v138;
  sub_100232898(v1105, (uint64_t)v139);
  v1117 = v149[1];
  v1118 = v150;
  v1119 = v151;
  v1120 = v152;
  v1113 = v146[1];
  v1114 = v147;
  v1115 = v148;
  v1116 = v149[0];
  v1109 = v143;
  v1110 = v144;
  v1111 = v145;
  v1112 = v146[0];
  v1106 = v140;
  v1107 = v141;
  v1108 = v142;
  v1121 = 0;
  v1122 = xmmword_100859FC0;
  sub_100232898(v1123, (uint64_t)&unk_100859FD0);
  v1135 = unk_10085A098;
  v1136 = xmmword_10085A0A8;
  v1137 = *(_OWORD *)&qword_10085A0B8;
  v1138 = xmmword_10085A0C8;
  v1131 = unk_10085A058;
  v1132 = xmmword_10085A068;
  v1133 = *(_OWORD *)&qword_10085A078;
  v1134 = xmmword_10085A088;
  v1127 = unk_10085A018;
  v1128 = xmmword_10085A028;
  v1129 = unk_10085A038;
  v1130 = xmmword_10085A048;
  v1124 = xmmword_100859FE8;
  v1125 = *(_OWORD *)&qword_100859FF8;
  v1126 = xmmword_10085A008;
  sub_100233348((uint64_t)v213, (int *)&v995, 8);
  v1312 = 6;
  sub_100233560(v1313, (uint64_t)v213);
  v976 = 0;
  v977 = xmmword_100859FC0;
  sub_100232898(&v978, (uint64_t)&unk_100859FD0);
  v992 = xmmword_10085A0A8;
  v993 = *(_OWORD *)&qword_10085A0B8;
  v994 = xmmword_10085A0C8;
  v988 = xmmword_10085A068;
  v989 = *(_OWORD *)&qword_10085A078;
  v990 = xmmword_10085A088;
  v991 = unk_10085A098;
  v984 = xmmword_10085A028;
  v985 = unk_10085A038;
  v986 = xmmword_10085A048;
  v987 = unk_10085A058;
  v980 = xmmword_100859FE8;
  v981 = *(_OWORD *)&qword_100859FF8;
  v982 = xmmword_10085A008;
  v983 = unk_10085A018;
  sub_100233348((uint64_t)v136, &v976, 1);
  v1314 = 0;
  sub_100233560(v1315, (uint64_t)v136);
  sub_100233638((uint64_t)v306, &v1310, 3);
  v2662 = 2;
  sub_100233804(v2663, (uint64_t)v306);
  *(_QWORD *)&v117 = 0x300000008;
  *((_QWORD *)&v117 + 1) = 0xC03D000000000000;
  v880 = -29.0;
  sub_10018252C((uint64_t)v118, &v880, 1);
  v119 = xmmword_10046E0F0;
  *(_QWORD *)&v120 = 0x4024000000000000;
  DWORD2(v120) = 45;
  BYTE12(v120) = 0;
  LODWORD(v121) = 1;
  BYTE8(v121) = 1;
  v122 = xmmword_10046E100;
  v123 = xmmword_10046E110;
  v124 = v33;
  *(_QWORD *)&v125[0] = 0xC059000000000000;
  *(_OWORD *)((char *)v125 + 8) = xmmword_10046E120;
  *((int32x2_t *)&v125[1] + 1) = vdup_n_s32(0x3DCCCCCDu);
  v126 = xmmword_10046E060;
  *(_QWORD *)&v128[0] = 0;
  v127 = 0x3FD999999999999AuLL;
  *(_OWORD *)((char *)v128 + 8) = xmmword_10046E070;
  DWORD2(v128[1]) = 5;
  *(_QWORD *)&v129 = 0x4000000000000000;
  DWORD2(v129) = 10;
  *(_QWORD *)&v130 = 0x4034000000000000;
  DWORD2(v130) = 3;
  *(_QWORD *)&v131 = 0x3FF0000000000000;
  *((_QWORD *)&v131 + 1) = 0x4008000000000000;
  LODWORD(v916) = 16;
  v917 = v117;
  sub_100232898(v918, (uint64_t)v118);
  v931 = v129;
  v932 = v130;
  v933 = v131;
  v927 = v126;
  v928 = v127;
  v929 = v128[0];
  v930 = v128[1];
  v923 = v123;
  v924 = v124;
  v925 = v125[0];
  v926 = v125[1];
  v919 = v119;
  v920 = v120;
  v921 = v121;
  v922 = v122;
  *(_QWORD *)&v102 = 0x300000008;
  *((_QWORD *)&v102 + 1) = 0xC03D000000000000;
  v880 = -29.0;
  sub_10018252C((uint64_t)v103, &v880, 1);
  v104 = xmmword_10046E0F0;
  *(_QWORD *)&v105 = 0x4024000000000000;
  DWORD2(v105) = 45;
  BYTE12(v105) = 0;
  LODWORD(v106) = 1;
  BYTE8(v106) = 1;
  v107 = xmmword_10046E100;
  v108 = xmmword_10046E110;
  v109 = v33;
  *(_QWORD *)&v110[0] = 0xC059000000000000;
  *(_OWORD *)((char *)v110 + 8) = xmmword_10046E120;
  *((int32x2_t *)&v110[1] + 1) = vdup_n_s32(0x3DCCCCCDu);
  v111 = xmmword_10046E060;
  *(_QWORD *)&v113[0] = 0;
  v112 = 0x3FD999999999999AuLL;
  *(_OWORD *)((char *)v113 + 8) = xmmword_10046E070;
  DWORD2(v113[1]) = 5;
  *(_QWORD *)&v114 = 0x4000000000000000;
  DWORD2(v114) = 10;
  *(_QWORD *)&v115 = 0x4034000000000000;
  DWORD2(v115) = 3;
  *(_QWORD *)&v116 = 0x3FF0000000000000;
  *((_QWORD *)&v116 + 1) = 0x4008000000000000;
  v934 = 14;
  v935 = v102;
  sub_100232898(v936, (uint64_t)v103);
  v949 = v114;
  v950 = v115;
  v951 = v116;
  v945 = v111;
  v946 = v112;
  v947 = v113[0];
  v948 = v113[1];
  v941 = v108;
  v942 = v109;
  v943 = v110[0];
  v944 = v110[1];
  v937 = v104;
  v938 = v105;
  v939 = v106;
  v940 = v107;
  *(_QWORD *)&v87 = 0x300000008;
  *((_QWORD *)&v87 + 1) = 0xC03D000000000000;
  v880 = -29.0;
  sub_10018252C((uint64_t)v88, &v880, 1);
  v89 = xmmword_10046E0F0;
  *(_QWORD *)&v90 = 0x4024000000000000;
  DWORD2(v90) = 45;
  BYTE12(v90) = 0;
  LODWORD(v91) = 1;
  BYTE8(v91) = 1;
  v92 = xmmword_10046E100;
  v93 = xmmword_10046E110;
  v94 = v33;
  *(_QWORD *)&v95[0] = 0xC059000000000000;
  *(_OWORD *)((char *)v95 + 8) = xmmword_10046E120;
  *((int32x2_t *)&v95[1] + 1) = vdup_n_s32(0x3DCCCCCDu);
  v96 = xmmword_10046E060;
  *(_QWORD *)&v98[0] = 0;
  v97 = 0x3FD999999999999AuLL;
  *(_OWORD *)((char *)v98 + 8) = xmmword_10046E070;
  DWORD2(v98[1]) = 5;
  *(_QWORD *)&v99 = 0x4000000000000000;
  DWORD2(v99) = 10;
  *(_QWORD *)&v100 = 0x4034000000000000;
  DWORD2(v100) = 3;
  *(_QWORD *)&v101 = 0x3FF0000000000000;
  *((_QWORD *)&v101 + 1) = 0x4008000000000000;
  v952 = 0;
  v953 = v87;
  sub_100232898(v954, (uint64_t)v88);
  v967 = v99;
  v968 = v100;
  v969 = v101;
  v963 = v96;
  v964 = v97;
  v965 = v98[0];
  v966 = v98[1];
  v959 = v93;
  v960 = v94;
  v961 = v95[0];
  v962 = v95[1];
  v955 = v89;
  v956 = v90;
  v957 = v91;
  v958 = v92;
  sub_100233348((uint64_t)v132, (int *)&v916, 3);
  v970 = 7;
  sub_100233560(v971, (uint64_t)v132);
  *(_QWORD *)&v70 = 0x300000008;
  *((_QWORD *)&v70 + 1) = 0xC03D000000000000;
  v861 = -29.0;
  sub_10018252C((uint64_t)v71, &v861, 1);
  v72 = xmmword_10046E0F0;
  *(_QWORD *)&v73 = 0x4024000000000000;
  DWORD2(v73) = 45;
  BYTE12(v73) = 0;
  LODWORD(v74) = 1;
  BYTE8(v74) = 1;
  v75 = xmmword_10046E100;
  v76 = xmmword_10046E110;
  v77 = v33;
  *(_QWORD *)&v78[0] = 0xC059000000000000;
  *(_OWORD *)((char *)v78 + 8) = xmmword_10046E120;
  *((int32x2_t *)&v78[1] + 1) = vdup_n_s32(0x3DCCCCCDu);
  v79 = xmmword_10046E060;
  *(_QWORD *)&v81[0] = 0;
  v80 = 0x3FD999999999999AuLL;
  *(_OWORD *)((char *)v81 + 8) = xmmword_10046E070;
  DWORD2(v81[1]) = 5;
  *(_QWORD *)&v82 = 0x4000000000000000;
  DWORD2(v82) = 10;
  *(_QWORD *)&v83 = 0x4034000000000000;
  DWORD2(v83) = 3;
  *(_QWORD *)&v84 = 0x3FF0000000000000;
  *((_QWORD *)&v84 + 1) = 0x4008000000000000;
  LODWORD(v880) = 14;
  v881 = v70;
  sub_100232898(v882, (uint64_t)v71);
  v895 = v82;
  v896 = v83;
  v897 = v84;
  v891 = v79;
  v892 = v80;
  v893 = v81[0];
  v894 = v81[1];
  v887 = v76;
  v888 = v77;
  v889 = v78[0];
  v890 = v78[1];
  v883 = v72;
  v884 = v73;
  v885 = v74;
  v886 = v75;
  *(_QWORD *)&v55 = 0x300000008;
  *((_QWORD *)&v55 + 1) = 0xC03D000000000000;
  v861 = -29.0;
  sub_10018252C((uint64_t)v56, &v861, 1);
  v57 = xmmword_10046E0F0;
  *(_QWORD *)&v58 = 0x4024000000000000;
  DWORD2(v58) = 45;
  BYTE12(v58) = 0;
  LODWORD(v59) = 1;
  BYTE8(v59) = 1;
  v60 = xmmword_10046E100;
  v61 = xmmword_10046E110;
  v62 = v33;
  *(_QWORD *)&v63[0] = 0xC059000000000000;
  *(_OWORD *)((char *)v63 + 8) = xmmword_10046E120;
  *((int32x2_t *)&v63[1] + 1) = vdup_n_s32(0x3DCCCCCDu);
  v64 = xmmword_10046E060;
  *(_QWORD *)&v66[0] = 0;
  v65 = 0x3FD999999999999AuLL;
  *(_OWORD *)((char *)v66 + 8) = xmmword_10046E070;
  DWORD2(v66[1]) = 5;
  *(_QWORD *)&v67 = 0x4000000000000000;
  DWORD2(v67) = 10;
  *(_QWORD *)&v68 = 0x4034000000000000;
  DWORD2(v68) = 3;
  *(_QWORD *)&v69 = 0x3FF0000000000000;
  *((_QWORD *)&v69 + 1) = 0x4008000000000000;
  v898 = 0;
  v899 = v55;
  sub_100232898(v900, (uint64_t)v56);
  v913 = v67;
  v914 = v68;
  v915 = v69;
  v909 = v64;
  v910 = v65;
  v911 = v66[0];
  v912 = v66[1];
  v905 = v61;
  v906 = v62;
  v907 = v63[0];
  v908 = v63[1];
  v901 = v57;
  v902 = v58;
  v903 = v59;
  v904 = v60;
  sub_100233348((uint64_t)v85, (int *)&v880, 2);
  v972 = 6;
  sub_100233560(v973, (uint64_t)v85);
  *(_QWORD *)&v38 = 0x300000008;
  *((_QWORD *)&v38 + 1) = 0xC03D000000000000;
  v841 = -29.0;
  sub_10018252C((uint64_t)v39, &v841, 1);
  v40 = xmmword_10046E0F0;
  *(_QWORD *)&v41 = 0x4024000000000000;
  DWORD2(v41) = 45;
  BYTE12(v41) = 0;
  LODWORD(v42) = 1;
  BYTE8(v42) = 1;
  v43 = xmmword_10046E100;
  v44 = xmmword_10046E110;
  v45 = v33;
  *(_QWORD *)&v46[0] = 0xC059000000000000;
  *(_OWORD *)((char *)v46 + 8) = xmmword_10046E120;
  *((int32x2_t *)&v46[1] + 1) = vdup_n_s32(0x3DCCCCCDu);
  v47 = xmmword_10046E060;
  *(_QWORD *)&v49[0] = 0;
  v48 = 0x3FD999999999999AuLL;
  *(_OWORD *)((char *)v49 + 8) = xmmword_10046E070;
  DWORD2(v49[1]) = 5;
  *(_QWORD *)&v50 = 0x4000000000000000;
  DWORD2(v50) = 10;
  *(_QWORD *)&v51 = 0x4034000000000000;
  DWORD2(v51) = 3;
  *(_QWORD *)&v52 = 0x3FF0000000000000;
  *((_QWORD *)&v52 + 1) = 0x4008000000000000;
  LODWORD(v861) = 0;
  v862 = v38;
  sub_100232898(&v863, (uint64_t)v39);
  v877 = v50;
  v878 = v51;
  v879 = v52;
  v873 = v47;
  v874 = v48;
  v875 = v49[0];
  v876 = v49[1];
  v869 = v44;
  v870 = v45;
  v871 = v46[0];
  v872 = v46[1];
  v865 = v40;
  v866 = v41;
  v867 = v42;
  v868 = v43;
  sub_100233348((uint64_t)v53, (int *)&v861, 1);
  v974 = 0;
  sub_100233560(v975, (uint64_t)v53);
  sub_100233638((uint64_t)v134, &v970, 3);
  v2664 = 7;
  sub_100233804(v2665, (uint64_t)v134);
  LODWORD(v841) = 0;
  v842 = xmmword_100859D90;
  sub_100232898(v843, (uint64_t)&unk_100859DA0);
  v856 = xmmword_100859E78;
  v857 = *(_OWORD *)&qword_100859E88;
  v858 = xmmword_100859E98;
  v852 = xmmword_100859E38;
  v853 = *(_OWORD *)&qword_100859E48;
  v854 = xmmword_100859E58;
  v855 = unk_100859E68;
  v848 = xmmword_100859DF8;
  v849 = unk_100859E08;
  v850 = xmmword_100859E18;
  v851 = unk_100859E28;
  v844 = xmmword_100859DB8;
  v845 = *(_OWORD *)&qword_100859DC8;
  v846 = xmmword_100859DD8;
  v847 = unk_100859DE8;
  sub_100233348((uint64_t)v34, (int *)&v841, 1);
  v859 = 0;
  sub_100233560(v860, (uint64_t)v34);
  sub_100233638((uint64_t)v36, &v859, 1);
  v2666 = 1;
  sub_100233804(v2667, (uint64_t)v36);
  sub_1002338DC((uint64_t)&unk_10085FC28, &v2656, 6);
  for (i = 0; i != -24; i -= 4)
    sub_1002332B0((uint64_t)&v2667[i], (_QWORD *)v2667[i + 1]);
  sub_1002332B0((uint64_t)v36, v37);
  sub_1002332FC((uint64_t)v860, (_QWORD *)v860[1]);
  sub_1002332FC((uint64_t)v34, v35);
  sub_10003E3F0((uint64_t)v843, (_QWORD *)v843[1]);
  sub_1002332B0((uint64_t)v134, v135);
  for (j = 0; j != -12; j -= 4)
    sub_1002332FC((uint64_t)&v975[j], (_QWORD *)v975[j + 1]);
  sub_1002332FC((uint64_t)v53, v54);
  sub_10003E3F0((uint64_t)&v863, v864[0]);
  sub_10003E3F0((uint64_t)v39, v39[1]);
  sub_1002332FC((uint64_t)v85, v86);
  v7 = 72;
  do
  {
    sub_10003E3F0((uint64_t)&v864[v7 - 1], v864[v7]);
    v7 -= 36;
  }
  while (v7 * 8);
  sub_10003E3F0((uint64_t)v56, v56[1]);
  sub_10003E3F0((uint64_t)v71, v71[1]);
  sub_1002332FC((uint64_t)v132, v133);
  v8 = 108;
  do
  {
    sub_10003E3F0((uint64_t)&v900[v8], (_QWORD *)v900[v8 + 1]);
    v8 -= 36;
  }
  while (v8 * 8);
  sub_10003E3F0((uint64_t)v88, v88[1]);
  sub_10003E3F0((uint64_t)v103, v103[1]);
  sub_10003E3F0((uint64_t)v118, v118[1]);
  sub_1002332B0((uint64_t)v306, v306[1]);
  do
  {
    sub_1002332FC((uint64_t)&v1315[v8], (_QWORD *)v1315[v8 + 1]);
    v8 -= 4;
  }
  while (v8 != -12);
  sub_1002332FC((uint64_t)v136, v137);
  sub_10003E3F0((uint64_t)&v978, v979[0]);
  sub_1002332FC((uint64_t)v213, v214);
  v9 = 288;
  do
  {
    sub_10003E3F0((uint64_t)&v979[v9 - 1], v979[v9]);
    v9 -= 36;
  }
  while (v9 * 8);
  sub_10003E3F0((uint64_t)v139, v139[1]);
  sub_10003E3F0((uint64_t)v154, v154[1]);
  sub_10003E3F0((uint64_t)v169, v169[1]);
  sub_10003E3F0((uint64_t)v184, v184[1]);
  sub_10003E3F0((uint64_t)v199, v199[1]);
  sub_1002332FC((uint64_t)v305, v305[1]);
  v10 = 360;
  do
  {
    sub_10003E3F0((uint64_t)&v1123[v10], (_QWORD *)v1123[v10 + 1]);
    v10 -= 36;
  }
  while (v10 * 8);
  sub_10003E3F0((uint64_t)v216, v216[1]);
  sub_10003E3F0((uint64_t)v231, v231[1]);
  sub_10003E3F0((uint64_t)v246, v246[1]);
  sub_10003E3F0((uint64_t)v261, v261[1]);
  sub_10003E3F0((uint64_t)v276, v276[1]);
  sub_10003E3F0((uint64_t)v291, v291[1]);
  sub_1002332B0((uint64_t)v384, v384[1]);
  do
  {
    sub_1002332FC((uint64_t)&v1409[v10], (_QWORD *)v1409[v10 + 1]);
    v10 -= 4;
  }
  while (v10 != -8);
  sub_1002332FC((uint64_t)v337, v337[1]);
  v11 = 36;
  do
  {
    sub_10003E3F0((uint64_t)&v1308 + v11 * 16 + 8, *(_QWORD **)&v1309[v11]);
    v11 -= 18;
  }
  while (v11 * 16);
  sub_10003E3F0((uint64_t)v308, v308[1]);
  sub_10003E3F0((uint64_t)v323, v323[1]);
  sub_1002332FC((uint64_t)v383, v383[1]);
  v12 = 108;
  do
  {
    sub_10003E3F0((uint64_t)&v1336[v12], (_QWORD *)v1336[v12 + 1]);
    v12 -= 36;
  }
  while (v12 * 8);
  sub_10003E3F0((uint64_t)v339, v339[1]);
  sub_10003E3F0((uint64_t)v354, v354[1]);
  sub_10003E3F0((uint64_t)v369, v369[1]);
  sub_1002332B0((uint64_t)v634, v634[1]);
  v13 = 288;
  do
  {
    sub_1002332FC((uint64_t)&v1877 + v13 + 8, *(_QWORD **)((char *)&v1878 + v13));
    v13 -= 32;
  }
  while (v13);
  sub_1002332FC((uint64_t)v385, v385[1]);
  sub_10003E3F0((uint64_t)&v1412, v1413[0]);
  sub_1002332FC((uint64_t)v431, v431[1]);
  v14 = 108;
  do
  {
    sub_10003E3F0((uint64_t)&v1413[v14 - 1], v1413[v14]);
    v14 -= 36;
  }
  while (v14 * 8);
  sub_10003E3F0((uint64_t)v387, v387[1]);
  sub_10003E3F0((uint64_t)v402, v402[1]);
  sub_10003E3F0((uint64_t)v417, v417[1]);
  sub_1002332FC((uint64_t)v552, v552[1]);
  v15 = 360;
  do
  {
    sub_10003E3F0((uint64_t)&v1467[v15], (_QWORD *)v1467[v15 + 1]);
    v15 -= 36;
  }
  while (v15 * 8);
  sub_10003E3F0((uint64_t)v433, v433[1]);
  sub_10003E3F0((uint64_t)v448, v448[1]);
  sub_10003E3F0((uint64_t)v463, v463[1]);
  sub_10003E3F0((uint64_t)v478, v478[1]);
  sub_10003E3F0((uint64_t)v493, v493[1]);
  sub_10003E3F0((uint64_t)v508, v508[1]);
  sub_10003E3F0((uint64_t)v523, v523[1]);
  sub_10003E3F0((uint64_t)v538, v538[1]);
  sub_1002332FC((uint64_t)v553, v553[1]);
  v16 = 72;
  do
  {
    sub_10003E3F0((uint64_t)&v1647[v16], (_QWORD *)v1647[v16 + 1]);
    v16 -= 36;
  }
  while (v16 * 8);
  sub_1002332FC((uint64_t)v569, v569[1]);
  v17 = 72;
  do
  {
    sub_10003E3F0((uint64_t)&v1683[v17], (_QWORD *)v1683[v17 + 1]);
    v17 -= 36;
  }
  while (v17 * 8);
  sub_10003E3F0((uint64_t)v555, v555[1]);
  sub_1002332FC((uint64_t)v585, v585[1]);
  v18 = 72;
  do
  {
    sub_10003E3F0((uint64_t)&v1719[v18], (_QWORD *)v1719[v18 + 1]);
    v18 -= 36;
  }
  while (v18 * 8);
  sub_10003E3F0((uint64_t)v571, v571[1]);
  sub_1002332FC((uint64_t)v601, v601[1]);
  v19 = 72;
  do
  {
    sub_10003E3F0((uint64_t)&v1755[v19], (_QWORD *)v1755[v19 + 1]);
    v19 -= 36;
  }
  while (v19 * 8);
  sub_10003E3F0((uint64_t)v587, v587[1]);
  sub_1002332FC((uint64_t)v617, v617[1]);
  v20 = 72;
  do
  {
    sub_10003E3F0((uint64_t)&v1791[v20], (_QWORD *)v1791[v20 + 1]);
    v20 -= 36;
  }
  while (v20 * 8);
  sub_10003E3F0((uint64_t)v603, v603[1]);
  sub_1002332FC((uint64_t)v633, v633[1]);
  v21 = 72;
  do
  {
    sub_10003E3F0((uint64_t)&v1827[v21], (_QWORD *)v1827[v21 + 1]);
    v21 -= 36;
  }
  while (v21 * 8);
  sub_10003E3F0((uint64_t)v619, v619[1]);
  sub_1002332B0((uint64_t)v840, v840[1]);
  v22 = 320;
  do
  {
    sub_1002332FC((uint64_t)&v2634 + v22 + 8, *(_QWORD **)((char *)&v2635 + v22));
    v22 -= 32;
  }
  while (v22);
  sub_1002332FC((uint64_t)v650, v650[1]);
  sub_10003E3F0((uint64_t)&v1899, v1900[0]);
  sub_10003E3F0((uint64_t)v636, v636[1]);
  sub_1002332FC((uint64_t)v681, v681[1]);
  v23 = 252;
  do
  {
    sub_10003E3F0((uint64_t)&v1900[v23 - 1], v1900[v23]);
    v23 -= 36;
  }
  while (v23 * 8);
  sub_10003E3F0((uint64_t)v652, v652[1]);
  sub_10003E3F0((uint64_t)v667, v667[1]);
  sub_1002332FC((uint64_t)v772, v772[1]);
  v24 = 360;
  do
  {
    sub_10003E3F0((uint64_t)&v2026[v24], (_QWORD *)v2026[v24 + 1]);
    v24 -= 36;
  }
  while (v24 * 8);
  sub_10003E3F0((uint64_t)v683, v683[1]);
  sub_10003E3F0((uint64_t)v698, v698[1]);
  sub_10003E3F0((uint64_t)v713, v713[1]);
  sub_10003E3F0((uint64_t)v728, v728[1]);
  sub_10003E3F0((uint64_t)v743, v743[1]);
  sub_10003E3F0((uint64_t)v758, v758[1]);
  sub_1002332FC((uint64_t)v773, v773[1]);
  v25 = 108;
  do
  {
    sub_10003E3F0((uint64_t)&v2206[v25], (_QWORD *)v2206[v25 + 1]);
    v25 -= 36;
  }
  while (v25 * 8);
  sub_1002332FC((uint64_t)v774, v774[1]);
  v26 = 108;
  do
  {
    sub_10003E3F0((uint64_t)&v2260[v26], (_QWORD *)v2260[v26 + 1]);
    v26 -= 36;
  }
  while (v26 * 8);
  sub_1002332FC((uint64_t)v805, v805[1]);
  v27 = 108;
  do
  {
    sub_10003E3F0((uint64_t)&v2314[v27], (_QWORD *)v2314[v27 + 1]);
    v27 -= 36;
  }
  while (v27 * 8);
  sub_10003E3F0((uint64_t)v776, v776[1]);
  sub_10003E3F0((uint64_t)v791, v791[1]);
  sub_1002332FC((uint64_t)v836, v836[1]);
  v28 = 144;
  do
  {
    sub_10003E3F0((uint64_t)&v2368[v28], (_QWORD *)v2368[v28 + 1]);
    v28 -= 36;
  }
  while (v28 * 8);
  sub_10003E3F0((uint64_t)v807, v807[1]);
  sub_10003E3F0((uint64_t)v822, v822[1]);
  sub_1002332FC((uint64_t)v837, v837[1]);
  v29 = 144;
  do
  {
    sub_10003E3F0((uint64_t)&v2440[v29], (_QWORD *)v2440[v29 + 1]);
    v29 -= 36;
  }
  while (v29 * 8);
  sub_1002332FC((uint64_t)v838, v838[1]);
  v30 = 108;
  do
  {
    sub_10003E3F0((uint64_t)&v2512[v30], (_QWORD *)v2512[v30 + 1]);
    v30 -= 36;
  }
  while (v30 * 8);
  sub_1002332FC((uint64_t)v839, v839[1]);
  v31 = 108;
  do
  {
    sub_10003E3F0((uint64_t)&v2566[v31], (_QWORD *)v2566[v31 + 1]);
    v31 -= 36;
  }
  while (v31 * 8);
  return __cxa_atexit((void (*)(void *))sub_10022EF1C, &unk_10085FC28, (void *)&_mh_execute_header);
}

void sub_10023D06C(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a64;
  uint64_t a65;
  uint64_t a66;
  uint64_t a67;
  uint64_t a70;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t i;
  uint64_t v79;
  uint64_t v80;
  uint64_t j;
  uint64_t v82;
  uint64_t v83;
  uint64_t k;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;

  v77 = 0;
  STACK[0x270] = a1;
  do
  {
    sub_1002332B0(v70 + v77 + 168, *(_QWORD **)(v70 + v77 + 176));
    v77 -= 32;
  }
  while (v77 != -192);
  sub_1002332B0((uint64_t)&STACK[0x2A8], (_QWORD *)STACK[0x2B0]);
  sub_1002332FC(v73, *(_QWORD **)(v75 + 304));
  sub_1002332FC((uint64_t)&STACK[0x290], (_QWORD *)STACK[0x298]);
  sub_10003E3F0(v72, *(_QWORD **)(v75 + 32));
  sub_1002332B0((uint64_t)&STACK[0x9B0], (_QWORD *)STACK[0x9B8]);
  for (i = 0; i != -96; i -= 32)
    sub_1002332FC((uint64_t)&STACK[0x4660] + i + 72, *(_QWORD **)((char *)&STACK[0x4660] + i + 80));
  sub_1002332FC((uint64_t)&STACK[0x3E0], *(_QWORD **)(v74 + 288));
  sub_10003E3F0(v71, (_QWORD *)STACK[0x3FC0]);
  sub_10003E3F0(v76, (_QWORD *)STACK[0x2E0]);
  sub_1002332FC((uint64_t)&STACK[0x630], (_QWORD *)STACK[0x638]);
  v79 = 576;
  do
  {
    sub_10003E3F0((uint64_t)&STACK[0x40C0] + v79 - 264, *(_QWORD **)((char *)&STACK[0x40C0] + v79 - 256));
    v79 -= 288;
  }
  while (v79);
  sub_10003E3F0(a16, (_QWORD *)STACK[0x418]);
  sub_10003E3F0(a17, (_QWORD *)STACK[0x530]);
  sub_1002332FC((uint64_t)&STACK[0x998], (_QWORD *)STACK[0x9A0]);
  v80 = 864;
  do
  {
    sub_10003E3F0((uint64_t)&STACK[0x4300] + v80 - 264, *(_QWORD **)((char *)&STACK[0x4300] + v80 - 256));
    v80 -= 288;
  }
  while (v80);
  sub_10003E3F0(a18, (_QWORD *)STACK[0x668]);
  sub_10003E3F0(a19, (_QWORD *)STACK[0x780]);
  sub_10003E3F0(a20, (_QWORD *)STACK[0x898]);
  sub_1002332B0((uint64_t)&STACK[0x1630], (_QWORD *)STACK[0x1638]);
  for (j = 0; j != -96; j -= 32)
    sub_1002332FC((uint64_t)&STACK[0x5C20] + j + 72, *(_QWORD **)((char *)&STACK[0x5C20] + j + 80));
  sub_1002332FC((uint64_t)&STACK[0x9D0], (_QWORD *)STACK[0x9D8]);
  sub_10003E3F0(STACK[0x200], (_QWORD *)STACK[0x46E0]);
  sub_1002332FC((uint64_t)&STACK[0xF68], (_QWORD *)STACK[0xF70]);
  v82 = 2304;
  do
  {
    sub_10003E3F0((uint64_t)&STACK[0x47E0] + v82 - 264, *(_QWORD **)((char *)&STACK[0x47E0] + v82 - 256));
    v82 -= 288;
  }
  while (v82);
  sub_10003E3F0(a21, (_QWORD *)STACK[0xA08]);
  sub_10003E3F0(a22, (_QWORD *)STACK[0xB20]);
  sub_10003E3F0(a23, (_QWORD *)STACK[0xC38]);
  sub_10003E3F0(a24, (_QWORD *)STACK[0xD50]);
  sub_10003E3F0(a25, (_QWORD *)STACK[0xE68]);
  sub_1002332FC((uint64_t)&STACK[0x1618], (_QWORD *)STACK[0x1620]);
  v83 = 2880;
  do
  {
    sub_10003E3F0((uint64_t)&STACK[0x50E0] + v83 - 264, *(_QWORD **)((char *)&STACK[0x50E0] + v83 - 256));
    v83 -= 288;
  }
  while (v83);
  sub_10003E3F0(a26, (_QWORD *)STACK[0xFA0]);
  sub_10003E3F0(a27, (_QWORD *)STACK[0x10B8]);
  sub_10003E3F0(a28, (_QWORD *)STACK[0x11D0]);
  sub_10003E3F0(a29, (_QWORD *)STACK[0x12E8]);
  sub_10003E3F0(a30, (_QWORD *)STACK[0x1400]);
  sub_10003E3F0(a31, (_QWORD *)STACK[0x1518]);
  sub_1002332B0((uint64_t)&STACK[0x1C00], (_QWORD *)STACK[0x1C08]);
  for (k = 0; k != -64; k -= 32)
    sub_1002332FC((uint64_t)&STACK[0x6220] + k + 40, *(_QWORD **)((char *)&STACK[0x6220] + k + 48));
  sub_1002332FC((uint64_t)&STACK[0x1880], (_QWORD *)STACK[0x1888]);
  v85 = 576;
  do
  {
    sub_10003E3F0((uint64_t)&STACK[0x5C80] + v85 - 264, *(_QWORD **)((char *)&STACK[0x5C80] + v85 - 256));
    v85 -= 288;
  }
  while (v85);
  sub_10003E3F0(a32, (_QWORD *)STACK[0x1668]);
  sub_10003E3F0(a33, (_QWORD *)STACK[0x1780]);
  sub_1002332FC((uint64_t)&STACK[0x1BE8], (_QWORD *)STACK[0x1BF0]);
  v86 = 864;
  do
  {
    sub_10003E3F0((uint64_t)&STACK[0x5EC0] + v86 - 264, *(_QWORD **)((char *)&STACK[0x5EC0] + v86 - 256));
    v86 -= 288;
  }
  while (v86);
  sub_10003E3F0(a34, (_QWORD *)STACK[0x18B8]);
  sub_10003E3F0(a35, (_QWORD *)STACK[0x19D0]);
  sub_10003E3F0(a37, (_QWORD *)STACK[0x1AE8]);
  sub_1002332B0((uint64_t)&STACK[0x2EB8], (_QWORD *)STACK[0x2EC0]);
  v87 = 288;
  do
  {
    sub_1002332FC((uint64_t)&STACK[0x7FA0] + v87 - 24, *(_QWORD **)((char *)&STACK[0x7FA0] + v87 - 16));
    v87 -= 32;
  }
  while (v87);
  sub_1002332FC((uint64_t)&STACK[0x1C20], (_QWORD *)STACK[0x1C28]);
  sub_10003E3F0(a38, (_QWORD *)STACK[0x6280]);
  sub_1002332FC((uint64_t)&STACK[0x1F88], (_QWORD *)STACK[0x1F90]);
  v88 = 864;
  do
  {
    sub_10003E3F0((uint64_t)&STACK[0x6380] + v88 - 264, *(_QWORD **)((char *)&STACK[0x6380] + v88 - 256));
    v88 -= 288;
  }
  while (v88);
  sub_10003E3F0(a39, (_QWORD *)STACK[0x1C58]);
  sub_10003E3F0(a40, (_QWORD *)STACK[0x1D70]);
  sub_10003E3F0(a41, (_QWORD *)STACK[0x1E88]);
  sub_1002332FC((uint64_t)&STACK[0x2868], (_QWORD *)STACK[0x2870]);
  v89 = 2880;
  do
  {
    sub_10003E3F0((uint64_t)&STACK[0x66E0] + v89 - 264, *(_QWORD **)((char *)&STACK[0x66E0] + v89 - 256));
    v89 -= 288;
  }
  while (v89);
  sub_10003E3F0(a42, (_QWORD *)STACK[0x1FC0]);
  sub_10003E3F0(a43, (_QWORD *)STACK[0x20D8]);
  sub_10003E3F0(a44, (_QWORD *)STACK[0x21F0]);
  sub_10003E3F0(a45, (_QWORD *)STACK[0x2308]);
  sub_10003E3F0(a46, (_QWORD *)STACK[0x2420]);
  sub_10003E3F0(a47, (_QWORD *)STACK[0x2538]);
  sub_10003E3F0(a48, (_QWORD *)STACK[0x2650]);
  sub_10003E3F0(a49, (_QWORD *)STACK[0x2768]);
  sub_1002332FC((uint64_t)&STACK[0x2888], (_QWORD *)STACK[0x2890]);
  v90 = 576;
  do
  {
    sub_10003E3F0((uint64_t)&STACK[0x7220] + v90 - 264, *(_QWORD **)((char *)&STACK[0x7220] + v90 - 256));
    v90 -= 288;
  }
  while (v90);
  sub_1002332FC((uint64_t)&STACK[0x29C0], (_QWORD *)STACK[0x29C8]);
  v91 = 576;
  do
  {
    sub_10003E3F0((uint64_t)&STACK[0x7460] + v91 - 264, *(_QWORD **)((char *)&STACK[0x7460] + v91 - 256));
    v91 -= 288;
  }
  while (v91);
  sub_10003E3F0(a50, (_QWORD *)STACK[0x28C0]);
  sub_1002332FC((uint64_t)&STACK[0x2AF8], (_QWORD *)STACK[0x2B00]);
  v92 = 576;
  do
  {
    sub_10003E3F0((uint64_t)&STACK[0x76A0] + v92 - 264, *(_QWORD **)((char *)&STACK[0x76A0] + v92 - 256));
    v92 -= 288;
  }
  while (v92);
  sub_10003E3F0(a51, (_QWORD *)STACK[0x29F8]);
  sub_1002332FC((uint64_t)&STACK[0x2C30], (_QWORD *)STACK[0x2C38]);
  v93 = 576;
  do
  {
    sub_10003E3F0((uint64_t)&STACK[0x78E0] + v93 - 264, *(_QWORD **)((char *)&STACK[0x78E0] + v93 - 256));
    v93 -= 288;
  }
  while (v93);
  sub_10003E3F0(a52, (_QWORD *)STACK[0x2B30]);
  sub_1002332FC((uint64_t)&STACK[0x2D68], (_QWORD *)STACK[0x2D70]);
  v94 = 576;
  do
  {
    sub_10003E3F0((uint64_t)&STACK[0x7B20] + v94 - 264, *(_QWORD **)((char *)&STACK[0x7B20] + v94 - 256));
    v94 -= 288;
  }
  while (v94);
  sub_10003E3F0(a53, (_QWORD *)STACK[0x2C68]);
  sub_1002332FC((uint64_t)&STACK[0x2EA0], (_QWORD *)STACK[0x2EA8]);
  v95 = 576;
  do
  {
    sub_10003E3F0((uint64_t)&STACK[0x7D60] + v95 - 264, *(_QWORD **)((char *)&STACK[0x7D60] + v95 - 256));
    v95 -= 288;
  }
  while (v95);
  sub_10003E3F0(a54, (_QWORD *)STACK[0x2DA0]);
  sub_1002332B0((uint64_t)&STACK[0x3E48], (_QWORD *)STACK[0x3E50]);
  v96 = 320;
  do
  {
    sub_1002332FC((uint64_t)&STACK[0xAEE0] + v96 - 24, *(_QWORD **)((char *)&STACK[0xAEE0] + v96 - 16));
    v96 -= 32;
  }
  while (v96);
  sub_1002332FC((uint64_t)&STACK[0x2FF0], (_QWORD *)STACK[0x2FF8]);
  sub_10003E3F0(a56, (_QWORD *)STACK[0x80E0]);
  sub_10003E3F0(a55, (_QWORD *)STACK[0x2EF0]);
  sub_1002332FC((uint64_t)&STACK[0x3240], (_QWORD *)STACK[0x3248]);
  v97 = 2016;
  do
  {
    sub_10003E3F0((uint64_t)&STACK[0x81E0] + v97 - 264, *(_QWORD **)((char *)&STACK[0x81E0] + v97 - 256));
    v97 -= 288;
  }
  while (v97);
  sub_10003E3F0(a57, (_QWORD *)STACK[0x3028]);
  sub_10003E3F0(a58, (_QWORD *)STACK[0x3140]);
  sub_1002332FC((uint64_t)&STACK[0x38F0], (_QWORD *)STACK[0x38F8]);
  v98 = 2880;
  do
  {
    sub_10003E3F0((uint64_t)&STACK[0x89C0] + v98 - 264, *(_QWORD **)((char *)&STACK[0x89C0] + v98 - 256));
    v98 -= 288;
  }
  while (v98);
  sub_10003E3F0(a59, (_QWORD *)STACK[0x3278]);
  sub_10003E3F0(a60, (_QWORD *)STACK[0x3390]);
  sub_10003E3F0(a61, (_QWORD *)STACK[0x34A8]);
  sub_10003E3F0(a62, (_QWORD *)STACK[0x35C0]);
  sub_10003E3F0(a63, (_QWORD *)STACK[0x36D8]);
  sub_10003E3F0(a64, (_QWORD *)STACK[0x37F0]);
  sub_1002332FC((uint64_t)&STACK[0x3910], (_QWORD *)STACK[0x3918]);
  v99 = 864;
  do
  {
    sub_10003E3F0((uint64_t)&STACK[0x9500] + v99 - 264, *(_QWORD **)((char *)&STACK[0x9500] + v99 - 256));
    v99 -= 288;
  }
  while (v99);
  sub_1002332FC((uint64_t)&STACK[0x3930], (_QWORD *)STACK[0x3938]);
  v100 = 864;
  do
  {
    sub_10003E3F0((uint64_t)&STACK[0x9860] + v100 - 264, *(_QWORD **)((char *)&STACK[0x9860] + v100 - 256));
    v100 -= 288;
  }
  while (v100);
  sub_1002332FC((uint64_t)&STACK[0x3B80], (_QWORD *)STACK[0x3B88]);
  v101 = 864;
  do
  {
    sub_10003E3F0((uint64_t)&STACK[0x9BC0] + v101 - 264, *(_QWORD **)((char *)&STACK[0x9BC0] + v101 - 256));
    v101 -= 288;
  }
  while (v101);
  sub_10003E3F0(a65, (_QWORD *)STACK[0x3968]);
  sub_10003E3F0(a70, (_QWORD *)STACK[0x3A80]);
  sub_1002332FC((uint64_t)&STACK[0x3DD0], (_QWORD *)STACK[0x3DD8]);
  v102 = 1152;
  do
  {
    sub_10003E3F0((uint64_t)&STACK[0x9F20] + v102 - 264, *(_QWORD **)((char *)&STACK[0x9F20] + v102 - 256));
    v102 -= 288;
  }
  while (v102);
  sub_10003E3F0(a66, (_QWORD *)STACK[0x3BB8]);
  sub_10003E3F0(a67, (_QWORD *)STACK[0x3CD0]);
  sub_1002332FC((uint64_t)&STACK[0x3DF0], (_QWORD *)STACK[0x3DF8]);
  v103 = 1152;
  do
  {
    sub_10003E3F0((uint64_t)&STACK[0xA3A0] + v103 - 264, *(_QWORD **)((char *)&STACK[0xA3A0] + v103 - 256));
    v103 -= 288;
  }
  while (v103);
  sub_1002332FC((uint64_t)&STACK[0x3E10], (_QWORD *)STACK[0x3E18]);
  v104 = 864;
  do
  {
    sub_10003E3F0((uint64_t)&STACK[0xA820] + v104 - 264, *(_QWORD **)((char *)&STACK[0xA820] + v104 - 256));
    v104 -= 288;
  }
  while (v104);
  sub_1002332FC((uint64_t)&STACK[0x3E30], (_QWORD *)STACK[0x3E38]);
  v105 = 864;
  do
  {
    sub_10003E3F0((uint64_t)&STACK[0xAB80] + v105 - 264, *(_QWORD **)((char *)&STACK[0xAB80] + v105 - 256));
    v105 -= 288;
  }
  while (v105);
  _Unwind_Resume((_Unwind_Exception *)STACK[0x270]);
}

void sub_10023E1E8(unint64_t a1)
{
  STACK[0x270] = a1;
  JUMPOUT(0x10023D0F4);
}

void sub_10023E1F4(unint64_t a1)
{
  STACK[0x270] = a1;
  JUMPOUT(0x10023D0F8);
}

void sub_10023E200(unint64_t a1)
{
  STACK[0x270] = a1;
  JUMPOUT(0x10023D108);
}

void sub_10023E20C(unint64_t a1)
{
  STACK[0x270] = a1;
  JUMPOUT(0x10023D134);
}

void sub_10023E21C(unint64_t a1)
{
  STACK[0x270] = a1;
  JUMPOUT(0x10023D140);
}

void sub_10023E22C(unint64_t a1)
{
  STACK[0x270] = a1;
  JUMPOUT(0x10023D154);
}

void sub_10023E23C(unint64_t a1)
{
  STACK[0x270] = a1;
  JUMPOUT(0x10023D160);
}

void sub_10023E24C(unint64_t a1)
{
  STACK[0x270] = a1;
  JUMPOUT(0x10023D16CLL);
}

void sub_10023E25C(unint64_t a1)
{
  STACK[0x270] = a1;
  JUMPOUT(0x10023D17CLL);
}

void sub_10023E26C(unint64_t a1)
{
  STACK[0x270] = a1;
  JUMPOUT(0x10023D1A4);
}

void sub_10023E280(unint64_t a1)
{
  STACK[0x270] = a1;
  JUMPOUT(0x10023D1B4);
}

void sub_10023E294(unint64_t a1)
{
  STACK[0x270] = a1;
  JUMPOUT(0x10023D1C0);
}

void sub_10023E2B0(unint64_t a1)
{
  STACK[0x270] = a1;
  JUMPOUT(0x10023D210);
}

void sub_10023E2C0(unint64_t a1)
{
  STACK[0x270] = a1;
  JUMPOUT(0x10023D210);
}

void sub_10023E2D8(unint64_t a1)
{
  STACK[0x270] = a1;
  JUMPOUT(0x10023D220);
}

void sub_10023E2F0(unint64_t a1)
{
  STACK[0x270] = a1;
  JUMPOUT(0x10023D248);
}

void sub_10023E30C(unint64_t a1)
{
  STACK[0x270] = a1;
  JUMPOUT(0x10023D258);
}

void sub_10023E328(unint64_t a1)
{
  STACK[0x270] = a1;
  JUMPOUT(0x10023D264);
}

void sub_10023E344(unint64_t a1)
{
  STACK[0x270] = a1;
  JUMPOUT(0x10023D274);
}

void sub_10023E370(unint64_t a1)
{
  STACK[0x270] = a1;
  JUMPOUT(0x10023D2F8);
}

void sub_10023E380(unint64_t a1)
{
  STACK[0x270] = a1;
  JUMPOUT(0x10023D310);
}

void sub_10023E38C(unint64_t a1)
{
  STACK[0x270] = a1;
  JUMPOUT(0x10023D33CLL);
}

void sub_10023E39C(unint64_t a1)
{
  STACK[0x270] = a1;
  JUMPOUT(0x10023D34CLL);
}

void sub_10023E3AC(unint64_t a1)
{
  STACK[0x270] = a1;
  JUMPOUT(0x10023D360);
}

void sub_10023E3BC(unint64_t a1)
{
  STACK[0x270] = a1;
  JUMPOUT(0x10023D36CLL);
}

void sub_10023E3CC(unint64_t a1)
{
  STACK[0x270] = a1;
  JUMPOUT(0x10023D37CLL);
}

void sub_10023E3DC(unint64_t a1)
{
  STACK[0x270] = a1;
  JUMPOUT(0x10023D3A0);
}

void sub_10023E3F8(unint64_t a1)
{
  STACK[0x270] = a1;
  JUMPOUT(0x10023D3B0);
}

void sub_10023E414(unint64_t a1)
{
  STACK[0x270] = a1;
  JUMPOUT(0x10023D3C0);
}

void sub_10023E434(unint64_t a1)
{
  STACK[0x270] = a1;
  JUMPOUT(0x10023D3D0);
}

void sub_10023E450(unint64_t a1)
{
  STACK[0x270] = a1;
  JUMPOUT(0x10023D3E0);
}

void sub_10023E474(unint64_t a1)
{
  STACK[0x270] = a1;
  JUMPOUT(0x10023D3F0);
}

void sub_10023E488(unint64_t a1)
{
  STACK[0x270] = a1;
  JUMPOUT(0x10023D438);
}

void sub_10023E498(unint64_t a1)
{
  STACK[0x270] = a1;
  JUMPOUT(0x10023D438);
}

void sub_10023E4B0(unint64_t a1)
{
  STACK[0x270] = a1;
  JUMPOUT(0x10023D450);
}

void sub_10023E4C8(unint64_t a1)
{
  STACK[0x270] = a1;
  JUMPOUT(0x10023D474);
}

void sub_10023E4E8(unint64_t a1)
{
  STACK[0x270] = a1;
  JUMPOUT(0x10023D484);
}

void sub_10023E50C(unint64_t a1)
{
  STACK[0x270] = a1;
  JUMPOUT(0x10023D498);
}

void sub_10023E530(unint64_t a1)
{
  STACK[0x270] = a1;
  JUMPOUT(0x10023D4ACLL);
}

void sub_10023E554(unint64_t a1)
{
  STACK[0x270] = a1;
  JUMPOUT(0x10023D4C0);
}

void sub_10023E574(unint64_t a1)
{
  STACK[0x270] = a1;
  JUMPOUT(0x10023D4D4);
}

void sub_10023E594(unint64_t a1)
{
  STACK[0x270] = a1;
  JUMPOUT(0x10023D4E8);
}

void sub_10023E5BC(unint64_t a1)
{
  STACK[0x270] = a1;
  JUMPOUT(0x10023D564);
}

void sub_10023E5CC(unint64_t a1)
{
  STACK[0x270] = a1;
  JUMPOUT(0x10023D57CLL);
}

void sub_10023E5D8(unint64_t a1)
{
  STACK[0x270] = a1;
  JUMPOUT(0x10023D5A8);
}

void sub_10023E5E8(unint64_t a1)
{
  STACK[0x270] = a1;
  JUMPOUT(0x10023D5C0);
}

void sub_10023E5F8(unint64_t a1)
{
  STACK[0x270] = a1;
  JUMPOUT(0x10023D5E4);
}

void sub_10023E60C(unint64_t a1)
{
  STACK[0x270] = a1;
  JUMPOUT(0x10023D5F8);
}

void sub_10023E620(unint64_t a1)
{
  STACK[0x270] = a1;
  JUMPOUT(0x10023D604);
}

void sub_10023E63C(unint64_t a1)
{
  STACK[0x270] = a1;
  JUMPOUT(0x10023D658);
}

void sub_10023E64C(unint64_t a1)
{
  STACK[0x270] = a1;
  JUMPOUT(0x10023D664);
}

void sub_10023E664(unint64_t a1)
{
  STACK[0x270] = a1;
  JUMPOUT(0x10023D67CLL);
}

void sub_10023E67C(unint64_t a1)
{
  STACK[0x270] = a1;
  JUMPOUT(0x10023D6A0);
}

void sub_10023E698(unint64_t a1)
{
  STACK[0x270] = a1;
  JUMPOUT(0x10023D6B4);
}

void sub_10023E6B4(unint64_t a1)
{
  STACK[0x270] = a1;
  JUMPOUT(0x10023D6C0);
}

void sub_10023E6D0(unint64_t a1)
{
  STACK[0x270] = a1;
  JUMPOUT(0x10023D6D4);
}

void sub_10023E700(unint64_t a1)
{
  STACK[0x270] = a1;
  JUMPOUT(0x10023D75CLL);
}

void sub_10023E710(unint64_t a1)
{
  STACK[0x270] = a1;
  JUMPOUT(0x10023D774);
}

void sub_10023E71C(unint64_t a1)
{
  STACK[0x270] = a1;
  JUMPOUT(0x10023D79CLL);
}

void sub_10023E72C(unint64_t a1)
{
  STACK[0x270] = a1;
  JUMPOUT(0x10023D7B4);
}

void sub_10023E73C(unint64_t a1)
{
  STACK[0x270] = a1;
  JUMPOUT(0x10023D7C8);
}

void sub_10023E74C(unint64_t a1)
{
  STACK[0x270] = a1;
  JUMPOUT(0x10023D7D4);
}

void sub_10023E75C(unint64_t a1)
{
  STACK[0x270] = a1;
  JUMPOUT(0x10023D7ECLL);
}

void sub_10023E76C(unint64_t a1)
{
  STACK[0x270] = a1;
  JUMPOUT(0x10023D810);
}

void sub_10023E780(unint64_t a1)
{
  STACK[0x270] = a1;
  JUMPOUT(0x10023D824);
}

void sub_10023E794(unint64_t a1)
{
  STACK[0x270] = a1;
  JUMPOUT(0x10023D830);
}

void sub_10023E7A8(unint64_t a1)
{
  STACK[0x270] = a1;
  JUMPOUT(0x10023D844);
}

void sub_10023E7C8(unint64_t a1)
{
  STACK[0x270] = a1;
  JUMPOUT(0x10023D898);
}

void sub_10023E7D8(unint64_t a1)
{
  STACK[0x270] = a1;
  JUMPOUT(0x10023D898);
}

void sub_10023E7E8(unint64_t a1)
{
  STACK[0x270] = a1;
  JUMPOUT(0x10023D8B0);
}

void sub_10023E7F8(unint64_t a1)
{
  STACK[0x270] = a1;
  JUMPOUT(0x10023D8D4);
}

void sub_10023E814(unint64_t a1)
{
  STACK[0x270] = a1;
  JUMPOUT(0x10023D8E8);
}

void sub_10023E830(unint64_t a1)
{
  STACK[0x270] = a1;
  JUMPOUT(0x10023D8FCLL);
}

void sub_10023E850(unint64_t a1)
{
  STACK[0x270] = a1;
  JUMPOUT(0x10023D910);
}

void sub_10023E870(unint64_t a1)
{
  STACK[0x270] = a1;
  JUMPOUT(0x10023D924);
}

void sub_10023E888(unint64_t a1)
{
  STACK[0x270] = a1;
  JUMPOUT(0x10023D938);
}

void sub_10023E8AC(unint64_t a1)
{
  STACK[0x270] = a1;
  JUMPOUT(0x10023D94CLL);
}

void sub_10023E8C4(unint64_t a1)
{
  STACK[0x270] = a1;
  JUMPOUT(0x10023D960);
}

void sub_10023E8EC(unint64_t a1)
{
  STACK[0x270] = a1;
  JUMPOUT(0x10023D9BCLL);
}

void sub_10023E900(unint64_t a1)
{
  STACK[0x270] = a1;
  JUMPOUT(0x10023D9D4);
}

void sub_10023E910(unint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_10003E3F0(v1, *(_QWORD **)(v2 + 32));
  STACK[0x270] = a1;
  JUMPOUT(0x10023D9F8);
}

void sub_10023E930(unint64_t a1)
{
  STACK[0x270] = a1;
  JUMPOUT(0x10023D9F8);
}

void sub_10023E940(unint64_t a1)
{
  STACK[0x270] = a1;
  JUMPOUT(0x10023D9F8);
}

void sub_10023E950(unint64_t a1)
{
  STACK[0x270] = a1;
  JUMPOUT(0x10023DA10);
}

void sub_10023E960(unint64_t a1)
{
  STACK[0x270] = a1;
  JUMPOUT(0x10023DA34);
}

void sub_10023E988(unint64_t a1)
{
  STACK[0x270] = a1;
  JUMPOUT(0x10023DA90);
}

void sub_10023E998(unint64_t a1)
{
  STACK[0x270] = a1;
  JUMPOUT(0x10023DA90);
}

void sub_10023E9A8(unint64_t a1)
{
  STACK[0x270] = a1;
  JUMPOUT(0x10023DAA8);
}

void sub_10023E9B8(unint64_t a1)
{
  STACK[0x270] = a1;
  JUMPOUT(0x10023DACCLL);
}

void sub_10023E9E0(unint64_t a1)
{
  STACK[0x270] = a1;
  JUMPOUT(0x10023DB28);
}

void sub_10023E9F0(unint64_t a1)
{
  STACK[0x270] = a1;
  JUMPOUT(0x10023DB28);
}

void sub_10023EA00(unint64_t a1)
{
  STACK[0x270] = a1;
  JUMPOUT(0x10023DB48);
}

void sub_10023EA14(unint64_t a1)
{
  STACK[0x270] = a1;
  JUMPOUT(0x10023DB6CLL);
}

void sub_10023EA3C(unint64_t a1)
{
  STACK[0x270] = a1;
  JUMPOUT(0x10023DBC4);
}

void sub_10023EA4C(unint64_t a1)
{
  STACK[0x270] = a1;
  JUMPOUT(0x10023DBC4);
}

void sub_10023EA5C(unint64_t a1)
{
  STACK[0x270] = a1;
  JUMPOUT(0x10023DBE0);
}

void sub_10023EA70(unint64_t a1)
{
  STACK[0x270] = a1;
  JUMPOUT(0x10023DC04);
}

void sub_10023EA88(unint64_t a1)
{
  STACK[0x270] = a1;
  JUMPOUT(0x10023DC04);
}

void sub_10023EAA4(unint64_t a1)
{
  STACK[0x270] = a1;
  JUMPOUT(0x10023DC60);
}

void sub_10023EAB8(unint64_t a1)
{
  STACK[0x270] = a1;
  JUMPOUT(0x10023DC60);
}

void sub_10023EAD0(unint64_t a1)
{
  STACK[0x270] = a1;
  JUMPOUT(0x10023DC78);
}

void sub_10023EAE8(unint64_t a1)
{
  STACK[0x270] = a1;
  JUMPOUT(0x10023DC9CLL);
}

void sub_10023EB1C(unint64_t a1)
{
  STACK[0x270] = a1;
  JUMPOUT(0x10023DD50);
}

void sub_10023EB50(unint64_t a1)
{
  STACK[0x270] = a1;
  JUMPOUT(0x10023DD60);
}

void sub_10023EB6C(unint64_t a1)
{
  STACK[0x270] = a1;
  JUMPOUT(0x10023DD88);
}

void sub_10023EB8C(unint64_t a1)
{
  STACK[0x270] = a1;
  JUMPOUT(0x10023DDA4);
}

void sub_10023EBAC(unint64_t a1)
{
  STACK[0x270] = a1;
  JUMPOUT(0x10023DDB0);
}

void sub_10023EBCC(unint64_t a1)
{
  STACK[0x270] = a1;
  JUMPOUT(0x10023DDC4);
}

void sub_10023EBEC(unint64_t a1)
{
  STACK[0x270] = a1;
  JUMPOUT(0x10023DDCCLL);
}

void sub_10023EC10(unint64_t a1)
{
  STACK[0x270] = a1;
  JUMPOUT(0x10023DDDCLL);
}

void sub_10023EC34(unint64_t a1)
{
  STACK[0x270] = a1;
  JUMPOUT(0x10023DE00);
}

void sub_10023EC5C(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
  uint64_t v58;

  STACK[0x270] = a1;
  sub_10003E3F0(a58, *(_QWORD **)(v58 + 24));
  JUMPOUT(0x10023DE24);
}

void sub_10023ECCC(unint64_t a1)
{
  STACK[0x270] = a1;
  JUMPOUT(0x10023ECDCLL);
}

void sub_10023ECF8(unint64_t a1)
{
  STACK[0x270] = a1;
  JUMPOUT(0x10023DE50);
}

void sub_10023ED30(unint64_t a1)
{
  STACK[0x270] = a1;
  JUMPOUT(0x10023DE60);
}

void sub_10023ED50(unint64_t a1)
{
  STACK[0x270] = a1;
  JUMPOUT(0x10023DE84);
}

void sub_10023ED74(unint64_t a1)
{
  STACK[0x270] = a1;
  JUMPOUT(0x10023DE98);
}

void sub_10023ED9C(unint64_t a1)
{
  STACK[0x270] = a1;
  JUMPOUT(0x10023DE98);
}

void sub_10023EDC0(unint64_t a1)
{
  STACK[0x270] = a1;
  JUMPOUT(0x10023DEACLL);
}

void sub_10023EDE8(unint64_t a1)
{
  STACK[0x270] = a1;
  JUMPOUT(0x10023DEACLL);
}

void sub_10023EE14(unint64_t a1)
{
  STACK[0x270] = a1;
  JUMPOUT(0x10023DEC0);
}

void sub_10023EE3C(unint64_t a1)
{
  STACK[0x270] = a1;
  JUMPOUT(0x10023DEC0);
}

void sub_10023EE60(unint64_t a1)
{
  STACK[0x270] = a1;
  JUMPOUT(0x10023DEC4);
}

void sub_10023EE8C(unint64_t a1)
{
  STACK[0x270] = a1;
  JUMPOUT(0x10023DED4);
}

void sub_10023EEB4(unint64_t a1)
{
  STACK[0x270] = a1;
  JUMPOUT(0x10023DED4);
}

void sub_10023EED8(unint64_t a1)
{
  STACK[0x270] = a1;
  JUMPOUT(0x10023DEE8);
}

void sub_10023EF00(unint64_t a1)
{
  STACK[0x270] = a1;
  JUMPOUT(0x10023DEF4);
}

void sub_10023EF24(unint64_t a1)
{
  STACK[0x270] = a1;
  JUMPOUT(0x10023DF3CLL);
}

void sub_10023EF64(unint64_t a1)
{
  STACK[0x270] = a1;
  JUMPOUT(0x10023DF50);
}

void sub_10023EF90(unint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t *v3;

  STACK[0x270] = a1;
  v2 = v1 - 264;
  do
  {
    sub_10003E3F0(v2, *(_QWORD **)(v2 + 8));
    v3 = (unint64_t *)(v2 - 24);
    v2 -= 288;
  }
  while (v3 != &STACK[0x9500]);
  JUMPOUT(0x10023DF74);
}

void sub_10023F008(unint64_t a1)
{
  STACK[0x270] = a1;
  JUMPOUT(0x10023DF84);
}

void sub_10023F02C(unint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t *v3;

  STACK[0x270] = a1;
  v2 = v1 - 264;
  do
  {
    sub_10003E3F0(v2, *(_QWORD **)(v2 + 8));
    v3 = (unint64_t *)(v2 - 24);
    v2 -= 288;
  }
  while (v3 != &STACK[0x9860]);
  JUMPOUT(0x10023DFA8);
}

void sub_10023F094(unint64_t a1)
{
  STACK[0x270] = a1;
  JUMPOUT(0x10023DFA8);
}

void sub_10023F0B0(unint64_t a1)
{
  STACK[0x270] = a1;
  JUMPOUT(0x10023DFC0);
}

void sub_10023F0C8(unint64_t a1)
{
  STACK[0x270] = a1;
  JUMPOUT(0x10023DFE4);
}

void sub_10023F0E8(unint64_t a1)
{
  STACK[0x270] = a1;
  JUMPOUT(0x10023DFF8);
}

void sub_10023F128(unint64_t a1)
{
  STACK[0x270] = a1;
  JUMPOUT(0x10023DFF8);
}

void sub_10023F14C(unint64_t a1)
{
  STACK[0x270] = a1;
  JUMPOUT(0x10023E054);
}

void sub_10023F164(unint64_t a1)
{
  STACK[0x270] = a1;
  JUMPOUT(0x10023E054);
}

void sub_10023F17C(unint64_t a1)
{
  STACK[0x270] = a1;
  JUMPOUT(0x10023E068);
}

void sub_10023F194(unint64_t a1)
{
  STACK[0x270] = a1;
  JUMPOUT(0x10023E08CLL);
}

void sub_10023F1B0(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a67;
  uint64_t v67;

  STACK[0x270] = a1;
  sub_10003E3F0(a67, *(_QWORD **)(v67 + 24));
  JUMPOUT(0x10023E0B0);
}

void sub_10023F1F4(unint64_t a1)
{
  STACK[0x270] = a1;
  JUMPOUT(0x10023E0DCLL);
}

void sub_10023F20C(unint64_t a1)
{
  STACK[0x270] = a1;
  JUMPOUT(0x10023E0DCLL);
}

void sub_10023F224(unint64_t a1)
{
  STACK[0x270] = a1;
  JUMPOUT(0x10023E0ECLL);
}

void sub_10023F23C(unint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t *v3;

  STACK[0x270] = a1;
  v2 = v1 - 264;
  do
  {
    sub_10003E3F0(v2, *(_QWORD **)(v2 + 8));
    v3 = (unint64_t *)(v2 - 24);
    v2 -= 288;
  }
  while (v3 != &STACK[0xA3A0]);
  JUMPOUT(0x10023E110);
}

void sub_10023F28C(unint64_t a1)
{
  STACK[0x270] = a1;
  JUMPOUT(0x10023E110);
}

void sub_10023F2A4(unint64_t a1)
{
  STACK[0x270] = a1;
  JUMPOUT(0x10023E110);
}

void sub_10023F2BC(unint64_t a1)
{
  STACK[0x270] = a1;
  JUMPOUT(0x10023E120);
}

void sub_10023F2D4(unint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t *v3;

  STACK[0x270] = a1;
  v2 = v1 - 264;
  do
  {
    sub_10003E3F0(v2, *(_QWORD **)(v2 + 8));
    v3 = (unint64_t *)(v2 - 24);
    v2 -= 288;
  }
  while (v3 != &STACK[0xA820]);
  JUMPOUT(0x10023E144);
}

void sub_10023F320(unint64_t a1)
{
  STACK[0x270] = a1;
  JUMPOUT(0x10023E144);
}

void sub_10023F338(unint64_t a1)
{
  STACK[0x270] = a1;
  JUMPOUT(0x10023E144);
}

void sub_10023F358(unint64_t a1)
{
  STACK[0x270] = a1;
  JUMPOUT(0x10023E154);
}

void sub_10023F378(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t *v4;

  v3 = v1 - 264;
  do
  {
    sub_10003E3F0(v3, *(_QWORD **)(v3 + 8));
    v4 = (unint64_t *)(v3 - 24);
    v3 -= 288;
  }
  while (v4 != &STACK[0xAB80]);
  _Unwind_Resume(a1);
}

uint64_t sub_10023F3B4()
{
  uint64_t i;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v10;
  __int128 v11;
  _QWORD *v12[3];
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _OWORD v19[2];
  __int128 v20;
  __int128 v21;
  _OWORD v22[2];
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _BYTE v26[8];
  _QWORD *v27;
  __int128 v28;
  _QWORD *v29[3];
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  _OWORD v36[2];
  __int128 v37;
  __int128 v38;
  _OWORD v39[2];
  __int128 v40;
  __int128 v41;
  __int128 v42;
  _BYTE v43[8];
  _QWORD *v44;
  __int128 v45;
  _QWORD *v46[3];
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  _OWORD v53[2];
  __int128 v54;
  __int128 v55;
  _OWORD v56[2];
  __int128 v57;
  __int128 v58;
  __int128 v59;
  _BYTE v60[8];
  _QWORD *v61;
  __int128 v62;
  _QWORD *v63[3];
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  _OWORD v70[2];
  __int128 v71;
  __int128 v72;
  _OWORD v73[2];
  __int128 v74;
  __int128 v75;
  __int128 v76;
  _BYTE v77[8];
  _QWORD *v78;
  __int128 v79;
  _QWORD *v80[3];
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  _OWORD v87[2];
  __int128 v88;
  __int128 v89;
  _OWORD v90[2];
  __int128 v91;
  __int128 v92;
  __int128 v93;
  _BYTE v94[8];
  _QWORD *v95;
  __int128 v96;
  _QWORD *v97[3];
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  _OWORD v104[2];
  __int128 v105;
  __int128 v106;
  _OWORD v107[2];
  __int128 v108;
  __int128 v109;
  __int128 v110;
  _BYTE v111[8];
  _QWORD *v112;
  __int128 v113;
  _QWORD *v114[3];
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  _OWORD v121[2];
  __int128 v122;
  __int128 v123;
  _OWORD v124[2];
  __int128 v125;
  __int128 v126;
  __int128 v127;
  _BYTE v128[8];
  _QWORD *v129;
  __int128 v130;
  _QWORD *v131[3];
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  _OWORD v138[2];
  __int128 v139;
  __int128 v140;
  _OWORD v141[2];
  __int128 v142;
  __int128 v143;
  __int128 v144;
  _BYTE v145[8];
  _QWORD *v146;
  __int128 v147;
  _QWORD *v148[3];
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  _OWORD v155[2];
  __int128 v156;
  __int128 v157;
  _OWORD v158[2];
  __int128 v159;
  __int128 v160;
  __int128 v161;
  _BYTE v162[8];
  _QWORD *v163;
  __int128 v164;
  _QWORD *v165[3];
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  _OWORD v172[2];
  __int128 v173;
  __int128 v174;
  _OWORD v175[2];
  __int128 v176;
  __int128 v177;
  __int128 v178;
  _BYTE v179[8];
  _QWORD *v180;
  __int128 v181;
  _QWORD *v182[3];
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  _OWORD v189[2];
  __int128 v190;
  __int128 v191;
  _OWORD v192[2];
  __int128 v193;
  __int128 v194;
  __int128 v195;
  _BYTE v196[8];
  _QWORD *v197;
  __int128 v198;
  _QWORD *v199[3];
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  _OWORD v206[2];
  __int128 v207;
  __int128 v208;
  _OWORD v209[2];
  __int128 v210;
  __int128 v211;
  __int128 v212;
  _QWORD *v213[4];
  __int128 v214;
  _QWORD *v215[3];
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  _OWORD v222[2];
  __int128 v223;
  __int128 v224;
  _OWORD v225[2];
  __int128 v226;
  __int128 v227;
  __int128 v228;
  _QWORD *v229[4];
  __int128 v230;
  _QWORD *v231[3];
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  _OWORD v238[2];
  __int128 v239;
  __int128 v240;
  _OWORD v241[2];
  __int128 v242;
  __int128 v243;
  __int128 v244;
  _QWORD *v245[4];
  __int128 v246;
  _QWORD *v247[3];
  __int128 v248;
  __int128 v249;
  __int128 v250;
  __int128 v251;
  __int128 v252;
  __int128 v253;
  _OWORD v254[2];
  __int128 v255;
  __int128 v256;
  _OWORD v257[2];
  __int128 v258;
  __int128 v259;
  __int128 v260;
  _QWORD *v261[4];
  __int128 v262;
  _QWORD *v263[3];
  __int128 v264;
  __int128 v265;
  __int128 v266;
  __int128 v267;
  __int128 v268;
  __int128 v269;
  _OWORD v270[2];
  __int128 v271;
  __int128 v272;
  _OWORD v273[2];
  __int128 v274;
  __int128 v275;
  __int128 v276;
  _QWORD *v277[4];
  __int128 v278;
  _QWORD *v279[3];
  __int128 v280;
  __int128 v281;
  __int128 v282;
  __int128 v283;
  __int128 v284;
  __int128 v285;
  _OWORD v286[2];
  __int128 v287;
  __int128 v288;
  _OWORD v289[2];
  __int128 v290;
  __int128 v291;
  __int128 v292;
  _QWORD *v293[4];
  __int128 v294;
  _QWORD *v295[3];
  __int128 v296;
  __int128 v297;
  __int128 v298;
  __int128 v299;
  __int128 v300;
  __int128 v301;
  _OWORD v302[2];
  __int128 v303;
  __int128 v304;
  _OWORD v305[2];
  __int128 v306;
  __int128 v307;
  __int128 v308;
  _QWORD *v309[3];
  const void **v310[4];
  __int128 v311;
  _QWORD *v312[3];
  __int128 v313;
  __int128 v314;
  __int128 v315;
  __int128 v316;
  __int128 v317;
  __int128 v318;
  _OWORD v319[2];
  __int128 v320;
  __int128 v321;
  _OWORD v322[2];
  __int128 v323;
  __int128 v324;
  __int128 v325;
  _QWORD *v326[4];
  __int128 v327;
  _QWORD *v328[3];
  __int128 v329;
  __int128 v330;
  __int128 v331;
  __int128 v332;
  __int128 v333;
  __int128 v334;
  _OWORD v335[2];
  __int128 v336;
  __int128 v337;
  _OWORD v338[2];
  __int128 v339;
  __int128 v340;
  __int128 v341;
  _QWORD *v342[4];
  __int128 v343;
  _QWORD *v344[3];
  __int128 v345;
  __int128 v346;
  __int128 v347;
  __int128 v348;
  __int128 v349;
  __int128 v350;
  _OWORD v351[2];
  __int128 v352;
  __int128 v353;
  _OWORD v354[2];
  __int128 v355;
  __int128 v356;
  __int128 v357;
  _QWORD *v358[4];
  __int128 v359;
  _QWORD *v360[3];
  __int128 v361;
  __int128 v362;
  __int128 v363;
  __int128 v364;
  __int128 v365;
  __int128 v366;
  _OWORD v367[2];
  __int128 v368;
  __int128 v369;
  _OWORD v370[2];
  __int128 v371;
  __int128 v372;
  __int128 v373;
  _QWORD *v374[4];
  __int128 v375;
  _QWORD *v376[3];
  __int128 v377;
  __int128 v378;
  __int128 v379;
  __int128 v380;
  __int128 v381;
  __int128 v382;
  _OWORD v383[2];
  __int128 v384;
  __int128 v385;
  _OWORD v386[2];
  __int128 v387;
  __int128 v388;
  __int128 v389;
  _QWORD *v390[4];
  __int128 v391;
  _QWORD *v392[3];
  __int128 v393;
  __int128 v394;
  __int128 v395;
  __int128 v396;
  __int128 v397;
  __int128 v398;
  _OWORD v399[2];
  __int128 v400;
  __int128 v401;
  _OWORD v402[2];
  __int128 v403;
  __int128 v404;
  __int128 v405;
  _QWORD *v406[4];
  __int128 v407;
  _QWORD *v408[3];
  __int128 v409;
  __int128 v410;
  __int128 v411;
  __int128 v412;
  __int128 v413;
  __int128 v414;
  _OWORD v415[2];
  __int128 v416;
  __int128 v417;
  _OWORD v418[2];
  __int128 v419;
  __int128 v420;
  __int128 v421;
  _QWORD *v422[4];
  __int128 v423;
  _QWORD *v424[3];
  __int128 v425;
  __int128 v426;
  __int128 v427;
  __int128 v428;
  __int128 v429;
  __int128 v430;
  _OWORD v431[2];
  __int128 v432;
  __int128 v433;
  _OWORD v434[2];
  __int128 v435;
  __int128 v436;
  __int128 v437;
  _QWORD *v438[4];
  __int128 v439;
  _QWORD *v440[3];
  __int128 v441;
  __int128 v442;
  __int128 v443;
  __int128 v444;
  __int128 v445;
  __int128 v446;
  _OWORD v447[2];
  __int128 v448;
  __int128 v449;
  _OWORD v450[2];
  __int128 v451;
  __int128 v452;
  __int128 v453;
  _QWORD *v454[3];
  const void **v455[4];
  __int128 v456;
  _QWORD *v457[3];
  __int128 v458;
  __int128 v459;
  __int128 v460;
  __int128 v461;
  __int128 v462;
  __int128 v463;
  _OWORD v464[2];
  __int128 v465;
  __int128 v466;
  _OWORD v467[2];
  __int128 v468;
  __int128 v469;
  __int128 v470;
  _QWORD *v471[4];
  __int128 v472;
  _QWORD *v473[3];
  __int128 v474;
  __int128 v475;
  __int128 v476;
  __int128 v477;
  __int128 v478;
  __int128 v479;
  _OWORD v480[2];
  __int128 v481;
  __int128 v482;
  _OWORD v483[2];
  __int128 v484;
  __int128 v485;
  __int128 v486;
  _QWORD *v487[4];
  __int128 v488;
  _QWORD *v489[3];
  __int128 v490;
  __int128 v491;
  __int128 v492;
  __int128 v493;
  __int128 v494;
  __int128 v495;
  _OWORD v496[2];
  __int128 v497;
  __int128 v498;
  _OWORD v499[2];
  __int128 v500;
  __int128 v501;
  __int128 v502;
  _QWORD *v503[4];
  __int128 v504;
  _QWORD *v505[3];
  __int128 v506;
  __int128 v507;
  __int128 v508;
  __int128 v509;
  __int128 v510;
  __int128 v511;
  _OWORD v512[2];
  __int128 v513;
  __int128 v514;
  _OWORD v515[2];
  __int128 v516;
  __int128 v517;
  __int128 v518;
  _QWORD *v519[4];
  __int128 v520;
  _QWORD *v521[3];
  __int128 v522;
  __int128 v523;
  __int128 v524;
  __int128 v525;
  __int128 v526;
  __int128 v527;
  _OWORD v528[2];
  __int128 v529;
  __int128 v530;
  _OWORD v531[2];
  __int128 v532;
  __int128 v533;
  __int128 v534;
  _QWORD *v535[4];
  __int128 v536;
  _QWORD *v537[3];
  __int128 v538;
  __int128 v539;
  __int128 v540;
  __int128 v541;
  __int128 v542;
  __int128 v543;
  _OWORD v544[2];
  __int128 v545;
  __int128 v546;
  _OWORD v547[2];
  __int128 v548;
  __int128 v549;
  __int128 v550;
  _QWORD *v551[4];
  __int128 v552;
  _QWORD *v553[3];
  __int128 v554;
  __int128 v555;
  __int128 v556;
  __int128 v557;
  __int128 v558;
  __int128 v559;
  _OWORD v560[2];
  __int128 v561;
  __int128 v562;
  _OWORD v563[2];
  __int128 v564;
  __int128 v565;
  __int128 v566;
  _QWORD *v567[4];
  __int128 v568;
  _QWORD *v569[3];
  __int128 v570;
  __int128 v571;
  __int128 v572;
  __int128 v573;
  __int128 v574;
  __int128 v575;
  _OWORD v576[2];
  __int128 v577;
  __int128 v578;
  _OWORD v579[2];
  __int128 v580;
  __int128 v581;
  __int128 v582;
  _QWORD *v583[3];
  const void **v584[3];
  double v585;
  double v586;
  __int128 v587;
  uint64_t v588[3];
  __int128 v589;
  __int128 v590;
  __int128 v591;
  __int128 v592;
  __int128 v593;
  __int128 v594;
  __int128 v595;
  __int128 v596;
  __int128 v597;
  __int128 v598;
  __int128 v599;
  __int128 v600;
  __int128 v601;
  __int128 v602;
  __int128 v603;
  double v604;
  __int128 v605;
  uint64_t v606[3];
  __int128 v607;
  __int128 v608;
  __int128 v609;
  __int128 v610;
  __int128 v611;
  __int128 v612;
  __int128 v613;
  __int128 v614;
  __int128 v615;
  __int128 v616;
  __int128 v617;
  __int128 v618;
  __int128 v619;
  __int128 v620;
  __int128 v621;
  double v622;
  __int128 v623;
  uint64_t v624[3];
  __int128 v625;
  __int128 v626;
  __int128 v627;
  __int128 v628;
  __int128 v629;
  __int128 v630;
  __int128 v631;
  __int128 v632;
  __int128 v633;
  __int128 v634;
  __int128 v635;
  __int128 v636;
  __int128 v637;
  __int128 v638;
  __int128 v639;
  double v640;
  __int128 v641;
  uint64_t v642[3];
  __int128 v643;
  __int128 v644;
  __int128 v645;
  __int128 v646;
  __int128 v647;
  __int128 v648;
  __int128 v649;
  __int128 v650;
  __int128 v651;
  __int128 v652;
  __int128 v653;
  __int128 v654;
  __int128 v655;
  __int128 v656;
  __int128 v657;
  double v658;
  __int128 v659;
  uint64_t v660[3];
  __int128 v661;
  __int128 v662;
  __int128 v663;
  __int128 v664;
  __int128 v665;
  __int128 v666;
  __int128 v667;
  __int128 v668;
  __int128 v669;
  __int128 v670;
  __int128 v671;
  __int128 v672;
  __int128 v673;
  __int128 v674;
  __int128 v675;
  double v676;
  __int128 v677;
  uint64_t v678[3];
  __int128 v679;
  __int128 v680;
  __int128 v681;
  __int128 v682;
  __int128 v683;
  __int128 v684;
  __int128 v685;
  __int128 v686;
  __int128 v687;
  __int128 v688;
  __int128 v689;
  __int128 v690;
  __int128 v691;
  __int128 v692;
  __int128 v693;
  double v694;
  __int128 v695;
  uint64_t v696[3];
  __int128 v697;
  __int128 v698;
  __int128 v699;
  __int128 v700;
  __int128 v701;
  __int128 v702;
  __int128 v703;
  __int128 v704;
  __int128 v705;
  __int128 v706;
  __int128 v707;
  __int128 v708;
  __int128 v709;
  __int128 v710;
  __int128 v711;
  double v712;
  __int128 v713;
  uint64_t v714[3];
  __int128 v715;
  __int128 v716;
  __int128 v717;
  __int128 v718;
  __int128 v719;
  __int128 v720;
  __int128 v721;
  __int128 v722;
  __int128 v723;
  __int128 v724;
  __int128 v725;
  __int128 v726;
  __int128 v727;
  __int128 v728;
  __int128 v729;
  double v730;
  __int128 v731;
  uint64_t v732[3];
  __int128 v733;
  __int128 v734;
  __int128 v735;
  __int128 v736;
  __int128 v737;
  __int128 v738;
  __int128 v739;
  __int128 v740;
  __int128 v741;
  __int128 v742;
  __int128 v743;
  __int128 v744;
  __int128 v745;
  __int128 v746;
  __int128 v747;
  double v748;
  __int128 v749;
  uint64_t v750[3];
  __int128 v751;
  __int128 v752;
  __int128 v753;
  __int128 v754;
  __int128 v755;
  __int128 v756;
  __int128 v757;
  __int128 v758;
  __int128 v759;
  __int128 v760;
  __int128 v761;
  __int128 v762;
  __int128 v763;
  __int128 v764;
  __int128 v765;
  double v766;
  __int128 v767;
  uint64_t v768[3];
  __int128 v769;
  __int128 v770;
  __int128 v771;
  __int128 v772;
  __int128 v773;
  __int128 v774;
  __int128 v775;
  __int128 v776;
  __int128 v777;
  __int128 v778;
  __int128 v779;
  __int128 v780;
  __int128 v781;
  __int128 v782;
  __int128 v783;
  double v784;
  __int128 v785;
  uint64_t v786[3];
  __int128 v787;
  __int128 v788;
  __int128 v789;
  __int128 v790;
  __int128 v791;
  __int128 v792;
  __int128 v793;
  __int128 v794;
  __int128 v795;
  __int128 v796;
  __int128 v797;
  __int128 v798;
  __int128 v799;
  __int128 v800;
  __int128 v801;
  double v802;
  __int128 v803;
  uint64_t v804[3];
  __int128 v805;
  __int128 v806;
  __int128 v807;
  __int128 v808;
  __int128 v809;
  __int128 v810;
  __int128 v811;
  __int128 v812;
  __int128 v813;
  __int128 v814;
  __int128 v815;
  __int128 v816;
  __int128 v817;
  __int128 v818;
  __int128 v819;
  double v820;
  __int128 v821;
  uint64_t v822[3];
  __int128 v823;
  __int128 v824;
  __int128 v825;
  __int128 v826;
  __int128 v827;
  __int128 v828;
  __int128 v829;
  __int128 v830;
  __int128 v831;
  __int128 v832;
  __int128 v833;
  __int128 v834;
  __int128 v835;
  __int128 v836;
  __int128 v837;
  double v838;
  __int128 v839;
  uint64_t v840[3];
  __int128 v841;
  __int128 v842;
  __int128 v843;
  __int128 v844;
  __int128 v845;
  __int128 v846;
  __int128 v847;
  __int128 v848;
  __int128 v849;
  __int128 v850;
  __int128 v851;
  __int128 v852;
  __int128 v853;
  __int128 v854;
  __int128 v855;
  double v856;
  __int128 v857;
  uint64_t v858[3];
  __int128 v859;
  __int128 v860;
  __int128 v861;
  __int128 v862;
  __int128 v863;
  __int128 v864;
  __int128 v865;
  __int128 v866;
  __int128 v867;
  __int128 v868;
  __int128 v869;
  __int128 v870;
  __int128 v871;
  __int128 v872;
  __int128 v873;
  double v874;
  __int128 v875;
  uint64_t v876[3];
  __int128 v877;
  __int128 v878;
  __int128 v879;
  __int128 v880;
  __int128 v881;
  __int128 v882;
  __int128 v883;
  __int128 v884;
  __int128 v885;
  __int128 v886;
  __int128 v887;
  __int128 v888;
  __int128 v889;
  __int128 v890;
  __int128 v891;
  int v892;
  __int128 v893;
  uint64_t v894[3];
  __int128 v895;
  __int128 v896;
  __int128 v897;
  __int128 v898;
  __int128 v899;
  __int128 v900;
  __int128 v901;
  __int128 v902;
  __int128 v903;
  __int128 v904;
  __int128 v905;
  __int128 v906;
  __int128 v907;
  __int128 v908;
  __int128 v909;
  const void *v910[6];
  _QWORD v911[6];
  _QWORD v912[6];
  _QWORD v913[6];
  _QWORD v914[6];
  _QWORD v915[6];
  _QWORD v916[6];
  _QWORD v917[6];
  _QWORD v918[6];
  _QWORD v919[6];
  _QWORD v920[6];
  _QWORD v921[6];
  _QWORD v922[6];
  _QWORD v923[6];
  _QWORD v924[6];
  _QWORD v925[6];
  _QWORD v926[6];
  _QWORD v927[6];
  int v928;
  __int128 v929;
  uint64_t v930[3];
  __int128 v931;
  __int128 v932;
  __int128 v933;
  __int128 v934;
  __int128 v935;
  __int128 v936;
  __int128 v937;
  __int128 v938;
  __int128 v939;
  __int128 v940;
  __int128 v941;
  __int128 v942;
  __int128 v943;
  __int128 v944;
  __int128 v945;
  int v946;
  __int128 v947;
  uint64_t v948[3];
  __int128 v949;
  __int128 v950;
  __int128 v951;
  __int128 v952;
  __int128 v953;
  __int128 v954;
  __int128 v955;
  __int128 v956;
  __int128 v957;
  __int128 v958;
  __int128 v959;
  __int128 v960;
  __int128 v961;
  __int128 v962;
  __int128 v963;
  int v964;
  __int128 v965;
  uint64_t v966[3];
  __int128 v967;
  __int128 v968;
  __int128 v969;
  __int128 v970;
  __int128 v971;
  __int128 v972;
  __int128 v973;
  __int128 v974;
  __int128 v975;
  __int128 v976;
  __int128 v977;
  __int128 v978;
  __int128 v979;
  __int128 v980;
  __int128 v981;
  int v982;
  __int128 v983;
  uint64_t v984[3];
  __int128 v985;
  __int128 v986;
  __int128 v987;
  __int128 v988;
  __int128 v989;
  __int128 v990;
  __int128 v991;
  __int128 v992;
  __int128 v993;
  __int128 v994;
  __int128 v995;
  __int128 v996;
  __int128 v997;
  __int128 v998;
  __int128 v999;
  int v1000;
  __int128 v1001;
  uint64_t v1002[3];
  __int128 v1003;
  __int128 v1004;
  __int128 v1005;
  __int128 v1006;
  __int128 v1007;
  __int128 v1008;
  __int128 v1009;
  __int128 v1010;
  __int128 v1011;
  __int128 v1012;
  __int128 v1013;
  __int128 v1014;
  __int128 v1015;
  __int128 v1016;
  __int128 v1017;
  int v1018;
  __int128 v1019;
  uint64_t v1020[3];
  __int128 v1021;
  __int128 v1022;
  __int128 v1023;
  __int128 v1024;
  __int128 v1025;
  __int128 v1026;
  __int128 v1027;
  __int128 v1028;
  __int128 v1029;
  __int128 v1030;
  __int128 v1031;
  __int128 v1032;
  __int128 v1033;
  __int128 v1034;
  __int128 v1035;
  int v1036;
  __int128 v1037;
  uint64_t v1038[3];
  __int128 v1039;
  __int128 v1040;
  __int128 v1041;
  __int128 v1042;
  __int128 v1043;
  __int128 v1044;
  __int128 v1045;
  __int128 v1046;
  __int128 v1047;
  __int128 v1048;
  __int128 v1049;
  __int128 v1050;
  __int128 v1051;
  __int128 v1052;
  __int128 v1053;
  int v1054;
  __int128 v1055;
  uint64_t v1056[3];
  __int128 v1057;
  __int128 v1058;
  __int128 v1059;
  __int128 v1060;
  __int128 v1061;
  __int128 v1062;
  __int128 v1063;
  __int128 v1064;
  __int128 v1065;
  __int128 v1066;
  __int128 v1067;
  __int128 v1068;
  __int128 v1069;
  __int128 v1070;
  __int128 v1071;
  int v1072;
  __int128 v1073;
  uint64_t v1074[3];
  __int128 v1075;
  __int128 v1076;
  __int128 v1077;
  __int128 v1078;
  __int128 v1079;
  __int128 v1080;
  __int128 v1081;
  __int128 v1082;
  __int128 v1083;
  __int128 v1084;
  __int128 v1085;
  __int128 v1086;
  __int128 v1087;
  __int128 v1088;
  __int128 v1089;
  const void *v1090[6];
  _QWORD v1091[6];
  _QWORD v1092[6];
  _QWORD v1093[6];
  _QWORD v1094[6];
  _QWORD v1095[6];
  _QWORD v1096[6];
  _QWORD v1097[6];
  _QWORD v1098[6];
  int v1099;
  __int128 v1100;
  uint64_t v1101[3];
  __int128 v1102;
  __int128 v1103;
  __int128 v1104;
  __int128 v1105;
  __int128 v1106;
  __int128 v1107;
  __int128 v1108;
  __int128 v1109;
  __int128 v1110;
  __int128 v1111;
  __int128 v1112;
  __int128 v1113;
  __int128 v1114;
  __int128 v1115;
  __int128 v1116;
  int v1117;
  __int128 v1118;
  uint64_t v1119[3];
  __int128 v1120;
  __int128 v1121;
  __int128 v1122;
  __int128 v1123;
  __int128 v1124;
  __int128 v1125;
  __int128 v1126;
  __int128 v1127;
  __int128 v1128;
  __int128 v1129;
  __int128 v1130;
  __int128 v1131;
  __int128 v1132;
  __int128 v1133;
  __int128 v1134;
  int v1135;
  __int128 v1136;
  uint64_t v1137[3];
  __int128 v1138;
  __int128 v1139;
  __int128 v1140;
  __int128 v1141;
  __int128 v1142;
  __int128 v1143;
  __int128 v1144;
  __int128 v1145;
  __int128 v1146;
  __int128 v1147;
  __int128 v1148;
  __int128 v1149;
  __int128 v1150;
  __int128 v1151;
  __int128 v1152;
  int v1153;
  __int128 v1154;
  uint64_t v1155[3];
  __int128 v1156;
  __int128 v1157;
  __int128 v1158;
  __int128 v1159;
  __int128 v1160;
  __int128 v1161;
  __int128 v1162;
  __int128 v1163;
  __int128 v1164;
  __int128 v1165;
  __int128 v1166;
  __int128 v1167;
  __int128 v1168;
  __int128 v1169;
  __int128 v1170;
  int v1171;
  __int128 v1172;
  uint64_t v1173[3];
  __int128 v1174;
  __int128 v1175;
  __int128 v1176;
  __int128 v1177;
  __int128 v1178;
  __int128 v1179;
  __int128 v1180;
  __int128 v1181;
  __int128 v1182;
  __int128 v1183;
  __int128 v1184;
  __int128 v1185;
  __int128 v1186;
  __int128 v1187;
  __int128 v1188;
  int v1189;
  __int128 v1190;
  uint64_t v1191[3];
  __int128 v1192;
  __int128 v1193;
  __int128 v1194;
  __int128 v1195;
  __int128 v1196;
  __int128 v1197;
  __int128 v1198;
  __int128 v1199;
  __int128 v1200;
  __int128 v1201;
  __int128 v1202;
  __int128 v1203;
  __int128 v1204;
  __int128 v1205;
  __int128 v1206;
  int v1207;
  __int128 v1208;
  uint64_t v1209[3];
  __int128 v1210;
  __int128 v1211;
  __int128 v1212;
  __int128 v1213;
  __int128 v1214;
  __int128 v1215;
  __int128 v1216;
  __int128 v1217;
  __int128 v1218;
  __int128 v1219;
  __int128 v1220;
  __int128 v1221;
  __int128 v1222;
  __int128 v1223;
  __int128 v1224;
  int v1225;
  __int128 v1226;
  uint64_t v1227[3];
  __int128 v1228;
  __int128 v1229;
  __int128 v1230;
  __int128 v1231;
  __int128 v1232;
  __int128 v1233;
  __int128 v1234;
  __int128 v1235;
  __int128 v1236;
  __int128 v1237;
  __int128 v1238;
  __int128 v1239;
  __int128 v1240;
  __int128 v1241;
  __int128 v1242;
  const void *v1243[6];
  _QWORD v1244[6];
  _QWORD v1245[6];
  _QWORD v1246[6];
  _QWORD v1247[6];
  _QWORD v1248[6];
  _QWORD v1249[6];
  _QWORD v1250[6];
  int v1251;
  uint64_t v1252[3];
  int v1253;
  uint64_t v1254[3];
  int v1255;
  uint64_t v1256[3];

  *(_QWORD *)&v568 = 0x300000010;
  *((_QWORD *)&v568 + 1) = 0xC042000000000000;
  v910[0] = (const void *)0xC042000000000000;
  sub_10018252C((uint64_t)v569, (double *)v910, 1);
  v570 = xmmword_10046E0F0;
  *(_QWORD *)&v571 = 0x4024000000000000;
  DWORD2(v571) = 45;
  BYTE12(v571) = 0;
  LODWORD(v572) = 1;
  BYTE8(v572) = 1;
  v573 = xmmword_10046E100;
  v574 = xmmword_10046E110;
  __asm { FMOV            V0.2D, #1.0 }
  v10 = _Q0;
  v575 = _Q0;
  *(_QWORD *)&v576[0] = 0xC059000000000000;
  *(_OWORD *)((char *)v576 + 8) = xmmword_10046E120;
  *((int32x2_t *)&v576[1] + 1) = vdup_n_s32(0x3DCCCCCDu);
  v577 = xmmword_10046E060;
  *(_QWORD *)&v579[0] = 0;
  v578 = 0x3FD999999999999AuLL;
  *(_OWORD *)((char *)v579 + 8) = xmmword_10046E070;
  DWORD2(v579[1]) = 5;
  *(_QWORD *)&v580 = 0x4000000000000000;
  DWORD2(v580) = 10;
  *(_QWORD *)&v581 = 0x4034000000000000;
  DWORD2(v581) = 3;
  *(_QWORD *)&v582 = 0x3FF0000000000000;
  *((_QWORD *)&v582 + 1) = 0x4008000000000000;
  v1225 = 14;
  v1226 = v568;
  sub_100232898(v1227, (uint64_t)v569);
  v1240 = v580;
  v1241 = v581;
  v1242 = v582;
  v1236 = v577;
  v1237 = v578;
  v1238 = v579[0];
  v1239 = v579[1];
  v1232 = v574;
  v1233 = v575;
  v1234 = v576[0];
  v1235 = v576[1];
  v1228 = v570;
  v1229 = v571;
  v1230 = v572;
  v1231 = v573;
  sub_100233348((uint64_t)v583, &v1225, 1);
  sub_100232440(v1243, &xmmword_100859A30, (uint64_t)v583);
  *(_QWORD *)&v552 = 0x300000010;
  *((_QWORD *)&v552 + 1) = 0xC042000000000000;
  v910[0] = (const void *)0xC042000000000000;
  sub_10018252C((uint64_t)v553, (double *)v910, 1);
  v554 = xmmword_10046E0F0;
  *(_QWORD *)&v555 = 0x4024000000000000;
  DWORD2(v555) = 45;
  BYTE12(v555) = 0;
  LODWORD(v556) = 1;
  BYTE8(v556) = 1;
  v557 = xmmword_10046E100;
  v558 = xmmword_10046E110;
  v559 = v10;
  *(_QWORD *)&v560[0] = 0xC059000000000000;
  *(_OWORD *)((char *)v560 + 8) = xmmword_10046E120;
  *((int32x2_t *)&v560[1] + 1) = vdup_n_s32(0x3DCCCCCDu);
  v561 = xmmword_10046E060;
  *(_QWORD *)&v563[0] = 0;
  v562 = 0x3FD999999999999AuLL;
  *(_OWORD *)((char *)v563 + 8) = xmmword_10046E070;
  DWORD2(v563[1]) = 5;
  *(_QWORD *)&v564 = 0x4000000000000000;
  DWORD2(v564) = 10;
  *(_QWORD *)&v565 = 0x4034000000000000;
  DWORD2(v565) = 3;
  *(_QWORD *)&v566 = 0x3FF0000000000000;
  *((_QWORD *)&v566 + 1) = 0x4008000000000000;
  v1207 = 14;
  v1208 = v552;
  sub_100232898(v1209, (uint64_t)v553);
  v1222 = v564;
  v1223 = v565;
  v1224 = v566;
  v1218 = v561;
  v1219 = v562;
  v1220 = v563[0];
  v1221 = v563[1];
  v1214 = v558;
  v1215 = v559;
  v1216 = v560[0];
  v1217 = v560[1];
  v1210 = v554;
  v1211 = v555;
  v1212 = v556;
  v1213 = v557;
  sub_100233348((uint64_t)v567, &v1207, 1);
  sub_100232440(v1244, &xmmword_100859A48, (uint64_t)v567);
  *(_QWORD *)&v536 = 0x300000010;
  *((_QWORD *)&v536 + 1) = 0xC042000000000000;
  v910[0] = (const void *)0xC042000000000000;
  sub_10018252C((uint64_t)v537, (double *)v910, 1);
  v538 = xmmword_10046E0F0;
  *(_QWORD *)&v539 = 0x4024000000000000;
  DWORD2(v539) = 45;
  BYTE12(v539) = 0;
  LODWORD(v540) = 1;
  BYTE8(v540) = 1;
  v541 = xmmword_10046E100;
  v542 = xmmword_10046E110;
  v543 = v10;
  *(_QWORD *)&v544[0] = 0xC059000000000000;
  *(_OWORD *)((char *)v544 + 8) = xmmword_10046E120;
  *((int32x2_t *)&v544[1] + 1) = vdup_n_s32(0x3DCCCCCDu);
  v545 = xmmword_10046E060;
  *(_QWORD *)&v547[0] = 0;
  v546 = 0x3FD999999999999AuLL;
  *(_OWORD *)((char *)v547 + 8) = xmmword_10046E070;
  DWORD2(v547[1]) = 5;
  *(_QWORD *)&v548 = 0x4000000000000000;
  DWORD2(v548) = 10;
  *(_QWORD *)&v549 = 0x4034000000000000;
  DWORD2(v549) = 3;
  *(_QWORD *)&v550 = 0x3FF0000000000000;
  *((_QWORD *)&v550 + 1) = 0x4008000000000000;
  v1189 = 14;
  v1190 = v536;
  sub_100232898(v1191, (uint64_t)v537);
  v1204 = v548;
  v1205 = v549;
  v1206 = v550;
  v1200 = v545;
  v1201 = v546;
  v1202 = v547[0];
  v1203 = v547[1];
  v1196 = v542;
  v1197 = v543;
  v1198 = v544[0];
  v1199 = v544[1];
  v1192 = v538;
  v1193 = v539;
  v1194 = v540;
  v1195 = v541;
  sub_100233348((uint64_t)v551, &v1189, 1);
  sub_100232440(v1245, &xmmword_100859A78, (uint64_t)v551);
  *(_QWORD *)&v520 = 0x300000010;
  *((_QWORD *)&v520 + 1) = 0xC042000000000000;
  v910[0] = (const void *)0xC042000000000000;
  sub_10018252C((uint64_t)v521, (double *)v910, 1);
  v522 = xmmword_10046E0F0;
  *(_QWORD *)&v523 = 0x4024000000000000;
  DWORD2(v523) = 45;
  BYTE12(v523) = 0;
  LODWORD(v524) = 1;
  BYTE8(v524) = 1;
  v525 = xmmword_10046E100;
  v526 = xmmword_10046E110;
  v527 = v10;
  *(_QWORD *)&v528[0] = 0xC059000000000000;
  *(_OWORD *)((char *)v528 + 8) = xmmword_10046E120;
  *((int32x2_t *)&v528[1] + 1) = vdup_n_s32(0x3DCCCCCDu);
  v529 = xmmword_10046E060;
  *(_QWORD *)&v531[0] = 0;
  v530 = 0x3FD999999999999AuLL;
  *(_OWORD *)((char *)v531 + 8) = xmmword_10046E070;
  DWORD2(v531[1]) = 5;
  *(_QWORD *)&v532 = 0x4000000000000000;
  DWORD2(v532) = 10;
  *(_QWORD *)&v533 = 0x4034000000000000;
  DWORD2(v533) = 3;
  *(_QWORD *)&v534 = 0x3FF0000000000000;
  *((_QWORD *)&v534 + 1) = 0x4008000000000000;
  v1171 = 14;
  v1172 = v520;
  sub_100232898(v1173, (uint64_t)v521);
  v1186 = v532;
  v1187 = v533;
  v1188 = v534;
  v1182 = v529;
  v1183 = v530;
  v1184 = v531[0];
  v1185 = v531[1];
  v1178 = v526;
  v1179 = v527;
  v1180 = v528[0];
  v1181 = v528[1];
  v1174 = v522;
  v1175 = v523;
  v1176 = v524;
  v1177 = v525;
  sub_100233348((uint64_t)v535, &v1171, 1);
  sub_100232440(v1246, &xmmword_100859A78, (uint64_t)v535);
  *(_QWORD *)&v504 = 0x300000010;
  *((_QWORD *)&v504 + 1) = 0xC042000000000000;
  v910[0] = (const void *)0xC042000000000000;
  sub_10018252C((uint64_t)v505, (double *)v910, 1);
  v506 = xmmword_10046E0F0;
  *(_QWORD *)&v507 = 0x4024000000000000;
  DWORD2(v507) = 45;
  BYTE12(v507) = 0;
  LODWORD(v508) = 1;
  BYTE8(v508) = 1;
  v509 = xmmword_10046E100;
  v510 = xmmword_10046E110;
  v511 = v10;
  *(_QWORD *)&v512[0] = 0xC059000000000000;
  *(_OWORD *)((char *)v512 + 8) = xmmword_10046E120;
  *((int32x2_t *)&v512[1] + 1) = vdup_n_s32(0x3DCCCCCDu);
  v513 = xmmword_10046E060;
  *(_QWORD *)&v515[0] = 0;
  v514 = 0x3FD999999999999AuLL;
  *(_OWORD *)((char *)v515 + 8) = xmmword_10046E070;
  DWORD2(v515[1]) = 5;
  *(_QWORD *)&v516 = 0x4000000000000000;
  DWORD2(v516) = 10;
  *(_QWORD *)&v517 = 0x4034000000000000;
  DWORD2(v517) = 3;
  *(_QWORD *)&v518 = 0x3FF0000000000000;
  *((_QWORD *)&v518 + 1) = 0x4008000000000000;
  v1153 = 14;
  v1154 = v504;
  sub_100232898(v1155, (uint64_t)v505);
  v1168 = v516;
  v1169 = v517;
  v1170 = v518;
  v1164 = v513;
  v1165 = v514;
  v1166 = v515[0];
  v1167 = v515[1];
  v1160 = v510;
  v1161 = v511;
  v1162 = v512[0];
  v1163 = v512[1];
  v1156 = v506;
  v1157 = v507;
  v1158 = v508;
  v1159 = v509;
  sub_100233348((uint64_t)v519, &v1153, 1);
  sub_100232440(v1247, &xmmword_100859A90, (uint64_t)v519);
  *(_QWORD *)&v488 = 0x300000010;
  *((_QWORD *)&v488 + 1) = 0xC044800000000000;
  v910[0] = (const void *)0xC044800000000000;
  sub_10018252C((uint64_t)v489, (double *)v910, 1);
  v490 = xmmword_10046E0F0;
  *(_QWORD *)&v491 = 0x4024000000000000;
  DWORD2(v491) = 45;
  BYTE12(v491) = 0;
  LODWORD(v492) = 1;
  BYTE8(v492) = 1;
  v493 = xmmword_10046E100;
  v494 = xmmword_10046E110;
  v495 = v10;
  *(_QWORD *)&v496[0] = 0xC059000000000000;
  *(_OWORD *)((char *)v496 + 8) = xmmword_10046E120;
  *((int32x2_t *)&v496[1] + 1) = vdup_n_s32(0x3DCCCCCDu);
  v497 = xmmword_10046E060;
  *(_QWORD *)&v499[0] = 0;
  v498 = 0x3FD999999999999AuLL;
  *(_OWORD *)((char *)v499 + 8) = xmmword_10046E070;
  DWORD2(v499[1]) = 5;
  *(_QWORD *)&v500 = 0x4000000000000000;
  DWORD2(v500) = 10;
  *(_QWORD *)&v501 = 0x4034000000000000;
  DWORD2(v501) = 3;
  *(_QWORD *)&v502 = 0x3FF0000000000000;
  *((_QWORD *)&v502 + 1) = 0x4008000000000000;
  v1135 = 14;
  v1136 = v488;
  sub_100232898(v1137, (uint64_t)v489);
  v1150 = v500;
  v1151 = v501;
  v1152 = v502;
  v1146 = v497;
  v1147 = v498;
  v1148 = v499[0];
  v1149 = v499[1];
  v1142 = v494;
  v1143 = v495;
  v1144 = v496[0];
  v1145 = v496[1];
  v1138 = v490;
  v1139 = v491;
  v1140 = v492;
  v1141 = v493;
  sub_100233348((uint64_t)v503, &v1135, 1);
  sub_100232440(v1248, &xmmword_100859AC0, (uint64_t)v503);
  *(_QWORD *)&v472 = 0x300000010;
  *((_QWORD *)&v472 + 1) = 0xC044800000000000;
  v910[0] = (const void *)0xC044800000000000;
  sub_10018252C((uint64_t)v473, (double *)v910, 1);
  v474 = xmmword_10046E0F0;
  *(_QWORD *)&v475 = 0x4024000000000000;
  DWORD2(v475) = 45;
  BYTE12(v475) = 0;
  LODWORD(v476) = 1;
  BYTE8(v476) = 1;
  v477 = xmmword_10046E100;
  v478 = xmmword_10046E110;
  v479 = v10;
  *(_QWORD *)&v480[0] = 0xC059000000000000;
  *(_OWORD *)((char *)v480 + 8) = xmmword_10046E120;
  *((int32x2_t *)&v480[1] + 1) = vdup_n_s32(0x3DCCCCCDu);
  v481 = xmmword_10046E060;
  *(_QWORD *)&v483[0] = 0;
  v482 = 0x3FD999999999999AuLL;
  *(_OWORD *)((char *)v483 + 8) = xmmword_10046E070;
  DWORD2(v483[1]) = 5;
  *(_QWORD *)&v484 = 0x4000000000000000;
  DWORD2(v484) = 10;
  *(_QWORD *)&v485 = 0x4034000000000000;
  DWORD2(v485) = 3;
  *(_QWORD *)&v486 = 0x3FF0000000000000;
  *((_QWORD *)&v486 + 1) = 0x4008000000000000;
  v1117 = 14;
  v1118 = v472;
  sub_100232898(v1119, (uint64_t)v473);
  v1132 = v484;
  v1133 = v485;
  v1134 = v486;
  v1128 = v481;
  v1129 = v482;
  v1130 = v483[0];
  v1131 = v483[1];
  v1124 = v478;
  v1125 = v479;
  v1126 = v480[0];
  v1127 = v480[1];
  v1120 = v474;
  v1121 = v475;
  v1122 = v476;
  v1123 = v477;
  sub_100233348((uint64_t)v487, &v1117, 1);
  sub_100232440(v1249, &xmmword_100859AD8, (uint64_t)v487);
  *(_QWORD *)&v456 = 0x300000010;
  *((_QWORD *)&v456 + 1) = 0xC044800000000000;
  v910[0] = (const void *)0xC044800000000000;
  sub_10018252C((uint64_t)v457, (double *)v910, 1);
  v458 = xmmword_10046E0F0;
  *(_QWORD *)&v459 = 0x4024000000000000;
  DWORD2(v459) = 45;
  BYTE12(v459) = 0;
  LODWORD(v460) = 1;
  BYTE8(v460) = 1;
  v461 = xmmword_10046E100;
  v462 = xmmword_10046E110;
  v463 = v10;
  *(_QWORD *)&v464[0] = 0xC059000000000000;
  *(_OWORD *)((char *)v464 + 8) = xmmword_10046E120;
  *((int32x2_t *)&v464[1] + 1) = vdup_n_s32(0x3DCCCCCDu);
  v465 = xmmword_10046E060;
  *(_QWORD *)&v467[0] = 0;
  v466 = 0x3FD999999999999AuLL;
  *(_OWORD *)((char *)v467 + 8) = xmmword_10046E070;
  DWORD2(v467[1]) = 5;
  *(_QWORD *)&v468 = 0x4000000000000000;
  DWORD2(v468) = 10;
  *(_QWORD *)&v469 = 0x4034000000000000;
  DWORD2(v469) = 3;
  *(_QWORD *)&v470 = 0x3FF0000000000000;
  *((_QWORD *)&v470 + 1) = 0x4008000000000000;
  v1099 = 14;
  v1100 = v456;
  sub_100232898(v1101, (uint64_t)v457);
  v1114 = v468;
  v1115 = v469;
  v1116 = v470;
  v1110 = v465;
  v1111 = v466;
  v1112 = v467[0];
  v1113 = v467[1];
  v1106 = v462;
  v1107 = v463;
  v1108 = v464[0];
  v1109 = v464[1];
  v1102 = v458;
  v1103 = v459;
  v1104 = v460;
  v1105 = v461;
  sub_100233348((uint64_t)v471, &v1099, 1);
  sub_100232440(v1250, &xmmword_100859AF0, (uint64_t)v471);
  sub_100234A0C((uint64_t)v584, v1243, 8);
  v1251 = 2;
  sub_100234C40(v1252, v584);
  *(_QWORD *)&v439 = 0x300000008;
  *((_QWORD *)&v439 + 1) = 0xC043800000000000;
  v910[0] = (const void *)0xC043800000000000;
  sub_10018252C((uint64_t)v440, (double *)v910, 1);
  v441 = xmmword_10046E0F0;
  *(_QWORD *)&v442 = 0x4024000000000000;
  DWORD2(v442) = 45;
  BYTE12(v442) = 0;
  LODWORD(v443) = 1;
  BYTE8(v443) = 1;
  v444 = xmmword_10046E100;
  v445 = xmmword_10046E110;
  v446 = v10;
  *(_QWORD *)&v447[0] = 0xC059000000000000;
  *(_OWORD *)((char *)v447 + 8) = xmmword_10046E120;
  *((int32x2_t *)&v447[1] + 1) = vdup_n_s32(0x3DCCCCCDu);
  v448 = xmmword_10046E060;
  *(_QWORD *)&v450[0] = 0;
  v449 = 0x3FD999999999999AuLL;
  *(_OWORD *)((char *)v450 + 8) = xmmword_10046E070;
  DWORD2(v450[1]) = 5;
  *(_QWORD *)&v451 = 0x4000000000000000;
  DWORD2(v451) = 10;
  *(_QWORD *)&v452 = 0x4034000000000000;
  DWORD2(v452) = 3;
  *(_QWORD *)&v453 = 0x3FF0000000000000;
  *((_QWORD *)&v453 + 1) = 0x4008000000000000;
  v1072 = 16;
  v1073 = v439;
  sub_100232898(v1074, (uint64_t)v440);
  v1087 = v451;
  v1088 = v452;
  v1089 = v453;
  v1083 = v448;
  v1084 = v449;
  v1085 = v450[0];
  v1086 = v450[1];
  v1079 = v445;
  v1080 = v446;
  v1081 = v447[0];
  v1082 = v447[1];
  v1075 = v441;
  v1076 = v442;
  v1077 = v443;
  v1078 = v444;
  sub_100233348((uint64_t)v454, &v1072, 1);
  sub_100232440(v1090, &xmmword_100859A30, (uint64_t)v454);
  *(_QWORD *)&v423 = 0x300000008;
  *((_QWORD *)&v423 + 1) = 0xC043800000000000;
  v910[0] = (const void *)0xC043800000000000;
  sub_10018252C((uint64_t)v424, (double *)v910, 1);
  v425 = xmmword_10046E0F0;
  *(_QWORD *)&v426 = 0x4024000000000000;
  DWORD2(v426) = 45;
  BYTE12(v426) = 0;
  LODWORD(v427) = 1;
  BYTE8(v427) = 1;
  v428 = xmmword_10046E100;
  v429 = xmmword_10046E110;
  v430 = v10;
  *(_QWORD *)&v431[0] = 0xC059000000000000;
  *(_OWORD *)((char *)v431 + 8) = xmmword_10046E120;
  *((int32x2_t *)&v431[1] + 1) = vdup_n_s32(0x3DCCCCCDu);
  v432 = xmmword_10046E060;
  *(_QWORD *)&v434[0] = 0;
  v433 = 0x3FD999999999999AuLL;
  *(_OWORD *)((char *)v434 + 8) = xmmword_10046E070;
  DWORD2(v434[1]) = 5;
  *(_QWORD *)&v435 = 0x4000000000000000;
  DWORD2(v435) = 10;
  *(_QWORD *)&v436 = 0x4034000000000000;
  DWORD2(v436) = 3;
  *(_QWORD *)&v437 = 0x3FF0000000000000;
  *((_QWORD *)&v437 + 1) = 0x4008000000000000;
  v1054 = 16;
  v1055 = v423;
  sub_100232898(v1056, (uint64_t)v424);
  v1069 = v435;
  v1070 = v436;
  v1071 = v437;
  v1065 = v432;
  v1066 = v433;
  v1067 = v434[0];
  v1068 = v434[1];
  v1061 = v429;
  v1062 = v430;
  v1063 = v431[0];
  v1064 = v431[1];
  v1057 = v425;
  v1058 = v426;
  v1059 = v427;
  v1060 = v428;
  sub_100233348((uint64_t)v438, &v1054, 1);
  sub_100232440(v1091, &xmmword_100859A48, (uint64_t)v438);
  *(_QWORD *)&v407 = 8;
  *((_QWORD *)&v407 + 1) = 0xC04A000000000000;
  v910[0] = (const void *)0xC04A000000000000;
  sub_10018252C((uint64_t)v408, (double *)v910, 1);
  v409 = xmmword_10046E0F0;
  *(_QWORD *)&v410 = 0x4024000000000000;
  DWORD2(v410) = 45;
  BYTE12(v410) = 0;
  LODWORD(v411) = 1;
  BYTE8(v411) = 1;
  v412 = xmmword_10046E100;
  v413 = xmmword_10046E110;
  v414 = v10;
  *(_QWORD *)&v415[0] = 0xC059000000000000;
  *(_OWORD *)((char *)v415 + 8) = xmmword_10046E120;
  *((int32x2_t *)&v415[1] + 1) = vdup_n_s32(0x3DCCCCCDu);
  v416 = xmmword_10046E060;
  *(_QWORD *)&v418[0] = 0;
  v417 = 0x3FD999999999999AuLL;
  *(_OWORD *)((char *)v418 + 8) = xmmword_10046E070;
  DWORD2(v418[1]) = 5;
  *(_QWORD *)&v419 = 0x4000000000000000;
  DWORD2(v419) = 10;
  *(_QWORD *)&v420 = 0x4034000000000000;
  DWORD2(v420) = 3;
  *(_QWORD *)&v421 = 0x3FF0000000000000;
  *((_QWORD *)&v421 + 1) = 0x4008000000000000;
  v1036 = 7;
  v1037 = v407;
  sub_100232898(v1038, (uint64_t)v408);
  v1051 = v419;
  v1052 = v420;
  v1053 = v421;
  v1047 = v416;
  v1048 = v417;
  v1049 = v418[0];
  v1050 = v418[1];
  v1043 = v413;
  v1044 = v414;
  v1045 = v415[0];
  v1046 = v415[1];
  v1039 = v409;
  v1040 = v410;
  v1041 = v411;
  v1042 = v412;
  sub_100233348((uint64_t)v422, &v1036, 1);
  sub_100232440(v1092, &xmmword_100859C40, (uint64_t)v422);
  *(_QWORD *)&v391 = 8;
  *((_QWORD *)&v391 + 1) = 0xC04A000000000000;
  v910[0] = (const void *)0xC04A000000000000;
  sub_10018252C((uint64_t)v392, (double *)v910, 1);
  v393 = xmmword_10046E0F0;
  *(_QWORD *)&v394 = 0x4024000000000000;
  DWORD2(v394) = 45;
  BYTE12(v394) = 0;
  LODWORD(v395) = 1;
  BYTE8(v395) = 1;
  v396 = xmmword_10046E100;
  v397 = xmmword_10046E110;
  v398 = v10;
  *(_QWORD *)&v399[0] = 0xC059000000000000;
  *(_OWORD *)((char *)v399 + 8) = xmmword_10046E120;
  *((int32x2_t *)&v399[1] + 1) = vdup_n_s32(0x3DCCCCCDu);
  v400 = xmmword_10046E060;
  *(_QWORD *)&v402[0] = 0;
  v401 = 0x3FD999999999999AuLL;
  *(_OWORD *)((char *)v402 + 8) = xmmword_10046E070;
  DWORD2(v402[1]) = 5;
  *(_QWORD *)&v403 = 0x4000000000000000;
  DWORD2(v403) = 10;
  *(_QWORD *)&v404 = 0x4034000000000000;
  DWORD2(v404) = 3;
  *(_QWORD *)&v405 = 0x3FF0000000000000;
  *((_QWORD *)&v405 + 1) = 0x4008000000000000;
  v1018 = 7;
  v1019 = v391;
  sub_100232898(v1020, (uint64_t)v392);
  v1033 = v403;
  v1034 = v404;
  v1035 = v405;
  v1029 = v400;
  v1030 = v401;
  v1031 = v402[0];
  v1032 = v402[1];
  v1025 = v397;
  v1026 = v398;
  v1027 = v399[0];
  v1028 = v399[1];
  v1021 = v393;
  v1022 = v394;
  v1023 = v395;
  v1024 = v396;
  sub_100233348((uint64_t)v406, &v1018, 1);
  sub_100232440(v1093, &xmmword_100859C58, (uint64_t)v406);
  *(_QWORD *)&v375 = 8;
  *((_QWORD *)&v375 + 1) = 0xC04A000000000000;
  v910[0] = (const void *)0xC04A000000000000;
  sub_10018252C((uint64_t)v376, (double *)v910, 1);
  v377 = xmmword_10046E0F0;
  *(_QWORD *)&v378 = 0x4024000000000000;
  DWORD2(v378) = 45;
  BYTE12(v378) = 0;
  LODWORD(v379) = 1;
  BYTE8(v379) = 1;
  v380 = xmmword_10046E100;
  v381 = xmmword_10046E110;
  v382 = v10;
  *(_QWORD *)&v383[0] = 0xC059000000000000;
  *(_OWORD *)((char *)v383 + 8) = xmmword_10046E120;
  *((int32x2_t *)&v383[1] + 1) = vdup_n_s32(0x3DCCCCCDu);
  v384 = xmmword_10046E060;
  *(_QWORD *)&v386[0] = 0;
  v385 = 0x3FD999999999999AuLL;
  *(_OWORD *)((char *)v386 + 8) = xmmword_10046E070;
  DWORD2(v386[1]) = 5;
  *(_QWORD *)&v387 = 0x4000000000000000;
  DWORD2(v387) = 10;
  *(_QWORD *)&v388 = 0x4034000000000000;
  DWORD2(v388) = 3;
  *(_QWORD *)&v389 = 0x3FF0000000000000;
  *((_QWORD *)&v389 + 1) = 0x4008000000000000;
  v1000 = 7;
  v1001 = v375;
  sub_100232898(v1002, (uint64_t)v376);
  v1015 = v387;
  v1016 = v388;
  v1017 = v389;
  v1011 = v384;
  v1012 = v385;
  v1013 = v386[0];
  v1014 = v386[1];
  v1007 = v381;
  v1008 = v382;
  v1009 = v383[0];
  v1010 = v383[1];
  v1003 = v377;
  v1004 = v378;
  v1005 = v379;
  v1006 = v380;
  sub_100233348((uint64_t)v390, &v1000, 1);
  sub_100232440(v1094, &xmmword_100859C70, (uint64_t)v390);
  *(_QWORD *)&v359 = 8;
  *((_QWORD *)&v359 + 1) = 0xC04A000000000000;
  v910[0] = (const void *)0xC04A000000000000;
  sub_10018252C((uint64_t)v360, (double *)v910, 1);
  v361 = xmmword_10046E0F0;
  *(_QWORD *)&v362 = 0x4024000000000000;
  DWORD2(v362) = 45;
  BYTE12(v362) = 0;
  LODWORD(v363) = 1;
  BYTE8(v363) = 1;
  v364 = xmmword_10046E100;
  v365 = xmmword_10046E110;
  v366 = v10;
  *(_QWORD *)&v367[0] = 0xC059000000000000;
  *(_OWORD *)((char *)v367 + 8) = xmmword_10046E120;
  *((int32x2_t *)&v367[1] + 1) = vdup_n_s32(0x3DCCCCCDu);
  v368 = xmmword_10046E060;
  *(_QWORD *)&v370[0] = 0;
  v369 = 0x3FD999999999999AuLL;
  *(_OWORD *)((char *)v370 + 8) = xmmword_10046E070;
  DWORD2(v370[1]) = 5;
  *(_QWORD *)&v371 = 0x4000000000000000;
  DWORD2(v371) = 10;
  *(_QWORD *)&v372 = 0x4034000000000000;
  DWORD2(v372) = 3;
  *(_QWORD *)&v373 = 0x3FF0000000000000;
  *((_QWORD *)&v373 + 1) = 0x4008000000000000;
  v982 = 7;
  v983 = v359;
  sub_100232898(v984, (uint64_t)v360);
  v997 = v371;
  v998 = v372;
  v999 = v373;
  v993 = v368;
  v994 = v369;
  v995 = v370[0];
  v996 = v370[1];
  v989 = v365;
  v990 = v366;
  v991 = v367[0];
  v992 = v367[1];
  v985 = v361;
  v986 = v362;
  v987 = v363;
  v988 = v364;
  sub_100233348((uint64_t)v374, &v982, 1);
  sub_100232440(v1095, &xmmword_100859C88, (uint64_t)v374);
  *(_QWORD *)&v343 = 8;
  *((_QWORD *)&v343 + 1) = 0xC04A000000000000;
  v910[0] = (const void *)0xC04A000000000000;
  sub_10018252C((uint64_t)v344, (double *)v910, 1);
  v345 = xmmword_10046E0F0;
  *(_QWORD *)&v346 = 0x4024000000000000;
  DWORD2(v346) = 45;
  BYTE12(v346) = 0;
  LODWORD(v347) = 1;
  BYTE8(v347) = 1;
  v348 = xmmword_10046E100;
  v349 = xmmword_10046E110;
  v350 = v10;
  *(_QWORD *)&v351[0] = 0xC059000000000000;
  *(_OWORD *)((char *)v351 + 8) = xmmword_10046E120;
  *((int32x2_t *)&v351[1] + 1) = vdup_n_s32(0x3DCCCCCDu);
  v352 = xmmword_10046E060;
  *(_QWORD *)&v354[0] = 0;
  v353 = 0x3FD999999999999AuLL;
  *(_OWORD *)((char *)v354 + 8) = xmmword_10046E070;
  DWORD2(v354[1]) = 5;
  *(_QWORD *)&v355 = 0x4000000000000000;
  DWORD2(v355) = 10;
  *(_QWORD *)&v356 = 0x4034000000000000;
  DWORD2(v356) = 3;
  *(_QWORD *)&v357 = 0x3FF0000000000000;
  *((_QWORD *)&v357 + 1) = 0x4008000000000000;
  v964 = 7;
  v965 = v343;
  sub_100232898(v966, (uint64_t)v344);
  v979 = v355;
  v980 = v356;
  v981 = v357;
  v975 = v352;
  v976 = v353;
  v977 = v354[0];
  v978 = v354[1];
  v971 = v349;
  v972 = v350;
  v973 = v351[0];
  v974 = v351[1];
  v967 = v345;
  v968 = v346;
  v969 = v347;
  v970 = v348;
  sub_100233348((uint64_t)v358, &v964, 1);
  sub_100232440(v1096, &xmmword_100859CA0, (uint64_t)v358);
  *(_QWORD *)&v327 = 8;
  *((_QWORD *)&v327 + 1) = 0xC04A000000000000;
  v910[0] = (const void *)0xC04A000000000000;
  sub_10018252C((uint64_t)v328, (double *)v910, 1);
  v329 = xmmword_10046E0F0;
  *(_QWORD *)&v330 = 0x4024000000000000;
  DWORD2(v330) = 45;
  BYTE12(v330) = 0;
  LODWORD(v331) = 1;
  BYTE8(v331) = 1;
  v332 = xmmword_10046E100;
  v333 = xmmword_10046E110;
  v334 = v10;
  *(_QWORD *)&v335[0] = 0xC059000000000000;
  *(_OWORD *)((char *)v335 + 8) = xmmword_10046E120;
  *((int32x2_t *)&v335[1] + 1) = vdup_n_s32(0x3DCCCCCDu);
  v336 = xmmword_10046E060;
  *(_QWORD *)&v338[0] = 0;
  v337 = 0x3FD999999999999AuLL;
  *(_OWORD *)((char *)v338 + 8) = xmmword_10046E070;
  DWORD2(v338[1]) = 5;
  *(_QWORD *)&v339 = 0x4000000000000000;
  DWORD2(v339) = 10;
  *(_QWORD *)&v340 = 0x4034000000000000;
  DWORD2(v340) = 3;
  *(_QWORD *)&v341 = 0x3FF0000000000000;
  *((_QWORD *)&v341 + 1) = 0x4008000000000000;
  v946 = 7;
  v947 = v327;
  sub_100232898(v948, (uint64_t)v328);
  v961 = v339;
  v962 = v340;
  v963 = v341;
  v957 = v336;
  v958 = v337;
  v959 = v338[0];
  v960 = v338[1];
  v953 = v333;
  v954 = v334;
  v955 = v335[0];
  v956 = v335[1];
  v949 = v329;
  v950 = v330;
  v951 = v331;
  v952 = v332;
  sub_100233348((uint64_t)v342, &v946, 1);
  sub_100232440(v1097, &xmmword_100859CB8, (uint64_t)v342);
  *(_QWORD *)&v311 = 8;
  *((_QWORD *)&v311 + 1) = 0xC04A000000000000;
  v910[0] = (const void *)0xC04A000000000000;
  sub_10018252C((uint64_t)v312, (double *)v910, 1);
  v313 = xmmword_10046E0F0;
  *(_QWORD *)&v314 = 0x4024000000000000;
  DWORD2(v314) = 45;
  BYTE12(v314) = 0;
  LODWORD(v315) = 1;
  BYTE8(v315) = 1;
  v316 = xmmword_10046E100;
  v317 = xmmword_10046E110;
  v318 = v10;
  *(_QWORD *)&v319[0] = 0xC059000000000000;
  *(_OWORD *)((char *)v319 + 8) = xmmword_10046E120;
  *((int32x2_t *)&v319[1] + 1) = vdup_n_s32(0x3DCCCCCDu);
  v320 = xmmword_10046E060;
  *(_QWORD *)&v322[0] = 0;
  v321 = 0x3FD999999999999AuLL;
  *(_OWORD *)((char *)v322 + 8) = xmmword_10046E070;
  DWORD2(v322[1]) = 5;
  *(_QWORD *)&v323 = 0x4000000000000000;
  DWORD2(v323) = 10;
  *(_QWORD *)&v324 = 0x4034000000000000;
  DWORD2(v324) = 3;
  *(_QWORD *)&v325 = 0x3FF0000000000000;
  *((_QWORD *)&v325 + 1) = 0x4008000000000000;
  v928 = 7;
  v929 = v311;
  sub_100232898(v930, (uint64_t)v312);
  v943 = v323;
  v944 = v324;
  v945 = v325;
  v939 = v320;
  v940 = v321;
  v941 = v322[0];
  v942 = v322[1];
  v935 = v317;
  v936 = v318;
  v937 = v319[0];
  v938 = v319[1];
  v931 = v313;
  v932 = v314;
  v933 = v315;
  v934 = v316;
  sub_100233348((uint64_t)v326, &v928, 1);
  sub_100232440(v1098, &xmmword_100859CD0, (uint64_t)v326);
  sub_100234A0C((uint64_t)v455, v1090, 9);
  v1253 = 3;
  sub_100234C40(v1254, v455);
  *(_QWORD *)&v294 = 8;
  *((_QWORD *)&v294 + 1) = 0xC04E800000000000;
  v874 = -61.0;
  sub_10018252C((uint64_t)v295, &v874, 1);
  v296 = xmmword_10046E0F0;
  *(_QWORD *)&v297 = 0x4024000000000000;
  DWORD2(v297) = 45;
  BYTE12(v297) = 0;
  LODWORD(v298) = 1;
  BYTE8(v298) = 1;
  v299 = xmmword_10046E100;
  v300 = xmmword_10046E110;
  v301 = v10;
  *(_QWORD *)&v302[0] = 0xC059000000000000;
  *(_OWORD *)((char *)v302 + 8) = xmmword_10046E120;
  *((int32x2_t *)&v302[1] + 1) = vdup_n_s32(0x3DCCCCCDu);
  v303 = xmmword_10046E060;
  *(_QWORD *)&v305[0] = 0;
  v304 = 0x3FD999999999999AuLL;
  *(_OWORD *)((char *)v305 + 8) = xmmword_10046E070;
  DWORD2(v305[1]) = 5;
  *(_QWORD *)&v306 = 0x4000000000000000;
  DWORD2(v306) = 10;
  *(_QWORD *)&v307 = 0x4034000000000000;
  DWORD2(v307) = 3;
  *(_QWORD *)&v308 = 0x3FF0000000000000;
  *((_QWORD *)&v308 + 1) = 0x4008000000000000;
  v892 = 6;
  v893 = v294;
  sub_100232898(v894, (uint64_t)v295);
  v907 = v306;
  v908 = v307;
  v909 = v308;
  v903 = v303;
  v904 = v304;
  v905 = v305[0];
  v906 = v305[1];
  v899 = v300;
  v900 = v301;
  v901 = v302[0];
  v902 = v302[1];
  v895 = v296;
  v896 = v297;
  v897 = v298;
  v898 = v299;
  sub_100233348((uint64_t)v309, &v892, 1);
  sub_100232440(v910, &xmmword_100859C40, (uint64_t)v309);
  *(_QWORD *)&v278 = 8;
  *((_QWORD *)&v278 + 1) = 0xC04F000000000000;
  v856 = -62.0;
  sub_10018252C((uint64_t)v279, &v856, 1);
  v280 = xmmword_10046E0F0;
  *(_QWORD *)&v281 = 0x4024000000000000;
  DWORD2(v281) = 45;
  BYTE12(v281) = 0;
  LODWORD(v282) = 1;
  BYTE8(v282) = 1;
  v283 = xmmword_10046E100;
  v284 = xmmword_10046E110;
  v285 = v10;
  *(_QWORD *)&v286[0] = 0xC059000000000000;
  *(_OWORD *)((char *)v286 + 8) = xmmword_10046E120;
  *((int32x2_t *)&v286[1] + 1) = vdup_n_s32(0x3DCCCCCDu);
  v287 = xmmword_10046E060;
  *(_QWORD *)&v289[0] = 0;
  v288 = 0x3FD999999999999AuLL;
  *(_OWORD *)((char *)v289 + 8) = xmmword_10046E070;
  DWORD2(v289[1]) = 5;
  *(_QWORD *)&v290 = 0x4000000000000000;
  DWORD2(v290) = 10;
  *(_QWORD *)&v291 = 0x4034000000000000;
  DWORD2(v291) = 3;
  *(_QWORD *)&v292 = 0x3FF0000000000000;
  *((_QWORD *)&v292 + 1) = 0x4008000000000000;
  LODWORD(v874) = 3;
  v875 = v278;
  sub_100232898(v876, (uint64_t)v279);
  v889 = v290;
  v890 = v291;
  v891 = v292;
  v885 = v287;
  v886 = v288;
  v887 = v289[0];
  v888 = v289[1];
  v881 = v284;
  v882 = v285;
  v883 = v286[0];
  v884 = v286[1];
  v877 = v280;
  v878 = v281;
  v879 = v282;
  v880 = v283;
  sub_100233348((uint64_t)v293, (int *)&v874, 1);
  sub_100232440(v911, &xmmword_100859C40, (uint64_t)v293);
  *(_QWORD *)&v262 = 8;
  *((_QWORD *)&v262 + 1) = 0xC04E800000000000;
  v838 = -61.0;
  sub_10018252C((uint64_t)v263, &v838, 1);
  v264 = xmmword_10046E0F0;
  *(_QWORD *)&v265 = 0x4024000000000000;
  DWORD2(v265) = 45;
  BYTE12(v265) = 0;
  LODWORD(v266) = 1;
  BYTE8(v266) = 1;
  v267 = xmmword_10046E100;
  v268 = xmmword_10046E110;
  v269 = v10;
  *(_QWORD *)&v270[0] = 0xC059000000000000;
  *(_OWORD *)((char *)v270 + 8) = xmmword_10046E120;
  *((int32x2_t *)&v270[1] + 1) = vdup_n_s32(0x3DCCCCCDu);
  v271 = xmmword_10046E060;
  *(_QWORD *)&v273[0] = 0;
  v272 = 0x3FD999999999999AuLL;
  *(_OWORD *)((char *)v273 + 8) = xmmword_10046E070;
  DWORD2(v273[1]) = 5;
  *(_QWORD *)&v274 = 0x4000000000000000;
  DWORD2(v274) = 10;
  *(_QWORD *)&v275 = 0x4034000000000000;
  DWORD2(v275) = 3;
  *(_QWORD *)&v276 = 0x3FF0000000000000;
  *((_QWORD *)&v276 + 1) = 0x4008000000000000;
  LODWORD(v856) = 7;
  v857 = v262;
  sub_100232898(v858, (uint64_t)v263);
  v871 = v274;
  v872 = v275;
  v873 = v276;
  v867 = v271;
  v868 = v272;
  v869 = v273[0];
  v870 = v273[1];
  v863 = v268;
  v864 = v269;
  v865 = v270[0];
  v866 = v270[1];
  v859 = v264;
  v860 = v265;
  v861 = v266;
  v862 = v267;
  sub_100233348((uint64_t)v277, (int *)&v856, 1);
  sub_100232440(v912, &xmmword_100859C40, (uint64_t)v277);
  *(_QWORD *)&v246 = 8;
  *((_QWORD *)&v246 + 1) = 0xC04E800000000000;
  v820 = -61.0;
  sub_10018252C((uint64_t)v247, &v820, 1);
  v248 = xmmword_10046E0F0;
  *(_QWORD *)&v249 = 0x4024000000000000;
  DWORD2(v249) = 45;
  BYTE12(v249) = 0;
  LODWORD(v250) = 1;
  BYTE8(v250) = 1;
  v251 = xmmword_10046E100;
  v252 = xmmword_10046E110;
  v253 = v10;
  *(_QWORD *)&v254[0] = 0xC059000000000000;
  *(_OWORD *)((char *)v254 + 8) = xmmword_10046E120;
  *((int32x2_t *)&v254[1] + 1) = vdup_n_s32(0x3DCCCCCDu);
  v255 = xmmword_10046E060;
  *(_QWORD *)&v257[0] = 0;
  v256 = 0x3FD999999999999AuLL;
  *(_OWORD *)((char *)v257 + 8) = xmmword_10046E070;
  DWORD2(v257[1]) = 5;
  *(_QWORD *)&v258 = 0x4000000000000000;
  DWORD2(v258) = 10;
  *(_QWORD *)&v259 = 0x4034000000000000;
  DWORD2(v259) = 3;
  *(_QWORD *)&v260 = 0x3FF0000000000000;
  *((_QWORD *)&v260 + 1) = 0x4008000000000000;
  LODWORD(v838) = 6;
  v839 = v246;
  sub_100232898(v840, (uint64_t)v247);
  v853 = v258;
  v854 = v259;
  v855 = v260;
  v849 = v255;
  v850 = v256;
  v851 = v257[0];
  v852 = v257[1];
  v845 = v252;
  v846 = v253;
  v847 = v254[0];
  v848 = v254[1];
  v841 = v248;
  v842 = v249;
  v843 = v250;
  v844 = v251;
  sub_100233348((uint64_t)v261, (int *)&v838, 1);
  sub_100232440(v913, &xmmword_100859C58, (uint64_t)v261);
  *(_QWORD *)&v230 = 8;
  *((_QWORD *)&v230 + 1) = 0xC04F000000000000;
  v802 = -62.0;
  sub_10018252C((uint64_t)v231, &v802, 1);
  v232 = xmmword_10046E0F0;
  *(_QWORD *)&v233 = 0x4024000000000000;
  DWORD2(v233) = 45;
  BYTE12(v233) = 0;
  LODWORD(v234) = 1;
  BYTE8(v234) = 1;
  v235 = xmmword_10046E100;
  v236 = xmmword_10046E110;
  v237 = v10;
  *(_QWORD *)&v238[0] = 0xC059000000000000;
  *(_OWORD *)((char *)v238 + 8) = xmmword_10046E120;
  *((int32x2_t *)&v238[1] + 1) = vdup_n_s32(0x3DCCCCCDu);
  v239 = xmmword_10046E060;
  *(_QWORD *)&v241[0] = 0;
  v240 = 0x3FD999999999999AuLL;
  *(_OWORD *)((char *)v241 + 8) = xmmword_10046E070;
  DWORD2(v241[1]) = 5;
  *(_QWORD *)&v242 = 0x4000000000000000;
  DWORD2(v242) = 10;
  *(_QWORD *)&v243 = 0x4034000000000000;
  DWORD2(v243) = 3;
  *(_QWORD *)&v244 = 0x3FF0000000000000;
  *((_QWORD *)&v244 + 1) = 0x4008000000000000;
  LODWORD(v820) = 3;
  v821 = v230;
  sub_100232898(v822, (uint64_t)v231);
  v835 = v242;
  v836 = v243;
  v837 = v244;
  v831 = v239;
  v832 = v240;
  v833 = v241[0];
  v834 = v241[1];
  v827 = v236;
  v828 = v237;
  v829 = v238[0];
  v830 = v238[1];
  v823 = v232;
  v824 = v233;
  v825 = v234;
  v826 = v235;
  sub_100233348((uint64_t)v245, (int *)&v820, 1);
  sub_100232440(v914, &xmmword_100859C58, (uint64_t)v245);
  *(_QWORD *)&v214 = 8;
  *((_QWORD *)&v214 + 1) = 0xC04E800000000000;
  v784 = -61.0;
  sub_10018252C((uint64_t)v215, &v784, 1);
  v216 = xmmword_10046E0F0;
  *(_QWORD *)&v217 = 0x4024000000000000;
  DWORD2(v217) = 45;
  BYTE12(v217) = 0;
  LODWORD(v218) = 1;
  BYTE8(v218) = 1;
  v219 = xmmword_10046E100;
  v220 = xmmword_10046E110;
  v221 = v10;
  *(_QWORD *)&v222[0] = 0xC059000000000000;
  *(_OWORD *)((char *)v222 + 8) = xmmword_10046E120;
  *((int32x2_t *)&v222[1] + 1) = vdup_n_s32(0x3DCCCCCDu);
  v223 = xmmword_10046E060;
  *(_QWORD *)&v225[0] = 0;
  v224 = 0x3FD999999999999AuLL;
  *(_OWORD *)((char *)v225 + 8) = xmmword_10046E070;
  DWORD2(v225[1]) = 5;
  *(_QWORD *)&v226 = 0x4000000000000000;
  DWORD2(v226) = 10;
  *(_QWORD *)&v227 = 0x4034000000000000;
  DWORD2(v227) = 3;
  *(_QWORD *)&v228 = 0x3FF0000000000000;
  *((_QWORD *)&v228 + 1) = 0x4008000000000000;
  LODWORD(v802) = 7;
  v803 = v214;
  sub_100232898(v804, (uint64_t)v215);
  v817 = v226;
  v818 = v227;
  v819 = v228;
  v813 = v223;
  v814 = v224;
  v815 = v225[0];
  v816 = v225[1];
  v809 = v220;
  v810 = v221;
  v811 = v222[0];
  v812 = v222[1];
  v805 = v216;
  v806 = v217;
  v807 = v218;
  v808 = v219;
  sub_100233348((uint64_t)v229, (int *)&v802, 1);
  sub_100232440(v915, &xmmword_100859C58, (uint64_t)v229);
  *(_QWORD *)&v198 = 8;
  *((_QWORD *)&v198 + 1) = 0xC04E800000000000;
  v766 = -61.0;
  sub_10018252C((uint64_t)v199, &v766, 1);
  v200 = xmmword_10046E0F0;
  *(_QWORD *)&v201 = 0x4024000000000000;
  DWORD2(v201) = 45;
  BYTE12(v201) = 0;
  LODWORD(v202) = 1;
  BYTE8(v202) = 1;
  v203 = xmmword_10046E100;
  v204 = xmmword_10046E110;
  v205 = v10;
  *(_QWORD *)&v206[0] = 0xC059000000000000;
  *(_OWORD *)((char *)v206 + 8) = xmmword_10046E120;
  *((int32x2_t *)&v206[1] + 1) = vdup_n_s32(0x3DCCCCCDu);
  v207 = xmmword_10046E060;
  *(_QWORD *)&v209[0] = 0;
  v208 = 0x3FD999999999999AuLL;
  *(_OWORD *)((char *)v209 + 8) = xmmword_10046E070;
  DWORD2(v209[1]) = 5;
  *(_QWORD *)&v210 = 0x4000000000000000;
  DWORD2(v210) = 10;
  *(_QWORD *)&v211 = 0x4034000000000000;
  DWORD2(v211) = 3;
  *(_QWORD *)&v212 = 0x3FF0000000000000;
  *((_QWORD *)&v212 + 1) = 0x4008000000000000;
  LODWORD(v784) = 6;
  v785 = v198;
  sub_100232898(v786, (uint64_t)v199);
  v799 = v210;
  v800 = v211;
  v801 = v212;
  v795 = v207;
  v796 = v208;
  v797 = v209[0];
  v798 = v209[1];
  v791 = v204;
  v792 = v205;
  v793 = v206[0];
  v794 = v206[1];
  v787 = v200;
  v788 = v201;
  v789 = v202;
  v790 = v203;
  sub_100233348((uint64_t)v213, (int *)&v784, 1);
  sub_100232440(v916, &xmmword_100859C70, (uint64_t)v213);
  *(_QWORD *)&v181 = 8;
  *((_QWORD *)&v181 + 1) = 0xC04F000000000000;
  v748 = -62.0;
  sub_10018252C((uint64_t)v182, &v748, 1);
  v183 = xmmword_10046E0F0;
  *(_QWORD *)&v184 = 0x4024000000000000;
  DWORD2(v184) = 45;
  BYTE12(v184) = 0;
  LODWORD(v185) = 1;
  BYTE8(v185) = 1;
  v186 = xmmword_10046E100;
  v187 = xmmword_10046E110;
  v188 = v10;
  *(_QWORD *)&v189[0] = 0xC059000000000000;
  *(_OWORD *)((char *)v189 + 8) = xmmword_10046E120;
  *((int32x2_t *)&v189[1] + 1) = vdup_n_s32(0x3DCCCCCDu);
  v190 = xmmword_10046E060;
  *(_QWORD *)&v192[0] = 0;
  v191 = 0x3FD999999999999AuLL;
  *(_OWORD *)((char *)v192 + 8) = xmmword_10046E070;
  DWORD2(v192[1]) = 5;
  *(_QWORD *)&v193 = 0x4000000000000000;
  DWORD2(v193) = 10;
  *(_QWORD *)&v194 = 0x4034000000000000;
  DWORD2(v194) = 3;
  *(_QWORD *)&v195 = 0x3FF0000000000000;
  *((_QWORD *)&v195 + 1) = 0x4008000000000000;
  LODWORD(v766) = 3;
  v767 = v181;
  sub_100232898(v768, (uint64_t)v182);
  v781 = v193;
  v782 = v194;
  v783 = v195;
  v777 = v190;
  v778 = v191;
  v779 = v192[0];
  v780 = v192[1];
  v773 = v187;
  v774 = v188;
  v775 = v189[0];
  v776 = v189[1];
  v769 = v183;
  v770 = v184;
  v771 = v185;
  v772 = v186;
  sub_100233348((uint64_t)v196, (int *)&v766, 1);
  sub_100232440(v917, &xmmword_100859C70, (uint64_t)v196);
  *(_QWORD *)&v164 = 8;
  *((_QWORD *)&v164 + 1) = 0xC04E800000000000;
  v730 = -61.0;
  sub_10018252C((uint64_t)v165, &v730, 1);
  v166 = xmmword_10046E0F0;
  *(_QWORD *)&v167 = 0x4024000000000000;
  DWORD2(v167) = 45;
  BYTE12(v167) = 0;
  LODWORD(v168) = 1;
  BYTE8(v168) = 1;
  v169 = xmmword_10046E100;
  v170 = xmmword_10046E110;
  v171 = v10;
  *(_QWORD *)&v172[0] = 0xC059000000000000;
  *(_OWORD *)((char *)v172 + 8) = xmmword_10046E120;
  *((int32x2_t *)&v172[1] + 1) = vdup_n_s32(0x3DCCCCCDu);
  v173 = xmmword_10046E060;
  *(_QWORD *)&v175[0] = 0;
  v174 = 0x3FD999999999999AuLL;
  *(_OWORD *)((char *)v175 + 8) = xmmword_10046E070;
  DWORD2(v175[1]) = 5;
  *(_QWORD *)&v176 = 0x4000000000000000;
  DWORD2(v176) = 10;
  *(_QWORD *)&v177 = 0x4034000000000000;
  DWORD2(v177) = 3;
  *(_QWORD *)&v178 = 0x3FF0000000000000;
  *((_QWORD *)&v178 + 1) = 0x4008000000000000;
  LODWORD(v748) = 7;
  v749 = v164;
  sub_100232898(v750, (uint64_t)v165);
  v763 = v176;
  v764 = v177;
  v765 = v178;
  v759 = v173;
  v760 = v174;
  v761 = v175[0];
  v762 = v175[1];
  v755 = v170;
  v756 = v171;
  v757 = v172[0];
  v758 = v172[1];
  v751 = v166;
  v752 = v167;
  v753 = v168;
  v754 = v169;
  sub_100233348((uint64_t)v179, (int *)&v748, 1);
  sub_100232440(v918, &xmmword_100859C70, (uint64_t)v179);
  *(_QWORD *)&v147 = 8;
  *((_QWORD *)&v147 + 1) = 0xC04E800000000000;
  v712 = -61.0;
  sub_10018252C((uint64_t)v148, &v712, 1);
  v149 = xmmword_10046E0F0;
  *(_QWORD *)&v150 = 0x4024000000000000;
  DWORD2(v150) = 45;
  BYTE12(v150) = 0;
  LODWORD(v151) = 1;
  BYTE8(v151) = 1;
  v152 = xmmword_10046E100;
  v153 = xmmword_10046E110;
  v154 = v10;
  *(_QWORD *)&v155[0] = 0xC059000000000000;
  *(_OWORD *)((char *)v155 + 8) = xmmword_10046E120;
  *((int32x2_t *)&v155[1] + 1) = vdup_n_s32(0x3DCCCCCDu);
  v156 = xmmword_10046E060;
  *(_QWORD *)&v158[0] = 0;
  v157 = 0x3FD999999999999AuLL;
  *(_OWORD *)((char *)v158 + 8) = xmmword_10046E070;
  DWORD2(v158[1]) = 5;
  *(_QWORD *)&v159 = 0x4000000000000000;
  DWORD2(v159) = 10;
  *(_QWORD *)&v160 = 0x4034000000000000;
  DWORD2(v160) = 3;
  *(_QWORD *)&v161 = 0x3FF0000000000000;
  *((_QWORD *)&v161 + 1) = 0x4008000000000000;
  LODWORD(v730) = 6;
  v731 = v147;
  sub_100232898(v732, (uint64_t)v148);
  v745 = v159;
  v746 = v160;
  v747 = v161;
  v741 = v156;
  v742 = v157;
  v743 = v158[0];
  v744 = v158[1];
  v737 = v153;
  v738 = v154;
  v739 = v155[0];
  v740 = v155[1];
  v733 = v149;
  v734 = v150;
  v735 = v151;
  v736 = v152;
  sub_100233348((uint64_t)v162, (int *)&v730, 1);
  sub_100232440(v919, &xmmword_100859C88, (uint64_t)v162);
  *(_QWORD *)&v130 = 8;
  *((_QWORD *)&v130 + 1) = 0xC04E800000000000;
  v694 = -61.0;
  sub_10018252C((uint64_t)v131, &v694, 1);
  v132 = xmmword_10046E0F0;
  *(_QWORD *)&v133 = 0x4024000000000000;
  DWORD2(v133) = 45;
  BYTE12(v133) = 0;
  LODWORD(v134) = 1;
  BYTE8(v134) = 1;
  v135 = xmmword_10046E100;
  v136 = xmmword_10046E110;
  v137 = v10;
  *(_QWORD *)&v138[0] = 0xC059000000000000;
  *(_OWORD *)((char *)v138 + 8) = xmmword_10046E120;
  *((int32x2_t *)&v138[1] + 1) = vdup_n_s32(0x3DCCCCCDu);
  v139 = xmmword_10046E060;
  *(_QWORD *)&v141[0] = 0;
  v140 = 0x3FD999999999999AuLL;
  *(_OWORD *)((char *)v141 + 8) = xmmword_10046E070;
  DWORD2(v141[1]) = 5;
  *(_QWORD *)&v142 = 0x4000000000000000;
  DWORD2(v142) = 10;
  *(_QWORD *)&v143 = 0x4034000000000000;
  DWORD2(v143) = 3;
  *(_QWORD *)&v144 = 0x3FF0000000000000;
  *((_QWORD *)&v144 + 1) = 0x4008000000000000;
  LODWORD(v712) = 4;
  v713 = v130;
  sub_100232898(v714, (uint64_t)v131);
  v727 = v142;
  v728 = v143;
  v729 = v144;
  v723 = v139;
  v724 = v140;
  v725 = v141[0];
  v726 = v141[1];
  v719 = v136;
  v720 = v137;
  v721 = v138[0];
  v722 = v138[1];
  v715 = v132;
  v716 = v133;
  v717 = v134;
  v718 = v135;
  sub_100233348((uint64_t)v145, (int *)&v712, 1);
  sub_100232440(v920, &xmmword_100859C88, (uint64_t)v145);
  *(_QWORD *)&v113 = 8;
  *((_QWORD *)&v113 + 1) = 0xC04E800000000000;
  v676 = -61.0;
  sub_10018252C((uint64_t)v114, &v676, 1);
  v115 = xmmword_10046E0F0;
  *(_QWORD *)&v116 = 0x4024000000000000;
  DWORD2(v116) = 45;
  BYTE12(v116) = 0;
  LODWORD(v117) = 1;
  BYTE8(v117) = 1;
  v118 = xmmword_10046E100;
  v119 = xmmword_10046E110;
  v120 = v10;
  *(_QWORD *)&v121[0] = 0xC059000000000000;
  *(_OWORD *)((char *)v121 + 8) = xmmword_10046E120;
  *((int32x2_t *)&v121[1] + 1) = vdup_n_s32(0x3DCCCCCDu);
  v122 = xmmword_10046E060;
  *(_QWORD *)&v124[0] = 0;
  v123 = 0x3FD999999999999AuLL;
  *(_OWORD *)((char *)v124 + 8) = xmmword_10046E070;
  DWORD2(v124[1]) = 5;
  *(_QWORD *)&v125 = 0x4000000000000000;
  DWORD2(v125) = 10;
  *(_QWORD *)&v126 = 0x4034000000000000;
  DWORD2(v126) = 3;
  *(_QWORD *)&v127 = 0x3FF0000000000000;
  *((_QWORD *)&v127 + 1) = 0x4008000000000000;
  LODWORD(v694) = 7;
  v695 = v113;
  sub_100232898(v696, (uint64_t)v114);
  v709 = v125;
  v710 = v126;
  v711 = v127;
  v705 = v122;
  v706 = v123;
  v707 = v124[0];
  v708 = v124[1];
  v701 = v119;
  v702 = v120;
  v703 = v121[0];
  v704 = v121[1];
  v697 = v115;
  v698 = v116;
  v699 = v117;
  v700 = v118;
  sub_100233348((uint64_t)v128, (int *)&v694, 1);
  sub_100232440(v921, &xmmword_100859C88, (uint64_t)v128);
  *(_QWORD *)&v96 = 8;
  *((_QWORD *)&v96 + 1) = 0xC04E800000000000;
  v658 = -61.0;
  sub_10018252C((uint64_t)v97, &v658, 1);
  v98 = xmmword_10046E0F0;
  *(_QWORD *)&v99 = 0x4024000000000000;
  DWORD2(v99) = 45;
  BYTE12(v99) = 0;
  LODWORD(v100) = 1;
  BYTE8(v100) = 1;
  v101 = xmmword_10046E100;
  v102 = xmmword_10046E110;
  v103 = v10;
  *(_QWORD *)&v104[0] = 0xC059000000000000;
  *(_OWORD *)((char *)v104 + 8) = xmmword_10046E120;
  *((int32x2_t *)&v104[1] + 1) = vdup_n_s32(0x3DCCCCCDu);
  v105 = xmmword_10046E060;
  *(_QWORD *)&v107[0] = 0;
  v106 = 0x3FD999999999999AuLL;
  *(_OWORD *)((char *)v107 + 8) = xmmword_10046E070;
  DWORD2(v107[1]) = 5;
  *(_QWORD *)&v108 = 0x4000000000000000;
  DWORD2(v108) = 10;
  *(_QWORD *)&v109 = 0x4034000000000000;
  DWORD2(v109) = 3;
  *(_QWORD *)&v110 = 0x3FF0000000000000;
  *((_QWORD *)&v110 + 1) = 0x4008000000000000;
  LODWORD(v676) = 6;
  v677 = v96;
  sub_100232898(v678, (uint64_t)v97);
  v691 = v108;
  v692 = v109;
  v693 = v110;
  v687 = v105;
  v688 = v106;
  v689 = v107[0];
  v690 = v107[1];
  v683 = v102;
  v684 = v103;
  v685 = v104[0];
  v686 = v104[1];
  v679 = v98;
  v680 = v99;
  v681 = v100;
  v682 = v101;
  sub_100233348((uint64_t)v111, (int *)&v676, 1);
  sub_100232440(v922, &xmmword_100859CB8, (uint64_t)v111);
  *(_QWORD *)&v79 = 8;
  *((_QWORD *)&v79 + 1) = 0xC04E800000000000;
  v640 = -61.0;
  sub_10018252C((uint64_t)v80, &v640, 1);
  v81 = xmmword_10046E0F0;
  *(_QWORD *)&v82 = 0x4024000000000000;
  DWORD2(v82) = 45;
  BYTE12(v82) = 0;
  LODWORD(v83) = 1;
  BYTE8(v83) = 1;
  v84 = xmmword_10046E100;
  v85 = xmmword_10046E110;
  v86 = v10;
  *(_QWORD *)&v87[0] = 0xC059000000000000;
  *(_OWORD *)((char *)v87 + 8) = xmmword_10046E120;
  *((int32x2_t *)&v87[1] + 1) = vdup_n_s32(0x3DCCCCCDu);
  v88 = xmmword_10046E060;
  *(_QWORD *)&v90[0] = 0;
  v89 = 0x3FD999999999999AuLL;
  *(_OWORD *)((char *)v90 + 8) = xmmword_10046E070;
  DWORD2(v90[1]) = 5;
  *(_QWORD *)&v91 = 0x4000000000000000;
  DWORD2(v91) = 10;
  *(_QWORD *)&v92 = 0x4034000000000000;
  DWORD2(v92) = 3;
  *(_QWORD *)&v93 = 0x3FF0000000000000;
  *((_QWORD *)&v93 + 1) = 0x4008000000000000;
  LODWORD(v658) = 4;
  v659 = v79;
  sub_100232898(v660, (uint64_t)v80);
  v673 = v91;
  v674 = v92;
  v675 = v93;
  v669 = v88;
  v670 = v89;
  v671 = v90[0];
  v672 = v90[1];
  v665 = v85;
  v666 = v86;
  v667 = v87[0];
  v668 = v87[1];
  v661 = v81;
  v662 = v82;
  v663 = v83;
  v664 = v84;
  sub_100233348((uint64_t)v94, (int *)&v658, 1);
  sub_100232440(v923, &xmmword_100859CB8, (uint64_t)v94);
  *(_QWORD *)&v62 = 8;
  *((_QWORD *)&v62 + 1) = 0xC04E800000000000;
  v622 = -61.0;
  sub_10018252C((uint64_t)v63, &v622, 1);
  v64 = xmmword_10046E0F0;
  *(_QWORD *)&v65 = 0x4024000000000000;
  DWORD2(v65) = 45;
  BYTE12(v65) = 0;
  LODWORD(v66) = 1;
  BYTE8(v66) = 1;
  v67 = xmmword_10046E100;
  v68 = xmmword_10046E110;
  v69 = v10;
  *(_QWORD *)&v70[0] = 0xC059000000000000;
  *(_OWORD *)((char *)v70 + 8) = xmmword_10046E120;
  *((int32x2_t *)&v70[1] + 1) = vdup_n_s32(0x3DCCCCCDu);
  v71 = xmmword_10046E060;
  *(_QWORD *)&v73[0] = 0;
  v72 = 0x3FD999999999999AuLL;
  *(_OWORD *)((char *)v73 + 8) = xmmword_10046E070;
  DWORD2(v73[1]) = 5;
  *(_QWORD *)&v74 = 0x4000000000000000;
  DWORD2(v74) = 10;
  *(_QWORD *)&v75 = 0x4034000000000000;
  DWORD2(v75) = 3;
  *(_QWORD *)&v76 = 0x3FF0000000000000;
  *((_QWORD *)&v76 + 1) = 0x4008000000000000;
  LODWORD(v640) = 7;
  v641 = v62;
  sub_100232898(v642, (uint64_t)v63);
  v655 = v74;
  v656 = v75;
  v657 = v76;
  v651 = v71;
  v652 = v72;
  v653 = v73[0];
  v654 = v73[1];
  v647 = v68;
  v648 = v69;
  v649 = v70[0];
  v650 = v70[1];
  v643 = v64;
  v644 = v65;
  v645 = v66;
  v646 = v67;
  sub_100233348((uint64_t)v77, (int *)&v640, 1);
  sub_100232440(v924, &xmmword_100859CB8, (uint64_t)v77);
  *(_QWORD *)&v45 = 8;
  *((_QWORD *)&v45 + 1) = 0xC04E800000000000;
  v604 = -61.0;
  sub_10018252C((uint64_t)v46, &v604, 1);
  v47 = xmmword_10046E0F0;
  *(_QWORD *)&v48 = 0x4024000000000000;
  DWORD2(v48) = 45;
  BYTE12(v48) = 0;
  LODWORD(v49) = 1;
  BYTE8(v49) = 1;
  v50 = xmmword_10046E100;
  v51 = xmmword_10046E110;
  v52 = v10;
  *(_QWORD *)&v53[0] = 0xC059000000000000;
  *(_OWORD *)((char *)v53 + 8) = xmmword_10046E120;
  *((int32x2_t *)&v53[1] + 1) = vdup_n_s32(0x3DCCCCCDu);
  v54 = xmmword_10046E060;
  *(_QWORD *)&v56[0] = 0;
  v55 = 0x3FD999999999999AuLL;
  *(_OWORD *)((char *)v56 + 8) = xmmword_10046E070;
  DWORD2(v56[1]) = 5;
  *(_QWORD *)&v57 = 0x4000000000000000;
  DWORD2(v57) = 10;
  *(_QWORD *)&v58 = 0x4034000000000000;
  DWORD2(v58) = 3;
  *(_QWORD *)&v59 = 0x3FF0000000000000;
  *((_QWORD *)&v59 + 1) = 0x4008000000000000;
  LODWORD(v622) = 6;
  v623 = v45;
  sub_100232898(v624, (uint64_t)v46);
  v637 = v57;
  v638 = v58;
  v639 = v59;
  v633 = v54;
  v634 = v55;
  v635 = v56[0];
  v636 = v56[1];
  v629 = v51;
  v630 = v52;
  v631 = v53[0];
  v632 = v53[1];
  v625 = v47;
  v626 = v48;
  v627 = v49;
  v628 = v50;
  sub_100233348((uint64_t)v60, (int *)&v622, 1);
  sub_100232440(v925, &xmmword_100859CD0, (uint64_t)v60);
  *(_QWORD *)&v28 = 8;
  *((_QWORD *)&v28 + 1) = 0xC04E800000000000;
  v586 = -61.0;
  sub_10018252C((uint64_t)v29, &v586, 1);
  v30 = xmmword_10046E0F0;
  *(_QWORD *)&v31 = 0x4024000000000000;
  DWORD2(v31) = 45;
  BYTE12(v31) = 0;
  LODWORD(v32) = 1;
  BYTE8(v32) = 1;
  v33 = xmmword_10046E100;
  v34 = xmmword_10046E110;
  v35 = v10;
  *(_QWORD *)&v36[0] = 0xC059000000000000;
  *(_OWORD *)((char *)v36 + 8) = xmmword_10046E120;
  *((int32x2_t *)&v36[1] + 1) = vdup_n_s32(0x3DCCCCCDu);
  v37 = xmmword_10046E060;
  *(_QWORD *)&v39[0] = 0;
  v38 = 0x3FD999999999999AuLL;
  *(_OWORD *)((char *)v39 + 8) = xmmword_10046E070;
  DWORD2(v39[1]) = 5;
  *(_QWORD *)&v40 = 0x4000000000000000;
  DWORD2(v40) = 10;
  *(_QWORD *)&v41 = 0x4034000000000000;
  DWORD2(v41) = 3;
  *(_QWORD *)&v42 = 0x3FF0000000000000;
  *((_QWORD *)&v42 + 1) = 0x4008000000000000;
  LODWORD(v604) = 4;
  v605 = v28;
  sub_100232898(v606, (uint64_t)v29);
  v619 = v40;
  v620 = v41;
  v621 = v42;
  v615 = v37;
  v616 = v38;
  v617 = v39[0];
  v618 = v39[1];
  v611 = v34;
  v612 = v35;
  v613 = v36[0];
  v614 = v36[1];
  v607 = v30;
  v608 = v31;
  v609 = v32;
  v610 = v33;
  sub_100233348((uint64_t)v43, (int *)&v604, 1);
  sub_100232440(v926, &xmmword_100859CD0, (uint64_t)v43);
  *(_QWORD *)&v11 = 8;
  *((_QWORD *)&v11 + 1) = 0xC04E800000000000;
  v585 = -61.0;
  sub_10018252C((uint64_t)v12, &v585, 1);
  v13 = xmmword_10046E0F0;
  *(_QWORD *)&v14 = 0x4024000000000000;
  DWORD2(v14) = 45;
  BYTE12(v14) = 0;
  LODWORD(v15) = 1;
  BYTE8(v15) = 1;
  v16 = xmmword_10046E100;
  v17 = xmmword_10046E110;
  v18 = v10;
  *(_QWORD *)&v19[0] = 0xC059000000000000;
  *(_OWORD *)((char *)v19 + 8) = xmmword_10046E120;
  *((int32x2_t *)&v19[1] + 1) = vdup_n_s32(0x3DCCCCCDu);
  v20 = xmmword_10046E060;
  *(_QWORD *)&v22[0] = 0;
  v21 = 0x3FD999999999999AuLL;
  *(_OWORD *)((char *)v22 + 8) = xmmword_10046E070;
  DWORD2(v22[1]) = 5;
  *(_QWORD *)&v23 = 0x4000000000000000;
  DWORD2(v23) = 10;
  *(_QWORD *)&v24 = 0x4034000000000000;
  DWORD2(v24) = 3;
  *(_QWORD *)&v25 = 0x3FF0000000000000;
  *((_QWORD *)&v25 + 1) = 0x4008000000000000;
  LODWORD(v586) = 7;
  v587 = v11;
  sub_100232898(v588, (uint64_t)v12);
  v601 = v23;
  v602 = v24;
  v603 = v25;
  v597 = v20;
  v598 = v21;
  v599 = v22[0];
  v600 = v22[1];
  v593 = v17;
  v594 = v18;
  v595 = v19[0];
  v596 = v19[1];
  v589 = v13;
  v590 = v14;
  v591 = v15;
  v592 = v16;
  sub_100233348((uint64_t)v26, (int *)&v586, 1);
  sub_100232440(v927, &xmmword_100859CD0, (uint64_t)v26);
  sub_100234A0C((uint64_t)v310, v910, 18);
  v1255 = 4;
  sub_100234C40(v1256, v310);
  sub_100234D18((uint64_t)&unk_10085FC88, &v1251, 3);
  for (i = 0; i != -12; i -= 4)
    sub_100234984((uint64_t)&v1256[i], (_QWORD *)v1256[i + 1]);
  sub_100234984((uint64_t)v310, v310[1]);
  v6 = 864;
  do
  {
    sub_1002332FC((uint64_t)&v908 + v6 + 8, (_QWORD *)v910[v6 / 8 - 2]);
    if (*((char *)&v908 + v6 + 7) < 0)
      operator delete(*(void **)((char *)&v907 + v6));
    v6 -= 48;
  }
  while (v6);
  sub_1002332FC((uint64_t)v26, v27);
  sub_10003E3F0((uint64_t)v588, (_QWORD *)v588[1]);
  sub_10003E3F0((uint64_t)v12, v12[1]);
  sub_1002332FC((uint64_t)v43, v44);
  sub_10003E3F0((uint64_t)v606, (_QWORD *)v606[1]);
  sub_10003E3F0((uint64_t)v29, v29[1]);
  sub_1002332FC((uint64_t)v60, v61);
  sub_10003E3F0((uint64_t)v624, (_QWORD *)v624[1]);
  sub_10003E3F0((uint64_t)v46, v46[1]);
  sub_1002332FC((uint64_t)v77, v78);
  sub_10003E3F0((uint64_t)v642, (_QWORD *)v642[1]);
  sub_10003E3F0((uint64_t)v63, v63[1]);
  sub_1002332FC((uint64_t)v94, v95);
  sub_10003E3F0((uint64_t)v660, (_QWORD *)v660[1]);
  sub_10003E3F0((uint64_t)v80, v80[1]);
  sub_1002332FC((uint64_t)v111, v112);
  sub_10003E3F0((uint64_t)v678, (_QWORD *)v678[1]);
  sub_10003E3F0((uint64_t)v97, v97[1]);
  sub_1002332FC((uint64_t)v128, v129);
  sub_10003E3F0((uint64_t)v696, (_QWORD *)v696[1]);
  sub_10003E3F0((uint64_t)v114, v114[1]);
  sub_1002332FC((uint64_t)v145, v146);
  sub_10003E3F0((uint64_t)v714, (_QWORD *)v714[1]);
  sub_10003E3F0((uint64_t)v131, v131[1]);
  sub_1002332FC((uint64_t)v162, v163);
  sub_10003E3F0((uint64_t)v732, (_QWORD *)v732[1]);
  sub_10003E3F0((uint64_t)v148, v148[1]);
  sub_1002332FC((uint64_t)v179, v180);
  sub_10003E3F0((uint64_t)v750, (_QWORD *)v750[1]);
  sub_10003E3F0((uint64_t)v165, v165[1]);
  sub_1002332FC((uint64_t)v196, v197);
  sub_10003E3F0((uint64_t)v768, (_QWORD *)v768[1]);
  sub_10003E3F0((uint64_t)v182, v182[1]);
  sub_1002332FC((uint64_t)v213, v213[1]);
  sub_10003E3F0((uint64_t)v786, (_QWORD *)v786[1]);
  sub_10003E3F0((uint64_t)v199, v199[1]);
  sub_1002332FC((uint64_t)v229, v229[1]);
  sub_10003E3F0((uint64_t)v804, (_QWORD *)v804[1]);
  sub_10003E3F0((uint64_t)v215, v215[1]);
  sub_1002332FC((uint64_t)v245, v245[1]);
  sub_10003E3F0((uint64_t)v822, (_QWORD *)v822[1]);
  sub_10003E3F0((uint64_t)v231, v231[1]);
  sub_1002332FC((uint64_t)v261, v261[1]);
  sub_10003E3F0((uint64_t)v840, (_QWORD *)v840[1]);
  sub_10003E3F0((uint64_t)v247, v247[1]);
  sub_1002332FC((uint64_t)v277, v277[1]);
  sub_10003E3F0((uint64_t)v858, (_QWORD *)v858[1]);
  sub_10003E3F0((uint64_t)v263, v263[1]);
  sub_1002332FC((uint64_t)v293, v293[1]);
  sub_10003E3F0((uint64_t)v876, (_QWORD *)v876[1]);
  sub_10003E3F0((uint64_t)v279, v279[1]);
  sub_1002332FC((uint64_t)v309, v309[1]);
  sub_10003E3F0((uint64_t)v894, (_QWORD *)v894[1]);
  sub_10003E3F0((uint64_t)v295, v295[1]);
  sub_100234984((uint64_t)v455, v455[1]);
  v7 = 432;
  do
  {
    sub_1002332FC((uint64_t)&v1088 + v7 + 8, (_QWORD *)v1090[v7 / 8 - 2]);
    if (*((char *)&v1088 + v7 + 7) < 0)
      operator delete(*(void **)((char *)&v1087 + v7));
    v7 -= 48;
  }
  while (v7);
  sub_1002332FC((uint64_t)v326, v326[1]);
  sub_10003E3F0((uint64_t)v930, (_QWORD *)v930[1]);
  sub_10003E3F0((uint64_t)v312, v312[1]);
  sub_1002332FC((uint64_t)v342, v342[1]);
  sub_10003E3F0((uint64_t)v948, (_QWORD *)v948[1]);
  sub_10003E3F0((uint64_t)v328, v328[1]);
  sub_1002332FC((uint64_t)v358, v358[1]);
  sub_10003E3F0((uint64_t)v966, (_QWORD *)v966[1]);
  sub_10003E3F0((uint64_t)v344, v344[1]);
  sub_1002332FC((uint64_t)v374, v374[1]);
  sub_10003E3F0((uint64_t)v984, (_QWORD *)v984[1]);
  sub_10003E3F0((uint64_t)v360, v360[1]);
  sub_1002332FC((uint64_t)v390, v390[1]);
  sub_10003E3F0((uint64_t)v1002, (_QWORD *)v1002[1]);
  sub_10003E3F0((uint64_t)v376, v376[1]);
  sub_1002332FC((uint64_t)v406, v406[1]);
  sub_10003E3F0((uint64_t)v1020, (_QWORD *)v1020[1]);
  sub_10003E3F0((uint64_t)v392, v392[1]);
  sub_1002332FC((uint64_t)v422, v422[1]);
  sub_10003E3F0((uint64_t)v1038, (_QWORD *)v1038[1]);
  sub_10003E3F0((uint64_t)v408, v408[1]);
  sub_1002332FC((uint64_t)v438, v438[1]);
  sub_10003E3F0((uint64_t)v1056, (_QWORD *)v1056[1]);
  sub_10003E3F0((uint64_t)v424, v424[1]);
  sub_1002332FC((uint64_t)v454, v454[1]);
  sub_10003E3F0((uint64_t)v1074, (_QWORD *)v1074[1]);
  sub_10003E3F0((uint64_t)v440, v440[1]);
  sub_100234984((uint64_t)v584, v584[1]);
  v8 = 384;
  do
  {
    sub_1002332FC((uint64_t)&v1241 + v8 + 8, (_QWORD *)v1243[v8 / 8 - 2]);
    if (*((char *)&v1241 + v8 + 7) < 0)
      operator delete(*(void **)((char *)&v1240 + v8));
    v8 -= 48;
  }
  while (v8);
  sub_1002332FC((uint64_t)v471, v471[1]);
  sub_10003E3F0((uint64_t)v1101, (_QWORD *)v1101[1]);
  sub_10003E3F0((uint64_t)v457, v457[1]);
  sub_1002332FC((uint64_t)v487, v487[1]);
  sub_10003E3F0((uint64_t)v1119, (_QWORD *)v1119[1]);
  sub_10003E3F0((uint64_t)v473, v473[1]);
  sub_1002332FC((uint64_t)v503, v503[1]);
  sub_10003E3F0((uint64_t)v1137, (_QWORD *)v1137[1]);
  sub_10003E3F0((uint64_t)v489, v489[1]);
  sub_1002332FC((uint64_t)v519, v519[1]);
  sub_10003E3F0((uint64_t)v1155, (_QWORD *)v1155[1]);
  sub_10003E3F0((uint64_t)v505, v505[1]);
  sub_1002332FC((uint64_t)v535, v535[1]);
  sub_10003E3F0((uint64_t)v1173, (_QWORD *)v1173[1]);
  sub_10003E3F0((uint64_t)v521, v521[1]);
  sub_1002332FC((uint64_t)v551, v551[1]);
  sub_10003E3F0((uint64_t)v1191, (_QWORD *)v1191[1]);
  sub_10003E3F0((uint64_t)v537, v537[1]);
  sub_1002332FC((uint64_t)v567, v567[1]);
  sub_10003E3F0((uint64_t)v1209, (_QWORD *)v1209[1]);
  sub_10003E3F0((uint64_t)v553, v553[1]);
  sub_1002332FC((uint64_t)v583, v583[1]);
  sub_10003E3F0((uint64_t)v1227, (_QWORD *)v1227[1]);
  sub_10003E3F0((uint64_t)v569, v569[1]);
  return __cxa_atexit((void (*)(void *))sub_10022F048, &unk_10085FC88, (void *)&_mh_execute_header);
}

void sub_100243B54(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a64;
  uint64_t a65;
  uint64_t a66;
  uint64_t a67;
  uint64_t a68;
  uint64_t a69;
  uint64_t a70;
  uint64_t a71;
  uint64_t a72;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t i;
  uint64_t v80;
  uint64_t j;
  uint64_t k;
  uint64_t v83;
  uint64_t v84;
  _Unwind_Exception *v85;
  int v86;
  int v87;

  v78 = 0;
  STACK[0x270] = a1;
  do
  {
    sub_100234984(v75 + v78 + 72, *(_QWORD **)(v75 + v78 + 80));
    v78 -= 32;
  }
  while (v78 != -96);
  LODWORD(STACK[0x260]) = 0;
  sub_100234984((uint64_t)&STACK[0x1888], (_QWORD *)STACK[0x1890]);
  for (i = 816; i != -48; i -= 48)
    sub_10022F00C((uint64_t)&STACK[0x41D0] + i);
  sub_1002332FC((uint64_t)&STACK[0x3B8], *(_QWORD **)(v76 + 288));
  sub_10003E3F0(v72, *(_QWORD **)(v73 + 32));
  sub_10003E3F0(STACK[0x280], (_QWORD *)STACK[0x2B8]);
  sub_1002332FC((uint64_t)&STACK[0x4F0], *(_QWORD **)(v74 + 288));
  sub_10003E3F0(a9, (_QWORD *)STACK[0x2ED0]);
  sub_10003E3F0(a10, *(_QWORD **)(v74 + 24));
  sub_1002332FC((uint64_t)&STACK[0x628], (_QWORD *)STACK[0x630]);
  sub_10003E3F0(a11, (_QWORD *)STACK[0x2FF0]);
  sub_10003E3F0(a12, (_QWORD *)STACK[0x528]);
  sub_1002332FC((uint64_t)&STACK[0x760], (_QWORD *)STACK[0x768]);
  sub_10003E3F0(a13, (_QWORD *)STACK[0x3110]);
  sub_10003E3F0(a14, (_QWORD *)STACK[0x660]);
  sub_1002332FC((uint64_t)&STACK[0x898], (_QWORD *)STACK[0x8A0]);
  sub_10003E3F0(a15, (_QWORD *)STACK[0x3230]);
  sub_10003E3F0(a16, (_QWORD *)STACK[0x798]);
  sub_1002332FC((uint64_t)&STACK[0x9D0], (_QWORD *)STACK[0x9D8]);
  sub_10003E3F0(a17, (_QWORD *)STACK[0x3350]);
  sub_10003E3F0(a18, (_QWORD *)STACK[0x8D0]);
  sub_1002332FC((uint64_t)&STACK[0xB08], (_QWORD *)STACK[0xB10]);
  sub_10003E3F0(a19, (_QWORD *)STACK[0x3470]);
  sub_10003E3F0(a20, (_QWORD *)STACK[0xA08]);
  sub_1002332FC((uint64_t)&STACK[0xC40], (_QWORD *)STACK[0xC48]);
  sub_10003E3F0(a21, (_QWORD *)STACK[0x3590]);
  sub_10003E3F0(a22, (_QWORD *)STACK[0xB40]);
  sub_1002332FC((uint64_t)&STACK[0xD78], (_QWORD *)STACK[0xD80]);
  sub_10003E3F0(a23, (_QWORD *)STACK[0x36B0]);
  sub_10003E3F0(a24, (_QWORD *)STACK[0xC78]);
  sub_1002332FC((uint64_t)&STACK[0xEB0], (_QWORD *)STACK[0xEB8]);
  sub_10003E3F0(a25, (_QWORD *)STACK[0x37D0]);
  sub_10003E3F0(a26, (_QWORD *)STACK[0xDB0]);
  sub_1002332FC((uint64_t)&STACK[0xFE8], (_QWORD *)STACK[0xFF0]);
  sub_10003E3F0(a27, (_QWORD *)STACK[0x38F0]);
  sub_10003E3F0(a28, (_QWORD *)STACK[0xEE8]);
  sub_1002332FC((uint64_t)&STACK[0x1120], (_QWORD *)STACK[0x1128]);
  sub_10003E3F0(a29, (_QWORD *)STACK[0x3A10]);
  sub_10003E3F0(a30, (_QWORD *)STACK[0x1020]);
  sub_1002332FC((uint64_t)&STACK[0x1258], (_QWORD *)STACK[0x1260]);
  sub_10003E3F0(a31, (_QWORD *)STACK[0x3B30]);
  sub_10003E3F0(a32, (_QWORD *)STACK[0x1158]);
  sub_1002332FC((uint64_t)&STACK[0x1390], (_QWORD *)STACK[0x1398]);
  sub_10003E3F0(a33, (_QWORD *)STACK[0x3C50]);
  sub_10003E3F0(a34, (_QWORD *)STACK[0x1290]);
  sub_1002332FC((uint64_t)&STACK[0x14C8], (_QWORD *)STACK[0x14D0]);
  sub_10003E3F0(a35, (_QWORD *)STACK[0x3D70]);
  sub_10003E3F0(a36, (_QWORD *)STACK[0x13C8]);
  sub_1002332FC((uint64_t)&STACK[0x1600], (_QWORD *)STACK[0x1608]);
  sub_10003E3F0(a37, (_QWORD *)STACK[0x3E90]);
  sub_10003E3F0(a38, (_QWORD *)STACK[0x1500]);
  sub_1002332FC((uint64_t)&STACK[0x1738], (_QWORD *)STACK[0x1740]);
  sub_10003E3F0(a39, (_QWORD *)STACK[0x3FB0]);
  sub_10003E3F0(a40, (_QWORD *)STACK[0x1638]);
  sub_1002332FC((uint64_t)&STACK[0x1870], (_QWORD *)STACK[0x1878]);
  sub_10003E3F0(a41, (_QWORD *)STACK[0x40D0]);
  sub_10003E3F0(a42, (_QWORD *)STACK[0x1770]);
  v80 = v77 - 144;
  sub_100234984((uint64_t)&STACK[0x2398], (_QWORD *)STACK[0x23A0]);
  for (j = 384; j != -48; j -= 48)
    sub_10022F00C((uint64_t)&STACK[0x4F50] + j);
  sub_1002332FC((uint64_t)&STACK[0x19C0], (_QWORD *)STACK[0x19C8]);
  sub_10003E3F0(a43, (_QWORD *)STACK[0x4550]);
  sub_10003E3F0(a44, (_QWORD *)STACK[0x18C0]);
  sub_1002332FC((uint64_t)&STACK[0x1AF8], (_QWORD *)STACK[0x1B00]);
  sub_10003E3F0(a45, (_QWORD *)STACK[0x4670]);
  sub_10003E3F0(a46, (_QWORD *)STACK[0x19F8]);
  sub_1002332FC((uint64_t)&STACK[0x1C30], (_QWORD *)STACK[0x1C38]);
  sub_10003E3F0(a47, (_QWORD *)STACK[0x4790]);
  sub_10003E3F0(a48, (_QWORD *)STACK[0x1B30]);
  sub_1002332FC((uint64_t)&STACK[0x1D68], (_QWORD *)STACK[0x1D70]);
  sub_10003E3F0(a49, (_QWORD *)STACK[0x48B0]);
  sub_10003E3F0(a50, (_QWORD *)STACK[0x1C68]);
  sub_1002332FC((uint64_t)&STACK[0x1EA0], (_QWORD *)STACK[0x1EA8]);
  sub_10003E3F0(a51, (_QWORD *)STACK[0x49D0]);
  sub_10003E3F0(a52, (_QWORD *)STACK[0x1DA0]);
  sub_1002332FC((uint64_t)&STACK[0x1FD8], (_QWORD *)STACK[0x1FE0]);
  sub_10003E3F0(a53, (_QWORD *)STACK[0x4AF0]);
  sub_10003E3F0(a54, (_QWORD *)STACK[0x1ED8]);
  sub_1002332FC((uint64_t)&STACK[0x2110], (_QWORD *)STACK[0x2118]);
  sub_10003E3F0(a55, (_QWORD *)STACK[0x4C10]);
  sub_10003E3F0(a56, (_QWORD *)STACK[0x2010]);
  sub_1002332FC((uint64_t)&STACK[0x2248], (_QWORD *)STACK[0x2250]);
  sub_10003E3F0(a57, (_QWORD *)STACK[0x4D30]);
  sub_10003E3F0(a58, (_QWORD *)STACK[0x2148]);
  sub_1002332FC((uint64_t)&STACK[0x2380], (_QWORD *)STACK[0x2388]);
  sub_10003E3F0(a59, (_QWORD *)STACK[0x4E50]);
  sub_10003E3F0(a60, (_QWORD *)STACK[0x2280]);
  sub_100234984((uint64_t)&STACK[0x2D70], (_QWORD *)STACK[0x2D78]);
  for (k = 336; k != -48; k -= 48)
    sub_10022F00C((uint64_t)&STACK[0x5A00] + k);
  sub_1002332FC((uint64_t)&STACK[0x24D0], (_QWORD *)STACK[0x24D8]);
  sub_10003E3F0(a61, (_QWORD *)STACK[0x5120]);
  sub_10003E3F0(a62, (_QWORD *)STACK[0x23D0]);
  sub_1002332FC((uint64_t)&STACK[0x2608], (_QWORD *)STACK[0x2610]);
  sub_10003E3F0(a63, (_QWORD *)STACK[0x5240]);
  sub_10003E3F0(a64, (_QWORD *)STACK[0x2508]);
  sub_1002332FC((uint64_t)&STACK[0x2740], (_QWORD *)STACK[0x2748]);
  sub_10003E3F0(a65, (_QWORD *)STACK[0x5360]);
  sub_10003E3F0(a66, (_QWORD *)STACK[0x2640]);
  v83 = STACK[0x218];
  sub_1002332FC((uint64_t)&STACK[0x2878], (_QWORD *)STACK[0x2880]);
  sub_10003E3F0(a67, (_QWORD *)STACK[0x5480]);
  sub_10003E3F0(a68, (_QWORD *)STACK[0x2778]);
  sub_1002332FC((uint64_t)&STACK[0x29B0], (_QWORD *)STACK[0x29B8]);
  sub_10003E3F0(a69, (_QWORD *)STACK[0x55A0]);
  sub_10003E3F0(a70, (_QWORD *)STACK[0x28B0]);
  v84 = STACK[0x208];
  sub_1002332FC((uint64_t)&STACK[0x2AE8], (_QWORD *)STACK[0x2AF0]);
  sub_10003E3F0(a72, (_QWORD *)STACK[0x56C0]);
  sub_10003E3F0(STACK[0x200], (_QWORD *)STACK[0x29E8]);
  sub_1002332FC((uint64_t)&STACK[0x2C20], (_QWORD *)STACK[0x2C28]);
  sub_10003E3F0(STACK[0x210], (_QWORD *)STACK[0x57E0]);
  sub_10003E3F0(v84, (_QWORD *)STACK[0x2B20]);
  v85 = (_Unwind_Exception *)STACK[0x270];
  v86 = STACK[0x260];
  sub_1002332FC((uint64_t)&STACK[0x2D58], (_QWORD *)STACK[0x2D60]);
  sub_10003E3F0(v83, (_QWORD *)STACK[0x5900]);
  sub_10003E3F0(a71, (_QWORD *)STACK[0x2C58]);
  if (v77 - 208 == v80)
    v87 = 0;
  else
    v87 = v86;
  if (v87 == 1)
  {
    do
    {
      sub_100234984(v80 - 24, *(_QWORD **)(v80 - 16));
      v80 -= 32;
    }
    while (v80 != v77 - 208);
  }
  _Unwind_Resume(v85);
}

void sub_1002445A8(unint64_t a1)
{
  STACK[0x270] = a1;
  LODWORD(STACK[0x260]) = 1;
  JUMPOUT(0x100243C5CLL);
}

void sub_1002445BC(unint64_t a1)
{
  STACK[0x270] = a1;
  LODWORD(STACK[0x260]) = 1;
  JUMPOUT(0x100243C70);
}

void sub_1002445D0(unint64_t a1)
{
  STACK[0x270] = a1;
  LODWORD(STACK[0x260]) = 1;
  JUMPOUT(0x100243C7CLL);
}

void sub_1002445E8(unint64_t a1)
{
  STACK[0x270] = a1;
  LODWORD(STACK[0x260]) = 1;
  JUMPOUT(0x100243C8CLL);
}

void sub_1002445FC(unint64_t a1)
{
  STACK[0x270] = a1;
  LODWORD(STACK[0x260]) = 1;
  JUMPOUT(0x100243CA0);
}

void sub_100244610(unint64_t a1)
{
  STACK[0x270] = a1;
  LODWORD(STACK[0x260]) = 1;
  JUMPOUT(0x100243CB0);
}

void sub_100244628(unint64_t a1)
{
  STACK[0x270] = a1;
  LODWORD(STACK[0x260]) = 1;
  JUMPOUT(0x100243CC0);
}

void sub_10024463C(unint64_t a1)
{
  STACK[0x270] = a1;
  LODWORD(STACK[0x260]) = 1;
  JUMPOUT(0x100243CD4);
}

void sub_100244650(unint64_t a1)
{
  STACK[0x270] = a1;
  LODWORD(STACK[0x260]) = 1;
  JUMPOUT(0x100243CE4);
}

void sub_100244668(unint64_t a1)
{
  STACK[0x270] = a1;
  LODWORD(STACK[0x260]) = 1;
  JUMPOUT(0x100243CF4);
}

void sub_10024467C(unint64_t a1)
{
  STACK[0x270] = a1;
  LODWORD(STACK[0x260]) = 1;
  JUMPOUT(0x100243D08);
}

void sub_100244690(unint64_t a1)
{
  STACK[0x270] = a1;
  LODWORD(STACK[0x260]) = 1;
  JUMPOUT(0x100243D18);
}

void sub_1002446A8(unint64_t a1)
{
  STACK[0x270] = a1;
  LODWORD(STACK[0x260]) = 1;
  JUMPOUT(0x100243D28);
}

void sub_1002446BC(unint64_t a1)
{
  STACK[0x270] = a1;
  LODWORD(STACK[0x260]) = 1;
  JUMPOUT(0x100243D3CLL);
}

void sub_1002446D0(unint64_t a1)
{
  STACK[0x270] = a1;
  LODWORD(STACK[0x260]) = 1;
  JUMPOUT(0x100243D4CLL);
}

void sub_1002446E8(unint64_t a1)
{
  STACK[0x270] = a1;
  LODWORD(STACK[0x260]) = 1;
  JUMPOUT(0x100243D5CLL);
}

void sub_1002446FC(unint64_t a1)
{
  STACK[0x270] = a1;
  LODWORD(STACK[0x260]) = 1;
  JUMPOUT(0x100243D70);
}

void sub_100244710(unint64_t a1)
{
  STACK[0x270] = a1;
  LODWORD(STACK[0x260]) = 1;
  JUMPOUT(0x100243D80);
}

void sub_100244728(unint64_t a1)
{
  STACK[0x270] = a1;
  LODWORD(STACK[0x260]) = 1;
  JUMPOUT(0x100243D90);
}

void sub_10024473C(unint64_t a1)
{
  STACK[0x270] = a1;
  LODWORD(STACK[0x260]) = 1;
  JUMPOUT(0x100243DA4);
}

void sub_100244750(unint64_t a1)
{
  STACK[0x270] = a1;
  LODWORD(STACK[0x260]) = 1;
  JUMPOUT(0x100243DB4);
}

void sub_100244768(unint64_t a1)
{
  STACK[0x270] = a1;
  LODWORD(STACK[0x260]) = 1;
  JUMPOUT(0x100243DC4);
}

void sub_10024477C(unint64_t a1)
{
  STACK[0x270] = a1;
  LODWORD(STACK[0x260]) = 1;
  JUMPOUT(0x100243DD8);
}

void sub_100244790(unint64_t a1)
{
  STACK[0x270] = a1;
  LODWORD(STACK[0x260]) = 1;
  JUMPOUT(0x100243DE8);
}

void sub_1002447A8(unint64_t a1)
{
  STACK[0x270] = a1;
  LODWORD(STACK[0x260]) = 1;
  JUMPOUT(0x100243DF8);
}

void sub_1002447BC(unint64_t a1)
{
  STACK[0x270] = a1;
  LODWORD(STACK[0x260]) = 1;
  JUMPOUT(0x100243E0CLL);
}

void sub_1002447D0(unint64_t a1)
{
  STACK[0x270] = a1;
  LODWORD(STACK[0x260]) = 1;
  JUMPOUT(0x100243E1CLL);
}

void sub_1002447E8(unint64_t a1)
{
  STACK[0x270] = a1;
  LODWORD(STACK[0x260]) = 1;
  JUMPOUT(0x100243E2CLL);
}

void sub_1002447FC(unint64_t a1)
{
  STACK[0x270] = a1;
  LODWORD(STACK[0x260]) = 1;
  JUMPOUT(0x100243E40);
}

void sub_100244810(unint64_t a1)
{
  STACK[0x270] = a1;
  LODWORD(STACK[0x260]) = 1;
  JUMPOUT(0x100243E50);
}

void sub_100244828(unint64_t a1)
{
  STACK[0x270] = a1;
  LODWORD(STACK[0x260]) = 1;
  JUMPOUT(0x100243E68);
}

void sub_10024483C(unint64_t a1)
{
  STACK[0x270] = a1;
  LODWORD(STACK[0x260]) = 1;
  JUMPOUT(0x100243E7CLL);
}

void sub_100244850(unint64_t a1)
{
  STACK[0x270] = a1;
  LODWORD(STACK[0x260]) = 1;
  JUMPOUT(0x100243E90);
}

void sub_100244868(unint64_t a1)
{
  STACK[0x270] = a1;
  LODWORD(STACK[0x260]) = 1;
  JUMPOUT(0x100243EA8);
}

void sub_10024487C(unint64_t a1)
{
  STACK[0x270] = a1;
  LODWORD(STACK[0x260]) = 1;
  JUMPOUT(0x100243EBCLL);
}

void sub_100244890(unint64_t a1)
{
  STACK[0x270] = a1;
  LODWORD(STACK[0x260]) = 1;
  JUMPOUT(0x100243ED0);
}

void sub_1002448A8(unint64_t a1)
{
  STACK[0x270] = a1;
  LODWORD(STACK[0x260]) = 1;
  JUMPOUT(0x100243EE8);
}

void sub_1002448BC(unint64_t a1)
{
  STACK[0x270] = a1;
  LODWORD(STACK[0x260]) = 1;
  JUMPOUT(0x100243EFCLL);
}

void sub_1002448D0(unint64_t a1)
{
  STACK[0x270] = a1;
  LODWORD(STACK[0x260]) = 1;
  JUMPOUT(0x100243F10);
}

void sub_1002448E8(unint64_t a1)
{
  STACK[0x270] = a1;
  LODWORD(STACK[0x260]) = 1;
  JUMPOUT(0x100243F28);
}

void sub_1002448FC(unint64_t a1)
{
  STACK[0x270] = a1;
  LODWORD(STACK[0x260]) = 1;
  JUMPOUT(0x100243F3CLL);
}

void sub_100244910(unint64_t a1)
{
  STACK[0x270] = a1;
  LODWORD(STACK[0x260]) = 1;
  JUMPOUT(0x100243F50);
}

void sub_100244928(unint64_t a1)
{
  STACK[0x270] = a1;
  LODWORD(STACK[0x260]) = 1;
  JUMPOUT(0x100243F68);
}

void sub_10024493C(unint64_t a1)
{
  STACK[0x270] = a1;
  LODWORD(STACK[0x260]) = 1;
  JUMPOUT(0x100243F7CLL);
}

void sub_100244950(unint64_t a1)
{
  STACK[0x270] = a1;
  LODWORD(STACK[0x260]) = 1;
  JUMPOUT(0x100243F90);
}

void sub_100244968(unint64_t a1)
{
  STACK[0x270] = a1;
  LODWORD(STACK[0x260]) = 1;
  JUMPOUT(0x100243FA8);
}

void sub_10024497C(unint64_t a1)
{
  STACK[0x270] = a1;
  LODWORD(STACK[0x260]) = 1;
  JUMPOUT(0x100243FBCLL);
}

void sub_100244990(unint64_t a1)
{
  STACK[0x270] = a1;
  LODWORD(STACK[0x260]) = 1;
  JUMPOUT(0x100243FD0);
}

void sub_1002449B8(unint64_t a1)
{
  STACK[0x270] = a1;
  LODWORD(STACK[0x260]) = 1;
  JUMPOUT(0x100243FE8);
}

void sub_1002449D4(unint64_t a1)
{
  STACK[0x270] = a1;
  LODWORD(STACK[0x260]) = 1;
  JUMPOUT(0x100243FFCLL);
}

void sub_1002449F0(unint64_t a1)
{
  STACK[0x270] = a1;
  LODWORD(STACK[0x260]) = 1;
  JUMPOUT(0x100244044);
}

void sub_100244A00(unint64_t a1)
{
  STACK[0x270] = a1;
  LODWORD(STACK[0x260]) = 1;
  JUMPOUT(0x10024404CLL);
}

void sub_100244A10(unint64_t a1)
{
  STACK[0x270] = a1;
  LODWORD(STACK[0x260]) = 1;
  JUMPOUT(0x100244064);
}

void sub_100244A20(unint64_t a1)
{
  STACK[0x270] = a1;
  LODWORD(STACK[0x260]) = 1;
  JUMPOUT(0x100244088);
}

void sub_100244A34(unint64_t a1)
{
  STACK[0x270] = a1;
  LODWORD(STACK[0x260]) = 1;
  JUMPOUT(0x1002440A0);
}

void sub_100244A48(unint64_t a1)
{
  STACK[0x270] = a1;
  LODWORD(STACK[0x260]) = 1;
  JUMPOUT(0x1002440B4);
}

void sub_100244A5C(unint64_t a1)
{
  STACK[0x270] = a1;
  LODWORD(STACK[0x260]) = 1;
  JUMPOUT(0x1002440C8);
}

void sub_100244A74(unint64_t a1)
{
  STACK[0x270] = a1;
  LODWORD(STACK[0x260]) = 1;
  JUMPOUT(0x1002440E0);
}

void sub_100244A88(unint64_t a1)
{
  STACK[0x270] = a1;
  LODWORD(STACK[0x260]) = 1;
  JUMPOUT(0x1002440F4);
}

void sub_100244A9C(unint64_t a1)
{
  STACK[0x270] = a1;
  LODWORD(STACK[0x260]) = 1;
  JUMPOUT(0x100244108);
}

void sub_100244AB4(unint64_t a1)
{
  STACK[0x270] = a1;
  LODWORD(STACK[0x260]) = 1;
  JUMPOUT(0x100244120);
}

void sub_100244AC8(unint64_t a1)
{
  STACK[0x270] = a1;
  LODWORD(STACK[0x260]) = 1;
  JUMPOUT(0x100244134);
}

void sub_100244ADC(unint64_t a1)
{
  STACK[0x270] = a1;
  LODWORD(STACK[0x260]) = 1;
  JUMPOUT(0x100244148);
}

void sub_100244AF4(unint64_t a1)
{
  STACK[0x270] = a1;
  LODWORD(STACK[0x260]) = 1;
  JUMPOUT(0x100244160);
}

void sub_100244B08(unint64_t a1)
{
  STACK[0x270] = a1;
  LODWORD(STACK[0x260]) = 1;
  JUMPOUT(0x100244174);
}

void sub_100244B1C(unint64_t a1)
{
  STACK[0x270] = a1;
  LODWORD(STACK[0x260]) = 1;
  JUMPOUT(0x100244188);
}

void sub_100244B34(unint64_t a1)
{
  STACK[0x270] = a1;
  LODWORD(STACK[0x260]) = 1;
  JUMPOUT(0x1002441A0);
}

void sub_100244B48(unint64_t a1)
{
  STACK[0x270] = a1;
  LODWORD(STACK[0x260]) = 1;
  JUMPOUT(0x1002441B4);
}

void sub_100244B5C(unint64_t a1)
{
  STACK[0x270] = a1;
  LODWORD(STACK[0x260]) = 1;
  JUMPOUT(0x1002441C8);
}

void sub_100244B74(unint64_t a1)
{
  STACK[0x270] = a1;
  LODWORD(STACK[0x260]) = 1;
  JUMPOUT(0x1002441E0);
}

void sub_100244B88(unint64_t a1)
{
  STACK[0x270] = a1;
  LODWORD(STACK[0x260]) = 1;
  JUMPOUT(0x1002441F4);
}

void sub_100244B9C(unint64_t a1)
{
  STACK[0x270] = a1;
  LODWORD(STACK[0x260]) = 1;
  JUMPOUT(0x100244208);
}

void sub_100244BB4(unint64_t a1)
{
  STACK[0x270] = a1;
  LODWORD(STACK[0x260]) = 1;
  JUMPOUT(0x100244220);
}

void sub_100244BC8(unint64_t a1)
{
  STACK[0x270] = a1;
  LODWORD(STACK[0x260]) = 1;
  JUMPOUT(0x100244234);
}

void sub_100244BDC(unint64_t a1)
{
  STACK[0x270] = a1;
  LODWORD(STACK[0x260]) = 1;
  JUMPOUT(0x100244248);
}

void sub_100244BF4(unint64_t a1)
{
  STACK[0x270] = a1;
  LODWORD(STACK[0x260]) = 1;
  JUMPOUT(0x100244260);
}

void sub_100244C08(unint64_t a1)
{
  STACK[0x270] = a1;
  LODWORD(STACK[0x260]) = 1;
  JUMPOUT(0x100244274);
}

void sub_100244C1C(unint64_t a1)
{
  STACK[0x270] = a1;
  LODWORD(STACK[0x260]) = 1;
  JUMPOUT(0x100244288);
}

void sub_100244C40(unint64_t a1)
{
  STACK[0x270] = a1;
  LODWORD(STACK[0x260]) = 1;
  JUMPOUT(0x1002442A0);
}

void sub_100244C5C(unint64_t a1)
{
  STACK[0x270] = a1;
  LODWORD(STACK[0x260]) = 1;
  JUMPOUT(0x1002442B4);
}

void sub_100244C78(unint64_t a1)
{
  STACK[0x270] = a1;
  LODWORD(STACK[0x260]) = 1;
  JUMPOUT(0x1002442FCLL);
}

void sub_100244C88(unint64_t a1)
{
  STACK[0x270] = a1;
  LODWORD(STACK[0x260]) = 1;
  JUMPOUT(0x1002442FCLL);
}

void sub_100244C9C(unint64_t a1)
{
  STACK[0x270] = a1;
  LODWORD(STACK[0x260]) = 1;
  JUMPOUT(0x100244314);
}

void sub_100244CB0(unint64_t a1)
{
  STACK[0x270] = a1;
  LODWORD(STACK[0x260]) = 1;
  JUMPOUT(0x100244338);
}

void sub_100244CC8(unint64_t a1)
{
  STACK[0x270] = a1;
  LODWORD(STACK[0x260]) = 1;
  JUMPOUT(0x100244350);
}

void sub_100244CE0(unint64_t a1)
{
  STACK[0x270] = a1;
  LODWORD(STACK[0x260]) = 1;
  JUMPOUT(0x100244364);
}

void sub_100244CF8(unint64_t a1)
{
  STACK[0x270] = a1;
  LODWORD(STACK[0x260]) = 1;
  JUMPOUT(0x100244378);
}

void sub_100244D14(unint64_t a1)
{
  STACK[0x270] = a1;
  LODWORD(STACK[0x260]) = 1;
  JUMPOUT(0x100244390);
}

void sub_100244D2C(unint64_t a1)
{
  STACK[0x270] = a1;
  LODWORD(STACK[0x260]) = 1;
  JUMPOUT(0x1002443A4);
}

void sub_100244D44(unint64_t a1)
{
  STACK[0x270] = a1;
  LODWORD(STACK[0x260]) = 1;
  JUMPOUT(0x1002443B8);
}

void sub_100244D60(unint64_t a1)
{
  STACK[0x270] = a1;
  LODWORD(STACK[0x260]) = 1;
  JUMPOUT(0x1002443D0);
}

void sub_100244D78(unint64_t a1)
{
  STACK[0x270] = a1;
  LODWORD(STACK[0x260]) = 1;
  JUMPOUT(0x1002443E4);
}

void sub_100244D90(unint64_t a1)
{
  STACK[0x270] = a1;
  LODWORD(STACK[0x260]) = 1;
  JUMPOUT(0x10024442CLL);
}

void sub_100244DB0(unint64_t a1)
{
  STACK[0x270] = a1;
  LODWORD(STACK[0x260]) = 1;
  JUMPOUT(0x100244444);
}

void sub_100244DCC(unint64_t a1)
{
  STACK[0x270] = a1;
  LODWORD(STACK[0x260]) = 1;
  JUMPOUT(0x100244450);
}

void sub_100244DE8(unint64_t a1)
{
  STACK[0x270] = a1;
  LODWORD(STACK[0x260]) = 1;
  JUMPOUT(0x100244468);
}

void sub_100244E0C(unint64_t a1)
{
  STACK[0x270] = a1;
  LODWORD(STACK[0x260]) = 1;
  JUMPOUT(0x100244480);
}

void sub_100244E2C(unint64_t a1)
{
  STACK[0x270] = a1;
  LODWORD(STACK[0x260]) = 1;
  JUMPOUT(0x10024448CLL);
}

void sub_100244E4C(unint64_t a1)
{
  STACK[0x270] = a1;
  LODWORD(STACK[0x260]) = 1;
  JUMPOUT(0x1002444A0);
}

void sub_100244E70(unint64_t a1)
{
  STACK[0x270] = a1;
  LODWORD(STACK[0x260]) = 1;
  JUMPOUT(0x1002444BCLL);
}

void sub_100244E90(unint64_t a1)
{
  STACK[0x270] = a1;
  LODWORD(STACK[0x260]) = 1;
  JUMPOUT(0x1002444D0);
}

void sub_100244EB0(unint64_t a1)
{
  STACK[0x270] = a1;
  LODWORD(STACK[0x260]) = 1;
  JUMPOUT(0x1002444E4);
}

void sub_100244ED4(unint64_t a1)
{
  STACK[0x270] = a1;
  LODWORD(STACK[0x260]) = 1;
  JUMPOUT(0x1002444F4);
}

void sub_100244EF0(unint64_t a1)
{
  STACK[0x270] = a1;
  LODWORD(STACK[0x260]) = 1;
  JUMPOUT(0x100244500);
}

void sub_100244F0C()
{
  JUMPOUT(0x100244514);
}

void sub_100244F38()
{
  JUMPOUT(0x100244524);
}

void sub_100244F58()
{
  JUMPOUT(0x100244530);
}

void sub_100244F74()
{
  JUMPOUT(0x1002445A0);
}

uint64_t sub_100244F7C()
{
  uint64_t v5;
  __int128 v7;
  __int128 v8;
  _QWORD *v9[3];
  __int128 v10;
  uint64_t v11;
  int v12;
  char v13;
  int v14;
  char v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  unint64_t v19;
  __int128 v20;
  int32x2_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  const void **v34[3];
  __int128 v35;
  _QWORD *v36[3];
  __int128 v37;
  uint64_t v38;
  int v39;
  char v40;
  int v41;
  char v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  unint64_t v46;
  __int128 v47;
  int32x2_t v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  int v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  const void **v61[3];
  __int128 v62;
  _QWORD *v63[3];
  __int128 v64;
  uint64_t v65;
  int v66;
  char v67;
  int v68;
  char v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  unint64_t v73;
  __int128 v74;
  int32x2_t v75;
  __int128 v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  __int128 v80;
  int v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  const void **v88[3];
  __int128 v89;
  _QWORD *v90[3];
  __int128 v91;
  uint64_t v92;
  int v93;
  char v94;
  int v95;
  char v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  unint64_t v100;
  __int128 v101;
  int32x2_t v102;
  __int128 v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  __int128 v107;
  int v108;
  uint64_t v109;
  int v110;
  uint64_t v111;
  int v112;
  uint64_t v113;
  uint64_t v114;
  const void **v115[3];
  __int128 v116;
  _QWORD *v117[3];
  __int128 v118;
  uint64_t v119;
  int v120;
  char v121;
  int v122;
  char v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  unint64_t v127;
  __int128 v128;
  int32x2_t v129;
  __int128 v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  __int128 v134;
  int v135;
  uint64_t v136;
  int v137;
  uint64_t v138;
  int v139;
  uint64_t v140;
  uint64_t v141;
  const void **v142[3];
  __int128 v143;
  _QWORD *v144[3];
  __int128 v145;
  uint64_t v146;
  int v147;
  char v148;
  int v149;
  char v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  unint64_t v154;
  __int128 v155;
  int32x2_t v156;
  __int128 v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  __int128 v161;
  int v162;
  uint64_t v163;
  int v164;
  uint64_t v165;
  int v166;
  uint64_t v167;
  uint64_t v168;
  const void **v169[3];
  __int128 v170;
  _QWORD *v171[3];
  __int128 v172;
  uint64_t v173;
  int v174;
  char v175;
  int v176;
  char v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  unint64_t v181;
  __int128 v182;
  int32x2_t v183;
  __int128 v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  __int128 v188;
  int v189;
  uint64_t v190;
  int v191;
  uint64_t v192;
  int v193;
  uint64_t v194;
  uint64_t v195;
  const void **v196[3];
  __int128 v197;
  _QWORD *v198[3];
  __int128 v199;
  uint64_t v200;
  int v201;
  char v202;
  int v203;
  char v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  unint64_t v208;
  __int128 v209;
  int32x2_t v210;
  __int128 v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  __int128 v215;
  int v216;
  uint64_t v217;
  int v218;
  uint64_t v219;
  int v220;
  uint64_t v221;
  uint64_t v222;
  const void **v223[3];
  __int128 v224;
  _QWORD *v225[3];
  __int128 v226;
  uint64_t v227;
  int v228;
  char v229;
  int v230;
  char v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  unint64_t v235;
  __int128 v236;
  int32x2_t v237;
  __int128 v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  __int128 v242;
  int v243;
  uint64_t v244;
  int v245;
  uint64_t v246;
  int v247;
  uint64_t v248;
  uint64_t v249;
  const void **v250[3];
  __int128 v251;
  _QWORD *v252[3];
  __int128 v253;
  uint64_t v254;
  int v255;
  char v256;
  int v257;
  char v258;
  __int128 v259;
  __int128 v260;
  __int128 v261;
  unint64_t v262;
  __int128 v263;
  int32x2_t v264;
  __int128 v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  __int128 v269;
  int v270;
  uint64_t v271;
  int v272;
  uint64_t v273;
  int v274;
  uint64_t v275;
  uint64_t v276;
  const void **v277[3];
  __int128 v278;
  _QWORD *v279[3];
  __int128 v280;
  uint64_t v281;
  int v282;
  char v283;
  int v284;
  char v285;
  __int128 v286;
  __int128 v287;
  __int128 v288;
  unint64_t v289;
  __int128 v290;
  int32x2_t v291;
  __int128 v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  __int128 v296;
  int v297;
  uint64_t v298;
  int v299;
  uint64_t v300;
  int v301;
  uint64_t v302;
  uint64_t v303;
  const void **v304[3];
  __int128 v305;
  _QWORD *v306[3];
  __int128 v307;
  uint64_t v308;
  int v309;
  char v310;
  int v311;
  char v312;
  __int128 v313;
  __int128 v314;
  __int128 v315;
  unint64_t v316;
  __int128 v317;
  int32x2_t v318;
  __int128 v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  __int128 v323;
  int v324;
  uint64_t v325;
  int v326;
  uint64_t v327;
  int v328;
  uint64_t v329;
  uint64_t v330;
  const void **v331[3];
  __int128 v332;
  _QWORD *v333[3];
  __int128 v334;
  uint64_t v335;
  int v336;
  char v337;
  int v338;
  char v339;
  __int128 v340;
  __int128 v341;
  __int128 v342;
  unint64_t v343;
  __int128 v344;
  int32x2_t v345;
  __int128 v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  __int128 v350;
  int v351;
  uint64_t v352;
  int v353;
  uint64_t v354;
  int v355;
  uint64_t v356;
  uint64_t v357;
  const void **v358[4];
  __int128 v359;
  _QWORD *v360[3];
  __int128 v361;
  uint64_t v362;
  int v363;
  char v364;
  int v365;
  char v366;
  __int128 v367;
  __int128 v368;
  __int128 v369;
  unint64_t v370;
  __int128 v371;
  int32x2_t v372;
  __int128 v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  __int128 v377;
  int v378;
  uint64_t v379;
  int v380;
  uint64_t v381;
  int v382;
  uint64_t v383;
  uint64_t v384;
  const void **v385[4];
  __int128 v386;
  _QWORD *v387[3];
  __int128 v388;
  uint64_t v389;
  int v390;
  char v391;
  int v392;
  char v393;
  __int128 v394;
  __int128 v395;
  __int128 v396;
  unint64_t v397;
  __int128 v398;
  int32x2_t v399;
  __int128 v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  __int128 v404;
  int v405;
  uint64_t v406;
  int v407;
  uint64_t v408;
  int v409;
  uint64_t v410;
  uint64_t v411;
  const void **v412[4];
  __int128 v413;
  _QWORD *v414[3];
  __int128 v415;
  uint64_t v416;
  int v417;
  char v418;
  int v419;
  char v420;
  __int128 v421;
  __int128 v422;
  __int128 v423;
  unint64_t v424;
  __int128 v425;
  int32x2_t v426;
  __int128 v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  __int128 v431;
  int v432;
  uint64_t v433;
  int v434;
  uint64_t v435;
  int v436;
  uint64_t v437;
  uint64_t v438;
  const void **v439[4];
  __int128 v440;
  _QWORD *v441[3];
  __int128 v442;
  uint64_t v443;
  int v444;
  char v445;
  int v446;
  char v447;
  __int128 v448;
  __int128 v449;
  __int128 v450;
  unint64_t v451;
  __int128 v452;
  int32x2_t v453;
  __int128 v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  __int128 v458;
  int v459;
  uint64_t v460;
  int v461;
  uint64_t v462;
  int v463;
  uint64_t v464;
  uint64_t v465;
  const void **v466[4];
  __int128 v467;
  _QWORD *v468[3];
  __int128 v469;
  uint64_t v470;
  int v471;
  char v472;
  int v473;
  char v474;
  __int128 v475;
  __int128 v476;
  __int128 v477;
  unint64_t v478;
  __int128 v479;
  int32x2_t v480;
  __int128 v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  __int128 v485;
  int v486;
  uint64_t v487;
  int v488;
  uint64_t v489;
  int v490;
  uint64_t v491;
  uint64_t v492;
  const void **v493[4];
  __int128 v494;
  _QWORD *v495[3];
  __int128 v496;
  uint64_t v497;
  int v498;
  char v499;
  int v500;
  char v501;
  __int128 v502;
  __int128 v503;
  __int128 v504;
  unint64_t v505;
  __int128 v506;
  int32x2_t v507;
  __int128 v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t v511;
  __int128 v512;
  int v513;
  uint64_t v514;
  int v515;
  uint64_t v516;
  int v517;
  uint64_t v518;
  uint64_t v519;
  const void **v520[4];
  __int128 v521;
  _QWORD *v522[3];
  __int128 v523;
  uint64_t v524;
  int v525;
  char v526;
  int v527;
  char v528;
  __int128 v529;
  __int128 v530;
  __int128 v531;
  unint64_t v532;
  __int128 v533;
  int32x2_t v534;
  __int128 v535;
  uint64_t v536;
  uint64_t v537;
  uint64_t v538;
  __int128 v539;
  int v540;
  uint64_t v541;
  int v542;
  uint64_t v543;
  int v544;
  uint64_t v545;
  uint64_t v546;
  const void **v547[3];
  const void **v548[3];
  double v549;
  const void *v550[2];
  char v551;
  _QWORD *v552[33];
  const void *v553[2];
  char v554;
  _QWORD *v555[33];
  const void *v556[2];
  char v557;
  _QWORD *v558[33];
  const void *v559[2];
  char v560;
  _QWORD *v561[33];
  const void *v562[2];
  char v563;
  _QWORD *v564[33];
  const void *v565[2];
  char v566;
  _QWORD *v567[33];
  const void *v568[2];
  char v569;
  _QWORD *v570[33];
  const void *v571[2];
  char v572;
  _QWORD *v573[33];
  const void *v574[2];
  char v575;
  _QWORD *v576[33];
  const void *v577[2];
  char v578;
  _QWORD *v579[33];
  const void *v580[2];
  char v581;
  _QWORD *v582[33];
  const void *v583[2];
  char v584;
  _QWORD *v585[33];
  const void *v586[2];
  char v587;
  _QWORD *v588[33];
  const void *v589[2];
  char v590;
  _QWORD *v591[33];
  const void *v592[2];
  char v593;
  _QWORD *v594[33];
  const void *v595[2];
  char v596;
  _QWORD *v597[33];
  const void *v598[2];
  char v599;
  _QWORD *v600[33];
  const void *v601[2];
  char v602;
  _QWORD *v603[33];
  const void *v604[2];
  char v605;
  _QWORD *v606[33];
  const void *v607[2];
  char v608;
  _QWORD *v609[33];
  const void *v610[6];
  _QWORD v611[6];
  _QWORD v612[6];
  _QWORD v613[6];
  _QWORD v614[6];
  _QWORD v615[6];
  _QWORD v616[6];
  _QWORD v617[6];
  _QWORD v618[6];
  _QWORD v619[6];
  _QWORD v620[6];
  _QWORD v621[6];
  _QWORD v622[6];
  _QWORD v623[6];
  _QWORD v624[6];
  _QWORD v625[6];
  _QWORD v626[6];
  _QWORD v627[6];
  _QWORD v628[6];
  _QWORD v629[6];
  int v630;
  uint64_t v631[3];

  *(_QWORD *)&v521 = 0x300000010;
  *((_QWORD *)&v521 + 1) = 0xC044000000000000;
  v604[0] = (const void *)0xC044000000000000;
  sub_10018252C((uint64_t)v522, (double *)v604, 1);
  v523 = xmmword_10046E0F0;
  v524 = 0x4024000000000000;
  v525 = 45;
  v526 = 0;
  v527 = 1;
  v528 = 1;
  v529 = xmmword_10046E100;
  v530 = xmmword_10046E110;
  __asm { FMOV            V0.2D, #1.0 }
  v7 = _Q0;
  v531 = _Q0;
  v532 = 0xC059000000000000;
  v533 = xmmword_10046E120;
  v534 = vdup_n_s32(0x3DCCCCCDu);
  v535 = xmmword_10046E060;
  v537 = 0;
  v538 = 0;
  v536 = 0x3FD999999999999ALL;
  v539 = xmmword_10046E070;
  v540 = 5;
  v541 = 0x4000000000000000;
  v542 = 10;
  v543 = 0x4034000000000000;
  v544 = 3;
  v545 = 0x3FF0000000000000;
  v546 = 0x4008000000000000;
  sub_1002322E8((char *)v607, &qword_100859D48, &v521);
  sub_100233C04((uint64_t)v547, v607, 1);
  sub_1002323C8(v610, &xmmword_100859A30, v547);
  *(_QWORD *)&v494 = 0x300000010;
  *((_QWORD *)&v494 + 1) = 0xC044000000000000;
  v601[0] = (const void *)0xC044000000000000;
  sub_10018252C((uint64_t)v495, (double *)v601, 1);
  v496 = xmmword_10046E0F0;
  v497 = 0x4024000000000000;
  v498 = 45;
  v499 = 0;
  v500 = 1;
  v501 = 1;
  v502 = xmmword_10046E100;
  v503 = xmmword_10046E110;
  v504 = v7;
  v505 = 0xC059000000000000;
  v506 = xmmword_10046E120;
  v507 = vdup_n_s32(0x3DCCCCCDu);
  v508 = xmmword_10046E060;
  v510 = 0;
  v511 = 0;
  v509 = 0x3FD999999999999ALL;
  v512 = xmmword_10046E070;
  v513 = 5;
  v514 = 0x4000000000000000;
  v515 = 10;
  v516 = 0x4034000000000000;
  v517 = 3;
  v518 = 0x3FF0000000000000;
  v519 = 0x4008000000000000;
  sub_1002322E8((char *)v604, &qword_100859D48, &v494);
  sub_100233C04((uint64_t)v520, v604, 1);
  sub_1002323C8(v611, &xmmword_100859A48, v520);
  *(_QWORD *)&v467 = 0x300000010;
  *((_QWORD *)&v467 + 1) = 0xC044800000000000;
  v598[0] = (const void *)0xC044800000000000;
  sub_10018252C((uint64_t)v468, (double *)v598, 1);
  v469 = xmmword_10046E0F0;
  v470 = 0x4024000000000000;
  v471 = 45;
  v472 = 0;
  v473 = 1;
  v474 = 1;
  v475 = xmmword_10046E100;
  v476 = xmmword_10046E110;
  v477 = v7;
  v478 = 0xC059000000000000;
  v479 = xmmword_10046E120;
  v480 = vdup_n_s32(0x3DCCCCCDu);
  v481 = xmmword_10046E060;
  v483 = 0;
  v484 = 0;
  v482 = 0x3FD999999999999ALL;
  v485 = xmmword_10046E070;
  v486 = 5;
  v487 = 0x4000000000000000;
  v488 = 10;
  v489 = 0x4034000000000000;
  v490 = 3;
  v491 = 0x3FF0000000000000;
  v492 = 0x4008000000000000;
  sub_1002322E8((char *)v601, &qword_100859D48, &v467);
  sub_100233C04((uint64_t)v493, v601, 1);
  sub_1002323C8(v612, &xmmword_100859A60, v493);
  *(_QWORD *)&v440 = 0x300000010;
  *((_QWORD *)&v440 + 1) = 0xC044800000000000;
  v595[0] = (const void *)0xC044800000000000;
  sub_10018252C((uint64_t)v441, (double *)v595, 1);
  v442 = xmmword_10046E0F0;
  v443 = 0x4024000000000000;
  v444 = 45;
  v445 = 0;
  v446 = 1;
  v447 = 1;
  v448 = xmmword_10046E100;
  v449 = xmmword_10046E110;
  v450 = v7;
  v451 = 0xC059000000000000;
  v452 = xmmword_10046E120;
  v453 = vdup_n_s32(0x3DCCCCCDu);
  v454 = xmmword_10046E060;
  v456 = 0;
  v457 = 0;
  v455 = 0x3FD999999999999ALL;
  v458 = xmmword_10046E070;
  v459 = 5;
  v460 = 0x4000000000000000;
  v461 = 10;
  v462 = 0x4034000000000000;
  v463 = 3;
  v464 = 0x3FF0000000000000;
  v465 = 0x4008000000000000;
  sub_1002322E8((char *)v598, &qword_100859D48, &v440);
  sub_100233C04((uint64_t)v466, v598, 1);
  sub_1002323C8(v613, &xmmword_100859A78, v466);
  *(_QWORD *)&v413 = 0x300000010;
  *((_QWORD *)&v413 + 1) = 0xC044000000000000;
  v592[0] = (const void *)0xC044000000000000;
  sub_10018252C((uint64_t)v414, (double *)v592, 1);
  v415 = xmmword_10046E0F0;
  v416 = 0x4024000000000000;
  v417 = 45;
  v418 = 0;
  v419 = 1;
  v420 = 1;
  v421 = xmmword_10046E100;
  v422 = xmmword_10046E110;
  v423 = v7;
  v424 = 0xC059000000000000;
  v425 = xmmword_10046E120;
  v426 = vdup_n_s32(0x3DCCCCCDu);
  v427 = xmmword_10046E060;
  v429 = 0;
  v430 = 0;
  v428 = 0x3FD999999999999ALL;
  v431 = xmmword_10046E070;
  v432 = 5;
  v433 = 0x4000000000000000;
  v434 = 10;
  v435 = 0x4034000000000000;
  v436 = 3;
  v437 = 0x3FF0000000000000;
  v438 = 0x4008000000000000;
  sub_1002322E8((char *)v595, &qword_100859D48, &v413);
  sub_100233C04((uint64_t)v439, v595, 1);
  sub_1002323C8(v614, &xmmword_100859A90, v439);
  *(_QWORD *)&v386 = 0x300000010;
  *((_QWORD *)&v386 + 1) = 0xC044800000000000;
  v589[0] = (const void *)0xC044800000000000;
  sub_10018252C((uint64_t)v387, (double *)v589, 1);
  v388 = xmmword_10046E0F0;
  v389 = 0x4024000000000000;
  v390 = 45;
  v391 = 0;
  v392 = 1;
  v393 = 1;
  v394 = xmmword_10046E100;
  v395 = xmmword_10046E110;
  v396 = v7;
  v397 = 0xC059000000000000;
  v398 = xmmword_10046E120;
  v399 = vdup_n_s32(0x3DCCCCCDu);
  v400 = xmmword_10046E060;
  v402 = 0;
  v403 = 0;
  v401 = 0x3FD999999999999ALL;
  v404 = xmmword_10046E070;
  v405 = 5;
  v406 = 0x4000000000000000;
  v407 = 10;
  v408 = 0x4034000000000000;
  v409 = 3;
  v410 = 0x3FF0000000000000;
  v411 = 0x4008000000000000;
  sub_1002322E8((char *)v592, &qword_100859D48, &v386);
  sub_100233C04((uint64_t)v412, v592, 1);
  sub_1002323C8(v615, &xmmword_100859AA8, v412);
  *(_QWORD *)&v359 = 0x300000010;
  *((_QWORD *)&v359 + 1) = 0xC044800000000000;
  v586[0] = (const void *)0xC044800000000000;
  sub_10018252C((uint64_t)v360, (double *)v586, 1);
  v361 = xmmword_10046E0F0;
  v362 = 0x4024000000000000;
  v363 = 45;
  v364 = 0;
  v365 = 1;
  v366 = 1;
  v367 = xmmword_10046E100;
  v368 = xmmword_10046E110;
  v369 = v7;
  v370 = 0xC059000000000000;
  v371 = xmmword_10046E120;
  v372 = vdup_n_s32(0x3DCCCCCDu);
  v373 = xmmword_10046E060;
  v375 = 0;
  v376 = 0;
  v374 = 0x3FD999999999999ALL;
  v377 = xmmword_10046E070;
  v378 = 5;
  v379 = 0x4000000000000000;
  v380 = 10;
  v381 = 0x4034000000000000;
  v382 = 3;
  v383 = 0x3FF0000000000000;
  v384 = 0x4008000000000000;
  sub_1002322E8((char *)v589, &qword_100859D48, &v359);
  sub_100233C04((uint64_t)v385, v589, 1);
  sub_1002323C8(v616, &xmmword_100859AC0, v385);
  *(_QWORD *)&v332 = 0x300000010;
  *((_QWORD *)&v332 + 1) = 0xC044800000000000;
  v583[0] = (const void *)0xC044800000000000;
  sub_10018252C((uint64_t)v333, (double *)v583, 1);
  v334 = xmmword_10046E0F0;
  v335 = 0x4024000000000000;
  v336 = 45;
  v337 = 0;
  v338 = 1;
  v339 = 1;
  v340 = xmmword_10046E100;
  v341 = xmmword_10046E110;
  v342 = v7;
  v343 = 0xC059000000000000;
  v344 = xmmword_10046E120;
  v345 = vdup_n_s32(0x3DCCCCCDu);
  v346 = xmmword_10046E060;
  v348 = 0;
  v349 = 0;
  v347 = 0x3FD999999999999ALL;
  v350 = xmmword_10046E070;
  v351 = 5;
  v352 = 0x4000000000000000;
  v353 = 10;
  v354 = 0x4034000000000000;
  v355 = 3;
  v356 = 0x3FF0000000000000;
  v357 = 0x4008000000000000;
  sub_1002322E8((char *)v586, &qword_100859D48, &v332);
  sub_100233C04((uint64_t)v358, v586, 1);
  sub_1002323C8(v617, &xmmword_100859AD8, v358);
  *(_QWORD *)&v305 = 0x300000010;
  *((_QWORD *)&v305 + 1) = 0xC044800000000000;
  v580[0] = (const void *)0xC044800000000000;
  sub_10018252C((uint64_t)v306, (double *)v580, 1);
  v307 = xmmword_10046E0F0;
  v308 = 0x4024000000000000;
  v309 = 45;
  v310 = 0;
  v311 = 1;
  v312 = 1;
  v313 = xmmword_10046E100;
  v314 = xmmword_10046E110;
  v315 = v7;
  v316 = 0xC059000000000000;
  v317 = xmmword_10046E120;
  v318 = vdup_n_s32(0x3DCCCCCDu);
  v319 = xmmword_10046E060;
  v321 = 0;
  v322 = 0;
  v320 = 0x3FD999999999999ALL;
  v323 = xmmword_10046E070;
  v324 = 5;
  v325 = 0x4000000000000000;
  v326 = 10;
  v327 = 0x4034000000000000;
  v328 = 3;
  v329 = 0x3FF0000000000000;
  v330 = 0x4008000000000000;
  sub_1002322E8((char *)v583, &qword_100859D48, &v305);
  sub_100233C04((uint64_t)v331, v583, 1);
  sub_1002323C8(v618, &xmmword_100859AF0, v331);
  *(_QWORD *)&v278 = 0x300000010;
  *((_QWORD *)&v278 + 1) = 0xC044800000000000;
  v577[0] = (const void *)0xC044800000000000;
  sub_10018252C((uint64_t)v279, (double *)v577, 1);
  v280 = xmmword_10046E0F0;
  v281 = 0x4024000000000000;
  v282 = 45;
  v283 = 0;
  v284 = 1;
  v285 = 1;
  v286 = xmmword_10046E100;
  v287 = xmmword_10046E110;
  v288 = v7;
  v289 = 0xC059000000000000;
  v290 = xmmword_10046E120;
  v291 = vdup_n_s32(0x3DCCCCCDu);
  v292 = xmmword_10046E060;
  v294 = 0;
  v295 = 0;
  v293 = 0x3FD999999999999ALL;
  v296 = xmmword_10046E070;
  v297 = 5;
  v298 = 0x4000000000000000;
  v299 = 10;
  v300 = 0x4034000000000000;
  v301 = 3;
  v302 = 0x3FF0000000000000;
  v303 = 0x4008000000000000;
  sub_1002322E8((char *)v580, &qword_100859D48, &v278);
  sub_100233C04((uint64_t)v304, v580, 1);
  sub_1002323C8(v619, &xmmword_100859B08, v304);
  *(_QWORD *)&v251 = 0x300000010;
  *((_QWORD *)&v251 + 1) = 0xC044800000000000;
  v574[0] = (const void *)0xC044800000000000;
  sub_10018252C((uint64_t)v252, (double *)v574, 1);
  v253 = xmmword_10046E0F0;
  v254 = 0x4024000000000000;
  v255 = 45;
  v256 = 0;
  v257 = 1;
  v258 = 1;
  v259 = xmmword_10046E100;
  v260 = xmmword_10046E110;
  v261 = v7;
  v262 = 0xC059000000000000;
  v263 = xmmword_10046E120;
  v264 = vdup_n_s32(0x3DCCCCCDu);
  v265 = xmmword_10046E060;
  v267 = 0;
  v268 = 0;
  v266 = 0x3FD999999999999ALL;
  v269 = xmmword_10046E070;
  v270 = 5;
  v271 = 0x4000000000000000;
  v272 = 10;
  v273 = 0x4034000000000000;
  v274 = 3;
  v275 = 0x3FF0000000000000;
  v276 = 0x4008000000000000;
  sub_1002322E8((char *)v577, &qword_100859D48, &v251);
  sub_100233C04((uint64_t)v277, v577, 1);
  sub_1002323C8(v620, &xmmword_100859B20, v277);
  *(_QWORD *)&v224 = 0x300000010;
  *((_QWORD *)&v224 + 1) = 0xC044800000000000;
  v571[0] = (const void *)0xC044800000000000;
  sub_10018252C((uint64_t)v225, (double *)v571, 1);
  v226 = xmmword_10046E0F0;
  v227 = 0x4024000000000000;
  v228 = 45;
  v229 = 0;
  v230 = 1;
  v231 = 1;
  v232 = xmmword_10046E100;
  v233 = xmmword_10046E110;
  v234 = v7;
  v235 = 0xC059000000000000;
  v236 = xmmword_10046E120;
  v237 = vdup_n_s32(0x3DCCCCCDu);
  v238 = xmmword_10046E060;
  v240 = 0;
  v241 = 0;
  v239 = 0x3FD999999999999ALL;
  v242 = xmmword_10046E070;
  v243 = 5;
  v244 = 0x4000000000000000;
  v245 = 10;
  v246 = 0x4034000000000000;
  v247 = 3;
  v248 = 0x3FF0000000000000;
  v249 = 0x4008000000000000;
  sub_1002322E8((char *)v574, &qword_100859D48, &v224);
  sub_100233C04((uint64_t)v250, v574, 1);
  sub_1002323C8(v621, &xmmword_100859B38, v250);
  *(_QWORD *)&v197 = 0x300000010;
  *((_QWORD *)&v197 + 1) = 0xC044800000000000;
  v568[0] = (const void *)0xC044800000000000;
  sub_10018252C((uint64_t)v198, (double *)v568, 1);
  v199 = xmmword_10046E0F0;
  v200 = 0x4024000000000000;
  v201 = 45;
  v202 = 0;
  v203 = 1;
  v204 = 1;
  v205 = xmmword_10046E100;
  v206 = xmmword_10046E110;
  v207 = v7;
  v208 = 0xC059000000000000;
  v209 = xmmword_10046E120;
  v210 = vdup_n_s32(0x3DCCCCCDu);
  v211 = xmmword_10046E060;
  v213 = 0;
  v214 = 0;
  v212 = 0x3FD999999999999ALL;
  v215 = xmmword_10046E070;
  v216 = 5;
  v217 = 0x4000000000000000;
  v218 = 10;
  v219 = 0x4034000000000000;
  v220 = 3;
  v221 = 0x3FF0000000000000;
  v222 = 0x4008000000000000;
  sub_1002322E8((char *)v571, &qword_100859D48, &v197);
  sub_100233C04((uint64_t)v223, v571, 1);
  sub_1002323C8(v622, &xmmword_100859B50, v223);
  *(_QWORD *)&v170 = 0x300000010;
  *((_QWORD *)&v170 + 1) = 0xC044800000000000;
  v565[0] = (const void *)0xC044800000000000;
  sub_10018252C((uint64_t)v171, (double *)v565, 1);
  v172 = xmmword_10046E0F0;
  v173 = 0x4024000000000000;
  v174 = 45;
  v175 = 0;
  v176 = 1;
  v177 = 1;
  v178 = xmmword_10046E100;
  v179 = xmmword_10046E110;
  v180 = v7;
  v181 = 0xC059000000000000;
  v182 = xmmword_10046E120;
  v183 = vdup_n_s32(0x3DCCCCCDu);
  v184 = xmmword_10046E060;
  v186 = 0;
  v187 = 0;
  v185 = 0x3FD999999999999ALL;
  v188 = xmmword_10046E070;
  v189 = 5;
  v190 = 0x4000000000000000;
  v191 = 10;
  v192 = 0x4034000000000000;
  v193 = 3;
  v194 = 0x3FF0000000000000;
  v195 = 0x4008000000000000;
  sub_1002322E8((char *)v568, &qword_100859D48, &v170);
  sub_100233C04((uint64_t)v196, v568, 1);
  sub_1002323C8(v623, &xmmword_100859B68, v196);
  *(_QWORD *)&v143 = 0x300000010;
  *((_QWORD *)&v143 + 1) = 0xC044800000000000;
  v562[0] = (const void *)0xC044800000000000;
  sub_10018252C((uint64_t)v144, (double *)v562, 1);
  v145 = xmmword_10046E0F0;
  v146 = 0x4024000000000000;
  v147 = 45;
  v148 = 0;
  v149 = 1;
  v150 = 1;
  v151 = xmmword_10046E100;
  v152 = xmmword_10046E110;
  v153 = v7;
  v154 = 0xC059000000000000;
  v155 = xmmword_10046E120;
  v156 = vdup_n_s32(0x3DCCCCCDu);
  v157 = xmmword_10046E060;
  v159 = 0;
  v160 = 0;
  v158 = 0x3FD999999999999ALL;
  v161 = xmmword_10046E070;
  v162 = 5;
  v163 = 0x4000000000000000;
  v164 = 10;
  v165 = 0x4034000000000000;
  v166 = 3;
  v167 = 0x3FF0000000000000;
  v168 = 0x4008000000000000;
  sub_1002322E8((char *)v565, &qword_100859D48, &v143);
  sub_100233C04((uint64_t)v169, v565, 1);
  sub_1002323C8(v624, &xmmword_100859B80, v169);
  *(_QWORD *)&v116 = 0x300000010;
  *((_QWORD *)&v116 + 1) = 0xC044800000000000;
  v559[0] = (const void *)0xC044800000000000;
  sub_10018252C((uint64_t)v117, (double *)v559, 1);
  v118 = xmmword_10046E0F0;
  v119 = 0x4024000000000000;
  v120 = 45;
  v121 = 0;
  v122 = 1;
  v123 = 1;
  v124 = xmmword_10046E100;
  v125 = xmmword_10046E110;
  v126 = v7;
  v127 = 0xC059000000000000;
  v128 = xmmword_10046E120;
  v129 = vdup_n_s32(0x3DCCCCCDu);
  v130 = xmmword_10046E060;
  v132 = 0;
  v133 = 0;
  v131 = 0x3FD999999999999ALL;
  v134 = xmmword_10046E070;
  v135 = 5;
  v136 = 0x4000000000000000;
  v137 = 10;
  v138 = 0x4034000000000000;
  v139 = 3;
  v140 = 0x3FF0000000000000;
  v141 = 0x4008000000000000;
  sub_1002322E8((char *)v562, &qword_100859D48, &v116);
  sub_100233C04((uint64_t)v142, v562, 1);
  sub_1002323C8(v625, &xmmword_100859B98, v142);
  *(_QWORD *)&v89 = 0x300000010;
  *((_QWORD *)&v89 + 1) = 0xC044800000000000;
  v556[0] = (const void *)0xC044800000000000;
  sub_10018252C((uint64_t)v90, (double *)v556, 1);
  v91 = xmmword_10046E0F0;
  v92 = 0x4024000000000000;
  v93 = 45;
  v94 = 0;
  v95 = 1;
  v96 = 1;
  v97 = xmmword_10046E100;
  v98 = xmmword_10046E110;
  v99 = v7;
  v100 = 0xC059000000000000;
  v101 = xmmword_10046E120;
  v102 = vdup_n_s32(0x3DCCCCCDu);
  v103 = xmmword_10046E060;
  v105 = 0;
  v106 = 0;
  v104 = 0x3FD999999999999ALL;
  v107 = xmmword_10046E070;
  v108 = 5;
  v109 = 0x4000000000000000;
  v110 = 10;
  v111 = 0x4034000000000000;
  v112 = 3;
  v113 = 0x3FF0000000000000;
  v114 = 0x4008000000000000;
  sub_1002322E8((char *)v559, &qword_100859D48, &v89);
  sub_100233C04((uint64_t)v115, v559, 1);
  sub_1002323C8(v626, &xmmword_100859BB0, v115);
  *(_QWORD *)&v62 = 0x300000010;
  *((_QWORD *)&v62 + 1) = 0xC044800000000000;
  v553[0] = (const void *)0xC044800000000000;
  sub_10018252C((uint64_t)v63, (double *)v553, 1);
  v64 = xmmword_10046E0F0;
  v65 = 0x4024000000000000;
  v66 = 45;
  v67 = 0;
  v68 = 1;
  v69 = 1;
  v70 = xmmword_10046E100;
  v71 = xmmword_10046E110;
  v72 = v7;
  v73 = 0xC059000000000000;
  v74 = xmmword_10046E120;
  v75 = vdup_n_s32(0x3DCCCCCDu);
  v76 = xmmword_10046E060;
  v78 = 0;
  v79 = 0;
  v77 = 0x3FD999999999999ALL;
  v80 = xmmword_10046E070;
  v81 = 5;
  v82 = 0x4000000000000000;
  v83 = 10;
  v84 = 0x4034000000000000;
  v85 = 3;
  v86 = 0x3FF0000000000000;
  v87 = 0x4008000000000000;
  sub_1002322E8((char *)v556, &qword_100859D48, &v62);
  sub_100233C04((uint64_t)v88, v556, 1);
  sub_1002323C8(v627, &xmmword_100859BC8, v88);
  *(_QWORD *)&v35 = 0x300000010;
  *((_QWORD *)&v35 + 1) = 0xC044800000000000;
  v550[0] = (const void *)0xC044800000000000;
  sub_10018252C((uint64_t)v36, (double *)v550, 1);
  v37 = xmmword_10046E0F0;
  v38 = 0x4024000000000000;
  v39 = 45;
  v40 = 0;
  v41 = 1;
  v42 = 1;
  v43 = xmmword_10046E100;
  v44 = xmmword_10046E110;
  v45 = v7;
  v46 = 0xC059000000000000;
  v47 = xmmword_10046E120;
  v48 = vdup_n_s32(0x3DCCCCCDu);
  v49 = xmmword_10046E060;
  v51 = 0;
  v52 = 0;
  v50 = 0x3FD999999999999ALL;
  v53 = xmmword_10046E070;
  v54 = 5;
  v55 = 0x4000000000000000;
  v56 = 10;
  v57 = 0x4034000000000000;
  v58 = 3;
  v59 = 0x3FF0000000000000;
  v60 = 0x4008000000000000;
  sub_1002322E8((char *)v553, &qword_100859D48, &v35);
  sub_100233C04((uint64_t)v61, v553, 1);
  sub_1002323C8(v628, &xmmword_100859BE0, v61);
  *(_QWORD *)&v8 = 0x300000010;
  *((_QWORD *)&v8 + 1) = 0xC044800000000000;
  v549 = -41.0;
  sub_10018252C((uint64_t)v9, &v549, 1);
  v10 = xmmword_10046E0F0;
  v11 = 0x4024000000000000;
  v12 = 45;
  v13 = 0;
  v14 = 1;
  v15 = 1;
  v16 = xmmword_10046E100;
  v17 = xmmword_10046E110;
  v18 = v7;
  v19 = 0xC059000000000000;
  v20 = xmmword_10046E120;
  v21 = vdup_n_s32(0x3DCCCCCDu);
  v22 = xmmword_10046E060;
  v24 = 0;
  v25 = 0;
  v23 = 0x3FD999999999999ALL;
  v26 = xmmword_10046E070;
  v27 = 5;
  v28 = 0x4000000000000000;
  v29 = 10;
  v30 = 0x4034000000000000;
  v31 = 3;
  v32 = 0x3FF0000000000000;
  v33 = 0x4008000000000000;
  sub_1002322E8((char *)v550, &qword_100859D48, &v8);
  sub_100233C04((uint64_t)v34, v550, 1);
  sub_1002323C8(v629, &xmmword_100859BF8, v34);
  sub_100233F58((uint64_t)v548, v610, 20);
  v630 = 2;
  sub_10023418C(v631, v548);
  sub_100234264((uint64_t)&unk_10085FCA0, &v630, 1);
  sub_100233AF4((uint64_t)v631, (_QWORD *)v631[1]);
  sub_100233AF4((uint64_t)v548, v548[1]);
  v5 = 120;
  do
  {
    sub_100233B7C((uint64_t)&v609[v5 + 30], v609[v5 + 31]);
    if (SHIBYTE(v609[v5 + 29]) < 0)
      operator delete(v609[v5 + 27]);
    v5 -= 6;
  }
  while (v5 * 8);
  sub_100233B7C((uint64_t)v34, v34[1]);
  sub_10003E3F0((uint64_t)v552, v552[1]);
  if (v551 < 0)
    operator delete((void *)v550[0]);
  sub_10003E3F0((uint64_t)v9, v9[1]);
  sub_100233B7C((uint64_t)v61, v61[1]);
  sub_10003E3F0((uint64_t)v555, v555[1]);
  if (v554 < 0)
    operator delete((void *)v553[0]);
  sub_10003E3F0((uint64_t)v36, v36[1]);
  sub_100233B7C((uint64_t)v88, v88[1]);
  sub_10003E3F0((uint64_t)v558, v558[1]);
  if (v557 < 0)
    operator delete((void *)v556[0]);
  sub_10003E3F0((uint64_t)v63, v63[1]);
  sub_100233B7C((uint64_t)v115, v115[1]);
  sub_10003E3F0((uint64_t)v561, v561[1]);
  if (v560 < 0)
    operator delete((void *)v559[0]);
  sub_10003E3F0((uint64_t)v90, v90[1]);
  sub_100233B7C((uint64_t)v142, v142[1]);
  sub_10003E3F0((uint64_t)v564, v564[1]);
  if (v563 < 0)
    operator delete((void *)v562[0]);
  sub_10003E3F0((uint64_t)v117, v117[1]);
  sub_100233B7C((uint64_t)v169, v169[1]);
  sub_10003E3F0((uint64_t)v567, v567[1]);
  if (v566 < 0)
    operator delete((void *)v565[0]);
  sub_10003E3F0((uint64_t)v144, v144[1]);
  sub_100233B7C((uint64_t)v196, v196[1]);
  sub_10003E3F0((uint64_t)v570, v570[1]);
  if (v569 < 0)
    operator delete((void *)v568[0]);
  sub_10003E3F0((uint64_t)v171, v171[1]);
  sub_100233B7C((uint64_t)v223, v223[1]);
  sub_10003E3F0((uint64_t)v573, v573[1]);
  if (v572 < 0)
    operator delete((void *)v571[0]);
  sub_10003E3F0((uint64_t)v198, v198[1]);
  sub_100233B7C((uint64_t)v250, v250[1]);
  sub_10003E3F0((uint64_t)v576, v576[1]);
  if (v575 < 0)
    operator delete((void *)v574[0]);
  sub_10003E3F0((uint64_t)v225, v225[1]);
  sub_100233B7C((uint64_t)v277, v277[1]);
  sub_10003E3F0((uint64_t)v579, v579[1]);
  if (v578 < 0)
    operator delete((void *)v577[0]);
  sub_10003E3F0((uint64_t)v252, v252[1]);
  sub_100233B7C((uint64_t)v304, v304[1]);
  sub_10003E3F0((uint64_t)v582, v582[1]);
  if (v581 < 0)
    operator delete((void *)v580[0]);
  sub_10003E3F0((uint64_t)v279, v279[1]);
  sub_100233B7C((uint64_t)v331, v331[1]);
  sub_10003E3F0((uint64_t)v585, v585[1]);
  if (v584 < 0)
    operator delete((void *)v583[0]);
  sub_10003E3F0((uint64_t)v306, v306[1]);
  sub_100233B7C((uint64_t)v358, v358[1]);
  sub_10003E3F0((uint64_t)v588, v588[1]);
  if (v587 < 0)
    operator delete((void *)v586[0]);
  sub_10003E3F0((uint64_t)v333, v333[1]);
  sub_100233B7C((uint64_t)v385, v385[1]);
  sub_10003E3F0((uint64_t)v591, v591[1]);
  if (v590 < 0)
    operator delete((void *)v589[0]);
  sub_10003E3F0((uint64_t)v360, v360[1]);
  sub_100233B7C((uint64_t)v412, v412[1]);
  sub_10003E3F0((uint64_t)v594, v594[1]);
  if (v593 < 0)
    operator delete((void *)v592[0]);
  sub_10003E3F0((uint64_t)v387, v387[1]);
  sub_100233B7C((uint64_t)v439, v439[1]);
  sub_10003E3F0((uint64_t)v597, v597[1]);
  if (v596 < 0)
    operator delete((void *)v595[0]);
  sub_10003E3F0((uint64_t)v414, v414[1]);
  sub_100233B7C((uint64_t)v466, v466[1]);
  sub_10003E3F0((uint64_t)v600, v600[1]);
  if (v599 < 0)
    operator delete((void *)v598[0]);
  sub_10003E3F0((uint64_t)v441, v441[1]);
  sub_100233B7C((uint64_t)v493, v493[1]);
  sub_10003E3F0((uint64_t)v603, v603[1]);
  if (v602 < 0)
    operator delete((void *)v601[0]);
  sub_10003E3F0((uint64_t)v468, v468[1]);
  sub_100233B7C((uint64_t)v520, v520[1]);
  sub_10003E3F0((uint64_t)v606, v606[1]);
  if (v605 < 0)
    operator delete((void *)v604[0]);
  sub_10003E3F0((uint64_t)v495, v495[1]);
  sub_100233B7C((uint64_t)v547, v547[1]);
  sub_10003E3F0((uint64_t)v609, v609[1]);
  if (v608 < 0)
    operator delete((void *)v607[0]);
  sub_10003E3F0((uint64_t)v522, v522[1]);
  return __cxa_atexit((void (*)(void *))sub_10022EFBC, &unk_10085FCA0, (void *)&_mh_execute_header);
}

void sub_1002470A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,_Unwind_Exception *exception_objecta,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,_QWORD *a47)
{
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t i;

  sub_100233AF4(v49, (_QWORD *)STACK[0x3520]);
  sub_100233AF4((uint64_t)&STACK[0x1970], (_QWORD *)STACK[0x1978]);
  for (i = 912; i != -48; i -= 48)
    sub_10022EF44((uint64_t)&STACK[0x3150] + i);
  sub_100233B7C((uint64_t)&STACK[0x230], *(_QWORD **)(v53 + 288));
  sub_10022EF80((uint64_t)&STACK[0x1990]);
  sub_10003E3F0(v48, a47);
  sub_100233B7C((uint64_t)&STACK[0x368], *(_QWORD **)(v51 + 288));
  sub_10022EF80((uint64_t)&STACK[0x1AC0]);
  sub_10003E3F0(a10, *(_QWORD **)(v51 + 24));
  sub_100233B7C((uint64_t)&STACK[0x4A0], *(_QWORD **)(v52 + 288));
  sub_10022EF80((uint64_t)&STACK[0x1BF0]);
  sub_10003E3F0(a11, *(_QWORD **)(v52 + 24));
  sub_100233B7C((uint64_t)&STACK[0x5D8], *(_QWORD **)(v54 + 288));
  sub_10022EF80((uint64_t)&STACK[0x1D20]);
  sub_10003E3F0(a12, *(_QWORD **)(v54 + 24));
  sub_100233B7C((uint64_t)&STACK[0x710], *(_QWORD **)(v47 + 288));
  sub_10022EF80((uint64_t)&STACK[0x1E50]);
  sub_10003E3F0(a13, *(_QWORD **)(v47 + 24));
  sub_100233B7C((uint64_t)&STACK[0x848], *(_QWORD **)(v50 + 288));
  sub_10022EF80((uint64_t)&STACK[0x1F80]);
  sub_10003E3F0(a14, *(_QWORD **)(v50 + 24));
  sub_100233B7C((uint64_t)&STACK[0x980], (_QWORD *)STACK[0x988]);
  sub_10022EF80((uint64_t)&STACK[0x20B0]);
  sub_10003E3F0(a15, (_QWORD *)STACK[0x880]);
  sub_100233B7C((uint64_t)&STACK[0xAB8], (_QWORD *)STACK[0xAC0]);
  sub_10022EF80((uint64_t)&STACK[0x21E0]);
  sub_10003E3F0(a16, (_QWORD *)STACK[0x9B8]);
  sub_100233B7C((uint64_t)&STACK[0xBF0], (_QWORD *)STACK[0xBF8]);
  sub_10022EF80((uint64_t)&STACK[0x2310]);
  sub_10003E3F0(a17, (_QWORD *)STACK[0xAF0]);
  sub_100233B7C((uint64_t)&STACK[0xD28], (_QWORD *)STACK[0xD30]);
  sub_10022EF80((uint64_t)&STACK[0x2440]);
  sub_10003E3F0(a18, (_QWORD *)STACK[0xC28]);
  sub_100233B7C((uint64_t)&STACK[0xE60], (_QWORD *)STACK[0xE68]);
  sub_10022EF80((uint64_t)&STACK[0x2570]);
  sub_10003E3F0(a19, (_QWORD *)STACK[0xD60]);
  sub_100233B7C((uint64_t)&STACK[0xF98], (_QWORD *)STACK[0xFA0]);
  sub_10022EF80((uint64_t)&STACK[0x26A0]);
  sub_10003E3F0(a20, (_QWORD *)STACK[0xE98]);
  sub_100233B7C((uint64_t)&STACK[0x10D0], (_QWORD *)STACK[0x10D8]);
  sub_10022EF80((uint64_t)&STACK[0x27D0]);
  sub_10003E3F0(a21, (_QWORD *)STACK[0xFD0]);
  sub_100233B7C((uint64_t)&STACK[0x1208], (_QWORD *)STACK[0x1210]);
  sub_10022EF80((uint64_t)&STACK[0x2900]);
  sub_10003E3F0(a22, (_QWORD *)STACK[0x1108]);
  sub_100233B7C((uint64_t)&STACK[0x1340], (_QWORD *)STACK[0x1348]);
  sub_10022EF80((uint64_t)&STACK[0x2A30]);
  sub_10003E3F0(a23, (_QWORD *)STACK[0x1240]);
  sub_100233B7C((uint64_t)&STACK[0x1478], (_QWORD *)STACK[0x1480]);
  sub_10022EF80((uint64_t)&STACK[0x2B60]);
  sub_10003E3F0(a24, (_QWORD *)STACK[0x1378]);
  sub_100233B7C((uint64_t)&STACK[0x15B0], (_QWORD *)STACK[0x15B8]);
  sub_10022EF80((uint64_t)&STACK[0x2C90]);
  sub_10003E3F0(a25, (_QWORD *)STACK[0x14B0]);
  sub_100233B7C((uint64_t)&STACK[0x16E8], (_QWORD *)STACK[0x16F0]);
  sub_10022EF80((uint64_t)&STACK[0x2DC0]);
  sub_10003E3F0(a26, (_QWORD *)STACK[0x15E8]);
  sub_100233B7C((uint64_t)&STACK[0x1820], (_QWORD *)STACK[0x1828]);
  sub_10022EF80((uint64_t)&STACK[0x2EF0]);
  sub_10003E3F0(a27, (_QWORD *)STACK[0x1720]);
  sub_100233B7C((uint64_t)&STACK[0x1958], (_QWORD *)STACK[0x1960]);
  sub_10022EF80((uint64_t)&STACK[0x3020]);
  sub_10003E3F0(a28, (_QWORD *)STACK[0x1858]);
  _Unwind_Resume(a1);
}

void sub_10024750C()
{
  JUMPOUT(0x100247168);
}

void sub_100247518()
{
  JUMPOUT(0x100247174);
}

void sub_100247524()
{
  JUMPOUT(0x100247180);
}

void sub_100247534()
{
  JUMPOUT(0x10024718CLL);
}

void sub_100247540()
{
  JUMPOUT(0x100247198);
}

void sub_10024754C()
{
  JUMPOUT(0x1002471A4);
}

void sub_10024755C()
{
  JUMPOUT(0x1002471B0);
}

void sub_100247568()
{
  JUMPOUT(0x1002471BCLL);
}

void sub_100247574()
{
  JUMPOUT(0x1002471C8);
}

void sub_100247584()
{
  JUMPOUT(0x1002471D4);
}

void sub_100247590()
{
  JUMPOUT(0x1002471E0);
}

void sub_10024759C()
{
  JUMPOUT(0x1002471ECLL);
}

void sub_1002475AC()
{
  JUMPOUT(0x1002471F8);
}

void sub_1002475B8()
{
  JUMPOUT(0x100247204);
}

void sub_1002475C4()
{
  JUMPOUT(0x100247210);
}

void sub_1002475D4()
{
  JUMPOUT(0x100247220);
}

void sub_1002475E0()
{
  JUMPOUT(0x10024722CLL);
}

void sub_1002475EC()
{
  JUMPOUT(0x10024723CLL);
}

void sub_1002475FC()
{
  JUMPOUT(0x10024724CLL);
}

void sub_100247608()
{
  JUMPOUT(0x100247258);
}

void sub_100247614()
{
  JUMPOUT(0x100247268);
}

void sub_100247624()
{
  JUMPOUT(0x100247278);
}

void sub_100247630()
{
  JUMPOUT(0x100247284);
}

void sub_10024763C()
{
  JUMPOUT(0x100247294);
}

void sub_10024764C()
{
  JUMPOUT(0x1002472A4);
}

void sub_100247658()
{
  JUMPOUT(0x1002472B0);
}

void sub_100247664()
{
  JUMPOUT(0x1002472C0);
}

void sub_100247674()
{
  JUMPOUT(0x1002472D0);
}

void sub_100247680()
{
  JUMPOUT(0x1002472DCLL);
}

void sub_10024768C()
{
  JUMPOUT(0x1002472ECLL);
}

void sub_10024769C()
{
  JUMPOUT(0x1002472FCLL);
}

void sub_1002476A8()
{
  JUMPOUT(0x100247308);
}

void sub_1002476B4()
{
  JUMPOUT(0x100247318);
}

void sub_1002476C4()
{
  JUMPOUT(0x10024732CLL);
}

void sub_1002476D0()
{
  JUMPOUT(0x100247338);
}

void sub_1002476DC()
{
  JUMPOUT(0x100247348);
}

void sub_1002476EC()
{
  JUMPOUT(0x100247360);
}

void sub_1002476F8()
{
  JUMPOUT(0x10024736CLL);
}

void sub_100247704()
{
  JUMPOUT(0x100247380);
}

void sub_100247714()
{
  JUMPOUT(0x100247398);
}

void sub_100247720()
{
  JUMPOUT(0x1002473A4);
}

void sub_10024772C()
{
  JUMPOUT(0x1002473B8);
}

void sub_10024773C()
{
  JUMPOUT(0x1002473D0);
}

void sub_100247748()
{
  JUMPOUT(0x1002473DCLL);
}

void sub_100247754()
{
  JUMPOUT(0x1002473F0);
}

void sub_100247764()
{
  JUMPOUT(0x100247408);
}

void sub_100247770()
{
  JUMPOUT(0x100247414);
}

void sub_10024777C()
{
  JUMPOUT(0x100247428);
}

void sub_10024778C()
{
  JUMPOUT(0x100247440);
}

void sub_100247798()
{
  JUMPOUT(0x10024744CLL);
}

void sub_1002477A4()
{
  JUMPOUT(0x100247460);
}

void sub_1002477B4()
{
  JUMPOUT(0x100247478);
}

void sub_1002477C0()
{
  JUMPOUT(0x100247484);
}

void sub_1002477CC()
{
  JUMPOUT(0x100247498);
}

void sub_1002477D8()
{
  JUMPOUT(0x100247498);
}

void sub_1002477EC()
{
  JUMPOUT(0x1002474B0);
}

void sub_100247800()
{
  JUMPOUT(0x1002474BCLL);
}

void sub_100247814()
{
  JUMPOUT(0x100247504);
}

void sub_10024781C()
{
  uint64_t i;
  int32x2_t v6;
  uint64_t j;
  uint64_t k;
  uint64_t v9;
  uint64_t v10;
  uint64_t m;
  uint64_t v12;
  uint64_t n;
  uint64_t v14;
  uint64_t v15;
  void *context;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  _QWORD *v20[3];
  __int128 v21;
  uint64_t v22;
  int v23;
  char v24;
  int v25;
  char v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  unint64_t v30;
  __int128 v31;
  int32x2_t v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  int v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  const void **v45[3];
  const void **v46[3];
  __int128 v47;
  _QWORD *v48[3];
  __int128 v49;
  uint64_t v50;
  int v51;
  char v52;
  int v53;
  char v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  unint64_t v58;
  __int128 v59;
  int32x2_t v60;
  __int128 v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  __int128 v65;
  int v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  __int128 v73;
  _QWORD *v74[3];
  __int128 v75;
  uint64_t v76;
  int v77;
  char v78;
  int v79;
  char v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  unint64_t v84;
  __int128 v85;
  int32x2_t v86;
  __int128 v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  __int128 v91;
  int v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  __int128 v99;
  _QWORD *v100[3];
  __int128 v101;
  uint64_t v102;
  int v103;
  char v104;
  int v105;
  char v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  unint64_t v110;
  __int128 v111;
  int32x2_t v112;
  __int128 v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  __int128 v117;
  int v118;
  uint64_t v119;
  int v120;
  uint64_t v121;
  int v122;
  uint64_t v123;
  uint64_t v124;
  __int128 v125;
  _QWORD *v126[3];
  __int128 v127;
  uint64_t v128;
  int v129;
  char v130;
  int v131;
  char v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  unint64_t v136;
  __int128 v137;
  int32x2_t v138;
  __int128 v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  __int128 v143;
  int v144;
  uint64_t v145;
  int v146;
  uint64_t v147;
  int v148;
  uint64_t v149;
  uint64_t v150;
  __int128 v151;
  uint64_t v152;
  _QWORD *v153;
  __int128 v154;
  uint64_t v155;
  int v156;
  char v157;
  int v158;
  char v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  unint64_t v163;
  __int128 v164;
  int32x2_t v165;
  __int128 v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  __int128 v170;
  int v171;
  uint64_t v172;
  int v173;
  uint64_t v174;
  int v175;
  uint64_t v176;
  uint64_t v177;
  __int128 v178;
  uint64_t v179;
  _QWORD *v180;
  __int128 v181;
  uint64_t v182;
  int v183;
  char v184;
  int v185;
  char v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  unint64_t v190;
  __int128 v191;
  int32x2_t v192;
  __int128 v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  __int128 v197;
  int v198;
  uint64_t v199;
  int v200;
  uint64_t v201;
  int v202;
  uint64_t v203;
  uint64_t v204;
  const void **v205[3];
  const void **v206;
  _QWORD *v207[2];
  double v208;
  __int128 v209;
  _BYTE v210[8];
  _QWORD *v211[2];
  __int128 v212;
  uint64_t v213;
  int v214;
  char v215;
  int v216;
  char v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  unint64_t v221;
  __int128 v222;
  int32x2_t v223;
  __int128 v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  __int128 v228;
  int v229;
  uint64_t v230;
  int v231;
  uint64_t v232;
  int v233;
  uint64_t v234;
  uint64_t v235;
  __int128 __dst;
  __int128 v237;
  __int128 v238;
  _QWORD *v239;
  char v240[312];
  const void *v241[2];
  char v242;
  _QWORD *v243[3];
  __int128 v244;
  _QWORD *v245[3];
  __int128 v246;
  uint64_t v247;
  int v248;
  char v249;
  int v250;
  char v251;
  __int128 v252;
  __int128 v253;
  __int128 v254;
  unint64_t v255;
  __int128 v256;
  int32x2_t v257;
  __int128 v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  __int128 v262;
  int v263;
  uint64_t v264;
  int v265;
  uint64_t v266;
  int v267;
  uint64_t v268;
  uint64_t v269;
  __int128 v270;
  _QWORD *v271[3];
  __int128 v272;
  uint64_t v273;
  int v274;
  char v275;
  int v276;
  char v277;
  __int128 v278;
  __int128 v279;
  __int128 v280;
  unint64_t v281;
  __int128 v282;
  int32x2_t v283;
  __int128 v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  __int128 v288;
  int v289;
  uint64_t v290;
  int v291;
  uint64_t v292;
  int v293;
  uint64_t v294;
  uint64_t v295;
  __int128 v296;
  _QWORD *v297[3];
  __int128 v298;
  uint64_t v299;
  int v300;
  char v301;
  int v302;
  char v303;
  __int128 v304;
  __int128 v305;
  __int128 v306;
  unint64_t v307;
  __int128 v308;
  int32x2_t v309;
  __int128 v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  __int128 v314;
  int v315;
  uint64_t v316;
  int v317;
  uint64_t v318;
  int v319;
  uint64_t v320;
  uint64_t v321;
  __int128 v322;
  _QWORD *v323[3];
  __int128 v324;
  uint64_t v325;
  int v326;
  char v327;
  char v328;
  _DWORD v329[2];
  _BYTE v330[8];
  __int128 v331;
  __int128 v332;
  __int128 v333;
  unint64_t v334;
  __int128 v335;
  int32x2_t v336;
  __int128 v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  __int128 v341;
  int v342;
  uint64_t v343;
  int v344;
  uint64_t v345;
  int v346;
  uint64_t v347;
  uint64_t v348;
  __int128 v349;
  uint64_t v350;
  _QWORD *v351;
  int v352;
  __int128 v353;
  uint64_t v354;
  int v355;
  char v356;
  int v357;
  char v358;
  __int128 v359;
  __int128 v360;
  __int128 v361;
  unint64_t v362;
  __int128 v363;
  int32x2_t v364;
  __int128 v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  __int128 v369;
  int v370;
  uint64_t v371;
  int v372;
  uint64_t v373;
  int v374;
  uint64_t v375;
  uint64_t v376;
  __int128 v377;
  __int128 v378;
  _BYTE v379[24];
  uint64_t v380;
  int v381;
  char v382;
  int v383;
  char v384;
  __int128 v385;
  __int128 v386;
  __int128 v387;
  unint64_t v388;
  __int128 v389;
  int32x2_t v390;
  __int128 v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  __int128 v395;
  int v396;
  uint64_t v397;
  int v398;
  uint64_t v399;
  int v400;
  uint64_t v401;
  uint64_t v402;
  _BYTE v403[24];
  uint64_t v404;
  int v405;
  __int128 v406;
  uint64_t v407;
  int v408;
  char v409;
  __int128 v410;
  uint64_t v411;
  int v412;
  __int128 v413;
  _QWORD v414[23];
  char v415[304];
  char v416[304];
  char v417[304];
  char v418[304];
  char v419[304];
  char v420[304];
  char v421[304];
  char v422[304];
  char v423[304];
  char v424[304];
  char v425[304];
  char v426[312];
  const void *v427[2];
  char v428;
  _QWORD *v429[3];
  int v430;
  uint64_t v431[3];
  int v432;
  uint64_t v433[3];

  context = objc_autoreleasePoolPush();
  *(_OWORD *)v403 = xmmword_100473430;
  *(_QWORD *)&v403[16] = 0x300000003;
  sub_100182284((uint64_t)&unk_100859560, (int *)v403, 3);
  xmmword_100859578 = xmmword_10046E050;
  unk_100859588 = xmmword_10046E060;
  qword_1008595A0 = 0;
  unk_1008595A8 = 0;
  qword_100859598 = 0x3FD999999999999ALL;
  unk_1008595B0 = xmmword_10046E070;
  dword_1008595C0 = 5;
  qword_1008595C8 = 0x4000000000000000;
  dword_1008595D0 = 5;
  byte_1008595D8 = 0;
  unk_1008595DC = 0x30000000ALL;
  xmmword_1008595E8 = xmmword_10046E080;
  unk_1008595F8 = xmmword_10046E090;
  xmmword_100859608 = xmmword_10046E0A0;
  qword_100859618 = 0x3FE3333333333333;
  dword_100859620 = 3;
  xmmword_100859628 = xmmword_10046E0B0;
  unk_100859638 = xmmword_10046E090;
  xmmword_100859648 = xmmword_10046E080;
  qword_100859658 = 0x3FE3333333333333;
  byte_100859660 = 0;
  xmmword_100859668 = xmmword_10046E0C0;
  unk_100859678 = xmmword_10046E0D0;
  __asm { FMOV            V0.2D, #1.0 }
  v18 = _Q0;
  xmmword_100859688 = _Q0;
  qword_100859698 = 0xBFD3333333333333;
  xmmword_1008596A0 = xmmword_10046E0E0;
  qword_1008596B0 = 0x3E99999A40000000;
  xmmword_1008596B8 = xmmword_10046E060;
  qword_1008596D0 = 0;
  unk_1008596D8 = 0;
  qword_1008596C8 = 0x3FD999999999999ALL;
  xmmword_1008596E0 = xmmword_10046E070;
  dword_1008596F0 = 5;
  qword_1008596F8 = 0x4000000000000000;
  dword_100859700 = 4;
  qword_100859708 = 0x300000008;
  qword_100859710 = 0xC04E800000000000;
  *(_QWORD *)&__dst = 0xC04E800000000000;
  sub_10018252C((uint64_t)&unk_100859718, (double *)&__dst, 1);
  xmmword_100859730 = xmmword_10046E0F0;
  qword_100859740 = 0x4024000000000000;
  dword_100859748 = 45;
  byte_10085974C = 0;
  dword_100859750 = 1;
  byte_100859758 = 1;
  xmmword_100859760 = xmmword_10046E100;
  unk_100859770 = xmmword_10046E110;
  xmmword_100859780 = v18;
  qword_100859790 = 0xC059000000000000;
  xmmword_100859798 = xmmword_10046E120;
  qword_1008597A8 = (uint64_t)vdup_n_s32(0x3DCCCCCDu);
  xmmword_1008597B0 = xmmword_10046E060;
  qword_1008597C0 = 0x3FD999999999999ALL;
  qword_1008597D0 = 0;
  qword_1008597C8 = 0;
  xmmword_1008597D8 = xmmword_10046E070;
  dword_1008597E8 = 5;
  qword_1008597F0 = 0x4000000000000000;
  dword_1008597F8 = 10;
  qword_100859800 = 0x4034000000000000;
  dword_100859808 = 3;
  xmmword_100859810 = xmmword_10046E130;
  __cxa_atexit((void (*)(void *))sub_100180704, &unk_100859560, (void *)&_mh_execute_header);
  sub_10000BF04(&qword_100859820, "MacBook");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_100859820, (void *)&_mh_execute_header);
  sub_10000BF04(&qword_100859838, "MacBookAir");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_100859838, (void *)&_mh_execute_header);
  sub_10000BF04(&qword_100859850, "MacBookPro");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_100859850, (void *)&_mh_execute_header);
  sub_10000BF04(&qword_100859868, "iMac");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_100859868, (void *)&_mh_execute_header);
  sub_10000BF04(&qword_100859880, "Macmini");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_100859880, (void *)&_mh_execute_header);
  sub_10000BF04(qword_100859898, "MacPro");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_100859898, (void *)&_mh_execute_header);
  sub_10000BF04(qword_1008598B0, "Mac");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_1008598B0, (void *)&_mh_execute_header);
  sub_10000BF04(qword_1008598C8, "iPad");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_1008598C8, (void *)&_mh_execute_header);
  sub_10000BF04(qword_1008598E0, "iPhone");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_1008598E0, (void *)&_mh_execute_header);
  sub_10000BF04(qword_1008598F8, "iPhone10");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_1008598F8, (void *)&_mh_execute_header);
  sub_10000BF04(&xmmword_100859910, "Device1,21760");
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_100859910, (void *)&_mh_execute_header);
  sub_10000BF04(qword_100859928, "AudioAccessory");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_100859928, (void *)&_mh_execute_header);
  sub_10000BF04(qword_100859940, "Watch");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_100859940, (void *)&_mh_execute_header);
  sub_10000BF04(qword_100859958, "ATVRemote1,");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_100859958, (void *)&_mh_execute_header);
  sub_10000BF04(&qword_100859970, "BeatsStudio3,2");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_100859970, (void *)&_mh_execute_header);
  sub_10000BF04(&qword_100859988, "BeatsX1,1");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_100859988, (void *)&_mh_execute_header);
  sub_10000BF04(&qword_1008599A0, "BeatsSolo3,1");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_1008599A0, (void *)&_mh_execute_header);
  sub_10000BF04(&qword_1008599B8, "Device1,8202");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_1008599B8, (void *)&_mh_execute_header);
  sub_10000BF04(&xmmword_1008599D0, "Device1,8212");
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1008599D0, (void *)&_mh_execute_header);
  sub_10000BF04(&xmmword_1008599E8, "ATVRemote1,3");
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1008599E8, (void *)&_mh_execute_header);
  sub_10000BF04(&xmmword_100859A00, "ATVRemote1,4");
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_100859A00, (void *)&_mh_execute_header);
  sub_10000BF04(&xmmword_100859A18, "A2538");
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_100859A18, (void *)&_mh_execute_header);
  sub_10000BF04(&xmmword_100859A30, "iPhone10,1");
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_100859A30, (void *)&_mh_execute_header);
  sub_10000BF04(&xmmword_100859A48, "iPhone10,2");
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_100859A48, (void *)&_mh_execute_header);
  sub_10000BF04(&xmmword_100859A60, "iPhone10,3");
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_100859A60, (void *)&_mh_execute_header);
  sub_10000BF04(&xmmword_100859A78, "iPhone10,4");
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_100859A78, (void *)&_mh_execute_header);
  sub_10000BF04(&xmmword_100859A90, "iPhone10,5");
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_100859A90, (void *)&_mh_execute_header);
  sub_10000BF04(&xmmword_100859AA8, "iPhone10,6");
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_100859AA8, (void *)&_mh_execute_header);
  sub_10000BF04(&xmmword_100859AC0, "iPhone11,2");
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_100859AC0, (void *)&_mh_execute_header);
  sub_10000BF04(&xmmword_100859AD8, "iPhone11,6");
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_100859AD8, (void *)&_mh_execute_header);
  sub_10000BF04(&xmmword_100859AF0, "iPhone11,8");
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_100859AF0, (void *)&_mh_execute_header);
  sub_10000BF04(&xmmword_100859B08, "iPhone12,1");
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_100859B08, (void *)&_mh_execute_header);
  sub_10000BF04(&xmmword_100859B20, "iPhone12,3");
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_100859B20, (void *)&_mh_execute_header);
  sub_10000BF04(&xmmword_100859B38, "iPhone12,5");
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_100859B38, (void *)&_mh_execute_header);
  sub_10000BF04(&xmmword_100859B50, "iPhone13,1");
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_100859B50, (void *)&_mh_execute_header);
  sub_10000BF04(&xmmword_100859B68, "iPhone13,2");
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_100859B68, (void *)&_mh_execute_header);
  sub_10000BF04(&xmmword_100859B80, "iPhone13,3");
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_100859B80, (void *)&_mh_execute_header);
  sub_10000BF04(&xmmword_100859B98, "iPhone13,4");
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_100859B98, (void *)&_mh_execute_header);
  sub_10000BF04(&xmmword_100859BB0, "iPhone14,2");
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_100859BB0, (void *)&_mh_execute_header);
  sub_10000BF04(&xmmword_100859BC8, "iPhone14,3");
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_100859BC8, (void *)&_mh_execute_header);
  sub_10000BF04(&xmmword_100859BE0, "iPhone14,4");
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_100859BE0, (void *)&_mh_execute_header);
  sub_10000BF04(&xmmword_100859BF8, "iPhone14,5");
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_100859BF8, (void *)&_mh_execute_header);
  sub_10000BF04(qword_100859C10, "iPhone15,2");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_100859C10, (void *)&_mh_execute_header);
  sub_10000BF04(qword_100859C28, "iPhone15,3");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_100859C28, (void *)&_mh_execute_header);
  sub_10000BF04(&xmmword_100859C40, "iMac18,1");
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_100859C40, (void *)&_mh_execute_header);
  sub_10000BF04(&xmmword_100859C58, "iMac18,2");
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_100859C58, (void *)&_mh_execute_header);
  sub_10000BF04(&xmmword_100859C70, "iMac18,3");
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_100859C70, (void *)&_mh_execute_header);
  sub_10000BF04(&xmmword_100859C88, "MacBookPro13,2");
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_100859C88, (void *)&_mh_execute_header);
  sub_10000BF04(&xmmword_100859CA0, "MacBookPro14,2");
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_100859CA0, (void *)&_mh_execute_header);
  sub_10000BF04(&xmmword_100859CB8, "MacBookPro13,3");
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_100859CB8, (void *)&_mh_execute_header);
  sub_10000BF04(&xmmword_100859CD0, "MacBookPro14,3");
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_100859CD0, (void *)&_mh_execute_header);
  sub_10000BF04(&xmmword_100859CE8, "iPod9,1");
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_100859CE8, (void *)&_mh_execute_header);
  sub_10000BF04(&xmmword_100859D00, "AudioAccessory5,1,");
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_100859D00, (void *)&_mh_execute_header);
  sub_10000BF04(&xmmword_100859D18, "AudioAccessory6,1,");
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_100859D18, (void *)&_mh_execute_header);
  sub_10000BF04(&xmmword_100859D30, "Watch6,18");
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_100859D30, (void *)&_mh_execute_header);
  sub_10000BF04(&qword_100859D48, "Any");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_100859D48, (void *)&_mh_execute_header);
  *(_DWORD *)v403 = 788;
  if (byte_1008599FF < 0)
  {
    sub_100004678(&v403[8], (void *)xmmword_1008599E8, *((unint64_t *)&xmmword_1008599E8 + 1));
  }
  else
  {
    *(_OWORD *)&v403[8] = xmmword_1008599E8;
    v404 = unk_1008599F8;
  }
  v405 = 789;
  if (byte_100859A17 < 0)
  {
    sub_100004678(&v406, (void *)xmmword_100859A00, *((unint64_t *)&xmmword_100859A00 + 1));
  }
  else
  {
    v406 = xmmword_100859A00;
    v407 = unk_100859A10;
  }
  v408 = 1106;
  if (byte_100859A2F < 0)
  {
    sub_100004678(&v410, (void *)xmmword_100859A18, *((unint64_t *)&xmmword_100859A18 + 1));
  }
  else
  {
    v410 = xmmword_100859A18;
    v411 = unk_100859A28;
  }
  v412 = 8212;
  if (byte_1008599E7 < 0)
  {
    sub_100004678(&v413, (void *)xmmword_1008599D0, *((unint64_t *)&xmmword_1008599D0 + 1));
  }
  else
  {
    v413 = xmmword_1008599D0;
    v414[0] = unk_1008599E0;
  }
  sub_100232970((uint64_t)&unk_100859D60, (unsigned int *)v403, 4);
  for (i = 0; i != -16; i -= 4)
  {
    if (SHIBYTE(v414[i]) < 0)
      operator delete((void *)v414[i - 2]);
  }
  __cxa_atexit((void (*)(void *))sub_10022EEA0, &unk_100859D60, (void *)&_mh_execute_header);
  sub_10000BF04(&xmmword_100859D78, "DovePeace");
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_100859D78, (void *)&_mh_execute_header);
  *(_QWORD *)&xmmword_100859D90 = 0x300000008;
  *((_QWORD *)&xmmword_100859D90 + 1) = 0xC04E800000000000;
  *(_QWORD *)v403 = 0xC04E800000000000;
  sub_10018252C((uint64_t)&unk_100859DA0, (double *)v403, 1);
  xmmword_100859DB8 = xmmword_10046E0F0;
  qword_100859DC8 = 0x4024000000000000;
  dword_100859DD0 = 45;
  byte_100859DD4 = 0;
  LODWORD(xmmword_100859DD8) = 1;
  BYTE8(xmmword_100859DD8) = 1;
  unk_100859DE8 = xmmword_10046E100;
  xmmword_100859DF8 = xmmword_10046E110;
  unk_100859E08 = v18;
  *(_QWORD *)&xmmword_100859E18 = 0xC059000000000000;
  *(__int128 *)((char *)&xmmword_100859E18 + 8) = xmmword_10046E120;
  v6 = vdup_n_s32(0x3DCCCCCDu);
  qword_100859E30 = (uint64_t)v6;
  xmmword_100859E38 = xmmword_10046E060;
  qword_100859E50 = 0;
  *(_QWORD *)&xmmword_100859E58 = 0;
  qword_100859E48 = 0x3FD999999999999ALL;
  *(__int128 *)((char *)&xmmword_100859E58 + 8) = xmmword_10046E070;
  dword_100859E70 = 5;
  *(_QWORD *)&xmmword_100859E78 = 0x4000000000000000;
  DWORD2(xmmword_100859E78) = 10;
  qword_100859E88 = 0x4034000000000000;
  dword_100859E90 = 3;
  xmmword_100859E98 = xmmword_10046E130;
  __cxa_atexit((void (*)(void *))sub_10022EEC8, &xmmword_100859D90, (void *)&_mh_execute_header);
  *(_QWORD *)&xmmword_100859EA8 = 0x300000010;
  *((_QWORD *)&xmmword_100859EA8 + 1) = 0xC046800000000000;
  *(_QWORD *)v403 = 0xC046800000000000;
  sub_10018252C((uint64_t)&unk_100859EB8, (double *)v403, 1);
  xmmword_100859ED0 = xmmword_10046E0F0;
  qword_100859EE0 = 0x4024000000000000;
  dword_100859EE8 = 45;
  byte_100859EEC = 0;
  LODWORD(xmmword_100859EF0) = 1;
  BYTE8(xmmword_100859EF0) = 1;
  unk_100859F00 = xmmword_10046E100;
  xmmword_100859F10 = xmmword_10046E110;
  unk_100859F20 = v18;
  *(_QWORD *)&xmmword_100859F30 = 0xC059000000000000;
  *(__int128 *)((char *)&xmmword_100859F30 + 8) = xmmword_10046E120;
  qword_100859F48 = (uint64_t)v6;
  xmmword_100859F50 = xmmword_10046E060;
  qword_100859F68 = 0;
  *(_QWORD *)&xmmword_100859F70 = 0;
  qword_100859F60 = 0x3FD999999999999ALL;
  *(__int128 *)((char *)&xmmword_100859F70 + 8) = xmmword_10046E070;
  dword_100859F88 = 5;
  *(_QWORD *)&xmmword_100859F90 = 0x4000000000000000;
  DWORD2(xmmword_100859F90) = 10;
  qword_100859FA0 = 0x4034000000000000;
  dword_100859FA8 = 3;
  xmmword_100859FB0 = xmmword_10046E130;
  __cxa_atexit((void (*)(void *))sub_10022EEC8, &xmmword_100859EA8, (void *)&_mh_execute_header);
  *(_QWORD *)&xmmword_100859FC0 = 0x200000003;
  *((_QWORD *)&xmmword_100859FC0 + 1) = 0xC046800000000000;
  *(_QWORD *)v403 = 0xC046800000000000;
  sub_10018252C((uint64_t)&unk_100859FD0, (double *)v403, 1);
  xmmword_100859FE8 = xmmword_10046E0F0;
  qword_100859FF8 = 0x4024000000000000;
  dword_10085A000 = 45;
  byte_10085A004 = 0;
  LODWORD(xmmword_10085A008) = 1;
  BYTE8(xmmword_10085A008) = 1;
  unk_10085A018 = xmmword_10046E100;
  xmmword_10085A028 = xmmword_10046E110;
  unk_10085A038 = v18;
  *(_QWORD *)&xmmword_10085A048 = 0xC059000000000000;
  *(__int128 *)((char *)&xmmword_10085A048 + 8) = xmmword_10046E120;
  qword_10085A060 = (uint64_t)v6;
  xmmword_10085A068 = xmmword_10046E060;
  qword_10085A080 = 0;
  *(_QWORD *)&xmmword_10085A088 = 0;
  qword_10085A078 = 0x3FD999999999999ALL;
  *(__int128 *)((char *)&xmmword_10085A088 + 8) = xmmword_10046E070;
  dword_10085A0A0 = 5;
  *(_QWORD *)&xmmword_10085A0A8 = 0x4000000000000000;
  DWORD2(xmmword_10085A0A8) = 10;
  qword_10085A0B8 = 0x4034000000000000;
  dword_10085A0C0 = 3;
  xmmword_10085A0C8 = xmmword_10046E130;
  __cxa_atexit((void (*)(void *))sub_10022EEC8, &xmmword_100859FC0, (void *)&_mh_execute_header);
  __dst = xmmword_100473448;
  v237 = unk_100473458;
  v238 = xmmword_100473468;
  sub_100232D08((uint64_t)&v178, (int *)&__dst, 3);
  sub_100232270(v403, &xmmword_1008599E8, (uint64_t)&v178);
  v377 = xmmword_100473448;
  v378 = unk_100473458;
  *(_OWORD *)v379 = xmmword_100473468;
  sub_100232D08((uint64_t)&v151, (int *)&v377, 3);
  sub_100232270((_QWORD *)&v406 + 1, &xmmword_100859A00, (uint64_t)&v151);
  sub_100232E5C((uint64_t)&unk_10085A0D8, (const void **)v403, 2);
  for (j = 0; j != -96; j -= 48)
  {
    sub_10003E3F0((uint64_t)&v410 + j, *(_QWORD **)((char *)&v410 + j + 8));
    if (*(&v409 + j) < 0)
      operator delete(*(void **)((char *)&v406 + j + 8));
  }
  sub_10003E3F0((uint64_t)&v151, *((_QWORD **)&v151 + 1));
  sub_10003E3F0((uint64_t)&v178, *((_QWORD **)&v178 + 1));
  __cxa_atexit((void (*)(void *))sub_10022EEF4, &unk_10085A0D8, (void *)&_mh_execute_header);
  sub_100235838();
  *(_QWORD *)&v377 = 0x300000010;
  *((_QWORD *)&v377 + 1) = 0xC042800000000000;
  *(_QWORD *)&__dst = 0xC042800000000000;
  sub_10018252C((uint64_t)&v378, (double *)&__dst, 1);
  *(_OWORD *)&v379[8] = xmmword_10046E0F0;
  v380 = 0x4024000000000000;
  v381 = 45;
  v382 = 0;
  v383 = 1;
  v384 = 1;
  v385 = xmmword_10046E100;
  v386 = xmmword_10046E110;
  v387 = v18;
  v388 = 0xC059000000000000;
  v389 = xmmword_10046E120;
  v390 = vdup_n_s32(0x3DCCCCCDu);
  v391 = xmmword_10046E060;
  v393 = 0;
  v394 = 0;
  v392 = 0x3FD999999999999ALL;
  v395 = xmmword_10046E070;
  v396 = 5;
  v397 = 0x4000000000000000;
  v398 = 10;
  v399 = 0x4034000000000000;
  v400 = 3;
  v401 = 0x3FF0000000000000;
  v402 = 0x4008000000000000;
  sub_1002322E8(v403, &xmmword_100859A30, &v377);
  *(_QWORD *)&v178 = 0x300000010;
  *((_QWORD *)&v178 + 1) = 0xC042800000000000;
  *(_QWORD *)&__dst = 0xC042800000000000;
  sub_10018252C((uint64_t)&v179, (double *)&__dst, 1);
  v181 = xmmword_10046E0F0;
  v182 = 0x4024000000000000;
  v183 = 45;
  v184 = 0;
  v185 = 1;
  v186 = 1;
  v187 = xmmword_10046E100;
  v188 = xmmword_10046E110;
  v189 = v18;
  v190 = 0xC059000000000000;
  v191 = xmmword_10046E120;
  v192 = vdup_n_s32(0x3DCCCCCDu);
  v193 = xmmword_10046E060;
  v195 = 0;
  v196 = 0;
  v194 = 0x3FD999999999999ALL;
  v197 = xmmword_10046E070;
  v198 = 5;
  v199 = 0x4000000000000000;
  v200 = 10;
  v201 = 0x4034000000000000;
  v202 = 3;
  v203 = 0x3FF0000000000000;
  v204 = 0x4008000000000000;
  sub_1002322E8(v415, &xmmword_100859A48, &v178);
  sub_100233C04((uint64_t)&v99, (const void **)v403, 2);
  sub_1002323C8(&v322, &xmmword_100859A30, (const void ***)&v99);
  *(_QWORD *)&v151 = 0x300000010;
  *((_QWORD *)&v151 + 1) = 0xC042800000000000;
  *(_QWORD *)&v349 = 0xC042800000000000;
  sub_10018252C((uint64_t)&v152, (double *)&v349, 1);
  v154 = xmmword_10046E0F0;
  v155 = 0x4024000000000000;
  v156 = 45;
  v157 = 0;
  v158 = 1;
  v159 = 1;
  v160 = xmmword_10046E100;
  v161 = xmmword_10046E110;
  v162 = v18;
  v163 = 0xC059000000000000;
  v164 = xmmword_10046E120;
  v165 = vdup_n_s32(0x3DCCCCCDu);
  v166 = xmmword_10046E060;
  v168 = 0;
  v169 = 0;
  v167 = 0x3FD999999999999ALL;
  v170 = xmmword_10046E070;
  v171 = 5;
  v172 = 0x4000000000000000;
  v173 = 10;
  v174 = 0x4034000000000000;
  v175 = 3;
  v176 = 0x3FF0000000000000;
  v177 = 0x4008000000000000;
  sub_1002322E8((char *)&__dst, &xmmword_100859A30, &v151);
  *(_QWORD *)&v349 = 0x300000010;
  *((_QWORD *)&v349 + 1) = 0xC042800000000000;
  *(_QWORD *)&v244 = 0xC042800000000000;
  sub_10018252C((uint64_t)&v350, (double *)&v244, 1);
  v353 = xmmword_10046E0F0;
  v354 = 0x4024000000000000;
  v355 = 45;
  v356 = 0;
  v357 = 1;
  v358 = 1;
  v359 = xmmword_10046E100;
  v360 = xmmword_10046E110;
  v361 = v18;
  v362 = 0xC059000000000000;
  v363 = xmmword_10046E120;
  v364 = vdup_n_s32(0x3DCCCCCDu);
  v365 = xmmword_10046E060;
  v367 = 0;
  v368 = 0;
  v366 = 0x3FD999999999999ALL;
  v369 = xmmword_10046E070;
  v370 = 5;
  v371 = 0x4000000000000000;
  v372 = 10;
  v373 = 0x4034000000000000;
  v374 = 3;
  v375 = 0x3FF0000000000000;
  v376 = 0x4008000000000000;
  sub_1002322E8(v240, &xmmword_100859A48, &v349);
  sub_100233C04((uint64_t)&v270, (const void **)&__dst, 2);
  sub_1002323C8((_QWORD *)&v324 + 1, &xmmword_100859A48, (const void ***)&v270);
  sub_100233F58((uint64_t)&v125, (const void **)&v322, 2);
  LODWORD(v296) = 2;
  sub_10023418C((uint64_t *)&v296 + 1, (const void ***)&v125);
  sub_100234264((uint64_t)&unk_10085FC40, (int *)&v296, 1);
  sub_100233AF4((uint64_t)&v296 + 8, v297[0]);
  sub_100233AF4((uint64_t)&v125, *((_QWORD **)&v125 + 1));
  for (k = 0; k != -24; k -= 12)
  {
    sub_100233B7C((uint64_t)&v329[k], *(_QWORD **)&v330[k * 4]);
    if (*(&v328 + k * 4) < 0)
      operator delete(*(void **)((char *)&v324 + k * 4 + 8));
  }
  sub_100233B7C((uint64_t)&v270, *((_QWORD **)&v270 + 1));
  v9 = 76;
  do
  {
    sub_10003E3F0((uint64_t)&v210[v9 * 8], v211[v9]);
    if (*((char *)&v208 + v9 * 8 + 7) < 0)
      operator delete(v207[v9]);
    v9 -= 38;
  }
  while (v9 * 8);
  sub_10003E3F0((uint64_t)&v350, v351);
  sub_10003E3F0((uint64_t)&v152, v153);
  sub_100233B7C((uint64_t)&v99, *((_QWORD **)&v99 + 1));
  v10 = 608;
  do
  {
    sub_10003E3F0((uint64_t)&v379[v10 - 8], *(_QWORD **)&v379[v10]);
    if (*((char *)&v377 + v10 + 7) < 0)
      operator delete(*(void **)((char *)&v375 + v10));
    v10 -= 304;
  }
  while (v10);
  sub_10003E3F0((uint64_t)&v179, v180);
  sub_10003E3F0((uint64_t)&v378, *((_QWORD **)&v378 + 1));
  __cxa_atexit((void (*)(void *))sub_10022EFBC, &unk_10085FC40, (void *)&_mh_execute_header);
  *(_QWORD *)&v377 = 0x300000010;
  *((_QWORD *)&v377 + 1) = 0xC044000000000000;
  *(_QWORD *)&__dst = 0xC044000000000000;
  sub_10018252C((uint64_t)&v378, (double *)&__dst, 1);
  *(_OWORD *)&v379[8] = xmmword_10046E0F0;
  v380 = 0x4024000000000000;
  v381 = 45;
  v382 = 0;
  v383 = 1;
  v384 = 1;
  v385 = xmmword_10046E100;
  v386 = xmmword_10046E110;
  v387 = v18;
  v388 = 0xC059000000000000;
  v389 = xmmword_10046E120;
  v390 = vdup_n_s32(0x3DCCCCCDu);
  v391 = xmmword_10046E060;
  v393 = 0;
  v394 = 0;
  v392 = 0x3FD999999999999ALL;
  v395 = xmmword_10046E070;
  v396 = 5;
  v397 = 0x4000000000000000;
  v398 = 10;
  v399 = 0x4034000000000000;
  v400 = 3;
  v401 = 0x3FF0000000000000;
  v402 = 0x4008000000000000;
  sub_1002322E8(v403, &xmmword_100859D78, &v377);
  *(_QWORD *)&v178 = 0x200000003;
  *((_QWORD *)&v178 + 1) = 0xC04B800000000000;
  *(_QWORD *)&__dst = 0xC04B800000000000;
  sub_10018252C((uint64_t)&v179, (double *)&__dst, 1);
  v181 = xmmword_100473420;
  v182 = 0x4000000000000000;
  v183 = 20;
  v184 = 0;
  v185 = 1;
  v186 = 1;
  v187 = xmmword_10046E100;
  v188 = xmmword_10046E110;
  v189 = v18;
  v190 = 0xC059000000000000;
  v191 = xmmword_10046E120;
  v192 = vdup_n_s32(0x3DCCCCCDu);
  v193 = xmmword_10046E060;
  v195 = 0;
  v196 = 0;
  v194 = 0x3FD999999999999ALL;
  v197 = xmmword_10046E070;
  v198 = 5;
  v199 = 0x4000000000000000;
  v200 = 10;
  v201 = 0x4034000000000000;
  v202 = 3;
  v203 = 0x3FF0000000000000;
  v204 = 0x4008000000000000;
  sub_1002322E8(v415, &xmmword_100859A18, &v178);
  sub_100233C04((uint64_t)&v125, (const void **)v403, 2);
  LODWORD(v349) = 7;
  sub_100233E80((uint64_t *)&v349 + 1, (const void ***)&v125);
  *(_QWORD *)&v151 = 0x300000010;
  *((_QWORD *)&v151 + 1) = 0xC044800000000000;
  *(_QWORD *)&v270 = 0xC044800000000000;
  sub_10018252C((uint64_t)&v152, (double *)&v270, 1);
  v154 = xmmword_10046E0F0;
  v155 = 0x4024000000000000;
  v156 = 45;
  v157 = 0;
  v158 = 1;
  v159 = 1;
  v160 = xmmword_10046E100;
  v161 = xmmword_10046E110;
  v162 = v18;
  v163 = 0xC059000000000000;
  v164 = xmmword_10046E120;
  v165 = vdup_n_s32(0x3DCCCCCDu);
  v166 = xmmword_10046E060;
  v168 = 0;
  v169 = 0;
  v167 = 0x3FD999999999999ALL;
  v170 = xmmword_10046E070;
  v171 = 5;
  v172 = 0x4000000000000000;
  v173 = 10;
  v174 = 0x4034000000000000;
  v175 = 3;
  v176 = 0x3FF0000000000000;
  v177 = 0x4008000000000000;
  sub_1002322E8((char *)&__dst, &xmmword_100859D78, &v151);
  sub_100233C04((uint64_t)&v99, (const void **)&__dst, 1);
  v352 = 6;
  sub_100233E80((uint64_t *)&v353, (const void ***)&v99);
  sub_1002344C8((uint64_t)&v296, (int *)&v349, 2);
  LODWORD(v322) = 2;
  sub_100234694((uint64_t *)&v322 + 1, (uint64_t)&v296);
  sub_10023476C((uint64_t)&unk_10085FC58, (int *)&v322, 1);
  sub_10023447C((uint64_t)&v322 + 8, v323[0]);
  sub_10023447C((uint64_t)&v296, *((_QWORD **)&v296 + 1));
  for (m = 0; m != -64; m -= 32)
    sub_100233B7C((uint64_t)&v353 + m, *(_QWORD **)((char *)&v353 + m + 8));
  sub_100233B7C((uint64_t)&v99, *((_QWORD **)&v99 + 1));
  sub_10003E3F0((uint64_t)&v238 + 8, v239);
  if (SBYTE7(v237) < 0)
    operator delete((void *)__dst);
  sub_10003E3F0((uint64_t)&v152, v153);
  sub_100233B7C((uint64_t)&v125, *((_QWORD **)&v125 + 1));
  v12 = 608;
  do
  {
    sub_10003E3F0((uint64_t)&v379[v12 - 8], *(_QWORD **)&v379[v12]);
    if (*((char *)&v377 + v12 + 7) < 0)
      operator delete(*(void **)((char *)&v375 + v12));
    v12 -= 304;
  }
  while (v12);
  sub_10003E3F0((uint64_t)&v179, v180);
  sub_10003E3F0((uint64_t)&v378, *((_QWORD **)&v378 + 1));
  __cxa_atexit((void (*)(void *))sub_10022EFE4, &unk_10085FC58, (void *)&_mh_execute_header);
  *(_QWORD *)&v377 = 0x300000010;
  *((_QWORD *)&v377 + 1) = 0xC044000000000000;
  *(_QWORD *)&__dst = 0xC044000000000000;
  sub_10018252C((uint64_t)&v378, (double *)&__dst, 1);
  *(_OWORD *)&v379[8] = xmmword_10046E0F0;
  v380 = 0x4024000000000000;
  v381 = 45;
  v382 = 0;
  v383 = 1;
  v384 = 1;
  v385 = xmmword_10046E100;
  v386 = xmmword_10046E110;
  v387 = v18;
  v388 = 0xC059000000000000;
  v389 = xmmword_10046E120;
  v390 = vdup_n_s32(0x3DCCCCCDu);
  v391 = xmmword_10046E060;
  v393 = 0;
  v394 = 0;
  v392 = 0x3FD999999999999ALL;
  v395 = xmmword_10046E070;
  v396 = 5;
  v397 = 0x4000000000000000;
  v398 = 10;
  v399 = 0x4034000000000000;
  v400 = 3;
  v401 = 0x3FF0000000000000;
  v402 = 0x4008000000000000;
  sub_1002322E8(v403, &xmmword_100859A30, &v377);
  *(_QWORD *)&v178 = 0x300000010;
  *((_QWORD *)&v178 + 1) = 0xC044000000000000;
  *(_QWORD *)&__dst = 0xC044000000000000;
  v17 = sub_10018252C((uint64_t)&v179, (double *)&__dst, 1);
  v181 = xmmword_10046E0F0;
  v182 = 0x4024000000000000;
  v183 = 45;
  v184 = 0;
  v185 = 1;
  v186 = 1;
  v187 = xmmword_10046E100;
  v188 = xmmword_10046E110;
  v189 = v18;
  v190 = 0xC059000000000000;
  v191 = xmmword_10046E120;
  v192 = vdup_n_s32(0x3DCCCCCDu);
  v193 = xmmword_10046E060;
  v195 = 0;
  v196 = 0;
  v194 = 0x3FD999999999999ALL;
  v197 = xmmword_10046E070;
  v198 = 5;
  v199 = 0x4000000000000000;
  v200 = 10;
  v201 = 0x4034000000000000;
  v202 = 3;
  v203 = 0x3FF0000000000000;
  v204 = 0x4008000000000000;
  sub_1002322E8(v415, &xmmword_100859A48, &v178);
  *(_QWORD *)&v151 = 0x300000010;
  *((_QWORD *)&v151 + 1) = 0xC045800000000000;
  *(_QWORD *)&__dst = 0xC045800000000000;
  sub_10018252C((uint64_t)&v152, (double *)&__dst, 1);
  v154 = xmmword_10046E0F0;
  v155 = 0x4024000000000000;
  v156 = 45;
  v157 = 0;
  v158 = 1;
  v159 = 1;
  v160 = xmmword_10046E100;
  v161 = xmmword_10046E110;
  v162 = v18;
  v163 = 0xC059000000000000;
  v164 = xmmword_10046E120;
  v165 = vdup_n_s32(0x3DCCCCCDu);
  v166 = xmmword_10046E060;
  v168 = 0;
  v169 = 0;
  v167 = 0x3FD999999999999ALL;
  v170 = xmmword_10046E070;
  v171 = 5;
  v172 = 0x4000000000000000;
  v173 = 10;
  v174 = 0x4034000000000000;
  v175 = 3;
  v176 = 0x3FF0000000000000;
  v177 = 0x4008000000000000;
  sub_1002322E8(v416, &xmmword_100859CE8, &v151);
  sub_1002322E8(v417, &xmmword_100859D30, &xmmword_100859EA8);
  *(_QWORD *)&v349 = 0x200000003;
  *((_QWORD *)&v349 + 1) = 0xC045000000000000;
  *(_QWORD *)&__dst = 0xC045000000000000;
  sub_10018252C((uint64_t)&v350, (double *)&__dst, 1);
  v353 = xmmword_10046E0F0;
  v354 = 0x4024000000000000;
  v355 = 45;
  v356 = 0;
  v357 = 1;
  v358 = 1;
  v359 = xmmword_10046E100;
  v360 = xmmword_10046E110;
  v361 = v18;
  v362 = 0xC059000000000000;
  v363 = xmmword_10046E120;
  v364 = vdup_n_s32(0x3DCCCCCDu);
  v365 = xmmword_10046E060;
  v367 = 0;
  v368 = 0;
  v366 = 0x3FD999999999999ALL;
  v369 = xmmword_10046E070;
  v370 = 5;
  v371 = 0x4000000000000000;
  v372 = 10;
  v373 = 0x4034000000000000;
  v374 = 3;
  v375 = 0x3FF0000000000000;
  v376 = 0x4008000000000000;
  sub_1002322E8(v418, &xmmword_1008599D0, &v349);
  *(_QWORD *)&v322 = 0x200000003;
  *((_QWORD *)&v322 + 1) = 0xC043000000000000;
  *(_QWORD *)&__dst = 0xC043000000000000;
  sub_10018252C((uint64_t)v323, (double *)&__dst, 1);
  v324 = xmmword_10046E0F0;
  v325 = 0x4024000000000000;
  v326 = 45;
  v327 = 0;
  v329[0] = 1;
  v330[0] = 1;
  v331 = xmmword_10046E100;
  v332 = xmmword_10046E110;
  v333 = v18;
  v334 = 0xC059000000000000;
  v335 = xmmword_10046E120;
  v336 = vdup_n_s32(0x3DCCCCCDu);
  v337 = xmmword_10046E060;
  v339 = 0;
  v340 = 0;
  v338 = 0x3FD999999999999ALL;
  v341 = xmmword_10046E070;
  v342 = 5;
  v343 = 0x4000000000000000;
  v344 = 10;
  v345 = 0x4034000000000000;
  v346 = 3;
  v347 = 0x3FF0000000000000;
  v348 = 0x4008000000000000;
  sub_1002322E8(v419, (__int128 *)&qword_1008599B8, &v322);
  *(_QWORD *)&v296 = 0x200000003;
  *((_QWORD *)&v296 + 1) = 0xC044800000000000;
  *(_QWORD *)&__dst = 0xC044800000000000;
  sub_10018252C((uint64_t)v297, (double *)&__dst, 1);
  v298 = xmmword_10046E0F0;
  v299 = 0x4024000000000000;
  v300 = 45;
  v301 = 0;
  v302 = 1;
  v303 = 1;
  v304 = xmmword_10046E100;
  v305 = xmmword_10046E110;
  v306 = v18;
  v307 = 0xC059000000000000;
  v308 = xmmword_10046E120;
  v309 = vdup_n_s32(0x3DCCCCCDu);
  v310 = xmmword_10046E060;
  v312 = 0;
  v313 = 0;
  v311 = 0x3FD999999999999ALL;
  v314 = xmmword_10046E070;
  v315 = 5;
  v316 = 0x4000000000000000;
  v317 = 10;
  v318 = 0x4034000000000000;
  v319 = 3;
  v320 = 0x3FF0000000000000;
  v321 = 0x4008000000000000;
  sub_1002322E8(v420, (__int128 *)&qword_100859988, &v296);
  *(_QWORD *)&v125 = 0x200000003;
  *((_QWORD *)&v125 + 1) = 0xC043000000000000;
  *(_QWORD *)&__dst = 0xC043000000000000;
  sub_10018252C((uint64_t)v126, (double *)&__dst, 1);
  v127 = xmmword_10046E0F0;
  v128 = 0x4024000000000000;
  v129 = 45;
  v130 = 0;
  v131 = 1;
  v132 = 1;
  v133 = xmmword_10046E100;
  v134 = xmmword_10046E110;
  v135 = v18;
  v136 = 0xC059000000000000;
  v137 = xmmword_10046E120;
  v138 = vdup_n_s32(0x3DCCCCCDu);
  v139 = xmmword_10046E060;
  v141 = 0;
  v142 = 0;
  v140 = 0x3FD999999999999ALL;
  v143 = xmmword_10046E070;
  v144 = 5;
  v145 = 0x4000000000000000;
  v146 = 10;
  v147 = 0x4034000000000000;
  v148 = 3;
  v149 = 0x3FF0000000000000;
  v150 = 0x4008000000000000;
  sub_1002322E8(v421, (__int128 *)&qword_1008599A0, &v125);
  *(_QWORD *)&v99 = 0x200000003;
  *((_QWORD *)&v99 + 1) = 0xC043000000000000;
  *(_QWORD *)&__dst = 0xC043000000000000;
  sub_10018252C((uint64_t)v100, (double *)&__dst, 1);
  v101 = xmmword_10046E0F0;
  v102 = 0x4024000000000000;
  v103 = 45;
  v104 = 0;
  v105 = 1;
  v106 = 1;
  v107 = xmmword_10046E100;
  v108 = xmmword_10046E110;
  v109 = v18;
  v110 = 0xC059000000000000;
  v111 = xmmword_10046E120;
  v112 = vdup_n_s32(0x3DCCCCCDu);
  v113 = xmmword_10046E060;
  v115 = 0;
  v116 = 0;
  v114 = 0x3FD999999999999ALL;
  v117 = xmmword_10046E070;
  v118 = 5;
  v119 = 0x4000000000000000;
  v120 = 10;
  v121 = 0x4034000000000000;
  v122 = 3;
  v123 = 0x3FF0000000000000;
  v124 = 0x4008000000000000;
  sub_1002322E8(v422, (__int128 *)&qword_100859970, &v99);
  *(_QWORD *)&v270 = 0x200000003;
  *((_QWORD *)&v270 + 1) = 0xC046800000000000;
  *(_QWORD *)&__dst = 0xC046800000000000;
  sub_10018252C((uint64_t)v271, (double *)&__dst, 1);
  v272 = xmmword_10046E0F0;
  v273 = 0x4024000000000000;
  v274 = 45;
  v275 = 0;
  v276 = 1;
  v277 = 1;
  v278 = xmmword_10046E100;
  v279 = xmmword_10046E110;
  v280 = v18;
  v281 = 0xC059000000000000;
  v282 = xmmword_10046E120;
  v283 = vdup_n_s32(0x3DCCCCCDu);
  v284 = xmmword_10046E060;
  v286 = 0;
  v287 = 0;
  v285 = 0x3FD999999999999ALL;
  v288 = xmmword_10046E070;
  v289 = 5;
  v290 = 0x4000000000000000;
  v291 = 10;
  v292 = 0x4034000000000000;
  v293 = 3;
  v294 = 0x3FF0000000000000;
  v295 = 0x4008000000000000;
  sub_1002322E8(v423, &xmmword_100859910, &v270);
  *(_QWORD *)&v244 = 0x300000008;
  *((_QWORD *)&v244 + 1) = 0xC044800000000000;
  *(_QWORD *)&__dst = 0xC044800000000000;
  sub_10018252C((uint64_t)v245, (double *)&__dst, 1);
  v246 = xmmword_10046E0F0;
  v247 = 0x4024000000000000;
  v248 = 45;
  v249 = 0;
  v250 = 1;
  v251 = 1;
  v252 = xmmword_10046E100;
  v253 = xmmword_10046E110;
  v254 = v18;
  v255 = 0xC059000000000000;
  v256 = xmmword_10046E120;
  v257 = vdup_n_s32(0x3DCCCCCDu);
  v258 = xmmword_10046E060;
  v260 = 0;
  v261 = 0;
  v259 = 0x3FD999999999999ALL;
  v262 = xmmword_10046E070;
  v263 = 5;
  v264 = 0x4000000000000000;
  v265 = 10;
  v266 = 0x4034000000000000;
  v267 = 3;
  v268 = 0x3FF0000000000000;
  v269 = 0x4008000000000000;
  sub_1002322E8(v424, &xmmword_100859D00, &v244);
  *(_QWORD *)&v73 = 0x200000003;
  *((_QWORD *)&v73 + 1) = 0xC049000000000000;
  *(_QWORD *)&__dst = 0xC049000000000000;
  sub_10018252C((uint64_t)v74, (double *)&__dst, 1);
  v75 = xmmword_100473420;
  v76 = 0x4000000000000000;
  v77 = 20;
  v78 = 0;
  v79 = 1;
  v80 = 1;
  v81 = xmmword_10046E100;
  v82 = xmmword_10046E110;
  v83 = v18;
  v84 = 0xC059000000000000;
  v85 = xmmword_10046E120;
  v86 = vdup_n_s32(0x3DCCCCCDu);
  v87 = xmmword_10046E060;
  v89 = 0;
  v90 = 0;
  v88 = 0x3FD999999999999ALL;
  v91 = xmmword_10046E070;
  v92 = 5;
  v93 = 0x4000000000000000;
  v94 = 10;
  v95 = 0x4034000000000000;
  v96 = 3;
  v97 = 0x3FF0000000000000;
  v98 = 0x4008000000000000;
  sub_1002322E8(v425, &xmmword_1008599E8, &v73);
  *(_QWORD *)&v47 = 0x200000003;
  *((_QWORD *)&v47 + 1) = 0xC049000000000000;
  *(_QWORD *)&__dst = 0xC049000000000000;
  sub_10018252C((uint64_t)v48, (double *)&__dst, 1);
  v49 = xmmword_100473420;
  v50 = 0x4000000000000000;
  v51 = 20;
  v52 = 0;
  v53 = 1;
  v54 = 1;
  v55 = xmmword_10046E100;
  v56 = xmmword_10046E110;
  v57 = v18;
  v58 = 0xC059000000000000;
  v59 = xmmword_10046E120;
  v60 = vdup_n_s32(0x3DCCCCCDu);
  v61 = xmmword_10046E060;
  v63 = 0;
  v64 = 0;
  v62 = 0x3FD999999999999ALL;
  v65 = xmmword_10046E070;
  v66 = 5;
  v67 = 0x4000000000000000;
  v68 = 10;
  v69 = 0x4034000000000000;
  v70 = 3;
  v71 = 0x3FF0000000000000;
  v72 = 0x4008000000000000;
  sub_1002322E8(v426, &xmmword_100859A00, &v47);
  sub_100233C04((uint64_t)v205, (const void **)v403, 13);
  sub_1002323C8(v427, &qword_100859D48, v205);
  sub_100233F58((uint64_t)&v206, v427, 1);
  v430 = 2;
  sub_10023418C(v431, &v206);
  *(_QWORD *)&v19 = 0x300000008;
  *((_QWORD *)&v19 + 1) = 0xC03C000000000000;
  *(_QWORD *)&v209 = 0xC03C000000000000;
  sub_10018252C((uint64_t)v20, (double *)&v209, 1);
  v21 = xmmword_10046E0F0;
  v22 = 0x4024000000000000;
  v23 = 45;
  v24 = 0;
  v25 = 1;
  v26 = 1;
  v27 = xmmword_10046E100;
  v28 = xmmword_10046E110;
  v29 = v18;
  v30 = 0xC059000000000000;
  v31 = xmmword_10046E120;
  v32 = vdup_n_s32(0x3DCCCCCDu);
  v33 = xmmword_10046E060;
  v35 = 0;
  v36 = 0;
  v34 = 0x3FD999999999999ALL;
  v37 = xmmword_10046E070;
  v38 = 5;
  v39 = 0x4000000000000000;
  v40 = 10;
  v41 = 0x4034000000000000;
  v42 = 3;
  v43 = 0x3FF0000000000000;
  v44 = 0x4008000000000000;
  sub_1002322E8((char *)&__dst, &xmmword_100859D00, &v19);
  *(_QWORD *)&v209 = 0x300000008;
  *((_QWORD *)&v209 + 1) = 0xC040000000000000;
  v208 = -32.0;
  sub_10018252C((uint64_t)v210, &v208, 1);
  v212 = xmmword_10046E0F0;
  v213 = 0x4024000000000000;
  v214 = 45;
  v215 = 0;
  v216 = 1;
  v217 = 1;
  v218 = xmmword_10046E100;
  v219 = xmmword_10046E110;
  v220 = v18;
  v221 = 0xC059000000000000;
  v222 = xmmword_10046E120;
  v223 = vdup_n_s32(0x3DCCCCCDu);
  v224 = xmmword_10046E060;
  v226 = 0;
  v227 = 0;
  v225 = 0x3FD999999999999ALL;
  v228 = xmmword_10046E070;
  v229 = 5;
  v230 = 0x4000000000000000;
  v231 = 10;
  v232 = 0x4034000000000000;
  v233 = 3;
  v234 = 0x3FF0000000000000;
  v235 = 0x4008000000000000;
  sub_1002322E8(v240, &xmmword_100859D18, &v209);
  sub_100233C04((uint64_t)v45, (const void **)&__dst, 2);
  sub_1002323C8(v241, &qword_100859D48, v45);
  sub_100233F58((uint64_t)v46, v241, 1);
  v432 = 7;
  sub_10023418C(v433, v46);
  sub_100234264((uint64_t)&unk_10085FC70, &v430, 2);
  for (n = 0; n != -8; n -= 4)
    sub_100233AF4((uint64_t)&v433[n], (_QWORD *)v433[n + 1]);
  sub_100233AF4((uint64_t)v46, v46[1]);
  sub_100233B7C((uint64_t)v243, v243[1]);
  if (v242 < 0)
    operator delete((void *)v241[0]);
  sub_100233B7C((uint64_t)v45, v45[1]);
  v14 = 76;
  do
  {
    sub_10003E3F0((uint64_t)&v210[v14 * 8], v211[v14]);
    if (*((char *)&v208 + v14 * 8 + 7) < 0)
      operator delete(v207[v14]);
    v14 -= 38;
  }
  while (v14 * 8);
  sub_10003E3F0((uint64_t)v210, v211[0]);
  sub_10003E3F0((uint64_t)v20, v20[1]);
  sub_100233AF4((uint64_t)&v206, v207[0]);
  sub_100233B7C((uint64_t)v429, v429[1]);
  if (v428 < 0)
    operator delete((void *)v427[0]);
  sub_100233B7C((uint64_t)v205, v205[1]);
  v15 = 3952;
  do
  {
    sub_10003E3F0((uint64_t)&v379[v15 - 8], *(_QWORD **)&v379[v15]);
    if (*((char *)&v377 + v15 + 7) < 0)
      operator delete(*(void **)((char *)&v375 + v15));
    v15 -= 304;
  }
  while (v15);
  sub_10003E3F0((uint64_t)v48, v48[1]);
  sub_10003E3F0((uint64_t)v74, v74[1]);
  sub_10003E3F0((uint64_t)v245, v245[1]);
  sub_10003E3F0((uint64_t)v271, v271[1]);
  sub_10003E3F0((uint64_t)v100, v100[1]);
  sub_10003E3F0((uint64_t)v126, v126[1]);
  sub_10003E3F0((uint64_t)v297, v297[1]);
  sub_10003E3F0((uint64_t)v323, v323[1]);
  sub_10003E3F0((uint64_t)&v350, v351);
  sub_10003E3F0((uint64_t)&v152, v153);
  sub_10003E3F0(v17, v180);
  sub_10003E3F0((uint64_t)&v378, *((_QWORD **)&v378 + 1));
  __cxa_atexit((void (*)(void *))sub_10022EFBC, &unk_10085FC70, (void *)&_mh_execute_header);
  sub_10023F3B4();
  sub_100244F7C();
  objc_autoreleasePoolPop(context);
}

void sub_10024A8F4(_Unwind_Exception *a1)
{
  unint64_t *v1;

  while (1)
  {
    if (*((char *)v1 - 1) < 0)
      operator delete((void *)*(v1 - 3));
    v1 -= 4;
    if (v1 == &STACK[0x1360])
      _Unwind_Resume(a1);
  }
}

_QWORD *sub_10024B4F4@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, off_10080FCE0[a1]);
}

_QWORD *sub_10024B508@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, off_10080FD38[a1]);
}

_QWORD *sub_10024B51C@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, off_10080FD80[a1]);
}

_QWORD *sub_10024B530@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, off_10080FDA0[a1]);
}

void sub_10024BA60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_10024C1C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
  void *v19;
  id *v20;
  void *v21;

  objc_destroyWeak(v20);
  objc_destroyWeak(&location);

  _Unwind_Resume(a1);
}

void sub_10024C2A0(uint64_t a1, uint64_t a2)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
    objc_msgSend(WeakRetained, "_handleSessionBackgroundContinuationAuth:", a2);

}

void sub_10024C2E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_10024C454(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_10024C53C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_10024C650(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_10024C780(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_10024CF14(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_10024D264(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_10024D378(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_10024D71C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  void *v18;

  _Unwind_Resume(a1);
}

void sub_10024D9A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

void sub_10024DAE8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_10024DC18(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10024DCB4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10024E084(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_10024E250(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_10024E380(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_10024E6E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_10024E844(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10024EB88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  void *v16;
  void *v17;
  uint64_t v18;
  void *v20;

  v20 = *(void **)(v18 - 112);
  if (v20)
  {
    *(_QWORD *)(v18 - 104) = v20;
    operator delete(v20);
  }

  _Unwind_Resume(a1);
}

void sub_10024ECB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;
  void *v15;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10024ECD4(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id *WeakRetained;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  _QWORD v15[3];

  v5 = a2;
  v6 = a3;
  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    if (v6 && os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
    {
      sub_1003E0FCC();
      if (v5)
        goto LABEL_5;
    }
    else if (v5)
    {
LABEL_5:
      objc_msgSend(v5, "timestamp");
      v9 = v8;
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "relativeAltitude"));
      objc_msgSend(v10, "doubleValue");
      v12 = v11;
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "pressure"));
      objc_msgSend(v13, "doubleValue");
      v15[0] = v9;
      v15[1] = v12;
      v15[2] = v14;

      objc_msgSend(WeakRetained[6], "acceptAltimeterData:", v15);
      goto LABEL_9;
    }
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
      sub_1003E0FA0();
  }
LABEL_9:

}

void sub_10024EDF4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v6 = v5;

  _Unwind_Resume(a1);
}

void sub_10024EEF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;
  void *v15;
  void *v16;
  void *v17;

  v17 = v16;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10024EF24(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject **WeakRetained;
  NSObject **v8;
  NSObject *v9;
  _QWORD block[4];
  id v11;
  id v12;
  NSObject **v13;

  v5 = a2;
  v6 = a3;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
    sub_1003E102C();
  WeakRetained = (NSObject **)objc_loadWeakRetained((id *)(a1 + 32));
  v8 = WeakRetained;
  if (WeakRetained)
  {
    v9 = WeakRetained[8];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10024F00C;
    block[3] = &unk_100809CB0;
    v11 = v6;
    v12 = v5;
    v13 = v8;
    dispatch_async(v9, block);

  }
}

void sub_10024F00C(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  unsigned int v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  unsigned int v20;
  void *v21;
  void *v22;
  _QWORD v23[2];
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;

  if (*(_QWORD *)(a1 + 32) && os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
    sub_1003E10B0();
  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "startDate"));
    objc_msgSend(v22, "timeIntervalSinceReferenceDate");
    v4 = v3;
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "endDate"));
    objc_msgSend(v5, "timeIntervalSinceReferenceDate");
    v7 = v6;
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "numberOfSteps"));
    v9 = objc_msgSend(v8, "unsignedIntValue");
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "distance"));
    objc_msgSend(v10, "doubleValue");
    v12 = v11;
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "currentPace"));
    objc_msgSend(v13, "doubleValue");
    v15 = v14;
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "currentCadence"));
    objc_msgSend(v16, "doubleValue");
    v18 = v17;
    v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "floorsAscended"));
    v20 = objc_msgSend(v19, "unsignedIntValue");
    v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "floorsDescended"));
    v23[0] = v4;
    v23[1] = v7;
    v24 = v9;
    v25 = v12;
    v26 = v15;
    v27 = v18;
    v28 = v20;
    v29 = objc_msgSend(v21, "unsignedIntValue");

    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
      sub_1003E1084();
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 48) + 48), "acceptPedometerData:", v23);
  }
  else if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
  {
    sub_1003E1058();
  }
}

void sub_10024F208(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_10024F258()
{
  JUMPOUT(0x10024F240);
}

void sub_10024F260()
{
  JUMPOUT(0x10024F244);
}

void sub_10024F268()
{
  JUMPOUT(0x10024F248);
}

void sub_10024F31C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;
  void *v15;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10024F33C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject **WeakRetained;
  NSObject **v8;
  NSObject *v9;
  _QWORD block[4];
  id v11;
  id v12;
  NSObject **v13;

  v5 = a2;
  v6 = a3;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
    sub_1003E1110();
  WeakRetained = (NSObject **)objc_loadWeakRetained((id *)(a1 + 32));
  v8 = WeakRetained;
  if (WeakRetained)
  {
    v9 = WeakRetained[8];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10024F424;
    block[3] = &unk_100809CB0;
    v11 = v6;
    v12 = v5;
    v13 = v8;
    dispatch_async(v9, block);

  }
}

void sub_10024F424(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  NSObject *v7;
  uint8_t v8[16];
  uint64_t v9;
  BOOL v10;

  if (*(_QWORD *)(a1 + 32) && os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
    sub_1003E113C();
  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "date"));
    objc_msgSend(v3, "timeIntervalSinceReferenceDate");
    v5 = v4;
    v6 = objc_msgSend(*(id *)(a1 + 40), "type") == (id)1;
    v9 = v5;
    v10 = v6;

    v7 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#ses-nrby-peer,sending pedometer events to NUE", v8, 2u);
    }
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 48) + 48), "acceptPedometerEvent:", &v9);
  }
  else if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
  {
    sub_1003E1058();
  }
}

void sub_10024F540(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10024F608(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;
  void *v15;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10024F628(uint64_t a1, void *a2)
{
  id v3;
  id *WeakRetained;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  _QWORD v11[2];
  unsigned __int8 v12;
  unsigned __int8 v13;
  unsigned __int8 v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unsigned int v18;

  v3 = a2;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
    sub_1003E11F4();
  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    if (v3)
    {
      objc_msgSend(v3, "timestamp");
      v6 = v5;
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "startDate"));
      objc_msgSend(v7, "timeIntervalSinceReferenceDate");
      v9 = v8;
      v10 = objc_msgSend(v3, "confidence");
      v11[0] = v6;
      v11[1] = v9;
      v12 = objc_msgSend(v3, "stationary");
      v13 = objc_msgSend(v3, "walking");
      v14 = objc_msgSend(v3, "running");
      v15 = objc_msgSend(v3, "automotive");
      v16 = objc_msgSend(v3, "cycling");
      v17 = objc_msgSend(v3, "unknown");
      v18 = v10;

      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
        sub_1003E11C8();
      objc_msgSend(WeakRetained[6], "acceptMotionActivity:", v11);
    }
    else if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
    {
      sub_1003E119C();
    }
  }

}

void sub_10024F7B0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_10024F898(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;
  void *v15;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10024F8B8(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id *WeakRetained;
  double v8;
  char v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  void *v38;
  double v39;
  double v40;
  void *v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  BOOL v54;
  BOOL v55;
  char v56;
  double v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  double v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char v85;

  v5 = a2;
  v6 = a3;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
    sub_1003E1338();
  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    if (v6 && os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
    {
      sub_1003E12D8();
      if (v5)
      {
LABEL_7:
        objc_msgSend(v5, "timestamp");
        sub_10028D4C0((uint64_t)(WeakRetained + 22), v8);
        if (v9)
        {
          v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "deltaPositionX"));

          if (v10)
          {
            v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "deltaPositionX"));
            objc_msgSend(v11, "doubleValue");
            v65 = v12;

            v13 = 1;
          }
          else
          {
            v13 = 0;
            v65 = 0;
          }
          v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "deltaPositionY"));

          if (v14)
          {
            v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "deltaPositionY"));
            objc_msgSend(v15, "doubleValue");
            v64 = v16;

            v17 = 1;
          }
          else
          {
            v17 = 0;
            v64 = 0;
          }
          v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "deltaPositionZ"));

          if (v18)
          {
            v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "deltaPositionZ"));
            objc_msgSend(v19, "doubleValue");
            v21 = v20;

            v22 = 1;
          }
          else
          {
            v22 = 0;
            v21 = 0;
          }
          v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "deltaVelocityX"));

          if (v23)
          {
            v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "deltaVelocityX"));
            objc_msgSend(v24, "doubleValue");
            v26 = v25;

            v27 = 1;
          }
          else
          {
            v27 = 0;
            v26 = 0;
          }
          v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "deltaVelocityY"));

          if (v28)
          {
            v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "deltaVelocityY"));
            objc_msgSend(v29, "doubleValue");
            v31 = v30;

            v63 = 1;
          }
          else
          {
            v63 = 0;
            v31 = 0;
          }
          v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "deltaVelocityZ"));

          v58 = v27;
          if (v32)
          {
            v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "deltaVelocityZ"));
            objc_msgSend(v33, "doubleValue");
            v35 = v34;

            v36 = 1;
          }
          else
          {
            v36 = 0;
            v35 = 0;
          }
          v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "quaternionW", v58, v22, v17, v13));

          if (v37)
          {
            v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "quaternionW"));
            objc_msgSend(v38, "doubleValue");
            v40 = v39;

          }
          else
          {
            v40 = 0.0;
          }
          v41 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "quaternionX"));

          if (v41)
          {
            v42 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "quaternionX"));
            objc_msgSend(v42, "doubleValue");
            v44 = v43;

          }
          else
          {
            v44 = 0;
          }
          v45 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "quaternionY"));

          if (v45)
          {
            v46 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "quaternionY"));
            objc_msgSend(v46, "doubleValue");
            v48 = v47;

          }
          else
          {
            v48 = 0;
          }
          v49 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "quaternionZ"));

          if (v49)
          {
            v50 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "quaternionZ"));
            objc_msgSend(v50, "doubleValue");
            v52 = v51;

          }
          else
          {
            v52 = 0;
          }
          objc_msgSend(v5, "timestamp");
          v66 = v53;
          v67 = 0;
          if (v37)
            v54 = v41 == 0;
          else
            v54 = 1;
          v55 = v54 || v45 == 0;
          v68 = 0;
          v56 = !v55;
          v69 = v65;
          v57 = 0.0;
          if ((v56 & (v49 != 0)) != 0)
            v57 = v40;
          v70 = v62;
          v71 = v64;
          v72 = v61;
          v73 = v21;
          v74 = v60;
          v75 = v26;
          v76 = v59;
          v77 = v31;
          v78 = v63;
          v79 = v35;
          v80 = v36;
          v81 = v57;
          v82 = v44;
          v83 = v48;
          v84 = v52;
          v85 = v56 & (v49 != 0);
          if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
            sub_1003E1278();
          objc_msgSend(WeakRetained[6], "acceptDevicePDRInput:", &v66);
        }
        else if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
        {
          sub_1003E124C();
        }
        goto LABEL_57;
      }
    }
    else if (v5)
    {
      goto LABEL_7;
    }
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
      sub_1003E1220();
  }
LABEL_57:

}

void sub_10024FD64(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_10024FEE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;
  void *v15;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10024FF00(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id *WeakRetained;
  double v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD v41[14];

  v5 = a2;
  v6 = a3;
  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  if (!WeakRetained)
    goto LABEL_12;
  if (v6 && os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
  {
    sub_1003E1390();
    if (v5)
    {
LABEL_5:
      objc_msgSend(v5, "timestamp");
      v9 = sub_10028D4C0((uint64_t)(WeakRetained + 22), v8);
      if (v10)
      {
        v11 = v9;
        objc_msgSend(v5, "userAcceleration");
        v40 = v12;
        objc_msgSend(v5, "userAcceleration");
        v39 = v13;
        objc_msgSend(v5, "userAcceleration");
        v38 = v14;
        objc_msgSend(v5, "rotationRate");
        v37 = v15;
        objc_msgSend(v5, "rotationRate");
        v17 = v16;
        objc_msgSend(v5, "rotationRate");
        v19 = v18;
        v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "attitude"));
        objc_msgSend(v20, "quaternion");
        v22 = v21;
        v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "attitude"));
        objc_msgSend(v23, "quaternion");
        v25 = v24;
        v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "attitude"));
        objc_msgSend(v26, "quaternion");
        v28 = v27;
        v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "attitude"));
        objc_msgSend(v29, "quaternion");
        v31 = v30;
        objc_msgSend(v5, "gravity");
        v33 = v32;
        objc_msgSend(v5, "gravity");
        v35 = v34;
        objc_msgSend(v5, "gravity");
        v41[0] = v11;
        v41[1] = v40;
        v41[2] = v39;
        v41[3] = v38;
        v41[4] = v37;
        v41[5] = v17;
        v41[6] = v19;
        v41[7] = v22;
        v41[8] = v25;
        v41[9] = v28;
        v41[10] = v31;
        v41[11] = v33;
        v41[12] = v35;
        v41[13] = v36;

        objc_msgSend(WeakRetained[6], "acceptDeviceMotionInput:", v41);
      }
      else if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
      {
        sub_1003E1364();
      }
      goto LABEL_12;
    }
  }
  else if (v5)
  {
    goto LABEL_5;
  }
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
    sub_1003E1220();
LABEL_12:

}

void sub_10025014C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_100250730(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10025079C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_100250888(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_10025089C(uint64_t a1)
{
  id v2;
  void *v3;
  void *v4;
  objc_super v5;

  if (*(_BYTE *)(*(_QWORD *)(a1 + 32) + 56))
  {
    v5.receiver = *(id *)(a1 + 32);
    v5.super_class = (Class)NIServerNearbyPeerSession;
    v2 = objc_msgSendSuper2(&v5, "resourcesManager");
    v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "remote"));
    objc_msgSend(v4, "didUpdateNearbyObjects:", *(_QWORD *)(a1 + 40));

  }
}

void sub_10025091C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_100250A3C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_100250A54(uint64_t a1)
{
  id v2;
  void *v3;
  void *v4;
  objc_super v5;

  if (*(_BYTE *)(*(_QWORD *)(a1 + 32) + 56))
  {
    v5.receiver = *(id *)(a1 + 32);
    v5.super_class = (Class)NIServerNearbyPeerSession;
    v2 = objc_msgSendSuper2(&v5, "resourcesManager");
    v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "remote"));
    objc_msgSend(v4, "didUpdateAlgorithmState:forObject:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));

  }
}

void sub_100250AD4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_100250C20(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_100250CB8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100250D3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_100250EF4()
{
  void *v0;
  _OWORD *v6;
  _OWORD *v7;
  __int128 v8;
  unint64_t v9;
  __int128 v10;
  uint64_t v11;

  v0 = objc_autoreleasePoolPush();
  v10 = xmmword_100473480;
  v11 = 0x300000003;
  sub_100182284((uint64_t)&unk_10085A190, (int *)&v10, 3);
  xmmword_10085A1A8 = xmmword_10046E050;
  unk_10085A1B8 = xmmword_10046E060;
  qword_10085A1D0 = 0;
  unk_10085A1D8 = 0;
  qword_10085A1C8 = 0x3FD999999999999ALL;
  unk_10085A1E0 = xmmword_10046E070;
  dword_10085A1F0 = 5;
  qword_10085A1F8 = 0x4000000000000000;
  dword_10085A200 = 5;
  byte_10085A208 = 0;
  unk_10085A20C = 0x30000000ALL;
  xmmword_10085A218 = xmmword_10046E080;
  unk_10085A228 = xmmword_10046E090;
  xmmword_10085A238 = xmmword_10046E0A0;
  qword_10085A248 = 0x3FE3333333333333;
  dword_10085A250 = 3;
  xmmword_10085A258 = xmmword_10046E0B0;
  unk_10085A268 = xmmword_10046E090;
  xmmword_10085A278 = xmmword_10046E080;
  qword_10085A288 = 0x3FE3333333333333;
  byte_10085A290 = 0;
  xmmword_10085A298 = xmmword_10046E0C0;
  unk_10085A2A8 = xmmword_10046E0D0;
  __asm { FMOV            V0.2D, #1.0 }
  v8 = _Q0;
  xmmword_10085A2B8 = _Q0;
  qword_10085A2C8 = 0xBFD3333333333333;
  xmmword_10085A2D0 = xmmword_10046E0E0;
  qword_10085A2E0 = 0x3E99999A40000000;
  xmmword_10085A2E8 = xmmword_10046E060;
  qword_10085A300 = 0;
  unk_10085A308 = 0;
  qword_10085A2F8 = 0x3FD999999999999ALL;
  xmmword_10085A310 = xmmword_10046E070;
  dword_10085A320 = 5;
  qword_10085A328 = 0x4000000000000000;
  dword_10085A330 = 4;
  qword_10085A338 = 0x300000008;
  qword_10085A340 = 0xC04E800000000000;
  v9 = 0xC04E800000000000;
  sub_10018252C((uint64_t)algn_10085A348, (double *)&v9, 1);
  xmmword_10085A360 = xmmword_10046E0F0;
  qword_10085A370 = 0x4024000000000000;
  dword_10085A378 = 45;
  byte_10085A37C = 0;
  dword_10085A380 = 1;
  byte_10085A388 = 1;
  xmmword_10085A390 = xmmword_10046E100;
  unk_10085A3A0 = xmmword_10046E110;
  xmmword_10085A3B0 = v8;
  qword_10085A3C0 = 0xC059000000000000;
  xmmword_10085A3C8 = xmmword_10046E120;
  qword_10085A3D8 = (uint64_t)vdup_n_s32(0x3DCCCCCDu);
  xmmword_10085A3E0 = xmmword_10046E060;
  qword_10085A3F0 = 0x3FD999999999999ALL;
  qword_10085A400 = 0;
  qword_10085A3F8 = 0;
  xmmword_10085A408 = xmmword_10046E070;
  dword_10085A418 = 5;
  qword_10085A420 = 0x4000000000000000;
  dword_10085A428 = 10;
  qword_10085A430 = 0x4034000000000000;
  dword_10085A438 = 3;
  xmmword_10085A440 = xmmword_10046E130;
  __cxa_atexit((void (*)(void *))sub_100180704, &unk_10085A190, (void *)&_mh_execute_header);
  qword_10085A458 = 0;
  unk_10085A460 = 0;
  qword_10085A450 = 0;
  v6 = operator new(0x40uLL);
  qword_10085A458 = (uint64_t)(v6 + 4);
  unk_10085A460 = v6 + 4;
  *v6 = xmmword_100473498;
  v6[1] = unk_1004734A8;
  v6[2] = xmmword_1004734B8;
  v6[3] = unk_1004734C8;
  qword_10085A450 = (uint64_t)v6;
  __cxa_atexit((void (*)(void *))sub_1000325D8, &qword_10085A450, (void *)&_mh_execute_header);
  qword_10085A470 = 0;
  unk_10085A478 = 0;
  qword_10085A468 = 0;
  v7 = operator new(0x10uLL);
  qword_10085A470 = (uint64_t)(v7 + 1);
  unk_10085A478 = v7 + 1;
  *v7 = xmmword_1004734D8;
  qword_10085A468 = (uint64_t)v7;
  __cxa_atexit((void (*)(void *))sub_1000325D8, &qword_10085A468, (void *)&_mh_execute_header);
  objc_autoreleasePoolPop(v0);
}

void sub_10025124C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10003E3F0(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_10025126C(uint64_t *a1, void *a2)
{
  id v3;
  id v4;
  unsigned int v5;
  NSObject *v6;
  _BOOL4 v7;
  uint64_t v8;
  os_log_t v9;
  void *v10;
  uint64_t v11;
  int v13;
  uint64_t v14;

  v3 = a2;
  *a1 = (uint64_t)v3;
  *((_BYTE *)a1 + 8) = 0;
  a1[2] = 0;
  v4 = objc_msgSend(objc_alloc((Class)NSUserDefaults), "initWithSuiteName:", CFSTR(".GlobalPreferences"));
  v5 = objc_msgSend(v4, "BOOLForKey:", CFSTR("com.apple.CarKeysTests.enableCertificationLogging"));
  *((_BYTE *)a1 + 8) = v5;
  v6 = qword_10085F520;
  v7 = os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT);
  if (v5)
  {
    if (v7)
    {
      v8 = *a1;
      v13 = 138412290;
      v14 = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#alisha-cert,Logging enabled (vehicle identifier: %@)", (uint8_t *)&v13, 0xCu);
    }
    v9 = os_log_create("com.apple.certification", "digitalCarKey");
    v10 = (void *)a1[2];
    a1[2] = (uint64_t)v9;

  }
  else if (v7)
  {
    v11 = *a1;
    v13 = 138412290;
    v14 = v11;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#alisha-cert,Logging not enabled (vehicle identifier: %@)", (uint8_t *)&v13, 0xCu);
  }

  return a1;
}

void sub_1002513D8(_Unwind_Exception *a1)
{
  id *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_100251410(uint64_t a1, unsigned __int16 *a2)
{
  double *v3;
  unsigned __int8 *i;
  int v5;
  NSMutableDictionary *v6;
  NSMutableDictionary *v7;
  const __CFString *v8;
  void *v9;
  int v10;
  NSMutableDictionary *v11;
  NSMutableDictionary *v12;
  const __CFString *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  NSMutableDictionary *v18;
  void *v19;
  id v20;
  NSObject *v21;
  NSObject *v22;
  void *v23;
  id v24;
  NSObject *v25;
  uint64_t v26;
  _QWORD *v27;
  NSMutableArray *v29;
  id v30;
  uint8_t buf[4];
  id v32;

  if (*(_BYTE *)(a1 + 8))
  {
    v26 = a1;
    v29 = objc_opt_new(NSMutableArray);
    v3 = (double *)*((_QWORD *)a2 + 11);
    for (i = (unsigned __int8 *)*((_QWORD *)a2 + 12); v3 != (double *)i; v3 += 2)
    {
      v5 = *(unsigned __int8 *)v3;
      v6 = objc_opt_new(NSMutableDictionary);
      v7 = v6;
      if (v5)
        v8 = CFSTR("failure");
      else
        v8 = CFSTR("success");
      -[NSMutableDictionary setObject:forKey:](v6, "setObject:forKey:", v8, CFSTR("responder_status"), v26);
      v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v3[1]));
      -[NSMutableDictionary setObject:forKey:](v7, "setObject:forKey:", v9, CFSTR("rssi_dBm"));

      -[NSMutableArray addObject:](v29, "addObject:", v7);
    }
    v10 = sub_100302364(*a2);
    v11 = objc_opt_new(NSMutableDictionary);
    v12 = v11;
    if (v10)
      v13 = CFSTR("failure");
    else
      v13 = CFSTR("success");
    -[NSMutableDictionary setObject:forKey:](v11, "setObject:forKey:", v13, CFSTR("block_status"), v26);
    v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", *((unsigned int *)a2 + 2)));
    -[NSMutableDictionary setObject:forKey:](v12, "setObject:forKey:", v14, CFSTR("uwb_session_id"));

    v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", a2[12]));
    -[NSMutableDictionary setObject:forKey:](v12, "setObject:forKey:", v15, CFSTR("block_index"));

    v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", *((unsigned __int8 *)a2 + 84)));
    -[NSMutableDictionary setObject:forKey:](v12, "setObject:forKey:", v16, CFSTR("successful_responders"));

    v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", (uint64_t)(*((_QWORD *)a2 + 12) - *((_QWORD *)a2 + 11)) >> 4));
    -[NSMutableDictionary setObject:forKey:](v12, "setObject:forKey:", v17, CFSTR("total_responders"));

    -[NSMutableDictionary setObject:forKey:](v12, "setObject:forKey:", v29, CFSTR("responder_info"));
    v18 = objc_opt_new(NSMutableDictionary);
    -[NSMutableDictionary setObject:forKey:](v18, "setObject:forKey:", CFSTR("uwb_ranging_block"), CFSTR("log_type"));
    -[NSMutableDictionary setObject:forKey:](v18, "setObject:forKey:", *v27, CFSTR("vehicle_uuid"));
    -[NSMutableDictionary setObject:forKey:](v18, "setObject:forKey:", v12, CFSTR("payload"));
    v30 = 0;
    v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSJSONSerialization dataWithJSONObject:options:error:](NSJSONSerialization, "dataWithJSONObject:options:error:", v18, 3, &v30));
    v20 = v30;
    if (v20)
    {
      v21 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
        sub_1003E14F8(v21);
    }
    else
    {
      v24 = objc_msgSend(objc_alloc((Class)NSString), "initWithData:encoding:", v19, 4);
      v25 = v27[2];
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        v32 = v24;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "\n%@", buf, 0xCu);
      }

    }
  }
  else
  {
    v22 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_INFO))
    {
      v23 = *(void **)a1;
      *(_DWORD *)buf = 138412290;
      v32 = v23;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_INFO, "#alisha-cert,Skip logging initiator ranging block summary (vehicle identifier: %@)", buf, 0xCu);
    }
  }
}

void sub_1002517CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

uint64_t *sub_100251854()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_10085A500);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_10085A500))
  {
    qword_10085A480 = 850045863;
    unk_10085A488 = 0u;
    unk_10085A498 = 0u;
    unk_10085A4A8 = 0u;
    qword_10085A4B8 = 0;
    unk_10085A4C0 = 850045863;
    unk_10085A4C8 = 0u;
    unk_10085A4D8 = 0u;
    unk_10085A4E8 = 0u;
    qword_10085A4F8 = 0;
    __cxa_atexit((void (*)(void *))sub_1002518E8, &qword_10085A480, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10085A500);
  }
  return &qword_10085A480;
}

void sub_1002518E8(std::mutex *a1)
{
  std::mutex::~mutex(a1 + 1);
  std::mutex::~mutex(a1);
}

void sub_100251910(std::mutex *a1, unsigned int a2, signed int a3)
{
  void *v6;
  __CFString *v7;
  __CFString *v8;
  NSObject *v9;
  void *v10;
  __CFString *v11;
  __CFString *v12;
  NSObject *v13;
  signed int v14;
  void *v15;
  __CFString *v16;
  __CFString *v17;
  NSObject *v18;
  char v19;
  void *v20;
  __CFString *v21;
  __CFString *v22;
  NSObject *v23;
  __CFString *v24;
  __CFString *v25;
  __CFString *v26;
  __CFString *v27;
  void *v28;
  _BOOL8 v29;
  __CFString *v30;
  __CFString *v31;
  NSObject *v32;
  void *v33;
  __CFString *v34;
  __CFString *v35;
  NSObject *v36;
  void *v37;
  __CFString *v38;
  __CFString *v39;
  NSObject *v40;
  CFOptionFlags v41;
  std::mutex *v42;
  char v43;
  uint8_t buf[4];
  _BYTE v45[10];
  __int16 v46;
  __CFString *v47;

  if (+[NIPlatformInfo isInternalBuild](NIPlatformInfo, "isInternalBuild"))
  {
    if (sub_100251F18(a1, a2))
    {
      v6 = (void *)qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
      {
        v7 = CFSTR("Unknown");
        if (a2 == 1)
          v7 = CFSTR("AlishaURSKRetrievalFailed");
        if (!a2)
          v7 = CFSTR("AlishaGetKeyTimedOut");
        v8 = v7;
        *(_DWORD *)buf = 138412290;
        *(_QWORD *)v45 = v8;
        v9 = v6;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#ttr,User previously disabled TTR alerts for event %@", buf, 0xCu);

      }
    }
    else
    {
      v14 = sub_100252000(a1, a2);
      if (v14 >= a3)
      {
        v42 = a1;
        v43 = 0;
        v19 = sub_10019E458((uint64_t)&v42);
        v20 = (void *)qword_10085F520;
        if ((v19 & 1) != 0)
        {
          if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
          {
            v21 = CFSTR("Unknown");
            if (a2 == 1)
              v21 = CFSTR("AlishaURSKRetrievalFailed");
            if (!a2)
              v21 = CFSTR("AlishaGetKeyTimedOut");
            v22 = v21;
            *(_DWORD *)buf = 67109634;
            *(_DWORD *)v45 = v14;
            *(_WORD *)&v45[4] = 1024;
            *(_DWORD *)&v45[6] = a3;
            v46 = 2112;
            v47 = v22;
            v23 = v20;
            _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "#ttr,Event count %d meets threshold %d to present alert for event %@", buf, 0x18u);

          }
          sub_1002521DC(a1, a2);
          v24 = CFSTR("Nearby Interaction issue");
          if (a2 < 2)
            v24 = CFSTR("UWB Digital Key issue");
          v25 = v24;
          v26 = CFSTR("[Internal only] Nearby Interaction issue");
          if (a2 == 1)
            v26 = CFSTR("[Internal only] Passive entry may be failing. Reason: continuous URSK retrieval failure (rdar://118780288).");
          if (!a2)
            v26 = CFSTR("[Internal only] Passive entry may be failing. Reason: GetKey timeout (rdar://118964569).");
          v27 = v26;
          v41 = 0;
          CFUserNotificationDisplayAlert(0.0, 2uLL, 0, 0, 0, v25, v27, CFSTR("File a Radar"), CFSTR("Dismiss once"), CFSTR("Dismiss forever"), &v41);
          if (v41 == 2)
          {
            v33 = (void *)qword_10085F520;
            if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
            {
              v34 = CFSTR("Unknown");
              if (a2 == 1)
                v34 = CFSTR("AlishaURSKRetrievalFailed");
              if (!a2)
                v34 = CFSTR("AlishaGetKeyTimedOut");
              v35 = v34;
              *(_DWORD *)buf = 138412290;
              *(_QWORD *)v45 = v35;
              v36 = v33;
              _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, "#ttr,User selected DISMISS FOREVER for event %@", buf, 0xCu);

            }
            sub_10025261C(a1, a2);
          }
          else if (v41)
          {
            v37 = (void *)qword_10085F520;
            if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
            {
              v38 = CFSTR("Unknown");
              if (a2 == 1)
                v38 = CFSTR("AlishaURSKRetrievalFailed");
              if (!a2)
                v38 = CFSTR("AlishaGetKeyTimedOut");
              v39 = v38;
              *(_DWORD *)buf = 138412290;
              *(_QWORD *)v45 = v39;
              v40 = v37;
              _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "#ttr,User selected DISMISS ONCE for event %@", buf, 0xCu);

            }
          }
          else
          {
            v28 = (void *)qword_10085F520;
            v29 = os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT);
            if (v29)
            {
              v30 = CFSTR("Unknown");
              if (a2 == 1)
                v30 = CFSTR("AlishaURSKRetrievalFailed");
              if (!a2)
                v30 = CFSTR("AlishaGetKeyTimedOut");
              v31 = v30;
              *(_DWORD *)buf = 138412290;
              *(_QWORD *)v45 = v31;
              v32 = v28;
              _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "#ttr,User selected FILE A RADAR for event %@", buf, 0xCu);

            }
            sub_100252344(v29, a2);
          }

        }
        else if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
        {
          sub_1003E1538(a2, v20);
        }
        if (v43)
          std::mutex::unlock(v42);
      }
      else
      {
        v15 = (void *)qword_10085F520;
        if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
        {
          v16 = CFSTR("Unknown");
          if (a2 == 1)
            v16 = CFSTR("AlishaURSKRetrievalFailed");
          if (!a2)
            v16 = CFSTR("AlishaGetKeyTimedOut");
          v17 = v16;
          *(_DWORD *)buf = 67109634;
          *(_DWORD *)v45 = v14;
          *(_WORD *)&v45[4] = 1024;
          *(_DWORD *)&v45[6] = a3;
          v46 = 2112;
          v47 = v17;
          v18 = v15;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "#ttr,Event count %d is below threshold %d to present alert for event %@", buf, 0x18u);

        }
      }
    }
  }
  else
  {
    v10 = (void *)qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
    {
      v11 = CFSTR("Unknown");
      if (a2 == 1)
        v11 = CFSTR("AlishaURSKRetrievalFailed");
      if (!a2)
        v11 = CFSTR("AlishaGetKeyTimedOut");
      v12 = v11;
      *(_DWORD *)buf = 138412290;
      *(_QWORD *)v45 = v12;
      v13 = v10;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#ttr,Non-internal build. Ignore notification of event %@", buf, 0xCu);

    }
  }
}

void sub_100251EE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::mutex *a13, char a14)
{
  void *v14;
  void *v15;

  if (a14)
    std::mutex::unlock(a13);
  _Unwind_Resume(a1);
}

id sub_100251F18(std::mutex *a1, int a2)
{
  std::mutex *v3;
  void *v4;
  void *v5;
  const __CFString *v6;
  const __CFString *v7;
  void *v8;
  id v9;

  v3 = a1 + 1;
  std::mutex::lock(a1 + 1);
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "dictionaryForKey:", CFSTR("TapToRadarDisable")));

  v6 = CFSTR("Unknown");
  if (a2 == 1)
    v6 = CFSTR("AlishaURSKRetrievalFailed");
  if (a2)
    v7 = v6;
  else
    v7 = CFSTR("AlishaGetKeyTimedOut");
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKeyedSubscript:", v7));
  v9 = objc_msgSend(v8, "BOOLValue");

  std::mutex::unlock(v3);
  return v9;
}

void sub_100251FC8(_Unwind_Exception *a1)
{
  std::mutex *v1;
  void *v2;
  void *v3;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

id sub_100252000(std::mutex *a1, int a2)
{
  std::mutex *v3;
  void *v4;
  void *v5;
  NSMutableDictionary *v6;
  NSMutableDictionary *v7;
  __CFString *v8;
  __CFString *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;

  v3 = a1 + 1;
  std::mutex::lock(a1 + 1);
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "dictionaryForKey:", CFSTR("TapToRadarEventCount")));

  if (v5)
    v6 = (NSMutableDictionary *)objc_msgSend(v5, "mutableCopy");
  else
    v6 = objc_opt_new(NSMutableDictionary);
  v7 = v6;
  v8 = CFSTR("Unknown");
  if (a2 == 1)
    v8 = CFSTR("AlishaURSKRetrievalFailed");
  if (!a2)
    v8 = CFSTR("AlishaGetKeyTimedOut");
  v9 = v8;
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKeyedSubscript:", v9));
  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", objc_msgSend(v10, "intValue") + 1));
  -[NSMutableDictionary setObject:forKeyedSubscript:](v7, "setObject:forKeyedSubscript:", v11, v9);

  v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  objc_msgSend(v12, "setObject:forKey:", v7, CFSTR("TapToRadarEventCount"));

  v13 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKeyedSubscript:](v7, "objectForKeyedSubscript:", v9));
  v14 = objc_msgSend(v13, "intValue");

  std::mutex::unlock(v3);
  return v14;
}

void sub_100252164(_Unwind_Exception *a1)
{
  std::mutex *v1;
  void *v2;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

id sub_1002521DC(std::mutex *a1, int a2)
{
  std::mutex *v3;
  void *v4;
  void *v5;
  NSMutableDictionary *v6;
  NSMutableDictionary *v7;
  const __CFString *v8;
  const __CFString *v9;
  void *v10;
  void *v11;
  id v12;

  v3 = a1 + 1;
  std::mutex::lock(a1 + 1);
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "dictionaryForKey:", CFSTR("TapToRadarEventCount")));

  if (v5)
    v6 = (NSMutableDictionary *)objc_msgSend(v5, "mutableCopy");
  else
    v6 = objc_opt_new(NSMutableDictionary);
  v7 = v6;
  v8 = CFSTR("Unknown");
  if (a2 == 1)
    v8 = CFSTR("AlishaURSKRetrievalFailed");
  if (a2)
    v9 = v8;
  else
    v9 = CFSTR("AlishaGetKeyTimedOut");
  -[NSMutableDictionary setObject:forKeyedSubscript:](v6, "setObject:forKeyedSubscript:", &off_10082C0D0, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  objc_msgSend(v10, "setObject:forKey:", v7, CFSTR("TapToRadarEventCount"));

  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKeyedSubscript:", v9));
  v12 = objc_msgSend(v11, "intValue");

  std::mutex::unlock(v3);
  return v12;
}

void sub_1002522F0(_Unwind_Exception *a1)
{
  std::mutex *v1;
  void *v2;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_100252330()
{
  void *v0;

  JUMPOUT(0x100252320);
}

void sub_10025233C()
{
  JUMPOUT(0x100252320);
}

void sub_100252344(uint64_t a1, unsigned int a2)
{
  __CFString *v3;
  __CFString *v4;
  __CFString *v5;
  __CFString *v6;
  __CFString *v7;
  __CFString *v8;
  __CFString *v9;
  __CFString *v10;
  void *v11;
  NSMutableArray *v12;
  void *v13;
  void *v14;
  void *v15;
  void **v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t, uint64_t);
  void *v19;
  NSMutableArray *v20;
  _QWORD v21[8];
  _QWORD v22[8];

  v3 = CFSTR("[UWB Digital Key] URSK retrieval failure");
  if (a2 != 1)
    v3 = CFSTR("Nearby Interaction issue");
  if (!a2)
    v3 = CFSTR("[UWB Digital Key] GetKey timed out");
  v4 = v3;
  v5 = CFSTR("1.) Are you filing this radar as a LiveOn user?\n2.) What kind of Digital Key are you using - i.e. what does it unlock?");
  if (a2 < 2)
  {
    v6 = CFSTR("1161160");
  }
  else
  {
    v5 = CFSTR("Nearby Interaction issue");
    v6 = CFSTR("1109279");
  }
  if (a2 >= 2)
    v7 = CFSTR("(New Bugs)");
  else
    v7 = CFSTR("Alisha");
  v8 = v5;
  v9 = v6;
  v10 = v7;
  v21[0] = CFSTR("Classification");
  v21[1] = CFSTR("ComponentID");
  v22[0] = CFSTR("Serious Bug");
  v22[1] = v9;
  v21[2] = CFSTR("ComponentName");
  v21[3] = CFSTR("ComponentVersion");
  v22[2] = CFSTR("Nearby Interaction");
  v22[3] = v10;
  v21[4] = CFSTR("ExtensionIdentifiers");
  v21[5] = CFSTR("Reproducibility");
  v22[4] = CFSTR("com.apple.DiagnosticExtensions.Nearbyd");
  v22[5] = CFSTR("I Didn't Try");
  v21[6] = CFSTR("Description");
  v21[7] = CFSTR("Title");
  v22[6] = v8;
  v22[7] = v4;
  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v22, v21, 8));
  v16 = _NSConcreteStackBlock;
  v17 = 3221225472;
  v18 = sub_100252904;
  v19 = &unk_10080FEE0;
  v12 = objc_opt_new(NSMutableArray);
  v20 = v12;
  objc_msgSend(v11, "enumerateKeysAndObjectsUsingBlock:", &v16);
  v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSURLComponents componentsWithString:](NSURLComponents, "componentsWithString:", CFSTR("tap-to-radar://new"), v16, v17, v18, v19));
  objc_msgSend(v13, "setQueryItems:", v12);
  v14 = (void *)objc_claimAutoreleasedReturnValue(+[LSApplicationWorkspace defaultWorkspace](LSApplicationWorkspace, "defaultWorkspace"));
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "URL"));
  objc_msgSend(v14, "openURL:configuration:completionHandler:", v15, 0, 0);

}

void sub_1002525AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;

  v22 = v19;

  _Unwind_Resume(a1);
}

void sub_10025261C(std::mutex *a1, int a2)
{
  std::mutex *v3;
  void *v4;
  void *v5;
  NSMutableDictionary *v6;
  NSMutableDictionary *v7;
  const __CFString *v8;
  const __CFString *v9;
  void *v10;

  v3 = a1 + 1;
  std::mutex::lock(a1 + 1);
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "dictionaryForKey:", CFSTR("TapToRadarDisable")));

  if (v5)
    v6 = (NSMutableDictionary *)objc_msgSend(v5, "mutableCopy");
  else
    v6 = objc_opt_new(NSMutableDictionary);
  v7 = v6;
  v8 = CFSTR("Unknown");
  if (a2 == 1)
    v8 = CFSTR("AlishaURSKRetrievalFailed");
  if (a2)
    v9 = v8;
  else
    v9 = CFSTR("AlishaGetKeyTimedOut");
  -[NSMutableDictionary setObject:forKeyedSubscript:](v6, "setObject:forKeyedSubscript:", &__kCFBooleanTrue, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  objc_msgSend(v10, "setObject:forKey:", v7, CFSTR("TapToRadarDisable"));

  std::mutex::unlock(v3);
}

void sub_100252704(_Unwind_Exception *a1)
{
  std::mutex *v1;
  void *v2;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_100252740()
{
  void *v0;

  JUMPOUT(0x100252730);
}

void sub_10025274C()
{
  JUMPOUT(0x100252730);
}

void sub_100252754(std::mutex *a1, int a2)
{
  unsigned int v4;
  void *v5;
  __CFString *v6;
  __CFString *v7;
  NSObject *v8;
  void *v9;
  __CFString *v10;
  __CFString *v11;
  NSObject *v12;
  int v13;
  _QWORD v14[2];

  if (+[NIPlatformInfo isInternalBuild](NIPlatformInfo, "isInternalBuild"))
  {
    v4 = sub_1002521DC(a1, a2);
    v5 = (void *)qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
    {
      v6 = CFSTR("Unknown");
      if (a2 == 1)
        v6 = CFSTR("AlishaURSKRetrievalFailed");
      if (!a2)
        v6 = CFSTR("AlishaGetKeyTimedOut");
      v7 = v6;
      v13 = 67109378;
      LODWORD(v14[0]) = v4;
      WORD2(v14[0]) = 2112;
      *(_QWORD *)((char *)v14 + 6) = v7;
      v8 = v5;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#ttr,Reset event count to 0 (from %d) for event %@", (uint8_t *)&v13, 0x12u);

    }
  }
  else
  {
    v9 = (void *)qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
    {
      v10 = CFSTR("Unknown");
      if (a2 == 1)
        v10 = CFSTR("AlishaURSKRetrievalFailed");
      if (!a2)
        v10 = CFSTR("AlishaGetKeyTimedOut");
      v11 = v10;
      v13 = 138412290;
      v14[0] = v11;
      v12 = v9;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#ttr,Non-internal build. Ignore reset event count for event %@", (uint8_t *)&v13, 0xCu);

    }
  }
}

void sub_100252904(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  id v4;

  v3 = *(void **)(a1 + 32);
  v4 = (id)objc_claimAutoreleasedReturnValue(+[NSURLQueryItem queryItemWithName:value:](NSURLQueryItem, "queryItemWithName:value:", a2, a3));
  objc_msgSend(v3, "addObject:");

}

void sub_100252954(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t sub_100252968(uint64_t a1)
{
  dispatch_queue_t v2;

  v2 = dispatch_queue_create("com.apple.nearbyd.NetworkMonitor", 0);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 8) = a1 + 16;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 48) = 0;
  if (!v2)
    __assert_rtn("PRNetworkMonitor", "PRNetworkMonitor.mm", 22, "fQueue");
  return a1;
}

void sub_1002529E8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_10025382C(v2, *(_QWORD **)(v1 + 16));
  _Unwind_Resume(a1);
}

uint64_t sub_100252A1C(uint64_t a1)
{
  NSObject *v2;
  _QWORD block[5];

  v2 = *(NSObject **)a1;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100252AA4;
  block[3] = &unk_1007FA668;
  block[4] = a1;
  dispatch_sync(v2, block);

  sub_10025382C(a1 + 8, *(_QWORD **)(a1 + 16));
  return a1;
}

void sub_100252AA4(uint64_t a1)
{
  sub_100252AAC(*(dispatch_queue_t **)(a1 + 32));
}

void sub_100252AAC(dispatch_queue_t *a1)
{
  NSObject *v2;
  NSObject *v3;
  dispatch_queue_t v4;
  uint8_t v5[16];
  uint8_t buf[16];

  dispatch_assert_queue_V2(*a1);
  v2 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "stop network monitoring", buf, 2u);
  }
  if (a1[4])
  {
    v3 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "canceling fMonitor", v5, 2u);
    }
    nw_path_monitor_cancel(a1[4]);
    v4 = a1[4];
    a1[4] = 0;

  }
}

BOOL sub_100252B80(NSObject **a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v7;
  NSObject *v8;
  id v9;
  int v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  char v17;
  _QWORD block[4];
  id v19;
  uint64_t *v20;
  NSObject **v21;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;

  v7 = a4;
  v14 = 0;
  v15 = &v14;
  v16 = 0x2020000000;
  v17 = 1;
  if (!v7)
    __assert_rtn("registerListener", "PRNetworkMonitor.mm", 36, "clientQ");
  v8 = *a1;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3321888768;
  block[2] = sub_100252D28;
  block[3] = &unk_10080FF08;
  v21 = a1;
  v22 = a2;
  v9 = v7;
  v19 = v9;
  sub_100027674((uint64_t)v23, a3);
  v20 = &v14;
  dispatch_sync(v8, block);
  v10 = *((unsigned __int8 *)v15 + 24);
  v11 = v24;
  if (v24 == v23)
  {
    v12 = 4;
    v11 = v23;
    goto LABEL_6;
  }
  if (v24)
  {
    v12 = 5;
LABEL_6:
    (*(void (**)(void))(*v11 + 8 * v12))();
  }

  _Block_object_dispose(&v14, 8);
  return v10 != 0;
}

void sub_100252CF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id a18)
{
  void *v18;

  _Block_object_dispose(&a10, 8);
  _Unwind_Resume(a1);
}

void sub_100252D28(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  _BOOL4 v5;
  uint64_t **v6;
  uint64_t **v7;
  uint64_t *v8;
  _QWORD *v9;
  uint64_t v10;
  const void **v11;
  _BYTE buf[24];
  _BYTE *v13;

  v2 = *(_QWORD *)(a1 + 48);
  v3 = sub_100004DF0(v2 + 8, *(const void ***)(a1 + 56));
  v4 = qword_10085F520;
  v5 = os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT);
  if (v2 + 16 != v3)
  {
    if (v5)
    {
      v6 = *(uint64_t ***)(a1 + 56);
      if (*((char *)v6 + 23) < 0)
        v6 = (uint64_t **)*v6;
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v6;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "identifier %s already registered", buf, 0xCu);
    }
    return;
  }
  if (v5)
  {
    v7 = *(uint64_t ***)(a1 + 56);
    if (*((char *)v7 + 23) < 0)
      v7 = (uint64_t **)*v7;
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v7;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "registerListener - %s", buf, 0xCu);
  }
  sub_1002537D8(buf, (id *)(a1 + 32), a1 + 64);
  v11 = *(const void ***)(a1 + 56);
  v8 = sub_1002538E0((uint64_t **)(v2 + 8), v11, (uint64_t)&unk_100472CF8, (__int128 **)&v11);
  sub_100252F3C((void **)v8 + 7, (void **)buf);
  v9 = v13;
  if (v13 == &buf[8])
  {
    v10 = 4;
    v9 = &buf[8];
  }
  else
  {
    if (!v13)
      goto LABEL_15;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_15:

  if (*(_QWORD *)(v2 + 24) == 1)
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = sub_100252F90((dispatch_queue_t *)v2);
}

void sub_100252EEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t *a15)
{
  uint64_t *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*v16 + 8 * v17))();
LABEL_6:

  _Unwind_Resume(a1);
}

void **sub_100252F3C(void **a1, void **a2)
{
  void *v3;
  uint64_t v4;
  void *v5;
  _QWORD *v6;

  v3 = *a2;
  *a2 = 0;
  v4 = (uint64_t)(a2 + 1);
  v5 = *a1;
  *a1 = v3;
  v6 = a1 + 1;

  sub_100028738(v6, v4);
  return a1;
}

BOOL sub_100252F90(dispatch_queue_t *a1)
{
  NSObject *v2;
  nw_path_monitor_t v3;
  dispatch_queue_t v4;
  NSObject *v5;
  uint64_t evaluator_for_endpoint;
  void *v7;
  void *v8;
  NSObject *v9;
  _QWORD update_handler[5];
  uint8_t buf[16];

  dispatch_assert_queue_V2(*a1);
  v2 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "start network monitoring", buf, 2u);
  }
  v3 = nw_path_monitor_create();
  v4 = a1[4];
  a1[4] = v3;

  v5 = a1[4];
  if (v5)
  {
    update_handler[0] = _NSConcreteStackBlock;
    update_handler[1] = 3221225472;
    update_handler[2] = sub_1002532CC;
    update_handler[3] = &unk_10080FF38;
    update_handler[4] = a1;
    nw_path_monitor_set_update_handler(v5, update_handler);
    nw_path_monitor_set_queue(a1[4], *a1);
    nw_path_monitor_start(a1[4]);
    evaluator_for_endpoint = nw_path_create_evaluator_for_endpoint(0, 0);
    v7 = (void *)evaluator_for_endpoint;
    if (evaluator_for_endpoint)
    {
      v8 = (void *)nw_path_evaluator_copy_path(evaluator_for_endpoint);
      sub_100253364((uint64_t)a1, v8);

    }
  }
  else
  {
    v9 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
      sub_1003E1600(v9);
  }
  return v5 != 0;
}

void sub_1002530D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t sub_1002530EC(uint64_t a1, uint64_t a2)
{
  return sub_100027674(a1 + 64, a2 + 64);
}

_QWORD *sub_1002530F8(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 64);
  result = *(_QWORD **)(a1 + 88);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_10025312C(NSObject **a1, uint64_t a2)
{
  NSObject *v2;
  _QWORD v3[6];

  v2 = *a1;
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100253184;
  v3[3] = &unk_1008069B8;
  v3[4] = a1;
  v3[5] = a2;
  dispatch_sync(v2, v3);
}

void sub_100253184(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  _BOOL4 v5;
  uint64_t *v6;
  uint64_t *v7;
  int v8;
  uint64_t *v9;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = sub_100004DF0(v2 + 8, *(const void ***)(a1 + 40));
  v4 = qword_10085F520;
  v5 = os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT);
  if (v2 + 16 == v3)
  {
    if (v5)
    {
      v7 = *(uint64_t **)(a1 + 40);
      if (*((char *)v7 + 23) < 0)
        v7 = (uint64_t *)*v7;
      v8 = 136315138;
      v9 = v7;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "identifier %s already deregistered", (uint8_t *)&v8, 0xCu);
    }
  }
  else
  {
    if (v5)
    {
      v6 = *(uint64_t **)(a1 + 40);
      if (*((char *)v6 + 23) < 0)
        v6 = (uint64_t *)*v6;
      v8 = 136315138;
      v9 = v6;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "deRegisterListener - %s", (uint8_t *)&v8, 0xCu);
    }
    sub_100253A60((uint64_t **)(v2 + 8), *(const void ***)(a1 + 40));
    if (!*(_QWORD *)(v2 + 24))
      sub_100252AAC((dispatch_queue_t *)v2);
  }
}

void sub_1002532CC(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  uint8_t v5[16];

  v3 = a2;
  if (v3)
  {
    sub_100253364(*(_QWORD *)(a1 + 32), v3);
  }
  else
  {
    v4 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "network path monitor update handler - null nw_path_t", v5, 2u);
    }
  }

}

void sub_100253354(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100253364(uint64_t a1, void *a2)
{
  NSObject *v4;
  NSObject *v5;
  const char *v6;
  _BOOL4 v7;
  _BOOL4 v8;
  int v9;
  NSObject *v10;
  int v11;
  _QWORD *v12;
  NSObject *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint8_t *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  BOOL v21;
  _QWORD block[5];
  _BYTE v23[24];
  _BYTE *v24;
  uint8_t buf[8];
  __int16 v26;
  int v27;
  uint8_t *v28;

  v4 = a2;
  if (!nw_path_is_equal(*(nw_path_t *)(a1 + 40), v4))
  {
    if (nw_path_uses_interface_type(v4, nw_interface_type_wifi))
    {
      v5 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        v6 = "new path: wifi";
LABEL_16:
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, v6, buf, 2u);
      }
    }
    else if (nw_path_uses_interface_type(v4, nw_interface_type_cellular))
    {
      v5 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        v6 = "new path: cellular";
        goto LABEL_16;
      }
    }
    else if (nw_path_uses_interface_type(v4, nw_interface_type_wired))
    {
      v5 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        v6 = "new path: wired";
        goto LABEL_16;
      }
    }
    else
    {
      v7 = nw_path_uses_interface_type(v4, nw_interface_type_loopback);
      v5 = qword_10085F520;
      v8 = os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT);
      if (v7)
      {
        if (v8)
        {
          *(_WORD *)buf = 0;
          v6 = "new path: loopback";
          goto LABEL_16;
        }
      }
      else if (v8)
      {
        *(_WORD *)buf = 0;
        v6 = "new path: other";
        goto LABEL_16;
      }
    }
    objc_storeStrong((id *)(a1 + 40), a2);
  }
  v9 = *(unsigned __int8 *)(a1 + 48);
  *(_BYTE *)(a1 + 48) = (nw_path_get_status(v4) & 0xFFFFFFFD) == 1;
  v10 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    v11 = *(unsigned __int8 *)(a1 + 48);
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)&buf[4] = v9;
    v26 = 1024;
    v27 = v11;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "wasNetworkReachable: %d, fNetworkReachable: %d", buf, 0xEu);
  }
  if (*(unsigned __int8 *)(a1 + 48) != v9)
  {
    v12 = *(_QWORD **)(a1 + 8);
    if (v12 != (_QWORD *)(a1 + 16))
    {
      while (1)
      {
        v13 = (id)v12[7];
        sub_100027674((uint64_t)buf, (uint64_t)(v12 + 8));
        block[0] = _NSConcreteStackBlock;
        block[1] = 3321888768;
        block[2] = sub_100253758;
        block[3] = &unk_10080FF58;
        block[4] = a1;
        v14 = (uint64_t)v28;
        if (!v28)
          goto LABEL_25;
        if (v28 != buf)
          break;
        v24 = v23;
        (*(void (**)(uint8_t *, _BYTE *))(*(_QWORD *)buf + 24))(buf, v23);
LABEL_27:
        dispatch_async(v13, block);
        v15 = v24;
        if (v24 == v23)
        {
          v15 = v23;
          v16 = 4;
        }
        else
        {
          if (!v24)
            goto LABEL_32;
          v16 = 5;
        }
        (*(void (**)(void))(*v15 + 8 * v16))();
LABEL_32:
        v17 = v28;
        if (v28 == buf)
        {
          v17 = buf;
          v18 = 4;
          goto LABEL_36;
        }
        if (v28)
        {
          v18 = 5;
LABEL_36:
          (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
        }

        v19 = (_QWORD *)v12[1];
        if (v19)
        {
          do
          {
            v20 = v19;
            v19 = (_QWORD *)*v19;
          }
          while (v19);
        }
        else
        {
          do
          {
            v20 = (_QWORD *)v12[2];
            v21 = *v20 == (_QWORD)v12;
            v12 = v20;
          }
          while (!v21);
        }
        v12 = v20;
        if (v20 == (_QWORD *)(a1 + 16))
          goto LABEL_43;
      }
      v14 = (*(uint64_t (**)(void))(*(_QWORD *)v28 + 16))();
LABEL_25:
      v24 = (_BYTE *)v14;
      goto LABEL_27;
    }
  }
LABEL_43:

}

void sub_1002536F8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_100253758(uint64_t a1)
{
  uint64_t v1;
  char v3;

  v3 = *(_BYTE *)(*(_QWORD *)(a1 + 32) + 48);
  v1 = *(_QWORD *)(a1 + 64);
  if (!v1)
    sub_100027BC4();
  return (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)v1 + 48))(v1, &v3);
}

uint64_t sub_100253798(uint64_t a1, uint64_t a2)
{
  return sub_100027674(a1 + 40, a2 + 40);
}

_QWORD *sub_1002537A4(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 40);
  result = *(_QWORD **)(a1 + 64);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

_QWORD *sub_1002537D8(_QWORD *a1, id *a2, uint64_t a3)
{
  *a1 = *a2;
  sub_100027674((uint64_t)(a1 + 1), a3);
  return a1;
}

void sub_100253818(_Unwind_Exception *a1)
{
  id *v1;

  _Unwind_Resume(a1);
}

void sub_10025382C(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_10025382C(a1, *a2);
    sub_10025382C(a1, a2[1]);
    sub_100253874((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void sub_100253874(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = (_QWORD *)(a1 + 32);
  v3 = *(_QWORD **)(a1 + 56);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:

  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t *sub_1002538E0(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)sub_1000271A4((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    sub_100253988((uint64_t)a1, a4, (uint64_t)v10);
    sub_1000272A8(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    sub_100253A1C((uint64_t)v10, 0);
  }
  return v7;
}

_BYTE *sub_100253988@<X0>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  _BYTE *result;
  __int128 *v8;
  __int128 v9;

  v5 = a1 + 8;
  v6 = operator new(0x60uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = v6 + 4;
  v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    result = sub_100004678(result, *(void **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    v6[6] = *((_QWORD *)v8 + 2);
    *(_OWORD *)result = v9;
  }
  v6[7] = 0;
  v6[11] = 0;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_100253A04(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100253A1C(v1, 0);
  _Unwind_Resume(a1);
}

void sub_100253A1C(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_100253874((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

uint64_t sub_100253A60(uint64_t **a1, const void **a2)
{
  uint64_t *v3;
  uint64_t *v4;

  v3 = (uint64_t *)sub_100004DF0((uint64_t)a1, a2);
  if (a1 + 1 == (uint64_t **)v3)
    return 0;
  v4 = v3;
  sub_100027730(a1, v3);
  sub_100253874((uint64_t)(v4 + 4));
  operator delete(v4);
  return 1;
}

_QWORD *sub_100253AB8@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, (&off_100810748)[a1]);
}

_QWORD *sub_100253ACC@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, (&off_1008107A0)[a1]);
}

_QWORD *sub_100253AE0@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, (&off_1008107E8)[a1]);
}

_QWORD *sub_100253AF4@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, (&off_100810808)[a1]);
}

void sub_100253E88(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_10025424C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002546D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  void *v6;
  void *v7;
  va_list va;

  va_start(va, a6);

  sub_1001B06E0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100254C08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,char a26)
{
  void *v26;
  void *v27;
  void *v28;

  if (a26 && __p)
    operator delete(__p);
  if (a10)
    operator delete(a10);

  _Unwind_Resume(a1);
}

void sub_1002550D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,char a21)
{
  if (a21)
  {
    if (__p)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100255374(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  void *v16;

  _Unwind_Resume(a1);
}

void sub_10025562C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_10025582C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_100255F68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,char a21)
{
  void *v21;
  void *v22;
  void *v23;

  _Unwind_Resume(a1);
}

void sub_1002564A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39)
{
  void *v39;
  void *v40;

  sub_10001AE68((uint64_t)&a13);
  if (a21 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_100256778(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002571EC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100257CA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1002588F4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id sub_100258AD4(void *a1, void *a2, id a3)
{
  id v5;
  id v6;
  void *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  const char *v12;
  int v13;

  v5 = a1;
  v6 = a2;
  v7 = v6;
  if (!v5)
  {
    v12 = "dict";
    v13 = 1727;
    goto LABEL_9;
  }
  if (!v6)
  {
    v12 = "dictKey";
    v13 = 1728;
LABEL_9:
    __assert_rtn("getNSUIntegerFromDictionary", "NIServerCarKeySession.mm", v13, v12);
  }
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKey:", v6));
  if (v9)
  {
    v10 = objc_opt_class(NSNumber, v8);
    if ((objc_opt_isKindOfClass(v9, v10) & 1) != 0)
      a3 = objc_msgSend(v9, "unsignedIntegerValue");
  }

  return a3;
}

void sub_100258B98(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_100258E6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

void sub_100259074(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_100259668(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, _Unwind_Exception *exception_object, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;

  _Unwind_Resume(a1);
}

unint64_t sub_1002596C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v2;

  v2 = *(_DWORD *)(a1 + 4);
  if (v2 == 1)
  {
    if (!*(_BYTE *)(a1 + 32))
      sub_1003E23E0();
    return *(_QWORD *)(a1 + 24) / 0x18uLL;
  }
  else if (!v2)
  {
    if (!*(_BYTE *)(a1 + 16))
      sub_1003E23B8();
    return (unint64_t)(625 * *(_QWORD *)(a1 + 8)) >> 1;
  }
  return a2;
}

void sub_1002598E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, _Unwind_Exception *exception_object, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  void *v26;
  void *v27;

  if (a26)
  {
    if (__p)
      operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_100259B58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, char a20)
{
  if (a20)
  {
    if (__p)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

id sub_100259C6C(void *a1, id a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  NSObject *v8;
  const char *v9;
  int v11;
  id v12;
  __int16 v13;
  int v14;

  v3 = a1;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKey:", v3));
  if (v6 && (v7 = objc_opt_class(NSNumber, v5), (objc_opt_isKindOfClass(v6, v7) & 1) != 0))
  {
    a2 = objc_msgSend(v6, "intValue");
    v8 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
    {
      v11 = 138412546;
      v12 = v3;
      v13 = 1024;
      v14 = (int)a2;
      v9 = "#ses-carkey,Override %@ exists. New value: %d";
LABEL_7:
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, v9, (uint8_t *)&v11, 0x12u);
    }
  }
  else
  {
    v8 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
    {
      v11 = 138412546;
      v12 = v3;
      v13 = 1024;
      v14 = (int)a2;
      v9 = "#ses-carkey,Override %@ does not exist. Use existing value: %d";
      goto LABEL_7;
    }
  }

  return a2;
}

void sub_100259DDC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_10025A040(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_10025A1B0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_10025AC9C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10025B070(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  void *v19;
  void *v20;

  _Unwind_Resume(a1);
}

void sub_10025B2FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_10025B5C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,char a21)
{
  if (a21)
  {
    if (__p)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10025B850(uint64_t a1)
{

  return a1;
}

void sub_10025B878(uint64_t a1)
{

  operator delete();
}

_QWORD *sub_10025B8B0(uint64_t a1)
{
  _QWORD *v2;

  v2 = operator new(0x10uLL);
  *v2 = off_10080FF98;
  v2[1] = *(id *)(a1 + 8);
  return v2;
}

id sub_10025B8F4(uint64_t a1, _QWORD *a2)
{
  id result;

  *a2 = off_10080FF98;
  result = *(id *)(a1 + 8);
  a2[1] = result;
  return result;
}

void sub_10025B928(uint64_t a1)
{

}

void sub_10025B930(id *a1)
{

  operator delete(a1);
}

void sub_10025B958(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD block[6];
  int v10;

  v3 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(NSObject **)(v4 + 64);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10025BA50;
  block[3] = &unk_10080B8C0;
  v6 = *a3;
  block[4] = v4;
  block[5] = v6;
  v10 = *((_DWORD *)a3 + 2);
  dispatch_async(v5, block);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

uint64_t sub_10025BA08(uint64_t a1, uint64_t a2)
{
  if (sub_10003E27C(a2, (uint64_t)&off_10080FFF8))
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_10025BA44()
{
  return &off_10080FFF8;
}

id sub_10025BA50(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "serviceRequestDidUpdateStatus:", *(_QWORD *)(a1 + 40), *(unsigned int *)(a1 + 48));
}

uint64_t sub_10025BA60(uint64_t a1)
{

  return a1;
}

void sub_10025BA88(uint64_t a1)
{

  operator delete();
}

_QWORD *sub_10025BAC0(uint64_t a1)
{
  _QWORD *v2;

  v2 = operator new(0x10uLL);
  *v2 = off_100810018;
  v2[1] = *(id *)(a1 + 8);
  return v2;
}

id sub_10025BB04(uint64_t a1, _QWORD *a2)
{
  id result;

  *a2 = off_100810018;
  result = *(id *)(a1 + 8);
  a2[1] = result;
  return result;
}

void sub_10025BB38(uint64_t a1)
{

}

void sub_10025BB40(id *a1)
{

  operator delete(a1);
}

void sub_10025BB68(uint64_t a1, _QWORD *a2, int *a3)
{
  std::__shared_weak_count *v3;
  int v4;
  uint64_t v5;
  NSObject *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v9[5];
  int v10;

  v3 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  v4 = *a3;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(NSObject **)(v5 + 64);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_10025BC5C;
  v9[3] = &unk_10080B978;
  v9[4] = v5;
  v10 = v4;
  dispatch_async(v6, v9);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

uint64_t sub_10025BC14(uint64_t a1, uint64_t a2)
{
  if (sub_10003E27C(a2, (uint64_t)&off_100810078))
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_10025BC50()
{
  return &off_100810078;
}

id sub_10025BC5C(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_alishaSessionInvalidatedWithReason:", *(unsigned int *)(a1 + 40));
}

uint64_t sub_10025BC6C(uint64_t a1)
{

  return a1;
}

void sub_10025BC94(uint64_t a1)
{

  operator delete();
}

_QWORD *sub_10025BCCC(uint64_t a1)
{
  _QWORD *v2;

  v2 = operator new(0x10uLL);
  *v2 = off_100810098;
  v2[1] = *(id *)(a1 + 8);
  return v2;
}

id sub_10025BD10(uint64_t a1, _QWORD *a2)
{
  id result;

  *a2 = off_100810098;
  result = *(id *)(a1 + 8);
  a2[1] = result;
  return result;
}

void sub_10025BD44(uint64_t a1)
{

}

void sub_10025BD4C(id *a1)
{

  operator delete(a1);
}

void sub_10025BD74(uint64_t a1, _QWORD *a2, __int128 *a3)
{
  std::__shared_weak_count *v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  _QWORD block[5];
  __int128 v13;
  _OWORD v14[2];
  void *v15;
  void *v16;
  uint64_t v17;
  _QWORD v18[2];
  void *__p;
  void *v20;
  uint64_t v21;
  __int128 v22;
  _OWORD v23[2];
  void *v24;
  _BYTE *v25;
  uint64_t v26;
  _QWORD v27[2];
  void *v28;
  _BYTE *v29;
  uint64_t v30;

  v5 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  v6 = a3[1];
  v22 = *a3;
  v23[0] = v6;
  *(_OWORD *)((char *)v23 + 11) = *(__int128 *)((char *)a3 + 27);
  v25 = 0;
  v26 = 0;
  v24 = 0;
  sub_1001B19CC(&v24, *((const void **)a3 + 6), *((_QWORD *)a3 + 7), *((_QWORD *)a3 + 7) - *((_QWORD *)a3 + 6));
  v7 = *(_QWORD *)((char *)a3 + 77);
  v27[0] = *((_QWORD *)a3 + 9);
  *(_QWORD *)((char *)v27 + 5) = v7;
  v28 = 0;
  v29 = 0;
  v30 = 0;
  sub_1001B1A44(&v28, *((const void **)a3 + 11), *((_QWORD *)a3 + 12), (uint64_t)(*((_QWORD *)a3 + 12) - *((_QWORD *)a3 + 11)) >> 4);
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(NSObject **)(v8 + 64);
  block[1] = 3321888768;
  v13 = v22;
  block[0] = _NSConcreteStackBlock;
  block[2] = sub_10025BFFC;
  block[3] = &unk_10080BA30;
  block[4] = v8;
  v14[0] = v23[0];
  *(_OWORD *)((char *)v14 + 11) = *(_OWORD *)((char *)v23 + 11);
  v16 = 0;
  v17 = 0;
  v15 = 0;
  sub_1001B19CC(&v15, v24, (uint64_t)v25, v25 - (_BYTE *)v24);
  v18[0] = v27[0];
  *(_QWORD *)((char *)v18 + 5) = *(_QWORD *)((char *)v27 + 5);
  __p = 0;
  v20 = 0;
  v21 = 0;
  sub_1001B1A44(&__p, v28, (uint64_t)v29, (v29 - (_BYTE *)v28) >> 4);
  dispatch_async(v9, block);
  if (__p)
  {
    v20 = __p;
    operator delete(__p);
  }
  if (v15)
  {
    v16 = v15;
    operator delete(v15);
  }
  if (v28)
  {
    v29 = v28;
    operator delete(v28);
  }
  if (v24)
  {
    v25 = v24;
    operator delete(v24);
  }
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_10025BF2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41)
{
  std::__shared_weak_count *v41;
  unint64_t *p_shared_owners;
  unint64_t v44;

  if (__p)
    operator delete(__p);
  if (a40)
    operator delete(a40);
  if (a35)
    operator delete(a35);
  if (v41)
  {
    p_shared_owners = (unint64_t *)&v41->__shared_owners_;
    do
      v44 = __ldaxr(p_shared_owners);
    while (__stlxr(v44 - 1, p_shared_owners));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10025BFB4(uint64_t a1, uint64_t a2)
{
  if (sub_10003E27C(a2, (uint64_t)&off_1008100F8))
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_10025BFF0()
{
  return &off_1008100F8;
}

void sub_10025BFFC(uint64_t a1)
{
  void *v2;
  __int128 v3;
  uint64_t v4;
  __int128 v5;
  _OWORD v6[2];
  void *v7;
  void *v8;
  uint64_t v9;
  _QWORD v10[2];
  void *__p;
  void *v12;
  uint64_t v13;

  v2 = *(void **)(a1 + 32);
  v3 = *(_OWORD *)(a1 + 56);
  v5 = *(_OWORD *)(a1 + 40);
  v6[0] = v3;
  *(_OWORD *)((char *)v6 + 11) = *(_OWORD *)(a1 + 67);
  v8 = 0;
  v9 = 0;
  v7 = 0;
  sub_1001B19CC(&v7, *(const void **)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 96) - *(_QWORD *)(a1 + 88));
  v4 = *(_QWORD *)(a1 + 117);
  v10[0] = *(_QWORD *)(a1 + 112);
  *(_QWORD *)((char *)v10 + 5) = v4;
  __p = 0;
  v12 = 0;
  v13 = 0;
  sub_1001B1A44(&__p, *(const void **)(a1 + 128), *(_QWORD *)(a1 + 136), (uint64_t)(*(_QWORD *)(a1 + 136) - *(_QWORD *)(a1 + 128)) >> 4);
  objc_msgSend(v2, "_handleInitiatorRangingBlockUpdate:", &v5);
  if (__p)
  {
    v12 = __p;
    operator delete(__p);
  }
  if (v7)
  {
    v8 = v7;
    operator delete(v7);
  }
}

void sub_10025C0B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  sub_1001B18A0(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10025C0E0(uint64_t a1)
{

  return a1;
}

void sub_10025C108(uint64_t a1)
{

  operator delete();
}

_QWORD *sub_10025C140(uint64_t a1)
{
  _QWORD *v2;

  v2 = operator new(0x10uLL);
  *v2 = off_100810118;
  v2[1] = *(id *)(a1 + 8);
  return v2;
}

id sub_10025C184(uint64_t a1, _QWORD *a2)
{
  id result;

  *a2 = off_100810118;
  result = *(id *)(a1 + 8);
  a2[1] = result;
  return result;
}

void sub_10025C1B8(uint64_t a1)
{

}

void sub_10025C1C0(id *a1)
{

  operator delete(a1);
}

void sub_10025C1E8(uint64_t a1, uint64_t *a2)
{
  const void *v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  _QWORD block[6];
  void *__p;
  void *v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  _BYTE *v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;

  v5 = *a2;
  v4 = (const void *)a2[1];
  v14 = v5;
  v15 = 0;
  v16 = 0;
  v17 = 0;
  sub_1001B0668(&v15, v4, a2[2], (a2[2] - (uint64_t)v4) >> 1);
  v19 = a2[6];
  v18 = *((_OWORD *)a2 + 2);
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(NSObject **)(v6 + 64);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3321888768;
  block[2] = sub_10025C354;
  block[3] = &unk_10080BAF8;
  block[4] = v6;
  block[5] = v14;
  v10 = 0;
  v11 = 0;
  __p = 0;
  sub_1001B0668(&__p, v15, (uint64_t)v16, (v16 - (_BYTE *)v15) >> 1);
  v12 = v18;
  v13 = v19;
  dispatch_async(v7, block);
  if (__p)
  {
    v10 = __p;
    operator delete(__p);
  }
  if (v15)
  {
    v16 = v15;
    operator delete(v15);
  }
}

void sub_10025C2F0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 - 80);
  if (v3)
  {
    *(_QWORD *)(v1 - 72) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10025C30C(uint64_t a1, uint64_t a2)
{
  if (sub_10003E27C(a2, (uint64_t)&off_100810178))
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_10025C348()
{
  return &off_100810178;
}

void sub_10025C354(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *__p;
  void *v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;

  v2 = *(void **)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  __p = 0;
  v5 = 0;
  v6 = 0;
  sub_1001B0668(&__p, *(const void **)(a1 + 48), *(_QWORD *)(a1 + 56), (uint64_t)(*(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 48)) >> 1);
  v7 = *(_OWORD *)(a1 + 72);
  v8 = *(_QWORD *)(a1 + 88);
  objc_msgSend(v2, "_handleSessionStats:", &v3);
  if (__p)
  {
    v5 = __p;
    operator delete(__p);
  }
}

void sub_10025C3C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10025C3E4(uint64_t a1)
{

  return a1;
}

void sub_10025C40C(uint64_t a1)
{

  operator delete();
}

_QWORD *sub_10025C444(uint64_t a1)
{
  _QWORD *v2;

  v2 = operator new(0x10uLL);
  *v2 = off_100810198;
  v2[1] = *(id *)(a1 + 8);
  return v2;
}

id sub_10025C488(uint64_t a1, _QWORD *a2)
{
  id result;

  *a2 = off_100810198;
  result = *(id *)(a1 + 8);
  a2[1] = result;
  return result;
}

void sub_10025C4BC(uint64_t a1)
{

}

void sub_10025C4C4(id *a1)
{

  operator delete(a1);
}

void sub_10025C4EC(uint64_t a1, int *a2)
{
  int v2;
  uint64_t v3;
  NSObject *v4;
  _QWORD v5[5];
  int v6;

  v2 = *a2;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(NSObject **)(v3 + 64);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10025C59C;
  v5[3] = &unk_10080B978;
  v5[4] = v3;
  v6 = v2;
  dispatch_async(v4, v5);
}

uint64_t sub_10025C554(uint64_t a1, uint64_t a2)
{
  if (sub_10003E27C(a2, (uint64_t)&off_1008101F8))
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_10025C590()
{
  return &off_1008101F8;
}

id sub_10025C59C(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_handleHealthChanged:", *(unsigned int *)(a1 + 40));
}

uint64_t sub_10025C5AC(uint64_t a1)
{

  return a1;
}

void sub_10025C5D4(uint64_t a1)
{

  operator delete();
}

_QWORD *sub_10025C60C(uint64_t a1)
{
  _QWORD *v2;

  v2 = operator new(0x10uLL);
  *v2 = off_100810218;
  v2[1] = *(id *)(a1 + 8);
  return v2;
}

id sub_10025C650(uint64_t a1, _QWORD *a2)
{
  id result;

  *a2 = off_100810218;
  result = *(id *)(a1 + 8);
  a2[1] = result;
  return result;
}

void sub_10025C684(uint64_t a1)
{

}

void sub_10025C68C(id *a1)
{

  operator delete(a1);
}

void sub_10025C6B4(uint64_t a1, int *a2, uint64_t *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  _QWORD block[6];
  int v8;

  v3 = *a2;
  v4 = *a3;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(NSObject **)(v5 + 64);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10025C76C;
  block[3] = &unk_10080B8C0;
  block[4] = v5;
  v8 = v3;
  block[5] = v4;
  dispatch_async(v6, block);
}

uint64_t sub_10025C724(uint64_t a1, uint64_t a2)
{
  if (sub_10003E27C(a2, (uint64_t)&off_100810278))
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_10025C760()
{
  return &off_100810278;
}

id sub_10025C76C(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_handleTimeoutEvent:time:", *(unsigned int *)(a1 + 48), *(double *)(a1 + 40));
}

uint64_t sub_10025C780@<X0>(__int16 *a1@<X1>, _QWORD *a2@<X8>)
{
  char *v4;
  uint64_t result;

  v4 = (char *)operator new(0x20uLL);
  result = sub_10025C7D8((uint64_t)v4, a1);
  *a2 = v4 + 24;
  a2[1] = v4;
  return result;
}

void sub_10025C7C4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10025C7D8(uint64_t a1, __int16 *a2)
{
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = off_100810298;
  sub_1002FB310((_WORD *)(a1 + 24), *a2);
  return a1;
}

void sub_10025C810(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_10025C824(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_100810298;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10025C834(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_100810298;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

_QWORD *sub_10025C86C@<X0>(char *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x30uLL);
  result = sub_10025C8C4(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_10025C8B0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_10025C8C4(_QWORD *a1, char *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1008102E8;
  sub_10025C960((uint64_t)(a1 + 3), *a2);
  return a1;
}

void sub_10025C8FC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_10025C910(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1008102E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10025C920(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1008102E8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_10025C950(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_10025C960(uint64_t a1, char a2)
{
  int v4;
  double v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  double v10;
  NSObject *v11;
  NSObject *v12;
  int v14;
  const __CFString *v15;
  __int16 v16;
  uint64_t v17;

  *(_QWORD *)a1 = off_100810338;
  v4 = sub_100259C6C(CFSTR("AlishaMinRanMultiplierOverride"), (id)3);
  if (v4 <= 0)
    sub_1003E2430();
  if (v4 >= 0x100)
    sub_1003E2458();
  *(_BYTE *)(a1 + 8) = v4;
  v5 = 3.0;
  if ((a2 & 1) == 0)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKey:", CFSTR("AlishaStartTimeOffsetSeconds")));
    if (v8 && (v9 = objc_opt_class(NSNumber, v7), (objc_opt_isKindOfClass(v8, v9) & 1) != 0))
    {
      objc_msgSend(v8, "doubleValue");
      v5 = v10;
      v11 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
      {
        v14 = 138412546;
        v15 = CFSTR("AlishaStartTimeOffsetSeconds");
        v16 = 2048;
        v17 = *(_QWORD *)&v5;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#ses-carkey,Override %@ exists. New value: %f", (uint8_t *)&v14, 0x16u);
      }

      if (v5 <= 0.0)
        sub_1003E2480();
    }
    else
    {
      v12 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
      {
        v14 = 138412546;
        v15 = CFSTR("AlishaStartTimeOffsetSeconds");
        v16 = 2048;
        v17 = 0x3FB999999999999ALL;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#ses-carkey,Override %@ does not exist. Use existing value: %f", (uint8_t *)&v14, 0x16u);
      }

      v5 = 0.1;
    }
  }
  *(_QWORD *)(a1 + 16) = llround(v5 * 1000000.0);
  return a1;
}

void sub_10025CB70(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10025CB98()
{
  operator delete();
}

_WORD *sub_10025CBAC@<X0>(_QWORD *a1@<X8>)
{
  _WORD *v2;
  _WORD *result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = operator new(2uLL);
  *a1 = v2;
  *v2 = 256;
  result = v2 + 1;
  a1[1] = result;
  a1[2] = result;
  return result;
}

void sub_10025CBE8(_QWORD *a1@<X8>)
{
  void *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  _BOOL4 v7;
  unint64_t *v8;
  unint64_t v9;
  BOOL v10;
  _BYTE *v11;
  _BYTE *v12;
  int v13;
  _BYTE *v14;
  BOOL v15;
  _BYTE *v16;
  __int16 v17;
  char v18;

  v17 = 0;
  v2 = sub_1002CA108();
  v3 = *((_QWORD *)v2 + 406);
  v4 = (std::__shared_weak_count *)*((_QWORD *)v2 + 407);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v18 = 0;
  v7 = sub_1002A4728(v3, &v18, (unsigned __int8 *)&v17, 0);
  if (v4)
  {
    v8 = (unint64_t *)&v4->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (v7)
  {
    v10 = v18 != 5;
    v11 = operator new(1uLL);
    *v11 = v10;
    a1[1] = v11 + 1;
    a1[2] = v11 + 1;
    *a1 = v11;
    if (HIBYTE(v17))
    {
      v12 = v11;
      v13 = v17;
      v14 = operator new(2uLL);
      v15 = v13 != 5;
      v16 = v14 + 2;
      v14[1] = v15;
      *v14 = *v12;
      *a1 = v14;
      a1[2] = v14 + 2;
      operator delete(v12);
      a1[1] = v16;
    }
  }
}

void sub_10025CD04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  void *v12;

  v12 = *(void **)v10;
  if (*(_QWORD *)v10)
  {
    *(_QWORD *)(v10 + 8) = v12;
    operator delete(v12);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_10025CD30(uint64_t a1, unsigned int a2)
{
  void *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  unsigned int v7;
  std::string *v8;
  __int128 v9;
  std::string *v10;
  __int128 v11;
  std::string *v12;
  std::string::size_type size;
  std::string *v14;
  __int128 v15;
  std::string *v16;
  __int128 v17;
  uint8_t *v18;
  std::string::size_type v19;
  uint64_t *v20;
  uint64_t *v21;
  BOOL v22;
  NSObject *v23;
  std::string *v24;
  uint64_t v25;
  int v26;
  unsigned __int8 v27;
  int v28;
  unsigned __int8 v29;
  unsigned int v30;
  int v31;
  unsigned __int16 v32;
  std::string::value_type v33;
  char v34;
  uint64_t **v35;
  BOOL v36;
  uint64_t v37;
  NSObject *v38;
  unint64_t v39;
  unsigned int v41;
  std::string v42;
  std::string v43;
  std::string v44;
  std::string v45;
  std::string v46;
  std::string v47;
  uint64_t *v48;
  _QWORD *v49[2];
  uint8_t buf[16];
  int64_t v51;
  _QWORD v52[3];
  _QWORD *v53;

  v49[0] = 0;
  v49[1] = 0;
  v48 = (uint64_t *)v49;
  v3 = sub_1002CA108();
  v52[0] = off_100810398;
  v52[1] = &v48;
  v53 = v52;
  sub_1002CE1AC((uint64_t)v3, (uint64_t)v52);
  v4 = v53;
  if (v53 == v52)
  {
    v5 = 4;
    v4 = v52;
  }
  else
  {
    if (!v53)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  sub_10000BF04(&v47, "\n");
  v6 = v48;
  if (v48 != (uint64_t *)v49)
  {
    do
    {
      v7 = *(_DWORD *)((char *)v6 + 26);
      sub_10036B730(v7);
      v8 = std::string::insert(&v43, 0, "    ");
      v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
      v44.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v9;
      v8->__r_.__value_.__l.__size_ = 0;
      v8->__r_.__value_.__r.__words[2] = 0;
      v8->__r_.__value_.__r.__words[0] = 0;
      v10 = std::string::append(&v44, ": ");
      v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
      v45.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v11;
      v10->__r_.__value_.__l.__size_ = 0;
      v10->__r_.__value_.__r.__words[2] = 0;
      v10->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v42, HIWORD(v7));
      if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v12 = &v42;
      else
        v12 = (std::string *)v42.__r_.__value_.__r.__words[0];
      if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v42.__r_.__value_.__r.__words[2]);
      else
        size = v42.__r_.__value_.__l.__size_;
      v14 = std::string::append(&v45, (const std::string::value_type *)v12, size);
      v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v15;
      v14->__r_.__value_.__l.__size_ = 0;
      v14->__r_.__value_.__r.__words[2] = 0;
      v14->__r_.__value_.__r.__words[0] = 0;
      v16 = std::string::append(&v46, "\n");
      v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
      v51 = v16->__r_.__value_.__r.__words[2];
      *(_OWORD *)buf = v17;
      v16->__r_.__value_.__l.__size_ = 0;
      v16->__r_.__value_.__r.__words[2] = 0;
      v16->__r_.__value_.__r.__words[0] = 0;
      if (v51 >= 0)
        v18 = buf;
      else
        v18 = *(uint8_t **)buf;
      if (v51 >= 0)
        v19 = HIBYTE(v51);
      else
        v19 = *(_QWORD *)&buf[8];
      std::string::append(&v47, (const std::string::value_type *)v18, v19);
      if (SHIBYTE(v51) < 0)
        operator delete(*(void **)buf);
      if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v46.__r_.__value_.__l.__data_);
      if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v42.__r_.__value_.__l.__data_);
      if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v45.__r_.__value_.__l.__data_);
      if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v44.__r_.__value_.__l.__data_);
      if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v43.__r_.__value_.__l.__data_);
      v20 = (uint64_t *)v6[1];
      if (v20)
      {
        do
        {
          v21 = v20;
          v20 = (uint64_t *)*v20;
        }
        while (v20);
      }
      else
      {
        do
        {
          v21 = (uint64_t *)v6[2];
          v22 = *v21 == (_QWORD)v6;
          v6 = v21;
        }
        while (!v22);
      }
      v6 = v21;
    }
    while (v21 != (uint64_t *)v49);
  }
  v23 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    v24 = &v47;
    if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v24 = (std::string *)v47.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v24;
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "#ses-carkey,Preamble use counts: {%s}", buf, 0xCu);
  }
  v25 = 4294965278;
  if (a2)
  {
    v26 = 0;
    v27 = 0;
    v28 = 0;
    v29 = 0;
    v30 = a2;
    v31 = 0;
    v32 = 0;
    v33 = 1;
    v41 = v30;
    do
    {
      if ((v30 & 1) != 0)
      {
        switch(v33)
        {
          case 9:
            v34 = 0;
            goto LABEL_49;
          case 10:
            v34 = 1;
            goto LABEL_49;
          case 11:
            v34 = 2;
            goto LABEL_49;
          case 12:
            v34 = 3;
LABEL_49:
            v45.__r_.__value_.__s.__data_[0] = v33;
            *(_QWORD *)buf = &v45;
            v35 = sub_1001B2D60(&v48, (unsigned __int8 *)&v45, (uint64_t)&unk_100472CF8, (_BYTE **)buf);
            if (!v31 || *((unsigned __int16 *)v35 + 14) < v32)
            {
              v31 = 1;
              v32 = *((_WORD *)v35 + 14);
              v29 = v34;
              v28 = 1;
              v27 = v33;
              v26 = 1;
            }
            break;
          default:
            break;
        }
      }
      ++v33;
      v36 = v30 > 1;
      v30 >>= 1;
    }
    while (v36);
    v37 = 0;
    if (v26 && v28 && v31)
    {
      v38 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109632;
        *(_DWORD *)&buf[4] = v41;
        *(_WORD *)&buf[8] = 1024;
        *(_DWORD *)&buf[10] = v27;
        *(_WORD *)&buf[14] = 1024;
        LODWORD(v51) = v32;
        _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "#ses-carkey,Sync code bitmask 0x%x. Preferred sync code index %u. Current use count %u.", buf, 0x14u);
      }
      v25 = 0;
      v39 = (unint64_t)v27 << 32;
      v37 = 0x1000000000000;
    }
    else
    {
      v39 = 0;
      v25 = 4294965278;
    }
  }
  else
  {
    v29 = 0;
    v37 = 0;
    v39 = 0;
  }
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v47.__r_.__value_.__l.__data_);
  sub_10003E3F0((uint64_t)&v48, v49[0]);
  return v25 | ((unint64_t)v29 << 40) | v37 | v39;
}

void sub_10025D1D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,void *__p,uint64_t a45,int a46,__int16 a47,char a48,char a49,char a50,_QWORD *a51)
{
  sub_10003E3F0((uint64_t)&a50, a51);
  _Unwind_Resume(a1);
}

uint64_t sub_10025D2D4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

uint64_t sub_10025D2DC(uint64_t a1, _BYTE *a2)
{
  uint64_t v2;
  void *v3;
  unint64_t v4;
  char v5;
  BOOL v6;
  BOOL v7;
  NSObject *v9;
  uint8_t v11[16];

  v2 = *(_QWORD *)(a1 + 16);
  if (!*a2)
  {
    v3 = sub_1002CA108();
    v4 = sub_1002CCBE8((uint64_t)v3);
    v6 = HIWORD(v4) != 1 || (v4 & 0xFF00) == 0;
    v7 = v6 || v4 == 0;
    if (!v7 && v5 != 0)
    {
      v9 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v11 = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#ses-carkey,Applying additional start time offset for Ch5 coex", v11, 2u);
      }
      v2 += 50000;
    }
  }
  return v2;
}

void sub_10025D388()
{
  operator delete();
}

_QWORD *sub_10025D39C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_100810398;
  result[1] = v3;
  return result;
}

uint64_t sub_10025D3D0(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_100810398;
  a2[1] = v2;
  return result;
}

void sub_10025D3EC(uint64_t a1, uint64_t a2)
{
  sub_10025D43C((uint64_t ***)(a1 + 8), a2);
}

uint64_t sub_10025D3F4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10025D430()
{
}

void sub_10025D43C(uint64_t ***a1, uint64_t a2)
{
  uint64_t **v3;
  uint64_t **v4;
  NSObject *v5;
  unsigned __int8 v6;
  _BYTE buf[12];
  __int16 v8;
  int v9;
  __int16 v10;
  const char *v11;

  if (*(_BYTE *)(a2 + 105))
  {
    v6 = *(_BYTE *)(a2 + 104);
    if (!sub_10036B59C(v6))
    {
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_FAULT))
        sub_1003E24D4();
      v5 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/Proximity/Daemon/Services/NearbyInteraction/Session/N"
                             "IServerCarKeySession.mm";
        v8 = 1024;
        v9 = 192;
        v10 = 2080;
        v11 = "operator()";
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "#ses-carkey,%s:%d: assertion failure in %s", buf, 0x1Cu);
      }
      abort();
    }
    v3 = *a1;
    *(_QWORD *)buf = &v6;
    v4 = sub_1001B2D60(v3, &v6, (uint64_t)&unk_100472CF8, (_BYTE **)buf);
    ++*((_WORD *)v4 + 14);
  }
  else if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_FAULT))
  {
    sub_1003E24A8();
  }
}

void sub_10025D5A0()
{
  operator delete();
}

_QWORD *sub_10025D5B4()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_100810418;
  return result;
}

void sub_10025D5D8(uint64_t a1, _QWORD *a2)
{
  *a2 = off_100810418;
}

uint64_t sub_10025D5F4(uint64_t a1, uint64_t a2)
{
  if (sub_10003E27C(a2, (uint64_t)&off_100810478))
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_10025D630()
{
  return &off_100810478;
}

void sub_10025D63C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_100810498;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10025D64C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_100810498;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_10025D67C(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *sub_10025D68C@<X0>(_QWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x30uLL);
  result = sub_10025D6E4(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_10025D6D0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_10025D6E4(_QWORD *a1, _QWORD *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1008104E8;
  sub_10025140C(a1 + 3, *a2);
  return a1;
}

void sub_10025D71C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_10025D730(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1008104E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10025D740(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1008104E8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

void sub_10025D770(uint64_t a1)
{

}

void sub_10025D79C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_100810538;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10025D7AC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_100810538;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_10025D7DC(uint64_t a1)
{
  return sub_100306B88(a1 + 24);
}

uint64_t sub_10025D7E8(uint64_t a1)
{

  return a1;
}

void sub_10025D810(uint64_t a1)
{

  operator delete();
}

_QWORD *sub_10025D848(uint64_t a1)
{
  _QWORD *v2;

  v2 = operator new(0x10uLL);
  *v2 = off_100810588;
  v2[1] = *(id *)(a1 + 8);
  return v2;
}

id sub_10025D88C(uint64_t a1, _QWORD *a2)
{
  id result;

  *a2 = off_100810588;
  result = *(id *)(a1 + 8);
  a2[1] = result;
  return result;
}

void sub_10025D8C0(uint64_t a1)
{

}

void sub_10025D8C8(id *a1)
{

  operator delete(a1);
}

uint64_t sub_10025D8F0@<X0>(uint64_t a1@<X0>, int *a2@<X1>, uint64_t a3@<X8>)
{
  id *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unsigned __int8 v22[36];
  _BYTE v23[504];

  dispatch_assert_queue_V2(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 8) + 64));
  v6 = *(id **)(a1 + 8);
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6[53], "debugOptions"));
  objc_msgSend(v6, "_ownerDeviceServiceRequestDebugParams:", v7);

  +[NIServerCarKeySession _aopJobConfigWithTimeouts](NIServerCarKeySession, "_aopJobConfigWithTimeouts");
  sub_100164520(a2, 102, (uint64_t)&v20, v22, (uint64_t)v23);
  sub_1001DB2A0(&v19);
  v8 = *(void **)(a1 + 8);
  if (v8)
  {
    objc_msgSend(v8, "_buildAlishaSession:", v23);
    if (v20)
    {
      v9 = v20 + 8;
      v10 = v21;
      if (v21)
      {
        p_shared_owners = (unint64_t *)&v21->__shared_owners_;
        do
          v12 = __ldxr(p_shared_owners);
        while (__stxr(v12 + 1, p_shared_owners));
        *(_DWORD *)a3 = 0;
        *(_QWORD *)(a3 + 8) = v9;
        *(_QWORD *)(a3 + 16) = v10;
        do
          v13 = __ldxr(p_shared_owners);
        while (__stxr(v13 + 1, p_shared_owners));
        *(_BYTE *)(a3 + 24) = 1;
        do
          v14 = __ldaxr(p_shared_owners);
        while (__stlxr(v14 - 1, p_shared_owners));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      else
      {
        *(_DWORD *)a3 = 0;
        *(_QWORD *)(a3 + 8) = v9;
        *(_QWORD *)(a3 + 16) = 0;
        *(_BYTE *)(a3 + 24) = 1;
      }
      goto LABEL_16;
    }
  }
  else
  {
    v20 = 0;
    v21 = 0;
  }
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
    sub_1003E2500();
  *(_DWORD *)a3 = -1013;
  *(_BYTE *)(a3 + 8) = 0;
  *(_BYTE *)(a3 + 24) = 0;
LABEL_16:
  v15 = v21;
  if (v21)
  {
    v16 = (unint64_t *)&v21->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  result = v19;
  v19 = 0;
  if (result)
  {
    sub_1001DB2DC(result);
    operator delete();
  }
  return result;
}

void sub_10025DB14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    sub_1003E252C(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10025DB44(uint64_t a1, uint64_t a2)
{
  if (sub_10003E27C(a2, (uint64_t)&off_1008105E8))
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_10025DB80()
{
  return &off_1008105E8;
}

uint64_t sub_10025DB8C(uint64_t a1)
{

  return a1;
}

void sub_10025DBB4(uint64_t a1)
{

  operator delete();
}

_QWORD *sub_10025DBEC(uint64_t a1)
{
  _QWORD *v2;

  v2 = operator new(0x10uLL);
  *v2 = off_100810608;
  v2[1] = *(id *)(a1 + 8);
  return v2;
}

id sub_10025DC30(uint64_t a1, _QWORD *a2)
{
  id result;

  *a2 = off_100810608;
  result = *(id *)(a1 + 8);
  a2[1] = result;
  return result;
}

void sub_10025DC64(uint64_t a1)
{

}

void sub_10025DC6C(id *a1)
{

  operator delete(a1);
}

id sub_10025DC94(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *a2;
  v5 = *a3;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 8) + 64));
  return _objc_msgSend(*(id *)(a1 + 8), "_alishaStateChangedFromState:toNewState:", v4, v5);
}

uint64_t sub_10025DCE0(uint64_t a1, uint64_t a2)
{
  if (sub_10003E27C(a2, (uint64_t)&off_100810668))
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_10025DD1C()
{
  return &off_100810668;
}

void sub_10025DD28(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_100810688;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10025DD38(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_100810688;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_10025DD68(uint64_t a1)
{
  return sub_1001DB638(a1 + 24);
}

uint64_t sub_10025DD74(uint64_t a1)
{

  return a1;
}

void sub_10025DD9C(uint64_t a1)
{

  operator delete();
}

_QWORD *sub_10025DDD4(uint64_t a1)
{
  _QWORD *v2;

  v2 = operator new(0x10uLL);
  *v2 = off_1008106D8;
  v2[1] = *(id *)(a1 + 8);
  return v2;
}

id sub_10025DE18(uint64_t a1, _QWORD *a2)
{
  id result;

  *a2 = off_1008106D8;
  result = *(id *)(a1 + 8);
  a2[1] = result;
  return result;
}

void sub_10025DE4C(uint64_t a1)
{

}

void sub_10025DE54(id *a1)
{

  operator delete(a1);
}

id sub_10025DE7C(uint64_t a1, unsigned int *a2, double *a3)
{
  return _objc_msgSend(*(id *)(a1 + 8), "_handleTimeoutEvent:time:", *a2, *a3);
}

uint64_t sub_10025DE90(uint64_t a1, uint64_t a2)
{
  if (sub_10003E27C(a2, (uint64_t)&off_100810738))
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_10025DECC()
{
  return &off_100810738;
}

void sub_10025DEF0(void *a1, int a2, os_log_t log, const char *a4, uint8_t *a5)
{
  _os_log_fault_impl(a1, log, OS_LOG_TYPE_FAULT, a4, a5, 0xCu);
}

void sub_10025DF00()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_100850448);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_100850448))
    {
      sub_10000BF04(qword_100850430, "PRRoseProviderNetworkListener");
      __cxa_atexit((void (*)(void *))&std::string::~string, qword_100850430, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_100850448);
    }
  }
}

void sub_10025DF7C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_100850448);
  _Unwind_Resume(a1);
}

void sub_10025DF94()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_100850468);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_100850468))
    {
      sub_10000BF04(&qword_100850450, "com.apple.nearbyd.accessory.download");
      __cxa_atexit((void (*)(void *))&std::string::~string, &qword_100850450, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_100850468);
    }
  }
}

void sub_10025E010(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_100850468);
  _Unwind_Resume(a1);
}

void sub_10025E028()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_100850488);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_100850488))
    {
      sub_10000BF04(&qword_100850470, "com.apple.nearbyd.accessory.files");
      __cxa_atexit((void (*)(void *))&std::string::~string, &qword_100850470, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_100850488);
    }
  }
}

void sub_10025E0A4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_100850488);
  _Unwind_Resume(a1);
}

void sub_10025E0BC()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_1008504A8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1008504A8))
    {
      sub_10000BF04(qword_100850490, "MA_");
      __cxa_atexit((void (*)(void *))&std::string::~string, qword_100850490, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1008504A8);
    }
  }
}

void sub_10025E138(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1008504A8);
  _Unwind_Resume(a1);
}

void sub_10025E150()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_1008504C8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1008504C8))
    {
      sub_10000BF04(qword_1008504B0, "MB_");
      __cxa_atexit((void (*)(void *))&std::string::~string, qword_1008504B0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1008504C8);
    }
  }
}

void sub_10025E1CC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1008504C8);
  _Unwind_Resume(a1);
}

void sub_10025E1E4()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_1008504E8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1008504E8))
    {
      sub_10000BF04(qword_1008504D0, "D");
      __cxa_atexit((void (*)(void *))&std::string::~string, qword_1008504D0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1008504E8);
    }
  }
}

void sub_10025E260(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1008504E8);
  _Unwind_Resume(a1);
}

void sub_10025E278()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_100850508);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_100850508))
    {
      sub_10000BF04(&qword_1008504F0, "A");
      __cxa_atexit((void (*)(void *))&std::string::~string, &qword_1008504F0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_100850508);
    }
  }
}

void sub_10025E2F4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_100850508);
  _Unwind_Resume(a1);
}

void sub_10025E30C()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_100850528);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_100850528))
    {
      sub_10000BF04(qword_100850510, "FAS.bin");
      __cxa_atexit((void (*)(void *))&std::string::~string, qword_100850510, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_100850528);
    }
  }
}

void sub_10025E388(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_100850528);
  _Unwind_Resume(a1);
}

void sub_10025E3A0()
{
  unsigned __int8 v0;
  _OWORD *v1;

  v0 = atomic_load((unsigned __int8 *)&qword_100850548);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_100850548))
    {
      qword_100850530 = 0;
      qword_100850538 = 0;
      qword_100850540 = 0;
      v1 = operator new(0x30uLL);
      qword_100850538 = (uint64_t)(v1 + 3);
      qword_100850540 = (uint64_t)(v1 + 3);
      *v1 = xmmword_100473520;
      v1[1] = *(_OWORD *)algn_100473530;
      v1[2] = xmmword_100473540;
      qword_100850530 = (uint64_t)v1;
      __cxa_atexit((void (*)(void *))sub_100009C44, &qword_100850530, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_100850548);
    }
  }
}

void sub_10025E440(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_100850548);
  _Unwind_Resume(a1);
}

void sub_10025E458()
{
  void *v0;
  std::string *v1;
  __int128 v2;
  std::string *v3;
  __int128 v4;
  std::string *v5;
  __int128 v6;
  std::string *v7;
  __int128 v8;
  std::string *v9;
  __int128 v10;
  std::string *v11;
  __int128 v12;
  std::string *v13;
  __int128 v14;
  std::string *v15;
  __int128 v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  __int128 v22;
  std::string *v23;
  __int128 v24;
  std::string *v25;
  __int128 v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  __int128 v30;
  std::string *v31;
  __int128 v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  __int128 v36;
  std::string v37;
  std::string v38;

  v0 = objc_autoreleasePoolPush();
  sub_1003610EC(0);
  v1 = std::string::insert(&v37, 0, "reverseLUT_A");
  v2 = *(_OWORD *)&v1->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v1->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v2;
  v1->__r_.__value_.__l.__size_ = 0;
  v1->__r_.__value_.__r.__words[2] = 0;
  v1->__r_.__value_.__r.__words[0] = 0;
  v3 = std::string::append(&v38, ".bin");
  v4 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
  qword_10085A518 = v3->__r_.__value_.__r.__words[2];
  xmmword_10085A508 = v4;
  v3->__r_.__value_.__l.__size_ = 0;
  v3->__r_.__value_.__r.__words[2] = 0;
  v3->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_10085A508, (void *)&_mh_execute_header);
  sub_1003610EC(1);
  v5 = std::string::insert(&v37, 0, "reverseLUT_A");
  v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  v7 = std::string::append(&v38, ".bin");
  v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  qword_10085A530 = v7->__r_.__value_.__r.__words[2];
  xmmword_10085A520 = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_10085A520, (void *)&_mh_execute_header);
  sub_1003610EC(2);
  v9 = std::string::insert(&v37, 0, "reverseLUT_A");
  v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  v11 = std::string::append(&v38, ".bin");
  v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  qword_10085A548 = v11->__r_.__value_.__r.__words[2];
  xmmword_10085A538 = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_10085A538, (void *)&_mh_execute_header);
  sub_1003610EC(3);
  v13 = std::string::insert(&v37, 0, "reverseLUT_A");
  v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  v15 = std::string::append(&v38, ".bin");
  v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  qword_10085A560 = v15->__r_.__value_.__r.__words[2];
  xmmword_10085A550 = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_10085A550, (void *)&_mh_execute_header);
  sub_1003610EC(4);
  v17 = std::string::insert(&v37, 0, "reverseLUT_A");
  v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v18;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  v19 = std::string::append(&v38, ".bin");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  qword_10085A578 = v19->__r_.__value_.__r.__words[2];
  xmmword_10085A568 = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_10085A568, (void *)&_mh_execute_header);
  sub_1003610EC(5);
  v21 = std::string::insert(&v37, 0, "reverseLUT_A");
  v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  v23 = std::string::append(&v38, ".bin");
  v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  qword_10085A590 = v23->__r_.__value_.__r.__words[2];
  xmmword_10085A580 = v24;
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_10085A580, (void *)&_mh_execute_header);
  sub_1003610EC(6);
  v25 = std::string::insert(&v37, 0, "reverseLUT_A");
  v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v26;
  v25->__r_.__value_.__l.__size_ = 0;
  v25->__r_.__value_.__r.__words[2] = 0;
  v25->__r_.__value_.__r.__words[0] = 0;
  v27 = std::string::append(&v38, ".bin");
  v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
  qword_10085A5A8 = v27->__r_.__value_.__r.__words[2];
  xmmword_10085A598 = v28;
  v27->__r_.__value_.__l.__size_ = 0;
  v27->__r_.__value_.__r.__words[2] = 0;
  v27->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_10085A598, (void *)&_mh_execute_header);
  sub_1003610EC(7);
  v29 = std::string::insert(&v37, 0, "reverseLUT_A");
  v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v30;
  v29->__r_.__value_.__l.__size_ = 0;
  v29->__r_.__value_.__r.__words[2] = 0;
  v29->__r_.__value_.__r.__words[0] = 0;
  v31 = std::string::append(&v38, ".bin");
  v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
  qword_10085A5C0 = v31->__r_.__value_.__r.__words[2];
  xmmword_10085A5B0 = v32;
  v31->__r_.__value_.__l.__size_ = 0;
  v31->__r_.__value_.__r.__words[2] = 0;
  v31->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_10085A5B0, (void *)&_mh_execute_header);
  sub_1003610EC(8);
  v33 = std::string::insert(&v37, 0, "reverseLUT_A");
  v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v34;
  v33->__r_.__value_.__l.__size_ = 0;
  v33->__r_.__value_.__r.__words[2] = 0;
  v33->__r_.__value_.__r.__words[0] = 0;
  v35 = std::string::append(&v38, ".bin");
  v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
  qword_10085A5D8 = v35->__r_.__value_.__r.__words[2];
  xmmword_10085A5C8 = v36;
  v35->__r_.__value_.__l.__size_ = 0;
  v35->__r_.__value_.__r.__words[2] = 0;
  v35->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_10085A5C8, (void *)&_mh_execute_header);
  objc_autoreleasePoolPop(v0);
}

void sub_10025EA4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_10025EAC0@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, off_100810958[a1]);
}

_QWORD *sub_10025EAD4@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, off_1008109B0[a1]);
}

_QWORD *sub_10025EAE8@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, off_1008109F8[a1]);
}

_QWORD *sub_10025EAFC@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, off_100810A18[a1]);
}

void sub_10025EB7C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10025EC54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_10025ECF8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10025ED98(id a1)
{
  id v1;
  void *v2;

  v1 = -[NIServerSystemConfigurator _initInternal]([NIServerSystemConfigurator alloc], "_initInternal");
  v2 = (void *)qword_10085A6B8;
  qword_10085A6B8 = (uint64_t)v1;

}

void sub_10025EED8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  NSMutableDictionary *v5;
  uint64_t v6;
  void *v7;
  ConfiguratorClientInfo *v8;
  uint64_t v9;
  void *v10;
  NISystemState *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  unsigned int v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD v18[4];
  _QWORD *v19;

  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 16) = 0;
  v2 = objc_claimAutoreleasedReturnValue(+[NSMapTable strongToWeakObjectsMapTable](NSMapTable, "strongToWeakObjectsMapTable"));
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(void **)(v3 + 24);
  *(_QWORD *)(v3 + 24) = v2;

  v5 = objc_opt_new(NSMutableDictionary);
  v6 = *(_QWORD *)(a1 + 32);
  v7 = *(void **)(v6 + 32);
  *(_QWORD *)(v6 + 32) = v5;

  v8 = objc_opt_new(ConfiguratorClientInfo);
  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(void **)(v9 + 40);
  *(_QWORD *)(v9 + 40) = v8;

  v11 = objc_opt_new(NISystemState);
  v12 = *(_QWORD *)(a1 + 32);
  v13 = *(void **)(v12 + 64);
  *(_QWORD *)(v12 + 64) = v11;

  if (+[NIPlatformInfo isInternalBuild](NIPlatformInfo, "isInternalBuild")
    || (v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults")),
        v15 = objc_msgSend(v14, "BOOLForKey:", CFSTR("EnableStateDump")),
        v14,
        v15))
  {
    v16 = *(_QWORD **)(a1 + 32);
    v17 = v16[1];
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472;
    v18[2] = sub_10025F01C;
    v18[3] = &unk_10080A8A0;
    v19 = v16;
    os_state_add_handler(v17, v18);

  }
}

void sub_10025F00C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

char *sub_10025F01C(uint64_t a1)
{
  void *v1;
  char *v2;

  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_internalPrintableState"));
  v2 = sub_10002D668(CFSTR("System Configurator"), v1);

  return v2;
}

void sub_10025F060(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10025F0C8(uint64_t a1)
{
  _QWORD *v1;
  NSObject *v2;
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  void *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  void *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_weak_owners;
  unint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  uint8_t buf[31];

  v1 = (_QWORD *)(a1 + 32);
  if (!*(_BYTE *)(*(_QWORD *)(a1 + 32) + 16))
  {
    v2 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#configurator,Activate", buf, 2u);
    }
    sub_10026127C(v1, buf);
    sub_1000145E8(*v1 + 48, (__int128 *)buf);
    v3 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v4 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v5 = __ldaxr(v4);
      while (__stlxr(v5 - 1, v4));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    v6 = sub_1002CA108();
    v7 = *(std::__shared_weak_count **)(*v1 + 56);
    v19 = *(_QWORD *)(*v1 + 48);
    v20 = v7;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }
    sub_1002CE308((uint64_t)v6, &v19);
    v10 = v20;
    if (v20)
    {
      v11 = (unint64_t *)&v20->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    v13 = sub_1002CA108();
    v14 = *(std::__shared_weak_count **)(*v1 + 56);
    v17 = *(_QWORD *)(*v1 + 48);
    v18 = v14;
    if (v14)
    {
      p_shared_weak_owners = (unint64_t *)&v14->__shared_weak_owners_;
      do
        v16 = __ldxr(p_shared_weak_owners);
      while (__stxr(v16 + 1, p_shared_weak_owners));
    }
    sub_1002CA79C((uint64_t)v13, &v17);
    if (v18)
      std::__shared_weak_count::__release_weak(v18);
    *(_BYTE *)(*v1 + 16) = 1;
  }
}

void sub_10025F244(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, char a11)
{
  if (a10)
    std::__shared_weak_count::__release_weak(a10);
  _Unwind_Resume(exception_object);
}

void sub_10025F318(_QWORD *a1)
{
  void *v2;
  NSObject *v3;
  uint64_t v4;
  unsigned int v5;
  void *v6;
  ConfiguratorClientInfo *v7;
  void *v8;
  id v9;
  id *v10;
  void *v11;
  id v12;
  uint64_t v13;
  id v14;
  id v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  __int16 v19;
  unsigned int v20;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1[4] + 24), "objectForKey:", a1[5]));

  if (v2)
  {
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
      sub_1003E2554();
  }
  else
  {
    v3 = (id)qword_10085F520;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      v4 = a1[5];
      v5 = objc_msgSend(*(id *)(a1[4] + 24), "count");
      v17 = 138412546;
      v18 = v4;
      v19 = 1024;
      v20 = v5;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#configurator,Add client %@ (%d previous clients)", (uint8_t *)&v17, 0x12u);
    }

    objc_msgSend(*(id *)(a1[4] + 24), "setObject:forKey:", a1[6], a1[5]);
    v6 = *(void **)(a1[4] + 32);
    v7 = objc_opt_new(ConfiguratorClientInfo);
    objc_msgSend(v6, "setObject:forKey:", v7, a1[5]);

    v8 = (void *)a1[6];
    v9 = objc_msgSend(*(id *)(a1[4] + 64), "copy");
    objc_msgSend(v8, "didUpdateSystemState:", v9);

    v11 = (void *)a1[6];
    v10 = (id *)(a1 + 6);
    v12 = objc_msgSend(*((id *)*(v10 - 2) + 5), "carKeyRangingLimitExceeded");
    objc_msgSend(v11, "didUpdateResourceUsageLimitExceeded:forSessionConfigurationType:", v12, objc_opt_class(NICarKeyConfiguration, v13));
    v14 = *v10;
    v15 = objc_msgSend(*((id *)*(v10 - 2) + 5), "acwgRangingLimitExceeded");
    objc_msgSend(v14, "didUpdateResourceUsageLimitExceeded:forSessionConfigurationType:", v15, objc_opt_class(NIAcwgConfiguration, v16));
    objc_msgSend(*v10, "didUpdatePassiveAccessIntent:", objc_msgSend(*((id *)*(v10 - 2) + 5), "passiveAccessIntent"));
  }
}

void sub_10025F510(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10025F5BC(uint64_t a1)
{
  void *v2;
  NSObject *v3;
  uint64_t v4;
  unsigned int v5;
  id *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  __int16 v10;
  unsigned int v11;

  if (*(_QWORD *)(a1 + 32))
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 32), "objectForKey:"));

    if (v2)
    {
      v3 = (id)qword_10085F520;
      if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
      {
        v4 = *(_QWORD *)(a1 + 32);
        v5 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 24), "count");
        v8 = 138412546;
        v9 = v4;
        v10 = 1024;
        v11 = v5;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#configurator,Remove client %@ (%d clients before removal)", (uint8_t *)&v8, 0x12u);
      }

      v7 = *(_QWORD *)(a1 + 40);
      v6 = (id *)(a1 + 40);
      objc_msgSend(*(id *)(v7 + 24), "removeObjectForKey:", *(v6 - 1));
      objc_msgSend(*((id *)*v6 + 4), "removeObjectForKey:", *(v6 - 1));
      objc_msgSend(*v6, "_updateAggregatedClientInfo");
    }
    else if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
    {
      sub_1003E25B4();
    }
  }
}

void sub_10025F6F8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10025F7A4(uint64_t a1)
{
  void *v2;
  NSObject *v3;
  int v4;
  uint64_t v5;
  void *v6;
  unsigned int v7;
  unsigned int v8;
  NSObject *v9;
  int v10;
  uint64_t v11;
  void *v12;
  unsigned int v13;
  unsigned int v14;
  _BOOL8 v15;
  void *v16;
  _BOOL8 v17;
  void *v18;
  int v19;
  uint64_t v20;
  __int16 v21;
  int v22;
  __int16 v23;
  unsigned int v24;
  __int16 v25;
  unsigned int v26;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "objectForKey:", *(_QWORD *)(a1 + 40)));

  if (v2)
  {
    v3 = (id)qword_10085F520;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      v4 = *(unsigned __int8 *)(a1 + 48);
      v5 = *(_QWORD *)(a1 + 40);
      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "objectForKeyedSubscript:", v5));
      v7 = objc_msgSend(v6, "prewarmUWB");
      v8 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "prewarmUWB");
      v19 = 138413058;
      v20 = v5;
      v21 = 1024;
      v22 = v4;
      v23 = 1024;
      v24 = v7;
      v25 = 1024;
      v26 = v8;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#configurator,Client %@ requested prewarm UWB: %d. Previous from this client: %d. Previous aggregated: %d", (uint8_t *)&v19, 0x1Eu);

    }
    v9 = (id)qword_10085F520;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      v10 = *(unsigned __int8 *)(a1 + 49);
      v11 = *(_QWORD *)(a1 + 40);
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "objectForKeyedSubscript:", v11));
      v13 = objc_msgSend(v12, "prewarmSecureElementChannel");
      v14 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "prewarmSecureElementChannel");
      v19 = 138413058;
      v20 = v11;
      v21 = 1024;
      v22 = v10;
      v23 = 1024;
      v24 = v13;
      v25 = 1024;
      v26 = v14;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#configurator,Client %@ requested prewarm SE channel: %d. Previous from this client: %d. Previous aggregated: %d", (uint8_t *)&v19, 0x1Eu);

    }
    v15 = *(_BYTE *)(a1 + 48) != 0;
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "objectForKeyedSubscript:", *(_QWORD *)(a1 + 40)));
    objc_msgSend(v16, "setPrewarmUWB:", v15);

    v17 = *(_BYTE *)(a1 + 49) != 0;
    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "objectForKeyedSubscript:", *(_QWORD *)(a1 + 40)));
    objc_msgSend(v18, "setPrewarmSecureElementChannel:", v17);

    objc_msgSend(*(id *)(a1 + 32), "_updateAggregatedClientInfo");
  }
  else if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
  {
    sub_1003E2614();
  }
}

void sub_10025F9F8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10025FAE0(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  int v6;
  uint64_t v7;
  void *v8;
  unsigned int v9;
  unsigned int v10;
  _BOOL8 v11;
  NSObject *v12;
  unsigned int v13;
  NSObject *v14;
  int v15;
  uint64_t v16;
  void *v17;
  unsigned int v18;
  unsigned int v19;
  _BOOL8 v20;
  unsigned __int8 v21;
  NSString *v22;
  void *v23;
  int v24;
  uint64_t v25;
  __int16 v26;
  int v27;
  __int16 v28;
  unsigned int v29;
  __int16 v30;
  unsigned int v31;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "objectForKey:", *(_QWORD *)(a1 + 40)));

  if (v2)
  {
    if (objc_msgSend(*(id *)(a1 + 48), "isSubclassOfClass:", objc_opt_class(NICarKeyConfiguration, v3)))
    {
      v5 = (id)qword_10085F520;
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        v6 = *(unsigned __int8 *)(a1 + 56);
        v7 = *(_QWORD *)(a1 + 40);
        v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "objectForKeyedSubscript:", v7));
        v9 = objc_msgSend(v8, "carKeyRangingLimitExceeded");
        v10 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "carKeyRangingLimitExceeded");
        v24 = 138413058;
        v25 = v7;
        v26 = 1024;
        v27 = v6;
        v28 = 1024;
        v29 = v9;
        v30 = 1024;
        v31 = v10;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#configurator,Client %@ notified CarKey resource usage limit exceeded: %d. Previous from this client: %d. Previous aggregated: %d", (uint8_t *)&v24, 0x1Eu);

      }
      v11 = *(_BYTE *)(a1 + 56) != 0;
      v12 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "objectForKeyedSubscript:", *(_QWORD *)(a1 + 40)));
      -[NSObject setCarKeyRangingLimitExceeded:](v12, "setCarKeyRangingLimitExceeded:", v11);
    }
    else
    {
      v13 = objc_msgSend(*(id *)(a1 + 48), "isSubclassOfClass:", objc_opt_class(NIAcwgConfiguration, v4));
      v14 = (id)qword_10085F520;
      v12 = v14;
      if (v13)
      {
        if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
        {
          v15 = *(unsigned __int8 *)(a1 + 56);
          v16 = *(_QWORD *)(a1 + 40);
          v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "objectForKeyedSubscript:", v16));
          v18 = objc_msgSend(v17, "acwgRangingLimitExceeded");
          v19 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "acwgRangingLimitExceeded");
          v24 = 138413058;
          v25 = v16;
          v26 = 1024;
          v27 = v15;
          v28 = 1024;
          v29 = v18;
          v30 = 1024;
          v31 = v19;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#configurator,Client %@ notified ACWG resource usage limit exceeded: %d. Previous from this client: %d. Previous aggregated: %d", (uint8_t *)&v24, 0x1Eu);

        }
        v20 = *(_BYTE *)(a1 + 56) != 0;
        v12 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "objectForKeyedSubscript:", *(_QWORD *)(a1 + 40)));
        -[NSObject setAcwgRangingLimitExceeded:](v12, "setAcwgRangingLimitExceeded:", v20);
      }
      else if (os_log_type_enabled(v14, OS_LOG_TYPE_FAULT))
      {
        v21 = *(_BYTE *)(a1 + 56);
        v22 = NSStringFromClass(*(Class *)(a1 + 48));
        v23 = (void *)objc_claimAutoreleasedReturnValue(v22);
        sub_1003E26D4(v21, v23, (uint8_t *)&v24, v12);
      }
    }

    objc_msgSend(*(id *)(a1 + 32), "_updateAggregatedClientInfo");
  }
  else if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
  {
    sub_1003E2674();
  }
}

void sub_10025FDB8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10025FE8C(uint64_t a1)
{
  void *v2;
  NSObject *v3;
  uint64_t v4;
  id v5;
  void *v6;
  id v7;
  void *v8;
  uint64_t v9;
  void *v10;
  int v11;
  uint64_t v12;
  __int16 v13;
  id v14;
  __int16 v15;
  id v16;
  __int16 v17;
  void *v18;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "objectForKey:", *(_QWORD *)(a1 + 40)));

  if (v2)
  {
    v3 = (id)qword_10085F520;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      v4 = *(_QWORD *)(a1 + 40);
      v5 = (id)objc_claimAutoreleasedReturnValue(+[NIUtils NISystemPassiveAccessIntentToString:](NIUtils, "NISystemPassiveAccessIntentToString:", *(_QWORD *)(a1 + 48)));
      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "objectForKeyedSubscript:", *(_QWORD *)(a1 + 40)));
      v7 = (id)objc_claimAutoreleasedReturnValue(+[NIUtils NISystemPassiveAccessIntentToString:](NIUtils, "NISystemPassiveAccessIntentToString:", objc_msgSend(v6, "passiveAccessIntent")));
      v8 = (void *)objc_claimAutoreleasedReturnValue(+[NIUtils NISystemPassiveAccessIntentToString:](NIUtils, "NISystemPassiveAccessIntentToString:", objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "passiveAccessIntent")));
      v11 = 138413058;
      v12 = v4;
      v13 = 2112;
      v14 = v5;
      v15 = 2112;
      v16 = v7;
      v17 = 2112;
      v18 = v8;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#configurator,Client %@ notified passive access intent: %@. Previous from this client: %@. Previous aggregated: %@", (uint8_t *)&v11, 0x2Au);

    }
    v9 = *(_QWORD *)(a1 + 48);
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "objectForKeyedSubscript:", *(_QWORD *)(a1 + 40)));
    objc_msgSend(v10, "setPassiveAccessIntent:", v9);

    objc_msgSend(*(id *)(a1 + 32), "_updateAggregatedClientInfo");
  }
  else if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
  {
    sub_1003E273C();
  }
}

void sub_100260064(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t sub_100260168(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_100260178(uint64_t a1)
{

}

void sub_100260180(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_internalPrintableState"));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_100260344(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  void *v22;

  _Block_object_dispose(&a17, 8);
  _Unwind_Resume(a1);
}

void sub_100260388(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  id v4;

  v3 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  v4 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("    [%@]: %@"), a2, a3));
  objc_msgSend(v3, "addObject:");

}

void sub_1002603E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{

  _Unwind_Resume(a1);
}

void sub_1002607F8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;

  _Block_object_dispose((const void *)(v3 - 128), 8);
  _Unwind_Resume(a1);
}

id sub_100260848(uint64_t a1)
{
  return _objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "consumeInfoForAggregation:");
}

void sub_100260854(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  uint64_t v8;
  int v9;
  _DWORD v10[2];
  __int16 v11;
  int v12;
  __int16 v13;
  id v14;
  __int16 v15;
  id v16;

  v5 = a2;
  v6 = a3;
  v7 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    v8 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v9 = *(_DWORD *)(v8 + 24) + 1;
    *(_DWORD *)(v8 + 24) = v9;
    LODWORD(v8) = *(_DWORD *)(a1 + 40);
    v10[0] = 67109890;
    v10[1] = v9;
    v11 = 1024;
    v12 = v8;
    v13 = 2112;
    v14 = v5;
    v15 = 2112;
    v16 = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#configurator,Client %d of %d - %@: %@", (uint8_t *)v10, 0x22u);
  }

}

void sub_100260950(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  id v5;

  v5 = a2;
  v3 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "carKeyRangingLimitExceeded");
  objc_msgSend(v5, "didUpdateResourceUsageLimitExceeded:forSessionConfigurationType:", v3, objc_opt_class(NICarKeyConfiguration, v4));

}

void sub_1002609AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1002609C0(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  id v5;

  v5 = a2;
  v3 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "acwgRangingLimitExceeded");
  objc_msgSend(v5, "didUpdateResourceUsageLimitExceeded:forSessionConfigurationType:", v3, objc_opt_class(NIAcwgConfiguration, v4));

}

void sub_100260A1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_100260A30(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  objc_msgSend(v3, "didUpdatePassiveAccessIntent:", objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "passiveAccessIntent"));

}

void sub_100260A78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_100260B28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_100260CE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  void *v23;

  if (a23 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_100260D18(uint64_t a1)
{
  id v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  unint64_t v12;
  unint64_t v13;
  void *v14;
  NSObject *v15;
  uint64_t v16;
  __CFNotificationCenter *DarwinNotifyCenter;
  void *v18;
  NSObject *v19;
  void *v20;
  int v21;
  NSObject *v22;
  _BYTE *v23;
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD v40[5];
  _BYTE buf[12];
  __int16 v42;
  id v43;
  char v44;
  uint8_t v45[4];
  _BYTE *v46;

  v2 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 64), "copy");
  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
      v3 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_FAULT))
        sub_1003E27FC(v3, v4, v5, v6, v7, v8, v9, v10);
      break;
    case 1:
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 64), "setUwbPreciseDistanceAvailability:", 0);
      v13 = 0;
      v11 = *(void **)(*(_QWORD *)(a1 + 32) + 64);
      goto LABEL_8;
    case 2:
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 64), "setUwbPreciseDistanceAvailability:", 0);
      v11 = *(void **)(*(_QWORD *)(a1 + 32) + 64);
      v12 = (unint64_t)objc_msgSend(v11, "uwbExtendedDistanceAvailability");
LABEL_5:
      v13 = v12 | 2;
      goto LABEL_8;
    case 3:
      switch(*(_DWORD *)(a1 + 44))
      {
        case 0:
          v24 = qword_10085F520;
          if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_FAULT))
            sub_1003E279C(v24, v25, v26, v27, v28, v29, v30, v31);
          break;
        case 1:
        case 7:
          objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 64), "setUwbPreciseDistanceAvailability:", (unint64_t)objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 64), "uwbPreciseDistanceAvailability") | 8);
          v11 = *(void **)(*(_QWORD *)(a1 + 32) + 64);
          v13 = (unint64_t)objc_msgSend(v11, "uwbExtendedDistanceAvailability") | 8;
          goto LABEL_8;
        case 2:
          v32 = qword_10085F520;
          if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_FAULT))
            sub_1003E27CC(v32, v33, v34, v35, v36, v37, v38, v39);
          break;
        case 3:
          objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 64), "setUwbPreciseDistanceAvailability:", (unint64_t)objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 64), "uwbPreciseDistanceAvailability") | 1);
          v11 = *(void **)(*(_QWORD *)(a1 + 32) + 64);
          v13 = (unint64_t)objc_msgSend(v11, "uwbExtendedDistanceAvailability") | 1;
          goto LABEL_8;
        case 4:
          objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 64), "setUwbPreciseDistanceAvailability:", (unint64_t)objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 64), "uwbPreciseDistanceAvailability") | 2);
          v11 = *(void **)(*(_QWORD *)(a1 + 32) + 64);
          v12 = (unint64_t)objc_msgSend(v11, "uwbExtendedDistanceAvailability");
          goto LABEL_5;
        case 5:
        case 6:
          objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 64), "setUwbPreciseDistanceAvailability:", 16);
          v11 = *(void **)(*(_QWORD *)(a1 + 32) + 64);
          v13 = 16;
          goto LABEL_8;
        default:
          goto LABEL_9;
      }
      break;
    case 4:
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 64), "setUwbPreciseDistanceAvailability:", (unint64_t)objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 64), "uwbPreciseDistanceAvailability") | 4);
      v11 = *(void **)(*(_QWORD *)(a1 + 32) + 64);
      v13 = (unint64_t)objc_msgSend(v11, "uwbExtendedDistanceAvailability") | 4;
LABEL_8:
      objc_msgSend(v11, "setUwbExtendedDistanceAvailability:", v13);
      break;
    default:
      break;
  }
LABEL_9:
  v14 = sub_100004784();
  if (!sub_100395734((uint64_t)v14))
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 64), "setUwbExtendedDistanceAvailability:", 16);
  if ((objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 64), "isEqual:", v2) & 1) == 0)
  {
    v15 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
    {
      v16 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 64);
      *(_DWORD *)buf = 138412546;
      *(_QWORD *)&buf[4] = v16;
      v42 = 2112;
      v43 = v2;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#configurator,System state update. New: %@. Old: %@", buf, 0x16u);
    }
    DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
    CFNotificationCenterPostNotification(DarwinNotifyCenter, CFSTR("com.apple.nearbyinteraction.system.didupdatestate"), 0, 0, 1u);
    v18 = *(void **)(a1 + 32);
    v40[0] = _NSConcreteStackBlock;
    v40[1] = 3221225472;
    v40[2] = sub_100261194;
    v40[3] = &unk_100810938;
    v40[4] = v18;
    objc_msgSend(v18, "_relayBlockToClients:", v40);
    if (!objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 64), "uwbPreciseDistanceAvailability")
      && objc_msgSend(v2, "uwbPreciseDistanceAvailability")
      && objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "prewarmSecureElementChannel"))
    {
      v19 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "#configurator,RE-warming UWB-SE secure channel...", buf, 2u);
      }
      v20 = sub_1002CA108();
      v21 = sub_1002CA348((uint64_t)v20);
      v22 = (id)qword_10085F520;
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
      {
        sub_100301BCC(v21, buf);
        if (v44 >= 0)
          v23 = buf;
        else
          v23 = *(_BYTE **)buf;
        *(_DWORD *)v45 = 136315138;
        v46 = v23;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "#configurator,RE-warming UWB-SE secure channel... DONE. Status: %s", v45, 0xCu);
        if (v44 < 0)
          operator delete(*(void **)buf);
      }

    }
  }

}

void sub_100261164(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_100261194(uint64_t a1, void *a2)
{
  id v3;
  id v4;

  v4 = a2;
  v3 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 64), "copy");
  objc_msgSend(v4, "didUpdateSystemState:", v3);

}

void sub_1002611E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_10026127C(_QWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;

  v4 = operator new(0x48uLL);
  sub_1002612DC(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  sub_10001B020((uint64_t)a2, v4 + 4, (uint64_t)(v4 + 3));
}

void sub_1002612C8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1002612DC(_QWORD *a1, _QWORD *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1007FA3F0;
  sub_1002A0F74(a1 + 3, *a2);
  return a1;
}

void sub_100261314(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_100261328()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_100850448);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_100850448))
    {
      sub_10000BF04(qword_100850430, "PRRoseProviderNetworkListener");
      __cxa_atexit((void (*)(void *))&std::string::~string, qword_100850430, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_100850448);
    }
  }
}

void sub_1002613A4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_100850448);
  _Unwind_Resume(a1);
}

void sub_1002613BC()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_100850468);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_100850468))
    {
      sub_10000BF04(&qword_100850450, "com.apple.nearbyd.accessory.download");
      __cxa_atexit((void (*)(void *))&std::string::~string, &qword_100850450, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_100850468);
    }
  }
}

void sub_100261438(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_100850468);
  _Unwind_Resume(a1);
}

void sub_100261450()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_100850488);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_100850488))
    {
      sub_10000BF04(&qword_100850470, "com.apple.nearbyd.accessory.files");
      __cxa_atexit((void (*)(void *))&std::string::~string, &qword_100850470, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_100850488);
    }
  }
}

void sub_1002614CC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_100850488);
  _Unwind_Resume(a1);
}

void sub_1002614E4()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_1008504A8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1008504A8))
    {
      sub_10000BF04(qword_100850490, "MA_");
      __cxa_atexit((void (*)(void *))&std::string::~string, qword_100850490, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1008504A8);
    }
  }
}

void sub_100261560(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1008504A8);
  _Unwind_Resume(a1);
}

void sub_100261578()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_1008504C8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1008504C8))
    {
      sub_10000BF04(qword_1008504B0, "MB_");
      __cxa_atexit((void (*)(void *))&std::string::~string, qword_1008504B0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1008504C8);
    }
  }
}

void sub_1002615F4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1008504C8);
  _Unwind_Resume(a1);
}

void sub_10026160C()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_1008504E8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1008504E8))
    {
      sub_10000BF04(qword_1008504D0, "D");
      __cxa_atexit((void (*)(void *))&std::string::~string, qword_1008504D0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1008504E8);
    }
  }
}

void sub_100261688(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1008504E8);
  _Unwind_Resume(a1);
}

void sub_1002616A0()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_100850508);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_100850508))
    {
      sub_10000BF04(&qword_1008504F0, "A");
      __cxa_atexit((void (*)(void *))&std::string::~string, &qword_1008504F0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_100850508);
    }
  }
}

void sub_10026171C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_100850508);
  _Unwind_Resume(a1);
}

void sub_100261734()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_100850528);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_100850528))
    {
      sub_10000BF04(qword_100850510, "FAS.bin");
      __cxa_atexit((void (*)(void *))&std::string::~string, qword_100850510, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_100850528);
    }
  }
}

void sub_1002617B0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_100850528);
  _Unwind_Resume(a1);
}

void sub_1002617C8()
{
  unsigned __int8 v0;
  _OWORD *v1;

  v0 = atomic_load((unsigned __int8 *)&qword_100850548);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_100850548))
    {
      qword_100850530 = 0;
      qword_100850538 = 0;
      qword_100850540 = 0;
      v1 = operator new(0x30uLL);
      qword_100850538 = (uint64_t)(v1 + 3);
      qword_100850540 = (uint64_t)(v1 + 3);
      *v1 = xmmword_100474230;
      v1[1] = unk_100474240;
      v1[2] = xmmword_100474250;
      qword_100850530 = (uint64_t)v1;
      __cxa_atexit((void (*)(void *))sub_100009C44, &qword_100850530, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_100850548);
    }
  }
}

void sub_100261868(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_100850548);
  _Unwind_Resume(a1);
}

void sub_100261880()
{
  void *v0;
  std::string *v1;
  __int128 v2;
  std::string *v3;
  __int128 v4;
  std::string *v5;
  __int128 v6;
  std::string *v7;
  __int128 v8;
  std::string *v9;
  __int128 v10;
  std::string *v11;
  __int128 v12;
  std::string *v13;
  __int128 v14;
  std::string *v15;
  __int128 v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  __int128 v22;
  std::string *v23;
  __int128 v24;
  std::string *v25;
  __int128 v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  __int128 v30;
  std::string *v31;
  __int128 v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  __int128 v36;
  std::string v37;
  std::string v38;

  v0 = objc_autoreleasePoolPush();
  sub_1003610EC(0);
  v1 = std::string::insert(&v37, 0, "reverseLUT_A");
  v2 = *(_OWORD *)&v1->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v1->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v2;
  v1->__r_.__value_.__l.__size_ = 0;
  v1->__r_.__value_.__r.__words[2] = 0;
  v1->__r_.__value_.__r.__words[0] = 0;
  v3 = std::string::append(&v38, ".bin");
  v4 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
  qword_10085A5F0 = v3->__r_.__value_.__r.__words[2];
  xmmword_10085A5E0 = v4;
  v3->__r_.__value_.__l.__size_ = 0;
  v3->__r_.__value_.__r.__words[2] = 0;
  v3->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_10085A5E0, (void *)&_mh_execute_header);
  sub_1003610EC(1);
  v5 = std::string::insert(&v37, 0, "reverseLUT_A");
  v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  v7 = std::string::append(&v38, ".bin");
  v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  qword_10085A608 = v7->__r_.__value_.__r.__words[2];
  xmmword_10085A5F8 = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_10085A5F8, (void *)&_mh_execute_header);
  sub_1003610EC(2);
  v9 = std::string::insert(&v37, 0, "reverseLUT_A");
  v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  v11 = std::string::append(&v38, ".bin");
  v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  qword_10085A620 = v11->__r_.__value_.__r.__words[2];
  xmmword_10085A610 = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_10085A610, (void *)&_mh_execute_header);
  sub_1003610EC(3);
  v13 = std::string::insert(&v37, 0, "reverseLUT_A");
  v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  v15 = std::string::append(&v38, ".bin");
  v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  qword_10085A638 = v15->__r_.__value_.__r.__words[2];
  xmmword_10085A628 = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_10085A628, (void *)&_mh_execute_header);
  sub_1003610EC(4);
  v17 = std::string::insert(&v37, 0, "reverseLUT_A");
  v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v18;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  v19 = std::string::append(&v38, ".bin");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  qword_10085A650 = v19->__r_.__value_.__r.__words[2];
  xmmword_10085A640 = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_10085A640, (void *)&_mh_execute_header);
  sub_1003610EC(5);
  v21 = std::string::insert(&v37, 0, "reverseLUT_A");
  v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  v23 = std::string::append(&v38, ".bin");
  v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  qword_10085A668 = v23->__r_.__value_.__r.__words[2];
  xmmword_10085A658 = v24;
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_10085A658, (void *)&_mh_execute_header);
  sub_1003610EC(6);
  v25 = std::string::insert(&v37, 0, "reverseLUT_A");
  v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v26;
  v25->__r_.__value_.__l.__size_ = 0;
  v25->__r_.__value_.__r.__words[2] = 0;
  v25->__r_.__value_.__r.__words[0] = 0;
  v27 = std::string::append(&v38, ".bin");
  v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
  qword_10085A680 = v27->__r_.__value_.__r.__words[2];
  xmmword_10085A670 = v28;
  v27->__r_.__value_.__l.__size_ = 0;
  v27->__r_.__value_.__r.__words[2] = 0;
  v27->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_10085A670, (void *)&_mh_execute_header);
  sub_1003610EC(7);
  v29 = std::string::insert(&v37, 0, "reverseLUT_A");
  v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v30;
  v29->__r_.__value_.__l.__size_ = 0;
  v29->__r_.__value_.__r.__words[2] = 0;
  v29->__r_.__value_.__r.__words[0] = 0;
  v31 = std::string::append(&v38, ".bin");
  v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
  qword_10085A698 = v31->__r_.__value_.__r.__words[2];
  xmmword_10085A688 = v32;
  v31->__r_.__value_.__l.__size_ = 0;
  v31->__r_.__value_.__r.__words[2] = 0;
  v31->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_10085A688, (void *)&_mh_execute_header);
  sub_1003610EC(8);
  v33 = std::string::insert(&v37, 0, "reverseLUT_A");
  v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v34;
  v33->__r_.__value_.__l.__size_ = 0;
  v33->__r_.__value_.__r.__words[2] = 0;
  v33->__r_.__value_.__r.__words[0] = 0;
  v35 = std::string::append(&v38, ".bin");
  v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
  qword_10085A6B0 = v35->__r_.__value_.__r.__words[2];
  xmmword_10085A6A0 = v36;
  v35->__r_.__value_.__l.__size_ = 0;
  v35->__r_.__value_.__r.__words[2] = 0;
  v35->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_10085A6A0, (void *)&_mh_execute_header);
  objc_autoreleasePoolPop(v0);
}

void sub_100261E74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void sub_100261EE8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _BYTE *v4;
  double v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  NSObject *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  NSObject *v26;
  BOOL v27;
  __int16 v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  uint64_t v33;
  __int16 v34;
  uint64_t v35;
  __int16 v36;
  uint64_t v37;
  __int16 v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;

  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
    sub_1003E2920();
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 16) = 0;
  *(_BYTE *)(a2 + 24) = 0;
  *(_BYTE *)(a2 + 72) = 0;
  v4 = (_BYTE *)(a2 + 72);
  *(_BYTE *)(a2 + 80) = 0;
  *(_BYTE *)(a2 + 112) = 0;
  *(_BYTE *)(a2 + 160) = 0;
  *(_WORD *)(a2 + 168) = 0;
  *(_QWORD *)(a2 + 120) = 0;
  *(_QWORD *)(a2 + 128) = 0;
  *(_BYTE *)(a2 + 136) = 0;
  if (*(_BYTE *)(a1 + 16))
  {
    v5 = *(double *)a1;
    v6 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
      sub_1003E28B0(v6, v5, v7, v8);
    if (!*(_BYTE *)(a1 + 16))
      sub_10000BA44();
    v9 = *(_DWORD *)(a1 + 8);
    if (v9 == 2)
    {
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
        sub_1003E2884();
    }
    else if (v9 == 1)
    {
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
        sub_1003E2858();
    }
    else
    {
      if (v9)
        goto LABEL_17;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
        sub_1003E282C();
    }
    *(double *)a2 = v5;
    *(_DWORD *)(a2 + 8) = v9;
    *(_BYTE *)(a2 + 16) = 1;
  }
LABEL_17:
  if (*(_BYTE *)(a1 + 72))
  {
    v11 = *(_QWORD *)(a1 + 24);
    v10 = *(_QWORD *)(a1 + 32);
    v13 = *(_QWORD *)(a1 + 48);
    v12 = *(_QWORD *)(a1 + 56);
    v14 = *(_QWORD *)(a1 + 64);
    v15 = *(_DWORD *)(a1 + 40);
    if (v15 == 1)
    {
      v22 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
      {
        v32 = 134219008;
        v33 = v13;
        v34 = 2048;
        v35 = v12;
        v36 = 2048;
        v37 = v14;
        v38 = 2048;
        v39 = v11;
        v40 = 2048;
        v41 = v10;
        _os_log_debug_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "#convertAlgorithmFindeeDataToRoseFindeeData MeasuredDisplacement::INERTIAL, h1=%lf, h2=%lf, v=%lf, Enter=%lf, Applicability=%lf", (uint8_t *)&v32, 0x34u);
      }
      *(_QWORD *)(a2 + 24) = v11;
      *(_QWORD *)(a2 + 32) = v10;
      *(_DWORD *)(a2 + 40) = 1;
    }
    else
    {
      if (v15)
        goto LABEL_32;
      v16 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
      {
        v32 = 134219008;
        v33 = v13;
        v34 = 2048;
        v35 = v12;
        v36 = 2048;
        v37 = v14;
        v38 = 2048;
        v39 = v11;
        v40 = 2048;
        v41 = v10;
        _os_log_debug_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "#convertAlgorithmFindeeDataToRoseFindeeData MeasuredDisplacement::VIO, h1=%lf, h2=%lf, v=%lf, Enter=%lf, Applicability=%lf", (uint8_t *)&v32, 0x34u);
      }
      *(_QWORD *)(a2 + 24) = v11;
      *(_QWORD *)(a2 + 32) = v10;
      *(_DWORD *)(a2 + 40) = 0;
    }
    *(_QWORD *)(a2 + 48) = v13;
    *(_QWORD *)(a2 + 56) = v12;
    *(_QWORD *)(a2 + 64) = v14;
  }
  else
  {
    if (!*(_BYTE *)(a1 + 112))
      goto LABEL_32;
    v17 = *(_QWORD *)(a1 + 80);
    v18 = *(_QWORD *)(a1 + 88);
    v19 = *(_QWORD *)(a1 + 96);
    v20 = *(_QWORD *)(a1 + 104);
    v21 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
    {
      v32 = 134218752;
      v33 = v19;
      v34 = 2048;
      v35 = v20;
      v36 = 2048;
      v37 = v17;
      v38 = 2048;
      v39 = v18;
      _os_log_debug_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "#convertAlgorithmFindeeDataToRoseFindeeData MeasuredVelocity h1=%lf, h2=%lf, Enter=%lf, Applicability=%lf", (uint8_t *)&v32, 0x2Au);
    }
    *(_QWORD *)(a2 + 80) = v17;
    *(_QWORD *)(a2 + 88) = v18;
    v4 = (_BYTE *)(a2 + 112);
    *(_QWORD *)(a2 + 96) = v19;
    *(_QWORD *)(a2 + 104) = v20;
  }
  *v4 = 1;
LABEL_32:
  if (*(_BYTE *)(a1 + 160))
  {
    v23 = *(_QWORD *)(a1 + 136);
    v24 = *(_QWORD *)(a1 + 144);
    v25 = *(_DWORD *)(a1 + 152);
    v26 = (id)qword_10085F520;
    if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
    {
      if (!*(_BYTE *)(a1 + 160))
        sub_10000BA44();
      v29 = *(_QWORD *)(a1 + 136);
      v30 = *(_QWORD *)(a1 + 144);
      v31 = *(_DWORD *)(a1 + 152);
      v32 = 134218496;
      v33 = v29;
      v34 = 2048;
      v35 = v30;
      v36 = 1024;
      LODWORD(v37) = v31;
      _os_log_debug_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEBUG, "#convertAlgorithmFindeeDataToRoseFindeeData LocationData northerly=%lf, easterly=%lf, unc=%u", (uint8_t *)&v32, 0x1Cu);
    }

    *(_QWORD *)(a2 + 136) = v23;
    *(_QWORD *)(a2 + 144) = v24;
    *(_DWORD *)(a2 + 152) = v25;
    *(_BYTE *)(a2 + 160) = 1;
  }
  if (*(_BYTE *)(a1 + 169))
    v27 = *(_BYTE *)(a1 + 168) == 0;
  else
    v27 = 1;
  v28 = !v27;
  *(_WORD *)(a2 + 168) = v28 | 0x100;
}

void sub_1002622F4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10026230C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _BYTE *v4;
  NSObject *v5;
  double v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  NSObject *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  NSObject *v27;
  BOOL v28;
  __int16 v29;
  int v30;
  uint64_t v31;
  __int16 v32;
  uint64_t v33;
  __int16 v34;
  uint64_t v35;
  __int16 v36;
  uint64_t v37;
  __int16 v38;
  uint64_t v39;
  _BYTE v40[24];

  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
    sub_1003E2A80();
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 16) = 0;
  *(_BYTE *)(a2 + 24) = 0;
  *(_BYTE *)(a2 + 72) = 0;
  v4 = (_BYTE *)(a2 + 72);
  *(_BYTE *)(a2 + 80) = 0;
  *(_BYTE *)(a2 + 112) = 0;
  *(_QWORD *)(a2 + 120) = 0;
  *(_BYTE *)(a2 + 160) = 0;
  *(_WORD *)(a2 + 168) = 0;
  *(_QWORD *)(a2 + 128) = 0;
  *(_BYTE *)(a2 + 136) = 0;
  if (*(_BYTE *)(a1 + 128))
  {
    v5 = (id)qword_10085F520;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
    {
      if (!*(_BYTE *)(a1 + 128))
        sub_10000BA44();
      sub_1003E2A40((uint64_t *)(a1 + 120), (uint64_t)v40, v5);
    }

  }
  if (*(_BYTE *)(a1 + 16))
  {
    v6 = *(double *)a1;
    v7 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
      sub_1003E29D0(v7, v6, v8, v9);
    if (!*(_BYTE *)(a1 + 16))
      sub_10000BA44();
    v10 = *(_DWORD *)(a1 + 8);
    if (v10 == 2)
    {
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
        sub_1003E29A4();
    }
    else if (v10 == 1)
    {
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
        sub_1003E2978();
    }
    else
    {
      if (v10)
        goto LABEL_22;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
        sub_1003E294C();
    }
    *(double *)a2 = v6;
    *(_DWORD *)(a2 + 8) = v10;
    *(_BYTE *)(a2 + 16) = 1;
  }
LABEL_22:
  if (*(_BYTE *)(a1 + 72))
  {
    v12 = *(_QWORD *)(a1 + 24);
    v11 = *(_QWORD *)(a1 + 32);
    v14 = *(_QWORD *)(a1 + 48);
    v13 = *(_QWORD *)(a1 + 56);
    v15 = *(_QWORD *)(a1 + 64);
    v16 = *(_DWORD *)(a1 + 40);
    if (v16 == 1)
    {
      v23 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
      {
        v30 = 134219008;
        v31 = v14;
        v32 = 2048;
        v33 = v13;
        v34 = 2048;
        v35 = v15;
        v36 = 2048;
        v37 = v12;
        v38 = 2048;
        v39 = v11;
        _os_log_debug_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "#convertToAlgorithmFindeeData MeasuredDisplacement::INERTIAL, h1=%lf, h2=%lf, v=%lf, Enter=%lf, Applicability=%lf", (uint8_t *)&v30, 0x34u);
      }
      *(_QWORD *)(a2 + 24) = v12;
      *(_QWORD *)(a2 + 32) = v11;
      *(_DWORD *)(a2 + 40) = 1;
    }
    else
    {
      if (v16)
        goto LABEL_37;
      v17 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
      {
        v30 = 134219008;
        v31 = v14;
        v32 = 2048;
        v33 = v13;
        v34 = 2048;
        v35 = v15;
        v36 = 2048;
        v37 = v12;
        v38 = 2048;
        v39 = v11;
        _os_log_debug_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "#convertToAlgorithmFindeeData MeasuredDisplacement::VIO, h1=%lf, h2=%lf, v=%lf, Enter=%lf, Applicability=%lf", (uint8_t *)&v30, 0x34u);
      }
      *(_QWORD *)(a2 + 24) = v12;
      *(_QWORD *)(a2 + 32) = v11;
      *(_DWORD *)(a2 + 40) = 0;
    }
    *(_QWORD *)(a2 + 48) = v14;
    *(_QWORD *)(a2 + 56) = v13;
    *(_QWORD *)(a2 + 64) = v15;
  }
  else
  {
    if (!*(_BYTE *)(a1 + 112))
      goto LABEL_37;
    v18 = *(_QWORD *)(a1 + 80);
    v19 = *(_QWORD *)(a1 + 88);
    v20 = *(_QWORD *)(a1 + 96);
    v21 = *(_QWORD *)(a1 + 104);
    v22 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
    {
      v30 = 134218752;
      v31 = v20;
      v32 = 2048;
      v33 = v21;
      v34 = 2048;
      v35 = v18;
      v36 = 2048;
      v37 = v19;
      _os_log_debug_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "#convertToAlgorithmFindeeData MeasuredVelocity h1=%lf, h2=%lf, Enter=%lf, Applicability=%lf", (uint8_t *)&v30, 0x2Au);
    }
    *(_QWORD *)(a2 + 80) = v18;
    *(_QWORD *)(a2 + 88) = v19;
    v4 = (_BYTE *)(a2 + 112);
    *(_QWORD *)(a2 + 96) = v20;
    *(_QWORD *)(a2 + 104) = v21;
  }
  *v4 = 1;
LABEL_37:
  *(_QWORD *)(a2 + 120) = *(_QWORD *)(a1 + 120);
  *(_BYTE *)(a2 + 128) = *(_BYTE *)(a1 + 128);
  if (*(_BYTE *)(a1 + 160))
  {
    v24 = *(_QWORD *)(a1 + 136);
    v25 = *(_QWORD *)(a1 + 144);
    v26 = *(_DWORD *)(a1 + 152);
    v27 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
    {
      v30 = 134218496;
      v31 = v24;
      v32 = 2048;
      v33 = v25;
      v34 = 1024;
      LODWORD(v35) = v26;
      _os_log_debug_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEBUG, "#convertToAlgorithmFindeeData LocationData northerly=%lf, easterly=%lf, unc=%u", (uint8_t *)&v30, 0x1Cu);
    }
    *(_QWORD *)(a2 + 136) = v24;
    *(_QWORD *)(a2 + 144) = v25;
    *(_DWORD *)(a2 + 152) = v26;
    *(_BYTE *)(a2 + 160) = 1;
  }
  if (*(_BYTE *)(a1 + 169))
    v28 = *(_BYTE *)(a1 + 168) == 0;
  else
    v28 = 1;
  v29 = !v28;
  *(_WORD *)(a2 + 168) = v29 | 0x100;
}

void sub_100262760(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

char *sub_100262778(char *__dst, __int128 *a2, __int128 *a3, double a4, double a5, double a6)
{
  __int128 v11;
  _BYTE *v12;
  __int128 v13;

  if (*((char *)a2 + 23) < 0)
  {
    sub_100004678(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v11 = *a2;
    *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v11;
  }
  v12 = __dst + 24;
  if (*((char *)a3 + 23) < 0)
  {
    sub_100004678(v12, *(void **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v13 = *a3;
    *((_QWORD *)__dst + 5) = *((_QWORD *)a3 + 2);
    *(_OWORD *)v12 = v13;
  }
  *((double *)__dst + 6) = a4;
  *((double *)__dst + 7) = a5;
  *((double *)__dst + 8) = a6;
  return __dst;
}

void sub_100262814(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100262830(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  int v14;
  BOOL v16;
  uint64_t result;

  v2 = a2[23];
  if ((v2 & 0x80u) == 0)
    v3 = a2[23];
  else
    v3 = *((_QWORD *)a2 + 1);
  v4 = *(unsigned __int8 *)(a1 + 47);
  v5 = (char)v4;
  if ((v4 & 0x80u) != 0)
    v4 = *(_QWORD *)(a1 + 32);
  if (v3 != v4)
    return 0;
  v8 = *(unsigned __int8 **)(a1 + 24);
  v6 = (unsigned __int8 *)(a1 + 24);
  v7 = v8;
  if (v5 >= 0)
    v9 = v6;
  else
    v9 = v7;
  if ((v2 & 0x80) != 0)
    return memcmp(*(const void **)a2, v9, *((_QWORD *)a2 + 1)) == 0;
  if (!a2[23])
    return 1;
  v10 = v2 - 1;
  do
  {
    v12 = *a2++;
    v11 = v12;
    v14 = *v9++;
    v13 = v14;
    v16 = v10-- != 0;
    result = v11 == v13;
  }
  while (v11 == v13 && v16);
  return result;
}

uint64_t sub_1002628D0(uint64_t a1, char a2)
{
  double *v2;
  double *v3;
  char v6;
  int v7;
  uint64_t v8;

  v2 = *(double **)(a1 + 40);
  v3 = *(double **)(a1 + 48);
  if (v2 == v3)
    return 4;
  v6 = 0;
  do
  {
    v7 = sub_10026296C(v2, a2, *(double *)(a1 + 536), *(double *)(a1 + 544), *(double *)(a1 + 552));
    if (v7 == 2)
      break;
    v6 |= v7 == 3;
    v2 += 9;
  }
  while (v2 != v3);
  if ((v6 & 1) != 0)
    v8 = 3;
  else
    v8 = 4;
  if (v7 == 2)
    return 2;
  return v8;
}

uint64_t sub_10026296C(double *a1, char a2, double a3, double a4, double a5)
{
  id v10;
  id v11;
  double v12;
  double v13;
  double v14;
  unsigned int v15;
  uint64_t v17;
  NSObject *v18;
  void **v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *__p[2];
  char v25;
  uint8_t buf[4];
  void **v27;
  __int16 v28;
  uint64_t v29;
  __int16 v30;
  uint64_t v31;
  __int16 v32;
  uint64_t v33;
  __int16 v34;
  double v35;
  __int16 v36;
  double v37;
  __int16 v38;
  double v39;
  __int16 v40;
  double v41;

  v10 = objc_msgSend(objc_alloc((Class)CLLocation), "initWithLatitude:longitude:", a1[6], a1[7]);
  v11 = objc_msgSend(objc_alloc((Class)CLLocation), "initWithLatitude:longitude:", a3, a4);
  objc_msgSend(v11, "distanceFromLocation:", v10);
  v13 = v12;
  v14 = a1[8] + a5;
  if (v13 >= v14 + 2000.0)
    v15 = 4;
  else
    v15 = 3;
  if (v13 < v14 && a5 < 40000.0)
    v17 = 2;
  else
    v17 = v15;
  if ((a2 & 1) != 0)
  {
    v18 = (id)qword_10085A6C8;
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
    {
      sub_10000BF04(__p, off_100810B00[v17 - 2]);
      if (v25 >= 0)
        v20 = __p;
      else
        v20 = (void **)__p[0];
      v21 = *((_QWORD *)a1 + 6);
      v22 = *((_QWORD *)a1 + 7);
      v23 = *((_QWORD *)a1 + 8);
      *(_DWORD *)buf = 136382467;
      v27 = v20;
      v28 = 2049;
      v29 = v21;
      v30 = 2049;
      v31 = v22;
      v32 = 2049;
      v33 = v23;
      v34 = 2049;
      v35 = a3;
      v36 = 2049;
      v37 = a4;
      v38 = 2049;
      v39 = a5;
      v40 = 2049;
      v41 = v13;
      _os_log_debug_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "regulatory,geof,getLocationStatus,status,%{private}s,site,lat,%{private}.6f,lon,%{private}.6f,radius,%{private}.1f,loc,lat,%{private}.6f,lon,%{private}.6f,unc,%{private}.1f,distance,%{private}.2f", buf, 0x52u);
      if (v25 < 0)
        operator delete(__p[0]);
    }

  }
  return v17;
}

void sub_100262B4C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_100262B7C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v6;
  int v7;
  _BYTE v8[24];

  v6 = a2;
  *(_OWORD *)a1 = xmmword_100474350;
  *(_OWORD *)(a1 + 16) = xmmword_100474360;
  v7 = *((_DWORD *)sub_100004784() + 144);
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  sub_100027674((uint64_t)v8, a4);
  sub_100183D9C(a1 + 64, v6);
}

void sub_1002633F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;

  sub_1001D5744((uint64_t)&a9);
  if (SLOBYTE(STACK[0x29F]) < 0)
    operator delete((void *)STACK[0x288]);
  if (SLOBYTE(STACK[0x2B7]) < 0)
    operator delete((void *)STACK[0x2A0]);
  if (*(char *)(v10 + 695) < 0)
    operator delete(*(void **)(v10 + 672));
  if (*(char *)(v10 + 671) < 0)
    operator delete(*(void **)(v10 + 648));
  if (*(char *)(v10 + 647) < 0)
    operator delete(*(void **)(v10 + 624));
  if (*(char *)(v10 + 623) < 0)
    operator delete(*(void **)(v10 + 600));
  if (*(char *)(v10 + 599) < 0)
    operator delete(*(void **)(v10 + 576));
  if (*(char *)(v10 + 535) < 0)
    operator delete(*(void **)(v10 + 512));
  v17 = *(_QWORD **)(v10 + 504);
  if (v17 == v14)
  {
    v18 = 4;
    v17 = v14;
  }
  else
  {
    if (!v17)
      goto LABEL_22;
    v18 = 5;
  }
  (*(void (**)(void))(*v17 + 8 * v18))();
LABEL_22:
  v19 = *(_QWORD **)(v10 + 472);
  if (v19 == v13)
  {
    v20 = 4;
    v19 = v13;
  }
  else
  {
    if (!v19)
      goto LABEL_27;
    v20 = 5;
  }
  (*(void (**)(void))(*v19 + 8 * v20))();
LABEL_27:

  sub_1001D9118(v12);
  sub_100263B40(v11);
  STACK[0x2A0] = v15;
  sub_1001D9194((void ***)&STACK[0x2A0]);

  _Unwind_Resume(a1);
}

uint64_t sub_1002636BC(uint64_t a1, int a2)
{
  uint64_t result;
  uint64_t v4;
  char v5;

  result = 1;
  switch(a2)
  {
    case 0:
      v5 = 0;
      v4 = *(_QWORD *)(a1 + 472);
      if (!v4)
        sub_100027BC4();
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v4 + 48))(v4, &v5);
      result = 1;
      break;
    case 5:
      result = 2;
      break;
    case 7:
      result = sub_10026416C(a1);
      break;
    case 8:
      result = 0;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100263740(uint64_t a1, int a2)
{
  uint64_t result;
  double v4;
  void *v5;
  void *v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  double v10;
  double v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  uint64_t v20;
  void (*v21)(void);
  uint64_t v22;
  NSObject *v23;
  uint64_t **v24;
  int v25;
  NSObject *v26;
  int v27;
  NSObject *v28;
  uint8_t v29[16];
  uint8_t v30[16];
  uint8_t v31[16];
  uint8_t buf[14];
  char v33;
  char v34;

  result = 2;
  switch(a2)
  {
    case 0:
      sub_100183F28(a1 + 64);
      goto LABEL_35;
    case 1:
      sub_100183F1C(a1 + 64);
      goto LABEL_35;
    case 2:
      v4 = sub_10000883C();
      v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKey:", CFSTR("GeofenceLoggingIntervalOverride")));

      v8 = 3600.0;
      if (v6)
      {
        v9 = objc_opt_class(NSNumber, v7);
        if ((objc_opt_isKindOfClass(v6, v9) & 1) != 0)
        {
          objc_msgSend(v6, "doubleValue");
          v8 = v10;
        }
      }
      v11 = v4 - *(double *)(a1 + 24);
      if (v11 >= v8)
      {
        *(double *)(a1 + 24) = v4;
        v12 = qword_10085A6C8;
        if (os_log_type_enabled((os_log_t)qword_10085A6C8, OS_LOG_TYPE_DEBUG))
          sub_1003E2AAC(a1, v12, v13, v14, v15, v16, v17, v18);
      }
      switch(sub_1002628D0(a1, v11 >= v8))
      {
        case 1u:
          if (v11 >= v8)
          {
            v19 = qword_10085A6C8;
            if (os_log_type_enabled((os_log_t)qword_10085A6C8, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "regulatory,geof,Cannot determine region status", buf, 2u);
            }
          }
          goto LABEL_34;
        case 2u:
          if (v11 >= v8)
          {
            v23 = qword_10085A6C8;
            if (os_log_type_enabled((os_log_t)qword_10085A6C8, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)v31 = 0;
              _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "regulatory,geof,calling setHysteresisEvent DelayedUwbOff from IN", v31, 2u);
            }
          }
          v24 = (uint64_t **)(a1 + 280);
          sub_100264408(a1 + 280, 4, *(double *)(a1 + 8));
          v25 = 3;
          goto LABEL_32;
        case 3u:
          if (v11 >= v8)
          {
            v26 = qword_10085A6C8;
            if (os_log_type_enabled((os_log_t)qword_10085A6C8, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)v30 = 0;
              _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "regulatory,geof,calling setHysteresisEvent DelayedUwbOn from NEAR", v30, 2u);
            }
          }
          v24 = (uint64_t **)(a1 + 280);
          sub_100264408(a1 + 280, 3, *(double *)a1);
          v25 = 4;
LABEL_32:
          sub_100183E70(v24, v25);
          v27 = 1;
          goto LABEL_33;
        case 4u:
          if (v11 >= v8)
          {
            v28 = qword_10085A6C8;
            if (os_log_type_enabled((os_log_t)qword_10085A6C8, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)v29 = 0;
              _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "geof,calling setHysteresisEvent DelayedUwbOn from FAR", v29, 2u);
            }
          }
          sub_100264408(a1 + 280, 3, *(double *)a1);
          sub_100183E70((uint64_t **)(a1 + 280), 4);
          if (sub_1000069CC(*(_DWORD *)(a1 + 32)))
          {
            sub_100183F1C(a1 + 64);
          }
          else if (sub_100360EFC(*(_DWORD *)(a1 + 32)))
          {
            v27 = 4;
LABEL_33:
            sub_100183F34(a1 + 64, v27);
          }
LABEL_34:

          break;
        default:
          goto LABEL_34;
      }
      goto LABEL_35;
    case 3:
      v33 = 1;
      v20 = *(_QWORD *)(a1 + 472);
      if (!v20)
        goto LABEL_44;
      v21 = *(void (**)(void))(*(_QWORD *)v20 + 48);
      goto LABEL_23;
    case 4:
      v34 = 0;
      v22 = *(_QWORD *)(a1 + 472);
      if (!v22)
LABEL_44:
        sub_100027BC4();
      v21 = *(void (**)(void))(*(_QWORD *)v22 + 48);
LABEL_23:
      v21();
LABEL_35:
      result = 2;
      break;
    case 6:
      result = 1;
      break;
    case 7:
      if (sub_10026416C(a1))
        result = 2;
      else
        result = 0;
      break;
    case 8:
      result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void sub_100263AC4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_100263AE4(uint64_t *a1, uint64_t a2)
{
  uint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t result;

  v4 = a1[7];
  v3 = a1 + 7;
  v5 = *(v3 - 1);
  if (v5 >= v4)
  {
    result = sub_10026473C(a1 + 5, a2);
  }
  else
  {
    sub_100264860((int)v3, (__n128 *)*(v3 - 1), a2);
    result = v5 + 72;
    a1[6] = v5 + 72;
  }
  a1[6] = result;
  return result;
}

void sub_100263B38(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 48) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_100263B40(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = (_QWORD *)(a1 + 184);
  v3 = *(_QWORD **)(a1 + 208);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }

  sub_1001841D0(a1 + 24);
  return a1;
}

void sub_100263BA4(uint64_t a1)
{
  _BOOL4 v1;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL4 v10;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BOOL4 v19;
  NSObject *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t i;
  uint64_t v29;
  NSObject *v30;
  id v31;
  void *j;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  uint64_t v38;
  void *v39;
  BOOL v40;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  id v50;
  id v51;
  NSObject *v52;
  id v53;
  id v54;
  void *v55;
  void *v56;
  void *v57;
  id obj;
  uint64_t v60;
  void *v61[2];
  char v62;
  void *__dst[2];
  char v64;
  void *__p;
  char v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  double v71;
  double v72;
  double v73;
  _BYTE buf[12];
  __int16 v75;
  id v76;
  __int16 v77;
  double v78;
  __int16 v79;
  double v80;
  __int16 v81;
  double v82;
  _BYTE v83[128];

  sub_100183DA0((double *)(a1 + 64));
  v73 = 0.0;
  v1 = sub_1003915AC((uint64_t)"GeofenceUwbOnDelay", &v73);
  if (v73 != 0.0 && v1)
  {
    *(double *)a1 = v73;
    v3 = qword_10085A6C8;
    if (os_log_type_enabled((os_log_t)qword_10085A6C8, OS_LOG_TYPE_DEBUG))
      sub_1003E2C58(a1, v3, v4, v5, v6, v7, v8, v9);
  }
  v72 = 0.0;
  v10 = sub_1003915AC((uint64_t)"GeofenceUwbOffDelay", &v72);
  if (v72 != 0.0 && v10)
  {
    *(double *)(a1 + 8) = v72;
    v12 = qword_10085A6C8;
    if (os_log_type_enabled((os_log_t)qword_10085A6C8, OS_LOG_TYPE_DEBUG))
      sub_1003E2BF0(a1 + 8, v12, v13, v14, v15, v16, v17, v18);
  }
  v71 = 0.0;
  v19 = sub_1003915AC((uint64_t)"GeofenceLocationAgeThreshold", &v71);
  if (v71 != 0.0 && v19)
  {
    *(double *)(a1 + 16) = v71;
    v21 = qword_10085A6C8;
    if (os_log_type_enabled((os_log_t)qword_10085A6C8, OS_LOG_TYPE_DEBUG))
      sub_1003E2B88(a1 + 16, v21, v22, v23, v24, v25, v26, v27);
  }
  v57 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  v55 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v57, "stringForKey:", CFSTR("GeofencePlistPath")));
  v56 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithContentsOfFile:](NSArray, "arrayWithContentsOfFile:"));
  if (v56)
  {
    v29 = *(_QWORD *)(a1 + 40);
    for (i = *(_QWORD *)(a1 + 48); i != v29; sub_1001D9218(a1 + 56, i))
      i -= 72;
    *(_QWORD *)(a1 + 48) = v29;
    v30 = qword_10085A6C8;
    if (os_log_type_enabled((os_log_t)qword_10085A6C8, OS_LOG_TYPE_DEBUG))
      sub_1003E2B4C(v30);
    v69 = 0u;
    v70 = 0u;
    v67 = 0u;
    v68 = 0u;
    obj = v56;
    v31 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v67, v83, 16);
    if (v31)
    {
      v60 = *(_QWORD *)v68;
      do
      {
        for (j = 0; j != v31; j = (char *)j + 1)
        {
          if (*(_QWORD *)v68 != v60)
            objc_enumerationMutation(obj);
          v33 = *(void **)(*((_QWORD *)&v67 + 1) + 8 * (_QWORD)j);
          v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v33, "objectForKey:", CFSTR("Name")));
          v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v33, "objectForKey:", CFSTR("IsoCountry")));
          v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v33, "objectForKey:", CFSTR("Latitude")));
          v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v33, "objectForKey:", CFSTR("Longitude")));
          v38 = objc_claimAutoreleasedReturnValue(objc_msgSend(v33, "objectForKey:", CFSTR("Radius")));
          v39 = (void *)v38;
          if (v34)
            v40 = v35 == 0;
          else
            v40 = 1;
          if (!v40 && v36 != 0 && v37 != 0 && v38 != 0)
          {
            objc_msgSend(v36, "doubleValue");
            v45 = v44;
            objc_msgSend(v37, "doubleValue");
            v47 = v46;
            objc_msgSend(v39, "doubleValue");
            v49 = v48;
            v50 = objc_retainAutorelease(v34);
            sub_10000BF04(buf, (char *)objc_msgSend(v50, "UTF8String"));
            v51 = objc_retainAutorelease(v35);
            sub_10000BF04(v61, (char *)objc_msgSend(v51, "UTF8String"));
            sub_100262778((char *)__dst, (__int128 *)buf, (__int128 *)v61, v45, v47, v49);
            sub_100263AE4((uint64_t *)a1, (uint64_t)__dst);
            if (v66 < 0)
              operator delete(__p);
            if (v64 < 0)
              operator delete(__dst[0]);
            if (v62 < 0)
              operator delete(v61[0]);
            if (SHIBYTE(v77) < 0)
              operator delete(*(void **)buf);
            v52 = (id)qword_10085A6C8;
            if (os_log_type_enabled(v52, OS_LOG_TYPE_DEBUG))
            {
              v53 = objc_msgSend(objc_retainAutorelease(v50), "UTF8String");
              v54 = objc_msgSend(objc_retainAutorelease(v51), "UTF8String");
              *(_DWORD *)buf = 136381699;
              *(_QWORD *)&buf[4] = v53;
              v75 = 2080;
              v76 = v54;
              v77 = 2049;
              v78 = v45;
              v79 = 2049;
              v80 = v47;
              v81 = 2049;
              v82 = v49;
              _os_log_debug_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_DEBUG, "regulatory,geof,default,site,name,%{private}s,iso,%s,lat,%{private}.6f,lon,%{private}.6f,radius,%{private}.2f", buf, 0x34u);
            }

          }
        }
        v31 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v67, v83, 16);
      }
      while (v31);
    }

  }
}

void sub_100264088(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51)
{

  _Unwind_Resume(a1);
}

uint64_t sub_10026416C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  unsigned __int8 *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  unsigned __int8 *v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 *v21;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 *v25;
  unsigned __int8 *v26;
  NSObject *v27;
  const char *v28;
  uint8_t *v29;
  __int16 v30;
  __int16 v31;

  if (sub_1000069CC(*(_DWORD *)(a1 + 32)))
  {
    v2 = *(_QWORD *)(a1 + 40);
    v3 = *(_QWORD *)(a1 + 48);
    if (v2 != v3)
    {
      v4 = *(_QWORD *)(a1 + 40);
      do
      {
        v5 = sub_100262830(v4, (unsigned __int8 *)(a1 + 576));
        if ((v5 & 1) != 0)
          break;
        v4 += 72;
      }
      while (v4 != v3);
      v6 = (unsigned __int8 *)(a1 + 600);
      do
      {
        v7 = sub_100262830(v2, v6);
        if ((v7 & 1) != 0)
          break;
        v2 += 72;
      }
      while (v2 != v3);
      return v5 | v7;
    }
    return 0;
  }
  if (!sub_100360F30(*(_DWORD *)(a1 + 32)))
  {
    if (!sub_100360FA0(*(_DWORD *)(a1 + 32)))
    {
      v18 = *(_QWORD *)(a1 + 40);
      v19 = *(_QWORD *)(a1 + 48);
      if (v18 != v19)
      {
        v20 = *(_QWORD *)(a1 + 40);
        do
        {
          v5 = sub_100262830(v20, (unsigned __int8 *)(a1 + 624));
          if ((v5 & 1) != 0)
            break;
          v20 += 72;
        }
        while (v20 != v19);
        v21 = (unsigned __int8 *)(a1 + 648);
        do
        {
          v7 = sub_100262830(v18, v21);
          if ((v7 & 1) != 0)
            break;
          v18 += 72;
        }
        while (v18 != v19);
        return v5 | v7;
      }
      return 0;
    }
    if (*(char *)(a1 + 599) < 0)
      v17 = *(_QWORD *)(a1 + 584);
    else
      v17 = *(unsigned __int8 *)(a1 + 599);
    v23 = *(_QWORD *)(a1 + 40);
    v24 = *(_QWORD *)(a1 + 48);
    if (v17)
    {
      if (v23 == v24)
      {
        v8 = 0;
      }
      else
      {
        v25 = (unsigned __int8 *)(a1 + 576);
        do
        {
          v8 = sub_100262830(v23, v25);
          if ((v8 & 1) != 0)
            break;
          v23 += 72;
        }
        while (v23 != v24);
      }
      v27 = qword_10085A6C8;
      if (!os_log_type_enabled((os_log_t)qword_10085A6C8, OS_LOG_TYPE_DEFAULT))
        return v8;
      v31 = 0;
      v28 = "regulatory geof,using fSlot1Iso";
      v29 = (uint8_t *)&v31;
    }
    else
    {
      if (v23 == v24)
      {
        v8 = 0;
      }
      else
      {
        v26 = (unsigned __int8 *)(a1 + 672);
        do
        {
          v8 = sub_100262830(v23, v26);
          if ((v8 & 1) != 0)
            break;
          v23 += 72;
        }
        while (v23 != v24);
      }
      v27 = qword_10085A6C8;
      if (!os_log_type_enabled((os_log_t)qword_10085A6C8, OS_LOG_TYPE_DEFAULT))
        return v8;
      v30 = 0;
      v28 = "regulatory geof,using fWifiIso";
      v29 = (uint8_t *)&v30;
    }
    _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, v28, v29, 2u);
    return v8;
  }
  v9 = *(_QWORD *)(a1 + 40);
  v10 = *(_QWORD *)(a1 + 48);
  if (v9 == v10)
    return 0;
  v11 = *(_QWORD *)(a1 + 40);
  do
  {
    v12 = sub_100262830(v11, (unsigned __int8 *)(a1 + 576));
    if ((v12 & 1) != 0)
      break;
    v11 += 72;
  }
  while (v11 != v10);
  v13 = v9;
  do
  {
    v14 = sub_100262830(v13, (unsigned __int8 *)(a1 + 600));
    if ((v14 & 1) != 0)
      break;
    v13 += 72;
  }
  while (v13 != v10);
  v15 = (unsigned __int8 *)(a1 + 624);
  do
  {
    v16 = sub_100262830(v9, v15);
    if ((v16 & 1) != 0)
      break;
    v9 += 72;
  }
  while (v9 != v10);
  return v12 | v14 | v16;
}

void sub_100264408(uint64_t a1, int a2, double a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t **v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  uint64_t *v11;
  int v12;
  int *v13;

  v12 = a2;
  v5 = a1 + 88;
  v6 = *(_QWORD *)(a1 + 88);
  v7 = (uint64_t **)(a1 + 80);
  if (!v6)
    goto LABEL_11;
  v8 = v5;
  do
  {
    v9 = *(_DWORD *)(v6 + 28);
    v10 = v9 < a2;
    if (v9 >= a2)
      v11 = (uint64_t *)v6;
    else
      v11 = (uint64_t *)(v6 + 8);
    if (!v10)
      v8 = v6;
    v6 = *v11;
  }
  while (*v11);
  if (v8 == v5 || *(_DWORD *)(v8 + 28) > a2)
  {
LABEL_11:
    v13 = &v12;
    *((_BYTE *)sub_100184664(v7, &v12, (uint64_t)&unk_100472CF8, &v13) + 32) = 0;
LABEL_12:
    sub_100264DBC(a1, v12, a3);
    return;
  }
  v13 = &v12;
  if (!*((_BYTE *)sub_100184664(v7, &v12, (uint64_t)&unk_100472CF8, &v13) + 32))
    goto LABEL_12;
}

uint64_t sub_1002644E0(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = qword_10085A6C8;
  if (os_log_type_enabled((os_log_t)qword_10085A6C8, OS_LOG_TYPE_DEBUG))
    sub_1003E2CC0(a2, v4, v5, v6, v7, v8, v9, v10);
  *(_BYTE *)(a1 + 440) = a2;
  if ((_DWORD)a2)
    v11 = 5;
  else
    v11 = 6;
  return sub_1000061C4(a1 + 280, v11);
}

void sub_100264548(uint64_t a1, int a2, const std::string *a3)
{
  std::string *v6;
  uint64_t v7;

  if (os_log_type_enabled((os_log_t)qword_10085A6C8, OS_LOG_TYPE_DEBUG))
    sub_1003E2D28();
  switch(a2)
  {
    case 0:
      if (sub_1000069CC(*(_DWORD *)(a1 + 32))
        || (sub_100360F30(*(_DWORD *)(a1 + 32)) & 1) != 0
        || sub_100360FA0(*(_DWORD *)(a1 + 32)))
      {
        v6 = (std::string *)(a1 + 576);
        goto LABEL_16;
      }
      break;
    case 1:
      if (sub_1000069CC(*(_DWORD *)(a1 + 32)))
      {
        v6 = (std::string *)(a1 + 600);
        goto LABEL_16;
      }
      break;
    case 2:
      if (sub_100360EFC(*(_DWORD *)(a1 + 32)))
      {
        v6 = (std::string *)(a1 + 624);
        goto LABEL_16;
      }
      break;
    case 3:
      if (sub_100360EFC(*(_DWORD *)(a1 + 32)))
      {
        v6 = (std::string *)(a1 + 648);
        goto LABEL_16;
      }
      break;
    case 4:
      if (sub_100360FA0(*(_DWORD *)(a1 + 32)))
      {
        v6 = (std::string *)(a1 + 672);
LABEL_16:
        std::string::operator=(v6, a3);
      }
      break;
    default:
      break;
  }
  if (*(char *)(a1 + 599) < 0)
  {
    if (*(_QWORD *)(a1 + 584))
      goto LABEL_37;
  }
  else if (*(_BYTE *)(a1 + 599))
  {
    goto LABEL_37;
  }
  if (*(char *)(a1 + 623) < 0)
  {
    if (*(_QWORD *)(a1 + 608))
      goto LABEL_37;
  }
  else if (*(_BYTE *)(a1 + 623))
  {
    goto LABEL_37;
  }
  if (*(char *)(a1 + 647) < 0)
  {
    if (*(_QWORD *)(a1 + 632))
      goto LABEL_37;
  }
  else if (*(_BYTE *)(a1 + 647))
  {
    goto LABEL_37;
  }
  if (*(char *)(a1 + 671) < 0)
  {
    if (!*(_QWORD *)(a1 + 656))
      goto LABEL_33;
LABEL_37:
    sub_1000061C4(a1 + 280, 7);
    return;
  }
  if (*(_BYTE *)(a1 + 671))
    goto LABEL_37;
LABEL_33:
  if (*(char *)(a1 + 695) < 0)
    v7 = *(_QWORD *)(a1 + 680);
  else
    v7 = *(unsigned __int8 *)(a1 + 695);
  if (v7)
    goto LABEL_37;
}

void sub_1002646D8(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = qword_10085A6C8;
  if (os_log_type_enabled((os_log_t)qword_10085A6C8, OS_LOG_TYPE_DEBUG))
    sub_1003E2DA8(a2, v4, v5, v6, v7, v8, v9, v10);
  if ((_DWORD)a2 == 1)
    sub_1000061C4(a1 + 280, 8);
}

uint64_t sub_10026473C(uint64_t *a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  void *v10;
  __n128 *v11;
  __int8 *v12;
  char *v13;
  uint64_t *v14;

  v3 = 0x8E38E38E38E38E39 * ((a1[1] - *a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0x38E38E38E38E38ELL)
    sub_100026E7C();
  if (0x1C71C71C71C71C72 * ((a1[2] - *a1) >> 3) > v4)
    v4 = 0x1C71C71C71C71C72 * ((a1[2] - *a1) >> 3);
  if (0x8E38E38E38E38E39 * ((a1[2] - *a1) >> 3) >= 0x1C71C71C71C71C7)
    v6 = 0x38E38E38E38E38ELL;
  else
    v6 = v4;
  v14 = a1 + 2;
  if (v6)
    v7 = (char *)sub_100264974((uint64_t)(a1 + 2), v6);
  else
    v7 = 0;
  v10 = v7;
  v11 = (__n128 *)&v7[72 * v3];
  v13 = &v7[72 * v6];
  sub_100264860((_DWORD)a1 + 16, v11, a2);
  v12 = &v11[4].n128_i8[8];
  sub_100264900(a1, &v10);
  v8 = a1[1];
  sub_100264B04(&v10);
  return v8;
}

void sub_10026484C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100264B04((void **)va);
  _Unwind_Resume(a1);
}

__n128 sub_100264860(int a1, __n128 *__dst, uint64_t a3)
{
  __n128 v5;
  unsigned __int8 *v6;
  __int128 v7;
  __n128 result;

  if (*(char *)(a3 + 23) < 0)
  {
    sub_100004678(__dst, *(void **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    v5 = *(__n128 *)a3;
    __dst[1].n128_u64[0] = *(_QWORD *)(a3 + 16);
    *__dst = v5;
  }
  v6 = &__dst[1].n128_u8[8];
  if (*(char *)(a3 + 47) < 0)
  {
    sub_100004678(v6, *(void **)(a3 + 24), *(_QWORD *)(a3 + 32));
  }
  else
  {
    v7 = *(_OWORD *)(a3 + 24);
    __dst[2].n128_u64[1] = *(_QWORD *)(a3 + 40);
    *(_OWORD *)v6 = v7;
  }
  result = *(__n128 *)(a3 + 48);
  __dst[4].n128_u64[0] = *(_QWORD *)(a3 + 64);
  __dst[3] = result;
  return result;
}

void sub_1002648E4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100264900(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_1002649BC((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_100264974(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x38E38E38E38E38FLL)
    sub_1000260B0();
  return operator new(72 * a2);
}

uint64_t sub_1002649BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _QWORD v14[3];
  char v15;
  __int128 v16;
  __int128 v17;

  v7 = a7;
  *(_QWORD *)&v17 = a6;
  *((_QWORD *)&v17 + 1) = a7;
  v16 = v17;
  v14[0] = a1;
  v14[1] = &v16;
  v14[2] = &v17;
  if (a3 != a5)
  {
    v9 = a7;
    do
    {
      v10 = *(_OWORD *)(a3 - 72);
      *(_QWORD *)(v9 - 56) = *(_QWORD *)(a3 - 56);
      *(_OWORD *)(v9 - 72) = v10;
      *(_QWORD *)(a3 - 64) = 0;
      *(_QWORD *)(a3 - 56) = 0;
      *(_QWORD *)(a3 - 72) = 0;
      v11 = *(_OWORD *)(a3 - 48);
      *(_QWORD *)(v9 - 32) = *(_QWORD *)(a3 - 32);
      *(_OWORD *)(v9 - 48) = v11;
      *(_QWORD *)(a3 - 40) = 0;
      *(_QWORD *)(a3 - 32) = 0;
      *(_QWORD *)(a3 - 48) = 0;
      v12 = *(_OWORD *)(a3 - 24);
      *(_QWORD *)(v9 - 8) = *(_QWORD *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v12;
      v9 -= 72;
      v7 -= 72;
      a3 -= 72;
    }
    while (a3 != a5);
    *((_QWORD *)&v17 + 1) = v9;
  }
  v15 = 1;
  sub_100264A80((uint64_t)v14);
  return a6;
}

uint64_t sub_100264A80(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_100264AB4((uint64_t *)a1);
  return a1;
}

void sub_100264AB4(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1[2] + 8);
  v2 = *(_QWORD *)(a1[1] + 8);
  if (v1 != v2)
  {
    v3 = *a1;
    do
    {
      sub_1001D9218(v3, v1);
      v1 += 72;
    }
    while (v1 != v2);
  }
}

void **sub_100264B04(void **a1)
{
  sub_100264B34(a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void sub_100264B34(_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 72;
    sub_1001D9218(v4, i - 72);
  }
}

void sub_100264B7C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_100264BA4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_100264BE4(uint64_t a1, const void **a2, _QWORD *a3)
{
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  void **v8;
  size_t v9;
  __int128 *v10;
  const void *v11;
  __int128 v13;
  uint64_t v14;

  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 8) = a1 + 16;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = *a3;
  v5 = a3[1];
  *(_QWORD *)(a1 + 40) = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 56) = a1 + 64;
  *(_BYTE *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 88;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  v8 = (void **)(a1 + 120);
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  if ((*((char *)a2 + 23) & 0x80000000) == 0)
  {
    if (*((_BYTE *)a2 + 23))
      goto LABEL_6;
LABEL_21:
    __assert_rtn("PRStateMachine", "PRStateMachine.h", 55, "!name.empty()");
  }
  if (!a2[1])
    goto LABEL_21;
LABEL_6:
  if (*((char *)a2 + 23) >= 0)
    v9 = *((unsigned __int8 *)a2 + 23);
  else
    v9 = (size_t)a2[1];
  sub_10013FDB8((uint64_t)&v13, v9 + 1);
  if (v14 >= 0)
    v10 = &v13;
  else
    v10 = (__int128 *)v13;
  if (v9)
  {
    if (*((char *)a2 + 23) >= 0)
      v11 = a2;
    else
      v11 = *a2;
    memmove(v10, v11, v9);
  }
  *(_WORD *)((char *)v10 + v9) = 44;
  if (*(char *)(a1 + 143) < 0)
    operator delete(*v8);
  *(_OWORD *)v8 = v13;
  *(_QWORD *)(a1 + 136) = v14;
  return a1;
}

void sub_100264D68(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void **v6;

  if (*(char *)(v1 + 143) < 0)
    operator delete(*v6);

  sub_10003E3F0(v5, *(_QWORD **)(v1 + 88));
  sub_100184188(v4, *(_QWORD **)(v1 + 64));
  sub_10001AE68(v3);
  sub_10003E3F0(v2, *(_QWORD **)(v1 + 16));
  _Unwind_Resume(a1);
}

void sub_100264DBC(uint64_t a1, int a2, double a3)
{
  NSObject *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  uint64_t *v11;
  void *v12;
  NSObject *v13;
  dispatch_source_t v14;
  uint64_t **v15;
  dispatch_time_t v16;
  _QWORD v17[5];
  int v18;
  int v19;
  int *v20;

  v19 = a2;
  v3 = *(NSObject **)(a1 + 104);
  if (!v3)
    sub_1003D2D14();
  if (a3 >= 0.0)
  {
    v7 = a1 + 64;
    v6 = *(_QWORD *)(a1 + 64);
    if (!v6)
      goto LABEL_15;
    v8 = a1 + 64;
    do
    {
      v9 = *(_DWORD *)(v6 + 32);
      v10 = v9 < a2;
      if (v9 >= a2)
        v11 = (uint64_t *)v6;
      else
        v11 = (uint64_t *)(v6 + 8);
      if (!v10)
        v8 = v6;
      v6 = *v11;
    }
    while (*v11);
    if (v8 != v7 && *(_DWORD *)(v8 + 32) <= a2 && (v12 = *(void **)(v8 + 40)) != 0)
    {
      v13 = v12;
    }
    else
    {
LABEL_15:
      v14 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, v3);
      if (!v14)
        return;
      v13 = v14;
      v20 = &v19;
      v15 = sub_1001845A4((uint64_t **)(v7 - 8), &v19, (uint64_t)&unk_100472CF8, &v20);
      objc_storeStrong((id *)v15 + 5, v13);
      dispatch_source_set_timer(v13, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0x1DCD6500uLL);
      v17[0] = _NSConcreteStackBlock;
      v17[1] = 3221225472;
      v17[2] = sub_100264F80;
      v17[3] = &unk_100807908;
      v17[4] = a1;
      v18 = v19;
      dispatch_source_set_event_handler(v13, v17);
      dispatch_resume(v13);
    }
    v16 = dispatch_time(0xFFFFFFFFFFFFFFFELL, (uint64_t)(a3 * 1000000000.0));
    dispatch_source_set_timer(v13, v16, 0xFFFFFFFFFFFFFFFFLL, 0x1DCD6500uLL);
    v20 = &v19;
    *((_BYTE *)sub_100184664((uint64_t **)(a1 + 80), &v19, (uint64_t)&unk_100472CF8, &v20) + 32) = 1;

  }
}

void sub_100264F70(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t **sub_100264F80(uint64_t a1)
{
  _DWORD *v1;
  uint64_t v2;
  uint64_t **result;
  _DWORD *v4;

  v1 = (_DWORD *)(a1 + 40);
  v2 = *(_QWORD *)(a1 + 32);
  sub_1000061C4(v2, *(unsigned int *)(a1 + 40));
  v4 = v1;
  result = sub_100184664((uint64_t **)(v2 + 80), v1, (uint64_t)&unk_100472CF8, &v4);
  *((_BYTE *)result + 32) = 0;
  return result;
}

void sub_100264FD8(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 0x34u);
}

void sub_100264FE8()
{
  void *v0;

  v0 = objc_autoreleasePoolPush();
  qword_10085A6C8 = (uint64_t)os_log_create("com.apple.nearbyd", "Regulatory");
  objc_autoreleasePoolPop(v0);
}

uint64_t sub_100265028(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5, uint64_t a6, uint64_t a7)
{
  id v13;
  id v14;
  id v15;
  id v16;
  NSObject *v17;
  uint64_t v18;
  void **v19;
  const char *v21;
  int v22;
  void *__p[2];
  uint64_t v24;
  uint8_t buf[4];
  uint64_t v26;
  __int16 v27;
  void **v28;

  v13 = a4;
  v14 = a5;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = dispatch_queue_create("com.apple.nearby.niserver.backoff", 0);
  sub_100027674(a1 + 48, a3);
  sub_100027674(a1 + 80, a6);
  sub_100027674(a1 + 112, a7);
  v15 = v13;
  *(_QWORD *)(a1 + 144) = v15;
  v16 = v14;
  *(_BYTE *)(a1 + 192) = 0;
  *(_BYTE *)(a1 + 200) = 0;
  *(_BYTE *)(a1 + 208) = 0;
  *(_BYTE *)(a1 + 212) = 0;
  *(_BYTE *)(a1 + 216) = 0;
  *(_BYTE *)(a1 + 220) = 0;
  *(_QWORD *)(a1 + 152) = v16;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_DWORD *)(a1 + 184) = 0;
  __p[0] = sub_1002653D8;
  __p[1] = 0;
  v24 = a1;
  sub_100267F68((void **)(a1 + 40), (uint64_t)__p, (char *)(a2 + 3), (unsigned __int8 *)(a2 + 5), (_QWORD *)(a1 + 224));
  *(_DWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 248) = 0;
  if (!*(_QWORD *)(a1 + 144))
  {
    v21 = "fUpdatesQueue";
    v22 = 36;
    goto LABEL_18;
  }
  if (!*(_QWORD *)(a1 + 72))
  {
    v21 = "fBackoffResumeHandler";
    v22 = 37;
    goto LABEL_18;
  }
  if (!*(_QWORD *)(a1 + 152))
  {
    v21 = "fSessionIdentifier != nil";
    v22 = 38;
    goto LABEL_18;
  }
  if (!*(_QWORD *)(a1 + 104))
  {
    v21 = "fMotionStateHandler != nullptr";
    v22 = 39;
    goto LABEL_18;
  }
  if (*(double *)(a1 + 24) < 0.0)
  {
    v21 = "fConfig.screenStateProcessingDelaySeconds >= 0";
    v22 = 40;
LABEL_18:
    __assert_rtn("BackoffResumeManager", "NIServerBackoffResumeManager.mm", v22, v21);
  }
  v17 = (id)qword_10085F520;
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    v18 = *(_QWORD *)(a1 + 152);
    sub_100265540((unsigned __int8 *)(a1 + 16));
    if (v24 >= 0)
      v19 = __p;
    else
      v19 = (void **)__p[0];
    *(_DWORD *)buf = 138412546;
    v26 = v18;
    v27 = 2080;
    v28 = v19;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "#backoff,Creating backoff resume manager for session identifier: %@. Configuration: %s", buf, 0x16u);
    if (SHIBYTE(v24) < 0)
      operator delete(__p[0]);
  }

  return a1;
}

void sub_1002652BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, _QWORD *a11)
{
  uint64_t v11;
  void *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;

  sub_10001AE68(v15);
  v18 = *(_QWORD **)(v11 + 136);
  if (v18 == v14)
  {
    v19 = 4;
    v18 = v14;
  }
  else
  {
    if (!v18)
      goto LABEL_6;
    v19 = 5;
  }
  (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_6:
  v20 = *(_QWORD **)(v11 + 104);
  if (v20 == v13)
  {
    v21 = 4;
    v20 = v13;
  }
  else
  {
    if (!v20)
      goto LABEL_11;
    v21 = 5;
  }
  (*(void (**)(void))(*v20 + 8 * v21))();
LABEL_11:
  v22 = *(_QWORD **)(v11 + 72);
  if (v22 == a11)
  {
    v23 = 4;
    v22 = a11;
  }
  else
  {
    if (!v22)
      goto LABEL_16;
    v23 = 5;
  }
  (*(void (**)(void))(*v22 + 8 * v23))();
LABEL_16:

  v24 = *(std::__shared_weak_count **)(v11 + 8);
  if (v24)
    std::__shared_weak_count::__release_weak(v24);

  _Unwind_Resume(a1);
}

void sub_1002653D8(uint64_t a1, int a2)
{
  int v4;
  NSObject *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_weak_owners;
  unint64_t v11;
  NSObject *v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD v15[6];
  std::__shared_weak_count *v16;
  int v17;
  uint8_t buf[16];

  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 40));
  v4 = *(_DWORD *)(a1 + 240);
  if (v4 != a2)
  {
    if (v4 == 1 && a2 == 2 && *(_BYTE *)(a1 + 19) != 0)
    {
      v7 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#backoff,pausing motion detector for backoff", buf, 2u);
      }
      sub_1001CE7C0(*(_QWORD *)(a1 + 224));
      sub_1002675B0(a1);
    }
    *(_DWORD *)(a1 + 240) = a2;
    v8 = *(_QWORD *)a1;
    v9 = *(std::__shared_weak_count **)(a1 + 8);
    if (v9)
    {
      p_shared_weak_owners = (unint64_t *)&v9->__shared_weak_owners_;
      do
        v11 = __ldxr(p_shared_weak_owners);
      while (__stxr(v11 + 1, p_shared_weak_owners));
    }
    if (*(_QWORD *)(a1 + 104))
    {
      v12 = *(NSObject **)(a1 + 144);
      v15[0] = _NSConcreteStackBlock;
      v15[1] = 3321888768;
      v15[2] = sub_100267710;
      v15[3] = &unk_100810BB0;
      v15[4] = a1;
      v15[5] = v8;
      v16 = v9;
      if (v9)
      {
        v13 = (unint64_t *)&v9->__shared_weak_owners_;
        do
          v14 = __ldxr(v13);
        while (__stxr(v14 + 1, v13));
      }
      v17 = a2;
      dispatch_async(v12, v15);
      if (v16)
        std::__shared_weak_count::__release_weak(v16);
    }
    sub_1002667C0(a1);
    if (v9)
      std::__shared_weak_count::__release_weak(v9);
  }
}

void sub_100265528(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;

  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100265540(unsigned __int8 *a1)
{
  _QWORD *v2;
  const std::locale::facet *v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  const std::locale::facet *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  const std::locale::facet *v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  const std::locale::facet *v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  const std::locale::facet *v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  const std::locale::facet *v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  const std::locale::facet *v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  const std::locale::facet *v44;
  uint64_t v45;
  _QWORD *v46;
  const std::locale::facet *v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD v51[2];
  uint64_t v52;
  _QWORD v53[10];
  char v54;
  uint64_t v55;
  std::locale v56;

  sub_1000537E4((uint64_t)v51);
  v2 = sub_100054C60(&v52, (uint64_t)"{", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)));
  v3 = std::locale::use_facet(&v56, &std::ctype<char>::id);
  v4 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v3->__vftable[2].~facet_0)(v3, 10);
  std::locale::~locale(&v56);
  std::ostream::put(v2, v4);
  std::ostream::flush(v2);
  LOBYTE(v56.__locale_) = 9;
  v5 = sub_100054C60(&v52, (uint64_t)&v56, 1);
  v6 = sub_100054C60(v5, (uint64_t)"'screenStateMonitoring': ", 25);
  v7 = (_QWORD *)std::ostream::operator<<(v6, *a1);
  v8 = sub_100054C60(v7, (uint64_t)",", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v8 + *(_QWORD *)(*v8 - 24)));
  v9 = std::locale::use_facet(&v56, &std::ctype<char>::id);
  v10 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 10);
  std::locale::~locale(&v56);
  std::ostream::put(v8, v10);
  std::ostream::flush(v8);
  LOBYTE(v56.__locale_) = 9;
  v11 = sub_100054C60(&v52, (uint64_t)&v56, 1);
  v12 = sub_100054C60(v11, (uint64_t)"'stationaryStateMonitoring': ", 29);
  v13 = (_QWORD *)std::ostream::operator<<(v12, a1[1]);
  v14 = sub_100054C60(v13, (uint64_t)",", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v14 + *(_QWORD *)(*v14 - 24)));
  v15 = std::locale::use_facet(&v56, &std::ctype<char>::id);
  v16 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v15->__vftable[2].~facet_0)(v15, 10);
  std::locale::~locale(&v56);
  std::ostream::put(v14, v16);
  std::ostream::flush(v14);
  LOBYTE(v56.__locale_) = 9;
  v17 = sub_100054C60(&v52, (uint64_t)&v56, 1);
  v18 = sub_100054C60(v17, (uint64_t)"'allowLockScreenOnly': ", 23);
  v19 = (_QWORD *)std::ostream::operator<<(v18, a1[2]);
  v20 = sub_100054C60(v19, (uint64_t)",", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v20 + *(_QWORD *)(*v20 - 24)));
  v21 = std::locale::use_facet(&v56, &std::ctype<char>::id);
  v22 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v21->__vftable[2].~facet_0)(v21, 10);
  std::locale::~locale(&v56);
  std::ostream::put(v20, v22);
  std::ostream::flush(v20);
  LOBYTE(v56.__locale_) = 9;
  v23 = sub_100054C60(&v52, (uint64_t)&v56, 1);
  v24 = sub_100054C60(v23, (uint64_t)"'gravityOnlyMotion': ", 21);
  v25 = (_QWORD *)std::ostream::operator<<(v24, a1[3]);
  v26 = sub_100054C60(v25, (uint64_t)",", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v26 + *(_QWORD *)(*v26 - 24)));
  v27 = std::locale::use_facet(&v56, &std::ctype<char>::id);
  v28 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v27->__vftable[2].~facet_0)(v27, 10);
  std::locale::~locale(&v56);
  std::ostream::put(v26, v28);
  std::ostream::flush(v26);
  LOBYTE(v56.__locale_) = 9;
  v29 = sub_100054C60(&v52, (uint64_t)&v56, 1);
  v30 = sub_100054C60(v29, (uint64_t)"'provideRecommendation': ", 25);
  v31 = (_QWORD *)std::ostream::operator<<(v30, a1[4]);
  v32 = sub_100054C60(v31, (uint64_t)",", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v32 + *(_QWORD *)(*v32 - 24)));
  v33 = std::locale::use_facet(&v56, &std::ctype<char>::id);
  v34 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v33->__vftable[2].~facet_0)(v33, 10);
  std::locale::~locale(&v56);
  std::ostream::put(v32, v34);
  std::ostream::flush(v32);
  LOBYTE(v56.__locale_) = 9;
  v35 = sub_100054C60(&v52, (uint64_t)&v56, 1);
  v36 = sub_100054C60(v35, (uint64_t)"'strictStationary': ", 20);
  v37 = (_QWORD *)std::ostream::operator<<(v36, a1[5]);
  v38 = sub_100054C60(v37, (uint64_t)",", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v38 + *(_QWORD *)(*v38 - 24)));
  v39 = std::locale::use_facet(&v56, &std::ctype<char>::id);
  v40 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v39->__vftable[2].~facet_0)(v39, 10);
  std::locale::~locale(&v56);
  std::ostream::put(v38, v40);
  std::ostream::flush(v38);
  LOBYTE(v56.__locale_) = 9;
  v41 = sub_100054C60(&v52, (uint64_t)&v56, 1);
  v42 = sub_100054C60(v41, (uint64_t)"'screenStateProcessingDelaySeconds': ", 37);
  v43 = (_QWORD *)std::ostream::operator<<(v42);
  std::ios_base::getloc((const std::ios_base *)((char *)v43 + *(_QWORD *)(*v43 - 24)));
  v44 = std::locale::use_facet(&v56, &std::ctype<char>::id);
  v45 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v44->__vftable[2].~facet_0)(v44, 10);
  std::locale::~locale(&v56);
  std::ostream::put(v43, v45);
  std::ostream::flush(v43);
  v46 = sub_100054C60(&v52, (uint64_t)"}", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v46 + *(_QWORD *)(*v46 - 24)));
  v47 = std::locale::use_facet(&v56, &std::ctype<char>::id);
  v48 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v47->__vftable[2].~facet_0)(v47, 10);
  std::locale::~locale(&v56);
  std::ostream::put(v46, v48);
  std::ostream::flush(v46);
  std::stringbuf::str(v53);
  *(_QWORD *)((char *)v51
  v52 = v49;
  if (v54 < 0)
    operator delete((void *)v53[8]);
  std::streambuf::~streambuf(v53);
  return std::ios::~ios(&v55);
}

void sub_100265AE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  std::locale::~locale((std::locale *)(v9 - 56));
  sub_100053910((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100265B30(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  int v14;
  uint64_t v15;

  v2 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_QWORD *)(a1 + 152);
    v14 = 138412290;
    v15 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#backoff,Destructing backoff resume manager for session identifier %@", (uint8_t *)&v14, 0xCu);
  }
  v4 = *(void **)(a1 + 176);
  if (v4)
  {
    objc_msgSend(v4, "invalidate");
    v5 = *(void **)(a1 + 176);
    *(_QWORD *)(a1 + 176) = 0;

  }
  sub_10001AE68(a1 + 224);

  v6 = *(_QWORD **)(a1 + 136);
  if (v6 == (_QWORD *)(a1 + 112))
  {
    v7 = 4;
    v6 = (_QWORD *)(a1 + 112);
  }
  else
  {
    if (!v6)
      goto LABEL_10;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_10:
  v8 = *(_QWORD **)(a1 + 104);
  if (v8 == (_QWORD *)(a1 + 80))
  {
    v9 = 4;
    v8 = (_QWORD *)(a1 + 80);
  }
  else
  {
    if (!v8)
      goto LABEL_15;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_15:
  v10 = *(_QWORD **)(a1 + 72);
  if (v10 == (_QWORD *)(a1 + 48))
  {
    v11 = 4;
    v10 = (_QWORD *)(a1 + 48);
  }
  else
  {
    if (!v10)
      goto LABEL_20;
    v11 = 5;
  }
  (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_20:

  v12 = *(std::__shared_weak_count **)(a1 + 8);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  return a1;
}

void sub_100265CC4(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_1000131D8(a1);
  _Unwind_Resume(a1);
}

void sub_100265CD4(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  NSObject *v4;
  NSObject *v5;
  uint64_t v6;
  _QWORD block[5];
  uint8_t buf[4];
  uint64_t v9;

  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 144));
  v2 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_QWORD *)(a1 + 152);
    *(_DWORD *)buf = 138412290;
    v9 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#backoff,Invalidating backoff resume manager for session identifier %@", buf, 0xCu);
  }
  v4 = *(NSObject **)(a1 + 40);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100265E0C;
  block[3] = &unk_1007FA668;
  block[4] = a1;
  dispatch_sync(v4, block);
  v5 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    v6 = *(_QWORD *)(a1 + 152);
    *(_DWORD *)buf = 138412290;
    v9 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#backoff,Invalidated backoff resume manager for session identifier %@", buf, 0xCu);
  }
}

void sub_100265E0C(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;

  v1 = *(_QWORD **)(a1 + 32);
  v2 = (_QWORD *)v1[9];
  v1[9] = 0;
  if (v2 == v1 + 6)
  {
    v3 = 4;
    v2 = v1 + 6;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  sub_100265EC4((uint64_t)v1);
  v4 = (_QWORD *)v1[13];
  v1[13] = 0;
  if (v4 == v1 + 10)
  {
    v5 = 4;
    v4 = v1 + 10;
  }
  else
  {
    if (!v4)
      goto LABEL_11;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_11:
  v6 = v1[28];
  if (v6)
  {
    sub_1001CDD1C(v6);
    sub_100180AF4(v1 + 28);
  }
  v7 = v1[20];
  if (v7)
    dispatch_source_cancel(v7);
}

void sub_100265EC4(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *v4;
  NSObject *v5;
  uint8_t v6[16];

  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 40));
  v2 = *(_QWORD **)(a1 + 136);
  *(_QWORD *)(a1 + 136) = 0;
  if (v2 == (_QWORD *)(a1 + 112))
  {
    v3 = 4;
    v2 = (_QWORD *)(a1 + 112);
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  objc_msgSend(*(id *)(a1 + 176), "invalidate");
  v4 = *(void **)(a1 + 176);
  *(_QWORD *)(a1 + 176) = 0;

  v5 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#backoff,Stopped monitoring screen state", v6, 2u);
  }
}

void sub_100265F7C(uint64_t *a1)
{
  void *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  dispatch_time_t v8;
  NSObject *v9;
  unint64_t *v10;
  unint64_t v11;
  _QWORD v12[5];
  std::__shared_weak_count *v13;
  uint8_t buf[16];

  dispatch_assert_queue_V2((dispatch_queue_t)a1[18]);
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  if (objc_msgSend(v2, "BOOLForKey:", CFSTR("NISessionIgnoreMotionBackoff")))
  {
    *((_BYTE *)a1 + 32) = 1;
    v3 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#backoff,Not monitoring motion activity. NISessionIgnoreMotionBackoff is set to true.", buf, 2u);
    }
  }
  v5 = *a1;
  v4 = (std::__shared_weak_count *)a1[1];
  if (v4)
  {
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v7 = __ldxr(p_shared_weak_owners);
    while (__stxr(v7 + 1, p_shared_weak_owners));
  }
  v8 = dispatch_time(0, 500000000);
  v9 = a1[5];
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3321888768;
  v12[2] = sub_1002660CC;
  v12[3] = &unk_100810B18;
  v12[4] = v5;
  v13 = v4;
  if (v4)
  {
    v10 = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  dispatch_after(v8, v9, v12);
  if (v13)
    std::__shared_weak_count::__release_weak(v13);
  if (v4)
    std::__shared_weak_count::__release_weak(v4);

}

void sub_1002660BC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002660CC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint8_t v10[16];
  uint64_t v11;
  std::__shared_weak_count *v12;

  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    v12 = v3;
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 32);
      v11 = v5;
      if (v5)
      {
        v6 = qword_10085F520;
        if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)v10 = 0;
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#backoff,To start monitoring screen state and motion state", v10, 2u);
        }
        if (*(_BYTE *)(v5 + 16))
          sub_1002661D8((uint64_t *)v5);
        if (*(_BYTE *)(v5 + 17))
        {
          v7 = *(_QWORD *)(v5 + 224);
          if (v7)
          {
            if (*(_BYTE *)(v5 + 32))
              sub_1001CED84(v7);
            else
              sub_1001CE47C(v7);
          }
        }
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_1002661C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_10001AE68((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1002661D8(uint64_t *a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  NSObject *v12;
  uint8_t v13[16];
  _QWORD v14[5];
  std::__shared_weak_count *v15;

  dispatch_assert_queue_V2((dispatch_queue_t)a1[5]);
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[FBSDisplayLayoutMonitorConfiguration configurationForDefaultMainDisplayMonitor](FBSDisplayLayoutMonitorConfiguration, "configurationForDefaultMainDisplayMonitor"));
  v3 = v2;
  v4 = *a1;
  v5 = (std::__shared_weak_count *)a1[1];
  if (v5)
  {
    p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
    do
      v7 = __ldxr(p_shared_weak_owners);
    while (__stxr(v7 + 1, p_shared_weak_owners));
  }
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3321888768;
  v14[2] = sub_100266B8C;
  v14[3] = &unk_100810B80;
  v14[4] = v4;
  v15 = v5;
  if (v5)
  {
    v8 = (unint64_t *)&v5->__shared_weak_owners_;
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  objc_msgSend(v2, "setTransitionHandler:", v14);
  v10 = objc_claimAutoreleasedReturnValue(+[FBSDisplayLayoutMonitor monitorWithConfiguration:](FBSDisplayLayoutMonitor, "monitorWithConfiguration:", v3));
  v11 = (void *)a1[22];
  a1[22] = v10;

  v12 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v13 = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#backoff,Started monitoring screen state", v13, 2u);
  }
  if (v15)
    std::__shared_weak_count::__release_weak(v15);
  if (v5)
    std::__shared_weak_count::__release_weak(v5);

}

void sub_100266310(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  void *v16;
  std::__shared_weak_count *v17;

  if (a16)
    std::__shared_weak_count::__release_weak(a16);
  if (v17)
    std::__shared_weak_count::__release_weak(v17);

  _Unwind_Resume(a1);
}

uint64_t sub_10026633C(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void sub_100266360(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_100266370(uint64_t a1, unsigned __int8 *a2)
{
  NSObject *v4;
  uint8_t *v5;
  void *p_p;
  int v7;
  NSObject *v8;
  NSObject *v9;
  _QWORD v10[5];
  void *__p;
  char v12;
  uint8_t v13[8];
  char v14;
  uint8_t buf[4];
  uint8_t *v16;
  __int16 v17;
  void *v18;

  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 144));
  v4 = (id)qword_10085F520;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    sub_100265540((unsigned __int8 *)(a1 + 16));
    sub_100266564(a2);
    v5 = v13;
    if (v14 < 0)
      v5 = *(uint8_t **)v13;
    if (v12 >= 0)
      p_p = &__p;
    else
      p_p = __p;
    *(_DWORD *)buf = 136315394;
    v16 = v5;
    v17 = 2080;
    v18 = p_p;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#backoff,Configuration update.\nCurrent configuration = \n%sConfiguration update =\n%s", buf, 0x16u);
    if (v12 < 0)
      operator delete(__p);
    if (v14 < 0)
      operator delete(*(void **)v13);
  }

  v7 = *a2;
  if (v7 != *(unsigned __int8 *)(a1 + 18))
  {
    *(_BYTE *)(a1 + 18) = v7;
    v8 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#backoff,Config changed. Generating new recommendation", v13, 2u);
    }
    v9 = *(NSObject **)(a1 + 40);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_1002667B8;
    v10[3] = &unk_1007FA668;
    v10[4] = a1;
    dispatch_async(v9, v10);
  }
}

void sub_100266534(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;

  if (a22 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

uint64_t sub_100266564(unsigned __int8 *a1)
{
  _QWORD *v2;
  const std::locale::facet *v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  const std::locale::facet *v9;
  uint64_t v10;
  _QWORD *v11;
  const std::locale::facet *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[2];
  uint64_t v17;
  _QWORD v18[10];
  char v19;
  uint64_t v20;
  std::locale v21;

  sub_1000537E4((uint64_t)v16);
  v2 = sub_100054C60(&v17, (uint64_t)"{", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)));
  v3 = std::locale::use_facet(&v21, &std::ctype<char>::id);
  v4 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v3->__vftable[2].~facet_0)(v3, 10);
  std::locale::~locale(&v21);
  std::ostream::put(v2, v4);
  std::ostream::flush(v2);
  LOBYTE(v21.__locale_) = 9;
  v5 = sub_100054C60(&v17, (uint64_t)&v21, 1);
  v6 = sub_100054C60(v5, (uint64_t)"'allowLockScreenOnly': ", 23);
  v7 = (_QWORD *)std::ostream::operator<<(v6, *a1);
  v8 = sub_100054C60(v7, (uint64_t)",", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v8 + *(_QWORD *)(*v8 - 24)));
  v9 = std::locale::use_facet(&v21, &std::ctype<char>::id);
  v10 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 10);
  std::locale::~locale(&v21);
  std::ostream::put(v8, v10);
  std::ostream::flush(v8);
  v11 = sub_100054C60(&v17, (uint64_t)"}", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v11 + *(_QWORD *)(*v11 - 24)));
  v12 = std::locale::use_facet(&v21, &std::ctype<char>::id);
  v13 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
  std::locale::~locale(&v21);
  std::ostream::put(v11, v13);
  std::ostream::flush(v11);
  std::stringbuf::str(v18);
  *(_QWORD *)((char *)v16
  v17 = v14;
  if (v19 < 0)
    operator delete((void *)v18[8]);
  std::streambuf::~streambuf(v18);
  return std::ios::~ios(&v20);
}

void sub_10026678C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  std::locale::~locale((std::locale *)(v9 - 56));
  sub_100053910((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1002667B8(uint64_t a1)
{
  sub_1002667C0(*(_QWORD *)(a1 + 32));
}

void sub_1002667C0(uint64_t a1)
{
  unint64_t v2;
  int v3;
  NSObject *v4;
  char *v5;
  _BYTE *v6;
  double v7;
  NSObject *v8;
  char *v9;
  _BYTE *v10;
  int v11;
  void **v12;
  void **v13;
  void **v14;
  uint64_t v15;
  double v16;
  void *v17[2];
  char v18;
  void *v19[2];
  char v20;
  _BYTE buf[12];
  char v22;
  _BYTE __p[12];
  __int16 v24;
  double v25;
  __int16 v26;
  void **v27;
  __int16 v28;
  void **v29;
  __int16 v30;
  uint64_t v31;

  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 40));
  if (*(_BYTE *)(a1 + 20))
  {
    v2 = sub_10026718C(a1);
    if ((v2 & 0xFF00000000) != 0)
    {
      v3 = v2;
      if (*(_BYTE *)(a1 + 212) && *(_DWORD *)(a1 + 208) == (_DWORD)v2)
      {
        v4 = (id)qword_10085F520;
        if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
        {
          if (v3)
            v5 = "Resume";
          else
            v5 = "Suspend";
          sub_10000BF04(__p, v5);
          if (v26 >= 0)
            v6 = __p;
          else
            v6 = *(_BYTE **)__p;
          *(_DWORD *)buf = 136315138;
          *(_QWORD *)&buf[4] = v6;
          _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#backoff,new recommendation %s is same as current recommendation, return", buf, 0xCu);
          if (SHIBYTE(v26) < 0)
            operator delete(*(void **)__p);
        }

      }
      else
      {
        *(_DWORD *)(a1 + 208) = v2;
        *(_BYTE *)(a1 + 212) = 1;
        ++*(_QWORD *)(a1 + 248);
        v7 = sub_10000883C();
        v8 = (id)qword_10085F520;
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        {
          if (!*(_BYTE *)(a1 + 212))
            sub_10000BA44();
          if (*(_DWORD *)(a1 + 208))
            v9 = "Resume";
          else
            v9 = "Suspend";
          v10 = buf;
          sub_10000BF04(buf, v9);
          if (v22 < 0)
            v10 = *(_BYTE **)buf;
          sub_10000BF04(v19, off_100810D70[*(int *)(a1 + 184)]);
          v11 = v20;
          v12 = (void **)v19[0];
          sub_1001CD9B8(*(_DWORD *)(a1 + 240), v17);
          v13 = v19;
          if (v11 < 0)
            v13 = v12;
          if (v18 >= 0)
            v14 = v17;
          else
            v14 = (void **)v17[0];
          v15 = *(_QWORD *)(a1 + 248);
          *(_DWORD *)__p = 136316162;
          *(_QWORD *)&__p[4] = v10;
          v24 = 2048;
          v25 = v7;
          v26 = 2080;
          v27 = v13;
          v28 = 2080;
          v29 = v14;
          v30 = 2048;
          v31 = v15;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#backoff,Generated tentative recommendation %s at time %f with screen state %s, motion state %s, event_id %lld", __p, 0x34u);
          if (v18 < 0)
            operator delete(v17[0]);
          if (v20 < 0)
            operator delete(v19[0]);
          if (v22 < 0)
            operator delete(*(void **)buf);
        }

        if (!*(_BYTE *)(a1 + 200))
          goto LABEL_38;
        v16 = v7 - *(double *)(a1 + 192);
        if (v16 < 0.0)
          sub_1003E2E10();
        if (*(_QWORD *)(a1 + 160) || v16 < *(double *)(a1 + 24))
          sub_100267BAC(a1);
        else
LABEL_38:
          sub_1002678DC((uint64_t *)a1);
      }
    }
  }
}

void sub_100266AA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  void *v23;

  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);

  _Unwind_Resume(a1);
}

void sub_100266AF4(uint64_t a1, void *a2)
{
  NSObject *v2;
  id v3;
  _QWORD v4[6];

  if (*(_QWORD *)(a1 + 224))
  {
    v2 = *(NSObject **)(a1 + 40);
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472;
    v4[2] = sub_100266B68;
    v4[3] = &unk_100809CD8;
    v4[4] = a2;
    v4[5] = a1;
    v3 = a2;
    dispatch_async(v2, v4);

  }
}

void sub_100266B68(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 40);
  v2 = *(_QWORD *)(v1 + 224);
  if (v2)
  {
    if (!*(_BYTE *)(v1 + 32))
      sub_1001CDE94(v2, *(void **)(a1 + 32));
  }
}

void sub_100266B8C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  NSObject *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_weak_owners;
  unint64_t v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  _QWORD block[4];
  id v21;
  id v22;
  id v23;
  uint64_t v24;
  std::__shared_weak_count *v25;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  v10 = *(std::__shared_weak_count **)(a1 + 40);
  if (v10)
  {
    v11 = std::__shared_weak_count::lock(v10);
    if (v11)
    {
      v12 = v11;
      v13 = *(_QWORD *)(a1 + 32);
      if (v13)
      {
        v14 = *(NSObject **)(v13 + 40);
        block[0] = _NSConcreteStackBlock;
        block[1] = 3321888768;
        block[2] = sub_100266CD0;
        block[3] = &unk_100810B50;
        v15 = *(std::__shared_weak_count **)(a1 + 40);
        v24 = v13;
        v25 = v15;
        if (v15)
        {
          p_shared_weak_owners = (unint64_t *)&v15->__shared_weak_owners_;
          do
            v17 = __ldxr(p_shared_weak_owners);
          while (__stxr(v17 + 1, p_shared_weak_owners));
        }
        v21 = v7;
        v22 = v8;
        v23 = v9;
        dispatch_async(v14, block);

        if (v25)
          std::__shared_weak_count::__release_weak(v25);
      }
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v19 = __ldaxr(p_shared_owners);
      while (__stlxr(v19 - 1, p_shared_owners));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
  }

}

void sub_100266CD0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 64);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 56);
      if (v5)
        sub_100266D74(v5, *(void **)(a1 + 32), *(void **)(a1 + 40), *(void **)(a1 + 48));
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_100266D60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10001AE68((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_100266D74(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  void *v9;
  id v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  void *i;
  void *v16;
  unsigned __int8 v17;
  int v18;
  NSObject *v19;
  NSObject *v20;
  void **v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_weak_owners;
  unint64_t v25;
  int v26;
  NSObject *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  void *v33;
  id v34;
  _QWORD block[6];
  std::__shared_weak_count *v36;
  int v37;
  void *__p[2];
  char v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint8_t buf[4];
  void **v45;
  _BYTE v46[128];

  v32 = a2;
  v7 = a3;
  v33 = v7;
  v34 = a4;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 40));
  if (v7)
  {
    v8 = objc_msgSend(v7, "displayBacklightLevel", v32, v7, v34);
    v43 = 0u;
    v41 = 0u;
    v42 = 0u;
    v40 = 0u;
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "elements"));
    v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v40, v46, 16);
    v11 = (uint64_t)v8;
    if (v10)
    {
      v12 = 0;
      v13 = *(_QWORD *)v41;
      v14 = FBSDisplayLayoutElementLockScreenIdentifier;
      do
      {
        for (i = 0; i != v10; i = (char *)i + 1)
        {
          if (*(_QWORD *)v41 != v13)
            objc_enumerationMutation(v9);
          v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)&v40 + 1) + 8 * (_QWORD)i), "identifier"));
          v17 = objc_msgSend(v16, "isEqualToString:", v14);

          v12 |= v17;
        }
        v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v40, v46, 16);
      }
      while (v10);

      if ((v12 & 1) != 0)
        v18 = 1;
      else
        v18 = 2;
    }
    else
    {

      v18 = 2;
    }
    if (v11 <= 0)
      v18 = 3;
    if (*(_DWORD *)(a1 + 184) != v18)
    {
      *(_DWORD *)(a1 + 184) = v18;
      v20 = (id)qword_10085F520;
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        sub_10000BF04(__p, off_100810D70[*(int *)(a1 + 184)]);
        v21 = v39 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)buf = 136315138;
        v45 = v21;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "#backoff,New screen state is %s", buf, 0xCu);
        if (v39 < 0)
          operator delete(__p[0]);
      }

      v22 = *(_QWORD *)a1;
      v23 = *(std::__shared_weak_count **)(a1 + 8);
      if (v23)
      {
        p_shared_weak_owners = (unint64_t *)&v23->__shared_weak_owners_;
        do
          v25 = __ldxr(p_shared_weak_owners);
        while (__stxr(v25 + 1, p_shared_weak_owners));
      }
      v26 = *(_DWORD *)(a1 + 184);
      if (*(_QWORD *)(a1 + 136))
      {
        v27 = *(NSObject **)(a1 + 144);
        block[0] = _NSConcreteStackBlock;
        block[1] = 3321888768;
        block[2] = sub_100267440;
        block[3] = &unk_100810BB0;
        block[4] = a1;
        block[5] = v22;
        v36 = v23;
        if (v23)
        {
          v28 = (unint64_t *)&v23->__shared_weak_owners_;
          do
            v29 = __ldxr(v28);
          while (__stxr(v29 + 1, v28));
        }
        v37 = v26;
        dispatch_async(v27, block);
        if (v36)
          std::__shared_weak_count::__release_weak(v36);
        v26 = *(_DWORD *)(a1 + 184);
      }
      if ((v26 - 1) >= 2)
      {
        if (v26 == 3)
        {
          v31 = *(_QWORD *)(a1 + 224);
          if (v31)
          {
            if (!*(_BYTE *)(a1 + 32))
            {
              sub_1001CE7C0(v31);
              sub_10026752C(a1);
            }
          }
        }
      }
      else
      {
        v30 = *(_QWORD *)(a1 + 224);
        if (v30 && !*(_BYTE *)(a1 + 32))
          sub_1001CEAD8(v30);
      }
      sub_1002667C0(a1);
      if (v23)
        std::__shared_weak_count::__release_weak(v23);
    }
  }
  else
  {
    v19 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
      sub_1003E2E38(v19);
    *(_DWORD *)(a1 + 184) = 0;
  }

}

void sub_1002670E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11)
{
  void *v11;

  _Unwind_Resume(a1);
}

uint64_t sub_100267158(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(result + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(result + 64) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void sub_10026717C(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 64);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

unint64_t sub_10026718C(uint64_t a1)
{
  NSObject *v2;
  int v3;
  void **v4;
  void **v5;
  void **v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  NSObject *v13;
  NSObject *v14;
  void *__p[2];
  char v16;
  void *v17[2];
  char v18;
  uint8_t buf[4];
  const char *v20;
  __int16 v21;
  _BYTE v22[14];

  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 40));
  v2 = (id)qword_10085F520;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    sub_10000BF04(v17, off_100810D70[*(int *)(a1 + 184)]);
    v3 = v18;
    v4 = (void **)v17[0];
    sub_1001CD9B8(*(_DWORD *)(a1 + 240), __p);
    v5 = v17;
    if (v3 < 0)
      v5 = v4;
    if (v16 >= 0)
      v6 = __p;
    else
      v6 = (void **)__p[0];
    v7 = *(unsigned __int8 *)(a1 + 32);
    *(_DWORD *)buf = 136315650;
    v20 = (const char *)v5;
    v21 = 2080;
    *(_QWORD *)v22 = v6;
    *(_WORD *)&v22[8] = 1024;
    *(_DWORD *)&v22[10] = v7;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#backoff,getRecommendation() with current screen state is %s, current motion state is %s, ignore motion is %d", buf, 0x1Cu);
    if (v16 < 0)
      operator delete(__p[0]);
    if (v18 < 0)
      operator delete(v17[0]);
  }

  if (!*(_BYTE *)(a1 + 32) || *(_BYTE *)(a1 + 18) || (v8 = *(int *)(a1 + 184), v8 >= 4))
  {
    v9 = *(unsigned int *)(a1 + 184);
    v11 = v9;
    switch((int)v9)
    {
      case 0:
        return v11 | v9;
      case 1:
        v9 = (uint64_t)&_mh_execute_header;
        v11 = 1;
        return v11 | v9;
      case 2:
        if (*(_BYTE *)(a1 + 18))
          goto LABEL_18;
        v8 = *(int *)(a1 + 240);
        if (v8 >= 3)
          goto LABEL_23;
        v9 = qword_100474760[v8];
        v10 = &unk_100474778;
        break;
      case 3:
LABEL_18:
        v11 = 0;
        v9 = (uint64_t)&_mh_execute_header;
        return v11 | v9;
      default:
LABEL_23:
        v13 = qword_10085F520;
        if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_FAULT))
          sub_1003E2E78(v13);
        v14 = qword_10085F520;
        if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136315650;
          v20 = "/Library/Caches/com.apple.xbs/Sources/Proximity/Daemon/Services/NearbyInteraction/BackoffResumeManager/N"
                "IServerBackoffResumeManager.mm";
          v21 = 1024;
          *(_DWORD *)v22 = 263;
          *(_WORD *)&v22[4] = 2080;
          *(_QWORD *)&v22[6] = "_getRecommendation";
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "#backoff,%s:%d: assertion failure in %s", buf, 0x1Cu);
        }
        abort();
    }
  }
  else
  {
    v9 = qword_100474720[v8];
    v10 = &unk_100474740;
  }
  v11 = v10[v8];
  return v11 | v9;
}

void sub_100267410(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;

  if (a17 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_100267440(uint64_t a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  int v9;

  v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 32);
    v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = v4;
      if (*(_QWORD *)(a1 + 40))
      {
        v6 = *(_QWORD *)(v3 + 136);
        if (v6)
        {
          v9 = *(_DWORD *)(a1 + 56);
          (*(void (**)(uint64_t, int *))(*(_QWORD *)v6 + 48))(v6, &v9);
        }
      }
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_1002674E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10001AE68((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1002674F8(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void sub_10026751C(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_10026752C(uint64_t a1)
{
  NSObject *v2;
  void *v3;
  uint8_t v4[16];

  if (*(_QWORD *)(a1 + 168))
  {
    v2 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#backoff,cancelling boost backoff timer", v4, 2u);
    }
    dispatch_source_cancel(*(dispatch_source_t *)(a1 + 168));
    v3 = *(void **)(a1 + 168);
    *(_QWORD *)(a1 + 168) = 0;

  }
}

void sub_1002675B0(uint64_t a1)
{
  dispatch_source_t v2;
  void *v3;
  NSObject *v4;
  dispatch_time_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  NSObject *v10;
  unint64_t *v11;
  unint64_t v12;
  NSObject *v13;
  uint8_t v14[8];
  _QWORD handler[6];
  std::__shared_weak_count *v16;

  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 40));
  sub_10026752C(a1);
  v2 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, *(dispatch_queue_t *)(a1 + 40));
  v3 = *(void **)(a1 + 168);
  *(_QWORD *)(a1 + 168) = v2;

  v4 = *(NSObject **)(a1 + 168);
  v5 = dispatch_time(0, llround(6.0e10));
  dispatch_source_set_timer(v4, v5, 0xFFFFFFFFFFFFFFFFLL, 0x989680uLL);
  v6 = *(_QWORD *)a1;
  v7 = *(std::__shared_weak_count **)(a1 + 8);
  if (v7)
  {
    p_shared_weak_owners = (unint64_t *)&v7->__shared_weak_owners_;
    do
      v9 = __ldxr(p_shared_weak_owners);
    while (__stxr(v9 + 1, p_shared_weak_owners));
  }
  v10 = *(NSObject **)(a1 + 168);
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 3321888768;
  handler[2] = sub_1002677D8;
  handler[3] = &unk_100810BE0;
  handler[4] = a1;
  handler[5] = v6;
  v16 = v7;
  if (v7)
  {
    v11 = (unint64_t *)&v7->__shared_weak_owners_;
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  dispatch_source_set_event_handler(v10, handler);
  dispatch_resume(*(dispatch_object_t *)(a1 + 168));
  v13 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v14 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#backoff,Re-armed stationary backoff timer.", v14, 2u);
  }
  if (v16)
    std::__shared_weak_count::__release_weak(v16);
  if (v7)
    std::__shared_weak_count::__release_weak(v7);
}

void sub_100267710(uint64_t a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  int v9;

  v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 32);
    v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = v4;
      if (*(_QWORD *)(a1 + 40) && *(_QWORD *)(v3 + 224))
      {
        v9 = *(_DWORD *)(a1 + 56);
        v6 = *(_QWORD *)(v3 + 104);
        if (!v6)
          sub_100027BC4();
        (*(void (**)(uint64_t, int *))(*(_QWORD *)v6 + 48))(v6, &v9);
      }
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_1002677C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10001AE68((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1002677D8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  NSObject *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint8_t v9[16];
  std::__shared_weak_count *v11;

  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    v3 = a1[4];
    v4 = std::__shared_weak_count::lock(v2);
    v11 = v4;
    if (v4)
    {
      v5 = v4;
      if (a1[5])
      {
        v6 = qword_10085F520;
        if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)v9 = 0;
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#backoff,boost backoff ended, re-enabling motion detector", v9, 2u);
        }
        sub_1001CEAD8(*(_QWORD *)(v3 + 224));
      }
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_1002678A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_10001AE68((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_1002678BC@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  char *v2;

  if (a1)
    v2 = "Resume";
  else
    v2 = "Suspend";
  return sub_10000BF04(a2, v2);
}

void sub_1002678DC(uint64_t *a1)
{
  int v2;
  int v3;
  uint64_t v4;
  const char *v5;
  NSObject *v6;
  uint64_t v7;
  NSObject *v8;
  char *v9;
  uint8_t *v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_weak_owners;
  unint64_t v16;
  NSObject *v17;
  unint64_t *v18;
  unint64_t v19;
  _QWORD block[6];
  std::__shared_weak_count *v21;
  double v22;
  int v23;
  uint8_t buf[8];
  char v25;
  uint8_t v26[4];
  uint8_t *v27;
  __int16 v28;
  uint64_t v29;

  dispatch_assert_queue_V2((dispatch_queue_t)a1[5]);
  if (!*((_BYTE *)a1 + 20))
    return;
  if (!*((_BYTE *)a1 + 212))
    sub_1003E2EB8();
  v2 = *((_DWORD *)a1 + 52);
  if (!*((_BYTE *)a1 + 220))
  {
    if (v2 == 1)
      goto LABEL_11;
LABEL_15:
    v7 = qword_10085F520;
    if (a1[9])
    {
      v8 = (id)qword_10085F520;
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        v9 = v2 ? "Resume" : "Suspend";
        sub_10000BF04(buf, v9);
        v10 = v25 >= 0 ? buf : *(uint8_t **)buf;
        v11 = a1[31];
        *(_DWORD *)v26 = 136315394;
        v27 = v10;
        v28 = 2048;
        v29 = v11;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#backoff,To deliver recommendation %s with event id %lld", v26, 0x16u);
        if (v25 < 0)
          operator delete(*(void **)buf);
      }

      *((_DWORD *)a1 + 54) = v2;
      *((_BYTE *)a1 + 220) = 1;
      v12 = sub_10000883C();
      *((double *)a1 + 24) = v12;
      *((_BYTE *)a1 + 200) = 1;
      v13 = *a1;
      v14 = (std::__shared_weak_count *)a1[1];
      if (v14)
      {
        p_shared_weak_owners = (unint64_t *)&v14->__shared_weak_owners_;
        do
          v16 = __ldxr(p_shared_weak_owners);
        while (__stxr(v16 + 1, p_shared_weak_owners));
      }
      v17 = a1[18];
      block[0] = _NSConcreteStackBlock;
      block[1] = 3321888768;
      block[2] = sub_100267D1C;
      block[3] = &unk_100810C10;
      block[4] = a1;
      block[5] = v13;
      v21 = v14;
      if (v14)
      {
        v18 = (unint64_t *)&v14->__shared_weak_owners_;
        do
          v19 = __ldxr(v18);
        while (__stxr(v19 + 1, v18));
      }
      v22 = v12;
      v23 = v2;
      dispatch_async(v17, block);
      if (v21)
        std::__shared_weak_count::__release_weak(v21);
      if (v14)
        std::__shared_weak_count::__release_weak(v14);
    }
    else if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      v5 = "#backoff,Delivering recommendation fails because of invalid BackoffResumeHandler";
      v6 = v7;
      goto LABEL_14;
    }
    return;
  }
  v3 = *((_DWORD *)a1 + 54);
  if (v3 == v2)
  {
    v4 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      v5 = "#backoff,Not delivering a duplicate recommendation.";
LABEL_13:
      v6 = v4;
LABEL_14:
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, v5, buf, 2u);
      return;
    }
    return;
  }
  if (v2 != 1 || !v3)
    goto LABEL_15;
LABEL_11:
  v4 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    v5 = "#backoff,Should not give a 'resume' decision if never told to 'backoff'. Return.";
    goto LABEL_13;
  }
}

void sub_100267B94(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100267BAC(uint64_t a1)
{
  dispatch_source_t v2;
  void *v3;
  NSObject *v4;
  dispatch_time_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  uint64_t v10;
  NSObject *v11;
  unint64_t *v12;
  unint64_t v13;
  NSObject *v14;
  uint8_t v15[16];
  _QWORD handler[6];
  std::__shared_weak_count *v17;
  uint64_t v18;

  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 40));
  sub_100267E1C(a1);
  v2 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, *(dispatch_queue_t *)(a1 + 40));
  v3 = *(void **)(a1 + 160);
  *(_QWORD *)(a1 + 160) = v2;

  v4 = *(NSObject **)(a1 + 160);
  v5 = dispatch_time(0, llround(*(double *)(a1 + 24) * 1000000000.0));
  dispatch_source_set_timer(v4, v5, 0xFFFFFFFFFFFFFFFFLL, 0x989680uLL);
  v6 = *(_QWORD *)a1;
  v7 = *(std::__shared_weak_count **)(a1 + 8);
  if (v7)
  {
    p_shared_weak_owners = (unint64_t *)&v7->__shared_weak_owners_;
    do
      v9 = __ldxr(p_shared_weak_owners);
    while (__stxr(v9 + 1, p_shared_weak_owners));
  }
  v10 = *(_QWORD *)(a1 + 248);
  v11 = *(NSObject **)(a1 + 160);
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 3321888768;
  handler[2] = sub_100267EA0;
  handler[3] = &unk_100810C40;
  handler[4] = a1;
  handler[5] = v6;
  v17 = v7;
  if (v7)
  {
    v12 = (unint64_t *)&v7->__shared_weak_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  v18 = v10;
  dispatch_source_set_event_handler(v11, handler);
  dispatch_resume(*(dispatch_object_t *)(a1 + 160));
  v14 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#backoff,Re-armed delayed processing timer.", v15, 2u);
  }
  if (v17)
    std::__shared_weak_count::__release_weak(v17);
  if (v7)
    std::__shared_weak_count::__release_weak(v7);
}

void sub_100267D1C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 32);
    v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = v4;
      if (*(_QWORD *)(a1 + 40) && *(_QWORD *)(v3 + 72))
        sub_100267DDC(v3 + 48, *(_DWORD *)(a1 + 64), *(double *)(a1 + 56));
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_100267DC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10001AE68((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100267DDC(uint64_t a1, int a2, double a3)
{
  uint64_t v3;
  int v5;
  double v6;

  v6 = a3;
  v5 = a2;
  v3 = *(_QWORD *)(a1 + 24);
  if (!v3)
    sub_100027BC4();
  return (*(uint64_t (**)(uint64_t, double *, int *))(*(_QWORD *)v3 + 48))(v3, &v6, &v5);
}

void sub_100267E1C(uint64_t a1)
{
  NSObject *v2;
  void *v3;
  uint8_t v4[16];

  if (*(_QWORD *)(a1 + 160))
  {
    v2 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#backoff,Canceling delayed processing timer.", v4, 2u);
    }
    dispatch_source_cancel(*(dispatch_source_t *)(a1 + 160));
    v3 = *(void **)(a1 + 160);
    *(_QWORD *)(a1 + 160) = 0;

  }
}

void sub_100267EA0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  uint64_t *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    v3 = (uint64_t *)a1[4];
    v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = v4;
      if (a1[5])
      {
        if (a1[7] == v3[31])
          sub_100267E1C((uint64_t)v3);
        sub_1002678DC(v3);
      }
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_100267F54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10001AE68((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_100267F68(void **a1@<X1>, uint64_t a2@<X2>, char *a3@<X3>, unsigned __int8 *a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v10;

  v10 = operator new(0x130uLL);
  sub_100267FE8(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  sub_10001B020((uint64_t)a5, v10 + 3, (uint64_t)(v10 + 3));
}

void sub_100267FD4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_100267FE8(_QWORD *a1, void **a2, uint64_t a3, char *a4, unsigned __int8 *a5)
{
  char v7;

  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_100810C80;
  sub_10026809C((uint64_t)&v7, (uint64_t)(a1 + 3), a2, a3, a4, a5);
  return a1;
}

void sub_10026803C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_100268050(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_100810C80;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100268060(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_100810C80;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_100268090(uint64_t a1)
{
  return sub_1001CDD18(a1 + 24);
}

_QWORD *sub_10026809C(uint64_t a1, uint64_t a2, void **a3, uint64_t a4, char *a5, unsigned __int8 *a6)
{
  void *v10;
  char *v11;
  _QWORD *result;
  uint64_t v13;
  _BYTE v14[24];
  _BYTE *v15;

  v10 = *a3;
  v11 = (char *)operator new(0x20uLL);
  *(_QWORD *)v11 = off_100810CD0;
  *(_OWORD *)(v11 + 8) = *(_OWORD *)a4;
  *((_QWORD *)v11 + 3) = *(_QWORD *)(a4 + 16);
  v15 = v11;
  sub_1001CDC18(a2, v10, (uint64_t)v14, *a5, *a6);
  result = v15;
  if (v15 == v14)
  {
    v13 = 4;
    result = v14;
  }
  else
  {
    if (!v15)
      return result;
    v13 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v13))();
}

void sub_10026817C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_1002681B8()
{
  operator delete();
}

__n128 sub_1002681CC(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = off_100810CD0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_10026820C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = off_100810CD0;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_100268234(_QWORD *a1, unsigned int *a2)
{
  uint64_t v2;
  uint64_t (*v3)(_QWORD *, _QWORD);
  _QWORD *v4;

  v2 = a1[2];
  v3 = (uint64_t (*)(_QWORD *, _QWORD))a1[1];
  v4 = (_QWORD *)(a1[3] + (v2 >> 1));
  if ((v2 & 1) != 0)
    v3 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v3);
  return v3(v4, *a2);
}

uint64_t sub_100268254(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100268290()
{
}

void sub_100268524(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1002685AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1002686D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_10026876C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_100268810(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1002688B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_100268960(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_100268A7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_100268BE0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_100268D0C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_100268E08(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

const __CFString *sub_100268EE4(uint64_t a1)
{
  if (!a1)
    return CFSTR("Default");
  if (a1 != 10)
    sub_1003E2EE0();
  return CFSTR("Large");
}

void sub_100268FEC(void *a1@<X0>, uint64_t a2@<X8>)
{
  double v2;
  double v3;
  double v4;
  id v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  unint64_t v11;
  int v12;
  float v13;
  float v14;
  float v15;
  float32x4_t v16;
  int v17;
  int v18;
  char v19;
  uint32x4_t v20;
  float v21;
  simd_float3 v22;
  float v23;
  int v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  __int16 v30;
  unsigned __int16 v31;
  float v32;
  int v33;
  float v34;
  double v35;
  uint64_t v36;
  void *v37;
  id v38;
  simd_float3 v39;
  float32x4_t v40;
  float v41;
  uint64_t v42;
  void *v43;
  void *__p;
  _BYTE *v45;
  uint64_t v46;

  v6 = a1;
  __p = 0;
  v45 = 0;
  v46 = 0;
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "discoveryToken"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "rawToken"));

  v43 = v8;
  v9 = objc_msgSend(v8, "length");
  v10 = 0;
  if (v9)
  {
    sub_10003F150((unint64_t *)&__p, (size_t)v9);
    v10 = __p;
  }
  else if (v45 != __p)
  {
    v45 = __p;
  }
  objc_msgSend(v8, "getBytes:length:", v10, objc_msgSend(v8, "length"));
  v11 = (unint64_t)objc_msgSend(v6, "relationship") - 1;
  if (v11 >= 8)
    v12 = 0;
  else
    v12 = dword_100474800[v11];
  objc_msgSend(v6, "distance");
  v14 = v13;
  v15 = NINearbyObjectDistanceNotAvailable;
  objc_msgSend(v6, "direction");
  v40 = v16;
  v39 = NINearbyObjectDirectionNotAvailable;
  if (v14 == v15)
  {
    v19 = 0;
    v18 = 0;
  }
  else
  {
    objc_msgSend(v6, "distance");
    v18 = v17;
    v19 = 1;
  }
  v20 = (uint32x4_t)vceqq_f32(v40, (float32x4_t)v39);
  v20.i32[3] = v20.i32[2];
  if ((vminvq_u32(v20) & 0x80000000) != 0)
  {
    v24 = 0;
  }
  else
  {
    objc_msgSend(v6, "direction");
    v41 = v21;
    objc_msgSend(v6, "direction");
    v39 = v22;
    objc_msgSend(v6, "direction");
    v2 = v41;
    v3 = v39.f32[1];
    v4 = v23;
    v24 = 1;
  }
  objc_msgSend(v6, "signalStrength", *(_OWORD *)&v39);
  if (v25 == *(double *)&NINearbyObjectSignalStrengthNotAvailable)
  {
    v28 = 0;
    v27 = 0;
  }
  else
  {
    objc_msgSend(v6, "signalStrength");
    v27 = v26;
    v28 = 1;
  }
  v29 = objc_msgSend(v6, "remoteTxAntennaMask");
  if (v29 == NINearbyObjectRemoteTxAntennaMaskNotAvailable)
  {
    v30 = 0;
    v31 = 0;
  }
  else
  {
    v31 = (unsigned __int16)objc_msgSend(v6, "remoteTxAntennaMask");
    v30 = 1;
  }
  objc_msgSend(v6, "boundedRegionRange");
  v42 = v28;
  v33 = v12;
  if (v32 == *(float *)&NINearbyObjectRegionBoundaryRangeNotAvailable)
  {
    v36 = 0;
    v35 = 0.0;
  }
  else
  {
    objc_msgSend(v6, "boundedRegionRange");
    v35 = v34;
    v36 = 1;
  }
  v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "discoveryToken"));
  v38 = objc_msgSend(v37, "hash");
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  sub_1001530EC((_QWORD *)a2, __p, (uint64_t)v45, v45 - (_BYTE *)__p);
  *(_QWORD *)(a2 + 24) = v38;
  *(_DWORD *)(a2 + 32) = v33;
  *(_DWORD *)(a2 + 36) = v18;
  *(_BYTE *)(a2 + 40) = v19;
  *(_DWORD *)(a2 + 48) = v24;
  *(double *)(a2 + 56) = v2;
  *(double *)(a2 + 64) = v3;
  *(double *)(a2 + 72) = v4;
  *(_BYTE *)(a2 + 80) = v24;
  *(_QWORD *)(a2 + 88) = v27;
  *(_QWORD *)(a2 + 96) = v42;
  *(_WORD *)(a2 + 104) = v31 | (v30 << 8);
  *(_OWORD *)(a2 + 112) = 0u;
  *(_OWORD *)(a2 + 128) = 0u;
  *(double *)(a2 + 144) = v35;
  *(_QWORD *)(a2 + 152) = v36;

  if (__p)
  {
    v45 = __p;
    operator delete(__p);
  }

}

void sub_1002692EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *__p, uint64_t a15)
{
  void *v15;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_100269364()
{
  void *v0;
  _OWORD *v6;
  _OWORD *v7;
  __int128 v8;
  unint64_t v9;
  __int128 v10;
  uint64_t v11;

  v0 = objc_autoreleasePoolPush();
  v10 = xmmword_100474798;
  v11 = 0x300000003;
  sub_100182284((uint64_t)&unk_10085A6D0, (int *)&v10, 3);
  xmmword_10085A6E8 = xmmword_10046E050;
  unk_10085A6F8 = xmmword_10046E060;
  qword_10085A710 = 0;
  unk_10085A718 = 0;
  qword_10085A708 = 0x3FD999999999999ALL;
  unk_10085A720 = xmmword_10046E070;
  dword_10085A730 = 5;
  qword_10085A738 = 0x4000000000000000;
  dword_10085A740 = 5;
  byte_10085A748 = 0;
  unk_10085A74C = 0x30000000ALL;
  xmmword_10085A758 = xmmword_10046E080;
  unk_10085A768 = xmmword_10046E090;
  xmmword_10085A778 = xmmword_10046E0A0;
  qword_10085A788 = 0x3FE3333333333333;
  dword_10085A790 = 3;
  xmmword_10085A798 = xmmword_10046E0B0;
  unk_10085A7A8 = xmmword_10046E090;
  xmmword_10085A7B8 = xmmword_10046E080;
  qword_10085A7C8 = 0x3FE3333333333333;
  byte_10085A7D0 = 0;
  xmmword_10085A7D8 = xmmword_10046E0C0;
  unk_10085A7E8 = xmmword_10046E0D0;
  __asm { FMOV            V0.2D, #1.0 }
  v8 = _Q0;
  xmmword_10085A7F8 = _Q0;
  qword_10085A808 = 0xBFD3333333333333;
  xmmword_10085A810 = xmmword_10046E0E0;
  qword_10085A820 = 0x3E99999A40000000;
  xmmword_10085A828 = xmmword_10046E060;
  qword_10085A840 = 0;
  unk_10085A848 = 0;
  qword_10085A838 = 0x3FD999999999999ALL;
  xmmword_10085A850 = xmmword_10046E070;
  dword_10085A860 = 5;
  qword_10085A868 = 0x4000000000000000;
  dword_10085A870 = 4;
  qword_10085A878 = 0x300000008;
  qword_10085A880 = 0xC04E800000000000;
  v9 = 0xC04E800000000000;
  sub_10018252C((uint64_t)algn_10085A888, (double *)&v9, 1);
  xmmword_10085A8A0 = xmmword_10046E0F0;
  qword_10085A8B0 = 0x4024000000000000;
  dword_10085A8B8 = 45;
  byte_10085A8BC = 0;
  dword_10085A8C0 = 1;
  byte_10085A8C8 = 1;
  xmmword_10085A8D0 = xmmword_10046E100;
  unk_10085A8E0 = xmmword_10046E110;
  xmmword_10085A8F0 = v8;
  qword_10085A900 = 0xC059000000000000;
  xmmword_10085A908 = xmmword_10046E120;
  qword_10085A918 = (uint64_t)vdup_n_s32(0x3DCCCCCDu);
  xmmword_10085A920 = xmmword_10046E060;
  qword_10085A930 = 0x3FD999999999999ALL;
  qword_10085A940 = 0;
  qword_10085A938 = 0;
  xmmword_10085A948 = xmmword_10046E070;
  dword_10085A958 = 5;
  qword_10085A960 = 0x4000000000000000;
  dword_10085A968 = 10;
  qword_10085A970 = 0x4034000000000000;
  dword_10085A978 = 3;
  xmmword_10085A980 = xmmword_10046E130;
  __cxa_atexit((void (*)(void *))sub_100180704, &unk_10085A6D0, (void *)&_mh_execute_header);
  qword_10085A998 = 0;
  unk_10085A9A0 = 0;
  qword_10085A990 = 0;
  v6 = operator new(0x40uLL);
  qword_10085A998 = (uint64_t)(v6 + 4);
  unk_10085A9A0 = v6 + 4;
  *v6 = xmmword_1004747B0;
  v6[1] = unk_1004747C0;
  v6[2] = xmmword_1004747D0;
  v6[3] = unk_1004747E0;
  qword_10085A990 = (uint64_t)v6;
  __cxa_atexit((void (*)(void *))sub_1000325D8, &qword_10085A990, (void *)&_mh_execute_header);
  qword_10085A9B0 = 0;
  unk_10085A9B8 = 0;
  qword_10085A9A8 = 0;
  v7 = operator new(0x10uLL);
  qword_10085A9B0 = (uint64_t)(v7 + 1);
  unk_10085A9B8 = v7 + 1;
  *v7 = xmmword_1004747F0;
  qword_10085A9A8 = (uint64_t)v7;
  __cxa_atexit((void (*)(void *))sub_1000325D8, &qword_10085A9A8, (void *)&_mh_execute_header);
  objc_autoreleasePoolPop(v0);
}

void sub_1002696BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10003E3F0(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_10026971C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.NearbyInteraction", "LocalDeviceInteraction");
  v2 = (void *)qword_10085A9C0;
  qword_10085A9C0 = (uint64_t)v1;

}

void sub_100269904(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_100269978(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  uint64_t v5;
  int v6;
  id v7;

  v3 = a2;
  if (+[NIPlatformInfo isInternalBuild](NIPlatformInfo, "isInternalBuild"))
  {
    v4 = *(NSObject **)(a1 + 32);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      v6 = 138412290;
      v7 = v3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "setAsyncLocalDeviceInteractableDiscoveryTokens:completion replied error: %@", (uint8_t *)&v6, 0xCu);
    }
  }
  v5 = *(_QWORD *)(a1 + 48);
  if (v5)
    (*(void (**)(uint64_t, id))(v5 + 16))(v5, v3);
  objc_msgSend(*(id *)(a1 + 40), "invalidate");

}

void sub_100269A50(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100269BAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16)
{
  void *v16;
  void *v17;
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

void sub_100269BFC(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  uint64_t v8;
  _DWORD v9[2];
  __int16 v10;
  id v11;

  v5 = a2;
  v6 = a3;
  if (+[NIPlatformInfo isInternalBuild](NIPlatformInfo, "isInternalBuild"))
  {
    v7 = *(id *)(a1 + 32);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      v9[0] = 67109378;
      v9[1] = objc_msgSend(v5, "count");
      v10 = 2112;
      v11 = v6;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "getAsyncInteractableDiscoveryTokens: replied %d tokens. Server error: %@", (uint8_t *)v9, 0x12u);
    }

  }
  v8 = *(_QWORD *)(a1 + 48);
  if (v8)
    (*(void (**)(uint64_t, id, id))(v8 + 16))(v8, v5, v6);
  objc_msgSend(*(id *)(a1 + 40), "invalidate");

}

void sub_100269D04(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_100269E70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16)
{
  void *v16;
  void *v17;
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

void sub_100269EC0(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  uint64_t v8;
  _DWORD v9[2];
  __int16 v10;
  id v11;

  v5 = a2;
  v6 = a3;
  if (+[NIPlatformInfo isInternalBuild](NIPlatformInfo, "isInternalBuild"))
  {
    v7 = *(id *)(a1 + 32);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      v9[0] = 67109378;
      v9[1] = objc_msgSend(v5, "count");
      v10 = 2112;
      v11 = v6;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "getAsyncActivelyInteractingDiscoveryTokens: replied %d tokens. Server error: %@", (uint8_t *)v9, 0x12u);
    }

  }
  v8 = *(_QWORD *)(a1 + 48);
  if (v8)
    (*(void (**)(uint64_t, id, id))(v8 + 16))(v8, v5, v6);
  objc_msgSend(*(id *)(a1 + 40), "invalidate");

}

void sub_100269FC8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_10026A330(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

uint64_t sub_10026A3C8(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_10026A3D8(uint64_t a1)
{

}

void sub_10026A3E0(uint64_t a1, void *a2)
{
  id v4;

  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), a2);
  v4 = a2;
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));

}

void sub_10026A730(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,id a30)
{
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;

  v37 = v36;

  _Block_object_dispose(&a25, 8);
  _Block_object_dispose(&a17, 8);

  _Unwind_Resume(a1);
}

void sub_10026A7BC(uint64_t a1, void *a2)
{
  id v4;

  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), a2);
  v4 = a2;
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));

}

void sub_10026AB1C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_10026ABB4(uint64_t a1, void *a2)
{
  id v4;

  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), a2);
  v4 = a2;
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));

}

void sub_10026AF30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,id a28)
{
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  uint64_t v33;
  void *v34;

  v34 = v32;

  _Block_object_dispose(&a17, 8);
  _Block_object_dispose(&a23, 8);

  _Block_object_dispose((const void *)(v33 - 144), 8);
  _Unwind_Resume(a1);
}

void sub_10026AFC8(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  id v11;
  id v12;

  v5 = a2;
  v6 = a3;
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v8 = *(void **)(v7 + 40);
  *(_QWORD *)(v7 + 40) = v5;
  v12 = v5;

  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  v10 = *(void **)(v9 + 40);
  *(_QWORD *)(v9 + 40) = v6;
  v11 = v6;

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_10026B380(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,id a28)
{
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  uint64_t v33;
  void *v34;

  v34 = v32;

  _Block_object_dispose(&a17, 8);
  _Block_object_dispose(&a23, 8);

  _Block_object_dispose((const void *)(v33 - 144), 8);
  _Unwind_Resume(a1);
}

void sub_10026B418(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  id v11;
  id v12;

  v5 = a2;
  v6 = a3;
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v8 = *(void **)(v7 + 40);
  *(_QWORD *)(v7 + 40) = v5;
  v12 = v5;

  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  v10 = *(void **)(v9 + 40);
  *(_QWORD *)(v9 + 40) = v6;
  v11 = v6;

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_10026B7B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,id a28)
{
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  uint64_t v33;
  void *v34;

  v34 = v32;

  _Block_object_dispose(&a17, 8);
  _Block_object_dispose(&a23, 8);

  _Block_object_dispose((const void *)(v33 - 144), 8);
  _Unwind_Resume(a1);
}

void sub_10026B838(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  id v11;
  id v12;

  v5 = a2;
  v6 = a3;
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v8 = *(void **)(v7 + 40);
  *(_QWORD *)(v7 + 40) = v5;
  v12 = v5;

  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  v10 = *(void **)(v9 + 40);
  *(_QWORD *)(v9 + 40) = v6;
  v11 = v6;

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

_QWORD *sub_10026B8D0@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, off_100810FD8[a1]);
}

_QWORD *sub_10026B8E4@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, off_100811030[a1]);
}

_QWORD *sub_10026B8F8@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, off_100811078[a1]);
}

_QWORD *sub_10026B90C@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, off_100811098[a1]);
}

uint64_t sub_10026B920(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  for (i = 0; i != -96; i -= 48)
  {
    v3 = a1 + i;
    if (*(char *)(a1 + i + 95) < 0)
      operator delete(*(void **)(v3 + 72));
    if (*(char *)(v3 + 71) < 0)
      operator delete(*(void **)(v3 + 48));
  }
  return a1;
}

uint64_t sub_10026B97C(uint64_t a1, __int128 *a2, uint64_t *a3, _QWORD *a4, _QWORD *a5)
{
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  NSObject *v17;
  _QWORD block[5];

  *(_QWORD *)a1 = off_100810ED0;
  *(_QWORD *)(a1 + 8) = 850045863;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_QWORD *)(a1 + 80) = 0;
  if (*((char *)a2 + 23) < 0)
  {
    sub_100004678((_BYTE *)(a1 + 88), *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v9 = *a2;
    *(_QWORD *)(a1 + 104) = *((_QWORD *)a2 + 2);
    *(_OWORD *)(a1 + 88) = v9;
  }
  v10 = *a3;
  *a3 = 0;
  v11 = a4[1];
  *(_QWORD *)(a1 + 120) = *a4;
  *(_QWORD *)(a1 + 112) = v10;
  *(_QWORD *)(a1 + 128) = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  v14 = a5[1];
  *(_QWORD *)(a1 + 136) = *a5;
  *(_QWORD *)(a1 + 144) = v14;
  if (v14)
  {
    v15 = (unint64_t *)(v14 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  v17 = dispatch_queue_create("com.apple.nearbyd.Rose.ProtobufLogger", 0);
  *(_QWORD *)(a1 + 152) = v17;
  if (!*(_QWORD *)(a1 + 120))
    __assert_rtn("Logger", "PRProtobufLogger.cpp", 222, "fTimestampSrc != nullptr");
  if (*(_QWORD *)(a1 + 112))
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 0x40000000;
    block[2] = sub_10026BB50;
    block[3] = &unk_100810F40;
    block[4] = a1;
    dispatch_async(v17, block);
  }
  return a1;
}

void sub_10026BAF4(_Unwind_Exception *a1)
{
  uint64_t v1;
  std::mutex *v2;

  sub_10001AE68(v1 + 72);
  std::mutex::~mutex(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_10026BB50(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = *(_QWORD *)(a1 + 32);
  (*(void (**)(_QWORD))(**(_QWORD **)(v1 + 112) + 16))(*(_QWORD *)(v1 + 112));
  result = *(_QWORD *)(v1 + 112);
  *(_QWORD *)(v1 + 112) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_10026BBA0(uint64_t a1)
{
  _QWORD *v2;
  _QWORD **v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = off_100810ED0;
  v3 = (_QWORD **)(a1 + 72);
  v2 = *(_QWORD **)(a1 + 72);
  if (v2 && sub_1000C93B4(v2))
    sub_1000C9350(*v3);
  v4 = *(_QWORD *)(a1 + 112);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  sub_10001AE68(a1 + 136);
  sub_10001AE68(a1 + 120);
  v5 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 112) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  sub_10001AE68((uint64_t)v3);
  std::mutex::~mutex((std::mutex *)(a1 + 8));
  return a1;
}

void sub_10026BC4C(uint64_t a1)
{
  sub_10026BBA0(a1);
  operator delete();
}

uint64_t sub_10026BC70(uint64_t a1)
{
  std::mutex *v2;
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  int v10;
  __int128 v11;

  v2 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  v4 = (_QWORD **)(a1 + 72);
  v3 = *(_QWORD **)(a1 + 72);
  if (v3 && (sub_1000C93B4(v3) & 1) != 0)
  {
    v5 = 1;
  }
  else
  {
    v10 = 0;
    sub_10027C2C4((uint64_t *)(a1 + 136), a1 + 88, (uint64_t)&v10, &v11);
    sub_1000145E8(a1 + 72, &v11);
    v6 = (std::__shared_weak_count *)*((_QWORD *)&v11 + 1);
    if (*((_QWORD *)&v11 + 1))
    {
      v7 = (unint64_t *)(*((_QWORD *)&v11 + 1) + 8);
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    v5 = sub_1000C93B4(*v4);
  }
  std::mutex::unlock(v2);
  return v5;
}

void sub_10026BD3C(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10026BD54(uint64_t a1, const std::string *a2, const std::string *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::string *v9;
  std::string *v10;
  uint64_t v11;
  _QWORD v13[6];
  uint64_t v14;
  int v15;

  sub_10011C6A4(v13);
  if (sub_10026BF64((uint64_t)v13, *(_QWORD *)(a1 + 120)))
  {
    v15 |= 2u;
    v6 = v14;
    if (!v14)
      operator new();
    *(_DWORD *)(v14 + 44) |= 2u;
    v7 = *(_QWORD *)(v6 + 24);
    if (!v7)
      operator new();
    *(_DWORD *)(v7 + 376) |= 1u;
    v8 = *(_QWORD *)(v7 + 16);
    if (!v8)
      operator new();
    *(_DWORD *)(v8 + 36) |= 1u;
    v9 = *(std::string **)(v8 + 16);
    if (v9 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
      operator new();
    std::string::operator=(v9, a2);
    *(_DWORD *)(v8 + 36) |= 2u;
    v10 = *(std::string **)(v8 + 24);
    if (v10 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
      operator new();
    std::string::operator=(v10, a3);
    v11 = sub_10026C02C(a1, (wireless_diagnostics::google::protobuf::MessageLite *)v13);
  }
  else
  {
    v11 = 0;
  }
  sub_10011D2FC(v13);
  return v11;
}

void sub_10026BF04()
{
  operator delete();
}

BOOL sub_10026BF64(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  __int128 v8;
  uint64_t v9;
  unsigned __int8 v10;

  (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)a2 + 16))(&v8, a2);
  v3 = v10;
  if (v10)
  {
    *(_DWORD *)(a1 + 60) |= 1u;
    v4 = *(_QWORD *)(a1 + 40);
    if (!v4)
      operator new();
    v5 = *(_DWORD *)(v4 + 52);
    *(_OWORD *)(v4 + 16) = v8;
    v6 = v9;
    *(_DWORD *)(v4 + 52) = v5 | 7;
    *(_QWORD *)(v4 + 32) = v6;
  }
  return v3 != 0;
}

void sub_10026C008()
{
  operator delete();
}

uint64_t sub_10026C02C(uint64_t a1, wireless_diagnostics::google::protobuf::MessageLite *a2)
{
  std::mutex *v4;
  _QWORD *v5;
  int v6;
  int v7;
  uint64_t v8;
  NSObject *v9;
  NSObject *v10;
  uint64_t v12;
  void **v13;
  void *__p[2];
  uint64_t v15;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  int v19;
  __int16 v20;
  void **v21;

  v4 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  v5 = *(_QWORD **)(a1 + 72);
  if (!v5 || (sub_1000C93B4(v5) & 1) == 0)
  {
    v9 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
    {
      wireless_diagnostics::google::protobuf::MessageLite::SerializeAsString(a2);
      sub_1003E2F30((char *)buf, (uint64_t)__p, v9);
    }
    goto LABEL_8;
  }
  v6 = sub_1000C93C4(*(uint64_t **)(a1 + 72), a2);
  v7 = sub_1000C965C(*(_QWORD **)(a1 + 72));
  if ((v6 & v7 & 1) == 0)
  {
    v10 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
    {
      v12 = *(_QWORD *)(a1 + 72);
      if (*(char *)(v12 + 39) < 0)
      {
        sub_100004678(__p, *(void **)(v12 + 16), *(_QWORD *)(v12 + 24));
      }
      else
      {
        *(_OWORD *)__p = *(_OWORD *)(v12 + 16);
        v15 = *(_QWORD *)(v12 + 32);
      }
      v13 = __p;
      if (v15 < 0)
        v13 = (void **)__p[0];
      *(_DWORD *)buf = 67109634;
      v17 = v6;
      v18 = 1024;
      v19 = v7;
      v20 = 2080;
      v21 = v13;
      _os_log_error_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "pblogger, logProtobuf: append:%d flush:%d error writing to %s", buf, 0x18u);
      if (SHIBYTE(v15) < 0)
        operator delete(__p[0]);
    }
LABEL_8:
    v8 = 0;
    goto LABEL_9;
  }
  v8 = 1;
LABEL_9:
  std::mutex::unlock(v4);
  return v8;
}

void sub_10026C1E0(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10026C20C(uint64_t a1, uint64_t a2, double a3)
{
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  const char *v17;
  int v18;
  const char *v19;
  const char *v20;
  int v21;
  const char *v22;
  _BYTE v23[16];
  unsigned int v24;
  unsigned int v25;
  _QWORD v26[6];
  uint64_t v27;
  int v28;
  _QWORD v29[2];
  unsigned int v30;
  unsigned int v31;
  int v32;

  if (*(_DWORD *)a2 != 1)
    return 0;
  if (!*(_BYTE *)(a2 + 12))
    sub_1003E2F94();
  v6 = sub_10026C5B8(*(unsigned int *)(a2 + 4));
  v7 = *(_DWORD *)(a2 + 8) != 0;
  sub_10006D720(v29);
  if (!sub_10006DA40(v6))
  {
    v17 = "::CLP::LogEntry::Nearbyd::AccessoryType_IsValid(value)";
    v18 = 3284;
    v19 = "set_accessory";
    goto LABEL_26;
  }
  v32 |= 1u;
  v30 = v6;
  if (!sub_10006DA5C(v7))
  {
    v17 = "::CLP::LogEntry::Nearbyd::AccessoryActivity_IsValid(value)";
    v18 = 3307;
    v19 = "set_activity";
LABEL_26:
    __assert_rtn(v19, "CLPNearbyd.pb.h", v18, v17);
  }
  v32 |= 2u;
  v31 = v7;
  sub_10011C6A4(v26);
  sub_10006DC24((uint64_t)v23, (uint64_t)v29);
  if (!sub_10026BF64((uint64_t)v26, *(_QWORD *)(a1 + 120))
    && os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
  {
    sub_1003E2FBC();
  }
  v28 |= 2u;
  v8 = v27;
  if (!v27)
    operator new();
  *(_DWORD *)(v27 + 44) |= 2u;
  v9 = *(_QWORD *)(v8 + 24);
  if (!v9)
    operator new();
  *(_DWORD *)(v9 + 376) |= 0x400u;
  v10 = *(_QWORD *)(v9 + 88);
  if (!v10)
    operator new();
  *(_DWORD *)(v10 + 36) |= 2u;
  v11 = *(_DWORD **)(v10 + 24);
  if (!v11)
    operator new();
  v12 = v24;
  if (!sub_10006DA40(v24))
  {
    v20 = "::CLP::LogEntry::Nearbyd::AccessoryType_IsValid(value)";
    v21 = 3284;
    v22 = "set_accessory";
    goto LABEL_29;
  }
  v11[7] |= 1u;
  v11[4] = v12;
  v13 = v25;
  if (!sub_10006DA5C(v25))
  {
    v20 = "::CLP::LogEntry::Nearbyd::AccessoryActivity_IsValid(value)";
    v21 = 3307;
    v22 = "set_activity";
LABEL_29:
    __assert_rtn(v22, "CLPNearbyd.pb.h", v21, v20);
  }
  v11[7] |= 2u;
  v11[5] = v13;
  *(_DWORD *)(v9 + 376) |= 0x400u;
  v14 = *(_QWORD *)(v9 + 88);
  if (!v14)
    operator new();
  sub_10006DC28((uint64_t)v23);
  *(_DWORD *)(v14 + 36) |= 1u;
  *(double *)(v14 + 16) = a3;
  v15 = sub_10026C02C(a1, (wireless_diagnostics::google::protobuf::MessageLite *)v26);
  sub_10011D2FC(v26);
  sub_10006DC28((uint64_t)v29);
  return v15;
}

void sub_10026C518()
{
  operator delete();
}

uint64_t sub_10026C5B8(uint64_t result)
{
  unsigned int v1;

  switch((int)result)
  {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return result;
    default:
      if ((_DWORD)result == 999)
        v1 = 999;
      else
        v1 = 0;
      if ((_DWORD)result == 998)
        result = 998;
      else
        result = v1;
      break;
  }
  return result;
}

uint64_t sub_10026C5F4(uint64_t a1, int a2, double a3)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  _QWORD v10[8];

  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
    sub_1003E3014();
  sub_10011C6A4(v10);
  v6 = sub_10026C6D4((uint64_t)v10, 1u, *(_QWORD *)(a1 + 120));
  v7 = *(_DWORD *)(v6 + 36);
  *(_DWORD *)(v6 + 28) = a2;
  *(_DWORD *)(v6 + 36) = v7 | 6;
  *(double *)(v6 + 16) = a3;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
    sub_1003E2FE8();
  v8 = sub_10026C02C(a1, (wireless_diagnostics::google::protobuf::MessageLite *)v10);
  sub_10011D2FC(v10);
  return v8;
}

void sub_10026C6C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10011D2FC(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10026C6D4(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (!sub_10026BF64(a1, a3) && os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
    sub_1003E2FBC();
  *(_DWORD *)(a1 + 60) |= 2u;
  v5 = *(_QWORD *)(a1 + 48);
  if (!v5)
    operator new();
  *(_DWORD *)(v5 + 44) |= 2u;
  v6 = *(_QWORD *)(v5 + 24);
  if (!v6)
    operator new();
  *(_DWORD *)(v6 + 376) |= 0x100u;
  v7 = *(_QWORD *)(v6 + 72);
  if (!v7)
    operator new();
  if (!sub_10006DA68(a2))
    sub_1003CCB40();
  *(_DWORD *)(v7 + 36) |= 1u;
  *(_DWORD *)(v7 + 24) = a2;
  *(_DWORD *)(v6 + 376) |= 0x100u;
  if (!*(_QWORD *)(v6 + 72))
    operator new();
  return *(_QWORD *)(v6 + 72);
}

void sub_10026C834()
{
  operator delete();
}

uint64_t sub_10026C884(uint64_t a1, int a2, double a3)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  _QWORD v10[8];

  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
    sub_1003E306C();
  sub_10011C6A4(v10);
  v6 = sub_10026C6D4((uint64_t)v10, 2u, *(_QWORD *)(a1 + 120));
  v7 = *(_DWORD *)(v6 + 36);
  *(_DWORD *)(v6 + 28) = a2;
  *(_DWORD *)(v6 + 36) = v7 | 6;
  *(double *)(v6 + 16) = a3;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
    sub_1003E3040();
  v8 = sub_10026C02C(a1, (wireless_diagnostics::google::protobuf::MessageLite *)v10);
  sub_10011D2FC(v10);
  return v8;
}

void sub_10026C950(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10011D2FC(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10026C964(uint64_t a1, int a2, double a3)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  _QWORD v10[8];

  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
    sub_1003E30C4();
  sub_10011C6A4(v10);
  v6 = sub_10026C6D4((uint64_t)v10, 5u, *(_QWORD *)(a1 + 120));
  v7 = *(_DWORD *)(v6 + 36);
  *(_DWORD *)(v6 + 28) = a2;
  *(_DWORD *)(v6 + 36) = v7 | 6;
  *(double *)(v6 + 16) = a3;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
    sub_1003E3098();
  v8 = sub_10026C02C(a1, (wireless_diagnostics::google::protobuf::MessageLite *)v10);
  sub_10011D2FC(v10);
  return v8;
}

void sub_10026CA30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10011D2FC(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10026CA44(uint64_t a1, int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;

  if (!sub_10026BF64(a1, a4) && os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
    sub_1003E2FBC();
  *(_DWORD *)(a1 + 60) |= 2u;
  v7 = *(_QWORD *)(a1 + 48);
  if (!v7)
    operator new();
  *(_DWORD *)(v7 + 44) |= 4u;
  v8 = *(_QWORD *)(v7 + 32);
  if (!v8)
    operator new();
  *(_DWORD *)(v8 + 44) |= 1u;
  v9 = *(_DWORD **)(v8 + 16);
  if (!v9)
    operator new();
  if (!sub_100086B4C(a2))
    sub_1003CCC80();
  v9[63] |= 1u;
  v9[4] = a2;
  if ((sub_100086B5C(a3) & 1) == 0)
    sub_1003CCC58();
  v9[63] |= 2u;
  v9[5] = a3;
  *(_DWORD *)(v8 + 44) |= 1u;
  if (!*(_QWORD *)(v8 + 16))
    operator new();
  return *(_QWORD *)(v8 + 16);
}

void sub_10026CBC8()
{
  operator delete();
}

uint64_t sub_10026CC18(unsigned int *a1, unsigned int a2)
{
  uint64_t v4;

  v4 = sub_100086B74(a2);
  if ((v4 & 1) != 0)
  {
    *a1 = a2;
  }
  else if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
  {
    sub_1003E30F0();
  }
  return v4;
}

uint64_t sub_10026CC88(uint64_t a1, const std::string *a2)
{
  uint64_t v4;
  uint64_t v5;
  std::string *v6;
  uint64_t v7;
  _QWORD v9[8];

  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
    sub_1003E317C();
  sub_10011C6A4(v9);
  v4 = sub_10026CA44((uint64_t)v9, 1, 0, *(_QWORD *)(a1 + 120));
  *(_DWORD *)(v4 + 252) |= 4u;
  v5 = *(_QWORD *)(v4 + 24);
  if (!v5)
    operator new();
  *(_DWORD *)(v5 + 28) |= 1u;
  v6 = *(std::string **)(v5 + 16);
  if (v6 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
    operator new();
  std::string::operator=(v6, a2);
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
    sub_1003E3150();
  v7 = sub_10026C02C(a1, (wireless_diagnostics::google::protobuf::MessageLite *)v9);
  sub_10011D2FC(v9);
  return v7;
}

void sub_10026CDC8()
{
  operator delete();
}

uint64_t sub_10026CE00(unsigned int *a1, unsigned int a2)
{
  uint64_t v4;

  v4 = sub_100086BB0(a2);
  if ((v4 & 1) != 0)
  {
    *a1 = a2;
  }
  else if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
  {
    sub_1003E31A8();
  }
  return v4;
}

BOOL sub_10026CE70(unsigned int *a1, unsigned int a2)
{
  _BOOL8 v4;

  v4 = sub_10006DA5C(a2);
  if (v4)
  {
    *a1 = a2;
  }
  else if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
  {
    sub_1003E3208();
  }
  return v4;
}

uint64_t sub_10026CEE0(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t v6;
  int v7;
  uint64_t v8;

  v6 = sub_100086B74(a2);
  if ((v6 & 1) != 0)
  {
    if ((sub_100086B74(a2) & 1) == 0)
      sub_1003CD090();
    v7 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 24) = a2;
    *(_DWORD *)(a1 + 32) = v7 | 3;
    v8 = *(_QWORD *)(a1 + 16);
    if (!v8)
      operator new();
    *(_DWORD *)(v8 + 32) |= 2u;
    *(_DWORD *)(v8 + 24) = a3;
  }
  else if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
  {
    sub_1003E30F0();
  }
  return v6;
}

void sub_10026CFAC()
{
  operator delete();
}

uint64_t sub_10026CFD0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  std::string *v6;
  int v7;
  int v8;
  int v9;
  std::string *v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  std::string __p;
  _QWORD v18[8];

  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
    sub_1003E3294();
  sub_10011C6A4(v18);
  v4 = sub_10026CA44((uint64_t)v18, 2, 1u, *(_QWORD *)(a1 + 120));
  *(_DWORD *)(v4 + 252) |= 8u;
  v5 = *(_QWORD *)(v4 + 32);
  if (!v5)
    operator new();
  if (*(char *)(a2 + 23) < 0)
    sub_100004678(&__p, *(void **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  *(_DWORD *)(v5 + 68) |= 1u;
  v6 = *(std::string **)(v5 + 16);
  if (v6 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
    operator new();
  std::string::operator=(v6, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v7 = *(_DWORD *)(v5 + 68);
  *(_DWORD *)(v5 + 24) = __rev16(*(unsigned __int16 *)(a2 + 24));
  v8 = *(unsigned __int16 *)(a2 + 26);
  v9 = v7 | 6;
  *(_DWORD *)(v5 + 68) = v7 | 6;
  *(_DWORD *)(v5 + 28) = v8;
  if (*(_BYTE *)(a2 + 96))
  {
    *(_DWORD *)(v5 + 32) = *(unsigned __int16 *)(a2 + 34);
    *(_DWORD *)(v5 + 36) = *(unsigned __int16 *)(a2 + 36);
    *(_DWORD *)(v5 + 68) = v7 | 0x3E;
    v10 = *(std::string **)(v5 + 40);
    if (v10 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
      operator new();
    std::string::operator=(v10, (const std::string *)(a2 + 40));
    v11 = *(_DWORD *)(v5 + 68);
    *(_DWORD *)(v5 + 48) = *(unsigned __int16 *)(a2 + 64);
    v12 = *(unsigned __int8 *)(a2 + 66);
    *(_DWORD *)(v5 + 68) = v11 | 0xC0;
    *(_DWORD *)(v5 + 52) = v12;
    v13 = *(_DWORD *)(a2 + 68);
    v9 = v11 | 0x1C0;
    *(_DWORD *)(v5 + 68) = v11 | 0x1C0;
    *(_DWORD *)(v5 + 56) = v13;
  }
  v14 = *(_QWORD *)(a2 + 104);
  if ((v14 & 0xFF00000000) != 0)
  {
    *(_DWORD *)(v5 + 68) = v9 | 0x200;
    *(_DWORD *)(v5 + 60) = v14;
  }
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
    sub_1003E3268();
  v15 = sub_10026C02C(a1, (wireless_diagnostics::google::protobuf::MessageLite *)v18);
  sub_10011D2FC(v18);
  return v15;
}

void sub_10026D204()
{
  operator delete();
}

void sub_10026D248(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  JUMPOUT(0x10026D238);
}

BOOL sub_10026D260(uint64_t a1, unsigned int a2)
{
  _BOOL8 result;

  result = sub_10006DA5C(a2);
  if (!result)
    sub_1003CCFA0();
  *(_DWORD *)(a1 + 88) |= 2u;
  *(_DWORD *)(a1 + 24) = a2;
  return result;
}

uint64_t sub_10026D2A0(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  char v20;
  uint64_t v21;
  NSObject *v22;
  unsigned int v24[4];
  _QWORD v25[8];

  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
    sub_1003E32EC();
  sub_10011C6A4(v25);
  v4 = sub_10026CA44((uint64_t)v25, 1, 0x1Au, *(_QWORD *)(a1 + 120));
  *(_DWORD *)(v4 + 252) |= 0x8000000u;
  v5 = *(_QWORD *)(v4 + 224);
  if (!v5)
    operator new();
  if (!a2[1]
    || !a2[345]
    || !a2[347]
    || !a2[350]
    || !a2[354]
    || !a2[357]
    || !a2[3]
    || !a2[5]
    || !a2[360]
    || !a2[370]
    || !a2[373]
    || !a2[375]
    || !a2[7]
    || !a2[78]
    || !a2[24])
  {
    v22 = qword_10085F520;
    v21 = 0;
    if (!os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
      goto LABEL_40;
    LOWORD(v24[0]) = 0;
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "pblogger, Test NMI range enable params not available", (uint8_t *)v24, 2u);
LABEL_39:
    v21 = 0;
    goto LABEL_40;
  }
  v6 = *a2;
  v24[0] = 0;
  if (!sub_10026CE70(v24, v6))
    goto LABEL_39;
  sub_10026D260(v5, v24[0]);
  if (!a2[354])
    goto LABEL_41;
  v7 = *((unsigned __int16 *)a2 + 176);
  v8 = *(_DWORD *)(v5 + 88);
  *(_DWORD *)(v5 + 88) = v8 | 4;
  *(_DWORD *)(v5 + 28) = v7;
  if (!a2[345])
    goto LABEL_41;
  v9 = a2[344];
  *(_DWORD *)(v5 + 88) = v8 | 0xC;
  *(_DWORD *)(v5 + 32) = v9;
  if (!a2[347])
    goto LABEL_41;
  v10 = a2[346];
  *(_DWORD *)(v5 + 88) = v8 | 0x1C;
  *(_DWORD *)(v5 + 36) = v10;
  if (!a2[350])
    goto LABEL_41;
  v11 = *((unsigned __int16 *)a2 + 174);
  *(_DWORD *)(v5 + 88) = v8 | 0x3C;
  *(_DWORD *)(v5 + 40) = v11;
  if (!a2[357])
    goto LABEL_41;
  *(_DWORD *)(v5 + 44) = a2[356];
  v12 = a2[370];
  *(_DWORD *)(v5 + 88) = v8 | 0xFC;
  *(_DWORD *)(v5 + 48) = v12;
  if (!a2[3])
    goto LABEL_41;
  v13 = a2[2];
  *(_DWORD *)(v5 + 88) = v8 | 0x1FC;
  *(_DWORD *)(v5 + 52) = v13;
  if (!a2[5])
    goto LABEL_41;
  v14 = a2[4];
  *(_DWORD *)(v5 + 88) = v8 | 0x3FC;
  *(_DWORD *)(v5 + 56) = v14;
  if (!a2[360])
    goto LABEL_41;
  v15 = *((unsigned __int16 *)a2 + 179);
  *(_DWORD *)(v5 + 88) = v8 | 0x7FC;
  *(_DWORD *)(v5 + 60) = v15;
  if (!a2[373])
    goto LABEL_41;
  v16 = a2[372];
  *(_DWORD *)(v5 + 88) = v8 | 0xFFC;
  *(_DWORD *)(v5 + 64) = v16;
  if (!a2[375])
    goto LABEL_41;
  v17 = a2[374];
  *(_DWORD *)(v5 + 88) = v8 | 0x1FFC;
  *(_DWORD *)(v5 + 68) = v17;
  if (!a2[7]
    || (v18 = a2[6], *(_DWORD *)(v5 + 88) = v8 | 0x3FFC, *(_DWORD *)(v5 + 72) = v18, !a2[78])
    || (v19 = *((unsigned __int16 *)a2 + 38), *(_DWORD *)(v5 + 88) = v8 | 0x7FFC, *(_DWORD *)(v5 + 76) = v19, !a2[24]))
  {
LABEL_41:
    sub_10000BA44();
  }
  v20 = a2[22] & 1;
  *(_DWORD *)(v5 + 88) = v8 | 0xFFFC;
  *(_BYTE *)(v5 + 80) = v20;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
    sub_1003E32C0();
  v21 = sub_10026C02C(a1, (wireless_diagnostics::google::protobuf::MessageLite *)v25);
LABEL_40:
  sub_10011D2FC(v25);
  return v21;
}

void sub_10026D5C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_10011D2FC(va);
  _Unwind_Resume(a1);
}

uint64_t sub_10026D600(uint64_t a1, unsigned __int8 *a2, uint64_t a3, char a4, char a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  int v14;
  int v15;
  std::string *v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t *v24;
  int v25;
  NSObject *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  int v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  unsigned int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  unsigned int v66;
  unsigned int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  uint64_t v72;
  _DWORD *v73;
  unsigned int v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int v81;
  uint64_t *v82;
  uint64_t *v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  unsigned int v88;
  int v89;
  unsigned int v90;
  uint64_t v91;
  uint64_t v92;
  unsigned int v93;
  unsigned int v94;
  unsigned int v95;
  unsigned int v96;
  const char *v97;
  int v98;
  const char *v99;
  const char *v100;
  int v101;
  const char *v102;
  char v103;
  uint64_t v104;
  std::string __str;
  unsigned int v106;
  _QWORD v107[8];
  uint8_t buf[4];
  int v109;

  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
    sub_1003E33A4();
  sub_10011C6A4(v107);
  v10 = sub_10026CA44((uint64_t)v107, 3, 0xDu, *(_QWORD *)(a1 + 120));
  *(_DWORD *)(v10 + 252) |= 0x8000u;
  v11 = *(_QWORD *)(v10 + 128);
  if (!v11)
    operator new();
  *(_DWORD *)(v11 + 468) |= 1u;
  v12 = *(_QWORD *)(v11 + 16);
  if (!v12)
    operator new();
  if ((sub_10026CEE0(v12, *((unsigned __int16 *)a2 + 48), *((unsigned __int16 *)a2 + 49)) & 1) == 0
    || (v106 = 0, (sub_10026CE00(&v106, a2[100]) & 1) == 0))
  {
    v37 = 0;
    goto LABEL_33;
  }
  v13 = v106;
  if ((sub_100086BB0(v106) & 1) == 0)
    __assert_rtn("set_session_type", "CLPRoseCommunicationEvent.pb.h", 10992, "::CLP::LogEntry::Rose::RoseCommunicationEvent::RoseSessionType_IsValid(value)");
  v14 = *(_DWORD *)(v11 + 468);
  *(_DWORD *)(v11 + 32) = v13;
  *(_QWORD *)(v11 + 168) = *((_QWORD *)a2 + 13);
  *(_DWORD *)(v11 + 36) = *((unsigned __int16 *)a2 + 56);
  v15 = a2[114];
  v14 |= 0x100001Au;
  *(_DWORD *)(v11 + 468) = v14;
  *(_DWORD *)(v11 + 48) = v15;
  *((_BYTE *)&__str.__r_.__value_.__s + 23) = 8;
  __str.__r_.__value_.__r.__words[0] = *(_QWORD *)(a2 + 115);
  __str.__r_.__value_.__s.__data_[8] = 0;
  *(_DWORD *)(v11 + 468) = v14 | 0x20;
  v16 = *(std::string **)(v11 + 40);
  if (v16 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
    operator new();
  std::string::operator=(v16, &__str);
  v17 = *(_DWORD *)(v11 + 468);
  if (!*(_DWORD *)(v12 + 24))
  {
    v18 = *((_QWORD *)a2 + 16);
    v19 = v17 | 0x10000;
    *(_DWORD *)(v11 + 468) = v17 | 0x10000;
    *(_QWORD *)(v11 + 96) = v18;
    if (a2[528])
    {
      v20 = *((_QWORD *)a2 + 65);
      *(_DWORD *)(v11 + 472) |= 4u;
      *(_QWORD *)(v11 + 248) = v20;
    }
    if (a2[544])
    {
      v21 = *((_QWORD *)a2 + 67);
      *(_DWORD *)(v11 + 472) |= 8u;
      *(_QWORD *)(v11 + 256) = v21;
    }
    v22 = (uint64_t *)*((_QWORD *)a2 + 17);
    v23 = (uint64_t *)*((_QWORD *)a2 + 18);
    if (v22 != v23)
    {
      v103 = a5;
      v104 = a1;
      v24 = v22 + 5;
      v25 = 1;
      do
      {
        v26 = qword_10085F520;
        if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 67109120;
          v109 = v25;
          _os_log_debug_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEBUG, "pblogger, Logger::logRangeResult: aoaHypothesis %d", buf, 8u);
          ++v25;
        }
        v27 = *(_DWORD *)(v11 + 204);
        v28 = *(int *)(v11 + 200);
        if ((int)v28 >= v27)
        {
          if (v27 == *(_DWORD *)(v11 + 208))
          {
            wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(v11 + 192), v27 + 1);
            v27 = *(_DWORD *)(v11 + 204);
          }
          *(_DWORD *)(v11 + 204) = v27 + 1;
          sub_1000B8FB4();
        }
        v29 = *(_QWORD *)(v11 + 192);
        *(_DWORD *)(v11 + 200) = v28 + 1;
        v30 = *(_QWORD *)(v29 + 8 * v28);
        v31 = v24 - 5;
        v32 = *(_DWORD *)(v30 + 76);
        *(_OWORD *)(v30 + 16) = *(_OWORD *)(v24 - 5);
        v33 = *(v24 - 3);
        v34 = v32 | 7;
        *(_DWORD *)(v30 + 76) = v32 | 7;
        *(_QWORD *)(v30 + 32) = v33;
        if (*((_BYTE *)v24 - 8))
        {
          v35 = *(v24 - 2);
          v34 = v32 | 0x17;
          *(_DWORD *)(v30 + 76) = v32 | 0x17;
          *(_QWORD *)(v30 + 48) = v35;
        }
        if (*((_BYTE *)v24 + 8))
        {
          v36 = *v24;
          *(_DWORD *)(v30 + 76) = v34 | 0x20;
          *(_QWORD *)(v30 + 56) = v36;
        }
        v24 += 7;
      }
      while (v31 + 7 != v23);
      v19 = *(_DWORD *)(v11 + 468);
      a1 = v104;
      a5 = v103;
    }
    v39 = v19 | 0x600;
    *(_DWORD *)(v11 + 468) = v19 | 0x600;
    *(_OWORD *)(v11 + 64) = *((_OWORD *)a2 + 10);
    if (a2[184])
    {
      v40 = *((_QWORD *)a2 + 22);
      *(_DWORD *)(v11 + 472) |= 0x2000000u;
      *(_QWORD *)(v11 + 392) = v40;
    }
    if (a2[200])
    {
      v41 = *((_QWORD *)a2 + 24);
      v39 = v19 | 0x20000600;
      *(_DWORD *)(v11 + 468) = v19 | 0x20000600;
      *(_QWORD *)(v11 + 216) = v41;
    }
    if (a2[216])
    {
      v42 = *((_QWORD *)a2 + 26);
      v39 |= 0x40000000u;
      *(_DWORD *)(v11 + 468) = v39;
      *(_QWORD *)(v11 + 224) = v42;
    }
    if (a2[232])
    {
      v43 = *((_QWORD *)a2 + 28);
      v39 |= 0x80000000;
      *(_DWORD *)(v11 + 468) = v39;
      *(_QWORD *)(v11 + 232) = v43;
    }
    v44 = v39 | 0x180000;
    *(_DWORD *)(v11 + 468) = v39 | 0x180000;
    *(_OWORD *)(v11 + 120) = *((_OWORD *)a2 + 15);
    if (a2[264])
    {
      v45 = *((_QWORD *)a2 + 32);
      v44 = v39 | 0x580000;
      *(_DWORD *)(v11 + 468) = v39 | 0x580000;
      *(_QWORD *)(v11 + 152) = v45;
    }
    if (a2[280])
    {
      v46 = *((_QWORD *)a2 + 34);
      v44 |= 0x800000u;
      *(_DWORD *)(v11 + 468) = v44;
      *(_QWORD *)(v11 + 160) = v46;
    }
    v47 = *(_DWORD *)(v11 + 472);
    *(_DWORD *)(v11 + 300) = *((_DWORD *)a2 + 73);
    v48 = *((_QWORD *)a2 + 37);
    v17 = v44 | 0x8000000;
    *(_DWORD *)(v11 + 468) = v44 | 0x8000000;
    *(_QWORD *)(v11 + 184) = v48;
    v49 = a2[312];
    v50 = v47 | 0x4001;
    *(_DWORD *)(v11 + 472) = v47 | 0x4001;
    *(_DWORD *)(v11 + 240) = v49;
    if (a2[328])
    {
      v51 = *((_QWORD *)a2 + 40);
      v50 = v47 | 0x4011;
      *(_DWORD *)(v11 + 472) = v47 | 0x4011;
      *(_QWORD *)(v11 + 264) = v51;
    }
    if (a2[344])
    {
      v52 = *((_QWORD *)a2 + 42);
      v50 |= 0x20u;
      *(_DWORD *)(v11 + 472) = v50;
      *(_QWORD *)(v11 + 272) = v52;
    }
    if (a2[360])
    {
      v53 = *((_QWORD *)a2 + 44);
      v50 |= 0x40u;
      *(_DWORD *)(v11 + 472) = v50;
      *(_QWORD *)(v11 + 280) = v53;
    }
    if (a2[392])
    {
      v54 = *((_QWORD *)a2 + 48);
      v50 |= 0x200000u;
      *(_DWORD *)(v11 + 472) = v50;
      *(_QWORD *)(v11 + 352) = v54;
    }
    if (a2[408])
    {
      v55 = *((_QWORD *)a2 + 50);
      v50 |= 0x400000u;
      *(_DWORD *)(v11 + 472) = v50;
      *(_QWORD *)(v11 + 360) = v55;
    }
    if (a2[424])
    {
      v56 = *((_QWORD *)a2 + 52);
      v50 |= 0x800000u;
      *(_DWORD *)(v11 + 472) = v50;
      *(_QWORD *)(v11 + 368) = v56;
    }
    if (a2[440])
    {
      v57 = *((_QWORD *)a2 + 54);
      *(_DWORD *)(v11 + 472) = v50 | 0x1000000;
      *(_QWORD *)(v11 + 384) = v57;
    }
  }
  if (a2[16])
  {
    v58 = *((_QWORD *)a2 + 1);
    v17 |= 0x2000000u;
    *(_DWORD *)(v11 + 468) = v17;
    *(_QWORD *)(v11 + 176) = v58;
  }
  v59 = *((unsigned __int16 *)a2 + 144);
  *(_DWORD *)(v11 + 468) = v17 | 0x4000000;
  *(_DWORD *)(v11 + 140) = v59;
  v60 = a2[368] != 5;
  if (!sub_10006DA5C(v60))
  {
    v97 = "::CLP::LogEntry::Rose::RoseCommunicationEvent::RoseRFChannel_IsValid(value)";
    v98 = 11748;
    v99 = "set_rf_channel";
    goto LABEL_130;
  }
  *(_DWORD *)(v11 + 472) |= 2u;
  *(_DWORD *)(v11 + 244) = v60;
  if (*(unsigned __int16 *)(a2 + 369) >= 0x100u)
  {
    v61 = *(_WORD *)(a2 + 369);
    if (sub_100086BCC(v61))
    {
      if (!sub_100086BCC(v61))
        __assert_rtn("set_nb_band", "CLPRoseCommunicationEvent.pb.h", 12429, "::CLP::LogEntry::Rose::RoseCommunicationEvent::RoseNbBand_IsValid(value)");
      *(_DWORD *)(v11 + 472) |= 0x80000000;
      *(_DWORD *)(v11 + 416) = v61;
    }
    else if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
    {
      sub_1003E3344();
    }
  }
  v62 = *((_DWORD *)a2 + 93);
  if ((v62 & 0xFF0000) != 0)
  {
    *(_DWORD *)(v11 + 476) |= 1u;
    *(_DWORD *)(v11 + 420) = (unsigned __int16)v62;
  }
  v63 = *(_DWORD *)(v11 + 472);
  *(_DWORD *)(v11 + 340) = *((unsigned __int16 *)a2 + 188);
  *(_DWORD *)(v11 + 344) = *((unsigned __int16 *)a2 + 189);
  v64 = *((unsigned __int16 *)a2 + 190);
  v65 = v63 | 0xE0000;
  *(_DWORD *)(v11 + 472) = v63 | 0xE0000;
  *(_DWORD *)(v11 + 348) = v64;
  v66 = *((unsigned __int16 *)a2 + 224);
  if (v66 >= 0x100)
  {
    v65 = v63 | 0x40E0000;
    *(_DWORD *)(v11 + 472) = v63 | 0x40E0000;
    *(_DWORD *)(v11 + 380) = v66;
  }
  v67 = *((unsigned __int16 *)a2 + 225);
  if (v67 >= 0x100)
  {
    v65 |= 0x8000000u;
    *(_DWORD *)(v11 + 472) = v65;
    *(_DWORD *)(v11 + 400) = v67;
  }
  v68 = *(_DWORD *)(a2 + 454);
  if ((v68 & 0xFF0000) != 0)
  {
    v65 |= 0x20000000u;
    *(_DWORD *)(v11 + 472) = v65;
    *(_DWORD *)(v11 + 408) = (__int16)v68;
  }
  v69 = *(_DWORD *)(a2 + 458);
  if ((v69 & 0xFF0000) != 0)
  {
    v65 |= 0x40000000u;
    *(_DWORD *)(v11 + 472) = v65;
    *(_DWORD *)(v11 + 412) = (__int16)v69;
  }
  v70 = *((_DWORD *)a2 + 10);
  if (v70 == 1)
  {
    if (sub_100086BDC(2))
    {
      v71 = 2;
      goto LABEL_85;
    }
    goto LABEL_129;
  }
  if (v70)
    goto LABEL_86;
  if (!sub_100086BDC(1))
  {
LABEL_129:
    v97 = "::CLP::LogEntry::Rose::RoseCommunicationEvent::RoseRangeResultEventSource_IsValid(value)";
    v98 = 11881;
    v99 = "set_source";
LABEL_130:
    __assert_rtn(v99, "CLPRoseCommunicationEvent.pb.h", v98, v97);
  }
  v71 = 1;
LABEL_85:
  v65 = *(_DWORD *)(v11 + 472) | 0x80;
  *(_DWORD *)(v11 + 472) = v65;
  *(_DWORD *)(v11 + 288) = v71;
LABEL_86:
  *(_DWORD *)(v11 + 292) = *((unsigned __int16 *)a2 + 28);
  *(_BYTE *)(v11 + 296) = a2[4];
  *(_BYTE *)(v11 + 297) = a4;
  *(_BYTE *)(v11 + 298) = a5;
  v72 = *((_QWORD *)a2 + 6);
  *(_DWORD *)(v11 + 472) = v65 | 0x1F00;
  *(_QWORD *)(v11 + 304) = v72;
  if (*(_BYTE *)(a3 + 36))
  {
    *(_DWORD *)(v11 + 472) = v65 | 0x3F00;
    v73 = *(_DWORD **)(v11 + 312);
    if (!v73)
      operator new();
    v74 = *(_DWORD *)a3;
    if (sub_100086BEC(*(_DWORD *)a3))
    {
      v73[13] |= 1u;
      v73[4] = v74;
      v75 = *(_DWORD *)(a3 + 4);
      if (sub_100086BEC(v75))
      {
        v73[13] |= 2u;
        v73[5] = v75;
        v76 = *(_DWORD *)(a3 + 8);
        if (sub_100086BEC(v76))
        {
          v73[13] |= 4u;
          v73[6] = v76;
          v77 = *(_DWORD *)(a3 + 12);
          if (sub_10006DA68(v77))
          {
            v73[13] |= 8u;
            v73[7] = v77;
            v78 = *(_DWORD *)(a3 + 16);
            if (sub_10006DA68(v78))
            {
              v73[13] |= 0x10u;
              v73[8] = v78;
              v79 = *(_DWORD *)(a3 + 20);
              if (sub_10006DA68(v79))
              {
                v73[13] |= 0x20u;
                v73[9] = v79;
                v80 = *(_DWORD *)(a3 + 24);
                if (sub_10006DA5C(v80))
                {
                  v73[13] |= 0x40u;
                  v73[10] = v80;
                  v81 = *(_DWORD *)(a3 + 28);
                  if (sub_10006DA5C(v81))
                  {
                    v73[13] |= 0x80u;
                    v73[11] = v81;
                    goto LABEL_98;
                  }
                  v100 = "::CLP::LogEntry::Rose::RoseCommunicationEvent::ME_CheckRSSIsResult_IsValid(value)";
                  v101 = 10927;
                  v102 = "set_check_rssis_result";
                }
                else
                {
                  v100 = "::CLP::LogEntry::Rose::RoseCommunicationEvent::ME_CheckTimestampsResult_IsValid(value)";
                  v101 = 10904;
                  v102 = "set_check_timestamps_result";
                }
              }
              else
              {
                v100 = "::CLP::LogEntry::Rose::RoseCommunicationEvent::ME_CheckFPSNRsOkForSensorFusionResult_IsValid(value)";
                v101 = 10881;
                v102 = "set_check_fp_snrs_ok_for_sensor_fusion_result";
              }
            }
            else
            {
              v100 = "::CLP::LogEntry::Rose::RoseCommunicationEvent::ME_CheckToaCirResult_IsValid(value)";
              v101 = 10858;
              v102 = "set_check_toa_cir_result";
            }
          }
          else
          {
            v100 = "::CLP::LogEntry::Rose::RoseCommunicationEvent::ME_CheckAoaCirResult_IsValid(value)";
            v101 = 10835;
            v102 = "set_check_aoa_cir_result";
          }
        }
        else
        {
          v100 = "::CLP::LogEntry::Rose::RoseCommunicationEvent::ME_CheckFPIndicesResult_IsValid(value)";
          v101 = 10812;
          v102 = "set_check_fp_indices_result";
        }
      }
      else
      {
        v100 = "::CLP::LogEntry::Rose::RoseCommunicationEvent::ME_CheckFPSNRsResult_IsValid(value)";
        v101 = 10789;
        v102 = "set_check_fp_snrs_result";
      }
    }
    else
    {
      v100 = "::CLP::LogEntry::Rose::RoseCommunicationEvent::ME_CheckPDOAResult_IsValid(value)";
      v101 = 10766;
      v102 = "set_check_pdoa_result";
    }
    __assert_rtn(v102, "CLPRoseCommunicationEvent.pb.h", v101, v100);
  }
LABEL_98:
  v82 = (uint64_t *)*((_QWORD *)a2 + 9);
  v83 = (uint64_t *)*((_QWORD *)a2 + 10);
  if (v82 != v83)
  {
    v84 = *(_DWORD *)(v11 + 328);
    do
    {
      v85 = *v82;
      if (v84 == *(_DWORD *)(v11 + 332))
      {
        sub_10006BB4C(v11 + 320, v84 + 1);
        v84 = *(_DWORD *)(v11 + 328);
      }
      v86 = *(_QWORD *)(v11 + 320);
      *(_DWORD *)(v11 + 328) = v84 + 1;
      *(_QWORD *)(v86 + 8 * v84) = v85;
      ++v82;
      ++v84;
    }
    while (v82 != v83);
  }
  if (a2[1])
  {
    v87 = *a2;
    *(_DWORD *)(v11 + 472) |= 0x10000u;
    *(_DWORD *)(v11 + 336) = v87;
  }
  v88 = *((unsigned __int16 *)a2 + 191);
  if (v88 >= 0x100)
  {
    *(_DWORD *)(v11 + 472) |= 0x100000u;
    *(_DWORD *)(v11 + 376) = v88;
  }
  v89 = *(_DWORD *)(a2 + 462);
  if ((v89 & 0xFF0000) != 0)
  {
    *(_DWORD *)(v11 + 476) |= 2u;
    *(_DWORD *)(v11 + 424) = (unsigned __int16)v89;
  }
  v90 = *((unsigned __int16 *)a2 + 233);
  if (v90 >= 0x100)
  {
    *(_DWORD *)(v11 + 476) |= 4u;
    *(_DWORD *)(v11 + 428) = v90;
  }
  if (a2[480])
  {
    v91 = *((_QWORD *)a2 + 59);
    *(_DWORD *)(v11 + 476) |= 8u;
    *(_QWORD *)(v11 + 432) = v91;
  }
  if (a2[496])
  {
    v92 = *((_QWORD *)a2 + 61);
    *(_DWORD *)(v11 + 476) |= 0x10u;
    *(_QWORD *)(v11 + 440) = v92;
  }
  v93 = *((unsigned __int16 *)a2 + 252);
  if (v93 >= 0x100)
  {
    *(_DWORD *)(v11 + 476) |= 0x20u;
    *(_DWORD *)(v11 + 448) = v93;
  }
  v94 = *((unsigned __int16 *)a2 + 253);
  if (v94 >= 0x100)
  {
    *(_DWORD *)(v11 + 476) |= 0x40u;
    *(_DWORD *)(v11 + 452) = v94;
  }
  v95 = *((unsigned __int16 *)a2 + 254);
  if (v95 >= 0x100)
  {
    *(_DWORD *)(v11 + 476) |= 0x80u;
    *(_DWORD *)(v11 + 456) = v95;
  }
  v96 = *((unsigned __int16 *)a2 + 255);
  if (v96 >= 0x100)
  {
    *(_DWORD *)(v11 + 476) |= 0x100u;
    *(_DWORD *)(v11 + 460) = v96;
  }
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
    sub_1003E3318();
  v37 = sub_10026C02C(a1, (wireless_diagnostics::google::protobuf::MessageLite *)v107);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
LABEL_33:
  sub_10011D2FC(v107);
  return v37;
}

void sub_10026E184(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,char a22)
{
  operator delete();
}

std::string *sub_10026E230(uint64_t a1, std::string *__str)
{
  std::string *v2;

  *(_DWORD *)(a1 + 468) |= 0x20u;
  v2 = *(std::string **)(a1 + 40);
  if (v2 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
    operator new();
  return std::string::operator=(v2, __str);
}

uint64_t sub_10026E298(uint64_t a1, __int128 *a2)
{
  __int16 *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  int v9;
  int v10;
  std::string *v11;
  std::string *v12;
  __int16 *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  int v19;
  int v20;
  std::string *v21;
  std::string *v22;
  int *v23;
  BOOL v24;
  int v25;
  unsigned int v26;
  unsigned __int8 v27;
  std::string *v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  _DWORD *v36;
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void **v42;
  unsigned __int16 *j;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  std::string *v49;
  NSObject *v50;
  void **v51;
  unsigned __int16 *i;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  std::string *v58;
  uint64_t v59;
  NSObject *v60;
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *v62;
  uint64_t v64;
  __int16 *v65;
  int v66;
  std::string v67;
  uint8_t buf;
  char v69[15];
  std::string __str;
  unsigned int v71;
  void **v72[8];
  std::string __dst;
  unsigned __int16 v74;
  std::string v75;
  __int128 v76;
  uint64_t v77;
  __int16 *v78;
  __int16 *v79;
  uint64_t v80;
  void **v81;
  unsigned __int16 *v82;
  uint64_t v83;

  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
    sub_1003E3508();
  v76 = *a2;
  v3 = (__int16 *)*((_QWORD *)a2 + 3);
  v77 = *((_QWORD *)a2 + 2);
  v78 = 0;
  v79 = 0;
  v80 = 0;
  sub_100152E14(&v78, v3, *((__int16 **)a2 + 4), 0x86BCA1AF286BCA1BLL * ((uint64_t)(*((_QWORD *)a2 + 4) - (_QWORD)v3) >> 3));
  v81 = 0;
  v82 = 0;
  v83 = 0;
  sub_100153448(&v81, *((_QWORD *)a2 + 6), *((_QWORD *)a2 + 7), (uint64_t)(*((_QWORD *)a2 + 7) - *((_QWORD *)a2 + 6)) >> 5);
  sub_10011C6A4(v72);
  v4 = sub_10026CA44((uint64_t)v72, 3, 0xFu, *(_QWORD *)(a1 + 120));
  *(_DWORD *)(v4 + 252) |= 0x20000u;
  v5 = *(_QWORD *)(v4 + 144);
  if (!v5)
    operator new();
  *(_DWORD *)(v5 + 96) |= 1u;
  v6 = *(_QWORD *)(v5 + 16);
  if (!v6)
    operator new();
  v7 = (unsigned __int16)v76;
  *(_DWORD *)(v6 + 32) |= 2u;
  *(_DWORD *)(v6 + 24) = v7;
  v71 = 0;
  if ((sub_10026CE00(&v71, BYTE2(v76)) & 1) == 0)
  {
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
      sub_1003E34DC();
    v59 = 0;
    goto LABEL_108;
  }
  v8 = v71;
  if ((sub_100086BB0(v71) & 1) == 0)
    __assert_rtn("set_session_type", "CLPRoseCommunicationEvent.pb.h", 13320, "::CLP::LogEntry::Rose::RoseCommunicationEvent::RoseSessionType_IsValid(value)");
  v9 = *(_DWORD *)(v5 + 96);
  v10 = WORD2(v76);
  *(_DWORD *)(v5 + 24) = v8;
  *(_DWORD *)(v5 + 28) = v10;
  *(_DWORD *)(v5 + 88) = BYTE6(v76);
  *((_BYTE *)&__str.__r_.__value_.__s + 23) = 8;
  __str.__r_.__value_.__r.__words[0] = *(_QWORD *)((char *)&v76 + 7);
  __str.__r_.__value_.__s.__data_[8] = 0;
  *(_DWORD *)(v5 + 96) = v9 | 0x1E;
  v11 = *(std::string **)(v5 + 32);
  v12 = (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString;
  if (v11 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
    operator new();
  std::string::operator=(v11, &__str);
  v13 = v78;
  v65 = v79;
  if (v78 == v79)
  {
LABEL_84:
    v51 = v81;
    for (i = v82; v51 != (void **)i; v51 += 4)
    {
      v53 = *(_DWORD *)(v5 + 76);
      v54 = *(int *)(v5 + 72);
      if ((int)v54 >= v53)
      {
        if (v53 == *(_DWORD *)(v5 + 80))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(v5 + 64), v53 + 1);
          v53 = *(_DWORD *)(v5 + 76);
        }
        *(_DWORD *)(v5 + 76) = v53 + 1;
        sub_1000B9074();
      }
      v55 = *(_QWORD *)(v5 + 64);
      *(_DWORD *)(v5 + 72) = v54 + 1;
      v56 = *(_QWORD *)(v55 + 8 * v54);
      v57 = *(_DWORD *)(v56 + 36);
      *(_DWORD *)(v56 + 16) = *(unsigned __int16 *)v51;
      LODWORD(v55) = *((unsigned __int16 *)v51 + 1);
      *(_DWORD *)(v56 + 36) = v57 | 3;
      *(_DWORD *)(v56 + 20) = v55;
      sub_10027C21C(&__dst, v51[1], (_BYTE *)v51[2] - (_BYTE *)v51[1]);
      *(_DWORD *)(v56 + 36) |= 4u;
      v58 = *(std::string **)(v56 + 24);
      if (v58 == v12)
        operator new();
      std::string::operator=(v58, &__dst);
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__dst.__r_.__value_.__l.__data_);
    }
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
      sub_1003E33D0();
    v59 = sub_10026C02C(a1, (wireless_diagnostics::google::protobuf::MessageLite *)v72);
    goto LABEL_106;
  }
  v62 = (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(v5 + 40);
  v64 = v5;
  while (1)
  {
    v14 = *(_DWORD *)(v5 + 52);
    v15 = *(int *)(v5 + 48);
    if ((int)v15 >= v14)
    {
      if (v14 == *(_DWORD *)(v5 + 56))
      {
        wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v62, v14 + 1);
        v14 = *(_DWORD *)(v5 + 52);
      }
      *(_DWORD *)(v5 + 52) = v14 + 1;
      sub_1000B90D4();
    }
    v16 = *(_QWORD *)(v5 + 40);
    *(_DWORD *)(v5 + 48) = v15 + 1;
    v17 = *(_QWORD *)(v16 + 8 * v15);
    v74 = *v13;
    if (!(_BYTE)v74)
      break;
    v18 = 0;
LABEL_23:
    if ((sub_100086BF8(v18) & 1) == 0)
      __assert_rtn("set_packet_type", "CLPRoseCommunicationEvent.pb.h", 12964, "::CLP::LogEntry::Rose::RoseCommunicationEvent::RangeCIRPacketType_IsValid(value)");
    v19 = *(_DWORD *)(v17 + 100);
    *(_DWORD *)(v17 + 16) = v18;
    v20 = *((unsigned __int8 *)v13 + 2);
    *(_DWORD *)(v17 + 100) = v19 | 3;
    *(_DWORD *)(v17 + 20) = v20;
    sub_10027C21C(&__dst, *((void **)v13 + 1), *((_QWORD *)v13 + 2) - *((_QWORD *)v13 + 1));
    *(_DWORD *)(v17 + 100) |= 4u;
    v21 = *(std::string **)(v17 + 24);
    if (v21 == v12)
      operator new();
    std::string::operator=(v21, &__dst);
    sub_10027C21C(&v75, *((void **)v13 + 4), *((_QWORD *)v13 + 5) - *((_QWORD *)v13 + 4));
    *(_DWORD *)(v17 + 100) |= 8u;
    v22 = *(std::string **)(v17 + 32);
    if (v22 == v12)
      operator new();
    std::string::operator=(v22, &v75);
    *(_DWORD *)(v17 + 100) |= 0x10u;
    v23 = *(int **)(v17 + 40);
    if (!v23)
      operator new();
    v24 = 0;
    v25 = 0;
    v26 = 1;
    v27 = 1;
    while ((v27 & (_BYTE)v13[1]) == 0)
    {
LABEL_56:
      v27 = 2 * v26;
      v26 = (2 * v26) & 0xFE;
      v24 = v26 > 4;
      if (v26 >= 5)
      {
        if (*((_BYTE *)v13 + 88))
        {
          v39 = *((_QWORD *)v13 + 10);
          *(_DWORD *)(v17 + 100) |= 0x20u;
          *(_QWORD *)(v17 + 48) = v39;
        }
        if (*((_BYTE *)v13 + 104))
        {
          v40 = *((_QWORD *)v13 + 12);
          *(_DWORD *)(v17 + 100) |= 0x40u;
          *(_QWORD *)(v17 + 56) = v40;
        }
        if (*((_BYTE *)v13 + 120))
        {
          v41 = *((_QWORD *)v13 + 14);
          *(_DWORD *)(v17 + 100) |= 0x80u;
          *(_QWORD *)(v17 + 64) = v41;
        }
        v42 = (void **)*((_QWORD *)v13 + 16);
        for (j = (unsigned __int16 *)*((_QWORD *)v13 + 17); v42 != (void **)j; v42 += 4)
        {
          v44 = *(_DWORD *)(v17 + 84);
          v45 = *(int *)(v17 + 80);
          if ((int)v45 >= v44)
          {
            if (v44 == *(_DWORD *)(v17 + 88))
            {
              wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(v17 + 72), v44 + 1);
              v44 = *(_DWORD *)(v17 + 84);
            }
            *(_DWORD *)(v17 + 84) = v44 + 1;
            sub_1000B9074();
          }
          v46 = *(_QWORD *)(v17 + 72);
          *(_DWORD *)(v17 + 80) = v45 + 1;
          v47 = *(_QWORD *)(v46 + 8 * v45);
          v48 = *(_DWORD *)(v47 + 36);
          *(_DWORD *)(v47 + 16) = *(unsigned __int16 *)v42;
          LODWORD(v46) = *((unsigned __int16 *)v42 + 1);
          *(_DWORD *)(v47 + 36) = v48 | 3;
          *(_DWORD *)(v47 + 20) = v46;
          sub_10027C21C(&v67, v42[1], (_BYTE *)v42[2] - (_BYTE *)v42[1]);
          *(_DWORD *)(v47 + 36) |= 4u;
          v49 = *(std::string **)(v47 + 24);
          if (v49 == v12)
            operator new();
          std::string::operator=(v49, &v67);
          if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v67.__r_.__value_.__l.__data_);
        }
        goto LABEL_78;
      }
    }
    v28 = v12;
    if (v27 <= 4u && ((1 << v27) & 0x16) != 0)
    {
      v29 = 0;
      v66 = v25 + 1;
      v30 = *((_QWORD *)v13 + 7) + ((uint64_t)v25 << 10);
      while (1)
      {
        if (v27 == 2)
        {
          v34 = v23[13];
          v32 = v23[12];
          if ((int)v32 >= v34)
          {
            if (v34 == v23[14])
            {
              wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(v23 + 10), v34 + 1);
              v34 = v23[13];
            }
            v23[13] = v34 + 1;
            sub_1000B9014();
          }
          v33 = *((_QWORD *)v23 + 5);
          v23[12] = v32 + 1;
        }
        else if (v27 == 1)
        {
          v31 = v23[7];
          v32 = v23[6];
          if ((int)v32 >= v31)
          {
            if (v31 == v23[8])
            {
              wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(v23 + 4), v31 + 1);
              v31 = v23[7];
            }
            v23[7] = v31 + 1;
            sub_1000B9014();
          }
          v33 = *((_QWORD *)v23 + 2);
          v23[6] = v32 + 1;
        }
        else
        {
          v35 = v23[19];
          v32 = v23[18];
          if ((int)v32 >= v35)
          {
            if (v35 == v23[20])
            {
              wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(v23 + 16), v35 + 1);
              v35 = v23[19];
            }
            v23[19] = v35 + 1;
            sub_1000B9014();
          }
          v33 = *((_QWORD *)v23 + 8);
          v23[18] = v32 + 1;
        }
        v36 = *(_DWORD **)(v33 + 8 * v32);
        if (!v36)
          break;
        v37 = v36[7];
        v36[4] = *(__int16 *)(v30 + v29);
        v38 = *(__int16 *)(v30 + v29 + 2);
        v36[7] = v37 | 3;
        v36[5] = v38;
        v29 += 4;
        if (v29 == 1024)
        {
          v25 = v66;
          v12 = v28;
          goto LABEL_56;
        }
      }
    }
    v50 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
      sub_1003E34A0(&buf, v69, v50);
    v12 = v28;
LABEL_78:
    if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v75.__r_.__value_.__l.__data_);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst.__r_.__value_.__l.__data_);
    if (!v24)
      goto LABEL_105;
    v13 += 76;
    v5 = v64;
    if (v13 == v65)
      goto LABEL_84;
  }
  if (HIBYTE(v74) < 0xEu && ((0x3C3Fu >> SHIBYTE(v74)) & 1) != 0)
  {
    v18 = dword_1004749BC[SHIBYTE(v74)];
    goto LABEL_23;
  }
  v60 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
  {
    sub_10036C798(&v74);
    sub_1003E3428((char *)&__dst, (uint64_t)&v75, v60, &v67);
    v60 = v67.__r_.__value_.__r.__words[0];
  }
  if (os_log_type_enabled(v60, OS_LOG_TYPE_ERROR))
    sub_1003E33FC();
LABEL_105:
  v59 = 0;
LABEL_106:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
LABEL_108:
  sub_10011D2FC(v72);
  v72[0] = (void **)&v81;
  sub_100153338(v72);
  v72[0] = (void **)&v78;
  sub_1001533C4(v72);
  return v59;
}

void sub_10026EC8C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  operator delete();
}

uint64_t sub_10026EDC0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  __int16 *v12;
  __int16 *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  int v18;
  int v19;
  __int16 *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  _DWORD *v24;
  int v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  _DWORD *v30;
  int v31;
  int v32;
  uint64_t v33;
  _QWORD v35[8];

  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
    sub_1003E3560();
  sub_10011C6A4(v35);
  v4 = sub_10026CA44((uint64_t)v35, 3, 0x11u, *(_QWORD *)(a1 + 120));
  *(_DWORD *)(v4 + 252) |= 0x80000u;
  v5 = *(_QWORD *)(v4 + 160);
  if (!v5)
    operator new();
  v6 = *(_DWORD *)(v5 + 132);
  *(_QWORD *)(v5 + 16) = *(_QWORD *)a2;
  *(_DWORD *)(v5 + 24) = *(unsigned __int16 *)(a2 + 8);
  *(_DWORD *)(v5 + 28) = *(unsigned __int8 *)(a2 + 10);
  *(_DWORD *)(v5 + 132) = v6 | 0xF;
  v7 = *(_QWORD *)(v5 + 32);
  if (!v7)
    operator new();
  v8 = *(unsigned __int16 *)(a2 + 12);
  *(_DWORD *)(v7 + 32) |= 2u;
  *(_DWORD *)(v7 + 24) = v8;
  v9 = *(unsigned __int16 *)(a2 + 14);
  v10 = *(_DWORD *)(v5 + 132);
  *(_DWORD *)(v5 + 132) = v10 | 0x10;
  *(_DWORD *)(v5 + 72) = v9;
  *(_DWORD *)(v5 + 76) = *(_DWORD *)(a2 + 16);
  v11 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 132) = v10 | 0x230;
  *(_QWORD *)(v5 + 40) = v11;
  v12 = (__int16 *)(a2 + 32);
  v13 = (__int16 *)(a2 + 64);
  do
  {
    v14 = *(_DWORD *)(v5 + 60);
    v15 = *(int *)(v5 + 56);
    if ((int)v15 >= v14)
    {
      if (v14 == *(_DWORD *)(v5 + 64))
      {
        wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(v5 + 48), v14 + 1);
        v14 = *(_DWORD *)(v5 + 60);
      }
      *(_DWORD *)(v5 + 60) = v14 + 1;
      sub_1000B9014();
    }
    v16 = *(_QWORD *)(v5 + 48);
    *(_DWORD *)(v5 + 56) = v15 + 1;
    v17 = *(_DWORD **)(v16 + 8 * v15);
    v18 = v17[7];
    v17[4] = *v12;
    v19 = v12[1];
    v17[7] = v18 | 3;
    v17[5] = v19;
    v12 += 2;
  }
  while (v12 != v13);
  v20 = (__int16 *)(a2 + 96);
  do
  {
    v21 = *(_DWORD *)(v5 + 92);
    v22 = *(int *)(v5 + 88);
    if ((int)v22 >= v21)
    {
      if (v21 == *(_DWORD *)(v5 + 96))
      {
        wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(v5 + 80), v21 + 1);
        v21 = *(_DWORD *)(v5 + 92);
      }
      *(_DWORD *)(v5 + 92) = v21 + 1;
      sub_1000B9014();
    }
    v23 = *(_QWORD *)(v5 + 80);
    *(_DWORD *)(v5 + 88) = v22 + 1;
    v24 = *(_DWORD **)(v23 + 8 * v22);
    v25 = v24[7];
    v24[4] = *v13;
    v26 = v13[1];
    v24[7] = v25 | 3;
    v24[5] = v26;
    v13 += 2;
  }
  while (v13 != v20);
  do
  {
    v27 = *(_DWORD *)(v5 + 116);
    v28 = *(int *)(v5 + 112);
    if ((int)v28 >= v27)
    {
      if (v27 == *(_DWORD *)(v5 + 120))
      {
        wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(v5 + 104), v27 + 1);
        v27 = *(_DWORD *)(v5 + 116);
      }
      *(_DWORD *)(v5 + 116) = v27 + 1;
      sub_1000B9014();
    }
    v29 = *(_QWORD *)(v5 + 104);
    *(_DWORD *)(v5 + 112) = v28 + 1;
    v30 = *(_DWORD **)(v29 + 8 * v28);
    v31 = v30[7];
    v30[4] = *v20;
    v32 = v20[1];
    v30[7] = v31 | 3;
    v30[5] = v32;
    v20 += 2;
  }
  while (v20 != (__int16 *)(a2 + 128));
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
    sub_1003E3534();
  v33 = sub_10026C02C(a1, (wireless_diagnostics::google::protobuf::MessageLite *)v35);
  sub_10011D2FC(v35);
  return v33;
}

void sub_10026F104()
{
  operator delete();
}

uint64_t sub_10026F160(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  __int16 *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  int v17;
  int v18;
  uint64_t v19;
  _QWORD v21[8];

  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
    sub_1003E35B8();
  sub_10011C6A4(v21);
  v4 = sub_10026CA44((uint64_t)v21, 3, 0x12u, *(_QWORD *)(a1 + 120));
  *(_DWORD *)(v4 + 252) |= 0x100000u;
  v5 = *(_QWORD *)(v4 + 168);
  if (!v5)
    operator new();
  v6 = *(_DWORD *)(v5 + 96);
  *(_QWORD *)(v5 + 16) = *(_QWORD *)a2;
  *(_DWORD *)(v5 + 24) = *(unsigned __int16 *)(a2 + 8);
  *(_DWORD *)(v5 + 28) = *(unsigned __int8 *)(a2 + 10);
  *(_DWORD *)(v5 + 96) = v6 | 0xF;
  v7 = *(_QWORD *)(v5 + 32);
  if (!v7)
    operator new();
  v8 = *(unsigned __int16 *)(a2 + 12);
  *(_DWORD *)(v7 + 32) |= 2u;
  *(_DWORD *)(v7 + 24) = v8;
  v9 = *(_DWORD *)(v5 + 96);
  *(_DWORD *)(v5 + 40) = *(unsigned __int16 *)(a2 + 14);
  *(_DWORD *)(v5 + 44) = *(unsigned __int8 *)(a2 + 16);
  v10 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 96) = v9 | 0x70;
  *(_QWORD *)(v5 + 48) = v10;
  *(_DWORD *)(v5 + 88) = *(_DWORD *)(a2 + 32);
  v11 = *(_QWORD *)(a2 + 40);
  *(_DWORD *)(v5 + 96) = v9 | 0x2F0;
  *(_QWORD *)(v5 + 56) = v11;
  v12 = (__int16 *)(a2 + 48);
  do
  {
    v13 = *(_DWORD *)(v5 + 76);
    v14 = *(int *)(v5 + 72);
    if ((int)v14 >= v13)
    {
      if (v13 == *(_DWORD *)(v5 + 80))
      {
        wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(v5 + 64), v13 + 1);
        v13 = *(_DWORD *)(v5 + 76);
      }
      *(_DWORD *)(v5 + 76) = v13 + 1;
      sub_1000B9014();
    }
    v15 = *(_QWORD *)(v5 + 64);
    *(_DWORD *)(v5 + 72) = v14 + 1;
    v16 = *(_DWORD **)(v15 + 8 * v14);
    v17 = v16[7];
    v16[4] = *v12;
    v18 = v12[1];
    v16[7] = v17 | 3;
    v16[5] = v18;
    v12 += 2;
  }
  while (v12 != (__int16 *)(a2 + 80));
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
    sub_1003E358C();
  v19 = sub_10026C02C(a1, (wireless_diagnostics::google::protobuf::MessageLite *)v21);
  sub_10011D2FC(v21);
  return v19;
}

void sub_10026F38C()
{
  operator delete();
}

uint64_t sub_10026F3E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t i;
  int v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  _DWORD *v28;
  int v29;
  int v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t j;
  int v35;
  uint64_t v36;
  uint64_t v37;
  _DWORD *v38;
  int v39;
  int v40;
  uint64_t v41;
  _QWORD v43[8];

  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
    sub_1003E3610();
  sub_10011C6A4(v43);
  v4 = sub_10026CA44((uint64_t)v43, 3, 0x19u, *(_QWORD *)(a1 + 120));
  *(_DWORD *)(v4 + 252) |= 0x4000000u;
  v5 = *(_QWORD *)(v4 + 216);
  if (!v5)
    operator new();
  v6 = *(_DWORD *)(v5 + 76);
  *(_QWORD *)(v5 + 16) = *(_QWORD *)a2;
  *(_DWORD *)(v5 + 24) = *(unsigned __int16 *)(a2 + 8);
  *(_DWORD *)(v5 + 28) = *(unsigned __int8 *)(a2 + 10);
  *(_DWORD *)(v5 + 44) = *(unsigned __int16 *)(a2 + 14);
  *(_DWORD *)(v5 + 40) = *(unsigned __int8 *)(a2 + 11);
  *(_DWORD *)(v5 + 76) = v6 | 0x3F;
  v7 = *(_QWORD *)(v5 + 32);
  if (!v7)
    operator new();
  v8 = *(unsigned __int16 *)(a2 + 12);
  *(_DWORD *)(v7 + 32) |= 2u;
  *(_DWORD *)(v7 + 24) = v8;
  v9 = *(_DWORD *)(v5 + 60);
  v10 = *(int *)(v5 + 56);
  if ((int)v10 >= v9)
  {
    if (v9 == *(_DWORD *)(v5 + 64))
    {
      wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(v5 + 48), v9 + 1);
      v9 = *(_DWORD *)(v5 + 60);
    }
    *(_DWORD *)(v5 + 60) = v9 + 1;
    sub_1000B9134();
  }
  v11 = *(_QWORD *)(v5 + 48);
  *(_DWORD *)(v5 + 56) = v10 + 1;
  v12 = *(_DWORD **)(v11 + 8 * v10);
  v13 = sub_10015BEDC(a2, 0);
  v12[15] |= 1u;
  v12[4] = v13;
  v14 = sub_10015BF04(a2, 0);
  v12[15] |= 2u;
  v12[5] = v14;
  v15 = sub_10015BF2C(a2, 0);
  v12[15] |= 4u;
  v12[6] = v15;
  v16 = sub_10015BF54(a2, 0);
  v12[15] |= 8u;
  v12[7] = v16;
  v17 = sub_10015BF7C(a2, 0);
  for (i = 0; i != 32; i += 4)
  {
    v19 = v12[11];
    v20 = (int)v12[10];
    if ((int)v20 >= v19)
    {
      if (v19 == v12[12])
      {
        wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(v12 + 8), v19 + 1);
        v19 = v12[11];
      }
      v12[11] = v19 + 1;
      sub_1000B9014();
    }
    v21 = *((_QWORD *)v12 + 4);
    v12[10] = v20 + 1;
    v22 = *(_DWORD **)(v21 + 8 * v20);
    v23 = v22[7];
    v22[4] = *(__int16 *)(v17 + i);
    v24 = *(__int16 *)(v17 + i + 2);
    v22[7] = v23 | 3;
    v22[5] = v24;
  }
  v25 = *(_DWORD *)(v5 + 60);
  v26 = *(int *)(v5 + 56);
  if ((int)v26 >= v25)
  {
    if (v25 == *(_DWORD *)(v5 + 64))
    {
      wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(v5 + 48), v25 + 1);
      v25 = *(_DWORD *)(v5 + 60);
    }
    *(_DWORD *)(v5 + 60) = v25 + 1;
    sub_1000B9134();
  }
  v27 = *(_QWORD *)(v5 + 48);
  *(_DWORD *)(v5 + 56) = v26 + 1;
  v28 = *(_DWORD **)(v27 + 8 * v26);
  v29 = sub_10015BEDC(a2, 1);
  v28[15] |= 1u;
  v28[4] = v29;
  v30 = sub_10015BF04(a2, 1);
  v28[15] |= 2u;
  v28[5] = v30;
  v31 = sub_10015BF2C(a2, 1);
  v28[15] |= 4u;
  v28[6] = v31;
  v32 = sub_10015BF54(a2, 1);
  v28[15] |= 8u;
  v28[7] = v32;
  v33 = sub_10015BF7C(a2, 1);
  for (j = 0; j != 32; j += 4)
  {
    v35 = v28[11];
    v36 = (int)v28[10];
    if ((int)v36 >= v35)
    {
      if (v35 == v28[12])
      {
        wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(v28 + 8), v35 + 1);
        v35 = v28[11];
      }
      v28[11] = v35 + 1;
      sub_1000B9014();
    }
    v37 = *((_QWORD *)v28 + 4);
    v28[10] = v36 + 1;
    v38 = *(_DWORD **)(v37 + 8 * v36);
    v39 = v38[7];
    v38[4] = *(__int16 *)(v33 + j);
    v40 = *(__int16 *)(v33 + j + 2);
    v38[7] = v39 | 3;
    v38[5] = v40;
  }
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
    sub_1003E35E4();
  v41 = sub_10026C02C(a1, (wireless_diagnostics::google::protobuf::MessageLite *)v43);
  sub_10011D2FC(v43);
  return v41;
}

void sub_10026F84C()
{
  operator delete();
}

uint64_t sub_10026F8BC(int *a1)
{
  int v2;
  uint64_t v3;
  uint64_t v4;

  v2 = a1[15];
  v3 = a1[14];
  if ((int)v3 >= v2)
  {
    if (v2 == a1[16])
    {
      wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 12), v2 + 1);
      v2 = a1[15];
    }
    a1[15] = v2 + 1;
    sub_1000B9134();
  }
  v4 = *((_QWORD *)a1 + 6);
  a1[14] = v3 + 1;
  return *(_QWORD *)(v4 + 8 * v3);
}

uint64_t sub_10026F938(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  int v9;
  std::string *v10;
  int v11;
  uint64_t v12;
  std::string __p;
  unsigned int v15;
  _QWORD v16[8];

  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
    sub_1003E3694();
  sub_10011C6A4(v16);
  v4 = sub_10026CA44((uint64_t)v16, 3, 0x10u, *(_QWORD *)(a1 + 120));
  *(_DWORD *)(v4 + 252) |= 0x40000u;
  v5 = *(_QWORD *)(v4 + 152);
  if (!v5)
    operator new();
  *(_DWORD *)(v5 + 300) |= 1u;
  v6 = *(_QWORD *)(v5 + 16);
  if (!v6)
    operator new();
  v7 = *(unsigned __int16 *)(a2 + 16);
  *(_DWORD *)(v6 + 32) |= 2u;
  *(_DWORD *)(v6 + 24) = v7;
  v15 = 0;
  if ((sub_10026CE00(&v15, *(unsigned __int8 *)(a2 + 18)) & 1) != 0)
  {
    *((_BYTE *)&__p.__r_.__value_.__s + 23) = 8;
    __p.__r_.__value_.__r.__words[0] = *(_QWORD *)(a2 + 23);
    __p.__r_.__value_.__s.__data_[8] = 0;
    v8 = v15;
    if ((sub_100086BB0(v15) & 1) == 0)
      __assert_rtn("set_session_type", "CLPRoseCommunicationEvent.pb.h", 13549, "::CLP::LogEntry::Rose::RoseCommunicationEvent::RoseSessionType_IsValid(value)");
    v9 = *(_DWORD *)(v5 + 300);
    *(_DWORD *)(v5 + 24) = v8;
    *(_DWORD *)(v5 + 28) = *(unsigned __int16 *)(a2 + 20);
    *(_DWORD *)(v5 + 120) = *(unsigned __int8 *)(a2 + 22);
    *(_DWORD *)(v5 + 300) = v9 | 0x1E;
    v10 = *(std::string **)(v5 + 32);
    if (v10 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
      operator new();
    std::string::operator=(v10, &__p);
    *(_OWORD *)(v5 + 40) = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(v5 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(v5 + 72) = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(v5 + 88) = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(v5 + 224) = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(v5 + 240) = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(v5 + 256) = *(_OWORD *)(a2 + 136);
    *(_OWORD *)(v5 + 272) = *(_OWORD *)(a2 + 152);
    *(_QWORD *)(v5 + 112) = *(_QWORD *)(a2 + 168);
    *(_OWORD *)(v5 + 128) = *(_OWORD *)(a2 + 176);
    *(_OWORD *)(v5 + 144) = *(_OWORD *)(a2 + 192);
    *(_OWORD *)(v5 + 160) = *(_OWORD *)(a2 + 208);
    *(_OWORD *)(v5 + 176) = *(_OWORD *)(a2 + 224);
    *(_OWORD *)(v5 + 192) = *(_OWORD *)(a2 + 240);
    *(_QWORD *)(v5 + 208) = *(_QWORD *)(a2 + 256);
    *(_QWORD *)(v5 + 216) = *(_QWORD *)a2;
    v11 = *(unsigned __int16 *)(a2 + 8);
    *(int8x8_t *)(v5 + 300) = vorr_s8(*(int8x8_t *)(v5 + 300), (int8x8_t)0xFFFFFDFE0);
    *(_DWORD *)(v5 + 124) = v11;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
      sub_1003E363C();
    v12 = sub_10026C02C(a1, (wireless_diagnostics::google::protobuf::MessageLite *)v16);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
      sub_1003E3668();
    v12 = 0;
  }
  sub_10011D2FC(v16);
  return v12;
}

void sub_10026FC0C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
  operator delete();
}

uint64_t sub_10026FC78(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  uint64_t v37;
  const char *v39;
  int v40;
  const char *v41;
  unsigned int v42;
  _QWORD v43[8];

  if (*((_DWORD *)a2 + 6))
    sub_1003E3740();
  if (!a2[208])
    sub_1003E36C0();
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
    sub_1003E3714();
  sub_10011C6A4(v43);
  v4 = sub_10026CA44((uint64_t)v43, 3, 0x13u, *(_QWORD *)(a1 + 120));
  *(_DWORD *)(v4 + 252) |= 0x200000u;
  v5 = *(_QWORD *)(v4 + 176);
  if (!v5)
    operator new();
  if (a2[40])
  {
    v6 = *((_QWORD *)a2 + 4);
    v7 = *(_DWORD *)(v5 + 232) | 1;
    *(_DWORD *)(v5 + 232) = v7;
    *(_QWORD *)(v5 + 16) = v6;
  }
  else
  {
    v7 = *(_DWORD *)(v5 + 232);
  }
  v8 = *((unsigned __int16 *)a2 + 25);
  *(_DWORD *)(v5 + 232) = v7 | 2;
  *(_DWORD *)(v5 + 24) = v8;
  v42 = 0;
  if ((sub_10026CC18(&v42, *((unsigned __int16 *)a2 + 24)) & 1) == 0)
  {
    v37 = 0;
    goto LABEL_22;
  }
  v9 = v42;
  if (!sub_100086B74(v42))
  {
    v39 = "::CLP::LogEntry::Rose::RoseCommunicationEvent::RoseErrorCode_IsValid(value)";
    v40 = 15224;
    v41 = "set_error_code";
    goto LABEL_27;
  }
  v10 = *(_DWORD *)(v5 + 232);
  *(_DWORD *)(v5 + 28) = v9;
  *(_DWORD *)(v5 + 40) = *((unsigned __int16 *)a2 + 29);
  *(_QWORD *)(v5 + 32) = *((_QWORD *)a2 + 8);
  v11 = *((_QWORD *)a2 + 9);
  v12 = v10 | 0x3C;
  *(_DWORD *)(v5 + 232) = v12;
  *(_QWORD *)(v5 + 48) = v11;
  if (a2[1])
  {
    v13 = *a2 != 5;
    if (sub_10006DA5C(v13))
    {
      v12 = *(_DWORD *)(v5 + 232) | 0x40;
      *(_DWORD *)(v5 + 232) = v12;
      *(_DWORD *)(v5 + 44) = v13;
      goto LABEL_15;
    }
    v39 = "::CLP::LogEntry::Rose::RoseCommunicationEvent::RoseRFChannel_IsValid(value)";
    v40 = 15313;
    v41 = "set_rf_channel";
LABEL_27:
    __assert_rtn(v41, "CLPRoseCommunicationEvent.pb.h", v40, v39);
  }
LABEL_15:
  if (a2[16])
  {
    v14 = *((_QWORD *)a2 + 1);
    v12 |= 0x80u;
    *(_DWORD *)(v5 + 232) = v12;
    *(_QWORD *)(v5 + 56) = v14;
  }
  if (!a2[208])
    sub_10000BA44();
  v15 = *((unsigned __int16 *)a2 + 50);
  *(_DWORD *)(v5 + 232) = v12 | 0x100;
  *(_DWORD *)(v5 + 64) = v15;
  v16 = *((unsigned __int16 *)a2 + 51);
  *(_DWORD *)(v5 + 232) = v12 | 0x300;
  *(_DWORD *)(v5 + 68) = v16;
  v17 = a2[104];
  *(_DWORD *)(v5 + 232) = v12 | 0x700;
  *(_DWORD *)(v5 + 72) = v17;
  v18 = a2[105];
  *(_DWORD *)(v5 + 232) = v12 | 0xF00;
  *(_DWORD *)(v5 + 76) = v18;
  v19 = *((unsigned __int16 *)a2 + 53);
  *(_DWORD *)(v5 + 232) = v12 | 0x1F00;
  *(_DWORD *)(v5 + 88) = v19;
  v20 = *(_QWORD *)(a2 + 108);
  *(_DWORD *)(v5 + 232) = v12 | 0x3F00;
  *(_QWORD *)(v5 + 80) = v20;
  v21 = *(_QWORD *)(a2 + 116);
  *(_DWORD *)(v5 + 232) = v12 | 0x7F00;
  *(_QWORD *)(v5 + 96) = v21;
  LODWORD(v21) = *((unsigned __int16 *)a2 + 62);
  *(_DWORD *)(v5 + 232) = v12 | 0xFF00;
  *(_DWORD *)(v5 + 92) = v21;
  LODWORD(v21) = a2[126];
  *(_DWORD *)(v5 + 232) = v12 | 0x1FF00;
  *(_DWORD *)(v5 + 104) = v21;
  LODWORD(v21) = a2[127];
  *(_DWORD *)(v5 + 232) = v12 | 0x3FF00;
  *(_DWORD *)(v5 + 108) = v21;
  v22 = *((_QWORD *)a2 + 16);
  *(_DWORD *)(v5 + 232) = v12 | 0x7FF00;
  *(_QWORD *)(v5 + 112) = v22;
  v23 = *((_QWORD *)a2 + 17);
  *(_DWORD *)(v5 + 232) = v12 | 0xFFF00;
  *(_QWORD *)(v5 + 120) = v23;
  LODWORD(v23) = *((__int16 *)a2 + 72);
  *(_DWORD *)(v5 + 232) = v12 | 0x1FFF00;
  *(_DWORD *)(v5 + 128) = v23;
  LODWORD(v23) = *((__int16 *)a2 + 73);
  *(_DWORD *)(v5 + 232) = v12 | 0x3FFF00;
  *(_DWORD *)(v5 + 132) = v23;
  LODWORD(v23) = *((unsigned __int16 *)a2 + 74);
  *(_DWORD *)(v5 + 232) = v12 | 0x7FFF00;
  *(_DWORD *)(v5 + 136) = v23;
  LODWORD(v23) = *((__int16 *)a2 + 75);
  *(_DWORD *)(v5 + 232) = v12 | 0xFFFF00;
  *(_DWORD *)(v5 + 140) = v23;
  LODWORD(v23) = *((__int16 *)a2 + 76);
  *(_DWORD *)(v5 + 232) = v12 | 0x1FFFF00;
  *(_DWORD *)(v5 + 144) = v23;
  LODWORD(v23) = *(_DWORD *)(a2 + 154);
  *(_DWORD *)(v5 + 232) = v12 | 0x3FFFF00;
  *(_DWORD *)(v5 + 148) = v23;
  LODWORD(v23) = (char)a2[158];
  *(_DWORD *)(v5 + 232) = v12 | 0x7FFFF00;
  *(_DWORD *)(v5 + 152) = v23;
  LODWORD(v23) = (char)a2[159];
  *(_DWORD *)(v5 + 232) = v12 | 0xFFFFF00;
  *(_DWORD *)(v5 + 156) = v23;
  LODWORD(v23) = (char)a2[160];
  *(_DWORD *)(v5 + 232) = v12 | 0x1FFFFF00;
  *(_DWORD *)(v5 + 160) = v23;
  LODWORD(v23) = *(__int16 *)(a2 + 161);
  *(_DWORD *)(v5 + 232) = v12 | 0x3FFFFF00;
  *(_DWORD *)(v5 + 164) = v23;
  LODWORD(v23) = *(__int16 *)(a2 + 163);
  *(_DWORD *)(v5 + 232) = v12 | 0x7FFFFF00;
  *(_DWORD *)(v5 + 168) = v23;
  LODWORD(v23) = a2[165];
  *(_DWORD *)(v5 + 232) = v12 | 0xFFFFFF00;
  *(_DWORD *)(v5 + 172) = v23;
  v24 = *((__int16 *)a2 + 83);
  LODWORD(v23) = *(_DWORD *)(v5 + 236);
  *(_DWORD *)(v5 + 236) = v23 | 1;
  *(_DWORD *)(v5 + 176) = v24;
  v25 = *((__int16 *)a2 + 84);
  *(_DWORD *)(v5 + 236) = v23 | 3;
  *(_DWORD *)(v5 + 180) = v25;
  v26 = a2[170];
  *(_DWORD *)(v5 + 236) = v23 | 7;
  *(_DWORD *)(v5 + 184) = v26;
  v27 = *(__int16 *)(a2 + 171);
  *(_DWORD *)(v5 + 236) = v23 | 0xF;
  *(_DWORD *)(v5 + 188) = v27;
  v28 = *(__int16 *)(a2 + 173);
  *(_DWORD *)(v5 + 236) = v23 | 0x1F;
  *(_DWORD *)(v5 + 192) = v28;
  v29 = *(_DWORD *)(a2 + 175);
  *(_DWORD *)(v5 + 236) = v23 | 0x3F;
  *(_DWORD *)(v5 + 196) = v29;
  v30 = a2[179];
  *(_DWORD *)(v5 + 236) = v23 | 0x7F;
  *(_DWORD *)(v5 + 200) = v30;
  v31 = *((unsigned __int16 *)a2 + 90);
  *(_DWORD *)(v5 + 236) = v23 | 0xFF;
  *(_DWORD *)(v5 + 204) = v31;
  v32 = *((unsigned __int16 *)a2 + 91);
  *(_DWORD *)(v5 + 236) = v23 | 0x1FF;
  *(_DWORD *)(v5 + 208) = v32;
  v33 = *((unsigned __int16 *)a2 + 92);
  *(_DWORD *)(v5 + 236) = v23 | 0x3FF;
  *(_DWORD *)(v5 + 212) = v33;
  v34 = *((__int16 *)a2 + 93);
  *(_DWORD *)(v5 + 236) = v23 | 0x7FF;
  *(_DWORD *)(v5 + 216) = v34;
  v35 = *((__int16 *)a2 + 95);
  *(_DWORD *)(v5 + 236) = v23 | 0x17FF;
  *(_DWORD *)(v5 + 224) = v35;
  v36 = *((__int16 *)a2 + 94);
  *(_DWORD *)(v5 + 236) = v23 | 0x1FFF;
  *(_DWORD *)(v5 + 220) = v36;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
    sub_1003E36E8();
  v37 = sub_10026C02C(a1, (wireless_diagnostics::google::protobuf::MessageLite *)v43);
LABEL_22:
  sub_10011D2FC(v43);
  return v37;
}

void sub_1002700F8()
{
  operator delete();
}

uint64_t sub_100270138(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  const char *v17;
  int v18;
  const char *v19;
  unsigned int v20;
  _QWORD v21[8];

  if (*((_DWORD *)a2 + 6) != 1)
    sub_1003E37C0();
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
    sub_1003E3794();
  sub_10011C6A4(v21);
  v4 = sub_10026CA44((uint64_t)v21, 3, 0x14u, *(_QWORD *)(a1 + 120));
  *(_DWORD *)(v4 + 252) |= 0x400000u;
  v5 = *(_QWORD *)(v4 + 184);
  if (!v5)
    operator new();
  if (a2[40])
  {
    v6 = *((_QWORD *)a2 + 4);
    v7 = *(_DWORD *)(v5 + 68) | 1;
    *(_DWORD *)(v5 + 68) = v7;
    *(_QWORD *)(v5 + 16) = v6;
  }
  else
  {
    v7 = *(_DWORD *)(v5 + 68);
  }
  v8 = *((unsigned __int16 *)a2 + 25);
  *(_DWORD *)(v5 + 68) = v7 | 2;
  *(_DWORD *)(v5 + 24) = v8;
  v20 = 0;
  if ((sub_10026CC18(&v20, *((unsigned __int16 *)a2 + 24)) & 1) == 0)
  {
    v15 = 0;
    goto LABEL_20;
  }
  v9 = v20;
  if (!sub_100086B74(v20))
  {
    v17 = "::CLP::LogEntry::Rose::RoseCommunicationEvent::RoseErrorCode_IsValid(value)";
    v18 = 16220;
    v19 = "set_error_code";
    goto LABEL_24;
  }
  v10 = *(_DWORD *)(v5 + 68);
  *(_DWORD *)(v5 + 28) = v9;
  *(_DWORD *)(v5 + 40) = *((unsigned __int16 *)a2 + 29);
  *(_QWORD *)(v5 + 32) = *((_QWORD *)a2 + 8);
  v11 = *((_QWORD *)a2 + 9);
  v12 = v10 | 0x3C;
  *(_DWORD *)(v5 + 68) = v12;
  *(_QWORD *)(v5 + 48) = v11;
  if (a2[1])
  {
    v13 = *a2 != 5;
    if (sub_10006DA5C(v13))
    {
      v12 = *(_DWORD *)(v5 + 68) | 0x40;
      *(_DWORD *)(v5 + 68) = v12;
      *(_DWORD *)(v5 + 44) = v13;
      goto LABEL_14;
    }
    v17 = "::CLP::LogEntry::Rose::RoseCommunicationEvent::RoseRFChannel_IsValid(value)";
    v18 = 16309;
    v19 = "set_rf_channel";
LABEL_24:
    __assert_rtn(v19, "CLPRoseCommunicationEvent.pb.h", v18, v17);
  }
LABEL_14:
  if (a2[16])
  {
    v14 = *((_QWORD *)a2 + 1);
    *(_DWORD *)(v5 + 68) = v12 | 0x80;
    *(_QWORD *)(v5 + 56) = v14;
  }
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
    sub_1003E3768();
  v15 = sub_10026C02C(a1, (wireless_diagnostics::google::protobuf::MessageLite *)v21);
LABEL_20:
  sub_10011D2FC(v21);
  return v15;
}

void sub_100270348()
{
  operator delete();
}

uint64_t sub_100270384(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  int v16;
  int v17;
  std::string *v18;
  int v19;
  unint64_t v20;
  double v21;
  double v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  int v26;
  unsigned int v27;
  int v28;
  int v29;
  unsigned __int8 *v30;
  unsigned __int8 *i;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  char v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  const char *v42;
  int v43;
  const char *v44;
  std::string __p;
  unsigned int v46;
  unsigned int v47;
  _QWORD v48[8];

  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
    sub_1003E3814();
  sub_10011C6A4(v48);
  v4 = sub_10026CA44((uint64_t)v48, 3, 0x1Cu, *(_QWORD *)(a1 + 120));
  *(_DWORD *)(v4 + 252) |= 0x20000000u;
  v5 = *(_QWORD *)(v4 + 240);
  if (!v5)
    operator new();
  v6 = *a2;
  v7 = *(_DWORD *)(v5 + 160);
  v8 = v7 | 1;
  *(_DWORD *)(v5 + 160) = v7 | 1;
  *(_QWORD *)(v5 + 16) = v6;
  if (*((_BYTE *)a2 + 104))
  {
    v9 = a2[12];
    v8 = v7 | 3;
    *(_DWORD *)(v5 + 160) = v7 | 3;
    *(_QWORD *)(v5 + 24) = v9;
  }
  v10 = *((unsigned __int16 *)a2 + 4);
  *(_DWORD *)(v5 + 160) = v8 | 4;
  *(_DWORD *)(v5 + 32) = v10;
  v47 = 0;
  if ((sub_10026CC18(&v47, *((unsigned __int16 *)a2 + 8)) & 1) == 0)
    goto LABEL_30;
  v11 = v47;
  if ((sub_100086B74(v47) & 1) == 0)
    __assert_rtn("set_error_code", "CLPRoseCommunicationEvent.pb.h", 16473, "::CLP::LogEntry::Rose::RoseCommunicationEvent::RoseErrorCode_IsValid(value)");
  v12 = *(_DWORD *)(v5 + 160);
  *(_DWORD *)(v5 + 36) = v11;
  *(_DWORD *)(v5 + 160) = v12 | 0x18;
  v13 = *(_QWORD *)(v5 + 40);
  if (!v13)
    operator new();
  v14 = *((unsigned __int16 *)a2 + 9);
  *(_DWORD *)(v13 + 32) |= 2u;
  *(_DWORD *)(v13 + 24) = v14;
  v46 = 0;
  if ((sub_10026CE00(&v46, *((unsigned __int8 *)a2 + 20)) & 1) == 0)
  {
LABEL_30:
    v40 = 0;
    goto LABEL_31;
  }
  v15 = v46;
  if ((sub_100086BB0(v46) & 1) == 0)
    __assert_rtn("set_session_type", "CLPRoseCommunicationEvent.pb.h", 16534, "::CLP::LogEntry::Rose::RoseCommunicationEvent::RoseSessionType_IsValid(value)");
  v16 = *(_DWORD *)(v5 + 160);
  *(_DWORD *)(v5 + 48) = v15;
  *(_QWORD *)(v5 + 56) = a2[3];
  v17 = *((unsigned __int16 *)a2 + 20);
  *(_DWORD *)(v5 + 160) = v16 | 0xE0;
  *(_DWORD *)(v5 + 52) = v17;
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = 8;
  __p.__r_.__value_.__r.__words[0] = a2[4];
  __p.__r_.__value_.__s.__data_[8] = 0;
  *(_DWORD *)(v5 + 160) = v16 | 0x1E0;
  v18 = *(std::string **)(v5 + 64);
  if (v18 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
    operator new();
  std::string::operator=(v18, &__p);
  v19 = *(_DWORD *)(v5 + 160);
  *(_DWORD *)(v5 + 88) = *((unsigned __int16 *)a2 + 21);
  LOWORD(v20) = *((_WORD *)a2 + 22);
  v21 = (double)v20 * 250.0;
  *(double *)(v5 + 72) = v21;
  LOBYTE(v21) = *((_BYTE *)a2 + 46);
  v22 = (double)*(unint64_t *)&v21 * 250.0;
  *(double *)(v5 + 80) = v22;
  LOBYTE(v22) = *((_BYTE *)a2 + 47);
  *(_DWORD *)(v5 + 160) = v19 | 0x1E00;
  *(double *)(v5 + 96) = (double)*(unint64_t *)&v22 * 250.0;
  v23 = sub_1002708A0(*((unsigned __int8 *)a2 + 48));
  if (!sub_10006E2D0(v23))
  {
    v42 = "::CLP::LogEntry::Rose::RoseCommunicationEvent::RosePreamble_IsValid(value)";
    v43 = 16759;
    v44 = "set_tx_preamble";
    goto LABEL_38;
  }
  *(_DWORD *)(v5 + 160) |= 0x2000u;
  *(_DWORD *)(v5 + 92) = v23;
  v24 = sub_1002708A0(*((unsigned __int8 *)a2 + 49));
  if (!sub_10006E2D0(v24))
  {
    v42 = "::CLP::LogEntry::Rose::RoseCommunicationEvent::RosePreamble_IsValid(value)";
    v43 = 16782;
    v44 = "set_rx_preamble";
    goto LABEL_38;
  }
  v25 = *(_DWORD *)(v5 + 160);
  *(_DWORD *)(v5 + 104) = v24;
  v26 = *((unsigned __int8 *)a2 + 50);
  *(_DWORD *)(v5 + 160) = v25 | 0xC000;
  *(_DWORD *)(v5 + 108) = v26;
  v27 = *((unsigned __int8 *)a2 + 51);
  if ((sub_100086C10(v27) & 1) == 0)
  {
    v42 = "::CLP::LogEntry::Rose::RoseCommunicationEvent::RxStatus_IsValid(value)";
    v43 = 16827;
    v44 = "set_poll_rx_status";
LABEL_38:
    __assert_rtn(v44, "CLPRoseCommunicationEvent.pb.h", v43, v42);
  }
  v28 = *(_DWORD *)(v5 + 160);
  *(_DWORD *)(v5 + 120) = v27;
  *(_QWORD *)(v5 + 112) = a2[7];
  *(_DWORD *)(v5 + 124) = *((unsigned __int8 *)a2 + 64);
  v29 = *((unsigned __int8 *)a2 + 65);
  *(_DWORD *)(v5 + 160) = v28 | 0xF0000;
  *(_DWORD *)(v5 + 152) = v29;
  v30 = (unsigned __int8 *)a2[9];
  for (i = (unsigned __int8 *)a2[10]; v30 != i; v30 += 16)
  {
    v32 = *(_DWORD *)(v5 + 140);
    v33 = *(int *)(v5 + 136);
    if ((int)v33 >= v32)
    {
      if (v32 == *(_DWORD *)(v5 + 144))
      {
        wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(v5 + 128), v32 + 1);
        v32 = *(_DWORD *)(v5 + 140);
      }
      *(_DWORD *)(v5 + 140) = v32 + 1;
      sub_1000B9194();
    }
    v34 = *(_QWORD *)(v5 + 128);
    *(_DWORD *)(v5 + 136) = v33 + 1;
    v35 = *(_QWORD *)(v34 + 8 * v33);
    v36 = *v30;
    v37 = sub_100086C10(v36);
    if ((v37 & 1) == 0)
      __assert_rtn("set_rx_status", "CLPRoseCommunicationEvent.pb.h", 16358, "::CLP::LogEntry::Rose::RoseCommunicationEvent::RxStatus_IsValid(value)");
    v38 = *(_DWORD *)(v35 + 32);
    *(_DWORD *)(v35 + 24) = v36;
    v39 = *((_QWORD *)v30 + 1);
    *(_DWORD *)(v35 + 32) = v38 | 3;
    *(_QWORD *)(v35 + 16) = v39;
  }
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
    sub_1003E37E8();
  v40 = sub_10026C02C(a1, (wireless_diagnostics::google::protobuf::MessageLite *)v48);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_31:
  sub_10011D2FC(v48);
  return v40;
}

void sub_100270824(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
  operator delete();
}

uint64_t sub_1002708A0(int a1)
{
  uint64_t result;

  result = 0;
  switch(a1)
  {
    case 0:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
      sub_1003E3840();
    case 10:
      result = 1;
      break;
    case 11:
      result = 2;
      break;
    case 12:
      result = 3;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1002708F0(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[6];
  uint64_t v10;
  int v11;

  sub_10011C6A4(v9);
  if (sub_10026BF64((uint64_t)v9, *(_QWORD *)(a1 + 120)))
  {
    v11 |= 2u;
    v4 = v10;
    if (!v10)
      operator new();
    *(_DWORD *)(v10 + 44) |= 4u;
    v5 = *(_QWORD *)(v4 + 32);
    if (!v5)
      operator new();
    *(_DWORD *)(v5 + 44) |= 4u;
    v6 = *(_QWORD *)(v5 + 32);
    if (!v6)
      operator new();
    sub_100270A90(v6, a2);
    v7 = sub_10026C02C(a1, (wireless_diagnostics::google::protobuf::MessageLite *)v9);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
      sub_1003E2FBC();
    v7 = 0;
  }
  sub_10011D2FC(v9);
  return v7;
}

void sub_100270A38()
{
  operator delete();
}

double sub_100270A90(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  double result;

  *(_DWORD *)(a1 + 28) |= 1u;
  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
    operator new();
  v3 = *(_DWORD *)(v2 + 76);
  v4 = a2[1];
  *(_QWORD *)(v2 + 16) = *a2;
  *(_QWORD *)(v2 + 48) = v4;
  *(_DWORD *)(v2 + 76) = v3 | 0x19;
  v5 = *(_QWORD *)(v2 + 40);
  if (!v5)
    operator new();
  v6 = (_QWORD *)a2[2];
  v7 = *(_DWORD *)(v5 + 44);
  *(_QWORD *)(v5 + 16) = *v6;
  *(_QWORD *)(v5 + 24) = v6[1];
  v8 = v6[2];
  *(_DWORD *)(v5 + 44) = v7 | 7;
  *(_QWORD *)(v5 + 32) = v8;
  *(_DWORD *)(v2 + 76) |= 4u;
  v9 = *(_QWORD *)(v2 + 32);
  if (!v9)
    operator new();
  v10 = (_QWORD *)a2[5];
  v11 = *(_DWORD *)(v9 + 44);
  *(_QWORD *)(v9 + 16) = *v10;
  *(_QWORD *)(v9 + 24) = v10[1];
  v12 = v10[2];
  *(_DWORD *)(v9 + 44) = v11 | 7;
  *(_QWORD *)(v9 + 32) = v12;
  *(_DWORD *)(v2 + 76) |= 2u;
  v13 = *(_QWORD *)(v2 + 24);
  if (!v13)
    operator new();
  *(_DWORD *)(v13 + 28) |= 1u;
  v14 = *(_QWORD *)(v13 + 16);
  if (!v14)
    operator new();
  v15 = (_QWORD *)a2[8];
  v16 = *(_DWORD *)(v14 + 52);
  *(_QWORD *)(v14 + 16) = *v15;
  *(_QWORD *)(v14 + 24) = v15[1];
  *(_QWORD *)(v14 + 32) = v15[2];
  v17 = v15[3];
  *(_DWORD *)(v14 + 52) = v16 | 0xF;
  *(_QWORD *)(v14 + 40) = v17;
  *(_DWORD *)(v2 + 76) |= 0x20u;
  v18 = *(_QWORD *)(v2 + 56);
  if (!v18)
    operator new();
  v19 = (_QWORD *)a2[11];
  v20 = *(_DWORD *)(v18 + 44);
  *(_QWORD *)(v18 + 16) = *v19;
  *(_QWORD *)(v18 + 24) = v19[1];
  v21 = v19[2];
  *(_DWORD *)(v18 + 44) = v20 | 7;
  *(_QWORD *)(v18 + 32) = v21;
  *(_DWORD *)(v2 + 76) |= 0x40u;
  v22 = *(_QWORD *)(v2 + 64);
  if (!v22)
    operator new();
  v23 = a2[14];
  v24 = *(_DWORD *)(v22 + 44);
  *(_QWORD *)(v22 + 16) = *(_QWORD *)v23;
  *(_QWORD *)(v22 + 24) = *(_QWORD *)(v23 + 8);
  result = *(double *)(v23 + 16);
  *(_DWORD *)(v22 + 44) = v24 | 7;
  *(double *)(v22 + 32) = result;
  return result;
}

void sub_100270D20()
{
  operator delete();
}

uint64_t sub_100270D8C(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[6];
  uint64_t v17;
  int v18;

  v6 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
    sub_1003E3868(a3, v6);
  sub_10011C6A4(v16);
  if (sub_10026BF64((uint64_t)v16, *(_QWORD *)(a1 + 120)))
  {
    v18 |= 2u;
    v7 = v17;
    if (!v17)
      operator new();
    *(_DWORD *)(v17 + 44) |= 4u;
    v8 = *(_QWORD *)(v7 + 32);
    if (!v8)
      operator new();
    *(_DWORD *)(v8 + 44) |= 2u;
    v9 = *(_QWORD *)(v8 + 24);
    if (!v9)
      operator new();
    *(_DWORD *)(v9 + 28) |= 1u;
    v10 = *(_QWORD *)(v9 + 16);
    if (!v10)
      operator new();
    *(_DWORD *)(v10 + 36) |= 1u;
    v11 = *(_QWORD *)(v10 + 16);
    if (!v11)
      operator new();
    *(_DWORD *)(v9 + 28) |= 1u;
    *(_DWORD *)(v10 + 36) |= 2u;
    v13 = *(_QWORD *)(v10 + 24);
    if (!v13)
      operator new();
    *(_DWORD *)(v11 + 60) |= 2u;
    v14 = *(_QWORD *)(v11 + 24);
    if (!v14)
      operator new();
    sub_100270A90(v14, a2);
    sub_1002710E4(v13, (uint64_t)a3);
    v12 = sub_10026C02C(a1, (wireless_diagnostics::google::protobuf::MessageLite *)v16);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
      sub_1003E2FBC();
    v12 = 0;
  }
  sub_10011D2FC(v16);
  return v12;
}

void sub_100271038()
{
  operator delete();
}

double sub_1002710E4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  int v5;
  _QWORD *v6;
  _QWORD *v7;
  int v8;
  int v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double result;

  *(_DWORD *)(a1 + 68) |= 4u;
  v3 = *(_QWORD *)(a1 + 48);
  if (!v3)
    operator new();
  v4 = *(_DWORD *)(v3 + 148);
  *(_QWORD *)(v3 + 16) = *(_QWORD *)a2;
  v5 = v4 | 3;
  *(_DWORD *)(v3 + 148) = v5;
  v6 = *(_QWORD **)(a2 + 16);
  *(_QWORD *)(v3 + 24) = *(_QWORD *)(a2 + 8);
  v7 = (_QWORD *)(a2 + 24);
  if (v6 != (_QWORD *)(a2 + 24))
  {
    do
    {
      v8 = *((unsigned __int16 *)v6 + 13);
      v9 = *(_DWORD *)(v3 + 40);
      if (v9 == *(_DWORD *)(v3 + 44))
      {
        sub_10006BAB4(v3 + 32, v9 + 1);
        v9 = *(_DWORD *)(v3 + 40);
      }
      v10 = *(_QWORD *)(v3 + 32);
      *(_DWORD *)(v3 + 40) = v9 + 1;
      *(_DWORD *)(v10 + 4 * v9) = v8;
      v11 = (_QWORD *)v6[1];
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (_QWORD *)v6[2];
          v13 = *v12 == (_QWORD)v6;
          v6 = v12;
        }
        while (!v13);
      }
      v6 = v12;
    }
    while (v12 != v7);
    v5 = *(_DWORD *)(v3 + 148);
  }
  v14 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(v3 + 48) = *(_QWORD *)(a2 + 40);
  v15 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(v3 + 80) = v14;
  *(_QWORD *)(v3 + 88) = v15;
  *(int8x16_t *)(v3 + 56) = vextq_s8(*(int8x16_t *)(a2 + 56), *(int8x16_t *)(a2 + 56), 8uLL);
  v16 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(v3 + 72) = *(_QWORD *)(a2 + 80);
  v17 = *(_QWORD *)(a2 + 112);
  v18 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(v3 + 96) = v16;
  *(_QWORD *)(v3 + 104) = v17;
  v19 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(v3 + 112) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(v3 + 120) = v18;
  result = *(double *)(a2 + 128);
  *(_DWORD *)(v3 + 148) = v5 | 0x7FF8;
  *(_QWORD *)(v3 + 128) = v19;
  *(double *)(v3 + 136) = result;
  return result;
}

void sub_100271228()
{
  operator delete();
}

uint64_t sub_10027124C(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v24[6];
  uint64_t v25;
  int v26;

  sub_10011C6A4(v24);
  if (sub_10026BF64((uint64_t)v24, *(_QWORD *)(a1 + 120)))
  {
    v26 |= 2u;
    v10 = v25;
    if (!v25)
      operator new();
    *(_DWORD *)(v25 + 44) |= 4u;
    v11 = *(_QWORD *)(v10 + 32);
    if (!v11)
      operator new();
    *(_DWORD *)(v11 + 44) |= 2u;
    v12 = *(_QWORD *)(v11 + 24);
    if (!v12)
      operator new();
    *(_DWORD *)(v12 + 28) |= 1u;
    v13 = *(_QWORD *)(v12 + 16);
    if (!v13)
      operator new();
    *(_DWORD *)(v13 + 36) |= 1u;
    v14 = *(int **)(v13 + 16);
    if (!v14)
      operator new();
    *(_DWORD *)(v12 + 28) |= 1u;
    *(_DWORD *)(v13 + 36) |= 2u;
    v16 = *(_QWORD *)(v13 + 24);
    if (!v16)
      operator new();
    sub_1002715E8(v14, a2);
    sub_1002710E4(v16, a3);
    sub_100271908(v16, a4);
    *(_DWORD *)(v16 + 68) |= 8u;
    v17 = *(_QWORD *)(v16 + 56);
    if (!v17)
      operator new();
    v18 = *(_BYTE *)(a5 + 8);
    v19 = *(_DWORD *)(v17 + 40);
    v20 = v19 | 1;
    *(_DWORD *)(v17 + 40) = v19 | 1;
    *(_BYTE *)(v17 + 32) = v18;
    if (*(_BYTE *)(a5 + 24))
    {
      v21 = *(_QWORD *)(a5 + 16);
      v20 = v19 | 3;
      *(_DWORD *)(v17 + 40) = v19 | 3;
      *(_QWORD *)(v17 + 16) = v21;
    }
    if (*(_BYTE *)(a5 + 40))
    {
      v22 = *(_QWORD *)(a5 + 32);
      *(_DWORD *)(v17 + 40) = v20 | 4;
      *(_QWORD *)(v17 + 24) = v22;
    }
    v15 = sub_10026C02C(a1, (wireless_diagnostics::google::protobuf::MessageLite *)v24);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
      sub_1003E2FBC();
    v15 = 0;
  }
  sub_10011D2FC(v24);
  return v15;
}

void sub_100271534()
{
  operator delete();
}

void sub_1002715E8(int *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  std::string *v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  int v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  const char *v26;
  const char *v27;
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *v28;
  std::string __str;

  v2 = *a2;
  v3 = a2[1];
  if (*a2 != v3)
  {
    v28 = (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 8);
    do
    {
      v5 = a1[11];
      v6 = a1[10];
      if ((int)v6 >= v5)
      {
        if (v5 == a1[12])
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v28, v5 + 1);
          v5 = a1[11];
        }
        a1[11] = v5 + 1;
        sub_1001306B0();
      }
      v7 = *((_QWORD *)a1 + 4);
      a1[10] = v6 + 1;
      v8 = *(_QWORD *)(v7 + 8 * v6);
      LODWORD(v7) = *(_DWORD *)(v8 + 140);
      *(_QWORD *)(v8 + 16) = *(_QWORD *)(v2 + 40);
      *(_QWORD *)(v8 + 24) = *(_QWORD *)v2;
      *(_DWORD *)(v8 + 80) = *(unsigned __int16 *)(v2 + 8);
      v9 = *(unsigned __int8 *)(v2 + 10);
      *(_DWORD *)(v8 + 140) = v7 | 0x303;
      *(_DWORD *)(v8 + 84) = v9;
      sub_10027C21C(&__str, *(void **)(v2 + 16), *(_QWORD *)(v2 + 24) - *(_QWORD *)(v2 + 16));
      *(_DWORD *)(v8 + 140) |= 0x400u;
      v10 = *(std::string **)(v8 + 88);
      if (v10 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
        operator new();
      std::string::operator=(v10, &__str);
      v11 = sub_100030334(*(double *)(v2 + 64));
      *(_DWORD *)(v8 + 140) |= 0x10u;
      *(double *)(v8 + 48) = v11;
      v12 = sub_100030334(*(double *)(v2 + 80));
      *(_DWORD *)(v8 + 140) |= 0x20u;
      *(double *)(v8 + 56) = v12;
      v13 = sub_100030334(*(double *)(v2 + 72));
      *(_DWORD *)(v8 + 140) |= 4u;
      *(double *)(v8 + 32) = v13;
      v14 = sub_100030334(*(double *)(v2 + 88));
      *(_DWORD *)(v8 + 140) |= 8u;
      *(double *)(v8 + 40) = v14;
      v15 = sub_100030334(*(double *)(v2 + 96));
      v16 = *(_DWORD *)(v8 + 140);
      *(double *)(v8 + 96) = v15;
      *(_DWORD *)(v8 + 140) = v16 | 0x8C0;
      *(_OWORD *)(v8 + 64) = *(_OWORD *)(v2 + 48);
      if (*(_BYTE *)(v2 + 112))
      {
        v17 = *(_QWORD *)(v2 + 104);
        *(_DWORD *)(v8 + 140) = v16 | 0x18C0;
        *(_QWORD *)(v8 + 104) = v17;
      }
      v19 = *(uint64_t **)(v2 + 120);
      v18 = *(uint64_t **)(v2 + 128);
      if (v19 != v18)
      {
        v20 = *(_DWORD *)(v8 + 120);
        do
        {
          v21 = *v19;
          if (v20 == *(_DWORD *)(v8 + 124))
          {
            sub_10006BB4C(v8 + 112, v20 + 1);
            v20 = *(_DWORD *)(v8 + 120);
          }
          v22 = *(_QWORD *)(v8 + 112);
          *(_DWORD *)(v8 + 120) = v20 + 1;
          *(_QWORD *)(v22 + 8 * v20) = v21;
          ++v19;
          ++v20;
        }
        while (v19 != v18);
      }
      if (sub_10006DA5C(*(unsigned __int8 *)(v2 + 144)))
      {
        v23 = *(unsigned __int8 *)(v2 + 144) != 5;
        if (!sub_10006DA5C(v23))
        {
          v25 = 4721;
          v26 = "::CLP::LogEntry::Rose::RoseCommunicationEvent::RoseRFChannel_IsValid(value)";
          v27 = "set_rf_channel";
          goto LABEL_29;
        }
        *(_DWORD *)(v8 + 140) |= 0x4000u;
        *(_DWORD *)(v8 + 128) = v23;
      }
      if (sub_10006DA5C(*(unsigned __int8 *)(v2 + 145)))
      {
        v24 = *(unsigned __int8 *)(v2 + 145);
        if (!sub_10006DA5C(v24))
        {
          v25 = 4744;
          v27 = "set_channel_usage_type";
          v26 = "::CLP::LogEntry::Rose::RangeAndAoaSolution_SensorFusion_ChannelUsageType_IsValid(value)";
LABEL_29:
          __assert_rtn(v27, "CLPRangeAndAoaSolution.pb.h", v25, v26);
        }
        *(_DWORD *)(v8 + 140) |= 0x8000u;
        *(_DWORD *)(v8 + 132) = v24;
      }
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      v2 += 152;
    }
    while (v2 != v3);
  }
}

void sub_1002718E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_100271908(_BOOL8 result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  double v16;
  double v17;
  uint64_t v18;
  double v19;
  double v20;
  double v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int i;
  double v29;
  int v30;
  uint64_t v31;
  int v32;
  int v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *v41;
  _BOOL8 v42;
  uint64_t v43;

  v2 = *a2;
  v43 = a2[1];
  if (*a2 != v43)
  {
    v3 = result;
    v41 = (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(result + 24);
    v42 = result;
    do
    {
      v4 = *(_DWORD *)(v3 + 36);
      v5 = *(int *)(v3 + 32);
      if ((int)v5 >= v4)
      {
        if (v4 == *(_DWORD *)(v3 + 40))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v41, v4 + 1);
          v4 = *(_DWORD *)(v3 + 36);
        }
        *(_DWORD *)(v3 + 36) = v4 + 1;
        sub_100130710();
      }
      v6 = *(_QWORD *)(v3 + 24);
      *(_DWORD *)(v3 + 32) = v5 + 1;
      v7 = *(_QWORD *)(v6 + 8 * v5);
      LODWORD(v6) = *(_DWORD *)v2;
      *(_DWORD *)(v7 + 92) |= 1u;
      *(_DWORD *)(v7 + 24) = v6;
      v8 = *(unsigned __int8 *)(v2 + 432);
      if (!sub_10006E2D0(*(unsigned __int8 *)(v2 + 432)))
        sub_1003CD630();
      v9 = *(_QWORD *)(v2 + 448);
      *(_QWORD *)(v7 + 32) = *(_QWORD *)(v2 + 440);
      v10 = *(_DWORD *)(v7 + 92);
      *(_DWORD *)(v7 + 28) = v8;
      *(_QWORD *)(v7 + 48) = v9;
      v11 = *(_QWORD *)(v2 + 456);
      *(_DWORD *)(v7 + 92) = v10 | 0x3C;
      *(_QWORD *)(v7 + 40) = v11;
      LODWORD(v11) = *(_DWORD *)(v2 + 464);
      *(_DWORD *)(v7 + 92) = v10 | 0x7C;
      v12 = *(_DWORD *)(v2 + 468);
      *(_DWORD *)(v7 + 56) = v11;
      *(_DWORD *)(v7 + 60) = v12;
      *(_DWORD *)(v7 + 92) = v10 | 0x1FC;
      v13 = *(_QWORD *)(v7 + 64);
      if (!v13)
        operator new();
      *(_DWORD *)(v13 + 48) |= 1u;
      v14 = *(_QWORD *)(v13 + 16);
      if (!v14)
        operator new();
      v15 = sub_10027C1A4(v2 + 8, 0);
      *(_DWORD *)(v14 + 44) |= 1u;
      *(double *)(v14 + 16) = v15;
      v16 = sub_10027C1A4(v2 + 8, 1u);
      *(_DWORD *)(v14 + 44) |= 2u;
      *(double *)(v14 + 24) = v16;
      v17 = sub_10027C1A4(v2 + 8, 2u);
      *(_DWORD *)(v14 + 44) |= 4u;
      *(double *)(v14 + 32) = v17;
      *(_DWORD *)(v13 + 48) |= 2u;
      v18 = *(_QWORD *)(v13 + 24);
      if (!v18)
        operator new();
      v19 = sub_10027C1A4(v2 + 8, 3u);
      *(_DWORD *)(v18 + 44) |= 1u;
      *(double *)(v18 + 16) = v19;
      v20 = sub_10027C1A4(v2 + 8, 4u);
      *(_DWORD *)(v18 + 44) |= 2u;
      *(double *)(v18 + 24) = v20;
      v21 = sub_10027C1A4(v2 + 8, 5u);
      *(_DWORD *)(v18 + 44) |= 4u;
      *(double *)(v18 + 32) = v21;
      *(_DWORD *)(v13 + 48) |= 4u;
      v22 = *(_QWORD *)(v13 + 32);
      if (!v22)
        operator new();
      v23 = 0;
      *(_DWORD *)(v22 + 52) |= 3u;
      *(_QWORD *)(v22 + 16) = 0x600000006;
      do
      {
        v24 = *(_DWORD *)(v22 + 36);
        v25 = *(int *)(v22 + 32);
        if ((int)v25 >= v24)
        {
          if (v24 == *(_DWORD *)(v22 + 40))
          {
            wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(v22 + 24), v24 + 1);
            v24 = *(_DWORD *)(v22 + 36);
          }
          *(_DWORD *)(v22 + 36) = v24 + 1;
          sub_100130770();
        }
        v26 = *(_QWORD *)(v22 + 24);
        *(_DWORD *)(v22 + 32) = v25 + 1;
        v27 = *(_QWORD *)(v26 + 8 * v25);
        for (i = 0; i != 6; ++i)
        {
          v29 = sub_10027C1DC(v2 + 96, v23, i);
          v30 = *(_DWORD *)(v27 + 24);
          if (v30 == *(_DWORD *)(v27 + 28))
          {
            sub_10006BB4C(v27 + 16, v30 + 1);
            v30 = *(_DWORD *)(v27 + 24);
          }
          v31 = *(_QWORD *)(v27 + 16);
          *(_DWORD *)(v27 + 24) = v30 + 1;
          *(double *)(v31 + 8 * v30) = v29;
        }
        ++v23;
      }
      while (v23 != 6);
      v32 = *(_DWORD *)(v2 + 424) - 1;
      if (v32 > 8)
        v33 = 1;
      else
        v33 = dword_1004749F4[v32];
      result = sub_1001216E4(v33);
      if (!result)
        sub_1003CD608();
      *(_DWORD *)(v13 + 48) |= 8u;
      *(_DWORD *)(v13 + 40) = v33;
      if (*(_BYTE *)(v2 + 576))
      {
        *(_DWORD *)(v7 + 92) |= 0x200u;
        v34 = *(_QWORD *)(v7 + 72);
        if (!v34)
          operator new();
        v35 = *(_DWORD *)(v34 + 44);
        v37 = *(_QWORD *)(v2 + 488);
        v36 = *(_QWORD *)(v2 + 496);
        *(_QWORD *)(v34 + 16) = *(_QWORD *)(v2 + 480);
        *(_QWORD *)(v34 + 24) = v36;
        *(_DWORD *)(v34 + 44) = v35 | 7;
        *(_QWORD *)(v34 + 32) = v37;
        *(_DWORD *)(v7 + 92) |= 0x400u;
        v38 = *(_QWORD *)(v7 + 80);
        if (!v38)
          operator new();
        v39 = *(_DWORD *)(v38 + 92);
        *(_QWORD *)(v38 + 16) = *(_QWORD *)(v2 + 504);
        *(_QWORD *)(v38 + 24) = *(_QWORD *)(v2 + 512);
        *(_QWORD *)(v38 + 32) = *(_QWORD *)(v2 + 520);
        *(_QWORD *)(v38 + 40) = *(_QWORD *)(v2 + 528);
        *(_QWORD *)(v38 + 48) = *(_QWORD *)(v2 + 536);
        *(_QWORD *)(v38 + 56) = *(_QWORD *)(v2 + 544);
        *(_QWORD *)(v38 + 64) = *(_QWORD *)(v2 + 552);
        *(_QWORD *)(v38 + 72) = *(_QWORD *)(v2 + 560);
        v40 = *(_QWORD *)(v2 + 568);
        *(_DWORD *)(v38 + 92) = v39 | 0x1FF;
        *(_QWORD *)(v38 + 80) = v40;
      }
      v2 += 584;
      v3 = v42;
    }
    while (v2 != v43);
  }
  return result;
}

void sub_100271DEC()
{
  operator delete();
}

uint64_t sub_100271E5C(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[6];
  uint64_t v15;
  int v16;

  sub_10011C6A4(v14);
  if (sub_10026BF64((uint64_t)v14, *(_QWORD *)(a1 + 120)))
  {
    v16 |= 2u;
    v6 = v15;
    if (!v15)
      operator new();
    *(_DWORD *)(v15 + 44) |= 4u;
    v7 = *(_QWORD *)(v6 + 32);
    if (!v7)
      operator new();
    *(_DWORD *)(v7 + 44) |= 2u;
    v8 = *(_QWORD *)(v7 + 24);
    if (!v8)
      operator new();
    *(_DWORD *)(v8 + 28) |= 1u;
    v9 = *(_QWORD *)(v8 + 16);
    if (!v9)
      operator new();
    *(_DWORD *)(v9 + 36) |= 1u;
    v10 = *(int **)(v9 + 16);
    if (!v10)
      operator new();
    *(_DWORD *)(v8 + 28) |= 1u;
    *(_DWORD *)(v9 + 36) |= 2u;
    v12 = *(_QWORD *)(v9 + 24);
    if (!v12)
      operator new();
    sub_1002715E8(v10, a2);
    sub_100271908(v12, a3);
    v11 = sub_10026C02C(a1, (wireless_diagnostics::google::protobuf::MessageLite *)v14);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
      sub_1003E2FBC();
    v11 = 0;
  }
  sub_10011D2FC(v14);
  return v11;
}

void sub_1002720AC()
{
  operator delete();
}

uint64_t sub_10027214C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  _QWORD v9[6];
  uint64_t v10;
  int v11;

  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
    sub_1003E390C();
  sub_10011C6A4(v9);
  if (sub_10026BF64((uint64_t)v9, *(_QWORD *)(a1 + 120)))
  {
    v11 |= 2u;
    v4 = v10;
    if (!v10)
      operator new();
    *(_DWORD *)(v10 + 44) |= 2u;
    v5 = *(_QWORD *)(v4 + 24);
    if (!v5)
      operator new();
    v6 = sub_100272304(a2);
    if (!sub_10006DA24(v6))
      __assert_rtn("set_device_type", "CLPNearbyd.pb.h", 5929, "::CLP::LogEntry::Nearbyd::DeviceType_IsValid(value)");
    *(_DWORD *)(v5 + 376) |= 0x20u;
    *(_DWORD *)(v5 + 368) = v6;
    v7 = sub_10026C02C(a1, (wireless_diagnostics::google::protobuf::MessageLite *)v9);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
      sub_1003E2FBC();
    v7 = 0;
  }
  sub_10011D2FC(v9);
  return v7;
}

void sub_1002722B8()
{
  operator delete();
}

uint64_t sub_100272304(uint64_t a1)
{
  uint64_t result;
  int v3;
  unsigned int v4;
  int v5;
  unsigned int v6;

  result = 0;
  if ((int)a1 <= 99)
  {
    switch((int)a1)
    {
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
        result = a1;
        break;
      case 7:
        result = 12;
        break;
      case 8:
        result = 13;
        break;
      case 9:
        result = 14;
        break;
      case 10:
        result = 15;
        break;
      case 11:
        result = 20;
        break;
      case 12:
        result = 21;
        break;
      case 13:
        result = 22;
        break;
      case 14:
        result = 23;
        break;
      case 15:
        result = 30;
        break;
      case 16:
        result = 31;
        break;
      case 17:
        result = 32;
        break;
      case 18:
        result = 33;
        break;
      case 19:
        result = 39;
        break;
      case 20:
        result = 40;
        break;
      case 21:
        result = 41;
        break;
      case 22:
        result = 42;
        break;
      case 23:
        result = 47;
        break;
      default:
        return result;
    }
  }
  else if ((int)a1 > 199)
  {
    if ((_DWORD)a1 == 999)
      v3 = 101;
    else
      v3 = 0;
    if ((_DWORD)a1 == 997)
      v4 = 100;
    else
      v4 = v3;
    if ((_DWORD)a1 == 201)
      v5 = 29;
    else
      v5 = 0;
    if ((_DWORD)a1 == 200)
      v6 = 11;
    else
      v6 = v5;
    if ((int)a1 <= 996)
      return v6;
    else
      return v4;
  }
  else
  {
    switch((int)a1)
    {
      case 'd':
        result = 7;
        break;
      case 'e':
        result = 8;
        break;
      case 'f':
        result = 9;
        break;
      case 'g':
        result = 10;
        break;
      case 'h':
        result = 16;
        break;
      case 'i':
        result = 17;
        break;
      case 'j':
        result = 18;
        break;
      case 'k':
        result = 19;
        break;
      case 'l':
        result = 24;
        break;
      case 'm':
        result = 25;
        break;
      case 'n':
        result = 26;
        break;
      case 'o':
        result = 27;
        break;
      case 'p':
        result = 28;
        break;
      case 'q':
        result = 34;
        break;
      case 'r':
        result = 35;
        break;
      case 's':
        result = 36;
        break;
      case 't':
        result = 37;
        break;
      case 'u':
        result = 38;
        break;
      case 'v':
        result = 43;
        break;
      case 'w':
        result = 44;
        break;
      case 'x':
        result = 45;
        break;
      case 'y':
        result = 46;
        break;
      default:
        return result;
    }
  }
  return result;
}

uint64_t sub_1002724E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  _QWORD v10[6];
  uint64_t v11;
  int v12;

  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
    sub_1003E3938();
  sub_10011C6A4(v10);
  if (sub_10026BF64((uint64_t)v10, *(_QWORD *)(a1 + 120)))
  {
    v12 |= 2u;
    v4 = v11;
    if (!v11)
      operator new();
    *(_DWORD *)(v11 + 44) |= 2u;
    v5 = *(_QWORD *)(v4 + 24);
    if (!v5)
      operator new();
    *(_DWORD *)(v5 + 376) |= 0x40u;
    v6 = *(_QWORD *)(v5 + 56);
    if (!v6)
      operator new();
    v7 = *(_DWORD *)(v6 + 40);
    *(_BYTE *)(v6 + 24) = *(_BYTE *)a2;
    *(_DWORD *)(v6 + 40) = v7 | 0x7FA;
    *(_QWORD *)(v6 + 26) = *(_QWORD *)(a2 + 4);
    v8 = sub_10026C02C(a1, (wireless_diagnostics::google::protobuf::MessageLite *)v10);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
      sub_1003E2FBC();
    v8 = 0;
  }
  sub_10011D2FC(v10);
  return v8;
}

void sub_10027265C()
{
  operator delete();
}

uint64_t sub_1002726BC(uint64_t a1, unsigned int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t i;
  _QWORD *v15;
  uint64_t v16;
  __int16 *v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  _DWORD *v23;
  int v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t j;
  _QWORD *v30;
  uint64_t v31;
  __int16 *v32;
  int v33;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  _DWORD *v38;
  unsigned int *v40;
  int v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD v45[6];
  uint64_t v46;
  int v47;

  sub_10011C6A4(v45);
  if (sub_10026BF64((uint64_t)v45, *(_QWORD *)(a1 + 120)))
  {
    v42 = a1;
    v47 |= 2u;
    v4 = v46;
    if (!v46)
      operator new();
    *(_DWORD *)(v46 + 44) |= 2u;
    v5 = *(_QWORD *)(v4 + 24);
    if (!v5)
      operator new();
    *(_DWORD *)(v5 + 376) |= 0x80u;
    v6 = *(_QWORD *)(v5 + 64);
    if (!v6)
      operator new();
    v7 = sub_100272304(*a2);
    if (!sub_10006DA24(v7))
      __assert_rtn("set_device_type", "CLPNearbyd.pb.h", 3772, "::CLP::LogEntry::Nearbyd::DeviceType_IsValid(value)");
    v8 = *(_DWORD *)(v6 + 68);
    *(_DWORD *)(v6 + 16) = v7;
    *(_QWORD *)(v6 + 24) = 0x2500000003;
    *(_DWORD *)(v6 + 68) = v8 | 0x1D;
    *(_DWORD *)(v6 + 56) = 37;
    v9 = atomic_load(a2 + 1);
    v10 = sub_10026C5B8(v9);
    if (!sub_10006DA40(v10))
      __assert_rtn("set_accessory_type", "CLPNearbyd.pb.h", 3908, "::CLP::LogEntry::Nearbyd::AccessoryType_IsValid(value)");
    *(_DWORD *)(v6 + 68) |= 0x40u;
    *(_DWORD *)(v6 + 60) = v10;
    v11 = (_QWORD *)*((_QWORD *)a2 + 2);
    if (v11)
    {
      if (v11[1] - *v11 != 72)
        __assert_rtn("logCalReverseLUTs", "PRProtobufLogger.cpp", 1517, "luts.size() == measurement_engine::kNumOfLUT");
      v40 = a2;
      v12 = 0;
      v43 = (_QWORD *)*((_QWORD *)a2 + 2);
      do
      {
        v13 = (_QWORD *)(*v11 + 24 * v12);
        if (v13[1] - *v13 != 888)
          __assert_rtn("logCalReverseLUTs", "PRProtobufLogger.cpp", 1520, "table.size() == measurement_engine::kLutSize");
        for (i = 0; i != 37; ++i)
        {
          v15 = (_QWORD *)(*v13 + 24 * i);
          if (v15[1] - *v15 != 148)
            __assert_rtn("logCalReverseLUTs", "PRProtobufLogger.cpp", 1523, "row.size() == measurement_engine::kLutSize");
          v16 = 0;
          do
          {
            v17 = (__int16 *)(*v15 + v16);
            v18 = *v17;
            v19 = v17[1];
            v20 = *(_DWORD *)(v6 + 44);
            v21 = *(int *)(v6 + 40);
            if ((int)v21 >= v20)
            {
              if (v20 == *(_DWORD *)(v6 + 48))
              {
                wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(v6 + 32), v20 + 1);
                v20 = *(_DWORD *)(v6 + 44);
              }
              *(_DWORD *)(v6 + 44) = v20 + 1;
              sub_100083424();
            }
            v22 = *(_QWORD *)(v6 + 32);
            *(_DWORD *)(v6 + 40) = v21 + 1;
            v23 = *(_DWORD **)(v22 + 8 * v21);
            v16 += 4;
            v23[7] |= 3u;
            v23[4] = v18;
            v23[5] = v19;
          }
          while (v16 != 148);
        }
        ++v12;
        v11 = v43;
      }
      while (v12 != 3);
      v24 = 1;
      a2 = v40;
    }
    else
    {
      v24 = 0;
    }
    v26 = (_QWORD *)*((_QWORD *)a2 + 12);
    if (v26)
    {
      v41 = v24;
      if (v26[1] - *v26 != 72)
        __assert_rtn("logCalReverseLUTs", "PRProtobufLogger.cpp", 1538, "luts.size() == measurement_engine::kNumOfLUT");
      v27 = 0;
      v44 = (_QWORD *)*((_QWORD *)a2 + 12);
      do
      {
        v28 = (_QWORD *)(*v26 + 24 * v27);
        if (v28[1] - *v28 != 888)
          __assert_rtn("logCalReverseLUTs", "PRProtobufLogger.cpp", 1541, "table.size() == measurement_engine::kLutSize");
        for (j = 0; j != 37; ++j)
        {
          v30 = (_QWORD *)(*v28 + 24 * j);
          if (v30[1] - *v30 != 148)
            __assert_rtn("logCalReverseLUTs", "PRProtobufLogger.cpp", 1544, "row.size() == measurement_engine::kLutSize");
          v31 = 0;
          do
          {
            v32 = (__int16 *)(*v30 + v31);
            v33 = *v32;
            v34 = v32[1];
            v35 = *(_DWORD *)(v6 + 44);
            v36 = *(int *)(v6 + 40);
            if ((int)v36 >= v35)
            {
              if (v35 == *(_DWORD *)(v6 + 48))
              {
                wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(v6 + 32), v35 + 1);
                v35 = *(_DWORD *)(v6 + 44);
              }
              *(_DWORD *)(v6 + 44) = v35 + 1;
              sub_100083424();
            }
            v37 = *(_QWORD *)(v6 + 32);
            *(_DWORD *)(v6 + 40) = v36 + 1;
            v38 = *(_DWORD **)(v37 + 8 * v36);
            v31 += 4;
            v38[7] |= 3u;
            v38[4] = v33;
            v38[5] = v34;
          }
          while (v31 != 148);
        }
        ++v27;
        v26 = v44;
      }
      while (v27 != 3);
      v24 = v41 + 1;
    }
    *(_DWORD *)(v6 + 68) |= 2u;
    *(_DWORD *)(v6 + 20) = v24;
    v25 = sub_10026C02C(v42, (wireless_diagnostics::google::protobuf::MessageLite *)v45);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
      sub_1003E2FBC();
    v25 = 0;
  }
  sub_10011D2FC(v45);
  return v25;
}

void sub_100272BD8()
{
  operator delete();
}

uint64_t sub_100272C60(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unsigned __int8 v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  int i;
  int j;
  int v19;
  int v20;
  uint64_t v21;
  int k;
  int m;
  int v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int n;
  int v31;
  int v32;
  uint64_t v33;
  int ii;
  int jj;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  const char *v41;
  int v42;
  const char *v43;
  const char *v44;
  _QWORD v45[6];
  uint64_t v46;
  int v47;

  if (sub_1001A8874(a4))
  {
    sub_10011C6A4(v45);
    if (sub_10026BF64((uint64_t)v45, *(_QWORD *)(a1 + 120)))
    {
      v47 |= 2u;
      v8 = v46;
      if (!v46)
        operator new();
      *(_DWORD *)(v46 + 44) |= 2u;
      v9 = *(_QWORD *)(v8 + 24);
      if (!v9)
        operator new();
      *(_DWORD *)(v9 + 376) |= 0x200u;
      v10 = *(_QWORD *)(v9 + 80);
      if (!v10)
        operator new();
      v11 = sub_1001A880C(a4);
      v12 = 0;
      if (v11)
      {
        do
        {
          v13 = v11;
          v12 += v11 & 1;
          LOBYTE(v11) = v11 >> 1;
        }
        while (v13 > 1);
      }
      v14 = sub_100272304(a2);
      if (sub_10006DA24(v14))
      {
        v15 = *(_DWORD *)(v10 + 108);
        *(_DWORD *)(v10 + 16) = v14;
        *(_DWORD *)(v10 + 20) = v12;
        *(_DWORD *)(v10 + 24) = 2 * v12;
        *(_DWORD *)(v10 + 28) = 181;
        *(_DWORD *)(v10 + 108) = v15 | 0x1F;
        *(_DWORD *)(v10 + 64) = 181;
        v16 = sub_10026C5B8(a3);
        if (sub_10006DA40(v16))
        {
          *(_DWORD *)(v10 + 108) |= 0x200u;
          *(_DWORD *)(v10 + 68) = v16;
          if (sub_1001A8814(a4))
          {
            if (!a4[64])
              sub_10000BA44();
            if (!a4[128])
              sub_10000BA44();
            for (i = 0; i != 181; ++i)
            {
              for (j = 0; j != 181; ++j)
              {
                v19 = sub_1001A7D40((uint64_t)(a4 + 8), i, j);
                v20 = *(_DWORD *)(v10 + 40);
                if (v20 == *(_DWORD *)(v10 + 44))
                {
                  sub_10006BAB4(v10 + 32, v20 + 1);
                  v20 = *(_DWORD *)(v10 + 40);
                }
                v21 = *(_QWORD *)(v10 + 32);
                *(_DWORD *)(v10 + 40) = v20 + 1;
                *(_DWORD *)(v21 + 4 * v20) = v19;
              }
            }
            for (k = 0; k != 181; ++k)
            {
              for (m = 0; m != 181; ++m)
              {
                v24 = sub_1001A7D40((uint64_t)(a4 + 72), k, m);
                v25 = *(_DWORD *)(v10 + 56);
                if (v25 == *(_DWORD *)(v10 + 60))
                {
                  sub_10006BAB4(v10 + 48, v25 + 1);
                  v25 = *(_DWORD *)(v10 + 56);
                }
                v26 = *(_QWORD *)(v10 + 48);
                *(_DWORD *)(v10 + 56) = v25 + 1;
                *(_DWORD *)(v26 + 4 * v25) = v24;
              }
            }
          }
          if (sub_1001A8844(a4))
          {
            if (!a4[192])
              sub_10000BA44();
            if (!a4[256])
              sub_10000BA44();
            v27 = 0;
            v28 = (uint64_t)(a4 + 136);
            v29 = (uint64_t)(a4 + 200);
            do
            {
              for (n = 0; n != 181; ++n)
              {
                v31 = sub_1001A7D40(v28, v27, n);
                v32 = *(_DWORD *)(v10 + 80);
                if (v32 == *(_DWORD *)(v10 + 84))
                {
                  sub_10006BAB4(v10 + 72, v32 + 1);
                  v32 = *(_DWORD *)(v10 + 80);
                }
                v33 = *(_QWORD *)(v10 + 72);
                *(_DWORD *)(v10 + 80) = v32 + 1;
                *(_DWORD *)(v33 + 4 * v32) = v31;
              }
              ++v27;
            }
            while (v27 != 181);
            for (ii = 0; ii != 181; ++ii)
            {
              for (jj = 0; jj != 181; ++jj)
              {
                v36 = sub_1001A7D40(v29, ii, jj);
                v37 = *(_DWORD *)(v10 + 96);
                if (v37 == *(_DWORD *)(v10 + 100))
                {
                  sub_10006BAB4(v10 + 88, v37 + 1);
                  v37 = *(_DWORD *)(v10 + 96);
                }
                v38 = *(_QWORD *)(v10 + 88);
                *(_DWORD *)(v10 + 96) = v37 + 1;
                *(_DWORD *)(v38 + 4 * v37) = v36;
              }
            }
            v39 = sub_10026C02C(a1, (wireless_diagnostics::google::protobuf::MessageLite *)v45);
LABEL_50:
            sub_10011D2FC(v45);
            return v39;
          }
          v41 = "calBlob.ch9CalAvailable()";
          v42 = 1605;
          v43 = "PRProtobufLogger.cpp";
          v44 = "logCalForwardLUTs";
        }
        else
        {
          v41 = "::CLP::LogEntry::Nearbyd::AccessoryType_IsValid(value)";
          v42 = 4217;
          v43 = "CLPNearbyd.pb.h";
          v44 = "set_accessory_type";
        }
      }
      else
      {
        v41 = "::CLP::LogEntry::Nearbyd::DeviceType_IsValid(value)";
        v42 = 4006;
        v43 = "CLPNearbyd.pb.h";
        v44 = "set_device_type";
      }
      __assert_rtn(v44, v43, v42, v41);
    }
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
      sub_1003E2FBC();
    v39 = 0;
    goto LABEL_50;
  }
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
    sub_1003E3964();
  return 0;
}

void sub_1002730D8()
{
  operator delete();
}

uint64_t sub_100273168(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  std::string::size_type v14;
  const std::string::value_type *v15;
  std::string *v16;
  uint64_t v17;
  _QWORD v19[6];
  uint64_t v20;
  int v21;

  sub_10011C6A4(v19);
  if (sub_10026BF64((uint64_t)v19, *(_QWORD *)(a1 + 120)))
  {
    v21 |= 2u;
    v4 = v20;
    if (!v20)
      operator new();
    *(_DWORD *)(v20 + 44) |= 2u;
    v5 = *(_QWORD *)(v4 + 24);
    if (!v5)
      operator new();
    *(_DWORD *)(v5 + 380) |= 0x80u;
    v6 = *(int **)(v5 + 320);
    if (!v6)
      operator new();
    v7 = *a2;
    v8 = a2[1];
    if (*a2 != v8)
    {
      do
      {
        v9 = v6[7];
        v10 = v6[6];
        if ((int)v10 >= v9)
        {
          if (v9 == v6[8])
          {
            wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(v6 + 4), v9 + 1);
            v9 = v6[7];
          }
          v6[7] = v9 + 1;
          sub_100083484();
        }
        v11 = *((_QWORD *)v6 + 2);
        v6[6] = v10 + 1;
        v12 = *(_QWORD *)(v11 + 8 * v10);
        v13 = *(_DWORD *)(v12 + 36);
        *(_DWORD *)(v12 + 16) = *(_DWORD *)v7;
        v14 = *(_QWORD *)(v7 + 8);
        *(_DWORD *)(v12 + 20) = v14;
        v15 = *(const std::string::value_type **)(v7 + 16);
        *(_DWORD *)(v12 + 36) = v13 | 7;
        v16 = *(std::string **)(v12 + 24);
        if (v16 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
          operator new();
        std::string::assign(v16, v15, v14);
        v7 += 40;
      }
      while (v7 != v8);
    }
    v17 = sub_10026C02C(a1, (wireless_diagnostics::google::protobuf::MessageLite *)v19);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
      sub_1003E2FBC();
    v17 = 0;
  }
  sub_10011D2FC(v19);
  return v17;
}

void sub_1002733A0()
{
  operator delete();
}

uint64_t sub_100273404(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t i;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t j;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t k;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t m;
  int v30;
  int v31;
  uint64_t n;
  int v33;
  int v34;
  uint64_t ii;
  int v36;
  int v37;
  uint64_t jj;
  int v39;
  int v40;
  uint64_t kk;
  int v42;
  int v43;
  uint64_t mm;
  int v45;
  int v46;
  uint64_t nn;
  int v48;
  int v49;
  uint64_t i1;
  int v51;
  int v52;
  uint64_t i2;
  int v54;
  int v55;
  double v56;
  uint64_t v57;
  float v58;
  int v59;
  int v60;
  int v61;
  uint64_t i3;
  int v63;
  int v64;
  uint64_t i4;
  int v66;
  int v67;
  uint64_t i5;
  int v69;
  int v70;
  double v71;
  uint64_t v72;
  float v73;
  int v74;
  int v75;
  int v76;
  uint64_t i6;
  int v78;
  int v79;
  uint64_t i7;
  int v81;
  int v82;
  uint64_t i8;
  int v84;
  int v85;
  double v86;
  int v87;
  float v88;
  int v89;
  int v90;
  int v91;
  int v92;
  uint64_t v93;
  _QWORD v95[6];
  uint64_t v96;
  int v97;

  sub_10011C6A4(v95);
  if (sub_10026BF64((uint64_t)v95, *(_QWORD *)(a1 + 120)))
  {
    v97 |= 2u;
    v6 = v96;
    if (!v96)
      operator new();
    *(_DWORD *)(v96 + 44) |= 2u;
    v7 = *(_QWORD *)(v6 + 24);
    if (!v7)
      operator new();
    *(_DWORD *)(v7 + 376) |= 0x800u;
    v8 = *(_QWORD *)(v7 + 96);
    if (!v8)
      operator new();
    v9 = sub_10026C5B8(a2);
    if (!sub_10006DA40(v9))
      __assert_rtn("set_accessory_type", "CLPNearbyd.pb.h", 4308, "::CLP::LogEntry::Nearbyd::AccessoryType_IsValid(value)");
    v10 = 0;
    *(_DWORD *)(v8 + 40) |= 1u;
    *(_DWORD *)(v8 + 32) = v9;
    v11 = *(_DWORD *)(v8 + 24);
    v12 = a3;
    do
    {
      for (i = 0; i != 168; i += 4)
      {
        v14 = *(_DWORD *)(v12 + i);
        if (v11 == *(_DWORD *)(v8 + 28))
        {
          sub_10006BAB4(v8 + 16, v11 + 1);
          v11 = *(_DWORD *)(v8 + 24);
        }
        v15 = v11;
        v16 = *(_QWORD *)(v8 + 16);
        *(_DWORD *)(v8 + 24) = ++v11;
        *(_DWORD *)(v16 + 4 * v15) = v14;
      }
      ++v10;
      v12 += 168;
    }
    while (v10 != 50);
    v17 = a3 + 8600;
    v18 = a3 + 13600;
    do
    {
      for (j = 0; j != 200; j += 4)
      {
        v20 = *(_DWORD *)(v17 + j);
        if (v11 == *(_DWORD *)(v8 + 28))
        {
          sub_10006BAB4(v8 + 16, v11 + 1);
          v11 = *(_DWORD *)(v8 + 24);
          v16 = *(_QWORD *)(v8 + 16);
        }
        v21 = v11++;
        *(_DWORD *)(v8 + 24) = v11;
        *(_DWORD *)(v16 + 4 * v21) = v20;
      }
      v17 += 200;
    }
    while (v17 != v18);
    v22 = a3 + 13700;
    v23 = a3 + 14900;
    do
    {
      for (k = 0; k != 100; k += 4)
      {
        v25 = *(_DWORD *)(v22 + k);
        if (v11 == *(_DWORD *)(v8 + 28))
        {
          sub_10006BAB4(v8 + 16, v11 + 1);
          v11 = *(_DWORD *)(v8 + 24);
          v16 = *(_QWORD *)(v8 + 16);
        }
        v26 = v11++;
        *(_DWORD *)(v8 + 24) = v11;
        *(_DWORD *)(v16 + 4 * v26) = v25;
      }
      v22 += 100;
    }
    while (v22 != v23);
    v27 = a3 + 14948;
    v28 = a3 + 15236;
    do
    {
      for (m = 0; m != 48; m += 4)
      {
        v30 = *(_DWORD *)(v27 + m);
        if (v11 == *(_DWORD *)(v8 + 28))
        {
          sub_10006BAB4(v8 + 16, v11 + 1);
          v11 = *(_DWORD *)(v8 + 24);
          v16 = *(_QWORD *)(v8 + 16);
        }
        v31 = v11++;
        *(_DWORD *)(v8 + 24) = v11;
        *(_DWORD *)(v16 + 4 * v31) = v30;
      }
      v27 += 48;
    }
    while (v27 != v28);
    for (n = 0; n != 200; n += 4)
    {
      v33 = *(_DWORD *)(a3 + 8400 + n);
      if (v11 == *(_DWORD *)(v8 + 28))
      {
        sub_10006BAB4(v8 + 16, v11 + 1);
        v11 = *(_DWORD *)(v8 + 24);
        v16 = *(_QWORD *)(v8 + 16);
      }
      v34 = v11++;
      *(_DWORD *)(v8 + 24) = v11;
      *(_DWORD *)(v16 + 4 * v34) = v33;
    }
    for (ii = 0; ii != 100; ii += 4)
    {
      v36 = *(_DWORD *)(v18 + ii);
      if (v11 == *(_DWORD *)(v8 + 28))
      {
        sub_10006BAB4(v8 + 16, v11 + 1);
        v11 = *(_DWORD *)(v8 + 24);
        v16 = *(_QWORD *)(v8 + 16);
      }
      v37 = v11++;
      *(_DWORD *)(v8 + 24) = v11;
      *(_DWORD *)(v16 + 4 * v37) = v36;
    }
    for (jj = 0; jj != 48; jj += 4)
    {
      v39 = *(_DWORD *)(v23 + jj);
      if (v11 == *(_DWORD *)(v8 + 28))
      {
        sub_10006BAB4(v8 + 16, v11 + 1);
        v11 = *(_DWORD *)(v8 + 24);
        v16 = *(_QWORD *)(v8 + 16);
      }
      v40 = v11++;
      *(_DWORD *)(v8 + 24) = v11;
      *(_DWORD *)(v16 + 4 * v40) = v39;
    }
    for (kk = 0; kk != 24; kk += 4)
    {
      v42 = *(_DWORD *)(v28 + kk);
      if (v11 == *(_DWORD *)(v8 + 28))
      {
        sub_10006BAB4(v8 + 16, v11 + 1);
        v11 = *(_DWORD *)(v8 + 24);
        v16 = *(_QWORD *)(v8 + 16);
      }
      v43 = v11++;
      *(_DWORD *)(v8 + 24) = v11;
      *(_DWORD *)(v16 + 4 * v43) = v42;
    }
    for (mm = 0; mm != 200; mm += 4)
    {
      v45 = *(_DWORD *)(a3 + 15264 + mm);
      if (v11 == *(_DWORD *)(v8 + 28))
      {
        sub_10006BAB4(v8 + 16, v11 + 1);
        v11 = *(_DWORD *)(v8 + 24);
        v16 = *(_QWORD *)(v8 + 16);
      }
      v46 = v11++;
      *(_DWORD *)(v8 + 24) = v11;
      *(_DWORD *)(v16 + 4 * v46) = v45;
    }
    for (nn = 0; nn != 200; nn += 4)
    {
      v48 = *(_DWORD *)(a3 + 15464 + nn);
      if (v11 == *(_DWORD *)(v8 + 28))
      {
        sub_10006BAB4(v8 + 16, v11 + 1);
        v11 = *(_DWORD *)(v8 + 24);
        v16 = *(_QWORD *)(v8 + 16);
      }
      v49 = v11++;
      *(_DWORD *)(v8 + 24) = v11;
      *(_DWORD *)(v16 + 4 * v49) = v48;
    }
    for (i1 = 0; i1 != 200; i1 += 4)
    {
      v51 = *(_DWORD *)(a3 + 15664 + i1);
      if (v11 == *(_DWORD *)(v8 + 28))
      {
        sub_10006BAB4(v8 + 16, v11 + 1);
        v11 = *(_DWORD *)(v8 + 24);
        v16 = *(_QWORD *)(v8 + 16);
      }
      v52 = v11++;
      *(_DWORD *)(v8 + 24) = v11;
      *(_DWORD *)(v16 + 4 * v52) = v51;
    }
    for (i2 = 0; i2 != 200; i2 += 4)
    {
      v54 = *(_DWORD *)(a3 + 15864 + i2);
      if (v11 == *(_DWORD *)(v8 + 28))
      {
        sub_10006BAB4(v8 + 16, v11 + 1);
        v55 = *(_DWORD *)(v8 + 24);
        v16 = *(_QWORD *)(v8 + 16);
      }
      else
      {
        v55 = v11;
      }
      v11 = v55 + 1;
      *(_DWORD *)(v8 + 24) = v55 + 1;
      *(_DWORD *)(v16 + 4 * v55) = v54;
    }
    v56 = *(double *)(a3 + 16064);
    if (v11 == *(_DWORD *)(v8 + 28))
    {
      sub_10006BAB4(v8 + 16, v55 + 2);
      v11 = *(_DWORD *)(v8 + 24);
      v16 = *(_QWORD *)(v8 + 16);
    }
    v57 = 0;
    v58 = v56;
    v59 = v11 + 1;
    *(_DWORD *)(v8 + 24) = v11 + 1;
    *(float *)(v16 + 4 * v11) = v58;
    do
    {
      v60 = *(_DWORD *)(a3 + 16072 + v57);
      if (v59 == *(_DWORD *)(v8 + 28))
      {
        sub_10006BAB4(v8 + 16, v59 + 1);
        v59 = *(_DWORD *)(v8 + 24);
        v16 = *(_QWORD *)(v8 + 16);
      }
      v61 = v59++;
      *(_DWORD *)(v8 + 24) = v59;
      *(_DWORD *)(v16 + 4 * v61) = v60;
      v57 += 4;
    }
    while (v57 != 100);
    for (i3 = 0; i3 != 100; i3 += 4)
    {
      v63 = *(_DWORD *)(a3 + 16172 + i3);
      if (v59 == *(_DWORD *)(v8 + 28))
      {
        sub_10006BAB4(v8 + 16, v59 + 1);
        v59 = *(_DWORD *)(v8 + 24);
        v16 = *(_QWORD *)(v8 + 16);
      }
      v64 = v59++;
      *(_DWORD *)(v8 + 24) = v59;
      *(_DWORD *)(v16 + 4 * v64) = v63;
    }
    for (i4 = 0; i4 != 100; i4 += 4)
    {
      v66 = *(_DWORD *)(a3 + 16272 + i4);
      if (v59 == *(_DWORD *)(v8 + 28))
      {
        sub_10006BAB4(v8 + 16, v59 + 1);
        v59 = *(_DWORD *)(v8 + 24);
        v16 = *(_QWORD *)(v8 + 16);
      }
      v67 = v59++;
      *(_DWORD *)(v8 + 24) = v59;
      *(_DWORD *)(v16 + 4 * v67) = v66;
    }
    for (i5 = 0; i5 != 100; i5 += 4)
    {
      v69 = *(_DWORD *)(a3 + 16372 + i5);
      if (v59 == *(_DWORD *)(v8 + 28))
      {
        sub_10006BAB4(v8 + 16, v59 + 1);
        v70 = *(_DWORD *)(v8 + 24);
        v16 = *(_QWORD *)(v8 + 16);
      }
      else
      {
        v70 = v59;
      }
      v59 = v70 + 1;
      *(_DWORD *)(v8 + 24) = v70 + 1;
      *(_DWORD *)(v16 + 4 * v70) = v69;
    }
    v71 = *(double *)(a3 + 16472);
    if (v59 == *(_DWORD *)(v8 + 28))
    {
      sub_10006BAB4(v8 + 16, v70 + 2);
      v59 = *(_DWORD *)(v8 + 24);
      v16 = *(_QWORD *)(v8 + 16);
    }
    v72 = 0;
    v73 = v71;
    v74 = v59 + 1;
    *(_DWORD *)(v8 + 24) = v59 + 1;
    *(float *)(v16 + 4 * v59) = v73;
    do
    {
      v75 = *(_DWORD *)(a3 + 16480 + v72);
      if (v74 == *(_DWORD *)(v8 + 28))
      {
        sub_10006BAB4(v8 + 16, v74 + 1);
        v74 = *(_DWORD *)(v8 + 24);
        v16 = *(_QWORD *)(v8 + 16);
      }
      v76 = v74++;
      *(_DWORD *)(v8 + 24) = v74;
      *(_DWORD *)(v16 + 4 * v76) = v75;
      v72 += 4;
    }
    while (v72 != 48);
    for (i6 = 0; i6 != 48; i6 += 4)
    {
      v78 = *(_DWORD *)(a3 + 16528 + i6);
      if (v74 == *(_DWORD *)(v8 + 28))
      {
        sub_10006BAB4(v8 + 16, v74 + 1);
        v74 = *(_DWORD *)(v8 + 24);
        v16 = *(_QWORD *)(v8 + 16);
      }
      v79 = v74++;
      *(_DWORD *)(v8 + 24) = v74;
      *(_DWORD *)(v16 + 4 * v79) = v78;
    }
    for (i7 = 0; i7 != 48; i7 += 4)
    {
      v81 = *(_DWORD *)(a3 + 16576 + i7);
      if (v74 == *(_DWORD *)(v8 + 28))
      {
        sub_10006BAB4(v8 + 16, v74 + 1);
        v74 = *(_DWORD *)(v8 + 24);
        v16 = *(_QWORD *)(v8 + 16);
      }
      v82 = v74++;
      *(_DWORD *)(v8 + 24) = v74;
      *(_DWORD *)(v16 + 4 * v82) = v81;
    }
    for (i8 = 0; i8 != 48; i8 += 4)
    {
      v84 = *(_DWORD *)(a3 + 16624 + i8);
      if (v74 == *(_DWORD *)(v8 + 28))
      {
        sub_10006BAB4(v8 + 16, v74 + 1);
        v85 = *(_DWORD *)(v8 + 24);
        v16 = *(_QWORD *)(v8 + 16);
      }
      else
      {
        v85 = v74;
      }
      v74 = v85 + 1;
      *(_DWORD *)(v8 + 24) = v85 + 1;
      *(_DWORD *)(v16 + 4 * v85) = v84;
    }
    v86 = *(double *)(a3 + 16672);
    v87 = *(_DWORD *)(v8 + 28);
    if (v74 == v87)
    {
      sub_10006BAB4(v8 + 16, v85 + 2);
      v16 = *(_QWORD *)(v8 + 16);
      v74 = *(_DWORD *)(v8 + 24);
      v87 = *(_DWORD *)(v8 + 28);
    }
    v88 = v86;
    v89 = v74 + 1;
    *(_DWORD *)(v8 + 24) = v74 + 1;
    *(float *)(v16 + 4 * v74) = v88;
    v90 = *(_DWORD *)(a3 + 16680);
    if (v74 + 1 == v87)
    {
      sub_10006BAB4(v8 + 16, v74 + 2);
      v16 = *(_QWORD *)(v8 + 16);
      v89 = *(_DWORD *)(v8 + 24);
      v87 = *(_DWORD *)(v8 + 28);
    }
    v91 = v89 + 1;
    *(_DWORD *)(v8 + 24) = v89 + 1;
    *(_DWORD *)(v16 + 4 * v89) = v90;
    v92 = *(_DWORD *)(a3 + 16684);
    if (v89 + 1 == v87)
    {
      sub_10006BAB4(v8 + 16, v89 + 2);
      v91 = *(_DWORD *)(v8 + 24);
      v16 = *(_QWORD *)(v8 + 16);
    }
    *(_DWORD *)(v8 + 24) = v91 + 1;
    *(_DWORD *)(v16 + 4 * v91) = v92;
    v93 = sub_10026C02C(a1, (wireless_diagnostics::google::protobuf::MessageLite *)v95);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
      sub_1003E2FBC();
    v93 = 0;
  }
  sub_10011D2FC(v95);
  return v93;
}

void sub_100273CE0()
{
  operator delete();
}

uint64_t sub_100273D94(uint64_t a1, const std::string *a2, uint64_t *a3, double a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  std::string *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v20[48];
  uint64_t v21;
  int v22;
  _BYTE v23[64];
  char v24;

  sub_100274028(*(_QWORD *)(a1 + 120), v23);
  if (!v24)
    return 0;
  sub_10011D258(v20, v23);
  v22 |= 2u;
  v8 = v21;
  if (!v21)
    operator new();
  *(_DWORD *)(v21 + 44) |= 2u;
  v9 = *(_QWORD *)(v8 + 24);
  if (!v9)
    operator new();
  *(_DWORD *)(v9 + 376) |= 0x10000u;
  v10 = *(_QWORD *)(v9 + 136);
  if (!v10)
    operator new();
  v11 = *(_DWORD *)(v10 + 60);
  *(double *)(v10 + 16) = a4;
  *(_DWORD *)(v10 + 60) = v11 | 3;
  v12 = *(std::string **)(v10 + 24);
  if (v12 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
    operator new();
  std::string::operator=(v12, a2);
  v13 = *a3;
  v14 = a3[1];
  if (*a3 != v14)
  {
    do
    {
      v15 = *(_DWORD *)(v10 + 44);
      v16 = *(int *)(v10 + 40);
      if ((int)v16 >= v15)
      {
        if (v15 == *(_DWORD *)(v10 + 48))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(v10 + 32), v15 + 1);
          v15 = *(_DWORD *)(v10 + 44);
        }
        *(_DWORD *)(v10 + 44) = v15 + 1;
        sub_10011C110();
      }
      v17 = *(_QWORD *)(v10 + 32);
      *(_DWORD *)(v10 + 40) = v16 + 1;
      sub_1002740A4(*(_QWORD *)(v17 + 8 * v16), v13);
      v13 += 160;
    }
    while (v13 != v14);
  }
  v18 = sub_10026C02C(a1, (wireless_diagnostics::google::protobuf::MessageLite *)v20);
  sub_10011D2FC(v20);
  if (v24)
    sub_10011D2FC(v23);
  return v18;
}

void sub_100273FAC()
{
  operator delete();
}

uint64_t sub_100274028@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  char v4;
  _QWORD v6[8];

  sub_10011C6A4(v6);
  if (sub_10026BF64((uint64_t)v6, a1))
  {
    sub_10011D258(a2, v6);
    v4 = 1;
  }
  else
  {
    v4 = 0;
    *a2 = 0;
  }
  a2[64] = v4;
  return sub_10011D2FC(v6);
}

void sub_100274090(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10011D2FC(&a9);
  _Unwind_Resume(a1);
}

double sub_1002740A4(uint64_t a1, uint64_t a2)
{
  const std::string::value_type *v4;
  std::string::size_type v5;
  std::string *v6;
  uint64_t v7;
  unsigned int v8;
  double result;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;

  v4 = *(const std::string::value_type **)a2;
  v5 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  *(_DWORD *)(a1 + 84) |= 1u;
  v6 = *(std::string **)(a1 + 16);
  if (v6 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
    operator new();
  std::string::assign(v6, v4, v5);
  v7 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 84) |= 2u;
  *(_QWORD *)(a1 + 24) = v7;
  if (!sub_10006E2D0(0))
    sub_1003CD310();
  *(_DWORD *)(a1 + 84) |= 4u;
  *(_DWORD *)(a1 + 48) = 0;
  if ((*(_DWORD *)(a2 + 32) - 1) >= 3)
    v8 = 0;
  else
    v8 = *(_DWORD *)(a2 + 32);
  if (!sub_10006E2D0(v8))
    sub_1003CD310();
  v10 = *(_DWORD *)(a1 + 84);
  v11 = v10 | 4;
  *(_DWORD *)(a1 + 84) = v10 | 4;
  *(_DWORD *)(a1 + 48) = v8;
  if (*(_BYTE *)(a2 + 40))
  {
    result = *(float *)(a2 + 36);
    v11 = v10 | 0xC;
    *(_DWORD *)(a1 + 84) = v10 | 0xC;
    *(double *)(a1 + 32) = result;
  }
  if (*(_BYTE *)(a2 + 80))
  {
    *(_DWORD *)(a1 + 84) = v11 | 0x10;
    v12 = *(_QWORD *)(a1 + 40);
    if (!v12)
      operator new();
    v13 = *(_DWORD *)(v12 + 48);
    *(_OWORD *)(v12 + 16) = *(_OWORD *)(a2 + 56);
    result = *(double *)(a2 + 72);
    *(_DWORD *)(v12 + 48) = v13 | 0xE;
    *(double *)(v12 + 32) = result;
    if (*(_DWORD *)(a2 + 48) == 1)
    {
      if (!sub_10006DA5C(1u))
        sub_1003CD2E8();
      *(_DWORD *)(v12 + 48) |= 1u;
      *(_DWORD *)(v12 + 40) = 1;
    }
  }
  if (*(_BYTE *)(a2 + 96))
  {
    result = *(double *)(a2 + 88);
    *(_DWORD *)(a1 + 84) |= 0x20u;
    *(double *)(a1 + 56) = result;
  }
  if (*(_BYTE *)(a2 + 105))
  {
    v14 = *(unsigned __int8 *)(a2 + 104);
    *(_DWORD *)(a1 + 84) |= 0x40u;
    *(_DWORD *)(a1 + 52) = v14;
  }
  if (*(_BYTE *)(a2 + 120))
  {
    result = *(double *)(a2 + 112);
    *(_DWORD *)(a1 + 84) |= 0x80u;
    *(double *)(a1 + 64) = result;
  }
  if (*(_BYTE *)(a2 + 152))
  {
    result = *(double *)(a2 + 144);
    *(_DWORD *)(a1 + 84) |= 0x100u;
    *(double *)(a1 + 72) = result;
  }
  return result;
}

void sub_10027429C()
{
  operator delete();
}

uint64_t sub_1002742C0(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5, float a6, double a7)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  _BYTE v20[48];
  uint64_t v21;
  int v22;
  _BYTE v23[64];
  char v24;

  sub_100274028(*(_QWORD *)(a1 + 120), v23);
  if (!v24)
    return 0;
  sub_10011D258(v20, v23);
  v22 |= 2u;
  v14 = v21;
  if (!v21)
    operator new();
  *(_DWORD *)(v21 + 44) |= 2u;
  v15 = *(_QWORD *)(v14 + 24);
  if (!v15)
    operator new();
  *(_DWORD *)(v15 + 376) |= 0x1000u;
  v16 = *(_QWORD *)(v15 + 104);
  if (!v16)
    operator new();
  v17 = *(_DWORD *)(v16 + 56);
  *(_QWORD *)(v16 + 16) = a2;
  *(float *)(v16 + 24) = a6;
  *(double *)(v16 + 32) = a7;
  *(_DWORD *)(v16 + 28) = a3;
  *(_DWORD *)(v16 + 48) = a4;
  *(_DWORD *)(v16 + 56) = v17 | 0x3F;
  *(_QWORD *)(v16 + 40) = a5;
  v18 = sub_10026C02C(a1, (wireless_diagnostics::google::protobuf::MessageLite *)v20);
  sub_10011D2FC(v20);
  if (v24)
    sub_10011D2FC(v23);
  return v18;
}

void sub_10027443C()
{
  operator delete();
}

uint64_t sub_1002744B4(uint64_t a1, const std::string *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  std::string *v10;
  std::string *v11;
  int v12;
  std::string *v13;
  uint64_t v14;
  std::string __p;
  _BYTE v17[48];
  uint64_t v18;
  int v19;
  _BYTE v20[64];
  char v21;

  sub_100274028(*(_QWORD *)(a1 + 120), v20);
  if (!v21)
    return 0;
  sub_10011D258(v17, v20);
  v19 |= 2u;
  v6 = v18;
  if (!v18)
    operator new();
  *(_DWORD *)(v18 + 44) |= 2u;
  v7 = *(_QWORD *)(v6 + 24);
  if (!v7)
    operator new();
  *(_DWORD *)(v7 + 376) |= 0x20000u;
  v8 = *(_QWORD *)(v7 + 144);
  if (!v8)
    operator new();
  sub_10017EEF4(&__p, *(char **)(a3 + 48), *(char **)(a3 + 56), *(_QWORD *)(a3 + 56) - *(_QWORD *)(a3 + 48));
  v9 = *(_DWORD *)(v8 + 76);
  *(_OWORD *)(v8 + 16) = *(_OWORD *)a3;
  *(_DWORD *)(v8 + 76) = v9 | 7;
  v10 = *(std::string **)(v8 + 32);
  if (v10 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
    operator new();
  std::string::operator=(v10, &__p);
  *(_DWORD *)(v8 + 76) |= 0x40u;
  v11 = *(std::string **)(v8 + 56);
  if (v11 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
    operator new();
  std::string::operator=(v11, (const std::string *)(a3 + 24));
  v12 = *(_DWORD *)(v8 + 76);
  *(_DWORD *)(v8 + 44) = *(_DWORD *)(a3 + 16);
  *(_QWORD *)(v8 + 48) = *(_QWORD *)(a3 + 72);
  *(_DWORD *)(v8 + 76) = v12 | 0xB0;
  v13 = *(std::string **)(v8 + 64);
  if (v13 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
    operator new();
  std::string::operator=(v13, a2);
  v14 = sub_10026C02C(a1, (wireless_diagnostics::google::protobuf::MessageLite *)v17);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  sub_10011D2FC(v17);
  if (v21)
    sub_10011D2FC(v20);
  return v14;
}

void sub_1002746FC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  operator delete();
}

uint64_t sub_100274790(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v16[48];
  uint64_t v17;
  int v18;
  _BYTE v19[64];
  char v20;

  sub_100274028(*(_QWORD *)(a1 + 120), v19);
  if (!v20)
    return 0;
  sub_10011D258(v16, v19);
  v18 |= 2u;
  v8 = v17;
  if (!v17)
    operator new();
  *(_DWORD *)(v17 + 44) |= 2u;
  v9 = *(_QWORD *)(v8 + 24);
  if (!v9)
    operator new();
  *(_DWORD *)(v9 + 376) |= 0x2000u;
  v10 = *(_QWORD *)(v9 + 112);
  if (!v10)
    operator new();
  *(_DWORD *)(v10 + 148) |= 1u;
  v11 = *(_QWORD *)(v10 + 16);
  if (!v11)
    operator new();
  v12 = *(_DWORD *)(v11 + 44);
  *(double *)(v11 + 16) = a4;
  *(_QWORD *)(v11 + 32) = a2;
  *(_DWORD *)(v11 + 44) = v12 | 7;
  v13 = *(_QWORD *)(v11 + 24);
  if (!v13)
    operator new();
  sub_1002740A4(v13, a3);
  v14 = sub_10026C02C(a1, (wireless_diagnostics::google::protobuf::MessageLite *)v16);
  sub_10011D2FC(v16);
  if (v20)
    sub_10011D2FC(v19);
  return v14;
}

void sub_100274958()
{
  operator delete();
}

uint64_t sub_1002749FC(uint64_t a1, const std::string *a2, std::string **a3, uint64_t a4, const std::string *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  std::string *v14;
  std::string *v15;
  std::string *v16;
  std::string *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  _QWORD *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  _DWORD *v26;
  int v27;
  BOOL v28;
  int v29;
  BOOL v30;
  _QWORD *v31;
  _QWORD *v32;
  BOOL v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  float v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  char v43;
  uint64_t v44;
  char v45;
  int v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  int v55;
  const char *v56;
  const char *v57;
  _BYTE v58[48];
  uint64_t v59;
  int v60;
  _BYTE v61[64];
  char v62;

  sub_100274028(*(_QWORD *)(a1 + 120), v61);
  if (!v62)
    return 0;
  sub_10011D258(v58, v61);
  v60 |= 2u;
  v10 = v59;
  if (!v59)
    operator new();
  *(_DWORD *)(v59 + 44) |= 2u;
  v11 = *(_QWORD *)(v10 + 24);
  if (!v11)
    operator new();
  *(_DWORD *)(v11 + 376) |= 0x2000u;
  v12 = *(_QWORD *)(v11 + 112);
  if (!v12)
    operator new();
  *(_DWORD *)(v12 + 148) |= 2u;
  v13 = *(_QWORD *)(v12 + 24);
  if (!v13)
    operator new();
  *(_DWORD *)(v13 + 116) |= 1u;
  v14 = *(std::string **)(v13 + 16);
  if (v14 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
    operator new();
  std::string::operator=(v14, a2);
  *(_DWORD *)(v13 + 116) |= 0x80u;
  v15 = *(std::string **)(v13 + 88);
  if (v15 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
    operator new();
  std::string::operator=(v15, a5);
  v17 = *a3;
  v16 = a3[1];
  if (*a3 != v16)
  {
    do
    {
      v18 = *(_DWORD *)(v13 + 36);
      v19 = *(int *)(v13 + 32);
      if ((int)v19 >= v18)
      {
        if (v18 == *(_DWORD *)(v13 + 40))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(v13 + 24), v18 + 1);
          v18 = *(_DWORD *)(v13 + 36);
        }
        *(_DWORD *)(v13 + 36) = v18 + 1;
        sub_10011BF90();
      }
      v20 = *(_QWORD *)(v13 + 24);
      *(_DWORD *)(v13 + 32) = v19 + 1;
      sub_100275290(*(_QWORD *)(v20 + 8 * v19), v17);
      v17 += 2;
    }
    while (v17 != v16);
  }
  *(_DWORD *)(v13 + 116) |= 0x20u;
  v21 = *(int **)(v13 + 72);
  if (!v21)
    operator new();
  v22 = *(_QWORD **)a4;
  if (*(_QWORD *)a4 != a4 + 8)
  {
    while (1)
    {
      v23 = v21[7];
      v24 = v21[6];
      if ((int)v24 >= v23)
      {
        if (v23 == v21[8])
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(v21 + 4), v23 + 1);
          v23 = v21[7];
        }
        v21[7] = v23 + 1;
        sub_10011BF30();
      }
      v25 = *((_QWORD *)v21 + 2);
      v21[6] = v24 + 1;
      v26 = *(_DWORD **)(v25 + 8 * v24);
      v27 = *((_DWORD *)v22 + 7);
      switch(v27)
      {
        case 1:
          v28 = sub_100086BEC(1u);
          goto LABEL_35;
        case 2:
          v28 = sub_100086BEC(2u);
          goto LABEL_35;
        case 3:
          v28 = sub_100086BEC(3u);
LABEL_35:
          if (v28)
            goto LABEL_36;
          goto LABEL_72;
        case 4:
          if (!sub_100086BEC(4u))
          {
LABEL_72:
            v55 = 12765;
            v56 = "set_technology";
            v57 = "::CLP::LogEntry::Nearbyd::NI::RangingTechnology_IsValid(value)";
            goto LABEL_74;
          }
LABEL_36:
          v26[7] |= 1u;
          v26[4] = v27;
LABEL_37:
          v29 = *((_DWORD *)v22 + 8);
          switch(v29)
          {
            case 3:
              if (!sub_10006E2D0(3u))
              {
LABEL_73:
                v55 = 12788;
                v56 = "set_filter";
                v57 = "::CLP::LogEntry::Nearbyd::NI::FilterType_IsValid(value)";
LABEL_74:
                __assert_rtn(v56, "NearbyInteractionTypes.pb.h", v55, v57);
              }
              goto LABEL_45;
            case 2:
              v30 = sub_10006E2D0(2u);
LABEL_42:
              if (!v30)
                goto LABEL_73;
LABEL_45:
              v26[7] |= 2u;
              v26[5] = v29;
              break;
            case 1:
              v30 = sub_10006E2D0(1u);
              goto LABEL_42;
          }
          v31 = (_QWORD *)v22[1];
          if (v31)
          {
            do
            {
              v32 = v31;
              v31 = (_QWORD *)*v31;
            }
            while (v31);
          }
          else
          {
            do
            {
              v32 = (_QWORD *)v22[2];
              v33 = *v32 == (_QWORD)v22;
              v22 = v32;
            }
            while (!v33);
          }
          v22 = v32;
          if (v32 == (_QWORD *)(a4 + 8))
            goto LABEL_52;
          break;
        default:
          goto LABEL_37;
      }
    }
  }
LABEL_52:
  *(_DWORD *)(v13 + 116) |= 4u;
  v34 = *(_QWORD *)(v13 + 48);
  if (!v34)
    operator new();
  v35 = *(_DWORD *)(v34 + 36);
  *(_QWORD *)(v34 + 16) = *(_QWORD *)(a4 + 24);
  *(_DWORD *)(v34 + 36) = v35 | 7;
  v36 = *(_QWORD *)(v34 + 24);
  if (!v36)
    operator new();
  *(_DWORD *)(v36 + 28) |= 3u;
  *(_QWORD *)(v36 + 16) = *(_QWORD *)(a4 + 32);
  *(_DWORD *)(v13 + 116) |= 0x10u;
  v37 = *(_QWORD *)(v13 + 64);
  if (!v37)
    operator new();
  v38 = *(_DWORD *)(v37 + 72);
  *(float32x4_t *)(v37 + 16) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(a4 + 264)), *(float64x2_t *)(a4 + 280));
  *(float32x2_t *)(v37 + 32) = vcvt_f32_f64(*(float64x2_t *)(a4 + 296));
  v39 = *(double *)(a4 + 312);
  *(float *)(v37 + 64) = v39;
  *(_OWORD *)(v37 + 40) = *(_OWORD *)(a4 + 320);
  *(_DWORD *)(v37 + 72) = v38 | 0x3FF;
  v40 = *(_QWORD *)(v37 + 56);
  if (!v40)
    operator new();
  *(_DWORD *)(v40 + 28) |= 3u;
  *(_QWORD *)(v40 + 16) = *(_QWORD *)(a4 + 336);
  *(_DWORD *)(v13 + 116) |= 0x40u;
  v41 = *(_QWORD *)(v13 + 80);
  if (!v41)
    operator new();
  v42 = *(_DWORD *)(v41 + 40);
  *(_DWORD *)(v41 + 16) = *(_DWORD *)(a4 + 424);
  v43 = *(_BYTE *)(a4 + 492);
  *(_DWORD *)(v41 + 40) = v42 | 9;
  *(_BYTE *)(v41 + 32) = v43;
  *(_DWORD *)(v13 + 116) |= 0x200u;
  v44 = *(_QWORD *)(v13 + 104);
  if (!v44)
    operator new();
  v45 = *(_BYTE *)(a4 + 120);
  v46 = *(_DWORD *)(v44 + 44);
  *(_DWORD *)(v44 + 44) = v46 | 1;
  *(_BYTE *)(v44 + 16) = v45;
  *(_DWORD *)(v44 + 20) = *(_DWORD *)(a4 + 124);
  *(_DWORD *)(v44 + 44) = v46 | 7;
  v47 = *(_QWORD *)(v44 + 24);
  if (!v47)
    operator new();
  v48 = *(_DWORD *)(v47 + 88);
  *(_DWORD *)(v47 + 80) = *(_DWORD *)(a4 + 128);
  *(_OWORD *)(v47 + 24) = *(_OWORD *)(a4 + 136);
  *(_OWORD *)(v47 + 40) = *(_OWORD *)(a4 + 152);
  *(_OWORD *)(v47 + 56) = *(_OWORD *)(a4 + 168);
  v49 = *(_QWORD *)(a4 + 184);
  *(_DWORD *)(v47 + 88) = v48 | 0x3FC;
  *(_QWORD *)(v47 + 72) = v49;
  *(_DWORD *)(v44 + 44) |= 8u;
  v50 = *(_QWORD *)(v44 + 32);
  if (!v50)
    operator new();
  v51 = *(_DWORD *)(v50 + 88);
  *(_DWORD *)(v50 + 80) = *(_DWORD *)(a4 + 192);
  *(_OWORD *)(v50 + 24) = *(_OWORD *)(a4 + 200);
  *(_OWORD *)(v50 + 40) = *(_OWORD *)(a4 + 216);
  *(_OWORD *)(v50 + 56) = *(_OWORD *)(a4 + 232);
  v52 = *(_QWORD *)(a4 + 248);
  *(_DWORD *)(v50 + 88) = v51 | 0x3FC;
  *(_QWORD *)(v50 + 72) = v52;
  v53 = sub_10026C02C(a1, (wireless_diagnostics::google::protobuf::MessageLite *)v58);
  sub_10011D2FC(v58);
  if (v62)
    sub_10011D2FC(v61);
  return v53;
}

void sub_100275140()
{
  operator delete();
}

BOOL sub_100275290(uint64_t a1, std::string *__str)
{
  std::string *v4;
  double v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  std::string::value_type v11;
  int v12;
  unsigned int v13;
  _BOOL8 result;

  *(_DWORD *)(a1 + 56) |= 1u;
  v4 = *(std::string **)(a1 + 16);
  if (v4 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
    operator new();
  std::string::operator=(v4, __str);
  v5 = *(float *)&__str[1].__r_.__value_.__l.__data_;
  v6 = *(_DWORD *)(a1 + 56);
  *(_DWORD *)(a1 + 56) = v6 | 2;
  *(double *)(a1 + 24) = v5;
  v7 = __str[1].__r_.__value_.__r.__words[1];
  v8 = SHIDWORD(__str[1].__r_.__value_.__r.__words[0]);
  *(_DWORD *)(a1 + 56) = v6 | 0x22;
  *(_QWORD *)(a1 + 40) = v8;
  if (v7 - 1 >= 3)
    v9 = 0;
  else
    v9 = v7;
  if (!sub_10006E2D0(v9))
    sub_1003CD2C0();
  v10 = *(_DWORD *)(a1 + 56);
  *(_DWORD *)(a1 + 32) = v9;
  v11 = __str[1].__r_.__value_.__s.__data_[16];
  *(_DWORD *)(a1 + 56) = v10 | 0xC;
  *(_BYTE *)(a1 + 36) = v11;
  v12 = HIDWORD(__str[1].__r_.__value_.__r.__words[1]) - 2;
  if (v12 > 5)
    v13 = 0;
  else
    v13 = dword_100474A18[v12];
  result = sub_1000E3A6C(v13);
  if (!result)
    sub_1003CD298();
  *(_DWORD *)(a1 + 56) |= 0x10u;
  *(_DWORD *)(a1 + 48) = v13;
  return result;
}

uint64_t sub_1002753AC(uint64_t a1, const std::string *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::string *v8;
  uint64_t v9;
  _BYTE v11[48];
  uint64_t v12;
  int v13;
  _BYTE v14[64];
  char v15;

  sub_100274028(*(_QWORD *)(a1 + 120), v14);
  if (!v15)
    return 0;
  sub_10011D258(v11, v14);
  v13 |= 2u;
  v4 = v12;
  if (!v12)
    operator new();
  *(_DWORD *)(v12 + 44) |= 2u;
  v5 = *(_QWORD *)(v4 + 24);
  if (!v5)
    operator new();
  *(_DWORD *)(v5 + 376) |= 0x2000u;
  v6 = *(_QWORD *)(v5 + 112);
  if (!v6)
    operator new();
  *(_DWORD *)(v6 + 148) |= 0x10u;
  v7 = *(_QWORD *)(v6 + 48);
  if (!v7)
    operator new();
  *(_DWORD *)(v7 + 28) |= 1u;
  v8 = *(std::string **)(v7 + 16);
  if (v8 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
    operator new();
  std::string::operator=(v8, a2);
  v9 = sub_10026C02C(a1, (wireless_diagnostics::google::protobuf::MessageLite *)v11);
  sub_10011D2FC(v11);
  if (v15)
    sub_10011D2FC(v14);
  return v9;
}

void sub_10027555C()
{
  operator delete();
}

uint64_t sub_1002755E8(uint64_t a1, uint64_t a2, int a3, std::string **a4, unsigned int a5, double a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  std::string *v17;
  std::string *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  _BYTE v25[48];
  uint64_t v26;
  int v27;
  _BYTE v28[64];
  char v29;

  sub_100274028(*(_QWORD *)(a1 + 120), v28);
  if (!v29)
    return 0;
  sub_10011D258(v25, v28);
  v27 |= 2u;
  v12 = v26;
  if (!v26)
    operator new();
  *(_DWORD *)(v26 + 44) |= 2u;
  v13 = *(_QWORD *)(v12 + 24);
  if (!v13)
    operator new();
  *(_DWORD *)(v13 + 376) |= 0x2000u;
  v14 = *(_QWORD *)(v13 + 112);
  if (!v14)
    operator new();
  *(_DWORD *)(v14 + 148) |= 0x1000u;
  v15 = *(_QWORD *)(v14 + 112);
  if (!v15)
    operator new();
  v16 = *(_DWORD *)(v15 + 72);
  *(double *)(v15 + 16) = a6;
  *(_DWORD *)(v15 + 72) = v16 | 7;
  *(_QWORD *)(v15 + 24) = a2;
  *(_QWORD *)(v15 + 32) = a3;
  v17 = *a4;
  v18 = a4[1];
  if (*a4 != v18)
  {
    do
    {
      v19 = *(_DWORD *)(v15 + 52);
      v20 = *(int *)(v15 + 48);
      if ((int)v20 >= v19)
      {
        if (v19 == *(_DWORD *)(v15 + 56))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(v15 + 40), v19 + 1);
          v19 = *(_DWORD *)(v15 + 52);
        }
        *(_DWORD *)(v15 + 52) = v19 + 1;
        sub_10011BF90();
      }
      v21 = *(_QWORD *)(v15 + 40);
      *(_DWORD *)(v15 + 48) = v20 + 1;
      sub_100275290(*(_QWORD *)(v21 + 8 * v20), v17);
      v17 += 2;
    }
    while (v17 != v18);
  }
  if (a5 >= 4)
    v22 = 0;
  else
    v22 = dword_100474A30[a5];
  if (!sub_10006E2D0(v22))
    __assert_rtn("set_intent_predictor_type", "NearbyInteractionTypes.pb.h", 14259, "::CLP::LogEntry::Nearbyd::NI::IntentPredictorType_IsValid(value)");
  *(_DWORD *)(v15 + 72) |= 0x10u;
  *(_DWORD *)(v15 + 64) = v22;
  v23 = sub_10026C02C(a1, (wireless_diagnostics::google::protobuf::MessageLite *)v25);
  sub_10011D2FC(v25);
  if (v29)
    sub_10011D2FC(v28);
  return v23;
}

void sub_10027586C()
{
  operator delete();
}

uint64_t sub_100275900(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE v10[48];
  uint64_t v11;
  int v12;
  _BYTE v13[64];
  char v14;

  sub_100274028(*(_QWORD *)(a1 + 120), v13);
  if (!v14)
    return 0;
  sub_10011D258(v10, v13);
  v12 |= 2u;
  v4 = v11;
  if (!v11)
    operator new();
  *(_DWORD *)(v11 + 44) |= 2u;
  v5 = *(_QWORD *)(v4 + 24);
  if (!v5)
    operator new();
  *(_DWORD *)(v5 + 376) |= 0x2000u;
  v6 = *(_QWORD *)(v5 + 112);
  if (!v6)
    operator new();
  *(_DWORD *)(v6 + 148) |= 0x2000u;
  v7 = *(_QWORD *)(v6 + 120);
  if (!v7)
    operator new();
  *(_DWORD *)(v7 + 28) |= 1u;
  *(_QWORD *)(v7 + 16) = a2;
  v8 = sub_10026C02C(a1, (wireless_diagnostics::google::protobuf::MessageLite *)v10);
  sub_10011D2FC(v10);
  if (v14)
    sub_10011D2FC(v13);
  return v8;
}

void sub_100275A74()
{
  operator delete();
}

uint64_t sub_100275B00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, double a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  _BYTE v21[48];
  uint64_t v22;
  int v23;
  _BYTE v24[64];
  char v25;

  sub_100274028(*(_QWORD *)(a1 + 120), v24);
  if (!v25)
    return 0;
  sub_10011D258(v21, v24);
  v23 |= 2u;
  v12 = v22;
  if (!v22)
    operator new();
  *(_DWORD *)(v22 + 44) |= 2u;
  v13 = *(_QWORD *)(v12 + 24);
  if (!v13)
    operator new();
  *(_DWORD *)(v13 + 376) |= 0x2000u;
  v14 = *(_QWORD *)(v13 + 112);
  if (!v14)
    operator new();
  *(_DWORD *)(v14 + 148) |= 0x200u;
  v15 = *(_QWORD *)(v14 + 88);
  if (!v15)
    operator new();
  v16 = *(_DWORD *)(v15 + 56);
  *(double *)(v15 + 16) = a6;
  *(_DWORD *)(v15 + 56) = v16 | 9;
  v17 = *(_QWORD *)(v15 + 40);
  if (!v17)
    operator new();
  sub_1002740A4(v17, a4);
  v18 = *(_DWORD *)(v15 + 56);
  *(_QWORD *)(v15 + 24) = a2;
  *(_QWORD *)(v15 + 32) = a3;
  *(_DWORD *)(v15 + 56) = v18 | 0x16;
  *(_BYTE *)(v15 + 48) = a5;
  v19 = sub_10026C02C(a1, (wireless_diagnostics::google::protobuf::MessageLite *)v21);
  sub_10011D2FC(v21);
  if (v25)
    sub_10011D2FC(v24);
  return v19;
}

void sub_100275CF0()
{
  operator delete();
}

uint64_t sub_100275D94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE v18[48];
  uint64_t v19;
  int v20;
  _BYTE v21[64];
  char v22;

  sub_100274028(*(_QWORD *)(a1 + 120), v21);
  if (!v22)
    return 0;
  sub_10011D258(v18, v21);
  v20 |= 2u;
  v10 = v19;
  if (!v19)
    operator new();
  *(_DWORD *)(v19 + 44) |= 2u;
  v11 = *(_QWORD *)(v10 + 24);
  if (!v11)
    operator new();
  *(_DWORD *)(v11 + 376) |= 0x2000u;
  v12 = *(_QWORD *)(v11 + 112);
  if (!v12)
    operator new();
  *(_DWORD *)(v12 + 148) |= 0x80u;
  v13 = *(_QWORD *)(v12 + 72);
  if (!v13)
    operator new();
  v14 = *(_DWORD *)(v13 + 52);
  *(double *)(v13 + 16) = a5;
  *(_DWORD *)(v13 + 52) = v14 | 9;
  v15 = *(_QWORD *)(v13 + 40);
  if (!v15)
    operator new();
  sub_1002740A4(v15, a4);
  *(_DWORD *)(v13 + 52) |= 6u;
  *(_QWORD *)(v13 + 24) = a2;
  *(_QWORD *)(v13 + 32) = a3;
  v16 = sub_10026C02C(a1, (wireless_diagnostics::google::protobuf::MessageLite *)v18);
  sub_10011D2FC(v18);
  if (v22)
    sub_10011D2FC(v21);
  return v16;
}

void sub_100275F78()
{
  operator delete();
}

uint64_t sub_10027601C(uint64_t a1, const std::string *a2, uint64_t a3, double a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::string *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v17[48];
  uint64_t v18;
  int v19;
  _BYTE v20[64];
  char v21;

  sub_100274028(*(_QWORD *)(a1 + 120), v20);
  if (!v21)
    return 0;
  sub_10011D258(v17, v20);
  v19 |= 2u;
  v8 = v18;
  if (!v18)
    operator new();
  *(_DWORD *)(v18 + 44) |= 2u;
  v9 = *(_QWORD *)(v8 + 24);
  if (!v9)
    operator new();
  *(_DWORD *)(v9 + 376) |= 0x2000u;
  v10 = *(_QWORD *)(v9 + 112);
  if (!v10)
    operator new();
  *(_DWORD *)(v10 + 148) |= 0x8000u;
  v11 = *(_QWORD *)(v10 + 136);
  if (!v11)
    operator new();
  *(_DWORD *)(v11 + 44) |= 1u;
  v12 = *(std::string **)(v11 + 16);
  if (v12 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
    operator new();
  std::string::operator=(v12, a2);
  v13 = *(_DWORD *)(v11 + 44);
  *(double *)(v11 + 24) = a4;
  *(_DWORD *)(v11 + 44) = v13 | 6;
  v14 = *(_QWORD *)(v11 + 32);
  if (!v14)
    operator new();
  sub_1002740A4(v14, a3);
  v15 = sub_10026C02C(a1, (wireless_diagnostics::google::protobuf::MessageLite *)v17);
  sub_10011D2FC(v17);
  if (v21)
    sub_10011D2FC(v20);
  return v15;
}

void sub_10027622C()
{
  operator delete();
}

uint64_t sub_1002762D0(uint64_t a1, const std::string *a2, uint64_t a3, std::string *a4, std::string *a5, uint64_t a6, char a7, double a8)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  std::string *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  _BYTE v28[48];
  uint64_t v29;
  int v30;
  _BYTE v31[64];
  char v32;

  sub_100274028(*(_QWORD *)(a1 + 120), v31);
  if (!v32)
    return 0;
  sub_10011D258(v28, v31);
  v30 |= 2u;
  v16 = v29;
  if (!v29)
    operator new();
  *(_DWORD *)(v29 + 44) |= 2u;
  v17 = *(_QWORD *)(v16 + 24);
  if (!v17)
    operator new();
  *(_DWORD *)(v17 + 376) |= 0x2000u;
  v18 = *(_QWORD *)(v17 + 112);
  if (!v18)
    operator new();
  *(_DWORD *)(v18 + 148) |= 4u;
  v19 = *(_QWORD *)(v18 + 32);
  if (!v19)
    operator new();
  if (a2[1].__r_.__value_.__s.__data_[0])
  {
    *(_DWORD *)(v19 + 68) |= 0x40u;
    v20 = *(std::string **)(v19 + 56);
    if (v20 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
      operator new();
    std::string::operator=(v20, a2);
  }
  v21 = *(_DWORD *)(v19 + 68);
  *(double *)(v19 + 16) = a8;
  *(_DWORD *)(v19 + 68) = v21 | 3;
  v22 = *(_QWORD *)(v19 + 24);
  if (!v22)
    operator new();
  sub_1002740A4(v22, a3);
  if (a4[2].__r_.__value_.__s.__data_[0])
  {
    *(_DWORD *)(v19 + 68) |= 4u;
    v23 = *(_QWORD *)(v19 + 32);
    if (!v23)
      operator new();
    sub_100275290(v23, a4);
  }
  if (a5[2].__r_.__value_.__s.__data_[0])
  {
    *(_DWORD *)(v19 + 68) |= 8u;
    v24 = *(_QWORD *)(v19 + 40);
    if (!v24)
      operator new();
    sub_100275290(v24, a5);
  }
  v25 = *(_DWORD *)(v19 + 68);
  if ((a6 & 0xFF00000000) != 0)
  {
    v25 |= 0x10u;
    *(_DWORD *)(v19 + 68) = v25;
    *(_DWORD *)(v19 + 48) = a6;
  }
  *(_DWORD *)(v19 + 68) = v25 | 0x20;
  *(_BYTE *)(v19 + 52) = a7;
  v26 = sub_10026C02C(a1, (wireless_diagnostics::google::protobuf::MessageLite *)v28);
  sub_10011D2FC(v28);
  if (v32)
    sub_10011D2FC(v31);
  return v26;
}

void sub_1002765E4()
{
  operator delete();
}

uint64_t sub_1002766B0(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v14[48];
  uint64_t v15;
  int v16;
  _BYTE v17[64];
  char v18;

  sub_100274028(*(_QWORD *)(a1 + 120), v17);
  if (!v18)
    return 0;
  sub_10011D258(v14, v17);
  v16 |= 2u;
  v6 = v15;
  if (!v15)
    operator new();
  *(_DWORD *)(v15 + 44) |= 2u;
  v7 = *(_QWORD *)(v6 + 24);
  if (!v7)
    operator new();
  *(_DWORD *)(v7 + 376) |= 0x2000u;
  v8 = *(_QWORD *)(v7 + 112);
  if (!v8)
    operator new();
  *(_DWORD *)(v8 + 148) |= 8u;
  v9 = *(_QWORD *)(v8 + 40);
  if (!v9)
    operator new();
  v10 = *(_DWORD *)(v9 + 36);
  *(double *)(v9 + 16) = a3;
  *(_DWORD *)(v9 + 36) = v10 | 3;
  v11 = *(_QWORD *)(v9 + 24);
  if (!v11)
    operator new();
  sub_1002740A4(v11, a2);
  v12 = sub_10026C02C(a1, (wireless_diagnostics::google::protobuf::MessageLite *)v14);
  sub_10011D2FC(v14);
  if (v18)
    sub_10011D2FC(v17);
  return v12;
}

void sub_100276870()
{
  operator delete();
}

uint64_t sub_100276914(uint64_t a1, uint64_t a2, const std::string *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  std::string *v11;
  uint64_t v12;
  _BYTE v14[48];
  uint64_t v15;
  int v16;
  _BYTE v17[64];
  char v18;

  sub_100274028(*(_QWORD *)(a1 + 120), v17);
  if (!v18)
    return 0;
  sub_10011D258(v14, v17);
  v16 |= 2u;
  v6 = v15;
  if (!v15)
    operator new();
  *(_DWORD *)(v15 + 44) |= 2u;
  v7 = *(_QWORD *)(v6 + 24);
  if (!v7)
    operator new();
  *(_DWORD *)(v7 + 376) |= 0x2000u;
  v8 = *(_QWORD *)(v7 + 112);
  if (!v8)
    operator new();
  *(_DWORD *)(v8 + 148) |= 0x20u;
  v9 = *(_QWORD *)(v8 + 56);
  if (!v9)
    operator new();
  v10 = *(_DWORD *)(v9 + 36);
  *(_QWORD *)(v9 + 24) = a2;
  *(_DWORD *)(v9 + 36) = v10 | 3;
  v11 = *(std::string **)(v9 + 16);
  if (v11 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
    operator new();
  std::string::operator=(v11, a3);
  v12 = sub_10026C02C(a1, (wireless_diagnostics::google::protobuf::MessageLite *)v14);
  sub_10011D2FC(v14);
  if (v18)
    sub_10011D2FC(v17);
  return v12;
}

void sub_100276AD4()
{
  operator delete();
}

uint64_t sub_100276B60(uint64_t a1, uint64_t a2, const std::string *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  std::string *v11;
  uint64_t v12;
  _BYTE v14[48];
  uint64_t v15;
  int v16;
  _BYTE v17[64];
  char v18;

  sub_100274028(*(_QWORD *)(a1 + 120), v17);
  if (!v18)
    return 0;
  sub_10011D258(v14, v17);
  v16 |= 2u;
  v6 = v15;
  if (!v15)
    operator new();
  *(_DWORD *)(v15 + 44) |= 2u;
  v7 = *(_QWORD *)(v6 + 24);
  if (!v7)
    operator new();
  *(_DWORD *)(v7 + 376) |= 0x2000u;
  v8 = *(_QWORD *)(v7 + 112);
  if (!v8)
    operator new();
  *(_DWORD *)(v8 + 148) |= 0x40u;
  v9 = *(_QWORD *)(v8 + 64);
  if (!v9)
    operator new();
  v10 = *(_DWORD *)(v9 + 36);
  *(_QWORD *)(v9 + 24) = a2;
  *(_DWORD *)(v9 + 36) = v10 | 3;
  v11 = *(std::string **)(v9 + 16);
  if (v11 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
    operator new();
  std::string::operator=(v11, a3);
  v12 = sub_10026C02C(a1, (wireless_diagnostics::google::protobuf::MessageLite *)v14);
  sub_10011D2FC(v14);
  if (v18)
    sub_10011D2FC(v17);
  return v12;
}

void sub_100276D20()
{
  operator delete();
}

uint64_t sub_100276DAC(uint64_t a1, const std::string *a2, int a3, double a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  std::string *v13;
  uint64_t v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE v21[48];
  uint64_t v22;
  int v23;
  _BYTE v24[64];
  char v25;
  uint8_t buf[4];
  const std::string *v27;
  __int16 v28;
  uint64_t v29;

  sub_100274028(*(_QWORD *)(a1 + 120), v24);
  if (!v25)
    return 0;
  sub_10011D258(v21, v24);
  v23 |= 2u;
  v8 = v22;
  if (!v22)
    operator new();
  *(_DWORD *)(v22 + 44) |= 2u;
  v9 = *(_QWORD *)(v8 + 24);
  if (!v9)
    operator new();
  *(_DWORD *)(v9 + 376) |= 0x2000u;
  v10 = *(_QWORD *)(v9 + 112);
  if (!v10)
    operator new();
  *(_DWORD *)(v10 + 148) |= 0x100u;
  v11 = *(_QWORD *)(v10 + 80);
  if (!v11)
    operator new();
  v12 = *(_DWORD *)(v11 + 40);
  *(double *)(v11 + 16) = a4;
  *(_DWORD *)(v11 + 40) = v12 | 5;
  v13 = *(std::string **)(v11 + 24);
  if (v13 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
    operator new();
  std::string::operator=(v13, a2);
  if (a3 == 1)
    v14 = 1;
  else
    v14 = 2 * (a3 == 2);
  if (!sub_10006E2C4(v14))
    __assert_rtn("set_source", "NearbyInteractionTypes.pb.h", 11458, "::CLP::LogEntry::Nearbyd::NI::TruthTag_Source_IsValid(value)");
  *(_DWORD *)(v11 + 40) |= 2u;
  *(_DWORD *)(v11 + 32) = v14;
  v15 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      a2 = (const std::string *)a2->__r_.__value_.__r.__words[0];
    v16 = sub_1000EE4FC();
    v17 = wireless_diagnostics::google::protobuf::internal::NameOfEnum(v16, v14);
    if (*(char *)(v17 + 23) >= 0)
      v18 = v17;
    else
      v18 = *(_QWORD *)v17;
    *(_DWORD *)buf = 136315394;
    v27 = a2;
    v28 = 2080;
    v29 = v18;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "pblogger, Log truth tagging label: [%s], source: [%s]", buf, 0x16u);
  }
  v19 = sub_10026C02C(a1, (wireless_diagnostics::google::protobuf::MessageLite *)v21);
  sub_10011D2FC(v21);
  if (v25)
    sub_10011D2FC(v24);
  return v19;
}

void sub_100277090()
{
  operator delete();
}

BOOL sub_10027712C(uint64_t a1)
{
  _QWORD *v1;

  v1 = *(_QWORD **)(a1 + 72);
  return v1 && (sub_1000C93B4(v1) & 1) != 0;
}

uint64_t sub_100277158(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  const void *v12;
  uint64_t v13;
  __int128 v14;
  const void *v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  int *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  _DWORD *v32;
  int v33;
  int v34;
  int v35;
  int v36;
  _OWORD *v37;
  uint64_t v38;
  __int128 v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  _DWORD *v43;
  int v44;
  int v45;
  _DWORD *v46;
  int v47;
  int v48;
  int v49;
  int v50;
  _OWORD *v51;
  uint64_t v52;
  __int128 v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  _DWORD *v57;
  int v58;
  int v59;
  uint64_t v60;
  _OWORD v62[2];
  _OWORD v63[2];
  _OWORD v64[6];
  uint64_t v65;
  std::string __str;
  _BYTE v67[48];
  uint64_t v68;
  int v69;
  _BYTE v70[64];
  char v71;
  char __s[8];
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  uint64_t v77;
  void *v78;
  void *v79;
  uint64_t v80;
  __int128 v81;
  __int128 v82;
  uint64_t v83;
  void *__p;
  void *v85;
  uint64_t v86;
  _BYTE v87[385];

  if (!*(_BYTE *)(a2 + 24))
    return 0;
  sub_100274028(*(_QWORD *)(a1 + 120), v70);
  if (!v71)
    return 0;
  sub_10011D258(v67, v70);
  v69 |= 2u;
  v4 = v68;
  if (!v68)
    operator new();
  *(_DWORD *)(v68 + 44) |= 2u;
  v5 = *(_QWORD *)(v4 + 24);
  if (!v5)
    operator new();
  *(_DWORD *)(v5 + 376) |= 0x2000u;
  v6 = *(_QWORD *)(v5 + 112);
  if (!v6)
    operator new();
  *(_DWORD *)(v6 + 148) |= 0x4000u;
  v7 = *(_QWORD *)(v6 + 128);
  if (!v7)
    operator new();
  if (!*(_BYTE *)(a2 + 24))
    sub_10000BA44();
  v8 = *(_DWORD *)(v7 + 72);
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(v7 + 24) = *(unsigned __int16 *)(a2 + 36);
  v9 = *(_QWORD *)(a2 + 40);
  *(_DWORD *)(v7 + 72) = v8 | 7;
  *(_QWORD *)(v7 + 32) = v9;
  if (*(_BYTE *)(a2 + 600))
  {
    v10 = *(_OWORD *)(a2 + 96);
    v75 = *(_OWORD *)(a2 + 80);
    v76 = v10;
    v11 = *(_OWORD *)(a2 + 64);
    v73 = *(_OWORD *)(a2 + 48);
    v74 = v11;
    v12 = *(const void **)(a2 + 120);
    v77 = *(_QWORD *)(a2 + 112);
    v78 = 0;
    v13 = *(_QWORD *)(a2 + 128);
    v79 = 0;
    v80 = 0;
    sub_1001375D8(&v78, v12, v13, (v13 - (uint64_t)v12) >> 3);
    v14 = *(_OWORD *)(a2 + 160);
    v81 = *(_OWORD *)(a2 + 144);
    v82 = v14;
    v15 = *(const void **)(a2 + 184);
    v83 = *(_QWORD *)(a2 + 176);
    __p = 0;
    v85 = 0;
    v86 = 0;
    sub_100137690(&__p, v15, *(_QWORD *)(a2 + 192), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a2 + 192) - (_QWORD)v15) >> 3));
    memcpy(v87, (const void *)(a2 + 208), sizeof(v87));
    if (*(unsigned __int16 *)&v87[222] < 0x100u)
      goto LABEL_40;
    v16 = *(_DWORD *)(v7 + 72);
    *(_DWORD *)(v7 + 64) = v87[222];
    *(_DWORD *)(v7 + 72) = v16 | 0x18;
    v17 = *(_QWORD *)(v7 + 40);
    if (!v17)
      operator new();
    v18 = *(_DWORD *)(v17 + 468);
    *(_OWORD *)(v17 + 64) = *(_OWORD *)v87;
    v19 = v83;
    *(_DWORD *)(v17 + 468) = v18 | 0x10600;
    *(_QWORD *)(v17 + 96) = v19;
    v20 = *(_DWORD *)(v17 + 472);
    *(_DWORD *)(v17 + 340) = *(unsigned __int16 *)&v87[216];
    *(_DWORD *)(v17 + 344) = *(unsigned __int16 *)&v87[218];
    v21 = *(unsigned __int16 *)&v87[220];
    *(_DWORD *)(v17 + 472) = v20 | 0xE0000;
    *(_DWORD *)(v17 + 348) = v21;
    if (!v87[232])
      goto LABEL_40;
    if (v87[248] && v87[264] && v87[280])
    {
      v22 = *(_QWORD *)&v87[224];
      *(_DWORD *)(v17 + 472) = v20 | 0x2E0000;
      *(_QWORD *)(v17 + 352) = v22;
      if (!v87[248])
        sub_10000BA44();
      v23 = *(_QWORD *)&v87[240];
      *(_DWORD *)(v17 + 472) = v20 | 0x6E0000;
      *(_QWORD *)(v17 + 360) = v23;
      if (!v87[264])
        sub_10000BA44();
      v24 = *(_QWORD *)&v87[256];
      *(_DWORD *)(v17 + 472) = v20 | 0xEE0000;
      *(_QWORD *)(v17 + 368) = v24;
      if (!v87[280])
        sub_10000BA44();
      *(_DWORD *)(v17 + 472) = v20 | 0x1EE0000;
      v25 = v77;
      *(_QWORD *)(v17 + 384) = *(_QWORD *)&v87[272];
      *(_QWORD *)__s = v25;
      sub_10000BF04(&__str, __s);
      sub_10026E230(v17, &__str);
      v26 = (int *)sub_100277918(v7);
      if (*(_BYTE *)(a2 + 1288))
      {
        v27 = v26;
        v28 = *(_OWORD *)(a2 + 1184);
        v65 = *(_QWORD *)(a2 + 1280);
        v29 = *(_OWORD *)(a2 + 1264);
        v64[4] = *(_OWORD *)(a2 + 1248);
        v64[5] = v29;
        v30 = *(_OWORD *)(a2 + 1232);
        v64[2] = *(_OWORD *)(a2 + 1216);
        v64[3] = v30;
        v31 = *(_OWORD *)(a2 + 1200);
        v64[0] = v28;
        v64[1] = v31;
        v26[19] |= 8u;
        v26[10] = BYTE11(v28);
        v32 = (_DWORD *)sub_10026F8BC(v26);
        v33 = sub_10015BEDC((uint64_t)v64, 0);
        v32[15] |= 1u;
        v32[4] = v33;
        v34 = sub_10015BF04((uint64_t)v64, 0);
        v32[15] |= 2u;
        v32[5] = v34;
        v35 = sub_10015BF2C((uint64_t)v64, 0);
        v32[15] |= 4u;
        v32[6] = v35;
        v36 = sub_10015BF54((uint64_t)v64, 0);
        v32[15] |= 8u;
        v32[7] = v36;
        v37 = (_OWORD *)sub_10015BF7C((uint64_t)v64, 0);
        v38 = 0;
        v39 = v37[1];
        v63[0] = *v37;
        v63[1] = v39;
        do
        {
          v40 = v32[11];
          v41 = (int)v32[10];
          if ((int)v41 >= v40)
          {
            if (v40 == v32[12])
            {
              wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(v32 + 8), v40 + 1);
              v40 = v32[11];
            }
            v32[11] = v40 + 1;
            sub_1000B9014();
          }
          v42 = *((_QWORD *)v32 + 4);
          v32[10] = v41 + 1;
          v43 = *(_DWORD **)(v42 + 8 * v41);
          v44 = *(__int16 *)((char *)v63 + v38);
          v45 = *(__int16 *)((char *)v63 + v38 + 2);
          v43[7] |= 3u;
          v43[4] = v44;
          v43[5] = v45;
          v38 += 4;
        }
        while (v38 != 32);
        v46 = (_DWORD *)sub_10026F8BC(v27);
        v47 = sub_10015BEDC((uint64_t)v64, 1);
        v46[15] |= 1u;
        v46[4] = v47;
        v48 = sub_10015BF04((uint64_t)v64, 1);
        v46[15] |= 2u;
        v46[5] = v48;
        v49 = sub_10015BF2C((uint64_t)v64, 1);
        v46[15] |= 4u;
        v46[6] = v49;
        v50 = sub_10015BF54((uint64_t)v64, 1);
        v46[15] |= 8u;
        v46[7] = v50;
        v51 = (_OWORD *)sub_10015BF7C((uint64_t)v64, 1);
        v52 = 0;
        v53 = v51[1];
        v62[0] = *v51;
        v62[1] = v53;
        do
        {
          v54 = v46[11];
          v55 = (int)v46[10];
          if ((int)v55 >= v54)
          {
            if (v54 == v46[12])
            {
              wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(v46 + 8), v54 + 1);
              v54 = v46[11];
            }
            v46[11] = v54 + 1;
            sub_1000B9014();
          }
          v56 = *((_QWORD *)v46 + 4);
          v46[10] = v55 + 1;
          v57 = *(_DWORD **)(v56 + 8 * v55);
          v58 = *(__int16 *)((char *)v62 + v52);
          v59 = *(__int16 *)((char *)v62 + v52 + 2);
          v57[7] |= 3u;
          v57[4] = v58;
          v57[5] = v59;
          v52 += 4;
        }
        while (v52 != 32);
        v60 = sub_10026C02C(a1, (wireless_diagnostics::google::protobuf::MessageLite *)v67);
      }
      else
      {
        v60 = 0;
      }
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
    }
    else
    {
LABEL_40:
      v60 = 0;
    }
    if (__p)
    {
      v85 = __p;
      operator delete(__p);
    }
    if (v78)
    {
      v79 = v78;
      operator delete(v78);
    }
  }
  else
  {
    v60 = 0;
  }
  sub_10011D2FC(v67);
  if (v71)
    sub_10011D2FC(v70);
  return v60;
}

void sub_1002777F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52,uint64_t a53,uint64_t a54)
{
  if (a35 < 0)
    operator delete(__p);
  sub_100137328(&a54);
  sub_10011D2FC(&a36);
  if (a52)
    sub_10011D2FC(&a44);
  _Unwind_Resume(a1);
}

uint64_t sub_100277918(uint64_t a1)
{
  *(_DWORD *)(a1 + 72) |= 0x20u;
  if (!*(_QWORD *)(a1 + 48))
    operator new();
  return *(_QWORD *)(a1 + 48);
}

void sub_100277970()
{
  operator delete();
}

uint64_t sub_100277994(uint64_t a1, int a2, double a3, double a4, double a5, uint64_t a6, uint64_t a7, uint64_t *a8, uint64_t a9, uint64_t a10)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  int v31;
  _BYTE v33[48];
  uint64_t v34;
  int v35;
  _BYTE v36[64];
  char v37;

  sub_100274028(*(_QWORD *)(a1 + 120), v36);
  if (!v37)
    return 0;
  sub_10011D258(v33, v36);
  v35 |= 2u;
  v18 = v34;
  if (!v34)
    operator new();
  *(_DWORD *)(v34 + 44) |= 2u;
  v19 = *(_QWORD *)(v18 + 24);
  if (!v19)
    operator new();
  *(_DWORD *)(v19 + 376) |= 0x2000u;
  v20 = *(_QWORD *)(v19 + 112);
  if (!v20)
    operator new();
  *(_DWORD *)(v20 + 148) |= 0x800u;
  v21 = *(_QWORD *)(v20 + 104);
  if (!v21)
    operator new();
  *(_DWORD *)(v21 + 96) |= 1u;
  *(_DWORD *)(v21 + 88) = a2;
  v23 = *a8;
  v22 = a8[1];
  v24 = v22 - *a8;
  if (v24 == 88)
  {
    if (v22 != v23)
    {
      v25 = 0;
      v26 = *(_DWORD *)(v21 + 40);
      do
      {
        v27 = *(_QWORD *)(v23 + 8 * v25);
        if (v26 == *(_DWORD *)(v21 + 44))
        {
          sub_10006BB4C(v21 + 32, v26 + 1);
          v26 = *(_DWORD *)(v21 + 40);
          v23 = *a8;
          v22 = a8[1];
        }
        v28 = *(_QWORD *)(v21 + 32);
        *(_DWORD *)(v21 + 40) = v26 + 1;
        *(_QWORD *)(v28 + 8 * v26) = v27;
        ++v25;
        ++v26;
      }
      while (v25 < (v22 - v23) >> 3);
    }
  }
  else
  {
    v30 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
      sub_1003E3990(v24 >> 3, v30);
  }
  v31 = *(_DWORD *)(v21 + 96);
  *(double *)(v21 + 48) = a3;
  *(double *)(v21 + 56) = a4;
  *(double *)(v21 + 64) = a5;
  *(_DWORD *)(v21 + 96) = v31 | 0x1F0;
  *(_QWORD *)(v21 + 72) = a9;
  *(_QWORD *)(v21 + 80) = a10;
  v29 = sub_10026C02C(a1, (wireless_diagnostics::google::protobuf::MessageLite *)v33);
  sub_10011D2FC(v33);
  if (v37)
    sub_10011D2FC(v36);
  return v29;
}

void sub_100277BFC()
{
  operator delete();
}

uint64_t sub_100277C8C(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t i;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE v19[48];
  uint64_t v20;
  int v21;
  _BYTE v22[64];
  char v23;

  sub_100274028(*(_QWORD *)(a1 + 120), v22);
  if (!v23)
    return 0;
  sub_10011D258(v19, v22);
  v21 |= 2u;
  v8 = v20;
  if (!v20)
    operator new();
  *(_DWORD *)(v20 + 44) |= 2u;
  v9 = *(_QWORD *)(v8 + 24);
  if (!v9)
    operator new();
  *(_DWORD *)(v9 + 376) |= 0x2000u;
  v10 = *(_QWORD *)(v9 + 112);
  if (!v10)
    operator new();
  *(_DWORD *)(v10 + 148) |= 0x400u;
  v11 = *(_QWORD *)(v10 + 96);
  if (!v11)
    operator new();
  v12 = *(_DWORD *)(v11 + 44);
  *(_DWORD *)(v11 + 44) = v12 | 1;
  *(_BYTE *)(v11 + 16) = a2;
  if ((a3 & 0xFF00000000) != 0)
  {
    *(_DWORD *)(v11 + 44) = v12 | 3;
    *(_DWORD *)(v11 + 20) = a3;
  }
  if (*(_BYTE *)(a4 + 24))
  {
    if (*(_QWORD *)(a4 + 8) - *(_QWORD *)a4 != 88)
      __assert_rtn("logRangeBiasEstimatorConfig", "PRProtobufLogger.cpp", 2454, "kDimOutputSingleAntennaRangeBiasModel == biasCorrectionValuesSingleAntenna.value().size()");
    for (i = 0; i != 88; i += 8)
    {
      if (!*(_BYTE *)(a4 + 24))
        sub_10000BA44();
      v14 = *(_QWORD *)(*(_QWORD *)a4 + i);
      v15 = *(_DWORD *)(v11 + 32);
      if (v15 == *(_DWORD *)(v11 + 36))
      {
        sub_10006BB4C(v11 + 24, v15 + 1);
        v15 = *(_DWORD *)(v11 + 32);
      }
      v16 = *(_QWORD *)(v11 + 24);
      *(_DWORD *)(v11 + 32) = v15 + 1;
      *(_QWORD *)(v16 + 8 * v15) = v14;
    }
  }
  v17 = sub_10026C02C(a1, (wireless_diagnostics::google::protobuf::MessageLite *)v19);
  sub_10011D2FC(v19);
  if (v23)
    sub_10011D2FC(v22);
  return v17;
}

void sub_100277EC8()
{
  operator delete();
}

uint64_t sub_100277F5C()
{
  return 0;
}

uint64_t sub_100277F64()
{
  return 0;
}

uint64_t sub_100277F6C()
{
  return 0;
}

uint64_t sub_100277F74()
{
  return 0;
}

uint64_t sub_100277F7C()
{
  return 0;
}

uint64_t sub_100277F84()
{
  return 0;
}

uint64_t sub_100277F8C()
{
  return 0;
}

uint64_t sub_100277F94()
{
  return 0;
}

uint64_t sub_100277F9C()
{
  return 0;
}

uint64_t sub_100277FA4()
{
  return 0;
}

uint64_t sub_100277FAC()
{
  return 0;
}

uint64_t sub_100277FB4()
{
  return 0;
}

uint64_t sub_100277FBC(uint64_t a1, const std::string *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  std::string *v10;
  int *v11;
  uint64_t i;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  float v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE v28[48];
  uint64_t v29;
  int v30;
  _BYTE v31[64];
  char v32;

  sub_100274028(*(_QWORD *)(a1 + 120), v31);
  if (!v32)
    return 0;
  sub_10011D258(v28, v31);
  v30 |= 2u;
  v6 = v29;
  if (!v29)
    operator new();
  *(_DWORD *)(v29 + 44) |= 2u;
  v7 = *(_QWORD *)(v6 + 24);
  if (!v7)
    operator new();
  *(_DWORD *)(v7 + 376) |= 0x8000u;
  v8 = *(_QWORD *)(v7 + 128);
  if (!v8)
    operator new();
  v9 = *(_DWORD *)(v8 + 60);
  *(_QWORD *)(v8 + 16) = *(_QWORD *)a3;
  *(_DWORD *)(v8 + 60) = v9 | 3;
  v10 = *(std::string **)(v8 + 24);
  if (v10 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
    operator new();
  std::string::operator=(v10, a2);
  *(_DWORD *)(v8 + 60) |= 4u;
  v11 = *(int **)(v8 + 32);
  if (!v11)
    operator new();
  for (i = 0; i != 4; ++i)
  {
    v13 = v11[7];
    v14 = v11[6];
    if ((int)v14 >= v13)
    {
      if (v13 == v11[8])
      {
        wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(v11 + 4), v13 + 1);
        v13 = v11[7];
      }
      v11[7] = v13 + 1;
      sub_10006BC44();
    }
    v15 = *((_QWORD *)v11 + 2);
    v11[6] = v14 + 1;
    v16 = *(_QWORD *)(v15 + 8 * v14);
    v17 = 0;
    v18 = *(_DWORD *)(v16 + 24);
    do
    {
      v19 = *(float *)(a3 + 16 + 16 * i + 4 * (v17 & 3));
      if (v18 == *(_DWORD *)(v16 + 28))
      {
        sub_10006BB4C(v16 + 16, v18 + 1);
        v18 = *(_DWORD *)(v16 + 24);
      }
      v20 = *(_QWORD *)(v16 + 16);
      *(_DWORD *)(v16 + 24) = v18 + 1;
      *(double *)(v20 + 8 * v18) = v19;
      ++v17;
      ++v18;
    }
    while (v17 != 4);
  }
  v21 = *(_DWORD *)(a3 + 80);
  if (v21 < 3)
    v22 = v21 + 1;
  else
    v22 = 0;
  if (!sub_10006E2D0(v22))
    __assert_rtn("set_vio_tracking_state", "NearbyInteractionTypes.pb.h", 16407, "::CLP::LogEntry::Nearbyd::NI::VIOTrackingState_IsValid(value)");
  v23 = *(_DWORD *)(v8 + 60);
  v24 = v23 | 8;
  *(_DWORD *)(v8 + 60) = v23 | 8;
  *(_DWORD *)(v8 + 48) = v22;
  if (*(_BYTE *)(a3 + 96))
  {
    v25 = *(_QWORD *)(a3 + 88);
    v24 = v23 | 0x18;
    *(_DWORD *)(v8 + 60) = v23 | 0x18;
    *(_QWORD *)(v8 + 40) = v25;
  }
  *(_WORD *)(v8 + 52) = *(_WORD *)(a3 + 84);
  *(_DWORD *)(v8 + 60) = v24 | 0x60;
  v26 = sub_10026C02C(a1, (wireless_diagnostics::google::protobuf::MessageLite *)v28);
  sub_10011D2FC(v28);
  if (v32)
    sub_10011D2FC(v31);
  return v26;
}

void sub_1002782E0()
{
  operator delete();
}

uint64_t sub_10027837C(uint64_t a1, const std::string *a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::string *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE v27[48];
  uint64_t v28;
  int v29;
  _BYTE v30[64];
  char v31;

  sub_100274028(*(_QWORD *)(a1 + 120), v30);
  if (!v31)
    return 0;
  sub_10011D258(v27, v30);
  v29 |= 2u;
  v6 = v28;
  if (!v28)
    operator new();
  *(_DWORD *)(v28 + 44) |= 2u;
  v7 = *(_QWORD *)(v6 + 24);
  if (!v7)
    operator new();
  *(_DWORD *)(v7 + 376) |= 0x20000000u;
  v8 = *(_QWORD *)(v7 + 240);
  if (!v8)
    operator new();
  *(_DWORD *)(v8 + 36) |= 1u;
  v9 = *(std::string **)(v8 + 16);
  if (v9 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
    operator new();
  std::string::operator=(v9, a2);
  *(_DWORD *)(v8 + 36) |= 2u;
  v10 = *(_QWORD *)(v8 + 24);
  if (!v10)
    operator new();
  v11 = *(_DWORD *)(v10 + 76);
  *(_QWORD *)(v10 + 16) = *a3;
  *(_DWORD *)(v10 + 76) = v11 | 9;
  v12 = *(_QWORD *)(v10 + 40);
  if (!v12)
    operator new();
  v13 = *(_DWORD *)(v12 + 44);
  *(_QWORD *)(v12 + 16) = a3[1];
  *(_QWORD *)(v12 + 24) = a3[2];
  v14 = a3[3];
  *(_DWORD *)(v12 + 44) = v13 | 7;
  *(_QWORD *)(v12 + 32) = v14;
  *(_DWORD *)(v10 + 76) |= 4u;
  v15 = *(_QWORD *)(v10 + 32);
  if (!v15)
    operator new();
  v16 = *(_DWORD *)(v15 + 44);
  *(_QWORD *)(v15 + 16) = a3[4];
  *(_QWORD *)(v15 + 24) = a3[5];
  v17 = a3[6];
  *(_DWORD *)(v15 + 44) = v16 | 7;
  *(_QWORD *)(v15 + 32) = v17;
  *(_DWORD *)(v10 + 76) |= 2u;
  v18 = *(_QWORD *)(v10 + 24);
  if (!v18)
    operator new();
  *(_DWORD *)(v18 + 28) |= 1u;
  v19 = *(_QWORD *)(v18 + 16);
  if (!v19)
    operator new();
  v20 = *(_DWORD *)(v19 + 52);
  *(_QWORD *)(v19 + 16) = a3[7];
  *(_QWORD *)(v19 + 24) = a3[8];
  *(_QWORD *)(v19 + 32) = a3[9];
  v21 = a3[10];
  *(_DWORD *)(v19 + 52) = v20 | 0xF;
  *(_QWORD *)(v19 + 40) = v21;
  *(_DWORD *)(v10 + 76) |= 0x20u;
  v22 = *(_QWORD *)(v10 + 56);
  if (!v22)
    operator new();
  v23 = *(_DWORD *)(v22 + 44);
  *(_QWORD *)(v22 + 16) = a3[11];
  *(_QWORD *)(v22 + 24) = a3[12];
  v24 = a3[13];
  *(_DWORD *)(v22 + 44) = v23 | 7;
  *(_QWORD *)(v22 + 32) = v24;
  v25 = sub_10026C02C(a1, (wireless_diagnostics::google::protobuf::MessageLite *)v27);
  sub_10011D2FC(v27);
  if (v31)
    sub_10011D2FC(v30);
  return v25;
}

void sub_1002786F4()
{
  operator delete();
}

uint64_t sub_1002787D8(uint64_t a1, const std::string *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  std::string *v10;
  uint64_t v11;
  _BYTE v13[48];
  uint64_t v14;
  int v15;
  _BYTE v16[64];
  char v17;

  sub_100274028(*(_QWORD *)(a1 + 120), v16);
  if (!v17)
    return 0;
  sub_10011D258(v13, v16);
  v15 |= 2u;
  v6 = v14;
  if (!v14)
    operator new();
  *(_DWORD *)(v14 + 44) |= 2u;
  v7 = *(_QWORD *)(v6 + 24);
  if (!v7)
    operator new();
  *(_DWORD *)(v7 + 376) |= 0x100000u;
  v8 = *(_QWORD *)(v7 + 168);
  if (!v8)
    operator new();
  v9 = *(_DWORD *)(v8 + 52);
  *(_OWORD *)(v8 + 16) = *(_OWORD *)a3;
  *(_QWORD *)(v8 + 32) = *(_QWORD *)(a3 + 16);
  *(_DWORD *)(v8 + 52) = v9 | 0xF;
  v10 = *(std::string **)(v8 + 40);
  if (v10 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
    operator new();
  std::string::operator=(v10, a2);
  v11 = sub_10026C02C(a1, (wireless_diagnostics::google::protobuf::MessageLite *)v13);
  sub_10011D2FC(v13);
  if (v17)
    sub_10011D2FC(v16);
  return v11;
}

void sub_10027896C()
{
  operator delete();
}

uint64_t sub_1002789E4(uint64_t a1, const std::string *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  std::string *v17;
  uint64_t v18;
  _BYTE v20[48];
  uint64_t v21;
  int v22;
  _BYTE v23[64];
  char v24;

  sub_100274028(*(_QWORD *)(a1 + 120), v23);
  if (!v24)
    return 0;
  sub_10011D258(v20, v23);
  v22 |= 2u;
  v6 = v21;
  if (!v21)
    operator new();
  *(_DWORD *)(v21 + 44) |= 2u;
  v7 = *(_QWORD *)(v6 + 24);
  if (!v7)
    operator new();
  *(_DWORD *)(v7 + 380) |= 0x100u;
  v8 = *(_QWORD *)(v7 + 328);
  if (!v8)
    operator new();
  v9 = *a3;
  v10 = a3[1];
  if (*a3 != v10)
  {
    do
    {
      v11 = *(_DWORD *)(v8 + 28);
      v12 = *(int *)(v8 + 24);
      if ((int)v12 >= v11)
      {
        if (v11 == *(_DWORD *)(v8 + 32))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(v8 + 16), v11 + 1);
          v11 = *(_DWORD *)(v8 + 28);
        }
        *(_DWORD *)(v8 + 28) = v11 + 1;
        sub_10011C0B0();
      }
      v13 = *(_QWORD *)(v8 + 16);
      *(_DWORD *)(v8 + 24) = v12 + 1;
      v14 = *(_QWORD *)(v13 + 8 * v12);
      v15 = *(_DWORD *)(v14 + 64);
      *(_DWORD *)(v14 + 20) = *(_DWORD *)(v9 + 4);
      *(_OWORD *)(v14 + 24) = *(_OWORD *)(v9 + 8);
      *(_OWORD *)(v14 + 40) = *(_OWORD *)(v9 + 24);
      *(_WORD *)(v14 + 56) = *(_WORD *)(v9 + 40);
      *(_DWORD *)(v14 + 64) = v15 | 0xFE;
      switch(*(_DWORD *)v9)
      {
        case 1:
          if (!sub_1000E3A78(2u))
            goto LABEL_36;
          v16 = 2;
          break;
        case 2:
          if (!sub_1000E3A78(3u))
            goto LABEL_36;
          v16 = 3;
          break;
        case 3:
          if (!sub_1000E3A78(4u))
            goto LABEL_36;
          v16 = 4;
          break;
        case 4:
          if (!sub_1000E3A78(5u))
            goto LABEL_36;
          v16 = 5;
          break;
        case 5:
          if (!sub_1000E3A78(6u))
            goto LABEL_36;
          v16 = 6;
          break;
        case 6:
          if (!sub_1000E3A78(7u))
            goto LABEL_36;
          v16 = 7;
          break;
        default:
          if (!sub_1000E3A78(1u))
LABEL_36:
            __assert_rtn("set_satellite_system", "NearbyInteractionTypes.pb.h", 17936, "::CLP::LogEntry::Nearbyd::NI::SatelliteSystem_IsValid(value)");
          v16 = 1;
          break;
      }
      *(_DWORD *)(v14 + 64) |= 1u;
      *(_DWORD *)(v14 + 16) = v16;
      v9 += 48;
    }
    while (v9 != v10);
  }
  *(_DWORD *)(v8 + 52) |= 2u;
  v17 = *(std::string **)(v8 + 40);
  if (v17 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
    operator new();
  std::string::operator=(v17, a2);
  v18 = sub_10026C02C(a1, (wireless_diagnostics::google::protobuf::MessageLite *)v20);
  sub_10011D2FC(v20);
  if (v24)
    sub_10011D2FC(v23);
  return v18;
}

void sub_100278D00()
{
  operator delete();
}

uint64_t sub_100278D80(uint64_t a1, const std::string *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  std::string *v12;
  uint64_t v13;
  _BYTE v15[48];
  uint64_t v16;
  int v17;
  _BYTE v18[64];
  char v19;

  sub_100274028(*(_QWORD *)(a1 + 120), v18);
  if (!v19)
    return 0;
  sub_10011D258(v15, v18);
  v17 |= 2u;
  v6 = v16;
  if (!v16)
    operator new();
  *(_DWORD *)(v16 + 44) |= 2u;
  v7 = *(_QWORD *)(v6 + 24);
  if (!v7)
    operator new();
  *(_DWORD *)(v7 + 376) |= 0x400000u;
  v8 = *(_QWORD *)(v7 + 184);
  if (!v8)
    operator new();
  v9 = *(_DWORD *)(v8 + 80);
  *(_DWORD *)(v8 + 80) = v9 | 3;
  *(_OWORD *)(v8 + 16) = *(_OWORD *)a3;
  *(_DWORD *)(v8 + 48) = *(_DWORD *)(a3 + 16);
  *(_OWORD *)(v8 + 32) = *(_OWORD *)(a3 + 24);
  v10 = *(_QWORD *)(a3 + 40);
  *(_DWORD *)(v8 + 80) = v9 | 0x3F;
  *(_QWORD *)(v8 + 56) = v10;
  v11 = *(_DWORD *)(a3 + 48);
  *(_DWORD *)(v8 + 80) = v9 | 0x7F;
  *(_DWORD *)(v8 + 52) = v11;
  *(_DWORD *)(v8 + 72) = *(_DWORD *)(a3 + 52);
  *(_DWORD *)(v8 + 80) = v9 | 0x1FF;
  v12 = *(std::string **)(v8 + 64);
  if (v12 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
    operator new();
  std::string::operator=(v12, a2);
  v13 = sub_10026C02C(a1, (wireless_diagnostics::google::protobuf::MessageLite *)v15);
  sub_10011D2FC(v15);
  if (v19)
    sub_10011D2FC(v18);
  return v13;
}

void sub_100278F4C()
{
  operator delete();
}

uint64_t sub_100278FC4(uint64_t a1, const std::string *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  std::string *v10;
  uint64_t v11;
  _BYTE v13[48];
  uint64_t v14;
  int v15;
  _BYTE v16[64];
  char v17;

  sub_100274028(*(_QWORD *)(a1 + 120), v16);
  if (!v17)
    return 0;
  sub_10011D258(v13, v16);
  v15 |= 2u;
  v6 = v14;
  if (!v14)
    operator new();
  *(_DWORD *)(v14 + 44) |= 2u;
  v7 = *(_QWORD *)(v6 + 24);
  if (!v7)
    operator new();
  *(_DWORD *)(v7 + 376) |= 0x200000u;
  v8 = *(_QWORD *)(v7 + 176);
  if (!v8)
    operator new();
  v9 = *(_DWORD *)(v8 + 40);
  *(_QWORD *)(v8 + 16) = *(_QWORD *)a3;
  *(_BYTE *)(v8 + 32) = *(_BYTE *)(a3 + 8);
  *(_DWORD *)(v8 + 40) = v9 | 7;
  v10 = *(std::string **)(v8 + 24);
  if (v10 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
    operator new();
  std::string::operator=(v10, a2);
  v11 = sub_10026C02C(a1, (wireless_diagnostics::google::protobuf::MessageLite *)v13);
  sub_10011D2FC(v13);
  if (v17)
    sub_10011D2FC(v16);
  return v11;
}

void sub_100279158()
{
  operator delete();
}

uint64_t sub_1002791D0(uint64_t a1, const std::string *a2, uint64_t a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  std::string *v15;
  int v16;
  int v17;
  const char *v19;
  int v20;
  const char *v21;
  _BYTE v22[48];
  uint64_t v23;
  int v24;
  _BYTE v25[64];
  char v26;

  sub_100274028(*(_QWORD *)(a1 + 120), v25);
  if (!v26)
    return 0;
  sub_10011D258(v22, v25);
  v24 |= 2u;
  v8 = v23;
  if (!v23)
    operator new();
  *(_DWORD *)(v23 + 44) |= 2u;
  v9 = *(_QWORD *)(v8 + 24);
  if (!v9)
    operator new();
  if (a4)
  {
    *(_DWORD *)(v9 + 380) |= 8u;
    v10 = *(_QWORD *)(v9 + 288);
    if (!v10)
      operator new();
  }
  else
  {
    *(_DWORD *)(v9 + 376) |= 0x1000000u;
    v10 = *(_QWORD *)(v9 + 200);
    if (!v10)
      operator new();
  }
  *(_DWORD *)(v10 + 140) |= 1u;
  v12 = *(_QWORD *)(v10 + 16);
  if (!v12)
    operator new();
  *(_DWORD *)(v12 + 36) |= 3u;
  *(_OWORD *)(v12 + 16) = *(_OWORD *)a3;
  v13 = *(_DWORD *)(v10 + 140);
  *(_OWORD *)(v10 + 24) = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(v10 + 40) = *(_OWORD *)(a3 + 32);
  *(_OWORD *)(v10 + 56) = *(_OWORD *)(a3 + 48);
  *(_OWORD *)(v10 + 72) = *(_OWORD *)(a3 + 64);
  v14 = *(_QWORD *)(a3 + 80);
  *(_DWORD *)(v10 + 140) = v13 | 0x3FE;
  *(_QWORD *)(v10 + 88) = v14;
  *(_DWORD *)(v10 + 96) = *(_DWORD *)(a3 + 88);
  *(_DWORD *)(v10 + 140) = v13 | 0x107FE;
  v15 = *(std::string **)(v10 + 128);
  if (v15 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
    operator new();
  std::string::operator=(v15, a2);
  switch(*(_DWORD *)(a3 + 96))
  {
    case 0:
      if (!sub_1000E3A78(1u))
        goto LABEL_67;
      v16 = 1;
      goto LABEL_29;
    case 1:
      if (!sub_1000E3A78(2u))
        goto LABEL_67;
      v16 = 2;
      goto LABEL_29;
    case 2:
      if (!sub_1000E3A78(3u))
        goto LABEL_67;
      v16 = 3;
      goto LABEL_29;
    case 3:
      if (!sub_1000E3A78(4u))
        goto LABEL_67;
      v16 = 4;
      goto LABEL_29;
    case 4:
      if (!sub_1000E3A78(5u))
        goto LABEL_67;
      v16 = 5;
      goto LABEL_29;
    case 6:
      if (!sub_1000E3A78(7u))
      {
LABEL_67:
        v19 = "::CLP::LogEntry::Nearbyd::NI::SignalEnvironmentType_IsValid(value)";
        v20 = 17654;
        v21 = "set_signal_environment_type";
LABEL_68:
        __assert_rtn(v21, "NearbyInteractionTypes.pb.h", v20, v19);
      }
      v16 = 7;
LABEL_29:
      *(_DWORD *)(v10 + 140) |= 0x4000u;
      *(_DWORD *)(v10 + 120) = v16;
LABEL_30:
      switch(*(_DWORD *)(a3 + 92))
      {
        case 0:
          if (!sub_1000E3A84(1u))
            goto LABEL_66;
          *(_DWORD *)(v10 + 140) |= 0x8000u;
          v17 = 1;
          goto LABEL_62;
        case 1:
          if (!sub_1000E3A84(2u))
            goto LABEL_66;
          *(_DWORD *)(v10 + 140) |= 0x8000u;
          v17 = 2;
          goto LABEL_62;
        case 2:
          if (!sub_1000E3A84(3u))
            goto LABEL_66;
          *(_DWORD *)(v10 + 140) |= 0x8000u;
          v17 = 3;
          goto LABEL_62;
        case 3:
          if (!sub_1000E3A84(4u))
            goto LABEL_66;
          *(_DWORD *)(v10 + 140) |= 0x8000u;
          v17 = 4;
          goto LABEL_62;
        case 4:
          if (!sub_1000E3A84(5u))
            goto LABEL_66;
          *(_DWORD *)(v10 + 140) |= 0x8000u;
          v17 = 5;
          goto LABEL_62;
        case 5:
          if (!sub_1000E3A84(6u))
            goto LABEL_66;
          *(_DWORD *)(v10 + 140) |= 0x8000u;
          v17 = 6;
          goto LABEL_62;
        case 6:
          if (!sub_1000E3A84(7u))
            goto LABEL_66;
          *(_DWORD *)(v10 + 140) |= 0x8000u;
          v17 = 7;
          goto LABEL_62;
        case 7:
          if (!sub_1000E3A84(8u))
            goto LABEL_66;
          *(_DWORD *)(v10 + 140) |= 0x8000u;
          v17 = 8;
          goto LABEL_62;
        case 8:
          if (!sub_1000E3A84(9u))
            goto LABEL_66;
          *(_DWORD *)(v10 + 140) |= 0x8000u;
          v17 = 9;
          goto LABEL_62;
        case 9:
          if (!sub_1000E3A84(0xAu))
            goto LABEL_66;
          *(_DWORD *)(v10 + 140) |= 0x8000u;
          v17 = 10;
          goto LABEL_62;
        case 0xA:
          if (!sub_1000E3A84(0xBu))
            goto LABEL_66;
          *(_DWORD *)(v10 + 140) |= 0x8000u;
          v17 = 11;
          goto LABEL_62;
        case 0xB:
          if (!sub_1000E3A84(0xCu))
            goto LABEL_66;
          *(_DWORD *)(v10 + 140) |= 0x8000u;
          v17 = 12;
          goto LABEL_62;
        case 0xC:
          if (!sub_1000E3A84(0xDu))
            goto LABEL_66;
          *(_DWORD *)(v10 + 140) |= 0x8000u;
          v17 = 13;
          goto LABEL_62;
        case 0xD:
          if (!sub_1000E3A84(0xEu))
            goto LABEL_66;
          *(_DWORD *)(v10 + 140) |= 0x8000u;
          v17 = 14;
LABEL_62:
          *(_DWORD *)(v10 + 124) = v17;
          goto LABEL_63;
        case 0xE:
          if (!sub_1000E3A84(1u))
          {
LABEL_66:
            v19 = "::CLP::LogEntry::Nearbyd::NI::LocationType_IsValid(value)";
            v20 = 17677;
            v21 = "set_location_type";
            goto LABEL_68;
          }
          *(_DWORD *)(v10 + 140) |= 0x8000u;
          *(_DWORD *)(v10 + 124) = 1;
          if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_FAULT))
            sub_1003E3A14();
LABEL_63:
          v11 = sub_10026C02C(a1, (wireless_diagnostics::google::protobuf::MessageLite *)v22);
          sub_10011D2FC(v22);
          if (v26)
            sub_10011D2FC(v25);
          return v11;
        default:
          goto LABEL_63;
      }
    default:
      goto LABEL_30;
  }
}

void sub_100279738()
{
  operator delete();
}

uint64_t sub_1002797CC(uint64_t a1, const std::string *a2, _OWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  std::string *v10;
  uint64_t v11;
  _BYTE v13[48];
  uint64_t v14;
  int v15;
  _BYTE v16[64];
  char v17;

  sub_100274028(*(_QWORD *)(a1 + 120), v16);
  if (!v17)
    return 0;
  sub_10011D258(v13, v16);
  v15 |= 2u;
  v6 = v14;
  if (!v14)
    operator new();
  *(_DWORD *)(v14 + 44) |= 2u;
  v7 = *(_QWORD *)(v6 + 24);
  if (!v7)
    operator new();
  *(_DWORD *)(v7 + 376) |= 0x2000000u;
  v8 = *(_QWORD *)(v7 + 208);
  if (!v8)
    operator new();
  v9 = *(_DWORD *)(v8 + 60);
  *(_OWORD *)(v8 + 16) = *a3;
  *(_OWORD *)(v8 + 32) = a3[1];
  *(_DWORD *)(v8 + 60) = v9 | 0x1F;
  v10 = *(std::string **)(v8 + 48);
  if (v10 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
    operator new();
  std::string::operator=(v10, a2);
  v11 = sub_10026C02C(a1, (wireless_diagnostics::google::protobuf::MessageLite *)v13);
  sub_10011D2FC(v13);
  if (v17)
    sub_10011D2FC(v16);
  return v11;
}

void sub_100279960()
{
  operator delete();
}

uint64_t sub_1002799D8(uint64_t a1, const std::string *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  std::string *v12;
  uint64_t v13;
  _BYTE v15[48];
  uint64_t v16;
  int v17;
  _BYTE v18[64];
  char v19;

  sub_100274028(*(_QWORD *)(a1 + 120), v18);
  if (!v19)
    return 0;
  sub_10011D258(v15, v18);
  v17 |= 2u;
  v6 = v16;
  if (!v16)
    operator new();
  *(_DWORD *)(v16 + 44) |= 2u;
  v7 = *(_QWORD *)(v6 + 24);
  if (!v7)
    operator new();
  *(_DWORD *)(v7 + 376) |= 0x800000u;
  v8 = *(_QWORD *)(v7 + 192);
  if (!v8)
    operator new();
  v9 = *(_DWORD *)(v8 + 56);
  *(_OWORD *)(v8 + 16) = *(_OWORD *)a3;
  *(_DWORD *)(v8 + 32) = *(_DWORD *)(a3 + 16);
  *(_WORD *)(v8 + 36) = *(_WORD *)(a3 + 20);
  v10 = v9 | 0xFF;
  *(_DWORD *)(v8 + 56) = v10;
  v11 = *(_DWORD *)(a3 + 24);
  if (!v11)
  {
    if (!sub_10006E2C4(0))
      goto LABEL_23;
    v10 = *(_DWORD *)(v8 + 56) | 0x100;
    *(_DWORD *)(v8 + 56) = v10;
    *(_DWORD *)(v8 + 48) = 0;
    v11 = *(_DWORD *)(a3 + 24);
  }
  if (v11 == 1)
  {
    if (!sub_10006E2C4(1u))
      goto LABEL_23;
    v10 = *(_DWORD *)(v8 + 56) | 0x100;
    *(_DWORD *)(v8 + 56) = v10;
    *(_DWORD *)(v8 + 48) = 1;
    v11 = *(_DWORD *)(a3 + 24);
  }
  if (v11 == 2)
  {
    if (sub_10006E2C4(2u))
    {
      v10 = *(_DWORD *)(v8 + 56) | 0x100;
      *(_DWORD *)(v8 + 56) = v10;
      *(_DWORD *)(v8 + 48) = 2;
      goto LABEL_17;
    }
LABEL_23:
    __assert_rtn("set_motion_activity_confidence", "NearbyInteractionTypes.pb.h", 17184, "::CLP::LogEntry::Nearbyd::NI::MotionActivityConfidence_IsValid(value)");
  }
LABEL_17:
  *(_DWORD *)(v8 + 56) = v10 | 0x200;
  v12 = *(std::string **)(v8 + 40);
  if (v12 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
    operator new();
  std::string::operator=(v12, a2);
  v13 = sub_10026C02C(a1, (wireless_diagnostics::google::protobuf::MessageLite *)v15);
  sub_10011D2FC(v15);
  if (v19)
    sub_10011D2FC(v18);
  return v13;
}

void sub_100279C1C()
{
  operator delete();
}

uint64_t sub_100279C94(uint64_t a1, const std::string *a2, double a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::string *v9;
  uint64_t v10;
  _BYTE v12[48];
  uint64_t v13;
  int v14;
  _BYTE v15[64];
  char v16;

  sub_100274028(*(_QWORD *)(a1 + 120), v15);
  if (!v16)
    return 0;
  sub_10011D258(v12, v15);
  v14 |= 2u;
  v6 = v13;
  if (!v13)
    operator new();
  *(_DWORD *)(v13 + 44) |= 2u;
  v7 = *(_QWORD *)(v6 + 24);
  if (!v7)
    operator new();
  *(_DWORD *)(v7 + 380) |= 0x20u;
  v8 = *(_QWORD *)(v7 + 304);
  if (!v8)
    operator new();
  *(_DWORD *)(v8 + 36) |= 2u;
  v9 = *(std::string **)(v8 + 24);
  if (v9 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
    operator new();
  std::string::operator=(v9, a2);
  *(_DWORD *)(v8 + 36) |= 1u;
  *(double *)(v8 + 16) = a3;
  v10 = sub_10026C02C(a1, (wireless_diagnostics::google::protobuf::MessageLite *)v12);
  sub_10011D2FC(v12);
  if (v16)
    sub_10011D2FC(v15);
  return v10;
}

void sub_100279E28()
{
  operator delete();
}

uint64_t sub_100279E9C(uint64_t a1, const std::string *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::string *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  BOOL v26;
  char v27;
  _BYTE v29[48];
  uint64_t v30;
  int v31;
  _BYTE v32[64];
  char v33;

  sub_100274028(*(_QWORD *)(a1 + 120), v32);
  if (!v33)
    return 0;
  sub_10011D258(v29, v32);
  v31 |= 2u;
  v6 = v30;
  if (!v30)
    operator new();
  *(_DWORD *)(v30 + 44) |= 2u;
  v7 = *(_QWORD *)(v6 + 24);
  if (!v7)
    operator new();
  *(_DWORD *)(v7 + 376) |= 0x10000000u;
  v8 = *(_QWORD *)(v7 + 232);
  if (!v8)
    operator new();
  *(_DWORD *)(v8 + 96) |= 8u;
  v9 = *(std::string **)(v8 + 40);
  if (v9 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
    operator new();
  std::string::operator=(v9, a2);
  if (*((_BYTE *)a3 + 16))
  {
    *(_DWORD *)(v8 + 96) |= 0x40u;
    v10 = *(_QWORD *)(v8 + 64);
    if (!v10)
      operator new();
    v11 = *a3;
    *(_DWORD *)(v10 + 32) |= 2u;
    *(_QWORD *)(v10 + 16) = v11;
    v12 = *((_DWORD *)a3 + 2);
    if (v12)
    {
      if (v12 == 1)
      {
        if (sub_10006E2D0(2u))
        {
          v13 = 2;
          goto LABEL_23;
        }
      }
      else
      {
        if (v12 != 2)
          goto LABEL_24;
        if (sub_10006E2D0(3u))
        {
          v13 = 3;
LABEL_23:
          *(_DWORD *)(v10 + 32) |= 1u;
          *(_DWORD *)(v10 + 24) = v13;
          goto LABEL_24;
        }
      }
    }
    else if (sub_10006E2D0(1u))
    {
      v13 = 1;
      goto LABEL_23;
    }
    __assert_rtn("set_category", "CLPNearbyd.pb.h", 4633, "::CLP::LogEntry::Nearbyd::NearbydEntry_FindeeBoundedDisplacementCategory_IsValid(value)");
  }
LABEL_24:
  if (*((_BYTE *)a3 + 72))
  {
    *(_DWORD *)(v8 + 96) |= 0x80u;
    v15 = *(_QWORD *)(v8 + 72);
    if (!v15)
      operator new();
    v16 = *((_DWORD *)a3 + 10);
    if (v16)
    {
      if (v16 != 1)
      {
        v17 = *(_DWORD *)(v15 + 64);
LABEL_36:
        *(_OWORD *)(v15 + 16) = *((_OWORD *)a3 + 3);
        *(_QWORD *)(v15 + 32) = a3[8];
        *(_DWORD *)(v15 + 64) = v17 | 0x3E;
        *(_OWORD *)(v15 + 40) = *(_OWORD *)(a3 + 3);
        goto LABEL_37;
      }
      if (sub_10006E2C4(2u))
      {
        v17 = *(_DWORD *)(v15 + 64) | 1;
        *(_DWORD *)(v15 + 64) = v17;
        v18 = 2;
        goto LABEL_33;
      }
    }
    else if (sub_10006E2C4(1u))
    {
      v17 = *(_DWORD *)(v15 + 64) | 1;
      *(_DWORD *)(v15 + 64) = v17;
      v18 = 1;
LABEL_33:
      *(_DWORD *)(v15 + 56) = v18;
      if (!*((_BYTE *)a3 + 72))
        sub_10000BA44();
      goto LABEL_36;
    }
    __assert_rtn("set_source", "CLPNearbyd.pb.h", 4496, "::CLP::LogEntry::Nearbyd::NearbydEntry_FindeeDisplacementSource_IsValid(value)");
  }
LABEL_37:
  if (*((_BYTE *)a3 + 112))
  {
    *(_DWORD *)(v8 + 96) |= 0x100u;
    v19 = *(_QWORD *)(v8 + 80);
    if (!v19)
      operator new();
    v20 = *(_DWORD *)(v19 + 52);
    *(_OWORD *)(v19 + 16) = *((_OWORD *)a3 + 5);
    *(_DWORD *)(v19 + 52) = v20 | 0xF;
    *(_OWORD *)(v19 + 32) = *((_OWORD *)a3 + 6);
  }
  if (*((_BYTE *)a3 + 160))
  {
    *(_DWORD *)(v8 + 96) |= 0x10u;
    v21 = *(_QWORD *)(v8 + 48);
    if (!v21)
      operator new();
    v22 = *(_DWORD *)(v21 + 40);
    *(_DWORD *)(v21 + 40) = v22 | 3;
    *(_OWORD *)(v21 + 16) = *(_OWORD *)(a3 + 17);
    v23 = *((_DWORD *)a3 + 38);
    *(_DWORD *)(v21 + 40) = v22 | 7;
    *(_DWORD *)(v21 + 32) = v23;
  }
  v24 = *(_DWORD *)(v8 + 96);
  if (*((_BYTE *)a3 + 128))
  {
    v25 = a3[15];
    v24 |= 0x20u;
    *(_DWORD *)(v8 + 96) = v24;
    *(_QWORD *)(v8 + 56) = v25;
  }
  if (*((_BYTE *)a3 + 169))
    v26 = *((_BYTE *)a3 + 168) == 0;
  else
    v26 = 1;
  v27 = !v26;
  *(_DWORD *)(v8 + 96) = v24 | 0x200;
  *(_BYTE *)(v8 + 88) = v27;
  v14 = sub_10026C02C(a1, (wireless_diagnostics::google::protobuf::MessageLite *)v29);
  sub_10011D2FC(v29);
  if (v33)
    sub_10011D2FC(v32);
  return v14;
}

void sub_10027A314()
{
  operator delete();
}

uint64_t sub_10027A3E8(uint64_t a1, const std::string *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  std::string *v18;
  uint64_t v19;
  _BYTE v21[48];
  uint64_t v22;
  int v23;
  _BYTE v24[64];
  char v25;

  sub_100274028(*(_QWORD *)(a1 + 120), v24);
  if (!v25)
    return 0;
  sub_10011D258(v21, v24);
  v23 |= 2u;
  v6 = v22;
  if (!v22)
    operator new();
  *(_DWORD *)(v22 + 44) |= 2u;
  v7 = *(_QWORD *)(v6 + 24);
  if (!v7)
    operator new();
  *(_DWORD *)(v7 + 380) |= 0x10u;
  v8 = *(_QWORD *)(v7 + 296);
  if (!v8)
    operator new();
  v9 = *a3;
  v10 = *(_DWORD *)(v8 + 116);
  v11 = v10 | 1;
  *(_DWORD *)(v8 + 116) = v10 | 1;
  *(_QWORD *)(v8 + 16) = v9;
  if (*((_BYTE *)a3 + 32))
  {
    v12 = a3[3];
    v11 = v10 | 3;
    *(_DWORD *)(v8 + 116) = v10 | 3;
    *(_QWORD *)(v8 + 24) = v12;
  }
  if (*((_BYTE *)a3 + 48))
  {
    v13 = a3[5];
    v11 |= 4u;
    *(_DWORD *)(v8 + 116) = v11;
    *(_QWORD *)(v8 + 32) = v13;
  }
  if (*((_BYTE *)a3 + 64))
  {
    v14 = a3[7];
    v11 |= 8u;
    *(_DWORD *)(v8 + 116) = v11;
    *(_QWORD *)(v8 + 40) = v14;
  }
  if (*((_BYTE *)a3 + 80))
  {
    v15 = a3[9];
    v11 |= 0x10u;
    *(_DWORD *)(v8 + 116) = v11;
    *(_QWORD *)(v8 + 48) = v15;
  }
  if (*((_BYTE *)a3 + 96))
  {
    v16 = a3[11];
    v11 |= 0x20u;
    *(_DWORD *)(v8 + 116) = v11;
    *(_QWORD *)(v8 + 56) = v16;
  }
  if (*((_BYTE *)a3 + 112))
  {
    v17 = a3[13];
    v11 |= 0x40u;
    *(_DWORD *)(v8 + 116) = v11;
    *(_QWORD *)(v8 + 64) = v17;
  }
  if (*((_BYTE *)a3 + 152))
  {
    *(_OWORD *)(v8 + 80) = *(_OWORD *)(a3 + 15);
    v11 |= 0xF00u;
    *(_DWORD *)(v8 + 116) = v11;
    *(_OWORD *)(v8 + 96) = *(_OWORD *)(a3 + 17);
  }
  *(_DWORD *)(v8 + 116) = v11 | 0x80;
  v18 = *(std::string **)(v8 + 72);
  if (v18 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
    operator new();
  std::string::operator=(v18, a2);
  v19 = sub_10026C02C(a1, (wireless_diagnostics::google::protobuf::MessageLite *)v21);
  sub_10011D2FC(v21);
  if (v25)
    sub_10011D2FC(v24);
  return v19;
}

void sub_10027A62C()
{
  operator delete();
}

uint64_t sub_10027A6A0(uint64_t a1, const std::string *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::string *v9;
  int v10;
  int v11;
  uint64_t v12;
  _BYTE v14[48];
  uint64_t v15;
  int v16;
  _BYTE v17[64];
  char v18;

  sub_100274028(*(_QWORD *)(a1 + 120), v17);
  if (!v18)
    return 0;
  sub_10011D258(v14, v17);
  v16 |= 2u;
  v6 = v15;
  if (!v15)
    operator new();
  *(_DWORD *)(v15 + 44) |= 2u;
  v7 = *(_QWORD *)(v6 + 24);
  if (!v7)
    operator new();
  *(_DWORD *)(v7 + 380) |= 0x40u;
  v8 = *(_QWORD *)(v7 + 312);
  if (!v8)
    operator new();
  *(_DWORD *)(v8 + 44) |= 1u;
  v9 = *(std::string **)(v8 + 16);
  if (v9 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
    operator new();
  std::string::operator=(v9, a2);
  v10 = *(_DWORD *)(v8 + 44);
  *(_QWORD *)(v8 + 24) = *(_QWORD *)a3;
  *(_DWORD *)(v8 + 32) = *(unsigned __int16 *)(a3 + 8);
  v11 = *(unsigned __int8 *)(a3 + 10);
  *(_DWORD *)(v8 + 44) = v10 | 0xE;
  *(_DWORD *)(v8 + 36) = v11;
  v12 = sub_10026C02C(a1, (wireless_diagnostics::google::protobuf::MessageLite *)v14);
  sub_10011D2FC(v14);
  if (v18)
    sub_10011D2FC(v17);
  return v12;
}

void sub_10027A848()
{
  operator delete();
}

uint64_t sub_10027A8BC(uint64_t a1, const std::string *a2, float32x2_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::string *v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  __int8 v14;
  uint64_t v15;
  std::string *v16;
  int v17;
  float32x2_t v18;
  float32x2_t v19;
  float32x2_t v20;
  int v21;
  float32x2_t v22;
  float32x2_t v23;
  float32x2_t v24;
  int v25;
  __int32 v26;
  int v27;
  const char *v29;
  int v30;
  const char *v31;
  _BYTE v32[48];
  uint64_t v33;
  int v34;
  _BYTE v35[64];
  char v36;

  sub_100274028(*(_QWORD *)(a1 + 120), v35);
  if (!v36)
    return 0;
  sub_10011D258(v32, v35);
  v34 |= 2u;
  v6 = v33;
  if (!v33)
    operator new();
  *(_DWORD *)(v33 + 44) |= 2u;
  v7 = *(_QWORD *)(v6 + 24);
  if (!v7)
    operator new();
  *(_DWORD *)(v7 + 380) |= 4u;
  v8 = *(_QWORD *)(v7 + 280);
  if (!v8)
    operator new();
  *(_DWORD *)(v8 + 104) |= 1u;
  v9 = *(std::string **)(v8 + 16);
  if (v9 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
    operator new();
  std::string::operator=(v9, a2);
  *(_DWORD *)(v8 + 104) |= 2u;
  v10 = *(_QWORD *)(v8 + 24);
  if (!v10)
    operator new();
  if (!a3->i32[0])
  {
    if (sub_10006E2C4(1u))
    {
      v11 = *(_DWORD *)(v10 + 28) | 1;
      *(_DWORD *)(v10 + 28) = v11;
      v12 = 1;
      goto LABEL_19;
    }
LABEL_84:
    v29 = "::CLP::LogEntry::Nearbyd::NI::AlgorithmStatus_IsValid(value)";
    v30 = 18696;
    v31 = "set_algorithm_status";
    goto LABEL_87;
  }
  if (a3->i32[0] == 1)
  {
    if (sub_10006E2C4(2u))
    {
      v11 = *(_DWORD *)(v10 + 28) | 1;
      *(_DWORD *)(v10 + 28) = v11;
      v12 = 2;
LABEL_19:
      *(_DWORD *)(v10 + 16) = v12;
      goto LABEL_21;
    }
    goto LABEL_84;
  }
  v11 = *(_DWORD *)(v10 + 28);
LABEL_21:
  *(_BYTE *)(v10 + 23) = a3->i8[7];
  *(_BYTE *)(v10 + 20) = a3->i8[4];
  v14 = a3->i8[5];
  *(_BYTE *)(v10 + 21) = v14;
  *(_DWORD *)(v10 + 28) = v11 | 0x1E;
  *(_BYTE *)(v10 + 22) = v14;
  if (a3[24].i8[0])
  {
    *(_DWORD *)(v8 + 104) |= 4u;
    v15 = *(_QWORD *)(v8 + 32);
    if (!v15)
      operator new();
    *(_DWORD *)(v15 + 88) |= 1u;
    v16 = *(std::string **)(v15 + 16);
    if (v16 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
      operator new();
    std::string::operator=(v16, a2);
    v17 = *(_DWORD *)(v15 + 88);
    *(float32x2_t *)(v15 + 24) = a3[1];
    *(double *)(v15 + 32) = a3[3].f32[0];
    v18 = a3[2];
    *(_DWORD *)(v15 + 88) = v17 | 0xE;
    *(float32x2_t *)(v15 + 40) = v18;
    if (a3[5].i8[4])
    {
      *(_DWORD *)(v15 + 88) = v17 | 0x3E;
      *(float64x2_t *)(v15 + 48) = vcvtq_f64_f32(a3[4]);
    }
  }
  if (a3[26].i8[0])
  {
    v19 = a3[25];
    *(_DWORD *)(v8 + 104) |= 8u;
    *(float32x2_t *)(v8 + 40) = v19;
  }
  if (a3[28].i8[0])
  {
    v20 = a3[27];
    *(_DWORD *)(v8 + 104) |= 0x10u;
    *(float32x2_t *)(v8 + 48) = v20;
  }
  switch(a3[29].i32[0])
  {
    case 0:
      if (!sub_10006DA68(1u))
        goto LABEL_83;
      v21 = 1;
      goto LABEL_43;
    case 1:
      if (!sub_10006DA68(2u))
        goto LABEL_83;
      v21 = 2;
      goto LABEL_43;
    case 2:
      if (!sub_10006DA68(3u))
        goto LABEL_83;
      v21 = 3;
      goto LABEL_43;
    case 3:
      if (!sub_10006DA68(4u))
        goto LABEL_83;
      v21 = 4;
      goto LABEL_43;
    case 4:
      if (!sub_10006DA68(5u))
      {
LABEL_83:
        v29 = "::CLP::LogEntry::Nearbyd::NI::VerticalState_IsValid(value)";
        v30 = 19001;
        v31 = "set_vertical_state";
        goto LABEL_87;
      }
      v21 = 5;
LABEL_43:
      *(_DWORD *)(v8 + 104) |= 0x20u;
      *(_DWORD *)(v8 + 72) = v21;
LABEL_44:
      if (a3[31].i8[0])
      {
        v22 = a3[30];
        *(_DWORD *)(v8 + 104) |= 0x40u;
        *(float32x2_t *)(v8 + 56) = v22;
      }
      if (a3[41].i8[0])
      {
        v23 = a3[40];
        *(_DWORD *)(v8 + 104) |= 0x200u;
        *(float32x2_t *)(v8 + 88) = v23;
      }
      if (a3[26].i8[0])
      {
        v24 = a3[25];
        *(_DWORD *)(v8 + 104) |= 8u;
        *(float32x2_t *)(v8 + 40) = v24;
      }
      if (!a3[46].i8[0])
        goto LABEL_69;
      break;
    default:
      goto LABEL_44;
  }
  switch(a3[45].i32[1])
  {
    case 0:
      if (!sub_1000E3A90(1u))
        goto LABEL_85;
      v25 = 1;
      goto LABEL_68;
    case 1:
      if (!sub_1000E3A90(2u))
        goto LABEL_85;
      v25 = 2;
      goto LABEL_68;
    case 2:
      if (!sub_1000E3A90(3u))
        goto LABEL_85;
      v25 = 3;
      goto LABEL_68;
    case 3:
      if (!sub_1000E3A90(4u))
        goto LABEL_85;
      v25 = 4;
      goto LABEL_68;
    case 4:
      if (!sub_1000E3A90(5u))
        goto LABEL_85;
      v25 = 5;
      goto LABEL_68;
    case 5:
      if (!sub_1000E3A90(6u))
        goto LABEL_85;
      v25 = 6;
      goto LABEL_68;
    case 6:
      if (!sub_1000E3A90(7u))
        goto LABEL_85;
      v25 = 7;
      goto LABEL_68;
    case 7:
      if (!sub_1000E3A90(8u))
      {
LABEL_85:
        v29 = "::CLP::LogEntry::Nearbyd::NI::AlgorithmSource_IsValid(value)";
        v30 = 19144;
        v31 = "set_algorithm_source";
        goto LABEL_87;
      }
      v25 = 8;
LABEL_68:
      *(_DWORD *)(v8 + 104) |= 0x400u;
      *(_DWORD *)(v8 + 76) = v25;
LABEL_69:
      if (!a3[47].i8[0])
        goto LABEL_80;
      v26 = a3[46].i32[1];
      if (v26 == 2)
      {
        if (sub_10006E2D0(3u))
        {
          v27 = 3;
          goto LABEL_79;
        }
        goto LABEL_86;
      }
      if (v26 == 1)
      {
        if (sub_10006E2D0(2u))
        {
          v27 = 2;
          goto LABEL_79;
        }
        goto LABEL_86;
      }
      if (v26)
        goto LABEL_80;
      if (!sub_10006E2D0(1u))
      {
LABEL_86:
        v29 = "::CLP::LogEntry::Nearbyd::NI::FindeeMotionState_IsValid(value)";
        v30 = 19167;
        v31 = "set_target_motion_state";
LABEL_87:
        __assert_rtn(v31, "NearbyInteractionTypes.pb.h", v30, v29);
      }
      v27 = 1;
LABEL_79:
      *(_DWORD *)(v8 + 104) |= 0x800u;
      *(_DWORD *)(v8 + 96) = v27;
LABEL_80:
      v13 = sub_10026C02C(a1, (wireless_diagnostics::google::protobuf::MessageLite *)v32);
      sub_10011D2FC(v32);
      if (v36)
        sub_10011D2FC(v35);
      return v13;
    default:
      goto LABEL_69;
  }
}

void sub_10027AE88()
{
  operator delete();
}

uint64_t sub_10027AF2C(uint64_t a1, const std::string *a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::string *v9;
  unsigned int v10;
  uint64_t v11;
  _BYTE v13[48];
  uint64_t v14;
  int v15;
  _BYTE v16[64];
  char v17;

  sub_100274028(*(_QWORD *)(a1 + 120), v16);
  if (!v17)
    return 0;
  sub_10011D258(v13, v16);
  v15 |= 2u;
  v6 = v14;
  if (!v14)
    operator new();
  *(_DWORD *)(v14 + 44) |= 2u;
  v7 = *(_QWORD *)(v6 + 24);
  if (!v7)
    operator new();
  *(_DWORD *)(v7 + 376) |= 0x80000000;
  v8 = *(_QWORD *)(v7 + 256);
  if (!v8)
    operator new();
  *(_DWORD *)(v8 + 32) |= 1u;
  v9 = *(std::string **)(v8 + 16);
  if (v9 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
    operator new();
  std::string::operator=(v9, a2);
  if ((a3 - 1) < 4)
    v10 = a3 + 1;
  else
    v10 = 1;
  if (!sub_10006DA68(v10))
    __assert_rtn("set_algorithm_container", "NearbyInteractionTypes.pb.h", 19264, "::CLP::LogEntry::Nearbyd::NI::AlgorithmContainer_IsValid(value)");
  *(_DWORD *)(v8 + 32) |= 2u;
  *(_DWORD *)(v8 + 24) = v10;
  v11 = sub_10026C02C(a1, (wireless_diagnostics::google::protobuf::MessageLite *)v13);
  sub_10011D2FC(v13);
  if (v17)
    sub_10011D2FC(v16);
  return v11;
}

void sub_10027B100()
{
  operator delete();
}

uint64_t sub_10027B174(uint64_t a1, const std::string *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::string *v7;
  uint64_t v8;
  _BYTE v10[48];
  uint64_t v11;
  int v12;
  _BYTE v13[64];
  char v14;

  sub_100274028(*(_QWORD *)(a1 + 120), v13);
  if (!v14)
    return 0;
  sub_10011D258(v10, v13);
  v12 |= 2u;
  v4 = v11;
  if (!v11)
    operator new();
  *(_DWORD *)(v11 + 44) |= 2u;
  v5 = *(_QWORD *)(v4 + 24);
  if (!v5)
    operator new();
  *(_DWORD *)(v5 + 380) |= 1u;
  v6 = *(_QWORD *)(v5 + 264);
  if (!v6)
    operator new();
  *(_DWORD *)(v6 + 28) |= 1u;
  v7 = *(std::string **)(v6 + 16);
  if (v7 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
    operator new();
  std::string::operator=(v7, a2);
  v8 = sub_10026C02C(a1, (wireless_diagnostics::google::protobuf::MessageLite *)v10);
  sub_10011D2FC(v10);
  if (v14)
    sub_10011D2FC(v13);
  return v8;
}

void sub_10027B2EC()
{
  operator delete();
}

uint64_t sub_10027B360(uint64_t a1, const std::string *a2, double a3, double a4, double a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  std::string *v13;
  int v14;
  uint64_t v15;
  _BYTE v17[48];
  uint64_t v18;
  int v19;
  _BYTE v20[64];
  char v21;

  sub_100274028(*(_QWORD *)(a1 + 120), v20);
  if (!v21)
    return 0;
  sub_10011D258(v17, v20);
  v19 |= 2u;
  v10 = v18;
  if (!v18)
    operator new();
  *(_DWORD *)(v18 + 44) |= 2u;
  v11 = *(_QWORD *)(v10 + 24);
  if (!v11)
    operator new();
  *(_DWORD *)(v11 + 380) |= 2u;
  v12 = *(_QWORD *)(v11 + 272);
  if (!v12)
    operator new();
  *(_DWORD *)(v12 + 52) |= 1u;
  v13 = *(std::string **)(v12 + 16);
  if (v13 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
    operator new();
  std::string::operator=(v13, a2);
  v14 = *(_DWORD *)(v12 + 52);
  *(double *)(v12 + 32) = a4;
  *(double *)(v12 + 40) = a5;
  *(_DWORD *)(v12 + 52) = v14 | 0xE;
  *(double *)(v12 + 24) = a3;
  v15 = sub_10026C02C(a1, (wireless_diagnostics::google::protobuf::MessageLite *)v17);
  sub_10011D2FC(v17);
  if (v21)
    sub_10011D2FC(v20);
  return v15;
}

void sub_10027B508()
{
  operator delete();
}

uint64_t sub_10027B57C(uint64_t a1, const std::string *a2, float32x2_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::string *v9;
  int v10;
  float32x2_t v11;
  int v12;
  int v13;
  int v14;
  float32x2_t v15;
  int v16;
  uint64_t v17;
  _BYTE v19[48];
  uint64_t v20;
  int v21;
  _BYTE v22[64];
  char v23;

  sub_100274028(*(_QWORD *)(a1 + 120), v22);
  if (!v23)
    return 0;
  sub_10011D258(v19, v22);
  v21 |= 2u;
  v6 = v20;
  if (!v20)
    operator new();
  *(_DWORD *)(v20 + 44) |= 2u;
  v7 = *(_QWORD *)(v6 + 24);
  if (!v7)
    operator new();
  *(_DWORD *)(v7 + 376) |= 0x40000000u;
  v8 = *(_QWORD *)(v7 + 248);
  if (!v8)
    operator new();
  *(_DWORD *)(v8 + 88) |= 1u;
  v9 = *(std::string **)(v8 + 16);
  if (v9 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
    operator new();
  std::string::operator=(v9, a2);
  v10 = *(_DWORD *)(v8 + 88);
  *(float32x2_t *)(v8 + 24) = *a3;
  *(double *)(v8 + 32) = a3[2].f32[0];
  v11 = a3[1];
  v12 = v10 | 0xE;
  *(_DWORD *)(v8 + 88) = v10 | 0xE;
  *(float32x2_t *)(v8 + 40) = v11;
  if (a3[4].i8[4])
  {
    v12 = v10 | 0x3E;
    *(_DWORD *)(v8 + 88) = v10 | 0x3E;
    *(float64x2_t *)(v8 + 48) = vcvtq_f64_f32(a3[3]);
  }
  if (a3[22].i8[2])
  {
    v13 = a3[22].u16[0];
    v12 |= 0x40u;
    *(_DWORD *)(v8 + 88) = v12;
    *(_DWORD *)(v8 + 64) = v13;
  }
  if (a3[22].i8[5])
  {
    v14 = a3[22].u8[4];
    v12 |= 0x80u;
    *(_DWORD *)(v8 + 88) = v12;
    *(_DWORD *)(v8 + 68) = v14;
  }
  if (a3[9].i8[0])
  {
    v15 = a3[8];
    v12 |= 0x100u;
    *(_DWORD *)(v8 + 88) = v12;
    *(float32x2_t *)(v8 + 72) = v15;
  }
  if (a3[22].i8[7])
  {
    v16 = a3[22].u8[6];
    *(_DWORD *)(v8 + 88) = v12 | 0x200;
    *(_DWORD *)(v8 + 80) = v16;
  }
  v17 = sub_10026C02C(a1, (wireless_diagnostics::google::protobuf::MessageLite *)v19);
  sub_10011D2FC(v19);
  if (v23)
    sub_10011D2FC(v22);
  return v17;
}

void sub_10027B7A4()
{
  operator delete();
}

uint64_t sub_10027B818(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  _QWORD v16[5];
  uint64_t v17;
  uint64_t v18;
  int v19;

  sub_10011C6A4(v16);
  v19 |= 1u;
  v6 = v17;
  if (!v17)
    operator new();
  v7 = *(_DWORD *)(v17 + 52);
  *(_OWORD *)(v17 + 16) = *(_OWORD *)a2;
  v8 = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(v6 + 52) = v7 | 7;
  *(_QWORD *)(v6 + 32) = v8;
  v19 |= 2u;
  v9 = v18;
  if (!v18)
    operator new();
  *(_DWORD *)(v18 + 44) |= 2u;
  v10 = *(_QWORD *)(v9 + 24);
  if (!v10)
    operator new();
  *(_DWORD *)(v10 + 380) |= 0x200u;
  v11 = *(_QWORD *)(v10 + 336);
  if (!v11)
    operator new();
  v12 = *(_DWORD *)(v11 + 124);
  *(_QWORD *)(v11 + 16) = *(_QWORD *)a3;
  *(_DWORD *)(v11 + 24) = *(_DWORD *)(a3 + 8);
  *(_DWORD *)(v11 + 28) = *(_DWORD *)(a3 + 12);
  *(_DWORD *)(v11 + 32) = *(_DWORD *)(a3 + 16);
  *(_DWORD *)(v11 + 36) = *(_DWORD *)(a3 + 20);
  *(_DWORD *)(v11 + 40) = *(_DWORD *)(a3 + 24);
  *(_DWORD *)(v11 + 44) = *(_DWORD *)(a3 + 28);
  *(_OWORD *)(v11 + 48) = *(_OWORD *)(a3 + 32);
  *(_QWORD *)(v11 + 64) = *(_QWORD *)(a3 + 48);
  *(_QWORD *)(v11 + 72) = *(_QWORD *)(a3 + 56);
  *(_OWORD *)(v11 + 80) = *(_OWORD *)(a3 + 64);
  *(_DWORD *)(v11 + 96) = *(_DWORD *)(a3 + 80);
  *(_DWORD *)(v11 + 100) = *(_DWORD *)(a3 + 84);
  *(_DWORD *)(v11 + 104) = *(_DWORD *)(a3 + 88);
  *(_DWORD *)(v11 + 124) = v12 | 0x3FFFF;
  *(_QWORD *)(v11 + 108) = *(_QWORD *)(a3 + 92);
  v13 = *(unsigned __int8 *)(a3 + 100);
  if (!sub_10006E2C4(v13))
    __assert_rtn("set_displacing_state", "NearbyInteractionTypes.pb.h", 20162, "::CLP::LogEntry::Nearbyd::NI::DisplacingState_IsValid(value)");
  *(_DWORD *)(v11 + 124) |= 0x40000u;
  *(_DWORD *)(v11 + 116) = v13;
  v14 = sub_10026C02C(a1, (wireless_diagnostics::google::protobuf::MessageLite *)v16);
  sub_10011D2FC(v16);
  return v14;
}

void sub_10027BA34()
{
  operator delete();
}

uint64_t sub_10027BAAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  _QWORD v16[5];
  uint64_t v17;
  uint64_t v18;
  int v19;

  sub_10011C6A4(v16);
  v19 |= 1u;
  v6 = v17;
  if (!v17)
    operator new();
  v7 = *(_DWORD *)(v17 + 52);
  *(_OWORD *)(v17 + 16) = *(_OWORD *)a2;
  v8 = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(v6 + 52) = v7 | 7;
  *(_QWORD *)(v6 + 32) = v8;
  v19 |= 2u;
  v9 = v18;
  if (!v18)
    operator new();
  *(_DWORD *)(v18 + 44) |= 2u;
  v10 = *(_QWORD *)(v9 + 24);
  if (!v10)
    operator new();
  *(_DWORD *)(v10 + 380) |= 0x400u;
  v11 = *(_QWORD *)(v10 + 344);
  if (!v11)
    operator new();
  v12 = *(_DWORD *)(v11 + 40);
  *(_QWORD *)(v11 + 16) = *(_QWORD *)a3;
  *(_DWORD *)(v11 + 24) = *(unsigned __int16 *)(a3 + 8);
  v13 = *(char *)(a3 + 10);
  *(_DWORD *)(v11 + 40) = v12 | 0xF;
  *(_DWORD *)(v11 + 28) = v13;
  *(_DWORD *)(v11 + 32) = -128;
  v14 = sub_10026C02C(a1, (wireless_diagnostics::google::protobuf::MessageLite *)v16);
  sub_10011D2FC(v16);
  return v14;
}

void sub_10027BC28()
{
  operator delete();
}

uint64_t sub_10027BCA0(uint64_t a1, uint64_t a2, unsigned __int16 *a3)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  _QWORD v18[5];
  uint64_t v19;
  uint64_t v20;
  int v21;

  sub_10011C6A4(v18);
  v21 |= 1u;
  v6 = v19;
  if (!v19)
    operator new();
  v7 = *(_DWORD *)(v19 + 52);
  *(_OWORD *)(v19 + 16) = *(_OWORD *)a2;
  v8 = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(v6 + 52) = v7 | 7;
  *(_QWORD *)(v6 + 32) = v8;
  v21 |= 2u;
  v9 = v20;
  if (!v20)
    operator new();
  *(_DWORD *)(v20 + 44) |= 2u;
  v10 = *(_QWORD *)(v9 + 24);
  if (!v10)
    operator new();
  *(_DWORD *)(v10 + 380) |= 0x800u;
  v11 = *(_QWORD *)(v10 + 352);
  if (!v11)
    operator new();
  v12 = *(_DWORD *)(v11 + 32);
  *(_DWORD *)(v11 + 24) = *a3;
  *(_DWORD *)(v11 + 32) = v12 | 3;
  v13 = *(_QWORD *)(v11 + 16);
  if (!v13)
    operator new();
  v14 = *(_DWORD *)(v13 + 68);
  *(_OWORD *)(v13 + 16) = *(_OWORD *)(a3 + 1);
  *(_OWORD *)(v13 + 32) = *(_OWORD *)(a3 + 9);
  *(_QWORD *)(v13 + 48) = *(_QWORD *)(a3 + 17);
  *(_DWORD *)(v13 + 56) = *((char *)a3 + 42);
  v15 = *((char *)a3 + 43);
  *(_DWORD *)(v13 + 68) = v14 | 0x7F;
  *(_DWORD *)(v13 + 60) = v15;
  v16 = sub_10026C02C(a1, (wireless_diagnostics::google::protobuf::MessageLite *)v18);
  sub_10011D2FC(v18);
  return v16;
}

void sub_10027BE68()
{
  operator delete();
}

uint64_t sub_10027BEF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  _QWORD v17[5];
  uint64_t v18;
  uint64_t v19;
  int v20;

  sub_10011C6A4(v17);
  v20 |= 1u;
  v6 = v18;
  if (!v18)
    operator new();
  v7 = *(_DWORD *)(v18 + 52);
  *(_OWORD *)(v18 + 16) = *(_OWORD *)a2;
  v8 = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(v6 + 52) = v7 | 7;
  *(_QWORD *)(v6 + 32) = v8;
  v20 |= 2u;
  v9 = v19;
  if (!v19)
    operator new();
  *(_DWORD *)(v19 + 44) |= 2u;
  v10 = *(_QWORD *)(v9 + 24);
  if (!v10)
    operator new();
  *(_DWORD *)(v10 + 380) |= 0x1000u;
  v11 = *(_QWORD *)(v10 + 360);
  if (!v11)
    operator new();
  v12 = *(_DWORD *)(v11 + 40);
  *(_DWORD *)(v11 + 32) = *(unsigned __int16 *)(a3 + 8);
  *(_QWORD *)(v11 + 16) = *(_QWORD *)a3;
  *(_DWORD *)(v11 + 40) = v12 | 7;
  v13 = *(_QWORD *)(v11 + 24);
  if (!v13)
    operator new();
  v14 = *(_DWORD *)(v13 + 48);
  *(_OWORD *)(v13 + 16) = *(_OWORD *)(a3 + 10);
  *(_QWORD *)(v13 + 32) = *(_QWORD *)(a3 + 26);
  *(_BYTE *)(v13 + 40) = *(_BYTE *)(a3 + 34);
  *(_WORD *)(v13 + 41) = *(_WORD *)(a3 + 35);
  *(_DWORD *)(v13 + 48) = v14 | 0x3F;
  v15 = sub_10026C02C(a1, (wireless_diagnostics::google::protobuf::MessageLite *)v17);
  sub_10011D2FC(v17);
  return v15;
}

void sub_10027C0C0()
{
  operator delete();
}

_QWORD *sub_10027C150(_QWORD *a1, char **a2)
{
  _QWORD *v4;

  v4 = sub_10000BF04(a1, *a2);
  sub_10000BF04(v4 + 3, a2[1]);
  return a1;
}

void sub_10027C188(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

double sub_10027C1A4(uint64_t a1, unsigned int a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 32);
  if (!v2)
    sub_1003E3A4C();
  if ((a2 & 0x80000000) != 0)
    sub_1003E3A74();
  if (*(_DWORD *)(a1 + 16) <= (signed int)a2)
    sub_1003E3A9C();
  return *(double *)(v2 + 8 * a2);
}

double sub_10027C1DC(uint64_t a1, int a2, int a3)
{
  uint64_t v3;
  unsigned int v4;

  v3 = *(_QWORD *)(a1 + 32);
  if (!v3)
    sub_1003E3AC4();
  v4 = a2 + *(_DWORD *)(a1 + 20) * a3;
  if ((v4 & 0x80000000) != 0)
    sub_1003E3AEC();
  if ((signed int)v4 >= *(_DWORD *)(a1 + 16))
    sub_1003E3B14();
  return *(double *)(v3 + 8 * v4);
}

_QWORD *sub_10027C21C(_QWORD *__dst, void *__src, size_t __len)
{
  void *v6;
  size_t v7;
  size_t v8;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    sub_10000BD6C();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    __dst[1] = __len;
    __dst[2] = v8 | 0x8000000000000000;
    *__dst = v6;
  }
  else
  {
    *((_BYTE *)__dst + 23) = __len;
    v6 = __dst;
    if (!__len)
      goto LABEL_9;
  }
  memmove(v6, __src, __len);
LABEL_9:
  *((_BYTE *)v6 + __len) = 0;
  return __dst;
}

_QWORD *sub_10027C2C4@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  _QWORD *v8;
  _QWORD *result;

  v8 = operator new(0x58uLL);
  result = sub_10027C334(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  return result;
}

void sub_10027C320(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_10027C334(_QWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  char v6;

  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_100810F98;
  sub_10027C3E4((uint64_t)&v6, (uint64_t)(a1 + 3), a2, a3, a4);
  return a1;
}

void sub_10027C384(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_10027C398(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_100810F98;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10027C3A8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_100810F98;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_10027C3D8(uint64_t a1)
{
  return sub_1000C93B0(a1 + 24);
}

void sub_10027C3E4(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;

  v5 = (std::__shared_weak_count *)a3[1];
  v11 = *a3;
  v12 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  sub_1000C9304(a2, &v11, a4, a5);
  v8 = v12;
  if (v12)
  {
    v9 = (unint64_t *)&v12->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_10027C470(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10001AE68((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10027C484()
{
  std::string *v0;
  __int128 v1;
  std::string *v2;
  __int128 v3;
  std::string *v4;
  __int128 v5;
  std::string *v6;
  __int128 v7;
  std::string *v8;
  __int128 v9;
  std::string *v10;
  __int128 v11;
  std::string *v12;
  __int128 v13;
  std::string *v14;
  __int128 v15;
  std::string *v16;
  __int128 v17;
  std::string *v18;
  __int128 v19;
  std::string *v20;
  __int128 v21;
  std::string *v22;
  __int128 v23;
  std::string *v24;
  __int128 v25;
  std::string *v26;
  __int128 v27;
  std::string *v28;
  __int128 v29;
  std::string *v30;
  __int128 v31;
  std::string *v32;
  __int128 v33;
  std::string *v34;
  __int128 v35;
  _OWORD *v41;
  _OWORD *v42;
  __int128 v44;
  std::string v45;
  std::string v46;

  sub_1003610EC(0);
  v0 = std::string::insert(&v45, 0, "reverseLUT_A");
  v1 = *(_OWORD *)&v0->__r_.__value_.__l.__data_;
  v46.__r_.__value_.__r.__words[2] = v0->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v1;
  v0->__r_.__value_.__l.__size_ = 0;
  v0->__r_.__value_.__r.__words[2] = 0;
  v0->__r_.__value_.__r.__words[0] = 0;
  v2 = std::string::append(&v46, ".bin");
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  qword_10085A9E0 = v2->__r_.__value_.__r.__words[2];
  xmmword_10085A9D0 = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v46.__r_.__value_.__l.__data_);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_10085A9D0, (void *)&_mh_execute_header);
  sub_1003610EC(1);
  v4 = std::string::insert(&v45, 0, "reverseLUT_A");
  v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v46.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  v6 = std::string::append(&v46, ".bin");
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  qword_10085A9F8 = v6->__r_.__value_.__r.__words[2];
  xmmword_10085A9E8 = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v46.__r_.__value_.__l.__data_);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_10085A9E8, (void *)&_mh_execute_header);
  sub_1003610EC(2);
  v8 = std::string::insert(&v45, 0, "reverseLUT_A");
  v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v46.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  v10 = std::string::append(&v46, ".bin");
  v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  qword_10085AA10 = v10->__r_.__value_.__r.__words[2];
  xmmword_10085AA00 = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v46.__r_.__value_.__l.__data_);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_10085AA00, (void *)&_mh_execute_header);
  sub_1003610EC(3);
  v12 = std::string::insert(&v45, 0, "reverseLUT_A");
  v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v46.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  v14 = std::string::append(&v46, ".bin");
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  qword_10085AA28 = v14->__r_.__value_.__r.__words[2];
  xmmword_10085AA18 = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v46.__r_.__value_.__l.__data_);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_10085AA18, (void *)&_mh_execute_header);
  sub_1003610EC(4);
  v16 = std::string::insert(&v45, 0, "reverseLUT_A");
  v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v46.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  v18 = std::string::append(&v46, ".bin");
  v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  qword_10085AA40 = v18->__r_.__value_.__r.__words[2];
  xmmword_10085AA30 = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v46.__r_.__value_.__l.__data_);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_10085AA30, (void *)&_mh_execute_header);
  sub_1003610EC(5);
  v20 = std::string::insert(&v45, 0, "reverseLUT_A");
  v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  v46.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  v22 = std::string::append(&v46, ".bin");
  v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  qword_10085AA58 = v22->__r_.__value_.__r.__words[2];
  xmmword_10085AA48 = v23;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v46.__r_.__value_.__l.__data_);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_10085AA48, (void *)&_mh_execute_header);
  sub_1003610EC(6);
  v24 = std::string::insert(&v45, 0, "reverseLUT_A");
  v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
  v46.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v25;
  v24->__r_.__value_.__l.__size_ = 0;
  v24->__r_.__value_.__r.__words[2] = 0;
  v24->__r_.__value_.__r.__words[0] = 0;
  v26 = std::string::append(&v46, ".bin");
  v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
  qword_10085AA70 = v26->__r_.__value_.__r.__words[2];
  xmmword_10085AA60 = v27;
  v26->__r_.__value_.__l.__size_ = 0;
  v26->__r_.__value_.__r.__words[2] = 0;
  v26->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v46.__r_.__value_.__l.__data_);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_10085AA60, (void *)&_mh_execute_header);
  sub_1003610EC(7);
  v28 = std::string::insert(&v45, 0, "reverseLUT_A");
  v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
  v46.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v29;
  v28->__r_.__value_.__l.__size_ = 0;
  v28->__r_.__value_.__r.__words[2] = 0;
  v28->__r_.__value_.__r.__words[0] = 0;
  v30 = std::string::append(&v46, ".bin");
  v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
  qword_10085AA88 = v30->__r_.__value_.__r.__words[2];
  xmmword_10085AA78 = v31;
  v30->__r_.__value_.__l.__size_ = 0;
  v30->__r_.__value_.__r.__words[2] = 0;
  v30->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v46.__r_.__value_.__l.__data_);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_10085AA78, (void *)&_mh_execute_header);
  sub_1003610EC(8);
  v32 = std::string::insert(&v45, 0, "reverseLUT_A");
  v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
  v46.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v33;
  v32->__r_.__value_.__l.__size_ = 0;
  v32->__r_.__value_.__r.__words[2] = 0;
  v32->__r_.__value_.__r.__words[0] = 0;
  v34 = std::string::append(&v46, ".bin");
  v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
  qword_10085AAA0 = v34->__r_.__value_.__r.__words[2];
  xmmword_10085AA90 = v35;
  v34->__r_.__value_.__l.__size_ = 0;
  v34->__r_.__value_.__r.__words[2] = 0;
  v34->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v46.__r_.__value_.__l.__data_);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_10085AA90, (void *)&_mh_execute_header);
  *(_OWORD *)&v46.__r_.__value_.__l.__data_ = xmmword_1004748C0;
  v46.__r_.__value_.__r.__words[2] = 0x300000003;
  sub_100182284((uint64_t)&unk_10085AAA8, (int *)&v46, 3);
  xmmword_10085AAC0 = xmmword_10046E050;
  *(_OWORD *)algn_10085AAD0 = xmmword_10046E060;
  qword_10085AAE8 = 0;
  unk_10085AAF0 = 0;
  qword_10085AAE0 = 0x3FD999999999999ALL;
  unk_10085AAF8 = xmmword_10046E070;
  dword_10085AB08 = 5;
  qword_10085AB10 = 0x4000000000000000;
  dword_10085AB18 = 5;
  byte_10085AB20 = 0;
  *(_QWORD *)&algn_10085AB21[3] = 0x30000000ALL;
  xmmword_10085AB30 = xmmword_10046E080;
  unk_10085AB40 = xmmword_10046E090;
  xmmword_10085AB50 = xmmword_10046E0A0;
  qword_10085AB60 = 0x3FE3333333333333;
  dword_10085AB68 = 3;
  xmmword_10085AB70 = xmmword_10046E0B0;
  unk_10085AB80 = xmmword_10046E090;
  xmmword_10085AB90 = xmmword_10046E080;
  qword_10085ABA0 = 0x3FE3333333333333;
  byte_10085ABA8 = 0;
  xmmword_10085ABB0 = xmmword_10046E0C0;
  unk_10085ABC0 = xmmword_10046E0D0;
  __asm { FMOV            V0.2D, #1.0 }
  v44 = _Q0;
  xmmword_10085ABD0 = _Q0;
  qword_10085ABE0 = 0xBFD3333333333333;
  xmmword_10085ABE8 = xmmword_10046E0E0;
  qword_10085ABF8 = 0x3E99999A40000000;
  xmmword_10085AC00 = xmmword_10046E060;
  qword_10085AC18 = 0;
  unk_10085AC20 = 0;
  qword_10085AC10 = 0x3FD999999999999ALL;
  xmmword_10085AC28 = xmmword_10046E070;
  dword_10085AC38 = 5;
  qword_10085AC40 = 0x4000000000000000;
  dword_10085AC48 = 4;
  qword_10085AC50 = 0x300000008;
  qword_10085AC58 = 0xC04E800000000000;
  v45.__r_.__value_.__r.__words[0] = 0xC04E800000000000;
  sub_10018252C((uint64_t)&unk_10085AC60, (double *)&v45, 1);
  xmmword_10085AC78 = xmmword_10046E0F0;
  qword_10085AC88 = 0x4024000000000000;
  dword_10085AC90 = 45;
  byte_10085AC94 = 0;
  dword_10085AC98 = 1;
  byte_10085ACA0 = 1;
  xmmword_10085ACA8 = xmmword_10046E100;
  unk_10085ACB8 = xmmword_10046E110;
  xmmword_10085ACC8 = v44;
  qword_10085ACD8 = 0xC059000000000000;
  xmmword_10085ACE0 = xmmword_10046E120;
  qword_10085ACF0 = (uint64_t)vdup_n_s32(0x3DCCCCCDu);
  xmmword_10085ACF8 = xmmword_10046E060;
  qword_10085AD08 = 0x3FD999999999999ALL;
  qword_10085AD18 = 0;
  qword_10085AD10 = 0;
  xmmword_10085AD20 = xmmword_10046E070;
  dword_10085AD30 = 5;
  qword_10085AD38 = 0x4000000000000000;
  dword_10085AD40 = 10;
  qword_10085AD48 = 0x4034000000000000;
  dword_10085AD50 = 3;
  xmmword_10085AD58 = xmmword_10046E130;
  __cxa_atexit((void (*)(void *))sub_100180704, &unk_10085AAA8, (void *)&_mh_execute_header);
  qword_10085AD70 = 0;
  unk_10085AD78 = 0;
  qword_10085AD68 = 0;
  v41 = operator new(0x40uLL);
  qword_10085AD70 = (uint64_t)(v41 + 4);
  unk_10085AD78 = v41 + 4;
  *v41 = xmmword_1004748D8;
  v41[1] = unk_1004748E8;
  v41[2] = xmmword_1004748F8;
  v41[3] = unk_100474908;
  qword_10085AD68 = (uint64_t)v41;
  __cxa_atexit((void (*)(void *))sub_1000325D8, &qword_10085AD68, (void *)&_mh_execute_header);
  qword_10085AD88 = 0;
  unk_10085AD90 = 0;
  qword_10085AD80 = 0;
  v42 = operator new(0x10uLL);
  qword_10085AD88 = (uint64_t)(v42 + 1);
  unk_10085AD90 = v42 + 1;
  *v42 = xmmword_100474918;
  qword_10085AD80 = (uint64_t)v42;
  __cxa_atexit((void (*)(void *))sub_1000325D8, &qword_10085AD80, (void *)&_mh_execute_header);
  v46.__r_.__value_.__r.__words[0] = (std::string::size_type)"AntennaMask_1_NN_V5_Model_DeviceType_201.mlmodelc/fp16_model.espresso";
  v46.__r_.__value_.__l.__size_ = (std::string::size_type)"net";
  sub_10027C150(&qword_10085AD98, &v46.__r_.__value_.__l.__data_);
  v45.__r_.__value_.__r.__words[0] = (std::string::size_type)"AntennaMask_2_NN_V5_Model_DeviceType_201.mlmodelc/fp16_model.espresso";
  v45.__r_.__value_.__l.__size_ = (std::string::size_type)"net";
  sub_10027C150(qword_10085ADC8, &v45.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))sub_10026B920, &qword_10085AD98, (void *)&_mh_execute_header);
  v46.__r_.__value_.__r.__words[0] = (std::string::size_type)"AntennaMask_1_NN_V5_ScalingModel_DeviceType_201";
  v46.__r_.__value_.__l.__size_ = (std::string::size_type)"mlmodelc";
  sub_10027C150(&qword_10085ADF8, &v46.__r_.__value_.__l.__data_);
  v45.__r_.__value_.__r.__words[0] = (std::string::size_type)"AntennaMask_2_NN_V5_ScalingModel_DeviceType_201";
  v45.__r_.__value_.__l.__size_ = (std::string::size_type)"mlmodelc";
  sub_10027C150(qword_10085AE28, &v45.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))sub_10026B920, &qword_10085ADF8, (void *)&_mh_execute_header);
  sub_10000BF04(qword_10085AE58, "input_1");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10085AE58, (void *)&_mh_execute_header);
  sub_10000BF04(qword_10085AE70, "Identity");
  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_10085AE70, (void *)&_mh_execute_header);
}

void sub_10027CEA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (byte_10085AE27 < 0)
    sub_1003E3B3C();
  if (byte_10085AE0F < 0)
    operator delete((void *)qword_10085ADF8);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_10027CF94@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, (&off_100811338)[a1]);
}

_QWORD *sub_10027CFA8@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, (&off_100811390)[a1]);
}

_QWORD *sub_10027CFBC@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, (&off_1008113D8)[a1]);
}

_QWORD *sub_10027CFD0@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, (&off_1008113F8)[a1]);
}

void sub_10027D10C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_10027D810(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_10027DBB0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_10027DC58(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10027DD84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  void *v10;
  void *v11;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_10027DF34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_10027DF90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_10027E014(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10027E07C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_10027E864(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13)
{
  void *v13;

  _Unwind_Resume(a1);
}

void sub_10027E9C4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10027EEBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45)
{
  void *v45;
  void *v46;
  void *v47;

  sub_10001AE68((uint64_t)&a15);
  if (a23 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_10028072C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12, void *a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_100280CD8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_100280F14(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1002810D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1002813C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1002817DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_100281A58(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t sub_100281AD4(uint64_t a1)
{

  return a1;
}

void sub_100281AFC(uint64_t a1)
{

  operator delete();
}

_QWORD *sub_100281B34(uint64_t a1)
{
  _QWORD *v2;

  v2 = operator new(0x10uLL);
  *v2 = off_1008110C8;
  v2[1] = *(id *)(a1 + 8);
  return v2;
}

id sub_100281B78(uint64_t a1, _QWORD *a2)
{
  id result;

  *a2 = off_1008110C8;
  result = *(id *)(a1 + 8);
  a2[1] = result;
  return result;
}

void sub_100281BAC(uint64_t a1)
{

}

void sub_100281BB4(id *a1)
{

  operator delete(a1);
}

void sub_100281BDC(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD block[6];
  int v10;

  v3 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  v4 = *a3;
  v10 = *((_DWORD *)a3 + 2);
  v5 = *(_QWORD *)(a1 + 8);
  block[0] = _NSConcreteStackBlock;
  block[2] = sub_100281CCC;
  block[3] = &unk_10080B8C0;
  v6 = *(NSObject **)(v5 + 56);
  block[1] = 3221225472;
  block[4] = v5;
  block[5] = v4;
  dispatch_async(v6, block);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

uint64_t sub_100281C84(uint64_t a1, uint64_t a2)
{
  if (sub_10003E27C(a2, (uint64_t)&off_100811128))
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100281CC0()
{
  return &off_100811128;
}

id sub_100281CCC(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "serviceRequestDidUpdateStatus:", *(_QWORD *)(a1 + 40), *(unsigned int *)(a1 + 48));
}

uint64_t sub_100281CDC(uint64_t a1)
{

  return a1;
}

void sub_100281D04(uint64_t a1)
{

  operator delete();
}

_QWORD *sub_100281D3C(uint64_t a1)
{
  _QWORD *v2;

  v2 = operator new(0x10uLL);
  *v2 = off_100811148;
  v2[1] = *(id *)(a1 + 8);
  return v2;
}

id sub_100281D80(uint64_t a1, _QWORD *a2)
{
  id result;

  *a2 = off_100811148;
  result = *(id *)(a1 + 8);
  a2[1] = result;
  return result;
}

void sub_100281DB4(uint64_t a1)
{

}

void sub_100281DBC(id *a1)
{

  operator delete(a1);
}

void sub_100281DE4(uint64_t a1, _QWORD *a2, __int128 *a3)
{
  std::__shared_weak_count *v5;
  __int128 v6;
  NSObject *v7;
  uint64_t v8;
  NSObject *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  _QWORD v12[5];
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[560];
  _BYTE v17[16];
  _QWORD *v18[16];
  char v19;
  __n128 v20[4];
  void *__p;
  void *v22;
  char v23;
  _BYTE v24[545];
  __int128 v25;
  __int128 v26;
  __int128 v27;
  _BYTE v28[560];
  _BYTE v29[16];
  _QWORD *v30[16];
  char v31;
  __n128 v32[4];
  void *v33;
  void *v34;
  char v35;
  _BYTE v36[545];

  v5 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  v6 = a3[1];
  v25 = *a3;
  v26 = v6;
  v27 = a3[2];
  sub_10015A39C(v28, (uint64_t)(a3 + 3));
  sub_100153F08(v29, (uint64_t)(a3 + 38));
  sub_10015A3F0(v32, (__n128 *)((char *)a3 + 760));
  memcpy(v36, a3 + 55, sizeof(v36));
  v7 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v12[0]) = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#peer-nba,Registering solutionsCallback.", (uint8_t *)v12, 2u);
  }
  v12[1] = 3321888768;
  v13 = v25;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(NSObject **)(v8 + 56);
  v12[0] = _NSConcreteStackBlock;
  v12[2] = sub_100282160;
  v12[3] = &unk_10080C5A8;
  v12[4] = v8;
  v14 = v26;
  v15 = v27;
  sub_10015A39C(v16, (uint64_t)v28);
  sub_100153F08(v17, (uint64_t)v29);
  sub_10015A3F0(v20, v32);
  memcpy(v24, v36, sizeof(v24));
  dispatch_async(v9, v12);
  if (v23 && __p)
  {
    v22 = __p;
    operator delete(__p);
  }
  if (v19)
    sub_10003E3F0((uint64_t)v18, v18[1]);
  sub_100144868((uint64_t)v16);
  if (v35 && v33)
  {
    v34 = v33;
    operator delete(v33);
  }
  if (v31)
    sub_10003E3F0((uint64_t)v30, v30[1]);
  sub_100144868((uint64_t)v28);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_100282044(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__shared_weak_count *v9;
  uint64_t v10;
  uint64_t v11;
  void *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;

  if (LOBYTE(STACK[0x318]))
    sub_1003E3FFC((uint64_t)&a9);
  sub_100144868(v11);
  if (LOBYTE(STACK[0x928]))
  {
    v13 = (void *)STACK[0x900];
    if (STACK[0x900])
    {
      STACK[0x908] = (unint64_t)v13;
      operator delete(v13);
    }
  }
  if (LOBYTE(STACK[0x8B0]))
    sub_10003E3F0((uint64_t)&STACK[0x830], (_QWORD *)STACK[0x838]);
  sub_100144868(v10);
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100282118(uint64_t a1, uint64_t a2)
{
  if (sub_10003E27C(a2, (uint64_t)&off_1008111A8))
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100282154()
{
  return &off_1008111A8;
}

id sub_100282160(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "didReceiveNewSolution:", a1 + 40);
}

uint64_t sub_100282170(uint64_t a1)
{

  return a1;
}

void sub_100282198(uint64_t a1)
{

  operator delete();
}

_QWORD *sub_1002821D0(uint64_t a1)
{
  _QWORD *v2;

  v2 = operator new(0x10uLL);
  *v2 = off_1008111C8;
  v2[1] = *(id *)(a1 + 8);
  return v2;
}

id sub_100282214(uint64_t a1, _QWORD *a2)
{
  id result;

  *a2 = off_1008111C8;
  result = *(id *)(a1 + 8);
  a2[1] = result;
  return result;
}

void sub_100282248(uint64_t a1)
{

}

void sub_100282250(id *a1)
{

  operator delete(a1);
}

void sub_100282278(uint64_t a1, _QWORD *a2, __int16 *a3)
{
  std::__shared_weak_count *v5;
  uint64_t v6;
  NSObject *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  _QWORD block[5];
  __int16 v11;
  void *__p;
  void *v13;
  uint64_t v14;
  __int128 v15;
  __int16 v16;
  void *v17;
  _BYTE *v18;
  uint64_t v19;
  __int128 v20;

  v5 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  v16 = *a3;
  v18 = 0;
  v19 = 0;
  v17 = 0;
  sub_1001530EC(&v17, *((const void **)a3 + 1), *((_QWORD *)a3 + 2), *((_QWORD *)a3 + 2) - *((_QWORD *)a3 + 1));
  v20 = *((_OWORD *)a3 + 2);
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(NSObject **)(v6 + 56);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3321888768;
  block[2] = sub_100282444;
  block[3] = &unk_10080C670;
  block[4] = v6;
  v11 = v16;
  __p = 0;
  v13 = 0;
  v14 = 0;
  sub_1001530EC(&__p, v17, (uint64_t)v18, v18 - (_BYTE *)v17);
  v15 = v20;
  dispatch_async(v7, block);
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
  if (v17)
  {
    v18 = v17;
    operator delete(v17);
  }
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_1002823A4(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  uint64_t v2;
  void *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v4 = *(void **)(v2 - 72);
  if (v4)
  {
    *(_QWORD *)(v2 - 64) = v4;
    operator delete(v4);
  }
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002823FC(uint64_t a1, uint64_t a2)
{
  if (sub_10003E27C(a2, (uint64_t)&off_100811228))
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100282438()
{
  return &off_100811228;
}

id sub_100282444(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "didReceiveRemoteData:", a1 + 40);
}

uint64_t sub_100282454(uint64_t a1)
{

  return a1;
}

void sub_10028247C(uint64_t a1)
{

  operator delete();
}

_QWORD *sub_1002824B4(uint64_t a1)
{
  _QWORD *v2;

  v2 = operator new(0x10uLL);
  *v2 = off_100811248;
  v2[1] = *(id *)(a1 + 8);
  return v2;
}

id sub_1002824F8(uint64_t a1, _QWORD *a2)
{
  id result;

  *a2 = off_100811248;
  result = *(id *)(a1 + 8);
  a2[1] = result;
  return result;
}

void sub_10028252C(uint64_t a1)
{

}

void sub_100282534(id *a1)
{

  operator delete(a1);
}

void sub_10028255C(uint64_t a1, _QWORD *a2, int *a3)
{
  std::__shared_weak_count *v3;
  int v4;
  uint64_t v5;
  NSObject *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v9[5];
  int v10;

  v3 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  v4 = *a3;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(NSObject **)(v5 + 56);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_100282648;
  v9[3] = &unk_10080B978;
  v9[4] = v5;
  v10 = v4;
  dispatch_async(v6, v9);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

uint64_t sub_100282600(uint64_t a1, uint64_t a2)
{
  if (sub_10003E27C(a2, (uint64_t)&off_1008112A8))
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_10028263C()
{
  return &off_1008112A8;
}

id sub_100282648(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_nbammsSessionInvalidatedWithReason:", *(unsigned int *)(a1 + 40));
}

uint64_t sub_100282658(uint64_t a1)
{

  return a1;
}

void sub_100282680(uint64_t a1)
{

  operator delete();
}

_QWORD *sub_1002826B8(uint64_t a1)
{
  _QWORD *v2;

  v2 = operator new(0x10uLL);
  *v2 = off_1008112C8;
  v2[1] = *(id *)(a1 + 8);
  return v2;
}

id sub_1002826FC(uint64_t a1, _QWORD *a2)
{
  id result;

  *a2 = off_1008112C8;
  result = *(id *)(a1 + 8);
  a2[1] = result;
  return result;
}

void sub_100282730(uint64_t a1)
{

}

void sub_100282738(id *a1)
{

  operator delete(a1);
}

void sub_100282760(uint64_t a1, _QWORD *a2, __int128 *a3)
{
  std::__shared_weak_count *v5;
  __int128 v6;
  NSObject *v7;
  uint64_t v8;
  NSObject *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  _QWORD v12[5];
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[560];
  _BYTE v17[16];
  _QWORD *v18[16];
  char v19;
  __n128 v20[4];
  void *__p;
  void *v22;
  char v23;
  _BYTE v24[545];
  __int128 v25;
  __int128 v26;
  __int128 v27;
  _BYTE v28[560];
  _BYTE v29[16];
  _QWORD *v30[16];
  char v31;
  __n128 v32[4];
  void *v33;
  void *v34;
  char v35;
  _BYTE v36[545];

  v5 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  v6 = a3[1];
  v25 = *a3;
  v26 = v6;
  v27 = a3[2];
  sub_10015A39C(v28, (uint64_t)(a3 + 3));
  sub_100153F08(v29, (uint64_t)(a3 + 38));
  sub_10015A3F0(v32, (__n128 *)((char *)a3 + 760));
  memcpy(v36, a3 + 55, sizeof(v36));
  v7 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v12[0]) = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#peer-nba,Registering unsuccessfulRangingCallback.", (uint8_t *)v12, 2u);
  }
  v12[1] = 3321888768;
  v13 = v25;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(NSObject **)(v8 + 56);
  v12[0] = _NSConcreteStackBlock;
  v12[2] = sub_100282ADC;
  v12[3] = &unk_10080C5A8;
  v12[4] = v8;
  v14 = v26;
  v15 = v27;
  sub_10015A39C(v16, (uint64_t)v28);
  sub_100153F08(v17, (uint64_t)v29);
  sub_10015A3F0(v20, v32);
  memcpy(v24, v36, sizeof(v24));
  dispatch_async(v9, v12);
  if (v23 && __p)
  {
    v22 = __p;
    operator delete(__p);
  }
  if (v19)
    sub_10003E3F0((uint64_t)v18, v18[1]);
  sub_100144868((uint64_t)v16);
  if (v35 && v33)
  {
    v34 = v33;
    operator delete(v33);
  }
  if (v31)
    sub_10003E3F0((uint64_t)v30, v30[1]);
  sub_100144868((uint64_t)v28);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_1002829C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__shared_weak_count *v9;
  uint64_t v10;
  uint64_t v11;
  void *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;

  if (LOBYTE(STACK[0x318]))
    sub_1003E3FFC((uint64_t)&a9);
  sub_100144868(v11);
  if (LOBYTE(STACK[0x928]))
  {
    v13 = (void *)STACK[0x900];
    if (STACK[0x900])
    {
      STACK[0x908] = (unint64_t)v13;
      operator delete(v13);
    }
  }
  if (LOBYTE(STACK[0x8B0]))
    sub_10003E3F0((uint64_t)&STACK[0x830], (_QWORD *)STACK[0x838]);
  sub_100144868(v10);
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100282A94(uint64_t a1, uint64_t a2)
{
  if (sub_10003E27C(a2, (uint64_t)&off_100811328))
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100282AD0()
{
  return &off_100811328;
}

id sub_100282ADC(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "didReceiveUnsuccessfulSolution:", a1 + 40);
}

void sub_100282AEC()
{
  void *v0;
  _OWORD *v6;
  _OWORD *v7;
  __int128 v8;
  unint64_t v9;
  __int128 v10;
  uint64_t v11;

  v0 = objc_autoreleasePoolPush();
  v10 = xmmword_100474A40;
  v11 = 0x300000003;
  sub_100182284((uint64_t)&unk_10085AE88, (int *)&v10, 3);
  xmmword_10085AEA0 = xmmword_10046E050;
  *(_OWORD *)algn_10085AEB0 = xmmword_10046E060;
  qword_10085AEC8 = 0;
  unk_10085AED0 = 0;
  qword_10085AEC0 = 0x3FD999999999999ALL;
  unk_10085AED8 = xmmword_10046E070;
  dword_10085AEE8 = 5;
  qword_10085AEF0 = 0x4000000000000000;
  dword_10085AEF8 = 5;
  byte_10085AF00 = 0;
  *(_QWORD *)&algn_10085AF01[3] = 0x30000000ALL;
  xmmword_10085AF10 = xmmword_10046E080;
  unk_10085AF20 = xmmword_10046E090;
  xmmword_10085AF30 = xmmword_10046E0A0;
  qword_10085AF40 = 0x3FE3333333333333;
  dword_10085AF48 = 3;
  xmmword_10085AF50 = xmmword_10046E0B0;
  unk_10085AF60 = xmmword_10046E090;
  xmmword_10085AF70 = xmmword_10046E080;
  qword_10085AF80 = 0x3FE3333333333333;
  byte_10085AF88 = 0;
  xmmword_10085AF90 = xmmword_10046E0C0;
  unk_10085AFA0 = xmmword_10046E0D0;
  __asm { FMOV            V0.2D, #1.0 }
  v8 = _Q0;
  xmmword_10085AFB0 = _Q0;
  qword_10085AFC0 = 0xBFD3333333333333;
  xmmword_10085AFC8 = xmmword_10046E0E0;
  qword_10085AFD8 = 0x3E99999A40000000;
  xmmword_10085AFE0 = xmmword_10046E060;
  qword_10085AFF8 = 0;
  unk_10085B000 = 0;
  qword_10085AFF0 = 0x3FD999999999999ALL;
  xmmword_10085B008 = xmmword_10046E070;
  dword_10085B018 = 5;
  qword_10085B020 = 0x4000000000000000;
  dword_10085B028 = 4;
  qword_10085B030 = 0x300000008;
  qword_10085B038 = 0xC04E800000000000;
  v9 = 0xC04E800000000000;
  sub_10018252C((uint64_t)&unk_10085B040, (double *)&v9, 1);
  xmmword_10085B058 = xmmword_10046E0F0;
  qword_10085B068 = 0x4024000000000000;
  dword_10085B070 = 45;
  byte_10085B074 = 0;
  dword_10085B078 = 1;
  byte_10085B080 = 1;
  xmmword_10085B088 = xmmword_10046E100;
  unk_10085B098 = xmmword_10046E110;
  xmmword_10085B0A8 = v8;
  qword_10085B0B8 = 0xC059000000000000;
  xmmword_10085B0C0 = xmmword_10046E120;
  qword_10085B0D0 = (uint64_t)vdup_n_s32(0x3DCCCCCDu);
  xmmword_10085B0D8 = xmmword_10046E060;
  qword_10085B0E8 = 0x3FD999999999999ALL;
  qword_10085B0F8 = 0;
  qword_10085B0F0 = 0;
  xmmword_10085B100 = xmmword_10046E070;
  dword_10085B110 = 5;
  qword_10085B118 = 0x4000000000000000;
  dword_10085B120 = 10;
  qword_10085B128 = 0x4034000000000000;
  dword_10085B130 = 3;
  xmmword_10085B138 = xmmword_10046E130;
  __cxa_atexit((void (*)(void *))sub_100180704, &unk_10085AE88, (void *)&_mh_execute_header);
  qword_10085B150 = 0;
  unk_10085B158 = 0;
  qword_10085B148 = 0;
  v6 = operator new(0x40uLL);
  qword_10085B150 = (uint64_t)(v6 + 4);
  unk_10085B158 = v6 + 4;
  *v6 = xmmword_100474A58;
  v6[1] = unk_100474A68;
  v6[2] = xmmword_100474A78;
  v6[3] = unk_100474A88;
  qword_10085B148 = (uint64_t)v6;
  __cxa_atexit((void (*)(void *))sub_1000325D8, &qword_10085B148, (void *)&_mh_execute_header);
  qword_10085B168 = 0;
  unk_10085B170 = 0;
  qword_10085B160 = 0;
  v7 = operator new(0x10uLL);
  qword_10085B168 = (uint64_t)(v7 + 1);
  unk_10085B170 = v7 + 1;
  *v7 = xmmword_100474A98;
  qword_10085B160 = (uint64_t)v7;
  __cxa_atexit((void (*)(void *))sub_1000325D8, &qword_10085B160, (void *)&_mh_execute_header);
  objc_autoreleasePoolPop(v0);
}

void sub_100282E44(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10003E3F0(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_100282F74(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_100282FDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)PRNarrowbandSARManager;
  -[_Unwind_Exception dealloc](&a9, "dealloc");
  _Unwind_Resume(a1);
}

void sub_1002830A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_100283260(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id sub_100283280(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "initNarrowbandSARListner");
  return _objc_msgSend(*(id *)(a1 + 32), "updateSARStateIfRequired");
}

void sub_100283314(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  void *v4;
  uint64_t v5;
  void *v6;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(void **)(v1 + 16);
  if (v2)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[AVAudioSession sharedInstance](AVAudioSession, "sharedInstance"));
    objc_msgSend(v2, "removeObserver:name:object:", v1, AVAudioSessionRouteChangeNotification, v4);

    v5 = *(_QWORD *)(a1 + 32);
    v6 = *(void **)(v5 + 16);
    *(_QWORD *)(v5 + 16) = 0;

  }
}

void sub_1002833A4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id sub_10028340C(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "updateSARStateIfRequired");
}

void sub_10028357C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_100283888(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

void sub_100283A20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  void *v24;

  if (a24 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

_QWORD *sub_100283AD0(uint64_t a1)
{
  uint64_t v2;
  _QWORD *result;
  unsigned int v4;
  NSObject *v5;
  void **v6;
  void *__p[2];
  char v8;
  uint8_t buf[4];
  void **v10;
  __int16 v11;
  unsigned int v12;

  v2 = *(_QWORD *)(a1 + 32);
  *(_DWORD *)(v2 + 28) = *(_DWORD *)(a1 + 40);
  *(_BYTE *)(v2 + 32) = 1;
  result = *(_QWORD **)(a1 + 32);
  if (result[5])
  {
    v4 = objc_msgSend(result, "nbSARStateToSARIndex:", *(unsigned int *)(a1 + 40));
    v5 = (id)qword_10085B178;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      sub_10000BF04(__p, (&off_100811430)[*(int *)(a1 + 40)]);
      if (v8 >= 0)
        v6 = __p;
      else
        v6 = (void **)__p[0];
      *(_DWORD *)buf = 136315394;
      v10 = v6;
      v11 = 1024;
      v12 = v4;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#nb-sar,injecting SAR state: %s, index: %u", buf, 0x12u);
      if (v8 < 0)
        operator delete(__p[0]);
    }

    return (_QWORD *)(*(uint64_t (**)(void))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 40) + 16))();
  }
  return result;
}

void sub_100283C04(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_100283C78(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  void **v4;
  void *__p[2];
  char v6;
  uint8_t buf[4];
  void **v8;

  v1 = result;
  v2 = *(_QWORD *)(result + 32);
  if (*(_BYTE *)(v2 + 32))
  {
    *(_BYTE *)(v2 + 32) = 0;
    v2 = *(_QWORD *)(result + 32);
  }
  if (*(_QWORD *)(v2 + 40))
  {
    v3 = (id)qword_10085B178;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      sub_10000BF04(__p, (&off_100811430)[*(int *)(*(_QWORD *)(v1 + 32) + 36)]);
      if (v6 >= 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      *(_DWORD *)buf = 136315138;
      v8 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#nb-sar,reseting SAR state override. state: %s", buf, 0xCu);
      if (v6 < 0)
        operator delete(__p[0]);
    }

    return (*(uint64_t (**)(_QWORD, id))(*(_QWORD *)(*(_QWORD *)(v1 + 32) + 40) + 16))(*(_QWORD *)(*(_QWORD *)(v1 + 32) + 40), objc_msgSend(*(id *)(v1 + 32), "nbSARStateToSARIndex:", *(unsigned int *)(*(_QWORD *)(v1 + 32) + 36)));
  }
  return result;
}

void sub_100283DA4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100283E40()
{
  void *v0;

  v0 = objc_autoreleasePoolPush();
  qword_10085B178 = (uint64_t)os_log_create("com.apple.nearbyd", "Regulatory");
  objc_autoreleasePoolPop(v0);
}

void sub_100283F64(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_100284084(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1002841A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_100284204(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100284254(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100284378(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_10028445C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002844EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_10028472C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1002848A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1002849BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

_QWORD *sub_100284A9C@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, off_1008118F8[a1]);
}

_QWORD *sub_100284AB0@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, off_100811950[a1]);
}

_QWORD *sub_100284AC4@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, off_100811998[a1]);
}

_QWORD *sub_100284AD8@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, off_1008119B8[a1]);
}

uint64_t sub_100284AEC(uint64_t a1)
{
  void *v2;

  v2 = *(void **)a1;
  if (v2)
  {
    *(_QWORD *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_100284B1C(uint64_t a1)
{
  void *v2;

  std::mutex::~mutex((std::mutex *)(a1 + 32));
  v2 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_100284C14(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_100284DF8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_100284FF8(id a1)
{
  id v1;
  void *v2;

  v1 = -[NIServerNearbyAccessoryRangingService _initInternal]([NIServerNearbyAccessoryRangingService alloc], "_initInternal");
  v2 = (void *)qword_10085B4B0;
  qword_10085B4B0 = (uint64_t)v1;

}

uint64_t sub_100285178(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_100285188(uint64_t a1)
{

}

void sub_100285190(uint64_t a1)
{
  void *v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  id v7;
  id v8;
  void *v9;
  id v10;
  size_t v11;
  uint64_t v12;
  unsigned int v13;
  _BOOL4 v14;
  _BOOL4 v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  BOOL v19;
  int v20;
  int v21;
  int v22;
  void *v23;
  uint64_t v24;
  void *v25;
  unint64_t v26;
  AccessoryServiceClientTracking *v27;
  void *v28;
  void *v29;
  void *v30;
  _BOOL4 v31;
  AccessoryUwbSessionTracking *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  NSObject *v39;
  unsigned int v40;
  NSObject *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  NSObject *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  void *v53;
  id v54;
  void *v55;
  NSObject *v56;
  void *v57;
  id v58;
  AccessoryUwbSessionTracking *v59;
  NSObject *v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  NSObject *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  __int16 v70;
  id v71;
  void *__p;
  _BYTE *v73;
  uint64_t v74;
  NSErrorUserInfoKey v75;
  const __CFString *v76;
  NSErrorUserInfoKey v77;
  const __CFString *v78;
  _BYTE v79[112];
  char v80;
  uint8_t buf[4];
  _BYTE v82[35];
  char v83;
  NSErrorUserInfoKey v84;
  const __CFString *v85;
  NSErrorUserInfoKey v86;
  const __CFString *v87;
  int v88;
  uint64_t v89;
  int v90;
  int v91;
  _BYTE v92[19];
  char v93;

  if (*(_QWORD *)(a1 + 32))
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 16), "objectForKey:"));

    if (!v2)
    {
      v3 = (id)qword_10085F520;
      if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
      {
        v4 = *(_QWORD *)(a1 + 48);
        v5 = *(_QWORD *)(a1 + 32);
        v6 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 16), "count");
        *(_DWORD *)buf = 138412802;
        *(_QWORD *)v82 = v5;
        *(_WORD *)&v82[8] = 2112;
        *(_QWORD *)&v82[10] = v4;
        *(_WORD *)&v82[18] = 1024;
        *(_DWORD *)&v82[20] = v6;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#accessory-service,Add client %@ for process %@ (%d previous clients)", buf, 0x1Cu);
      }

      v7 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "accessoryConfigData")));
      v8 = objc_msgSend(v7, "bytes");

      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "accessoryConfigData"));
      v10 = objc_msgSend(v9, "length");
      __p = 0;
      v73 = 0;
      v74 = 0;
      sub_10003A474(&__p, v8, (uint64_t)v10 + (_QWORD)v8, (size_t)v10);

      v11 = v73 - (_BYTE *)__p;
      if ((unint64_t)(v73 - (_BYTE *)__p) > 0x13)
      {
        v12 = 0;
        v13 = *(unsigned __int16 *)__p;
        v14 = !*((_WORD *)__p + 1) && v13 == 1;
        v15 = *((_WORD *)__p + 1) && v13 == 1;
        v16 = *((unsigned __int16 *)__p + 8);
        v17 = *((unsigned __int16 *)__p + 9);
        do
        {
          if (__PAIR64__(v17, v16) == __PAIR64__((unsigned __int16)word_100475038[v12 + 1], (unsigned __int16)word_100475038[v12]))
          {
            v18 = 1;
            goto LABEL_17;
          }
          v12 += 2;
        }
        while (v12 != 6);
        v18 = 0;
LABEL_17:
        v19 = v16 == 1 && v17 > 2;
        v20 = v19;
        v21 = v16 <= 1 ? v20 : 1;
        v22 = v13 > 1 || v14;
        if (((v22 | v15) & 1) != 0 && ((v18 | v21) & 1) != 0)
        {
          if (v18)
          {
            if (v16 != 1 || v17 >= 3)
              __assert_rtn("UWBConfigDataTotalLengthBytes", "NIFiRaDefinitions.h", 375, "false");
            if (*((unsigned __int8 *)__p + 15) != (2 * v17 + 19) || v11 != 2 * v17 + 35)
              goto LABEL_49;
          }
          else if (v21)
          {
            if (*((unsigned __int8 *)__p + 15) <= 0x16u || v11 <= 0x26)
              goto LABEL_49;
            v11 = 39;
          }
          else
          {
            v11 = 0;
          }
          *(_DWORD *)buf = 0;
          *(_DWORD *)&v82[12] = 0;
          *(_DWORD *)&v82[31] = 0;
          *(_QWORD *)&v82[1] = 0;
          *(_WORD *)&v82[9] = 0;
          memcpy(buf, __p, v11);
          if (v82[0] <= 0x14u
            && ((1 << v82[0]) & 0x100401) != 0
            && v82[28] <= 1u
            && v82[33] < 2u
            && v82[34] <= 8u
            && ((1 << v82[34]) & 0x10D) != 0)
          {
            v89 = *(_QWORD *)v82;
            v88 = *(_DWORD *)buf;
            v90 = *(_DWORD *)&v82[8];
            v91 = *(_DWORD *)&v82[12];
            *(_OWORD *)v92 = *(_OWORD *)&v82[16];
            *(_DWORD *)&v92[15] = *(_DWORD *)&v82[31];
            v93 = 1;
            goto LABEL_50;
          }
        }
      }
LABEL_49:
      LOBYTE(v88) = 0;
      v93 = 0;
      if ((objc_msgSend(*(id *)(a1 + 56), "dataExchangeDisabledAndUsingParameterOverrides") & 1) == 0)
      {
        v41 = qword_10085F520;
        if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
          sub_1003E416C(v41, v42, v43);
        v86 = NSLocalizedFailureReasonErrorKey;
        v87 = CFSTR("Add client fail - raw data could not be parsed");
        v27 = (AccessoryServiceClientTracking *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v87, &v86, 1));
        v44 = objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("com.apple.NearbyInteraction"), -5887, v27));
        v45 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8);
        v46 = *(void **)(v45 + 40);
        *(_QWORD *)(v45 + 40) = v44;

        goto LABEL_79;
      }
LABEL_50:
      v23 = *(void **)(a1 + 40);
      v24 = *(_QWORD *)(a1 + 48);
      v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "debugParameters"));
      v26 = (unint64_t)objc_msgSend(v23, "_generateUwbSessionIdForNewServiceClientWithProcessName:parsedAccessoryConfigData:debugParameters:", v24, &v88, v25);

      if ((v26 & 0xFF00000000) == 0)
      {
        v47 = qword_10085F520;
        if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
          sub_1003E4010(v47, v48, v49);
        v84 = NSLocalizedFailureReasonErrorKey;
        v85 = CFSTR("Add client fail - UWB session ID could not be generated");
        v27 = (AccessoryServiceClientTracking *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v85, &v84, 1));
        v50 = objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("com.apple.NearbyInteraction"), -5887, v27));
        v51 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8);
        v52 = *(void **)(v51 + 40);
        *(_QWORD *)(v51 + 40) = v50;

        goto LABEL_79;
      }
      v27 = -[AccessoryServiceClientTracking initWithNIConfiguration:parsedAccessoryConfigData:processName:uwbSessionId:]([AccessoryServiceClientTracking alloc], "initWithNIConfiguration:parsedAccessoryConfigData:processName:uwbSessionId:", *(_QWORD *)(a1 + 56), &v88, *(_QWORD *)(a1 + 48), v26);
      v28 = *(void **)(*(_QWORD *)(a1 + 40) + 32);
      v29 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", -[AccessoryServiceClientTracking uwbSessionId](v27, "uwbSessionId")));
      v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v28, "objectForKey:", v29));
      v31 = v30 == 0;

      if (!v31)
      {
        v32 = 0;
LABEL_53:
        objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 16), "setObject:forKey:", *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 32));
        objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 24), "setObject:forKey:", v27, *(_QWORD *)(a1 + 32));
        if (v32)
        {
          v33 = *(void **)(*(_QWORD *)(a1 + 40) + 32);
          v34 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", -[AccessoryServiceClientTracking uwbSessionId](v27, "uwbSessionId")));
          objc_msgSend(v33, "setObject:forKey:", v32, v34);

        }
        v35 = *(void **)(*(_QWORD *)(a1 + 40) + 32);
        v36 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", -[AccessoryServiceClientTracking uwbSessionId](v27, "uwbSessionId")));
        v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v35, "objectForKey:", v36));
        v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v37, "interestedClients"));
        objc_msgSend(v38, "addObject:", *(_QWORD *)(a1 + 32));

        objc_msgSend(*(id *)(a1 + 40), "_updateUwbSessionState:", -[AccessoryServiceClientTracking uwbSessionId](v27, "uwbSessionId"));
        v39 = (id)qword_10085F520;
        if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
        {
          v40 = -[AccessoryServiceClientTracking uwbSessionId](v27, "uwbSessionId");
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)v82 = v40;
          _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "#accessory-service,Add client successful. UWB session ID %u", buf, 8u);
        }

        goto LABEL_79;
      }
      buf[0] = 0;
      v83 = 0;
      v79[0] = 0;
      v80 = 0;
      v53 = *(void **)(a1 + 40);
      v71 = 0;
      objc_msgSend(v53, "_prepareUwbSessionTrackingObjectsForClientTracking:outServiceRequest:outStartOptions:outShareableConfigData:", v27, buf, v79, &v71);
      v54 = v71;
      v55 = v54;
      if (v83)
      {
        if (v80)
        {
          if (!v54)
          {
            v56 = qword_10085F520;
            if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
            {
              v70 = 0;
              _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_DEFAULT, "#accessory-service,Add client - no shareable config data generated. This is only valid when data exchange is disabled", (uint8_t *)&v70, 2u);
            }
          }
          v57 = (void *)objc_claimAutoreleasedReturnValue(-[AccessoryServiceClientTracking niConfiguration](v27, "niConfiguration"));
          v58 = objc_msgSend(v57, "backgroundMode");

          v59 = [AccessoryUwbSessionTracking alloc];
          if (!v83 || !v80)
            sub_10000BA44();
          v32 = -[AccessoryUwbSessionTracking initWithServiceRequest:startOptions:shareableConfigData:processName:accessoryConfigData:persistWhileDetached:](v59, "initWithServiceRequest:startOptions:shareableConfigData:processName:accessoryConfigData:persistWhileDetached:", buf, v79, v55, *(_QWORD *)(a1 + 48), -[AccessoryServiceClientTracking parsedAccessoryConfigData](v27, "parsedAccessoryConfigData"), v58 != 0);

          goto LABEL_53;
        }
        v65 = qword_10085F520;
        if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
          sub_1003E40F8(v65, v66, v67);
        v75 = NSLocalizedFailureReasonErrorKey;
        v76 = CFSTR("Add client fail - ranging start options could not be generated");
        v63 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v76, &v75, 1));
        v64 = objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("com.apple.NearbyInteraction"), -5887, v63));
      }
      else
      {
        v60 = qword_10085F520;
        if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
          sub_1003E4084(v60, v61, v62);
        v77 = NSLocalizedFailureReasonErrorKey;
        v78 = CFSTR("Add client fail - ranging service request could not be generated");
        v63 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v78, &v77, 1));
        v64 = objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("com.apple.NearbyInteraction"), -5887, v63));
      }
      v68 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8);
      v69 = *(void **)(v68 + 40);
      *(_QWORD *)(v68 + 40) = v64;

LABEL_79:
      if (__p)
      {
        v73 = __p;
        operator delete(__p);
      }
    }
  }
}

void sub_100285A30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  void *v12;
  void *v13;
  void *v14;

  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_100285BE0(uint64_t a1)
{
  void *v2;
  NSObject *v3;
  uint64_t v4;
  void *v5;
  unsigned int v6;
  unsigned int v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  int v12;
  uint64_t v13;
  __int16 v14;
  void *v15;
  __int16 v16;
  unsigned int v17;
  __int16 v18;
  unsigned int v19;

  if (*(_QWORD *)(a1 + 32))
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 24), "objectForKey:"));
    if (v2)
    {
      v3 = (id)qword_10085F520;
      if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
      {
        v4 = *(_QWORD *)(a1 + 32);
        v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "processName"));
        v6 = objc_msgSend(v2, "uwbSessionId");
        v7 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 16), "count");
        v12 = 138413058;
        v13 = v4;
        v14 = 2112;
        v15 = v5;
        v16 = 1024;
        v17 = v6;
        v18 = 1024;
        v19 = v7;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#accessory-service,Remove client %@ for process %@ tracking UWB session ID %u (%d clients before removal)", (uint8_t *)&v12, 0x22u);

      }
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 16), "removeObjectForKey:", *(_QWORD *)(a1 + 32));
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 24), "removeObjectForKey:", *(_QWORD *)(a1 + 32));
      v8 = *(void **)(*(_QWORD *)(a1 + 40) + 32);
      v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", objc_msgSend(v2, "uwbSessionId")));
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "objectForKey:", v9));
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "interestedClients"));
      objc_msgSend(v11, "removeObject:", *(_QWORD *)(a1 + 32));

      objc_msgSend(*(id *)(a1 + 40), "_updateUwbSessionState:", objc_msgSend(v2, "uwbSessionId"));
      objc_msgSend(*(id *)(a1 + 40), "_cleanupExcessiveDetachedSessions");
    }

  }
}

void sub_100285DA4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_100285E84(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  BOOL v6;
  NSObject *v7;
  uint64_t v8;
  void *v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  int v17;
  uint64_t v18;
  __int16 v19;
  void *v20;
  __int16 v21;
  unsigned int v22;
  __int16 v23;
  unsigned int v24;
  __int16 v25;
  int v26;

  if (*(_QWORD *)(a1 + 32))
  {
    v2 = a1 + 40;
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 16), "objectForKey:"));
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)v2 + 24), "objectForKey:", *(_QWORD *)(a1 + 32)));
    v5 = v4;
    if (v3)
      v6 = v4 == 0;
    else
      v6 = 1;
    if (!v6 && *(unsigned __int8 *)(a1 + 48) != objc_msgSend(v4, "isRunning"))
    {
      v7 = (id)qword_10085F520;
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        v8 = *(_QWORD *)(a1 + 32);
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "processName"));
        v10 = objc_msgSend(v5, "uwbSessionId");
        v11 = objc_msgSend(v5, "isRunning");
        v12 = *(unsigned __int8 *)(a1 + 48);
        v17 = 138413314;
        v18 = v8;
        v19 = 2112;
        v20 = v9;
        v21 = 1024;
        v22 = v10;
        v23 = 1024;
        v24 = v11;
        v25 = 1024;
        v26 = v12;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#accessory-service,Client %@ for process %@ UWB session ID %u, was running: %d, is now running: %d", (uint8_t *)&v17, 0x28u);

      }
      objc_msgSend(v5, "setIsRunning:", *(unsigned __int8 *)(a1 + 48));
      objc_msgSend(*(id *)(a1 + 40), "_updateUwbSessionState:", objc_msgSend(v5, "uwbSessionId"));
      if (objc_msgSend(v5, "isRunning"))
      {
        v13 = *(void **)(*(_QWORD *)(a1 + 40) + 32);
        v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", objc_msgSend(v5, "uwbSessionId")));
        v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "objectForKeyedSubscript:", v14));
        v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "shareableConfigData"));

        if (v16)
          objc_msgSend(v3, "serviceDidGenerateShareableConfigurationData:", v16);

      }
    }

  }
}

void sub_100286094(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1002861AC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_internalPrintableState"));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_100286398(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,id a26)
{
  void *v26;

  _Block_object_dispose(&a21, 8);
  _Unwind_Resume(a1);
}

void sub_1002863CC(uint64_t a1, void *a2, void *a3)
{
  id v5;
  _BYTE *v6;
  int v7;
  const char *v8;
  const char *v9;
  char *v10;
  _BYTE *v11;
  _BYTE *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void **v23;
  void *v24;
  void *v25;
  id v26;
  void *v27;
  void *v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  id v33;
  __int128 v34;
  uint64_t v35;
  void *__p[2];
  uint64_t v37;

  v33 = a2;
  v5 = a3;
  sub_10000BF04(__p, "Unspecified");
  if (*((_BYTE *)objc_msgSend(v5, "parsedAccessoryConfigData") + 39))
  {
    v6 = objc_msgSend(v5, "parsedAccessoryConfigData");
    if (!v6[39])
      sub_10000BA44();
    v7 = v6[4];
    v8 = "UserInteractive";
    v9 = "Unknown";
    if (v7 == 10)
      v9 = "Background";
    if (v7 != 20)
      v8 = v9;
    if (v6[4])
      v10 = (char *)v8;
    else
      v10 = "Automatic";
    sub_10000BF04(&v34, v10);
    if (SHIBYTE(v37) < 0)
      operator delete(__p[0]);
    *(_OWORD *)__p = v34;
    v37 = v35;
    v11 = objc_msgSend(v5, "parsedAccessoryConfigData");
    if (!v11[39] || (v32 = *(_DWORD *)v11, v12 = objc_msgSend(v5, "parsedAccessoryConfigData"), !v12[39]))
      sub_10000BA44();
    v31 = HIWORD(v32);
    v29 = *((_DWORD *)v12 + 4);
    v30 = HIWORD(v29);
  }
  else
  {
    v30 = 0;
    v31 = 0;
    LOWORD(v32) = 0;
    LOWORD(v29) = 0;
  }
  v13 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("    [%@]"), v33));
  objc_msgSend(v13, "addObject:", v14);

  v15 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "processName"));
  v17 = objc_msgSend(v5, "uwbSessionId");
  v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "niConfiguration"));
  v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "accessoryDiscoveryToken"));
  v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "descriptionInternal"));
  v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("        Process: %@. UWB session ID: %u. Token: %@. Running: %d"), v16, v17, v20, objc_msgSend(v5, "isRunning")));
  objc_msgSend(v15, "addObject:", v21);

  v22 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  if (v37 >= 0)
    v23 = __p;
  else
    v23 = (void **)__p[0];
  v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "niConfiguration"));
  v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "accessoryConfigData"));
  v26 = sub_10002D250(v25, 0);
  v27 = (void *)objc_claimAutoreleasedReturnValue(v26);
  v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("        Versions: [accessory %d.%d, UWB %d.%d]. Rate: %s. Blob: %@"), (unsigned __int16)v32, v31, (unsigned __int16)v29, v30, v23, v27));
  objc_msgSend(v22, "addObject:", v28);

  if (SHIBYTE(v37) < 0)
    operator delete(__p[0]);

}

void sub_1002866C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;

  if (a28 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_10028674C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void **v6;
  id v7;
  uint64_t v8;
  _BYTE *v9;
  unsigned __int8 v10;
  unsigned __int8 *v11;
  int v12;
  unsigned int v13;
  _BYTE *v14;
  uint64_t v15;
  unsigned __int8 v16;
  _QWORD *v17;
  uint64_t v18;
  unsigned __int8 *v19;
  int v20;
  int v21;
  unsigned __int8 *v22;
  int v23;
  int v24;
  _BYTE *v25;
  int v26;
  int v27;
  int v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  id v34;
  id v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  void *v41;
  void *v42;
  int v43;
  char *v44;
  void **v45;
  _QWORD *v46;
  uint64_t v47;
  void *v48;
  int v49;
  int v50;
  id v51;
  void *v52;
  __CFString *v53;
  void *__p[2];
  char v55;

  v51 = a2;
  v5 = a3;
  sub_100284AB0(*((_DWORD *)objc_msgSend(v5, "serviceRequest") + 1), __p);
  if (v55 >= 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  v52 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableString stringWithUTF8String:](NSMutableString, "stringWithUTF8String:", v6));
  if (v55 < 0)
    operator delete(__p[0]);
  if (*(_QWORD *)objc_msgSend(v5, "rangingSession"))
  {
    v7 = objc_msgSend(v5, "rangingSession");
    if (*(_BYTE *)(*(_QWORD *)v7 + 682))
      v8 = *(unsigned __int16 *)(*(_QWORD *)v7 + 680);
    else
      v8 = 0;
    v53 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Ticket [%d]"), v8));
  }
  else
  {
    v53 = CFSTR("None");
  }
  if (*((_DWORD *)objc_msgSend(v5, "serviceRequest") + 1) == 6)
  {
    v9 = objc_msgSend(v5, "serviceRequest");
    if (v9[433])
      v10 = v9[432];
    else
      v10 = -1;
    v11 = (unsigned __int8 *)objc_msgSend(v5, "serviceRequest");
    v12 = v11[435];
    v13 = v11[434];
    v14 = objc_msgSend(v5, "serviceRequest");
    if (v12)
      v15 = v13;
    else
      v15 = 0;
    if (v14[437])
      v16 = v14[436];
    else
      v16 = 0;
    objc_msgSend(v52, "appendFormat:", CFSTR(" [type %d][cap %d to %d]"), v10, v15, v16);
  }
  else if (*((_DWORD *)objc_msgSend(v5, "serviceRequest") + 1) == 5)
  {
    v17 = objc_msgSend(v5, "serviceRequest");
    if (*((_BYTE *)v17 + 424))
      v18 = v17[52];
    else
      v18 = 0;
    objc_msgSend(v52, "appendFormat:", CFSTR(" [peer-addr %llu]"), v18);
  }
  v19 = (unsigned __int8 *)objc_msgSend(v5, "serviceRequest");
  v20 = v19[372];
  v21 = *((unsigned __int16 *)v19 + 185);
  v22 = (unsigned __int8 *)objc_msgSend(v5, "serviceRequest");
  v23 = v22[376];
  v24 = *((unsigned __int16 *)v22 + 187);
  v25 = objc_msgSend(v5, "serviceRequest");
  if (v20)
    v26 = v21;
  else
    v26 = 0;
  if (v23)
    v27 = v24;
  else
    v27 = 0;
  v49 = v27;
  v50 = v26;
  if (v25[380])
    v28 = *((unsigned __int16 *)v25 + 189);
  else
    v28 = 0;
  v29 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("    [%@]"), v51));
  objc_msgSend(v29, "addObject:", v30);

  v31 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "processName"));
  v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "interestedClients"));
  v34 = objc_msgSend(v33, "count");
  v35 = objc_msgSend(v5, "persistWhileDetached");
  v36 = *(double *)(a1 + 40);
  objc_msgSend(v5, "initTime");
  v38 = v37;
  v39 = *(double *)(a1 + 40);
  objc_msgSend(v5, "timeOfLatestSessionLifecycleChange");
  v41 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("        Process: %@. Clients: %d. Persist-detached: %d. Ranging: %@. Age: total %.2f s, in-state %.2f s"), v32, v34, v35, v53, v36 - v38, v39 - v40));
  objc_msgSend(v31, "addObject:", v41);

  v42 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  v43 = *((unsigned __int8 *)objc_msgSend(v5, "serviceRequest") + 1);
  if (v43 == 100)
  {
    v44 = "Unspecified";
  }
  else if (v43 == 1)
  {
    v44 = "Responder";
  }
  else
  {
    v44 = "Initiator";
  }
  v45 = __p;
  sub_10000BF04(__p, v44);
  if (v55 < 0)
    v45 = (void **)__p[0];
  v46 = objc_msgSend(v5, "serviceRequest");
  if (*((_BYTE *)v46 + 408))
    v47 = v46[50];
  else
    v47 = 0;
  v48 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("        Role: %s. Mode: %@. Local-addr: %llu. Interval: %d ms. Job cfg options: 0x%X. Job timeouts: disc %d, reacq %d, track %d, job %d"), v45, v52, v47, (v49 * v50 * v28) / 0x4B0uLL, *((unsigned int *)objc_msgSend(v5, "serviceRequest") + 17), *((unsigned __int16 *)objc_msgSend(v5, "serviceRequest") + 36), *((unsigned __int16 *)objc_msgSend(v5, "serviceRequest") + 37), *((unsigned __int16 *)objc_msgSend(v5, "serviceRequest") + 38), *((unsigned __int16 *)objc_msgSend(v5, "serviceRequest") + 39)));
  objc_msgSend(v42, "addObject:", v48);

  if (v55 < 0)
    operator delete(__p[0]);

}

void sub_100286BA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,void *a21,void *a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  void *v28;

  _Unwind_Resume(a1);
}

void sub_100286DE0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

char *sub_100286E00(uint64_t a1)
{
  void *v1;
  char *v2;

  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_internalPrintableState"));
  v2 = sub_10002D668(CFSTR("Accessory Ranging Service"), v1);

  return v2;
}

void sub_100286E44(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100287334(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

uint64_t sub_100287400(uint64_t result, uint64_t a2)
{
  int v2;

  v2 = *(_DWORD *)(a2 + 48);
  *(_BYTE *)(result + 52) = *(_BYTE *)(a2 + 52);
  *(_DWORD *)(result + 48) = v2;
  return result;
}

void sub_100287418(uint64_t a1, void *a2, void *a3, _BYTE *a4)
{
  id v7;
  uint64_t v8;
  void *v9;
  unsigned int v10;
  uint64_t v11;
  id v12;

  v12 = a2;
  v7 = a3;
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  if (!*(_BYTE *)(v8 + 52))
    sub_10000BA44();
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(v8 + 48)));
  v10 = objc_msgSend(v12, "isEqualToNumber:", v9);

  if (v10)
  {
    v11 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    if (*(_BYTE *)(v11 + 52))
      *(_BYTE *)(v11 + 52) = 0;
    *a4 = 1;
  }

}

void sub_1002874D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1002874F4(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  int v3;
  int v4;
  void *v7;

  v3 = *(unsigned __int8 *)(a1 + 37);
  v4 = *(unsigned __int8 *)(a1 + 38);
  *a2 = 0;
  *a3 = 0;
  if (v3 == 1)
  {
    v7 = sub_100004784();
    if (sub_1003956D0((uint64_t)v7))
    {
      *a2 = 1;
    }
    else if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
    {
      sub_1003E4248();
    }
    if (v4 == 3)
    {
      if (+[NIPlatformInfo isInternalBuild](NIPlatformInfo, "isInternalBuild"))
      {
        *a2 = 0;
        *a3 = 1;
      }
    }
  }
}

void sub_100287598(uint64_t a1, void *a2, void *a3, _BYTE *a4)
{
  id v7;
  void *v8;
  void *v9;
  unsigned int v10;
  unsigned __int16 *v11;
  unsigned __int16 *v12;
  int v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  id v17;

  v17 = a2;
  v7 = a3;
  v8 = *(void **)(a1 + 32);
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "processName"));
  LOBYTE(v8) = objc_msgSend(v8, "isEqualToString:", v9);

  if ((v8 & 1) != 0)
  {
    if (*(_BYTE *)(a1 + 64))
    {
      if (*((_DWORD *)objc_msgSend(v7, "serviceRequest") + 1) != 6)
        goto LABEL_26;
      v10 = *((unsigned __int16 *)objc_msgSend(v7, "serviceRequest") + 216);
      if (v10 < 0x100)
        goto LABEL_26;
      if (*(_BYTE *)(a1 + 65))
      {
        if (v10 != 3)
          goto LABEL_26;
      }
      else if ((_BYTE)v10 && *(_BYTE *)(a1 + 66))
      {
        goto LABEL_26;
      }
    }
    else if (*((_DWORD *)objc_msgSend(v7, "serviceRequest") + 1) != 5)
    {
      goto LABEL_26;
    }
    if (*((_BYTE *)objc_msgSend(v7, "accessoryConfigData") + 39))
    {
      v11 = *(unsigned __int16 **)(a1 + 56);
      if (!*((_BYTE *)v11 + 39)
        || (v12 = (unsigned __int16 *)objc_msgSend(v7, "accessoryConfigData"), !*((_BYTE *)v12 + 39)))
      {
        sub_10000BA44();
      }
      if (*v11 == *v12
        && v11[1] == v12[1]
        && *((unsigned __int8 *)v11 + 4) == *((unsigned __int8 *)v12 + 4)
        && v11[8] == v12[8]
        && v11[9] == v12[9]
        && *((unsigned __int8 *)v11 + 32) == *((unsigned __int8 *)v12 + 32)
        && *((unsigned __int8 *)v11 + 37) == *((unsigned __int8 *)v12 + 37))
      {
        v13 = *((unsigned __int8 *)v11 + 38);
        v14 = *((unsigned __int8 *)v12 + 38);
        if (!*(_BYTE *)(a1 + 64) && v13 == v14)
        {
          v13 = *(unsigned __int16 *)((char *)v11 + 33);
          v14 = *(unsigned __int16 *)((char *)v12 + 33);
        }
        if (v13 == v14)
        {
          v15 = objc_msgSend(v17, "unsignedIntValue");
          v16 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
          *(_DWORD *)(v16 + 48) = v15;
          *(_BYTE *)(v16 + 52) = 1;
          *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = 1;
          *a4 = 1;
        }
      }
    }
  }
LABEL_26:

}

void sub_10028777C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_100288A88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,void *a23,void *a24,void *a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44,char a45)
{
  void *v45;
  void *v46;

  if (a44 < 0)
    operator delete(__p);
  sub_10001AE68((uint64_t)&a45);

  _Unwind_Resume(a1);
}

uint64_t sub_100288C80(int a1, char a2)
{
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = 0;
  if (a1 && (a2 & 1) == 0)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKey:", CFSTR("AccessoryCoordinateScheduling")));

    if (v4 && (v6 = objc_opt_class(NSNumber, v5), (objc_opt_isKindOfClass(v4, v6) & 1) != 0))
      v2 = (uint64_t)objc_msgSend(v4, "BOOLValue");
    else
      v2 = 1;

  }
  return v2;
}

void sub_100288D14(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_100288D30(uint64_t *a1)
{
  std::mutex *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (std::mutex *)(a1 + 4);
  std::mutex::lock((std::mutex *)(a1 + 4));
  v3 = *((int *)a1 + 6);
  *((_DWORD *)a1 + 6) = v3 + 1;
  v4 = *a1;
  if (v3 + 1 >= (unint64_t)((a1[1] - *a1) >> 1))
    *((_DWORD *)a1 + 6) = 0;
  v5 = *(unsigned __int16 *)(v4 + 2 * v3);
  std::mutex::unlock(v2);
  return v5;
}

void sub_100288D88(_OWORD *a1@<X8>)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  id v15;
  NSObject *v16;
  NSObject *v17;
  NSObject *v18;
  NSObject *v19;
  uint64_t i;
  char *v21;
  unint64_t v22;
  char v23;
  char v24;
  void *v25;
  void *v26;
  void *v27;
  NSObject *v28;
  int v29;
  void *v30;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectForKey:", CFSTR("NIAccessorySubratingOverrides_Subrate")));

  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKey:", CFSTR("NIAccessorySubratingOverrides_DistanceThreshold")));

  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKey:", CFSTR("NIAccessorySubratingOverrides_Hysteresis")));

  if (v3
    && v5
    && v7
    && (v9 = objc_opt_class(NSArray, v8), (objc_opt_isKindOfClass(v3, v9) & 1) != 0)
    && (v11 = objc_opt_class(NSArray, v10), (objc_opt_isKindOfClass(v5, v11) & 1) != 0)
    && (v13 = objc_opt_class(NSArray, v12), (objc_opt_isKindOfClass(v7, v13) & 1) != 0)
    && (v14 = objc_msgSend(v3, "count"), v14 == objc_msgSend(v5, "count"))
    && (v15 = objc_msgSend(v3, "count"), v15 == objc_msgSend(v7, "count")))
  {
    v16 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v29) = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "#accessory-service,Prep session objects: Overriding subrating parameters", (uint8_t *)&v29, 2u);
    }
    v17 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
    {
      v29 = 138412290;
      v30 = v3;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "#accessory-service,Prep session objects: Overrides for subrate: %@", (uint8_t *)&v29, 0xCu);
    }
    v18 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
    {
      v29 = 138412290;
      v30 = v5;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "#accessory-service,Prep session objects: Overrides for distance threshold: %@", (uint8_t *)&v29, 0xCu);
    }
    v19 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
    {
      v29 = 138412290;
      v30 = v7;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "#accessory-service,Prep session objects: Overrides for hysteresis: %@", (uint8_t *)&v29, 0xCu);
    }
    for (i = 0; i != 48; i += 24)
    {
      v21 = (char *)a1 + i;
      *v21 = 0;
      *((_QWORD *)v21 + 1) = 0;
      *((_QWORD *)v21 + 2) = 0;
    }
    v22 = 0;
    v23 = 1;
    do
    {
      v24 = v23;
      if ((unint64_t)objc_msgSend(v3, "count") <= v22)
        break;
      v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectAtIndex:", v22));
      *((_BYTE *)a1 + 24 * v22) = objc_msgSend(v25, "intValue");

      v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectAtIndex:", v22));
      *((double *)a1 + 3 * v22 + 1) = (double)(int)objc_msgSend(v26, "intValue");

      v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "objectAtIndex:", v22));
      *((double *)a1 + 3 * v22 + 2) = (double)(int)objc_msgSend(v27, "intValue");

      v23 = 0;
      v22 = 1;
    }
    while ((v24 & 1) != 0);
  }
  else
  {
    v28 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v29) = 0;
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "#accessory-service,Prep session objects: Using default subrating parameters", (uint8_t *)&v29, 2u);
    }
    *a1 = xmmword_100475048;
    a1[1] = unk_100475058;
    a1[2] = xmmword_100475068;
  }

}

void sub_100289140(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

uint64_t sub_1002891BC(uint64_t a1, unsigned int a2, unsigned int a3, __int16 a4)
{
  uint64_t v4;
  uint64_t v5;
  char i;
  char v7;
  uint64_t v8;
  char v9;
  _WORD *v10;
  __int16 v11;
  unsigned int v12;

  v4 = 0;
  if (a2 && a3)
  {
    v5 = 0;
    for (i = 1; ; i = 0)
    {
      v7 = i;
      v8 = a1 + 2 * v5;
      v11 = *(_WORD *)(v8 + 19);
      v10 = (_WORD *)(v8 + 19);
      v9 = v11;
      if ((v11 & 1) == 0)
        break;
      v5 = 1;
      if ((v7 & 1) == 0)
        return ((v9 & 1) == 0) & v10;
    }
    if ((i & 1) != 0 || (v12 = *(unsigned __int16 *)(a1 + 19), ((v12 >> 1) & 0xF) < a2) && ((v12 >> 5) & 0x7F) < a3)
    {
      *v10 = (2 * (a2 & 0xF)) & 0x1F | (32 * (a3 & 0x7F)) | (a4 << 12) | 1;
      LOBYTE(v10) = 1;
    }
    else
    {
      LOBYTE(v10) = 0;
    }
    return ((v9 & 1) == 0) & v10;
  }
  return v4;
}

uint64_t sub_100289244(uint64_t a1)
{
  void *v2;
  double v3;
  double v4;
  NSObject *v5;
  uint64_t v6;
  int v8;
  double v9;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  objc_msgSend(v2, "doubleForKey:", CFSTR("AccessoryResponderUncertaintySecondsOverride"));
  v4 = v3;
  if (v3 <= 0.0)
  {
    if ((unint64_t)(a1 - 1) >= 2)
      v6 = 2000000;
    else
      v6 = 10000000;
  }
  else
  {
    v5 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
    {
      v8 = 134217984;
      v9 = v4;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#accessory-service,Uncertainty window override: %.3f seconds", (uint8_t *)&v8, 0xCu);
    }
    v6 = (v4 * 1000.0 * 1000.0);
  }

  return v6;
}

void sub_100289354(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

std::string::const_reference sub_10028936C@<X0>(unsigned __int16 *a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, char a4@<W3>, int a5@<W4>, int a6@<W5>, int a7@<W6>, int a8@<W7>, uint64_t a9@<X8>, char a10, uint64_t a11, __int16 a12, __int16 a13, char a14, char a15, char a16, char a17)
{
  uint64_t v18;
  uint64_t v20;
  int v21;
  unsigned int v22;
  __int16 v27;
  int v28;
  char v29;
  std::string::const_reference result;
  __int16 v32;
  double __y;

  v18 = *(unsigned __int8 *)(a2 + 23);
  if ((v18 & 0x80u) != 0)
    v18 = *(_QWORD *)(a2 + 8);
  if (v18 != 2)
    sub_1003E43F0();
  v20 = 0;
  v21 = *a1;
  v22 = a1[1];
  while (v21 != (unsigned __int16)word_100475038[v20] || v22 != (unsigned __int16)word_100475038[v20 + 1])
  {
    v20 += 2;
    if (v20 == 6)
      sub_1003E43C8();
  }
  v32 = a6;
  __y = 0.0;
  if (modf((double)(416 * a6) * 0.00000200320513, &__y) != 0.0)
    sub_1003E4350();
  if (__y > 65535.0)
    sub_1003E4378();
  if (v21 != 1 || v22 >= 3)
    sub_1003E43A0();
  v27 = a7;
  v28 = a8 * a7 * (int)__y;
  *(_WORD *)a9 = 1;
  if (a10)
    v29 = 3;
  else
    v29 = 2;
  *(_WORD *)(a9 + 2) = v22;
  *(_BYTE *)(a9 + 4) = 0x1D1917u >> (8 * v22);
  *(_BYTE *)(a9 + 5) = *std::string::at((const std::string *)a2, 0);
  result = std::string::at((const std::string *)a2, 1uLL);
  *(_BYTE *)(a9 + 6) = *result;
  *(_DWORD *)(a9 + 7) = a5;
  *(_BYTE *)(a9 + 11) = a4;
  *(_BYTE *)(a9 + 12) = a3;
  *(_WORD *)(a9 + 13) = v27;
  *(_WORD *)(a9 + 15) = v32;
  *(_WORD *)(a9 + 17) = v28;
  *(_BYTE *)(a9 + 19) = v29;
  *(_WORD *)(a9 + 26) = a12;
  *(_WORD *)(a9 + 28) = a13;
  *(_BYTE *)(a9 + 30) = a14;
  *(_BYTE *)(a9 + 31) = a15;
  *(_BYTE *)(a9 + 32) = a16;
  *(_BYTE *)(a9 + 33) = a17;
  *(_DWORD *)(a9 + 20) = *(_DWORD *)a11;
  *(_WORD *)(a9 + 24) = *(_WORD *)(a11 + 4);
  return result;
}

uint64_t sub_10028957C(uint64_t a1)
{
  uint64_t result;
  NSObject *v3;
  NSObject *v4;
  char v5;
  uint8_t buf[4];
  const char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  const char *v11;

  result = 9;
  switch((int)a1)
  {
    case 0:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
      v5 = a1;
      v3 = (id)qword_10085F520;
      if (os_log_type_enabled(v3, OS_LOG_TYPE_FAULT))
      {
        sub_10036B730(v5);
        sub_1003E4418();
      }

      v4 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        v7 = "/Library/Caches/com.apple.xbs/Sources/Proximity/Daemon/Services/NearbyInteraction/Session/NIServerNearbyAcc"
             "essoryRangingService.mm";
        v8 = 1024;
        v9 = 1705;
        v10 = 2080;
        v11 = "AppleToFiRaPreamble";
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "#accessory-service,%s:%d: assertion failure in %s", buf, 0x1Cu);
      }
      abort();
    case 10:
    case 11:
    case 12:
      result = a1;
      break;
    default:
      return result;
  }
  return result;
}

void sub_1002896B8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_QWORD *sub_1002896D0@<X0>(__int16 *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  size_t v5;

  v2 = 0;
  v3 = (unsigned __int16)*a1;
  v4 = a1[1];
  while (v3 != (unsigned __int16)word_100475038[v2] || (unsigned __int16)word_100475038[v2 + 1] != (unsigned __int16)v4)
  {
    v2 += 2;
    if (v2 == 6)
      sub_1003E446C();
  }
  if (v3 != 1 || v4 >= 3)
    sub_1003E43A0();
  v5 = qword_100475420[v4];
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return sub_10003A474(a2, a1, (uint64_t)a1 + v5, v5);
}

void sub_10028A02C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21,void *a22,void *a23,void *a24,void *a25,void *a26,void *a27,void *a28,void *a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,char a46)
{
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;

  _Block_object_dispose(&a46, 8);
  _Unwind_Resume(a1);
}

void sub_10028A208(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  NSObject *v5;
  uint64_t v6;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", v3));

  if (!v4)
  {
    v5 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
      sub_1003E4570((uint64_t)v3, v5, v6);
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
  }

}

void sub_10028A290(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10028A724(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  void *v33;
  void *v34;
  void *v35;

  sub_10001AE68((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void sub_10028ABEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  void *v9;
  void *v10;
  va_list va;

  va_start(va, a9);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10028AC68(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  void *v5;
  unsigned int v6;

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "objectForKeyedSubscript:", a2));
  v6 = objc_msgSend(v5, "isRunning");

  if (v6)
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
    *a3 = 1;
  }
}

void sub_10028ACCC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10028ACDC(id a1, NIServerNearbyAccessoryRangingServiceClient *a2)
{
  -[NIServerNearbyAccessoryRangingServiceClient serviceDidInvalidateWithReason:](a2, "serviceDidInvalidateWithReason:", 4294967294);
}

void sub_10028AE9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_10028AEF4(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  id v7;
  id v8;

  v8 = a2;
  v5 = a3;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "interestedClients"));
  v7 = objc_msgSend(v6, "count");

  if (!v7)
    objc_msgSend(*(id *)(a1 + 32), "addObject:", v8);

}

void sub_10028AF64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_10028B3C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  void *v31;
  void *v32;

  _Unwind_Resume(a1);
}

void sub_10028B438(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  int v7;
  NSObject *v8;
  uint64_t v9;
  _QWORD v10[5];
  int v11;
  _QWORD v12[3];

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v3 = WeakRetained;
  if (WeakRetained)
  {
    v4 = (void *)*((_QWORD *)WeakRetained + 4);
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 40)));
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKey:", v5));

    if (v6 && *(_QWORD *)objc_msgSend(v6, "rangingSession"))
    {
      v7 = sub_1002B1704(*(_QWORD *)objc_msgSend(v6, "rangingSession"), (__int128 *)objc_msgSend(v6, "startOptions"));
      if (v7)
      {
        v8 = (id)qword_10085F520;
        if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
        {
          sub_1002B48B0(v7, v12);
          sub_1003E46C8();
        }

        v9 = *(unsigned int *)(a1 + 40);
        v10[0] = _NSConcreteStackBlock;
        v10[1] = 3221225472;
        v10[2] = sub_10028B5F4;
        v10[3] = &unk_1008115E8;
        v10[4] = *(_QWORD *)(a1 + 44);
        v11 = *(_DWORD *)(a1 + 52);
        objc_msgSend(v3, "_relayToClientsOfUWBSessionId:blockToRelay:", v9, v10);
      }

    }
    else
    {

    }
  }

}

void sub_10028B5B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

id sub_10028B5F4(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "serviceRequestDidUpdateStatus:", *(_QWORD *)(a1 + 32), *(unsigned int *)(a1 + 40));
}

id sub_10028B604(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "serviceRequestDidUpdateStatus:", *(_QWORD *)(a1 + 32), *(unsigned int *)(a1 + 40));
}

void sub_10028B6E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

BOOL sub_10028B70C(uint64_t a1, uint64_t a2, void *a3)
{
  return objc_msgSend(a3, "uwbSessionId") == *(_DWORD *)(a1 + 32);
}

void sub_10028B73C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  id v3;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "objectForKey:", a2));
  (*(void (**)(uint64_t))(v2 + 16))(v2);

}

void sub_10028B788(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t sub_10028B7E4(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  sub_1001B0668((_QWORD *)a1, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 1);
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 850045863;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_QWORD *)(a1 + 88) = 0;
  if (*(_QWORD *)(a1 + 8) == *(_QWORD *)a1)
    __assert_rtn("AccessoryRangingIntervalPicker", "NIServerNearbyAccessoryRangingService.mm", 207, "fRangingIntervalOptionsMsec.size() > 0");
  return a1;
}

void sub_10028B880(_Unwind_Exception *a1)
{
  uint64_t v1;
  std::mutex *v2;
  void *v4;

  std::mutex::~mutex(v2);
  v4 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(a1);
}

__n128 sub_10028B8A4(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  uint64_t v4;

  if (*(unsigned __int8 *)(a1 + 39) == *(unsigned __int8 *)(a2 + 39))
  {
    if (*(_BYTE *)(a1 + 39))
    {
      result = *(__n128 *)a2;
      v3 = *(_OWORD *)(a2 + 16);
      *(_QWORD *)(a1 + 31) = *(_QWORD *)(a2 + 31);
      *(__n128 *)a1 = result;
      *(_OWORD *)(a1 + 16) = v3;
    }
  }
  else if (*(_BYTE *)(a1 + 39))
  {
    *(_BYTE *)(a1 + 39) = 0;
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    v4 = *(_QWORD *)(a2 + 4);
    *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
    *(_QWORD *)(a1 + 4) = v4;
    *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
    result = *(__n128 *)(a2 + 20);
    *(_DWORD *)(a1 + 35) = *(_DWORD *)(a2 + 35);
    *(__n128 *)(a1 + 20) = result;
    *(_BYTE *)(a1 + 39) = 1;
  }
  return result;
}

void sub_10028B914(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_100811688;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10028B924(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_100811688;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_10028B954(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_10028B964(uint64_t a1)
{

  return a1;
}

void sub_10028B98C(uint64_t a1)
{

  operator delete();
}

_QWORD *sub_10028B9C4(uint64_t a1)
{
  _QWORD *v2;

  v2 = operator new(0x18uLL);
  *v2 = off_1008116D8;
  v2[1] = *(id *)(a1 + 8);
  *((_DWORD *)v2 + 4) = *(_DWORD *)(a1 + 16);
  return v2;
}

id sub_10028BA10(uint64_t a1, uint64_t a2)
{
  id result;

  *(_QWORD *)a2 = off_1008116D8;
  result = *(id *)(a1 + 8);
  *(_QWORD *)(a2 + 8) = result;
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(a1 + 16);
  return result;
}

void sub_10028BA50(uint64_t a1)
{

}

void sub_10028BA58(id *a1)
{

  operator delete(a1);
}

void sub_10028BA80(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  NSObject *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  _QWORD block[5];
  int v9;
  uint64_t v10;
  int v11;

  v3 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(NSObject **)(v4 + 8);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10028BB80;
  block[3] = &unk_100811740;
  block[4] = v4;
  v9 = *(_DWORD *)(a1 + 16);
  v10 = *a3;
  v11 = *((_DWORD *)a3 + 2);
  dispatch_async(v5, block);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

uint64_t sub_10028BB38(uint64_t a1, uint64_t a2)
{
  if (sub_10003E27C(a2, (uint64_t)&off_100811760))
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_10028BB74()
{
  return &off_100811760;
}

id sub_10028BB80(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_serviceRequestForUWBSessionID:didUpdateStatus:", *(unsigned int *)(a1 + 40), *(_QWORD *)(a1 + 44), *(unsigned int *)(a1 + 52));
}

uint64_t sub_10028BB98(uint64_t a1)
{

  return a1;
}

void sub_10028BBC0(uint64_t a1)
{

  operator delete();
}

_QWORD *sub_10028BBF8(uint64_t a1)
{
  _QWORD *v2;

  v2 = operator new(0x18uLL);
  *v2 = off_100811780;
  v2[1] = *(id *)(a1 + 8);
  *((_DWORD *)v2 + 4) = *(_DWORD *)(a1 + 16);
  return v2;
}

id sub_10028BC44(uint64_t a1, uint64_t a2)
{
  id result;

  *(_QWORD *)a2 = off_100811780;
  result = *(id *)(a1 + 8);
  *(_QWORD *)(a2 + 8) = result;
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(a1 + 16);
  return result;
}

void sub_10028BC84(uint64_t a1)
{

}

void sub_10028BC8C(id *a1)
{

  operator delete(a1);
}

void sub_10028BCB4(uint64_t a1, _QWORD *a2, int *a3)
{
  std::__shared_weak_count *v3;
  int v4;
  uint64_t v5;
  NSObject *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v9[5];
  int v10;
  int v11;

  v3 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  v4 = *a3;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(NSObject **)(v5 + 8);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_10028BDA8;
  v9[3] = &unk_100809CD8;
  v9[4] = v5;
  v10 = *(_DWORD *)(a1 + 16);
  v11 = v4;
  dispatch_async(v6, v9);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

uint64_t sub_10028BD60(uint64_t a1, uint64_t a2)
{
  if (sub_10003E27C(a2, (uint64_t)&off_100811800))
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_10028BD9C()
{
  return &off_100811800;
}

id sub_10028BDA8(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  _QWORD v4[4];
  int v5;

  v1 = *(void **)(a1 + 32);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10028BE04;
  v4[3] = &unk_1008117E0;
  v2 = *(unsigned int *)(a1 + 40);
  v5 = *(_DWORD *)(a1 + 44);
  return objc_msgSend(v1, "_relayToClientsOfUWBSessionId:blockToRelay:", v2, v4);
}

id sub_10028BE04(uint64_t a1, void *a2)
{
  return _objc_msgSend(a2, "serviceDidInvalidateWithReason:", *(unsigned int *)(a1 + 32));
}

uint64_t sub_10028BE10(uint64_t a1)
{

  return a1;
}

void sub_10028BE38(uint64_t a1)
{

  operator delete();
}

_QWORD *sub_10028BE70(uint64_t a1)
{
  _QWORD *v2;

  v2 = operator new(0x18uLL);
  *v2 = off_100811820;
  v2[1] = *(id *)(a1 + 8);
  *((_DWORD *)v2 + 4) = *(_DWORD *)(a1 + 16);
  return v2;
}

id sub_10028BEBC(uint64_t a1, uint64_t a2)
{
  id result;

  *(_QWORD *)a2 = off_100811820;
  result = *(id *)(a1 + 8);
  *(_QWORD *)(a2 + 8) = result;
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(a1 + 16);
  return result;
}

void sub_10028BEFC(uint64_t a1)
{

}

void sub_10028BF04(id *a1)
{

  operator delete(a1);
}

void sub_10028BF2C(uint64_t a1, _QWORD *a2, __int128 *a3)
{
  std::__shared_weak_count *v5;
  __int128 v6;
  uint64_t v7;
  NSObject *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  _QWORD block[5];
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[560];
  _BYTE v16[16];
  _QWORD *v17[16];
  char v18;
  __n128 v19[4];
  void *__p;
  void *v21;
  char v22;
  _BYTE v23[545];
  int v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  _BYTE v28[560];
  _BYTE v29[16];
  _QWORD *v30[16];
  char v31;
  __n128 v32[4];
  void *v33;
  void *v34;
  char v35;
  _BYTE v36[545];

  v5 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  v6 = a3[1];
  v25 = *a3;
  v26 = v6;
  v27 = a3[2];
  sub_10015A39C(v28, (uint64_t)(a3 + 3));
  sub_100153F08(v29, (uint64_t)(a3 + 38));
  sub_10015A3F0(v32, (__n128 *)((char *)a3 + 760));
  memcpy(v36, a3 + 55, sizeof(v36));
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(NSObject **)(v7 + 8);
  block[1] = 3321888768;
  v13 = v26;
  v14 = v27;
  block[0] = _NSConcreteStackBlock;
  block[2] = sub_10028C260;
  block[3] = &unk_1008118B8;
  block[4] = v7;
  v24 = *(_DWORD *)(a1 + 16);
  v12 = v25;
  sub_10015A39C(v15, (uint64_t)v28);
  sub_100153F08(v16, (uint64_t)v29);
  sub_10015A3F0(v19, v32);
  memcpy(v23, v36, sizeof(v23));
  dispatch_async(v8, block);
  if (v22 && __p)
  {
    v21 = __p;
    operator delete(__p);
  }
  if (v18)
    sub_10003E3F0((uint64_t)v17, v17[1]);
  sub_100144868((uint64_t)v15);
  if (v35 && v33)
  {
    v34 = v33;
    operator delete(v33);
  }
  if (v31)
    sub_10003E3F0((uint64_t)v30, v30[1]);
  sub_100144868((uint64_t)v28);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_10028C144(_Unwind_Exception *a1, uint64_t a2, ...)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  uint64_t v4;
  void *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  va_list va;

  va_start(va, a2);
  if (LOBYTE(STACK[0x320]))
    sub_1003E0A40((uint64_t)va);
  sub_100144868(v4);
  if (LOBYTE(STACK[0x938]))
  {
    v6 = (void *)STACK[0x910];
    if (STACK[0x910])
    {
      STACK[0x918] = (unint64_t)v6;
      operator delete(v6);
    }
  }
  if (LOBYTE(STACK[0x8C0]))
    sub_10003E3F0((uint64_t)&STACK[0x840], (_QWORD *)STACK[0x848]);
  sub_100144868(v3);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10028C218(uint64_t a1, uint64_t a2)
{
  if (sub_10003E27C(a2, (uint64_t)&off_1008118E8))
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_10028C254()
{
  return &off_1008118E8;
}

uint64_t sub_10028C260(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  __int128 v4;
  _QWORD v6[4];
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _BYTE v10[560];
  _BYTE v11[16];
  _QWORD *v12[16];
  char v13;
  __n128 v14[4];
  void *__p;
  void *v16;
  char v17;
  _BYTE v18[545];

  v2 = *(void **)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 1472);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3321888768;
  v6[2] = sub_10028C3E0;
  v6[3] = &unk_100811880;
  v4 = *(_OWORD *)(a1 + 56);
  v7 = *(_OWORD *)(a1 + 40);
  v8 = v4;
  v9 = *(_OWORD *)(a1 + 72);
  sub_10015A39C(v10, a1 + 88);
  sub_100153F08(v11, a1 + 648);
  sub_10015A3F0(v14, (__n128 *)(a1 + 800));
  memcpy(v18, (const void *)(a1 + 920), sizeof(v18));
  objc_msgSend(v2, "_relayToClientsOfUWBSessionId:blockToRelay:", v3, v6);
  if (v17 && __p)
  {
    v16 = __p;
    operator delete(__p);
  }
  if (v13)
    sub_10003E3F0((uint64_t)v12, v12[1]);
  return sub_100144868((uint64_t)v10);
}

void sub_10028C39C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10015154C(v1);
  _Unwind_Resume(a1);
}

id sub_10028C3E0(uint64_t a1, void *a2)
{
  return _objc_msgSend(a2, "serviceDidReceiveNewSolution:", a1 + 32);
}

void *sub_10028C3EC(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;

  v4 = *(_OWORD *)(a2 + 32);
  v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 32) = v4;
  sub_10015A39C((_BYTE *)(a1 + 80), a2 + 80);
  sub_100153F08((_BYTE *)(a1 + 640), a2 + 640);
  sub_10015A3F0((__n128 *)(a1 + 792), (__n128 *)(a2 + 792));
  return memcpy((void *)(a1 + 912), (const void *)(a2 + 912), 0x221uLL);
}

void sub_10028C458(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  if (*(_BYTE *)(v2 + 784))
    sub_1003E474C(v2);
  sub_100144868(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10028C484(uint64_t a1)
{
  void *v2;

  if (*(_BYTE *)(a1 + 904))
  {
    v2 = *(void **)(a1 + 864);
    if (v2)
    {
      *(_QWORD *)(a1 + 872) = v2;
      operator delete(v2);
    }
  }
  if (*(_BYTE *)(a1 + 784))
    sub_10003E3F0(a1 + 656, *(_QWORD **)(a1 + 664));
  return sub_100144868(a1 + 80);
}

void sub_10028C4D0()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_100850448);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_100850448))
    {
      sub_10000BF04(qword_100850430, "PRRoseProviderNetworkListener");
      __cxa_atexit((void (*)(void *))&std::string::~string, qword_100850430, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_100850448);
    }
  }
}

void sub_10028C54C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_100850448);
  _Unwind_Resume(a1);
}

void sub_10028C564()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_100850468);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_100850468))
    {
      sub_10000BF04(&qword_100850450, "com.apple.nearbyd.accessory.download");
      __cxa_atexit((void (*)(void *))&std::string::~string, &qword_100850450, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_100850468);
    }
  }
}

void sub_10028C5E0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_100850468);
  _Unwind_Resume(a1);
}

void sub_10028C5F8()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_100850488);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_100850488))
    {
      sub_10000BF04(&qword_100850470, "com.apple.nearbyd.accessory.files");
      __cxa_atexit((void (*)(void *))&std::string::~string, &qword_100850470, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_100850488);
    }
  }
}

void sub_10028C674(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_100850488);
  _Unwind_Resume(a1);
}

void sub_10028C68C()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_1008504A8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1008504A8))
    {
      sub_10000BF04(qword_100850490, "MA_");
      __cxa_atexit((void (*)(void *))&std::string::~string, qword_100850490, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1008504A8);
    }
  }
}

void sub_10028C708(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1008504A8);
  _Unwind_Resume(a1);
}

void sub_10028C720()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_1008504C8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1008504C8))
    {
      sub_10000BF04(qword_1008504B0, "MB_");
      __cxa_atexit((void (*)(void *))&std::string::~string, qword_1008504B0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1008504C8);
    }
  }
}

void sub_10028C79C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1008504C8);
  _Unwind_Resume(a1);
}

void sub_10028C7B4()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_1008504E8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1008504E8))
    {
      sub_10000BF04(qword_1008504D0, "D");
      __cxa_atexit((void (*)(void *))&std::string::~string, qword_1008504D0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1008504E8);
    }
  }
}

void sub_10028C830(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1008504E8);
  _Unwind_Resume(a1);
}

void sub_10028C848()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_100850508);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_100850508))
    {
      sub_10000BF04(&qword_1008504F0, "A");
      __cxa_atexit((void (*)(void *))&std::string::~string, &qword_1008504F0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_100850508);
    }
  }
}

void sub_10028C8C4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_100850508);
  _Unwind_Resume(a1);
}

void sub_10028C8DC()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_100850528);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_100850528))
    {
      sub_10000BF04(qword_100850510, "FAS.bin");
      __cxa_atexit((void (*)(void *))&std::string::~string, qword_100850510, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_100850528);
    }
  }
}

void sub_10028C958(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_100850528);
  _Unwind_Resume(a1);
}

void sub_10028C970()
{
  unsigned __int8 v0;
  _OWORD *v1;

  v0 = atomic_load((unsigned __int8 *)&qword_100850548);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_100850548))
    {
      qword_100850530 = 0;
      qword_100850538 = 0;
      qword_100850540 = 0;
      v1 = operator new(0x30uLL);
      qword_100850538 = (uint64_t)(v1 + 3);
      qword_100850540 = (uint64_t)(v1 + 3);
      *v1 = xmmword_100475008;
      v1[1] = unk_100475018;
      v1[2] = xmmword_100475028;
      qword_100850530 = (uint64_t)v1;
      __cxa_atexit((void (*)(void *))sub_100009C44, &qword_100850530, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_100850548);
    }
  }
}

void sub_10028CA10(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_100850548);
  _Unwind_Resume(a1);
}

void sub_10028CA28()
{
  void *v0;
  std::string *v1;
  __int128 v2;
  std::string *v3;
  __int128 v4;
  std::string *v5;
  __int128 v6;
  std::string *v7;
  __int128 v8;
  std::string *v9;
  __int128 v10;
  std::string *v11;
  __int128 v12;
  std::string *v13;
  __int128 v14;
  std::string *v15;
  __int128 v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  __int128 v22;
  std::string *v23;
  __int128 v24;
  std::string *v25;
  __int128 v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  __int128 v30;
  std::string *v31;
  __int128 v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  __int128 v36;
  _WORD *v37;
  _DWORD *v38;
  _DWORD *v39;
  _DWORD *v40;
  std::string v41;
  std::string v42;

  v0 = objc_autoreleasePoolPush();
  sub_1003610EC(0);
  v1 = std::string::insert(&v41, 0, "reverseLUT_A");
  v2 = *(_OWORD *)&v1->__r_.__value_.__l.__data_;
  v42.__r_.__value_.__r.__words[2] = v1->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v2;
  v1->__r_.__value_.__l.__size_ = 0;
  v1->__r_.__value_.__r.__words[2] = 0;
  v1->__r_.__value_.__r.__words[0] = 0;
  v3 = std::string::append(&v42, ".bin");
  v4 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
  qword_10085B190 = v3->__r_.__value_.__r.__words[2];
  xmmword_10085B180 = v4;
  v3->__r_.__value_.__l.__size_ = 0;
  v3->__r_.__value_.__r.__words[2] = 0;
  v3->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v42.__r_.__value_.__l.__data_);
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v41.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_10085B180, (void *)&_mh_execute_header);
  sub_1003610EC(1);
  v5 = std::string::insert(&v41, 0, "reverseLUT_A");
  v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  v42.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  v7 = std::string::append(&v42, ".bin");
  v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  qword_10085B1A8 = v7->__r_.__value_.__r.__words[2];
  xmmword_10085B198 = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v42.__r_.__value_.__l.__data_);
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v41.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_10085B198, (void *)&_mh_execute_header);
  sub_1003610EC(2);
  v9 = std::string::insert(&v41, 0, "reverseLUT_A");
  v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v42.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  v11 = std::string::append(&v42, ".bin");
  v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  qword_10085B1C0 = v11->__r_.__value_.__r.__words[2];
  xmmword_10085B1B0 = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v42.__r_.__value_.__l.__data_);
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v41.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_10085B1B0, (void *)&_mh_execute_header);
  sub_1003610EC(3);
  v13 = std::string::insert(&v41, 0, "reverseLUT_A");
  v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v42.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  v15 = std::string::append(&v42, ".bin");
  v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  qword_10085B1D8 = v15->__r_.__value_.__r.__words[2];
  xmmword_10085B1C8 = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v42.__r_.__value_.__l.__data_);
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v41.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_10085B1C8, (void *)&_mh_execute_header);
  sub_1003610EC(4);
  v17 = std::string::insert(&v41, 0, "reverseLUT_A");
  v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  v42.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v18;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  v19 = std::string::append(&v42, ".bin");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  qword_10085B1F0 = v19->__r_.__value_.__r.__words[2];
  xmmword_10085B1E0 = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v42.__r_.__value_.__l.__data_);
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v41.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_10085B1E0, (void *)&_mh_execute_header);
  sub_1003610EC(5);
  v21 = std::string::insert(&v41, 0, "reverseLUT_A");
  v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  v42.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  v23 = std::string::append(&v42, ".bin");
  v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  qword_10085B208 = v23->__r_.__value_.__r.__words[2];
  xmmword_10085B1F8 = v24;
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v42.__r_.__value_.__l.__data_);
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v41.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_10085B1F8, (void *)&_mh_execute_header);
  sub_1003610EC(6);
  v25 = std::string::insert(&v41, 0, "reverseLUT_A");
  v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
  v42.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v26;
  v25->__r_.__value_.__l.__size_ = 0;
  v25->__r_.__value_.__r.__words[2] = 0;
  v25->__r_.__value_.__r.__words[0] = 0;
  v27 = std::string::append(&v42, ".bin");
  v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
  qword_10085B220 = v27->__r_.__value_.__r.__words[2];
  xmmword_10085B210 = v28;
  v27->__r_.__value_.__l.__size_ = 0;
  v27->__r_.__value_.__r.__words[2] = 0;
  v27->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v42.__r_.__value_.__l.__data_);
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v41.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_10085B210, (void *)&_mh_execute_header);
  sub_1003610EC(7);
  v29 = std::string::insert(&v41, 0, "reverseLUT_A");
  v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
  v42.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v30;
  v29->__r_.__value_.__l.__size_ = 0;
  v29->__r_.__value_.__r.__words[2] = 0;
  v29->__r_.__value_.__r.__words[0] = 0;
  v31 = std::string::append(&v42, ".bin");
  v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
  qword_10085B238 = v31->__r_.__value_.__r.__words[2];
  xmmword_10085B228 = v32;
  v31->__r_.__value_.__l.__size_ = 0;
  v31->__r_.__value_.__r.__words[2] = 0;
  v31->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v42.__r_.__value_.__l.__data_);
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v41.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_10085B228, (void *)&_mh_execute_header);
  sub_1003610EC(8);
  v33 = std::string::insert(&v41, 0, "reverseLUT_A");
  v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
  v42.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v34;
  v33->__r_.__value_.__l.__size_ = 0;
  v33->__r_.__value_.__r.__words[2] = 0;
  v33->__r_.__value_.__r.__words[0] = 0;
  v35 = std::string::append(&v42, ".bin");
  v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
  qword_10085B250 = v35->__r_.__value_.__r.__words[2];
  xmmword_10085B240 = v36;
  v35->__r_.__value_.__l.__size_ = 0;
  v35->__r_.__value_.__r.__words[2] = 0;
  v35->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v42.__r_.__value_.__l.__data_);
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v41.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_10085B240, (void *)&_mh_execute_header);
  qword_10085B260 = 0;
  unk_10085B268 = 0;
  qword_10085B258 = 0;
  v37 = operator new(6uLL);
  qword_10085B260 = (uint64_t)(v37 + 3);
  unk_10085B268 = v37 + 3;
  *(_DWORD *)v37 = 12976308;
  v37[2] = 162;
  qword_10085B258 = (uint64_t)v37;
  __cxa_atexit((void (*)(void *))sub_100284AEC, &qword_10085B258, (void *)&_mh_execute_header);
  qword_10085B278 = 0;
  unk_10085B280 = 0;
  qword_10085B270 = 0;
  v38 = operator new(0xCuLL);
  qword_10085B278 = (uint64_t)(v38 + 3);
  unk_10085B280 = v38 + 3;
  *(_QWORD *)v38 = 0x4C8045C04A40480;
  v38[2] = 82576440;
  qword_10085B270 = (uint64_t)v38;
  __cxa_atexit((void (*)(void *))sub_100284AEC, &qword_10085B270, (void *)&_mh_execute_header);
  qword_10085B290 = 0;
  unk_10085B298 = 0;
  qword_10085B288 = 0;
  v39 = operator new(0xCuLL);
  qword_10085B290 = (uint64_t)(v39 + 3);
  unk_10085B298 = v39 + 3;
  *(_QWORD *)v39 = 0x1F801C201E601D4;
  v39[2] = 27132336;
  qword_10085B288 = (uint64_t)v39;
  __cxa_atexit((void (*)(void *))sub_100284AEC, &qword_10085B288, (void *)&_mh_execute_header);
  qword_10085B2A8 = 0;
  unk_10085B2B0 = 0;
  qword_10085B2A0 = 0;
  v40 = operator new(0xCuLL);
  qword_10085B2A8 = (uint64_t)(v40 + 3);
  unk_10085B2B0 = v40 + 3;
  *(_QWORD *)v40 = 0x8DC087008B80894;
  v40[2] = 150997068;
  qword_10085B2A0 = (uint64_t)v40;
  __cxa_atexit((void (*)(void *))sub_100284AEC, &qword_10085B2A0, (void *)&_mh_execute_header);
  qword_10085B2C0 = 0;
  unk_10085B2C8 = 0;
  qword_10085B2B8 = 0;
  sub_1001B0668(&qword_10085B2B8, (const void *)qword_10085B258, qword_10085B260, (qword_10085B260 - qword_10085B258) >> 1);
  __cxa_atexit((void (*)(void *))sub_100284AEC, &qword_10085B2B8, (void *)&_mh_execute_header);
  sub_10028B7E4((uint64_t)&unk_10085B2D0, (uint64_t)&qword_10085B258);
  __cxa_atexit((void (*)(void *))sub_100284B1C, &unk_10085B2D0, (void *)&_mh_execute_header);
  sub_10028B7E4((uint64_t)&unk_10085B330, (uint64_t)&qword_10085B270);
  __cxa_atexit((void (*)(void *))sub_100284B1C, &unk_10085B330, (void *)&_mh_execute_header);
  sub_10028B7E4((uint64_t)&unk_10085B390, (uint64_t)&qword_10085B288);
  __cxa_atexit((void (*)(void *))sub_100284B1C, &unk_10085B390, (void *)&_mh_execute_header);
  sub_10028B7E4((uint64_t)&unk_10085B3F0, (uint64_t)&qword_10085B2A0);
  __cxa_atexit((void (*)(void *))sub_100284B1C, &unk_10085B3F0, (void *)&_mh_execute_header);
  sub_10028B7E4((uint64_t)qword_10085B450, (uint64_t)&qword_10085B2B8);
  __cxa_atexit((void (*)(void *))sub_100284B1C, qword_10085B450, (void *)&_mh_execute_header);
  objc_autoreleasePoolPop(v0);
}

void sub_10028D25C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10028D2D0(uint64_t a1)
{
  *(_BYTE *)a1 = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 24) = 0;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
    sub_1003E4758();
  sub_10028D330(a1);
  return a1;
}

void sub_10028D330(uint64_t a1)
{
  _OWORD *v2;
  uint64_t v3;
  __int128 v4;
  double v5;

  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
    sub_1003E4808();
  LOBYTE(v4) = 0;
  *((_QWORD *)&v4 + 1) = 0;
  v5 = 0.0;
  v3 = 0;
  if (sub_100360CC0(&v3, (char *)&v4 + 8, &v5))
  {
    LOBYTE(v4) = 1;
    if (*(_BYTE *)a1 && vabdd_f64(*(double *)(a1 + 8) - *(double *)(a1 + 16), *((double *)&v4 + 1) - v5) <= 0.000001)
    {
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
        sub_1003E47DC();
      *(_OWORD *)(a1 + 24) = v4;
      *(double *)(a1 + 40) = v5;
    }
    else
    {
      v2 = (_OWORD *)(a1 + 24);
      if (*(_BYTE *)(a1 + 24)
        && vabdd_f64(*(double *)(a1 + 32) - *(double *)(a1 + 40), *((double *)&v4 + 1) - v5) <= 0.000001)
      {
        if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
          sub_1003E47B0();
        *(_OWORD *)a1 = *v2;
        *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 40);
        *v2 = v4;
        *(double *)(a1 + 40) = v5;
      }
      else
      {
        if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
          sub_1003E4784();
        *(_OWORD *)a1 = v4;
        *(double *)(a1 + 16) = v5;
        *(_BYTE *)(a1 + 24) = 0;
      }
    }
    sub_10028D9C8((unsigned __int8 *)a1);
  }
}

uint64_t sub_10028D4C0(uint64_t a1, double a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  double v13;
  uint64_t v14;
  double v15;
  double v16;
  const char *v17;
  NSObject *v18;
  uint32_t v19;
  uint64_t v20;
  NSObject *v22;
  int v23;
  double v24;
  __int16 v25;
  double v26;
  __int16 v27;
  double v28;

  v4 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
    sub_1003E4898(v4, v5, v6, v7, v8, v9, v10, v11);
  sub_10028D330(a1);
  if (*(_BYTE *)a1 && *(_BYTE *)(a1 + 24))
  {
    v12 = *(double *)(a1 + 8);
    if (v12 <= a2 && (v13 = *(double *)(a1 + 32), v13 >= a2))
    {
      v22 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
      {
        v23 = 134218496;
        v24 = v12;
        v25 = 2048;
        v26 = a2;
        v27 = 2048;
        v28 = v13;
        _os_log_debug_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "getMachContinuousTimeSec: Order OK: startAbs %.9f targetAbs %.9f endAbs %.9f", (uint8_t *)&v23, 0x20u);
        v13 = *(double *)(a1 + 32);
        v22 = qword_10085F520;
      }
      v15 = *(double *)(a1 + 40) - v13 + a2;
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
        sub_1003E4834();
    }
    else
    {
      v14 = qword_10085F520;
      v15 = 0.0;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
      {
        v16 = *(double *)(a1 + 32);
        v23 = 134218496;
        v24 = v12;
        v25 = 2048;
        v26 = a2;
        v27 = 2048;
        v28 = v16;
        v17 = "getMachContinuousTimeSec: Order not OK: startAbs %.9f targetAbs %.9f endAbs %.9f";
        v18 = v14;
        v19 = 32;
LABEL_11:
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, v17, (uint8_t *)&v23, v19);
      }
    }
  }
  else
  {
    v20 = qword_10085F520;
    v15 = 0.0;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v23) = 0;
      v17 = "getMachContinuousTimeSec: start/end times not valid";
      v18 = v20;
      v19 = 2;
      goto LABEL_11;
    }
  }
  return *(_QWORD *)&v15;
}

uint64_t sub_10028D6D4(uint64_t a1, double a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  double v13;
  uint64_t v14;
  double v15;
  double v16;
  const char *v17;
  NSObject *v18;
  uint32_t v19;
  uint64_t v20;
  NSObject *v22;
  int v23;
  double v24;
  __int16 v25;
  double v26;
  __int16 v27;
  double v28;

  v4 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
    sub_1003E4964(v4, v5, v6, v7, v8, v9, v10, v11);
  sub_10028D330(a1);
  if (*(_BYTE *)a1 && *(_BYTE *)(a1 + 24))
  {
    v12 = *(double *)(a1 + 16);
    if (v12 <= a2 && (v13 = *(double *)(a1 + 40), v13 >= a2))
    {
      v22 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
      {
        v23 = 134218496;
        v24 = v12;
        v25 = 2048;
        v26 = a2;
        v27 = 2048;
        v28 = v13;
        _os_log_debug_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "getMachAbsoluteTimeSec: Order OK: startCont %.9f targetCont %.9f endCont %.9f", (uint8_t *)&v23, 0x20u);
        v13 = *(double *)(a1 + 40);
        v22 = qword_10085F520;
      }
      v15 = a2 - (v13 - *(double *)(a1 + 32));
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
        sub_1003E4900();
    }
    else
    {
      v14 = qword_10085F520;
      v15 = 0.0;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
      {
        v16 = *(double *)(a1 + 40);
        v23 = 134218496;
        v24 = v12;
        v25 = 2048;
        v26 = a2;
        v27 = 2048;
        v28 = v16;
        v17 = "getMachAbsoluteTimeSec: Order not OK: startCont %.9f targetCont %.9f endCont %.9f";
        v18 = v14;
        v19 = 32;
LABEL_11:
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, v17, (uint8_t *)&v23, v19);
      }
    }
  }
  else
  {
    v20 = qword_10085F520;
    v15 = 0.0;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v23) = 0;
      v17 = "getMachAbsoluteTimeSec: start/end times not valid";
      v18 = v20;
      v19 = 2;
      goto LABEL_11;
    }
  }
  return *(_QWORD *)&v15;
}

uint64_t sub_10028D8E8(double a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  double v12;
  uint64_t v13;
  double v14;

  v2 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
    sub_1003E4A68(v2, v3, v4, v5, v6, v7, v8, v9);
  v13 = 0;
  v14 = 0.0;
  v12 = 0.0;
  if ((sub_100360CC0(&v14, &v13, &v12) & 1) != 0)
  {
    v10 = v14 - (v12 - a1);
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
      sub_1003E49CC();
  }
  else
  {
    v10 = 0.0;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
      sub_1003E4A30();
  }
  return *(_QWORD *)&v10;
}

void sub_10028D9C8(unsigned __int8 *a1)
{
  int v2;
  NSObject *v3;
  _BOOL4 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  NSObject *v12;
  _BOOL4 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;

  v2 = *a1;
  v3 = qword_10085F520;
  v4 = os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG);
  if (v2)
  {
    if (v4)
    {
      v20 = *((_QWORD *)a1 + 1);
      v22 = 134217984;
      v23 = v20;
      _os_log_debug_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "PRMachTimeConverter: startAbs: %.9f", (uint8_t *)&v22, 0xCu);
      v3 = qword_10085F520;
    }
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
      sub_1003E4B90((uint64_t)a1, v3, v5, v6, v7, v8, v9, v10);
  }
  else if (v4)
  {
    sub_1003E4B64();
  }
  v11 = a1[24];
  v12 = qword_10085F520;
  v13 = os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG);
  if (v11)
  {
    if (v13)
    {
      v21 = *((_QWORD *)a1 + 4);
      v22 = 134217984;
      v23 = v21;
      _os_log_debug_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "PRMachTimeConverter: endAbs: %.9f", (uint8_t *)&v22, 0xCu);
      v12 = qword_10085F520;
    }
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
      sub_1003E4AFC((uint64_t)a1, v12, v14, v15, v16, v17, v18, v19);
  }
  else if (v13)
  {
    sub_1003E4AD0();
  }
}

void sub_10028DB58(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 0x16u);
}

_QWORD *sub_10028DB68@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, off_100811AF0[a1]);
}

_QWORD *sub_10028DB7C@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, off_100811B48[a1]);
}

_QWORD *sub_10028DB90@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, off_100811B90[a1]);
}

_QWORD *sub_10028DBA4@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, off_100811BB0[a1]);
}

void sub_10028DD30(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_10028E240(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_10028E3A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_10028E4D4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10028E618(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  v12 = v11;

  _Unwind_Resume(a1);
}

id sub_10028E648(const char *a1)
{
  NSString *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  NSErrorUserInfoKey v7;
  void *v8;

  v1 = NSStringFromSelector(a1);
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("'%@': method not supported for this configuration"), v2));

  v7 = NSLocalizedDescriptionKey;
  v8 = v3;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v8, &v7, 1));
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("com.apple.NearbyInteraction"), -5889, v4));

  return v5;
}

void sub_10028E738(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_10028E7D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  v12 = v11;

  _Unwind_Resume(a1);
}

void sub_10028E864(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  v12 = v11;

  _Unwind_Resume(a1);
}

void sub_10028E8F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  v12 = v11;

  _Unwind_Resume(a1);
}

void sub_10028E98C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  v12 = v11;

  _Unwind_Resume(a1);
}

void sub_10028EB60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_10028EC68(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_10028ED6C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_10028EE78(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10028EF58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_10028F078(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id sub_10028F154(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  id v4;
  void *v5;

  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "rawToken"));
    v4 = sub_10028F1CC((uint64_t)v3);
    v5 = (void *)objc_claimAutoreleasedReturnValue(v4);

  }
  else
  {
    v5 = 0;
  }

  return v5;
}

void sub_10028F1B0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id sub_10028F1CC(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  id v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v14;

  v14 = 0;
  v2 = (void *)OPACKDecodeData(a1, 8, &v14);
  if (v2 && (v3 = objc_opt_class(NSDictionary, v1), (objc_opt_isKindOfClass(v2, v3) & 1) != 0))
  {
    v4 = v2;
  }
  else
  {
    v5 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
      sub_1003E4CC4(v5, v6, v7, v8, v9, v10, v11, v12);
    v4 = 0;
  }

  return v4;
}

void sub_10028F260(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id sub_10028F270(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  id v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v15;

  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v15 = 0;
    v3 = (void *)OPACKEncoderCreateData(v1, 8, &v15);
    v4 = v3;
    if (v3)
    {
      v5 = v3;
    }
    else
    {
      v6 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
        sub_1003E4CF8(v6, v7, v8, v9, v10, v11, v12, v13);
    }

  }
  else
  {
    v4 = 0;
  }

  return v4;
}

void sub_10028F304(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id sub_10028F314(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  id v6;
  void *v7;
  id v8;
  id v9;
  id v10;

  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (v4)
  {
    if (v3)
    {
      v6 = sub_10028F1CC((uint64_t)v4);
      v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
      v8 = objc_msgSend(v7, "mutableCopy");
      objc_msgSend(v8, "addEntriesFromDictionary:", v3);
      v9 = sub_10028F270(v8);
      v10 = (id)objc_claimAutoreleasedReturnValue(v9);

    }
    else
    {
      v10 = v4;
    }
  }
  else
  {
    v10 = 0;
  }

  return v10;
}

void sub_10028F3B0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

const __CFString *sub_10028F3DC(uint64_t a1)
{
  const __CFString *v1;

  v1 = CFSTR("NISessionPauseSourceInvalid");
  if (a1 == 1)
    v1 = CFSTR("NISessionPauseSourceUser");
  if (a1 == 2)
    return CFSTR("NISessionPauseSourceInterruption");
  else
    return v1;
}

_QWORD *sub_10028F408@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, (&off_100811CD0)[a1]);
}

_QWORD *sub_10028F41C@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, (&off_100811D28)[a1]);
}

_QWORD *sub_10028F430@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, (&off_100811D70)[a1]);
}

_QWORD *sub_10028F444@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, (&off_100811D90)[a1]);
}

uint64_t sub_10028F458(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  id v6;
  _xpc_connection_s *mach_service;
  BOOL v9[16];
  _QWORD handler[5];

  v5 = a2;
  *(_QWORD *)a1 = &off_100811BE0;
  *(_QWORD *)(a1 + 8) = off_100811C40;
  *(_QWORD *)(a1 + 16) = dispatch_queue_create("com.apple.nearbyd.coexmanager", 0);
  v6 = v5;
  *(_QWORD *)(a1 + 24) = v6;
  mach_service = xpc_connection_create_mach_service("com.apple.WirelessCoexManager", *(dispatch_queue_t *)(a1 + 16), 0);
  *(_QWORD *)(a1 + 32) = mach_service;
  *(_WORD *)(a1 + 40) = 10;
  *(_BYTE *)(a1 + 50) = 0;
  *(_WORD *)(a1 + 52) = 0;
  *(_BYTE *)(a1 + 54) = 0;
  *(_BYTE *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 42) = 0;
  *(_DWORD *)(a1 + 45) = 0;
  *(_QWORD *)(a1 + 64) = a3;
  *(_BYTE *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 82) = 0;
  *(_QWORD *)(a1 + 74) = 0;
  *(_WORD *)(a1 + 90) = 0;
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 3221225472;
  handler[2] = sub_10028F5A8;
  handler[3] = &unk_10080E5E0;
  handler[4] = a1;
  xpc_connection_set_event_handler(mach_service, handler);
  xpc_connection_resume(*(xpc_connection_t *)(a1 + 32));
  sub_10028F7C0(a1);
  v9[0] = 0;
  memset(&v9[2], 0, 14);
  sub_10028F8D8(a1, v9);

  return a1;
}

void sub_10028F574(_Unwind_Exception *a1)
{
  id *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_10028F5A8(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;

  v3 = a2;
  v4 = *(_QWORD *)(a1 + 32);
  if (v3 == &_xpc_error_connection_invalid && os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
    sub_1003E4D2C();
  sub_10028F630(v4, v3);

}

void sub_10028F620(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10028F630(uint64_t a1, void *a2)
{
  id v3;
  xpc_type_t type;
  char *v5;
  NSObject *v6;
  uint64_t v7;
  NSObject *v8;
  const char *string;
  uint64_t v10;

  v3 = a2;
  type = xpc_get_type(v3);
  if (type == (xpc_type_t)&_xpc_type_dictionary)
  {
    sub_10028FBD4(a1, v3);
  }
  else if (type == (xpc_type_t)&_xpc_type_error)
  {
    if (v3 == &_xpc_error_connection_interrupted)
    {
      sub_10028F7C0(a1);
      sub_10028F8D8(a1, (BOOL *)(a1 + 72));
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
        sub_1003E4D58();
    }
    else
    {
      v8 = (id)qword_10085F520;
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        string = xpc_dictionary_get_string(v3, _xpc_error_key_description);
        sub_1003E4D84((uint64_t)string, (uint64_t)&v10, v8);
      }

    }
  }
  else
  {
    v5 = xpc_copy_description(v3);
    v6 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
      sub_1003E4DC0((uint64_t)v5, v6, v7);
    free(v5);
  }

}

void sub_10028F798(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_10028F7C0(uint64_t a1)
{
  xpc_object_t v2;
  id v3;
  uint64_t i;
  xpc_object_t values[2];
  char *keys[2];

  v2 = xpc_dictionary_create(0, 0, 0);
  xpc_dictionary_set_uint64(v2, "kWCMRegisterProcess_ProcessId", 0x1DuLL);
  keys[0] = "kMessageId";
  keys[1] = "kMessageArgs";
  values[0] = xpc_uint64_create(1uLL);
  v3 = v2;
  values[1] = v3;
  sub_100290A44(a1, (const char *const *)keys, values, 2);
  for (i = 1; i != -1; --i)

}

void sub_10028F89C(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t i;

  for (i = 8; i != -8; i -= 8)

  _Unwind_Resume(a1);
}

void sub_10028F8D8(uint64_t a1, BOOL *a2)
{
  xpc_object_t v4;
  id v5;
  NSObject *v6;
  _BOOL4 v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  uint64_t i;
  _DWORD v16[2];
  __int16 v17;
  int v18;
  __int16 v19;
  int v20;
  __int16 v21;
  int v22;
  __int16 v23;
  int v24;
  __int16 v25;
  int v26;
  __int16 v27;
  int v28;
  __int16 v29;
  int v30;
  xpc_object_t values[2];
  char *keys[2];

  *(_OWORD *)(a1 + 72) = *(_OWORD *)a2;
  v4 = xpc_dictionary_create(0, 0, 0);
  xpc_dictionary_set_BOOL(v4, "kWCMRCU1PowerOn", *a2);
  xpc_dictionary_set_uint64(v4, "kWCMRCU1ChannelNum", *((unsigned __int16 *)a2 + 1));
  xpc_dictionary_set_uint64(v4, "kWCMRCU1OnDuration", *((unsigned __int16 *)a2 + 2));
  xpc_dictionary_set_uint64(v4, "kWCMRCU1CycleLength", *((unsigned __int16 *)a2 + 3));
  xpc_dictionary_set_uint64(v4, "kWCMRCU1NumerOfCycles", *((unsigned __int16 *)a2 + 4));
  xpc_dictionary_set_uint64(v4, "kWCMRCU1FrameFormat", *((unsigned __int16 *)a2 + 5));
  xpc_dictionary_set_uint64(v4, "kWCMRCU1UseCaseNum", *((unsigned __int16 *)a2 + 6));
  xpc_dictionary_set_uint64(v4, "kWCMRCU1SideChBandMask", *((unsigned __int16 *)a2 + 7));
  keys[0] = "kMessageId";
  keys[1] = "kMessageArgs";
  values[0] = xpc_uint64_create(0x320uLL);
  v5 = v4;
  values[1] = v5;
  sub_100290A44(a1, (const char *const *)keys, values, 2);
  v6 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    v7 = *a2;
    v8 = *((unsigned __int16 *)a2 + 1);
    v9 = *((unsigned __int16 *)a2 + 2);
    v10 = *((unsigned __int16 *)a2 + 3);
    v11 = *((unsigned __int16 *)a2 + 4);
    v12 = *((unsigned __int16 *)a2 + 5);
    v13 = *((unsigned __int16 *)a2 + 6);
    v14 = *((unsigned __int16 *)a2 + 7);
    v16[0] = 67110912;
    v16[1] = v7;
    v17 = 1024;
    v18 = v8;
    v19 = 1024;
    v20 = v9;
    v21 = 1024;
    v22 = v10;
    v23 = 1024;
    v24 = v11;
    v25 = 1024;
    v26 = v12;
    v27 = 1024;
    v28 = v13;
    v29 = 1024;
    v30 = v14;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#coex,sendStatusUpdateMessage-Send message to UCM: State(%x), Channel(%x), OnDuration(%x), CycleLength(%x), NumberOfCycles(%x), Frame(%x), Priority(%x), R2NbBandMask(%x)", (uint8_t *)v16, 0x32u);
  }
  for (i = 1; i != -1; --i)

}

void sub_10028FB04(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t i;

  for (i = 8; i != -8; i -= 8)

  _Unwind_Resume(a1);
}

id *sub_10028FB44(id *a1)
{

  return a1;
}

id *sub_10028FB80(uint64_t a1)
{
  return sub_10028FB44((id *)(a1 - 8));
}

void sub_10028FB88(id *a1)
{
  sub_10028FB44(a1);
  operator delete();
}

void sub_10028FBAC(uint64_t a1)
{
  sub_10028FB44((id *)(a1 - 8));
  operator delete();
}

void sub_10028FBD4(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  NSObject *v5;
  _WORD *v6;
  int v7;
  int v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  int v23;
  unsigned int v24;
  _WORD *v25;
  int v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  int v30;
  int v31;
  int v32;
  double rep;
  uint64_t v34;
  int v35;
  NSObject *v36;
  NSObject *v37;
  _QWORD v38[5];
  int v39;
  _BYTE v40[28];
  _QWORD v41[5];
  int v42;
  __int128 v43;
  int v44;
  char v45;
  char v46;
  char v47;
  char v48;
  _QWORD block[5];
  _BYTE buf[28];
  char v51;

  v3 = a2;
  v4 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#coex,processIncomingMessage-Received message from UCM", buf, 2u);
  }
  v51 = 0;
  sub_100290040(v3, &v51, (uint64_t)buf);
  if (buf[26])
  {
    if (buf[18])
    {
      if (*(unsigned __int16 *)&buf[16] != *(unsigned __int16 *)(a1 + 40))
      {
        *(_WORD *)(a1 + 40) = *(_WORD *)&buf[16];
        if (*(_QWORD *)(a1 + 64))
        {
          v5 = *(NSObject **)(a1 + 24);
          block[0] = _NSConcreteStackBlock;
          block[1] = 3221225472;
          block[2] = sub_10029074C;
          block[3] = &unk_1007FA668;
          block[4] = a1;
          dispatch_async(v5, block);
        }
      }
    }
    v6 = (_WORD *)(a1 + 54);
    v7 = *(unsigned __int16 *)(a1 + 54);
    v8 = *(unsigned __int8 *)(a1 + 42);
    v9 = *(unsigned __int8 *)(a1 + 43);
    v10 = *(unsigned __int8 *)(a1 + 45);
    if (buf[1])
    {
      v11 = *(unsigned __int16 *)buf;
      *(_WORD *)(a1 + 42) = *(_WORD *)buf;
      v12 = v11 >> 8;
      v13 = v11;
    }
    else
    {
      v13 = *(unsigned __int8 *)(a1 + 42);
      v12 = *(unsigned __int8 *)(a1 + 43);
    }
    v14 = *(unsigned __int8 *)(a1 + 44);
    v15 = *(unsigned __int8 *)(a1 + 47);
    if (buf[3])
    {
      v16 = *(unsigned __int16 *)&buf[2];
      *(_WORD *)(a1 + 44) = *(_WORD *)&buf[2];
      v17 = v16 >> 8;
      v18 = v16;
    }
    else
    {
      v18 = *(unsigned __int8 *)(a1 + 44);
      v17 = v10;
    }
    v19 = *(unsigned __int8 *)(a1 + 46);
    if (buf[5])
    {
      v20 = *(unsigned __int16 *)&buf[4];
      *(_WORD *)(a1 + 46) = *(_WORD *)&buf[4];
      v21 = v20 >> 8;
      v22 = v20;
    }
    else
    {
      v22 = *(unsigned __int8 *)(a1 + 46);
      v21 = v15;
    }
    v23 = *(unsigned __int8 *)(a1 + 50);
    v24 = *(unsigned __int8 *)(a1 + 53);
    v25 = (_WORD *)(a1 + 48);
    v26 = *(unsigned __int16 *)(a1 + 48);
    if (buf[8])
    {
      *v25 = *(_WORD *)&buf[6];
      *(_BYTE *)(a1 + 50) = buf[8];
    }
    v27 = *(unsigned __int8 *)(a1 + 52);
    if (buf[11])
    {
      v28 = *(unsigned __int16 *)&buf[10];
      *(_WORD *)(a1 + 52) = *(_WORD *)&buf[10];
      v29 = v28 >> 8;
      v30 = v28;
    }
    else
    {
      v30 = *(unsigned __int8 *)(a1 + 52);
      v29 = v24;
    }
    v31 = *(unsigned __int8 *)(a1 + 56);
    if (buf[14])
    {
      *v6 = *(_WORD *)&buf[12];
      *(_BYTE *)(a1 + 56) = buf[14];
    }
    if (v9 && v12)
    {
      if (v13 != v8)
        goto LABEL_54;
    }
    else if ((v9 != 0) != (v12 != 0))
    {
      goto LABEL_54;
    }
    if (v10 && v17)
    {
      if (v18 != v14)
        goto LABEL_54;
    }
    else if ((v10 != 0) != (v17 != 0))
    {
      goto LABEL_54;
    }
    if (v15 && v21)
    {
      if (v22 != v19)
        goto LABEL_54;
    }
    else if ((v15 != 0) != (v21 != 0))
    {
      goto LABEL_54;
    }
    if (v23 && *(_BYTE *)(a1 + 50))
    {
      if ((unsigned __int16)*v25 != v26)
        goto LABEL_54;
    }
    else if ((v23 != 0) != (*(_BYTE *)(a1 + 50) != 0))
    {
      goto LABEL_54;
    }
    if (v24 && v29)
    {
      if (v30 != v27)
        goto LABEL_54;
    }
    else if ((v24 != 0) != (v29 != 0))
    {
      goto LABEL_54;
    }
    if (v31 && *(_BYTE *)(a1 + 56))
    {
      v32 = (unsigned __int16)*v6;
    }
    else
    {
      v32 = v31 != 0;
      v7 = *(unsigned __int8 *)(a1 + 56) != 0;
    }
    if (v32 == v7)
    {
LABEL_55:
      if (v51 && *((_DWORD *)sub_100004784() + 186) == 1)
      {
        v35 = *(unsigned __int16 *)&buf[20];
        if (*(unsigned __int16 *)&buf[20] >= 3u)
        {
          if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
            sub_1003E4E2C();
        }
        else
        {
          if (*(_DWORD *)(a1 + 88) != *(unsigned __int16 *)&buf[20] && *(_QWORD *)(a1 + 64))
          {
            v36 = *(NSObject **)(a1 + 24);
            v41[0] = _NSConcreteStackBlock;
            v41[1] = 3221225472;
            v41[2] = sub_1002907B0;
            v41[3] = &unk_100807908;
            v41[4] = a1;
            v42 = *(unsigned __int16 *)&buf[20];
            dispatch_async(v36, v41);
            *(_DWORD *)(a1 + 88) = v35;
          }
          if (v35 == 2 && *(_QWORD *)(a1 + 64))
          {
            v37 = *(NSObject **)(a1 + 24);
            v38[0] = _NSConcreteStackBlock;
            v38[1] = 3221225472;
            v38[2] = sub_1002908A4;
            v38[3] = &unk_100811C60;
            v38[4] = a1;
            v39 = 2;
            *(_OWORD *)v40 = *(_OWORD *)buf;
            *(_OWORD *)&v40[12] = *(_OWORD *)&buf[12];
            dispatch_async(v37, v38);
          }
        }
      }
      goto LABEL_66;
    }
LABEL_54:
    rep = (double)std::chrono::steady_clock::now().__d_.__rep_;
    v34 = *(_QWORD *)(a1 + 64);
    *(double *)&v43 = rep;
    DWORD2(v43) = 4;
    BYTE12(v43) = 0;
    BYTE14(v43) = 0;
    v44 = 0;
    v45 = 0;
    v46 = 0;
    v47 = 0;
    v48 = 0;
    sub_10014CFFC(v34, &v43);
    goto LABEL_55;
  }
LABEL_66:

}

void sub_10029002C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100290040(void *a1@<X1>, _BYTE *a2@<X2>, uint64_t a3@<X8>)
{
  id v5;
  xpc_object_t value;
  void *v7;
  void *v8;
  char v9;
  __int16 v10;
  __int16 v11;
  __int16 v12;
  xpc_object_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  unsigned __int16 v17;
  xpc_object_t v18;
  void *v19;
  void *v20;
  uint64_t v21;
  xpc_object_t v22;
  void *v23;
  __int16 v24;
  void *v25;
  char v26;
  xpc_object_t v27;
  void *v28;
  unsigned __int16 uint64;
  unsigned __int16 v30;
  NSObject *v31;
  const char *v32;
  std::string *v33;
  const char *v34;
  const char *v35;
  const char *v36;
  const char *v37;
  const char *v38;
  const char *v39;
  std::string *v40;
  const char *v41;
  const char *v42;
  const char *v43;
  std::string *v44;
  std::string *v45;
  std::string *v46;
  NSObject *v47;
  const char *v48;
  unsigned __int16 v49;
  unsigned __int16 v50;
  __int16 v51;
  __int16 v52;
  char v53;
  char v54;
  char v55;
  char v56;
  unsigned __int16 v57;
  uint64_t v58;
  uint64_t v59;
  unsigned __int8 v60;
  unsigned __int16 v61;
  __int16 v62;
  _BOOL4 v63;
  unsigned int v64;
  std::string v65;
  std::string v66;
  std::string v67;
  uint8_t buf[4];
  _BYTE v69[10];
  std::string *v70;
  __int16 v71;
  const char *v72;
  __int16 v73;
  const char *v74;
  __int16 v75;
  const char *v76;
  __int16 v77;
  std::string *v78;
  __int16 v79;
  const char *v80;

  v5 = a1;
  *a2 = 0;
  if (xpc_dictionary_get_uint64(v5, "kMessageId") == 1500)
  {
    value = xpc_dictionary_get_value(v5, "kMessageArgs");
    v7 = (void *)objc_claimAutoreleasedReturnValue(value);
    v8 = v7;
    if (v7 && xpc_get_type(v7) == (xpc_type_t)&_xpc_type_dictionary)
    {
      v64 = *((_DWORD *)sub_100004784() + 144);
      v10 = sub_1002909C4(v8, "kWCMHToRCU1BTPowerStatus");
      v11 = sub_1002909C4(v8, "kWCMHToRCU1CellularStatus");
      v12 = sub_1002909C4(v8, "kWCMHToRCU1wiFiPowerStatus");
      v13 = xpc_dictionary_get_value(v8, "kWCMHToRCU1BTBandStatus");
      v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
      v15 = v14;
      if (v14 && xpc_get_type(v14) == (xpc_type_t)&_xpc_type_uint64)
      {
        v16 = xpc_uint64_get_value(v15);
        v63 = v16 < 0x3E8;
        if (v16 >= 0x3E8)
          v17 = 0;
        else
          v17 = v16;
        v61 = v17;
      }
      else
      {
        v61 = 0;
        v63 = 0;
      }

      v62 = sub_1002909C4(v8, "kWCMHToRCU1Cellularband");
      v18 = xpc_dictionary_get_value(v8, "kWCMHToRCU15GStatus");
      v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
      v20 = v19;
      if (v19 && xpc_get_type(v19) == (xpc_type_t)&_xpc_type_uint64 && (v21 = xpc_uint64_get_value(v20), v21 <= 3))
      {
        v55 = 1;
        v56 = 0;
        v60 = v21;
      }
      else
      {
        v60 = 0;
        v55 = 0;
        v56 = 1;
      }

      v22 = xpc_dictionary_get_value(v8, "kWCMHToRCU1DutyCycle");
      v23 = (void *)objc_claimAutoreleasedReturnValue(v22);
      v25 = v23;
      if (v23 && xpc_get_type(v23) == (xpc_type_t)&_xpc_type_uint64)
      {
        v26 = 0;
        v54 = 1;
        v58 = xpc_uint64_get_value(v25);
        v59 = v58 >> 8;
      }
      else
      {
        v54 = 0;
        v26 = 1;
        LOBYTE(v58) = 0;
        LOWORD(v59) = v24;
      }

      v53 = v26;
      if (sub_100360EFC(v64))
      {
        v27 = xpc_dictionary_get_value(v8, "kWCMHToRCU1ChannelsToTriggerGPIOBlanking");
        v28 = (void *)objc_claimAutoreleasedReturnValue(v27);

        if (v28)
          *a2 = 1;
        uint64 = xpc_dictionary_get_uint64(v8, "kWCMHToRCU1ChannelsToTriggerGPIOBlanking");
        v30 = xpc_dictionary_get_uint64(v8, "kWCMHToRCU1SideChannelsToTriggerGPIOBlanking_ChBegin");
        v57 = xpc_dictionary_get_uint64(v8, "kWCMHToRCU1SideChannelsToTriggerGPIOBlanking_ChEnd");
      }
      else
      {
        v57 = 0;
        v30 = 0;
        uint64 = 0;
      }
      v31 = (id)qword_10085F520;
      if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
      {
        v49 = v30;
        v50 = uint64;
        v52 = v12;
        if ((_BYTE)v10)
          v32 = "Y";
        else
          v32 = "N";
        if ((v10 & 0xFF00) == 0)
          v32 = "-";
        v48 = v32;
        v51 = v10;
        if (v63)
        {
          std::to_string(&v67, v61);
          if ((v67.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v33 = &v67;
          else
            v33 = (std::string *)v67.__r_.__value_.__r.__words[0];
        }
        else
        {
          v33 = (std::string *)"-";
        }
        if ((_BYTE)v11)
          v34 = "Y";
        else
          v34 = "N";
        if ((v11 & 0xFF00) != 0)
          v35 = v34;
        else
          v35 = "-";
        if ((_BYTE)v62)
          v36 = "Y";
        else
          v36 = "N";
        if ((v62 & 0xFF00) != 0)
          v37 = v36;
        else
          v37 = "-";
        if ((_BYTE)v12)
          v38 = "Y";
        else
          v38 = "N";
        if ((v12 & 0xFF00) != 0)
          v39 = v38;
        else
          v39 = "-";
        v40 = (std::string *)"-";
        if ((v56 & 1) == 0)
        {
          v41 = v35;
          v42 = v39;
          v43 = v37;
          v44 = v33;
          v40 = &v66;
          std::to_string(&v66, v60);
          if ((v66.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v40 = (std::string *)v66.__r_.__value_.__r.__words[0];
          v33 = v44;
          v37 = v43;
          v39 = v42;
          v35 = v41;
        }
        if ((v53 & 1) != 0)
        {
          *(_DWORD *)buf = 136316674;
          *(_QWORD *)v69 = v48;
          *(_WORD *)&v69[8] = 2080;
          v70 = v33;
          v71 = 2080;
          v72 = v35;
          v73 = 2080;
          v74 = v37;
          v75 = 2080;
          v76 = v39;
          v77 = 2080;
          v78 = v40;
          v79 = 2080;
          v80 = "-";
          _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "#coex,parseIncomingEvent-Received msg from UCM: BT [Power: %s, Band: %s], Cellular [Power: %s, Band: %s], WiFi [Power: %s, Channel: %s], R1DutyCycleNeeded: %s", buf, 0x48u);
        }
        else
        {
          v45 = v33;
          std::to_string(&v65, v58 | ((unint64_t)v59 << 8));
          if ((v65.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v46 = &v65;
          else
            v46 = (std::string *)v65.__r_.__value_.__r.__words[0];
          *(_DWORD *)buf = 136316674;
          *(_QWORD *)v69 = v48;
          *(_WORD *)&v69[8] = 2080;
          v70 = v45;
          v71 = 2080;
          v72 = v35;
          v73 = 2080;
          v74 = v37;
          v75 = 2080;
          v76 = v39;
          v77 = 2080;
          v78 = v40;
          v79 = 2080;
          v80 = (const char *)v46;
          _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "#coex,parseIncomingEvent-Received msg from UCM: BT [Power: %s, Band: %s], Cellular [Power: %s, Band: %s], WiFi [Power: %s, Channel: %s], R1DutyCycleNeeded: %s", buf, 0x48u);
          if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v65.__r_.__value_.__l.__data_);
        }
        v10 = v51;
        v12 = v52;
        v30 = v49;
        uint64 = v50;
        if ((v56 & 1) == 0 && SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v66.__r_.__value_.__l.__data_);
        if (v63 && SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v67.__r_.__value_.__l.__data_);
      }

      if (sub_100360EFC(v64))
      {
        v47 = qword_10085F520;
        if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67109632;
          *(_DWORD *)v69 = uint64;
          *(_WORD *)&v69[4] = 1024;
          *(_DWORD *)&v69[6] = v30;
          LOWORD(v70) = 1024;
          *(_DWORD *)((char *)&v70 + 2) = v57;
          _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEFAULT, "#coex,parseIncomingEvent-Recevied msg from UCM: R2GpioBlanking:ChannelsToTriggerGPIOBlanking(%d), NbChannelBegIndex(%d), NbChannelEndIndex(%d)", buf, 0x14u);
        }
      }
      *(_WORD *)a3 = v10;
      *(_WORD *)(a3 + 2) = v11;
      *(_WORD *)(a3 + 4) = v12;
      *(_WORD *)(a3 + 6) = v61;
      *(_BYTE *)(a3 + 8) = v63;
      *(_WORD *)(a3 + 10) = v62;
      *(_WORD *)(a3 + 12) = v60;
      *(_BYTE *)(a3 + 14) = v55;
      *(_WORD *)(a3 + 16) = v58 | (unsigned __int16)((_WORD)v59 << 8);
      *(_BYTE *)(a3 + 18) = v54;
      *(_WORD *)(a3 + 20) = uint64;
      *(_WORD *)(a3 + 22) = v30;
      v9 = 1;
      *(_WORD *)(a3 + 24) = v57;
    }
    else
    {
      v9 = 0;
      *(_BYTE *)a3 = 0;
    }
    *(_BYTE *)(a3 + 26) = v9;

  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
      sub_1003E4E58();
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 26) = 0;
  }

}

void sub_1002906A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, int a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  void *v39;
  void *v40;
  void *v41;

  _Unwind_Resume(a1);
}

void sub_10029074C(uint64_t a1)
{
  uint64_t v1;
  double rep;
  __int16 v3;
  uint64_t v4;
  __int128 v5;
  int v6;
  char v7;
  char v8;
  char v9;
  char v10;

  v1 = *(_QWORD *)(a1 + 32);
  rep = (double)std::chrono::steady_clock::now().__d_.__rep_;
  v3 = *(_WORD *)(v1 + 40);
  v4 = *(_QWORD *)(v1 + 64);
  *(double *)&v5 = rep;
  DWORD2(v5) = 1;
  WORD6(v5) = v3;
  BYTE14(v5) = 1;
  v6 = 0;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  sub_10014CFFC(v4, &v5);
}

void sub_1002907B0(uint64_t a1)
{
  uint64_t v2;
  std::chrono::steady_clock::time_point v3;
  int v4;
  NSObject *v5;
  uint64_t v6;
  __int128 v7;
  int v8;
  char v9;
  char v10;
  char v11;
  char v12;
  uint8_t buf[4];
  int v14;

  v2 = *(_QWORD *)(a1 + 32);
  v3.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v4 = *(_DWORD *)(a1 + 40);
  v5 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    v14 = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#coex,R2ChannelToTriggerGpioBlankingChanged changed %d", buf, 8u);
  }
  v6 = *(_QWORD *)(v2 + 64);
  *(double *)&v7 = (double)v3.__d_.__rep_;
  DWORD2(v7) = 2;
  BYTE12(v7) = 0;
  BYTE14(v7) = 0;
  v8 = v4;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  sub_10014CFFC(v6, &v7);
}

void sub_1002908A4(uint64_t a1)
{
  uint64_t v2;
  std::chrono::steady_clock::time_point v3;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  int v5;
  int v6;
  int v7;
  NSObject *v8;
  uint64_t v9;
  __int128 v10;
  int v11;
  __int16 v12;
  char v13;
  __int16 v14;
  char v15;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  int v19;

  v2 = *(_QWORD *)(a1 + 32);
  v3.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  if (!*(_BYTE *)(a1 + 70))
    sub_10000BA44();
  rep = v3.__d_.__rep_;
  v5 = *(_DWORD *)(a1 + 40);
  v6 = *(unsigned __int16 *)(a1 + 66);
  v7 = *(unsigned __int16 *)(a1 + 68);
  v8 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109376;
    v17 = v6;
    v18 = 1024;
    v19 = v7;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#coex,R2NbChannelIdxToTriggerGpioBlankingChanged changed begin: %d, end: %d", buf, 0xEu);
  }
  v9 = *(_QWORD *)(v2 + 64);
  *(double *)&v10 = (double)rep;
  DWORD2(v10) = 3;
  BYTE12(v10) = 0;
  BYTE14(v10) = 0;
  v11 = v5;
  v12 = v6;
  v13 = 1;
  v14 = v7;
  v15 = 1;
  sub_10014CFFC(v9, &v10);
}

uint64_t sub_1002909C4(void *a1, const char *a2)
{
  xpc_object_t value;
  void *v3;
  void *v4;
  _BOOL4 v5;
  int v6;

  value = xpc_dictionary_get_value(a1, a2);
  v3 = (void *)objc_claimAutoreleasedReturnValue(value);
  v4 = v3;
  if (v3 && xpc_get_type(v3) == (xpc_type_t)&_xpc_type_BOOL)
  {
    v5 = xpc_BOOL_get_value(v4);
    v6 = 1;
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }

  return v5 | (v6 << 8);
}

void sub_100290A30(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100290A44(uint64_t a1, const char *const *keys, xpc_object_t *values, int a4)
{
  id v5;

  v5 = xpc_dictionary_create(keys, values, a4);
  xpc_connection_send_message(*(xpc_connection_t *)(a1 + 32), v5);

}

void sub_100290A90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_100290AA4(uint64_t a1)
{
  xpc_object_t values;
  char *keys;

  keys = "kMessageId";
  values = xpc_uint64_create(0x321uLL);
  sub_100290A44(a1, (const char *const *)&keys, &values, 1);

}

void sub_100290B28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

uint64_t sub_100290B44(uint64_t a1)
{
  sub_100290AA4(a1);
  return 1;
}

BOOL sub_100290B5C(uint64_t a1, int *a2)
{
  BOOL v2;
  int v5;
  __int16 v6;
  NSObject *v7;
  int v8;
  __int16 v9;
  NSObject *v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  char v18;
  __int16 v19;
  uint64_t v20;
  int v21;
  uint8_t buf[4];
  int v23;
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;
  __int16 v28;
  int v29;
  __int16 v30;
  int v31;
  __int16 v32;
  int v33;

  v5 = *a2;
  if (*a2 == 2)
  {
    v18 = 0;
    v20 = 0;
    v21 = 0;
    if (*((_BYTE *)a2 + 19))
    {
      v7 = (id)qword_10085F520;
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        if (!*((_BYTE *)a2 + 19))
          sub_10000BA44();
        v8 = *((unsigned __int8 *)a2 + 18);
        *(_DWORD *)buf = 67109120;
        v23 = v8;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#coex,RangingStatusUpdate-channel,%d", buf, 8u);
      }

      if (!*((_BYTE *)a2 + 19))
        sub_10000BA44();
      if (*((_BYTE *)a2 + 18) == 5)
        v9 = 5;
      else
        v9 = 9;
    }
    else
    {
      v9 = *(_WORD *)(a1 + 74);
    }
    v19 = v9;
    v2 = *((_BYTE *)a2 + 16) != 0;
    if (*((_BYTE *)a2 + 16))
    {
      if (*((unsigned __int16 *)a2 + 6) | *((unsigned __int16 *)a2 + 5))
      {
        v10 = (id)qword_10085F520;
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        {
          if (!*((_BYTE *)a2 + 16))
            sub_10000BA44();
          v11 = *((unsigned __int16 *)a2 + 2);
          v12 = *((unsigned __int16 *)a2 + 3);
          v13 = *((unsigned __int16 *)a2 + 4);
          v14 = *((unsigned __int16 *)a2 + 6);
          v15 = *((unsigned __int16 *)a2 + 5);
          v16 = *((unsigned __int16 *)a2 + 7);
          *(_DWORD *)buf = 67110400;
          v23 = v11;
          v24 = 1024;
          v25 = v12;
          v26 = 1024;
          v27 = v13;
          v28 = 1024;
          v29 = v14;
          v30 = 1024;
          v31 = v15;
          v32 = 1024;
          v33 = v16;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#coex,RangingStatusUpdate-onDuration(%d), cycleLength(%d), numberCycles(%d), frameConfigMask(%d), priorityMask(%d), nbBandMask(%d)", buf, 0x26u);
        }

        v18 = 1;
        if (!*((_BYTE *)a2 + 16))
          sub_10000BA44();
        v20 = *(_QWORD *)(a2 + 1);
        v21 = a2[3];
      }
      sub_10028F8D8(a1, (BOOL *)&v18);
    }
  }
  else if (v5 == 1)
  {
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
      sub_1003E4EB0();
    if (!*((_BYTE *)a2 + 19))
      return 0;
    if (*((_BYTE *)a2 + 18) == 5)
      v6 = 5;
    else
      v6 = 9;
    *(_WORD *)(a1 + 74) = v6;
    sub_10028F8D8(a1, (BOOL *)(a1 + 72));
    return 1;
  }
  else if (!v5)
  {
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
      sub_1003E4E84();
    return 0;
  }
  return v2;
}

void sub_100290E04(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_100290E28(uint64_t a1)
{
  NSObject *v1;
  uint64_t v2;
  _QWORD v4[6];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  __n128 (*v8)(__n128 *, __n128 *);
  uint64_t (*v9)();
  _QWORD v10[2];
  char v11;
  __int16 v12;
  char v13;
  char v14;

  v5 = 0;
  v6 = &v5;
  v7 = 0x4012000000;
  v8 = sub_100290EE4;
  v9 = nullsub_119;
  v11 = 0;
  v12 = 0;
  v13 = 0;
  v14 = 0;
  v10[0] = 0;
  *(_QWORD *)((char *)v10 + 7) = 0;
  v1 = *(NSObject **)(a1 + 16);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_100290EF4;
  v4[3] = &unk_10080AC10;
  v4[4] = &v5;
  v4[5] = a1;
  dispatch_sync(v1, v4);
  v2 = v6[6];
  _Block_object_dispose(&v5, 8);
  return v2;
}

__n128 sub_100290EE4(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = a2[3];
  a1[3] = result;
  return result;
}

__n128 sub_100290EF4(uint64_t a1)
{
  __n128 result;

  result = *(__n128 *)(*(_QWORD *)(a1 + 40) + 42);
  *(__n128 *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 48) = result;
  return result;
}

uint64_t sub_100290F08()
{
  return 0;
}

uint64_t sub_100290F10()
{
  return 0;
}

uint64_t sub_100290F18()
{
  return 1;
}

uint64_t sub_100290F20()
{
  return 1;
}

std::string *sub_100290F28(std::string *a1)
{
  void *v2;
  void *v3;
  void *v4;
  int v5;
  NSObject *v6;
  id v7;
  std::__fs::filesystem::file_status v8;
  unsigned __int8 v9;
  unsigned __int8 v11;
  char *v12;
  std::error_code __ec;
  unsigned __int8 v14;
  std::__fs::filesystem::path v15;

  a1->__r_.__value_.__s.__data_[0] = 0;
  a1[1].__r_.__value_.__s.__data_[0] = 0;
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(CFSTR("/System/Library/NearbyInteractionBundles"), "stringByAppendingPathComponent:", CFSTR("SpatialGesturesResources.bundle")));
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle bundleWithPath:](NSBundle, "bundleWithPath:", v2));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "pathForResource:ofType:", CFSTR("model.espresso"), CFSTR("net")));
  __ec.__val_ = 0;
  __ec.__cat_ = std::system_category();
  v12 = (char *)objc_msgSend(CFSTR("/System/Library/NearbyInteractionBundles"), "UTF8String");
  sub_10029149C(&v15.__pn_, &v12);
  std::__fs::filesystem::__status(&v15, &__ec);
  if (v14)
  {
    __ec.__val_ = 0;
    __ec.__cat_ = std::system_category();
    v5 = v14;
  }
  else
  {
    v5 = 0;
  }
  if (SHIBYTE(v15.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__pn_.__r_.__value_.__l.__data_);
  if (v5 == 255 || !v5)
  {
    v6 = (id)qword_10085F520;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      sub_1003E4F18((uint64_t)objc_msgSend(CFSTR("/System/Library/NearbyInteractionBundles"), "UTF8String"), (uint64_t)&v15, v6);
LABEL_19:

    goto LABEL_20;
  }
  v7 = objc_retainAutorelease(v2);
  v12 = (char *)objc_msgSend(v7, "UTF8String");
  sub_10029149C(&v15.__pn_, &v12);
  v8 = std::__fs::filesystem::__status(&v15, &__ec);
  if (v14)
  {
    __ec.__val_ = 0;
    v8 = (std::__fs::filesystem::file_status)std::system_category();
    __ec.__cat_ = (const std::error_category *)v8;
    v9 = v14;
  }
  else
  {
    v9 = 0;
  }
  if (SHIBYTE(v15.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__pn_.__r_.__value_.__l.__data_);
  if (v9 == 255 || !v9)
  {
    v6 = (id)qword_10085F520;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      sub_1003E4EDC((uint64_t)objc_msgSend(objc_retainAutorelease(v7), "UTF8String"), (uint64_t)&v15, v6);
    goto LABEL_19;
  }
  v11 = atomic_load((unsigned __int8 *)&qword_10085B4D8);
  if ((v11 & 1) == 0)
  {
    v8 = (std::__fs::filesystem::file_status)__cxa_guard_acquire(&qword_10085B4D8);
    if (*(_DWORD *)&v8.__ft_)
    {
      sub_10000BF04(&stru_10085B4C0, (char *)objc_msgSend(objc_retainAutorelease(v4), "UTF8String"));
      __cxa_atexit((void (*)(void *))sub_100291278, &stru_10085B4C0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_10085B4D8);
    }
  }
  if (sub_1002912A8(*(_QWORD *)&v8, (char *)&stru_10085B4C0))
    sub_100291384(a1, &stru_10085B4C0);
LABEL_20:

  return a1;
}

void sub_1002911E0(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;

  __cxa_guard_abort(&qword_10085B4D8);

  if (*(_BYTE *)(v1 + 24))
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100291278(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

BOOL sub_1002912A8(uint64_t a1, char *a2)
{
  char v3;
  char v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  std::string __p;
  std::error_code __ec;
  unsigned __int8 v11;

  __ec.__val_ = 0;
  __ec.__cat_ = std::system_category();
  v3 = 1;
  while (1)
  {
    v4 = v3;
    if ((v3 & 1) == 0)
      break;
    sub_10017ED1C(&__p, a2);
    std::__fs::filesystem::__status((const std::__fs::filesystem::path *)&__p, &__ec);
    if (v11)
    {
      __ec.__val_ = 0;
      __ec.__cat_ = std::system_category();
      v5 = v11;
    }
    else
    {
      v5 = 0;
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v5 != 255)
    {
      v3 = 0;
      if (v5)
        continue;
    }
    v6 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
      sub_1003E4F54((uint64_t *)a2, v6, v7);
    return (v4 & 1) == 0;
  }
  return (v4 & 1) == 0;
}

std::string *sub_100291384(std::string *__dst, const std::string *a2)
{
  __int128 v3;

  if (__dst[1].__r_.__value_.__s.__data_[0])
  {
    std::string::operator=(__dst, a2);
  }
  else
  {
    if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
    {
      sub_100004678(__dst, a2->__r_.__value_.__l.__data_, a2->__r_.__value_.__l.__size_);
    }
    else
    {
      v3 = *(_OWORD *)&a2->__r_.__value_.__l.__data_;
      __dst->__r_.__value_.__r.__words[2] = a2->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__dst->__r_.__value_.__l.__data_ = v3;
    }
    __dst[1].__r_.__value_.__s.__data_[0] = 1;
  }
  return __dst;
}

uint64_t sub_1002913F0@<X0>(__int128 *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1002913FC(a2, a1);
}

uint64_t sub_1002913FC(uint64_t a1, __int128 *a2)
{
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 24) = 0;
  sub_100291444((_OWORD *)a1, a2);
  return a1;
}

void sub_100291428(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 24))
    sub_1003E4FD0(v1);
  _Unwind_Resume(exception_object);
}

_OWORD *sub_100291444(_OWORD *__dst, __int128 *a2)
{
  _BYTE *v2;
  __int128 v3;

  if (*((_BYTE *)a2 + 24))
  {
    v2 = __dst;
    if (*((char *)a2 + 23) < 0)
    {
      __dst = sub_100004678(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
    }
    else
    {
      v3 = *a2;
      *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
      *__dst = v3;
    }
    v2[24] = 1;
  }
  return __dst;
}

std::string *sub_10029149C(std::string *this, char **a2)
{
  char *v3;
  char *v4;

  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  v3 = *a2;
  v4 = v3 - 1;
  while (*++v4)
    ;
  sub_10017ED80(this, v3, v4);
  return this;
}

void sub_1002914DC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void sub_1002914F8(unsigned __int8 *a1)
{
  NSObject *v2;
  _QWORD *v3;
  int v4;
  int v5;
  int v6;
  _QWORD *v7;
  int v8;
  int v9;
  int v10;
  int v11;
  _DWORD v12[2];
  __int16 v13;
  int v14;
  __int16 v15;
  _QWORD *v16;
  __int16 v17;
  int v18;
  __int16 v19;
  _QWORD *v20;
  __int16 v21;
  int v22;
  __int16 v23;
  int v24;
  __int16 v25;
  int v26;
  __int16 v27;
  int v28;

  v2 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    v3 = a1 + 8;
    if ((char)a1[31] < 0)
      v3 = (_QWORD *)*v3;
    v4 = *a1;
    v5 = a1[1];
    v6 = *((unsigned __int16 *)a1 + 16);
    v7 = a1 + 40;
    if ((char)a1[63] < 0)
      v7 = (_QWORD *)*v7;
    v8 = *((_DWORD *)a1 + 16);
    v9 = *((_DWORD *)a1 + 17);
    v10 = *((_DWORD *)a1 + 18);
    v11 = *((_DWORD *)a1 + 19);
    v12[0] = 67176707;
    v12[1] = v4;
    v13 = 1025;
    v14 = v5;
    v15 = 2081;
    v16 = v3;
    v17 = 1025;
    v18 = v6;
    v19 = 2081;
    v20 = v7;
    v21 = 1025;
    v22 = v8;
    v23 = 1025;
    v24 = v9;
    v25 = 1025;
    v26 = v10;
    v27 = 1025;
    v28 = v11;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#fu,endian,%{private}d,headerVersion,%{private}d,type,%{private}s,version,%{private}d,copyright,%{private}s,timestamp,%{private}u,expiration,%{private}u,dataSizeBytes,%{private}u,crc,%{private}u", (uint8_t *)v12, 0x40u);
  }
}

unint64_t sub_100291614(uint64_t *a1)
{
  uint64_t v1;
  unint64_t v2;
  _QWORD v4[16];
  uint64_t v5;
  void (__cdecl **v6[2])(std::ifstream *__hidden);
  _BYTE v7[408];
  uint64_t v8;

  sub_10014AA68(v6, a1, 6);
  if ((v7[(unint64_t)*(v6[0] - 3) + 16] & 5) != 0)
  {
    v1 = 0;
    v2 = 0;
  }
  else
  {
    std::istream::tellg(v4, v6);
    v2 = v5 & 0xFFFFFFFFFFFFFF00;
    v1 = v5;
  }
  std::filebuf::~filebuf(v7);
  std::ios::~ios(&v8);
  return v2 | v1;
}

void sub_100291710(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  sub_10014AEAC(&a26);
  _Unwind_Resume(a1);
}

BOOL sub_10029172C(const char *a1)
{
  stat v2;

  if (a1[23] < 0)
    a1 = *(const char **)a1;
  return stat(a1, &v2) >= 0;
}

void sub_100291764(const char *a1)
{
  stat v1;

  if (a1[23] < 0)
    a1 = *(const char **)a1;
  if ((stat(a1, &v1) & 0x80000000) == 0)
    CFAbsoluteTimeGetCurrent();
}

uint64_t sub_1002917DC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  if (!*(_QWORD *)(a1 + 128))
  {
    v16 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
      sub_1003E4FE4(v16, v17, v18, v19, v20, v21, v22, v23);
    return 0;
  }
  v3 = *(unsigned __int8 *)(a2 + 31);
  if ((v3 & 0x80u) != 0)
    v3 = *(_QWORD *)(a2 + 16);
  if (v3 != 30)
  {
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
      sub_1003E5088();
    return 0;
  }
  if ((*(char *)(a2 + 63) & 0x80000000) == 0 || *(_QWORD *)(a2 + 48) != 128)
  {
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
      sub_1003E5014();
    return 0;
  }
  v5 = a2 + 8;
  v6 = 1;
  std::ostream::write(a1, a2, 1);
  std::ostream::write(a1, a2 + 1, 1);
  v7 = *(char *)(a2 + 31);
  if (v7 >= 0)
    v8 = v5;
  else
    v8 = *(_QWORD *)(a2 + 8);
  if (v7 >= 0)
    v9 = *(unsigned __int8 *)(a2 + 31);
  else
    v9 = *(_QWORD *)(a2 + 16);
  std::ostream::write(a1, v8, v9);
  std::ostream::write(a1, a2 + 32, 2);
  v12 = *(_QWORD *)(a2 + 40);
  v11 = a2 + 40;
  v10 = v12;
  v13 = *(char *)(v11 + 23);
  if (v13 >= 0)
    v14 = v11;
  else
    v14 = v10;
  if (v13 >= 0)
    v15 = *(unsigned __int8 *)(v11 + 23);
  else
    v15 = *(_QWORD *)(v11 + 8);
  std::ostream::write(a1, v14, v15);
  std::ostream::write(a1, v11 + 24, 4);
  std::ostream::write(a1, v11 + 28, 4);
  std::ostream::write(a1, v11 + 32, 4);
  std::ostream::write(a1, v11 + 36, 4);
  std::ostream::flush(a1);
  return v6;
}

BOOL sub_1002919A8(FILE *__stream, uint64_t a2)
{
  size_t v3;
  int v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  uint64_t v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _BOOL8 v33;
  uint64_t v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  NSObject *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _OWORD v47[8];
  char v48;
  _BYTE __s[30];
  char v50;
  unsigned __int8 __ptr;
  unsigned __int8 v52;
  _BYTE v53[30];
  unsigned __int16 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;

  if (!__stream)
  {
    v8 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
      sub_1003E50FC(v8, v9, v10, v11, v12, v13, v14, v15);
    return 0;
  }
  v3 = fread(&__ptr, 1uLL, 0xB2uLL, __stream);
  if (v3 != 178)
  {
    v16 = v3;
    v17 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
      sub_1003E5264(v16, v17, v18);
    return 0;
  }
  v4 = __ptr;
  *(_BYTE *)a2 = __ptr;
  if ((v4 - 1) >= 2)
  {
    v19 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
      sub_1003E51FC(a2, v19, v20, v21, v22, v23, v24, v25);
    return 0;
  }
  v5 = v52;
  *(_BYTE *)(a2 + 1) = v52;
  v6 = a2 + 1;
  if (!v5)
  {
    v26 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
      sub_1003E512C(v6, v26, v27, v28, v29, v30, v31, v32);
    return 0;
  }
  v50 = 0;
  *(_OWORD *)__s = *(_OWORD *)v53;
  *(_OWORD *)&__s[14] = *(_OWORD *)&v53[14];
  std::string::assign((std::string *)(a2 + 8), __s);
  if (*(_BYTE *)a2 == 2)
    v7 = bswap32(v54) >> 16;
  else
    v7 = v54;
  *(_WORD *)(a2 + 32) = v7;
  v35 = a2 + 32;
  v33 = v7 != 0;
  if (v7)
  {
    v48 = 0;
    v47[4] = v59;
    v47[5] = v60;
    v47[6] = v61;
    v47[7] = v62;
    v47[0] = v55;
    v47[1] = v56;
    v47[2] = v57;
    v47[3] = v58;
    std::string::assign((std::string *)(a2 + 40), (const std::string::value_type *)v47);
    if (*(_BYTE *)a2 == 2)
    {
      v36 = bswap32(v63);
      v37 = bswap32(v64);
      v38 = bswap32(v65);
      v39 = bswap32(v66);
    }
    else
    {
      v36 = v63;
      v37 = v64;
      v38 = v65;
      v39 = v66;
    }
    *(_DWORD *)(a2 + 64) = v36;
    *(_DWORD *)(a2 + 68) = v37;
    *(_DWORD *)(a2 + 72) = v38;
    *(_DWORD *)(a2 + 76) = v39;
  }
  else
  {
    v40 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
      sub_1003E5194(v35, v40, v41, v42, v43, v44, v45, v46);
  }
  return v33;
}

BOOL sub_100291C14(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  char v5;
  __darwin_ino64_t v6;
  NSObject *v7;
  const char *v8;
  FILE *v9;
  FILE *v10;
  _BOOL8 v11;
  uint64_t v13;
  stat v14;

  v3 = a1;
  if (*(char *)(a1 + 23) < 0)
    a1 = *(_QWORD *)a1;
  if (stat((const char *)a1, &v14) < 0)
  {
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
      sub_1003E53AC();
    return 0;
  }
  v4 = sub_100291614((uint64_t *)v3);
  if (!v5)
  {
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
      sub_1003E52DC();
    return 0;
  }
  v6 = v4;
  if (v4 <= 0xB1)
  {
    v7 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
    {
      if (*(char *)(v3 + 23) >= 0)
        v13 = v3;
      else
        v13 = *(_QWORD *)v3;
      v14.st_dev = 136315650;
      *(_QWORD *)&v14.st_mode = v13;
      WORD2(v14.st_ino) = 2048;
      *(__darwin_ino64_t *)((char *)&v14.st_ino + 6) = v6;
      HIWORD(v14.st_gid) = 1024;
      v14.st_rdev = 178;
      _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "#fu,getHeader,failed,file,%s,fileTooSmall,size,%lu,expected,%d", (uint8_t *)&v14, 0x1Cu);
    }
  }
  if (*(char *)(v3 + 23) >= 0)
    v8 = (const char *)v3;
  else
    v8 = *(const char **)v3;
  v9 = fopen(v8, "rb");
  v10 = v9;
  if (!v9)
  {
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
      sub_1003E5344();
    return 0;
  }
  v11 = sub_1002919A8(v9, a2);
  fclose(v10);
  return v11;
}

BOOL sub_100291E0C(uint64_t *a1, int *a2)
{
  uint64_t v3;
  void (__cdecl **v4)(std::ifstream *__hidden);
  int v5;
  unint64_t v6;
  void (__cdecl **v7)(std::ifstream *__hidden);
  char v8;
  char v10;
  void (__cdecl **v11[2])(std::ifstream *__hidden);
  _BYTE v12[120];
  uint64_t v13;
  uint64_t v14;

  sub_10014AA68(v11, a1, 4);
  v3 = v13;
  if (v13)
  {
    v4 = v11[0];
    *(_DWORD *)((char *)&v11[1] + (unint64_t)*(v11[0] - 3)) &= ~0x1000u;
    v10 = 0;
    v5 = -1;
    *a2 = -1;
    if ((v12[(_QWORD)*(v4 - 3) + 16] & 2) == 0)
    {
      v6 = -174;
      while (1)
      {
        std::istream::read(v11, &v10, 1);
        v7 = v11[0];
        if ((v12[(unint64_t)*(v11[0] - 3) + 16] & 2) != 0)
          break;
        if (v6 >= 4)
        {
          v8 = v10;
        }
        else
        {
          v8 = 0;
          v10 = 0;
        }
        v5 = dword_100475480[(v8 ^ *a2)] ^ (*a2 >> 8);
        *a2 = v5;
        ++v6;
        if ((v12[(_QWORD)*(v7 - 3) + 16] & 2) != 0)
          goto LABEL_13;
      }
      v5 = *a2;
    }
LABEL_13:
    *a2 = ~v5;
  }
  else if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
  {
    sub_1003E5414();
  }
  std::filebuf::~filebuf(v12);
  std::ios::~ios(&v14);
  return v3 != 0;
}

void sub_100291FBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  _Unwind_Resume(exception_object);
}

BOOL sub_100291FD8(uint64_t *a1, int *a2)
{
  _BOOL8 v4;
  void *__p;
  char v7;

  sub_10000BF04(&__p, "generateCrc");
  v4 = sub_100291E0C(a1, a2);
  if (v7 < 0)
    operator delete(__p);
  return v4;
}

void sub_100292038(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100292054(uint64_t a1)
{
  BOOL v2;
  BOOL v3;
  int v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v8;
  int v9;
  unsigned __int8 v10[8];
  void *v11;
  uint64_t v12;
  uint64_t v13;
  __int16 v14;
  void *__p;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  _BYTE buf[12];
  __int16 v20;
  int v21;
  __int16 v22;
  int v23;

  *(_WORD *)v10 = 0;
  v16 = 0;
  v17 = 0;
  __p = 0;
  v12 = 0;
  v13 = 0;
  v11 = 0;
  v14 = 0;
  v18 = xmmword_10046C230;
  if (!sub_100291C14(a1, (uint64_t)v10))
  {
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
      sub_1003E5490();
    goto LABEL_11;
  }
  sub_1002914F8(v10);
  v9 = 0;
  sub_10000BF04(buf, "isCrcOkay");
  v2 = sub_100291E0C((uint64_t *)a1, &v9);
  v3 = v2;
  if (SHIBYTE(v23) < 0)
  {
    operator delete(*(void **)buf);
    if (!v3)
      goto LABEL_11;
  }
  else if (!v2)
  {
    goto LABEL_11;
  }
  v4 = v9;
  if (HIDWORD(v18) == v9)
  {
    v5 = 1;
    goto LABEL_12;
  }
  v6 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
  {
    if (*(char *)(a1 + 23) >= 0)
      v8 = a1;
    else
      v8 = *(_QWORD *)a1;
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = v8;
    v20 = 1024;
    v21 = HIDWORD(v18);
    v22 = 1024;
    v23 = v4;
    _os_log_error_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "#fu,isCrcOkay,file,%s,crcMismatch,onFile,%08x,calculated,%08x", buf, 0x18u);
  }
LABEL_11:
  v5 = 0;
LABEL_12:
  if (SHIBYTE(v17) < 0)
    operator delete(__p);
  if (SHIBYTE(v13) < 0)
    operator delete(v11);
  return v5;
}

void sub_100292210(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  _Unwind_Resume(exception_object);
}

BOOL sub_100292248(uint64_t a1)
{
  char v2;
  _BOOL8 result;
  NSObject *v4;
  _BOOL4 v5;
  uint64_t v6;
  int v7;
  uint64_t v8;

  sub_100291614((uint64_t *)a1);
  if (!v2)
  {
    v4 = qword_10085F520;
    v5 = os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT);
    result = 0;
    if (!v5)
      return result;
    if (*(char *)(a1 + 23) >= 0)
      v6 = a1;
    else
      v6 = *(_QWORD *)a1;
    v7 = 136315138;
    v8 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#fu,%s does not exist", (uint8_t *)&v7, 0xCu);
    return 0;
  }
  if ((sub_100292054(a1) & 1) != 0)
    return 1;
  result = os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR);
  if (result)
  {
    sub_1003E54F4();
    return 0;
  }
  return result;
}

BOOL sub_100292354(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  char v5;
  uint64_t v6;
  _BOOL8 result;
  NSObject *v8;
  _BOOL4 v9;
  uint64_t v10;
  NSObject *v11;
  int v12;
  uint64_t v13;

  v4 = sub_100291614((uint64_t *)a1);
  if (!v5)
  {
    v8 = qword_10085F520;
    v9 = os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT);
    result = 0;
    if (!v9)
      return result;
    if (*(char *)(a1 + 23) >= 0)
      v10 = a1;
    else
      v10 = *(_QWORD *)a1;
    v12 = 136315138;
    v13 = v10;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#fu,%s does not exist", (uint8_t *)&v12, 0xCu);
    return 0;
  }
  v6 = v4;
  if (v4 != a2)
  {
    v11 = qword_10085F520;
    result = os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    sub_1003E5558(a2, v6, v11);
    return 0;
  }
  if ((sub_100292054(a1) & 1) != 0)
    return 1;
  result = os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR);
  if (result)
  {
    sub_1003E54F4();
    return 0;
  }
  return result;
}

void sub_1002924A8(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = a1;
}

void sub_1002924C0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0x12u);
}

void sub_1002924CC(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = a1;
}

void sub_100292538(id a1)
{
  id v1;
  void *v2;
  void *v3;
  unsigned int v4;

  v1 = -[NIServerKeychainManager _initInternal]([NIServerKeychainManager alloc], "_initInternal");
  v2 = (void *)qword_10085B4E0;
  qword_10085B4E0 = (uint64_t)v1;

  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  v4 = objc_msgSend(v3, "BOOLForKey:", CFSTR("KMUnitTestOverride"));

  if (v4)
  {
    objc_msgSend((id)qword_10085B4E0, "_unitTest1");
    objc_msgSend((id)qword_10085B4E0, "_unitTest2");
    _objc_msgSend((id)qword_10085B4E0, "_unitTest3");
  }
}

void sub_1002925C8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002926A0(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  int v4;
  int v5;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v7;
  __CFDictionary *v8;
  CFBooleanRef v9;
  void *v10;
  void *v11;
  void *v12;
  CFBooleanRef v13;
  const void **v14;
  OSStatus v15;
  NSObject *v16;
  CFMutableDictionaryRef v17;
  __CFDictionary *v18;
  __CFDictionary *v19;
  CFBooleanRef v20;
  void *v21;
  void *v22;
  CFBooleanRef v23;
  void *v24;
  OSStatus v25;
  NSObject *v26;
  void *key;
  uint8_t buf[4];
  uint64_t v29;
  __int16 v30;
  int v31;
  __int16 v32;
  int v33;

  if (objc_msgSend(*(id *)(a1 + 32), "_shouldLog"))
  {
    v2 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
    {
      v3 = *(_QWORD *)(a1 + 40);
      v4 = *(unsigned __int8 *)(a1 + 56);
      v5 = *(unsigned __int8 *)(a1 + 57);
      *(_DWORD *)buf = 138478339;
      v29 = v3;
      v30 = 1024;
      v31 = v4;
      v32 = 1024;
      v33 = v5;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#ni-km,Write: %{private}@, %d, %d", buf, 0x18u);
    }
  }
  Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  v7 = (__CFDictionary *)CFAutorelease(Mutable);
  v8 = v7;
  if (*(_BYTE *)(a1 + 57))
    v9 = kCFBooleanTrue;
  else
    v9 = kCFBooleanFalse;
  key = (void *)kSecUseSystemKeychain;
  CFDictionaryAddValue(v7, kSecUseSystemKeychain, v9);
  CFDictionaryAddValue(v8, kSecClass, kSecClassGenericPassword);
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "data"));
  CFDictionaryAddValue(v8, kSecValueData, v10);

  CFDictionaryAddValue(v8, kSecUseDataProtectionKeychain, kCFBooleanTrue);
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "account"));
  CFDictionaryAddValue(v8, kSecAttrAccount, v11);

  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "service"));
  CFDictionaryAddValue(v8, kSecAttrService, v12);

  CFDictionaryAddValue(v8, kSecAttrAccessGroup, CFSTR("com.apple.nearbyd"));
  if (*(_BYTE *)(a1 + 56))
    v13 = kCFBooleanTrue;
  else
    v13 = kCFBooleanFalse;
  CFDictionaryAddValue(v8, kSecAttrSynchronizable, v13);
  v14 = (const void **)&kSecAttrAccessibleAfterFirstUnlock;
  if (!*(_BYTE *)(a1 + 56))
    v14 = (const void **)&kSecAttrAccessibleAfterFirstUnlockThisDeviceOnly;
  CFDictionaryAddValue(v8, kSecAttrAccessible, *v14);
  v15 = SecItemAdd(v8, 0);
  if (objc_msgSend(*(id *)(a1 + 32), "_shouldLog"))
  {
    v16 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67174657;
      LODWORD(v29) = v15;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "#ni-km,Write status: %{private}d.", buf, 8u);
    }
  }
  if (v15 == -25299)
  {
    v17 = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    v18 = (__CFDictionary *)CFAutorelease(v17);
    v19 = v18;
    if (*(_BYTE *)(a1 + 57))
      v20 = kCFBooleanTrue;
    else
      v20 = kCFBooleanFalse;
    CFDictionaryAddValue(v18, key, v20);
    CFDictionaryAddValue(v19, kSecClass, kSecClassGenericPassword);
    CFDictionaryAddValue(v19, kSecUseDataProtectionKeychain, kCFBooleanTrue);
    v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "account"));
    CFDictionaryAddValue(v19, kSecAttrAccount, v21);

    v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "service"));
    CFDictionaryAddValue(v19, kSecAttrService, v22);

    CFDictionaryAddValue(v19, kSecAttrAccessGroup, CFSTR("com.apple.nearbyd"));
    if (*(_BYTE *)(a1 + 56))
      v23 = kCFBooleanTrue;
    else
      v23 = kCFBooleanFalse;
    CFDictionaryAddValue(v19, kSecAttrSynchronizable, v23);
    CFDictionaryRemoveAllValues(v8);
    v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "data"));
    CFDictionaryAddValue(v8, kSecValueData, v24);

    v25 = SecItemUpdate(v19, v8);
    if (objc_msgSend(*(id *)(a1 + 32), "_shouldLog"))
    {
      v26 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67174657;
        LODWORD(v29) = v25;
        _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "#ni-km,Update status: %{private}d.", buf, 8u);
      }
    }
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = v25 == 0;
  }
  else if (v15)
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = 0;
  }
  else
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = 1;
  }
}

void sub_100292B54(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_100292C94(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_100292CA4(uint64_t a1)
{

}

void sub_100292CAC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_internalReadItemWithService:account:synchronizable:systemKeychain:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(unsigned __int8 *)(a1 + 64), *(unsigned __int8 *)(a1 + 65)));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_100292DF4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100292E04(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  int v4;
  int v5;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v7;
  __CFDictionary *v8;
  CFBooleanRef v9;
  CFBooleanRef v10;
  OSStatus v11;
  CFTypeID TypeID;
  CFTypeID v13;
  void *v14;
  NSObject *v15;
  unsigned int v16;
  void *v17;
  id v18;
  uint64_t v19;
  NSObject *v20;
  _QWORD v21[5];
  id v22;
  uint64_t v23;
  __int16 v24;
  CFTypeRef result;
  uint8_t buf[4];
  _BYTE v27[10];
  int v28;
  __int16 v29;
  int v30;

  if (objc_msgSend(*(id *)(a1 + 32), "_shouldLog"))
  {
    v2 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
    {
      v3 = *(_QWORD *)(a1 + 40);
      v4 = *(unsigned __int8 *)(a1 + 56);
      v5 = *(unsigned __int8 *)(a1 + 57);
      *(_DWORD *)buf = 138478339;
      *(_QWORD *)v27 = v3;
      *(_WORD *)&v27[8] = 1024;
      v28 = v4;
      v29 = 1024;
      v30 = v5;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#ni-km,Read all: %{private}@, %d, %d", buf, 0x18u);
    }
  }
  Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  v7 = (__CFDictionary *)CFAutorelease(Mutable);
  v8 = v7;
  result = 0;
  if (*(_BYTE *)(a1 + 57))
    v9 = kCFBooleanTrue;
  else
    v9 = kCFBooleanFalse;
  CFDictionaryAddValue(v7, kSecUseSystemKeychain, v9);
  CFDictionaryAddValue(v8, kSecClass, kSecClassGenericPassword);
  CFDictionaryAddValue(v8, kSecUseDataProtectionKeychain, kCFBooleanTrue);
  CFDictionaryAddValue(v8, kSecAttrService, *(const void **)(a1 + 40));
  CFDictionaryAddValue(v8, kSecAttrAccessGroup, CFSTR("com.apple.nearbyd"));
  if (*(_BYTE *)(a1 + 56))
    v10 = kCFBooleanTrue;
  else
    v10 = kCFBooleanFalse;
  CFDictionaryAddValue(v8, kSecAttrSynchronizable, v10);
  CFDictionaryAddValue(v8, kSecMatchLimit, kSecMatchLimitAll);
  CFDictionaryAddValue(v8, kSecReturnData, kCFBooleanTrue);
  CFDictionaryAddValue(v8, kSecReturnAttributes, kCFBooleanTrue);
  v11 = SecItemCopyMatching(v8, &result);
  if (result)
  {
    TypeID = CFArrayGetTypeID();
    v13 = CFGetTypeID(result);
    v14 = (void *)result;
    if (TypeID != v13)
    {
      v14 = 0;
      CFRelease(result);
    }
    if (objc_msgSend(*(id *)(a1 + 32), "_shouldLog"))
    {
      v15 = (id)qword_10085F520;
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        v16 = objc_msgSend(v14, "count");
        *(_DWORD *)buf = 67174913;
        *(_DWORD *)v27 = v11;
        *(_WORD *)&v27[4] = 1025;
        *(_DWORD *)&v27[6] = v16;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#ni-km,Read all status: %{private}d. Num results: %{private}d", buf, 0xEu);
      }

    }
    v21[0] = _NSConcreteStackBlock;
    v21[1] = 3221225472;
    v21[2] = sub_1002931D4;
    v21[3] = &unk_100811E28;
    v17 = *(void **)(a1 + 40);
    v21[4] = *(_QWORD *)(a1 + 32);
    v18 = v17;
    v24 = *(_WORD *)(a1 + 56);
    v19 = *(_QWORD *)(a1 + 48);
    v22 = v18;
    v23 = v19;
    objc_msgSend(v14, "enumerateObjectsUsingBlock:", v21);

  }
  else if (objc_msgSend(*(id *)(a1 + 32), "_shouldLog"))
  {
    v20 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67174657;
      *(_DWORD *)v27 = v11;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "#ni-km,Read all status: %{private}d. No results", buf, 8u);
    }
  }
}

void sub_1002931A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1002931D4(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  void *v5;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "objectForKey:", kSecAttrAccount));
  if (v3)
  {
    v5 = v3;
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_internalReadItemWithService:account:synchronizable:systemKeychain:", *(_QWORD *)(a1 + 40), v3, *(unsigned __int8 *)(a1 + 56), *(unsigned __int8 *)(a1 + 57)));
    if (v4)
      objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), "addObject:", v4);

    v3 = v5;
  }

}

void sub_100293258(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_100293368(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v8;
  __CFDictionary *v9;
  CFBooleanRef v10;
  CFBooleanRef v11;
  OSStatus v12;
  NSObject *v13;
  BOOL v14;
  char v15;
  int v16;
  uint64_t v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  int v21;
  __int16 v22;
  int v23;

  if (objc_msgSend(*(id *)(a1 + 32), "_shouldLog"))
  {
    v2 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
    {
      v3 = *(_QWORD *)(a1 + 40);
      v4 = *(_QWORD *)(a1 + 48);
      v5 = *(unsigned __int8 *)(a1 + 64);
      v6 = *(unsigned __int8 *)(a1 + 65);
      v16 = 138478595;
      v17 = v3;
      v18 = 2113;
      v19 = v4;
      v20 = 1024;
      v21 = v5;
      v22 = 1024;
      v23 = v6;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#ni-km,Delete: %{private}@, %{private}@, %d, %d", (uint8_t *)&v16, 0x22u);
    }
  }
  Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  v8 = (__CFDictionary *)CFAutorelease(Mutable);
  v9 = v8;
  if (*(_BYTE *)(a1 + 65))
    v10 = kCFBooleanTrue;
  else
    v10 = kCFBooleanFalse;
  CFDictionaryAddValue(v8, kSecUseSystemKeychain, v10);
  CFDictionaryAddValue(v9, kSecClass, kSecClassGenericPassword);
  CFDictionaryAddValue(v9, kSecUseDataProtectionKeychain, kCFBooleanTrue);
  CFDictionaryAddValue(v9, kSecAttrAccount, *(const void **)(a1 + 48));
  CFDictionaryAddValue(v9, kSecAttrService, *(const void **)(a1 + 40));
  CFDictionaryAddValue(v9, kSecAttrAccessGroup, CFSTR("com.apple.nearbyd"));
  if (*(_BYTE *)(a1 + 64))
    v11 = kCFBooleanTrue;
  else
    v11 = kCFBooleanFalse;
  CFDictionaryAddValue(v9, kSecAttrSynchronizable, v11);
  v12 = SecItemDelete(v9);
  if (objc_msgSend(*(id *)(a1 + 32), "_shouldLog"))
  {
    v13 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
    {
      v16 = 67174657;
      LODWORD(v17) = v12;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#ni-km,Delete status: %{private}d.", (uint8_t *)&v16, 8u);
    }
  }
  if (v12)
    v14 = v12 == -25300;
  else
    v14 = 1;
  v15 = v14;
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = v15;
}

void sub_100293698(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  int v4;
  int v5;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v7;
  __CFDictionary *v8;
  CFBooleanRef v9;
  CFBooleanRef v10;
  OSStatus v11;
  NSObject *v12;
  BOOL v13;
  char v14;
  int v15;
  uint64_t v16;
  __int16 v17;
  int v18;
  __int16 v19;
  int v20;

  if (objc_msgSend(*(id *)(a1 + 32), "_shouldLog"))
  {
    v2 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
    {
      v3 = *(_QWORD *)(a1 + 40);
      v4 = *(unsigned __int8 *)(a1 + 56);
      v5 = *(unsigned __int8 *)(a1 + 57);
      v15 = 138478339;
      v16 = v3;
      v17 = 1024;
      v18 = v4;
      v19 = 1024;
      v20 = v5;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#ni-km,Delete all: %{private}@, %d, %d", (uint8_t *)&v15, 0x18u);
    }
  }
  Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  v7 = (__CFDictionary *)CFAutorelease(Mutable);
  v8 = v7;
  if (*(_BYTE *)(a1 + 57))
    v9 = kCFBooleanTrue;
  else
    v9 = kCFBooleanFalse;
  CFDictionaryAddValue(v7, kSecUseSystemKeychain, v9);
  CFDictionaryAddValue(v8, kSecClass, kSecClassGenericPassword);
  CFDictionaryAddValue(v8, kSecUseDataProtectionKeychain, kCFBooleanTrue);
  CFDictionaryAddValue(v8, kSecAttrService, *(const void **)(a1 + 40));
  CFDictionaryAddValue(v8, kSecAttrAccessGroup, CFSTR("com.apple.nearbyd"));
  if (*(_BYTE *)(a1 + 56))
    v10 = kCFBooleanTrue;
  else
    v10 = kCFBooleanFalse;
  CFDictionaryAddValue(v8, kSecAttrSynchronizable, v10);
  v11 = SecItemDelete(v8);
  if (objc_msgSend(*(id *)(a1 + 32), "_shouldLog"))
  {
    v12 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
    {
      v15 = 67174657;
      LODWORD(v16) = v11;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#ni-km,Delete all status: %{private}d.", (uint8_t *)&v15, 8u);
    }
  }
  if (v11)
    v13 = v11 == -25300;
  else
    v13 = 1;
  v14 = v13;
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = v14;
}

void sub_100293994(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100293CF4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_100294ED0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_10029623C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  void *v16;
  void *v17;
  void *v18;
  uint64_t v19;

  _Block_object_dispose((const void *)(v19 - 160), 8);
  _Unwind_Resume(a1);
}

id sub_100296370(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  id result;

  result = objc_msgSend(*(id *)(a1 + 32), "containsObject:", a2);
  if ((result & 1) == 0)
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 0;
    *a4 = 1;
  }
  return result;
}

id sub_1002963B4(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  id result;

  result = objc_msgSend(*(id *)(a1 + 32), "containsObject:", a2);
  if ((result & 1) == 0)
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 0;
    *a4 = 1;
  }
  return result;
}

id sub_1002963F8(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  id result;

  result = objc_msgSend(*(id *)(a1 + 32), "containsObject:", a2);
  if ((result & 1) == 0)
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 0;
    *a4 = 1;
  }
  return result;
}

id sub_10029643C(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  id result;

  result = objc_msgSend(*(id *)(a1 + 32), "containsObject:", a2);
  if ((result & 1) == 0)
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 0;
    *a4 = 1;
  }
  return result;
}

id sub_100296480(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  id result;

  result = objc_msgSend(*(id *)(a1 + 32), "containsObject:", a2);
  if ((result & 1) == 0)
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 0;
    *a4 = 1;
  }
  return result;
}

void sub_1002974B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_100297558(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100297680(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1002977AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1002978D4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_100297944(uint64_t a1)
{
  NSObject *v2;
  uint8_t v4[16];
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)a1 = sub_100007824();
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_WORD *)(a1 + 32) = -1;
  *(_BYTE *)(a1 + 34) = -1;
  *(_BYTE *)(a1 + 36) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 44) = 1;
  *(_WORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 50) = 0;
  *(_QWORD *)(a1 + 56) = a1 + 64;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 88;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 104) = a1 + 112;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 128) = a1 + 136;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 850045863;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 201) = 0u;
  v6 = a1;
  sub_100297C04((uint64_t)&v6, 5u, 1, 0);
  sub_100297C04((uint64_t)&v6, 9u, 1, 0);
  sub_100297C04((uint64_t)&v6, 5u, 2, 0);
  sub_100297C04((uint64_t)&v6, 9u, 2, 0);
  sub_100297C04((uint64_t)&v6, 5u, 0, 1);
  sub_100297C04((uint64_t)&v6, 9u, 0, 1);
  sub_100297C04((uint64_t)&v6, 5u, 3, 0);
  sub_100297C04((uint64_t)&v6, 9u, 3, 0);
  LOWORD(v5) = 5;
  sub_10029A948((uint64_t **)(a1 + 80), (unsigned __int8 *)&v5, &v5);
  LOWORD(v5) = 9;
  sub_10029A948((uint64_t **)(a1 + 80), (unsigned __int8 *)&v5, &v5);
  v5 = a1;
  sub_10029A750((uint64_t)&v5, 1, 0);
  sub_10029A750((uint64_t)&v5, 2, 0);
  sub_10029A750((uint64_t)&v5, 0, 1);
  sub_10029A750((uint64_t)&v5, 3, 0);
  *(_WORD *)v4 = 1;
  sub_10029A948((uint64_t **)(a1 + 128), v4, v4);
  v2 = qword_10085B4F0;
  if (os_log_type_enabled((os_log_t)qword_10085B4F0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "regulatory,settings,init", v4, 2u);
  }
  return a1;
}

void sub_100297BA0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::mutex *v6;
  void **v7;

  std::mutex::~mutex(v6);
  sub_10003E3F0(v5, *(_QWORD **)(v1 + 136));
  sub_100144C1C(v4, *(_QWORD **)(v1 + 112));
  sub_10003E3F0(v3, *(_QWORD **)(v1 + 88));
  sub_100144C1C(v2, *(_QWORD **)(v1 + 64));
  if (*(char *)(v1 + 31) < 0)
    operator delete(*v7);
  _Unwind_Resume(a1);
}

uint64_t **sub_100297C04(uint64_t a1, unsigned int a2, int a3, char a4)
{
  uint64_t v6;
  uint64_t **v7;
  uint64_t v8;
  unsigned int v9;
  BOOL v10;
  uint64_t *v11;
  uint64_t **v12;
  _QWORD **v14;
  _QWORD *v15[2];
  unsigned __int8 *v16;
  _QWORD **v17;
  _QWORD *v18[2];
  unsigned __int8 v19;

  v19 = a2;
  v6 = *(_QWORD *)(*(_QWORD *)a1 + 64);
  v7 = (uint64_t **)(*(_QWORD *)a1 + 56);
  if (!v6)
    goto LABEL_12;
  v8 = *(_QWORD *)a1 + 64;
  do
  {
    v9 = *(unsigned __int8 *)(v6 + 32);
    v10 = v9 >= a2;
    if (v9 >= a2)
      v11 = (uint64_t *)v6;
    else
      v11 = (uint64_t *)(v6 + 8);
    if (v10)
      v8 = v6;
    v6 = *v11;
  }
  while (*v11);
  if (v8 == *(_QWORD *)a1 + 64 || *(unsigned __int8 *)(v8 + 32) > a2)
  {
LABEL_12:
    v15[0] = 0;
    v15[1] = 0;
    v14 = v15;
    LOBYTE(v16) = a2;
    v18[0] = 0;
    v18[1] = 0;
    v17 = v18;
    sub_10029A560((uint64_t)v7, (unsigned __int8 *)&v16, (uint64_t)&v16);
    sub_10003E3F0((uint64_t)&v17, v18[0]);
    sub_10003E3F0((uint64_t)&v14, v15[0]);
  }
  v16 = &v19;
  v12 = sub_10029A87C(v7, &v19, (uint64_t)&unk_100472CF8, &v16);
  LODWORD(v16) = a3;
  BYTE4(v16) = a4;
  return sub_10029A690(v12 + 5, (int *)&v16, (uint64_t)&v16);
}

void sub_100297D08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10, uint64_t a11, uint64_t a12, uint64_t a13, _QWORD *a14)
{
  uint64_t v14;

  sub_10003E3F0(v14, a14);
  sub_10003E3F0((uint64_t)&a9, a10);
  _Unwind_Resume(a1);
}

BOOL sub_100297D30(uint64_t a1, int a2)
{
  uint64_t *v3;
  uint64_t **v4;
  int v5;
  uint64_t *v6;
  uint64_t *v7;
  BOOL v8;
  uint64_t **v9;
  int v10;
  NSObject *v11;
  void *v12;
  NSObject *v13;
  int v14;
  void **v15;
  uint64_t **v16;
  void **v17;
  int v18;
  void *__p[2];
  char v21;
  void *v22;
  char v23;
  unsigned __int8 v24;
  unsigned __int8 *v25;
  _BYTE buf[12];
  __int16 v27;
  int v28;
  __int16 v29;
  int v30;

  v24 = a2;
  sub_10029801C(a1, a2);
  *(_QWORD *)buf = &v24;
  v3 = sub_10029A87C((uint64_t **)(a1 + 104), &v24, (uint64_t)&unk_100472CF8, (_BYTE **)buf)[5];
  *(_QWORD *)buf = &v24;
  v4 = sub_10029A87C((uint64_t **)(a1 + 104), &v24, (uint64_t)&unk_100472CF8, (_BYTE **)buf) + 6;
  if (v3 == (uint64_t *)v4)
  {
    v5 = 1;
  }
  else
  {
    do
    {
      v5 = *((_BYTE *)v3 + 32) != 0;
      if (!*((_BYTE *)v3 + 32))
        break;
      v6 = (uint64_t *)v3[1];
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = (uint64_t *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (uint64_t *)v3[2];
          v8 = *v7 == (_QWORD)v3;
          v3 = v7;
        }
        while (!v8);
      }
      v3 = v7;
    }
    while (v7 != (uint64_t *)v4);
  }
  v9 = (uint64_t **)(a1 + 128);
  *(_QWORD *)buf = &v24;
  v10 = *((unsigned __int8 *)sub_10029AA00(v9, &v24, (uint64_t)&unk_100472CF8, (unsigned __int8 **)buf) + 26);
  if (v10 != v5)
  {
    v11 = qword_10085B4F0;
    if (os_log_type_enabled((os_log_t)qword_10085B4F0, OS_LOG_TYPE_DEFAULT))
    {
      v12 = &v22;
      if (v23 < 0)
        v12 = v22;
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "%s", buf, 0xCu);
    }
    v13 = (id)qword_10085B4F0;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      sub_10036C25C(v24, __p);
      v14 = v21;
      v15 = (void **)__p[0];
      v25 = &v24;
      v16 = sub_10029AA00(v9, &v24, (uint64_t)&unk_100472CF8, &v25);
      v17 = __p;
      v18 = *((unsigned __int8 *)v16 + 26);
      if (v14 < 0)
        v17 = v15;
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = v17;
      v27 = 1024;
      v28 = v18;
      v29 = 1024;
      v30 = v5;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "regulatory,settings,ch,%s,current,%d,newChannelPreference,%d", buf, 0x18u);
      if (v21 < 0)
        operator delete(__p[0]);
    }

    *(_QWORD *)buf = &v24;
    *((_BYTE *)sub_10029AA00(v9, &v24, (uint64_t)&unk_100472CF8, (unsigned __int8 **)buf) + 26) = v5;
  }
  if (v23 < 0)
    operator delete(v22);
  return v10 != v5;
}

void sub_100297FD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;

  if (a14 < 0)
    operator delete(__p);

  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(a1);
}

uint64_t sub_10029801C(uint64_t a1, int a2)
{
  _QWORD *v4;
  void **v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t **v9;
  uint64_t **v10;
  uint64_t **v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t **v14;
  uint64_t **v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t **v18;
  uint64_t **v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t **v22;
  uint64_t **v23;
  uint64_t v24;
  void *__p[2];
  unsigned __int8 v27;
  _QWORD v28[2];
  uint64_t v29;
  _QWORD v30[10];
  char v31;
  uint64_t v32;
  unsigned __int8 v33;

  v33 = a2;
  sub_1000537E4((uint64_t)v28);
  v4 = sub_100054C60(&v29, (uint64_t)"regulatory,settings,NBChannelPref,", 34);
  sub_10036C25C(a2, __p);
  if ((v27 & 0x80u) == 0)
    v5 = __p;
  else
    v5 = (void **)__p[0];
  if ((v27 & 0x80u) == 0)
    v6 = v27;
  else
    v6 = (uint64_t)__p[1];
  v7 = sub_100054C60(v4, (uint64_t)v5, v6);
  sub_100054C60(v7, (uint64_t)",", 1);
  if ((char)v27 < 0)
    operator delete(__p[0]);
  v8 = sub_100054C60(&v29, (uint64_t)"Airplane,", 9);
  v9 = (uint64_t **)(a1 + 104);
  __p[0] = &v33;
  v10 = sub_10029A87C(v9, &v33, (uint64_t)&unk_100472CF8, (_BYTE **)__p);
  __p[0] = &dword_100475894;
  v11 = sub_100184664(v10 + 5, &dword_100475894, (uint64_t)&unk_100472CF8, (_DWORD **)__p);
  v12 = (_QWORD *)std::ostream::operator<<(v8, *((unsigned __int8 *)v11 + 32));
  sub_100054C60(v12, (uint64_t)",", 1);
  v13 = sub_100054C60(&v29, (uint64_t)"RegulatoryArea,", 15);
  __p[0] = &v33;
  v14 = sub_10029A87C(v9, &v33, (uint64_t)&unk_100472CF8, (_BYTE **)__p);
  __p[0] = &unk_1004758A0;
  v15 = sub_100184664(v14 + 5, (int *)&unk_1004758A0, (uint64_t)&unk_100472CF8, (_DWORD **)__p);
  v16 = (_QWORD *)std::ostream::operator<<(v13, *((unsigned __int8 *)v15 + 32));
  sub_100054C60(v16, (uint64_t)",", 1);
  v17 = sub_100054C60(&v29, (uint64_t)"Switch,", 7);
  __p[0] = &v33;
  v18 = sub_10029A87C(v9, &v33, (uint64_t)&unk_100472CF8, (_BYTE **)__p);
  __p[0] = &dword_100475898;
  v19 = sub_100184664(v18 + 5, &dword_100475898, (uint64_t)&unk_100472CF8, (_DWORD **)__p);
  v20 = (_QWORD *)std::ostream::operator<<(v17, *((unsigned __int8 *)v19 + 32));
  sub_100054C60(v20, (uint64_t)",", 1);
  v21 = sub_100054C60(&v29, (uint64_t)"RestrictedRegion,", 17);
  __p[0] = &v33;
  v22 = sub_10029A87C(v9, &v33, (uint64_t)&unk_100472CF8, (_BYTE **)__p);
  __p[0] = &dword_10047589C;
  v23 = sub_100184664(v22 + 5, &dword_10047589C, (uint64_t)&unk_100472CF8, (_DWORD **)__p);
  std::ostream::operator<<(v21, *((unsigned __int8 *)v23 + 32));
  std::stringbuf::str(v30);
  *(_QWORD *)((char *)v28
  v29 = v24;
  if (v31 < 0)
    operator delete((void *)v30[8]);
  std::streambuf::~streambuf(v30);
  return std::ios::~ios(&v32);
}

void sub_100298330(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  sub_100053910((uint64_t)&a16);
  _Unwind_Resume(a1);
}

BOOL sub_100298360(uint64_t a1, int a2)
{
  uint64_t *v3;
  uint64_t **v4;
  int v5;
  uint64_t *v6;
  uint64_t *v7;
  BOOL v8;
  uint64_t **v9;
  int v10;
  NSObject *v11;
  void *p_p;
  NSObject *v13;
  int v14;
  uint64_t **v15;
  const char *v16;
  int v17;
  void *__p;
  char v20;
  unsigned __int8 v21;
  unsigned __int8 *v22;
  _BYTE buf[12];
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;

  v21 = a2;
  sub_100298620(a1, a2);
  *(_QWORD *)buf = &v21;
  v3 = sub_10029A87C((uint64_t **)(a1 + 56), &v21, (uint64_t)&unk_100472CF8, (_BYTE **)buf)[5];
  *(_QWORD *)buf = &v21;
  v4 = sub_10029A87C((uint64_t **)(a1 + 56), &v21, (uint64_t)&unk_100472CF8, (_BYTE **)buf) + 6;
  if (v3 == (uint64_t *)v4)
  {
    v5 = 1;
  }
  else
  {
    do
    {
      v5 = *((_BYTE *)v3 + 32) != 0;
      if (!*((_BYTE *)v3 + 32))
        break;
      v6 = (uint64_t *)v3[1];
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = (uint64_t *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (uint64_t *)v3[2];
          v8 = *v7 == (_QWORD)v3;
          v3 = v7;
        }
        while (!v8);
      }
      v3 = v7;
    }
    while (v7 != (uint64_t *)v4);
  }
  v9 = (uint64_t **)(a1 + 80);
  *(_QWORD *)buf = &v21;
  v10 = *((unsigned __int8 *)sub_10029AA00(v9, &v21, (uint64_t)&unk_100472CF8, (unsigned __int8 **)buf) + 26);
  if (v10 != v5)
  {
    v11 = qword_10085B4F0;
    if (os_log_type_enabled((os_log_t)qword_10085B4F0, OS_LOG_TYPE_DEFAULT))
    {
      p_p = &__p;
      if (v20 < 0)
        p_p = __p;
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = p_p;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "%s", buf, 0xCu);
    }
    v13 = (id)qword_10085B4F0;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      v14 = v21;
      v22 = &v21;
      v15 = sub_10029AA00(v9, &v21, (uint64_t)&unk_100472CF8, &v22);
      v16 = "CH9";
      v17 = *((unsigned __int8 *)v15 + 26);
      *(_DWORD *)buf = 136315650;
      if (v14 == 5)
        v16 = "CH5";
      *(_QWORD *)&buf[4] = v16;
      v24 = 1024;
      v25 = v17;
      v26 = 1024;
      v27 = v5;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "regulatory,settings,ch,%s,current,%d,newChannelPreference,%d", buf, 0x18u);
    }

    *(_QWORD *)buf = &v21;
    *((_BYTE *)sub_10029AA00(v9, &v21, (uint64_t)&unk_100472CF8, (unsigned __int8 **)buf) + 26) = v5;
  }
  if (v20 < 0)
    operator delete(__p);
  return v10 != v5;
}

void sub_1002985F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_100298620(uint64_t a1, int a2)
{
  _QWORD *v4;
  void **v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t **v9;
  uint64_t **v10;
  uint64_t **v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t **v14;
  uint64_t **v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t **v18;
  uint64_t **v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t **v22;
  uint64_t **v23;
  uint64_t v24;
  void *__p[2];
  unsigned __int8 v27;
  _QWORD v28[2];
  uint64_t v29;
  _QWORD v30[10];
  char v31;
  uint64_t v32;
  unsigned __int8 v33;

  v33 = a2;
  sub_1000537E4((uint64_t)v28);
  v4 = sub_100054C60(&v29, (uint64_t)"regulatory,settings,UWBChannelPref,", 35);
  sub_10036C290(a2, __p);
  if ((v27 & 0x80u) == 0)
    v5 = __p;
  else
    v5 = (void **)__p[0];
  if ((v27 & 0x80u) == 0)
    v6 = v27;
  else
    v6 = (uint64_t)__p[1];
  v7 = sub_100054C60(v4, (uint64_t)v5, v6);
  sub_100054C60(v7, (uint64_t)",", 1);
  if ((char)v27 < 0)
    operator delete(__p[0]);
  v8 = sub_100054C60(&v29, (uint64_t)"Airplane,", 9);
  v9 = (uint64_t **)(a1 + 56);
  __p[0] = &v33;
  v10 = sub_10029A87C(v9, &v33, (uint64_t)&unk_100472CF8, (_BYTE **)__p);
  __p[0] = &dword_100475894;
  v11 = sub_100184664(v10 + 5, &dword_100475894, (uint64_t)&unk_100472CF8, (_DWORD **)__p);
  v12 = (_QWORD *)std::ostream::operator<<(v8, *((unsigned __int8 *)v11 + 32));
  sub_100054C60(v12, (uint64_t)",", 1);
  v13 = sub_100054C60(&v29, (uint64_t)"RegulatoryArea,", 15);
  __p[0] = &v33;
  v14 = sub_10029A87C(v9, &v33, (uint64_t)&unk_100472CF8, (_BYTE **)__p);
  __p[0] = &unk_1004758A0;
  v15 = sub_100184664(v14 + 5, (int *)&unk_1004758A0, (uint64_t)&unk_100472CF8, (_DWORD **)__p);
  v16 = (_QWORD *)std::ostream::operator<<(v13, *((unsigned __int8 *)v15 + 32));
  sub_100054C60(v16, (uint64_t)",", 1);
  v17 = sub_100054C60(&v29, (uint64_t)"Switch,", 7);
  __p[0] = &v33;
  v18 = sub_10029A87C(v9, &v33, (uint64_t)&unk_100472CF8, (_BYTE **)__p);
  __p[0] = &dword_100475898;
  v19 = sub_100184664(v18 + 5, &dword_100475898, (uint64_t)&unk_100472CF8, (_DWORD **)__p);
  v20 = (_QWORD *)std::ostream::operator<<(v17, *((unsigned __int8 *)v19 + 32));
  sub_100054C60(v20, (uint64_t)",", 1);
  v21 = sub_100054C60(&v29, (uint64_t)"RestrictedRegion,", 17);
  __p[0] = &v33;
  v22 = sub_10029A87C(v9, &v33, (uint64_t)&unk_100472CF8, (_BYTE **)__p);
  __p[0] = &dword_10047589C;
  v23 = sub_100184664(v22 + 5, &dword_10047589C, (uint64_t)&unk_100472CF8, (_DWORD **)__p);
  std::ostream::operator<<(v21, *((unsigned __int8 *)v23 + 32));
  std::stringbuf::str(v30);
  *(_QWORD *)((char *)v28
  v29 = v24;
  if (v31 < 0)
    operator delete((void *)v30[8]);
  std::streambuf::~streambuf(v30);
  return std::ios::~ios(&v32);
}

void sub_100298934(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  sub_100053910((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t sub_100298964(uint64_t a1)
{
  _BOOL4 v2;
  int v3;
  int v4;

  v2 = sub_100298360(a1, 5);
  v3 = v2 | sub_100298360(a1, 9);
  if (sub_100297D30(a1, 1))
    v4 = 256;
  else
    v4 = 0;
  return v4 | v3;
}

uint64_t sub_1002989B8(uint64_t a1, int a2, int a3)
{
  std::mutex *v6;
  int v7;
  _BOOL4 v8;
  NSObject *v9;
  _DWORD v11[2];
  __int16 v12;
  int v13;
  __int16 v14;
  int v15;
  __int16 v16;
  int v17;

  v6 = (std::mutex *)(a1 + 152);
  std::mutex::lock((std::mutex *)(a1 + 152));
  if (*(unsigned __int8 *)(a1 + 36) == a2 && *(_BYTE *)(a1 + 44) && *(_DWORD *)(a1 + 40) == a3)
  {
    v7 = 0;
  }
  else
  {
    *(_BYTE *)(a1 + 36) = a2;
    *(_DWORD *)(a1 + 40) = a3;
    v7 = 1;
    *(_BYTE *)(a1 + 44) = 1;
  }
  if (*(_BYTE *)(a1 + 216))
  {
    v8 = 1;
  }
  else
  {
    v9 = qword_10085B4F0;
    if (os_log_type_enabled((os_log_t)qword_10085B4F0, OS_LOG_TYPE_DEFAULT))
    {
      v11[0] = 67109888;
      v11[1] = 0;
      v12 = 1024;
      v13 = v7;
      v14 = 1024;
      v15 = 0;
      v16 = 1024;
      v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "regulatory,settings,setAttachedAccessoryStatus,ignoreUpdates,isUWBChannelSettingChanged,%d,isUWBPowerTableChanged,%d,isNBChannelSettingChanged,%d,isNBPowerTableChanged,%d", (uint8_t *)v11, 0x1Au);
    }
    v8 = *(_BYTE *)(a1 + 216) != 0;
  }
  std::mutex::unlock(v6);
  if ((v7 & v8) != 0)
    return 256;
  else
    return 0;
}

uint64_t sub_100298AF0(uint64_t a1, int a2)
{
  std::mutex *v4;
  NSObject *v5;
  uint64_t **v6;
  char v7;
  uint64_t **v8;
  char v9;
  uint64_t **v10;
  unsigned int v11;
  int v12;
  int v13;
  NSObject *v14;
  int v15;
  uint8_t buf[8];
  __int16 v18;
  int v19;
  __int16 v20;
  int v21;
  __int16 v22;
  int v23;

  v4 = (std::mutex *)(a1 + 152);
  std::mutex::lock((std::mutex *)(a1 + 152));
  v5 = qword_10085B4F0;
  if (os_log_type_enabled((os_log_t)qword_10085B4F0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = a2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "regulatory,settings,setAirplaneMode,%d", buf, 8u);
  }
  *(_BYTE *)(a1 + 49) = a2;
  *(_QWORD *)buf = &unk_100475890;
  v6 = sub_10029A87C((uint64_t **)(a1 + 56), (unsigned __int8 *)&unk_100475890, (uint64_t)&unk_100472CF8, (_BYTE **)buf);
  *(_QWORD *)buf = &dword_100475894;
  *((_BYTE *)sub_100184664(v6 + 5, &dword_100475894, (uint64_t)&unk_100472CF8, (_DWORD **)buf) + 32) = a2 ^ 1;
  v7 = *(_BYTE *)(a1 + 49);
  *(_QWORD *)buf = &unk_100475891;
  v8 = sub_10029A87C((uint64_t **)(a1 + 56), (unsigned __int8 *)&unk_100475891, (uint64_t)&unk_100472CF8, (_BYTE **)buf);
  *(_QWORD *)buf = &dword_100475894;
  *((_BYTE *)sub_100184664(v8 + 5, &dword_100475894, (uint64_t)&unk_100472CF8, (_DWORD **)buf) + 32) = v7 ^ 1;
  v9 = *(_BYTE *)(a1 + 49);
  *(_QWORD *)buf = byte_100475892;
  v10 = sub_10029A87C((uint64_t **)(a1 + 104), byte_100475892, (uint64_t)&unk_100472CF8, (_BYTE **)buf);
  *(_QWORD *)buf = &dword_100475894;
  *((_BYTE *)sub_100184664(v10 + 5, &dword_100475894, (uint64_t)&unk_100472CF8, (_DWORD **)buf) + 32) = v9 ^ 1;
  v11 = sub_100298964(a1);
  v12 = v11 & 1;
  v13 = (v11 >> 8) & 1;
  if (!*(_BYTE *)(a1 + 216))
  {
    v14 = qword_10085B4F0;
    if (os_log_type_enabled((os_log_t)qword_10085B4F0, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109888;
      *(_DWORD *)&buf[4] = v12;
      v18 = 1024;
      v19 = 0;
      v20 = 1024;
      v21 = v13;
      v22 = 1024;
      v23 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "regulatory,settings,setAirplaneMode,ignoreUpdates,isUWBChannelSettingChanged,%d,isUWBPowerTableChanged,%d, isNBChannelSettingChanged,%d,isNBPowerTableChanged,%d", buf, 0x1Au);
    }
  }
  if (v12)
    v15 = *(unsigned __int8 *)(a1 + 216);
  else
    v15 = 0;
  std::mutex::unlock(v4);
  return v15 | (v13 << 16);
}

void sub_100298D3C(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100298D54(uint64_t a1, int a2)
{
  std::mutex *v4;
  NSObject *v5;
  uint64_t **v6;
  char v7;
  uint64_t **v8;
  char v9;
  uint64_t **v10;
  int v11;
  NSObject *v12;
  uint64_t v13;
  uint8_t buf[8];
  __int16 v16;
  int v17;

  v4 = (std::mutex *)(a1 + 152);
  std::mutex::lock((std::mutex *)(a1 + 152));
  if (*(unsigned __int8 *)(a1 + 50) != a2)
  {
    v5 = qword_10085B4F0;
    if (os_log_type_enabled((os_log_t)qword_10085B4F0, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = a2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "regulatory,settings,isRestrictedRegion,%d", buf, 8u);
    }
  }
  *(_BYTE *)(a1 + 50) = a2;
  *(_QWORD *)buf = &unk_100475890;
  v6 = sub_10029A87C((uint64_t **)(a1 + 56), (unsigned __int8 *)&unk_100475890, (uint64_t)&unk_100472CF8, (_BYTE **)buf);
  *(_QWORD *)buf = &dword_10047589C;
  *((_BYTE *)sub_100184664(v6 + 5, &dword_10047589C, (uint64_t)&unk_100472CF8, (_DWORD **)buf) + 32) = a2;
  v7 = *(_BYTE *)(a1 + 50);
  *(_QWORD *)buf = &unk_100475891;
  v8 = sub_10029A87C((uint64_t **)(a1 + 56), (unsigned __int8 *)&unk_100475891, (uint64_t)&unk_100472CF8, (_BYTE **)buf);
  *(_QWORD *)buf = &dword_10047589C;
  *((_BYTE *)sub_100184664(v8 + 5, &dword_10047589C, (uint64_t)&unk_100472CF8, (_DWORD **)buf) + 32) = v7;
  v9 = *(_BYTE *)(a1 + 50);
  *(_QWORD *)buf = byte_100475892;
  v10 = sub_10029A87C((uint64_t **)(a1 + 104), byte_100475892, (uint64_t)&unk_100472CF8, (_BYTE **)buf);
  *(_QWORD *)buf = &dword_10047589C;
  *((_BYTE *)sub_100184664(v10 + 5, &dword_10047589C, (uint64_t)&unk_100472CF8, (_DWORD **)buf) + 32) = v9;
  v11 = sub_100298964(a1) & 1;
  if (!*(_BYTE *)(a1 + 216))
  {
    v12 = qword_10085B4F0;
    if (os_log_type_enabled((os_log_t)qword_10085B4F0, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)&buf[4] = v11;
      v16 = 1024;
      v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "regulatory,settings,setInRestrictedRegion,ignoreUpdates,isChannelSettingChanged,%d,isPowerTableChanged,%d", buf, 0xEu);
    }
  }
  if (v11)
    v13 = *(unsigned __int8 *)(a1 + 216);
  else
    v13 = 0;
  std::mutex::unlock(v4);
  return v13;
}

void sub_100298F94(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100298FAC(uint64_t a1, const std::string *a2)
{
  const std::string *v2;
  std::string *v4;
  uint64_t v5;
  uint64_t v6;
  std::string::size_type size;
  int v8;
  unsigned __int8 *v9;
  NSObject *v10;
  const char *v11;
  const char *v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  _BOOL4 v18;
  _BOOL4 v19;
  NSObject *v20;
  int v21;
  _BYTE *v22;
  int v23;
  _BYTE *v24;
  int v25;
  int v26;
  _BYTE *v27;
  _BYTE *v28;
  void *p_p;
  _BOOL4 v30;
  char v31;
  uint64_t **v32;
  char v33;
  uint64_t **v34;
  _BOOL4 v35;
  _BOOL4 v36;
  int v37;
  int v38;
  int v39;
  NSObject *v40;
  void *v41;
  uint64_t v42;
  _BOOL4 v43;
  _BOOL4 v44;
  std::mutex *v45;
  _BOOL4 v46;
  BOOL v49;
  uint64_t **v50;
  char v51;
  int v52;
  _BOOL4 v53;
  int v54;
  int v55;
  _BOOL4 v56;
  NSObject *v57;
  void *v59[2];
  std::string::size_type v60;
  void *__dst[2];
  std::string::size_type v62;
  uint8_t v63[48];
  __int16 v64;
  void *__p;
  __int16 v66;
  int v67;
  char v68;
  _BYTE buf[32];
  __int128 v70;
  __int16 v71;
  unsigned __int8 v72;

  v2 = a2;
  v4 = (std::string *)(a1 + 8);
  v5 = *(unsigned __int8 *)(a1 + 31);
  if ((v5 & 0x80u) == 0)
    v6 = *(unsigned __int8 *)(a1 + 31);
  else
    v6 = *(_QWORD *)(a1 + 16);
  size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  v8 = (char)size;
  if ((size & 0x80u) != 0)
    size = a2->__r_.__value_.__l.__size_;
  if (v6 != size)
    goto LABEL_16;
  if (v8 < 0)
    a2 = (const std::string *)a2->__r_.__value_.__r.__words[0];
  if ((v5 & 0x80) != 0)
  {
    if (memcmp(v4->__r_.__value_.__l.__data_, a2, *(_QWORD *)(a1 + 16)))
      goto LABEL_16;
LABEL_21:
    v13 = 0;
    v14 = 0;
    v15 = 0;
    v16 = 0;
    return (v15 << 16) | (v16 << 24) | (v13 << 8) | v14;
  }
  if (!*(_BYTE *)(a1 + 31))
    goto LABEL_21;
  v9 = (unsigned __int8 *)(a1 + 8);
  while (*v9 == a2->__r_.__value_.__s.__data_[0])
  {
    ++v9;
    a2 = (const std::string *)((char *)a2 + 1);
    if (!--v5)
      goto LABEL_21;
  }
LABEL_16:
  v10 = qword_10085B4F0;
  if (os_log_type_enabled((os_log_t)qword_10085B4F0, OS_LOG_TYPE_DEFAULT))
  {
    v11 = "__";
    if (*(char *)(a1 + 31) < 0)
    {
      if (*(_QWORD *)(a1 + 16))
        v12 = (const char *)v4->__r_.__value_.__r.__words[0];
      else
        v12 = "__";
    }
    else if (*(_BYTE *)(a1 + 31))
    {
      v12 = (const char *)v4;
    }
    else
    {
      v12 = "__";
    }
    if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
    {
      if (v2->__r_.__value_.__l.__size_)
        v11 = (const char *)v2->__r_.__value_.__r.__words[0];
      else
        v11 = "__";
    }
    else if (*((_BYTE *)&v2->__r_.__value_.__s + 23))
    {
      v11 = (const char *)v2;
    }
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v12;
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = v11;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "regulatory,settings,setIsoCountry,current:%s,new:%s", buf, 0x16u);
  }
  v71 = 0;
  v70 = 0u;
  memset(buf, 0, sizeof(buf));
  v72 = -1;
  v17 = *(_QWORD *)a1;
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_100004678(__dst, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)__dst = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    v62 = v2->__r_.__value_.__r.__words[2];
  }
  v18 = sub_1000042D0(v17, (uint64_t)__dst, (std::string *)buf);
  v19 = v18;
  if (SHIBYTE(v62) < 0)
  {
    operator delete(__dst[0]);
    if (v19)
      goto LABEL_38;
LABEL_50:
    v13 = 0;
    v14 = 0;
    goto LABEL_66;
  }
  if (!v18)
    goto LABEL_50;
LABEL_38:
  std::mutex::lock((std::mutex *)(a1 + 152));
  v20 = (id)qword_10085B4F0;
  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
  {
    v21 = SHIBYTE(v70);
    v22 = *(_BYTE **)&buf[24];
    v23 = buf[23];
    v24 = *(_BYTE **)buf;
    v25 = v71;
    v26 = HIBYTE(v71);
    sub_10038DEBC(v72, &__p);
    v27 = buf;
    v28 = &buf[24];
    if (v23 < 0)
      v27 = v24;
    if (v21 < 0)
      v28 = v22;
    *(_DWORD *)v63 = 136316162;
    p_p = &__p;
    if (v68 < 0)
      p_p = __p;
    *(_QWORD *)&v63[4] = v28;
    *(_WORD *)&v63[12] = 2080;
    *(_QWORD *)&v63[14] = v27;
    *(_WORD *)&v63[22] = 1024;
    *(_DWORD *)&v63[24] = v25;
    *(_WORD *)&v63[28] = 1024;
    *(_DWORD *)&v63[30] = v26;
    *(_WORD *)&v63[34] = 2080;
    *(_QWORD *)&v63[36] = p_p;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "regulatory,settings,countryAvailable,U,iso,%s,name,%s,ch5,%d,ch9,%d,group,%s", v63, 0x2Cu);
    if (v68 < 0)
      operator delete(__p);
  }

  v30 = sub_100299734(a1);
  v31 = v71;
  *(_QWORD *)v63 = &unk_100475890;
  v32 = sub_10029A87C((uint64_t **)(a1 + 56), (unsigned __int8 *)&unk_100475890, (uint64_t)&unk_100472CF8, (_BYTE **)v63);
  *(_QWORD *)v63 = &unk_1004758A0;
  *((_BYTE *)sub_100184664(v32 + 5, (int *)&unk_1004758A0, (uint64_t)&unk_100472CF8, (_DWORD **)v63) + 32) = v31;
  v33 = HIBYTE(v71);
  *(_QWORD *)v63 = &unk_100475891;
  v34 = sub_10029A87C((uint64_t **)(a1 + 56), (unsigned __int8 *)&unk_100475891, (uint64_t)&unk_100472CF8, (_BYTE **)v63);
  *(_QWORD *)v63 = &unk_1004758A0;
  *((_BYTE *)sub_100184664(v34 + 5, (int *)&unk_1004758A0, (uint64_t)&unk_100472CF8, (_DWORD **)v63) + 32) = v33;
  v35 = sub_100298360(a1, 5);
  v36 = sub_100298360(a1, 9);
  std::string::operator=(v4, v2);
  if (*(unsigned __int8 *)(a1 + 32) == v72)
  {
    v37 = 0;
  }
  else
  {
    *(_BYTE *)(a1 + 32) = v72;
    v37 = 1;
  }
  v14 = v35 || v36;
  if (sub_100299734(a1) && v30)
    v38 = v37;
  else
    v38 = 0;
  if (*(_BYTE *)(a1 + 216))
  {
    v39 = 1;
  }
  else
  {
    v40 = qword_10085B4F0;
    if (os_log_type_enabled((os_log_t)qword_10085B4F0, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)v63 = 67109376;
      *(_DWORD *)&v63[4] = v14;
      *(_WORD *)&v63[8] = 1024;
      *(_DWORD *)&v63[10] = v38;
      _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "regulatory,settings,setIsoCountry,ignoreUpdates,isChannelSettingChanged,%d,isPowerTableChanged,%d", v63, 0xEu);
    }
    v39 = *(unsigned __int8 *)(a1 + 216);
  }
  std::mutex::unlock((std::mutex *)(a1 + 152));
  v41 = sub_100007824();
  if (!v39)
    v14 = 0;
  if (v38)
    v13 = v39 != 0;
  else
    v13 = 0;
  sub_1003916D8((uint64_t)v41, (char *)v4);
LABEL_66:
  memset(v63, 0, sizeof(v63));
  v64 = -1;
  v42 = *(_QWORD *)a1;
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_100004678(v59, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)v59 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    v60 = v2->__r_.__value_.__r.__words[2];
  }
  v43 = sub_10038FB38(v42, (uint64_t *)v59, (uint64_t)v63);
  v44 = v43;
  if (SHIBYTE(v60) < 0)
  {
    operator delete(v59[0]);
    if (v44)
      goto LABEL_71;
  }
  else if (v43)
  {
LABEL_71:
    v45 = (std::mutex *)(a1 + 152);
    std::mutex::lock((std::mutex *)(a1 + 152));
    v46 = sub_100299798(a1);
    v49 = HIBYTE(v64) < 0xFEu && v64 != 254 && v64 != 255;
    __p = byte_100475892;
    v50 = sub_10029A87C((uint64_t **)(a1 + 104), byte_100475892, (uint64_t)&unk_100472CF8, (_BYTE **)&__p);
    __p = &unk_1004758A0;
    *((_BYTE *)sub_100184664(v50 + 5, (int *)&unk_1004758A0, (uint64_t)&unk_100472CF8, (_DWORD **)&__p) + 32) = v49;
    v15 = sub_100297D30(a1, 1);
    v51 = v64;
    if (__PAIR64__(*(unsigned __int8 *)(a1 + 34), *(unsigned __int8 *)(a1 + 33)) == __PAIR64__(v64, HIBYTE(v64)))
    {
      v52 = 0;
    }
    else
    {
      *(_BYTE *)(a1 + 33) = HIBYTE(v64);
      *(_BYTE *)(a1 + 34) = v51;
      v52 = 1;
    }
    v53 = sub_100299798(a1);
    if (v46)
      v54 = v52;
    else
      v54 = 1;
    if (v53)
      v55 = v54;
    else
      v55 = 0;
    if (*(_BYTE *)(a1 + 216))
    {
      v56 = 1;
    }
    else
    {
      v57 = qword_10085B4F0;
      if (os_log_type_enabled((os_log_t)qword_10085B4F0, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(__p) = 67109376;
        HIDWORD(__p) = v15;
        v66 = 1024;
        v67 = v55;
        _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_DEFAULT, "regulatory,settings,setIsoCountry,ignoreUpdates,N,isChannelSettingChanged,%d,isPowerTableChanged,%d", (uint8_t *)&__p, 0xEu);
      }
      v56 = *(_BYTE *)(a1 + 216) != 0;
    }
    if (v55)
      v16 = v56;
    else
      v16 = 0;
    std::mutex::unlock(v45);
    goto LABEL_100;
  }
  v15 = 0;
  v16 = 0;
LABEL_100:
  if ((char)v63[47] < 0)
    operator delete(*(void **)&v63[24]);
  if ((char)v63[23] < 0)
    operator delete(*(void **)v63);
  if (SHIBYTE(v70) < 0)
    operator delete(*(void **)&buf[24]);
  if ((buf[23] & 0x80000000) != 0)
    operator delete(*(void **)buf);
  return (v15 << 16) | (v16 << 24) | (v13 << 8) | v14;
}

void sub_10029969C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::mutex *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,char a25)
{
  void *v25;
  uint64_t v26;

  std::mutex::unlock(a10);
  sub_1001D5744(v26 - 160);
  _Unwind_Resume(a1);
}

BOOL sub_100299734(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _BOOL8 result;
  _QWORD *v4;
  _QWORD *v5;
  BOOL v6;

  v1 = *(_QWORD **)(a1 + 80);
  v2 = (_QWORD *)(a1 + 88);
  if (v1 == (_QWORD *)(a1 + 88))
    return 0;
  do
  {
    result = *((_BYTE *)v1 + 26) != 0;
    if (*((_BYTE *)v1 + 26))
      break;
    v4 = (_QWORD *)v1[1];
    if (v4)
    {
      do
      {
        v5 = v4;
        v4 = (_QWORD *)*v4;
      }
      while (v4);
    }
    else
    {
      do
      {
        v5 = (_QWORD *)v1[2];
        v6 = *v5 == (_QWORD)v1;
        v1 = v5;
      }
      while (!v6);
    }
    v1 = v5;
  }
  while (v5 != v2);
  return result;
}

BOOL sub_100299798(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _BOOL8 result;
  _QWORD *v4;
  _QWORD *v5;
  BOOL v6;

  v1 = *(_QWORD **)(a1 + 128);
  v2 = (_QWORD *)(a1 + 136);
  if (v1 == (_QWORD *)(a1 + 136))
    return 0;
  do
  {
    result = *((_BYTE *)v1 + 26) != 0;
    if (*((_BYTE *)v1 + 26))
      break;
    v4 = (_QWORD *)v1[1];
    if (v4)
    {
      do
      {
        v5 = v4;
        v4 = (_QWORD *)*v4;
      }
      while (v4);
    }
    else
    {
      do
      {
        v5 = (_QWORD *)v1[2];
        v6 = *v5 == (_QWORD)v1;
        v1 = v5;
      }
      while (!v6);
    }
    v1 = v5;
  }
  while (v5 != v2);
  return result;
}

uint64_t sub_1002997FC(uint64_t a1)
{
  std::mutex *v2;
  uint64_t **v3;
  uint64_t **v4;
  uint64_t **v5;
  unsigned int v6;
  _BOOL4 v7;
  NSObject *v8;
  _BOOL4 v9;
  uint8_t buf[8];
  __int16 v12;
  int v13;

  v2 = (std::mutex *)(a1 + 152);
  std::mutex::lock((std::mutex *)(a1 + 152));
  if (*(char *)(a1 + 31) < 0)
  {
    **(_BYTE **)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
  }
  else
  {
    *(_BYTE *)(a1 + 8) = 0;
    *(_BYTE *)(a1 + 31) = 0;
  }
  *(_QWORD *)buf = &unk_100475890;
  v3 = sub_10029A87C((uint64_t **)(a1 + 56), (unsigned __int8 *)&unk_100475890, (uint64_t)&unk_100472CF8, (_BYTE **)buf);
  *(_QWORD *)buf = &unk_1004758A0;
  *((_BYTE *)sub_100184664(v3 + 5, (int *)&unk_1004758A0, (uint64_t)&unk_100472CF8, (_DWORD **)buf) + 32) = 0;
  *(_QWORD *)buf = &unk_100475891;
  v4 = sub_10029A87C((uint64_t **)(a1 + 56), (unsigned __int8 *)&unk_100475891, (uint64_t)&unk_100472CF8, (_BYTE **)buf);
  *(_QWORD *)buf = &unk_1004758A0;
  *((_BYTE *)sub_100184664(v4 + 5, (int *)&unk_1004758A0, (uint64_t)&unk_100472CF8, (_DWORD **)buf) + 32) = 0;
  *(_QWORD *)buf = byte_100475892;
  v5 = sub_10029A87C((uint64_t **)(a1 + 104), byte_100475892, (uint64_t)&unk_100472CF8, (_BYTE **)buf);
  *(_QWORD *)buf = &unk_1004758A0;
  *((_BYTE *)sub_100184664(v5 + 5, (int *)&unk_1004758A0, (uint64_t)&unk_100472CF8, (_DWORD **)buf) + 32) = 0;
  v6 = sub_100298964(a1);
  if (*(_BYTE *)(a1 + 216))
  {
    v7 = 1;
  }
  else
  {
    v8 = qword_10085B4F0;
    if (os_log_type_enabled((os_log_t)qword_10085B4F0, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)&buf[4] = v6 & 1;
      v12 = 1024;
      v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "regulatory,settings,clearIsoCountry,isChannelSettingChanged,%d,isPowerTableChanged,%d", buf, 0xEu);
    }
    v7 = *(_BYTE *)(a1 + 216) != 0;
  }
  v9 = (v6 & 1) != 0 && v7;
  std::mutex::unlock(v2);
  return v9 & 0xFFFEFFFF | (((v6 >> 8) & 1) << 16);
}

void sub_100299A0C(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100299A24(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  BOOL v8;
  uint64_t *v9;
  _QWORD **v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  int v20;
  _QWORD *v21;
  _QWORD **v22;
  unsigned int *v23;
  char *v24;
  BOOL v25;
  int v26;
  char *v27;
  int v28;
  int v29;
  BOOL v30;
  uint64_t v31;
  _QWORD **v32;
  _QWORD *v33[2];
  void *__p;
  char *v35;
  char *v36;

  if (sub_100299734(a1))
    return 1;
  __p = 0;
  v35 = 0;
  v36 = 0;
  v5 = *(_QWORD *)(a1 + 64);
  v4 = a1 + 64;
  v3 = v5;
  if (!v5)
    goto LABEL_52;
  v6 = v4;
  do
  {
    v7 = *(unsigned __int8 *)(v3 + 32);
    v8 = v7 >= 9;
    if (v7 >= 9)
      v9 = (uint64_t *)v3;
    else
      v9 = (uint64_t *)(v3 + 8);
    if (v8)
      v6 = v3;
    v3 = *v9;
  }
  while (*v9);
  if (v6 == v4 || *(unsigned __int8 *)(v6 + 32) >= 0xAu)
LABEL_52:
    __assert_rtn("uwbState", "PRRegulatorySettings.mm", 391, "ch9Preferences != fUWBChannelPref.end()");
  sub_10029AAC0((uint64_t *)&v32, v6 + 40);
  v10 = v32;
  if (v32 != v33)
  {
    do
    {
      if (!*((_BYTE *)v10 + 32))
      {
        v11 = v35;
        if (v35 >= v36)
        {
          v13 = (char *)__p;
          v14 = (v35 - (_BYTE *)__p) >> 2;
          v15 = v14 + 1;
          if ((unint64_t)(v14 + 1) >> 62)
            sub_100026E7C();
          v16 = v36 - (_BYTE *)__p;
          if ((v36 - (_BYTE *)__p) >> 1 > v15)
            v15 = v16 >> 1;
          if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL)
            v17 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v17 = v15;
          if (v17)
          {
            v18 = (char *)sub_10003B05C((uint64_t)&v36, v17);
            v13 = (char *)__p;
            v11 = v35;
          }
          else
          {
            v18 = 0;
          }
          v19 = &v18[4 * v14];
          *(_DWORD *)v19 = *((_DWORD *)v10 + 7);
          v12 = v19 + 4;
          while (v11 != v13)
          {
            v20 = *((_DWORD *)v11 - 1);
            v11 -= 4;
            *((_DWORD *)v19 - 1) = v20;
            v19 -= 4;
          }
          __p = v19;
          v35 = v12;
          v36 = &v18[4 * v17];
          if (v13)
            operator delete(v13);
        }
        else
        {
          *(_DWORD *)v35 = *((_DWORD *)v10 + 7);
          v12 = v11 + 4;
        }
        v35 = v12;
      }
      v21 = v10[1];
      if (v21)
      {
        do
        {
          v22 = (_QWORD **)v21;
          v21 = (_QWORD *)*v21;
        }
        while (v21);
      }
      else
      {
        do
        {
          v22 = (_QWORD **)v10[2];
          v25 = *v22 == v10;
          v10 = v22;
        }
        while (!v25);
      }
      v10 = v22;
    }
    while (v22 != v33);
  }
  v23 = (unsigned int *)__p;
  v24 = (char *)__p + 4;
  v25 = __p == v35 || v24 == v35;
  if (!v25)
  {
    v26 = *(_DWORD *)__p;
    v27 = (char *)__p + 4;
    do
    {
      v29 = *(_DWORD *)v27;
      v27 += 4;
      v28 = v29;
      v30 = v26 < v29;
      if (v26 <= v29)
        v26 = v28;
      if (v30)
        v23 = (unsigned int *)v24;
      v24 = v27;
    }
    while (v27 != v35);
  }
  v31 = *v23;
  sub_10003E3F0((uint64_t)&v32, v33[0]);
  if (__p)
  {
    v35 = (char *)__p;
    operator delete(__p);
  }
  return v31 << 32;
}

void sub_100299C54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100299C8C(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  _QWORD **v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  int v18;
  _QWORD *v19;
  _QWORD **v20;
  unsigned int *v21;
  char *v22;
  BOOL v23;
  int v24;
  char *v25;
  int v26;
  int v27;
  BOOL v28;
  uint64_t v29;
  _QWORD **v30;
  _QWORD *v31[2];
  void *__p;
  char *v33;
  char *v34;

  if (sub_100299798(a1))
    return 1;
  __p = 0;
  v33 = 0;
  v34 = 0;
  v5 = *(_QWORD *)(a1 + 112);
  v4 = a1 + 112;
  v3 = v5;
  if (!v5)
    goto LABEL_51;
  v6 = v4;
  do
  {
    if (*(_BYTE *)(v3 + 32))
      v7 = (uint64_t *)v3;
    else
      v7 = (uint64_t *)(v3 + 8);
    if (*(_BYTE *)(v3 + 32))
      v6 = v3;
    v3 = *v7;
  }
  while (*v7);
  if (v6 == v4 || *(unsigned __int8 *)(v6 + 32) >= 2u)
LABEL_51:
    __assert_rtn("nbState", "PRRegulatorySettings.mm", 430, "unii3Preferences != fNBChannelPref.end()");
  sub_10029AAC0((uint64_t *)&v30, v6 + 40);
  v8 = v30;
  if (v30 != v31)
  {
    do
    {
      if (!*((_BYTE *)v8 + 32))
      {
        v9 = v33;
        if (v33 >= v34)
        {
          v11 = (char *)__p;
          v12 = (v33 - (_BYTE *)__p) >> 2;
          v13 = v12 + 1;
          if ((unint64_t)(v12 + 1) >> 62)
            sub_100026E7C();
          v14 = v34 - (_BYTE *)__p;
          if ((v34 - (_BYTE *)__p) >> 1 > v13)
            v13 = v14 >> 1;
          if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL)
            v15 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v15 = v13;
          if (v15)
          {
            v16 = (char *)sub_10003B05C((uint64_t)&v34, v15);
            v11 = (char *)__p;
            v9 = v33;
          }
          else
          {
            v16 = 0;
          }
          v17 = &v16[4 * v12];
          *(_DWORD *)v17 = *((_DWORD *)v8 + 7);
          v10 = v17 + 4;
          while (v9 != v11)
          {
            v18 = *((_DWORD *)v9 - 1);
            v9 -= 4;
            *((_DWORD *)v17 - 1) = v18;
            v17 -= 4;
          }
          __p = v17;
          v33 = v10;
          v34 = &v16[4 * v15];
          if (v11)
            operator delete(v11);
        }
        else
        {
          *(_DWORD *)v33 = *((_DWORD *)v8 + 7);
          v10 = v9 + 4;
        }
        v33 = v10;
      }
      v19 = v8[1];
      if (v19)
      {
        do
        {
          v20 = (_QWORD **)v19;
          v19 = (_QWORD *)*v19;
        }
        while (v19);
      }
      else
      {
        do
        {
          v20 = (_QWORD **)v8[2];
          v23 = *v20 == v8;
          v8 = v20;
        }
        while (!v23);
      }
      v8 = v20;
    }
    while (v20 != v31);
  }
  v21 = (unsigned int *)__p;
  v22 = (char *)__p + 4;
  v23 = __p == v33 || v22 == v33;
  if (!v23)
  {
    v24 = *(_DWORD *)__p;
    v25 = (char *)__p + 4;
    do
    {
      v27 = *(_DWORD *)v25;
      v25 += 4;
      v26 = v27;
      v28 = v24 < v27;
      if (v24 <= v27)
        v24 = v26;
      if (v28)
        v21 = (unsigned int *)v22;
      v22 = v25;
    }
    while (v25 != v33);
  }
  v29 = *v21;
  sub_10003E3F0((uint64_t)&v30, v31[0]);
  if (__p)
  {
    v33 = (char *)__p;
    operator delete(__p);
  }
  return v29 << 32;
}

void sub_100299EBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100299EF4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::mutex *v4;
  NSObject *v5;
  NSObject *v6;
  int v7;
  int v8;
  int v9;
  uint8_t v10[16];
  uint8_t buf[16];

  v4 = (std::mutex *)(a1 + 152);
  std::mutex::lock((std::mutex *)(a1 + 152));
  *(_QWORD *)(a2 + 32) = 0;
  *(_BYTE *)(a2 + 4) = 0;
  *(_BYTE *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 12) = 0;
  *(_BYTE *)(a2 + 16) = 0;
  *(_BYTE *)(a2 + 20) = 0;
  *(_BYTE *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  if (!*(_BYTE *)(a1 + 216))
  {
    v5 = qword_10085B4F0;
    if (os_log_type_enabled((os_log_t)qword_10085B4F0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "regulatory,settings,getRegulatorySettingsLocked", buf, 2u);
    }
  }
  *(_BYTE *)(a1 + 216) = 1;
  if (sub_100391730())
  {
    v6 = qword_10085B4F0;
    if (os_log_type_enabled((os_log_t)qword_10085B4F0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "PRRegulatorySettings: bypassing regulatory compliance requirements via defaults write.", v10, 2u);
    }
    *(_WORD *)a2 = 257;
    *(_BYTE *)(a2 + 4) = 1;
    *(_BYTE *)(a2 + 8) = 0;
    *(_BYTE *)(a2 + 12) = 0;
    *(_BYTE *)(a2 + 16) = 1;
    *(_BYTE *)(a2 + 20) = 0;
    *(_BYTE *)(a2 + 24) = 0;
    std::string::assign((std::string *)(a2 + 32), "US");
    v7 = 0;
    *(_BYTE *)(a2 + 56) = 0;
    *(_WORD *)(a2 + 58) = 0;
  }
  else
  {
    *(_BYTE *)a2 = sub_100299734(a1);
    *(_BYTE *)(a2 + 1) = sub_100299798(a1);
    *(_QWORD *)(a2 + 4) = sub_100299A24(a1);
    *(_DWORD *)(a2 + 12) = v8;
    *(_QWORD *)(a2 + 16) = sub_100299C8C(a1);
    *(_DWORD *)(a2 + 24) = v9;
    std::string::operator=((std::string *)(a2 + 32), (const std::string *)(a1 + 8));
    *(_BYTE *)(a2 + 56) = *(_BYTE *)(a1 + 32);
    *(_WORD *)(a2 + 58) = *(unsigned __int8 *)(a1 + 36);
    v7 = *(unsigned __int8 *)(a1 + 44);
    if (*(_BYTE *)(a1 + 44))
      v7 = *(_DWORD *)(a1 + 40);
  }
  *(_DWORD *)(a2 + 60) = v7;
  std::mutex::unlock(v4);
}

void sub_10029A0A8(_Unwind_Exception *a1)
{
  std::mutex *v1;
  uint64_t v2;
  void **v3;

  if (*(char *)(v2 + 55) < 0)
    operator delete(*v3);
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

NSMutableArray *sub_10029A0D4(uint64_t a1)
{
  std::mutex *v2;
  NSMutableArray *v3;
  _QWORD *v4;
  void **v5;
  int v6;
  void **v7;
  void **v8;
  void **v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void **v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  NSString *v17;
  void *v18;
  void **v19;
  void *v20;
  void **v21;
  void *v22;
  void **v23;
  void *v24;
  unsigned __int8 v26;
  unsigned __int8 v27;
  void *__p[2];
  char v29;
  void *v30[2];
  char v31;
  void *v32[2];
  char v33;

  v2 = (std::mutex *)(a1 + 152);
  std::mutex::lock((std::mutex *)(a1 + 152));
  v3 = objc_opt_new(NSMutableArray);
  v4 = (_QWORD *)(a1 + 8);
  if (*(char *)(a1 + 31) < 0)
    v4 = (_QWORD *)*v4;
  v5 = v32;
  sub_10038DEBC(*(_BYTE *)(a1 + 32), v32);
  if (v33 < 0)
    v5 = (void **)v32[0];
  sub_10038DF2C(*(_BYTE *)(a1 + 33), v30);
  v6 = v31;
  v7 = (void **)v30[0];
  sub_10038DEF4(*(_BYTE *)(a1 + 34), __p);
  v8 = v30;
  if (v6 < 0)
    v8 = v7;
  if (v29 >= 0)
    v9 = __p;
  else
    v9 = (void **)__p[0];
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Country: %s. UWB-reg group: %s. NB-reg group: %s. NB-SAR group: %s. Rose ready: %d"), v4, v5, v8, v9, *(unsigned __int8 *)(a1 + 216)));
  -[NSMutableArray addObject:](v3, "addObject:", v10);

  if (v29 < 0)
    operator delete(__p[0]);
  if (v31 < 0)
    operator delete(v30[0]);
  if (v33 < 0)
    operator delete(v32[0]);
  if (*(_BYTE *)(a1 + 44))
    v11 = *(unsigned int *)(a1 + 40);
  else
    v11 = 0;
  v12 = *(unsigned __int8 *)(a1 + 36);
  sub_1003610EC(v11);
  if (v33 >= 0)
    v13 = v32;
  else
    v13 = (void **)v32[0];
  v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Accessory: %d (%s). Switch: %d. Airplane mode: %d. Region allowed: %d"), v12, v13, *(unsigned __int8 *)(a1 + 48), *(unsigned __int8 *)(a1 + 49), *(unsigned __int8 *)(a1 + 50)));
  -[NSMutableArray addObject:](v3, "addObject:", v14);

  if (v33 < 0)
    operator delete(v32[0]);
  LOBYTE(__p[0]) = 5;
  v32[0] = __p;
  v15 = *((unsigned __int8 *)sub_10029AA00((uint64_t **)(a1 + 80), (unsigned __int8 *)__p, (uint64_t)&unk_100472CF8, (unsigned __int8 **)v32)+ 26);
  v27 = 9;
  v32[0] = &v27;
  v16 = *((unsigned __int8 *)sub_10029AA00((uint64_t **)(a1 + 80), &v27, (uint64_t)&unk_100472CF8, (unsigned __int8 **)v32)+ 26);
  v26 = 1;
  v32[0] = &v26;
  v17 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Channel state: CH5 %d, CH9 %d, UNII-3 %d. Preference strings:"), v15, v16, *((unsigned __int8 *)sub_10029AA00((uint64_t **)(a1 + 128), &v26, (uint64_t)&unk_100472CF8, (unsigned __int8 **)v32)+ 26));
  v18 = (void *)objc_claimAutoreleasedReturnValue(v17);
  -[NSMutableArray addObject:](v3, "addObject:", v18);

  sub_100298620(a1, 5);
  if (v33 >= 0)
    v19 = v32;
  else
    v19 = (void **)v32[0];
  v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("    %s"), v19));
  -[NSMutableArray addObject:](v3, "addObject:", v20);

  if (v33 < 0)
    operator delete(v32[0]);
  sub_100298620(a1, 9);
  if (v33 >= 0)
    v21 = v32;
  else
    v21 = (void **)v32[0];
  v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("    %s"), v21));
  -[NSMutableArray addObject:](v3, "addObject:", v22);

  if (v33 < 0)
    operator delete(v32[0]);
  sub_10029801C(a1, 1);
  if (v33 >= 0)
    v23 = v32;
  else
    v23 = (void **)v32[0];
  v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("    %s"), v23));
  -[NSMutableArray addObject:](v3, "addObject:", v24);

  if (v33 < 0)
    operator delete(v32[0]);
  std::mutex::unlock(v2);
  return v3;
}

void sub_10029A49C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  std::mutex *v33;
  void *v34;
  void *v35;

  if (a33 < 0)
    operator delete(__p);

  std::mutex::unlock(v33);
  _Unwind_Resume(a1);
}

uint64_t *sub_10029A560(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t **v5;
  unsigned int v6;
  uint64_t **v7;
  unsigned int v8;
  uint64_t *v10;

  v5 = (uint64_t **)(a1 + 8);
  v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    v6 = *a2;
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v4;
        v8 = *((unsigned __int8 *)v4 + 32);
        if (v6 >= v8)
          break;
        v4 = *v7;
        v5 = v7;
        if (!*v7)
          goto LABEL_10;
      }
      if (v8 >= v6)
        break;
      v4 = v7[1];
      if (!v4)
      {
        v5 = v7 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v7 = (uint64_t **)(a1 + 8);
LABEL_10:
    sub_10029A610(a1, a3, (uint64_t)&v10);
    sub_1000272A8((uint64_t **)a1, (uint64_t)v7, v5, v10);
    return v10;
  }
  return (uint64_t *)v7;
}

_BYTE *sub_10029A610@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _BYTE *result;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;

  v5 = a1 + 8;
  result = operator new(0x40uLL);
  *(_QWORD *)a3 = result;
  *(_QWORD *)(a3 + 8) = v5;
  result[32] = *(_BYTE *)a2;
  v7 = (_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 16);
  *((_QWORD *)result + 5) = *(_QWORD *)(a2 + 8);
  *((_QWORD *)result + 6) = v8;
  v9 = result + 48;
  v10 = *(_QWORD *)(a2 + 24);
  *((_QWORD *)result + 7) = v10;
  if (v10)
  {
    *(_QWORD *)(v8 + 16) = v9;
    *(_QWORD *)(a2 + 8) = v7;
    *v7 = 0;
    *(_QWORD *)(a2 + 24) = 0;
  }
  else
  {
    *((_QWORD *)result + 5) = v9;
  }
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

uint64_t **sub_10029A690(uint64_t **a1, int *a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t **v6;
  int v7;
  uint64_t **v8;
  int v9;
  _DWORD *v10;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = *((_DWORD *)v5 + 7);
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_10:
    v10 = operator new(0x28uLL);
    v10[7] = *(_DWORD *)a3;
    *((_BYTE *)v10 + 32) = *(_BYTE *)(a3 + 4);
    sub_1000272A8(a1, (uint64_t)v8, v6, (uint64_t *)v10);
    return (uint64_t **)v10;
  }
  return v8;
}

uint64_t **sub_10029A750(uint64_t a1, int a2, char a3)
{
  uint64_t v5;
  uint64_t **v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t **v9;
  _QWORD **v11;
  _QWORD *v12[2];
  unsigned __int8 *v13;
  _QWORD **v14;
  _QWORD *v15[2];
  unsigned __int8 v16;

  v16 = 1;
  v5 = *(_QWORD *)(*(_QWORD *)a1 + 112);
  v6 = (uint64_t **)(*(_QWORD *)a1 + 104);
  if (!v5)
    goto LABEL_11;
  v7 = *(_QWORD *)a1 + 112;
  do
  {
    if (*(_BYTE *)(v5 + 32))
      v8 = (uint64_t *)v5;
    else
      v8 = (uint64_t *)(v5 + 8);
    if (*(_BYTE *)(v5 + 32))
      v7 = v5;
    v5 = *v8;
  }
  while (*v8);
  if (v7 == *(_QWORD *)a1 + 112 || *(unsigned __int8 *)(v7 + 32) >= 2u)
  {
LABEL_11:
    v12[0] = 0;
    v12[1] = 0;
    v11 = v12;
    LOBYTE(v13) = 1;
    v15[0] = 0;
    v15[1] = 0;
    v14 = v15;
    sub_10029A560((uint64_t)v6, (unsigned __int8 *)&v13, (uint64_t)&v13);
    sub_10003E3F0((uint64_t)&v14, v15[0]);
    sub_10003E3F0((uint64_t)&v11, v12[0]);
  }
  v13 = &v16;
  v9 = sub_10029A87C(v6, &v16, (uint64_t)&unk_100472CF8, &v13);
  LODWORD(v13) = a2;
  BYTE4(v13) = a3;
  return sub_10029A690(v9 + 5, (int *)&v13, (uint64_t)&v13);
}

void sub_10029A858(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10, uint64_t a11, uint64_t a12, uint64_t a13, _QWORD *a14)
{
  uint64_t v14;

  sub_10003E3F0(v14, a14);
  sub_10003E3F0((uint64_t)&a9, a10);
  _Unwind_Resume(a1);
}

uint64_t **sub_10029A87C(uint64_t **a1, unsigned __int8 *a2, uint64_t a3, _BYTE **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unsigned int v8;
  uint64_t **v9;
  unsigned int v10;
  _BYTE *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *((unsigned __int8 *)v6 + 32);
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = operator new(0x40uLL);
    v11[32] = **a4;
    *((_QWORD *)v11 + 7) = 0;
    *((_QWORD *)v11 + 6) = 0;
    *((_QWORD *)v11 + 5) = v11 + 48;
    sub_1000272A8(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

uint64_t **sub_10029A948(uint64_t **a1, unsigned __int8 *a2, _WORD *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  unsigned int v7;
  uint64_t **v8;
  unsigned int v9;
  char *v10;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = *((unsigned __int8 *)v5 + 25);
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_10:
    v10 = (char *)operator new(0x20uLL);
    *(_WORD *)(v10 + 25) = *a3;
    sub_1000272A8(a1, (uint64_t)v8, v6, (uint64_t *)v10);
    return (uint64_t **)v10;
  }
  return v8;
}

uint64_t **sub_10029AA00(uint64_t **a1, unsigned __int8 *a2, uint64_t a3, unsigned __int8 **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unsigned int v8;
  uint64_t **v9;
  unsigned int v10;
  char *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *((unsigned __int8 *)v6 + 25);
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = (char *)operator new(0x20uLL);
    *(_WORD *)(v11 + 25) = **a4;
    sub_1000272A8(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

uint64_t *sub_10029AAC0(uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_10029AB14(a1, *(int **)a2, (int *)(a2 + 8));
  return a1;
}

void sub_10029AAFC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10003E3F0(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_10029AB14(uint64_t *result, int *a2, int *a3)
{
  int *v4;
  uint64_t **v5;
  uint64_t *v6;
  int *v7;
  int *v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = sub_100182300(v5, v6, v4 + 7, (uint64_t *)(v4 + 7));
      v7 = (int *)*((_QWORD *)v4 + 1);
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = *(int **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (int *)*((_QWORD *)v4 + 2);
          v9 = *(_QWORD *)v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

void sub_10029AB98()
{
  void *v0;

  v0 = objc_autoreleasePoolPush();
  qword_10085B4F0 = (uint64_t)os_log_create("com.apple.nearbyd", "Regulatory");
  objc_autoreleasePoolPop(v0);
}

void sub_10029AC58(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10029AEF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,id a25)
{
  void *v25;
  void *v26;

  _Block_object_dispose(&a20, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10029AF58(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_10029AF68(uint64_t a1)
{

}

void sub_10029AF70(uint64_t a1, void *a2)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a2);
}

uint64_t sub_10029AF80(uint64_t result)
{
  atomic_store(0, (unint64_t *)(*(_QWORD *)(result + 32) + 8));
  return result;
}

void sub_10029AFC8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void **sub_10029B008(void **a1)
{
  void **v3;

  v3 = a1;
  sub_10029C508(&v3);
  return a1;
}

uint64_t sub_10029B03C(uint64_t a1)
{
  sub_10029C968(a1, *(_QWORD **)(a1 + 8));
  return a1;
}

dispatch_queue_t *sub_10029B064(dispatch_queue_t *a1)
{
  void *v2;
  void *v3;
  dispatch_queue_t v4;
  _QWORD v6[5];

  *a1 = dispatch_queue_create("com.apple.nearbyd.ota.queue", 0);
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[BGSystemTaskScheduler sharedScheduler](BGSystemTaskScheduler, "sharedScheduler"));
  objc_msgSend(v2, "deregisterTaskWithIdentifier:", CFSTR("com.apple.nearbyd.ota.task"));

  v3 = (void *)objc_claimAutoreleasedReturnValue(+[BGSystemTaskScheduler sharedScheduler](BGSystemTaskScheduler, "sharedScheduler"));
  v4 = *a1;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10029B160;
  v6[3] = &unk_100811EC0;
  v6[4] = a1;
  objc_msgSend(v3, "registerForTaskWithIdentifier:usingQueue:launchHandler:", CFSTR("com.apple.nearbyd.ota.task"), v4, v6);

  dispatch_async(*a1, &stru_100811EE0);
  sub_10029B400(a1);
  return a1;
}

void sub_10029B13C(_Unwind_Exception *a1)
{
  id *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_10029B160(uint64_t a1, void *a2)
{
  sub_10029B168(*(dispatch_queue_t **)(a1 + 32), a2);
}

void sub_10029B168(dispatch_queue_t *a1, void *a2)
{
  id v3;
  NSObject *v4;
  __int128 v5;
  uint64_t v6;
  int v7;
  NSObject *v8;
  _BOOL4 v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  BOOL v13;
  NSObject *v14;
  __int128 v15;
  _QWORD v16[5];
  uint8_t buf[8];
  uint8_t *v18;
  uint64_t v19;
  char v20;
  uint8_t v21[4];
  uint64_t v22;

  v3 = a2;
  v4 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#ota,start to query ota files", buf, 2u);
  }
  *(_QWORD *)buf = 0;
  v18 = buf;
  v19 = 0x2020000000;
  v20 = 0;
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  v16[2] = sub_10029B898;
  v16[3] = &unk_100811F08;
  v16[4] = buf;
  objc_msgSend(v3, "setExpirationHandler:", v16);
  v6 = qword_10085B5E8;
  if ((_UNKNOWN *)qword_10085B5E8 != &unk_10085B5F0)
  {
    *(_QWORD *)&v5 = 136315138;
    v15 = v5;
    while (1)
    {
      v7 = v18[24];
      v8 = qword_10085F520;
      v9 = os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT);
      if (v7)
        break;
      if (v9)
      {
        v10 = v6 + 32;
        if (*(char *)(v6 + 55) < 0)
          v10 = *(_QWORD *)(v6 + 32);
        *(_DWORD *)v21 = v15;
        v22 = v10;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#ota,query %s", v21, 0xCu);
      }
      sub_10029B8AC(a1, v6 + 32, (_QWORD *)(v6 + 56));
      v11 = *(_QWORD **)(v6 + 8);
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = *(_QWORD **)(v6 + 16);
          v13 = *v12 == v6;
          v6 = (uint64_t)v12;
        }
        while (!v13);
      }
      v6 = (uint64_t)v12;
      if (v12 == (_QWORD *)&unk_10085B5F0)
        goto LABEL_19;
    }
    if (v9)
    {
      *(_WORD *)v21 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#ota,task expiration, terminate file query", v21, 2u);
    }
  }
LABEL_19:
  objc_msgSend(v3, "setTaskCompleted", v15);
  v14 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v21 = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#ota,task complete", v21, 2u);
  }
  _Block_object_dispose(buf, 8);

}

void sub_10029B3D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  void *v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

void sub_10029B400(NSObject **a1)
{
  NSObject *v2;
  NSObject *v3;
  _QWORD block[5];
  uint8_t buf[16];

  v2 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#ota,query configurable parameters on startup", buf, 2u);
  }
  v3 = *a1;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10029B598;
  block[3] = &unk_1007FA668;
  block[4] = a1;
  dispatch_async(v3, block);
}

id *sub_10029B4A8(id *a1)
{
  void *v2;
  unsigned int v3;
  NSObject *v4;
  _DWORD v6[2];

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[BGSystemTaskScheduler sharedScheduler](BGSystemTaskScheduler, "sharedScheduler"));
  v3 = objc_msgSend(v2, "deregisterTaskWithIdentifier:", CFSTR("com.apple.nearbyd.ota.task"));

  v4 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    v6[0] = 67109120;
    v6[1] = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#ota,deregister %d in destructor", (uint8_t *)v6, 8u);
  }

  return a1;
}

void sub_10029B588(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_1000131D8(a1);
}

void sub_10029B598(uint64_t a1)
{
  sub_10029B5A0(*(dispatch_queue_t **)(a1 + 32));
}

void sub_10029B5A0(dispatch_queue_t *a1)
{
  NSObject *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  BOOL v6;
  uint8_t v7[16];

  v2 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#ota,query all files", v7, 2u);
  }
  dispatch_assert_queue_V2(*a1);
  v3 = (_QWORD *)qword_10085B5E8;
  if ((_UNKNOWN *)qword_10085B5E8 != &unk_10085B5F0)
  {
    do
    {
      sub_10029B8AC(a1, (uint64_t)(v3 + 4), v3 + 7);
      v4 = (_QWORD *)v3[1];
      if (v4)
      {
        do
        {
          v5 = v4;
          v4 = (_QWORD *)*v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          v5 = (_QWORD *)v3[2];
          v6 = *v5 == (_QWORD)v3;
          v3 = v5;
        }
        while (!v6);
      }
      v3 = v5;
    }
    while (v5 != (_QWORD *)&unk_10085B5F0);
  }
}

void sub_10029B67C(id a1)
{
  void *v1;
  void *v2;
  NSObject *v3;
  id v4;
  void *v5;
  unsigned __int8 v6;
  id v7;
  uint64_t v8;
  _BOOL4 v9;
  const char *v10;
  NSObject *v11;
  uint32_t v12;
  id v13;
  uint8_t buf[4];
  id v15;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[BGSystemTaskScheduler sharedScheduler](BGSystemTaskScheduler, "sharedScheduler"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "taskRequestForIdentifier:", CFSTR("com.apple.nearbyd.ota.task")));

  if (!v2)
  {
    v4 = objc_msgSend(objc_alloc((Class)BGRepeatingSystemTaskRequest), "initWithIdentifier:", CFSTR("com.apple.nearbyd.ota.task"));
    objc_msgSend(v4, "setInterval:", 86400.0);
    objc_msgSend(v4, "setMinDurationBetweenInstances:", 69120.0);
    objc_msgSend(v4, "setPriority:", 2);
    objc_msgSend(v4, "setPreventsDeviceSleep:", 1);
    objc_msgSend(v4, "setShouldWakeDevice:", 0);
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[BGSystemTaskScheduler sharedScheduler](BGSystemTaskScheduler, "sharedScheduler"));
    v13 = 0;
    v6 = objc_msgSend(v5, "submitTaskRequest:error:", v4, &v13);
    v7 = v13;

    v8 = qword_10085F520;
    v9 = os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT);
    if ((v6 & 1) != 0)
    {
      if (v9)
      {
        *(_WORD *)buf = 0;
        v10 = "#ota,submitted ota query task successfully";
        v11 = v8;
        v12 = 2;
LABEL_9:
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, v10, buf, v12);
      }
    }
    else if (v9)
    {
      *(_DWORD *)buf = 138412290;
      v15 = v7;
      v10 = "#ota,failed to submit task with error: %@";
      v11 = v8;
      v12 = 12;
      goto LABEL_9;
    }

    return;
  }
  v3 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#ota,task already submitted, return", buf, 2u);
  }
}

void sub_10029B864(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t sub_10029B898(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = 1;
  return result;
}

void sub_10029B8AC(dispatch_queue_t *a1, uint64_t a2, _QWORD *a3)
{
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const __CFDictionary *v9;
  const __CFDictionary *v10;
  CFTypeID v11;
  const char *v12;
  CFStringRef v13;
  CFTypeID v14;
  CFTypeID TypeID;
  NSObject *v16;
  _BYTE cf[24];

  dispatch_assert_queue_V2(*a1);
  v5 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    if (*(char *)(a2 + 23) >= 0)
      v6 = a2;
    else
      v6 = *(_QWORD *)a2;
    *(_DWORD *)cf = 136315138;
    *(_QWORD *)&cf[4] = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#ota,query file %s", cf, 0xCu);
  }
  if (*(char *)(a2 + 23) >= 0)
    v7 = a2;
  else
    v7 = *(_QWORD *)a2;
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithCString:encoding:](NSString, "stringWithCString:encoding:", v7, +[NSString defaultCStringEncoding](NSString, "defaultCStringEncoding")));
  v9 = (const __CFDictionary *)CLCopyNearbyAssetSettingsOfAccessoryFile();
  v10 = v9;
  if (v9)
  {
    v11 = CFGetTypeID(v9);
    if (v11 == CFDictionaryGetTypeID())
    {
      *(_QWORD *)cf = 0;
      if (*(char *)(a2 + 23) >= 0)
        v12 = (const char *)a2;
      else
        v12 = *(const char **)a2;
      v13 = CFStringCreateWithCString(kCFAllocatorDefault, v12, 0x8000100u);
      if (CFDictionaryGetValueIfPresent(v10, v13, (const void **)cf))
      {
        if (*(_QWORD *)cf)
        {
          v14 = CFGetTypeID(*(CFTypeRef *)cf);
          TypeID = CFDataGetTypeID();
          if (v14 == TypeID)
            sub_10029BAC4(TypeID, *(void **)cf, (uint64_t *)a2, a3);
        }
      }
      if (v13)
        CFRelease(v13);
LABEL_23:
      CFRelease(v10);
      goto LABEL_24;
    }
  }
  v16 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)cf = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "#ota,empty file content", cf, 2u);
  }
  if (v10)
    goto LABEL_23;
LABEL_24:

}

void sub_10029BAA0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10029BAC4(uint64_t a1, void *a2, uint64_t *a3, _QWORD *a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  BOOL v16;
  void *v17;
  id v18;
  id v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t *v23;
  NSObject *v24;
  const char *v25;
  void *v26;
  double v27;
  double v28;
  id v29;
  void *v30;
  void *v31;
  uint64_t v32;
  uint64_t *v33;
  uint32_t v34;
  id v35;
  id v36;
  void *v37;
  void *v38;
  NSObject *v39;
  uint64_t *v40;
  void *v41;
  id v42;
  id v43;
  void *v44;
  void *v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  __int128 v49;
  id v50;
  id v51;
  uint8_t buf[4];
  uint64_t *v54;
  __int16 v55;
  void *v56;
  __int16 v57;
  id v58;
  __int16 v59;
  double v60;

  v50 = a2;
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSPropertyListSerialization propertyListWithData:options:format:error:](NSPropertyListSerialization, "propertyListWithData:options:format:error:"));
  v51 = 0;
  if (v51)
  {
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
      sub_1003E57B8();
  }
  else
  {
    v7 = objc_opt_class(NSDictionary, v6);
    if ((objc_opt_isKindOfClass(v5, v7) & 1) != 0)
    {
      v9 = a4[1];
      if (*a4 != v9)
      {
        v10 = *a4 + 24;
        *(_QWORD *)&v8 = 136315906;
        v49 = v8;
        do
        {
          v11 = (_QWORD *)(v10 - 24);
          if (*(char *)(v10 - 1) < 0)
            v11 = (_QWORD *)*v11;
          v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v11, v49));
          v13 = v10;
          if (*(char *)(v10 + 23) < 0)
            v13 = *(_QWORD *)v10;
          v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v13));
          v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKeyedSubscript:", v12));
          v16 = v15 == 0;

          if (!v16)
          {
            switch(*(_BYTE *)(v10 + 24))
            {
              case 0:
                v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKeyedSubscript:", v12));
                v18 = objc_msgSend(v17, "integerValue");

                v19 = v14;
                v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
                objc_msgSend(v20, "setInteger:forKey:", v18, v19);
                v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
                objc_msgSend(v21, "synchronize");

                v22 = qword_10085F520;
                if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
                {
                  if (*((char *)a3 + 23) >= 0)
                    v23 = a3;
                  else
                    v23 = (uint64_t *)*a3;
                  *(_DWORD *)buf = v49;
                  v54 = v23;
                  v55 = 2112;
                  v56 = v12;
                  v57 = 2112;
                  v58 = v19;
                  v59 = 1024;
                  LODWORD(v60) = (_DWORD)v18;
                  v24 = v22;
                  v25 = "#ota,%s integer override. Config file key: %@. Defaults key: %@. Value: %d";
                  goto LABEL_34;
                }
                break;
              case 1:
                v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKeyedSubscript:", v12));
                objc_msgSend(v26, "doubleValue");
                v28 = v27;

                v29 = v14;
                v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
                objc_msgSend(v30, "setDouble:forKey:", v29, v28);
                v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
                objc_msgSend(v31, "synchronize");

                v32 = qword_10085F520;
                if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
                {
                  if (*((char *)a3 + 23) >= 0)
                    v33 = a3;
                  else
                    v33 = (uint64_t *)*a3;
                  *(_DWORD *)buf = v49;
                  v54 = v33;
                  v55 = 2112;
                  v56 = v12;
                  v57 = 2112;
                  v58 = v29;
                  v59 = 2048;
                  v60 = v28;
                  v24 = v32;
                  v25 = "#ota,%s double override. Config file key: %@. Defaults key: %@. Value: %f";
                  v34 = 42;
                  goto LABEL_35;
                }
                break;
              case 2:
                v35 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKey:", v12));
                v36 = v14;
                v37 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
                objc_msgSend(v37, "setObject:forKey:", v35, v36);
                v38 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
                objc_msgSend(v38, "synchronize");

                v39 = qword_10085F520;
                if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
                {
                  if (*((char *)a3 + 23) >= 0)
                    v40 = a3;
                  else
                    v40 = (uint64_t *)*a3;
                  *(_DWORD *)buf = v49;
                  v54 = v40;
                  v55 = 2112;
                  v56 = v12;
                  v57 = 2112;
                  v58 = v36;
                  v59 = 2112;
                  v60 = *(double *)&v35;
                  _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "#ota,%s dict override. Config file key: %@. Defaults key: %@. Value: %@", buf, 0x2Au);
                }

                break;
              case 3:
                v41 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKeyedSubscript:", v12));
                v42 = objc_msgSend(v41, "BOOLValue");

                v43 = v14;
                v44 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
                objc_msgSend(v44, "setBool:forKey:", v42, v43);
                v45 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
                objc_msgSend(v45, "synchronize");

                v46 = qword_10085F520;
                if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
                {
                  if (*((char *)a3 + 23) >= 0)
                    v47 = a3;
                  else
                    v47 = (uint64_t *)*a3;
                  *(_DWORD *)buf = v49;
                  v54 = v47;
                  v55 = 2112;
                  v56 = v12;
                  v57 = 2112;
                  v58 = v43;
                  v59 = 1024;
                  LODWORD(v60) = (_DWORD)v42;
                  v24 = v46;
                  v25 = "#ota,%s BOOL override. Config file key: %@. Defaults key: %@. Value: %d";
LABEL_34:
                  v34 = 38;
LABEL_35:
                  _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, v25, buf, v34);
                }
                break;
              default:
                break;
            }
          }

          v48 = v10 + 32;
          v10 += 56;
        }
        while (v48 != v9);
      }
    }
    else if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_FAULT))
    {
      sub_1003E5744();
    }
  }

}

void sub_10029C070(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

char *sub_10029C180(char *__dst, __int128 *a2, __int128 *a3, char a4)
{
  __int128 v7;
  _BYTE *v8;
  __int128 v9;

  if (*((char *)a2 + 23) < 0)
  {
    sub_100004678(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v7 = *a2;
    *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v7;
  }
  v8 = __dst + 24;
  if (*((char *)a3 + 23) < 0)
  {
    sub_100004678(v8, *(void **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v9 = *a3;
    *((_QWORD *)__dst + 5) = *((_QWORD *)a3 + 2);
    *(_OWORD *)v8 = v9;
  }
  __dst[48] = a4;
  return __dst;
}

void sub_10029C208(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_10029C224(_QWORD *__dst, __int128 *a2, __int128 **a3)
{
  __int128 v5;

  if (*((char *)a2 + 23) < 0)
  {
    sub_100004678(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    __dst[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v5;
  }
  __dst[3] = 0;
  __dst[4] = 0;
  __dst[5] = 0;
  sub_10029C2C0(__dst + 3, *a3, a3[1], 0x6DB6DB6DB6DB6DB7 * (((char *)a3[1] - (char *)*a3) >> 3));
  return __dst;
}

void sub_10029C2A4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_10029C2C0(_QWORD *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    sub_100137708(result, a4);
    result = sub_10029C344((uint64_t)(v6 + 2), a2, a3, (_QWORD *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_10029C324(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  sub_10029C508(&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_10029C344(uint64_t a1, __int128 *a2, __int128 *a3, _QWORD *__dst)
{
  _QWORD *v4;
  __int128 *v6;
  int v7;
  _QWORD v9[3];
  char v10;
  void *v11;
  char *v12;

  v4 = __dst;
  v11 = __dst;
  v12 = (char *)__dst;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    v7 = a1;
    do
    {
      sub_10029C3EC(v7, v4, v6);
      v6 = (__int128 *)((char *)v6 + 56);
      v4 = v12 + 56;
      v12 += 56;
    }
    while (v6 != a3);
  }
  v10 = 1;
  sub_10029C484((uint64_t)v9);
  return v4;
}

void sub_10029C3D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10029C484((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_BYTE *sub_10029C3EC(int a1, _QWORD *__dst, __int128 *a3)
{
  __int128 v5;
  _BYTE *result;
  __int128 v7;

  if (*((char *)a3 + 23) < 0)
  {
    sub_100004678(__dst, *(void **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v5 = *a3;
    __dst[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)__dst = v5;
  }
  result = __dst + 3;
  if (*((char *)a3 + 47) < 0)
  {
    result = sub_100004678(result, *((void **)a3 + 3), *((_QWORD *)a3 + 4));
  }
  else
  {
    v7 = *(__int128 *)((char *)a3 + 24);
    __dst[5] = *((_QWORD *)a3 + 5);
    *(_OWORD *)result = v7;
  }
  *((_BYTE *)__dst + 48) = *((_BYTE *)a3 + 48);
  return result;
}

void sub_10029C468(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10029C484(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_10029C4B8((uint64_t *)a1);
  return a1;
}

void sub_10029C4B8(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (uint64_t *)a1[1];
  v1 = (uint64_t *)a1[2];
  v3 = *v1;
  v4 = *v2;
  if (*v1 != *v2)
  {
    v5 = *a1;
    do
    {
      v3 -= 56;
      sub_1001D9218(v5, v3);
    }
    while (v3 != v4);
  }
}

void sub_10029C508(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 56;
        sub_1001D9218((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

_QWORD *sub_10029C58C(uint64_t a1, __int128 *a2, __int128 *a3, _QWORD *__dst)
{
  _QWORD *v4;
  __int128 *v6;
  int v7;
  _QWORD v9[3];
  char v10;
  void *v11;
  char *v12;

  v4 = __dst;
  v11 = __dst;
  v12 = (char *)__dst;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    v7 = a1;
    do
    {
      sub_10029C634(v7, v4, v6);
      v6 = (__int128 *)((char *)v6 + 56);
      v4 = v12 + 56;
      v12 += 56;
    }
    while (v6 != a3);
  }
  v10 = 1;
  sub_10029C484((uint64_t)v9);
  return v4;
}

void sub_10029C620(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10029C484((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_BYTE *sub_10029C634(int a1, _QWORD *__dst, __int128 *a3)
{
  __int128 v5;
  _BYTE *result;
  __int128 v7;

  if (*((char *)a3 + 23) < 0)
  {
    sub_100004678(__dst, *(void **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v5 = *a3;
    __dst[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)__dst = v5;
  }
  result = __dst + 3;
  if (*((char *)a3 + 47) < 0)
  {
    result = sub_100004678(result, *((void **)a3 + 3), *((_QWORD *)a3 + 4));
  }
  else
  {
    v7 = *(__int128 *)((char *)a3 + 24);
    __dst[5] = *((_QWORD *)a3 + 5);
    *(_OWORD *)result = v7;
  }
  *((_BYTE *)__dst + 48) = *((_BYTE *)a3 + 48);
  return result;
}

void sub_10029C6B0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10029C6CC(uint64_t a1, const void **a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a3)
  {
    v6 = 48 * a3;
    do
    {
      sub_10029C74C((uint64_t **)a1, v4, a2, (__int128 *)a2);
      a2 += 6;
      v6 -= 48;
    }
    while (v6);
  }
  return a1;
}

void sub_10029C734(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10029C968(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_10029C74C(uint64_t **a1, uint64_t *a2, const void **a3, __int128 *a4)
{
  const void **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;
  const void **v12;

  v6 = sub_100232F70(a1, a2, &v12, &v11, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    sub_10029C7E0((uint64_t)a1, a4, (uint64_t)v10);
    sub_1000272A8(a1, (uint64_t)v12, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    sub_10029C8E0((uint64_t)v10, 0);
  }
  return v7;
}

_QWORD *sub_10029C7E0@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  _QWORD *result;

  v5 = a1 + 8;
  v6 = operator new(0x50uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = sub_10029C848(v6 + 4, a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_10029C830(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10029C8E0(v1, 0);
  _Unwind_Resume(a1);
}

_QWORD *sub_10029C848(_QWORD *__dst, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    sub_100004678(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    __dst[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  __dst[3] = 0;
  __dst[4] = 0;
  __dst[5] = 0;
  sub_10029C2C0(__dst + 3, *((__int128 **)a2 + 3), *((__int128 **)a2 + 4), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((_QWORD *)a2 + 4) - *((_QWORD *)a2 + 3)) >> 3));
  return __dst;
}

void sub_10029C8C4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void sub_10029C8E0(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_10029C924((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

void sub_10029C924(uint64_t a1)
{
  void **v2;

  v2 = (void **)(a1 + 24);
  sub_10029C508(&v2);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void sub_10029C968(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_10029C968(a1, *a2);
    sub_10029C968(a1, a2[1]);
    sub_10029C924((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

uint64_t sub_10029C9B0()
{
  uint64_t v0;
  void **v1;
  void *__p[2];
  char v4;
  void *v5[2];
  char v6;
  void *v7[2];
  char v8;
  void *v9[2];
  char v10;
  void *v11[2];
  char v12;
  void *v13[2];
  char v14;
  void *v15[2];
  char v16;
  void *v17[2];
  char v18;
  void *v19[2];
  char v20;
  void *v21[2];
  char v22;
  void *v23[2];
  char v24;
  void *v25[2];
  char v26;
  void *v27[2];
  char v28;
  void *v29[2];
  char v30;
  void *v31[2];
  char v32;
  void *v33[2];
  char v34;
  void *v35[2];
  char v36;
  void *v37[2];
  char v38;
  void *v39[2];
  char v40;
  void *v41[2];
  char v42;
  void *v43[2];
  char v44;
  void *v45[2];
  char v46;
  void *v47[2];
  char v48;
  void *v49[2];
  char v50;
  void *v51[2];
  char v52;
  void *v53[2];
  char v54;
  void *v55[2];
  char v56;
  void *v57[2];
  char v58;
  void *v59[2];
  char v60;
  void *v61[2];
  char v62;
  void *v63[2];
  char v64;
  void *v65[2];
  char v66;
  void *v67[2];
  char v68;
  void *v69[2];
  char v70;
  void *v71[2];
  char v72;
  void *v73[2];
  char v74;
  void *v75[2];
  char v76;
  void *v77[2];
  char v78;
  void *v79[2];
  char v80;
  void *v81[2];
  char v82;
  void *v83[2];
  char v84;
  void *v85[2];
  char v86;
  void *v87[2];
  char v88;
  void *v89[2];
  char v90;
  void *v91[2];
  char v92;
  void *v93[2];
  char v94;
  void *v95[2];
  char v96;
  void *v97[2];
  char v98;
  void *v99[2];
  char v100;
  void *v101[2];
  char v102;
  void *v103[2];
  char v104;
  void *v105[2];
  char v106;
  void *v107[2];
  char v108;
  void *v109[2];
  char v110;
  void *v111[2];
  char v112;
  void *v113[2];
  char v114;
  void *v115[2];
  char v116;
  void *v117[2];
  char v118;
  void *v119[2];
  char v120;
  void *v121[2];
  char v122;
  void *v123[2];
  char v124;
  void *v125[2];
  char v126;
  void *v127[2];
  char v128;
  void *v129[2];
  char v130;
  void *v131[2];
  char v132;
  void *v133[2];
  char v134;
  void *v135[2];
  char v136;
  void *v137[2];
  char v138;
  void *v139[2];
  char v140;
  void *v141[2];
  char v142;
  void *v143[2];
  char v144;
  void *v145[2];
  char v146;
  void *v147[2];
  char v148;
  void *v149[2];
  char v150;
  void *v151[2];
  char v152;
  void *v153[2];
  char v154;
  void *v155[2];
  char v156;
  void *v157[2];
  char v158;
  void *v159[2];
  char v160;
  void *v161[2];
  char v162;
  void *v163[2];
  char v164;
  void *v165[2];
  char v166;
  void *v167[2];
  char v168;
  void *v169[2];
  char v170;
  void *v171[2];
  char v172;
  void *v173[2];
  char v174;
  void *v175[2];
  char v176;
  void *v177[2];
  char v178;
  void *v179[2];
  char v180;
  void *v181[2];
  char v182;
  void *v183[2];
  char v184;
  void *v185[2];
  char v186;
  void *v187[2];
  char v188;
  void *v189[2];
  char v190;
  void *v191[2];
  char v192;
  void *v193[2];
  char v194;
  void *v195[2];
  char v196;
  void *v197[2];
  char v198;
  void *v199[2];
  char v200;
  void *v201[2];
  char v202;
  void *v203[2];
  char v204;
  void *v205[2];
  char v206;
  void *v207[2];
  char v208;
  void *v209[2];
  char v210;
  void *v211[2];
  char v212;
  void *v213[2];
  char v214;
  void *v215[2];
  char v216;
  void *v217[2];
  char v218;
  void *v219[2];
  char v220;
  void *v221[2];
  char v222;
  void *v223[2];
  char v224;
  void *v225[2];
  char v226;
  void *v227[2];
  char v228;
  void *v229[2];
  char v230;
  void *v231[2];
  char v232;
  void *v233[2];
  char v234;
  void *v235[2];
  char v236;
  void *v237[2];
  char v238;
  void *v239[2];
  char v240;
  void *v241[2];
  char v242;
  void *v243[2];
  char v244;
  void *v245[2];
  char v246;
  void *v247[2];
  char v248;
  void *v249[2];
  char v250;
  void *v251[2];
  char v252;
  void *v253[2];
  char v254;
  void *v255[2];
  char v256;
  void *v257[2];
  char v258;
  void *v259[2];
  char v260;
  void *v261[2];
  char v262;
  void *v263[2];
  char v264;
  void *v265[2];
  char v266;
  void *v267[2];
  char v268;
  void *v269[2];
  char v270;
  uint64_t *v271;
  char v272;
  __int128 __dst[3];
  char v274[56];
  char v275[56];
  char v276[56];
  char v277[56];
  char v278[56];
  char v279[56];
  char v280[56];
  char v281[56];
  char v282[56];
  char v283[56];
  char v284[56];
  char v285[56];
  char v286[56];
  char v287[56];
  char v288[56];
  char v289[56];
  char v290[56];
  char v291[56];
  char v292[56];
  char v293[56];
  char v294[56];
  char v295[56];
  char v296[56];
  char v297[56];
  char v298[56];
  char v299[56];
  char v300[56];
  char v301[56];
  char v302[56];
  char v303[56];
  char v304[56];
  char v305[56];
  char v306[56];
  char v307[56];
  char v308[56];
  char v309[56];
  char v310[56];
  char v311[56];
  char v312[56];
  char v313[56];
  char v314[56];
  char v315[56];
  char v316[56];
  char v317[56];
  char v318[56];
  char v319[56];
  char v320[56];
  char v321[56];
  char v322[56];
  char v323[56];
  char v324[56];
  char v325[56];
  char v326[56];
  char v327[56];
  char v328[56];
  char v329[56];
  char v330[56];
  char v331[56];
  char v332[56];
  char v333[56];
  char v334[56];
  char v335[56];
  char v336[56];
  char v337[56];
  char v338[56];
  char v339[56];
  __int128 v340;

  sub_10000BF04(v269, "PPFSC");
  sub_10000BF04(v267, "PeopleFinderAlgorithmsParticleFilterSeedWithCL");
  sub_10029C180((char *)__dst, (__int128 *)v269, (__int128 *)v267, 3);
  sub_10000BF04(v265, "PPFDSA");
  sub_10000BF04(v263, "PeopleFinderAlgorithmsParticleFilterDisableSeedWithSA");
  sub_10029C180(v274, (__int128 *)v265, (__int128 *)v263, 3);
  sub_10000BF04(v261, "PPFNP");
  sub_10000BF04(v259, "PeopleFinderAlgorithmsParticleFilterNumParticles");
  sub_10029C180(v275, (__int128 *)v261, (__int128 *)v259, 0);
  sub_10000BF04(v257, "PPFFR");
  sub_10000BF04(v255, "PeopleFinderAlgorithmsParticleFilterPDRFrameRotationNoiseRads");
  sub_10029C180(v276, (__int128 *)v257, (__int128 *)v255, 1);
  sub_10000BF04(v253, "PPFSM");
  sub_10000BF04(v251, "PeopleFinderAlgorithmsParticleFilterPDRScaleNoiseMuLognormal");
  sub_10029C180(v277, (__int128 *)v253, (__int128 *)v251, 1);
  sub_10000BF04(v249, "PPFSS");
  sub_10000BF04(v247, "PeopleFinderAlgorithmsParticleFilterPDRScaleNoiseSigmaLognormal");
  sub_10029C180(v278, (__int128 *)v249, (__int128 *)v247, 1);
  sub_10000BF04(v245, "PPFMV");
  sub_10000BF04(v243, "PeopleFinderAlgorithmsParticleFilterMultipathProcessVarianceScaling");
  sub_10029C180(v279, (__int128 *)v245, (__int128 *)v243, 1);
  sub_10000BF04(v241, "PPFMS");
  sub_10000BF04(v239, "PeopleFinderAlgorithmsParticleFilterMultipathMeasurementStd");
  sub_10029C180(v280, (__int128 *)v241, (__int128 *)v239, 1);
  sub_10000BF04(v237, "PPFST");
  sub_10000BF04(v235, "PeopleFinderAlgorithmsParticleFilterTrailingMeasurementStdThreshold");
  sub_10029C180(v281, (__int128 *)v237, (__int128 *)v235, 1);
  sub_10000BF04(v233, "PPFNT");
  sub_10000BF04(v231, "PeopleFinderAlgorithmsParticleFilterNLOSTimeoutSec");
  sub_10029C180(v282, (__int128 *)v233, (__int128 *)v231, 1);
  sub_10000BF04(v229, "PPFMT");
  sub_10000BF04(v227, "PeopleFinderAlgorithmsParticleFilterNoMeasurementTimeoutSec");
  sub_10029C180(v283, (__int128 *)v229, (__int128 *)v227, 1);
  sub_10000BF04(v225, "PPFCNT");
  sub_10000BF04(v223, "PeopleFinderAlgorithmsParticleFilterConservativeNLOSTimeoutSec");
  sub_10029C180(v284, (__int128 *)v225, (__int128 *)v223, 1);
  sub_10000BF04(v221, "PDFIO");
  sub_10000BF04(v219, "PeopleFinderAlgorithmsDisableFinderIO");
  sub_10029C180(v285, (__int128 *)v221, (__int128 *)v219, 3);
  sub_10000BF04(v217, "PDSA");
  sub_10000BF04(v215, "PeopleFinderAlgorithmsDisableSA");
  sub_10029C180(v286, (__int128 *)v217, (__int128 *)v215, 3);
  sub_10000BF04(v213, "PDSV");
  sub_10000BF04(v211, "PeopleFinderAlgorithmsDisableSAWithFindeeVIO");
  sub_10029C180(v287, (__int128 *)v213, (__int128 *)v211, 3);
  sub_10000BF04(v209, "PDCL");
  sub_10000BF04(v207, "PeopleFinderAlgorithmsDisableCL");
  sub_10029C180(v288, (__int128 *)v209, (__int128 *)v207, 3);
  sub_10000BF04(v205, "PESS");
  sub_10000BF04(v203, "PeopleFinderAlgorithmsEnableStraightPathFilter");
  sub_10029C180(v289, (__int128 *)v205, (__int128 *)v203, 3);
  sub_10000BF04(v201, "PDPF");
  sub_10000BF04(v199, "PeopleFinderAlgorithmsDisablePF");
  sub_10029C180(v290, (__int128 *)v201, (__int128 *)v199, 3);
  sub_10000BF04(v197, "PDSBSR");
  sub_10000BF04(v195, "PeopleFinderAlgorithmsDisableStrictSABoxSpanRequirement");
  sub_10029C180(v291, (__int128 *)v197, (__int128 *)v195, 3);
  sub_10000BF04(v193, "PRRR");
  sub_10000BF04(v191, "PeopleFinderAlgorithmsYieldMinUWBRangeRate");
  sub_10029C180(v292, (__int128 *)v193, (__int128 *)v191, 1);
  sub_10000BF04(v189, "PRRW");
  sub_10000BF04(v187, "PeopleFinderAlgorithmsYieldRangeRateWindow");
  sub_10029C180(v293, (__int128 *)v189, (__int128 *)v187, 1);
  sub_10000BF04(v185, "PGFRRR");
  sub_10000BF04(v183, "PeopleFinderAlgorithmsYieldGroupFindingMinUWBRangeRate");
  sub_10029C180(v294, (__int128 *)v185, (__int128 *)v183, 1);
  sub_10000BF04(v181, "PGFRRW");
  sub_10000BF04(v179, "PeopleFinderAlgorithmsYieldGroupFindingRangeRateWindow");
  sub_10029C180(v295, (__int128 *)v181, (__int128 *)v179, 1);
  sub_10000BF04(v177, "PMR");
  sub_10000BF04(v175, "PeopleFinderAlgorithmsYieldMaxRange");
  sub_10029C180(v296, (__int128 *)v177, (__int128 *)v175, 1);
  sub_10000BF04(v173, "PMRIFGC");
  sub_10000BF04(v171, "PeopleFinderAlgorithmsYieldMaxRangeInFavorableGnssConditions");
  sub_10029C180(v297, (__int128 *)v173, (__int128 *)v171, 1);
  sub_10000BF04(v169, "PLFT");
  sub_10000BF04(v167, "PeopleFinderLowPassFilterTimeConstant");
  sub_10029C180(v298, (__int128 *)v169, (__int128 *)v167, 1);
  sub_10000BF04(v165, "PDRYC");
  sub_10000BF04(v163, "PeopleFinderAlgorithmsDisableRelaxedYieldCriteria");
  sub_10029C180(v299, (__int128 *)v165, (__int128 *)v163, 3);
  sub_10000BF04(v161, "PMSTARFGC");
  sub_10000BF04(v159, "PeopleFinderMinSvTrackedToAvailableRatioForFavorableGnssConditions");
  sub_10029C180(v300, (__int128 *)v161, (__int128 *)v159, 1);
  sub_10000BF04(v157, "PMGSED");
  sub_10000BF04(v155, "PeopleFinderMinGnssSatelliteElevationDeg");
  sub_10029C180(v301, (__int128 *)v157, (__int128 *)v155, 1);
  sub_10000BF04(v153, "PFBT");
  sub_10000BF04(v151, "PeopleFindingFindButtonTimeoutSecondsOverride");
  sub_10029C180(v302, (__int128 *)v153, (__int128 *)v151, 1);
  sub_10000BF04(v149, "FMSTARFGC");
  sub_10000BF04(v147, "FindeeMinSvTrackedToAvailableRatioForFavorableGnssConditions");
  sub_10029C180(v303, (__int128 *)v149, (__int128 *)v147, 1);
  sub_10000BF04(v145, "FMGSED");
  sub_10000BF04(v143, "FindeeMinGnssSatelliteElevationDeg");
  sub_10029C180(v304, (__int128 *)v145, (__int128 *)v143, 1);
  sub_10000BF04(v141, "DCMD");
  sub_10000BF04(v139, "DeviceFinderAlgorithmsUseCMADistance");
  sub_10029C180(v305, (__int128 *)v141, (__int128 *)v139, 3);
  sub_10000BF04(v137, "DRR");
  sub_10000BF04(v135, "DeviceFinderAlgorithmsYieldMinUWBRangeRate");
  sub_10029C180(v306, (__int128 *)v137, (__int128 *)v135, 1);
  sub_10000BF04(v133, "DRRW");
  sub_10000BF04(v131, "DeviceFinderAlgorithmsYieldRangeRateWindow");
  sub_10029C180(v307, (__int128 *)v133, (__int128 *)v131, 1);
  sub_10000BF04(v129, "DMR");
  sub_10000BF04(v127, "DeviceFinderAlgorithmsYieldMaxRange");
  sub_10029C180(v308, (__int128 *)v129, (__int128 *)v127, 1);
  sub_10000BF04(v125, "DAST");
  sub_10000BF04(v123, "DeviceFinderAlgorithmsArcShowThreshold");
  sub_10029C180(v309, (__int128 *)v125, (__int128 *)v123, 1);
  sub_10000BF04(v121, "DART");
  sub_10000BF04(v119, "DeviceFinderAlgorithmsArcRevokeThreshold");
  sub_10029C180(v310, (__int128 *)v121, (__int128 *)v119, 1);
  sub_10000BF04(v117, "DTRR");
  sub_10000BF04(v115, "DeviceFinderAlgorithmsTimeWithoutRangeRevoke");
  sub_10029C180(v311, (__int128 *)v117, (__int128 *)v115, 1);
  sub_10000BF04(v113, "DTRI");
  sub_10000BF04(v111, "DeviceFinderAlgorithmsTimeWithoutRangeReinitialize");
  sub_10029C180(v312, (__int128 *)v113, (__int128 *)v111, 1);
  sub_10000BF04(v109, "CTFSI");
  sub_10000BF04(v107, "FindingSchedulingInterval");
  sub_10029C180(v313, (__int128 *)v109, (__int128 *)v107, 0);
  sub_10000BF04(v105, "CTFDC");
  sub_10000BF04(v103, "FindingDutyCycle");
  sub_10029C180(v314, (__int128 *)v105, (__int128 *)v103, 1);
  sub_10000BF04(v101, "CTFSSD");
  sub_10000BF04(v99, "FindingSecondarySchedulingDelay");
  sub_10029C180(v315, (__int128 *)v101, (__int128 *)v99, 0);
  sub_10000BF04(v97, "CTFSSI");
  sub_10000BF04(v95, "FindingSecondarySchedulingInterval");
  sub_10029C180(v316, (__int128 *)v97, (__int128 *)v95, 0);
  sub_10000BF04(v93, "CTFSDC");
  sub_10000BF04(v91, "FindingSecondaryDutyCycle");
  sub_10029C180(v317, (__int128 *)v93, (__int128 *)v91, 1);
  sub_10000BF04(v89, "CTPFOOB");
  sub_10000BF04(v87, "PeopleFindingOOBRefreshPeriodSecondsOverride");
  sub_10029C180(v318, (__int128 *)v89, (__int128 *)v87, 1);
  sub_10000BF04(v85, "CTPFKABT");
  sub_10000BF04(v83, "PeopleFindingFindableDeviceKeepAliveBluetoothTimeoutSecondsOverride");
  sub_10029C180(v319, (__int128 *)v85, (__int128 *)v83, 1);
  sub_10000BF04(v81, "CTPFKAOOB");
  sub_10000BF04(v79, "PeopleFindingFindableDeviceKeepAliveOOBTimeoutSecondsOverride");
  sub_10029C180(v320, (__int128 *)v81, (__int128 *)v79, 1);
  sub_10000BF04(v77, "CTPFDT");
  sub_10000BF04(v75, "PeopleFindingUWBDiscoveryTimeoutSecondsOverride");
  sub_10029C180(v321, (__int128 *)v77, (__int128 *)v75, 0);
  sub_10000BF04(v73, "CTPFRT");
  sub_10000BF04(v71, "PeopleFindingUWBReacquisitionTimeoutSecondsOverride");
  sub_10029C180(v322, (__int128 *)v73, (__int128 *)v71, 0);
  sub_10000BF04(v69, "CTDFOOB");
  sub_10000BF04(v67, "DeviceFindingOOBRefreshPeriodSecondsOverride");
  sub_10029C180(v323, (__int128 *)v69, (__int128 *)v67, 1);
  sub_10000BF04(v65, "CTDFKABT");
  sub_10000BF04(v63, "DeviceFindingFindableDeviceKeepAliveBluetoothTimeoutSecondsOverride");
  sub_10029C180(v324, (__int128 *)v65, (__int128 *)v63, 1);
  sub_10000BF04(v61, "CTDFKAOOB");
  sub_10000BF04(v59, "DeviceFindingFindableDeviceKeepAliveOOBTimeoutSecondsOverride");
  sub_10029C180(v325, (__int128 *)v61, (__int128 *)v59, 1);
  sub_10000BF04(v57, "CTDFDT");
  sub_10000BF04(v55, "DeviceFindingUWBDiscoveryTimeoutSecondsOverride");
  sub_10029C180(v326, (__int128 *)v57, (__int128 *)v55, 0);
  sub_10000BF04(v53, "CTDFRT");
  sub_10000BF04(v51, "DeviceFindingUWBReacquisitionTimeoutSecondsOverride");
  sub_10029C180(v327, (__int128 *)v53, (__int128 *)v51, 0);
  sub_10000BF04(v49, "CTFTT");
  sub_10000BF04(v47, "FindingUWBTotalTimeoutSecondsOverride");
  sub_10029C180(v328, (__int128 *)v49, (__int128 *)v47, 0);
  sub_10000BF04(v45, "CTFWDT");
  sub_10000BF04(v43, "FindingUWBEventWatchdogTimeoutMillisecondsOverride");
  sub_10029C180(v329, (__int128 *)v45, (__int128 *)v43, 0);
  sub_10000BF04(v41, "CTRTTL");
  sub_10000BF04(v39, "FindingServiceRangingTriggerTimeLimitOverrideSeconds");
  sub_10029C180(v330, (__int128 *)v41, (__int128 *)v39, 1);
  sub_10000BF04(v37, "CTRFBT");
  sub_10000BF04(v35, "RunawayFindingBackstopTimeoutOverrideSeconds");
  sub_10029C180(v331, (__int128 *)v37, (__int128 *)v35, 1);
  sub_10000BF04(v33, "CTNIDT");
  sub_10000BF04(v31, "PeerDiscoveryTimeoutSecondsOverride");
  sub_10029C180(v332, (__int128 *)v33, (__int128 *)v31, 0);
  sub_10000BF04(v29, "CTNIRT");
  sub_10000BF04(v27, "PeerReacquisitionTimeoutSecondsOverride");
  sub_10029C180(v333, (__int128 *)v29, (__int128 *)v27, 0);
  sub_10000BF04(v25, "CTNIWDT");
  sub_10000BF04(v23, "PeerEventWatchdogTimeoutMillisecondsOverride");
  sub_10029C180(v334, (__int128 *)v25, (__int128 *)v23, 0);
  sub_10000BF04(v21, "CTFSDIS");
  sub_10000BF04(v19, "FindingDisableService");
  sub_10029C180(v335, (__int128 *)v21, (__int128 *)v19, 3);
  sub_10000BF04(v17, "CTFPWEN");
  sub_10000BF04(v15, "FindableDeviceEnableWatch");
  sub_10029C180(v336, (__int128 *)v17, (__int128 *)v15, 3);
  sub_10000BF04(v13, "CTBSDM");
  sub_10000BF04(v11, "r121951698_DisableMitigation");
  sub_10029C180(v337, (__int128 *)v13, (__int128 *)v11, 3);
  sub_10000BF04(v9, "CTDSRC");
  sub_10000BF04(v7, "DisableDualRxChain");
  sub_10029C180(v338, (__int128 *)v9, (__int128 *)v7, 3);
  sub_10000BF04(v5, "DUORWS7");
  sub_10000BF04(__p, "DisableUseOfRangesWithStatus7");
  sub_10029C180(v339, (__int128 *)v5, (__int128 *)__p, 3);
  qword_10085B5A0 = 0;
  qword_10085B5A8 = 0;
  qword_10085B5B0 = 0;
  v271 = &qword_10085B5A0;
  v272 = 0;
  qword_10085B5A0 = (uint64_t)operator new(0xEA8uLL);
  qword_10085B5A8 = qword_10085B5A0;
  qword_10085B5B0 = qword_10085B5A0 + 3752;
  qword_10085B5A8 = (uint64_t)sub_10029C58C((uint64_t)&qword_10085B5B0, __dst, &v340, (_QWORD *)qword_10085B5A0);
  v0 = 469;
  do
  {
    v1 = (void **)((char *)__dst + v0 * 8);
    if (SHIBYTE((&v271)[v0]) < 0)
      operator delete(*(v1 - 4));
    if (*((char *)v1 - 33) < 0)
      operator delete(*(v1 - 7));
    v0 -= 7;
  }
  while (v0 * 8);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v6 < 0)
    operator delete(v5[0]);
  if (v8 < 0)
    operator delete(v7[0]);
  if (v10 < 0)
    operator delete(v9[0]);
  if (v12 < 0)
    operator delete(v11[0]);
  if (v14 < 0)
    operator delete(v13[0]);
  if (v16 < 0)
    operator delete(v15[0]);
  if (v18 < 0)
    operator delete(v17[0]);
  if (v20 < 0)
    operator delete(v19[0]);
  if (v22 < 0)
    operator delete(v21[0]);
  if (v24 < 0)
    operator delete(v23[0]);
  if (v26 < 0)
    operator delete(v25[0]);
  if (v28 < 0)
    operator delete(v27[0]);
  if (v30 < 0)
    operator delete(v29[0]);
  if (v32 < 0)
    operator delete(v31[0]);
  if (v34 < 0)
    operator delete(v33[0]);
  if (v36 < 0)
    operator delete(v35[0]);
  if (v38 < 0)
    operator delete(v37[0]);
  if (v40 < 0)
    operator delete(v39[0]);
  if (v42 < 0)
    operator delete(v41[0]);
  if (v44 < 0)
    operator delete(v43[0]);
  if (v46 < 0)
    operator delete(v45[0]);
  if (v48 < 0)
    operator delete(v47[0]);
  if (v50 < 0)
    operator delete(v49[0]);
  if (v52 < 0)
    operator delete(v51[0]);
  if (v54 < 0)
    operator delete(v53[0]);
  if (v56 < 0)
    operator delete(v55[0]);
  if (v58 < 0)
    operator delete(v57[0]);
  if (v60 < 0)
    operator delete(v59[0]);
  if (v62 < 0)
    operator delete(v61[0]);
  if (v64 < 0)
    operator delete(v63[0]);
  if (v66 < 0)
    operator delete(v65[0]);
  if (v68 < 0)
    operator delete(v67[0]);
  if (v70 < 0)
    operator delete(v69[0]);
  if (v72 < 0)
    operator delete(v71[0]);
  if (v74 < 0)
    operator delete(v73[0]);
  if (v76 < 0)
    operator delete(v75[0]);
  if (v78 < 0)
    operator delete(v77[0]);
  if (v80 < 0)
    operator delete(v79[0]);
  if (v82 < 0)
    operator delete(v81[0]);
  if (v84 < 0)
    operator delete(v83[0]);
  if (v86 < 0)
    operator delete(v85[0]);
  if (v88 < 0)
    operator delete(v87[0]);
  if (v90 < 0)
    operator delete(v89[0]);
  if (v92 < 0)
    operator delete(v91[0]);
  if (v94 < 0)
    operator delete(v93[0]);
  if (v96 < 0)
    operator delete(v95[0]);
  if (v98 < 0)
    operator delete(v97[0]);
  if (v100 < 0)
    operator delete(v99[0]);
  if (v102 < 0)
    operator delete(v101[0]);
  if (v104 < 0)
    operator delete(v103[0]);
  if (v106 < 0)
    operator delete(v105[0]);
  if (v108 < 0)
    operator delete(v107[0]);
  if (v110 < 0)
    operator delete(v109[0]);
  if (v112 < 0)
    operator delete(v111[0]);
  if (v114 < 0)
    operator delete(v113[0]);
  if (v116 < 0)
    operator delete(v115[0]);
  if (v118 < 0)
    operator delete(v117[0]);
  if (v120 < 0)
    operator delete(v119[0]);
  if (v122 < 0)
    operator delete(v121[0]);
  if (v124 < 0)
    operator delete(v123[0]);
  if (v126 < 0)
    operator delete(v125[0]);
  if (v128 < 0)
    operator delete(v127[0]);
  if (v130 < 0)
    operator delete(v129[0]);
  if (v132 < 0)
    operator delete(v131[0]);
  if (v134 < 0)
    operator delete(v133[0]);
  if (v136 < 0)
    operator delete(v135[0]);
  if (v138 < 0)
    operator delete(v137[0]);
  if (v140 < 0)
    operator delete(v139[0]);
  if (v142 < 0)
    operator delete(v141[0]);
  if (v144 < 0)
    operator delete(v143[0]);
  if (v146 < 0)
    operator delete(v145[0]);
  if (v148 < 0)
    operator delete(v147[0]);
  if (v150 < 0)
    operator delete(v149[0]);
  if (v152 < 0)
    operator delete(v151[0]);
  if (v154 < 0)
    operator delete(v153[0]);
  if (v156 < 0)
    operator delete(v155[0]);
  if (v158 < 0)
    operator delete(v157[0]);
  if (v160 < 0)
    operator delete(v159[0]);
  if (v162 < 0)
    operator delete(v161[0]);
  if (v164 < 0)
    operator delete(v163[0]);
  if (v166 < 0)
    operator delete(v165[0]);
  if (v168 < 0)
    operator delete(v167[0]);
  if (v170 < 0)
    operator delete(v169[0]);
  if (v172 < 0)
    operator delete(v171[0]);
  if (v174 < 0)
    operator delete(v173[0]);
  if (v176 < 0)
    operator delete(v175[0]);
  if (v178 < 0)
    operator delete(v177[0]);
  if (v180 < 0)
    operator delete(v179[0]);
  if (v182 < 0)
    operator delete(v181[0]);
  if (v184 < 0)
    operator delete(v183[0]);
  if (v186 < 0)
    operator delete(v185[0]);
  if (v188 < 0)
    operator delete(v187[0]);
  if (v190 < 0)
    operator delete(v189[0]);
  if (v192 < 0)
    operator delete(v191[0]);
  if (v194 < 0)
    operator delete(v193[0]);
  if (v196 < 0)
    operator delete(v195[0]);
  if (v198 < 0)
    operator delete(v197[0]);
  if (v200 < 0)
    operator delete(v199[0]);
  if (v202 < 0)
    operator delete(v201[0]);
  if (v204 < 0)
    operator delete(v203[0]);
  if (v206 < 0)
    operator delete(v205[0]);
  if (v208 < 0)
    operator delete(v207[0]);
  if (v210 < 0)
    operator delete(v209[0]);
  if (v212 < 0)
    operator delete(v211[0]);
  if (v214 < 0)
    operator delete(v213[0]);
  if (v216 < 0)
    operator delete(v215[0]);
  if (v218 < 0)
    operator delete(v217[0]);
  if (v220 < 0)
    operator delete(v219[0]);
  if (v222 < 0)
    operator delete(v221[0]);
  if (v224 < 0)
    operator delete(v223[0]);
  if (v226 < 0)
    operator delete(v225[0]);
  if (v228 < 0)
    operator delete(v227[0]);
  if (v230 < 0)
    operator delete(v229[0]);
  if (v232 < 0)
    operator delete(v231[0]);
  if (v234 < 0)
    operator delete(v233[0]);
  if (v236 < 0)
    operator delete(v235[0]);
  if (v238 < 0)
    operator delete(v237[0]);
  if (v240 < 0)
    operator delete(v239[0]);
  if (v242 < 0)
    operator delete(v241[0]);
  if (v244 < 0)
    operator delete(v243[0]);
  if (v246 < 0)
    operator delete(v245[0]);
  if (v248 < 0)
    operator delete(v247[0]);
  if (v250 < 0)
    operator delete(v249[0]);
  if (v252 < 0)
    operator delete(v251[0]);
  if (v254 < 0)
    operator delete(v253[0]);
  if (v256 < 0)
    operator delete(v255[0]);
  if (v258 < 0)
    operator delete(v257[0]);
  if (v260 < 0)
    operator delete(v259[0]);
  if (v262 < 0)
    operator delete(v261[0]);
  if (v264 < 0)
    operator delete(v263[0]);
  if (v266 < 0)
    operator delete(v265[0]);
  if (v268 < 0)
    operator delete(v267[0]);
  if (v270 < 0)
    operator delete(v269[0]);
  return __cxa_atexit((void (*)(void *))sub_10029B008, &qword_10085B5A0, (void *)&_mh_execute_header);
}

void sub_10029E2CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56,void *a57,uint64_t a58,int a59,__int16 a60,char a61,char a62,void *a63)
{
  char a68;
  void *a69;
  char a72;
  void *a73;
  char a74;
  void *a75;
  char a76;
  void *a77;
  char a78;
  void *a79;
  char a80;
  void *a81;
  char a82;
  void *a83;
  char a84;
  void *a85;
  char a86;
  void *a87;
  char a88;
  void *a89;
  char a90;
  void *a91;
  char a92;
  void *a93;
  uint64_t v93;
  uint64_t i;

  qword_10085B5A8 = v93;
  sub_10029C508((void ***)&STACK[0xC90]);
  for (i = 3696; i != -56; i -= 56)
    sub_1001D5744((uint64_t)&STACK[0xCA0] + i);
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a26 < 0)
    operator delete(a21);
  if (a32 < 0)
    operator delete(a27);
  if (a38 < 0)
    operator delete(a33);
  if (a44 < 0)
    operator delete(a39);
  if (a50 < 0)
    operator delete(a45);
  if (a56 < 0)
    operator delete(a51);
  if (a62 < 0)
    operator delete(a57);
  if (a68 < 0)
    operator delete(a63);
  if (a72 < 0)
    operator delete(a69);
  if (a74 < 0)
    operator delete(a73);
  if (a76 < 0)
    operator delete(a75);
  if (a78 < 0)
    operator delete(a77);
  if (a80 < 0)
    operator delete(a79);
  if (a82 < 0)
    operator delete(a81);
  if (a84 < 0)
    operator delete(a83);
  if (a86 < 0)
    operator delete(a85);
  if (a88 < 0)
    operator delete(a87);
  if (a90 < 0)
    operator delete(a89);
  if (a92 < 0)
    operator delete(a91);
  if (SLOBYTE(STACK[0x20F]) < 0)
    operator delete(a93);
  if (SLOBYTE(STACK[0x227]) < 0)
    operator delete((void *)STACK[0x210]);
  if (SLOBYTE(STACK[0x23F]) < 0)
    operator delete((void *)STACK[0x228]);
  if (SLOBYTE(STACK[0x257]) < 0)
    operator delete((void *)STACK[0x240]);
  if (SLOBYTE(STACK[0x26F]) < 0)
    operator delete((void *)STACK[0x258]);
  if (SLOBYTE(STACK[0x287]) < 0)
    operator delete((void *)STACK[0x270]);
  if (SLOBYTE(STACK[0x29F]) < 0)
    operator delete((void *)STACK[0x288]);
  if (SLOBYTE(STACK[0x2B7]) < 0)
    operator delete((void *)STACK[0x2A0]);
  if (SLOBYTE(STACK[0x2CF]) < 0)
    operator delete((void *)STACK[0x2B8]);
  if (SLOBYTE(STACK[0x2E7]) < 0)
    operator delete((void *)STACK[0x2D0]);
  if (SLOBYTE(STACK[0x2FF]) < 0)
    operator delete((void *)STACK[0x2E8]);
  if (SLOBYTE(STACK[0x317]) < 0)
    operator delete((void *)STACK[0x300]);
  if (SLOBYTE(STACK[0x32F]) < 0)
    operator delete((void *)STACK[0x318]);
  if (SLOBYTE(STACK[0x347]) < 0)
    operator delete((void *)STACK[0x330]);
  if (SLOBYTE(STACK[0x35F]) < 0)
    operator delete((void *)STACK[0x348]);
  if (SLOBYTE(STACK[0x377]) < 0)
    operator delete((void *)STACK[0x360]);
  if (SLOBYTE(STACK[0x38F]) < 0)
    operator delete((void *)STACK[0x378]);
  if (SLOBYTE(STACK[0x3A7]) < 0)
    operator delete((void *)STACK[0x390]);
  if (SLOBYTE(STACK[0x3BF]) < 0)
    operator delete((void *)STACK[0x3A8]);
  if (SLOBYTE(STACK[0x3D7]) < 0)
    operator delete((void *)STACK[0x3C0]);
  if (SLOBYTE(STACK[0x3EF]) < 0)
    operator delete((void *)STACK[0x3D8]);
  if (SLOBYTE(STACK[0x407]) < 0)
    operator delete((void *)STACK[0x3F0]);
  if (SLOBYTE(STACK[0x41F]) < 0)
    operator delete((void *)STACK[0x408]);
  if (SLOBYTE(STACK[0x437]) < 0)
    operator delete((void *)STACK[0x420]);
  if (SLOBYTE(STACK[0x44F]) < 0)
    operator delete((void *)STACK[0x438]);
  if (SLOBYTE(STACK[0x467]) < 0)
    operator delete((void *)STACK[0x450]);
  if (SLOBYTE(STACK[0x47F]) < 0)
    operator delete((void *)STACK[0x468]);
  if (SLOBYTE(STACK[0x497]) < 0)
    operator delete((void *)STACK[0x480]);
  if (SLOBYTE(STACK[0x4AF]) < 0)
    operator delete((void *)STACK[0x498]);
  if (SLOBYTE(STACK[0x4C7]) < 0)
    operator delete((void *)STACK[0x4B0]);
  if (SLOBYTE(STACK[0x4DF]) < 0)
    operator delete((void *)STACK[0x4C8]);
  if (SLOBYTE(STACK[0x4F7]) < 0)
    operator delete((void *)STACK[0x4E0]);
  if (SLOBYTE(STACK[0x50F]) < 0)
    operator delete((void *)STACK[0x4F8]);
  if (SLOBYTE(STACK[0x527]) < 0)
    operator delete((void *)STACK[0x510]);
  if (SLOBYTE(STACK[0x53F]) < 0)
    operator delete((void *)STACK[0x528]);
  if (SLOBYTE(STACK[0x557]) < 0)
    operator delete((void *)STACK[0x540]);
  if (SLOBYTE(STACK[0x56F]) < 0)
    operator delete((void *)STACK[0x558]);
  if (SLOBYTE(STACK[0x587]) < 0)
    operator delete((void *)STACK[0x570]);
  if (SLOBYTE(STACK[0x59F]) < 0)
    operator delete((void *)STACK[0x588]);
  if (SLOBYTE(STACK[0x5B7]) < 0)
    operator delete((void *)STACK[0x5A0]);
  if (SLOBYTE(STACK[0x5CF]) < 0)
    operator delete((void *)STACK[0x5B8]);
  if (SLOBYTE(STACK[0x5E7]) < 0)
    operator delete((void *)STACK[0x5D0]);
  if (SLOBYTE(STACK[0x5FF]) < 0)
    operator delete((void *)STACK[0x5E8]);
  if (SLOBYTE(STACK[0x617]) < 0)
    operator delete((void *)STACK[0x600]);
  if (SLOBYTE(STACK[0x62F]) < 0)
    operator delete((void *)STACK[0x618]);
  if (SLOBYTE(STACK[0x647]) < 0)
    operator delete((void *)STACK[0x630]);
  if (SLOBYTE(STACK[0x65F]) < 0)
    operator delete((void *)STACK[0x648]);
  if (SLOBYTE(STACK[0x677]) < 0)
    operator delete((void *)STACK[0x660]);
  if (SLOBYTE(STACK[0x68F]) < 0)
    operator delete((void *)STACK[0x678]);
  if (SLOBYTE(STACK[0x6A7]) < 0)
    operator delete((void *)STACK[0x690]);
  if (SLOBYTE(STACK[0x6BF]) < 0)
    operator delete((void *)STACK[0x6A8]);
  if (SLOBYTE(STACK[0x6D7]) < 0)
    operator delete((void *)STACK[0x6C0]);
  if (SLOBYTE(STACK[0x6EF]) < 0)
    operator delete((void *)STACK[0x6D8]);
  if (SLOBYTE(STACK[0x707]) < 0)
    operator delete((void *)STACK[0x6F0]);
  if (SLOBYTE(STACK[0x71F]) < 0)
    operator delete((void *)STACK[0x708]);
  if (SLOBYTE(STACK[0x737]) < 0)
    operator delete((void *)STACK[0x720]);
  if (SLOBYTE(STACK[0x74F]) < 0)
    operator delete((void *)STACK[0x738]);
  if (SLOBYTE(STACK[0x767]) < 0)
    operator delete((void *)STACK[0x750]);
  if (SLOBYTE(STACK[0x77F]) < 0)
    operator delete((void *)STACK[0x768]);
  if (SLOBYTE(STACK[0x797]) < 0)
    operator delete((void *)STACK[0x780]);
  if (SLOBYTE(STACK[0x7AF]) < 0)
    operator delete((void *)STACK[0x798]);
  if (SLOBYTE(STACK[0x7C7]) < 0)
    operator delete((void *)STACK[0x7B0]);
  if (SLOBYTE(STACK[0x7DF]) < 0)
    operator delete((void *)STACK[0x7C8]);
  if (SLOBYTE(STACK[0x7F7]) < 0)
    operator delete((void *)STACK[0x7E0]);
  if (SLOBYTE(STACK[0x80F]) < 0)
    operator delete((void *)STACK[0x7F8]);
  if (SLOBYTE(STACK[0x827]) < 0)
    operator delete((void *)STACK[0x810]);
  if (SLOBYTE(STACK[0x83F]) < 0)
    operator delete((void *)STACK[0x828]);
  if (SLOBYTE(STACK[0x857]) < 0)
    operator delete((void *)STACK[0x840]);
  if (SLOBYTE(STACK[0x86F]) < 0)
    operator delete((void *)STACK[0x858]);
  if (SLOBYTE(STACK[0x887]) < 0)
    operator delete((void *)STACK[0x870]);
  if (SLOBYTE(STACK[0x89F]) < 0)
    operator delete((void *)STACK[0x888]);
  if (SLOBYTE(STACK[0x8B7]) < 0)
    operator delete((void *)STACK[0x8A0]);
  if (SLOBYTE(STACK[0x8CF]) < 0)
    operator delete((void *)STACK[0x8B8]);
  if (SLOBYTE(STACK[0x8E7]) < 0)
    operator delete((void *)STACK[0x8D0]);
  if (SLOBYTE(STACK[0x8FF]) < 0)
    operator delete((void *)STACK[0x8E8]);
  if (SLOBYTE(STACK[0x917]) < 0)
    operator delete((void *)STACK[0x900]);
  if (SLOBYTE(STACK[0x92F]) < 0)
    operator delete((void *)STACK[0x918]);
  if (SLOBYTE(STACK[0x947]) < 0)
    operator delete((void *)STACK[0x930]);
  if (SLOBYTE(STACK[0x95F]) < 0)
    operator delete((void *)STACK[0x948]);
  if (SLOBYTE(STACK[0x977]) < 0)
    operator delete((void *)STACK[0x960]);
  if (SLOBYTE(STACK[0x98F]) < 0)
    operator delete((void *)STACK[0x978]);
  if (SLOBYTE(STACK[0x9A7]) < 0)
    operator delete((void *)STACK[0x990]);
  if (SLOBYTE(STACK[0x9BF]) < 0)
    operator delete((void *)STACK[0x9A8]);
  if (SLOBYTE(STACK[0x9D7]) < 0)
    operator delete((void *)STACK[0x9C0]);
  if (SLOBYTE(STACK[0x9EF]) < 0)
    operator delete((void *)STACK[0x9D8]);
  if (SLOBYTE(STACK[0xA07]) < 0)
    operator delete((void *)STACK[0x9F0]);
  if (SLOBYTE(STACK[0xA1F]) < 0)
    operator delete((void *)STACK[0xA08]);
  if (SLOBYTE(STACK[0xA37]) < 0)
    operator delete((void *)STACK[0xA20]);
  if (SLOBYTE(STACK[0xA4F]) < 0)
    operator delete((void *)STACK[0xA38]);
  if (SLOBYTE(STACK[0xA67]) < 0)
    operator delete((void *)STACK[0xA50]);
  if (SLOBYTE(STACK[0xA7F]) < 0)
    operator delete((void *)STACK[0xA68]);
  if (SLOBYTE(STACK[0xA97]) < 0)
    operator delete((void *)STACK[0xA80]);
  if (SLOBYTE(STACK[0xAAF]) < 0)
    operator delete((void *)STACK[0xA98]);
  if (SLOBYTE(STACK[0xAC7]) < 0)
    operator delete((void *)STACK[0xAB0]);
  if (SLOBYTE(STACK[0xADF]) < 0)
    operator delete((void *)STACK[0xAC8]);
  if (SLOBYTE(STACK[0xAF7]) < 0)
    operator delete((void *)STACK[0xAE0]);
  if (SLOBYTE(STACK[0xB0F]) < 0)
    operator delete((void *)STACK[0xAF8]);
  if (SLOBYTE(STACK[0xB27]) < 0)
    operator delete((void *)STACK[0xB10]);
  if (SLOBYTE(STACK[0xB3F]) < 0)
    operator delete((void *)STACK[0xB28]);
  if (SLOBYTE(STACK[0xB57]) < 0)
    operator delete((void *)STACK[0xB40]);
  if (SLOBYTE(STACK[0xB6F]) < 0)
    operator delete((void *)STACK[0xB58]);
  if (SLOBYTE(STACK[0xB87]) < 0)
    operator delete((void *)STACK[0xB70]);
  if (SLOBYTE(STACK[0xB9F]) < 0)
    operator delete((void *)STACK[0xB88]);
  if (SLOBYTE(STACK[0xBB7]) < 0)
    operator delete((void *)STACK[0xBA0]);
  if (SLOBYTE(STACK[0xBCF]) < 0)
    operator delete((void *)STACK[0xBB8]);
  if (SLOBYTE(STACK[0xBE7]) < 0)
    operator delete((void *)STACK[0xBD0]);
  if (SLOBYTE(STACK[0xBFF]) < 0)
    operator delete((void *)STACK[0xBE8]);
  if (SLOBYTE(STACK[0xC17]) < 0)
    operator delete((void *)STACK[0xC00]);
  if (SLOBYTE(STACK[0xC2F]) < 0)
    operator delete((void *)STACK[0xC18]);
  if (SLOBYTE(STACK[0xC47]) < 0)
    operator delete((void *)STACK[0xC30]);
  if (SLOBYTE(STACK[0xC5F]) < 0)
    operator delete((void *)STACK[0xC48]);
  if (SLOBYTE(STACK[0xC77]) < 0)
    operator delete((void *)STACK[0xC60]);
  if (SLOBYTE(STACK[0xC8F]) < 0)
    operator delete((void *)STACK[0xC78]);
  _Unwind_Resume(a1);
}

void sub_10029EC30()
{
  JUMPOUT(0x10029E450);
}

void sub_10029EC3C()
{
  JUMPOUT(0x10029E460);
}

void sub_10029EC4C()
{
  JUMPOUT(0x10029E470);
}

void sub_10029EC58()
{
  JUMPOUT(0x10029E480);
}

void sub_10029EC68()
{
  JUMPOUT(0x10029E490);
}

void sub_10029EC74()
{
  JUMPOUT(0x10029E4A0);
}

void sub_10029EC84()
{
  JUMPOUT(0x10029E4B0);
}

void sub_10029EC90()
{
  JUMPOUT(0x10029E4C0);
}

void sub_10029ECA0()
{
  JUMPOUT(0x10029E4D0);
}

void sub_10029ECAC()
{
  JUMPOUT(0x10029E4E0);
}

void sub_10029ECBC()
{
  JUMPOUT(0x10029E4F0);
}

void sub_10029ECC8()
{
  JUMPOUT(0x10029E500);
}

void sub_10029ECD8()
{
  JUMPOUT(0x10029E510);
}

void sub_10029ECE4()
{
  JUMPOUT(0x10029E520);
}

void sub_10029ECF4()
{
  JUMPOUT(0x10029E530);
}

void sub_10029ED00()
{
  JUMPOUT(0x10029E540);
}

void sub_10029ED10()
{
  JUMPOUT(0x10029E550);
}

void sub_10029ED1C()
{
  JUMPOUT(0x10029E560);
}

void sub_10029ED2C()
{
  JUMPOUT(0x10029E570);
}

void sub_10029ED38()
{
  JUMPOUT(0x10029E580);
}

void sub_10029ED48()
{
  JUMPOUT(0x10029E590);
}

void sub_10029ED54()
{
  JUMPOUT(0x10029E5A0);
}

void sub_10029ED64()
{
  JUMPOUT(0x10029E5B0);
}

void sub_10029ED70()
{
  JUMPOUT(0x10029E5C0);
}

void sub_10029ED80()
{
  JUMPOUT(0x10029E5D0);
}

void sub_10029ED8C()
{
  JUMPOUT(0x10029E5E0);
}

void sub_10029ED9C()
{
  JUMPOUT(0x10029E5F0);
}

void sub_10029EDA8()
{
  JUMPOUT(0x10029E600);
}

void sub_10029EDB8()
{
  JUMPOUT(0x10029E610);
}

void sub_10029EDC4()
{
  JUMPOUT(0x10029E620);
}

void sub_10029EDD4()
{
  JUMPOUT(0x10029E630);
}

void sub_10029EDE0()
{
  JUMPOUT(0x10029E640);
}

void sub_10029EDF0()
{
  JUMPOUT(0x10029E650);
}

void sub_10029EDFC()
{
  JUMPOUT(0x10029E660);
}

void sub_10029EE0C()
{
  JUMPOUT(0x10029E670);
}

void sub_10029EE18()
{
  JUMPOUT(0x10029E680);
}

void sub_10029EE28()
{
  JUMPOUT(0x10029E690);
}

void sub_10029EE34()
{
  JUMPOUT(0x10029E6A0);
}

void sub_10029EE44()
{
  JUMPOUT(0x10029E6B0);
}

void sub_10029EE50()
{
  JUMPOUT(0x10029E6C0);
}

void sub_10029EE60()
{
  JUMPOUT(0x10029E6D0);
}

void sub_10029EE6C()
{
  JUMPOUT(0x10029E6E0);
}

void sub_10029EE7C()
{
  JUMPOUT(0x10029E6F0);
}

void sub_10029EE88()
{
  JUMPOUT(0x10029E700);
}

void sub_10029EE98()
{
  JUMPOUT(0x10029E710);
}

void sub_10029EEA4()
{
  JUMPOUT(0x10029E720);
}

void sub_10029EEB4()
{
  JUMPOUT(0x10029E730);
}

void sub_10029EEC0()
{
  JUMPOUT(0x10029E740);
}

void sub_10029EED0()
{
  JUMPOUT(0x10029E750);
}

void sub_10029EEDC()
{
  JUMPOUT(0x10029E760);
}

void sub_10029EEEC()
{
  JUMPOUT(0x10029E770);
}

void sub_10029EEF8()
{
  JUMPOUT(0x10029E780);
}

void sub_10029EF08()
{
  JUMPOUT(0x10029E790);
}

void sub_10029EF14()
{
  JUMPOUT(0x10029E7A0);
}

void sub_10029EF24()
{
  JUMPOUT(0x10029E7B0);
}

void sub_10029EF30()
{
  JUMPOUT(0x10029E7C0);
}

void sub_10029EF40()
{
  JUMPOUT(0x10029E7D0);
}

void sub_10029EF4C()
{
  JUMPOUT(0x10029E7E0);
}

void sub_10029EF5C()
{
  JUMPOUT(0x10029E7F0);
}

void sub_10029EF68()
{
  JUMPOUT(0x10029E800);
}

void sub_10029EF78()
{
  JUMPOUT(0x10029E810);
}

void sub_10029EF84()
{
  JUMPOUT(0x10029E820);
}

void sub_10029EF94()
{
  JUMPOUT(0x10029E830);
}

void sub_10029EFA0()
{
  JUMPOUT(0x10029E840);
}

void sub_10029EFB0()
{
  JUMPOUT(0x10029E850);
}

void sub_10029EFBC()
{
  JUMPOUT(0x10029E860);
}

void sub_10029EFCC()
{
  JUMPOUT(0x10029E870);
}

void sub_10029EFD8()
{
  JUMPOUT(0x10029E880);
}

void sub_10029EFE8()
{
  JUMPOUT(0x10029E890);
}

void sub_10029EFF4()
{
  JUMPOUT(0x10029E8A0);
}

void sub_10029F004()
{
  JUMPOUT(0x10029E8B0);
}

void sub_10029F010()
{
  JUMPOUT(0x10029E8C0);
}

void sub_10029F020()
{
  JUMPOUT(0x10029E8D0);
}

void sub_10029F02C()
{
  JUMPOUT(0x10029E8E0);
}

void sub_10029F03C()
{
  JUMPOUT(0x10029E8F0);
}

void sub_10029F048()
{
  JUMPOUT(0x10029E900);
}

void sub_10029F058()
{
  JUMPOUT(0x10029E910);
}

void sub_10029F064()
{
  JUMPOUT(0x10029E920);
}

void sub_10029F074()
{
  JUMPOUT(0x10029E930);
}

void sub_10029F080()
{
  JUMPOUT(0x10029E940);
}

void sub_10029F090()
{
  JUMPOUT(0x10029E950);
}

void sub_10029F09C()
{
  JUMPOUT(0x10029E960);
}

void sub_10029F0AC()
{
  JUMPOUT(0x10029E970);
}

void sub_10029F0B8()
{
  JUMPOUT(0x10029E980);
}

void sub_10029F0C8()
{
  JUMPOUT(0x10029E990);
}

void sub_10029F0D4()
{
  JUMPOUT(0x10029E9A0);
}

void sub_10029F0E4()
{
  JUMPOUT(0x10029E9B0);
}

void sub_10029F0F0()
{
  JUMPOUT(0x10029E9C0);
}

void sub_10029F100()
{
  JUMPOUT(0x10029E9D0);
}

void sub_10029F10C()
{
  JUMPOUT(0x10029E9E0);
}

void sub_10029F11C()
{
  JUMPOUT(0x10029E9F0);
}

void sub_10029F128()
{
  JUMPOUT(0x10029EA00);
}

void sub_10029F138()
{
  JUMPOUT(0x10029EA10);
}

void sub_10029F144()
{
  JUMPOUT(0x10029EA20);
}

void sub_10029F154()
{
  JUMPOUT(0x10029EA30);
}

void sub_10029F160()
{
  JUMPOUT(0x10029EA40);
}

void sub_10029F170()
{
  JUMPOUT(0x10029EA50);
}

void sub_10029F17C()
{
  JUMPOUT(0x10029EA60);
}

void sub_10029F18C()
{
  JUMPOUT(0x10029EA70);
}

void sub_10029F198()
{
  JUMPOUT(0x10029EA80);
}

void sub_10029F1A8()
{
  JUMPOUT(0x10029EA90);
}

void sub_10029F1B4()
{
  JUMPOUT(0x10029EAA0);
}

void sub_10029F1C4()
{
  JUMPOUT(0x10029EAB0);
}

void sub_10029F1D0()
{
  JUMPOUT(0x10029EAC0);
}

void sub_10029F1E0()
{
  JUMPOUT(0x10029EAD0);
}

void sub_10029F1EC()
{
  JUMPOUT(0x10029EAE0);
}

void sub_10029F1FC()
{
  JUMPOUT(0x10029EAF0);
}

void sub_10029F208()
{
  JUMPOUT(0x10029EB00);
}

void sub_10029F218()
{
  JUMPOUT(0x10029EB10);
}

void sub_10029F224()
{
  JUMPOUT(0x10029EB20);
}

void sub_10029F234()
{
  JUMPOUT(0x10029EB30);
}

void sub_10029F240()
{
  JUMPOUT(0x10029EB40);
}

void sub_10029F250()
{
  JUMPOUT(0x10029EB50);
}

void sub_10029F25C()
{
  JUMPOUT(0x10029EB60);
}

void sub_10029F26C()
{
  JUMPOUT(0x10029EB70);
}

void sub_10029F278()
{
  JUMPOUT(0x10029EB80);
}

void sub_10029F288()
{
  JUMPOUT(0x10029EB90);
}

void sub_10029F294()
{
  JUMPOUT(0x10029EBA0);
}

void sub_10029F2A4()
{
  JUMPOUT(0x10029EBB0);
}

void sub_10029F2B0()
{
  JUMPOUT(0x10029EBC0);
}

void sub_10029F2C0()
{
  JUMPOUT(0x10029EBD0);
}

void sub_10029F2CC()
{
  JUMPOUT(0x10029EBE0);
}

void sub_10029F2D8()
{
  JUMPOUT(0x10029EBE0);
}

void sub_10029F2E8()
{
  JUMPOUT(0x10029EBF0);
}

void sub_10029F2F8()
{
  JUMPOUT(0x10029EC28);
}

void sub_10029F300()
{
  void *v0;
  uint64_t v1;
  void **v2;
  uint64_t v3;
  void **v4;
  uint64_t v5;
  void **v6;
  uint64_t v7;
  void **v8;
  uint64_t i;
  void *__p[2];
  char v11;
  void *v12[2];
  char v13;
  void *v14[2];
  char v15;
  void *v16[2];
  char v17;
  uint64_t *v18;
  char v19;
  void *v20[2];
  char v21;
  void *v22[2];
  char v23;
  void *v24[2];
  char v25;
  void *v26[2];
  char v27;
  void *v28[2];
  char v29;
  void *v30[2];
  char v31;
  void *v32[2];
  char v33;
  void *v34[2];
  char v35;
  void *v36[2];
  char v37;
  void *v38[2];
  char v39;
  __int128 __dst[3];
  uint64_t v41;
  char v42[40];
  _QWORD v43[2];
  __int128 v44[2];
  _QWORD v45[3];
  __int128 v46;
  _QWORD v47[4];
  char v48[56];
  __int128 v49[3];
  char v50[56];
  __int128 v51;

  v0 = objc_autoreleasePoolPush();
  sub_10000BF04(&xmmword_10085B4F8, "ALP.plist");
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_10085B4F8, (void *)&_mh_execute_header);
  sub_10000BF04(v38, "RDL");
  sub_10000BF04(v36, "AlishaRangingDurationLimitOverrideSeconds");
  sub_10029C180((char *)__dst, (__int128 *)v38, (__int128 *)v36, 0);
  sub_10000BF04(v34, "TA");
  sub_10000BF04(v32, "AlishaTimeoutAOverrideSeconds");
  sub_10029C180(v42, (__int128 *)v34, (__int128 *)v32, 0);
  sub_10000BF04(v30, "TB");
  sub_10000BF04(v28, "AlishaTimeoutBOverrideSeconds");
  sub_10029C180((char *)v44, (__int128 *)v30, (__int128 *)v28, 0);
  sub_10000BF04(v26, "TRFP");
  sub_10000BF04(v24, "AlishaTimeoutRefirePeriodOverrideSeconds");
  sub_10029C180((char *)&v46, (__int128 *)v26, (__int128 *)v24, 0);
  sub_10000BF04(v22, "MTRF");
  sub_10000BF04(v20, "AlishaMaxTimeoutRefiresOverride");
  sub_10029C180(v48, (__int128 *)v22, (__int128 *)v20, 0);
  sub_10000BF04(v16, "MRM");
  sub_10000BF04(v14, "AlishaMinRanMultiplierOverride");
  sub_10029C180((char *)v49, (__int128 *)v16, (__int128 *)v14, 0);
  sub_10000BF04(v12, "STO");
  sub_10000BF04(__p, "AlishaStartTimeOffsetSeconds");
  sub_10029C180(v50, (__int128 *)v12, (__int128 *)__p, 1);
  qword_10085B510 = 0;
  qword_10085B518 = 0;
  qword_10085B520 = 0;
  v18 = &qword_10085B510;
  v19 = 0;
  qword_10085B510 = (uint64_t)operator new(0x188uLL);
  qword_10085B518 = qword_10085B510;
  qword_10085B520 = qword_10085B510 + 392;
  qword_10085B518 = (uint64_t)sub_10029C58C((uint64_t)&qword_10085B520, __dst, &v51, (_QWORD *)qword_10085B510);
  v1 = 49;
  do
  {
    v2 = (void **)((char *)__dst + v1 * 8);
    if (SHIBYTE(v38[v1 + 1]) < 0)
      operator delete(*(v2 - 4));
    if (*((char *)v2 - 33) < 0)
      operator delete(*(v2 - 7));
    v1 -= 7;
  }
  while (v1 * 8);
  if (v11 < 0)
    operator delete(__p[0]);
  if (v13 < 0)
    operator delete(v12[0]);
  if (v15 < 0)
    operator delete(v14[0]);
  if (v17 < 0)
    operator delete(v16[0]);
  if (v21 < 0)
    operator delete(v20[0]);
  if (v23 < 0)
    operator delete(v22[0]);
  if (v25 < 0)
    operator delete(v24[0]);
  if (v27 < 0)
    operator delete(v26[0]);
  if (v29 < 0)
    operator delete(v28[0]);
  if (v31 < 0)
    operator delete(v30[0]);
  if (v33 < 0)
    operator delete(v32[0]);
  if (v35 < 0)
    operator delete(v34[0]);
  if (v37 < 0)
    operator delete(v36[0]);
  if (v39 < 0)
    operator delete(v38[0]);
  __cxa_atexit((void (*)(void *))sub_10029B008, &qword_10085B510, (void *)&_mh_execute_header);
  sub_10000BF04(&xmmword_10085B528, "GLP.plist");
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_10085B528, (void *)&_mh_execute_header);
  sub_10000BF04(v38, "DSBR");
  sub_10000BF04(v36, "DisableSleepBetweenRangingCycles");
  sub_10029C180((char *)__dst, (__int128 *)v38, (__int128 *)v36, 0);
  sub_10000BF04(v34, "DSLP");
  sub_10000BF04(v32, "AllowRoseDeepSleep");
  sub_10029C180(v42, (__int128 *)v34, (__int128 *)v32, 3);
  qword_10085B540 = 0;
  qword_10085B548 = 0;
  qword_10085B550 = 0;
  v30[0] = &qword_10085B540;
  LOBYTE(v30[1]) = 0;
  qword_10085B540 = (uint64_t)operator new(0x70uLL);
  qword_10085B548 = qword_10085B540;
  qword_10085B550 = qword_10085B540 + 112;
  v3 = 0;
  qword_10085B548 = (uint64_t)sub_10029C58C((uint64_t)&qword_10085B550, __dst, v44, (_QWORD *)qword_10085B540);
  do
  {
    v4 = (void **)((char *)__dst + v3 * 8);
    if (SHIBYTE(v43[v3]) < 0)
      operator delete(v4[10]);
    if (*((char *)v4 + 79) < 0)
      operator delete(v4[7]);
    v3 -= 7;
  }
  while (v3 != -14);
  if (v33 < 0)
    operator delete(v32[0]);
  if (v35 < 0)
    operator delete(v34[0]);
  if (v37 < 0)
    operator delete(v36[0]);
  if (v39 < 0)
    operator delete(v38[0]);
  __cxa_atexit((void (*)(void *))sub_10029B008, &qword_10085B540, (void *)&_mh_execute_header);
  sub_10000BF04(&xmmword_10085B558, "BTP.plist");
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_10085B558, (void *)&_mh_execute_header);
  sub_10000BF04(v38, "SMAM");
  sub_10000BF04(v36, "BtThresholdScannerModelAdvertiserModel");
  sub_10029C180((char *)__dst, (__int128 *)v38, (__int128 *)v36, 2);
  sub_10000BF04(v34, "SCAM");
  sub_10000BF04(v32, "BtThresholdScannerClassAdvertiserModel");
  sub_10029C180(v42, (__int128 *)v34, (__int128 *)v32, 2);
  sub_10000BF04(v30, "AM");
  sub_10000BF04(v28, "BtThresholdAdvertiserModel");
  sub_10029C180((char *)v44, (__int128 *)v30, (__int128 *)v28, 2);
  sub_10000BF04(v26, "SMAC");
  sub_10000BF04(v24, "BtThresholdScannerModelAdvertiserClass");
  sub_10029C180((char *)&v46, (__int128 *)v26, (__int128 *)v24, 2);
  sub_10000BF04(v22, "SM");
  sub_10000BF04(v20, "BtThresholdScannerModel");
  sub_10029C180(v48, (__int128 *)v22, (__int128 *)v20, 2);
  qword_10085B570 = 0;
  qword_10085B578 = 0;
  qword_10085B580 = 0;
  v16[0] = &qword_10085B570;
  LOBYTE(v16[1]) = 0;
  qword_10085B570 = (uint64_t)operator new(0x118uLL);
  qword_10085B578 = qword_10085B570;
  qword_10085B580 = qword_10085B570 + 280;
  qword_10085B578 = (uint64_t)sub_10029C58C((uint64_t)&qword_10085B580, __dst, v49, (_QWORD *)qword_10085B570);
  v5 = 35;
  do
  {
    v6 = (void **)((char *)__dst + v5 * 8);
    if (SHIBYTE(v38[v5 + 1]) < 0)
      operator delete(*(v6 - 4));
    if (*((char *)v6 - 33) < 0)
      operator delete(*(v6 - 7));
    v5 -= 7;
  }
  while (v5 * 8);
  if (v21 < 0)
    operator delete(v20[0]);
  if (v23 < 0)
    operator delete(v22[0]);
  if (v25 < 0)
    operator delete(v24[0]);
  if (v27 < 0)
    operator delete(v26[0]);
  if (v29 < 0)
    operator delete(v28[0]);
  if (v31 < 0)
    operator delete(v30[0]);
  if (v33 < 0)
    operator delete(v32[0]);
  if (v35 < 0)
    operator delete(v34[0]);
  if (v37 < 0)
    operator delete(v36[0]);
  if (v39 < 0)
    operator delete(v38[0]);
  __cxa_atexit((void (*)(void *))sub_10029B008, &qword_10085B570, (void *)&_mh_execute_header);
  sub_10000BF04(&xmmword_10085B588, "FP.plist");
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_10085B588, (void *)&_mh_execute_header);
  sub_10029C9B0();
  sub_10000BF04(&xmmword_10085B5B8, "NIACP.plist");
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_10085B5B8, (void *)&_mh_execute_header);
  sub_10000BF04(v38, "TOBFTR");
  sub_10000BF04(v36, "NIBackgroundAccessoryTimeoutSecondsOverride_InactivityBeforeTracking");
  sub_10029C180((char *)__dst, (__int128 *)v38, (__int128 *)v36, 0);
  sub_10000BF04(v34, "TOAFTR");
  sub_10000BF04(v32, "NIBackgroundAccessoryTimeoutSecondsOverride_InactivityAfterTracking");
  sub_10029C180(v42, (__int128 *)v34, (__int128 *)v32, 0);
  sub_10000BF04(v30, "TOTJ");
  sub_10000BF04(v28, "NIBackgroundAccessoryTimeoutSecondsOverride_TotalJobTime");
  sub_10029C180((char *)v44, (__int128 *)v30, (__int128 *)v28, 0);
  qword_10085B5D0 = 0;
  qword_10085B5D8 = 0;
  qword_10085B5E0 = 0;
  v26[0] = &qword_10085B5D0;
  LOBYTE(v26[1]) = 0;
  qword_10085B5D0 = (uint64_t)operator new(0xA8uLL);
  qword_10085B5D8 = qword_10085B5D0;
  qword_10085B5E0 = qword_10085B5D0 + 168;
  v7 = 0;
  qword_10085B5D8 = (uint64_t)sub_10029C58C((uint64_t)&qword_10085B5E0, __dst, &v46, (_QWORD *)qword_10085B5D0);
  do
  {
    v8 = (void **)((char *)__dst + v7 * 8);
    if (SHIBYTE(v45[v7 + 1]) < 0)
      operator delete(v8[17]);
    if (*((char *)v8 + 135) < 0)
      operator delete(v8[14]);
    v7 -= 7;
  }
  while (v7 != -21);
  if (v29 < 0)
    operator delete(v28[0]);
  if (v31 < 0)
    operator delete(v30[0]);
  if (v33 < 0)
    operator delete(v32[0]);
  if (v35 < 0)
    operator delete(v34[0]);
  if (v37 < 0)
    operator delete(v36[0]);
  if (v39 < 0)
    operator delete(v38[0]);
  __cxa_atexit((void (*)(void *))sub_10029B008, &qword_10085B5D0, (void *)&_mh_execute_header);
  sub_10029C224(__dst, &xmmword_10085B4F8, (__int128 **)&qword_10085B510);
  sub_10029C224(&v41, &xmmword_10085B528, (__int128 **)&qword_10085B540);
  sub_10029C224(v43, &xmmword_10085B558, (__int128 **)&qword_10085B570);
  sub_10029C224(v45, &xmmword_10085B588, (__int128 **)&qword_10085B5A0);
  sub_10029C224(v47, &xmmword_10085B5B8, (__int128 **)&qword_10085B5D0);
  sub_10029C6CC((uint64_t)&qword_10085B5E8, (const void **)__dst, 5);
  for (i = 0; i != -30; i -= 6)
  {
    v38[0] = &v47[i + 3];
    sub_10029C508((void ***)v38);
    if (SHIBYTE(v47[i + 2]) < 0)
      operator delete((void *)v47[i]);
  }
  __cxa_atexit((void (*)(void *))sub_10029B03C, &qword_10085B5E8, (void *)&_mh_execute_header);
  objc_autoreleasePoolPop(v0);
}

void sub_10029FDD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,void *a53)
{
  uint64_t v53;

  sub_1003E583C(v53 + 240, &a53);
  _Unwind_Resume(a1);
}

void sub_1002A0588(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1002A06D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1002A07C4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002A0878(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1002A0A9C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1002A0C5C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1002A0D84(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

_QWORD *sub_1002A0E94@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, off_100812000[a1]);
}

_QWORD *sub_1002A0EA8@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, off_100812058[a1]);
}

_QWORD *sub_1002A0EBC@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, off_1008120A0[a1]);
}

_QWORD *sub_1002A0ED0@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, off_1008120C0[a1]);
}

uint64_t sub_1002A0EE4(uint64_t a1, void *a2)
{
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = off_100811F38;
  objc_initWeak((id *)(a1 + 24), a2);
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  return a1;
}

uint64_t sub_1002A0F20(uint64_t a1, void *a2)
{
  id v3;

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = off_100811F38;
  v3 = a2;
  *(_QWORD *)(a1 + 24) = 0;
  objc_initWeak((id *)(a1 + 32), v3);

  *(_DWORD *)(a1 + 40) = 1;
  return a1;
}

uint64_t sub_1002A0F78(uint64_t a1)
{
  NSObject *v2;
  std::__shared_weak_count *v3;
  uint8_t v5[16];

  *(_QWORD *)a1 = off_100811F38;
  v2 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "~PRRangingManagerClient()", v5, 2u);
  }
  objc_destroyWeak((id *)(a1 + 32));
  objc_destroyWeak((id *)(a1 + 24));
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_1002A1010(uint64_t a1)
{
  sub_1002A0F78(a1);
  operator delete();
}

void sub_1002A1034(uint64_t a1, uint64_t a2)
{
  int v3;
  id *v4;
  char v5;
  id v6;
  int v7;
  uint64_t v8;
  id WeakRetained;
  id v10;

  v3 = *(_DWORD *)(a1 + 40);
  if (v3)
  {
    if (v3 == 1)
    {
      WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
      objc_msgSend(WeakRetained, "serviceRequestDidUpdateStatus:", *(_QWORD *)a2, *(unsigned int *)(a2 + 8));
LABEL_4:

    }
  }
  else
  {
    v4 = (id *)(a1 + 24);
    v10 = objc_loadWeakRetained((id *)(a1 + 24));
    v5 = objc_opt_respondsToSelector(v10, "rangingRequestDidUpdateStatus:");

    if ((v5 & 1) != 0 && (*(_DWORD *)(a2 + 4) - 1) <= 3)
    {
      v6 = objc_loadWeakRetained(v4);
      v7 = *(_DWORD *)(a2 + 4) - 1;
      if (v7 > 3)
        v8 = 0;
      else
        v8 = qword_100475968[v7];
      WeakRetained = v6;
      objc_msgSend(v6, "rangingRequestDidUpdateStatus:", v8);
      goto LABEL_4;
    }
  }
}

void sub_1002A1114(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1002A1130(uint64_t a1, double *a2)
{
  int v3;
  id *v4;
  char v5;
  id v6;
  BOOL v7;
  BOOL v8;
  double v9;
  BOOL v10;
  double v11;
  int v12;
  double v13;
  double v14;
  int v15;
  double v16;
  uint64_t v17;
  int v18;
  double v19;
  id v20;
  double v21;
  id v22;
  double v23;
  double v24;
  int v25;
  double v26;
  uint64_t v27;
  int v28;
  double v29;
  id v30;
  double v31;
  id v32;
  void *v33;
  int v34;
  uint64_t v35;
  double v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  double v40;
  int v41;
  double v42;
  id v43;
  double v44;
  id v45;
  const char *v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  id v51;
  id WeakRetained;

  v3 = *(_DWORD *)(a1 + 40);
  if (!v3)
  {
    if (*((_DWORD *)a2 + 8) == 5)
      return;
    v4 = (id *)(a1 + 24);
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 24));
    v5 = objc_opt_respondsToSelector(WeakRetained, "didReceiveNewSolutions:");

    if ((v5 & 1) == 0)
      return;
    v51 = objc_loadWeakRetained(v4);
    v6 = objc_alloc_init((Class)NSMutableArray);
    if (*((_BYTE *)a2 + 928))
    {
      v7 = *((_BYTE *)a2 + 888) != 0;
      v8 = *((_BYTE *)a2 + 904) != 0;
      if (*((_BYTE *)a2 + 904))
        v9 = a2[112];
      else
        v9 = 0.0;
      v10 = *((_BYTE *)a2 + 920) != 0;
      if (*((_BYTE *)a2 + 920))
        v11 = a2[114];
      else
        v11 = 0.0;
    }
    else
    {
      v10 = 0;
      v8 = 0;
      v7 = 0;
      v11 = 0.0;
      v9 = 0.0;
    }
    v12 = *((_DWORD *)a2 + 8);
    if (v12 == 4)
    {
      if (!*((_BYTE *)a2 + 600))
      {
        v46 = "solution.raw_rose_measurement.has_value()";
        v47 = 239;
        goto LABEL_65;
      }
      if (!*((_BYTE *)a2 + 752))
        __assert_rtn("toXPCCompatibleType", "PRRangingManagerClient.mm", 241, "solution.sensor_fusion_solution.has_value()");
      if (*((_BYTE *)a2 + 592))
        v13 = a2[73];
      else
        v13 = 0.0;
      if (*((_BYTE *)a2 + 576))
        v14 = a2[71];
      else
        v14 = 10.0;
      v15 = *((unsigned __int8 *)a2 + 80);
      if (*((_BYTE *)a2 + 80))
        v16 = a2[9];
      else
        v16 = 0.0;
      v17 = sub_1002A1B7C(*((unsigned __int8 *)a2 + 360), *((unsigned __int8 *)a2 + 416));
      v18 = *((unsigned __int8 *)a2 + 24);
      v19 = a2[2];
      v20 = objc_alloc((Class)PRRoseSolution);
      if (v18)
        v21 = v19;
      else
        v21 = 0.0;
      LOBYTE(v50) = v15 != 0;
      LOBYTE(v49) = v10;
      BYTE1(v48) = v8;
      LOBYTE(v48) = v7;
      v22 = objc_msgSend(v20, "initWithVariant:macAddr:machAbsTime_sec:machContTimeValid:machContTime_sec:range_m:rangeUnc_m:azValid:elValid:az_deg:el_deg:azUnc_deg:elUnc_deg:fovConfidence:soiRssiValid:soiRssi_dBm:antennaType:prevSolutionIsBad:trackScoreValid:trackScore:sweepAngleValid:sweepAngle_deg:multipathProbabilityValid:multipathProbability:", 0, *((_QWORD *)a2 + 5), *((unsigned __int8 *)a2 + 24), 1, 1, 1, *a2, v21, a2[44], v14, a2[83], a2[82], a2[86], a2[85], *(_QWORD *)&v13,
              *((_QWORD *)a2 + 27),
              v17,
              v48,
              *(_QWORD *)&v9,
              v49,
              *(_QWORD *)&v11,
              v50,
              *(_QWORD *)&v16);
      objc_msgSend(v6, "addObject:", v22);

      v12 = *((_DWORD *)a2 + 8);
    }
    if ((v12 | 2) == 3)
    {
      if (!*((_BYTE *)a2 + 600))
      {
        v46 = "solution.raw_rose_measurement.has_value()";
        v47 = 297;
        goto LABEL_65;
      }
      if (*((_BYTE *)a2 + 576))
        v23 = a2[71];
      else
        v23 = 10.0;
      if (*((_BYTE *)a2 + 592))
        v24 = a2[73];
      else
        v24 = 0.0;
      v25 = *((unsigned __int8 *)a2 + 80);
      if (*((_BYTE *)a2 + 80))
        v26 = a2[9];
      else
        v26 = 0.0;
      v27 = sub_1002A1B7C(*((unsigned __int8 *)a2 + 360), *((unsigned __int8 *)a2 + 416));
      v28 = *((unsigned __int8 *)a2 + 24);
      v29 = a2[2];
      v30 = objc_alloc((Class)PRRoseSolution);
      if (v28)
        v31 = v29;
      else
        v31 = 0.0;
      LOBYTE(v50) = v25 != 0;
      LOBYTE(v49) = v10;
      BYTE1(v48) = v8;
      LOBYTE(v48) = v7;
      v32 = objc_msgSend(v30, "initWithVariant:macAddr:machAbsTime_sec:machContTimeValid:machContTime_sec:range_m:rangeUnc_m:azValid:elValid:az_deg:el_deg:azUnc_deg:elUnc_deg:fovConfidence:soiRssiValid:soiRssi_dBm:antennaType:prevSolutionIsBad:trackScoreValid:trackScore:sweepAngleValid:sweepAngle_deg:multipathProbabilityValid:multipathProbability:", 0, *((_QWORD *)a2 + 5), *((unsigned __int8 *)a2 + 24), 0, 0, 1, *a2, v31, a2[44], v23, 0.0, 0.0, 0.0, 0.0, *(_QWORD *)&v24,
              *((_QWORD *)a2 + 27),
              v27,
              v48,
              *(_QWORD *)&v9,
              v49,
              *(_QWORD *)&v11,
              v50,
              *(_QWORD *)&v26);
      objc_msgSend(v6, "addObject:", v32);

      v12 = *((_DWORD *)a2 + 8);
    }
    v33 = v51;
    if ((v12 & 0xFFFFFFFE) != 2)
    {
LABEL_60:
      objc_msgSend(v33, "didReceiveNewSolutions:", v6);

      goto LABEL_4;
    }
    if (*((_BYTE *)a2 + 752))
    {
      v34 = *((unsigned __int8 *)a2 + 600);
      if (*((_BYTE *)a2 + 600))
      {
        v35 = *((_QWORD *)a2 + 27);
        v36 = a2[73];
        v37 = *((unsigned __int8 *)a2 + 592);
        v38 = sub_1002A1B7C(*((unsigned __int8 *)a2 + 360), *((unsigned __int8 *)a2 + 416));
        if (!v37)
          v36 = 0.0;
        v39 = *((_BYTE *)a2 + 80) != 0;
        if (*((_BYTE *)a2 + 80))
          v40 = a2[9];
        else
          v40 = 0.0;
      }
      else
      {
        v38 = 0;
        v39 = 0;
        v35 = 0;
        v36 = 0.0;
        v40 = 0.0;
      }
      v41 = *((unsigned __int8 *)a2 + 24);
      v42 = a2[2];
      v43 = objc_alloc((Class)PRRoseSolution);
      if (v41)
        v44 = v42;
      else
        v44 = 0.0;
      LOBYTE(v50) = v39;
      LOBYTE(v49) = v10;
      BYTE1(v48) = v8;
      LOBYTE(v48) = v7;
      v45 = objc_msgSend(v43, "initWithVariant:macAddr:machAbsTime_sec:machContTimeValid:machContTime_sec:range_m:rangeUnc_m:azValid:elValid:az_deg:el_deg:azUnc_deg:elUnc_deg:fovConfidence:soiRssiValid:soiRssi_dBm:antennaType:prevSolutionIsBad:trackScoreValid:trackScore:sweepAngleValid:sweepAngle_deg:multipathProbabilityValid:multipathProbability:", 1, *((_QWORD *)a2 + 5), *((unsigned __int8 *)a2 + 24), 1, 1, v34 != 0, *a2, v44, a2[81], a2[84], a2[83], a2[82], a2[86], a2[85], *(_QWORD *)&v36,
              v35,
              v38,
              v48,
              *(_QWORD *)&v9,
              v49,
              *(_QWORD *)&v11,
              v50,
              *(_QWORD *)&v40);
      objc_msgSend(v6, "addObject:", v45);

      v33 = v51;
      goto LABEL_60;
    }
    v46 = "solution.sensor_fusion_solution.has_value()";
    v47 = 359;
LABEL_65:
    __assert_rtn("toXPCCompatibleType", "PRRangingManagerClient.mm", v47, v46);
  }
  if (v3 == 1)
  {
    v51 = objc_loadWeakRetained((id *)(a1 + 32));
    objc_msgSend(v51, "didReceiveNewSolution:", a2);
LABEL_4:

  }
}

void sub_1002A1608(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id a18)
{
  void *v18;

  _Unwind_Resume(a1);
}

void sub_1002A1668(uint64_t a1, uint64_t a2)
{
  int v3;
  id WeakRetained;
  void *v5;
  id *v6;
  id v7;
  char v8;
  void *v9;
  id v10;
  uint64_t v11;

  v3 = *(_DWORD *)(a1 + 40);
  if (v3)
  {
    if (v3 == 1)
    {
      WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
      objc_msgSend(WeakRetained, "didReceiveSessionStartNotification:", a2);
      v5 = WeakRetained;
LABEL_4:

    }
  }
  else if (!*(_DWORD *)a2)
  {
    v6 = (id *)(a1 + 24);
    v7 = objc_loadWeakRetained((id *)(a1 + 24));
    v8 = objc_opt_respondsToSelector(v7, "didReceiveSessionStartNotification:");

    if ((v8 & 1) != 0)
    {
      if (!*(_BYTE *)(a2 + 16))
        sub_10000BA44();
      v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *(_QWORD *)(a2 + 8)));
      v11 = objc_claimAutoreleasedReturnValue(+[PRSessionStartNotification createWithBluetoothConnectionEventCounterValue:](PRSessionStartNotification, "createWithBluetoothConnectionEventCounterValue:", v9));

      v10 = objc_loadWeakRetained(v6);
      objc_msgSend(v10, "didReceiveSessionStartNotification:", v11);

      v5 = (void *)v11;
      goto LABEL_4;
    }
  }
}

void sub_1002A1764(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1002A178C(uint64_t a1, uint64_t a2)
{
  id WeakRetained;

  if (*(_DWORD *)(a1 + 40) == 1)
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
    objc_msgSend(WeakRetained, "didReceiveRemoteData:", a2);

  }
}

void sub_1002A17E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1002A1804(uint64_t a1, uint64_t a2)
{
  id *v3;
  char v4;
  id WeakRetained;
  id v6;

  if (*(_DWORD *)(a1 + 40) == 1)
  {
    v3 = (id *)(a1 + 32);
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
    v4 = objc_opt_respondsToSelector(WeakRetained, "didReceiveAopSensorFusionUpdate:withBtConnHandle:");

    if ((v4 & 1) != 0)
    {
      v6 = objc_loadWeakRetained(v3);
      objc_msgSend(v6, "didReceiveAopSensorFusionUpdate:withBtConnHandle:", **(unsigned int **)(a2 + 8), *(unsigned __int16 *)(*(_QWORD *)(a2 + 8) + 4));

    }
  }
}

void sub_1002A189C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_1002A18B8(uint64_t a1, uint64_t *a2)
{
  NSObject *v4;
  int v5;
  id WeakRetained;
  id *v7;
  id v8;
  char v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  id v16;
  void *v17;
  NSErrorUserInfoKey v18;
  void *v19;

  v4 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
    sub_1003E58E4((uint64_t)a2, v4);
  v5 = *(_DWORD *)(a1 + 40);
  if (v5)
  {
    if (v5 != 1)
      return;
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
    objc_msgSend(WeakRetained, "didFailWithErrorCode:errorString:", *a2, a2 + 1);
  }
  else
  {
    v7 = (id *)(a1 + 24);
    v8 = objc_loadWeakRetained((id *)(a1 + 24));
    v9 = objc_opt_respondsToSelector(v8, "didFailWithError:");

    if ((v9 & 1) == 0)
      return;
    WeakRetained = objc_loadWeakRetained(v7);
    v10 = *a2;
    v13 = a2[1];
    v12 = a2 + 1;
    v11 = (_QWORD *)v13;
    if (*((char *)v12 + 23) >= 0)
      v11 = v12;
    v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%s"), v11));
    v18 = NSLocalizedDescriptionKey;
    v19 = v14;
    v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v19, &v18, 1));
    v16 = PRErrorWithCodeAndUserInfo(v10, v15);
    v17 = (void *)objc_claimAutoreleasedReturnValue(v16);

    objc_msgSend(WeakRetained, "didFailWithError:", v17);
  }

}

void sub_1002A1A30(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1002A1A78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  id *v6;
  char v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  id WeakRetained;
  id v12;

  v5 = *(_DWORD *)(a1 + 40);
  if (v5)
  {
    if (v5 == 1)
    {
      WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
      objc_msgSend(WeakRetained, "rangingServiceDidUpdateState:cause:", a2, a3);
LABEL_13:

    }
  }
  else
  {
    v6 = (id *)(a1 + 24);
    v12 = objc_loadWeakRetained((id *)(a1 + 24));
    v7 = objc_opt_respondsToSelector(v12, "rangingServiceDidUpdateState:cause:");

    if ((v7 & 1) != 0)
    {
      v8 = objc_loadWeakRetained(v6);
      if (a2 > 3)
        v9 = 3;
      else
        v9 = qword_100475988[(int)a2];
      if (a3 > 7)
        v10 = 5;
      else
        v10 = qword_1004759A8[(int)a3];
      WeakRetained = v8;
      objc_msgSend(v8, "rangingServiceDidUpdateState:cause:", v9, v10);
      goto LABEL_13;
    }
  }
}

void sub_1002A1B60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t sub_1002A1B7C(int a1, int a2)
{
  unsigned __int8 v4;
  unsigned int v5;
  unsigned int v6;
  _BYTE v8[20];

  v4 = atomic_load((unsigned __int8 *)&qword_10085B6E0);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_10085B6E0))
  {
    dword_10085B6D8 = *((_DWORD *)sub_100004784() + 144);
    __cxa_guard_release(&qword_10085B6E0);
  }
  if (a2 == 5)
    v5 = 1;
  else
    v5 = 2 * (a2 == 9);
  sub_10016C5A4((uint64_t)v8, dword_10085B6D8, v5, 0);
  v6 = sub_10016CF1C((uint64_t)v8, a1) - 1;
  if (v6 >= 4)
    return 2;
  else
    return qword_1004759E8[v6];
}

void sub_1002A1C3C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_10085B6E0);
  _Unwind_Resume(a1);
}

void sub_1002A1C54()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_100850448);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_100850448))
    {
      sub_10000BF04(qword_100850430, "PRRoseProviderNetworkListener");
      __cxa_atexit((void (*)(void *))&std::string::~string, qword_100850430, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_100850448);
    }
  }
}

void sub_1002A1CD0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_100850448);
  _Unwind_Resume(a1);
}

void sub_1002A1CE8()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_100850468);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_100850468))
    {
      sub_10000BF04(&qword_100850450, "com.apple.nearbyd.accessory.download");
      __cxa_atexit((void (*)(void *))&std::string::~string, &qword_100850450, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_100850468);
    }
  }
}

void sub_1002A1D64(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_100850468);
  _Unwind_Resume(a1);
}

void sub_1002A1D7C()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_100850488);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_100850488))
    {
      sub_10000BF04(&qword_100850470, "com.apple.nearbyd.accessory.files");
      __cxa_atexit((void (*)(void *))&std::string::~string, &qword_100850470, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_100850488);
    }
  }
}

void sub_1002A1DF8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_100850488);
  _Unwind_Resume(a1);
}

void sub_1002A1E10()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_1008504A8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1008504A8))
    {
      sub_10000BF04(qword_100850490, "MA_");
      __cxa_atexit((void (*)(void *))&std::string::~string, qword_100850490, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1008504A8);
    }
  }
}

void sub_1002A1E8C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1008504A8);
  _Unwind_Resume(a1);
}

void sub_1002A1EA4()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_1008504C8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1008504C8))
    {
      sub_10000BF04(qword_1008504B0, "MB_");
      __cxa_atexit((void (*)(void *))&std::string::~string, qword_1008504B0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1008504C8);
    }
  }
}

void sub_1002A1F20(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1008504C8);
  _Unwind_Resume(a1);
}

void sub_1002A1F38()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_1008504E8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1008504E8))
    {
      sub_10000BF04(qword_1008504D0, "D");
      __cxa_atexit((void (*)(void *))&std::string::~string, qword_1008504D0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1008504E8);
    }
  }
}

void sub_1002A1FB4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1008504E8);
  _Unwind_Resume(a1);
}

void sub_1002A1FCC()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_100850508);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_100850508))
    {
      sub_10000BF04(&qword_1008504F0, "A");
      __cxa_atexit((void (*)(void *))&std::string::~string, &qword_1008504F0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_100850508);
    }
  }
}

void sub_1002A2048(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_100850508);
  _Unwind_Resume(a1);
}

void sub_1002A2060()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_100850528);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_100850528))
    {
      sub_10000BF04(qword_100850510, "FAS.bin");
      __cxa_atexit((void (*)(void *))&std::string::~string, qword_100850510, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_100850528);
    }
  }
}

void sub_1002A20DC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_100850528);
  _Unwind_Resume(a1);
}

void sub_1002A20F4()
{
  unsigned __int8 v0;
  _OWORD *v1;

  v0 = atomic_load((unsigned __int8 *)&qword_100850548);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_100850548))
    {
      qword_100850530 = 0;
      qword_100850538 = 0;
      qword_100850540 = 0;
      v1 = operator new(0x30uLL);
      qword_100850538 = (uint64_t)(v1 + 3);
      qword_100850540 = (uint64_t)(v1 + 3);
      *v1 = xmmword_1004758C0;
      v1[1] = *(_OWORD *)algn_1004758D0;
      v1[2] = xmmword_1004758E0;
      qword_100850530 = (uint64_t)v1;
      __cxa_atexit((void (*)(void *))sub_100009C44, &qword_100850530, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_100850548);
    }
  }
}

void sub_1002A2194(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_100850548);
  _Unwind_Resume(a1);
}

void sub_1002A21AC()
{
  void *v0;
  std::string *v1;
  __int128 v2;
  std::string *v3;
  __int128 v4;
  std::string *v5;
  __int128 v6;
  std::string *v7;
  __int128 v8;
  std::string *v9;
  __int128 v10;
  std::string *v11;
  __int128 v12;
  std::string *v13;
  __int128 v14;
  std::string *v15;
  __int128 v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  __int128 v22;
  std::string *v23;
  __int128 v24;
  std::string *v25;
  __int128 v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  __int128 v30;
  std::string *v31;
  __int128 v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  __int128 v36;
  std::string v37;
  std::string v38;

  v0 = objc_autoreleasePoolPush();
  sub_1003610EC(0);
  v1 = std::string::insert(&v37, 0, "reverseLUT_A");
  v2 = *(_OWORD *)&v1->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v1->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v2;
  v1->__r_.__value_.__l.__size_ = 0;
  v1->__r_.__value_.__r.__words[2] = 0;
  v1->__r_.__value_.__r.__words[0] = 0;
  v3 = std::string::append(&v38, ".bin");
  v4 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
  qword_10085B610 = v3->__r_.__value_.__r.__words[2];
  xmmword_10085B600 = v4;
  v3->__r_.__value_.__l.__size_ = 0;
  v3->__r_.__value_.__r.__words[2] = 0;
  v3->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_10085B600, (void *)&_mh_execute_header);
  sub_1003610EC(1);
  v5 = std::string::insert(&v37, 0, "reverseLUT_A");
  v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  v7 = std::string::append(&v38, ".bin");
  v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  qword_10085B628 = v7->__r_.__value_.__r.__words[2];
  xmmword_10085B618 = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_10085B618, (void *)&_mh_execute_header);
  sub_1003610EC(2);
  v9 = std::string::insert(&v37, 0, "reverseLUT_A");
  v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  v11 = std::string::append(&v38, ".bin");
  v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  qword_10085B640 = v11->__r_.__value_.__r.__words[2];
  xmmword_10085B630 = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_10085B630, (void *)&_mh_execute_header);
  sub_1003610EC(3);
  v13 = std::string::insert(&v37, 0, "reverseLUT_A");
  v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  v15 = std::string::append(&v38, ".bin");
  v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  qword_10085B658 = v15->__r_.__value_.__r.__words[2];
  xmmword_10085B648 = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_10085B648, (void *)&_mh_execute_header);
  sub_1003610EC(4);
  v17 = std::string::insert(&v37, 0, "reverseLUT_A");
  v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v18;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  v19 = std::string::append(&v38, ".bin");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  qword_10085B670 = v19->__r_.__value_.__r.__words[2];
  xmmword_10085B660 = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_10085B660, (void *)&_mh_execute_header);
  sub_1003610EC(5);
  v21 = std::string::insert(&v37, 0, "reverseLUT_A");
  v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  v23 = std::string::append(&v38, ".bin");
  v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  qword_10085B688 = v23->__r_.__value_.__r.__words[2];
  xmmword_10085B678 = v24;
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_10085B678, (void *)&_mh_execute_header);
  sub_1003610EC(6);
  v25 = std::string::insert(&v37, 0, "reverseLUT_A");
  v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v26;
  v25->__r_.__value_.__l.__size_ = 0;
  v25->__r_.__value_.__r.__words[2] = 0;
  v25->__r_.__value_.__r.__words[0] = 0;
  v27 = std::string::append(&v38, ".bin");
  v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
  qword_10085B6A0 = v27->__r_.__value_.__r.__words[2];
  xmmword_10085B690 = v28;
  v27->__r_.__value_.__l.__size_ = 0;
  v27->__r_.__value_.__r.__words[2] = 0;
  v27->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_10085B690, (void *)&_mh_execute_header);
  sub_1003610EC(7);
  v29 = std::string::insert(&v37, 0, "reverseLUT_A");
  v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v30;
  v29->__r_.__value_.__l.__size_ = 0;
  v29->__r_.__value_.__r.__words[2] = 0;
  v29->__r_.__value_.__r.__words[0] = 0;
  v31 = std::string::append(&v38, ".bin");
  v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
  qword_10085B6B8 = v31->__r_.__value_.__r.__words[2];
  xmmword_10085B6A8 = v32;
  v31->__r_.__value_.__l.__size_ = 0;
  v31->__r_.__value_.__r.__words[2] = 0;
  v31->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_10085B6A8, (void *)&_mh_execute_header);
  sub_1003610EC(8);
  v33 = std::string::insert(&v37, 0, "reverseLUT_A");
  v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v34;
  v33->__r_.__value_.__l.__size_ = 0;
  v33->__r_.__value_.__r.__words[2] = 0;
  v33->__r_.__value_.__r.__words[0] = 0;
  v35 = std::string::append(&v38, ".bin");
  v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
  qword_10085B6D0 = v35->__r_.__value_.__r.__words[2];
  xmmword_10085B6C0 = v36;
  v35->__r_.__value_.__l.__size_ = 0;
  v35->__r_.__value_.__r.__words[2] = 0;
  v35->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_10085B6C0, (void *)&_mh_execute_header);
  objc_autoreleasePoolPop(v0);
}

void sub_1002A27A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void sub_1002A2898(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002A28F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)PRSystemSettingsMonitor;
  -[_Unwind_Exception dealloc](&a9, "dealloc");
  _Unwind_Resume(a1);
}

id sub_1002A2AFC(uint64_t a1, uint64_t a2, void *a3)
{
  return _objc_msgSend(a3, "airplaneModeStatusChanged");
}

id sub_1002A2B04(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "airplaneModeStatusChanged");
}

void sub_1002A2C6C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);

  _Unwind_Resume(a1);
}

const __CFString *sub_1002A2C8C(uint64_t a1)
{
  const __CFString *v1;

  v1 = CFSTR("PRAirplaneModeOff");
  if (a1 == 1)
    v1 = CFSTR("PRAirplaneModeOn");
  if (a1)
    return v1;
  else
    return CFSTR("PRAirplaneModeStatusUnknown");
}

void sub_1002A2E10()
{
  void *v0;

  v0 = objc_autoreleasePoolPush();
  qword_10085B6E8 = (uint64_t)os_log_create("com.apple.nearbyd", "Regulatory");
  objc_autoreleasePoolPop(v0);
}

uint64_t sub_1002A2E50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void (__cdecl ***v8)(std::ofstream *__hidden);
  void (__cdecl ***v9)(std::ofstream *__hidden);
  uint64_t v10;
  std::ios_base *v11;
  const char *v12;
  gzFile v13;
  std::runtime_error *exception;
  std::runtime_error *v16;
  std::string v17;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = v6;
  v8 = (void (__cdecl ***)(std::ofstream *__hidden))(a1 + 8);
  v9 = (void (__cdecl ***)(std::ofstream *__hidden))(a1 + 424);
  v10 = a1 + 16;
  *(_QWORD *)(a1 + 8 + *(_QWORD *)(v6 - 24)) = v7;
  v11 = (std::ios_base *)(a1 + 8 + *(_QWORD *)(*(_QWORD *)(a1 + 8) - 24));
  std::ios_base::init(v11, (void *)(a1 + 16));
  v11[1].__vftable = 0;
  v11[1].__fmtflags_ = -1;
  std::filebuf::basic_filebuf(v10);
  if (*(char *)(a2 + 23) >= 0)
    v12 = (const char *)a2;
  else
    v12 = *(const char **)a2;
  v13 = gzopen(v12, "rb");
  *(_QWORD *)a1 = v13;
  if (!v13)
  {
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
      sub_1003E5A18();
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>(&v17, "Could not open file ", a2);
    std::runtime_error::runtime_error(exception, &v17);
  }
  std::ofstream::open(v8);
  if (!*(_QWORD *)(a1 + 136))
  {
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
      sub_1003E5A90();
    gzclose(*(gzFile *)a1);
    *(_QWORD *)a1 = 0;
    v16 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>(&v17, "Could not open file ", a3);
    std::runtime_error::runtime_error(v16, &v17);
  }
  return a1;
}

void sub_1002A3050(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _QWORD *v15;
  void *v16;
  int v17;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v17 & 1) == 0)
    {
LABEL_6:
      sub_10014B348(v15);
      _Unwind_Resume(a1);
    }
  }
  else if (!v17)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v16);
  goto LABEL_6;
}

uint64_t sub_1002A30C4(uint64_t a1)
{
  gzFile_s *v2;
  uint64_t v3;

  v2 = *(gzFile_s **)a1;
  if (v2)
    gzclose(v2);
  std::filebuf::~filebuf(a1 + 16);
  std::ios::~ios(a1 + 424);
  return a1;
}

BOOL sub_1002A3138(uint64_t a1, uint64_t a2)
{
  int v2;
  _BOOL8 v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  voidp buf[3];
  gzFile file;
  _QWORD v11[71];

  sub_1002A2E50((uint64_t)&file, a1, a2);
  if (file && v11[16])
  {
    sub_10002D73C(buf, 0x4000uLL);
    while (2)
    {
      v2 = gzeof(file);
      v3 = v2 != 0;
      if (v2)
      {
        if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
          sub_1003E5AF4();
      }
      else
      {
        v4 = gzread(file, buf[0], 0x4000u);
        if (v4)
        {
          v5 = 0;
          v6 = v4;
          v7 = v4;
          do
          {
            std::ostream::write(v11, (char *)buf[0] + v5, 1);
            if ((*((_BYTE *)&v11[4] + *(_QWORD *)(v11[0] - 24)) & 5) != 0)
            {
              if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
                sub_1003E5C48();
              goto LABEL_15;
            }
            ++v5;
          }
          while (v7 != v5);
          if (v7 == v6)
            continue;
          if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
            sub_1003E5BE4();
        }
        else if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
        {
          sub_1003E5B80();
        }
      }
      break;
    }
LABEL_15:
    if (buf[0])
    {
      buf[1] = buf[0];
      operator delete(buf[0]);
    }
  }
  else
  {
    v3 = 0;
  }
  sub_1002A30C4((uint64_t)&file);
  return v3;
}

void sub_1002A3330(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, char a12)
{
  void *v14;
  NSObject *v15;

  sub_1002A30C4((uint64_t)&a12);
  if (a2 == 1)
  {
    v14 = __cxa_begin_catch(a1);
    v15 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
      sub_1003E5CAC((uint64_t)v14, v15);
    __cxa_end_catch();
    JUMPOUT(0x1002A3294);
  }
  _Unwind_Resume(a1);
}

void sub_1002A3470(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002A34E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1002A35AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1002A370C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1002A3724(uint64_t a1, void *a2)
{
  void *v2;
  id v3;

  v2 = *(void **)(a1 + 32);
  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "shortDescription"));
  objc_msgSend(v2, "appendFormat:", CFSTR("\n    [%@] "), v3);

}

void sub_1002A376C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1002A3888(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002A3990(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002A3C18(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1002A3E60(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002A3F48(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1002A4074(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

_QWORD *sub_1002A4278@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, off_100812108[a1]);
}

_QWORD *sub_1002A428C@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, off_100812160[a1]);
}

_QWORD *sub_1002A42A0@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, off_1008121A8[a1]);
}

_QWORD *sub_1002A42B4@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, off_1008121C8[a1]);
}

_QWORD *sub_1002A42C8(_QWORD *result, uint64_t a2, uint64_t a3)
{
  *result = a2;
  result[1] = a3;
  return result;
}

void sub_1002A42D0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  _BYTE v20[104];
  _BYTE v21[8];
  void *v22;
  _BYTE *v23;
  void *v24;
  _BYTE *v25;
  void *__p;
  _BYTE *v27;
  _QWORD v28[2];
  _BYTE v29[8];
  _QWORD v30[3];
  _QWORD v31[3];
  _QWORD v32[3];
  _QWORD v33[2];
  char v34;

  (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(a1 + 8) + 96))(&v13);
  v29[0] = 0;
  v34 = 0;
  if ((_DWORD)v13)
  {
    v4 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
      sub_1003E5D34(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  else
  {
    sub_1002A4518((_QWORD *)a1, (uint64_t)&v13, (uint64_t)v21);
    sub_1002A4F64((uint64_t)v29);
    v29[0] = v21[0];
    memset(v30, 0, sizeof(v30));
    sub_1002106A0(v30, v22, (uint64_t)v23, (v23 - (_BYTE *)v22) >> 3);
    memset(v31, 0, sizeof(v31));
    sub_100210718(v31, v24, (uint64_t)v25, (v25 - (_BYTE *)v24) >> 3);
    memset(v32, 0, sizeof(v32));
    sub_100210790(v32, __p, (uint64_t)v27, (v27 - (_BYTE *)__p) >> 3);
    v33[0] = v28[0];
    *(_DWORD *)((char *)v33 + 7) = *(_DWORD *)((char *)v28 + 7);
    v34 = 1;
    if (__p)
    {
      v27 = __p;
      operator delete(__p);
    }
    if (v24)
    {
      v25 = v24;
      operator delete(v24);
    }
    if (v22)
    {
      v23 = v22;
      operator delete(v22);
    }
  }
  v12 = v13;
  sub_100210574(v20, (uint64_t)v29);
  *(_DWORD *)a2 = v12;
  sub_100210574((_BYTE *)(a2 + 8), (uint64_t)v20);
  sub_100210808((uint64_t)v20);
  sub_100210808((uint64_t)v29);
  if (v18)
  {
    v19 = v18;
    operator delete(v18);
  }
  if (v16)
  {
    v17 = v16;
    operator delete(v16);
  }
  if (v14)
  {
    v15 = v14;
    operator delete(v14);
  }
}

void sub_1002A44A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  uint64_t v33;
  void *v35;
  void *v36;

  v35 = *(void **)(v33 - 112);
  if (v35)
  {
    *(_QWORD *)(v33 - 104) = v35;
    operator delete(v35);
  }
  v36 = *(void **)(v33 - 136);
  if (v36)
  {
    *(_QWORD *)(v33 - 128) = v36;
    operator delete(v36);
  }
  sub_1002A46C8(&a33);
  sub_100210808(v33 - 144);
  sub_1002A46C8(&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_1002A4518@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  NSObject *v6;
  uint64_t v7;
  void *v8;
  unsigned int v9;
  void *v10;
  id v11;
  void *v12;
  char v13;
  __int16 v15;
  uint8_t buf[8];
  char v17;

  v6 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "regulatory,produceRoseConfig", buf, 2u);
  }
  v7 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 32))(*a1);
  buf[0] = 0;
  v17 = 0;
  if (BYTE6(v7))
  {
    v17 = 1;
    *(_QWORD *)buf = v7 & 0xFFFFFFFFFFFFLL;
  }
  v15 = 11;
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  v9 = objc_msgSend(v8, "BOOLForKey:", CFSTR("DisableCoex"));

  if (v9)
    v15 = 0;
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[PRGlobalDebugSettings sharedSettings](PRGlobalDebugSettings, "sharedSettings"));
  v11 = objc_msgSend(v10, "integerForKey:", PRDebugConfigArgDebugLevel);

  if (!v11)
  {
    v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
    v11 = objc_msgSend(v12, "integerForKey:", CFSTR("RoseDebugLevelOverride"));

  }
  if (v11)
    v13 = (char)v11;
  else
    v13 = 1;
  return sub_1002A4E70(a3, v13, a2 + 8, a2 + 32, a2 + 56, &v15, (uint64_t *)buf);
}

void sub_1002A46A8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_QWORD *sub_1002A46C8(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[1];
  if (v4)
  {
    a1[2] = v4;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_1002A4718(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
}

BOOL sub_1002A4728(uint64_t a1, char *a2, unsigned __int8 *a3, __int16 a4)
{
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  int v9;
  int v10;
  int v11;
  NSObject *v12;
  NSObject *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  void *v18;
  __int16 v19;
  char v20;
  NSObject *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  NSObject *v31;
  unsigned __int8 *v32;
  NSObject *v33;
  _BYTE *v34;
  void **v35;
  int v37;
  NSObject *v38;
  NSObject *v39;
  NSObject *v40;
  NSObject *v41;
  unsigned __int8 *v42;
  unsigned __int8 *v43;
  char *v44;
  void *__p[2];
  char v46;
  void *v47;
  unsigned __int8 *v48;
  uint8_t v49[4];
  _BYTE *v50;
  __int16 v51;
  const char *v52;
  _BYTE buf[12];
  __int16 v54;
  int v55;
  __int16 v56;
  const char *v57;

  (*(void (**)(void **__return_ptr))(**(_QWORD **)(a1 + 8) + 48))(&v47);
  v8 = (unsigned __int8 *)v47;
  v7 = v48;
  if (v48 != v47)
  {
    v44 = a2;
    v42 = a3;
    v9 = 0;
    v10 = 0;
    v43 = (unsigned __int8 *)v47;
    do
    {
      v11 = *v8;
      if (v11 == 9)
      {
        v13 = qword_10085F520;
        if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "[PRConfigurationManager] RF channel 9 ALLOWED.", buf, 2u);
        }
        v10 = 1;
      }
      else if (v11 == 5)
      {
        v12 = qword_10085F520;
        if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "[PRConfigurationManager] RF channel 5 ALLOWED.", buf, 2u);
        }
        v9 = 1;
      }
      ++v8;
    }
    while (v8 != v7);
    if (((v9 | v10) & 1) == 0)
    {
      v39 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_FAULT))
        sub_1003E5DD4(v39);
      v40 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/Proximity/Libraries/DaemonCore/PRConfigurationManager.mm";
        v54 = 1024;
        v55 = 124;
        v56 = 2080;
        v57 = "getPreferredChannels";
        _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_INFO, "%s:%d: assertion failure in %s", buf, 0x1Cu);
      }
      abort();
    }
    v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
    v15 = objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "objectForKey:", CFSTR("PreferredUWBChannelOverride")));
    v8 = v43;
    v17 = a2;
    v18 = (void *)v15;
    if ((a4 & 0xFF00) != 0)
    {
      if (a4 == 5)
        goto LABEL_15;
    }
    else if (v15)
    {
      v29 = objc_opt_class(NSNumber, v16);
      if ((objc_opt_isKindOfClass(v18, v29) & 1) != 0)
      {
        v30 = objc_msgSend(v18, "integerValue");
        if (v30 == sub_10036C4CC(5, 1))
        {
          v31 = qword_10085F520;
          if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "[PRConfigurationManager] Ch5 set as preferred in default write. Override preference for channel 9.", buf, 2u);
          }
LABEL_15:
          v19 = 9;
          if ((v9 & 1) != 0)
          {
            v20 = 5;
            goto LABEL_26;
          }
LABEL_29:
          v32 = v42;
          if ((v10 & 1) == 0)
            __assert_rtn("getPreferredChannels", "PRConfigurationManager.mm", 183, "leastPreferredChannelAllowed");
          *v17 = v19;
          goto LABEL_31;
        }
        v37 = sub_10036C4CC(9, 1);
        v38 = qword_10085F520;
        if (v30 != v37)
        {
          if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_FAULT))
            sub_1003E5D64(v30, v38);
          v41 = qword_10085F520;
          if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 136315650;
            *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/Proximity/Libraries/DaemonCore/PRConfigurationManager.mm";
            v54 = 1024;
            v55 = 167;
            v56 = 2080;
            v57 = "getPreferredChannels";
            _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_INFO, "%s:%d: assertion failure in %s", buf, 0x1Cu);
          }
          abort();
        }
        if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "[PRConfigurationManager] Ch 9 set as preferred in default write. This is already the preference. Do nothing.", buf, 2u);
        }
        v19 = 5;
        if ((v10 & 1) == 0)
        {
          LOBYTE(v10) = v9;
          v17 = v44;
          goto LABEL_29;
        }
        v20 = 9;
        LOBYTE(v10) = v9;
        v17 = v44;
LABEL_26:
        *v17 = v20;
        v32 = v42;
        if ((v10 & 1) != 0)
        {
          *(_WORD *)v42 = v19 | 0x100;
LABEL_33:
          v33 = (id)qword_10085F520;
          if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
          {
            v34 = buf;
            sub_10036C290(*v17, buf);
            if (SBYTE3(v57) < 0)
              v34 = *(_BYTE **)buf;
            if (v32[1])
            {
              sub_10036C290(*v32, __p);
              if (v46 >= 0)
                v35 = __p;
              else
                v35 = (void **)__p[0];
              *(_DWORD *)v49 = 136315394;
              v50 = v34;
              v51 = 2080;
              v52 = (const char *)v35;
              _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "[PRConfigurationManager] Primary channel %s. Alternate channel %s", v49, 0x16u);
              if (v46 < 0)
                operator delete(__p[0]);
            }
            else
            {
              *(_DWORD *)v49 = 136315394;
              v50 = v34;
              v51 = 2080;
              v52 = "None";
              _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "[PRConfigurationManager] Primary channel %s. Alternate channel %s", v49, 0x16u);
            }
            if (SBYTE3(v57) < 0)
              operator delete(*(void **)buf);
          }

          goto LABEL_46;
        }
LABEL_31:
        if (v32[1])
          v32[1] = 0;
        goto LABEL_33;
      }
    }
    v19 = 5;
    if ((v10 & 1) == 0)
    {
      LOBYTE(v10) = v9;
      goto LABEL_29;
    }
    v20 = 9;
    LOBYTE(v10) = v9;
    goto LABEL_26;
  }
  v21 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
    sub_1003E5E10(v21, v22, v23, v24, v25, v26, v27, v28);
LABEL_46:
  if (v47)
  {
    v48 = (unsigned __int8 *)v47;
    operator delete(v47);
  }
  return v7 != v8;
}

void sub_1002A4CC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  void *v28;
  void *v29;
  void *v30;

  if (a28 < 0)
    operator delete(__p);

  if (a16)
    operator delete(a16);
  _Unwind_Resume(a1);
}

uint64_t sub_1002A4D2C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_1002A4D3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int16 v17;

  *(_DWORD *)a3 = 0;
  if (!*(_BYTE *)(a2 + 105))
    return 0;
  *(_BYTE *)(a3 + 1) = *(_BYTE *)(a3 + 1) & 0xF3 | (4
                                                  * (sub_10036B654(*(unsigned __int8 *)(a2 + 104), 1, a3, a4, a5, a6, a7, a8) & 3));
  if (!*(_BYTE *)(a2 + 107))
    return 0;
  *(_BYTE *)(a3 + 1) = *(_BYTE *)(a3 + 1) & 0xCF | (16
                                                  * (sub_10036B654(*(unsigned __int8 *)(a2 + 106), 1, v11, v12, v13, v14, v15, v16) & 3));
  if (!*(_BYTE *)(a2 + 174))
    return 0;
  *(_WORD *)(a3 + 2) = *(_WORD *)(a2 + 172);
  if (!*(_BYTE *)(a2 + 153))
    return 0;
  *(_BYTE *)(a3 + 1) = *(_BYTE *)(a3 + 1) & 0xFC | sub_10036C4CC(*(unsigned __int8 *)(a2 + 152), 1) & 3;
  v17 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 64))(*(_QWORD *)(a1 + 8));
  if (v17 < 0x100u)
    return 0;
  *(_BYTE *)a3 = v17;
  return 1;
}

_QWORD *sub_1002A4E18@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  unsigned __int16 v3;

  v3 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 64))(*(_QWORD *)(a1 + 8));
  if (v3 > 0xFFu)
    return sub_10038DEBC(v3, a2);
  else
    return sub_10000BF04(a2, "");
}

uint64_t sub_1002A4E70(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, _WORD *a6, uint64_t *a7)
{
  uint64_t v12;

  *(_BYTE *)a1 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  sub_1002106A0((_QWORD *)(a1 + 8), *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3);
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  sub_100210718((_QWORD *)(a1 + 32), *(const void **)a4, *(_QWORD *)(a4 + 8), (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 3);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  sub_100210790((_QWORD *)(a1 + 56), *(const void **)a5, *(_QWORD *)(a5 + 8), (uint64_t)(*(_QWORD *)(a5 + 8) - *(_QWORD *)a5) >> 3);
  *(_WORD *)(a1 + 80) = *a6;
  v12 = *a7;
  *(_BYTE *)(a1 + 90) = *((_BYTE *)a7 + 8);
  *(_QWORD *)(a1 + 82) = v12;
  return a1;
}

void sub_1002A4F30(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;
  void *v6;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 40) = v5;
    operator delete(v5);
  }
  v6 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 16) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

void sub_1002A4F64(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;

  if (*(_BYTE *)(a1 + 96))
  {
    v2 = *(void **)(a1 + 56);
    if (v2)
    {
      *(_QWORD *)(a1 + 64) = v2;
      operator delete(v2);
    }
    v3 = *(void **)(a1 + 32);
    if (v3)
    {
      *(_QWORD *)(a1 + 40) = v3;
      operator delete(v3);
    }
    v4 = *(void **)(a1 + 8);
    if (v4)
    {
      *(_QWORD *)(a1 + 16) = v4;
      operator delete(v4);
    }
    *(_BYTE *)(a1 + 96) = 0;
  }
}

void sub_1002A506C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id sub_1002A5190(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "updateLocationAuthorized");
}

void sub_1002A548C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1002A5520(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v9;
  NSObject *v10;
  _QWORD v12[6];

  v9 = a2;
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 40) = xmmword_100475A20;
  *(_BYTE *)(a1 + 32) = 0;
  *(int64x2_t *)(a1 + 56) = vdupq_n_s64(0xC08F400000000000);
  *(_QWORD *)(a1 + 72) = 0xC08F400000000000;
  *(_BYTE *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  sub_100027674(a1 + 96, a3);
  sub_100027674(a1 + 128, a4);
  sub_100027674(a1 + 160, a5);
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  sub_100179BFC(a1 + 224, *(void **)a1);
  *(_QWORD *)(a1 + 392) = 0;
  *(_WORD *)(a1 + 400) = 0;
  v10 = *(NSObject **)a1;
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_1002A5728;
  v12[3] = &unk_1007FA668;
  v12[4] = a1;
  dispatch_async(v10, v12);

  return a1;
}

void sub_1002A5648(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14)
{
  uint64_t v14;
  void *v15;
  _QWORD *v16;
  void **v17;
  _QWORD *v18;
  _QWORD *v19;
  void **v20;
  void **v21;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;

  v21 = v17;

  a14 = v21;
  sub_1001D93C4(&a14);
  v23 = *(_QWORD **)(v14 + 184);
  if (v23 == v19)
  {
    v24 = v19;
    v25 = 4;
  }
  else
  {
    if (!v23)
      goto LABEL_6;
    v25 = 5;
    v24 = *(_QWORD **)(v14 + 184);
  }
  (*(void (**)(void))(*v24 + 8 * v25))();
LABEL_6:
  v26 = *(_QWORD **)(v14 + 152);
  if (v26 == v18)
  {
    v27 = 4;
    v26 = v18;
  }
  else
  {
    if (!v26)
      goto LABEL_11;
    v27 = 5;
  }
  (*(void (**)(void))(*v26 + 8 * v27))();
LABEL_11:
  v28 = *(_QWORD **)(v14 + 120);
  if (v28 == v16)
  {
    v29 = 4;
    v28 = v16;
  }
  else
  {
    if (!v28)
      goto LABEL_16;
    v29 = 5;
  }
  (*(void (**)(void))(*v28 + 8 * v29))();
LABEL_16:
  if (*(char *)(v14 + 31) < 0)
    operator delete(*v20);

  _Unwind_Resume(a1);
}

id sub_1002A5728(uint64_t a1)
{
  _QWORD *v1;
  PRCoreLocationClient *v2;
  void *v3;
  void *v4;
  void *v5;
  _QWORD v7[5];
  _QWORD v8[5];

  v1 = *(_QWORD **)(a1 + 32);
  v2 = -[PRCoreLocationClient initWithQueue:]([PRCoreLocationClient alloc], "initWithQueue:", *v1);
  v3 = (void *)v1[27];
  v1[27] = v2;

  v4 = (void *)v1[27];
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1002A57DC;
  v8[3] = &unk_10080AF90;
  v8[4] = v1;
  objc_msgSend(v4, "setRegulatoryLocationAuthorized:", v8);
  v5 = (void *)v1[27];
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100005A8C;
  v7[3] = &unk_1008121E8;
  v7[4] = v1;
  return objc_msgSend(v5, "setRegulatoryLocationHandler:", v7);
}

uint64_t sub_1002A57DC(uint64_t a1, uint64_t a2)
{
  return sub_1002A57E4(*(_QWORD *)(a1 + 32), a2);
}

uint64_t sub_1002A57E4(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  char v12;

  v4 = qword_10085B6F0;
  if (os_log_type_enabled((os_log_t)qword_10085B6F0, OS_LOG_TYPE_DEBUG))
    sub_1003E6154(a2, v4, v5, v6, v7, v8, v9, v10);
  result = *(_QWORD *)(a1 + 152);
  if (result)
  {
    v12 = a2;
    return (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)result + 48))(result, &v12);
  }
  return result;
}

void sub_1002A585C(uint64_t a1)
{
  sub_100179F38(a1 + 224);
}

uint64_t sub_1002A5864(NSObject **a1)
{
  NSObject *v2;
  _QWORD block[5];

  if (os_log_type_enabled((os_log_t)qword_10085B6F0, OS_LOG_TYPE_DEBUG))
    sub_1003E61BC();
  v2 = *a1;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1002A58EC;
  block[3] = &unk_1007FA668;
  block[4] = a1;
  dispatch_async(v2, block);
  return 1;
}

id sub_1002A58EC(uint64_t a1)
{
  id result;

  result = *(id *)(*(_QWORD *)(a1 + 32) + 216);
  if (result)
    return objc_msgSend(result, "startMonitoring");
  return result;
}

uint64_t sub_1002A5900(NSObject **a1)
{
  NSObject *v2;
  _QWORD block[5];

  if (os_log_type_enabled((os_log_t)qword_10085B6F0, OS_LOG_TYPE_DEBUG))
    sub_1003E61E8();
  v2 = *a1;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1002A5988;
  block[3] = &unk_1007FA668;
  block[4] = a1;
  dispatch_async(v2, block);
  return 1;
}

id sub_1002A5988(uint64_t a1)
{
  id result;

  result = *(id *)(*(_QWORD *)(a1 + 32) + 216);
  if (result)
    return _objc_msgSend(result, "upgradeToBestAccuracyMonitoring");
  return result;
}

uint64_t sub_1002A599C(NSObject **a1)
{
  NSObject *v2;
  _QWORD block[5];

  if (os_log_type_enabled((os_log_t)qword_10085B6F0, OS_LOG_TYPE_DEBUG))
    sub_1003E6214();
  v2 = *a1;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1002A5A24;
  block[3] = &unk_1007FA668;
  block[4] = a1;
  dispatch_async(v2, block);
  return 1;
}

id sub_1002A5A24(uint64_t a1)
{
  id result;

  result = *(id *)(*(_QWORD *)(a1 + 32) + 216);
  if (result)
    return _objc_msgSend(result, "dowgradeToBystanderMonitoring");
  return result;
}

void sub_1002A5A38(uint64_t a1, void *a2, _BYTE *a3)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  unsigned int v9;
  void *v10;
  void *v11;
  unsigned int v12;
  id v13;
  void *v14;
  BOOL v15;
  BOOL v16;
  void *__p[2];
  uint64_t v18;
  void *v19[2];
  void *v20[2];
  __int128 v21;
  __int16 v22;
  char v23;
  __int128 v24;
  uint64_t v25;

  v5 = a2;
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "iso3166CountryCode2"));

  if (!v6)
    goto LABEL_26;
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "iso3166CountryCode2"));
  if (objc_msgSend(v7, "isEqualToString:", CFSTR("IR")))
  {

  }
  else
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "iso3166CountryCode2"));
    v9 = objc_msgSend(v8, "isEqualToString:", CFSTR("KP"));

    if (!v9)
      goto LABEL_6;
  }
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 0;
LABEL_6:
  if (objc_msgSend(v5, "isCoastalWaters") == (id)1)
  {
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "iso3166CountryCode2"));
    if (objc_msgSend(v10, "isEqualToString:", CFSTR("US")))
    {

LABEL_10:
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 0;
      *a3 = 1;
      goto LABEL_26;
    }
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "iso3166CountryCode2"));
    v12 = objc_msgSend(v11, "isEqualToString:", CFSTR("KO"));

    if (v12)
      goto LABEL_10;
  }
  v13 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "iso3166CountryCode2")));
  sub_10000BF04(&v24, (char *)objc_msgSend(v13, "UTF8String"));

  v22 = 0;
  *(_OWORD *)v20 = 0u;
  v21 = 0u;
  *(_OWORD *)v19 = 0u;
  v23 = -1;
  v14 = sub_100007824();
  if (SHIBYTE(v25) < 0)
  {
    sub_100004678(__p, (void *)v24, *((unint64_t *)&v24 + 1));
  }
  else
  {
    *(_OWORD *)__p = v24;
    v18 = v25;
  }
  v15 = sub_1000042D0((uint64_t)v14, (uint64_t)__p, (std::string *)v19);
  v16 = v15;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
    if (!v15)
      goto LABEL_20;
LABEL_18:
    if (!(v22 | HIBYTE(v22)))
    {
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 0;
      *a3 = 1;
    }
    goto LABEL_20;
  }
  operator delete(__p[0]);
  if (v16)
    goto LABEL_18;
LABEL_20:
  if (SHIBYTE(v21) < 0)
    operator delete(v20[1]);
  if (SHIBYTE(v20[0]) < 0)
    operator delete(v19[0]);
  if (SHIBYTE(v25) < 0)
    operator delete((void *)v24);
LABEL_26:

}

void sub_1002A5C70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void sub_1002A5CE0()
{
  void *v0;

  v0 = objc_autoreleasePoolPush();
  qword_10085B6F0 = (uint64_t)os_log_create("com.apple.nearbyd", "Regulatory");
  objc_autoreleasePoolPop(v0);
}

uint64_t sub_1002A5D20(uint64_t result, char a2)
{
  *(_BYTE *)result = a2;
  *(_QWORD *)(result + 8) = 0;
  *(_BYTE *)(result + 16) = 0;
  *(_BYTE *)(result + 48) = 0;
  *(_BYTE *)(result + 56) = 0;
  *(_BYTE *)(result + 64) = 0;
  *(_BYTE *)(result + 120) = 0;
  *(_BYTE *)(result + 128) = 0;
  *(_BYTE *)(result + 184) = 0;
  *(_BYTE *)(result + 192) = 0;
  *(_BYTE *)(result + 248) = 0;
  *(_BYTE *)(result + 256) = 0;
  *(_BYTE *)(result + 312) = 0;
  *(_WORD *)(result + 320) = -1;
  *(_QWORD *)(result + 336) = 0;
  *(_QWORD *)(result + 344) = 0;
  *(_QWORD *)(result + 328) = 0;
  return result;
}

void sub_1002A5D68(unsigned __int8 *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unsigned int v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unsigned int v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unsigned int v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unsigned int v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unsigned int v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unsigned int v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67[2];
  void *__p;
  void *v69;
  uint64_t v70;
  char v71;
  unsigned int v72;
  uint64_t v73;
  const void *v74;
  int v75[2];
  char v76;

  *((_QWORD *)a1 + 1) = 0;
  if (a1[48])
    a1[48] = 0;
  sub_1002A6358((uint64_t)a1, a2, a3, a4, a5, a6, a7, a8, (uint64_t)&v72);
  while (v76)
  {
    sub_1002A64CC(&v72, *a1, v10, v11, v12, v13, v14, v15);
    if (!v76)
      sub_10000BA44();
    LODWORD(v67[0]) = v72;
    v67[1] = v73;
    v69 = 0;
    v70 = 0;
    __p = 0;
    sub_1001530EC(&__p, v74, *(uint64_t *)v75, *(_QWORD *)v75 - (_QWORD)v74);
    if (!v76)
      goto LABEL_100;
    v22 = v72;
    if (v72 == 4162)
    {
      sub_1002A6664((uint64_t)a1, (uint64_t)&v72);
      sub_1002A66AC(a1 + 320, v23, v24, v25, v26, v27, v28, v29);
      if (!v76)
        goto LABEL_100;
      v22 = v72;
    }
    if (v22 == 4234)
    {
      sub_1002A6704(a1, (uint64_t)&v72, v16, v17, v18, v19, v20, v21, v67[0]);
      if (!v76)
LABEL_100:
        sub_10000BA44();
    }
    v30 = v72;
    if (v72 == 5129)
    {
      v31 = *((_QWORD *)a1 + 42);
      if (v31 >= *((_QWORD *)a1 + 43))
      {
        v32 = sub_1002A711C((uint64_t *)a1 + 41, (uint64_t)v67);
      }
      else
      {
        sub_1002A70C8((uint64_t)(a1 + 328), (uint64_t)v67);
        v32 = v31 + 40;
      }
      *((_QWORD *)a1 + 42) = v32;
      if (!v76)
        goto LABEL_100;
      v30 = v72;
    }
    if (v30 == 5134)
    {
      v33 = *((_QWORD *)a1 + 42);
      if (v33 >= *((_QWORD *)a1 + 43))
      {
        v34 = sub_1002A711C((uint64_t *)a1 + 41, (uint64_t)v67);
      }
      else
      {
        sub_1002A70C8((uint64_t)(a1 + 328), (uint64_t)v67);
        v34 = v33 + 40;
      }
      *((_QWORD *)a1 + 42) = v34;
      if (!v76)
        goto LABEL_100;
    }
    v35 = v72;
    if (v72 == 5154)
    {
      v36 = *((_QWORD *)a1 + 42);
      if (v36 >= *((_QWORD *)a1 + 43))
      {
        v37 = sub_1002A711C((uint64_t *)a1 + 41, (uint64_t)v67);
      }
      else
      {
        sub_1002A70C8((uint64_t)(a1 + 328), (uint64_t)v67);
        v37 = v36 + 40;
      }
      *((_QWORD *)a1 + 42) = v37;
      if (!v76)
        goto LABEL_100;
      v35 = v72;
    }
    if (v35 == 5164)
    {
      v38 = *((_QWORD *)a1 + 42);
      if (v38 >= *((_QWORD *)a1 + 43))
      {
        v39 = sub_1002A711C((uint64_t *)a1 + 41, (uint64_t)v67);
      }
      else
      {
        sub_1002A70C8((uint64_t)(a1 + 328), (uint64_t)v67);
        v39 = v38 + 40;
      }
      *((_QWORD *)a1 + 42) = v39;
      if (!v76)
        goto LABEL_100;
    }
    v40 = v72;
    if (v72 == 5149)
    {
      v41 = *((_QWORD *)a1 + 42);
      if (v41 >= *((_QWORD *)a1 + 43))
      {
        v42 = sub_1002A711C((uint64_t *)a1 + 41, (uint64_t)v67);
      }
      else
      {
        sub_1002A70C8((uint64_t)(a1 + 328), (uint64_t)v67);
        v42 = v41 + 40;
      }
      *((_QWORD *)a1 + 42) = v42;
      if (!v76)
        goto LABEL_100;
      v40 = v72;
    }
    if (v40 == 5169)
    {
      v43 = *((_QWORD *)a1 + 42);
      if (v43 >= *((_QWORD *)a1 + 43))
      {
        v44 = sub_1002A711C((uint64_t *)a1 + 41, (uint64_t)v67);
      }
      else
      {
        sub_1002A70C8((uint64_t)(a1 + 328), (uint64_t)v67);
        v44 = v43 + 40;
      }
      *((_QWORD *)a1 + 42) = v44;
      if (!v76)
        goto LABEL_100;
    }
    v45 = v72;
    if (v72 == 5195)
    {
      v46 = *((_QWORD *)a1 + 42);
      if (v46 >= *((_QWORD *)a1 + 43))
      {
        v47 = sub_1002A711C((uint64_t *)a1 + 41, (uint64_t)v67);
      }
      else
      {
        sub_1002A70C8((uint64_t)(a1 + 328), (uint64_t)v67);
        v47 = v46 + 40;
      }
      *((_QWORD *)a1 + 42) = v47;
      if (!v76)
        goto LABEL_100;
      v45 = v72;
    }
    if (v45 == 5174)
    {
      v48 = *((_QWORD *)a1 + 42);
      if (v48 >= *((_QWORD *)a1 + 43))
      {
        v49 = sub_1002A711C((uint64_t *)a1 + 41, (uint64_t)v67);
      }
      else
      {
        sub_1002A70C8((uint64_t)(a1 + 328), (uint64_t)v67);
        v49 = v48 + 40;
      }
      *((_QWORD *)a1 + 42) = v49;
      if (!v76)
        goto LABEL_100;
    }
    v50 = v72;
    if (v72 == 5197)
    {
      v51 = *((_QWORD *)a1 + 42);
      if (v51 >= *((_QWORD *)a1 + 43))
      {
        v52 = sub_1002A711C((uint64_t *)a1 + 41, (uint64_t)v67);
      }
      else
      {
        sub_1002A70C8((uint64_t)(a1 + 328), (uint64_t)v67);
        v52 = v51 + 40;
      }
      *((_QWORD *)a1 + 42) = v52;
      if (!v76)
        goto LABEL_100;
      v50 = v72;
    }
    if (v50 == 5184)
    {
      v53 = *((_QWORD *)a1 + 42);
      if (v53 >= *((_QWORD *)a1 + 43))
      {
        v54 = sub_1002A711C((uint64_t *)a1 + 41, (uint64_t)v67);
      }
      else
      {
        sub_1002A70C8((uint64_t)(a1 + 328), (uint64_t)v67);
        v54 = v53 + 40;
      }
      *((_QWORD *)a1 + 42) = v54;
      if (!v76)
        goto LABEL_100;
    }
    v55 = v72;
    if (v72 == 5201)
    {
      v56 = *((_QWORD *)a1 + 42);
      if (v56 >= *((_QWORD *)a1 + 43))
      {
        v57 = sub_1002A711C((uint64_t *)a1 + 41, (uint64_t)v67);
      }
      else
      {
        sub_1002A70C8((uint64_t)(a1 + 328), (uint64_t)v67);
        v57 = v56 + 40;
      }
      *((_QWORD *)a1 + 42) = v57;
      if (!v76)
        goto LABEL_100;
      v55 = v72;
    }
    if (v55 == 5179)
    {
      v58 = *((_QWORD *)a1 + 42);
      if (v58 >= *((_QWORD *)a1 + 43))
      {
        v59 = sub_1002A711C((uint64_t *)a1 + 41, (uint64_t)v67);
      }
      else
      {
        sub_1002A70C8((uint64_t)(a1 + 328), (uint64_t)v67);
        v59 = v58 + 40;
      }
      *((_QWORD *)a1 + 42) = v59;
      if (!v76)
        goto LABEL_100;
    }
    v60 = v72;
    if (v72 == 5199)
    {
      v61 = *((_QWORD *)a1 + 42);
      if (v61 >= *((_QWORD *)a1 + 43))
      {
        v62 = sub_1002A711C((uint64_t *)a1 + 41, (uint64_t)v67);
      }
      else
      {
        sub_1002A70C8((uint64_t)(a1 + 328), (uint64_t)v67);
        v62 = v61 + 40;
      }
      *((_QWORD *)a1 + 42) = v62;
      if (!v76)
        goto LABEL_100;
      v60 = v72;
    }
    if (v60 == 5189)
    {
      v63 = *((_QWORD *)a1 + 42);
      if (v63 >= *((_QWORD *)a1 + 43))
      {
        v64 = sub_1002A711C((uint64_t *)a1 + 41, (uint64_t)v67);
      }
      else
      {
        sub_1002A70C8((uint64_t)(a1 + 328), (uint64_t)v67);
        v64 = v63 + 40;
      }
      *((_QWORD *)a1 + 42) = v64;
      if (!v76)
        goto LABEL_100;
    }
    if (v72 == 5203)
    {
      v65 = *((_QWORD *)a1 + 42);
      if (v65 >= *((_QWORD *)a1 + 43))
      {
        v66 = sub_1002A711C((uint64_t *)a1 + 41, (uint64_t)v67);
      }
      else
      {
        sub_1002A70C8((uint64_t)(a1 + 328), (uint64_t)v67);
        v66 = v65 + 40;
      }
      *((_QWORD *)a1 + 42) = v66;
    }
    if (__p)
    {
      v69 = __p;
      operator delete(__p);
    }
    sub_1002A6358((uint64_t)a1, a2, v16, v17, v18, v19, v20, v21, (uint64_t)v67);
    sub_1002A7024((uint64_t)&v72, (uint64_t)v67);
    if (v71)
    {
      if (__p)
      {
        v69 = __p;
        operator delete(__p);
      }
    }
  }
}

void sub_1002A6308(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  if (a22)
  {
    if (__p)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_1002A6358@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double result;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int16 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;

  if (!*(_BYTE *)(a1 + 48) || *(_QWORD *)(a1 + 8) >= *(_QWORD *)(a1 + 24) + *(_QWORD *)(a1 + 16))
  {
    sub_1002A6A7C(a1, a2, a3, a4, a5, a6, a7, a8);
    if (!*(_BYTE *)(a1 + 48))
      goto LABEL_14;
    sub_1002A6C5C(a1 + 16, v12, v13, v14, v15, v16, v17, v18);
    if (!*(_BYTE *)(a1 + 48))
      sub_10000BA44();
  }
  v20 = *(_DWORD *)(a1 + 36);
  if (v20 >= 2)
    sub_1003E63EC();
  v21 = *(_QWORD *)(a1 + 8);
  if (v20)
    v22 = 4;
  else
    v22 = 2;
  if (v22 + v21 + 2 <= (unint64_t)(a2[1] - *a2))
  {
    v23 = sub_1002A6CF0(a1, a2, v21, 2, a5, a6, a7, a8);
    v24 = v23;
    v29 = sub_1002A6CF0(v23, a2, *(_QWORD *)(a1 + 8) + 2, v22, v25, v26, v27, v28);
    v36 = *(_QWORD *)(a1 + 8);
    v37 = 6;
    if (!v20)
      v37 = 4;
    v38 = v36 + v37 + v29;
    v39 = *a2;
    if (v38 <= a2[1] - *a2)
    {
      LODWORD(v42) = v24 & 0x3FFF;
      *((_QWORD *)&v42 + 1) = v29;
      v43 = 0uLL;
      v44 = 0;
      sub_10022D0C8(&v43, (const void *)(v39 + v36 + v37), v39 + v36 + v37 + v29, v29);
      v40 = *(_QWORD *)(a1 + 8);
      *(_QWORD *)(a1 + 8) = v38;
      result = *(double *)&v42;
      v41 = v43;
      *(_OWORD *)a9 = v42;
      *(_OWORD *)(a9 + 16) = v41;
      *(_QWORD *)(a9 + 32) = v44;
      *(_QWORD *)(a9 + 40) = v40;
      *(_BYTE *)(a9 + 48) = 1;
      return result;
    }
    sub_10036CAF0("RoseCalFileParser::getNextTLV: read idx %zu + data offset %zu + length %u exceeds data size %zu", v30, v31, v29, v32, v33, v34, v35, v36);
  }
LABEL_14:
  *(_BYTE *)a9 = 0;
  *(_BYTE *)(a9 + 48) = 0;
  return result;
}

void sub_1002A64CC(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void **v48;
  uint64_t v49;
  uint64_t v50;
  void *__p[2];
  char v52;
  void *v53[2];
  char v54;
  void *v55[2];
  char v56;

  v8 = a2;
  sub_1000051BC("Cal TLV:", a2, a3, a4, a5, a6, a7, a8, v49);
  v10 = *a1;
  sub_1002A6EC8(*a1, v55);
  sub_1000051BC("    tag ID: 0x%04x (%s)", v11, v12, v13, v14, v15, v16, v17, v10);
  if (v56 < 0)
    operator delete(v55[0]);
  sub_1000051BC("    length: %zu", v18, v19, v20, v21, v22, v23, v24, *((_QWORD *)a1 + 1));
  sub_1000051BC("    offset within file: %zu", v25, v26, v27, v28, v29, v30, v31, *((_QWORD *)a1 + 5));
  if (v8)
  {
    sub_1000051BC("    value:", v32, v33, v34, v35, v36, v37, v38, v50);
    sub_10000BF04(v53, "");
    v40 = *((_QWORD *)a1 + 2);
    v39 = *((_QWORD *)a1 + 3);
    sub_10000BF04(__p, "");
    sub_1003A21CC((uint64_t)v53, v40, v39 - v40, 0x10u, (uint64_t)__p);
    if (v52 < 0)
      operator delete(__p[0]);
    if (v54 < 0)
      operator delete(v53[0]);
    v48 = v55;
    if (v56 < 0)
      v48 = (void **)v55[0];
    sub_1000051BC("%s", v41, v42, v43, v44, v45, v46, v47, (uint64_t)v48);
    if (v56 < 0)
      operator delete(v55[0]);
  }
}

void sub_1002A6618(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;

  if (*(char *)(v23 - 33) < 0)
    operator delete(*(void **)(v23 - 56));
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002A6664(uint64_t result, uint64_t a2)
{
  char *v2;
  char v3;

  if (*(_DWORD *)a2 != 4162)
    sub_1003E643C();
  v2 = *(char **)(a2 + 16);
  if (*(_QWORD *)(a2 + 24) - (_QWORD)v2 <= 1uLL)
    sub_1003E6414();
  v3 = *v2;
  *(_BYTE *)(result + 320) = v2[1];
  *(_BYTE *)(result + 321) = v3;
  return result;
}

void sub_1002A66AC(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  sub_1000051BC("SystemFactoryCalVersion:", a2, a3, a4, a5, a6, a7, a8, v23);
  sub_1000051BC("    major version: %d", v9, v10, v11, v12, v13, v14, v15, *a1);
  sub_1000051BC("    minor version: %d", v16, v17, v18, v19, v20, v21, v22, a1[1]);
}

void sub_1002A6704(_BYTE *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int v9;
  unsigned int v11;
  char *v12;
  _QWORD *v13;
  _BYTE *v14;
  _QWORD *v15;
  void *v16;
  void *v17;
  _BYTE v18[32];
  void *__p;
  void *v20;
  char v21;

  v21 = 0;
  v9 = a1[320];
  if (v9 == 255 || (v11 = a1[321], v11 == 255))
  {
    v12 = "systemFactoryCalVersion is not valid, return from parsing PDOA_Forward_LUT";
LABEL_4:
    sub_10036CAF0(v12, a2, a3, a4, a5, a6, a7, a8, a9);
    return;
  }
  if (v9 == 1)
  {
    if (v11 > 0xC)
    {
      if (*(_QWORD *)(a2 + 8) != 131044)
      {
        v12 = "systemFactoryCalVersion indicates two forward PDOA Luts but the segment length does not match";
        goto LABEL_4;
      }
      v13 = (_QWORD *)(a2 + 16);
      sub_1002A6D60((_QWORD *)(a2 + 16), 0, 0x7FF9uLL, (uint64_t)&v16);
      sub_1001A7D3C((uint64_t)v18, 0, 180, 0, 180, (uint64_t)&v16);
      sub_1001A8798((uint64_t)(a1 + 192), (uint64_t)v18);
      if (__p)
      {
        v20 = __p;
        operator delete(__p);
      }
      if (v16)
      {
        v17 = v16;
        operator delete(v16);
      }
      sub_1002A6D60(v13, 0xFFF2uLL, 0x7FF9uLL, (uint64_t)&v16);
      sub_1001A7D3C((uint64_t)v18, 0, 180, 0, 180, (uint64_t)&v16);
      sub_1001A8798((uint64_t)(a1 + 256), (uint64_t)v18);
      v14 = a1 + 56;
      if (__p)
      {
        v20 = __p;
        operator delete(__p);
      }
      if (v16)
      {
        v17 = v16;
        operator delete(v16);
      }
      goto LABEL_37;
    }
  }
  else if (a1[320] || !a1[321])
  {
    v12 = "Unexpected systemFactoryCalVersion, return from parsing PDOA_Forward_LUT";
    goto LABEL_4;
  }
  if (*(_QWORD *)(a2 + 8) != 262088)
  {
    v12 = "systemFactoryCalVersion indicates four forward PDOA Luts but the segment length does not match";
    goto LABEL_4;
  }
  v15 = (_QWORD *)(a2 + 16);
  sub_1002A6D60((_QWORD *)(a2 + 16), 0, 0x7FF9uLL, (uint64_t)&v16);
  sub_1001A7D3C((uint64_t)v18, 0, 180, 0, 180, (uint64_t)&v16);
  sub_1001A8798((uint64_t)(a1 + 64), (uint64_t)v18);
  if (__p)
  {
    v20 = __p;
    operator delete(__p);
  }
  if (v16)
  {
    v17 = v16;
    operator delete(v16);
  }
  sub_1002A6D60(v15, 0xFFF2uLL, 0x7FF9uLL, (uint64_t)&v16);
  sub_1001A7D3C((uint64_t)v18, 0, 180, 0, 180, (uint64_t)&v16);
  sub_1001A8798((uint64_t)(a1 + 128), (uint64_t)v18);
  if (__p)
  {
    v20 = __p;
    operator delete(__p);
  }
  if (v16)
  {
    v17 = v16;
    operator delete(v16);
  }
  sub_1002A6D60(v15, 0x1FFE4uLL, 0x7FF9uLL, (uint64_t)&v16);
  sub_1001A7D3C((uint64_t)v18, 0, 180, 0, 180, (uint64_t)&v16);
  sub_1001A8798((uint64_t)(a1 + 192), (uint64_t)v18);
  if (__p)
  {
    v20 = __p;
    operator delete(__p);
  }
  if (v16)
  {
    v17 = v16;
    operator delete(v16);
  }
  sub_1002A6D60(v15, 0x2FFD6uLL, 0x7FF9uLL, (uint64_t)&v16);
  sub_1001A7D3C((uint64_t)v18, 0, 180, 0, 180, (uint64_t)&v16);
  sub_1001A8798((uint64_t)(a1 + 256), (uint64_t)v18);
  v14 = a1 + 56;
  if (__p)
  {
    v20 = __p;
    operator delete(__p);
  }
  if (v16)
  {
    v17 = v16;
    operator delete(v16);
  }
  sub_10036C2F0(&v21, 5);
LABEL_37:
  sub_10036C2F0(&v21, 9);
  sub_1001A8804(v14, v21);
}

void sub_1002A6A20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  if (__p)
    operator delete(__p);
  if (a10)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void sub_1002A6A7C(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  int v23;
  _QWORD *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;

  sub_1000051BC("RoseCalFileParser::findNextHeader: read idx %zu", (uint64_t)a2, a3, a4, a5, a6, a7, a8, *(_QWORD *)(a1 + 8));
  if (*(_BYTE *)(a1 + 48))
    *(_BYTE *)(a1 + 48) = 0;
  v18 = *(_QWORD *)(a1 + 8);
  v20 = *a2;
  v19 = a2[1];
  v21 = v19 - *a2;
  if (v18 + 2 > v21)
  {
LABEL_16:
    sub_1000051BC("RoseCalFileParser::findNextHeader: no header found! read idx %zu", v11, v12, v13, v14, v15, v16, v17, v18);
    return;
  }
  v22 = 0;
  while (1)
  {
    v23 = *(unsigned __int16 *)(v20 + v18);
    if (v23 == 20054)
      break;
    if (v23 == 20055)
    {
      v24 = &unk_100475AA0;
      goto LABEL_9;
    }
LABEL_13:
    v41 = v18 + 3;
    *(_QWORD *)(a1 + 8) = ++v18;
    v21 = v19 - v20;
    --v22;
    if (v41 > v19 - v20)
    {
      if (v22)
      {
        sub_1000051BC("RoseCalFileParser::findNextHeader: skipped %zu bytes looking for next header", v11, v12, v13, v14, v15, v16, v17, -v22);
        v18 = *(_QWORD *)(a1 + 8);
      }
      goto LABEL_16;
    }
  }
  v24 = &unk_100475A58;
LABEL_9:
  v25 = v24[3];
  v26 = v18 - v25;
  if (v18 < v25)
    goto LABEL_13;
  v13 = v24[2];
  v27 = v24[6];
  v28 = v24[8];
  if (v13 + v24[4] + v26 + v27 + v28 > v21)
    goto LABEL_13;
  v42 = v13 + v24[4] + v26 + v27 + v28;
  v29 = sub_1002A6CF0(v10, a2, v24[1] + v26, v13, v14, v15, v16, v17);
  v30 = v29;
  v35 = sub_1002A6CF0(v29, a2, v24[5] + v26, v27, v31, v32, v33, v34);
  v36 = v35;
  v10 = sub_1002A6CF0(v35, a2, v24[7] + v26, v28, v37, v38, v39, v40);
  if (v36 != *((unsigned __int16 *)v24 + 1))
  {
    v18 = *(_QWORD *)(a1 + 8);
    v20 = *a2;
    v19 = a2[1];
    goto LABEL_13;
  }
  if (!*(_BYTE *)(a1 + 48))
    *(_BYTE *)(a1 + 48) = 1;
  *(_QWORD *)(a1 + 24) = v30;
  *(_DWORD *)(a1 + 32) = v23;
  *(_DWORD *)(a1 + 36) = v36;
  *(_DWORD *)(a1 + 40) = v10;
  *(_QWORD *)(a1 + 8) = v42;
  *(_QWORD *)(a1 + 16) = v42;
  if (v22)
    sub_1000051BC("RoseCalFileParser::findNextHeader: skipped %zu bytes looking for next header", v11, v12, v13, v14, v15, v16, v17, -v22);
}

void sub_1002A6C5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  sub_1000051BC("Cal header:", a2, a3, a4, a5, a6, a7, a8, v44);
  sub_1000051BC("    blob start idx: %zu", v9, v10, v11, v12, v13, v14, v15, *(_QWORD *)a1);
  sub_1000051BC("    blob length: %zu", v16, v17, v18, v19, v20, v21, v22, *(_QWORD *)(a1 + 8));
  sub_1000051BC("    signature: 0x%04x", v23, v24, v25, v26, v27, v28, v29, *(unsigned int *)(a1 + 16));
  sub_1000051BC("    version: %u", v30, v31, v32, v33, v34, v35, v36, *(unsigned int *)(a1 + 20));
  sub_1000051BC("    checksum: 0x%04x", v37, v38, v39, v40, v41, v42, v43, *(unsigned int *)(a1 + 24));
}

uint64_t sub_1002A6CF0(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a4 == 4)
  {
    if ((unint64_t)(a3 + 4) > a2[1] - *a2)
      sub_1003E64C8();
    return *(unsigned __int16 *)(*a2 + a3 + 2) | (*(unsigned __int16 *)(*a2 + a3) << 16);
  }
  else
  {
    if (a4 != 2)
      sub_1003E6464(a4, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    if ((unint64_t)(a3 + 2) > a2[1] - *a2)
      sub_1003E64A0();
    return *(unsigned __int16 *)(*a2 + a3);
  }
}

void sub_1002A6D60(_QWORD *a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v5;
  unint64_t v6;
  _QWORD *v8;
  _WORD *v9;
  __int16 v10;
  _WORD *v11;
  _WORD *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  __int16 v20;

  v5 = a2 + 2 * a3;
  if (v5 > a1[1] - *a1)
    sub_1003E64F0();
  v6 = a2;
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  sub_1001A8708((void **)a4, a3);
  if (v5 > v6)
  {
    v8 = (_QWORD *)(a4 + 16);
    v9 = *(_WORD **)(a4 + 8);
    do
    {
      v10 = *(_WORD *)(*a1 + v6);
      if ((unint64_t)v9 >= *v8)
      {
        v12 = *(_WORD **)a4;
        v13 = (uint64_t)v9 - *(_QWORD *)a4;
        if (v13 <= -3)
          sub_100026E7C();
        v14 = v13 >> 1;
        v15 = *v8 - (_QWORD)v12;
        if (v15 <= (v13 >> 1) + 1)
          v16 = v14 + 1;
        else
          v16 = *v8 - (_QWORD)v12;
        if (v15 >= 0x7FFFFFFFFFFFFFFELL)
          v17 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v17 = v16;
        if (v17)
        {
          v18 = (char *)sub_100131980(a4 + 16, v17);
          v12 = *(_WORD **)a4;
          v9 = *(_WORD **)(a4 + 8);
        }
        else
        {
          v18 = 0;
        }
        v19 = &v18[2 * v14];
        *(_WORD *)v19 = v10;
        v11 = v19 + 2;
        while (v9 != v12)
        {
          v20 = *--v9;
          *((_WORD *)v19 - 1) = v20;
          v19 -= 2;
        }
        *(_QWORD *)a4 = v19;
        *(_QWORD *)(a4 + 8) = v11;
        *(_QWORD *)(a4 + 16) = &v18[2 * v17];
        if (v12)
          operator delete(v12);
      }
      else
      {
        *v9 = v10;
        v11 = v9 + 1;
      }
      *(_QWORD *)(a4 + 8) = v11;
      v6 += 2;
      v9 = v11;
    }
    while (v6 < v5);
  }
}

void sub_1002A6EA4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1002A6EC8@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  char *v2;

  v2 = "PDOA_LUT_Ch0";
  switch(a1)
  {
    case 4140:
      return sub_10000BF04(a2, v2);
    case 4141:
      v2 = "PDOA_LUT_Ch1";
      break;
    case 4142:
      v2 = "XO_Cal";
      break;
    case 4143:
      v2 = "TX_CW_Power_Cal";
      break;
    case 4144:
      v2 = "RX_Gain_Cal";
      break;
    case 4145:
    case 4146:
    case 4147:
    case 4148:
    case 4149:
    case 4150:
    case 4151:
    case 4153:
    case 4154:
    case 4155:
    case 4157:
    case 4158:
    case 4167:
    case 4168:
    case 4169:
LABEL_20:
      v2 = "UNKNOWN";
      break;
    case 4152:
      v2 = "OTA_Group_Delay_Cal";
      break;
    case 4156:
      v2 = "Internal_Group_delay_Cal";
      break;
    case 4159:
      v2 = "PDOA_LUT_Generated_at_PHY_Out";
      break;
    case 4160:
      v2 = "SMT_Group_Delay_Derived";
      break;
    case 4161:
      v2 = "AOA_Antenna_RX_Chain_Map";
      break;
    case 4162:
      v2 = "System_Factory_Cal_Version";
      break;
    case 4163:
      v2 = "SMT_Leakage_Group_Delay_128_Tap_TF";
      break;
    case 4164:
      v2 = "RX_Transfer_Function_128_Tap";
      break;
    case 4165:
      v2 = "Fixture_Transfer_Function_128_Tap";
      break;
    case 4166:
      v2 = "OTA_PDOA_Offset";
      break;
    case 4170:
      v2 = "FATP_TX_Power_Cal";
      break;
    default:
      switch(a1)
      {
        case 4232:
          v2 = "Drona_Ant_Efficiency";
          break;
        case 4234:
          v2 = "PDOA_Forward_LUT_Ch0";
          break;
        case 4235:
          v2 = "PDOA_Forward_LUT_Ch1";
          break;
        case 4236:
          v2 = "OTA_PDOA_Offset_at_90_90_Per_Gain_Stage_Ch0";
          break;
        case 4237:
          v2 = "OTA_PDOA_Offset_at_90_90_Per_Gain_Stage_Ch1";
          break;
        default:
          goto LABEL_20;
      }
      break;
  }
  return sub_10000BF04(a2, v2);
}

__n128 sub_1002A7024(uint64_t a1, uint64_t a2)
{
  __n128 result;
  void *v5;
  uint64_t v6;

  if (*(unsigned __int8 *)(a1 + 48) == *(unsigned __int8 *)(a2 + 48))
  {
    if (*(_BYTE *)(a1 + 48))
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      result.n128_u64[0] = sub_10013775C(a1 + 16, (__n128 *)(a2 + 16)).n128_u64[0];
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    }
  }
  else if (*(_BYTE *)(a1 + 48))
  {
    v5 = *(void **)(a1 + 16);
    if (v5)
    {
      *(_QWORD *)(a1 + 24) = v5;
      operator delete(v5);
    }
    *(_BYTE *)(a1 + 48) = 0;
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    result = *(__n128 *)(a2 + 16);
    *(__n128 *)(a1 + 16) = result;
    v6 = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a1 + 40) = v6;
    *(_BYTE *)(a1 + 48) = 1;
  }
  return result;
}

_QWORD *sub_1002A70C8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *result;

  v3 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)v3 = *(_OWORD *)a2;
  *(_QWORD *)(v3 + 24) = 0;
  *(_QWORD *)(v3 + 32) = 0;
  *(_QWORD *)(v3 + 16) = 0;
  result = sub_1001530EC((_QWORD *)(v3 + 16), *(const void **)(a2 + 16), *(_QWORD *)(a2 + 24), *(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16));
  *(_QWORD *)(a1 + 8) = v3 + 40;
  return result;
}

void sub_1002A7114(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_1002A711C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0x666666666666666)
    sub_100026E7C();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x333333333333333)
    v9 = 0x666666666666666;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)sub_10003E110(v7, v9);
  else
    v10 = 0;
  v11 = &v10[40 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v15 = v11;
  v16 = &v10[40 * v9];
  *(_OWORD *)v11 = *(_OWORD *)a2;
  *((_QWORD *)v11 + 3) = 0;
  *((_QWORD *)v11 + 4) = 0;
  *((_QWORD *)v11 + 2) = 0;
  sub_1001530EC((_QWORD *)v11 + 2, *(const void **)(a2 + 16), *(_QWORD *)(a2 + 24), *(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16));
  v15 += 40;
  sub_1002A7234(a1, v14);
  v12 = a1[1];
  sub_1002A73D0((uint64_t)v14);
  return v12;
}

void sub_1002A7220(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1002A73D0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1002A7234(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_1002A72A8((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1002A72A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[3];
  char v11;
  __int128 v12;
  __int128 v13;

  v7 = a7;
  *(_QWORD *)&v13 = a6;
  *((_QWORD *)&v13 + 1) = a7;
  v12 = v13;
  v10[0] = a1;
  v10[1] = &v12;
  v10[2] = &v13;
  if (a3 == a5)
  {
    v8 = a6;
  }
  else
  {
    do
    {
      *(_OWORD *)(v7 - 40) = *(_OWORD *)(a3 - 40);
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      *(_QWORD *)(v7 - 24) = 0;
      *(_OWORD *)(v7 - 24) = *(_OWORD *)(a3 - 24);
      *(_QWORD *)(v7 - 8) = *(_QWORD *)(a3 - 8);
      *(_QWORD *)(a3 - 24) = 0;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 8) = 0;
      v7 = *((_QWORD *)&v13 + 1) - 40;
      *((_QWORD *)&v13 + 1) -= 40;
      a3 -= 40;
    }
    while (a3 != a5);
    v8 = v13;
  }
  v11 = 1;
  sub_1002A7358((uint64_t)v10);
  return v8;
}

uint64_t sub_1002A7358(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_1002A738C(a1);
  return a1;
}

void sub_1002A738C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = *(void **)(v1 + 16);
    if (v3)
    {
      *(_QWORD *)(v1 + 24) = v3;
      operator delete(v3);
    }
    v1 += 40;
  }
}

uint64_t sub_1002A73D0(uint64_t a1)
{
  sub_1002A7404(a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_1002A7404(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v5;

  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != a2)
  {
    *(_QWORD *)(a1 + 16) = v2 - 40;
    v5 = *(void **)(v2 - 24);
    if (v5)
    {
      *(_QWORD *)(v2 - 16) = v5;
      operator delete(v5);
      v2 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v2 -= 40;
    }
  }
}

_QWORD *sub_1002A745C@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, (&off_100812440)[a1]);
}

_QWORD *sub_1002A7470@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, (&off_100812498)[a1]);
}

_QWORD *sub_1002A7484@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, (&off_1008124E0)[a1]);
}

_QWORD *sub_1002A7498@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, (&off_100812500)[a1]);
}

uint64_t sub_1002A74AC(uint64_t a1)
{
  sub_100184188(a1, *(_QWORD **)(a1 + 8));
  return a1;
}

void sub_1002A75C4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1002A75E0(uint64_t a1, int a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  NSObject *v10;
  NSObject *v11;
  void **v12;
  uint64_t v13;
  void *__p[2];
  char v16;
  uint8_t buf[4];
  void **v18;
  __int16 v19;
  uint64_t v20;

  v7 = a3;
  v8 = a4;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &off_100812260;
  *(_DWORD *)(a1 + 24) = a2;
  v9 = v7;
  *(_QWORD *)(a1 + 32) = v9;
  v10 = v8;
  *(_QWORD *)(a1 + 40) = v10;
  *(_QWORD *)(a1 + 56) = 0;
  dispatch_assert_queue_V2(v10);
  v11 = (id)qword_10085F520;
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    sub_1002A745C(*(_DWORD *)(a1 + 24), __p);
    if (v16 >= 0)
      v12 = __p;
    else
      v12 = (void **)__p[0];
    v13 = *(_QWORD *)(a1 + 32);
    *(_DWORD *)buf = 136315394;
    v18 = v12;
    v19 = 2112;
    v20 = v13;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#rlm,Created RangingLimitInputProvider for '%s' with sessionIdentifier %@", buf, 0x16u);
    if (v16 < 0)
      operator delete(__p[0]);
  }

  return a1;
}

void sub_1002A7730(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  std::__shared_weak_count *v7;

  v5 = v4;

  v7 = *(std::__shared_weak_count **)(v1 + 16);
  if (v7)
    std::__shared_weak_count::__release_weak(v7);

  _Unwind_Resume(a1);
}

uint64_t sub_1002A7780(uint64_t a1)
{
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 40));
  return 0;
}

uint64_t sub_1002A779C(uint64_t a1)
{
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 40));
  return 0;
}

void sub_1002A77B8(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  void **v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  void *__p[2];
  void (*v9)(uint64_t);
  void *v10;
  uint64_t *v11;
  int v12;
  uint8_t buf[4];
  void **v14;
  __int16 v15;
  uint64_t v16;

  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 40));
  if (*(_BYTE *)(a1 + 48))
  {
    v2 = (id)qword_10085F520;
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      sub_1002A745C(*(_DWORD *)(a1 + 24), __p);
      sub_1003E6518();
    }
  }
  else
  {
    *(_BYTE *)(a1 + 48) = 1;
    v3 = (id)qword_10085F520;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      sub_1002A745C(*(_DWORD *)(a1 + 24), __p);
      v4 = SHIBYTE(v9) >= 0 ? __p : (void **)__p[0];
      v5 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)buf = 136315394;
      v14 = v4;
      v15 = 2112;
      v16 = v5;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#rlm,indicateRangingStarted for '%s' with sessionIdentifier %@", buf, 0x16u);
      if (SHIBYTE(v9) < 0)
        operator delete(__p[0]);
    }

    sub_1002A798C();
    v6 = *(_DWORD *)(a1 + 24);
    __p[0] = _NSConcreteStackBlock;
    __p[1] = (void *)3221225472;
    v9 = sub_1002A9D28;
    v10 = &unk_100807908;
    v11 = &qword_10085B710;
    v12 = v6;
    dispatch_sync((dispatch_queue_t)qword_10085B710, __p);
    v7 = objc_claimAutoreleasedReturnValue(+[NSDate now](NSDate, "now"));
    v2 = *(NSObject **)(a1 + 56);
    *(_QWORD *)(a1 + 56) = v7;
  }

}

void sub_1002A7970(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t *sub_1002A798C()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_10085B7A8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_10085B7A8))
  {
    sub_1002A85AC((uint64_t)&qword_10085B710);
    __cxa_atexit((void (*)(void *))sub_1002A8FA4, &qword_10085B710, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10085B7A8);
  }
  return &qword_10085B710;
}

void sub_1002A7A04(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_10085B7A8);
  _Unwind_Resume(a1);
}

void sub_1002A7A1C(uint64_t a1)
{
  NSObject *v2;
  _BYTE *v3;
  uint64_t v4;
  int v5;
  void *v6;
  void *v7;
  void *v8;
  NSObject *v9;
  _BYTE *v10;
  uint64_t v11;
  _BYTE v12[12];
  __int16 v13;
  uint64_t v14;
  char v15;
  _BYTE __p[24];
  void *v17;
  uint64_t *v18;
  int v19;

  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 40));
  if (*(_BYTE *)(a1 + 48))
  {
    *(_BYTE *)(a1 + 48) = 0;
    v2 = (id)qword_10085F520;
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      sub_1002A745C(*(_DWORD *)(a1 + 24), __p);
      v3 = __p[23] >= 0 ? __p : *(_BYTE **)__p;
      v4 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)v12 = 136315394;
      *(_QWORD *)&v12[4] = v3;
      v13 = 2112;
      v14 = v4;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#rlm,indicateRangingStopped for '%s' with sessionIdentifier %@", v12, 0x16u);
      if ((__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
    }

    sub_1002A798C();
    v5 = *(_DWORD *)(a1 + 24);
    *(_QWORD *)__p = _NSConcreteStackBlock;
    *(_QWORD *)&__p[8] = 3221225472;
    *(_QWORD *)&__p[16] = sub_1002A9F4C;
    v17 = &unk_100807908;
    v18 = &qword_10085B710;
    v19 = v5;
    dispatch_sync((dispatch_queue_t)qword_10085B710, __p);
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate now](NSDate, "now"));
    objc_msgSend(v6, "timeIntervalSinceDate:", *(_QWORD *)(a1 + 56));
    v8 = v7;

    v9 = (id)qword_10085F520;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      sub_1002A745C(*(_DWORD *)(a1 + 24), v12);
      if (v15 >= 0)
        v10 = v12;
      else
        v10 = *(_BYTE **)v12;
      v11 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)__p = 136315650;
      *(_QWORD *)&__p[4] = v10;
      *(_WORD *)&__p[12] = 2112;
      *(_QWORD *)&__p[14] = v11;
      *(_WORD *)&__p[22] = 2048;
      v17 = v8;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#rlm,ranging complete [%s, %@] = %.1f secs", __p, 0x20u);
      if (v15 < 0)
        operator delete(*(void **)v12);
    }
  }
  else
  {
    v9 = (id)qword_10085F520;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      sub_1002A745C(*(_DWORD *)(a1 + 24), __p);
      sub_1003E655C();
    }
  }

}

void sub_1002A7C7C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002A7CA0(uint64_t a1)
{
  int v2;
  NSObject *v3;
  _BOOL4 v4;
  _QWORD v5[3];

  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 8));
  v2 = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(a1 + 16) = v2 + 1;
  v3 = (id)qword_10085F520;
  v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG);
  if (v2)
  {
    if (v4)
    {
      sub_1002A745C(*(_DWORD *)a1, v5);
      sub_1003E65E8();
    }

  }
  else
  {
    if (v4)
    {
      sub_1002A745C(*(_DWORD *)a1, v5);
      sub_1003E65A0();
    }

    *(double *)(a1 + 32) = sub_10000883C();
  }
}

void sub_1002A7D80(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

double sub_1002A7D9C(uint64_t a1)
{
  int v2;
  double v3;
  double v4;
  NSObject *v5;
  void **v6;
  uint64_t v7;
  NSObject *v9;
  NSObject *v10;
  void *__p[2];
  char v12;
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  _BYTE v16[18];

  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 8));
  v2 = *(_DWORD *)(a1 + 16);
  if (!v2)
  {
    v9 = (id)qword_10085F520;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_FAULT))
    {
      sub_1002A745C(*(_DWORD *)a1, __p);
      sub_1003E6630();
    }

    v10 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      v14 = "/Library/Caches/com.apple.xbs/Sources/Proximity/Daemon/Services/NearbyInteraction/RangingLimitManager/NIServ"
            "erRangingLimitManager.mm";
      v15 = 1024;
      *(_DWORD *)v16 = 334;
      *(_WORD *)&v16[4] = 2080;
      *(_QWORD *)&v16[6] = "indicateRangingStopped";
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "#rlm,%s:%d: assertion failure in %s", buf, 0x1Cu);
    }
    abort();
  }
  *(_DWORD *)(a1 + 16) = v2 - 1;
  v3 = sub_10000883C();
  v4 = v3 - *(double *)(a1 + 32);
  *(double *)(a1 + 24) = *(double *)(a1 + 24) + v4;
  *(double *)(a1 + 32) = v3;
  *(double *)(a1 + 40) = v3;
  v5 = (id)qword_10085F520;
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    sub_1002A745C(*(_DWORD *)a1, __p);
    if (v12 >= 0)
      v6 = __p;
    else
      v6 = (void **)__p[0];
    v7 = *(_QWORD *)(a1 + 24);
    *(_DWORD *)buf = 136315650;
    v14 = (const char *)v6;
    v15 = 2048;
    *(_QWORD *)v16 = v7;
    *(_WORD *)&v16[8] = 2048;
    *(double *)&v16[10] = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#rlm,RangingDurationTracker(%s): overall = %.0f secs, current_delta = %.0f secs", buf, 0x20u);
    if (v12 < 0)
      operator delete(__p[0]);
  }

  return v4;
}

void sub_1002A7F8C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002A7FA8(uint64_t a1)
{
  NSObject *v2;
  void **v3;
  uint64_t v4;
  double v5;
  void *__p[2];
  char v7;
  uint8_t buf[4];
  void **v9;
  __int16 v10;
  uint64_t v11;

  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 8));
  v2 = (id)qword_10085F520;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    sub_1002A745C(*(_DWORD *)a1, __p);
    v3 = v7 >= 0 ? __p : (void **)__p[0];
    v4 = *(_QWORD *)(a1 + 24);
    *(_DWORD *)buf = 136315394;
    v9 = v3;
    v10 = 2048;
    v11 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#rlm,RangingDurationTracker(%s): periodicReset: rangingDuration = %.0f -> 0 secs", buf, 0x16u);
    if (v7 < 0)
      operator delete(__p[0]);
  }

  if (*(_DWORD *)(a1 + 16))
    v5 = sub_10000883C();
  else
    v5 = 0.0;
  *(double *)(a1 + 32) = v5;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 40) = 0;
}

void sub_1002A80C0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1002A80D8(uint64_t a1, uint64_t a2, void *a3, double a4)
{
  id v7;
  id v8;
  void *v9;
  uint64_t v10;
  NSMutableString *v11;
  _BYTE *v12;
  void *v13;
  _QWORD *v14;
  _QWORD *v15;
  BOOL v16;
  _BYTE *v17;
  void *v18;
  _QWORD *v19;
  _QWORD *v20;
  void *v21;
  NSObject *v23;
  NSObject *v24;
  _BYTE __p[12];
  __int16 v26;
  int v27;
  __int16 v28;
  const char *v29;

  v7 = a3;
  sub_1002AA374((uint64_t *)a1, a2);
  v8 = v7;
  *(_QWORD *)(a1 + 24) = v8;
  *(_QWORD *)(a1 + 32) = 0;
  *(double *)(a1 + 40) = a4;
  if (!*(_QWORD *)(a2 + 16))
  {
    v23 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_FAULT))
      sub_1003E6678(v23);
    v24 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)__p = 136315650;
      *(_QWORD *)&__p[4] = "/Library/Caches/com.apple.xbs/Sources/Proximity/Daemon/Services/NearbyInteraction/RangingLimi"
                           "tManager/NIServerRangingLimitManager.mm";
      v26 = 1024;
      v27 = 396;
      v28 = 2080;
      v29 = "RangingBudgetTracker";
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_INFO, "#rlm,%s:%d: assertion failure in %s", __p, 0x1Cu);
    }
    abort();
  }
  v9 = v8;
  v10 = *(_QWORD *)a1;
  v11 = objc_opt_new(NSMutableString);
  sub_1002A745C(*(_DWORD *)(v10 + 28), __p);
  if (SBYTE3(v29) >= 0)
    v12 = __p;
  else
    v12 = *(_BYTE **)__p;
  v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v12));
  -[NSMutableString appendString:](v11, "appendString:", v13);

  if (SBYTE3(v29) < 0)
    operator delete(*(void **)__p);
  v14 = *(_QWORD **)(v10 + 8);
  if (v14)
  {
    do
    {
      v15 = v14;
      v14 = (_QWORD *)*v14;
    }
    while (v14);
  }
  else
  {
    do
    {
      v15 = *(_QWORD **)(v10 + 16);
      v16 = *v15 == v10;
      v10 = (uint64_t)v15;
    }
    while (!v16);
  }
  if (v15 != (_QWORD *)(a1 + 8))
  {
    do
    {
      sub_1002A745C(*((_DWORD *)v15 + 7), __p);
      if (SBYTE3(v29) >= 0)
        v17 = __p;
      else
        v17 = *(_BYTE **)__p;
      v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR(" | %s"), v17));
      -[NSMutableString appendString:](v11, "appendString:", v18);

      if (SBYTE3(v29) < 0)
        operator delete(*(void **)__p);
      v19 = (_QWORD *)v15[1];
      if (v19)
      {
        do
        {
          v20 = v19;
          v19 = (_QWORD *)*v19;
        }
        while (v19);
      }
      else
      {
        do
        {
          v20 = (_QWORD *)v15[2];
          v16 = *v20 == (_QWORD)v15;
          v15 = v20;
        }
        while (!v16);
      }
      v15 = v20;
    }
    while (v20 != (_QWORD *)(a1 + 8));
  }
  v21 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v11;

  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a1 + 40);
  return a1;
}

void sub_1002A8380(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;

  if (a16 < 0)
    operator delete(__p);

  sub_10003E3F0(v16, *(_QWORD **)(v16 + 8));
  _Unwind_Resume(a1);
}

void sub_1002A8404(uint64_t a1, double a2)
{
  double v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  __int16 v10;
  double v11;
  __int16 v12;
  uint64_t v13;

  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 24));
  v4 = *(double *)(a1 + 48);
  *(double *)(a1 + 48) = v4 - a2;
  v5 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    v6 = *(_QWORD *)(a1 + 32);
    v7 = *(_QWORD *)(a1 + 48);
    v8 = 138412802;
    v9 = v6;
    v10 = 2048;
    v11 = v4;
    v12 = 2048;
    v13 = v7;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#rlm,RangingBudgetTracker(%@): budget changed: %.0f -> %.0f secs", (uint8_t *)&v8, 0x20u);
  }
}

double sub_1002A84E0(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double result;
  int v7;
  uint64_t v8;
  __int16 v9;
  uint64_t v10;
  __int16 v11;
  uint64_t v12;

  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 24));
  v2 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(_QWORD *)(a1 + 40);
    v3 = *(_QWORD *)(a1 + 48);
    v5 = *(_QWORD *)(a1 + 32);
    v7 = 138412802;
    v8 = v5;
    v9 = 2048;
    v10 = v3;
    v11 = 2048;
    v12 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#rlm,RangingBudgetTracker(%@): periodicReset: budgetRemaining = %.0f -> %.0f secs", (uint8_t *)&v7, 0x20u);
  }
  result = *(double *)(a1 + 40);
  *(double *)(a1 + 48) = result;
  return result;
}

uint64_t sub_1002A85AC(uint64_t a1)
{
  uint64_t **v2;
  uint64_t **v3;
  dispatch_queue_attr_t v4;
  dispatch_queue_t v5;
  id v6;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  id v10;
  uint64_t **v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t **v15;
  uint64_t **v16;
  _QWORD *v17;
  _QWORD *v18;
  BOOL v19;
  uint64_t **v20;
  uint64_t **v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  _QWORD *v25;
  uint64_t **v26;
  uint64_t **v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  int v35;
  _QWORD *v36;
  uint64_t v37;
  int v38;
  BOOL v39;
  uint64_t *v40;
  _QWORD *v41;
  _QWORD *v42;
  RangingLimitSystemConfiguratorClient *v43;
  void *v44;
  void *v45;
  uint64_t v46;
  void *v47;
  NSObject *v49;
  NSObject *v50;
  NSObject *v51;
  _QWORD *v52;
  uint64_t **v53;
  uint64_t **v54;
  uint64_t **v55;
  _DWORD *v56;
  std::__shared_weak_count *v57;
  double v58;
  int v59;
  _BYTE buf[28];
  double v61;
  std::__shared_weak_count *v62;

  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 16) = a1 + 24;
  v55 = (uint64_t **)(a1 + 16);
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 40) = a1 + 48;
  v52 = (_QWORD *)(a1 + 48);
  v53 = (uint64_t **)(a1 + 40);
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 64) = a1 + 72;
  v54 = (uint64_t **)(a1 + 64);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 88) = a1 + 96;
  v2 = (uint64_t **)(a1 + 88);
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = a1 + 128;
  v3 = (uint64_t **)(a1 + 120);
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  v4 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_USER_INITIATED, 0);
  v51 = objc_claimAutoreleasedReturnValue(v4);
  v5 = dispatch_queue_create("com.apple.nearbyd.rangingLimitManager", v51);
  v6 = *(id *)a1;
  *(_QWORD *)a1 = v5;

  v7 = qword_10085B6F8;
  if ((_UNKNOWN *)qword_10085B6F8 != &unk_10085B700)
  {
    do
    {
      v8 = operator new(0x48uLL);
      v8[1] = 0;
      v8[2] = 0;
      *v8 = off_100812360;
      v9 = *(_DWORD *)(v7 + 32);
      v10 = *(id *)a1;
      *((_DWORD *)v8 + 6) = v9;
      v8[4] = v10;
      *((_DWORD *)v8 + 10) = 0;
      v8[7] = 0;
      v8[8] = 0;
      v8[6] = 0;
      *(_QWORD *)buf = v8 + 3;
      *(_QWORD *)&buf[8] = v8;
      v56 = (_DWORD *)(v7 + 32);
      v11 = sub_1002AA568(v55, (int *)(v7 + 32), (uint64_t)&unk_100472CF8, &v56);
      sub_1000145E8((uint64_t)(v11 + 5), (__int128 *)buf);
      v12 = *(std::__shared_weak_count **)&buf[8];
      if (*(_QWORD *)&buf[8])
      {
        v13 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v14 = __ldaxr(v13);
        while (__stlxr(v14 - 1, v13));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
      *(_QWORD *)buf = v7 + 32;
      *((_BYTE *)sub_100184664(v54, (int *)(v7 + 32), (uint64_t)&unk_100472CF8, (_DWORD **)buf) + 32) = 0;
      *(_QWORD *)buf = v7 + 32;
      *((_BYTE *)sub_100184664(v2, (int *)(v7 + 32), (uint64_t)&unk_100472CF8, (_DWORD **)buf) + 32) = 0;
      *(_QWORD *)buf = v7 + 32;
      v15 = sub_1002AA6DC(v3, (int *)(v7 + 32), (uint64_t)&unk_100472CF8, (_DWORD **)buf);
      v16 = v15;
      if (*((_BYTE *)v15 + 48))
      {

        *((_BYTE *)v16 + 48) = 0;
      }
      v17 = *(_QWORD **)(v7 + 8);
      if (v17)
      {
        do
        {
          v18 = v17;
          v17 = (_QWORD *)*v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          v18 = *(_QWORD **)(v7 + 16);
          v19 = *v18 == v7;
          v7 = (uint64_t)v18;
        }
        while (!v19);
      }
      v7 = (uint64_t)v18;
    }
    while (v18 != (_QWORD *)&unk_10085B700);
  }
  if (sub_1002F7290(CFSTR("DigitalKeyCombinedRangingBudgetEnabled"), (id)1))
  {
    *(_QWORD *)&buf[8] = 0;
    *(_QWORD *)&buf[16] = 0;
    *(_QWORD *)buf = &buf[8];
    LODWORD(v56) = 8;
    sub_1002AA7A0((uint64_t **)buf, (int *)&v56, &v56);
    LODWORD(v56) = 5;
    sub_1002AA7A0((uint64_t **)buf, (int *)&v56, &v56);
    v61 = sub_1002F73E4(CFSTR("DigitalKeyRangingBudgetSeconds"), 86400.0);
    sub_1002AA858((uint64_t)buf, &v61, (void **)a1, &v56);
    LODWORD(v58) = 8;
    v61 = COERCE_DOUBLE(&v58);
    v20 = sub_1002AA568(v53, (int *)&v58, (uint64_t)&unk_100472CF8, (_DWORD **)&v61);
    sub_100021C24(v20 + 5, (uint64_t *)&v56);
    LODWORD(v58) = 5;
    v61 = COERCE_DOUBLE(&v58);
    v21 = sub_1002AA568(v53, (int *)&v58, (uint64_t)&unk_100472CF8, (_DWORD **)&v61);
    sub_100021C24(v21 + 5, (uint64_t *)&v56);
    v22 = v57;
    if (v57)
    {
      p_shared_owners = (unint64_t *)&v57->__shared_owners_;
      do
        v24 = __ldaxr(p_shared_owners);
      while (__stlxr(v24 - 1, p_shared_owners));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    sub_10003E3F0((uint64_t)buf, *(_QWORD **)&buf[8]);
    goto LABEL_22;
  }
  LODWORD(v58) = 5;
  sub_1002AAA40((uint64_t)buf, (int *)&v58, 1);
  v61 = sub_1002F73E4(CFSTR("AlishaRangingBudgetSeconds"), 86400.0);
  sub_1002AAABC(buf, &v61, (void **)a1, &v56);
  sub_10003E3F0((uint64_t)buf, *(_QWORD **)&buf[8]);
  LODWORD(v61) = 5;
  *(_QWORD *)buf = &v61;
  v26 = sub_1002AA568(v53, (int *)&v61, (uint64_t)&unk_100472CF8, (_DWORD **)buf);
  sub_100021C24(v26 + 5, (uint64_t *)&v56);
  v59 = 8;
  sub_1002AAA40((uint64_t)buf, &v59, 1);
  v58 = sub_1002F73E4(CFSTR("LyonRangingBudgetSeconds"), 86400.0);
  sub_1002AAABC(buf, &v58, (void **)a1, &v61);
  sub_10003E3F0((uint64_t)buf, *(_QWORD **)&buf[8]);
  LODWORD(v58) = 8;
  *(_QWORD *)buf = &v58;
  v27 = sub_1002AA568(v53, (int *)&v58, (uint64_t)&unk_100472CF8, (_DWORD **)buf);
  sub_100021C24(v27 + 5, (uint64_t *)&v61);
  v28 = v62;
  v25 = v52;
  if (v62)
  {
    v29 = (unint64_t *)&v62->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
      v25 = v52;
    }
  }
  v31 = v57;
  if (v57)
  {
    v32 = (unint64_t *)&v57->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
LABEL_22:
      v25 = v52;
    }
  }
  v34 = qword_10085B6F8;
  if ((_UNKNOWN *)qword_10085B6F8 != &unk_10085B700)
  {
    do
    {
      if (!*v25)
        goto LABEL_50;
      v35 = *(_DWORD *)(v34 + 32);
      v36 = v25;
      v37 = *v25;
      do
      {
        v38 = *(_DWORD *)(v37 + 32);
        v39 = v38 < v35;
        if (v38 >= v35)
          v40 = (uint64_t *)v37;
        else
          v40 = (uint64_t *)(v37 + 8);
        if (!v39)
          v36 = (_QWORD *)v37;
        v37 = *v40;
      }
      while (*v40);
      if (v36 == v25 || v35 < *((_DWORD *)v36 + 8))
      {
LABEL_50:
        v49 = (id)qword_10085F520;
        if (os_log_type_enabled(v49, OS_LOG_TYPE_FAULT))
        {
          sub_1002A745C(*(_DWORD *)(v34 + 32), &v56);
          sub_1003E66B8();
        }

        v50 = qword_10085F520;
        if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/Proximity/Daemon/Services/NearbyInteraction/Ranging"
                               "LimitManager/NIServerRangingLimitManager.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 506;
          *(_WORD *)&buf[18] = 2080;
          *(_QWORD *)&buf[20] = "RangingLimitManager";
          _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_INFO, "#rlm,%s:%d: assertion failure in %s", buf, 0x1Cu);
        }
        abort();
      }
      v41 = *(_QWORD **)(v34 + 8);
      if (v41)
      {
        do
        {
          v42 = v41;
          v41 = (_QWORD *)*v41;
        }
        while (v41);
      }
      else
      {
        do
        {
          v42 = *(_QWORD **)(v34 + 16);
          v19 = *v42 == v34;
          v34 = (uint64_t)v42;
        }
        while (!v19);
      }
      v34 = (uint64_t)v42;
    }
    while (v42 != (_QWORD *)&unk_10085B700);
  }
  sub_1002A8E08(a1);
  v43 = objc_opt_new(RangingLimitSystemConfiguratorClient);
  v44 = *(void **)(a1 + 144);
  *(_QWORD *)(a1 + 144) = v43;

  v45 = (void *)objc_claimAutoreleasedReturnValue(+[NIServerSystemConfigurator sharedInstance](NIServerSystemConfigurator, "sharedInstance"));
  objc_msgSend(v45, "addClient:identifier:", *(_QWORD *)(a1 + 144), CFSTR("RangingLimitManager"));

  v46 = objc_claimAutoreleasedReturnValue(+[NSDate now](NSDate, "now"));
  v47 = *(void **)(a1 + 112);
  *(_QWORD *)(a1 + 112) = v46;

  return a1;
}

void sub_1002A8CE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;

  sub_1002AA518(v16, *(_QWORD **)(v14 + 128));
  sub_10003E3F0(v15, *(_QWORD **)(v14 + 96));
  sub_10003E3F0(a13, *(_QWORD **)(v14 + 72));
  sub_1002AA4D0(a12, *(_QWORD **)(v14 + 48));
  sub_1002AA4D0(a14, *(_QWORD **)(v14 + 24));

  _Unwind_Resume(a1);
}

id sub_1002A8E08(uint64_t a1)
{
  id v2;
  void *v3;

  v2 = objc_msgSend(objc_alloc((Class)NSBackgroundActivityScheduler), "initWithIdentifier:", CFSTR("com.apple.nearbyd.rangingBudget.xpcActivity"));
  v3 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v2;

  objc_msgSend(*(id *)(a1 + 8), "invalidate");
  objc_msgSend(*(id *)(a1 + 8), "setQualityOfService:", 17);
  objc_msgSend(*(id *)(a1 + 8), "setInterval:", sub_1002F73E4(CFSTR("DigitalKeyRangingDurationResetPeriodSeconds"), 86400.0));
  objc_msgSend(*(id *)(a1 + 8), "setTolerance:", sub_1002F73E4(CFSTR("DigitalKeyRangingDurationResetPeriodToleranceSeconds"), 300.0));
  objc_msgSend(*(id *)(a1 + 8), "setRepeats:", 1);
  return objc_msgSend(*(id *)(a1 + 8), "scheduleWithBlock:", &stru_1008122B0);
}

uint64_t sub_1002A8EAC(uint64_t a1)
{
  NSObject *v2;
  void *v3;
  uint8_t v5[16];

  v2 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#rlm,~RangingLimitManager()", v5, 2u);
  }
  objc_msgSend(*(id *)(a1 + 8), "invalidate");
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NIServerSystemConfigurator sharedInstance](NIServerSystemConfigurator, "sharedInstance"));
  objc_msgSend(v3, "removeClientWithIdentifier:", CFSTR("RangingLimitManager"));

  sub_1002AA518(a1 + 120, *(_QWORD **)(a1 + 128));
  sub_10003E3F0(a1 + 88, *(_QWORD **)(a1 + 96));
  sub_10003E3F0(a1 + 64, *(_QWORD **)(a1 + 72));
  sub_1002AA4D0(a1 + 40, *(_QWORD **)(a1 + 48));
  sub_1002AA4D0(a1 + 16, *(_QWORD **)(a1 + 24));

  return a1;
}

void sub_1002A8FA8(id a1, id a2)
{
  id v2;
  NSObject *v3;
  id v4;
  _QWORD block[4];
  id v6;

  v2 = a2;
  sub_1002A798C();
  v3 = qword_10085B710;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1002A903C;
  block[3] = &unk_10080AC38;
  v6 = v2;
  v4 = v2;
  dispatch_async(v3, block);

}

void sub_1002A902C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1002A903C(uint64_t a1)
{
  sub_1002A798C();
  sub_1002A9074((uint64_t)&qword_10085B710);
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1002A9074(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t **v4;
  uint64_t **v5;
  uint64_t **v6;
  uint64_t **v7;
  _QWORD *v8;
  _QWORD *v9;
  BOOL v10;
  uint64_t v11;
  void *v12;
  uint8_t buf[16];

  dispatch_assert_queue_V2(*(dispatch_queue_t *)a1);
  sub_1002A951C(a1);
  v2 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#rlm,Periodic Reset Handler: reset ranging budgets", buf, 2u);
  }
  v3 = qword_10085B6F8;
  if ((_UNKNOWN *)qword_10085B6F8 != &unk_10085B700)
  {
    do
    {
      *(_QWORD *)buf = v3 + 32;
      v4 = sub_1002AA568((uint64_t **)(a1 + 16), (int *)(v3 + 32), (uint64_t)&unk_100472CF8, (_DWORD **)buf);
      sub_1002A7FA8((uint64_t)v4[5]);
      *(_QWORD *)buf = v3 + 32;
      v5 = sub_1002AA568((uint64_t **)(a1 + 40), (int *)(v3 + 32), (uint64_t)&unk_100472CF8, (_DWORD **)buf);
      sub_1002A84E0((uint64_t)v5[5]);
      *(_QWORD *)buf = v3 + 32;
      *((_BYTE *)sub_100184664((uint64_t **)(a1 + 64), (int *)(v3 + 32), (uint64_t)&unk_100472CF8, (_DWORD **)buf) + 32) = 0;
      *(_QWORD *)buf = v3 + 32;
      v6 = sub_1002AA6DC((uint64_t **)(a1 + 120), (int *)(v3 + 32), (uint64_t)&unk_100472CF8, (_DWORD **)buf);
      if (*((_BYTE *)v6 + 48))
      {
        v7 = v6;

        *((_BYTE *)v7 + 48) = 0;
      }
      v8 = *(_QWORD **)(v3 + 8);
      if (v8)
      {
        do
        {
          v9 = v8;
          v8 = (_QWORD *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          v9 = *(_QWORD **)(v3 + 16);
          v10 = *v9 == v3;
          v3 = (uint64_t)v9;
        }
        while (!v10);
      }
      v3 = (uint64_t)v9;
    }
    while (v9 != (_QWORD *)&unk_10085B700);
  }
  sub_1002A9998((dispatch_queue_t *)a1);
  v11 = objc_claimAutoreleasedReturnValue(+[NSDate now](NSDate, "now"));
  v12 = *(void **)(a1 + 112);
  *(_QWORD *)(a1 + 112) = v11;

}

void sub_1002A923C(int a1@<W1>, void *a2@<X2>, void *a3@<X3>, _OWORD *a4@<X8>)
{
  __int128 v6;
  NSObject *v7;
  id v8;
  int v9;

  v9 = a1;
  v8 = a2;
  v7 = a3;
  dispatch_assert_queue_V2(v7);
  sub_1002AAC20(&v9, &v8, (void **)&v7, &v6);
  *a4 = v6;

}

void sub_1002A92B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13)
{

  _Unwind_Resume(a1);
}

uint64_t sub_1002A92D4(NSObject **a1, int a2)
{
  NSObject *v2;
  uint64_t v3;
  _QWORD block[6];
  int v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  char v10;

  v7 = 0;
  v8 = &v7;
  v9 = 0x2020000000;
  v10 = 0;
  v2 = *a1;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1002A9368;
  block[3] = &unk_10080E7D8;
  v6 = a2;
  block[4] = &v7;
  block[5] = a1;
  dispatch_sync(v2, block);
  v3 = *((unsigned __int8 *)v8 + 24);
  _Block_object_dispose(&v7, 8);
  return v3;
}

uint64_t sub_1002A9368(uint64_t a1)
{
  int *v2;
  uint64_t result;
  NSObject *v4;
  NSObject *v5;
  _QWORD v6[3];
  uint8_t buf[4];
  const char *v8;
  __int16 v9;
  int v10;
  __int16 v11;
  const char *v12;

  v2 = (int *)(a1 + 48);
  result = sub_1002A94C0(*(_QWORD *)(a1 + 40) + 64, (int *)(a1 + 48));
  if ((unsigned __int16)result <= 0xFFu)
  {
    v4 = (id)qword_10085F520;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
    {
      sub_1002A745C(*v2, v6);
      sub_1003E6700();
    }

    v5 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      v8 = "/Library/Caches/com.apple.xbs/Sources/Proximity/Daemon/Services/NearbyInteraction/RangingLimitManager/NIServe"
           "rRangingLimitManager.mm";
      v9 = 1024;
      v10 = 580;
      v11 = 2080;
      v12 = "limitExceeded_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "#rlm,%s:%d: assertion failure in %s", buf, 0x1Cu);
    }
    abort();
  }
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void sub_1002A94A8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1002A94C0(uint64_t a1, int *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  int v10;
  int v11;

  v4 = *(_QWORD *)(a1 + 8);
  v2 = a1 + 8;
  v3 = v4;
  if (!v4)
    goto LABEL_11;
  v5 = *a2;
  v6 = v2;
  do
  {
    v7 = *(_DWORD *)(v3 + 28);
    v8 = v7 < v5;
    if (v7 >= v5)
      v9 = (uint64_t *)v3;
    else
      v9 = (uint64_t *)(v3 + 8);
    if (!v8)
      v6 = v3;
    v3 = *v9;
  }
  while (*v9);
  if (v6 != v2 && v5 >= *(_DWORD *)(v6 + 28))
  {
    v10 = *(unsigned __int8 *)(v6 + 32);
    v11 = 1;
  }
  else
  {
LABEL_11:
    v10 = 0;
    v11 = 0;
  }
  return v10 | (v11 << 8);
}

void sub_1002A951C(uint64_t a1)
{
  NSObject *v2;
  uint64_t *v3;
  void *v4;
  uint64_t **v5;
  int v6;
  uint64_t *v7;
  void *v8;
  uint64_t *v9;
  id v10;
  double v11;
  _UNKNOWN **v12;
  uint64_t *v13;
  void *v14;
  void *v15;
  _UNKNOWN **v16;
  NSObject *v17;
  void **v18;
  id v19;
  _UNKNOWN **v20;
  _UNKNOWN **v21;
  _QWORD v22[4];
  id v23;
  id v24;
  id v25;
  void *__p[2];
  char v27;
  _BYTE buf[12];
  __int16 v29;
  void *v30;
  __int16 v31;
  _UNKNOWN **v32;
  __int16 v33;
  _UNKNOWN **v34;

  dispatch_assert_queue_V2(*(dispatch_queue_t *)a1);
  v2 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#rlm,Periodic Reset Handler: sending analytics", buf, 2u);
  }
  LODWORD(__p[0]) = 8;
  *(_QWORD *)buf = __p;
  v3 = sub_1002AA568((uint64_t **)(a1 + 40), (int *)__p, (uint64_t)&unk_100472CF8, (_DWORD **)buf)[5];
  dispatch_assert_queue_V2((dispatch_queue_t)v3[3]);
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", (*((double *)v3 + 5) - *((double *)v3 + 6)) / 60.0));
  LODWORD(__p[0]) = 8;
  *(_QWORD *)buf = __p;
  v5 = sub_1002AA6DC((uint64_t **)(a1 + 120), (int *)__p, (uint64_t)&unk_100472CF8, (_DWORD **)buf);
  v6 = *((unsigned __int8 *)v5 + 48);
  if (*((_BYTE *)v5 + 48))
  {
    v7 = v5[5];
    v8 = *(void **)(a1 + 112);
    v9 = v7;
    v10 = v8;
    objc_msgSend(v9, "timeIntervalSinceDate:", v10);
    v12 = (_UNKNOWN **)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v11 / 3600.0));

    v13 = v9;
    v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSCalendar currentCalendar](NSCalendar, "currentCalendar"));
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "components:fromDate:", 32, v13));
    v16 = (_UNKNOWN **)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", objc_msgSend(v15, "hour")));

  }
  else
  {
    v13 = 0;
    v16 = &off_10082C100;
    v12 = &off_10082C118;
  }
  v17 = (id)qword_10085F520;
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    sub_10000BF04(__p, "HomeKey");
    v18 = v27 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136315906;
    *(_QWORD *)&buf[4] = v18;
    v29 = 2112;
    v30 = v4;
    v31 = 2112;
    v32 = v16;
    v33 = 2112;
    v34 = v12;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "#rlm,budget reset [%s]: spent = %@ mins, exhausted_hour = %@, hours_to_exhaust = %@", buf, 0x2Au);
    if (v27 < 0)
      operator delete(__p[0]);
  }

  v22[0] = _NSConcreteStackBlock;
  v22[1] = 3221225472;
  v22[2] = sub_1002A9908;
  v22[3] = &unk_1008122D8;
  v19 = v4;
  v23 = v19;
  v20 = v16;
  v24 = v20;
  v21 = v12;
  v25 = v21;
  AnalyticsSendEventLazy(CFSTR("com.apple.lyon.BudgetReset"), v22);

  if (v6)
}

void sub_1002A9864(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  int v6;

  if (v6)
  _Unwind_Resume(a1);
}

id sub_1002A9908(uint64_t a1)
{
  __int128 v1;
  _QWORD v3[3];
  __int128 v4;
  uint64_t v5;

  v1 = *(_OWORD *)(a1 + 32);
  v3[0] = CFSTR("budgetSpentMins");
  v3[1] = CFSTR("exhaustedLocalHour");
  v4 = v1;
  v3[2] = CFSTR("hoursTookToExhaustBudget");
  v5 = *(_QWORD *)(a1 + 48);
  return (id)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v4, v3, 3));
}

void sub_1002A9998(dispatch_queue_t *a1)
{
  uint64_t v2;
  uint64_t **v3;
  uint64_t **v4;
  uint64_t **v5;
  uint64_t *v6;
  int v7;
  NSObject *v8;
  int v9;
  void **v10;
  uint64_t **v11;
  void **v12;
  BOOL v13;
  const __CFString *v14;
  int v15;
  void *v16;
  char v17;
  uint64_t v18;
  uint64_t **v19;
  uint64_t *v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t **v23;
  void *__p[2];
  char v25;
  _DWORD *v26;
  uint8_t buf[4];
  void **v28;
  __int16 v29;
  const __CFString *v30;

  dispatch_assert_queue_V2(*a1);
  v2 = qword_10085B6F8;
  if ((_UNKNOWN *)qword_10085B6F8 != &unk_10085B700)
  {
    v3 = (uint64_t **)(a1 + 5);
    v4 = (uint64_t **)(a1 + 8);
    v5 = (uint64_t **)(a1 + 11);
    v23 = (uint64_t **)(a1 + 15);
    do
    {
      __p[0] = (void *)(v2 + 32);
      v6 = sub_1002AA568(v3, (int *)(v2 + 32), (uint64_t)&unk_100472CF8, (_DWORD **)__p)[5];
      dispatch_assert_queue_V2((dispatch_queue_t)v6[3]);
      LOBYTE(v6) = *((double *)v6 + 6) <= 0.0;
      __p[0] = (void *)(v2 + 32);
      *((_BYTE *)sub_100184664(v4, (int *)(v2 + 32), (uint64_t)&unk_100472CF8, (_DWORD **)__p) + 32) = (_BYTE)v6;
      __p[0] = (void *)(v2 + 32);
      v7 = *((unsigned __int8 *)sub_100184664(v4, (int *)(v2 + 32), (uint64_t)&unk_100472CF8, (_DWORD **)__p) + 32);
      __p[0] = (void *)(v2 + 32);
      if (v7 != *((unsigned __int8 *)sub_100184664(v5, (int *)(v2 + 32), (uint64_t)&unk_100472CF8, (_DWORD **)__p) + 32))
      {
        v8 = (id)qword_10085F520;
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        {
          sub_1002A745C(*(_DWORD *)(v2 + 32), __p);
          v9 = v25;
          v10 = (void **)__p[0];
          v26 = (_DWORD *)(v2 + 32);
          v11 = sub_100184664(v4, (int *)(v2 + 32), (uint64_t)&unk_100472CF8, &v26);
          v12 = __p;
          if (v9 < 0)
            v12 = v10;
          v13 = *((_BYTE *)v11 + 32) == 0;
          *(_DWORD *)buf = 136315394;
          v14 = CFSTR("Limit Exceeded");
          if (v13)
            v14 = CFSTR("Limit Available");
          v28 = v12;
          v29 = 2112;
          v30 = v14;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#rlm,Ranging limit reached status changed for '%s': %@", buf, 0x16u);
          if (v25 < 0)
            operator delete(__p[0]);
        }

        __p[0] = (void *)(v2 + 32);
        v15 = *((unsigned __int8 *)sub_100184664(v4, (int *)(v2 + 32), (uint64_t)&unk_100472CF8, (_DWORD **)__p) + 32);
        v16 = (void *)objc_claimAutoreleasedReturnValue(+[NIServerSystemConfigurator sharedInstance](NIServerSystemConfigurator, "sharedInstance"));
        objc_msgSend(v16, "clientWithIdentifier:notifiedResourceUsageLimitExceeded:forSessionConfigurationType:", CFSTR("RangingLimitManager"), v15 != 0, NSClassFromString(*(NSString **)(v2 + 40)));

        __p[0] = (void *)(v2 + 32);
        v17 = *((_BYTE *)sub_100184664(v4, (int *)(v2 + 32), (uint64_t)&unk_100472CF8, (_DWORD **)__p) + 32);
        __p[0] = (void *)(v2 + 32);
        *((_BYTE *)sub_100184664(v5, (int *)(v2 + 32), (uint64_t)&unk_100472CF8, (_DWORD **)__p) + 32) = v17;
        if (v15)
        {
          v18 = objc_claimAutoreleasedReturnValue(+[NSDate now](NSDate, "now"));
          __p[0] = (void *)(v2 + 32);
          v19 = sub_1002AA6DC(v23, (int *)(v2 + 32), (uint64_t)&unk_100472CF8, (_DWORD **)__p);
          if (*((_BYTE *)v19 + 48))
          {
            v20 = v19[5];
            v19[5] = (uint64_t *)v18;

          }
          else
          {
            v19[5] = (uint64_t *)v18;
            *((_BYTE *)v19 + 48) = 1;
          }
        }
      }
      v21 = *(_QWORD **)(v2 + 8);
      if (v21)
      {
        do
        {
          v22 = v21;
          v21 = (_QWORD *)*v21;
        }
        while (v21);
      }
      else
      {
        do
        {
          v22 = *(_QWORD **)(v2 + 16);
          v13 = *v22 == v2;
          v2 = (uint64_t)v22;
        }
        while (!v13);
      }
      v2 = (uint64_t)v22;
    }
    while (v22 != (_QWORD *)&unk_10085B700);
  }
}

void sub_1002A9CF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;

  if (a17 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1002A9D28(uint64_t a1)
{
  int *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  NSObject *v5;
  NSObject *v6;
  _QWORD v7[3];
  uint64_t v8;
  std::__shared_weak_count *v9;
  char v10;
  uint8_t buf[4];
  const char *v12;
  __int16 v13;
  int v14;
  __int16 v15;
  const char *v16;

  v1 = (int *)(a1 + 40);
  sub_1002A9ED4(*(_QWORD *)(a1 + 32) + 16, (int *)(a1 + 40), (uint64_t)&v8);
  if (!v10)
  {
    v5 = (id)qword_10085F520;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_FAULT))
    {
      sub_1002A745C(*v1, v7);
      sub_1003E6700();
    }

    v6 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      v12 = "/Library/Caches/com.apple.xbs/Sources/Proximity/Daemon/Services/NearbyInteraction/RangingLimitManager/NIServ"
            "erRangingLimitManager.mm";
      v13 = 1024;
      v14 = 675;
      v15 = 2080;
      v16 = "indicateRangingStarted_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "#rlm,%s:%d: assertion failure in %s", buf, 0x1Cu);
    }
    abort();
  }
  sub_1002A7CA0(v8);
  if (v10)
  {
    v2 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
  }
}

void sub_1002A9EA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, char a14)
{
  void *v14;

  if (a14)
    sub_10001AE68((uint64_t)&a12);
  _Unwind_Resume(a1);
}

uint64_t sub_1002A9ED4@<X0>(uint64_t a1@<X0>, int *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  uint64_t *v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;

  v5 = *(_QWORD *)(a1 + 8);
  result = a1 + 8;
  v4 = v5;
  if (!v5)
    goto LABEL_11;
  v6 = *a2;
  v7 = result;
  do
  {
    v8 = *(_DWORD *)(v4 + 32);
    v9 = v8 < v6;
    if (v8 >= v6)
      v10 = (uint64_t *)v4;
    else
      v10 = (uint64_t *)(v4 + 8);
    if (!v9)
      v7 = v4;
    v4 = *v10;
  }
  while (*v10);
  if (v7 != result && v6 >= *(_DWORD *)(v7 + 32))
  {
    v13 = *(_QWORD *)(v7 + 40);
    v12 = *(_QWORD *)(v7 + 48);
    *(_QWORD *)a3 = v13;
    *(_QWORD *)(a3 + 8) = v12;
    if (v12)
    {
      v14 = (unint64_t *)(v12 + 8);
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    v11 = 1;
  }
  else
  {
LABEL_11:
    v11 = 0;
    *(_BYTE *)a3 = 0;
  }
  *(_BYTE *)(a3 + 16) = v11;
  return result;
}

void sub_1002A9F4C(uint64_t a1)
{
  dispatch_queue_t *v1;
  int *v2;
  double v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  NSObject *v10;
  NSObject *v11;
  NSObject *v12;
  NSObject *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  char v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  char v19;
  _QWORD v20[4];
  uint8_t buf[4];
  const char *v22;
  __int16 v23;
  int v24;
  __int16 v25;
  const char *v26;

  v1 = *(dispatch_queue_t **)(a1 + 32);
  v2 = (int *)(a1 + 40);
  sub_1002A9ED4((uint64_t)(v1 + 2), (int *)(a1 + 40), (uint64_t)&v17);
  if (!v19)
  {
    v10 = (id)qword_10085F520;
    if (os_log_type_enabled(v10, OS_LOG_TYPE_FAULT))
    {
      sub_1002A745C(*v2, &v14);
      sub_1003E6700();
    }

    v11 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      v22 = "/Library/Caches/com.apple.xbs/Sources/Proximity/Daemon/Services/NearbyInteraction/RangingLimitManager/NIServ"
            "erRangingLimitManager.mm";
      v23 = 1024;
      v24 = 686;
      v25 = 2080;
      v26 = "indicateRangingStopped_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "#rlm,%s:%d: assertion failure in %s", buf, 0x1Cu);
    }
    abort();
  }
  sub_1002A9ED4((uint64_t)(v1 + 5), v2, (uint64_t)&v14);
  if (!v16)
  {
    v12 = (id)qword_10085F520;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_FAULT))
    {
      sub_1002A745C(*v2, v20);
      sub_1003E6700();
    }

    v13 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      v22 = "/Library/Caches/com.apple.xbs/Sources/Proximity/Daemon/Services/NearbyInteraction/RangingLimitManager/NIServ"
            "erRangingLimitManager.mm";
      v23 = 1024;
      v24 = 690;
      v25 = 2080;
      v26 = "indicateRangingStopped_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "#rlm,%s:%d: assertion failure in %s", buf, 0x1Cu);
    }
    abort();
  }
  if (!v19 || (v3 = sub_1002A7D9C(v17), !v16))
    sub_10000BA44();
  sub_1002A8404(v14, v3);
  sub_1002A9998(v1);
  if (v16)
  {
    v4 = v15;
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  if (v19)
  {
    v7 = v18;
    if (v18)
    {
      v8 = (unint64_t *)&v18->__shared_owners_;
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1002AA204(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char a17)
{
  if (a17)
    sub_10001AE68((uint64_t)&a13);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002AA260(uint64_t a1)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_1002AA2A4(uint64_t a1)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete();
}

uint64_t sub_1002AA2F8(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a3)
  {
    v6 = 16 * a3;
    do
    {
      sub_10023278C((uint64_t **)a1, v4, a2, (uint64_t)a2);
      a2 += 4;
      v6 -= 16;
    }
    while (v6);
  }
  return a1;
}

void sub_1002AA35C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100184188(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_1002AA374(uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_1002AA3C8(a1, *(int **)a2, (int *)(a2 + 8));
  return a1;
}

void sub_1002AA3B0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10003E3F0(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_1002AA3C8(uint64_t *result, int *a2, int *a3)
{
  int *v4;
  uint64_t **v5;
  uint64_t *v6;
  int *v7;
  int *v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = sub_1002AA44C(v5, v6, v4 + 7, v4 + 7);
      v7 = (int *)*((_QWORD *)v4 + 1);
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = *(int **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (int *)*((_QWORD *)v4 + 2);
          v9 = *(_QWORD *)v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *sub_1002AA44C(uint64_t **a1, uint64_t *a2, int *a3, _DWORD *a4)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t v10;
  uint64_t *v11;

  v6 = sub_100182384(a1, a2, &v11, &v10, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = (uint64_t *)operator new(0x20uLL);
    *((_DWORD *)v7 + 7) = *a4;
    sub_1000272A8(a1, (uint64_t)v11, v8, v7);
  }
  return v7;
}

void sub_1002AA4D0(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_1002AA4D0(a1, *a2);
    sub_1002AA4D0(a1, a2[1]);
    sub_10001AE68((uint64_t)(a2 + 5));
    operator delete(a2);
  }
}

void sub_1002AA518(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_1002AA518(a1, *a2);
    sub_1002AA518(a1, a2[1]);
    if (*((_BYTE *)a2 + 48))

    operator delete(a2);
  }
}

uint64_t **sub_1002AA568(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  uint64_t **v8;
  uint64_t **v9;
  int v10;
  int v11;
  _DWORD *v12;
  _QWORD v14[2];
  char v15;

  v7 = a1 + 1;
  v6 = a1[1];
  v8 = a1 + 1;
  v9 = a1 + 1;
  if (v6)
  {
    v10 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v11 = *((_DWORD *)v6 + 8);
        if (v10 >= v11)
          break;
        v6 = *v9;
        v8 = v9;
        if (!*v9)
          goto LABEL_9;
      }
      if (v11 >= v10)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v8 = v9 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:
    v12 = operator new(0x38uLL);
    v14[1] = v7;
    v12[8] = **a4;
    *((_QWORD *)v12 + 5) = 0;
    *((_QWORD *)v12 + 6) = 0;
    v15 = 1;
    sub_1000272A8(a1, (uint64_t)v9, v8, (uint64_t *)v12);
    v14[0] = 0;
    sub_1002AA64C((uint64_t)v14, 0);
    return (uint64_t **)v12;
  }
  return v9;
}

void sub_1002AA64C(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_10001AE68((uint64_t)v2 + 40);
    operator delete(v2);
  }
}

void sub_1002AA690(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_100812360;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1002AA6A0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_100812360;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

void sub_1002AA6D0(uint64_t a1)
{

}

uint64_t **sub_1002AA6DC(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  int v8;
  uint64_t **v9;
  int v10;
  _DWORD *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = operator new(0x38uLL);
    v11[8] = **a4;
    *((_BYTE *)v11 + 40) = 0;
    *((_BYTE *)v11 + 48) = 0;
    sub_1000272A8(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

uint64_t **sub_1002AA7A0(uint64_t **a1, int *a2, _DWORD *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  int v7;
  uint64_t **v8;
  int v9;
  uint64_t *v10;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = *((_DWORD *)v5 + 7);
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_10:
    v10 = (uint64_t *)operator new(0x20uLL);
    *((_DWORD *)v10 + 7) = *a3;
    sub_1000272A8(a1, (uint64_t)v8, v6, v10);
    return (uint64_t **)v10;
  }
  return v8;
}

_QWORD *sub_1002AA858@<X0>(uint64_t a1@<X1>, double *a2@<X2>, void **a3@<X3>, _QWORD *a4@<X8>)
{
  _QWORD *v8;
  _QWORD *result;

  v8 = operator new(0x50uLL);
  result = sub_1002AA8C8(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  return result;
}

void sub_1002AA8B4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1002AA8C8(_QWORD *a1, uint64_t a2, double *a3, void **a4)
{
  char v6;

  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1008123B0;
  sub_1002AA994((uint64_t)&v6, (uint64_t)(a1 + 3), a2, a3, a4);
  return a1;
}

void sub_1002AA918(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1002AA92C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1008123B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1002AA93C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1008123B0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

void sub_1002AA96C(uint64_t a1)
{
  char v1;

  sub_1002AAA0C((uint64_t)&v1, a1 + 24);
}

void sub_1002AA994(uint64_t a1, uint64_t a2, uint64_t a3, double *a4, void **a5)
{
  uint64_t v8[3];

  sub_1002AA374(v8, a3);
  sub_1002A80D8(a2, (uint64_t)v8, *a5, *a4);
  sub_10003E3F0((uint64_t)v8, (_QWORD *)v8[1]);
}

void sub_1002AA9F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11)
{
  sub_10003E3F0((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

void sub_1002AAA0C(uint64_t a1, uint64_t a2)
{

  sub_10003E3F0(a2, *(_QWORD **)(a2 + 8));
}

uint64_t sub_1002AAA40(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a3)
  {
    v6 = 4 * a3;
    do
    {
      sub_1002AA44C((uint64_t **)a1, v4, a2, a2);
      ++a2;
      v6 -= 4;
    }
    while (v6);
  }
  return a1;
}

void sub_1002AAAA4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10003E3F0(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

_QWORD *sub_1002AAABC@<X0>(_QWORD *a1@<X1>, double *a2@<X2>, void **a3@<X3>, _QWORD *a4@<X8>)
{
  _QWORD *v8;
  _QWORD *result;

  v8 = operator new(0x50uLL);
  result = sub_1002AAB2C(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  return result;
}

void sub_1002AAB18(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1002AAB2C(_QWORD *a1, _QWORD *a2, double *a3, void **a4)
{
  char v6;

  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1008123B0;
  sub_1002AAB90((uint64_t)&v6, (uint64_t)(a1 + 3), a2, a3, a4);
  return a1;
}

void sub_1002AAB7C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1002AAB90(uint64_t a1, uint64_t a2, _QWORD *a3, double *a4, void **a5)
{
  _QWORD *v5;
  _QWORD *v6;
  _QWORD **v7;
  _QWORD *v8;

  v5 = a3 + 1;
  v6 = (_QWORD *)a3[1];
  v7 = (_QWORD **)*a3;
  v8 = v6;
  if (a3[2])
  {
    v6[2] = &v8;
    *a3 = v5;
    *v5 = 0;
    a3[2] = 0;
  }
  else
  {
    v7 = &v8;
  }
  sub_1002A80D8(a2, (uint64_t)&v7, *a5, *a4);
  sub_10003E3F0((uint64_t)&v7, v8);
}

void sub_1002AAC08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11)
{
  sub_10003E3F0((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

void sub_1002AAC20(int *a1@<X1>, void **a2@<X2>, void **a3@<X3>, _QWORD *a4@<X8>)
{
  _QWORD *v8;

  v8 = operator new(0x58uLL);
  sub_1002AAC98(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  sub_10001B020((uint64_t)a4, v8 + 4, (uint64_t)(v8 + 3));
}

void sub_1002AAC84(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1002AAC98(_QWORD *a1, int *a2, void **a3, void **a4)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_100812400;
  sub_1002A75E0((uint64_t)(a1 + 3), *a2, *a3, *a4);
  return a1;
}

void sub_1002AACD8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1002AACEC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_100812400;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1002AACFC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_100812400;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_1002AAD2C(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_1002AAD60(float a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  *(float *)a4 = a1;
  *(_QWORD *)(a4 + 4) = v4;
  *(_WORD *)(a4 + 12) = 2112;
  *(_QWORD *)(a4 + 14) = v5;
}

void sub_1002AAD78(void *a1, int a2, os_log_t log, const char *a4, uint8_t *a5)
{
  _os_log_debug_impl(a1, log, OS_LOG_TYPE_DEBUG, a4, a5, 0xCu);
}

void sub_1002AAD88()
{
  void *v0;
  uint64_t i;
  int v2[2];
  const __CFString *v3;
  int v4;
  const __CFString *v5;

  v0 = objc_autoreleasePoolPush();
  v2[0] = 8;
  v3 = CFSTR("NIAcwgConfiguration");
  v4 = 5;
  v5 = CFSTR("NICarKeyConfiguration");
  sub_1002AA2F8((uint64_t)&qword_10085B6F8, v2, 2);
  for (i = 6; i != -2; i -= 4)

  __cxa_atexit((void (*)(void *))sub_1002A74AC, &qword_10085B6F8, (void *)&_mh_execute_header);
  objc_autoreleasePoolPop(v0);
}

void sub_1002AAE64(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t i;

  for (i = 24; i != -8; i -= 16)

  _Unwind_Resume(a1);
}

uint64_t sub_1002AAE90(uint64_t a1)
{
  _OWORD v3[6];

  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 4) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_QWORD *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 64) = xmmword_100475C60;
  *(_DWORD *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 84) = 0;
  *(_BYTE *)(a1 + 88) = 0;
  LODWORD(v3[0]) = -1;
  *((_QWORD *)&v3[0] + 1) = 0;
  sub_1002123E0(a1 + 96, (int *)v3, 1);
  v3[2] = xmmword_100475CC8;
  v3[3] = unk_100475CD8;
  v3[4] = xmmword_100475CE8;
  v3[5] = unk_100475CF8;
  v3[0] = xmmword_100475CA8;
  v3[1] = unk_100475CB8;
  sub_1002ABF64(a1 + 120, (int *)v3, 6);
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 144) = a1 + 152;
  return a1;
}

void sub_1002AAF80(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_1000131D8(a1);
}

void sub_1002AAF90(uint64_t a1, int a2, void *a3, uint64_t a4, double a5)
{
  id v9;
  id v10;

  v9 = a3;
  *(double *)(a1 + 24) = a5;
  *(_DWORD *)a1 = a4;
  *(_BYTE *)(a1 + 4) = BYTE4(a4);
  v10 = v9;
  sub_1002AB01C(a1, v9);
  sub_1002AB1E0((uint64_t **)a1, a2, a5);

}

void sub_1002AB008(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1002AB01C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t **v10;
  void *v11;
  void *v12;
  int v13;
  id v14;
  void *v15;
  void *__p[2];
  char v17;
  void **v18;

  v3 = a2;
  v4 = v3;
  if (v3 && objc_msgSend(v3, "count"))
  {
    v15 = v4;
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "sortedArrayUsingComparator:", &stru_100812540));
    v6 = objc_msgSend(v5, "count");
    if ((unint64_t)v6 >= 4)
      v7 = 4;
    else
      v7 = (uint64_t)v6;
    v8 = operator new(0x18uLL);
    v8[2] = 0x500000004;
    *(_OWORD *)v8 = xmmword_100475D08;
    if (v7)
    {
      v9 = 0;
      v10 = (uint64_t **)(a1 + 144);
      do
      {
        v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectAtIndexedSubscript:", v9));
        v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "name"));

        v13 = *((_DWORD *)v8 + v9);
        v14 = objc_retainAutorelease(v12);
        sub_10000BF04(__p, (char *)objc_msgSend(v14, "UTF8String"));
        v18 = __p;
        *((_DWORD *)sub_1002ABFE0(v10, (const void **)__p, (uint64_t)&unk_100472CF8, (_OWORD **)&v18) + 14) = v13;
        if (v17 < 0)
          operator delete(__p[0]);

        ++v9;
      }
      while (v7 != v9);
    }
    operator delete(v8);

    v4 = v15;
  }

}

void sub_1002AB17C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

uint64_t **sub_1002AB1E0(uint64_t **result, int a2, double a3)
{
  uint64_t **v5;
  uint64_t *v6;
  int v7;
  uint64_t **v8;
  int v9;
  BOOL v10;
  uint64_t **v11;
  double v12;
  _DWORD *v13;

  if (a2 >= 1)
  {
    v5 = result;
    if (*((_BYTE *)result + 88))
    {
      v6 = result[13];
      if (!v6)
        goto LABEL_13;
      v7 = *((_DWORD *)result + 21);
      v8 = result + 13;
      do
      {
        v9 = *((_DWORD *)v6 + 8);
        v10 = v9 < v7;
        if (v9 >= v7)
          v11 = (uint64_t **)v6;
        else
          v11 = (uint64_t **)(v6 + 1);
        if (!v10)
          v8 = (uint64_t **)v6;
        v6 = *v11;
      }
      while (*v11);
      if (v8 == result + 13 || v7 < *((_DWORD *)v8 + 8))
      {
LABEL_13:
        v13 = (_DWORD *)result + 21;
        sub_1001845A4(result + 12, (int *)result + 21, (uint64_t)&unk_100472CF8, &v13)[5] = 0;
        if (!*((_BYTE *)v5 + 88))
          sub_10000BA44();
      }
      v12 = a3 - *((double *)v5 + 7);
      v13 = (_DWORD *)v5 + 21;
      result = sub_1001845A4(v5 + 12, (int *)v5 + 21, (uint64_t)&unk_100472CF8, &v13);
      *((double *)result + 5) = v12 + *((double *)result + 5);
    }
    *((double *)v5 + 7) = a3;
    *((_DWORD *)v5 + 21) = a2;
    *((_BYTE *)v5 + 88) = 1;
  }
  return result;
}

void sub_1002AB2EC(double *a1, double a2)
{
  double v2;

  v2 = a2 - a1[3];
  a1[4] = a2;
  a1[5] = v2;
  if (v2 > 0.0)
  {
    sub_1002AB330((uint64_t)a1);
    sub_1002AB54C((uint64_t)a1);
  }
}

uint64_t sub_1002AB330(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;
  BOOL v6;
  uint64_t *v7;
  double v8;
  double v9;
  _QWORD *v10;
  double v11;
  int v12;
  double v13;
  _QWORD *v14;
  _QWORD *v15;
  BOOL v16;
  _DWORD *v17;

  v1 = result;
  if (*(_BYTE *)(result + 88))
  {
    v2 = *(_QWORD *)(result + 104);
    if (!v2)
      goto LABEL_12;
    v3 = *(_DWORD *)(result + 84);
    v4 = result + 104;
    do
    {
      v5 = *(_DWORD *)(v2 + 32);
      v6 = v5 < v3;
      if (v5 >= v3)
        v7 = (uint64_t *)v2;
      else
        v7 = (uint64_t *)(v2 + 8);
      if (!v6)
        v4 = v2;
      v2 = *v7;
    }
    while (*v7);
    if (v4 == result + 104 || v3 < *(_DWORD *)(v4 + 32))
    {
LABEL_12:
      v17 = (_DWORD *)(result + 84);
      sub_1001845A4((uint64_t **)(result + 96), (int *)(result + 84), (uint64_t)&unk_100472CF8, &v17)[5] = 0;
      if (!*(_BYTE *)(v1 + 88))
        sub_10000BA44();
    }
    v8 = *(double *)(v1 + 32) - *(double *)(v1 + 56);
    v17 = (_DWORD *)(v1 + 84);
    result = (uint64_t)sub_1001845A4((uint64_t **)(v1 + 96), (int *)(v1 + 84), (uint64_t)&unk_100472CF8, &v17);
    *(double *)(result + 40) = v8 + *(double *)(result + 40);
  }
  if (*(_DWORD *)(v1 + 76) != 6)
  {
    v9 = *(double *)(v1 + 32) - *(double *)(v1 + 48);
    v17 = (_DWORD *)(v1 + 76);
    result = (uint64_t)sub_1001845A4((uint64_t **)(v1 + 120), (int *)(v1 + 76), (uint64_t)&unk_100472CF8, &v17);
    *(double *)(result + 40) = v9 + *(double *)(result + 40);
  }
  v10 = *(_QWORD **)(v1 + 96);
  if (v10 != (_QWORD *)(v1 + 104))
  {
    v11 = *(double *)(v1 + 8);
    do
    {
      v12 = *((_DWORD *)v10 + 8);
      if (v12 < 1)
        v13 = 0.0;
      else
        v13 = 1000.0 / (double)v12 * 0.01 * 32.9;
      v11 = v11 + v13 * *((double *)v10 + 5) / 3600.0;
      *(double *)(v1 + 8) = v11;
      result = sub_1002ABEA4(v1, v12);
      switch((_DWORD)result)
      {
        case 2:
          *(_DWORD *)(v1 + 72) = v12;
          break;
        case 1:
          *(_DWORD *)(v1 + 68) = v12;
          break;
        case 0:
          *(_DWORD *)(v1 + 64) = v12;
          break;
      }
      v14 = (_QWORD *)v10[1];
      if (v14)
      {
        do
        {
          v15 = v14;
          v14 = (_QWORD *)*v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          v15 = (_QWORD *)v10[2];
          v16 = *v15 == (_QWORD)v10;
          v10 = v15;
        }
        while (!v16);
      }
      v10 = v15;
    }
    while (v15 != (_QWORD *)(v1 + 104));
  }
  return result;
}

void sub_1002AB54C(uint64_t a1)
{
  NSObject *v2;
  int v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  int v9;
  int v10;
  int v11;
  void *v12;
  NSNumber *v13;
  NSNumber *v14;
  NSNumber *v15;
  void *v16;
  uint64_t **v17;
  NSNumber *v18;
  void *v19;
  NSNumber *v20;
  void *v21;
  NSNumber *v22;
  void *v23;
  NSNumber *v24;
  void *v25;
  NSNumber *v26;
  void *v27;
  NSNumber *v28;
  void *v29;
  void *v30;
  id v31;
  NSObject *v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t *v37;
  void *v38;
  os_log_t log;
  _QWORD v40[4];
  id v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int *v48;
  _QWORD v49[10];
  _QWORD v50[10];
  uint8_t buf[8];
  __int16 v52;
  uint64_t *v53;
  __int16 v54;
  uint64_t *v55;
  __int16 v56;
  uint64_t *v57;
  __int16 v58;
  uint64_t *v59;
  __int16 v60;
  uint64_t *v61;
  __int16 v62;
  uint64_t *v63;
  __int16 v64;
  uint64_t *v65;
  __int16 v66;
  uint64_t *v67;
  __int16 v68;
  uint64_t *v69;
  __int16 v70;
  int v71;
  __int16 v72;
  int v73;
  __int16 v74;
  int v75;

  v2 = (id)qword_10085F520;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_DWORD *)(a1 + 16);
    v48 = (int *)(a1 + 64);
    v4 = sub_1001845A4((uint64_t **)(a1 + 96), (int *)(a1 + 64), (uint64_t)&unk_100472CF8, &v48)[5];
    v48 = (int *)(a1 + 68);
    v5 = sub_1001845A4((uint64_t **)(a1 + 96), (int *)(a1 + 68), (uint64_t)&unk_100472CF8, &v48)[5];
    v48 = (int *)(a1 + 72);
    v37 = sub_1001845A4((uint64_t **)(a1 + 96), (int *)(a1 + 72), (uint64_t)&unk_100472CF8, &v48)[5];
    v47 = 0;
    v48 = &v47;
    v36 = sub_1001845A4((uint64_t **)(a1 + 120), &v47, (uint64_t)&unk_100472CF8, &v48)[5];
    v46 = 1;
    v48 = &v46;
    v35 = sub_1001845A4((uint64_t **)(a1 + 120), &v46, (uint64_t)&unk_100472CF8, &v48)[5];
    v45 = 2;
    v48 = &v45;
    v33 = sub_1001845A4((uint64_t **)(a1 + 120), &v45, (uint64_t)&unk_100472CF8, &v48)[5];
    v34 = v5;
    v44 = 3;
    v48 = &v44;
    v6 = sub_1001845A4((uint64_t **)(a1 + 120), &v44, (uint64_t)&unk_100472CF8, &v48)[5];
    v43 = 4;
    v48 = &v43;
    v7 = sub_1001845A4((uint64_t **)(a1 + 120), &v43, (uint64_t)&unk_100472CF8, &v48)[5];
    v42 = 5;
    v48 = &v42;
    v8 = sub_1001845A4((uint64_t **)(a1 + 120), &v42, (uint64_t)&unk_100472CF8, &v48)[5];
    v9 = *(_DWORD *)(a1 + 64);
    v10 = *(_DWORD *)(a1 + 68);
    v11 = *(_DWORD *)(a1 + 72);
    *(_DWORD *)buf = 67112192;
    *(_DWORD *)&buf[4] = v3;
    v52 = 2048;
    v53 = v4;
    v54 = 2048;
    v55 = v34;
    v56 = 2048;
    v57 = v37;
    v58 = 2048;
    v59 = v36;
    v60 = 2048;
    v61 = v35;
    v62 = 2048;
    v63 = v33;
    v64 = 2048;
    v65 = v6;
    v66 = 2048;
    v67 = v7;
    v68 = 2048;
    v69 = v8;
    v70 = 1024;
    v71 = v9;
    v72 = 1024;
    v73 = v10;
    v74 = 1024;
    v75 = v11;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#handoffca Handoff device report: {\nNumTimesSmallestRegionEntered: %d,\nTimeSpentRangingAtRate0: %f s,\nTimeSpentRangingAtRate1: %f s,\nTimeSpentRangingAtRate2: %f s,\nTimeSpentRegion0: %f s,\nTimeSpentRegion1: %f s,\nTimeSpentRegion2: %f s,\nTimeSpentRegion3: %f s,\nTimeSpentRegion4: %f s,\nTimeSpentRegion5: %f s,\nRangingIntervalMillisecondsRate0: %d ms,\nRangingIntervalMillisecondsRate1: %d ms,\nRangingIntervalMillisecondsRate2: %d ms\n}", buf,
      0x74u);
  }

  v49[0] = CFSTR("numTimesSmallestRegionEntered");
  v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 16)));
  v50[0] = v12;
  v49[1] = CFSTR("timeSpentRangingAtRate0");
  *(_QWORD *)buf = a1 + 64;
  v13 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *((double *)sub_1001845A4((uint64_t **)(a1 + 96), (int *)(a1 + 64), (uint64_t)&unk_100472CF8, (_DWORD **)buf) + 5));
  log = (os_log_t)objc_claimAutoreleasedReturnValue(v13);
  v50[1] = log;
  v49[2] = CFSTR("timeSpentRangingAtRate1");
  *(_QWORD *)buf = a1 + 68;
  v14 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *((double *)sub_1001845A4((uint64_t **)(a1 + 96), (int *)(a1 + 68), (uint64_t)&unk_100472CF8, (_DWORD **)buf) + 5));
  v38 = (void *)objc_claimAutoreleasedReturnValue(v14);
  v50[2] = v38;
  v49[3] = CFSTR("timeSpentRangingAtRate2");
  *(_QWORD *)buf = a1 + 72;
  v15 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *((double *)sub_1001845A4((uint64_t **)(a1 + 96), (int *)(a1 + 72), (uint64_t)&unk_100472CF8, (_DWORD **)buf) + 5));
  v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
  v50[3] = v16;
  v49[4] = CFSTR("timeSpentRegion0");
  v17 = (uint64_t **)(a1 + 120);
  LODWORD(v48) = 0;
  *(_QWORD *)buf = &v48;
  v18 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *((double *)sub_1001845A4((uint64_t **)(a1 + 120), (int *)&v48, (uint64_t)&unk_100472CF8, (_DWORD **)buf) + 5));
  v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
  v50[4] = v19;
  v49[5] = CFSTR("timeSpentRegion1");
  v47 = 1;
  *(_QWORD *)buf = &v47;
  v20 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *((double *)sub_1001845A4(v17, &v47, (uint64_t)&unk_100472CF8, (_DWORD **)buf) + 5));
  v21 = (void *)objc_claimAutoreleasedReturnValue(v20);
  v50[5] = v21;
  v49[6] = CFSTR("timeSpentRegion2");
  v46 = 2;
  *(_QWORD *)buf = &v46;
  v22 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *((double *)sub_1001845A4(v17, &v46, (uint64_t)&unk_100472CF8, (_DWORD **)buf) + 5));
  v23 = (void *)objc_claimAutoreleasedReturnValue(v22);
  v50[6] = v23;
  v49[7] = CFSTR("timeSpentRegion3");
  v45 = 3;
  *(_QWORD *)buf = &v45;
  v24 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *((double *)sub_1001845A4(v17, &v45, (uint64_t)&unk_100472CF8, (_DWORD **)buf) + 5));
  v25 = (void *)objc_claimAutoreleasedReturnValue(v24);
  v50[7] = v25;
  v49[8] = CFSTR("timeSpentRegion4");
  v44 = 4;
  *(_QWORD *)buf = &v44;
  v26 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *((double *)sub_1001845A4(v17, &v44, (uint64_t)&unk_100472CF8, (_DWORD **)buf) + 5));
  v27 = (void *)objc_claimAutoreleasedReturnValue(v26);
  v50[8] = v27;
  v49[9] = CFSTR("timeSpentRegion5");
  v43 = 5;
  *(_QWORD *)buf = &v43;
  v28 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *((double *)sub_1001845A4(v17, &v43, (uint64_t)&unk_100472CF8, (_DWORD **)buf) + 5));
  v29 = (void *)objc_claimAutoreleasedReturnValue(v28);
  v50[9] = v29;
  v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v50, v49, 10));

  v40[0] = _NSConcreteStackBlock;
  v40[1] = 3221225472;
  v40[2] = sub_1002ABF5C;
  v40[3] = &unk_1007FA568;
  v31 = v30;
  v41 = v31;
  AnalyticsSendEventLazy(CFSTR("com.apple.nearbyinteraction.b520session"), v40);
  v32 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "#handoffca Uploaded device information through AnalyticsSendEventLazy", buf, 2u);
  }

}

void sub_1002ABC44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{

  _Unwind_Resume(a1);
}

int64_t sub_1002ABD08(id a1, id a2, id a3)
{
  id v4;
  float v5;
  float v6;
  float v7;
  int64_t v8;

  v4 = a3;
  objc_msgSend(a2, "radius");
  v6 = v5;
  objc_msgSend(v4, "radius");
  if (v6 < v7)
    v8 = -1;
  else
    v8 = v6 > v7;

  return v8;
}

void sub_1002ABD5C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002ABD70(uint64_t a1, void *a2, double a3)
{
  id v5;
  void *v6;
  id v7;
  uint64_t v8;
  int v9;
  double v10;
  uint64_t **v11;
  void *__p[2];
  char v13;
  _DWORD *v14;

  v5 = a2;
  v6 = v5;
  if (v5)
  {
    v7 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "name")));
    sub_10000BF04(__p, (char *)objc_msgSend(v7, "UTF8String"));
    v8 = sub_100004DF0(a1 + 144, (const void **)__p);
    if (a1 + 152 != v8)
    {
      v9 = *(_DWORD *)(v8 + 56);
      if (v9 == *(_DWORD *)(a1 + 80))
        ++*(_DWORD *)(a1 + 16);
      if (*(_DWORD *)(a1 + 76) <= 5u)
      {
        v10 = *(double *)(a1 + 48);
        v14 = (_DWORD *)(a1 + 76);
        v11 = sub_1001845A4((uint64_t **)(a1 + 120), (int *)(a1 + 76), (uint64_t)&unk_100472CF8, &v14);
        *((double *)v11 + 5) = a3 - v10 + *((double *)v11 + 5);
      }
      *(double *)(a1 + 48) = a3;
      *(_DWORD *)(a1 + 76) = v9;
    }
    if (v13 < 0)
      operator delete(__p[0]);

  }
}

void sub_1002ABE6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  void *v16;

  if (a15 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

uint64_t sub_1002ABEA4(uint64_t a1, int a2)
{
  float v2;
  double v3;
  float v4;
  float v5;
  BOOL v6;
  float v7;
  float v8;
  BOOL v9;
  float v10;
  float v11;

  v2 = (float)a2;
  if (*(_BYTE *)(a1 + 4))
  {
    v3 = (double)*(int *)a1;
    v4 = v3 * 14.2999998;
    if (v4 <= v2)
    {
      v5 = (double)*(int *)a1 * 16.2000002;
      v6 = v5 < v2;
    }
    else
    {
      v6 = 1;
    }
    if (!v6)
      return 0;
    v7 = v3 * 9.54999977;
    if (v7 <= v2)
    {
      v8 = v3 * 11.4500002;
      v9 = v8 < v2;
    }
    else
    {
      v9 = 1;
    }
    if (!v9)
      return 1;
    v10 = (float)*(int *)a1;
    v11 = v3 * 1.95000001;
  }
  else
  {
    v10 = -1.0;
    v11 = -1.0;
    if (a2 == -1)
      return 0;
  }
  if (v11 < v2 || v10 > v2)
    return 0xFFFFFFFFLL;
  else
    return 2;
}

id sub_1002ABF5C(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

uint64_t sub_1002ABF64(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a3)
  {
    v6 = 16 * a3;
    do
    {
      sub_10021245C((uint64_t **)a1, v4, a2, a2);
      a2 += 4;
      v6 -= 16;
    }
    while (v6);
  }
  return a1;
}

void sub_1002ABFC8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10003E3F0(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

_OWORD *sub_1002ABFE0(uint64_t **a1, const void **a2, uint64_t a3, _OWORD **a4)
{
  void **v6;
  _OWORD *v7;
  uint64_t **v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v12;

  v6 = (void **)sub_1000271A4((uint64_t)a1, &v12, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x40uLL);
    v9 = *a4;
    v10 = *((_QWORD *)*a4 + 2);
    v7[2] = **a4;
    *((_QWORD *)v7 + 6) = v10;
    v9[1] = 0;
    v9[2] = 0;
    *v9 = 0;
    *((_DWORD *)v7 + 14) = 0;
    sub_1000272A8(a1, v12, v8, (uint64_t *)v7);
  }
  return v7;
}

uint64_t sub_1002AC078(uint64_t result)
{
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 16) = 1;
  return result;
}

void sub_1002AC088(uint64_t a1)
{
  NSObject *v2;
  char *v3;
  void **v4;
  double v5;
  void *__p[2];
  char v7;
  uint8_t buf[4];
  void **v9;

  v2 = (id)qword_10085F520;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_DWORD *)(a1 + 16) ? "PowerOff" : "PowerOn";
    sub_10000BF04(__p, v3);
    v4 = v7 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136315138;
    v9 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#rosepower-ca,poweredOn roseState:%s", buf, 0xCu);
    if (v7 < 0)
      operator delete(__p[0]);
  }

  v5 = sub_10000883C();
  if (*(_DWORD *)(a1 + 16) == 1)
  {
    *(double *)a1 = v5;
    *(_DWORD *)(a1 + 16) = 0;
  }
}

void sub_1002AC198(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002AC1B0(uint64_t a1)
{
  NSObject *v2;
  char *v3;
  void **v4;
  double v5;
  double v6;
  void *__p[2];
  char v8;
  uint8_t buf[4];
  void **v10;

  v2 = (id)qword_10085F520;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_DWORD *)(a1 + 16) ? "PowerOff" : "PowerOn";
    sub_10000BF04(__p, v3);
    v4 = v8 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136315138;
    v10 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#rosepower-ca,poweredOff roseState:%s", buf, 0xCu);
    if (v8 < 0)
      operator delete(__p[0]);
  }

  v5 = sub_10000883C();
  if (!*(_DWORD *)(a1 + 16))
  {
    v6 = v5 - *(double *)a1;
    *(double *)(a1 + 8) = v6;
    if (v6 > 0.0)
    {
      sub_1002AC2F4(a1);
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
    }
    *(_DWORD *)(a1 + 16) = 1;
  }
}

void sub_1002AC2DC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002AC2F4(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  NSObject *v5;
  id v6;
  id v7;
  _QWORD v8[4];
  id v9;
  uint8_t buf[4];
  id v11;
  _QWORD v12[2];
  _QWORD v13[2];

  v12[0] = CFSTR("numPowerUps");
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 1));
  v13[0] = v2;
  v12[1] = CFSTR("powerOnDuration");
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(a1 + 8)));
  v13[1] = v3;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v13, v12, 2));

  v5 = (id)qword_10085F520;
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v6 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "description")));
    *(_DWORD *)buf = 136315138;
    v11 = objc_msgSend(v6, "UTF8String");
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#rosepower-ca,rose power data to be uploaded:\n%s\n", buf, 0xCu);

  }
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1002AC4DC;
  v8[3] = &unk_1007FA568;
  v7 = v4;
  v9 = v7;
  AnalyticsSendEventLazy(CFSTR("com.apple.rose.powerevent"), v8);

}

void sub_1002AC488(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

id sub_1002AC4DC(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

_QWORD *sub_1002AC4E4@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, off_100812660[a1]);
}

_QWORD *sub_1002AC4F8@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, off_1008126B8[a1]);
}

_QWORD *sub_1002AC50C@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, off_100812700[a1]);
}

_QWORD *sub_1002AC520@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, off_100812720[a1]);
}

uint64_t sub_1002AC534(uint64_t a1, void *a2, uint64_t a3, double a4)
{
  id v7;
  id v8;
  id v9;
  void *v10;
  id v11;
  void *v12;
  const char *v14;
  int v15;

  v7 = a2;
  *(_QWORD *)a1 = off_100812570;
  *(_QWORD *)(a1 + 8) = off_1008125D0;
  v8 = v7;
  *(_QWORD *)(a1 + 16) = v8;
  *(_QWORD *)(a1 + 24) = dispatch_queue_create("com.apple.nearbyd.motion", 0);
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = a3;
  *(_QWORD *)(a1 + 48) = 0;
  if (!a3)
  {
    v14 = "motionProxyObject";
    v15 = 21;
    goto LABEL_8;
  }
  if (!v8)
  {
    v14 = "clientQueue";
    v15 = 22;
    goto LABEL_8;
  }
  if (a4 == 0.0)
  {
    v14 = "updateInterval != 0";
    v15 = 23;
LABEL_8:
    __assert_rtn("PRMotionProvider", "PRMotionProvider.mm", v15, v14);
  }
  v9 = objc_alloc_init((Class)NSOperationQueue);
  v10 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v9;

  objc_msgSend(*(id *)(a1 + 32), "setUnderlyingQueue:", *(_QWORD *)(a1 + 24));
  v11 = objc_alloc_init((Class)CMMotionManager);
  v12 = *(void **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v11;

  objc_msgSend(*(id *)(a1 + 48), "setDeviceMotionUpdateInterval:", a4);
  return a1;
}

void sub_1002AC640(_Unwind_Exception *a1)
{
  id *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1002AC674(uint64_t a1)
{
  NSObject *v2;
  _QWORD *v3;
  NSObject *v4;
  _QWORD v5[5];
  uint8_t buf[16];

  v2 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "starting motion updates", buf, 2u);
  }
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1002AC784;
  v5[3] = &unk_1008125F0;
  v5[4] = a1;
  v3 = objc_retainBlock(v5);
  objc_msgSend(*(id *)(a1 + 48), "startDeviceMotionUpdatesUsingReferenceFrame:toQueue:withHandler:", 4, *(_QWORD *)(a1 + 32), v3);
  v4 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "started motion updates", buf, 2u);
  }

}

void sub_1002AC774(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002AC784(uint64_t a1, void *a2, void *a3)
{
  sub_1002AC78C(*(_QWORD *)(a1 + 32), a2, a3);
}

void sub_1002AC78C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  NSObject *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD block[7];
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;

  v5 = a2;
  v6 = a3;
  if (v6)
  {
    v7 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
      sub_1003E677C((uint64_t)v6, v7);
  }
  else if (v5)
  {
    objc_msgSend(v5, "timestamp");
    v9 = v8;
    objc_msgSend(v5, "userAcceleration");
    v11 = v10;
    objc_msgSend(v5, "userAcceleration");
    v13 = v12;
    objc_msgSend(v5, "userAcceleration");
    v15 = v14;
    objc_msgSend(v5, "rotationRate");
    v17 = v16;
    objc_msgSend(v5, "rotationRate");
    v19 = v18;
    objc_msgSend(v5, "rotationRate");
    v21 = v20;
    v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "attitude"));
    objc_msgSend(v22, "quaternion");
    v24 = v23;
    v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "attitude"));
    objc_msgSend(v25, "quaternion");
    v59 = v26;
    v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "attitude"));
    objc_msgSend(v27, "quaternion");
    v58 = v28;
    v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "attitude"));
    objc_msgSend(v29, "quaternion");
    v57 = v30;
    objc_msgSend(v5, "gravity");
    v56 = v31;
    objc_msgSend(v5, "gravity");
    v55 = v32;
    objc_msgSend(v5, "gravity");
    v54 = v33;
    objc_msgSend(v5, "magneticField");
    v52 = v24;
    v53 = v21;
    v34 = v19;
    v35 = v17;
    v36 = v15;
    v37 = v13;
    v38 = v11;
    v51 = v80;
    objc_msgSend(v5, "magneticField");
    v39 = v9;
    v40 = v79;
    objc_msgSend(v5, "magneticField");
    v41 = v78;

    v42 = *(NSObject **)(a1 + 16);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1002ACBFC;
    block[3] = &unk_100807848;
    block[4] = a1;
    block[5] = v39;
    block[6] = 0;
    v61 = 1;
    v62 = v38;
    v63 = v37;
    v64 = v36;
    v65 = v35;
    v66 = v34;
    v67 = v53;
    v68 = v52;
    v69 = v59;
    v70 = v58;
    v71 = v57;
    v72 = v56;
    v73 = v55;
    v74 = v54;
    v75 = v51;
    v76 = v40;
    v77 = v41;
    dispatch_async(v42, block);
  }
  else
  {
    v43 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
      sub_1003E6748(v43, v44, v45, v46, v47, v48, v49, v50);
  }

}

void sub_1002ACA2C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1002ACAAC(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  uint8_t v4[16];
  uint8_t buf[16];

  v2 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "stopping motion updates", buf, 2u);
  }
  objc_msgSend(*(id *)(a1 + 48), "stopDeviceMotionUpdates");
  v3 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "stopped motion updates.", v4, 2u);
  }
}

id sub_1002ACB60(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 48), "isDeviceMotionAvailable");
}

BOOL sub_1002ACB68(uint64_t a1, uint64_t a2)
{
  NSObject *v2;
  _BOOL8 result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  switch(*(_DWORD *)a2)
  {
    case 0:
      v2 = qword_10085F520;
      result = os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR);
      if (result)
      {
        sub_1003E6818(v2, v4, v5, v6, v7, v8, v9, v10);
        return 0;
      }
      return result;
    case 1:
      sub_1002AC674(a1);
      return 1;
    case 2:
      sub_1002ACAAC(a1);
      return 1;
    case 3:
      if (!*(_BYTE *)(a2 + 16))
        sub_1003E67F0();
      objc_msgSend(*(id *)(a1 + 48), "setDeviceMotionUpdateInterval:", *(double *)(a2 + 8));
      return 1;
    default:
      return 1;
  }
}

void sub_1002ACBFC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[28];
  char v15;
  _BYTE v16[156];

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  *(_OWORD *)&v16[116] = *(_OWORD *)(a1 + 152);
  *(_OWORD *)&v16[100] = *(_OWORD *)(a1 + 136);
  *(_OWORD *)&v16[52] = *(_OWORD *)(a1 + 88);
  *(_OWORD *)&v16[36] = *(_OWORD *)(a1 + 72);
  *(_OWORD *)&v16[132] = *(_OWORD *)(a1 + 168);
  *(_QWORD *)&v16[148] = *(_QWORD *)(a1 + 184);
  *(_OWORD *)&v16[68] = *(_OWORD *)(a1 + 104);
  *(_OWORD *)&v16[84] = *(_OWORD *)(a1 + 120);
  *(_OWORD *)&v16[4] = *(_OWORD *)(a1 + 40);
  *(_OWORD *)&v16[20] = *(_OWORD *)(a1 + 56);
  v3 = *(_QWORD *)(v1 + 40);
  v4 = v2;
  v5 = 1;
  v12 = *(_OWORD *)&v16[96];
  v13 = *(_OWORD *)&v16[112];
  *(_OWORD *)v14 = *(_OWORD *)&v16[128];
  *(_OWORD *)&v14[12] = *(_OWORD *)&v16[140];
  v8 = *(_OWORD *)&v16[32];
  v9 = *(_OWORD *)&v16[48];
  v10 = *(_OWORD *)&v16[64];
  v11 = *(_OWORD *)&v16[80];
  v6 = *(_OWORD *)v16;
  v7 = *(_OWORD *)&v16[16];
  v15 = 1;
  sub_10016ACE4(v3, (uint64_t)&v4);
}

id *sub_1002ACD04(id *a1)
{

  return a1;
}

void sub_1002ACD44(id *a1)
{

  operator delete();
}

void sub_1002ACD94(id *a1)
{

}

void sub_1002ACDCC(id *a1)
{

  operator delete();
}

uint64_t sub_1002ACF8C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

uint64_t sub_1002AD01C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

uint64_t sub_1002AD0C0(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, id))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 24) + 16))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 24), objc_msgSend(*(id *)(a1 + 40), "state"));
}

_BYTE *sub_1002AD140(_BYTE *result)
{
  *result = 0;
  result[8] = 0;
  result[16] = 0;
  result[24] = 0;
  result[32] = 0;
  result[40] = 0;
  result[48] = 0;
  result[56] = 0;
  result[64] = 0;
  result[68] = 0;
  result[72] = 0;
  result[76] = 0;
  result[80] = 0;
  result[88] = 0;
  result[96] = 0;
  result[100] = 0;
  result[104] = 0;
  result[108] = 0;
  return result;
}

void sub_1002AD18C(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  id v7;
  _QWORD v8[4];
  id v9;
  _QWORD v10[2];
  _QWORD v11[2];

  v10[0] = CFSTR("maxNumberOfInitiators");
  if (*(_BYTE *)(a1 + 100))
    v2 = objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 96)));
  else
    v2 = objc_claimAutoreleasedReturnValue(+[NSNull null](NSNull, "null"));
  v3 = (void *)v2;
  v10[1] = CFSTR("maxNumberOfResponders");
  v11[0] = v2;
  if (*(_BYTE *)(a1 + 108))
    v4 = objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 104)));
  else
    v4 = objc_claimAutoreleasedReturnValue(+[NSNull null](NSNull, "null"));
  v5 = (void *)v4;
  v11[1] = v4;
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v11, v10, 2));

  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1002AD32C;
  v8[3] = &unk_1007FA568;
  v9 = v6;
  v7 = v6;
  AnalyticsSendEventLazy(CFSTR("com.apple.proximity.ranging.numpeers"), v8);

}

void sub_1002AD2E8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id sub_1002AD32C(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

_BYTE *sub_1002AD334(_BYTE *a1)
{
  sub_1002AD360((uint64_t)a1);
  sub_1002AD18C((uint64_t)a1);
  return sub_1002AD82C(a1);
}

void sub_1002AD360(uint64_t a1)
{
  double v2;
  double v3;
  double v4;
  double v5;
  char v6;
  double v7;
  char v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  id v20;
  NSObject *v21;
  int v22;
  void *v23;
  BOOL v24;
  uint8_t buf[8];
  _QWORD v26[4];
  id v27;
  _QWORD v28[6];
  _QWORD v29[6];

  if (*(_BYTE *)(a1 + 8))
  {
    v2 = 0.0;
    if (*(_BYTE *)(a1 + 56) && (v3 = *(double *)(a1 + 48) - *(double *)a1, v3 > 0.0))
    {
      v22 = 1;
    }
    else
    {
      v22 = 0;
      v3 = 0.0;
    }
    if (!*(_BYTE *)(a1 + 24))
    {
      v24 = 1;
      v5 = 0.0;
      v6 = 1;
      goto LABEL_15;
    }
    v4 = *(double *)(a1 + 16) - *(double *)a1;
    v24 = v4 <= 0.0;
    if (v4 > 0.0)
      v2 = *(double *)(a1 + 16) - *(double *)a1;
    else
      v2 = 0.0;
  }
  else
  {
    v22 = 0;
    v2 = 0.0;
    v24 = 1;
    v3 = 0.0;
    v5 = 0.0;
    v6 = 1;
    if (!*(_BYTE *)(a1 + 24))
      goto LABEL_15;
  }
  if (*(_BYTE *)(a1 + 40))
  {
    v6 = 0;
    v5 = *(double *)(a1 + 32) - *(double *)(a1 + 16);
  }
  else
  {
    v6 = 1;
    v5 = 0.0;
  }
LABEL_15:
  v7 = 0.0;
  if (*(_BYTE *)(a1 + 56) && *(_BYTE *)(a1 + 88))
  {
    v8 = 0;
    v7 = *(double *)(a1 + 48) - *(double *)(a1 + 80);
  }
  else
  {
    v8 = 1;
  }
  v28[0] = CFSTR("numberOfInitiators");
  if (*(_BYTE *)(a1 + 68))
    v9 = objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 64)));
  else
    v9 = objc_claimAutoreleasedReturnValue(+[NSNull null](NSNull, "null"));
  v10 = (void *)v9;
  v29[0] = v9;
  v28[1] = CFSTR("numberOfResponders");
  if (*(_BYTE *)(a1 + 76))
    v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 72)));
  else
    v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](NSNull, "null"));
  v29[1] = v23;
  v28[2] = CFSTR("timeFromLockScreenToFirstMeasurement");
  if (v22)
    v11 = objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v3));
  else
    v11 = objc_claimAutoreleasedReturnValue(+[NSNull null](NSNull, "null"));
  v12 = (void *)v11;
  v29[2] = v11;
  v28[3] = CFSTR("timeFromLockScreenToNiSessionStart");
  if (v24)
    v13 = objc_claimAutoreleasedReturnValue(+[NSNull null](NSNull, "null"));
  else
    v13 = objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v2));
  v14 = (void *)v13;
  v29[3] = v13;
  v28[4] = CFSTR("timeFromNiSessionStartToBluetoothDiscovery");
  if ((v6 & 1) != 0)
    v15 = objc_claimAutoreleasedReturnValue(+[NSNull null](NSNull, "null"));
  else
    v15 = objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v5));
  v16 = (void *)v15;
  v29[4] = v15;
  v28[5] = CFSTR("timeFromRangingRequestToFirstMeasurement");
  if ((v8 & 1) != 0)
    v17 = objc_claimAutoreleasedReturnValue(+[NSNull null](NSNull, "null"));
  else
    v17 = objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v7));
  v18 = (void *)v17;
  v29[5] = v17;
  v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v29, v28, 6));

  v26[0] = _NSConcreteStackBlock;
  v26[1] = 3221225472;
  v26[2] = sub_1002AD89C;
  v26[3] = &unk_1007FA568;
  v20 = v19;
  v27 = v20;
  AnalyticsSendEventLazy(CFSTR("com.apple.proximity.ranging.firstmeasurementsreturned"), v26);
  v21 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "#proximitywifica Uploaded device information through AnalyticsSendEventLazy", buf, 2u);
  }

}

void sub_1002AD768(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  void *v11;

  _Unwind_Resume(a1);
}

_BYTE *sub_1002AD82C(_BYTE *result)
{
  if (result[8])
    result[8] = 0;
  if (result[24])
    result[24] = 0;
  if (result[40])
    result[40] = 0;
  if (result[56])
    result[56] = 0;
  if (result[68])
    result[68] = 0;
  if (result[76])
    result[76] = 0;
  if (result[88])
    result[88] = 0;
  if (result[100])
    result[100] = 0;
  if (result[108])
    result[108] = 0;
  return result;
}

id sub_1002AD89C(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

void sub_1002AD8A4(uint64_t a1, double a2)
{
  NSObject *v3;
  double v4;
  int v5;
  double v6;

  *(double *)a1 = a2;
  *(_BYTE *)(a1 + 8) = 1;
  v3 = (id)qword_10085F520;
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    if (!*(_BYTE *)(a1 + 8))
      sub_10000BA44();
    v4 = *(double *)a1;
    v5 = 134217984;
    v6 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#proximitywifica lock screen time: %f", (uint8_t *)&v5, 0xCu);
  }

}

void sub_1002AD96C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002AD984(uint64_t a1, double a2)
{
  NSObject *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;

  *(double *)(a1 + 16) = a2;
  *(_BYTE *)(a1 + 24) = 1;
  if (*(_BYTE *)(a1 + 56))
    *(_BYTE *)(a1 + 56) = 0;
  v3 = (id)qword_10085F520;
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    if (!*(_BYTE *)(a1 + 24))
      sub_10000BA44();
    v4 = *(_QWORD *)(a1 + 16);
    v5 = 134217984;
    v6 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#proximitywifica session start time %f", (uint8_t *)&v5, 0xCu);
  }

}

void sub_1002ADA58(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002ADA70(uint64_t a1, double a2)
{
  NSObject *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;

  *(double *)(a1 + 32) = a2;
  *(_BYTE *)(a1 + 40) = 1;
  v3 = (id)qword_10085F520;
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    if (!*(_BYTE *)(a1 + 40))
      sub_10000BA44();
    v4 = *(_QWORD *)(a1 + 32);
    v5 = 134217984;
    v6 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#proximitywifica device discovery time %f", (uint8_t *)&v5, 0xCu);
  }

}

void sub_1002ADB38(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1002ADB50(uint64_t result, double a2)
{
  *(double *)(result + 48) = a2;
  *(_BYTE *)(result + 56) = 1;
  return result;
}

uint64_t sub_1002ADB60(uint64_t result, int a2, double a3)
{
  *(_DWORD *)(result + 64) = a2;
  *(_BYTE *)(result + 68) = 1;
  *(double *)(result + 80) = a3;
  *(_BYTE *)(result + 88) = 1;
  if (!*(_BYTE *)(result + 100) || *(_DWORD *)(result + 96) < a2)
  {
    *(_DWORD *)(result + 96) = a2;
    *(_BYTE *)(result + 100) = 1;
  }
  return result;
}

uint64_t sub_1002ADB94(uint64_t result, int a2, double a3)
{
  *(_DWORD *)(result + 72) = a2;
  *(_BYTE *)(result + 76) = 1;
  *(double *)(result + 80) = a3;
  *(_BYTE *)(result + 88) = 1;
  if (!*(_BYTE *)(result + 108) || *(_DWORD *)(result + 104) < a2)
  {
    *(_DWORD *)(result + 104) = a2;
    *(_BYTE *)(result + 108) = 1;
  }
  return result;
}

_QWORD *sub_1002ADBC8@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, (&off_100812BC0)[a1]);
}

_QWORD *sub_1002ADBDC@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, (&off_100812C18)[a1]);
}

_QWORD *sub_1002ADBF0@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, (&off_100812C60)[a1]);
}

_QWORD *sub_1002ADC04@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, (&off_100812C80)[a1]);
}

uint64_t sub_1002ADC18(uint64_t a1, __int128 *a2, void *__src, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, _QWORD *a13)
{
  _BYTE *v20;
  __int128 v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;

  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = off_1008127C8;
  *(_QWORD *)(a1 + 8) = off_100812890;
  memcpy((void *)(a1 + 32), __src, 0x1F8uLL);
  v20 = (_BYTE *)(a1 + 536);
  if (*((char *)a2 + 23) < 0)
  {
    sub_100004678(v20, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v21 = *a2;
    *(_QWORD *)(a1 + 552) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v20 = v21;
  }
  v22 = a13[1];
  *(_QWORD *)(a1 + 560) = *a13;
  *(_QWORD *)(a1 + 568) = v22;
  if (v22)
  {
    v23 = (unint64_t *)(v22 + 8);
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  *(_QWORD *)(a1 + 600) = 0;
  *(_QWORD *)(a1 + 632) = 0;
  *(_QWORD *)(a1 + 664) = 0;
  *(_QWORD *)(a1 + 672) = *((id *)sub_1002CA108() + 7);
  *(_BYTE *)(a1 + 680) = 0;
  *(_BYTE *)(a1 + 682) = 0;
  *(_BYTE *)(a1 + 688) = 0;
  *(_BYTE *)(a1 + 800) = 0;
  *(_BYTE *)(a1 + 808) = 0;
  *(_BYTE *)(a1 + 820) = 0;
  *(_BYTE *)(a1 + 824) = 0;
  *(_BYTE *)(a1 + 832) = 0;
  *(_WORD *)(a1 + 836) = 0;
  *(_QWORD *)(a1 + 840) = 1018212795;
  *(_OWORD *)(a1 + 848) = 0u;
  *(_OWORD *)(a1 + 864) = 0u;
  *(_QWORD *)(a1 + 880) = 0;
  *(_QWORD *)(a1 + 888) = 850045863;
  *(_BYTE *)(a1 + 984) = 0;
  *(_BYTE *)(a1 + 992) = 0;
  *(_BYTE *)(a1 + 1048) = 0;
  *(_QWORD *)(a1 + 1056) = 0;
  *(_DWORD *)(a1 + 1064) = 0;
  *(_OWORD *)(a1 + 937) = 0u;
  *(_OWORD *)(a1 + 912) = 0u;
  *(_OWORD *)(a1 + 928) = 0u;
  *(_OWORD *)(a1 + 896) = 0u;
  *(_QWORD *)(a1 + 1072) = 1018212795;
  *(_OWORD *)(a1 + 1080) = 0u;
  *(_OWORD *)(a1 + 1096) = 0u;
  *(_QWORD *)(a1 + 1112) = 0;
  *(_QWORD *)(a1 + 1120) = 850045863;
  *(_OWORD *)(a1 + 1128) = 0u;
  *(_OWORD *)(a1 + 1144) = 0u;
  *(_OWORD *)(a1 + 1160) = 0u;
  *(_QWORD *)(a1 + 1176) = 0;
  sub_100027674(a1 + 1184, a4);
  sub_100027674(a1 + 1216, a5);
  sub_100027674(a1 + 1248, a8);
  sub_100027674(a1 + 1280, a12);
  sub_100027674(a1 + 1312, a6);
  sub_100027674(a1 + 1344, a7);
  sub_100027674(a1 + 1376, a9);
  sub_100027674(a1 + 1408, a10);
  sub_100027674(a1 + 1440, a11);
  if (*(char *)(a1 + 559) < 0)
  {
    if (*(_QWORD *)(a1 + 544))
      return a1;
LABEL_11:
    __assert_rtn("RoseBaseSession", "NIServerRoseSession.mm", 72, "fSessionContainerIdentifier.size() > 0");
  }
  if (!*(_BYTE *)(a1 + 559))
    goto LABEL_11;
  return a1;
}

void sub_1002ADE70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;
  std::__shared_weak_count *v16;

  v16 = *(std::__shared_weak_count **)(v14 + 24);
  if (v16)
    std::__shared_weak_count::__release_weak(v16);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002AE1E0(uint64_t a1)
{
  NSObject *v2;
  _QWORD *v3;
  unsigned __int16 *v4;
  int v5;
  unsigned __int8 v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  void *v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  int v35;
  _QWORD *v36;
  __int16 v37;
  int v38;

  *(_QWORD *)a1 = off_1008127C8;
  *(_QWORD *)(a1 + 8) = off_100812890;
  v2 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    v3 = (_QWORD *)(a1 + 536);
    if (*(char *)(a1 + 559) < 0)
      v3 = (_QWORD *)*v3;
    v4 = (unsigned __int16 *)(a1 + 680);
    if (!*(_BYTE *)(a1 + 682))
      v4 = (unsigned __int16 *)&unk_100475DA0;
    v5 = *v4;
    v35 = 136315394;
    v36 = v3;
    v37 = 1024;
    v38 = v5;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#rose-ses,~rose::objects::RoseBaseSession (Session ID: %s, Ticket: %d)", (uint8_t *)&v35, 0x12u);
  }
  v6 = atomic_load((unsigned __int8 *)(a1 + 836));
  if ((v6 & 1) != 0)
    sub_1002AE5BC(a1);
  v7 = *(_QWORD **)(a1 + 1464);
  if (v7 == (_QWORD *)(a1 + 1440))
  {
    v8 = 4;
    v7 = (_QWORD *)(a1 + 1440);
  }
  else
  {
    if (!v7)
      goto LABEL_14;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_14:
  v9 = *(_QWORD **)(a1 + 1432);
  if (v9 == (_QWORD *)(a1 + 1408))
  {
    v10 = 4;
    v9 = (_QWORD *)(a1 + 1408);
  }
  else
  {
    if (!v9)
      goto LABEL_19;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_19:
  v11 = *(_QWORD **)(a1 + 1400);
  if (v11 == (_QWORD *)(a1 + 1376))
  {
    v12 = 4;
    v11 = (_QWORD *)(a1 + 1376);
  }
  else
  {
    if (!v11)
      goto LABEL_24;
    v12 = 5;
  }
  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_24:
  v13 = *(_QWORD **)(a1 + 1368);
  if (v13 == (_QWORD *)(a1 + 1344))
  {
    v14 = 4;
    v13 = (_QWORD *)(a1 + 1344);
  }
  else
  {
    if (!v13)
      goto LABEL_29;
    v14 = 5;
  }
  (*(void (**)(void))(*v13 + 8 * v14))();
LABEL_29:
  v15 = *(_QWORD **)(a1 + 1336);
  if (v15 == (_QWORD *)(a1 + 1312))
  {
    v16 = 4;
    v15 = (_QWORD *)(a1 + 1312);
  }
  else
  {
    if (!v15)
      goto LABEL_34;
    v16 = 5;
  }
  (*(void (**)(void))(*v15 + 8 * v16))();
LABEL_34:
  v17 = *(_QWORD **)(a1 + 1304);
  if (v17 == (_QWORD *)(a1 + 1280))
  {
    v18 = 4;
    v17 = (_QWORD *)(a1 + 1280);
  }
  else
  {
    if (!v17)
      goto LABEL_39;
    v18 = 5;
  }
  (*(void (**)(void))(*v17 + 8 * v18))();
LABEL_39:
  v19 = *(_QWORD **)(a1 + 1272);
  if (v19 == (_QWORD *)(a1 + 1248))
  {
    v20 = 4;
    v19 = (_QWORD *)(a1 + 1248);
  }
  else
  {
    if (!v19)
      goto LABEL_44;
    v20 = 5;
  }
  (*(void (**)(void))(*v19 + 8 * v20))();
LABEL_44:
  v21 = *(_QWORD **)(a1 + 1240);
  if (v21 == (_QWORD *)(a1 + 1216))
  {
    v22 = 4;
    v21 = (_QWORD *)(a1 + 1216);
  }
  else
  {
    if (!v21)
      goto LABEL_49;
    v22 = 5;
  }
  (*(void (**)(void))(*v21 + 8 * v22))();
LABEL_49:
  v23 = *(_QWORD **)(a1 + 1208);
  if (v23 == (_QWORD *)(a1 + 1184))
  {
    v24 = 4;
    v23 = (_QWORD *)(a1 + 1184);
  }
  else
  {
    if (!v23)
      goto LABEL_54;
    v24 = 5;
  }
  (*(void (**)(void))(*v23 + 8 * v24))();
LABEL_54:
  std::mutex::~mutex((std::mutex *)(a1 + 1120));
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 1072));
  v25 = *(_QWORD **)(a1 + 1056);
  *(_QWORD *)(a1 + 1056) = 0;
  if (v25)
    sub_1002B51F4(a1 + 1056, v25);
  if (*(_BYTE *)(a1 + 1048))
  {
    v26 = *(void **)(a1 + 1000);
    if (v26)
    {
      *(_QWORD *)(a1 + 1008) = v26;
      operator delete(v26);
    }
  }
  if (*(_BYTE *)(a1 + 984) && *(char *)(a1 + 983) < 0)
    operator delete(*(void **)(a1 + 960));
  std::mutex::~mutex((std::mutex *)(a1 + 888));
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 840));

  v27 = *(_QWORD **)(a1 + 664);
  if (v27 == (_QWORD *)(a1 + 640))
  {
    v28 = 4;
    v27 = (_QWORD *)(a1 + 640);
  }
  else
  {
    if (!v27)
      goto LABEL_67;
    v28 = 5;
  }
  (*(void (**)(void))(*v27 + 8 * v28))();
LABEL_67:
  v29 = *(_QWORD **)(a1 + 632);
  if (v29 == (_QWORD *)(a1 + 608))
  {
    v30 = 4;
    v29 = (_QWORD *)(a1 + 608);
  }
  else
  {
    if (!v29)
      goto LABEL_72;
    v30 = 5;
  }
  (*(void (**)(void))(*v29 + 8 * v30))();
LABEL_72:
  v31 = *(_QWORD **)(a1 + 600);
  if (v31 == (_QWORD *)(a1 + 576))
  {
    v32 = 4;
    v31 = (_QWORD *)(a1 + 576);
  }
  else
  {
    if (!v31)
      goto LABEL_77;
    v32 = 5;
  }
  (*(void (**)(void))(*v31 + 8 * v32))();
LABEL_77:
  sub_10001AE68(a1 + 560);
  if (*(char *)(a1 + 559) < 0)
    operator delete(*(void **)(a1 + 536));
  v33 = *(std::__shared_weak_count **)(a1 + 24);
  if (v33)
    std::__shared_weak_count::__release_weak(v33);
  return a1;
}

void sub_1002AE5B0(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_1000131D8(a1);
  _Unwind_Resume(a1);
}

uint64_t sub_1002AE5BC(uint64_t a1)
{
  unsigned __int8 v1;
  uint64_t v2;
  NSObject *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  unint64_t *p_shared_weak_owners;
  unint64_t v20;
  std::__shared_weak_count *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  std::__shared_weak_count *v27;
  _BOOL4 v28;
  uint64_t v29;
  NSObject *v30;
  _QWORD *v31;
  void *v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  __int128 v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  _BYTE buf[18];

  v1 = atomic_load((unsigned __int8 *)(a1 + 836));
  if ((v1 & 1) == 0)
    return 0;
  v4 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#rose-ses,#hangup Session::invalidate", buf, 2u);
  }
  v5 = *(_QWORD **)(a1 + 1208);
  *(_QWORD *)(a1 + 1208) = 0;
  if (v5 == (_QWORD *)(a1 + 1184))
  {
    v6 = 4;
    v5 = (_QWORD *)(a1 + 1184);
  }
  else
  {
    if (!v5)
      goto LABEL_10;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_10:
  v7 = *(_QWORD **)(a1 + 1240);
  *(_QWORD *)(a1 + 1240) = 0;
  if (v7 == (_QWORD *)(a1 + 1216))
  {
    v8 = 4;
    v7 = (_QWORD *)(a1 + 1216);
  }
  else
  {
    if (!v7)
      goto LABEL_15;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_15:
  v9 = *(_QWORD **)(a1 + 1336);
  *(_QWORD *)(a1 + 1336) = 0;
  if (v9 == (_QWORD *)(a1 + 1312))
  {
    v10 = 4;
    v9 = (_QWORD *)(a1 + 1312);
  }
  else
  {
    if (!v9)
      goto LABEL_20;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_20:
  v11 = *(_QWORD **)(a1 + 1368);
  *(_QWORD *)(a1 + 1368) = 0;
  if (v11 == (_QWORD *)(a1 + 1344))
  {
    v12 = 4;
    v11 = (_QWORD *)(a1 + 1344);
  }
  else
  {
    if (!v11)
      goto LABEL_25;
    v12 = 5;
  }
  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_25:
  v13 = *(_QWORD **)(a1 + 1304);
  *(_QWORD *)(a1 + 1304) = 0;
  if (v13 == (_QWORD *)(a1 + 1280))
  {
    v14 = 4;
    v13 = (_QWORD *)(a1 + 1280);
  }
  else
  {
    if (!v13)
      goto LABEL_30;
    v14 = 5;
  }
  (*(void (**)(void))(*v13 + 8 * v14))();
LABEL_30:
  if (*(_BYTE *)(a1 + 800))
    *(_BYTE *)(a1 + 800) = 0;
  if (*(_BYTE *)(a1 + 820))
    *(_BYTE *)(a1 + 820) = 0;
  if (!*(_BYTE *)(a1 + 682))
  {
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
      sub_1003E684C();
    v2 = 0;
    goto LABEL_61;
  }
  v15 = *(unsigned __int16 *)(a1 + 680);
  v16 = sub_1002CA108();
  v17 = *(std::__shared_weak_count **)(a1 + 24);
  if (v17)
  {
    v18 = *(_QWORD *)(a1 + 16);
    p_shared_weak_owners = (unint64_t *)&v17->__shared_weak_owners_;
    do
      v20 = __ldxr(p_shared_weak_owners);
    while (__stxr(v20 + 1, p_shared_weak_owners));
    v41 = 0;
    v42 = 0;
    v21 = std::__shared_weak_count::lock(v17);
    v22 = v21;
    if (v21)
    {
      v23 = (unint64_t *)&v21->__shared_weak_owners_;
      do
        v24 = __ldxr(v23);
      while (__stxr(v24 + 1, v23));
      v41 = v18;
      v42 = v21;
      std::__shared_weak_count::__release_weak(v17);
      p_shared_owners = (unint64_t *)&v22->__shared_owners_;
      do
        v26 = __ldaxr(p_shared_owners);
      while (__stlxr(v26 - 1, p_shared_owners));
      if (v26)
        goto LABEL_51;
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      v27 = v22;
    }
    else
    {
      v41 = 0;
      v42 = 0;
      v27 = v17;
    }
    std::__shared_weak_count::__release_weak(v27);
  }
  else
  {
    v41 = 0;
    v42 = 0;
  }
LABEL_51:
  v28 = sub_1002CAF88((uint64_t)v16, &v41, v15);
  if (v42)
    std::__shared_weak_count::__release_weak(v42);
  v29 = *(_QWORD *)(a1 + 560);
  if (v29)
    sub_100276B60(v29, v15, (const std::string *)(a1 + 536));
  v2 = (v28 - 1);
  v30 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    v31 = (_QWORD *)(a1 + 536);
    if (*(char *)(a1 + 559) < 0)
      v31 = (_QWORD *)*v31;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v31;
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = v15;
    _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "#rose-ses,Invalidate session. (Session ID: %s, Ticket: %d)", buf, 0x12u);
  }
  if (*(_BYTE *)(a1 + 682))
    *(_BYTE *)(a1 + 682) = 0;
LABEL_61:
  v32 = sub_1002CA108();
  sub_10001ADBC(buf, (_QWORD *)(a1 + 16));
  v40 = *(_OWORD *)buf;
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = 0;
  sub_1002CE3E0((uint64_t)v32, (unint64_t *)&v40);
  v33 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
  if (*((_QWORD *)&v40 + 1))
  {
    v34 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  v36 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v37 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  atomic_store(0, (unsigned __int8 *)(a1 + 836));
  return v2;
}

void sub_1002AE9B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, char a13)
{
  if (a12)
    std::__shared_weak_count::__release_weak(a12);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002AE9F4(uint64_t a1)
{
  return sub_1002AE1E0(a1 - 8);
}

void sub_1002AE9FC(uint64_t a1)
{
  sub_1002AE1E0(a1);
  operator delete();
}

void sub_1002AEA20(uint64_t a1)
{
  sub_1002AE1E0(a1 - 8);
  operator delete();
}

uint64_t sub_1002AEA48(uint64_t a1)
{
  unsigned __int8 v1;
  void *v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  unint64_t *p_shared_weak_owners;
  unint64_t v19;
  std::__shared_weak_count *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  uint64_t v27;
  int v28;
  NSObject *v29;
  _QWORD *v30;
  int v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  NSObject *v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  __int128 v42;
  _BYTE buf[18];
  __int16 v44;
  const char *v45;

  v1 = atomic_load((unsigned __int8 *)(a1 + 836));
  if ((v1 & 1) != 0)
  {
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_FAULT))
      sub_1003E68D0();
    v37 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/Proximity/Daemon/Services/NearbyInteraction/UWB/NIServerRoseSession.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 86;
      v44 = 2080;
      v45 = "initialize";
      _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_INFO, "#rose-ses,%s:%d: assertion failure in %s", buf, 0x1Cu);
    }
    abort();
  }
  atomic_store(0, (unsigned int *)(a1 + 1064));
  v3 = sub_1002CA108();
  sub_10001ADBC(buf, (_QWORD *)(a1 + 16));
  v42 = *(_OWORD *)buf;
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = 0;
  sub_1002CE308((uint64_t)v3, (unint64_t *)&v42);
  v4 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
  if (*((_QWORD *)&v42 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v8 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = sub_1002CA108();
  v11 = v10[406];
  v12 = (std::__shared_weak_count *)v10[407];
  v40 = v11;
  v41 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  if (!v11)
  {
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
      sub_1003E6878();
    goto LABEL_45;
  }
  v15 = (std::__shared_weak_count *)sub_1002CA108();
  v16 = *(std::__shared_weak_count **)(a1 + 24);
  if (v16)
  {
    v17 = *(_QWORD *)(a1 + 16);
    p_shared_weak_owners = (unint64_t *)&v16->__shared_weak_owners_;
    do
      v19 = __ldxr(p_shared_weak_owners);
    while (__stxr(v19 + 1, p_shared_weak_owners));
    v38 = 0;
    v39 = 0;
    v20 = std::__shared_weak_count::lock(v16);
    v21 = v20;
    if (v20)
    {
      v22 = (unint64_t *)&v20->__shared_weak_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
      v38 = v17;
      v39 = v20;
      std::__shared_weak_count::__release_weak(v16);
      v24 = (unint64_t *)&v21->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (v25)
        goto LABEL_31;
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      v26 = v21;
    }
    else
    {
      v38 = 0;
      v39 = 0;
      v26 = v16;
    }
    std::__shared_weak_count::__release_weak(v26);
  }
  else
  {
    v38 = 0;
    v39 = 0;
  }
LABEL_31:
  v27 = sub_1002CA950(v15, &v38, a1 + 32);
  *(_WORD *)(a1 + 680) = v27;
  *(_BYTE *)(a1 + 682) = BYTE2(v27);
  if (v39)
  {
    std::__shared_weak_count::__release_weak(v39);
    v28 = *(unsigned __int8 *)(a1 + 682);
  }
  else
  {
    v28 = BYTE2(v27);
  }
  if (!v28)
  {
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
      sub_1003E68A4();
LABEL_45:
    v32 = 0xFFFFFFFFLL;
    goto LABEL_46;
  }
  v29 = (id)qword_10085F520;
  if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
  {
    v30 = (_QWORD *)(a1 + 536);
    if (*(char *)(a1 + 559) < 0)
      v30 = (_QWORD *)*v30;
    if (!*(_BYTE *)(a1 + 682))
      sub_10000BA44();
    v31 = *(unsigned __int16 *)(a1 + 680);
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v30;
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = v31;
    _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "#rose-ses,Service registration success. (Session ID: %s, Ticket: %d)", buf, 0x12u);
  }

  if (*(_BYTE *)(a1 + 820))
    *(_BYTE *)(a1 + 820) = 0;
  v32 = 0;
  atomic_store(1u, (unsigned __int8 *)(a1 + 836));
LABEL_46:
  v33 = v41;
  if (v41)
  {
    v34 = (unint64_t *)&v41->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  return v32;
}

void sub_1002AEE2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15)
{
  void *v15;

  sub_10001AE68((uint64_t)&a11);
  _Unwind_Resume(a1);
}

BOOL sub_1002AEE80(uint64_t a1)
{
  unsigned __int8 v1;
  int v2;
  NSObject *v4;
  int v5;
  const char *v6;
  __int16 v7;
  int v8;
  __int16 v9;
  const char *v10;

  v1 = atomic_load((unsigned __int8 *)(a1 + 836));
  if ((v1 & 1) == 0)
  {
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_FAULT))
      sub_1003E68FC();
    v4 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_INFO))
    {
      v5 = 136315650;
      v6 = "/Library/Caches/com.apple.xbs/Sources/Proximity/Daemon/Services/NearbyInteraction/UWB/NIServerRoseSession.mm";
      v7 = 1024;
      v8 = 116;
      v9 = 2080;
      v10 = "isInitiator";
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "#rose-ses,%s:%d: assertion failure in %s", (uint8_t *)&v5, 0x1Cu);
    }
    abort();
  }
  v2 = *(unsigned __int8 *)(a1 + 33);
  if (v2 == 100)
    sub_1003E6928();
  return v2 == 0;
}

BOOL sub_1002AEF8C(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  std::chrono::steady_clock::time_point v5;
  unsigned int v6;
  std::chrono::steady_clock::time_point v7;
  std::chrono::system_clock::time_point v8;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v9;
  std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> v10;
  unsigned int v11;
  _BOOL8 v12;
  NSObject *v13;
  const char *v14;
  std::unique_lock<std::mutex> v16;
  uint8_t buf[4];
  const char *v18;

  v16.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 1120);
  v16.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 1120));
  v4 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#rose-ses,#time-convert waitForTimeConversionReadiness before", buf, 2u);
  }
  v5.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_ + 1000000 * a2;
  while (1)
  {
    v6 = atomic_load((unsigned int *)(a1 + 1064));
    if (v6 == 1)
      break;
    if (std::chrono::steady_clock::now().__d_.__rep_ >= v5.__d_.__rep_)
      goto LABEL_20;
    v7.__d_.__rep_ = v5.__d_.__rep_ - std::chrono::steady_clock::now().__d_.__rep_;
    if (v7.__d_.__rep_ >= 1)
    {
      std::chrono::steady_clock::now();
      v8.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
      if (!v8.__d_.__rep_)
      {
        v9 = 0;
        goto LABEL_15;
      }
      if (v8.__d_.__rep_ < 1)
      {
        if ((unint64_t)v8.__d_.__rep_ >= 0xFFDF3B645A1CAC09)
          goto LABEL_14;
        v9 = 0x8000000000000000;
      }
      else
      {
        if ((unint64_t)v8.__d_.__rep_ > 0x20C49BA5E353F7)
        {
          v9 = 0x7FFFFFFFFFFFFFFFLL;
          goto LABEL_15;
        }
LABEL_14:
        v9 = 1000 * v8.__d_.__rep_;
LABEL_15:
        if (v9 > (v7.__d_.__rep_ ^ 0x7FFFFFFFFFFFFFFFLL))
        {
          v10.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
LABEL_18:
          std::condition_variable::__do_timed_wait((std::condition_variable *)(a1 + 1072), &v16, v10);
          std::chrono::steady_clock::now();
          goto LABEL_19;
        }
      }
      v10.__d_.__rep_ = v9 + v7.__d_.__rep_;
      goto LABEL_18;
    }
LABEL_19:
    if (std::chrono::steady_clock::now().__d_.__rep_ >= v5.__d_.__rep_)
    {
LABEL_20:
      v11 = atomic_load((unsigned int *)(a1 + 1064));
      v12 = v11 == 1;
      goto LABEL_22;
    }
  }
  v12 = 1;
LABEL_22:
  v13 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    v14 = "No";
    if (v12)
      v14 = "Yes";
    *(_DWORD *)buf = 136315138;
    v18 = v14;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#rose-ses,#time-convert waitForTimeConversionReadiness after. Is ready? %s", buf, 0xCu);
  }
  if (v16.__owns_)
    std::mutex::unlock(v16.__m_);
  return v12;
}

uint64_t sub_1002AF1B4()
{
  return 0;
}

void sub_1002AF1BC(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;

  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 672));
  v4 = atomic_load((unsigned __int8 *)(a1 + 836));
  if ((v4 & 1) != 0)
  {
    if (*(_BYTE *)(a2 + 600) && !*(_WORD *)(a2 + 144) && *(_BYTE *)(a2 + 8))
    {
      if (*(_QWORD *)(a1 + 1240))
      {
        sub_10001ADBC(&v13, (_QWORD *)(a1 + 16));
        v5 = *(_QWORD *)(a1 + 1240);
        if (!v5)
          sub_100027BC4();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v5 + 48))(v5, &v13, a2);
        v6 = v14;
        if (v14)
        {
          p_shared_owners = (unint64_t *)&v14->__shared_owners_;
          do
            v8 = __ldaxr(p_shared_owners);
          while (__stlxr(v8 - 1, p_shared_owners));
LABEL_16:
          if (!v8)
          {
            ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
            std::__shared_weak_count::__release_weak(v6);
          }
        }
      }
    }
    else if (*(_QWORD *)(a1 + 1272))
    {
      sub_10001ADBC(&v11, (_QWORD *)(a1 + 16));
      v9 = *(_QWORD *)(a1 + 1272);
      if (!v9)
        sub_100027BC4();
      (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v9 + 48))(v9, &v11, a2);
      v6 = v12;
      if (v12)
      {
        v10 = (unint64_t *)&v12->__shared_owners_;
        do
          v8 = __ldaxr(v10);
        while (__stlxr(v8 - 1, v10));
        goto LABEL_16;
      }
    }
  }
}

void sub_1002AF2D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_10001AE68((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1002AF2F8(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;

  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 672));
  v4 = atomic_load((unsigned __int8 *)(a1 + 836));
  if ((v4 & 1) != 0 && *(_QWORD *)(a1 + 1304))
  {
    sub_10001ADBC(&v9, (_QWORD *)(a1 + 16));
    v5 = *(_QWORD *)(a1 + 1304);
    if (!v5)
      sub_100027BC4();
    (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v5 + 48))(v5, &v9, a2);
    v6 = v10;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_1002AF3A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10001AE68((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1002AF3B8(uint64_t a1)
{
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 672));
  atomic_load((unsigned __int8 *)(a1 + 836));
}

void sub_1002AF3E4(uint64_t a1, unsigned __int16 *a2)
{
  NSObject *v4;
  unsigned __int8 v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  int v10;
  uint64_t v11;
  void **v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  void *__p;
  char v16;
  uint8_t buf[4];
  int v18;
  __int16 v19;
  uint64_t v20;
  __int16 v21;
  void **v22;

  v4 = (id)qword_10085F520;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    v10 = *a2;
    v11 = *((_QWORD *)a2 + 5);
    sub_1002AF5A0((unsigned __int8 **)a2 + 1);
    v12 = v16 >= 0 ? &__p : (void **)__p;
    *(_DWORD *)buf = 67109635;
    v18 = v10;
    v19 = 2049;
    v20 = v11;
    v21 = 2081;
    v22 = v12;
    _os_log_debug_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#rose-ses,didReceiveRemoteData (tkt %d, addr 0x%{private}llx): %{private}s", buf, 0x1Cu);
    if (v16 < 0)
      operator delete(__p);
  }

  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 672));
  v5 = atomic_load((unsigned __int8 *)(a1 + 836));
  if ((v5 & 1) != 0 && *(_QWORD *)(a1 + 1336))
  {
    sub_10001ADBC(&v13, (_QWORD *)(a1 + 16));
    v6 = *(_QWORD *)(a1 + 1336);
    if (!v6)
      sub_100027BC4();
    (*(void (**)(uint64_t, uint64_t *, unsigned __int16 *))(*(_QWORD *)v6 + 48))(v6, &v13, a2);
    v7 = v14;
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1002AF578(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10001AE68((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1002AF5A0(unsigned __int8 **a1)
{
  _QWORD *v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  _QWORD *v5;
  char v7;
  uint64_t v8;
  _QWORD v9[10];
  char v10;
  uint64_t v11;

  sub_100210A10((uint64_t)&v8);
  v7 = 48;
  v2 = sub_10015BFA0(&v8, &v7);
  *(_DWORD *)((char *)v2 + *(_QWORD *)(*v2 - 24) + 8) = *(_DWORD *)((_BYTE *)v2 + *(_QWORD *)(*v2 - 24) + 8) & 0xFFFFFFB5 | 8;
  v3 = *a1;
  v4 = a1[1];
  if (*a1 != v4)
  {
    do
    {
      *(_QWORD *)((char *)&v9[2] + *(_QWORD *)(v8 - 24)) = 2;
      v5 = (_QWORD *)std::ostream::operator<<(&v8, *v3);
      sub_100054C60(v5, (uint64_t)" ", 1);
      ++v3;
    }
    while (v3 != v4);
  }
  std::stringbuf::str(v9);
  if (v10 < 0)
    operator delete((void *)v9[8]);
  std::streambuf::~streambuf(v9);
  return std::ios::~ios(&v11);
}

void sub_1002AF6DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100210AFC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1002AF6F8(uint64_t a1, uint64_t a2)
{
  int v4;
  float v5;
  NSObject *v6;
  int v7;
  _QWORD *v8;
  int v9;
  int v10;
  NSObject *v11;
  NSObject *v12;
  int v13;
  int v14;
  int v15;
  _QWORD *v16;
  int v17;
  unsigned __int8 *v18;
  int v19;
  float v20;
  float v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  int v25;
  int v26;
  _QWORD *v27;
  NSObject *v28;
  NSObject *v29;
  unsigned __int8 *v30;
  NSObject *v31;
  NSObject *v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  uint8_t buf[4];
  _BYTE v36[26];
  __int16 v37;
  int v38;

  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 672));
  if (*(_BYTE *)(a1 + 682))
  {
    v4 = *(unsigned __int16 *)(a1 + 680);
    if (*(unsigned __int16 *)(a2 + 26) != v4)
    {
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_FAULT))
        sub_1003E6A30();
      v28 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)v36 = "/Library/Caches/com.apple.xbs/Sources/Proximity/Daemon/Services/NearbyInteraction/UWB/NIServerRoseSession.mm";
        *(_WORD *)&v36[8] = 1024;
        *(_DWORD *)&v36[10] = 214;
        *(_WORD *)&v36[14] = 2080;
        *(_QWORD *)&v36[16] = "didReceiveRangingRateUpdateEvent";
        _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_INFO, "#rose-ses,%s:%d: assertion failure in %s", buf, 0x1Cu);
      }
      abort();
    }
    v5 = sub_1002AFC28(a1);
    if (*(_BYTE *)(a2 + 31) == 2)
    {
      v6 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
      {
        v7 = *(unsigned __int8 *)(a2 + 30);
        v8 = (_QWORD *)(a1 + 536);
        if (*(char *)(a1 + 559) < 0)
          v8 = (_QWORD *)*v8;
        *(_DWORD *)buf = 67109634;
        *(_DWORD *)v36 = v7;
        *(_WORD *)&v36[4] = 2080;
        *(_QWORD *)&v36[6] = v8;
        *(_WORD *)&v36[14] = 1024;
        *(_DWORD *)&v36[16] = v4;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#rose-ses,#throttle interrupted by silent restart, but eventually succeeded in updating to subrate %d. (Session ID: %s, Ticket: %d)", buf, 0x18u);
      }
      v9 = 0;
      atomic_store(*(_BYTE *)(a2 + 30), (unsigned __int8 *)(a1 + 837));
      v10 = -1;
    }
    else if (*(_DWORD *)(a2 + 32))
    {
      v11 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
      {
        v25 = *(unsigned __int8 *)(a2 + 30);
        v26 = *(_DWORD *)(a2 + 32);
        v27 = (_QWORD *)(a1 + 536);
        if (*(char *)(a1 + 559) < 0)
          v27 = (_QWORD *)*v27;
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)v36 = v25;
        *(_WORD *)&v36[4] = 1024;
        *(_DWORD *)&v36[6] = v26;
        *(_WORD *)&v36[10] = 2080;
        *(_QWORD *)&v36[12] = v27;
        *(_WORD *)&v36[20] = 1024;
        *(_DWORD *)&v36[22] = v4;
        _os_log_error_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "#rose-ses,#throttle failure to throttle. Current known subrate: %d. FW error code: 0x%x. (Session ID: %s, Ticket: %d)", buf, 0x1Eu);
      }
      atomic_store(*(_BYTE *)(a2 + 30), (unsigned __int8 *)(a1 + 837));
      v10 = -1;
      v9 = -1;
    }
    else
    {
      v12 = qword_10085F520;
      if (*(_BYTE *)(a2 + 31))
      {
        if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_FAULT))
          sub_1003E6A04();
        v29 = qword_10085F520;
        if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)v36 = "/Library/Caches/com.apple.xbs/Sources/Proximity/Daemon/Services/NearbyInteraction/UWB/NIServerRoseSession.mm";
          *(_WORD *)&v36[8] = 1024;
          *(_DWORD *)&v36[10] = 235;
          *(_WORD *)&v36[14] = 2080;
          *(_QWORD *)&v36[16] = "didReceiveRangingRateUpdateEvent";
          _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_INFO, "#rose-ses,%s:%d: assertion failure in %s", buf, 0x1Cu);
        }
        abort();
      }
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
      {
        v13 = *(unsigned __int8 *)(a2 + 63);
        v14 = *(unsigned __int8 *)(a2 + 62);
        v15 = *(unsigned __int16 *)(a2 + 60);
        v16 = (_QWORD *)(a1 + 536);
        if (*(char *)(a1 + 559) < 0)
          v16 = (_QWORD *)*v16;
        *(_DWORD *)buf = 67110146;
        *(_DWORD *)v36 = v13;
        *(_WORD *)&v36[4] = 1024;
        *(_DWORD *)&v36[6] = v14;
        *(_WORD *)&v36[10] = 1024;
        *(_DWORD *)&v36[12] = v15;
        *(_WORD *)&v36[16] = 2080;
        *(_QWORD *)&v36[18] = v16;
        v37 = 1024;
        v38 = v4;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#rose-ses,#throttle successful throttle. New: %d, Old: %d, Cycle: %d. (Session ID: %s, Ticket: %d)", buf, 0x24u);
      }
      v18 = (unsigned __int8 *)(a2 + 62);
      v17 = *(unsigned __int8 *)(a2 + 62);
      v19 = atomic_load((unsigned __int8 *)(a1 + 837));
      if (v17 != v19)
      {
        v30 = (unsigned __int8 *)(a1 + 837);
        v31 = qword_10085F520;
        if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_FAULT))
          sub_1003E697C(v18, v30, v31);
        v32 = qword_10085F520;
        if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)v36 = "/Library/Caches/com.apple.xbs/Sources/Proximity/Daemon/Services/NearbyInteraction/UWB/NIServerRoseSession.mm";
          *(_WORD *)&v36[8] = 1024;
          *(_DWORD *)&v36[10] = 239;
          *(_WORD *)&v36[14] = 2080;
          *(_QWORD *)&v36[16] = "didReceiveRangingRateUpdateEvent";
          _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_INFO, "#rose-ses,%s:%d: assertion failure in %s", buf, 0x1Cu);
        }
        abort();
      }
      v9 = 0;
      atomic_store(*(_BYTE *)(a2 + 63), (unsigned __int8 *)(a1 + 837));
      v10 = *(unsigned __int16 *)(a2 + 60);
    }
    v20 = sub_1002AFC28(a1);
    if (*(_QWORD *)(a1 + 1400))
    {
      v21 = v20;
      sub_10001ADBC(&v33, (_QWORD *)(a1 + 16));
      sub_1002AFD34(a1 + 1376, (uint64_t)&v33, v9, v10, v21, v5);
      v22 = v34;
      if (v34)
      {
        p_shared_owners = (unint64_t *)&v34->__shared_owners_;
        do
          v24 = __ldaxr(p_shared_owners);
        while (__stlxr(v24 - 1, p_shared_owners));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_FAULT))
  {
    sub_1003E6950();
  }
}

void sub_1002AFC0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10001AE68((uint64_t)&a9);
  _Unwind_Resume(a1);
}

float sub_1002AFC28(uint64_t a1)
{
  unsigned int v2;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  int v13;
  const char *v14;
  __int16 v15;
  int v16;
  __int16 v17;
  const char *v18;

  if (sub_1002AEE80(a1))
  {
    v4 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_FAULT))
      sub_1003E6A5C(v4, v5, v6, v7, v8, v9, v10, v11);
    v12 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_INFO))
    {
      v13 = 136315650;
      v14 = "/Library/Caches/com.apple.xbs/Sources/Proximity/Daemon/Services/NearbyInteraction/UWB/NIServerRoseSession.mm";
      v15 = 1024;
      v16 = 572;
      v17 = 2080;
      v18 = "currentResponderParticipationThrottleRate";
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "#rose-ses,%s:%d: assertion failure in %s", (uint8_t *)&v13, 0x1Cu);
    }
    abort();
  }
  v2 = atomic_load((unsigned __int8 *)(a1 + 837));
  return (double)v2 / 19.0;
}

uint64_t sub_1002AFD34(uint64_t a1, uint64_t a2, int a3, int a4, float a5, float a6)
{
  uint64_t v6;
  int v8;
  float v9;
  float v10;
  int v11;

  v11 = a3;
  v9 = a6;
  v10 = a5;
  v8 = a4;
  v6 = *(_QWORD *)(a1 + 24);
  if (!v6)
    sub_100027BC4();
  return (*(uint64_t (**)(uint64_t, uint64_t, int *, float *, float *, int *))(*(_QWORD *)v6 + 48))(v6, a2, &v11, &v10, &v9, &v8);
}

void sub_1002AFD80(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  int v5;
  char v6;
  int v7;
  char v8;
  void *v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  __int16 v13;
  char v14;
  __int16 v15;
  int v16;
  int v17;
  char v18;
  int v19;
  char v20;
  int v21;
  char v22;
  int v23;
  float v24;
  NSObject *v25;
  _BYTE *v26;
  uint64_t v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  unsigned __int8 *v32;
  unsigned int v33;
  BOOL v34;
  int v35;
  int v36;
  NSObject *v37;
  _BYTE *v38;
  uint64_t v39;
  uint64_t v40;
  double v41;
  char v42;
  int v43;
  void *v44;
  int v45;
  int v46;
  unsigned int v47;
  int v48;
  __int16 v49;
  char v50;
  char v51;
  char v52;
  __int16 v53;
  char v54;
  unint64_t v55;
  __int16 *v56;
  NSObject *v57;
  _BYTE *v58;
  NSObject *v59;
  _BYTE *v60;
  uint64_t v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  void *v66;
  uint64_t v67;
  NSObject *v68;
  int v69;
  int v70;
  int v71;
  NSObject *v72;
  uint64_t v73;
  std::__shared_weak_count *v74;
  uint64_t v75;
  std::__shared_weak_count *v76;
  _BYTE __p[12];
  __int16 v78;
  int v79;
  __int16 v80;
  const char *v81;
  uint8_t buf[4];
  _BYTE *v83;
  uint64_t v84;
  void *v85;
  void *v86;
  uint64_t v87;
  int v88;
  int v89;
  __int16 v90;
  char v91;
  char v92;
  float v93;
  void *v94;
  double v95;
  char v96;
  double v97;
  char v98;
  char v99;
  void *v100;
  void *v101;
  double v102;

  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 672));
  if (a2[2])
  {
    std::mutex::lock((std::mutex *)(a1 + 888));
    operator new();
  }
  v4 = a2[3];
  if (v4)
  {
    if (*(_BYTE *)v4)
    {
      if (*(_BYTE *)v4 == 1)
      {
        v5 = *(_DWORD *)(v4 + 29);
        v6 = *(_BYTE *)(v4 + 33);
        v7 = *(_DWORD *)(v4 + 37);
        v8 = *(_BYTE *)(v4 + 36);
        v9 = *(void **)(v4 + 41);
        v10 = *(_QWORD *)(v4 + 49);
        v11 = *(unsigned __int8 *)(v4 + 34);
        v12 = *(_DWORD *)(v4 + 57);
        v13 = *(unsigned __int8 *)(v4 + 61);
        v14 = *(_BYTE *)(v4 + 62);
        v15 = *(_WORD *)(v4 + 63);
        v16 = *(_DWORD *)(v4 + 65);
        v17 = *(_DWORD *)(v4 + 69);
        v18 = *(_BYTE *)(v4 + 73);
        v19 = *(__int16 *)(v4 + 74);
        v20 = *(_BYTE *)(v4 + 76);
        v21 = *(__int16 *)(v4 + 77);
        v22 = *(_BYTE *)(v4 + 79);
        v23 = *(__int16 *)(v4 + 80);
        LODWORD(v84) = v5;
        BYTE4(v84) = v6;
        LODWORD(v85) = v7;
        BYTE4(v85) = v8;
        v86 = v9;
        v87 = v10;
        v88 = v12;
        LOWORD(v89) = v13;
        BYTE2(v89) = v14;
        v90 = v15;
        v91 = v11 & 0xF;
        v92 = v11 >> 4;
        v24 = (double)v16 / 1.0e12 * 299792458.0;
        v93 = v24;
        LODWORD(v94) = v17;
        BYTE4(v94) = v18;
        v95 = (double)v19 * 0.25;
        v96 = v20;
        v97 = (double)v21 * 0.25;
        v98 = v22;
        *(double *)&v100 = (double)v23 * 0.25;
        LOBYTE(v101) = v22;
        v102 = *(double *)&v100;
        v25 = (id)qword_10085F520;
        if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
        {
          sub_100300868((unsigned __int16 *)&v84);
          v26 = SBYTE3(v81) >= 0 ? __p : *(_BYTE **)__p;
          *(_DWORD *)buf = 136315138;
          v83 = v26;
          _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "#rose-ses,Anchor ranging block summary: %s", buf, 0xCu);
          if (SBYTE3(v81) < 0)
            operator delete(*(void **)__p);
        }

        v27 = *(_QWORD *)(a1 + 560);
        if (v27)
          (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v27 + 96))(v27, &v84);
        if (*(_QWORD *)(a1 + 1464))
        {
          sub_10001ADBC(&v75, (_QWORD *)(a1 + 16));
          v28 = *(_QWORD *)(a1 + 1464);
          if (!v28)
            sub_100027BC4();
          (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v28 + 48))(v28, &v75, &v84);
          v29 = v76;
          if (v76)
          {
            p_shared_owners = (unint64_t *)&v76->__shared_owners_;
            do
              v31 = __ldaxr(p_shared_owners);
            while (__stlxr(v31 - 1, p_shared_owners));
            if (!v31)
            {
              ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
              std::__shared_weak_count::__release_weak(v29);
            }
          }
        }
      }
      return;
    }
    v42 = *(_BYTE *)(v4 + 33);
    v43 = *(_DWORD *)(v4 + 37);
    v44 = *(void **)(v4 + 41);
    v45 = *(_DWORD *)(v4 + 49);
    v46 = *(_DWORD *)(v4 + 53);
    v47 = *(unsigned __int8 *)(v4 + 34);
    v48 = *(_DWORD *)(v4 + 57);
    v49 = *(unsigned __int8 *)(v4 + 61);
    v50 = *(_BYTE *)(v4 + 90);
    v51 = *(_BYTE *)(v4 + 91);
    v52 = *(_BYTE *)(v4 + 92);
    v53 = *(_WORD *)(v4 + 93);
    v54 = *(_BYTE *)(v4 + 95);
    LODWORD(v84) = *(_DWORD *)(v4 + 29);
    BYTE4(v84) = v42;
    LODWORD(v85) = v43;
    v86 = v44;
    LODWORD(v87) = v45;
    BYTE4(v87) = v47 & 0xF;
    BYTE5(v87) = v47 >> 4;
    v88 = v46;
    v89 = v48;
    v90 = v49;
    v91 = v50;
    sub_1002FEB5C(v51, (unint64_t *)&v94);
    LOBYTE(v97) = v52;
    WORD1(v97) = v53;
    BYTE4(v97) = 0;
    v98 = 0;
    v99 = v54;
    v101 = 0;
    v102 = 0.0;
    *(double *)&v100 = 0.0;
    if (*(_BYTE *)(v4 + 96))
    {
      v55 = 0;
      v56 = (__int16 *)(v4 + 99);
      do
      {
        sub_1002B0720(&v84, *((_BYTE *)v56 - 2), *((_BYTE *)v56 - 1), *v56);
        v56 += 2;
        ++v55;
      }
      while (v55 < *(unsigned __int8 *)(v4 + 96));
    }
    v57 = (id)qword_10085F520;
    if (os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT))
    {
      sub_1002FF3B0((unsigned __int16 *)&v84);
      v58 = SBYTE3(v81) >= 0 ? __p : *(_BYTE **)__p;
      *(_DWORD *)buf = 136315138;
      v83 = v58;
      _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_DEFAULT, "#rose-ses,Ranging block summary: %s", buf, 0xCu);
      if (SBYTE3(v81) < 0)
        operator delete(*(void **)__p);
    }

    v59 = (id)qword_10085F520;
    if (os_log_type_enabled(v59, OS_LOG_TYPE_DEFAULT))
    {
      sub_100300604((unsigned __int16 *)&v84);
      v60 = SBYTE3(v81) >= 0 ? __p : *(_BYTE **)__p;
      *(_DWORD *)buf = 136315138;
      v83 = v60;
      _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_DEFAULT, "#rose-ses,RBSS: %s", buf, 0xCu);
      if (SBYTE3(v81) < 0)
        operator delete(*(void **)__p);
    }

    v61 = *(_QWORD *)(a1 + 560);
    if (v61)
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v61 + 88))(v61, &v84);
    if (*(_QWORD *)(a1 + 1432))
    {
      sub_10001ADBC(&v73, (_QWORD *)(a1 + 16));
      v62 = *(_QWORD *)(a1 + 1432);
      if (!v62)
        sub_100027BC4();
      (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v62 + 48))(v62, &v73, &v84);
      v63 = v74;
      if (v74)
      {
        v64 = (unint64_t *)&v74->__shared_owners_;
        do
          v65 = __ldaxr(v64);
        while (__stlxr(v65 - 1, v64));
        if (!v65)
        {
          ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
          std::__shared_weak_count::__release_weak(v63);
        }
      }
    }
    if (*(double *)&v100 != 0.0)
    {
      v101 = v100;
      operator delete(v100);
    }
    v66 = v94;
    if (*(double *)&v94 != 0.0)
    {
      v95 = *(double *)&v94;
LABEL_76:
      operator delete(v66);
    }
  }
  else
  {
    v32 = (unsigned __int8 *)a2[4];
    if (v32)
    {
      v33 = *v32;
      v34 = v33 < 5 && (v33 & 0x1F) != 0;
      if (v33 >= 5)
        v35 = 0;
      else
        v35 = *v32;
      v36 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 144))(a1);
      sub_1002B49E0((uint64_t)&v84, v36, v35, *(_WORD *)(a2[4] + 4), (__int16 *)(a2[4] + 6), 6, *(_WORD *)(a2[4] + 20), *(__int16 *)(a2[4] + 22), *(_WORD *)(a2[4] + 24));
      v37 = (id)qword_10085F520;
      if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
      {
        sub_1001A24D8((unsigned int *)&v84);
        v38 = SBYTE3(v81) >= 0 ? __p : *(_BYTE **)__p;
        *(_DWORD *)buf = 136315138;
        v83 = v38;
        _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "#rose-ses,Session stats: %s", buf, 0xCu);
        if (SBYTE3(v81) < 0)
          operator delete(*(void **)__p);
      }

      v39 = *(_QWORD *)(a1 + 600);
      if (v39)
        (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v39 + 48))(v39, &v84);
      v40 = *(_QWORD *)(a1 + 560);
      if (v40)
        (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v40 + 104))(v40, &v84);
      if (*(_QWORD *)(a1 + 664) && (v41 = sub_10000883C(), (v35 - 2) < 3))
      {
        sub_1001DBD50(a1 + 640, (v35 - 2) + 2, v41);
      }
      else if ((v33 & 0x1F) == 1 && (v67 = *(_QWORD *)(a1 + 632)) != 0 && v33 <= 4)
      {
        v70 = *(unsigned __int8 *)(a2[4] + 3);
        if (v70 == 2)
        {
          v71 = 1;
        }
        else if (v70 == 3)
        {
          v71 = 2;
        }
        else
        {
          if (!*(_BYTE *)(a2[4] + 3))
          {
            if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_FAULT))
              sub_1003E6AF8();
            v72 = qword_10085F520;
            if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)__p = 136315650;
              *(_QWORD *)&__p[4] = "/Library/Caches/com.apple.xbs/Sources/Proximity/Daemon/Services/NearbyInteraction/UWB"
                                   "/NIServerRoseSession.mm";
              v78 = 1024;
              v79 = 352;
              v80 = 2080;
              v81 = "didReceiveAlishaUpdate";
              _os_log_impl((void *)&_mh_execute_header, v72, OS_LOG_TYPE_INFO, "#rose-ses,%s:%d: assertion failure in %s", __p, 0x1Cu);
            }
            abort();
          }
          v71 = 0;
        }
        *(_DWORD *)__p = v71;
        (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v67 + 48))(v67, __p);
      }
      else if (!v34)
      {
        std::mutex::lock((std::mutex *)(a1 + 888));
        sub_1002B082C(a1 + 992, (uint64_t)&v84);
        std::mutex::unlock((std::mutex *)(a1 + 888));
        std::condition_variable::notify_one((std::condition_variable *)(a1 + 840));
      }
      v66 = v85;
      if (v85)
      {
        v86 = v85;
        goto LABEL_76;
      }
    }
    else
    {
      v68 = qword_10085F520;
      if (a2[5])
      {
        if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
        {
          v69 = *(_DWORD *)(a2[5] + 24);
          LODWORD(v84) = 67109120;
          HIDWORD(v84) = v69;
          _os_log_impl((void *)&_mh_execute_header, v68, OS_LOG_TYPE_DEFAULT, "#rose-ses,KeyExpiredEvent for uwb session id %u.", (uint8_t *)&v84, 8u);
        }
      }
      else if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_FAULT))
      {
        sub_1003E6ACC();
      }
    }
  }
}

void sub_1002B0648(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,void *__p,uint64_t a23)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1002B0720(_QWORD *a1, char a2, char a3, int a4)
{
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  double v10;
  unint64_t v11;
  char *v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  double *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char *v24;

  v9 = a1[13];
  v7 = (uint64_t)(a1 + 13);
  v8 = v9;
  v10 = (double)a4 * 0.25;
  v11 = *(_QWORD *)(v7 - 8);
  if (v11 >= v9)
  {
    v13 = (void **)(v7 - 16);
    v14 = *(_QWORD *)(v7 - 16);
    v15 = (uint64_t)(v11 - v14) >> 4;
    v16 = v15 + 1;
    if ((unint64_t)(v15 + 1) >> 60)
      sub_100026E7C();
    v17 = v8 - v14;
    if (v17 >> 3 > v16)
      v16 = v17 >> 3;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF0)
      v18 = 0xFFFFFFFFFFFFFFFLL;
    else
      v18 = v16;
    v19 = (char *)sub_10013A59C(v7, v18);
    v20 = (double *)&v19[16 * v15];
    v22 = &v19[16 * v21];
    *(_BYTE *)v20 = a2;
    *((_BYTE *)v20 + 1) = a3;
    v20[1] = v10;
    v12 = (char *)(v20 + 2);
    v24 = (char *)a1[11];
    v23 = (char *)a1[12];
    if (v23 != v24)
    {
      do
      {
        *((_OWORD *)v20 - 1) = *((_OWORD *)v23 - 1);
        v20 -= 2;
        v23 -= 16;
      }
      while (v23 != v24);
      v23 = (char *)*v13;
    }
    a1[11] = v20;
    a1[12] = v12;
    a1[13] = v22;
    if (v23)
      operator delete(v23);
  }
  else
  {
    *(_BYTE *)v11 = a2;
    *(_BYTE *)(v11 + 1) = a3;
    v12 = (char *)(v11 + 16);
    *(double *)(v11 + 8) = v10;
  }
  a1[12] = v12;
}

uint64_t sub_1002B082C(uint64_t a1, uint64_t a2)
{
  int v4;
  __int128 v5;
  __int128 v6;

  v4 = *(unsigned __int8 *)(a1 + 56);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  if (v4)
  {
    if (a1 != a2)
      sub_1001B04E4((char *)(a1 + 8), *(char **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 1);
    v5 = *(_OWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = v5;
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    sub_1001B0668((_QWORD *)(a1 + 8), *(const void **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 1);
    v6 = *(_OWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = v6;
    *(_BYTE *)(a1 + 56) = 1;
  }
  return a1;
}

void sub_1002B08D0(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v4;
  int v5;
  int v6;
  unsigned __int8 v7;
  int v8;
  unsigned __int8 v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  __int16 v13;
  unsigned __int8 v14;
  __int16 v15;
  int v16;
  int v17;
  unsigned __int8 v18;
  int v19;
  unsigned __int8 v20;
  int v21;
  char v22;
  int v23;
  float v24;
  NSObject *v25;
  void **v26;
  uint64_t v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  int v32;
  uint64_t v33;
  int *v34;
  char *v35;
  __int16 *v36;
  unsigned __int8 v37;
  int v38;
  uint64_t v39;
  __int16 v40;
  __int16 v41;
  int v42;
  int v43;
  __int16 v44;
  unsigned __int8 v45;
  char v46;
  unsigned __int8 v47;
  unsigned __int8 v48;
  unint64_t v49;
  __int16 *v50;
  float v51;
  NSObject *v52;
  void **v53;
  uint64_t v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  int v59;
  unsigned __int8 v60;
  int v61;
  uint64_t v62;
  __int16 v63;
  __int16 v64;
  int v65;
  int v66;
  __int16 v67;
  unsigned __int8 v68;
  char v69;
  unsigned __int8 v70;
  unsigned __int8 v71;
  NSObject *v72;
  void **v73;
  uint64_t v74;
  uint64_t v75;
  double v76;
  char v77;
  double v78;
  unsigned __int8 v79;
  int v80;
  double v81;
  __int16 v82;
  char v83;
  __int16 v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  unsigned __int8 v88;
  int v89;
  char v90;
  NSObject *v91;
  void **v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD v95[2];
  _QWORD v96[2];
  uint64_t v97;
  int v98;
  unsigned __int8 v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  int v103;
  __int16 v104;
  __int16 v105;
  float v106;
  void *v107;
  double v108;
  unsigned __int8 v109;
  double v110;
  char v111;
  unsigned __int8 v112;
  void *__p;
  void *v114;
  double v115;
  char v116;
  uint64_t v117;
  std::__shared_weak_count *v118;
  uint64_t v119;
  std::__shared_weak_count *v120;
  void *v121[2];
  char v122;
  uint8_t buf[4];
  void **v124;

  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 672));
  v4 = *(unsigned __int8 **)(a2 + 16);
  if (!v4)
    return;
  v5 = *(_DWORD *)(v4 + 3);
  v6 = *v4;
  if (v5 != 25)
  {
    if (v5 != 24)
      return;
    if (v6 == 1)
    {
      v7 = v4[33];
      v8 = *(_DWORD *)(v4 + 37);
      v9 = v4[36];
      v10 = *(_QWORD *)(v4 + 41);
      v11 = *(_QWORD *)(v4 + 49);
      v12 = *(_DWORD *)(v4 + 57);
      v13 = v4[61];
      v14 = v4[62];
      v15 = *(_WORD *)(v4 + 63);
      v16 = *(_DWORD *)(v4 + 65);
      v17 = *(_DWORD *)(v4 + 69);
      v18 = v4[73];
      v19 = *((__int16 *)v4 + 37);
      v20 = v4[76];
      v21 = *(__int16 *)(v4 + 77);
      v22 = v4[79];
      v23 = *((__int16 *)v4 + 40);
      LODWORD(v97) = *(_DWORD *)(v4 + 29);
      BYTE4(v97) = v7;
      v98 = v8;
      v99 = v9;
      v100 = v10;
      v101 = v11;
      v102 = v12;
      LOWORD(v103) = v13;
      BYTE2(v103) = v14;
      v104 = v15;
      v105 = 257;
      v24 = (double)v16 / 1.0e12 * 299792458.0;
      v106 = v24;
      LODWORD(v107) = v17;
      BYTE4(v107) = v18;
      v108 = (double)v19 * 0.25;
      v109 = v20;
      v110 = (double)v21 * 0.25;
      v111 = v22;
      *(double *)&__p = (double)v23 * 0.25;
      LOBYTE(v114) = v22;
      v115 = *(double *)&__p;
      v25 = (id)qword_10085F520;
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
      {
        sub_100300868((unsigned __int16 *)&v97);
        v26 = v122 >= 0 ? v121 : (void **)v121[0];
        *(_DWORD *)buf = 136315138;
        v124 = v26;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "#rose-ses,Responder ranging block summary: %s", buf, 0xCu);
        if (v122 < 0)
          operator delete(v121[0]);
      }

      v27 = *(_QWORD *)(a1 + 560);
      if (v27)
        (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v27 + 96))(v27, &v97);
      if (*(_QWORD *)(a1 + 1464))
      {
        sub_10001ADBC(&v119, (_QWORD *)(a1 + 16));
        v28 = *(_QWORD *)(a1 + 1464);
        if (!v28)
          sub_100027BC4();
        (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v28 + 48))(v28, &v119, &v97);
        v29 = v120;
        if (v120)
        {
          p_shared_owners = (unint64_t *)&v120->__shared_owners_;
          do
            v31 = __ldaxr(p_shared_owners);
          while (__stlxr(v31 - 1, p_shared_owners));
          if (!v31)
          {
            ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
            std::__shared_weak_count::__release_weak(v29);
          }
        }
      }
      return;
    }
    if (*v4)
      return;
    v37 = v4[33];
    v38 = *(_DWORD *)(v4 + 37);
    v39 = *(_QWORD *)(v4 + 41);
    v40 = *(_WORD *)(v4 + 49);
    v41 = *(_WORD *)(v4 + 51);
    v42 = *(_DWORD *)(v4 + 53);
    v43 = *(_DWORD *)(v4 + 57);
    v44 = v4[61];
    v45 = v4[90];
    v46 = v4[91];
    v47 = v4[92];
    v48 = v4[95];
    LODWORD(v97) = *(_DWORD *)(v4 + 29);
    BYTE4(v97) = v37;
    v98 = v38;
    v100 = v39;
    LOWORD(v101) = v40;
    WORD1(v101) = v41;
    WORD2(v101) = 257;
    v102 = v42;
    v103 = v43;
    v104 = v44;
    LOBYTE(v105) = v45;
    sub_1002FEB5C(v46, (unint64_t *)&v107);
    LOBYTE(v110) = v47;
    WORD1(v110) = v41;
    BYTE4(v110) = 0;
    v111 = 0;
    v112 = v48;
    v114 = 0;
    v115 = 0.0;
    *(double *)&__p = 0.0;
    if (v4[96])
    {
      v49 = 0;
      v50 = (__int16 *)(v4 + 99);
      do
      {
        sub_1002B0720(&v97, *((_BYTE *)v50 - 2), *((_BYTE *)v50 - 1), *v50);
        v50 += 2;
        ++v49;
      }
      while (v49 < v4[96]);
    }
    if (v4[62])
    {
      v51 = (double)*(int *)(v4 + 63) / 1.0e12 * 299792458.0;
      *((float *)&v110 + 1) = v51;
      v111 = 1;
    }
    v52 = (id)qword_10085F520;
    if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
    {
      sub_1002FF3B0((unsigned __int16 *)&v97);
      v53 = v122 >= 0 ? v121 : (void **)v121[0];
      *(_DWORD *)buf = 136315138;
      v124 = v53;
      _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_DEFAULT, "#rose-ses,Initiator ranging block summary: %s", buf, 0xCu);
      if (v122 < 0)
        operator delete(v121[0]);
    }

    v54 = *(_QWORD *)(a1 + 560);
    if (v54)
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v54 + 88))(v54, &v97);
    if (*(_QWORD *)(a1 + 1432))
    {
      sub_10001ADBC(&v117, (_QWORD *)(a1 + 16));
      v55 = *(_QWORD *)(a1 + 1432);
      if (!v55)
        sub_100027BC4();
      (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v55 + 48))(v55, &v117, &v97);
      v56 = v118;
      if (v118)
      {
        v57 = (unint64_t *)&v118->__shared_owners_;
        do
          v58 = __ldaxr(v57);
        while (__stlxr(v58 - 1, v57));
        if (!v58)
        {
          ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
          std::__shared_weak_count::__release_weak(v56);
        }
      }
    }
    goto LABEL_57;
  }
  if (v6 != 1)
  {
    if (*v4)
      return;
    v59 = *(_DWORD *)(v4 + 29);
    v60 = v4[33];
    v61 = *(_DWORD *)(v4 + 37);
    v62 = *(_QWORD *)(v4 + 41);
    v63 = *(_WORD *)(v4 + 49);
    v64 = *(_WORD *)(v4 + 51);
    v65 = *(_DWORD *)(v4 + 53);
    v66 = *(_DWORD *)(v4 + 57);
    v67 = *(_WORD *)(v4 + 61);
    v68 = v4[134];
    v69 = v4[135];
    v70 = v4[129];
    v71 = v4[133];
    LODWORD(v97) = v59;
    BYTE4(v97) = v60;
    v98 = v61;
    v100 = v62;
    LOWORD(v101) = v63;
    WORD1(v101) = v64;
    WORD2(v101) = 257;
    v102 = v65;
    v103 = v66;
    v104 = v67;
    LOBYTE(v105) = v68;
    sub_1002FEB5C(v69, (unint64_t *)&v107);
    LOBYTE(v110) = v70;
    WORD1(v110) = v64;
    BYTE4(v110) = 0;
    v111 = 0;
    v112 = v71;
    v114 = 0;
    v115 = 0.0;
    *(double *)&__p = 0.0;
    v72 = (id)qword_10085F520;
    if (os_log_type_enabled(v72, OS_LOG_TYPE_DEFAULT))
    {
      sub_1002FF3B0((unsigned __int16 *)&v97);
      v73 = v122 >= 0 ? v121 : (void **)v121[0];
      *(_DWORD *)buf = 136315138;
      v124 = v73;
      _os_log_impl((void *)&_mh_execute_header, v72, OS_LOG_TYPE_DEFAULT, "#rose-ses,Initiator ranging block summary: %s", buf, 0xCu);
      if (v122 < 0)
        operator delete(v121[0]);
    }

    v74 = *(_QWORD *)(a1 + 560);
    if (v74)
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v74 + 88))(v74, &v97);
    if (*(_QWORD *)(a1 + 1432))
    {
      sub_10001ADBC(v95, (_QWORD *)(a1 + 16));
      v75 = *(_QWORD *)(a1 + 1432);
      if (!v75)
        sub_100027BC4();
      (*(void (**)(uint64_t, _QWORD *, uint64_t *))(*(_QWORD *)v75 + 48))(v75, v95, &v97);
      sub_10001AE68((uint64_t)v95);
    }
LABEL_57:
    if (*(double *)&__p != 0.0)
    {
      v114 = __p;
      operator delete(__p);
    }
    if (*(double *)&v107 != 0.0)
    {
      v108 = *(double *)&v107;
      operator delete(v107);
    }
    return;
  }
  v116 = 0;
  v32 = *((_DWORD *)sub_100004784() + 187);
  if (v32 == 2)
  {
    v33 = *(_QWORD *)(a2 + 16);
    v34 = (int *)(v33 + 100);
    v35 = (char *)(v33 + 97);
    v36 = (__int16 *)(v33 + 98);
  }
  else
  {
    if (v32 != 1)
      return;
    v33 = *(_QWORD *)(a2 + 16);
    v34 = (int *)(v33 + 99);
    v35 = (char *)(v33 + 96);
    v36 = (__int16 *)(v33 + 97);
  }
  v76 = (double)*v36 * 0.25;
  v77 = *v35;
  v78 = (double)*(__int16 *)(v33 + 79) * 0.25;
  v79 = *(_BYTE *)(v33 + 78);
  v80 = *(_DWORD *)(v33 + 66);
  v81 = (double)*v34 / 1.0e12;
  v82 = *(_WORD *)(v33 + 64);
  v83 = *(_BYTE *)(v33 + 63);
  v84 = *(_WORD *)(v33 + 61);
  v85 = *(_DWORD *)(v33 + 57);
  v86 = *(_QWORD *)(v33 + 49);
  v87 = *(_QWORD *)(v33 + 41);
  *(float *)&v81 = v81 * 299792458.0;
  v88 = *(_BYTE *)(v33 + 36);
  v89 = *(_DWORD *)(v33 + 37);
  v90 = *(_BYTE *)(v33 + 33);
  LODWORD(v97) = *(_DWORD *)(v33 + 29);
  BYTE4(v97) = v90;
  v98 = v89;
  v99 = v88;
  v100 = v87;
  v101 = v86;
  v102 = v85;
  LOWORD(v103) = v84;
  BYTE2(v103) = v83;
  v104 = v82;
  v105 = 257;
  v106 = *(float *)&v81;
  LODWORD(v107) = v80;
  BYTE4(v107) = 0;
  v108 = 0.0;
  v109 = v79;
  v110 = v78;
  v111 = 0;
  *(double *)&__p = 0.0;
  LOBYTE(v114) = v77;
  v115 = v76;
  v116 = 1;
  v91 = (id)qword_10085F520;
  if (os_log_type_enabled(v91, OS_LOG_TYPE_DEFAULT))
  {
    sub_100300868((unsigned __int16 *)&v97);
    v92 = v122 >= 0 ? v121 : (void **)v121[0];
    *(_DWORD *)buf = 136315138;
    v124 = v92;
    _os_log_impl((void *)&_mh_execute_header, v91, OS_LOG_TYPE_DEFAULT, "#rose-ses,Responder ranging block summary: %s", buf, 0xCu);
    if (v122 < 0)
      operator delete(v121[0]);
  }

  v93 = *(_QWORD *)(a1 + 560);
  if (v93)
  {
    if (!v116)
      sub_10000BA44();
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v93 + 96))(v93, &v97);
  }
  if (*(_QWORD *)(a1 + 1464))
  {
    sub_10001ADBC(v96, (_QWORD *)(a1 + 16));
    if (!v116)
      sub_10000BA44();
    v94 = *(_QWORD *)(a1 + 1464);
    if (!v94)
      sub_100027BC4();
    (*(void (**)(uint64_t, _QWORD *, uint64_t *))(*(_QWORD *)v94 + 48))(v94, v96, &v97);
    sub_10001AE68((uint64_t)v96);
  }
}

void sub_1002B1114(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  void *v5;
  va_list va;

  va_start(va, a5);

  sub_1001B18A0(va);
  _Unwind_Resume(a1);
}

void sub_1002B11A4(uint64_t a1, uint64_t *a2)
{
  unsigned __int8 v4;
  NSObject *v5;
  void **v6;
  void **v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  void *__p[2];
  char v16;
  void *v17[2];
  char v18;
  uint8_t buf[4];
  void **v20;
  __int16 v21;
  void **v22;

  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 672));
  v4 = atomic_load((unsigned __int8 *)(a1 + 836));
  if ((v4 & 1) != 0)
  {
    sub_10000BF04(v17, (&off_100812CA0)[*((int *)a2 + 1)]);
    sub_10000BF04(__p, (&off_100812D18)[*((int *)a2 + 2)]);
    v5 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
    {
      v6 = v17;
      if (v18 < 0)
        v6 = (void **)v17[0];
      v7 = __p;
      if (v16 < 0)
        v7 = (void **)__p[0];
      *(_DWORD *)buf = 136315394;
      v20 = v6;
      v21 = 2080;
      v22 = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#rose-ses,serviceRequestDidUpdateStatus. type: %s, reason: %s", buf, 0x16u);
    }
    if (*(_BYTE *)(a1 + 820))
      *(_BYTE *)(a1 + 820) = 0;
    v8 = *a2;
    *(_DWORD *)(a1 + 816) = *((_DWORD *)a2 + 2);
    *(_QWORD *)(a1 + 808) = v8;
    *(_BYTE *)(a1 + 820) = 1;
    if (*(_QWORD *)(a1 + 1208))
    {
      sub_10001ADBC(&v13, (_QWORD *)(a1 + 16));
      v9 = *(_QWORD *)(a1 + 1208);
      if (!v9)
        sub_100027BC4();
      (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v9 + 48))(v9, &v13, a2);
      v10 = v14;
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v12 = __ldaxr(p_shared_owners);
        while (__stlxr(v12 - 1, p_shared_owners));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
    }
    if (v16 < 0)
      operator delete(__p[0]);
    if (v18 < 0)
      operator delete(v17[0]);
  }
}

void sub_1002B1380(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

void sub_1002B13CC(uint64_t a1, int a2, int a3)
{
  unsigned __int8 v6;

  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 672));
  v6 = atomic_load((unsigned __int8 *)(a1 + 836));
  if ((v6 & 1) != 0)
  {
    *(_DWORD *)(a1 + 824) = a2;
    *(_DWORD *)(a1 + 828) = a3;
    *(_BYTE *)(a1 + 832) = 1;
  }
}

void sub_1002B141C(uint64_t a1, unsigned int *a2)
{
  NSObject *v4;
  char *v5;
  void **v6;
  void *__p[2];
  char v8;
  uint8_t buf[4];
  void **v10;

  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 672));
  v4 = (id)qword_10085F520;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    if (*a2)
      v5 = "Ready";
    else
      v5 = "NotReady";
    sub_10000BF04(__p, v5);
    if (v8 >= 0)
      v6 = __p;
    else
      v6 = (void **)__p[0];
    *(_DWORD *)buf = 136315138;
    v10 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#rose-ses,timeConversionDidUpdateState (%s)", buf, 0xCu);
    if (v8 < 0)
      operator delete(__p[0]);
  }

  std::mutex::lock((std::mutex *)(a1 + 1120));
  atomic_store(*a2, (unsigned int *)(a1 + 1064));
  std::condition_variable::notify_one((std::condition_variable *)(a1 + 1072));
  std::mutex::unlock((std::mutex *)(a1 + 1120));
}

void sub_1002B1548(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002B1560(uint64_t a1, uint64_t *a2)
{
  unsigned __int8 v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  int v13;

  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 672));
  v4 = atomic_load((unsigned __int8 *)(a1 + 836));
  if ((v4 & 1) != 0)
  {
    v5 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 176))(a1, a2);
    v6 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
    {
      sub_1003E6B24(a2, v5, v6);
      if (v5)
        goto LABEL_4;
    }
    else if (v5)
    {
LABEL_4:
      std::mutex::lock((std::mutex *)(a1 + 888));
      sub_1002B16C0(a1 + 952, (uint64_t)a2);
      std::mutex::unlock((std::mutex *)(a1 + 888));
      std::condition_variable::notify_one((std::condition_variable *)(a1 + 840));
      return;
    }
    sub_1002AE5BC(a1);
    if (*(_QWORD *)(a1 + 1368))
    {
      sub_10001ADBC(&v11, (_QWORD *)(a1 + 16));
      v13 = -2;
      v7 = *(_QWORD *)(a1 + 1368);
      if (!v7)
        sub_100027BC4();
      (*(void (**)(uint64_t, uint64_t *, int *))(*(_QWORD *)v7 + 48))(v7, &v11, &v13);
      v8 = v12;
      if (v12)
      {
        p_shared_owners = (unint64_t *)&v12->__shared_owners_;
        do
          v10 = __ldaxr(p_shared_owners);
        while (__stlxr(v10 - 1, p_shared_owners));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
    }
  }
}

void sub_1002B169C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::mutex *v10;

  std::mutex::unlock(v10);
  _Unwind_Resume(a1);
}

uint64_t sub_1002B16C0(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 32))
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    std::string::operator=((std::string *)(a1 + 8), (const std::string *)(a2 + 8));
  }
  else
  {
    sub_10015A344(a1, a2);
  }
  return a1;
}

uint64_t sub_1002B1704(uint64_t a1, __int128 *a2)
{
  unsigned __int8 v2;
  void *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unsigned int v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v26;

  v2 = atomic_load((unsigned __int8 *)(a1 + 836));
  if ((v2 & 1) == 0 || !*(_BYTE *)(a1 + 682))
    return 4294967294;
  v5 = sub_1002CA108();
  v6 = *(std::__shared_weak_count **)(a1 + 24);
  if (v6)
  {
    v7 = *(_QWORD *)(a1 + 16);
    p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
    do
      v9 = __ldxr(p_shared_weak_owners);
    while (__stxr(v9 + 1, p_shared_weak_owners));
    v25 = 0;
    v26 = 0;
    v10 = std::__shared_weak_count::lock(v6);
    v11 = v10;
    if (v10)
    {
      v12 = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
      v25 = v7;
      v26 = v10;
      std::__shared_weak_count::__release_weak(v6);
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v15 = __ldaxr(p_shared_owners);
      while (__stlxr(v15 - 1, p_shared_owners));
      if (v15)
        goto LABEL_17;
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      v16 = v11;
    }
    else
    {
      v25 = 0;
      v26 = 0;
      v16 = v6;
    }
    std::__shared_weak_count::__release_weak(v16);
  }
  else
  {
    v25 = 0;
    v26 = 0;
  }
LABEL_17:
  if (!*(_BYTE *)(a1 + 682))
    sub_10000BA44();
  v18 = sub_1002CB6B4((uint64_t)v5, &v25, *(unsigned __int16 *)(a1 + 680), (uint64_t)a2);
  if (v26)
    std::__shared_weak_count::__release_weak(v26);
  if (v18)
  {
    if (*(_BYTE *)(a1 + 800))
      *(_BYTE *)(a1 + 800) = 0;
    v19 = *a2;
    v20 = a2[2];
    *(_OWORD *)(a1 + 704) = a2[1];
    *(_OWORD *)(a1 + 720) = v20;
    *(_OWORD *)(a1 + 688) = v19;
    v21 = a2[3];
    v22 = a2[4];
    v23 = a2[6];
    *(_OWORD *)(a1 + 768) = a2[5];
    *(_OWORD *)(a1 + 784) = v23;
    *(_OWORD *)(a1 + 736) = v21;
    *(_OWORD *)(a1 + 752) = v22;
    *(_BYTE *)(a1 + 800) = 1;
  }
  v24 = *(_QWORD *)(a1 + 560);
  if (v24)
  {
    if (!*(_BYTE *)(a1 + 682))
      sub_10000BA44();
    sub_100276914(v24, *(unsigned __int16 *)(a1 + 680), (const std::string *)(a1 + 536));
  }
  return v18 - 1;
}

void sub_1002B188C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10)
    std::__shared_weak_count::__release_weak(a10);
  _Unwind_Resume(exception_object);
}

void sub_1002B18A4()
{
  __assert_rtn("getUwbSessionId", "NIServerRoseSession.mm", 577, "false");
}

void sub_1002B18CC()
{
  __assert_rtn("getUwbSessionId", "NIServerRoseSession.mm", 577, "false");
}

uint64_t sub_1002B18F4(uint64_t a1, float a2)
{
  NSObject *v4;
  uint8_t v5;
  NSObject *v6;
  int v7;
  int v8;
  int v10;
  NSObject *v11;
  int v12;
  void *v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  unint64_t *p_shared_weak_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unsigned __int8 v25;
  NSObject *v26;
  NSObject *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  NSObject *v36;
  NSObject *v37;
  uint8_t v38[16];
  uint64_t v39;
  std::__shared_weak_count *v40;
  uint8_t buf[4];
  _BYTE v42[10];
  int v43;
  __int16 v44;
  const char *v45;

  if (sub_1002AEE80(a1))
  {
    v27 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_FAULT))
      sub_1003E6BDC(v27, v28, v29, v30, v31, v32, v33, v34);
    v35 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)v42 = "/Library/Caches/com.apple.xbs/Sources/Proximity/Daemon/Services/NearbyInteraction/UWB/NIServerRoseSession.mm";
      *(_WORD *)&v42[8] = 1024;
      v43 = 621;
      v44 = 2080;
      v45 = "throttleSuperframeParticipationWithRate";
      _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_INFO, "#rose-ses,%s:%d: assertion failure in %s", buf, 0x1Cu);
    }
    abort();
  }
  if (a2 < 0.0)
  {
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_FAULT))
      sub_1003E6C4C();
    v36 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)v42 = "/Library/Caches/com.apple.xbs/Sources/Proximity/Daemon/Services/NearbyInteraction/UWB/NIServerRoseSession.mm";
      *(_WORD *)&v42[8] = 1024;
      v43 = 622;
      v44 = 2080;
      v45 = "throttleSuperframeParticipationWithRate";
      _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_INFO, "#rose-ses,%s:%d: assertion failure in %s", buf, 0x1Cu);
    }
    abort();
  }
  v4 = qword_10085F520;
  if (a2 > 1.0)
  {
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_FAULT))
      sub_1003E6C78();
    v37 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)v42 = "/Library/Caches/com.apple.xbs/Sources/Proximity/Daemon/Services/NearbyInteraction/UWB/NIServerRoseSession.mm";
      *(_WORD *)&v42[8] = 1024;
      v43 = 623;
      v44 = 2080;
      v45 = "throttleSuperframeParticipationWithRate";
      _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_INFO, "#rose-ses,%s:%d: assertion failure in %s", buf, 0x1Cu);
    }
    abort();
  }
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    *(double *)v42 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#rose-ses,#throttle Requested throttle rate: %0.2f.", buf, 0xCu);
  }
  if (!*(_BYTE *)(a1 + 682))
  {
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
      sub_1003E6CA4();
    return 4294967294;
  }
  v5 = llroundf(a2 * 19.0);
  v6 = (id)qword_10085F520;
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    if (!*(_BYTE *)(a1 + 682))
      sub_10000BA44();
    v7 = v5;
    v8 = *(unsigned __int16 *)(a1 + 680);
    *(_DWORD *)buf = 134218496;
    *(double *)v42 = a2;
    *(_WORD *)&v42[8] = 1024;
    v43 = v5;
    v44 = 1024;
    LODWORD(v45) = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#rose-ses,#throttle Throttle rate = %0.2f translates to subrate = %d. Ticket: %d", buf, 0x18u);
  }
  else
  {
    v7 = v5;
  }

  v10 = atomic_load((unsigned __int8 *)(a1 + 837));
  if (v10 == v5)
  {
    v11 = (id)qword_10085F520;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      if (!*(_BYTE *)(a1 + 682))
        sub_10000BA44();
      v12 = *(unsigned __int16 *)(a1 + 680);
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)v42 = v7;
      *(_WORD *)&v42[4] = 1024;
      *(_DWORD *)&v42[6] = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#rose-ses,#throttle Subrate = %d already in effect. Ticket: %d", buf, 0xEu);
    }

    return 0;
  }
  if (!*(_BYTE *)(a1 + 682))
    sub_10000BA44();
  *(_WORD *)buf = *(_WORD *)(a1 + 680);
  buf[2] = v5;
  v13 = sub_1002CA108();
  v14 = *(std::__shared_weak_count **)(a1 + 24);
  if (v14)
  {
    v15 = *(_QWORD *)(a1 + 16);
    p_shared_weak_owners = (unint64_t *)&v14->__shared_weak_owners_;
    do
      v17 = __ldxr(p_shared_weak_owners);
    while (__stxr(v17 + 1, p_shared_weak_owners));
    v39 = 0;
    v40 = 0;
    v18 = std::__shared_weak_count::lock(v14);
    v19 = v18;
    if (v18)
    {
      v20 = (unint64_t *)&v18->__shared_weak_owners_;
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
      v39 = v15;
      v40 = v18;
      std::__shared_weak_count::__release_weak(v14);
      p_shared_owners = (unint64_t *)&v19->__shared_owners_;
      do
        v23 = __ldaxr(p_shared_owners);
      while (__stlxr(v23 - 1, p_shared_owners));
      if (v23)
        goto LABEL_33;
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      v24 = v19;
    }
    else
    {
      v39 = 0;
      v40 = 0;
      v24 = v14;
    }
    std::__shared_weak_count::__release_weak(v24);
  }
  else
  {
    v39 = 0;
    v40 = 0;
  }
LABEL_33:
  v25 = sub_1002CBDB4((uint64_t)v13, &v39, (unsigned __int16 *)buf);
  if (v40)
    std::__shared_weak_count::__release_weak(v40);
  if ((v25 & 1) != 0)
    return 0;
  v26 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v38 = 0;
    _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "#rose-ses,#throttle PRRangingManager::updateRangingParameter failed.", v38, 2u);
  }
  return 0xFFFFFFFFLL;
}

void sub_1002B1DFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  void *v12;

  _Unwind_Resume(a1);
}

uint64_t sub_1002B1E34(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  unsigned __int8 v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  unint64_t *v15;
  unint64_t v16;
  __int16 v17;
  void *__p;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *v24;

  v4 = (id)qword_10085F520;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    sub_1002AF5A0((unsigned __int8 **)a2);
    sub_1003E6CD0();
  }

  v5 = atomic_load((unsigned __int8 *)(a1 + 836));
  if ((v5 & 1) == 0 || !*(_BYTE *)(a1 + 682))
    return 0;
  v6 = sub_1002CA108();
  v7 = *((_QWORD *)v6 + 807);
  v8 = v7 + 24;
  if (v7)
    v9 = v7 + 24;
  else
    v9 = 0;
  v10 = (std::__shared_weak_count *)*((_QWORD *)v6 + 808);
  v23 = v9;
  v24 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  if (!v7)
  {
    v13 = 0;
    if (!v10)
      return v13;
    goto LABEL_20;
  }
  if (!*(_BYTE *)(a1 + 682))
    sub_10000BA44();
  v17 = *(_WORD *)(a1 + 680);
  v19 = 0;
  v20 = 0;
  __p = 0;
  sub_1001530EC(&__p, *(const void **)a2, *(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 8) - *(_QWORD *)a2);
  v21 = 0;
  v22 = 0;
  v13 = (*(uint64_t (**)(uint64_t, __int16 *))(*(_QWORD *)v8 + 16))(v8, &v17);
  if (__p)
  {
    v19 = __p;
    operator delete(__p);
  }
  if (v10)
  {
LABEL_20:
    v15 = (unint64_t *)&v10->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  return v13;
}

void sub_1002B1FC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (__p)
    operator delete(__p);
  sub_10001AE68((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1002B2008(int a1@<W1>, uint64_t a2@<X8>)
{
  void *v4;
  void *v5;
  void *v6;
  signed int v7;
  NSObject *v8;
  void *v9;
  int v10;
  int v11;
  char v12;
  int v13;
  int v14;
  NSObject *v15;
  std::mutex *v16;
  NSObject *v17;
  int v18;
  NSObject *v19;
  _BOOL4 v20;
  std::mutex *v21;
  int v22;
  NSObject *v23;
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  int v32;
  _BYTE v33[10];
  _BYTE v34[6];
  const char *v35;
  uint8_t buf[4];
  int v37;
  __int16 v38;
  signed int v39;
  unsigned __int16 v40;
  _BYTE v41[6];
  uint64_t v42;
  char v43;

  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKey:", CFSTR("AlishaGetKeyTimeoutMillisecondsOverride")));

  if (v5)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
    v7 = objc_msgSend(v6, "integerForKey:", CFSTR("AlishaGetKeyTimeoutMillisecondsOverride"));

  }
  else
  {
    v7 = 5000;
  }
  v8 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109376;
    v37 = a1;
    v38 = 1024;
    v39 = v7;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#rose-ses,AlishaSubsystem: get key for uwb session id: %u. Timeout: %d ms", buf, 0xEu);
  }
  v9 = sub_1002CA108();
  sub_1002CA308((uint64_t)v9, a1, v7, (uint64_t)buf);
  v10 = *(_DWORD *)buf;
  if (v43)
    v11 = 0;
  else
    v11 = -1004;
  if (!*(_DWORD *)buf)
    v10 = v11;
  if (v10)
  {
    v12 = 0;
LABEL_13:
    *(_DWORD *)a2 = v10;
LABEL_26:
    *(_BYTE *)(a2 + 4) = 0;
    goto LABEL_27;
  }
  if (!v43)
    sub_10000BA44();
  if (!(_BYTE)v37)
  {
    v14 = sub_100302364(v40);
    v17 = qword_10085F520;
    if (!v14)
    {
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_FAULT))
        sub_1003E6DC0();
      v23 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_INFO))
      {
        v32 = 136315650;
        *(_QWORD *)v33 = "/Library/Caches/com.apple.xbs/Sources/Proximity/Daemon/Services/NearbyInteraction/UWB/NIServerRoseSession.mm";
        *(_WORD *)&v33[8] = 1024;
        *(_DWORD *)v34 = 734;
        *(_WORD *)&v34[4] = 2080;
        v35 = "getKey";
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, "#rose-ses,%s:%d: assertion failure in %s", (uint8_t *)&v32, 0x1Cu);
      }
      abort();
    }
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
    {
      v32 = 67109376;
      *(_DWORD *)v33 = *(_DWORD *)v41;
      *(_WORD *)&v33[4] = 1024;
      *(_DWORD *)&v33[6] = v40;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "#rose-ses,AlishaSubsystem: get key response for uwb session id: %u, status code: %u", (uint8_t *)&v32, 0xEu);
    }
    goto LABEL_25;
  }
  if (v37 != 1)
  {
    v24 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_FAULT))
      sub_1003E6D2C((uint64_t)&v37, v24, v25, v26, v27, v28, v29, v30);
    v31 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_INFO))
    {
      v32 = 136315650;
      *(_QWORD *)v33 = "/Library/Caches/com.apple.xbs/Sources/Proximity/Daemon/Services/NearbyInteraction/UWB/NIServerRoseSession.mm";
      *(_WORD *)&v33[8] = 1024;
      *(_DWORD *)v34 = 742;
      *(_WORD *)&v34[4] = 2080;
      v35 = "getKey";
      _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_INFO, "#rose-ses,%s:%d: assertion failure in %s", (uint8_t *)&v32, 0x1Cu);
    }
    abort();
  }
  v13 = v40;
  v14 = sub_100302364(v40);
  if (v14)
  {
    v15 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
    {
      v32 = 67109376;
      *(_DWORD *)v33 = *(_DWORD *)&v41[2];
      *(_WORD *)&v33[4] = 1024;
      *(_DWORD *)&v33[6] = v13;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#rose-ses,AlishaSubsystem: get key complete event failure for uwb session id: %u, status code: %u", (uint8_t *)&v32, 0xEu);
    }
    if (v14 == 71)
    {
      v16 = (std::mutex *)sub_100251854();
      sub_100251910(v16, 1u, 3);
    }
LABEL_25:
    v12 = 0;
    *(_DWORD *)a2 = v14;
    goto LABEL_26;
  }
  v18 = *(_DWORD *)&v41[2];
  v19 = qword_10085F520;
  v20 = os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT);
  if (v18 != a1)
  {
    if (v20)
    {
      v32 = 67109376;
      *(_DWORD *)v33 = *(_DWORD *)&v41[2];
      *(_WORD *)&v33[4] = 1024;
      *(_DWORD *)&v33[6] = a1;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "#rose-ses,AlishaSubsystem: get key complete event uwb session id: %u, does not match requested id: %u", (uint8_t *)&v32, 0xEu);
    }
    v12 = 0;
    v10 = -1008;
    goto LABEL_13;
  }
  if (v20)
  {
    v32 = 67109632;
    *(_DWORD *)v33 = *(_DWORD *)&v41[2];
    *(_WORD *)&v33[4] = 1024;
    *(_DWORD *)&v33[6] = v42;
    *(_WORD *)v34 = 1024;
    *(_DWORD *)&v34[2] = HIDWORD(v42);
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "#rose-ses,AlishaSubsystem: get key complete event success for uwb session id: %u, sts_index_0: %u, hop_key: %u", (uint8_t *)&v32, 0x14u);
  }
  v21 = (std::mutex *)sub_100251854();
  sub_100252754(v21, 1);
  v22 = *(_DWORD *)&v41[2];
  *(_DWORD *)a2 = 0;
  *(_DWORD *)(a2 + 4) = v22;
  *(_QWORD *)(a2 + 8) = v42;
  v12 = 1;
LABEL_27:
  *(_BYTE *)(a2 + 16) = v12;
}

void sub_1002B24A4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002B24C0(uint64_t a1@<X8>)
{
  void *v2;
  int v3;
  int v4;
  size_t v5;
  void *v6[5];
  void *__p;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  _BYTE v15[76];
  int v16[6];
  unsigned __int8 v17;
  _WORD v18[10];
  char v19;
  int v20;
  char v21;
  char v22;
  unsigned __int8 v23;
  _BYTE v24[42];
  char v25;

  v2 = sub_1002CA108();
  sub_1002CA300((uint64_t)v2, 1000, (uint64_t)v16);
  v3 = v16[0];
  if (v25)
    v4 = 0;
  else
    v4 = -1004;
  if (!v16[0])
    v3 = v4;
  if (v3)
  {
    v15[0] = 0;
    v15[64] = 0;
    *(_DWORD *)a1 = v3;
    sub_1002B4CCC((_BYTE *)(a1 + 8), (uint64_t)v15);
    sub_1001B06E0((uint64_t)v15);
  }
  else
  {
    if (!v25)
      sub_10000BA44();
    v5 = v23;
    v12 = 0;
    v13 = 0;
    v14 = 0;
    sub_1002B4D20(&v12, v18, (uint64_t)&v18[v17], v17);
    v9 = 0;
    v10 = 0;
    v11 = 0;
    sub_10003A474(&v9, v24, (uint64_t)&v24[v5], v5);
    sub_1002B4AF0((uint64_t)v6, (uint64_t)&v12, v19, v20, v21, v22, (uint64_t)&v9);
    sub_1002B4B94((uint64_t)v15, (uint64_t)v6);
    *(_DWORD *)a1 = 0;
    sub_1002B4CCC((_BYTE *)(a1 + 8), (uint64_t)v15);
    sub_1001B06E0((uint64_t)v15);
    if (__p)
    {
      v8 = __p;
      operator delete(__p);
    }
    if (v6[0])
    {
      v6[1] = v6[0];
      operator delete(v6[0]);
    }
    if (v9)
    {
      v10 = v9;
      operator delete(v9);
    }
    if (v12)
    {
      v13 = v12;
      operator delete(v12);
    }
  }
}

void sub_1002B263C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,char a24)
{
  sub_1001B06E0((uint64_t)&a24);
  sub_1002B26A8((uint64_t)&a10);
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a21)
  {
    a22 = (uint64_t)a21;
    operator delete(a21);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1002B26A8(uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(_QWORD *)(a1 + 48) = v2;
    operator delete(v2);
  }
  v3 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v3;
    operator delete(v3);
  }
  return a1;
}

uint64_t sub_1002B26E8(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  void *v4;
  uint8_t v6[16];

  v3 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#rose-ses,AlishaSubsystem: delete keys", v6, 2u);
  }
  v4 = sub_1002CA108();
  return sub_1002CA310((uint64_t)v4, a2, 1000);
}

uint64_t sub_1002B2760()
{
  NSObject *v0;
  void *v1;
  uint8_t v3[16];

  v0 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "#rose-ses,AlishaSubsystem: delete all keys", v3, 2u);
  }
  v1 = sub_1002CA108();
  return sub_1002CA318((uint64_t)v1, 1000);
}

void sub_1002B27D0(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  NSObject *v4;
  void *v5;
  NSObject *v6;
  uint64_t v7;
  char v8;
  NSObject *v9;
  _BYTE v10[2];
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint8_t buf[4];
  const char *v15;
  __int16 v16;
  _QWORD v17[3];

  v4 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    v15 = (const char *)a1;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#rose-ses,AlishaSubsystem: convertBtClkToUwbClk (BT: %llu)", buf, 0xCu);
  }
  v5 = sub_1002CA108();
  sub_1002CA2F8((uint64_t)v5, 2u, 1u, a1, (uint64_t)v10);
  if (v13)
  {
    if (v10[0] == 2)
    {
      if (v10[1] == 1)
      {
        v6 = qword_10085F520;
        if (v11 == a1)
        {
          if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 134218240;
            v15 = (const char *)a1;
            v16 = 2048;
            v17[0] = v12;
            _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#rose-ses,AlishaSubsystem: conversion result %llu -> %llu", buf, 0x16u);
          }
          v7 = v12;
          *(_DWORD *)a2 = 0;
          *(_QWORD *)(a2 + 8) = v7;
          v8 = 1;
          goto LABEL_13;
        }
        if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_FAULT))
          sub_1003E6E18();
        v9 = qword_10085F520;
        if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136315650;
          v15 = "/Library/Caches/com.apple.xbs/Sources/Proximity/Daemon/Services/NearbyInteraction/UWB/NIServerRoseSession.mm";
          v16 = 1024;
          LODWORD(v17[0]) = 794;
          WORD2(v17[0]) = 2080;
          *(_QWORD *)((char *)v17 + 6) = "convertBtClkToUwbClk";
          goto LABEL_26;
        }
LABEL_27:
        abort();
      }
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_FAULT))
        sub_1003E6E44();
      v9 = qword_10085F520;
      if (!os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_INFO))
        goto LABEL_27;
      *(_DWORD *)buf = 136315650;
      v15 = "/Library/Caches/com.apple.xbs/Sources/Proximity/Daemon/Services/NearbyInteraction/UWB/NIServerRoseSession.mm";
      v16 = 1024;
      LODWORD(v17[0]) = 793;
      WORD2(v17[0]) = 2080;
      *(_QWORD *)((char *)v17 + 6) = "convertBtClkToUwbClk";
    }
    else
    {
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_FAULT))
        sub_1003E6E70();
      v9 = qword_10085F520;
      if (!os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_INFO))
        goto LABEL_27;
      *(_DWORD *)buf = 136315650;
      v15 = "/Library/Caches/com.apple.xbs/Sources/Proximity/Daemon/Services/NearbyInteraction/UWB/NIServerRoseSession.mm";
      v16 = 1024;
      LODWORD(v17[0]) = 792;
      WORD2(v17[0]) = 2080;
      *(_QWORD *)((char *)v17 + 6) = "convertBtClkToUwbClk";
    }
LABEL_26:
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "#rose-ses,%s:%d: assertion failure in %s", buf, 0x1Cu);
    goto LABEL_27;
  }
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
    sub_1003E6DEC();
  v8 = 0;
  *(_DWORD *)a2 = -1026;
  *(_BYTE *)(a2 + 8) = 0;
LABEL_13:
  *(_BYTE *)(a2 + 16) = v8;
}

uint64_t sub_1002B2AEC(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  int v4;
  void *v5;
  unsigned int v6;
  uint64_t result;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  int v17;
  const char *v18;
  __int16 v19;
  int v20;
  __int16 v21;
  const char *v22;
  uint8_t buf[4];
  int v24;
  unsigned __int16 v25;
  char v26;

  v3 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(_DWORD *)a2;
    *(_DWORD *)buf = 67109120;
    v24 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#rose-ses,AlishaSubsystem: debug set key for uwb session id: %u", buf, 8u);
  }
  v5 = sub_1002CA108();
  sub_1002CA320((uint64_t)v5, *(_DWORD *)a2, (__int128 *)(a2 + 4), 1000, (uint64_t)buf);
  if (v26)
    v6 = 0;
  else
    v6 = -1004;
  if (*(_DWORD *)buf)
    result = *(unsigned int *)buf;
  else
    result = v6;
  if (!(_DWORD)result)
  {
    if (!v26)
      sub_10000BA44();
    v8 = v24;
    if (v24 != 3)
    {
      v9 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_FAULT))
        sub_1003E6E9C(v8, v9, v10, v11, v12, v13, v14, v15);
      v16 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_INFO))
      {
        v17 = 136315650;
        v18 = "/Library/Caches/com.apple.xbs/Sources/Proximity/Daemon/Services/NearbyInteraction/UWB/NIServerRoseSession.mm";
        v19 = 1024;
        v20 = 815;
        v21 = 2080;
        v22 = "_debugSetKey";
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "#rose-ses,%s:%d: assertion failure in %s", (uint8_t *)&v17, 0x1Cu);
      }
      abort();
    }
    return sub_100302364(v25);
  }
  return result;
}

uint64_t sub_1002B2C90(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  NSObject *v5;
  void **v6;
  void *__p[2];
  char v9;
  uint8_t buf[4];
  uint64_t v11;
  __int16 v12;
  void **v13;

  v3 = sub_1002CA108();
  v4 = sub_1002CA328((uint64_t)v3, a2);
  v5 = (id)qword_10085F520;
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    sub_100301BCC(v4, __p);
    if (v9 >= 0)
      v6 = __p;
    else
      v6 = (void **)__p[0];
    *(_DWORD *)buf = 134218242;
    v11 = a2;
    v12 = 2080;
    v13 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#rose-ses,AlishaSubsystem: set URSK TTL to %llu. Status code %s", buf, 0x16u);
    if (v9 < 0)
      operator delete(__p[0]);
  }

  return v4;
}

void sub_1002B2D90(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_QWORD *sub_1002B2DA8(_QWORD *a1, __int128 *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, _QWORD *a11)
{
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD v42[2];
  _BYTE v43[24];
  _BYTE *v44;
  _BYTE v45[24];
  _BYTE *v46;
  _BYTE v47[24];
  _BYTE *v48;
  _BYTE v49[24];
  _BYTE *v50;
  _BYTE v51[24];
  _BYTE *v52;
  _BYTE v53[24];
  _BYTE *v54;
  _BYTE v55[24];
  _BYTE *v56;
  _BYTE v57[24];
  _BYTE *v58;
  _BYTE v59[24];
  _BYTE *v60;

  sub_100027674((uint64_t)v59, a4);
  v58 = 0;
  v56 = 0;
  sub_100027674((uint64_t)v53, a5);
  v52 = 0;
  v50 = 0;
  sub_100027674((uint64_t)v47, a6);
  sub_100027674((uint64_t)v45, a7);
  v44 = 0;
  v18 = (std::__shared_weak_count *)a11[1];
  v42[0] = *a11;
  v42[1] = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldxr(p_shared_owners);
    while (__stxr(v20 + 1, p_shared_owners));
  }
  sub_1002ADC18((uint64_t)a1, a2, a3, (uint64_t)v59, (uint64_t)v57, (uint64_t)v55, (uint64_t)v53, (uint64_t)v51, (uint64_t)v49, (uint64_t)v47, (uint64_t)v45, (uint64_t)v43, v42);
  if (v18)
  {
    v21 = (unint64_t *)&v18->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v23 = v44;
  if (v44 == v43)
  {
    v24 = 4;
    v23 = v43;
  }
  else
  {
    if (!v44)
      goto LABEL_14;
    v24 = 5;
  }
  (*(void (**)(void))(*v23 + 8 * v24))();
LABEL_14:
  v25 = v46;
  if (v46 == v45)
  {
    v26 = 4;
    v25 = v45;
  }
  else
  {
    if (!v46)
      goto LABEL_19;
    v26 = 5;
  }
  (*(void (**)(void))(*v25 + 8 * v26))();
LABEL_19:
  v27 = v48;
  if (v48 == v47)
  {
    v28 = 4;
    v27 = v47;
  }
  else
  {
    if (!v48)
      goto LABEL_24;
    v28 = 5;
  }
  (*(void (**)(void))(*v27 + 8 * v28))();
LABEL_24:
  v29 = v50;
  if (v50 == v49)
  {
    v30 = 4;
    v29 = v49;
  }
  else
  {
    if (!v50)
      goto LABEL_29;
    v30 = 5;
  }
  (*(void (**)(void))(*v29 + 8 * v30))();
LABEL_29:
  v31 = v52;
  if (v52 == v51)
  {
    v32 = 4;
    v31 = v51;
  }
  else
  {
    if (!v52)
      goto LABEL_34;
    v32 = 5;
  }
  (*(void (**)(void))(*v31 + 8 * v32))();
LABEL_34:
  v33 = v54;
  if (v54 == v53)
  {
    v34 = 4;
    v33 = v53;
  }
  else
  {
    if (!v54)
      goto LABEL_39;
    v34 = 5;
  }
  (*(void (**)(void))(*v33 + 8 * v34))();
LABEL_39:
  v35 = v56;
  if (v56 == v55)
  {
    v36 = 4;
    v35 = v55;
  }
  else
  {
    if (!v56)
      goto LABEL_44;
    v36 = 5;
  }
  (*(void (**)(void))(*v35 + 8 * v36))();
LABEL_44:
  v37 = v58;
  if (v58 == v57)
  {
    v38 = 4;
    v37 = v57;
  }
  else
  {
    if (!v58)
      goto LABEL_49;
    v38 = 5;
  }
  (*(void (**)(void))(*v37 + 8 * v38))();
LABEL_49:
  v39 = v60;
  if (v60 == v59)
  {
    v40 = 4;
    v39 = v59;
    goto LABEL_53;
  }
  if (v60)
  {
    v40 = 5;
LABEL_53:
    (*(void (**)(void))(*v39 + 8 * v40))();
  }
  *a1 = off_1008128C8;
  a1[1] = off_100812990;
  sub_1002B32E0(a1 + 72, a8);
  sub_1002B3378(a1 + 76, a9);
  sub_1002B3410(a1 + 80, a10);
  return a1;
}

void sub_1002B30F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char *a19, char a20,uint64_t a21,uint64_t a22,char *a23,char a24,uint64_t a25,uint64_t a26,char *a27,char a28,uint64_t a29,uint64_t a30,char *a31,char a32,uint64_t a33,uint64_t a34,char *a35)
{
  char *v35;
  uint64_t v36;
  char *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;

  sub_10001AE68((uint64_t)&a14);
  v38 = a19;
  if (a19 == v35)
  {
    v39 = 4;
    v38 = &a16;
  }
  else
  {
    if (!a19)
      goto LABEL_6;
    v39 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v38 + 8 * v39))();
LABEL_6:
  v40 = a23;
  if (a23 == &a20)
  {
    v41 = 4;
    v40 = &a20;
  }
  else
  {
    if (!a23)
      goto LABEL_11;
    v41 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v40 + 8 * v41))();
LABEL_11:
  v42 = a27;
  if (a27 == &a24)
  {
    v43 = 4;
    v42 = &a24;
  }
  else
  {
    if (!a27)
      goto LABEL_16;
    v43 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v42 + 8 * v43))();
LABEL_16:
  v44 = a31;
  if (a31 == &a28)
  {
    v45 = 4;
    v44 = &a28;
  }
  else
  {
    if (!a31)
      goto LABEL_21;
    v45 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v44 + 8 * v45))();
LABEL_21:
  v46 = a35;
  if (a35 == &a32)
  {
    v47 = 4;
    v46 = &a32;
  }
  else
  {
    if (!a35)
      goto LABEL_26;
    v47 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v46 + 8 * v47))();
LABEL_26:
  v48 = *(_QWORD **)(v36 - 176);
  if (v48 == (_QWORD *)(v36 - 200))
  {
    v49 = 4;
    v48 = (_QWORD *)(v36 - 200);
  }
  else
  {
    if (!v48)
      goto LABEL_31;
    v49 = 5;
  }
  (*(void (**)(void))(*v48 + 8 * v49))();
LABEL_31:
  v50 = *(_QWORD **)(v36 - 144);
  if (v50 == (_QWORD *)(v36 - 168))
  {
    v51 = 4;
    v50 = (_QWORD *)(v36 - 168);
  }
  else
  {
    if (!v50)
      goto LABEL_36;
    v51 = 5;
  }
  (*(void (**)(void))(*v50 + 8 * v51))();
LABEL_36:
  v52 = *(_QWORD **)(v36 - 112);
  if (v52 == (_QWORD *)(v36 - 136))
  {
    v53 = 4;
    v52 = (_QWORD *)(v36 - 136);
  }
  else
  {
    if (!v52)
      goto LABEL_41;
    v53 = 5;
  }
  (*(void (**)(void))(*v52 + 8 * v53))();
LABEL_41:
  v54 = *(_QWORD **)(v36 - 80);
  if (v54 == (_QWORD *)(v36 - 104))
  {
    v55 = 4;
    v54 = (_QWORD *)(v36 - 104);
  }
  else
  {
    if (!v54)
      goto LABEL_46;
    v55 = 5;
  }
  (*(void (**)(void))(*v54 + 8 * v55))();
LABEL_46:
  _Unwind_Resume(a1);
}

_QWORD *sub_1002B32E0(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;

  sub_100027674((uint64_t)v6, a2);
  sub_1002B4D98(v6, a1);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

_QWORD *sub_1002B3378(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;

  sub_100027674((uint64_t)v6, a2);
  sub_1002B4F0C(v6, a1);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

_QWORD *sub_1002B3410(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;

  sub_100027674((uint64_t)v6, a2);
  sub_1002B5080(v6, a1);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

_QWORD *sub_1002B34A8(_QWORD *a1, __int128 *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, _QWORD *a11)
{
  return sub_1002B2DA8(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t sub_1002B34BC(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 332))
    sub_1003E6F2C();
  return *(unsigned int *)(a1 + 328);
}

uint64_t sub_1002B34DC(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 324))
    sub_1003E6F2C();
  return *(unsigned int *)(a1 + 320);
}

void sub_1002B34FC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  NSObject *v3;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  NSObject *v11;
  _BOOL4 v12;
  void **v13;
  void **v14;
  int v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  void *__p[2];
  char v22;
  uint64_t v23;
  char v24;
  _BYTE buf[12];
  __int16 v26;
  _BYTE v27[10];
  int v28;
  __int16 v29;
  int v30;
  char v31;
  uint64_t v32;
  char v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  int v37;

  v3 = qword_10085F520;
  if (!*(_BYTE *)(a1 + 682))
  {
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
      sub_1003E6F54();
    v16 = 0;
    v17 = a3;
    *(_DWORD *)a3 = -1000;
LABEL_41:
    *(_BYTE *)(v17 + 8) = 0;
    goto LABEL_44;
  }
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = a2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#rose-ses,Alisha range enable. Preferred start time offset usec: %llu", buf, 0xCu);
  }
  v6 = *(_QWORD *)(a1 + 560);
  if (v6)
  {
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 144))(a1);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 64))(v6, v7, a2);
  }
  v8 = 0;
  v9 = 1000 * a2;
  if ((double)a2 >= 9.22337204e15)
    v9 = 0x7FFFFFFFFFFFFFFFLL;
  v20 = v9;
  v10 = -1000;
  while (v8 <= 8)
  {
    if (v8 >= 1)
    {
      v11 = (id)qword_10085F520;
      v12 = os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
      if (v10 == 6)
      {
        if (v12)
        {
          sub_100301BCC(6, __p);
          v13 = __p;
          if (v22 < 0)
            v13 = (void **)__p[0];
          *(_DWORD *)buf = 136315906;
          *(_QWORD *)&buf[4] = v13;
          v26 = 2048;
          *(_QWORD *)v27 = a2;
          *(_WORD *)&v27[8] = 1024;
          v28 = v8;
          v29 = 1024;
          v30 = 8;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#rose-ses,Alisha range enable retry. Last status code %s. Sleeping for %llu usec. %d of %d retries.", buf, 0x22u);
          if (v22 < 0)
            operator delete(__p[0]);
        }

        if (a2 > 0)
        {
          *(_QWORD *)buf = v20;
          std::this_thread::sleep_for ((const std::chrono::nanoseconds *)buf);
        }
      }
      else
      {
        if (v12)
        {
          sub_100301BCC(v10, __p);
          v14 = __p;
          if (v22 < 0)
            v14 = (void **)__p[0];
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = v14;
          v26 = 1024;
          *(_DWORD *)v27 = v8;
          *(_WORD *)&v27[4] = 1024;
          *(_DWORD *)&v27[6] = 8;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#rose-ses,Alisha range enable retry. Last status code %s. Not sleeping. %d of %d retries.", buf, 0x18u);
          if (v22 < 0)
            operator delete(__p[0]);
        }

      }
    }
    if (sub_1002AEF8C(a1, 1000))
    {
      buf[0] = 0;
      v31 = 0;
      v32 = a2;
      v33 = 1;
      v34 = 0u;
      v35 = 0u;
      v36 = 0u;
      v37 = 0;
      sub_1002B38BC(a1, (__int128 *)buf, (uint64_t)__p);
      v10 = (int)__p[0];
      if (LODWORD(__p[0]) == -1022 || LODWORD(__p[0]) == 6)
      {
        v15 = 0;
      }
      else
      {
        if (!LODWORD(__p[0]))
        {
          if (!v24)
            sub_1003E6F80();
          v18 = v23;
          goto LABEL_43;
        }
        v15 = 3;
      }
      if (LODWORD(__p[0]) != 6 && LODWORD(__p[0]) != -1022)
        goto LABEL_35;
    }
    else
    {
      v10 = -1025;
    }
    v15 = 0;
    ++v8;
LABEL_35:
    if (v15)
      break;
  }
  if (v10)
  {
    v16 = 0;
    v17 = a3;
    *(_DWORD *)a3 = v10;
    goto LABEL_41;
  }
  v18 = 0;
LABEL_43:
  v17 = a3;
  *(_DWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = v18;
  v16 = 1;
LABEL_44:
  *(_BYTE *)(v17 + 16) = v16;
}

void sub_1002B38A0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002B38BC(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v6;
  _QWORD *v7;
  int v8;
  std::chrono::steady_clock::time_point v9;
  std::chrono::steady_clock::time_point v10;
  std::chrono::system_clock::time_point v11;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v12;
  std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> v13;
  int v14;
  _BYTE v15[16];
  _QWORD v16[3];
  char v17;
  char v18;
  std::unique_lock<std::mutex> __lk;

  if (!*(_BYTE *)(a1 + 682))
    sub_1003E6FA8();
  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 888);
  __lk.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 888));
  v6 = (uint64_t *)(a1 + 1056);
  v7 = *(_QWORD **)(a1 + 1056);
  *(_QWORD *)(a1 + 1056) = 0;
  if (v7)
    sub_1002B51F4(a1 + 1056, v7);
  if (*(_BYTE *)(a1 + 984))
  {
    if (*(char *)(a1 + 983) < 0)
      operator delete(*(void **)(a1 + 960));
    *(_BYTE *)(a1 + 984) = 0;
  }
  if (!sub_1002B1704(a1, a2))
  {
    v9.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_ + 1000000000;
    while (1)
    {
      if (*v6 || *(_BYTE *)(a1 + 984))
      {
LABEL_31:
        sub_10015A2F0(v16, a1 + 952);
        if (*(_BYTE *)(a1 + 984))
        {
          if (*(char *)(a1 + 983) < 0)
            operator delete(*(void **)(a1 + 960));
          *(_BYTE *)(a1 + 984) = 0;
        }
        if (*v6)
          sub_1002B4238(*v6, (uint64_t)v15);
        if (!v18)
          __assert_rtn("_alishaSendRangeEnableCommand", "NIServerRoseSession.mm", 1047, "roseServiceErrorCopy.has_value()");
        if (v16[0] == 2002)
          v14 = -1022;
        else
          v14 = -1023;
        *(_DWORD *)a3 = v14;
        *(_BYTE *)(a3 + 4) = 0;
        *(_BYTE *)(a3 + 38) = 0;
        if (v17 < 0)
          operator delete((void *)v16[1]);
        goto LABEL_43;
      }
      if (std::chrono::steady_clock::now().__d_.__rep_ >= v9.__d_.__rep_)
        goto LABEL_29;
      v10.__d_.__rep_ = v9.__d_.__rep_ - std::chrono::steady_clock::now().__d_.__rep_;
      if (v10.__d_.__rep_ >= 1)
        break;
LABEL_28:
      if (std::chrono::steady_clock::now().__d_.__rep_ >= v9.__d_.__rep_)
      {
LABEL_29:
        if (!*v6 && !*(_BYTE *)(a1 + 984))
        {
          *v6 = 0;
          v8 = -1001;
          goto LABEL_10;
        }
        goto LABEL_31;
      }
    }
    std::chrono::steady_clock::now();
    v11.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
    if (v11.__d_.__rep_)
    {
      if (v11.__d_.__rep_ < 1)
      {
        if ((unint64_t)v11.__d_.__rep_ < 0xFFDF3B645A1CAC09)
        {
          v12 = 0x8000000000000000;
          goto LABEL_26;
        }
      }
      else if ((unint64_t)v11.__d_.__rep_ > 0x20C49BA5E353F7)
      {
        v12 = 0x7FFFFFFFFFFFFFFFLL;
        goto LABEL_24;
      }
      v12 = 1000 * v11.__d_.__rep_;
    }
    else
    {
      v12 = 0;
    }
LABEL_24:
    if (v12 > (v10.__d_.__rep_ ^ 0x7FFFFFFFFFFFFFFFLL))
    {
      v13.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
LABEL_27:
      std::condition_variable::__do_timed_wait((std::condition_variable *)(a1 + 840), &__lk, v13);
      std::chrono::steady_clock::now();
      goto LABEL_28;
    }
LABEL_26:
    v13.__d_.__rep_ = v12 + v10.__d_.__rep_;
    goto LABEL_27;
  }
  v8 = -1000;
LABEL_10:
  *(_DWORD *)a3 = v8;
  *(_BYTE *)(a3 + 4) = 0;
  *(_BYTE *)(a3 + 38) = 0;
LABEL_43:
  if (__lk.__owns_)
    std::mutex::unlock(__lk.__m_);
}

void sub_1002B3C5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,std::mutex *a24,char a25)
{
  sub_10019DBD4(&a10);
  if (a23 && a22 < 0)
    operator delete(__p);
  if (a25)
    std::mutex::unlock(a24);
  _Unwind_Resume(a1);
}

void sub_1002B3CB4(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_1002B34FC(a1 - 8, a2, a3);
}

void sub_1002B3CBC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 v3;
  uint64_t v5;
  uint64_t v6;
  _BYTE v7[8];
  void *__p;
  void *v9;
  char v10;
  __n128 v11;
  unint64_t v12;
  char v13;

  v3 = atomic_load((unsigned __int8 *)(a1 + 836));
  if ((v3 & 1) != 0)
  {
    v5 = *(_QWORD *)(a1 + 560);
    if (v5)
    {
      v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 144))(a1);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 72))(v5, v6);
    }
    sub_1002B3E58(a1, &v11);
    if (sub_1002AE5BC(a1))
    {
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
        sub_1003E7020();
      v7[0] = 0;
      v10 = 0;
      *(_DWORD *)a2 = 0;
      sub_1002B4C20((__n128 *)(a2 + 8), (uint64_t)v7);
      if (v10 && __p)
      {
        v9 = __p;
        operator delete(__p);
      }
    }
    else
    {
      *(_DWORD *)a2 = 0;
      sub_1002B4C20((__n128 *)(a2 + 8), (uint64_t)&v11);
    }
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
      sub_1003E6FF4();
    v11.n128_u8[0] = 0;
    v13 = 0;
    *(_DWORD *)a2 = 0;
    sub_1002B4C20((__n128 *)(a2 + 8), (uint64_t)&v11);
  }
  if (v13)
  {
    if (v11.n128_u64[1])
    {
      v12 = v11.n128_u64[1];
      operator delete((void *)v11.n128_u64[1]);
    }
  }
}

void sub_1002B3E04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  if (a16)
    sub_1003E6FD0((uint64_t)&a9);
  if (a27)
  {
    if (__p)
    {
      a22 = (uint64_t)__p;
      operator delete(__p);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_1002B3E58(uint64_t a1@<X0>, __n128 *a2@<X8>)
{
  unsigned __int8 *v4;
  void *v5;
  void *v6;
  int v7;
  int v8;
  NSObject *v9;
  void *v10;
  std::chrono::steady_clock::time_point v11;
  std::chrono::steady_clock::time_point v12;
  std::chrono::system_clock::time_point v13;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v14;
  std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> v15;
  void *v16;
  _QWORD v17[3];
  std::unique_lock<std::mutex> __lk;

  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 888);
  __lk.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 888));
  v4 = (unsigned __int8 *)(a1 + 1048);
  if (*(_BYTE *)(a1 + 1048))
  {
    v5 = *(void **)(a1 + 1000);
    if (v5)
    {
      *(_QWORD *)(a1 + 1008) = v5;
      operator delete(v5);
    }
    *v4 = 0;
  }
  v6 = sub_1002CA108();
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 144))(a1);
  v8 = sub_1002CA340((uint64_t)v6, v7);
  if (!v8)
  {
    v11.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_ + 1000000000;
    while (1)
    {
      if (*v4)
      {
LABEL_36:
        sub_1002B4C20(a2, a1 + 992);
        if (!*v4)
          goto LABEL_15;
        v16 = *(void **)(a1 + 1000);
        if (v16)
        {
          *(_QWORD *)(a1 + 1008) = v16;
          operator delete(v16);
        }
        goto LABEL_14;
      }
      if (std::chrono::steady_clock::now().__d_.__rep_ >= v11.__d_.__rep_)
        goto LABEL_35;
      v12.__d_.__rep_ = v11.__d_.__rep_ - std::chrono::steady_clock::now().__d_.__rep_;
      if (v12.__d_.__rep_ >= 1)
        break;
LABEL_34:
      if (std::chrono::steady_clock::now().__d_.__rep_ >= v11.__d_.__rep_)
      {
LABEL_35:
        if (!*v4)
        {
          if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
            sub_1003E704C();
          goto LABEL_9;
        }
        goto LABEL_36;
      }
    }
    std::chrono::steady_clock::now();
    v13.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
    if (v13.__d_.__rep_)
    {
      if (v13.__d_.__rep_ < 1)
      {
        if ((unint64_t)v13.__d_.__rep_ < 0xFFDF3B645A1CAC09)
        {
          v14 = 0x8000000000000000;
          goto LABEL_32;
        }
      }
      else if ((unint64_t)v13.__d_.__rep_ > 0x20C49BA5E353F7)
      {
        v14 = 0x7FFFFFFFFFFFFFFFLL;
        goto LABEL_30;
      }
      v14 = 1000 * v13.__d_.__rep_;
    }
    else
    {
      v14 = 0;
    }
LABEL_30:
    if (v14 > (v12.__d_.__rep_ ^ 0x7FFFFFFFFFFFFFFFLL))
    {
      v15.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
LABEL_33:
      std::condition_variable::__do_timed_wait((std::condition_variable *)(a1 + 840), &__lk, v15);
      std::chrono::steady_clock::now();
      goto LABEL_34;
    }
LABEL_32:
    v15.__d_.__rep_ = v14 + v12.__d_.__rep_;
    goto LABEL_33;
  }
  v9 = (id)qword_10085F520;
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    sub_100301BCC(v8, v17);
    sub_1003E7078();
  }

LABEL_9:
  if (*v4)
  {
    v10 = *(void **)(a1 + 1000);
    if (v10)
    {
      *(_QWORD *)(a1 + 1008) = v10;
      operator delete(v10);
    }
    *v4 = 0;
  }
  a2->n128_u8[0] = 0;
  v4 = &a2[3].n128_u8[8];
LABEL_14:
  *v4 = 0;
LABEL_15:
  if (__lk.__owns_)
    std::mutex::unlock(__lk.__m_);
}

void sub_1002B40D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::mutex *a13, char a14)
{
  if (a14)
    std::mutex::unlock(a13);
  _Unwind_Resume(exception_object);
}

void sub_1002B4104(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_1002B3CBC(a1 - 8, a2);
}

uint64_t sub_1002B410C(uint64_t a1, uint64_t a2)
{
  NSObject *v2;
  _DWORD v6[10];
  uint8_t buf[48];
  uint64_t v8;
  char v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  int v13;

  v2 = qword_10085F520;
  if (*(_BYTE *)(a1 + 682))
  {
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)&buf[4] = a2;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#rose-ses,Alisha range enable. Start time bt clk usec: %llu", buf, 0xCu);
    }
    if (sub_1002AEF8C(a1, 1000))
    {
      buf[0] = 0;
      buf[40] = 0;
      v8 = a2;
      v9 = 3;
      v10 = 0u;
      v11 = 0u;
      v12 = 0u;
      v13 = 0;
      sub_1002B38BC(a1, (__int128 *)buf, (uint64_t)v6);
      return v6[0];
    }
    else
    {
      return 4294966271;
    }
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
      sub_1003E6F54();
    return 4294966296;
  }
}

void sub_1002B4238(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _WORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::runtime_error *exception;

  v2 = *(_WORD **)(a1 + 16);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 8);
    *(_WORD *)a2 = *v2;
    *(_QWORD *)(a2 + 8) = v3;
    operator new();
  }
  v4 = *(_QWORD *)(a1 + 24);
  if (v4)
    sub_10019E228(a2, v4, *(double *)(a1 + 8));
  v5 = *(_QWORD *)(a1 + 32);
  if (v5)
    sub_10019E2D0(a2, v5, *(double *)(a1 + 8));
  if (*(_QWORD *)(a1 + 40))
    sub_10019E174(a2, *(double *)(a1 + 8));
  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "Ill formed AlishaUpdate has no data (range_response, block_complete_event, session_stats, or key_expired_event)");
}

void sub_1002B4320(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

BOOL sub_1002B4334(uint64_t a1, _QWORD *a2)
{
  return *a2 == 2002;
}

_QWORD *sub_1002B4350(_QWORD *a1, __int128 *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _QWORD *a9)
{
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD v40[2];
  _BYTE v41[24];
  _BYTE *v42;
  _BYTE v43[24];
  _BYTE *v44;
  _BYTE v45[24];
  _BYTE *v46;
  _BYTE v47[24];
  _BYTE *v48;
  _BYTE v49[24];
  _BYTE *v50;
  _BYTE v51[24];
  _BYTE *v52;
  _BYTE v53[24];
  _BYTE *v54;
  _BYTE v55[24];
  _BYTE *v56;
  _BYTE v57[24];
  _BYTE *v58;

  sub_100027674((uint64_t)v57, a4);
  sub_100027674((uint64_t)v55, a6);
  v54 = 0;
  sub_100027674((uint64_t)v51, a5);
  v50 = 0;
  v48 = 0;
  sub_100027674((uint64_t)v45, a7);
  sub_100027674((uint64_t)v43, a8);
  v42 = 0;
  v16 = (std::__shared_weak_count *)a9[1];
  v40[0] = *a9;
  v40[1] = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldxr(p_shared_owners);
    while (__stxr(v18 + 1, p_shared_owners));
  }
  sub_1002ADC18((uint64_t)a1, a2, a3, (uint64_t)v57, (uint64_t)v55, (uint64_t)v53, (uint64_t)v51, (uint64_t)v49, (uint64_t)v47, (uint64_t)v45, (uint64_t)v43, (uint64_t)v41, v40);
  if (v16)
  {
    v19 = (unint64_t *)&v16->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v21 = v42;
  if (v42 == v41)
  {
    v22 = 4;
    v21 = v41;
  }
  else
  {
    if (!v42)
      goto LABEL_14;
    v22 = 5;
  }
  (*(void (**)(void))(*v21 + 8 * v22))();
LABEL_14:
  v23 = v44;
  if (v44 == v43)
  {
    v24 = 4;
    v23 = v43;
  }
  else
  {
    if (!v44)
      goto LABEL_19;
    v24 = 5;
  }
  (*(void (**)(void))(*v23 + 8 * v24))();
LABEL_19:
  v25 = v46;
  if (v46 == v45)
  {
    v26 = 4;
    v25 = v45;
  }
  else
  {
    if (!v46)
      goto LABEL_24;
    v26 = 5;
  }
  (*(void (**)(void))(*v25 + 8 * v26))();
LABEL_24:
  v27 = v48;
  if (v48 == v47)
  {
    v28 = 4;
    v27 = v47;
  }
  else
  {
    if (!v48)
      goto LABEL_29;
    v28 = 5;
  }
  (*(void (**)(void))(*v27 + 8 * v28))();
LABEL_29:
  v29 = v50;
  if (v50 == v49)
  {
    v30 = 4;
    v29 = v49;
  }
  else
  {
    if (!v50)
      goto LABEL_34;
    v30 = 5;
  }
  (*(void (**)(void))(*v29 + 8 * v30))();
LABEL_34:
  v31 = v52;
  if (v52 == v51)
  {
    v32 = 4;
    v31 = v51;
  }
  else
  {
    if (!v52)
      goto LABEL_39;
    v32 = 5;
  }
  (*(void (**)(void))(*v31 + 8 * v32))();
LABEL_39:
  v33 = v54;
  if (v54 == v53)
  {
    v34 = 4;
    v33 = v53;
  }
  else
  {
    if (!v54)
      goto LABEL_44;
    v34 = 5;
  }
  (*(void (**)(void))(*v33 + 8 * v34))();
LABEL_44:
  v35 = v56;
  if (v56 == v55)
  {
    v36 = 4;
    v35 = v55;
  }
  else
  {
    if (!v56)
      goto LABEL_49;
    v36 = 5;
  }
  (*(void (**)(void))(*v35 + 8 * v36))();
LABEL_49:
  v37 = v58;
  if (v58 == v57)
  {
    v38 = 4;
    v37 = v57;
    goto LABEL_53;
  }
  if (v58)
  {
    v38 = 5;
LABEL_53:
    (*(void (**)(void))(*v37 + 8 * v38))();
  }
  *a1 = &off_1008129C8;
  a1[1] = off_100812A90;
  return a1;
}

void sub_1002B467C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char *a19, char a20,uint64_t a21,uint64_t a22,char *a23,char a24,uint64_t a25,uint64_t a26,char *a27,char a28,uint64_t a29,uint64_t a30,char *a31,char a32,uint64_t a33,uint64_t a34,char *a35)
{
  char *v35;
  uint64_t v36;
  char *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;

  sub_10001AE68((uint64_t)&a14);
  v38 = a19;
  if (a19 == v35)
  {
    v39 = 4;
    v38 = &a16;
  }
  else
  {
    if (!a19)
      goto LABEL_6;
    v39 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v38 + 8 * v39))();
LABEL_6:
  v40 = a23;
  if (a23 == &a20)
  {
    v41 = 4;
    v40 = &a20;
  }
  else
  {
    if (!a23)
      goto LABEL_11;
    v41 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v40 + 8 * v41))();
LABEL_11:
  v42 = a27;
  if (a27 == &a24)
  {
    v43 = 4;
    v42 = &a24;
  }
  else
  {
    if (!a27)
      goto LABEL_16;
    v43 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v42 + 8 * v43))();
LABEL_16:
  v44 = a31;
  if (a31 == &a28)
  {
    v45 = 4;
    v44 = &a28;
  }
  else
  {
    if (!a31)
      goto LABEL_21;
    v45 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v44 + 8 * v45))();
LABEL_21:
  v46 = a35;
  if (a35 == &a32)
  {
    v47 = 4;
    v46 = &a32;
  }
  else
  {
    if (!a35)
      goto LABEL_26;
    v47 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v46 + 8 * v47))();
LABEL_26:
  v48 = *(_QWORD **)(v36 - 176);
  if (v48 == (_QWORD *)(v36 - 200))
  {
    v49 = 4;
    v48 = (_QWORD *)(v36 - 200);
  }
  else
  {
    if (!v48)
      goto LABEL_31;
    v49 = 5;
  }
  (*(void (**)(void))(*v48 + 8 * v49))();
LABEL_31:
  v50 = *(_QWORD **)(v36 - 144);
  if (v50 == (_QWORD *)(v36 - 168))
  {
    v51 = 4;
    v50 = (_QWORD *)(v36 - 168);
  }
  else
  {
    if (!v50)
      goto LABEL_36;
    v51 = 5;
  }
  (*(void (**)(void))(*v50 + 8 * v51))();
LABEL_36:
  v52 = *(_QWORD **)(v36 - 112);
  if (v52 == (_QWORD *)(v36 - 136))
  {
    v53 = 4;
    v52 = (_QWORD *)(v36 - 136);
  }
  else
  {
    if (!v52)
      goto LABEL_41;
    v53 = 5;
  }
  (*(void (**)(void))(*v52 + 8 * v53))();
LABEL_41:
  v54 = *(_QWORD **)(v36 - 80);
  if (v54 == (_QWORD *)(v36 - 104))
  {
    v55 = 4;
    v54 = (_QWORD *)(v36 - 104);
  }
  else
  {
    if (!v54)
      goto LABEL_46;
    v55 = 5;
  }
  (*(void (**)(void))(*v54 + 8 * v55))();
LABEL_46:
  _Unwind_Resume(a1);
}

_QWORD *sub_1002B4864(_QWORD *a1, __int128 *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _QWORD *a9)
{
  return sub_1002B4350(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t sub_1002B4870(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 392))
    sub_1003E70D4();
  return *(unsigned int *)(a1 + 388);
}

uint64_t sub_1002B4890(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 384))
    sub_1003E70D4();
  return *(unsigned int *)(a1 + 380);
}

_QWORD *sub_1002B48B0@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  if ((a1 + 2) >= 3)
    sub_1003E70FC();
  return sub_10000BF04(a2, (&off_100812DF8)[a1 + 2]);
}

_QWORD *sub_1002B48E0@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  char *v2;

  if (a1 == -1)
  {
    v2 = "UNDEFINED";
  }
  else
  {
    if (a1 != -2)
      sub_1003E7124();
    v2 = "SERVICE_ERROR";
  }
  return sub_10000BF04(a2, v2);
}

void sub_1002B491C()
{
  operator delete();
}

void sub_1002B4934(uint64_t a1)
{
  sub_1002AE1E0(a1);
  operator delete();
}

uint64_t sub_1002B4958(uint64_t a1)
{
  return sub_1002AE1E0(a1 - 8);
}

void sub_1002B4960(uint64_t a1)
{
  sub_1002AE1E0(a1 - 8);
  operator delete();
}

void sub_1002B498C(uint64_t a1)
{
  sub_1002AE1E0(a1);
  operator delete();
}

uint64_t sub_1002B49B0(uint64_t a1)
{
  return sub_1002AE1E0(a1 - 8);
}

void sub_1002B49B8(uint64_t a1)
{
  sub_1002AE1E0(a1 - 8);
  operator delete();
}

uint64_t sub_1002B49E0(uint64_t a1, int a2, char a3, __int16 a4, __int16 *a5, uint64_t a6, __int16 a7, int a8, __int16 a9)
{
  _WORD *v13;
  uint64_t v14;
  unint64_t v15;
  __int16 v16;

  *(_DWORD *)a1 = a2;
  *(_BYTE *)(a1 + 4) = a3;
  *(_WORD *)(a1 + 6) = a4;
  sub_1002B4A7C((_QWORD *)(a1 + 8), a6 + 1);
  *(_WORD *)(a1 + 32) = a7;
  *(double *)(a1 + 40) = (double)a8 * 0.25;
  *(double *)(a1 + 48) = (double)a9 * 0.25;
  v13 = *(_WORD **)(a1 + 8);
  v14 = *(_QWORD *)(a1 + 16) - (_QWORD)v13;
  if (v14)
  {
    v15 = v14 >> 1;
    if (v15 <= 1)
      v15 = 1;
    do
    {
      v16 = *a5++;
      *v13++ = v16;
      --v15;
    }
    while (v15);
  }
  return a1;
}

_QWORD *sub_1002B4A7C(_QWORD *a1, uint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_1001A8D04(a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 2 * a2);
    a1[1] = &v4[2 * a2];
  }
  return a1;
}

void sub_1002B4AD4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002B4AF0(uint64_t a1, uint64_t a2, char a3, int a4, char a5, char a6, uint64_t a7)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  sub_1001B0668((_QWORD *)a1, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 1);
  *(_QWORD *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 24) = a3;
  *(_DWORD *)(a1 + 28) = a4;
  *(_BYTE *)(a1 + 32) = a5;
  *(_BYTE *)(a1 + 33) = a6;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  sub_1001530EC((_QWORD *)(a1 + 40), *(const void **)a7, *(_QWORD *)(a7 + 8), *(_QWORD *)(a7 + 8) - *(_QWORD *)a7);
  return a1;
}

void sub_1002B4B78(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002B4B94(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int16 v5;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  sub_1001B0668((_QWORD *)a1, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 1);
  v4 = *(_QWORD *)(a2 + 24);
  v5 = *(_WORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = 0;
  *(_WORD *)(a1 + 32) = v5;
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  sub_1001530EC((_QWORD *)(a1 + 40), *(const void **)(a2 + 40), *(_QWORD *)(a2 + 48), *(_QWORD *)(a2 + 48) - *(_QWORD *)(a2 + 40));
  *(_BYTE *)(a1 + 64) = 1;
  return a1;
}

void sub_1002B4C04(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

__n128 *sub_1002B4C20(__n128 *a1, uint64_t a2)
{
  a1->n128_u8[0] = 0;
  a1[3].n128_u8[8] = 0;
  sub_1002B4C68(a1, a2);
  return a1;
}

void sub_1002B4C4C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 56))
    sub_1003E714C(v1);
  _Unwind_Resume(exception_object);
}

__n128 sub_1002B4C68(__n128 *a1, uint64_t a2)
{
  __n128 result;

  if (*(_BYTE *)(a2 + 56))
  {
    a1->n128_u64[0] = *(_QWORD *)a2;
    a1[1].n128_u64[0] = 0;
    a1[1].n128_u64[1] = 0;
    a1->n128_u64[1] = 0;
    sub_1001B0668(&a1->n128_u64[1], *(const void **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 1);
    result = *(__n128 *)(a2 + 32);
    a1[3].n128_u64[0] = *(_QWORD *)(a2 + 48);
    a1[2] = result;
    a1[3].n128_u8[8] = 1;
  }
  return result;
}

_BYTE *sub_1002B4CCC(_BYTE *a1, uint64_t a2)
{
  *a1 = 0;
  a1[64] = 0;
  if (*(_BYTE *)(a2 + 64))
  {
    sub_1001B05E4((uint64_t)a1, a2);
    a1[64] = 1;
  }
  return a1;
}

void sub_1002B4D0C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1001B06E0(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1002B4D20(_QWORD *result, const void *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = sub_1001A8D04(result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1002B4D7C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1002B4D98(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[3];

  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_1002B4F00(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_1000131D8(a1);
}

_QWORD *sub_1002B4F0C(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[3];

  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_1002B5074(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_1000131D8(a1);
}

_QWORD *sub_1002B5080(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[3];

  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_1002B51E8(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_1000131D8(a1);
}

void sub_1002B51F4(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (a2)
  {
    v2 = a2[5];
    a2[5] = 0;
    if (v2)
      operator delete();
    v3 = a2[4];
    a2[4] = 0;
    if (v3)
      operator delete();
    v4 = a2[3];
    a2[3] = 0;
    if (v4)
      operator delete();
    v5 = a2[2];
    a2[2] = 0;
    if (v5)
      operator delete();
    operator delete();
  }
}

void sub_1002B52AC()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_100850448);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_100850448))
    {
      sub_10000BF04(qword_100850430, "PRRoseProviderNetworkListener");
      __cxa_atexit((void (*)(void *))&std::string::~string, qword_100850430, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_100850448);
    }
  }
}

void sub_1002B5328(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_100850448);
  _Unwind_Resume(a1);
}

void sub_1002B5340()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_100850468);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_100850468))
    {
      sub_10000BF04(&qword_100850450, "com.apple.nearbyd.accessory.download");
      __cxa_atexit((void (*)(void *))&std::string::~string, &qword_100850450, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_100850468);
    }
  }
}

void sub_1002B53BC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_100850468);
  _Unwind_Resume(a1);
}

void sub_1002B53D4()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_100850488);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_100850488))
    {
      sub_10000BF04(&qword_100850470, "com.apple.nearbyd.accessory.files");
      __cxa_atexit((void (*)(void *))&std::string::~string, &qword_100850470, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_100850488);
    }
  }
}

void sub_1002B5450(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_100850488);
  _Unwind_Resume(a1);
}

void sub_1002B5468()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_1008504A8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1008504A8))
    {
      sub_10000BF04(qword_100850490, "MA_");
      __cxa_atexit((void (*)(void *))&std::string::~string, qword_100850490, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1008504A8);
    }
  }
}

void sub_1002B54E4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1008504A8);
  _Unwind_Resume(a1);
}

void sub_1002B54FC()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_1008504C8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1008504C8))
    {
      sub_10000BF04(qword_1008504B0, "MB_");
      __cxa_atexit((void (*)(void *))&std::string::~string, qword_1008504B0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1008504C8);
    }
  }
}

void sub_1002B5578(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1008504C8);
  _Unwind_Resume(a1);
}

void sub_1002B5590()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_1008504E8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1008504E8))
    {
      sub_10000BF04(qword_1008504D0, "D");
      __cxa_atexit((void (*)(void *))&std::string::~string, qword_1008504D0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1008504E8);
    }
  }
}

void sub_1002B560C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1008504E8);
  _Unwind_Resume(a1);
}

void sub_1002B5624()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_100850508);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_100850508))
    {
      sub_10000BF04(&qword_1008504F0, "A");
      __cxa_atexit((void (*)(void *))&std::string::~string, &qword_1008504F0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_100850508);
    }
  }
}

void sub_1002B56A0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_100850508);
  _Unwind_Resume(a1);
}

void sub_1002B56B8()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_100850528);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_100850528))
    {
      sub_10000BF04(qword_100850510, "FAS.bin");
      __cxa_atexit((void (*)(void *))&std::string::~string, qword_100850510, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_100850528);
    }
  }
}

void sub_1002B5734(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_100850528);
  _Unwind_Resume(a1);
}

void sub_1002B574C()
{
  unsigned __int8 v0;
  _OWORD *v1;

  v0 = atomic_load((unsigned __int8 *)&qword_100850548);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_100850548))
    {
      qword_100850530 = 0;
      qword_100850538 = 0;
      qword_100850540 = 0;
      v1 = operator new(0x30uLL);
      qword_100850538 = (uint64_t)(v1 + 3);
      qword_100850540 = (uint64_t)(v1 + 3);
      *v1 = xmmword_100475D70;
      v1[1] = unk_100475D80;
      v1[2] = xmmword_100475D90;
      qword_100850530 = (uint64_t)v1;
      __cxa_atexit((void (*)(void *))sub_100009C44, &qword_100850530, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_100850548);
    }
  }
}

void sub_1002B57EC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_100850548);
  _Unwind_Resume(a1);
}

void sub_1002B5804()
{
  void *v0;
  std::string *v1;
  __int128 v2;
  std::string *v3;
  __int128 v4;
  std::string *v5;
  __int128 v6;
  std::string *v7;
  __int128 v8;
  std::string *v9;
  __int128 v10;
  std::string *v11;
  __int128 v12;
  std::string *v13;
  __int128 v14;
  std::string *v15;
  __int128 v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  __int128 v22;
  std::string *v23;
  __int128 v24;
  std::string *v25;
  __int128 v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  __int128 v30;
  std::string *v31;
  __int128 v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  __int128 v36;
  std::string v37;
  std::string v38;

  v0 = objc_autoreleasePoolPush();
  sub_1003610EC(0);
  v1 = std::string::insert(&v37, 0, "reverseLUT_A");
  v2 = *(_OWORD *)&v1->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v1->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v2;
  v1->__r_.__value_.__l.__size_ = 0;
  v1->__r_.__value_.__r.__words[2] = 0;
  v1->__r_.__value_.__r.__words[0] = 0;
  v3 = std::string::append(&v38, ".bin");
  v4 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
  qword_10085B7C0 = v3->__r_.__value_.__r.__words[2];
  xmmword_10085B7B0 = v4;
  v3->__r_.__value_.__l.__size_ = 0;
  v3->__r_.__value_.__r.__words[2] = 0;
  v3->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_10085B7B0, (void *)&_mh_execute_header);
  sub_1003610EC(1);
  v5 = std::string::insert(&v37, 0, "reverseLUT_A");
  v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  v7 = std::string::append(&v38, ".bin");
  v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  qword_10085B7D8 = v7->__r_.__value_.__r.__words[2];
  xmmword_10085B7C8 = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_10085B7C8, (void *)&_mh_execute_header);
  sub_1003610EC(2);
  v9 = std::string::insert(&v37, 0, "reverseLUT_A");
  v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  v11 = std::string::append(&v38, ".bin");
  v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  qword_10085B7F0 = v11->__r_.__value_.__r.__words[2];
  xmmword_10085B7E0 = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_10085B7E0, (void *)&_mh_execute_header);
  sub_1003610EC(3);
  v13 = std::string::insert(&v37, 0, "reverseLUT_A");
  v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  v15 = std::string::append(&v38, ".bin");
  v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  qword_10085B808 = v15->__r_.__value_.__r.__words[2];
  xmmword_10085B7F8 = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_10085B7F8, (void *)&_mh_execute_header);
  sub_1003610EC(4);
  v17 = std::string::insert(&v37, 0, "reverseLUT_A");
  v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v18;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  v19 = std::string::append(&v38, ".bin");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  qword_10085B820 = v19->__r_.__value_.__r.__words[2];
  xmmword_10085B810 = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_10085B810, (void *)&_mh_execute_header);
  sub_1003610EC(5);
  v21 = std::string::insert(&v37, 0, "reverseLUT_A");
  v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  v23 = std::string::append(&v38, ".bin");
  v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  qword_10085B838 = v23->__r_.__value_.__r.__words[2];
  xmmword_10085B828 = v24;
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_10085B828, (void *)&_mh_execute_header);
  sub_1003610EC(6);
  v25 = std::string::insert(&v37, 0, "reverseLUT_A");
  v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v26;
  v25->__r_.__value_.__l.__size_ = 0;
  v25->__r_.__value_.__r.__words[2] = 0;
  v25->__r_.__value_.__r.__words[0] = 0;
  v27 = std::string::append(&v38, ".bin");
  v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
  qword_10085B850 = v27->__r_.__value_.__r.__words[2];
  xmmword_10085B840 = v28;
  v27->__r_.__value_.__l.__size_ = 0;
  v27->__r_.__value_.__r.__words[2] = 0;
  v27->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_10085B840, (void *)&_mh_execute_header);
  sub_1003610EC(7);
  v29 = std::string::insert(&v37, 0, "reverseLUT_A");
  v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v30;
  v29->__r_.__value_.__l.__size_ = 0;
  v29->__r_.__value_.__r.__words[2] = 0;
  v29->__r_.__value_.__r.__words[0] = 0;
  v31 = std::string::append(&v38, ".bin");
  v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
  qword_10085B868 = v31->__r_.__value_.__r.__words[2];
  xmmword_10085B858 = v32;
  v31->__r_.__value_.__l.__size_ = 0;
  v31->__r_.__value_.__r.__words[2] = 0;
  v31->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_10085B858, (void *)&_mh_execute_header);
  sub_1003610EC(8);
  v33 = std::string::insert(&v37, 0, "reverseLUT_A");
  v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v34;
  v33->__r_.__value_.__l.__size_ = 0;
  v33->__r_.__value_.__r.__words[2] = 0;
  v33->__r_.__value_.__r.__words[0] = 0;
  v35 = std::string::append(&v38, ".bin");
  v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
  qword_10085B880 = v35->__r_.__value_.__r.__words[2];
  xmmword_10085B870 = v36;
  v35->__r_.__value_.__l.__size_ = 0;
  v35->__r_.__value_.__r.__words[2] = 0;
  v35->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_10085B870, (void *)&_mh_execute_header);
  objc_autoreleasePoolPop(v0);
}

void sub_1002B5DF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void sub_1002B5F40(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002B622C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1002B63AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  uint64_t v18;

  if (v18)
    sub_1003E7164((uint64_t)&a18);
  _Unwind_Resume(exception_object);
}

void sub_1002B645C(id a1)
{
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  const char *v6;
  const char *v7;
  const char *v8;
  const char *v9;
  const char *v10;
  int v11;
  const char *v12;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "stringForKey:", CFSTR("FindingDiscoveryFlowOverride")));

  if (v2 && (v4 = objc_opt_class(NSString, v3), (objc_opt_isKindOfClass(v2, v4) & 1) != 0))
  {
    if (!objc_msgSend(v2, "isEqualToString:", CFSTR("NearbyActionNoWake_SpatialInteraction")))
    {
      if (objc_msgSend(v2, "isEqualToString:", CFSTR("SpatialInteraction_BothSides")))
      {
        byte_10085B890 = 1;
        v5 = qword_10085F520;
        if (!os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
          goto LABEL_15;
        if (byte_10085B890)
          v9 = "SpatialInteraction_BothSides";
        else
          v9 = "NearbyActionNoWake_SpatialInteraction";
        v11 = 136315138;
        v12 = v9;
        v7 = "#find-common,Discovery flow override: %s";
      }
      else
      {
        v5 = qword_10085F520;
        if (!os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
          goto LABEL_15;
        if (byte_10085B890)
          v10 = "SpatialInteraction_BothSides";
        else
          v10 = "NearbyActionNoWake_SpatialInteraction";
        v11 = 136315138;
        v12 = v10;
        v7 = "#find-common,Invalid discovery flow override. Returning discovery flow: %s";
      }
      goto LABEL_14;
    }
    byte_10085B890 = 0;
    v5 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
    {
      if (byte_10085B890)
        v6 = "SpatialInteraction_BothSides";
      else
        v6 = "NearbyActionNoWake_SpatialInteraction";
      v11 = 136315138;
      v12 = v6;
      v7 = "#find-common,Discovery flow override: %s";
LABEL_14:
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, v7, (uint8_t *)&v11, 0xCu);
    }
  }
  else
  {
    v5 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
    {
      if (byte_10085B890)
        v8 = "SpatialInteraction_BothSides";
      else
        v8 = "NearbyActionNoWake_SpatialInteraction";
      v11 = 136315138;
      v12 = v8;
      v7 = "#find-common,No discovery flow override. Returning discovery flow: %s";
      goto LABEL_14;
    }
  }
LABEL_15:

}

void sub_1002B66C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  v2 = v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1002B66E4(int a1)
{
  if (qword_10085B888 != -1)
    dispatch_once(&qword_10085B888, &stru_100812E10);
  if ((a1 & ~byte_10085B890) != 0)
    return 26;
  else
    return 19;
}

double sub_1002B6740(int a1)
{
  if (!a1)
    return sub_1002B6778(CFSTR("PeopleFindingOOBRefreshPeriodSecondsOverride"), 2.0);
  if (a1 != 1)
    sub_1003E7184();
  return sub_1002B6778(CFSTR("DeviceFindingOOBRefreshPeriodSecondsOverride"), 30.0);
}

double sub_1002B6778(void *a1, double a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  double v8;

  v3 = a1;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKey:", v3));
  if (v6)
  {
    v7 = objc_opt_class(NSNumber, v5);
    if ((objc_opt_isKindOfClass(v6, v7) & 1) != 0)
    {
      objc_msgSend(v6, "doubleValue");
      a2 = v8;
    }
  }

  return a2;
}

void sub_1002B680C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

double sub_1002B6834(int a1, int a2)
{
  if (!a2)
  {
    if (!a1)
      return sub_1002B6778(CFSTR("PeopleFindingFindableDeviceKeepAliveOOBTimeoutSecondsOverride"), 5.0);
    if (a1 == 1)
      return sub_1002B6778(CFSTR("DeviceFindingFindableDeviceKeepAliveOOBTimeoutSecondsOverride"), 0.0);
LABEL_11:
    sub_1003E71AC();
  }
  if (!a1)
    return sub_1002B6778(CFSTR("PeopleFindingFindableDeviceKeepAliveBluetoothTimeoutSecondsOverride"), 10.0);
  if (a1 != 1)
    goto LABEL_11;
  return sub_1002B6778(CFSTR("DeviceFindingFindableDeviceKeepAliveBluetoothTimeoutSecondsOverride"), 0.0);
}

uint64_t sub_1002B689C(int a1)
{
  __CFString *v1;

  if (a1)
  {
    if (a1 != 1)
      sub_1003E71D4();
    v1 = CFSTR("DeviceFindingUWBDiscoveryTimeoutSecondsOverride");
  }
  else
  {
    v1 = CFSTR("PeopleFindingUWBDiscoveryTimeoutSecondsOverride");
  }
  return sub_1002B68D0(v1, 0x78u);
}

uint64_t sub_1002B68D0(void *a1, unsigned __int16 a2)
{
  id v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;

  v3 = a1;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKey:", v3));

  if (v5)
  {
    v7 = objc_opt_class(NSNumber, v6);
    if ((objc_opt_isKindOfClass(v5, v7) & 1) != 0)
    {
      v8 = objc_msgSend(v5, "intValue");
      if (v8 >= 0xFFFF)
        a2 = -1;
      else
        a2 = v8;
    }
  }

  return a2;
}

void sub_1002B6964(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t sub_1002B6990(int a1)
{
  __CFString *v1;

  if (a1)
  {
    if (a1 != 1)
      sub_1003E71FC();
    v1 = CFSTR("DeviceFindingUWBReacquisitionTimeoutSecondsOverride");
  }
  else
  {
    v1 = CFSTR("PeopleFindingUWBReacquisitionTimeoutSecondsOverride");
  }
  return sub_1002B68D0(v1, 0x3Cu);
}

const char *sub_1002B69C4(int a1)
{
  if (a1)
    return "Device";
  else
    return "People";
}

const char *sub_1002B69E0(int a1)
{
  if (a1)
    return "Finder";
  else
    return "Findee";
}

id sub_1002B69FC(uint64_t a1, int a2, void *a3, void *a4)
{
  id v7;
  id v8;
  const char *v9;
  void *v10;
  void *v11;

  v7 = a3;
  v8 = a4;
  v9 = "Findee";
  if (a2)
    v9 = "Finder";
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableString stringWithFormat:](NSMutableString, "stringWithFormat:", CFSTR("#event %-*s | Role: %-*s"), 16, a1, 14, v9));
  if (v7)
  {
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "descriptionInternal"));
    objc_msgSend(v10, "appendFormat:", CFSTR(" | Token: %@"), v11);

  }
  if (v8)
    objc_msgSend(v10, "appendFormat:", CFSTR(" | %@"), v8);

  return v10;
}

void sub_1002B6AD4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

id sub_1002B6B04(void *a1)
{
  id v1;
  void *v2;

  v1 = a1;
  if (qword_10085B898 != -1)
    dispatch_once(&qword_10085B898, &stru_100812E30);
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)qword_10085B8A0, "stringFromDate:", v1));

  return v2;
}

void sub_1002B6B6C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002B6B7C(id a1)
{
  NSDateFormatter *v1;
  void *v2;

  v1 = objc_opt_new(NSDateFormatter);
  v2 = (void *)qword_10085B8A0;
  qword_10085B8A0 = (uint64_t)v1;

  objc_msgSend((id)qword_10085B8A0, "setDateFormat:", CFSTR("yyyy-MM-dd' 'HH:mm:ss'.'SSS"));
}

void sub_1002B6BBC(void *a1, _QWORD *a2)
{
  id v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  id v8;
  void *__p[2];
  char v10;

  v3 = a1;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate now](NSDate, "now"));
  v5 = sub_1002B6B04(v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@ : %@"), v6, v3));

  v8 = objc_retainAutorelease(v7);
  sub_10000BF04(__p, (char *)objc_msgSend(v8, "UTF8String"));
  sub_1002B6CD8(__p);
  sub_1002B6E6C(a2);
  sub_1002B6EE0(a2, (__int128 *)__p);
  if (v10 < 0)
    operator delete(__p[0]);

}

void sub_1002B6C94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

void sub_1002B6CD8(_QWORD *__dst)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  char v7;
  uint64_t v8;
  void *v9;
  int v10;
  unint64_t v11;

  v2 = *((unsigned __int8 *)__dst + 23);
  if ((*((char *)__dst + 23) & 0x80000000) == 0)
  {
    if (v2 < 0x17)
      return;
    v3 = v2 | 7;
    if ((v2 | 7) == 0x17)
    {
      v4 = v2 & 0xF8;
      if (v4 <= 0xE)
      {
        v5 = v4 + 9;
        v6 = (_QWORD *)*__dst;
        v7 = 1;
        v8 = *((unsigned __int8 *)__dst + 23);
        v9 = __dst;
        v10 = 1;
        goto LABEL_20;
      }
      v3 = v4 + 8;
    }
    v8 = *((unsigned __int8 *)__dst + 23);
    goto LABEL_16;
  }
  v11 = __dst[1];
  if (v11 < 0x17)
  {
    if ((__dst[2] & 0x7FFFFFFFFFFFFFFFLL) == 0x17)
      return;
    v3 = 22;
    goto LABEL_13;
  }
  v3 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v11 | 7) != 0x17)
    v3 = v11 | 7;
  if (v3 != (__dst[2] & 0x7FFFFFFFFFFFFFFFLL) - 1)
  {
    if (v3 >= 0x17)
    {
      v8 = __dst[1];
LABEL_16:
      v5 = v3 + 1;
      v9 = operator new(v3 + 1);
      v7 = 0;
      if ((v2 & 0x80) == 0)
      {
        v10 = 0;
        v6 = __dst;
        goto LABEL_20;
      }
      v11 = __dst[1];
LABEL_19:
      v6 = (_QWORD *)*__dst;
      v10 = 1;
      v2 = v11;
LABEL_20:
      if (v2 == -1)
      {
        if (!v10)
          goto LABEL_22;
      }
      else
      {
        memmove(v9, v6, v2 + 1);
        if (!v10)
        {
LABEL_22:
          if ((v7 & 1) != 0)
          {
LABEL_23:
            *((_BYTE *)__dst + 23) = v8 & 0x7F;
            return;
          }
          goto LABEL_26;
        }
      }
      operator delete(v6);
      if ((v7 & 1) != 0)
        goto LABEL_23;
LABEL_26:
      __dst[1] = v8;
      __dst[2] = v5 | 0x8000000000000000;
      *__dst = v9;
      return;
    }
LABEL_13:
    v5 = v3 + 1;
    v7 = 1;
    v8 = __dst[1];
    v9 = __dst;
    goto LABEL_19;
  }
}

void sub_1002B6E5C(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1002B6E3CLL);
}

uint64_t sub_1002B6E6C(_QWORD *a1)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;

  v2 = a1[4];
  v3 = *(_QWORD *)(a1[1] + 8 * (v2 / 0xAA)) + 24 * (v2 % 0xAA);
  if (*(char *)(v3 + 23) < 0)
  {
    operator delete(*(void **)v3);
    v2 = a1[4];
  }
  v4 = a1[5] - 1;
  a1[4] = v2 + 1;
  a1[5] = v4;
  return sub_1002B7888((uint64_t)a1, 1);
}

_QWORD *sub_1002B6EE0(_QWORD *a1, __int128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *result;
  __int128 v9;

  v4 = a1[1];
  v5 = a1[2];
  v6 = 170 * ((v5 - v4) >> 3) - 1;
  if (v5 == v4)
    v6 = 0;
  if (v6 == a1[5] + a1[4])
  {
    sub_1002B78E4(a1);
    v4 = a1[1];
    v5 = a1[2];
  }
  if (v5 == v4)
  {
    result = 0;
  }
  else
  {
    v7 = a1[5] + a1[4];
    result = (_QWORD *)(*(_QWORD *)(v4 + 8 * (v7 / 0xAA)) + 24 * (v7 % 0xAA));
  }
  if (*((char *)a2 + 23) < 0)
  {
    result = sub_100004678(result, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v9 = *a2;
    result[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)result = v9;
  }
  ++a1[5];
  return result;
}

id sub_1002B6FA8(void *a1, int a2, int a3)
{
  id v5;
  NSMutableString *v6;
  int v7;
  id v8;
  NSMutableString *v9;
  id v10;
  const char *v12;
  int v13;
  _QWORD v14[4];
  id v15;
  NSMutableString *v16;
  _QWORD *v17;
  uint64_t *v18;
  int v19;
  _QWORD v20[5];
  NSMutableArray *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t (*v25)(uint64_t, uint64_t);
  void (*v26)(uint64_t);
  NSMutableArray *v27;

  v5 = a1;
  if (a2 < 1)
  {
    v12 = "tokensPerLine > 0";
    v13 = 368;
    goto LABEL_9;
  }
  if (a3 < 0)
  {
    v12 = "indentLevel >= 0";
    v13 = 369;
LABEL_9:
    __assert_rtn("printableStringsForTokens", "NIServerFindingCommon.mm", v13, v12);
  }
  v22 = 0;
  v23 = &v22;
  v24 = 0x3032000000;
  v25 = sub_1002B71E8;
  v26 = sub_1002B71F8;
  v27 = objc_opt_new(NSMutableArray);
  v20[0] = 0;
  v20[1] = v20;
  v20[2] = 0x3032000000;
  v20[3] = sub_1002B71E8;
  v20[4] = sub_1002B71F8;
  v21 = objc_opt_new(NSMutableArray);
  v6 = objc_opt_new(NSMutableString);
  v7 = a3 + 1;
  while (--v7)
    -[NSMutableString appendString:](v6, "appendString:", CFSTR("    "));
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_1002B7200;
  v14[3] = &unk_100812E80;
  v17 = v20;
  v19 = a2;
  v8 = v5;
  v15 = v8;
  v9 = v6;
  v16 = v9;
  v18 = &v22;
  objc_msgSend(v8, "enumerateObjectsUsingBlock:", v14);
  v10 = (id)v23[5];

  _Block_object_dispose(v20, 8);
  _Block_object_dispose(&v22, 8);

  return v10;
}

void sub_1002B7178(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,id a30)
{
  void *v30;
  void *v31;

  _Block_object_dispose(&a19, 8);
  _Block_object_dispose(&a25, 8);

  _Unwind_Resume(a1);
}

uint64_t sub_1002B71E8(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1002B71F8(uint64_t a1)
{

}

void sub_1002B7200(uint64_t a1, void *a2, char *a3)
{
  id v5;
  void *v6;
  _QWORD v7[5];
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t);
  void (*v12)(uint64_t);
  id v13;

  v5 = a2;
  objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), "addObject:", v5);
  if ((unint64_t)objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), "count") >= *(int *)(a1 + 64)
    || (char *)objc_msgSend(*(id *)(a1 + 32), "count") - 1 <= a3)
  {
    v8 = 0;
    v9 = &v8;
    v10 = 0x3032000000;
    v11 = sub_1002B71E8;
    v12 = sub_1002B71F8;
    v13 = objc_msgSend(*(id *)(a1 + 40), "mutableCopy");
    v6 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40);
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_1002B7364;
    v7[3] = &unk_100812E58;
    v7[4] = &v8;
    objc_msgSend(v6, "enumerateObjectsUsingBlock:", v7);
    objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), "addObject:", v9[5]);
    objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), "removeAllObjects");
    _Block_object_dispose(&v8, 8);

  }
}

void sub_1002B7334(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002B7364(uint64_t a1, void *a2)
{
  void *v2;
  id v3;

  v2 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "descriptionInternal"));
  objc_msgSend(v2, "appendFormat:", CFSTR("%@ "), v3);

}

void sub_1002B73B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

const char *sub_1002B73C8(int a1)
{
  if (a1 == 19)
    return "SpatialInteraction";
  else
    return "NearbyActionNoWake";
}

const char *sub_1002B73E4(int a1)
{
  const char *v1;

  v1 = "Unspecified";
  if (a1 == 2)
    v1 = "UWB";
  if (a1 == 1)
    return "NB-UWB";
  else
    return v1;
}

BOOL sub_1002B7410(_QWORD *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  _BOOL8 result;
  BOOL v6;

  v2 = a1[1];
  if (*a1 == v2)
    return 0;
  v3 = *a1 + 4;
  do
  {
    v4 = *(_DWORD *)(v3 - 4);
    result = v4 == a2;
    v6 = v4 == a2 || v3 == v2;
    v3 += 4;
  }
  while (!v6);
  return result;
}

id sub_1002B7444(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v7;

  v1 = a1;
  v2 = v1;
  if (!v1)
    __assert_rtn("getCBOOBKeyAddressFromDiscoveryToken", "NIServerFindingCommon.mm", 491, "token");
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "getIRK"));
  v4 = v3;
  if (v3)
  {
    v7 = SipHash(objc_msgSend(objc_retainAutorelease(v3), "bytes"), &unk_100475EA5, 19);
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", &v7, 6));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

void sub_1002B7504(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1002B7524()
{
  void *v0;
  void *v1;
  unsigned int v2;
  NSObject *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint8_t v8[16];

  v0 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  if ((objc_msgSend(v0, "BOOLForKey:", CFSTR("FindingBypassDiscovery")) & 1) != 0)
  {
    v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
    v2 = objc_msgSend(v1, "BOOLForKey:", CFSTR("FindingGateObjectUpdatesOnDiscovery"));

    if (v2)
    {
      v3 = qword_10085F520;
      v4 = 0;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v8 = 0;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#find-common,Cannot set both FindingBypassDiscovery and FindingGateObjectUpdatesOnDiscovery defaults writes, remove one.", v8, 2u);
        return 0;
      }
      return v4;
    }
  }
  else
  {

  }
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  if ((objc_msgSend(v5, "BOOLForKey:", CFSTR("FindingBypassDiscovery")) & 1) != 0)
  {
    v4 = 1;
  }
  else
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
    v4 = (uint64_t)objc_msgSend(v6, "BOOLForKey:", CFSTR("FindingGateObjectUpdatesOnDiscovery"));

  }
  return v4;
}

void sub_1002B7644(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1002B7674(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  void *v7;
  _QWORD v8[4];
  id v9;
  uint8_t buf[4];
  void *v11;

  v1 = a1;
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "stringForKey:", CFSTR("FindableDeviceFilterSingleTokenHash")));

  if (v3)
  {
    v5 = objc_opt_class(NSString, v4);
    if ((objc_opt_isKindOfClass(v3, v5) & 1) != 0)
    {
      v6 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138477827;
        v11 = v3;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#find-common,Findable device: override to use only %{private}@", buf, 0xCu);
      }
      v8[0] = _NSConcreteStackBlock;
      v8[1] = 3221225472;
      v8[2] = sub_1002B7838;
      v8[3] = &unk_100812EA8;
      v9 = v3;
      v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithBlock:](NSPredicate, "predicateWithBlock:", v8));
      objc_msgSend(v1, "filterUsingPredicate:", v7);

    }
  }

}

void sub_1002B77DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  v17 = v16;

  _Unwind_Resume(a1);
}

id sub_1002B7838(uint64_t a1, void *a2)
{
  void *v3;
  id v4;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "descriptionInternal"));
  v4 = objc_msgSend(v3, "isEqualToString:", *(_QWORD *)(a1 + 32));

  return v4;
}

void sub_1002B7878(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1002B7888(uint64_t a1, int a2)
{
  unint64_t v2;
  int v4;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2 < 0xAA)
    a2 = 1;
  if (v2 < 0x154)
    v4 = a2;
  else
    v4 = 0;
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(_QWORD *)(a1 + 8) += 8;
    *(_QWORD *)(a1 + 32) -= 170;
  }
  return v4 ^ 1u;
}

void sub_1002B78E4(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0xAA;
  v4 = v2 - 170;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10005538C(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0xFF0uLL);
      sub_1001389D0(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0xFF0uLL);
    sub_100138AE4((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10005538C((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_10005538C((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0xFF0uLL);
  sub_100138C00(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_100138D14((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_1002B7BAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

_QWORD *sub_1002B7BF8@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, off_100812F30[a1]);
}

_QWORD *sub_1002B7C0C@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, off_100812F88[a1]);
}

_QWORD *sub_1002B7C20@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, off_100812FD0[a1]);
}

_QWORD *sub_1002B7C34@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, off_100812FF0[a1]);
}

void sub_1002B7E6C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1002B8298(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1002B8330(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "remote"));
  objc_msgSend(v2, "didUpdateNearbyObjects:", *(_QWORD *)(a1 + 40));

}

void sub_1002B8370(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t sub_1002B862C(uint64_t result)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 24) = *(_QWORD *)(*(_QWORD *)(result + 32) + 120);
  return result;
}

void sub_1002B897C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id location)
{
  void *v24;
  void *v25;
  id *v26;
  id *v27;
  void *v28;

  objc_destroyWeak(v27);
  objc_destroyWeak(v26);
  objc_destroyWeak(&location);

  _Unwind_Resume(a1);
}

void sub_1002B89E4(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_serverConnectionInterrupted");

}

void sub_1002B8A18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1002B8A2C(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_serverConnectionInvalidated");

}

void sub_1002B8A60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1002B8A74(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  id v7;

  v7 = a2;
  v5 = a3;
  v6 = *(void **)(a1 + 32);
  if (v5)
    objc_msgSend(v6, "_handleActivationError:", v5);
  else
    objc_msgSend(v6, "_handleActivationSuccess:", v7);

}

void sub_1002B8AD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1002B8B28(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002B8C64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  void *v20;
  void *v21;
  void *v22;

  _Block_object_dispose(&a15, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1002B8CA4(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1002B8CB4(uint64_t a1)
{

}

void sub_1002B8CBC(uint64_t a1, void *a2)
{
  id v4;

  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a2);
  v4 = a2;
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));

}

void sub_1002B8F40(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1002B8F78(uint64_t a1, void *a2)
{
  float v3;
  float v4;
  float v5;
  float v6;
  float *v7;
  float v8;
  float v10;
  float v12;
  uint64_t v13;
  id v14;

  v14 = a2;
  objc_msgSend(v14, "distance");
  v4 = v3;
  objc_msgSend(v14, "horizontalAngle");
  ++*(_DWORD *)(*(_QWORD *)(a1 + 32) + 212);
  v6 = NINearbyObjectDistanceNotAvailable;
  if (v4 != NINearbyObjectDistanceNotAvailable)
  {
    ++*(_DWORD *)(*(_QWORD *)(a1 + 32) + 216);
    *(float *)(*(_QWORD *)(a1 + 32) + 228) = v4;
    v7 = *(float **)(a1 + 32);
    if (v7[56] == v6)
    {
      v7[56] = v4;
      v7 = *(float **)(a1 + 32);
    }
    v8 = v7[58];
    if (v8 == v6 || v8 > v4)
    {
      v7[58] = v4;
      v7 = *(float **)(a1 + 32);
    }
    v10 = v7[59];
    if (v10 == v6 || v10 < v4)
      v7[59] = v4;
  }
  v12 = NINearbyObjectAngleNotAvailable;
  if (v5 != NINearbyObjectAngleNotAvailable)
  {
    ++*(_DWORD *)(*(_QWORD *)(a1 + 32) + 220);
    *(float *)(*(_QWORD *)(a1 + 32) + 244) = v5;
    v13 = *(_QWORD *)(a1 + 32);
    if (*(float *)(v13 + 240) == v12)
      *(float *)(v13 + 240) = v5;
  }

}

void sub_1002B9080(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

id sub_1002B9138(uint64_t a1)
{
  void *v1;
  void *v2;
  const __CFString *v4;
  void *v5;

  v4 = CFSTR("duration");
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(*(_QWORD *)(a1 + 32) + 104)));
  v5 = v1;
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v5, &v4, 1));

  return v2;
}

void sub_1002B91DC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id sub_1002B9290(uint64_t a1)
{
  void *v1;
  void *v2;
  const __CFString *v4;
  void *v5;

  v4 = CFSTR("duration");
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(*(_QWORD *)(a1 + 32) + 104)));
  v5 = v1;
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v5, &v4, 1));

  return v2;
}

void sub_1002B9334(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002B948C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id sub_1002B94E0(uint64_t a1)
{
  id *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  _QWORD v8[3];
  _QWORD v9[3];

  v8[0] = CFSTR("domain");
  v2 = (id *)(a1 + 32);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "domain"));
  v9[0] = v3;
  v8[1] = CFSTR("code");
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", objc_msgSend(*v2, "code")));
  v8[2] = CFSTR("string");
  v5 = *(_QWORD *)(a1 + 40);
  v9[1] = v4;
  v9[2] = v5;
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v9, v8, 3));

  return v6;
}

void sub_1002B95CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id sub_1002B966C(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  int v5;
  uint64_t v6;

  if (+[NIPlatformInfo isInternalBuild](NIPlatformInfo, "isInternalBuild"))
  {
    v2 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 88);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      v3 = *(_QWORD *)(a1 + 40);
      v5 = 134283521;
      v6 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Set delegate: %{private}p", (uint8_t *)&v5, 0xCu);
    }
  }
  return objc_storeWeak((id *)(*(_QWORD *)(a1 + 32) + 256), *(id *)(a1 + 40));
}

void sub_1002B9800(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002B9810(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  int v4;
  uint64_t v5;

  if (+[NIPlatformInfo isInternalBuild](NIPlatformInfo, "isInternalBuild"))
  {
    v2 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 88);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      v3 = *(_QWORD *)(a1 + 40);
      v4 = 134283521;
      v5 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Set delegate queue: %{private}p", (uint8_t *)&v4, 0xCu);
    }
  }
  objc_storeStrong((id *)(*(_QWORD *)(a1 + 32) + 264), *(id *)(a1 + 40));
}

void sub_1002B994C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002B9A90(uint64_t a1)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), *(id *)(*(_QWORD *)(a1 + 32) + 40));
}

void sub_1002B9C2C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 112), 8);

  _Unwind_Resume(a1);
}

void sub_1002B9C4C(uint64_t a1)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), *(id *)(*(_QWORD *)(a1 + 32) + 128));
}

void sub_1002B9C60(uint64_t a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_remoteObject"));
  objc_msgSend(v1, "generateDiscoveryToken");

}

void sub_1002B9C98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1002B9CAC(uint64_t a1)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), *(id *)(*(_QWORD *)(a1 + 32) + 128));
}

void sub_1002B9D44(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002B9E40(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002B9E50(uint64_t a1)
{
  unsigned int v2;
  NSObject *v3;
  uint64_t v4;
  const __CFString *v5;
  uint64_t v6;
  NSObject *v7;
  id v8;
  void *v9;
  void *v10;
  uint64_t v11;
  NSObject *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  _QWORD v17[5];
  _QWORD v18[4];
  unsigned int v19;
  uint8_t buf[4];
  uint64_t v21;
  __int16 v22;
  const __CFString *v23;
  __int16 v24;
  uint64_t v25;

  v2 = objc_msgSend(*(id *)(a1 + 32), "internalState");
  if (+[NIPlatformInfo isInternalBuild](NIPlatformInfo, "isInternalBuild"))
  {
    v3 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 88);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16);
      if (v2 - 1 > 7)
        v5 = CFSTR("Activating");
      else
        v5 = off_100813558[v2 - 1];
      v6 = *(_QWORD *)(a1 + 40);
      *(_DWORD *)buf = 138412802;
      v21 = v4;
      v22 = 2112;
      v23 = v5;
      v24 = 2112;
      v25 = v6;
      v7 = v3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Client: runWithConfiguration [%@]. State: %@. Config: %@.", buf, 0x20u);

    }
  }
  atomic_store(1u, (unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 80));
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472;
  v18[2] = sub_1002BA134;
  v18[3] = &unk_10080D130;
  v19 = v2;
  AnalyticsSendEventLazy(CFSTR("com.apple.nearbyinteraction.session.run"), v18);
  switch(v2)
  {
    case 0u:
    case 1u:
    case 4u:
    case 5u:
      goto LABEL_8;
    case 2u:
    case 3u:
      if (objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "isEqual:", *(_QWORD *)(a1 + 40)))
        goto LABEL_10;
LABEL_8:
      objc_msgSend(*(id *)(a1 + 32), "setInternalState:", 2);
      v8 = objc_msgSend(*(id *)(a1 + 40), "copy");
      v9 = *(void **)(*(_QWORD *)(a1 + 32) + 40);
      *(_QWORD *)(*(_QWORD *)(a1 + 32) + 40) = v8;

      objc_msgSend(*(id *)(a1 + 32), "_logTime");
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_remoteObject"));
      v11 = *(_QWORD *)(a1 + 40);
      v17[0] = _NSConcreteStackBlock;
      v17[1] = 3221225472;
      v17[2] = sub_1002BA1D0;
      v17[3] = &unk_100813140;
      v17[4] = *(_QWORD *)(a1 + 32);
      objc_msgSend(v10, "runWithConfiguration:reply:", v11, v17);

      break;
    case 6u:
      objc_msgSend(*(id *)(a1 + 32), "_reinterruptSessionWithCachedInterruption");
      return;
    case 7u:
    case 8u:
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "invalidationError"));
      v14 = *(void **)(a1 + 32);
      if (v13)
        v15 = objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "invalidationError"));
      else
        v15 = objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "_getSessionFailureError"));
      v16 = (void *)v15;

      objc_msgSend(*(id *)(a1 + 32), "_notifyDidInvalidateWithError:", v16);
      return;
    default:
LABEL_10:
      if (+[NIPlatformInfo isInternalBuild](NIPlatformInfo, "isInternalBuild"))
      {
        v12 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 88);
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Not runnable", buf, 2u);
        }
      }
      break;
  }
}

void sub_1002BA108(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id sub_1002BA134(uint64_t a1)
{
  unsigned int v1;
  const __CFString *v2;
  const __CFString *v4;
  const __CFString *v5;

  v4 = CFSTR("state");
  v1 = *(_DWORD *)(a1 + 32) - 1;
  if (v1 > 7)
    v2 = CFSTR("Activating");
  else
    v2 = off_100813558[v1];
  v5 = v2;
  return (id)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v5, &v4, 1));
}

void sub_1002BA1D0(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v5 = v3;
  if (v3)
    objc_msgSend(v4, "_handleRunSessionError:", v3);
  else
    objc_msgSend(v4, "_handleRunSessionSuccess");

}

void sub_1002BA21C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1002BA288(uint64_t a1)
{
  unsigned int v2;
  NSObject *v3;
  uint64_t v4;
  const __CFString *v5;
  NSObject *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  id *v10;
  void *v11;
  void *v12;
  void *v13;
  _QWORD v14[5];
  uint8_t buf[4];
  uint64_t v16;
  __int16 v17;
  const __CFString *v18;

  v2 = objc_msgSend(*(id *)(a1 + 32), "internalState");
  if (+[NIPlatformInfo isInternalBuild](NIPlatformInfo, "isInternalBuild"))
  {
    v3 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 88);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16);
      if (v2 - 1 > 7)
        v5 = CFSTR("Activating");
      else
        v5 = off_100813558[v2 - 1];
      *(_DWORD *)buf = 138412546;
      v16 = v4;
      v17 = 2112;
      v18 = v5;
      v6 = v3;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Client: pause [%@]. State: %@.", buf, 0x16u);

    }
  }
  if (v2 - 2 < 2)
  {
    v11 = *(void **)(a1 + 32);
    v10 = (id *)(a1 + 32);
    objc_msgSend(v11, "setInternalState:", 4);
    objc_msgSend(*v10, "_pauseInternalARSessionIfNeeded");
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*v10, "_remoteObject"));
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    v14[2] = sub_1002BA494;
    v14[3] = &unk_100813140;
    v14[4] = *v10;
    objc_msgSend(v12, "pause:", v14);

  }
  else if (v2 - 7 >= 2)
  {
    if (v2 == 6)
      objc_msgSend(*(id *)(a1 + 32), "_reinterruptSessionWithCachedInterruption");
  }
  else
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "invalidationError"));
    v8 = *(void **)(a1 + 32);
    if (v7)
      v9 = objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "invalidationError"));
    else
      v9 = objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "_getSessionFailureError"));
    v13 = (void *)v9;

    objc_msgSend(*(id *)(a1 + 32), "_notifyDidInvalidateWithError:", v13);
  }
}

void sub_1002BA468(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002BA494(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v5 = v3;
  if (v3)
    objc_msgSend(v4, "_handlePauseSessionError:", v3);
  else
    objc_msgSend(v4, "_handlePauseSessionSuccess");

}

void sub_1002BA4E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

id sub_1002BA54C(uint64_t a1)
{
  NSObject *v2;
  _QWORD *v3;
  uint64_t v4;
  unsigned int v5;
  const __CFString *v6;
  int v8;
  uint64_t v9;
  __int16 v10;
  const __CFString *v11;

  if (+[NIPlatformInfo isInternalBuild](NIPlatformInfo, "isInternalBuild"))
  {
    v2 = *(id *)(*(_QWORD *)(a1 + 32) + 88);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      v3 = *(_QWORD **)(a1 + 32);
      v4 = v3[2];
      v5 = objc_msgSend(v3, "internalState") - 1;
      if (v5 > 7)
        v6 = CFSTR("Activating");
      else
        v6 = off_100813558[v5];
      v8 = 138412546;
      v9 = v4;
      v10 = 2112;
      v11 = v6;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Client: invalidate [%@]. State: %@.", (uint8_t *)&v8, 0x16u);
    }

  }
  return objc_msgSend(*(id *)(a1 + 32), "_invalidateInternal");
}

void sub_1002BA64C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002BA72C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  _Unwind_Resume(exception_object);
}

void sub_1002BA844(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id sub_1002BA854(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_setARSessionInternal:", *(_QWORD *)(a1 + 40));
}

void sub_1002BA9AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

__n128 sub_1002BAAD4(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)(a2 + 48);
  v3 = *(_OWORD *)(a2 + 64);
  v4 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v4;
  *(__n128 *)(a1 + 48) = result;
  *(_OWORD *)(a1 + 64) = v3;
  return result;
}

uint32x4_t sub_1002BAAEC(uint64_t a1)
{
  void *v2;
  void *v3;
  uint32x4_t result;
  void *v5;
  void *v6;
  id v7;
  float32x4_t v8;
  uint64_t v9;

  v2 = *(void **)(*(_QWORD *)(a1 + 32) + 192);
  if (v2)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "latestARFrame"));

    if (v3)
    {
      v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 192), "latestARFrame"));
      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "camera"));
      v7 = objc_msgSend(v6, "trackingState");

      if (v7 == (id)2)
      {
        objc_msgSend(*(id *)(a1 + 40), "worldPosition");
        result = (uint32x4_t)vceqq_f32(v8, (float32x4_t)NINearbyObjectWorldPositionNotAvailable);
        result.i32[3] = result.i32[2];
        result.i32[0] = vminvq_u32(result);
        if ((result.i32[0] & 0x80000000) == 0)
        {
          objc_msgSend(*(id *)(a1 + 40), "worldPosition");
          result.i32[3] = 1.0;
          v9 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
          *(_OWORD *)(v9 + 48) = xmmword_100456C00;
          *(_OWORD *)(v9 + 64) = xmmword_100456C10;
          *(_OWORD *)(v9 + 80) = xmmword_100475F10;
          *(uint32x4_t *)(v9 + 96) = result;
        }
      }
    }
  }
  return result;
}

void sub_1002BABC4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1002BAC4C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002BAE2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  void *v22;

  _Block_object_dispose(&a17, 8);
  _Unwind_Resume(a1);
}

void sub_1002BAE64(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  id v5;
  id v6;

  v2 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 128), "descriptionInternal"));
  objc_msgSend(v2, "appendFormat:", CFSTR(", Token: %@"), v5);

  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
  v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v3 + 40), "descriptionInternal"));
  objc_msgSend(v4, "appendFormat:", CFSTR(", Config: %@"), v6);

}

void sub_1002BAEEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_1002BAF80(uint64_t a1)
{
  objc_storeStrong((id *)(*(_QWORD *)(a1 + 32) + 40), *(id *)(a1 + 40));
}

void sub_1002BB0E4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002BB270(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002BB4C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  void *v20;

  _Unwind_Resume(a1);
}

void sub_1002BB4FC(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 256));
  objc_msgSend(WeakRetained, "session:didRemoveNearbyObjects:withReason:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), 0);

}

void sub_1002BB540(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1002BB554(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 256));
  objc_msgSend(WeakRetained, "session:didRemoveNearbyObjects:withReason:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), 1);

}

void sub_1002BB598(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

id sub_1002BB5AC(uint64_t a1)
{
  const __CFString *v1;
  void *v2;
  void *v3;
  const __CFString *v5;
  void *v6;

  v5 = CFSTR("reason");
  v1 = sub_1002D7634(*(_QWORD *)(a1 + 32));
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v6 = v2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v6, &v5, 1));

  return v3;
}

void sub_1002BB640(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002BB850(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1002BB8D4(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 256));
  objc_msgSend(WeakRetained, "session:didUpdateNearbyObjects:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));

}

void sub_1002BB914(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1002BB9A0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002BBA28(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002BBCE8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id sub_1002BBD40(uint64_t a1)
{
  const __CFString *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  _QWORD v8[3];
  _QWORD v9[3];

  v8[0] = CFSTR("reason");
  v2 = sub_1002D7610(*(_QWORD *)(a1 + 40));
  v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  v9[0] = v3;
  v8[1] = CFSTR("reinterrupted");
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 48)));
  v8[2] = CFSTR("previousReason");
  v5 = *(_QWORD *)(a1 + 32);
  v9[1] = v4;
  v9[2] = v5;
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v9, v8, 3));

  return v6;
}

void sub_1002BBE1C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1002BC148(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

id sub_1002BC16C(uint64_t a1)
{
  const __CFString *v2;
  void *v3;
  void *v4;
  void *v5;
  _QWORD v7[2];
  _QWORD v8[2];

  v7[0] = CFSTR("reason");
  v2 = sub_1002D7610(*(_QWORD *)(a1 + 32));
  v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  v7[1] = CFSTR("duration");
  v8[0] = v3;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(a1 + 40) - *(double *)(a1 + 48)));
  v8[1] = v4;
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v8, v7, 2));

  return v5;
}

void sub_1002BC238(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1002BC260(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 256));
  objc_msgSend(WeakRetained, "sessionSuspensionEnded:", *(_QWORD *)(a1 + 32));

}

void sub_1002BC2A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1002BC2B4(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 256));
  objc_msgSend(WeakRetained, "session:suspensionReasonEnded:isNoLongerSuspended:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 48));

}

void sub_1002BC2F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1002BC42C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002BC448(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 256));
  objc_msgSend(WeakRetained, "sessionDidUpdateDiscoveryToken:", *(_QWORD *)(a1 + 32));

}

void sub_1002BC488(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1002BC53C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1002BC55C(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 256));
  objc_msgSend(WeakRetained, "session:didReceiveRangingAuthRecommendation:forObject:", *(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 48), *(_QWORD *)(a1 + 40));

}

void sub_1002BC5A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1002BC6D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1002BC6F8(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 256));
  objc_msgSend(WeakRetained, "session:didDiscoverNearbyObject:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));

}

void sub_1002BC738(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1002BC8D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16)
{
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void sub_1002BC914(_QWORD *a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1[4] + 256));
  objc_msgSend(WeakRetained, "session:object:didUpdateRegion:previousRegion:", a1[4], a1[5], a1[6], a1[7]);

}

void sub_1002BC958(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1002BC9E8(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 256));
  objc_msgSend(WeakRetained, "session:didUpdateLocalMotionState:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));

}

void sub_1002BCA28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1002BCAB8(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 256));
  objc_msgSend(WeakRetained, "session:didUpdateHomeDeviceUWBRangingAvailability:", *(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 40));

}

void sub_1002BCAFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1002BCB9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1002BCBB4(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 256));
  objc_msgSend(WeakRetained, "session:relayDCKMessage:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));

}

void sub_1002BCBF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1002BCC64(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 256));
  objc_msgSend(WeakRetained, "session:didUpdateHealthStatus:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));

}

void sub_1002BCCA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1002BCD70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1002BCD94(_QWORD *a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1[4] + 256));
  objc_msgSend(WeakRetained, "session:didProcessAcwgM1MsgWithResponse:error:", a1[4], a1[5], a1[6]);

}

void sub_1002BCDD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1002BCEA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1002BCEC8(_QWORD *a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1[4] + 256));
  objc_msgSend(WeakRetained, "session:didProcessAcwgM3MsgWithResponse:error:", a1[4], a1[5], a1[6]);

}

void sub_1002BCF0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1002BCFD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1002BCFFC(_QWORD *a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1[4] + 256));
  objc_msgSend(WeakRetained, "session:didProcessAcwgRangingSessionResumeRequestMsgWithResponse:error:", a1[4], a1[5], a1[6]);

}

void sub_1002BD040(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1002BD0B4(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 256));
  objc_msgSend(WeakRetained, "session:requestAcwgRangingSessionSuspend:withSuspendTriggerReason:", *(_QWORD *)(a1 + 32), *(unsigned int *)(a1 + 48), *(_QWORD *)(a1 + 40));

}

void sub_1002BD0F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1002BD168(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 256));
  objc_msgSend(WeakRetained, "session:didStartAcwgRanging:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));

}

void sub_1002BD1A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1002BD218(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 256));
  objc_msgSend(WeakRetained, "session:didSuspendAcwgRanging:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));

}

void sub_1002BD258(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1002BD300(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1002BD318(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 256));
  objc_msgSend(WeakRetained, "session:didPrefetchAcwgUrsk:error:", *(_QWORD *)(a1 + 32), *(unsigned int *)(a1 + 48), *(_QWORD *)(a1 + 40));

}

void sub_1002BD35C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1002BD4BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1002BD4F0(_QWORD *a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1[4] + 256));
  objc_msgSend(WeakRetained, "session:didGenerateShareableConfigurationData:forObject:", a1[4], a1[5], a1[6]);

}

void sub_1002BD534(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1002BD65C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1002BD684(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 256));
  objc_msgSend(WeakRetained, "systemConfigurator:didUpdateState:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));

}

void sub_1002BD6C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1002BD7F8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002BD818(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 256));
  objc_msgSend(WeakRetained, "systemConfigurator:didUpdateResourceUsageLimitExceeded:forSessionConfigurationType:", *(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 48), *(_QWORD *)(a1 + 40));

}

void sub_1002BD85C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1002BDAE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,void *a23)
{
  void *v23;
  void *v24;
  void *v25;

  _Unwind_Resume(a1);
}

void sub_1002BDB50(_QWORD *a1)
{
  uint64_t v2;
  NIAlgorithmConvergence *v3;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1[4] + 256));
  v2 = a1[4];
  v3 = -[NIAlgorithmConvergence initWithStatus:andReasons:]([NIAlgorithmConvergence alloc], "initWithStatus:andReasons:", a1[7], a1[5]);
  objc_msgSend(WeakRetained, "session:didUpdateAlgorithmConvergence:forObject:", v2, v3, a1[6]);

}

void sub_1002BDBC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1002BDBE8(_QWORD *a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1[4] + 256));
  objc_msgSend(WeakRetained, "session:didUpdateAlgorithmState:forObject:", a1[4], a1[5], a1[6]);

}

void sub_1002BDC2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

id sub_1002BDCBC(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_handleARSessionDidUpdateFrame:", *(_QWORD *)(a1 + 40));
}

id sub_1002BDD44(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_handleARSessionDidFailWithError:", *(_QWORD *)(a1 + 40));
}

id sub_1002BDDA8(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_handleARSessionWasInterrupted");
}

id sub_1002BDE08(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_handleARSessionInterruptionEnded");
}

id sub_1002BDE68(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_handleARSessionDidChangeState:", *(_QWORD *)(a1 + 40));
}

id sub_1002BDF20(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_handleARSession:willRunWithConfiguration:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

void sub_1002BE008(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1002BE018(uint64_t a1)
{
  NSObject *v2;
  uint8_t v4[16];

  if (+[NIPlatformInfo isInternalBuild](NIPlatformInfo, "isInternalBuild"))
  {
    v2 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 88);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Called with sessionShouldAttemptRelocalization", v4, 2u);
    }
  }
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_1002BE234(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id a18)
{
  void *v18;

  _Unwind_Resume(a1);
}

void sub_1002BE328(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1002BE3D4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002BE474(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002BE5F4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1002BE8DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v1;

  _Unwind_Resume(a1);
}

void sub_1002BE904(uint64_t a1)
{
  void *v1;
  void *v2;
  void *v3;
  NSErrorUserInfoKey v4;
  const __CFString *v5;

  v1 = *(void **)(a1 + 32);
  v4 = NSLocalizedDescriptionKey;
  v5 = CFSTR("Invalid camera assistance configuration.");
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v5, &v4, 1));
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("com.apple.NearbyInteraction"), -5888, v2));
  objc_msgSend(v1, "_invalidateSessionAndNotifyError:", v3);

}

void sub_1002BE9D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1002BEE7C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1002BEECC(uint64_t a1, int a2)
{
  NSObject *v3;
  void *v4;
  uint8_t v5[16];

  if (a2)
  {
    if (+[NIPlatformInfo isInternalBuild](NIPlatformInfo, "isInternalBuild"))
    {
      v3 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 88);
      if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v5 = 0;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "_isValidARSession invalidating session: attempting relocalization is not disabled in internal session", v5, 2u);
      }
    }
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_remoteObject"));
    objc_msgSend(v4, "arSessionWillRunWithInvalidConfiguration");

  }
}

void sub_1002BEF5C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002BEFD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1002BF070(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002BF0E4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002BF140(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1002BF2E4(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 256));
  objc_msgSend(WeakRetained, "sessionWasSuspended:", *(_QWORD *)(a1 + 32));

}

void sub_1002BF324(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1002BF338(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 256));
  objc_msgSend(WeakRetained, "session:suspendedWithReason:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));

}

void sub_1002BF378(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1002BF6F4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1002BF874(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1002BF9B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1002BFB48(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002BFB64(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 256));
  objc_msgSend(WeakRetained, "sessionDidStartRunning:", *(_QWORD *)(a1 + 32));

}

void sub_1002BFBA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1002BFCD4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1002BFE1C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002BFEDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1002C0044(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1002C017C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1002C01AC(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 256));
  objc_msgSend(WeakRetained, "session:didInvalidateWithError:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));

}

void sub_1002C01EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1002C02A0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002C04EC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002C0578(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002C05E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1002C0760(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1002C0870(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1002C08F8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002C0AB8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1002C0BEC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002C0BFC(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  _QWORD v4[5];

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_remoteObject"));
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_1002C0C80;
  v4[3] = &unk_100813140;
  v3 = *(_QWORD *)(a1 + 40);
  v4[4] = *(_QWORD *)(a1 + 32);
  objc_msgSend(v2, "_addObject:reply:", v3, v4);

}

void sub_1002C0C70(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002C0C80(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  _QWORD v6[5];
  id v7;

  v3 = a2;
  v4 = v3;
  if (v3)
  {
    v5 = *(void **)(a1 + 32);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_1002C0D30;
    v6[3] = &unk_1007FA518;
    v6[4] = v5;
    v7 = v3;
    objc_msgSend(v5, "_performBlockOnDelegateQueue:ifRespondsToSelector:", v6, "session:didFailWithError:");

  }
}

void sub_1002C0D18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1002C0D30(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 256));
  objc_msgSend(WeakRetained, "session:didFailWithError:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));

}

void sub_1002C0D70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1002C0E5C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002C0E6C(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  _QWORD v4[5];

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_remoteObject"));
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_1002C0EF0;
  v4[3] = &unk_100813140;
  v3 = *(_QWORD *)(a1 + 40);
  v4[4] = *(_QWORD *)(a1 + 32);
  objc_msgSend(v2, "_removeObject:reply:", v3, v4);

}

void sub_1002C0EE0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002C0EF0(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  _QWORD v6[5];
  id v7;

  v3 = a2;
  v4 = v3;
  if (v3)
  {
    v5 = *(void **)(a1 + 32);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_1002C0FA0;
    v6[3] = &unk_1007FA518;
    v6[4] = v5;
    v7 = v3;
    objc_msgSend(v5, "_performBlockOnDelegateQueue:ifRespondsToSelector:", v6, "session:didFailWithError:");

  }
}

void sub_1002C0F88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1002C0FA0(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 256));
  objc_msgSend(WeakRetained, "session:didFailWithError:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));

}

void sub_1002C0FE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1002C1054(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1002C10C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1002C1190(uint64_t a1)
{
  void *v2;
  _QWORD v3[4];
  __int128 v4;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_synchronousRemoteObject"));
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1002C1214;
  v3[3] = &unk_100813258;
  v4 = *(_OWORD *)(a1 + 32);
  objc_msgSend(v2, "isPreciseRangingAllowed:", v3);

}

void sub_1002C1204(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002C1214(uint64_t a1, char a2, void *a3)
{
  id v5;
  id v6;

  v5 = a3;
  v6 = v5;
  if (v5)
    objc_msgSend(*(id *)(a1 + 32), "_invalidateSessionAndNotifyError:", v5);
  else
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = a2;

}

void sub_1002C126C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1002C1310(uint64_t a1)
{
  void *v2;
  _QWORD v3[4];
  __int128 v4;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_synchronousRemoteObject"));
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1002C1394;
  v3[3] = &unk_100813258;
  v4 = *(_OWORD *)(a1 + 32);
  objc_msgSend(v2, "isExtendedDistanceMeasurementAllowed:", v3);

}

void sub_1002C1384(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002C1394(uint64_t a1, char a2, void *a3)
{
  id v5;
  id v6;

  v5 = a3;
  v6 = v5;
  if (v5)
    objc_msgSend(*(id *)(a1 + 32), "_invalidateSessionAndNotifyError:", v5);
  else
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = a2;

}

void sub_1002C13EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1002C145C(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[5];

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_remoteObject"));
  v3 = *(_QWORD *)(a1 + 48);
  v4 = *(_QWORD *)(a1 + 56);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1002C14E4;
  v6[3] = &unk_1008132A8;
  v5 = *(_QWORD *)(a1 + 40);
  v6[4] = *(_QWORD *)(a1 + 32);
  objc_msgSend(v2, "processBluetoothHostTimeSyncWithType:btcClockTicks:eventCounter:reply:", v5, v3, v4, v6);

}

void sub_1002C14D4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002C14E4(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  _QWORD v8[5];
  id v9;
  id v10;

  v5 = a2;
  v6 = a3;
  v7 = *(void **)(a1 + 32);
  if (v6)
  {
    objc_msgSend(v7, "_invalidateSessionAndNotifyError:", v6);
  }
  else
  {
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_1002C15CC;
    v8[3] = &unk_100809CB0;
    v8[4] = v7;
    v9 = v5;
    v10 = 0;
    objc_msgSend(v7, "_performBlockOnDelegateQueue:ifRespondsToSelector:", v8, "session:didProcessBluetoothHostTimeSyncWithResponse:error:");

  }
}

void sub_1002C15A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1002C15CC(_QWORD *a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1[4] + 256));
  objc_msgSend(WeakRetained, "session:didProcessBluetoothHostTimeSyncWithResponse:error:", a1[4], a1[5], a1[6]);

}

void sub_1002C1610(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1002C1688(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002C1824(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1002C1868(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_remoteObject"));
  objc_msgSend(v2, "_processCarKeyEvent:reply:", *(_QWORD *)(a1 + 40), &stru_1008132F0);

}

void sub_1002C18B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1002C1A54(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1002C1A98(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_remoteObject"));
  objc_msgSend(v2, "_processCarKeyEvent:reply:", *(_QWORD *)(a1 + 40), &stru_100813310);

}

void sub_1002C1AE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1002C1C84(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1002C1CC8(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_remoteObject"));
  objc_msgSend(v2, "_processCarKeyEvent:reply:", *(_QWORD *)(a1 + 40), &stru_100813330);

}

void sub_1002C1D10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1002C1EB4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1002C1EF8(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_remoteObject"));
  objc_msgSend(v2, "_processCarKeyEvent:reply:", *(_QWORD *)(a1 + 40), &stru_100813350);

}

void sub_1002C1F40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1002C20B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1002C20F0(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_remoteObject"));
  objc_msgSend(v2, "_processCarKeyEvent:reply:", *(_QWORD *)(a1 + 40), &stru_100813370);

}

void sub_1002C2138(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1002C22B0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1002C22E8(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_remoteObject"));
  objc_msgSend(v2, "_processCarKeyEvent:reply:", *(_QWORD *)(a1 + 40), &stru_100813390);

}

void sub_1002C2330(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1002C24E8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1002C250C(uint64_t a1)
{
  void *v2;
  void *v3;
  NSErrorUserInfoKey v4;
  const __CFString *v5;

  v4 = NSLocalizedDescriptionKey;
  v5 = CFSTR("Received a nil or 0 length DCK message.");
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v5, &v4, 1));
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("com.apple.NearbyInteraction"), -19889, v2));

  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1002C25E4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002C2608(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  _QWORD v4[5];
  id v5;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_remoteObject"));
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_1002C26B8;
  v4[3] = &unk_1008133E0;
  v3 = *(_QWORD *)(a1 + 40);
  v4[4] = *(_QWORD *)(a1 + 32);
  v5 = *(id *)(a1 + 48);
  objc_msgSend(v2, "processDCKMessage:reply:", v3, v4);

}

void sub_1002C26A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1002C26B8(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  NSObject *v8;
  id v9;
  id v10;
  _QWORD block[4];
  id v12;
  id v13;
  id v14;

  v5 = a2;
  v6 = a3;
  v7 = *(void **)(a1 + 40);
  v8 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 264);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1002C2774;
  block[3] = &unk_1008133B8;
  v13 = v6;
  v14 = v7;
  v12 = v5;
  v9 = v6;
  v10 = v5;
  dispatch_async(v8, block);

}

uint64_t sub_1002C2774(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

void sub_1002C284C(uint64_t a1)
{
  void *v2;
  _QWORD v3[5];

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_synchronousRemoteObject"));
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1002C28D0;
  v3[3] = &unk_100811EA0;
  v3[4] = *(_QWORD *)(a1 + 40);
  objc_msgSend(v2, "deleteURSKs:", v3);

}

void sub_1002C28C0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002C28D0(uint64_t a1, void *a2)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a2);
}

void sub_1002C2A6C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002C2A84(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v5[5];

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_synchronousRemoteObject"));
  v3 = *(unsigned int *)(a1 + 56);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1002C2B0C;
  v5[3] = &unk_100811EA0;
  v4 = *(_QWORD *)(a1 + 40);
  v5[4] = *(_QWORD *)(a1 + 48);
  objc_msgSend(v2, "_setDebugURSK:transactionIdentifier:reply:", v4, v3, v5);

}

void sub_1002C2AFC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002C2B0C(uint64_t a1, void *a2)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a2);
}

void sub_1002C2BAC(uint64_t a1)
{
  void *v2;
  _QWORD v3[4];
  __int128 v4;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_synchronousRemoteObject"));
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1002C2C30;
  v3[3] = &unk_100813258;
  v4 = *(_OWORD *)(a1 + 32);
  objc_msgSend(v2, "isRangingLimitExceeded:", v3);

}

void sub_1002C2C20(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002C2C30(uint64_t a1, char a2, void *a3)
{
  id v5;
  id v6;

  v5 = a3;
  v6 = v5;
  if (v5)
    objc_msgSend(*(id *)(a1 + 32), "_invalidateSessionAndNotifyError:", v5);
  else
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = a2;

}

void sub_1002C2C88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1002C2D9C(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  _QWORD v4[5];

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_synchronousRemoteObject"));
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_1002C2E20;
  v4[3] = &unk_100811EA0;
  v3 = *(_QWORD *)(a1 + 48);
  v4[4] = *(_QWORD *)(a1 + 40);
  objc_msgSend(v2, "_setURSKTTL:reply:", v3, v4);

}

void sub_1002C2E10(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002C2E20(uint64_t a1, void *a2)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a2);
}

void sub_1002C2E94(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002C2F30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1002C308C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002C309C(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_remoteObject"));
  objc_msgSend(v2, "processAcwgM1Msg:withSessionTriggerReason:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));

}

void sub_1002C30DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1002C31C8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002C31D8(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_remoteObject"));
  objc_msgSend(v2, "processAcwgM3Msg:", *(_QWORD *)(a1 + 40));

}

void sub_1002C3218(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1002C3288(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_remoteObject"));
  objc_msgSend(v2, "suspendAcwgRanging:withSuspendTriggerReason:", *(unsigned int *)(a1 + 48), *(_QWORD *)(a1 + 40));

}

void sub_1002C32CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1002C333C(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_remoteObject"));
  objc_msgSend(v2, "processAcwgRangingSessionResumeRequestMsg:withResumeTriggerReason:", *(unsigned int *)(a1 + 48), *(_QWORD *)(a1 + 40));

}

void sub_1002C3380(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1002C33F0(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_remoteObject"));
  objc_msgSend(v2, "prefetchAcwgUrsk:", *(unsigned int *)(a1 + 40));

}

void sub_1002C3430(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1002C3540(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1002C35E4(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_remoteObject"));
  objc_msgSend(v2, "processVisionInput:", *(_QWORD *)(a1 + 40));

}

void sub_1002C3624(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1002C369C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002C37A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1002C37C8(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_remoteObject"));
  objc_msgSend(v2, "_processBluetoothSample:", *(_QWORD *)(a1 + 40));

}

void sub_1002C3808(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1002C3A50(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1002C3B08(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002C3EA8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1002C3F48(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_remoteObject"));
  objc_msgSend(v2, "_processFindingEvent:reply:", *(_QWORD *)(a1 + 40), &stru_100813478);

}

void sub_1002C3F90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1002C42BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1002C4354(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_remoteObject"));
  objc_msgSend(v2, "_processFindingEvent:reply:", *(_QWORD *)(a1 + 40), &stru_100813498);

}

void sub_1002C439C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1002C457C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1002C45C8(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_remoteObject"));
  objc_msgSend(v2, "_processFindingEvent:reply:", *(_QWORD *)(a1 + 40), &stru_1008134B8);

}

void sub_1002C4610(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1002C47F0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1002C483C(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_remoteObject"));
  objc_msgSend(v2, "_processFindingEvent:reply:", *(_QWORD *)(a1 + 40), &stru_1008134D8);

}

void sub_1002C4884(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1002C4AD8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1002C4B2C(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_remoteObject"));
  objc_msgSend(v2, "_processFindingEvent:reply:", *(_QWORD *)(a1 + 40), &stru_1008134F8);

}

void sub_1002C4B74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1002C4BE0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002C4C44(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002C4D38(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_remoteObject"));
  objc_msgSend(v2, "_provideTruthTag:", *(_QWORD *)(a1 + 40));

}

void sub_1002C4D78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1002C4DF0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002C4F8C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1002C4FD0(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_remoteObject"));
  objc_msgSend(v2, "_processSystemEvent:reply:", *(_QWORD *)(a1 + 40), &stru_100813518);

}

void sub_1002C5018(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1002C51EC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1002C5240(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_remoteObject"));
  objc_msgSend(v2, "_processSystemEvent:reply:", *(_QWORD *)(a1 + 40), &stru_100813538);

}

void sub_1002C5288(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

_QWORD *sub_1002C52F0@<X0>(int a1@<W1>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, off_1008136E8[a1]);
}

uint64_t sub_1002C5370(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  NSObject *v9;
  int v11;
  _QWORD v12[5];
  uint8_t buf[8];
  _BYTE v14[24];
  _BYTE *v15;

  v5 = a2;
  *(_QWORD *)a1 = v5;
  *(_QWORD *)(a1 + 8) = objc_alloc_init(CTClientDelegate);
  *(_QWORD *)(a1 + 16) = objc_msgSend(objc_alloc((Class)CoreTelephonyClient), "initWithQueue:", v5);
  v6 = _CTServerConnectionCreateOnTargetQueue(0, CFSTR("com.apple.Proximity.PRMccMonitor"), v5, 0);
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 48) = 0;
  sub_100027674((uint64_t)v14, a3);
  sub_1002C68F0(a1 + 56, (uint64_t)v14);
  v7 = v15;
  if (v15 == v14)
  {
    v8 = 4;
    v7 = v14;
    goto LABEL_5;
  }
  if (v15)
  {
    v8 = 5;
LABEL_5:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 88) = a1 + 96;
  *(_QWORD *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 112) = 0;
  *(_DWORD *)(a1 + 116) = *((_DWORD *)sub_100004784() + 144);
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 120) = a1 + 128;
  *(_QWORD *)(a1 + 136) = 0;
  *(_BYTE *)(a1 + 144) = 0;
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_1000064C0;
  v12[3] = &unk_100813598;
  v12[4] = a1;
  objc_msgSend(*(id *)(a1 + 8), "setFOnCellMonitorUpdateCb:", v12);
  objc_msgSend(*(id *)(a1 + 16), "setDelegate:", *(_QWORD *)(a1 + 8));
  if (!*(_QWORD *)(a1 + 24))
  {
    v9 = qword_10085B8B0;
    if (os_log_type_enabled((os_log_t)qword_10085B8B0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#regulatory,regulatory,geo,mcc,Failed to create CT connection", buf, 2u);
    }
  }
  v11 = 0;
  *(_QWORD *)buf = &v11;
  *((_BYTE *)sub_100007758((uint64_t **)(a1 + 120), &v11, (uint64_t)&unk_100472CF8, (_DWORD **)buf) + 40) = 0;
  v11 = 1;
  *(_QWORD *)buf = &v11;
  *((_BYTE *)sub_100007758((uint64_t **)(a1 + 120), &v11, (uint64_t)&unk_100472CF8, (_DWORD **)buf) + 40) = 0;
  v11 = 2;
  *(_QWORD *)buf = &v11;
  *((_BYTE *)sub_100007758((uint64_t **)(a1 + 120), &v11, (uint64_t)&unk_100472CF8, (_DWORD **)buf) + 40) = 0;
  v11 = 3;
  *(_QWORD *)buf = &v11;
  *((_BYTE *)sub_100007758((uint64_t **)(a1 + 120), &v11, (uint64_t)&unk_100472CF8, (_DWORD **)buf) + 40) = 0;

  return a1;
}

void sub_1002C5620(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  char **v7;
  char **v8;
  _QWORD *v10;
  uint64_t v11;

  sub_1001D948C(v6, *v8);
  sub_1001D94DC(v5, *(_QWORD **)(v1 + 96));
  v10 = *(_QWORD **)(v1 + 80);
  if (v10 == v4)
  {
    v11 = 4;
  }
  else
  {
    if (!v10)
      goto LABEL_6;
    v11 = 5;
    v4 = *(_QWORD **)(v1 + 80);
  }
  (*(void (**)(_QWORD *))(*v4 + 8 * v11))(v4);
LABEL_6:
  sub_1001D9568(v3, *v7);

  _Unwind_Resume(a1);
}

void sub_1002C5710(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  char *v5;
  void **v6;
  id v7;
  void *v8;
  id v9;
  _QWORD v10[4];
  id v11;
  uint64_t v12;
  void *__p[2];
  char v14;
  uint8_t buf[4];
  void **v16;

  v4 = (id)qword_10085B8B0;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    if (a2 == 1)
      v5 = "kSlot1";
    else
      v5 = "kSlot2";
    sub_10000BF04(__p, v5);
    if (v14 >= 0)
      v6 = __p;
    else
      v6 = (void **)__p[0];
    *(_DWORD *)buf = 136315138;
    v16 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#regulatory,regulatory,geo,mcc,queryCT,slot:%s", buf, 0xCu);
    if (v14 < 0)
      operator delete(__p[0]);
  }

  v7 = objc_msgSend(objc_alloc((Class)CTXPCServiceSubscriptionContext), "initWithSlot:", a2);
  v8 = *(void **)(a1 + 16);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_1002C5898;
  v10[3] = &unk_1008135C0;
  v11 = v7;
  v12 = a1;
  v9 = v7;
  objc_msgSend(v8, "copyCellInfo:completion:", v9, v10);

}

void sub_1002C5870(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002C5898(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  NSObject *v8;
  void (**v9)(_QWORD, _QWORD, _QWORD);

  v5 = a2;
  v6 = a3;
  v7 = *(_QWORD *)(a1 + 40);
  if (v6)
  {
    v8 = qword_10085B8B0;
    if (os_log_type_enabled((os_log_t)qword_10085B8B0, OS_LOG_TYPE_ERROR))
    {
      sub_1003E75BC((uint64_t)v6, v8);
      if (!v5)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  if (v5)
  {
LABEL_4:
    v9 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v7 + 8), "fOnCellMonitorUpdateCb"));
    ((void (**)(_QWORD, _QWORD, id))v9)[2](v9, *(_QWORD *)(a1 + 32), v5);

  }
LABEL_5:

}

void sub_1002C593C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1002C595C(uint64_t a1)
{
  uint64_t v2;

  if (sub_1000069CC(*(_DWORD *)(a1 + 116)))
  {
    sub_1002C5710(a1, 1);
    v2 = 2;
  }
  else
  {
    if (!sub_100360F30(*(_DWORD *)(a1 + 116)))
      return;
    v2 = 1;
  }
  sub_1002C5710(a1, v2);
}

void sub_1002C59B8(uint64_t a1, int a2)
{
  NSObject *v3;
  int v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD v13[2];

  if (!a2)
    sub_1003E7630();
  if (*(unsigned __int8 *)(a1 + 112) == a2)
  {
    v3 = qword_10085B8B0;
    if (os_log_type_enabled((os_log_t)qword_10085B8B0, OS_LOG_TYPE_DEFAULT))
    {
      v4 = *(unsigned __int8 *)(a1 + 112);
      v13[0] = 67109120;
      v13[1] = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#regulatory,regulatory,geo,mcc,noChangeInAirplaneModeStatus:%d", (uint8_t *)v13, 8u);
    }
  }
  else
  {
    *(_BYTE *)(a1 + 112) = a2;
    if (a2 != 1)
    {
      if (a2 == 2)
      {
        if (sub_1000069CC(*(_DWORD *)(a1 + 116)) || sub_100360F30(*(_DWORD *)(a1 + 116)))
          sub_1002C595C(a1);
      }
      else
      {
        v5 = qword_10085B8B0;
        if (os_log_type_enabled((os_log_t)qword_10085B8B0, OS_LOG_TYPE_ERROR))
          sub_1003E7658(v5, v6, v7, v8, v9, v10, v11, v12);
      }
    }
  }
}

void sub_1002C5AEC(_QWORD *a1, uint64_t a2)
{
  NSObject *v4;
  char *v5;
  void **v6;
  id v7;
  void *v8;
  id v9;
  void *v10;
  id v11;
  void **v12;
  void **v13;
  id v14;
  NSObject *v15;
  void *v16;
  NSObject *v17;
  void **v18;
  id v19;
  _QWORD v20[4];
  id v21;
  _QWORD *v22;
  void *__p[2];
  char v24;
  _BOOL4 v25;
  uint8_t buf[4];
  void **v27;

  v25 = a2 != 1;
  v4 = (id)qword_10085B8B0;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5 = a2 == 1 ? "kSlot1" : "kSlot2";
    sub_10000BF04(__p, v5);
    v6 = v24 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136315138;
    v27 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#regulatory,regulatory,geo,mcc,queryCT,slot:%s", buf, 0xCu);
    if (v24 < 0)
      operator delete(__p[0]);
  }

  v7 = objc_msgSend(objc_alloc((Class)CTXPCServiceSubscriptionContext), "initWithSlot:", a2);
  v8 = (void *)a1[2];
  v20[0] = _NSConcreteStackBlock;
  v20[1] = 3221225472;
  v20[2] = sub_1002C5DD4;
  v20[3] = &unk_1008135C0;
  v22 = a1;
  v9 = v7;
  v21 = v9;
  objc_msgSend(v8, "copyCellInfo:completion:", v9, v20);
  __p[0] = &v25;
  __p[1] = a1;
  v10 = (void *)a1[2];
  v19 = 0;
  v11 = objc_msgSend(v10, "copyMobileCountryCode:error:", v9, &v19);
  v12 = (void **)v19;
  if ((sub_1002C5E50((int **)__p, v11, v12, 0) & 1) != 0)
  {
    v13 = v12;
    v14 = v11;
  }
  else
  {
    v15 = qword_10085B8B0;
    if (os_log_type_enabled((os_log_t)qword_10085B8B0, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      v27 = v12;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#regulatory,regulatory,CurrentMcc,cantObtain,error:%@", buf, 0xCu);
    }
    v16 = (void *)a1[2];
    v18 = v12;
    v14 = objc_msgSend(v16, "copyLastKnownMobileCountryCode:error:", v9, &v18);
    v13 = v18;

    if ((sub_1002C5E50((int **)__p, v14, v13, 1) & 1) == 0)
    {
      v17 = qword_10085B8B0;
      if (os_log_type_enabled((os_log_t)qword_10085B8B0, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        v27 = v13;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "#regulatory,regulatory,LastKnownMcc,cantObtain,error:%@", buf, 0xCu);
      }
    }
  }

}

void sub_1002C5D98(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002C5DD4(uint64_t a1, void *a2)
{
  id v3;
  void (**v4)(_QWORD, _QWORD, _QWORD);
  id v5;

  v3 = a2;
  if (v3)
  {
    v5 = v3;
    v4 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 8), "fOnCellMonitorUpdateCb"));
    ((void (**)(_QWORD, _QWORD, id))v4)[2](v4, *(_QWORD *)(a1 + 32), v5);

    v3 = v5;
  }

}

void sub_1002C5E30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

uint64_t sub_1002C5E50(int **a1, void *a2, void *a3, int a4)
{
  id v7;
  id v8;
  NSObject **v9;
  int v10;
  NSObject *v11;
  const char *v12;
  void **v13;
  BOOL v14;
  uint64_t v15;
  NSObject *v16;
  _QWORD v18[5];
  __int128 v19;
  uint64_t v20;
  int v21;
  char v22;
  void *__p[2];
  char v24;
  _BYTE buf[24];
  id v26;
  __int16 v27;
  id v28;

  v7 = a2;
  v8 = a3;
  v9 = (NSObject **)a1[1];
  v10 = **a1;
  v11 = (id)qword_10085B8B0;
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    sub_10000BF04(__p, off_1008136E8[v10]);
    v12 = "Current";
    if (a4)
      v12 = "lastKnown";
    *(_DWORD *)buf = 136315906;
    if (v24 >= 0)
      v13 = __p;
    else
      v13 = (void **)__p[0];
    *(_QWORD *)&buf[4] = v12;
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = v13;
    *(_WORD *)&buf[22] = 2112;
    v26 = v7;
    v27 = 2112;
    v28 = v8;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#regulatory,regulatory,%sMcc,slot:%s,mcc:%@,error:%@", buf, 0x2Au);
    if (v24 < 0)
      operator delete(__p[0]);
  }

  if (v7)
    v14 = v8 == 0;
  else
    v14 = 0;
  v15 = v14;
  if (v14)
  {
    objc_msgSend(v7, "intValue");
    sub_10000BF04(buf, (char *)objc_msgSend(objc_retainAutorelease(v7), "UTF8String"));
    v16 = *v9;
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3321888768;
    v18[2] = sub_1002C6844;
    v18[3] = &unk_1008135E0;
    v18[4] = v9;
    v21 = v10;
    if ((buf[23] & 0x80000000) != 0)
    {
      sub_100004678(&v19, *(void **)buf, *(unint64_t *)&buf[8]);
    }
    else
    {
      v19 = *(_OWORD *)buf;
      v20 = *(_QWORD *)&buf[16];
    }
    v22 = a4;
    dispatch_async(v16, v18);
    if (SHIBYTE(v20) < 0)
      operator delete((void *)v19);
    if ((buf[23] & 0x80000000) != 0)
      operator delete(*(void **)buf);
  }

  return v15;
}

void sub_1002C6070(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  void *v26;
  void *v27;

  if (a26 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

uint64_t sub_1002C60B4(uint64_t a1)
{
  uint64_t v2;

  atomic_store(1u, (unsigned __int8 *)(a1 + 144));
  if (sub_1000069CC(*(_DWORD *)(a1 + 116)))
  {
    sub_1002C5AEC((_QWORD *)a1, 1);
    v2 = 2;
LABEL_5:
    sub_1002C5AEC((_QWORD *)a1, v2);
    return 1;
  }
  if (sub_100360F30(*(_DWORD *)(a1 + 116)))
  {
    v2 = 1;
    goto LABEL_5;
  }
  return 1;
}

void sub_1002C6118(uint64_t a1@<X0>, unsigned __int16 *a2@<X1>, _QWORD *a3@<X8>)
{
  unsigned __int8 v6;
  int v7;
  unsigned __int16 *v8;
  int v9;
  int v10;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  unsigned __int8 *v17;
  const void *v18;
  void *v19;
  int v20;
  BOOL v21;
  id v22;
  void **v23;
  void **v24;
  char **v25;
  __int128 v26;
  int64_t v27;
  void *__p[2];
  uint64_t v29;
  id v30;

  sub_100007824();
  v6 = atomic_load((unsigned __int8 *)&qword_10085B8D0);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_10085B8D0))
  {
    sub_1003917E8((uint64_t)&qword_10085B8B8);
    __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10085B8B8, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10085B8D0);
  }
  v7 = *((unsigned __int8 *)a2 + 23);
  if (*((char *)a2 + 23) < 0)
  {
    if (*((_QWORD *)a2 + 1) != 3)
      goto LABEL_11;
    v8 = *(unsigned __int16 **)a2;
  }
  else
  {
    v8 = a2;
    if (v7 != 3)
      goto LABEL_11;
  }
  v9 = *v8;
  v10 = *((unsigned __int8 *)v8 + 2);
  if (v9 == 12345 && v10 == 49)
  {
    v25 = off_100853208;
    goto LABEL_49;
  }
LABEL_11:
  v12 = byte_10085B8CF;
  if (byte_10085B8CF < 0)
    v12 = qword_10085B8C0;
  v13 = (char)v7;
  if (v12)
  {
    v14 = *((unsigned __int8 *)a2 + 23);
    v15 = (v7 & 0x80u) == 0 ? *((unsigned __int8 *)a2 + 23) : *((_QWORD *)a2 + 1);
    if (v15 == v12)
    {
      if (byte_10085B8CF >= 0)
        v16 = &qword_10085B8B8;
      else
        v16 = (uint64_t *)qword_10085B8B8;
      if ((v7 & 0x80) != 0)
      {
        v18 = *(const void **)a2;
        if (memcmp(*(const void **)a2, v16, *((_QWORD *)a2 + 1)))
          goto LABEL_30;
      }
      else if (*((_BYTE *)a2 + 23))
      {
        v17 = (unsigned __int8 *)a2;
        while (*v17 == *(unsigned __int8 *)v16)
        {
          ++v17;
          v16 = (uint64_t *)((char *)v16 + 1);
          if (!--v14)
            goto LABEL_48;
        }
        goto LABEL_27;
      }
LABEL_48:
      v25 = off_100853210;
LABEL_49:
      sub_10000BF04(a3, *v25);
      return;
    }
  }
LABEL_27:
  if (v13 >= 0)
    v18 = a2;
  else
    v18 = *(const void **)a2;
LABEL_30:
  v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithCString:encoding:](NSString, "stringWithCString:encoding:", v18, +[NSString defaultCStringEncoding](NSString, "defaultCStringEncoding")));
  v30 = 0;
  v20 = _CTServerConnectionCopyISOForMCC(*(_QWORD *)(a1 + 24), v19, &v30);
  __p[0] = 0;
  __p[1] = 0;
  v29 = 0;
  if (v20)
    v21 = 1;
  else
    v21 = v30 == 0;
  if (!v21)
  {
    v22 = objc_retainAutorelease(v30);
    sub_10000BF04(&v26, (char *)objc_msgSend(v22, "UTF8String"));
    v29 = v27;
    *(_OWORD *)__p = v26;
    if (v27 >= 0)
      v23 = (void **)((char *)__p + HIBYTE(v27));
    else
      v23 = (void **)(v26 + *((_QWORD *)&v26 + 1));
    if (v27 >= 0)
      v24 = __p;
    else
      v24 = (void **)v26;
    while (v24 != v23)
    {
      *(_BYTE *)v24 = __toupper(*(char *)v24);
      v24 = (void **)((char *)v24 + 1);
    }

  }
  sub_1002C640C(a1, (uint64_t *)a2, (uint64_t)a3);
  if (SHIBYTE(v29) < 0)
    operator delete(__p[0]);

}

void sub_1002C63C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  __cxa_guard_abort(&qword_10085B8D0);
  _Unwind_Resume(a1);
}

void sub_1002C640C(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  void *v6;
  BOOL v7;
  id v8;
  unint64_t v9;
  int v10;
  _BYTE *v11;
  _BYTE *v12;
  _BYTE *v13;
  __int128 v14;
  unint64_t v15;
  id v16;

  sub_10000BF04((_QWORD *)a3, "");
  v16 = 0;
  if (*((char *)a2 + 23) < 0)
  {
    if (!a2[1])
      return;
    a2 = (uint64_t *)*a2;
  }
  else if (!*((_BYTE *)a2 + 23))
  {
    return;
  }
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithCString:encoding:](NSString, "stringWithCString:encoding:", a2, +[NSString defaultCStringEncoding](NSString, "defaultCStringEncoding")));
  if (_CTServerConnectionCopyISOForMCC(*(_QWORD *)(a1 + 24), v6, &v16))
    v7 = 1;
  else
    v7 = v16 == 0;
  if (!v7)
  {
    v8 = objc_retainAutorelease(v16);
    sub_10000BF04(&v14, (char *)objc_msgSend(v8, "UTF8String"));
    if (*(char *)(a3 + 23) < 0)
      operator delete(*(void **)a3);
    *(_OWORD *)a3 = v14;
    v9 = v15;
    *(_QWORD *)(a3 + 16) = v15;
    v9 >>= 56;
    v10 = (char)v9;
    v11 = (_BYTE *)(a3 + v9);
    if (v10 >= 0)
      v12 = v11;
    else
      v12 = (_BYTE *)(*(_QWORD *)a3 + *(_QWORD *)(a3 + 8));
    if (v10 >= 0)
      v13 = (_BYTE *)a3;
    else
      v13 = *(_BYTE **)a3;
    while (v13 != v12)
    {
      *v13 = __toupper((char)*v13);
      ++v13;
    }

  }
}

void sub_1002C653C(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;
  void *v3;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1002C6574(uint64_t a1, int a2, uint64_t a3, char a4)
{
  uint64_t v4;
  char v6;
  int v7;

  v7 = a2;
  v6 = a4;
  v4 = *(_QWORD *)(a1 + 24);
  if (!v4)
    sub_100027BC4();
  return (*(uint64_t (**)(uint64_t, int *, uint64_t, char *))(*(_QWORD *)v4 + 48))(v4, &v7, a3, &v6);
}

void sub_1002C65B4(uint64_t a1, int a2, uint64_t a3, int a4)
{
  NSObject *v8;
  void **v9;
  const char *v10;
  uint64_t **v11;
  uint64_t **v12;
  const char *v13;
  uint64_t **v14;
  int v15;
  void *v16[2];
  uint64_t v17;
  void *__p[2];
  char v19;
  int v20;
  int *v21;
  _BYTE buf[12];
  __int16 v23;
  const char *v24;
  __int16 v25;
  const char *v26;

  v20 = a2;
  v8 = (id)qword_10085B8B0;
  if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    goto LABEL_20;
  sub_10000BF04(__p, off_1008136E8[a2]);
  if (v19 >= 0)
    v9 = __p;
  else
    v9 = (void **)__p[0];
  if (*(char *)(a3 + 23) < 0)
  {
    if (*(_QWORD *)(a3 + 8))
      v10 = *(const char **)a3;
    else
      v10 = "__";
  }
  else if (*(_BYTE *)(a3 + 23))
  {
    v10 = (const char *)a3;
  }
  else
  {
    v10 = "__";
  }
  v21 = &v20;
  v11 = sub_10000725C((uint64_t **)(a1 + 32), &v20, (uint64_t)&unk_100472CF8, &v21);
  if (*((char *)v11 + 63) < 0)
  {
    if (v11[6])
    {
LABEL_14:
      v21 = &v20;
      v12 = sub_10000725C((uint64_t **)(a1 + 32), &v20, (uint64_t)&unk_100472CF8, &v21);
      v13 = (const char *)(v12 + 5);
      if (*((char *)v12 + 63) < 0)
        v13 = *(const char **)v13;
      goto LABEL_18;
    }
  }
  else if (*((_BYTE *)v11 + 63))
  {
    goto LABEL_14;
  }
  v13 = "__";
LABEL_18:
  *(_DWORD *)buf = 136315650;
  *(_QWORD *)&buf[4] = v9;
  v23 = 2080;
  v24 = v10;
  v25 = 2080;
  v26 = v13;
  _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#regulatory,regulatory,geo,mcc,processIsoCountry,slot:%s,isoCountryCode(new):%s,fCurrentIsoFromMcc(old):%s", buf, 0x20u);
  if (v19 < 0)
    operator delete(__p[0]);
LABEL_20:

  *(_QWORD *)buf = &v20;
  v14 = sub_10000725C((uint64_t **)(a1 + 32), &v20, (uint64_t)&unk_100472CF8, (_DWORD **)buf);
  std::string::operator=((std::string *)(v14 + 5), (const std::string *)a3);
  v15 = v20;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_100004678(v16, *(void **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)v16 = *(_OWORD *)a3;
    v17 = *(_QWORD *)(a3 + 16);
  }
  sub_100007320(a1, v15, (const char *)v16, a4);
  if (SHIBYTE(v17) < 0)
    operator delete(v16[0]);
}

void sub_1002C67FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;

  _Unwind_Resume(a1);
}

void sub_1002C6844(uint64_t a1)
{
  sub_1000070F0(*(_QWORD *)(a1 + 32), *(_DWORD *)(a1 + 64), a1 + 40, *(unsigned __int8 *)(a1 + 68));
}

char *sub_1002C685C(char *__dst, __int128 *a2, __int128 *a3)
{
  __int128 v5;
  _BYTE *v6;
  __int128 v7;

  if (*((char *)a2 + 23) < 0)
  {
    sub_100004678(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v5;
  }
  v6 = __dst + 24;
  if (*((char *)a3 + 23) < 0)
  {
    sub_100004678(v6, *(void **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v7 = *a3;
    *((_QWORD *)__dst + 5) = *((_QWORD *)a3 + 2);
    *(_OWORD *)v6 = v7;
  }
  return __dst;
}

void sub_1002C68D4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002C68F0(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;

  *(_QWORD *)(a1 + 24) = 0;
  if (*(_QWORD *)(a2 + 24))
  {
    v4 = operator new(0x28uLL);
    *v4 = off_100813620;
    sub_1002C6B60((uint64_t)(v4 + 1), a2);
    *(_QWORD *)(a1 + 24) = v4;
  }
  return a1;
}

_QWORD *sub_1002C694C(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = off_100813620;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void sub_1002C69A8(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = off_100813620;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  operator delete();
}

_QWORD *sub_1002C6A14(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x28uLL);
  *v2 = off_100813620;
  sub_100027674((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1002C6A54(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1002C6A68(uint64_t a1, _QWORD *a2)
{
  *a2 = off_100813620;
  return sub_100027674((uint64_t)(a2 + 1), a1 + 8);
}

_QWORD *sub_1002C6A84(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_1002C6AB8(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

uint64_t sub_1002C6B08(uint64_t a1, int *a2, uint64_t a3, char *a4)
{
  return sub_1002C6574(a1 + 8, *a2, a3, *a4);
}

uint64_t sub_1002C6B18(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_1002C6B54()
{
}

uint64_t sub_1002C6B60(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

_OWORD *sub_1002C6BC4(uint64_t **a1, const void **a2, uint64_t a3)
{
  void **v5;
  _OWORD *v6;
  uint64_t **v7;
  _QWORD v9[2];
  char v10;
  uint64_t v11;

  v5 = (void **)sub_1000271A4((uint64_t)a1, &v11, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = operator new(0x50uLL);
    v9[1] = a1 + 1;
    v6[2] = *(_OWORD *)a3;
    *((_QWORD *)v6 + 6) = *(_QWORD *)(a3 + 16);
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_OWORD *)((char *)v6 + 56) = *(_OWORD *)(a3 + 24);
    *((_QWORD *)v6 + 9) = *(_QWORD *)(a3 + 40);
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)(a3 + 24) = 0;
    *(_QWORD *)(a3 + 32) = 0;
    *(_QWORD *)(a3 + 40) = 0;
    v10 = 1;
    sub_1000272A8(a1, v11, v7, (uint64_t *)v6);
    v9[0] = 0;
    sub_1002C6C90((uint64_t)v9, 0);
  }
  return v6;
}

void sub_1002C6C90(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_1001D9524((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

void sub_1002C6CD4()
{
  void *v0;

  v0 = objc_autoreleasePoolPush();
  qword_10085B8B0 = (uint64_t)os_log_create("com.apple.nearbyd", "Regulatory");
  objc_autoreleasePoolPop(v0);
}

_QWORD *sub_1002C6D14@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, off_100813878[a1]);
}

_QWORD *sub_1002C6D28@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, off_1008138D0[a1]);
}

_QWORD *sub_1002C6D3C@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, off_100813918[a1]);
}

_QWORD *sub_1002C6D50@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, off_100813938[a1]);
}

void *sub_1002C6D64(void *a1, void *a2, uint64_t a3)
{
  id v5;
  id v6;
  id v7;
  void *v8;
  void *v9;
  const char *v11;
  int v12;
  _QWORD v13[4];
  id v14[2];
  id location;
  uint64_t v16;
  void *v17;

  v5 = a2;
  *(_QWORD *)a1 = off_100813720;
  *((_QWORD *)a1 + 1) = off_100813798;
  v6 = v5;
  *((_QWORD *)a1 + 2) = v6;
  *((_QWORD *)a1 + 3) = a3;
  *((_DWORD *)a1 + 8) = 2;
  v7 = objc_alloc((Class)CBPeripheralManager);
  v16 = CBManagerNeedsRestrictedStateOperation;
  v17 = &__kCFBooleanTrue;
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v17, &v16, 1));
  *((_QWORD *)a1 + 5) = objc_msgSend(v7, "initWithDelegate:queue:options:", 0, 0, v8);

  *((_QWORD *)a1 + 6) = -[PRWirelessProximityAdapter initWithQueue:]([PRWirelessProximityAdapter alloc], "initWithQueue:", *((_QWORD *)a1 + 2));
  *((_QWORD *)a1 + 7) = -[PRSettingsObserver initWithSettings:queue:]([PRSettingsObserver alloc], "initWithSettings:queue:", *((_QWORD *)a1 + 5), *((_QWORD *)a1 + 2));
  if (!*((_QWORD *)a1 + 2))
  {
    v11 = "fDispatchQueue";
    v12 = 35;
    goto LABEL_6;
  }
  if (!*((_QWORD *)a1 + 3))
  {
    v11 = "fBtProxyObject";
    v12 = 36;
LABEL_6:
    __assert_rtn("PRBluetoothProvider", "PRBluetoothProvider.mm", v12, v11);
  }
  objc_initWeak(&location, *((id *)a1 + 6));
  v9 = (void *)*((_QWORD *)a1 + 6);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_1002C6FB8;
  v13[3] = &unk_1008137C8;
  v14[1] = a1;
  objc_copyWeak(v14, &location);
  objc_msgSend(v9, "setWiproxStateHandler:", v13);
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);

  return a1;
}

void sub_1002C6F44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;
  void *v16;
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);

  _Unwind_Resume(a1);
}

void sub_1002C6FB8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  id WeakRetained;

  v3 = *(_QWORD *)(a1 + 40);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  sub_1002C7014(v3, WeakRetained, a2);

}

void sub_1002C7000(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1002C7014(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  const std::string::value_type *v6;
  unsigned int v7;
  NSObject *v8;
  std::string *v9;
  std::string v10;
  uint8_t buf[4];
  std::string *v12;

  v5 = a2;
  sub_10000BF04(&v10, "");
  v6 = "WPStateResetting";
  switch(a3)
  {
    case 0:
      std::string::append(&v10, "WPStateUnknown");
      v7 = 2;
      goto LABEL_5;
    case 1:
      goto LABEL_4;
    case 2:
      v6 = "WPStateOff";
LABEL_4:
      std::string::append(&v10, v6);
      v7 = 1;
LABEL_5:
      atomic_store(v7, (unsigned int *)(a1 + 32));
      break;
    case 3:
      std::string::append(&v10, "WPStateOn");
      atomic_store(0, (unsigned int *)(a1 + 32));
      objc_msgSend(v5, "enableSPMIMessagingWithHandler:", &stru_100813808);
      break;
    default:
      break;
  }
  v8 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    v9 = &v10;
    if ((v10.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v9 = (std::string *)v10.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 136315138;
    v12 = v9;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "WiProx changed state: %s", buf, 0xCu);
  }
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v10.__r_.__value_.__l.__data_);

}

void sub_1002C7188(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  if (a15 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

uint64_t sub_1002C71BC(uint64_t a1)
{
  *(_QWORD *)a1 = off_100813720;
  *(_QWORD *)(a1 + 8) = off_100813798;
  objc_msgSend(*(id *)(a1 + 56), "stopObserving:", CFSTR("advertisingAddress"));
  objc_msgSend(*(id *)(a1 + 48), "setWiproxStateHandler:", 0);

  return a1;
}

uint64_t sub_1002C7230(uint64_t a1)
{
  return sub_1002C71BC(a1 - 8);
}

void sub_1002C7238(uint64_t a1)
{
  sub_1002C71BC(a1);
  operator delete();
}

void sub_1002C725C(uint64_t a1)
{
  sub_1002C71BC(a1 - 8);
  operator delete();
}

id sub_1002C7284(uint64_t a1)
{
  NSObject *v2;
  void *v3;
  _QWORD v5[5];
  uint8_t buf[16];

  v2 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Start observing BT address roll events.", buf, 2u);
  }
  v3 = *(void **)(a1 + 56);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1002C7334;
  v5[3] = &unk_10080AFF0;
  v5[4] = a1;
  return objc_msgSend(v3, "startObserving:observeImmediately:callback:", CFSTR("advertisingAddress"), 0, v5);
}

void sub_1002C7334(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  uint8_t v3[16];

  v1 = *(_QWORD *)(a1 + 32);
  v2 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "BT address roll event.", v3, 2u);
  }
  sub_1002C73A4(v1);
}

void sub_1002C73A4(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD block[5];
  int v12;
  __int16 v13;
  char v14;
  void *v15[2];
  char v16;

  v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1);
  if (BYTE6(v2))
  {
    v3 = *(NSObject **)(a1 + 16);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1002C74AC;
    block[3] = &unk_1008137E8;
    block[4] = a1;
    v12 = v2;
    v13 = WORD2(v2);
    v14 = BYTE6(v2);
    dispatch_async(v3, block);
  }
  else
  {
    sub_1002C747C((uint64_t)objc_msgSend(*(id *)(a1 + 40), "state"), v15);
    v4 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
      sub_1003E76C4((uint64_t)v15, v4, v5, v6, v7, v8, v9, v10);
    if (v16 < 0)
      operator delete(v15[0]);
  }
}

_QWORD *sub_1002C747C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  char *v2;

  if ((unint64_t)(a1 - 1) > 4)
    v2 = "CBManagerStateUnknown";
  else
    v2 = off_100813958[a1 - 1];
  return sub_10000BF04(a2, v2);
}

void sub_1002C74AC(uint64_t a1)
{
  uint64_t v1;
  double rep;
  uint64_t v3;
  double v4;
  int v5;
  int v6;
  __int16 v7;
  char v8;

  if (!*(_BYTE *)(a1 + 46))
    sub_10000BA44();
  v1 = *(_QWORD *)(a1 + 32);
  v6 = *(_DWORD *)(a1 + 40);
  v7 = *(_WORD *)(a1 + 44);
  rep = (double)std::chrono::steady_clock::now().__d_.__rep_;
  v3 = *(_QWORD *)(v1 + 24);
  v4 = rep;
  v5 = 1;
  v8 = 1;
  sub_100165BA4(v3, (uint64_t)&v4);
}

uint64_t sub_1002C7510(uint64_t a1)
{
  unint64_t v1;
  void *v3;
  id v4;
  id v5;
  NSObject *v6;
  void *v7;
  NSObject *v8;
  NSObject *v9;
  _BYTE *v10;
  _BYTE *v11;
  char v12;
  unsigned int v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE v25[24];

  if (objc_msgSend(*(id *)(a1 + 40), "state") == (id)5 || objc_msgSend(*(id *)(a1 + 40), "state") == (id)10)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "advertisingAddress"));
    v4 = objc_msgSend(v3, "copy");

    v5 = objc_msgSend(v4, "length");
    v6 = qword_10085F520;
    if (v5 == (id)6)
    {
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)v25 = 138477827;
        *(_QWORD *)&v25[4] = v4;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "PRBluetoothProvider: BT Adv Address = %{private}@", v25, 0xCu);
      }
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "nonConnectableAdvertisingAddress"));
      v8 = objc_msgSend(v7, "copy");

      v9 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)v25 = 138477827;
        *(_QWORD *)&v25[4] = v8;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "PRBluetoothProvider: NonConnectable BT Adv Address = %{private}@", v25, 0xCu);
      }
      objc_msgSend(v4, "getBytes:length:", v25, 6);
      v10 = &v25[5];
      v11 = &v25[1];
      do
      {
        v12 = *(v11 - 1);
        *(v11 - 1) = *v10;
        *v10-- = v12;
      }
      while (v11++ < v10);
      v14 = v25[0];
      v1 = *(unsigned int *)&v25[1] | ((unint64_t)v25[5] << 32);
      v15 = 1;
    }
    else
    {
      v8 = (id)qword_10085F520;
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
        sub_1003E773C(v25, (uint64_t)objc_msgSend(v4, "length"), v8);
      v15 = 0;
      v14 = 0;
    }

  }
  else
  {
    v16 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
      sub_1003E7790(v16, v17, v18, v19, v20, v21, v22, v23);
    v15 = 0;
    v14 = 0;
  }
  return ((v1 & 0xFFFFFFFFFFLL) << 8) | (v15 << 48) | v14;
}

void sub_1002C7744(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t sub_1002C7798(uint64_t a1)
{
  return sub_1002C7510(a1 - 8);
}

void sub_1002C77A0(id a1, NSError *a2)
{
  NSError *v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;

  v2 = a2;
  if (!v2)
    goto LABEL_5;
  v3 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
    sub_1003E77C0((uint64_t)v2, v3, v4, v5, v6, v7, v8, v9);
  if (sub_1001FDCC8())
  {
    v10 = (const char *)objc_msgSend(objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(-[NSError description](v2, "description"))), "UTF8String");
    abort_report_np("Failed to enable SPMI messages via WiProx with error: %s", v10);
    __break(1u);
  }
  else
  {
LABEL_5:

  }
}

void sub_1002C7838(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t sub_1002C7854()
{
  NSObject *v0;
  uint8_t v2[16];

  v0 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v2 = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "PRBluetoothProvider: Probe", v2, 2u);
  }
  return 1;
}

uint64_t sub_1002C78BC(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 48), "enableSPMIMessagingWithHandler:", &stru_100813808);
  sub_1002C7284(a1);
  return 1;
}

uint64_t sub_1002C78F4(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 8;
  objc_msgSend(*(id *)(a1 + 40), "enableSPMIMessagingWithHandler:", &stru_100813808);
  sub_1002C7284(v1);
  return 1;
}

uint64_t sub_1002C792C(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 56), "stopObserving:", CFSTR("advertisingAddress"));
  return 1;
}

uint64_t sub_1002C7950(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 48), "stopObserving:", CFSTR("advertisingAddress"));
  return 1;
}

uint64_t sub_1002C7974(uint64_t a1, _DWORD *a2)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (*a2)
  {
    if (*a2 == 1)
    {
      v2 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
        sub_1003E7828(v2, v3, v4, v5, v6, v7, v8, v9);
    }
  }
  else
  {
    v10 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
      sub_1003E7858(v10, v11, v12, v13, v14, v15, v16, v17);
  }
  return 0;
}

void sub_1002C7D20(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = a2;
  if (+[NIPlatformInfo isInternalBuild](NIPlatformInfo, "isInternalBuild"))
  {
    v4 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 32);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      sub_1003E7888((uint64_t)v3, v4, v5, v6, v7, v8, v9, v10);
  }

}

void sub_1002C7DDC(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = a2;
  if (+[NIPlatformInfo isInternalBuild](NIPlatformInfo, "isInternalBuild"))
  {
    v4 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 32);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      sub_1003E78F0((uint64_t)v3, v4, v5, v6, v7, v8, v9, v10);
  }

}

_QWORD *sub_1002C8274@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, off_100814220[a1]);
}

_QWORD *sub_1002C8288@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, off_100814278[a1]);
}

_QWORD *sub_1002C829C@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, off_1008142C0[a1]);
}

_QWORD *sub_1002C82B0@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, off_1008142E0[a1]);
}

uint64_t sub_1002C82C4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  dispatch_queue_attr_t v6;
  NSObject *v7;
  _QWORD *v8;
  void *v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  unsigned __int8 v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  NSObject *v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  NSObject *v30;
  unint64_t *v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  NSObject *v35;
  uint64_t v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  void *v44;
  unsigned int v45;
  id v46;
  uint64_t v48;
  uint64_t *v49;
  _QWORD v50[5];
  uint64_t v51;
  std::__shared_weak_count *v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  uint64_t v57;
  uint8_t buf[16];
  uint64_t v59;
  uint64_t v60;
  __int128 __dst;
  uint64_t v62;

  *(_QWORD *)(a1 + 8) = off_100813A70;
  v2 = a1 + 8;
  *(_QWORD *)(a1 + 16) = off_100813A98;
  v3 = a1 + 16;
  *(_QWORD *)(a1 + 24) = off_100813AC0;
  v4 = a1 + 24;
  *(_QWORD *)(a1 + 40) = off_100813B10;
  v5 = a1 + 40;
  *(_QWORD *)a1 = off_1008139B8;
  *(_QWORD *)(a1 + 32) = off_100813AE8;
  *(_QWORD *)(a1 + 48) = off_100813B38;
  v6 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_USER_INITIATED, 0);
  v7 = objc_claimAutoreleasedReturnValue(v6);
  *(_QWORD *)(a1 + 56) = dispatch_queue_create("com.apple.nearbyd.SensorQueue", v7);
  v49 = (uint64_t *)(a1 + 56);

  std::recursive_mutex::recursive_mutex((std::recursive_mutex *)(a1 + 64));
  *(_QWORD *)(a1 + 152) = 0;
  v8 = operator new(0x20uLL);
  *v8 = off_100813E80;
  v8[1] = sub_1002C9180;
  v8[2] = 0;
  v8[3] = a1;
  *(_QWORD *)(a1 + 152) = v8;
  v60 = v5;
  if ((sub_1001FDD60() & 1) != 0
    || (v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults")),
        v10 = objc_msgSend(v9, "BOOLForKey:", CFSTR("ProtobufLoggingEnabled")),
        v9,
        (v10 & 1) != 0))
  {
    v11 = atomic_load((unsigned __int8 *)&qword_10085D320);
    if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_10085D320))
    {
      sub_100004784();
      sub_100008E7C((uint64_t)&unk_10085D308);
      __cxa_atexit((void (*)(void *))&std::string::~string, &unk_10085D308, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_10085D320);
    }
    v12 = atomic_load((unsigned __int8 *)&qword_10085D340);
    if ((v12 & 1) == 0 && __cxa_guard_acquire(&qword_10085D340))
    {
      sub_10000BF04(byte_10085D328, "nearbyd-new-");
      __cxa_atexit((void (*)(void *))&std::string::~string, byte_10085D328, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_10085D340);
    }
    sub_1002F6A38(byte_10085D328, buf);
    if (SHIBYTE(v59) < 0)
    {
      sub_100004678(&__dst, *(void **)buf, *(unint64_t *)&buf[8]);
    }
    else
    {
      __dst = *(_OWORD *)buf;
      v62 = v59;
    }
    sub_1002CE9A0((uint64_t)&v57, (const void **)&__dst, 1);
    if (SHIBYTE(v62) < 0)
      operator delete((void *)__dst);
    sub_10013F9B8((const void **)&unk_10085D308, (const void **)buf, (uint64_t)&__dst);
    operator new();
  }
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 208) = a1 + 216;
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_BYTE *)(a1 + 200) = 0;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_DWORD *)(a1 + 264) = 1065353216;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_DWORD *)(a1 + 304) = 1065353216;
  *(_OWORD *)(a1 + 288) = 0u;
  v48 = a1 + 312;
  sub_10016B814(a1 + 312, a1 + 3264);
  sub_10016ABD4(a1 + 408, a1 + 856);
  sub_10014CEE8(a1 + 504, a1 + 912);
  sub_100165B78(a1 + 592, a1 + 1008);
  sub_10016E58C(a1 + 680, 0);
  sub_10016AA84(a1 + 768, a1 + 1072);
  sub_1002AC670(a1 + 856, *v49, a1 + 408, 0.02);
  sub_10028FB40(a1 + 912, *v49, a1 + 504);
  sub_1002C71B8(a1 + 1008, *v49, a1 + 592);
  sub_1002D7EA4(a1 + 1072, *v49, a1 + 768);
  sub_1002CF13C(a1 + 1008, a1 + 1072, (_QWORD *)(a1 + 3248));
  v13 = *(_QWORD *)(a1 + 56);
  v14 = *(std::__shared_weak_count **)(a1 + 3256);
  v55 = *(_QWORD *)(a1 + 3248);
  v56 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
  }
  v17 = *(std::__shared_weak_count **)(a1 + 168);
  v53 = *(_QWORD *)(a1 + 160);
  v54 = v17;
  if (v17)
  {
    v18 = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  sub_100199010(a1 + 3264, v13, &v55, v48, v2, v3, v4, &v53, a1 + 3248, a1 + 272, a1 + 232, a1 + 208, a1 + 64);
  v20 = v54;
  if (v54)
  {
    v21 = (unint64_t *)&v54->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v23 = v56;
  if (v56)
  {
    v24 = (unint64_t *)&v56->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  *(_QWORD *)(a1 + 6368) = v48;
  *(_QWORD *)(a1 + 6376) = a1 + 408;
  *(_QWORD *)(a1 + 6384) = a1 + 504;
  *(_QWORD *)(a1 + 6392) = a1 + 592;
  *(_QWORD *)(a1 + 6400) = a1 + 680;
  *(_QWORD *)(a1 + 6408) = a1 + 768;
  *(_QWORD *)(a1 + 6416) = a1 + 1016;
  *(_QWORD *)(a1 + 6424) = a1 + 920;
  *(_QWORD *)(a1 + 6432) = a1 + 864;
  *(_QWORD *)(a1 + 6440) = a1 + 1080;
  *(_QWORD *)(a1 + 6448) = a1 + 3272;
  *(_OWORD *)(a1 + 6456) = 0u;
  sub_10029B4A4(a1 + 6472);
  v26 = (id)qword_10085F520;
  if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "PRRangingManager construction", buf, 2u);
  }

  if (sub_1001FDCC8())
  {
    v57 = a1;
    sub_1002CF3F0(a1 + 6368, a1 + 6416, &v57, v49, (uint64_t *)(a1 + 160), buf);
    sub_1000145E8(a1 + 6456, (__int128 *)buf);
    v27 = *(std::__shared_weak_count **)&buf[8];
    if (!*(_QWORD *)&buf[8])
      goto LABEL_41;
    v28 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    goto LABEL_39;
  }
  v30 = (id)qword_10085F520;
  if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "PRRangingManager: Not a supported platform.", buf, 2u);
  }

  v57 = a1;
  sub_1002CF5E0(&v57, (void **)v49, buf);
  sub_1000145E8(a1 + 6456, (__int128 *)buf);
  v27 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v31 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v29 = __ldaxr(v31);
    while (__stlxr(v29 - 1, v31));
LABEL_39:
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
LABEL_41:
  sub_1002CF6E0(buf);
  sub_1000145E8(a1 + 176, (__int128 *)buf);
  v32 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v33 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  if (sub_1001FDCC8() && sub_10016E628() && (sub_10016E628() & 1) == 0)
  {
    v35 = (id)qword_10085F520;
    if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
      sub_1003E7958();

  }
  v36 = *(_QWORD *)(a1 + 6456);
  v37 = v36 + 16;
  if (!v36)
    v37 = 0;
  v38 = *(std::__shared_weak_count **)(a1 + 6464);
  v51 = v37;
  v52 = v38;
  if (v38)
  {
    v39 = (unint64_t *)&v38->__shared_owners_;
    do
      v40 = __ldxr(v39);
    while (__stxr(v40 + 1, v39));
  }
  sub_10019CD94(a1 + 3264, &v51);
  v41 = v52;
  if (v52)
  {
    v42 = (unint64_t *)&v52->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 6456) + 24))(*(_QWORD *)(a1 + 6456));
  if ((sub_1001FDD60() & 1) != 0
    || (v44 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults")),
        v45 = objc_msgSend(v44, "BOOLForKey:", CFSTR("EnableStateDump")),
        v44,
        v45))
  {
    v46 = &_dispatch_main_q;
    v50[0] = _NSConcreteStackBlock;
    v50[1] = 3221225472;
    v50[2] = sub_1002C9288;
    v50[3] = &unk_100813B70;
    v50[4] = a1;
    os_state_add_handler(&_dispatch_main_q, v50);

  }
  return a1;
}

void sub_1002C8E70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::recursive_mutex *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,char a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,char a37)
{
  uint64_t v37;
  _QWORD *v39;
  uint64_t v40;

  __cxa_guard_abort(&qword_10085D340);
  v39 = *(_QWORD **)(v37 + 152);
  if (v39 == (_QWORD *)(v37 + 128))
  {
    v40 = 4;
    v39 = (_QWORD *)(v37 + 128);
  }
  else
  {
    if (!v39)
      goto LABEL_6;
    v40 = 5;
  }
  (*(void (**)(void))(*v39 + 8 * v40))();
LABEL_6:
  std::recursive_mutex::~recursive_mutex(a13);

  _Unwind_Resume(a1);
}

void sub_1002C9180(uint64_t a1, void *a2)
{
  id v2;
  NSObject *v3;
  void *v4;
  std::runtime_error *exception;
  int v6;
  void *v7;

  v2 = a2;
  if (v2)
  {
    v3 = (id)qword_10085F520;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "localizedDescription"));
      v6 = 138412290;
      v7 = v4;
      _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "PRRangingManager::defaultErrorHandler %@", (uint8_t *)&v6, 0xCu);

    }
  }
  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "PRRangingManager::defaultErrorHandler");
}

void sub_1002C9250(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

char *sub_1002C9288(uint64_t a1)
{
  id v1;
  void *v2;
  char *v3;

  v1 = sub_1002C92DC(*(_QWORD *)(a1 + 32));
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = sub_10002D428(CFSTR("PRRangingManager"), v2);

  return v3;
}

void sub_1002C92CC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id sub_1002C92DC(uint64_t a1)
{
  void *v2;
  void *v3;
  _QWORD *v4;
  NSString *v5;
  void *v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;
  void *v10;
  uint64_t *i;
  uint64_t v12;
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  NSString *v17;
  void *v18;
  unint64_t *v19;
  unint64_t v20;
  void *v21;
  _QWORD *j;
  unsigned int v23;
  void *v24;
  std::__shared_weak_count *v25;
  const __CFString *v26;
  std::__shared_weak_count *shared_owners;
  std::__shared_weak_count **shared_weak_owners;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  NSMutableArray *v32;
  void *v33;
  void *v34;
  uint64_t v35;
  void *v36;
  unsigned __int8 *v37;
  const char *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  const char *v43;
  void *v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  void *v50;
  int32x4_t v51;
  uint64_t v52;
  int8x16_t v53;
  int16x4_t v54;
  void *v55;
  uint64_t k;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  const char *v62;
  unint64_t v63;
  const char *v64;
  unint64_t v65;
  const char *v66;
  void *v67;
  id v68;
  void *v69;
  void *v70;
  uint64_t v72;
  NSMutableArray *v73;
  uint64_t v74;
  std::__shared_weak_count *v75;
  std::__shared_weak_count *v76;
  _QWORD *v77[11];
  unsigned __int8 v78;
  char v79;
  unsigned __int8 v80;
  unsigned __int8 v81;
  unsigned __int8 v82;
  unsigned __int8 v83;
  unsigned __int8 v84;
  unsigned __int8 v85;
  unsigned __int8 v86;
  unsigned __int8 v87;
  unsigned __int8 v88;
  unsigned __int8 v89;
  char v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unsigned __int16 v94;
  char v95;
  _BYTE v96[126];
  _QWORD v97[3];
  _QWORD v98[3];

  v73 = objc_opt_new(NSMutableArray);
  std::recursive_mutex::lock((std::recursive_mutex *)(a1 + 64));
  v2 = objc_autoreleasePoolPush();
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Total ranging manager clients: %zu"), *(_QWORD *)(a1 + 224)));
  -[NSMutableArray addObject:](v73, "addObject:", v3);

  v4 = *(_QWORD **)(a1 + 208);
  if (v4 != (_QWORD *)(a1 + 216))
  {
    do
    {
      v5 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("    Client: H<%04x>"), CUObfuscatedPtr(v4[4]));
      v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
      -[NSMutableArray addObject:](v73, "addObject:", v6);

      v7 = (_QWORD *)v4[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (_QWORD *)v4[2];
          v9 = *v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != (_QWORD *)(a1 + 216));
  }
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Total service requests: %zu"), *(_QWORD *)(a1 + 256)));
  -[NSMutableArray addObject:](v73, "addObject:", v10);

  for (i = *(uint64_t **)(a1 + 248); i; i = (uint64_t *)*i)
  {
    v12 = *((unsigned __int16 *)i + 8);
    LOWORD(v74) = *((_WORD *)i + 8);
    v13 = (std::__shared_weak_count *)i[3];
    v14 = (std::__shared_weak_count *)i[4];
    v75 = v13;
    v76 = v14;
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldxr(p_shared_owners);
      while (__stxr(v16 + 1, p_shared_owners));
    }
    v17 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("    Ticket: %d. Client: H<%04x>"), v12, CUObfuscatedPtr(v13));
    v18 = (void *)objc_claimAutoreleasedReturnValue(v17);
    -[NSMutableArray addObject:](v73, "addObject:", v18);

    if (v14)
    {
      v19 = (unint64_t *)&v14->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
  }
  v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Clients holding service requests: %zu"), *(_QWORD *)(a1 + 296)));
  -[NSMutableArray addObject:](v73, "addObject:", v21);

  v72 = a1;
  for (j = *(_QWORD **)(a1 + 288); j; j = (_QWORD *)*j)
  {
    sub_1002D00FC(&v74, j + 2);
    v23 = CUObfuscatedPtr(v74);
    v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableString stringWithFormat:](NSMutableString, "stringWithFormat:", CFSTR("    Client: H<%04x> with %zu tickets: ["), v23, v77[1]));
    v25 = v76;
    if (v76 != (std::__shared_weak_count *)v77)
    {
      do
      {
        if (v25 == v76)
          v26 = CFSTR("%d");
        else
          v26 = CFSTR(", %d");
        objc_msgSend(v24, "appendFormat:", v26, WORD1(v25[1].__vftable));
        shared_owners = (std::__shared_weak_count *)v25->__shared_owners_;
        if (shared_owners)
        {
          do
          {
            shared_weak_owners = (std::__shared_weak_count **)shared_owners;
            shared_owners = (std::__shared_weak_count *)shared_owners->__vftable;
          }
          while (shared_owners);
        }
        else
        {
          do
          {
            shared_weak_owners = (std::__shared_weak_count **)v25->__shared_weak_owners_;
            v9 = *shared_weak_owners == v25;
            v25 = (std::__shared_weak_count *)shared_weak_owners;
          }
          while (!v9);
        }
        v25 = (std::__shared_weak_count *)shared_weak_owners;
      }
      while (shared_weak_owners != (std::__shared_weak_count **)v77);
    }
    objc_msgSend(v24, "appendString:", CFSTR("]"));
    -[NSMutableArray addObject:](v73, "addObject:", v24);

    sub_10003E3F0((uint64_t)&v76, v77[0]);
    v29 = v75;
    if (v75)
    {
      v30 = (unint64_t *)&v75->__shared_owners_;
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
  }
  objc_autoreleasePoolPop(v2);
  std::recursive_mutex::unlock((std::recursive_mutex *)(a1 + 64));
  v32 = objc_opt_new(NSMutableArray);
  sub_100199C54(a1 + 3264, &v74);
  if (v96[119])
  {
    v33 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("AOP timestamp: %llu us"), v74));
    -[NSMutableArray addObject:](v32, "addObject:", v33);

    v34 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("DRAM assertion: %d"), v78));
    -[NSMutableArray addObject:](v32, "addObject:", v34);

    v35 = v75;
    v36 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Total AOP jobs: %d"), v75));
    -[NSMutableArray addObject:](v32, "addObject:", v36);

    if ((_DWORD)v35)
    {
      v37 = (unsigned __int8 *)&v75 + 4;
      do
      {
        switch(*(v37 - 1))
        {
          case 0u:
            v38 = "GRBroadcastingBeacon";
            break;
          case 1u:
            v38 = "GRSingleResponseSurvey";
            break;
          case 2u:
            v38 = "GRTranspondingBeacon";
            break;
          case 3u:
            v38 = "GRDoubleResponseSurvey";
            break;
          case 4u:
            v38 = "GRSymmetricalMultiPeer";
            break;
          case 5u:
            v38 = "GRNoDataSymmetricalSinglePeer";
            break;
          default:
            v38 = "Alisha_CCC";
            switch(*(v37 - 1))
            {
              case 'd':
                v38 = "P2P";
                break;
              case 'e':
                v38 = "PTS";
                break;
              case 'g':
                v38 = "FiRa";
                break;
              case 'h':
                v38 = "TestNMI";
                break;
              case 'i':
                v38 = "NMI";
                break;
              case 'j':
                v38 = "Alisha_ACWG";
                break;
              default:
                goto LABEL_53;
            }
            break;
        }
LABEL_53:
        v39 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("    Ticket: [%d]. Is ranging: [%u]. Type: [%s]"), *(unsigned __int16 *)(v37 - 3), *v37, v38));
        -[NSMutableArray addObject:](v32, "addObject:", v39);

        v37 += 4;
        --v35;
      }
      while (v35);
    }
    v40 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Scheduler: has service handle %d"), v79 & 1));
    -[NSMutableArray addObject:](v32, "addObject:", v40);

    v41 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("    Task array: %d total, %d runnable, %d suspended, %d waiting trigger, %d waiting FW rsp"), v80, v81, v82, v83, v84));
    -[NSMutableArray addObject:](v32, "addObject:", v41);

    v42 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("    Task lists: %d runnable, %d suspended, %d waiting trigger, %d waiting FW rsp"), v85, v86, v87, v88));
    -[NSMutableArray addObject:](v32, "addObject:", v42);

    if ((unint64_t)v90 > 3)
      v43 = "OutOfBounds";
    else
      v43 = off_100814300[v90];
    v44 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("SF manager: has PDR %d, IO activated %d, stationary timer %d, displacing state %s"), v89 & 1, (v89 >> 1) & 1, (v89 >> 2) & 1, v43));
    -[NSMutableArray addObject:](v32, "addObject:", v44);

    v45 = v91 - v74;
    if (!v91)
      v45 = 0;
    v46 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("    Last IO data received: %llu us (dT: %lld us)"), v91, v45));
    -[NSMutableArray addObject:](v32, "addObject:", v46);

    v47 = v92 - v74;
    if (!v92)
      v47 = 0;
    v48 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("    Last IO data processed: %llu us (dT: %lld us)"), v92, v47));
    -[NSMutableArray addObject:](v32, "addObject:", v48);

    v49 = v93 - v74;
    if (!v93)
      v49 = 0;
    v50 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("    Last BT RSSI: received %llu us (dT: %lld us), conn handle 0x%04x, value %d dBm"), v93, v49, v94, v95));
    -[NSMutableArray addObject:](v32, "addObject:", v50);

    v51 = 0uLL;
    v52 = 154;
    v53.i64[0] = 0x100000001;
    v53.i64[1] = 0x100000001;
    do
    {
      v54.i16[0] = *(_WORD *)((char *)&v74 + v52);
      v54.i16[1] = *(_WORD *)((char *)&v75 + v52 + 7);
      v54.i16[2] = *(_WORD *)((char *)v77 + v52 + 6);
      v54.i16[3] = *(_WORD *)((char *)&v77[2] + v52 + 5);
      v51 = vaddq_s32(v51, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16((uint16x4_t)vmvn_s8((int8x8_t)vceq_s16(v54, (int16x4_t)-1))), v53));
      v52 += 60;
    }
    while (v52 != 274);
    v55 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("    Num valid BT connections: %d"), vaddvq_s32(v51)));
    -[NSMutableArray addObject:](v32, "addObject:", v55);

    for (k = 0; k != 120; k += 15)
    {
      v57 = (char *)&v74 + k;
      v58 = *(unsigned __int16 *)&v96[k];
      if ((_DWORD)v58 != 0xFFFF)
      {
        v59 = *(_QWORD *)(v57 + 156);
        v60 = v59 - v74;
        if (!v59)
          v60 = 0;
        v61 = v57[165];
        v62 = "OutOfBounds";
        if (v61 <= 2)
          v62 = off_100814340[v61];
        v63 = (char)v96[k + 12];
        v64 = "OutOfBounds";
        if (v63 <= 3)
          v64 = off_100814320[v63];
        v65 = (char)v96[k + 13];
        v66 = "OutOfBounds";
        if (v65 <= 2)
          v66 = off_100814340[v65];
        v67 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("        [0x%04x] Job: %d. CfgEnbl: %d. RSSI: %d dBm @ %llu us (dT: %lld us). State: bubble %d, zone: %s. Dispatched: NI %s, BT %s"), v58, v57[153] & 1, (v57[153] >> 1) & 1, v57[164], v59, v60, (v57[153] >> 2) & 1, v62, v64, v66));
        -[NSMutableArray addObject:](v32, "addObject:", v67);

      }
    }
  }
  else
  {
    -[NSMutableArray addObject:](v32, "addObject:", CFSTR("Could not get AOP activity report"));
  }
  v68 = sub_1002DA394(v72 + 1072);
  v69 = (void *)objc_claimAutoreleasedReturnValue(v68);
  v97[0] = CFSTR("Ranging Manager");
  v97[1] = CFSTR("AOP Activity Summary");
  v98[0] = v73;
  v98[1] = v32;
  v97[2] = CFSTR("Regulatory");
  v98[2] = v69;
  v70 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v98, v97, 3));

  return v70;
}

void sub_1002C9CAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::recursive_mutex *a21,uint64_t a22,void *a23,char a24)
{
  void *v24;
  void *v25;

  _Unwind_Resume(a1);
}

uint64_t sub_1002C9E14(uint64_t a1)
{
  NSObject *v2;
  _QWORD *v3;
  uint64_t v4;
  uint8_t v6[16];

  *(_QWORD *)a1 = off_1008139B8;
  *(_QWORD *)(a1 + 8) = off_100813A70;
  *(_QWORD *)(a1 + 16) = off_100813A98;
  *(_QWORD *)(a1 + 24) = off_100813AC0;
  *(_QWORD *)(a1 + 32) = off_100813AE8;
  *(_QWORD *)(a1 + 40) = off_100813B10;
  *(_QWORD *)(a1 + 48) = off_100813B38;
  v2 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "~PRRangingManager", v6, 2u);
  }
  sub_10029B594((id *)(a1 + 6472));
  sub_10001AE68(a1 + 6456);
  sub_100199490(a1 + 3264);
  sub_10001AE68(a1 + 3248);
  sub_1002D7F58(a1 + 1072);
  sub_1002C722C(a1 + 1008);
  sub_10028FB7C((id *)(a1 + 912));

  sub_10016AAB0(a1 + 768);
  sub_10016E5B8(a1 + 680);
  *(_QWORD *)(a1 + 592) = off_100806F08;
  std::mutex::~mutex((std::mutex *)(a1 + 616));
  sub_10014CF14(a1 + 504);
  sub_10016ABFC(a1 + 408);
  sub_10016B83C(a1 + 312);
  sub_1002CF364(a1 + 272);
  sub_1001EAEE4(a1 + 232);
  sub_1002CF31C(a1 + 208, *(_QWORD **)(a1 + 216));

  sub_10001AE68(a1 + 176);
  sub_10001AE68(a1 + 160);
  v3 = *(_QWORD **)(a1 + 152);
  if (v3 == (_QWORD *)(a1 + 128))
  {
    v4 = 4;
    v3 = (_QWORD *)(a1 + 128);
    goto LABEL_7;
  }
  if (v3)
  {
    v4 = 5;
LABEL_7:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  std::recursive_mutex::~recursive_mutex((std::recursive_mutex *)(a1 + 64));

  return a1;
}

uint64_t sub_1002C9FC4(uint64_t a1)
{
  return sub_1002C9E14(a1 - 8);
}

uint64_t sub_1002C9FCC(uint64_t a1)
{
  return sub_1002C9E14(a1 - 16);
}

uint64_t sub_1002C9FD4(uint64_t a1)
{
  return sub_1002C9E14(a1 - 24);
}

uint64_t sub_1002C9FDC(uint64_t a1)
{
  return sub_1002C9E14(a1 - 32);
}

uint64_t sub_1002C9FE4(uint64_t a1)
{
  return sub_1002C9E14(a1 - 40);
}

uint64_t sub_1002C9FEC(uint64_t a1)
{
  return sub_1002C9E14(a1 - 48);
}

void sub_1002C9FF4(uint64_t a1)
{
  sub_1002C9E14(a1);
  operator delete();
}

void sub_1002CA018(uint64_t a1)
{
  sub_1002C9E14(a1 - 8);
  operator delete();
}

void sub_1002CA040(uint64_t a1)
{
  sub_1002C9E14(a1 - 16);
  operator delete();
}

void sub_1002CA068(uint64_t a1)
{
  sub_1002C9E14(a1 - 24);
  operator delete();
}

void sub_1002CA090(uint64_t a1)
{
  sub_1002C9E14(a1 - 32);
  operator delete();
}

void sub_1002CA0B8(uint64_t a1)
{
  sub_1002C9E14(a1 - 40);
  operator delete();
}

void sub_1002CA0E0(uint64_t a1)
{
  sub_1002C9E14(a1 - 48);
  operator delete();
}

void *sub_1002CA108()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_10085D300);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_10085D300))
  {
    sub_1002C82C4((uint64_t)&unk_10085B9B0);
    __cxa_atexit((void (*)(void *))sub_1002C9FC0, &unk_10085B9B0, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10085D300);
  }
  return &unk_10085B9B0;
}

void sub_1002CA180(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_10085D300);
  _Unwind_Resume(a1);
}

_QWORD *sub_1002CA198(uint64_t a1, uint64_t a2)
{
  if (!*(_QWORD *)(a2 + 24))
    sub_1003E79DC();
  return sub_1002CA1B8((_QWORD *)(a1 + 128), a2);
}

_QWORD *sub_1002CA1B8(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;

  sub_100027674((uint64_t)v6, a2);
  sub_1002CF820(v6, a1);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void sub_1002CA250(std::recursive_mutex *a1, void *a2)
{
  id v3;
  void *sig;

  v3 = a2;
  std::recursive_mutex::lock(a1 + 1);
  sig = (void *)a1[3].__m_.__sig;
  a1[3].__m_.__sig = (uint64_t)v3;

  std::recursive_mutex::unlock(a1 + 1);
}

void sub_1002CA298(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id sub_1002CA2A8(uint64_t a1)
{
  std::recursive_mutex *v2;
  id v3;

  v2 = (std::recursive_mutex *)(a1 + 64);
  std::recursive_mutex::lock((std::recursive_mutex *)(a1 + 64));
  v3 = *(id *)(a1 + 192);
  std::recursive_mutex::unlock(v2);
  return v3;
}

id sub_1002CA2E8(uint64_t a1)
{
  return sub_1002CA2A8(a1 - 40);
}

void sub_1002CA2F0(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  sub_100199958(a1 + 3264, a2, a3);
}

void sub_1002CA2F8(uint64_t a1@<X0>, unsigned int a2@<W1>, unsigned int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  sub_10019A150(a1 + 3264, a2, a3, a4, a5);
}

void sub_1002CA300(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_10019A460(a1 + 3264, a2, a3);
}

void sub_1002CA308(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  sub_10019A7D4(a1 + 3264, a2, a3, a4);
}

uint64_t sub_1002CA310(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10019B708(a1 + 3264, a2, a3);
}

uint64_t sub_1002CA318(uint64_t a1, uint64_t a2)
{
  return sub_10019BBC0(a1 + 3264, a2);
}

void sub_1002CA320(uint64_t a1@<X0>, int a2@<W1>, __int128 *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  sub_10019AE60(a1 + 3264, a2, a3, a4, a5);
}

uint64_t sub_1002CA328(uint64_t a1, uint64_t a2)
{
  return sub_10019B2EC(a1 + 3264, a2);
}

uint64_t sub_1002CA330(uint64_t a1, int a2)
{
  return sub_10019B310(a1 + 3264, a2);
}

unint64_t sub_1002CA338(uint64_t a1)
{
  return sub_10019B334(a1 + 3264);
}

uint64_t sub_1002CA340(uint64_t a1, int a2)
{
  return sub_10019B198(a1 + 3264, a2);
}

uint64_t sub_1002CA348(uint64_t a1)
{
  return sub_10019AB5C(a1 + 3264);
}

BOOL sub_1002CA350(uint64_t a1, char a2, __int16 a3)
{
  return sub_10019B364(a1 + 3264, a2, a3);
}

uint64_t sub_1002CA358(uint64_t a1)
{
  uint64_t v1;
  int v3;
  __int16 v4;
  char v5;
  char v6;
  char v7;
  char v8;
  char v9;
  void *v10;
  void *v11;
  char v12;
  char v13;
  void *__p;
  void *v15;
  char v16;
  __int16 v17;
  char v18;
  char v19;
  __int16 v20;
  char v21;
  char v22;
  char v23;
  char v24;

  v3 = 8;
  v4 = 0;
  v5 = 0;
  v6 = 0;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v12 = 0;
  v13 = 0;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  v21 = 0;
  v22 = 0;
  v23 = 0;
  v24 = 0;
  v1 = sub_10019BF90(a1 + 3264, (uint64_t)&v3);
  if (v16 && __p)
  {
    v15 = __p;
    operator delete(__p);
  }
  if (v12 && v10)
  {
    v11 = v10;
    operator delete(v10);
  }
  return v1;
}

void sub_1002CA434(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100167580((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1002CA448(uint64_t a1)
{
  int v2;
  NSObject *v3;
  _BOOL4 v4;
  uint64_t v5;
  NSObject *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  char v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14[2];
  uint8_t buf[16];

  v2 = *(unsigned __int8 *)(a1 + 200);
  v3 = qword_10085F520;
  v4 = os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT);
  if (v2)
  {
    if (v4)
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "PRRangingManager::firstUnlockNotificationAction - unlock notification previously received. Ignore action.", buf, 2u);
    }
  }
  else
  {
    if (v4)
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "PRRangingManager::firstUnlockNotificationAction - this is the first notification received. Execute action.", buf, 2u);
    }
    *(_BYTE *)(a1 + 200) = 1;
    if (sub_1001FDCC8())
      sub_1001990C4(a1 + 3264);
    sub_1002D8834(a1 + 1072);
    v5 = *(_QWORD *)(a1 + 160);
    if (v5 && !sub_10027712C(v5))
    {
      v6 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "fPbLogger protobuf exists but it's not open.", buf, 2u);
      }
      if ((sub_10026BC70(*(_QWORD *)(a1 + 160)) & 1) == 0
        && os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
      {
        sub_1003E7A30();
      }
      v7 = *(std::__shared_weak_count **)(a1 + 168);
      v14[0] = *(_QWORD *)(a1 + 160);
      v14[1] = (uint64_t)v7;
      if (v7)
      {
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v9 = __ldxr(p_shared_owners);
        while (__stxr(v9 + 1, p_shared_owners));
      }
      v10 = sub_1002CA634(v14);
      if (v7)
      {
        v11 = (unint64_t *)&v7->__shared_owners_;
        do
          v12 = __ldaxr(v11);
        while (__stlxr(v12 - 1, v11));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
      if ((v10 & 1) == 0 && os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
        sub_1003E7A04();
    }
    v13 = *(_QWORD *)(a1 + 6456);
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 88))(v13);
  }
}

void sub_1002CA620(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10001AE68((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1002CA634(uint64_t *a1)
{
  id v2;
  void *v3;
  id v4;
  void *v5;
  uint64_t v6;
  std::string __p;
  std::string v9;

  if (*a1)
  {
    v2 = sub_1001FDA4C();
    v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
    v4 = sub_1001FDA7C();
    v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
    if (v3)
      sub_10000BF04(&v9, (char *)objc_msgSend(objc_retainAutorelease(v3), "UTF8String"));
    else
      sub_10000BF04(&v9, "UNKNOWN");
    if (v5)
      sub_10000BF04(&__p, (char *)objc_msgSend(objc_retainAutorelease(v5), "UTF8String"));
    else
      sub_10000BF04(&__p, "UNKNOWN");
    v6 = sub_10026BD54(*a1, &v9, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v9.__r_.__value_.__l.__data_);

  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
      sub_1003E7A5C();
    return 0;
  }
  return v6;
}

void sub_1002CA750(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  void *v21;

  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);

  _Unwind_Resume(a1);
}

void sub_1002CA79C(uint64_t a1, uint64_t *a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  NSObject *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  _QWORD block[5];
  std::__shared_weak_count *v19;
  uint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;

  v21 = 0;
  v22 = 0;
  v3 = (std::__shared_weak_count *)a2[1];
  if (v3 && (v5 = std::__shared_weak_count::lock(v3), (v22 = v5) != 0) && (v6 = *a2, (v21 = v6) != 0))
  {
    v7 = v5;
    v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 6456) + 72))(*(_QWORD *)(a1 + 6456));
    v9 = *(NSObject **)(a1 + 56);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3321888768;
    block[2] = sub_1002CA90C;
    block[3] = &unk_100813B90;
    block[4] = v6;
    v19 = v7;
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    v20 = v8;
    dispatch_async(v9, block);
    v12 = v19;
    if (v19)
    {
      v13 = (unint64_t *)&v19->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
  {
    sub_1003E7A88();
  }
  v15 = v22;
  if (v22)
  {
    v16 = (unint64_t *)&v22->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_1002CA8F8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10001AE68(v1 - 48);
  _Unwind_Resume(a1);
}

uint64_t sub_1002CA90C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(a1 + 32) + 88))(*(_QWORD *)(a1 + 32), *(unsigned int *)(a1 + 48), *(unsigned int *)(a1 + 52));
}

uint64_t sub_1002CA924(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t sub_1002CA948(uint64_t a1)
{
  return sub_10001AE68(a1 + 32);
}

uint64_t sub_1002CA950(std::__shared_weak_count *a1, uint64_t *a2, uint64_t a3)
{
  std::__shared_weak_count *v4;
  std::recursive_mutex *p_shared_weak_owners;
  uint64_t **v8;
  uint64_t **v9;
  int v10;
  int v11;
  NSObject *v12;
  NSObject *shared_owners;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t i;
  NSObject *v23;
  int v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  _QWORD block[5];
  std::__shared_weak_count *v28;
  _BYTE v29[656];
  _BYTE v30[8];
  void *__p;
  char v32;
  char v33;
  uint8_t buf[8];
  uint8_t v35[2];
  _QWORD __src[82];
  uint64_t v37;
  void *v38;
  char v39;
  char v40;

  v25 = 0;
  v26 = 0;
  v4 = (std::__shared_weak_count *)a2[1];
  if (v4 && (v26 = std::__shared_weak_count::lock(v4)) != 0 && (v25 = *a2) != 0)
  {
    p_shared_weak_owners = (std::recursive_mutex *)&a1[2].__shared_weak_owners_;
    std::recursive_mutex::lock((std::recursive_mutex *)&a1[2].__shared_weak_owners_);
    (*((void (**)(_QWORD *__return_ptr, std::__shared_weak_count_vtbl *, uint64_t))a1[269].~__shared_weak_count
     + 5))(__src, a1[269].__vftable, a3);
    if (LODWORD(__src[81]) != 1)
      sub_1002CF994();
    if (LOBYTE(__src[80]))
    {
      *(_WORD *)v35 = __src[1];
      *(_QWORD *)buf = &v25;
      v8 = (uint64_t **)sub_1002CF9CC((uint64_t)&a1[11].__shared_owners_, &v25, (uint64_t)&unk_100472CF8, (_QWORD **)buf);
      sub_1002CFCCC(v8 + 4, (unsigned __int16 *)v35, v35);
      if (sub_100154A64(&a1[9].__shared_weak_owners_, (unsigned __int16 *)v35))
      {
        if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
          sub_1003E7B48();
        for (i = a1[10].__shared_owners_; i; i = *(_QWORD *)i)
        {
          v23 = qword_10085F520;
          if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
          {
            v24 = *(unsigned __int16 *)(i + 16);
            *(_DWORD *)buf = 67109120;
            *(_DWORD *)&buf[4] = v24;
            _os_log_error_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "fRequestToClientMap contains ticket Id: %d", buf, 8u);
          }
        }
        __assert_rtn("registerForService", "PRRangingManager.mm", 338, "false");
      }
      *(_QWORD *)buf = v35;
      v9 = sub_1002CFD84((uint64_t)&a1[9].__shared_weak_owners_, (unsigned __int16 *)v35, (uint64_t)&unk_100472CF8, (_WORD **)buf);
      sub_100021C24(v9 + 3, &v25);
      sub_100199C08((uint64_t)&a1[136]);
      LOBYTE(a1) = v35[0];
      v10 = v35[1];
      v11 = 0x10000;
    }
    else
    {
      v12 = (id)qword_10085F520;
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        sub_1002CADAC(__src, buf);
        sub_1003E7AE0((uint64_t *)buf, v35, v12);
      }

      shared_owners = a1[2].__shared_owners_;
      block[0] = _NSConcreteStackBlock;
      block[1] = 3321888768;
      block[2] = sub_1002CADF4;
      block[3] = &unk_100813BC0;
      block[4] = v25;
      v28 = v26;
      p_shared_owners = (unint64_t *)&v26->__shared_owners_;
      do
        v15 = __ldxr(p_shared_owners);
      while (__stxr(v15 + 1, p_shared_owners));
      memcpy(v29, __src, sizeof(v29));
      sub_10015A2F0(v30, (uint64_t)&v37);
      dispatch_async(shared_owners, block);
      if (v33 && v32 < 0)
        operator delete(__p);
      a1 = v28;
      if (v28)
      {
        v16 = (unint64_t *)&v28->__shared_owners_;
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 - 1, v16));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))a1->__on_zero_shared)(a1);
          std::__shared_weak_count::__release_weak(a1);
        }
        v11 = 0;
        LOBYTE(a1) = 0;
      }
      else
      {
        v11 = 0;
      }
      v10 = 0;
    }
    if (v40 && v39 < 0)
      operator delete(v38);
    std::recursive_mutex::unlock(p_shared_weak_owners);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
      sub_1003E7AB4();
    v11 = 0;
    LOBYTE(a1) = 0;
    v10 = 0;
  }
  v18 = v26;
  if (v26)
  {
    v19 = (unint64_t *)&v26->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  return v11 & 0x10000 | a1 | (v10 << 8);
}

void sub_1002CAD3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  std::recursive_mutex *v3;
  void *v4;
  va_list va;

  va_start(va, a3);

  if (LOBYTE(STACK[0x5F0]))
  {
    if (SLOBYTE(STACK[0x5EF]) < 0)
      operator delete((void *)STACK[0x5D8]);
  }
  std::recursive_mutex::unlock(v3);
  sub_10001AE68((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_1002CADAC@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  if (!*((_BYTE *)result + 688))
    return sub_10000BF04(a2, "");
  if (*((char *)result + 687) < 0)
    return sub_100004678(a2, (void *)result[83], result[84]);
  *(_OWORD *)a2 = *(_OWORD *)(result + 83);
  a2[2] = result[85];
  return result;
}

void sub_1002CADF4(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5[2];
  uint64_t v6;
  uint64_t v7;
  __int128 __p;
  uint64_t v9;

  v2 = (_QWORD *)(a1 + 48);
  if (*(_BYTE *)(a1 + 736))
    v3 = *(_QWORD *)(a1 + 704);
  else
    v3 = 1000;
  v4 = *(_QWORD *)(a1 + 32);
  sub_1002CADAC(v2, v5);
  v7 = v3;
  if (SHIBYTE(v6) < 0)
  {
    sub_100004678(&__p, v5[0], (unint64_t)v5[1]);
  }
  else
  {
    __p = *(_OWORD *)v5;
    v9 = v6;
  }
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v4 + 104))(v4, &v7);
  if (SHIBYTE(v9) < 0)
    operator delete((void *)__p);
  if (SHIBYTE(v6) < 0)
    operator delete(v5[0]);
}

void sub_1002CAEA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_BYTE *sub_1002CAED4(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  v4 = a2[5];
  *(_QWORD *)(a1 + 32) = a2[4];
  *(_QWORD *)(a1 + 40) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  memcpy((void *)(a1 + 48), a2 + 6, 0x290uLL);
  return sub_10015A2F0((_BYTE *)(a1 + 704), (uint64_t)(a2 + 88));
}

void sub_1002CAF3C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10001AE68(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1002CAF50(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 736) && *(char *)(a1 + 735) < 0)
    operator delete(*(void **)(a1 + 712));
  return sub_10001AE68(a1 + 32);
}

BOOL sub_1002CAF88(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  NSObject *v6;
  std::__shared_weak_count *v7;
  std::recursive_mutex *v8;
  _QWORD *v9;
  uint64_t **v10;
  unsigned int v11;
  NSObject *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  _BOOL8 v18;
  NSObject *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  unint64_t *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  NSObject *v27;
  NSObject *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  _QWORD v34[3];
  _QWORD block[5];
  std::__shared_weak_count *v36;
  _QWORD v37[5];
  std::__shared_weak_count *v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  _QWORD v41[5];
  std::__shared_weak_count *v42;
  _BYTE v43[656];
  _BYTE v44[8];
  void *v45;
  char v46;
  char v47;
  uint8_t buf[656];
  uint64_t v49;
  void *__p;
  char v51;
  char v52;

  v6 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "unregisterForService with ticket id: %d", buf, 8u);
  }
  v39 = 0;
  v40 = 0;
  v7 = (std::__shared_weak_count *)a2[1];
  if (!v7 || (v40 = std::__shared_weak_count::lock(v7)) == 0 || (v39 = *a2) == 0)
  {
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
      sub_1003E7BA8();
    v18 = 0;
    goto LABEL_36;
  }
  v8 = (std::recursive_mutex *)(a1 + 64);
  std::recursive_mutex::lock((std::recursive_mutex *)(a1 + 64));
  v9 = sub_1002CFFE4((_QWORD *)(a1 + 272), &v39);
  if (!v9)
  {
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
      sub_1003E7BD4();
    v19 = *(NSObject **)(a1 + 56);
    v37[0] = _NSConcreteStackBlock;
    v37[1] = 3321888768;
    v37[2] = sub_1002CB434;
    v37[3] = &unk_100813BF0;
    v37[4] = v39;
    v38 = v40;
    if (v40)
    {
      p_shared_owners = (unint64_t *)&v40->__shared_owners_;
      do
        v21 = __ldxr(p_shared_owners);
      while (__stxr(v21 + 1, p_shared_owners));
    }
    dispatch_async(v19, v37);
    v15 = v38;
    if (!v38)
      goto LABEL_34;
    v22 = (unint64_t *)&v38->__shared_owners_;
    do
      v17 = __ldaxr(v22);
    while (__stlxr(v17 - 1, v22));
    goto LABEL_32;
  }
  v10 = (uint64_t **)v9[5];
  if (!v10)
  {
LABEL_12:
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
      sub_1003E7C00();
    v12 = *(NSObject **)(a1 + 56);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3321888768;
    block[2] = sub_1002CB504;
    block[3] = &unk_100813BF0;
    block[4] = v39;
    v36 = v40;
    if (v40)
    {
      v13 = (unint64_t *)&v40->__shared_owners_;
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }
    dispatch_async(v12, block);
    v15 = v36;
    if (!v36)
      goto LABEL_34;
    v16 = (unint64_t *)&v36->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
LABEL_32:
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
LABEL_34:
    v18 = 0;
    goto LABEL_35;
  }
  while (1)
  {
    v11 = *((unsigned __int16 *)v10 + 13);
    if (v11 <= a3)
      break;
LABEL_11:
    v10 = (uint64_t **)*v10;
    if (!v10)
      goto LABEL_12;
  }
  if (v11 < a3)
  {
    ++v10;
    goto LABEL_11;
  }
  (*(void (**)(uint8_t *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a1 + 6456) + 48))(buf, *(_QWORD *)(a1 + 6456), a3);
  if (*(_DWORD *)&buf[648])
    sub_1002CF994();
  v18 = buf[8] != 0;
  if (!buf[8])
  {
    v27 = (id)qword_10085F520;
    if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
    {
      sub_1002CADAC(buf, v34);
      sub_1003E7C2C();
    }

    v28 = *(NSObject **)(a1 + 56);
    v41[0] = _NSConcreteStackBlock;
    v41[1] = 3321888768;
    v41[2] = sub_1002CB5D4;
    v41[3] = &unk_100813BC0;
    v41[4] = v39;
    v42 = v40;
    if (v40)
    {
      v29 = (unint64_t *)&v40->__shared_owners_;
      do
        v30 = __ldxr(v29);
      while (__stxr(v30 + 1, v29));
    }
    memcpy(v43, buf, sizeof(v43));
    sub_10015A2F0(v44, (uint64_t)&v49);
    dispatch_async(v28, v41);
    if (v47 && v46 < 0)
      operator delete(v45);
    v31 = v42;
    if (v42)
    {
      v32 = (unint64_t *)&v42->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
  }
  if (v52 && v51 < 0)
    operator delete(__p);
LABEL_35:
  std::recursive_mutex::unlock(v8);
LABEL_36:
  v23 = v40;
  if (v40)
  {
    v24 = (unint64_t *)&v40->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  return v18;
}

