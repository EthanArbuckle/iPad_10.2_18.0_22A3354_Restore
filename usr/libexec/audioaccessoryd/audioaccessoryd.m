void sub_100005BB0(uint64_t a1)
{
  void *v2;
  id v3;
  id v4;
  int v5;
  uint64_t v6;
  void *i;
  void *v8;
  void *v9;
  const char *v10;
  const char *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];

  if (*(_QWORD *)(*(_QWORD *)(a1 + 32) + 1224))
  {
    v14 = 0u;
    v15 = 0u;
    v12 = 0u;
    v13 = 0u;
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "elements"));
    v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
    if (v3)
    {
      v4 = v3;
      v5 = 0;
      v6 = *(_QWORD *)v13;
      do
      {
        for (i = 0; i != v4; i = (char *)i + 1)
        {
          if (*(_QWORD *)v13 != v6)
            objc_enumerationMutation(v2);
          v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)&v12 + 1) + 8 * (_QWORD)i), "identifier"));
          v9 = v8;
          if (v8)
            v5 |= objc_msgSend(v8, "isEqual:", CFSTR("com.apple.SharingViewService"));

        }
        v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
      }
      while (v4);
    }
    else
    {
      LOBYTE(v5) = 0;
    }

    if (*(_BYTE *)(*(_QWORD *)(a1 + 32) + 1232) != (v5 & 1))
    {
      if (dword_10020FA58 <= 30
        && (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 30)))
      {
        v10 = "yes";
        if ((v5 & 1) != 0)
          v11 = "no";
        else
          v11 = "yes";
        if ((v5 & 1) == 0)
          v10 = "no";
        LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _systemUIMonitorEnsureStarted]_block_invoke_2", 30, "System UI monitor: prox card: %s -> %s", v11, v10);
      }
      *(_BYTE *)(*(_QWORD *)(a1 + 32) + 1232) = v5 & 1;
      objc_msgSend(*(id *)(a1 + 32), "_update");
    }
  }
}

void sub_100005D84(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  uint64_t v5;
  NSObject *v6;
  id v7;
  _QWORD v8[5];
  id v9;

  v4 = a3;
  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(NSObject **)(v5 + 312);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100005BB0;
  v8[3] = &unk_1001E23E8;
  v8[4] = v5;
  v9 = v4;
  v7 = v4;
  dispatch_async(v6, v8);

}

void sub_1000060AC(uint64_t a1)
{
  uint64_t v1;
  id v3;

  *(_DWORD *)(*(_QWORD *)(a1 + 32) + 24) = *(_DWORD *)(a1 + 40);
  v1 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(v1 + 28))
  {
    _objc_msgSend((id)qword_100218BD0, "updateAudioSessionControl:");
  }
  else
  {
    v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v1 + 32), "remoteObjectProxy"));
    objc_msgSend(v3, "audioSessionControlUpdate:", *(_QWORD *)(a1 + 32));

  }
}

void sub_1000062D8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000062EC(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  _OWORD v6[2];

  if (*(_BYTE *)(*(_QWORD *)(a1 + 32) + 28))
  {
    if (dword_10020F510 <= 90
      && (dword_10020F510 != -1 || _LogCategory_Initialize(&dword_10020F510, 90)))
    {
      LogPrintF(&dword_10020F510, "-[AAAudioSessionControl setMuteAction:auditToken:bundleIdentifier:]_block_invoke", 90, "### setMuteAction failed: called internally from daemon");
    }
  }
  else
  {
    if (dword_10020F510 <= 30
      && (dword_10020F510 != -1 || _LogCategory_Initialize(&dword_10020F510, 30)))
    {
      LogPrintF(&dword_10020F510, "-[AAAudioSessionControl setMuteAction:auditToken:bundleIdentifier:]_block_invoke", 30, "Mute Control: starting xpc");
    }
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "remoteObjectProxy"));
    v3 = *(unsigned int *)(a1 + 48);
    v4 = *(_QWORD *)(a1 + 40);
    v5 = *(_OWORD *)(a1 + 68);
    v6[0] = *(_OWORD *)(a1 + 52);
    v6[1] = v5;
    objc_msgSend(v2, "setMuteAction:auditToken:bundleIdentifier:", v3, v6, v4);

  }
}

void sub_100006474(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  void *v7;
  int v8;
  id v9;

  v2 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(v2 + 8))
  {
    v3 = NSErrorF(NSOSStatusErrorDomain, 4294960575, "Activate already called");
    v4 = objc_claimAutoreleasedReturnValue(v3);
    v9 = (id)v4;
    if (dword_10020F510 <= 90)
    {
      if (dword_10020F510 != -1 || (v8 = _LogCategory_Initialize(&dword_10020F510, 90), v4 = (uint64_t)v9, v8))
        LogPrintF(&dword_10020F510, "-[AAAudioSessionControl activateWithCompletion:]_block_invoke", 90, "### Activate failed: %{error}", v4);
    }
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

  }
  else
  {
    *(_BYTE *)(v2 + 8) = 1;
    v5 = objc_retainBlock(*(id *)(a1 + 40));
    v6 = *(_QWORD *)(a1 + 32);
    v7 = *(void **)(v6 + 16);
    *(_QWORD *)(v6 + 16) = v5;

    objc_msgSend(*(id *)(a1 + 32), "_activate:", 0);
  }
}

void sub_100006750(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  int v5;
  void (**v6)(id, _QWORD);
  uint64_t v7;
  void *v8;
  id v9;

  v3 = a2;
  v9 = v3;
  if (v3)
  {
    v4 = v3;
    if (dword_10020F510 <= 90)
    {
      if (dword_10020F510 != -1 || (v5 = _LogCategory_Initialize(&dword_10020F510, 90), v4 = v9, v5))
      {
        LogPrintF(&dword_10020F510, "-[AAAudioSessionControl _activate:]_block_invoke", 90, "### Activate failed: %{error}", v4);
        v4 = v9;
      }
    }
    objc_msgSend(*(id *)(a1 + 32), "_reportError:", v4);
  }
  else
  {
    if (*(_BYTE *)(a1 + 40))
    {
      if (dword_10020F510 <= 30
        && (dword_10020F510 != -1 || _LogCategory_Initialize(&dword_10020F510, 30)))
      {
        LogPrintF(&dword_10020F510, "-[AAAudioSessionControl _activate:]_block_invoke", 30, "Re-activated: %@\n", *(_QWORD *)(a1 + 32));
      }
    }
    else if (dword_10020F510 <= 30
           && (dword_10020F510 != -1 || _LogCategory_Initialize(&dword_10020F510, 30)))
    {
      LogPrintF(&dword_10020F510, "-[AAAudioSessionControl _activate:]_block_invoke", 30, "Activated: %@\n", *(_QWORD *)(a1 + 32));
    }
    v6 = (void (**)(id, _QWORD))objc_retainBlock(*(id *)(*(_QWORD *)(a1 + 32) + 16));
    v7 = *(_QWORD *)(a1 + 32);
    v8 = *(void **)(v7 + 16);
    *(_QWORD *)(v7 + 16) = 0;

    if (v6)
      v6[2](v6, 0);

  }
}

void sub_1000069A4(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  NSObject *v5;
  id v6;
  _QWORD v7[4];
  id v8;
  id v9;

  v3 = a2;
  v4 = *(void **)(a1 + 40);
  v5 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 48);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100006A34;
  v7[3] = &unk_1001E2048;
  v8 = v3;
  v9 = v4;
  v6 = v3;
  dispatch_async(v5, v7);

}

uint64_t sub_100006A34(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD))(result + 16))(result, *(_QWORD *)(a1 + 32));
  return result;
}

void sub_100006C3C(uint64_t a1, void *a2)
{
  const char *v3;
  uint64_t v4;
  id v5;

  v5 = a2;
  if (*(_BYTE *)(a1 + 40))
  {
    if (dword_10020F510 <= 30
      && (dword_10020F510 != -1 || _LogCategory_Initialize(&dword_10020F510, 30)))
    {
      v3 = "Re-activate XPC error: %{error}";
      v4 = 30;
LABEL_8:
      LogPrintF(&dword_10020F510, "-[AAAudioSessionControl _activateXPC:reactivate:]_block_invoke", v4, v3);
    }
  }
  else if (dword_10020F510 <= 90
         && (dword_10020F510 != -1 || _LogCategory_Initialize(&dword_10020F510, 90)))
  {
    v3 = "### Activate XPC error: %{error}";
    v4 = 90;
    goto LABEL_8;
  }
  (*(void (**)(_QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));

}

uint64_t sub_100006D30(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

id sub_100006EA0(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_interrupted");
}

id sub_100006EA8(uint64_t a1)
{
  uint64_t v2;
  void *v3;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(void **)(v2 + 32);
  *(_QWORD *)(v2 + 32) = 0;

  return objc_msgSend(*(id *)(a1 + 32), "_invalidated");
}

void sub_100007004(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void (**v8)(id, void *);

  v1 = *(_QWORD *)(a1 + 32);
  if (!*(_BYTE *)(v1 + 29))
  {
    *(_BYTE *)(v1 + 29) = 1;
    if (!*(_BYTE *)(*(_QWORD *)(a1 + 32) + 30)
      && dword_10020F510 <= 30
      && (dword_10020F510 != -1 || _LogCategory_Initialize(&dword_10020F510, 30)))
    {
      LogPrintF(&dword_10020F510, "-[AAAudioSessionControl invalidate]_block_invoke", 30, "Invalidating");
    }
    v3 = *(_QWORD *)(a1 + 32);
    if (*(_BYTE *)(v3 + 28))
    {
      objc_msgSend((id)v3, "_invalidateDirect");
      v3 = *(_QWORD *)(a1 + 32);
    }
    if (*(_QWORD *)(v3 + 32))
    {
      objc_msgSend(*(id *)(v3 + 32), "invalidate");
      v3 = *(_QWORD *)(a1 + 32);
    }
    v8 = (void (**)(id, void *))objc_retainBlock(*(id *)(v3 + 16));
    v4 = *(_QWORD *)(a1 + 32);
    v5 = *(void **)(v4 + 16);
    *(_QWORD *)(v4 + 16) = 0;

    if (v8)
    {
      v6 = BTErrorF(4294896148, "Invalidate called");
      v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
      v8[2](v8, v7);

    }
    objc_msgSend(*(id *)(a1 + 32), "_invalidated");

  }
}

void sub_100007190(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  _QWORD block[5];

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(NSObject **)(v1 + 48);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000071E8;
  block[3] = &unk_1001E20E8;
  block[4] = v1;
  dispatch_async(v2, block);
}

id sub_1000071E8(uint64_t a1)
{
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 28) = 0;
  return objc_msgSend(*(id *)(a1 + 32), "_invalidated");
}

uint64_t sub_1000074F8()
{
  unsigned int v0;
  uint64_t result;

  if (qword_100212550 != -1)
    dispatch_once(&qword_100212550, &stru_1001E21E8);
  do
  {
    v0 = __ldaxr((unsigned int *)&unk_100212558);
    result = v0 + 1;
  }
  while (__stlxr(result, (unsigned int *)&unk_100212558));
  return result;
}

void sub_100007548(id a1)
{
  RandomBytes(&unk_100212558, 4);
  unk_100212558 = (unsigned __int16)word_10021255A << 16;
}

id sub_1000076D0(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_activate");
}

id sub_100007924(uint64_t a1, uint64_t a2)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_activateXPCCompleted:", a2);
}

BOOL sub_100007AFC(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  id v5;
  void *v6;

  v4 = a3;
  v5 = objc_retainBlock(*(id *)(*(_QWORD *)(a1 + 32) + 56));
  v6 = v5;
  if (v5)
    (*((void (**)(id, id))v5 + 2))(v5, v4);

  return v6 != 0;
}

void sub_100007C34(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_100007C48(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 32);
  result = *(_QWORD **)(a1 + 40);
  if (v3 == result[4])
    return _objc_msgSend(result, "xpcReceivedMessage:", a2);
  return result;
}

_QWORD *sub_100007D6C(_QWORD *result)
{
  uint64_t v1;
  _QWORD *v2;
  id v3;
  _xpc_connection_s *v4;
  _xpc_connection_s *v5;

  v1 = result[4];
  if (!*(_BYTE *)(v1 + 24))
  {
    v2 = result;
    *(_BYTE *)(v1 + 24) = 1;
    if (dword_10020F700 <= 30
      && (dword_10020F700 != -1 || _LogCategory_Initialize(&dword_10020F700, 30)))
    {
      LogPrintF(&dword_10020F700, "-[AAController invalidate]_block_invoke", 30, "Invalidate CID 0x%X", *(_DWORD *)(v2[4] + 40));
    }
    v3 = (id)v2[4];
    objc_sync_enter(v3);
    v4 = (_xpc_connection_s *)*(id *)(v2[4] + 32);
    v5 = v4;
    if (v4)
      xpc_connection_cancel(v4);

    objc_sync_exit(v3);
    return objc_msgSend((id)v2[4], "_invalidated");
  }
  return result;
}

void sub_100007E5C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_100008074(uint64_t a1)
{
  if (dword_10020F700 <= 30 && (dword_10020F700 != -1 || _LogCategory_Initialize(&dword_10020F700, 30)))
    LogPrintF(&dword_10020F700, "-[AAController sendConversationDetectMessage:destinationIdentifier:completionHandler:]_block_invoke", 30, "sendConversationDetect message to destination %@", *(_QWORD *)(a1 + 32));
  return objc_msgSend(*(id *)(a1 + 40), "_sendAccessoryEventMessage:eventType:destinationIdentifier:completionHandler:", *(_QWORD *)(a1 + 48), 2, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 56));
}

id sub_1000081C4(uint64_t a1)
{
  if (dword_10020F700 <= 30 && (dword_10020F700 != -1 || _LogCategory_Initialize(&dword_10020F700, 30)))
    LogPrintF(&dword_10020F700, "-[AAController sendMultimodalContextMessage:destinationIdentifier:completionHandler:]_block_invoke", 30, "sendMultimodalContextMessage message to destination %@", *(_QWORD *)(a1 + 32));
  return objc_msgSend(*(id *)(a1 + 40), "_sendAccessoryEventMessage:eventType:destinationIdentifier:completionHandler:", *(_QWORD *)(a1 + 48), 4, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 56));
}

id sub_100008314(uint64_t a1)
{
  if (dword_10020F700 <= 30 && (dword_10020F700 != -1 || _LogCategory_Initialize(&dword_10020F700, 30)))
    LogPrintF(&dword_10020F700, "-[AAController sendPMEConfigData:destinationIdentifier:completionHandler:]_block_invoke", 30, "sendPMEConfigData to destination %@", *(_QWORD *)(a1 + 32));
  return objc_msgSend(*(id *)(a1 + 40), "_sendAccessoryEventMessage:eventType:destinationIdentifier:completionHandler:", *(_QWORD *)(a1 + 48), 5, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 56));
}

id sub_100008464(uint64_t a1)
{
  if (dword_10020F700 <= 30 && (dword_10020F700 != -1 || _LogCategory_Initialize(&dword_10020F700, 30)))
    LogPrintF(&dword_10020F700, "-[AAController sendDeviceConfig:destinationIdentifier:completionHandler:]_block_invoke", 30, "sendDeviceConfig message to destination %@", *(_QWORD *)(a1 + 32));
  return _objc_msgSend(*(id *)(a1 + 40), "_sendDeviceConfig:destinationIdentifier:completionHandler:", *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 56));
}

void sub_100008590(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(CFSTR("Send getTipiTable message"), "dataUsingEncoding:", 4));
  if (dword_10020F700 <= 30 && (dword_10020F700 != -1 || _LogCategory_Initialize(&dword_10020F700, 30)))
    LogPrintF(&dword_10020F700, "-[AAController sendGetTipiTableMessageToDestinationIdentifier:completionHandler:]_block_invoke", 30, "Send GetTipiTable message to destination %@", *(_QWORD *)(a1 + 32));
  objc_msgSend(*(id *)(a1 + 40), "_sendAccessoryEventMessage:eventType:destinationIdentifier:completionHandler:", v2, 6, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 48));

}

void sub_100008990(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  id v4;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = CUXPCDecodeNSErrorIfNeeded(a2);
  v4 = (id)objc_claimAutoreleasedReturnValue(v3);
  (*(void (**)(uint64_t, id))(v2 + 16))(v2, v4);

}

void sub_100008C60(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  id v4;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = CUXPCDecodeNSErrorIfNeeded(a2);
  v4 = (id)objc_claimAutoreleasedReturnValue(v3);
  (*(void (**)(uint64_t, id))(v2 + 16))(v2, v4);

}

void sub_1000093F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  uint64_t v12;
  va_list va;

  va_start(va, a12);
  (*(void (**)(uint64_t))(v12 + 16))(v12);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100009430(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_100009440(uint64_t a1)
{

}

uint64_t sub_100009448(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 40);
  if (v1 && dword_10020F700 <= 90)
  {
    if (dword_10020F700 != -1)
      return LogPrintF(&dword_10020F700, "-[AAController _xpcReceivedAccessoryEvent:]_block_invoke", 90, "### XPC receive accessory event failed: %@", v1);
    v2 = result;
    result = _LogCategory_Initialize(&dword_10020F700, 90);
    if ((_DWORD)result)
    {
      v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 32) + 8) + 40);
      return LogPrintF(&dword_10020F700, "-[AAController _xpcReceivedAccessoryEvent:]_block_invoke", 90, "### XPC receive accessory event failed: %@", v1);
    }
  }
  return result;
}

void sub_100009640(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100009678(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 40);
  if (v1 && dword_10020F700 <= 90)
  {
    if (dword_10020F700 != -1)
      return LogPrintF(&dword_10020F700, "-[AAController _xpcReceivedAudioAccessoryDeviceInfoChange:]_block_invoke", 90, "### XPC accessory info change receive failed: %@", v1);
    v2 = result;
    result = _LogCategory_Initialize(&dword_10020F700, 90);
    if ((_DWORD)result)
    {
      v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 32) + 8) + 40);
      return LogPrintF(&dword_10020F700, "-[AAController _xpcReceivedAudioAccessoryDeviceInfoChange:]_block_invoke", 90, "### XPC accessory info change receive failed: %@", v1);
    }
  }
  return result;
}

void sub_1000098D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  (*(void (**)(uint64_t))(v9 + 16))(v9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10000990C(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 40);
  if (v1 && dword_10020F700 <= 90)
  {
    if (dword_10020F700 != -1)
      return LogPrintF(&dword_10020F700, "-[AAController _conversationDetectMessageReceived:fromDevice:]_block_invoke", 90, "### XPC receive CD message failed: %@", v1);
    v2 = result;
    result = _LogCategory_Initialize(&dword_10020F700, 90);
    if ((_DWORD)result)
    {
      v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 32) + 8) + 40);
      return LogPrintF(&dword_10020F700, "-[AAController _conversationDetectMessageReceived:fromDevice:]_block_invoke", 90, "### XPC receive CD message failed: %@", v1);
    }
  }
  return result;
}

void sub_100009B6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  (*(void (**)(uint64_t))(v9 + 16))(v9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100009BA0(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 40);
  if (v1 && dword_10020F700 <= 90)
  {
    if (dword_10020F700 != -1)
      return LogPrintF(&dword_10020F700, "-[AAController _multimodalContextMessageReceived:fromDevice:]_block_invoke", 90, "### XPC receive Multimodal message failed: %@", v1);
    v2 = result;
    result = _LogCategory_Initialize(&dword_10020F700, 90);
    if ((_DWORD)result)
    {
      v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 32) + 8) + 40);
      return LogPrintF(&dword_10020F700, "-[AAController _multimodalContextMessageReceived:fromDevice:]_block_invoke", 90, "### XPC receive Multimodal message failed: %@", v1);
    }
  }
  return result;
}

void sub_100009E00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  (*(void (**)(uint64_t))(v9 + 16))(v9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100009E34(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 40);
  if (v1 && dword_10020F700 <= 90)
  {
    if (dword_10020F700 != -1)
      return LogPrintF(&dword_10020F700, "-[AAController _pmeConfigDataReceived:fromDevice:]_block_invoke", 90, "### XPC receive PME config failed: %@", v1);
    v2 = result;
    result = _LogCategory_Initialize(&dword_10020F700, 90);
    if ((_DWORD)result)
    {
      v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 32) + 8) + 40);
      return LogPrintF(&dword_10020F700, "-[AAController _pmeConfigDataReceived:fromDevice:]_block_invoke", 90, "### XPC receive PME config failed: %@", v1);
    }
  }
  return result;
}

void sub_10000A058(id a1)
{
  AAConversationDetectSessionManager *v1;
  void *v2;

  v1 = objc_alloc_init(AAConversationDetectSessionManager);
  v2 = (void *)qword_100212560;
  qword_100212560 = (uint64_t)v1;

}

id sub_10000A484(uint64_t a1)
{
  if (dword_10020F770 <= 30 && (dword_10020F770 != -1 || _LogCategory_Initialize(&dword_10020F770, 30)))
    LogPrintF(&dword_10020F770, "-[AAConversationDetectSessionManager activate]_block_invoke", 30, "Prefs changed");
  return objc_msgSend(*(id *)(a1 + 32), "_prefsChanged");
}

_QWORD *sub_10000A4F4(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 32);
  result = *(_QWORD **)(a1 + 40);
  if (v3 == result[13])
    return _objc_msgSend(result, "_deviceFound:", a2);
  return result;
}

_QWORD *sub_10000A510(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 32);
  result = *(_QWORD **)(a1 + 40);
  if (v3 == result[13])
    return _objc_msgSend(result, "_deviceLost:", a2);
  return result;
}

uint64_t sub_10000A52C(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(result + 32);
  if (v1 == *(_QWORD *)(*(_QWORD *)(result + 40) + 104) && dword_10020F770 <= 30)
  {
    if (dword_10020F770 != -1)
      return LogPrintF(&dword_10020F770, "-[AAConversationDetectSessionManager activate]_block_invoke_4", 30, "%@ Interrupted", v1);
    v2 = result;
    result = _LogCategory_Initialize(&dword_10020F770, 30);
    if ((_DWORD)result)
    {
      v1 = *(_QWORD *)(v2 + 32);
      return LogPrintF(&dword_10020F770, "-[AAConversationDetectSessionManager activate]_block_invoke_4", 30, "%@ Interrupted", v1);
    }
  }
  return result;
}

uint64_t sub_10000A5BC(uint64_t result)
{
  uint64_t v1;

  if (dword_10020F770 <= 30)
  {
    v1 = result;
    if (dword_10020F770 != -1)
      return LogPrintF(&dword_10020F770, "-[AAConversationDetectSessionManager activate]_block_invoke_5", 30, "%@ Invalidated", *(_QWORD *)(v1 + 32));
    result = _LogCategory_Initialize(&dword_10020F770, 30);
    if ((_DWORD)result)
      return LogPrintF(&dword_10020F770, "-[AAConversationDetectSessionManager activate]_block_invoke_5", 30, "%@ Invalidated", *(_QWORD *)(v1 + 32));
  }
  return result;
}

void sub_10000A638(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  void *v9;
  int v10;
  id v11;

  v3 = a2;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(_QWORD *)(a1 + 40);
  if (v5 == *(_QWORD *)(v6 + 104))
  {
    if (v3)
    {
      v11 = v3;
      if (dword_10020F770 <= 90)
      {
        if (dword_10020F770 == -1)
        {
          v7 = _LogCategory_Initialize(&dword_10020F770, 90);
          v6 = *(_QWORD *)(a1 + 40);
          if (!v7)
            goto LABEL_10;
          v5 = *(_QWORD *)(v6 + 104);
          v3 = v11;
        }
        LogPrintF(&dword_10020F770, "-[AAConversationDetectSessionManager activate]_block_invoke_6", 90, "%@ ### Activate failed: %@", v5, v3);
        v6 = *(_QWORD *)(a1 + 40);
      }
LABEL_10:
      objc_msgSend(*(id *)(v6 + 104), "invalidate");
      v8 = *(_QWORD *)(a1 + 40);
      v9 = *(void **)(v8 + 104);
      *(_QWORD *)(v8 + 104) = 0;

LABEL_11:
      v4 = v11;
      goto LABEL_12;
    }
    if (dword_10020F770 <= 30)
    {
      v11 = 0;
      if (dword_10020F770 == -1)
      {
        v10 = _LogCategory_Initialize(&dword_10020F770, 30);
        v4 = 0;
        if (!v10)
          goto LABEL_12;
        v5 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 104);
      }
      LogPrintF(&dword_10020F770, "-[AAConversationDetectSessionManager activate]_block_invoke_6", 30, "%@ Activated", v5);
      goto LABEL_11;
    }
  }
LABEL_12:

}

void sub_10000A8B8(id a1)
{
  if (dword_10020F770 <= 30 && (dword_10020F770 != -1 || _LogCategory_Initialize(&dword_10020F770, 30)))
    LogPrintF(&dword_10020F770, "-[AAConversationDetectSessionManager _aaControllerEnsureStarted]_block_invoke", 30, "AAController Invalidated");
}

_QWORD *sub_10000A918(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;
  uint64_t v4;

  v4 = *(_QWORD *)(a1 + 32);
  result = *(_QWORD **)(a1 + 40);
  if (v4 == result[1])
    return objc_msgSend(result, "_conversationDetectMessageReceived:fromDeviceIdentifier:", a3, a2);
  return result;
}

void sub_10000A934(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  int v7;
  id v8;

  v3 = a2;
  v4 = v3;
  if (*(_QWORD *)(a1 + 32) == *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8))
  {
    if (v3)
    {
      v8 = v3;
      if (dword_10020F770 <= 90
        && (dword_10020F770 != -1 || _LogCategory_Initialize(&dword_10020F770, 90)))
      {
        LogPrintF(&dword_10020F770, "-[AAConversationDetectSessionManager _aaControllerEnsureStarted]_block_invoke_3", 90, "### Activate AAController failed: %{error}\n", v8);
      }
      objc_msgSend(*(id *)(a1 + 32), "invalidate");
      v5 = *(_QWORD *)(a1 + 40);
      v6 = *(void **)(v5 + 8);
      *(_QWORD *)(v5 + 8) = 0;

      goto LABEL_11;
    }
    if (dword_10020F770 <= 30)
    {
      v8 = 0;
      if (dword_10020F770 != -1 || (v7 = _LogCategory_Initialize(&dword_10020F770, 30), v4 = 0, v7))
      {
        LogPrintF(&dword_10020F770, "-[AAConversationDetectSessionManager _aaControllerEnsureStarted]_block_invoke_3", 30, "AAController activated");
LABEL_11:
        v4 = v8;
      }
    }
  }

}

id sub_10000AAD4(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_activateCDSession");
}

void sub_10000AFBC(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  int v6;
  void *v7;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "userInfo"));
  v3 = v2;
  if (v2)
  {
    v7 = v2;
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectForKeyedSubscript:", CFSTR("AAConversationDetectKeyIdentifier")));
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("AAConversationDetectKeyData")));
    objc_msgSend(*(id *)(a1 + 40), "_conversationDetectMessageReceived:fromDeviceIdentifier:", v5, v4);

LABEL_3:
    v3 = v7;
    goto LABEL_8;
  }
  if (dword_10020F770 <= 90)
  {
    v7 = 0;
    if (dword_10020F770 != -1 || (v6 = _LogCategory_Initialize(&dword_10020F770, 90), v3 = 0, v6))
    {
      LogPrintF(&dword_10020F770, "-[AAConversationDetectSessionManager _cdMsgNotificationReceivedHandler:]_block_invoke", 90, "Conversation Detect: no data received in cdMessageReceivedHandler");
      goto LABEL_3;
    }
  }
LABEL_8:

}

id sub_10000B1C0(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_invalidateCDSession");
}

id sub_10000B3CC(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_invalidate");
}

void sub_10000BBA4(_QWORD *a1, void *a2)
{
  id v3;
  int v4;
  int v5;
  uint64_t v6;
  id v7;

  v3 = a2;
  v7 = v3;
  if (v3)
  {
    if (dword_10020F770 <= 90)
    {
      if (dword_10020F770 != -1 || (v4 = _LogCategory_Initialize(&dword_10020F770, 90), v3 = v7, v4))
      {
        LogPrintF(&dword_10020F770, "-[AAConversationDetectSessionManager _sendConversationDetectMessage:destinationIdentifier:completion:]_block_invoke", 90, "Send CD Message <%@> failed with error: %@\n", a1[4], v3);
LABEL_8:
        v3 = v7;
      }
    }
  }
  else if (dword_10020F770 <= 30)
  {
    if (dword_10020F770 != -1 || (v5 = _LogCategory_Initialize(&dword_10020F770, 30), v3 = 0, v5))
    {
      LogPrintF(&dword_10020F770, "-[AAConversationDetectSessionManager _sendConversationDetectMessage:destinationIdentifier:completion:]_block_invoke", 30, "CD Message sent: destination %@, data <%@>\n", a1[5], a1[4]);
      goto LABEL_8;
    }
  }
  v6 = a1[6];
  if (v6)
  {
    (*(void (**)(uint64_t, id))(v6 + 16))(v6, v7);
    v3 = v7;
  }

}

id sub_10000BD00(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_updateConversationDetectSignal:", *(unsigned int *)(a1 + 40));
}

id sub_10000BDAC(uint64_t a1)
{
  float v2;
  float v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  const char *v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  id v44;
  const char *v45;
  id v46;
  id v47;
  id v48;
  unint64_t v49;
  uint64_t v50;
  id v51;
  const char *v52;
  id v53;
  id v54;
  id v55;
  void *v56;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  int v71;
  int v72;
  _OWORD v73[4];
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  id v78;
  id v79;
  id v80;
  id v81;
  id v82;
  id v83;
  id v84;
  id v85;
  id v86;
  id v87;
  id v88;
  id v89;
  id v90;
  id v91;
  id v92;
  id v93;
  id v94;
  id v95[2];

  v2 = *(float *)(a1 + 40);
  v3 = *(float *)(a1 + 44);
  v5 = *(unsigned int *)(a1 + 48);
  v4 = *(unsigned int *)(a1 + 52);
  v7 = *(unsigned int *)(a1 + 56);
  v6 = *(unsigned int *)(a1 + 60);
  v9 = *(unsigned int *)(a1 + 64);
  v8 = *(unsigned int *)(a1 + 68);
  v10 = *(unsigned int *)(a1 + 72);
  v11 = *(unsigned __int8 *)(a1 + 76);
  v12 = *(unsigned int *)(a1 + 77);
  v13 = *(unsigned int *)(a1 + 81);
  v14 = *(unsigned int *)(a1 + 85);
  v15 = *(unsigned int *)(a1 + 89);
  v16 = *(unsigned int *)(a1 + 93);
  v17 = *(unsigned int *)(a1 + 97);
  v18 = *(unsigned int *)(a1 + 101);
  v19 = *(unsigned int *)(a1 + 105);
  v20 = *(unsigned int *)(a1 + 109);
  v21 = *(unsigned __int8 *)(a1 + 113);
  v22 = *(__int16 *)(a1 + 114);
  v23 = *(__int16 *)(a1 + 116);
  v24 = *(unsigned __int8 *)(a1 + 122);
  v25 = *(unsigned int *)(a1 + 118);
  v26 = *(_OWORD *)(a1 + 139);
  v74 = *(_OWORD *)(a1 + 123);
  v75 = v26;
  v27 = *(_OWORD *)(a1 + 171);
  v76 = *(_OWORD *)(a1 + 155);
  v77 = v27;
  if (dword_10020F770 <= 30)
  {
    v60 = v11;
    v61 = v13;
    v62 = v12;
    v63 = v15;
    v64 = v14;
    v65 = v17;
    v66 = v16;
    v67 = v18;
    v68 = v19;
    v69 = v20;
    v70 = v21;
    v71 = v23;
    v72 = v22;
    if (dword_10020F770 != -1 || _LogCategory_Initialize(&dword_10020F770, 30))
    {
      *(_QWORD *)&v73[0] = 0;
      NSAppendPrintF(v73, "\n-- CD Decision Logic Tunings Begin --\n");
      v59 = v24;
      v28 = *(id *)&v73[0];
      v95[0] = v28;
      NSAppendPrintF(v95, "    OVAD threshold: %0.2f, TVAD threshold: %0.2f\n", v2, v3);
      v58 = v25;
      v29 = v95[0];

      v94 = v29;
      NSAppendPrintF(&v94, "    Short conversation quiesce duration: %lu ms\n", v5);
      v30 = v94;

      v93 = v30;
      NSAppendPrintF(&v93, "    Medium conversation quiesce duration: %lu ms\n", v4);
      v31 = v93;

      v92 = v31;
      NSAppendPrintF(&v92, "    Long conversation quiesce duration: %lu ms\n", v7);
      v32 = v92;

      v91 = v32;
      NSAppendPrintF(&v91, "    Short conversation ending to default duration: %lu ms\n", v6);
      v33 = v91;

      v90 = v33;
      NSAppendPrintF(&v90, "    Medium conversation ending to default duration: %lu ms\n", v9);
      v34 = v90;

      v89 = v34;
      NSAppendPrintF(&v89, "    Long conversation ending to default duration: %lu ms\n", v8);
      v35 = v89;

      v88 = v35;
      NSAppendPrintF(&v88, "    Conversation start to active duration: %lu ms\n", v10);
      v36 = v88;

      v87 = v36;
      if (v60)
        v37 = "yes";
      else
        v37 = "no";
      NSAppendPrintF(&v87, "    Is AT enabled: %s\n", v37);
      v38 = v87;

      v86 = v38;
      NSAppendPrintF(&v86, "    Short conversation quiesce duration Min: %lu, Max: %lu ms\n", v62, v61);
      v39 = v86;

      v85 = v39;
      NSAppendPrintF(&v85, "    Medium conversation quiesce duration Min: %lu, Max: %lu ms\n", v64, v63);
      v40 = v85;

      v84 = v40;
      NSAppendPrintF(&v84, "    Long conversation quiesce duration Min: %lu, Max: %lu ms\n", v66, v65);
      v41 = v84;

      v83 = v41;
      NSAppendPrintF(&v83, "    Max AT false transitions per minute - short conversation: %lu\n", v67);
      v42 = v83;

      v82 = v42;
      NSAppendPrintF(&v82, "    Max AT false transitions per minute - medium conversation: %lu\n", v68);
      v43 = v82;

      v81 = v43;
      NSAppendPrintF(&v81, "    Max AT false transitions per minute - long conversation: %lu\n", v69);
      v44 = v81;

      v80 = v44;
      if (v70)
        v45 = "yes";
      else
        v45 = "no";
      NSAppendPrintF(&v80, "    Is MTA enabled: %s\n", v45);
      v46 = v80;

      v79 = v46;
      NSAppendPrintF(&v79, "    Recommended MTA aperture, begin: %d degree, end: %d degree\n", v72, v71);
      v47 = v79;

      v78 = v47;
      NSAppendPrintF(&v78, "-- CD Decision Logic Tunings End --\n");
      v48 = v78;

      v25 = v58;
      LogPrintF(&dword_10020F770, "-[AAConversationDetectSessionManager setCDTunings:]_block_invoke", 30, "%@", v48);

      v24 = v59;
    }
    if (dword_10020F770 <= 30
      && (dword_10020F770 != -1 || _LogCategory_Initialize(&dword_10020F770, 30)))
    {
      v49 = v25 | (v24 << 32);
      v50 = (v49 >> 8);
      *(_QWORD *)&v73[0] = 0;
      NSAppendPrintF(v73, "\n-- CD Manual End-pointing Tunings Begin --\n");
      v51 = *(id *)&v73[0];
      v95[0] = v51;
      v52 = "yes";
      if ((v49 & 1) == 0)
        v52 = "no";
      NSAppendPrintF(v95, "    Is MTA enabled: %s\n", v52);
      v53 = v95[0];

      v94 = v53;
      NSAppendPrintF(&v94, "    Manual end-pointing tuning threshold: %lu\n", v50);
      v54 = v94;

      v93 = v54;
      NSAppendPrintF(&v93, "-- CD Manual End-pointing Tunings End --\n");
      v55 = v93;

      LogPrintF(&dword_10020F770, "-[AAConversationDetectSessionManager setCDTunings:]_block_invoke", 30, "%@", v55);
    }
  }
  v56 = *(void **)(a1 + 32);
  v73[0] = v74;
  v73[1] = v75;
  v73[2] = v76;
  v73[3] = v77;
  return objc_msgSend(v56, "_setCDSignalAudioTunings:", v73, v11);
}

void sub_10000CA00(uint64_t a1, uint64_t a2, void *a3)
{
  void *v3;
  uint64_t v4;
  id v5;

  v3 = *(void **)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a3, "identifier"));
  objc_msgSend(v3, "_sendConversationDetectMessage:destinationIdentifier:completion:", v4, v5, 0);

}

void sub_10000CB58(uint64_t a1, uint64_t a2, void *a3)
{
  void *v3;
  uint64_t v4;
  id v5;

  v3 = *(void **)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a3, "identifier"));
  objc_msgSend(v3, "_sendConversationDetectMessage:destinationIdentifier:completion:", v4, v5, 0);

}

void sub_10000CCB0(uint64_t a1, uint64_t a2, void *a3)
{
  void *v3;
  uint64_t v4;
  id v5;

  v3 = *(void **)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a3, "identifier"));
  objc_msgSend(v3, "_sendConversationDetectMessage:destinationIdentifier:completion:", v4, v5, 0);

}

void sub_10000D2CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_10000DBC8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10000E37C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  uint64_t v14;
  va_list va;

  va_start(va, a14);
  (*(void (**)(uint64_t))(v14 + 16))(v14);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10000E3DC(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_10000E3EC(uint64_t a1)
{

}

_QWORD *sub_10000E3F4(_QWORD *result)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = *(_QWORD *)(*(_QWORD *)(result[5] + 8) + 40);
  if (v1)
  {
    v2 = result;
    if (dword_10020F770 <= 90)
    {
      if (dword_10020F770 == -1)
      {
        if (!_LogCategory_Initialize(&dword_10020F770, 90))
          goto LABEL_7;
        v1 = *(_QWORD *)(*(_QWORD *)(v2[5] + 8) + 40);
      }
      LogPrintF(&dword_10020F770, "-[AAConversationDetectSessionManager _requestSiriAnnounce]_block_invoke", 90, "### Siri Announce request failed: %{error}", v1);
    }
LABEL_7:
    *(_BYTE *)(v2[4] + 177) = 0;
    objc_msgSend((id)v2[4], "_audioSessionEnsureStopped");
    return objc_msgSend((id)v2[4], "_cdSessionEnsureDeactivated:", 0);
  }
  return result;
}

id sub_10000E4B4(uint64_t a1, int a2)
{
  const CFBooleanRef *v4;
  const char *v5;

  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 177) = 0;
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 209) = a2;
  if (*(_BYTE *)(*(_QWORD *)(a1 + 32) + 209))
    v4 = &kCFBooleanTrue;
  else
    v4 = &kCFBooleanFalse;
  CFPrefs_SetValue(CFSTR("com.apple.AudioAccessory"), CFSTR("didSiriAnnounceFirstCATrigger"), *v4);
  if (dword_10020F770 <= 30 && (dword_10020F770 != -1 || _LogCategory_Initialize(&dword_10020F770, 30)))
  {
    v5 = "no";
    if (a2)
      v5 = "yes";
    LogPrintF(&dword_10020F770, "-[AAConversationDetectSessionManager _requestSiriAnnounce]_block_invoke_2", 30, "Siri did announce notification: %s", v5);
  }
  objc_msgSend(*(id *)(a1 + 32), "_audioSessionEnsureStopped");
  return objc_msgSend(*(id *)(a1 + 32), "_cdSessionEnsureDeactivated:", 0);
}

void sub_10000E648(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  const char *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  id obj;
  id v13;
  id v14;

  obj = *(id *)(a1 + 32);
  objc_sync_enter(obj);
  v2 = *(_QWORD *)(a1 + 32);
  if (!*(_BYTE *)(v2 + 17))
  {
    if (dword_10020F770 <= 30
      && (dword_10020F770 != -1 || _LogCategory_Initialize(&dword_10020F770, 30)))
    {
      LogPrintF(&dword_10020F770, "-[AAConversationDetectSessionManager _asyncAudioSessionDuckWithLevel:completion:]_block_invoke", 30, "Queued Ramp: abandon, audio session terminated");
    }
    goto LABEL_25;
  }
  if (!*(_BYTE *)(v2 + 224))
  {
    if (dword_10020F770 <= 30)
    {
      if (dword_10020F770 != -1)
      {
LABEL_11:
        v3 = *(int *)(v2 + 20);
        if (v3 > 0xB)
          v4 = "?";
        else
          v4 = (&off_1001E2660)[v3];
        LogPrintF(&dword_10020F770, "-[AAConversationDetectSessionManager _asyncAudioSessionDuckWithLevel:completion:]_block_invoke", 30, "Queued Ramp: abandon, current CD signal %s", v4);
        goto LABEL_25;
      }
      if (_LogCategory_Initialize(&dword_10020F770, 30))
      {
        v2 = *(_QWORD *)(a1 + 32);
        goto LABEL_11;
      }
    }
LABEL_25:
    objc_sync_exit(obj);

    return;
  }
  objc_sync_exit(obj);

  if (dword_10020F770 <= 10 && (dword_10020F770 != -1 || _LogCategory_Initialize(&dword_10020F770, 10)))
    LogPrintF(&dword_10020F770, "-[AAConversationDetectSessionManager _asyncAudioSessionDuckWithLevel:completion:]_block_invoke", 10, "Queued Ramp: unduck level: %@, ramp duration %f secs", *(_QWORD *)(a1 + 40), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 200));
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[AVAudioSession sharedInstance](AVAudioSession, "sharedInstance"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(*(_QWORD *)(a1 + 32) + 200)));
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(*(_QWORD *)(a1 + 32) + 200)));
  v14 = 0;
  objc_msgSend(v5, "setDuckingFadeOutDuration:fadeInDuration:error:", v6, v7, &v14);
  v8 = v14;

  if (!v8)
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[AVAudioSession sharedInstance](AVAudioSession, "sharedInstance"));
    v10 = *(_QWORD *)(a1 + 40);
    v13 = 0;
    objc_msgSend(v9, "setDuckToLevelScalar:unduckToLevelScalar:error:", 0, v10, &v13);
    v8 = v13;

  }
  v11 = *(_QWORD *)(a1 + 48);
  if (v11)
    (*(void (**)(uint64_t, id))(v11 + 16))(v11, v8);

}

void sub_10000E8CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

id sub_10000E938(uint64_t a1)
{
  if (dword_10020F770 <= 30 && (dword_10020F770 != -1 || _LogCategory_Initialize(&dword_10020F770, 30)))
    LogPrintF(&dword_10020F770, "-[AAConversationDetectSessionManager _audioSessionReset]_block_invoke", 30, "received AVAudioSessionMediaServicesWereResetNotification");
  objc_msgSend(*(id *)(a1 + 32), "_deregisterFromAVAudioSessionSpeechDetectionStyleChanges");
  return objc_msgSend(*(id *)(a1 + 32), "_registerForAVAudioSessionSpeechDetectionStyleChanges");
}

void sub_10000EE30(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

id sub_10000EE70(uint64_t a1, uint64_t a2)
{
  id result;

  result = objc_retainBlock(*(id *)(a2 + 40));
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

void sub_10000EE98(uint64_t a1)
{

}

void sub_10000EEA0(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  float v5;
  float v6;
  float v7;
  double v8;
  void *v9;
  void *v10;
  int v11;
  id v12;

  v3 = a2;
  v4 = v3;
  if (!v3)
  {
    v5 = *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
    v12 = 0;
    objc_msgSend(*(id *)(a1 + 32), "floatValue");
    v4 = 0;
    if (v5 >= v6)
      goto LABEL_11;
    *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8)
                                                                          + 24)
                                                               + *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8)
                                                                          + 24);
    v7 = *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
    objc_msgSend(*(id *)(a1 + 32), "floatValue");
    if (v7 > *(float *)&v8)
    {
      objc_msgSend(*(id *)(a1 + 32), "floatValue");
      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = LODWORD(v8);
    }
    v9 = *(void **)(a1 + 40);
    LODWORD(v8) = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v8));
    objc_msgSend(v9, "_asyncAudioSessionDuckWithLevel:completion:", v10, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40));

LABEL_9:
    v4 = v12;
    goto LABEL_11;
  }
  if (dword_10020F770 <= 30)
  {
    v12 = v3;
    if (dword_10020F770 != -1 || (v11 = _LogCategory_Initialize(&dword_10020F770, 30), v4 = v12, v11))
    {
      LogPrintF(&dword_10020F770, "-[AAConversationDetectSessionManager _startQueuedRampForDuration:startLevel:endLevel:]_block_invoke", 30, "Queued Ramp: failed to set duck level: %f with error: %@", *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24), v4);
      goto LABEL_9;
    }
  }
LABEL_11:

}

id sub_10000F0AC(id *a1)
{
  id result;
  void *v3;
  uint64_t v4;

  result = objc_msgSend(a1[4], "isEqualToString:", CFSTR("speechDetectionStyle"));
  if ((_DWORD)result)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "objectForKeyedSubscript:", NSKeyValueChangeNewKey));
    v4 = objc_msgSend(v3, "unsignedIntValue");

    return _objc_msgSend(a1[6], "_speechDetectionStyleChanged:", v4);
  }
  return result;
}

void sub_10000FB50(uint64_t a1, void *a2, void *a3)
{
  id v5;
  uint64_t v6;
  id v7;

  v7 = a2;
  v5 = a3;
  if (*(_QWORD *)(a1 + 32) == *(_QWORD *)(*(_QWORD *)(a1 + 40) + 184))
  {
    v6 = *(_QWORD *)(a1 + 48);
    if (v6)
      (*(void (**)(uint64_t, id, id))(v6 + 16))(v6, v7, v5);
    if (!v5)
    {
      if (dword_10020F770 <= 30
        && (dword_10020F770 != -1 || _LogCategory_Initialize(&dword_10020F770, 30)))
      {
        LogPrintF(&dword_10020F770, "-[AAConversationDetectSessionManager _setPedestrianFenceWithHandler:]_block_invoke", 30, "Re-setting pedestrian fence radius: %fm", 4.0);
      }
      objc_msgSend(*(id *)(a1 + 32), "clearFence:", CFSTR("com.apple.audioaccessoryd.cdFence"));
      objc_msgSend(*(id *)(a1 + 40), "_setPedestrianFenceWithHandler:", *(_QWORD *)(a1 + 48));
    }
  }

}

void sub_10000FDDC(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;

  v6 = a2;
  v5 = a3;
  if (v5)
  {
    if (dword_10020F770 <= 90
      && (dword_10020F770 != -1 || _LogCategory_Initialize(&dword_10020F770, 90)))
    {
      LogPrintF(&dword_10020F770, "-[AAConversationDetectSessionManager _startPedestrianFenceSession]_block_invoke", 90, "failed to set pedestrian fence with error: %@", v5);
    }
    objc_msgSend(*(id *)(a1 + 32), "_stopPedestrianFenceSession");
  }
  else
  {
    if (dword_10020F770 <= 30
      && (dword_10020F770 != -1 || _LogCategory_Initialize(&dword_10020F770, 30)))
    {
      LogPrintF(&dword_10020F770, "-[AAConversationDetectSessionManager _startPedestrianFenceSession]_block_invoke", 30, "Exited fence: %@ with radius: %f", CFSTR("com.apple.audioaccessoryd.cdFence"), 0x4010000000000000);
    }
    objc_msgSend(*(id *)(a1 + 32), "_updateAccessoriesWithMotionState:", 1);
  }

}

id sub_10001023C(uint64_t a1)
{
  id v2;
  void *v3;
  void *v4;
  id result;

  if (dword_10020F770 <= 30 && (dword_10020F770 != -1 || _LogCategory_Initialize(&dword_10020F770, 30)))
  {
    v2 = objc_msgSend(*(id *)(a1 + 32), "headGesture");
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "avgConfidence"));
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "timestamp"));
    LogPrintF(&dword_10020F770, "-[AAConversationDetectSessionManager didDetectedWithHeadGesture:]_block_invoke", 30, "HeadGesture: Type: %lu, Confidence: %@, timestamp: %@", v2, v3, v4);

  }
  result = objc_msgSend(*(id *)(a1 + 32), "headGesture");
  if (result == (id)1)
    return objc_msgSend(*(id *)(a1 + 40), "_updateAccessoriesWithMotionState:", 2);
  return result;
}

uint64_t sub_100010374(uint64_t result)
{
  uint64_t v1;
  const __CFString *v2;

  if (dword_10020F770 <= 30)
  {
    v1 = result;
    if (dword_10020F770 != -1 || (result = _LogCategory_Initialize(&dword_10020F770, 30), (_DWORD)result))
    {
      if (*(_BYTE *)(v1 + 32))
        v2 = CFSTR("IS");
      else
        v2 = CFSTR("IS NOT");
      return LogPrintF(&dword_10020F770, "-[AAConversationDetectSessionManager didStartStreamingWithIsStreaming:]_block_invoke", 30, "HeadGesture Data %@ streaming", v2);
    }
  }
  return result;
}

id sub_1000104D4(uint64_t a1)
{
  int v2;
  uint64_t v3;
  BOOL v4;
  const char *v5;
  const char *v6;
  _BYTE *v7;
  uint64_t state64;

  v2 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 228);
  state64 = 0;
  notify_get_state(v2, &state64);
  v3 = state64;
  v4 = state64 != 0;
  if (dword_10020F770 <= 30 && (dword_10020F770 != -1 || _LogCategory_Initialize(&dword_10020F770, 30)))
  {
    v5 = "yes";
    if (v3)
      v6 = "no";
    else
      v6 = "yes";
    if (!v3)
      v5 = "no";
    LogPrintF(&dword_10020F770, "-[AAConversationDetectSessionManager _registerForWirelessSplitterStateChanges]_block_invoke", 30, "Wireless splitter is running changed: %s -> %s", v6, v5);
  }
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 178) = v4;
  v7 = *(_BYTE **)(a1 + 32);
  if (v7[178])
  {
    v7[116] = 1;
    v7 = *(_BYTE **)(a1 + 32);
  }
  return objc_msgSend(v7, "_updatePauseState");
}

void sub_100010DE0(id a1)
{
  AADeviceManagerDaemon *v1;
  void *v2;

  v1 = objc_alloc_init(AADeviceManagerDaemon);
  v2 = (void *)qword_100212570;
  qword_100212570 = (uint64_t)v1;

}

void sub_100011094(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000110B4(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1000110C4(uint64_t a1)
{

}

void sub_1000110CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  id obj;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  obj = *(id *)(v3 + 40);
  NSAppendPrintF(&obj, "    %@\n", a3);
  objc_storeStrong((id *)(v3 + 40), obj);
}

id sub_100011170(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_activate");
}

id sub_1000111D0(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_invalidate");
}

id sub_100011380(uint64_t a1)
{
  if (dword_10020F840 <= 30 && (dword_10020F840 != -1 || _LogCategory_Initialize(&dword_10020F840, 30)))
    LogPrintF(&dword_10020F840, "-[AADeviceManagerDaemon _activate]_block_invoke", 30, "Prefs changed");
  return objc_msgSend(*(id *)(a1 + 32), "_prefsChanged");
}

void sub_10001153C(id a1)
{
  if (dword_10020F840 <= 30 && (dword_10020F840 != -1 || _LogCategory_Initialize(&dword_10020F840, 30)))
    LogPrintF(&dword_10020F840, "-[AADeviceManagerDaemon _aaControllerEnsureStarted]_block_invoke", 30, "AAController Invalidated");
}

id sub_10001159C(uint64_t a1, uint64_t a2)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_accessoryDeviceInfoChanged:", a2);
}

void sub_1000115A8(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  int v7;
  id v8;

  v3 = a2;
  v4 = v3;
  if (*(_QWORD *)(a1 + 32) == *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8))
  {
    if (v3)
    {
      v8 = v3;
      if (dword_10020F840 <= 90
        && (dword_10020F840 != -1 || _LogCategory_Initialize(&dword_10020F840, 90)))
      {
        LogPrintF(&dword_10020F840, "-[AADeviceManagerDaemon _aaControllerEnsureStarted]_block_invoke_3", 90, "### Activate AAController failed: %{error}\n", v8);
      }
      objc_msgSend(*(id *)(a1 + 32), "invalidate");
      v5 = *(_QWORD *)(a1 + 40);
      v6 = *(void **)(v5 + 8);
      *(_QWORD *)(v5 + 8) = 0;

      goto LABEL_11;
    }
    if (dword_10020F840 <= 30)
    {
      v8 = 0;
      if (dword_10020F840 != -1 || (v7 = _LogCategory_Initialize(&dword_10020F840, 30), v4 = 0, v7))
      {
        LogPrintF(&dword_10020F840, "-[AADeviceManagerDaemon _aaControllerEnsureStarted]_block_invoke_3", 30, "AAController activated");
LABEL_11:
        v4 = v8;
      }
    }
  }

}

void sub_1000118C0(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  int v6;
  int v7;
  uint64_t v8;
  id v9;

  v3 = a2;
  v9 = v3;
  if (v3)
  {
    if (dword_10020F840 <= 90)
    {
      if (dword_10020F840 != -1 || (v6 = _LogCategory_Initialize(&dword_10020F840, 90), v3 = v9, v6))
      {
        LogPrintF(&dword_10020F840, "-[AADeviceManagerDaemon _sendConfigOverAAController:device:completion:]_block_invoke", 90, "### sendDeviceConfig failed with error: %@\n", v3);
LABEL_8:
        v3 = v9;
      }
    }
  }
  else if (dword_10020F840 <= 30)
  {
    if (dword_10020F840 != -1 || (v7 = _LogCategory_Initialize(&dword_10020F840, 30), v3 = 0, v7))
    {
      v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "identifier"));
      v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "xpcObjectRepresentation"));
      LogPrintF(&dword_10020F840, "-[AADeviceManagerDaemon _sendConfigOverAAController:device:completion:]_block_invoke", 30, "AAConfig sent: destination %@, data <%@>\n", v4, v5);

      goto LABEL_8;
    }
  }
  v8 = *(_QWORD *)(a1 + 48);
  if (v8)
  {
    (*(void (**)(uint64_t, id))(v8 + 16))(v8, v9);
    v3 = v9;
  }

}

id sub_100012110(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_sendDeviceConfig:identifier:completion:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
}

void sub_10001237C(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  id v5;

  v3 = a2;
  if (!v3)
  {
    v5 = 0;
    objc_msgSend(*(id *)(a1 + 32), "_sendConfigOverAAController:device:completion:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
    goto LABEL_5;
  }
  v4 = *(_QWORD *)(a1 + 56);
  if (v4)
  {
    v5 = v3;
    (*(void (**)(void))(v4 + 16))();
LABEL_5:
    v3 = v5;
  }

}

void sub_1000124EC(id a1)
{
  if (dword_10020F840 <= 30 && (dword_10020F840 != -1 || _LogCategory_Initialize(&dword_10020F840, 30)))
    LogPrintF(&dword_10020F840, "-[AADeviceManagerDaemon _cbControllerEnsureStarted]_block_invoke", 30, "CBController Invalidated");
}

void sub_10001254C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  int v7;
  id v8;

  v3 = a2;
  v4 = v3;
  if (*(_QWORD *)(a1 + 32) == *(_QWORD *)(*(_QWORD *)(a1 + 40) + 32))
  {
    if (v3)
    {
      v8 = v3;
      if (dword_10020F840 <= 90
        && (dword_10020F840 != -1 || _LogCategory_Initialize(&dword_10020F840, 90)))
      {
        LogPrintF(&dword_10020F840, "-[AADeviceManagerDaemon _cbControllerEnsureStarted]_block_invoke_2", 90, "### Activate CBController failed: %{error}\n", v8);
      }
      objc_msgSend(*(id *)(a1 + 32), "invalidate");
      v5 = *(_QWORD *)(a1 + 40);
      v6 = *(void **)(v5 + 32);
      *(_QWORD *)(v5 + 32) = 0;

      goto LABEL_11;
    }
    if (dword_10020F840 <= 30)
    {
      v8 = 0;
      if (dword_10020F840 != -1 || (v7 = _LogCategory_Initialize(&dword_10020F840, 30), v4 = 0, v7))
      {
        LogPrintF(&dword_10020F840, "-[AADeviceManagerDaemon _cbControllerEnsureStarted]_block_invoke_2", 30, "CBController activated");
LABEL_11:
        v4 = v8;
      }
    }
  }

}

_QWORD *sub_10001283C(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 32);
  result = *(_QWORD **)(a1 + 40);
  if (v3 == result[3])
    return _objc_msgSend(result, "_coreBluetoothDeviceFound:", a2);
  return result;
}

_QWORD *sub_100012858(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 32);
  result = *(_QWORD **)(a1 + 40);
  if (v3 == result[3])
    return _objc_msgSend(result, "_coreBluetoothDeviceLost:", a2);
  return result;
}

uint64_t sub_100012874(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(result + 32);
  if (v1 == *(_QWORD *)(*(_QWORD *)(result + 40) + 24) && dword_10020F840 <= 30)
  {
    if (dword_10020F840 != -1)
      return LogPrintF(&dword_10020F840, "-[AADeviceManagerDaemon _cbDiscoveryEnsureStarted]_block_invoke_3", 30, "%@ Interrupted", v1);
    v2 = result;
    result = _LogCategory_Initialize(&dword_10020F840, 30);
    if ((_DWORD)result)
    {
      v1 = *(_QWORD *)(*(_QWORD *)(v2 + 40) + 24);
      return LogPrintF(&dword_10020F840, "-[AADeviceManagerDaemon _cbDiscoveryEnsureStarted]_block_invoke_3", 30, "%@ Interrupted", v1);
    }
  }
  return result;
}

uint64_t sub_100012908(uint64_t result)
{
  uint64_t v1;

  if (dword_10020F840 <= 30)
  {
    v1 = result;
    if (dword_10020F840 != -1)
      return LogPrintF(&dword_10020F840, "-[AADeviceManagerDaemon _cbDiscoveryEnsureStarted]_block_invoke_4", 30, "%@ Invalidated", *(_QWORD *)(*(_QWORD *)(v1 + 32) + 24));
    result = _LogCategory_Initialize(&dword_10020F840, 30);
    if ((_DWORD)result)
      return LogPrintF(&dword_10020F840, "-[AADeviceManagerDaemon _cbDiscoveryEnsureStarted]_block_invoke_4", 30, "%@ Invalidated", *(_QWORD *)(*(_QWORD *)(v1 + 32) + 24));
  }
  return result;
}

void sub_100012988(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  void *v9;
  int v10;
  id v11;

  v3 = a2;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(_QWORD *)(a1 + 40);
  if (v5 == *(_QWORD *)(v6 + 24))
  {
    if (v3)
    {
      v11 = v3;
      if (dword_10020F840 <= 90)
      {
        if (dword_10020F840 == -1)
        {
          v7 = _LogCategory_Initialize(&dword_10020F840, 90);
          v6 = *(_QWORD *)(a1 + 40);
          if (!v7)
            goto LABEL_10;
          v5 = *(_QWORD *)(v6 + 24);
          v3 = v11;
        }
        LogPrintF(&dword_10020F840, "-[AADeviceManagerDaemon _cbDiscoveryEnsureStarted]_block_invoke_5", 90, "%@ ### Activate failed: %@", v5, v3);
        v6 = *(_QWORD *)(a1 + 40);
      }
LABEL_10:
      objc_msgSend(*(id *)(v6 + 24), "invalidate");
      v8 = *(_QWORD *)(a1 + 40);
      v9 = *(void **)(v8 + 24);
      *(_QWORD *)(v8 + 24) = 0;

LABEL_11:
      v4 = v11;
      goto LABEL_12;
    }
    if (dword_10020F840 <= 30)
    {
      v11 = 0;
      if (dword_10020F840 == -1)
      {
        v10 = _LogCategory_Initialize(&dword_10020F840, 30);
        v4 = 0;
        if (!v10)
          goto LABEL_12;
        v5 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 24);
      }
      LogPrintF(&dword_10020F840, "-[AADeviceManagerDaemon _cbDiscoveryEnsureStarted]_block_invoke_5", 30, "%@ Activated", v5);
      goto LABEL_11;
    }
  }
LABEL_12:

}

void sub_100012F40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100012F58(uint64_t a1, uint64_t a2, void *a3, _BYTE *a4)
{
  void *v7;
  unsigned __int8 v8;
  id v9;

  v9 = a3;
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "coreBluetoothDevice"));
  v8 = objc_msgSend(v7, "deviceFlags");

  if ((v8 & 0x40) != 0)
  {
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a3);
    *a4 = 1;
  }

}

void sub_1000132BC(uint64_t a1, void *a2)
{
  id v3;
  int v4;
  uint64_t v5;
  id v6;

  v3 = a2;
  v6 = v3;
  if (v3)
  {
    if (dword_10020F840 <= 90)
    {
      if (dword_10020F840 != -1 || (v4 = _LogCategory_Initialize(&dword_10020F840, 90), v3 = v6, v4))
      {
        LogPrintF(&dword_10020F840, "-[AADeviceManagerDaemon _sendConfigOverCBController:device:completion:]_block_invoke", 90, "## sending CBDeviceSetting %@ failed: %@", *(_QWORD *)(a1 + 32), v3);
        v3 = v6;
      }
    }
  }
  v5 = *(_QWORD *)(a1 + 40);
  if (v5)
  {
    (*(void (**)(uint64_t, id))(v5 + 16))(v5, v6);
    v3 = v6;
  }

}

id sub_1000133E4(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_aaDeviceRecordsRemovedWithRecords:", *(_QWORD *)(a1 + 40));
}

void sub_100013488(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  id v5;
  id v6;
  uint64_t v7;
  void *i;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  id v15;
  void *v16;
  unsigned __int8 v17;
  id obj;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _BYTE v23[128];

  v4 = a3;
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  obj = *(id *)(a1 + 32);
  v5 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v20;
    do
    {
      for (i = 0; i != v6; i = (char *)i + 1)
      {
        if (*(_QWORD *)v20 != v7)
          objc_enumerationMutation(obj);
        v9 = *(void **)(*((_QWORD *)&v19 + 1) + 8 * (_QWORD)i);
        v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "bluetoothAddress"));
        v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "lowercaseString"));
        v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "bluetoothAddress"));
        v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "lowercaseString"));
        v14 = v11;
        v15 = v13;
        if (v14 == v15)
        {

LABEL_11:
          if (dword_10020F840 <= 30
            && (dword_10020F840 != -1 || _LogCategory_Initialize(&dword_10020F840, 30)))
          {
            LogPrintF(&dword_10020F840, "-[AADeviceManagerDaemon _aaDeviceRecordsRemovedWithRecords:]_block_invoke", 30, "received cloud push, AADeviceRecord removed: %@", v9);
          }
          continue;
        }
        v16 = v15;
        if ((v14 == 0) == (v15 != 0))
        {

          continue;
        }
        v17 = objc_msgSend(v14, "isEqual:", v15);

        if ((v17 & 1) != 0)
          goto LABEL_11;
      }
      v6 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
    }
    while (v6);
  }

}

id sub_10001372C(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_aaDeviceRecordsUpdatedWithRecords:", *(_QWORD *)(a1 + 40));
}

void sub_1000137D0(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  id v5;
  id v6;
  uint64_t v7;
  void *i;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  id v15;
  void *v16;
  unsigned __int8 v17;
  id obj;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _BYTE v23[128];

  v4 = a3;
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  obj = *(id *)(a1 + 32);
  v5 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v20;
    do
    {
      for (i = 0; i != v6; i = (char *)i + 1)
      {
        if (*(_QWORD *)v20 != v7)
          objc_enumerationMutation(obj);
        v9 = *(void **)(*((_QWORD *)&v19 + 1) + 8 * (_QWORD)i);
        v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "bluetoothAddress"));
        v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "lowercaseString"));
        v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "bluetoothAddress"));
        v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "lowercaseString"));
        v14 = v11;
        v15 = v13;
        if (v14 == v15)
        {

LABEL_11:
          if (dword_10020F840 <= 30
            && (dword_10020F840 != -1 || _LogCategory_Initialize(&dword_10020F840, 30)))
          {
            LogPrintF(&dword_10020F840, "-[AADeviceManagerDaemon _aaDeviceRecordsUpdatedWithRecords:]_block_invoke", 30, "received cloud push, AADeviceRecord updated: %@", v9);
          }
          if (objc_msgSend(v4, "updateWithAADeviceRecord:", v9))
          {
            v10 = (void *)objc_claimAutoreleasedReturnValue(+[AAServicesDaemon sharedAAServicesDaemon](AAServicesDaemon, "sharedAAServicesDaemon"));
            objc_msgSend(v10, "reportDeviceFound:", v4);
            goto LABEL_18;
          }
          continue;
        }
        v16 = v15;
        if ((v14 == 0) == (v15 != 0))
        {

LABEL_18:
          continue;
        }
        v17 = objc_msgSend(v14, "isEqual:", v15);

        if ((v17 & 1) != 0)
          goto LABEL_11;
      }
      v6 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
    }
    while (v6);
  }

}

void sub_100013DC0(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  NSObject *v5;
  id v6;
  _QWORD v7[4];
  id v8;
  id v9;

  v3 = a2;
  v4 = *(void **)(a1 + 40);
  v5 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 56);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100013E54;
  v7[3] = &unk_1001E23E8;
  v8 = v3;
  v9 = v4;
  v6 = v3;
  dispatch_async(v5, v7);

}

uint64_t sub_100013E54(uint64_t result)
{
  uint64_t v1;

  if (dword_10020F840 <= 30)
  {
    v1 = result;
    if (dword_10020F840 != -1)
      return LogPrintF(&dword_10020F840, "-[AADeviceManagerDaemon _saveDeviceRecordForDevice:]_block_invoke_2", 30, "Saved AADeviceRecord to cloud with error %@, record: %@", *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40));
    result = _LogCategory_Initialize(&dword_10020F840, 30);
    if ((_DWORD)result)
      return LogPrintF(&dword_10020F840, "-[AADeviceManagerDaemon _saveDeviceRecordForDevice:]_block_invoke_2", 30, "Saved AADeviceRecord to cloud with error %@, record: %@", *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40));
  }
  return result;
}

void sub_100013FC8(uint64_t a1)
{
  uint64_t v2;
  _BOOL4 v3;
  id v4;
  uint64_t v5;
  void *v6;
  id v7;
  void *v8;
  uint64_t v9;
  void *v10;
  unint64_t v11;
  const char *v12;
  int v13;
  void *v14;
  void *v15;

  if (objc_msgSend(*(id *)(a1 + 32), "headGesture") == (id)1)
  {
    v2 = 2;
    v3 = 1;
  }
  else
  {
    v4 = objc_msgSend(*(id *)(a1 + 32), "headGesture");
    v3 = v4 == (id)2;
    if (v4 == (id)2)
      v2 = 3;
    else
      v2 = 0;
  }
  v5 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "_getCurrentAudioOwner"));
  v6 = (void *)v5;
  if (v3 && v5)
  {
    v15 = (void *)v5;
    if (dword_10020F840 <= 30)
    {
      if (dword_10020F840 != -1 || (v13 = _LogCategory_Initialize(&dword_10020F840, 30), v6 = v15, v13))
      {
        v7 = objc_msgSend(*(id *)(a1 + 32), "headGesture");
        v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "avgConfidence"));
        v9 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "timestamp"));
        v10 = (void *)v9;
        v11 = *(char *)(*(_QWORD *)(a1 + 40) + 84);
        if (v11 > 4)
          v12 = "?";
        else
          v12 = off_1001E28A0[v11];
        LogPrintF(&dword_10020F840, "-[AADeviceManagerDaemon didDetectedWithHeadGesture:]_block_invoke", 30, "HeadGesture: Type: %lu, Confidence: %@, timestamp: %@ previouslyDetectedHeadGesture %s AADetectedHeadGesture %s, ", v7, v8, v9, v12, off_1001E28C8[v2]);

        v6 = v15;
      }
    }
    objc_msgSend(v6, "setDetectedHeadGesture:", v2);
    v14 = (void *)objc_claimAutoreleasedReturnValue(+[AAServicesDaemon sharedAAServicesDaemon](AAServicesDaemon, "sharedAAServicesDaemon"));
    objc_msgSend(v14, "reportHeadGestureDetected:", v15);

    v6 = v15;
    *(_BYTE *)(*(_QWORD *)(a1 + 40) + 84) = v2;
  }

}

uint64_t sub_1000141A4(uint64_t result)
{
  uint64_t v1;
  const __CFString *v2;

  if (dword_10020F840 <= 30)
  {
    v1 = result;
    if (dword_10020F840 != -1 || (result = _LogCategory_Initialize(&dword_10020F840, 30), (_DWORD)result))
    {
      if (*(_BYTE *)(v1 + 32))
        v2 = CFSTR("IS");
      else
        v2 = CFSTR("IS NOT");
      return LogPrintF(&dword_10020F840, "-[AADeviceManagerDaemon didStartStreamingWithIsStreaming:]_block_invoke", 30, "HeadGesture Data %@ streaming", v2);
    }
  }
  return result;
}

void sub_100014648(uint64_t a1)
{
  void *v2;
  int v3;
  unsigned int v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  int v12;
  void *v13;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 48), "objectForKeyedSubscript:", *(_QWORD *)(a1 + 40)));
  v13 = v2;
  if (v2)
  {
    v3 = *(_DWORD *)(a1 + 48);
    v4 = objc_msgSend(v2, "smartRoutingStateFlags");
    v5 = v13;
    if (v3 != v4)
    {
      if (dword_10020F840 <= 30
        && (dword_10020F840 != -1 || _LogCategory_Initialize(&dword_10020F840, 30)))
      {
        v6 = *(_QWORD *)(a1 + 40);
        v7 = CUPrintFlags32(objc_msgSend(v13, "smartRoutingStateFlags"), &unk_100184618);
        v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
        v9 = CUPrintFlags32(*(unsigned int *)(a1 + 48), &unk_100184618);
        v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
        LogPrintF(&dword_10020F840, "-[AADeviceManagerDaemon smartRoutingStateUpdated:ForDeviceIdentifier:]_block_invoke", 30, "AADevice identifier %@ updated with SR state %@ --> %@", v6, v8, v10);

      }
      objc_msgSend(v13, "setSmartRoutingStateFlags:", *(unsigned int *)(a1 + 48));
      v11 = (void *)objc_claimAutoreleasedReturnValue(+[AAServicesDaemon sharedAAServicesDaemon](AAServicesDaemon, "sharedAAServicesDaemon"));
      objc_msgSend(v11, "reportDeviceFound:", v13);

      goto LABEL_8;
    }
  }
  else
  {
    v5 = 0;
    if (dword_10020F840 <= 30)
    {
      if (dword_10020F840 != -1 || (v12 = _LogCategory_Initialize(&dword_10020F840, 30), v5 = 0, v12))
      {
        LogPrintF(&dword_10020F840, "-[AADeviceManagerDaemon smartRoutingStateUpdated:ForDeviceIdentifier:]_block_invoke", 30, "smartRoutingStateUpdated: No AudioAccessoryDevice found for identifier %@", *(_QWORD *)(a1 + 40));
LABEL_8:
        v5 = v13;
      }
    }
  }

}

id sub_100014824(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_sendSiriMultitoneConfigToDevice:");
}

void sub_1000149C0(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  int v6;
  int v7;
  id v8;

  v3 = a2;
  v4 = v3;
  if (v3)
  {
    if (dword_10020F840 <= 90)
    {
      v8 = v3;
      if (dword_10020F840 != -1 || (v6 = _LogCategory_Initialize(&dword_10020F840, 90), v4 = v8, v6))
      {
        LogPrintF(&dword_10020F840, "-[AADeviceManagerDaemon _sendSiriMultitoneConfigToDevice:]_block_invoke", 90, "### sendDeviceConfig failed with error: %@\n", v4);
LABEL_8:
        v4 = v8;
      }
    }
  }
  else if (dword_10020F840 <= 30)
  {
    v8 = 0;
    if (dword_10020F840 != -1 || (v7 = _LogCategory_Initialize(&dword_10020F840, 30), v4 = 0, v7))
    {
      v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "identifier"));
      LogPrintF(&dword_10020F840, "-[AADeviceManagerDaemon _sendSiriMultitoneConfigToDevice:]_block_invoke", 30, "AAConfig sent: destination %@, config <%@>\n", v5, *(_QWORD *)(a1 + 40));

      goto LABEL_8;
    }
  }

}

void sub_100014B74(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  objc_class *v8;
  id v9;
  _QWORD v10[5];
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;

  v5 = a2;
  v6 = a3;
  if (v5)
  {
    if (dword_10020F840 <= 30
      && (dword_10020F840 != -1 || _LogCategory_Initialize(&dword_10020F840, 30)))
    {
      LogPrintF(&dword_10020F840, "-[AADeviceManagerDaemon downloadHRTFAsset]_block_invoke", 30, "Spatial Profile: User has already enrolled for Personalized Spatial Audio");
    }
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 32), "_setHRTFAssetDownloadOTA");
    v11 = 0;
    v12 = &v11;
    v13 = 0x2050000000;
    v7 = (void *)qword_100212580;
    v14 = qword_100212580;
    if (!qword_100212580)
    {
      v10[0] = _NSConcreteStackBlock;
      v10[1] = 3221225472;
      v10[2] = sub_100014EAC;
      v10[3] = &unk_1001E2300;
      v10[4] = &v11;
      sub_100014EAC((uint64_t)v10);
      v7 = (void *)v12[3];
    }
    v8 = objc_retainAutorelease(v7);
    _Block_object_dispose(&v11, 8);
    v9 = objc_msgSend([v8 alloc], "initWithCameraSession:", 0);
    objc_msgSend(v9, "downloadHRTFAsset:withCompletion:", 0, &stru_1001E2840);

  }
}

void sub_100014CC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100014CD8(id a1, BOOL a2, NSString *a3, NSError *a4)
{
  _BOOL4 v5;
  NSError *v6;
  NSString *v7;

  v5 = a2;
  v7 = a3;
  v6 = a4;
  if (dword_10020F840 <= 30 && (dword_10020F840 != -1 || _LogCategory_Initialize(&dword_10020F840, 30)))
    LogPrintF(&dword_10020F840, "-[AADeviceManagerDaemon downloadHRTFAsset]_block_invoke_2", 30, "Spatial Profile: downloadHRTFAsset isDownloaded %d, path %@ error %@", v5, v7, v6);

}

Class sub_100014EAC(uint64_t a1)
{
  char *v2;
  Class result;
  char *v4;
  __int128 v5;
  uint64_t v6;

  v4 = 0;
  if (!qword_100212588)
  {
    v5 = off_1001E2888;
    v6 = 0;
    qword_100212588 = _sl_dlopen(&v5, &v4);
    v2 = v4;
    if (!qword_100212588)
    {
      abort_report_np("%s", v4);
      goto LABEL_7;
    }
    if (v4)
      goto LABEL_8;
  }
  while (1)
  {
    result = objc_getClass("HRTFEnrollmentSession");
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
      break;
LABEL_7:
    v2 = (char *)sub_10016B9A4();
LABEL_8:
    free(v2);
  }
  qword_100212580 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_1000150A8(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  id v12;
  id v13;
  void *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  _QWORD v18[4];
  id v19;

  v5 = a2;
  v6 = a3;
  if (v6)
  {
    v7 = v6;
    if (dword_10020F910 <= 90
      && (dword_10020F910 != -1 || _LogCategory_Initialize(&dword_10020F910, 90)))
    {
      LogPrintF(&dword_10020F910, "-[AAFeedbackManager displayFeedbackCampaign:promptStyle:localizedPrompt:completion:]_block_invoke", 90, "error returning %@", v7);
    }
LABEL_19:
    v15 = *(_QWORD *)(a1 + 56);
    if (v15)
      (*(void (**)(uint64_t, void *))(v15 + 16))(v15, v7);
    goto LABEL_27;
  }
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "currentCampaign"));

  if (v8)
  {
    if (dword_10020F910 <= 30
      && (dword_10020F910 != -1 || _LogCategory_Initialize(&dword_10020F910, 30)))
    {
      LogPrintF(&dword_10020F910, "-[AAFeedbackManager displayFeedbackCampaign:promptStyle:localizedPrompt:completion:]_block_invoke", 30, "Already shown the camaign to user skipping feedback.");
    }
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("AAFeedbackErrorDomain"), 1, 0));
    goto LABEL_19;
  }
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "errors"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "lastObject"));

  if ((uint64_t)objc_msgSend(v5, "declineCount") < 1)
  {
    v11 = objc_msgSend(objc_alloc((Class)FBKSForm), "initWithIdentifier:", *(_QWORD *)(a1 + 32));
    objc_msgSend(v11, "setAuthenticationMethod:", 2);
    v12 = objc_msgSend(objc_alloc((Class)FBKSDraftLauncher), "initWithFeedbackForm:", v11);
    v13 = objc_alloc_init((Class)FBKSLaunchConfiguration);
    v14 = v13;
    if (*(_QWORD *)(a1 + 40))
    {
      objc_msgSend(v13, "setLocalizedPromptTitle:");
    }
    else
    {
      v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "_feedbackCampainLocalizedTitleForCampain:", *(unsigned int *)(a1 + 72)));
      objc_msgSend(v14, "setLocalizedPromptTitle:", v16);

    }
    objc_msgSend(v14, "setPromptStyle:", *(_QWORD *)(a1 + 64));
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472;
    v18[2] = sub_1000153B8;
    v18[3] = &unk_1001E20C0;
    v19 = *(id *)(a1 + 56);
    objc_msgSend(v12, "collectFeedbackWithLaunchConfiguration:completion:", v14, v18);

    v7 = 0;
  }
  else
  {
    if (dword_10020F910 <= 30
      && (dword_10020F910 != -1 || _LogCategory_Initialize(&dword_10020F910, 30)))
    {
      LogPrintF(&dword_10020F910, "-[AAFeedbackManager displayFeedbackCampaign:promptStyle:localizedPrompt:completion:]_block_invoke", 30, "User previously declined skipping feedback. %i", objc_msgSend(v5, "declineCount"));
    }
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("AAFeedbackErrorDomain"), 2, 0));
    v17 = *(_QWORD *)(a1 + 56);
    if (v17)
      (*(void (**)(uint64_t, void *))(v17 + 16))(v17, v7);
  }

LABEL_27:
}

void sub_1000153B8(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  void (*v6)(void);
  int v7;
  uint64_t v8;
  id v9;

  v3 = a2;
  v4 = v3;
  if (v3)
  {
    v9 = v3;
    if (dword_10020F910 <= 90)
    {
      if (dword_10020F910 != -1 || (v7 = _LogCategory_Initialize(&dword_10020F910, 90), v4 = v9, v7))
      {
        LogPrintF(&dword_10020F910, "-[AAFeedbackManager displayFeedbackCampaign:promptStyle:localizedPrompt:completion:]_block_invoke_2", 90, "collectFeedbackWithLaunchConfiguration encountered an error returning %@", v4);
        v4 = v9;
      }
    }
    v8 = *(_QWORD *)(a1 + 32);
    if (v8)
    {
      v6 = *(void (**)(void))(v8 + 16);
      goto LABEL_10;
    }
  }
  else
  {
    v5 = *(_QWORD *)(a1 + 32);
    if (v5)
    {
      v6 = *(void (**)(void))(v5 + 16);
      v9 = 0;
LABEL_10:
      v6();
      v4 = v9;
    }
  }

}

void sub_10001553C(id a1)
{
  AAServicesDaemon *v1;
  void *v2;

  v1 = objc_alloc_init(AAServicesDaemon);
  v2 = (void *)qword_100212590;
  qword_100212590 = (uint64_t)v1;

}

id sub_100015D10(uint64_t a1)
{
  if (dword_10020F980 <= 30 && (dword_10020F980 != -1 || _LogCategory_Initialize(&dword_10020F980, 30)))
    LogPrintF(&dword_10020F980, "-[AAServicesDaemon activate]_block_invoke", 30, "Activate");
  return _objc_msgSend(*(id *)(a1 + 32), "_activate");
}

id sub_100016244(uint64_t a1)
{
  int v2;
  int v3;
  uint64_t state64;

  v2 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 192);
  state64 = 0;
  notify_get_state(v2, &state64);
  if (dword_10020F980 <= 30)
  {
    v3 = state64;
    if (dword_10020F980 != -1 || _LogCategory_Initialize(&dword_10020F980, 30))
      LogPrintF(&dword_10020F980, "-[AAServicesDaemon _activate]_block_invoke", 30, "Mute Control: AAMuteStateChanged message: %u", v3);
  }
  return objc_msgSend(*(id *)(a1 + 32), "_muteStateChanged");
}

id sub_1000162DC(uint64_t a1)
{
  if (dword_10020F980 <= 30 && (dword_10020F980 != -1 || _LogCategory_Initialize(&dword_10020F980, 30)))
    LogPrintF(&dword_10020F980, "-[AAServicesDaemon _activate]_block_invoke_2", 30, "Prefs changed");
  return objc_msgSend(*(id *)(a1 + 32), "_prefsChanged");
}

uint64_t sub_10001634C(uint64_t a1)
{
  return CUStateDumpWithObject("AAServices", *(_QWORD *)(a1 + 32), &dword_10020F980);
}

_QWORD *sub_100016368(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 32);
  result = *(_QWORD **)(a1 + 40);
  if (v3 == result[6])
    return _objc_msgSend(result, "_deviceFound:", a2);
  return result;
}

_QWORD *sub_100016384(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 32);
  result = *(_QWORD **)(a1 + 40);
  if (v3 == result[6])
    return _objc_msgSend(result, "_deviceLost:", a2);
  return result;
}

uint64_t sub_1000163A0(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(result + 32);
  if (v1 == *(_QWORD *)(*(_QWORD *)(result + 40) + 48) && dword_10020F980 <= 30)
  {
    if (dword_10020F980 != -1)
      return LogPrintF(&dword_10020F980, "-[AAServicesDaemon _activate]_block_invoke_6", 30, "%@ Interrupted", v1);
    v2 = result;
    result = _LogCategory_Initialize(&dword_10020F980, 30);
    if ((_DWORD)result)
    {
      v1 = *(_QWORD *)(v2 + 32);
      return LogPrintF(&dword_10020F980, "-[AAServicesDaemon _activate]_block_invoke_6", 30, "%@ Interrupted", v1);
    }
  }
  return result;
}

uint64_t sub_100016430(uint64_t result)
{
  uint64_t v1;

  if (dword_10020F980 <= 30)
  {
    v1 = result;
    if (dword_10020F980 != -1)
      return LogPrintF(&dword_10020F980, "-[AAServicesDaemon _activate]_block_invoke_7", 30, "%@ Invalidated", *(_QWORD *)(v1 + 32));
    result = _LogCategory_Initialize(&dword_10020F980, 30);
    if ((_DWORD)result)
      return LogPrintF(&dword_10020F980, "-[AAServicesDaemon _activate]_block_invoke_7", 30, "%@ Invalidated", *(_QWORD *)(v1 + 32));
  }
  return result;
}

void sub_1000164AC(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  void *v9;
  int v10;
  id v11;

  v3 = a2;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(_QWORD *)(a1 + 40);
  if (v5 == *(_QWORD *)(v6 + 48))
  {
    if (v3)
    {
      v11 = v3;
      if (dword_10020F980 <= 90)
      {
        if (dword_10020F980 == -1)
        {
          v7 = _LogCategory_Initialize(&dword_10020F980, 90);
          v6 = *(_QWORD *)(a1 + 40);
          if (!v7)
            goto LABEL_10;
          v5 = *(_QWORD *)(v6 + 48);
          v3 = v11;
        }
        LogPrintF(&dword_10020F980, "-[AAServicesDaemon _activate]_block_invoke_8", 90, "%@ ### Activate failed: %@", v5, v3);
        v6 = *(_QWORD *)(a1 + 40);
      }
LABEL_10:
      objc_msgSend(*(id *)(v6 + 48), "invalidate");
      v8 = *(_QWORD *)(a1 + 40);
      v9 = *(void **)(v8 + 48);
      *(_QWORD *)(v8 + 48) = 0;

LABEL_11:
      v4 = v11;
      goto LABEL_12;
    }
    if (dword_10020F980 <= 30)
    {
      v11 = 0;
      if (dword_10020F980 == -1)
      {
        v10 = _LogCategory_Initialize(&dword_10020F980, 30);
        v4 = 0;
        if (!v10)
          goto LABEL_12;
        v5 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 48);
      }
      LogPrintF(&dword_10020F980, "-[AAServicesDaemon _activate]_block_invoke_8", 30, "%@ Activated", v5);
      goto LABEL_11;
    }
  }
LABEL_12:

}

void sub_100016630(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;

  if (dword_10020F980 <= 30 && (dword_10020F980 != -1 || _LogCategory_Initialize(&dword_10020F980, 30)))
    LogPrintF(&dword_10020F980, "-[AAServicesDaemon invalidate]_block_invoke", 30, "Invalidate");
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[AAConversationDetectSessionManager sharedCDSessionManager](AAConversationDetectSessionManager, "sharedCDSessionManager"));
  objc_msgSend(v2, "invalidate");

  v3 = (void *)objc_claimAutoreleasedReturnValue(+[AADeviceManagerDaemon sharedAADeviceManagerDaemon](AADeviceManagerDaemon, "sharedAADeviceManagerDaemon"));
  objc_msgSend(v3, "invalidate");

  v4 = *(_QWORD *)(a1 + 32);
  if (*(_QWORD *)(v4 + 208))
  {
    os_state_remove_handler(*(_QWORD *)(v4 + 208));
    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 208) = 0;
    v4 = *(_QWORD *)(a1 + 32);
  }
  if (*(_DWORD *)(v4 + 192) != -1)
  {
    notify_cancel(*(_DWORD *)(v4 + 192));
    *(_DWORD *)(*(_QWORD *)(a1 + 32) + 192) = -1;
    v4 = *(_QWORD *)(a1 + 32);
  }
  objc_msgSend((id)v4, "_deregisterFromAVSystemControllerDeathNotifications");
  objc_msgSend(*(id *)(a1 + 32), "_deregisterFromAVSystemControllerStateNotifications");
  v5 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(v5 + 232))
  {
    if (dword_10020F980 <= 30
      && (dword_10020F980 != -1 || _LogCategory_Initialize(&dword_10020F980, 30)))
    {
      LogPrintF(&dword_10020F980, "-[AAServicesDaemon invalidate]_block_invoke", 30, "Deregistering from TUBargeCall Notifications");
    }
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
    objc_msgSend(v6, "removeObserver:name:object:", *(_QWORD *)(a1 + 32), TUBargeCallStatusChangedNotification, 0);

    *(_BYTE *)(*(_QWORD *)(a1 + 32) + 232) = 0;
    v5 = *(_QWORD *)(a1 + 32);
  }
  objc_msgSend(*(id *)(v5 + 48), "invalidate");
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(void **)(v7 + 48);
  *(_QWORD *)(v7 + 48) = 0;

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 56), "removeAllObjects");
  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(void **)(v9 + 56);
  *(_QWORD *)(v9 + 56) = 0;

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 272), "invalidate");
  v11 = *(_QWORD *)(a1 + 32);
  v12 = *(void **)(v11 + 272);
  *(_QWORD *)(v11 + 272) = 0;

}

id sub_1000169BC(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_xpcConnectionInvalidated:", *(_QWORD *)(a1 + 40));
}

id sub_100016A34(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_update");
}

id sub_100016BE4(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_activateAudioRoutingControl:completion:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

id sub_100016F14(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_invalidateAudioRoutingControl:completion:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

id sub_100017230(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_activateAudioSessionControl:completion:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

id sub_100017534(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_updateAudioSessionControl:", *(_QWORD *)(a1 + 40));
}

id sub_1000177B0(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_invalidateAudioSessionControl:completion:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

id sub_1000182C0(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_reportDeviceFound:", *(_QWORD *)(a1 + 40));
}

id sub_100018468(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_reportDeviceLost:", *(_QWORD *)(a1 + 40));
}

void sub_1000185EC(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  unsigned __int8 v5;
  unsigned __int8 v6;
  uint64_t v7;
  const char *v8;
  const char *v9;
  id v10;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "userInfo"));
  v10 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectForKey:", AVSystemController_CallIsActiveNotificationParameter));

  if (v10)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "userInfo"));
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKey:", AVSystemController_CallIsHighPriorityNotificationParameter));

    if (v4)
    {
      v5 = objc_msgSend(v10, "BOOLValue");
      v6 = objc_msgSend(v4, "BOOLValue");
      *(_BYTE *)(*(_QWORD *)(a1 + 40) + 168) = v5;
      *(_BYTE *)(*(_QWORD *)(a1 + 40) + 169) = v6;
      if (dword_10020F980 <= 30
        && (dword_10020F980 != -1 || _LogCategory_Initialize(&dword_10020F980, 30)))
      {
        v7 = *(_QWORD *)(a1 + 40);
        if (*(_BYTE *)(v7 + 168))
          v8 = "yes";
        else
          v8 = "no";
        if (*(_BYTE *)(v7 + 169))
          v9 = "yes";
        else
          v9 = "no";
        LogPrintF(&dword_10020F980, "-[AAServicesDaemon _handleCallIsActiveDidChangeNotification:]_block_invoke", 30, "Mute Control: call state changed, isCallActive: %s, isCallHighPriority: %s", v8, v9);
      }
      objc_msgSend(*(id *)(a1 + 40), "_updateBannerChimeSuppressionState");
    }
    else if (dword_10020F980 <= 90
           && (dword_10020F980 != -1 || _LogCategory_Initialize(&dword_10020F980, 90)))
    {
      LogPrintF(&dword_10020F980, "-[AAServicesDaemon _handleCallIsActiveDidChangeNotification:]_block_invoke", 90, "Mute Control: failed to retrieve call priority from AVSystemController_CallIsActiveDidChangeNotification");
    }

  }
  else if (dword_10020F980 <= 90
         && (dword_10020F980 != -1 || _LogCategory_Initialize(&dword_10020F980, 90)))
  {
    LogPrintF(&dword_10020F980, "-[AAServicesDaemon _handleCallIsActiveDidChangeNotification:]_block_invoke", 90, "Mute Control: failed to retrieve call state from AVSystemController_CallIsActiveDidChangeNotification");
  }

}

void sub_100018854(uint64_t a1)
{
  void *v2;
  const char *v3;
  int v4;
  int v5;
  uint64_t v6;
  int v7;
  const char *v8;
  const char *v9;
  int v10;
  id v11;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "object"));
  v11 = v2;
  if (dword_10020F980 <= 30)
  {
    if (dword_10020F980 != -1 || (v4 = _LogCategory_Initialize(&dword_10020F980, 30), v2 = v11, v4))
    {
      if (objc_msgSend(v2, "isPTT"))
        v3 = "yes";
      else
        v3 = "no";
      LogPrintF(&dword_10020F980, "-[AAServicesDaemon _handlePTTCallStatusChangedNotification:]_block_invoke", 30, "Mute Control: TUCall state changed, isPTTCall: %s, callState: %d", v3, objc_msgSend(v11, "status"));
      v2 = v11;
    }
  }
  if (objc_msgSend(v2, "isPTT"))
    v5 = objc_msgSend(v11, "status") == 1;
  else
    v5 = 0;
  v6 = *(_QWORD *)(a1 + 40);
  v7 = *(unsigned __int8 *)(v6 + 170);
  if (v7 != v5)
  {
    if (dword_10020F980 <= 30)
    {
      if (dword_10020F980 != -1)
      {
LABEL_14:
        v8 = "yes";
        if (v7)
          v9 = "yes";
        else
          v9 = "no";
        if (!v5)
          v8 = "no";
        LogPrintF(&dword_10020F980, "-[AAServicesDaemon _handlePTTCallStatusChangedNotification:]_block_invoke", 30, "Mute Control: PTT call state changed from %s --> %s", v9, v8);
        v6 = *(_QWORD *)(a1 + 40);
        goto LABEL_21;
      }
      v10 = _LogCategory_Initialize(&dword_10020F980, 30);
      v6 = *(_QWORD *)(a1 + 40);
      if (v10)
      {
        v7 = *(unsigned __int8 *)(v6 + 170);
        goto LABEL_14;
      }
    }
LABEL_21:
    *(_BYTE *)(v6 + 170) = v5;
    objc_msgSend(*(id *)(a1 + 40), "_updateBannerChimeSuppressionState");
  }

}

void sub_100018DBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100018DDC(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_100018DEC(uint64_t a1)
{

}

void sub_100018DF4(uint64_t a1, unsigned int a2, void *a3)
{
  id v5;
  const char *v6;
  uint64_t v7;
  const char *v8;
  const char *v9;
  void *v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  _OWORD v14[2];

  v5 = a3;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40) == *(_QWORD *)(*(_QWORD *)(a1 + 32) + 184))
  {
    if (dword_10020F980 <= 30
      && (dword_10020F980 != -1 || _LogCategory_Initialize(&dword_10020F980, 30)))
    {
      if (a2 > 6)
        v6 = "?";
      else
        v6 = (&off_1001E2A78)[a2];
      v7 = *(int *)(a1 + 48);
      if (v7 > 6)
        v8 = "?";
      else
        v8 = (&off_1001E2C30)[v7];
      LogPrintF(&dword_10020F980, "-[AAServicesDaemon _createBannerSessionMuteActionForIOS:auditToken:appName:appBundleID:]_block_invoke", 30, "Mute Control: banner action: %s, mute control applied: %s", v6, v8);
    }
    switch(a2)
    {
      case 1u:
        if ((*(_DWORD *)(a1 + 48) - 1) <= 1)
        {
          if (dword_10020F980 <= 30
            && (dword_10020F980 != -1 || _LogCategory_Initialize(&dword_10020F980, 30)))
          {
            LogPrintF(&dword_10020F980, "-[AAServicesDaemon _createBannerSessionMuteActionForIOS:auditToken:appName:appBundleID:]_block_invoke", 30, "Mute Control: reverse action");
          }
          v10 = *(void **)(a1 + 32);
          v11 = *(unsigned __int8 *)(a1 + 84);
          v12 = *(_OWORD *)(a1 + 68);
          v14[0] = *(_OWORD *)(a1 + 52);
          v14[1] = v12;
          objc_msgSend(v10, "_reverseMuteActionForToken:shouldMute:", v14, v11);
        }
        break;
      case 2u:
        if (dword_10020F980 <= 30
          && (dword_10020F980 != -1 || _LogCategory_Initialize(&dword_10020F980, 30)))
        {
          v9 = "Mute Control: banner dismissed";
          goto LABEL_30;
        }
        break;
      case 3u:
        if (dword_10020F980 <= 30
          && (dword_10020F980 != -1 || _LogCategory_Initialize(&dword_10020F980, 30)))
        {
          v9 = "Mute Control: banner invalidated";
          goto LABEL_30;
        }
        break;
      case 4u:
        if (dword_10020F980 <= 90
          && (dword_10020F980 != -1 || _LogCategory_Initialize(&dword_10020F980, 90)))
        {
          LogPrintF(&dword_10020F980, "-[AAServicesDaemon _createBannerSessionMuteActionForIOS:auditToken:appName:appBundleID:]_block_invoke", 90, "Mute Control: banner error %@", v5);
        }
        break;
      case 6u:
        if (dword_10020F980 <= 30
          && (dword_10020F980 != -1 || _LogCategory_Initialize(&dword_10020F980, 30)))
        {
          v9 = "Mute Control: banner timeout";
LABEL_30:
          LogPrintF(&dword_10020F980, "-[AAServicesDaemon _createBannerSessionMuteActionForIOS:auditToken:appName:appBundleID:]_block_invoke", 30, v9, v13);
        }
        break;
      default:
        break;
    }
    objc_msgSend(*(id *)(a1 + 32), "_invalidateMuteBanner");
  }

}

void sub_100019650(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  void *v6;
  _OWORD v7[2];

  if (*(_QWORD *)(a1 + 32) == *(_QWORD *)(*(_QWORD *)(a1 + 40) + 256))
  {
    if (dword_10020F980 <= 30
      && (dword_10020F980 != -1 || _LogCategory_Initialize(&dword_10020F980, 30)))
    {
      LogPrintF(&dword_10020F980, "-[AAServicesDaemon _createBannerSessionMuteActionForMacOS:auditToken:appName:appBundleID:]_block_invoke", 30, "Mute Control: reverse action");
    }
    v2 = *(void **)(a1 + 40);
    v3 = *(unsigned __int8 *)(a1 + 80);
    v4 = *(_OWORD *)(a1 + 64);
    v7[0] = *(_OWORD *)(a1 + 48);
    v7[1] = v4;
    objc_msgSend(v2, "_reverseMuteActionForToken:shouldMute:", v7, v3);
    objc_msgSend(*(id *)(a1 + 32), "invalidate");
    v5 = *(_QWORD *)(a1 + 40);
    v6 = *(void **)(v5 + 256);
    *(_QWORD *)(v5 + 256) = 0;

  }
}

void sub_100019704(uint64_t a1, unsigned int a2, void *a3)
{
  id v5;
  void *v6;
  const char *v7;
  int v8;
  id v9;

  v5 = a3;
  v6 = v5;
  if (*(_QWORD *)(a1 + 32) == *(_QWORD *)(*(_QWORD *)(a1 + 40) + 256))
  {
    v9 = v5;
    if (dword_10020F980 <= 30)
    {
      if (dword_10020F980 != -1 || (v8 = _LogCategory_Initialize(&dword_10020F980, 30), v6 = v9, v8))
      {
        if (a2 > 5)
          v7 = "?";
        else
          v7 = (&off_1001E2AB0)[a2];
        LogPrintF(&dword_10020F980, "-[AAServicesDaemon _createBannerSessionMuteActionForMacOS:auditToken:appName:appBundleID:]_block_invoke_2", 30, "Mute Control UINotificationSession action: %s, %{error}", v7, v6);
        v6 = v9;
      }
    }
    if (a2 == 5 || a2 == 2)
    {
      objc_msgSend(*(id *)(a1 + 40), "_invalidateMuteBanner");
      v6 = v9;
    }
  }

}

void sub_100019C7C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  NSObject *v9;
  id v10;
  id v11;
  _QWORD block[4];
  id v13;
  id v14;
  uint64_t v15;
  id v16;
  _QWORD *v17;
  _QWORD v18[5];
  id v19;

  v5 = a2;
  v6 = a3;
  v18[0] = 0;
  v18[1] = v18;
  v18[2] = 0x3032000000;
  v18[3] = sub_100018DDC;
  v18[4] = sub_100018DEC;
  v19 = 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(void **)(a1 + 40);
  v9 = *(NSObject **)(v7 + 160);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100019D80;
  block[3] = &unk_1001E29E0;
  v13 = v6;
  v14 = v5;
  v15 = v7;
  v17 = v18;
  v16 = v8;
  v10 = v5;
  v11 = v6;
  dispatch_async(v9, block);

  _Block_object_dispose(v18, 8);
}

uint64_t sub_100019D80(uint64_t a1)
{
  void *v2;
  unsigned int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t result;
  _OWORD v15[2];

  v2 = *(void **)(a1 + 32);
  if (v2)
  {
    if (dword_10020F980 <= 90)
    {
      if (dword_10020F980 != -1 || (v4 = _LogCategory_Initialize(&dword_10020F980, 90), v2 = *(void **)(a1 + 32), v4))
      {
        LogPrintF(&dword_10020F980, "-[AAServicesDaemon _processFirstPartyBannerRequestWithCompletion:]_block_invoke_2", 90, "Mute Control: fetchInCallUIState returned with error %@", v2);
        v2 = *(void **)(a1 + 32);
      }
    }
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40), v2);
  }
  else
  {
    v3 = objc_msgSend(*(id *)(a1 + 40), "isMicIndicatorVisible");
    if (dword_10020F980 <= 30
      && (dword_10020F980 != -1 || _LogCategory_Initialize(&dword_10020F980, 30)))
    {
      LogPrintF(&dword_10020F980, "-[AAServicesDaemon _processFirstPartyBannerRequestWithCompletion:]_block_invoke_2", 30, "Mute Control: fetchInCallUIState tuContext.isMicIndicatorVisible %d, shouldShowMuteBanner %d", objc_msgSend(*(id *)(a1 + 40), "isMicIndicatorVisible"), v3 ^ 1);
    }
    if ((v3 & 1) != 0)
    {
      v5 = NSErrorF(NSOSStatusErrorDomain, 4294960534, "first party UI visible, banner suppressed");
      v6 = objc_claimAutoreleasedReturnValue(v5);
      v7 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
      v8 = *(void **)(v7 + 40);
      *(_QWORD *)(v7 + 40) = v6;

    }
    else
    {
      v9 = *(_QWORD *)(a1 + 48);
      v10 = *(unsigned int *)(v9 + 96);
      v11 = *(_QWORD *)(v9 + 104);
      v12 = *(_QWORD *)(v9 + 152);
      v13 = *(_OWORD *)(v9 + 128);
      v15[0] = *(_OWORD *)(v9 + 112);
      v15[1] = v13;
      objc_msgSend((id)v9, "_createBannerSessionMuteActionForIOS:auditToken:appName:appBundleID:", v10, v15, v11, v12);
    }
  }
  result = *(_QWORD *)(a1 + 56);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))(result + 16))(result, *(_QWORD *)(*(_QWORD *)(a1 + 48) + 144), *(_QWORD *)(*(_QWORD *)(a1 + 48) + 104), *(_QWORD *)(*(_QWORD *)(a1 + 48) + 152), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40));
  return result;
}

void sub_10001ABD8(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9;
  id v10;
  id v11;
  unsigned int v12;
  uint64_t v13;
  id v14;
  const char *v15;
  void *v16;
  uint64_t v17;
  id v18;
  int v19;
  const char *v20;
  uint64_t v21;
  void *v22;
  id v23;

  v23 = a2;
  v9 = a3;
  v10 = a4;
  v11 = a5;
  if (v11)
  {
    v12 = *(_DWORD *)(a1 + 40);
    v13 = v12;
    if (v12 - 1 <= 2)
      v13 = dword_100184668[v12 - 1];
    v14 = v23;
    if (dword_10020F980 > 30)
      goto LABEL_16;
    if (dword_10020F980 == -1)
    {
      v19 = _LogCategory_Initialize(&dword_10020F980, 30);
      v14 = v23;
      if (!v19)
      {
LABEL_16:
        v16 = *(void **)(a1 + 32);
        v17 = v13;
        v18 = v14;
        goto LABEL_17;
      }
      v12 = *(_DWORD *)(a1 + 40);
    }
    if (v12 > 6)
      v15 = "?";
    else
      v15 = (&off_1001E2C30)[v12];
    if (v13 > 6)
      v20 = "?";
    else
      v20 = (&off_1001E2B98)[(int)v13];
    LogPrintF(&dword_10020F980, "-[AAServicesDaemon _updateMuteAction:auditToken:bundleIdentifier:]_block_invoke", 30, "Mute control: muteAction override: %s --> %s, process banner request returned with error: %@", v15, v20, v11);
    v14 = v23;
    goto LABEL_16;
  }
  v16 = *(void **)(a1 + 32);
  v17 = *(unsigned int *)(a1 + 40);
  v18 = v23;
LABEL_17:
  objc_msgSend(v16, "_submitMetricsForMuteAction:auditTokenBundleID:appName:appBundleID:", v17, v18, v9, v10);
  v21 = *(_QWORD *)(a1 + 32);
  v22 = *(void **)(v21 + 176);
  *(_QWORD *)(v21 + 176) = 0;

}

id sub_10001ADA4(uint64_t a1)
{
  if (dword_10020F980 <= 30 && (dword_10020F980 != -1 || _LogCategory_Initialize(&dword_10020F980, 30)))
    LogPrintF(&dword_10020F980, "-[AAServicesDaemon _avSystemControllerServerReset]_block_invoke", 30, "received AVSystemController_ServerConnectionDiedNotification");
  objc_msgSend(*(id *)(a1 + 32), "_deregisterFromAVSystemControllerStateNotifications");
  return objc_msgSend(*(id *)(a1 + 32), "_registerForAVSystemControllerStateNotifications");
}

void sub_10001B77C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  (*(void (**)(uint64_t))(v9 + 16))(v9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10001B7B0(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 40);
  if (v1)
  {
    v2 = result;
    if (dword_10020F980 > 90)
      goto LABEL_6;
    if (dword_10020F980 == -1)
    {
      if (!_LogCategory_Initialize(&dword_10020F980, 90))
      {
LABEL_6:
        result = *(_QWORD *)(v2 + 32);
        if (result)
          return (*(uint64_t (**)(uint64_t, _QWORD))(result + 16))(result, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 40) + 8) + 40));
        return result;
      }
      v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 40) + 8) + 40);
    }
    LogPrintF(&dword_10020F980, "-[AAServicesXPCConnection audioRoutingControlActivate:completion:]_block_invoke", 90, "### Audio Routing Control Activate failed: %{error}", v1);
    goto LABEL_6;
  }
  return result;
}

uint64_t sub_10001B990(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void sub_10001BAE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10001BB10(uint64_t a1)
{
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t result;

  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
  if (!v2)
  {
    v3 = *(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16);
    return v3();
  }
  if (dword_10020F980 <= 90)
  {
    if (dword_10020F980 != -1)
    {
LABEL_4:
      LogPrintF(&dword_10020F980, "-[AAServicesXPCConnection activeHRMSessionChanged:hrmState:completion:]_block_invoke", 90, "### _handleHRMSessionChanged failed %{error}", v2);
      goto LABEL_7;
    }
    if (_LogCategory_Initialize(&dword_10020F980, 90))
    {
      v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
      goto LABEL_4;
    }
  }
LABEL_7:
  result = *(_QWORD *)(a1 + 32);
  if (result)
  {
    v3 = *(uint64_t (**)(void))(result + 16);
    return v3();
  }
  return result;
}

void sub_10001BDC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  (*(void (**)(uint64_t))(v9 + 16))(v9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10001BDFC(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 40);
  if (v1)
  {
    v2 = result;
    if (dword_10020F980 > 90)
      goto LABEL_6;
    if (dword_10020F980 == -1)
    {
      if (!_LogCategory_Initialize(&dword_10020F980, 90))
      {
LABEL_6:
        result = *(_QWORD *)(v2 + 32);
        if (result)
          return (*(uint64_t (**)(uint64_t, _QWORD))(result + 16))(result, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 40) + 8) + 40));
        return result;
      }
      v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 40) + 8) + 40);
    }
    LogPrintF(&dword_10020F980, "-[AAServicesXPCConnection audioSessionControlActivate:completion:]_block_invoke", 90, "### Audio Control Activate failed: %{error}", v1);
    goto LABEL_6;
  }
  return result;
}

void sub_10001C0C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10001C0FC(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 40);
  if (v1 && dword_10020F980 <= 90)
  {
    if (dword_10020F980 != -1)
      return LogPrintF(&dword_10020F980, "-[AAServicesXPCConnection audioSessionControlUpdate:]_block_invoke", 90, "### Audio Control Update failed: %{error}", v1);
    v2 = result;
    result = _LogCategory_Initialize(&dword_10020F980, 90);
    if ((_DWORD)result)
    {
      v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 32) + 8) + 40);
      return LogPrintF(&dword_10020F980, "-[AAServicesXPCConnection audioSessionControlUpdate:]_block_invoke", 90, "### Audio Control Update failed: %{error}", v1);
    }
  }
  return result;
}

void sub_10001C32C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10001C35C(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 40);
  if (v1 && dword_10020F980 <= 90)
  {
    if (dword_10020F980 != -1)
      return LogPrintF(&dword_10020F980, "-[AAServicesXPCConnection setMuteAction:auditToken:bundleIdentifier:]_block_invoke", 90, "### Set mute action failed: %{error}", v1);
    v2 = result;
    result = _LogCategory_Initialize(&dword_10020F980, 90);
    if ((_DWORD)result)
    {
      v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 32) + 8) + 40);
      return LogPrintF(&dword_10020F980, "-[AAServicesXPCConnection setMuteAction:auditToken:bundleIdentifier:]_block_invoke", 90, "### Set mute action failed: %{error}", v1);
    }
  }
  return result;
}

void sub_10001C688(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  uint64_t v15;
  va_list va;

  va_start(va, a15);
  (*(void (**)(uint64_t))(v15 + 16))(v15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10001C6C0(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 40);
  if (v1)
  {
    v2 = result;
    if (dword_10020F980 > 90)
      goto LABEL_6;
    if (dword_10020F980 == -1)
    {
      if (!_LogCategory_Initialize(&dword_10020F980, 90))
      {
LABEL_6:
        result = *(_QWORD *)(v2 + 32);
        if (result)
          return (*(uint64_t (**)(uint64_t, _QWORD))(result + 16))(result, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 40) + 8) + 40));
        return result;
      }
      v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 40) + 8) + 40);
    }
    LogPrintF(&dword_10020F980, "-[AAServicesXPCConnection deviceManagerActivate:completion:]_block_invoke", 90, "### AADeviceManager Activate failed: %{error}", v1);
    goto LABEL_6;
  }
  return result;
}

void sub_10001C780(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;

  v6 = a2;
  v5 = a3;
  if (dword_10020F980 <= 30 && (dword_10020F980 != -1 || _LogCategory_Initialize(&dword_10020F980, 30)))
    LogPrintF(&dword_10020F980, "-[AAServicesXPCConnection deviceManagerActivate:completion:]_block_invoke_2", 30, "reporting device: %@", v5, v6);
  objc_msgSend(*(id *)(a1 + 32), "deviceManagerReportDeviceFound:", v5);

}

void sub_10001C9EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  (*(void (**)(uint64_t))(v9 + 16))(v9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10001CA24(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 40);
  if (v1)
  {
    v2 = result;
    if (dword_10020F980 > 90)
      goto LABEL_6;
    if (dword_10020F980 == -1)
    {
      if (!_LogCategory_Initialize(&dword_10020F980, 90))
      {
LABEL_6:
        result = *(_QWORD *)(v2 + 32);
        if (result)
          return (*(uint64_t (**)(uint64_t, _QWORD))(result + 16))(result, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 40) + 8) + 40));
        return result;
      }
      v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 40) + 8) + 40);
    }
    LogPrintF(&dword_10020F980, "-[AAServicesXPCConnection deviceManagerUpdate:completion:]_block_invoke", 90, "### AADeviceManager Activate failed: %{error}", v1);
    goto LABEL_6;
  }
  return result;
}

void sub_10001CD34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10001CD68(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 40);
  if (v1)
  {
    v2 = result;
    if (dword_10020F980 > 90)
      goto LABEL_6;
    if (dword_10020F980 == -1)
    {
      if (!_LogCategory_Initialize(&dword_10020F980, 90))
      {
LABEL_6:
        result = *(_QWORD *)(v2 + 32);
        if (result)
          return (*(uint64_t (**)(uint64_t, _QWORD))(result + 16))(result, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 40) + 8) + 40));
        return result;
      }
      v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 40) + 8) + 40);
    }
    LogPrintF(&dword_10020F980, "-[AAServicesXPCConnection deviceManagerSendDeviceConfig:identifier:completion:]_block_invoke", 90, "### AADeviceManager send device config failed: %{error}", v1);
    goto LABEL_6;
  }
  return result;
}

uint64_t sub_10001CE28(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

uint64_t sub_10001D15C(uint64_t result)
{
  uint64_t v1;

  v1 = result;
  if (dword_10020F980 <= 30)
  {
    if (dword_10020F980 != -1 || (result = _LogCategory_Initialize(&dword_10020F980, 30), (_DWORD)result))
      result = LogPrintF(&dword_10020F980, "-[AAServicesXPCConnection _shouldSendXPCMessage]_block_invoke", 30, "AAServicesXPCConnection[%#{pid}]: reset messages count %d,", objc_msgSend(*(id *)(*(_QWORD *)(v1 + 32) + 56), "processIdentifier"), *(unsigned int *)(*(_QWORD *)(v1 + 32) + 8));
  }
  *(_DWORD *)(*(_QWORD *)(v1 + 32) + 8) = 0;
  return result;
}

void sub_10001E7D8(id a1)
{
  BTSmartRoutingDaemon *v1;
  void *v2;

  v1 = objc_alloc_init(BTSmartRoutingDaemon);
  v2 = (void *)qword_1002125A0;
  qword_1002125A0 = (uint64_t)v1;

}

uint64_t sub_10001E9DC(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_10001E9EC(uint64_t a1)
{

}

void sub_10001E9F4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_descriptionWithLevel:", *(unsigned int *)(a1 + 48)));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_10001F264(_Unwind_Exception *a1)
{
  _Block_object_dispose(&STACK[0x290], 8);
  _Unwind_Resume(a1);
}

const char *sub_10001F2A8(unsigned int a1)
{
  if (a1 > 0xF)
    return "?";
  else
    return off_1001E3C88[a1];
}

void sub_10001F2CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  id obj;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  obj = *(id *)(v3 + 40);
  NSAppendPrintF(&obj, "    %@\n", a3);
  objc_storeStrong((id *)(v3 + 40), obj);
}

void sub_10001F318(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  void *v4;
  id obj;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  obj = *(id *)(v3 + 40);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a3, "bleDevice"));
  NSAppendPrintF(&obj, "    %@\n", v4);
  objc_storeStrong((id *)(v3 + 40), obj);

}

void sub_10001F37C(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  id *v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  id *v18;
  void *v19;
  unsigned int v20;
  const char *v21;
  uint64_t v22;
  id *v23;
  void *v24;
  const char *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  id *v33;
  void *v34;
  const char *v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  id obj;
  id v45;
  id v46;
  id v47;

  v4 = a3;
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v47 = *(id *)(v5 + 40);
  NSAppendPrintF(&v47, "  -------------------------------  ");
  objc_storeStrong((id *)(v5 + 40), v47);
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v46 = *(id *)(v6 + 40);
  NSAppendPrintF(&v46, "    %@\n", v4);
  objc_storeStrong((id *)(v6 + 40), v46);
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v45 = *(id *)(v7 + 40);
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "deviceAddress"));
  NSAppendPrintF(&v45, "    Address: %@\n", v8);
  objc_storeStrong((id *)(v7 + 40), v45);

  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  obj = *(id *)(v9 + 40);
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "deviceName"));
  NSAppendPrintF(&obj, "    Name: %@\n", v10);
  objc_storeStrong((id *)(v9 + 40), obj);

  v11 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v43 = *(id *)(v11 + 40);
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "deviceVersion"));
  NSAppendPrintF(&v43, "    Version: %@\n", v12);
  objc_storeStrong((id *)(v11 + 40), v43);

  v13 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v15 = *(void **)(v13 + 40);
  v14 = (id *)(v13 + 40);
  v42 = v15;
  if (objc_msgSend(v4, "inEar"))
    v16 = "yes";
  else
    v16 = "no";
  NSAppendPrintF(&v42, "    InEar: %s\n", v16);
  objc_storeStrong(v14, v42);
  v17 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v19 = *(void **)(v17 + 40);
  v18 = (id *)(v17 + 40);
  v41 = v19;
  v20 = objc_msgSend(v4, "routingAction");
  if (v20 > 5)
    v21 = "?";
  else
    v21 = off_1001E3E40[v20];
  NSAppendPrintF(&v41, "    BTAudioRoutingAction: %s\n", v21);
  objc_storeStrong(v18, v41);
  v22 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v24 = *(void **)(v22 + 40);
  v23 = (id *)(v22 + 40);
  v40 = v24;
  if (objc_msgSend(v4, "routed"))
    v25 = "yes";
  else
    v25 = "no";
  NSAppendPrintF(&v40, "    Routed: %s\n", v25);
  objc_storeStrong(v23, v40);
  v26 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v39 = *(id *)(v26 + 40);
  v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "otherTipiDeviceBTAddress"));
  NSAppendPrintF(&v39, "    OtherAddress: %@\n", v27);
  objc_storeStrong((id *)(v26 + 40), v39);

  v28 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v38 = *(id *)(v28 + 40);
  v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "otherTipiDeviceBTName"));
  NSAppendPrintF(&v38, "    OtherName: %@\n", v29);
  objc_storeStrong((id *)(v28 + 40), v38);

  v30 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v37 = *(id *)(v30 + 40);
  v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "otherTipiDeviceVersion"));
  NSAppendPrintF(&v37, "    OtherVersion: %@\n", v31);
  objc_storeStrong((id *)(v30 + 40), v37);

  v32 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v34 = *(void **)(v32 + 40);
  v33 = (id *)(v32 + 40);
  v36 = v34;
  if (objc_msgSend(v4, "isTipiHealingV2Eligible"))
    v35 = "yes";
  else
    v35 = "no";
  NSAppendPrintF(&v36, "    TipiHealingv2Eligible: %s\n", v35);
  objc_storeStrong(v33, v36);

}

void sub_10001F6D8(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  void *v4;
  id obj;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  obj = *(id *)(v3 + 40);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a3, "bleDevice"));
  NSAppendPrintF(&obj, "    %@\n", v4);
  objc_storeStrong((id *)(v3 + 40), obj);

}

void sub_10001F73C(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  double v5;
  double v6;
  double v7;
  uint64_t v8;
  double v9;
  double v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  id *v14;
  void *v15;
  void *v16;
  void *v17;
  double v18;
  double v19;
  char *v20;
  const char *v21;
  id obj;

  v4 = a3;
  objc_msgSend(v4, "lastSeenTime");
  if (v5 <= 0.0)
  {
    v8 = 0;
  }
  else
  {
    v6 = *(double *)(a1 + 40);
    objc_msgSend(v4, "lastSeenTime");
    v8 = (v6 - v7);
  }
  objc_msgSend(v4, "reportTime");
  if (v9 <= 0.0)
  {
    v12 = 0;
  }
  else
  {
    v10 = *(double *)(a1 + 40);
    objc_msgSend(v4, "reportTime");
    v12 = (v10 - v11);
  }
  v13 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v15 = *(void **)(v13 + 40);
  v14 = (id *)(v13 + 40);
  obj = v15;
  v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "deviceAddress"));
  v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "name"));
  objc_msgSend(v4, "lastBatteryLevel");
  v19 = v18;
  v20 = (char *)objc_msgSend(v4, "lastBatteryType");
  if ((unint64_t)(v20 - 1) > 3)
    v21 = "?";
  else
    v21 = off_1001E3BE8[(_QWORD)(v20 - 1)];
  NSAppendPrintF(&obj, "    DA %@, Name '%@', Battery %.0f%% (%s), Seen %{dur}, Report %{dur}\n", v16, v17, v19 * 100.0, v21, v8, v12);
  objc_storeStrong(v14, obj);

}

id sub_10001F8D8(uint64_t a1)
{
  if (dword_10020FA58 <= 30 && (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 30)))
    LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon activate]_block_invoke", 30, "BTSmartRoutingDaemon Activate");
  return _objc_msgSend(*(id *)(a1 + 32), "_activate");
}

id sub_10001FE4C(uint64_t a1)
{
  if (dword_10020FA58 <= 30 && (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 30)))
    LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _activate]_block_invoke", 30, "Low battery reset");
  return objc_msgSend(*(id *)(a1 + 32), "_lowBatteryReset");
}

id sub_10001FEBC(uint64_t a1)
{
  if (dword_10020FA58 <= 30 && (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 30)))
    LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _activate]_block_invoke_2", 30, "Prefs changed");
  return objc_msgSend(*(id *)(a1 + 32), "_prefsChanged");
}

id sub_10001FF2C(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_sigTermReceived");
}

void sub_10001FF34(uint64_t a1)
{
  const char *v2;
  void *v3;
  void *v4;
  void *v5;
  const __CFString *v6;
  void *v7;

  if (dword_10020FA58 <= 30 && (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 30)))
  {
    if (*(_BYTE *)(*(_QWORD *)(a1 + 32) + 1092))
      v2 = "yes";
    else
      v2 = "no";
    LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _activate]_block_invoke", 30, "Smart Routing sending srCapable state : %s", v2);
  }
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[CloudXPCService sharedInstance](CloudXPCService, "sharedInstance"));
  v6 = CFSTR("srCapable");
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 1092)));
  v7 = v4;
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v7, &v6, 1));
  objc_msgSend(v3, "sendCloudKitMsg:args:", CFSTR("smartRoutingCapable"), v5);

}

void sub_100020080(uint64_t a1)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  const char *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  id v17;
  uint64_t v18;
  void *v19;
  id v20;
  uint64_t v21;
  void *v22;
  NSNumber *v23;
  void *v24;
  void *v25;
  id v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  id *v30;
  uint64_t v31;
  void *v32;
  void *v33;
  id v34;
  uint64_t v35;
  void *v36;
  NSNumber *v37;
  void *v38;
  uint64_t state64;

  v2 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 1096);
  state64 = 0;
  notify_get_state(v2, &state64);
  v3 = state64;
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1112) = state64 & 0xFFFFFFFFFFFFLL;
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1104) = HIWORD(v3);
  v4 = NSPrintF("%012llx", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1112));
  v5 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(v4));
  v6 = (const char *)objc_msgSend(v5, "UTF8String");
  if (!v6)
    v6 = "";
  v7 = NSDataWithHex(v6, -1, 22, 0, 0);
  v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
  v9 = CUPrintNSDataAddress();
  v10 = (void *)objc_claimAutoreleasedReturnValue(v9);

  if (dword_10020FA58 <= 30 && (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 30)))
  {
    v11 = "no";
    v12 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1104);
    if (v12 == 10721)
      v13 = "yes";
    else
      v13 = "no";
    if (v12 == 328)
      v11 = "yes";
    LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _activate]_block_invoke_2", 30, "Smart Routing disconnect notification from bluetoothd, wx address raw %@, parsed addr %@, reason %llu, Idle budswap %s Hfp budswap %s", v5, v10, v12, v13, v11);
  }
  v14 = *(_QWORD *)(a1 + 32);
  v15 = *(_QWORD *)(v14 + 1104);
  if (v15)
  {
    if (v15 == 11818)
    {
      v16 = *(void **)(v14 + 1128);
      if (!v16)
      {
        v17 = objc_alloc_init((Class)NSMutableArray);
        v18 = *(_QWORD *)(a1 + 32);
        v19 = *(void **)(v18 + 1128);
        *(_QWORD *)(v18 + 1128) = v17;

        v16 = *(void **)(*(_QWORD *)(a1 + 32) + 1128);
      }
      objc_msgSend(v16, "addObject:", v10);
      if (dword_10020FA58 <= 30
        && (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 30)))
      {
        LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _activate]_block_invoke_2", 30, "Add device %@ to the manual backoff list", v10);
      }
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 280), "setObject:forKeyedSubscript:", &off_1001F4500, v10);
      v14 = *(_QWORD *)(a1 + 32);
      v15 = *(_QWORD *)(v14 + 1104);
    }
    if (v15 == 328)
    {
      if (*(_BYTE *)(v14 + 376))
      {
        v25 = *(void **)(v14 + 280);
        if (!v25)
        {
          v26 = objc_alloc_init((Class)NSMutableDictionary);
          v27 = *(_QWORD *)(a1 + 32);
          v28 = *(void **)(v27 + 280);
          *(_QWORD *)(v27 + 280) = v26;

          v25 = *(void **)(*(_QWORD *)(a1 + 32) + 280);
        }
        objc_msgSend(v25, "setObject:forKeyedSubscript:", &off_1001F4500, v10);
        goto LABEL_30;
      }
    }
    else if (v15 == 10721)
    {
      if (!*(_QWORD *)(v14 + 280))
      {
        v20 = objc_alloc_init((Class)NSMutableDictionary);
        v21 = *(_QWORD *)(a1 + 32);
        v22 = *(void **)(v21 + 280);
        *(_QWORD *)(v21 + 280) = v20;

      }
      v23 = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", mach_absolute_time());
      v24 = (void *)objc_claimAutoreleasedReturnValue(v23);
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 280), "setObject:forKeyedSubscript:", v24, v10);

LABEL_30:
      v29 = *(_QWORD *)(a1 + 32);
      v31 = *(_QWORD *)(v29 + 136);
      v30 = (id *)(v29 + 136);
      if (!v31)
      {
        objc_storeStrong(v30, v10);
        objc_msgSend(*(id *)(a1 + 32), "_cacheBudswapInfo:", v10);
        objc_msgSend(*(id *)(a1 + 32), "_budSwapDetectionStartTimer:", v10);
      }
      goto LABEL_45;
    }
    if (dword_10020FA58 <= 30
      && (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 30)))
    {
      LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _activate]_block_invoke_2", 30, "SmartRouting disconnect reason is NOT budswap.");
    }
    v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1192), "objectForKey:", v10));

    if (v32)
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1192), "removeObjectForKey:", v10);
    v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_getWxFWVersion:", v10));
    if (!*(_QWORD *)(*(_QWORD *)(a1 + 32) + 280))
    {
      v34 = objc_alloc_init((Class)NSMutableDictionary);
      v35 = *(_QWORD *)(a1 + 32);
      v36 = *(void **)(v35 + 280);
      *(_QWORD *)(v35 + 280) = v34;

    }
    if (objc_msgSend(CFSTR("6A221"), "compare:options:", v33, 64) == (id)-1
      && objc_msgSend(*(id *)(a1 + 32), "_isAddDeviceToBackoffDueToDisconnect"))
    {
      v37 = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", mach_absolute_time());
      v38 = (void *)objc_claimAutoreleasedReturnValue(v37);
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 280), "setObject:forKeyedSubscript:", v38, v10);

    }
    else
    {
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 280), "setObject:forKeyedSubscript:", &off_1001F4500, v10);
    }

  }
LABEL_45:

}

void sub_1000204B4(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  int v6;
  _QWORD v7[6];
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t);
  void (*v12)(uint64_t);
  id v13;

  if (dword_10020FA58 <= 30 && (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 30)))
    LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _activate]_block_invoke_3", 30, "Smart Routing BTAudioHALPlugin notification of ownership.");
  v8 = 0;
  v9 = &v8;
  v10 = 0x3032000000;
  v11 = sub_10001E9DC;
  v12 = sub_10001E9EC;
  v13 = 0;
  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(void **)(v2 + 1160);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1000206B8;
  v7[3] = &unk_1001E2D58;
  v7[4] = v2;
  v7[5] = &v8;
  objc_msgSend(v3, "enumerateKeysAndObjectsUsingBlock:", v7);
  if (v9[5])
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 200), "objectForKeyedSubscript:"));
    if (v4)
    {
      v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 200), "objectForKeyedSubscript:", v9[5]));
      if (objc_msgSend(v5, "audioStreamState") == 3)
      {
        v6 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 160), "connectedCallCount");

        if (v6 >= 1)
        {
          if (dword_10020FA58 <= 30
            && (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 30)))
          {
            LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _activate]_block_invoke_3", 30, "Smart Routing MX is taking ownership, other side is with SCO, relinquish ownership.");
          }
          objc_msgSend(*(id *)(a1 + 32), "_relayConduitMessageSend:withOptions:andWxAddress:andOtherAddress:", 1, &off_1001F4070, v9[5], 0);
        }
      }
      else
      {

      }
    }
  }
  _Block_object_dispose(&v8, 8);

}

void sub_10002069C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000206B8(uint64_t a1, void *a2, void *a3, _BYTE *a4)
{
  id v8;
  const char *v9;
  const char *v10;
  id v11;
  void *v12;
  const char *v13;
  void *v14;
  void *v15;
  id v16;

  v16 = a2;
  v8 = a3;
  if (dword_10020FA58 <= 50 && (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 50)))
  {
    if (objc_msgSend(v8, "inEar"))
      v9 = "yes";
    else
      v9 = "no";
    if (objc_msgSend(v8, "inEarDisabled"))
      v10 = "yes";
    else
      v10 = "no";
    v11 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1160), "count");
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "otherTipiDeviceBTAddress"));
    if (v12)
      v13 = "yes";
    else
      v13 = "no";
    LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _activate]_block_invoke_4", 50, "Device address %@ is inEar %s inEarDisabled %s %d in Tipi %s", v16, v9, v10, v11, v13);

  }
  if (objc_msgSend(v8, "inEarDisabled"))
  {
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "otherTipiDeviceBTAddress"));

    if (v14)
      objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a2);
  }
  if (objc_msgSend(v8, "inEar"))
  {
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "otherTipiDeviceBTAddress"));

    if (v15)
    {
      objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a2);
      *a4 = 1;
    }
  }

}

uint64_t sub_100020854(uint64_t a1)
{
  int v2;
  uint64_t result;
  uint64_t v4;
  const char *v5;
  const char *v6;
  uint64_t state64;

  v2 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 916);
  state64 = 0;
  result = notify_get_state(v2, &state64);
  v4 = state64;
  if (dword_10020FA58 <= 30)
  {
    if (dword_10020FA58 != -1 || (result = _LogCategory_Initialize(&dword_10020FA58, 30), (_DWORD)result))
    {
      v5 = "yes";
      if (*(_BYTE *)(*(_QWORD *)(a1 + 32) + 912))
        v6 = "yes";
      else
        v6 = "no";
      if (!v4)
        v5 = "no";
      result = LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _activate]_block_invoke_5", 30, "Smart Routing ringer state changed: %s -> %s", v6, v5);
    }
  }
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 912) = v4 != 0;
  return result;
}

id sub_10002091C(uint64_t a1)
{
  int v2;
  uint64_t v3;
  const char *v4;
  const char *v5;
  uint64_t state64;

  v2 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 1188);
  state64 = 0;
  notify_get_state(v2, &state64);
  v3 = state64;
  if (dword_10020FA58 <= 30 && (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 30)))
  {
    v4 = "yes";
    if (v3)
      v5 = "no";
    else
      v5 = "yes";
    if (!v3)
      v4 = "no";
    LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _activate]_block_invoke_6", 30, "Smart Routing wireless splitter state changed: %s -> %s", v5, v4);
  }
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 1184) = v3 != 0;
  return objc_msgSend(*(id *)(a1 + 32), "_updateLocalAudioCategory:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 488));
}

_QWORD *sub_1000209E4(uint64_t a1)
{
  int v2;
  uint64_t v3;
  const char *v4;
  _QWORD *result;
  uint64_t state64;

  v2 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 600);
  state64 = 0;
  notify_get_state(v2, &state64);
  v3 = state64;
  if (dword_10020FA58 <= 30 && (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 30)))
  {
    v4 = "no";
    if (v3)
      v4 = "yes";
    LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _activate]_block_invoke_7", 30, "TriangleRecovery: Received magnet link changed %s", v4);
  }
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1176), "setMagnetConnected:", v3 != 0);
  result = *(_QWORD **)(a1 + 32);
  if (result[108])
    return objc_msgSend(result, "_checkTriangleRecovery");
  return result;
}

void sub_100020B08(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  NSObject *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  NSObject *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  int v17;
  void *v18;
  NSObject *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  int v23;
  int v24;
  void *v25;
  NSObject *v26;
  uint64_t v27;
  void *v28;
  void *v29;
  NSObject *v30;
  uint64_t v31;
  void *v32;
  void *v33;
  NSObject *v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  void *v46;
  void *v47;
  NSObject *v48;
  uint64_t v49;
  void *v50;
  void *v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  int v55;
  int v56;
  int v57;
  int v58;
  void *v59;
  id v60;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(void **)(v2 + 16);
  *(_QWORD *)(v2 + 16) = 0;

  objc_msgSend(*(id *)(a1 + 32), "_activityMonitorEnsureStopped");
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(void **)(v4 + 72);
  if (v5)
  {
    *(_QWORD *)(v4 + 72) = 0;

  }
  if (dword_10020FA58 <= 30 && (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 30)))
    LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon invalidate]_block_invoke", 30, "BTSmartRoutingDaemon Invalidate");
  v6 = *(void **)(*(_QWORD *)(a1 + 32) + 24);
  if (v6)
  {
    v7 = v6;
    dispatch_source_cancel(v7);
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(void **)(v8 + 24);
    *(_QWORD *)(v8 + 24) = 0;

  }
  v10 = *(void **)(*(_QWORD *)(a1 + 32) + 144);
  if (v10)
  {
    v11 = v10;
    dispatch_source_cancel(v11);
    v12 = *(_QWORD *)(a1 + 32);
    v13 = *(void **)(v12 + 144);
    *(_QWORD *)(v12 + 144) = 0;

  }
  v14 = *(_QWORD *)(a1 + 32);
  v15 = *(void **)(v14 + 496);
  *(_QWORD *)(v14 + 496) = 0;

  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 504) = 0;
  v16 = *(_QWORD *)(a1 + 32);
  v17 = *(_DWORD *)(v16 + 508);
  if (v17 != -1)
  {
    notify_cancel(v17);
    *(_DWORD *)(*(_QWORD *)(a1 + 32) + 508) = -1;
    v16 = *(_QWORD *)(a1 + 32);
  }
  v18 = *(void **)(v16 + 512);
  if (v18)
  {
    v19 = v18;
    dispatch_source_cancel(v19);
    v20 = *(_QWORD *)(a1 + 32);
    v21 = *(void **)(v20 + 512);
    *(_QWORD *)(v20 + 512) = 0;

  }
  v22 = *(_QWORD *)(a1 + 32);
  v23 = *(_DWORD *)(v22 + 640);
  if (v23 != -1)
  {
    notify_cancel(v23);
    *(_DWORD *)(*(_QWORD *)(a1 + 32) + 640) = -1;
    v22 = *(_QWORD *)(a1 + 32);
  }
  v24 = *(_DWORD *)(v22 + 732);
  if (v24 != -1)
  {
    notify_cancel(v24);
    *(_DWORD *)(*(_QWORD *)(a1 + 32) + 732) = -1;
    v22 = *(_QWORD *)(a1 + 32);
  }
  v25 = *(void **)(v22 + 1056);
  if (v25)
  {
    v26 = v25;
    dispatch_source_cancel(v26);
    v27 = *(_QWORD *)(a1 + 32);
    v28 = *(void **)(v27 + 1056);
    *(_QWORD *)(v27 + 1056) = 0;

  }
  v29 = *(void **)(*(_QWORD *)(a1 + 32) + 1248);
  if (v29)
  {
    v30 = v29;
    dispatch_source_cancel(v30);
    v31 = *(_QWORD *)(a1 + 32);
    v32 = *(void **)(v31 + 1248);
    *(_QWORD *)(v31 + 1248) = 0;

  }
  v33 = *(void **)(*(_QWORD *)(a1 + 32) + 408);
  if (v33)
  {
    v34 = v33;
    dispatch_source_cancel(v34);
    v35 = *(_QWORD *)(a1 + 32);
    v36 = *(void **)(v35 + 408);
    *(_QWORD *)(v35 + 408) = 0;

  }
  v37 = *(_QWORD *)(a1 + 32);
  v38 = *(void **)(v37 + 1160);
  *(_QWORD *)(v37 + 1160) = 0;

  v39 = *(_QWORD *)(a1 + 32);
  v40 = *(void **)(v39 + 1200);
  *(_QWORD *)(v39 + 1200) = 0;

  v41 = *(_QWORD *)(a1 + 32);
  v42 = *(void **)(v41 + 624);
  *(_QWORD *)(v41 + 624) = 0;

  v43 = *(_QWORD *)(a1 + 32);
  v44 = *(void **)(v43 + 976);
  *(_QWORD *)(v43 + 976) = 0;

  v45 = *(_QWORD *)(a1 + 32);
  v46 = *(void **)(v45 + 992);
  *(_QWORD *)(v45 + 992) = 0;

  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 1234) = 0;
  v47 = *(void **)(*(_QWORD *)(a1 + 32) + 1360);
  if (v47)
  {
    v48 = v47;
    dispatch_source_cancel(v48);
    v49 = *(_QWORD *)(a1 + 32);
    v50 = *(void **)(v49 + 1360);
    *(_QWORD *)(v49 + 1360) = 0;

  }
  objc_msgSend(*(id *)(a1 + 32), "_evaluatorEnsureStopped");
  objc_msgSend(*(id *)(a1 + 32), "_connectedDeviceMonitorEnsureStopped");
  objc_msgSend(*(id *)(a1 + 32), "_mediaRouteMonitorEnsureStopped");
  objc_msgSend(*(id *)(a1 + 32), "_nearbyInfoDiscoveryEnsureStopped");
  objc_msgSend(*(id *)(a1 + 32), "_pipeEnsureStopped");
  objc_msgSend(*(id *)(a1 + 32), "_powerMonitorEnsureStopped");
  objc_msgSend(*(id *)(a1 + 32), "_wxDiscoveryEnsureStopped");
  objc_msgSend(*(id *)(a1 + 32), "_TUMonitorEnsureStopped");
  v60 = (id)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
  objc_msgSend(v60, "removeObserver:name:object:", *(_QWORD *)(a1 + 32), CFSTR("BTTotalIDSDeviceCountChanged"), 0);
  v51 = (void *)objc_claimAutoreleasedReturnValue(+[NSDistributedNotificationCenter defaultCenter](NSDistributedNotificationCenter, "defaultCenter"));
  objc_msgSend(v51, "removeObserver:name:object:", *(_QWORD *)(a1 + 32), CFSTR("com.apple.BTServer.TriangleRecoveryInitiated"), 0);

  v52 = *(_QWORD *)(a1 + 32);
  v53 = *(void **)(v52 + 1408);
  *(_QWORD *)(v52 + 1408) = 0;

  objc_msgSend(*(id *)(a1 + 32), "_mediaRouteDiscoveryStopped");
  v54 = *(_QWORD *)(a1 + 32);
  v55 = *(_DWORD *)(v54 + 916);
  if (v55 != -1)
  {
    notify_cancel(v55);
    *(_DWORD *)(*(_QWORD *)(a1 + 32) + 916) = -1;
    v54 = *(_QWORD *)(a1 + 32);
  }
  v56 = *(_DWORD *)(v54 + 1188);
  if (v56 != -1)
  {
    notify_cancel(v56);
    *(_DWORD *)(*(_QWORD *)(a1 + 32) + 1188) = -1;
    v54 = *(_QWORD *)(a1 + 32);
  }
  v57 = *(_DWORD *)(v54 + 1096);
  if (v57 != -1)
  {
    notify_cancel(v57);
    *(_DWORD *)(*(_QWORD *)(a1 + 32) + 1096) = -1;
    v54 = *(_QWORD *)(a1 + 32);
  }
  v58 = *(_DWORD *)(v54 + 168);
  if (v58 != -1)
  {
    notify_cancel(v58);
    *(_DWORD *)(*(_QWORD *)(a1 + 32) + 168) = -1;
    v54 = *(_QWORD *)(a1 + 32);
  }
  v59 = *(void **)(v54 + 1400);
  *(_QWORD *)(v54 + 1400) = 0;

}

uint64_t sub_10002103C(uint64_t a1)
{
  if (dword_10020FA58 <= 30 && (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 30)))
    LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon diagnosticControl:completion:]_block_invoke", 30, "Diag: Low Battery Reset");
  objc_msgSend(*(id *)(a1 + 32), "_lowBatteryReset");
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

uint64_t sub_1000210C4(uint64_t a1)
{
  if (dword_10020FA58 <= 30 && (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 30)))
    LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon diagnosticControl:completion:]_block_invoke_2", 30, "Diag: Low Battery Save");
  objc_msgSend(*(id *)(a1 + 32), "_lowBatterySave:", 1);
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

_QWORD *sub_1000231C4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 32);
  result = *(_QWORD **)(a1 + 40);
  if (v2 == result[44])
    return objc_msgSend(result, "_update");
  return result;
}

void sub_100023B64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100023B84(uint64_t a1, uint64_t a2, void *a3, _BYTE *a4)
{
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  id v11;

  v11 = a3;
  if ((objc_msgSend(v11, "deviceFlags") & 1) == 0)
    *(_BYTE *)(*(_QWORD *)(a1 + 32) + 184) = 1;
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "btAddressData"));
  v8 = CUPrintNSDataAddress();
  v9 = (void *)objc_claimAutoreleasedReturnValue(v8);

  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1160), "objectForKeyedSubscript:", v9));
  if (v10)
  {
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a3);
    *a4 = 1;
  }

}

void sub_100024DD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  uint64_t v33;

  _Block_object_dispose(&a29, 8);
  _Block_object_dispose(&a33, 8);
  _Block_object_dispose((const void *)(v33 - 200), 8);
  _Block_object_dispose((const void *)(v33 - 152), 8);
  _Unwind_Resume(a1);
}

void sub_100024E3C(uint64_t a1, uint64_t a2, void *a3, _BYTE *a4)
{
  signed int v7;
  void *v8;
  void *v9;
  id v10;

  v10 = a3;
  v7 = objc_msgSend(v10, "audioRoutingScore");
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "model"));
  if (((objc_msgSend(v8, "hasPrefix:", CFSTR("iPhone")) & 1) != 0
     || (objc_msgSend(v8, "hasPrefix:", CFSTR("iPad")) & 1) != 0
     || (objc_msgSend(v8, "hasPrefix:", CFSTR("iPod")) & 1) != 0
     || (objc_msgSend(v8, "containsString:", CFSTR("Mac")) & 1) != 0
     || objc_msgSend(v8, "hasPrefix:", CFSTR("Watch")))
    && v7 >= *(_DWORD *)(a1 + 48))
  {
    ++*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
    if (dword_10020FA58 <= 30
      && (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 30)))
    {
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "name"));
      LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _evaluatorRunTipiElection:nearbyInfoDevicesMap:localScore:]_block_invoke", 30, "Evaluator: device %@ with higher or equal ASR", v9);

    }
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a3);
    if (*(int *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) >= 2)
      *a4 = 1;
  }

}

void sub_100024FB8(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  id v12;
  void *v13;
  id v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  id v20;
  uint64_t v21;
  void *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t Int64Ranged;
  int v26;
  uint64_t Int64;
  void *v28;
  void *v29;
  int v30;
  BOOL v31;
  void *v32;
  void *v33;
  const __CFString *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  unsigned int v40;
  void *v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48;
  _BOOL4 v49;
  uint64_t v50;
  _BOOL4 v51;
  void *v52;
  void *v53;
  unsigned __int8 v54;
  unsigned __int8 v55;
  void *v56;
  uint64_t v57;
  const __CFString *v58;
  const char *v59;
  const char *v60;
  const char *v61;
  uint64_t v62;
  const char *v63;
  const char *v64;
  const char *v65;
  uint64_t CFDataOfLength;
  uint64_t v67;
  id *v68;
  uint64_t v69;
  void *v70;
  void *v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  id v76;
  uint64_t v77;
  double v78;
  double *v79;
  unsigned int v80;
  unsigned int v81;
  _BYTE *v82;
  const char *v83;
  uint64_t v84;
  void *v85;
  char *v86;
  unsigned __int16 *v87;
  _BOOL4 v90;
  uint64_t v91;
  id v92;
  id v93;
  uint64_t v94;
  void *v95;
  BTSmartRoutingNearbyStats *v96;
  uint64_t v97;
  void *v98;
  void *v99;
  uint64_t v100;
  void *v101;
  uint64_t v102;
  const char *v103;
  const char *v104;
  unsigned int v105;
  const char *v106;
  unsigned __int8 v107;
  signed int v108;
  signed int v109;
  const char *v110;
  const char *v111;
  const char *v112;
  const char *v113;
  const char *v114;
  const char *v115;
  uint64_t v116;
  const char *v117;
  void *v118;
  unsigned __int8 v119;
  const char *v120;
  id v121;
  unsigned __int8 v122;
  int v123;
  uint64_t v124;
  id v125;
  id v126;
  int v127;
  _QWORD v128[7];
  id v129;
  void *v130;
  uint64_t v131;
  uint64_t *v132;
  int v133;
  int v134;
  unsigned int v135;
  char v136;
  unsigned __int8 v137;
  unsigned __int8 v138;
  BOOL v139;
  BOOL v140;
  uint64_t v141;
  uint64_t *v142;
  uint64_t v143;
  char v144;

  v5 = a2;
  v6 = a3;
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "bleDevice"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "advertisementFields"));

  if (CFDictionaryGetInt64(v8, CFSTR("paired"), 0))
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "bleDevice"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "bluetoothAddress"));

    if (objc_msgSend(v10, "length") == (id)6)
    {
      v11 = NSPrintF("%.6a", COERCE_DOUBLE(objc_msgSend(objc_retainAutorelease(v10), "bytes")));
      v12 = (id)objc_claimAutoreleasedReturnValue(v11);

    }
    else
    {
      v12 = 0;
    }
    v13 = *(void **)(*(_QWORD *)(a1 + 32) + 280);
    if (!v13)
    {
      v14 = objc_alloc_init((Class)NSMutableDictionary);
      v15 = *(_QWORD *)(a1 + 32);
      v16 = *(void **)(v15 + 280);
      *(_QWORD *)(v15 + 280) = v14;

      v13 = *(void **)(*(_QWORD *)(a1 + 32) + 280);
    }
    v17 = objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "objectForKeyedSubscript:", v12));
    if (v17)
    {
      v18 = (void *)v17;
      v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 280), "objectForKeyedSubscript:", v12));
      v20 = objc_msgSend(v19, "unsignedLongLongValue");

      if (v20)
      {
        v21 = mach_absolute_time();
        v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 280), "objectForKeyedSubscript:", v12));
        v23 = UpTicksToSeconds(v21 - (_QWORD)objc_msgSend(v22, "unsignedLongLongValue"));

        v24 = *(_QWORD *)(a1 + 32);
        if (!*(_BYTE *)(v24 + 152))
        {
          v30 = *(unsigned __int8 *)(v24 + 696);
          v31 = v23 < 0xA || v30 == 0;
          if (v31 && v23 <= 0x1D)
          {
            if (dword_10020FA58 <= 30
              && (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 30)))
            {
              LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _evaluatorRunTipiElection:nearbyInfoDevicesMap:localScore:]_block_invoke_2", 30, "Evaluator: skip, too soon since device %@ disconnection, %ll{dur} remaining", v12, 30 - v23);
            }
            v33 = *(void **)(a1 + 32);
            v34 = CFSTR("Too soon since last disconnection");
            goto LABEL_36;
          }
        }
      }
    }
    if (!v12 || (objc_msgSend(*(id *)(a1 + 32), "_supportsTipi:", v12) & 1) == 0)
    {
      if (dword_10020FA58 <= 30
        && (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 30)))
      {
        v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "name"));
        LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _evaluatorRunTipiElection:nearbyInfoDevicesMap:localScore:]_block_invoke_2", 30, "Evaluator: skip, eligible headset %@ with address %@ is not running correct OS version", v29, v12);

      }
      v33 = *(void **)(a1 + 32);
      v34 = CFSTR("Headset is not running correct OS version");
      goto LABEL_36;
    }
    Int64Ranged = CFDictionaryGetInt64Ranged(v8, CFSTR("subType"), 0, 0xFFFFFFFFLL, 0);
    if ((_DWORD)Int64Ranged != 1)
    {
      if (dword_10020FA58 <= 30
        && (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 30)))
      {
        v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "name"));
        LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _evaluatorRunTipiElection:nearbyInfoDevicesMap:localScore:]_block_invoke_2", 30, "Evaluator: skip, headset %@ is not in status subtype, current subtype is %u", v32, Int64Ranged);

      }
      v33 = *(void **)(a1 + 32);
      v34 = CFSTR("Headset is not in status subtype");
      goto LABEL_36;
    }
    v26 = CFDictionaryGetInt64Ranged(v8, CFSTR("hsStatus"), 0, 0xFFFFFFFFLL, 0);
    if ((v26 & 8) != 0)
    {
      if (dword_10020FA58 <= 30
        && (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 30)))
      {
        v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "name"));
        LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _evaluatorRunTipiElection:nearbyInfoDevicesMap:localScore:]_block_invoke_2", 30, "Evaluator: skip, headset %@ is in airplane mode", v35);

      }
      v33 = *(void **)(a1 + 32);
      v34 = CFSTR("Headset is in airplane mode");
      goto LABEL_36;
    }
    Int64 = CFDictionaryGetInt64(v8, CFSTR("lc"), 0);
    if ((~v26 & 0x12) == 0 && Int64)
    {
      if (dword_10020FA58 <= 30
        && (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 30)))
      {
        v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "name"));
        LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _evaluatorRunTipiElection:nearbyInfoDevicesMap:localScore:]_block_invoke_2", 30, "Evaluator: skip, headset %@ is in case with lid closed", v28);

      }
      v33 = *(void **)(a1 + 32);
      v34 = CFSTR("Headset is in case with lid closed");
      goto LABEL_36;
    }
    if (objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1128), "containsObject:", v12))
    {
      if (dword_10020FA58 <= 30
        && (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 30)))
      {
        v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "name"));
        LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _evaluatorRunTipiElection:nearbyInfoDevicesMap:localScore:]_block_invoke_2", 30, "Evaluator: skip, headset %@ is part of manual disconnection list.", v36);

      }
      v33 = *(void **)(a1 + 32);
      v34 = CFSTR("Headset is part of manual disconnection list");
      goto LABEL_36;
    }
    v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 200), "objectForKeyedSubscript:", v12));

    if (v37)
    {
      if (dword_10020FA58 <= 30
        && (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 30)))
      {
        v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "name"));
        LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _evaluatorRunTipiElection:nearbyInfoDevicesMap:localScore:]_block_invoke_2", 30, "Evaluator: skip, we are already connected to %@", v38);

      }
      v33 = *(void **)(a1 + 32);
      v34 = CFSTR("Headset already connected");
      goto LABEL_36;
    }
    v39 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1160), "objectForKeyedSubscript:", v12));
    v40 = objc_msgSend(v39, "connected");

    if (v40)
    {
      if (dword_10020FA58 <= 30
        && (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 30)))
      {
        v41 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "name"));
        LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _evaluatorRunTipiElection:nearbyInfoDevicesMap:localScore:]_block_invoke_2", 30, "Evaluator: skip, we are already connected to %@ but haven't received connected event yet", v41);

      }
      v33 = *(void **)(a1 + 32);
      v34 = CFSTR("Headset already connected but haven't received connected event yet");
      goto LABEL_36;
    }
    v42 = CFDictionaryGetInt64Ranged(v8, CFSTR("aState"), 0xFFFFFFFF80000000, 0x7FFFFFFFLL, 0);
    v127 = v26 & 0x24;
    v43 = CFDictionaryGetInt64Ranged(v8, CFSTR("pid"), 0, 0xFFFFFFFFLL, 0);
    if (objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1160), "count"))
    {
      if (v42 && (objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 136), "isEqual:", v12) & 1) == 0)
      {
        if (dword_10020FA58 <= 30
          && (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 30)))
        {
          v53 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "name"));
          LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _evaluatorRunTipiElection:nearbyInfoDevicesMap:localScore:]_block_invoke_2", 30, "Evaluator: headset %@ not idle and we already have a SR device connected, back off", v53);

        }
        v33 = *(void **)(a1 + 32);
        v34 = CFSTR("Headset not idle and we already have a SR device connected, back off");
        goto LABEL_36;
      }
      if (((v26 & 0x24) != 0 || objc_msgSend(*(id *)(a1 + 32), "_bluetoothProductIDNoEarDetect:", v43))
        && objc_msgSend(*(id *)(a1 + 32), "_isAnyConnectedWxInEarCheck")
        && (objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 136), "isEqual:", v12) & 1) == 0)
      {
        if (dword_10020FA58 <= 30
          && (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 30)))
        {
          v56 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "name"));
          LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _evaluatorRunTipiElection:nearbyInfoDevicesMap:localScore:]_block_invoke_2", 30, "Evaluator: already have an inEar SR device connected, and current headset is already inEar, back off", v56);

        }
        v33 = *(void **)(a1 + 32);
        v34 = CFSTR("already have an inEar SR device connected, and current headset is already inEar, back off");
        goto LABEL_36;
      }
    }
    v44 = CFDictionaryGetInt64Ranged(v8, CFSTR("asCount"), 0, 0xFFFFFFFFLL, 0);
    v45 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1176), "incomingCallRingtone");
    v46 = *(_QWORD *)(a1 + 32);
    if (v45 && (_DWORD)v44 == 2 && !*(_BYTE *)(v46 + 152))
    {
      if (dword_10020FA58 <= 30
        && (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 30)))
      {
        LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _evaluatorRunTipiElection:nearbyInfoDevicesMap:localScore:]_block_invoke_2", 30, "Evaluator: skip, ringtone shall not participate tipi election when Airpods already have two device connected.");
      }
      goto LABEL_125;
    }
    v124 = v44;
    v47 = objc_msgSend(*(id *)(v46 + 488), "intValue");
    v48 = *(_QWORD *)(a1 + 32);
    v49 = (*(_BYTE *)(v48 + 696) || (int)objc_msgSend(*(id *)(v48 + 488), "intValue") >= 301) && v42 == 0;
    v50 = *(_QWORD *)(a1 + 32);
    v51 = v47 == 401 || *(_QWORD *)(v50 + 680) != 0;
    if (*(_BYTE *)(v50 + 152))
      v49 = 1;
    if ((v26 & 0x24) == 0)
      v49 = 0;
    if (*(_BYTE *)(v50 + 1233) && (!v49 || v51))
    {
      if (dword_10020FA58 <= 30
        && (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 30)))
      {
        LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _evaluatorRunTipiElection:nearbyInfoDevicesMap:localScore:]_block_invoke_2", 30, "Evaluator: Skip, OnDemand connect criteria not met");
      }
LABEL_125:
      v33 = *(void **)(a1 + 32);
      v34 = CFSTR("Ringtone shall not participate tipi election when Airpods already have two device connected");
LABEL_36:
      objc_msgSend(v33, "_logEvalWxError:withError:", v12, v34);
LABEL_37:

      goto LABEL_38;
    }
    if ((v26 & 0x24) == 0 && *(_BYTE *)(v50 + 184))
    {
      if (dword_10020FA58 <= 30
        && (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 30)))
      {
        v52 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "name"));
        LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _evaluatorRunTipiElection:nearbyInfoDevicesMap:localScore:]_block_invoke_2", 30, "Evaluator: skip, eligible headset %@ with address %@ is not in ear and a third party BT device is already connected", v52, v12);

      }
      v33 = *(void **)(a1 + 32);
      v34 = CFSTR("Headset is not in ear and a third party BT device is already connected");
      goto LABEL_36;
    }
    v123 = v49 && !v51;
    v54 = CFDictionaryGetInt64Ranged(v8, CFSTR("srAudioRoutingScore1"), 0, 255, 0);
    v55 = CFDictionaryGetInt64Ranged(v8, CFSTR("srAudioRoutingScore2"), 0, 255, 0);
    v122 = v54;
    if (v54 == 8 && (_DWORD)v124 || (_DWORD)v124 == 2 && v55 == 8)
    {
      if (dword_10020FA58 <= 30
        && (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 30)))
      {
        LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _evaluatorRunTipiElection:nearbyInfoDevicesMap:localScore:]_block_invoke_2", 30, "Evaluator: skip, SR disabled on current connected source");
      }
      v33 = *(void **)(a1 + 32);
      v34 = CFSTR("SR disabled on current connected source");
      goto LABEL_36;
    }
    v119 = v55;
    if (v123)
    {
      v57 = *(_QWORD *)(a1 + 32);
      if (*(_BYTE *)(v57 + 152))
      {
        v58 = CFSTR("Call");
LABEL_132:
        objc_msgSend(*(id *)(v57 + 1216), "setOnDemandCategory:", v58);
        goto LABEL_133;
      }
      if (*(_BYTE *)(v57 + 696))
      {
        v58 = CFSTR("Media");
        goto LABEL_132;
      }
    }
LABEL_133:
    if (dword_10020FA58 <= 30
      && (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 30)))
    {
      v59 = "no";
      if ((v26 & 0x24) != 0)
        v60 = "yes";
      else
        v60 = "no";
      v120 = v60;
      if (v123)
        v61 = "yes";
      else
        v61 = "no";
      v117 = v61;
      v62 = *(_QWORD *)(a1 + 32);
      if (*(_BYTE *)(v62 + 152))
        v63 = "yes";
      else
        v63 = "no";
      if (*(_BYTE *)(v62 + 696))
        v59 = "yes";
      v114 = v59;
      v115 = v63;
      if (v42 >> 2)
        v64 = "?";
      else
        v64 = off_1001E3C08[v42];
      v113 = v64;
      v112 = sub_10001F2A8(v54);
      v65 = sub_10001F2A8(v119);
      LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _evaluatorRunTipiElection:nearbyInfoDevicesMap:localScore:]_block_invoke_2", 30, "Evaluator: headset %@ sources %d inEar %s connectForCallA2DP %s callConnected %s playbackStart %s audioState %s TipiScore1 %s TipiScore2 %s", v12, v124, v120, v117, v115, v114, v113, v112, v65);
    }
    CFDataOfLength = CFDictionaryGetCFDataOfLength(v8, CFSTR("lch"), 3, 0);
    v121 = (id)objc_claimAutoreleasedReturnValue(CFDataOfLength);
    if ((_DWORD)v124)
    {
      v141 = 0;
      v142 = &v141;
      v143 = 0x2020000000;
      v144 = 0;
      v116 = CFDictionaryGetInt64(v8, CFSTR("srConnected"), 0);
      v118 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_getWxFWVersion:", v12));
      if (!v121)
      {
LABEL_221:

        _Block_object_dispose(&v141, 8);
        goto LABEL_222;
      }
      if (objc_msgSend(*(id *)(a1 + 32), "_isEligibleForTipiV2:firstDeviceTipiScore:secondDeviceTipiScore:currentDeviceScore:sourceDeviceCount:isOnDemandConnect:address:lastConnectedHost:", v118, v54, v5, v121))
      {
        objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1216), "setSetupSupportsTipiv2:", 1);
        if (dword_10020FA58 <= 30
          && (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 30)))
        {
          LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _evaluatorRunTipiElection:nearbyInfoDevicesMap:localScore:]_block_invoke_2", 30, "Eligible for Tipi2.0!");
        }
        v90 = v119 < 8u && *(_DWORD *)(a1 + 64) <= (int)v119;
        if (v119 == 15 || v90)
        {
          if (dword_10020FA58 <= 30
            && (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 30)))
          {
            LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _evaluatorRunTipiElection:nearbyInfoDevicesMap:localScore:]_block_invoke_2", 30, "Evaluator: backoff, another device is actively connecting or current score is less than secondary device");
          }
          goto LABEL_221;
        }
        if ((objc_msgSend(*(id *)(a1 + 32), "_isDevicePairedCheck:", v121) & 1) == 0)
        {
          if (dword_10020FA58 <= 30
            && (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 30)))
          {
            LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _evaluatorRunTipiElection:nearbyInfoDevicesMap:localScore:]_block_invoke_2", 30, "Evaluator: backoff, lastConnectedHost is not signed into the same iCloud account as this host device");
          }
          goto LABEL_221;
        }
        *(_BYTE *)(*(_QWORD *)(a1 + 32) + 1234) = 1;
        objc_msgSend(*(id *)(a1 + 32), "_setPhase1ConnectConfig:andType:", v12, 3);
        objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1216), "setWxTipiScore1:", v54);
        objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1216), "setWxTipiScore2:", v119);
        objc_msgSend(*(id *)(a1 + 32), "_setTipiElectionType:withDevice:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 1234), 0);
        v73 = *(_QWORD *)(a1 + 40);
        v91 = *(_QWORD *)(v73 + 8);
        if ((v26 & 0x24) != 0 || !*(_QWORD *)(v91 + 40))
        {
          v92 = v6;
          v72 = *(void **)(v91 + 40);
          *(_QWORD *)(v91 + 40) = v92;
LABEL_206:

          goto LABEL_221;
        }
      }
      else
      {
        if (*(int *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) >= 2 && !v123)
        {
          if (dword_10020FA58 > 30
            || dword_10020FA58 == -1 && !_LogCategory_Initialize(&dword_10020FA58, 30))
          {
            goto LABEL_221;
          }
          v72 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "name"));
          LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _evaluatorRunTipiElection:nearbyInfoDevicesMap:localScore:]_block_invoke_2", 30, "Evaluator: not eligible for tipiv2, skip tipi election for %@ as two devices with higher or equal ASRs", v72);
          goto LABEL_206;
        }
        v73 = *(_QWORD *)(a1 + 40);
      }
      v74 = *(_QWORD *)(a1 + 32);
      v75 = *(void **)(v74 + 560);
      v128[0] = _NSConcreteStackBlock;
      v128[1] = 3221225472;
      v128[2] = sub_1000266F4;
      v128[3] = &unk_1001E2DD0;
      v128[4] = v74;
      v128[5] = v121;
      v128[6] = v12;
      v136 = v123;
      v137 = v122;
      v133 = v124;
      v138 = v119;
      v131 = v73;
      v132 = &v141;
      v139 = (v26 & 0x24) != 0;
      v134 = v26;
      v135 = v42;
      v76 = v6;
      v129 = v76;
      v130 = v118;
      v140 = v116 != 0;
      objc_msgSend(v75, "enumerateKeysAndObjectsUsingBlock:", v128);
      if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40)
        || !*(_QWORD *)(*(_QWORD *)(a1 + 32) + 816)
        || (v77 = mach_absolute_time(),
            v78 = (double)(unint64_t)UpTicksToSeconds(v77 - *(_QWORD *)(*(_QWORD *)(a1 + 32) + 816)),
            v79 = *(double **)(a1 + 32),
            v79[103] >= v78))
      {
LABEL_170:

        goto LABEL_221;
      }
      v80 = objc_msgSend(v79, "_isDevicePairedCheck:", v121);
      if (*(_BYTE *)(*(_QWORD *)(a1 + 32) + 852))
        v81 = v80;
      else
        v81 = 0;
      if (v81 != 1
        || *((_BYTE *)v142 + 24)
        || (v93 = objc_msgSend(CFSTR("5A274"), "compare:options:", v118, 64), !v127)
        || v93 != (id)-1)
      {
LABEL_178:
        if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40)
          && (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = 1,
              *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40))
          || (v82 = *(_BYTE **)(a1 + 32), !v82[803])
          || *((_BYTE *)v142 + 24)
          || !v116)
        {
LABEL_275:
          if (*((_BYTE *)v142 + 24)
            && *(_BYTE *)(*(_QWORD *)(a1 + 32) + 803)
            && dword_10020FA58 <= 30
            && (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 30)))
          {
            LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _evaluatorRunTipiElection:nearbyInfoDevicesMap:localScore:]_block_invoke_2", 30, "Evaluator: Back off from Forced Disconnect.");
          }
          goto LABEL_170;
        }
        v126 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v82, "_myBluetoothAddressString")));
        v83 = (const char *)objc_msgSend(v126, "UTF8String");
        if (!v83)
          v83 = "";
        v84 = NSDataWithHex(v83, -1, 22, 0, 0);
        v85 = (void *)objc_claimAutoreleasedReturnValue(v84);
        if (objc_msgSend(v85, "length") == (id)6)
        {
          v86 = (char *)objc_msgSend(objc_retainAutorelease(v85), "bytes");
          v87 = (unsigned __int16 *)objc_msgSend(objc_retainAutorelease(v121), "bytes");
          if (*v87 == *(unsigned __int16 *)(v86 + 3) && *((unsigned __int8 *)v87 + 2) == v86[5])
          {
            if (dword_10020FA58 > 30)
            {
LABEL_232:
              if (objc_msgSend(*(id *)(a1 + 32), "_isDevicePairedCheck:", v121))
              {
                v94 = *(_QWORD *)(a1 + 32);
                if (!*(_BYTE *)(v94 + 360))
                {
                  v95 = *(void **)(v94 + 584);
                  if (!v95)
                  {
                    v96 = objc_alloc_init(BTSmartRoutingNearbyStats);
                    v97 = *(_QWORD *)(a1 + 32);
                    v98 = *(void **)(v97 + 584);
                    *(_QWORD *)(v97 + 584) = v96;

                    v95 = *(void **)(*(_QWORD *)(a1 + 32) + 584);
                  }
                  objc_msgSend(v95, "setNoNearbyDeviceFoundCount:", objc_msgSend(v95, "noNearbyDeviceFoundCount") + 1);
                  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 584), "setSRConnectedSetCount:", objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 584), "SRConnectedSetCount") + 1);
                  v99 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v76, "bleDevice"));
                  v125 = objc_msgSend(v99, "rssi");

                  if ((int)objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 584), "minRSSIHeadset") > (int)v125)
                    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 584), "setMinRSSIHeadset:", v125);
                  if (!v118 || objc_msgSend(CFSTR("4A345"), "compare:options:", v118, 64) == (id)1)
                    *((_BYTE *)v142 + 24) = 1;
                  v100 = *(_QWORD *)(a1 + 32);
                  if (*(int *)(v100 + 1012) < 3 || !v127 || *(_DWORD *)(v100 + 364) > (int)v125)
                    *((_BYTE *)v142 + 24) = 1;
                  if (dword_10020FA58 <= 30
                    && (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 30)))
                  {
                    v101 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v76, "name"));
                    v102 = *(_QWORD *)(a1 + 32);
                    v103 = sub_10001F2A8(*(_DWORD *)(v102 + 1012));
                    v104 = "no";
                    if (v127)
                      v104 = "yes";
                    LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _evaluatorRunTipiElection:nearbyInfoDevicesMap:localScore:]_block_invoke_2", 30, "Evaluator: forced disconnect back off check, headset %@, FW version %@ > %@, current device audio score %s, headset inEar %s, Headset RSSI: %d > %d , FD bit %s", v101, v118, CFSTR("4A345"), v103, v104, v125, *(unsigned int *)(v102 + 364), "yes");

                  }
                  if (!*((_BYTE *)v142 + 24))
                  {
                    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a3);
                    *(_BYTE *)(*(_QWORD *)(a1 + 32) + 360) = 1;
                    if (dword_10020FA58 <= 30
                      && (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 30)))
                    {
                      LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _evaluatorRunTipiElection:nearbyInfoDevicesMap:localScore:]_block_invoke_2", 30, "Evaluator: Forced Disconnect fires");
                    }
                  }
                }
              }

              goto LABEL_275;
            }
            if (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 30))
              LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _evaluatorRunTipiElection:nearbyInfoDevicesMap:localScore:]_block_invoke_2", 30, "Evaluator: This is the device that will be forced disconnect");
          }
        }
        if (dword_10020FA58 <= 30
          && (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 30)))
        {
          LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _evaluatorRunTipiElection:nearbyInfoDevicesMap:localScore:]_block_invoke_2", 30, "Evaluator: did not find any nearby devices that match address, check forced disconnect logic...");
        }
        goto LABEL_232;
      }
      if (dword_10020FA58 <= 30
        && (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 30)))
      {
        LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _evaluatorRunTipiElection:nearbyInfoDevicesMap:localScore:]_block_invoke_2", 30, "Evaluator: can't see nearby device; current wx connected device count %d",
          v124);
      }
      v105 = CFDictionaryGetInt64Ranged(v8, CFSTR("srAudioRoutingScore1"), 0, 255, 0);
      if ((_DWORD)v124 == 1 && v105 && v105 <= 3)
      {
        if (dword_10020FA58 <= 30
          && (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 30)))
        {
          v106 = sub_10001F2A8(v105);
          LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _evaluatorRunTipiElection:nearbyInfoDevicesMap:localScore:]_block_invoke_2", 30, "Evaluator: can't see nearby device; Only one source is connected, Phase1 connect, current source device score %s",
            v106);
        }
        goto LABEL_265;
      }
      if ((_DWORD)v124 != 2)
        goto LABEL_178;
      v107 = CFDictionaryGetInt64Ranged(v8, CFSTR("srAudioRoutingScore2"), 0, 255, 0);
      if (v105 - 1 > 2)
        goto LABEL_178;
      v108 = v107;
      if (!v107)
        goto LABEL_178;
      v109 = *(_DWORD *)(a1 + 64);
      if (v109 <= v108)
        goto LABEL_178;
      if (dword_10020FA58 > 30)
        goto LABEL_265;
      if (dword_10020FA58 == -1)
      {
        if (!_LogCategory_Initialize(&dword_10020FA58, 30))
          goto LABEL_265;
        v109 = *(_DWORD *)(a1 + 64);
      }
      v110 = sub_10001F2A8(v109);
      v111 = sub_10001F2A8(v108);
      LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _evaluatorRunTipiElection:nearbyInfoDevicesMap:localScore:]_block_invoke_2", 30, "Evaluator: can't see nearby device; two source devices are connected, current device score %s is higher than tip"
        "i device 2 score %s; Phase1 connect",
        v110,
        v111);
LABEL_265:
      objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a3);
      goto LABEL_178;
    }
    v67 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v69 = *(_QWORD *)(v67 + 40);
    v68 = (id *)(v67 + 40);
    if (v69)
    {
      if ((v26 & 0x24) == 0)
      {
LABEL_222:

        goto LABEL_37;
      }
      if (dword_10020FA58 <= 30
        && (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 30)))
      {
        v70 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 336), "name"));
        v71 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "name"));
        LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _evaluatorRunTipiElection:nearbyInfoDevicesMap:localScore:]_block_invoke_2", 30, "Evaluator: overwritting priority of headset based on inEar from %@ to %@", v70, v71);

      }
      v68 = (id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
    }
    objc_storeStrong(v68, a3);
    goto LABEL_222;
  }
LABEL_38:

}

void sub_1000266B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 120), 8);
  _Unwind_Resume(a1);
}

void sub_1000266F4(uint64_t a1, uint64_t a2, void *a3)
{
  void *v4;
  void *v5;
  uint64_t CFDataOfLength;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  unsigned int v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  unsigned int v19;
  const char *v20;
  char *v21;
  unsigned __int16 *v22;
  void *v24;
  unsigned __int8 v25;
  void *v26;
  int v27;
  void *v28;
  void *v29;
  uint64_t v30;
  id v31;
  void *v32;
  int v33;
  void *v34;
  BTSmartRoutingNearbyStats *v35;
  uint64_t v36;
  void *v37;
  void *v38;
  void *v39;
  uint64_t v40;
  id v41;
  id v42;

  v42 = a3;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v42, "bleDevice"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "advertisementFields"));

  CFDataOfLength = CFDictionaryGetCFDataOfLength(v5, CFSTR("bdAddr"), 6, 0);
  v7 = (void *)objc_claimAutoreleasedReturnValue(CFDataOfLength);
  v8 = v7;
  if (v7)
  {
    v9 = v7;
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v42, "model"));
    v11 = objc_msgSend(v10, "containsString:", CFSTR("Mac"));

    if (v11)
    {
      v12 = *(void **)(a1 + 32);
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v42, "idsIdentifier"));
      v14 = objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "_nearbyMacAddressTranslate:", v13));

      v9 = (id)v14;
      if (!v14)
        goto LABEL_16;
    }
    if (dword_10020FA58 <= 30
      && (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 30)))
    {
      v15 = *(_QWORD *)(a1 + 40);
      v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v42, "identifier"));
      v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "UUIDString"));
      v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v42, "name"));
      v19 = objc_msgSend(v42, "audioRoutingScore");
      if (v19 > 0xF)
        v20 = "?";
      else
        v20 = off_1001E3C88[v19];
      LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _evaluatorRunTipiElection:nearbyInfoDevicesMap:localScore:]_block_invoke_3", 30, "Evaluator: comparing, Wx: %@, ND: %@, ID %@ Name '%@' NS %s", v15, v9, v17, v18, v20);

    }
    v9 = objc_retainAutorelease(v9);
    v21 = (char *)objc_msgSend(v9, "bytes");
    v22 = (unsigned __int16 *)objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 40)), "bytes");
    if (*v22 != *(unsigned __int16 *)(v21 + 3) || *((unsigned __int8 *)v22 + 2) != v21[5])
      goto LABEL_16;
    if (objc_msgSend(v42, "audioRoutingScore")
      && (v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v42, "model")),
          v25 = objc_msgSend(v24, "hasPrefix:", CFSTR("Watch")),
          v24,
          (v25 & 1) == 0))
    {
      if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 40))
      {
        objc_msgSend(*(id *)(a1 + 32), "_setTipiElectionType:withDevice:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 1234), v42);
        if (!*(_BYTE *)(a1 + 100)
          || *(_BYTE *)(a1 + 101) == 8
          || *(_DWORD *)(a1 + 88) == 2 && *(_BYTE *)(a1 + 102) == 8)
        {
          goto LABEL_41;
        }
        goto LABEL_24;
      }
      if ((*(_BYTE *)(a1 + 92) & 0x24) != 0)
      {
        objc_msgSend(*(id *)(a1 + 32), "_setTipiElectionType:withDevice:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 1234), v42);
        if (*(_BYTE *)(a1 + 100)
          && *(_BYTE *)(a1 + 101) != 8
          && (*(_DWORD *)(a1 + 88) != 2 || *(_BYTE *)(a1 + 102) != 8))
        {
          objc_msgSend(*(id *)(a1 + 32), "_setPhase1ConnectConfig:andType:", *(_QWORD *)(a1 + 48), 2);
        }
        if (dword_10020FA58 <= 30
          && (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 30)))
        {
          v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8)
                                                                             + 40), "name"));
          v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "name"));
          LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _evaluatorRunTipiElection:nearbyInfoDevicesMap:localScore:]_block_invoke_3", 30, "Evaluator: overwritting priority of headset based on inEar from %@ to %@", v28, v29);

        }
        goto LABEL_41;
      }
    }
    else
    {
      v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v42, "model"));
      if (!objc_msgSend(v26, "hasPrefix:", CFSTR("Watch")))
      {
LABEL_42:

        goto LABEL_43;
      }
      v27 = *(unsigned __int8 *)(a1 + 100);

      if (v27 && !*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 40))
      {
        objc_msgSend(*(id *)(a1 + 32), "_setTipiElectionType:withDevice:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 1234), v42);
LABEL_24:
        objc_msgSend(*(id *)(a1 + 32), "_setPhase1ConnectConfig:andType:", *(_QWORD *)(a1 + 48), 2);
LABEL_41:
        v30 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8);
        v31 = *(id *)(a1 + 56);
        v26 = *(void **)(v30 + 40);
        *(_QWORD *)(v30 + 40) = v31;
        goto LABEL_42;
      }
    }
LABEL_43:
    if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 40) && *(_BYTE *)(*(_QWORD *)(a1 + 32) + 803))
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 24) = 1;
    if (!*(_BYTE *)(a1 + 103))
      goto LABEL_16;
    v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v42, "model"));
    if (objc_msgSend(v32, "hasPrefix:", CFSTR("Watch")))
    {
      v33 = *(_DWORD *)(a1 + 96);

      if (v33)
        goto LABEL_16;
      v34 = *(void **)(*(_QWORD *)(a1 + 32) + 584);
      if (!v34)
      {
        v35 = objc_alloc_init(BTSmartRoutingNearbyStats);
        v36 = *(_QWORD *)(a1 + 32);
        v37 = *(void **)(v36 + 584);
        *(_QWORD *)(v36 + 584) = v35;

        v34 = *(void **)(*(_QWORD *)(a1 + 32) + 584);
      }
      objc_msgSend(v34, "setNearbyDeviceNoTipiScoreCount:", objc_msgSend(v34, "nearbyDeviceNoTipiScoreCount") + 1);
      if (objc_msgSend(CFSTR("4E20"), "compare:options:", *(_QWORD *)(a1 + 64), 64) != (id)1 && !*(_BYTE *)(a1 + 104))
        goto LABEL_16;
      if (dword_10020FA58 <= 30
        && (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 30)))
      {
        v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "name"));
        LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _evaluatorRunTipiElection:nearbyInfoDevicesMap:localScore:]_block_invoke_3", 30, "Evaluator: headset %@ is inEar and it's connected to watch & it's idle, force phase1", v38);

      }
      v39 = *(void **)(a1 + 56);
      v40 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8);
      v41 = v39;
      v32 = *(void **)(v40 + 40);
      *(_QWORD *)(v40 + 40) = v41;
    }

LABEL_16:
  }

}

void sub_100026C1C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  int v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  __CFString *v13;
  __CFString *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  id v20;
  void *v21;
  void *v22;
  void *v23;
  unint64_t v24;
  const char *v25;
  void *v26;
  void *v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  void *v31;
  void *v32;

  v3 = a2;
  v4 = v3;
  if (!v3)
    goto LABEL_64;
  v32 = v3;
  if (dword_10020FA58 <= 90)
  {
    if (dword_10020FA58 != -1 || (v6 = _LogCategory_Initialize(&dword_10020FA58, 90), v4 = v32, v6))
    {
      v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 480), "name"));
      LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _evaluatorRunTipiElection:nearbyInfoDevicesMap:localScore:]_block_invoke_4", 90, "Evaluator: Setting LE Pipe send failed: %@, %{error}", v5, v32);

      v4 = v32;
    }
  }
  v7 = objc_msgSend(*(id *)(a1 + 32), "_setOtherTipiDeviceBTAddress:andName:sourceVersion:withResult:", 0, 0, 0, v4);
  if (GestaltGetDeviceClass(v7, v8) == 6)
  {
    *(_BYTE *)(*(_QWORD *)(a1 + 32) + 1356) = 0;
    objc_msgSend(*(id *)(a1 + 32), "_update");
  }
  v9 = CUPrintNSError(v32);
  v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
  if (objc_msgSend(v32, "code") == (id)-6709)
  {
    if (dword_10020FA58 <= 90
      && (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 90)))
    {
      LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _evaluatorRunTipiElection:nearbyInfoDevicesMap:localScore:]_block_invoke_4", 90, "Evaluator: SR setting is disabled with this device, DO NOT add to backoff list until we have global setting across devices");
    }
    goto LABEL_57;
  }
  if (objc_msgSend(*(id *)(a1 + 32), "_isOnDemandConnectInProgress")
    && objc_msgSend(v10, "isEqualToString:", CFSTR("kUnknownErr (Cleanup before done)")))
  {
    if (dword_10020FA58 <= 90
      && (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 90)))
    {
      LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _evaluatorRunTipiElection:nearbyInfoDevicesMap:localScore:]_block_invoke_4", 90, "Evaluator: pipe failure due to onDemand connect");
    }
    goto LABEL_57;
  }
  v11 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_getWxFWVersion:", *(_QWORD *)(a1 + 40)));
  v12 = (void *)v11;
  v13 = &stru_1001ED4C0;
  if (v11)
    v13 = (__CFString *)v11;
  v14 = v13;

  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), "identifier"));
  v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "UUIDString"));

  if (v16)
  {
    v17 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 592), "objectForKeyedSubscript:", v16));
    if (v17)
    {
      v18 = (void *)v17;
      v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 592), "objectForKeyedSubscript:", v16));
      v20 = objc_msgSend(v19, "audioState");

      if (!v20 && objc_msgSend(CFSTR("5A187"), "compare:options:", v14, 64) == (id)-1)
      {
        v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1176), "isFirstConnectionAfterSREnable"));
        v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "objectForKey:", *(_QWORD *)(a1 + 40)));

        if (!v22)
        {
          if (dword_10020FA58 <= 90
            && (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 90)))
          {
            v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1176), "isFirstConnectionAfterSREnable"));
            v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v26, "objectForKeyedSubscript:", *(_QWORD *)(a1 + 40)));
            LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _evaluatorRunTipiElection:nearbyInfoDevicesMap:localScore:]_block_invoke_4", 90, "###Evaluator: LE Pipe failure! Switch to phase1 connection, first connection after SR enable %@", v27);

          }
          *(_BYTE *)(*(_QWORD *)(a1 + 32) + 1234) = 1;
          goto LABEL_55;
        }
      }
    }
  }
  if (dword_10020FA58 <= 90 && (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 90)))
  {
    v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 592), "objectForKeyedSubscript:", v16));
    v24 = (unint64_t)objc_msgSend(v23, "audioState");
    if (v24 > 3)
      v25 = "?";
    else
      v25 = off_1001E3C08[v24];
    LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _evaluatorRunTipiElection:nearbyInfoDevicesMap:localScore:]_block_invoke_4", 90, "Skip phase 1 fallback. WxFw %@ WxAudioState %s", v14, v25);

  }
  if (objc_msgSend(v32, "code") == (id)-6722)
  {
    if (dword_10020FA58 <= 90
      && (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 90)))
    {
      LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _evaluatorRunTipiElection:nearbyInfoDevicesMap:localScore:]_block_invoke_4", 90, "Evaluator: LE pipe timeout... ");
    }
LABEL_55:
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 352), "trigger");
    goto LABEL_56;
  }
  if (objc_msgSend(v32, "code") == (id)-6720)
  {
    if (dword_10020FA58 <= 90
      && (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 90)))
    {
      LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _evaluatorRunTipiElection:nearbyInfoDevicesMap:localScore:]_block_invoke_4", 90, "Evaluator: headset not routed on other side, run evaluator again...");
    }
    goto LABEL_55;
  }
LABEL_56:

LABEL_57:
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 1235) = 0;
  v28 = *(_QWORD *)(a1 + 32);
  v29 = *(void **)(v28 + 480);
  *(_QWORD *)(v28 + 480) = 0;

  if (objc_msgSend(*(id *)(a1 + 32), "_isOnDemandConnectInProgress")
    && objc_msgSend(v10, "isEqualToString:", CFSTR("kUnknownErr (Cleanup before done)")))
  {
    if (dword_10020FA58 <= 90
      && (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 90)))
    {
      LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _evaluatorRunTipiElection:nearbyInfoDevicesMap:localScore:]_block_invoke_4", 90, "Evaluator: Don't cleanup headset for OnDemand connect");
    }
  }
  else
  {
    *(_BYTE *)(*(_QWORD *)(a1 + 32) + 1233) = 0;
    v30 = *(_QWORD *)(a1 + 32);
    v31 = *(void **)(v30 + 336);
    *(_QWORD *)(v30 + 336) = 0;

  }
  v4 = v32;
LABEL_64:

}

void sub_10002718C(id a1, NSString *a2, SRDiscoveredDevice *a3, BOOL *a4)
{
  -[SRDiscoveredDevice _setInUseBannerShown:](a3, "_setInUseBannerShown:", 0, a4);
}

void sub_100027FDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100028000(uint64_t a1, void *a2, void *a3)
{
  BOOL v5;
  void *v6;
  id v7;

  v7 = a2;
  v5 = objc_msgSend(a3, "routingAction") == 2;
  v6 = v7;
  if (!v5)
  {
    if (dword_10020FA58 <= 30
      && (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 30)))
    {
      LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _smartRoutingAddWxMapDeviceFromConnectedDevice:]_block_invoke", 30, "SmartRouting making %@ a tipi device.", v7);
    }
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
    v6 = v7;
  }

}

void sub_1000285E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_list va;

  va_start(va, a16);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000285F8(uint64_t a1, unsigned int a2, void *a3)
{
  id v5;
  const char *v6;
  uint64_t v7;
  const char *v8;
  int v9;
  int v10;
  void *v11;
  const __CFString *v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  uint64_t v17;
  int v18;
  void *v19;
  const __CFString *v20;
  void *v21;
  void *v22;
  void *v23;
  id v24;
  uint64_t v25;
  void *v26;
  void *v27;
  void *v28;
  const char *v29;
  void *v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  id v35;
  _QWORD v36[4];
  id v37;
  uint64_t v38;
  _QWORD v39[4];
  id v40;
  uint64_t v41;

  v5 = a3;
  if (*(_QWORD *)(a1 + 32) == *(_QWORD *)(*(_QWORD *)(a1 + 40) + 1336))
  {
    v35 = v5;
    if (dword_10020FA58 <= 30
      && (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 30)))
    {
      if (a2 > 6)
        v6 = "?";
      else
        v6 = off_1001E38C8[a2];
      v7 = *(int *)(a1 + 64);
      if (v7 > 5)
        v8 = "?";
      else
        v8 = off_1001E3898[v7];
      LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _smartRoutingShowBanner:withDevice:andDeviceAddress:andProductID:andCentralContentItemTxt:andTimeout:andDeviceType:]_block_invoke", 30, "PostingBanner: Action: %s, type %s %{error}", v6, v8, v35);
    }
    v9 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24);
    if (a2 == 1)
    {
      if (v9 == 4)
      {
        ++*(_DWORD *)(*(_QWORD *)(a1 + 40) + 540);
        v10 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 160), "activeCallCount");
        v11 = *(void **)(a1 + 40);
        v12 = CFSTR("-tacl");
        if (v10 > 0)
          v12 = CFSTR("-tsco");
        v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@%@"), *(_QWORD *)(a1 + 48), v12));
        objc_msgSend(v11, "_smartRoutingChangeRoute:", v13);

        v14 = *(void **)(a1 + 48);
        v15 = *(void **)(*(_QWORD *)(a1 + 40) + 1160);
        v39[0] = _NSConcreteStackBlock;
        v39[1] = 3221225472;
        v39[2] = sub_100028B00;
        v39[3] = &unk_1001E2E88;
        v16 = v14;
        v17 = *(_QWORD *)(a1 + 40);
        v40 = v16;
        v41 = v17;
        objc_msgSend(v15, "enumerateKeysAndObjectsUsingBlock:", v39);

        v9 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24);
      }
      if (v9 == 5)
      {
        ++*(_DWORD *)(*(_QWORD *)(a1 + 40) + 960);
        ++*(_DWORD *)(*(_QWORD *)(a1 + 40) + 968);
        v18 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 160), "activeCallCount");
        v19 = *(void **)(a1 + 40);
        v20 = CFSTR("-tacl");
        if (v18 > 0)
          v20 = CFSTR("-tsco");
        v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@%@"), *(_QWORD *)(a1 + 48), v20));
        objc_msgSend(v19, "_smartRoutingChangeRoute:", v21);

        v22 = *(void **)(a1 + 48);
        v23 = *(void **)(*(_QWORD *)(a1 + 40) + 1160);
        v36[0] = _NSConcreteStackBlock;
        v36[1] = 3221225472;
        v36[2] = sub_100028BA4;
        v36[3] = &unk_1001E2E88;
        v24 = v22;
        v25 = *(_QWORD *)(a1 + 40);
        v37 = v24;
        v38 = v25;
        objc_msgSend(v23, "enumerateKeysAndObjectsUsingBlock:", v36);

        v9 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24);
      }
      if (v9 != 3)
        goto LABEL_51;
      v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 1200), "objectForKeyedSubscript:", *(_QWORD *)(a1 + 48)));
      v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v26, "nearbyWxDevice"));

      if (v27)
      {
        objc_msgSend(*(id *)(a1 + 40), "_smartRoutingConnectToEligibleHeadset:", v27);
      }
      else if (dword_10020FA58 <= 30
             && (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 30)))
      {
        LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _smartRoutingShowBanner:withDevice:andDeviceAddress:andProductID:andCentralContentItemTxt:andTimeout:andDeviceType:]_block_invoke", 30, "Failed to connect to Wx %@. Nearby Wx not found", *(_QWORD *)(a1 + 48));
      }

      v29 = "Default";
    }
    else
    {
      if (v9 != 3)
        goto LABEL_39;
      if (a2 == 2)
      {
        v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 1200), "objectForKeyedSubscript:", *(_QWORD *)(a1 + 48)));
        objc_msgSend(v28, "_setInUseBannerBackoffReason:", CFSTR("UserDismiss"));
        objc_msgSend(v28, "_setInUseBannerBackoffTick:", mach_absolute_time());

        v29 = "Dismiss";
      }
      else
      {
        v29 = "Invalid";
        switch(a2)
        {
          case 0u:
            break;
          case 3u:
            v29 = "Invalidated";
            break;
          case 4u:
            v29 = "Error";
            break;
          case 6u:
            v29 = "Timeout";
            break;
          default:
            v29 = "?";
            break;
        }
      }
    }
    v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v29));
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 1216), "setBannerAction:", v30);

    objc_msgSend(*(id *)(a1 + 40), "_startRouteCheckTimer:andType:", *(_QWORD *)(a1 + 48), 13);
LABEL_39:
    if ((a2 | 4) == 6)
    {
      v31 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24);
      if (v31 == 5)
      {
        ++*(_DWORD *)(*(_QWORD *)(a1 + 40) + 964);
        v31 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24);
      }
      if (v31 == 4)
      {
        ++*(_DWORD *)(*(_QWORD *)(a1 + 40) + 544);
        v31 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24);
      }
      if (a2 == 2 && v31 == 1)
      {
        v32 = 188;
      }
      else
      {
        if (a2 != 6 || v31 != 1)
          goto LABEL_51;
        v32 = 192;
      }
      ++*(_DWORD *)(*(_QWORD *)(a1 + 40) + v32);
    }
LABEL_51:
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 1336), "invalidate");
    v33 = *(_QWORD *)(a1 + 40);
    v34 = *(void **)(v33 + 1336);
    *(_QWORD *)(v33 + 1336) = 0;

    v5 = v35;
  }

}

void sub_100028B00(uint64_t a1, void *a2, void *a3, _BYTE *a4)
{
  unsigned int v7;
  void *v8;
  void *v9;
  id v10;

  v10 = a3;
  v7 = objc_msgSend(a2, "isEqualToString:", *(_QWORD *)(a1 + 32));
  v8 = v10;
  if (v7)
  {
    objc_msgSend(v10, "_setRoutedState:", 1);
    objc_msgSend(v10, "_setRoutingAction:", 1);
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "otherTipiDeviceBTAddress"));

    if (v9)
      objc_msgSend(*(id *)(a1 + 40), "_relayConduitMessageSend:withOptions:andWxAddress:andOtherAddress:", 1, &off_1001F4098, *(_QWORD *)(a1 + 32), 0);
    *a4 = 1;
    v8 = v10;
  }

}

void sub_100028BA4(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  id v8;

  v8 = a2;
  v5 = a3;
  if (objc_msgSend(v8, "isEqual:", *(_QWORD *)(a1 + 32)))
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "otherTipiDeviceBTAddress"));

    if (v6)
    {
      ++*(_DWORD *)(*(_QWORD *)(a1 + 40) + 548);
      objc_msgSend(*(id *)(a1 + 40), "submitRouteActivityMetric:activity:", *(_QWORD *)(a1 + 32), CFSTR("Reverse"));
      objc_msgSend(*(id *)(a1 + 40), "_relayConduitMessageSend:withOptions:andWxAddress:andOtherAddress:", 1, &off_1001F40C0, *(_QWORD *)(a1 + 32), 0);
      objc_msgSend(*(id *)(a1 + 40), "_sendRouteReversedTipiEventForTipsSupport");
      objc_msgSend(*(id *)(a1 + 40), "_handleHijackBlockingwithDevice:", v8);
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 1216), "reverseRouteReason"));

      if (!v7)
        objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 1216), "setReverseRouteReason:", CFSTR("Reverse_banner"));
    }
  }

}

void sub_1000293B0(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  int v6;
  id v7;

  v3 = a2;
  v4 = v3;
  if (v3)
  {
    if (dword_10020FA58 <= 90)
    {
      v7 = v3;
      if (dword_10020FA58 != -1 || (v6 = _LogCategory_Initialize(&dword_10020FA58, 90), v4 = v7, v6))
      {
        v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 480), "name"));
        LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _smartRoutingConnectionCompleted:]_block_invoke", 90, "Evaluator: Setting LE Pipe send failed: %@, %{error}", v5, v7);

        v4 = v7;
      }
    }
  }

}

void sub_10002945C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;

  v3 = a2;
  if (v3)
  {
    v6 = v3;
    if (dword_10020FA58 <= 90
      && (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 90)))
    {
      v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 480), "name"));
      LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _smartRoutingConnectionCompleted:]_block_invoke_2", 90, "Evaluator: Setting LE Pipe send failed: %@, %{error}", v4, v6);

    }
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1160), "objectForKeyedSubscript:", *(_QWORD *)(a1 + 40)));
    objc_msgSend(v5, "_setOtherTipiDeviceInfo:andName:andVersion:", 0, 0, 0);

    objc_msgSend(*(id *)(a1 + 32), "_tipiHealingAttempt");
    v3 = v6;
  }

}

void sub_100029530(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  _QWORD v11[2];

  v5 = a3;
  if (objc_msgSend(a2, "isEqual:", *(_QWORD *)(a1 + 32)))
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "otherTipiDeviceBTAddress"));

    if (v6)
    {
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "otherTipiDeviceBTAddress"));
      objc_msgSend(*(id *)(a1 + 40), "_updateNearbyDeviceState:withAddress:withEasyPairing:withState:", *(_QWORD *)(a1 + 32), v7, 0, 1);
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "_myBluetoothAddressString"));
      v11[0] = v7;
      v11[1] = v8;
      v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v11, 2));
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 200), "objectForKeyedSubscript:", *(_QWORD *)(a1 + 32)));
      objc_msgSend(*(id *)(a1 + 40), "_updateAccessoryID:connectionDeviceAddresses:completion:", v10, v9, &stru_1001E2EF0);

    }
    else if (objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 1160), "count") == (id)1)
    {
      objc_msgSend(*(id *)(a1 + 40), "_updateNearbyDeviceState:withAddress:withEasyPairing:withState:", *(_QWORD *)(a1 + 32), &stru_1001ED4C0, 0, 1);
    }
  }

}

void sub_100029688(id a1, NSError *a2)
{
  NSError *v2;
  NSError *v3;
  int v4;
  NSError *v5;

  v2 = a2;
  v3 = v2;
  if (v2
    && dword_10020FA58 <= 90
    && ((v5 = v2, dword_10020FA58 != -1) || (v4 = _LogCategory_Initialize(&dword_10020FA58, 90), v3 = v5, v4)))
  {
    LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _smartRoutingConnectionCompleted:]_block_invoke_4", 90, "Evaluator: failed to update triangle table upon connection");

  }
  else
  {

  }
}

void sub_100029BBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  _Block_object_dispose(&a28, 8);
  _Unwind_Resume(a1);
}

void sub_100029C00(uint64_t a1)
{
  id v1;
  __int128 v2;
  int8x16_t v3;
  _QWORD v4[4];
  int8x16_t v5;
  __int128 v6;
  uint64_t v7;

  v4[1] = 3221225472;
  v2 = *(_OWORD *)(a1 + 48);
  v3 = *(int8x16_t *)(a1 + 32);
  v5 = vextq_s8(v3, v3, 8uLL);
  v4[0] = _NSConcreteStackBlock;
  v4[2] = sub_100029C84;
  v4[3] = &unk_1001E2F18;
  v7 = *(_QWORD *)(a1 + 64);
  v1 = (id)v2;
  v6 = v2;
  objc_msgSend((id)v3.i64[0], "activateWithCompletion:", v4);

}

void sub_100029C84(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  unint64_t v7;
  void *v8;
  void *v9;
  unsigned int v10;
  void *v11;
  id v12;

  v3 = a2;
  if (*(_QWORD *)(*(_QWORD *)(a1 + 32) + 232) == *(_QWORD *)(a1 + 40))
  {
    v12 = v3;
    if (dword_10020FA58 <= 30
      && (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 30)))
    {
      LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _smartRoutingConnectToEligibleHeadset:]_block_invoke_2", 30, "Evaluator: connect complete: %@, %{error}", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), v12);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1104) = 0;
    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 248) = mach_absolute_time();
    v4 = *(_QWORD *)(a1 + 32);
    v5 = *(_QWORD *)(v4 + 248);
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v4 + 592), "objectForKeyedSubscript:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40)));
    v7 = UpTicksToMilliseconds(v5 - (_QWORD)objc_msgSend(v6, "lastConnectionTicks"));

    if (v7 >= 0x1389
      && dword_10020FA58 <= 90
      && (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 90)))
    {
      LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _smartRoutingConnectToEligibleHeadset:]_block_invoke_2", 90, "### Evaluator: connect time %llu is over 5s", v7);
    }
    objc_msgSend(*(id *)(a1 + 48), "setLastConnectTime:", v7);
    if (v12)
    {
      v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@"), v12));
      objc_msgSend(*(id *)(a1 + 48), "setLastConnectResult:", v8);

    }
    else
    {
      objc_msgSend(*(id *)(a1 + 48), "setLastConnectResult:", CFSTR("Success"));
    }
    objc_msgSend(*(id *)(a1 + 32), "_smartRoutingConnectionCompleted:", v12);
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 592), "objectForKeyedSubscript:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40)));
    v10 = objc_msgSend(v9, "preemptiveBannerShown");

    v3 = v12;
    if (!v12 && v10)
    {
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 592), "objectForKeyedSubscript:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40)));
      objc_msgSend(v11, "setFirstPreemptiveBannerShown:", 0);

      v3 = 0;
    }
  }

}

void sub_10002AB78(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 224), 8);
  _Unwind_Resume(a1);
}

void sub_10002ABF0(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a2);
  *a4 = 1;
}

void sub_10002AC24(_QWORD *a1, void *a2, void *a3, _BYTE *a4)
{
  id v8;
  const char *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  id v20;

  v20 = a2;
  v8 = a3;
  if (dword_10020FA58 <= 50 && (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 50)))
  {
    v9 = "no";
    if (objc_msgSend(v8, "inEar"))
      v10 = "yes";
    else
      v10 = "no";
    if (objc_msgSend(v8, "inEarDisabled"))
      v9 = "yes";
    LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _smartRoutingAudioRoutingRequest:withResponseHandler:]_block_invoke_2", 50, "Device address %@ is inEar %s inEarDisabled %s %d", v20, v10, v9, objc_msgSend(*(id *)(a1[4] + 1160), "count"));
  }
  if ((objc_msgSend(v8, "inEarDisabled") & 1) != 0 || objc_msgSend(v8, "inEar"))
  {
    objc_storeStrong((id *)(*(_QWORD *)(a1[5] + 8) + 40), a2);
    v11 = objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "otherTipiDeviceBTAddress"));
    v12 = *(_QWORD *)(a1[6] + 8);
    v13 = *(void **)(v12 + 40);
    *(_QWORD *)(v12 + 40) = v11;

    v14 = objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "otherTipiDeviceVersion"));
    v15 = *(_QWORD *)(a1[7] + 8);
    v16 = *(void **)(v15 + 40);
    *(_QWORD *)(v15 + 40) = v14;

    v17 = objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "deviceVersion"));
    v18 = *(_QWORD *)(a1[8] + 8);
    v19 = *(void **)(v18 + 40);
    *(_QWORD *)(v18 + 40) = v17;

  }
  if (objc_msgSend(v8, "inEar"))
    *a4 = 1;

}

void sub_10002ADBC(uint64_t a1, void *a2, void *a3, _BYTE *a4)
{
  id v7;
  id v8;
  void *v9;
  void *v10;
  id v11;
  void *v12;
  const __CFString *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  int v20;
  void **p_vtable;
  int v22;
  void *v23;
  id v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  unsigned int v29;
  const char *v30;
  void *v31;
  uint64_t v32;
  void *v33;
  id v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  unsigned int v40;
  const __CFString *v41;
  void *v42;
  uint64_t v43;
  void *v44;
  void *v45;
  void *v46;
  id v47;
  id v48;
  id v49;
  int v50;
  int v51;
  void *v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  const char *v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  double v66;
  _BOOL4 v67;
  void *v68;
  uint64_t v69;
  void *v70;
  void *v71;
  void *v72;
  id v73;
  const char *v74;
  _BOOL4 v75;
  void *v76;
  void *v77;
  uint64_t v78;
  unint64_t v79;
  void *v80;
  uint64_t v81;
  void *v82;
  uint64_t v83;
  unsigned int v84;
  const char *v85;
  void *v86;
  uint64_t v87;
  void *v88;
  const __CFString *v89;
  id v90;
  const __CFString *v91;
  void *v92;
  unint64_t v93;
  unint64_t v94;
  _BOOL4 v95;
  void *v96;
  void *v97;
  unint64_t v98;
  unsigned int v99;
  id v100;
  _QWORD v101[3];
  _QWORD v102[3];
  _QWORD v103[3];
  _QWORD v104[3];

  v7 = a2;
  v8 = a3;
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "identifier"));
  if (v7
    && *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40)
    && objc_msgSend(v7, "isEqualToString:"))
  {
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", objc_msgSend(*(id *)(a1 + 32), "clientID")));
    if (!*(_BYTE *)(*(_QWORD *)(a1 + 40) + 802))
    {
LABEL_13:

      goto LABEL_14;
    }
    if (objc_msgSend(v8, "routingAction") == 2
      || objc_msgSend(v8, "isRoutingActionInitialized")
      && objc_msgSend(v8, "routingAction") == 1
      && (v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "otherTipiDeviceBTAddress")),
          v14,
          !v14))
    {
      objc_msgSend(*(id *)(a1 + 48), "setAction:", objc_msgSend(v8, "routingAction"));
      if (objc_msgSend(v8, "routingAction") == 2)
        v11 = 0;
      else
        v11 = v7;
      objc_msgSend(*(id *)(a1 + 48), "setDeviceAddress:", v11);
      v12 = *(void **)(a1 + 48);
      v13 = CFSTR("Not tipi device");
    }
    else
    {
      if ((int)objc_msgSend(*(id *)(a1 + 32), "audioScore") < 1)
      {
        if (*(_BYTE *)(a1 + 104)
          && objc_msgSend(v8, "hasOwnership")
          && objc_msgSend(v8, "otherTipiAudioCategory") <= 0x64)
        {
          if (dword_10020FA58 <= 30
            && (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 30)))
          {
            LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _smartRoutingAudioRoutingRequest:withResponseHandler:]_block_invoke_3", 30, "Hijack: Routing request indicated buds went in ear, other tipi is idle.");
          }
          objc_msgSend(*(id *)(a1 + 48), "setAction:", 1);
          objc_msgSend(*(id *)(a1 + 48), "setDeviceAddress:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40));
          objc_msgSend(*(id *)(a1 + 48), "setReason:", CFSTR("Buds in ear, other tipi idle."));
          objc_msgSend(*(id *)(a1 + 48), "setClientID:", objc_msgSend(*(id *)(a1 + 32), "clientID"));
          objc_msgSend(*(id *)(a1 + 40), "_respondRoutingRequest:withResponseHandler:wxAddress:", *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40));
          *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24) = 1;
          *a4 = 1;
          goto LABEL_13;
        }
        if (objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 136), "isEqualToString:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40)))
        {
          if (dword_10020FA58 <= 30
            && (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 30)))
          {
            LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _smartRoutingAudioRoutingRequest:withResponseHandler:]_block_invoke_3", 30, "Budswap detected device, respond with not route for %@", *(_QWORD *)(*(_QWORD *)(a1 + 40) + 136));
          }
          objc_msgSend(v8, "_setRoutingAction:", 3);
        }
        objc_msgSend(*(id *)(a1 + 48), "setAction:", objc_msgSend(v8, "routingAction"));
        if (objc_msgSend(v8, "routingAction") == 1)
          v39 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40);
        else
          v39 = 0;
        objc_msgSend(*(id *)(a1 + 48), "setDeviceAddress:", v39);
        v40 = objc_msgSend(v8, "routingAction");
        v41 = CFSTR("not routed");
        if (v40 == 1)
          v41 = CFSTR("routed");
        v42 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Tipi device is: %@"), v41));
        objc_msgSend(*(id *)(a1 + 48), "setReason:", v42);

        goto LABEL_11;
      }
      v15 = mach_absolute_time();
      v16 = UpTicksToSeconds(v15 - *(_QWORD *)(*(_QWORD *)(a1 + 40) + 104));
      v17 = mach_absolute_time();
      v18 = UpTicksToSecondsF(v17 - *(_QWORD *)(*(_QWORD *)(a1 + 40) + 128));
      v19 = mach_absolute_time();
      v20 = UpTicksToSeconds(v19 - (_QWORD)objc_msgSend(v8, "otherTipiManuallyRouteTicks"));
      p_vtable = _TtC15audioaccessoryd11XPCMessages.vtable;
      if (dword_10020FA58 <= 30)
      {
        v22 = v20;
        if (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 30))
          LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _smartRoutingAudioRoutingRequest:withResponseHandler:]_block_invoke_3", 30, "Hijack: LastRequest %llus lastResponse %.2fs responseTick %u otherTipiManualRoute %us", v16, v18, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 128), v22);
      }
      v98 = v16;
      if ((objc_msgSend(*(id *)(a1 + 32), "flags") & 2) == 0
        || (v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 1160), "objectForKeyedSubscript:", v7)),
            v24 = objc_msgSend(v23, "hijackBackoffTicks"),
            v23,
            v24))
      {
        if (objc_msgSend(v8, "otherTipiDeviceIsWatch")
          && objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 40), "isEqualToString:", CFSTR("Alarm")))
        {
          v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "appBundleID"));
          v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Opt-out SR for app %@ on phone since the other tipi device is a watch"), v25));

          objc_msgSend(*(id *)(a1 + 48), "setAction:", 3);
          objc_msgSend(*(id *)(a1 + 48), "setDeviceAddress:", 0);
          objc_msgSend(*(id *)(a1 + 48), "setReason:", v26);
          objc_msgSend(*(id *)(a1 + 48), "setClientID:", objc_msgSend(*(id *)(a1 + 32), "clientID"));
          objc_msgSend(*(id *)(a1 + 40), "_respondRoutingRequest:withResponseHandler:wxAddress:", *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40));
          *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24) = 1;
          *a4 = 1;

          goto LABEL_13;
        }
        objc_msgSend(v8, "setAudioRoutingScore:", objc_msgSend(*(id *)(a1 + 32), "audioScore"));
        *(_QWORD *)(*(_QWORD *)(a1 + 40) + 104) = mach_absolute_time();
        objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 1216), "setHijackRelaySent:", 0);
        objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 1216), "setHijackScore:", objc_msgSend(*(id *)(a1 + 32), "audioScore"));
        v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "appBundleID"));
        objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 1216), "setHijackPlayingApp:", v27);

        v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 200), "objectForKeyedSubscript:", v7));
        v29 = objc_msgSend(v28, "audioStreamState");
        if (v29 > 3)
          v30 = "?";
        else
          v30 = off_1001E3DD8[v29];
        v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v30));
        objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 1216), "setWxStreamState:", v31);

        v32 = *(_QWORD *)(a1 + 40);
        if (*(_QWORD *)(v32 + 792))
        {
          v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v32 + 1160), "objectForKeyedSubscript:", v7));
          v34 = objc_msgSend(v33, "hijackBackoffTicks");

          v32 = *(_QWORD *)(a1 + 40);
          if (v34)
          {
            v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v32 + 1160), "objectForKeyedSubscript:", v7));
            v36 = (uint64_t)objc_msgSend((id)v32, "_checkTickswithinWindow:withWindow:", objc_msgSend(v35, "hijackBackoffTicks"), *(_QWORD *)(*(_QWORD *)(a1 + 40) + 792));

            if (dword_10020FA58 <= 30
              && (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 30)))
            {
              v37 = UpTicksToSeconds(v36);
              v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 1160), "objectForKeyedSubscript:", v7));
              LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _smartRoutingAudioRoutingRequest:withResponseHandler:]_block_invoke_3", 30, "Hijackblocking: Hijack Request, device %@ with %ll{dur} remaining, last ticks are %llu", v7, v37, objc_msgSend(v38, "hijackBackoffTicks"));

              p_vtable = (void **)(_TtC15audioaccessoryd11XPCMessages + 24);
            }
            if (v36 >= 1)
            {
              objc_msgSend(*(id *)(a1 + 48), "setAction:", 4);
              if ((objc_msgSend(*(id *)(a1 + 32), "flags") & 2) != 0)
                v43 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40);
              else
                v43 = 0;
              objc_msgSend(*(id *)(a1 + 48), "setDeviceAddress:", v43);
              objc_msgSend(*(id *)(a1 + 48), "setReason:", CFSTR("Hijack Block Period"));
              objc_msgSend(*(id *)(a1 + 48), "setClientID:", objc_msgSend(*(id *)(a1 + 32), "clientID"));
              objc_msgSend(*(id *)(a1 + 40), "_respondRoutingRequest:withResponseHandler:wxAddress:", *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40));
              objc_msgSend(*(id *)(a1 + 40), "_startHijackMetricSubmission:wxAddress:version:", 4, v7, CFSTR("NA"));
              goto LABEL_12;
            }
            v44 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 1160), "objectForKeyedSubscript:", v7));
            objc_msgSend(v44, "_setHijackBackoffTick:", 0);

            v32 = *(_QWORD *)(a1 + 40);
          }
        }
        v45 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)v32, "_getWxFWVersion:", v7));
        if ((objc_msgSend(v8, "isRoutingActionInitialized") & 1) != 0)
        {
          if (objc_msgSend(*(id *)(a1 + 40), "_deviceSupportsHijackV2:withDevice:", v45, v8) && v45)
          {
            if (*(_BYTE *)(*(_QWORD *)(a1 + 40) + 832))
            {
              objc_msgSend(v8, "setAudioRoutingResponse:", *(_QWORD *)(a1 + 56));
              objc_msgSend(v8, "setAudioRoutingClientID:", objc_msgSend(*(id *)(a1 + 32), "clientID"));
              v46 = *(void **)(a1 + 40);
              v47 = objc_msgSend(*(id *)(a1 + 32), "audioScore");
              v100 = 0;
              v48 = objc_msgSend(v46, "allowHijackWithAudioScore:hijackRoute:hijackDeniedReason:", v47, v7, &v100);
              v49 = v100;
              if ((objc_msgSend(v49, "isEqualToString:", CFSTR("Fall back to legacy hijack")) & 1) != 0)
              {
                v96 = v49;
                v97 = v45;
                goto LABEL_81;
              }
              objc_msgSend(*(id *)(a1 + 40), "_mediaRouteHijackResponseHandlerFor:allowedToHijack:withReason:", v7, v48, v49);
              *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24) = 1;

LABEL_77:
              *a4 = 1;

              goto LABEL_13;
            }
            v97 = v45;
          }
          else
          {
            v51 = *((_DWORD *)p_vtable + 662);
            v97 = v45;
            if (v51 <= 30 && (v51 != -1 || _LogCategory_Initialize(&dword_10020FA58, 30)))
            {
              v52 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "otherTipiDeviceVersion"));
              LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _smartRoutingAudioRoutingRequest:withResponseHandler:]_block_invoke_3", 30, "Device setup doesn't support HijackV2: fwVersion %@, tipi version %@", v45, v52);

            }
          }
          v96 = 0;
LABEL_81:
          v53 = mach_absolute_time();
          v54 = UpTicksToSeconds(v53 - *(_QWORD *)(*(_QWORD *)(a1 + 40) + 920));
          v95 = v54 <= 5 && (int)objc_msgSend(*(id *)(a1 + 32), "audioScore") < 501;
          objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 1216), "setHijackVersion:", CFSTR("V1"));
          v55 = mach_absolute_time();
          v56 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 592), "objectForKeyedSubscript:", v9));
          v94 = UpTicksToMilliseconds(v55 - (_QWORD)objc_msgSend(v56, "lastConnectionTicks"));

          v57 = mach_absolute_time();
          v58 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 592), "objectForKeyedSubscript:", v9));
          v59 = UpTicksToMilliseconds(v57 - (_QWORD)objc_msgSend(v58, "lastWxAdvTicks"));

          if (dword_10020FA58 <= 30
            && (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 30)))
          {
            v60 = "no";
            if (v95)
              v60 = "yes";
            LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _smartRoutingAudioRoutingRequest:withResponseHandler:]_block_invoke_3", 30, "Hijack: timeSinceLastRequest %llus timeSinceRingtoneStopped %llus musicResumeHijack %s, last connection %llums, last adv %llums", v98, v54, v60, v94, v59);
          }
          v93 = v59;
          v61 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 200), "objectForKeyedSubscript:", v7));
          if (objc_msgSend(v61, "audioStreamState"))
          {
            v62 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 200), "objectForKeyedSubscript:", v7));
            if ((int)objc_msgSend(v62, "audioStreamState") <= 1 && v98 > 5)
            {
              v63 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "otherTipiDeviceBTName"));
              v99 = objc_msgSend(v63, "isEqualToString:", CFSTR("Mac")) | v95;

              if ((v99 & 1) == 0)
              {
                v64 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "otherTipiDeviceVersion"));
                objc_msgSend(v64, "doubleValue");
                v65 = v97;
                v67 = v66 < 1.2
                   || objc_msgSend(CFSTR("3E725"), "compare:options:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 40), 64) == (id)1;

                if (dword_10020FA58 <= 30
                  && (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 30)))
                {
                  v74 = "no";
                  if (v67)
                    v74 = "yes";
                  LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _smartRoutingAudioRoutingRequest:withResponseHandler:]_block_invoke_3", 30, "Hijack request, other side is not streaming, route, legacy routing behavior = %s", v74);
                }
                objc_msgSend(v8, "_setRoutingAction:", 1);
                objc_msgSend(*(id *)(a1 + 48), "setAction:", 1);
                objc_msgSend(*(id *)(a1 + 48), "setDeviceAddress:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40));
                objc_msgSend(*(id *)(a1 + 48), "setReason:", CFSTR("Tipi device should be routed"));
                objc_msgSend(*(id *)(a1 + 48), "setClientID:", objc_msgSend(*(id *)(a1 + 32), "clientID"));
                objc_msgSend(*(id *)(a1 + 40), "_respondRoutingRequest:withResponseHandler:wxAddress:", *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40));
                ++*(_DWORD *)(*(_QWORD *)(a1 + 40) + 116);
                if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + 40))
                  v75 = v67;
                else
                  v75 = 0;
                if (v75)
                {
                  v101[0] = CFSTR("audioRoutingScore");
                  v76 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", objc_msgSend(*(id *)(a1 + 32), "audioScore")));
                  v102[0] = v76;
                  v102[1] = &__kCFBooleanTrue;
                  v101[1] = CFSTR("audioRoutingSetOwnershipToFalse");
                  v101[2] = CFSTR("reason");
                  v102[2] = CFSTR("LegacyHijack");
                  v77 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v102, v101, 3));

                  objc_msgSend(*(id *)(a1 + 40), "_relayConduitMessageSend:withOptions:andWxAddress:andOtherAddress:", 1, v77, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40), 0);
                }
                v78 = mach_absolute_time();
                v79 = UpTicksToSeconds(v78 - *(_QWORD *)(*(_QWORD *)(a1 + 40) + 1064));
                v80 = *(void **)(*(_QWORD *)(a1 + 40) + 1336);
                if (v80)
                {
                  objc_msgSend(v80, "invalidate");
                  v81 = *(_QWORD *)(a1 + 40);
                  v82 = *(void **)(v81 + 1336);
                  *(_QWORD *)(v81 + 1336) = 0;

                }
                if ((objc_msgSend(v8, "routed") & 1) != 0
                  || (v83 = *(_QWORD *)(a1 + 40), *(_QWORD *)(v83 + 1064)) && *(double *)(v83 + 1048) > (double)v79)
                {
                  if (dword_10020FA58 <= 30
                    && (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 30)))
                  {
                    v84 = objc_msgSend(v8, "inEar");
                    v85 = "no";
                    if (v84)
                      v85 = "yes";
                    LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _smartRoutingAudioRoutingRequest:withResponseHandler:]_block_invoke_3", 30, "Connected banner cool off period is %llus, inEar state is %s", v79, v85);
                  }
                }
                else
                {
                  v86 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "deviceName"));
                  v87 = objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "deviceAddress"));
                  v88 = (void *)v87;
                  if (v87)
                    v89 = (const __CFString *)v87;
                  else
                    v89 = CFSTR("?");
                  v90 = objc_msgSend(v8, "productID");
                  v91 = v89;
                  v65 = v97;
                  objc_msgSend((id)v83, "_smartRoutingShowBanner:withDevice:andDeviceAddress:andProductID:andCentralContentItemTxt:andTimeout:andDeviceType:", 1, v86, v91, v90, CFSTR("Connected"), 0, 4.0);

                }
                v92 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "otherTipiDeviceBTAddress"));

                if (v92)
                {
                  objc_msgSend(*(id *)(a1 + 40), "submitHijackMetric:withV1:", v7, 1);
                  objc_msgSend(*(id *)(a1 + 40), "_startRouteCheckTimer:andType:", v7, 5);
                  objc_msgSend(*(id *)(a1 + 40), "_startRouteCheckTimer:andType:", v7, 6);
                  objc_msgSend(*(id *)(a1 + 40), "submitRouteActivityMetric:activity:", v7, CFSTR("Hijack_V1AirpodIdle"));
                }
                goto LABEL_147;
              }
LABEL_98:
              objc_msgSend(*(id *)(a1 + 40), "_setHighPriorityTag:withHighPriority:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40), 1);
              v68 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "otherTipiDeviceBTAddress"));

              v69 = *(_QWORD *)(a1 + 40);
              v65 = v97;
              if (v68)
              {
                ++*(_DWORD *)(v69 + 116);
                objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 1216), "setHijackRelaySent:", 1);
                v103[0] = CFSTR("audioRoutingScore");
                v70 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", objc_msgSend(*(id *)(a1 + 32), "audioScore")));
                v104[0] = v70;
                v104[1] = v10;
                v103[1] = CFSTR("audioRoutingRequestID");
                v103[2] = CFSTR("audioRoutingHijackRequest");
                v104[2] = &__kCFBooleanTrue;
                v71 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v104, v103, 3));

                objc_msgSend(v8, "setAudioRoutingResponse:", *(_QWORD *)(a1 + 56));
                objc_msgSend(v8, "setAudioRoutingClientID:", objc_msgSend(*(id *)(a1 + 32), "clientID"));
                objc_msgSend(v8, "setConduitMessageTicks:", mach_absolute_time());
                objc_msgSend(*(id *)(a1 + 40), "_relayConduitMessageStartTimer:withOptions:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40), v71);
                objc_msgSend(*(id *)(a1 + 40), "_relayConduitMessageSend:withOptions:andWxAddress:andOtherAddress:", 1, v71, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40), 0);

LABEL_147:
                *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24) = 1;
                *a4 = 1;

                goto LABEL_13;
              }
              v72 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v69 + 592), "objectForKeyedSubscript:", v9));
              if (objc_msgSend(v72, "sourceCount") < 2)
              {

              }
              else
              {
                v73 = objc_msgSend(CFSTR("5A187"), "compare:options:", v97, 64);

                if (v73 == (id)-1)
                {
                  if (dword_10020FA58 <= 30
                    && (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 30)))
                  {
                    LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _smartRoutingAudioRoutingRequest:withResponseHandler:]_block_invoke_3", 30, "Starting tipi healing hijack timer as Wx adv indicates source is 2, wait for tipi healing to complete");
                  }
                  goto LABEL_146;
                }
              }
              if (v93 < v94 || objc_msgSend(CFSTR("5A187"), "compare:options:", v97, 64) != (id)-1)
              {
                objc_msgSend(*(id *)(a1 + 48), "setAction:", 1);
                objc_msgSend(*(id *)(a1 + 48), "setDeviceAddress:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40));
                objc_msgSend(*(id *)(a1 + 48), "setReason:", CFSTR("Tipi device should be routed"));
                objc_msgSend(*(id *)(a1 + 48), "setClientID:", objc_msgSend(*(id *)(a1 + 32), "clientID"));
                objc_msgSend(*(id *)(a1 + 40), "_respondRoutingRequest:withResponseHandler:wxAddress:", *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40));
                goto LABEL_147;
              }
              if (dword_10020FA58 <= 90
                && (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 90)))
              {
                LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _smartRoutingAudioRoutingRequest:withResponseHandler:]_block_invoke_3", 90, "Haven't seen wx adv since connection start, last connect start event %llums, last adv event %llums");
              }
LABEL_146:
              objc_msgSend(v8, "setAudioRoutingResponse:", *(_QWORD *)(a1 + 56));
              objc_msgSend(*(id *)(a1 + 40), "_tipiHealingHijackTimerStart:withScore:", v7, objc_msgSend(*(id *)(a1 + 32), "audioScore"));
              objc_msgSend(v8, "setAudioRoutingRequest:", *(_QWORD *)(a1 + 32));
              goto LABEL_147;
            }

          }
          goto LABEL_98;
        }
        v50 = *((_DWORD *)p_vtable + 662);
        if (v50 <= 30 && (v50 != -1 || _LogCategory_Initialize(&dword_10020FA58, 30)))
          LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _smartRoutingAudioRoutingRequest:withResponseHandler:]_block_invoke_3", 30, "Starting tipi healing hijack timer, waiting for tipi table message");
        objc_msgSend(*(id *)(a1 + 40), "_tipiHealingHijackTimerStart:withScore:", v7, objc_msgSend(*(id *)(a1 + 32), "audioScore"));
        objc_msgSend(v8, "setAudioRoutingRequest:", *(_QWORD *)(a1 + 32));
        objc_msgSend(v8, "setAudioRoutingResponse:", *(_QWORD *)(a1 + 56));
        objc_msgSend(v8, "setAudioRoutingClientID:", objc_msgSend(*(id *)(a1 + 32), "clientID"));
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24) = 1;
        goto LABEL_77;
      }
      objc_msgSend(*(id *)(a1 + 48), "setAction:", 3);
      objc_msgSend(*(id *)(a1 + 48), "setDeviceAddress:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40));
      v12 = *(void **)(a1 + 48);
      v13 = CFSTR("Fake hijack should not route");
    }
    objc_msgSend(v12, "setReason:", v13);
LABEL_11:
    objc_msgSend(*(id *)(a1 + 48), "setClientID:", objc_msgSend(*(id *)(a1 + 32), "clientID"));
    objc_msgSend(*(id *)(a1 + 40), "_respondRoutingRequest:withResponseHandler:wxAddress:", *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40));
LABEL_12:
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24) = 1;
    *a4 = 1;
    goto LABEL_13;
  }
LABEL_14:

}

void sub_10002C39C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  _Unwind_Resume(exception_object);
}

void sub_10002C404(_QWORD *a1, uint64_t a2, void *a3)
{
  uint64_t v4;
  id v5;
  id v6;

  v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a3, "model"));
  if (objc_msgSend(v6, "hasPrefix:", CFSTR("iPhone")))
  {
    v4 = a1[4];
  }
  else if (objc_msgSend(v6, "hasPrefix:", CFSTR("iPad")))
  {
    v4 = a1[5];
  }
  else if (objc_msgSend(v6, "hasPrefix:", CFSTR("iPod")))
  {
    v4 = a1[6];
  }
  else if (objc_msgSend(v6, "containsString:", CFSTR("Mac")))
  {
    v4 = a1[7];
  }
  else if (objc_msgSend(v6, "hasPrefix:", CFSTR("Watch")))
  {
    v4 = a1[8];
  }
  else if (objc_msgSend(v6, "hasPrefix:", CFSTR("AppleTV")))
  {
    v4 = a1[9];
  }
  else
  {
    v5 = v6;
    if ((objc_msgSend(v5, "hasPrefix:", CFSTR("AudioAccessory1,")) & 1) == 0
      && (objc_msgSend(v5, "hasPrefix:", CFSTR("AudioAccessory5,")) & 1) == 0
      && (objc_msgSend(v5, "hasPrefix:", CFSTR("AudioAccessory6,")) & 1) == 0
      && (objc_msgSend(v5, "hasPrefix:", CFSTR("HomePod")) & 1) == 0)
    {

      goto LABEL_19;
    }

    v4 = a1[10];
  }
  ++*(_DWORD *)(*(_QWORD *)(v4 + 8) + 24);
LABEL_19:

}

id sub_10002CF98(uint64_t a1, uint64_t a2)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_smartRoutingRouteCompleted:withUUID:", a2, *(_QWORD *)(a1 + 40));
}

void sub_10002D170(uint64_t a1, uint64_t a2, void *a3, _BYTE *a4)
{
  void *v7;
  void *v8;
  void *v9;
  id v10;

  v10 = a3;
  if (objc_msgSend(*(id *)(a1 + 32), "containsString:", a2) && objc_msgSend(v10, "inEar"))
  {
    v7 = *(void **)(a1 + 40);
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "deviceName"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "deviceAddress"));
    objc_msgSend(v7, "_smartRoutingShowBanner:withDevice:andDeviceAddress:andProductID:andCentralContentItemTxt:andTimeout:andDeviceType:", 1, v8, v9, objc_msgSend(v10, "productID"), CFSTR("Connected"), 0, 4.0);

    *a4 = 1;
  }

}

void sub_10002D238(uint64_t a1, uint64_t a2, void *a3)
{
  unsigned int v4;
  void *v5;
  void *v6;
  unsigned __int8 v7;
  uint64_t v8;
  int v9;
  void *v10;
  void *v11;
  id v12;
  void *v13;
  void *v14;
  id v15;

  v15 = a3;
  v4 = objc_msgSend(v15, "inEar");
  v5 = v15;
  if (v4)
  {
    objc_msgSend(v15, "_setRoutedState:", 0);
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1336), "trailingAccessoryText"));
    v7 = objc_msgSend(v6, "containsString:", CFSTR("Reverse"));

    v5 = v15;
    if ((v7 & 1) == 0)
    {
      v8 = *(_QWORD *)(a1 + 32);
      if (*(_BYTE *)(v8 + 937))
      {
        if (*(int *)(v8 + 1012) > 3)
        {
LABEL_7:
          v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "deviceName"));
          v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "deviceAddress"));
          v12 = objc_msgSend(v15, "productID");
          v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "otherTipiDeviceBTName"));
          v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@"), v13));
          objc_msgSend((id)v8, "_smartRoutingShowBanner:withDevice:andDeviceAddress:andProductID:andCentralContentItemTxt:andTimeout:andDeviceType:", 5, v10, v11, v12, v14, 0, 20.0);

          v5 = v15;
          goto LABEL_8;
        }
        v9 = objc_msgSend(*(id *)(v8 + 160), "activeCallCount");
        v5 = v15;
        if (v9 >= 1)
        {
          v8 = *(_QWORD *)(a1 + 32);
          goto LABEL_7;
        }
      }
    }
  }
LABEL_8:

}

id sub_10002D460(uint64_t a1)
{
  id result;

  if (objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 576), "scanRate") != (id)20)
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 576), "setScanRate:", 20);
  result = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1384), "scanRate");
  if (result != (id)20)
    return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1384), "setScanRate:", 20);
  return result;
}

void sub_10002DB08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_10002DB20(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_lowBatterySave:", 1);
}

void sub_10002DB2C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  uint64_t v16;
  void *v17;
  id v18;

  v18 = a3;
  v5 = a2;
  v6 = objc_alloc_init((Class)NSMutableDictionary);
  objc_msgSend(v18, "lastBatteryLevel");
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:"));
  objc_msgSend(v6, "setObject:forKeyedSubscript:", v7, CFSTR("batteryLevel"));

  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", objc_msgSend(v18, "lastBatteryType")));
  objc_msgSend(v6, "setObject:forKeyedSubscript:", v8, CFSTR("batteryType"));

  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "deviceAddress"));
  if (v9)
    objc_msgSend(v6, "setObject:forKeyedSubscript:", v9, CFSTR("deviceAddress"));

  objc_msgSend(v6, "setObject:forKeyedSubscript:", v5, CFSTR("id"));
  objc_msgSend(v18, "lastSeenTime");
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:"));
  objc_msgSend(v6, "setObject:forKeyedSubscript:", v10, CFSTR("lastSeen"));

  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "name"));
  if (v11)
    objc_msgSend(v6, "setObject:forKeyedSubscript:", v11, CFSTR("name"));

  v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", objc_msgSend(v18, "productID")));
  objc_msgSend(v6, "setObject:forKeyedSubscript:", v12, CFSTR("productID"));

  objc_msgSend(v18, "reportTime");
  v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:"));
  objc_msgSend(v6, "setObject:forKeyedSubscript:", v13, CFSTR("reportTime"));

  v14 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  if (!v14)
  {
    v15 = objc_alloc_init((Class)NSMutableArray);
    v16 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v17 = *(void **)(v16 + 40);
    *(_QWORD *)(v16 + 40) = v15;

    v14 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  }
  objc_msgSend(v14, "addObject:", v6);

}

void sub_10002E28C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
  _Block_object_dispose(&a41, 8);
  _Block_object_dispose(&a47, 8);
  _Block_object_dispose(&a51, 8);
  _Block_object_dispose(&a55, 8);
  _Block_object_dispose(&a59, 8);
  _Unwind_Resume(a1);
}

void sub_10002E308(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  double v10;
  double v11;
  int Int64Ranged;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v20;
  id v21;
  id v22;
  char v23;
  char v24;
  char v25;
  char *v26;
  double v27;
  int v28;
  void *i;
  void *v30;
  char *v31;
  char *v32;
  BOOL v33;
  double v35;
  double v36;
  char *v37;
  char v38;
  const char *v39;
  const char *v40;
  const char *v41;
  void *v42;
  uint64_t v43;
  void *v44;
  id v45;
  uint64_t v46;
  void *v47;
  void *v48;
  void *v49;
  uint64_t v50;
  void *v51;
  const char *v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  id v57;
  id obj;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  _BYTE v66[128];

  v5 = a2;
  v6 = a3;
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "bleDevice"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "advertisementFields"));
  if (CFDictionaryGetInt64(v8, CFSTR("paired"), 0))
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 496), "objectForKeyedSubscript:", v5));
    objc_msgSend(v9, "lastBatteryLevel");
    v11 = v10;
    Int64Ranged = CFDictionaryGetInt64Ranged(v8, CFSTR("pid"), 0, 0xFFFFFFFFLL, 0);
    v57 = v5;
    v54 = v8;
    v55 = v7;
    if (Int64Ranged == 8216 || Int64Ranged == 8213)
    {
      v13 = 0.1;
      v14 = 0.2;
      v15 = 0.4;
    }
    else
    {
      v13 = 0.05;
      v15 = 0.2;
      v14 = 0.1;
    }
    v61 = a1;
    if (v11 <= v15)
      v16 = v14;
    else
      v16 = v15;
    if (v11 > v14)
      v17 = v16;
    else
      v17 = v13;
    if (v11 > v13)
      v18 = v17;
    else
      v18 = -1.0;
    if (v11 <= 0.0)
      v18 = v15;
    if (v18 > 0.1 && Int64Ranged == 8208)
      v20 = 0.1;
    else
      v20 = v18;
    v53 = v9;
    v60 = (char *)objc_msgSend(v9, "lastBatteryType", 0.1);
    v62 = 0u;
    v63 = 0u;
    v64 = 0u;
    v65 = 0u;
    v56 = v6;
    obj = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "batteryInfo"));
    v21 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v62, v66, 16);
    if (v21)
    {
      v22 = v21;
      v23 = 0;
      v24 = 0;
      v25 = 0;
      v26 = 0;
      v59 = *(_QWORD *)v63;
      v27 = 1.0;
      LOBYTE(v28) = 1;
      do
      {
        for (i = 0; i != v22; i = (char *)i + 1)
        {
          if (*(_QWORD *)v63 != v59)
            objc_enumerationMutation(obj);
          v30 = *(void **)(*((_QWORD *)&v62 + 1) + 8 * (_QWORD)i);
          v31 = (char *)objc_msgSend(v30, "batteryType");
          v32 = v31;
          v33 = v31 == v60;
          if (v31 == (char *)4 || v31 == (char *)1)
            v23 |= objc_msgSend(v30, "batteryState") == (id)2;
          v35 = *(double *)(*(_QWORD *)(v61 + 32) + 752);
          if (v35 == 0.0)
            objc_msgSend(v30, "batteryLevel");
          v25 |= v33;
          v28 = (v35 >= 0.5) & v28;
          if (v35 < v27)
            v36 = v35;
          else
            v36 = v27;
          if (v35 < v27)
            v37 = v32;
          else
            v37 = v26;
          if (v35 <= v20)
          {
            v24 = 1;
            v27 = v36;
            v26 = v37;
          }
        }
        v22 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v62, v66, 16);
      }
      while (v22);
    }
    else
    {
      v23 = 0;
      v24 = 0;
      v25 = 0;
      v26 = 0;
      v27 = 1.0;
      v28 = 1;
    }

    v7 = v55;
    v38 = v23;
    if (dword_10020FA58 <= 30
      && (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 30)))
    {
      v39 = "no";
      if ((v23 & 1) != 0)
        v40 = "yes";
      else
        v40 = "no";
      if (v28)
        v41 = "yes";
      else
        v41 = "no";
      if ((v24 & 1) != 0)
        v39 = "yes";
      LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _lowBatteryUpdate]_block_invoke", 30, "Low battery check: AC %s, High %s, Low %s, Lowest %.3f%%, Threshold %.3f%%, %@", v40, v41, v39, v27 * 100.0, v20 * 100.0, v55);
    }
    v5 = v57;
    v8 = v54;
    if ((v38 & 1) != 0)
    {
      v6 = v56;
      objc_msgSend(*(id *)(v61 + 32), "_lowBatteryClearSFDevice:reason:", v56, "charging");
      ++*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v61 + 48) + 8) + 24);
    }
    else
    {
      if (v28)
      {
        if ((v25 & 1) != 0)
        {
          v43 = v61;
          v6 = v56;
          objc_msgSend(*(id *)(v61 + 32), "_lowBatteryClearSFDevice:reason:", v56, "high");
          v42 = v53;
        }
        else
        {
          v6 = v56;
          v43 = v61;
          v42 = v53;
          if (v53
            && dword_10020FA58 <= 30
            && (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 30)))
          {
            v48 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v53, "deviceAddress"));
            v49 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v53, "name"));
            v50 = objc_claimAutoreleasedReturnValue(objc_msgSend(v56, "bleDevice"));
            v51 = (void *)v50;
            if ((unint64_t)(v60 - 1) > 3)
              v52 = "?";
            else
              v52 = off_1001E3BE8[(_QWORD)(v60 - 1)];
            LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _lowBatteryUpdate]_block_invoke", 30, "Low battery not cleared: DA %@, Name '%@', %@, missing batteryInfo for last low battery type: %s", v48, v49, v50, v52);

          }
        }
        ++*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v43 + 56) + 8) + 24);
        goto LABEL_84;
      }
      if ((v24 & 1) != 0)
      {
        v6 = v56;
        objc_msgSend(*(id *)(v61 + 32), "_lowBatteryTrackSFDevice:batteryLevel:batteryType:", v56, v26, v27);
        ++*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v61 + 64) + 8) + 24);
        v42 = v53;
        if (v53
          || (v42 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(v61 + 32) + 496), "objectForKeyedSubscript:", v57))) != 0)
        {
          v44 = *(void **)(*(_QWORD *)(*(_QWORD *)(v61 + 72) + 8) + 40);
          if (!v44)
          {
            v45 = objc_alloc_init((Class)NSMutableArray);
            v46 = *(_QWORD *)(*(_QWORD *)(v61 + 72) + 8);
            v47 = *(void **)(v46 + 40);
            *(_QWORD *)(v46 + 40) = v45;

            v44 = *(void **)(*(_QWORD *)(*(_QWORD *)(v61 + 72) + 8) + 40);
          }
          objc_msgSend(v44, "addObject:", v42);
        }
        goto LABEL_84;
      }
      v6 = v56;
    }
    v42 = v53;
LABEL_84:

    goto LABEL_85;
  }
  ++*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
LABEL_85:

}

void sub_10002F260(uint64_t a1, unsigned int a2, void *a3)
{
  id v5;
  const char *v6;
  uint64_t v7;
  void *v8;
  id v9;

  v5 = a3;
  if (*(_QWORD *)(a1 + 32) == *(_QWORD *)(*(_QWORD *)(a1 + 40) + 1328))
  {
    v9 = v5;
    if (dword_10020FA58 <= 30
      && (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 30)))
    {
      if (a2 > 6)
        v6 = "?";
      else
        v6 = off_1001E38C8[a2];
      LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _lowBatteryShowAlertWithLowBatteryDevice:]_block_invoke", 30, "LowBattery banner action: %s, %{error}", v6, v9);
    }
    objc_msgSend(*(id *)(a1 + 32), "invalidate");
    v7 = *(_QWORD *)(a1 + 40);
    v8 = *(void **)(v7 + 1328);
    *(_QWORD *)(v7 + 1328) = 0;

    v5 = v9;
  }

}

void sub_10002F3F4(id a1)
{
  if (dword_10020FA58 <= 30 && (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 30)))
    LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _aaControllerEnsureStarted]_block_invoke", 30, "AAController Invalidated");
}

void sub_10002F454(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  int v7;
  id v8;

  v3 = a2;
  v4 = v3;
  if (*(_QWORD *)(a1 + 32) == *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8))
  {
    if (v3)
    {
      v8 = v3;
      if (dword_10020FA58 <= 90
        && (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 90)))
      {
        LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _aaControllerEnsureStarted]_block_invoke_2", 90, "### Activate AAController failed: %{error}\n", v8);
      }
      objc_msgSend(*(id *)(a1 + 32), "invalidate");
      v5 = *(_QWORD *)(a1 + 40);
      v6 = *(void **)(v5 + 8);
      *(_QWORD *)(v5 + 8) = 0;

      goto LABEL_11;
    }
    if (dword_10020FA58 <= 30)
    {
      v8 = 0;
      if (dword_10020FA58 != -1 || (v7 = _LogCategory_Initialize(&dword_10020FA58, 30), v4 = 0, v7))
      {
        LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _aaControllerEnsureStarted]_block_invoke_2", 30, "AAController activated");
LABEL_11:
        v4 = v8;
      }
    }
  }

}

id sub_10002F690(uint64_t a1)
{
  id result;
  unsigned __int8 v3;
  unsigned int v4;
  const char *v5;
  const char *v6;
  unsigned __int8 *v7;
  uint64_t state64;

  result = (id)*(unsigned int *)(*(_QWORD *)(a1 + 32) + 60);
  if ((_DWORD)result != -1)
  {
    state64 = 0;
    notify_get_state((int)result, &state64);
    v3 = state64;
    if (dword_10020FA58 <= 30
      && (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 30)))
    {
      v4 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 32);
      if (v4 > 0xE)
        v5 = "?";
      else
        v5 = off_1001E3B30[(char)v4];
      if (v3 > 0xEu)
        v6 = "?";
      else
        v6 = off_1001E3B30[(char)v3];
      LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _activityMonitorEnsureStarted]_block_invoke", 30, "Activity level changed %d (%s) -> %d (%s)\n", v4, v5, v3, v6);
    }
    v7 = *(unsigned __int8 **)(a1 + 32);
    if (v3 >= 0xBuLL && v7[32] <= 0xAu)
    {
      objc_msgSend(v7, "_nearbyInfoActivityCriticalStart");
      v7 = *(unsigned __int8 **)(a1 + 32);
    }
    v7[32] = v3;
    return objc_msgSend(*(id *)(a1 + 32), "_nearbyInfoActivityChanged");
  }
  return result;
}

id sub_10002F924(uint64_t a1)
{
  id result;
  uint64_t v3;
  int v4;

  result = *(id *)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  if (result != *(id *)(v3 + 160))
    return result;
  if (dword_10020FA58 <= 30)
  {
    if (dword_10020FA58 != -1)
    {
LABEL_4:
      LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _callMonitorEnsureStarted]_block_invoke", 30, "Call State, incoming unconnected: %d, incoming connected: %d, outgoing unconnected: %d, outgoing connected: %d activeCall %d", objc_msgSend(result, "callCountIncomingUnconnected"), objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 160), "callCountIncomingConnected"), objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 160), "callCountOutgoingUnconnected"), objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 160), "callCountOutgoingConnected"), objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 160), "activeCallCount"));
      v3 = *(_QWORD *)(a1 + 40);
      goto LABEL_6;
    }
    v4 = _LogCategory_Initialize(&dword_10020FA58, 30);
    v3 = *(_QWORD *)(a1 + 40);
    if (v4)
    {
      result = *(id *)(v3 + 160);
      goto LABEL_4;
    }
  }
LABEL_6:
  if ((int)objc_msgSend(*(id *)(v3 + 1176), "callIncomingUnconnected") >= 1
    && !objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 160), "callCountIncomingUnconnected"))
  {
    if (dword_10020FA58 <= 30
      && (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 30)))
    {
      LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _callMonitorEnsureStarted]_block_invoke", 30, "Incoming call ringtone stopped");
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 40) + 920) = mach_absolute_time();
  }
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 1176), "setCallIncomingUnconnected:", objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 160), "callCountIncomingUnconnected"));
  return objc_msgSend(*(id *)(a1 + 40), "_update");
}

id sub_10002FC98(uint64_t a1, uint64_t a2)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_connectedDeviceFound:", a2);
}

id sub_10002FCA4(uint64_t a1)
{
  id v2;
  unint64_t v3;
  const char *v4;
  unint64_t v5;
  const char *v6;

  v2 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1176), "bluetoothState");
  if (v2 != objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 208), "bluetoothState")
    && dword_10020FA58 <= 30
    && (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 30)))
  {
    v3 = (unint64_t)objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1176), "bluetoothState");
    if (v3 > 0xA)
      v4 = "?";
    else
      v4 = off_1001E3978[v3];
    v5 = (unint64_t)objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 208), "bluetoothState");
    if (v5 > 0xA)
      v6 = "?";
    else
      v6 = off_1001E3978[v5];
    LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _connectedDeviceMonitorEnsureStarted]_block_invoke_2", 30, "Bluetooth state changed %s -> %s", v4, v6);
  }
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1176), "setBluetoothState:", objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 208), "bluetoothState"));
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 352), "trigger");
}

id sub_10002FDBC(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "_connectedDeviceLost:", a2);
}

void sub_10002FDC8(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  id v7;

  v3 = a2;
  v4 = *(void **)(*(_QWORD *)(a1 + 32) + 208);
  if (v4 == *(void **)(a1 + 40))
  {
    v7 = v3;
    if (v3)
    {
      if (dword_10020FA58 <= 90
        && (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 90)))
      {
        LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _connectedDeviceMonitorEnsureStarted]_block_invoke_4", 90, "### Activate failed: %{error}\n", v7);
      }
      objc_msgSend(*(id *)(a1 + 40), "invalidate");
      v5 = *(_QWORD *)(a1 + 32);
      v6 = *(void **)(v5 + 208);
      *(_QWORD *)(v5 + 208) = 0;

    }
    else
    {
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1176), "setBluetoothState:", objc_msgSend(v4, "bluetoothState"));
      objc_msgSend(*(id *)(a1 + 32), "_update");
    }
    v3 = v7;
  }

}

void sub_100031608(id a1, NSString *a2, BTSmartRoutingWxDevice *a3, BOOL *a4)
{
  BTSmartRoutingWxDevice *v5;
  uint64_t v6;
  unsigned int v7;
  const char *v8;
  NSString *v9;

  v9 = a2;
  v5 = a3;
  if (-[BTSmartRoutingWxDevice routingAction](v5, "routingAction") == 2)
  {
    v6 = -[BTSmartRoutingWxDevice routed](v5, "routed") ? 1 : 3;
    -[BTSmartRoutingWxDevice _setRoutingAction:](v5, "_setRoutingAction:", v6);
    if (dword_10020FA58 <= 30
      && (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 30)))
    {
      v7 = -[BTSmartRoutingWxDevice routingAction](v5, "routingAction");
      if (v7 > 5)
        v8 = "?";
      else
        v8 = off_1001E3E40[v7];
      LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _connectedDeviceFound:]_block_invoke", 30, "Change unmanaged %@ to tipi device %s", v9, v8);
    }
  }

}

void sub_100031B60(uint64_t a1)
{
  void *v2;
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  _QWORD v8[7];
  _QWORD v9[5];

  v2 = (void *)MRAVRoutingDiscoverySessionCreate(1);
  MRAVRoutingDiscoverySessionSetDiscoveryMode(v2, 1);
  v3 = v2;
  v4 = v3;
  if (v3)
    objc_msgSend(v3, "setOnlyDiscoversBluetoothDevices:", 1);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_100031C3C;
  v9[3] = &unk_1001E3130;
  v9[4] = *(_QWORD *)(a1 + 32);
  v5 = MRAVRoutingDiscoverySessionAddOutputDevicesChangedCallback(v4, v9);
  v6 = *(_QWORD *)(a1 + 32);
  v7 = *(NSObject **)(v6 + 312);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100031CE4;
  v8[3] = &unk_1001E3158;
  v8[4] = v6;
  v8[5] = v4;
  v8[6] = v5;
  dispatch_async(v7, v8);

}

void sub_100031C3C(uint64_t a1, CFTypeRef cf)
{
  CFTypeRef v3;
  uint64_t v4;
  NSObject *v5;
  _QWORD v6[6];

  v3 = CFRetain(cf);
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(NSObject **)(v4 + 312);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100031CAC;
  v6[3] = &unk_1001E3108;
  v6[4] = v4;
  v6[5] = v3;
  dispatch_async(v5, v6);
}

void sub_100031CAC(uint64_t a1)
{
  uint64_t v2;
  const void *v3;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(const void **)(v2 + 528);
  if (v3)
  {
    CFRelease(v3);
    v2 = *(_QWORD *)(a1 + 32);
  }
  *(_QWORD *)(v2 + 528) = *(_QWORD *)(a1 + 40);
}

_QWORD *sub_100031CE4(_QWORD *result)
{
  *(_QWORD *)(result[4] + 288) = result[5];
  *(_QWORD *)(result[4] + 304) = result[6];
  *(_BYTE *)(result[4] + 296) = 0;
  return result;
}

void sub_100031DE0(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 32))
  {
    if (!*(_QWORD *)(a1 + 40)
      || (MRAVRoutingDiscoverySessionRemoveOutputDevicesChangedCallback(), *(_QWORD *)(a1 + 32)))
    {
      MRAVRoutingDiscoverySessionSetDiscoveryMode();
      CFRelease(*(CFTypeRef *)(a1 + 32));
    }
  }
}

void sub_100032308(uint64_t a1)
{
  void *SharedSystemAudioContext;
  uint64_t SharedAudioPresentationContext;
  __CFString *v4;
  void *v5;
  void *v6;
  int Type;
  void *v8;
  void *v9;
  int Subtype;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  int v17;
  void *v18;
  void *v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  _BYTE *v24;
  _BYTE *v25;
  uint64_t v26;
  const __CFString *v27;
  const __CFString *v28;
  _BYTE *v29;
  const char *v30;
  const char *v31;
  const char *v32;
  void *v33;
  __CFString *v34;
  uint64_t v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  uint64_t v40;
  __CFString *v41;
  _QWORD v42[5];
  char v43;
  _QWORD v44[4];
  __CFString *v45;
  uint64_t v46;

  SharedSystemAudioContext = (void *)MRAVOutputContextGetSharedSystemAudioContext(a1);
  SharedAudioPresentationContext = MRAVOutputContextGetSharedAudioPresentationContext(SharedSystemAudioContext);
  v4 = (__CFString *)SharedAudioPresentationContext;
  if (SharedSystemAudioContext)
  {
    v5 = (void *)MRAVOutputContextCopyOutputDevices(SharedSystemAudioContext);
    if (objc_msgSend(v5, "count"))
    {
      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "firstObject"));
      Type = MRAVOutputDeviceGetType();

      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "firstObject"));
      v41 = (__CFString *)MRAVOutputDeviceCopyName();

      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "firstObject"));
      Subtype = MRAVOutputDeviceGetSubtype();

      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "firstObject"));
      SharedSystemAudioContext = (void *)MRAVOutputDeviceCopyUniqueIdentifier();

      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(SharedSystemAudioContext, "stringByReplacingOccurrencesOfString:withString:", CFSTR("-tacl"), &stru_1001ED4C0));
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "stringByReplacingOccurrencesOfString:withString:", CFSTR("-tsco"), &stru_1001ED4C0));
      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "uppercaseString"));

    }
    else
    {
      v41 = 0;
      SharedSystemAudioContext = 0;
      v14 = 0;
      Subtype = 0;
      Type = 0;
    }

    if (!v4)
      goto LABEL_15;
  }
  else
  {
    v41 = 0;
    v14 = 0;
    Subtype = 0;
    Type = 0;
    if (!SharedAudioPresentationContext)
      goto LABEL_15;
  }
  v15 = (void *)MRAVOutputContextCopyOutputDevices(v4);
  if (objc_msgSend(v15, "count"))
  {
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "firstObject"));
    v17 = MRAVOutputDeviceGetType();

    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "firstObject"));
    v4 = (__CFString *)MRAVOutputDeviceCopyName();

    v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "firstObject"));
    v20 = MRAVOutputDeviceGetSubtype();

    if (Type == 2 && v17 == 2)
    {
      v21 = *(_QWORD *)(a1 + 32);
      if (*(_BYTE *)(v21 + 433))
        goto LABEL_79;
      *(_BYTE *)(v21 + 433) = 1;
      *(_BYTE *)(*(_QWORD *)(a1 + 32) + 434) = 0;
LABEL_13:
      *(_BYTE *)(*(_QWORD *)(a1 + 32) + 472) = 0;
      goto LABEL_23;
    }
    if (Subtype == 1 && v20 == 1)
    {
      v21 = *(_QWORD *)(a1 + 32);
      if (*(_BYTE *)(v21 + 472))
        goto LABEL_79;
      *(_BYTE *)(v21 + 433) = 0;
      *(_BYTE *)(*(_QWORD *)(a1 + 32) + 434) = 0;
      *(_BYTE *)(*(_QWORD *)(a1 + 32) + 472) = 1;
      v26 = mach_absolute_time();
      if ((unint64_t)UpTicksToSeconds(v26 - *(_QWORD *)(*(_QWORD *)(a1 + 32) + 400)) <= 1
        && dword_10020FA58 <= 90
        && (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 90)))
      {
        LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _mediaRouteMonitorActiveAudioRouteChanged:]_block_invoke", 90, "### Error: Last hijack was less than 2 seconds ago, audio shouldn't be routed to speakers");
      }
      goto LABEL_23;
    }
    if (Subtype == 4 && v20 == 4)
    {
      v21 = *(_QWORD *)(a1 + 32);
      if (*(_BYTE *)(v21 + 434))
        goto LABEL_79;
      *(_BYTE *)(v21 + 433) = 0;
      *(_BYTE *)(*(_QWORD *)(a1 + 32) + 434) = 1;
      goto LABEL_13;
    }
  }
  else
  {

    v4 = 0;
  }
LABEL_15:
  v21 = *(_QWORD *)(a1 + 32);
  v22 = *(unsigned __int8 *)(v21 + 433);
  if (*(_BYTE *)(v21 + 433))
  {
    *(_BYTE *)(v21 + 433) = 0;
    v21 = *(_QWORD *)(a1 + 32);
  }
  if (*(_BYTE *)(v21 + 434))
  {
    *(_BYTE *)(v21 + 434) = 0;
    v23 = *(_QWORD *)(a1 + 32);
    if (!*(_BYTE *)(v23 + 472))
      goto LABEL_23;
    v24 = (_BYTE *)(v23 + 472);
LABEL_22:
    *v24 = 0;
    goto LABEL_23;
  }
  if (*(_BYTE *)(v21 + 472))
  {
    v24 = (_BYTE *)(v21 + 472);
    goto LABEL_22;
  }
  if (!v22)
    goto LABEL_79;
LABEL_23:
  v25 = *(_BYTE **)(a1 + 32);
  if (!v25[433] && !v25[472] && !v25[434])
  {
LABEL_37:
    if (dword_10020FA58 <= 30
      && (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 30)))
    {
      v27 = &stru_1001ED4C0;
      if (v41)
        v28 = v41;
      else
        v28 = &stru_1001ED4C0;
      if (v4)
        v27 = v4;
      v29 = *(_BYTE **)(a1 + 32);
      if (v29[433])
        v30 = "yes";
      else
        v30 = "no";
      if (v29[472])
        v31 = "yes";
      else
        v31 = "no";
      if (v29[434])
        v32 = "yes";
      else
        v32 = "no";
      LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _mediaRouteMonitorActiveAudioRouteChanged:]_block_invoke", 30, "Active audio route changed: nameOutputContext %@ nameOutputContextPresentation %@, BT %s Speaker %s, Receiver %s", v28, v27, v30, v31, v32);
    }
    goto LABEL_61;
  }
  if (dword_10020FA58 <= 30)
  {
    if (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 30))
      LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _mediaRouteMonitorActiveAudioRouteChanged:]_block_invoke", 30, "Active audio route changed to %@", v14);
    goto LABEL_37;
  }
LABEL_61:
  v21 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(v21 + 433))
  {
    if (*(_BYTE *)(v21 + 872) && *(_BYTE *)(v21 + 873))
    {
      objc_msgSend((id)v21, "_mediaRouteMonitorSpeakRoute");
      *(_BYTE *)(*(_QWORD *)(a1 + 32) + 873) = 0;
      v21 = *(_QWORD *)(a1 + 32);
    }
    v33 = *(void **)(v21 + 1160);
    v44[0] = _NSConcreteStackBlock;
    v44[1] = 3221225472;
    v44[2] = sub_10003294C;
    v44[3] = &unk_1001E2E88;
    v34 = v41;
    v35 = *(_QWORD *)(a1 + 32);
    v45 = v34;
    v46 = v35;
    objc_msgSend(v33, "enumerateKeysAndObjectsUsingBlock:", v44);

    v21 = *(_QWORD *)(a1 + 32);
  }
  if (*(_BYTE *)(v21 + 472) || *(_BYTE *)(v21 + 434))
  {
    if (*(_BYTE *)(v21 + 937))
    {
      *(_BYTE *)(v21 + 937) = 0;
      v21 = *(_QWORD *)(a1 + 32);
    }
    v36 = *(void **)(v21 + 1160);
    v42[0] = _NSConcreteStackBlock;
    v42[1] = 3221225472;
    v42[2] = sub_100032D58;
    v42[3] = &unk_1001E31A0;
    v42[4] = v21;
    v43 = 1;
    objc_msgSend(v36, "enumerateKeysAndObjectsUsingBlock:", v42);
    v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1176), "audioDestination"));
    if (objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1176), "audioRoute") == 3)
    {
      if (v37)
      {
        v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1160), "objectForKeyedSubscript:", v37));

        if (v38)
        {
          if (dword_10020FA58 <= 30
            && (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 30)))
          {
            LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _mediaRouteMonitorActiveAudioRouteChanged:]_block_invoke", 30, "Routed to speaker or receiver, should ignore manual connect flag afterward");
          }
          v39 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1160), "objectForKeyedSubscript:", v14));
          objc_msgSend(v39, "setIgnoreManualConnect:", 1);

        }
      }
    }
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 352), "trigger");

    v21 = *(_QWORD *)(a1 + 32);
  }
LABEL_79:
  if (*(_BYTE *)(v21 + 433))
  {
    v40 = 3;
  }
  else if (*(_BYTE *)(v21 + 472))
  {
    v40 = 1;
  }
  else
  {
    v40 = 2 * *(unsigned __int8 *)(v21 + 434);
  }
  objc_msgSend((id)v21, "_updateAudioRoute:withUUID:", v40, v14);

}

void sub_10003294C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  BOOL v8;
  void *v9;
  unsigned int v10;
  const char *v11;
  unsigned int v12;
  uint64_t v13;
  void *v14;
  void *v15;
  double v16;
  void *v17;
  const char *v18;
  void *v19;
  const char *v20;
  id v21;

  v21 = a2;
  v5 = a3;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "deviceName"));
  v7 = *(void **)(a1 + 32);
  if (v7)
    v8 = v6 == 0;
  else
    v8 = 1;
  if (v8 || !objc_msgSend(v7, "containsString:", v6))
  {
    if (dword_10020FA58 <= 30
      && (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 30)))
    {
      LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _mediaRouteMonitorActiveAudioRouteChanged:]_block_invoke_2", 30, "BT route, update Wx %@ routed NO", v21);
    }
    objc_msgSend(v5, "_setRoutedState:", 0);
    if (objc_msgSend(v5, "routingAction") != 2)
    {
      if (dword_10020FA58 <= 30
        && (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 30)))
      {
        v10 = objc_msgSend(v5, "routingAction");
        if (v10 > 5)
          v11 = "?";
        else
          v11 = off_1001E3E40[v10];
        LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _mediaRouteMonitorActiveAudioRouteChanged:]_block_invoke_2", 30, "Current route action is %s, change to DontRoute", v11);
      }
      objc_msgSend(v5, "_setRoutingAction:", 3);
    }
    objc_msgSend(v5, "setIgnoreManualConnect:", 1);
  }
  else if ((objc_msgSend(v5, "routed") & 1) == 0)
  {
    objc_msgSend(v5, "_setRoutedState:", 1);
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "otherTipiDeviceBTAddress"));

    if (v9)
    {
      if (objc_msgSend(v5, "routingAction") != 2)
      {
        if (objc_msgSend(v5, "routingAction") == 1)
        {
          if (objc_msgSend(v5, "routingAction") == 1
            && objc_msgSend(*(id *)(a1 + 40), "_isManualConnection:", v21))
          {
            if (dword_10020FA58 > 30)
            {
LABEL_57:
              objc_msgSend(*(id *)(a1 + 40), "_relayConduitMessageSend:withOptions:andWxAddress:andOtherAddress:", 1, &off_1001F4110, v21, 0);
              goto LABEL_30;
            }
            if (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 30))
              LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _mediaRouteMonitorActiveAudioRouteChanged:]_block_invoke_2", 30, "Send ownership false for manual connection");
            v12 = 1;
          }
          else
          {
            v12 = 0;
          }
        }
        else
        {
          if (dword_10020FA58 <= 30
            && (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 30)))
          {
            LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _mediaRouteMonitorActiveAudioRouteChanged:]_block_invoke_2", 30, "BT route, make Wx %@ Route", v21);
          }
          objc_msgSend(v5, "_setRoutingAction:", 1);
          v13 = *(_QWORD *)(a1 + 40);
          if (*(_BYTE *)(v13 + 937))
          {
            v12 = 0;
            *(_BYTE *)(v13 + 937) = 0;
          }
          else
          {
            v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "deviceVersion"));
            v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "otherTipiDeviceVersion"));
            objc_msgSend(v15, "doubleValue");
            if (v16 < 1.2 || objc_msgSend(CFSTR("3E725"), "compare:options:", v14, 64) == (id)1)
            {
              v12 = 1;
            }
            else
            {
              v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "otherTipiDeviceBTName"));
              v12 = objc_msgSend(v17, "isEqualToString:", CFSTR("Mac"));

            }
          }
        }
        if (dword_10020FA58 <= 30
          && (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 30)))
        {
          if (v12)
            v18 = "yes";
          else
            v18 = "no";
          v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "otherTipiDeviceBTName"));
          if (objc_msgSend(v19, "isEqualToString:", CFSTR("Mac")))
            v20 = "yes";
          else
            v20 = "no";
          LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _mediaRouteMonitorActiveAudioRouteChanged:]_block_invoke_2", 30, "Legacy routing behavior = %s is other side mac = %s", v18, v20);

          if ((v12 & 1) != 0)
            goto LABEL_57;
        }
        else if (v12)
        {
          goto LABEL_57;
        }
      }
    }
  }
LABEL_30:

}

void sub_100032D58(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  uint64_t v10;
  void *v11;
  void *v12;
  _QWORD *v13;
  id v14;

  v14 = a2;
  v5 = a3;
  v6 = *(void **)(*(_QWORD *)(a1 + 32) + 336);
  if (v6)
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "bleDevice"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "bluetoothAddress"));

    if (objc_msgSend(v8, "length") == (id)6)
    {
      v9 = objc_retainAutorelease(v8);
      v10 = NSPrintF("%.6a", COERCE_DOUBLE(objc_msgSend(v9, "bytes")));
      v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
      v12 = v11;
      if (v11 && (objc_msgSend(v11, "isEqualToString:", v14) & 1) != 0)
      {

        goto LABEL_21;
      }
    }
    else
    {
      v12 = 0;
    }

  }
  if (dword_10020FA58 <= 30 && (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 30)))
    LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _mediaRouteMonitorActiveAudioRouteChanged:]_block_invoke_3", 30, "Speaker/Receiver route, update Wx %@ routed NO", v14);
  objc_msgSend(v5, "_setRoutedState:", 0);
  if (objc_msgSend(v5, "routingAction") != 2)
  {
    if (dword_10020FA58 <= 30
      && (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 30)))
    {
      LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _mediaRouteMonitorActiveAudioRouteChanged:]_block_invoke_3", 30, "Speaker/Receiver route, Make Wx %@ DontRoute", v14);
    }
    objc_msgSend(v5, "_setRoutingAction:", 3);
  }
  v13 = *(_QWORD **)(a1 + 32);
  if (v13[133] && *(_BYTE *)(a1 + 40))
    objc_msgSend(v13, "_setConnectedBannerTick:", 0);
LABEL_21:

}

void sub_1000330B4(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  if (dword_10020FA58 <= 90 && (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 90)))
    LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _mediaRouteMonitorSpeakRoute]_block_invoke", 90, "Speak route completed: %{error}", v3);
  objc_msgSend(*(id *)(a1 + 32), "invalidate");

}

void sub_10003319C(uint64_t a1)
{
  void *v2;
  void *v3;
  BOOL v4;
  uint64_t v5;
  NSObject *v6;
  _QWORD v7[5];
  BOOL v8;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[AVSystemController sharedAVSystemController](AVSystemController, "sharedAVSystemController"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "attributeForKey:", AVSystemController_PlayingSessionsDescriptionAttribute));

  v4 = objc_msgSend(v3, "count") != 0;
  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(NSObject **)(v5 + 312);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100033250;
  v7[3] = &unk_1001E31C8;
  v7[4] = v5;
  v8 = v4;
  dispatch_async(v6, v7);

}

id sub_100033250(uint64_t a1)
{
  const char *v2;

  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 56) = *(_BYTE *)(a1 + 40);
  if (dword_10020FA58 <= 30 && (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 30)))
  {
    if (*(_BYTE *)(*(_QWORD *)(a1 + 32) + 56))
      v2 = "playing";
    else
      v2 = "not playing";
    LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _mediaRouteMonitorActivityLevelUpdate:]_block_invoke_2", 30, "Audio is %s on the system", v2);
  }
  return objc_msgSend(*(id *)(a1 + 32), "_nearbyInfoActivityChanged");
}

void sub_100034514(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  uint64_t v15;
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v15 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_100034554(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;
  uint64_t v7;
  void *v8;
  NSObject *v9;
  _QWORD block[5];
  id v11;
  id v12;
  __int128 v13;
  int v14;
  id v15;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[AVSystemController sharedAVSystemController](AVSystemController, "sharedAVSystemController"));
  v3 = *(unsigned int *)(a1 + 72);
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
  v15 = *(id *)(v5 + 40);
  v6 = objc_msgSend(v2, "shouldClientWithAudioScore:hijackRoute:hijackDeniedReason:", v3, v4, &v15);
  objc_storeStrong((id *)(v5 + 40), v15);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = v6;

  block[0] = _NSConcreteStackBlock;
  block[2] = sub_10003464C;
  block[3] = &unk_1001E31F0;
  v8 = *(void **)(a1 + 32);
  v7 = *(_QWORD *)(a1 + 40);
  v9 = *(NSObject **)(v7 + 312);
  block[1] = 3221225472;
  block[4] = v7;
  v14 = *(_DWORD *)(a1 + 72);
  v11 = v8;
  v12 = *(id *)(a1 + 48);
  v13 = *(_OWORD *)(a1 + 56);
  dispatch_async(v9, block);

}

id sub_10003464C(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_mediaRouteHijackResponse:wxAddress:andAudioResponseID:andAllowedToHijack:withReason:", *(unsigned int *)(a1 + 72), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40));
}

void sub_1000346CC(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  int v7;
  void *v8;
  const __CFString *v9;
  void *v10;
  void *v11;
  id v12;

  v12 = a2;
  v5 = a3;
  if (objc_msgSend(v5, "routingAction") == 3)
  {
    if (dword_10020FA58 <= 30
      && (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 30)))
    {
      LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _updateRoutingActionForManuallyRoute]_block_invoke", 30, "Change %@ DontRoute to Route", v12);
    }
    objc_msgSend(v5, "_setRoutingAction:", 1);
  }
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "otherTipiDeviceBTAddress"));

  if (v6)
  {
    if (dword_10020FA58 <= 30
      && (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 30)))
    {
      LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _updateRoutingActionForManuallyRoute]_block_invoke", 30, "Force other side to give up ownership of %@", v12);
    }
    v11 = *(void **)(a1 + 32);
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "otherTipiDeviceBTAddress"));
    objc_msgSend(v11, "_relayConduitMessageSend:withOptions:andWxAddress:andOtherAddress:", 1, &off_1001F4138, v12, v10);
  }
  else
  {
    v7 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 160), "activeCallCount");
    v8 = *(void **)(a1 + 32);
    if (v7 < 1)
      v9 = CFSTR("-tacl");
    else
      v9 = CFSTR("-tsco");
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@%@"), v12, v9));
    objc_msgSend(v8, "_smartRoutingChangeRoute:", v10);
  }

}

_QWORD *sub_100034B00(uint64_t a1, uint64_t a2)
{
  _QWORD *result;

  result = *(_QWORD **)(a1 + 32);
  if (result[72] == *(_QWORD *)(a1 + 40))
    return _objc_msgSend(result, "_nearbyInfoDeviceFound:", a2);
  return result;
}

_QWORD *sub_100034B24(uint64_t a1, uint64_t a2)
{
  _QWORD *result;

  result = *(_QWORD **)(a1 + 32);
  if (result[72] == *(_QWORD *)(a1 + 40))
    return objc_msgSend(result, "_nearbyInfoDeviceLost:", a2);
  return result;
}

_QWORD *sub_100034B48(uint64_t a1, uint64_t a2)
{
  _QWORD *result;

  result = *(_QWORD **)(a1 + 32);
  if (result[72] == *(_QWORD *)(a1 + 40))
    return _objc_msgSend(result, "_nearbyInfoDeviceFound:", a2);
  return result;
}

void sub_100034B6C(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  id v6;

  v3 = a2;
  if (v3 && *(_QWORD *)(*(_QWORD *)(a1 + 32) + 576) == *(_QWORD *)(a1 + 40))
  {
    v6 = v3;
    if (dword_10020FA58 <= 90
      && (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 90)))
    {
      LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _nearbyInfoDiscoveryEnsureStarted]_block_invoke_4", 90, "### NearbyInfo discovery start failed: %{error}", v6);
    }
    objc_msgSend(*(id *)(a1 + 40), "invalidate");
    v4 = *(_QWORD *)(a1 + 32);
    v5 = *(void **)(v4 + 576);
    *(_QWORD *)(v4 + 576) = 0;

    v3 = v6;
  }

}

_QWORD *sub_100034C20(_QWORD *result)
{
  _QWORD *v1;
  void *v2;
  NSObject *v3;
  uint64_t v4;
  void *v5;

  v1 = result;
  if (dword_10020FA58 <= 30)
  {
    if (dword_10020FA58 != -1 || (result = (_QWORD *)_LogCategory_Initialize(&dword_10020FA58, 30), (_DWORD)result))
      result = (_QWORD *)LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _nearbyInfoDiscoveryEnsureStarted]_block_invoke_5", 30, "Evaluate for FD");
  }
  v2 = (void *)v1[4];
  if (v2 == *(void **)(v1[5] + 808))
  {
    if (v2)
    {
      v3 = v2;
      dispatch_source_cancel(v3);
      v4 = v1[5];
      v5 = *(void **)(v4 + 808);
      *(_QWORD *)(v4 + 808) = 0;

    }
    return objc_msgSend(*(id *)(v1[5] + 352), "trigger");
  }
  return result;
}

void sub_10003517C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_100035198(uint64_t a1, uint64_t a2, void *a3, _BYTE *a4)
{
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  unsigned __int8 v10;
  id v11;

  v11 = a3;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "model"));
  if ((objc_msgSend(v6, "containsString:", CFSTR("Mac")) & 1) == 0)
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "model"));
    if ((objc_msgSend(v7, "hasPrefix:", CFSTR("iPhone")) & 1) == 0)
    {
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "model"));
      if (!objc_msgSend(v8, "hasPrefix:", CFSTR("iPad")))
      {
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "model"));
        v10 = objc_msgSend(v9, "hasPrefix:", CFSTR("iPod"));

        if ((v10 & 1) == 0)
          goto LABEL_8;
        goto LABEL_7;
      }

    }
  }

LABEL_7:
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
  *a4 = 1;
LABEL_8:

}

void sub_100035870(uint64_t a1, void *a2)
{
  void *v3;
  int v4;
  id v5;

  v5 = a2;
  objc_msgSend(*(id *)(a1 + 32), "invalidate");
  v3 = v5;
  if (v5)
  {
    if (dword_10020FA58 <= 90)
    {
      if (dword_10020FA58 != -1 || (v4 = _LogCategory_Initialize(&dword_10020FA58, 90), v3 = v5, v4))
      {
        LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _nearbyInfoSetAudioRoutingScore]_block_invoke", 90, "### NearbyInfo set audio routing score failed: %d, %{error}", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 1012), v3);
        v3 = v5;
      }
    }
  }

}

void sub_100035DD8(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

id sub_100035DF8(uint64_t a1, uint64_t a2, void *a3)
{
  id result;
  uint64_t v5;
  const char *v6;
  const char *v7;

  result = objc_msgSend(a3, "routed");
  if ((_DWORD)result && *(_BYTE *)(a1 + 48))
  {
    if (dword_10020FA58 <= 30)
    {
      if (dword_10020FA58 != -1 || (result = (id)_LogCategory_Initialize(&dword_10020FA58, 30), (_DWORD)result))
      {
        v5 = *(_QWORD *)(a1 + 32);
        if (*(_BYTE *)(v5 + 56))
          v6 = "yes";
        else
          v6 = "no";
        if (objc_msgSend(*(id *)(v5 + 160), "activeCallCount"))
          v7 = "yes";
        else
          v7 = "no";
        result = (id)LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _nearbyInfoActivityChanged]_block_invoke", 30, "NearbyInfoActivityChanged: audio is playing. Continue to keep High score, Media %s, phone call %s", v6, v7);
      }
    }
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 6;
  }
  return result;
}

_QWORD *sub_10003605C(_QWORD *result)
{
  uint64_t v1;
  _QWORD *v2;
  const char *v3;
  int v4;
  void *v5;
  NSObject *v6;
  uint64_t v7;
  void *v8;

  v1 = result[5];
  if (result[4] == *(_QWORD *)(v1 + 24))
  {
    v2 = result;
    if (dword_10020FA58 <= 30)
    {
      if (dword_10020FA58 != -1 || (v4 = _LogCategory_Initialize(&dword_10020FA58, 30), v1 = v2[5], v4))
      {
        if (*(_BYTE *)(v1 + 1024))
          v3 = "yes";
        else
          v3 = "no";
        LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _nearbyInfoActivityCriticalStart]_block_invoke", 30, "Activity critical timer ended. Screen %s", v3);
        v1 = v2[5];
      }
    }
    v5 = *(void **)(v1 + 24);
    if (v5)
    {
      v6 = v5;
      dispatch_source_cancel(v6);
      v7 = v2[5];
      v8 = *(void **)(v7 + 24);
      *(_QWORD *)(v7 + 24) = 0;

    }
    return objc_msgSend((id)v2[5], "_nearbyInfoActivityChanged");
  }
  return result;
}

void sub_1000362B8(uint64_t a1, void *a2)
{
  id v3;
  id v4;

  v3 = a2;
  if (*(_QWORD *)(*(_QWORD *)(a1 + 32) + 664) == *(_QWORD *)(a1 + 40))
  {
    v4 = v3;
    if (dword_10020FA58 <= 30
      && (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 30)))
    {
      LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _pairedDeviceMonitorEnsureStarted]_block_invoke", 30, "Pairing found device %@", v4);
    }
    objc_msgSend(*(id *)(a1 + 32), "_anyPairedDeviceSupportsSmartRouting");
    v3 = v4;
  }

}

void sub_100036358(uint64_t a1, void *a2)
{
  id v3;
  id v4;

  v3 = a2;
  if (*(_QWORD *)(*(_QWORD *)(a1 + 32) + 664) == *(_QWORD *)(a1 + 40))
  {
    v4 = v3;
    if (dword_10020FA58 <= 30
      && (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 30)))
    {
      LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _pairedDeviceMonitorEnsureStarted]_block_invoke_2", 30, "Pairing lost device %@", v4);
    }
    objc_msgSend(*(id *)(a1 + 32), "_anyPairedDeviceSupportsSmartRouting");
    v3 = v4;
  }

}

void sub_1000363F8(uint64_t a1, void *a2)
{
  id v3;
  _QWORD *v4;
  uint64_t v5;
  void *v6;
  id v7;

  v3 = a2;
  v4 = *(_QWORD **)(a1 + 32);
  if (v4[83] == *(_QWORD *)(a1 + 40))
  {
    v7 = v3;
    if (v3)
    {
      if (dword_10020FA58 <= 90
        && (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 90)))
      {
        LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _pairedDeviceMonitorEnsureStarted]_block_invoke_3", 90, "### Activate failed: %{error}\n", v7);
      }
      objc_msgSend(*(id *)(a1 + 40), "invalidate");
      v5 = *(_QWORD *)(a1 + 32);
      v6 = *(void **)(v5 + 664);
      *(_QWORD *)(v5 + 664) = 0;

    }
    else
    {
      objc_msgSend(v4, "_anyPairedDeviceSupportsSmartRouting");
      objc_msgSend(*(id *)(a1 + 32), "_update");
    }
    v3 = v7;
  }

}

id sub_100036690(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_nearbyInfoActivityChanged");
}

id sub_100036944(uint64_t a1)
{
  id result;
  const char *v3;
  unsigned int v4;
  unsigned __int8 *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  unint64_t v10;
  const char *v11;
  void *v12;
  NSObject *v13;
  uint64_t v14;
  void *v15;
  _BYTE *v16;
  _BYTE *v17;

  result = *(id *)(a1 + 32);
  if (result == *(id *)(*(_QWORD *)(a1 + 40) + 656))
  {
    *(_BYTE *)(*(_QWORD *)(a1 + 40) + 448) = objc_msgSend(result, "primaryAppleIDIsHSA2");
    if (dword_10020FA58 <= 30
      && (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 30)))
    {
      if (*(_BYTE *)(*(_QWORD *)(a1 + 40) + 448))
        v3 = "yes";
      else
        v3 = "no";
      LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _powerMonitorEnsureStarted]_block_invoke", 30, "Smart Routing iCloud is HSA2 %s", v3);
    }
    objc_msgSend(*(id *)(a1 + 40), "_prefsChanged");
    if (*(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + 1025) != objc_msgSend(*(id *)(a1 + 32), "screenLocked"))*(_BYTE *)(*(_QWORD *)(a1 + 40) + 1025) = objc_msgSend(*(id *)(a1 + 32), "screenLocked");
    v4 = objc_msgSend(*(id *)(a1 + 32), "screenOn");
    v5 = *(unsigned __int8 **)(a1 + 40);
    if (v5[1024] == v4)
    {
      return objc_msgSend(v5, "_update");
    }
    else
    {
      *(_BYTE *)(*(_QWORD *)(a1 + 40) + 1024) = objc_msgSend(*(id *)(a1 + 32), "screenOn");
      v6 = *(_QWORD *)(a1 + 40);
      if (*(_BYTE *)(v6 + 1024))
      {
        if ((int)objc_msgSend(*(id *)(v6 + 160), "callCountIncomingUnconnected") >= 1)
        {
          if (dword_10020FA58 <= 30
            && (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 30)))
          {
            LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _powerMonitorEnsureStarted]_block_invoke", 30, "Showing banner for ringtone");
          }
          objc_msgSend(*(id *)(a1 + 40), "_iPhoneScreenOnPowerEvent");
        }
      }
      else
      {
        v7 = *(void **)(v6 + 1336);
        if (v7)
        {
          objc_msgSend(v7, "invalidate");
          v8 = *(_QWORD *)(a1 + 40);
          v9 = *(void **)(v8 + 1336);
          *(_QWORD *)(v8 + 1336) = 0;

        }
        if (dword_10020FA58 <= 30
          && (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 30)))
        {
          v10 = *(char *)(*(_QWORD *)(a1 + 40) + 32);
          if (v10 > 0xE)
            v11 = "?";
          else
            v11 = off_1001E3B30[v10];
          LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _powerMonitorEnsureStarted]_block_invoke", 30, "Screen OFF, activity %s", v11);
        }
        v12 = *(void **)(*(_QWORD *)(a1 + 40) + 384);
        if (v12)
        {
          v13 = v12;
          dispatch_source_cancel(v13);
          v14 = *(_QWORD *)(a1 + 40);
          v15 = *(void **)(v14 + 384);
          *(_QWORD *)(v14 + 384) = 0;

        }
        v16 = *(_BYTE **)(a1 + 40);
        if (v16[32] == 10)
          objc_msgSend(v16, "_nearbyInfoActivityChanged");
      }
      v17 = *(_BYTE **)(a1 + 40);
      if (v17[1024])
        return objc_msgSend(v17, "_startAudioStateSnapshotTimer");
      else
        return objc_msgSend(v17, "_stopAudioStateSnapshotTimer:", 1);
    }
  }
  return result;
}

void sub_100036BE0(uint64_t a1, int a2, void *a3)
{
  void (**v5)(_QWORD);
  uint64_t v6;
  BOOL v7;
  char v8;
  const char *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void (**v14)(_QWORD);

  v5 = a3;
  v6 = *(_QWORD *)(a1 + 40);
  v14 = v5;
  if (*(_QWORD *)(a1 + 32) != *(_QWORD *)(v6 + 1080))
    goto LABEL_34;
  if (a2)
    v7 = a2 < 11;
  else
    v7 = 0;
  v8 = v7;
  *(_BYTE *)(v6 + 1072) = v8;
  *(_DWORD *)(*(_QWORD *)(a1 + 40) + 1088) = a2;
  if (dword_10020FA58 <= 30 && (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 30)))
  {
    if (a2 > 29)
    {
      switch(a2)
      {
        case 30:
          v9 = "FullWake";
          goto LABEL_26;
        case 40:
          v9 = "Restart";
          goto LABEL_26;
        case 50:
          v9 = "PowerOff";
          goto LABEL_26;
      }
    }
    else
    {
      switch(a2)
      {
        case 0:
          v9 = "Unknown";
          goto LABEL_26;
        case 10:
          v9 = "Sleep";
          goto LABEL_26;
        case 20:
          v9 = "DarkWake";
LABEL_26:
          if (*(_BYTE *)(*(_QWORD *)(a1 + 40) + 1072))
            v10 = "yes";
          else
            v10 = "no";
          LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _powerMonitorEnsureStarted]_block_invoke_2", 30, "Sleep/wake state changed: %s, sleeping %s", v9, v10);
          goto LABEL_30;
      }
    }
    v9 = "?";
    goto LABEL_26;
  }
LABEL_30:
  v11 = *(_QWORD *)(a1 + 40);
  if (*(_BYTE *)(v11 + 1072) && *(_QWORD *)(v11 + 280))
  {
    objc_msgSend(*(id *)(v11 + 280), "removeAllObjects");
    v12 = *(_QWORD *)(a1 + 40);
    v13 = *(void **)(v12 + 280);
    *(_QWORD *)(v12 + 280) = 0;

    v11 = *(_QWORD *)(a1 + 40);
  }
  objc_msgSend((id)v11, "_update");
  v5 = v14;
LABEL_34:
  if (v5)
  {
    v5[2](v14);
    v5 = v14;
  }

}

id sub_100037000(uint64_t a1)
{
  void *v2;
  NSObject *v3;
  uint64_t v4;
  void *v5;

  if (dword_10020FA58 <= 30 && (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 30)))
    LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _powerMonitorScreenLockChanged]_block_invoke", 30, "Screen locked linger timer fired");
  v2 = *(void **)(*(_QWORD *)(a1 + 32) + 1032);
  if (v2)
  {
    v3 = v2;
    dispatch_source_cancel(v3);
    v4 = *(_QWORD *)(a1 + 32);
    v5 = *(void **)(v4 + 1032);
    *(_QWORD *)(v4 + 1032) = 0;

  }
  return objc_msgSend(*(id *)(a1 + 32), "_update");
}

void sub_100037238(uint64_t a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  id v9;
  id v10;
  const char *v11;
  id v12;

  v12 = a2;
  v9 = a3;
  v10 = a5;
  if (dword_10020FA58 <= 30 && (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 30)))
  {
    v11 = "?";
    if ((_DWORD)a4 == 1)
      v11 = "AudioArbitration";
    if (!(_DWORD)a4)
      v11 = "Invalid";
    LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _relayConduitMessageEnsureStarted]_block_invoke", 30, "Relay message received: conduit %@, source %@, type %s, data %@\n", v12, v9, v11, v10);
  }
  objc_msgSend(*(id *)(a1 + 32), "_relayConduitMessageReceived:andSourceDevice:messageType:messageData:", v12, v9, a4, v10);

}

id sub_100037330(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "_triggerTipiTableUpdate:", a2);
}

void sub_10003733C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *i;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  unsigned __int8 v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  void *v19;
  unsigned int v20;
  const char *v21;
  void *v22;
  unsigned int v23;
  const char *v24;
  const char *v25;
  const char *v26;
  const char *v27;
  id v28;
  uint64_t v29;
  void *v30;
  void *v31;
  unsigned int v32;
  void *v33;
  SmartRoutingStatsWx *v34;
  void *v35;
  unsigned int v36;
  void *v37;
  unsigned __int8 v38;
  uint64_t v39;
  void *v40;
  unsigned int v41;
  void *v42;
  void *v43;
  void *v44;
  unsigned __int8 v45;
  void *v46;
  uint64_t v47;
  void *v48;
  void *v49;
  uint64_t v50;
  void *v51;
  _QWORD *v52;
  void *v53;
  NSObject *v54;
  uint64_t v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  const char *v60;
  uint64_t v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  id obj;
  uint64_t v67;
  id v68;
  unsigned __int8 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  _BYTE v74[128];

  v3 = a2;
  v4 = v3;
  if (*(_BYTE *)(*(_QWORD *)(a1 + 32) + 858))
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "btAddressData"));
    v6 = CUPrintNSDataAddress();
    v7 = (void *)objc_claimAutoreleasedReturnValue(v6);

    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1160), "objectForKeyedSubscript:", v7));
    if (!v8)
    {
LABEL_74:

      goto LABEL_75;
    }
    v61 = a1;
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_myBluetoothAddressString"));
    v70 = 0u;
    v71 = 0u;
    v72 = 0u;
    v73 = 0u;
    v62 = v4;
    obj = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "tipiDevices"));
    v64 = v9;
    v68 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v70, v74, 16);
    if (v68)
    {
      v65 = 0;
      v69 = 0;
      v67 = *(_QWORD *)v71;
      v63 = v8;
      do
      {
        for (i = 0; i != v68; i = (char *)i + 1)
        {
          if (*(_QWORD *)v71 != v67)
            objc_enumerationMutation(obj);
          v11 = *(void **)(*((_QWORD *)&v70 + 1) + 8 * (_QWORD)i);
          v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "btAddressData"));
          v13 = CUPrintNSDataAddress();
          v14 = (void *)objc_claimAutoreleasedReturnValue(v13);

          v15 = objc_msgSend(v11, "tipiState");
          v16 = objc_msgSend(v11, "tipiState");
          v17 = objc_msgSend(v11, "tipiState");
          v18 = objc_msgSend(v9, "isEqual:", v14);
          if (dword_10020FA58 <= 30
            && (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 30)))
          {
            v19 = v7;
            v20 = objc_msgSend(v11, "tipiConnectionStatus");
            v21 = "?";
            if (v20 <= 3)
              v21 = off_1001E3900[(char)v20];
            v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "model"));
            v23 = objc_msgSend(v11, "tipiState");
            v24 = "no";
            if (v18)
              v25 = "yes";
            else
              v25 = "no";
            if ((v17 & 4) != 0)
              v26 = "yes";
            else
              v26 = "no";
            if ((v16 & 2) != 0)
              v27 = "yes";
            else
              v27 = "no";
            if ((v15 & 1) != 0)
              v24 = "yes";
            v60 = v21;
            v7 = v19;
            LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _relayConduitMessageEnsureStarted]_block_invoke_3", 30, "TipiTableEvent: Wx %@ TipiDevice %@ Conn %s model %@ Flag %u IsMe %s LastPlay %s Ownership %s TipiState %s", v19, v14, v60, v22, v23, v25, v26, v27, v24);

            v8 = v63;
            v9 = v64;
          }
          if (objc_msgSend(v11, "tipiConnectionStatus") == 2)
          {
            if (v18)
            {
              objc_msgSend(v8, "setLastPlay:", (v17 >> 2) & 1);
              objc_msgSend(v8, "_setOwnership:", (v16 >> 1) & 1);
            }
            else
            {
              v28 = v14;

              v29 = objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "otherTipiDeviceBTAddress"));
              if (!v29
                || (v30 = (void *)v29,
                    v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "otherTipiDeviceBTAddress")),
                    v32 = objc_msgSend(v31, "isEqualToString:", v28),
                    v31,
                    v9 = v64,
                    v30,
                    v32))
              {
                objc_msgSend(v8, "setOtherTipiDeviceLastPlay:", (v17 >> 2) & 1);
              }
              v65 = v28;
            }
          }
          if (objc_msgSend(v11, "tipiConnectionStatus") == 2
            || objc_msgSend(v11, "tipiConnectionStatus") == 1)
          {
            ++v69;
          }

        }
        v68 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v70, v74, 16);
      }
      while (v68);
    }
    else
    {
      v65 = 0;
      v69 = 0;
    }

    if (objc_msgSend(*(id *)(v61 + 32), "_isReceivedLegacyTipiConnect:", v7))
    {
      v4 = v62;
      if (dword_10020FA58 <= 30
        && (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 30)))
      {
        LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _relayConduitMessageEnsureStarted]_block_invoke_3", 30, "TipiTableEvent: Skip, receiving legacy Tipi connect LE pipe via Wx %@", v7);
      }
      goto LABEL_73;
    }
    v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(v61 + 32) + 1168), "objectForKeyedSubscript:", v7));

    if (!v33)
    {
      v34 = objc_alloc_init(SmartRoutingStatsWx);
      objc_msgSend(*(id *)(*(_QWORD *)(v61 + 32) + 1168), "setObject:forKeyedSubscript:", v34, v7);

    }
    v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(v61 + 32) + 1168), "objectForKeyedSubscript:", v7));
    v36 = objc_msgSend(v35, "thV2WxCount");
    if (v69 >= 2u && v36 != v69)
    {
      v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "otherTipiDeviceBTAddress"));
      v38 = objc_msgSend(v37, "isEqualToString:", v65);

      if ((v38 & 1) != 0)
        goto LABEL_52;
      v39 = mach_absolute_time();
      v40 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(v61 + 32) + 1168), "objectForKeyedSubscript:", v7));
      objc_msgSend(v40, "setThV2Ticks:", v39);

      if (dword_10020FA58 > 30
        || dword_10020FA58 == -1 && !_LogCategory_Initialize(&dword_10020FA58, 30))
      {
        goto LABEL_52;
      }
      v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(v61 + 32) + 1168), "objectForKeyedSubscript:", v7));
      v41 = objc_msgSend(v35, "thV2WxCount");
      v42 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(v61 + 32) + 1168), "objectForKeyedSubscript:", v7));
      LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _relayConduitMessageEnsureStarted]_block_invoke_3", 30, "TipiTableEvent: Update TiPiV2 Ticks, wx device %@, connectDeviceCount %u, thV2WxCount %u, ticks %u", v7, v69, v41, objc_msgSend(v42, "thV2Ticks"));

    }
LABEL_52:
    v43 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(v61 + 32) + 1168), "objectForKeyedSubscript:", v7));
    objc_msgSend(v43, "setThV2WxCount:", v69);

    if (v65)
    {
      objc_msgSend(v8, "isRoutingActionInitialized");
      v44 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "otherTipiDeviceBTAddress"));
      v45 = objc_msgSend(v44, "isEqualToString:", v65);

      v4 = v62;
      v9 = v64;
      if ((v45 & 1) == 0)
      {
        if (dword_10020FA58 <= 30
          && (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 30)))
        {
          v46 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "otherTipiDeviceBTAddress"));
          LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _relayConduitMessageEnsureStarted]_block_invoke_3", 30, "TipiTableEvent: Updating other Tipi device to %@, currently other Tipi device %@", v65, v46);

        }
        objc_msgSend(*(id *)(v61 + 32), "_tipiHealing:withDevice:", v7, v65);
      }
    }
    else
    {
      v4 = v62;
      v9 = v64;
      if (!*(_BYTE *)(*(_QWORD *)(v61 + 32) + 1233))
      {
        v47 = objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "otherTipiDeviceBTAddress"));
        if (v47)
        {
          v48 = (void *)v47;
          v49 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "otherTipiDeviceVersion"));

          if (v49)
          {
            if (dword_10020FA58 <= 30
              && (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 30)))
            {
              LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _relayConduitMessageEnsureStarted]_block_invoke_3", 30, "TipiTableEvent: Only one source device is connected, delete TiPi state");
            }
            objc_msgSend(*(id *)(v61 + 32), "_removeTiPiState:", v7);
            goto LABEL_73;
          }
        }
      }
      if ((objc_msgSend(v8, "isRoutingActionInitialized") & 1) == 0
        && !*(_BYTE *)(*(_QWORD *)(v61 + 32) + 1233))
      {
        if (dword_10020FA58 <= 30
          && (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 30)))
        {
          LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _relayConduitMessageEnsureStarted]_block_invoke_3", 30, "TipiTableEvent: Update routing action for regular phase 1");
        }
        if (*(_BYTE *)(*(_QWORD *)(v61 + 32) + 673))
          v50 = 1;
        else
          v50 = 2;
        objc_msgSend(v8, "_setRoutingAction:", v50);
        v51 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(v61 + 32) + 1200), "objectForKeyedSubscript:", v7));
        objc_msgSend(v51, "_setUserConnectedState:", 0);

        objc_msgSend(v8, "_setRoutingInitialized:", 1);
        v52 = *(_QWORD **)(v61 + 32);
        v53 = (void *)v52[157];
        if (v53)
        {
          v54 = v53;
          dispatch_source_cancel(v54);
          v55 = *(_QWORD *)(v61 + 32);
          v56 = *(void **)(v55 + 1256);
          *(_QWORD *)(v55 + 1256) = 0;

          v57 = *(void **)(v61 + 32);
          v58 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "audioRoutingRequest"));
          v59 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "audioRoutingResponse"));
          objc_msgSend(v57, "_smartRoutingAudioRoutingRequest:withResponseHandler:", v58, v59);

          v9 = v64;
          v52 = *(_QWORD **)(v61 + 32);
        }
        objc_msgSend(v52, "_postNotification:", "com.apple.BluetoothServices.AudioRoutingChanged");
      }
    }
    objc_msgSend(*(id *)(v61 + 32), "_updateOtherTipiBuildVersion:", v7);
LABEL_73:

    goto LABEL_74;
  }
LABEL_75:

}

void sub_100037B88(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  unint64_t v5;
  const char *v6;
  int v7;
  unsigned int v8;
  const char *v9;
  unsigned int v10;
  const char *v11;
  id v12;

  v3 = a2;
  v4 = v3;
  if (v3)
  {
    v12 = v3;
    if (dword_10020FA58 <= 90
      && (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 90)))
    {
      LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _relayConduitMessageEnsureStarted]_block_invoke_4", 90, "### Activate failed: %{error}\n", v12);
    }
    objc_msgSend(*(id *)(a1 + 32), "invalidate");
    goto LABEL_11;
  }
  if (dword_10020FA58 <= 30)
  {
    v12 = 0;
    if (dword_10020FA58 != -1 || (v7 = _LogCategory_Initialize(&dword_10020FA58, 30), v4 = 0, v7))
    {
      v5 = (unint64_t)objc_msgSend(*(id *)(a1 + 32), "bluetoothState");
      if (v5 > 0xA)
        v6 = "?";
      else
        v6 = off_1001E3978[v5];
      v8 = objc_msgSend(*(id *)(a1 + 32), "discoverableState");
      if (v8 > 2)
        v9 = "?";
      else
        v9 = off_1001E3920[v8];
      v10 = objc_msgSend(*(id *)(a1 + 32), "inquiryState");
      if (v10 > 2)
        v11 = "?";
      else
        v11 = off_1001E3920[v10];
      LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _relayConduitMessageEnsureStarted]_block_invoke_4", 30, "Activated: Bluetooth state %s, Discoverable %s, Inquiry %s\n", v6, v9, v11);
LABEL_11:
      v4 = v12;
    }
  }

}

void sub_100037FEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  _Block_object_dispose(&a20, 8);
  _Block_object_dispose(&a26, 8);
  _Unwind_Resume(a1);
}

void sub_100038010(_QWORD *a1, void *a2, void *a3, _BYTE *a4)
{
  id v7;
  id v8;
  uint64_t v9;
  void *v10;
  id v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  id v18;

  v18 = a2;
  v7 = a3;
  if (objc_msgSend(v18, "isEqualToString:", a1[4]))
  {
    if (!*(_QWORD *)(*(_QWORD *)(a1[7] + 8) + 40))
    {
      v8 = objc_alloc_init((Class)CBDevice);
      v9 = *(_QWORD *)(a1[7] + 8);
      v10 = *(void **)(v9 + 40);
      *(_QWORD *)(v9 + 40) = v8;

    }
    if (!*(_QWORD *)(*(_QWORD *)(a1[8] + 8) + 40))
    {
      v11 = objc_alloc_init((Class)CBDevice);
      v12 = *(_QWORD *)(a1[8] + 8);
      v13 = *(void **)(v12 + 40);
      *(_QWORD *)(v12 + 40) = v11;

    }
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "conduitDeviceID"));
    objc_msgSend(*(id *)(*(_QWORD *)(a1[7] + 8) + 40), "setIdentifier:", v14);

    if (a1[5])
    {
      objc_msgSend(*(id *)(*(_QWORD *)(a1[8] + 8) + 40), "setIdentifier:");
    }
    else
    {
      v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "otherTipiDeviceBTAddress"));
      objc_msgSend(*(id *)(*(_QWORD *)(a1[8] + 8) + 40), "setIdentifier:", v15);

    }
    if (dword_10020FA58 <= 90
      && (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 90)))
    {
      v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "conduitDeviceID"));
      v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1[8] + 8) + 40), "identifier"));
      LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _relayConduitMessageSend:withOptions:andWxAddress:andOtherAddress:]_block_invoke", 90, "Relaying via %@ inWxAddress %@ to %@ with options %@", v16, v18, v17, a1[6]);

    }
    *a4 = 1;
  }

}

void sub_1000381D8(id a1, NSError *a2)
{
  NSError *v2;
  NSError *v3;
  int v4;
  NSError *v5;

  v2 = a2;
  v3 = v2;
  if (dword_10020FA58 <= 90
    && ((v5 = v2, dword_10020FA58 != -1) || (v4 = _LogCategory_Initialize(&dword_10020FA58, 90), v3 = v5, v4)))
  {
    LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _relayConduitMessageSend:withOptions:andWxAddress:andOtherAddress:]_block_invoke_2", 90, "Message sent: %{error}", v3);

  }
  else
  {

  }
}

void sub_10003921C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  _Block_object_dispose(&a34, 8);
  _Unwind_Resume(a1);
}

void sub_100039240(uint64_t a1, void *a2, void *a3, _BYTE *a4)
{
  id v7;
  unsigned int v8;
  NSObject *v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  void *v15;
  signed int v16;
  uint64_t v17;
  const __CFString *v18;
  void *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  unint64_t v23;
  unsigned int v24;
  const char *v25;
  uint64_t v26;
  NSObject *v27;
  void *v28;
  const char *v29;
  unsigned int v30;
  const char *v31;
  void *v32;
  uint64_t v33;
  void *v34;
  void *v35;
  const __CFString *v36;
  const char *v37;
  NSObject *v38;
  id v39;

  v39 = a2;
  v7 = a3;
  if (objc_msgSend(v39, "containsString:", *(_QWORD *)(a1 + 32)))
  {
    v8 = objc_msgSend(v7, "audioRoutingClientID");
    if (v8 == objc_msgSend(*(id *)(a1 + 40), "unsignedIntValue"))
    {
      v9 = objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "conduitMessageTimer"));
      v10 = v9;
      if (v9)
        dispatch_source_cancel(v9);
      objc_msgSend(v7, "setConduitMessageTimer:", 0);
      v11 = mach_absolute_time();
      v12 = UpTicksToMilliseconds(v11 - (_QWORD)objc_msgSend(v7, "conduitMessageTicks"));
      if (dword_10020FA58 <= 30)
      {
        v13 = v12;
        if (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 30))
          LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _relayConduitMessageReceived:andSourceDevice:messageType:messageData:]_block_invoke", 30, "Hijack response received, round trip time took %llums", v13);
      }
      objc_msgSend(v7, "setConduitMessageTicks:", 0);
      v14 = objc_alloc_init((Class)BTAudioRoutingResponse);
      v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "objectForKey:", CFSTR("audioRoutingHijackAnswer")));
      v16 = objc_msgSend(v15, "intValue");
      v17 = v16;
      switch(v16)
      {
        case 1:
          *(_QWORD *)(*(_QWORD *)(a1 + 56) + 400) = mach_absolute_time();
          if (dword_10020FA58 <= 30
            && (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 30)))
          {
            LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _relayConduitMessageReceived:andSourceDevice:messageType:messageData:]_block_invoke", 30, "SmartRoutingAudioHijackAnswerAccepted");
          }
          objc_msgSend(v14, "setAction:", 1);
          objc_msgSend(v14, "setDeviceAddress:", *(_QWORD *)(a1 + 32));
          objc_msgSend(v14, "setReason:", CFSTR("Tipi device hijack was successful"));
          *(_QWORD *)(*(_QWORD *)(a1 + 56) + 128) = mach_absolute_time();
          break;
        case 2:
          if (dword_10020FA58 <= 30
            && (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 30)))
          {
            LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _relayConduitMessageReceived:andSourceDevice:messageType:messageData:]_block_invoke", 30, "SmartRoutingAudioHijackAnswerAmbiguity");
          }
          objc_msgSend(v14, "setAction:", 3);
          objc_msgSend(v14, "setDeviceAddress:", 0);
          v18 = CFSTR("Tipi device hijack was ambigious");
          goto LABEL_30;
        case 3:
          if (dword_10020FA58 <= 30
            && (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 30)))
          {
            LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _relayConduitMessageReceived:andSourceDevice:messageType:messageData:]_block_invoke", 30, "SmartRoutingAudioHijackAnswerRejected");
          }
          objc_msgSend(v14, "setAction:", 3);
          objc_msgSend(v14, "setDeviceAddress:", 0);
          v18 = CFSTR("Tipi device hijack was rejected");
          goto LABEL_30;
        case 4:
          if (dword_10020FA58 <= 30
            && (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 30)))
          {
            LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _relayConduitMessageReceived:andSourceDevice:messageType:messageData:]_block_invoke", 30, "SmartRoutingAudioHijackAnswerBackoff");
          }
          objc_msgSend(v14, "setAction:", 4);
          objc_msgSend(v14, "setDeviceAddress:", *(_QWORD *)(a1 + 32));
          v18 = CFSTR("Tipi device hijack was backed off");
LABEL_30:
          objc_msgSend(v14, "setReason:", v18);
          break;
        default:
          break;
      }
      v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "audioRoutingResponse"));

      if (v19)
      {
        v20 = *(void **)(a1 + 56);
        v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "audioRoutingResponse"));
        objc_msgSend(v20, "_respondRoutingRequest:withResponseHandler:wxAddress:", v14, v21, v39);

      }
      if ((_DWORD)v17 == 1)
      {
        v22 = mach_absolute_time();
        v23 = UpTicksToSeconds(v22 - *(_QWORD *)(*(_QWORD *)(a1 + 56) + 1064));
        if (dword_10020FA58 <= 30
          && (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 30)))
        {
          v24 = objc_msgSend(v7, "routed");
          v25 = "no";
          if (v24)
            v25 = "yes";
          LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _relayConduitMessageReceived:andSourceDevice:messageType:messageData:]_block_invoke", 30, "Show connected banner after hijack routed %s secondSinceLastBanner %d", v25, v23);
        }
        if ((objc_msgSend(v7, "routed") & 1) != 0
          || (v26 = *(_QWORD *)(a1 + 56), *(_QWORD *)(v26 + 1064)) && *(double *)(v26 + 1048) > (double)v23)
        {
          if (dword_10020FA58 <= 30
            && (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 30)))
          {
            v27 = v10;
            v28 = v15;
            if (objc_msgSend(v7, "inEar"))
              v29 = "yes";
            else
              v29 = "no";
            v30 = objc_msgSend(v7, "inEarDisabled");
            v31 = "no";
            if (v30)
              v31 = "yes";
            v37 = v29;
            v15 = v28;
            v10 = v27;
            LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _relayConduitMessageReceived:andSourceDevice:messageType:messageData:]_block_invoke", 30, "Connected banner cool off period is %llus, inEar state is %s inEar state disabled %s", v23, v37, v31);
          }
        }
        else
        {
          v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "deviceName"));
          v33 = objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "deviceAddress"));
          v38 = v10;
          v34 = v15;
          v35 = (void *)v33;
          if (v33)
            v36 = (const __CFString *)v33;
          else
            v36 = CFSTR("?");
          objc_msgSend((id)v26, "_smartRoutingShowBanner:withDevice:andDeviceAddress:andProductID:andCentralContentItemTxt:andTimeout:andDeviceType:", 1, v32, v36, objc_msgSend(v7, "productID"), CFSTR("Connected"), 0, 4.0);

          v15 = v34;
          v10 = v38;

        }
      }
      objc_msgSend(*(id *)(a1 + 56), "_startHijackMetricSubmission:wxAddress:version:", v17, v39, CFSTR("V1"));
      *a4 = 1;

    }
  }

}

void sub_1000397EC(uint64_t a1, void *a2, void *a3)
{
  void *v5;
  void *v6;
  double v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  int v13;
  int v14;
  void *v15;
  void *v16;
  unsigned int v17;
  id v18;

  v18 = a3;
  if (objc_msgSend(a2, "isEqualToString:", *(_QWORD *)(a1 + 32)))
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 1160), "objectForKeyedSubscript:", *(_QWORD *)(a1 + 32)));
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "otherTipiDeviceVersion"));
    objc_msgSend(v6, "doubleValue");
    if (v7 < 1.2)
    {

    }
    else
    {
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 1160), "objectForKeyedSubscript:", *(_QWORD *)(a1 + 32)));
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "otherTipiDeviceVersion"));

      if (v9)
      {
        if (dword_10020FA58 <= 40
          && (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 40)))
        {
          LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _relayConduitMessageReceived:andSourceDevice:messageType:messageData:]_block_invoke", 40, "Tipi 1.2 new healing behavior...");
        }
        v12 = *(_QWORD *)(a1 + 40);
        if (*(_BYTE *)(a1 + 56))
        {
          v13 = *(unsigned __int8 *)(v12 + 433);
          v14 = dword_10020FA58;
          if (v13)
          {
            if (dword_10020FA58 <= 40
              && (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 40)))
            {
              LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _relayConduitMessageReceived:andSourceDevice:messageType:messageData:]_block_invoke", 40, "Tipi 1.2 new healing behavior iOS is streaming, Tipi / Route!");
            }
LABEL_33:
            v11 = v18;
            v10 = 1;
LABEL_34:
            objc_msgSend(v11, "_setRoutingAction:", v10);
LABEL_35:
            *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = 1;
            goto LABEL_36;
          }
        }
        else
        {
          v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v12 + 1160), "objectForKeyedSubscript:", *(_QWORD *)(a1 + 32)));
          v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "otherTipiDeviceBTName"));
          v17 = objc_msgSend(v16, "isEqualToString:", CFSTR("Mac"));

          v14 = dword_10020FA58;
          if (v17)
          {
            if (dword_10020FA58 <= 40
              && (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 40)))
            {
              LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _relayConduitMessageReceived:andSourceDevice:messageType:messageData:]_block_invoke", 40, "Tipi 1.2 new healing behavior iOS is NOT streaming, other side is Mac, Tipi / Do Not Route");
            }
            objc_msgSend(v18, "_setRoutingAction:", 3);
            objc_msgSend(*(id *)(a1 + 40), "_setOwnership:withHijackRequest:withOwnership:", *(_QWORD *)(a1 + 32), 0, 0);
            goto LABEL_35;
          }
        }
        if (v14 <= 40 && (v14 != -1 || _LogCategory_Initialize(&dword_10020FA58, 40)))
          LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _relayConduitMessageReceived:andSourceDevice:messageType:messageData:]_block_invoke", 40, "Tipi 1.2 new healing behavior iOS other side is NOT Mac, route stays with me!");
        goto LABEL_33;
      }
    }
    if (dword_10020FA58 <= 40
      && (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 40)))
    {
      LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _relayConduitMessageReceived:andSourceDevice:messageType:messageData:]_block_invoke", 40, "Tipi healing legacy behavior");
    }
    if (objc_msgSend(v18, "routed"))
      v10 = 1;
    else
      v10 = 3;
    v11 = v18;
    goto LABEL_34;
  }
LABEL_36:

}

void sub_100039AD4(uint64_t a1, void *a2, void *a3)
{
  unsigned int v5;
  void *v6;
  void *v7;
  int v8;
  uint64_t v9;
  void *v10;
  void *v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  void *v15;
  void *v16;
  double v17;
  _BOOL4 v18;
  const char *v19;
  id v20;

  v20 = a3;
  v5 = objc_msgSend(a2, "isEqualToString:", *(_QWORD *)(a1 + 32));
  v6 = v20;
  if (v5)
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 200), "objectForKeyedSubscript:", *(_QWORD *)(a1 + 32)));
    v8 = objc_msgSend(v7, "audioStreamState");
    v9 = *(_QWORD *)(a1 + 40);
    if (v8 > 1)
    {
      if (*(_BYTE *)(v9 + 56))
      {
        v12 = objc_msgSend(*(id *)(v9 + 160), "activeCallCount");

        v11 = v20;
        if (v12)
          goto LABEL_10;
LABEL_24:
        objc_msgSend(v11, "_setRoutingAction:", 3);
LABEL_25:
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = 1;
        v6 = v20;
        goto LABEL_26;
      }
    }
    else
    {
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v9 + 200), "objectForKeyedSubscript:", *(_QWORD *)(a1 + 32)));
      if (objc_msgSend(v10, "audioStreamState"))
      {

        v11 = v20;
LABEL_10:
        v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "deviceVersion"));
        v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "otherTipiDeviceVersion"));
        objc_msgSend(v16, "doubleValue");
        v18 = v17 < 1.2 || objc_msgSend(CFSTR("3E725"), "compare:options:", v15, 64) == (id)1;

        if (dword_10020FA58 <= 30
          && (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 30)))
        {
          v19 = "no";
          if (v18)
            v19 = "yes";
          LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _relayConduitMessageReceived:andSourceDevice:messageType:messageData:]_block_invoke_2", 30, "Legacy routing behavior = %s", v19);
        }
        objc_msgSend(v20, "_setRoutingAction:", 1);
        if (v18)
          objc_msgSend(*(id *)(a1 + 40), "_relayConduitMessageSend:withOptions:andWxAddress:andOtherAddress:", 1, &off_1001F4160, *(_QWORD *)(a1 + 32), 0);

        goto LABEL_25;
      }
      v13 = *(_QWORD *)(a1 + 40);
      if (*(_BYTE *)(v13 + 56))
      {
        v14 = objc_msgSend(*(id *)(v13 + 160), "activeCallCount");

        v11 = v20;
        if (v14)
          goto LABEL_10;
        goto LABEL_24;
      }

    }
    v11 = v20;
    goto LABEL_24;
  }
LABEL_26:

}

void sub_100039F00(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  BOOL v6;
  BOOL v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  double v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  void *v19;
  id v20;

  v20 = a2;
  v3 = *(id *)(*(_QWORD *)(a1 + 32) + 1416);
  if (v20)
  {
    v4 = NSErrorF(NSOSStatusErrorDomain, 4294960596, "Tipi update failed: result %@", v20);
    v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
    v6 = v5 != 0;
    if (v5)
      v7 = v3 == 0;
    else
      v7 = 1;
    if (v7)
    {
      if (!v3)
        goto LABEL_25;
    }
    else
    {
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "wxAddress"));
      v9 = *(void **)(a1 + 32);
      v10 = NSErrorF(NSOSStatusErrorDomain, 4294960596, "Tipi update failed: result %@", v20);
      v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
      objc_msgSend(v9, "_updateOtherTipiDevice:otherAddress:otherName:otherVersion:withResult:", v8, 0, 0, 0, v11);

      v6 = 1;
    }
  }
  else
  {
    v5 = 0;
    if (!v3)
      goto LABEL_25;
    v6 = 0;
  }
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1144), "_pipeRequestResponse:error:", v3, v5);
  if (dword_10020FA58 <= 30 && (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 30)))
  {
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "version"));
    LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _updateAccessoryID:connectionDeviceAddresses:completion:]_block_invoke", 30, "Pipe Version %@", v12);

  }
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "version"));
  objc_msgSend(v13, "doubleValue");
  if (v14 < 1.2)
  {

  }
  else
  {
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "version"));

    if (v15)
      goto LABEL_25;
  }
  if (dword_10020FA58 <= 30 && (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 30)))
    LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _updateAccessoryID:connectionDeviceAddresses:completion:]_block_invoke", 30, "Legacy behavior, clean up pipe");
  v16 = *(void **)(*(_QWORD *)(a1 + 32) + 1144);
  v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "wxAddress"));
  objc_msgSend(v16, "_pipeConnectionComplete:andWxHeadset:isSender:", v5, v17, 0);

  if (!v6)
  {
    v18 = *(_QWORD *)(a1 + 32);
    v19 = *(void **)(v18 + 1416);
    *(_QWORD *)(v18 + 1416) = 0;

    *(_BYTE *)(*(_QWORD *)(a1 + 32) + 1233) = 0;
    objc_msgSend(*(id *)(a1 + 32), "_startTipiSetupTicks");
  }
LABEL_25:

}

void sub_10003A33C(id a1, NSError *a2)
{
  NSError *v2;
  NSError *v3;
  int v4;
  NSError *v5;

  v2 = a2;
  v3 = v2;
  if (v2
    && dword_10020FA58 <= 90
    && ((v5 = v2, dword_10020FA58 != -1) || (v4 = _LogCategory_Initialize(&dword_10020FA58, 90), v3 = v5, v4)))
  {
    LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _updateNearbyDeviceState:withAddress:withEasyPairing:withState:]_block_invoke", 90, "### Failed: %{error}\n", v3);

  }
  else
  {

  }
}

void sub_10003A790(uint64_t a1, void *a2)
{
  _QWORD *v2;
  id v4;

  v2 = *(_QWORD **)(a1 + 32);
  if (v2[173] == *(_QWORD *)(a1 + 40))
  {
    v4 = a2;
    objc_msgSend(v2, "_wxDeviceFound:", v4);
    objc_msgSend(*(id *)(a1 + 32), "_lowBatteryDeviceFound:", v4);

  }
}

void sub_10003A7F8(uint64_t a1, void *a2)
{
  _QWORD *v2;
  id v4;

  v2 = *(_QWORD **)(a1 + 32);
  if (v2[173] == *(_QWORD *)(a1 + 40))
  {
    v4 = a2;
    objc_msgSend(v2, "_lowBatteryDeviceLost:", v4);
    objc_msgSend(*(id *)(a1 + 32), "_wxDeviceLost:", v4);

  }
}

void sub_10003A860(uint64_t a1, void *a2)
{
  _QWORD *v2;
  id v4;

  v2 = *(_QWORD **)(a1 + 32);
  if (v2[173] == *(_QWORD *)(a1 + 40))
  {
    v4 = a2;
    objc_msgSend(v2, "_wxDeviceFound:", v4);
    objc_msgSend(*(id *)(a1 + 32), "_lowBatteryDeviceFound:", v4);

  }
}

void sub_10003A8C8(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  void *v3;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(void **)(a1 + 40);
  v3 = *(void **)(v1 + 1384);
  if (v3 == v2)
  {
    *(_QWORD *)(v1 + 1384) = 0;

  }
}

void sub_10003A8E4(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  id v6;

  v3 = a2;
  if (v3 && *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1384) == *(_QWORD *)(a1 + 40))
  {
    v6 = v3;
    if (dword_10020FA58 <= 90
      && (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 90)))
    {
      LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _wxDiscoveryEnsureStarted]_block_invoke_5", 90, "### Wx Device discovery start failed: %{error}", v6);
    }
    objc_msgSend(*(id *)(a1 + 40), "invalidate");
    v4 = *(_QWORD *)(a1 + 32);
    v5 = *(void **)(v4 + 1384);
    *(_QWORD *)(v4 + 1384) = 0;

    v3 = v6;
  }

}

id sub_10003BF70(uint64_t a1, uint64_t a2)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_wxDiscoveryWatchRecoveryFoundDevice:", a2);
}

id sub_10003BF7C(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "_wxDiscoveryWatchRecoveryLostDevice:", a2);
}

void sub_10003BF88(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;

  v2 = *(void **)(a1 + 32);
  if (v2 == *(void **)(*(_QWORD *)(a1 + 40) + 1392))
  {
    objc_msgSend(v2, "invalidate");
    v3 = *(_QWORD *)(a1 + 40);
    v4 = *(void **)(v3 + 1392);
    *(_QWORD *)(v3 + 1392) = 0;

  }
}

void sub_10003DCB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
  _Block_object_dispose(&a43, 8);
  _Unwind_Resume(a1);
}

void sub_10003DCD8(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;

  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a3, "model"));
  if ((objc_msgSend(v4, "hasPrefix:", CFSTR("iPhone")) & 1) != 0
    || (objc_msgSend(v4, "hasPrefix:", CFSTR("iPad")) & 1) != 0
    || objc_msgSend(v4, "containsString:", CFSTR("Mac")))
  {
    ++*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }

}

void sub_10003F2A0(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  char isKindOfClass;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  unsigned int v9;
  const char *v10;
  unsigned int v11;
  const char *v12;
  unsigned int v13;
  const char *v14;
  unsigned int v15;
  const char *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  unsigned int v25;
  const char *v26;
  void *v27;
  id v28;
  unsigned int v29;
  unsigned int v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  id v47;
  id v48;
  uint64_t v49;
  void *v50;
  void *v51;
  void *v52;
  id v53;
  id v54;
  uint64_t v55;
  _BYTE *v56;
  uint64_t v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  uint64_t *v63;
  void *v64;
  const __CFString *v65;
  const char *v66;
  const char *v67;
  const char *v68;
  const char *v69;
  _QWORD *v70;
  _QWORD v71[5];
  _QWORD v72[5];
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t (*v76)(uint64_t, uint64_t);
  void (*v77)(uint64_t);
  id v78;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "object"));
  v3 = objc_opt_class(TUCall);
  isKindOfClass = objc_opt_isKindOfClass(v2, v3);

  if ((isKindOfClass & 1) != 0)
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "object"));
  else
    v5 = 0;
  v73 = 0;
  v74 = &v73;
  v75 = 0x3032000000;
  v76 = sub_10001E9DC;
  v77 = sub_10001E9EC;
  v78 = 0;
  v72[0] = _NSConcreteStackBlock;
  v72[1] = 3221225472;
  v72[2] = sub_10003FC44;
  v72[3] = &unk_1001E2300;
  v72[4] = &v73;
  v70 = objc_retainBlock(v72);
  if (!v5)
  {
    v63 = v74;
    v64 = (void *)v74[5];
    v65 = CFSTR("New call is null");
LABEL_77:
    v63[5] = (uint64_t)v65;

    goto LABEL_71;
  }
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "callUUID"));

  if (!v6)
  {
    v63 = v74;
    v64 = (void *)v74[5];
    v65 = CFSTR("New call uuid is null");
    goto LABEL_77;
  }
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 1176), "TUCallMap"));

  if (!v7)
  {
    v8 = objc_alloc_init((Class)NSMutableDictionary);
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 1176), "setTUCallMap:", v8);

  }
  if (dword_10020FA58 <= 30 && (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 30)))
  {
    v9 = objc_msgSend(v5, "isIncoming");
    v10 = "no";
    if (v9)
      v10 = "yes";
    v69 = v10;
    v11 = objc_msgSend(v5, "isOutgoing");
    v12 = "no";
    if (v11)
      v12 = "yes";
    v68 = v12;
    v13 = objc_msgSend(v5, "status");
    if (v13 > 6)
      v14 = "?";
    else
      v14 = off_1001E39D0[v13];
    v67 = v14;
    v15 = objc_msgSend(v5, "isEndpointOnCurrentDevice");
    v16 = "no";
    if (v15)
      v16 = "yes";
    v66 = v16;
    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "callUUID"));
    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "provider"));
    v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "identifier"));
    v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "provider"));
    v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "localizedName"));
    v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "provider"));
    v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "bundleIdentifier"));
    v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "provider"));
    v25 = objc_msgSend(v24, "isSystemProvider");
    v26 = "no";
    if (v25)
      v26 = "yes";
    LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _handleTUCallStateChange:]_block_invoke", 30, "TUNotification: Call state changed incoming %s outgoing %s status %s endpoint %s uuid %@ providerID %@ providerName %@ bundleID %@ isSys %s", v69, v68, v67, v66, v17, v19, v21, v23, v26);

  }
  if ((objc_msgSend(*(id *)(a1 + 40), "_isPhoneCall:", v5) & 1) == 0)
  {
    v63 = v74;
    v64 = (void *)v74[5];
    v65 = CFSTR("Skip conferencing call");
    goto LABEL_77;
  }
  v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 1176), "TUCallMap"));

  if (!v27)
  {
    v28 = objc_alloc_init((Class)NSMutableDictionary);
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 1176), "setTUCallMap:", v28);

  }
  if (objc_msgSend(v5, "isIncoming"))
  {
    v29 = objc_msgSend(v5, "status");
    if (v29 - 5 < 2)
    {
      v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 1176), "TUCallMap"));
      v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "callUUID"));
      v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v34, "objectForKeyedSubscript:", v35));

      if (v36)
      {
        v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 1176), "TUCallMap"));
        v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "callUUID"));
        objc_msgSend(v37, "setObject:forKeyedSubscript:", 0, v38);

        if (dword_10020FA58 <= 30
          && (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 30)))
        {
          v39 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 1176), "TUCallMap"));
          LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _handleTUCallStateChange:]_block_invoke_2", 30, "TUNotification: Incoming call ended. CallCount %d", objc_msgSend(v39, "count"));

        }
        v46 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 1176), "TUCallMap"));
        v47 = objc_msgSend(v46, "count");

        if (!v47)
        {
          v48 = objc_msgSend(*(id *)(a1 + 40), "_clearCallSession");
          if (GestaltGetDeviceClass(v48, v49) == 1)
            objc_msgSend(*(id *)(a1 + 40), "_notifyOtherTipiCallState:", 6);
        }
      }
    }
    else
    {
      if (v29 != 1)
      {
        if (v29 == 4)
        {
          objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 1176), "_setIncomingCallRingtoneState:", 1);
          objc_msgSend(*(id *)(a1 + 40), "_startRingtoneTimer");
          objc_msgSend(*(id *)(a1 + 40), "_sendAudioCategoryToAllTipiDevices");
        }
        goto LABEL_71;
      }
      if (objc_msgSend(v5, "isEndpointOnCurrentDevice"))
      {
        v40 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 1176), "TUCallMap"));
        v41 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "callUUID"));
        v42 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v40, "objectForKeyedSubscript:", v41));

        if (!v42)
        {
          if (dword_10020FA58 <= 30
            && (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 30)))
          {
            LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _handleTUCallStateChange:]_block_invoke", 30, "TUNotification: Incoming call answered");
          }
          objc_msgSend(*(id *)(a1 + 40), "_updateLocalAudioCategory:", &off_1001F4560);
          objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 1176), "setCallStartTicks:", mach_absolute_time());
          objc_msgSend(*(id *)(a1 + 40), "_startInUseBannerTimer");
          v57 = *(_QWORD *)(a1 + 40);
          v58 = *(void **)(v57 + 1160);
          v71[0] = _NSConcreteStackBlock;
          v71[1] = 3221225472;
          v71[2] = sub_10003FCDC;
          v71[3] = &unk_1001E3008;
          v71[4] = v57;
          objc_msgSend(v58, "enumerateKeysAndObjectsUsingBlock:", v71);
          v59 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 1176), "TUCallMap"));
          v60 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "callUUID"));
          objc_msgSend(v59, "setObject:forKeyedSubscript:", v5, v60);

        }
      }
    }
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 1176), "_setIncomingCallRingtoneState:", 0);
    objc_msgSend(*(id *)(a1 + 40), "_sendAudioCategoryToAllTipiDevices");
    objc_msgSend(*(id *)(a1 + 40), "_cancelRingtoneTimer");
    goto LABEL_71;
  }
  if (objc_msgSend(v5, "isOutgoing"))
  {
    v30 = objc_msgSend(v5, "status");
    if (v30 - 5 < 2)
    {
      v43 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 1176), "TUCallMap"));
      v44 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "callUUID"));
      v45 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v43, "objectForKeyedSubscript:", v44));

      if (v45)
      {
        if (dword_10020FA58 <= 30
          && (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 30)))
        {
          LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _handleTUCallStateChange:]_block_invoke_2", 30, "TUNotification: Outgoing call ended");
        }
        v50 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 1176), "TUCallMap"));
        v51 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "callUUID"));
        objc_msgSend(v50, "setObject:forKeyedSubscript:", 0, v51);

        v52 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 1176), "TUCallMap"));
        v53 = objc_msgSend(v52, "count");

        if (!v53)
        {
          v54 = objc_msgSend(*(id *)(a1 + 40), "_clearCallSession");
          if (GestaltGetDeviceClass(v54, v55) == 1)
          {
            v56 = *(_BYTE **)(a1 + 40);
            if (v56[855])
              objc_msgSend(v56, "_notifyOtherTipiCallState:", 6);
          }
        }
      }
    }
    else if (v30 == 1)
    {
      if (dword_10020FA58 <= 30
        && (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 30)))
      {
        LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _handleTUCallStateChange:]_block_invoke_2", 30, "TUNotification: Outgoing call active");
      }
    }
    else if (v30 == 3)
    {
      if (objc_msgSend(v5, "isEndpointOnCurrentDevice"))
      {
        v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 1176), "TUCallMap"));
        v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "callUUID"));
        v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v31, "objectForKeyedSubscript:", v32));

        if (!v33)
        {
          if (dword_10020FA58 <= 30
            && (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 30)))
          {
            LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _handleTUCallStateChange:]_block_invoke_2", 30, "TUNotification: Outgoing call sending");
          }
          v61 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 1176), "TUCallMap"));
          v62 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "callUUID"));
          objc_msgSend(v61, "setObject:forKeyedSubscript:", v5, v62);

          objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 1176), "setCallStartTicks:", mach_absolute_time());
          objc_msgSend(*(id *)(a1 + 40), "_startInUseBannerTimer");
        }
      }
    }
  }
LABEL_71:
  ((void (*)(_QWORD *))v70[2])(v70);

  _Block_object_dispose(&v73, 8);
}

void sub_10003FC14(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 152), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10003FC44(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 40);
  if (v1 && dword_10020FA58 <= 90)
  {
    if (dword_10020FA58 != -1)
      return LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _handleTUCallStateChange:]_block_invoke_2", 90, "TUNotification: %@", v1);
    v2 = result;
    result = _LogCategory_Initialize(&dword_10020FA58, 90);
    if ((_DWORD)result)
    {
      v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 32) + 8) + 40);
      return LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _handleTUCallStateChange:]_block_invoke_2", 90, "TUNotification: %@", v1);
    }
  }
  return result;
}

void sub_10003FCDC(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  unsigned int v8;
  void *v9;
  void *v10;
  id v11;

  v11 = a2;
  v5 = a3;
  if (dword_10020FA58 <= 30 && (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 30)))
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "otherTipiDeviceBTAddress"));
    LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _handleTUCallStateChange:]_block_invoke", 30, "TUNotification: Sending relinquish ownership Wx %@ otherTip %@ %d", v11, v6, objc_msgSend(v5, "otherTipiAudioCategory"));

  }
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "otherTipiDeviceBTAddress"));
  if (v7 && objc_msgSend(v5, "otherTipiAudioCategory"))
  {
    v8 = objc_msgSend(v5, "otherTipiAudioCategory");

    if (v8 <= 0x1F4)
    {
      objc_msgSend(v5, "_setRoutingAction:", 1);
      v9 = *(void **)(a1 + 32);
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "otherTipiDeviceBTAddress"));
      objc_msgSend(v9, "_relayConduitMessageSend:withOptions:andWxAddress:andOtherAddress:", 1, &off_1001F4188, v11, v10);

      objc_msgSend(*(id *)(a1 + 32), "_postNotification:", "com.apple.BluetoothServices.AudioRoutingChanged");
    }
  }
  else
  {

  }
}

void sub_100040068(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  const __CFString *v12;
  void *v13;

  v5 = a2;
  v6 = a3;
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "otherTipiDeviceBTAddress"));

  if (v7)
  {
    v12 = CFSTR("callState");
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 40)));
    v13 = v8;
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v13, &v12, 1));

    v10 = *(void **)(a1 + 32);
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "otherTipiDeviceBTAddress"));
    objc_msgSend(v10, "_relayConduitMessageSend:withOptions:andWxAddress:andOtherAddress:", 1, v9, v5, v11);

  }
}

id sub_10004027C(uint64_t a1)
{
  if (dword_10020FA58 <= 90 && (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 90)))
    LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _startInUseBannerTimer]_block_invoke", 90, "InUseBanner: Timeout. Checking if we should show in-use banner");
  objc_msgSend(*(id *)(a1 + 32), "_evaluatorRunInUseBanner:", 0);
  return objc_msgSend(*(id *)(a1 + 32), "_cancelInUseBannerForCallTimer");
}

id sub_100040400(uint64_t a1)
{
  if (dword_10020FA58 <= 90 && (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 90)))
    LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _startRingtoneTimer]_block_invoke", 90, "Ringtone timeout. Clear ringtone state");
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1176), "_setIncomingCallRingtoneState:", 0);
  return objc_msgSend(*(id *)(a1 + 32), "_cancelRingtoneTimer");
}

void sub_100040A7C(uint64_t a1, void *a2)
{
  void *v3;
  unsigned int v4;
  void *v5;
  id v6;

  v6 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 264), "objectForKeyedSubscript:"));
  v4 = objc_msgSend(v3, "mode");

  if (v4 == 1)
  {
    if (dword_10020FA58 <= 30
      && (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 30)))
    {
      LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _anyPairedDeviceSupportsSmartRouting]_block_invoke", 30, "Check which device to disconnect for disabled SR");
    }
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 264), "objectForKeyedSubscript:", v6));
    objc_msgSend(v5, "setMode:", 2);

    objc_msgSend(*(id *)(a1 + 32), "_handleSmartRoutingDisabled:", v6);
  }

}

void sub_1000414E0(_QWORD *a1)
{
  uint64_t v2;
  void *v3;

  if (*(_QWORD *)(a1[4] + 136))
  {
    if (dword_10020FA58 <= 30
      && (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 30)))
    {
      LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _budSwapDetectionStartTimer:]_block_invoke", 30, "Reconnection after budswap did not occur after %us, nuke budswap information.", a1[6]);
    }
    objc_msgSend(*(id *)(a1[4] + 1192), "removeObjectForKey:", a1[5]);
    v2 = a1[4];
    v3 = *(void **)(v2 + 136);
    *(_QWORD *)(v2 + 136) = 0;

  }
}

void sub_100041960(id a1, NSError *a2)
{
  NSError *v2;
  NSError *v3;
  int v4;
  NSError *v5;

  v2 = a2;
  v3 = v2;
  if (v2
    && dword_10020FA58 <= 90
    && ((v5 = v2, dword_10020FA58 != -1) || (v4 = _LogCategory_Initialize(&dword_10020FA58, 90), v3 = v5, v4)))
  {
    LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _disconnectOtherTipiDevice:]_block_invoke", 90, "### Failed to update Tipi table to disconnect other Tipi device");

  }
  else
  {

  }
}

void sub_100041A8C(id a1, NSString *a2, NearbyWxDevice *a3, BOOL *a4)
{
  NearbyWxDevice *v5;
  void *v6;
  const char *v7;
  void *v8;
  void *v9;
  const char *v10;
  const char *v11;
  const char *v12;
  const char *v13;
  const char *v14;
  id v15;
  const char *v16;
  NSString *v17;

  v17 = a2;
  v5 = a3;
  if (-[NearbyWxDevice paired](v5, "paired")
    && dword_10020FA58 <= 50
    && (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 50)))
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(-[NearbyWxDevice address](v5, "address"));
    if (-[NearbyWxDevice isUTPConnected](v5, "isUTPConnected"))
      v7 = "yes";
    else
      v7 = "no";
    v16 = v7;
    v15 = (id)-[NearbyWxDevice sourceCount](v5, "sourceCount");
    v8 = (void *)objc_claimAutoreleasedReturnValue(-[NearbyWxDevice lastConnectHost](v5, "lastConnectHost"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(-[NearbyWxDevice zeroSourceLastRouteHost](v5, "zeroSourceLastRouteHost"));
    if (-[NearbyWxDevice lidClosed](v5, "lidClosed"))
      v10 = "yes";
    else
      v10 = "no";
    if (-[NearbyWxDevice primaryInEar](v5, "primaryInEar"))
      v11 = "yes";
    else
      v11 = "no";
    if (-[NearbyWxDevice secondaryInEar](v5, "secondaryInEar"))
      v12 = "yes";
    else
      v12 = "no";
    if (-[NearbyWxDevice primaryInCase](v5, "primaryInCase"))
      v13 = "yes";
    else
      v13 = "no";
    if (-[NearbyWxDevice secondaryInCase](v5, "secondaryInCase"))
      v14 = "yes";
    else
      v14 = "no";
    LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _dumpNearbyWxDevice]_block_invoke", 50, "Dumping nearby Wx device %@ addr %@ UTP %s sourceCount %u lastConnect %@ zeroSourceLastConnect %@ lidClosed %s primaryInEar %s secondaryInEar %s primaryInCase %s secondaryInCase %s", v17, v6, v16, v15, v8, v9, v10, v11, v12, v13, v14);

  }
}

void sub_100041C30(id a1, NSString *a2, BTSmartRoutingWxDevice *a3, BOOL *a4)
{
  BTSmartRoutingWxDevice *v5;
  unsigned int v6;
  const char *v7;
  unsigned int v8;
  const char *v9;
  NSString *v10;

  v10 = a2;
  v5 = a3;
  if (dword_10020FA58 <= 30 && (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 30)))
  {
    v6 = -[BTSmartRoutingWxDevice routingAction](v5, "routingAction");
    if (v6 > 5)
      v7 = "?";
    else
      v7 = off_1001E3E40[v6];
    v8 = -[BTSmartRoutingWxDevice routed](v5, "routed");
    v9 = "no";
    if (v8)
      v9 = "yes";
    LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _dumpSrWxDevice]_block_invoke", 30, "Wx %@ routingAction %s routed %s", v10, v7, v9);
  }

}

void sub_100041DC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100041DDC(uint64_t a1, void *a2, void *a3, _BYTE *a4)
{
  id v8;
  void *v9;
  void *v10;
  unsigned int v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  id v15;

  v15 = a2;
  v8 = a3;
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 200), "objectForKeyedSubscript:", v15));

  if (v9)
  {
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 256), "objectForKeyedSubscript:", v15));
    v11 = objc_msgSend(v10, "BOOLValue");

    if (dword_10020FA58 <= 30
      && (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 30)))
    {
      v12 = objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "deviceAddress"));
      v13 = (void *)v12;
      v14 = "no";
      if (v11)
        v14 = "yes";
      LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _findActiveWxDevice]_block_invoke", 30, "Smart Routing device %@ inEarStatus %s", v12, v14);

    }
    if (v11)
    {
      objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a2);
      *a4 = 1;
    }
  }

}

void sub_100042640(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100042658(uint64_t a1, void *a2, void *a3, _BYTE *a4)
{
  id v8;
  id v9;

  v9 = a2;
  v8 = a3;
  if (objc_msgSend(v8, "isNearby")
    && objc_msgSend(v8, "nearbyInEar") == 1
    && !objc_msgSend(v8, "connectionState"))
  {
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a2);
    *a4 = 1;
  }

}

void sub_100042AD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100042AEC(uint64_t a1, uint64_t a2, void *a3, _BYTE *a4)
{
  id v7;

  v7 = a3;
  if (objc_msgSend(v7, "inEar"))
  {
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a3);
    *a4 = 1;
  }

}

void sub_100042D00(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  int v7;
  void *v8;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1160), "objectForKeyedSubscript:", *(_QWORD *)(a1 + 40)));
  v3 = v2;
  v8 = v2;
  if (v2)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "identifier"));
    if (dword_10020FA58 <= 30
      && (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 30)))
    {
      v5 = CUPrintFlags32(objc_msgSend(v8, "tipiAndRoutedState"), &unk_10018470F);
      v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
      LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon getSmartRoutingStateForDeviceAddress:]_block_invoke", 30, "getSmartRoutingStateForDeviceAddress %@", v6);

    }
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "smartRoutingStateUpdated:ForDeviceIdentifier:", objc_msgSend(v8, "tipiAndRoutedState"), v4);

    goto LABEL_7;
  }
  if (dword_10020FA58 <= 30)
  {
    if (dword_10020FA58 != -1 || (v7 = _LogCategory_Initialize(&dword_10020FA58, 30), v3 = 0, v7))
    {
      LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon getSmartRoutingStateForDeviceAddress:]_block_invoke", 30, "getSmartRoutingStateForDeviceAddress error: No SR Wx device");
LABEL_7:
      v3 = v8;
    }
  }

}

void sub_100042F90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100042FA8(uint64_t a1, uint64_t a2, void *a3, _BYTE *a4)
{
  void *v6;
  uint64_t CFDataOfLength;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  int Int64Ranged;
  id v13;

  v13 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a3, "bleDevice"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "advertisementFields"));
  CFDataOfLength = CFDictionaryGetCFDataOfLength(v6, CFSTR("publicAddress"), 6, 0);
  v8 = (void *)objc_claimAutoreleasedReturnValue(CFDataOfLength);
  v9 = v8;
  if (v8)
  {
    v10 = NSPrintF("%.6a", COERCE_DOUBLE(objc_msgSend(objc_retainAutorelease(v8), "bytes")));
    v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
  }
  else
  {
    v11 = 0;
  }
  Int64Ranged = CFDictionaryGetInt64Ranged(v6, CFSTR("pid"), 0, 0xFFFFFFFFLL, 0);
  if (objc_msgSend(*(id *)(a1 + 32), "isEqualToString:", v11))
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = CFDictionaryGetInt64Ranged(v6, CFSTR("cc"), 0, 255, 0);
    if (dword_10020FA58 <= 50
      && (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 50)))
    {
      LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _getWxColorCode:]_block_invoke", 50, "Found color %d from type 7", *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24));
    }
    if (Int64Ranged == 8209)
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
    *a4 = 1;
  }

}

void sub_100043134(uint64_t a1, void *a2, void *a3, _BYTE *a4)
{
  unsigned int v7;
  void *v8;
  id v9;

  v9 = a3;
  v7 = objc_msgSend(a2, "isEqualToString:", *(_QWORD *)(a1 + 32));
  v8 = v9;
  if (v7)
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = objc_msgSend(v9, "colorCodeBest");
    if (dword_10020FA58 <= 50
      && (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 50)))
    {
      LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _getWxColorCode:]_block_invoke_2", 50, "Found color %d from CB device", *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24));
    }
    if (objc_msgSend(v9, "productID") == 8209)
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
    *a4 = 1;
    v8 = v9;
  }

}

id sub_100043650(uint64_t a1)
{
  void *v2;
  void *v3;
  unsigned int v4;
  const char *v5;
  uint64_t v6;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "userInfo"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectForKeyedSubscript:", AVSystemController_CallIsActiveNotificationParameter));
  v4 = objc_msgSend(v3, "BOOLValue");

  if (dword_10020FA58 <= 30 && (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 30)))
  {
    v5 = "no";
    if (v4)
      v5 = "yes";
    LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _handleCallStateChange:]_block_invoke", 30, "Received Call State changed %s", v5);
  }
  v6 = *(_QWORD *)(a1 + 40);
  if (v4)
  {
    *(_BYTE *)(v6 + 152) = 1;
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 1216), "setCallConnected:", 1);
    return objc_msgSend(*(id *)(a1 + 40), "_evaluatorRun");
  }
  else
  {
    *(_BYTE *)(v6 + 152) = 0;
    return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 1216), "setCallConnected:", 0);
  }
}

void sub_1000437E4(uint64_t a1)
{
  void *v2;
  void *v3;
  unsigned int v4;
  void *v5;
  const char *v6;
  uint64_t v7;
  void *v8;
  NSObject *v9;
  uint64_t v10;
  void *v11;
  id v12;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "userInfo"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectForKeyedSubscript:", AVSystemController_NowPlayingAppIsPlayingNotificationParameter));
  v4 = objc_msgSend(v3, "BOOLValue");

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "userInfo"));
  v12 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKeyedSubscript:", AVSystemController_NowPlayingAppNotificationParameter));

  if (dword_10020FA58 <= 30 && (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 30)))
  {
    v6 = "no";
    if (v4)
      v6 = "yes";
    LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _handleMediaPlayStateChange:]_block_invoke", 30, "Received playback changed app %@ isPlaying %s", v12, v6);
  }
  v7 = *(_QWORD *)(a1 + 40);
  if (v4)
  {
    *(_BYTE *)(v7 + 696) = 1;
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 1216), "setMediaPlaying:", 1);
    objc_msgSend(*(id *)(a1 + 40), "_startPlaybackTimer");
    objc_msgSend(*(id *)(a1 + 40), "_evaluatorRun");
  }
  else
  {
    *(_BYTE *)(v7 + 696) = 0;
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 1216), "setMediaPlaying:", 0);
    v8 = *(void **)(*(_QWORD *)(a1 + 40) + 704);
    if (v8)
    {
      v9 = v8;
      dispatch_source_cancel(v9);
      v10 = *(_QWORD *)(a1 + 40);
      v11 = *(void **)(v10 + 704);
      *(_QWORD *)(v10 + 704) = 0;

    }
  }

}

void sub_100043B68(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  unsigned int v5;
  void *v6;
  unsigned __int8 v7;
  void *v8;
  void *v9;
  id v10;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "userInfo"));
  v10 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectForKeyedSubscript:", AVSystemController_HighestArbitrationPriorityForTipi_AudioScore));

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "userInfo"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", AVSystemController_HighestArbitrationPriorityForTipi_BundleID));

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 1216), "setHijackPlayingApp:", v4);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 1216), "setHijackPlayingCategory:", v10);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 1176), "setActivePlayingApp:", v4);
  if (dword_10020FA58 <= 30 && (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 30)))
    LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _handleHighestAudioCategoryChange:]_block_invoke", 30, "[Hijackv2] Received audio category changed: app=%@ isPlaying=%@", v4, v10);
  v5 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 488), "intValue");
  if (v5 != objc_msgSend(v10, "intValue")
    || (v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 1176), "activePlayingApp")),
        v7 = objc_msgSend(v6, "isEqualToString:", v4),
        v6,
        (v7 & 1) == 0))
  {
    v8 = *(void **)(a1 + 40);
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", objc_msgSend(v10, "integerValue")));
    objc_msgSend(v8, "_updateLocalAudioCategory:", v9);

  }
}

void sub_100043FDC(_QWORD *a1)
{
  uint64_t v1;
  _BOOL4 v3;
  const __CFString *v4;
  uint64_t v5;
  unint64_t v6;
  const char *v7;
  uint64_t v8;
  const char *v9;
  int *v10;
  uint64_t v11;
  unsigned __int8 v12;
  id v13;
  void *v14;
  id *v15;
  void *v16;
  id v17;
  uint64_t v18;
  id *v19;
  void *v20;
  void *v21;
  id v22;

  v1 = a1[5];
  if (a1[4] == *(_QWORD *)(v1 + 408))
  {
    if (*(_BYTE *)(v1 + 56))
      v3 = 1;
    else
      v3 = (int)objc_msgSend(*(id *)(v1 + 160), "activeCallCount") > 0;
    if (dword_10020FA58 <= 30
      && (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 30)))
    {
      v4 = CFSTR("Off");
      if (v3)
        v4 = CFSTR("On");
      v5 = a1[5];
      v6 = *(char *)(v5 + 32);
      if (v6 > 0xE)
        v7 = "?";
      else
        v7 = off_1001E3B30[v6];
      v8 = *(int *)(v5 + 1012);
      if (v8 > 0xF)
        v9 = "?";
      else
        v9 = off_1001E3C88[v8];
      LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _handleHijackBlockingwithDevice:]_block_invoke", 30, "Hijackblocking timer has fired; current media stream is %@, user activity level is %s, audio routing score is %s",
        v4,
        v7,
        v9);
      if (v3)
        goto LABEL_20;
    }
    else if (v3)
    {
      goto LABEL_20;
    }
    v10 = (int *)a1[5];
    if (v10[253] < 6)
    {
      objc_msgSend(v10, "_hijackBackoffReset:withReason:", a1[6], CFSTR("inactivity"));
      v13 = 0;
LABEL_26:
      v22 = (id)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", v13));
      v17 = objc_alloc_init((Class)NSMutableDictionary);
      objc_msgSend(v17, "setObject:forKey:", v22, CFSTR("hijackBackoffTicks"));
      v19 = (id *)a1[5];
      v18 = a1[6];
      v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19[145], "objectForKeyedSubscript:", v18));
      v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "otherTipiDeviceBTAddress"));
      objc_msgSend(v19, "_relayConduitMessageSend:withOptions:andWxAddress:andOtherAddress:", 1, v17, v18, v21);

      return;
    }
LABEL_20:
    if (dword_10020FA58 <= 30
      && (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 30)))
    {
      v11 = a1[5];
      v12 = *(_BYTE *)(v11 + 417) + 1;
      *(_BYTE *)(v11 + 417) = v12;
      LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _handleHijackBlockingwithDevice:]_block_invoke", 30, "Hijackblocking continue, current count %d", v12);
    }
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1[5] + 1160), "objectForKeyedSubscript:", a1[6]));
    objc_msgSend(v14, "_setHijackBackoffTick:", mach_absolute_time());

    v15 = (id *)a1[5];
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15[145], "objectForKeyedSubscript:", a1[6]));
    v13 = objc_msgSend(v15, "_checkTickswithinWindow:withWindow:", objc_msgSend(v16, "hijackBackoffTicks"), *(_QWORD *)(a1[5] + 792));

    goto LABEL_26;
  }
}

void sub_1000445F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100044630(uint64_t a1)
{
  uint64_t v1;
  void *v3;
  uint64_t v4;
  void *v5;
  NSObject *v6;

  v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
  if (v1)
  {
    if (dword_10020FA58 > 30)
      goto LABEL_6;
    if (dword_10020FA58 == -1)
    {
      if (!_LogCategory_Initialize(&dword_10020FA58, 30))
      {
LABEL_6:
        v3 = *(void **)(*(_QWORD *)(a1 + 32) + 688);
        if (v3)
        {
          v6 = v3;
          dispatch_source_cancel(v6);
          v4 = *(_QWORD *)(a1 + 32);
          v5 = *(void **)(v4 + 688);
          *(_QWORD *)(v4 + 688) = 0;

        }
        return;
      }
      v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
    }
    LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _handlePhoneOwnershipTriangleTimer]_block_invoke", 30, "PhoneTriangleOwnershipTimer: Skip taking ownership. %@", v1);
    goto LABEL_6;
  }
}

void sub_100044BC0(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  id v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  id v15;

  v2 = *(void **)(a1 + 32);
  if (v2)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "userInfo"));
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "valueForKey:", CFSTR("wxAddress")));
    v5 = objc_msgSend(v4, "integerValue");

    v6 = NSPrintF("%012llx", v5);
    v15 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(v6));
    v7 = (const char *)objc_msgSend(v15, "UTF8String");
    if (!v7)
      v7 = "";
    v8 = NSDataWithHex(v7, -1, 22, 0, 0);
    v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
    v10 = CUPrintNSDataAddress();
    v11 = (void *)objc_claimAutoreleasedReturnValue(v10);

    if (dword_10020FA58 <= 30
      && (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 30)))
    {
      LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _handleTriangleRecoveryInitiated:]_block_invoke", 30, "Triangle recovery: wxAddress %@", v11);
    }
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 1200), "objectForKeyedSubscript:", v11));
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "nearbyWxDevice"));

    if (v13)
    {
      LOBYTE(v14) = 1;
      objc_msgSend(*(id *)(a1 + 40), "_smartRoutingAddWxMapDevice:routingAction:otherAddress:otherName:otherSourceVersion:isRoutingInitialized:newWx:", v13, 3, 0, 0, 0, 0, v14);
      objc_msgSend(*(id *)(a1 + 40), "_smartRoutingConnectToEligibleHeadset:", v13);
    }

  }
}

void sub_100044EFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100044F14(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  void *v6;
  BOOL v7;
  id v8;

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 200), "objectForKeyedSubscript:", a2));
  if (v6)
  {
    v8 = v6;
    v7 = (int)objc_msgSend(v6, "audioStreamState") < 2;
    v6 = v8;
    if (!v7)
    {
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
      *a4 = 1;
    }
  }

}

void sub_100045694(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000456AC(uint64_t a1, void *a2, void *a3, _BYTE *a4)
{
  id v7;
  void *v8;
  void *v9;
  void *v10;
  unint64_t v11;
  void *v12;
  BOOL v13;
  char v14;
  const char *v15;
  id v16;

  v16 = a2;
  v7 = a3;
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1160), "objectForKeyedSubscript:", v16));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "identifier"));

  if (v9)
  {
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 592), "objectForKeyedSubscript:", v9));
    v11 = objc_msgSend(v10, "sourceCount");

  }
  else
  {
    v11 = 0;
  }
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "otherTipiDeviceBTAddress"));
  if (v12)
    v13 = 1;
  else
    v13 = v11 > 1;
  v14 = v13;
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = v14;
  if (dword_10020FA58 <= 30 && (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 30)))
  {
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24))
      v15 = "yes";
    else
      v15 = "no";
    LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon isInAnyTipi]_block_invoke", 30, "Checking Tipi state of Wx %@ uuid %@ sourceCount %u otherTipi %@ inTipi %s", v16, v9, v11, v12, v15);
  }
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24))
    *a4 = 1;

}

void sub_1000458B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000458C8(uint64_t a1, uint64_t a2, void *a3, _BYTE *a4)
{
  void *v6;

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a3, "otherTipiDeviceBTAddress"));

  if (v6)
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
    *a4 = 1;
  }
}

void sub_100045CD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_100045CF4(uint64_t a1, uint64_t a2, void *a3, _BYTE *a4)
{
  id v6;
  void *v7;
  void *v8;
  uint64_t CFDataOfLength;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  char Int64Ranged;
  void *v15;
  void *v16;
  uint64_t v17;
  const char *v18;
  id v19;

  v6 = a3;
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "bleDevice"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "advertisementFields"));
  CFDataOfLength = CFDictionaryGetCFDataOfLength(v8, CFSTR("publicAddress"), 6, 0);
  v19 = (id)objc_claimAutoreleasedReturnValue(CFDataOfLength);

  if (v19)
  {
    v10 = NSPrintF("%.6a", COERCE_DOUBLE(objc_msgSend(objc_retainAutorelease(v19), "bytes")));
    v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
  }
  else
  {
    v11 = 0;
  }
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "bleDevice"));
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "advertisementFields"));
  Int64Ranged = CFDictionaryGetInt64Ranged(v13, CFSTR("hsStatus"), 0, 0xFFFFFFFFLL, 0);

  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "bleDevice"));
  v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "advertisementFields"));
  v17 = CFDictionaryGetInt64Ranged(v16, CFSTR("pid"), 0, 0xFFFFFFFFLL, 0);

  if (objc_msgSend(v11, "isEqualToString:", *(_QWORD *)(a1 + 32)))
  {
    if ((Int64Ranged & 0x24) != 0
      || objc_msgSend(*(id *)(a1 + 40), "_bluetoothProductIDNoEarDetect:", v17))
    {
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = 1;
    }
    if (dword_10020FA58 <= 30
      && (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 30)))
    {
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24))
        v18 = "yes";
      else
        v18 = "no";
      LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _inEarNearbyCheck:]_block_invoke", 30, "SmartRouting TYPE 7 STATE shows inEar: %s for device %@", v18, *(_QWORD *)(a1 + 32));
    }
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = 1;
    *a4 = 1;
  }

}

void sub_1000460DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000460F4(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  void *v6;
  void *v7;
  unsigned int v8;
  id v9;

  v9 = a2;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 200), "objectForKeyedSubscript:"));
  if (objc_msgSend(v6, "primaryPlacement") == 1)
  {

LABEL_4:
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
    *a4 = 1;
    goto LABEL_5;
  }
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 200), "objectForKeyedSubscript:", v9));
  v8 = objc_msgSend(v7, "secondaryPlacement");

  if (v8 == 1)
    goto LABEL_4;
LABEL_5:

}

void sub_10004623C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_100046254(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  id result;

  result = objc_msgSend(*(id *)(a1 + 32), "_isInEarDetectionDisabled:", a2);
  if ((_DWORD)result)
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 0;
    *a4 = 1;
  }
  return result;
}

void sub_100046324(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_10004633C(uint64_t a1, uint64_t a2, void *a3, _BYTE *a4)
{
  id result;

  result = objc_msgSend(a3, "productID");
  if ((_DWORD)result == 8221)
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
    *a4 = 1;
  }
  return result;
}

void sub_100046D48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  uint64_t v33;

  _Block_object_dispose(&a33, 8);
  _Block_object_dispose((const void *)(v33 - 160), 8);
  _Block_object_dispose((const void *)(v33 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_100046D78(uint64_t a1, void *a2, void *a3, _BYTE *a4)
{
  id v7;
  const char *v8;
  const char *v9;
  id v10;
  unsigned int v11;
  const char *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  id v21;

  v21 = a2;
  v7 = a3;
  if (dword_10020FA58 <= 50 && (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 50)))
  {
    v8 = "yes";
    if (objc_msgSend(v7, "inEar"))
      v9 = "yes";
    else
      v9 = "no";
    if (!objc_msgSend(v7, "inEarDisabled"))
      v8 = "no";
    v10 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1160), "count");
    v11 = objc_msgSend(v7, "routingAction");
    if (v11 > 5)
      v12 = "?";
    else
      v12 = off_1001E3E40[v11];
    LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _iPhoneScreenOnPowerEvent]_block_invoke", 50, "Device address %@ is inEar %s inEarDisabled %s %d %s", v21, v9, v8, v10, v12);
  }
  if (objc_msgSend(v7, "inEarDisabled"))
  {
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1160), "objectForKeyedSubscript:", v21));
    v14 = objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "deviceAddress"));
    v15 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v16 = *(void **)(v15 + 40);
    *(_QWORD *)(v15 + 40) = v14;

  }
  if (objc_msgSend(v7, "inEar"))
  {
    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1160), "objectForKeyedSubscript:", v21));
    v18 = objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "deviceAddress"));
    v19 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v20 = *(void **)(v19 + 40);
    *(_QWORD *)(v19 + 40) = v18;

    if (objc_msgSend(v7, "routingAction") == 1 || objc_msgSend(v7, "routingAction") == 2)
      *a4 = 1;
  }

}

void sub_100046F44(uint64_t a1, void *a2, void *a3, _BYTE *a4)
{
  id v7;
  void *v8;
  unsigned __int8 v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  id v18;

  v18 = a2;
  v7 = a3;
  if ((objc_msgSend(*(id *)(a1 + 32), "_bluetoothProductIDNoEarDetect:", objc_msgSend(v7, "productID")) & 1) == 0
    && objc_msgSend(v7, "primaryPlacement") == 1
    && objc_msgSend(v7, "secondaryPlacement") == 1)
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 264), "objectForKeyedSubscript:", v18));
    if (objc_msgSend(v8, "mode") == 2)
    {
      v9 = objc_msgSend(v7, "deviceFlags");

      if ((v9 & 1) != 0)
      {
        v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "btAddressData"));
        v11 = CUPrintNSDataAddress();
        v12 = objc_claimAutoreleasedReturnValue(v11);
        v13 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
        v14 = *(void **)(v13 + 40);
        *(_QWORD *)(v13 + 40) = v12;

        v15 = objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "name"));
        v16 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
        v17 = *(void **)(v16 + 40);
        *(_QWORD *)(v16 + 40) = v15;

        *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = objc_msgSend(v7, "productID");
        *a4 = 1;
      }
    }
    else
    {

    }
  }

}

void sub_10004707C(uint64_t a1)
{
  void *v2;
  void *v3;
  const char *v4;
  __int128 v5;
  NSObject *v6;
  _QWORD block[4];
  __int128 v8;
  __int128 v9;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[AVSystemController sharedAVSystemController](AVSystemController, "sharedAVSystemController"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "attributeForKey:", AVSystemController_PlayingSessionsDescriptionAttribute));

  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 56) = objc_msgSend(v3, "count") != 0;
  if (dword_10020FA58 <= 30 && (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 30)))
  {
    if (*(_BYTE *)(*(_QWORD *)(a1 + 32) + 56))
      v4 = "playing";
    else
      v4 = "not playing";
    LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _iPhoneScreenOnPowerEvent]_block_invoke_3", 30, "Audio is %s on the system", v4);
  }
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000471AC;
  block[3] = &unk_1001E35A8;
  v5 = *(_OWORD *)(a1 + 48);
  v6 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 312);
  v8 = *(_OWORD *)(a1 + 32);
  v9 = v5;
  dispatch_async(v6, block);

}

void sub_1000471AC(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  unsigned __int8 v4;

  if ((int)objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 160), "callCountIncomingUnconnected") > 0
    || (v2 = *(_QWORD *)(a1 + 32), !*(_BYTE *)(v2 + 56))
    && ((int)objc_msgSend(*(id *)(v2 + 160), "activeCallCount") < 1
     || (v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1160), "objectForKeyedSubscript:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40))), v4 = objc_msgSend(v3, "routed"), v3, (v4 & 1) == 0)))
  {
    objc_msgSend(*(id *)(a1 + 32), "_smartRoutingShowBanner:withDevice:andDeviceAddress:andProductID:andCentralContentItemTxt:andTimeout:andDeviceType:", 1, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24), CFSTR("Connected"), 0, 6.0);
  }
}

void sub_10004733C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100047354(uint64_t a1, uint64_t a2, void *a3, _BYTE *a4)
{
  void *v6;
  void *v7;
  uint64_t CFDataOfLength;
  void *v9;
  char *v10;
  unsigned __int16 *v11;
  void *v13;
  unsigned int v14;
  id v15;

  v15 = a3;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "bleDevice"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "advertisementFields"));

  CFDataOfLength = CFDictionaryGetCFDataOfLength(v7, CFSTR("bdAddr"), 6, 0);
  v9 = (void *)objc_claimAutoreleasedReturnValue(CFDataOfLength);
  if (v9)
  {
    if (dword_10020FA58 <= 30
      && (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 30)))
    {
      LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _lastConnectIsWatchCheck:]_block_invoke", 30, "lastConnectIsWatchCheck comparing, Wx: %@, ND: %@", *(_QWORD *)(a1 + 32), v9);
    }
    v10 = (char *)objc_msgSend(objc_retainAutorelease(v9), "bytes");
    v11 = (unsigned __int16 *)objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 32)), "bytes");
    if (*v11 == *(unsigned __int16 *)(v10 + 3) && *((unsigned __int8 *)v11 + 2) == v10[5])
    {
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "model"));
      v14 = objc_msgSend(v13, "hasPrefix:", CFSTR("Watch"));

      if (v14)
      {
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
        *a4 = 1;
      }
    }
  }

}

id sub_100047C1C(uint64_t a1)
{
  _QWORD *v2;
  unsigned int v3;
  unsigned int v4;
  const char *v5;
  const char *v6;
  const char *v7;
  unsigned int v8;
  uint64_t v9;
  void *v10;
  _QWORD v12[5];

  if (dword_10020FA58 <= 30 && (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 30)))
    LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _nearbyDeviceInfoTriangleRecoveryTimer]_block_invoke", 30, "TriangleRecovery: Timer for legacy triangle recovery has completed");
  v2 = *(_QWORD **)(a1 + 32);
  if (!v2[108])
    return _objc_msgSend(v2, "_nearbyDeviceInfoCheck");
  v3 = objc_msgSend(v2, "isInAnyTipi");
  if (dword_10020FA58 <= 30 && (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 30)))
  {
    v4 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1176), "magnetConnected");
    v5 = "no";
    if (v4)
      v6 = "yes";
    else
      v6 = "no";
    if (v3)
      v7 = "yes";
    else
      v7 = "no";
    if (*(_BYTE *)(*(_QWORD *)(a1 + 32) + 1233))
      v5 = "yes";
    LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _nearbyDeviceInfoTriangleRecoveryTimer]_block_invoke", 30, "TriangleRecovery: Magnet %s inAnyTipi %s TipiInProgress %s", v6, v7, v5);
  }
  v8 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1176), "magnetConnected") ^ 1 | v3;
  v9 = *(_QWORD *)(a1 + 32);
  if ((v8 & 1) == 0 && !*(_BYTE *)(v9 + 1233))
  {
    v10 = *(void **)(v9 + 1160);
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    v12[2] = sub_100047DB8;
    v12[3] = &unk_1001E3008;
    v12[4] = v9;
    objc_msgSend(v10, "enumerateKeysAndObjectsUsingBlock:", v12);
    v9 = *(_QWORD *)(a1 + 32);
  }
  return objc_msgSend((id)v9, "_cancelTriangleRecoveryTimer");
}

void sub_100047DB8(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  id v8;

  v5 = a3;
  v6 = a2;
  v8 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "otherTipiDeviceBTAddress"));
  objc_msgSend(*(id *)(a1 + 32), "_updateNearbyDeviceState:withAddress:withEasyPairing:withState:", v6, v8, 1, 3);

  if (*(_BYTE *)(*(_QWORD *)(a1 + 32) + 673))
    v7 = 1;
  else
    v7 = 2;
  objc_msgSend(v5, "_setRoutingAction:", v7);

  objc_msgSend(*(id *)(a1 + 32), "_postNotification:", "com.apple.BluetoothServices.AudioRoutingChanged");
}

void sub_100047F68(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_100047F80(uint64_t a1, uint64_t a2, void *a3, _BYTE *a4)
{
  unsigned int v6;
  void *v7;
  void *v8;

  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a3, "model"));
  v6 = objc_msgSend(v8, "hasPrefix:", CFSTR("Watch"));
  v7 = v8;
  if (v6)
  {
    if (dword_10020FA58 <= 30
      && (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 30)))
    {
      LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _nearbyDeviceInfoCheck]_block_invoke", 30, "Evaluator, Found only nearby watch. Allow legacy triangle recovery.");
    }
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
    *a4 = 1;
    v7 = v8;
  }

}

void sub_100048034(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;

  v5 = a3;
  v6 = a2;
  v7 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "otherTipiDeviceBTAddress"));
  objc_msgSend(*(id *)(a1 + 32), "_updateNearbyDeviceState:withAddress:withEasyPairing:withState:", v6, v7, 1, 3);

  objc_msgSend(v5, "_setRoutingAction:", 2);
  objc_msgSend(*(id *)(a1 + 32), "_postNotification:", "com.apple.BluetoothServices.AudioRoutingChanged");

}

void sub_1000496F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100049744(uint64_t a1)
{
  uint64_t v1;
  void *v3;
  uint64_t v4;
  void *v5;
  NSObject *v6;

  v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
  if (v1)
  {
    if (dword_10020FA58 > 30)
      goto LABEL_6;
    if (dword_10020FA58 == -1)
    {
      if (!_LogCategory_Initialize(&dword_10020FA58, 30))
      {
LABEL_6:
        v3 = *(void **)(*(_QWORD *)(a1 + 32) + 384);
        if (v3)
        {
          v6 = v3;
          dispatch_source_cancel(v6);
          v4 = *(_QWORD *)(a1 + 32);
          v5 = *(void **)(v4 + 384);
          *(_QWORD *)(v4 + 384) = 0;

        }
        return;
      }
      v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
    }
    LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _proactivelyTakeOwnership]_block_invoke", 30, "ProactiveRouting: Skip taking ownership. %@", v1);
    goto LABEL_6;
  }
}

void sub_10004AB10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10004AB28(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  void *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  const char *v11;
  void *v12;
  void *v13;
  void *v14;
  unsigned int v15;
  const char *v16;
  const char *v17;
  void *v18;
  void *v19;
  void *v20;
  NSObject *v21;
  NSObject *v22;
  const __CFString *v23;
  id v24;

  if (dword_10020FA58 <= 90 && (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 90)))
    LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _relayConduitMessageStartTimer:withOptions:]_block_invoke", 90, "Didn't receive relay message response timing out... ");
  ++*(_DWORD *)(*(_QWORD *)(a1 + 32) + 120);
  objc_msgSend(*(id *)(a1 + 32), "_setHighPriorityTag:withHighPriority:", *(_QWORD *)(a1 + 40), 0);
  v24 = objc_alloc_init((Class)BTAudioRoutingResponse);
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "objectForKey:", CFSTR("audioRoutingRequestID")));
  objc_msgSend(v24, "setClientID:", objc_msgSend(v2, "unsignedIntValue"));

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "objectForKey:", CFSTR("audioRoutingScore")));
  v4 = objc_msgSend(v3, "integerValue");

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 200), "objectForKeyedSubscript:", *(_QWORD *)(a1 + 40)));
  v6 = objc_msgSend(v5, "audioStreamState");

  v7 = objc_msgSend(*(id *)(a1 + 32), "_arbitrationTimeout:withScore:", *(_QWORD *)(a1 + 40), v4);
  if (v7)
    v8 = 1;
  else
    v8 = 3;
  objc_msgSend(v24, "setAction:", v8);
  if (v7)
    v9 = *(_QWORD *)(a1 + 40);
  else
    v9 = 0;
  objc_msgSend(v24, "setDeviceAddress:", v9);
  v10 = objc_msgSend(v24, "action");
  if (v10 > 5)
    v11 = "?";
  else
    v11 = off_1001E3E40[v10];
  v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v11));
  v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Relay message timeout, current Audio Session is %ld, tell MX to %@"), v4, v12));
  objc_msgSend(v24, "setReason:", v13);

  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1160), "objectForKeyedSubscript:", *(_QWORD *)(a1 + 40)));
  objc_msgSend(v14, "_setRoutingAction:", objc_msgSend(v24, "action"));

  if (dword_10020FA58 <= 90 && (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 90)))
  {
    v15 = objc_msgSend(v24, "action");
    if (v15 > 5)
      v16 = "?";
    else
      v16 = off_1001E3E40[v15];
    if (v6 > 3)
      v17 = "?";
    else
      v17 = off_1001E3DD8[v6];
    LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _relayConduitMessageStartTimer:withOptions:]_block_invoke", 90, "Hijack relay message timeout, audioScore %ld, RoutingAction %s, wxStreamState %s", v4, v16, v17);
  }
  v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), "audioRoutingResponse"));

  if (v18)
  {
    v19 = *(void **)(a1 + 32);
    v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), "audioRoutingResponse"));
    objc_msgSend(v19, "_respondRoutingRequest:withResponseHandler:wxAddress:", v24, v20, *(_QWORD *)(a1 + 40));

  }
  v21 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), "conduitMessageTimer"));
  v22 = v21;
  if (v21)
    dispatch_source_cancel(v21);
  objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), "setConduitMessageTimer:", 0);
  objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), "setConduitMessageTicks:", 0);
  if (objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1216), "hijackRelaySent"))
  {
    if (objc_msgSend(v24, "action"))
      v23 = CFSTR("Timeout SR answered");
    else
      v23 = CFSTR("Timeout");
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1216), "setHijackAnswer:", v23);
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1216), "setHijackRoundTripTime:", (unint64_t)(*(double *)(a1 + 64) * 1000.0));
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1216), "setHijackContinuousTimeoutCount:", (char *)objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1216), "hijackContinuousTimeoutCount") + 1);
    objc_msgSend(*(id *)(a1 + 32), "submitHijackMetric:withV1:", *(_QWORD *)(a1 + 40), 1);
    objc_msgSend(*(id *)(a1 + 32), "_startRouteCheckTimer:andType:", *(_QWORD *)(a1 + 40), 5);
    objc_msgSend(*(id *)(a1 + 32), "_startRouteCheckTimer:andType:", *(_QWORD *)(a1 + 40), 6);
    objc_msgSend(*(id *)(a1 + 32), "submitRouteActivityMetric:activity:", *(_QWORD *)(a1 + 40), CFSTR("Hijack_V1_RemoteTimeout"));
  }

}

void sub_10004B07C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  int v5;
  void *v6;
  id v7;
  id v8;
  void *v9;
  id v10;

  v3 = a2;
  v4 = v3;
  if (v3)
  {
    v10 = v3;
    if (dword_10020FA58 <= 90)
    {
      if (dword_10020FA58 != -1 || (v5 = _LogCategory_Initialize(&dword_10020FA58, 90), v4 = v10, v5))
      {
        LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _setOwnership:withHijackRequest:withOwnership:]_block_invoke", 90, "Relinquishing ownership failed with %{error}", v4);
        v4 = v10;
      }
    }
    v6 = *(void **)(a1 + 32);
    if (v6)
    {
      v7 = v6;
      v8 = objc_alloc_init((Class)NSMutableDictionary);
      objc_msgSend(v8, "setObject:forKey:", v7, CFSTR("audioRoutingRequestID"));
      if (dword_10020FA58 <= 90
        && (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 90)))
      {
        LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _setOwnership:withHijackRequest:withOwnership:]_block_invoke", 90, "Hijacking failed with  %{error}", v10);
      }
      v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 3));
      objc_msgSend(v8, "setObject:forKey:", v9, CFSTR("audioRoutingHijackAnswer"));

      objc_msgSend(*(id *)(a1 + 40), "_relayConduitMessageSend:withOptions:andWxAddress:andOtherAddress:", 1, v8, *(_QWORD *)(a1 + 48), 0);
      v4 = v10;
    }
  }

}

void sub_10004B52C(uint64_t a1, void *a2, void *a3)
{
  void *v5;
  id v6;

  v6 = a2;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a3, "otherTipiDeviceBTAddress"));

  if (v5 && (objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 176), "isEqualToString:", v6) & 1) == 0)
    objc_msgSend(*(id *)(a1 + 32), "_sendAudioCategory:withAudioCategory:", v6, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 488));

}

void sub_10004B948(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  const char *v13;
  const char *v14;
  void *v15;
  void *v16;
  id v17;

  v17 = a2;
  v5 = a3;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "otherTipiDeviceBTAddress"));

  if (v6)
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_myBluetoothAddressString"));
    v8 = objc_alloc_init((Class)NSMutableDictionary);
    objc_msgSend(v8, "setObject:forKeyedSubscript:", v7, CFSTR("btAddress"));
    objc_msgSend(v8, "setObject:forKeyedSubscript:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 616), CFSTR("btName"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 1012)));
    objc_msgSend(v8, "setObject:forKeyedSubscript:", v9, CFSTR("nearbyAudioScore"));

    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *(_QWORD *)(a1 + 40)));
    objc_msgSend(v8, "setObject:forKeyedSubscript:", v10, CFSTR("idleTime"));

    if (*(_BYTE *)(a1 + 48))
      objc_msgSend(v8, "setObject:forKeyedSubscript:", &__kCFBooleanTrue, CFSTR("newTipi"));
    if (dword_10020FA58 <= 30
      && (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 30)))
    {
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "otherTipiDeviceBTAddress"));
      v12 = *(int *)(*(_QWORD *)(a1 + 32) + 1012);
      if (v12 > 0xF)
        v13 = "?";
      else
        v13 = off_1001E3C88[v12];
      if (*(_BYTE *)(a1 + 48))
        v14 = "yes";
      else
        v14 = "no";
      LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _sendAudioScoreChanged:]_block_invoke", 30, "ProactiveRouting: Sending relay via %@ to %@ TipiScore %s newTipi %s", v17, v11, v13, v14);

    }
    v15 = *(void **)(a1 + 32);
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "otherTipiDeviceBTAddress"));
    objc_msgSend(v15, "_relayConduitMessageSend:withOptions:andWxAddress:andOtherAddress:", 1, v8, v17, v16);

  }
}

void sub_10004BC94(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  __CFString *v6;
  __CFString *v7;
  uint64_t v8;
  unsigned int v9;
  void *v10;
  unsigned int v11;
  uint64_t v12;
  id v13;
  const char *v14;
  uint64_t v15;
  void *v16;
  id v17;
  void *v18;
  _QWORD v19[4];
  id v20;
  void *v21;
  int v22;
  char v23;

  v3 = a2;
  v4 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_getWxFWVersion:", v3));
  v5 = (void *)v4;
  v6 = &stru_1001ED4C0;
  if (v4)
    v6 = (__CFString *)v4;
  v7 = v6;

  if (objc_msgSend(CFSTR("5A274"), "compare:options:", v7, 64) == (id)-1)
  {
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(_DWORD *)(v8 + 1012);
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v8 + 264), "objectForKeyedSubscript:", v3));
    v11 = objc_msgSend(v10, "mode");

    if (v11 == 1)
      v12 = v9;
    else
      v12 = 8;
    v13 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%02x0002%02x"), 2, v12)));
    v14 = (const char *)objc_msgSend(v13, "UTF8String");
    if (!v14)
      v14 = "";
    v15 = NSDataWithHex(v14, -1, 22, 0, 0);
    v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
    v17 = objc_alloc_init((Class)CBDevice);
    objc_msgSend(v17, "setIdentifier:", v3);
    v18 = *(void **)(a1 + 40);
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472;
    v19[2] = sub_10004BE38;
    v19[3] = &unk_1001E3648;
    v22 = v12;
    v23 = v11;
    v20 = v3;
    v21 = v16;
    objc_msgSend(v18, "sendSmartRoutingInformation:device:completionHandler:", v16, v17, v19);

  }
}

void sub_10004BE38(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  const char *v6;
  int v7;
  unint64_t v8;
  const char *v9;
  id v10;

  v3 = a2;
  v4 = v3;
  if (dword_10020FA58 <= 30)
  {
    v10 = v3;
    if (dword_10020FA58 != -1 || (v7 = _LogCategory_Initialize(&dword_10020FA58, 30), v4 = v10, v7))
    {
      v5 = *(int *)(a1 + 48);
      if (v5 > 0xF)
        v6 = "?";
      else
        v6 = off_1001E3C88[v5];
      v8 = *(char *)(a1 + 52);
      if (v8 > 2)
        v9 = "?";
      else
        v9 = off_1001E3DA0[v8];
      LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _sendTipiScoreUpdateToWx]_block_invoke_2", 30, "SendTipiScoreToWx: %@ score %s srMode %s byte %@ result %{error}\n", *(_QWORD *)(a1 + 32), v6, v9, *(_QWORD *)(a1 + 40), v4);
      v4 = v10;
    }
  }

}

void sub_10004BFE0(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  int v5;
  id v6;

  v3 = a2;
  v4 = v3;
  if (v3)
  {
    if (dword_10020FA58 <= 90)
    {
      v6 = v3;
      if (dword_10020FA58 != -1 || (v5 = _LogCategory_Initialize(&dword_10020FA58, 90), v4 = v6, v5))
      {
        LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _setAutoRoute:withAutoRoute:]_block_invoke", 90, "Setting high priority failed with %{error}", v4);
        v4 = v6;
      }
    }
  }
  else
  {
    *(_BYTE *)(*(_QWORD *)(a1 + 32) + 392) = 1;
  }

}

void sub_10004C184(id a1, NSError *a2)
{
  NSError *v2;
  NSError *v3;
  int v4;
  NSError *v5;

  v2 = a2;
  v3 = v2;
  if (v2
    && dword_10020FA58 <= 90
    && ((v5 = v2, dword_10020FA58 != -1) || (v4 = _LogCategory_Initialize(&dword_10020FA58, 90), v3 = v5, v4)))
  {
    LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _setIsHiddenProperty:withIsHidden:]_block_invoke", 90, "Setting isHidden failed with %{error}", v3);

  }
  else
  {

  }
}

void sub_10004C2DC(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  int v5;
  id v6;

  v3 = a2;
  v4 = v3;
  if (v3)
  {
    if (dword_10020FA58 <= 90)
    {
      v6 = v3;
      if (dword_10020FA58 != -1 || (v5 = _LogCategory_Initialize(&dword_10020FA58, 90), v4 = v6, v5))
      {
        LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _setHighPriorityTag:withHighPriority:]_block_invoke", 90, "Setting high priority failed with %{error}", v4);
        v4 = v6;
      }
    }
  }
  else
  {
    *(_BYTE *)(*(_QWORD *)(a1 + 32) + 392) = 1;
  }

}

void sub_10004C4D4(id a1, NSError *a2)
{
  NSError *v2;
  NSError *v3;
  int v4;
  NSError *v5;

  v2 = a2;
  v3 = v2;
  if (v2
    && dword_10020FA58 <= 90
    && ((v5 = v2, dword_10020FA58 != -1) || (v4 = _LogCategory_Initialize(&dword_10020FA58, 90), v3 = v5, v4)))
  {
    LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _setManualRouteFlag:withManualRoute:]_block_invoke", 90, "Setting manual route flag failed with %{error}", v3);

  }
  else
  {

  }
}

void sub_10004CB20(uint64_t a1)
{
  void *v2;
  void *v3;
  int Int64Ranged;
  uint64_t v5;
  uint64_t v6;
  int v7;

  v2 = *(void **)(a1 + 32);
  if (v2)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "userInfo"));
    Int64Ranged = CFDictionaryGetInt64Ranged(v3, CFSTR("TotalIDSDevices"), 0xFFFFFFFF80000000, 0x7FFFFFFFLL, 0);

    v5 = *(_QWORD *)(a1 + 40);
    v6 = *(_QWORD *)(v5 + 1272);
    if (Int64Ranged != v6)
    {
      if (dword_10020FA58 <= 30)
      {
        if (dword_10020FA58 == -1)
        {
          v7 = _LogCategory_Initialize(&dword_10020FA58, 30);
          v5 = *(_QWORD *)(a1 + 40);
          if (!v7)
            goto LABEL_8;
          v6 = *(_QWORD *)(v5 + 1272);
        }
        LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _setTotalCountIDSDevices:]_block_invoke", 30, "Total count of IDS devices updated: %d -> %d", v6, Int64Ranged);
        v5 = *(_QWORD *)(a1 + 40);
      }
LABEL_8:
      *(_QWORD *)(v5 + 1272) = Int64Ranged;
      objc_msgSend(*(id *)(a1 + 40), "_prefsChanged");
    }
  }
}

void sub_10004D110(uint64_t a1)
{
  int *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  NSObject *v7;

  v3 = a1 + 32;
  v2 = *(int **)(a1 + 32);
  if (*(_QWORD *)(v3 + 8) == 1 || v2[253] >= 6)
  {
    objc_msgSend(v2, "_proactivelyTakeOwnership");
  }
  else if (dword_10020FA58 <= 30
         && (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 30)))
  {
    LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _startHighActivityLevelTimer:]_block_invoke", 30, "ProactiveRouting: Skip, device inactive");
  }
  v4 = *(void **)(*(_QWORD *)(a1 + 32) + 384);
  if (v4)
  {
    v7 = v4;
    dispatch_source_cancel(v7);
    v5 = *(_QWORD *)(a1 + 32);
    v6 = *(void **)(v5 + 384);
    *(_QWORD *)(v5 + 384) = 0;

  }
}

void sub_10004D2EC(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  NSObject *v5;

  objc_msgSend(*(id *)(a1 + 32), "_handlePhoneOwnershipTriangleTimer");
  v2 = *(void **)(*(_QWORD *)(a1 + 32) + 688);
  if (v2)
  {
    v5 = v2;
    dispatch_source_cancel(v5);
    v3 = *(_QWORD *)(a1 + 32);
    v4 = *(void **)(v3 + 688);
    *(_QWORD *)(v3 + 688) = 0;

  }
}

id sub_10004D500(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "updateCurrentAudioSnapshot");
}

void sub_10004D718(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;

  objc_msgSend(*(id *)(a1 + 32), "_submitManualRouteDetectionMetric:", *(_QWORD *)(a1 + 40));
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1216), "setManualRouteDestination:", CFSTR("BT"));
  objc_msgSend(*(id *)(a1 + 32), "submitRouteActivityMetric:activity:", *(_QWORD *)(a1 + 40), CFSTR("Manual_Route_BT"));
  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1216), "manualRouteChangeDetectionTimer"));
  if (v2)
  {
    v3 = v2;
    dispatch_source_cancel(v2);
    v2 = v3;
  }

}

void sub_10004D864(uint64_t a1)
{
  void *v1;
  uint64_t v3;
  void *v4;
  NSObject *v5;

  v1 = *(void **)(*(_QWORD *)(a1 + 32) + 704);
  if (v1)
  {
    v5 = v1;
    dispatch_source_cancel(v5);
    v3 = *(_QWORD *)(a1 + 32);
    v4 = *(void **)(v3 + 704);
    *(_QWORD *)(v3 + 704) = 0;

  }
}

void sub_10004D9C8(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  NSObject *v5;

  objc_msgSend(*(id *)(a1 + 32), "_submitRouteChangeDetectionMetric:andAnswer:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
  v2 = *(void **)(*(_QWORD *)(a1 + 32) + 944);
  if (v2)
  {
    v5 = v2;
    dispatch_source_cancel(v5);
    v3 = *(_QWORD *)(a1 + 32);
    v4 = *(void **)(v3 + 944);
    *(_QWORD *)(v3 + 944) = 0;

  }
}

id sub_10004DD28(uint64_t a1)
{
  uint64_t v2;

  v2 = *(unsigned int *)(a1 + 48);
  if ((_DWORD)v2 == 11)
  {
    objc_msgSend(*(id *)(a1 + 32), "_handleProactiveRoutingRouteCheck:", *(_QWORD *)(a1 + 40));
    v2 = *(unsigned int *)(a1 + 48);
  }
  return _objc_msgSend(*(id *)(a1 + 32), "_submitRouteCheckMetric:andType:", *(_QWORD *)(a1 + 40), v2);
}

void sub_10004E298(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  _Block_object_dispose(&a31, 8);
  _Unwind_Resume(a1);
}

void sub_10004E2E0(uint64_t a1, uint64_t a2, void *a3, _BYTE *a4)
{
  void *v6;
  void *v7;
  uint64_t CFDataOfLength;
  id v9;
  char *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  char *v17;
  uint64_t v18;
  void *v19;
  void **p_vtable;
  void *v21;
  _BYTE *v22;
  void *v23;
  void *v24;
  unsigned int v25;
  const char *v26;
  int v27;
  unsigned __int16 *v28;
  BOOL v29;
  void *v30;
  unsigned __int16 *v31;
  BOOL v32;
  void **v33;
  uint64_t v34;
  id v35;
  void *v36;
  uint64_t v37;
  int v38;
  void *v39;
  id v40;

  v40 = a3;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v40, "bleDevice"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "advertisementFields"));

  CFDataOfLength = CFDictionaryGetCFDataOfLength(v7, CFSTR("bdAddr"), 6, 0);
  v9 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(CFDataOfLength));
  v10 = (char *)objc_msgSend(v9, "bytes");
  if (v9)
  {
    v11 = NSPrintF("%.6a", COERCE_DOUBLE(objc_msgSend(objc_retainAutorelease(v9), "bytes")));
    v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
  }
  else
  {
    v12 = 0;
  }
  v13 = *(void **)(a1 + 32);
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v40, "idsIdentifier"));
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "_nearbyMacAddressTranslate:", v14));

  v16 = objc_retainAutorelease(v15);
  v17 = (char *)objc_msgSend(v16, "bytes");
  if (v16)
  {
    v18 = NSPrintF("%.6a", COERCE_DOUBLE(objc_msgSend(objc_retainAutorelease(v16), "bytes")));
    v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
  }
  else
  {
    v19 = 0;
  }
  p_vtable = _TtC15audioaccessoryd11XPCMessages.vtable;
  if (dword_10020FA58 <= 30)
  {
    if (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 30))
    {
      v39 = v12;
      v21 = v7;
      v22 = a4;
      v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v40, "idsIdentifier"));
      v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v40, "model"));
      v25 = objc_msgSend(v24, "containsString:", CFSTR("Mac"));
      v26 = "no";
      if (v25)
        v26 = "yes";
      LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _startTipiHealing:withLastConnect:]_block_invoke", 30, "Evaluator: Tipi healing ND %@ idsId %@ isMac %s", v40, v23, v26);

      p_vtable = (void **)(_TtC15audioaccessoryd11XPCMessages + 24);
      a4 = v22;
      v7 = v21;
      v12 = v39;
    }
    v27 = *((_DWORD *)p_vtable + 662);
    if (v27 <= 30 && (v27 != -1 || _LogCategory_Initialize(&dword_10020FA58, 30)))
      LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _startTipiHealing:withLastConnect:]_block_invoke", 30, "Evaluator: Tipi healing comparing, lastConnect: %@, NdAddr %@ transAddr %@", *(_QWORD *)(a1 + 40), v12, v19);
  }
  if (v9
    && ((v28 = (unsigned __int16 *)objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 40)), "bytes"),
         *v28 == *(unsigned __int16 *)(v10 + 3))
      ? (v29 = *((unsigned __int8 *)v28 + 2) == v10[5])
      : (v29 = 0),
        v30 = v12,
        v29)
    || v16
    && ((v31 = (unsigned __int16 *)objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 40)), "bytes"),
         *v31 == *(unsigned __int16 *)(v17 + 3))
      ? (v32 = *((unsigned __int8 *)v31 + 2) == v17[5])
      : (v32 = 0),
        v30 = v19,
        v32))
  {
    v33 = p_vtable;
    v34 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v35 = v30;
    v36 = *(void **)(v34 + 40);
    *(_QWORD *)(v34 + 40) = v35;
    p_vtable = v33;

  }
  v37 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40);
  if (v37)
  {
    v38 = *((_DWORD *)p_vtable + 662);
    if (v38 <= 30)
    {
      if (v38 == -1)
      {
        if (!_LogCategory_Initialize(&dword_10020FA58, 30))
          goto LABEL_34;
        v37 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40);
      }
      LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _startTipiHealing:withLastConnect:]_block_invoke", 30, "Evaluator: Tipi healing found via ND %@", v37);
    }
LABEL_34:
    *a4 = 1;
  }

}

void sub_10004FB38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_10004FB5C(uint64_t a1, void *a2, void *a3)
{
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t Int64Ranged;
  uint64_t CFDataOfLength;
  void *v13;
  char v14;
  uint64_t v15;
  void *v16;
  BOOL v17;
  void **p_vtable;
  void *v19;
  const char *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  id *v24;
  uint64_t v25;
  int v26;
  const char *v27;
  void *v28;
  id v29;

  v29 = a2;
  v6 = a3;
  if ((objc_msgSend(v6, "isTipiHealingV2Eligible") & 1) == 0)
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "identifier"));
    if (!v7)
    {
LABEL_32:

      goto LABEL_33;
    }
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1376), "objectForKeyedSubscript:", v7));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "bleDevice"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "advertisementFields"));

    Int64Ranged = CFDictionaryGetInt64Ranged(v10, CFSTR("asCount"), 0, 0xFFFFFFFFLL, 0);
    CFDataOfLength = CFDictionaryGetCFDataOfLength(v10, CFSTR("lch"), 3, 0);
    v13 = (void *)objc_claimAutoreleasedReturnValue(CFDataOfLength);
    v14 = CFDictionaryGetInt64Ranged(v10, CFSTR("srAudioRoutingScore1"), 0, 255, 0);
    v15 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_getWxFWVersion:", v29));
    v16 = (void *)v15;
    if (v14)
      v17 = v15 == 0;
    else
      v17 = 1;
    if (!v17
      && objc_msgSend(CFSTR("5A187"), "compare:options:", v15, 64) == (id)-1
      && (objc_msgSend(*(id *)(a1 + 32), "_isMyAddress:", v13) & 1) == 0)
    {
      if (dword_10020FA58 <= 30
        && (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 30)))
      {
        LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _tipiHealingAttempt]_block_invoke", 30, "Legacy Tipi healing blocked, source devices and headsets are capable of Tipi2.0");
      }
      objc_msgSend(v6, "setIsTipiHealingV2Eligible:", 1);
      goto LABEL_31;
    }
    p_vtable = _TtC15audioaccessoryd11XPCMessages.vtable;
    if (dword_10020FA58 <= 30
      && (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 30)))
    {
      v28 = v16;
      v19 = v8;
      if (objc_msgSend(v6, "inEar"))
        v20 = "yes";
      else
        v20 = "no";
      v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "otherTipiDeviceBTAddress"));
      v27 = v20;
      v8 = v19;
      v16 = v28;
      LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _tipiHealingAttempt]_block_invoke", 30, "Tipi healing inWxAddress %@ sourceCount %u inEar %s lastConnect %@ otherTipi %@", v29, Int64Ranged, v27, v13, v21);

      p_vtable = (void **)(_TtC15audioaccessoryd11XPCMessages + 24);
    }
    if (Int64Ranged >= 2)
    {
      v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "otherTipiDeviceBTAddress"));

      if (!v22)
      {
        v23 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
        v25 = *(_QWORD *)(v23 + 40);
        v24 = (id *)(v23 + 40);
        if (!v25)
        {
LABEL_30:
          objc_storeStrong(v24, a2);
          objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), v13);
          goto LABEL_31;
        }
        if (objc_msgSend(v6, "inEar"))
        {
          v26 = *((_DWORD *)p_vtable + 662);
          if (v26 <= 30 && (v26 != -1 || _LogCategory_Initialize(&dword_10020FA58, 30)))
            LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _tipiHealingAttempt]_block_invoke", 30, "Overwrite Tipi healing headset for inEar inWxAddress %@ ", v29);
          v24 = (id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
          goto LABEL_30;
        }
      }
    }
LABEL_31:

    goto LABEL_32;
  }
LABEL_33:

}

void sub_100050F28(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  int v5;
  id v6;

  v3 = a2;
  v4 = v3;
  if (dword_10020FA58 <= 90)
  {
    v6 = v3;
    if (dword_10020FA58 != -1 || (v5 = _LogCategory_Initialize(&dword_10020FA58, 90), v4 = v6, v5))
    {
      LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _tipihHealingV2Handling:]_block_invoke", 90, "### TipiTableEvent: update wx Tipi table for Wx %@, addresses %@, error %{error}", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), v4);
      v4 = v6;
    }
  }
  if (!v4)
  {
    objc_msgSend(*(id *)(a1 + 48), "setTipitableUpdated:", 1);
    v4 = 0;
  }

}

uint64_t sub_1000510B0(uint64_t result)
{
  uint64_t v1;

  v1 = result;
  if (dword_10020FA58 <= 90)
  {
    if (dword_10020FA58 != -1 || (result = _LogCategory_Initialize(&dword_10020FA58, 90), (_DWORD)result))
      result = LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _tipiHealingStartTimer:]_block_invoke", 90, "Tipi healing attempt failed");
  }
  *(_BYTE *)(*(_QWORD *)(v1 + 32) + 1233) = 0;
  return result;
}

void sub_100051264(id a1, NSError *a2)
{
  NSError *v2;
  NSError *v3;
  int v4;
  NSError *v5;

  v2 = a2;
  v3 = v2;
  if (dword_10020FA58 <= 30
    && ((v5 = v2, dword_10020FA58 != -1) || (v4 = _LogCategory_Initialize(&dword_10020FA58, 30), v3 = v5, v4)))
  {
    LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _triggerTipiTableUpdate:]_block_invoke", 30, "TriggerTipiTableUpdate: result %@", v3);

  }
  else
  {

  }
}

void sub_100051534(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_10005154C(uint64_t a1)
{
  id v2;
  __CFString *v3;
  void *v4;
  NSObject *v5;
  uint64_t v6;
  void *v7;

  if (dword_10020FA58 <= 30 && (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 30)))
    LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _tipiHealingHijackTimerStart:withScore:]_block_invoke", 30, "Tipi Healing didn't complete in time, providing route action to MX");
  v2 = objc_msgSend(*(id *)(a1 + 32), "_arbitrationTimeout:withScore:", *(_QWORD *)(a1 + 40), *(unsigned int *)(a1 + 56));
  if ((_DWORD)v2)
    v3 = CFSTR("Tipi Healing not complete, allowing device to hijack route");
  else
    v3 = CFSTR("Rejected, buds stream state blocks hijack");
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), v3);
  v4 = *(void **)(*(_QWORD *)(a1 + 32) + 1256);
  if (v4)
  {
    v5 = v4;
    dispatch_source_cancel(v5);
    v6 = *(_QWORD *)(a1 + 32);
    v7 = *(void **)(v6 + 1256);
    *(_QWORD *)(v6 + 1256) = 0;

  }
  return objc_msgSend(*(id *)(a1 + 32), "_mediaRouteHijackResponseHandlerFor:allowedToHijack:withReason:", *(_QWORD *)(a1 + 40), v2, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40));
}

void sub_100051B20(uint64_t a1, void *a2, void *a3)
{
  void *v5;
  id v6;

  v6 = a2;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a3, "otherTipiDeviceBTAddress"));

  if (v5 && (objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 176), "isEqualToString:", v6) & 1) == 0)
    objc_msgSend(*(id *)(a1 + 32), "_sendAudioCategory:withAudioCategory:", v6, *(_QWORD *)(a1 + 40));

}

_QWORD *sub_100052568(_QWORD *result)
{
  uint64_t v1;
  _QWORD *v2;
  const char *v3;

  v1 = result[4];
  if (*(uint64_t *)(v1 + 1272) < 3)
  {
    if (dword_10020FA58 <= 30)
    {
      if (dword_10020FA58 != -1 || (result = (_QWORD *)_LogCategory_Initialize(&dword_10020FA58, 30), (_DWORD)result))
      {
        v3 = "Less than 3 iCloud devices found";
        return (_QWORD *)LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _watchHintingRecovery]_block_invoke", 30, v3);
      }
    }
  }
  else
  {
    v2 = result;
    result = objc_msgSend(*(id *)(v1 + 200), "count");
    if (result)
    {
      if (dword_10020FA58 > 30)
        return result;
      if (dword_10020FA58 == -1)
      {
        result = (_QWORD *)_LogCategory_Initialize(&dword_10020FA58, 30);
        if (!(_DWORD)result)
          return result;
      }
      v3 = "Watch recovery cancelled already connected";
      return (_QWORD *)LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _watchHintingRecovery]_block_invoke", 30, v3);
    }
    if (dword_10020FA58 <= 30
      && (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 30)))
    {
      LogPrintF(&dword_10020FA58, "-[BTSmartRoutingDaemon _watchHintingRecovery]_block_invoke", 30, "More than 3 iCloud devices recover the watch for 120 seconds");
    }
    *(_BYTE *)(v2[4] + 1356) = 1;
    objc_msgSend((id)v2[4], "_update");
    *(_BYTE *)(v2[4] + 32) = 11;
    objc_msgSend((id)v2[4], "_nearbyInfoActivityChanged");
    return _objc_msgSend((id)v2[4], "_watchRecoveryStartTimer");
  }
  return result;
}

id sub_1000527F8(id result)
{
  uint64_t v1;
  id *v2;

  v1 = *((_QWORD *)result + 4);
  if (!*(_BYTE *)(v1 + 1233))
  {
    v2 = (id *)result;
    *(_BYTE *)(v1 + 1356) = 0;
    *(_BYTE *)(*((_QWORD *)result + 4) + 32) = 3;
    objc_msgSend(*((id *)result + 4), "_nearbyInfoActivityChanged");
    return objc_msgSend(v2[4], "_update");
  }
  return result;
}

void sub_1000542A0(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  id v6;

  v3 = a2;
  if (v3)
  {
    v6 = v3;
    if (dword_10020FA58 <= 90
      && (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 90)))
    {
      LogPrintF(&dword_10020FA58, "-[BTSmartRoutingPipe _pipeEnsureStarted]_block_invoke", 90, "### Pipe responder activate failed: %{error}", v6);
    }
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 48), "invalidate");
    v4 = *(_QWORD *)(a1 + 32);
    v5 = *(void **)(v4 + 48);
    *(_QWORD *)(v4 + 48) = 0;

    v3 = v6;
  }

}

id sub_100054348(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_pipeReceivedRouteRequest:options:responseHandler:", a2, a3, a4);
}

void sub_100054BFC(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 160), 8);
  _Unwind_Resume(a1);
}

void sub_100054C40(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;

  if (a2)
  {
    v7 = a2;
    v3 = NSErrorF(NSOSStatusErrorDomain, 4294960591, "### Pipe initiator activate failed: %{error}.", v7);
    v4 = objc_claimAutoreleasedReturnValue(v3);
    v5 = *(_QWORD *)(a1 + 32);
    v6 = *(void **)(v5 + 32);
    *(_QWORD *)(v5 + 32) = v4;

    objc_msgSend(*(id *)(a1 + 32), "_pipeConnectionComplete:andWxHeadset:isSender:", v7, *(_QWORD *)(a1 + 40), 1);
  }
}

void sub_100054CBC(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  CFTypeID TypeID;
  uint64_t TypedValue;
  void *v15;
  CFTypeID v16;
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  unsigned int v21;
  uint64_t v22;
  void *v23;
  double v24;
  id v25;

  v25 = a2;
  v7 = a3;
  v8 = a4;
  if (v8)
  {
    if (dword_10020FA58 <= 90
      && (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 90)))
    {
      LogPrintF(&dword_10020FA58, "-[BTSmartRoutingPipe _pipeSendRouteRequestToSFDevice:andWxHeadset:newPipe:connectionResult:completion:]_block_invoke", 90, "### Send route request failed: peer %@, %{error}", *(_QWORD *)(a1 + 32), v8);
    }
    objc_storeStrong((id *)(*(_QWORD *)(a1 + 40) + 32), a4);
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[BTSmartRoutingDaemon sharedBTSmartRoutingDaemon](BTSmartRoutingDaemon, "sharedBTSmartRoutingDaemon"));
    objc_msgSend(v9, "_setOtherTipiDeviceBTAddress:andName:sourceVersion:withResult:", 0, 0, 0, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 32));

    objc_msgSend(*(id *)(a1 + 40), "_pipeConnectionComplete:andWxHeadset:isSender:", *(_QWORD *)(*(_QWORD *)(a1 + 40) + 32), *(_QWORD *)(a1 + 48), 1);
  }
  else
  {
    if (dword_10020FA58 <= 30
      && (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 30)))
    {
      LogPrintF(&dword_10020FA58, "-[BTSmartRoutingPipe _pipeSendRouteRequestToSFDevice:andWxHeadset:newPipe:connectionResult:completion:]_block_invoke", 30, "Send route request tipi table update completed: peer %@, response %##@", *(_QWORD *)(a1 + 32), v25);
    }
    v10 = mach_absolute_time();
    v11 = UpTicksToMilliseconds(v10 - *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24));
    v12 = (void *)objc_claimAutoreleasedReturnValue(+[BTSmartRoutingDaemon sharedBTSmartRoutingDaemon](BTSmartRoutingDaemon, "sharedBTSmartRoutingDaemon"));
    objc_msgSend(v12, "_setPipeMessageStats:", v11);

    LODWORD(v11) = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24);
    TypeID = CFStringGetTypeID();
    if ((_DWORD)v11)
    {
      TypedValue = CFDictionaryGetTypedValue(v25, CFSTR("btAddress"), TypeID, 0);
      v15 = (void *)objc_claimAutoreleasedReturnValue(TypedValue);
      v16 = CFStringGetTypeID();
      v17 = CFDictionaryGetTypedValue(v25, CFSTR("btName"), v16, 0);
      v18 = (void *)objc_claimAutoreleasedReturnValue(v17);
      v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "objectForKey:", CFSTR("version")));
      if (v15 && v18)
      {
        v20 = (void *)objc_claimAutoreleasedReturnValue(+[BTSmartRoutingDaemon sharedBTSmartRoutingDaemon](BTSmartRoutingDaemon, "sharedBTSmartRoutingDaemon"));
        v21 = objc_msgSend(v20, "_isOnDemandConnectInProgress");

        if (v21)
        {
          if (dword_10020FA58 <= 30
            && (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 30)))
          {
            LogPrintF(&dword_10020FA58, "-[BTSmartRoutingPipe _pipeSendRouteRequestToSFDevice:andWxHeadset:newPipe:connectionResult:completion:]_block_invoke", 30, "OnDemand connect in progress, stop Tipi election");
          }
        }
        else
        {
          v23 = (void *)objc_claimAutoreleasedReturnValue(+[BTSmartRoutingDaemon sharedBTSmartRoutingDaemon](BTSmartRoutingDaemon, "sharedBTSmartRoutingDaemon"));
          objc_msgSend(v23, "_setOtherTipiDeviceBTAddress:andName:sourceVersion:withResult:", v15, v18, v19, 0);

          objc_msgSend(v19, "doubleValue");
          if (v24 < 1.2 || !v19)
          {
            if (dword_10020FA58 <= 30
              && (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 30)))
            {
              LogPrintF(&dword_10020FA58, "-[BTSmartRoutingPipe _pipeSendRouteRequestToSFDevice:andWxHeadset:newPipe:connectionResult:completion:]_block_invoke", 30, "Version %@ legacy behavior, clean up pipes now", v19);
            }
            objc_msgSend(*(id *)(a1 + 40), "_pipeConnectionComplete:andWxHeadset:isSender:", 0, *(_QWORD *)(a1 + 48), 1);
          }
        }
      }

    }
    else
    {
      v22 = CFDictionaryGetTypedValue(v25, CFSTR("connectionResultACK"), TypeID, 0);
      v15 = (void *)objc_claimAutoreleasedReturnValue(v22);
      v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "objectForKey:", CFSTR("version")));
      if (dword_10020FA58 <= 30
        && (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 30)))
      {
        LogPrintF(&dword_10020FA58, "-[BTSmartRoutingPipe _pipeSendRouteRequestToSFDevice:andWxHeadset:newPipe:connectionResult:completion:]_block_invoke", 30, "Version %@ ACK %@, cleaning up pipes", v18, v15);
      }
      objc_msgSend(*(id *)(a1 + 40), "_pipeConnectionComplete:andWxHeadset:isSender:", 0, *(_QWORD *)(a1 + 48), 1);
    }

  }
}

void sub_100055C88(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  (*(void (**)(uint64_t))(v1 + 16))(v1);
  _Block_object_dispose((const void *)(v2 - 176), 8);
  _Unwind_Resume(a1);
}

_QWORD *sub_100055CF4(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  int v4;

  v1 = result[8];
  v2 = *(_QWORD *)(*(_QWORD *)(v1 + 8) + 40);
  if (v2)
  {
    v3 = result;
    if (dword_10020FA58 <= 90)
    {
      if (dword_10020FA58 == -1)
      {
        v4 = _LogCategory_Initialize(&dword_10020FA58, 90);
        v1 = v3[8];
        if (!v4)
          return objc_msgSend((id)v3[6], "_pipeRequestResponse:error:", v3[7], *(_QWORD *)(*(_QWORD *)(v1 + 8) + 40));
        v2 = *(_QWORD *)(*(_QWORD *)(v1 + 8) + 40);
      }
      LogPrintF(&dword_10020FA58, "-[BTSmartRoutingPipe _pipeReceivedRouteRequest:options:responseHandler:]_block_invoke", 90, "### require_return_action! Route request failed: senderIDS %@, request %##@, error %{error}", v3[4], v3[5], v2);
      v1 = v3[8];
    }
    return objc_msgSend((id)v3[6], "_pipeRequestResponse:error:", v3[7], *(_QWORD *)(*(_QWORD *)(v1 + 8) + 40));
  }
  return result;
}

void sub_100055DB4(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  id v11;

  if (dword_10020FA58 <= 90 && (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 90)))
    LogPrintF(&dword_10020FA58, "-[BTSmartRoutingPipe _pipeReceivedRouteRequest:options:responseHandler:]_block_invoke_2", 90, "### Route request timeout: senderIDS %@, request %##@", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
  v2 = *(void **)(a1 + 48);
  v3 = *(_QWORD *)(a1 + 56);
  v4 = NSErrorF(NSOSStatusErrorDomain, 4294960574, "Request timed out");
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  objc_msgSend(v2, "_pipeRequestResponse:error:", v3, v5);

  v6 = *(void **)(a1 + 64);
  v11 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 72), "btAddressData"));
  v7 = CUPrintNSDataAddress(v11);
  v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
  v9 = NSErrorF(NSOSStatusErrorDomain, 4294960574, "Request timed out");
  v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
  objc_msgSend(v6, "_updateOtherTipiDevice:otherAddress:otherName:otherVersion:withResult:", v8, 0, 0, 0, v10);

}

void sub_100055EE0(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  id v9;

  v9 = a2;
  if (v9)
  {
    if (dword_10020FA58 <= 90
      && (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 90)))
    {
      LogPrintF(&dword_10020FA58, "-[BTSmartRoutingPipe _pipeReceivedRouteRequest:options:responseHandler:]_block_invoke_3", 90, "### Route request update Tipi table failed: Wx %@, addresses %##@, %{error}", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), v9);
    }
    v3 = *(void **)(a1 + 48);
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "btAddressData"));
    v5 = CUPrintNSDataAddress(v4);
    v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
    v7 = NSErrorF(NSOSStatusErrorDomain, 4294960591, "### Route request update Tipi table failed: Wx %@, addresses %##@, %{error}");
    v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    objc_msgSend(v3, "_updateOtherTipiDevice:otherAddress:otherName:otherVersion:withResult:", v6, 0, 0, 0, v8);

    objc_msgSend(*(id *)(a1 + 64), "_pipeRequestResponse:error:", *(_QWORD *)(a1 + 72), v9);
  }
  else if (dword_10020FA58 <= 30
         && (dword_10020FA58 != -1 || _LogCategory_Initialize(&dword_10020FA58, 30)))
  {
    LogPrintF(&dword_10020FA58, "-[BTSmartRoutingPipe _pipeReceivedRouteRequest:options:responseHandler:]_block_invoke_3", 30, "Route request Tipi table update sent (waiting for async response)");
  }

}

void sub_1000568F0(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  NSObject *v4;
  void *v5;
  void *v6;
  void *v7;
  _QWORD v8[5];
  const __CFString *v9;
  void *v10;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "block"));

  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 32);
    v4 = *(NSObject **)(v3 + 32);
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_100056A2C;
    v8[3] = &unk_1001E20E8;
    v8[4] = v3;
    dispatch_async(v4, v8);
  }
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
  v9 = CFSTR("IsNetworkAvailable");
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", objc_msgSend(*(id *)(a1 + 32), "cachedIsNetworkUp")));
  v10 = v6;
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v10, &v9, 1));
  objc_msgSend(v5, "postNotificationName:object:userInfo:", CFSTR("com.apple.bluetooth.services.BTNetworkMonitor.networkChanged"), 0, v7);

}

void sub_100056A2C(uint64_t a1)
{
  void (**v2)(id, id);

  v2 = (void (**)(id, id))objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "block"));
  v2[2](v2, objc_msgSend(*(id *)(a1 + 32), "cachedIsNetworkUp"));

}

void sub_100056B2C(uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "evaluator"));
  v3 = *(void **)(a1 + 40);

  if (v2 == v3)
    _objc_msgSend(*(id *)(a1 + 32), "setCachedIsNetworkUp:", objc_msgSend(*(id *)(a1 + 32), "isNetworkUp"));
}

id sub_100056CC4(uint64_t a1)
{
  if (dword_10020FAC8 <= 30 && (dword_10020FAC8 != -1 || _LogCategory_Initialize(&dword_10020FAC8, 30)))
    LogPrintF(&dword_10020FAC8, "-[BTShareAudioService activate]_block_invoke", 30, "Activate\n");
  return _objc_msgSend(*(id *)(a1 + 32), "_sfServiceStart");
}

_QWORD *sub_100056D8C(_QWORD *result)
{
  _QWORD *v1;

  if (!*(_BYTE *)(result[4] + 24))
  {
    v1 = result;
    if (dword_10020FAC8 <= 30
      && (dword_10020FAC8 != -1 || _LogCategory_Initialize(&dword_10020FAC8, 30)))
    {
      LogPrintF(&dword_10020FAC8, "-[BTShareAudioService invalidate]_block_invoke", 30, "Invalidate\n");
    }
    *(_BYTE *)(v1[4] + 24) = 1;
    return objc_msgSend((id)v1[4], "_invalidate");
  }
  return result;
}

_QWORD *sub_100057070(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 32);
  result = *(_QWORD **)(a1 + 40);
  if (v3 == result[6])
    return _objc_msgSend(result, "_handleSessionStarted:", a2);
  return result;
}

_QWORD *sub_10005708C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;
  uint64_t v4;

  v4 = *(_QWORD *)(a1 + 32);
  result = *(_QWORD **)(a1 + 40);
  if (v4 == result[6])
    return objc_msgSend(result, "_handleSessionEnded:error:", a2, a3);
  return result;
}

void sub_1000570AC(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  int v7;
  id v8;

  v3 = a2;
  v4 = v3;
  if (*(_QWORD *)(a1 + 32) == *(_QWORD *)(*(_QWORD *)(a1 + 40) + 48))
  {
    if (v3)
    {
      v8 = v3;
      if (dword_10020FAC8 <= 90
        && (dword_10020FAC8 != -1 || _LogCategory_Initialize(&dword_10020FAC8, 90)))
      {
        LogPrintF(&dword_10020FAC8, "-[BTShareAudioService _sfServiceStart]_block_invoke_3", 90, "### SFService start failed: %{error}\n", v8);
      }
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 48), "invalidate");
      v5 = *(_QWORD *)(a1 + 40);
      v6 = *(void **)(v5 + 48);
      *(_QWORD *)(v5 + 48) = 0;

      goto LABEL_11;
    }
    if (dword_10020FAC8 <= 30)
    {
      v8 = 0;
      if (dword_10020FAC8 != -1 || (v7 = _LogCategory_Initialize(&dword_10020FAC8, 30), v4 = 0, v7))
      {
        LogPrintF(&dword_10020FAC8, "-[BTShareAudioService _sfServiceStart]_block_invoke_3", 30, "SFService started\n");
LABEL_11:
        v4 = v8;
      }
    }
  }

}

id sub_1000573C0(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_handleShareAudioRequest:responseHandler:");
}

void sub_1000573C8(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  void *v10;
  uint64_t v11;
  void *v12;
  id v13;

  v13 = a2;
  v7 = a3;
  v8 = a4;
  v9 = objc_retainBlock(*(id *)(*(_QWORD *)(a1 + 32) + 72));
  v10 = v9;
  if (v9)
  {
    (*((void (**)(id, id, id, id))v9 + 2))(v9, v13, v7, v8);
  }
  else
  {
    if (dword_10020FAC8 <= 90
      && (dword_10020FAC8 != -1 || _LogCategory_Initialize(&dword_10020FAC8, 90)))
    {
      LogPrintF(&dword_10020FAC8, "-[BTShareAudioService _handleSessionStarted:]_block_invoke_2", 90, "### Ignoring ShareAudio config request: no handler");
    }
    v11 = BTErrorF(4294960582, "No config handler");
    v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
    (*((void (**)(id, void *, _QWORD, _QWORD))v8 + 2))(v8, v12, 0, 0);

  }
}

void sub_1000574D8(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  void *v10;
  uint64_t v11;
  void *v12;
  id v13;

  v13 = a2;
  v7 = a3;
  v8 = a4;
  v9 = objc_retainBlock(*(id *)(*(_QWORD *)(a1 + 32) + 80));
  v10 = v9;
  if (v9)
  {
    (*((void (**)(id, id, id, id))v9 + 2))(v9, v13, v7, v8);
  }
  else
  {
    if (dword_10020FAC8 <= 90
      && (dword_10020FAC8 != -1 || _LogCategory_Initialize(&dword_10020FAC8, 90)))
    {
      LogPrintF(&dword_10020FAC8, "-[BTShareAudioService _handleSessionStarted:]_block_invoke_3", 90, "### Ignoring ShareAudio connect request: no handler");
    }
    v11 = BTErrorF(4294960582, "No connect handler");
    v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
    (*((void (**)(id, void *, _QWORD, _QWORD))v8 + 2))(v8, v12, 0, 0);

  }
}

void sub_1000579D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  (*(void (**)(uint64_t))(v9 + 16))(v9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100057A08(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_100057A18(uint64_t a1)
{

}

uint64_t sub_100057A20(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 40);
  if (v1)
  {
    v2 = result;
    if (dword_10020FAC8 <= 90)
    {
      if (dword_10020FAC8 == -1)
      {
        if (!_LogCategory_Initialize(&dword_10020FAC8, 90))
          return (*(uint64_t (**)(void))(*(_QWORD *)(v2 + 32) + 16))();
        v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 40) + 8) + 40);
      }
      LogPrintF(&dword_10020FAC8, "-[BTShareAudioService _handleShareAudioRequest:responseHandler:]_block_invoke", 90, "### ShareAudio request failed: %{error}\n", v1);
    }
    return (*(uint64_t (**)(void))(*(_QWORD *)(v2 + 32) + 16))();
  }
  return result;
}

void sub_100057D54(uint64_t a1, void *a2)
{
  id v3;
  id v4;

  v3 = a2;
  if (*(_QWORD *)(a1 + 32) == *(_QWORD *)(*(_QWORD *)(a1 + 40) + 96))
  {
    v4 = v3;
    if (v3
      && dword_10020FAC8 <= 90
      && (dword_10020FAC8 != -1 || _LogCategory_Initialize(&dword_10020FAC8, 90)))
    {
      LogPrintF(&dword_10020FAC8, "-[BTShareAudioService _handleShareAudioPairingCompleted:error:]_block_invoke", 90, "### Add proof failed: %{error}\n", v4);
    }
    objc_msgSend(*(id *)(a1 + 48), "setObject:forKeyedSubscript:", *(_QWORD *)(*(_QWORD *)(a1 + 40) + 16), CFSTR("btAd"));
    if (dword_10020FAC8 <= 30
      && (dword_10020FAC8 != -1 || _LogCategory_Initialize(&dword_10020FAC8, 30)))
    {
      LogPrintF(&dword_10020FAC8, "-[BTShareAudioService _handleShareAudioPairingCompleted:error:]_block_invoke", 30, "Configure device completed: Response: %##.16@\n", *(_QWORD *)(a1 + 48));
    }
    (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
    v3 = v4;
  }

}

unint64_t sub_100058080(void *a1)
{
  id v1;
  void *v2;
  unint64_t v3;
  const char *v5;
  uint64_t v7;
  int v8;
  __int16 v9;
  uint64_t v10;

  v1 = a1;
  v2 = v1;
  if (!v1 || (unint64_t)objc_msgSend(v1, "length") > 0x18)
    goto LABEL_3;
  v5 = (const char *)objc_msgSend(objc_retainAutorelease(v2), "UTF8String");
  v10 = 0;
  v9 = 0;
  v8 = 0;
  if (sscanf(v5, "%hhX:%hhX:%hhX:%hhX:%hhX:%hhX", &v8, (char *)&v8 + 1, (char *)&v8 + 2, (char *)&v8 + 3, &v9, (char *)&v9 + 1) == 6)
  {
    v3 = ((unint64_t)v8 << 40) | ((unint64_t)BYTE1(v8) << 32) | ((unint64_t)BYTE2(v8) << 24) | ((unint64_t)HIBYTE(v8) << 16) | ((unint64_t)v9 << 8) | HIBYTE(v9);
    goto LABEL_4;
  }
  if (sscanf(v5, "%s %hhX:%hhX:%hhX:%hhX:%hhX:%hhX", &v10, &v8, (char *)&v8 + 1, (char *)&v8 + 2, (char *)&v8 + 3, &v9, (char *)&v9 + 1) == 7)
  {
    v7 = (_DWORD)v10 != 1818391888 || *(_DWORD *)((char *)&v10 + 3) != 6515052;
    v3 = (v7 << 48) | ((unint64_t)v8 << 40) | ((unint64_t)BYTE1(v8) << 32) | ((unint64_t)BYTE2(v8) << 24) | ((unint64_t)HIBYTE(v8) << 16) | ((unint64_t)v9 << 8) | HIBYTE(v9);
  }
  else
  {
LABEL_3:
    v3 = 0;
  }
LABEL_4:

  return v3;
}

void sub_10005825C(id a1)
{
  CBIDSManager *v1;
  void *v2;

  v1 = objc_alloc_init(CBIDSManager);
  v2 = (void *)qword_1002125B0;
  qword_1002125B0 = (uint64_t)v1;

}

void sub_100058434(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100058450(uint64_t a1)
{
  os_log_t v2;
  NSObject *v3;
  id WeakRetained;
  _DWORD v5[2];

  v2 = sub_1000681B8("CloudPairing");
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v5[0] = 67109120;
    v5[1] = +[BTSystemConfiguration isBuddyComplete](BTSystemConfiguration, "isBuddyComplete");
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "IDS Buddy State Callback : %i", (uint8_t *)v5, 8u);
  }

  if (+[BTSystemConfiguration isBuddyComplete](BTSystemConfiguration, "isBuddyComplete"))
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
    objc_msgSend(WeakRetained, "checkFirstUnlockForIDS");

  }
}

void sub_1000586D0(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 48));
  _Unwind_Resume(a1);
}

id sub_1000586F4(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "initializeIDS");
}

void sub_1000586FC(uint64_t a1)
{
  os_log_t v2;
  NSObject *v3;
  NSObject *v4;
  _QWORD block[4];
  id v6;
  uint8_t buf[4];
  unsigned int v8;

  v2 = sub_1000681B8("CloudPairing");
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    v8 = +[BTSystemConfiguration isFirstUnlocked](BTSystemConfiguration, "isFirstUnlocked");
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "First Unlock Callback: %i", buf, 8u);
  }

  v4 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "cloudPairingQueue"));
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100058820;
  block[3] = &unk_1001E3F50;
  objc_copyWeak(&v6, (id *)(a1 + 40));
  dispatch_async(v4, block);

  objc_destroyWeak(&v6);
}

void sub_100058820(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "initializeIDS");

}

void sub_100058B94(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  uint64_t v8;
  id v9;
  id v10;
  _QWORD block[4];
  id v12;
  uint64_t v13;
  id v14;

  v5 = a2;
  v6 = a3;
  v7 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "cloudPairingQueue"));
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100058C54;
  block[3] = &unk_1001E2570;
  v8 = *(_QWORD *)(a1 + 32);
  v12 = v6;
  v13 = v8;
  v14 = v5;
  v9 = v5;
  v10 = v6;
  dispatch_async(v7, block);

}

void sub_100058C54(uint64_t a1)
{
  uint64_t *v2;
  os_log_t v3;
  NSObject *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  os_log_t v10;
  NSObject *v11;
  unsigned int v12;
  os_log_t v13;
  NSObject *v14;
  void *v15;
  unsigned int v16;
  os_log_t v17;
  NSObject *v18;
  NSObject *v19;
  void *v20;
  void *v21;
  void *v22;
  id v23;
  id v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  os_log_t v35;
  NSObject *v36;
  void *v37;
  void *v38;
  void *v39;
  NSObject *v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  os_log_t v44;
  NSObject *v45;
  NSObject *v46;
  os_log_t v47;
  NSObject *v48;
  uint64_t v49;
  _QWORD v50[2];
  uint8_t buf[4];
  void *v52;

  v2 = (uint64_t *)(a1 + 32);
  if (*(_QWORD *)(a1 + 32))
  {
    v3 = sub_1000681B8("CloudPairing");
    v4 = objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      sub_10016BAFC(v2, v4, v5);

    objc_msgSend(*(id *)(a1 + 40), "retryIDSSetup");
  }
  else
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "objectForKey:", CFSTR("kCheckInVersion")));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "objectForKeyedSubscript:", CFSTR("kPublicAddress")));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "objectForKeyedSubscript:", CFSTR("kCachedLEDevices")));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "objectForKeyedSubscript:", CFSTR("kSupportsVirtualAddress")));
    objc_msgSend(*(id *)(a1 + 40), "setSupportsVirtualAddress:", objc_msgSend(v9, "BOOLValue"));

    v10 = sub_1000681B8("CloudPairing");
    v11 = objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      v12 = objc_msgSend(*(id *)(a1 + 40), "supportsVirtualAddress");
      *(_DWORD *)buf = 67109120;
      LODWORD(v52) = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "MUC - supportsVirtualAddress %d", buf, 8u);
    }

    if (v7)
    {
      objc_msgSend(*(id *)(a1 + 40), "setPublicAddress:", v7);
      v13 = sub_1000681B8("CloudPairing");
      v14 = objc_claimAutoreleasedReturnValue(v13);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "publicAddress"));
        *(_DWORD *)buf = 138477827;
        v52 = v15;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Received Public Address: %{private}@", buf, 0xCu);

      }
      v16 = objc_msgSend(v6, "isEqual:", &off_1001F45D8);
      v17 = sub_1000681B8("CloudPairing");
      v18 = objc_claimAutoreleasedReturnValue(v17);
      v19 = v18;
      if (v16)
      {
        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "BTCP XPC Version match!- Starting IDS Service Setup", buf, 2u);
        }

        v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
        objc_msgSend(*(id *)(a1 + 40), "setCPAddressMapping:", v20);

        v21 = (void *)objc_claimAutoreleasedReturnValue(+[CBPreferencesManager readUserPreference:](CBPreferencesManager, "readUserPreference:", CFSTR("AddressMapping")));
        if (v21)
        {
          v22 = (void *)objc_claimAutoreleasedReturnValue(+[CBPreferencesManager readUserPreference:](CBPreferencesManager, "readUserPreference:", CFSTR("AddressMapping")));
          v23 = objc_msgSend(v22, "mutableCopy");
          objc_msgSend(*(id *)(a1 + 40), "setCPAddressMapping:", v23);

        }
        v24 = objc_msgSend(objc_alloc((Class)IDSService), "initWithService:", CFSTR("com.apple.private.alloy.icloudpairing"));
        objc_msgSend(*(id *)(a1 + 40), "setService:", v24);

        v25 = *(void **)(a1 + 40);
        v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "service"));
        v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v26, "accounts"));
        objc_msgSend(v25, "updateActiveAccount:", v27);

        v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "service"));
        v29 = *(void **)(a1 + 40);
        v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v29, "cloudPairingQueue"));
        objc_msgSend(v28, "addDelegate:queue:", v29, v30);

        v31 = *(void **)(a1 + 40);
        v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v31, "service"));
        v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v32, "devices"));
        v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v31, "filteredDevicesForIDSDevices:", v33));
        objc_msgSend(*(id *)(a1 + 40), "setAssociatedDevices:", v34);

        v35 = sub_1000681B8("CloudPairing");
        v36 = objc_claimAutoreleasedReturnValue(v35);
        if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
        {
          v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "associatedDevices"));
          *(_DWORD *)buf = 138412290;
          v52 = v37;
          _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, "MUC - associatedDevice %@", buf, 0xCu);

        }
        objc_msgSend(*(id *)(a1 + 40), "setIsReady:", 1);
        v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "service"));
        v19 = objc_claimAutoreleasedReturnValue(objc_msgSend(v38, "devices"));

        objc_msgSend(*(id *)(a1 + 40), "setTotalCloudDeviceCount:", (char *)-[NSObject count](v19, "count") + 1);
        v39 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
        v40 = &__NSArray0__struct;
        if (v19)
          v40 = v19;
        v41 = objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", objc_msgSend(*(id *)(a1 + 40), "totalCloudDeviceCount", CFSTR("IDSDevices"), CFSTR("TotalIDSDevices"), v40)));
        v50[1] = v41;
        v42 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v50, &v49, 2));
        objc_msgSend(v39, "postNotificationName:object:userInfo:", CFSTR("BTTotalIDSDeviceCountChanged"), 0, v42);

        v43 = objc_opt_class(NSDictionary);
        LOBYTE(v41) = objc_opt_isKindOfClass(v8, v43);
        v44 = sub_1000681B8("CloudPairing");
        v45 = objc_claimAutoreleasedReturnValue(v44);
        v46 = v45;
        if ((v41 & 1) != 0)
        {
          if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138412290;
            v52 = v8;
            _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEFAULT, "MUC - Validate cloud pairings from bluetoothd: %@", buf, 0xCu);
          }

          objc_msgSend(*(id *)(a1 + 40), "validateCloudPairing:", v8);
        }
        else
        {
          if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
            sub_10016BA20();

        }
      }
      else if (os_log_type_enabled(v18, OS_LOG_TYPE_FAULT))
      {
        sub_10016BA84();
      }

    }
    else
    {
      v47 = sub_1000681B8("CloudPairing");
      v48 = objc_claimAutoreleasedReturnValue(v47);
      if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
        sub_10016B9F4();

      objc_msgSend(*(id *)(a1 + 40), "retryIDSSetup");
    }

  }
}

id sub_100059320(uint64_t a1)
{
  os_log_t v2;
  NSObject *v3;
  uint8_t v5[16];

  v2 = sub_1000681B8("CloudPairing");
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Retrying initializeIDS", v5, 2u);
  }

  return objc_msgSend(*(id *)(a1 + 32), "initializeIDS");
}

void sub_100059A18(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  unsigned int v7;
  void *v8;
  os_log_t v9;
  NSObject *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  int v16;
  void *v17;
  __int16 v18;
  void *v19;
  __int16 v20;
  uint64_t v21;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "idsDevice"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "uniqueID"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "idsDevice"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "uniqueID"));
  v7 = objc_msgSend(v4, "isEqualToString:", v6);

  if (v7)
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "idsDevice"));
    objc_msgSend(v8, "setNSUUID:", 0);

    objc_msgSend(*(id *)(a1 + 32), "setState:", 0);
    v9 = sub_1000681B8("CloudPairing");
    v10 = objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "idsDevice"));
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "nsuuid"));
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "idsDevice"));
      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "uniqueID"));
      v15 = *(_QWORD *)(a1 + 40);
      v16 = 138412802;
      v17 = v12;
      v18 = 2112;
      v19 = v14;
      v20 = 2112;
      v21 = v15;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Removing concurrent BT-UUID %@ from previously cloud paired device %@ as this device is cloud paired with %@", (uint8_t *)&v16, 0x20u);

    }
    objc_msgSend(*(id *)(a1 + 48), "removeObject:", *(_QWORD *)(a1 + 32));
  }
}

void sub_100059D60(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  NSObject *v6;
  id v7;
  uint64_t v8;
  void *v9;
  _QWORD block[4];
  id v11;
  uint64_t v12;
  id v13;

  v5 = a2;
  if (a3)
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  }
  else
  {
    v6 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "cloudPairingQueue"));
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100059E24;
    block[3] = &unk_1001E22B0;
    v7 = v5;
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(void **)(a1 + 40);
    v11 = v7;
    v12 = v8;
    v13 = v9;
    dispatch_async(v6, block);

  }
}

void sub_100059E24(uint64_t a1)
{
  void *v2;
  void *v3;
  os_log_t v4;
  NSObject *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  NSErrorUserInfoKey v11;
  const __CFString *v12;
  uint8_t buf[4];
  uint64_t v14;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("kPublicAddress")));

  if (v2)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("kPublicAddress")));
    objc_msgSend(*(id *)(a1 + 40), "setPublicAddress:", v3);

  }
  v4 = sub_1000681B8("CloudPairing");
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v6 = *(_QWORD *)(a1 + 32);
    *(_DWORD *)buf = 138412290;
    v14 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Reply for public address: %@", buf, 0xCu);
  }

  if (*(_QWORD *)(a1 + 48))
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "publicAddress"));

    v8 = *(_QWORD *)(a1 + 48);
    if (v7)
    {
      (*(void (**)(uint64_t, _QWORD))(v8 + 16))(v8, 0);
    }
    else
    {
      v11 = NSLocalizedFailureErrorKey;
      v12 = CFSTR("Public Address Unavailable");
      v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v12, &v11, 1));
      v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("BTIDSErrorDomain"), 0, v9));
      (*(void (**)(uint64_t, void *))(v8 + 16))(v8, v10);

    }
  }
}

void sub_10005A068(uint64_t a1)
{
  void *v2;
  id v3;
  uint64_t v4;
  _QWORD v5[4];
  id v6;
  uint64_t v7;

  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10005A0DC;
  v5[3] = &unk_1001E2410;
  v2 = *(void **)(a1 + 32);
  v3 = *(id *)(a1 + 40);
  v4 = *(_QWORD *)(a1 + 32);
  v6 = v3;
  v7 = v4;
  objc_msgSend(v2, "fetchPublicAddressWithCompletion:", v5);

}

void sub_10005A0DC(uint64_t a1, void *a2)
{
  id v3;
  os_log_t v4;
  NSObject *v5;
  NSObject *v6;
  uint64_t v7;
  NSObject *v8;
  id v9;
  int8x16_t v10;
  _QWORD block[4];
  int8x16_t v12;
  uint8_t buf[4];
  uint64_t v14;

  v3 = a2;
  v4 = sub_1000681B8("CloudPairing");
  v5 = objc_claimAutoreleasedReturnValue(v4);
  v6 = v5;
  if (v3)
  {
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      sub_10016BB68();

  }
  else
  {
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      v7 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)buf = 138412290;
      v14 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "bluetoothd existing cloud pairings: %@", buf, 0xCu);
    }

    v8 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "cloudPairingQueue"));
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10005A234;
    block[3] = &unk_1001E23E8;
    v10 = *(int8x16_t *)(a1 + 32);
    v9 = (id)v10.i64[0];
    v12 = vextq_s8(v10, v10, 8uLL);
    dispatch_async(v8, block);

  }
}

void sub_10005A234(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  id v3;

  v1 = *(void **)(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "associatedDevices"));
  objc_msgSend(v1, "updateCloudPairings:newDevices:", v2, v3);

}

id sub_10005B2A4(uint64_t a1, uint64_t a2, void *a3)
{
  void *v3;
  void *v4;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  v6 = a3;
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "idsDevice"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "nsuuid"));
  if (v8)
  {
    v9 = *(void **)(a1 + 40);
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "idsDevice"));
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "uniqueID"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "publicAddressForIDSDevice:", v4));
    if (v10)
    {
      v11 = 0;
LABEL_6:

      goto LABEL_7;
    }
  }
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "idsDevice"));
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "uniqueID"));
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "idsDevice"));
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "uniqueID"));
  v11 = objc_msgSend(v13, "isEqualToString:", v15);

  if (v8)
  {
    v10 = 0;
    goto LABEL_6;
  }
LABEL_7:

  return v11;
}

id sub_10005B3BC(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  void *v5;
  id v6;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "idsDevice"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "uniqueID"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectAtIndexedSubscript:", *(_QWORD *)(a1 + 40)));
  v6 = objc_msgSend(v4, "isEqualToString:", v5);

  return v6;
}

void sub_10005C918(uint64_t a1, void *a2)
{
  id v3;
  os_log_t v4;
  NSObject *v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  void *v11;
  void *v12;
  id v13;
  id v14;
  void *v15;
  int v16;
  os_log_t v17;
  NSObject *v18;
  id v19;
  id v20;
  const char *v21;
  void *v22;
  int v23;
  os_log_t v24;
  id v25;
  os_log_t v26;
  id v27;
  os_log_t v28;
  id v29;
  void *v30;
  id v31;
  uint64_t v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  unsigned int v39;
  os_log_t v40;
  NSObject *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  void *v53;
  id v54;
  void *v55;
  id v56;
  void *v57;
  os_log_t v58;
  id v59;
  id v60;
  id v61;
  uint64_t v62;
  id v63;
  void *v64;
  id v65;
  NSObject *v66;
  id v67;
  id v68;
  void *v69;
  id v70;
  void *v71;
  id v72;
  uint64_t v73;
  id obja;
  id obj;
  void *v76;
  id v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  uint8_t v82[128];
  uint8_t buf[4];
  id v84;
  __int16 v85;
  id v86;
  __int16 v87;
  id v88;
  __int16 v89;
  id v90;
  __int16 v91;
  id v92;
  __int16 v93;
  id v94;
  __int16 v95;
  id v96;
  __int16 v97;
  id v98;

  v3 = a2;
  v4 = sub_1000681B8("CloudPairing");
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v76 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "nsuuid"));
    obja = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v76, "UUIDString")));
    v67 = objc_msgSend(obja, "UTF8String");
    v72 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "uniqueID")));
    v65 = objc_msgSend(v72, "UTF8String");
    v70 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "modelIdentifier")));
    v63 = objc_msgSend(v70, "UTF8String");
    v68 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "productName")));
    v61 = objc_msgSend(v68, "UTF8String");
    v6 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "productVersion")));
    v60 = objc_msgSend(v6, "UTF8String");
    v7 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "productBuildVersion")));
    v8 = objc_msgSend(v7, "UTF8String");
    v9 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "name")));
    v10 = objc_msgSend(v9, "UTF8String");
    v11 = *(void **)(a1 + 32);
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "uniqueID"));
    v13 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "publicAddressForIDSDevice:", v12)));
    v14 = objc_msgSend(v13, "UTF8String");
    *(_DWORD *)buf = 136316930;
    v84 = v67;
    v85 = 2080;
    v86 = v65;
    v87 = 2080;
    v88 = v63;
    v89 = 2080;
    v90 = v61;
    v91 = 2080;
    v92 = v60;
    v93 = 2080;
    v94 = v8;
    v95 = 2080;
    v96 = v10;
    v97 = 2080;
    v98 = v14;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "BT:(%s) IDS:%s model:%s prodName:%s prodVers:%s buildVers:%s Name:%s address:[%s]", buf, 0x52u);

  }
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "modelIdentifier"));
  if (objc_msgSend(v15, "localizedStandardContainsString:", CFSTR("Phone")))
  {
    v16 = *(unsigned __int8 *)(a1 + 48);

    if (v16)
    {
      v17 = sub_1000681B8("CloudPairing");
      v18 = objc_claimAutoreleasedReturnValue(v17);
      if (!os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
        goto LABEL_20;
      v19 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "cpDescription")));
      v20 = objc_msgSend(v19, "UTF8String");
      *(_DWORD *)buf = 136380675;
      v84 = v20;
      v21 = "Ignoring IDS device %{private}s as it is a phone and we are a watch and we cant allow that";
LABEL_19:
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, v21, buf, 0xCu);

      goto LABEL_20;
    }
  }
  else
  {

  }
  v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "modelIdentifier"));
  if (objc_msgSend(v22, "localizedStandardContainsString:", CFSTR("Watch")))
  {
    v23 = *(unsigned __int8 *)(a1 + 49);

    if (v23)
    {
      v24 = sub_1000681B8("CloudPairing");
      v18 = objc_claimAutoreleasedReturnValue(v24);
      if (!os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
        goto LABEL_20;
      v19 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "cpDescription")));
      v25 = objc_msgSend(v19, "UTF8String");
      *(_DWORD *)buf = 136380675;
      v84 = v25;
      v21 = "Ignoring IDS device %{private}s as it is a watch and we are a phone and we cant allow that.";
      goto LABEL_19;
    }
  }
  else
  {

  }
  if ((objc_msgSend(v3, "supportsiCloudPairing") & 1) == 0)
  {
    v28 = sub_1000681B8("CloudPairing");
    v18 = objc_claimAutoreleasedReturnValue(v28);
    if (!os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      goto LABEL_20;
    v19 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "cpDescription")));
    v29 = objc_msgSend(v19, "UTF8String");
    *(_DWORD *)buf = 136380675;
    v84 = v29;
    v21 = "Ignoring IDS device %{private}s as it doesn't support iCloud pairing with us";
    goto LABEL_19;
  }
  if (objc_msgSend(v3, "isDefaultPairedDevice"))
  {
    v26 = sub_1000681B8("CloudPairing");
    v18 = objc_claimAutoreleasedReturnValue(v26);
    if (!os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      goto LABEL_20;
    v19 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "cpDescription")));
    v27 = objc_msgSend(v19, "UTF8String");
    *(_DWORD *)buf = 136380675;
    v84 = v27;
    v21 = "Ignoring IDS device %{private}s as it is a 'default paired' device";
    goto LABEL_19;
  }
  v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "uniqueID"));
  v31 = objc_msgSend(v30, "length");

  if (!v31)
  {
    v58 = sub_1000681B8("CloudPairing");
    v18 = objc_claimAutoreleasedReturnValue(v58);
    if (!os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      goto LABEL_20;
    v19 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "cpDescription")));
    v59 = objc_msgSend(v19, "UTF8String");
    *(_DWORD *)buf = 136380675;
    v84 = v59;
    v21 = "Ignoring IDS device %{private}s as it has no uniqueID set";
    goto LABEL_19;
  }
  v64 = v3;
  v18 = objc_claimAutoreleasedReturnValue(+[CloudDevice deviceWithIDSDevice:](CloudDevice, "deviceWithIDSDevice:", v3));
  v78 = 0u;
  v79 = 0u;
  v80 = 0u;
  v81 = 0u;
  v62 = a1;
  obj = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "associatedDevices"));
  v77 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v78, v82, 16);
  if (!v77)
    goto LABEL_40;
  v32 = *(_QWORD *)v79;
  v73 = *(_QWORD *)v79;
  v66 = v18;
  do
  {
    v33 = 0;
    do
    {
      if (*(_QWORD *)v79 != v32)
        objc_enumerationMutation(obj);
      v34 = *(void **)(*((_QWORD *)&v78 + 1) + 8 * (_QWORD)v33);
      v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v34, "idsDevice"));
      v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v35, "uniqueID"));
      v37 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject idsDevice](v18, "idsDevice"));
      v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v37, "uniqueID"));
      v39 = objc_msgSend(v36, "isEqualToString:", v38);

      if (v39)
      {
        v40 = sub_1000681B8("CloudPairing");
        v41 = objc_claimAutoreleasedReturnValue(v40);
        if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
        {
          v71 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject idsDevice](v18, "idsDevice"));
          v42 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v71, "uniqueID"));
          v69 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject idsDevice](v18, "idsDevice"));
          v43 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v69, "nsuuid"));
          v44 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v34, "idsDevice"));
          v45 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v44, "uniqueID"));
          v46 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v34, "idsDevice"));
          v47 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v46, "nsuuid"));
          v48 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v34, "stateString"));
          *(_DWORD *)buf = 138413314;
          v84 = v42;
          v85 = 2112;
          v86 = v43;
          v87 = 2112;
          v88 = v45;
          v89 = 2112;
          v90 = v47;
          v91 = 2112;
          v92 = v48;
          _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, "Newly created device: %@ (BT: %@) already associated with device: %@ (BT: %@, state: %@)", buf, 0x34u);

          v18 = v66;
        }

        v49 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject idsDevice](v18, "idsDevice"));
        v50 = objc_claimAutoreleasedReturnValue(objc_msgSend(v49, "nsuuid"));
        if (v50)
        {
          v51 = (void *)v50;
          v32 = v73;
          goto LABEL_32;
        }
        v51 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v34, "idsDevice"));
        v52 = objc_claimAutoreleasedReturnValue(objc_msgSend(v51, "nsuuid"));
        v32 = v73;
        if (v52)
        {
          v53 = (void *)v52;
          v54 = objc_msgSend(v34, "state");

          if (v54)
          {
            v49 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v34, "idsDevice"));
            v51 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v49, "nsuuid"));
            v55 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject idsDevice](v18, "idsDevice"));
            objc_msgSend(v55, "setNSUUID:", v51);

            goto LABEL_32;
          }
        }
        else
        {
LABEL_32:

        }
        -[NSObject setState:](v18, "setState:", objc_msgSend(v34, "state"));
        -[NSObject setIsConnected:](v18, "setIsConnected:", objc_msgSend(v34, "isConnected"));
      }
      v33 = (char *)v33 + 1;
    }
    while (v77 != v33);
    v56 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v78, v82, 16);
    v77 = v56;
  }
  while (v56);
LABEL_40:

  v3 = v64;
  v57 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v64, "nsuuid"));

  if (v57)
    -[NSObject setState:](v18, "setState:", 6);
  objc_msgSend(*(id *)(v62 + 40), "addObject:", v18);
LABEL_20:

}

id sub_10005D388(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  void *v5;
  id v6;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "idsDevice"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "uniqueID"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "uniqueID"));
  v6 = objc_msgSend(v4, "isEqualToString:", v5);

  return v6;
}

void sub_10005D814(uint64_t a1)
{
  dispatch_time_t v2;
  void *v3;
  unsigned __int8 v4;
  os_log_t v5;
  NSObject *v6;
  _BOOL4 v7;
  __objc2_class **v8;
  void *v9;
  uint8_t v10[8];
  _QWORD block[5];

  if ((objc_msgSend(*(id *)(a1 + 32), "processingIDSPush") & 1) == 0)
  {
    objc_msgSend(*(id *)(a1 + 32), "setProcessingIDSPush:", 1);
    v2 = dispatch_time(0, 20000000000);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10005D974;
    block[3] = &unk_1001E20E8;
    block[4] = *(_QWORD *)(a1 + 32);
    dispatch_after(v2, (dispatch_queue_t)&_dispatch_main_q, block);
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[CloudXPCService sharedInstance](CloudXPCService, "sharedInstance"));
    v4 = objc_msgSend(v3, "manateeZoneUpgraded");

    v5 = sub_1000681B8("CloudPairing");
    v6 = objc_claimAutoreleasedReturnValue(v5);
    v7 = os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
    if ((v4 & 1) != 0)
    {
      if (v7)
      {
        *(_WORD *)v10 = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "IDS: Manatee getAccessoryKey", v10, 2u);
      }
      v8 = &off_1001E13B8;
    }
    else
    {
      if (v7)
      {
        *(_WORD *)v10 = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "IDS: getAccessoryKey", v10, 2u);
      }
      v8 = off_1001E13B0;
    }

    v9 = (void *)objc_claimAutoreleasedReturnValue(-[__objc2_class sharedInstance](*v8, "sharedInstance"));
    objc_msgSend(v9, "fetchAccessoryKeyBlob:", 0);

  }
}

void sub_10005D974(uint64_t a1)
{
  os_log_t v2;
  NSObject *v3;
  unsigned int v4;
  _DWORD v5[2];

  objc_msgSend(*(id *)(a1 + 32), "setProcessingIDSPush:", 0);
  v2 = sub_1000681B8("CloudPairing");
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = objc_msgSend(*(id *)(a1 + 32), "processingIDSPush");
    v5[0] = 67109120;
    v5[1] = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "IDS: Reseting processingPush %d", (uint8_t *)v5, 8u);
  }

}

void sub_10005E454(_Unwind_Exception *a1)
{
  _Block_object_dispose(&STACK[0x280], 8);
  _Unwind_Resume(a1);
}

id sub_10005E474(uint64_t a1, uint64_t a2)
{
  return _objc_msgSend(*(id *)(a1 + 32), "appendString:", a2);
}

id sub_10005E480(uint64_t a1, uint64_t a2)
{
  return _objc_msgSend(*(id *)(a1 + 32), "appendString:", a2);
}

uint64_t sub_10005E48C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_10005E49C(uint64_t a1)
{

}

void sub_10005E4A4(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  os_log_t v6;
  NSObject *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  int v14;
  id v15;

  v5 = a2;
  if (!a3)
  {
    v6 = sub_1000681B8("CloudPairing");
    v7 = objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      v14 = 138412290;
      v15 = v5;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "MUC - generated keys for RSA v3 - %@", (uint8_t *)&v14, 0xCu);
    }

    objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 40), "setObject:forKeyedSubscript:", v5, CFSTR("RequestedKeys"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "localDeviceRandomAddress"));
    objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 40), "setObject:forKeyedSubscript:", v8, CFSTR("RandomAddress"));

    v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 40);
    v10 = *(void **)(a1 + 32);
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "idsDevice"));
    objc_msgSend(v10, "sendCloudPairingResponseMessage:toDevice:version:", v9, v11, CFSTR("Version 3"));

    v12 = *(void **)(a1 + 32);
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "idsDevice"));
    objc_msgSend(v12, "storePublicAddressMapping:message:", v13, *(_QWORD *)(a1 + 48));

    objc_msgSend(*(id *)(a1 + 32), "cloudPairingCompletedWithResponse:localKeys:from:forProtocolID:", *(_QWORD *)(a1 + 56), 0, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 64));
  }

}

void sub_10005E628(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  os_log_t v6;
  NSObject *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  int v13;
  id v14;

  v5 = a2;
  if (!a3)
  {
    v6 = sub_1000681B8("CloudPairing");
    v7 = objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      v13 = 138412290;
      v14 = v5;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "MUC - generated keys for public address v3 - %@", (uint8_t *)&v13, 0xCu);
    }

    objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40), "setObject:forKeyedSubscript:", v5, CFSTR("RequestedKeys"));
    v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40);
    v9 = *(void **)(a1 + 32);
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "idsDevice"));
    objc_msgSend(v9, "sendCloudPairingResponseMessage:toDevice:version:", v8, v10, CFSTR("Version 3"));

    v11 = *(void **)(a1 + 32);
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "idsDevice"));
    objc_msgSend(v11, "storePublicAddressMapping:message:", v12, *(_QWORD *)(a1 + 48));

    objc_msgSend(*(id *)(a1 + 32), "cloudPairingCompletedWithResponse:localKeys:from:forProtocolID:", *(_QWORD *)(a1 + 48), 0, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 56));
  }

}

void sub_10005E77C(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  os_log_t v6;
  NSObject *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  int v13;
  id v14;

  v5 = a2;
  if (!a3)
  {
    v6 = sub_1000681B8("CloudPairing");
    v7 = objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      v13 = 138412290;
      v14 = v5;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "MUC - generated keys for public address for v2 - %@", (uint8_t *)&v13, 0xCu);
    }

    objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 40), "setObject:forKeyedSubscript:", v5, CFSTR("RequestedKeys"));
    v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 40);
    v9 = *(void **)(a1 + 32);
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "idsDevice"));
    objc_msgSend(v9, "sendCloudPairingResponseMessage:toDevice:version:", v8, v10, CFSTR("Version 2"));

    v11 = *(void **)(a1 + 32);
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "idsDevice"));
    objc_msgSend(v11, "storePublicAddressMapping:message:", v12, *(_QWORD *)(a1 + 48));

    objc_msgSend(*(id *)(a1 + 32), "cloudPairingCompletedWithResponse:localKeys:from:forProtocolID:", *(_QWORD *)(a1 + 56), 0, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 64));
  }

}

void sub_10005EAA8(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  os_log_t v7;
  NSObject *v8;
  NSObject *v9;
  id v10;
  id v11;
  _QWORD block[4];
  id v13;
  id v14;
  id v15;
  uint8_t buf[4];
  id v17;

  v5 = a2;
  v6 = a3;
  v7 = sub_1000681B8("CloudPairing");
  v8 = objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    v17 = v5;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Reply for generate keys: %@", buf, 0xCu);
  }

  v9 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "cloudPairingQueue"));
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10005EBF8;
  block[3] = &unk_1001E22B0;
  v13 = v5;
  v14 = v6;
  v15 = *(id *)(a1 + 40);
  v10 = v6;
  v11 = v5;
  dispatch_async(v9, block);

}

uint64_t sub_10005EBF8(_QWORD *a1)
{
  os_log_t v2;
  NSObject *v3;
  uint64_t v4;

  if (a1[4] && !a1[5])
    return (*(uint64_t (**)(void))(a1[6] + 16))();
  v2 = sub_1000681B8("CloudPairing");
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    sub_10016C090((uint64_t)a1, v3, v4);

  return (*(uint64_t (**)(void))(a1[6] + 16))();
}

void sub_10005EE88(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  os_log_t v7;
  NSObject *v8;
  os_log_t v9;
  NSObject *v10;
  NSObject *v11;
  NSObject *v12;
  uint64_t v13;
  void *v14;
  _QWORD block[4];
  NSObject *v16;
  uint64_t v17;
  id v18;
  uint8_t buf[4];
  id v20;

  v5 = a2;
  v6 = a3;
  v7 = sub_1000681B8("CloudPairing");
  v8 = objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138477827;
    v20 = v5;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Reply for complete pairing: %{private}@", buf, 0xCu);
  }

  if (v6)
  {
    v9 = sub_1000681B8("CloudPairing");
    v10 = objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      sub_10016C0FC();
  }
  else
  {
    v11 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "cloudPairingQueue"));
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10005EFFC;
    block[3] = &unk_1001E2570;
    v12 = v5;
    v13 = *(_QWORD *)(a1 + 32);
    v14 = *(void **)(a1 + 40);
    v16 = v12;
    v17 = v13;
    v18 = v14;
    dispatch_async(v11, block);

    v10 = v16;
  }

}

void sub_10005EFFC(id *a1)
{
  id *v1;
  void *v2;
  uint64_t v3;
  void *v4;
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  void *i;
  void *v10;
  void *v11;
  void *v12;
  id *v13;
  void *v14;
  void *v15;
  unsigned __int8 v16;
  os_log_t v17;
  NSObject *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  os_log_t v23;
  NSObject *v24;
  id v25;
  id v26;
  os_log_t v27;
  NSObject *v28;
  id v29;
  id v30;
  NSObject *v31;
  void *v32;
  void *v33;
  os_log_t v34;
  void *v35;
  void *v36;
  id v37;
  id obj;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint8_t buf[4];
  id v44;
  __int16 v45;
  id v46;
  _BYTE v47[128];

  v1 = a1;
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "objectForKeyedSubscript:", CFSTR("kCloudPairingID")));
  if (v2)
  {
    v3 = objc_opt_class(NSString);
    if ((objc_opt_isKindOfClass(v2, v3) & 1) != 0)
    {
      v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1[4], "objectForKeyedSubscript:", CFSTR("kCloudPairingID")));
      v5 = objc_msgSend(objc_alloc((Class)NSUUID), "initWithUUIDString:", v4);
      if (v5)
      {
        v35 = v4;
        v36 = v2;
        v41 = 0u;
        v42 = 0u;
        v39 = 0u;
        v40 = 0u;
        v37 = v5;
        obj = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v1[5], "_fetchArrayOfCloudDevicesForPeripheral:", v5));
        v6 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v39, v47, 16);
        if (v6)
        {
          v7 = v6;
          v8 = *(_QWORD *)v40;
          do
          {
            for (i = 0; i != v7; i = (char *)i + 1)
            {
              if (*(_QWORD *)v40 != v8)
                objc_enumerationMutation(obj);
              v10 = *(void **)(*((_QWORD *)&v39 + 1) + 8 * (_QWORD)i);
              v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "idsDevice"));
              v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "uniqueID"));
              v13 = v1;
              v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1[6], "idsDevice"));
              v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "uniqueID"));
              v16 = objc_msgSend(v12, "isEqualToIgnoringCase:", v15);

              if ((v16 & 1) == 0)
              {
                v17 = sub_1000681B8("CloudPairing");
                v18 = objc_claimAutoreleasedReturnValue(v17);
                if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
                {
                  v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "idsDevice"));
                  v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "uniqueID"));
                  *(_DWORD *)buf = 138412546;
                  v44 = v20;
                  v45 = 2112;
                  v46 = v37;
                  _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Removing Association from IDS device %@ paired to same BT-UUID %@", buf, 0x16u);

                }
                v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "idsDevice"));
                objc_msgSend(v21, "setNSUUID:", 0);

                objc_msgSend(v10, "setState:", 0);
              }
              v1 = v13;
            }
            v7 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v39, v47, 16);
          }
          while (v7);
        }

        v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1[6], "idsDevice"));
        v5 = v37;
        objc_msgSend(v22, "setNSUUID:", v37);

        v23 = sub_1000681B8("CloudPairing");
        v24 = objc_claimAutoreleasedReturnValue(v23);
        if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
        {
          v25 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v1[6], "description")));
          v26 = objc_msgSend(v25, "UTF8String");
          *(_DWORD *)buf = 138412547;
          v44 = v37;
          v45 = 2081;
          v46 = v26;
          _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "Associated local device \"%@\" with IDS device %{private}s", buf, 0x16u);

        }
        v27 = sub_1000681B8("CloudPairing");
        v28 = objc_claimAutoreleasedReturnValue(v27);
        if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
        {
          v29 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v1[6], "description")));
          v30 = objc_msgSend(v29, "UTF8String");
          *(_DWORD *)buf = 136380675;
          v44 = v30;
          _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "Completed cloud pairing to IDS device %{private}s", buf, 0xCu);

        }
        objc_msgSend(v1[6], "setState:", 6);
        v31 = objc_claimAutoreleasedReturnValue(objc_msgSend(v1[5], "unpairedIDSCloudIdentifiers"));
        v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1[6], "idsDevice"));
        v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v32, "uniqueID"));
        -[NSObject removeObject:](v31, "removeObject:", v33);

        v4 = v35;
        v2 = v36;
      }
      else
      {
        v34 = sub_1000681B8("CloudPairing");
        v31 = objc_claimAutoreleasedReturnValue(v34);
        if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
          sub_10016C168((uint64_t)v1);
      }

    }
  }

}

void sub_10005FD20(id *a1, void *a2, uint64_t a3)
{
  id v4;
  id v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  void *v13;
  _QWORD v14[7];
  _QWORD v15[7];

  if (!a3)
  {
    v15[0] = CFSTR("PairingResponse");
    v14[0] = CFSTR("MessageType");
    v14[1] = CFSTR("DeviceName");
    v4 = a1[4];
    v5 = a2;
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "localDeviceName"));
    v15[1] = v6;
    v14[2] = CFSTR("PublicAddress");
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "publicAddress"));
    v15[2] = v7;
    v14[3] = CFSTR("EncryptionType");
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "objectForKeyedSubscript:"));
    v15[3] = v8;
    v14[4] = CFSTR("RequestedKeyType");
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "requestedKeyTypes"));
    v15[4] = v9;
    v14[5] = CFSTR("RequestedKeyLength");
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "objectForKeyedSubscript:"));
    v14[6] = CFSTR("RequestedKeys");
    v15[5] = v10;
    v15[6] = v5;
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v15, v14, 7));

    v12 = a1[4];
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[6], "idsDevice"));
    objc_msgSend(v12, "sendCloudPairingResponseMessage:toDevice:version:", v11, v13, CFSTR("Version 1"));

  }
}

void sub_1000601AC(uint64_t a1, void *a2, uint64_t a3)
{
  void *v4;
  id v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  _QWORD v17[8];
  _QWORD v18[8];

  if (!a3)
  {
    v18[0] = CFSTR("KeyDistribution");
    v17[0] = CFSTR("MessageType");
    v17[1] = CFSTR("DeviceName");
    v4 = *(void **)(a1 + 32);
    v5 = a2;
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "localDeviceName"));
    v18[1] = v6;
    v17[2] = CFSTR("PublicAddress");
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "publicAddress"));
    v18[2] = v7;
    v17[3] = CFSTR("EncryptionType");
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:"));
    v18[3] = v8;
    v17[4] = CFSTR("RequestedKeyType");
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "requestedKeyTypes"));
    v18[4] = v9;
    v17[5] = CFSTR("RequestedKeyLength");
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:"));
    v11 = *(_QWORD *)(a1 + 48);
    v18[5] = v10;
    v18[6] = v11;
    v17[6] = CFSTR("LocalKeys");
    v17[7] = CFSTR("RequestedKeys");
    v18[7] = v5;
    v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v18, v17, 8));

    v13 = *(void **)(a1 + 32);
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "idsDevice"));
    objc_msgSend(v13, "sendCloudPairingResponseMessage:toDevice:version:", v12, v14, CFSTR("Version 1"));

    objc_msgSend(*(id *)(a1 + 32), "cloudPairingCompletedWithResponse:localKeys:from:forProtocolID:", *(_QWORD *)(a1 + 40), v5, *(_QWORD *)(a1 + 56), CFSTR("Version 1"));
    v15 = *(void **)(a1 + 32);
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "idsDevice"));
    objc_msgSend(v15, "storePublicAddressMapping:message:", v16, *(_QWORD *)(a1 + 40));

  }
}

void sub_100060B1C(uint64_t a1)
{
  os_log_t v2;
  NSObject *v3;
  unint64_t v4;
  void *v5;
  const char *v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  os_log_t v13;
  NSObject *v14;
  _BOOL4 v15;
  const char *v16;
  id v17;
  id v18;
  os_log_t v19;
  const char *v20;
  id v21;
  id v22;
  const char *v23;
  const char *v24;
  id v25;
  _QWORD v26[4];
  id v27;
  uint8_t buf[4];
  unint64_t v29;
  __int16 v30;
  id v31;
  __int16 v32;
  const char *v33;
  __int16 v34;
  id v35;

  v2 = sub_1000681B8("CloudPairing");
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = (unint64_t)*(double *)(a1 + 48);
    v5 = *(void **)(a1 + 56);
    if (*(_QWORD *)(a1 + 64) == 1)
      v6 = "pairing";
    else
      v6 = "security";
    v7 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "description")));
    *(_DWORD *)buf = 134218755;
    v29 = v4;
    v30 = 2048;
    v31 = v5;
    v32 = 2080;
    v33 = v6;
    v34 = 2081;
    v35 = objc_msgSend(v7, "UTF8String");
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "MUC - Now attempting delayed (%lu) seconds to send (%lu) attempt '%s request' message to IDS device %{private}s", buf, 0x2Au);

  }
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "associatedDevices"));
  v26[0] = _NSConcreteStackBlock;
  v26[1] = 3221225472;
  v26[2] = sub_100060E8C;
  v26[3] = &unk_1001E41D0;
  v27 = *(id *)(a1 + 32);
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "cuFilteredArrayUsingBlock:", v26));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "firstObject"));

  if (!v10)
  {
    v19 = sub_1000681B8("CloudPairing");
    v14 = objc_claimAutoreleasedReturnValue(v19);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      if (*(_QWORD *)(a1 + 64) == 1)
        v20 = "pairing";
      else
        v20 = "security";
      v21 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "description")));
      v22 = objc_msgSend(v21, "UTF8String");
      *(_DWORD *)buf = 136315395;
      v29 = (unint64_t)v20;
      v30 = 2081;
      v31 = v22;
      v23 = "MUC - Dropping sending '%s request' message to unpaired IDS device %{private}s";
      goto LABEL_25;
    }
LABEL_26:

    goto LABEL_14;
  }
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "idsDevice"));
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "nsuuid"));

  v13 = sub_1000681B8("CloudPairing");
  v14 = objc_claimAutoreleasedReturnValue(v13);
  v15 = os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
  if (v12)
  {
    if (v15)
    {
      if (*(_QWORD *)(a1 + 64) == 1)
        v24 = "pairing";
      else
        v24 = "security";
      v21 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "description")));
      v25 = objc_msgSend(v21, "UTF8String");
      *(_DWORD *)buf = 136315395;
      v29 = (unint64_t)v24;
      v30 = 2081;
      v31 = v25;
      v23 = "MUC - Dropping sending '%s request' message to IDS device %{private}s because we got paired";
LABEL_25:
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, v23, buf, 0x16u);

      goto LABEL_26;
    }
    goto LABEL_26;
  }
  if (v15)
  {
    if (*(_QWORD *)(a1 + 64) == 1)
      v16 = "pairing";
    else
      v16 = "security";
    v17 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "description")));
    v18 = objc_msgSend(v17, "UTF8String");
    *(_DWORD *)buf = 136315395;
    v29 = (unint64_t)v16;
    v30 = 2081;
    v31 = v18;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "MUC - Sending delayed '%s request' message to IDS device %{private}s", buf, 0x16u);

  }
  objc_msgSend(*(id *)(a1 + 40), "initiatePairing:", *(_QWORD *)(a1 + 32));
LABEL_14:

}

id sub_100060E8C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "idsDevice"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "uniqueID"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "idsDevice"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "uniqueID"));
  if (objc_msgSend(v5, "isEqualToString:", v7))
    v8 = v3;
  else
    v8 = 0;
  v9 = v8;

  return v9;
}

void sub_100061634(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 128));
  _Unwind_Resume(a1);
}

void sub_100061660(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  void *v8;
  os_log_t v9;
  NSObject *v10;
  void *v11;
  void *v12;
  _BOOL4 v13;
  void *v14;
  void *v15;
  id v16;
  void *v17;
  id v18;
  id v19;
  void *v20;
  os_log_t v21;
  NSObject *v22;
  int8x16_t v23;
  uint64_t v24;
  _QWORD v25[4];
  id v26;
  int8x16_t v27;
  id v28;
  id v29[2];
  uint8_t buf[4];
  id v31;

  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 72));
  v8 = WeakRetained;
  if (!v6 && WeakRetained)
  {
    v9 = sub_1000681B8("CloudPairing");
    v10 = objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      v31 = v5;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "MUC - generated keys for public address: %@", buf, 0xCu);
    }

    v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionaryWithDictionary:](NSMutableDictionary, "dictionaryWithDictionary:", *(_QWORD *)(a1 + 32)));
    objc_msgSend(v11, "setObject:forKeyedSubscript:", v5, CFSTR("RequestedKeys"));
    objc_msgSend(*(id *)(a1 + 40), "setObject:forKey:", v11, CFSTR("Version 2"));
    if (!*(_DWORD *)(a1 + 88)
      && (v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "localDeviceRandomAddress")),
          v13 = v12 == 0,
          v12,
          v13))
    {
      v21 = sub_1000681B8("CloudPairing");
      v22 = objc_claimAutoreleasedReturnValue(v21);
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        v31 = v5;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "MUC - generated keys with V2 RSA: %@", buf, 0xCu);
      }

      objc_msgSend(*(id *)(a1 + 40), "setObject:forKey:", v11, CFSTR("Version 3"));
      objc_msgSend(*(id *)(a1 + 40), "setObject:forKey:", CFSTR("CloudPairing"), CFSTR("MessageType"));
      objc_msgSend(v8, "sendInitialPairingIDSMessage:forDevice:withRole:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 80));
    }
    else
    {
      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "localDeviceRandomAddress"));

      if (v14)
      {
        v15 = *(void **)(a1 + 48);
        v24 = *(_QWORD *)(a1 + 64);
        v16 = objc_msgSend(v15, "keyLength");
        v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "localDeviceRandomAddress"));
        v25[0] = _NSConcreteStackBlock;
        v25[1] = 3221225472;
        v25[2] = sub_100061984;
        v25[3] = &unk_1001E4220;
        objc_copyWeak(v29, (id *)(a1 + 72));
        v26 = *(id *)(a1 + 32);
        v23 = *(int8x16_t *)(a1 + 40);
        v18 = (id)v23.i64[0];
        v27 = vextq_s8(v23, v23, 8uLL);
        v19 = *(id *)(a1 + 56);
        v20 = *(void **)(a1 + 80);
        v28 = v19;
        v29[1] = v20;
        objc_msgSend(v15, "generateKeyDictForTypes:keyLength:forAddress:withCompletion:", v24, v16, v17, v25);

        objc_destroyWeak(v29);
      }
    }

  }
}

void sub_100061968(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_100061984(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  id WeakRetained;
  void *v7;
  os_log_t v8;
  NSObject *v9;
  void *v10;
  void *v11;
  int v12;
  id v13;

  v5 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  v7 = WeakRetained;
  if (!a3 && WeakRetained)
  {
    v8 = sub_1000681B8("CloudPairing");
    v9 = objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      v12 = 138412290;
      v13 = v5;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "MUC - generated keys for updated RSA: %@", (uint8_t *)&v12, 0xCu);
    }

    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionaryWithDictionary:](NSMutableDictionary, "dictionaryWithDictionary:", *(_QWORD *)(a1 + 32)));
    objc_msgSend(v10, "setObject:forKeyedSubscript:", v5, CFSTR("RequestedKeys"));
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "localDeviceRandomAddress"));
    objc_msgSend(v10, "setObject:forKeyedSubscript:", v11, CFSTR("RandomAddress"));

    objc_msgSend(*(id *)(a1 + 48), "setObject:forKey:", v10, CFSTR("Version 3"));
    objc_msgSend(*(id *)(a1 + 48), "setObject:forKey:", CFSTR("CloudPairing"), CFSTR("MessageType"));
    objc_msgSend(v7, "sendInitialPairingIDSMessage:forDevice:withRole:", *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 72));

  }
}

id sub_100061F7C(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_sendRePairRequest:forBundleID:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

id sub_100062544(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "containsString:", *(_QWORD *)(a1 + 32));
}

void sub_100062550(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  NSObject *v5;
  void *v6;
  os_log_t v7;
  uint64_t v8;
  _QWORD v9[5];
  _QWORD v10[2];
  _QWORD v11[2];
  uint8_t buf[4];
  uint64_t v13;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "messageIdentifiersWaitingForAck"));
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_1000626E4;
  v9[3] = &unk_1001E4270;
  v9[4] = *(_QWORD *)(a1 + 40);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "keysOfEntriesPassingTest:", v9));

  if (objc_msgSend(v3, "count"))
  {
    v4 = *(void **)(a1 + 32);
    v10[0] = CFSTR("MessageType");
    v10[1] = CFSTR("DeviceName");
    v11[0] = CFSTR("RepairRequest");
    v5 = objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "localDeviceName"));
    v11[1] = v5;
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v11, v10, 2));
    objc_msgSend(v4, "sendRePairCloudPairingMessage:toDevice:bundleID:", v6, *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64));

  }
  else
  {
    v7 = sub_1000681B8("CloudPairing");
    v5 = objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      v8 = *(_QWORD *)(a1 + 48);
      *(_DWORD *)buf = 138412290;
      v13 = v8;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Stopping here as message was delivered to device %@", buf, 0xCu);
    }
  }

}

id sub_1000626E4(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "containsString:", *(_QWORD *)(a1 + 32));
}

void sub_100063644(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  os_log_t v7;
  NSObject *v8;
  NSObject *v9;
  NSObject *v10;
  _QWORD v11[4];
  NSObject *v12;
  id v13;
  uint8_t buf[16];

  v5 = a2;
  v6 = a3;
  v7 = sub_1000681B8("CloudPairing");
  v8 = objc_claimAutoreleasedReturnValue(v7);
  v9 = v8;
  if (v6)
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      sub_10016C9C0(a1, (uint64_t)v6, v9);
  }
  else
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Unpaired Cloud Device", buf, 2u);
    }

    v10 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "cloudPairingQueue"));
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_10006376C;
    v11[3] = &unk_1001E23E8;
    v12 = v5;
    v13 = *(id *)(a1 + 40);
    dispatch_async(v10, v11);

    v9 = v12;
  }

}

void sub_10006376C(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  char isKindOfClass;
  void *v7;
  unsigned int v8;
  os_log_t v9;
  NSObject *v10;
  void *v11;

  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("kSuccess")));
  if (v2)
  {
    v3 = (void *)v2;
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("kSuccess")));
    v5 = objc_opt_class(NSNumber);
    isKindOfClass = objc_opt_isKindOfClass(v4, v5);

    if ((isKindOfClass & 1) != 0)
    {
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("kSuccess")));
      v8 = objc_msgSend(v7, "BOOLValue");

      if (v8)
      {
        v9 = sub_1000681B8("CloudPairing");
        v10 = objc_claimAutoreleasedReturnValue(v9);
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
          sub_10016CA3C(a1);

      }
      else
      {
        v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "idsDevice"));
        objc_msgSend(v11, "setNSUUID:", 0);

        objc_msgSend(*(id *)(a1 + 40), "setState:", 0);
      }
    }
  }
}

void sub_1000641A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000641C0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_statedumpAndRecordDailyMetric"));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_100064CB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a67;

  _Block_object_dispose(&a67, 8);
  _Unwind_Resume(a1);
}

int64_t sub_100064D08(id a1, CloudDevice *a2, CloudDevice *a3)
{
  CloudDevice *v4;
  CloudDevice *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  int64_t v14;

  v4 = a2;
  v5 = a3;
  v6 = (void *)objc_claimAutoreleasedReturnValue(-[CloudDevice idsDevice](v4, "idsDevice"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "name"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(-[CloudDevice idsDevice](v5, "idsDevice"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "name"));
  if (objc_msgSend(v7, "compare:", v9) == (id)1)
  {
    v10 = (void *)objc_claimAutoreleasedReturnValue(-[CloudDevice idsDevice](v4, "idsDevice"));
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "nsuuid"));
    if (v11)
    {
      v12 = (void *)objc_claimAutoreleasedReturnValue(-[CloudDevice idsDevice](v5, "idsDevice"));
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "nsuuid"));
      v14 = v13 != 0;

    }
    else
    {
      v14 = 0;
    }

  }
  else
  {
    v14 = 0;
  }

  return v14;
}

id sub_100064E1C(id a1, CloudDevice *a2)
{
  CloudDevice *v2;
  void *v3;
  void *v4;
  CloudDevice *v5;
  CloudDevice *v6;

  v2 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(-[CloudDevice idsDevice](v2, "idsDevice"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "nsuuid"));
  if (v4)
    v5 = v2;
  else
    v5 = 0;
  v6 = v5;

  return v6;
}

void sub_100064E7C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  id v12;
  id obj;
  _QWORD v14[4];
  id v15;
  id v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t, uint64_t);
  void (*v23)(uint64_t);
  id v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  int v28;

  v5 = a2;
  v6 = a3;
  v25 = 0;
  v26 = &v25;
  v27 = 0x2020000000;
  v28 = 0;
  v19 = 0;
  v20 = &v19;
  v21 = 0x3032000000;
  v22 = sub_10005E48C;
  v23 = sub_10005E49C;
  v24 = 0;
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_10006504C;
  v14[3] = &unk_1001E4340;
  v17 = &v25;
  v18 = &v19;
  v15 = *(id *)(a1 + 32);
  v7 = v5;
  v16 = v7;
  objc_msgSend(v6, "enumerateKeysAndObjectsUsingBlock:", v14);
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  obj = *(id *)(v8 + 40);
  NSAppendPrintF_safe(&obj, "] %@: %u\n", v7, *((unsigned int *)v26 + 6));
  objc_storeStrong((id *)(v8 + 40), obj);
  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v12 = *(id *)(v9 + 40);
  NSAppendPrintF_safe(&v12, "%@", v20[5]);
  objc_storeStrong((id *)(v9 + 40), v12);
  v10 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v11 = *(id *)(v10 + 40);
  NSAppendPrintF_safe(&v11, "\n");
  objc_storeStrong((id *)(v10 + 40), v11);

  _Block_object_dispose(&v19, 8);
  _Block_object_dispose(&v25, 8);

}

void sub_100065028(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  uint64_t v15;
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v15 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_10006504C(uint64_t a1, void *a2, void *a3)
{
  int v5;
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  id v12;
  id obj;

  v5 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
  v6 = a3;
  v7 = a2;
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = objc_msgSend(v6, "intValue") + v5;
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  obj = *(id *)(v8 + 40);
  NSAppendPrintF_safe(&obj, "> %@ - %@", v7, v6);

  objc_storeStrong((id *)(v8 + 40), obj);
  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  v12 = *(id *)(v9 + 40);
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", *(_QWORD *)(a1 + 40)));
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "objectForKeyedSubscript:", v7));

  NSAppendPrintF_safe(&v12, "\n%@\n", v11);
  objc_storeStrong((id *)(v9 + 40), v12);

}

void sub_100065140(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  id obj;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  obj = *(id *)(v3 + 40);
  NSAppendPrintF_safe(&obj, "%@ = %@\n", a2, a3);
  objc_storeStrong((id *)(v3 + 40), obj);
}

void sub_100065190(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4;
  id v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id obj;

  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  obj = *(id *)(v4 + 40);
  v5 = a3;
  v6 = a2;
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "idsDevice"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "uniqueID"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "idsDevice"));

  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "name"));
  NSAppendPrintF_safe(&obj, "%@ = [%@] %@\n", v6, v8, v10);

  objc_storeStrong((id *)(v4 + 40), obj);
}

void sub_1000669FC(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_fetchCloudPairingIdentifierForPeripheral:", *(_QWORD *)(a1 + 40)));
  (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();

}

void sub_100066AE0(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  id v3;

  v1 = *(_QWORD *)(a1 + 40);
  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "service"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "devices"));
  (*(void (**)(uint64_t, void *))(v1 + 16))(v1, v2);

}

void sub_100066D78(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

void sub_100066D8C(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0x16u);
}

void sub_100066DA0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0xCu);
}

void sub_100066DD4(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0x16u);
}

void sub_100066DE0(void *a1, NSObject *a2, os_log_type_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, a3, a4, a5, 0xCu);
}

void sub_100066E04(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 2u);
}

id sub_100066E14(void *a1, const char *a2)
{
  return objc_msgSend(a1, "UTF8String");
}

id sub_100066E30(void *a1, const char *a2)
{
  return objc_msgSend(a1, "UTF8String");
}

uint64_t sub_100066E4C(uint64_t a1, uint64_t a2)
{
  return a2;
}

id sub_100066E6C(void *a1, const char *a2)
{
  return objc_msgSend(a1, "UTF8String");
}

uint64_t sub_100066E74()
{
  uint64_t v0;

  return v0;
}

void sub_100067758(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100067774(uint64_t a1, void *a2)
{
  _xpc_activity_s *v3;
  id v4;
  _BOOL4 v5;
  os_log_t v6;
  NSObject *v7;
  uint64_t v8;
  os_log_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  os_log_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  void *v24;
  os_log_t v25;
  NSObject *v26;
  uint64_t v27;
  const char *v28;
  xpc_activity_state_t state;
  _BOOL4 v30;
  uint64_t v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  os_log_t v36;
  NSObject *v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  os_log_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  os_log_t v48;
  uint64_t v49;
  os_log_t v50;
  NSObject *v51;
  uint64_t v52;
  xpc_activity_state_t v53;
  os_log_t v54;
  uint64_t v55;
  xpc_activity_state_t v56;
  id to;
  uint8_t buf[4];
  uint64_t v59;
  __int16 v60;
  xpc_activity_state_t v61;
  __int16 v62;
  NSObject *v63;

  v3 = a2;
  objc_copyWeak(&to, (id *)(a1 + 56));
  v4 = objc_loadWeakRetained(&to);
  v5 = v4 == 0;

  if (v5)
  {
    v9 = sub_1000681B8("BTXPCTimer");
    v7 = objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      sub_10016CB38(a1, v7, v10, v11, v12, v13, v14, v15);
  }
  else if (*(_QWORD *)(a1 + 40))
  {
    if (xpc_activity_get_state(v3))
    {
      if (xpc_activity_should_defer(v3))
      {
        if (xpc_activity_set_state(v3, 3))
        {
          v6 = sub_1000681B8("BTXPCTimer");
          v7 = objc_claimAutoreleasedReturnValue(v6);
          if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
          {
            v8 = *(_QWORD *)(a1 + 32);
            *(_DWORD *)buf = 138412290;
            v59 = v8;
          }
        }
        else
        {
          v41 = sub_1000681B8("BTXPCTimer");
          v7 = objc_claimAutoreleasedReturnValue(v41);
          if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
            sub_10016CC08(a1, v7, v42, v43, v44, v45, v46, v47);
        }
        goto LABEL_33;
      }
      state = xpc_activity_get_state(v3);
      v7 = xpc_activity_copy_criteria(v3);
      if (state == 2)
      {
        v30 = xpc_activity_set_state(v3, 5);
        v31 = *(_QWORD *)(a1 + 32);
        v32 = (void *)objc_claimAutoreleasedReturnValue(+[NSUUID UUID](NSUUID, "UUID"));
        v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v32, "UUIDString"));
        v34 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@-%@"), v31, v33));

        v26 = objc_retainAutorelease(v34);
        v35 = (void *)os_transaction_create(-[NSObject UTF8String](v26, "UTF8String"));
        v36 = sub_1000681B8("BTXPCTimer");
        v37 = objc_claimAutoreleasedReturnValue(v36);
        if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
        {
          v38 = *(_QWORD *)(a1 + 32);
          *(_DWORD *)buf = 138412546;
          v59 = v38;
          v60 = 1024;
          LODWORD(v61) = v30;
          _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "BTXPCTimer triggered. Updating to done so that it can be cleaned. success : %@ : %d", buf, 0x12u);
        }

        v39 = *(_QWORD *)(a1 + 48);
        v40 = objc_loadWeakRetained(&to);
        (*(void (**)(uint64_t, id))(v39 + 16))(v39, v40);

      }
      else
      {
        v48 = sub_1000681B8("BTXPCTimer");
        v26 = objc_claimAutoreleasedReturnValue(v48);
        if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
        {
          v49 = *(_QWORD *)(a1 + 32);
          *(_DWORD *)buf = 138412802;
          v59 = v49;
          v60 = 2048;
          v61 = state;
          v62 = 2048;
          v63 = v7;
          _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "BTXPCTimer %@ changed to state %ld with criteria %p", buf, 0x20u);
        }
      }
LABEL_32:

      goto LABEL_33;
    }
    v23 = objc_loadWeakRetained(&to);
    objc_msgSend(v23, "setActivity:", v3);

    v7 = xpc_activity_copy_criteria(v3);
    v24 = *(void **)(a1 + 40);
    if (v7)
    {
      if (xpc_equal(v24, v7))
      {
        v25 = sub_1000681B8("BTXPCTimer");
        v26 = objc_claimAutoreleasedReturnValue(v25);
        if (!os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
          goto LABEL_32;
        v27 = *(_QWORD *)(a1 + 32);
        *(_DWORD *)buf = 138412546;
        v59 = v27;
        v60 = 2112;
        v61 = (xpc_activity_state_t)v7;
        v28 = "BTXPCTimer Check-in: %@, with existing criteria: %@";
      }
      else
      {
        xpc_activity_set_criteria(v3, *(xpc_object_t *)(a1 + 40));
        v54 = sub_1000681B8("BTXPCTimer");
        v26 = objc_claimAutoreleasedReturnValue(v54);
        if (!os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
          goto LABEL_32;
        v55 = *(_QWORD *)(a1 + 32);
        v56 = *(_QWORD *)(a1 + 40);
        *(_DWORD *)buf = 138412546;
        v59 = v55;
        v60 = 2112;
        v61 = v56;
        v28 = "BTXPCTimer Check-in: %@, with updating criteria: %@";
      }
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, v28, buf, 0x16u);
      goto LABEL_32;
    }
    if (v24)
    {
      v50 = sub_1000681B8("BTXPCTimer");
      v51 = objc_claimAutoreleasedReturnValue(v50);
      if (os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT))
      {
        v52 = *(_QWORD *)(a1 + 32);
        v53 = *(_QWORD *)(a1 + 40);
        *(_DWORD *)buf = 138412546;
        v59 = v52;
        v60 = 2112;
        v61 = v53;
        _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_DEFAULT, "BTXPCTimer Check-in: %@, with criteria: %@", buf, 0x16u);
      }

      xpc_activity_set_criteria(v3, *(xpc_object_t *)(a1 + 40));
    }
  }
  else
  {
    v16 = sub_1000681B8("BTXPCTimer");
    v7 = objc_claimAutoreleasedReturnValue(v16);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      sub_10016CBA0(a1, v7, v17, v18, v19, v20, v21, v22);
  }
LABEL_33:

  objc_destroyWeak(&to);
}

void sub_100067C54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100067F10(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

uint64_t start()
{
  void *v0;
  NSObject *v1;
  NSObject *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  char v12[1024];

  sub_100068120((uint64_t)"cloudpaird");
  v0 = objc_autoreleasePoolPush();
  if ((_set_user_dir_suffix("com.apple.cloudpaird") & 1) == 0)
  {
    v1 = os_log_create("com.apple.bluetooth", "cloudpaird");
    if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
      sub_10016CCE4();

  }
  if (!confstr(65537, v12, 0x400uLL))
  {
    v2 = os_log_create("com.apple.bluetooth", "cloudpaird");
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
      sub_10016CC70();

  }
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[BTIdentityDaemon sharedBTIdentityDaemon](BTIdentityDaemon, "sharedBTIdentityDaemon"));
  objc_msgSend(v3, "activate");

  v4 = (void *)objc_claimAutoreleasedReturnValue(+[BTServicesDaemon sharedBTServicesDaemon](BTServicesDaemon, "sharedBTServicesDaemon"));
  objc_msgSend(v4, "activate");

  v5 = (void *)objc_claimAutoreleasedReturnValue(+[BTSmartRoutingDaemon sharedBTSmartRoutingDaemon](BTSmartRoutingDaemon, "sharedBTSmartRoutingDaemon"));
  objc_msgSend(v5, "activate");

  v6 = (void *)objc_claimAutoreleasedReturnValue(+[CloudXPCService sharedInstance](CloudXPCService, "sharedInstance"));
  objc_msgSend(v6, "activate");

  v7 = (void *)objc_claimAutoreleasedReturnValue(+[BTUserCloudServicesDaemon sharedBTServicesDaemon](BTUserCloudServicesDaemon, "sharedBTServicesDaemon"));
  objc_msgSend(v7, "activate");

  v8 = (void *)objc_claimAutoreleasedReturnValue(+[AAServicesDaemon sharedAAServicesDaemon](AAServicesDaemon, "sharedAAServicesDaemon"));
  objc_msgSend(v8, "activate");

  v9 = (void *)objc_claimAutoreleasedReturnValue(+[HMServiceDaemon sharedHMServiceDaemon](HMServiceDaemon, "sharedHMServiceDaemon"));
  objc_msgSend(v9, "activate");

  objc_autoreleasePoolPop(v0);
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSRunLoop mainRunLoop](NSRunLoop, "mainRunLoop"));
  objc_msgSend(v10, "run");

  return 0;
}

void sub_100068100(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 8u);
}

void sub_100068120(uint64_t a1)
{
  _QWORD block[5];

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10006818C;
  block[3] = &unk_1001E4400;
  block[4] = a1;
  if (qword_1002125C0 != -1)
    dispatch_once(&qword_1002125C0, block);
}

void sub_10006818C(uint64_t a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.bluetoothcloud", *(const char **)(a1 + 32));
  v2 = (void *)qword_100218BD8;
  qword_100218BD8 = (uint64_t)v1;

}

os_log_t sub_1000681B8(const char *a1)
{
  void *v2;
  os_log_t v3;

  if (qword_1002125D0 != -1)
    dispatch_once(&qword_1002125D0, &stru_1001E4420);
  pthread_mutex_lock(&stru_10020FB98);
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", a1));
  v3 = (os_log_t)objc_claimAutoreleasedReturnValue(objc_msgSend((id)qword_1002125C8, "objectForKey:", v2));
  if (!v3)
  {
    v3 = os_log_create("com.apple.bluetoothcloud", a1);
    objc_msgSend((id)qword_1002125C8, "setObject:forKey:", v3, v2);
  }
  pthread_mutex_unlock(&stru_10020FB98);

  return v3;
}

void sub_10006827C(id a1)
{
  uint64_t v1;
  void *v2;

  v1 = objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
  v2 = (void *)qword_1002125C8;
  qword_1002125C8 = v1;

}

void sub_1000682E8(id a1)
{
  MPCloudKit *v1;
  void *v2;

  v1 = objc_alloc_init(MPCloudKit);
  v2 = (void *)qword_1002125D8;
  qword_1002125D8 = (uint64_t)v1;

}

void sub_1000685BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000685D8(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "buddySetupDone");

}

uint64_t sub_100068790(uint64_t a1)
{
  _QWORD v2[5];
  int v3;
  int out_token;

  out_token = 0;
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472;
  v2[2] = sub_100068800;
  v2[3] = &unk_1001E44B8;
  v3 = 0;
  v2[4] = *(_QWORD *)(a1 + 32);
  return notify_register_dispatch("com.apple.mobile.keybagd.first_unlock", &out_token, (dispatch_queue_t)&_dispatch_main_q, v2);
}

id sub_100068800(uint64_t a1)
{
  os_log_t v2;
  NSObject *v3;
  uint8_t v5[16];

  v2 = sub_1000681B8("MagicPairing");
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "device unlocked after boot ", v5, 2u);
  }

  notify_cancel(*(_DWORD *)(a1 + 40));
  return objc_msgSend(*(id *)(a1 + 32), "initializeCloudKit");
}

void sub_100068918(id a1, int64_t a2, NSError *a3)
{
  NSError *v4;
  os_log_t v5;
  NSObject *v6;
  os_log_t v7;
  NSObject *v8;
  NSObject *v9;
  uint64_t v10;
  int v11;
  int64_t v12;
  __int16 v13;
  NSError *v14;

  v4 = a3;
  v5 = sub_1000681B8("MagicPairing");
  v6 = objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    v11 = 134218242;
    v12 = a2;
    v13 = 2112;
    v14 = v4;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "non-Manatee forceAccountStatus accountStatusWithCompletionHandler accountStatus %ld error %@", (uint8_t *)&v11, 0x16u);
  }

  if (!v4)
  {
    if (a2 == 1)
    {
      v9 = objc_claimAutoreleasedReturnValue(+[CloudXPCService sharedInstance](CloudXPCService, "sharedInstance"));
      v8 = v9;
      v10 = 1;
    }
    else
    {
      if (a2 == 4)
      {
        v7 = sub_1000681B8("MagicPairing");
        v8 = objc_claimAutoreleasedReturnValue(v7);
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(v11) = 0;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "non-Manatee forceAccountStatus Account Available but Not Ready, Try again in sometime...", (uint8_t *)&v11, 2u);
        }
        goto LABEL_11;
      }
      v9 = objc_claimAutoreleasedReturnValue(+[CloudXPCService sharedInstance](CloudXPCService, "sharedInstance"));
      v8 = v9;
      v10 = 0;
    }
    -[NSObject accountStatusAvailable:force:](v9, "accountStatusAvailable:force:", v10, 1);
LABEL_11:

  }
}

void sub_100069134(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100069158(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  id *v6;
  id WeakRetained;
  os_log_t v8;
  NSObject *v9;
  NSObject *v10;
  void *v11;
  dispatch_time_t v12;
  os_log_t v13;
  NSObject *v14;
  unsigned int v15;
  id v16;
  unsigned __int8 v17;
  os_log_t v18;
  NSObject *v19;
  _BOOL4 v20;
  void *v21;
  void *v22;
  os_log_t v23;
  NSObject *v24;
  os_log_t v25;
  NSObject *v26;
  unsigned int v27;
  _QWORD block[5];
  uint8_t buf[4];
  uint64_t v30;
  __int16 v31;
  id v32;

  v5 = a3;
  v6 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v8 = sub_1000681B8("MagicPairing");
  v9 = objc_claimAutoreleasedReturnValue(v8);
  v10 = v9;
  if (WeakRetained)
  {
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134218242;
      v30 = a2;
      v31 = 2112;
      v32 = v5;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "non-Manatee accountStatusWithCompletionHandler accountStatus %ld error %@", buf, 0x16u);
    }

    if (!v5)
    {
      if (a2 == 1)
      {
        if ((objc_msgSend(WeakRetained, "isAccountActive") & 1) == 0)
        {
          objc_msgSend(WeakRetained, "setupSubscriptions");
          v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "readUserPreference:", CFSTR("kMagicPairingLegacyMasterKeyRemoved")));

          if (!v11)
            objc_msgSend(WeakRetained, "deleteLegacyMasterKey");
        }
        objc_msgSend(WeakRetained, "setIsAccountActive:", 1);
        v12 = dispatch_time(0, 5000000000);
        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472;
        block[2] = sub_1000695E0;
        block[3] = &unk_1001E20E8;
        block[4] = WeakRetained;
        dispatch_after(v12, (dispatch_queue_t)&_dispatch_main_q, block);
        v13 = sub_1000681B8("MagicPairing");
        v14 = objc_claimAutoreleasedReturnValue(v13);
        if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
        {
          v15 = objc_msgSend(WeakRetained, "isAccountActive");
          *(_DWORD *)buf = 134218240;
          v30 = 1;
          v31 = 1024;
          LODWORD(v32) = v15;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "non-Manatee accountStatusDidChange Accounts available accountStatus %ld self.isAccountActive %d \n", buf, 0x12u);
        }

      }
      else if ((a2 & 0xFFFFFFFFFFFFFFFELL) == 2)
      {
        objc_msgSend(WeakRetained, "setIsAccountActive:", 0);
        objc_msgSend(WeakRetained, "setMasterBlob:", 0);
        objc_msgSend(WeakRetained, "setShouldPauseFetch:", 0);
        objc_msgSend(WeakRetained, "setPauseErrorReason:", 0);
        objc_msgSend(WeakRetained, "setIsFetchInProgress:", 0);
        objc_msgSend(WeakRetained, "setIsFetchMasterKeyInProgress:", 0);
        v16 = objc_loadWeakRetained(v6);
        v17 = objc_msgSend(v16, "reinitAfterBuddy");

        v18 = sub_1000681B8("MagicPairing");
        v19 = objc_claimAutoreleasedReturnValue(v18);
        v20 = os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT);
        if ((v17 & 1) != 0)
        {
          if (v20)
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "non-Manatee Not sending accounts status, since we are still in buddy. ", buf, 2u);
          }

        }
        else
        {
          if (v20)
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "non-Manatee Sending accounts status, as signed out. ", buf, 2u);
          }

          v21 = (void *)objc_claimAutoreleasedReturnValue(+[CloudXPCService sharedInstance](CloudXPCService, "sharedInstance"));
          objc_msgSend(v21, "accountStatusAvailable:force:", objc_msgSend(WeakRetained, "isAccountActive"), 0);

          v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "readUserPreference:", CFSTR("MagicCloudPairingManateeUpgradedAccount")));
          if (v22)
          {
            objc_msgSend(WeakRetained, "removeuserPreference:sync:", CFSTR("MagicCloudPairingManateeUpgradedAccount"), 1);
            v23 = sub_1000681B8("MagicPairing");
            v24 = objc_claimAutoreleasedReturnValue(v23);
            if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "non-Manatee delete kMagicCloudPairingManateeUpgraded key", buf, 2u);
            }

          }
          objc_msgSend(WeakRetained, "removeuserPreference:sync:", CFSTR("MagicCloudPairingMasterSubscriptionID"), 1);
          objc_msgSend(WeakRetained, "removeuserPreference:sync:", CFSTR("MagicCloudPairingAccessorySubscriptionID"), 1);
          objc_msgSend(WeakRetained, "removeuserPreference:sync:", CFSTR("MagicPairingMasterKeySubscriptionDisabled"), 1);
          objc_msgSend(WeakRetained, "removeuserPreference:sync:", CFSTR("kMagicPairingLegacyMasterKeyRemoved"), 1);
        }
        v25 = sub_1000681B8("MagicPairing");
        v26 = objc_claimAutoreleasedReturnValue(v25);
        if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
        {
          v27 = objc_msgSend(WeakRetained, "isAccountActive");
          *(_DWORD *)buf = 134218240;
          v30 = a2;
          v31 = 1024;
          LODWORD(v32) = v27;
          _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "non-Manatee accountStatusDidChange Account unavailable accountStatus %ld self.isAccountActive %d \n", buf, 0x12u);
        }

      }
    }
  }
  else
  {
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      sub_10016CD58();

  }
}

void sub_1000695E0(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(+[CloudXPCService sharedInstance](CloudXPCService, "sharedInstance"));
  objc_msgSend(v2, "accountStatusAvailable:force:", objc_msgSend(*(id *)(a1 + 32), "isAccountActive"), 0);

}

uint64_t sub_100069790(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

id sub_100069958(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "setShouldPauseFetch:", 0);
  objc_msgSend(*(id *)(a1 + 32), "setPauseErrorReason:", 0);
  return objc_msgSend(*(id *)(a1 + 32), "fetchAccessoryKeyBlob:", 0);
}

void sub_100069DA0(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  os_log_t v7;
  NSObject *v8;
  void *v9;
  void *v10;
  os_log_t v11;
  NSObject *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  unsigned int v20;
  void *v21;
  os_log_t v22;
  NSObject *v23;
  void *v24;
  void *v25;
  os_log_t v26;
  NSObject *v27;
  void *v28;
  void *v29;
  os_log_t v30;
  NSObject *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  double v36;
  double v37;
  os_log_t v38;
  NSObject *v39;
  dispatch_time_t v40;
  uint64_t v41;
  os_log_t v42;
  NSObject *v43;
  void *v44;
  void *v45;
  os_log_t v46;
  NSObject *v47;
  id v48;
  uint64_t v49;
  _QWORD v50[4];
  id v51;
  uint64_t v52;
  id v53;
  _QWORD block[6];
  uint8_t buf[4];
  unint64_t v56;
  __int16 v57;
  void *v58;
  __int16 v59;
  id v60;

  v5 = a2;
  v6 = a3;
  v7 = sub_1000681B8("MagicPairing");
  v8 = objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "recordID"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "zoneID"));
    *(_DWORD *)buf = 138412802;
    v56 = (unint64_t)v6;
    v57 = 2112;
    v58 = v10;
    v59 = 2112;
    v60 = v5;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "fetchKeyBlob completion error %@ recordZoneID %@, record: %@", buf, 0x20u);

  }
  if (v6)
  {
    if (objc_msgSend(v6, "code") != (id)26 && objc_msgSend(v6, "code") != (id)11)
    {
      if (objc_msgSend(v6, "code") == (id)6 || objc_msgSend(v6, "code") == (id)7)
      {
        v30 = sub_1000681B8("MagicPairing");
        v31 = objc_claimAutoreleasedReturnValue(v30);
        if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
          sub_10016CD84();

        v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "userInfo"));
        v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v32, "objectForKeyedSubscript:", CKErrorRetryAfterKey));

        if (v33)
        {
          v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "userInfo"));
          v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v34, "objectForKeyedSubscript:", CKErrorRetryAfterKey));
          objc_msgSend(v35, "doubleValue");
          v37 = v36;

          v38 = sub_1000681B8("MagicPairing");
          v39 = objc_claimAutoreleasedReturnValue(v38);
          if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 134217984;
            v56 = (unint64_t)v37;
            _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "MP fetchKeyBlob CKErrorServiceUnavailable/RateLimited, retry after: %lu", buf, 0xCu);
          }

          v40 = dispatch_time(0, (uint64_t)(v37 * 1000000000.0));
          block[0] = _NSConcreteStackBlock;
          block[1] = 3221225472;
          block[2] = sub_10006A450;
          block[3] = &unk_1001E3108;
          v41 = *(_QWORD *)(a1 + 40);
          block[4] = *(_QWORD *)(a1 + 32);
          block[5] = v41;
          dispatch_after(v40, (dispatch_queue_t)&_dispatch_main_q, block);
        }
      }
      goto LABEL_25;
    }
    v11 = sub_1000681B8("MagicPairing");
    v12 = objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "fetchKeyBlob CKErrorZoneNotFound", buf, 2u);
    }

    v13 = (void *)objc_claimAutoreleasedReturnValue(+[MPCloudKit_Manatee sharedInstance](MPCloudKit_Manatee, "sharedInstance"));
    objc_msgSend(v13, "fetchKeyBlob:", *(_QWORD *)(a1 + 40));
    goto LABEL_9;
  }
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "recordID"));
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "zoneID"));
  v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "zoneName"));
  v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "recordZoneBlob"));
  v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "zoneID"));
  v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "zoneName"));
  v20 = objc_msgSend(v16, "isEqualToString:", v19);

  if (!v20)
    goto LABEL_25;
  v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "encryptedValues"));
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "objectForKey:", CFSTR("EncryptedMasterKeyBlob")));

  v22 = sub_1000681B8("MagicPairing");
  v23 = objc_claimAutoreleasedReturnValue(v22);
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    v56 = (unint64_t)v13;
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "MP fetchKeyBlob record %@", buf, 0xCu);
  }

  v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "valuesByKey"));
  v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "objectForKey:", CFSTR("KeyBlob")));

  if (v25)
  {
    v26 = sub_1000681B8("MagicPairing");
    v27 = objc_claimAutoreleasedReturnValue(v26);
    if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
    {
      v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "valuesByKey"));
      v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v28, "objectForKey:", CFSTR("KeyBlob")));
      *(_DWORD *)buf = 138412290;
      v56 = (unint64_t)v29;
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "Found Legacy Key, Remove this: %@", buf, 0xCu);

    }
    objc_msgSend(*(id *)(a1 + 32), "deleteLegacyMasterKey");
  }
  else
  {
    if (objc_msgSend(v13, "length") != (id)2)
    {
      if ((unint64_t)objc_msgSend(v13, "length") > 0x20)
      {
        v50[0] = _NSConcreteStackBlock;
        v50[1] = 3221225472;
        v50[2] = sub_10006A504;
        v50[3] = &unk_1001E2570;
        v48 = v13;
        v49 = *(_QWORD *)(a1 + 32);
        v51 = v48;
        v52 = v49;
        v53 = v5;
        dispatch_async((dispatch_queue_t)&_dispatch_main_q, v50);

      }
      else
      {
        v46 = sub_1000681B8("MagicPairing");
        v47 = objc_claimAutoreleasedReturnValue(v46);
        if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEFAULT, "fetchKeyBlob NO record", buf, 2u);
        }

        dispatch_async((dispatch_queue_t)&_dispatch_main_q, &stru_1001E4568);
      }
LABEL_9:

LABEL_25:
      objc_msgSend(*(id *)(a1 + 32), "setIsFetchMasterKeyInProgress:", 0);
      v13 = (void *)objc_claimAutoreleasedReturnValue(+[CloudXPCService sharedInstance](CloudXPCService, "sharedInstance"));
      objc_msgSend(v13, "endTransaction:", CFSTR("fetchKeyBlob"));
      goto LABEL_26;
    }
    v42 = sub_1000681B8("MagicPairing");
    v43 = objc_claimAutoreleasedReturnValue(v42);
    if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEFAULT, "Master zone has been upgraded. Dont generate keys", buf, 2u);
    }

    v44 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "readUserPreference:", CFSTR("MagicCloudPairingManateeUpgradedAccount")));
    if (!v44)
      objc_msgSend(*(id *)(a1 + 32), "setuserPreference:value:sync:", CFSTR("MagicCloudPairingManateeUpgradedAccount"), &__kCFBooleanTrue, 1);
    v45 = (void *)objc_claimAutoreleasedReturnValue(+[MPCloudKit_Manatee sharedInstance](MPCloudKit_Manatee, "sharedInstance"));
    objc_msgSend(v45, "fetchKeyBlob:", 0);

  }
LABEL_26:

}

id sub_10006A450(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "fetchKeyBlob:", *(_QWORD *)(a1 + 40) + 1);
}

void sub_10006A460(id a1)
{
  void *v1;
  void *v2;
  void *v3;
  char v4;

  v4 = 0;
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[CloudXPCService sharedInstance](CloudXPCService, "sharedInstance"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", &v4, 1));
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionaryWithObjectsAndKeys:](NSMutableDictionary, "dictionaryWithObjectsAndKeys:", v2, CFSTR("kMasterKeyBlob"), 0));
  objc_msgSend(v1, "sendCloudKitMsg:args:", CFSTR("MasterKeysNotAvailable"), v3);

}

void sub_10006A504(uint64_t a1)
{
  void *v2;
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  if (objc_msgSend(*(id *)(a1 + 32), "length") == (id)33)
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "masterBlob"));

    if (!v2)
    {
      v3 = objc_msgSend(*(id *)(a1 + 32), "mutableCopy");
      objc_msgSend(*(id *)(a1 + 40), "setMasterBlob:", v3);

      v4 = (void *)objc_claimAutoreleasedReturnValue(+[CloudXPCService sharedInstance](CloudXPCService, "sharedInstance"));
      v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionaryWithObjectsAndKeys:](NSMutableDictionary, "dictionaryWithObjectsAndKeys:", *(_QWORD *)(a1 + 32), CFSTR("kMasterKeyBlob"), 0));
      objc_msgSend(v4, "sendCloudKitMsg:args:", CFSTR("MasterKeysAvailable"), v5);

      v6 = (void *)objc_claimAutoreleasedReturnValue(+[CloudXPCService sharedInstance](CloudXPCService, "sharedInstance"));
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "deviceManager"));
      objc_msgSend(v7, "addAccountMagicKeysWithCloudRecord:", *(_QWORD *)(a1 + 48));

      objc_msgSend(*(id *)(a1 + 40), "fetchAccessoryKeyBlob:", 0);
    }
  }
}

void sub_10006A788(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10006A7B4(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  id WeakRetained;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  double v11;
  double v12;
  int64_t v13;
  os_log_t v14;
  NSObject *v15;
  dispatch_time_t v16;
  void *v17;
  id v18;
  uint64_t v19;
  id v20;
  _QWORD block[5];
  id v22;
  uint64_t v23;

  v4 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "domain"));
    if (objc_msgSend(v6, "isEqualToString:", CKErrorDomain))
    {
      if (objc_msgSend(v4, "code") == (id)3 || objc_msgSend(v4, "code") == (id)4)
      {

      }
      else
      {
        v20 = objc_msgSend(v4, "code");

        if (v20 != (id)9)
          goto LABEL_14;
      }
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "userInfo"));
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "objectForKeyedSubscript:", CKErrorRetryAfterKey));

      if (v8)
      {
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "userInfo"));
        v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKeyedSubscript:", CKErrorRetryAfterKey));
        objc_msgSend(v10, "doubleValue");
        v12 = v11;

        v13 = (uint64_t)(v12 * 1000000000.0);
      }
      else
      {
        v13 = 60000000000;
      }
      v16 = dispatch_time(0, v13);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_10006A9A0;
      block[3] = &unk_1001E45B8;
      v17 = *(void **)(a1 + 40);
      block[4] = *(_QWORD *)(a1 + 32);
      v18 = v17;
      v19 = *(_QWORD *)(a1 + 56);
      v22 = v18;
      v23 = v19;
      dispatch_after(v16, (dispatch_queue_t)&_dispatch_main_q, block);

    }
    else
    {

    }
  }
  else
  {
    v14 = sub_1000681B8("MagicPairing");
    v15 = objc_claimAutoreleasedReturnValue(v14);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      sub_10016CDE4();

  }
LABEL_14:

}

id sub_10006A9A0(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "checkAccountStatusWithCompletionHandler:withRetryCount:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48) + 1);
}

void sub_10006AD84(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  os_log_t v7;
  NSObject *v8;
  void *v9;
  void *v10;
  __objc2_class **p_superclass;
  os_log_t v12;
  NSObject *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  unsigned int v20;
  void *v21;
  void *v22;
  os_log_t v23;
  NSObject *v24;
  void *v25;
  os_log_t v26;
  NSObject *v27;
  void *v28;
  void *v29;
  os_log_t v30;
  NSObject *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  double v36;
  double v37;
  os_log_t v38;
  NSObject *v39;
  dispatch_time_t v40;
  uint64_t v41;
  void *v42;
  void *v43;
  _QWORD v44[6];
  _QWORD block[5];
  id v46;
  uint8_t buf[4];
  unint64_t v48;
  __int16 v49;
  void *v50;
  __int16 v51;
  id v52;

  v5 = a2;
  v6 = a3;
  v7 = sub_1000681B8("MagicPairing");
  v8 = objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "recordID"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "zoneID"));
    *(_DWORD *)buf = 138412802;
    v48 = (unint64_t)v6;
    v49 = 2112;
    v50 = v10;
    v51 = 2112;
    v52 = v5;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "fetchAccessoryKeyBlob completion error %@ recordZoneID %@, record: %@", buf, 0x20u);

  }
  p_superclass = (__objc2_class **)(&OBJC_METACLASS___BTSmartRoutingWxDevice + 8);
  if (!v6)
  {
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "recordID"));
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "zoneID"));
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "zoneName"));
    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "recordZoneAccessoryDatabase"));
    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "zoneID"));
    v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "zoneName"));
    v20 = objc_msgSend(v16, "isEqualToString:", v19);

    p_superclass = &OBJC_METACLASS___BTSmartRoutingWxDevice.superclass;
    if (!v20)
      goto LABEL_30;
    v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "encryptedValues"));
    v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "objectForKey:", CFSTR("EncryptedAccessoryBlob")));

    v23 = sub_1000681B8("MagicPairing");
    v24 = objc_claimAutoreleasedReturnValue(v23);
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
    {
      v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "modifiedByDevice"));
      *(_DWORD *)buf = 138412546;
      v48 = (unint64_t)v25;
      v49 = 2112;
      v50 = v22;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "MP: Record Modified by %@: MagicCloudPairingProtectedAccessoryBlob fetch:  encryptedBlob %@", buf, 0x16u);

    }
    if (objc_msgSend(v22, "length") == (id)4)
    {
      v26 = sub_1000681B8("MagicPairing");
      v27 = objc_claimAutoreleasedReturnValue(v26);
      if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "Accessory zone has been upgraded. Dont generate keys", buf, 2u);
      }

      v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "readUserPreference:", CFSTR("MagicCloudPairingManateeUpgradedAccount")));
      if (!v28)
        objc_msgSend(*(id *)(a1 + 32), "setuserPreference:value:sync:", CFSTR("MagicCloudPairingManateeUpgradedAccount"), &__kCFBooleanTrue, 1);
      v29 = (void *)objc_claimAutoreleasedReturnValue(+[MPCloudKit_Manatee sharedInstance](MPCloudKit_Manatee, "sharedInstance"));
      objc_msgSend(v29, "fetchAccessoryKeyBlob:", 0);
    }
    else
    {
      if ((unint64_t)objc_msgSend(v22, "length") < 0x99)
      {
LABEL_29:

        goto LABEL_30;
      }
      v29 = (void *)objc_claimAutoreleasedReturnValue(+[CloudXPCService sharedInstance](CloudXPCService, "sharedInstance"));
      v42 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v29, "deviceManager"));
      objc_msgSend(v42, "addLegacyMagicPairingRecordsWithCloudRecord:userInitiated:completion:", v5, 0, &stru_1001E4600);

    }
    goto LABEL_29;
  }
  if (objc_msgSend(v6, "code") == (id)26 || objc_msgSend(v6, "code") == (id)11)
  {
    v12 = sub_1000681B8("MagicPairing");
    v13 = objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "fetchAccessoryKeyBlob CKErrorZoneNotFound or CKErrorUnknownItem", buf, 2u);
    }

    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10006B340;
    block[3] = &unk_1001E23E8;
    block[4] = *(_QWORD *)(a1 + 32);
    v46 = v6;
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

  }
  else if (objc_msgSend(v6, "code") == (id)6 || objc_msgSend(v6, "code") == (id)7)
  {
    v30 = sub_1000681B8("MagicPairing");
    v31 = objc_claimAutoreleasedReturnValue(v30);
    if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
      sub_10016CE10();

    v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "userInfo"));
    v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v32, "objectForKeyedSubscript:", CKErrorRetryAfterKey));

    if (v33)
    {
      v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "userInfo"));
      v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v34, "objectForKeyedSubscript:", CKErrorRetryAfterKey));
      objc_msgSend(v35, "doubleValue");
      v37 = v36;

      v38 = sub_1000681B8("MagicPairing");
      v39 = objc_claimAutoreleasedReturnValue(v38);
      if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134217984;
        v48 = (unint64_t)v37;
        _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "MP fetchAccessoryKeyBlob CKErrorServiceUnavailable/RateLimited, retry after: %lu", buf, 0xCu);
      }

      v40 = dispatch_time(0, (uint64_t)(v37 * 1000000000.0));
      v44[0] = _NSConcreteStackBlock;
      v44[1] = 3221225472;
      v44[2] = sub_10006B398;
      v44[3] = &unk_1001E3108;
      v41 = *(_QWORD *)(a1 + 40);
      v44[4] = *(_QWORD *)(a1 + 32);
      v44[5] = v41;
      dispatch_after(v40, (dispatch_queue_t)&_dispatch_main_q, v44);
    }
  }
LABEL_30:
  objc_msgSend(*(id *)(a1 + 32), "setIsFetchInProgress:", 0);
  v43 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(p_superclass + 89, "sharedInstance"));
  objc_msgSend(v43, "endTransaction:", CFSTR("fetchAccessoryKeyBlob"));

}

void sub_10006B340(uint64_t a1)
{
  id v2;

  objc_msgSend(*(id *)(a1 + 32), "setShouldPauseFetch:", 1);
  objc_msgSend(*(id *)(a1 + 32), "setPauseErrorReason:", *(_QWORD *)(a1 + 40));
  v2 = (id)objc_claimAutoreleasedReturnValue(+[MPCloudKit_Manatee sharedInstance](MPCloudKit_Manatee, "sharedInstance"));
  objc_msgSend(v2, "fetchAccessoryKeyBlob:", 0);

}

id sub_10006B398(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "fetchAccessoryKeyBlob:", *(_QWORD *)(a1 + 40) + 1);
}

void sub_10006B3A8(id a1, NSError *a2)
{
  NSError *v2;
  os_log_t v3;
  NSObject *v4;

  v2 = a2;
  if (v2)
  {
    v3 = sub_1000681B8("MagicPairing");
    v4 = objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      sub_10016CE70();

  }
}

void sub_10006B70C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  os_log_t v7;
  NSObject *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  os_log_t v13;
  NSObject *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  os_log_t v21;
  NSObject *v22;
  void *v23;
  os_log_t v24;
  NSObject *v25;
  void *v26;
  void *v27;
  uint8_t buf[4];
  void *v29;

  v5 = a2;
  v6 = a3;
  if (v6)
  {
    v7 = sub_1000681B8("MagicPairing");
    v8 = objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      sub_10016CED0();

    objc_msgSend(*(id *)(a1 + 32), "handleModifyMasterKeyError:forBlob:withRetryCount:", v6, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
    goto LABEL_22;
  }
  if (v5)
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "encryptedValues"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKey:", CFSTR("EncryptedAccessoryBlob")));

    if (objc_msgSend(v10, "length") == (id)2
      && (objc_msgSend(v10, "isEqualToData:", *(_QWORD *)(a1 + 40)) & 1) == 0)
    {
      v24 = sub_1000681B8("MagicPairing");
      v25 = objc_claimAutoreleasedReturnValue(v24);
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "Manatee: Accessory zone has been upgraded. Dont modify non-manate master keys", buf, 2u);
      }

      v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "readUserPreference:", CFSTR("MagicCloudPairingManateeUpgradedAccount")));
      if (!v26)
        objc_msgSend(*(id *)(a1 + 32), "setuserPreference:value:sync:", CFSTR("MagicCloudPairingManateeUpgradedAccount"), &__kCFBooleanTrue, 1);
      v19 = (void *)objc_claimAutoreleasedReturnValue(+[MPCloudKit_Manatee sharedInstance](MPCloudKit_Manatee, "sharedInstance"));
      objc_msgSend(v19, "modifyKeyBlob:withRetryCount:", *(_QWORD *)(a1 + 40), 0);
    }
    else
    {
      if (objc_msgSend(v10, "length") != (id)33)
      {
LABEL_21:
        objc_msgSend(*(id *)(a1 + 32), "setIsWriteMasterKeysInProgress:", 0);

        goto LABEL_22;
      }
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "encryptedValues"));
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "objectForKeyedSubscript:", CFSTR("EncryptedMasterKeyBlob")));
      objc_msgSend(*(id *)(a1 + 32), "setMasterBlob:", v12);

      v13 = sub_1000681B8("MagicPairing");
      v14 = objc_claimAutoreleasedReturnValue(v13);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "masterBlob"));
        *(_DWORD *)buf = 138412290;
        v29 = v15;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Fetched existing master key record: encryptedBlob %@", buf, 0xCu);

      }
      v16 = (void *)objc_claimAutoreleasedReturnValue(+[CloudXPCService sharedInstance](CloudXPCService, "sharedInstance"));
      v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "masterBlob"));
      v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionaryWithObjectsAndKeys:](NSMutableDictionary, "dictionaryWithObjectsAndKeys:", v17, CFSTR("kMasterKeyBlob"), 0));
      objc_msgSend(v16, "sendCloudKitMsg:args:", CFSTR("MasterKeysAvailable"), v18);

      v19 = (void *)objc_claimAutoreleasedReturnValue(+[CloudXPCService sharedInstance](CloudXPCService, "sharedInstance"));
      v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "deviceManager"));
      objc_msgSend(v20, "addAccountMagicKeysWithCloudRecord:", v5);

    }
    goto LABEL_21;
  }
  v21 = sub_1000681B8("MagicPairing");
  v22 = objc_claimAutoreleasedReturnValue(v21);
  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
  {
    v23 = *(void **)(a1 + 40);
    *(_DWORD *)buf = 138412290;
    v29 = v23;
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "No master key record found: write new key: %@", buf, 0xCu);
  }

  objc_msgSend(*(id *)(a1 + 32), "writeKeyBlob:withRetryCount:", *(_QWORD *)(a1 + 40), 0);
LABEL_22:
  v27 = (void *)objc_claimAutoreleasedReturnValue(+[CloudXPCService sharedInstance](CloudXPCService, "sharedInstance"));
  objc_msgSend(v27, "endTransaction:", CFSTR("modifyKeyBlob"));

}

id sub_10006BDC4(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "modifyKeyBlob:withRetryCount:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48) + 1);
}

void sub_10006C280(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  _Block_object_dispose(&a21, 8);
  _Block_object_dispose(&a29, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10006C2BC(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_10006C2CC(uint64_t a1)
{

}

void sub_10006C2D4(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  os_log_t v7;
  NSObject *v8;
  void *v9;
  unint64_t v10;
  os_log_t v11;
  NSObject *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  double v18;
  double v19;
  dispatch_time_t v20;
  void *v21;
  id v22;
  uint64_t v23;
  void *v24;
  os_log_t v25;
  NSObject *v26;
  void *v27;
  void *v28;
  uint64_t v29;
  _QWORD v30[5];
  id v31;
  id v32;
  __int128 v33;
  uint64_t v34;
  _QWORD block[5];
  id v36;
  uint64_t v37;
  uint8_t buf[4];
  id v39;
  __int16 v40;
  uint64_t v41;

  v5 = a2;
  v6 = a3;
  if (!v6)
  {
    v25 = sub_1000681B8("MagicPairing");
    v26 = objc_claimAutoreleasedReturnValue(v25);
    if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      v39 = v5;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "writeKeyBlob saveRecordZone record  %@", buf, 0xCu);
    }

    v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "cloudKitDatabase"));
    v30[0] = _NSConcreteStackBlock;
    v30[2] = sub_10006C6C4;
    v30[3] = &unk_1001E4650;
    v34 = *(_QWORD *)(a1 + 80);
    v28 = *(void **)(a1 + 40);
    v30[4] = *(_QWORD *)(a1 + 32);
    v29 = *(_QWORD *)(a1 + 48);
    v30[1] = 3221225472;
    v33 = *(_OWORD *)(a1 + 64);
    v31 = v28;
    v32 = *(id *)(a1 + 56);
    objc_msgSend(v27, "saveRecord:completionHandler:", v29, v30);

    v24 = v31;
    goto LABEL_19;
  }
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40), a3);
  v7 = sub_1000681B8("MagicPairing");
  v8 = objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    v39 = v6;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "writeKeyBlob saveRecordZone: error %@ ", buf, 0xCu);
  }

  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "domain"));
  if (!objc_msgSend(v9, "isEqualToString:", CKErrorDomain)
    || objc_msgSend(v6, "code") != (id)3
    && objc_msgSend(v6, "code") != (id)7
    && objc_msgSend(v6, "code") != (id)4
    && objc_msgSend(v6, "code") != (id)9
    && objc_msgSend(v6, "code") != (id)2
    && objc_msgSend(v6, "code") != (id)6)
  {

    goto LABEL_21;
  }
  v10 = *(_QWORD *)(a1 + 80);

  if (v10 <= 3)
  {
    v11 = sub_1000681B8("MagicPairing");
    v12 = objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      v13 = *(_QWORD *)(a1 + 80);
      *(_DWORD *)buf = 138412546;
      v39 = v6;
      v40 = 2048;
      v41 = v13;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "writeKeyBlob failed with error %@, retry count = %lu", buf, 0x16u);
    }

    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "userInfo"));
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "objectForKeyedSubscript:", CKErrorRetryAfterKey));

    if (v15)
    {
      v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "userInfo"));
      v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "objectForKeyedSubscript:", CKErrorRetryAfterKey));
      objc_msgSend(v17, "doubleValue");
      v19 = v18;

      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24) = 1;
      v20 = dispatch_time(0, (uint64_t)(v19 * 1000000000.0));
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_10006C6B0;
      block[3] = &unk_1001E3460;
      v21 = *(void **)(a1 + 40);
      block[4] = *(_QWORD *)(a1 + 32);
      v22 = v21;
      v23 = *(_QWORD *)(a1 + 80);
      v36 = v22;
      v37 = v23;
      dispatch_after(v20, (dispatch_queue_t)&_dispatch_main_q, block);
      v24 = v36;
LABEL_19:

    }
  }
LABEL_21:

}

id sub_10006C6B0(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "writeKeyBlob:withRetryCount:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48) + 1);
}

void sub_10006C6C4(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  os_log_t v7;
  NSObject *v8;
  NSObject *v9;
  unint64_t v10;
  os_log_t v11;
  NSObject *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  double v18;
  double v19;
  dispatch_time_t v20;
  void *v21;
  id v22;
  uint64_t v23;
  os_log_t v24;
  _QWORD block[5];
  id v26;
  uint64_t v27;
  uint8_t buf[4];
  id v29;
  __int16 v30;
  uint64_t v31;

  v5 = a2;
  v6 = a3;
  if (!v6)
  {
    v24 = sub_1000681B8("MagicPairing");
    v9 = objc_claimAutoreleasedReturnValue(v24);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      v29 = v5;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "MagicCloudPairingProtectedMasterBlob, saveRecord %@", buf, 0xCu);
    }
    goto LABEL_17;
  }
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), a3);
  v7 = sub_1000681B8("MagicPairing");
  v8 = objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    v29 = v6;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "writeKeyBlob saveRecord: error %@ ", buf, 0xCu);
  }

  v9 = objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "domain"));
  if (!-[NSObject isEqualToString:](v9, "isEqualToString:", CKErrorDomain)
    || objc_msgSend(v6, "code") != (id)3
    && objc_msgSend(v6, "code") != (id)7
    && objc_msgSend(v6, "code") != (id)4
    && objc_msgSend(v6, "code") != (id)9
    && objc_msgSend(v6, "code") != (id)2)
  {
LABEL_17:

    goto LABEL_18;
  }
  v10 = *(_QWORD *)(a1 + 72);

  if (v10 <= 3)
  {
    v11 = sub_1000681B8("MagicPairing");
    v12 = objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      v13 = *(_QWORD *)(a1 + 72);
      *(_DWORD *)buf = 138412546;
      v29 = v6;
      v30 = 2048;
      v31 = v13;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "writeKeyBlob:saveRecord failed with error %@, retry count = %lu", buf, 0x16u);
    }

    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "userInfo"));
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "objectForKeyedSubscript:", CKErrorRetryAfterKey));

    if (v15)
    {
      v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "userInfo"));
      v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "objectForKeyedSubscript:", CKErrorRetryAfterKey));
      objc_msgSend(v17, "doubleValue");
      v19 = v18;

      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = 1;
      v20 = dispatch_time(0, (uint64_t)(v19 * 1000000000.0));
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_10006C9F8;
      block[3] = &unk_1001E3460;
      v21 = *(void **)(a1 + 40);
      block[4] = *(_QWORD *)(a1 + 32);
      v22 = v21;
      v23 = *(_QWORD *)(a1 + 72);
      v26 = v22;
      v27 = v23;
      dispatch_after(v20, (dispatch_queue_t)&_dispatch_main_q, block);

    }
  }
LABEL_18:
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 48));

}

id sub_10006C9F8(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "writeKeyBlob:withRetryCount:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48) + 1);
}

void sub_10006CB54(uint64_t a1)
{
  os_log_t v2;
  NSObject *v3;
  uint64_t v4;
  int v5;
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  void *v10;
  _QWORD v11[4];
  id v12;
  uint64_t v13;
  char v14;
  uint8_t buf[4];
  uint64_t v16;
  __int16 v17;
  int v18;

  v2 = sub_1000681B8("MagicPairing");
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(_QWORD *)(a1 + 32);
    v5 = *(unsigned __int8 *)(a1 + 48);
    *(_DWORD *)buf = 138412546;
    v16 = v4;
    v17 = 1024;
    v18 = v5;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "updateCloudKitAccessoryZone with %@, delete: %i", buf, 0x12u);
  }

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "modifyOperationTimer"));
  if (v6)
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "modifyOperationTimer"));
    objc_msgSend(v7, "invalidate");

  }
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_10006CCC0;
  v11[3] = &unk_1001E46C8;
  v8 = *(id *)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 40);
  v12 = v8;
  v13 = v9;
  v14 = *(_BYTE *)(a1 + 48);
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSTimer scheduledTimerWithTimeInterval:repeats:block:](NSTimer, "scheduledTimerWithTimeInterval:repeats:block:", 0, v11, 3.0));
  objc_msgSend(*(id *)(a1 + 40), "setModifyOperationTimer:", v10);

}

void sub_10006CCC0(uint64_t a1, void *a2)
{
  id v3;
  os_log_t v4;
  NSObject *v5;
  uint64_t v6;
  void *v7;
  _QWORD v8[4];
  id v9;
  id v10;
  char v11;
  uint8_t buf[4];
  uint64_t v13;

  v3 = a2;
  v4 = sub_1000681B8("MagicPairing");
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v6 = *(_QWORD *)(a1 + 32);
    *(_DWORD *)buf = 138412290;
    v13 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Updating Accessory Zone Now with %@", buf, 0xCu);
  }

  objc_initWeak((id *)buf, *(id *)(a1 + 40));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "modifyOperationQueue"));
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_10006CE48;
  v8[3] = &unk_1001E46A0;
  v11 = *(_BYTE *)(a1 + 48);
  objc_copyWeak(&v10, (id *)buf);
  v9 = *(id *)(a1 + 32);
  objc_msgSend(v7, "addOperationWithBlock:", v8);

  objc_destroyWeak(&v10);
  objc_destroyWeak((id *)buf);

}

void sub_10006CE1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10006CE48(uint64_t a1)
{
  int v2;
  id WeakRetained;
  id v4;

  v2 = *(unsigned __int8 *)(a1 + 48);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v4 = WeakRetained;
  if (v2)
    objc_msgSend(WeakRetained, "deleteCloudKitAccessoryZone");
  else
    objc_msgSend(WeakRetained, "modifyAccessoryBlob:withRetryCount:", *(_QWORD *)(a1 + 32), 0);

}

void sub_10006D094(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10006D0C0(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  os_log_t v8;
  NSObject *v9;
  void *v10;
  void *v11;
  unsigned __int8 v12;
  os_log_t v13;
  NSObject *v14;
  _BOOL4 v15;
  os_log_t v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  id v23;
  void *v24;
  os_log_t v25;
  NSObject *v26;
  void *v27;
  _BOOL4 v28;
  void *v29;
  _QWORD v30[4];
  id v31;
  id v32;
  id v33[2];
  uint8_t buf[4];
  uint64_t v35;

  v5 = a2;
  v6 = a3;
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (v6)
  {
    v8 = sub_1000681B8("MagicPairing");
    v9 = objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      sub_10016D000();

    objc_msgSend(WeakRetained, "handleAccessoryKeyModifyError:forBlob:withRetryCount:", v6, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 56));
  }
  else if (v5)
  {
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "encryptedValues"));
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("EncryptedAccessoryBlob")));

    if (objc_msgSend(v11, "length") == (id)4
      && (objc_msgSend(v11, "isEqualToData:", *(_QWORD *)(a1 + 40)) & 1) == 0)
    {
      v25 = sub_1000681B8("MagicPairing");
      v26 = objc_claimAutoreleasedReturnValue(v25);
      if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "Master zone has been upgraded. Dont non-manatee accessory keys", buf, 2u);
      }

      v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "readUserPreference:", CFSTR("MagicCloudPairingManateeUpgradedAccount")));
      v28 = v27 == 0;

      if (v28)
        objc_msgSend(WeakRetained, "setuserPreference:value:sync:", CFSTR("MagicCloudPairingManateeUpgradedAccount"), &__kCFBooleanTrue, 1);
      v29 = (void *)objc_claimAutoreleasedReturnValue(+[MPCloudKit_Manatee sharedInstance](MPCloudKit_Manatee, "sharedInstance"));
      objc_msgSend(v29, "modifyAccessoryBlob:withRetryCount:", *(_QWORD *)(a1 + 40), 0);

    }
    else
    {
      v12 = objc_msgSend(v11, "isEqualToData:", *(_QWORD *)(a1 + 40));
      v13 = sub_1000681B8("MagicPairing");
      v14 = objc_claimAutoreleasedReturnValue(v13);
      v15 = os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
      if ((v12 & 1) != 0)
      {
        if (v15)
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Dropping same modify record: MagicCloudPairingProtectedAccessoryBlob", buf, 2u);
        }

      }
      else
      {
        if (v15)
        {
          v19 = *(_QWORD *)(a1 + 40);
          *(_DWORD *)buf = 138412290;
          v35 = v19;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "modify record: MagicCloudPairingProtectedAccessoryBlob fetch:  encryptedBlob %@", buf, 0xCu);
        }

        v20 = *(_QWORD *)(a1 + 40);
        v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "encryptedValues"));
        objc_msgSend(v21, "setObject:forKeyedSubscript:", v20, CFSTR("EncryptedAccessoryBlob"));

        objc_initWeak((id *)buf, WeakRetained);
        v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "cloudKitDatabase"));
        v30[0] = _NSConcreteStackBlock;
        v30[1] = 3221225472;
        v30[2] = sub_10006D4C8;
        v30[3] = &unk_1001E4718;
        v31 = v5;
        objc_copyWeak(v33, (id *)buf);
        v23 = *(id *)(a1 + 40);
        v24 = *(void **)(a1 + 56);
        v32 = v23;
        v33[1] = v24;
        objc_msgSend(v22, "saveRecord:completionHandler:", v31, v30);

        objc_destroyWeak(v33);
        objc_destroyWeak((id *)buf);
      }
    }

  }
  else
  {
    v16 = sub_1000681B8("MagicPairing");
    v17 = objc_claimAutoreleasedReturnValue(v16);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      v18 = *(_QWORD *)(a1 + 40);
      *(_DWORD *)buf = 138412290;
      v35 = v18;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "No record found: write new data: %@", buf, 0xCu);
    }

    objc_msgSend(WeakRetained, "writeAccessoryBlob:withRetryCount:", *(_QWORD *)(a1 + 40), 0);
  }

}

void sub_10006D49C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10006D4C8(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  os_log_t v7;
  NSObject *v8;
  NSObject *v9;
  id WeakRetained;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  _QWORD v16[4];
  id v17;
  uint8_t buf[4];
  id v19;

  v5 = a2;
  v6 = a3;
  v7 = sub_1000681B8("MagicPairing");
  v8 = objc_claimAutoreleasedReturnValue(v7);
  v9 = v8;
  if (v6)
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      sub_10016D060();

    WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
    objc_msgSend(WeakRetained, "handleAccessoryKeyModifyError:forBlob:withRetryCount:", v6, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 56));
  }
  else
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      v19 = v5;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Successfully saved the modified record - %@", buf, 0xCu);
    }

    v11 = (void *)objc_claimAutoreleasedReturnValue(+[CloudXPCService sharedInstance](CloudXPCService, "sharedInstance"));
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "deviceManager"));
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472;
    v16[2] = sub_10006D6CC;
    v16[3] = &unk_1001E2110;
    v17 = v5;
    objc_msgSend(v12, "addLegacyMagicPairingRecordsWithCloudRecord:userInitiated:completion:", v17, 1, v16);

    v13 = (void *)objc_claimAutoreleasedReturnValue(+[CloudXPCService sharedInstance](CloudXPCService, "sharedInstance"));
    v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", 1));
    v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionaryWithObjectsAndKeys:](NSMutableDictionary, "dictionaryWithObjectsAndKeys:", v14, CFSTR("kUploadStatus"), 0));
    objc_msgSend(v13, "sendCloudKitMsg:args:", CFSTR("DeviceInfoUploadStatus"), v15);

    WeakRetained = v17;
  }

}

void sub_10006D6CC(uint64_t a1, void *a2)
{
  id v2;
  os_log_t v3;
  NSObject *v4;

  v2 = a2;
  if (v2)
  {
    v3 = sub_1000681B8("MagicPairing");
    v4 = objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      sub_10016D0C0();

  }
}

void sub_10006DC88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,id location)
{
  id *v25;

  objc_destroyWeak(v25);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10006DCB4(uint64_t a1)
{
  void *v2;
  id v3;
  void *v4;
  _QWORD v5[4];
  id v6;
  id v7[2];
  id location;

  objc_initWeak(&location, *(id *)(a1 + 32));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "modifyOperationQueue"));
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10006DD9C;
  v5[3] = &unk_1001E4740;
  objc_copyWeak(v7, &location);
  v3 = *(id *)(a1 + 40);
  v4 = *(void **)(a1 + 48);
  v6 = v3;
  v7[1] = v4;
  objc_msgSend(v2, "addOperationWithBlock:", v5);

  objc_destroyWeak(v7);
  objc_destroyWeak(&location);
}

void sub_10006DD78(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_10006DD9C(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "modifyAccessoryBlob:withRetryCount:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 48) + 1);

}

void sub_10006DDE0(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "writeAccessoryBlob:withRetryCount:", *(_QWORD *)(a1 + 32), 0);

}

void sub_10006E15C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  os_log_t v7;
  NSObject *v8;
  os_log_t v9;
  NSObject *v10;
  void *v11;
  void *v12;
  id v13;
  uint64_t v14;
  void *v15;
  _QWORD v16[5];
  id v17;
  id v18;
  uint64_t v19;
  _QWORD block[5];
  uint8_t buf[4];
  id v22;

  v5 = a2;
  v6 = a3;
  if (v6)
  {
    v7 = sub_1000681B8("MagicPairing");
    v8 = objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      v22 = v6;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "writeAccessoryBlob saveRecordZone: error %@ ", buf, 0xCu);
    }

  }
  else
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10006E378;
    block[3] = &unk_1001E20E8;
    block[4] = *(_QWORD *)(a1 + 32);
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);
    v9 = sub_1000681B8("MagicPairing");
    v10 = objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      v22 = v5;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "saveRecordZone record %@, resume fetches", buf, 0xCu);
    }

    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "modifyOperationQueue"));
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472;
    v16[2] = sub_10006E3A8;
    v16[3] = &unk_1001E4790;
    v12 = *(void **)(a1 + 40);
    v16[4] = *(_QWORD *)(a1 + 32);
    v13 = v12;
    v14 = *(_QWORD *)(a1 + 64);
    v17 = v13;
    v19 = v14;
    v18 = *(id *)(a1 + 48);
    objc_msgSend(v11, "addOperationWithBlock:", v16);

  }
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 56));
  v15 = (void *)objc_claimAutoreleasedReturnValue(+[CloudXPCService sharedInstance](CloudXPCService, "sharedInstance"));
  objc_msgSend(v15, "endTransaction:", CFSTR("WriteAccessoryBlob"));

}

id sub_10006E378(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "setShouldPauseFetch:", 0);
  return objc_msgSend(*(id *)(a1 + 32), "setPauseErrorReason:", 0);
}

void sub_10006E3A8(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  _QWORD v6[5];
  id v7;
  uint64_t v8;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "cloudKitDatabase"));
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10006E444;
  v6[3] = &unk_1001E4628;
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(void **)(a1 + 48);
  v8 = *(_QWORD *)(a1 + 56);
  v6[4] = v3;
  v7 = v5;
  objc_msgSend(v2, "saveRecord:completionHandler:", v4, v6);

}

void sub_10006E444(_QWORD *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  os_log_t v7;
  NSObject *v8;
  NSObject *v9;
  os_log_t v10;
  NSObject *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  os_log_t v19;
  NSObject *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  double v27;
  double v28;
  os_log_t v29;
  NSObject *v30;
  uint64_t v31;
  dispatch_time_t v32;
  void *v33;
  id v34;
  uint64_t v35;
  id v36;
  void **v37;
  uint64_t v38;
  void (*v39)(uint64_t, void *);
  void *v40;
  id v41;
  _QWORD block[5];
  id v43;
  uint64_t v44;
  uint8_t buf[4];
  id v46;
  __int16 v47;
  uint64_t v48;
  __int16 v49;
  unint64_t v50;

  v5 = a2;
  v6 = a3;
  v7 = sub_1000681B8("MagicPairing");
  v8 = objc_claimAutoreleasedReturnValue(v7);
  v9 = v8;
  if (!v6)
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      v46 = v5;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "writeAccessoryBlob createRecordZone record  %@", buf, 0xCu);
    }

    v12 = (void *)objc_claimAutoreleasedReturnValue(+[CloudXPCService sharedInstance](CloudXPCService, "sharedInstance"));
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "deviceManager"));
    v37 = _NSConcreteStackBlock;
    v38 = 3221225472;
    v39 = sub_10006E998;
    v40 = &unk_1001E2110;
    v41 = v5;
    objc_msgSend(v13, "addLegacyMagicPairingRecordsWithCloudRecord:userInitiated:completion:", v41, 1, &v37);

    v14 = (void *)objc_claimAutoreleasedReturnValue(+[CloudXPCService sharedInstance](CloudXPCService, "sharedInstance"));
    v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", 1));
    v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionaryWithObjectsAndKeys:](NSMutableDictionary, "dictionaryWithObjectsAndKeys:", v15, CFSTR("kUploadStatus"), 0, v37, v38, v39, v40));
    objc_msgSend(v14, "sendCloudKitMsg:args:", CFSTR("DeviceInfoUploadStatus"), v16);

    v17 = v41;
    goto LABEL_10;
  }
  if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    sub_10016D360();

  if (a1[6] >= 5uLL)
  {
    v10 = sub_1000681B8("MagicPairing");
    v11 = objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      sub_10016D2A0();
LABEL_19:

    goto LABEL_20;
  }
  v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "domain"));
  if (objc_msgSend(v18, "isEqualToString:", CKErrorDomain))
  {
    if (objc_msgSend(v6, "code") == (id)3 || objc_msgSend(v6, "code") == (id)4 || objc_msgSend(v6, "code") == (id)9)
    {

LABEL_16:
      v19 = sub_1000681B8("MagicPairing");
      v20 = objc_claimAutoreleasedReturnValue(v19);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
        sub_10016D300();

      v11 = objc_claimAutoreleasedReturnValue(+[CloudXPCService sharedInstance](CloudXPCService, "sharedInstance"));
      v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", 0));
      v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionaryWithObjectsAndKeys:](NSMutableDictionary, "dictionaryWithObjectsAndKeys:", v21, CFSTR("kUploadStatus"), 0));
      -[NSObject sendCloudKitMsg:args:](v11, "sendCloudKitMsg:args:", CFSTR("DeviceInfoUploadStatus"), v22);

      goto LABEL_19;
    }
    v36 = objc_msgSend(v6, "code");

    if (v36 == (id)6)
      goto LABEL_16;
  }
  else
  {

  }
  if (objc_msgSend(v6, "code") == (id)7)
  {
    v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "userInfo"));
    v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "objectForKeyedSubscript:", CKErrorRetryAfterKey));

    if (v24)
    {
      v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "userInfo"));
      v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "objectForKeyedSubscript:", CKErrorRetryAfterKey));
      objc_msgSend(v26, "doubleValue");
      v28 = v27 + 5.0;

      v29 = sub_1000681B8("MagicPairing");
      v30 = objc_claimAutoreleasedReturnValue(v29);
      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
      {
        v31 = a1[6];
        *(_DWORD *)buf = 138412802;
        v46 = v6;
        v47 = 2048;
        v48 = v31;
        v49 = 2048;
        v50 = (unint64_t)v28;
        _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "writeAccessoryBlob failed with error %@, retry count = %lu, retry time: %lu", buf, 0x20u);
      }

      v32 = dispatch_time(0, (uint64_t)(v28 * 1000000000.0));
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_10006E8F8;
      block[3] = &unk_1001E3460;
      v33 = (void *)a1[5];
      block[4] = a1[4];
      v34 = v33;
      v35 = a1[6];
      v43 = v34;
      v44 = v35;
      dispatch_after(v32, (dispatch_queue_t)&_dispatch_main_q, block);
      v17 = v43;
LABEL_10:

    }
  }
LABEL_20:

}

void sub_10006E8F8(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  uint64_t v5;
  _QWORD v6[5];
  id v7;
  uint64_t v8;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "modifyOperationQueue"));
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10006E984;
  v6[3] = &unk_1001E3460;
  v3 = *(void **)(a1 + 40);
  v6[4] = *(_QWORD *)(a1 + 32);
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 48);
  v7 = v4;
  v8 = v5;
  objc_msgSend(v2, "addOperationWithBlock:", v6);

}

id sub_10006E984(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "modifyAccessoryBlob:withRetryCount:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48) + 1);
}

void sub_10006E998(uint64_t a1, void *a2)
{
  id v2;
  os_log_t v3;
  NSObject *v4;

  v2 = a2;
  if (v2)
  {
    v3 = sub_1000681B8("MagicPairing");
    v4 = objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      sub_10016D3CC();

  }
}

void sub_10006EC0C(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  os_log_t v5;
  NSObject *v6;
  _BOOL4 v7;
  const char *v8;
  NSObject *v9;
  uint32_t v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  uint8_t buf[4];
  id v17;

  v4 = a3;
  v5 = sub_1000681B8("MagicPairing");
  v6 = objc_claimAutoreleasedReturnValue(v5);
  v7 = os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
  if (v4)
  {
    if (v7)
    {
      *(_DWORD *)buf = 138412290;
      v17 = v4;
      v8 = "deleteCloudKitAccessoryZone: error %@ ";
      v9 = v6;
      v10 = 12;
LABEL_6:
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, v8, buf, v10);
    }
  }
  else if (v7)
  {
    *(_WORD *)buf = 0;
    v8 = "Successfully deleted record";
    v9 = v6;
    v10 = 2;
    goto LABEL_6;
  }

  v11 = (void *)objc_claimAutoreleasedReturnValue(+[CloudXPCService sharedInstance](CloudXPCService, "sharedInstance"));
  v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v4 == 0, CFSTR("kUploadStatus")));
  v15 = v12;
  v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v15, &v14, 1));
  objc_msgSend(v11, "sendCloudKitMsg:args:", CFSTR("DeviceInfoUploadStatus"), v13);

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_10006ED8C(id a1, NSError *a2)
{
  NSError *v2;
  os_log_t v3;
  NSObject *v4;

  v2 = a2;
  v3 = sub_1000681B8("MagicPairing");
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    sub_10016D42C();

}

void sub_10006F1F0(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  os_log_t v7;
  NSObject *v8;
  NSObject *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  void *v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  _BYTE *v19;
  char *v20;
  int64_t v21;
  void *v22;
  os_log_t v23;
  NSObject *v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  int v28;
  id v29;

  v5 = a2;
  v6 = a3;
  v7 = sub_1000681B8("MagicPairing");
  v8 = objc_claimAutoreleasedReturnValue(v7);
  v9 = v8;
  if (v6)
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      sub_10016D4EC();

    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "userInfo"));
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "objectForKeyedSubscript:", NSUnderlyingErrorKey));

    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "domain"));
    if (!objc_msgSend(v12, "isEqualToString:", CKErrorDomain)
      || !CKErrorIsCode(v6, 15)
      || !v11)
    {
      goto LABEL_12;
    }
    v13 = objc_msgSend(v11, "code");

    if (v13 == (id)2032 && *(_QWORD *)(a1 + 32))
    {
      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "localizedDescription"));
      v15 = objc_msgSend(v14, "rangeOfString:", CFSTR("'"));
      v17 = v16;

      v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "localizedDescription"));
      v19 = objc_msgSend(v18, "rangeOfString:options:", CFSTR("'"), 4);

      v20 = &v15[v17];
      v21 = v19 - &v15[v17];
      v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "localizedDescription"));
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "substringWithRange:", v20, v21));

      v23 = sub_1000681B8("MagicPairing");
      v24 = objc_claimAutoreleasedReturnValue(v23);
      if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
        sub_10016D48C();

      objc_msgSend(*(id *)(a1 + 40), "verifyAndCacheSubscriptionID:", v12);
LABEL_12:

    }
  }
  else
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      v28 = 138412290;
      v29 = v5;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "saveSubscription record  %@", (uint8_t *)&v28, 0xCu);
    }

    v27 = a1 + 32;
    v25 = *(_QWORD *)(a1 + 32);
    v26 = *(void **)(v27 + 8);
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "subscriptionID"));
    objc_msgSend(v26, "setuserPreference:value:sync:", v25, v11, 1);
  }

}

void sub_10006F694(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  os_log_t v7;
  NSObject *v8;
  NSObject *v9;
  NSObject *v10;
  id v11;
  void *v12;
  void *v13;
  unsigned int v14;
  os_log_t v15;
  NSObject *v16;
  void *v17;
  uint64_t v18;
  void *v19;
  int v20;
  id v21;

  v5 = a2;
  v6 = a3;
  v7 = sub_1000681B8("MagicPairing");
  v8 = objc_claimAutoreleasedReturnValue(v7);
  v9 = v8;
  if (v6)
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      sub_10016D5AC();

    v10 = objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "domain"));
    if (-[NSObject isEqualToString:](v10, "isEqualToString:", CKErrorDomain))
    {
      v11 = objc_msgSend(v6, "code");

      if (v11 == (id)26)
      {
        objc_msgSend(*(id *)(a1 + 40), "removeuserPreference:sync:", *(_QWORD *)(a1 + 48), 1);
        objc_msgSend(*(id *)(a1 + 40), "createSubscritionForRecordType:", *(_QWORD *)(a1 + 56));
      }
      goto LABEL_16;
    }
LABEL_15:

    goto LABEL_16;
  }
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    v20 = 138412290;
    v21 = v5;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Found existing subscription - %@", (uint8_t *)&v20, 0xCu);
  }

  v12 = *(void **)(a1 + 32);
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "subscriptionID"));
  v14 = objc_msgSend(v12, "isEqualToString:", v13);

  v15 = sub_1000681B8("MagicPairing");
  v16 = objc_claimAutoreleasedReturnValue(v15);
  v10 = v16;
  if (!v14)
  {
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      sub_10016D54C();
    goto LABEL_15;
  }
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    v20 = 138412290;
    v21 = v5;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Manatee: Already created this subscription - %@", (uint8_t *)&v20, 0xCu);
  }

  v17 = *(void **)(a1 + 40);
  v18 = *(_QWORD *)(a1 + 48);
  v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "subscriptionID"));
  objc_msgSend(v17, "setuserPreference:value:sync:", v18, v19, 1);

  objc_msgSend(*(id *)(a1 + 40), "setCloudSubscription:", v5);
LABEL_16:

}

void sub_10006FA18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10006FA44(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  id WeakRetained;
  os_log_t v7;
  NSObject *v8;
  void *v9;
  void *v10;
  os_log_t v11;
  NSObject *v12;
  void *v13;
  os_log_t v14;
  NSObject *v15;
  int v16;
  id v17;

  v5 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    if (!a3)
    {
      v7 = sub_1000681B8("MagicPairing");
      v8 = objc_claimAutoreleasedReturnValue(v7);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        v16 = 138412290;
        v17 = v5;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Found subscription - %@", (uint8_t *)&v16, 0xCu);
      }

      v9 = *(void **)(a1 + 32);
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "subscriptionID"));
      LODWORD(v9) = objc_msgSend(v9, "isEqualToString:", v10);

      if ((_DWORD)v9)
      {
        v11 = sub_1000681B8("MagicPairing");
        v12 = objc_claimAutoreleasedReturnValue(v11);
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
        {
          v16 = 138412290;
          v17 = v5;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Already have subscription - %@", (uint8_t *)&v16, 0xCu);
        }

        v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "subscriptionID"));
        objc_msgSend(WeakRetained, "setuserPreference:value:sync:", CFSTR("MagicCloudPairingAccessorySubscriptionID"), v13, 1);

        objc_msgSend(WeakRetained, "setCloudSubscription:", v5);
      }
    }
  }
  else
  {
    v14 = sub_1000681B8("MagicPairing");
    v15 = objc_claimAutoreleasedReturnValue(v14);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      sub_10016D60C();

  }
}

void sub_10006FD80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  id *v17;
  uint64_t v18;

  objc_destroyWeak(v17);
  objc_destroyWeak((id *)(v18 - 64));
  _Block_object_dispose(&a17, 8);
  _Unwind_Resume(a1);
}

void sub_10006FDC0(uint64_t a1, void *a2, void *a3)
{
  id v5;
  os_log_t v6;
  NSObject *v7;
  id v8;
  id v9;
  uint64_t v10;
  void *i;
  void *v12;
  uint64_t v13;
  id v14;
  void *v15;
  unsigned int v16;
  os_log_t v17;
  NSObject *v18;
  void *v19;
  void *v20;
  void *v21;
  id v22;
  id val;
  _QWORD v24[4];
  id v25;
  id v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint8_t buf[4];
  id v32;
  __int16 v33;
  id v34;
  _BYTE v35[128];

  v5 = a2;
  v22 = a3;
  val = objc_loadWeakRetained((id *)(a1 + 48));
  v6 = sub_1000681B8("MagicPairing");
  v7 = objc_claimAutoreleasedReturnValue(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    v32 = v5;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "fetchAllSubscriptionsWithCompletionHandler: error %@ ", buf, 0xCu);
  }

  v29 = 0u;
  v30 = 0u;
  v27 = 0u;
  v28 = 0u;
  v8 = v5;
  v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v27, v35, 16);
  if (v9)
  {
    v10 = *(_QWORD *)v28;
    do
    {
      for (i = 0; i != v9; i = (char *)i + 1)
      {
        if (*(_QWORD *)v28 != v10)
          objc_enumerationMutation(v8);
        v12 = *(void **)(*((_QWORD *)&v27 + 1) + 8 * (_QWORD)i);
        v13 = objc_opt_class(CKRecordZoneSubscription);
        if ((objc_opt_isKindOfClass(v12, v13) & 1) != 0)
        {
          v14 = v12;
          v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "recordType"));
          v16 = objc_msgSend(v15, "isEqualToString:", *(_QWORD *)(a1 + 32));

          if (v16)
          {
            *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
            v17 = sub_1000681B8("MagicPairing");
            v18 = objc_claimAutoreleasedReturnValue(v17);
            if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
            {
              v19 = *(void **)(a1 + 32);
              *(_DWORD *)buf = 138412546;
              v32 = v19;
              v33 = 2112;
              v34 = v14;
              _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Delete Subscription for record type: %@ and sub: %@", buf, 0x16u);
            }

            objc_initWeak((id *)buf, val);
            v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(val, "cloudKitDatabase"));
            v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "subscriptionID"));
            v24[0] = _NSConcreteStackBlock;
            v24[1] = 3221225472;
            v24[2] = sub_100070110;
            v24[3] = &unk_1001E48A0;
            v25 = *(id *)(a1 + 32);
            objc_copyWeak(&v26, (id *)buf);
            objc_msgSend(v20, "deleteSubscriptionWithID:completionHandler:", v21, v24);

            objc_destroyWeak(&v26);
            objc_destroyWeak((id *)buf);
          }

        }
      }
      v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v27, v35, 16);
    }
    while (v9);
  }

  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24))
    objc_msgSend(val, "setuserPreference:value:sync:", CFSTR("MagicPairingMasterKeySubscriptionDisabled"), &__kCFBooleanTrue, 1);

}

void sub_1000700E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,id location)
{
  id *v29;

  objc_destroyWeak(v29);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100070110(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  os_log_t v7;
  NSObject *WeakRetained;
  _BOOL4 v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  __int16 v14;
  id v15;

  v5 = a2;
  v6 = a3;
  v7 = sub_1000681B8("MagicPairing");
  WeakRetained = objc_claimAutoreleasedReturnValue(v7);
  v9 = os_log_type_enabled(WeakRetained, OS_LOG_TYPE_DEFAULT);
  if (v6)
  {
    if (v9)
    {
      v10 = *(_QWORD *)(a1 + 32);
      v12 = 138412546;
      v13 = v10;
      v14 = 2112;
      v15 = v6;
      _os_log_impl((void *)&_mh_execute_header, WeakRetained, OS_LOG_TYPE_DEFAULT, "Error Deleting Subscription for record type: %@ with error: %@ ", (uint8_t *)&v12, 0x16u);
    }
  }
  else
  {
    if (v9)
    {
      v11 = *(_QWORD *)(a1 + 32);
      v12 = 138412546;
      v13 = v11;
      v14 = 2112;
      v15 = v5;
      _os_log_impl((void *)&_mh_execute_header, WeakRetained, OS_LOG_TYPE_DEFAULT, "Successfully deleted Subscription for record type - %@ with ID - %@", (uint8_t *)&v12, 0x16u);
    }

    WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
    -[NSObject setuserPreference:value:sync:](WeakRetained, "setuserPreference:value:sync:", CFSTR("MagicPairingMasterKeySubscriptionDisabled"), &__kCFBooleanTrue, 1);
  }

}

void sub_1000704BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000704E8(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  os_log_t v7;
  NSObject *v8;
  uint64_t v9;
  void *v10;
  id v11;
  int v12;
  id v13;

  v5 = a2;
  v6 = a3;
  if (v6)
  {
    v7 = sub_1000681B8("MagicPairing");
    v8 = objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      v12 = 138412290;
      v13 = v6;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Error getting server preferred push environment %@", (uint8_t *)&v12, 0xCu);
    }

  }
  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v10 = *(void **)(v9 + 40);
  *(_QWORD *)(v9 + 40) = v5;
  v11 = v5;

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_100070CB4(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 160), 8);
  _Unwind_Resume(a1);
}

void sub_100070CF0(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v8;
  id v9;
  id v10;
  void *v11;
  void *v12;
  unsigned int v13;
  uint64_t v14;
  void *v15;
  unsigned int v16;
  uint64_t v17;
  os_log_t v18;
  NSObject *v19;
  int v20;
  os_log_t v21;
  _BOOL4 v22;
  void *v23;
  void *v24;
  void *v25;
  int v26;
  id v27;
  __int16 v28;
  void *v29;

  v8 = a2;
  v9 = a3;
  v10 = a4;
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "recordName"));
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "recordName"));
  v13 = objc_msgSend(v11, "isEqual:", v12);

  if (v13)
  {
    v14 = *(_QWORD *)(a1 + 48);
  }
  else
  {
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "recordName"));
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "recordName"));
    v16 = objc_msgSend(v15, "isEqual:", v12);

    if (!v16)
      goto LABEL_6;
    v14 = *(_QWORD *)(a1 + 56);
  }
  objc_storeStrong((id *)(*(_QWORD *)(v14 + 8) + 40), a2);
LABEL_6:
  if (v10)
  {
    v18 = sub_1000681B8("MagicPairing");
    v19 = objc_claimAutoreleasedReturnValue(v18);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      sub_10016D638();
  }
  else
  {
    v20 = IsAppleInternalBuild(v17);
    v21 = sub_1000681B8("MagicPairing");
    v19 = objc_claimAutoreleasedReturnValue(v21);
    v22 = os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT);
    if (v20)
    {
      if (v22)
      {
        v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "encryptedValues"));
        v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "objectForKeyedSubscript:", CFSTR("EncryptedMasterKeyBlob")));
        v25 = v24;
        if (!v24)
        {
          v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "encryptedValues"));
          v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "objectForKeyedSubscript:", CFSTR("EncryptedAccessoryBlob")));
        }
        v26 = 138412546;
        v27 = v8;
        v28 = 2112;
        v29 = v25;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, " >>> Successfully fetched LegacyNonManateeContainer Record %@, %@", (uint8_t *)&v26, 0x16u);
        if (!v24)
        {

        }
      }
    }
    else if (v22)
    {
      LOWORD(v26) = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, " >>> Successfully fetched LegacyNonManateeContainer Record", (uint8_t *)&v26, 2u);
    }
  }

}

void sub_100070F58(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  unsigned int v7;
  id v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  unsigned int v14;
  id v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  id v20;
  void *v21;
  void *v22;
  void *v23;
  id v24;
  _QWORD v25[5];
  __int128 v26;
  uint64_t v27;
  int v28;
  __int16 v29;
  _QWORD v30[2];

  v29 = -1;
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", &v29, 2));
  v28 = -1;
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", &v28, 4));
  v4 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40);
  if (v4)
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "encryptedValues"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("EncryptedMasterKeyBlob")));
    v7 = objc_msgSend(v2, "isEqualToData:", v6);

    if (v7)
      goto LABEL_7;
  }
  else
  {
    v8 = objc_msgSend(objc_alloc((Class)CKRecord), "initWithRecordType:recordID:", CFSTR("MasterKey"), *(_QWORD *)(a1 + 40));
    v9 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
    v10 = *(void **)(v9 + 40);
    *(_QWORD *)(v9 + 40) = v8;

  }
  v11 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 40);
  if (!v11)
  {
    v15 = objc_msgSend(objc_alloc((Class)CKRecord), "initWithRecordType:recordID:", CFSTR("AccessoryDatabase"), *(_QWORD *)(a1 + 48));
    v16 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8);
    v17 = *(void **)(v16 + 40);
    *(_QWORD *)(v16 + 40) = v15;

    goto LABEL_9;
  }
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "encryptedValues"));
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "objectForKeyedSubscript:", CFSTR("EncryptedAccessoryBlob")));
  v14 = objc_msgSend(v3, "isEqualToData:", v13);

  if (!v14)
  {
LABEL_9:
    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40), "encryptedValues"));
    objc_msgSend(v18, "setObject:forKeyedSubscript:", v2, CFSTR("EncryptedMasterKeyBlob"));

    v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 40), "encryptedValues"));
    objc_msgSend(v19, "setObject:forKeyedSubscript:", v3, CFSTR("EncryptedAccessoryBlob"));

    v20 = objc_alloc((Class)CKModifyRecordZonesOperation);
    v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "recordZoneBlob"));
    v30[0] = v21;
    v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "recordZoneAccessoryDatabase"));
    v30[1] = v22;
    v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v30, 2));
    v24 = objc_msgSend(v20, "initWithRecordZonesToSave:recordZoneIDsToDelete:", v23, 0);

    v25[0] = _NSConcreteStackBlock;
    v25[1] = 3221225472;
    v25[2] = sub_100071258;
    v25[3] = &unk_1001E4968;
    v27 = *(_QWORD *)(a1 + 72);
    v25[4] = *(_QWORD *)(a1 + 32);
    v26 = *(_OWORD *)(a1 + 56);
    objc_msgSend(v24, "setModifyRecordZonesCompletionBlock:", v25);
    objc_msgSend(*(id *)(a1 + 56), "addOperation:", v24);

    goto LABEL_10;
  }
LABEL_7:
  objc_msgSend(*(id *)(a1 + 32), "setuserPreference:value:sync:", CFSTR("MagicCloudPairingManateeUpgradedAccount"), &__kCFBooleanTrue, 1);
LABEL_10:

}

void sub_100071258(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v5;
  os_log_t v6;
  NSObject *v7;
  _BOOL4 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  void *v18;
  _QWORD v19[5];
  _QWORD v20[2];

  v5 = a4;
  v6 = sub_1000681B8("MagicPairing");
  v7 = objc_claimAutoreleasedReturnValue(v6);
  v8 = os_log_type_enabled(v7, OS_LOG_TYPE_ERROR);
  if (v5)
  {
    if (v8)
      sub_10016D700();
  }
  else
  {
    if (v8)
      sub_10016D698(v7, v9, v10, v11, v12, v13, v14, v15);

    v16 = objc_alloc((Class)CKModifyRecordsOperation);
    v17 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40);
    v20[0] = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40);
    v20[1] = v17;
    v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v20, 2));
    v7 = objc_msgSend(v16, "initWithRecordsToSave:recordIDsToDelete:", v18, 0);

    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472;
    v19[2] = sub_1000713B0;
    v19[3] = &unk_1001E4940;
    v19[4] = *(_QWORD *)(a1 + 32);
    -[NSObject setModifyRecordsCompletionBlock:](v7, "setModifyRecordsCompletionBlock:", v19);
    objc_msgSend(*(id *)(a1 + 40), "addOperation:", v7);
  }

}

void sub_1000713B0(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  os_log_t v10;
  NSObject *v11;
  NSObject *v12;
  uint64_t v13;
  id v14;
  id v15;
  uint64_t v16;
  void *i;
  void *v18;
  os_log_t v19;
  NSObject *v20;
  void *v21;
  NSObject *v22;
  NSObject *v23;
  void *v24;
  os_log_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  id v29;
  id obj;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint8_t buf[4];
  id v36;
  __int16 v37;
  NSObject *v38;
  _BYTE v39[128];

  v7 = a2;
  v8 = a3;
  v9 = a4;
  v10 = sub_1000681B8("MagicPairing");
  v11 = objc_claimAutoreleasedReturnValue(v10);
  v12 = v11;
  if (v9)
  {
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      sub_10016D760();
LABEL_4:

    goto LABEL_23;
  }
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    v36 = v7;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, " >>> Successfully Marked LegacyNonManateeContainer Migrated %@", buf, 0xCu);
  }

  if (IsAppleInternalBuild(v13))
  {
    v26 = a1;
    v27 = 0;
    v28 = v8;
    v29 = v7;
    v33 = 0u;
    v34 = 0u;
    v31 = 0u;
    v32 = 0u;
    obj = v7;
    v14 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v31, v39, 16);
    if (v14)
    {
      v15 = v14;
      v16 = *(_QWORD *)v32;
      do
      {
        for (i = 0; i != v15; i = (char *)i + 1)
        {
          if (*(_QWORD *)v32 != v16)
            objc_enumerationMutation(obj);
          v18 = *(void **)(*((_QWORD *)&v31 + 1) + 8 * (_QWORD)i);
          v19 = sub_1000681B8("MagicPairing");
          v20 = objc_claimAutoreleasedReturnValue(v19);
          if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
          {
            v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "encryptedValues"));
            v22 = objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "objectForKeyedSubscript:", CFSTR("EncryptedMasterKeyBlob")));
            v23 = v22;
            if (!v22)
            {
              a3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "encryptedValues"));
              v12 = objc_claimAutoreleasedReturnValue(objc_msgSend(a3, "objectForKeyedSubscript:", CFSTR("EncryptedAccessoryBlob")));
              v23 = v12;
            }
            *(_DWORD *)buf = 138412546;
            v36 = v18;
            v37 = 2112;
            v38 = v23;
            _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, " >>> Successfully Marked LegacyNonManateeContainer Record %@, %@", buf, 0x16u);
            if (!v22)
            {

            }
          }

        }
        v15 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v31, v39, 16);
      }
      while (v15);
    }

    v8 = v28;
    v7 = v29;
    v9 = 0;
  }
  v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "readUserPreference:", CFSTR("MagicCloudPairingManateeUpgradedAccount"), v26, v27, v28, v29));

  if (!v24)
  {
    objc_msgSend(*(id *)(a1 + 32), "setuserPreference:value:sync:", CFSTR("MagicCloudPairingManateeUpgradedAccount"), &__kCFBooleanTrue, 1);
    v25 = sub_1000681B8("MagicPairing");
    v12 = objc_claimAutoreleasedReturnValue(v25);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, ">>> Successfully Marked Defaults for Legacy Container zone upgraded successfully", buf, 2u);
    }
    goto LABEL_4;
  }
LABEL_23:

}

void sub_100071B14(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 160), 8);
  _Unwind_Resume(a1);
}

void sub_100071B48(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v8;
  id v9;
  id v10;
  void *v11;
  void *v12;
  unsigned int v13;
  uint64_t v14;
  void *v15;
  unsigned int v16;
  uint64_t v17;
  os_log_t v18;
  NSObject *v19;
  int v20;
  os_log_t v21;
  _BOOL4 v22;
  void *v23;
  void *v24;
  void *v25;
  int v26;
  id v27;
  __int16 v28;
  void *v29;

  v8 = a2;
  v9 = a3;
  v10 = a4;
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "recordName"));
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "recordName"));
  v13 = objc_msgSend(v11, "isEqual:", v12);

  if (v13)
  {
    v14 = *(_QWORD *)(a1 + 48);
  }
  else
  {
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "recordName"));
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "recordName"));
    v16 = objc_msgSend(v15, "isEqual:", v12);

    if (!v16)
      goto LABEL_6;
    v14 = *(_QWORD *)(a1 + 56);
  }
  objc_storeStrong((id *)(*(_QWORD *)(v14 + 8) + 40), a2);
LABEL_6:
  if (v10)
  {
    v18 = sub_1000681B8("MagicPairing");
    v19 = objc_claimAutoreleasedReturnValue(v18);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      sub_10016D638();
  }
  else
  {
    v20 = IsAppleInternalBuild(v17);
    v21 = sub_1000681B8("MagicPairing");
    v19 = objc_claimAutoreleasedReturnValue(v21);
    v22 = os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT);
    if (v20)
    {
      if (v22)
      {
        v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "encryptedValues"));
        v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "objectForKeyedSubscript:", CFSTR("EncryptedMasterKeyBlob")));
        v25 = v24;
        if (!v24)
        {
          v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "encryptedValues"));
          v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "objectForKeyedSubscript:", CFSTR("EncryptedAccessoryBlob")));
        }
        v26 = 138412546;
        v27 = v8;
        v28 = 2112;
        v29 = v25;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, " >>> Successfully fetched LegacyNonManateeContainer Record %@, %@", (uint8_t *)&v26, 0x16u);
        if (!v24)
        {

        }
      }
    }
    else if (v22)
    {
      LOWORD(v26) = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, " >>> Successfully fetched LegacyNonManateeContainer Record", (uint8_t *)&v26, 2u);
    }
  }

}

void sub_100071DB0(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  NSObject *v14;
  __int128 v15;
  os_log_t v16;
  os_log_t v17;
  _QWORD v18[4];
  id v19;
  id v20;
  __int128 v21;
  __int128 v22;
  _QWORD v23[2];

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40), "encryptedValues"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectForKeyedSubscript:", CFSTR("EncryptedMasterKeyBlob")));
  v4 = objc_msgSend(v3, "length");

  if (v4 == (id)33)
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 40), "encryptedValues"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("EncryptedAccessoryBlob")));
    v7 = objc_msgSend(v6, "length");

    if ((unint64_t)v7 <= 0x99)
    {
      v17 = sub_1000681B8("MagicPairing");
      v14 = objc_claimAutoreleasedReturnValue(v17);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
        sub_10016D844();
    }
    else
    {
      v8 = objc_alloc((Class)CKModifyRecordZonesOperation);
      v9 = (void *)objc_claimAutoreleasedReturnValue(+[MPCloudKit_Manatee sharedInstance](MPCloudKit_Manatee, "sharedInstance"));
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "recordZoneBlob"));
      v23[0] = v10;
      v11 = (void *)objc_claimAutoreleasedReturnValue(+[MPCloudKit_Manatee sharedInstance](MPCloudKit_Manatee, "sharedInstance"));
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "recordZoneAccessoryDatabase"));
      v23[1] = v12;
      v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v23, 2));
      v14 = objc_msgSend(v8, "initWithRecordZonesToSave:recordZoneIDsToDelete:", v13, 0);

      v18[0] = _NSConcreteStackBlock;
      v18[1] = 3221225472;
      v18[2] = sub_10007200C;
      v18[3] = &unk_1001E49E0;
      v19 = *(id *)(a1 + 32);
      v20 = *(id *)(a1 + 40);
      v15 = *(_OWORD *)(a1 + 48);
      v22 = *(_OWORD *)(a1 + 64);
      v21 = v15;
      -[NSObject setModifyRecordZonesCompletionBlock:](v14, "setModifyRecordZonesCompletionBlock:", v18);
      objc_msgSend(*(id *)(a1 + 56), "addOperation:", v14);

    }
  }
  else
  {
    v16 = sub_1000681B8("MagicPairing");
    v14 = objc_claimAutoreleasedReturnValue(v16);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      sub_10016D870();
  }

}

void sub_10007200C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  os_log_t v10;
  NSObject *v11;
  _BOOL4 v12;
  id v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[4];
  __int128 v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  _QWORD v26[4];
  id v27;
  id v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t (*v34)(uint64_t, uint64_t);
  void (*v35)(uint64_t);
  id v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t (*v40)(uint64_t, uint64_t);
  void (*v41)(uint64_t);
  id v42;
  _QWORD v43[2];

  v7 = a2;
  v8 = a3;
  v9 = a4;
  v10 = sub_1000681B8("MagicPairing");
  v11 = objc_claimAutoreleasedReturnValue(v10);
  v12 = os_log_type_enabled(v11, OS_LOG_TYPE_ERROR);
  if (v9)
  {
    if (v12)
      sub_10016D8C8();

  }
  else
  {
    if (v12)
      sub_10016D89C();

    v37 = 0;
    v38 = &v37;
    v39 = 0x3032000000;
    v40 = sub_10006C2BC;
    v41 = sub_10006C2CC;
    v42 = objc_msgSend(objc_alloc((Class)CKRecord), "initWithRecordType:recordID:", CFSTR("MasterKey"), *(_QWORD *)(a1 + 32));
    v31 = 0;
    v32 = &v31;
    v33 = 0x3032000000;
    v34 = sub_10006C2BC;
    v35 = sub_10006C2CC;
    v36 = objc_msgSend(objc_alloc((Class)CKRecord), "initWithRecordType:recordID:", CFSTR("AccessoryDatabase"), *(_QWORD *)(a1 + 40));
    v13 = objc_alloc((Class)CKFetchRecordsOperation);
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)v38[5], "recordID"));
    v43[0] = v14;
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)v32[5], "recordID"));
    v43[1] = v15;
    v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v43, 2));
    v17 = objc_msgSend(v13, "initWithRecordIDs:", v16);

    v26[0] = _NSConcreteStackBlock;
    v26[1] = 3221225472;
    v26[2] = sub_100072308;
    v26[3] = &unk_1001E4918;
    v27 = *(id *)(a1 + 32);
    v29 = &v37;
    v28 = *(id *)(a1 + 40);
    v30 = &v31;
    objc_msgSend(v17, "setPerRecordCompletionBlock:", v26);
    v20[0] = _NSConcreteStackBlock;
    v20[1] = 3221225472;
    v20[2] = sub_100072574;
    v20[3] = &unk_1001E49B8;
    v18 = *(_QWORD *)(a1 + 64);
    v19 = *(_QWORD *)(a1 + 72);
    v22 = &v37;
    v23 = v18;
    v24 = &v31;
    v25 = v19;
    v21 = *(_OWORD *)(a1 + 48);
    objc_msgSend(v17, "setCompletionBlock:", v20);
    objc_msgSend(*(id *)(a1 + 56), "addOperation:", v17);

    _Block_object_dispose(&v31, 8);
    _Block_object_dispose(&v37, 8);

  }
}

void sub_1000722D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 168), 8);
  _Unwind_Resume(a1);
}

void sub_100072308(uint64_t a1, void *a2, void *a3, void *a4)
{
  void *v4;
  id v8;
  id v9;
  id v10;
  os_log_t v11;
  NSObject *v12;
  int v13;
  os_log_t v14;
  NSObject *v15;
  _BOOL4 v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  unsigned int v22;
  uint64_t v23;
  void *v24;
  void *v25;
  unsigned int v26;
  uint64_t v27;
  id v28;
  int v29;
  id v30;
  __int16 v31;
  void *v32;

  v8 = a2;
  v9 = a3;
  v10 = a4;
  if (v10)
  {
    v11 = sub_1000681B8("MagicPairing");
    v12 = objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      sub_10016D638();
    goto LABEL_18;
  }
  v13 = IsAppleInternalBuild(0);
  v14 = sub_1000681B8("MagicPairing");
  v15 = objc_claimAutoreleasedReturnValue(v14);
  v16 = os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
  if (v13)
  {
    if (v16)
    {
      v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "encryptedValues"));
      v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "objectForKeyedSubscript:", CFSTR("EncryptedMasterKeyBlob")));
      v19 = v18;
      if (!v18)
      {
        v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "encryptedValues"));
        v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKeyedSubscript:", CFSTR("EncryptedAccessoryBlob")));
      }
      v29 = 138412546;
      v30 = v8;
      v31 = 2112;
      v32 = v19;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, " >>> Successfully fetched LegacyNonManateeContainer Record %@, %@", (uint8_t *)&v29, 0x16u);
      if (!v18)
      {

      }
    }
  }
  else if (v16)
  {
    LOWORD(v29) = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, " >>> Successfully fetched LegacyNonManateeContainer Record", (uint8_t *)&v29, 2u);
  }

  v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "recordName"));
  v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "recordName"));
  v22 = objc_msgSend(v20, "isEqual:", v21);

  if (v22)
  {
    v23 = *(_QWORD *)(a1 + 48);
LABEL_17:
    v27 = *(_QWORD *)(v23 + 8);
    v28 = v8;
    v12 = *(NSObject **)(v27 + 40);
    *(_QWORD *)(v27 + 40) = v28;
LABEL_18:

    goto LABEL_19;
  }
  v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "recordName"));
  v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "recordName"));
  v26 = objc_msgSend(v24, "isEqual:", v25);

  if (v26)
  {
    v23 = *(_QWORD *)(a1 + 56);
    goto LABEL_17;
  }
LABEL_19:

}

void sub_100072574(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  void *v10;
  id v11;
  _QWORD v12[5];
  _QWORD v13[2];

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), "encryptedValues"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectForKeyedSubscript:", CFSTR("EncryptedMasterKeyBlob")));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), "encryptedValues"));
  objc_msgSend(v4, "setObject:forKeyedSubscript:", v3, CFSTR("EncryptedMasterKeyBlob"));

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 40), "encryptedValues"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("EncryptedAccessoryBlob")));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40), "encryptedValues"));
  objc_msgSend(v7, "setObject:forKeyedSubscript:", v6, CFSTR("EncryptedAccessoryBlob"));

  v8 = objc_alloc((Class)CKModifyRecordsOperation);
  v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40);
  v13[0] = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40);
  v13[1] = v9;
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v13, 2));
  v11 = objc_msgSend(v8, "initWithRecordsToSave:recordIDsToDelete:", v10, 0);

  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_100072744;
  v12[3] = &unk_1001E4940;
  v12[4] = *(_QWORD *)(a1 + 32);
  objc_msgSend(v11, "setModifyRecordsCompletionBlock:", v12);
  objc_msgSend(*(id *)(a1 + 40), "addOperation:", v11);

}

void sub_100072744(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  os_log_t v10;
  NSObject *v11;
  NSObject *v12;
  uint64_t v13;
  id v14;
  id v15;
  uint64_t v16;
  void *i;
  void *v18;
  os_log_t v19;
  NSObject *v20;
  void *v21;
  NSObject *v22;
  NSObject *v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  id v27;
  id obj;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint8_t buf[4];
  id v34;
  __int16 v35;
  NSObject *v36;
  _BYTE v37[128];

  v7 = a2;
  v8 = a3;
  v9 = a4;
  v10 = sub_1000681B8("MagicPairing");
  v11 = objc_claimAutoreleasedReturnValue(v10);
  v12 = v11;
  if (v9)
  {
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      sub_10016D928();

  }
  else
  {
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      v34 = v7;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, " >>> Successfully Upgraded to Legacy ManateeContainer Migrated %@", buf, 0xCu);
    }

    if (IsAppleInternalBuild(v13))
    {
      v24 = a1;
      v25 = 0;
      v26 = v8;
      v27 = v7;
      v31 = 0u;
      v32 = 0u;
      v29 = 0u;
      v30 = 0u;
      obj = v7;
      v14 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v29, v37, 16);
      if (v14)
      {
        v15 = v14;
        v16 = *(_QWORD *)v30;
        do
        {
          for (i = 0; i != v15; i = (char *)i + 1)
          {
            if (*(_QWORD *)v30 != v16)
              objc_enumerationMutation(obj);
            v18 = *(void **)(*((_QWORD *)&v29 + 1) + 8 * (_QWORD)i);
            v19 = sub_1000681B8("MagicPairing");
            v20 = objc_claimAutoreleasedReturnValue(v19);
            if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
            {
              v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "encryptedValues"));
              v22 = objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "objectForKeyedSubscript:", CFSTR("EncryptedMasterKeyBlob")));
              v23 = v22;
              if (!v22)
              {
                v8 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "encryptedValues"));
                v12 = objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "objectForKeyedSubscript:", CFSTR("EncryptedAccessoryBlob")));
                v23 = v12;
              }
              *(_DWORD *)buf = 138412546;
              v34 = v18;
              v35 = 2112;
              v36 = v23;
              _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, " >>> Successfully Upgraded to Legacy ManateeContainer Record %@, %@", buf, 0x16u);
              if (!v22)
              {

              }
            }

          }
          v15 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v29, v37, 16);
        }
        while (v15);
      }

      v8 = v26;
      v7 = v27;
      a1 = v24;
      v9 = 0;
    }
    objc_msgSend(*(id *)(a1 + 32), "markLegacyNonManateeContainerMigrated", v24, v25, v26, v27);
  }

}

void sub_100072BA8(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  os_log_t v7;
  NSObject *v8;
  _BOOL4 v9;
  int v10;
  id v11;

  v5 = a2;
  v6 = a3;
  v7 = sub_1000681B8("MagicPairing");
  v8 = objc_claimAutoreleasedReturnValue(v7);
  v9 = os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
  if (v6)
  {
    if (v9)
    {
      v10 = 138412290;
      v11 = v6;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "deleteLegacyMasterKey deleteRecordWithID: error %@ ", (uint8_t *)&v10, 0xCu);
    }

  }
  else
  {
    if (v9)
    {
      v10 = 138412290;
      v11 = v5;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "deleteLegacyMasterKey deleteRecordWithID record:  %@", (uint8_t *)&v10, 0xCu);
    }

    objc_msgSend(*(id *)(a1 + 32), "setuserPreference:value:sync:", CFSTR("kMagicPairingLegacyMasterKeyRemoved"), &__kCFBooleanTrue, 1);
  }

}

void sub_100073110(id a1, CKRecordZoneID *a2, NSError *a3)
{
  NSError *v3;
  os_log_t v4;
  NSObject *v5;
  int v6;
  NSError *v7;

  v3 = a3;
  v4 = sub_1000681B8("MagicPairing");
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v6 = 138412290;
    v7 = v3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, ">>> resetOldZones recordZoneBlob: error %@ ", (uint8_t *)&v6, 0xCu);
  }

}

void sub_1000731C0(id a1, CKRecordZoneID *a2, NSError *a3)
{
  NSError *v3;
  os_log_t v4;
  NSObject *v5;
  int v6;
  NSError *v7;

  v3 = a3;
  v4 = sub_1000681B8("MagicPairing");
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v6 = 138412290;
    v7 = v3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, ">>> resetOldZones recordZoneAccessoryDatabase: error %@ ", (uint8_t *)&v6, 0xCu);
  }

}

void sub_100073270(id a1, CKRecordZoneID *a2, NSError *a3)
{
  NSError *v3;
  os_log_t v4;
  NSObject *v5;
  int v6;
  NSError *v7;

  v3 = a3;
  v4 = sub_1000681B8("MagicPairing");
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v6 = 138412290;
    v7 = v3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, ">>> Manatee: resetOldZones recordZoneBlob: error %@ ", (uint8_t *)&v6, 0xCu);
  }

}

void sub_100073320(id a1, CKRecordZoneID *a2, NSError *a3)
{
  NSError *v3;
  os_log_t v4;
  NSObject *v5;
  int v6;
  NSError *v7;

  v3 = a3;
  v4 = sub_1000681B8("MagicPairing");
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v6 = 138412290;
    v7 = v3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, ">>> Manatee:  resetOldZones recordZoneAccessoryDatabase: error %@ ", (uint8_t *)&v6, 0xCu);
  }

}

void sub_100073640(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  id v4;
  void *v5;
  void *v6;
  unsigned int v7;
  os_log_t v8;
  NSObject *v9;
  os_log_t v10;
  NSObject *v11;
  _QWORD block[5];
  uint8_t buf[16];

  v2 = *(_QWORD *)(a1 + 32);
  v3 = objc_opt_class(CKRecordZoneNotification);
  if ((objc_opt_isKindOfClass(v2, v3) & 1) == 0)
    goto LABEL_11;
  v4 = *(id *)(a1 + 32);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "recordZoneID"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "zoneName"));
  v7 = objc_msgSend(v6, "isEqualToString:", CFSTR("MagicCloudPairingCustomKeyBlobZone"));

  if (!v7)
  {
LABEL_10:

LABEL_11:
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1000737E0;
    block[3] = &unk_1001E20E8;
    block[4] = *(_QWORD *)(a1 + 40);
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);
    return;
  }
  v8 = sub_1000681B8("MagicPairing");
  v9 = objc_claimAutoreleasedReturnValue(v8);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "*****>>>> Master Key Updated", buf, 2u);
  }

  if ((objc_msgSend(*(id *)(a1 + 40), "isWriteMasterKeysInProgress") & 1) == 0)
  {
    objc_msgSend(*(id *)(a1 + 40), "setMasterBlob:", 0);
    objc_msgSend(*(id *)(a1 + 40), "fetchKeyBlob:", 0);
    goto LABEL_10;
  }
  v10 = sub_1000681B8("MagicPairing");
  v11 = objc_claimAutoreleasedReturnValue(v10);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "*****>>>> Master Key Updated but we are in process to push new key. Dont fetch", buf, 2u);
  }

}

id sub_1000737E0(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "setShouldPauseFetch:", 0);
  objc_msgSend(*(id *)(a1 + 32), "setPauseErrorReason:", 0);
  return objc_msgSend(*(id *)(a1 + 32), "fetchAccessoryKeyBlob:", 0);
}

void sub_100073C44(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_list va;

  va_start(va, a4);
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, (uint8_t *)va, 0x16u);
}

void sub_100073C70(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = a1;
}

void sub_1000741D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100074220(uint64_t a1)
{
  void (**v2)(void);

  if (objc_msgSend(*(id *)(a1 + 32), "isWatchingBuddy"))
  {
    if (+[BTSystemConfiguration isBuddyComplete](BTSystemConfiguration, "isBuddyComplete"))
    {
      v2 = (void (**)(void))objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "block"));
      v2[2]();

    }
  }
}

void sub_10007428C(uint64_t a1)
{
  void *v2;
  id WeakRetained;

  v2 = (void *)qword_100218BD8;
  if (os_log_type_enabled((os_log_t)qword_100218BD8, OS_LOG_TYPE_DEBUG))
    sub_10016DAE0(a1, v2);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "directoryChanged");

}

void sub_1000742E8(uint64_t a1)
{
  void *v2;
  void *v3;
  id WeakRetained;

  v2 = (void *)qword_100218BD8;
  if (os_log_type_enabled((os_log_t)qword_100218BD8, OS_LOG_TYPE_DEBUG))
    sub_10016DB70(a1, v2);
  v3 = (void *)qword_100218BD8;
  if (os_log_type_enabled((os_log_t)qword_100218BD8, OS_LOG_TYPE_DEBUG))
    sub_10016DB70(a1, v3);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "cancel");

}

void sub_10007451C(uint64_t a1)
{
  NSObject *v2;
  void *v3;
  void (**v4)(void);
  uint8_t v5[16];

  notify_cancel(*(_DWORD *)(a1 + 40));
  v2 = qword_100218BD8;
  if (os_log_type_enabled((os_log_t)qword_100218BD8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Buddy complete notification callback", v5, 2u);
  }
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "block"));

  if (v3)
  {
    v4 = (void (**)(void))objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "block"));
    v4[2]();

  }
}

void sub_100074690(uint64_t a1)
{
  NSObject *v2;
  void *v3;
  void (**v4)(void);
  uint8_t v5[16];

  notify_cancel(*(_DWORD *)(a1 + 40));
  v2 = qword_100218BD8;
  if (os_log_type_enabled((os_log_t)qword_100218BD8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "device unlocked after boot callback", v5, 2u);
  }
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "block"));

  if (v3)
  {
    v4 = (void (**)(void))objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "block"));
    v4[2]();

  }
}

void sub_1000749A0(uint64_t a1)
{
  void (**v1)(void);

  v1 = (void (**)(void))objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "block"));
  v1[2]();

}

void sub_100074A78(uint64_t a1)
{
  void (**v1)(void);

  v1 = (void (**)(void))objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "block"));
  v1[2]();

}

void sub_100074C94(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_debug_impl(a1, v9, OS_LOG_TYPE_DEBUG, a4, &a9, 0xCu);
}

void sub_100074CA8(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, a5, 0xCu);
}

id sub_100074CB4(uint64_t a1, void *a2)
{
  return a2;
}

uint64_t sub_100074CC0()
{
  uint64_t v0;

  return v0;
}

void sub_100074CCC(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 2u);
}

id sub_100074CE4(id a1)
{
  return a1;
}

void sub_100074D2C(id a1)
{
  BTUserCloudServicesDaemon *v1;
  void *v2;

  v1 = objc_alloc_init(BTUserCloudServicesDaemon);
  v2 = (void *)qword_1002125F0;
  qword_1002125F0 = (uint64_t)v1;

}

id sub_10007508C(uint64_t a1)
{
  if (dword_10020FC38 <= 30 && (dword_10020FC38 != -1 || _LogCategory_Initialize(&dword_10020FC38, 30)))
    LogPrintF(&dword_10020FC38, "-[BTUserCloudServicesDaemon activate]_block_invoke", 30, "Activate");
  return _objc_msgSend(*(id *)(a1 + 32), "_activate");
}

uint64_t sub_1000751B4(uint64_t a1)
{
  return CUStateDumpWithObject("BTUserCloudServices", *(_QWORD *)(a1 + 32), &dword_10020FC38);
}

id sub_100075228(uint64_t a1)
{
  if (dword_10020FC38 <= 30 && (dword_10020FC38 != -1 || _LogCategory_Initialize(&dword_10020FC38, 30)))
    LogPrintF(&dword_10020FC38, "-[BTUserCloudServicesDaemon invalidate]_block_invoke", 30, "Invalidate");
  return objc_msgSend(*(id *)(a1 + 32), "_invalidate");
}

void sub_1000758E8(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 136));
  _Unwind_Resume(a1);
}

void sub_100075908(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "_xpcConnectionInvalidated:", *(_QWORD *)(a1 + 32));

}

void sub_100075C0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  (*(void (**)(uint64_t))(v11 + 16))(v11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100075C44(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_100075C54(uint64_t a1)
{

}

uint64_t sub_100075C5C(uint64_t result)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 48) + 8) + 40);
  if (v1)
  {
    v2 = (_QWORD *)result;
    if (dword_10020FC38 <= 90)
    {
      if (dword_10020FC38 == -1)
      {
        if (!_LogCategory_Initialize(&dword_10020FC38, 90))
          return (*(uint64_t (**)(void))(v2[5] + 16))();
        v1 = *(_QWORD *)(*(_QWORD *)(v2[6] + 8) + 40);
      }
      LogPrintF(&dword_10020FC38, "-[BTCloudServicesXPCConnection cloudServicesClientActivate:completion:]_block_invoke", 90, "### DeviceManager failed: %@, %{error}", v2[4], v1);
    }
    return (*(uint64_t (**)(void))(v2[5] + 16))();
  }
  return result;
}

void sub_1000760E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  uint64_t v15;
  va_list va;

  va_start(va, a15);
  (*(void (**)(uint64_t))(v15 + 16))(v15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10007611C(uint64_t result)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 48) + 8) + 40);
  if (v1)
  {
    v2 = (_QWORD *)result;
    if (dword_10020FC38 <= 90)
    {
      if (dword_10020FC38 == -1)
      {
        if (!_LogCategory_Initialize(&dword_10020FC38, 90))
          return (*(uint64_t (**)(void))(v2[5] + 16))();
        v1 = *(_QWORD *)(*(_QWORD *)(v2[6] + 8) + 40);
      }
      LogPrintF(&dword_10020FC38, "-[BTCloudServicesXPCConnection fetchAAProxCardsInfoForDeviceWithAddress:completion:]_block_invoke", 90, "### DeviceManager failed: %@, %{error}", v2[4], v1);
    }
    return (*(uint64_t (**)(void))(v2[5] + 16))();
  }
  return result;
}

void sub_1000761E0(uint64_t a1, void *a2)
{
  id v3;
  int v4;
  id v5;

  v3 = a2;
  v5 = v3;
  if (dword_10020FC38 <= 30)
  {
    if (dword_10020FC38 != -1 || (v4 = _LogCategory_Initialize(&dword_10020FC38, 30), v3 = v5, v4))
      LogPrintF(&dword_10020FC38, "-[BTCloudServicesXPCConnection fetchAAProxCardsInfoForDeviceWithAddress:completion:]_block_invoke_2", 30, "Fetched AAProxCardsInfo %@", v3);
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

}

void sub_100076458(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  (*(void (**)(uint64_t))(v11 + 16))(v11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100076490(uint64_t result)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 48) + 8) + 40);
  if (v1)
  {
    v2 = (_QWORD *)result;
    if (dword_10020FC38 <= 90)
    {
      if (dword_10020FC38 == -1)
      {
        if (!_LogCategory_Initialize(&dword_10020FC38, 90))
          return (*(uint64_t (**)(void))(v2[5] + 16))();
        v1 = *(_QWORD *)(*(_QWORD *)(v2[6] + 8) + 40);
      }
      LogPrintF(&dword_10020FC38, "-[BTCloudServicesXPCConnection modifyAAProxCardsInfo:completion:]_block_invoke", 90, "### modifyAAProxCardsInfo failed: %@, %{error}", v2[4], v1);
    }
    return (*(uint64_t (**)(void))(v2[5] + 16))();
  }
  return result;
}

void sub_100076728(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  (*(void (**)(uint64_t))(v11 + 16))(v11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100076760(uint64_t result)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 48) + 8) + 40);
  if (v1)
  {
    v2 = (_QWORD *)result;
    if (dword_10020FC38 <= 90)
    {
      if (dword_10020FC38 == -1)
      {
        if (!_LogCategory_Initialize(&dword_10020FC38, 90))
          return (*(uint64_t (**)(void))(v2[5] + 16))();
        v1 = *(_QWORD *)(*(_QWORD *)(v2[6] + 8) + 40);
      }
      LogPrintF(&dword_10020FC38, "-[BTCloudServicesXPCConnection removeAAProxCardsInfoForDeviceWithAddress:completion:]_block_invoke", 90, "### DeviceManager failed: %@, %{error}", v2[4], v1);
    }
    return (*(uint64_t (**)(void))(v2[5] + 16))();
  }
  return result;
}

void sub_100076A30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  (*(void (**)(uint64_t))(v9 + 16))(v9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100076A68(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 40);
  if (v1 && dword_10020FC38 <= 90)
  {
    v2 = result;
    if (dword_10020FC38 != -1)
      return LogPrintF(&dword_10020FC38, "-[BTCloudServicesXPCConnection createDeviceRecord:completion:]_block_invoke", 90, "### DeviceManager failed: %@, %{error}", *(_QWORD *)(v2 + 32), v1);
    result = _LogCategory_Initialize(&dword_10020FC38, 90);
    if ((_DWORD)result)
    {
      v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 40) + 8) + 40);
      return LogPrintF(&dword_10020FC38, "-[BTCloudServicesXPCConnection createDeviceRecord:completion:]_block_invoke", 90, "### DeviceManager failed: %@, %{error}", *(_QWORD *)(v2 + 32), v1);
    }
  }
  return result;
}

void sub_100076DBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  (*(void (**)(uint64_t))(v9 + 16))(v9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100076DF4(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 40);
  if (v1 && dword_10020FC38 <= 90)
  {
    v2 = result;
    if (dword_10020FC38 != -1)
      return LogPrintF(&dword_10020FC38, "-[BTCloudServicesXPCConnection deleteDeviceRecord:completion:]_block_invoke", 90, "### DeviceManager failed: %@, %{error}", *(_QWORD *)(v2 + 32), v1);
    result = _LogCategory_Initialize(&dword_10020FC38, 90);
    if ((_DWORD)result)
    {
      v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 40) + 8) + 40);
      return LogPrintF(&dword_10020FC38, "-[BTCloudServicesXPCConnection deleteDeviceRecord:completion:]_block_invoke", 90, "### DeviceManager failed: %@, %{error}", *(_QWORD *)(v2 + 32), v1);
    }
  }
  return result;
}

void sub_1000770E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  uint64_t v15;
  va_list va;

  va_start(va, a15);
  (*(void (**)(uint64_t))(v15 + 16))(v15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100077118(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 40);
  if (v1 && dword_10020FC38 <= 90)
  {
    v2 = result;
    if (dword_10020FC38 != -1)
      return LogPrintF(&dword_10020FC38, "-[BTCloudServicesXPCConnection fetchDeviceRecord:completion:]_block_invoke", 90, "### DeviceManager failed: %@, %{error}", *(_QWORD *)(v2 + 32), v1);
    result = _LogCategory_Initialize(&dword_10020FC38, 90);
    if ((_DWORD)result)
    {
      v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 40) + 8) + 40);
      return LogPrintF(&dword_10020FC38, "-[BTCloudServicesXPCConnection fetchDeviceRecord:completion:]_block_invoke", 90, "### DeviceManager failed: %@, %{error}", *(_QWORD *)(v2 + 32), v1);
    }
  }
  return result;
}

void sub_1000771B4(uint64_t a1, void *a2)
{
  id v3;
  int v4;
  id v5;

  v3 = a2;
  v5 = v3;
  if (dword_10020FC38 <= 30)
  {
    if (dword_10020FC38 != -1 || (v4 = _LogCategory_Initialize(&dword_10020FC38, 30), v3 = v5, v4))
      LogPrintF(&dword_10020FC38, "-[BTCloudServicesXPCConnection fetchDeviceRecord:completion:]_block_invoke_2", 30, "Fetched Device: %@", v3);
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

}

void sub_100077484(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  uint64_t v15;
  va_list va;

  va_start(va, a15);
  (*(void (**)(uint64_t))(v15 + 16))(v15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000774BC(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 40);
  if (v1 && dword_10020FC38 <= 90)
  {
    v2 = result;
    if (dword_10020FC38 != -1)
      return LogPrintF(&dword_10020FC38, "-[BTCloudServicesXPCConnection fetchDeviceRecordsWithCompletion:]_block_invoke", 90, "### DeviceManager failed: %@, %{error}", *(_QWORD *)(v2 + 32), v1);
    result = _LogCategory_Initialize(&dword_10020FC38, 90);
    if ((_DWORD)result)
    {
      v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 40) + 8) + 40);
      return LogPrintF(&dword_10020FC38, "-[BTCloudServicesXPCConnection fetchDeviceRecordsWithCompletion:]_block_invoke", 90, "### DeviceManager failed: %@, %{error}", *(_QWORD *)(v2 + 32), v1);
    }
  }
  return result;
}

void sub_100077558(uint64_t a1, void *a2)
{
  id v3;
  int v4;
  uint64_t v5;
  void *v6;
  id v7;

  v3 = a2;
  v7 = v3;
  if (dword_10020FC38 <= 30)
  {
    if (dword_10020FC38 != -1 || (v4 = _LogCategory_Initialize(&dword_10020FC38, 30), v3 = v7, v4))
    {
      LogPrintF(&dword_10020FC38, "-[BTCloudServicesXPCConnection fetchDeviceRecordsWithCompletion:]_block_invoke_2", 30, "Fetched Devices: %@", v3);
      v3 = v7;
    }
  }
  v5 = *(_QWORD *)(a1 + 32);
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithArray:](NSArray, "arrayWithArray:", v3));
  (*(void (**)(uint64_t, void *, _QWORD))(v5 + 16))(v5, v6, 0);

}

void sub_100077824(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  (*(void (**)(uint64_t))(v9 + 16))(v9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10007785C(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 40);
  if (v1 && dword_10020FC38 <= 90)
  {
    v2 = result;
    if (dword_10020FC38 != -1)
      return LogPrintF(&dword_10020FC38, "-[BTCloudServicesXPCConnection createDeviceSupportInformationRecord:completion:]_block_invoke", 90, "### DeviceManager failed: %@, %{error}", *(_QWORD *)(v2 + 32), v1);
    result = _LogCategory_Initialize(&dword_10020FC38, 90);
    if ((_DWORD)result)
    {
      v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 40) + 8) + 40);
      return LogPrintF(&dword_10020FC38, "-[BTCloudServicesXPCConnection createDeviceSupportInformationRecord:completion:]_block_invoke", 90, "### DeviceManager failed: %@, %{error}", *(_QWORD *)(v2 + 32), v1);
    }
  }
  return result;
}

void sub_100077B08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  (*(void (**)(uint64_t))(v9 + 16))(v9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100077B40(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 40);
  if (v1 && dword_10020FC38 <= 90)
  {
    v2 = result;
    if (dword_10020FC38 != -1)
      return LogPrintF(&dword_10020FC38, "-[BTCloudServicesXPCConnection deleteDeviceSupportInformationRecord:completion:]_block_invoke", 90, "### DeviceManager failed: %@, %{error}", *(_QWORD *)(v2 + 32), v1);
    result = _LogCategory_Initialize(&dword_10020FC38, 90);
    if ((_DWORD)result)
    {
      v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 40) + 8) + 40);
      return LogPrintF(&dword_10020FC38, "-[BTCloudServicesXPCConnection deleteDeviceSupportInformationRecord:completion:]_block_invoke", 90, "### DeviceManager failed: %@, %{error}", *(_QWORD *)(v2 + 32), v1);
    }
  }
  return result;
}

void sub_100077E2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  uint64_t v15;
  va_list va;

  va_start(va, a15);
  (*(void (**)(uint64_t))(v15 + 16))(v15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100077E64(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 40);
  if (v1 && dword_10020FC38 <= 90)
  {
    v2 = result;
    if (dword_10020FC38 != -1)
      return LogPrintF(&dword_10020FC38, "-[BTCloudServicesXPCConnection fetchBTCloudDeviceSupportInformation:completion:]_block_invoke", 90, "### DeviceManager failed: %@, %{error}", *(_QWORD *)(v2 + 32), v1);
    result = _LogCategory_Initialize(&dword_10020FC38, 90);
    if ((_DWORD)result)
    {
      v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 40) + 8) + 40);
      return LogPrintF(&dword_10020FC38, "-[BTCloudServicesXPCConnection fetchBTCloudDeviceSupportInformation:completion:]_block_invoke", 90, "### DeviceManager failed: %@, %{error}", *(_QWORD *)(v2 + 32), v1);
    }
  }
  return result;
}

void sub_100077F00(uint64_t a1, void *a2)
{
  id v3;
  int v4;
  id v5;

  v3 = a2;
  v5 = v3;
  if (dword_10020FC38 <= 30)
  {
    if (dword_10020FC38 != -1 || (v4 = _LogCategory_Initialize(&dword_10020FC38, 30), v3 = v5, v4))
      LogPrintF(&dword_10020FC38, "-[BTCloudServicesXPCConnection fetchBTCloudDeviceSupportInformation:completion:]_block_invoke_2", 30, "Fetched record Info: %@", v3);
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

}

void sub_1000781D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  uint64_t v15;
  va_list va;

  va_start(va, a15);
  (*(void (**)(uint64_t))(v15 + 16))(v15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100078208(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 40);
  if (v1 && dword_10020FC38 <= 90)
  {
    v2 = result;
    if (dword_10020FC38 != -1)
      return LogPrintF(&dword_10020FC38, "-[BTCloudServicesXPCConnection fetchAllBTCloudDeviceSupportInformationWithCompletion:]_block_invoke", 90, "### DeviceManager failed: %@, %{error}", *(_QWORD *)(v2 + 32), v1);
    result = _LogCategory_Initialize(&dword_10020FC38, 90);
    if ((_DWORD)result)
    {
      v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 40) + 8) + 40);
      return LogPrintF(&dword_10020FC38, "-[BTCloudServicesXPCConnection fetchAllBTCloudDeviceSupportInformationWithCompletion:]_block_invoke", 90, "### DeviceManager failed: %@, %{error}", *(_QWORD *)(v2 + 32), v1);
    }
  }
  return result;
}

void sub_1000782A4(uint64_t a1, void *a2)
{
  id v3;
  int v4;
  id v5;

  v3 = a2;
  v5 = v3;
  if (dword_10020FC38 <= 30)
  {
    if (dword_10020FC38 != -1 || (v4 = _LogCategory_Initialize(&dword_10020FC38, 30), v3 = v5, v4))
      LogPrintF(&dword_10020FC38, "-[BTCloudServicesXPCConnection fetchAllBTCloudDeviceSupportInformationWithCompletion:]_block_invoke_2", 30, "Fetched info records: %@", v3);
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

}

void sub_100078554(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  (*(void (**)(uint64_t))(v9 + 16))(v9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10007858C(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 40);
  if (v1 && dword_10020FC38 <= 90)
  {
    v2 = result;
    if (dword_10020FC38 != -1)
      return LogPrintF(&dword_10020FC38, "-[BTCloudServicesXPCConnection modifyDeviceSupportInformationRecord:completion:]_block_invoke", 90, "### DeviceManager failed: %@, %{error}", *(_QWORD *)(v2 + 32), v1);
    result = _LogCategory_Initialize(&dword_10020FC38, 90);
    if ((_DWORD)result)
    {
      v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 40) + 8) + 40);
      return LogPrintF(&dword_10020FC38, "-[BTCloudServicesXPCConnection modifyDeviceSupportInformationRecord:completion:]_block_invoke", 90, "### DeviceManager failed: %@, %{error}", *(_QWORD *)(v2 + 32), v1);
    }
  }
  return result;
}

void sub_100078838(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  (*(void (**)(uint64_t))(v9 + 16))(v9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100078870(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 40);
  if (v1 && dword_10020FC38 <= 90)
  {
    v2 = result;
    if (dword_10020FC38 != -1)
      return LogPrintF(&dword_10020FC38, "-[BTCloudServicesXPCConnection createMagicSettingsRecord:completion:]_block_invoke", 90, "### DeviceManager failed: %@, %{error}", *(_QWORD *)(v2 + 32), v1);
    result = _LogCategory_Initialize(&dword_10020FC38, 90);
    if ((_DWORD)result)
    {
      v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 40) + 8) + 40);
      return LogPrintF(&dword_10020FC38, "-[BTCloudServicesXPCConnection createMagicSettingsRecord:completion:]_block_invoke", 90, "### DeviceManager failed: %@, %{error}", *(_QWORD *)(v2 + 32), v1);
    }
  }
  return result;
}

void sub_100078B1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  (*(void (**)(uint64_t))(v9 + 16))(v9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100078B54(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 40);
  if (v1 && dword_10020FC38 <= 90)
  {
    v2 = result;
    if (dword_10020FC38 != -1)
      return LogPrintF(&dword_10020FC38, "-[BTCloudServicesXPCConnection deleteMagicSettingsRecord:completion:]_block_invoke", 90, "### DeviceManager failed: %@, %{error}", *(_QWORD *)(v2 + 32), v1);
    result = _LogCategory_Initialize(&dword_10020FC38, 90);
    if ((_DWORD)result)
    {
      v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 40) + 8) + 40);
      return LogPrintF(&dword_10020FC38, "-[BTCloudServicesXPCConnection deleteMagicSettingsRecord:completion:]_block_invoke", 90, "### DeviceManager failed: %@, %{error}", *(_QWORD *)(v2 + 32), v1);
    }
  }
  return result;
}

void sub_100078E40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  uint64_t v15;
  va_list va;

  va_start(va, a15);
  (*(void (**)(uint64_t))(v15 + 16))(v15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100078E78(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 40);
  if (v1 && dword_10020FC38 <= 90)
  {
    v2 = result;
    if (dword_10020FC38 != -1)
      return LogPrintF(&dword_10020FC38, "-[BTCloudServicesXPCConnection fetchMagicSettingsRecord:completion:]_block_invoke", 90, "### DeviceManager failed: %@, %{error}", *(_QWORD *)(v2 + 32), v1);
    result = _LogCategory_Initialize(&dword_10020FC38, 90);
    if ((_DWORD)result)
    {
      v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 40) + 8) + 40);
      return LogPrintF(&dword_10020FC38, "-[BTCloudServicesXPCConnection fetchMagicSettingsRecord:completion:]_block_invoke", 90, "### DeviceManager failed: %@, %{error}", *(_QWORD *)(v2 + 32), v1);
    }
  }
  return result;
}

void sub_100078F14(uint64_t a1, void *a2)
{
  id v3;
  int v4;
  id v5;

  v3 = a2;
  v5 = v3;
  if (dword_10020FC38 <= 30)
  {
    if (dword_10020FC38 != -1 || (v4 = _LogCategory_Initialize(&dword_10020FC38, 30), v3 = v5, v4))
      LogPrintF(&dword_10020FC38, "-[BTCloudServicesXPCConnection fetchMagicSettingsRecord:completion:]_block_invoke_2", 30, "Fetched MP record: %@", v3);
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

}

void sub_1000791E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  uint64_t v15;
  va_list va;

  va_start(va, a15);
  (*(void (**)(uint64_t))(v15 + 16))(v15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10007921C(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 40);
  if (v1 && dword_10020FC38 <= 90)
  {
    v2 = result;
    if (dword_10020FC38 != -1)
      return LogPrintF(&dword_10020FC38, "-[BTCloudServicesXPCConnection fetchAllMagicSettingsRecordsWithCompletion:]_block_invoke", 90, "### DeviceManager failed: %@, %{error}", *(_QWORD *)(v2 + 32), v1);
    result = _LogCategory_Initialize(&dword_10020FC38, 90);
    if ((_DWORD)result)
    {
      v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 40) + 8) + 40);
      return LogPrintF(&dword_10020FC38, "-[BTCloudServicesXPCConnection fetchAllMagicSettingsRecordsWithCompletion:]_block_invoke", 90, "### DeviceManager failed: %@, %{error}", *(_QWORD *)(v2 + 32), v1);
    }
  }
  return result;
}

void sub_1000792B8(uint64_t a1, void *a2)
{
  id v3;
  int v4;
  id v5;

  v3 = a2;
  v5 = v3;
  if (dword_10020FC38 <= 30)
  {
    if (dword_10020FC38 != -1 || (v4 = _LogCategory_Initialize(&dword_10020FC38, 30), v3 = v5, v4))
      LogPrintF(&dword_10020FC38, "-[BTCloudServicesXPCConnection fetchAllMagicSettingsRecordsWithCompletion:]_block_invoke_2", 30, "Fetched MP records: %@", v3);
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

}

void sub_100079568(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  (*(void (**)(uint64_t))(v9 + 16))(v9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000795A0(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 40);
  if (v1 && dword_10020FC38 <= 90)
  {
    v2 = result;
    if (dword_10020FC38 != -1)
      return LogPrintF(&dword_10020FC38, "-[BTCloudServicesXPCConnection modifyMagicSettingsRecord:completion:]_block_invoke", 90, "### DeviceManager failed: %@, %{error}", *(_QWORD *)(v2 + 32), v1);
    result = _LogCategory_Initialize(&dword_10020FC38, 90);
    if ((_DWORD)result)
    {
      v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 40) + 8) + 40);
      return LogPrintF(&dword_10020FC38, "-[BTCloudServicesXPCConnection modifyMagicSettingsRecord:completion:]_block_invoke", 90, "### DeviceManager failed: %@, %{error}", *(_QWORD *)(v2 + 32), v1);
    }
  }
  return result;
}

void sub_1000798A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  (*(void (**)(uint64_t))(v9 + 16))(v9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000798DC(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 40);
  if (v1 && dword_10020FC38 <= 90)
  {
    v2 = result;
    if (dword_10020FC38 != -1)
      return LogPrintF(&dword_10020FC38, "-[BTCloudServicesXPCConnection fetchCloudAccountInfoUpdatedWithCompletion:]_block_invoke", 90, "### DeviceManager failed to fetch account info: %@, %{error}", *(_QWORD *)(v2 + 32), v1);
    result = _LogCategory_Initialize(&dword_10020FC38, 90);
    if ((_DWORD)result)
    {
      v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 40) + 8) + 40);
      return LogPrintF(&dword_10020FC38, "-[BTCloudServicesXPCConnection fetchCloudAccountInfoUpdatedWithCompletion:]_block_invoke", 90, "### DeviceManager failed to fetch account info: %@, %{error}", *(_QWORD *)(v2 + 32), v1);
    }
  }
  return result;
}

void sub_100079C1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  uint64_t v27;

  (*(void (**)(uint64_t))(v27 + 16))(v27);
  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100079C54(uint64_t result)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 48) + 8) + 40);
  if (v1)
  {
    v2 = (_QWORD *)result;
    if (dword_10020FC38 <= 90)
    {
      if (dword_10020FC38 == -1)
      {
        if (!_LogCategory_Initialize(&dword_10020FC38, 90))
          return (*(uint64_t (**)(void))(v2[5] + 16))();
        v1 = *(_QWORD *)(*(_QWORD *)(v2[6] + 8) + 40);
      }
      LogPrintF(&dword_10020FC38, "-[BTCloudServicesXPCConnection fetchCloudPairingIdentifierForPeripheral:completion:]_block_invoke", 90, "### CloudPairingManager failed to fetch cloud pairing identifier: %@, %{error}", v2[4], v1);
    }
    return (*(uint64_t (**)(void))(v2[5] + 16))();
  }
  return result;
}

void sub_100079D18(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  id v5;
  uint64_t v6;
  id v7;
  _QWORD v8[4];
  id v9;
  id v10;
  id v11;
  uint64_t v12;

  v3 = a2;
  v4 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "dispatchQueue"));
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100079DE0;
  v8[3] = &unk_1001E4BE0;
  v9 = v3;
  v11 = *(id *)(a1 + 48);
  v5 = *(id *)(a1 + 40);
  v6 = *(_QWORD *)(a1 + 56);
  v10 = v5;
  v12 = v6;
  v7 = v3;
  dispatch_async(v4, v8);

}

uint64_t sub_100079DE0(_QWORD *a1)
{
  uint64_t v2;
  int v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  v2 = a1[4];
  if (v2)
  {
    if (dword_10020FC38 <= 30)
    {
      if (dword_10020FC38 != -1 || (v3 = _LogCategory_Initialize(&dword_10020FC38, 30), v2 = a1[4], v3))
      {
        LogPrintF(&dword_10020FC38, "-[BTCloudServicesXPCConnection fetchCloudPairingIdentifierForPeripheral:completion:]_block_invoke_3", 30, "Fetched cloud pairing identifier: %@", v2);
        v2 = a1[4];
      }
    }
    return (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(a1[6] + 16))(a1[6], v2, 0);
  }
  else
  {
    if (dword_10020FC38 <= 30
      && (dword_10020FC38 != -1 || _LogCategory_Initialize(&dword_10020FC38, 30)))
    {
      LogPrintF(&dword_10020FC38, "-[BTCloudServicesXPCConnection fetchCloudPairingIdentifierForPeripheral:completion:]_block_invoke_3", 30, "Unable to fetch cloud pairing identifier for peripheral: %@", a1[5]);
    }
    v5 = a1[6];
    v6 = BTErrorF(4294960588, "Cannot find cloud identifier for peripheral '%@'", a1[5]);
    v7 = objc_claimAutoreleasedReturnValue(v6);
    v8 = *(_QWORD *)(a1[7] + 8);
    v9 = *(void **)(v8 + 40);
    *(_QWORD *)(v8 + 40) = v7;

    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v5 + 16))(v5, 0, v7);
  }
}

void sub_10007A1C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  (*(void (**)(uint64_t))(v11 + 16))(v11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10007A1F8(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 40);
  if (v1)
  {
    v2 = result;
    if (dword_10020FC38 <= 90)
    {
      if (dword_10020FC38 == -1)
      {
        if (!_LogCategory_Initialize(&dword_10020FC38, 90))
          return (*(uint64_t (**)(void))(*(_QWORD *)(v2 + 32) + 16))();
        v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 40) + 8) + 40);
      }
      LogPrintF(&dword_10020FC38, "-[BTCloudServicesXPCConnection forceCloudPairingForIdentifiers:completion:]_block_invoke", 90, "### CloudPairingManager failed to force cloud pairing: %{error}", v1);
    }
    return (*(uint64_t (**)(void))(*(_QWORD *)(v2 + 32) + 16))();
  }
  return result;
}

void sub_10007A55C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10007A598(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 40);
  if (v1)
  {
    v2 = result;
    if (dword_10020FC38 <= 90)
    {
      if (dword_10020FC38 == -1)
      {
        if (!_LogCategory_Initialize(&dword_10020FC38, 90))
          return (*(uint64_t (**)(void))(*(_QWORD *)(v2 + 32) + 16))();
        v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 40) + 8) + 40);
      }
      LogPrintF(&dword_10020FC38, "-[BTCloudServicesXPCConnection startSoundProfileRecordFileHandleSessionWithCompletion:]_block_invoke", 90, "### Failed to create sound profile with error: %{error}", v1);
    }
    return (*(uint64_t (**)(void))(*(_QWORD *)(v2 + 32) + 16))();
  }
  return result;
}

void sub_10007A99C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10007A9E4(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 40);
  if (v1)
  {
    v2 = result;
    if (dword_10020FC38 <= 90)
    {
      if (dword_10020FC38 == -1)
      {
        if (!_LogCategory_Initialize(&dword_10020FC38, 90))
          return (*(uint64_t (**)(void))(*(_QWORD *)(v2 + 32) + 16))();
        v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 40) + 8) + 40);
      }
      LogPrintF(&dword_10020FC38, "-[BTCloudServicesXPCConnection finishSoundProfileRecordSessionHandle:completion:]_block_invoke", 90, "### Failed to create sound profile with error: %{error}", v1);
    }
    return (*(uint64_t (**)(void))(*(_QWORD *)(v2 + 32) + 16))();
  }
  return result;
}

void sub_10007AAA0(uint64_t a1, void *a2)
{
  NSObject *v3;
  id v4;
  _QWORD v5[4];
  id v6;
  id v7;

  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10007AB38;
  v5[3] = &unk_1001E1FF8;
  v6 = a2;
  v3 = *(NSObject **)(a1 + 32);
  v7 = *(id *)(a1 + 40);
  v4 = v6;
  dispatch_async(v3, v5);

}

void sub_10007AB38(uint64_t a1)
{
  id v1;

  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  v1 = (id)objc_claimAutoreleasedReturnValue(+[CloudXPCService sharedInstance](CloudXPCService, "sharedInstance"));
  objc_msgSend(v1, "endTransaction:", CFSTR("createSoundProfileRecordURL"));

}

void sub_10007ADD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  uint64_t v15;
  va_list va;

  va_start(va, a15);
  (*(void (**)(uint64_t))(v15 + 16))(v15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10007AE08(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 40);
  if (v1)
  {
    v2 = result;
    if (dword_10020FC38 <= 90)
    {
      if (dword_10020FC38 == -1)
      {
        if (!_LogCategory_Initialize(&dword_10020FC38, 90))
          return (*(uint64_t (**)(void))(*(_QWORD *)(v2 + 32) + 16))();
        v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 40) + 8) + 40);
      }
      LogPrintF(&dword_10020FC38, "-[BTCloudServicesXPCConnection fetchSoundProfileRecordWithCompletion:]_block_invoke", 90, "### Failed to fetch sound profile with error: %{error}", v1);
    }
    return (*(uint64_t (**)(void))(*(_QWORD *)(v2 + 32) + 16))();
  }
  return result;
}

void sub_10007AEC8(uint64_t a1, void *a2, void *a3)
{
  id v5;
  NSObject *v6;
  id v7;
  id v8;
  id v9;
  _QWORD block[4];
  id v11;
  id v12;
  id v13;

  v5 = a2;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10007AF80;
  block[3] = &unk_1001E4C30;
  v11 = a3;
  v6 = *(NSObject **)(a1 + 32);
  v7 = *(id *)(a1 + 40);
  v12 = v5;
  v13 = v7;
  v8 = v5;
  v9 = v11;
  dispatch_async(v6, block);

}

void sub_10007AF80(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;

  v1 = a1[4];
  if (v1)
  {
    (*(void (**)(_QWORD, _QWORD, uint64_t))(a1[6] + 16))(a1[6], 0, v1);
  }
  else
  {
    v2 = a1[5];
    v3 = a1[6];
    if (v2)
    {
      (*(void (**)(_QWORD, uint64_t, _QWORD))(v3 + 16))(a1[6], v2, 0);
    }
    else
    {
      v4 = BTErrorF(4294960596, "No profile or error found");
      v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
      (*(void (**)(uint64_t, _QWORD, void *))(v3 + 16))(v3, 0, v5);

    }
  }
  v6 = (id)objc_claimAutoreleasedReturnValue(+[CloudXPCService sharedInstance](CloudXPCService, "sharedInstance"));
  objc_msgSend(v6, "endTransaction:", CFSTR("fetchSoundProfileRecord"));

}

void sub_10007B250(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  uint64_t v15;
  va_list va;

  va_start(va, a15);
  (*(void (**)(uint64_t))(v15 + 16))(v15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10007B288(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 40);
  if (v1)
  {
    v2 = result;
    if (dword_10020FC38 <= 90)
    {
      if (dword_10020FC38 == -1)
      {
        if (!_LogCategory_Initialize(&dword_10020FC38, 90))
          return (*(uint64_t (**)(void))(*(_QWORD *)(v2 + 32) + 16))();
        v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 40) + 8) + 40);
      }
      LogPrintF(&dword_10020FC38, "-[BTCloudServicesXPCConnection deleteSoundProfileRecordWithCompletion:]_block_invoke", 90, "### Failed to delete sound profile with error: %{error}", v1);
    }
    return (*(uint64_t (**)(void))(*(_QWORD *)(v2 + 32) + 16))();
  }
  return result;
}

void sub_10007B344(uint64_t a1, void *a2)
{
  NSObject *v3;
  id v4;
  _QWORD v5[4];
  id v6;
  id v7;

  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10007B3DC;
  v5[3] = &unk_1001E1FF8;
  v6 = a2;
  v3 = *(NSObject **)(a1 + 32);
  v7 = *(id *)(a1 + 40);
  v4 = v6;
  dispatch_async(v3, v5);

}

uint64_t sub_10007B3DC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_10007B500(id a1)
{
  CloudXPCService *v1;
  void *v2;

  v1 = objc_alloc_init(CloudXPCService);
  v2 = (void *)qword_100212600;
  qword_100212600 = (uint64_t)v1;

}

id sub_10007B798(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_sigTermReceived");
}

void sub_10007BB20(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  id *v3;
  uint64_t v4;

  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v4 - 72));
  _Unwind_Resume(a1);
}

void sub_10007BB78(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "axHeadTrackingSettingChanged");

}

void sub_10007BBA4(uint64_t a1, void *a2)
{
  id *v2;
  id v3;
  id WeakRetained;

  v2 = (id *)(a1 + 32);
  v3 = a2;
  WeakRetained = objc_loadWeakRetained(v2);
  objc_msgSend(WeakRetained, "handleEvent:", v3);

}

void sub_10007BBEC(uint64_t a1, uint64_t a2)
{
  id WeakRetained;
  void *v4;
  void *v5;
  const __CFString *v6;
  void *v7;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v6 = CFSTR("kOnlineStatus");
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", a2));
  v7 = v4;
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v7, &v6, 1));
  objc_msgSend(WeakRetained, "sendCloudKitMsg:argsObject:", CFSTR("OnlineStatusChanged"), v5);

}

void sub_10007BD78(uint64_t a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "activeTransactions"));
  objc_msgSend(v1, "removeAllObjects");

}

void sub_10007BE14(uint64_t a1)
{
  os_log_t v2;
  NSObject *v3;
  uint64_t v4;
  os_log_t v5;
  NSObject *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint8_t buf[4];
  uint64_t v12;
  __int16 v13;
  _BOOL4 v14;

  v2 = sub_1000681B8("CloudXPCService");
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, " handleAXSAccessibilityHTNotification", buf, 2u);
  }

  v4 = _AXSSpatialAudioHeadTracking();
  v5 = sub_1000681B8("CloudXPCService");
  v6 = objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134218240;
    v12 = v4;
    v13 = 1024;
    v14 = v4 != 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "AccessibilityHeadtracking: headTrackStatus:%lu, newHT:%u", buf, 0x12u);
  }

  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v4 != 0, CFSTR("kAccessHeadTracking")));
  v10 = v7;
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v10, &v9, 1));

  objc_msgSend(*(id *)(a1 + 32), "sendCloudKitMsg:args:", CFSTR("kBTAccessHeadTrackUpdate"), v8);
}

void sub_10007C37C(uint64_t a1)
{
  void *v2;
  os_log_t v3;
  NSObject *v4;
  NSObject *v5;
  xpc_connection_t mach_service;
  void *v7;
  os_log_t v8;
  NSObject *v9;
  NSObject *v10;
  _xpc_connection_s *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint8_t v16[8];
  NSErrorUserInfoKey v17;
  const __CFString *v18;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "cloudKitConnection"));

  if (v2)
  {
    v3 = sub_1000681B8("XPC");
    v4 = objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Already established connection to bluetoothd", v16, 2u);
    }
LABEL_8:

    v12 = *(_QWORD *)(a1 + 40);
    if (v12)
      (*(void (**)(uint64_t, _QWORD))(v12 + 16))(v12, 0);
    return;
  }
  v5 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "xpcQueue"));
  mach_service = xpc_connection_create_mach_service("com.apple.bluetooth.cloudkit.xpc", v5, 2uLL);
  objc_msgSend(*(id *)(a1 + 32), "setCloudKitConnection:", mach_service);

  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "cloudKitConnection"));
  v8 = sub_1000681B8("XPC");
  v9 = objc_claimAutoreleasedReturnValue(v8);
  v10 = v9;
  if (v7)
  {
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Established connection to bluetoothd", v16, 2u);
    }

    v11 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "cloudKitConnection"));
    xpc_connection_set_event_handler(v11, &stru_1001E4D40);

    v4 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "cloudKitConnection"));
    xpc_connection_resume((xpc_connection_t)v4);
    goto LABEL_8;
  }
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    sub_10016DE94();

  v13 = *(_QWORD *)(a1 + 40);
  if (v13)
  {
    v17 = NSLocalizedFailureReasonErrorKey;
    v18 = CFSTR("Failed to establish connection to bluetoothd");
    v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v18, &v17, 1));
    v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("BTUserErrorDomain"), 0, v14));
    (*(void (**)(uint64_t, void *))(v13 + 16))(v13, v15);

  }
}

void sub_10007C6A0(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_10007C6BC(uint64_t a1, uint64_t a2)
{
  id WeakRetained;
  os_log_t v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  void *v11;
  _xpc_connection_s *v12;
  os_log_t v13;
  int v14;
  uint64_t v15;
  __int16 v16;
  uint64_t v17;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (!WeakRetained)
  {
    v13 = sub_1000681B8("XPC");
    v9 = objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      sub_10016DEC0();
    goto LABEL_10;
  }
  if (!a2)
  {
    v5 = sub_1000681B8("XPC");
    v6 = objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      v7 = *(_QWORD *)(a1 + 32);
      v8 = *(_QWORD *)(a1 + 40);
      v14 = 138412547;
      v15 = v7;
      v16 = 2113;
      v17 = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Sending CK XPC object: (%@)%{private}@", (uint8_t *)&v14, 0x16u);
    }

    v9 = xpc_dictionary_create(0, 0, 0);
    xpc_dictionary_set_string(v9, "kMsgId", (const char *)objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 32)), "UTF8String"));
    v10 = *(_QWORD *)(a1 + 40);
    if (v10)
    {
      v11 = (void *)_CFXPCCreateXPCObjectFromCFObject(v10);
      xpc_dictionary_set_value(v9, "kMsgArgs", v11);

    }
    v12 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "cloudKitConnection"));
    xpc_connection_send_message(v12, v9);

LABEL_10:
  }

}

void sub_10007C920(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_10007C93C(uint64_t a1, uint64_t a2)
{
  id WeakRetained;
  os_log_t v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  void *v14;
  void *v15;
  void *v16;
  os_log_t v17;
  _xpc_connection_s *v18;
  int v19;
  uint64_t v20;
  __int16 v21;
  uint64_t v22;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  if (!WeakRetained)
  {
    v17 = sub_1000681B8("XPC");
    v9 = objc_claimAutoreleasedReturnValue(v17);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      sub_10016DF20();
    goto LABEL_13;
  }
  if (!a2)
  {
    v5 = sub_1000681B8("XPC");
    v6 = objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      v7 = *(_QWORD *)(a1 + 32);
      v8 = *(_QWORD *)(a1 + 40);
      v19 = 138412547;
      v20 = v7;
      v21 = 2113;
      v22 = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Sending CK XPC message: (%@)%{private}@", (uint8_t *)&v19, 0x16u);
    }

    v9 = xpc_dictionary_create(0, 0, 0);
    xpc_dictionary_set_string(v9, "kMsgId", (const char *)objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 32)), "UTF8String"));
    if (*(_QWORD *)(a1 + 40))
    {
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "deviceManager"));
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "cloudAccountInfo"));

      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "loginID"));
      v13 = objc_msgSend(v12, "length");

      if (v13)
      {
        v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionaryWithDictionary:](NSMutableDictionary, "dictionaryWithDictionary:", *(_QWORD *)(a1 + 40)));
        v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "loginID"));
        objc_msgSend(v14, "setObject:forKey:", v15, CFSTR("loginID"));

        v16 = (void *)_CFXPCCreateXPCMessageWithCFObject(v14);
        xpc_dictionary_set_value(v9, "kMsgArgs", v16);

      }
      else
      {
        v14 = (void *)_CFXPCCreateXPCMessageWithCFObject(*(_QWORD *)(a1 + 40));
        xpc_dictionary_set_value(v9, "kMsgArgs", v14);
      }

    }
    v18 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "cloudKitConnection"));
    xpc_connection_send_message(v18, v9);

LABEL_13:
  }

}

void sub_10007CC80(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

void sub_10007CC9C(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  os_log_t v5;
  NSObject *v6;
  NSObject *v7;
  uint64_t v8;
  os_log_t v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  _xpc_connection_s *v15;
  NSObject *v16;
  _QWORD v17[4];
  id v18;
  id v19;
  uint8_t buf[4];
  uint64_t v21;
  __int16 v22;
  uint64_t v23;

  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  if (!WeakRetained)
  {
    v9 = sub_1000681B8("XPC");
    v10 = objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      sub_10016DF80();
    goto LABEL_14;
  }
  v5 = sub_1000681B8("XPC");
  v6 = objc_claimAutoreleasedReturnValue(v5);
  v7 = v6;
  if (!v3)
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      v11 = *(_QWORD *)(a1 + 32);
      v12 = *(_QWORD *)(a1 + 40);
      *(_DWORD *)buf = 138412547;
      v21 = v11;
      v22 = 2113;
      v23 = v12;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Reply: Sending CK XPC message: (%@)%{private}@", buf, 0x16u);
    }

    v10 = xpc_dictionary_create(0, 0, 0);
    xpc_dictionary_set_string(v10, "kMsgId", (const char *)objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 32)), "UTF8String"));
    v13 = *(_QWORD *)(a1 + 40);
    if (v13)
    {
      v14 = (void *)_CFXPCCreateXPCObjectFromCFObject(v13);
      xpc_dictionary_set_value(v10, "kMsgArgs", v14);

    }
    v15 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "cloudKitConnection"));
    v16 = objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "xpcQueue"));
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472;
    v17[2] = sub_10007CEEC;
    v17[3] = &unk_1001E4DB8;
    v19 = *(id *)(a1 + 48);
    v18 = *(id *)(a1 + 32);
    xpc_connection_send_message_with_reply(v15, v10, v16, v17);

LABEL_14:
    goto LABEL_15;
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    sub_10016DFE0();

  v8 = *(_QWORD *)(a1 + 48);
  if (v8)
    (*(void (**)(uint64_t, void *, id))(v8 + 16))(v8, &__NSDictionary0__struct, v3);
LABEL_15:

}

void sub_10007CEEC(uint64_t a1, void *a2)
{
  id v3;
  xpc_type_t type;
  void *v5;
  os_log_t v6;
  NSObject *v7;
  void *v8;
  const char *string;
  os_log_t v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  os_log_t v16;
  NSObject *v17;
  uint64_t v18;
  void *v19;
  void *v20;
  NSErrorUserInfoKey v21;
  void *v22;
  NSErrorUserInfoKey v23;
  const __CFString *v24;
  uint8_t buf[4];
  void *v26;

  v3 = a2;
  type = xpc_get_type(v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionary](NSDictionary, "dictionary"));
  if (type == (xpc_type_t)&_xpc_type_dictionary)
  {
    v8 = (void *)_CFXPCCreateCFObjectFromXPCObject(v3);
    v16 = sub_1000681B8("XPC");
    v17 = objc_claimAutoreleasedReturnValue(v16);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      v26 = v8;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "received reply msg: %@", buf, 0xCu);
    }

    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "objectForKey:", CFSTR("kMsgArgs")));
    v18 = *(_QWORD *)(a1 + 40);
    if (v14 && v18)
    {
      (*(void (**)(uint64_t, void *, _QWORD))(v18 + 16))(v18, v14, 0);
    }
    else
    {
      v23 = NSLocalizedFailureErrorKey;
      v24 = CFSTR("Reply Key Not Found");
      v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v24, &v23, 1));
      v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("BTUserErrorDomain"), 0, v19));
      (*(void (**)(uint64_t, void *, void *))(v18 + 16))(v18, v5, v20);

    }
    goto LABEL_16;
  }
  v6 = sub_1000681B8("XPC");
  v7 = objc_claimAutoreleasedReturnValue(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    sub_10016E0A8();

  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Unexpected object type from reply: %@"), v3));
  if (type == (xpc_type_t)&_xpc_type_error)
  {
    string = xpc_dictionary_get_string(v3, _xpc_error_key_description);
    v10 = sub_1000681B8("XPC");
    v11 = objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      sub_10016E048();

    v12 = objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", string));
    v8 = (void *)v12;
  }
  v13 = *(_QWORD *)(a1 + 40);
  if (v13)
  {
    v21 = NSLocalizedFailureErrorKey;
    v22 = v8;
    v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v22, &v21, 1));
    v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("BTUserErrorDomain"), 0, v14));
    (*(void (**)(uint64_t, void *, void *))(v13 + 16))(v13, v5, v15);

LABEL_16:
  }

}

void sub_10007D300(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

void sub_10007D31C(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  os_log_t v5;
  NSObject *v6;
  uint64_t v7;
  os_log_t v8;
  NSObject *v9;
  os_log_t v10;
  NSObject *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  _xpc_connection_s *v16;
  xpc_object_t v17;
  xpc_type_t type;
  void *v19;
  os_log_t v20;
  NSObject *v21;
  void *v22;
  const char *string;
  os_log_t v24;
  NSObject *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  void *v29;
  os_log_t v30;
  NSObject *v31;
  uint64_t v32;
  void *v33;
  void *v34;
  NSErrorUserInfoKey v35;
  void *v36;
  NSErrorUserInfoKey v37;
  const __CFString *v38;
  uint8_t buf[4];
  void *v40;
  __int16 v41;
  uint64_t v42;

  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  if (!WeakRetained)
  {
    v8 = sub_1000681B8("XPC");
    v9 = objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      sub_10016DF80();
    goto LABEL_30;
  }
  if (!v3)
  {
    v10 = sub_1000681B8("XPC");
    v11 = objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      v12 = *(void **)(a1 + 32);
      v13 = *(_QWORD *)(a1 + 40);
      *(_DWORD *)buf = 138412547;
      v40 = v12;
      v41 = 2113;
      v42 = v13;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Sync reply: Sending CK XPC message: (%@)%{private}@", buf, 0x16u);
    }

    v9 = xpc_dictionary_create(0, 0, 0);
    xpc_dictionary_set_string(v9, "kMsgId", (const char *)objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 32)), "UTF8String"));
    v14 = *(_QWORD *)(a1 + 40);
    if (v14)
    {
      v15 = (void *)_CFXPCCreateXPCObjectFromCFObject(v14);
      xpc_dictionary_set_value(v9, "kMsgArgs", v15);

    }
    v16 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "cloudKitConnection"));
    v17 = xpc_connection_send_message_with_reply_sync(v16, v9);

    type = xpc_get_type(v17);
    v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionary](NSDictionary, "dictionary"));
    if (type == (xpc_type_t)&_xpc_type_dictionary)
    {
      v22 = (void *)_CFXPCCreateCFObjectFromXPCObject(v17);
      v30 = sub_1000681B8("XPC");
      v31 = objc_claimAutoreleasedReturnValue(v30);
      if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        v40 = v22;
        _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "received sync reply msg: %@", buf, 0xCu);
      }

      v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "objectForKey:", CFSTR("kMsgArgs")));
      v32 = *(_QWORD *)(a1 + 48);
      if (v28 && v32)
      {
        (*(void (**)(uint64_t, void *, _QWORD))(v32 + 16))(v32, v28, 0);
      }
      else
      {
        v37 = NSLocalizedFailureErrorKey;
        v38 = CFSTR("Reply Key Not Found");
        v33 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v38, &v37, 1));
        v34 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("BTUserErrorDomain"), 0, v33));
        (*(void (**)(uint64_t, void *, void *))(v32 + 16))(v32, v19, v34);

      }
    }
    else
    {
      v20 = sub_1000681B8("XPC");
      v21 = objc_claimAutoreleasedReturnValue(v20);
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
        sub_10016E16C();

      v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Unexpected object type from reply: %@"), v17));
      if (type == (xpc_type_t)&_xpc_type_error)
      {
        string = xpc_dictionary_get_string(v17, _xpc_error_key_description);
        v24 = sub_1000681B8("XPC");
        v25 = objc_claimAutoreleasedReturnValue(v24);
        if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
          sub_10016E108();

        v26 = objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", string));
        v22 = (void *)v26;
      }
      v27 = *(_QWORD *)(a1 + 48);
      if (!v27)
        goto LABEL_29;
      v35 = NSLocalizedFailureErrorKey;
      v36 = v22;
      v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v36, &v35, 1));
      v29 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("BTUserErrorDomain"), 0, v28));
      (*(void (**)(uint64_t, void *, void *))(v27 + 16))(v27, v19, v29);

    }
LABEL_29:

LABEL_30:
    goto LABEL_31;
  }
  v5 = sub_1000681B8("CloudPairing");
  v6 = objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    sub_10016E1D0();

  v7 = *(_QWORD *)(a1 + 48);
  if (v7)
    (*(void (**)(uint64_t, void *, id))(v7 + 16))(v7, &__NSDictionary0__struct, v3);
LABEL_31:

}

void sub_10007F30C(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  if (!v3 && *(_BYTE *)(a1 + 32))
  {
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, &stru_1001E4E00);
    v3 = 0;
  }

}

void sub_10007F35C(id a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(+[MPCloudKit sharedInstance](MPCloudKit, "sharedInstance"));
  objc_msgSend(v1, "fetchKeyBlob:", 0);

}

void sub_100080E24(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  BOOL v7;
  uint64_t v8;
  id v9;

  v9 = a2;
  v5 = a3;
  v6 = v9;
  if (v9)
  {
    v7 = objc_msgSend(v9, "accountStatus") == (id)1;
    v6 = v9;
    if (v7)
    {
      v8 = 1;
LABEL_7:
      objc_msgSend(*(id *)(a1 + 32), "accountStatusAvailable:force:", v8, 1);
      goto LABEL_8;
    }
  }
  if (objc_msgSend(v6, "accountStatus") != (id)4)
  {
    v8 = 0;
    goto LABEL_7;
  }
LABEL_8:
  objc_msgSend(*(id *)(a1 + 32), "endTransaction:", CFSTR("SignInStatusChanged"));

}

void sub_100080EB4(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  BOOL v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  id v12;

  v12 = a2;
  v5 = a3;
  v6 = v12;
  if (v12)
  {
    v7 = objc_msgSend(v12, "accountStatus") == (id)1;
    v6 = v12;
    if (v7)
    {
      v8 = *(void **)(a1 + 32);
      v9 = (uint64_t)objc_msgSend(v12, "supportsDeviceToDeviceEncryption");
      v10 = v8;
      v11 = 1;
LABEL_7:
      objc_msgSend(v10, "accountStatusAvailable:force:", v11, v9);
      goto LABEL_8;
    }
  }
  if (objc_msgSend(v6, "accountStatus") != (id)4)
  {
    v10 = *(void **)(a1 + 32);
    v11 = 0;
    v9 = 1;
    goto LABEL_7;
  }
LABEL_8:
  objc_msgSend(*(id *)(a1 + 32), "endTransaction:", CFSTR("SignInStatusChanged"));

}

void sub_100080F5C(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  id v5;
  _QWORD v6[4];
  id v7;
  uint64_t v8;

  v3 = a2;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100080FDC;
  v6[3] = &unk_1001E23E8;
  v4 = *(_QWORD *)(a1 + 32);
  v7 = v3;
  v8 = v4;
  v5 = v3;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v6);

}

void sub_100080FDC(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  unsigned __int8 v5;
  os_log_t v6;
  NSObject *v7;
  _BOOL4 v8;
  __objc2_class *v9;
  void *v10;
  void *v11;
  uint8_t buf[16];
  uint8_t v13[16];

  v2 = *(void **)(a1 + 32);
  if (v2)
  {
    if (objc_msgSend(v2, "length") == (id)33)
    {
      v3 = *(void **)(a1 + 40);
      v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionaryWithObjectsAndKeys:](NSMutableDictionary, "dictionaryWithObjectsAndKeys:", *(_QWORD *)(a1 + 32), CFSTR("kMasterKeyBlob"), 0));
      objc_msgSend(v3, "sendCloudKitMsg:args:", CFSTR("MasterKeysAvailable"), v4);

    }
  }
  else
  {
    v5 = objc_msgSend(*(id *)(a1 + 40), "manateeZoneUpgraded");
    v6 = sub_1000681B8("XPC");
    v7 = objc_claimAutoreleasedReturnValue(v6);
    v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
    if ((v5 & 1) != 0)
    {
      if (v8)
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Manatee getMasterKey", buf, 2u);
      }

      v9 = MPCloudKit_Manatee;
    }
    else
    {
      if (v8)
      {
        *(_WORD *)v13 = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "getMasterKey", v13, 2u);
      }

      v9 = MPCloudKit;
    }
    v10 = (void *)objc_claimAutoreleasedReturnValue(-[__objc2_class sharedInstance](v9, "sharedInstance"));
    objc_msgSend(v10, "fetchKeyBlob:", 0);

  }
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "deviceManager"));
  objc_msgSend(v11, "fetchCached");

}

void sub_10008112C(void *a1, void *a2)
{
  id v3;
  xpc_object_t reply;
  void *v5;
  xpc_connection_t remote_connection;
  _xpc_connection_s *v7;
  xpc_object_t original;

  original = a1;
  v3 = a2;
  reply = xpc_dictionary_create_reply(original);
  if (reply)
  {
    if (v3)
    {
      v5 = (void *)_CFXPCCreateXPCObjectFromCFObject(v3);
      xpc_dictionary_set_value(reply, "kMsgArgs", v5);

    }
    remote_connection = xpc_dictionary_get_remote_connection(original);
    v7 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue(remote_connection);
    xpc_connection_send_message(v7, reply);

  }
}

void sub_1000811C8(uint64_t a1, void *a2)
{
  id v3;
  os_log_t v4;
  NSObject *v5;
  void *v6;
  void *v7;
  void *v8;
  const __CFString *v9;
  void *v10;

  v3 = a2;
  if (v3)
  {
    v4 = sub_1000681B8("XPC");
    v5 = objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      sub_10016E69C();

    v6 = *(void **)(a1 + 32);
    v9 = CFSTR("error");
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "localizedDescription"));
    v10 = v7;
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v10, &v9, 1));
    sub_10008112C(v6, v8);

  }
  else
  {
    sub_10008112C(*(void **)(a1 + 32), &off_1001F42C8);
  }

}

void sub_1000812D0(uint64_t a1, void *a2)
{
  void *v2;
  id v3;
  id v4;
  _QWORD v5[2];
  _QWORD v6[2];

  v2 = *(void **)(a1 + 32);
  if (a2)
  {
    v5[0] = CFSTR("status");
    v5[1] = CFSTR("devices");
    v6[0] = &off_1001F4638;
    v6[1] = a2;
    v3 = a2;
    v4 = (id)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v6, v5, 2));
    sub_10008112C(v2, v4);

  }
  else
  {
    v4 = 0;
    sub_10008112C(v2, &off_1001F42F0);
  }

}

void sub_1000813A8(uint64_t a1, void *a2)
{
  id v3;
  os_log_t v4;
  NSObject *v5;
  _UNKNOWN **v6;
  int v7;
  id v8;

  v3 = a2;
  v4 = sub_1000681B8("XPC");
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v7 = 138412290;
    v8 = v3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Add nickname Error? - %@", (uint8_t *)&v7, 0xCu);
  }

  if (v3)
    v6 = &off_1001F4318;
  else
    v6 = &off_1001F4340;
  sub_10008112C(*(void **)(a1 + 32), v6);

}

void sub_100081484(uint64_t a1, void *a2)
{
  id v3;
  os_log_t v4;
  NSObject *v5;
  _UNKNOWN **v6;
  int v7;
  id v8;

  v3 = a2;
  v4 = sub_1000681B8("XPC");
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v7 = 138412290;
    v8 = v3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Add nickname Error? - %@", (uint8_t *)&v7, 0xCu);
  }

  if (v3)
    v6 = &off_1001F43B8;
  else
    v6 = &off_1001F43E0;
  sub_10008112C(*(void **)(a1 + 32), v6);

}

void sub_100081560(uint64_t a1, void *a2)
{
  id v3;
  os_log_t v4;
  NSObject *v5;
  _UNKNOWN **v6;
  int v7;
  id v8;

  v3 = a2;
  v4 = sub_1000681B8("XPC");
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v7 = 138412290;
    v8 = v3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Reset Cached Data, error? - %@", (uint8_t *)&v7, 0xCu);
  }

  if (v3)
    v6 = &off_1001F4458;
  else
    v6 = &off_1001F4480;
  sub_10008112C(*(void **)(a1 + 32), v6);

}

void sub_10008163C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  void *v14;
  void *v15;
  _QWORD v16[2];
  _QWORD v17[2];

  v3 = a2;
  v4 = v3;
  if (v3)
  {
    v16[0] = CFSTR("bluetoothAddress");
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "bluetoothAddress"));
    v16[1] = CFSTR("nickname");
    v17[0] = v5;
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "nickname"));
    v17[1] = v6;
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v17, v16, 2));
    v13 = 0;
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSJSONSerialization dataWithJSONObject:options:error:](NSJSONSerialization, "dataWithJSONObject:options:error:", v7, 0, &v13));
    v9 = v13;

    v10 = *(void **)(a1 + 32);
    if (!v8 || v9)
    {
      sub_10008112C(v10, &__NSDictionary0__struct);
    }
    else
    {
      v11 = (void *)objc_claimAutoreleasedReturnValue(+[XPCArguments CloudDevice](_TtC15audioaccessoryd12XPCArguments, "CloudDevice"));
      v14 = v11;
      v15 = v8;
      v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v15, &v14, 1));
      sub_10008112C(v10, v12);

    }
  }
  else
  {
    sub_10008112C(*(void **)(a1 + 32), &__NSDictionary0__struct);
  }

}

void sub_1000818A4(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  os_log_t v5;
  NSObject *v6;
  _BOOL4 v7;
  void *v8;
  id v9;
  void *v10;
  os_log_t v11;
  void *v12;
  int v13;
  void *v14;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "transactionIdentifierForActionIdentifier:", *(_QWORD *)(a1 + 40)));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "activeTransactions"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKey:", v2));

  v5 = sub_1000681B8("TXN");
  v6 = objc_claimAutoreleasedReturnValue(v5);
  v7 = os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
  if (v4)
  {
    if (v7)
    {
      v13 = 138412290;
      v14 = v2;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Already holding xpc transaction: %@", (uint8_t *)&v13, 0xCu);
    }
  }
  else
  {
    if (v7)
    {
      v13 = 138412290;
      v14 = v2;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Beginning xpc transaction: %@", (uint8_t *)&v13, 0xCu);
    }

    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "activeTransactions"));
    v9 = objc_retainAutorelease(v2);
    v10 = (void *)os_transaction_create(objc_msgSend(v9, "UTF8String"));
    objc_msgSend(v8, "setObject:forKey:", v10, v9);

    v11 = sub_1000681B8("TXN");
    v6 = objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "activeTransactions"));
      v13 = 138412290;
      v14 = v12;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Active transactions: %@", (uint8_t *)&v13, 0xCu);

    }
  }

}

void sub_100081B20(uint64_t a1)
{
  void *v2;
  os_log_t v3;
  NSObject *v4;
  void *v5;
  void *v6;
  void *v7;
  os_log_t v8;
  NSObject *v9;
  void *v10;
  int v11;
  void *v12;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "transactionIdentifierForActionIdentifier:", *(_QWORD *)(a1 + 40)));
  v3 = sub_1000681B8("TXN");
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v11 = 138412290;
    v12 = v2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Ending xpc transaction: %@", (uint8_t *)&v11, 0xCu);
  }

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "activeTransactions"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKey:", v2));

  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "activeTransactions"));
  objc_msgSend(v7, "removeObjectForKey:", v2);

  v8 = sub_1000681B8("TXN");
  v9 = objc_claimAutoreleasedReturnValue(v8);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "activeTransactions"));
    v11 = 138412290;
    v12 = v10;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Active transactions: %@", (uint8_t *)&v11, 0xCu);

  }
}

void sub_100081E54(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_list va;

  va_start(va, a4);
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, (uint8_t *)va, 0x20u);
}

void sub_100081F9C(id a1)
{
  MPCloudKit_Manatee *v1;
  void *v2;

  v1 = objc_alloc_init(MPCloudKit_Manatee);
  v2 = (void *)qword_100212618;
  qword_100212618 = (uint64_t)v1;

}

void sub_100082270(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10008228C(uint64_t a1)
{
  unsigned int v2;
  os_log_t v3;
  NSObject *WeakRetained;
  _BOOL4 v5;
  uint8_t v6[16];
  uint8_t buf[16];

  v2 = +[BTSystemConfiguration isBuddyComplete](BTSystemConfiguration, "isBuddyComplete");
  v3 = sub_1000681B8("MagicPairing");
  WeakRetained = objc_claimAutoreleasedReturnValue(v3);
  v5 = os_log_type_enabled(WeakRetained, OS_LOG_TYPE_DEFAULT);
  if (v2)
  {
    if (v5)
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, WeakRetained, OS_LOG_TYPE_DEFAULT, "Manatee: Buddy State Done", buf, 2u);
    }

    WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
    -[NSObject buddySetupDone](WeakRetained, "buddySetupDone");
  }
  else if (v5)
  {
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, WeakRetained, OS_LOG_TYPE_DEFAULT, "Manatee: Buddy State Update, Not Done", v6, 2u);
  }

}

uint64_t sub_1000824E8(uint64_t a1)
{
  _QWORD v2[5];
  int v3;
  int out_token;

  out_token = 0;
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472;
  v2[2] = sub_100082558;
  v2[3] = &unk_1001E44B8;
  v3 = 0;
  v2[4] = *(_QWORD *)(a1 + 32);
  return notify_register_dispatch("com.apple.mobile.keybagd.first_unlock", &out_token, (dispatch_queue_t)&_dispatch_main_q, v2);
}

id sub_100082558(uint64_t a1)
{
  os_log_t v2;
  NSObject *v3;
  uint8_t v5[16];

  v2 = sub_1000681B8("MagicPairing");
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Manatee: device unlocked after boot ", v5, 2u);
  }

  notify_cancel(*(_DWORD *)(a1 + 40));
  return objc_msgSend(*(id *)(a1 + 32), "initializeCloudKit");
}

void sub_100082670(id a1, int64_t a2, NSError *a3)
{
  NSError *v4;
  os_log_t v5;
  NSObject *v6;
  os_log_t v7;
  NSObject *v8;
  NSObject *v9;
  uint64_t v10;
  int v11;
  int64_t v12;
  __int16 v13;
  NSError *v14;

  v4 = a3;
  v5 = sub_1000681B8("MagicPairing");
  v6 = objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    v11 = 134218242;
    v12 = a2;
    v13 = 2112;
    v14 = v4;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Manatee: forceAccountStatus accountStatusWithCompletionHandler accountStatus %ld error %@", (uint8_t *)&v11, 0x16u);
  }

  if (!v4)
  {
    if (a2 == 1)
    {
      v9 = objc_claimAutoreleasedReturnValue(+[CloudXPCService sharedInstance](CloudXPCService, "sharedInstance"));
      v8 = v9;
      v10 = 1;
    }
    else
    {
      if (a2 == 4)
      {
        v7 = sub_1000681B8("MagicPairing");
        v8 = objc_claimAutoreleasedReturnValue(v7);
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(v11) = 0;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Manatee: forceAccountStatus Account Available but Not Ready, Try again in sometime...", (uint8_t *)&v11, 2u);
        }
        goto LABEL_11;
      }
      v9 = objc_claimAutoreleasedReturnValue(+[CloudXPCService sharedInstance](CloudXPCService, "sharedInstance"));
      v8 = v9;
      v10 = 0;
    }
    -[NSObject accountStatusAvailable:force:](v9, "accountStatusAvailable:force:", v10, 1);
LABEL_11:

  }
}

uint64_t sub_100082BB4(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void sub_100082CF0(id a1, CKAccountInfo *a2, NSError *a3)
{
  CKAccountInfo *v4;
  NSError *v5;
  os_log_t v6;
  NSObject *v7;
  dispatch_time_t v8;
  uint8_t v9[16];

  v4 = a2;
  v5 = a3;
  if (v4
    && -[CKAccountInfo accountStatus](v4, "accountStatus") == (id)1
    && -[CKAccountInfo supportsDeviceToDeviceEncryption](v4, "supportsDeviceToDeviceEncryption"))
  {
    v6 = sub_1000681B8("MagicPairing");
    v7 = objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Manatee: Account manateeZoneAvailable, wait for cloud activity to settle", v9, 2u);
    }

    v8 = dispatch_time(0, 15000000000);
    dispatch_after(v8, (dispatch_queue_t)&_dispatch_main_q, &stru_1001E4F70);
  }

}

void sub_100082DC8(id a1)
{
  void *v1;
  unsigned int v2;
  id v3;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[CBIDSManager sharedInstance](CBIDSManager, "sharedInstance"));
  v2 = objc_msgSend(v1, "shouldUpgradeToManatee");

  if (v2)
  {
    v3 = (id)objc_claimAutoreleasedReturnValue(+[MPCloudKit sharedInstance](MPCloudKit, "sharedInstance"));
    objc_msgSend(v3, "upgradeLegacyNonManateeContainerToManatee");

  }
}

void sub_1000831B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000831D8(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  id WeakRetained;
  os_log_t v7;
  NSObject *v8;
  NSObject *v9;
  dispatch_time_t v10;
  os_log_t v11;
  NSObject *v12;
  unsigned int v13;
  id v14;
  unsigned __int8 v15;
  os_log_t v16;
  NSObject *v17;
  _BOOL4 v18;
  void *v19;
  void *v20;
  os_log_t v21;
  NSObject *v22;
  os_log_t v23;
  NSObject *v24;
  unsigned int v25;
  _QWORD block[5];
  uint8_t buf[4];
  uint64_t v28;
  __int16 v29;
  id v30;

  v5 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v7 = sub_1000681B8("MagicPairing");
  v8 = objc_claimAutoreleasedReturnValue(v7);
  v9 = v8;
  if (WeakRetained)
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134218242;
      v28 = a2;
      v29 = 2112;
      v30 = v5;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Manatee accountStatusWithCompletionHandler accountStatus %ld error %@", buf, 0x16u);
    }

    if (!v5)
    {
      if (a2 == 1)
      {
        if ((objc_msgSend(WeakRetained, "isAccountActive") & 1) == 0)
          objc_msgSend(WeakRetained, "setupSubscriptions");
        objc_msgSend(WeakRetained, "setIsAccountActive:", 1);
        v10 = dispatch_time(0, 5000000000);
        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472;
        block[2] = sub_100083620;
        block[3] = &unk_1001E20E8;
        block[4] = WeakRetained;
        dispatch_after(v10, (dispatch_queue_t)&_dispatch_main_q, block);
        v11 = sub_1000681B8("MagicPairing");
        v12 = objc_claimAutoreleasedReturnValue(v11);
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
        {
          v13 = objc_msgSend(WeakRetained, "isAccountActive");
          *(_DWORD *)buf = 134218240;
          v28 = 1;
          v29 = 1024;
          LODWORD(v30) = v13;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Manatee accountStatusDidChange Accounts available accountStatus %ld self.isAccountActive %d \n", buf, 0x12u);
        }

      }
      else if ((a2 & 0xFFFFFFFFFFFFFFFELL) == 2)
      {
        objc_msgSend(WeakRetained, "setIsAccountActive:", 0);
        objc_msgSend(WeakRetained, "setMasterBlob:", 0);
        objc_msgSend(WeakRetained, "setShouldPauseFetch:", 0);
        objc_msgSend(WeakRetained, "setPauseErrorReason:", 0);
        objc_msgSend(WeakRetained, "setIsFetchInProgress:", 0);
        objc_msgSend(WeakRetained, "setIsFetchMasterKeyInProgress:", 0);
        v14 = objc_loadWeakRetained((id *)(a1 + 40));
        v15 = objc_msgSend(v14, "reinitAfterBuddy");

        v16 = sub_1000681B8("MagicPairing");
        v17 = objc_claimAutoreleasedReturnValue(v16);
        v18 = os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT);
        if ((v15 & 1) != 0)
        {
          if (v18)
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Not sending accounts status, since we are still in buddy. ", buf, 2u);
          }

        }
        else
        {
          if (v18)
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Manatee Sending accounts status, as signed out. ", buf, 2u);
          }

          v19 = (void *)objc_claimAutoreleasedReturnValue(+[CloudXPCService sharedInstance](CloudXPCService, "sharedInstance"));
          objc_msgSend(v19, "accountStatusAvailable:force:", objc_msgSend(*(id *)(a1 + 32), "isAccountActive"), 0);

          v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "readUserPreference:", CFSTR("MagicCloudPairingManateeUpgradedAccount")));
          if (v20)
          {
            objc_msgSend(WeakRetained, "removeuserPreference:sync:", CFSTR("MagicCloudPairingManateeUpgradedAccount"), 1);
            v21 = sub_1000681B8("MagicPairing");
            v22 = objc_claimAutoreleasedReturnValue(v21);
            if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "Manatee delete kMagicCloudPairingManateeUpgraded key", buf, 2u);
            }

          }
          objc_msgSend(*(id *)(a1 + 32), "removeuserPreference:sync:", CFSTR("MagicCloudPairingMasterSubscriptionManateeID"), 1);
          objc_msgSend(*(id *)(a1 + 32), "removeuserPreference:sync:", CFSTR("MagicCloudPairingAccessorySubscriptionManateeID"), 1);
          objc_msgSend(*(id *)(a1 + 32), "removeuserPreference:sync:", CFSTR("MagicPairingMasterKeySubscriptionManateeDisabled"), 1);
        }
        v23 = sub_1000681B8("MagicPairing");
        v24 = objc_claimAutoreleasedReturnValue(v23);
        if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
        {
          v25 = objc_msgSend(WeakRetained, "isAccountActive");
          *(_DWORD *)buf = 134218240;
          v28 = a2;
          v29 = 1024;
          LODWORD(v30) = v25;
          _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "accountStatusDidChange Account unavailable accountStatus %ld self.isAccountActive %d \n", buf, 0x12u);
        }

      }
    }
  }
  else
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      sub_10016E814();

  }
}

void sub_100083620(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(+[CloudXPCService sharedInstance](CloudXPCService, "sharedInstance"));
  objc_msgSend(v2, "accountStatusAvailable:force:", objc_msgSend(*(id *)(a1 + 32), "isAccountActive"), 0);

}

id sub_1000838D8(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "setShouldPauseFetch:", 0);
  objc_msgSend(*(id *)(a1 + 32), "setPauseErrorReason:", 0);
  return objc_msgSend(*(id *)(a1 + 32), "fetchAccessoryKeyBlob:", 0);
}

void sub_10008396C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  os_log_t v8;
  NSObject *v9;
  _QWORD v10[6];

  v5 = a2;
  v6 = a3;
  if (v5)
  {
    if (objc_msgSend(v5, "accountStatus") == (id)1
      && objc_msgSend(v5, "supportsDeviceToDeviceEncryption"))
    {
      v10[0] = _NSConcreteStackBlock;
      v10[1] = 3221225472;
      v10[2] = sub_100083A4C;
      v10[3] = &unk_1001E3108;
      v7 = *(_QWORD *)(a1 + 40);
      v10[4] = *(_QWORD *)(a1 + 32);
      v10[5] = v7;
      dispatch_async((dispatch_queue_t)&_dispatch_main_q, v10);
    }
    else
    {
      v8 = sub_1000681B8("MagicPairing");
      v9 = objc_claimAutoreleasedReturnValue(v8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
        sub_10016E840();

    }
  }

}

id sub_100083A4C(uint64_t a1)
{
  os_log_t v2;
  NSObject *v3;
  uint8_t v5[16];

  v2 = sub_1000681B8("MagicPairing");
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Manatee: fetchKeyBlob Account manateeZoneAvailable ", v5, 2u);
  }

  return objc_msgSend(*(id *)(a1 + 32), "_fetchKeyBlob:", *(_QWORD *)(a1 + 40));
}

void sub_100083F48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
  id *v19;

  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100083F74(uint64_t a1, void *a2, void *a3)
{
  id v5;
  os_log_t v6;
  NSObject *v7;
  void *v8;
  void *v9;
  __objc2_class **p_superclass;
  os_log_t v11;
  NSObject *v12;
  id WeakRetained;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  unsigned int v22;
  void *v23;
  os_log_t v24;
  NSObject *v25;
  os_log_t v26;
  NSObject *v27;
  os_log_t v28;
  NSObject *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  double v34;
  double v35;
  os_log_t v36;
  NSObject *v37;
  dispatch_time_t v38;
  uint64_t v39;
  void *v40;
  id v41;
  uint64_t v42;
  void *v43;
  NSString *v44;
  id v45;
  os_log_t v46;
  NSObject *v47;
  os_log_t v48;
  NSObject *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  id v54;
  id v55;
  id v56;
  uint64_t v57;
  _UNKNOWN **v58;
  void *i;
  void *v60;
  uint64_t v61;
  void *v62;
  _UNKNOWN **v63;
  NSString *v64;
  id v65;
  BOOL v66;
  os_log_t v67;
  NSObject *v68;
  os_log_t v70;
  NSObject *v71;
  id v72;
  uint64_t v73;
  id v74;
  _QWORD v75[4];
  id v76;
  uint64_t v77;
  id v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  _QWORD block[6];
  uint8_t v84[128];
  uint8_t buf[4];
  unint64_t v86;
  __int16 v87;
  void *v88;
  __int16 v89;
  id v90;

  v74 = a2;
  v5 = a3;
  v6 = sub_1000681B8("MagicPairing");
  v7 = objc_claimAutoreleasedReturnValue(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v74, "recordID"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "zoneID"));
    *(_DWORD *)buf = 138412802;
    v86 = (unint64_t)v5;
    v87 = 2112;
    v88 = v9;
    v89 = 2112;
    v90 = v74;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Manatee: fetchKeyBlob completion error %@ recordZoneID %@, record: %@", buf, 0x20u);

  }
  p_superclass = &OBJC_METACLASS___BTSmartRoutingWxDevice.superclass;
  if (!v5)
  {
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v74, "recordID"));
    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "zoneID"));
    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "zoneName"));
    v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "recordZoneBlob"));
    v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "zoneID"));
    v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "zoneName"));
    v22 = objc_msgSend(v18, "isEqualToString:", v21);

    p_superclass = (__objc2_class **)(&OBJC_METACLASS___BTSmartRoutingWxDevice + 8);
    if (!v22)
      goto LABEL_25;
    v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v74, "encryptedValues"));
    WeakRetained = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "objectForKey:", CFSTR("EncryptedMasterKeyBlob")));

    v24 = sub_1000681B8("MagicPairing");
    v25 = objc_claimAutoreleasedReturnValue(v24);
    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      v86 = (unint64_t)WeakRetained;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "Manatee: fetchKeyBlob record %@", buf, 0xCu);
    }

    if ((unint64_t)objc_msgSend(WeakRetained, "length") > 0x20)
    {
      v75[0] = _NSConcreteStackBlock;
      v75[1] = 3221225472;
      v75[2] = sub_100084940;
      v75[3] = &unk_1001E2570;
      v41 = WeakRetained;
      v42 = *(_QWORD *)(a1 + 32);
      v76 = v41;
      v77 = v42;
      v78 = v74;
      dispatch_async((dispatch_queue_t)&_dispatch_main_q, v75);

    }
    else
    {
      v26 = sub_1000681B8("MagicPairing");
      v27 = objc_claimAutoreleasedReturnValue(v26);
      if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "Manatee: fetchKeyBlob NO record", buf, 2u);
      }

      dispatch_async((dispatch_queue_t)&_dispatch_main_q, &stru_1001E4FE0);
    }
    goto LABEL_9;
  }
  if (objc_msgSend(v5, "code") == (id)26 || objc_msgSend(v5, "code") == (id)11)
  {
    v11 = sub_1000681B8("MagicPairing");
    v12 = objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Manatee: fetchKeyBlob CKErrorZoneNotFound or Record does not exist", buf, 2u);
    }

    buf[0] = 0;
    WeakRetained = (id)objc_claimAutoreleasedReturnValue(+[CloudXPCService sharedInstance](CloudXPCService, "sharedInstance"));
    v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", buf, 1));
    v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionaryWithObjectsAndKeys:](NSMutableDictionary, "dictionaryWithObjectsAndKeys:", v14, CFSTR("kMasterKeyBlob"), 0));
    objc_msgSend(WeakRetained, "sendCloudKitMsg:args:", CFSTR("MasterKeysNotAvailable"), v15);

    goto LABEL_9;
  }
  if (objc_msgSend(v5, "code") == (id)6 || objc_msgSend(v5, "code") == (id)7)
  {
    v28 = sub_1000681B8("MagicPairing");
    v29 = objc_claimAutoreleasedReturnValue(v28);
    if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      v86 = (unint64_t)v5;
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "Manatee: fetchKeyBlob unavailable service: %@", buf, 0xCu);
    }

    v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "userInfo"));
    v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v30, "objectForKeyedSubscript:", CKErrorRetryAfterKey));

    if (v31)
    {
      v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "userInfo"));
      v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v32, "objectForKeyedSubscript:", CKErrorRetryAfterKey));
      objc_msgSend(v33, "doubleValue");
      v35 = v34;

      v36 = sub_1000681B8("MagicPairing");
      v37 = objc_claimAutoreleasedReturnValue(v36);
      if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134217984;
        v86 = (unint64_t)v35;
        _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "Manatee: fetchKeyBlob retry after %lu", buf, 0xCu);
      }

      v38 = dispatch_time(0, (uint64_t)(v35 * 1000000000.0));
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_10008488C;
      block[3] = &unk_1001E3108;
      v39 = *(_QWORD *)(a1 + 48);
      block[4] = *(_QWORD *)(a1 + 32);
      block[5] = v39;
      dispatch_after(v38, (dispatch_queue_t)&_dispatch_main_q, block);
    }
  }
  else
  {
    v43 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "domain"));
    v44 = CKErrorDomain;
    if (objc_msgSend(v43, "isEqualToString:", CKErrorDomain))
    {
      v45 = objc_msgSend(v5, "code");

      if (v45 == (id)112)
      {
        v46 = sub_1000681B8("MagicPairing");
        v47 = objc_claimAutoreleasedReturnValue(v46);
        if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEFAULT, "Manatee: fetchKeyBlob lost access to manatee data. Reset and recreate zone.", buf, 2u);
        }

        v48 = sub_1000681B8("MagicPairing");
        v49 = objc_claimAutoreleasedReturnValue(v48);
        if (os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_DEFAULT, "Manatee: fetchKeyBlob. Reset and recreate zone DONE!", buf, 2u);
        }

        WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
        objc_msgSend(WeakRetained, "resetCloudContainerManateeIdentityLost");
        goto LABEL_9;
      }
    }
    else
    {

    }
    WeakRetained = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "domain"));
    if ((objc_msgSend(WeakRetained, "isEqualToString:", CKErrorDomain) & 1) == 0)
    {
LABEL_9:

      goto LABEL_25;
    }
    v50 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "userInfo"));
    v51 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v50, "objectForKeyedSubscript:", CKPartialErrorsByItemIDKey));

    p_superclass = (__objc2_class **)(&OBJC_METACLASS___BTSmartRoutingWxDevice + 8);
    if (v51)
    {
      v73 = a1;
      v52 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "userInfo"));
      v53 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v52, "objectForKeyedSubscript:", CKPartialErrorsByItemIDKey));

      v81 = 0u;
      v82 = 0u;
      v79 = 0u;
      v80 = 0u;
      v54 = v53;
      v55 = objc_msgSend(v54, "countByEnumeratingWithState:objects:count:", &v79, v84, 16);
      if (v55)
      {
        v56 = v55;
        v57 = *(_QWORD *)v80;
        v58 = &MRAVOutputContextGetSharedAudioPresentationContext_ptr;
        while (2)
        {
          for (i = 0; i != v56; i = (char *)i + 1)
          {
            if (*(_QWORD *)v80 != v57)
              objc_enumerationMutation(v54);
            v60 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v54, "objectForKey:", *(_QWORD *)(*((_QWORD *)&v79 + 1) + 8 * (_QWORD)i)));
            v61 = objc_opt_class(v58[128]);
            if ((objc_opt_isKindOfClass(v60, v61) & 1) != 0)
            {
              v62 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v60, "domain"));
              if ((objc_msgSend(v62, "isEqualToString:", v44) & 1) != 0)
              {
                v63 = v58;
                v64 = v44;
                v65 = objc_msgSend(v60, "code");

                v66 = v65 == (id)112;
                v44 = v64;
                v58 = v63;
                if (v66)
                {
                  v67 = sub_1000681B8("MagicPairing");
                  v68 = objc_claimAutoreleasedReturnValue(v67);
                  if (os_log_type_enabled(v68, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_DWORD *)buf = 138412290;
                    v86 = (unint64_t)v60;
                    _os_log_impl((void *)&_mh_execute_header, v68, OS_LOG_TYPE_DEFAULT, "Manatee: fetchKeyBlob lost access to manatee data. Reset and recreate zone due to - %@", buf, 0xCu);
                  }

                  v70 = sub_1000681B8("MagicPairing");
                  v71 = objc_claimAutoreleasedReturnValue(v70);
                  if (os_log_type_enabled(v71, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_WORD *)buf = 0;
                    _os_log_impl((void *)&_mh_execute_header, v71, OS_LOG_TYPE_DEFAULT, "Manatee: fetchKeyBlob. Reset and recreate zone DONE!", buf, 2u);
                  }

                  v72 = objc_loadWeakRetained((id *)(v73 + 40));
                  objc_msgSend(v72, "resetCloudContainerManateeIdentityLost");

                  goto LABEL_56;
                }
              }
              else
              {

              }
            }

          }
          v56 = objc_msgSend(v54, "countByEnumeratingWithState:objects:count:", &v79, v84, 16);
          if (v56)
            continue;
          break;
        }
      }
LABEL_56:

      a1 = v73;
      p_superclass = (__objc2_class **)(&OBJC_METACLASS___BTSmartRoutingWxDevice + 8);
    }
  }
LABEL_25:
  objc_msgSend(*(id *)(a1 + 32), "setIsFetchMasterKeyInProgress:", 0);
  v40 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(p_superclass + 89, "sharedInstance"));
  objc_msgSend(v40, "endTransaction:", CFSTR("ManateefetchKeyBlob"));

}

id sub_10008488C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "fetchKeyBlob:", *(_QWORD *)(a1 + 40) + 1);
}

void sub_10008489C(id a1)
{
  void *v1;
  void *v2;
  void *v3;
  char v4;

  v4 = 0;
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[CloudXPCService sharedInstance](CloudXPCService, "sharedInstance"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", &v4, 1));
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionaryWithObjectsAndKeys:](NSMutableDictionary, "dictionaryWithObjectsAndKeys:", v2, CFSTR("kMasterKeyBlob"), 0));
  objc_msgSend(v1, "sendCloudKitMsg:args:", CFSTR("MasterKeysNotAvailable"), v3);

}

void sub_100084940(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  if (objc_msgSend(*(id *)(a1 + 32), "length") == (id)33)
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "masterBlob"));

    if (!v2)
    {
      v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "readUserPreference:", CFSTR("MagicCloudPairingManateeUpgradedAccount")));

      if (!v3)
      {
        objc_msgSend(*(id *)(a1 + 40), "setuserPreference:value:sync:", CFSTR("MagicCloudPairingManateeUpgradedAccount"), &__kCFBooleanTrue, 1);
        v4 = (void *)objc_claimAutoreleasedReturnValue(+[MPCloudKit sharedInstance](MPCloudKit, "sharedInstance"));
        objc_msgSend(v4, "markLegacyNonManateeContainerMigrated");

      }
      v5 = objc_msgSend(*(id *)(a1 + 32), "mutableCopy");
      objc_msgSend(*(id *)(a1 + 40), "setMasterBlob:", v5);

      v6 = (void *)objc_claimAutoreleasedReturnValue(+[CloudXPCService sharedInstance](CloudXPCService, "sharedInstance"));
      v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionaryWithObjectsAndKeys:](NSMutableDictionary, "dictionaryWithObjectsAndKeys:", *(_QWORD *)(a1 + 32), CFSTR("kMasterKeyBlob"), 0));
      objc_msgSend(v6, "sendCloudKitMsg:args:", CFSTR("MasterKeysAvailable"), v7);

      v8 = (void *)objc_claimAutoreleasedReturnValue(+[CloudXPCService sharedInstance](CloudXPCService, "sharedInstance"));
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "deviceManager"));
      objc_msgSend(v9, "addAccountMagicKeysWithCloudRecord:", *(_QWORD *)(a1 + 48));

      objc_msgSend(*(id *)(a1 + 40), "fetchAccessoryKeyBlob:", 0);
    }
  }
}

void sub_100084C74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100084CA0(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  id WeakRetained;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  double v11;
  double v12;
  int64_t v13;
  os_log_t v14;
  NSObject *v15;
  dispatch_time_t v16;
  id v17;
  uint64_t v18;
  id v19;
  _QWORD block[5];
  id v21;
  uint64_t v22;

  v4 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "domain"));
    if (objc_msgSend(v6, "isEqualToString:", CKErrorDomain))
    {
      if (objc_msgSend(v4, "code") == (id)3 || objc_msgSend(v4, "code") == (id)4)
      {

LABEL_6:
        v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "userInfo"));
        v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "objectForKeyedSubscript:", CKErrorRetryAfterKey));

        if (v8)
        {
          v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "userInfo"));
          v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKeyedSubscript:", CKErrorRetryAfterKey));
          objc_msgSend(v10, "doubleValue");
          v12 = v11;

          v13 = (uint64_t)(v12 * 1000000000.0);
        }
        else
        {
          v13 = 60000000000;
        }
        v16 = dispatch_time(0, v13);
        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472;
        block[2] = sub_100084EA8;
        block[3] = &unk_1001E45B8;
        block[4] = WeakRetained;
        v17 = *(id *)(a1 + 32);
        v18 = *(_QWORD *)(a1 + 48);
        v21 = v17;
        v22 = v18;
        dispatch_after(v16, (dispatch_queue_t)&_dispatch_main_q, block);

        goto LABEL_13;
      }
      v19 = objc_msgSend(v4, "code");

      if (v19 == (id)9)
        goto LABEL_6;
    }
    else
    {

    }
LABEL_13:
    v15 = objc_claimAutoreleasedReturnValue(+[CloudXPCService sharedInstance](CloudXPCService, "sharedInstance"));
    -[NSObject endTransaction:](v15, "endTransaction:", CFSTR("ManateeCheckAccountStatusWithCompletionHandler"));
    goto LABEL_14;
  }
  v14 = sub_1000681B8("MagicPairing");
  v15 = objc_claimAutoreleasedReturnValue(v14);
  if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    sub_10016E898();
LABEL_14:

}

id sub_100084EA8(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "checkAccountStatusWithCompletionHandler:withRetryCount:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48) + 1);
}

void sub_100084F14(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  os_log_t v8;
  NSObject *v9;
  _QWORD v10[6];

  v5 = a2;
  v6 = a3;
  if (v5)
  {
    if (objc_msgSend(v5, "accountStatus") == (id)1
      && objc_msgSend(v5, "supportsDeviceToDeviceEncryption"))
    {
      v10[0] = _NSConcreteStackBlock;
      v10[1] = 3221225472;
      v10[2] = sub_100084FF4;
      v10[3] = &unk_1001E3108;
      v7 = *(_QWORD *)(a1 + 40);
      v10[4] = *(_QWORD *)(a1 + 32);
      v10[5] = v7;
      dispatch_async((dispatch_queue_t)&_dispatch_main_q, v10);
    }
    else
    {
      v8 = sub_1000681B8("MagicPairing");
      v9 = objc_claimAutoreleasedReturnValue(v8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
        sub_10016E8C4();

    }
  }

}

id sub_100084FF4(uint64_t a1)
{
  os_log_t v2;
  NSObject *v3;
  uint8_t v5[16];

  v2 = sub_1000681B8("MagicPairing");
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Manatee: fetchAccessoryKeyBlob Account manateeZoneAvailable ", v5, 2u);
  }

  return objc_msgSend(*(id *)(a1 + 32), "_fetchAccessoryKeyBlob:", *(_QWORD *)(a1 + 40));
}

void sub_1000853C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000853F0(uint64_t a1, void *a2, void *a3)
{
  id v4;
  os_log_t v5;
  NSObject *v6;
  void *v7;
  void *v8;
  __objc2_class **p_superclass;
  os_log_t v10;
  NSObject *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  unsigned int v18;
  void *v19;
  id WeakRetained;
  os_log_t v21;
  NSObject *v22;
  void *v23;
  os_log_t v24;
  NSObject *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  os_log_t v30;
  NSObject *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  double v36;
  double v37;
  os_log_t v38;
  NSObject *v39;
  dispatch_time_t v40;
  uint64_t v41;
  void *v42;
  void *v43;
  NSString *v44;
  id v45;
  os_log_t v46;
  NSObject *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  id v52;
  id v53;
  id v54;
  uint64_t v55;
  _UNKNOWN **v56;
  void *i;
  void *v58;
  uint64_t v59;
  void *v60;
  _UNKNOWN **v61;
  NSString *v62;
  id v63;
  BOOL v64;
  os_log_t v65;
  NSObject *v66;
  os_log_t v68;
  NSObject *v69;
  id v70;
  uint64_t v71;
  id v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  _QWORD v77[6];
  _QWORD block[5];
  id v79;
  uint8_t v80[128];
  uint8_t buf[4];
  unint64_t v82;
  __int16 v83;
  id v84;
  __int16 v85;
  id v86;

  v71 = a1;
  v72 = a2;
  v4 = a3;
  v5 = sub_1000681B8("MagicPairing");
  v6 = objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v72, "recordID"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "zoneID"));
    *(_DWORD *)buf = 138412802;
    v82 = (unint64_t)v4;
    v83 = 2112;
    v84 = v8;
    v85 = 2112;
    v86 = v72;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Manatee: fetchAccessoryKeyBlob completion error %@ recordZoneID %@, record: %@", buf, 0x20u);

  }
  p_superclass = &OBJC_METACLASS___BTSmartRoutingWxDevice.superclass;
  if (!v4)
  {
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v72, "recordID"));
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "zoneID"));
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "zoneName"));
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v71 + 32), "recordZoneAccessoryDatabase"));
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "zoneID"));
    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "zoneName"));
    v18 = objc_msgSend(v14, "isEqualToString:", v17);

    p_superclass = &OBJC_METACLASS___BTSmartRoutingWxDevice.superclass;
    if (!v18)
      goto LABEL_27;
    v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v72, "encryptedValues"));
    WeakRetained = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "objectForKey:", CFSTR("EncryptedAccessoryBlob")));

    v21 = sub_1000681B8("MagicPairing");
    v22 = objc_claimAutoreleasedReturnValue(v21);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    {
      v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v72, "modifiedByDevice"));
      *(_DWORD *)buf = 138412546;
      v82 = (unint64_t)v23;
      v83 = 2112;
      v84 = WeakRetained;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "Manatee: Record Modified by %@: MagicCloudPairingProtectedAccessoryBlob fetch:  encryptedBlob %@", buf, 0x16u);

    }
    if ((unint64_t)objc_msgSend(WeakRetained, "length") >= 0x99)
    {
      v24 = sub_1000681B8("MagicPairing");
      v25 = objc_claimAutoreleasedReturnValue(v24);
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "Manatee: Accessory zone has been upgraded. Dont generate keys", buf, 2u);
      }

      v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v71 + 32), "readUserPreference:", CFSTR("MagicCloudPairingManateeUpgradedAccount")));
      if (!v26)
      {
        objc_msgSend(*(id *)(v71 + 32), "setuserPreference:value:sync:", CFSTR("MagicCloudPairingManateeUpgradedAccount"), &__kCFBooleanTrue, 1);
        v27 = (void *)objc_claimAutoreleasedReturnValue(+[MPCloudKit sharedInstance](MPCloudKit, "sharedInstance"));
        objc_msgSend(v27, "markLegacyNonManateeContainerMigrated");

      }
      v28 = (void *)objc_claimAutoreleasedReturnValue(+[CloudXPCService sharedInstance](CloudXPCService, "sharedInstance", v71));
      v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v28, "deviceManager"));
      objc_msgSend(v29, "addLegacyMagicPairingRecordsWithCloudRecord:userInitiated:completion:", v72, 0, &stru_1001E5070);

    }
    goto LABEL_18;
  }
  if (objc_msgSend(v4, "code") == (id)26 || objc_msgSend(v4, "code") == (id)11)
  {
    v10 = sub_1000681B8("MagicPairing");
    v11 = objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Manatee: fetchAccessoryKeyBlob CKErrorZoneNotFound", buf, 2u);
    }

    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100085CC4;
    block[3] = &unk_1001E23E8;
    block[4] = *(_QWORD *)(v71 + 32);
    v79 = v4;
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

    goto LABEL_27;
  }
  if (objc_msgSend(v4, "code") == (id)6 || objc_msgSend(v4, "code") == (id)7)
  {
    v30 = sub_1000681B8("MagicPairing");
    v31 = objc_claimAutoreleasedReturnValue(v30);
    if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
      sub_10016E91C();

    v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "userInfo"));
    v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v32, "objectForKeyedSubscript:", CKErrorRetryAfterKey));

    if (v33)
    {
      v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "userInfo"));
      v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v34, "objectForKeyedSubscript:", CKErrorRetryAfterKey));
      objc_msgSend(v35, "doubleValue");
      v37 = v36;

      v38 = sub_1000681B8("MagicPairing");
      v39 = objc_claimAutoreleasedReturnValue(v38);
      if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134217984;
        v82 = (unint64_t)v37;
        _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "Manatee: fetchAccessoryKeyBlob CKErrorServiceUnavailable/RateLimited, retry after: %lu", buf, 0xCu);
      }

      v40 = dispatch_time(0, (uint64_t)(v37 * 1000000000.0));
      v77[0] = _NSConcreteStackBlock;
      v77[1] = 3221225472;
      v77[2] = sub_100085D8C;
      v77[3] = &unk_1001E3108;
      v41 = *(_QWORD *)(v71 + 48);
      v77[4] = *(_QWORD *)(v71 + 32);
      v77[5] = v41;
      dispatch_after(v40, (dispatch_queue_t)&_dispatch_main_q, v77);
    }
    goto LABEL_27;
  }
  v43 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "domain"));
  v44 = CKErrorDomain;
  if (objc_msgSend(v43, "isEqualToString:", CKErrorDomain))
  {
    v45 = objc_msgSend(v4, "code");

    if (v45 == (id)112)
    {
      v46 = sub_1000681B8("MagicPairing");
      v47 = objc_claimAutoreleasedReturnValue(v46);
      if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEFAULT, "Manatee: fetchAccessoryKeyBlob lost access to manatee data. Reset and recreate zone.", buf, 2u);
      }

      WeakRetained = objc_loadWeakRetained((id *)(v71 + 40));
      objc_msgSend(WeakRetained, "resetCloudContainerManateeIdentityLost");
      goto LABEL_18;
    }
  }
  else
  {

  }
  WeakRetained = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "domain", v71));
  if ((objc_msgSend(WeakRetained, "isEqualToString:", CKErrorDomain) & 1) == 0)
  {
LABEL_18:

    goto LABEL_27;
  }
  v48 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "userInfo"));
  v49 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v48, "objectForKeyedSubscript:", CKPartialErrorsByItemIDKey));

  p_superclass = (__objc2_class **)(&OBJC_METACLASS___BTSmartRoutingWxDevice + 8);
  if (v49)
  {
    v50 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "userInfo"));
    v51 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v50, "objectForKeyedSubscript:", CKPartialErrorsByItemIDKey));

    v75 = 0u;
    v76 = 0u;
    v73 = 0u;
    v74 = 0u;
    v52 = v51;
    v53 = objc_msgSend(v52, "countByEnumeratingWithState:objects:count:", &v73, v80, 16);
    if (v53)
    {
      v54 = v53;
      v55 = *(_QWORD *)v74;
      v56 = &MRAVOutputContextGetSharedAudioPresentationContext_ptr;
      while (2)
      {
        for (i = 0; i != v54; i = (char *)i + 1)
        {
          if (*(_QWORD *)v74 != v55)
            objc_enumerationMutation(v52);
          v58 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v52, "objectForKey:", *(_QWORD *)(*((_QWORD *)&v73 + 1) + 8 * (_QWORD)i)));
          v59 = objc_opt_class(v56[128]);
          if ((objc_opt_isKindOfClass(v58, v59) & 1) != 0)
          {
            v60 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v58, "domain"));
            if ((objc_msgSend(v60, "isEqualToString:", v44) & 1) != 0)
            {
              v61 = v56;
              v62 = v44;
              v63 = objc_msgSend(v58, "code");

              v64 = v63 == (id)112;
              v44 = v62;
              v56 = v61;
              if (v64)
              {
                v65 = sub_1000681B8("MagicPairing");
                v66 = objc_claimAutoreleasedReturnValue(v65);
                if (os_log_type_enabled(v66, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)buf = 138412290;
                  v82 = (unint64_t)v58;
                  _os_log_impl((void *)&_mh_execute_header, v66, OS_LOG_TYPE_DEFAULT, "Manatee: fetchAccessoryKeyBlob lost access to manatee data. Reset and recreate zone due to - %@", buf, 0xCu);
                }

                v68 = sub_1000681B8("MagicPairing");
                v69 = objc_claimAutoreleasedReturnValue(v68);
                if (os_log_type_enabled(v69, OS_LOG_TYPE_DEFAULT))
                {
                  *(_WORD *)buf = 0;
                  _os_log_impl((void *)&_mh_execute_header, v69, OS_LOG_TYPE_DEFAULT, "Manatee: fetchAccessoryKeyBlob. Reset and recreate zone DONE!", buf, 2u);
                }

                v70 = objc_loadWeakRetained((id *)(v71 + 40));
                objc_msgSend(v70, "resetCloudContainerManateeIdentityLost");

                goto LABEL_55;
              }
            }
            else
            {

            }
          }

        }
        v54 = objc_msgSend(v52, "countByEnumeratingWithState:objects:count:", &v73, v80, 16);
        if (v54)
          continue;
        break;
      }
    }
LABEL_55:

    p_superclass = (__objc2_class **)(&OBJC_METACLASS___BTSmartRoutingWxDevice + 8);
  }
LABEL_27:
  objc_msgSend(*(id *)(v71 + 32), "setIsFetchInProgress:", 0, v71);
  v42 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(p_superclass + 89, "sharedInstance"));
  objc_msgSend(v42, "endTransaction:", CFSTR("ManateeFetchAccessoryKeyBlob"));

}

void sub_100085CC4(uint64_t a1)
{
  void *v2;
  id v3;

  objc_msgSend(*(id *)(a1 + 32), "setShouldPauseFetch:", 1);
  objc_msgSend(*(id *)(a1 + 32), "setPauseErrorReason:", *(_QWORD *)(a1 + 40));
  v3 = (id)objc_claimAutoreleasedReturnValue(+[CloudXPCService sharedInstance](CloudXPCService, "sharedInstance"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "deviceManager"));
  objc_msgSend(v2, "deleteLegacyMagicPairingRecordsWithUserInitiated:completion:", 0, &stru_1001E5050);

}

void sub_100085D34(id a1, NSError *a2)
{
  NSError *v2;
  os_log_t v3;
  NSObject *v4;

  v2 = a2;
  v3 = sub_1000681B8("MagicPairing");
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    sub_10016E97C();

}

id sub_100085D8C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "fetchAccessoryKeyBlob:", *(_QWORD *)(a1 + 40) + 1);
}

void sub_100085D9C(id a1, NSError *a2)
{
  NSError *v2;
  os_log_t v3;
  NSObject *v4;

  v2 = a2;
  if (v2)
  {
    v3 = sub_1000681B8("MagicPairing");
    v4 = objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      sub_10016E9DC();

  }
}

void sub_10008609C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  os_log_t v7;
  NSObject *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  os_log_t v13;
  NSObject *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  os_log_t v21;
  NSObject *v22;
  void *v23;
  void *v24;
  uint8_t buf[4];
  void *v26;

  v5 = a2;
  v6 = a3;
  if (v6)
  {
    v7 = sub_1000681B8("MagicPairing");
    v8 = objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      sub_10016EA3C();

    objc_msgSend(*(id *)(a1 + 32), "handleModifyMasterKeyError:forBlob:withRetryCount:", v6, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
  }
  else if (v5)
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "encryptedValues"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKeyedSubscript:", CFSTR("EncryptedMasterKeyBlob")));
    objc_msgSend(*(id *)(a1 + 32), "setMasterBlob:", v10);

    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "masterBlob"));
    v12 = objc_msgSend(v11, "length");

    if (v12 == (id)33)
    {
      v13 = sub_1000681B8("MagicPairing");
      v14 = objc_claimAutoreleasedReturnValue(v13);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "masterBlob"));
        *(_DWORD *)buf = 138412290;
        v26 = v15;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Manatee: fetched existing master key record: encryptedBlob %@", buf, 0xCu);

      }
      v16 = (void *)objc_claimAutoreleasedReturnValue(+[CloudXPCService sharedInstance](CloudXPCService, "sharedInstance"));
      v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "masterBlob"));
      v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionaryWithObjectsAndKeys:](NSMutableDictionary, "dictionaryWithObjectsAndKeys:", v17, CFSTR("kMasterKeyBlob"), 0));
      objc_msgSend(v16, "sendCloudKitMsg:args:", CFSTR("MasterKeysAvailable"), v18);

      v19 = (void *)objc_claimAutoreleasedReturnValue(+[CloudXPCService sharedInstance](CloudXPCService, "sharedInstance"));
      v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "deviceManager"));
      objc_msgSend(v20, "addAccountMagicKeysWithCloudRecord:", v5);

    }
    objc_msgSend(*(id *)(a1 + 32), "setIsWriteMasterKeysInProgress:", 0);
  }
  else
  {
    v21 = sub_1000681B8("MagicPairing");
    v22 = objc_claimAutoreleasedReturnValue(v21);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    {
      v23 = *(void **)(a1 + 40);
      *(_DWORD *)buf = 138412290;
      v26 = v23;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "Manatee: No master key record found: write new key: %@", buf, 0xCu);
    }

    objc_msgSend(*(id *)(a1 + 32), "writeKeyBlob:withRetryCount:", *(_QWORD *)(a1 + 40), 0);
  }
  v24 = (void *)objc_claimAutoreleasedReturnValue(+[CloudXPCService sharedInstance](CloudXPCService, "sharedInstance"));
  objc_msgSend(v24, "endTransaction:", CFSTR("ManateeModifyKeyBlob"));

}

id sub_1000869E4(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "modifyKeyBlob:withRetryCount:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48) + 1);
}

void sub_100086E6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  id *v25;

  objc_destroyWeak(v25);
  objc_destroyWeak(&location);
  _Block_object_dispose(&a25, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100086EC8(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_100086ED8(uint64_t a1)
{

}

void sub_100086EE0(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  os_log_t v7;
  NSObject *v8;
  void *v9;
  unint64_t v10;
  os_log_t v11;
  NSObject *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  double v18;
  double v19;
  int64_t v20;
  os_log_t v21;
  NSObject *v22;
  void *v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  void *v27;
  void *v28;
  id v29;
  os_log_t v30;
  NSObject *v31;
  os_log_t v32;
  NSObject *v33;
  id WeakRetained;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  id v40;
  id v41;
  id v42;
  uint64_t v43;
  void *i;
  void *v45;
  uint64_t v46;
  void *v47;
  id v48;
  os_log_t v49;
  NSObject *v50;
  os_log_t v52;
  NSObject *v53;
  id v54;
  dispatch_time_t v55;
  void *v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  id v60;
  _QWORD v61[5];
  id v62;
  id v63;
  uint64_t v64;
  uint64_t v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  _QWORD block[5];
  id v71;
  uint64_t v72;
  uint8_t v73[128];
  uint8_t buf[4];
  id v75;
  __int16 v76;
  uint64_t v77;

  v5 = a2;
  v6 = a3;
  if (!v6)
  {
    v21 = sub_1000681B8("MagicPairing");
    v22 = objc_claimAutoreleasedReturnValue(v21);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      v75 = v5;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "writeKeyBlob saveRecordZone record  %@", buf, 0xCu);
    }

    v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "cloudKitDatabase"));
    v61[0] = _NSConcreteStackBlock;
    v61[2] = sub_100087608;
    v61[3] = &unk_1001E5098;
    v24 = *(_QWORD *)(a1 + 80);
    v64 = *(_QWORD *)(a1 + 64);
    v65 = v24;
    v25 = *(void **)(a1 + 40);
    v61[4] = *(_QWORD *)(a1 + 32);
    v26 = *(_QWORD *)(a1 + 48);
    v61[1] = 3221225472;
    v62 = v25;
    v63 = *(id *)(a1 + 56);
    objc_msgSend(v23, "saveRecord:completionHandler:", v26, v61);

    v27 = v62;
    goto LABEL_52;
  }
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40), a3);
  v7 = sub_1000681B8("MagicPairing");
  v8 = objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    v75 = v6;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "writeKeyBlob saveRecordZone: error %@ ", buf, 0xCu);
  }

  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "domain"));
  if (objc_msgSend(v9, "isEqualToString:", CKErrorDomain)
    && (objc_msgSend(v6, "code") == (id)3
     || objc_msgSend(v6, "code") == (id)7
     || objc_msgSend(v6, "code") == (id)4
     || objc_msgSend(v6, "code") == (id)9
     || objc_msgSend(v6, "code") == (id)2
     || objc_msgSend(v6, "code") == (id)6))
  {
    v10 = *(_QWORD *)(a1 + 80);

    if (v10 <= 3)
    {
      v11 = sub_1000681B8("MagicPairing");
      v12 = objc_claimAutoreleasedReturnValue(v11);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        v13 = *(_QWORD *)(a1 + 80);
        *(_DWORD *)buf = 138412546;
        v75 = v6;
        v76 = 2048;
        v77 = v13;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "writeKeyBlob failed with error %@, retry count = %lu", buf, 0x16u);
      }

      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "userInfo"));
      v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "objectForKeyedSubscript:", CKErrorRetryAfterKey));

      if (v15)
      {
        v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "userInfo"));
        v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "objectForKeyedSubscript:", CKErrorRetryAfterKey));
        objc_msgSend(v17, "doubleValue");
        v19 = v18;

        v20 = (uint64_t)(v19 * 1000000000.0);
      }
      else
      {
        v20 = 60000000000;
      }
      v55 = dispatch_time(0, v20);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_1000875F4;
      block[3] = &unk_1001E3460;
      v56 = *(void **)(a1 + 40);
      block[4] = *(_QWORD *)(a1 + 32);
      v57 = v56;
      v58 = *(_QWORD *)(a1 + 80);
      v71 = v57;
      v72 = v58;
      dispatch_after(v55, (dispatch_queue_t)&_dispatch_main_q, block);
      v27 = v71;
LABEL_52:

      goto LABEL_53;
    }
  }
  else
  {

  }
  v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "domain"));
  if (objc_msgSend(v28, "isEqualToString:", CKErrorDomain))
  {
    v29 = objc_msgSend(v6, "code");

    if (v29 == (id)112)
    {
      v30 = sub_1000681B8("MagicPairing");
      v31 = objc_claimAutoreleasedReturnValue(v30);
      if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "Manatee: writeKeyBlob saveRecordZone lost access to manatee data. Reset and recreate zone.", buf, 2u);
      }

      v32 = sub_1000681B8("MagicPairing");
      v33 = objc_claimAutoreleasedReturnValue(v32);
      if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "Manatee: writeKeyBlob saveRecordZone. Reset and recreate zone DONE!", buf, 2u);
      }

      WeakRetained = objc_loadWeakRetained((id *)(a1 + 72));
      objc_msgSend(WeakRetained, "resetCloudContainerManateeIdentityLost");

      goto LABEL_53;
    }
  }
  else
  {

  }
  v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "domain"));
  if ((objc_msgSend(v35, "isEqualToString:", CKErrorDomain) & 1) != 0)
  {
    v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "userInfo"));
    v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v36, "objectForKeyedSubscript:", CKPartialErrorsByItemIDKey));

    if (v37)
    {
      v59 = a1;
      v60 = v5;
      v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "userInfo"));
      v39 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v38, "objectForKeyedSubscript:", CKPartialErrorsByItemIDKey));

      v68 = 0u;
      v69 = 0u;
      v66 = 0u;
      v67 = 0u;
      v40 = v39;
      v41 = objc_msgSend(v40, "countByEnumeratingWithState:objects:count:", &v66, v73, 16);
      if (v41)
      {
        v42 = v41;
        v43 = *(_QWORD *)v67;
        while (2)
        {
          for (i = 0; i != v42; i = (char *)i + 1)
          {
            if (*(_QWORD *)v67 != v43)
              objc_enumerationMutation(v40);
            v45 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v40, "objectForKey:", *(_QWORD *)(*((_QWORD *)&v66 + 1) + 8 * (_QWORD)i)));
            v46 = objc_opt_class(NSError);
            if ((objc_opt_isKindOfClass(v45, v46) & 1) != 0)
            {
              v47 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v45, "domain"));
              if ((objc_msgSend(v47, "isEqualToString:", CKErrorDomain) & 1) != 0)
              {
                v48 = objc_msgSend(v45, "code");

                if (v48 == (id)112)
                {
                  v49 = sub_1000681B8("MagicPairing");
                  v50 = objc_claimAutoreleasedReturnValue(v49);
                  if (os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_DWORD *)buf = 138412290;
                    v75 = v45;
                    _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_DEFAULT, "Manatee: writeKeyBlob lost access to manatee data. Reset and recreate zone due to - %@", buf, 0xCu);
                  }

                  v52 = sub_1000681B8("MagicPairing");
                  v53 = objc_claimAutoreleasedReturnValue(v52);
                  if (os_log_type_enabled(v53, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_WORD *)buf = 0;
                    _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_DEFAULT, "Manatee: writeKeyBlob. Reset and recreate zone DONE!", buf, 2u);
                  }

                  v54 = objc_loadWeakRetained((id *)(v59 + 72));
                  objc_msgSend(v54, "resetCloudContainerManateeIdentityLost");

                  goto LABEL_49;
                }
              }
              else
              {

              }
            }

          }
          v42 = objc_msgSend(v40, "countByEnumeratingWithState:objects:count:", &v66, v73, 16);
          if (v42)
            continue;
          break;
        }
      }
LABEL_49:

      v5 = v60;
    }
  }
  else
  {

  }
LABEL_53:

}

id sub_1000875F4(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "writeKeyBlob:withRetryCount:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48) + 1);
}

void sub_100087608(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  os_log_t v7;
  NSObject *v8;
  NSObject *v9;
  unint64_t v10;
  os_log_t v11;
  NSObject *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  double v18;
  double v19;
  int64_t v20;
  os_log_t v21;
  dispatch_time_t v22;
  void *v23;
  id v24;
  uint64_t v25;
  _QWORD block[5];
  id v27;
  uint64_t v28;
  uint8_t buf[4];
  id v30;
  __int16 v31;
  uint64_t v32;

  v5 = a2;
  v6 = a3;
  if (!v6)
  {
    v21 = sub_1000681B8("MagicPairing");
    v9 = objc_claimAutoreleasedReturnValue(v21);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      v30 = v5;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "MagicCloudPairingProtectedMasterBlob, saveRecord %@", buf, 0xCu);
    }
    goto LABEL_17;
  }
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), a3);
  v7 = sub_1000681B8("MagicPairing");
  v8 = objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    v30 = v6;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "writeKeyBlob saveRecord: error %@ ", buf, 0xCu);
  }

  v9 = objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "domain"));
  if (!-[NSObject isEqualToString:](v9, "isEqualToString:", CKErrorDomain)
    || objc_msgSend(v6, "code") != (id)3
    && objc_msgSend(v6, "code") != (id)7
    && objc_msgSend(v6, "code") != (id)4
    && objc_msgSend(v6, "code") != (id)9
    && objc_msgSend(v6, "code") != (id)2)
  {
LABEL_17:

    goto LABEL_18;
  }
  v10 = *(_QWORD *)(a1 + 64);

  if (v10 <= 3)
  {
    v11 = sub_1000681B8("MagicPairing");
    v12 = objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      v13 = *(_QWORD *)(a1 + 64);
      *(_DWORD *)buf = 138412546;
      v30 = v6;
      v31 = 2048;
      v32 = v13;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "writeKeyBlob:saveRecord failed with error %@, retry count = %lu", buf, 0x16u);
    }

    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "userInfo"));
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "objectForKeyedSubscript:", CKErrorRetryAfterKey));

    if (v15)
    {
      v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "userInfo"));
      v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "objectForKeyedSubscript:", CKErrorRetryAfterKey));
      objc_msgSend(v17, "doubleValue");
      v19 = v18;

      v20 = (uint64_t)(v19 * 1000000000.0);
    }
    else
    {
      v20 = 60000000000;
    }
    v22 = dispatch_time(0, v20);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10008793C;
    block[3] = &unk_1001E3460;
    v23 = *(void **)(a1 + 40);
    block[4] = *(_QWORD *)(a1 + 32);
    v24 = v23;
    v25 = *(_QWORD *)(a1 + 64);
    v27 = v24;
    v28 = v25;
    dispatch_after(v22, (dispatch_queue_t)&_dispatch_main_q, block);

  }
LABEL_18:
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 48));

}

id sub_10008793C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "writeKeyBlob:withRetryCount:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48) + 1);
}

void sub_100087A1C(uint64_t a1)
{
  os_log_t v2;
  NSObject *v3;
  uint64_t v4;
  int v5;
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  void *v10;
  _QWORD v11[4];
  id v12;
  uint64_t v13;
  char v14;
  uint8_t buf[4];
  uint64_t v16;
  __int16 v17;
  int v18;

  v2 = sub_1000681B8("MagicPairing");
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(_QWORD *)(a1 + 32);
    v5 = *(unsigned __int8 *)(a1 + 48);
    *(_DWORD *)buf = 138412546;
    v16 = v4;
    v17 = 1024;
    v18 = v5;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Manatee: updateCloudKitAccessoryZone with %@, delete: %i", buf, 0x12u);
  }

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "modifyOperationTimer"));
  if (v6)
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "modifyOperationTimer"));
    objc_msgSend(v7, "invalidate");

  }
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_100087B88;
  v11[3] = &unk_1001E46C8;
  v8 = *(id *)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 40);
  v12 = v8;
  v13 = v9;
  v14 = *(_BYTE *)(a1 + 48);
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSTimer scheduledTimerWithTimeInterval:repeats:block:](NSTimer, "scheduledTimerWithTimeInterval:repeats:block:", 0, v11, 3.0));
  objc_msgSend(*(id *)(a1 + 40), "setModifyOperationTimer:", v10);

}

void sub_100087B88(uint64_t a1, void *a2)
{
  id v3;
  os_log_t v4;
  NSObject *v5;
  uint64_t v6;
  void *v7;
  _QWORD v8[4];
  id v9;
  id v10;
  char v11;
  uint8_t buf[4];
  uint64_t v13;

  v3 = a2;
  v4 = sub_1000681B8("MagicPairing");
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v6 = *(_QWORD *)(a1 + 32);
    *(_DWORD *)buf = 138412290;
    v13 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Manatee: Updating Accessory Zone Now with %@", buf, 0xCu);
  }

  objc_initWeak((id *)buf, *(id *)(a1 + 40));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "modifyOperationQueue"));
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100087D10;
  v8[3] = &unk_1001E46A0;
  v11 = *(_BYTE *)(a1 + 48);
  objc_copyWeak(&v10, (id *)buf);
  v9 = *(id *)(a1 + 32);
  objc_msgSend(v7, "addOperationWithBlock:", v8);

  objc_destroyWeak(&v10);
  objc_destroyWeak((id *)buf);

}

void sub_100087CE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100087D10(uint64_t a1)
{
  int v2;
  id WeakRetained;
  id v4;

  v2 = *(unsigned __int8 *)(a1 + 48);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v4 = WeakRetained;
  if (v2)
    objc_msgSend(WeakRetained, "deleteCloudKitAccessoryZone");
  else
    objc_msgSend(WeakRetained, "modifyAccessoryBlob:withRetryCount:", *(_QWORD *)(a1 + 32), 0);

}

void sub_100087F8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100087FB8(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  os_log_t v8;
  NSObject *v9;
  void *v10;
  void *v11;
  unsigned __int8 v12;
  os_log_t v13;
  NSObject *v14;
  _BOOL4 v15;
  os_log_t v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  id v23;
  void *v24;
  void *v25;
  _QWORD v26[4];
  id v27;
  id v28;
  id v29[2];
  uint8_t buf[4];
  uint64_t v31;

  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    if (v6)
    {
      v8 = sub_1000681B8("MagicPairing");
      v9 = objc_claimAutoreleasedReturnValue(v8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
        sub_10016EBD8();

      objc_msgSend(WeakRetained, "handleAccessoryModifyError:forBlob:withRetryCount:", v6, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 56));
    }
    else
    {
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "encryptedValues"));
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("EncryptedAccessoryBlob")));

      if (v5)
      {
        v12 = objc_msgSend(v11, "isEqualToData:", *(_QWORD *)(a1 + 32));
        v13 = sub_1000681B8("MagicPairing");
        v14 = objc_claimAutoreleasedReturnValue(v13);
        v15 = os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
        if ((v12 & 1) != 0)
        {
          if (v15)
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Dropping same modify record: MagicCloudPairingProtectedAccessoryBlob", buf, 2u);
          }

        }
        else
        {
          if (v15)
          {
            v19 = *(_QWORD *)(a1 + 32);
            *(_DWORD *)buf = 138412290;
            v31 = v19;
            _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Manatee: modify record: MagicCloudPairingProtectedAccessoryBlob fetch:  encryptedBlob %@", buf, 0xCu);
          }

          v20 = *(_QWORD *)(a1 + 32);
          v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "encryptedValues"));
          objc_msgSend(v21, "setObject:forKeyedSubscript:", v20, CFSTR("EncryptedAccessoryBlob"));

          objc_initWeak((id *)buf, WeakRetained);
          v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "cloudKitDatabase"));
          v26[0] = _NSConcreteStackBlock;
          v26[1] = 3221225472;
          v26[2] = sub_100088314;
          v26[3] = &unk_1001E4718;
          v27 = v5;
          objc_copyWeak(v29, (id *)buf);
          v23 = *(id *)(a1 + 32);
          v24 = *(void **)(a1 + 56);
          v28 = v23;
          v29[1] = v24;
          objc_msgSend(v22, "saveRecord:completionHandler:", v27, v26);

          objc_destroyWeak(v29);
          objc_destroyWeak((id *)buf);
        }
      }
      else
      {
        v16 = sub_1000681B8("MagicPairing");
        v17 = objc_claimAutoreleasedReturnValue(v16);
        if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
        {
          v18 = *(_QWORD *)(a1 + 32);
          *(_DWORD *)buf = 138412290;
          v31 = v18;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Manatee: No record found: write new data: %@", buf, 0xCu);
        }

        objc_msgSend(WeakRetained, "writeAccessoryBlob:withRetryCount:", *(_QWORD *)(a1 + 32), 0);
      }

    }
    dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));
    v25 = (void *)objc_claimAutoreleasedReturnValue(+[CloudXPCService sharedInstance](CloudXPCService, "sharedInstance"));
    objc_msgSend(v25, "endTransaction:", CFSTR("ManateeModifyAccessoryBlob"));

  }
}

void sub_1000882E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100088314(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  os_log_t v7;
  NSObject *v8;
  NSObject *v9;
  id WeakRetained;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  _QWORD v16[4];
  id v17;
  uint8_t buf[4];
  id v19;

  v5 = a2;
  v6 = a3;
  v7 = sub_1000681B8("MagicPairing");
  v8 = objc_claimAutoreleasedReturnValue(v7);
  v9 = v8;
  if (v6)
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      sub_10016EC38();

    WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
    objc_msgSend(WeakRetained, "handleAccessoryModifyError:forBlob:withRetryCount:", v6, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 56));
  }
  else
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      v19 = v5;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Manatee: Successfully saved the modified record - %@", buf, 0xCu);
    }

    v11 = (void *)objc_claimAutoreleasedReturnValue(+[CloudXPCService sharedInstance](CloudXPCService, "sharedInstance"));
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "deviceManager"));
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472;
    v16[2] = sub_100088518;
    v16[3] = &unk_1001E2110;
    v17 = v5;
    objc_msgSend(v12, "addLegacyMagicPairingRecordsWithCloudRecord:userInitiated:completion:", v17, 1, v16);

    v13 = (void *)objc_claimAutoreleasedReturnValue(+[CloudXPCService sharedInstance](CloudXPCService, "sharedInstance"));
    v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", 1));
    v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionaryWithObjectsAndKeys:](NSMutableDictionary, "dictionaryWithObjectsAndKeys:", v14, CFSTR("kUploadStatus"), 0));
    objc_msgSend(v13, "sendCloudKitMsg:args:", CFSTR("DeviceInfoUploadStatus"), v15);

    WeakRetained = v17;
  }

}

void sub_100088518(uint64_t a1, void *a2)
{
  id v2;
  os_log_t v3;
  NSObject *v4;

  v2 = a2;
  if (v2)
  {
    v3 = sub_1000681B8("MagicPairing");
    v4 = objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      sub_10016EC98();

  }
}

void sub_100088DF4(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 160));
  _Unwind_Resume(a1);
}

void sub_100088E20(uint64_t a1)
{
  void *v2;
  id v3;
  void *v4;
  _QWORD v5[4];
  id v6;
  id v7[2];
  id location;

  objc_initWeak(&location, *(id *)(a1 + 32));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "modifyOperationQueue"));
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100088F08;
  v5[3] = &unk_1001E4740;
  objc_copyWeak(v7, &location);
  v3 = *(id *)(a1 + 40);
  v4 = *(void **)(a1 + 48);
  v6 = v3;
  v7[1] = v4;
  objc_msgSend(v2, "addOperationWithBlock:", v5);

  objc_destroyWeak(v7);
  objc_destroyWeak(&location);
}

void sub_100088EE4(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_100088F08(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "modifyAccessoryBlob:withRetryCount:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 48) + 1);

}

void sub_100088F4C(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "writeAccessoryBlob:withRetryCount:", *(_QWORD *)(a1 + 32), 0);

}

void sub_1000892C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
  id *v19;

  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000892EC(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  os_log_t v7;
  NSObject *v8;
  void *v9;
  id v10;
  os_log_t v11;
  NSObject *v12;
  os_log_t v13;
  NSObject *v14;
  id WeakRetained;
  os_log_t v16;
  NSObject *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  id v25;
  id v26;
  id v27;
  uint64_t v28;
  void *i;
  void *v30;
  uint64_t v31;
  void *v32;
  id v33;
  os_log_t v34;
  NSObject *v35;
  os_log_t v37;
  NSObject *v38;
  id v39;
  void *v40;
  id v41;
  uint64_t v42;
  _QWORD v43[5];
  id v44;
  uint64_t v45;
  _QWORD block[5];
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  uint8_t v51[128];
  uint8_t buf[4];
  id v53;

  v5 = a2;
  v6 = a3;
  if (v6)
  {
    v7 = sub_1000681B8("MagicPairing");
    v8 = objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      v53 = v6;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "writeAccessoryBlob saveRecordZone: error %@ ", buf, 0xCu);
    }

    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "domain"));
    if (objc_msgSend(v9, "isEqualToString:", CKErrorDomain))
    {
      v10 = objc_msgSend(v6, "code");

      if (v10 == (id)112)
      {
        v11 = sub_1000681B8("MagicPairing");
        v12 = objc_claimAutoreleasedReturnValue(v11);
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Manatee: writeAccessoryBlob saveRecordZone lost access to manatee data. Reset and recreate zone.", buf, 2u);
        }

        v13 = sub_1000681B8("MagicPairing");
        v14 = objc_claimAutoreleasedReturnValue(v13);
        if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Manatee: writeAccessoryBlob saveRecordZone. Reset and recreate zone DONE!", buf, 2u);
        }

        WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
        objc_msgSend(WeakRetained, "resetCloudContainerManateeIdentityLost");
        goto LABEL_30;
      }
    }
    else
    {

    }
    WeakRetained = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "domain"));
    if ((objc_msgSend(WeakRetained, "isEqualToString:", CKErrorDomain) & 1) == 0)
    {
LABEL_30:

      goto LABEL_37;
    }
    v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "userInfo"));
    v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "objectForKeyedSubscript:", CKPartialErrorsByItemIDKey));

    if (v22)
    {
      v41 = v5;
      v42 = a1;
      v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "userInfo"));
      v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "objectForKeyedSubscript:", CKPartialErrorsByItemIDKey));

      v49 = 0u;
      v50 = 0u;
      v47 = 0u;
      v48 = 0u;
      v25 = v24;
      v26 = objc_msgSend(v25, "countByEnumeratingWithState:objects:count:", &v47, v51, 16);
      if (v26)
      {
        v27 = v26;
        v28 = *(_QWORD *)v48;
        while (2)
        {
          for (i = 0; i != v27; i = (char *)i + 1)
          {
            if (*(_QWORD *)v48 != v28)
              objc_enumerationMutation(v25);
            v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "objectForKey:", *(_QWORD *)(*((_QWORD *)&v47 + 1) + 8 * (_QWORD)i)));
            v31 = objc_opt_class(NSError);
            if ((objc_opt_isKindOfClass(v30, v31) & 1) != 0)
            {
              v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v30, "domain"));
              if ((objc_msgSend(v32, "isEqualToString:", CKErrorDomain) & 1) != 0)
              {
                v33 = objc_msgSend(v30, "code");

                if (v33 == (id)112)
                {
                  v34 = sub_1000681B8("MagicPairing");
                  v35 = objc_claimAutoreleasedReturnValue(v34);
                  if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_DWORD *)buf = 138412290;
                    v53 = v30;
                    _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "Manatee: handleAccessoryModifyError lost access to manatee data. Reset and recreate zone due to - %@", buf, 0xCu);
                  }

                  v37 = sub_1000681B8("MagicPairing");
                  v38 = objc_claimAutoreleasedReturnValue(v37);
                  if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_WORD *)buf = 0;
                    _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "Manatee: handleAccessoryModifyError. Reset and recreate zone DONE!", buf, 2u);
                  }

                  v39 = objc_loadWeakRetained((id *)(v42 + 64));
                  objc_msgSend(v39, "resetCloudContainerManateeIdentityLost");

                  goto LABEL_36;
                }
              }
              else
              {

              }
            }

          }
          v27 = objc_msgSend(v25, "countByEnumeratingWithState:objects:count:", &v47, v51, 16);
          if (v27)
            continue;
          break;
        }
      }
LABEL_36:

      v5 = v41;
      a1 = v42;
    }
  }
  else
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100089848;
    block[3] = &unk_1001E20E8;
    block[4] = *(_QWORD *)(a1 + 32);
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);
    v16 = sub_1000681B8("MagicPairing");
    v17 = objc_claimAutoreleasedReturnValue(v16);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      v53 = v5;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Manatee: saveRecordZone record %@, resume fetches", buf, 0xCu);
    }

    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "cloudKitDatabase"));
    v43[0] = _NSConcreteStackBlock;
    v43[1] = 3221225472;
    v43[2] = sub_100089878;
    v43[3] = &unk_1001E4628;
    v19 = *(_QWORD *)(a1 + 32);
    v20 = *(_QWORD *)(a1 + 40);
    v45 = *(_QWORD *)(a1 + 72);
    v43[4] = v19;
    v44 = *(id *)(a1 + 48);
    objc_msgSend(v18, "saveRecord:completionHandler:", v20, v43);

  }
LABEL_37:
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 56));
  v40 = (void *)objc_claimAutoreleasedReturnValue(+[CloudXPCService sharedInstance](CloudXPCService, "sharedInstance"));
  objc_msgSend(v40, "endTransaction:", CFSTR("ManateeWriteAccessoryBlob"));

}

id sub_100089848(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "setShouldPauseFetch:", 0);
  return objc_msgSend(*(id *)(a1 + 32), "setPauseErrorReason:", 0);
}

void sub_100089878(_QWORD *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  os_log_t v7;
  NSObject *v8;
  NSObject *v9;
  os_log_t v10;
  NSObject *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  os_log_t v19;
  NSObject *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  double v27;
  double v28;
  os_log_t v29;
  NSObject *v30;
  uint64_t v31;
  dispatch_time_t v32;
  void *v33;
  id v34;
  uint64_t v35;
  id v36;
  void **v37;
  uint64_t v38;
  void (*v39)(uint64_t, void *);
  void *v40;
  id v41;
  _QWORD block[5];
  id v43;
  uint64_t v44;
  uint8_t buf[4];
  id v46;
  __int16 v47;
  uint64_t v48;
  __int16 v49;
  unint64_t v50;

  v5 = a2;
  v6 = a3;
  v7 = sub_1000681B8("MagicPairing");
  v8 = objc_claimAutoreleasedReturnValue(v7);
  v9 = v8;
  if (!v6)
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      v46 = v5;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Manatee: writeAccessoryBlob createRecordZone record  %@", buf, 0xCu);
    }

    v12 = (void *)objc_claimAutoreleasedReturnValue(+[CloudXPCService sharedInstance](CloudXPCService, "sharedInstance"));
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "deviceManager"));
    v37 = _NSConcreteStackBlock;
    v38 = 3221225472;
    v39 = sub_100089E58;
    v40 = &unk_1001E2110;
    v41 = v5;
    objc_msgSend(v13, "addLegacyMagicPairingRecordsWithCloudRecord:userInitiated:completion:", v41, 1, &v37);

    v14 = (void *)objc_claimAutoreleasedReturnValue(+[CloudXPCService sharedInstance](CloudXPCService, "sharedInstance"));
    v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", 1));
    v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionaryWithObjectsAndKeys:](NSMutableDictionary, "dictionaryWithObjectsAndKeys:", v15, CFSTR("kUploadStatus"), 0, v37, v38, v39, v40));
    objc_msgSend(v14, "sendCloudKitMsg:args:", CFSTR("DeviceInfoUploadStatus"), v16);

    v17 = v41;
    goto LABEL_10;
  }
  if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    sub_10016D360();

  if (a1[6] >= 5uLL)
  {
    v10 = sub_1000681B8("MagicPairing");
    v11 = objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      sub_10016EE78();
LABEL_19:

    goto LABEL_20;
  }
  v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "domain"));
  if (objc_msgSend(v18, "isEqualToString:", CKErrorDomain))
  {
    if (objc_msgSend(v6, "code") == (id)3 || objc_msgSend(v6, "code") == (id)4 || objc_msgSend(v6, "code") == (id)9)
    {

LABEL_16:
      v19 = sub_1000681B8("MagicPairing");
      v20 = objc_claimAutoreleasedReturnValue(v19);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
        sub_10016EED8();

      v11 = objc_claimAutoreleasedReturnValue(+[CloudXPCService sharedInstance](CloudXPCService, "sharedInstance"));
      v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", 0));
      v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionaryWithObjectsAndKeys:](NSMutableDictionary, "dictionaryWithObjectsAndKeys:", v21, CFSTR("kUploadStatus"), 0));
      -[NSObject sendCloudKitMsg:args:](v11, "sendCloudKitMsg:args:", CFSTR("DeviceInfoUploadStatus"), v22);

      goto LABEL_19;
    }
    v36 = objc_msgSend(v6, "code");

    if (v36 == (id)6)
      goto LABEL_16;
  }
  else
  {

  }
  if (objc_msgSend(v6, "code") == (id)7)
  {
    v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "userInfo"));
    v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "objectForKeyedSubscript:", CKErrorRetryAfterKey));

    if (v24)
    {
      v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "userInfo"));
      v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "objectForKeyedSubscript:", CKErrorRetryAfterKey));
      objc_msgSend(v26, "doubleValue");
      v28 = v27 + 5.0;

      v29 = sub_1000681B8("MagicPairing");
      v30 = objc_claimAutoreleasedReturnValue(v29);
      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
      {
        v31 = a1[6];
        *(_DWORD *)buf = 138412802;
        v46 = v6;
        v47 = 2048;
        v48 = v31;
        v49 = 2048;
        v50 = (unint64_t)v28;
        _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "Manatee: writeAccessoryBlob failed with error %@, retry count = %lu, retry time: %lu", buf, 0x20u);
      }

      v32 = dispatch_time(0, (uint64_t)(v28 * 1000000000.0));
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_100089D2C;
      block[3] = &unk_1001E3460;
      v33 = (void *)a1[5];
      block[4] = a1[4];
      v34 = v33;
      v35 = a1[6];
      v43 = v34;
      v44 = v35;
      dispatch_after(v32, (dispatch_queue_t)&_dispatch_main_q, block);
      v17 = v43;
LABEL_10:

    }
  }
LABEL_20:

}

void sub_100089D2C(uint64_t a1)
{
  void *v2;
  id v3;
  void *v4;
  _QWORD v5[4];
  id v6;
  id v7[2];
  id location;

  objc_initWeak(&location, *(id *)(a1 + 32));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "modifyOperationQueue"));
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100089E14;
  v5[3] = &unk_1001E4740;
  objc_copyWeak(v7, &location);
  v3 = *(id *)(a1 + 40);
  v4 = *(void **)(a1 + 48);
  v6 = v3;
  v7[1] = v4;
  objc_msgSend(v2, "addOperationWithBlock:", v5);

  objc_destroyWeak(v7);
  objc_destroyWeak(&location);
}

void sub_100089DF0(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_100089E14(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "modifyAccessoryBlob:withRetryCount:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 48) + 1);

}

void sub_100089E58(uint64_t a1, void *a2)
{
  id v2;
  os_log_t v3;
  NSObject *v4;

  v2 = a2;
  if (v2)
  {
    v3 = sub_1000681B8("MagicPairing");
    v4 = objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      sub_10016EF38();

  }
}

void sub_10008A114(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  os_log_t v5;
  NSObject *v6;
  _BOOL4 v7;
  const char *v8;
  NSObject *v9;
  uint32_t v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  uint8_t buf[4];
  id v17;

  v4 = a3;
  v5 = sub_1000681B8("MagicPairing");
  v6 = objc_claimAutoreleasedReturnValue(v5);
  v7 = os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
  if (v4)
  {
    if (v7)
    {
      *(_DWORD *)buf = 138412290;
      v17 = v4;
      v8 = "Manatee: deleteCloudKitAccessoryZone: error %@ ";
      v9 = v6;
      v10 = 12;
LABEL_6:
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, v8, buf, v10);
    }
  }
  else if (v7)
  {
    *(_WORD *)buf = 0;
    v8 = "Manatee: Successfully deleted record";
    v9 = v6;
    v10 = 2;
    goto LABEL_6;
  }

  v11 = (void *)objc_claimAutoreleasedReturnValue(+[CloudXPCService sharedInstance](CloudXPCService, "sharedInstance"));
  v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v4 == 0, CFSTR("kUploadStatus")));
  v15 = v12;
  v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v15, &v14, 1));
  objc_msgSend(v11, "sendCloudKitMsg:args:", CFSTR("DeviceInfoUploadStatus"), v13);

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_10008A294(id a1, NSError *a2)
{
  NSError *v2;
  os_log_t v3;
  NSObject *v4;

  v2 = a2;
  v3 = sub_1000681B8("MagicPairing");
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    sub_10016EF98();

}

void sub_10008A698(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  os_log_t v7;
  NSObject *v8;
  NSObject *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  void *v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  _BYTE *v19;
  char *v20;
  int64_t v21;
  void *v22;
  os_log_t v23;
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  int v28;
  id v29;

  v5 = a2;
  v6 = a3;
  v7 = sub_1000681B8("MagicPairing");
  v8 = objc_claimAutoreleasedReturnValue(v7);
  v9 = v8;
  if (v6)
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      sub_10016F058();

    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "userInfo"));
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "objectForKeyedSubscript:", NSUnderlyingErrorKey));

    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "domain"));
    if (objc_msgSend(v12, "isEqualToString:", CKErrorDomain)
      && CKErrorIsCode(v6, 15)
      && v11)
    {
      v13 = objc_msgSend(v11, "code");

      if (v13 != (id)2032 || !*(_QWORD *)(a1 + 32))
        goto LABEL_18;
      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "localizedDescription"));
      v15 = objc_msgSend(v14, "rangeOfString:", CFSTR("'"));
      v17 = v16;

      v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "localizedDescription"));
      v19 = objc_msgSend(v18, "rangeOfString:options:", CFSTR("'"), 4);

      v20 = &v15[v17];
      v21 = v19 - &v15[v17];
      v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "localizedDescription"));
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "substringWithRange:", v20, v21));

      v23 = sub_1000681B8("MagicPairing");
      v24 = objc_claimAutoreleasedReturnValue(v23);
      if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
        sub_10016EFF8();

      v25 = *(_QWORD *)(a1 + 32);
      if (v25)
        objc_msgSend(*(id *)(a1 + 40), "setuserPreference:value:sync:", v25, v12, 1);
    }

LABEL_18:
    goto LABEL_19;
  }
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    v28 = 138412290;
    v29 = v5;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Manatee: saveSubscription record: %@", (uint8_t *)&v28, 0xCu);
  }

  v26 = *(_QWORD *)(a1 + 32);
  if (v26)
  {
    v27 = *(void **)(a1 + 40);
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "subscriptionID"));
    objc_msgSend(v27, "setuserPreference:value:sync:", v26, v11, 1);
    goto LABEL_18;
  }
LABEL_19:

}

void sub_10008AB50(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  os_log_t v7;
  NSObject *v8;
  NSObject *v9;
  NSObject *v10;
  id v11;
  void *v12;
  void *v13;
  unsigned int v14;
  os_log_t v15;
  NSObject *v16;
  void *v17;
  uint64_t v18;
  void *v19;
  int v20;
  id v21;

  v5 = a2;
  v6 = a3;
  v7 = sub_1000681B8("MagicPairing");
  v8 = objc_claimAutoreleasedReturnValue(v7);
  v9 = v8;
  if (v6)
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      sub_10016F118();

    v10 = objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "domain"));
    if (-[NSObject isEqualToString:](v10, "isEqualToString:", CKErrorDomain))
    {
      v11 = objc_msgSend(v6, "code");

      if (v11 == (id)11)
      {
        objc_msgSend(*(id *)(a1 + 40), "removeuserPreference:sync:", *(_QWORD *)(a1 + 48), 1);
        objc_msgSend(*(id *)(a1 + 40), "createSubscritionForRecordType:", *(_QWORD *)(a1 + 56));
      }
      goto LABEL_16;
    }
LABEL_15:

    goto LABEL_16;
  }
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    v20 = 138412290;
    v21 = v5;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Manatee: Found existing subscription - %@", (uint8_t *)&v20, 0xCu);
  }

  v12 = *(void **)(a1 + 32);
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "subscriptionID"));
  v14 = objc_msgSend(v12, "isEqualToString:", v13);

  v15 = sub_1000681B8("MagicPairing");
  v16 = objc_claimAutoreleasedReturnValue(v15);
  v10 = v16;
  if (!v14)
  {
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      sub_10016F0B8();
    goto LABEL_15;
  }
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    v20 = 138412290;
    v21 = v5;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Manatee: Already created this subscription - %@", (uint8_t *)&v20, 0xCu);
  }

  v17 = *(void **)(a1 + 40);
  v18 = *(_QWORD *)(a1 + 48);
  v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "subscriptionID"));
  objc_msgSend(v17, "setuserPreference:value:sync:", v18, v19, 1);

  objc_msgSend(*(id *)(a1 + 40), "setCloudSubscription:", v5);
LABEL_16:

}

void sub_10008AEA4(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  os_log_t v6;
  NSObject *v7;
  void *v8;
  void *v9;
  os_log_t v10;
  NSObject *v11;
  void *v12;
  void *v13;
  int v14;
  id v15;

  v5 = a2;
  if (!a3)
  {
    v6 = sub_1000681B8("MagicPairing");
    v7 = objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      v14 = 138412290;
      v15 = v5;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Manatee: Found subscription - %@", (uint8_t *)&v14, 0xCu);
    }

    v8 = *(void **)(a1 + 32);
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "subscriptionID"));
    LODWORD(v8) = objc_msgSend(v8, "isEqualToString:", v9);

    if ((_DWORD)v8)
    {
      v10 = sub_1000681B8("MagicPairing");
      v11 = objc_claimAutoreleasedReturnValue(v10);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        v14 = 138412290;
        v15 = v5;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Manatee: Already have subscription - %@", (uint8_t *)&v14, 0xCu);
      }

      v12 = *(void **)(a1 + 40);
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "subscriptionID"));
      objc_msgSend(v12, "setuserPreference:value:sync:", CFSTR("MagicCloudPairingAccessorySubscriptionManateeID"), v13, 1);

      objc_msgSend(*(id *)(a1 + 40), "setCloudSubscription:", v5);
    }
  }

}

void sub_10008B19C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  id *v17;
  uint64_t v18;

  objc_destroyWeak(v17);
  objc_destroyWeak((id *)(v18 - 64));
  _Block_object_dispose(&a17, 8);
  _Unwind_Resume(a1);
}

void sub_10008B1DC(uint64_t a1, void *a2, void *a3)
{
  id v5;
  os_log_t v6;
  NSObject *v7;
  id v8;
  id v9;
  uint64_t v10;
  void *i;
  void *v12;
  uint64_t v13;
  id v14;
  void *v15;
  unsigned int v16;
  os_log_t v17;
  NSObject *v18;
  void *v19;
  void *v20;
  void *v21;
  id v22;
  id val;
  _QWORD v24[4];
  id v25;
  id v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint8_t buf[4];
  id v32;
  __int16 v33;
  id v34;
  _BYTE v35[128];

  v5 = a2;
  v22 = a3;
  val = objc_loadWeakRetained((id *)(a1 + 48));
  v6 = sub_1000681B8("MagicPairing");
  v7 = objc_claimAutoreleasedReturnValue(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    v32 = v5;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Manatee: fetchAllSubscriptionsWithCompletionHandler: error %@ ", buf, 0xCu);
  }

  v29 = 0u;
  v30 = 0u;
  v27 = 0u;
  v28 = 0u;
  v8 = v5;
  v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v27, v35, 16);
  if (v9)
  {
    v10 = *(_QWORD *)v28;
    do
    {
      for (i = 0; i != v9; i = (char *)i + 1)
      {
        if (*(_QWORD *)v28 != v10)
          objc_enumerationMutation(v8);
        v12 = *(void **)(*((_QWORD *)&v27 + 1) + 8 * (_QWORD)i);
        v13 = objc_opt_class(CKRecordZoneSubscription);
        if ((objc_opt_isKindOfClass(v12, v13) & 1) != 0)
        {
          v14 = v12;
          v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "recordType"));
          v16 = objc_msgSend(v15, "isEqualToString:", *(_QWORD *)(a1 + 32));

          if (v16)
          {
            *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
            v17 = sub_1000681B8("MagicPairing");
            v18 = objc_claimAutoreleasedReturnValue(v17);
            if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
            {
              v19 = *(void **)(a1 + 32);
              *(_DWORD *)buf = 138412546;
              v32 = v19;
              v33 = 2112;
              v34 = v14;
              _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Manatee: Delete Subscription for record type: %@ and sub: %@", buf, 0x16u);
            }

            objc_initWeak((id *)buf, val);
            v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(val, "cloudKitDatabase"));
            v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "subscriptionID"));
            v24[0] = _NSConcreteStackBlock;
            v24[1] = 3221225472;
            v24[2] = sub_10008B52C;
            v24[3] = &unk_1001E48A0;
            v25 = *(id *)(a1 + 32);
            objc_copyWeak(&v26, (id *)buf);
            objc_msgSend(v20, "deleteSubscriptionWithID:completionHandler:", v21, v24);

            objc_destroyWeak(&v26);
            objc_destroyWeak((id *)buf);
          }

        }
      }
      v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v27, v35, 16);
    }
    while (v9);
  }

  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24))
    objc_msgSend(val, "setuserPreference:value:sync:", CFSTR("MagicPairingMasterKeySubscriptionManateeDisabled"), &__kCFBooleanTrue, 1);

}

void sub_10008B500(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,id location)
{
  id *v29;

  objc_destroyWeak(v29);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10008B52C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  os_log_t v7;
  NSObject *WeakRetained;
  _BOOL4 v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  __int16 v14;
  id v15;

  v5 = a2;
  v6 = a3;
  v7 = sub_1000681B8("MagicPairing");
  WeakRetained = objc_claimAutoreleasedReturnValue(v7);
  v9 = os_log_type_enabled(WeakRetained, OS_LOG_TYPE_DEFAULT);
  if (v6)
  {
    if (v9)
    {
      v10 = *(_QWORD *)(a1 + 32);
      v12 = 138412546;
      v13 = v10;
      v14 = 2112;
      v15 = v6;
      _os_log_impl((void *)&_mh_execute_header, WeakRetained, OS_LOG_TYPE_DEFAULT, "Manatee: Error Deleting Subscription for record type: %@ with error: %@ ", (uint8_t *)&v12, 0x16u);
    }
  }
  else
  {
    if (v9)
    {
      v11 = *(_QWORD *)(a1 + 32);
      v12 = 138412546;
      v13 = v11;
      v14 = 2112;
      v15 = v5;
      _os_log_impl((void *)&_mh_execute_header, WeakRetained, OS_LOG_TYPE_DEFAULT, "Manatee: Successfully deleted Subscription for record type - %@ with ID - %@", (uint8_t *)&v12, 0x16u);
    }

    WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
    -[NSObject setuserPreference:value:sync:](WeakRetained, "setuserPreference:value:sync:", CFSTR("MagicPairingMasterKeySubscriptionManateeDisabled"), &__kCFBooleanTrue, 1);
  }

}

void sub_10008B8D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10008B904(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  os_log_t v7;
  NSObject *v8;
  uint64_t v9;
  void *v10;
  id v11;
  int v12;
  id v13;

  v5 = a2;
  v6 = a3;
  if (v6)
  {
    v7 = sub_1000681B8("MagicPairing");
    v8 = objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      v12 = 138412290;
      v13 = v6;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Error getting server preferred push environment %@", (uint8_t *)&v12, 0xCu);
    }

  }
  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v10 = *(void **)(v9 + 40);
  *(_QWORD *)(v9 + 40) = v5;
  v11 = v5;

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_10008BC68(uint64_t a1)
{
  void *v2;
  os_log_t v3;
  NSObject *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  dispatch_time_t v11;
  dispatch_semaphore_t v12;
  void *v13;
  void *v14;
  void *v15;
  NSObject *v16;
  dispatch_semaphore_t v17;
  void *v18;
  void *v19;
  void *v20;
  NSObject *v21;
  NSObject *v22;
  void *v23;
  void *v24;
  NSObject *v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  void *v29;
  void **v30;
  uint64_t v31;
  void (*v32)(uint64_t, void *);
  void *v33;
  uint64_t v34;
  NSObject *v35;
  _BYTE *v36;
  _QWORD v37[4];
  NSObject *v38;
  uint64_t v39;
  _BYTE *v40;
  _QWORD v41[4];
  NSObject *v42;
  _QWORD v43[4];
  dispatch_semaphore_t v44;
  _BYTE buf[24];
  char v46;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[CloudXPCService sharedInstance](CloudXPCService, "sharedInstance"));
  objc_msgSend(v2, "beginTransaction:", CFSTR("ManateeIdentityLost"));

  v3 = sub_1000681B8("MagicPairing");
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "recordZoneBlob"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "zoneID"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "zoneName"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "recordZoneAccessoryDatabase"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "zoneID"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "zoneName"));
    *(_DWORD *)buf = 138412546;
    *(_QWORD *)&buf[4] = v7;
    *(_WORD *)&buf[12] = 2112;
    *(_QWORD *)&buf[14] = v10;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, " >>> Manatee Identity Lost Reset Both Zones %@ - %@", buf, 0x16u);

  }
  v11 = dispatch_time(0, 5000000000);
  v12 = dispatch_semaphore_create(0);
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "cloudKitDatabase"));
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "recordZoneBlob"));
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "zoneID"));
  v43[0] = _NSConcreteStackBlock;
  v43[1] = 3221225472;
  v43[2] = sub_10008C070;
  v43[3] = &unk_1001E5158;
  v44 = v12;
  v16 = v12;
  objc_msgSend(v13, "deleteRecordZoneWithID:completionHandler:", v15, v43);

  dispatch_semaphore_wait(v16, v11);
  v17 = dispatch_semaphore_create(0);
  v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "cloudKitDatabase"));
  v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "recordZoneAccessoryDatabase"));
  v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "zoneID"));
  v41[0] = _NSConcreteStackBlock;
  v41[1] = 3221225472;
  v41[2] = sub_10008C150;
  v41[3] = &unk_1001E5158;
  v21 = v17;
  v42 = v21;
  objc_msgSend(v18, "deleteRecordZoneWithID:completionHandler:", v20, v41);

  dispatch_semaphore_wait(v21, v11);
  v22 = dispatch_group_create();
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = buf;
  *(_QWORD *)&buf[16] = 0x2020000000;
  v46 = 0;
  v23 = (void *)objc_claimAutoreleasedReturnValue(+[CloudXPCService sharedInstance](CloudXPCService, "sharedInstance"));
  v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "deviceManager"));

  dispatch_group_enter(v22);
  v37[0] = _NSConcreteStackBlock;
  v37[1] = 3221225472;
  v37[2] = sub_10008C230;
  v37[3] = &unk_1001E5180;
  v25 = v22;
  v26 = *(_QWORD *)(a1 + 32);
  v38 = v25;
  v39 = v26;
  v40 = buf;
  objc_msgSend(v24, "fetchAccountMagicKeysBlobWithCompletion:", v37);
  dispatch_group_enter(v25);
  v30 = _NSConcreteStackBlock;
  v31 = 3221225472;
  v32 = sub_10008C274;
  v33 = &unk_1001E51A8;
  v27 = *(_QWORD *)(a1 + 32);
  v36 = buf;
  v34 = v27;
  v28 = v25;
  v35 = v28;
  objc_msgSend(v24, "fetchLegacyMagicPairingRecordsWithCompletion:", &v30);
  dispatch_group_notify(v28, (dispatch_queue_t)&_dispatch_main_q, &stru_1001E51C8);
  v29 = (void *)objc_claimAutoreleasedReturnValue(+[CloudXPCService sharedInstance](CloudXPCService, "sharedInstance", v30, v31, v32, v33, v34));
  objc_msgSend(v29, "endTransaction:", CFSTR("ManateeIdentityLost"));

  _Block_object_dispose(buf, 8);
}

void sub_10008C050(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 160), 8);
  _Unwind_Resume(a1);
}

void sub_10008C070(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  os_log_t v7;
  NSObject *v8;
  int v9;
  id v10;
  __int16 v11;
  id v12;

  v5 = a2;
  v6 = a3;
  v7 = sub_1000681B8("MagicPairing");
  v8 = objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    v9 = 138412546;
    v10 = v5;
    v11 = 2112;
    v12 = v6;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Manatee Identity Lost resetMasterZone (%@) deleteRecordWithID: error %@ ", (uint8_t *)&v9, 0x16u);
  }

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_10008C150(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  os_log_t v7;
  NSObject *v8;
  int v9;
  id v10;
  __int16 v11;
  id v12;

  v5 = a2;
  v6 = a3;
  v7 = sub_1000681B8("MagicPairing");
  v8 = objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    v9 = 138412546;
    v10 = v5;
    v11 = 2112;
    v12 = v6;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Manatee Identity Lost Reset Accessory Zone (%@) deleteRecordWithID: error %@ ", (uint8_t *)&v9, 0x16u);
  }

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_10008C230(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = 1;
    objc_msgSend(*(id *)(a1 + 40), "writeKeyBlob:withRetryCount:", a2, 0);
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_10008C274(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  if (v3 && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24))
    objc_msgSend(*(id *)(a1 + 32), "writeAccessoryBlob:withRetryCount:", v3, 0);

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

void sub_10008C2E0(id a1)
{
  os_log_t v1;
  NSObject *v2;
  uint8_t v3[16];

  v1 = sub_1000681B8("MagicPairing");
  v2 = objc_claimAutoreleasedReturnValue(v1);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Manatee Identity Lost Reset Done", v3, 2u);
  }

}

id sub_10008C6E0(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "resetMasterZone:accessoryblob:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

void sub_10008C6F0(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  os_log_t v7;
  NSObject *v8;
  int v9;
  id v10;
  __int16 v11;
  id v12;

  v5 = a2;
  v6 = a3;
  v7 = sub_1000681B8("MagicPairing");
  v8 = objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    v9 = 138412546;
    v10 = v5;
    v11 = 2112;
    v12 = v6;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "resetMasterZone (%@) deleteRecordWithID: error %@ ", (uint8_t *)&v9, 0x16u);
  }

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_10008CA88(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  os_log_t v7;
  NSObject *v8;
  _BOOL4 v9;
  void *v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  void *v14;
  _QWORD v15[4];
  NSObject *v16;
  uint64_t v17;
  uint8_t buf[4];
  id v19;

  v5 = a2;
  v6 = a3;
  v7 = sub_1000681B8("MagicPairing");
  v8 = objc_claimAutoreleasedReturnValue(v7);
  v9 = os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
  if (v6)
  {
    if (v9)
    {
      *(_DWORD *)buf = 138412290;
      v19 = v6;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "updateMasterZoneBlob saveRecordZone: error %@ ", buf, 0xCu);
    }
  }
  else
  {
    if (v9)
    {
      *(_DWORD *)buf = 138412290;
      v19 = v5;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "updateMasterZoneBlob saveRecordZone record  %@", buf, 0xCu);
    }

    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "cloudKitDatabase"));
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472;
    v15[2] = sub_10008CC28;
    v15[3] = &unk_1001E51F0;
    v11 = *(_QWORD *)(a1 + 40);
    v12 = *(id *)(a1 + 48);
    v13 = *(_QWORD *)(a1 + 32);
    v16 = v12;
    v17 = v13;
    objc_msgSend(v10, "saveRecord:completionHandler:", v11, v15);

    v8 = v16;
  }

  v14 = (void *)objc_claimAutoreleasedReturnValue(+[CloudXPCService sharedInstance](CloudXPCService, "sharedInstance"));
  objc_msgSend(v14, "endTransaction:", CFSTR("updateMasterZoneBlob"));

}

void sub_10008CC28(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  os_log_t v7;
  NSObject *v8;
  os_log_t v9;
  NSObject *v10;
  void *v11;
  os_log_t v12;
  NSObject *v13;
  void *v14;
  void *v15;
  void *v16;
  uint8_t buf[4];
  id v18;

  v5 = a2;
  v6 = a3;
  if (v6)
  {
    v7 = sub_1000681B8("MagicPairing");
    v8 = objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      v18 = v6;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "updateMasterZoneBlob createRecordZone: error %@ ", buf, 0xCu);
    }
LABEL_13:

    goto LABEL_14;
  }
  if ((unint64_t)objc_msgSend(*(id *)(a1 + 32), "length") < 3)
  {
    v8 = xpc_create_with_format("[ %BOOL ]", 1);
    CFRetain(v8);
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "readUserPreference:", CFSTR("MagicCloudPairingManateeUpgradedAccount")));

    if (!v11)
    {
      objc_msgSend(*(id *)(a1 + 40), "setuserPreference:value:sync:", CFSTR("MagicCloudPairingManateeUpgradedAccount"), &__kCFBooleanTrue, 1);
      v12 = sub_1000681B8("MagicPairing");
      v13 = objc_claimAutoreleasedReturnValue(v12);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "updateMasterZoneBlob Master zone has been upgraded successfully", buf, 2u);
      }

    }
    v14 = (void *)objc_claimAutoreleasedReturnValue(+[CloudXPCService sharedInstance](CloudXPCService, "sharedInstance"));
    v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", 1));
    v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionaryWithObjectsAndKeys:](NSMutableDictionary, "dictionaryWithObjectsAndKeys:", v15, CFSTR("kUploadStatus"), 0));
    objc_msgSend(v14, "sendCloudKitMsg:args:", CFSTR("manateeUdpateStatus"), v16);

    goto LABEL_13;
  }
  v9 = sub_1000681B8("MagicPairing");
  v10 = objc_claimAutoreleasedReturnValue(v9);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    v18 = v5;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "updateMasterZoneBlob record  %@", buf, 0xCu);
  }

  objc_msgSend(*(id *)(a1 + 40), "resetAccessoryZone:", *(_QWORD *)(a1 + 32));
LABEL_14:

}

void sub_10008D03C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  os_log_t v7;
  NSObject *v8;
  int v9;
  id v10;
  __int16 v11;
  id v12;

  v5 = a2;
  v6 = a3;
  v7 = sub_1000681B8("MagicPairing");
  v8 = objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    v9 = 138412546;
    v10 = v5;
    v11 = 2112;
    v12 = v6;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "resetAccessoryZone (%@) deleteRecordWithID: error %@ ", (uint8_t *)&v9, 0x16u);
  }

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_10008D3CC(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  os_log_t v7;
  NSObject *v8;
  _BOOL4 v9;
  void *v10;
  unint64_t v11;
  os_log_t v12;
  NSObject *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  double v19;
  double v20;
  int64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  dispatch_time_t v27;
  void *v28;
  id v29;
  uint64_t v30;
  void *v31;
  void **v32;
  uint64_t v33;
  void (*v34)(uint64_t, void *, void *);
  void *v35;
  uint64_t v36;
  id v37;
  uint64_t v38;
  _QWORD block[5];
  id v40;
  uint64_t v41;
  uint8_t buf[4];
  id v43;
  __int16 v44;
  uint64_t v45;

  v5 = a2;
  v6 = a3;
  v7 = sub_1000681B8("MagicPairing");
  v8 = objc_claimAutoreleasedReturnValue(v7);
  v9 = os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
  if (!v6)
  {
    if (v9)
    {
      *(_DWORD *)buf = 138412290;
      v43 = v5;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Manatee: upgradeAccessoryBlob saveRecordZone record  %@", buf, 0xCu);
    }

    v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "cloudKitDatabase"));
    v32 = _NSConcreteStackBlock;
    v33 = 3221225472;
    v34 = sub_10008D774;
    v35 = &unk_1001E4628;
    v23 = *(_QWORD *)(a1 + 48);
    v24 = *(_QWORD *)(a1 + 32);
    v25 = *(void **)(a1 + 40);
    v38 = *(_QWORD *)(a1 + 56);
    v36 = v24;
    v37 = v25;
    objc_msgSend(v22, "saveRecord:completionHandler:", v23, &v32);

    v26 = v37;
    goto LABEL_21;
  }
  if (v9)
  {
    *(_DWORD *)buf = 138412290;
    v43 = v6;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "upgradeAccessoryBlob upgradeRecordZone: error %@ ", buf, 0xCu);
  }

  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "domain"));
  if (objc_msgSend(v10, "isEqualToString:", CKErrorDomain)
    && (objc_msgSend(v6, "code") == (id)3
     || objc_msgSend(v6, "code") == (id)7
     || objc_msgSend(v6, "code") == (id)4
     || objc_msgSend(v6, "code") == (id)9
     || objc_msgSend(v6, "code") == (id)6))
  {
    v11 = *(_QWORD *)(a1 + 56);

    if (v11 <= 3)
    {
      v12 = sub_1000681B8("MagicPairing");
      v13 = objc_claimAutoreleasedReturnValue(v12);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        v14 = *(_QWORD *)(a1 + 56);
        *(_DWORD *)buf = 138412546;
        v43 = v6;
        v44 = 2048;
        v45 = v14;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Manatee: upgradeAccessoryBlob failed with error %@, retry count = %lu", buf, 0x16u);
      }

      v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "userInfo"));
      v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "objectForKeyedSubscript:", CKErrorRetryAfterKey));

      if (v16)
      {
        v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "userInfo"));
        v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "objectForKeyedSubscript:", CKErrorRetryAfterKey));
        objc_msgSend(v18, "doubleValue");
        v20 = v19;

        v21 = (uint64_t)(v20 * 1000000000.0);
      }
      else
      {
        v21 = 60000000000;
      }
      v27 = dispatch_time(0, v21);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_10008D760;
      block[3] = &unk_1001E3460;
      v28 = *(void **)(a1 + 40);
      block[4] = *(_QWORD *)(a1 + 32);
      v29 = v28;
      v30 = *(_QWORD *)(a1 + 56);
      v40 = v29;
      v41 = v30;
      dispatch_after(v27, (dispatch_queue_t)&_dispatch_main_q, block);
      v26 = v40;
LABEL_21:

    }
  }
  else
  {

  }
  v31 = (void *)objc_claimAutoreleasedReturnValue(+[CloudXPCService sharedInstance](CloudXPCService, "sharedInstance", v32, v33, v34, v35, v36));
  objc_msgSend(v31, "endTransaction:", CFSTR("upgradeAccessoryBlob"));

}

id sub_10008D760(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "upgradeAccessoryBlob:withRetryCount:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48) + 1);
}

void sub_10008D774(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  os_log_t v7;
  NSObject *v8;
  _BOOL4 v9;
  void *v10;
  unint64_t v11;
  os_log_t v12;
  NSObject *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  double v19;
  double v20;
  int64_t v21;
  void *v22;
  os_log_t v23;
  NSObject *v24;
  void *v25;
  void *v26;
  void *v27;
  dispatch_time_t v28;
  void *v29;
  id v30;
  uint64_t v31;
  _QWORD block[5];
  id v33;
  uint64_t v34;
  uint8_t buf[4];
  id v36;
  __int16 v37;
  uint64_t v38;

  v5 = a2;
  v6 = a3;
  v7 = sub_1000681B8("MagicPairing");
  v8 = objc_claimAutoreleasedReturnValue(v7);
  v9 = os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
  if (!v6)
  {
    if (v9)
    {
      *(_DWORD *)buf = 138412290;
      v36 = v5;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Manatee: upgradeAccessoryBlob record  %@", buf, 0xCu);
    }

    v10 = (void *)xpc_create_with_format("[ %BOOL ]", 1);
    CFRetain(v10);
    v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "readUserPreference:", CFSTR("MagicCloudPairingManateeUpgradedAccount")));

    if (!v22)
    {
      objc_msgSend(*(id *)(a1 + 32), "setuserPreference:value:sync:", CFSTR("MagicCloudPairingManateeUpgradedAccount"), &__kCFBooleanTrue, 1);
      v23 = sub_1000681B8("MagicPairing");
      v24 = objc_claimAutoreleasedReturnValue(v23);
      if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "Manatee: upgradeAccessoryBlob Master zone has been upgraded successfully", buf, 2u);
      }

    }
    v25 = (void *)objc_claimAutoreleasedReturnValue(+[CloudXPCService sharedInstance](CloudXPCService, "sharedInstance"));
    v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", 1));
    v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionaryWithObjectsAndKeys:](NSMutableDictionary, "dictionaryWithObjectsAndKeys:", v26, CFSTR("kUploadStatus"), 0));
    objc_msgSend(v25, "sendCloudKitMsg:args:", CFSTR("manateeUdpateStatus"), v27);

    goto LABEL_22;
  }
  if (v9)
  {
    *(_DWORD *)buf = 138412290;
    v36 = v6;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Manatee: upgradeAccessoryBlob: error %@ ", buf, 0xCu);
  }

  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "domain"));
  if (!objc_msgSend(v10, "isEqualToString:", CKErrorDomain)
    || objc_msgSend(v6, "code") != (id)3
    && objc_msgSend(v6, "code") != (id)7
    && objc_msgSend(v6, "code") != (id)4
    && objc_msgSend(v6, "code") != (id)9
    && objc_msgSend(v6, "code") != (id)6)
  {
LABEL_22:

    goto LABEL_23;
  }
  v11 = *(_QWORD *)(a1 + 48);

  if (v11 <= 3)
  {
    v12 = sub_1000681B8("MagicPairing");
    v13 = objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      v14 = *(_QWORD *)(a1 + 48);
      *(_DWORD *)buf = 138412546;
      v36 = v6;
      v37 = 2048;
      v38 = v14;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Manatee: upgradeAccessoryBlob failed with error %@, retry count = %lu", buf, 0x16u);
    }

    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "userInfo"));
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "objectForKeyedSubscript:", CKErrorRetryAfterKey));

    if (v16)
    {
      v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "userInfo"));
      v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "objectForKeyedSubscript:", CKErrorRetryAfterKey));
      objc_msgSend(v18, "doubleValue");
      v20 = v19;

      v21 = (uint64_t)(v20 * 1000000000.0);
    }
    else
    {
      v21 = 60000000000;
    }
    v28 = dispatch_time(0, v21);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10008DB8C;
    block[3] = &unk_1001E3460;
    v29 = *(void **)(a1 + 40);
    block[4] = *(_QWORD *)(a1 + 32);
    v30 = v29;
    v31 = *(_QWORD *)(a1 + 48);
    v33 = v30;
    v34 = v31;
    dispatch_after(v28, (dispatch_queue_t)&_dispatch_main_q, block);

  }
LABEL_23:

}

id sub_10008DB8C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "upgradeAccessoryBlob:withRetryCount:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48) + 1);
}

void sub_10008DDA8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  id v4;
  void *v5;
  void *v6;
  unsigned int v7;
  os_log_t v8;
  NSObject *v9;
  os_log_t v10;
  NSObject *v11;
  _QWORD block[5];
  uint8_t buf[16];

  v2 = *(_QWORD *)(a1 + 32);
  v3 = objc_opt_class(CKRecordZoneNotification);
  if ((objc_opt_isKindOfClass(v2, v3) & 1) != 0)
  {
    v4 = *(id *)(a1 + 32);
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "recordZoneID"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "zoneName"));
    v7 = objc_msgSend(v6, "isEqualToString:", CFSTR("MagicCloudPairingCustomKeyBlobZone"));

    if (v7)
    {
      v8 = sub_1000681B8("MagicPairing");
      v9 = objc_claimAutoreleasedReturnValue(v8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "*****>>>> Manatee: Master Key Updated", buf, 2u);
      }

      if ((objc_msgSend(*(id *)(a1 + 40), "isWriteMasterKeysInProgress") & 1) != 0)
      {
        v10 = sub_1000681B8("MagicPairing");
        v11 = objc_claimAutoreleasedReturnValue(v10);
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "*****>>>> Manatee: Master Key Updated but we are in process to push new key. Dont fetch", buf, 2u);
        }

      }
      else
      {
        objc_msgSend(*(id *)(a1 + 40), "setMasterBlob:", 0);
        objc_msgSend(*(id *)(a1 + 40), "fetchKeyBlob:", 0);
      }
    }

  }
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10008DF48;
  block[3] = &unk_1001E20E8;
  block[4] = *(_QWORD *)(a1 + 40);
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);
}

id sub_10008DF48(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "setShouldPauseFetch:", 0);
  objc_msgSend(*(id *)(a1 + 32), "setPauseErrorReason:", 0);
  return objc_msgSend(*(id *)(a1 + 32), "fetchAccessoryKeyBlob:", 0);
}

void sub_10008E3CC(id a1)
{
  BTIdentityDaemon *v1;
  void *v2;

  v1 = objc_alloc_init(BTIdentityDaemon);
  v2 = (void *)qword_100212630;
  qword_100212630 = (uint64_t)v1;

}

void sub_10008E530(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  void *v4;
  void *v5;
  _QWORD v6[5];
  _QWORD handler[5];

  if (dword_10020FDC8 <= 30 && (dword_10020FDC8 != -1 || _LogCategory_Initialize(&dword_10020FDC8, 30)))
    LogPrintF(&dword_10020FDC8, "-[BTIdentityDaemon activate]_block_invoke", 30, "Activate");
  v2 = *(_QWORD *)(a1 + 32);
  if (*(_DWORD *)(v2 + 8) == -1)
  {
    v3 = *(NSObject **)(v2 + 16);
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 3221225472;
    handler[2] = sub_10008E698;
    handler[3] = &unk_1001E2398;
    handler[4] = v2;
    notify_register_dispatch("com.apple.bluetooth.daemonStarted", (int *)(v2 + 8), v3, handler);
    v2 = *(_QWORD *)(a1 + 32);
  }
  if (!*(_BYTE *)(v2 + 40))
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
    objc_msgSend(v4, "addObserver:selector:name:object:", *(_QWORD *)(a1 + 32), "_idsDevicesChanged:", CFSTR("BTTotalIDSDeviceCountChanged"), 0);
    *(_BYTE *)(*(_QWORD *)(a1 + 32) + 40) = 1;

  }
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[CBIDSManager sharedInstance](CBIDSManager, "sharedInstance"));
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10008E710;
  v6[3] = &unk_1001E4E98;
  v6[4] = *(_QWORD *)(a1 + 32);
  objc_msgSend(v5, "fetchIDSDevicesWithCompletion:", v6);

}

id sub_10008E698(uint64_t a1)
{
  if (dword_10020FDC8 <= 30 && (dword_10020FDC8 != -1 || _LogCategory_Initialize(&dword_10020FDC8, 30)))
    LogPrintF(&dword_10020FDC8, "-[BTIdentityDaemon activate]_block_invoke_2", 30, "Bluetooth daemon started");
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 12) = 0;
  return objc_msgSend(*(id *)(a1 + 32), "_idsScheduleUpdateIdentities");
}

void sub_10008E710(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  NSObject *v5;
  id v6;
  _QWORD v7[4];
  id v8;
  uint64_t v9;

  v3 = a2;
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(NSObject **)(v4 + 16);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_10008E790;
  v7[3] = &unk_1001E23E8;
  v8 = v3;
  v9 = v4;
  v6 = v3;
  dispatch_async(v5, v7);

}

id sub_10008E790(uint64_t a1)
{
  if (dword_10020FDC8 <= 30 && (dword_10020FDC8 != -1 || _LogCategory_Initialize(&dword_10020FDC8, 30)))
    LogPrintF(&dword_10020FDC8, "-[BTIdentityDaemon activate]_block_invoke_4", 30, "IDS devices fetched: %d total", objc_msgSend(*(id *)(a1 + 32), "count"));
  objc_storeStrong((id *)(*(_QWORD *)(a1 + 40) + 32), *(id *)(a1 + 32));
  return objc_msgSend(*(id *)(a1 + 40), "_idsScheduleUpdateIdentities");
}

void sub_10008E878(uint64_t a1)
{
  uint64_t v2;
  int v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;

  if (dword_10020FDC8 <= 30 && (dword_10020FDC8 != -1 || _LogCategory_Initialize(&dword_10020FDC8, 30)))
    LogPrintF(&dword_10020FDC8, "-[BTIdentityDaemon invalidate]_block_invoke", 30, "Invalidate");
  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_DWORD *)(v2 + 8);
  if (v3 != -1)
  {
    notify_cancel(v3);
    *(_DWORD *)(*(_QWORD *)(a1 + 32) + 8) = -1;
    v2 = *(_QWORD *)(a1 + 32);
  }
  if (*(_BYTE *)(v2 + 40))
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
    objc_msgSend(v4, "removeObserver:name:object:", *(_QWORD *)(a1 + 32), CFSTR("BTTotalIDSDeviceCountChanged"), 0);

    *(_BYTE *)(*(_QWORD *)(a1 + 32) + 40) = 0;
    v2 = *(_QWORD *)(a1 + 32);
  }
  v5 = *(void **)(v2 + 32);
  *(_QWORD *)(v2 + 32) = 0;

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "invalidate");
  v6 = *(_QWORD *)(a1 + 32);
  v7 = *(void **)(v6 + 24);
  *(_QWORD *)(v6 + 24) = 0;

}

uint64_t sub_10008EA68(uint64_t a1)
{
  if (dword_10020FDC8 <= 30 && (dword_10020FDC8 != -1 || _LogCategory_Initialize(&dword_10020FDC8, 30)))
    LogPrintF(&dword_10020FDC8, "-[BTIdentityDaemon diagnosticControl:completion:]_block_invoke", 30, "Diag: IDS Update");
  if (!objc_msgSend(*(id *)(a1 + 32), "caseInsensitiveCompare:", CFSTR("idsUpForce")))
    *(_BYTE *)(*(_QWORD *)(a1 + 40) + 12) = 0;
  objc_msgSend(*(id *)(a1 + 40), "_idsScheduleUpdateIdentities");
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
}

void sub_10008EB88(uint64_t a1)
{
  void *v2;
  CFTypeID TypeID;
  uint64_t TypedValue;
  void *v5;
  uint64_t v6;
  void *v7;
  id v8;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "userInfo"));
  TypeID = CFArrayGetTypeID();
  TypedValue = CFDictionaryGetTypedValue(v2, CFSTR("IDSDevices"), TypeID, 0);
  v5 = (void *)objc_claimAutoreleasedReturnValue(TypedValue);

  if (dword_10020FDC8 <= 30 && (dword_10020FDC8 != -1 || _LogCategory_Initialize(&dword_10020FDC8, 30)))
    LogPrintF(&dword_10020FDC8, "-[BTIdentityDaemon _idsDevicesChanged:]_block_invoke", 30, "IDS devices changed: %d total", objc_msgSend(v5, "count"));
  v6 = *(_QWORD *)(a1 + 40);
  v7 = *(void **)(v6 + 32);
  *(_QWORD *)(v6 + 32) = v5;
  v8 = v5;

  objc_msgSend(*(id *)(a1 + 40), "_idsScheduleUpdateIdentities");
}

_QWORD *sub_10008ED40(_QWORD *result)
{
  _QWORD *v1;

  if (result[4] == *(_QWORD *)(result[5] + 24))
  {
    v1 = result;
    if (dword_10020FDC8 <= 30
      && (dword_10020FDC8 != -1 || _LogCategory_Initialize(&dword_10020FDC8, 30)))
    {
      LogPrintF(&dword_10020FDC8, "-[BTIdentityDaemon _idsScheduleUpdateIdentities]_block_invoke", 30, "IDS UpdateIdentities coalesced");
    }
    return _objc_msgSend((id)v1[5], "_idsUpdateIdentities");
  }
  return result;
}

void sub_10008F4AC(id a1, NSString *a2, CBDeviceIdentity *a3, BOOL *a4)
{
  -[CBDeviceIdentity setType:](a3, "setType:", 0, a4);
}

void sub_10008F4B8(uint64_t a1, void *a2)
{
  void *v3;
  int v4;
  id v5;

  v5 = a2;
  objc_msgSend(*(id *)(a1 + 32), "invalidate");
  v3 = v5;
  if (v5)
  {
    if (dword_10020FDC8 <= 90)
    {
      if (dword_10020FDC8 != -1 || (v4 = _LogCategory_Initialize(&dword_10020FDC8, 90), v3 = v5, v4))
      {
        LogPrintF(&dword_10020FDC8, "-[BTIdentityDaemon _idsUpdateIdentities]_block_invoke_2", 90, "### UpdateIdentities failed: %{error}", v3);
        v3 = v5;
      }
    }
  }

}

uint64_t sub_10008F8F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = ccaes_ecb_decrypt_mode();
  return ccecb_one_shot(v6, 16, a1, 1, a2, a3);
}

uint64_t sub_10008F93C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = ccaes_ecb_encrypt_mode();
  return ccecb_one_shot(v6, 16, a1, 1, a2, a3);
}

void sub_100090D44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100090D6C(uint64_t a1, void *a2)
{
  id *v2;
  id v3;
  id WeakRetained;

  v2 = (id *)(a1 + 32);
  v3 = a2;
  WeakRetained = objc_loadWeakRetained(v2);
  objc_msgSend(WeakRetained, "handleEvent:", v3);

}

void sub_100091470(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 0xCu);
}

void sub_100091828(id a1)
{
  BTServicesDaemon *v1;
  void *v2;

  v1 = objc_alloc_init(BTServicesDaemon);
  v2 = (void *)qword_100212640;
  qword_100212640 = (uint64_t)v1;

}

void sub_100091F1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  _Block_object_dispose(&a49, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100091F7C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_100091F8C(uint64_t a1)
{

}

void sub_100091F94(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  void *v4;
  id obj;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  obj = *(id *)(v3 + 40);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a3, "bleDevice"));
  NSAppendPrintF(&obj, "    TRIG: %@\n", v4);
  objc_storeStrong((id *)(v3 + 40), obj);

}

void sub_1000923DC(uint64_t a1, unsigned int a2, void *a3)
{
  id v5;
  const char *v6;
  const char *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  id v11;

  v5 = a3;
  if (*(_QWORD *)(a1 + 32) == *(_QWORD *)(*(_QWORD *)(a1 + 40) + 16))
  {
    v11 = v5;
    if (dword_10020FF08 <= 30
      && (dword_10020FF08 != -1 || _LogCategory_Initialize(&dword_10020FF08, 30)))
    {
      if (a2 > 6)
        v6 = "?";
      else
        v6 = off_1001E54F8[a2];
      LogPrintF(&dword_10020FF08, "-[BTServicesDaemon _audioQualityShowBanner:title:deviceAddressString:messageKey:messageArgs:timeoutSeconds:]_block_invoke", 30, "audioQuality: banner action: %s, %{error}", v6, v11);
    }
    switch(a2)
    {
      case 1u:
        if (dword_10020FF08 <= 30
          && (dword_10020FF08 != -1 || _LogCategory_Initialize(&dword_10020FF08, 30)))
        {
          LogPrintF(&dword_10020FF08, "-[BTServicesDaemon _audioQualityShowBanner:title:deviceAddressString:messageKey:messageArgs:timeoutSeconds:]_block_invoke", 30, "audioQuality user click, openradar");
        }
        objc_msgSend(*(id *)(a1 + 40), "openRadarforAudioQuality");
        break;
      case 2u:
        if (dword_10020FF08 <= 30
          && (dword_10020FF08 != -1 || _LogCategory_Initialize(&dword_10020FF08, 30)))
        {
          v7 = "audioQuality user dismiss";
          goto LABEL_23;
        }
        break;
      case 4u:
        if (dword_10020FF08 <= 90
          && (dword_10020FF08 != -1 || _LogCategory_Initialize(&dword_10020FF08, 90)))
        {
          LogPrintF(&dword_10020FF08, "-[BTServicesDaemon _audioQualityShowBanner:title:deviceAddressString:messageKey:messageArgs:timeoutSeconds:]_block_invoke", 90, "audioQuality: banner error for device %@", *(_QWORD *)(a1 + 48));
        }
        break;
      case 6u:
        if (dword_10020FF08 <= 30
          && (dword_10020FF08 != -1 || _LogCategory_Initialize(&dword_10020FF08, 30)))
        {
          v7 = "audioQuality banner timeout";
LABEL_23:
          LogPrintF(&dword_10020FF08, "-[BTServicesDaemon _audioQualityShowBanner:title:deviceAddressString:messageKey:messageArgs:timeoutSeconds:]_block_invoke", 30, v7, v10);
        }
        break;
      default:
        break;
    }
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 16), "invalidate");
    v8 = *(_QWORD *)(a1 + 40);
    v9 = *(void **)(v8 + 16);
    *(_QWORD *)(v8 + 16) = 0;

    v5 = v11;
  }

}

id sub_100092678(uint64_t a1)
{
  if (dword_10020FF08 <= 30 && (dword_10020FF08 != -1 || _LogCategory_Initialize(&dword_10020FF08, 30)))
    LogPrintF(&dword_10020FF08, "-[BTServicesDaemon activate]_block_invoke", 30, "Activate");
  return _objc_msgSend(*(id *)(a1 + 32), "_activate");
}

id sub_100092A30(uint64_t a1)
{
  if (dword_10020FF08 <= 30 && (dword_10020FF08 != -1 || _LogCategory_Initialize(&dword_10020FF08, 30)))
    LogPrintF(&dword_10020FF08, "-[BTServicesDaemon _activate]_block_invoke", 30, "Prefs changed");
  return objc_msgSend(*(id *)(a1 + 32), "_prefsChanged");
}

uint64_t sub_100092AA0(uint64_t result)
{
  uint64_t v1;

  v1 = result;
  if (dword_10020FF08 <= 30)
  {
    if (dword_10020FF08 != -1 || (result = _LogCategory_Initialize(&dword_10020FF08, 30), (_DWORD)result))
      result = LogPrintF(&dword_10020FF08, "-[BTServicesDaemon _activate]_block_invoke_2", 30, "Ignore BT Reset");
  }
  *(_BYTE *)(*(_QWORD *)(v1 + 32) + 184) = 1;
  return result;
}

id sub_100092B18(uint64_t a1)
{
  if (dword_10020FF08 <= 30 && (dword_10020FF08 != -1 || _LogCategory_Initialize(&dword_10020FF08, 30)))
    LogPrintF(&dword_10020FF08, "-[BTServicesDaemon _activate]_block_invoke_3", 30, "audioQuality BTAudioQualityMonitorKey triggered");
  return _objc_msgSend(*(id *)(a1 + 32), "_audioQualityShowBanner:title:deviceAddressString:messageKey:messageArgs:timeoutSeconds:", 1, CFSTR("AirPods Audio Experience"), CFSTR("deviceAddressString"), CFSTR("Click here to report audio quality related feedback"), 0, 10.0);
}

uint64_t sub_100092BAC(uint64_t a1)
{
  return CUStateDumpWithObject("BTServices", *(_QWORD *)(a1 + 32), &dword_10020FF08);
}

_BYTE *sub_100092BC8(uint64_t a1)
{
  _BYTE *result;

  if (dword_10020FF08 <= 30 && (dword_10020FF08 != -1 || _LogCategory_Initialize(&dword_10020FF08, 30)))
    LogPrintF(&dword_10020FF08, "-[BTServicesDaemon _activate]_block_invoke_5", 30, "Bluetoothd has crashed / Restarted");
  result = *(_BYTE **)(a1 + 32);
  if (!result[184])
  {
    objc_msgSend(result, "showCrashBannerIfNeeded:", &off_1001F44A8);
    result = *(_BYTE **)(a1 + 32);
  }
  result[184] = 0;
  return result;
}

void sub_100092C54(uint64_t a1, void *a2)
{
  id v3;
  id v4;

  v3 = a2;
  if (v3)
  {
    v4 = v3;
    if (dword_10020FF08 <= 90
      && (dword_10020FF08 != -1 || _LogCategory_Initialize(&dword_10020FF08, 90)))
    {
      LogPrintF(&dword_10020FF08, "-[BTServicesDaemon _activate]_block_invoke_6", 90, "### Activate failed: %{error}\n", v4);
    }
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "invalidate");
    v3 = v4;
  }

}

id sub_100092D44(uint64_t a1)
{
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;

  if (dword_10020FF08 <= 30 && (dword_10020FF08 != -1 || _LogCategory_Initialize(&dword_10020FF08, 30)))
    LogPrintF(&dword_10020FF08, "-[BTServicesDaemon invalidate]_block_invoke", 30, "Invalidate");
  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_DWORD *)(v2 + 56);
  if (v3 != -1)
  {
    notify_cancel(v3);
    *(_DWORD *)(*(_QWORD *)(a1 + 32) + 56) = -1;
    v2 = *(_QWORD *)(a1 + 32);
  }
  v4 = *(_DWORD *)(v2 + 52);
  if (v4 != -1)
  {
    notify_cancel(v4);
    *(_DWORD *)(*(_QWORD *)(a1 + 32) + 52) = -1;
    v2 = *(_QWORD *)(a1 + 32);
  }
  v5 = *(_DWORD *)(v2 + 8);
  if (v5 != -1)
  {
    notify_cancel(v5);
    *(_DWORD *)(*(_QWORD *)(a1 + 32) + 8) = -1;
    v2 = *(_QWORD *)(a1 + 32);
  }
  v6 = *(_QWORD *)(v2 + 136);
  if (v6)
  {
    os_state_remove_handler(v6);
    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 136) = 0;
    v2 = *(_QWORD *)(a1 + 32);
  }
  objc_msgSend(*(id *)(v2 + 176), "invalidate");
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(void **)(v7 + 176);
  *(_QWORD *)(v7 + 176) = 0;

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "invalidate");
  objc_msgSend(*(id *)(a1 + 32), "_cbConnectedDiscoveryEnsureStopped");
  objc_msgSend(*(id *)(a1 + 32), "_shareAudioActionScannerEnsureStopped");
  return _objc_msgSend(*(id *)(a1 + 32), "_shareAudioConnectedMonitorEnsureStopped");
}

id sub_100093264(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_update");
}

void sub_100093658(uint64_t a1, unsigned int a2, void *a3)
{
  const char *v5;
  id v6;

  v6 = a3;
  if (dword_10020FF08 <= 30 && (dword_10020FF08 != -1 || _LogCategory_Initialize(&dword_10020FF08, 30)))
  {
    if (a2 > 5)
      v5 = "?";
    else
      v5 = off_1001E5530[a2];
    LogPrintF(&dword_10020FF08, "-[BTServicesDaemon showCrashBannerIfNeeded:]_block_invoke", 30, "Diag: Bluetooth firmware crash banner action: %s, %{error}", v5, v6);
  }
  objc_msgSend(*(id *)(a1 + 32), "invalidate");

}

id sub_10009370C(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "invalidate");
  return _objc_msgSend(*(id *)(a1 + 40), "_fileRadarForFWCrash:", *(_QWORD *)(a1 + 48));
}

void sub_100093F4C(uint64_t a1, unsigned int a2, void *a3)
{
  const char *v5;
  id v6;

  v6 = a3;
  if (dword_10020FF08 <= 30 && (dword_10020FF08 != -1 || _LogCategory_Initialize(&dword_10020FF08, 30)))
  {
    if (a2 > 5)
      v5 = "?";
    else
      v5 = off_1001E5530[a2];
    LogPrintF(&dword_10020FF08, "-[BTServicesDaemon _showConnectBannerIfEnabled:]_block_invoke", 30, "Diag: Connect banner action: %s, %{error}", v5, v6);
  }
  objc_msgSend(*(id *)(a1 + 32), "invalidate");

}

void sub_1000942E0(uint64_t a1, unsigned int a2, void *a3)
{
  const char *v5;
  id v6;

  v6 = a3;
  if (dword_10020FF08 <= 30 && (dword_10020FF08 != -1 || _LogCategory_Initialize(&dword_10020FF08, 30)))
  {
    if (a2 > 5)
      v5 = "?";
    else
      v5 = off_1001E5530[a2];
    LogPrintF(&dword_10020FF08, "-[BTServicesDaemon _showHIDLagBannerIfEnabled:]_block_invoke", 30, "Diag: Bluetooth HID lag banner action: %s, %{error}", v5, v6);
  }
  objc_msgSend(*(id *)(a1 + 32), "invalidate");

}

id sub_100094394(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "invalidate");
  return _objc_msgSend(*(id *)(a1 + 40), "_fileRadarForHIDLag:", *(_QWORD *)(a1 + 48));
}

id sub_100094674(uint64_t a1, uint64_t a2)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_showConnectBannerIfEnabled:", a2);
}

void sub_100094680(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  if (v3)
  {
    if (dword_10020FF08 <= 90
      && (dword_10020FF08 != -1 || _LogCategory_Initialize(&dword_10020FF08, 90)))
    {
      LogPrintF(&dword_10020FF08, "-[BTServicesDaemon _cbConnectedDiscoveryEnsureStarted]_block_invoke_2", 90, "### Activate failed: %{error}\n", v3);
    }
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "invalidate");
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 32), "_update");
  }

}

id sub_100094A58(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_xpcConnectionInvalidated:", *(_QWORD *)(a1 + 40));
}

_QWORD *sub_100094CDC(uint64_t a1, uint64_t a2)
{
  _QWORD *result;

  result = *(_QWORD **)(a1 + 32);
  if (result[8] == *(_QWORD *)(a1 + 40))
    return _objc_msgSend(result, "_shareAudioActionScannerDeviceFound:", a2);
  return result;
}

_QWORD *sub_100094D00(uint64_t a1, uint64_t a2)
{
  _QWORD *result;

  result = *(_QWORD **)(a1 + 32);
  if (result[8] == *(_QWORD *)(a1 + 40))
    return objc_msgSend(result, "_shareAudioActionScannerDeviceLost:", a2);
  return result;
}

_QWORD *sub_100094D24(uint64_t a1, uint64_t a2)
{
  _QWORD *result;

  result = *(_QWORD **)(a1 + 32);
  if (result[8] == *(_QWORD *)(a1 + 40))
    return _objc_msgSend(result, "_shareAudioActionScannerDeviceFound:", a2);
  return result;
}

void sub_100094D48(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  id v6;

  v3 = a2;
  if (v3 && *(_QWORD *)(*(_QWORD *)(a1 + 32) + 64) == *(_QWORD *)(a1 + 40))
  {
    v6 = v3;
    if (dword_100210038 <= 90
      && (dword_100210038 != -1 || _LogCategory_Initialize(&dword_100210038, 90)))
    {
      LogPrintF(&dword_100210038, "-[BTServicesDaemon _shareAudioActionScannerEnsureStarted]_block_invoke_4", 90, "### Action scanner start failed: %{error}", v6);
    }
    objc_msgSend(*(id *)(a1 + 40), "invalidate");
    v4 = *(_QWORD *)(a1 + 32);
    v5 = *(void **)(v4 + 64);
    *(_QWORD *)(v4 + 64) = 0;

    v3 = v6;
  }

}

_QWORD *sub_1000954B4(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 32);
  result = *(_QWORD **)(a1 + 40);
  if (v3 == result[11])
    return _objc_msgSend(result, "_shareAudioConnectedDeviceFound:", a2);
  return result;
}

_QWORD *sub_1000954D0(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 32);
  result = *(_QWORD **)(a1 + 40);
  if (v3 == result[11])
    return _objc_msgSend(result, "_shareAudioConnectedDeviceLost:", a2);
  return result;
}

void sub_100095A58(uint64_t a1, unsigned int a2, void *a3)
{
  id v5;
  const char *v6;
  uint64_t v7;
  void *v8;
  id v9;

  v5 = a3;
  if (*(_QWORD *)(a1 + 32) == *(_QWORD *)(*(_QWORD *)(a1 + 40) + 96))
  {
    v9 = v5;
    if (dword_100210038 <= 30
      && (dword_100210038 != -1 || _LogCategory_Initialize(&dword_100210038, 30)))
    {
      if (a2 > 5)
        v6 = "?";
      else
        v6 = off_1001E5530[a2];
      LogPrintF(&dword_100210038, "-[BTServicesDaemon _shareAudioShowConnectBanner:]_block_invoke", 30, "Banner action: %s, %{error}", v6, v9);
    }
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 96), "invalidate");
    v7 = *(_QWORD *)(a1 + 40);
    v8 = *(void **)(v7 + 96);
    *(_QWORD *)(v7 + 96) = 0;

    v5 = v9;
  }

}

_QWORD *sub_100095B30(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  void *v3;

  if (result[4] == *(_QWORD *)(result[5] + 96))
  {
    v1 = result;
    if (dword_100210038 <= 30
      && (dword_100210038 != -1 || _LogCategory_Initialize(&dword_100210038, 30)))
    {
      LogPrintF(&dword_100210038, "-[BTServicesDaemon _shareAudioShowConnectBanner:]_block_invoke_2", 30, "Banner action: connect");
    }
    objc_msgSend((id)v1[4], "invalidate");
    v2 = v1[5];
    v3 = *(void **)(v2 + 96);
    *(_QWORD *)(v2 + 96) = 0;

    return objc_msgSend((id)v1[5], "_shareAudioSessionStartWithDarwinDevice:wxDevice:", v1[6], v1[7]);
  }
  return result;
}

_QWORD *sub_100095D74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;
  uint64_t v4;

  v4 = *(_QWORD *)(a1 + 32);
  result = *(_QWORD **)(a1 + 40);
  if (v4 == result[13])
    return _objc_msgSend(result, "_shareAudioSessionProgressEvent:info:", a2, a3);
  return result;
}

uint64_t sub_1000964C8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1000968E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  (*(void (**)(uint64_t))(v9 + 16))(v9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100096920(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 40);
  if (v1)
  {
    v2 = result;
    if (dword_10020FF08 <= 90)
    {
      if (dword_10020FF08 == -1)
      {
        if (!_LogCategory_Initialize(&dword_10020FF08, 90))
          return (*(uint64_t (**)(void))(*(_QWORD *)(v2 + 32) + 16))();
        v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 40) + 8) + 40);
      }
      LogPrintF(&dword_10020FF08, "-[BTServicesXPCConnection diagnosticControl:completion:]_block_invoke", 90, "### DiagnosticControl failed: %{error}", v1);
    }
    return (*(uint64_t (**)(void))(*(_QWORD *)(v2 + 32) + 16))();
  }
  return result;
}

void sub_100096B58(uint64_t a1, unsigned int a2, void *a3)
{
  const char *v5;
  id v6;

  v6 = a3;
  if (dword_10020FF08 <= 30 && (dword_10020FF08 != -1 || _LogCategory_Initialize(&dword_10020FF08, 30)))
  {
    if (a2 > 5)
      v5 = "?";
    else
      v5 = off_1001E5530[a2];
    LogPrintF(&dword_10020FF08, "-[BTServicesXPCConnection _diagnosticControlShareAudioBanner]_block_invoke", 30, "Diag: ShareAudio banner action: %s, %{error}", v5, v6);
  }
  objc_msgSend(*(id *)(a1 + 32), "invalidate");

}

id sub_100096C0C(uint64_t a1)
{
  if (dword_10020FF08 <= 30 && (dword_10020FF08 != -1 || _LogCategory_Initialize(&dword_10020FF08, 30)))
    LogPrintF(&dword_10020FF08, "-[BTServicesXPCConnection _diagnosticControlShareAudioBanner]_block_invoke_2", 30, "Diag: ShareAudio banner action: connect");
  return objc_msgSend(*(id *)(a1 + 32), "invalidate");
}

void sub_100096EA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v10;
  va_list va;

  va_start(va, a10);
  (*(void (**)(uint64_t))(v10 + 16))(v10);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100096EF0(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 40);
  if (v1)
  {
    v2 = result;
    if (dword_10020FF08 <= 90)
    {
      if (dword_10020FF08 == -1)
      {
        if (!_LogCategory_Initialize(&dword_10020FF08, 90))
          return (*(uint64_t (**)(void))(*(_QWORD *)(v2 + 32) + 16))();
        v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 40) + 8) + 40);
      }
      LogPrintF(&dword_10020FF08, "-[BTServicesXPCConnection diagnosticShow:completion:]_block_invoke", 90, "### DiagnosticShow failed: %{error}", v1);
    }
    return (*(uint64_t (**)(void))(*(_QWORD *)(v2 + 32) + 16))();
  }
  return result;
}

void sub_10009723C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  uint64_t v17;
  va_list va;

  va_start(va, a17);
  (*(void (**)(uint64_t))(v17 + 16))(v17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100097274(uint64_t result)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 48) + 8) + 40);
  if (v1)
  {
    v2 = (_QWORD *)result;
    if (dword_10020FF08 <= 90)
    {
      if (dword_10020FF08 == -1)
      {
        if (!_LogCategory_Initialize(&dword_10020FF08, 90))
          return (*(uint64_t (**)(void))(v2[5] + 16))();
        v1 = *(_QWORD *)(*(_QWORD *)(v2[6] + 8) + 40);
      }
      LogPrintF(&dword_10020FF08, "-[BTServicesXPCConnection shareAudioSessionActivate:completion:]_block_invoke", 90, "### Activate failed: %@, %{error}", v2[4], v1);
    }
    return (*(uint64_t (**)(void))(v2[5] + 16))();
  }
  return result;
}

void sub_100097334(int8x16_t *a1, int a2, void *a3)
{
  id v5;
  int8x16_t v6;
  uint64_t v7;
  NSObject *v8;
  id v9;
  _QWORD v10[4];
  int8x16_t v11;
  id v12;
  int v13;

  v5 = a3;
  v10[1] = 3221225472;
  v6 = vextq_s8(a1[2], a1[2], 8uLL);
  v7 = a1[2].i64[0];
  v10[0] = _NSConcreteStackBlock;
  v10[2] = sub_1000973C8;
  v10[3] = &unk_1001E54D8;
  v8 = *(NSObject **)(v7 + 32);
  v11 = v6;
  v13 = a2;
  v12 = v5;
  v9 = v5;
  dispatch_async(v8, v10);

}

void sub_1000973C8(uint64_t a1)
{
  uint64_t v1;
  id v3;

  v1 = *(_QWORD *)(a1 + 40);
  if (*(_QWORD *)(a1 + 32) == *(_QWORD *)(v1 + 40))
  {
    v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v1 + 56), "remoteObjectProxy"));
    objc_msgSend(v3, "shareAudioProgressEvent:info:", *(unsigned int *)(a1 + 56), *(_QWORD *)(a1 + 48));

  }
}

void sub_1000975DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  (*(void (**)(uint64_t))(v11 + 16))(v11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100097610(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 40);
  if (v1 && dword_10020FF08 <= 90)
  {
    v2 = result;
    if (dword_10020FF08 != -1)
      return LogPrintF(&dword_10020FF08, "-[BTServicesXPCConnection shareAudioUserConfirmed:]_block_invoke", 90, "### UserConfirmed failed: %@, %{error}", *(_QWORD *)(v2 + 32), v1);
    result = _LogCategory_Initialize(&dword_10020FF08, 90);
    if ((_DWORD)result)
    {
      v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 40) + 8) + 40);
      return LogPrintF(&dword_10020FF08, "-[BTServicesXPCConnection shareAudioUserConfirmed:]_block_invoke", 90, "### UserConfirmed failed: %@, %{error}", *(_QWORD *)(v2 + 32), v1);
    }
  }
  return result;
}

id sub_10009784C(uint64_t a1)
{
  uint64_t v2;
  const char *v3;

  if (dword_1002100A8 <= 30 && (dword_1002100A8 != -1 || _LogCategory_Initialize(&dword_1002100A8, 30)))
  {
    v2 = *(int *)(*(_QWORD *)(a1 + 32) + 236);
    if (v2 > 2)
      v3 = "?";
    else
      v3 = off_1001E55D8[v2];
    LogPrintF(&dword_1002100A8, "-[BTShareAudioSessionDaemon activate]_block_invoke", 30, "Activate: Mode %s", v3);
  }
  objc_msgSend(*(id *)(a1 + 32), "_reportProgress:", 10);
  return objc_msgSend(*(id *)(a1 + 32), "_run");
}

_QWORD *sub_100097954(_QWORD *result)
{
  _QWORD *v1;

  if (!*(_BYTE *)(result[4] + 181))
  {
    v1 = result;
    if (dword_1002100A8 <= 30
      && (dword_1002100A8 != -1 || _LogCategory_Initialize(&dword_1002100A8, 30)))
    {
      LogPrintF(&dword_1002100A8, "-[BTShareAudioSessionDaemon invalidate]_block_invoke", 30, "Invalidate");
    }
    *(_BYTE *)(v1[4] + 181) = 1;
    return objc_msgSend((id)v1[4], "_invalidate");
  }
  return result;
}

_QWORD *sub_100098214(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 32);
  result = *(_QWORD **)(a1 + 40);
  if (v3 == result[3])
    return _objc_msgSend(result, "_bleScannerProxPairingDeviceFound:", a2);
  return result;
}

_QWORD *sub_100098230(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 32);
  result = *(_QWORD **)(a1 + 40);
  if (v3 == result[3])
    return _objc_msgSend(result, "_bleScannerProxPairingDeviceFound:", a2);
  return result;
}

void sub_10009824C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  int v7;
  id v8;

  v3 = a2;
  v4 = v3;
  if (*(_QWORD *)(a1 + 32) == *(_QWORD *)(*(_QWORD *)(a1 + 40) + 24))
  {
    if (v3)
    {
      v8 = v3;
      if (dword_1002100A8 <= 90
        && (dword_1002100A8 != -1 || _LogCategory_Initialize(&dword_1002100A8, 90)))
      {
        LogPrintF(&dword_1002100A8, "-[BTShareAudioSessionDaemon _runScannerProxPairing]_block_invoke_3", 90, "### BLE ProxPairing scanner start failed: %{error}", v8);
      }
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 24), "invalidate");
      v5 = *(_QWORD *)(a1 + 40);
      v6 = *(void **)(v5 + 24);
      *(_QWORD *)(v5 + 24) = 0;

      goto LABEL_11;
    }
    if (dword_1002100A8 <= 30)
    {
      v8 = 0;
      if (dword_1002100A8 != -1 || (v7 = _LogCategory_Initialize(&dword_1002100A8, 30), v4 = 0, v7))
      {
        LogPrintF(&dword_1002100A8, "-[BTShareAudioSessionDaemon _runScannerProxPairing]_block_invoke_3", 30, "BLE ProxPairing scanner started");
LABEL_11:
        v4 = v8;
      }
    }
  }

}

_QWORD *sub_100098564(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 32);
  result = *(_QWORD **)(a1 + 40);
  if (v3 == result[2])
    return _objc_msgSend(result, "_bleScannerNearbyInfoDeviceFound:", a2);
  return result;
}

_QWORD *sub_100098580(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 32);
  result = *(_QWORD **)(a1 + 40);
  if (v3 == result[2])
    return _objc_msgSend(result, "_bleScannerNearbyInfoDeviceFound:", a2);
  return result;
}

void sub_10009859C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  int v7;
  id v8;

  v3 = a2;
  v4 = v3;
  if (*(_QWORD *)(a1 + 32) == *(_QWORD *)(*(_QWORD *)(a1 + 40) + 16))
  {
    if (v3)
    {
      v8 = v3;
      if (dword_1002100A8 <= 90
        && (dword_1002100A8 != -1 || _LogCategory_Initialize(&dword_1002100A8, 90)))
      {
        LogPrintF(&dword_1002100A8, "-[BTShareAudioSessionDaemon _runScannerNearbyInfo]_block_invoke_3", 90, "### BLE NearbyInfo scanner start failed: %{error}", v8);
      }
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 16), "invalidate");
      v5 = *(_QWORD *)(a1 + 40);
      v6 = *(void **)(v5 + 16);
      *(_QWORD *)(v5 + 16) = 0;

      goto LABEL_11;
    }
    if (dword_1002100A8 <= 30)
    {
      v8 = 0;
      if (dword_1002100A8 != -1 || (v7 = _LogCategory_Initialize(&dword_1002100A8, 30), v4 = 0, v7))
      {
        LogPrintF(&dword_1002100A8, "-[BTShareAudioSessionDaemon _runScannerNearbyInfo]_block_invoke_3", 30, "BLE NearbyInfo scanner started");
LABEL_11:
        v4 = v8;
      }
    }
  }

}

void sub_1000987EC(uint64_t a1, uint64_t a2, uint64_t a3, void (**a4)(_QWORD))
{
  _QWORD *v5;
  void (**v6)(_QWORD);
  uint64_t v7;
  void (**v9)(_QWORD);

  v5 = *(_QWORD **)(a1 + 40);
  if (*(_QWORD *)(a1 + 32) == v5[24])
  {
    v9 = a4;
    objc_msgSend(v5, "_runShareAudioServiceConfigRequest:responseHandler:", a3);
  }
  else
  {
    v6 = a4;
    v7 = BTErrorF(4294960582, "Registered session invalidated");
    v9 = (void (**)(_QWORD))objc_claimAutoreleasedReturnValue(v7);
    a4[2](v6);

  }
}

void sub_100098888(uint64_t a1, uint64_t a2, uint64_t a3, void (**a4)(_QWORD))
{
  _QWORD *v5;
  void (**v6)(_QWORD);
  uint64_t v7;
  void (**v9)(_QWORD);

  v5 = *(_QWORD **)(a1 + 40);
  if (*(_QWORD *)(a1 + 32) == v5[24])
  {
    v9 = a4;
    objc_msgSend(v5, "_runShareAudioServiceConnectRequest:responseHandler:", a3);
  }
  else
  {
    v6 = a4;
    v7 = BTErrorF(4294960582, "Registered session invalidated");
    v9 = (void (**)(_QWORD))objc_claimAutoreleasedReturnValue(v7);
    a4[2](v6);

  }
}

void sub_100098B6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  (*(void (**)(uint64_t))(v9 + 16))(v9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100098BA0(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_100098BB0(uint64_t a1)
{

}

uint64_t sub_100098BB8(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 40);
  if (v1)
  {
    v2 = result;
    if (dword_1002100A8 <= 90)
    {
      if (dword_1002100A8 == -1)
      {
        if (!_LogCategory_Initialize(&dword_1002100A8, 90))
          return (*(uint64_t (**)(void))(*(_QWORD *)(v2 + 32) + 16))();
        v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 40) + 8) + 40);
      }
      LogPrintF(&dword_1002100A8, "-[BTShareAudioSessionDaemon _runShareAudioServiceConfigRequest:responseHandler:]_block_invoke", 90, "### Config request failed: %{error}\n", v1);
    }
    return (*(uint64_t (**)(void))(*(_QWORD *)(v2 + 32) + 16))();
  }
  return result;
}

void sub_100098E1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  (*(void (**)(uint64_t))(v9 + 16))(v9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100098E50(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 40);
  if (v1)
  {
    v2 = result;
    if (dword_1002100A8 <= 90)
    {
      if (dword_1002100A8 == -1)
      {
        if (!_LogCategory_Initialize(&dword_1002100A8, 90))
          return (*(uint64_t (**)(void))(*(_QWORD *)(v2 + 32) + 16))();
        v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 40) + 8) + 40);
      }
      LogPrintF(&dword_1002100A8, "-[BTShareAudioSessionDaemon _runShareAudioServiceConfigResponse:]_block_invoke", 90, "### Config request failed: %{error}\n", v1);
    }
    return (*(uint64_t (**)(void))(*(_QWORD *)(v2 + 32) + 16))();
  }
  return result;
}

void sub_1000991A0(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  int v7;
  id v8;

  v3 = a2;
  v4 = v3;
  if (*(_QWORD *)(a1 + 32) == *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8))
  {
    if (v3)
    {
      v8 = v3;
      if (dword_1002100A8 <= 90
        && (dword_1002100A8 != -1 || _LogCategory_Initialize(&dword_1002100A8, 90)))
      {
        LogPrintF(&dword_1002100A8, "-[BTShareAudioSessionDaemon _runAdvertiser]_block_invoke", 90, "### BLE advertiser failed: %@", v8);
      }
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 8), "invalidate");
      v5 = *(_QWORD *)(a1 + 40);
      v6 = *(void **)(v5 + 8);
      *(_QWORD *)(v5 + 8) = 0;

      goto LABEL_11;
    }
    if (dword_1002100A8 <= 30)
    {
      v8 = 0;
      if (dword_1002100A8 != -1 || (v7 = _LogCategory_Initialize(&dword_1002100A8, 30), v4 = 0, v7))
      {
        LogPrintF(&dword_1002100A8, "-[BTShareAudioSessionDaemon _runAdvertiser]_block_invoke", 30, "BLE advertiser started");
LABEL_11:
        v4 = v8;
      }
    }
  }

}

void sub_100099694(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  id v9;

  v3 = a2;
  if (*(_QWORD *)(a1 + 32) == *(_QWORD *)(*(_QWORD *)(a1 + 40) + 160))
  {
    v9 = v3;
    if (dword_1002100A8 <= 90
      && (dword_1002100A8 != -1 || _LogCategory_Initialize(&dword_1002100A8, 90)))
    {
      LogPrintF(&dword_1002100A8, "-[BTShareAudioSessionDaemon _runGuestiOSConnect]_block_invoke", 90, "### Guest iOS session error: %{error}", v9);
    }
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 160), "invalidate");
    v4 = *(_QWORD *)(a1 + 40);
    v5 = *(void **)(v4 + 160);
    *(_QWORD *)(v4 + 160) = 0;

    *(_DWORD *)(*(_QWORD *)(a1 + 40) + 132) = 3;
    v6 = *(void **)(a1 + 40);
    if (v9)
    {
      objc_msgSend(v6, "_reportError:", v9);
    }
    else
    {
      v7 = NSErrorF(NSOSStatusErrorDomain, 4294960596, "?");
      v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
      objc_msgSend(v6, "_reportError:", v8);

    }
    v3 = v9;
  }

}

uint64_t sub_1000997A4(uint64_t result)
{
  if (*(_QWORD *)(result + 32) == *(_QWORD *)(*(_QWORD *)(result + 40) + 160) && dword_1002100A8 <= 90)
  {
    if (dword_1002100A8 != -1)
      return LogPrintF(&dword_1002100A8, "-[BTShareAudioSessionDaemon _runGuestiOSConnect]_block_invoke_2", 90, "### Guest iOS session interrupted");
    result = _LogCategory_Initialize(&dword_1002100A8, 90);
    if ((_DWORD)result)
      return LogPrintF(&dword_1002100A8, "-[BTShareAudioSessionDaemon _runGuestiOSConnect]_block_invoke_2", 90, "### Guest iOS session interrupted");
  }
  return result;
}

uint64_t sub_100099814(uint64_t result)
{
  if (*(_QWORD *)(result + 32) == *(_QWORD *)(*(_QWORD *)(result + 40) + 160) && dword_1002100A8 <= 90)
  {
    if (dword_1002100A8 != -1)
      return LogPrintF(&dword_1002100A8, "-[BTShareAudioSessionDaemon _runGuestiOSConnect]_block_invoke_3", 90, "### Guest iOS session invalidated");
    result = _LogCategory_Initialize(&dword_1002100A8, 90);
    if ((_DWORD)result)
      return LogPrintF(&dword_1002100A8, "-[BTShareAudioSessionDaemon _runGuestiOSConnect]_block_invoke_3", 90, "### Guest iOS session invalidated");
  }
  return result;
}

_QWORD *sub_100099884(_QWORD *result)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = result[5];
  if (result[4] == *(_QWORD *)(v1 + 160) && *(_DWORD *)(v1 + 132) == 1)
  {
    v2 = result;
    *(_DWORD *)(v1 + 132) = 4;
    if (dword_1002100A8 <= 30
      && (dword_1002100A8 != -1 || _LogCategory_Initialize(&dword_1002100A8, 30)))
    {
      LogPrintF(&dword_1002100A8, "-[BTShareAudioSessionDaemon _runGuestiOSConnect]_block_invoke_4", 30, "Guest iOS session started");
    }
    return objc_msgSend((id)v2[5], "_run");
  }
  return result;
}

void sub_100099924(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  void *v6;
  id v7;

  v3 = a2;
  if (*(_QWORD *)(a1 + 32) == *(_QWORD *)(*(_QWORD *)(a1 + 40) + 160))
  {
    v7 = v3;
    v4 = v3;
    if (v4)
    {
      if (dword_1002100A8 <= 90
        && (dword_1002100A8 != -1 || _LogCategory_Initialize(&dword_1002100A8, 90)))
      {
        LogPrintF(&dword_1002100A8, "-[BTShareAudioSessionDaemon _runGuestiOSConnect]_block_invoke_5", 90, "### Guest iOS session activate failed: %@", v4);
      }
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 160), "invalidate");
      v5 = *(_QWORD *)(a1 + 40);
      v6 = *(void **)(v5 + 160);
      *(_QWORD *)(v5 + 160) = 0;

      *(_DWORD *)(*(_QWORD *)(a1 + 40) + 132) = 3;
      objc_msgSend(*(id *)(a1 + 40), "_reportError:", v4);
    }
    else if (dword_1002100A8 <= 30
           && (dword_1002100A8 != -1 || _LogCategory_Initialize(&dword_1002100A8, 30)))
    {
      LogPrintF(&dword_1002100A8, "-[BTShareAudioSessionDaemon _runGuestiOSConnect]_block_invoke_5", 30, "Guest iOS session activated");
    }

    v3 = v7;
  }

}

void sub_100099B94(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;

  v3 = a2;
  if (*(_QWORD *)(a1 + 32) == *(_QWORD *)(*(_QWORD *)(a1 + 40) + 160))
  {
    v5 = v3;
    v4 = v3;
    if (v4)
    {
      if (dword_1002100A8 <= 90
        && (dword_1002100A8 != -1 || _LogCategory_Initialize(&dword_1002100A8, 90)))
      {
        LogPrintF(&dword_1002100A8, "-[BTShareAudioSessionDaemon _runGuestiOSPairSetupPublic]_block_invoke", 90, "### Guest iOS PairSetup failed: %{error}", v4);
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 40) + 152) = 3;
      objc_msgSend(*(id *)(a1 + 40), "_reportError:", v4);
    }
    else
    {
      if (dword_1002100A8 <= 30
        && (dword_1002100A8 != -1 || _LogCategory_Initialize(&dword_1002100A8, 30)))
      {
        LogPrintF(&dword_1002100A8, "-[BTShareAudioSessionDaemon _runGuestiOSPairSetupPublic]_block_invoke", 30, "Guest iOS PairSetup success");
      }
      objc_msgSend(*(id *)(a1 + 40), "_reportProgressTriggeredDevice:", 210);
      *(_DWORD *)(*(_QWORD *)(a1 + 40) + 152) = 4;
      objc_msgSend(*(id *)(a1 + 40), "_run");
    }

    v3 = v5;
  }

}

void sub_100099FA0(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  const __CFString *v6;
  _QWORD v7[4];
  __int128 v8;

  v3 = a2;
  v4 = v3;
  if (*(_QWORD *)(a1 + 32) != *(_QWORD *)(*(_QWORD *)(a1 + 40) + 160))
    goto LABEL_15;
  if (!v3)
    goto LABEL_7;
  if (dword_1002100A8 <= 90)
  {
    if (dword_1002100A8 != -1 || _LogCategory_Initialize(&dword_1002100A8, 90))
      LogPrintF(&dword_1002100A8, "-[BTShareAudioSessionDaemon _runGuestiOSShareAudioSendRequest]_block_invoke", 90, "### Guest iOS ShareAudio add proof failed: %{error}", v4);
LABEL_7:
    if (dword_1002100A8 <= 30
      && (dword_1002100A8 != -1 || _LogCategory_Initialize(&dword_1002100A8, 30)))
    {
      LogPrintF(&dword_1002100A8, "-[BTShareAudioSessionDaemon _runGuestiOSShareAudioSendRequest]_block_invoke", 30, "Guest iOS ShareAudio request: %##.16@", *(_QWORD *)(a1 + 48));
    }
  }
  objc_msgSend(*(id *)(a1 + 40), "_reportProgressTriggeredDevice:", 220);
  v5 = *(_QWORD *)(a1 + 48);
  if (*(_DWORD *)(*(_QWORD *)(a1 + 40) + 236) == 1)
    v6 = CFSTR("_shCf");
  else
    v6 = CFSTR("_shAu");
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_10009A104;
  v7[3] = &unk_1001E5590;
  v8 = *(_OWORD *)(a1 + 32);
  objc_msgSend((id)v8, "sendRequestID:options:request:responseHandler:", v6, 0, v5, v7);
LABEL_15:

}

_QWORD *sub_10009A104(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *result;
  uint64_t v5;

  v5 = *(_QWORD *)(a1 + 32);
  result = *(_QWORD **)(a1 + 40);
  if (v5 == result[20])
    return _objc_msgSend(result, "_runGuestiOSShareAudioProcessResponse:error:", a4, a2);
  return result;
}

void sub_10009A34C(uint64_t a1, void *a2, void *a3)
{
  id v6;
  id v7;
  void *v8;
  uint64_t v9;
  CFTypeID TypeID;
  uint64_t TypedValue;
  void *v12;
  void *v13;
  uint64_t v14;
  int v15;
  id v16;
  void *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  void *v21;
  unsigned int v22;

  v6 = a2;
  v7 = a3;
  if (*(_QWORD *)(a1 + 32) == *(_QWORD *)(*(_QWORD *)(a1 + 40) + 160))
  {
    if (dword_1002100A8 <= 30
      && (dword_1002100A8 != -1 || _LogCategory_Initialize(&dword_1002100A8, 30)))
    {
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "identifier"));
      LogPrintF(&dword_1002100A8, "-[BTShareAudioSessionDaemon _runGuestiOSShareAudioProcessResponse:error:]_block_invoke", 30, "Guest iOS proof result: ContactID %@, %{error}", v8, v7);

    }
    objc_storeStrong((id *)(*(_QWORD *)(a1 + 40) + 136), a2);
    v22 = 0;
    v9 = *(_QWORD *)(a1 + 48);
    TypeID = CFStringGetTypeID();
    TypedValue = CFDictionaryGetTypedValue(v9, CFSTR("btAd"), TypeID, &v22);
    v12 = (void *)objc_claimAutoreleasedReturnValue(TypedValue);
    v13 = v12;
    if (v12)
    {
      v14 = *(_QWORD *)(a1 + 40);
      v15 = *(_DWORD *)(v14 + 236);
      v16 = v12;
      if (v15 == 1)
      {
        v17 = *(void **)(v14 + 72);
        *(_QWORD *)(v14 + 72) = v16;

      }
      else
      {
        v18 = *(void **)(v14 + 80);
        *(_QWORD *)(v14 + 80) = v16;

        *(_DWORD *)(*(_QWORD *)(a1 + 40) + 88) = CFDictionaryGetInt64Ranged(*(_QWORD *)(a1 + 48), CFSTR("colorCode"), 0, 0xFFFFFFFFLL, 0);
        *(_DWORD *)(*(_QWORD *)(a1 + 40) + 112) = CFDictionaryGetInt64Ranged(*(_QWORD *)(a1 + 48), CFSTR("productID"), 0, 0xFFFFFFFFLL, 0);
      }
      if (dword_1002100A8 <= 30
        && (dword_1002100A8 != -1 || _LogCategory_Initialize(&dword_1002100A8, 30)))
      {
        LogPrintF(&dword_1002100A8, "-[BTShareAudioSessionDaemon _runGuestiOSShareAudioProcessResponse:error:]_block_invoke", 30, "Guest iOS ShareAudio: success: DA %@, PID %u, Color %u", *(_QWORD *)(*(_QWORD *)(a1 + 40) + 80), *(unsigned int *)(*(_QWORD *)(a1 + 40) + 112), *(unsigned int *)(*(_QWORD *)(a1 + 40) + 112));
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 40) + 168) = 4;
      objc_msgSend(*(id *)(a1 + 40), "_run");
    }
    else
    {
      if (dword_1002100A8 <= 90
        && (dword_1002100A8 != -1 || _LogCategory_Initialize(&dword_1002100A8, 90)))
      {
        LogPrintF(&dword_1002100A8, "-[BTShareAudioSessionDaemon _runGuestiOSShareAudioProcessResponse:error:]_block_invoke", 90, "### Guest iOS ShareAudio: no peer BT address: %#m", v22);
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 40) + 168) = 3;
      v19 = *(void **)(a1 + 40);
      v20 = NSErrorF(NSOSStatusErrorDomain, 4294960535, "No peer BT Addr");
      v21 = (void *)objc_claimAutoreleasedReturnValue(v20);
      objc_msgSend(v19, "_reportError:", v21);

    }
  }

}

_QWORD *sub_10009A778(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *result;
  uint64_t v5;

  v5 = *(_QWORD *)(a1 + 32);
  result = *(_QWORD **)(a1 + 40);
  if (v5 == result[20])
    return _objc_msgSend(result, "_runGuestiOSShareAudioConnectProcessResponse:error:", a4, a2);
  return result;
}

void sub_10009AB88(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;

  v3 = a2;
  if (*(_QWORD *)(a1 + 32) == *(_QWORD *)(*(_QWORD *)(a1 + 40) + 104))
  {
    v5 = v3;
    v4 = v3;
    if (v4)
    {
      if (dword_1002100A8 <= 90
        && (dword_1002100A8 != -1 || _LogCategory_Initialize(&dword_1002100A8, 90)))
      {
        LogPrintF(&dword_1002100A8, "-[BTShareAudioSessionDaemon _runConnectGuestHeadphones]_block_invoke", 90, "### Guest headphone connect failed: %{error}", v4);
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 40) + 92) = 3;
      objc_msgSend(*(id *)(a1 + 40), "_reportError:", v4);
    }
    else
    {
      if (dword_1002100A8 <= 30
        && (dword_1002100A8 != -1 || _LogCategory_Initialize(&dword_1002100A8, 30)))
      {
        LogPrintF(&dword_1002100A8, "-[BTShareAudioSessionDaemon _runConnectGuestHeadphones]_block_invoke", 30, "Guest headphone connect success");
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 40) + 92) = 4;
      objc_msgSend(*(id *)(a1 + 40), "_reportProgressTriggeredDevice:", 310);
      objc_msgSend(*(id *)(a1 + 40), "_run");
    }

    v3 = v5;
  }

}

id sub_10009BC38(uint64_t a1)
{
  if (dword_1002100A8 <= 30 && (dword_1002100A8 != -1 || _LogCategory_Initialize(&dword_1002100A8, 30)))
    LogPrintF(&dword_1002100A8, "-[BTShareAudioSessionDaemon _pickableRoutesChanged:]_block_invoke", 30, "Pickable routes changed");
  return objc_msgSend(*(id *)(a1 + 32), "_pickableRoutesChanged");
}

id sub_10009C56C(id result)
{
  id v1;
  const char *v2;
  uint64_t v3;
  const char *v4;
  uint64_t v5;

  v1 = result;
  if (dword_1002100A8 <= 30)
  {
    if (dword_1002100A8 != -1 || (result = (id)_LogCategory_Initialize(&dword_1002100A8, 30), (_DWORD)result))
    {
      v2 = "yes";
      if (!*((_BYTE *)v1 + 40))
        v2 = "no";
      v3 = *(int *)(*((_QWORD *)v1 + 4) + 68);
      if (v3 >= 8)
      {
        if ((int)v3 <= 9)
          v4 = "?";
        else
          v4 = "User";
      }
      else
      {
        v4 = off_1001E55F0[v3];
      }
      result = (id)LogPrintF(&dword_1002100A8, "-[BTShareAudioSessionDaemon userConfirmed:]_block_invoke", 30, "User confirmed: permanent %s, CS %s", v2, v4);
    }
  }
  v5 = *((_QWORD *)v1 + 4);
  if (*(_DWORD *)(v5 + 68) == 1)
  {
    *(_BYTE *)(v5 + 64) = *((_BYTE *)v1 + 40);
    *(_DWORD *)(*((_QWORD *)v1 + 4) + 68) = 4;
    return objc_msgSend(*((id *)v1 + 4), "_run");
  }
  return result;
}

uint64_t sub_10009C800()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t result;
  uint64_t v9;

  v0 = sub_1000A0980((uint64_t *)&unk_100210840);
  __chkstk_darwin(v0);
  v2 = (char *)&v9 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for URL(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000A09C0(v5, qword_100218BE0);
  sub_1000A0A00(v3, (uint64_t)qword_100218BE0);
  URL.init(string:)(0x6552646568636143, 0xED00007364726F63);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v7, v2, v3);
    URL.appendingPathComponent(_:isDirectory:)(0x6552656369766544, 0xEC00000064726F63, 1);
    return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  }
  return result;
}

BOOL sub_10009C954(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void sub_10009C96C()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

uint64_t sub_10009C9A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void *v13;
  Swift::String v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  Swift::String v18;
  void *object;
  Swift::String v20;
  uint64_t *v21;
  void *v22;
  uint64_t v23;
  Swift::String v24;
  Swift::String v25;
  uint64_t *v26;
  uint64_t v27;
  void *v28;
  Swift::String v29;
  Swift::String v30;
  uint64_t *v31;
  uint64_t v32;
  void *v33;
  Swift::String v34;
  Swift::String v35;
  uint64_t *v36;
  uint64_t v37;
  void *v38;
  Swift::String v39;
  Swift::String v40;
  uint64_t *v41;
  uint64_t v42;
  void *v43;
  Swift::String v44;
  Swift::String v45;
  uint64_t *v46;
  uint64_t v47;
  void *v48;
  Swift::String v49;
  Swift::String v50;
  unint64_t v51;
  Swift::String v52;
  void *v53;
  id v54;
  void *v55;
  unint64_t v56;
  void (*v57)(char *, uint64_t, uint64_t, uint64_t);
  unsigned int (*v58)(char *, uint64_t, uint64_t);
  void *v59;
  uint64_t v60;
  void (*v61)(char *, char *, uint64_t);
  char *v62;
  void *v63;
  Class isa;
  id v65;
  void *v66;
  char *v67;
  Swift::String v68;
  Swift::String v69;
  void *v70;
  id v71;
  void *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  uint64_t v78;
  char *v79;
  void *v80;
  Class v81;
  id v82;
  unint64_t v83;
  void *v84;
  Swift::String v85;
  Swift::String v86;
  id v87;
  void *v88;
  uint64_t v89;
  void *v90;
  void *v91;
  Swift::String v92;
  Swift::String v93;
  id v94;
  void *v95;
  uint64_t v96;
  void *v97;
  void *v98;
  Swift::String v99;
  uint64_t v100;
  void *v101;
  Swift::String v102;
  uint64_t v104;
  char *v105;
  unint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;

  v1 = type metadata accessor for Date(0);
  v106 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v105 = (char *)&v104 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_1000A0980((uint64_t *)&unk_1002103D0);
  __chkstk_darwin(v3);
  v108 = (char *)&v104 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v109 = (uint64_t)&v104 - v6;
  __chkstk_darwin(v7);
  v9 = (char *)&v104 - v8;
  __chkstk_darwin(v10);
  v12 = (char *)&v104 - v11;
  v13 = (void *)sub_1000AB8A8();
  v110 = 0;
  v111 = 0xE000000000000000;
  _StringGuts.grow(_:)(51);
  v14._countAndFlagsBits = 0x6552656369766544;
  v14._object = (void *)0xED00002864726F63;
  String.append(_:)(v14);
  v15 = (int *)type metadata accessor for DeviceRecord(0);
  v16 = type metadata accessor for UUID(0);
  v17 = sub_1000A0940((unint64_t *)&unk_100210750, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v18._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v16, v17);
  object = v18._object;
  String.append(_:)(v18);
  swift_bridgeObjectRelease(object);
  v20._countAndFlagsBits = 2108704;
  v20._object = (void *)0xE300000000000000;
  String.append(_:)(v20);
  v21 = (uint64_t *)(v0 + v15[6]);
  v23 = *v21;
  v22 = (void *)v21[1];
  swift_bridgeObjectRetain(v22);
  v24._countAndFlagsBits = v23;
  v24._object = v22;
  String.append(_:)(v24);
  swift_bridgeObjectRelease(v22);
  v25._countAndFlagsBits = 8236;
  v25._object = (void *)0xE200000000000000;
  String.append(_:)(v25);
  v26 = (uint64_t *)(v0 + v15[7]);
  v27 = *v26;
  v28 = (void *)v26[1];
  swift_bridgeObjectRetain(v28);
  v29._countAndFlagsBits = v27;
  v29._object = v28;
  String.append(_:)(v29);
  swift_bridgeObjectRelease(v28);
  v30._countAndFlagsBits = 8236;
  v30._object = (void *)0xE200000000000000;
  String.append(_:)(v30);
  v31 = (uint64_t *)(v0 + v15[9]);
  v32 = *v31;
  v33 = (void *)v31[1];
  swift_bridgeObjectRetain(v33);
  v34._countAndFlagsBits = v32;
  v34._object = v33;
  String.append(_:)(v34);
  swift_bridgeObjectRelease(v33);
  v35._countAndFlagsBits = 8236;
  v35._object = (void *)0xE200000000000000;
  String.append(_:)(v35);
  v36 = (uint64_t *)(v0 + v15[8]);
  v37 = *v36;
  v38 = (void *)v36[1];
  swift_bridgeObjectRetain(v38);
  v39._countAndFlagsBits = v37;
  v39._object = v38;
  String.append(_:)(v39);
  swift_bridgeObjectRelease(v38);
  v40._countAndFlagsBits = 0x203A646970202CLL;
  v40._object = (void *)0xE700000000000000;
  String.append(_:)(v40);
  v41 = (uint64_t *)(v0 + v15[10]);
  v42 = *v41;
  v43 = (void *)v41[1];
  swift_bridgeObjectRetain(v43);
  v44._countAndFlagsBits = v42;
  v44._object = v43;
  String.append(_:)(v44);
  swift_bridgeObjectRelease(v43);
  v45._countAndFlagsBits = 0x203A646976202CLL;
  v45._object = (void *)0xE700000000000000;
  String.append(_:)(v45);
  v46 = (uint64_t *)(v0 + v15[11]);
  v47 = *v46;
  v48 = (void *)v46[1];
  swift_bridgeObjectRetain(v48);
  v49._countAndFlagsBits = v47;
  v49._object = v48;
  String.append(_:)(v49);
  swift_bridgeObjectRelease(v48);
  v50._countAndFlagsBits = 10;
  v50._object = (void *)0xE100000000000000;
  String.append(_:)(v50);
  v51 = v111;
  v107 = v110;
  v110 = 0;
  v111 = 0xE000000000000000;
  _StringGuts.grow(_:)(62);
  v52._object = (void *)0x80000001001AA9E0;
  v52._countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v52);
  v53 = v13;
  v54 = objc_msgSend(v13, "creationDate");
  if (v54)
  {
    v55 = v54;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v54);

    v56 = v106;
    v57 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v106 + 56);
    v57(v9, 0, 1, v1);
  }
  else
  {
    v56 = v106;
    v57 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v106 + 56);
    v57(v9, 1, 1, v1);
  }
  sub_1000A0F38((uint64_t)v9, (uint64_t)v12);
  v58 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v56 + 48);
  if (v58(v12, 1, v1))
  {
    sub_1000A1000((uint64_t)v12, (uint64_t *)&unk_1002103D0);
    v59 = (void *)0xE200000000000000;
    v60 = 15932;
  }
  else
  {
    v61 = *(void (**)(char *, char *, uint64_t))(v56 + 16);
    v106 = v51;
    v62 = v105;
    v61(v105, v12, v1);
    sub_1000A1000((uint64_t)v12, (uint64_t *)&unk_1002103D0);
    v63 = (void *)objc_opt_self(NSDateFormatter);
    isa = Date._bridgeToObjectiveC()().super.isa;
    v65 = objc_msgSend(v63, "localizedStringFromDate:dateStyle:timeStyle:", isa, 2, 2);

    v60 = static String._unconditionallyBridgeFromObjectiveC(_:)(v65);
    v59 = v66;

    v67 = v62;
    v51 = v106;
    (*(void (**)(char *, uint64_t))(v56 + 8))(v67, v1);
  }
  v68._countAndFlagsBits = v60;
  v68._object = v59;
  String.append(_:)(v68);
  swift_bridgeObjectRelease(v59);
  v69._countAndFlagsBits = 0x696669646F6D202CLL;
  v69._object = (void *)0xEE00203A6E4F6465;
  String.append(_:)(v69);
  v70 = v53;
  v71 = objc_msgSend(v53, "modificationDate");
  if (v71)
  {
    v72 = v71;
    v73 = v108;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v71);

    v74 = 0;
  }
  else
  {
    v74 = 1;
    v73 = v108;
  }
  v57(v73, v74, 1, v1);
  v75 = (uint64_t)v73;
  v76 = v109;
  sub_1000A0F38(v75, v109);
  if (v58((char *)v76, 1, v1))
  {
    sub_1000A1000(v76, (uint64_t *)&unk_1002103D0);
    v77 = (void *)0xE200000000000000;
    v78 = 15932;
  }
  else
  {
    v79 = v105;
    (*(void (**)(char *, uint64_t, uint64_t))(v56 + 16))(v105, v76, v1);
    sub_1000A1000(v76, (uint64_t *)&unk_1002103D0);
    v80 = (void *)objc_opt_self(NSDateFormatter);
    v81 = Date._bridgeToObjectiveC()().super.isa;
    v82 = objc_msgSend(v80, "localizedStringFromDate:dateStyle:timeStyle:", v81, 2, 2);

    v78 = static String._unconditionallyBridgeFromObjectiveC(_:)(v82);
    v83 = v56;
    v77 = v84;

    (*(void (**)(char *, uint64_t))(v83 + 8))(v79, v1);
  }
  v85._countAndFlagsBits = v78;
  v85._object = v77;
  String.append(_:)(v85);
  swift_bridgeObjectRelease(v77);
  v86._countAndFlagsBits = 0x696669646F6D202CLL;
  v86._object = (void *)0xEF203A7962206465;
  String.append(_:)(v86);
  v87 = objc_msgSend(v70, "modifiedByDevice");
  if (v87)
  {
    v88 = v87;
    v89 = static String._unconditionallyBridgeFromObjectiveC(_:)(v87);
    v91 = v90;

  }
  else
  {
    v91 = (void *)0xE200000000000000;
    v89 = 15932;
  }
  v92._countAndFlagsBits = v89;
  v92._object = v91;
  String.append(_:)(v92);
  swift_bridgeObjectRelease(v91);
  v93._countAndFlagsBits = 0x203A67617465202CLL;
  v93._object = (void *)0xE800000000000000;
  String.append(_:)(v93);
  v94 = objc_msgSend(v70, "recordChangeTag");
  if (v94)
  {
    v95 = v94;
    v96 = static String._unconditionallyBridgeFromObjectiveC(_:)(v94);
    v98 = v97;

  }
  else
  {
    v98 = (void *)0xE200000000000000;
    v96 = 15932;
  }
  v99._countAndFlagsBits = v96;
  v99._object = v98;
  String.append(_:)(v99);
  swift_bridgeObjectRelease(v98);
  v100 = v110;
  v101 = (void *)v111;
  v110 = v107;
  v111 = v51;
  swift_bridgeObjectRetain(v51);
  v102._countAndFlagsBits = v100;
  v102._object = v101;
  String.append(_:)(v102);

  swift_bridgeObjectRelease(v51);
  swift_bridgeObjectRelease(v101);
  return v110;
}

uint64_t sub_10009D0DC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, void *a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v10;
  char *v11;
  int *v12;
  char *v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t, uint64_t);
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  id v21;
  void *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t *v26;
  id v27;
  void *v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  id v33;
  void *v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t *v38;
  id v39;
  void *v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t *v44;
  id v45;
  void *v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t *v50;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  v55 = type metadata accessor for Date(0);
  v53 = *(_QWORD *)(v55 - 8);
  __chkstk_darwin(v55);
  v11 = (char *)&v52 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  *a5 = a2;
  a5[1] = a3;
  v12 = (int *)type metadata accessor for DeviceRecord(0);
  v13 = (char *)a5 + v12[5];
  v14 = type metadata accessor for UUID(0);
  v52 = *(_QWORD *)(v14 - 8);
  v15 = *(void (**)(char *, uint64_t, uint64_t))(v52 + 16);
  v54 = a1;
  v15(v13, a1, v14);
  sub_1000A0E74(a2, a3);
  v16 = objc_msgSend(a4, "bluetoothAddress");
  v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
  v19 = v18;

  v20 = (uint64_t *)((char *)a5 + v12[6]);
  *v20 = v17;
  v20[1] = v19;
  v21 = objc_msgSend(a4, "nickname");
  if (v21)
  {
    v22 = v21;
    v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
    v25 = v24;

  }
  else
  {
    v23 = 0;
    v25 = 0xE000000000000000;
  }
  v26 = (uint64_t *)((char *)a5 + v12[7]);
  *v26 = v23;
  v26[1] = v25;
  v27 = objc_msgSend(a4, "modelNumber");
  if (v27)
  {
    v28 = v27;
    v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
    v31 = v30;

  }
  else
  {
    v29 = 0;
    v31 = 0xE000000000000000;
  }
  v32 = (uint64_t *)((char *)a5 + v12[8]);
  *v32 = v29;
  v32[1] = v31;
  v33 = objc_msgSend(a4, "manufacturer");
  if (v33)
  {
    v34 = v33;
    v35 = static String._unconditionallyBridgeFromObjectiveC(_:)(v33);
    v37 = v36;

  }
  else
  {
    v35 = 0;
    v37 = 0xE000000000000000;
  }
  v38 = (uint64_t *)((char *)a5 + v12[9]);
  *v38 = v35;
  v38[1] = v37;
  v39 = objc_msgSend(a4, "productID");
  if (v39)
  {
    v40 = v39;
    v41 = static String._unconditionallyBridgeFromObjectiveC(_:)(v39);
    v43 = v42;

  }
  else
  {
    v41 = 0;
    v43 = 0xE000000000000000;
  }
  v44 = (uint64_t *)((char *)a5 + v12[10]);
  *v44 = v41;
  v44[1] = v43;
  v45 = objc_msgSend(a4, "vendorID");
  if (v45)
  {
    v46 = v45;
    v47 = static String._unconditionallyBridgeFromObjectiveC(_:)(v45);
    v49 = v48;

  }
  else
  {
    v47 = 0;
    v49 = 0xE000000000000000;
  }
  v50 = (uint64_t *)((char *)a5 + v12[11]);
  *v50 = v47;
  v50[1] = v49;
  static Date.now.getter(v45);

  sub_1000A103C(a2, a3);
  (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v54, v14);
  return (*(uint64_t (**)(char *, char *, uint64_t))(v53 + 32))((char *)a5 + v12[12], v11, v55);
}

uint64_t sub_10009D3A4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char *v31;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  id v36;
  id v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  int *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int (*v71)(uint64_t, uint64_t, uint64_t);
  void *v72;
  uint64_t v73;
  unint64_t v74;
  objc_class *v75;
  Class isa;
  uint64_t v77;
  uint64_t v78;
  id v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  void (*v83)(uint64_t, char *, uint64_t);
  uint64_t v84;
  void (*v85)(uint64_t, uint64_t, uint64_t, uint64_t);
  void *v86;
  uint64_t *v87;
  unint64_t v88;
  uint64_t v89;
  objc_class *v90;
  objc_class *v91;
  Class v92;
  uint64_t v93;
  uint64_t v94;
  Class v95;
  id v96;
  char *v97;
  uint64_t v98;
  void (*v99)(uint64_t, char *, uint64_t);
  uint64_t v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  char *v106;
  char *v107;
  int *v108;
  uint64_t *v109;
  char *v110;
  char *v111;
  char *v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  char *v120;
  uint64_t v121;
  _QWORD *v122;
  uint64_t v123;
  id v124[3];
  char v125;

  v113 = a2;
  sub_1000A0980((uint64_t *)&unk_1002103D0);
  v3 = ((uint64_t (*)(void))__chkstk_darwin)();
  v111 = (char *)&v103 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __chkstk_darwin(v3);
  v112 = (char *)&v103 - v6;
  __chkstk_darwin(v5);
  v115 = (uint64_t)&v103 - v7;
  v8 = type metadata accessor for Date(0);
  v116 = *(_QWORD *)(v8 - 8);
  v117 = v8;
  v9 = __chkstk_darwin(v8);
  v110 = (char *)&v103 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v114 = (char *)&v103 - v11;
  v12 = type metadata accessor for UUID(0);
  v13 = *(char **)(v12 - 8);
  v118 = v12;
  v119 = v13;
  __chkstk_darwin(v12);
  v120 = (char *)&v103 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v121 = sub_1000A0980(&qword_1002105A8);
  v15 = *(_QWORD *)(v121 - 8);
  __chkstk_darwin(v121);
  v17 = (char *)&v103 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for DeviceRecord(0);
  v19 = __chkstk_darwin(v18);
  v21 = (char *)&v103 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __chkstk_darwin(v19);
  v24 = (char *)&v103 - v23;
  __chkstk_darwin(v22);
  v26 = (uint64_t *)((char *)&v103 - v25);
  v28 = a1[3];
  v27 = a1[4];
  v122 = a1;
  sub_1000A20D8(a1, v28);
  v29 = sub_1000A20FC();
  v30 = v123;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for DeviceRecord.CodingKeys, &type metadata for DeviceRecord.CodingKeys, v29, v28, v27);
  if (v30)
    return sub_1000A2140(v122);
  v31 = v120;
  v106 = v21;
  v107 = v24;
  v108 = (int *)v18;
  v109 = v26;
  v123 = v15;
  v125 = 0;
  v32 = sub_1000A2160();
  v33 = v121;
  v34 = v17;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v124, &type metadata for Data, &v125, v121, &type metadata for Data, v32);
  v36 = v124[0];
  v37 = v124[1];
  v38 = v109;
  *v109 = (uint64_t)v124[0];
  v38[1] = (uint64_t)v37;
  LOBYTE(v124[0]) = 1;
  v39 = sub_1000A0940((unint64_t *)&unk_1002105C0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v40 = v118;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v31, v118, v124, v33, v118, v39);
  v104 = (unint64_t)v37;
  v105 = (uint64_t)v36;
  v41 = v108;
  (*((void (**)(char *, char *, uint64_t))v119 + 4))((char *)v38 + v108[5], v31, v40);
  LOBYTE(v124[0]) = 2;
  v42 = KeyedDecodingContainer.decode(_:forKey:)(v124, v33);
  v44 = (uint64_t *)((char *)v38 + v41[6]);
  *v44 = v42;
  v44[1] = v43;
  LOBYTE(v124[0]) = 3;
  v45 = KeyedDecodingContainer.decode(_:forKey:)(v124, v33);
  v46 = (uint64_t *)((char *)v38 + v41[7]);
  *v46 = v45;
  v46[1] = v47;
  LOBYTE(v124[0]) = 4;
  v120 = 0;
  v48 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v124, v33);
  if (v49)
    v50 = v48;
  else
    v50 = 0;
  if (v49)
    v51 = v49;
  else
    v51 = 0xE000000000000000;
  v52 = (uint64_t *)((char *)v38 + v41[8]);
  *v52 = v50;
  v52[1] = v51;
  LOBYTE(v124[0]) = 5;
  v53 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v124, v33);
  if (v54)
    v55 = v53;
  else
    v55 = 0;
  if (v54)
    v56 = v54;
  else
    v56 = 0xE000000000000000;
  v57 = (uint64_t *)((char *)v38 + v41[9]);
  *v57 = v55;
  v57[1] = v56;
  LOBYTE(v124[0]) = 6;
  v58 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v124, v33);
  if (v59)
    v60 = v58;
  else
    v60 = 0;
  if (v59)
    v61 = v59;
  else
    v61 = 0xE000000000000000;
  v62 = (uint64_t *)((char *)v38 + v41[10]);
  *v62 = v60;
  v62[1] = v61;
  LOBYTE(v124[0]) = 7;
  v63 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v124, v33);
  if (v64)
    v65 = v63;
  else
    v65 = 0;
  if (v64)
    v66 = v64;
  else
    v66 = 0xE000000000000000;
  v67 = (uint64_t *)((char *)v38 + v41[11]);
  *v67 = v65;
  v67[1] = v66;
  v68 = (char *)v38 + v41[12];
  static Date.now.getter(v63);
  LOBYTE(v124[0]) = 8;
  v69 = sub_1000A0940(&qword_100210790, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  v70 = v115;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v117, v124, v33, v117, v69);
  v119 = v34;
  v120 = v68;
  v71 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v116 + 48);
  if (v71(v70, 1, v117) == 1)
  {
    v72 = objc_autoreleasePoolPush();
    v73 = v105;
    v74 = v104;
    sub_1000A0E74(v105, v104);
    sub_100109DEC(v73, v74);
    isa = v75;
    sub_1000A103C(v73, v74);
    sub_1000A0EB8((uint64_t)v109, (uint64_t)v107);
    if (isa)
    {
      v77 = (uint64_t)v107;
    }
    else
    {
      v78 = (uint64_t)v107;
      isa = sub_1000A9BCC().super.isa;
      v77 = v78;
    }
    sub_1000A0EFC(v77);
    v124[0] = isa;
    sub_10009E74C(v124);
    objc_autoreleasePoolPop(v72);
    v79 = -[objc_class modificationDate](isa, "modificationDate");

    if (v79)
    {
      v80 = v110;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v79);

      v82 = v116;
      v81 = v117;
      v83 = *(void (**)(uint64_t, char *, uint64_t))(v116 + 32);
      v84 = (uint64_t)v112;
      v83((uint64_t)v112, v80, v117);
      v85 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v82 + 56);
      v85(v84, 0, 1, v81);
      if (v71(v84, 1, v81) != 1)
      {
        (*(void (**)(char *, uint64_t))(v123 + 8))(v119, v33);
        v83((uint64_t)v114, v112, v117);
LABEL_46:
        sub_1000A1000(v115, (uint64_t *)&unk_1002103D0);
        goto LABEL_47;
      }
    }
    else
    {
      v85 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v116 + 56);
      v85((uint64_t)v112, 1, 1, v117);
    }
    v86 = objc_autoreleasePoolPush();
    v87 = v109;
    v89 = *v109;
    v88 = v109[1];
    sub_1000A0E74(*v109, v88);
    sub_100109DEC(v89, v88);
    v91 = v90;
    sub_1000A103C(v89, v88);
    sub_1000A0EB8((uint64_t)v87, (uint64_t)v106);
    if (v91)
    {
      v92 = v91;
      v93 = (uint64_t)v106;
    }
    else
    {
      v94 = (uint64_t)v106;
      v92 = sub_1000A9BCC().super.isa;
      v93 = v94;
    }
    sub_1000A0EFC(v93);
    v95 = v92;
    v124[0] = v92;
    sub_10009E74C(v124);
    objc_autoreleasePoolPop(v86);
    v96 = -[objc_class creationDate](v92, "creationDate");

    if (v96)
    {
      v97 = v110;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v96);

      v98 = v117;
      v99 = *(void (**)(uint64_t, char *, uint64_t))(v116 + 32);
      v100 = (uint64_t)v111;
      v99((uint64_t)v111, v97, v117);
      v85(v100, 0, 1, v98);
      v101 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v71)(v100, 1, v98);
      if ((_DWORD)v101 != 1)
      {
        (*(void (**)(char *, uint64_t))(v123 + 8))(v119, v33);
        v99((uint64_t)v114, v111, v117);
LABEL_45:
        sub_1000A1000((uint64_t)v112, (uint64_t *)&unk_1002103D0);
        goto LABEL_46;
      }
    }
    else
    {
      v101 = ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v85)(v111, 1, 1, v117);
    }
    static Date.now.getter(v101);
    (*(void (**)(char *, uint64_t))(v123 + 8))(v119, v33);
    sub_1000A1000((uint64_t)v111, (uint64_t *)&unk_1002103D0);
    goto LABEL_45;
  }
  (*(void (**)(char *, uint64_t))(v123 + 8))(v119, v33);
  (*(void (**)(char *, uint64_t, uint64_t))(v116 + 32))(v114, v115, v117);
LABEL_47:
  (*(void (**)(char *, char *, uint64_t))(v116 + 40))(v120, v114, v117);
  v102 = v109;
  sub_1000A0EB8((uint64_t)v109, v113);
  sub_1000A2140(v122);
  return sub_1000A0EFC((uint64_t)v102);
}

void sub_10009DE04(id a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  id v22;
  uint64_t ObjectType;
  NSString v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  id v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  _BYTE *v38;
  NSString v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  int *v44;
  uint64_t *v45;
  _QWORD *v46;
  uint64_t v47;
  unint64_t v48;
  _QWORD *v49;
  unint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  unint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  unint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  unint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  id v62;
  id v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  id v68;
  void *v69;
  char *v70;
  uint64_t v71;
  void (*v72)(char *, char *, uint64_t);
  uint64_t v73;
  uint64_t v74;
  void (*v75)(char *, uint64_t, uint64_t, uint64_t);
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  _BYTE *v83;
  id v84;
  id v85;
  void *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  void (*v91)(char *, char *, uint64_t);
  uint64_t (*v92)(uint64_t, uint64_t, uint64_t);
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t *v97;
  id v98;
  uint64_t v99;
  char *v100;
  char *v101;
  char *v102;
  char *v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  id v110;

  v4 = sub_1000A0980((uint64_t *)&unk_1002103D0);
  __chkstk_darwin(v4);
  v100 = (char *)&v94 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v102 = (char *)&v94 - v7;
  v8 = type metadata accessor for Date(0);
  v104 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v103 = (char *)&v94 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v101 = (char *)&v94 - v11;
  v12 = sub_1000A0980(&qword_1002103E0);
  __chkstk_darwin(v12);
  v14 = (char *)&v94 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for UUID(0);
  v106 = *(_QWORD *)(v15 - 8);
  v107 = v15;
  __chkstk_darwin(v15);
  v105 = (char *)&v94 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = CKRecord.recordType.getter(v17);
  v20 = v19;
  if (v18 == 0x6552656369766544 && v19 == 0xEC00000064726F63)
  {
    swift_bridgeObjectRelease(0xEC00000064726F63);
  }
  else
  {
    v21 = _stringCompareWithSmolCheck(_:_:expecting:)(v18, v19, 0x6552656369766544, 0xEC00000064726F63, 0);
    swift_bridgeObjectRelease(v20);
    if ((v21 & 1) == 0)
    {
      v36 = sub_1000A0F80();
      v37 = swift_allocError(&type metadata for DeviceRecord.DeviceRecordError, v36, 0, 0);
      *v38 = 0;
      swift_willThrow(v37);
LABEL_27:

      return;
    }
  }
  v99 = v8;
  v22 = objc_msgSend(a1, "encryptedValues");
  ObjectType = swift_getObjectType(v22);
  v24 = String._bridgeToObjectiveC()();
  v25 = objc_msgSend(v22, "objectForKeyedSubscript:", v24);

  if (!v25
    || (v110 = v25,
        v27 = sub_1000A0980(&qword_100210400),
        v26 = swift_dynamicCast(&v108, &v110, v27, &type metadata for String, 6),
        (v26 & 1) == 0))
  {
LABEL_24:
    v77 = static os_log_type_t.error.getter(v26);
    if (qword_1002101E0 != -1)
      swift_once(&qword_1002101E0, sub_1001687B0);
    v78 = qword_100218DE8;
    v79 = sub_1000A0980((uint64_t *)&unk_1002103C0);
    v80 = swift_allocObject(v79, 72, 7);
    *(_OWORD *)(v80 + 16) = xmmword_100184870;
    *(_QWORD *)(v80 + 56) = sub_1000A0FC4();
    *(_QWORD *)(v80 + 64) = sub_1000A0940((unint64_t *)&qword_1002108A0, (uint64_t (*)(uint64_t))sub_1000A0FC4, (uint64_t)&protocol conformance descriptor for NSObject);
    *(_QWORD *)(v80 + 32) = a1;
    a1 = a1;
    os_log(_:dso:log:_:_:)(v77, &_mh_execute_header, v78, "Invalid Device Record - %@", 26, 2, v80);
    swift_bridgeObjectRelease(v80);
    v81 = sub_1000A0F80();
    v82 = swift_allocError(&type metadata for DeviceRecord.DeviceRecordError, v81, 0, 0);
    *v83 = 2;
    swift_willThrow(v82);
    swift_unknownObjectRelease(v22);
    goto LABEL_27;
  }
  v97 = a2;
  v98 = v22;
  v28 = v109;
  v95 = v108;
  v96 = ObjectType;
  v29 = objc_msgSend(a1, "recordID");
  v30 = objc_msgSend(v29, "recordName");

  v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
  v33 = v32;

  UUID.init(uuidString:)(v31, v33);
  swift_bridgeObjectRelease(v33);
  v34 = v106;
  v35 = v107;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v106 + 48))(v14, 1, v107) == 1)
  {
    swift_bridgeObjectRelease(v28);
    v26 = sub_1000A1000((uint64_t)v14, &qword_1002103E0);
    v22 = v98;
    goto LABEL_24;
  }
  v94 = v28;
  (*(void (**)(char *, char *, uint64_t))(v34 + 32))(v105, v14, v35);
  v39 = String._bridgeToObjectiveC()();
  v22 = v98;
  v40 = objc_msgSend(v98, "objectForKeyedSubscript:", v39);

  if (!v40 || (v110 = v40, (swift_dynamicCast(&v108, &v110, v27, &type metadata for String, 6) & 1) == 0))
  {
    swift_bridgeObjectRelease(v94);
    v26 = (*(uint64_t (**)(char *, uint64_t))(v34 + 8))(v105, v35);
    goto LABEL_24;
  }
  v41 = v34;
  v42 = v108;
  v43 = v109;
  v44 = (int *)type metadata accessor for DeviceRecord(0);
  v45 = v97;
  (*(void (**)(char *, char *, uint64_t))(v41 + 16))((char *)v97 + v44[5], v105, v35);
  v46 = (uint64_t *)((char *)v45 + v44[6]);
  v47 = v96;
  v48 = v94;
  *v46 = v95;
  v46[1] = v48;
  v49 = (uint64_t *)((char *)v45 + v44[7]);
  *v49 = v42;
  v49[1] = v43;
  CKRecordKeyValueSetting.subscript.getter(&v108, 0x6D754E6C65646F6DLL, 0xEB00000000726562, v47, &type metadata for String, &protocol witness table for String);
  v51 = v108;
  v50 = v109;
  if (!v109)
  {
    v51 = 0;
    v50 = 0xE000000000000000;
  }
  v52 = (uint64_t *)((char *)v45 + v44[8]);
  *v52 = v51;
  v52[1] = v50;
  CKRecordKeyValueSetting.subscript.getter(&v108, 0x74636166756E616DLL, 0xEC00000072657275, v47, &type metadata for String, &protocol witness table for String);
  v54 = v108;
  v53 = v109;
  if (!v109)
  {
    v54 = 0;
    v53 = 0xE000000000000000;
  }
  v55 = (uint64_t *)((char *)v45 + v44[9]);
  *v55 = v54;
  v55[1] = v53;
  CKRecordKeyValueSetting.subscript.getter(&v108, 0x49746375646F7270, 0xE900000000000044, v47, &type metadata for String, &protocol witness table for String);
  v57 = v108;
  v56 = v109;
  if (!v109)
  {
    v57 = 0;
    v56 = 0xE000000000000000;
  }
  v58 = (uint64_t *)((char *)v45 + v44[10]);
  *v58 = v57;
  v58[1] = v56;
  CKRecordKeyValueSetting.subscript.getter(&v108, 0x4449726F646E6576, 0xE800000000000000, v47, &type metadata for String, &protocol witness table for String);
  v60 = v108;
  v59 = v109;
  if (!v109)
  {
    v60 = 0;
    v59 = 0xE000000000000000;
  }
  v96 = (uint64_t)v44;
  v61 = (uint64_t *)((char *)v45 + v44[11]);
  *v61 = v60;
  v61[1] = v59;
  v62 = objc_msgSend(objc_allocWithZone((Class)NSKeyedArchiver), "initRequiringSecureCoding:", 1);
  objc_msgSend(a1, "encodeSystemFieldsWithCoder:", v62);
  objc_msgSend(v62, "finishEncoding");
  v63 = objc_msgSend(v62, "encodedData");
  v64 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  v66 = v65;

  *v45 = v64;
  v45[1] = v66;
  v67 = v45;
  v68 = objc_msgSend(a1, "modificationDate");
  if (!v68)
  {
    v75 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v104 + 56);
    v73 = (uint64_t)v102;
    v74 = v99;
    v75(v102, 1, 1, v99);
LABEL_29:
    v84 = objc_msgSend(a1, "creationDate");
    v85 = v98;
    if (v84)
    {
      v86 = v84;
      v87 = v103;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v84);

      v88 = v104;
      v89 = (uint64_t)v100;
      v90 = v87;
      v91 = *(void (**)(char *, char *, uint64_t))(v104 + 32);
      v91(v100, v90, v74);
      v75((char *)v89, 0, 1, v74);
      v92 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v88 + 48);
      v67 = v97;
      v93 = v92(v89, 1, v74);
      if ((_DWORD)v93 != 1)
      {
        swift_unknownObjectRelease(v85);

        (*(void (**)(char *, uint64_t))(v106 + 8))(v105, v107);
        v76 = v101;
        v91(v101, (char *)v89, v74);
LABEL_34:
        sub_1000A1000(v73, (uint64_t *)&unk_1002103D0);
        v72 = *(void (**)(char *, char *, uint64_t))(v104 + 32);
        goto LABEL_35;
      }
    }
    else
    {
      v89 = (uint64_t)v100;
      v93 = ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v75)(v100, 1, 1, v74);
    }
    v76 = v101;
    static Date.now.getter(v93);
    swift_unknownObjectRelease(v85);

    (*(void (**)(char *, uint64_t))(v106 + 8))(v105, v107);
    sub_1000A1000(v89, (uint64_t *)&unk_1002103D0);
    goto LABEL_34;
  }
  v69 = v68;
  v70 = v103;
  static Date._unconditionallyBridgeFromObjectiveC(_:)(v68);

  v71 = v104;
  v72 = *(void (**)(char *, char *, uint64_t))(v104 + 32);
  v73 = (uint64_t)v102;
  v74 = v99;
  v72(v102, v70, v99);
  v75 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v71 + 56);
  v75((char *)v73, 0, 1, v74);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v71 + 48))(v73, 1, v74) == 1)
    goto LABEL_29;
  swift_unknownObjectRelease(v98);

  (*(void (**)(char *, uint64_t))(v106 + 8))(v105, v107);
  v76 = v101;
  v72(v101, (char *)v73, v74);
LABEL_35:
  v72((char *)v67 + *(int *)(v96 + 48), v76, v74);
}

uint64_t sub_10009E74C(id *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t ObjectType;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  char v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  void *v52;

  v2 = v1;
  v4 = static os_log_type_t.debug.getter();
  if (qword_1002101E0 != -1)
    swift_once(&qword_1002101E0, sub_1001687B0);
  v5 = qword_100218DE8;
  v6 = sub_1000A0980((uint64_t *)&unk_1002103C0);
  v7 = swift_allocObject(v6, 72, 7);
  *(_OWORD *)(v7 + 16) = xmmword_100184870;
  v8 = *a1;
  v9 = objc_msgSend(v8, "description");
  v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
  v12 = v11;

  *(_QWORD *)(v7 + 56) = &type metadata for String;
  *(_QWORD *)(v7 + 64) = sub_1000A0DF4();
  *(_QWORD *)(v7 + 32) = v10;
  *(_QWORD *)(v7 + 40) = v12;
  os_log(_:dso:log:_:_:)(v4, &_mh_execute_header, v5, "Updating main device record: %@", 31, 2, v7);
  swift_bridgeObjectRelease(v7);
  v13 = objc_msgSend(v8, "encryptedValues");
  ObjectType = swift_getObjectType(v13);
  CKRecordKeyValueSetting.subscript.getter(&v49, 0xD000000000000010, 0x80000001001AA8D0, ObjectType, &type metadata for String, &protocol witness table for String);
  v16 = v49;
  v15 = v50;
  v17 = (int *)type metadata accessor for DeviceRecord(0);
  v18 = v2;
  v19 = (_QWORD *)(v2 + v17[6]);
  v21 = *v19;
  v20 = v19[1];
  if (!v15)
    goto LABEL_8;
  if (v16 != v21 || v15 != v20)
  {
    v22 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v15, *v19, v19[1], 0);
    swift_bridgeObjectRelease(v15);
    if ((v22 & 1) != 0)
      goto LABEL_9;
LABEL_8:
    v51 = &type metadata for String;
    v52 = &protocol witness table for String;
    v49 = v21;
    v50 = v20;
    swift_bridgeObjectRetain(v20);
    CKRecordKeyValueSetting.subscript.setter(&v49, 0xD000000000000010, 0x80000001001AA8D0, ObjectType);
    goto LABEL_9;
  }
  swift_bridgeObjectRelease(v15);
LABEL_9:
  CKRecordKeyValueSetting.subscript.getter(&v49, 0x656D616E6B63696ELL, 0xE800000000000000, ObjectType, &type metadata for String, &protocol witness table for String);
  v23 = v50;
  v24 = (_QWORD *)(v18 + v17[7]);
  v26 = *v24;
  v25 = v24[1];
  if (!v50)
    goto LABEL_15;
  if (v49 == v26 && v50 == v25)
  {
    swift_bridgeObjectRelease(v50);
    goto LABEL_16;
  }
  v27 = _stringCompareWithSmolCheck(_:_:expecting:)(v49, v50, *v24, v24[1], 0);
  swift_bridgeObjectRelease(v23);
  if ((v27 & 1) == 0)
  {
LABEL_15:
    v51 = &type metadata for String;
    v52 = &protocol witness table for String;
    v49 = v26;
    v50 = v25;
    swift_bridgeObjectRetain(v25);
    CKRecordKeyValueSetting.subscript.setter(&v49, 0x656D616E6B63696ELL, 0xE800000000000000, ObjectType);
  }
LABEL_16:
  CKRecordKeyValueSetting.subscript.getter(&v49, 0x6D754E6C65646F6DLL, 0xEB00000000726562, ObjectType, &type metadata for String, &protocol witness table for String);
  v28 = v50;
  v29 = (_QWORD *)(v18 + v17[8]);
  v31 = *v29;
  v30 = v29[1];
  if (!v50)
    goto LABEL_21;
  if (v49 != v31 || v50 != v30)
  {
    v32 = _stringCompareWithSmolCheck(_:_:expecting:)(v49, v50, *v29, v29[1], 0);
    swift_bridgeObjectRelease(v28);
    if ((v32 & 1) != 0)
      goto LABEL_22;
LABEL_21:
    v51 = &type metadata for String;
    v52 = &protocol witness table for String;
    v49 = v31;
    v50 = v30;
    swift_bridgeObjectRetain(v30);
    CKRecordKeyValueSetting.subscript.setter(&v49, 0x6D754E6C65646F6DLL, 0xEB00000000726562, ObjectType);
    goto LABEL_22;
  }
  swift_bridgeObjectRelease(v50);
LABEL_22:
  CKRecordKeyValueSetting.subscript.getter(&v49, 0x74636166756E616DLL, 0xEC00000072657275, ObjectType, &type metadata for String, &protocol witness table for String);
  v33 = v50;
  v34 = (_QWORD *)(v18 + v17[9]);
  v36 = *v34;
  v35 = v34[1];
  if (!v50)
    goto LABEL_27;
  if (v49 == v36 && v50 == v35)
  {
    swift_bridgeObjectRelease(v50);
    goto LABEL_28;
  }
  v37 = _stringCompareWithSmolCheck(_:_:expecting:)(v49, v50, *v34, v34[1], 0);
  swift_bridgeObjectRelease(v33);
  if ((v37 & 1) == 0)
  {
LABEL_27:
    v51 = &type metadata for String;
    v52 = &protocol witness table for String;
    v49 = v36;
    v50 = v35;
    swift_bridgeObjectRetain(v35);
    CKRecordKeyValueSetting.subscript.setter(&v49, 0x74636166756E616DLL, 0xEC00000072657275, ObjectType);
  }
LABEL_28:
  CKRecordKeyValueSetting.subscript.getter(&v49, 0x49746375646F7270, 0xE900000000000044, ObjectType, &type metadata for String, &protocol witness table for String);
  v38 = v50;
  v39 = (_QWORD *)(v18 + v17[10]);
  v41 = *v39;
  v40 = v39[1];
  if (!v50)
    goto LABEL_33;
  if (v49 != v41 || v50 != v40)
  {
    v42 = _stringCompareWithSmolCheck(_:_:expecting:)(v49, v50, *v39, v39[1], 0);
    swift_bridgeObjectRelease(v38);
    if ((v42 & 1) != 0)
      goto LABEL_34;
LABEL_33:
    v51 = &type metadata for String;
    v52 = &protocol witness table for String;
    v49 = v41;
    v50 = v40;
    swift_bridgeObjectRetain(v40);
    CKRecordKeyValueSetting.subscript.setter(&v49, 0x49746375646F7270, 0xE900000000000044, ObjectType);
    goto LABEL_34;
  }
  swift_bridgeObjectRelease(v50);
LABEL_34:
  CKRecordKeyValueSetting.subscript.getter(&v49, 0x4449726F646E6576, 0xE800000000000000, ObjectType, &type metadata for String, &protocol witness table for String);
  v43 = v50;
  v44 = (_QWORD *)(v18 + v17[11]);
  v46 = *v44;
  v45 = v44[1];
  if (!v50)
    goto LABEL_39;
  if (v49 == v46 && v50 == v45)
  {
    swift_unknownObjectRelease(v13);
    return swift_bridgeObjectRelease(v43);
  }
  v48 = _stringCompareWithSmolCheck(_:_:expecting:)(v49, v50, *v44, v44[1], 0);
  swift_bridgeObjectRelease(v43);
  if ((v48 & 1) == 0)
  {
LABEL_39:
    v51 = &type metadata for String;
    v52 = &protocol witness table for String;
    v49 = v46;
    v50 = v45;
    swift_bridgeObjectRetain(v45);
    CKRecordKeyValueSetting.subscript.setter(&v49, 0x4449726F646E6576, 0xE800000000000000, ObjectType);
  }
  return swift_unknownObjectRelease(v13);
}

uint64_t sub_10009ED2C(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  id v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  id v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;

  v3 = type metadata accessor for Date(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v65 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((sub_10009F15C(a1) & 1) != 0)
  {
    v7 = objc_msgSend(a1, "nickname");
    if (v7)
    {
      v8 = v7;
      v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
      v11 = v10;

      v12 = *(int *)(type metadata accessor for DeviceRecord(0) + 28);
      v13 = (uint64_t *)(v1 + v12);
      v14 = *(_QWORD *)(v1 + v12);
      v15 = *(_QWORD *)(v1 + v12 + 8);
      v16 = v14 == v9 && v15 == v11;
      if (v16 || (_stringCompareWithSmolCheck(_:_:expecting:)(v14, *(_QWORD *)(v1 + v12 + 8), v9, v11, 0) & 1) != 0)
      {
        swift_bridgeObjectRelease(v11);
      }
      else
      {
        swift_bridgeObjectRelease(v15);
        *v13 = v9;
        v13[1] = v11;
      }
    }
    v27 = objc_msgSend(a1, "modelNumber");
    if (v27)
    {
      v28 = v27;
      v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
      v31 = v30;

      v32 = *(int *)(type metadata accessor for DeviceRecord(0) + 32);
      v33 = (uint64_t *)(v1 + v32);
      v34 = *(_QWORD *)(v1 + v32);
      v35 = *(_QWORD *)(v1 + v32 + 8);
      v36 = v34 == v29 && v35 == v31;
      if (v36 || (_stringCompareWithSmolCheck(_:_:expecting:)(v34, *(_QWORD *)(v1 + v32 + 8), v29, v31, 0) & 1) != 0)
      {
        swift_bridgeObjectRelease(v31);
      }
      else
      {
        swift_bridgeObjectRelease(v35);
        *v33 = v29;
        v33[1] = v31;
      }
    }
    v37 = objc_msgSend(a1, "manufacturer");
    if (v37)
    {
      v38 = v37;
      v39 = static String._unconditionallyBridgeFromObjectiveC(_:)(v37);
      v41 = v40;

      v42 = *(int *)(type metadata accessor for DeviceRecord(0) + 36);
      v43 = (uint64_t *)(v1 + v42);
      v44 = *(_QWORD *)(v1 + v42);
      v45 = *(_QWORD *)(v1 + v42 + 8);
      if (v44 == v39 && v45 == v41
        || (_stringCompareWithSmolCheck(_:_:expecting:)(v44, *(_QWORD *)(v1 + v42 + 8), v39, v41, 0) & 1) != 0)
      {
        swift_bridgeObjectRelease(v41);
      }
      else
      {
        swift_bridgeObjectRelease(v45);
        *v43 = v39;
        v43[1] = v41;
      }
    }
    v46 = objc_msgSend(a1, "productID");
    if (v46)
    {
      v47 = v46;
      v48 = static String._unconditionallyBridgeFromObjectiveC(_:)(v46);
      v50 = v49;

      v51 = *(int *)(type metadata accessor for DeviceRecord(0) + 40);
      v52 = (uint64_t *)(v1 + v51);
      v53 = *(_QWORD *)(v1 + v51);
      v54 = *(_QWORD *)(v1 + v51 + 8);
      if (v53 == v48 && v54 == v50
        || (_stringCompareWithSmolCheck(_:_:expecting:)(v53, *(_QWORD *)(v1 + v51 + 8), v48, v50, 0) & 1) != 0)
      {
        swift_bridgeObjectRelease(v50);
      }
      else
      {
        swift_bridgeObjectRelease(v54);
        *v52 = v48;
        v52[1] = v50;
      }
    }
    v55 = objc_msgSend(a1, "vendorID");
    if (v55)
    {
      v56 = v55;
      v57 = static String._unconditionallyBridgeFromObjectiveC(_:)(v55);
      v59 = v58;

      v60 = *(int *)(type metadata accessor for DeviceRecord(0) + 44);
      v61 = (uint64_t *)(v1 + v60);
      v62 = *(_QWORD *)(v1 + v60);
      v63 = *(_QWORD *)(v1 + v60 + 8);
      if (v62 == v57 && v63 == v59
        || (_stringCompareWithSmolCheck(_:_:expecting:)(v62, *(_QWORD *)(v1 + v60 + 8), v57, v59, 0) & 1) != 0)
      {
        v55 = (id)swift_bridgeObjectRelease(v59);
      }
      else
      {
        v55 = (id)swift_bridgeObjectRelease(v63);
        *v61 = v57;
        v61[1] = v59;
      }
    }
    static Date.now.getter(v55);
    v64 = type metadata accessor for DeviceRecord(0);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v4 + 40))(v1 + *(int *)(v64 + 48), v6, v3);
  }
  else
  {
    v17 = static os_log_type_t.info.getter();
    if (qword_1002101E0 != -1)
      swift_once(&qword_1002101E0, sub_1001687B0);
    v18 = qword_100218DE8;
    v19 = sub_1000A0980((uint64_t *)&unk_1002103C0);
    v20 = swift_allocObject(v19, 72, 7);
    *(_OWORD *)(v20 + 16) = xmmword_100184870;
    v21 = a1;
    v22 = objc_msgSend(v21, "description");
    v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
    v25 = v24;

    *(_QWORD *)(v20 + 56) = &type metadata for String;
    *(_QWORD *)(v20 + 64) = sub_1000A0DF4();
    *(_QWORD *)(v20 + 32) = v23;
    *(_QWORD *)(v20 + 40) = v25;
    os_log(_:dso:log:_:_:)(v17, &_mh_execute_header, v18, "No change in updated device record: %@", 38, 2, v20);
    return swift_bridgeObjectRelease(v20);
  }
}

uint64_t sub_10009F15C(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  int *v27;
  id v28;
  id v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  char v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  id v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  id v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  id v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  id v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  id v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  id v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  id v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  id v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  char v95;
  uint64_t v96;
  char v98;
  uint64_t v99;
  char v100;
  uint64_t v101;
  uint64_t v102;
  char v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;

  v2 = v1;
  v4 = type metadata accessor for DeviceRecord(0);
  __chkstk_darwin(v4);
  __chkstk_darwin(v5);
  v7 = (char *)&v104 - v6;
  __chkstk_darwin(v8);
  __chkstk_darwin(v9);
  __chkstk_darwin(v10);
  v108 = (char *)&v104 - v11;
  __chkstk_darwin(v12);
  v109 = (uint64_t)&v104 - v13;
  __chkstk_darwin(v14);
  v16 = (char *)&v104 - v15;
  __chkstk_darwin(v17);
  v19 = (char *)&v104 - v18;
  __chkstk_darwin(v20);
  v26 = (char *)&v104 - v25;
  if (!a1)
  {
    v44 = 0;
    return v44 & 1;
  }
  v106 = v24;
  v107 = v23;
  v27 = v21;
  v105 = v22;
  v28 = a1;
  v29 = objc_msgSend(v28, "nickname");
  if (!v29)
  {
    sub_1000A0EB8(v2, (uint64_t)v26);
    goto LABEL_13;
  }
  v30 = v29;
  static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
  v32 = v31;

  swift_bridgeObjectRelease(v32);
  sub_1000A0EB8(v2, (uint64_t)v26);
  if (!v32)
  {
LABEL_13:
    sub_1000A0EFC((uint64_t)v26);
LABEL_14:
    v42 = (uint64_t)v7;
    sub_1000A0EB8(v2, (uint64_t)v19);
    v43 = v107;
    goto LABEL_15;
  }
  v33 = objc_msgSend(v28, "nickname");
  if (!v33)
  {
    sub_1000A0EFC((uint64_t)v26);
    sub_1000A0EB8(v2, (uint64_t)v19);
    v42 = (uint64_t)v7;
    v43 = v107;
LABEL_49:
    sub_1000A0EFC((uint64_t)v19);
LABEL_54:
    v56 = v109;
    sub_1000A0EB8(v2, v109);
LABEL_55:
    sub_1000A0EFC(v56);
LABEL_56:
    sub_1000A0EB8(v2, v43);
LABEL_57:
    sub_1000A0EFC(v43);
LABEL_58:
    sub_1000A0EB8(v2, v42);
LABEL_59:
    sub_1000A0EFC(v42);

    v44 = 1;
    return v44 & 1;
  }
  v34 = v33;
  v35 = static String._unconditionallyBridgeFromObjectiveC(_:)(v33);
  v37 = v36;

  v38 = &v26[v27[7]];
  v39 = *((_QWORD *)v38 + 1);
  if (v35 == *(_QWORD *)v38 && v37 == v39)
  {
    sub_1000A0EFC((uint64_t)v26);
    swift_bridgeObjectRelease(v37);
    goto LABEL_14;
  }
  v41 = _stringCompareWithSmolCheck(_:_:expecting:)(v35, v37, *(_QWORD *)v38, v39, 0);
  sub_1000A0EFC((uint64_t)v26);
  swift_bridgeObjectRelease(v37);
  sub_1000A0EB8(v2, (uint64_t)v19);
  v42 = (uint64_t)v7;
  v43 = v107;
  if ((v41 & 1) == 0)
    goto LABEL_49;
LABEL_15:
  v45 = objc_msgSend(v28, "manufacturer");
  if (!v45)
  {
    sub_1000A0EB8((uint64_t)v19, (uint64_t)v16);
    goto LABEL_22;
  }
  v46 = v45;
  static String._unconditionallyBridgeFromObjectiveC(_:)(v45);
  v48 = v47;

  swift_bridgeObjectRelease(v48);
  sub_1000A0EB8((uint64_t)v19, (uint64_t)v16);
  if (!v48)
  {
LABEL_22:
    sub_1000A0EFC((uint64_t)v16);
    sub_1000A0EFC((uint64_t)v19);
    goto LABEL_23;
  }
  v49 = objc_msgSend(v28, "manufacturer");
  if (!v49)
  {
    v96 = *(_QWORD *)&v16[v27[9] + 8];
    swift_bridgeObjectRetain(v96);
    sub_1000A0EFC((uint64_t)v16);
    sub_1000A0EFC((uint64_t)v19);
    swift_bridgeObjectRelease(v96);
    goto LABEL_54;
  }
  v50 = v49;
  v51 = static String._unconditionallyBridgeFromObjectiveC(_:)(v49);
  v53 = v52;

  v54 = &v16[v27[9]];
  v55 = *((_QWORD *)v54 + 1);
  if (v51 == *(_QWORD *)v54 && v53 == v55)
  {
    swift_bridgeObjectRetain(v53);
    sub_1000A0EFC((uint64_t)v16);
    sub_1000A0EFC((uint64_t)v19);
    swift_bridgeObjectRelease_n(v53, 2);
LABEL_23:
    v56 = v109;
    sub_1000A0EB8(v2, v109);
    v57 = (uint64_t)v108;
    goto LABEL_24;
  }
  v98 = _stringCompareWithSmolCheck(_:_:expecting:)(v51, v53, *(_QWORD *)v54, v55, 0);
  swift_bridgeObjectRetain(v53);
  sub_1000A0EFC((uint64_t)v16);
  sub_1000A0EFC((uint64_t)v19);
  swift_bridgeObjectRelease_n(v53, 2);
  v56 = v109;
  sub_1000A0EB8(v2, v109);
  v57 = (uint64_t)v108;
  if ((v98 & 1) == 0)
    goto LABEL_55;
LABEL_24:
  v58 = objc_msgSend(v28, "modelNumber");
  if (!v58)
  {
    sub_1000A0EB8(v56, v57);
    goto LABEL_31;
  }
  v59 = v58;
  static String._unconditionallyBridgeFromObjectiveC(_:)(v58);
  v61 = v60;

  swift_bridgeObjectRelease(v61);
  sub_1000A0EB8(v56, v57);
  if (!v61)
  {
LABEL_31:
    sub_1000A0EFC(v57);
    sub_1000A0EFC(v56);
    goto LABEL_32;
  }
  v62 = objc_msgSend(v28, "modelNumber");
  if (!v62)
  {
    v99 = *(_QWORD *)(v57 + v27[8] + 8);
    swift_bridgeObjectRetain(v99);
    sub_1000A0EFC(v57);
    sub_1000A0EFC(v56);
    swift_bridgeObjectRelease(v99);
    goto LABEL_56;
  }
  v63 = v62;
  v64 = static String._unconditionallyBridgeFromObjectiveC(_:)(v62);
  v66 = v65;

  v67 = (_QWORD *)(v57 + v27[8]);
  v68 = v67[1];
  if (v64 == *v67 && v66 == v68)
  {
    swift_bridgeObjectRetain(v66);
    sub_1000A0EFC(v57);
    sub_1000A0EFC(v56);
    swift_bridgeObjectRelease_n(v66, 2);
LABEL_32:
    sub_1000A0EB8(v2, v43);
    goto LABEL_33;
  }
  v100 = _stringCompareWithSmolCheck(_:_:expecting:)(v64, v66, *v67, v68, 0);
  swift_bridgeObjectRetain(v66);
  sub_1000A0EFC(v57);
  sub_1000A0EFC(v56);
  swift_bridgeObjectRelease_n(v66, 2);
  sub_1000A0EB8(v2, v43);
  if ((v100 & 1) == 0)
    goto LABEL_57;
LABEL_33:
  v69 = objc_msgSend(v28, "productID");
  if (!v69)
  {
    v73 = v106;
    sub_1000A0EB8(v43, v106);
    goto LABEL_40;
  }
  v70 = v69;
  static String._unconditionallyBridgeFromObjectiveC(_:)(v69);
  v72 = v71;

  swift_bridgeObjectRelease(v72);
  v73 = v106;
  sub_1000A0EB8(v43, v106);
  if (!v72)
  {
LABEL_40:
    sub_1000A0EFC(v73);
    sub_1000A0EFC(v43);
    goto LABEL_41;
  }
  v74 = objc_msgSend(v28, "productID");
  if (!v74)
  {
    v101 = v73;
    v102 = *(_QWORD *)(v73 + v27[10] + 8);
    swift_bridgeObjectRetain(v102);
    sub_1000A0EFC(v101);
    sub_1000A0EFC(v43);
    swift_bridgeObjectRelease(v102);
    goto LABEL_58;
  }
  v75 = v74;
  v76 = v73;
  v77 = static String._unconditionallyBridgeFromObjectiveC(_:)(v74);
  v79 = v78;

  v80 = (_QWORD *)(v76 + v27[10]);
  v81 = v80[1];
  if (v77 == *v80 && v79 == v81)
  {
    swift_bridgeObjectRetain(v79);
    sub_1000A0EFC(v106);
    sub_1000A0EFC(v43);
    swift_bridgeObjectRelease_n(v79, 2);
LABEL_41:
    sub_1000A0EB8(v2, v42);
    goto LABEL_42;
  }
  v103 = _stringCompareWithSmolCheck(_:_:expecting:)(v77, v79, *v80, v81, 0);
  swift_bridgeObjectRetain(v79);
  sub_1000A0EFC(v106);
  sub_1000A0EFC(v43);
  swift_bridgeObjectRelease_n(v79, 2);
  sub_1000A0EB8(v2, v42);
  if ((v103 & 1) == 0)
    goto LABEL_59;
LABEL_42:
  v82 = objc_msgSend(v28, "vendorID");
  if (!v82)
  {
    v86 = v105;
    sub_1000A0EB8(v42, v105);
    goto LABEL_51;
  }
  v83 = v82;
  static String._unconditionallyBridgeFromObjectiveC(_:)(v82);
  v85 = v84;

  swift_bridgeObjectRelease(v85);
  v86 = v105;
  sub_1000A0EB8(v42, v105);
  if (!v85)
  {
LABEL_51:

    sub_1000A0EFC(v86);
    sub_1000A0EFC(v42);
    v44 = 0;
    return v44 & 1;
  }
  v87 = objc_msgSend(v28, "vendorID");
  if (v87)
  {
    v88 = v87;
    v89 = v86;
    v90 = static String._unconditionallyBridgeFromObjectiveC(_:)(v87);
    v92 = v91;

    v93 = (_QWORD *)(v89 + v27[11]);
    v94 = v93[1];
    if (v90 == *v93 && v92 == v94)
      v95 = 1;
    else
      v95 = _stringCompareWithSmolCheck(_:_:expecting:)(v90, v92, *v93, v94, 0);
    swift_bridgeObjectRetain(v92);

    sub_1000A0EFC(v105);
    sub_1000A0EFC(v42);
    swift_bridgeObjectRelease(v92);
  }
  else
  {
    v92 = *(_QWORD *)(v86 + v27[11] + 8);
    swift_bridgeObjectRetain(v92);

    sub_1000A0EFC(v86);
    sub_1000A0EFC(v42);
    v95 = 0;
  }
  swift_bridgeObjectRelease(v92);
  v44 = v95 ^ 1;
  return v44 & 1;
}

uint64_t sub_10009F9B8(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  unint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v2 = v1;
  v4 = *v1;
  v5 = v2[1];
  sub_1000A0E74(v4, v5);
  Data.hash(into:)(a1, v4, v5);
  sub_1000A103C(v4, v5);
  v6 = (int *)type metadata accessor for DeviceRecord(0);
  v7 = type metadata accessor for UUID(0);
  v8 = sub_1000A0940((unint64_t *)&unk_100210620, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(a1, v7, v8);
  v9 = (uint64_t *)((char *)v2 + v6[6]);
  v10 = *v9;
  v11 = v9[1];
  swift_bridgeObjectRetain(v11);
  String.hash(into:)(a1, v10, v11);
  swift_bridgeObjectRelease(v11);
  v12 = (uint64_t *)((char *)v2 + v6[7]);
  v13 = *v12;
  v14 = v12[1];
  swift_bridgeObjectRetain(v14);
  String.hash(into:)(a1, v13, v14);
  swift_bridgeObjectRelease(v14);
  v15 = (uint64_t *)((char *)v2 + v6[8]);
  v16 = *v15;
  v17 = v15[1];
  swift_bridgeObjectRetain(v17);
  String.hash(into:)(a1, v16, v17);
  swift_bridgeObjectRelease(v17);
  v18 = (uint64_t *)((char *)v2 + v6[9]);
  v19 = *v18;
  v20 = v18[1];
  swift_bridgeObjectRetain(v20);
  String.hash(into:)(a1, v19, v20);
  swift_bridgeObjectRelease(v20);
  v21 = (uint64_t *)((char *)v2 + v6[10]);
  v22 = *v21;
  v23 = v21[1];
  swift_bridgeObjectRetain(v23);
  String.hash(into:)(a1, v22, v23);
  swift_bridgeObjectRelease(v23);
  v24 = (uint64_t *)((char *)v2 + v6[11]);
  v25 = *v24;
  v26 = v24[1];
  swift_bridgeObjectRetain(v26);
  String.hash(into:)(a1, v25, v26);
  swift_bridgeObjectRelease(v26);
  v27 = type metadata accessor for Date(0);
  v28 = sub_1000A0940(&qword_100210EC0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  return dispatch thunk of Hashable.hash(into:)(a1, v27, v28);
}

uint64_t sub_10009FBAC(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10009FBEC + 4 * byte_100184880[a1]))(0x74654D64756F6C63, 0xED00006174616461);
}

uint64_t sub_10009FBEC()
{
  return 0x696669746E656469;
}

unint64_t sub_10009FC08()
{
  return 0xD000000000000010;
}

Swift::Int sub_10009FCBC()
{
  unsigned __int8 *v0;
  Swift::UInt v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3, 0);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

Swift::Int sub_10009FD00(uint64_t a1)
{
  unsigned __int8 *v1;
  Swift::UInt v2;
  _QWORD v4[9];

  v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t sub_10009FD40()
{
  unsigned __int8 *v0;

  return sub_10009FBAC(*v0);
}

uint64_t sub_10009FD48@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1000A25AC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10009FD6C()
{
  return 0;
}

void sub_10009FD78(_BYTE *a1@<X8>)
{
  *a1 = 9;
}

uint64_t sub_10009FD84(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000A20FC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10009FDAC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000A20FC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10009FDD4(_QWORD *a1)
{
  __int128 *v1;
  uint64_t v2;
  __int128 *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  char v40;
  __int128 v41;

  v3 = v1;
  v5 = sub_1000A0980((uint64_t *)&unk_1002105D0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_1000A20D8(a1, v9);
  v11 = sub_1000A20FC();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for DeviceRecord.CodingKeys, &type metadata for DeviceRecord.CodingKeys, v11, v9, v10);
  v41 = *v3;
  v40 = 0;
  v12 = sub_1000A21A4();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v41, &v40, v5, &type metadata for Data, v12);
  if (!v2)
  {
    v13 = (int *)type metadata accessor for DeviceRecord(0);
    v14 = (char *)v3 + v13[5];
    LOBYTE(v41) = 1;
    v15 = type metadata accessor for UUID(0);
    v16 = sub_1000A0940((unint64_t *)&unk_1002105E0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v14, &v41, v5, v15, v16);
    v17 = (uint64_t *)((char *)v3 + v13[6]);
    v18 = *v17;
    v19 = v17[1];
    LOBYTE(v41) = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v18, v19, &v41, v5);
    v20 = (uint64_t *)((char *)v3 + v13[7]);
    v21 = *v20;
    v22 = v20[1];
    LOBYTE(v41) = 3;
    KeyedEncodingContainer.encode(_:forKey:)(v21, v22, &v41, v5);
    v23 = (uint64_t *)((char *)v3 + v13[8]);
    v24 = *v23;
    v25 = v23[1];
    LOBYTE(v41) = 4;
    KeyedEncodingContainer.encode(_:forKey:)(v24, v25, &v41, v5);
    v26 = (uint64_t *)((char *)v3 + v13[9]);
    v27 = *v26;
    v28 = v26[1];
    LOBYTE(v41) = 5;
    KeyedEncodingContainer.encode(_:forKey:)(v27, v28, &v41, v5);
    v29 = (uint64_t *)((char *)v3 + v13[10]);
    v30 = *v29;
    v31 = v29[1];
    LOBYTE(v41) = 6;
    KeyedEncodingContainer.encode(_:forKey:)(v30, v31, &v41, v5);
    v32 = (uint64_t *)((char *)v3 + v13[11]);
    v33 = *v32;
    v34 = v32[1];
    LOBYTE(v41) = 7;
    KeyedEncodingContainer.encode(_:forKey:)(v33, v34, &v41, v5);
    v35 = (char *)v3 + v13[12];
    LOBYTE(v41) = 8;
    v36 = type metadata accessor for Date(0);
    v37 = sub_1000A0940((unint64_t *)&unk_100210EB0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v35, &v41, v5, v36, v37);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1000A00C4()
{
  return 0x6552656369766544;
}

unint64_t sub_1000A00E4()
{
  return 0xD00000000000001ELL;
}

uint64_t sub_1000A0100()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)v0;
  sub_1000A0E74(*(_QWORD *)v0, *(_QWORD *)(v0 + 8));
  return v1;
}

uint64_t sub_1000A0130@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 48);
  v5 = type metadata accessor for Date(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

Swift::Int sub_1000A0174()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1, 0);
  sub_10009F9B8((uint64_t)v1);
  return Hasher._finalize()();
}

Swift::Int sub_1000A01B4(uint64_t a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, a1);
  sub_10009F9B8((uint64_t)v2);
  return Hasher._finalize()();
}

uint64_t sub_1000A01F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 20);
  v5 = type metadata accessor for UUID(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t sub_1000A0234@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10009D3A4(a1, a2);
}

uint64_t sub_1000A0248(_QWORD *a1)
{
  return sub_10009FDD4(a1);
}

uint64_t variable initialization expression of BTUserTransaction.name()
{
  return 0;
}

uint64_t variable initialization expression of BTUserTransaction.underlyingActivity()
{
  return 0;
}

void *variable initialization expression of DarwinNotificationManager.helpers()
{
  return &_swiftEmptyArrayStorage;
}

double variable initialization expression of LocalDispatchTimer.millisecondsPerSecond()
{
  return 1000.0;
}

void type metadata accessor for CFString(uint64_t a1)
{
  sub_1000A1F60(a1, &qword_100210330, (uint64_t)&unk_1001E5980);
}

void type metadata accessor for CKAccountStatus(uint64_t a1)
{
  sub_1000A1F60(a1, &qword_100210338, (uint64_t)&unk_1001E59B0);
}

__n128 sub_1000A02B4(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t sub_1000A02C4(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_1000A02E4(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 16) = v3;
  return result;
}

void type metadata accessor for os_activity_scope_state_s(uint64_t a1)
{
  sub_1000A1F60(a1, &qword_100210340, (uint64_t)&unk_1001E5A28);
}

uint64_t sub_1000A0320(uint64_t a1, uint64_t a2)
{
  return sub_1000A0C80(a1, a2, (uint64_t (*)(uint64_t))&String._bridgeToObjectiveC());
}

uint64_t sub_1000A0338(uint64_t a1, uint64_t a2)
{
  return sub_1000A0C80(a1, a2, (uint64_t (*)(uint64_t))&String.hashValue.getter);
}

void sub_1000A034C(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

_QWORD *sub_1000A0354@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 & *result;
  return result;
}

BOOL sub_1000A0368(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = *v2 & *a2;
  if (v4 != *a2)
    *v2 |= v3;
  *a1 = v3;
  return v4 != v3;
}

_QWORD *sub_1000A0398(_QWORD *result)
{
  _QWORD *v1;

  *v1 |= *result;
  return result;
}

_QWORD *sub_1000A03AC(_QWORD *result)
{
  _QWORD *v1;

  *v1 &= *result;
  return result;
}

uint64_t sub_1000A03C0(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1000A0940(&qword_100210558, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_100184F78);
  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_1000A0400(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1000A0940(&qword_100210558, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_100184F78);
  return Error<>._code.getter(a1, v2);
}

uint64_t sub_1000A0440(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1000A0940(&qword_100210590, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_100185228);
  return _BridgedStoredNSError._getEmbeddedNSError()(a1, v2);
}

id sub_1000A0480()
{
  id *v0;

  return *v0;
}

uint64_t sub_1000A0488@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

_QWORD *sub_1000A0490@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *result;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

void sub_1000A04A0(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

uint64_t sub_1000A04AC(uint64_t a1, id *a2)
{
  uint64_t result;
  uint64_t v5;
  NSString v6;
  uint64_t v7;
  uint64_t v8;

  v7 = 0;
  v8 = 0;
  result = static String._forceBridgeFromObjectiveC(_:result:)(a1, &v7);
  v5 = v8;
  if (v8)
  {
    v6 = String._bridgeToObjectiveC()();
    result = swift_bridgeObjectRelease(v5);
  }
  else
  {
    v6 = 0;
  }
  *a2 = v6;
  return result;
}

uint64_t sub_1000A0520(uint64_t a1, id *a2)
{
  char v4;
  uint64_t v5;
  NSString v6;
  uint64_t v8;
  uint64_t v9;

  v8 = 0;
  v9 = 0;
  v4 = static String._conditionallyBridgeFromObjectiveC(_:result:)(a1, &v8);
  v5 = v9;
  if (v9)
  {
    v6 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v5);
  }
  else
  {
    v6 = 0;
  }
  *a2 = v6;
  return v4 & 1;
}

uint64_t sub_1000A059C@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  NSString v4;
  uint64_t result;

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  v3 = v2;
  v4 = String._bridgeToObjectiveC()();
  result = swift_bridgeObjectRelease(v3);
  *a1 = v4;
  return result;
}

uint64_t sub_1000A05DC(uint64_t a1)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_1001849EC, a1);
  return _CFObject.hashValue.getter(a1, WitnessTable);
}

uint64_t sub_1000A0618(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_1001849EC, a2);
  return _CFObject.hash(into:)(a1, a2, WitnessTable);
}

Swift::Int sub_1000A0660(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable;
  _QWORD v5[9];

  Hasher.init(_seed:)(v5, a1);
  WitnessTable = swift_getWitnessTable(&unk_1001849EC, a2);
  _CFObject.hash(into:)(v5, a2, WitnessTable);
  return Hasher._finalize()();
}

_QWORD *sub_1000A06BC@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t sub_1000A06C8()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(CKErrorDomain);
}

uint64_t sub_1000A06D8(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1000A0940(&qword_100210590, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_100185228);
  return _BridgedStoredNSError.errorCode.getter(a1, v2);
}

uint64_t sub_1000A0718(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1000A0940(&qword_100210590, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_100185228);
  return _BridgedStoredNSError.errorUserInfo.getter(a1, v2);
}

uint64_t sub_1000A0758(void *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000A0940(&qword_100210590, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_100185228);
  return _BridgedStoredNSError.init(_bridgedNSError:)(a1, a2, v4);
}

uint64_t sub_1000A07BC()
{
  id *v0;
  id v1;
  uint64_t v2;

  v1 = *v0;
  v2 = NSObject.hashValue.getter();

  return v2;
}

uint64_t sub_1000A07F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000A0940(&qword_100210590, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_100185228);
  return _BridgedStoredNSError.hash(into:)(a1, a2, v4);
}

Swift::Int sub_1000A0840(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD v7[10];

  v7[9] = *v3;
  Hasher.init(_seed:)(v7, a1);
  dispatch thunk of Hashable.hash(into:)(v7, a2, a3);
  return Hasher._finalize()();
}

uint64_t sub_1000A089C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t WitnessTable;

  v4 = *a1;
  v5 = *a2;
  WitnessTable = swift_getWitnessTable(&unk_1001849EC, a3);
  return static _CFObject.== infix(_:_:)(v4, v5, a3, WitnessTable);
}

uint64_t sub_1000A08E8()
{
  return sub_1000A0940(&qword_100210348, (uint64_t (*)(uint64_t))type metadata accessor for CFString, (uint64_t)&unk_10018497C);
}

uint64_t sub_1000A0914()
{
  return sub_1000A0940((unint64_t *)&unk_100210350, (uint64_t (*)(uint64_t))type metadata accessor for CFString, (uint64_t)&unk_1001849A8);
}

uint64_t sub_1000A0940(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000A0980(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = swift_getTypeByMangledNameInContext2((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t *sub_1000A09C0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 - 8);
  if ((*(_DWORD *)(v3 + 80) & 0x20000) != 0)
  {
    v4 = swift_slowAlloc(*(_QWORD *)(v3 + 64), *(_DWORD *)(v3 + 80));
    *a2 = v4;
    return (uint64_t *)v4;
  }
  return a2;
}

uint64_t sub_1000A0A00(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

uint64_t sub_1000A0A1C@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t result;
  uint64_t v4;

  result = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1000A0A44(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_1000A0940(&qword_100210610, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_100185338);
  v3 = sub_1000A0940(&qword_100210618, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_100184CD0);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_1000A0AC8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_1000A0940(&qword_100210600, (uint64_t (*)(uint64_t))type metadata accessor for FileProtectionType, (uint64_t)&unk_100184E44);
  v3 = sub_1000A0940(&qword_100210608, (uint64_t (*)(uint64_t))type metadata accessor for FileProtectionType, (uint64_t)&unk_100184DE4);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_1000A0B4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_1000A0940(&qword_100210590, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_100185228);
  return static _BridgedStoredNSError.== infix(_:_:)(a1, a2, a3, v6);
}

BOOL sub_1000A0BA4(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

uint64_t sub_1000A0BB8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  NSString v4;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = String._bridgeToObjectiveC()();
  result = swift_bridgeObjectRelease(v3);
  *a2 = v4;
  return result;
}

uint64_t sub_1000A0BFC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_1000A0940((unint64_t *)&qword_1002105F0, (uint64_t (*)(uint64_t))type metadata accessor for NSKeyValueChangeKey, (uint64_t)&unk_10018517C);
  v3 = sub_1000A0940(&qword_1002105F8, (uint64_t (*)(uint64_t))type metadata accessor for NSKeyValueChangeKey, (uint64_t)&unk_10018508C);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_1000A0C80(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v3);
  v7 = v6;
  v8 = a3(v5);
  swift_bridgeObjectRelease(v7);
  return v8;
}

uint64_t sub_1000A0CBC(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  v5 = v4;
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_1000A0CFC(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::Int v6;
  _QWORD v8[9];

  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  v5 = v4;
  Hasher.init(_seed:)(v8, a1);
  String.hash(into:)(v8, v3, v5);
  v6 = Hasher._finalize()();
  swift_bridgeObjectRelease(v5);
  return v6;
}

uint64_t sub_1000A0D6C(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  char v10;

  v2 = *a2;
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*a1);
  v5 = v4;
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  if (v3 == v6 && v5 == v7)
  {
    v10 = 1;
    v9 = v5;
  }
  else
  {
    v9 = v7;
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0);
  }
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v9);
  return v10 & 1;
}

unint64_t sub_1000A0DF4()
{
  unint64_t result;

  result = qword_100210860;
  if (!qword_100210860)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_100210860);
  }
  return result;
}

uint64_t type metadata accessor for DeviceRecord(uint64_t a1)
{
  uint64_t result;

  result = qword_100210490;
  if (!qword_100210490)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for DeviceRecord);
  return result;
}

uint64_t sub_1000A0E74(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    ((void (*)(void))swift_retain)();
  }
  return swift_retain(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

uint64_t sub_1000A0EB8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for DeviceRecord(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000A0EFC(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for DeviceRecord(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000A0F38(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000A0980((uint64_t *)&unk_1002103D0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_1000A0F80()
{
  unint64_t result;

  result = qword_1002103E8;
  if (!qword_1002103E8)
  {
    result = swift_getWitnessTable(&unk_1001851C0, &type metadata for DeviceRecord.DeviceRecordError);
    atomic_store(result, (unint64_t *)&qword_1002103E8);
  }
  return result;
}

unint64_t sub_1000A0FC4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002103F0;
  if (!qword_1002103F0)
  {
    v1 = objc_opt_self(CKRecord);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1002103F0);
  }
  return result;
}

uint64_t sub_1000A1000(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = sub_1000A0980(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1000A103C(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    ((void (*)(void))swift_release)();
  }
  return swift_release(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

void type metadata accessor for Scope(uint64_t a1)
{
  sub_1000A1F60(a1, &qword_100210408, (uint64_t)&unk_1001E5A50);
}

void type metadata accessor for NotificationType(uint64_t a1)
{
  sub_1000A1F60(a1, &qword_100210410, (uint64_t)&unk_1001E5A70);
}

void type metadata accessor for NSKeyValueChangeKey(uint64_t a1)
{
  sub_1000A1F60(a1, &qword_100210418, (uint64_t)&unk_1001E5A90);
}

_BYTE *initializeBufferWithCopyOfBuffer for DeviceRecord.DeviceRecordError(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for DeviceRecord.DeviceRecordError(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFD)
    goto LABEL_17;
  if (a2 + 3 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 3) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 3;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 3;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 3;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 4;
  v8 = v6 - 4;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for DeviceRecord.DeviceRecordError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1000A11A4 + 4 * byte_10018488E[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1000A11D8 + 4 * byte_100184889[v4]))();
}

uint64_t sub_1000A11D8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000A11E0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000A11E8);
  return result;
}

uint64_t sub_1000A11F4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000A11FCLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1000A1200(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000A1208(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000A1214(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_1000A1220(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for DeviceRecord.DeviceRecordError()
{
  return &type metadata for DeviceRecord.DeviceRecordError;
}

void type metadata accessor for CKError(uint64_t a1)
{
  sub_1000A1F60(a1, &qword_100210420, (uint64_t)&unk_1001E5B48);
}

void type metadata accessor for FileProtectionType(uint64_t a1)
{
  sub_1000A1F60(a1, &qword_100210428, (uint64_t)&unk_1001E5B70);
}

void type metadata accessor for FileAttributeKey(uint64_t a1)
{
  sub_1000A1F60(a1, &qword_100210430, (uint64_t)&unk_1001E5B98);
}

uint64_t *sub_1000A1274(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  void (*v41)(char *, char *, uint64_t);
  uint64_t v42;
  char *v44;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v42 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v42 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v42);
  }
  else
  {
    v7 = *a2;
    v8 = a2[1];
    sub_1000A0E74(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    v9 = a3[5];
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for UUID(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
    v13 = a3[6];
    v14 = a3[7];
    v15 = (uint64_t *)((char *)a1 + v13);
    v16 = (uint64_t *)((char *)a2 + v13);
    v17 = v16[1];
    *v15 = *v16;
    v15[1] = v17;
    v18 = (uint64_t *)((char *)a1 + v14);
    v19 = (uint64_t *)((char *)a2 + v14);
    v20 = v19[1];
    *v18 = *v19;
    v18[1] = v20;
    v21 = a3[8];
    v22 = a3[9];
    v23 = (uint64_t *)((char *)a1 + v21);
    v24 = (uint64_t *)((char *)a2 + v21);
    v25 = v24[1];
    *v23 = *v24;
    v23[1] = v25;
    v26 = (uint64_t *)((char *)a1 + v22);
    v27 = (uint64_t *)((char *)a2 + v22);
    v28 = v27[1];
    *v26 = *v27;
    v26[1] = v28;
    v29 = a3[10];
    v30 = a3[11];
    v31 = (uint64_t *)((char *)a1 + v29);
    v32 = (uint64_t *)((char *)a2 + v29);
    v33 = v32[1];
    *v31 = *v32;
    v31[1] = v33;
    v34 = (uint64_t *)((char *)a1 + v30);
    v35 = (uint64_t *)((char *)a2 + v30);
    v36 = *v35;
    v37 = v35[1];
    v38 = a3[12];
    v44 = (char *)a2 + v38;
    v39 = (char *)a1 + v38;
    *v34 = v36;
    v34[1] = v37;
    v40 = type metadata accessor for Date(0);
    v41 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v40 - 8) + 16);
    swift_bridgeObjectRetain(v17);
    swift_bridgeObjectRetain(v20);
    swift_bridgeObjectRetain(v25);
    swift_bridgeObjectRetain(v28);
    swift_bridgeObjectRetain(v33);
    swift_bridgeObjectRetain(v37);
    v41(v39, v44, v40);
  }
  return a1;
}

uint64_t sub_1000A1400(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  sub_1000A103C(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  v4 = a1 + a2[5];
  v5 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[6] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[7] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[8] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[9] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[10] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[11] + 8));
  v6 = a1 + a2[12];
  v7 = type metadata accessor for Date(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
}

uint64_t *sub_1000A14D8(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  void (*v40)(char *, char *, uint64_t);
  char *v42;

  v6 = *a2;
  v7 = a2[1];
  sub_1000A0E74(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  v8 = a3[5];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for UUID(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
  v12 = a3[6];
  v13 = a3[7];
  v14 = (uint64_t *)((char *)a1 + v12);
  v15 = (uint64_t *)((char *)a2 + v12);
  v16 = v15[1];
  *v14 = *v15;
  v14[1] = v16;
  v17 = (uint64_t *)((char *)a1 + v13);
  v18 = (uint64_t *)((char *)a2 + v13);
  v19 = v18[1];
  *v17 = *v18;
  v17[1] = v19;
  v20 = a3[8];
  v21 = a3[9];
  v22 = (uint64_t *)((char *)a1 + v20);
  v23 = (uint64_t *)((char *)a2 + v20);
  v24 = v23[1];
  *v22 = *v23;
  v22[1] = v24;
  v25 = (uint64_t *)((char *)a1 + v21);
  v26 = (uint64_t *)((char *)a2 + v21);
  v27 = v26[1];
  *v25 = *v26;
  v25[1] = v27;
  v28 = a3[10];
  v29 = a3[11];
  v30 = (uint64_t *)((char *)a1 + v28);
  v31 = (uint64_t *)((char *)a2 + v28);
  v32 = v31[1];
  *v30 = *v31;
  v30[1] = v32;
  v33 = (uint64_t *)((char *)a1 + v29);
  v34 = (uint64_t *)((char *)a2 + v29);
  v35 = *v34;
  v36 = v34[1];
  v37 = a3[12];
  v42 = (char *)a2 + v37;
  v38 = (char *)a1 + v37;
  *v33 = v35;
  v33[1] = v36;
  v39 = type metadata accessor for Date(0);
  v40 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v39 - 8) + 16);
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRetain(v27);
  swift_bridgeObjectRetain(v32);
  swift_bridgeObjectRetain(v36);
  v40(v38, v42, v39);
  return a1;
}

uint64_t *sub_1000A1638(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;

  v6 = *a2;
  v7 = a2[1];
  sub_1000A0E74(*a2, v7);
  v8 = *a1;
  v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  sub_1000A103C(v8, v9);
  v10 = a3[5];
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for UUID(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 24))(v11, v12, v13);
  v14 = a3[6];
  v15 = (uint64_t *)((char *)a1 + v14);
  v16 = (uint64_t *)((char *)a2 + v14);
  *v15 = *v16;
  v17 = v16[1];
  v18 = v15[1];
  v15[1] = v17;
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRelease(v18);
  v19 = a3[7];
  v20 = (uint64_t *)((char *)a1 + v19);
  v21 = (uint64_t *)((char *)a2 + v19);
  *v20 = *v21;
  v22 = v21[1];
  v23 = v20[1];
  v20[1] = v22;
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRelease(v23);
  v24 = a3[8];
  v25 = (uint64_t *)((char *)a1 + v24);
  v26 = (uint64_t *)((char *)a2 + v24);
  *v25 = *v26;
  v27 = v26[1];
  v28 = v25[1];
  v25[1] = v27;
  swift_bridgeObjectRetain(v27);
  swift_bridgeObjectRelease(v28);
  v29 = a3[9];
  v30 = (uint64_t *)((char *)a1 + v29);
  v31 = (uint64_t *)((char *)a2 + v29);
  *v30 = *v31;
  v32 = v31[1];
  v33 = v30[1];
  v30[1] = v32;
  swift_bridgeObjectRetain(v32);
  swift_bridgeObjectRelease(v33);
  v34 = a3[10];
  v35 = (uint64_t *)((char *)a1 + v34);
  v36 = (uint64_t *)((char *)a2 + v34);
  *v35 = *v36;
  v37 = v36[1];
  v38 = v35[1];
  v35[1] = v37;
  swift_bridgeObjectRetain(v37);
  swift_bridgeObjectRelease(v38);
  v39 = a3[11];
  v40 = (uint64_t *)((char *)a1 + v39);
  v41 = (uint64_t *)((char *)a2 + v39);
  *v40 = *v41;
  v42 = v41[1];
  v43 = v40[1];
  v40[1] = v42;
  swift_bridgeObjectRetain(v42);
  swift_bridgeObjectRelease(v43);
  v44 = a3[12];
  v45 = (char *)a1 + v44;
  v46 = (char *)a2 + v44;
  v47 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v47 - 8) + 24))(v45, v46, v47);
  return a1;
}

_OWORD *sub_1000A17EC(_OWORD *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UUID(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = a3[7];
  *(_OWORD *)((char *)a1 + a3[6]) = *(_OWORD *)((char *)a2 + a3[6]);
  *(_OWORD *)((char *)a1 + v10) = *(_OWORD *)((char *)a2 + v10);
  v11 = a3[9];
  *(_OWORD *)((char *)a1 + a3[8]) = *(_OWORD *)((char *)a2 + a3[8]);
  *(_OWORD *)((char *)a1 + v11) = *(_OWORD *)((char *)a2 + v11);
  v12 = a3[11];
  *(_OWORD *)((char *)a1 + a3[10]) = *(_OWORD *)((char *)a2 + a3[10]);
  *(_OWORD *)((char *)a1 + v12) = *(_OWORD *)((char *)a2 + v12);
  v13 = a3[12];
  v14 = (char *)a1 + v13;
  v15 = (char *)a2 + v13;
  v16 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v14, v15, v16);
  return a1;
}

uint64_t *sub_1000A18C0(uint64_t *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;

  v6 = *a1;
  v7 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_1000A103C(v6, v7);
  v8 = a3[5];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for UUID(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  v12 = a3[6];
  v13 = (uint64_t *)((char *)a1 + v12);
  v14 = (uint64_t *)((char *)a2 + v12);
  v16 = *v14;
  v15 = v14[1];
  v17 = v13[1];
  *v13 = v16;
  v13[1] = v15;
  swift_bridgeObjectRelease(v17);
  v18 = a3[7];
  v19 = (uint64_t *)((char *)a1 + v18);
  v20 = (uint64_t *)((char *)a2 + v18);
  v22 = *v20;
  v21 = v20[1];
  v23 = v19[1];
  *v19 = v22;
  v19[1] = v21;
  swift_bridgeObjectRelease(v23);
  v24 = a3[8];
  v25 = (uint64_t *)((char *)a1 + v24);
  v26 = (uint64_t *)((char *)a2 + v24);
  v28 = *v26;
  v27 = v26[1];
  v29 = v25[1];
  *v25 = v28;
  v25[1] = v27;
  swift_bridgeObjectRelease(v29);
  v30 = a3[9];
  v31 = (uint64_t *)((char *)a1 + v30);
  v32 = (uint64_t *)((char *)a2 + v30);
  v34 = *v32;
  v33 = v32[1];
  v35 = v31[1];
  *v31 = v34;
  v31[1] = v33;
  swift_bridgeObjectRelease(v35);
  v36 = a3[10];
  v37 = (uint64_t *)((char *)a1 + v36);
  v38 = (uint64_t *)((char *)a2 + v36);
  v40 = *v38;
  v39 = v38[1];
  v41 = v37[1];
  *v37 = v40;
  v37[1] = v39;
  swift_bridgeObjectRelease(v41);
  v42 = a3[11];
  v43 = (uint64_t *)((char *)a1 + v42);
  v44 = (uint64_t *)((char *)a2 + v42);
  v46 = *v44;
  v45 = v44[1];
  v47 = v43[1];
  *v43 = v46;
  v43[1] = v45;
  swift_bridgeObjectRelease(v47);
  v48 = a3[12];
  v49 = (char *)a1 + v48;
  v50 = (char *)a2 + v48;
  v51 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v51 - 8) + 40))(v49, v50, v51);
  return a1;
}

uint64_t sub_1000A1A0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000A1A18);
}

uint64_t sub_1000A1A18(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = a3[5];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    v8 = type metadata accessor for Date(0);
    v7 = *(_QWORD *)(v8 - 8);
    v9 = a3[12];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v10 = *(_QWORD *)(a1 + a3[6] + 8);
  if (v10 >= 0xFFFFFFFF)
    LODWORD(v10) = -1;
  return (v10 + 1);
}

uint64_t sub_1000A1AC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000A1ACC);
}

uint64_t sub_1000A1ACC(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = a4[5];
  }
  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(_QWORD *)(a1 + a4[6] + 8) = (a2 - 1);
      return result;
    }
    v10 = type metadata accessor for Date(0);
    v9 = *(_QWORD *)(v10 - 8);
    v11 = a4[12];
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
}

uint64_t sub_1000A1B70(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[9];

  v5[0] = &unk_100184B58;
  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v5[1] = *(_QWORD *)(result - 8) + 64;
    v5[2] = &unk_100184B70;
    v5[3] = &unk_100184B70;
    v5[4] = &unk_100184B70;
    v5[5] = &unk_100184B70;
    v5[6] = &unk_100184B70;
    v5[7] = &unk_100184B70;
    result = type metadata accessor for Date(319);
    if (v4 <= 0x3F)
    {
      v5[8] = *(_QWORD *)(result - 8) + 64;
      swift_initStructMetadata(a1, 256, 9, v5, a1 + 16);
      return 0;
    }
  }
  return result;
}

uint64_t sub_1000A1C14(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_1000A0940(&qword_1002121D0, type metadata accessor for DeviceRecord, (uint64_t)&unk_10018537C);
  result = sub_1000A0940(&qword_1002104F0, type metadata accessor for DeviceRecord, (uint64_t)&unk_100185200);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t sub_1000A1C70()
{
  return sub_1000A0940(&qword_1002104F8, type metadata accessor for DeviceRecord, (uint64_t)&unk_100184BF4);
}

uint64_t sub_1000A1C9C()
{
  return sub_1000A0940(&qword_100210500, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_100184C94);
}

uint64_t sub_1000A1CC8()
{
  return sub_1000A0940(&qword_100210508, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_100184C68);
}

uint64_t sub_1000A1CF4()
{
  return sub_1000A0940(&qword_100210510, (uint64_t (*)(uint64_t))type metadata accessor for FileProtectionType, (uint64_t)&unk_100184DA8);
}

uint64_t sub_1000A1D20()
{
  return sub_1000A0940(&qword_100210518, (uint64_t (*)(uint64_t))type metadata accessor for FileProtectionType, (uint64_t)&unk_100184D7C);
}

uint64_t sub_1000A1D4C()
{
  return sub_1000A0940(&qword_100210520, (uint64_t (*)(uint64_t))type metadata accessor for FileProtectionType, (uint64_t)&unk_100184E18);
}

uint64_t sub_1000A1D78()
{
  return sub_1000A0940(&qword_100210528, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_100184ED4);
}

uint64_t sub_1000A1DA4()
{
  return sub_1000A0940(&qword_100210530, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_100185138);
}

unint64_t sub_1000A1DD4()
{
  unint64_t result;

  result = qword_100210538;
  if (!qword_100210538)
  {
    result = swift_getWitnessTable(&unk_100184FFC, &type metadata for DeviceRecord.DeviceRecordError);
    atomic_store(result, (unint64_t *)&qword_100210538);
  }
  return result;
}

uint64_t sub_1000A1E18()
{
  return sub_1000A0940(&qword_100210540, (uint64_t (*)(uint64_t))type metadata accessor for NSKeyValueChangeKey, (uint64_t)&unk_100185050);
}

uint64_t sub_1000A1E44()
{
  return sub_1000A0940(&qword_100210548, (uint64_t (*)(uint64_t))type metadata accessor for NSKeyValueChangeKey, (uint64_t)&unk_100185024);
}

uint64_t sub_1000A1E70()
{
  return sub_1000A0940(&qword_100210550, (uint64_t (*)(uint64_t))type metadata accessor for NSKeyValueChangeKey, (uint64_t)&unk_1001850C0);
}

uint64_t sub_1000A1E9C()
{
  return sub_1000A0940(&qword_100210558, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_100184F78);
}

uint64_t sub_1000A1EC8()
{
  return sub_1000A0940(&qword_100210560, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_100184F44);
}

uint64_t sub_1000A1EF4()
{
  return sub_1000A0940(&qword_100210568, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_100184F00);
}

uint64_t sub_1000A1F20()
{
  return sub_1000A0940(&qword_100210570, (uint64_t (*)(uint64_t))type metadata accessor for Code, (uint64_t)&unk_1001852D0);
}

void type metadata accessor for Code(uint64_t a1)
{
  sub_1000A1F60(a1, &qword_100210630, (uint64_t)&unk_1001E5CD0);
}

void sub_1000A1F60(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  unint64_t ForeignTypeMetadata;
  uint64_t v5;

  if (!*a2)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata(0, a3);
    if (!v5)
      atomic_store(ForeignTypeMetadata, a2);
  }
}

uint64_t sub_1000A1FA4()
{
  return sub_1000A0940(&qword_100210578, (uint64_t (*)(uint64_t))type metadata accessor for Code, (uint64_t)&unk_100185294);
}

unint64_t sub_1000A1FD4()
{
  unint64_t result;

  result = qword_100210580;
  if (!qword_100210580)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Int, &type metadata for Int);
    atomic_store(result, (unint64_t *)&qword_100210580);
  }
  return result;
}

uint64_t sub_1000A2018()
{
  return sub_1000A0940(&qword_100210588, (uint64_t (*)(uint64_t))type metadata accessor for Code, (uint64_t)&unk_10018530C);
}

uint64_t sub_1000A2044()
{
  return sub_1000A0940(&qword_100210590, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_100185228);
}

uint64_t sub_1000A2070()
{
  return sub_1000A0940(&qword_100210598, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_100184D04);
}

uint64_t sub_1000A209C(uint64_t a1)
{
  uint64_t result;

  result = sub_1000A0940(&qword_1002105A0, type metadata accessor for DeviceRecord, (uint64_t)&unk_100184B88);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

_QWORD *sub_1000A20D8(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

unint64_t sub_1000A20FC()
{
  unint64_t result;

  result = qword_1002105B0;
  if (!qword_1002105B0)
  {
    result = swift_getWitnessTable(&unk_10018549C, &type metadata for DeviceRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002105B0);
  }
  return result;
}

uint64_t sub_1000A2140(_QWORD *a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1[3] - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release(*a1);
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

unint64_t sub_1000A2160()
{
  unint64_t result;

  result = qword_100210770;
  if (!qword_100210770)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store(result, (unint64_t *)&qword_100210770);
  }
  return result;
}

unint64_t sub_1000A21A4()
{
  unint64_t result;

  result = qword_1002107A0;
  if (!qword_1002107A0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store(result, (unint64_t *)&qword_1002107A0);
  }
  return result;
}

uint64_t sub_1000A21E8(uint64_t *a1, uint64_t a2)
{
  char v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;

  sub_1000D25EC(*a1, a1[1]);
  if ((v4 & 1) == 0)
    return 0;
  v5 = (int *)type metadata accessor for DeviceRecord(0);
  if ((static UUID.== infix(_:_:)((char *)a1 + v5[5]) & 1) == 0)
    return 0;
  v6 = v5[6];
  v7 = *(uint64_t *)((char *)a1 + v6);
  v8 = *(uint64_t *)((char *)a1 + v6 + 8);
  v9 = (_QWORD *)(a2 + v6);
  v10 = v9[1];
  v11 = v7 == *v9 && v8 == v10;
  if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)(v7, v8, *v9, v10, 0) & 1) == 0)
    return 0;
  v12 = v5[7];
  v13 = *(uint64_t *)((char *)a1 + v12);
  v14 = *(uint64_t *)((char *)a1 + v12 + 8);
  v15 = (_QWORD *)(a2 + v12);
  v16 = v15[1];
  v17 = v13 == *v15 && v14 == v16;
  if (!v17 && (_stringCompareWithSmolCheck(_:_:expecting:)(v13, v14, *v15, v16, 0) & 1) == 0)
    return 0;
  v18 = v5[8];
  v19 = *(uint64_t *)((char *)a1 + v18);
  v20 = *(uint64_t *)((char *)a1 + v18 + 8);
  v21 = (_QWORD *)(a2 + v18);
  v22 = v21[1];
  v23 = v19 == *v21 && v20 == v22;
  if (!v23 && (_stringCompareWithSmolCheck(_:_:expecting:)(v19, v20, *v21, v22, 0) & 1) == 0)
    return 0;
  v24 = v5[9];
  v25 = *(uint64_t *)((char *)a1 + v24);
  v26 = *(uint64_t *)((char *)a1 + v24 + 8);
  v27 = (_QWORD *)(a2 + v24);
  v28 = v27[1];
  if ((v25 != *v27 || v26 != v28) && (_stringCompareWithSmolCheck(_:_:expecting:)(v25, v26, *v27, v28, 0) & 1) == 0)
    return 0;
  v29 = v5[10];
  v30 = *(uint64_t *)((char *)a1 + v29);
  v31 = *(uint64_t *)((char *)a1 + v29 + 8);
  v32 = (_QWORD *)(a2 + v29);
  v33 = v32[1];
  if ((v30 != *v32 || v31 != v33) && (_stringCompareWithSmolCheck(_:_:expecting:)(v30, v31, *v32, v33, 0) & 1) == 0)
    return 0;
  v34 = v5[11];
  v35 = *(uint64_t *)((char *)a1 + v34);
  v36 = *(uint64_t *)((char *)a1 + v34 + 8);
  v37 = (_QWORD *)(a2 + v34);
  v38 = v37[1];
  if (v35 == *v37 && v36 == v38)
    return static Date.== infix(_:_:)((char *)a1 + v5[12], a2 + v5[12]);
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(v35, v36, *v37, v38, 0) & 1) != 0)
    return static Date.== infix(_:_:)((char *)a1 + v5[12], a2 + v5[12]);
  else
    return 0;
}

uint64_t getEnumTagSinglePayload for DeviceRecord.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF8)
    goto LABEL_17;
  if (a2 + 8 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 8) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 8;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 8;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 8;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 9;
  v8 = v6 - 9;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for DeviceRecord.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 8 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 8) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF8)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF7)
    return ((uint64_t (*)(void))((char *)&loc_1000A2454 + 4 * byte_100184898[v4]))();
  *a1 = a2 + 8;
  return ((uint64_t (*)(void))((char *)sub_1000A2488 + 4 * byte_100184893[v4]))();
}

uint64_t sub_1000A2488(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000A2490(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000A2498);
  return result;
}

uint64_t sub_1000A24A4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000A24ACLL);
  *(_BYTE *)result = a2 + 8;
  return result;
}

uint64_t sub_1000A24B0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000A24B8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DeviceRecord.CodingKeys()
{
  return &type metadata for DeviceRecord.CodingKeys;
}

unint64_t sub_1000A24D8()
{
  unint64_t result;

  result = qword_100210638;
  if (!qword_100210638)
  {
    result = swift_getWitnessTable(&unk_100185474, &type metadata for DeviceRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100210638);
  }
  return result;
}

unint64_t sub_1000A2520()
{
  unint64_t result;

  result = qword_100210640;
  if (!qword_100210640)
  {
    result = swift_getWitnessTable(&unk_1001853E4, &type metadata for DeviceRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100210640);
  }
  return result;
}

unint64_t sub_1000A2568()
{
  unint64_t result;

  result = qword_100210648;
  if (!qword_100210648)
  {
    result = swift_getWitnessTable(&unk_10018540C, &type metadata for DeviceRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100210648);
  }
  return result;
}

uint64_t sub_1000A25AC(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char v14;

  if (a1 == 0x74654D64756F6C63 && a2 == 0xED00006174616461)
  {
    v5 = 0xED00006174616461;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x74654D64756F6C63, 0xED00006174616461, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x696669746E656469 && a2 == 0xEA00000000007265)
  {
    v7 = 0xEA00000000007265;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x696669746E656469, 0xEA00000000007265, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0xD000000000000010)
  {
    v8 = 0x80000001001AA8D0;
    if (a2 == 0x80000001001AA8D0)
      goto LABEL_19;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x80000001001AA8D0, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
LABEL_19:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if (a1 == 0x656D616E6B63696ELL && a2 == 0xE800000000000000)
  {
    v9 = 0xE800000000000000;
LABEL_25:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656D616E6B63696ELL, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_25;
  }
  if (a1 == 0x6D754E6C65646F6DLL && a2 == 0xEB00000000726562)
  {
    v10 = 0xEB00000000726562;
LABEL_31:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6D754E6C65646F6DLL, 0xEB00000000726562, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_31;
  }
  if (a1 == 0x74636166756E616DLL && a2 == 0xEC00000072657275)
  {
    v11 = 0xEC00000072657275;
LABEL_37:
    swift_bridgeObjectRelease(v11);
    return 5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x74636166756E616DLL, 0xEC00000072657275, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
    goto LABEL_37;
  }
  if (a1 == 0x49746375646F7270 && a2 == 0xE900000000000044)
  {
    v12 = 0xE900000000000044;
LABEL_43:
    swift_bridgeObjectRelease(v12);
    return 6;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x49746375646F7270, 0xE900000000000044, a1, a2, 0) & 1) != 0)
  {
    v12 = a2;
    goto LABEL_43;
  }
  if (a1 == 0x4449726F646E6576 && a2 == 0xE800000000000000)
  {
    v13 = 0xE800000000000000;
LABEL_49:
    swift_bridgeObjectRelease(v13);
    return 7;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x4449726F646E6576, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v13 = a2;
    goto LABEL_49;
  }
  if (a1 == 0xD000000000000010 && a2 == 0x80000001001AAA20)
  {
    swift_bridgeObjectRelease(0x80000001001AAA20);
    return 8;
  }
  else
  {
    v14 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x80000001001AAA20, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v14 & 1) != 0)
      return 8;
    else
      return 9;
  }
}

unint64_t sub_1000A29E4()
{
  uint64_t v0;
  uint64_t inited;
  NSString *v2;
  unint64_t result;
  _BYTE v4[72];

  v0 = sub_1000A0980(&qword_100210718);
  inited = swift_initStackObject(v0, v4);
  *(_OWORD *)(inited + 16) = xmmword_100184870;
  *(_QWORD *)(inited + 64) = &type metadata for Int;
  *(_QWORD *)(inited + 32) = NSFilePosixPermissions;
  *(_QWORD *)(inited + 40) = 504;
  v2 = NSFilePosixPermissions;
  result = sub_1000A4F44(inited);
  qword_100218BF8 = result;
  return result;
}

uint64_t sub_1000A2A5C()
{
  id v0;
  __n128 v1;
  uint64_t v2;
  uint64_t v3;
  NSString v4;
  unsigned int v5;
  uint64_t v6;
  NSURL *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  Class isa;
  unsigned int v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  id v41;
  char v42;

  v0 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
  v42 = 0;
  URL.path.getter(v1);
  v3 = v2;
  v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v3);
  v5 = objc_msgSend(v0, "fileExistsAtPath:isDirectory:", v4, &v42);

  if (v5)
  {
    if ((v42 & 1) != 0)
    {
LABEL_11:

      return v5 ^ 1;
    }
    v8 = static os_log_type_t.error.getter(v6);
    if (qword_1002101E8 != -1)
      swift_once(&qword_1002101E8, sub_100168814);
    v9 = qword_100218DF0;
    v10 = sub_1000A0980((uint64_t *)&unk_1002103C0);
    v11 = swift_allocObject(v10, 72, 7);
    *(_OWORD *)(v11 + 16) = xmmword_100184870;
    v12 = URL.description.getter();
    v14 = v13;
    *(_QWORD *)(v11 + 56) = &type metadata for String;
    *(_QWORD *)(v11 + 64) = sub_1000A0DF4();
    *(_QWORD *)(v11 + 32) = v12;
    *(_QWORD *)(v11 + 40) = v14;
    os_log(_:dso:log:_:_:)(v8, &_mh_execute_header, v9, "Expected a directory, but is a file: %@", 39, 2, v11);
LABEL_10:
    swift_bridgeObjectRelease(v11);
    goto LABEL_11;
  }
  URL._bridgeToObjectiveC()(v7);
  v16 = v15;
  type metadata accessor for FileAttributeKey(0);
  sub_1000A0940(&qword_100210610, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_100185338);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  v41 = 0;
  v18 = objc_msgSend(v0, "createDirectoryAtURL:withIntermediateDirectories:attributes:error:", v16, 1, isa, &v41);

  v19 = v41;
  if (v18)
  {
    v20 = static os_log_type_t.default.getter(v41);
    if (qword_1002101E8 != -1)
      swift_once(&qword_1002101E8, sub_100168814);
    v21 = qword_100218DF0;
    v22 = sub_1000A0980((uint64_t *)&unk_1002103C0);
    v11 = swift_allocObject(v22, 72, 7);
    *(_OWORD *)(v11 + 16) = xmmword_100184870;
    v23 = type metadata accessor for URL(0);
    v24 = sub_1000A0940((unint64_t *)&unk_100211A60, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
    v25 = dispatch thunk of CustomStringConvertible.description.getter(v23, v24);
    v27 = v26;
    *(_QWORD *)(v11 + 56) = &type metadata for String;
    *(_QWORD *)(v11 + 64) = sub_1000A0DF4();
    *(_QWORD *)(v11 + 32) = v25;
    *(_QWORD *)(v11 + 40) = v27;
    os_log(_:dso:log:_:_:)(v20, &_mh_execute_header, v21, "createdDirectory: %@", 20, 2, v11);
    goto LABEL_10;
  }
  v28 = v41;
  v29 = (void *)_convertNSErrorToError(_:)(v19);

  v31 = swift_willThrow(v30);
  v32 = static os_log_type_t.error.getter(v31);
  if (qword_1002101E8 != -1)
    swift_once(&qword_1002101E8, sub_100168814);
  v33 = qword_100218DF0;
  v34 = sub_1000A0980((uint64_t *)&unk_1002103C0);
  v35 = swift_allocObject(v34, 72, 7);
  *(_OWORD *)(v35 + 16) = xmmword_100184870;
  v41 = v29;
  swift_errorRetain(v29);
  v36 = sub_1000A0980(&qword_100210710);
  v37 = String.init<A>(describing:)(&v41, v36);
  v39 = v38;
  *(_QWORD *)(v35 + 56) = &type metadata for String;
  *(_QWORD *)(v35 + 64) = sub_1000A0DF4();
  *(_QWORD *)(v35 + 32) = v37;
  *(_QWORD *)(v35 + 40) = v39;
  os_log(_:dso:log:_:_:)(v32, &_mh_execute_header, v33, "createDirectory error: %@", 25, 2, v35);
  swift_bridgeObjectRelease(v35);

  swift_errorRelease(v29);
  return v5 ^ 1;
}

uint64_t sub_1000A2E54()
{
  id v0;
  NSURL *v1;
  void *v2;
  void *v3;
  unsigned int v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  id v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  id v30;
  id v31;
  id v32;

  v0 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
  URL._bridgeToObjectiveC()(v1);
  v3 = v2;
  v32 = 0;
  v4 = objc_msgSend(v0, "removeItemAtURL:error:", v2, &v32);

  v5 = v32;
  if (!v4)
  {
    v16 = v32;
    v17 = (void *)_convertNSErrorToError(_:)(v5);

    swift_willThrow(v18);
    v32 = v17;
    swift_errorRetain(v17);
    v19 = sub_1000A0980(&qword_100210710);
    v20 = sub_1000A3138();
    if (!swift_dynamicCast(&v31, &v32, v19, v20, 0))
      return swift_errorRelease(v32);
    swift_errorRelease(v17);
    v21 = v31;
    v22 = objc_msgSend(v31, "domain");
    v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
    v25 = v24;

    v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(NSCocoaErrorDomain);
    v28 = v27;
    if (v26 == v23 && v27 == v25)
    {
      swift_bridgeObjectRelease_n(v25, 2);
    }
    else
    {
      v29 = _stringCompareWithSmolCheck(_:_:expecting:)(v26, v27, v23, v25, 0);
      swift_bridgeObjectRelease(v25);
      v30 = (id)swift_bridgeObjectRelease(v28);
      if ((v29 & 1) == 0)
      {
LABEL_12:
        swift_willThrow(v30);
        return swift_errorRelease(v32);
      }
    }
    v30 = objc_msgSend(v21, "code");
    if (v30 == (id)4)
    {

      return swift_errorRelease(v32);
    }
    goto LABEL_12;
  }
  v6 = static os_log_type_t.default.getter(v32);
  if (qword_1002101E8 != -1)
    swift_once(&qword_1002101E8, sub_100168814);
  v7 = qword_100218DF0;
  v8 = sub_1000A0980((uint64_t *)&unk_1002103C0);
  v9 = swift_allocObject(v8, 72, 7);
  *(_OWORD *)(v9 + 16) = xmmword_100184870;
  v10 = type metadata accessor for URL(0);
  v11 = sub_1000A0940((unint64_t *)&unk_100211A60, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
  v12 = dispatch thunk of CustomStringConvertible.description.getter(v10, v11);
  v14 = v13;
  *(_QWORD *)(v9 + 56) = &type metadata for String;
  *(_QWORD *)(v9 + 64) = sub_1000A0DF4();
  *(_QWORD *)(v9 + 32) = v12;
  *(_QWORD *)(v9 + 40) = v14;
  os_log(_:dso:log:_:_:)(v6, &_mh_execute_header, v7, "removeDirectory: %@", 19, 2, v9);
  return swift_bridgeObjectRelease(v9);
}

unint64_t sub_1000A3138()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100210720;
  if (!qword_100210720)
  {
    v1 = objc_opt_self(NSError);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100210720);
  }
  return result;
}

void sub_1000A3174(uint64_t a1, void (*a2)(void), uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t Strong;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  _BYTE v17[24];

  v8 = a1 + 16;
  swift_beginAccess(a1 + 16, v17, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v8, v9);
  if (Strong)
  {
    v11 = (void *)Strong;
    v12 = static os_log_type_t.default.getter(Strong);
    if (qword_1002101D8 != -1)
      swift_once(&qword_1002101D8, sub_100168748);
    v13 = qword_100218DE0;
    v14 = sub_1000A0980((uint64_t *)&unk_1002103C0);
    v15 = swift_allocObject(v14, 72, 7);
    *(_OWORD *)(v15 + 16) = xmmword_100184870;
    *(_QWORD *)(v15 + 56) = &type metadata for String;
    *(_QWORD *)(v15 + 64) = sub_1000A0DF4();
    *(_QWORD *)(v15 + 32) = a4;
    *(_QWORD *)(v15 + 40) = a5;
    swift_bridgeObjectRetain(a5);
    os_log(_:dso:log:_:_:)(v12, &_mh_execute_header, v13, "fetchAADeviceRecord: %@", 23, 2, v15);
    swift_bridgeObjectRelease(v15);
    v16 = sub_1000A32C4(a4, a5);
    a2();

  }
  else
  {
    a2();
  }
}

void *sub_1000A32C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  char v9;
  void *v10;
  uint64_t v11;
  char v12;
  char v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD v34[3];
  ValueMetadata *v35;
  unint64_t v36;

  v4 = type metadata accessor for URL(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v34[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = &type metadata for AudioAccessoryFeatures;
  v8 = sub_1000A42C4();
  v36 = v8;
  v9 = isFeatureEnabled(_:)(v34);
  sub_1000A2140(v34);
  v10 = 0;
  if ((v9 & 1) != 0)
  {
    v11 = sub_1000B4AC8();
    v35 = &type metadata for AudioAccessoryFeatures;
    v36 = v8;
    v12 = isFeatureEnabled(_:)(v34);
    sub_1000A2140(v34);
    if ((v12 & 1) != 0)
    {
      v35 = &type metadata for AudioAccessoryFeatures;
      v36 = v8;
      v13 = isFeatureEnabled(_:)(v34);
      sub_1000A2140(v34);
      if ((v13 & 1) != 0)
      {
        v14 = objc_msgSend((id)objc_opt_self(BTSystemConfiguration), "isFirstUnlocked");
        if ((_DWORD)v14)
        {
          v15 = sub_100129690();
          if (qword_1002101B0 != -1)
            swift_once(&qword_1002101B0, sub_100106014);
          v16 = sub_1000A0A00(v4, (uint64_t)qword_100218D68);
          (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v16, v4);
          v17 = (_QWORD *)sub_100127A98((uint64_t)v7);
          swift_release(v15);
          (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
        }
        else
        {
          v19 = static os_log_type_t.error.getter(v14);
          if (qword_1002101E0 != -1)
            swift_once(&qword_1002101E0, sub_1001687B0);
          v17 = _swiftEmptyArrayStorage;
          os_log(_:dso:log:_:_:)(v19, &_mh_execute_header, qword_100218DE8, "aaDeviceRecords call failed because device is in beforeFirstUnlock state", 72, 2, _swiftEmptyArrayStorage);
        }
      }
      else
      {
        v17 = _swiftEmptyArrayStorage;
      }
      swift_bridgeObjectRetain(a2);
      v10 = sub_1000A45A8((uint64_t)v17, a1, a2);
      swift_release(v11);
      swift_bridgeObjectRelease(v17);
      v18 = swift_bridgeObjectRelease(a2);
      if (v10)
      {
        v20 = static os_log_type_t.default.getter(v18);
        if (qword_1002101D8 != -1)
          swift_once(&qword_1002101D8, sub_100168748);
        v21 = qword_100218DE0;
        v22 = sub_1000A0980((uint64_t *)&unk_1002103C0);
        v23 = swift_allocObject(v22, 72, 7);
        *(_OWORD *)(v23 + 16) = xmmword_100184870;
        v24 = v10;
        v25 = objc_msgSend(v24, "description");
        v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
        v28 = v27;

        *(_QWORD *)(v23 + 56) = &type metadata for String;
        *(_QWORD *)(v23 + 64) = sub_1000A0DF4();
        *(_QWORD *)(v23 + 32) = v26;
        *(_QWORD *)(v23 + 40) = v28;
        os_log(_:dso:log:_:_:)(v20, &_mh_execute_header, v21, "Found AADeviceRecord: %@", 24, 2, v23);
LABEL_20:
        swift_bridgeObjectRelease(v23);
        return v10;
      }
    }
    else
    {
      v18 = swift_release(v11);
    }
    v29 = static os_log_type_t.debug.getter(v18);
    if (qword_1002101D8 != -1)
      swift_once(&qword_1002101D8, sub_100168748);
    v30 = qword_100218DE0;
    v31 = sub_1000A0980((uint64_t *)&unk_1002103C0);
    v23 = swift_allocObject(v31, 72, 7);
    *(_OWORD *)(v23 + 16) = xmmword_100184870;
    *(_QWORD *)(v23 + 56) = &type metadata for String;
    *(_QWORD *)(v23 + 64) = sub_1000A0DF4();
    *(_QWORD *)(v23 + 32) = a1;
    *(_QWORD *)(v23 + 40) = a2;
    swift_bridgeObjectRetain(a2);
    os_log(_:dso:log:_:_:)(v29, &_mh_execute_header, v30, "AADeviceRecord not found for  - %@", 34, 2, v23);
    v10 = 0;
    goto LABEL_20;
  }
  return v10;
}

uint64_t sub_1000A36A8(uint64_t a1, uint64_t a2)
{
  char *v2;
  char v5;
  void *v6;
  _QWORD *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  NSObject *v11;
  char *v12;
  char isEscapingClosureAtFileLocation;
  uint64_t result;
  uint64_t v15;
  _QWORD aBlock[3];
  ValueMetadata *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v17 = &type metadata for AudioAccessoryFeatures;
  v18 = sub_1000A42C4();
  v5 = isFeatureEnabled(_:)(aBlock);
  sub_1000A2140(aBlock);
  if ((v5 & 1) == 0)
    return 0;
  v20 = 0;
  v6 = *(void **)&v2[OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_managerQueue];
  v7 = (_QWORD *)swift_allocObject(&unk_1001E6028, 48, 7);
  v7[2] = a1;
  v7[3] = a2;
  v7[4] = &v20;
  v7[5] = v2;
  v8 = swift_allocObject(&unk_1001E6050, 32, 7);
  *(_QWORD *)(v8 + 16) = sub_1000A4E94;
  *(_QWORD *)(v8 + 24) = v7;
  v18 = (unint64_t)sub_1000A4EB0;
  v19 = v8;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000E6A70;
  v17 = (ValueMetadata *)&unk_1001E6068;
  v9 = _Block_copy(aBlock);
  v10 = v19;
  v11 = v6;
  swift_bridgeObjectRetain(a2);
  v12 = v2;
  swift_retain(v8);
  swift_release(v10);
  dispatch_sync(v11, v9);

  _Block_release(v9);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v8, "", 128, 36, 27, 1);
  result = swift_release(v8);
  if ((isEscapingClosureAtFileLocation & 1) == 0)
  {
    v15 = v20;
    swift_release(v7);
    return v15;
  }
  __break(1u);
  return result;
}

void sub_1000A3840(uint64_t a1, uint64_t a2, void **a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;

  v6 = static os_log_type_t.default.getter(a1);
  if (qword_1002101D8 != -1)
    swift_once(&qword_1002101D8, sub_100168748);
  v7 = qword_100218DE0;
  v8 = sub_1000A0980((uint64_t *)&unk_1002103C0);
  v9 = swift_allocObject(v8, 72, 7);
  *(_OWORD *)(v9 + 16) = xmmword_100184870;
  *(_QWORD *)(v9 + 56) = &type metadata for String;
  *(_QWORD *)(v9 + 64) = sub_1000A0DF4();
  *(_QWORD *)(v9 + 32) = a1;
  *(_QWORD *)(v9 + 40) = a2;
  swift_bridgeObjectRetain(a2);
  os_log(_:dso:log:_:_:)(v6, &_mh_execute_header, v7, "fetchAADeviceRecordSync: %@", 27, 2, v9);
  swift_bridgeObjectRelease(v9);
  v10 = sub_1000A32C4(a1, a2);
  v11 = *a3;
  *a3 = v10;

}

uint64_t sub_1000A39A4(uint64_t a1, void (*a2)(void), uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t Strong;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  _BYTE v22[24];

  v9 = a1 + 16;
  swift_beginAccess(a1 + 16, v22, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v9, v10);
  if (Strong)
  {
    v12 = (void *)Strong;
    v13 = static os_log_type_t.default.getter(Strong);
    if (qword_1002101D8 != -1)
      swift_once(&qword_1002101D8, sub_100168748);
    v14 = qword_100218DE0;
    v15 = sub_1000A0980((uint64_t *)&unk_1002103C0);
    v16 = swift_allocObject(v15, 72, 7);
    *(_OWORD *)(v16 + 16) = xmmword_100184870;
    *(_QWORD *)(v16 + 56) = &type metadata for String;
    *(_QWORD *)(v16 + 64) = sub_1000A0DF4();
    *(_QWORD *)(v16 + 32) = a4;
    *(_QWORD *)(v16 + 40) = a5;
    swift_bridgeObjectRetain(a5);
    os_log(_:dso:log:_:_:)(v13, &_mh_execute_header, v14, "CloudSync: remove AADeviceRecord with BT Address: %@", 52, 2, v16);
    swift_bridgeObjectRelease(v16);
    v17 = sub_1000B4AC8();
    sub_100138B38(a4, a5, 0x6563697665444141, 0xEE0064726F636552, a2, a3);

    return swift_release(v17);
  }
  else
  {
    v19 = sub_1000A4CC0();
    v20 = swift_allocError(&type metadata for DeviceManager.DeviceManagerError, v19, 0, 0);
    *v21 = 0;
    a2();
    return swift_errorRelease(v20);
  }
}

uint64_t sub_1000A3B54(void *a1, int a2, uint64_t a3, void *aBlock, void (*a5)(uint64_t, uint64_t, id, void *))
{
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;

  v8 = _Block_copy(aBlock);
  v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
  v11 = v10;
  _Block_copy(v8);
  v12 = a1;
  a5(v9, v11, v12, v8);
  _Block_release(v8);
  _Block_release(v8);

  return swift_bridgeObjectRelease(v11);
}

uint64_t sub_1000A3BE0(uint64_t a1, void (*a2)(void), uint64_t a3, void *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t Strong;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  _BYTE v25[24];

  v7 = a1 + 16;
  swift_beginAccess(a1 + 16, v25, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v7, v8);
  if (Strong)
  {
    v10 = (void *)Strong;
    v11 = static os_log_type_t.default.getter(Strong);
    if (qword_1002101D8 != -1)
      swift_once(&qword_1002101D8, sub_100168748);
    v12 = qword_100218DE0;
    v13 = sub_1000A0980((uint64_t *)&unk_1002103C0);
    v14 = swift_allocObject(v13, 72, 7);
    *(_OWORD *)(v14 + 16) = xmmword_100184870;
    v15 = a4;
    v16 = objc_msgSend(v15, "description");
    v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
    v19 = v18;

    *(_QWORD *)(v14 + 56) = &type metadata for String;
    *(_QWORD *)(v14 + 64) = sub_1000A0DF4();
    *(_QWORD *)(v14 + 32) = v17;
    *(_QWORD *)(v14 + 40) = v19;
    os_log(_:dso:log:_:_:)(v11, &_mh_execute_header, v12, "CloudSync: updateAADeviceRecord: %@", 35, 2, v14);
    swift_bridgeObjectRelease(v14);
    v20 = sub_1000B4AC8();
    sub_1001406E8((char *)v15, a2, a3);

    return swift_release(v20);
  }
  else
  {
    v22 = sub_1000A4CC0();
    v23 = swift_allocError(&type metadata for DeviceManager.DeviceManagerError, v22, 0, 0);
    *v24 = 0;
    a2();
    return swift_errorRelease(v23);
  }
}

uint64_t sub_1000A3E08(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  unint64_t v6;
  char v7;
  uint64_t result;
  Swift::String v9;
  Swift::String v10;
  Swift::String v11;
  Swift::String v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  id v34;
  uint64_t v35;
  void *v36;
  void *v37;
  Swift::String v38;
  void *object;
  Swift::String v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  unint64_t v45;
  uint64_t v46;
  Swift::String v47;
  ValueMetadata *v48;
  unint64_t v49;

  v2 = type metadata accessor for URL(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v42 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = &type metadata for AudioAccessoryFeatures;
  v6 = sub_1000A42C4();
  v49 = v6;
  v7 = isFeatureEnabled(_:)(&v47);
  result = sub_1000A2140(&v47);
  if ((v7 & 1) != 0)
  {
    v9._object = (void *)0x80000001001AAD20;
    v9._countAndFlagsBits = 0xD00000000000002CLL;
    String.append(_:)(v9);
    v10._object = (void *)0x80000001001AAD50;
    v10._countAndFlagsBits = 0xD00000000000002BLL;
    String.append(_:)(v10);
    v11._object = (void *)0x80000001001AAD80;
    v11._countAndFlagsBits = 0xD00000000000002BLL;
    String.append(_:)(v11);
    v12._object = (void *)0x80000001001AADB0;
    v12._countAndFlagsBits = 0xD00000000000002CLL;
    String.append(_:)(v12);
    v14 = static os_log_type_t.default.getter(v13);
    if (qword_1002101F8 != -1)
      swift_once(&qword_1002101F8, sub_100168914);
    v15 = (uint64_t)_swiftEmptyArrayStorage;
    os_log(_:dso:log:_:_:)(v14, &_mh_execute_header, qword_100218E00, "-------------AADevice Records-------------", 42, 2, _swiftEmptyArrayStorage);
    v16 = sub_1000B4AC8();
    v48 = &type metadata for AudioAccessoryFeatures;
    v49 = v6;
    v17 = isFeatureEnabled(_:)(&v47);
    sub_1000A2140(&v47);
    if ((v17 & 1) == 0)
      goto LABEL_11;
    v18 = objc_msgSend((id)objc_opt_self(BTSystemConfiguration), "isFirstUnlocked");
    if (!(_DWORD)v18)
    {
      v17 = static os_log_type_t.error.getter(v18);
      if (qword_1002101E0 != -1)
        swift_once(&qword_1002101E0, sub_1001687B0);
      os_log(_:dso:log:_:_:)(v17, &_mh_execute_header, qword_100218DE8, "aaDeviceRecords call failed because device is in beforeFirstUnlock state", 72, 2, _swiftEmptyArrayStorage);
      goto LABEL_11;
    }
    v17 = sub_100129690();
    if (qword_1002101B0 != -1)
      goto LABEL_26;
    while (1)
    {
      v19 = sub_1000A0A00(v2, (uint64_t)qword_100218D68);
      (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v19, v2);
      v15 = sub_100127A98((uint64_t)v5);
      swift_release(v17);
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
LABEL_11:
      swift_release(v16);
      if ((unint64_t)v15 >> 62)
      {
        if (v15 < 0)
          v17 = v15;
        else
          v17 = v15 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v15);
        v20 = _CocoaArrayWrapper.endIndex.getter(v17);
        swift_bridgeObjectRelease(v15);
        if (!v20)
          return swift_bridgeObjectRelease(v15);
      }
      else
      {
        v20 = *(_QWORD *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10);
        if (!v20)
          return swift_bridgeObjectRelease(v15);
      }
      if (v20 >= 1)
        break;
      __break(1u);
LABEL_26:
      swift_once(&qword_1002101B0, sub_100106014);
    }
    v21 = 0;
    v45 = v15 & 0xC000000000000001;
    v44 = xmmword_100184870;
    v46 = a1;
    v43 = v15;
    do
    {
      if (v45)
        v22 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v21, v15);
      else
        v22 = *(id *)(v15 + 8 * v21 + 32);
      v23 = v22;
      ++v21;
      v24 = static os_log_type_t.default.getter(v22);
      v25 = qword_100218E00;
      v26 = sub_1000A0980((uint64_t *)&unk_1002103C0);
      v27 = swift_allocObject(v26, 72, 7);
      *(_OWORD *)(v27 + 16) = v44;
      v28 = v23;
      v29 = objc_msgSend(v28, "description");
      v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
      v32 = v31;

      *(_QWORD *)(v27 + 56) = &type metadata for String;
      *(_QWORD *)(v27 + 64) = sub_1000A0DF4();
      *(_QWORD *)(v27 + 32) = v30;
      *(_QWORD *)(v27 + 40) = v32;
      os_log(_:dso:log:_:_:)(v24, &_mh_execute_header, v25, "%@", 2, 2, v27);
      swift_bridgeObjectRelease(v27);
      v33 = v28;
      v34 = objc_msgSend(v33, "description");
      v35 = static String._unconditionallyBridgeFromObjectiveC(_:)(v34);
      v37 = v36;

      v47._countAndFlagsBits = 0xA2D2D2D2D2D0ALL;
      v47._object = (void *)0xE700000000000000;
      v38._countAndFlagsBits = v35;
      v38._object = v37;
      String.append(_:)(v38);
      swift_bridgeObjectRelease(v37);
      object = v47._object;
      swift_bridgeObjectRetain(v47._object);
      v40._countAndFlagsBits = 10;
      v40._object = (void *)0xE100000000000000;
      String.append(_:)(v40);
      swift_bridgeObjectRelease(object);
      v41 = v47._object;
      String.append(_:)(v47);

      swift_bridgeObjectRelease(v41);
      v15 = v43;
    }
    while (v20 != v21);
    return swift_bridgeObjectRelease(v15);
  }
  return result;
}

unint64_t sub_1000A42C4()
{
  unint64_t result;

  result = qword_1002121A0;
  if (!qword_1002121A0)
  {
    result = swift_getWitnessTable(&unk_100186558, &type metadata for AudioAccessoryFeatures);
    atomic_store(result, (unint64_t *)&qword_1002121A0);
  }
  return result;
}

uint64_t sub_1000A4308(uint64_t a1, uint64_t a2, uint64_t a3, void (**a4)(_QWORD, _QWORD))
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char v15;
  void *v16;
  uint64_t v17;
  _QWORD *v18;
  void *v19;
  id v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD aBlock[3];
  ValueMetadata *v33;
  unint64_t v34;
  _QWORD *v35;

  v8 = type metadata accessor for DispatchWorkItemFlags(0);
  v30 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = type metadata accessor for DispatchQoS(0);
  v11 = *(_QWORD *)(v29 - 8);
  __chkstk_darwin(v29);
  v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = swift_allocObject(&unk_1001E60A0, 24, 7);
  *(_QWORD *)(v14 + 16) = a4;
  v33 = &type metadata for AudioAccessoryFeatures;
  v34 = sub_1000A42C4();
  _Block_copy(a4);
  v15 = isFeatureEnabled(_:)(aBlock);
  sub_1000A2140(aBlock);
  if ((v15 & 1) != 0)
  {
    v16 = *(void **)(a3 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_managerQueue);
    v17 = swift_allocObject(&unk_1001E5F38, 24, 7);
    swift_unknownObjectWeakInit(v17 + 16, a3);
    v18 = (_QWORD *)swift_allocObject(&unk_1001E60C8, 56, 7);
    v18[2] = v17;
    v18[3] = sub_1000A4EB8;
    v18[4] = v14;
    v18[5] = a1;
    v18[6] = a2;
    v34 = (unint64_t)sub_1000A4F00;
    v35 = v18;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1000E6A24;
    v33 = (ValueMetadata *)&unk_1001E60E0;
    v19 = _Block_copy(aBlock);
    v20 = v16;
    swift_retain(v17);
    swift_retain(v14);
    v21 = swift_bridgeObjectRetain(a2);
    static DispatchQoS.unspecified.getter(v21);
    v31 = _swiftEmptyArrayStorage;
    v22 = sub_1000A4D80();
    v23 = sub_1000A0980(&qword_100211D00);
    v24 = sub_1000A4DC8();
    dispatch thunk of SetAlgebra.init<A>(_:)(&v31, v23, v24, v8, v22);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v13, v10, v19);
    _Block_release(v19);

    (*(void (**)(char *, uint64_t))(v30 + 8))(v10, v8);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v29);
    v25 = v35;
    swift_release(v14);
    swift_release(v17);
    v26 = (uint64_t)v25;
  }
  else
  {
    a4[2](a4, 0);
    v26 = v14;
  }
  return swift_release(v26);
}

void *sub_1000A45A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  if ((unint64_t)a1 >> 62)
    goto LABEL_17;
  v6 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  for (; v6; v6 = _CocoaArrayWrapper.endIndex.getter(v15))
  {
    v7 = 4;
    while (1)
    {
      v8 = (a1 & 0xC000000000000001) != 0
         ? (char *)specialized _ArrayBuffer._getElementSlowPath(_:)(v7 - 4, a1)
         : (char *)*(id *)(a1 + 8 * v7);
      v9 = v8;
      v10 = v7 - 3;
      if (__OFADD__(v7 - 4, 1))
        break;
      v11 = &v8[OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_bluetoothAddress];
      v12 = *(_QWORD *)&v8[OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_bluetoothAddress];
      v13 = *((_QWORD *)v11 + 1);
      v14 = *(_QWORD *)v11 == a2 && v13 == a3;
      if (v14 || (_stringCompareWithSmolCheck(_:_:expecting:)(v12, v13, a2, a3, 0) & 1) != 0)
      {
        swift_bridgeObjectRelease(a1);
        return v9;
      }

      ++v7;
      if (v10 == v6)
        goto LABEL_21;
    }
    __break(1u);
LABEL_17:
    if (a1 < 0)
      v15 = a1;
    else
      v15 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
  }
LABEL_21:
  swift_bridgeObjectRelease(a1);
  return 0;
}

uint64_t sub_1000A46E8(uint64_t a1, uint64_t a2, uint64_t a3, void (**a4)(_QWORD, _QWORD))
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char v15;
  void *v16;
  uint64_t v17;
  _QWORD *v18;
  void *v19;
  id v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  void *v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD aBlock[3];
  ValueMetadata *v37;
  unint64_t v38;
  _QWORD *v39;

  v8 = type metadata accessor for DispatchWorkItemFlags(0);
  v34 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = type metadata accessor for DispatchQoS(0);
  v11 = *(_QWORD *)(v33 - 8);
  __chkstk_darwin(v33);
  v13 = (char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = swift_allocObject(&unk_1001E5FB0, 24, 7);
  *(_QWORD *)(v14 + 16) = a4;
  v37 = &type metadata for AudioAccessoryFeatures;
  v38 = sub_1000A42C4();
  _Block_copy(a4);
  v15 = isFeatureEnabled(_:)(aBlock);
  sub_1000A2140(aBlock);
  if ((v15 & 1) != 0)
  {
    v16 = *(void **)(a3 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_managerQueue);
    v17 = swift_allocObject(&unk_1001E5F38, 24, 7);
    swift_unknownObjectWeakInit(v17 + 16, a3);
    v18 = (_QWORD *)swift_allocObject(&unk_1001E5FD8, 56, 7);
    v18[2] = v17;
    v18[3] = sub_1000A4F20;
    v18[4] = v14;
    v18[5] = a1;
    v18[6] = a2;
    v38 = (unint64_t)sub_1000A4E5C;
    v39 = v18;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1000E6A24;
    v37 = (ValueMetadata *)&unk_1001E5FF0;
    v19 = _Block_copy(aBlock);
    v20 = v16;
    swift_retain(v17);
    swift_retain(v14);
    v21 = swift_bridgeObjectRetain(a2);
    static DispatchQoS.unspecified.getter(v21);
    v35 = _swiftEmptyArrayStorage;
    v22 = sub_1000A4D80();
    v23 = sub_1000A0980(&qword_100211D00);
    v24 = sub_1000A4DC8();
    dispatch thunk of SetAlgebra.init<A>(_:)(&v35, v23, v24, v8, v22);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v13, v10, v19);
    _Block_release(v19);

    (*(void (**)(char *, uint64_t))(v34 + 8))(v10, v8);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v33);
    v25 = v39;
    swift_release(v14);
    swift_release(v17);
    v26 = (uint64_t)v25;
  }
  else
  {
    v27 = sub_1000A4CC0();
    v28 = swift_allocError(&type metadata for DeviceManager.DeviceManagerError, v27, 0, 0);
    *v29 = 4;
    v30 = (void *)_convertErrorToNSError(_:)(v28);
    ((void (**)(_QWORD, void *))a4)[2](a4, v30);

    swift_errorRelease(v28);
    v26 = v14;
  }
  return swift_release(v26);
}

uint64_t sub_1000A49C4(void *a1, uint64_t a2, void (**a3)(_QWORD, _QWORD))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char v14;
  void *v15;
  uint64_t v16;
  _QWORD *v17;
  void *v18;
  id v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  void *v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD aBlock[3];
  ValueMetadata *v35;
  unint64_t v36;
  _QWORD *v37;

  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = type metadata accessor for DispatchQoS(0);
  v10 = *(_QWORD *)(v32 - 8);
  __chkstk_darwin(v32);
  v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = swift_allocObject(&unk_1001E5F10, 24, 7);
  *(_QWORD *)(v13 + 16) = a3;
  v35 = &type metadata for AudioAccessoryFeatures;
  v36 = sub_1000A42C4();
  _Block_copy(a3);
  v14 = isFeatureEnabled(_:)(aBlock);
  sub_1000A2140(aBlock);
  if ((v14 & 1) != 0)
  {
    v31 = v7;
    v15 = *(void **)(a2 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_managerQueue);
    v16 = swift_allocObject(&unk_1001E5F38, 24, 7);
    swift_unknownObjectWeakInit(v16 + 16, a2);
    v17 = (_QWORD *)swift_allocObject(&unk_1001E5F60, 48, 7);
    v17[2] = v16;
    v17[3] = sub_1000A4CB8;
    v17[4] = v13;
    v17[5] = a1;
    v36 = (unint64_t)sub_1000A4D5C;
    v37 = v17;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1000E6A24;
    v35 = (ValueMetadata *)&unk_1001E5F78;
    v18 = _Block_copy(aBlock);
    v19 = v15;
    swift_retain(v16);
    swift_retain(v13);
    static DispatchQoS.unspecified.getter(a1);
    v33 = _swiftEmptyArrayStorage;
    v20 = sub_1000A4D80();
    v21 = sub_1000A0980(&qword_100211D00);
    v22 = sub_1000A4DC8();
    dispatch thunk of SetAlgebra.init<A>(_:)(&v33, v21, v22, v6, v20);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v12, v9, v18);
    _Block_release(v18);

    (*(void (**)(char *, uint64_t))(v31 + 8))(v9, v6);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v32);
    v23 = v37;
    swift_release(v13);
    swift_release(v16);
    v24 = (uint64_t)v23;
  }
  else
  {
    v25 = sub_1000A4CC0();
    v26 = swift_allocError(&type metadata for DeviceManager.DeviceManagerError, v25, 0, 0);
    *v27 = 4;
    v28 = (void *)_convertErrorToNSError(_:)(v26);
    ((void (**)(_QWORD, void *))a3)[2](a3, v28);

    swift_errorRelease(v26);
    v24 = v13;
  }
  return swift_release(v24);
}

uint64_t sub_1000A4C94()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

void sub_1000A4CB8(uint64_t a1)
{
  uint64_t v1;

  sub_10010D2C8(a1, *(_QWORD *)(v1 + 16));
}

unint64_t sub_1000A4CC0()
{
  unint64_t result;

  result = qword_100210728;
  if (!qword_100210728)
  {
    result = swift_getWitnessTable(&unk_100186518, &type metadata for DeviceManager.DeviceManagerError);
    atomic_store(result, (unint64_t *)&qword_100210728);
  }
  return result;
}

uint64_t sub_1000A4D04()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000A4D28()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));

  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1000A4D5C()
{
  uint64_t v0;

  return sub_1000A3BE0(*(_QWORD *)(v0 + 16), *(void (**)(void))(v0 + 24), *(_QWORD *)(v0 + 32), *(void **)(v0 + 40));
}

uint64_t sub_1000A4D68(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000A4D78(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

unint64_t sub_1000A4D80()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100211920;
  if (!qword_100211920)
  {
    v1 = type metadata accessor for DispatchWorkItemFlags(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for DispatchWorkItemFlags, v1);
    atomic_store(result, (unint64_t *)&qword_100211920);
  }
  return result;
}

unint64_t sub_1000A4DC8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100211930;
  if (!qword_100211930)
  {
    v1 = sub_1000A4E14(&qword_100211D00);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_100211930);
  }
  return result;
}

uint64_t sub_1000A4E14(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = swift_getTypeByMangledNameInContextInMetadataState2(255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t sub_1000A4E5C()
{
  return sub_1000A4F0C((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000A39A4);
}

uint64_t sub_1000A4E68()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));

  return swift_deallocObject(v0, 48, 7);
}

void sub_1000A4E94()
{
  uint64_t v0;

  sub_1000A3840(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(void ***)(v0 + 32));
}

uint64_t sub_1000A4EA0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000A4EB0()
{
  uint64_t v0;

  return sub_1000E6A50(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t sub_1000A4EB8()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 16) + 16))();
}

uint64_t sub_1000A4ECC()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[4]);
  swift_bridgeObjectRelease(v0[6]);
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1000A4F00()
{
  return sub_1000A4F0C((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000A3174);
}

uint64_t sub_1000A4F0C(uint64_t (*a1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v1;

  return a1(v1[2], v1[3], v1[4], v1[5], v1[6]);
}

unint64_t sub_1000A4F44(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_1000A0980(&qword_100210878);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  v6 = v3 + 64;
  v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_1000AB614(v7, (uint64_t)&v14, &qword_100210880);
    v8 = v14;
    result = sub_1000A9F8C(v14);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(_QWORD *)(v4[6] + 8 * result) = v8;
    result = (unint64_t)sub_1000AB354(&v15, (_OWORD *)(v4[7] + 32 * result));
    v11 = v4[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v4[2] = v13;
    v7 += 40;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1000A5070(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  id v8;
  id v9;
  unint64_t result;
  char v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_1000A0980(&qword_100210870);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (void **)(a1 + 40);
  while (1)
  {
    v7 = *v6;
    v8 = *(v6 - 1);
    v9 = v7;
    result = sub_1000A9F8C((uint64_t)v8);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v12 = 8 * result;
    *(_QWORD *)(v4[6] + v12) = v8;
    *(_QWORD *)(v4[7] + v12) = v9;
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4[2] = v15;
    v6 += 2;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1000A5178(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_1000A0980(&qword_1002108D0);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v7 = *(v6 - 2);
    v8 = *(v6 - 1);
    v9 = *v6;
    swift_bridgeObjectRetain(v8);
    result = sub_1000AA00C(v7, v8);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v12 = (uint64_t *)(v4[6] + 16 * result);
    *v12 = v7;
    v12[1] = v8;
    *(_QWORD *)(v4[7] + 8 * result) = v9;
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v6 += 3;
    v4[2] = v15;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1000A5288(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_1000A0980(&qword_1002108E0);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  v6 = v3 + 64;
  v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_1000AB614(v7, (uint64_t)&v16, &qword_1002108E8);
    v8 = v16;
    v9 = v17;
    result = sub_1000AA00C(v16, v17);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v12 = (uint64_t *)(v4[6] + 16 * result);
    *v12 = v8;
    v12[1] = v9;
    result = (unint64_t)sub_1000AB354(&v18, (_OWORD *)(v4[7] + 32 * result));
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4[2] = v15;
    v7 += 48;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1000A53BC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  __int128 v15;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_1000A0980((uint64_t *)&unk_1002108B0);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (_OWORD *)(a1 + 48);
  while (1)
  {
    v7 = *((_QWORD *)v6 - 2);
    v8 = *((_QWORD *)v6 - 1);
    v15 = *v6;
    swift_bridgeObjectRetain(v8);
    swift_retain(*((_QWORD *)&v15 + 1));
    result = sub_1000AA00C(v7, v8);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v11 = (uint64_t *)(v4[6] + 16 * result);
    *v11 = v7;
    v11[1] = v8;
    *(_OWORD *)(v4[7] + 16 * result) = v15;
    v12 = v4[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v4[2] = v14;
    v6 += 2;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1000A54E4(uint64_t a1)
{
  return sub_1000A550C(a1, (uint64_t *)&unk_1002108C0, (uint64_t (*)(id))sub_1000AA144);
}

unint64_t sub_1000A54F8(uint64_t a1)
{
  return sub_1000A550C(a1, &qword_100211970, (uint64_t (*)(id))sub_1000AA0F8);
}

unint64_t sub_1000A550C(uint64_t a1, uint64_t *a2, uint64_t (*a3)(id))
{
  uint64_t v4;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _OWORD *v9;
  id v10;
  unint64_t result;
  char v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  __int128 v16;

  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
    v7 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_1000A0980(a2);
  v6 = static _DictionaryStorage.allocate(capacity:)(v4);
  v7 = (_QWORD *)v6;
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v7;
  }
  swift_retain(v6);
  v9 = (_OWORD *)(a1 + 40);
  while (1)
  {
    v16 = *v9;
    v10 = *((id *)v9 - 1);
    swift_retain(*((_QWORD *)&v16 + 1));
    result = a3(v10);
    if ((v12 & 1) != 0)
      break;
    *(_QWORD *)((char *)v7 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_QWORD *)(v7[6] + 8 * result) = v10;
    *(_OWORD *)(v7[7] + 16 * result) = v16;
    v13 = v7[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v7[2] = v15;
    v9 = (_OWORD *)((char *)v9 + 24);
    if (!--v8)
    {
      swift_release(v7);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1000A5628(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  unint64_t result;
  char v12;
  uint64_t *v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_1000A0980((uint64_t *)&unk_100210888);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (void **)(a1 + 48);
  while (1)
  {
    v7 = (uint64_t)*(v6 - 2);
    v8 = (uint64_t)*(v6 - 1);
    v9 = *v6;
    swift_bridgeObjectRetain(v8);
    v10 = v9;
    result = sub_1000AA00C(v7, v8);
    if ((v12 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v13 = (uint64_t *)(v4[6] + 16 * result);
    *v13 = v7;
    v13[1] = v8;
    *(_QWORD *)(v4[7] + 8 * result) = v10;
    v14 = v4[2];
    v15 = __OFADD__(v14, 1);
    v16 = v14 + 1;
    if (v15)
      goto LABEL_11;
    v4[2] = v16;
    v6 += 3;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

_UNKNOWN **static AAProxCardsRecord.ProxCardKeys.allCases.getter()
{
  return &off_1001E56C8;
}

uint64_t AAProxCardsRecord.ProxCardKeys.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1000A5790 + 4 * byte_100185500[a1]))(0x62756F4465736163, 0xED0000706154656CLL);
}

uint64_t sub_1000A5790()
{
  return 0x7473654764616568;
}

uint64_t sub_1000A57B0()
{
  return 0x7461527472616568;
}

uint64_t sub_1000A57CC()
{
  return 0x6175516563696F76;
}

uint64_t sub_1000A57EC()
{
  return 0x77654E7374616877;
}

void sub_1000A5804(char *a1)
{
  sub_100110B90(*a1);
}

void sub_1000A5810()
{
  unsigned __int8 *v0;
  uint64_t v1;
  _QWORD v2[9];

  v1 = *v0;
  Hasher.init(_seed:)(v2, 0);
  __asm { BR              X9 }
}

Swift::Int sub_1000A5868()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x7473654764616568, 0xEC00000073657275);
  swift_bridgeObjectRelease(0xEC00000073657275);
  return Hasher._finalize()();
}

void sub_1000A5904()
{
  __asm { BR              X10 }
}

uint64_t sub_1000A594C(uint64_t a1)
{
  String.hash(into:)(a1, 0x7473654764616568, 0xEC00000073657275);
  return swift_bridgeObjectRelease(0xEC00000073657275);
}

void sub_1000A59D4(uint64_t a1)
{
  unsigned __int8 *v1;
  uint64_t v2;
  _QWORD v3[9];

  v2 = *v1;
  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X9 }
}

Swift::Int sub_1000A5A28()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x7473654764616568, 0xEC00000073657275);
  swift_bridgeObjectRelease(0xEC00000073657275);
  return Hasher._finalize()();
}

unint64_t sub_1000A5AC4@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = _s15audioaccessoryd17AAProxCardsRecordC12ProxCardKeysO8rawValueAESgSS_tcfC_0(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000A5AF0()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_1000A5B2C + 4 * byte_100185514[*v0]))();
}

void sub_1000A5B2C(uint64_t a1@<X8>)
{
  strcpy((char *)a1, "headGestures");
  *(_BYTE *)(a1 + 13) = 0;
  *(_WORD *)(a1 + 14) = -5120;
}

void sub_1000A5B50(_QWORD *a1@<X8>)
{
  *a1 = 0x7461527472616568;
  a1[1] = 0xE900000000000065;
}

void sub_1000A5B70(uint64_t a1@<X8>)
{
  strcpy((char *)a1, "voiceQuality");
  *(_BYTE *)(a1 + 13) = 0;
  *(_WORD *)(a1 + 14) = -5120;
}

void sub_1000A5B94(_QWORD *a1@<X8>)
{
  *a1 = 0x77654E7374616877;
  a1[1] = 0xE800000000000000;
}

void sub_1000A5BB0(_QWORD *a1@<X8>)
{
  *a1 = &off_1001E56F0;
}

uint64_t sub_1000A5BC0()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t result;
  uint64_t v9;

  v0 = sub_1000A0980((uint64_t *)&unk_100210840);
  __chkstk_darwin(v0);
  v2 = (char *)&v9 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for URL(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000A09C0(v5, qword_100218C00);
  sub_1000A0A00(v3, (uint64_t)qword_100218C00);
  URL.init(string:)(0x6552646568636143, 0xED00007364726F63);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v7, v2, v3);
    URL.appendingPathComponent(_:isDirectory:)(0xD000000000000011, 0x8000000100185690, 1);
    return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  }
  return result;
}

_QWORD *AAProxCardsRecord.description.getter()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  void *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  objc_class *v18;
  Class isa;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  void *v29;
  Swift::String v30;
  uint64_t v31;
  uint64_t v32;
  Swift::String v33;
  void *object;
  Swift::String v35;
  uint64_t v36;
  void *v37;
  Swift::String v38;
  Swift::String v39;
  Swift::String v40;
  Swift::String v41;
  char *v42;
  char *v43;
  uint64_t v44;
  Swift::String v45;
  void *v46;
  Swift::String v47;
  Class v48;
  id v49;
  void *v50;
  uint64_t v51;
  void (*v52)(uint64_t, uint64_t, uint64_t, uint64_t);
  unsigned int (*v53)(char *, uint64_t, uint64_t);
  void *v54;
  uint64_t v55;
  char *v56;
  void *v57;
  Class v58;
  id v59;
  void *v60;
  Swift::String v61;
  Swift::String v62;
  id v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  char *v70;
  void *v71;
  Class v72;
  id v73;
  void *v74;
  Swift::String v75;
  Swift::String v76;
  id v77;
  void *v78;
  uint64_t v79;
  void *v80;
  void *v81;
  Swift::String v82;
  Swift::String v83;
  id v84;
  void *v85;
  uint64_t v86;
  void *v87;
  void *v88;
  Swift::String v89;
  void (*v91)(char *, char *, uint64_t);
  void (*v92)(char *, uint64_t);
  char *v93;
  char *v94;
  uint64_t v95;
  char *v96;
  _QWORD *v97;
  unint64_t v98;
  _QWORD *v99;
  unint64_t v100;
  _QWORD v101[3];

  v1 = v0;
  v2 = sub_1000A0980((uint64_t *)&unk_1002103D0);
  __chkstk_darwin(v2);
  v94 = (char *)&v91 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v95 = (uint64_t)&v91 - v5;
  __chkstk_darwin(v6);
  v93 = (char *)&v91 - v7;
  __chkstk_darwin(v8);
  v10 = (char *)&v91 - v9;
  v11 = type metadata accessor for Date(0);
  v12 = *(_QWORD **)(v11 - 8);
  __chkstk_darwin(v11);
  v96 = (char *)&v91 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = objc_autoreleasePoolPush();
  v15 = &v0[OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_cloudMetadata];
  v16 = *(_QWORD *)&v0[OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_cloudMetadata];
  v17 = *((_QWORD *)v15 + 1);
  sub_1000A0E74(v16, v17);
  sub_100109DEC(v16, v17);
  isa = v18;
  sub_1000A103C(v16, v17);
  if (!isa)
  {
    v20 = v1;
    isa = sub_1000A9DE4((uint64_t)v20, (uint64_t)&OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_identifier, 0xD000000000000011, (void *)0x8000000100185690).super.isa;

  }
  v101[0] = isa;
  sub_1000A89A0((unint64_t)v101);
  objc_autoreleasePoolPop(v14);
  v21 = &v1[OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_proxCardVersions];
  swift_beginAccess(&v1[OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_proxCardVersions], v101, 0, 0);
  v22 = *(_QWORD *)v21;
  v23 = swift_bridgeObjectRetain(v22);
  v24 = sub_1000A6500(v23);
  swift_bridgeObjectRelease(v22);
  v97 = v24;
  v25 = sub_1000A0980(&qword_100210740);
  v26 = sub_1000AAD14(&qword_100210748, &qword_100210740, (uint64_t)&protocol conformance descriptor for [A]);
  v27 = BidirectionalCollection<>.joined(separator:)(8236, 0xE200000000000000, v25, v26);
  v29 = v28;
  swift_bridgeObjectRelease(v24);
  v97 = 0;
  v98 = 0xE000000000000000;
  _StringGuts.grow(_:)(152);
  v99 = v97;
  v100 = v98;
  v30._object = (void *)0x80000001001AAF60;
  v30._countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v30);
  v31 = type metadata accessor for UUID(0);
  v32 = sub_1000A0940((unint64_t *)&unk_100210750, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v33._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v31, v32);
  object = v33._object;
  String.append(_:)(v33);
  swift_bridgeObjectRelease(object);
  v35._countAndFlagsBits = 2108704;
  v35._object = (void *)0xE300000000000000;
  String.append(_:)(v35);
  v36 = *(_QWORD *)&v1[OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_bluetoothAddress];
  v37 = *(void **)&v1[OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_bluetoothAddress + 8];
  swift_bridgeObjectRetain(v37);
  v38._countAndFlagsBits = v36;
  v38._object = v37;
  String.append(_:)(v38);
  swift_bridgeObjectRelease(v37);
  v39._object = (void *)0x80000001001AAF80;
  v39._countAndFlagsBits = 0xD000000000000014;
  String.append(_:)(v39);
  v40._countAndFlagsBits = v27;
  v40._object = v29;
  String.append(_:)(v40);
  swift_bridgeObjectRelease(v29);
  v41._object = (void *)0x80000001001AAFA0;
  v41._countAndFlagsBits = 0xD000000000000014;
  String.append(_:)(v41);
  v42 = &v1[OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_lastModifiedDate];
  swift_beginAccess(&v1[OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_lastModifiedDate], &v97, 0, 0);
  v43 = v96;
  v91 = (void (*)(char *, char *, uint64_t))v12[2];
  v91(v96, v42, v11);
  v44 = sub_1000A0940(&qword_100211B90, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  v45._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v11, v44);
  v46 = v45._object;
  String.append(_:)(v45);
  swift_bridgeObjectRelease(v46);
  v92 = (void (*)(char *, uint64_t))v12[1];
  v92(v43, v11);
  v47._countAndFlagsBits = 0xD00000000000001ALL;
  v47._object = (void *)0x80000001001AAFC0;
  String.append(_:)(v47);
  v48 = isa;
  v49 = -[objc_class creationDate](isa, "creationDate");
  if (v49)
  {
    v50 = v49;
    v51 = (uint64_t)v93;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v49);

    v52 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v12[7];
    v52(v51, 0, 1, v11);
  }
  else
  {
    v52 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v12[7];
    v51 = (uint64_t)v93;
    v52((uint64_t)v93, 1, 1, v11);
  }
  sub_1000A0F38(v51, (uint64_t)v10);
  v53 = (unsigned int (*)(char *, uint64_t, uint64_t))v12[6];
  if (v53(v10, 1, v11))
  {
    sub_1000A1000((uint64_t)v10, (uint64_t *)&unk_1002103D0);
    v54 = (void *)0xE200000000000000;
    v55 = 15932;
  }
  else
  {
    v56 = v96;
    v91(v96, v10, v11);
    sub_1000A1000((uint64_t)v10, (uint64_t *)&unk_1002103D0);
    v57 = (void *)objc_opt_self(NSDateFormatter);
    v58 = Date._bridgeToObjectiveC()().super.isa;
    v59 = objc_msgSend(v57, "localizedStringFromDate:dateStyle:timeStyle:", v58, 2, 2);

    v55 = static String._unconditionallyBridgeFromObjectiveC(_:)(v59);
    v54 = v60;

    v92(v56, v11);
  }
  v61._countAndFlagsBits = v55;
  v61._object = v54;
  String.append(_:)(v61);
  swift_bridgeObjectRelease(v54);
  v62._object = (void *)0x80000001001AAFE0;
  v62._countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v62);
  v63 = -[objc_class modificationDate](v48, "modificationDate");
  if (v63)
  {
    v64 = v63;
    v65 = (uint64_t)v94;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v63);

    v66 = 0;
  }
  else
  {
    v66 = 1;
    v65 = (uint64_t)v94;
  }
  v52(v65, v66, 1, v11);
  v67 = v95;
  sub_1000A0F38(v65, v95);
  if (v53((char *)v67, 1, v11))
  {
    sub_1000A1000(v67, (uint64_t *)&unk_1002103D0);
    v68 = (void *)0xE200000000000000;
    v69 = 15932;
  }
  else
  {
    v70 = v96;
    v91(v96, (char *)v67, v11);
    sub_1000A1000(v67, (uint64_t *)&unk_1002103D0);
    v71 = (void *)objc_opt_self(NSDateFormatter);
    v72 = Date._bridgeToObjectiveC()().super.isa;
    v73 = objc_msgSend(v71, "localizedStringFromDate:dateStyle:timeStyle:", v72, 2, 2);

    v69 = static String._unconditionallyBridgeFromObjectiveC(_:)(v73);
    v68 = v74;

    v92(v70, v11);
  }
  v75._countAndFlagsBits = v69;
  v75._object = v68;
  String.append(_:)(v75);
  swift_bridgeObjectRelease(v68);
  v76._countAndFlagsBits = 0xD000000000000013;
  v76._object = (void *)0x80000001001AB000;
  String.append(_:)(v76);
  v77 = -[objc_class modifiedByDevice](v48, "modifiedByDevice");
  if (v77)
  {
    v78 = v77;
    v79 = static String._unconditionallyBridgeFromObjectiveC(_:)(v77);
    v81 = v80;

  }
  else
  {
    v81 = (void *)0xE200000000000000;
    v79 = 15932;
  }
  v82._countAndFlagsBits = v79;
  v82._object = v81;
  String.append(_:)(v82);
  swift_bridgeObjectRelease(v81);
  v83._countAndFlagsBits = 0x746520202020202CLL;
  v83._object = (void *)0xEC000000203A6761;
  String.append(_:)(v83);
  v84 = -[objc_class recordChangeTag](v48, "recordChangeTag");
  if (v84)
  {
    v85 = v84;
    v86 = static String._unconditionallyBridgeFromObjectiveC(_:)(v84);
    v88 = v87;

  }
  else
  {
    v88 = (void *)0xE200000000000000;
    v86 = 15932;
  }
  v89._countAndFlagsBits = v86;
  v89._object = v88;
  String.append(_:)(v89);

  swift_bridgeObjectRelease(v88);
  return v99;
}

_QWORD *sub_1000A6500(uint64_t a1)
{
  int64_t v1;
  _QWORD *result;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  int64_t v9;
  unint64_t v10;
  uint64_t *v11;
  Swift::String v12;
  Swift::String v13;
  void *object;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return _swiftEmptyArrayStorage;
  sub_10014EE6C(0, v1, 0);
  result = (_QWORD *)sub_1000AAAEC(a1);
  v5 = (uint64_t)result;
  v6 = 0;
  v7 = a1 + 64;
  v23 = v1;
  v24 = v4;
  v25 = a1 + 64;
  while ((v5 & 0x8000000000000000) == 0 && v5 < 1 << *(_BYTE *)(a1 + 32))
  {
    v10 = (unint64_t)v5 >> 6;
    if ((*(_QWORD *)(v7 + 8 * ((unint64_t)v5 >> 6)) & (1 << v5)) == 0)
      goto LABEL_23;
    if (*(_DWORD *)(a1 + 36) != v4)
      goto LABEL_24;
    v26 = v6;
    v11 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v5);
    v27 = *v11;
    v28 = v11[1];
    swift_bridgeObjectRetain_n(v28, 2);
    v12._countAndFlagsBits = 58;
    v12._object = (void *)0xE100000000000000;
    String.append(_:)(v12);
    v13._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64, &protocol witness table for UInt64);
    object = v13._object;
    String.append(_:)(v13);
    swift_bridgeObjectRelease(v28);
    result = (_QWORD *)swift_bridgeObjectRelease(object);
    v16 = _swiftEmptyArrayStorage[2];
    v15 = _swiftEmptyArrayStorage[3];
    if (v16 >= v15 >> 1)
      result = (_QWORD *)sub_10014EE6C(v15 > 1, v16 + 1, 1);
    _swiftEmptyArrayStorage[2] = v16 + 1;
    v17 = &_swiftEmptyArrayStorage[2 * v16];
    v17[4] = v27;
    v17[5] = v28;
    v8 = 1 << *(_BYTE *)(a1 + 32);
    if (v5 >= v8)
      goto LABEL_25;
    v7 = a1 + 64;
    v18 = *(_QWORD *)(v25 + 8 * v10);
    if ((v18 & (1 << v5)) == 0)
      goto LABEL_26;
    v4 = v24;
    if (*(_DWORD *)(a1 + 36) != v24)
      goto LABEL_27;
    v19 = v18 & (-2 << (v5 & 0x3F));
    if (v19)
    {
      v8 = __clz(__rbit64(v19)) | v5 & 0xFFFFFFFFFFFFFFC0;
      v9 = v23;
    }
    else
    {
      v20 = v10 + 1;
      v21 = (unint64_t)(v8 + 63) >> 6;
      v9 = v23;
      if (v10 + 1 < v21)
      {
        v22 = *(_QWORD *)(v25 + 8 * v20);
        if (v22)
        {
LABEL_20:
          v8 = __clz(__rbit64(v22)) + (v20 << 6);
        }
        else
        {
          while (v21 - 2 != v10)
          {
            v22 = *(_QWORD *)(a1 + 80 + 8 * v10++);
            if (v22)
            {
              v20 = v10 + 1;
              goto LABEL_20;
            }
          }
        }
      }
    }
    v6 = v26 + 1;
    v5 = v8;
    if (v26 + 1 == v9)
      return _swiftEmptyArrayStorage;
  }
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

uint64_t AAProxCardsRecord.debugDescription.getter()
{
  void *v0;
  id v1;
  uint64_t v2;

  v1 = objc_msgSend(v0, "description");
  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

  return v2;
}

id sub_1000A682C(void *a1)
{
  void *v1;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  id v24;
  NSString v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  id v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  _BYTE *v45;
  unint64_t v46;
  uint64_t v47;
  _BYTE *v48;
  uint64_t v49;
  char *v51;
  _QWORD *v52;
  uint64_t v53;
  id v54;
  id v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  id v60;
  void *v61;
  _QWORD *v62;
  void (*v63)(char *, char *, uint64_t);
  uint64_t v64;
  void (*v65)(uint64_t, uint64_t, uint64_t, uint64_t);
  int v66;
  uint64_t v67;
  id v68;
  void *v69;
  _QWORD *v70;
  char *v71;
  void (*v72)(uint64_t, char *, uint64_t);
  uint64_t v73;
  objc_class *v74;
  _QWORD v75[2];
  uint64_t v76;
  char *v77;
  char *v78;
  char *v79;
  char *v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  id v85;
  _QWORD v86[3];
  objc_super v87;
  id v88;

  v3 = (id)0xD000000000000011;
  v4 = sub_1000A0980((uint64_t *)&unk_1002103D0);
  __chkstk_darwin(v4);
  v78 = (char *)v75 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v79 = (char *)v75 - v7;
  v8 = type metadata accessor for Date(0);
  v81 = *(_QWORD **)(v8 - 8);
  __chkstk_darwin(v8);
  v10 = (char *)v75 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v13 = (char *)v75 - v12;
  v14 = sub_1000A0980(&qword_1002103E0);
  __chkstk_darwin(v14);
  v16 = (char *)v75 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for UUID(0);
  v82 = *(_QWORD *)(v17 - 8);
  v83 = v17;
  __chkstk_darwin(v17);
  v80 = (char *)v75 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = v1;
  v20 = CKRecord.recordType.getter(v19);
  v22 = v21;
  if (v20 == 0xD000000000000011 && v21 == 0x8000000100185690)
  {
    swift_bridgeObjectRelease(0x8000000100185690);
  }
  else
  {
    v23 = _stringCompareWithSmolCheck(_:_:expecting:)(v20, v21, 0xD000000000000011, 0x8000000100185690, 0);
    swift_bridgeObjectRelease(v22);
    if ((v23 & 1) == 0)
    {

      v46 = sub_1000AB364();
      v47 = swift_allocError(&type metadata for AAProxCardsRecord.AAProxCardsRecordError, v46, 0, 0);
      *v48 = 0;
      swift_willThrow(v47);

      goto LABEL_14;
    }
  }
  v77 = v13;
  v24 = objc_msgSend(a1, "encryptedValues");
  v25 = String._bridgeToObjectiveC()();
  v26 = objc_msgSend(v24, "objectForKeyedSubscript:", v25);

  if (!v26
    || (v88 = v26,
        v27 = sub_1000A0980(&qword_100210400),
        (swift_dynamicCast(v86, &v88, v27, &type metadata for String, 6) & 1) == 0))
  {

    goto LABEL_10;
  }
  v84 = v27;
  v85 = v24;
  v28 = v86[0];
  v76 = v86[1];
  v29 = objc_msgSend(a1, "recordID");
  v30 = objc_msgSend(v29, "recordName");

  v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
  v32 = a1;
  v34 = v33;

  UUID.init(uuidString:)(v31, v34);
  swift_bridgeObjectRelease(v34);
  v36 = v82;
  v35 = v83;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v82 + 48))(v16, 1, v83) != 1)
  {
    v51 = v80;
    (*(void (**)(char *, char *, uint64_t))(v36 + 32))(v80, v16, v35);
    (*(void (**)(uint64_t, char *, uint64_t))(v36 + 16))((uint64_t)v19 + OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_identifier, v51, v35);
    v52 = (_QWORD *)((char *)v19 + OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_bluetoothAddress);
    v53 = v76;
    *v52 = v28;
    v52[1] = v53;
    v54 = objc_msgSend(objc_allocWithZone((Class)NSKeyedArchiver), "initRequiringSecureCoding:", 1);
    objc_msgSend(v32, "encodeSystemFieldsWithCoder:", v54);
    objc_msgSend(v54, "finishEncoding");
    v55 = objc_msgSend(v54, "encodedData");
    v56 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    v58 = v57;

    v59 = (_QWORD *)((char *)v19 + OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_cloudMetadata);
    *v59 = v56;
    v59[1] = v58;
    v60 = objc_msgSend(v32, "modificationDate");
    v75[1] = v32;
    if (v60)
    {
      v61 = v60;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v60);

      v62 = v81;
      v63 = (void (*)(char *, char *, uint64_t))v81[4];
      v64 = (uint64_t)v79;
      v63(v79, v10, v8);
      v65 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v62[7];
      v65(v64, 0, 1, v8);
      v66 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v62[6])(v64, 1, v8);
      v67 = (uint64_t)v78;
      if (v66 != 1)
      {
        v63(v77, (char *)v64, v8);
        goto LABEL_25;
      }
    }
    else
    {
      v65 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v81[7];
      v64 = (uint64_t)v79;
      v65((uint64_t)v79, 1, 1, v8);
      v67 = (uint64_t)v78;
    }
    v68 = objc_msgSend(v32, "creationDate");
    if (v68)
    {
      v69 = v68;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v68);

      v70 = v81;
      v71 = v10;
      v72 = (void (*)(uint64_t, char *, uint64_t))v81[4];
      v72(v67, v71, v8);
      v65(v67, 0, 1, v8);
      v73 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v70[6])(v67, 1, v8);
      if ((_DWORD)v73 != 1)
      {
        v72((uint64_t)v77, (char *)v67, v8);
LABEL_24:
        sub_1000A1000(v64, (uint64_t *)&unk_1002103D0);
        v63 = (void (*)(char *, char *, uint64_t))v81[4];
LABEL_25:
        v63((char *)v19 + OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_lastModifiedDate, v77, v8);
        *(_QWORD *)((char *)v19 + OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_proxCardVersions) = sub_1000A5178((uint64_t)_swiftEmptyArrayStorage);

        v74 = (objc_class *)type metadata accessor for AAProxCardsRecord(0);
        v87.receiver = v19;
        v87.super_class = v74;
        v81 = objc_msgSendSuper2(&v87, "init");
        JUMPOUT(0x1000A7094);
      }
    }
    else
    {
      v73 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v65)(v67, 1, 1, v8);
    }
    static Date.now.getter(v73);
    sub_1000A1000(v67, (uint64_t *)&unk_1002103D0);
    goto LABEL_24;
  }
  swift_bridgeObjectRelease(v76);

  v37 = sub_1000A1000((uint64_t)v16, &qword_1002103E0);
  a1 = v32;
  v24 = v85;
LABEL_10:
  v38 = a1;
  v39 = static os_log_type_t.error.getter(v37);
  if (qword_1002101E0 != -1)
    swift_once(&qword_1002101E0, sub_1001687B0);
  v40 = qword_100218DE8;
  v41 = sub_1000A0980((uint64_t *)&unk_1002103C0);
  v42 = swift_allocObject(v41, 72, 7);
  *(_OWORD *)(v42 + 16) = xmmword_100184870;
  *(_QWORD *)(v42 + 56) = sub_1000AB31C(0, (unint64_t *)&qword_1002103F0, CKRecord_ptr);
  *(_QWORD *)(v42 + 64) = sub_1000AB3A8();
  *(_QWORD *)(v42 + 32) = v38;
  v3 = v38;
  os_log(_:dso:log:_:_:)(v39, &_mh_execute_header, v40, "Invalid AAProxCardsRecord - %@", 30, 2, v42);
  swift_bridgeObjectRelease(v42);
  v43 = sub_1000AB364();
  v44 = swift_allocError(&type metadata for AAProxCardsRecord.AAProxCardsRecordError, v43, 0, 0);
  *v45 = 4;
  swift_willThrow(v44);
  swift_unknownObjectRelease(v24);

LABEL_14:
  v49 = type metadata accessor for AAProxCardsRecord(0);
  swift_deallocPartialClassInstance(v19, v49, *(unsigned int *)((swift_isaMask & *v19) + 0x30), *(unsigned __int16 *)((swift_isaMask & *v19) + 0x34));
  return v3;
}

void (*sub_1000A7328(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6))(uint64_t, uint64_t)
{
  char *v6;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t, uint64_t);
  uint64_t v20;
  char *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  void (*v26)(uint64_t, uint64_t);
  uint64_t v27;
  char *v29;
  char *v30;
  unint64_t v31;
  uint64_t v32;
  objc_class *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  objc_super v40;
  uint64_t v41;

  v37 = a6;
  v12 = type metadata accessor for Date(0);
  v35 = *(_QWORD *)(v12 - 8);
  v36 = v12;
  __chkstk_darwin(v12);
  v14 = (char *)&v35 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = &v6[OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_cloudMetadata];
  v16 = a2;
  *(_QWORD *)v15 = a2;
  *((_QWORD *)v15 + 1) = a3;
  v39 = a3;
  v17 = &v6[OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_identifier];
  v18 = type metadata accessor for UUID(0);
  v38 = *(_QWORD *)(v18 - 8);
  v19 = *(void (**)(char *, uint64_t, uint64_t))(v38 + 16);
  v41 = a1;
  v19(v17, a1, v18);
  v20 = HIBYTE(a5) & 0xF;
  if ((a5 & 0x2000000000000000) == 0)
    v20 = a4 & 0xFFFFFFFFFFFFLL;
  if (!v20
    || a4 == 0xD000000000000011 && a5 == 0x80000001001AB220
    || (_stringCompareWithSmolCheck(_:_:expecting:)(a4, a5, 0xD000000000000011, 0x80000001001AB220, 0) & 1) != 0)
  {
    v21 = v6;
    v22 = v39;
    sub_1000A0E74(v16, v39);
    swift_bridgeObjectRelease(a5);
    swift_bridgeObjectRelease(v37);
    v23 = sub_1000AB364();
    v24 = swift_allocError(&type metadata for AAProxCardsRecord.AAProxCardsRecordError, v23, 0, 0);
    *v25 = 3;
    swift_willThrow(v24);
    sub_1000A103C(v16, v22);
    v26 = *(void (**)(uint64_t, uint64_t))(v38 + 8);
    v26(v41, v18);
    sub_1000A103C(*(_QWORD *)v15, *((_QWORD *)v15 + 1));
    v26((uint64_t)v17, v18);

    v27 = type metadata accessor for AAProxCardsRecord(0);
    swift_deallocPartialClassInstance(v21, v27, *(unsigned int *)((swift_isaMask & *(_QWORD *)v21) + 0x30), *(unsigned __int16 *)((swift_isaMask & *(_QWORD *)v21) + 0x34));
  }
  else
  {
    v29 = &v6[OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_bluetoothAddress];
    *(_QWORD *)v29 = a4;
    *((_QWORD *)v29 + 1) = a5;
    v30 = v6;
    v31 = v39;
    v32 = sub_1000A0E74(v16, v39);
    static Date.now.getter(v32);
    (*(void (**)(char *, char *, uint64_t))(v35 + 32))(&v30[OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_lastModifiedDate], v14, v36);
    *(_QWORD *)&v30[OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_proxCardVersions] = sub_1000A5178((uint64_t)_swiftEmptyArrayStorage);

    v33 = (objc_class *)type metadata accessor for AAProxCardsRecord(0);
    v40.receiver = v30;
    v40.super_class = v33;
    v26 = (void (*)(uint64_t, uint64_t))objc_msgSendSuper2(&v40, "init");
    v34 = v37;
    sub_1000A75FC();
    swift_bridgeObjectRelease(v34);

    sub_1000A103C(v16, v31);
    (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v41, v18);
  }
  return v26;
}

void sub_1000A75FC()
{
  JUMPOUT(0x1000A76F4);
}

unint64_t AAProxCardsRecord.__allocating_init(from:)(_QWORD *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return AAProxCardsRecord.init(from:)(a1);
}

unint64_t AAProxCardsRecord.init(from:)(_QWORD *a1)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  char *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  uint64_t v37;
  void (*v38)(char *, char *, uint64_t);
  objc_class *v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  _QWORD *v51;
  unsigned int (*v52)(char *, uint64_t, uint64_t);
  void *v53;
  id v54;
  uint64_t *v55;
  uint64_t v56;
  unint64_t v57;
  objc_class *v58;
  Class isa;
  id v60;
  id v61;
  char *v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  void (*v66)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v67;
  _QWORD *v68;
  uint64_t v69;
  _QWORD *v70;
  void *v71;
  uint64_t v72;
  unint64_t v73;
  objc_class *v74;
  Class v75;
  char *v76;
  void (*v77)(char *, char *, uint64_t);
  id v78;
  char *v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  id v86;
  char *v87;
  char *v88;
  unsigned int (*v89)(uint64_t, uint64_t, uint64_t);
  char *v90;
  char *v91;
  char *v92;
  char *v93;
  char *v94;
  char *v95;
  uint64_t v96;
  _QWORD *v97;
  void (*v98)(char *, char *, uint64_t);
  char *v99;
  _QWORD *v100;
  uint64_t v101;
  uint64_t v102;
  _OWORD v103[2];
  objc_super v104;
  char v105;

  v3 = sub_1000A0980((uint64_t *)&unk_1002103D0);
  __chkstk_darwin(v3);
  v91 = (char *)&v89 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v92 = (char *)&v89 - v6;
  __chkstk_darwin(v7);
  v94 = (char *)&v89 - v8;
  v9 = type metadata accessor for Date(0);
  v10 = *(_QWORD **)(v9 - 8);
  v96 = v9;
  v97 = v10;
  __chkstk_darwin(v9);
  v93 = (char *)&v89 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v95 = (char *)&v89 - v13;
  v14 = type metadata accessor for UUID(0);
  v98 = *(void (**)(char *, char *, uint64_t))(v14 - 8);
  v99 = (char *)v14;
  __chkstk_darwin(v14);
  v16 = (char *)&v89 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_1000A0980(&qword_100210760);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v20 = (char *)&v89 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = a1[3];
  v21 = a1[4];
  v100 = a1;
  v101 = v21;
  sub_1000A20D8(a1, v22);
  v23 = sub_1000AABBC();
  v24 = v1;
  v25 = v102;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for AAProxCardsRecord.CodingKeys, &type metadata for AAProxCardsRecord.CodingKeys, v23, v22, v101);
  if (!v25)
  {
    v26 = v16;
    v27 = v99;
    v102 = v18;
    v105 = 0;
    v28 = sub_1000A2160();
    KeyedDecodingContainer.decode<A>(_:forKey:)(v103, &type metadata for Data, &v105, v17, &type metadata for Data, v28);
    *(_OWORD *)((char *)v24 + OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_cloudMetadata) = v103[0];
    LOBYTE(v103[0]) = 1;
    v31 = sub_1000A0940((unint64_t *)&unk_1002105C0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v101 = v17;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v26, v27, v103, v17, v27, v31);
    (*((void (**)(uint64_t, _QWORD *, char *))v98 + 4))((uint64_t)v24 + OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_identifier, v26, v27);
    LOBYTE(v103[0]) = 2;
    v32 = KeyedDecodingContainer.decode(_:forKey:)(v103, v101);
    v33 = (_QWORD *)((char *)v24 + OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_bluetoothAddress);
    *v33 = v32;
    v33[1] = v34;
    v35 = sub_1000A5178((uint64_t)_swiftEmptyArrayStorage);
    *(_QWORD *)((char *)v24 + OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_proxCardVersions) = v35;
    v36 = v95;
    static Date.now.getter(v35);
    v37 = v96;
    v38 = (void (*)(char *, char *, uint64_t))v97[4];
    v38((char *)v24 + OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_lastModifiedDate, v36, v96);

    v39 = (objc_class *)type metadata accessor for AAProxCardsRecord(0);
    v104.receiver = v24;
    v104.super_class = v39;
    v40 = objc_msgSendSuper2(&v104, "init");
    v41 = sub_1000A0980(&qword_100210780);
    v105 = 3;
    v42 = sub_1000AAC3C(&qword_100210788, (uint64_t)&protocol witness table for String, (uint64_t)&protocol witness table for UInt64, (uint64_t)&protocol conformance descriptor for <> [A : B]);
    v99 = v20;
    v43 = v42;
    v44 = (char *)v40;
    v45 = v101;
    v46 = v43;
    v47 = v99;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v103, v41, &v105, v101, v41, v46);
    v98 = v38;
    v48 = *(_QWORD *)&v103[0];
    sub_1000A75FC();
    swift_bridgeObjectRelease(v48);
    LOBYTE(v103[0]) = 4;
    v49 = sub_1000A0940(&qword_100210790, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    v50 = v94;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v37, v103, v45, v37, v49);
    v90 = v44;
    v51 = v97;
    v52 = (unsigned int (*)(char *, uint64_t, uint64_t))v97[6];
    if (v52(v50, 1, v37) != 1)
    {
      (*(void (**)(char *, uint64_t))(v102 + 8))(v47, v101);
      v67 = v93;
      v98(v93, v50, v37);
      v68 = v100;
      v70 = (_QWORD *)&unk_100218000;
LABEL_22:
      v85 = v70[390];
      v86 = v90;
      v87 = &v90[v85];
      swift_beginAccess(&v90[v85], v103, 33, 0);
      v88 = v87;
      v23 = (unint64_t)v86;
      ((void (*)(char *, char *, uint64_t))v51[5])(v88, v67, v37);
      swift_endAccess(v103);
      sub_1000A2140(v68);

      return v23;
    }
    v89 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v52;
    v53 = objc_autoreleasePoolPush();
    v54 = v90;
    v55 = (uint64_t *)&v90[OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_cloudMetadata];
    v56 = *(_QWORD *)&v90[OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_cloudMetadata];
    v57 = *(_QWORD *)&v90[OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_cloudMetadata + 8];
    sub_1000A0E74(v56, v57);
    sub_100109DEC(v56, v57);
    isa = v58;
    sub_1000A103C(v56, v57);
    if (!isa)
    {
      v60 = v54;
      isa = sub_1000A9DE4((uint64_t)v60, (uint64_t)&OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_identifier, 0xD000000000000011, (void *)0x8000000100185690).super.isa;

    }
    *(_QWORD *)&v103[0] = isa;
    sub_1000A89A0((unint64_t)v103);
    objc_autoreleasePoolPop(v53);
    v61 = -[objc_class modificationDate](isa, "modificationDate");

    v62 = v95;
    if (v61)
    {
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v61);

      v63 = (uint64_t)v92;
      v64 = v62;
      v65 = v96;
      v98(v92, v64, v96);
      v51 = v97;
      v66 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v97[7];
      v66(v63, 0, 1, v65);
      if (v89(v63, 1, v65) != 1)
      {
        (*(void (**)(char *, uint64_t))(v102 + 8))(v99, v101);
        v67 = v93;
        v37 = v96;
        v98(v93, (char *)v63, v96);
        v68 = v100;
        v69 = (uint64_t)v94;
        v70 = (_QWORD *)&unk_100218000;
LABEL_21:
        sub_1000A1000(v69, (uint64_t *)&unk_1002103D0);
        goto LABEL_22;
      }
    }
    else
    {
      v66 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v97[7];
      v66((uint64_t)v92, 1, 1, v96);
    }
    v71 = objc_autoreleasePoolPush();
    v72 = *v55;
    v73 = v55[1];
    sub_1000A0E74(*v55, v73);
    sub_100109DEC(v72, v73);
    v75 = v74;
    sub_1000A103C(v72, v73);
    if (!v75)
    {
      v76 = v90;
      v75 = sub_1000A9DE4((uint64_t)v76, (uint64_t)&OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_identifier, 0xD000000000000011, (void *)0x8000000100185690).super.isa;

    }
    v77 = v98;
    *(_QWORD *)&v103[0] = v75;
    sub_1000A89A0((unint64_t)v103);
    objc_autoreleasePoolPop(v71);
    v78 = -[objc_class creationDate](v75, "creationDate");

    v67 = v93;
    v79 = v95;
    if (v78)
    {
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v78);

      v80 = (uint64_t)v91;
      v81 = v79;
      v82 = v96;
      v77(v91, v81, v96);
      v66(v80, 0, 1, v82);
      v83 = v82;
      v84 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v89)(v80, 1, v82);
      v68 = v100;
      v51 = v97;
      if ((_DWORD)v84 != 1)
      {
        (*(void (**)(char *, uint64_t))(v102 + 8))(v99, v101);
        v77(v67, (char *)v80, v82);
LABEL_20:
        v69 = (uint64_t)v94;
        sub_1000A1000((uint64_t)v92, (uint64_t *)&unk_1002103D0);
        v70 = &unk_100218000;
        v37 = v83;
        goto LABEL_21;
      }
    }
    else
    {
      v80 = (uint64_t)v91;
      v83 = v96;
      v84 = ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v66)(v91, 1, 1, v96);
      v68 = v100;
      v51 = v97;
    }
    static Date.now.getter(v84);
    (*(void (**)(char *, uint64_t))(v102 + 8))(v99, v101);
    sub_1000A1000(v80, (uint64_t *)&unk_1002103D0);
    goto LABEL_20;
  }

  sub_1000A2140(v100);
  v29 = type metadata accessor for AAProxCardsRecord(0);
  swift_deallocPartialClassInstance(v24, v29, *(unsigned int *)((swift_isaMask & *v24) + 0x30), *(unsigned __int16 *)((swift_isaMask & *v24) + 0x34));
  return v23;
}

id BTUserTransaction.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), "init");
}

void AAProxCardsRecord.init()()
{
  _swift_stdlib_reportUnimplementedInitializer("audioaccessoryd.AAProxCardsRecord", 33, "init()", 6, 0);
  __break(1u);
}

uint64_t sub_1000A8394(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1000A83D4 + 4 * byte_100185519[a1]))(0x74654D64756F6C63, 0xED00006174616461);
}

uint64_t sub_1000A83D4()
{
  return 0x696669746E656469;
}

unint64_t sub_1000A83F0()
{
  return 0xD000000000000010;
}

uint64_t sub_1000A8424()
{
  unsigned __int8 *v0;

  return sub_1000A8394(*v0);
}

uint64_t sub_1000A842C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1000AB0EC(a1, a2);
  *a3 = result;
  return result;
}

void sub_1000A8450(_BYTE *a1@<X8>)
{
  *a1 = 5;
}

uint64_t sub_1000A845C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000AABBC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000A8484(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000AABBC();
  return CodingKey.debugDescription.getter(a1, v2);
}

id AAProxCardsRecord.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AAProxCardsRecord(0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t AAProxCardsRecord.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  _QWORD v35[3];
  _OWORD v36[2];
  char v37;

  v2 = v1;
  v32 = type metadata accessor for Date(0);
  v4 = *(_QWORD *)(v32 - 8);
  __chkstk_darwin(v32);
  v6 = (char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1000A0980(&qword_100210798);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = a1[3];
  v12 = a1[4];
  sub_1000A20D8(a1, v11);
  v13 = sub_1000AABBC();
  v14 = v11;
  v15 = v2;
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for AAProxCardsRecord.CodingKeys, &type metadata for AAProxCardsRecord.CodingKeys, v13, v14, v12);
  v36[0] = *(_OWORD *)(v2 + OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_cloudMetadata);
  LOBYTE(v35[0]) = 0;
  v16 = sub_1000A21A4();
  v34 = v10;
  v17 = v33;
  KeyedEncodingContainer.encode<A>(_:forKey:)(v36, v35, v7, &type metadata for Data, v16);
  if (!v17)
  {
    v33 = v6;
    v19 = v32;
    v20 = v15;
    v21 = v15 + OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_identifier;
    LOBYTE(v36[0]) = 1;
    v22 = type metadata accessor for UUID(0);
    v23 = sub_1000A0940((unint64_t *)&unk_1002105E0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v21, v36, v7, v22, v23);
    v24 = *(_QWORD *)(v20 + OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_bluetoothAddress);
    v25 = *(_QWORD *)(v20 + OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_bluetoothAddress + 8);
    LOBYTE(v36[0]) = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v24, v25, v36, 0);
    v26 = (_QWORD *)(v20 + OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_proxCardVersions);
    swift_beginAccess(v20 + OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_proxCardVersions, v36, 0, 0);
    v35[0] = *v26;
    v37 = 3;
    v27 = sub_1000A0980(&qword_100210780);
    v28 = sub_1000AAC3C((unint64_t *)&unk_1002107B0, (uint64_t)&protocol witness table for String, (uint64_t)&protocol witness table for UInt64, (uint64_t)&protocol conformance descriptor for <> [A : B]);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v35, &v37, 0, v27, v28);
    v29 = v20 + OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_lastModifiedDate;
    swift_beginAccess(v20 + OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_lastModifiedDate, v35, 0, 0);
    v30 = v33;
    (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v33, v29, v19);
    v37 = 4;
    v31 = sub_1000A0940((unint64_t *)&unk_100210EB0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v30, &v37, v7, v19, v31);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v30, v19);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v34, v7);
}

unint64_t sub_1000A88A0()
{
  return 0xD000000000000011;
}

unint64_t sub_1000A88BC()
{
  return 0xD000000000000012;
}

uint64_t sub_1000A88D8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *v0 + OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_cloudMetadata;
  v2 = *(_QWORD *)v1;
  sub_1000A0E74(*(_QWORD *)v1, *(_QWORD *)(v1 + 8));
  return v2;
}

uint64_t sub_1000A8918@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[24];

  v3 = *v1 + OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_lastModifiedDate;
  swift_beginAccess(v3, v6, 0, 0);
  v4 = type metadata accessor for Date(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t sub_1000A8980(unint64_t a1)
{
  return sub_1000A89A0(a1);
}

uint64_t sub_1000A89A0(unint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  char v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  int64_t v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  NSString v31;
  id v32;
  uint64_t v33;
  uint64_t ObjectType;
  uint64_t v36;
  unint64_t v37;
  char v38[24];
  id v39;
  uint64_t v40;
  void *v41;
  void *v42;

  v2 = v1;
  v3 = a1;
  v4 = static os_log_type_t.debug.getter(a1);
  if (qword_1002101E0 != -1)
    goto LABEL_37;
  while (1)
  {
    v5 = qword_100218DE8;
    v6 = sub_1000A0980((uint64_t *)&unk_1002103C0);
    v7 = swift_allocObject(v6, 72, 7);
    *(_OWORD *)(v7 + 16) = xmmword_100184870;
    v8 = *(id *)v3;
    v9 = objc_msgSend(v8, "description");
    v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
    v12 = v11;

    *(_QWORD *)(v7 + 56) = &type metadata for String;
    *(_QWORD *)(v7 + 64) = sub_1000A0DF4();
    *(_QWORD *)(v7 + 32) = v10;
    *(_QWORD *)(v7 + 40) = v12;
    os_log(_:dso:log:_:_:)(v4, &_mh_execute_header, v5, "Updating AAProxCardsRecord record: %@", 37, 2, v7);
    swift_bridgeObjectRelease(v7);
    v13 = objc_msgSend(v8, "encryptedValues");
    ObjectType = swift_getObjectType(v13);
    CKRecordKeyValueSetting.subscript.getter(&v39, 0xD000000000000010, 0x80000001001AA8D0, ObjectType, &type metadata for String, &protocol witness table for String);
    v14 = v40;
    v16 = *(id *)(v2 + OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_bluetoothAddress);
    v15 = *(_QWORD *)(v2 + OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_bluetoothAddress + 8);
    if (!v40)
      goto LABEL_7;
    if (v39 == v16 && v40 == v15)
    {
      swift_bridgeObjectRelease(v40);
      goto LABEL_8;
    }
    v17 = _stringCompareWithSmolCheck(_:_:expecting:)(v39, v40, *(_QWORD *)(v2 + OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_bluetoothAddress), *(_QWORD *)(v2 + OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_bluetoothAddress + 8), 0);
    swift_bridgeObjectRelease(v14);
    if ((v17 & 1) == 0)
    {
LABEL_7:
      v41 = &type metadata for String;
      v42 = &protocol witness table for String;
      v39 = v16;
      v40 = v15;
      swift_bridgeObjectRetain(v15);
      CKRecordKeyValueSetting.subscript.setter(&v39, 0xD000000000000010, 0x80000001001AA8D0, ObjectType);
    }
LABEL_8:
    v18 = (uint64_t *)(v2 + OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_proxCardVersions);
    swift_beginAccess(v18, v38, 0, 0);
    v2 = *v18;
    v36 = v2 + 64;
    v19 = 1 << *(_BYTE *)(v2 + 32);
    v20 = -1;
    if (v19 < 64)
      v20 = ~(-1 << v19);
    v3 = v20 & *(_QWORD *)(v2 + 64);
    v21 = (unint64_t)(v19 + 63) >> 6;
    swift_bridgeObjectRetain(v2);
    v4 = 0;
    if (v3)
    {
      while (1)
      {
        v22 = __clz(__rbit64(v3));
        v3 &= v3 - 1;
        v23 = v22 | (v4 << 6);
LABEL_29:
        v27 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v23);
        v29 = *v27;
        v28 = v27[1];
        v30 = *(void **)(*(_QWORD *)(v2 + 56) + 8 * v23);
        swift_bridgeObjectRetain(v28);
        v31 = String._bridgeToObjectiveC()();
        v32 = objc_msgSend(v13, "objectForKeyedSubscript:", v31);

        if (v32
          && (v39 = v32,
              v33 = sub_1000A0980(&qword_100210400),
              (swift_dynamicCast(&v37, &v39, v33, &type metadata for UInt64, 6) & 1) != 0))
        {
          if (v37 >= (unint64_t)v30)
            goto LABEL_32;
LABEL_13:
          v42 = &protocol witness table for UInt64;
          v41 = &type metadata for UInt64;
          v39 = v30;
          CKRecordKeyValueSetting.subscript.setter(&v39, v29, v28, ObjectType);
          if (!v3)
            break;
        }
        else
        {
          if (v30)
            goto LABEL_13;
LABEL_32:
          swift_bridgeObjectRelease(v28);
          if (!v3)
            break;
        }
      }
    }
    v24 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_36;
    }
    if (v24 >= v21)
      break;
    v25 = *(_QWORD *)(v36 + 8 * v24);
    ++v4;
    if (v25)
      goto LABEL_28;
    v4 = v24 + 1;
    if (v24 + 1 >= v21)
      break;
    v25 = *(_QWORD *)(v36 + 8 * v4);
    if (v25)
      goto LABEL_28;
    v4 = v24 + 2;
    if (v24 + 2 >= v21)
      break;
    v25 = *(_QWORD *)(v36 + 8 * v4);
    if (v25)
    {
LABEL_28:
      v3 = (v25 - 1) & v25;
      v23 = __clz(__rbit64(v25)) + (v4 << 6);
      goto LABEL_29;
    }
    v26 = v24 + 3;
    if (v26 >= v21)
      break;
    v25 = *(_QWORD *)(v36 + 8 * v26);
    if (v25)
    {
      v4 = v26;
      goto LABEL_28;
    }
    while (1)
    {
      v4 = v26 + 1;
      if (__OFADD__(v26, 1))
        break;
      if (v4 >= v21)
        goto LABEL_34;
      v25 = *(_QWORD *)(v36 + 8 * v4);
      ++v26;
      if (v25)
        goto LABEL_28;
    }
LABEL_36:
    __break(1u);
LABEL_37:
    swift_once(&qword_1002101E0, sub_1001687B0);
  }
LABEL_34:
  swift_unknownObjectRelease(v13);
  return swift_release(v2);
}

uint64_t sub_1000A8DB8@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *v1 + OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_identifier;
  v4 = type metadata accessor for UUID(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

unint64_t sub_1000A8E00@<X0>(_QWORD *a1@<X0>, unint64_t *a2@<X8>)
{
  uint64_t v2;
  id v5;
  unint64_t result;

  v5 = objc_allocWithZone((Class)type metadata accessor for AAProxCardsRecord(0));
  result = AAProxCardsRecord.init(from:)(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t sub_1000A8E54(_QWORD *a1)
{
  return AAProxCardsRecord.encode(to:)(a1);
}

Swift::UInt64 __swiftcall AAProxCardsRecord.version(for:)(audioaccessoryd::AAProxCardsRecord::ProxCardKeys a1)
{
  Swift::UInt64 result;

  __asm { BR              X10 }
  return result;
}

uint64_t sub_1000A8EC4()
{
  uint64_t v0;
  unint64_t *v1;
  unint64_t v2;
  unint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v7;

  v1 = (unint64_t *)(v0 + OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_proxCardVersions);
  swift_beginAccess(v1, &v7, 0, 0);
  v2 = *v1;
  if (*(_QWORD *)(v2 + 16))
  {
    swift_bridgeObjectRetain(v2);
    v3 = sub_1000AA00C(0x7473654764616568, 0xEC00000073657275);
    if ((v4 & 1) != 0)
      v5 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v3);
    else
      v5 = 0;
    swift_bridgeObjectRelease(0xEC00000073657275);
  }
  else
  {
    v5 = 0;
    v2 = 0xEC00000073657275;
  }
  swift_bridgeObjectRelease(v2);
  return v5;
}

uint64_t sub_1000A8FBC(char *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t isUniquelyReferenced_nonNull_native;
  int v30;
  unint64_t v31;
  uint64_t v32;
  _BOOL8 v33;
  uint64_t v34;
  unint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  BOOL v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  id v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t result;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  int64_t v69;
  __int128 v70;
  _QWORD v71[3];
  char v72[24];
  char v73[32];

  v3 = type metadata accessor for Date(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v62 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((sub_1000A9598((uint64_t)a1) & 1) == 0)
  {
    v10 = ((uint64_t (*)(void))static os_log_type_t.info.getter)();
    if (qword_1002101E0 != -1)
LABEL_48:
      swift_once(&qword_1002101E0, sub_1001687B0);
    v48 = qword_100218DE8;
    v49 = sub_1000A0980((uint64_t *)&unk_1002103C0);
    v50 = swift_allocObject(v49, 72, 7);
    *(_OWORD *)(v50 + 16) = xmmword_100184870;
    v51 = a1;
    v52 = objc_msgSend(v51, "description");
    v53 = static String._unconditionallyBridgeFromObjectiveC(_:)(v52);
    v55 = v54;

    *(_QWORD *)(v50 + 56) = &type metadata for String;
    *(_QWORD *)(v50 + 64) = sub_1000A0DF4();
    *(_QWORD *)(v50 + 32) = v53;
    *(_QWORD *)(v50 + 40) = v55;
    os_log(_:dso:log:_:_:)(v10, &_mh_execute_header, v48, "No change in updated ProxCardsRecord: %@", 40, 2, v50);
    return swift_bridgeObjectRelease(v50);
  }
  v63 = v6;
  v65 = v4;
  v66 = v3;
  v7 = &a1[OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_proxCardVersions];
  swift_beginAccess(&a1[OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_proxCardVersions], v73, 0, 0);
  v8 = *(_QWORD *)v7;
  v9 = *(_QWORD *)(*(_QWORD *)v7 + 64);
  v68 = *(_QWORD *)v7 + 64;
  v10 = 1 << *(_BYTE *)(v8 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & v9;
  v64 = v1;
  v13 = (uint64_t *)(v1 + OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_proxCardVersions);
  swift_bridgeObjectRetain(v8);
  swift_beginAccess(v13, v72, 0, 0);
  v14 = 0;
  v69 = (unint64_t)(v10 + 63) >> 6;
  v67 = &_swiftEmptyDictionarySingleton;
  v70 = xmmword_1001858F0;
  while (1)
  {
    while (1)
    {
      if (v12)
      {
        v15 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v16 = v15 | (v14 << 6);
      }
      else
      {
        v17 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
          __break(1u);
LABEL_46:
          __break(1u);
LABEL_47:
          __break(1u);
          goto LABEL_48;
        }
        if (v17 >= v69)
          goto LABEL_42;
        v18 = *(_QWORD *)(v68 + 8 * v17);
        ++v14;
        if (!v18)
        {
          v14 = v17 + 1;
          if (v17 + 1 >= v69)
            goto LABEL_42;
          v18 = *(_QWORD *)(v68 + 8 * v14);
          if (!v18)
          {
            v14 = v17 + 2;
            if (v17 + 2 >= v69)
              goto LABEL_42;
            v18 = *(_QWORD *)(v68 + 8 * v14);
            if (!v18)
            {
              v19 = v17 + 3;
              if (v19 >= v69)
              {
LABEL_42:
                swift_release(v8);
                v57 = v67;
                if (!v67[2])
                  return swift_bridgeObjectRelease(v67);
                v58 = v64;
                sub_1000A75FC();
                v59 = swift_bridgeObjectRelease(v57);
                v60 = v63;
                static Date.now.getter(v59);
                v61 = v58 + OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_lastModifiedDate;
                swift_beginAccess(v58 + OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_lastModifiedDate, v71, 33, 0);
                (*(void (**)(uint64_t, char *, uint64_t))(v65 + 40))(v61, v60, v66);
                return swift_endAccess(v71);
              }
              v18 = *(_QWORD *)(v68 + 8 * v19);
              if (!v18)
              {
                while (1)
                {
                  v14 = v19 + 1;
                  if (__OFADD__(v19, 1))
                    goto LABEL_46;
                  if (v14 >= v69)
                    goto LABEL_42;
                  v18 = *(_QWORD *)(v68 + 8 * v14);
                  ++v19;
                  if (v18)
                    goto LABEL_20;
                }
              }
              v14 = v19;
            }
          }
        }
LABEL_20:
        v12 = (v18 - 1) & v18;
        v16 = __clz(__rbit64(v18)) + (v14 << 6);
      }
      v20 = *(_QWORD *)(v8 + 48) + 16 * v16;
      a1 = *(char **)v20;
      v10 = *(_QWORD *)(v20 + 8);
      v21 = *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v16);
      v22 = *v13;
      v23 = *(_QWORD *)(*v13 + 16);
      v24 = swift_bridgeObjectRetain(v10);
      if (!v23)
        break;
      swift_bridgeObjectRetain(v10);
      swift_bridgeObjectRetain(v22);
      v25 = sub_1000AA00C((uint64_t)a1, v10);
      if ((v26 & 1) == 0)
      {
        swift_bridgeObjectRelease(v10);
        v24 = swift_bridgeObjectRelease(v22);
        break;
      }
      v27 = *(_QWORD *)(*(_QWORD *)(v22 + 56) + 8 * v25);
      swift_bridgeObjectRelease(v10);
      v24 = swift_bridgeObjectRelease(v22);
      if (v27 < v21)
        goto LABEL_24;
LABEL_30:
      v37 = static os_log_type_t.info.getter(v24);
      if (qword_1002101E0 != -1)
        swift_once(&qword_1002101E0, sub_1001687B0);
      v38 = qword_100218DE8;
      v39 = sub_1000A0980((uint64_t *)&unk_1002103C0);
      v40 = swift_allocObject(v39, 112, 7);
      *(_OWORD *)(v40 + 16) = v70;
      *(_QWORD *)(v40 + 56) = &type metadata for String;
      v41 = sub_1000A0DF4();
      *(_QWORD *)(v40 + 32) = a1;
      *(_QWORD *)(v40 + 40) = v10;
      *(_QWORD *)(v40 + 96) = &type metadata for UInt64;
      *(_QWORD *)(v40 + 104) = &protocol witness table for UInt64;
      *(_QWORD *)(v40 + 64) = v41;
      *(_QWORD *)(v40 + 72) = v21;
      os_log(_:dso:log:_:_:)(v37, &_mh_execute_header, v38, "ProxCards '%@' was not updated to '%lu'. No change", 50, 2, v40);
      swift_bridgeObjectRelease(v40);
    }
    if (!v21)
      goto LABEL_30;
LABEL_24:
    v28 = v67;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v67);
    v71[0] = v28;
    v31 = sub_1000AA00C((uint64_t)a1, v10);
    v32 = v28[2];
    v33 = (v30 & 1) == 0;
    v34 = v32 + v33;
    if (__OFADD__(v32, v33))
      goto LABEL_47;
    if (v28[3] >= v34)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        v47 = v30;
        sub_100100454();
        LOBYTE(v30) = v47;
      }
    }
    else
    {
      LODWORD(v67) = v30;
      sub_1000FF168(v34, isUniquelyReferenced_nonNull_native);
      v35 = sub_1000AA00C((uint64_t)a1, v10);
      v36 = v30 & 1;
      LOBYTE(v30) = (_BYTE)v67;
      if ((v67 & 1) != v36)
        goto LABEL_50;
      v31 = v35;
    }
    v42 = (_QWORD *)v71[0];
    v67 = (_QWORD *)v71[0];
    if ((v30 & 1) != 0)
    {
      *(_QWORD *)(*(_QWORD *)(v71[0] + 56) + 8 * v31) = v21;
      goto LABEL_39;
    }
    *(_QWORD *)(v71[0] + 8 * (v31 >> 6) + 64) |= 1 << v31;
    v43 = (_QWORD *)(v42[6] + 16 * v31);
    *v43 = a1;
    v43[1] = v10;
    *(_QWORD *)(v42[7] + 8 * v31) = v21;
    v44 = v42[2];
    v45 = __OFADD__(v44, 1);
    v46 = v44 + 1;
    if (v45)
      break;
    v42[2] = v46;
    swift_bridgeObjectRetain(v10);
LABEL_39:
    swift_bridgeObjectRelease(v10);
    swift_bridgeObjectRelease(0x8000000000000000);
  }
  __break(1u);
LABEL_50:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

uint64_t sub_1000A9598(uint64_t result)
{
  uint64_t v1;
  char *v2;
  uint64_t *v3;
  unint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  char *v26;
  char v27[24];
  char v28[24];

  if (!result)
    return result;
  v2 = (char *)result;
  v3 = (uint64_t *)(v1 + OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_proxCardVersions);
  swift_beginAccess(v1 + OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_proxCardVersions, v28, 0, 0);
  v4 = *(_QWORD *)(*v3 + 16);
  v5 = &v2[OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_proxCardVersions];
  swift_beginAccess(&v2[OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_proxCardVersions], v27, 0, 0);
  v6 = *(_QWORD *)v5;
  if (v4 < *(_QWORD *)(v6 + 16))
    return 1;
  v7 = v6 + 64;
  v8 = 1 << *(_BYTE *)(v6 + 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & *(_QWORD *)(v6 + 64);
  v11 = (unint64_t)(v8 + 63) >> 6;
  v26 = v2;
  result = swift_bridgeObjectRetain(v6);
  v12 = 0;
  while (1)
  {
    if (v10)
    {
      v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v14 = v13 | (v12 << 6);
      goto LABEL_24;
    }
    v15 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v15 >= v11)
      goto LABEL_29;
    v16 = *(_QWORD *)(v7 + 8 * v15);
    ++v12;
    if (!v16)
    {
      v12 = v15 + 1;
      if (v15 + 1 >= v11)
        goto LABEL_29;
      v16 = *(_QWORD *)(v7 + 8 * v12);
      if (!v16)
      {
        v12 = v15 + 2;
        if (v15 + 2 >= v11)
          goto LABEL_29;
        v16 = *(_QWORD *)(v7 + 8 * v12);
        if (!v16)
          break;
      }
    }
LABEL_23:
    v10 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v12 << 6);
LABEL_24:
    v18 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v14);
    v19 = *v3;
    if (!*(_QWORD *)(*v3 + 16))
      goto LABEL_7;
    v20 = (uint64_t *)(*(_QWORD *)(v6 + 48) + 16 * v14);
    v22 = *v20;
    v21 = v20[1];
    swift_bridgeObjectRetain(v21);
    swift_bridgeObjectRetain(v19);
    v23 = sub_1000AA00C(v22, v21);
    if ((v24 & 1) != 0)
    {
      v25 = *(_QWORD *)(*(_QWORD *)(v19 + 56) + 8 * v23);
      swift_bridgeObjectRelease(v21);
      result = swift_bridgeObjectRelease(v19);
      if (v25 < v18)
      {
LABEL_27:

        swift_release(v6);
        return 1;
      }
    }
    else
    {
      swift_bridgeObjectRelease(v21);
      result = swift_bridgeObjectRelease(v19);
LABEL_7:
      if (v18)
        goto LABEL_27;
    }
  }
  v17 = v15 + 3;
  if (v17 >= v11)
  {
LABEL_29:

    swift_release(v6);
    return 0;
  }
  v16 = *(_QWORD *)(v7 + 8 * v17);
  if (v16)
  {
    v12 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    v12 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v12 >= v11)
      goto LABEL_29;
    v16 = *(_QWORD *)(v7 + 8 * v12);
    ++v17;
    if (v16)
      goto LABEL_23;
  }
LABEL_32:
  __break(1u);
  return result;
}

CKRecord sub_1000A97D0(uint64_t a1)
{
  return sub_1000A983C(a1, 0xD000000000000024, (void *)0x80000001001AB140, 0xD000000000000011, (void *)0x80000001001AB170);
}

CKRecord sub_1000A9808(uint64_t a1)
{
  return sub_1000A983C(a1, 0xD000000000000022, (void *)0x80000001001AB240, 0x654B72657473614DLL, (void *)0xE900000000000079);
}

CKRecord sub_1000A983C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  Swift::String v13;
  void *v14;
  Swift::String v15;
  Class isa;
  Swift::String v17;
  CKRecordID v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  Swift::String v23;

  v9 = sub_1000AB31C(0, &qword_1002111C0, CKRecordID_ptr);
  v10 = UUID.uuidString.getter(v9);
  v12 = v11;
  sub_1000AB31C(0, (unint64_t *)&unk_100210850, CKRecordZoneID_ptr);
  v13._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)(CKCurrentUserDefaultName);
  v13._object = v14;
  v15._countAndFlagsBits = a2;
  v15._object = a3;
  isa = CKRecordZoneID.init(zoneName:ownerName:)(v15, v13).super.isa;
  v17._countAndFlagsBits = v10;
  v17._object = v12;
  v18.super.isa = CKRecordID.init(recordName:zoneID:)(v17, (CKRecordZoneID)isa).super.isa;
  v19 = static os_log_type_t.default.getter(v18.super.isa);
  if (qword_1002101E0 != -1)
    swift_once(&qword_1002101E0, sub_1001687B0);
  v20 = qword_100218DE8;
  v21 = sub_1000A0980((uint64_t *)&unk_1002103C0);
  v22 = swift_allocObject(v21, 72, 7);
  *(_OWORD *)(v22 + 16) = xmmword_100184870;
  *(_QWORD *)(v22 + 56) = &type metadata for String;
  *(_QWORD *)(v22 + 64) = sub_1000A0DF4();
  *(_QWORD *)(v22 + 32) = a4;
  *(_QWORD *)(v22 + 40) = a5;
  os_log(_:dso:log:_:_:)(v19, &_mh_execute_header, v20, "Failed to unarchive record -- creating new %@ record", 52, 2, v22);
  swift_bridgeObjectRelease(v22);
  sub_1000AB31C(0, (unint64_t *)&qword_1002103F0, CKRecord_ptr);
  v23._countAndFlagsBits = a4;
  v23._object = a5;
  return CKRecord.init(recordType:recordID:)(v23, v18);
}

CKRecord sub_1000A99D8(uint64_t a1)
{
  return sub_1000A983C(a1, 0xD00000000000001ELL, (void *)0x80000001001AA990, 0x746553636967614DLL, (void *)0xED000073676E6974);
}

CKRecord sub_1000A9A14()
{
  uint64_t v0;
  void *v1;
  void *v2;
  Swift::String v3;
  void *v4;
  Swift::String v5;
  Class isa;
  Swift::String v7;
  CKRecordID v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::String v13;

  sub_1000AB31C(0, &qword_1002111C0, CKRecordID_ptr);
  type metadata accessor for SoundProfileRecord(0);
  v0 = UUID.uuidString.getter();
  v2 = v1;
  sub_1000AB31C(0, (unint64_t *)&unk_100210850, CKRecordZoneID_ptr);
  v3._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)(CKCurrentUserDefaultName);
  v3._object = v4;
  v5._countAndFlagsBits = 0xD000000000000010;
  v5._object = (void *)0x80000001001AB0E0;
  isa = CKRecordZoneID.init(zoneName:ownerName:)(v5, v3).super.isa;
  v7._countAndFlagsBits = v0;
  v7._object = v2;
  v8.super.isa = CKRecordID.init(recordName:zoneID:)(v7, (CKRecordZoneID)isa).super.isa;
  v9 = static os_log_type_t.default.getter(v8.super.isa);
  if (qword_1002101E0 != -1)
    swift_once(&qword_1002101E0, sub_1001687B0);
  v10 = qword_100218DE8;
  v11 = sub_1000A0980((uint64_t *)&unk_1002103C0);
  v12 = swift_allocObject(v11, 72, 7);
  *(_OWORD *)(v12 + 16) = xmmword_100184870;
  *(_QWORD *)(v12 + 56) = &type metadata for String;
  *(_QWORD *)(v12 + 64) = sub_1000A0DF4();
  *(_QWORD *)(v12 + 32) = 0xD000000000000012;
  *(_QWORD *)(v12 + 40) = 0x80000001001AA930;
  os_log(_:dso:log:_:_:)(v9, &_mh_execute_header, v10, "Failed to unarchive record -- creating new %@ record", 52, 2, v12);
  swift_bridgeObjectRelease(v12);
  sub_1000AB31C(0, (unint64_t *)&qword_1002103F0, CKRecord_ptr);
  v13._countAndFlagsBits = 0xD000000000000012;
  v13._object = (void *)0x80000001001AA930;
  return CKRecord.init(recordType:recordID:)(v13, v8);
}

CKRecord sub_1000A9BCC()
{
  uint64_t v0;
  void *v1;
  void *v2;
  Swift::String v3;
  void *v4;
  Swift::String v5;
  Class isa;
  Swift::String v7;
  CKRecordID v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::String v13;

  sub_1000AB31C(0, &qword_1002111C0, CKRecordID_ptr);
  type metadata accessor for DeviceRecord(0);
  v0 = UUID.uuidString.getter();
  v2 = v1;
  sub_1000AB31C(0, (unint64_t *)&unk_100210850, CKRecordZoneID_ptr);
  v3._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)(CKCurrentUserDefaultName);
  v3._object = v4;
  v5._object = (void *)0x80000001001AA990;
  v5._countAndFlagsBits = 0xD00000000000001ELL;
  isa = CKRecordZoneID.init(zoneName:ownerName:)(v5, v3).super.isa;
  v7._countAndFlagsBits = v0;
  v7._object = v2;
  v8.super.isa = CKRecordID.init(recordName:zoneID:)(v7, (CKRecordZoneID)isa).super.isa;
  v9 = static os_log_type_t.default.getter();
  if (qword_1002101E0 != -1)
    swift_once(&qword_1002101E0, sub_1001687B0);
  v10 = qword_100218DE8;
  v11 = sub_1000A0980((uint64_t *)&unk_1002103C0);
  v12 = swift_allocObject(v11, 72, 7);
  *(_OWORD *)(v12 + 16) = xmmword_100184870;
  *(_QWORD *)(v12 + 56) = &type metadata for String;
  *(_QWORD *)(v12 + 64) = sub_1000A0DF4();
  strcpy((char *)(v12 + 32), "DeviceRecord");
  *(_BYTE *)(v12 + 45) = 0;
  *(_WORD *)(v12 + 46) = -5120;
  os_log(_:dso:log:_:_:)(v9, &_mh_execute_header, v10, "Failed to unarchive record -- creating new %@ record", 52, 2, v12);
  swift_bridgeObjectRelease(v12);
  sub_1000AB31C(0, (unint64_t *)&qword_1002103F0, CKRecord_ptr);
  v13._countAndFlagsBits = 0x6552656369766544;
  v13._object = (void *)0xEC00000064726F63;
  return CKRecord.init(recordType:recordID:)(v13, v8);
}

CKRecord sub_1000A9D94(uint64_t a1)
{
  return sub_1000A9DE4(a1, (uint64_t)&OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_identifier, 0xD000000000000011, (void *)0x8000000100185690);
}

CKRecord sub_1000A9DB8(uint64_t a1)
{
  return sub_1000A9DE4(a1, (uint64_t)&OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_identifier, 0x6563697665444141, (void *)0xEE0064726F636552);
}

CKRecord sub_1000A9DE4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  Swift::String v10;
  void *v11;
  Swift::String v12;
  Class isa;
  Swift::String v14;
  CKRecordID v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  Swift::String v20;

  v6 = sub_1000AB31C(0, &qword_1002111C0, CKRecordID_ptr);
  v7 = UUID.uuidString.getter(v6);
  v9 = v8;
  sub_1000AB31C(0, (unint64_t *)&unk_100210850, CKRecordZoneID_ptr);
  v10._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)(CKCurrentUserDefaultName);
  v10._object = v11;
  v12._object = (void *)0x80000001001AB270;
  v12._countAndFlagsBits = 0xD000000000000012;
  isa = CKRecordZoneID.init(zoneName:ownerName:)(v12, v10).super.isa;
  v14._countAndFlagsBits = v7;
  v14._object = v9;
  v15.super.isa = CKRecordID.init(recordName:zoneID:)(v14, (CKRecordZoneID)isa).super.isa;
  v16 = static os_log_type_t.default.getter(v15.super.isa);
  if (qword_1002101E0 != -1)
    swift_once(&qword_1002101E0, sub_1001687B0);
  v17 = qword_100218DE8;
  v18 = sub_1000A0980((uint64_t *)&unk_1002103C0);
  v19 = swift_allocObject(v18, 72, 7);
  *(_OWORD *)(v19 + 16) = xmmword_100184870;
  *(_QWORD *)(v19 + 56) = &type metadata for String;
  *(_QWORD *)(v19 + 64) = sub_1000A0DF4();
  *(_QWORD *)(v19 + 32) = a3;
  *(_QWORD *)(v19 + 40) = a4;
  os_log(_:dso:log:_:_:)(v16, &_mh_execute_header, v17, "Failed to unarchive record -- creating new %@ record", 52, 2, v19);
  swift_bridgeObjectRelease(v19);
  sub_1000AB31C(0, (unint64_t *)&qword_1002103F0, CKRecord_ptr);
  v20._countAndFlagsBits = a3;
  v20._object = a4;
  return CKRecord.init(recordType:recordID:)(v20, v15);
}

unint64_t sub_1000A9F8C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::Int v7;
  _QWORD v9[9];

  v3 = *(_QWORD *)(v1 + 40);
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v6 = v5;
  Hasher.init(_seed:)(v9, v3);
  String.hash(into:)(v9, v4, v6);
  v7 = Hasher._finalize()();
  swift_bridgeObjectRelease(v6);
  return sub_1000AA20C(a1, v7);
}

unint64_t sub_1000AA00C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  Swift::Int v5;
  _QWORD v7[9];

  Hasher.init(_seed:)(v7, *(_QWORD *)(v2 + 40));
  String.hash(into:)(v7, a1, a2);
  v5 = Hasher._finalize()();
  return sub_1000AA380(a1, a2, v5);
}

unint64_t sub_1000AA070(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::Int v6;
  _QWORD v8[9];

  Hasher.init(_seed:)(v8, *(_QWORD *)(v1 + 40));
  type metadata accessor for CFString(0);
  v4 = v3;
  v5 = sub_1000A0940(&qword_100211B50, (uint64_t (*)(uint64_t))type metadata accessor for CFString, (uint64_t)&unk_1001849EC);
  _CFObject.hash(into:)(v8, v4, v5);
  v6 = Hasher._finalize()();
  return sub_1000AA460(a1, v6);
}

unint64_t sub_1000AA0F8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;

  v2 = v1;
  v4 = NSObject._rawHashValue(seed:)(*(_QWORD *)(v2 + 40));
  return sub_1000AA5A0(a1, v4, (unint64_t *)&qword_1002103F0, CKRecord_ptr);
}

unint64_t sub_1000AA144(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;

  v2 = v1;
  v4 = NSObject._rawHashValue(seed:)(*(_QWORD *)(v2 + 40));
  return sub_1000AA5A0(a1, v4, &qword_1002111C0, CKRecordID_ptr);
}

unint64_t sub_1000AA190(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;

  v2 = v1;
  v4 = NSObject._rawHashValue(seed:)(*(_QWORD *)(v2 + 40));
  return sub_1000AA5A0(a1, v4, (unint64_t *)&unk_100210850, CKRecordZoneID_ptr);
}

unint64_t sub_1000AA1DC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;

  v2 = v1;
  v4 = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(v2 + 40));
  return sub_1000AA6B0(a1, v4);
}

unint64_t sub_1000AA20C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  char v22;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  v5 = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
  {
    v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v5));
    v9 = v8;
    v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
    if (v7 == v10 && v9 == v11)
    {
LABEL_16:
      swift_bridgeObjectRelease_n(v9, 2);
      return v5;
    }
    v13 = v11;
    v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v9, v10, v11, 0);
    swift_bridgeObjectRelease(v9);
    swift_bridgeObjectRelease(v13);
    if ((v14 & 1) == 0)
    {
      v15 = ~v4;
      v5 = (v5 + 1) & v15;
      if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
      {
        while (1)
        {
          v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v5));
          v9 = v17;
          v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
          if (v16 == v18 && v9 == v19)
            break;
          v21 = v19;
          v22 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v9, v18, v19, 0);
          swift_bridgeObjectRelease(v9);
          swift_bridgeObjectRelease(v21);
          if ((v22 & 1) == 0)
          {
            v5 = (v5 + 1) & v15;
            if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
              continue;
          }
          return v5;
        }
        goto LABEL_16;
      }
    }
  }
  return v5;
}

unint64_t sub_1000AA380(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  BOOL v16;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * v6);
    v11 = v10[1];
    v12 = *v10 == a1 && v11 == a2;
    if (!v12 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v10, v11, a1, a2, 0) & 1) == 0)
    {
      v13 = ~v5;
      do
      {
        v6 = (v6 + 1) & v13;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          break;
        v14 = (_QWORD *)(v9 + 16 * v6);
        v15 = v14[1];
        v16 = *v14 == a1 && v15 == a2;
      }
      while (!v16 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v14, v15, a1, a2, 0) & 1) == 0);
    }
  }
  return v6;
}

unint64_t sub_1000AA460(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t i;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  id v12;
  char v13;
  uint64_t v14;
  id v15;
  char v16;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  i = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
  {
    v6 = v2;
    type metadata accessor for CFString(0);
    v9 = v8;
    v10 = *(void **)(*(_QWORD *)(v6 + 48) + 8 * i);
    v11 = sub_1000A0940(&qword_100211B50, (uint64_t (*)(uint64_t))type metadata accessor for CFString, (uint64_t)&unk_1001849EC);
    v12 = v10;
    v13 = static _CFObject.== infix(_:_:)(v12, a1, v9, v11);

    if ((v13 & 1) == 0)
    {
      v14 = ~v4;
      for (i = (i + 1) & v14; ((*(_QWORD *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0; i = (i + 1) & v14)
      {
        v15 = *(id *)(*(_QWORD *)(v6 + 48) + 8 * i);
        v16 = static _CFObject.== infix(_:_:)(v15, a1, v9, v11);

        if ((v16 & 1) != 0)
          break;
      }
    }
  }
  return i;
}

unint64_t sub_1000AA5A0(uint64_t a1, uint64_t a2, unint64_t *a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t i;
  id v8;
  char v9;
  uint64_t v10;
  id v11;
  char v12;

  v5 = v4 + 64;
  v6 = -1 << *(_BYTE *)(v4 + 32);
  i = a2 & ~v6;
  if (((*(_QWORD *)(v4 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
  {
    sub_1000AB31C(0, a3, a4);
    v8 = *(id *)(*(_QWORD *)(v4 + 48) + 8 * i);
    v9 = static NSObject.== infix(_:_:)();

    if ((v9 & 1) == 0)
    {
      v10 = ~v6;
      for (i = (i + 1) & v10; ((*(_QWORD *)(v5 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0; i = (i + 1) & v10)
      {
        v11 = *(id *)(*(_QWORD *)(v4 + 48) + 8 * i);
        v12 = static NSObject.== infix(_:_:)();

        if ((v12 & 1) != 0)
          break;
      }
    }
  }
  return i;
}

unint64_t sub_1000AA6B0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  char v7;
  _BYTE v9[40];

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v6 = ~v3;
    do
    {
      sub_1000AB400(*(_QWORD *)(v2 + 48) + 40 * v4, (uint64_t)v9);
      v7 = static AnyHashable.== infix(_:_:)(v9, a1);
      sub_1000AB43C((uint64_t)v9);
      if ((v7 & 1) != 0)
        break;
      v4 = (v4 + 1) & v6;
    }
    while (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

uint64_t sub_1000AA774(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t result;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  char v19;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = sub_1000AA00C(a2, a3);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  result = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= result && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        *(_QWORD *)(v18[7] + 8 * v12) = a1;
        return result;
      }
      goto LABEL_11;
    }
    if (v17 >= result && (a4 & 1) == 0)
    {
      result = (uint64_t)sub_100100454();
      goto LABEL_7;
    }
    sub_1000FF168(result, a4 & 1);
    result = sub_1000AA00C(a2, a3);
    if ((v16 & 1) == (v19 & 1))
    {
      v12 = result;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_1001003C4(v12, a2, a3, a1, v18);
      return swift_bridgeObjectRetain(a3);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

void sub_1000AA894(uint64_t a1, void *a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  _BOOL8 v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  id v19;
  uint64_t v20;

  v4 = (_QWORD **)v3;
  v7 = (_QWORD *)*v3;
  v9 = sub_1000AA190((uint64_t)a2);
  v10 = v7[2];
  v11 = (v8 & 1) == 0;
  v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
  }
  else
  {
    v13 = v8;
    v14 = v7[3];
    if (v14 >= v12 && (a3 & 1) != 0)
    {
LABEL_7:
      v15 = *v4;
      if ((v13 & 1) != 0)
      {
LABEL_8:
        v16 = v15[7];

        *(_QWORD *)(v16 + 8 * v9) = a1;
        return;
      }
      goto LABEL_11;
    }
    if (v14 >= v12 && (a3 & 1) == 0)
    {
      sub_1001007C0();
      goto LABEL_7;
    }
    sub_1000FFA5C(v12, a3 & 1);
    v17 = sub_1000AA190((uint64_t)a2);
    if ((v13 & 1) == (v18 & 1))
    {
      v9 = v17;
      v15 = *v4;
      if ((v13 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_10010040C(v9, (uint64_t)a2, a1, v15);
      v19 = a2;
      return;
    }
  }
  v20 = sub_1000AB31C(0, (unint64_t *)&unk_100210850, CKRecordZoneID_ptr);
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v20);
  __break(1u);
}

uint64_t sub_1000AA9C0(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t result;
  unint64_t v21;
  char v22;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = sub_1000AA00C(a2, a3);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        v19 = v18[7];
        result = swift_unknownObjectRelease(*(_QWORD *)(v19 + 8 * v12));
        *(_QWORD *)(v19 + 8 * v12) = a1;
        return result;
      }
      goto LABEL_11;
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_100100964();
      goto LABEL_7;
    }
    sub_1000FFD2C(v15, a4 & 1);
    v21 = sub_1000AA00C(a2, a3);
    if ((v16 & 1) == (v22 & 1))
    {
      v12 = v21;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_1001003C4(v12, a2, a3, a1, v18);
      return swift_bridgeObjectRetain(a3);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

uint64_t sub_1000AAAEC(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2)
    v7 = 2;
  v8 = v7 - 2;
  v9 = (unint64_t *)(a1 + 80);
  v2 = 64;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

unint64_t _s15audioaccessoryd17AAProxCardsRecordC12ProxCardKeysO8rawValueAESgSS_tcfC_0(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1001E5630, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 5)
    return 5;
  else
    return v3;
}

unint64_t sub_1000AABBC()
{
  unint64_t result;

  result = qword_100210768;
  if (!qword_100210768)
  {
    result = swift_getWitnessTable(&unk_1001857C8, &type metadata for AAProxCardsRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100210768);
  }
  return result;
}

uint64_t type metadata accessor for AAProxCardsRecord(uint64_t a1)
{
  uint64_t result;

  result = qword_100210818;
  if (!qword_100210818)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AAProxCardsRecord);
  return result;
}

uint64_t sub_1000AAC3C(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    v7 = sub_1000A4E14(&qword_100210780);
    result = swift_getWitnessTable(a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1000AACA4()
{
  unint64_t result;

  result = qword_1002107C0;
  if (!qword_1002107C0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for AAProxCardsRecord.ProxCardKeys, &type metadata for AAProxCardsRecord.ProxCardKeys);
    atomic_store(result, (unint64_t *)&qword_1002107C0);
  }
  return result;
}

uint64_t sub_1000AACE8()
{
  return sub_1000AAD14(&qword_1002107C8, &qword_1002107D0, (uint64_t)&protocol conformance descriptor for [A]);
}

uint64_t sub_1000AAD14(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_1000A4E14(a2);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000AAD54(uint64_t a1)
{
  uint64_t result;

  result = sub_1000A0940(&qword_1002107D8, type metadata accessor for AAProxCardsRecord, (uint64_t)&unk_10018562C);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000AAD90(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_1000A0940(&qword_1002107E0, type metadata accessor for AAProxCardsRecord, (uint64_t)&protocol conformance descriptor for AAProxCardsRecord);
  result = sub_1000A0940(&qword_1002107E8, type metadata accessor for AAProxCardsRecord, (uint64_t)&protocol conformance descriptor for AAProxCardsRecord);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t sub_1000AADEC()
{
  return type metadata accessor for AAProxCardsRecord(0);
}

uint64_t sub_1000AADF4(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[5];

  v5[0] = &unk_1001856C8;
  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v5[1] = *(_QWORD *)(result - 8) + 64;
    v5[2] = &unk_1001856E0;
    v5[3] = (char *)&value witness table for Builtin.BridgeObject + 64;
    result = type metadata accessor for Date(319);
    if (v4 <= 0x3F)
    {
      v5[4] = *(_QWORD *)(result - 8) + 64;
      result = swift_updateClassMetadata2(a1, 256, 5, v5, a1 + 80);
      if (!result)
        return 0;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AAProxCardsRecord.ProxCardKeys()
{
  return &type metadata for AAProxCardsRecord.ProxCardKeys;
}

uint64_t getEnumTagSinglePayload for DeviceManager.DeviceManagerError(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFC)
    goto LABEL_17;
  if (a2 + 4 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 4) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 4;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 4;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 4;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 5;
  v8 = v6 - 5;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s15audioaccessoryd17AAProxCardsRecordC12ProxCardKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1000AAF94 + 4 * byte_100185528[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1000AAFC8 + 4 * byte_100185523[v4]))();
}

uint64_t sub_1000AAFC8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000AAFD0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000AAFD8);
  return result;
}

uint64_t sub_1000AAFE4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000AAFECLL);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1000AAFF0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000AAFF8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AAProxCardsRecord.CodingKeys()
{
  return &type metadata for AAProxCardsRecord.CodingKeys;
}

unint64_t sub_1000AB018()
{
  unint64_t result;

  result = qword_100210828;
  if (!qword_100210828)
  {
    result = swift_getWitnessTable(&unk_1001857A0, &type metadata for AAProxCardsRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100210828);
  }
  return result;
}

unint64_t sub_1000AB060()
{
  unint64_t result;

  result = qword_100210830;
  if (!qword_100210830)
  {
    result = swift_getWitnessTable(&unk_100185710, &type metadata for AAProxCardsRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100210830);
  }
  return result;
}

unint64_t sub_1000AB0A8()
{
  unint64_t result;

  result = qword_100210838;
  if (!qword_100210838)
  {
    result = swift_getWitnessTable(&unk_100185738, &type metadata for AAProxCardsRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100210838);
  }
  return result;
}

uint64_t sub_1000AB0EC(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char v10;

  if (a1 == 0x74654D64756F6C63 && a2 == 0xED00006174616461)
  {
    v5 = 0xED00006174616461;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x74654D64756F6C63, 0xED00006174616461, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x696669746E656469 && a2 == 0xEA00000000007265)
  {
    v7 = 0xEA00000000007265;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x696669746E656469, 0xEA00000000007265, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0xD000000000000010)
  {
    v8 = 0x80000001001AA8D0;
    if (a2 == 0x80000001001AA8D0)
      goto LABEL_19;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x80000001001AA8D0, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
LABEL_19:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if (a1 == 0xD000000000000010)
  {
    v9 = 0x80000001001AB0A0;
    if (a2 == 0x80000001001AB0A0)
      goto LABEL_24;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x80000001001AB0A0, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
LABEL_24:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if (a1 == 0xD000000000000010 && a2 == 0x80000001001AAA20)
  {
    swift_bridgeObjectRelease(0x80000001001AAA20);
    return 4;
  }
  else
  {
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x80000001001AAA20, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v10 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

uint64_t sub_1000AB31C(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v5;

  result = *a2;
  if (!*a2)
  {
    v5 = objc_opt_self(*a3);
    result = swift_getObjCClassMetadata(v5);
    atomic_store(result, a2);
  }
  return result;
}

_OWORD *sub_1000AB354(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

unint64_t sub_1000AB364()
{
  unint64_t result;

  result = qword_100210898;
  if (!qword_100210898)
  {
    result = swift_getWitnessTable(&unk_1001858A0, &type metadata for AAProxCardsRecord.AAProxCardsRecordError);
    atomic_store(result, (unint64_t *)&qword_100210898);
  }
  return result;
}

unint64_t sub_1000AB3A8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002108A0;
  if (!qword_1002108A0)
  {
    v1 = sub_1000AB31C(255, (unint64_t *)&qword_1002103F0, CKRecord_ptr);
    result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_1002108A0);
  }
  return result;
}

uint64_t sub_1000AB400(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(&type metadata for AnyHashable - 1) + 16))(a2, a1);
  return a2;
}

uint64_t sub_1000AB43C(uint64_t a1)
{
  (*(void (**)(void))(*(&type metadata for AnyHashable - 1) + 8))();
  return a1;
}

uint64_t getEnumTagSinglePayload for AAProxCardsRecord.AAProxCardsRecordError(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFB)
    goto LABEL_17;
  if (a2 + 5 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 5) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 5;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 5;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 5;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 6;
  v8 = v6 - 6;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for AAProxCardsRecord.AAProxCardsRecordError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_1000AB54C + 4 * byte_100185532[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_1000AB580 + 4 * byte_10018552D[v4]))();
}

uint64_t sub_1000AB580(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000AB588(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000AB590);
  return result;
}

uint64_t sub_1000AB59C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000AB5A4);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_1000AB5A8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000AB5B0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AAProxCardsRecord.AAProxCardsRecordError()
{
  return &type metadata for AAProxCardsRecord.AAProxCardsRecordError;
}

unint64_t sub_1000AB5D0()
{
  unint64_t result;

  result = qword_1002108D8;
  if (!qword_1002108D8)
  {
    result = swift_getWitnessTable(&unk_100185878, &type metadata for AAProxCardsRecord.AAProxCardsRecordError);
    atomic_store(result, (unint64_t *)&qword_1002108D8);
  }
  return result;
}

uint64_t sub_1000AB614(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_1000A0980(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000AB658()
{
  return sub_1000AB690(type metadata accessor for LegacyMagicPairingSettingsRecords, (uint64_t (*)(char *))sub_1000A97D0, (void (*)(uint64_t *))sub_1000E54A0);
}

uint64_t sub_1000AB674()
{
  return sub_1000AB690(type metadata accessor for LegacyAccountMagicKeysRecord, (uint64_t (*)(char *))sub_1000A9808, (void (*)(uint64_t *))sub_1000B22B4);
}

uint64_t sub_1000AB690(uint64_t (*a1)(_QWORD), uint64_t (*a2)(char *), void (*a3)(uint64_t *))
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  void *v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;

  v7 = a1(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v17 - v8;
  v10 = objc_autoreleasePoolPush();
  v11 = (uint64_t *)(v3 + *(int *)(v7 + 24));
  v12 = *v11;
  v13 = v11[1];
  sub_1000A0E74(*v11, v13);
  sub_100109DEC(v12, v13);
  v15 = v14;
  sub_1000A103C(v12, v13);
  sub_1000AE548(v3, (uint64_t)v9, a1);
  if (!v15)
    v15 = a2(v9);
  sub_1000AE58C((uint64_t)v9, a1);
  v18 = v15;
  a3(&v18);
  objc_autoreleasePoolPop(v10);
  return v15;
}

Class sub_1000AB790()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  void *v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  objc_class *v8;
  Class isa;
  uint64_t v11;
  Class v12;

  v1 = type metadata accessor for MagicPairingSettingsRecord(0);
  __chkstk_darwin(v1);
  v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = objc_autoreleasePoolPush();
  v5 = (uint64_t *)(v0 + *(int *)(v1 + 20));
  v6 = *v5;
  v7 = v5[1];
  sub_1000A0E74(*v5, v7);
  sub_100109DEC(v6, v7);
  isa = v8;
  sub_1000A103C(v6, v7);
  sub_1000AE548(v0, (uint64_t)v3, type metadata accessor for MagicPairingSettingsRecord);
  if (!isa)
    isa = sub_1000A99D8((uint64_t)v3).super.isa;
  sub_1000AE58C((uint64_t)v3, type metadata accessor for MagicPairingSettingsRecord);
  v12 = isa;
  sub_1000CBDA8((id *)&v12);
  objc_autoreleasePoolPop(v4);
  return isa;
}

uint64_t sub_1000AB88C()
{
  return sub_1000AB8C4(type metadata accessor for SoundProfileRecord, (uint64_t (*)(char *))sub_1000A9A14, (void (*)(uint64_t *))sub_1000ADB20);
}

uint64_t sub_1000AB8A8()
{
  return sub_1000AB8C4(type metadata accessor for DeviceRecord, (uint64_t (*)(char *))sub_1000A9BCC, (void (*)(uint64_t *))sub_10009E74C);
}

uint64_t sub_1000AB8C4(uint64_t (*a1)(_QWORD), uint64_t (*a2)(char *), void (*a3)(uint64_t *))
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  void *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  v7 = a1(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v16 - v8;
  v10 = objc_autoreleasePoolPush();
  v11 = *v3;
  v12 = v3[1];
  sub_1000A0E74(*v3, v12);
  sub_100109DEC(v11, v12);
  v14 = v13;
  sub_1000A103C(v11, v12);
  sub_1000AE548((uint64_t)v3, (uint64_t)v9, a1);
  if (!v14)
    v14 = a2(v9);
  sub_1000AE58C((uint64_t)v9, a1);
  v17 = v14;
  a3(&v17);
  objc_autoreleasePoolPop(v10);
  return v14;
}

BOOL sub_1000AB9B8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t sub_1000AB9D0(uint64_t a1)
{
  return sub_1000ABA18(a1, qword_100218C38, 0xD000000000000012, 0x8000000100185900);
}

uint64_t sub_1000AB9F4(uint64_t a1)
{
  return sub_1000ABA18(a1, qword_100218C50, 0xD000000000000011, 0x80000001001AB360);
}

uint64_t sub_1000ABA18(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;

  v7 = sub_1000A0980((uint64_t *)&unk_100210840);
  __chkstk_darwin(v7);
  v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for URL(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000A09C0(v14, a2);
  sub_1000A0A00(v10, (uint64_t)a2);
  URL.init(string:)(0x6552646568636143, 0xED00007364726F63);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v13, v9, v10);
    URL.appendingPathComponent(_:isDirectory:)(a3, a4, 1);
    return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  }
  return result;
}

uint64_t sub_1000ABB64()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  void *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  Swift::String v23;
  void *object;
  Swift::String v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  Swift::String v32;
  void *v33;
  Swift::String v34;
  uint64_t v35;
  Swift::String v36;
  void *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  Swift::String v41;
  id v42;
  void *v43;
  uint64_t v44;
  void (*v45)(char *, uint64_t, uint64_t, uint64_t);
  unsigned int (*v46)(char *, uint64_t, uint64_t);
  uint64_t v47;
  char *v48;
  void *v49;
  Class isa;
  id v51;
  uint64_t v52;
  void *v53;
  void *v54;
  void *v55;
  Class v56;
  id v57;
  void *v58;
  Swift::String v59;
  Swift::String v60;
  id v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  id v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  void *v71;
  Class v72;
  id v73;
  uint64_t v74;
  void *v75;
  void *v76;
  void *v77;
  Class v78;
  id v79;
  void *v80;
  Swift::String v81;
  Swift::String v82;
  id v83;
  void *v84;
  uint64_t v85;
  void *v86;
  void *v87;
  void *v88;
  Swift::String v89;
  Swift::String v90;
  id v91;
  void *v92;
  uint64_t v93;
  void *v94;
  void *v95;
  Swift::String v96;
  uint64_t countAndFlagsBits;
  void *v98;
  Swift::String v99;
  char *v101;
  char *v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  void *v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  id v110;
  Swift::String v111;
  uint64_t v112;
  unint64_t v113;

  v1 = type metadata accessor for SoundProfileRecord(0);
  v2 = __chkstk_darwin(v1);
  v4 = (char *)&v101 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  v103 = (uint64_t)&v101 - v5;
  v6 = type metadata accessor for Date(0);
  v108 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v101 = (char *)&v101 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1000A0980((uint64_t *)&unk_1002103D0);
  v9 = __chkstk_darwin(v8);
  v104 = (char *)&v101 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v101 - v12;
  v14 = __chkstk_darwin(v11);
  v16 = (char *)&v101 - v15;
  __chkstk_darwin(v14);
  v18 = (char *)&v101 - v17;
  v19 = (void *)sub_1000AB8C4(type metadata accessor for SoundProfileRecord, (uint64_t (*)(char *))sub_1000A9A14, (void (*)(uint64_t *))sub_1000ADB20);
  v112 = 0;
  v113 = 0xE000000000000000;
  v20 = IsAppleInternalBuild(v19);
  v107 = v4;
  v109 = v1;
  v102 = v13;
  v111._countAndFlagsBits = 0;
  v111._object = (void *)0xE000000000000000;
  if (v20)
  {
    _StringGuts.grow(_:)(27);
    swift_bridgeObjectRelease(v111._object);
    v111._countAndFlagsBits = 0xD000000000000013;
    v111._object = (void *)0x80000001001AB2C0;
    v21 = type metadata accessor for UUID(0);
    v22 = sub_1000A0940((unint64_t *)&unk_100210750, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v23._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v21, v22);
    object = v23._object;
    String.append(_:)(v23);
    swift_bridgeObjectRelease(object);
    v25._countAndFlagsBits = 2108704;
    v25._object = (void *)0xE300000000000000;
    String.append(_:)(v25);
    v26 = type metadata accessor for URL(0);
    v27 = sub_1000A0940((unint64_t *)&unk_100211A60, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
    v28 = dispatch thunk of CustomStringConvertible.description.getter(v26, v27);
  }
  else
  {
    _StringGuts.grow(_:)(27);
    swift_bridgeObjectRelease(v111._object);
    v111._countAndFlagsBits = 0xD000000000000013;
    v111._object = (void *)0x80000001001AB2C0;
    v30 = type metadata accessor for UUID(0);
    v31 = sub_1000A0940((unint64_t *)&unk_100210750, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v32._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v30, v31);
    v33 = v32._object;
    String.append(_:)(v32);
    swift_bridgeObjectRelease(v33);
    v34._countAndFlagsBits = 2108704;
    v34._object = (void *)0xE300000000000000;
    String.append(_:)(v34);
    v28 = URL.lastPathComponent.getter();
  }
  v35 = v29;
  String.append(_:)(*(Swift::String *)&v28);
  swift_bridgeObjectRelease(v35);
  v36._countAndFlagsBits = 10;
  v36._object = (void *)0xE100000000000000;
  String.append(_:)(v36);
  v37 = v111._object;
  String.append(_:)(v111);
  v38 = v0;
  swift_bridgeObjectRelease(v37);
  v40 = v112;
  v39 = v113;
  v111._countAndFlagsBits = 0;
  v111._object = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(62);
  v41._countAndFlagsBits = 0xD000000000000011;
  v41._object = (void *)0x80000001001AA9E0;
  String.append(_:)(v41);
  v42 = objc_msgSend(v19, "creationDate");
  v110 = v19;
  v105 = v40;
  v106 = (void *)v39;
  if (v42)
  {
    v43 = v42;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v42);

    v44 = v108;
    v45 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v108 + 56);
    v45(v16, 0, 1, v6);
  }
  else
  {
    v44 = v108;
    v45 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v108 + 56);
    v45(v16, 1, 1, v6);
  }
  sub_1000A0F38((uint64_t)v16, (uint64_t)v18);
  v46 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v44 + 48);
  if (v46(v18, 1, v6))
  {
    sub_1000A1000((uint64_t)v18, (uint64_t *)&unk_1002103D0);
    v47 = v103;
    sub_1000AE548(v0, v103, type metadata accessor for SoundProfileRecord);
  }
  else
  {
    v48 = v101;
    (*(void (**)(char *, char *, uint64_t))(v44 + 16))(v101, v18, v6);
    sub_1000A1000((uint64_t)v18, (uint64_t *)&unk_1002103D0);
    v49 = (void *)objc_opt_self(NSDateFormatter);
    isa = Date._bridgeToObjectiveC()().super.isa;
    v51 = objc_msgSend(v49, "localizedStringFromDate:dateStyle:timeStyle:", isa, 2, 2);

    v52 = static String._unconditionallyBridgeFromObjectiveC(_:)(v51);
    v54 = v53;

    (*(void (**)(char *, uint64_t))(v44 + 8))(v48, v6);
    v47 = v103;
    sub_1000AE548(v38, v103, type metadata accessor for SoundProfileRecord);
    if (v54)
      goto LABEL_11;
  }
  v55 = (void *)objc_opt_self(NSDateFormatter);
  v56 = Date._bridgeToObjectiveC()().super.isa;
  v57 = objc_msgSend(v55, "localizedStringFromDate:dateStyle:timeStyle:", v56, 2, 2);

  v52 = static String._unconditionallyBridgeFromObjectiveC(_:)(v57);
  v54 = v58;

LABEL_11:
  sub_1000AE58C(v47, type metadata accessor for SoundProfileRecord);
  v59._countAndFlagsBits = v52;
  v59._object = v54;
  String.append(_:)(v59);
  swift_bridgeObjectRelease(v54);
  v60._countAndFlagsBits = 0x696669646F6D202CLL;
  v60._object = (void *)0xEE00203A6E4F6465;
  String.append(_:)(v60);
  v61 = objc_msgSend(v110, "modificationDate");
  if (v61)
  {
    v62 = v61;
    v63 = (uint64_t)v104;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v61);

    v64 = 0;
  }
  else
  {
    v64 = 1;
    v63 = (uint64_t)v104;
  }
  v65 = (uint64_t)v102;
  v45((char *)v63, v64, 1, v6);
  sub_1000A0F38(v63, v65);
  if (v46((char *)v65, 1, v6))
  {
    sub_1000A1000(v65, (uint64_t *)&unk_1002103D0);
    v66 = (uint64_t)v107;
    sub_1000AE548(v38, (uint64_t)v107, type metadata accessor for SoundProfileRecord);
    v67 = v110;
    v68 = v105;
  }
  else
  {
    v69 = v108;
    v70 = v101;
    (*(void (**)(char *, uint64_t, uint64_t))(v108 + 16))(v101, v65, v6);
    sub_1000A1000(v65, (uint64_t *)&unk_1002103D0);
    v71 = (void *)objc_opt_self(NSDateFormatter);
    v72 = Date._bridgeToObjectiveC()().super.isa;
    v73 = objc_msgSend(v71, "localizedStringFromDate:dateStyle:timeStyle:", v72, 2, 2);

    v74 = static String._unconditionallyBridgeFromObjectiveC(_:)(v73);
    v76 = v75;

    (*(void (**)(char *, uint64_t))(v69 + 8))(v70, v6);
    v66 = (uint64_t)v107;
    sub_1000AE548(v38, (uint64_t)v107, type metadata accessor for SoundProfileRecord);
    v67 = v110;
    v68 = v105;
    if (v76)
      goto LABEL_18;
  }
  v77 = (void *)objc_opt_self(NSDateFormatter);
  v78 = Date._bridgeToObjectiveC()().super.isa;
  v79 = objc_msgSend(v77, "localizedStringFromDate:dateStyle:timeStyle:", v78, 2, 2);

  v74 = static String._unconditionallyBridgeFromObjectiveC(_:)(v79);
  v76 = v80;

LABEL_18:
  sub_1000AE58C(v66, type metadata accessor for SoundProfileRecord);
  v81._countAndFlagsBits = v74;
  v81._object = v76;
  String.append(_:)(v81);
  swift_bridgeObjectRelease(v76);
  v82._countAndFlagsBits = 0x696669646F6D202CLL;
  v82._object = (void *)0xEF203A7962206465;
  String.append(_:)(v82);
  v83 = objc_msgSend(v67, "modifiedByDevice");
  if (v83)
  {
    v84 = v83;
    v85 = static String._unconditionallyBridgeFromObjectiveC(_:)(v83);
    v87 = v86;

  }
  else
  {
    v87 = (void *)0xE200000000000000;
    v85 = 15932;
  }
  v88 = v106;
  v89._countAndFlagsBits = v85;
  v89._object = v87;
  String.append(_:)(v89);
  swift_bridgeObjectRelease(v87);
  v90._countAndFlagsBits = 0x203A67617465202CLL;
  v90._object = (void *)0xE800000000000000;
  String.append(_:)(v90);
  v91 = objc_msgSend(v67, "recordChangeTag");
  if (v91)
  {
    v92 = v91;
    v93 = static String._unconditionallyBridgeFromObjectiveC(_:)(v91);
    v95 = v94;

  }
  else
  {
    v95 = (void *)0xE200000000000000;
    v93 = 15932;
  }
  v96._countAndFlagsBits = v93;
  v96._object = v95;
  String.append(_:)(v96);
  swift_bridgeObjectRelease(v95);
  countAndFlagsBits = v111._countAndFlagsBits;
  v98 = v111._object;
  v111._countAndFlagsBits = v68;
  v111._object = v88;
  swift_bridgeObjectRetain(v88);
  v99._countAndFlagsBits = countAndFlagsBits;
  v99._object = v98;
  String.append(_:)(v99);
  swift_bridgeObjectRelease(v88);
  swift_bridgeObjectRelease(v98);

  return v111._countAndFlagsBits;
}

uint64_t type metadata accessor for SoundProfileRecord(uint64_t a1)
{
  uint64_t result;

  result = qword_100210960;
  if (!qword_100210960)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SoundProfileRecord);
  return result;
}

uint64_t sub_1000AC460@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  char *v33;
  unint64_t v34;
  uint64_t v35;
  char *v36;
  id v38;
  id v39;
  char *v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  unsigned int (*v55)(char *, uint64_t, uint64_t);
  void *v56;
  uint64_t v57;
  unint64_t v58;
  objc_class *v59;
  Class isa;
  uint64_t v61;
  char *v62;
  id v63;
  uint64_t v64;
  void (*v65)(char *, char *, uint64_t);
  char *v66;
  void (*v67)(char *, uint64_t, uint64_t, uint64_t);
  char *v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  uint64_t *v74;
  unint64_t v75;
  uint64_t v76;
  objc_class *v77;
  Class v78;
  uint64_t v79;
  id v80;
  uint64_t v81;
  char *v82;
  void (*v83)(char *, char *, uint64_t);
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  unint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  uint64_t *v94;
  char *v95;
  char *v96;
  char *v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  _QWORD *v101;
  _QWORD *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  _QWORD *v111;
  id v112[3];
  char v113;

  v98 = a2;
  v3 = sub_1000A0980((uint64_t *)&unk_1002103D0);
  __chkstk_darwin(v3);
  v95 = (char *)&v89 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v97 = (char *)&v89 - v6;
  __chkstk_darwin(v7);
  v100 = (uint64_t)&v89 - v8;
  v9 = type metadata accessor for Date(0);
  v102 = *(_QWORD **)(v9 - 8);
  v103 = v9;
  __chkstk_darwin(v9);
  v96 = (char *)&v89 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v99 = (char *)&v89 - v12;
  v13 = type metadata accessor for URL(0);
  v104 = *(_QWORD *)(v13 - 8);
  v105 = v13;
  __chkstk_darwin(v13);
  v101 = (unint64_t *)((char *)&v89 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v15 = type metadata accessor for UUID(0);
  v16 = *(_QWORD *)(v15 - 8);
  v106 = v15;
  v107 = v16;
  __chkstk_darwin(v15);
  v109 = (char *)&v89 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v110 = sub_1000A0980(&qword_1002109E0);
  v108 = *(_QWORD *)(v110 - 8);
  __chkstk_darwin(v110);
  v19 = (char *)&v89 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for SoundProfileRecord(0);
  __chkstk_darwin(v20);
  v22 = (char *)&v89 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  v25 = (char *)&v89 - v24;
  __chkstk_darwin(v26);
  v28 = (uint64_t *)((char *)&v89 - v27);
  v29 = a1[3];
  v30 = a1[4];
  sub_1000A20D8(a1, v29);
  v31 = sub_1000AEF6C();
  v32 = v111;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for SoundProfileRecord.CodingKeys, &type metadata for SoundProfileRecord.CodingKeys, v31, v29, v30);
  if (v32)
    return sub_1000A2140(a1);
  v33 = v109;
  v92 = v25;
  v93 = v20;
  v91 = v22;
  v94 = v28;
  v111 = a1;
  v113 = 0;
  v34 = sub_1000A2160();
  v35 = v110;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v112, &type metadata for Data, &v113, v110, &type metadata for Data, v34);
  v36 = v19;
  v39 = v112[0];
  v38 = v112[1];
  v40 = v36;
  v41 = v94;
  *v94 = (uint64_t)v112[0];
  v41[1] = (uint64_t)v38;
  LOBYTE(v112[0]) = 1;
  v42 = sub_1000A0940((unint64_t *)&unk_1002105C0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v43 = v106;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v33, v106, v112, v35, v106, v42);
  v89 = (unint64_t)v38;
  v90 = (uint64_t)v39;
  v44 = v93;
  (*(void (**)(char *, char *, uint64_t))(v107 + 32))((char *)v41 + *(int *)(v93 + 20), v33, v43);
  LOBYTE(v112[0]) = 2;
  v45 = sub_1000A0940(&qword_1002109E8, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
  v46 = v101;
  v47 = v105;
  v109 = 0;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v101, v105, v112, v35, v105, v45);
  v48 = (*(uint64_t (**)(char *, _QWORD *, uint64_t))(v104 + 32))((char *)v41 + *(int *)(v44 + 24), v46, v47);
  v49 = (uint64_t *)((char *)v41 + *(int *)(v44 + 28));
  static Date.now.getter(v48);
  LOBYTE(v112[0]) = 3;
  v50 = sub_1000A0940(&qword_100210790, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  v51 = v100;
  v52 = v103;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v103, v112, v35, v103, v50);
  v109 = v40;
  v53 = v51;
  v54 = v102;
  v55 = (unsigned int (*)(char *, uint64_t, uint64_t))v102[6];
  if (v55((char *)v51, 1, v52) == 1)
  {
    v56 = objc_autoreleasePoolPush();
    v57 = v90;
    v58 = v89;
    sub_1000A0E74(v90, v89);
    sub_100109DEC(v57, v58);
    isa = v59;
    sub_1000A103C(v57, v58);
    v61 = (uint64_t)v92;
    sub_1000AE548((uint64_t)v94, (uint64_t)v92, type metadata accessor for SoundProfileRecord);
    v101 = v49;
    if (!isa)
      isa = sub_1000A9A14().super.isa;
    sub_1000AE58C(v61, type metadata accessor for SoundProfileRecord);
    v62 = v96;
    v112[0] = isa;
    sub_1000ADB20(v112);
    objc_autoreleasePoolPop(v56);
    v63 = -[objc_class modificationDate](isa, "modificationDate");

    if (v63)
    {
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v63);

      v64 = v52;
      v54 = v102;
      v65 = (void (*)(char *, char *, uint64_t))v102[4];
      v66 = v97;
      v65(v97, v62, v52);
      v67 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v54[7];
      v67(v66, 0, 1, v64);
      if (v55(v66, 1, v64) != 1)
      {
        (*(void (**)(char *, uint64_t))(v108 + 8))(v109, v110);
        v68 = v99;
        v69 = v103;
        v65(v99, v97, v103);
        v70 = v111;
        v71 = v98;
        v49 = v101;
LABEL_20:
        sub_1000A1000(v100, (uint64_t *)&unk_1002103D0);
        goto LABEL_21;
      }
    }
    else
    {
      v72 = v52;
      v67 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v102[7];
      v67(v97, 1, 1, v72);
    }
    v73 = objc_autoreleasePoolPush();
    v74 = v94;
    v76 = *v94;
    v75 = v94[1];
    sub_1000A0E74(*v94, v75);
    sub_100109DEC(v76, v75);
    v78 = v77;
    sub_1000A103C(v76, v75);
    v79 = (uint64_t)v91;
    sub_1000AE548((uint64_t)v74, (uint64_t)v91, type metadata accessor for SoundProfileRecord);
    if (!v78)
      v78 = sub_1000A9A14().super.isa;
    sub_1000AE58C(v79, type metadata accessor for SoundProfileRecord);
    v112[0] = v78;
    sub_1000ADB20(v112);
    objc_autoreleasePoolPop(v73);
    v80 = -[objc_class creationDate](v78, "creationDate");

    if (v80)
    {
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v80);

      v54 = v102;
      v81 = v103;
      v82 = v62;
      v83 = (void (*)(char *, char *, uint64_t))v102[4];
      v84 = (uint64_t)v95;
      v83(v95, v82, v103);
      v67((char *)v84, 0, 1, v81);
      v85 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v55)(v84, 1, v81);
      v70 = v111;
      v86 = (uint64_t)v97;
      v71 = v98;
      v87 = v108;
      if ((_DWORD)v85 != 1)
      {
        (*(void (**)(char *, uint64_t))(v108 + 8))(v109, v110);
        v68 = v99;
        v83(v99, (char *)v84, v103);
LABEL_19:
        v49 = v101;
        sub_1000A1000(v86, (uint64_t *)&unk_1002103D0);
        v69 = v103;
        goto LABEL_20;
      }
    }
    else
    {
      v84 = (uint64_t)v95;
      v85 = ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v67)(v95, 1, 1, v103);
      v70 = v111;
      v54 = v102;
      v86 = (uint64_t)v97;
      v71 = v98;
      v87 = v108;
    }
    v68 = v99;
    static Date.now.getter(v85);
    (*(void (**)(char *, uint64_t))(v87 + 8))(v109, v110);
    sub_1000A1000(v84, (uint64_t *)&unk_1002103D0);
    goto LABEL_19;
  }
  (*(void (**)(char *, uint64_t))(v108 + 8))(v109, v110);
  v69 = v52;
  v68 = v99;
  ((void (*)(char *, uint64_t, uint64_t))v54[4])(v99, v53, v69);
  v70 = v111;
  v71 = v98;
LABEL_21:
  ((void (*)(_QWORD *, char *, uint64_t))v54[5])(v49, v68, v69);
  v88 = v94;
  sub_1000AE548((uint64_t)v94, v71, type metadata accessor for SoundProfileRecord);
  sub_1000A2140(v70);
  return sub_1000AE58C((uint64_t)v88, type metadata accessor for SoundProfileRecord);
}

void sub_1000ACD84(id a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  id v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  _BYTE *v42;
  char *v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  id v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(char *, char *, uint64_t);
  uint64_t *v53;
  id v54;
  id v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  id v59;
  void *v60;
  char *v61;
  uint64_t v62;
  void (*v63)(char *, char *, uint64_t);
  uint64_t v64;
  uint64_t v65;
  void (*v66)(char *, uint64_t, uint64_t, uint64_t);
  int v67;
  uint64_t v68;
  char *v69;
  unint64_t v70;
  _BYTE *v71;
  uint64_t *v72;
  char *v73;
  unint64_t v74;
  uint64_t v75;
  _BYTE *v76;
  id v77;
  uint64_t v78;
  void *v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  int *v86;
  id v87;
  uint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  char *v92;
  char *v93;
  uint64_t *v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  _QWORD v100[5];
  id v101;

  v94 = a2;
  v4 = sub_1000A0980((uint64_t *)&unk_1002103D0);
  __chkstk_darwin(v4);
  v90 = (char *)&v85 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v93 = (char *)&v85 - v7;
  v91 = type metadata accessor for Date(0);
  v95 = *(_QWORD *)(v91 - 8);
  __chkstk_darwin(v91);
  v92 = (char *)&v85 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v89 = (char *)&v85 - v10;
  v11 = sub_1000A0980((uint64_t *)&unk_100210840);
  __chkstk_darwin(v11);
  v13 = (char *)&v85 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for URL(0);
  v97 = *(_QWORD *)(v14 - 8);
  v98 = v14;
  __chkstk_darwin(v14);
  v16 = (char *)&v85 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v96 = (char *)&v85 - v18;
  v19 = sub_1000A0980(&qword_1002103E0);
  __chkstk_darwin(v19);
  v21 = (char *)&v85 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for UUID(0);
  v23 = *(_QWORD *)(v22 - 8);
  __chkstk_darwin(v22);
  v99 = (char *)&v85 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = CKRecord.recordType.getter(v25);
  v28 = v27;
  if (v26 == 0xD000000000000012 && v27 == 0x8000000100185900)
  {
    swift_bridgeObjectRelease(0x8000000100185900);
  }
  else
  {
    v29 = _stringCompareWithSmolCheck(_:_:expecting:)(v26, v27, 0xD000000000000012, 0x8000000100185900, 0);
    swift_bridgeObjectRelease(v28);
    if ((v29 & 1) == 0)
    {
      v70 = sub_1000AE504();
      v41 = swift_allocError(&type metadata for SoundProfileRecord.SoundProfileRecordError, v70, 0, 0);
      *v71 = 1;
LABEL_17:
      swift_willThrow(v41);

      return;
    }
  }
  v88 = v2;
  v30 = objc_msgSend(a1, "recordID");
  v31 = objc_msgSend(v30, "recordName");

  v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
  v34 = v33;

  UUID.init(uuidString:)(v32, v34);
  swift_bridgeObjectRelease(v34);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22) == 1)
  {
    v35 = sub_1000A1000((uint64_t)v21, &qword_1002103E0);
    v36 = static os_log_type_t.error.getter(v35);
    if (qword_1002101E0 != -1)
      swift_once(&qword_1002101E0, sub_1001687B0);
    v37 = qword_100218DE8;
    v38 = sub_1000A0980((uint64_t *)&unk_1002103C0);
    v39 = swift_allocObject(v38, 72, 7);
    *(_OWORD *)(v39 + 16) = xmmword_100184870;
    *(_QWORD *)(v39 + 56) = sub_1000AB31C(0, (unint64_t *)&qword_1002103F0, CKRecord_ptr);
    *(_QWORD *)(v39 + 64) = sub_1000AB3A8();
    *(_QWORD *)(v39 + 32) = a1;
    a1 = a1;
    os_log(_:dso:log:_:_:)(v36, &_mh_execute_header, v37, "Invalid Sound Profile Record - %@", 33, 2, v39);
    swift_bridgeObjectRelease(v39);
    v40 = sub_1000AE504();
    v41 = swift_allocError(&type metadata for SoundProfileRecord.SoundProfileRecordError, v40, 0, 0);
    *v42 = 0;
    goto LABEL_17;
  }
  v43 = v99;
  (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v99, v21, v22);
  v44 = objc_msgSend(a1, "valueStore");
  v45 = sub_1000AB31C(0, &qword_1002108F0, CKRecordValueStore_ptr);
  CKRecordKeyValueSetting.subscript.getter(v100, 0xD000000000000011, 0x80000001001AB310, v45);

  if (!v100[3])
  {
    v72 = (uint64_t *)&unk_1002122B0;
    v73 = (char *)v100;
LABEL_21:
    sub_1000A1000((uint64_t)v73, v72);
    goto LABEL_22;
  }
  v46 = sub_1000A0980(&qword_100210900);
  v47 = sub_1000AB31C(0, (unint64_t *)&unk_1002122C0, CKAsset_ptr);
  if ((swift_dynamicCast(&v101, v100, v46, v47, 6) & 1) == 0)
  {
LABEL_22:
    v74 = sub_1000AE504();
    v75 = swift_allocError(&type metadata for SoundProfileRecord.SoundProfileRecordError, v74, 0, 0);
    *v76 = 1;
    swift_willThrow(v75);

    (*(void (**)(char *, uint64_t))(v23 + 8))(v43, v22);
    return;
  }
  v87 = v101;
  v48 = objc_msgSend(v101, "fileURL");
  if (!v48)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v97 + 56))(v13, 1, 1, v98);
    goto LABEL_20;
  }
  v49 = v48;
  static URL._unconditionallyBridgeFromObjectiveC(_:)(v48);

  v50 = v97;
  v51 = v98;
  v52 = *(void (**)(char *, char *, uint64_t))(v97 + 32);
  v52(v13, v16, v98);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v50 + 56))(v13, 0, 1, v51);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v50 + 48))(v13, 1, v51) == 1)
  {
LABEL_20:

    v72 = (uint64_t *)&unk_100210840;
    v73 = v13;
    goto LABEL_21;
  }
  v52(v96, v13, v51);
  v86 = (int *)type metadata accessor for SoundProfileRecord(0);
  v53 = v94;
  (*(void (**)(char *, char *, uint64_t))(v23 + 16))((char *)v94 + v86[5], v43, v22);
  v54 = objc_msgSend(objc_allocWithZone((Class)NSKeyedArchiver), "initRequiringSecureCoding:", 1);
  objc_msgSend(a1, "encodeSystemFieldsWithCoder:", v54);
  objc_msgSend(v54, "finishEncoding");
  v55 = objc_msgSend(v54, "encodedData");
  v56 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v55);
  v58 = v57;

  *v53 = v56;
  v53[1] = v58;
  (*(void (**)(char *, char *, uint64_t))(v50 + 16))((char *)v53 + v86[6], v96, v98);
  v59 = objc_msgSend(a1, "modificationDate");
  if (!v59)
  {
    v66 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v95 + 56);
    v64 = (uint64_t)v93;
    v65 = v91;
    v66(v93, 1, 1, v91);
    v68 = (uint64_t)v90;
LABEL_24:
    v77 = objc_msgSend(a1, "creationDate");
    v78 = v97;
    if (v77)
    {
      v79 = v77;
      v80 = v97;
      v81 = v92;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v77);

      v82 = v95;
      v83 = v81;
      v78 = v80;
      v64 = (uint64_t)v93;
      v92 = *(char **)(v95 + 32);
      ((void (*)(uint64_t, char *, uint64_t))v92)(v68, v83, v65);
      v66((char *)v68, 0, 1, v65);
      v84 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v82 + 48))(v68, 1, v65);
      if ((_DWORD)v84 != 1)
      {

        (*(void (**)(char *, uint64_t))(v78 + 8))(v96, v98);
        (*(void (**)(char *, uint64_t))(v23 + 8))(v99, v22);
        v69 = v89;
        ((void (*)(char *, uint64_t, uint64_t))v92)(v89, v68, v65);
LABEL_29:
        sub_1000A1000(v64, (uint64_t *)&unk_1002103D0);
        v63 = *(void (**)(char *, char *, uint64_t))(v95 + 32);
        goto LABEL_30;
      }
    }
    else
    {
      v84 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v66)(v68, 1, 1, v65);
    }
    v69 = v89;
    static Date.now.getter(v84);

    (*(void (**)(char *, uint64_t))(v78 + 8))(v96, v98);
    (*(void (**)(char *, uint64_t))(v23 + 8))(v99, v22);
    sub_1000A1000(v68, (uint64_t *)&unk_1002103D0);
    goto LABEL_29;
  }
  v60 = v59;
  v61 = v92;
  static Date._unconditionallyBridgeFromObjectiveC(_:)(v59);

  v62 = v95;
  v63 = *(void (**)(char *, char *, uint64_t))(v95 + 32);
  v64 = (uint64_t)v93;
  v65 = v91;
  v63(v93, v61, v91);
  v66 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v62 + 56);
  v66((char *)v64, 0, 1, v65);
  v67 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v62 + 48))(v64, 1, v65);
  v68 = (uint64_t)v90;
  if (v67 == 1)
    goto LABEL_24;

  (*(void (**)(char *, uint64_t))(v97 + 8))(v96, v98);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v99, v22);
  v69 = v89;
  v63(v89, (char *)v64, v65);
LABEL_30:
  v63((char *)v94 + v86[7], v69, v65);
}

uint64_t sub_1000AD6A8@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  id v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  unint64_t v28;
  uint64_t v29;
  char *v30;
  char v31;
  char *v32;
  uint64_t *v33;
  id v34;
  id v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t *v55;
  char *v56;
  uint64_t v57;

  v55 = a3;
  v57 = a2;
  v4 = type metadata accessor for Date(0);
  v54 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v53 = (char *)&v50 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1000A0980(&qword_1002103E0);
  __chkstk_darwin(v6);
  v8 = (char *)&v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v56 = (char *)&v50 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = CKRecord.recordType.getter(v12);
  v15 = v14;
  if (v13 == 0xD000000000000012 && v14 == 0x8000000100185900)
  {
    swift_bridgeObjectRelease(0x8000000100185900);
  }
  else
  {
    v16 = _stringCompareWithSmolCheck(_:_:expecting:)(v13, v14, 0xD000000000000012, 0x8000000100185900, 0);
    swift_bridgeObjectRelease(v15);
    if ((v16 & 1) == 0)
    {
      v48 = sub_1000AE504();
      v29 = swift_allocError(&type metadata for SoundProfileRecord.SoundProfileRecordError, v48, 0, 0);
      v31 = 1;
      goto LABEL_11;
    }
  }
  v17 = objc_msgSend(a1, "recordID");
  v18 = objc_msgSend(v17, "recordName");

  v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
  v21 = v20;

  UUID.init(uuidString:)(v19, v21);
  swift_bridgeObjectRelease(v21);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) != 1)
  {
    v32 = v56;
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v56, v8, v9);
    v51 = type metadata accessor for SoundProfileRecord(0);
    v52 = v4;
    v33 = v55;
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))((char *)v55 + *(int *)(v51 + 20), v32, v9);
    v34 = objc_msgSend(objc_allocWithZone((Class)NSKeyedArchiver), "initRequiringSecureCoding:", 1);
    objc_msgSend(a1, "encodeSystemFieldsWithCoder:", v34);
    objc_msgSend(v34, "finishEncoding");
    v35 = objc_msgSend(v34, "encodedData");
    v36 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    v37 = a1;
    v38 = v57;
    v40 = v39;

    *v33 = v36;
    v33[1] = v40;
    v41 = v51;
    v42 = (char *)v33 + *(int *)(v51 + 24);
    v43 = type metadata accessor for URL(0);
    v44 = *(_QWORD *)(v43 - 8);
    v45 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v44 + 16))(v42, v38, v43);
    v46 = v53;
    static Date.now.getter(v45);

    (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v38, v43);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v56, v9);
    return (*(uint64_t (**)(char *, char *, uint64_t))(v54 + 32))((char *)v33 + *(int *)(v41 + 28), v46, v52);
  }
  v22 = sub_1000A1000((uint64_t)v8, &qword_1002103E0);
  v23 = static os_log_type_t.error.getter(v22);
  if (qword_1002101E0 != -1)
    swift_once(&qword_1002101E0, sub_1001687B0);
  v24 = qword_100218DE8;
  v25 = sub_1000A0980((uint64_t *)&unk_1002103C0);
  v26 = swift_allocObject(v25, 72, 7);
  *(_OWORD *)(v26 + 16) = xmmword_100184870;
  *(_QWORD *)(v26 + 56) = sub_1000AB31C(0, (unint64_t *)&qword_1002103F0, CKRecord_ptr);
  *(_QWORD *)(v26 + 64) = sub_1000AB3A8();
  *(_QWORD *)(v26 + 32) = a1;
  v27 = a1;
  os_log(_:dso:log:_:_:)(v23, &_mh_execute_header, v24, "Invalid Sound Profile Record - %@", 33, 2, v26);
  swift_bridgeObjectRelease(v26);
  v28 = sub_1000AE504();
  v29 = swift_allocError(&type metadata for SoundProfileRecord.SoundProfileRecordError, v28, 0, 0);
  v31 = 0;
LABEL_11:
  *v30 = v31;
  swift_willThrow(v29);

  v49 = type metadata accessor for URL(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 8))(v57, v49);
}

void sub_1000ADB20(id *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  NSURL *v12;
  void *v13;
  void *v14;
  id v15;
  uint64_t v16;
  id v17;
  _QWORD v18[5];

  v2 = static os_log_type_t.debug.getter();
  if (qword_1002101E0 != -1)
    swift_once(&qword_1002101E0, sub_1001687B0);
  v3 = qword_100218DE8;
  v4 = sub_1000A0980((uint64_t *)&unk_1002103C0);
  v5 = swift_allocObject(v4, 72, 7);
  *(_OWORD *)(v5 + 16) = xmmword_100184870;
  v6 = *a1;
  v7 = objc_msgSend(v6, "description");
  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
  v10 = v9;

  *(_QWORD *)(v5 + 56) = &type metadata for String;
  *(_QWORD *)(v5 + 64) = sub_1000A0DF4();
  *(_QWORD *)(v5 + 32) = v8;
  *(_QWORD *)(v5 + 40) = v10;
  os_log(_:dso:log:_:_:)(v2, &_mh_execute_header, v3, "Updating sound profile record: %@", 33, 2, v5);
  swift_bridgeObjectRelease(v5);
  v17 = objc_msgSend(v6, "valueStore");
  type metadata accessor for SoundProfileRecord(0);
  v11 = objc_allocWithZone((Class)CKAsset);
  URL._bridgeToObjectiveC()(v12);
  v14 = v13;
  v15 = objc_msgSend(v11, "initWithFileURL:", v13);

  v18[3] = sub_1000AB31C(0, (unint64_t *)&unk_1002122C0, CKAsset_ptr);
  v18[4] = &protocol witness table for CKAsset;
  v18[0] = v15;
  v16 = sub_1000AB31C(0, &qword_1002108F0, CKRecordValueStore_ptr);
  CKRecordKeyValueSetting.subscript.setter(v18, 0xD000000000000011, 0x80000001001AB310, v16);

}

uint64_t sub_1000ADD08(_QWORD *a1)
{
  __int128 *v1;
  uint64_t v2;
  __int128 *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  char v25;
  __int128 v26;

  v3 = v1;
  v5 = sub_1000A0980(&qword_1002109C8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_1000A20D8(a1, v9);
  v11 = sub_1000AEF6C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for SoundProfileRecord.CodingKeys, &type metadata for SoundProfileRecord.CodingKeys, v11, v9, v10);
  v26 = *v3;
  v25 = 0;
  v12 = sub_1000A21A4();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v26, &v25, v5, &type metadata for Data, v12);
  if (!v2)
  {
    v13 = (int *)type metadata accessor for SoundProfileRecord(0);
    v14 = (char *)v3 + v13[5];
    LOBYTE(v26) = 1;
    v15 = type metadata accessor for UUID(0);
    v16 = sub_1000A0940((unint64_t *)&unk_1002105E0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v14, &v26, v5, v15, v16);
    v17 = (char *)v3 + v13[6];
    LOBYTE(v26) = 2;
    v18 = type metadata accessor for URL(0);
    v19 = sub_1000A0940(&qword_1002109D8, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v17, &v26, v5, v18, v19);
    v20 = (char *)v3 + v13[7];
    LOBYTE(v26) = 3;
    v21 = type metadata accessor for Date(0);
    v22 = sub_1000A0940((unint64_t *)&unk_100210EB0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v20, &v26, v5, v21, v22);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1000ADF38()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1000ADF74 + 4 * byte_100185900[*v0]))(0x74654D64756F6C63, 0xED00006174616461);
}

uint64_t sub_1000ADF74()
{
  return 0x696669746E656469;
}

unint64_t sub_1000ADF90()
{
  return 0xD000000000000014;
}

unint64_t sub_1000ADFB0()
{
  return 0xD000000000000010;
}

uint64_t sub_1000ADFCC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1000AF154(a1, a2);
  *a3 = result;
  return result;
}

void sub_1000ADFF0(_BYTE *a1@<X8>)
{
  *a1 = 4;
}

uint64_t sub_1000ADFFC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000AEF6C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000AE024(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000AEF6C();
  return CodingKey.debugDescription.getter(a1, v2);
}

unint64_t sub_1000AE04C()
{
  return 0xD000000000000012;
}

unint64_t sub_1000AE068()
{
  return 0xD000000000000010;
}

uint64_t sub_1000AE084@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 28);
  v5 = type metadata accessor for Date(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

Swift::Int sub_1000AE0C8()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[9];

  v1 = v0;
  Hasher.init(_seed:)(v11, 0);
  v2 = *v0;
  v3 = v1[1];
  sub_1000A0E74(v2, v3);
  Data.hash(into:)(v11, v2, v3);
  sub_1000A103C(v2, v3);
  v4 = type metadata accessor for UUID(0);
  v5 = sub_1000A0940((unint64_t *)&unk_100210620, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(v11, v4, v5);
  v6 = type metadata accessor for URL(0);
  v7 = sub_1000A0940(&qword_1002109F0, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
  dispatch thunk of Hashable.hash(into:)(v11, v6, v7);
  v8 = type metadata accessor for Date(0);
  v9 = sub_1000A0940(&qword_100210EC0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  dispatch thunk of Hashable.hash(into:)(v11, v8, v9);
  return Hasher._finalize()();
}

uint64_t sub_1000AE1FC(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = v1;
  v4 = *v1;
  v5 = v2[1];
  sub_1000A0E74(v4, v5);
  Data.hash(into:)(a1, v4, v5);
  sub_1000A103C(v4, v5);
  v6 = type metadata accessor for UUID(0);
  v7 = sub_1000A0940((unint64_t *)&unk_100210620, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(a1, v6, v7);
  v8 = type metadata accessor for URL(0);
  v9 = sub_1000A0940(&qword_1002109F0, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
  dispatch thunk of Hashable.hash(into:)(a1, v8, v9);
  v10 = type metadata accessor for Date(0);
  v11 = sub_1000A0940(&qword_100210EC0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  return dispatch thunk of Hashable.hash(into:)(a1, v10, v11);
}

Swift::Int sub_1000AE320(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[9];

  v2 = v1;
  Hasher.init(_seed:)(v12, a1);
  v3 = *v1;
  v4 = v2[1];
  sub_1000A0E74(v3, v4);
  Data.hash(into:)(v12, v3, v4);
  sub_1000A103C(v3, v4);
  v5 = type metadata accessor for UUID(0);
  v6 = sub_1000A0940((unint64_t *)&unk_100210620, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(v12, v5, v6);
  v7 = type metadata accessor for URL(0);
  v8 = sub_1000A0940(&qword_1002109F0, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
  dispatch thunk of Hashable.hash(into:)(v12, v7, v8);
  v9 = type metadata accessor for Date(0);
  v10 = sub_1000A0940(&qword_100210EC0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  dispatch thunk of Hashable.hash(into:)(v12, v9, v10);
  return Hasher._finalize()();
}

uint64_t sub_1000AE450(uint64_t *a1, uint64_t a2, int *a3)
{
  char v6;

  sub_1000D25EC(*a1, a1[1]);
  if ((v6 & 1) != 0
    && (static UUID.== infix(_:_:)((char *)a1 + a3[5]) & 1) != 0
    && (static URL.== infix(_:_:)((char *)a1 + a3[6], a2 + a3[6]) & 1) != 0)
  {
    return static Date.== infix(_:_:)((char *)a1 + a3[7], a2 + a3[7]);
  }
  else
  {
    return 0;
  }
}

uint64_t sub_1000AE4DC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000AC460(a1, a2);
}

uint64_t sub_1000AE4F0(_QWORD *a1)
{
  return sub_1000ADD08(a1);
}

unint64_t sub_1000AE504()
{
  unint64_t result;

  result = qword_1002108F8;
  if (!qword_1002108F8)
  {
    result = swift_getWitnessTable(&unk_100185B0C, &type metadata for SoundProfileRecord.SoundProfileRecordError);
    atomic_store(result, (unint64_t *)&qword_1002108F8);
  }
  return result;
}

uint64_t sub_1000AE548(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000AE58C(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v3;

  v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for SoundProfileRecord.SoundProfileRecordError(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = v6 - 2;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for SoundProfileRecord.SoundProfileRecordError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1000AE6A4 + 4 * byte_100185909[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1000AE6D8 + 4 * byte_100185904[v4]))();
}

uint64_t sub_1000AE6D8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000AE6E0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000AE6E8);
  return result;
}

uint64_t sub_1000AE6F4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000AE6FCLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1000AE700(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000AE708(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *sub_1000AE714(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for SoundProfileRecord.SoundProfileRecordError()
{
  return &type metadata for SoundProfileRecord.SoundProfileRecordError;
}

uint64_t *sub_1000AE730(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v21 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v21 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v21);
  }
  else
  {
    v7 = *a2;
    v8 = a2[1];
    sub_1000A0E74(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    v9 = a3[5];
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for UUID(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
    v13 = a3[6];
    v14 = (char *)a1 + v13;
    v15 = (char *)a2 + v13;
    v16 = type metadata accessor for URL(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v14, v15, v16);
    v17 = a3[7];
    v18 = (char *)a1 + v17;
    v19 = (char *)a2 + v17;
    v20 = type metadata accessor for Date(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v18, v19, v20);
  }
  return a1;
}

uint64_t sub_1000AE82C(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  sub_1000A103C(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  v4 = a1 + a2[5];
  v5 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  v6 = a1 + a2[6];
  v7 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  v8 = a1 + a2[7];
  v9 = type metadata accessor for Date(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
}

uint64_t *sub_1000AE8C8(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = *a2;
  v7 = a2[1];
  sub_1000A0E74(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  v8 = a3[5];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for UUID(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
  v12 = a3[6];
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = type metadata accessor for URL(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
  v16 = a3[7];
  v17 = (char *)a1 + v16;
  v18 = (char *)a2 + v16;
  v19 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v17, v18, v19);
  return a1;
}

uint64_t *sub_1000AE998(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;

  v6 = *a2;
  v7 = a2[1];
  sub_1000A0E74(*a2, v7);
  v8 = *a1;
  v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  sub_1000A103C(v8, v9);
  v10 = a3[5];
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for UUID(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 24))(v11, v12, v13);
  v14 = a3[6];
  v15 = (char *)a1 + v14;
  v16 = (char *)a2 + v14;
  v17 = type metadata accessor for URL(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 24))(v15, v16, v17);
  v18 = a3[7];
  v19 = (char *)a1 + v18;
  v20 = (char *)a2 + v18;
  v21 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 24))(v19, v20, v21);
  return a1;
}

_OWORD *sub_1000AEA70(_OWORD *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UUID(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = a3[6];
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for URL(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v11, v12, v13);
  v14 = a3[7];
  v15 = (char *)a1 + v14;
  v16 = (char *)a2 + v14;
  v17 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(v15, v16, v17);
  return a1;
}

uint64_t *sub_1000AEB34(uint64_t *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = *a1;
  v7 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_1000A103C(v6, v7);
  v8 = a3[5];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for UUID(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  v12 = a3[6];
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = type metadata accessor for URL(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 40))(v13, v14, v15);
  v16 = a3[7];
  v17 = (char *)a1 + v16;
  v18 = (char *)a2 + v16;
  v19 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 40))(v17, v18, v19);
  return a1;
}

uint64_t sub_1000AEC04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000AEC10);
}

uint64_t sub_1000AEC10(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if ((_DWORD)a2 == 12)
  {
    v4 = *(_QWORD *)(a1 + 8) >> 60;
    if (((4 * (_DWORD)v4) & 0xC) != 0)
      return 16 - ((4 * (_DWORD)v4) & 0xC | (v4 >> 2));
    else
      return 0;
  }
  else
  {
    v8 = type metadata accessor for UUID(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = a3[5];
    }
    else
    {
      v12 = type metadata accessor for URL(0);
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
      {
        v10 = v12;
        v11 = a3[6];
      }
      else
      {
        v10 = type metadata accessor for Date(0);
        v9 = *(_QWORD *)(v10 - 8);
        v11 = a3[7];
      }
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t sub_1000AECE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000AECEC);
}

char *sub_1000AECEC(char *result, uint64_t a2, int a3, int *a4)
{
  char *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = result;
  if (a3 == 12)
  {
    *(_QWORD *)result = 0;
    *((_QWORD *)result + 1) = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * (_DWORD)a2) << 60;
  }
  else
  {
    v8 = type metadata accessor for UUID(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = a4[5];
    }
    else
    {
      v12 = type metadata accessor for URL(0);
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == a3)
      {
        v10 = v12;
        v11 = a4[6];
      }
      else
      {
        v10 = type metadata accessor for Date(0);
        v9 = *(_QWORD *)(v10 - 8);
        v11 = a4[7];
      }
    }
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(&v5[v11], a2, a2, v10);
  }
  return result;
}

uint64_t sub_1000AEDB4(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD v6[4];

  v6[0] = &unk_100185968;
  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v6[1] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for URL(319);
    if (v4 <= 0x3F)
    {
      v6[2] = *(_QWORD *)(result - 8) + 64;
      result = type metadata accessor for Date(319);
      if (v5 <= 0x3F)
      {
        v6[3] = *(_QWORD *)(result - 8) + 64;
        swift_initStructMetadata(a1, 256, 4, v6, a1 + 16);
        return 0;
      }
    }
  }
  return result;
}

uint64_t sub_1000AEE60(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_1000A0940(&qword_1002109A0, type metadata accessor for SoundProfileRecord, (uint64_t)&unk_100185ABC);
  result = sub_1000A0940(&qword_1002109A8, type metadata accessor for SoundProfileRecord, (uint64_t)&unk_100185AE4);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t sub_1000AEEBC()
{
  return sub_1000A0940(&qword_1002109B0, type metadata accessor for SoundProfileRecord, (uint64_t)&unk_1001859EC);
}

unint64_t sub_1000AEEEC()
{
  unint64_t result;

  result = qword_1002109B8;
  if (!qword_1002109B8)
  {
    result = swift_getWitnessTable(&unk_100185A94, &type metadata for SoundProfileRecord.SoundProfileRecordError);
    atomic_store(result, (unint64_t *)&qword_1002109B8);
  }
  return result;
}

uint64_t sub_1000AEF30(uint64_t a1)
{
  uint64_t result;

  result = sub_1000A0940(&qword_1002109C0, type metadata accessor for SoundProfileRecord, (uint64_t)&unk_100185980);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1000AEF6C()
{
  unint64_t result;

  result = qword_1002109D0;
  if (!qword_1002109D0)
  {
    result = swift_getWitnessTable(&unk_100185C2C, &type metadata for SoundProfileRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002109D0);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for SoundProfileRecord.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1000AEFFC + 4 * byte_100185913[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1000AF030 + 4 * byte_10018590E[v4]))();
}

uint64_t sub_1000AF030(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000AF038(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000AF040);
  return result;
}

uint64_t sub_1000AF04C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000AF054);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1000AF058(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000AF060(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SoundProfileRecord.CodingKeys()
{
  return &type metadata for SoundProfileRecord.CodingKeys;
}

unint64_t sub_1000AF080()
{
  unint64_t result;

  result = qword_1002109F8;
  if (!qword_1002109F8)
  {
    result = swift_getWitnessTable(&unk_100185C04, &type metadata for SoundProfileRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002109F8);
  }
  return result;
}

unint64_t sub_1000AF0C8()
{
  unint64_t result;

  result = qword_100210A00;
  if (!qword_100210A00)
  {
    result = swift_getWitnessTable(&unk_100185B74, &type metadata for SoundProfileRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100210A00);
  }
  return result;
}

unint64_t sub_1000AF110()
{
  unint64_t result;

  result = qword_100210A08;
  if (!qword_100210A08)
  {
    result = swift_getWitnessTable(&unk_100185B9C, &type metadata for SoundProfileRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100210A08);
  }
  return result;
}

uint64_t sub_1000AF154(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  char v9;

  if (a1 == 0x74654D64756F6C63 && a2 == 0xED00006174616461)
  {
    v5 = 0xED00006174616461;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x74654D64756F6C63, 0xED00006174616461, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x696669746E656469 && a2 == 0xEA00000000007265)
  {
    v7 = 0xEA00000000007265;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x696669746E656469, 0xEA00000000007265, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0xD000000000000014)
  {
    v8 = 0x80000001001AB380;
    if (a2 == 0x80000001001AB380)
      goto LABEL_19;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014, 0x80000001001AB380, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
LABEL_19:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if (a1 == 0xD000000000000010 && a2 == 0x80000001001AAA20)
  {
    swift_bridgeObjectRelease(0x80000001001AAA20);
    return 3;
  }
  else
  {
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x80000001001AAA20, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v9 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_1000AF330(char *a1, char *a2)
{
  return sub_100110D60(*a1, *a2);
}

Swift::Int sub_1000AF33C()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  _QWORD v4[9];

  v1 = *v0;
  Hasher.init(_seed:)(v4, 0);
  if (v1)
    v2 = 0x6574656C6564;
  else
    v2 = 0x657461647075;
  String.hash(into:)(v4, v2, 0xE600000000000000);
  swift_bridgeObjectRelease(0xE600000000000000);
  return Hasher._finalize()();
}

uint64_t sub_1000AF3A8(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v2;

  if (*v1)
    v2 = 0x6574656C6564;
  else
    v2 = 0x657461647075;
  String.hash(into:)(a1, v2, 0xE600000000000000);
  return swift_bridgeObjectRelease(0xE600000000000000);
}

Swift::Int sub_1000AF3E8(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  uint64_t v3;
  _QWORD v5[9];

  v2 = *v1;
  Hasher.init(_seed:)(v5, a1);
  if (v2)
    v3 = 0x6574656C6564;
  else
    v3 = 0x657461647075;
  String.hash(into:)(v5, v3, 0xE600000000000000);
  swift_bridgeObjectRelease(0xE600000000000000);
  return Hasher._finalize()();
}

uint64_t sub_1000AF450@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  Swift::String v3;
  void *v4;
  Swift::Int v5;
  uint64_t result;
  char v7;

  v3._countAndFlagsBits = *a1;
  v4 = (void *)a1[1];
  v3._object = v4;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1001E5768, v3);
  result = swift_bridgeObjectRelease(v4);
  if (v5 == 1)
    v7 = 1;
  else
    v7 = 2;
  if (!v5)
    v7 = 0;
  *a2 = v7;
  return result;
}

void sub_1000AF4AC(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;

  v2 = 0x657461647075;
  if (*v1)
    v2 = 0x6574656C6564;
  *a1 = v2;
  a1[1] = 0xE600000000000000;
}

uint64_t sub_1000AF4DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1000B0BD4();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1000AF538(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1000B0BD4();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_1000AF584(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  unint64_t v23;
  __int128 v25;
  char v26;

  v3 = v1;
  v5 = sub_1000A0980(&qword_100210AB0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_1000A20D8(a1, v9);
  v11 = sub_1000B0534();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for BTDeferredRecord.CodingKeys, &type metadata for BTDeferredRecord.CodingKeys, v11, v9, v10);
  LOBYTE(v25) = *(_BYTE *)v3;
  v26 = 0;
  v12 = sub_1000B0578();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v25, &v26, v5, &type metadata for BTDeferredRecord.BTDeferType, v12);
  if (!v2)
  {
    v13 = *(_QWORD *)(v3 + 8);
    v14 = *(_QWORD *)(v3 + 16);
    LOBYTE(v25) = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v13, v14, &v25, v5);
    v15 = (int *)type metadata accessor for BTDeferredRecord(0);
    v16 = v3 + v15[6];
    LOBYTE(v25) = 2;
    v17 = type metadata accessor for UUID(0);
    v18 = sub_1000A0940((unint64_t *)&unk_1002105E0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v16, &v25, v5, v17, v18);
    v19 = (uint64_t *)(v3 + v15[7]);
    v20 = *v19;
    v21 = v19[1];
    LOBYTE(v25) = 3;
    KeyedEncodingContainer.encode(_:forKey:)(v20, v21, &v25, v5);
    v22 = *(double *)(v3 + v15[8]);
    LOBYTE(v25) = 4;
    KeyedEncodingContainer.encode(_:forKey:)(&v25, v5, v22);
    v25 = *(_OWORD *)(v3 + v15[9]);
    v26 = 5;
    v23 = sub_1000A21A4();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v25, &v26, v5, &type metadata for Data, v23);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1000AF7BC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  _QWORD *v22;
  uint64_t v23;
  int *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  __int128 v40;
  char v41;

  v35 = a2;
  v4 = type metadata accessor for UUID(0);
  v36 = *(_QWORD *)(v4 - 8);
  v37 = v4;
  __chkstk_darwin(v4);
  v6 = (char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1000A0980(&qword_100210AC8);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = type metadata accessor for BTDeferredRecord(0);
  __chkstk_darwin(v39);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = a1[3];
  v14 = a1[4];
  v38 = a1;
  sub_1000A20D8(a1, v13);
  v15 = sub_1000B0534();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for BTDeferredRecord.CodingKeys, &type metadata for BTDeferredRecord.CodingKeys, v15, v13, v14);
  if (v2)
    return sub_1000A2140(v38);
  v16 = v8;
  v17 = v35;
  v41 = 0;
  v18 = sub_1000B05BC();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v40, &type metadata for BTDeferredRecord.BTDeferType, &v41, v7, &type metadata for BTDeferredRecord.BTDeferType, v18);
  *v12 = v40;
  LOBYTE(v40) = 1;
  *((_QWORD *)v12 + 1) = KeyedDecodingContainer.decode(_:forKey:)(&v40, v7);
  *((_QWORD *)v12 + 2) = v19;
  v34 = v12;
  LOBYTE(v40) = 2;
  v20 = sub_1000A0940((unint64_t *)&unk_1002105C0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v21 = v6;
  v22 = v6;
  v23 = v37;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v22, v37, &v40, v7, v37, v20);
  v24 = (int *)v39;
  v33 = v16;
  v25 = (uint64_t)v34;
  (*(void (**)(char *, char *, uint64_t))(v36 + 32))(&v34[*(int *)(v39 + 24)], v21, v23);
  LOBYTE(v40) = 3;
  v26 = KeyedDecodingContainer.decode(_:forKey:)(&v40, v7);
  v27 = (uint64_t *)(v25 + v24[7]);
  *v27 = v26;
  v27[1] = v28;
  LOBYTE(v40) = 4;
  KeyedDecodingContainer.decode(_:forKey:)(&v40, v7);
  *(_QWORD *)(v25 + v24[8]) = v29;
  v41 = 5;
  v30 = sub_1000A2160();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&type metadata for Data, &v41, v7, &type metadata for Data, v30);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v10, v7);
  *(_OWORD *)(v25 + v24[9]) = v40;
  sub_1000B0600(v25, v17);
  sub_1000A2140(v38);
  return sub_1000B0644(v25);
}

uint64_t sub_1000AFBD8()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1000AFC0C + 4 * byte_100185C80[*v0]))(0x7079547265666564, 0xE900000000000065);
}

uint64_t sub_1000AFC0C()
{
  return 0x795464726F636572;
}

uint64_t sub_1000AFC2C()
{
  return 0x696669746E656469;
}

unint64_t sub_1000AFC48()
{
  return 0xD000000000000010;
}

uint64_t sub_1000AFC64()
{
  return 0x6D617473656D6974;
}

uint64_t sub_1000AFC7C()
{
  return 0x614464726F636572;
}

uint64_t sub_1000AFC98@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1000B0938(a1, a2);
  *a3 = result;
  return result;
}

void sub_1000AFCBC(_BYTE *a1@<X8>)
{
  *a1 = 6;
}

uint64_t sub_1000AFCC8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000B0534();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000AFCF0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000B0534();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000AFD18@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 24);
  v5 = type metadata accessor for UUID(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t *sub_1000AFD58(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  _OWORD *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v22 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v22 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v22);
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    v7 = a2[2];
    a1[1] = a2[1];
    a1[2] = v7;
    v8 = a3[6];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for UUID(0);
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain(v7);
    v12(v9, v10, v11);
    v13 = a3[7];
    v14 = a3[8];
    v15 = (uint64_t *)((char *)v4 + v13);
    v16 = (uint64_t *)((char *)a2 + v13);
    v17 = v16[1];
    *v15 = *v16;
    v15[1] = v17;
    *(uint64_t *)((char *)v4 + v14) = *(uint64_t *)((char *)a2 + v14);
    v18 = a3[9];
    v19 = (char *)v4 + v18;
    v20 = (_OWORD *)((char *)a2 + v18);
    v21 = *(uint64_t *)((char *)a2 + v18 + 8);
    swift_bridgeObjectRetain(v17);
    if (v21 >> 60 == 15)
    {
      *(_OWORD *)v19 = *v20;
    }
    else
    {
      v23 = *(_QWORD *)v20;
      sub_1000A0E74(v23, v21);
      *(_QWORD *)v19 = v23;
      *((_QWORD *)v19 + 1) = v21;
    }
  }
  return v4;
}

uint64_t sub_1000AFE68(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t *v7;
  unint64_t v8;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 16));
  v4 = a1 + a2[6];
  v5 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  result = swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[7] + 8));
  v7 = (uint64_t *)(a1 + a2[9]);
  v8 = v7[1];
  if (v8 >> 60 != 15)
    return sub_1000A103C(*v7, v8);
  return result;
}

uint64_t sub_1000AFEF8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v6;
  v7 = a3[6];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for UUID(0);
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  swift_bridgeObjectRetain(v6);
  v11(v8, v9, v10);
  v12 = a3[7];
  v13 = a3[8];
  v14 = (_QWORD *)(a1 + v12);
  v15 = (_QWORD *)(a2 + v12);
  v16 = v15[1];
  *v14 = *v15;
  v14[1] = v16;
  *(_QWORD *)(a1 + v13) = *(_QWORD *)(a2 + v13);
  v17 = a3[9];
  v18 = a1 + v17;
  v19 = a2 + v17;
  v20 = *(_QWORD *)(v19 + 8);
  swift_bridgeObjectRetain(v16);
  if (v20 >> 60 == 15)
  {
    *(_OWORD *)v18 = *(_OWORD *)v19;
  }
  else
  {
    v21 = *(_QWORD *)v19;
    sub_1000A0E74(v21, v20);
    *(_QWORD *)v18 = v21;
    *(_QWORD *)(v18 + 8) = v20;
  }
  return a1;
}

uint64_t sub_1000AFFDC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = a3[6];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 24))(v9, v10, v11);
  v12 = a3[7];
  v13 = (_QWORD *)(a1 + v12);
  v14 = (_QWORD *)(a2 + v12);
  *v13 = *v14;
  v15 = v14[1];
  v16 = v13[1];
  v13[1] = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v16);
  *(_QWORD *)(a1 + a3[8]) = *(_QWORD *)(a2 + a3[8]);
  v17 = a3[9];
  v18 = (uint64_t *)(a1 + v17);
  v19 = (uint64_t *)(a2 + v17);
  v20 = *(_QWORD *)(a2 + v17 + 8);
  if (*(_QWORD *)(a1 + v17 + 8) >> 60 != 15)
  {
    if (v20 >> 60 != 15)
    {
      v22 = *v19;
      sub_1000A0E74(v22, v20);
      v23 = *v18;
      v24 = v18[1];
      *v18 = v22;
      v18[1] = v20;
      sub_1000A103C(v23, v24);
      return a1;
    }
    sub_1000B0120((uint64_t)v18);
    goto LABEL_6;
  }
  if (v20 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)v18 = *(_OWORD *)v19;
    return a1;
  }
  v21 = *v19;
  sub_1000A0E74(v21, v20);
  *v18 = v21;
  v18[1] = v20;
  return a1;
}

uint64_t sub_1000B0120(uint64_t a1)
{
  (*(void (**)(void))(*(&type metadata for Data - 1) + 8))();
  return a1;
}

uint64_t sub_1000B0154(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v6 = a3[6];
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = a3[8];
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  *(_QWORD *)(a1 + v10) = *(_QWORD *)(a2 + v10);
  *(_OWORD *)(a1 + a3[9]) = *(_OWORD *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_1000B01E8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = a3[6];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  v12 = a3[7];
  v13 = (_QWORD *)(a1 + v12);
  v14 = (uint64_t *)(a2 + v12);
  v16 = *v14;
  v15 = v14[1];
  v17 = v13[1];
  *v13 = v16;
  v13[1] = v15;
  swift_bridgeObjectRelease(v17);
  v18 = a3[9];
  *(_QWORD *)(a1 + a3[8]) = *(_QWORD *)(a2 + a3[8]);
  v19 = (uint64_t *)(a1 + v18);
  v20 = (uint64_t *)(a2 + v18);
  v21 = *(_QWORD *)(a1 + v18 + 8);
  if (v21 >> 60 != 15)
  {
    v22 = v20[1];
    if (v22 >> 60 != 15)
    {
      v23 = *v19;
      *v19 = *v20;
      v19[1] = v22;
      sub_1000A103C(v23, v21);
      return a1;
    }
    sub_1000B0120((uint64_t)v19);
  }
  *(_OWORD *)v19 = *(_OWORD *)v20;
  return a1;
}

uint64_t sub_1000B02D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000B02E4);
}

uint64_t sub_1000B02E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UUID(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v8);
  }
}

uint64_t sub_1000B0360(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000B036C);
}

uint64_t sub_1000B036C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 16) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 24), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for BTDeferredRecord(uint64_t a1)
{
  uint64_t result;

  result = qword_100210A68;
  if (!qword_100210A68)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for BTDeferredRecord);
  return result;
}

uint64_t sub_1000B041C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[6];

  v4[0] = &unk_100185CC8;
  v4[1] = &unk_100185CE0;
  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(result - 8) + 64;
    v4[3] = &unk_100185CE0;
    v4[4] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[5] = &unk_100185CF8;
    swift_initStructMetadata(a1, 256, 6, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_1000B04B0(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_1000A0940(&qword_100212390, type metadata accessor for BTDeferredRecord, (uint64_t)&unk_100185D2C);
  result = sub_1000A0940((unint64_t *)&unk_100212260, type metadata accessor for BTDeferredRecord, (uint64_t)&unk_100185D54);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t sub_1000B050C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000AF7BC(a1, a2);
}

uint64_t sub_1000B0520(_QWORD *a1)
{
  return sub_1000AF584(a1);
}

unint64_t sub_1000B0534()
{
  unint64_t result;

  result = qword_100210AB8;
  if (!qword_100210AB8)
  {
    result = swift_getWitnessTable(&unk_100185F3C, &type metadata for BTDeferredRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100210AB8);
  }
  return result;
}

unint64_t sub_1000B0578()
{
  unint64_t result;

  result = qword_100210AC0;
  if (!qword_100210AC0)
  {
    result = swift_getWitnessTable(&unk_100185F14, &type metadata for BTDeferredRecord.BTDeferType);
    atomic_store(result, (unint64_t *)&qword_100210AC0);
  }
  return result;
}

unint64_t sub_1000B05BC()
{
  unint64_t result;

  result = qword_100210AD0;
  if (!qword_100210AD0)
  {
    result = swift_getWitnessTable(&unk_100185EEC, &type metadata for BTDeferredRecord.BTDeferType);
    atomic_store(result, (unint64_t *)&qword_100210AD0);
  }
  return result;
}

uint64_t sub_1000B0600(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for BTDeferredRecord(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000B0644(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for BTDeferredRecord(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t storeEnumTagSinglePayload for BTDeferredRecord.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_1000B06CC + 4 * byte_100185C8B[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_1000B0700 + 4 * byte_100185C86[v4]))();
}

uint64_t sub_1000B0700(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000B0708(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000B0710);
  return result;
}

uint64_t sub_1000B071C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000B0724);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_1000B0728(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000B0730(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BTDeferredRecord.CodingKeys()
{
  return &type metadata for BTDeferredRecord.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for BTDeferredRecord.BTDeferType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1000B0798 + 4 * byte_100185C95[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1000B07CC + 4 * byte_100185C90[v4]))();
}

uint64_t sub_1000B07CC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000B07D4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000B07DCLL);
  return result;
}

uint64_t sub_1000B07E8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000B07F0);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1000B07F4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000B07FC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BTDeferredRecord.BTDeferType()
{
  return &type metadata for BTDeferredRecord.BTDeferType;
}

unint64_t sub_1000B081C()
{
  unint64_t result;

  result = qword_100210AD8;
  if (!qword_100210AD8)
  {
    result = swift_getWitnessTable(&unk_100185E0C, &type metadata for BTDeferredRecord.BTDeferType);
    atomic_store(result, (unint64_t *)&qword_100210AD8);
  }
  return result;
}

unint64_t sub_1000B0864()
{
  unint64_t result;

  result = qword_100210AE0;
  if (!qword_100210AE0)
  {
    result = swift_getWitnessTable(&unk_100185EC4, &type metadata for BTDeferredRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100210AE0);
  }
  return result;
}

unint64_t sub_1000B08AC()
{
  unint64_t result;

  result = qword_100210AE8;
  if (!qword_100210AE8)
  {
    result = swift_getWitnessTable(&unk_100185E34, &type metadata for BTDeferredRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100210AE8);
  }
  return result;
}

unint64_t sub_1000B08F4()
{
  unint64_t result;

  result = qword_100210AF0;
  if (!qword_100210AF0)
  {
    result = swift_getWitnessTable(&unk_100185E5C, &type metadata for BTDeferredRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100210AF0);
  }
  return result;
}

uint64_t sub_1000B0938(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char v11;

  if (a1 == 0x7079547265666564 && a2 == 0xE900000000000065)
  {
    v5 = 0xE900000000000065;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7079547265666564, 0xE900000000000065, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x795464726F636572 && a2 == 0xEA00000000006570)
  {
    v7 = 0xEA00000000006570;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x795464726F636572, 0xEA00000000006570, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x696669746E656469 && a2 == 0xEA00000000007265)
  {
    v8 = 0xEA00000000007265;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x696669746E656469, 0xEA00000000007265, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0xD000000000000010)
  {
    v9 = 0x80000001001AA8D0;
    if (a2 == 0x80000001001AA8D0)
      goto LABEL_25;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x80000001001AA8D0, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
LABEL_25:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if (a1 == 0x6D617473656D6974 && a2 == 0xE900000000000070)
  {
    v10 = 0xE900000000000070;
LABEL_31:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6D617473656D6974, 0xE900000000000070, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_31;
  }
  if (a1 == 0x614464726F636572 && a2 == 0xEA00000000006174)
  {
    swift_bridgeObjectRelease(0xEA00000000006174);
    return 5;
  }
  else
  {
    v11 = _stringCompareWithSmolCheck(_:_:expecting:)(0x614464726F636572, 0xEA00000000006174, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v11 & 1) != 0)
      return 5;
    else
      return 6;
  }
}

unint64_t sub_1000B0BD4()
{
  unint64_t result;

  result = qword_100210AF8;
  if (!qword_100210AF8)
  {
    result = swift_getWitnessTable(&unk_100185D94, &type metadata for BTDeferredRecord.BTDeferType);
    atomic_store(result, (unint64_t *)&qword_100210AF8);
  }
  return result;
}

uint64_t sub_1000B0C18()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;

  v0 = sub_1000A0980((uint64_t *)&unk_100210840);
  __chkstk_darwin(v0);
  v2 = (char *)&v9 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for URL(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000A09C0(v7, qword_100218C68);
  sub_1000A0A00(v3, (uint64_t)qword_100218C68);
  URL.init(string:)(0x6552646568636143, 0xED00007364726F63);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v6, v2, v3);
    URL.appendingPathComponent(_:isDirectory:)(0x654B72657473614DLL, 0xE900000000000079, 1);
    return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
  return result;
}

uint64_t sub_1000B0D68()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  Swift::String v16;
  void *object;
  Swift::String v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  void *v30;
  Swift::String v31;
  Swift::String v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  void *v41;
  Swift::String v42;
  Swift::String v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  void *v47;
  uint64_t v48;
  void (*v49)(char *, uint64_t, uint64_t, uint64_t);
  unsigned int (*v50)(char *, uint64_t, uint64_t);
  void *v51;
  uint64_t v52;
  void (*v53)(char *, char *, uint64_t);
  uint64_t v54;
  char *v55;
  void *v56;
  Class isa;
  id v58;
  uint64_t v59;
  void *v60;
  char *v61;
  Swift::String v62;
  Swift::String v63;
  id v64;
  id v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  void *v75;
  Class v76;
  id v77;
  uint64_t v78;
  void *v79;
  char *v80;
  Swift::String v81;
  Swift::String v82;
  id v83;
  void *v84;
  uint64_t v85;
  void *v86;
  void *v87;
  Swift::String v88;
  uint64_t v89;
  void *v90;
  Swift::String v91;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  char *v96;
  uint64_t v97;
  id v98;
  _QWORD v99[2];

  v1 = type metadata accessor for Date(0);
  v97 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v95 = (char *)&v93 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_1000A0980((uint64_t *)&unk_1002103D0);
  __chkstk_darwin(v3);
  v96 = (char *)&v93 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v7 = (char *)&v93 - v6;
  __chkstk_darwin(v8);
  v10 = (char *)&v93 - v9;
  __chkstk_darwin(v11);
  v13 = (char *)&v93 - v12;
  v98 = (id)sub_1000AB674();
  v99[0] = 0;
  v99[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(41);
  swift_bridgeObjectRelease(v99[1]);
  v99[0] = 0xD000000000000011;
  v99[1] = 0x80000001001AB420;
  v14 = type metadata accessor for UUID(0);
  v15 = sub_1000A0940((unint64_t *)&unk_100210750, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v16._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v14, v15);
  object = v16._object;
  String.append(_:)(v16);
  swift_bridgeObjectRelease(object);
  v18._countAndFlagsBits = 0x3A79656B202D2029;
  v18._object = (void *)0xE900000000000020;
  String.append(_:)(v18);
  LODWORD(object) = IsAppleInternalBuild(v19);
  v20 = (_QWORD *)(v0 + *(int *)(type metadata accessor for LegacyAccountMagicKeysRecord(0) + 20));
  v21 = *v20;
  v22 = v20[1];
  v23 = Data.subdata(in:)(1, 17, *v20, v22);
  v25 = v23;
  v26 = v24;
  if ((_DWORD)object)
    Data.hexString.getter(v23, v24);
  else
    v27 = Data.description.getter(v23, v24);
  v29 = v27;
  v30 = v28;
  sub_1000A103C(v25, v26);
  v31._countAndFlagsBits = v29;
  v31._object = v30;
  String.append(_:)(v31);
  swift_bridgeObjectRelease(v30);
  v32._countAndFlagsBits = 0x203A746E6968202CLL;
  v32._object = (void *)0xE800000000000000;
  String.append(_:)(v32);
  LODWORD(v30) = IsAppleInternalBuild(v33);
  v34 = Data.subdata(in:)(17, 33, v21, v22);
  v36 = v34;
  v37 = v35;
  if ((_DWORD)v30)
    Data.hexString.getter(v34, v35);
  else
    v38 = Data.description.getter(v34, v35);
  v40 = v38;
  v41 = v39;
  sub_1000A103C(v36, v37);
  v42._countAndFlagsBits = v40;
  v42._object = v41;
  String.append(_:)(v42);
  swift_bridgeObjectRelease(v41);
  v43._countAndFlagsBits = 10;
  v43._object = (void *)0xE100000000000000;
  String.append(_:)(v43);
  v44 = v99[0];
  v45 = v99[1];
  v99[0] = 0;
  v99[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(49);
  swift_bridgeObjectRelease(v99[1]);
  strcpy((char *)v99, "   createdOn: ");
  HIBYTE(v99[1]) = -18;
  v46 = objc_msgSend(v98, "creationDate");
  if (v46)
  {
    v47 = v46;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v46);

    v48 = v97;
    v49 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v97 + 56);
    v49(v10, 0, 1, v1);
  }
  else
  {
    v48 = v97;
    v49 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v97 + 56);
    v49(v10, 1, 1, v1);
  }
  sub_1000A0F38((uint64_t)v10, (uint64_t)v13);
  v50 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v48 + 48);
  if (v50(v13, 1, v1))
  {
    sub_1000B2D38((uint64_t)v13);
    v51 = (void *)0xE200000000000000;
    v52 = 15932;
  }
  else
  {
    v53 = *(void (**)(char *, char *, uint64_t))(v48 + 16);
    v94 = v45;
    v54 = v44;
    v55 = v95;
    v53(v95, v13, v1);
    sub_1000B2D38((uint64_t)v13);
    v56 = (void *)objc_opt_self(NSDateFormatter);
    isa = Date._bridgeToObjectiveC()().super.isa;
    v58 = objc_msgSend(v56, "localizedStringFromDate:dateStyle:timeStyle:", isa, 2, 2);

    v59 = v48;
    v52 = static String._unconditionallyBridgeFromObjectiveC(_:)(v58);
    v51 = v60;

    v61 = v55;
    v44 = v54;
    v45 = v94;
    (*(void (**)(char *, uint64_t))(v59 + 8))(v61, v1);
  }
  v62._countAndFlagsBits = v52;
  v62._object = v51;
  String.append(_:)(v62);
  swift_bridgeObjectRelease(v51);
  v63._countAndFlagsBits = 0x696669646F6D202CLL;
  v63._object = (void *)0xEE00203A6E4F6465;
  String.append(_:)(v63);
  v64 = v98;
  v65 = objc_msgSend(v98, "modificationDate");
  if (v65)
  {
    v66 = v65;
    v67 = (uint64_t)v96;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v65);

    v68 = 0;
  }
  else
  {
    v68 = 1;
    v67 = (uint64_t)v96;
  }
  v69 = v97;
  v49((char *)v67, v68, 1, v1);
  sub_1000A0F38(v67, (uint64_t)v7);
  if (v50(v7, 1, v1))
  {
    sub_1000B2D38((uint64_t)v7);
    v70 = (void *)0xE200000000000000;
    v71 = 15932;
  }
  else
  {
    v72 = v45;
    v73 = v44;
    v74 = v95;
    (*(void (**)(char *, char *, uint64_t))(v69 + 16))(v95, v7, v1);
    sub_1000B2D38((uint64_t)v7);
    v75 = (void *)objc_opt_self(NSDateFormatter);
    v76 = Date._bridgeToObjectiveC()().super.isa;
    v77 = objc_msgSend(v75, "localizedStringFromDate:dateStyle:timeStyle:", v76, 2, 2);

    v71 = static String._unconditionallyBridgeFromObjectiveC(_:)(v77);
    v78 = v69;
    v70 = v79;

    v80 = v74;
    v44 = v73;
    v45 = v72;
    (*(void (**)(char *, uint64_t))(v78 + 8))(v80, v1);
  }
  v81._countAndFlagsBits = v71;
  v81._object = v70;
  String.append(_:)(v81);
  swift_bridgeObjectRelease(v70);
  v82._countAndFlagsBits = 0x696669646F6D202CLL;
  v82._object = (void *)0xEF203A7962206465;
  String.append(_:)(v82);
  v83 = objc_msgSend(v64, "modifiedByDevice");
  if (v83)
  {
    v84 = v83;
    v85 = static String._unconditionallyBridgeFromObjectiveC(_:)(v83);
    v87 = v86;

  }
  else
  {
    v87 = (void *)0xE200000000000000;
    v85 = 15932;
  }
  v88._countAndFlagsBits = v85;
  v88._object = v87;
  String.append(_:)(v88);
  swift_bridgeObjectRelease(v87);
  v89 = v99[0];
  v90 = (void *)v99[1];
  v99[0] = v44;
  v99[1] = v45;
  swift_bridgeObjectRetain(v45);
  v91._countAndFlagsBits = v89;
  v91._object = v90;
  String.append(_:)(v91);

  swift_bridgeObjectRelease(v45);
  swift_bridgeObjectRelease(v90);
  return v99[0];
}

uint64_t sub_1000B13BC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, char *, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  id v21;
  NSString v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  unint64_t v34;
  uint64_t v35;
  _BYTE *v36;
  uint64_t v37;
  _QWORD v39[6];
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD v44[2];
  id v45;

  v4 = sub_1000A0980((uint64_t *)&unk_1002103D0);
  __chkstk_darwin(v4);
  v39[4] = (char *)v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v41 = (char *)v39 - v7;
  v40 = type metadata accessor for Date(0);
  v42 = *(_QWORD *)(v40 - 8);
  __chkstk_darwin(v40);
  __chkstk_darwin(v8);
  v39[5] = (char *)v39 - v9;
  v10 = sub_1000A0980(&qword_1002103E0);
  __chkstk_darwin(v10);
  v12 = (char *)v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  UUID.init(uuidString:)(0xD000000000000024, 0x80000001001AB3A0);
  v13 = type metadata accessor for UUID(0);
  v14 = *(_QWORD *)(v13 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
  {
    __break(1u);
    JUMPOUT(0x1000B1AB8);
  }
  v15 = *(uint64_t (**)(uint64_t, char *, uint64_t))(v14 + 32);
  v43 = a2;
  v16 = v15(a2, v12, v13);
  v17 = CKRecord.recordType.getter(v16);
  v19 = v18;
  if (v17 == 0x654B72657473614DLL && v18 == 0xE900000000000079)
  {
    swift_bridgeObjectRelease(0xE900000000000079);
  }
  else
  {
    v20 = _stringCompareWithSmolCheck(_:_:expecting:)(v17, v18, 0x654B72657473614DLL, 0xE900000000000079, 0);
    swift_bridgeObjectRelease(v19);
    if ((v20 & 1) == 0)
    {
      v26 = sub_1000B2C90();
      v27 = swift_allocError(&type metadata for LegacyAccountMagicKeysRecord.LegacyAccountMagicKeysRecordError, v26, 0, 0);
      *v28 = 0;
      swift_willThrow(v27);
      goto LABEL_13;
    }
  }
  v21 = objc_msgSend(a1, "encryptedValues");
  v22 = String._bridgeToObjectiveC()();
  v23 = objc_msgSend(v21, "objectForKeyedSubscript:", v22);

  if (v23)
  {
    v45 = v23;
    v25 = sub_1000A0980(&qword_100210400);
    v24 = swift_dynamicCast(v44, &v45, v25, &type metadata for Data, 6);
    if ((v24 & 1) != 0)
      __asm { BR              X10 }
  }
  v29 = static os_log_type_t.error.getter(v24);
  if (qword_1002101E0 != -1)
    swift_once(&qword_1002101E0, sub_1001687B0);
  v30 = qword_100218DE8;
  v31 = sub_1000A0980((uint64_t *)&unk_1002103C0);
  v32 = swift_allocObject(v31, 72, 7);
  *(_OWORD *)(v32 + 16) = xmmword_100184870;
  *(_QWORD *)(v32 + 56) = sub_1000A0FC4();
  *(_QWORD *)(v32 + 64) = sub_1000A0940((unint64_t *)&qword_1002108A0, (uint64_t (*)(uint64_t))sub_1000A0FC4, (uint64_t)&protocol conformance descriptor for NSObject);
  *(_QWORD *)(v32 + 32) = a1;
  v33 = a1;
  os_log(_:dso:log:_:_:)(v29, &_mh_execute_header, v30, "Invalid LegacyAccountMagicKeysRecord - %@", 41, 2, v32);
  swift_bridgeObjectRelease(v32);
  v34 = sub_1000B2C90();
  v35 = swift_allocError(&type metadata for LegacyAccountMagicKeysRecord.LegacyAccountMagicKeysRecordError, v34, 0, 0);
  *v36 = 2;
  swift_willThrow(v35);
  swift_unknownObjectRelease(v21);
LABEL_13:
  v37 = v43;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 8))(v37, v13);
}

uint64_t sub_1000B1AC8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t result;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  _QWORD *v45;
  unsigned int (*v46)(char *, uint64_t, uint64_t);
  void *v47;
  unint64_t v48;
  objc_class *v49;
  Class isa;
  uint64_t v51;
  uint64_t v52;
  id v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  _QWORD *v57;
  void (*v58)(uint64_t, char *, uint64_t);
  void (*v59)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  unint64_t v68;
  objc_class *v69;
  Class v70;
  uint64_t v71;
  id v72;
  char *v73;
  uint64_t v74;
  void (*v75)(char *, char *, uint64_t);
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t *v81;
  char *v82;
  unint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  _QWORD *v97;
  id v98[4];
  char v99;

  v91 = a2;
  v4 = sub_1000A0980((uint64_t *)&unk_1002103D0);
  __chkstk_darwin(v4);
  v85 = (char *)&v80 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v89 = (uint64_t)&v80 - v7;
  __chkstk_darwin(v8);
  v92 = (char *)&v80 - v9;
  v10 = type metadata accessor for Date(0);
  v95 = *(_QWORD **)(v10 - 8);
  v96 = v10;
  __chkstk_darwin(v10);
  v88 = (char *)&v80 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v90 = (char *)&v80 - v13;
  v14 = sub_1000A0980(&qword_100210BD0);
  v93 = *(_QWORD *)(v14 - 8);
  v94 = v14;
  __chkstk_darwin(v14);
  v16 = (char *)&v80 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_1000A0980(&qword_1002103E0);
  __chkstk_darwin(v17);
  v19 = (char *)&v80 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = (int *)type metadata accessor for LegacyAccountMagicKeysRecord(0);
  __chkstk_darwin(v20);
  v86 = (uint64_t)&v80 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v87 = (uint64_t)&v80 - v23;
  __chkstk_darwin(v24);
  v26 = (char *)&v80 - v25;
  UUID.init(uuidString:)(0xD000000000000024, 0x80000001001AB3A0);
  v27 = type metadata accessor for UUID(0);
  v28 = *(_QWORD *)(v27 - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v28 + 48))(v19, 1, v27);
  if ((_DWORD)result != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v26, v19, v27);
    v30 = a1;
    v32 = a1[3];
    v31 = a1[4];
    v97 = v30;
    sub_1000A20D8(v30, v32);
    v33 = sub_1000B3514();
    dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for LegacyAccountMagicKeysRecord.CodingKeys, &type metadata for LegacyAccountMagicKeysRecord.CodingKeys, v33, v32, v31);
    if (v2)
    {
      sub_1000A2140(v97);
      return (*(uint64_t (**)(char *, uint64_t))(v28 + 8))(v26, v27);
    }
    v99 = 1;
    v34 = sub_1000A2160();
    v35 = v94;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v98, &type metadata for Data, &v99, v94, &type metadata for Data, v34);
    *(_OWORD *)&v26[v20[5]] = *(_OWORD *)v98;
    v99 = 2;
    v36 = KeyedDecodingContainer.decode<A>(_:forKey:)(v98, &type metadata for Data, &v99, v35, &type metadata for Data, v34);
    v37 = (uint64_t)v98[1];
    v38 = (uint64_t *)&v26[v20[6]];
    v83 = (unint64_t)v98[1];
    v84 = (uint64_t)v98[0];
    *v38 = (uint64_t)v98[0];
    v38[1] = v37;
    v81 = v38;
    v82 = &v26[v20[7]];
    static Date.now.getter(v36);
    LOBYTE(v98[0]) = 3;
    v39 = sub_1000A0940(&qword_100210790, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    v40 = v16;
    v41 = v92;
    v42 = v96;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v96, v98, v35, v96, v39);
    v44 = v83;
    v43 = v84;
    v80 = v40;
    v45 = v95;
    v46 = (unsigned int (*)(char *, uint64_t, uint64_t))v95[6];
    if (v46(v41, 1, v42) != 1)
    {
      (*(void (**)(char *, uint64_t))(v93 + 8))(v80, v94);
      v60 = v90;
      ((void (*)(char *, char *, uint64_t))v45[4])(v90, v41, v42);
      v61 = v97;
      v65 = v42;
      v63 = v91;
      v64 = v82;
LABEL_22:
      ((void (*)(char *, char *, uint64_t))v45[5])(v64, v60, v65);
      sub_1000B3558((uint64_t)v26, v63);
      sub_1000A2140(v61);
      return sub_1000B359C((uint64_t)v26);
    }
    v47 = objc_autoreleasePoolPush();
    v48 = v44;
    sub_1000A0E74(v43, v44);
    sub_100109DEC(v43, v44);
    isa = v49;
    sub_1000A103C(v43, v48);
    v51 = v87;
    sub_1000B3558((uint64_t)v26, v87);
    if (!isa)
      isa = sub_1000A9808(v51).super.isa;
    sub_1000B359C(v51);
    v52 = v89;
    v98[0] = isa;
    sub_1000B22B4(v98);
    objc_autoreleasePoolPop(v47);
    v53 = -[objc_class modificationDate](isa, "modificationDate");

    if (v53)
    {
      v54 = v42;
      v55 = v88;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v53);

      v56 = v54;
      v57 = v95;
      v58 = (void (*)(uint64_t, char *, uint64_t))v95[4];
      v58(v52, v55, v56);
      v59 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v57[7];
      v59(v52, 0, 1, v56);
      if (v46((char *)v52, 1, v56) != 1)
      {
        (*(void (**)(char *, uint64_t))(v93 + 8))(v80, v94);
        v60 = v90;
        v58((uint64_t)v90, (char *)v52, v96);
        v61 = v97;
        v45 = v95;
        v63 = v91;
        v62 = (uint64_t)v92;
        v64 = v82;
LABEL_21:
        sub_1000B2D38(v62);
        v65 = v96;
        goto LABEL_22;
      }
    }
    else
    {
      v59 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v95[7];
      v59(v52, 1, 1, v42);
    }
    v66 = objc_autoreleasePoolPush();
    v67 = *v81;
    v68 = v81[1];
    sub_1000A0E74(*v81, v68);
    sub_100109DEC(v67, v68);
    v70 = v69;
    sub_1000A103C(v67, v68);
    v71 = v86;
    sub_1000B3558((uint64_t)v26, v86);
    if (!v70)
      v70 = sub_1000A9808(v71).super.isa;
    sub_1000B359C(v71);
    v98[0] = v70;
    sub_1000B22B4(v98);
    objc_autoreleasePoolPop(v66);
    v72 = -[objc_class creationDate](v70, "creationDate");

    v61 = v97;
    if (v72)
    {
      v73 = v88;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v72);

      v74 = v96;
      v75 = (void (*)(char *, char *, uint64_t))v95[4];
      v76 = v85;
      v75(v85, v73, v96);
      v59((uint64_t)v76, 0, 1, v74);
      v77 = v74;
      v78 = (uint64_t)v76;
      v79 = ((uint64_t (*)(char *, uint64_t, uint64_t))v46)(v76, 1, v77);
      v63 = v91;
      if ((_DWORD)v79 != 1)
      {
        (*(void (**)(char *, uint64_t))(v93 + 8))(v80, v94);
        v60 = v90;
        v75(v90, (char *)v78, v96);
LABEL_20:
        v62 = (uint64_t)v92;
        v64 = v82;
        sub_1000B2D38(v89);
        v45 = v95;
        goto LABEL_21;
      }
    }
    else
    {
      v78 = (uint64_t)v85;
      v79 = ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v59)(v85, 1, 1, v96);
      v63 = v91;
    }
    v60 = v90;
    static Date.now.getter(v79);
    (*(void (**)(char *, uint64_t))(v93 + 8))(v80, v94);
    sub_1000B2D38(v78);
    goto LABEL_20;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000B22B4(id *a1)
{
  uint64_t v1;
  uint64_t v2;
  id v3;
  uint64_t ObjectType;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  void *v25;

  v2 = v1;
  v3 = objc_msgSend(*a1, "encryptedValues");
  ObjectType = swift_getObjectType(v3);
  CKRecordKeyValueSetting.subscript.getter(&v22, 0xD000000000000016, 0x80000001001AB3D0, ObjectType, &type metadata for Data, &protocol witness table for Data);
  v5 = v22;
  v6 = v23;
  v7 = (uint64_t *)(v2 + *(int *)(type metadata accessor for LegacyAccountMagicKeysRecord(0) + 20));
  v8 = *v7;
  v9 = v7[1];
  sub_1000A0E74(*v7, v9);
  if (v6 >> 60 == 15)
  {
    sub_1000B2D78(v5, v6);
    v10 = sub_1000B2D78(v8, v9);
  }
  else
  {
    sub_1000B2D8C(v5, v6);
    sub_1000D25EC(v5, v6);
    v12 = v11;
    sub_1000A103C(v8, v9);
    sub_1000B2D78(v5, v6);
    v10 = sub_1000B2D78(v5, v6);
    if ((v12 & 1) != 0)
      return swift_unknownObjectRelease(v3);
  }
  v13 = static os_log_type_t.info.getter(v10);
  if (qword_1002101E0 != -1)
    swift_once(&qword_1002101E0, sub_1001687B0);
  v14 = qword_100218DE8;
  v15 = sub_1000A0980((uint64_t *)&unk_1002103C0);
  v16 = swift_allocObject(v15, 72, 7);
  *(_OWORD *)(v16 + 16) = xmmword_100184870;
  Data.hexString.getter(v8, v9);
  v18 = v17;
  v20 = v19;
  *(_QWORD *)(v16 + 56) = &type metadata for String;
  *(_QWORD *)(v16 + 64) = sub_1000A0DF4();
  *(_QWORD *)(v16 + 32) = v18;
  *(_QWORD *)(v16 + 40) = v20;
  os_log(_:dso:log:_:_:)(v13, &_mh_execute_header, v14, "Updating LegacyAccountMagicKeysRecord to %@", 43, 2, v16);
  swift_bridgeObjectRelease(v16);
  v24 = &type metadata for Data;
  v25 = &protocol witness table for Data;
  v22 = v8;
  v23 = v9;
  sub_1000A0E74(v8, v9);
  CKRecordKeyValueSetting.subscript.setter(&v22, 0xD000000000000016, 0x80000001001AB3D0, ObjectType);
  return swift_unknownObjectRelease(v3);
}

uint64_t sub_1000B24EC(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  char v21;
  __int128 v22;

  v3 = v1;
  v5 = sub_1000A0980((uint64_t *)&unk_100210BE0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_1000A20D8(a1, v9);
  v11 = sub_1000B3514();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for LegacyAccountMagicKeysRecord.CodingKeys, &type metadata for LegacyAccountMagicKeysRecord.CodingKeys, v11, v9, v10);
  LOBYTE(v22) = 0;
  v12 = type metadata accessor for UUID(0);
  v13 = sub_1000A0940((unint64_t *)&unk_1002105E0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v3, &v22, v5, v12, v13);
  if (!v2)
  {
    v14 = (int *)type metadata accessor for LegacyAccountMagicKeysRecord(0);
    v22 = *(_OWORD *)(v3 + v14[5]);
    v21 = 1;
    v15 = sub_1000A21A4();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v22, &v21, v5, &type metadata for Data, v15);
    v22 = *(_OWORD *)(v3 + v14[6]);
    v21 = 2;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v22, &v21, v5, &type metadata for Data, v15);
    v16 = v3 + v14[7];
    LOBYTE(v22) = 3;
    v17 = type metadata accessor for Date(0);
    v18 = sub_1000A0940((unint64_t *)&unk_100210EB0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v16, &v22, v5, v17, v18);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1000B26FC()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1000B2730 + 4 * byte_100185F90[*v0]))(0x696669746E656469, 0xEA00000000007265);
}

uint64_t sub_1000B2730()
{
  return 0x4B746E756F636361;
}

uint64_t sub_1000B2754()
{
  return 0x74654D64756F6C63;
}

unint64_t sub_1000B2778()
{
  return 0xD000000000000010;
}

uint64_t sub_1000B2794@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1000B377C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000B27B8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000B3514();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B27E0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000B3514();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B2808()
{
  return 0x654B72657473614DLL;
}

unint64_t sub_1000B2824()
{
  return 0xD000000000000022;
}

uint64_t sub_1000B2840(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = v1 + *(int *)(a1 + 24);
  v3 = *(_QWORD *)v2;
  sub_1000A0E74(*(_QWORD *)v2, *(_QWORD *)(v2 + 8));
  return v3;
}

Swift::Int sub_1000B287C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[9];

  Hasher.init(_seed:)(v14, 0);
  v3 = type metadata accessor for UUID(0);
  v4 = sub_1000A0940((unint64_t *)&unk_100210620, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(v14, v3, v4);
  v5 = (uint64_t *)(v1 + *(int *)(a1 + 20));
  v6 = *v5;
  v7 = v5[1];
  sub_1000A0E74(*v5, v7);
  Data.hash(into:)(v14, v6, v7);
  sub_1000A103C(v6, v7);
  v8 = (uint64_t *)(v1 + *(int *)(a1 + 24));
  v9 = *v8;
  v10 = v8[1];
  sub_1000A0E74(*v8, v10);
  Data.hash(into:)(v14, v9, v10);
  sub_1000A103C(v9, v10);
  v11 = type metadata accessor for Date(0);
  v12 = sub_1000A0940(&qword_100210EC0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  dispatch thunk of Hashable.hash(into:)(v14, v11, v12);
  return Hasher._finalize()();
}

uint64_t sub_1000B299C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v5 = type metadata accessor for UUID(0);
  v6 = sub_1000A0940((unint64_t *)&unk_100210620, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(a1, v5, v6);
  v7 = (uint64_t *)(v2 + *(int *)(a2 + 20));
  v8 = *v7;
  v9 = v7[1];
  sub_1000A0E74(*v7, v9);
  Data.hash(into:)(a1, v8, v9);
  sub_1000A103C(v8, v9);
  v10 = (uint64_t *)(v2 + *(int *)(a2 + 24));
  v11 = *v10;
  v12 = v10[1];
  sub_1000A0E74(*v10, v12);
  Data.hash(into:)(a1, v11, v12);
  sub_1000A103C(v11, v12);
  v13 = type metadata accessor for Date(0);
  v14 = sub_1000A0940(&qword_100210EC0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  return dispatch thunk of Hashable.hash(into:)(a1, v13, v14);
}

Swift::Int sub_1000B2AAC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[9];

  Hasher.init(_seed:)(v15, a1);
  v4 = type metadata accessor for UUID(0);
  v5 = sub_1000A0940((unint64_t *)&unk_100210620, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(v15, v4, v5);
  v6 = (uint64_t *)(v2 + *(int *)(a2 + 20));
  v7 = *v6;
  v8 = v6[1];
  sub_1000A0E74(*v6, v8);
  Data.hash(into:)(v15, v7, v8);
  sub_1000A103C(v7, v8);
  v9 = (uint64_t *)(v2 + *(int *)(a2 + 24));
  v10 = *v9;
  v11 = v9[1];
  sub_1000A0E74(*v9, v11);
  Data.hash(into:)(v15, v10, v11);
  sub_1000A103C(v10, v11);
  v12 = type metadata accessor for Date(0);
  v13 = sub_1000A0940(&qword_100210EC0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  dispatch thunk of Hashable.hash(into:)(v15, v12, v13);
  return Hasher._finalize()();
}

uint64_t sub_1000B2BC8(uint64_t a1, uint64_t a2, int *a3)
{
  char v6;
  char v7;

  if ((static UUID.== infix(_:_:)(a1) & 1) != 0
    && (sub_1000D25EC(*(_QWORD *)(a1 + a3[5]), *(_QWORD *)(a1 + a3[5] + 8)), (v6 & 1) != 0)
    && (sub_1000D25EC(*(_QWORD *)(a1 + a3[6]), *(_QWORD *)(a1 + a3[6] + 8)), (v7 & 1) != 0))
  {
    return static Date.== infix(_:_:)(a1 + a3[7], a2 + a3[7]);
  }
  else
  {
    return 0;
  }
}

uint64_t sub_1000B2C58@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for UUID(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

unint64_t sub_1000B2C90()
{
  unint64_t result;

  result = qword_100210B08;
  if (!qword_100210B08)
  {
    result = swift_getWitnessTable(&unk_100186180, &type metadata for LegacyAccountMagicKeysRecord.LegacyAccountMagicKeysRecordError);
    atomic_store(result, (unint64_t *)&qword_100210B08);
  }
  return result;
}

uint64_t sub_1000B2CD4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000B1AC8(a1, a2);
}

uint64_t sub_1000B2CE8(_QWORD *a1)
{
  return sub_1000B24EC(a1);
}

uint64_t type metadata accessor for LegacyAccountMagicKeysRecord(uint64_t a1)
{
  uint64_t result;

  result = qword_100210B68;
  if (!qword_100210B68)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for LegacyAccountMagicKeysRecord);
  return result;
}

uint64_t sub_1000B2D38(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1000A0980((uint64_t *)&unk_1002103D0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000B2D78(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_1000A103C(a1, a2);
  return a1;
}

uint64_t sub_1000B2D8C(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_1000A0E74(a1, a2);
  return a1;
}

ValueMetadata *type metadata accessor for LegacyAccountMagicKeysRecord.LegacyAccountMagicKeysRecordError()
{
  return &type metadata for LegacyAccountMagicKeysRecord.LegacyAccountMagicKeysRecordError;
}

uint64_t *sub_1000B2DB8(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v22 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v22 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v22);
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = (uint64_t *)((char *)a1 + v8);
    v10 = (uint64_t *)((char *)a2 + v8);
    v11 = *v10;
    v12 = v10[1];
    sub_1000A0E74(*v10, v12);
    *v9 = v11;
    v9[1] = v12;
    v13 = a3[6];
    v14 = (uint64_t *)((char *)a1 + v13);
    v15 = (uint64_t *)((char *)a2 + v13);
    v16 = *v15;
    v17 = v15[1];
    sub_1000A0E74(*v15, v17);
    *v14 = v16;
    v14[1] = v17;
    v18 = a3[7];
    v19 = (char *)a1 + v18;
    v20 = (char *)a2 + v18;
    v21 = type metadata accessor for Date(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(v19, v20, v21);
  }
  return a1;
}

uint64_t sub_1000B2EA8(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  sub_1000A103C(*(_QWORD *)(a1 + a2[5]), *(_QWORD *)(a1 + a2[5] + 8));
  sub_1000A103C(*(_QWORD *)(a1 + a2[6]), *(_QWORD *)(a1 + a2[6] + 8));
  v5 = a1 + a2[7];
  v6 = type metadata accessor for Date(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
}

uint64_t sub_1000B2F24(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = (uint64_t *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v10 = *v9;
  v11 = v9[1];
  sub_1000A0E74(*v9, v11);
  *v8 = v10;
  v8[1] = v11;
  v12 = a3[6];
  v13 = (uint64_t *)(a1 + v12);
  v14 = (uint64_t *)(a2 + v12);
  v15 = *v14;
  v16 = v14[1];
  sub_1000A0E74(*v14, v16);
  *v13 = v15;
  v13[1] = v16;
  v17 = a3[7];
  v18 = a1 + v17;
  v19 = a2 + v17;
  v20 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v18, v19, v20);
  return a1;
}

uint64_t sub_1000B2FE8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = (uint64_t *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v10 = *v9;
  v11 = v9[1];
  sub_1000A0E74(*v9, v11);
  v12 = *v8;
  v13 = v8[1];
  *v8 = v10;
  v8[1] = v11;
  sub_1000A103C(v12, v13);
  v14 = a3[6];
  v15 = (uint64_t *)(a1 + v14);
  v16 = (uint64_t *)(a2 + v14);
  v17 = *v16;
  v18 = v16[1];
  sub_1000A0E74(*v16, v18);
  v19 = *v15;
  v20 = v15[1];
  *v15 = v17;
  v15[1] = v18;
  sub_1000A103C(v19, v20);
  v21 = a3[7];
  v22 = a1 + v21;
  v23 = a2 + v21;
  v24 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 24))(v22, v23, v24);
  return a1;
}

uint64_t sub_1000B30BC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  v8 = a3[7];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
  return a1;
}

uint64_t sub_1000B314C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = *(_QWORD *)(a1 + v7);
  v9 = *(_QWORD *)(a1 + v7 + 8);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  sub_1000A103C(v8, v9);
  v10 = a3[6];
  v11 = *(_QWORD *)(a1 + v10);
  v12 = *(_QWORD *)(a1 + v10 + 8);
  *(_OWORD *)(a1 + v10) = *(_OWORD *)(a2 + v10);
  sub_1000A103C(v11, v12);
  v13 = a3[7];
  v14 = a1 + v13;
  v15 = a2 + v13;
  v16 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 40))(v14, v15, v16);
  return a1;
}

uint64_t sub_1000B31F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000B3204);
}

uint64_t sub_1000B3204(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  if ((_DWORD)a2 == 12)
  {
    v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8) >> 60;
    if (((4 * (_DWORD)v9) & 0xC) != 0)
      return 16 - ((4 * (_DWORD)v9) & 0xC | (v9 >> 2));
    else
      return 0;
  }
  else
  {
    v10 = type metadata accessor for Date(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(a1 + *(int *)(a3 + 28), a2, v10);
  }
}

uint64_t sub_1000B32BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000B32C8);
}

uint64_t sub_1000B32C8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  _QWORD *v13;

  result = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 12)
    {
      v13 = (_QWORD *)(a1 + *(int *)(a4 + 20));
      *v13 = 0;
      v13[1] = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * (_DWORD)a2) << 60;
      return result;
    }
    v10 = type metadata accessor for Date(0);
    v12 = a1 + *(int *)(a4 + 28);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t sub_1000B3378(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[4];

  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v5[0] = *(_QWORD *)(result - 8) + 64;
    v5[1] = &unk_100186010;
    v5[2] = &unk_100186010;
    result = type metadata accessor for Date(319);
    if (v4 <= 0x3F)
    {
      v5[3] = *(_QWORD *)(result - 8) + 64;
      swift_initStructMetadata(a1, 256, 4, v5, a1 + 16);
      return 0;
    }
  }
  return result;
}

uint64_t sub_1000B3408(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_1000A0940(&qword_100210BA8, type metadata accessor for LegacyAccountMagicKeysRecord, (uint64_t)&unk_1001861E8);
  result = sub_1000A0940(&qword_100210BB0, type metadata accessor for LegacyAccountMagicKeysRecord, (uint64_t)&unk_1001861C0);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t sub_1000B3464()
{
  return sub_1000A0940(&qword_100210BB8, type metadata accessor for LegacyAccountMagicKeysRecord, (uint64_t)&unk_100186094);
}

uint64_t sub_1000B3490(uint64_t a1)
{
  uint64_t result;

  result = sub_1000A0940(&qword_100210BC0, type metadata accessor for LegacyAccountMagicKeysRecord, (uint64_t)&unk_100186028);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1000B34D0()
{
  unint64_t result;

  result = qword_100210BC8;
  if (!qword_100210BC8)
  {
    result = swift_getWitnessTable(&unk_100186158, &type metadata for LegacyAccountMagicKeysRecord.LegacyAccountMagicKeysRecordError);
    atomic_store(result, (unint64_t *)&qword_100210BC8);
  }
  return result;
}

unint64_t sub_1000B3514()
{
  unint64_t result;

  result = qword_100210BD8;
  if (!qword_100210BD8)
  {
    result = swift_getWitnessTable(&unk_1001862D4, &type metadata for LegacyAccountMagicKeysRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100210BD8);
  }
  return result;
}

uint64_t sub_1000B3558(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for LegacyAccountMagicKeysRecord(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000B359C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for LegacyAccountMagicKeysRecord(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t _s15audioaccessoryd28LegacyAccountMagicKeysRecordV33LegacyAccountMagicKeysRecordErrorOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1000B3624 + 4 * byte_100185F99[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1000B3658 + 4 * byte_100185F94[v4]))();
}

uint64_t sub_1000B3658(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000B3660(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000B3668);
  return result;
}

uint64_t sub_1000B3674(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000B367CLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1000B3680(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000B3688(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for LegacyAccountMagicKeysRecord.CodingKeys()
{
  return &type metadata for LegacyAccountMagicKeysRecord.CodingKeys;
}

unint64_t sub_1000B36A8()
{
  unint64_t result;

  result = qword_100210BF0;
  if (!qword_100210BF0)
  {
    result = swift_getWitnessTable(&unk_1001862AC, &type metadata for LegacyAccountMagicKeysRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100210BF0);
  }
  return result;
}

unint64_t sub_1000B36F0()
{
  unint64_t result;

  result = qword_100210BF8;
  if (!qword_100210BF8)
  {
    result = swift_getWitnessTable(&unk_10018621C, &type metadata for LegacyAccountMagicKeysRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100210BF8);
  }
  return result;
}

unint64_t sub_1000B3738()
{
  unint64_t result;

  result = qword_100210C00;
  if (!qword_100210C00)
  {
    result = swift_getWitnessTable(&unk_100186244, &type metadata for LegacyAccountMagicKeysRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100210C00);
  }
  return result;
}

uint64_t sub_1000B377C(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  char v9;

  if (a1 == 0x696669746E656469 && a2 == 0xEA00000000007265)
  {
    v5 = 0xEA00000000007265;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x696669746E656469, 0xEA00000000007265, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x4B746E756F636361 && a2 == 0xEF626F6C42737965)
  {
    v7 = 0xEF626F6C42737965;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x4B746E756F636361, 0xEF626F6C42737965, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x74654D64756F6C63 && a2 == 0xED00006174616461)
  {
    v8 = 0xED00006174616461;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x74654D64756F6C63, 0xED00006174616461, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0xD000000000000010 && a2 == 0x80000001001AAA20)
  {
    swift_bridgeObjectRelease(0x80000001001AAA20);
    return 3;
  }
  else
  {
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x80000001001AAA20, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v9 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_1000B3C60(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1000A0980(&qword_100211980);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

char *sub_1000B3CA0(char *a1, uint64_t a2, __objc2_meth_list **p_opt_inst_meths)
{
  char *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  objc_class *v13;
  char *v14;
  unint64_t v15;
  int v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t i;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  Swift::String v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  void *v34;
  Swift::String v35;
  __objc2_meth_list **v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  os_activity_t v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  os_activity_scope_state_s *v47;
  NSObject *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  id v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  char description[8];
  uint64_t v70;
  objc_super v71;

  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v66 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = &v3[OBJC_IVAR____TtC15audioaccessoryd17BTUserTransaction_name];
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = 0;
  *(_QWORD *)&v3[OBJC_IVAR____TtC15audioaccessoryd17BTUserTransaction_underlyingTransaction] = 0;
  *(_QWORD *)&v3[OBJC_IVAR____TtC15audioaccessoryd17BTUserTransaction_underlyingActivity] = 0;
  v12 = &v3[OBJC_IVAR____TtC15audioaccessoryd17BTUserTransaction_activityState];
  v13 = (objc_class *)type metadata accessor for BTUserTransaction();
  *(_QWORD *)v12 = 0;
  *((_QWORD *)v12 + 1) = 0;
  v71.receiver = v3;
  v71.super_class = v13;
  v14 = (char *)objc_msgSendSuper2(&v71, "init");
  v17 = v14;
  v68 = (int)p_opt_inst_meths;
  v67 = v8;
  if ((p_opt_inst_meths & 1) != 0)
  {
    v15 = (unint64_t)a1 >> 32;
    if (!((unint64_t)a1 >> 32))
    {
      LODWORD(v15) = a1 >> 11;
      if (a1 >> 11 == 27)
        goto LABEL_45;
      LODWORD(v15) = a1 >> 16;
      if (a1 >> 16 <= 0x10)
      {
        if ((a1 & 0xFFFFFF80) != 0)
          goto LABEL_34;
        if (a1 <= 0xFF)
        {
          v22 = ((_BYTE)a1 + 1);
          goto LABEL_10;
        }
        __break(1u);
        goto LABEL_41;
      }
LABEL_31:
      __break(1u);
      goto LABEL_32;
    }
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  if (!a1)
  {
    __break(1u);
    goto LABEL_30;
  }
  v18 = v7;
  v19 = v14;
  v20 = a1;
  for (i = a2; ; i = v24)
  {
    v26 = static String._fromUTF8Repairing(_:)(v20, i);
    v28 = v27;
    *(_QWORD *)description = v26;
    v70 = v27;
    swift_bridgeObjectRetain(v27);
    v29._countAndFlagsBits = 46;
    v29._object = (void *)0xE100000000000000;
    String.append(_:)(v29);
    v30 = swift_bridgeObjectRelease(v28);
    p_opt_inst_meths = *(__objc2_meth_list ***)description;
    v31 = v70;
    v32 = UUID.init()(v30);
    v7 = UUID.uuidString.getter(v32);
    v34 = v33;
    (*(void (**)(char *, uint64_t))(v67 + 8))(v10, v18);
    *(_QWORD *)description = p_opt_inst_meths;
    v70 = v31;
    swift_bridgeObjectRetain(v31);
    v35._countAndFlagsBits = v7;
    v35._object = v34;
    String.append(_:)(v35);
    swift_bridgeObjectRelease(v34);
    swift_bridgeObjectRelease(v31);
    v36 = *(__objc2_meth_list ***)description;
    v37 = v70;
    v38 = &v17[OBJC_IVAR____TtC15audioaccessoryd17BTUserTransaction_name];
    v10 = *(char **)&v17[OBJC_IVAR____TtC15audioaccessoryd17BTUserTransaction_name + 8];
    *(_QWORD *)v38 = *(_QWORD *)description;
    *((_QWORD *)v38 + 1) = v37;
    swift_bridgeObjectRetain(v37);
    swift_bridgeObjectRelease(v10);
    v39 = String.utf8CString.getter(v36, v37);
    swift_bridgeObjectRelease(v37);
    v40 = os_transaction_create(v39 + 32);
    swift_release(v39);
    v41 = *(_QWORD *)&v17[OBJC_IVAR____TtC15audioaccessoryd17BTUserTransaction_underlyingTransaction];
    *(_QWORD *)&v17[OBJC_IVAR____TtC15audioaccessoryd17BTUserTransaction_underlyingTransaction] = v40;
    swift_unknownObjectRelease(v41);
    LODWORD(v15) = v68;
    if ((v68 & 1) == 0)
      break;
    v15 = (unint64_t)a1 >> 32;
    if (!((unint64_t)a1 >> 32))
    {
      LODWORD(v15) = a1 >> 11;
      if (a1 >> 11 == 27)
        goto LABEL_46;
      LODWORD(v15) = a1 >> 16;
      if (a1 >> 16 <= 0x10)
      {
        if ((a1 & 0xFFFFFF80) == 0)
        {
          p_opt_inst_meths = &OBJC_PROTOCOL___BTServicesXPCDaemonInterface.opt_inst_meths;
          if (a1 <= 0xFF)
          {
            v43 = ((_BYTE)a1 + 1);
            goto LABEL_22;
          }
          __break(1u);
LABEL_45:
          __break(1u);
LABEL_46:
          __break(1u);
          goto LABEL_47;
        }
LABEL_42:
        v16 = (a1 & 0x3F) << 8;
        p_opt_inst_meths = (__objc2_meth_list **)(&OBJC_PROTOCOL___BTServicesXPCDaemonInterface + 40);
        if (a1 < 0x800)
        {
          v43 = (v16 | (a1 >> 6)) + 33217;
          goto LABEL_22;
        }
        goto LABEL_48;
      }
LABEL_41:
      __break(1u);
      goto LABEL_42;
    }
LABEL_33:
    __break(1u);
LABEL_34:
    v60 = (a1 & 0x3F) << 8;
    v61 = (v60 | (a1 >> 6)) + 33217;
    v62 = (v60 | (a1 >> 6) & 0x3F) << 8;
    v63 = (((v62 | (a1 >> 12) & 0x3F) << 8) | (a1 >> 18)) - 2122219023;
    v64 = (v62 | (a1 >> 12)) + 8487393;
    if ((_DWORD)v15)
      v22 = v63;
    else
      v22 = v64;
    if (a1 < 0x800)
      v22 = v61;
LABEL_10:
    v18 = v7;
    v23 = __clz(v22);
    v24 = 4 - (v23 >> 3);
    *(_QWORD *)description = (v22 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << (8 * ((4 - (v23 >> 3)) & 7)));
    v25 = v17;
    v20 = description;
  }
  if (!a1)
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  if (qword_100210178 != -1)
    swift_once(&qword_100210178, sub_1000DA3B8);
  v42 = _os_activity_create((void *)&_mh_execute_header, a1, (os_activity_t)qword_100211160, OS_ACTIVITY_FLAG_DEFAULT);
  p_opt_inst_meths = (__objc2_meth_list **)(&OBJC_PROTOCOL___BTServicesXPCDaemonInterface + 40);
  while (1)
  {
    v44 = OBJC_IVAR____TtC15audioaccessoryd17BTUserTransaction_underlyingActivity;
    v45 = *(_QWORD *)&v17[OBJC_IVAR____TtC15audioaccessoryd17BTUserTransaction_underlyingActivity];
    *(_QWORD *)&v17[OBJC_IVAR____TtC15audioaccessoryd17BTUserTransaction_underlyingActivity] = v42;
    swift_unknownObjectRelease(v45);
    v46 = *(_QWORD *)&v17[v44];
    if (v46)
      break;
LABEL_47:
    __break(1u);
LABEL_48:
    v65 = (v16 | (a1 >> 6) & 0x3F) << 8;
    if ((_DWORD)v15)
      v43 = (((v65 | (a1 >> 12) & 0x3F) << 8) | (a1 >> 18)) - 2122219023;
    else
      v43 = (v65 | (a1 >> 12)) + 8487393;
LABEL_22:
    *(_QWORD *)description = (v43 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << ((32 - (__clz(v43) & 0x38)) & 0x38));
    if (qword_100210178 != -1)
      swift_once(&qword_100210178, sub_1000DA3B8);
    v42 = _os_activity_create((void *)&_mh_execute_header, description, (os_activity_t)qword_100211160, OS_ACTIVITY_FLAG_DEFAULT);
  }
  v47 = (os_activity_scope_state_s *)((char *)p_opt_inst_meths[387] + (_QWORD)v17);
  swift_beginAccess(v47, description, 33, 0);
  v48 = swift_unknownObjectRetain(v46);
  os_activity_scope_enter(v48, v47);
  swift_endAccess(description);
  v49 = swift_unknownObjectRelease(v46);
  v50 = static os_log_type_t.default.getter(v49);
  if (qword_100210200 != -1)
    swift_once(&qword_100210200, sub_100168974);
  v51 = qword_100218E08;
  v52 = sub_1000A0980((uint64_t *)&unk_1002103C0);
  v53 = swift_allocObject(v52, 72, 7);
  *(_OWORD *)(v53 + 16) = xmmword_100184870;
  v54 = v17;
  v55 = objc_msgSend(v54, "description");
  v56 = static String._unconditionallyBridgeFromObjectiveC(_:)(v55);
  v58 = v57;

  *(_QWORD *)(v53 + 56) = &type metadata for String;
  *(_QWORD *)(v53 + 64) = sub_1000A0DF4();
  *(_QWORD *)(v53 + 32) = v56;
  *(_QWORD *)(v53 + 40) = v58;
  os_log(_:dso:log:_:_:)(v50, &_mh_execute_header, v51, "Opened %@", 9, 2, v53);
  swift_bridgeObjectRelease(v53);

  return v54;
}

void static BTUserTransaction.named(_:with:)(char *a1, uint64_t a2, __objc2_meth_list **a3, void (*a4)(void))
{
  id v8;
  char *v9;

  v8 = objc_allocWithZone((Class)type metadata accessor for BTUserTransaction());
  v9 = sub_1000B3CA0(a1, a2, a3);
  a4();

}

uint64_t type metadata accessor for BTUserTransaction()
{
  return objc_opt_self(_TtC15audioaccessoryd17BTUserTransaction);
}

id BTUserTransaction.__deallocating_deinit(uint64_t a1)
{
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  os_activity_scope_state_s *v12;
  uint64_t v13;
  objc_super v15;
  _BYTE v16[24];

  v2 = OBJC_IVAR____TtC15audioaccessoryd17BTUserTransaction_underlyingTransaction;
  if (*(_QWORD *)&v1[OBJC_IVAR____TtC15audioaccessoryd17BTUserTransaction_underlyingTransaction])
  {
    v3 = static os_log_type_t.default.getter(a1);
    if (qword_100210200 != -1)
      swift_once(&qword_100210200, sub_100168974);
    v4 = qword_100218E08;
    v5 = sub_1000A0980((uint64_t *)&unk_1002103C0);
    v6 = swift_allocObject(v5, 72, 7);
    *(_OWORD *)(v6 + 16) = xmmword_100184870;
    v7 = v1;
    v8 = objc_msgSend(v7, "description");
    v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
    v11 = v10;

    *(_QWORD *)(v6 + 56) = &type metadata for String;
    *(_QWORD *)(v6 + 64) = sub_1000A0DF4();
    *(_QWORD *)(v6 + 32) = v9;
    *(_QWORD *)(v6 + 40) = v11;
    os_log(_:dso:log:_:_:)(v3, &_mh_execute_header, v4, "Closed %@", 9, 2, v6);
    swift_bridgeObjectRelease(v6);
    v12 = (os_activity_scope_state_s *)&v7[OBJC_IVAR____TtC15audioaccessoryd17BTUserTransaction_activityState];
    swift_beginAccess(&v7[OBJC_IVAR____TtC15audioaccessoryd17BTUserTransaction_activityState], v16, 33, 0);
    os_activity_scope_leave(v12);
    swift_endAccess(v16);
    v13 = *(_QWORD *)&v1[v2];
    *(_QWORD *)&v1[v2] = 0;
    swift_unknownObjectRelease(v13);
  }
  v15.receiver = v1;
  v15.super_class = (Class)type metadata accessor for BTUserTransaction();
  return objc_msgSendSuper2(&v15, "dealloc");
}

void BTUserTransaction.init()()
{
  _swift_stdlib_reportUnimplementedInitializer("audioaccessoryd.BTUserTransaction", 33, "init()", 6, 0);
  __break(1u);
}

uint64_t BTUserTransaction.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  Swift::String v3;
  void *object;
  Swift::String v5;
  _QWORD v7[2];
  uint64_t v8;
  unint64_t v9;

  v8 = 0x3A4E58545BLL;
  v9 = 0xE500000000000000;
  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC15audioaccessoryd17BTUserTransaction_name + 8);
  v7[0] = *(_QWORD *)(v0 + OBJC_IVAR____TtC15audioaccessoryd17BTUserTransaction_name);
  v7[1] = v1;
  swift_bridgeObjectRetain(v1);
  v2 = sub_1000A0980(&qword_100211AB0);
  v3._countAndFlagsBits = String.init<A>(describing:)(v7, v2);
  object = v3._object;
  String.append(_:)(v3);
  swift_bridgeObjectRelease(object);
  v5._countAndFlagsBits = 93;
  v5._object = (void *)0xE100000000000000;
  String.append(_:)(v5);
  return v8;
}

uint64_t sub_1000B467C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 16) = a2;
  *(_QWORD *)(result + 24) = 2 * a2;
  return result;
}

uint64_t sub_1000B4694()
{
  return 1;
}

Swift::Int sub_1000B469C()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1, 0);
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

void sub_1000B46DC()
{
  Hasher._combine(_:)(0);
}

Swift::Int sub_1000B4700(uint64_t a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, a1);
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

const char *sub_1000B473C()
{
  return "AudioAccessoryFeatures";
}

const char *sub_1000B4750()
{
  return "AADeviceRecordCloudSync";
}

void sub_1000B4764()
{
  id v0;

  v0 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for DeviceManager()), "init");
  sub_1000B54C8();
  qword_100218C80 = (uint64_t)v0;
}

void sub_1000B47E0(char a1)
{
  __asm { BR              X10 }
}

unint64_t sub_1000B480C()
{
  uint64_t v0;
  uint64_t inited;
  uint64_t v2;
  uint64_t v4;

  v0 = sub_1000A0980(&qword_100210D28);
  inited = swift_initStackObject(v0, &v4);
  *(_OWORD *)(inited + 16) = xmmword_100184870;
  *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedFailureReasonErrorKey);
  *(_QWORD *)(inited + 40) = v2;
  *(_QWORD *)(inited + 72) = &type metadata for String;
  strcpy((char *)(inited + 48), "Unknown error");
  *(_WORD *)(inited + 62) = -4864;
  return sub_1000A5288(inited);
}

void sub_1000B4A2C()
{
  char *v0;

  sub_1000B47E0(*v0);
}

uint64_t sub_1000B4A34(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000C7514();
  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_1000B4A5C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000C7514();
  return Error<>._code.getter(a1, v2);
}

uint64_t sub_1000B4AC8()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  char *v11;
  uint64_t v12;
  uint64_t v14;

  v1 = v0;
  v2 = type metadata accessor for URL(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = OBJC_IVAR____TtC15audioaccessoryd13DeviceManager____lazy_storage___deviceStore;
  v6 = *(_QWORD *)&v0[OBJC_IVAR____TtC15audioaccessoryd13DeviceManager____lazy_storage___deviceStore];
  if (v6)
  {
    v7 = *(_QWORD *)&v0[OBJC_IVAR____TtC15audioaccessoryd13DeviceManager____lazy_storage___deviceStore];
  }
  else
  {
    v8 = type metadata accessor for DeviceStore(0);
    sub_100110DD4((uint64_t)v4);
    v9 = *(void **)&v1[OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_managerQueue];
    swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
    v10 = v9;
    v11 = v1;
    v7 = sub_1001544C0((uint64_t)v1, (uint64_t)&off_1001E6B90, (uint64_t)v4, v10);

    v12 = *(_QWORD *)&v1[v5];
    *(_QWORD *)&v1[v5] = v7;
    swift_retain(v7);
    swift_release(v12);
    v6 = 0;
  }
  swift_retain(v6);
  return v7;
}

char *sub_1000B4C34()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  objc_class *v18;
  char *v19;
  uint64_t v20;
  void *v21;
  NSObject *v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  id v26;
  void *v27;
  id v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  void *v32;
  id v33;
  _QWORD v35[2];
  uint64_t v36;
  unsigned int v37;
  void (*v38)(char *);
  uint64_t v39;
  void **aBlock;
  uint64_t v41;
  void *v42;
  void *v43;
  void *v44;
  uint64_t v45;
  objc_super v46;

  v1 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v1);
  v3 = (char *)v35 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for DispatchQoS(0);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0, v5);
  v9 = *(_QWORD *)(v8 - 8);
  v39 = v8;
  __chkstk_darwin(v8);
  v11 = (char *)v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v0[OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_pushService] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_buddyStateWatcher] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_firstUnlockStateWatcher] = 0;
  v36 = OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_managerQueue;
  v35[1] = sub_1000AB31C(0, (unint64_t *)&qword_1002119F0, OS_dispatch_queue_ptr);
  v37 = enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:);
  v38 = *(void (**)(char *))(v9 + 104);
  v38(v11);
  v12 = v0;
  static DispatchQoS.unspecified.getter(v12);
  aBlock = (void **)_swiftEmptyArrayStorage;
  v13 = sub_1000A0940((unint64_t *)&unk_1002123A0, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v35[0] = v13;
  v14 = sub_1000A0980((uint64_t *)&unk_100211A00);
  v15 = sub_1000C7224((unint64_t *)&qword_1002123B0, (uint64_t *)&unk_100211A00);
  dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v14, v15, v1, v13);
  v16 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD00000000000002FLL, 0x80000001001AC8D0, v7, v3, v11, 0);
  *(_QWORD *)&v0[v36] = v16;
  *(_QWORD *)&v12[OBJC_IVAR____TtC15audioaccessoryd13DeviceManager____lazy_storage___deviceStore] = 0;
  swift_unknownObjectWeakInit(&v12[OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_deviceDelegate], 0);
  swift_unknownObjectWeakInit(&v12[OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_aaDeviceDelegate], 0);
  v17 = ((uint64_t (*)(char *, _QWORD, uint64_t))v38)(v11, v37, v39);
  static DispatchQoS.unspecified.getter(v17);
  aBlock = (void **)_swiftEmptyArrayStorage;
  dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v14, v15, v1, v35[0]);
  *(_QWORD *)&v12[OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_clientQueue] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD00000000000003DLL, 0x80000001001AC900, v7, v3, v11, 0);

  v18 = (objc_class *)type metadata accessor for DeviceManager();
  v46.receiver = v12;
  v46.super_class = v18;
  v19 = (char *)objc_msgSendSuper2(&v46, "init");
  v20 = static os_log_type_t.default.getter(v19);
  if (qword_1002101D8 != -1)
    swift_once(&qword_1002101D8, sub_100168748);
  os_log(_:dso:log:_:_:)(v20, &_mh_execute_header, qword_100218DE0, "DeviceManager init", 18, 2, _swiftEmptyArrayStorage);
  if (qword_100210158 != -1)
    swift_once(&qword_100210158, sub_1000C7858);
  v21 = (void *)static DarwinNotificationManager.shared;
  v22 = static OS_dispatch_queue.main.getter();
  v23 = swift_allocObject(&unk_1001E85C8, 24, 7);
  *(_QWORD *)(v23 + 16) = v21;
  v44 = sub_1000C7288;
  v45 = v23;
  aBlock = _NSConcreteStackBlock;
  v41 = 1107296256;
  v42 = sub_1000C7E54;
  v43 = &unk_1001E85E0;
  v24 = _Block_copy(&aBlock);
  v25 = v45;
  v26 = v21;
  swift_release(v25);
  xpc_set_event_stream_handler("com.apple.notifyd.matching", v22, v24);
  _Block_release(v24);

  v27 = (void *)objc_opt_self(BTSystemConfiguration);
  v28 = objc_msgSend(v27, "isBuddyComplete");
  LODWORD(v24) = (_DWORD)v28;
  v29 = static os_log_type_t.default.getter(v28);
  if ((_DWORD)v24)
  {
    os_log(_:dso:log:_:_:)(v29, &_mh_execute_header, qword_100218DE0, "DeviceManager buddy is done", 27, 2, _swiftEmptyArrayStorage);
    sub_1000B54C8();
    v30 = v19;
  }
  else
  {
    os_log(_:dso:log:_:_:)(v29, &_mh_execute_header, qword_100218DE0, "DeviceManager buddy is NOT done, wait...", 40, 2, _swiftEmptyArrayStorage);
    v31 = swift_allocObject(&unk_1001E6BD8, 24, 7);
    swift_unknownObjectWeakInit(v31 + 16, v19);
    v44 = sub_1000C7290;
    v45 = v31;
    aBlock = _NSConcreteStackBlock;
    v41 = 1107296256;
    v42 = sub_1000E6A24;
    v43 = &unk_1001E8608;
    v32 = _Block_copy(&aBlock);
    swift_release(v45);
    v33 = objc_msgSend(v27, "addBuddyCompleteObserver:", v32);

    _Block_release(v32);
    v30 = *(void **)&v19[OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_buddyStateWatcher];
    *(_QWORD *)&v19[OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_buddyStateWatcher] = v33;
  }

  return v19;
}

void sub_1000B5188(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;
  uint64_t v7;
  uint64_t Strong;
  void *v9;
  uint64_t v10;
  char *v11;
  void *v12;
  _DWORD v13[6];
  _BYTE v14[24];

  v1 = a1 + 16;
  v2 = static os_log_type_t.default.getter(a1);
  if (qword_1002101D8 != -1)
    swift_once(&qword_1002101D8, sub_100168748);
  v3 = qword_100218DE0;
  v4 = sub_1000A0980((uint64_t *)&unk_1002103C0);
  v5 = swift_allocObject(v4, 72, 7);
  *(_OWORD *)(v5 + 16) = xmmword_100184870;
  v6 = objc_msgSend((id)objc_opt_self(BTSystemConfiguration), "isBuddyComplete");
  *(_QWORD *)(v5 + 56) = &type metadata for Bool;
  *(_QWORD *)(v5 + 64) = &protocol witness table for Bool;
  *(_BYTE *)(v5 + 32) = v6;
  os_log(_:dso:log:_:_:)(v2, &_mh_execute_header, v3, "DeviceManager buddy done callback: %i", v13[0]);
  swift_bridgeObjectRelease(v5);
  swift_beginAccess(v1, v14, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v1, v7);
  if (Strong)
  {
    v9 = (void *)Strong;
    sub_1000B54C8();

  }
  swift_beginAccess(v1, v13, 0, 0);
  v11 = (char *)swift_unknownObjectWeakLoadStrong(v1, v10);
  if (v11)
  {
    v12 = *(void **)&v11[OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_buddyStateWatcher];
    *(_QWORD *)&v11[OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_buddyStateWatcher] = 0;

  }
}

id sub_1000B52F8(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  objc_super v4;

  v2 = static os_log_type_t.default.getter(a1);
  if (qword_1002101D8 != -1)
    swift_once(&qword_1002101D8, sub_100168748);
  os_log(_:dso:log:_:_:)(v2, &_mh_execute_header, qword_100218DE0, "DeviceManager deinit", 20, 2, _swiftEmptyArrayStorage);
  v4.receiver = v1;
  v4.super_class = (Class)type metadata accessor for DeviceManager();
  return objc_msgSendSuper2(&v4, "dealloc");
}

void sub_1000B54C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void *v9;
  id v10;
  void *v11;
  uint64_t v12;
  void *v13;
  const void *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  id v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  void **aBlock;
  uint64_t v31;
  uint64_t (*v32)(uint64_t);
  void *v33;
  void *v34;
  uint64_t v35;

  v1 = type metadata accessor for DispatchWorkItemFlags(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (void *)objc_opt_self(BTSystemConfiguration);
  v10 = objc_msgSend(v9, "isFirstUnlocked");
  if ((_DWORD)v10)
  {
    v28 = v2;
    v11 = *(void **)(v0 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_managerQueue);
    v12 = swift_allocObject(&unk_1001E6BD8, 24, 7);
    swift_unknownObjectWeakInit(v12 + 16, v0);
    v34 = sub_1000C7158;
    v35 = v12;
    aBlock = _NSConcreteStackBlock;
    v31 = 1107296256;
    v32 = sub_1000E6A24;
    v33 = &unk_1001E8180;
    v13 = _Block_copy(&aBlock);
    v27 = v5;
    v14 = v13;
    v15 = v11;
    v16 = swift_retain(v12);
    static DispatchQoS.unspecified.getter(v16);
    v29 = _swiftEmptyArrayStorage;
    v17 = sub_1000A0940((unint64_t *)&qword_100211920, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v18 = sub_1000A0980(&qword_100211D00);
    v19 = sub_1000C7224((unint64_t *)&qword_100211930, &qword_100211D00);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v29, v18, v19, v1, v17);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v8, v4, v14);
    _Block_release(v14);

    (*(void (**)(char *, uint64_t))(v28 + 8))(v4, v1);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v27);
    v20 = v35;
    swift_release(v12);
    swift_release(v20);
  }
  else
  {
    v21 = static os_log_type_t.default.getter(v10);
    if (qword_1002101D8 != -1)
      swift_once(&qword_1002101D8, sub_100168748);
    os_log(_:dso:log:_:_:)(v21, &_mh_execute_header, qword_100218DE0, "DeviceManager cannot start, device needs to be first unlocked after boot", 72, 2, _swiftEmptyArrayStorage);
    v22 = swift_allocObject(&unk_1001E6BD8, 24, 7);
    swift_unknownObjectWeakInit(v22 + 16, v0);
    v34 = sub_1000C7150;
    v35 = v22;
    aBlock = _NSConcreteStackBlock;
    v31 = 1107296256;
    v32 = sub_1000E6A24;
    v33 = &unk_1001E8158;
    v23 = _Block_copy(&aBlock);
    swift_release(v35);
    v24 = objc_msgSend(v9, "addFirstUnlockObserver:", v23);
    _Block_release(v23);
    v25 = *(void **)(v0 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_firstUnlockStateWatcher);
    *(_QWORD *)(v0 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_firstUnlockStateWatcher) = v24;

  }
}

void sub_1000B5808(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t Strong;
  void *v5;
  uint64_t v6;
  char *v7;
  void *v8;
  uint64_t v9;
  _BYTE v10[24];

  v1 = a1 + 16;
  v2 = static os_log_type_t.default.getter(a1);
  if (qword_1002101D8 != -1)
    swift_once(&qword_1002101D8, sub_100168748);
  os_log(_:dso:log:_:_:)(v2, &_mh_execute_header, qword_100218DE0, "Setting up DeviceManager after device first unlocked after boot", 63, 2, _swiftEmptyArrayStorage);
  swift_beginAccess(v1, v10, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v1, v3);
  if (Strong)
  {
    v5 = (void *)Strong;
    sub_1000B54C8();

  }
  swift_beginAccess(v1, &v9, 0, 0);
  v7 = (char *)swift_unknownObjectWeakLoadStrong(v1, v6);
  if (v7)
  {
    v8 = *(void **)&v7[OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_firstUnlockStateWatcher];
    *(_QWORD *)&v7[OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_firstUnlockStateWatcher] = 0;

  }
}

uint64_t sub_1000B58F0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t result;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v12[24];

  v2 = type metadata accessor for CloudCoordinatorConfiguration(0);
  __chkstk_darwin(v2);
  v4 = &v12[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  a1 += 16;
  swift_beginAccess(a1, v12, 0, 0);
  result = swift_unknownObjectWeakLoadStrong(a1, v5);
  if (result)
  {
    v7 = (void *)result;
    v8 = sub_1000B4AC8();
    v9 = static os_log_type_t.default.getter(v8);
    if (qword_1002101E0 != -1)
      swift_once(&qword_1002101E0, sub_1001687B0);
    os_log(_:dso:log:_:_:)(v9, &_mh_execute_header, qword_100218DE8, "Activate Cloud Coordinator", 26, 2, _swiftEmptyArrayStorage);
    sub_100129988((unint64_t)v4);
    sub_1000C5F84((uint64_t)v4);
    sub_1000AE58C((uint64_t)v4, type metadata accessor for CloudCoordinatorConfiguration);
    v10 = sub_10012A6A0();
    sub_1000E837C();

    swift_release(v8);
    return swift_unknownObjectRelease(v10);
  }
  return result;
}

uint64_t sub_1000B5A28()
{
  return sub_1000B863C((uint64_t)sub_1000C7148, (uint64_t)&unk_1001E8130);
}

uint64_t sub_1000B5A3C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE v9[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v9, 0, 0);
  result = swift_unknownObjectWeakLoadStrong(v1, v2);
  if (result)
  {
    v4 = (void *)result;
    v5 = static os_log_type_t.default.getter(result);
    if (qword_1002101D8 != -1)
      swift_once(&qword_1002101D8, sub_100168748);
    os_log(_:dso:log:_:_:)(v5, &_mh_execute_header, qword_100218DE0, "Device Manager deactivate", 25, 2, _swiftEmptyArrayStorage);
    v6 = sub_1000B4AC8();
    v7 = static os_log_type_t.default.getter(v6);
    if (qword_1002101E0 != -1)
      swift_once(&qword_1002101E0, sub_1001687B0);
    os_log(_:dso:log:_:_:)(v7, &_mh_execute_header, qword_100218DE8, "Deactivate Cloud Coordinator", 28, 2, _swiftEmptyArrayStorage);
    v8 = sub_10012A6A0();
    sub_100101568(v6);

    swift_release(v6);
    return swift_unknownObjectRelease(v8);
  }
  return result;
}

uint64_t sub_1000B5BB0()
{
  return sub_1000B863C((uint64_t)sub_1000C7140, (uint64_t)&unk_1001E8108);
}

uint64_t sub_1000B5BC4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  void *Strong;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  id v48;
  _BYTE v49[24];

  v2 = sub_1000A0980(&qword_100210CD8);
  __chkstk_darwin(v2);
  v4 = (char *)&v46 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for LegacyMagicPairingSettingsRecords(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for URL(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  a1 += 16;
  swift_beginAccess(a1, v49, 0, 0);
  Strong = (void *)swift_unknownObjectWeakLoadStrong(a1, v13);
  v15 = static os_log_type_t.default.getter(Strong);
  if (Strong)
  {
    v47 = v8;
    if (qword_1002101D8 != -1)
      swift_once(&qword_1002101D8, sub_100168748);
    os_log(_:dso:log:_:_:)(v15, &_mh_execute_header, qword_100218DE0, "CloudSync: Pinged cloud layer to send cached data", 49, 2, _swiftEmptyArrayStorage);
    v16 = sub_1000B4AC8();
    v48 = (id)objc_opt_self(BTSystemConfiguration);
    v17 = objc_msgSend(v48, "isFirstUnlocked");
    if ((_DWORD)v17)
    {
      v18 = sub_100129690();
      if (qword_100210120 != -1)
        swift_once(&qword_100210120, sub_10009C800);
      v19 = sub_1000A0A00(v9, (uint64_t)qword_100218BE0);
      (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v19, v9);
      v20 = sub_100127AAC((uint64_t)v12);
      swift_release(v18);
      (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    }
    else
    {
      v22 = static os_log_type_t.error.getter(v17);
      if (qword_1002101E0 != -1)
        swift_once(&qword_1002101E0, sub_1001687B0);
      v20 = _swiftEmptyArrayStorage;
      os_log(_:dso:log:_:_:)(v22, &_mh_execute_header, qword_100218DE8, "deviceRecords call failed because in device is in beforeFirstUnlock state", 73, 2, _swiftEmptyArrayStorage);
    }
    swift_release(v16);
    sub_100111180((uint64_t)v20);
    swift_bridgeObjectRelease(v20);
    v23 = sub_1000B4AC8();
    v24 = objc_msgSend(v48, "isFirstUnlocked");
    if ((_DWORD)v24)
    {
      v25 = sub_100129690();
      if (qword_100210180 != -1)
        swift_once(&qword_100210180, sub_1000DA4F0);
      v26 = sub_1000A0A00(v9, (uint64_t)qword_100218D28);
      (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v26, v9);
      v27 = sub_100127AD0((uint64_t)v12);
      swift_release(v25);
      (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    }
    else
    {
      v28 = static os_log_type_t.error.getter(v24);
      if (qword_1002101E0 != -1)
        swift_once(&qword_1002101E0, sub_1001687B0);
      v27 = _swiftEmptyArrayStorage;
      os_log(_:dso:log:_:_:)(v28, &_mh_execute_header, qword_100218DE8, "deviceSupportInformationRecords call failed because in device is in beforeFirstUnlock state", 91, 2, _swiftEmptyArrayStorage);
    }
    swift_release(v23);
    sub_10011119C((uint64_t)v27);
    swift_bridgeObjectRelease(v27);
    v29 = sub_1000B4AC8();
    sub_10012B40C((uint64_t)v4);
    swift_release(v29);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
    {
      v30 = sub_1000A1000((uint64_t)v4, &qword_100210CD8);
      v31 = (_QWORD *)&unk_100218000;
    }
    else
    {
      v32 = (uint64_t)v47;
      v33 = sub_1000C6CD0((uint64_t)v4, (uint64_t)v47, type metadata accessor for LegacyMagicPairingSettingsRecords);
      v34 = static os_log_type_t.default.getter(v33);
      v31 = &unk_100218000;
      os_log(_:dso:log:_:_:)(v34, &_mh_execute_header, qword_100218DE0, "CloudSync: Pinged cloud layer to send cached primaryDevice legacy data", 70, 2, _swiftEmptyArrayStorage);
      v35 = sub_1000A0980(&qword_100210D08);
      v36 = *(unsigned __int8 *)(v6 + 80);
      v37 = (v36 + 32) & ~v36;
      v38 = swift_allocObject(v35, v37 + *(_QWORD *)(v6 + 72), v36 | 7);
      *(_OWORD *)(v38 + 16) = xmmword_100184870;
      sub_1000AE548(v32, v38 + v37, type metadata accessor for LegacyMagicPairingSettingsRecords);
      sub_1001111B8(v38);
      swift_bridgeObjectRelease(v38);
      v30 = sub_1000AE58C(v32, type metadata accessor for LegacyMagicPairingSettingsRecords);
    }
    v39 = static os_log_type_t.default.getter(v30);
    os_log(_:dso:log:_:_:)(v39, &_mh_execute_header, v31[444], "CloudSync: Pinged cloud layer to send cached primaryDevice data", 63, 2, _swiftEmptyArrayStorage);
    v40 = sub_1000B4AC8();
    v41 = objc_msgSend(v48, "isFirstUnlocked");
    if ((_DWORD)v41)
    {
      v42 = sub_100129690();
      if (qword_100210160 != -1)
        swift_once(&qword_100210160, sub_1000C81B8);
      v43 = sub_1000A0A00(v9, (uint64_t)qword_100218C90);
      (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v43, v9);
      v44 = sub_100127AF4((uint64_t)v12);
      swift_release(v42);
      (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    }
    else
    {
      v45 = static os_log_type_t.error.getter(v41);
      if (qword_1002101E0 != -1)
        swift_once(&qword_1002101E0, sub_1001687B0);
      v44 = _swiftEmptyArrayStorage;
      os_log(_:dso:log:_:_:)(v45, &_mh_execute_header, qword_100218DE8, "magicPairingSettingsRecords call failed because in device is in beforeFirstUnlock state", 87, 2, _swiftEmptyArrayStorage);
    }
    swift_release(v40);
    sub_1001111D4((uint64_t)v44);

    return swift_bridgeObjectRelease(v44);
  }
  else
  {
    if (qword_1002101D8 != -1)
      swift_once(&qword_1002101D8, sub_100168748);
    return os_log(_:dso:log:_:_:)(v15, &_mh_execute_header, qword_100218DE0, "Ping unavailable", 16, 2, _swiftEmptyArrayStorage);
  }
}

uint64_t sub_1000B625C(uint64_t a1, uint64_t a2)
{
  return sub_1000C2FCC(a1, a2, (uint64_t)&unk_1001E8078, (uint64_t)sub_1000C70B0, (uint64_t)&unk_1001E8090);
}

uint64_t sub_1000B6278(uint64_t a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(uint64_t);
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t Strong;
  uint64_t (*v36)(uint64_t);
  void *v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  _QWORD *v43;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  char v64;
  char v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t (*v73)(void);
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _BYTE *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char v90;
  char v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  id v110;
  unint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  void *v115;
  void *v116;
  unint64_t v117;
  _QWORD *v118;
  void *v119;
  id v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  uint64_t v138;
  uint64_t (*v139)(void);
  uint64_t v140;
  char *v141;
  uint64_t v142;
  char *v143;
  char *v144;
  _QWORD *v145;
  uint64_t v146;
  char *v147;
  void *v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;
  uint64_t v152;
  __int128 v153;
  _QWORD *v154;
  _QWORD aBlock[5];
  _QWORD *v156;
  unint64_t v157;
  char v158[8];

  v6 = sub_1000A0980(&qword_100210CF8);
  __chkstk_darwin(v6);
  v137 = (char *)&v129 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchWorkItemFlags(0);
  v135 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v134 = (char *)&v129 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v133 = type metadata accessor for DispatchQoS(0);
  v132 = *(_QWORD *)(v133 - 8);
  __chkstk_darwin(v133);
  v131 = (char *)&v129 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v152 = type metadata accessor for BTDeferredRecord(0);
  v142 = *(_QWORD *)(v152 - 8);
  __chkstk_darwin(v152);
  v138 = (uint64_t)&v129 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v141 = (char *)&v129 - v13;
  __chkstk_darwin(v14);
  v143 = (char *)&v129 - v15;
  __chkstk_darwin(v16);
  v18 = (char *)&v129 - v17;
  __chkstk_darwin(v19);
  v21 = (char *)&v129 - v20;
  __chkstk_darwin(v22);
  v24 = (char *)&v129 - v23;
  v151 = type metadata accessor for DeviceRecord(0);
  v149 = *(_QWORD *)(v151 - 8);
  __chkstk_darwin(v151);
  v136 = (uint64_t)&v129 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  v28 = (char *)&v129 - v27;
  __chkstk_darwin(v29);
  *(_QWORD *)&v153 = (char *)&v129 - v30;
  v31 = (uint64_t (*)(uint64_t))type metadata accessor for URL(0);
  v150 = *((_QWORD *)v31 - 1);
  __chkstk_darwin(v31);
  v33 = (char *)&v129 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  a1 += 16;
  swift_beginAccess(a1, v158, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(a1, v34);
  v147 = (char *)Strong;
  if (!Strong)
    return a2();
  v139 = a2;
  v140 = a3;
  v130 = v8;
  v36 = (uint64_t (*)(uint64_t))static os_log_type_t.default.getter(Strong);
  if (qword_1002101D8 != -1)
    goto LABEL_69;
  while (1)
  {
    os_log(_:dso:log:_:_:)(v36, &_mh_execute_header, qword_100218DE0, "fetchDeviceList", 15, 2, _swiftEmptyArrayStorage);
    v157 = (unint64_t)_swiftEmptyArrayStorage;
    v37 = (void *)sub_1000B4AC8();
    v38 = objc_msgSend((id)objc_opt_self(BTSystemConfiguration), "isFirstUnlocked");
    v39 = (uint64_t)v143;
    if ((_DWORD)v38)
    {
      v148 = v37;
      v40 = sub_100129690();
      if (qword_100210120 != -1)
        swift_once(&qword_100210120, sub_10009C800);
      v41 = sub_1000A0A00((uint64_t)v31, (uint64_t)qword_100218BE0);
      v42 = v150;
      (*(void (**)(char *, uint64_t, uint64_t (*)(uint64_t)))(v150 + 16))(v33, v41, v31);
      v43 = sub_100127AAC((uint64_t)v33);
      swift_release(v40);
      (*(void (**)(char *, uint64_t (*)(uint64_t)))(v42 + 8))(v33, v31);
      v37 = v148;
    }
    else
    {
      v45 = static os_log_type_t.error.getter(v38);
      if (qword_1002101E0 != -1)
        swift_once(&qword_1002101E0, sub_1001687B0);
      v43 = _swiftEmptyArrayStorage;
      os_log(_:dso:log:_:_:)(v45, &_mh_execute_header, qword_100218DE8, "deviceRecords call failed because in device is in beforeFirstUnlock state", 73, 2, _swiftEmptyArrayStorage);
    }
    swift_release(v37);
    v146 = v43[2];
    if (!v146)
      break;
    v46 = 0;
    v144 = (char *)v43 + ((*(unsigned __int8 *)(v149 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v149 + 80));
    v31 = type metadata accessor for DeviceRecord;
    v36 = type metadata accessor for BTDeferredRecord;
    v145 = v43;
    while (v46 < v43[2])
    {
      v47 = *(_QWORD *)(v149 + 72);
      v150 = v46;
      sub_1000AE548((uint64_t)&v144[v47 * v46], v153, type metadata accessor for DeviceRecord);
      v48 = sub_1000B4AC8();
      v49 = sub_10012A994();
      swift_release(v48);
      v50 = *(_QWORD *)(v49 + 16);
      if (v50)
      {
        v51 = v142;
        v52 = (void *)v49;
        v33 = (char *)(v49
                     + ((*(unsigned __int8 *)(v142 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v142 + 80)));
        v148 = v52;
        swift_bridgeObjectRetain(v52);
        v53 = *(_QWORD *)(v51 + 72);
        while (1)
        {
          sub_1000AE548((uint64_t)v33, (uint64_t)v24, type metadata accessor for BTDeferredRecord);
          v54 = *((_QWORD *)v24 + 1);
          v55 = *((_QWORD *)v24 + 2);
          if (v54 == 0x6552656369766544 && v55 == 0xEC00000064726F63)
          {
            sub_1000AE548((uint64_t)v24, (uint64_t)v21, type metadata accessor for BTDeferredRecord);
            sub_1000AE548(v153, (uint64_t)v28, type metadata accessor for DeviceRecord);
          }
          else
          {
            v57 = _stringCompareWithSmolCheck(_:_:expecting:)(v54, v55, 0x6552656369766544, 0xEC00000064726F63, 0);
            sub_1000AE548((uint64_t)v24, (uint64_t)v21, type metadata accessor for BTDeferredRecord);
            sub_1000AE548(v153, (uint64_t)v28, type metadata accessor for DeviceRecord);
            if ((v57 & 1) == 0)
            {
              sub_1000AE58C((uint64_t)v21, type metadata accessor for BTDeferredRecord);
              sub_1000AE58C((uint64_t)v28, type metadata accessor for DeviceRecord);
              sub_1000AE548((uint64_t)v24, (uint64_t)v18, type metadata accessor for BTDeferredRecord);
              goto LABEL_20;
            }
          }
          v58 = &v21[*(int *)(v152 + 28)];
          v59 = *(_QWORD *)v58;
          v60 = *((_QWORD *)v58 + 1);
          v61 = &v28[*(int *)(v151 + 24)];
          v62 = *((_QWORD *)v61 + 1);
          if (v59 == *(_QWORD *)v61 && v60 == v62)
          {
            sub_1000AE58C((uint64_t)v21, type metadata accessor for BTDeferredRecord);
            sub_1000AE58C((uint64_t)v28, type metadata accessor for DeviceRecord);
            sub_1000AE548((uint64_t)v24, (uint64_t)v18, type metadata accessor for BTDeferredRecord);
LABEL_36:
            if (*v18 == 1)
            {
              swift_bridgeObjectRelease(0xE600000000000000);
              sub_1000AE58C((uint64_t)v18, type metadata accessor for BTDeferredRecord);
              sub_1000AE58C((uint64_t)v24, type metadata accessor for BTDeferredRecord);
LABEL_14:
              swift_bridgeObjectRelease_n(v148, 2);
              v39 = (uint64_t)v143;
              goto LABEL_15;
            }
            v65 = _stringCompareWithSmolCheck(_:_:expecting:)(0x657461647075, 0xE600000000000000, 0x6574656C6564, 0xE600000000000000, 0);
            swift_bridgeObjectRelease(0xE600000000000000);
            sub_1000AE58C((uint64_t)v18, type metadata accessor for BTDeferredRecord);
            sub_1000AE58C((uint64_t)v24, type metadata accessor for BTDeferredRecord);
            if ((v65 & 1) != 0)
              goto LABEL_14;
            goto LABEL_21;
          }
          v64 = _stringCompareWithSmolCheck(_:_:expecting:)(v59, v60, *(_QWORD *)v61, v62, 0);
          sub_1000AE58C((uint64_t)v21, type metadata accessor for BTDeferredRecord);
          sub_1000AE58C((uint64_t)v28, type metadata accessor for DeviceRecord);
          sub_1000AE548((uint64_t)v24, (uint64_t)v18, type metadata accessor for BTDeferredRecord);
          if ((v64 & 1) != 0)
            goto LABEL_36;
LABEL_20:
          sub_1000AE58C((uint64_t)v18, type metadata accessor for BTDeferredRecord);
          sub_1000AE58C((uint64_t)v24, type metadata accessor for BTDeferredRecord);
LABEL_21:
          v33 += v53;
          if (!--v50)
          {
            swift_bridgeObjectRelease_n(v148, 2);
            v39 = (uint64_t)v143;
            goto LABEL_41;
          }
        }
      }
      swift_bridgeObjectRelease(v49);
LABEL_41:
      v33 = (char *)sub_1000B7110();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v33);
      v67 = *(_QWORD *)((v157 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v66 = *(_QWORD *)((v157 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v67 >= v66 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v66 > 1, v67 + 1, 1);
      v68 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v67, v33);
      specialized Array._endMutation()(v68);
LABEL_15:
      v46 = v150 + 1;
      sub_1000AE58C(v153, type metadata accessor for DeviceRecord);
      v43 = v145;
      if (v46 == v146)
        goto LABEL_44;
    }
    __break(1u);
LABEL_69:
    swift_once(&qword_1002101D8, sub_100168748);
  }
LABEL_44:
  swift_bridgeObjectRelease(v43);
  v69 = sub_1000B4AC8();
  v70 = sub_10012A994();
  swift_release(v69);
  v71 = *(_QWORD *)(v70 + 16);
  v72 = v140;
  v73 = v139;
  if (v71)
  {
    v150 = 0;
    v74 = (*(unsigned __int8 *)(v142 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v142 + 80);
    v144 = (char *)v70;
    v75 = v70 + v74;
    v76 = *(_QWORD *)(v142 + 72);
    v153 = xmmword_100184870;
    v77 = v141;
    v146 = v76;
    while (1)
    {
      sub_1000AE548(v75, v39, type metadata accessor for BTDeferredRecord);
      v87 = *(_QWORD *)(v39 + 8);
      v88 = *(_QWORD *)(v39 + 16);
      if (v87 == 0x6552656369766544 && v88 == 0xEC00000064726F63)
      {
        sub_1000AE548(v39, (uint64_t)v77, type metadata accessor for BTDeferredRecord);
      }
      else
      {
        v90 = _stringCompareWithSmolCheck(_:_:expecting:)(v87, v88, 0x6552656369766544, 0xEC00000064726F63, 0);
        sub_1000AE548(v39, (uint64_t)v77, type metadata accessor for BTDeferredRecord);
        if ((v90 & 1) == 0)
        {
          sub_1000AE58C((uint64_t)v77, type metadata accessor for BTDeferredRecord);
          goto LABEL_48;
        }
      }
      if ((*v77 & 1) != 0)
      {
        v91 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6574656C6564, 0xE600000000000000, 0x657461647075, 0xE600000000000000, 0);
        swift_bridgeObjectRelease(0xE600000000000000);
        v78 = sub_1000AE58C((uint64_t)v77, type metadata accessor for BTDeferredRecord);
        if ((v91 & 1) == 0)
          goto LABEL_48;
      }
      else
      {
        swift_bridgeObjectRelease(0xE600000000000000);
        v78 = sub_1000AE58C((uint64_t)v77, type metadata accessor for BTDeferredRecord);
      }
      v92 = v39 + *(int *)(v152 + 36);
      v93 = *(_QWORD *)(v92 + 8);
      if (v93 >> 60 != 15)
      {
        v94 = *(_QWORD *)v92;
        sub_1000A0E74(*(_QWORD *)v92, *(_QWORD *)(v92 + 8));
        v148 = objc_autoreleasePoolPush();
        v95 = type metadata accessor for PropertyListDecoder(0);
        swift_allocObject(v95, *(unsigned int *)(v95 + 48), *(unsigned __int16 *)(v95 + 52));
        v96 = PropertyListDecoder.init()();
        v97 = sub_1000A0940(&qword_1002121D0, type metadata accessor for DeviceRecord, (uint64_t)&unk_10018537C);
        v98 = (uint64_t)v137;
        v99 = v150;
        v100 = v151;
        dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(v151, v94, v93, v151, v97);
        if (!v99)
        {
          v145 = (_QWORD *)v94;
          v150 = 0;
          swift_release(v96);
          objc_autoreleasePoolPop(v148);
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v149 + 56))(v98, 0, 1, v100);
          v101 = v136;
          v102 = sub_1000C6CD0(v98, v136, type metadata accessor for DeviceRecord);
          v103 = static os_log_type_t.default.getter(v102);
          v104 = qword_100218DE0;
          v105 = sub_1000A0980((uint64_t *)&unk_1002103C0);
          v106 = swift_allocObject(v105, 72, 7);
          *(_OWORD *)(v106 + 16) = v153;
          v107 = sub_10009C9A8();
          v109 = v108;
          *(_QWORD *)(v106 + 56) = &type metadata for String;
          *(_QWORD *)(v106 + 64) = sub_1000A0DF4();
          *(_QWORD *)(v106 + 32) = v107;
          *(_QWORD *)(v106 + 40) = v109;
          os_log(_:dso:log:_:_:)(v103, &_mh_execute_header, v104, "Construct deferred BTCloudDevice - %@", 37, 2, v106);
          swift_bridgeObjectRelease(v106);
          v110 = sub_1000B7110();
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v110);
          v112 = *(_QWORD *)((v157 & 0xFFFFFFFFFFFFFF8) + 0x10);
          v111 = *(_QWORD *)((v157 & 0xFFFFFFFFFFFFFF8) + 0x18);
          if (v112 >= v111 >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v111 > 1, v112 + 1, 1);
          v113 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v112, v110);
          specialized Array._endMutation()(v113);
          sub_1000B2D78((uint64_t)v145, v93);
          sub_1000AE58C(v101, type metadata accessor for DeviceRecord);
          v72 = v140;
          v73 = v139;
          v77 = v141;
          v39 = (uint64_t)v143;
          v76 = v146;
          goto LABEL_48;
        }
        swift_release(v96);
        objc_autoreleasePoolPop(v148);
        swift_errorRelease(v99);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v149 + 56))(v98, 1, 1, v100);
        sub_1000B2D78(v94, v93);
        v78 = sub_1000A1000(v98, &qword_100210CF8);
        v150 = 0;
        v76 = v146;
      }
      v79 = static os_log_type_t.default.getter(v78);
      v80 = qword_100218DE0;
      v81 = sub_1000A0980((uint64_t *)&unk_1002103C0);
      v82 = swift_allocObject(v81, 72, 7);
      *(_OWORD *)(v82 + 16) = v153;
      v83 = v138;
      sub_1000AE548(v39, v138, type metadata accessor for BTDeferredRecord);
      v84 = String.init<A>(describing:)(v83, v152);
      v86 = v85;
      *(_QWORD *)(v82 + 56) = &type metadata for String;
      *(_QWORD *)(v82 + 64) = sub_1000A0DF4();
      *(_QWORD *)(v82 + 32) = v84;
      *(_QWORD *)(v82 + 40) = v86;
      os_log(_:dso:log:_:_:)(v79, &_mh_execute_header, v80, "Unable to contruct deferred BTCloudDevice - %@", 46, 2, v82);
      swift_bridgeObjectRelease(v82);
      v72 = v140;
      v73 = v139;
      v77 = v141;
LABEL_48:
      sub_1000AE58C(v39, type metadata accessor for BTDeferredRecord);
      v75 += v76;
      if (!--v71)
      {
        v114 = (uint64_t)v144;
        goto LABEL_67;
      }
    }
  }
  v114 = v70;
LABEL_67:
  swift_bridgeObjectRelease(v114);
  v115 = v147;
  v116 = *(void **)&v147[OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_clientQueue];
  v117 = v157;
  v118 = (_QWORD *)swift_allocObject(&unk_1001E80C8, 40, 7);
  v118[2] = v117;
  v118[3] = v73;
  v118[4] = v72;
  aBlock[4] = sub_1000C7108;
  v156 = v118;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000E6A24;
  aBlock[3] = &unk_1001E80E0;
  v119 = _Block_copy(aBlock);
  v120 = v116;
  v121 = swift_retain(v72);
  v122 = v131;
  static DispatchQoS.unspecified.getter(v121);
  v154 = _swiftEmptyArrayStorage;
  v123 = sub_1000A0940((unint64_t *)&qword_100211920, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v124 = sub_1000A0980(&qword_100211D00);
  v125 = sub_1000C7224((unint64_t *)&qword_100211930, &qword_100211D00);
  v126 = v134;
  v127 = v124;
  v128 = v130;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v154, v127, v125, v130, v123);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v122, v126, v119);
  _Block_release(v119);

  (*(void (**)(char *, uint64_t))(v135 + 8))(v126, v128);
  (*(void (**)(char *, uint64_t))(v132 + 8))(v122, v133);
  return swift_release(v156);
}

id sub_1000B7110()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  NSString v3;
  id v4;
  NSString v5;
  NSString v6;
  NSString v7;
  NSString v8;
  NSString v9;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for DeviceRecord(0) + 24) + 8);
  v2 = objc_allocWithZone((Class)BTCloudDevice);
  swift_bridgeObjectRetain(v1);
  v3 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v1);
  v4 = objc_msgSend(v2, "initWithBluetoothAddress:", v3);

  v5 = String._bridgeToObjectiveC()();
  objc_msgSend(v4, "setNickname:", v5);

  v6 = String._bridgeToObjectiveC()();
  objc_msgSend(v4, "setModelNumber:", v6);

  v7 = String._bridgeToObjectiveC()();
  objc_msgSend(v4, "setManufacturer:", v7);

  v8 = String._bridgeToObjectiveC()();
  objc_msgSend(v4, "setProductID:", v8);

  v9 = String._bridgeToObjectiveC()();
  objc_msgSend(v4, "setVendorID:", v9);

  return v4;
}

uint64_t sub_1000B7298(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000BF218(a1, a2, a3, a4, (uint64_t)&unk_1001E7F88, (uint64_t)sub_1000C6EFC, (uint64_t)&unk_1001E7FA0);
}

uint64_t sub_1000B72B4(uint64_t a1, uint64_t (*a2)(void), uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t Strong;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  BOOL v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t (*v50)(void);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  void *v56;
  void *v57;
  uint64_t v58;
  void *v59;
  id v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  void *v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  void *v84;
  id v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  __int128 v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t (*v97)(void);
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  _QWORD *v113;
  void **aBlock;
  uint64_t v115;
  uint64_t (*v116)(uint64_t);
  void *v117;
  void *v118;
  uint64_t v119;
  char v120[32];

  v10 = type metadata accessor for DispatchWorkItemFlags(0);
  v108 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v107 = (char *)&v94 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v109 = type metadata accessor for DispatchQoS(0);
  v106 = *(_QWORD *)(v109 - 8);
  __chkstk_darwin(v109);
  v105 = (char *)&v94 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v100 = type metadata accessor for URL(0);
  v99 = *(_QWORD *)(v100 - 8);
  __chkstk_darwin(v100);
  v14 = (char *)&v94 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_1000A0980(&qword_100210CF8);
  __chkstk_darwin(v15);
  v104 = (uint64_t)&v94 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for DeviceRecord(0);
  v111 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v102 = (uint64_t)&v94 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v21 = (char *)&v94 - v20;
  v101 = v22;
  __chkstk_darwin(v23);
  v103 = (uint64_t)&v94 - v24;
  swift_beginAccess(a1 + 16, v120, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(a1 + 16, v25);
  v112 = (char *)Strong;
  if (!Strong)
    return a2();
  v97 = a2;
  v110 = a3;
  v98 = v10;
  v27 = static os_log_type_t.default.getter(Strong);
  if (qword_1002101D8 != -1)
    swift_once(&qword_1002101D8, sub_100168748);
  v28 = qword_100218DE0;
  v95 = sub_1000A0980((uint64_t *)&unk_1002103C0);
  v29 = swift_allocObject(v95, 72, 7);
  v94 = xmmword_100184870;
  *(_OWORD *)(v29 + 16) = xmmword_100184870;
  *(_QWORD *)(v29 + 56) = &type metadata for String;
  v96 = sub_1000A0DF4();
  *(_QWORD *)(v29 + 64) = v96;
  *(_QWORD *)(v29 + 32) = a4;
  *(_QWORD *)(v29 + 40) = a5;
  swift_bridgeObjectRetain(a5);
  os_log(_:dso:log:_:_:)(v27, &_mh_execute_header, v28, "fetchDevice: %@", 15, 2, v29);
  swift_bridgeObjectRelease(v29);
  v30 = sub_1000B4AC8();
  v31 = objc_msgSend((id)objc_opt_self(BTSystemConfiguration), "isFirstUnlocked");
  if ((_DWORD)v31)
  {
    v32 = sub_100129690();
    if (qword_100210120 != -1)
      swift_once(&qword_100210120, sub_10009C800);
    v33 = v100;
    v34 = sub_1000A0A00(v100, (uint64_t)qword_100218BE0);
    v35 = v99;
    (*(void (**)(char *, uint64_t, uint64_t))(v99 + 16))(v14, v34, v33);
    v36 = sub_100127AAC((uint64_t)v14);
    swift_release(v32);
    (*(void (**)(char *, uint64_t))(v35 + 8))(v14, v33);
  }
  else
  {
    v38 = static os_log_type_t.error.getter(v31);
    if (qword_1002101E0 != -1)
      swift_once(&qword_1002101E0, sub_1001687B0);
    v36 = _swiftEmptyArrayStorage;
    os_log(_:dso:log:_:_:)(v38, &_mh_execute_header, qword_100218DE8, "deviceRecords call failed because in device is in beforeFirstUnlock state", 73, 2, _swiftEmptyArrayStorage);
  }
  v39 = v110;
  swift_release(v30);
  v40 = v36[2];
  if (v40)
  {
    v41 = (uint64_t)v36 + ((*(unsigned __int8 *)(v111 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v111 + 80));
    v42 = *(_QWORD *)(v111 + 72);
    swift_bridgeObjectRetain(v36);
    while (1)
    {
      sub_1000AE548(v41, (uint64_t)v21, type metadata accessor for DeviceRecord);
      v43 = &v21[*(int *)(v17 + 24)];
      v44 = *((_QWORD *)v43 + 1);
      v45 = *(_QWORD *)v43 == a4 && v44 == a5;
      if (v45 || (_stringCompareWithSmolCheck(_:_:expecting:)(*(_QWORD *)v43, v44, a4, a5, 0) & 1) != 0)
        break;
      sub_1000AE58C((uint64_t)v21, type metadata accessor for DeviceRecord);
      v41 += v42;
      if (!--v40)
      {
        swift_bridgeObjectRelease(v36);
        v46 = 1;
        v39 = v110;
        goto LABEL_23;
      }
    }
    swift_bridgeObjectRelease(v36);
    v47 = v104;
    sub_1000C6CD0((uint64_t)v21, v104, type metadata accessor for DeviceRecord);
    v46 = 0;
    v39 = v110;
  }
  else
  {
    v46 = 1;
LABEL_23:
    v47 = v104;
  }
  v48 = v111;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v111 + 56))(v47, v46, 1, v17);
  swift_bridgeObjectRelease(v36);
  v49 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v48 + 48))(v47, 1, v17);
  v50 = v97;
  if (v49 == 1)
  {
    v51 = sub_1000A1000(v47, &qword_100210CF8);
    v52 = static os_log_type_t.debug.getter(v51);
    v53 = qword_100218DE0;
    v54 = swift_allocObject(v95, 72, 7);
    *(_OWORD *)(v54 + 16) = v94;
    v55 = v96;
    *(_QWORD *)(v54 + 56) = &type metadata for String;
    *(_QWORD *)(v54 + 64) = v55;
    *(_QWORD *)(v54 + 32) = a4;
    *(_QWORD *)(v54 + 40) = a5;
    swift_bridgeObjectRetain(a5);
    os_log(_:dso:log:_:_:)(v52, &_mh_execute_header, v53, "Device not found - %@", 21, 2, v54);
    swift_bridgeObjectRelease(v54);
    v56 = v112;
    v57 = *(void **)&v112[OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_clientQueue];
    v58 = swift_allocObject(&unk_1001E7FD8, 32, 7);
    *(_QWORD *)(v58 + 16) = v50;
    *(_QWORD *)(v58 + 24) = v39;
    v118 = sub_1000C6F08;
    v119 = v58;
    aBlock = _NSConcreteStackBlock;
    v115 = 1107296256;
    v116 = sub_1000E6A24;
    v117 = &unk_1001E7FF0;
    v59 = _Block_copy(&aBlock);
    swift_retain(v39);
    v60 = v57;
    v61 = v105;
    static DispatchQoS.unspecified.getter(v60);
    v113 = _swiftEmptyArrayStorage;
    v62 = sub_1000A0940((unint64_t *)&qword_100211920, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v63 = sub_1000A0980(&qword_100211D00);
    v64 = sub_1000C7224((unint64_t *)&qword_100211930, &qword_100211D00);
    v65 = v107;
    v66 = v63;
    v67 = v98;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v113, v66, v64, v98, v62);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v61, v65, v59);

    _Block_release(v59);
    (*(void (**)(char *, uint64_t))(v108 + 8))(v65, v67);
    (*(void (**)(char *, uint64_t))(v106 + 8))(v61, v109);
  }
  else
  {
    v68 = v47;
    v69 = v103;
    v70 = sub_1000C6CD0(v68, v103, type metadata accessor for DeviceRecord);
    v71 = v48;
    v72 = static os_log_type_t.default.getter(v70);
    v73 = qword_100218DE0;
    v74 = swift_allocObject(v95, 72, 7);
    *(_OWORD *)(v74 + 16) = v94;
    v75 = sub_10009C9A8();
    v76 = v96;
    *(_QWORD *)(v74 + 56) = &type metadata for String;
    *(_QWORD *)(v74 + 64) = v76;
    *(_QWORD *)(v74 + 32) = v75;
    *(_QWORD *)(v74 + 40) = v77;
    os_log(_:dso:log:_:_:)(v72, &_mh_execute_header, v73, "Found device: %@", 16, 2, v74);
    swift_bridgeObjectRelease(v74);
    v78 = v112;
    v79 = *(void **)&v112[OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_clientQueue];
    v80 = v102;
    sub_1000AE548(v69, v102, type metadata accessor for DeviceRecord);
    v81 = *(unsigned __int8 *)(v71 + 80);
    v82 = (v81 + 32) & ~v81;
    v83 = swift_allocObject(&unk_1001E8028, v82 + v101, v81 | 7);
    *(_QWORD *)(v83 + 16) = v50;
    *(_QWORD *)(v83 + 24) = v39;
    sub_1000C6CD0(v80, v83 + v82, type metadata accessor for DeviceRecord);
    v118 = sub_1000C7044;
    v119 = v83;
    aBlock = _NSConcreteStackBlock;
    v115 = 1107296256;
    v116 = sub_1000E6A24;
    v117 = &unk_1001E8040;
    v84 = _Block_copy(&aBlock);
    v85 = v79;
    v86 = swift_retain(v39);
    v87 = v105;
    static DispatchQoS.unspecified.getter(v86);
    v113 = _swiftEmptyArrayStorage;
    v88 = sub_1000A0940((unint64_t *)&qword_100211920, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v89 = sub_1000A0980(&qword_100211D00);
    v90 = sub_1000C7224((unint64_t *)&qword_100211930, &qword_100211D00);
    v91 = v107;
    v92 = v89;
    v93 = v98;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v113, v92, v90, v98, v88);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v87, v91, v84);
    _Block_release(v84);

    (*(void (**)(char *, uint64_t))(v108 + 8))(v91, v93);
    (*(void (**)(char *, uint64_t))(v106 + 8))(v87, v109);
    sub_1000AE58C(v69, type metadata accessor for DeviceRecord);
  }
  return swift_release(v119);
}

uint64_t sub_1000B7C2C(uint64_t a1, uint64_t a2)
{
  char *v2;
  void *v5;
  _QWORD *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  NSObject *v10;
  char *v11;
  char isEscapingClosureAtFileLocation;
  uint64_t result;
  uint64_t v14;
  _QWORD aBlock[5];
  uint64_t v16;
  uint64_t v17;

  v17 = 0;
  v5 = *(void **)&v2[OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_managerQueue];
  v6 = (_QWORD *)swift_allocObject(&unk_1001E7F10, 48, 7);
  v6[2] = a1;
  v6[3] = a2;
  v6[4] = v2;
  v6[5] = &v17;
  v7 = swift_allocObject(&unk_1001E7F38, 32, 7);
  *(_QWORD *)(v7 + 16) = sub_1000C6EDC;
  *(_QWORD *)(v7 + 24) = v6;
  aBlock[4] = sub_1000C7560;
  v16 = v7;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000E6A70;
  aBlock[3] = &unk_1001E7F50;
  v8 = _Block_copy(aBlock);
  v9 = v16;
  v10 = v5;
  swift_bridgeObjectRetain(a2);
  v11 = v2;
  swift_retain(v7);
  swift_release(v9);
  dispatch_sync(v10, v8);

  _Block_release(v8);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v7, "", 114, 334, 22, 1);
  result = swift_release(v7);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    v14 = v17;
    swift_release(v6);
    return v14;
  }
  return result;
}

void sub_1000B7D8C(uint64_t a1, uint64_t a2, uint64_t a3, void **a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  id v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void **v54;
  uint64_t v55;
  uint64_t v56;
  __int128 v57;
  uint64_t v58;
  unint64_t v59;

  v54 = a4;
  v56 = a3;
  v6 = type metadata accessor for URL(0);
  v52 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v51 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1000A0980(&qword_100210CF8);
  __chkstk_darwin(v9);
  v55 = (uint64_t)&v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DeviceRecord(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v51 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v53 = (uint64_t)&v51 - v16;
  v18 = static os_log_type_t.default.getter(v17);
  if (qword_1002101D8 != -1)
    swift_once(&qword_1002101D8, sub_100168748);
  v19 = qword_100218DE0;
  v58 = sub_1000A0980((uint64_t *)&unk_1002103C0);
  v20 = swift_allocObject(v58, 72, 7);
  v57 = xmmword_100184870;
  *(_OWORD *)(v20 + 16) = xmmword_100184870;
  *(_QWORD *)(v20 + 56) = &type metadata for String;
  v59 = sub_1000A0DF4();
  *(_QWORD *)(v20 + 64) = v59;
  *(_QWORD *)(v20 + 32) = a1;
  *(_QWORD *)(v20 + 40) = a2;
  swift_bridgeObjectRetain(a2);
  os_log(_:dso:log:_:_:)(v18, &_mh_execute_header, v19, "fetchDeviceSync: %@", 19, 2, v20);
  swift_bridgeObjectRelease(v20);
  v21 = sub_1000B4AC8();
  v22 = objc_msgSend((id)objc_opt_self(BTSystemConfiguration), "isFirstUnlocked");
  if ((_DWORD)v22)
  {
    v56 = v12;
    v23 = sub_100129690();
    if (qword_100210120 != -1)
      swift_once(&qword_100210120, sub_10009C800);
    v24 = sub_1000A0A00(v6, (uint64_t)qword_100218BE0);
    v25 = v52;
    (*(void (**)(char *, uint64_t, uint64_t))(v52 + 16))(v8, v24, v6);
    v26 = sub_100127AAC((uint64_t)v8);
    swift_release(v23);
    (*(void (**)(char *, uint64_t))(v25 + 8))(v8, v6);
    swift_release(v21);
    v12 = v56;
    v27 = v26[2];
    if (!v27)
    {
LABEL_19:
      v34 = 1;
      v35 = v55;
      goto LABEL_21;
    }
  }
  else
  {
    v28 = static os_log_type_t.error.getter(v22);
    if (qword_1002101E0 != -1)
      swift_once(&qword_1002101E0, sub_1001687B0);
    v26 = _swiftEmptyArrayStorage;
    os_log(_:dso:log:_:_:)(v28, &_mh_execute_header, qword_100218DE8, "deviceRecords call failed because in device is in beforeFirstUnlock state", 73, 2, _swiftEmptyArrayStorage);
    swift_release(v21);
    v27 = _swiftEmptyArrayStorage[2];
    if (!v27)
      goto LABEL_19;
  }
  v29 = (uint64_t)v26 + ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
  v30 = *(_QWORD *)(v12 + 72);
  swift_bridgeObjectRetain(v26);
  while (1)
  {
    sub_1000AE548(v29, (uint64_t)v14, type metadata accessor for DeviceRecord);
    v31 = &v14[*(int *)(v11 + 24)];
    v32 = *((_QWORD *)v31 + 1);
    v33 = *(_QWORD *)v31 == a1 && v32 == a2;
    if (v33 || (_stringCompareWithSmolCheck(_:_:expecting:)(*(_QWORD *)v31, v32, a1, a2, 0) & 1) != 0)
      break;
    sub_1000AE58C((uint64_t)v14, type metadata accessor for DeviceRecord);
    v29 += v30;
    if (!--v27)
    {
      swift_bridgeObjectRelease(v26);
      goto LABEL_19;
    }
  }
  swift_bridgeObjectRelease(v26);
  v35 = v55;
  sub_1000C6CD0((uint64_t)v14, v55, type metadata accessor for DeviceRecord);
  v34 = 0;
LABEL_21:
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 56))(v35, v34, 1, v11);
  swift_bridgeObjectRelease(v26);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v35, 1, v11) == 1)
  {
    v36 = sub_1000A1000(v35, &qword_100210CF8);
    v37 = static os_log_type_t.debug.getter(v36);
    v38 = qword_100218DE0;
    v39 = swift_allocObject(v58, 72, 7);
    *(_OWORD *)(v39 + 16) = v57;
    v40 = v59;
    *(_QWORD *)(v39 + 56) = &type metadata for String;
    *(_QWORD *)(v39 + 64) = v40;
    *(_QWORD *)(v39 + 32) = a1;
    *(_QWORD *)(v39 + 40) = a2;
    swift_bridgeObjectRetain(a2);
    os_log(_:dso:log:_:_:)(v37, &_mh_execute_header, v38, "Device not found - %@", 21, 2, v39);
    swift_bridgeObjectRelease(v39);
  }
  else
  {
    v41 = v53;
    v42 = sub_1000C6CD0(v35, v53, type metadata accessor for DeviceRecord);
    v43 = static os_log_type_t.default.getter(v42);
    v44 = qword_100218DE0;
    v45 = swift_allocObject(v58, 72, 7);
    *(_OWORD *)(v45 + 16) = v57;
    v46 = sub_10009C9A8();
    v47 = v59;
    *(_QWORD *)(v45 + 56) = &type metadata for String;
    *(_QWORD *)(v45 + 64) = v47;
    *(_QWORD *)(v45 + 32) = v46;
    *(_QWORD *)(v45 + 40) = v48;
    os_log(_:dso:log:_:_:)(v43, &_mh_execute_header, v44, "Found device: %@", 16, 2, v45);
    swift_bridgeObjectRelease(v45);
    v49 = sub_1000B7110();
    sub_1000AE58C(v41, type metadata accessor for DeviceRecord);
    v50 = *v54;
    *v54 = v49;

  }
}

uint64_t sub_1000B832C(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD aBlock[5];
  uint64_t v24;

  v3 = type metadata accessor for DispatchWorkItemFlags(0);
  v21 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for DispatchQoS(0);
  v6 = *(_QWORD *)(v20 - 8);
  __chkstk_darwin(v20);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(void **)(v1 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_managerQueue);
  v10 = swift_allocObject(&unk_1001E6BD8, 24, 7);
  swift_unknownObjectWeakInit(v10 + 16, v1);
  v11 = swift_allocObject(&unk_1001E7EC0, 32, 7);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = a1;
  aBlock[4] = sub_1000C6E88;
  v24 = v11;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000E6A24;
  aBlock[3] = &unk_1001E7ED8;
  v12 = _Block_copy(aBlock);
  v13 = v9;
  swift_retain(v10);
  static DispatchQoS.unspecified.getter(a1);
  v22 = _swiftEmptyArrayStorage;
  v14 = sub_1000A0940((unint64_t *)&qword_100211920, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v15 = sub_1000A0980(&qword_100211D00);
  v16 = sub_1000C7224((unint64_t *)&qword_100211930, &qword_100211D00);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v22, v15, v16, v3, v14);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v8, v5, v12);
  _Block_release(v12);

  (*(void (**)(char *, uint64_t))(v21 + 8))(v5, v3);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v20);
  v17 = v24;
  swift_release(v10);
  return swift_release(v17);
}

uint64_t sub_1000B8560(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  void *v6;
  uint64_t v7;
  _BYTE v8[24];

  v3 = a1 + 16;
  swift_beginAccess(a1 + 16, v8, 0, 0);
  result = swift_unknownObjectWeakLoadStrong(v3, v4);
  if (result)
  {
    v6 = (void *)result;
    v7 = sub_1000B4AC8();
    sub_100138580(a2);

    return swift_release(v7);
  }
  return result;
}

uint64_t sub_1000B8628()
{
  return sub_1000B863C((uint64_t)sub_1000C6E54, (uint64_t)&unk_1001E7E88);
}

uint64_t sub_1000B863C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD aBlock[5];
  uint64_t v26;

  v5 = type metadata accessor for DispatchWorkItemFlags(0);
  v23 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for DispatchQoS(0);
  v8 = *(_QWORD *)(v22 - 8);
  __chkstk_darwin(v22);
  v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(void **)(v2 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_managerQueue);
  v12 = swift_allocObject(&unk_1001E6BD8, 24, 7);
  swift_unknownObjectWeakInit(v12 + 16, v2);
  aBlock[4] = a1;
  v26 = v12;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000E6A24;
  aBlock[3] = a2;
  v13 = _Block_copy(aBlock);
  v14 = v11;
  v15 = swift_retain(v12);
  static DispatchQoS.unspecified.getter(v15);
  v24 = _swiftEmptyArrayStorage;
  v16 = sub_1000A0940((unint64_t *)&qword_100211920, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v17 = sub_1000A0980(&qword_100211D00);
  v18 = sub_1000C7224((unint64_t *)&qword_100211930, &qword_100211D00);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v24, v17, v18, v5, v16);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v10, v7, v13);
  _Block_release(v13);

  (*(void (**)(char *, uint64_t))(v23 + 8))(v7, v5);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v22);
  v19 = v26;
  swift_release(v12);
  return swift_release(v19);
}

uint64_t sub_1000B8848(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  void *v4;
  uint64_t v5;
  _BYTE v6[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v6, 0, 0);
  result = swift_unknownObjectWeakLoadStrong(v1, v2);
  if (result)
  {
    v4 = (void *)result;
    v5 = sub_1000B4AC8();
    sub_1001388B8();

    return swift_release(v5);
  }
  return result;
}

uint64_t sub_1000B88E0(uint64_t a1, uint64_t a2)
{
  return sub_1000C2FCC(a1, a2, (uint64_t)&unk_1001E7E48, (uint64_t)sub_1000C6E48, (uint64_t)&unk_1001E7E60);
}

void sub_1000B88FC(uint64_t a1, void (*a2)(uint64_t, unint64_t))
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t Strong;
  void *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  _BYTE v19[24];

  v4 = sub_1000A0980((uint64_t *)&unk_1002122E0);
  __chkstk_darwin(v4);
  v6 = &v19[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v7 = type metadata accessor for LegacyAccountMagicKeysRecord(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = &v19[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  a1 += 16;
  swift_beginAccess(a1, v19, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(a1, v11);
  if (Strong)
  {
    v13 = (void *)Strong;
    v14 = sub_1000B4AC8();
    sub_100129768((uint64_t)v6);
    swift_release(v14);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
    {
      sub_1000A1000((uint64_t)v6, (uint64_t *)&unk_1002122E0);
      a2(0, 0xF000000000000000);

    }
    else
    {
      sub_1000C6CD0((uint64_t)v6, (uint64_t)v10, type metadata accessor for LegacyAccountMagicKeysRecord);
      v15 = (uint64_t *)&v10[*(int *)(v7 + 20)];
      v16 = *v15;
      v17 = v15[1];
      sub_1000A0E74(*v15, v17);
      a2(v16, v17);

      sub_1000A103C(v16, v17);
      sub_1000AE58C((uint64_t)v10, type metadata accessor for LegacyAccountMagicKeysRecord);
    }
  }
  else
  {
    a2(0, 0xF000000000000000);
  }
}

uint64_t sub_1000B8AC0(void *a1, int a2, void *aBlock, uint64_t a4, uint64_t a5, void (*a6)(uint64_t, uint64_t))
{
  void *v10;
  uint64_t v11;
  id v12;

  v10 = _Block_copy(aBlock);
  v11 = swift_allocObject(a4, 24, 7);
  *(_QWORD *)(v11 + 16) = v10;
  v12 = a1;
  a6(a5, v11);

  return swift_release(v11);
}

void sub_1000B8B3C(uint64_t a1, unint64_t a2, uint64_t a3)
{
  Class isa;
  Class v5;

  if (a2 >> 60 == 15)
    isa = 0;
  else
    isa = Data._bridgeToObjectiveC()().super.isa;
  v5 = isa;
  (*(void (**)(uint64_t))(a3 + 16))(a3);

}

uint64_t sub_1000B8B90(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_1000C04C4(a1, a2, a3, (uint64_t)&unk_1001E7D58, (uint64_t)sub_1000C6D7C, (uint64_t)&unk_1001E7D70);
}

uint64_t sub_1000B8BAC(uint64_t a1, void (*a2)(void), uint64_t a3, void *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t Strong;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  id v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  char *v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  _BYTE *v43;
  char v45;
  void *v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  id v51;
  id v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  void (*v66)(void);
  uint64_t v67;
  unsigned int v68;
  char *v69;
  _QWORD *v70;
  _QWORD aBlock[5];
  _QWORD *v72;
  char v73[32];

  v8 = type metadata accessor for DispatchWorkItemFlags(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v61 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DispatchQoS(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v61 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  a1 += 16;
  swift_beginAccess(a1, v73, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(a1, v16);
  if (!Strong)
  {
    v41 = sub_1000A4CC0();
    v42 = swift_allocError(&type metadata for DeviceManager.DeviceManagerError, v41, 0, 0);
    *v43 = 0;
    a2();
    return swift_errorRelease(v42);
  }
  v66 = a2;
  v67 = a3;
  v69 = (char *)Strong;
  v61 = v13;
  v62 = v12;
  v63 = v11;
  v64 = v9;
  v65 = v8;
  v68 = static os_log_type_t.default.getter(Strong);
  if (qword_1002101D8 != -1)
    swift_once(&qword_1002101D8, sub_100168748);
  v18 = qword_100218DE0;
  v19 = sub_1000A0980((uint64_t *)&unk_1002103C0);
  v20 = swift_allocObject(v19, 112, 7);
  *(_OWORD *)(v20 + 16) = xmmword_1001858F0;
  v21 = objc_msgSend(a4, "bluetoothAddress");
  v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
  v24 = v23;

  *(_QWORD *)(v20 + 56) = &type metadata for String;
  v25 = sub_1000A0DF4();
  *(_QWORD *)(v20 + 64) = v25;
  *(_QWORD *)(v20 + 32) = v22;
  *(_QWORD *)(v20 + 40) = v24;
  v26 = a4;
  v27 = objc_msgSend(v26, "description");
  v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
  v30 = v29;

  *(_QWORD *)(v20 + 96) = &type metadata for String;
  *(_QWORD *)(v20 + 104) = v25;
  *(_QWORD *)(v20 + 72) = v28;
  *(_QWORD *)(v20 + 80) = v30;
  os_log(_:dso:log:_:_:)(v68, &_mh_execute_header, v18, "addDevice(%@): %@", 17, 2, v20);
  swift_bridgeObjectRelease(v20);
  v31 = objc_msgSend(v26, "bluetoothAddress");
  v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
  v34 = v33;

  swift_bridgeObjectRelease(v34);
  v35 = HIBYTE(v34) & 0xF;
  if ((v34 & 0x2000000000000000) == 0)
    v35 = v32 & 0xFFFFFFFFFFFFLL;
  v36 = v69;
  if (!v35)
    goto LABEL_12;
  v37 = objc_msgSend(v26, "bluetoothAddress");
  v38 = static String._unconditionallyBridgeFromObjectiveC(_:)(v37);
  v40 = v39;

  if (v38 == 0xD000000000000011 && v40 == 0x80000001001AB220)
  {
    swift_bridgeObjectRelease(0x80000001001AB220);
LABEL_12:
    v46 = *(void **)&v36[OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_clientQueue];
    v47 = (_QWORD *)swift_allocObject(&unk_1001E7DA8, 40, 7);
    v48 = (uint64_t)v66;
    v49 = v67;
    v47[2] = v26;
    v47[3] = v48;
    v47[4] = v49;
    aBlock[4] = sub_1000C6DB8;
    v72 = v47;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1000E6A24;
    aBlock[3] = &unk_1001E7DC0;
    v50 = _Block_copy(aBlock);
    v51 = v26;
    v52 = v46;
    v53 = swift_retain(v49);
    static DispatchQoS.unspecified.getter(v53);
    v70 = _swiftEmptyArrayStorage;
    v54 = sub_1000A0940((unint64_t *)&qword_100211920, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v55 = sub_1000A0980(&qword_100211D00);
    v56 = sub_1000C7224((unint64_t *)&qword_100211930, &qword_100211D00);
    v57 = v63;
    v58 = v65;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v70, v55, v56, v65, v54);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v15, v57, v50);
    _Block_release(v50);

    (*(void (**)(char *, uint64_t))(v64 + 8))(v57, v58);
    (*(void (**)(char *, uint64_t))(v61 + 8))(v15, v62);
    return swift_release(v72);
  }
  v45 = _stringCompareWithSmolCheck(_:_:expecting:)(v38, v40, 0xD000000000000011, 0x80000001001AB220, 0);
  swift_bridgeObjectRelease(v40);
  if ((v45 & 1) != 0)
    goto LABEL_12;
  v59 = sub_1000B4AC8();
  swift_unknownObjectWeakInit(aBlock, v36);
  v60 = v67;
  swift_retain(v67);
  sub_100154DD0(v26, v59, (uint64_t)aBlock, (uint64_t)v66, v60);
  swift_release(v60);

  swift_release(v59);
  return swift_unknownObjectWeakDestroy(aBlock);
}

uint64_t sub_1000B9078(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000C3830(a1, a2, a3, a4, (uint64_t)&unk_1001E7DF8, (uint64_t)sub_1000C6328, (uint64_t)&unk_1001E7E10);
}

uint64_t sub_1000B90B0(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_1000C04C4(a1, a2, a3, (uint64_t)&unk_1001E7C68, (uint64_t)sub_1000C6D20, (uint64_t)&unk_1001E7C80);
}

uint64_t sub_1000B90CC(uint64_t a1, void (*a2)(void), uint64_t a3, void *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t Strong;
  char *v18;
  id v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  char v32;
  uint64_t v33;
  void *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  id v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  id v50;
  id v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void (*v59)(void);
  uint64_t v60;
  _QWORD *v61;
  _QWORD aBlock[5];
  _QWORD *v63;
  char v64[24];

  v8 = type metadata accessor for DispatchWorkItemFlags(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v57 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DispatchQoS(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v57 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  a1 += 16;
  swift_beginAccess(a1, v64, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(a1, v16);
  if (!Strong)
  {
    v28 = sub_1000A4CC0();
    v29 = swift_allocError(&type metadata for DeviceManager.DeviceManagerError, v28, 0, 0);
    *v30 = 0;
    a2();
    return swift_errorRelease(v29);
  }
  v18 = (char *)Strong;
  v57 = v12;
  v58 = v9;
  v59 = a2;
  v60 = a3;
  v19 = objc_msgSend(a4, "bluetoothAddress");
  v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
  v22 = v21;

  swift_bridgeObjectRelease(v22);
  v23 = HIBYTE(v22) & 0xF;
  if ((v22 & 0x2000000000000000) == 0)
    v23 = v20 & 0xFFFFFFFFFFFFLL;
  if (v23)
  {
    v24 = objc_msgSend(a4, "bluetoothAddress");
    v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
    v27 = v26;

    if (v25 == 0xD000000000000011 && v27 == 0x80000001001AB220)
    {
      swift_bridgeObjectRelease(0x80000001001AB220);
    }
    else
    {
      v32 = _stringCompareWithSmolCheck(_:_:expecting:)(v25, v27, 0xD000000000000011, 0x80000001001AB220, 0);
      v33 = swift_bridgeObjectRelease(v27);
      if ((v32 & 1) == 0)
      {
        v46 = static os_log_type_t.default.getter(v33);
        if (qword_1002101D8 != -1)
          swift_once(&qword_1002101D8, sub_100168748);
        v47 = qword_100218DE0;
        v48 = sub_1000A0980((uint64_t *)&unk_1002103C0);
        v49 = swift_allocObject(v48, 72, 7);
        *(_OWORD *)(v49 + 16) = xmmword_100184870;
        v50 = a4;
        v51 = objc_msgSend(v50, "description");
        v52 = static String._unconditionallyBridgeFromObjectiveC(_:)(v51);
        v54 = v53;

        *(_QWORD *)(v49 + 56) = &type metadata for String;
        *(_QWORD *)(v49 + 64) = sub_1000A0DF4();
        *(_QWORD *)(v49 + 32) = v52;
        *(_QWORD *)(v49 + 40) = v54;
        os_log(_:dso:log:_:_:)(v46, &_mh_execute_header, v47, "CloudSync: updateDevice: %@", 27, 2, v49);
        swift_bridgeObjectRelease(v49);
        v55 = sub_1000B4AC8();
        swift_unknownObjectWeakInit(aBlock, v18);
        v56 = v60;
        swift_retain(v60);
        sub_100154E18(v50, v55, (uint64_t)aBlock, (uint64_t)v59, v56);
        swift_release(v56);

        swift_unknownObjectWeakDestroy(aBlock);
        v45 = v55;
        return swift_release(v45);
      }
    }
  }
  v34 = *(void **)&v18[OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_clientQueue];
  v35 = (_QWORD *)swift_allocObject(&unk_1001E7CB8, 40, 7);
  v36 = (uint64_t)v59;
  v37 = v60;
  v35[2] = a4;
  v35[3] = v36;
  v35[4] = v37;
  aBlock[4] = sub_1000C7810;
  v63 = v35;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000E6A24;
  aBlock[3] = &unk_1001E7CD0;
  v38 = _Block_copy(aBlock);
  v39 = v34;
  v40 = a4;
  v41 = swift_retain(v37);
  static DispatchQoS.unspecified.getter(v41);
  v61 = _swiftEmptyArrayStorage;
  v42 = sub_1000A0940((unint64_t *)&qword_100211920, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v43 = sub_1000A0980(&qword_100211D00);
  v44 = sub_1000C7224((unint64_t *)&qword_100211930, &qword_100211D00);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v61, v43, v44, v8, v42);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v15, v11, v38);
  _Block_release(v38);

  (*(void (**)(char *, uint64_t))(v58 + 8))(v11, v8);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v57);
  v45 = (uint64_t)v63;
  return swift_release(v45);
}

uint64_t sub_1000B9548(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000C3830(a1, a2, a3, a4, (uint64_t)&unk_1001E7D08, (uint64_t)sub_1000C6328, (uint64_t)&unk_1001E7D20);
}

uint64_t sub_1000B9580(void *a1, int a2, void *a3, void *aBlock, uint64_t a5, uint64_t a6, void (*a7)(id, uint64_t, uint64_t))
{
  void *v12;
  uint64_t v13;
  id v14;
  id v15;

  v12 = _Block_copy(aBlock);
  v13 = swift_allocObject(a5, 24, 7);
  *(_QWORD *)(v13 + 16) = v12;
  v14 = a3;
  v15 = a1;
  a7(v14, a6, v13);

  return swift_release(v13);
}

uint64_t sub_1000B9610(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_1000C04C4(a1, a2, a3, (uint64_t)&unk_1001E7B78, (uint64_t)sub_1000C6C98, (uint64_t)&unk_1001E7B90);
}

uint64_t sub_1000B962C(uint64_t a1, void (*a2)(void), uint64_t a3, void *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t Strong;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  unint64_t v42;
  uint64_t v43;
  _BYTE *v44;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  _QWORD *v51;
  uint64_t v52;
  id v53;
  uint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  void *v70;
  id v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  void (*v87)(void);
  uint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  id v98;
  uint64_t v99;
  _QWORD *v100;
  _QWORD aBlock[5];
  uint64_t v102;
  char v103[32];

  v8 = type metadata accessor for DispatchWorkItemFlags(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v94 = (char *)&v83 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS(0);
  v92 = *(_QWORD *)(v11 - 8);
  v93 = v11;
  __chkstk_darwin(v11);
  v91 = (char *)&v83 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for URL(0);
  v90 = *(_QWORD **)(v13 - 8);
  __chkstk_darwin(v13);
  v15 = (char *)&v83 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_1000A0980(&qword_100210CF8);
  __chkstk_darwin(v16);
  v95 = (uint64_t)&v83 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v99 = type metadata accessor for DeviceRecord(0);
  v97 = *(_QWORD *)(v99 - 8);
  __chkstk_darwin(v99);
  v19 = (char *)&v83 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v22 = (char *)&v83 - v21;
  a1 += 16;
  swift_beginAccess(a1, v103, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(a1, v23);
  if (Strong)
  {
    v84 = v13;
    v85 = v22;
    v96 = (char *)Strong;
    v87 = a2;
    v89 = v9;
    v86 = v8;
    v25 = static os_log_type_t.default.getter(Strong);
    if (qword_1002101D8 != -1)
      swift_once(&qword_1002101D8, sub_100168748);
    v26 = qword_100218DE0;
    v27 = sub_1000A0980((uint64_t *)&unk_1002103C0);
    v28 = swift_allocObject(v27, 72, 7);
    *(_OWORD *)(v28 + 16) = xmmword_100184870;
    v29 = a4;
    v30 = objc_msgSend(v29, "description");
    v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
    v33 = v32;
    v98 = v29;

    *(_QWORD *)(v28 + 56) = &type metadata for String;
    *(_QWORD *)(v28 + 64) = sub_1000A0DF4();
    *(_QWORD *)(v28 + 32) = v31;
    *(_QWORD *)(v28 + 40) = v33;
    os_log(_:dso:log:_:_:)(v25, &_mh_execute_header, v26, "CloudSync: removeDevice: %@", 27, 2, v28);
    swift_bridgeObjectRelease(v28);
    v34 = v96;
    v35 = sub_1000B4AC8();
    v36 = objc_msgSend((id)objc_opt_self(BTSystemConfiguration), "isFirstUnlocked");
    v88 = a3;
    if ((_DWORD)v36)
    {
      v37 = sub_100129690();
      if (qword_100210120 != -1)
        swift_once(&qword_100210120, sub_10009C800);
      v38 = v84;
      v39 = sub_1000A0A00(v84, (uint64_t)qword_100218BE0);
      v40 = v90;
      ((void (*)(char *, uint64_t, uint64_t))v90[2])(v15, v39, v38);
      v41 = sub_100127AAC((uint64_t)v15);
      swift_release(v37);
      ((void (*)(char *, uint64_t))v40[1])(v15, v38);
    }
    else
    {
      v46 = static os_log_type_t.error.getter(v36);
      if (qword_1002101E0 != -1)
        swift_once(&qword_1002101E0, sub_1001687B0);
      v41 = _swiftEmptyArrayStorage;
      os_log(_:dso:log:_:_:)(v46, &_mh_execute_header, qword_100218DE8, "deviceRecords call failed because in device is in beforeFirstUnlock state", 73, 2, _swiftEmptyArrayStorage);
    }
    swift_release(v35);
    v47 = v41[2];
    if (v47)
    {
      v48 = (uint64_t)v41 + ((*(unsigned __int8 *)(v97 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v97 + 80));
      v49 = *(_QWORD *)(v97 + 72);
      v90 = v41;
      swift_bridgeObjectRetain(v41);
      while (1)
      {
        sub_1000AE548(v48, (uint64_t)v19, type metadata accessor for DeviceRecord);
        v50 = &v19[*(int *)(v99 + 24)];
        v52 = *(_QWORD *)v50;
        v51 = (_QWORD *)*((_QWORD *)v50 + 1);
        v53 = objc_msgSend(v98, "bluetoothAddress");
        v54 = static String._unconditionallyBridgeFromObjectiveC(_:)(v53);
        v56 = v55;

        if (v52 == v54 && v51 == v56)
        {
          v41 = v90;
          swift_bridgeObjectRelease(v90);
          goto LABEL_25;
        }
        v58 = _stringCompareWithSmolCheck(_:_:expecting:)(v52, v51, v54, v56, 0);
        swift_bridgeObjectRelease(v56);
        if ((v58 & 1) != 0)
          break;
        sub_1000AE58C((uint64_t)v19, type metadata accessor for DeviceRecord);
        v48 += v49;
        if (!--v47)
        {
          v41 = v90;
          swift_bridgeObjectRelease(v90);
          v59 = 1;
          v60 = v88;
          v61 = (uint64_t)v87;
          v34 = v96;
          goto LABEL_22;
        }
      }
      v41 = v90;
      v51 = v90;
LABEL_25:
      v60 = v88;
      v61 = (uint64_t)v87;
      v34 = v96;
      swift_bridgeObjectRelease(v51);
      v63 = (uint64_t)v19;
      v62 = v95;
      sub_1000C6CD0(v63, v95, type metadata accessor for DeviceRecord);
      v59 = 0;
    }
    else
    {
      v59 = 1;
      v60 = v88;
      v61 = (uint64_t)v87;
LABEL_22:
      v62 = v95;
    }
    v64 = v97;
    v65 = v99;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v97 + 56))(v62, v59, 1, v99);
    swift_bridgeObjectRelease(v41);
    v66 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v64 + 48))(v62, 1, v65);
    v67 = v89;
    if (v66 == 1)
    {
      sub_1000A1000(v62, &qword_100210CF8);
      v68 = *(void **)&v34[OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_clientQueue];
      v69 = swift_allocObject(&unk_1001E7BC8, 32, 7);
      *(_QWORD *)(v69 + 16) = v61;
      *(_QWORD *)(v69 + 24) = v60;
      aBlock[4] = sub_1000C6CC8;
      v102 = v69;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_1000E6A24;
      aBlock[3] = &unk_1001E7BE0;
      v70 = _Block_copy(aBlock);
      v71 = v68;
      v72 = swift_retain(v60);
      v73 = v91;
      static DispatchQoS.unspecified.getter(v72);
      v100 = _swiftEmptyArrayStorage;
      v74 = sub_1000A0940((unint64_t *)&qword_100211920, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v75 = sub_1000A0980(&qword_100211D00);
      v76 = sub_1000C7224((unint64_t *)&qword_100211930, &qword_100211D00);
      v77 = v94;
      v78 = v75;
      v79 = v86;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v100, v78, v76, v86, v74);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0, v73, v77, v70);
      _Block_release(v70);

      (*(void (**)(char *, uint64_t))(v67 + 8))(v77, v79);
      (*(void (**)(char *, uint64_t))(v92 + 8))(v73, v93);
      return swift_release(v102);
    }
    else
    {
      v80 = v62;
      v81 = (uint64_t)v85;
      sub_1000C6CD0(v80, (uint64_t)v85, type metadata accessor for DeviceRecord);
      v82 = sub_1000B4AC8();
      swift_unknownObjectWeakInit(aBlock, v34);
      swift_retain(v60);
      sub_1001559D0(v81, v82, (uint64_t)aBlock, v61, v60);

      swift_release(v82);
      swift_release(v60);
      sub_1000AE58C(v81, type metadata accessor for DeviceRecord);
      return swift_unknownObjectWeakDestroy(aBlock);
    }
  }
  else
  {
    v42 = sub_1000A4CC0();
    v43 = swift_allocError(&type metadata for DeviceManager.DeviceManagerError, v42, 0, 0);
    *v44 = 0;
    a2();
    return swift_errorRelease(v43);
  }
}

uint64_t sub_1000B9DDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000C3830(a1, a2, a3, a4, (uint64_t)&unk_1001E7C18, (uint64_t)sub_1000C6328, (uint64_t)&unk_1001E7C30);
}

uint64_t sub_1000B9DF8(void (*a1)(void))
{
  unint64_t v2;
  uint64_t v3;
  _BYTE *v4;

  v2 = sub_1000A4CC0();
  v3 = swift_allocError(&type metadata for DeviceManager.DeviceManagerError, v2, 0, 0);
  *v4 = 3;
  a1();
  return swift_errorRelease(v3);
}

uint64_t sub_1000B9E6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000BF218(a1, a2, a3, a4, (uint64_t)&unk_1001E7AD8, (uint64_t)sub_1000C6C80, (uint64_t)&unk_1001E7AF0);
}

uint64_t sub_1000B9E88(uint64_t a1, void (*a2)(void), uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t Strong;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  _BYTE v23[24];

  v9 = a1 + 16;
  swift_beginAccess(a1 + 16, v23, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v9, v10);
  if (Strong)
  {
    v12 = (void *)Strong;
    v13 = static os_log_type_t.default.getter(Strong);
    if (qword_1002101D8 != -1)
      swift_once(&qword_1002101D8, sub_100168748);
    v14 = qword_100218DE0;
    v15 = sub_1000A0980((uint64_t *)&unk_1002103C0);
    v16 = swift_allocObject(v15, 72, 7);
    *(_OWORD *)(v16 + 16) = xmmword_100184870;
    *(_QWORD *)(v16 + 56) = &type metadata for String;
    *(_QWORD *)(v16 + 64) = sub_1000A0DF4();
    *(_QWORD *)(v16 + 32) = a4;
    *(_QWORD *)(v16 + 40) = a5;
    swift_bridgeObjectRetain(a5);
    os_log(_:dso:log:_:_:)(v13, &_mh_execute_header, v14, "CloudSync: remove Device with BT Address: %@", 44, 2, v16);
    swift_bridgeObjectRelease(v16);
    v17 = sub_1000B4AC8();
    v18 = swift_allocObject(&unk_1001E6BD8, 24, 7);
    swift_unknownObjectWeakInit(v18 + 16, v12);
    swift_retain(a3);
    sub_10015A1E4(a4, a5, 0x6552656369766544, 0xEC00000064726F63, v17, v18, (uint64_t)a2, a3);

    swift_release(v17);
    swift_release(v18);
    return swift_release(a3);
  }
  else
  {
    v20 = sub_1000A4CC0();
    v21 = swift_allocError(&type metadata for DeviceManager.DeviceManagerError, v20, 0, 0);
    *v22 = 0;
    a2();
    return swift_errorRelease(v21);
  }
}

uint64_t sub_1000BA068(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000C1450(a1, a2, a3, a4, (uint64_t)&unk_1001E7B28, (uint64_t)sub_1000C6328, (uint64_t)&unk_1001E7B40);
}

uint64_t sub_1000BA0A0(void *a1, int a2, uint64_t a3, void *aBlock, uint64_t a5, uint64_t a6, void (*a7)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;

  v12 = _Block_copy(aBlock);
  v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
  v15 = v14;
  v16 = swift_allocObject(a5, 24, 7);
  *(_QWORD *)(v16 + 16) = v12;
  v17 = a1;
  a7(v13, v15, a6, v16);

  swift_bridgeObjectRelease(v15);
  return swift_release(v16);
}

uint64_t sub_1000BA148(uint64_t a1, uint64_t a2)
{
  return sub_1000C2FCC(a1, a2, (uint64_t)&unk_1001E7A38, (uint64_t)sub_1000C6C28, (uint64_t)&unk_1001E7A50);
}

uint64_t sub_1000BA164(uint64_t a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(uint64_t);
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t Strong;
  uint64_t (*v36)(uint64_t);
  uint64_t v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  char v63;
  char v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t (*v72)(void);
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _BYTE *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char v88;
  char v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  Class v106;
  uint64_t v107;
  uint64_t v108;
  id v109;
  unint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  void *v114;
  void *v115;
  unint64_t v116;
  _QWORD *v117;
  void *v118;
  id v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  uint64_t (*v137)(void);
  uint64_t v138;
  char *v139;
  uint64_t v140;
  char *v141;
  char *v142;
  _QWORD *v143;
  uint64_t v144;
  char *v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  unint64_t v149;
  __int128 v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  _QWORD *v154;
  _QWORD aBlock[5];
  _QWORD *v156;
  unint64_t v157;
  char v158[8];

  v6 = sub_1000A0980(&qword_100210CE8);
  __chkstk_darwin(v6);
  v135 = (char *)&v128 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchWorkItemFlags(0);
  v133 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v132 = (char *)&v128 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v131 = type metadata accessor for DispatchQoS(0);
  v130 = *(_QWORD *)(v131 - 8);
  __chkstk_darwin(v131);
  v129 = (char *)&v128 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v152 = type metadata accessor for BTDeferredRecord(0);
  v140 = *(_QWORD *)(v152 - 8);
  __chkstk_darwin(v152);
  v136 = (uint64_t)&v128 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v139 = (char *)&v128 - v13;
  __chkstk_darwin(v14);
  v141 = (char *)&v128 - v15;
  __chkstk_darwin(v16);
  v18 = (char *)&v128 - v17;
  __chkstk_darwin(v19);
  v21 = (char *)&v128 - v20;
  __chkstk_darwin(v22);
  v24 = (char *)&v128 - v23;
  v151 = type metadata accessor for DeviceSupportInformationRecord(0);
  v147 = *(_QWORD *)(v151 - 8);
  __chkstk_darwin(v151);
  v134 = (uint64_t)&v128 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  v28 = (char *)&v128 - v27;
  __chkstk_darwin(v29);
  v153 = (uint64_t)&v128 - v30;
  v31 = (uint64_t (*)(uint64_t))type metadata accessor for URL(0);
  *(_QWORD *)&v150 = *((_QWORD *)v31 - 1);
  __chkstk_darwin(v31);
  v33 = (char *)&v128 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  a1 += 16;
  swift_beginAccess(a1, v158, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(a1, v34);
  v145 = (char *)Strong;
  if (!Strong)
    return a2();
  v137 = a2;
  v138 = a3;
  v128 = v8;
  v36 = (uint64_t (*)(uint64_t))static os_log_type_t.default.getter(Strong);
  if (qword_1002101D8 != -1)
    goto LABEL_66;
  while (1)
  {
    os_log(_:dso:log:_:_:)(v36, &_mh_execute_header, qword_100218DE0, "fetchDeviceSupportInformationRecords", 36, 2, _swiftEmptyArrayStorage);
    v157 = (unint64_t)_swiftEmptyArrayStorage;
    v37 = sub_1000B4AC8();
    v38 = objc_msgSend((id)objc_opt_self(BTSystemConfiguration), "isFirstUnlocked");
    v39 = (uint64_t)v141;
    if ((_DWORD)v38)
    {
      v149 = v37;
      v40 = sub_100129690();
      if (qword_100210180 != -1)
        swift_once(&qword_100210180, sub_1000DA4F0);
      v41 = sub_1000A0A00((uint64_t)v31, (uint64_t)qword_100218D28);
      v42 = v150;
      (*(void (**)(char *, uint64_t, uint64_t (*)(uint64_t)))(v150 + 16))(v33, v41, v31);
      v43 = sub_100127AD0((uint64_t)v33);
      swift_release(v40);
      (*(void (**)(char *, uint64_t (*)(uint64_t)))(v42 + 8))(v33, v31);
      v37 = v149;
    }
    else
    {
      v45 = static os_log_type_t.error.getter(v38);
      if (qword_1002101E0 != -1)
        swift_once(&qword_1002101E0, sub_1001687B0);
      v43 = _swiftEmptyArrayStorage;
      os_log(_:dso:log:_:_:)(v45, &_mh_execute_header, qword_100218DE8, "deviceSupportInformationRecords call failed because in device is in beforeFirstUnlock state", 91, 2, _swiftEmptyArrayStorage);
    }
    swift_release(v37);
    v144 = v43[2];
    if (!v144)
      break;
    v46 = 0;
    v142 = (char *)v43 + ((*(unsigned __int8 *)(v147 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v147 + 80));
    v31 = type metadata accessor for DeviceSupportInformationRecord;
    v36 = type metadata accessor for BTDeferredRecord;
    v149 = (unint64_t)"SoundProfileRecord";
    *(_QWORD *)&v150 = 0x80000001001AA950;
    v143 = v43;
    while (v46 < v43[2])
    {
      v47 = *(_QWORD *)(v147 + 72);
      v148 = v46;
      sub_1000AE548((uint64_t)&v142[v47 * v46], v153, type metadata accessor for DeviceSupportInformationRecord);
      v48 = sub_1000B4AC8();
      v49 = sub_10012A994();
      swift_release(v48);
      v50 = *(_QWORD *)(v49 + 16);
      if (v50)
      {
        v51 = v140;
        v52 = v49;
        v33 = (char *)(v49
                     + ((*(unsigned __int8 *)(v140 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v140 + 80)));
        v146 = v52;
        swift_bridgeObjectRetain(v52);
        v53 = *(_QWORD *)(v51 + 72);
        while (1)
        {
          sub_1000AE548((uint64_t)v33, (uint64_t)v24, type metadata accessor for BTDeferredRecord);
          v54 = *((_QWORD *)v24 + 1);
          v55 = *((_QWORD *)v24 + 2);
          if (v54 == 0xD00000000000001ELL && v55 == (_QWORD)v150)
          {
            sub_1000AE548((uint64_t)v24, (uint64_t)v21, type metadata accessor for BTDeferredRecord);
            sub_1000AE548(v153, (uint64_t)v28, type metadata accessor for DeviceSupportInformationRecord);
          }
          else
          {
            v56 = _stringCompareWithSmolCheck(_:_:expecting:)(v54, v55, 0xD00000000000001ELL, v149 | 0x8000000000000000, 0);
            sub_1000AE548((uint64_t)v24, (uint64_t)v21, type metadata accessor for BTDeferredRecord);
            sub_1000AE548(v153, (uint64_t)v28, type metadata accessor for DeviceSupportInformationRecord);
            if ((v56 & 1) == 0)
            {
              sub_1000AE58C((uint64_t)v21, type metadata accessor for BTDeferredRecord);
              sub_1000AE58C((uint64_t)v28, type metadata accessor for DeviceSupportInformationRecord);
              sub_1000AE548((uint64_t)v24, (uint64_t)v18, type metadata accessor for BTDeferredRecord);
              goto LABEL_20;
            }
          }
          v57 = &v21[*(int *)(v152 + 28)];
          v58 = *(_QWORD *)v57;
          v59 = *((_QWORD *)v57 + 1);
          v60 = &v28[*(int *)(v151 + 24)];
          v61 = *((_QWORD *)v60 + 1);
          if (v58 == *(_QWORD *)v60 && v59 == v61)
          {
            sub_1000AE58C((uint64_t)v21, type metadata accessor for BTDeferredRecord);
            sub_1000AE58C((uint64_t)v28, type metadata accessor for DeviceSupportInformationRecord);
            sub_1000AE548((uint64_t)v24, (uint64_t)v18, type metadata accessor for BTDeferredRecord);
LABEL_33:
            if (*v18 == 1)
            {
              swift_bridgeObjectRelease(0xE600000000000000);
              sub_1000AE58C((uint64_t)v18, type metadata accessor for BTDeferredRecord);
              sub_1000AE58C((uint64_t)v24, type metadata accessor for BTDeferredRecord);
LABEL_14:
              swift_bridgeObjectRelease_n(v146, 2);
              v39 = (uint64_t)v141;
              goto LABEL_15;
            }
            v64 = _stringCompareWithSmolCheck(_:_:expecting:)(0x657461647075, 0xE600000000000000, 0x6574656C6564, 0xE600000000000000, 0);
            swift_bridgeObjectRelease(0xE600000000000000);
            sub_1000AE58C((uint64_t)v18, type metadata accessor for BTDeferredRecord);
            sub_1000AE58C((uint64_t)v24, type metadata accessor for BTDeferredRecord);
            if ((v64 & 1) != 0)
              goto LABEL_14;
            goto LABEL_21;
          }
          v63 = _stringCompareWithSmolCheck(_:_:expecting:)(v58, v59, *(_QWORD *)v60, v61, 0);
          sub_1000AE58C((uint64_t)v21, type metadata accessor for BTDeferredRecord);
          sub_1000AE58C((uint64_t)v28, type metadata accessor for DeviceSupportInformationRecord);
          sub_1000AE548((uint64_t)v24, (uint64_t)v18, type metadata accessor for BTDeferredRecord);
          if ((v63 & 1) != 0)
            goto LABEL_33;
LABEL_20:
          sub_1000AE58C((uint64_t)v18, type metadata accessor for BTDeferredRecord);
          sub_1000AE58C((uint64_t)v24, type metadata accessor for BTDeferredRecord);
LABEL_21:
          v33 += v53;
          if (!--v50)
          {
            swift_bridgeObjectRelease_n(v146, 2);
            v39 = (uint64_t)v141;
            goto LABEL_38;
          }
        }
      }
      swift_bridgeObjectRelease(v49);
LABEL_38:
      v33 = (char *)sub_1000BB014();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v33);
      v66 = *(_QWORD *)((v157 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v65 = *(_QWORD *)((v157 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v66 >= v65 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v65 > 1, v66 + 1, 1);
      v67 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v66, v33);
      specialized Array._endMutation()(v67);
LABEL_15:
      v46 = v148 + 1;
      sub_1000AE58C(v153, type metadata accessor for DeviceSupportInformationRecord);
      v43 = v143;
      if (v46 == v144)
      {
        swift_bridgeObjectRelease(v143);
        goto LABEL_43;
      }
    }
    __break(1u);
LABEL_66:
    swift_once(&qword_1002101D8, sub_100168748);
  }
  swift_bridgeObjectRelease(v43);
LABEL_43:
  v68 = sub_1000B4AC8();
  v69 = sub_10012A994();
  swift_release(v68);
  v70 = *(_QWORD *)(v69 + 16);
  v71 = v138;
  v72 = v137;
  if (v70)
  {
    v149 = 0;
    v73 = (*(unsigned __int8 *)(v140 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v140 + 80);
    v144 = v69;
    v74 = v69 + v73;
    v75 = *(_QWORD *)(v140 + 72);
    v148 = (unint64_t)"SoundProfileRecord";
    v153 = 0x80000001001AA950;
    v150 = xmmword_100184870;
    v76 = v139;
    v146 = v75;
    while (1)
    {
      sub_1000AE548(v74, v39, type metadata accessor for BTDeferredRecord);
      v86 = *(_QWORD *)(v39 + 8);
      v87 = *(_QWORD *)(v39 + 16);
      if (v86 == 0xD00000000000001ELL && v87 == v153)
      {
        sub_1000AE548(v39, (uint64_t)v76, type metadata accessor for BTDeferredRecord);
      }
      else
      {
        v88 = _stringCompareWithSmolCheck(_:_:expecting:)(v86, v87, 0xD00000000000001ELL, v148 | 0x8000000000000000, 0);
        sub_1000AE548(v39, (uint64_t)v76, type metadata accessor for BTDeferredRecord);
        if ((v88 & 1) == 0)
        {
          sub_1000AE58C((uint64_t)v76, type metadata accessor for BTDeferredRecord);
          goto LABEL_47;
        }
      }
      if ((*v76 & 1) != 0)
      {
        v89 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6574656C6564, 0xE600000000000000, 0x657461647075, 0xE600000000000000, 0);
        swift_bridgeObjectRelease(0xE600000000000000);
        v77 = sub_1000AE58C((uint64_t)v76, type metadata accessor for BTDeferredRecord);
        if ((v89 & 1) == 0)
          goto LABEL_47;
      }
      else
      {
        swift_bridgeObjectRelease(0xE600000000000000);
        v77 = sub_1000AE58C((uint64_t)v76, type metadata accessor for BTDeferredRecord);
      }
      v90 = v39 + *(int *)(v152 + 36);
      v91 = *(_QWORD *)(v90 + 8);
      if (v91 >> 60 != 15)
      {
        v92 = *(_QWORD *)v90;
        sub_1000A0E74(*(_QWORD *)v90, *(_QWORD *)(v90 + 8));
        v93 = objc_autoreleasePoolPush();
        v94 = type metadata accessor for PropertyListDecoder(0);
        swift_allocObject(v94, *(unsigned int *)(v94 + 48), *(unsigned __int16 *)(v94 + 52));
        v95 = PropertyListDecoder.init()();
        v96 = sub_1000A0940(&qword_1002121F0, type metadata accessor for DeviceSupportInformationRecord, (uint64_t)&unk_10018711C);
        v97 = (uint64_t)v135;
        v98 = v151;
        v99 = v149;
        dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(v151, v92, v91, v151, v96);
        if (!v99)
        {
          v149 = 0;
          swift_release(v95);
          objc_autoreleasePoolPop(v93);
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v147 + 56))(v97, 0, 1, v98);
          v100 = v134;
          v101 = sub_1000C6CD0(v97, v134, type metadata accessor for DeviceSupportInformationRecord);
          v102 = static os_log_type_t.default.getter(v101);
          v103 = qword_100218DE0;
          v104 = sub_1000A0980((uint64_t *)&unk_1002103C0);
          v105 = swift_allocObject(v104, 72, 7);
          *(_OWORD *)(v105 + 16) = v150;
          v106 = sub_1000DA63C();
          v108 = v107;
          *(_QWORD *)(v105 + 56) = &type metadata for String;
          *(_QWORD *)(v105 + 64) = sub_1000A0DF4();
          *(_QWORD *)(v105 + 32) = v106;
          *(_QWORD *)(v105 + 40) = v108;
          os_log(_:dso:log:_:_:)(v102, &_mh_execute_header, v103, "Construct deferred BTCloudDeviceSupportInformation - %@", 55, 2, v105);
          swift_bridgeObjectRelease(v105);
          v109 = sub_1000BB014();
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v109);
          v111 = *(_QWORD *)((v157 & 0xFFFFFFFFFFFFFF8) + 0x10);
          v110 = *(_QWORD *)((v157 & 0xFFFFFFFFFFFFFF8) + 0x18);
          if (v111 >= v110 >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v110 > 1, v111 + 1, 1);
          v112 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v111, v109);
          specialized Array._endMutation()(v112);
          sub_1000B2D78(v92, v91);
          sub_1000AE58C(v100, type metadata accessor for DeviceSupportInformationRecord);
          v71 = v138;
          v72 = v137;
          v76 = v139;
          v39 = (uint64_t)v141;
          v75 = v146;
          goto LABEL_47;
        }
        swift_release(v95);
        objc_autoreleasePoolPop(v93);
        swift_errorRelease(v99);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v147 + 56))(v97, 1, 1, v98);
        sub_1000B2D78(v92, v91);
        v77 = sub_1000A1000(v97, &qword_100210CE8);
        v149 = 0;
        v75 = v146;
      }
      v78 = static os_log_type_t.default.getter(v77);
      v79 = qword_100218DE0;
      v80 = sub_1000A0980((uint64_t *)&unk_1002103C0);
      v81 = swift_allocObject(v80, 72, 7);
      *(_OWORD *)(v81 + 16) = v150;
      v82 = v136;
      sub_1000AE548(v39, v136, type metadata accessor for BTDeferredRecord);
      v83 = String.init<A>(describing:)(v82, v152);
      v85 = v84;
      *(_QWORD *)(v81 + 56) = &type metadata for String;
      *(_QWORD *)(v81 + 64) = sub_1000A0DF4();
      *(_QWORD *)(v81 + 32) = v83;
      *(_QWORD *)(v81 + 40) = v85;
      os_log(_:dso:log:_:_:)(v78, &_mh_execute_header, v79, "Unable to contruct deferred BTCloudDeviceSupportInformation - %@", 64, 2, v81);
      swift_bridgeObjectRelease(v81);
      v71 = v138;
      v72 = v137;
      v76 = v139;
LABEL_47:
      sub_1000AE58C(v39, type metadata accessor for BTDeferredRecord);
      v74 += v75;
      if (!--v70)
      {
        v113 = v144;
        goto LABEL_64;
      }
    }
  }
  v113 = v69;
LABEL_64:
  swift_bridgeObjectRelease(v113);
  v114 = v145;
  v115 = *(void **)&v145[OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_clientQueue];
  v116 = v157;
  v117 = (_QWORD *)swift_allocObject(&unk_1001E7A88, 40, 7);
  v117[2] = v116;
  v117[3] = v72;
  v117[4] = v71;
  aBlock[4] = sub_1000C6C44;
  v156 = v117;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000E6A24;
  aBlock[3] = &unk_1001E7AA0;
  v118 = _Block_copy(aBlock);
  v119 = v115;
  v120 = swift_retain(v71);
  v121 = v129;
  static DispatchQoS.unspecified.getter(v120);
  v154 = _swiftEmptyArrayStorage;
  v122 = sub_1000A0940((unint64_t *)&qword_100211920, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v123 = sub_1000A0980(&qword_100211D00);
  v124 = sub_1000C7224((unint64_t *)&qword_100211930, &qword_100211D00);
  v125 = v132;
  v126 = v123;
  v127 = v128;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v154, v126, v124, v128, v122);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v121, v125, v118);
  _Block_release(v118);

  (*(void (**)(char *, uint64_t))(v133 + 8))(v125, v127);
  (*(void (**)(char *, uint64_t))(v130 + 8))(v121, v131);
  return swift_release(v156);
}

id sub_1000BB014()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  NSString v3;
  id v4;
  NSString v5;
  NSString v6;
  NSString v7;
  NSString v8;
  NSString v9;
  NSString v10;
  NSString v11;
  NSString v12;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for DeviceSupportInformationRecord(0) + 24) + 8);
  v2 = objc_allocWithZone((Class)BTCloudDeviceSupportInformation);
  swift_bridgeObjectRetain(v1);
  v3 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v1);
  v4 = objc_msgSend(v2, "initWithBluetoothAddress:", v3);

  v5 = String._bridgeToObjectiveC()();
  objc_msgSend(v4, "setBudsFirmwareVersion:", v5);

  v6 = String._bridgeToObjectiveC()();
  objc_msgSend(v4, "setCaseName:", v6);

  v7 = String._bridgeToObjectiveC()();
  objc_msgSend(v4, "setCaseFirmwareVersion:", v7);

  v8 = String._bridgeToObjectiveC()();
  objc_msgSend(v4, "setCaseSerialNumber:", v8);

  v9 = String._bridgeToObjectiveC()();
  objc_msgSend(v4, "setHardwareVersion:", v9);

  v10 = String._bridgeToObjectiveC()();
  objc_msgSend(v4, "setLeftBudSerialNumber:", v10);

  v11 = String._bridgeToObjectiveC()();
  objc_msgSend(v4, "setRightBudSerialNumber:", v11);

  v12 = String._bridgeToObjectiveC()();
  objc_msgSend(v4, "setAncAssetVersion:", v12);

  return v4;
}

uint64_t sub_1000BB204(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t a3, unint64_t *a4, _QWORD *a5, const char *a6, uint64_t a7)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v13 = static os_log_type_t.debug.getter(a1);
  if (qword_1002101D8 != -1)
    swift_once(&qword_1002101D8, sub_100168748);
  v14 = qword_100218DE0;
  v15 = sub_1000A0980((uint64_t *)&unk_1002103C0);
  v16 = swift_allocObject(v15, 72, 7);
  *(_OWORD *)(v16 + 16) = xmmword_100184870;
  v17 = sub_1000AB31C(0, a4, a5);
  v18 = swift_bridgeObjectRetain(a1);
  v19 = Array.description.getter(v18, v17);
  v21 = v20;
  swift_bridgeObjectRelease(a1);
  *(_QWORD *)(v16 + 56) = &type metadata for String;
  *(_QWORD *)(v16 + 64) = sub_1000A0DF4();
  *(_QWORD *)(v16 + 32) = v19;
  *(_QWORD *)(v16 + 40) = v21;
  os_log(_:dso:log:_:_:)(v13, &_mh_execute_header, v14, a6, a7, 2, v16);
  swift_bridgeObjectRelease(v16);
  return a2(a1);
}

void sub_1000BB354(uint64_t a1, uint64_t a2, unint64_t *a3, _QWORD *a4)
{
  NSArray v5;
  Class isa;

  if (a1)
  {
    sub_1000AB31C(0, a3, a4);
    v5.super.isa = Array._bridgeToObjectiveC()().super.isa;
  }
  else
  {
    v5.super.isa = 0;
  }
  isa = v5.super.isa;
  (*(void (**)(uint64_t))(a2 + 16))(a2);

}

uint64_t sub_1000BB3BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000BF218(a1, a2, a3, a4, (uint64_t)&unk_1001E78A8, (uint64_t)sub_1000C68F4, (uint64_t)&unk_1001E78C0);
}

uint64_t sub_1000BB3D8(uint64_t a1, uint64_t (*a2)(void), uint64_t (*a3)(void), uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t Strong;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t (*v55)(void);
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  char *v63;
  uint64_t v64;
  char v66;
  uint64_t v68;
  uint64_t v69;
  int v70;
  unsigned __int8 *v71;
  uint64_t v72;
  uint64_t v73;
  id v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  char *v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  void *v95;
  uint64_t v96;
  id v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  BOOL v112;
  uint64_t v113;
  unsigned __int8 *v114;
  unint64_t v115;
  void *v116;
  uint64_t (*v117)(void);
  uint64_t v118;
  void *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  void *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t (**v131)(void);
  void *v132;
  id v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unsigned __int8 *v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  void *v142;
  _QWORD *v143;
  void *v144;
  id v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  void *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t v158;
  uint64_t v159;
  uint64_t (**v160)(void);
  void *v161;
  id v162;
  char *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  char *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  unsigned __int8 *v173;
  uint64_t v174;
  uint64_t v175;
  _QWORD *v176;
  uint64_t v177;
  uint64_t v178;
  BOOL v179;
  void (*v180)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  char *v187;
  uint64_t v188;
  uint64_t v189;
  void *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  unint64_t v195;
  uint64_t v196;
  uint64_t (**v197)(void);
  void *v198;
  id v199;
  uint64_t v200;
  char *v201;
  uint64_t v202;
  void *v203;
  uint64_t v204;
  uint64_t v205;
  char *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t (*v209)(uint64_t);
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  __int128 v213;
  uint64_t v214;
  unint64_t v215;
  uint64_t v216;
  char *v217;
  uint64_t v218;
  uint64_t v219;
  char *v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  char *v229;
  char *v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t (*v234)(void);
  uint64_t v235;
  char *v236;
  uint64_t v237;
  unsigned __int8 *v238;
  uint64_t v239;
  uint64_t (*v240)(void);
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  _QWORD *v248;
  void **aBlock;
  uint64_t v250;
  uint64_t (*v251)(uint64_t);
  void *v252;
  uint64_t (*v253)();
  _QWORD *v254;
  char v255[8];

  v246 = a5;
  v247 = a4;
  v240 = a2;
  v7 = type metadata accessor for DispatchWorkItemFlags(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v236 = (char *)&v211 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v211 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v232 = type metadata accessor for URL(0);
  v231 = *(_QWORD *)(v232 - 8);
  __chkstk_darwin(v232);
  v230 = (char *)&v211 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_1000A0980(&qword_100210CE8);
  __chkstk_darwin(v15);
  v217 = (char *)&v211 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v225 = (uint64_t)&v211 - v18;
  __chkstk_darwin(v19);
  v233 = (uint64_t)&v211 - v20;
  v243 = type metadata accessor for DeviceSupportInformationRecord(0);
  v239 = *(_QWORD *)(v243 - 8);
  __chkstk_darwin(v243);
  v228 = (uint64_t)&v211 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v216 = (uint64_t)&v211 - v23;
  __chkstk_darwin(v24);
  v242 = (uint64_t)&v211 - v25;
  __chkstk_darwin(v26);
  v218 = (uint64_t)&v211 - v27;
  __chkstk_darwin(v28);
  v244 = (uint64_t)&v211 - v29;
  v227 = v30;
  __chkstk_darwin(v31);
  v226 = (uint64_t)&v211 - v32;
  v33 = sub_1000A0980(&qword_100210CF0);
  __chkstk_darwin(v33);
  v237 = (uint64_t)&v211 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v245 = type metadata accessor for BTDeferredRecord(0);
  v241 = *(_QWORD *)(v245 - 8);
  __chkstk_darwin(v245);
  v235 = (uint64_t)&v211 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v36);
  v38 = (char *)&v211 - v37;
  __chkstk_darwin(v39);
  v41 = (char *)&v211 - v40;
  v224 = v42;
  __chkstk_darwin(v43);
  v238 = (unsigned __int8 *)&v211 - v44;
  a1 += 16;
  swift_beginAccess(a1, v255, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(a1, v45);
  if (!Strong)
    return v240();
  v47 = (char *)Strong;
  v219 = v8;
  v220 = v13;
  v221 = v11;
  v222 = v7;
  v223 = v10;
  v48 = static os_log_type_t.default.getter(Strong);
  if (qword_1002101D8 != -1)
    swift_once(&qword_1002101D8, sub_100168748);
  v49 = qword_100218DE0;
  v214 = sub_1000A0980((uint64_t *)&unk_1002103C0);
  v50 = swift_allocObject(v214, 72, 7);
  v213 = xmmword_100184870;
  *(_OWORD *)(v50 + 16) = xmmword_100184870;
  *(_QWORD *)(v50 + 56) = &type metadata for String;
  v215 = sub_1000A0DF4();
  *(_QWORD *)(v50 + 64) = v215;
  v51 = v246;
  *(_QWORD *)(v50 + 32) = v247;
  *(_QWORD *)(v50 + 40) = v51;
  swift_bridgeObjectRetain(v51);
  os_log(_:dso:log:_:_:)(v48, &_mh_execute_header, v49, "fetchDeviceSupportInformationRecord: %@", 39, 2, v50);
  swift_bridgeObjectRelease(v50);
  v52 = sub_1000B4AC8();
  v53 = sub_10012A994();
  swift_release(v52);
  v54 = *(_QWORD *)(v53 + 16);
  v55 = a3;
  v56 = v47;
  v57 = v241;
  v229 = v47;
  v234 = v55;
  if (!v54)
  {
LABEL_20:
    v68 = v237;
    v69 = v245;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v57 + 56))(v237, 1, 1, v245);
    goto LABEL_23;
  }
  v58 = v53 + ((*(unsigned __int8 *)(v241 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v241 + 80));
  v59 = *(_QWORD *)(v241 + 72);
  v212 = v53;
  swift_bridgeObjectRetain(v53);
  while (1)
  {
    sub_1000AE548(v58, (uint64_t)v41, type metadata accessor for BTDeferredRecord);
    v60 = *((_QWORD *)v41 + 1);
    v61 = *((_QWORD *)v41 + 2);
    if (v60 == 0xD00000000000001ELL && v61 == 0x80000001001AA950)
    {
      sub_1000AE548((uint64_t)v41, (uint64_t)v38, type metadata accessor for BTDeferredRecord);
    }
    else
    {
      v62 = _stringCompareWithSmolCheck(_:_:expecting:)(v60, v61, 0xD00000000000001ELL, 0x80000001001AA950, 0);
      sub_1000AE548((uint64_t)v41, (uint64_t)v38, type metadata accessor for BTDeferredRecord);
      if ((v62 & 1) == 0)
      {
        sub_1000AE58C((uint64_t)v38, type metadata accessor for BTDeferredRecord);
        goto LABEL_7;
      }
    }
    v63 = &v38[*(int *)(v245 + 28)];
    v64 = *((_QWORD *)v63 + 1);
    if (*(_QWORD *)v63 == v247 && v64 == v246)
      break;
    v66 = _stringCompareWithSmolCheck(_:_:expecting:)(*(_QWORD *)v63, v64, v247, v246, 0);
    sub_1000AE58C((uint64_t)v38, type metadata accessor for BTDeferredRecord);
    if ((v66 & 1) != 0)
      goto LABEL_22;
LABEL_7:
    sub_1000AE58C((uint64_t)v41, type metadata accessor for BTDeferredRecord);
    v58 += v59;
    if (!--v54)
    {
      v53 = v212;
      swift_bridgeObjectRelease(v212);
      v56 = v229;
      v55 = v234;
      v57 = v241;
      goto LABEL_20;
    }
  }
  sub_1000AE58C((uint64_t)v38, type metadata accessor for BTDeferredRecord);
LABEL_22:
  v53 = v212;
  swift_bridgeObjectRelease(v212);
  v68 = v237;
  sub_1000C6CD0((uint64_t)v41, v237, type metadata accessor for BTDeferredRecord);
  v57 = v241;
  v69 = v245;
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v241 + 56))(v68, 0, 1, v245);
  v56 = v229;
  v55 = v234;
LABEL_23:
  swift_bridgeObjectRelease(v53);
  v70 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v57 + 48))(v68, 1, v69);
  v71 = v238;
  v72 = v239;
  if (v70 == 1)
  {
    sub_1000A1000(v68, &qword_100210CF0);
    v73 = sub_1000B4AC8();
    v74 = objc_msgSend((id)objc_opt_self(BTSystemConfiguration), "isFirstUnlocked");
    if ((_DWORD)v74)
    {
      v75 = v72;
      v76 = v56;
      v77 = sub_100129690();
      v78 = v243;
      v79 = v246;
      if (qword_100210180 != -1)
        swift_once(&qword_100210180, sub_1000DA4F0);
      v80 = v232;
      v81 = sub_1000A0A00(v232, (uint64_t)qword_100218D28);
      v82 = v231;
      v83 = (uint64_t)v230;
      (*(void (**)(char *, uint64_t, uint64_t))(v231 + 16))(v230, v81, v80);
      v84 = sub_100127AD0(v83);
      swift_release(v77);
      (*(void (**)(uint64_t, uint64_t))(v82 + 8))(v83, v80);
      v56 = v76;
      v72 = v75;
      v55 = v234;
    }
    else
    {
      v105 = static os_log_type_t.error.getter(v74);
      v78 = v243;
      v79 = v246;
      if (qword_1002101E0 != -1)
        swift_once(&qword_1002101E0, sub_1001687B0);
      v84 = _swiftEmptyArrayStorage;
      os_log(_:dso:log:_:_:)(v105, &_mh_execute_header, qword_100218DE8, "deviceSupportInformationRecords call failed because in device is in beforeFirstUnlock state", 91, 2, _swiftEmptyArrayStorage);
    }
    swift_release(v73);
    v106 = v84[2];
    if (v106)
    {
      v107 = (uint64_t)v84
           + ((*(unsigned __int8 *)(v72 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v72 + 80));
      v108 = *(_QWORD *)(v72 + 72);
      swift_bridgeObjectRetain(v84);
      v109 = v244;
      while (1)
      {
        sub_1000AE548(v107, v109, type metadata accessor for DeviceSupportInformationRecord);
        v110 = (_QWORD *)(v109 + *(int *)(v78 + 24));
        v111 = v110[1];
        v112 = *v110 == v247 && v111 == v79;
        if (v112 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v110, v111, v247, v79, 0) & 1) != 0)
          break;
        v109 = v244;
        sub_1000AE58C(v244, type metadata accessor for DeviceSupportInformationRecord);
        v107 += v108;
        if (!--v106)
        {
          swift_bridgeObjectRelease(v84);
          v56 = v229;
          goto LABEL_45;
        }
      }
      swift_bridgeObjectRelease(v84);
      v113 = v233;
      sub_1000C6CD0(v244, v233, type metadata accessor for DeviceSupportInformationRecord);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v72 + 56))(v113, 0, 1, v78);
      v56 = v229;
    }
    else
    {
LABEL_45:
      v113 = v233;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v72 + 56))(v233, 1, 1, v78);
    }
    swift_bridgeObjectRelease(v84);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v72 + 48))(v113, 1, v78) == 1)
    {
      sub_1000A1000(v113, &qword_100210CE8);
      v142 = *(void **)&v56[OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_clientQueue];
      v143 = (_QWORD *)swift_allocObject(&unk_1001E78F8, 48, 7);
      v143[2] = v247;
      v143[3] = v79;
      v143[4] = v240;
      v143[5] = v55;
      v253 = sub_1000C692C;
      v254 = v143;
      aBlock = _NSConcreteStackBlock;
      v250 = 1107296256;
      v251 = sub_1000E6A24;
      v252 = &unk_1001E7910;
      v144 = _Block_copy(&aBlock);
      swift_bridgeObjectRetain(v79);
      swift_retain(v55);
      v145 = v142;
      v146 = v220;
      static DispatchQoS.unspecified.getter(v145);
      v248 = _swiftEmptyArrayStorage;
      v147 = sub_1000A0940((unint64_t *)&qword_100211920, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v148 = sub_1000A0980(&qword_100211D00);
      v149 = sub_1000C7224((unint64_t *)&qword_100211930, &qword_100211D00);
      v150 = v236;
      v151 = v148;
      v152 = v222;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v248, v151, v149, v222, v147);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0, v146, v150, v144);

      _Block_release(v144);
      (*(void (**)(char *, uint64_t))(v219 + 8))(v150, v152);
      (*(void (**)(char *, uint64_t))(v221 + 8))(v146, v223);
      return swift_release(v254);
    }
    v153 = v226;
    sub_1000C6CD0(v113, v226, type metadata accessor for DeviceSupportInformationRecord);
    v154 = *(void **)&v56[OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_clientQueue];
    v155 = v228;
    sub_1000AE548(v153, v228, type metadata accessor for DeviceSupportInformationRecord);
    v156 = *(unsigned __int8 *)(v72 + 80);
    v157 = (v156 + 16) & ~v156;
    v158 = (v227 + v157 + 7) & 0xFFFFFFFFFFFFFFF8;
    v159 = swift_allocObject(&unk_1001E7948, v158 + 16, v156 | 7);
    sub_1000C6CD0(v155, v159 + v157, type metadata accessor for DeviceSupportInformationRecord);
    v160 = (uint64_t (**)(void))(v159 + v158);
    *v160 = v240;
    v160[1] = v55;
    v253 = sub_1000C693C;
    v254 = (_QWORD *)v159;
    aBlock = _NSConcreteStackBlock;
    v250 = 1107296256;
    v251 = sub_1000E6A24;
    v252 = &unk_1001E7960;
    v161 = _Block_copy(&aBlock);
    swift_retain(v55);
    v162 = v154;
    v163 = v220;
    static DispatchQoS.unspecified.getter(v162);
    v248 = _swiftEmptyArrayStorage;
    v164 = sub_1000A0940((unint64_t *)&qword_100211920, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v165 = sub_1000A0980(&qword_100211D00);
    v166 = sub_1000C7224((unint64_t *)&qword_100211930, &qword_100211D00);
    v167 = v236;
    v168 = v165;
    v169 = v222;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v248, v168, v166, v222, v164);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v163, v167, v161);

    _Block_release(v161);
    (*(void (**)(char *, uint64_t))(v219 + 8))(v167, v169);
    (*(void (**)(char *, uint64_t))(v221 + 8))(v163, v223);
    v210 = v153;
    v209 = type metadata accessor for DeviceSupportInformationRecord;
LABEL_53:
    sub_1000AE58C(v210, v209);
    return swift_release(v254);
  }
  else
  {
    v85 = v56;
    v86 = sub_1000C6CD0(v68, (uint64_t)v238, type metadata accessor for BTDeferredRecord);
    v87 = *v71;
    v88 = static os_log_type_t.default.getter(v86);
    v89 = qword_100218DE0;
    v90 = swift_allocObject(v214, 72, 7);
    *(_OWORD *)(v90 + 16) = v213;
    v91 = v235;
    sub_1000AE548((uint64_t)v71, v235, type metadata accessor for BTDeferredRecord);
    v92 = String.init<A>(describing:)(v91, v69);
    v93 = v215;
    *(_QWORD *)(v90 + 56) = &type metadata for String;
    *(_QWORD *)(v90 + 64) = v93;
    *(_QWORD *)(v90 + 32) = v92;
    *(_QWORD *)(v90 + 40) = v94;
    if (v87 != 1)
    {
      os_log(_:dso:log:_:_:)(v88, &_mh_execute_header, v89, "Deferred Update DeviceSupportInfo found - %@", 44, 2, v90);
      swift_bridgeObjectRelease(v90);
      v114 = &v71[*(int *)(v69 + 36)];
      v115 = *((_QWORD *)v114 + 1);
      v116 = v85;
      if (v115 >> 60 == 15)
      {
        v125 = *(void **)&v85[OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_clientQueue];
        v126 = v235;
        sub_1000AE548((uint64_t)v71, v235, type metadata accessor for BTDeferredRecord);
        v127 = *(unsigned __int8 *)(v241 + 80);
        v128 = (v127 + 16) & ~v127;
        v129 = (v224 + v128 + 7) & 0xFFFFFFFFFFFFFFF8;
        v130 = swift_allocObject(&unk_1001E7998, v129 + 16, v127 | 7);
        sub_1000C6CD0(v126, v130 + v128, type metadata accessor for BTDeferredRecord);
        v131 = (uint64_t (**)(void))(v130 + v129);
        *v131 = v240;
        v131[1] = v55;
        v253 = sub_1000C6A2C;
        v254 = (_QWORD *)v130;
        aBlock = _NSConcreteStackBlock;
        v250 = 1107296256;
        v251 = sub_1000E6A24;
        v252 = &unk_1001E79B0;
        v132 = _Block_copy(&aBlock);
        swift_retain(v55);
        v133 = v125;
        v134 = v220;
        static DispatchQoS.unspecified.getter(v133);
        v248 = _swiftEmptyArrayStorage;
        v135 = sub_1000A0940((unint64_t *)&qword_100211920, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
        v136 = sub_1000A0980(&qword_100211D00);
        v137 = sub_1000C7224((unint64_t *)&qword_100211930, &qword_100211D00);
        v138 = v71;
        v139 = v236;
        v140 = v136;
        v141 = v222;
        dispatch thunk of SetAlgebra.init<A>(_:)(&v248, v140, v137, v222, v135);
        OS_dispatch_queue.async(group:qos:flags:execute:)(0, v134, v139, v132);

        _Block_release(v132);
        (*(void (**)(char *, uint64_t))(v219 + 8))(v139, v141);
        (*(void (**)(char *, uint64_t))(v221 + 8))(v134, v223);
        v210 = (uint64_t)v138;
        v209 = type metadata accessor for BTDeferredRecord;
      }
      else
      {
        v117 = v55;
        v118 = *(_QWORD *)v114;
        sub_1000A0E74(*(_QWORD *)v114, *((_QWORD *)v114 + 1));
        v119 = objc_autoreleasePoolPush();
        v120 = type metadata accessor for PropertyListDecoder(0);
        swift_allocObject(v120, *(unsigned int *)(v120 + 48), *(unsigned __int16 *)(v120 + 52));
        v121 = PropertyListDecoder.init()();
        v122 = sub_1000A0940(&qword_1002121F0, type metadata accessor for DeviceSupportInformationRecord, (uint64_t)&unk_10018711C);
        v123 = (uint64_t)v217;
        v124 = v243;
        dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(v243, v118, v115, v243, v122);
        swift_release(v121);
        objc_autoreleasePoolPop(v119);
        v188 = v239;
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v239 + 56))(v123, 0, 1, v124);
        v189 = v216;
        sub_1000C6CD0(v123, v216, type metadata accessor for DeviceSupportInformationRecord);
        v190 = *(void **)&v85[OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_clientQueue];
        v191 = v189;
        v192 = v228;
        sub_1000AE548(v191, v228, type metadata accessor for DeviceSupportInformationRecord);
        v193 = *(unsigned __int8 *)(v188 + 80);
        v194 = (v193 + 16) & ~v193;
        v195 = (v227 + v194 + 7) & 0xFFFFFFFFFFFFFFF8;
        v196 = swift_allocObject(&unk_1001E79E8, v195 + 16, v193 | 7);
        sub_1000C6CD0(v192, v196 + v194, type metadata accessor for DeviceSupportInformationRecord);
        v197 = (uint64_t (**)(void))(v196 + v195);
        *v197 = v240;
        v197[1] = v117;
        v253 = sub_1000C6BAC;
        v254 = (_QWORD *)v196;
        aBlock = _NSConcreteStackBlock;
        v250 = 1107296256;
        v251 = sub_1000E6A24;
        v252 = &unk_1001E7A00;
        v198 = _Block_copy(&aBlock);
        v199 = v190;
        v200 = swift_retain(v117);
        v201 = v220;
        static DispatchQoS.unspecified.getter(v200);
        v248 = _swiftEmptyArrayStorage;
        v202 = sub_1000A0940((unint64_t *)&qword_100211920, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
        v203 = v116;
        v204 = sub_1000A0980(&qword_100211D00);
        v205 = sub_1000C7224((unint64_t *)&qword_100211930, &qword_100211D00);
        v206 = v236;
        v207 = v204;
        v208 = v222;
        dispatch thunk of SetAlgebra.init<A>(_:)(&v248, v207, v205, v222, v202);
        OS_dispatch_queue.async(group:qos:flags:execute:)(0, v201, v206, v198);

        sub_1000B2D78(v118, v115);
        _Block_release(v198);

        (*(void (**)(char *, uint64_t))(v219 + 8))(v206, v208);
        (*(void (**)(char *, uint64_t))(v221 + 8))(v201, v223);
        sub_1000AE58C(v216, type metadata accessor for DeviceSupportInformationRecord);
        v209 = type metadata accessor for BTDeferredRecord;
        v210 = (uint64_t)v238;
      }
      goto LABEL_53;
    }
    os_log(_:dso:log:_:_:)(v88, &_mh_execute_header, v89, "DeviceSupportInfo Already deleted found - %@", 44, 2, v90);
    swift_bridgeObjectRelease(v90);
    v95 = v85;
    v96 = sub_1000B4AC8();
    v97 = objc_msgSend((id)objc_opt_self(BTSystemConfiguration), "isFirstUnlocked");
    if ((_DWORD)v97)
    {
      v98 = sub_100129690();
      v99 = v239;
      if (qword_100210180 != -1)
        swift_once(&qword_100210180, sub_1000DA4F0);
      v100 = v232;
      v101 = sub_1000A0A00(v232, (uint64_t)qword_100218D28);
      v102 = v231;
      v103 = (uint64_t)v230;
      (*(void (**)(char *, uint64_t, uint64_t))(v231 + 16))(v230, v101, v100);
      v104 = sub_100127AD0(v103);
      swift_release(v98);
      (*(void (**)(uint64_t, uint64_t))(v102 + 8))(v103, v100);
      v69 = v245;
    }
    else
    {
      v170 = static os_log_type_t.error.getter(v97);
      v99 = v239;
      if (qword_1002101E0 != -1)
        swift_once(&qword_1002101E0, sub_1001687B0);
      v104 = _swiftEmptyArrayStorage;
      os_log(_:dso:log:_:_:)(v170, &_mh_execute_header, qword_100218DE8, "deviceSupportInformationRecords call failed because in device is in beforeFirstUnlock state", 91, 2, _swiftEmptyArrayStorage);
    }
    swift_release(v96);
    v171 = v104[2];
    if (v171)
    {
      v172 = (uint64_t)v104
           + ((*(unsigned __int8 *)(v99 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v99 + 80));
      v173 = &v71[*(int *)(v69 + 28)];
      v174 = *(_QWORD *)(v99 + 72);
      swift_bridgeObjectRetain(v104);
      v175 = v242;
      while (1)
      {
        sub_1000AE548(v172, v175, type metadata accessor for DeviceSupportInformationRecord);
        v176 = (_QWORD *)(v175 + *(int *)(v243 + 24));
        v177 = v176[1];
        v178 = *((_QWORD *)v173 + 1);
        v179 = *v176 == *(_QWORD *)v173 && v177 == v178;
        if (v179 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v176, v177, *(_QWORD *)v173, v178, 0) & 1) != 0)
          break;
        v175 = v242;
        sub_1000AE58C(v242, type metadata accessor for DeviceSupportInformationRecord);
        v172 += v174;
        if (!--v171)
        {
          swift_bridgeObjectRelease(v104);
          goto LABEL_67;
        }
      }
      swift_bridgeObjectRelease(v104);
      v181 = v225;
      sub_1000C6CD0(v242, v225, type metadata accessor for DeviceSupportInformationRecord);
      v180 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v99 + 56);
      v182 = v181;
      v183 = 0;
    }
    else
    {
LABEL_67:
      v180 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v99 + 56);
      v181 = v225;
      v182 = v225;
      v183 = 1;
    }
    v184 = v243;
    v180(v182, v183, 1, v243);
    swift_bridgeObjectRelease(v104);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v99 + 48))(v181, 1, v184) == 1)
    {
      sub_1000A1000(v181, &qword_100210CE8);
    }
    else
    {
      v185 = v181;
      v186 = v218;
      sub_1000C6CD0(v185, v218, type metadata accessor for DeviceSupportInformationRecord);
      v187 = (char *)sub_1000B4AC8();
      sub_10013EB24(v186, v187);
      swift_release(v187);
      sub_1000AE58C(v186, type metadata accessor for DeviceSupportInformationRecord);
    }
    ((void (*)(_QWORD))v240)(0);

    return sub_1000AE58C((uint64_t)v71, type metadata accessor for BTDeferredRecord);
  }
}

uint64_t sub_1000BC98C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v2 = static os_log_type_t.debug.getter(a1);
  if (qword_1002101D8 != -1)
    swift_once(&qword_1002101D8, sub_100168748);
  v3 = qword_100218DE0;
  v4 = sub_1000A0980((uint64_t *)&unk_1002103C0);
  v5 = swift_allocObject(v4, 72, 7);
  *(_OWORD *)(v5 + 16) = xmmword_100184870;
  v11 = a1;
  swift_errorRetain(a1);
  v6 = sub_1000A0980(&qword_100212350);
  v7 = String.init<A>(describing:)(&v11, v6);
  v9 = v8;
  *(_QWORD *)(v5 + 56) = &type metadata for String;
  *(_QWORD *)(v5 + 64) = sub_1000A0DF4();
  *(_QWORD *)(v5 + 32) = v7;
  *(_QWORD *)(v5 + 40) = v9;
  os_log(_:dso:log:_:_:)(v2, &_mh_execute_header, v3, "[Fetch] Removed deleted DeviceSupportInfo from cloud? - %@", 58, 2, v5);
  return swift_bridgeObjectRelease(v5);
}

void sub_1000BCA94(uint64_t a1, void (*a2)(void))
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Class v7;
  uint64_t v8;
  uint64_t v9;
  id v10;

  v3 = static os_log_type_t.default.getter(a1);
  if (qword_1002101D8 != -1)
    swift_once(&qword_1002101D8, sub_100168748);
  v4 = qword_100218DE0;
  v5 = sub_1000A0980((uint64_t *)&unk_1002103C0);
  v6 = swift_allocObject(v5, 72, 7);
  *(_OWORD *)(v6 + 16) = xmmword_100184870;
  v7 = sub_1000DA63C();
  v9 = v8;
  *(_QWORD *)(v6 + 56) = &type metadata for String;
  *(_QWORD *)(v6 + 64) = sub_1000A0DF4();
  *(_QWORD *)(v6 + 32) = v7;
  *(_QWORD *)(v6 + 40) = v9;
  os_log(_:dso:log:_:_:)(v3, &_mh_execute_header, v4, "Constructed BTCloudDeviceSupportInformation - %@", 48, 2, v6);
  swift_bridgeObjectRelease(v6);
  v10 = sub_1000BB014();
  a2();

}

uint64_t sub_1000BCBA0(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v4 = type metadata accessor for BTDeferredRecord(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = static os_log_type_t.default.getter(v7);
  if (qword_1002101D8 != -1)
    swift_once(&qword_1002101D8, sub_100168748);
  v9 = qword_100218DE0;
  v10 = sub_1000A0980((uint64_t *)&unk_1002103C0);
  v11 = swift_allocObject(v10, 72, 7);
  *(_OWORD *)(v11 + 16) = xmmword_100184870;
  sub_1000AE548(a1, (uint64_t)v6, type metadata accessor for BTDeferredRecord);
  v12 = String.init<A>(describing:)(v6, v4);
  v14 = v13;
  *(_QWORD *)(v11 + 56) = &type metadata for String;
  *(_QWORD *)(v11 + 64) = sub_1000A0DF4();
  *(_QWORD *)(v11 + 32) = v12;
  *(_QWORD *)(v11 + 40) = v14;
  os_log(_:dso:log:_:_:)(v8, &_mh_execute_header, v9, "Unable to contruct BTCloudDeviceSupportInformation - %@", 55, 2, v11);
  swift_bridgeObjectRelease(v11);
  return a2(0);
}

uint64_t sub_1000BCCF0(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = static os_log_type_t.debug.getter(a1);
  if (qword_1002101D8 != -1)
    swift_once(&qword_1002101D8, sub_100168748);
  v7 = qword_100218DE0;
  v8 = sub_1000A0980((uint64_t *)&unk_1002103C0);
  v9 = swift_allocObject(v8, 72, 7);
  *(_OWORD *)(v9 + 16) = xmmword_100184870;
  *(_QWORD *)(v9 + 56) = &type metadata for String;
  *(_QWORD *)(v9 + 64) = sub_1000A0DF4();
  *(_QWORD *)(v9 + 32) = a1;
  *(_QWORD *)(v9 + 40) = a2;
  swift_bridgeObjectRetain(a2);
  os_log(_:dso:log:_:_:)(v6, &_mh_execute_header, v7, "Device info not found - %@", 26, 2, v9);
  swift_bridgeObjectRelease(v9);
  return a3(0);
}

void sub_1000BCDE8(uint64_t a1, void (*a2)(void))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  id v11;

  v4 = static os_log_type_t.default.getter(a1);
  if (qword_1002101D8 != -1)
    swift_once(&qword_1002101D8, sub_100168748);
  v5 = qword_100218DE0;
  v6 = sub_1000A0980((uint64_t *)&unk_1002103C0);
  v7 = swift_allocObject(v6, 72, 7);
  *(_OWORD *)(v7 + 16) = xmmword_100184870;
  v8 = (uint64_t *)(a1 + *(int *)(type metadata accessor for DeviceSupportInformationRecord(0) + 24));
  v10 = *v8;
  v9 = v8[1];
  *(_QWORD *)(v7 + 56) = &type metadata for String;
  *(_QWORD *)(v7 + 64) = sub_1000A0DF4();
  *(_QWORD *)(v7 + 32) = v10;
  *(_QWORD *)(v7 + 40) = v9;
  swift_bridgeObjectRetain(v9);
  os_log(_:dso:log:_:_:)(v4, &_mh_execute_header, v5, "Found device info: %@", 21, 2, v7);
  swift_bridgeObjectRelease(v7);
  v11 = sub_1000BB014();
  a2();

}

uint64_t sub_1000BCF20(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_1000C04C4(a1, a2, a3, (uint64_t)&unk_1001E7768, (uint64_t)sub_1000C68B0, (uint64_t)&unk_1001E7780);
}

uint64_t sub_1000BCF3C(uint64_t a1, void (*a2)(void), uint64_t a3, void *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t Strong;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  char *v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  _BYTE *v44;
  char v46;
  void *v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  id v52;
  id v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  id v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  _QWORD *v72;
  uint64_t v73;
  id v74;
  uint64_t v75;
  _QWORD *v76;
  _QWORD *v77;
  char v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  void (*v93)(void);
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  _QWORD aBlock[5];
  _QWORD *v103;
  char v104[32];

  v100 = type metadata accessor for DeviceSupportInformationRecord(0);
  v8 = *(_QWORD *)(v100 - 8);
  __chkstk_darwin(v100);
  v99 = (uint64_t)&v88 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for URL(0);
  v91 = *(_QWORD *)(v10 - 8);
  v92 = v10;
  __chkstk_darwin(v10);
  v90 = (char *)&v88 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1000A0980(&qword_100210CE8);
  __chkstk_darwin(v12);
  v14 = (char *)&v88 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for DispatchWorkItemFlags(0);
  v98 = *(_QWORD **)(v15 - 8);
  __chkstk_darwin(v15);
  v17 = (char *)&v88 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for DispatchQoS(0);
  v96 = *(_QWORD *)(v18 - 8);
  v97 = v18;
  __chkstk_darwin(v18);
  v20 = (char *)&v88 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess(a1 + 16, v104, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(a1 + 16, v21);
  if (!Strong)
  {
    v42 = sub_1000A4CC0();
    v43 = swift_allocError(&type metadata for DeviceManager.DeviceManagerError, v42, 0, 0);
    *v44 = 0;
    a2();
    return swift_errorRelease(v43);
  }
  v88 = v14;
  v89 = v8;
  v94 = a3;
  v95 = (char *)Strong;
  v93 = a2;
  v23 = static os_log_type_t.default.getter(Strong);
  if (qword_1002101D8 != -1)
    swift_once(&qword_1002101D8, sub_100168748);
  v24 = qword_100218DE0;
  v25 = sub_1000A0980((uint64_t *)&unk_1002103C0);
  v26 = swift_allocObject(v25, 72, 7);
  *(_OWORD *)(v26 + 16) = xmmword_100184870;
  v27 = a4;
  v28 = objc_msgSend(v27, "description");
  v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(v28);
  v31 = v30;

  *(_QWORD *)(v26 + 56) = &type metadata for String;
  *(_QWORD *)(v26 + 64) = sub_1000A0DF4();
  *(_QWORD *)(v26 + 32) = v29;
  *(_QWORD *)(v26 + 40) = v31;
  os_log(_:dso:log:_:_:)(v23, &_mh_execute_header, v24, "CloudSync: addDeviceSupportInformation: %@", 42, 2, v26);
  swift_bridgeObjectRelease(v26);
  v32 = objc_msgSend(v27, "bluetoothAddress");
  v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(v32);
  v35 = v34;

  swift_bridgeObjectRelease(v35);
  v36 = HIBYTE(v35) & 0xF;
  if ((v35 & 0x2000000000000000) == 0)
    v36 = v33 & 0xFFFFFFFFFFFFLL;
  v37 = v95;
  if (!v36)
    goto LABEL_12;
  v38 = objc_msgSend(v27, "bluetoothAddress");
  v39 = static String._unconditionallyBridgeFromObjectiveC(_:)(v38);
  v41 = v40;

  if (v39 == 0xD000000000000011 && v41 == 0x80000001001AB220)
  {
    swift_bridgeObjectRelease(0x80000001001AB220);
LABEL_12:
    v47 = *(void **)&v37[OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_clientQueue];
    v48 = (_QWORD *)swift_allocObject(&unk_1001E77B8, 40, 7);
    v49 = (uint64_t)v93;
    v50 = v94;
    v48[2] = v27;
    v48[3] = v49;
    v48[4] = v50;
    aBlock[4] = sub_1000C68C0;
    v103 = v48;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1000E6A24;
    aBlock[3] = &unk_1001E77D0;
    v51 = _Block_copy(aBlock);
    v52 = v27;
    v53 = v47;
    v54 = swift_retain(v50);
    static DispatchQoS.unspecified.getter(v54);
    v101 = _swiftEmptyArrayStorage;
    v55 = sub_1000A0940((unint64_t *)&qword_100211920, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v56 = sub_1000A0980(&qword_100211D00);
    v57 = sub_1000C7224((unint64_t *)&qword_100211930, &qword_100211D00);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v101, v56, v57, v15, v55);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v20, v17, v51);
    _Block_release(v51);

    ((void (*)(char *, uint64_t))v98[1])(v17, v15);
    (*(void (**)(char *, uint64_t))(v96 + 8))(v20, v97);
    v58 = (uint64_t)v103;
    return swift_release(v58);
  }
  v46 = _stringCompareWithSmolCheck(_:_:expecting:)(v39, v41, 0xD000000000000011, 0x80000001001AB220, 0);
  swift_bridgeObjectRelease(v41);
  if ((v46 & 1) != 0)
    goto LABEL_12;
  v59 = sub_1000B4AC8();
  v60 = objc_msgSend((id)objc_opt_self(BTSystemConfiguration), "isFirstUnlocked");
  if ((_DWORD)v60)
  {
    v61 = sub_100129690();
    if (qword_100210180 != -1)
      swift_once(&qword_100210180, sub_1000DA4F0);
    v62 = v92;
    v63 = sub_1000A0A00(v92, (uint64_t)qword_100218D28);
    v65 = (uint64_t)v90;
    v64 = v91;
    (*(void (**)(char *, uint64_t, uint64_t))(v91 + 16))(v90, v63, v62);
    v98 = sub_100127AD0(v65);
    swift_release(v61);
    (*(void (**)(uint64_t, uint64_t))(v64 + 8))(v65, v62);
  }
  else
  {
    v66 = static os_log_type_t.error.getter(v60);
    if (qword_1002101E0 != -1)
      swift_once(&qword_1002101E0, sub_1001687B0);
    v98 = _swiftEmptyArrayStorage;
    os_log(_:dso:log:_:_:)(v66, &_mh_execute_header, qword_100218DE8, "deviceSupportInformationRecords call failed because in device is in beforeFirstUnlock state", 91, 2);
  }
  swift_release(v59);
  v67 = v98[2];
  if (v67)
  {
    v68 = (uint64_t)v98 + ((*(unsigned __int8 *)(v89 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v89 + 80));
    v69 = *(_QWORD *)(v89 + 72);
    swift_bridgeObjectRetain(v98);
    v70 = v99;
    while (1)
    {
      sub_1000AE548(v68, v70, type metadata accessor for DeviceSupportInformationRecord);
      v71 = (uint64_t *)(v70 + *(int *)(v100 + 24));
      v73 = *v71;
      v72 = (_QWORD *)v71[1];
      v74 = objc_msgSend(v27, "bluetoothAddress");
      v75 = static String._unconditionallyBridgeFromObjectiveC(_:)(v74);
      v77 = v76;

      if (v73 == v75 && v72 == v77)
      {
        swift_bridgeObjectRelease(v98);
        goto LABEL_34;
      }
      v79 = _stringCompareWithSmolCheck(_:_:expecting:)(v73, v72, v75, v77, 0);
      swift_bridgeObjectRelease(v77);
      if ((v79 & 1) != 0)
        break;
      v70 = v99;
      sub_1000AE58C(v99, type metadata accessor for DeviceSupportInformationRecord);
      v68 += v69;
      if (!--v67)
      {
        swift_bridgeObjectRelease(v98);
        v80 = 1;
        v37 = v95;
        goto LABEL_31;
      }
    }
    v72 = v98;
LABEL_34:
    v37 = v95;
    swift_bridgeObjectRelease(v72);
    v81 = (uint64_t)v88;
    sub_1000C6CD0(v99, (uint64_t)v88, type metadata accessor for DeviceSupportInformationRecord);
    v80 = 0;
  }
  else
  {
    v80 = 1;
LABEL_31:
    v81 = (uint64_t)v88;
  }
  v82 = v89;
  v83 = v100;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v89 + 56))(v81, v80, 1, v100);
  swift_bridgeObjectRelease(v98);
  v84 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v82 + 48))(v81, 1, v83);
  sub_1000A1000(v81, &qword_100210CE8);
  v85 = sub_1000B4AC8();
  if (v84 != 1)
  {
    swift_unknownObjectWeakInit(aBlock, v37);
    v87 = v94;
    swift_retain(v94);
    sub_10015A2A4(v27, v85, (uint64_t)aBlock, (uint64_t)v93, v87);
    swift_release(v87);

    swift_unknownObjectWeakDestroy(aBlock);
    v58 = v85;
    return swift_release(v58);
  }
  swift_unknownObjectWeakInit(aBlock, v37);
  v86 = v94;
  swift_retain(v94);
  sub_10015A25C(v27, v85, (uint64_t)aBlock, (uint64_t)v93, v86);
  swift_release(v86);

  swift_release(v85);
  return swift_unknownObjectWeakDestroy(aBlock);
}

uint64_t sub_1000BD774(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000C3830(a1, a2, a3, a4, (uint64_t)&unk_1001E7808, (uint64_t)sub_1000C6328, (uint64_t)&unk_1001E7820);
}

uint64_t sub_1000BD790(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000C3830(a1, a2, a3, a4, (uint64_t)&unk_1001E7858, (uint64_t)sub_1000C6328, (uint64_t)&unk_1001E7870);
}

uint64_t sub_1000BD7C8(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_1000C04C4(a1, a2, a3, (uint64_t)&unk_1001E7678, (uint64_t)sub_1000C686C, (uint64_t)&unk_1001E7690);
}

uint64_t sub_1000BD7E4(uint64_t a1, void (*a2)(void), uint64_t a3, void *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t Strong;
  char *v18;
  id v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  char v32;
  uint64_t v33;
  void *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  id v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  id v50;
  id v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void (*v59)(void);
  uint64_t v60;
  _QWORD *v61;
  _QWORD aBlock[5];
  _QWORD *v63;
  char v64[24];

  v8 = type metadata accessor for DispatchWorkItemFlags(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v57 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DispatchQoS(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v57 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  a1 += 16;
  swift_beginAccess(a1, v64, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(a1, v16);
  if (!Strong)
  {
    v28 = sub_1000A4CC0();
    v29 = swift_allocError(&type metadata for DeviceManager.DeviceManagerError, v28, 0, 0);
    *v30 = 0;
    a2();
    return swift_errorRelease(v29);
  }
  v18 = (char *)Strong;
  v57 = v12;
  v58 = v9;
  v59 = a2;
  v60 = a3;
  v19 = objc_msgSend(a4, "bluetoothAddress");
  v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
  v22 = v21;

  swift_bridgeObjectRelease(v22);
  v23 = HIBYTE(v22) & 0xF;
  if ((v22 & 0x2000000000000000) == 0)
    v23 = v20 & 0xFFFFFFFFFFFFLL;
  if (v23)
  {
    v24 = objc_msgSend(a4, "bluetoothAddress");
    v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
    v27 = v26;

    if (v25 == 0xD000000000000011 && v27 == 0x80000001001AB220)
    {
      swift_bridgeObjectRelease(0x80000001001AB220);
    }
    else
    {
      v32 = _stringCompareWithSmolCheck(_:_:expecting:)(v25, v27, 0xD000000000000011, 0x80000001001AB220, 0);
      v33 = swift_bridgeObjectRelease(v27);
      if ((v32 & 1) == 0)
      {
        v46 = static os_log_type_t.default.getter(v33);
        if (qword_1002101D8 != -1)
          swift_once(&qword_1002101D8, sub_100168748);
        v47 = qword_100218DE0;
        v48 = sub_1000A0980((uint64_t *)&unk_1002103C0);
        v49 = swift_allocObject(v48, 72, 7);
        *(_OWORD *)(v49 + 16) = xmmword_100184870;
        v50 = a4;
        v51 = objc_msgSend(v50, "description");
        v52 = static String._unconditionallyBridgeFromObjectiveC(_:)(v51);
        v54 = v53;

        *(_QWORD *)(v49 + 56) = &type metadata for String;
        *(_QWORD *)(v49 + 64) = sub_1000A0DF4();
        *(_QWORD *)(v49 + 32) = v52;
        *(_QWORD *)(v49 + 40) = v54;
        os_log(_:dso:log:_:_:)(v46, &_mh_execute_header, v47, "CloudSync: updateDeviceSupportInformation: %@", 45, 2, v49);
        swift_bridgeObjectRelease(v49);
        v55 = sub_1000B4AC8();
        swift_unknownObjectWeakInit(aBlock, v18);
        v56 = v60;
        swift_retain(v60);
        sub_10015AC98(v50, v55, (uint64_t)aBlock, (uint64_t)v59, v56);
        swift_release(v56);

        swift_unknownObjectWeakDestroy(aBlock);
        v45 = v55;
        return swift_release(v45);
      }
    }
  }
  v34 = *(void **)&v18[OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_clientQueue];
  v35 = (_QWORD *)swift_allocObject(&unk_1001E76C8, 40, 7);
  v36 = (uint64_t)v59;
  v37 = v60;
  v35[2] = a4;
  v35[3] = v36;
  v35[4] = v37;
  aBlock[4] = sub_1000C687C;
  v63 = v35;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000E6A24;
  aBlock[3] = &unk_1001E76E0;
  v38 = _Block_copy(aBlock);
  v39 = v34;
  v40 = a4;
  v41 = swift_retain(v37);
  static DispatchQoS.unspecified.getter(v41);
  v61 = _swiftEmptyArrayStorage;
  v42 = sub_1000A0940((unint64_t *)&qword_100211920, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v43 = sub_1000A0980(&qword_100211D00);
  v44 = sub_1000C7224((unint64_t *)&qword_100211930, &qword_100211D00);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v61, v43, v44, v8, v42);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v15, v11, v38);
  _Block_release(v38);

  (*(void (**)(char *, uint64_t))(v58 + 8))(v11, v8);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v57);
  v45 = (uint64_t)v63;
  return swift_release(v45);
}

uint64_t sub_1000BDC60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000C3830(a1, a2, a3, a4, (uint64_t)&unk_1001E7718, (uint64_t)sub_1000C6328, (uint64_t)&unk_1001E7730);
}

uint64_t sub_1000BDC98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000BF218(a1, a2, a3, a4, (uint64_t)&unk_1001E75D8, (uint64_t)sub_1000C6854, (uint64_t)&unk_1001E75F0);
}

uint64_t sub_1000BDCB4(uint64_t a1, void (*a2)(void), uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t Strong;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  _BYTE v23[24];

  v9 = a1 + 16;
  swift_beginAccess(a1 + 16, v23, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v9, v10);
  if (Strong)
  {
    v12 = (void *)Strong;
    v13 = static os_log_type_t.default.getter(Strong);
    if (qword_1002101D8 != -1)
      swift_once(&qword_1002101D8, sub_100168748);
    v14 = qword_100218DE0;
    v15 = sub_1000A0980((uint64_t *)&unk_1002103C0);
    v16 = swift_allocObject(v15, 72, 7);
    *(_OWORD *)(v16 + 16) = xmmword_100184870;
    *(_QWORD *)(v16 + 56) = &type metadata for String;
    *(_QWORD *)(v16 + 64) = sub_1000A0DF4();
    *(_QWORD *)(v16 + 32) = a4;
    *(_QWORD *)(v16 + 40) = a5;
    swift_bridgeObjectRetain(a5);
    os_log(_:dso:log:_:_:)(v13, &_mh_execute_header, v14, "CloudSync: removeDeviceSupportInformation: %@", 45, 2, v16);
    swift_bridgeObjectRelease(v16);
    v17 = sub_1000B4AC8();
    v18 = swift_allocObject(&unk_1001E6BD8, 24, 7);
    swift_unknownObjectWeakInit(v18 + 16, v12);
    swift_retain(a3);
    sub_10015E90C(a4, a5, 0xD00000000000001ELL, 0x80000001001AA950, v17, v18, (uint64_t)a2, a3);

    swift_release(v17);
    swift_release(v18);
    return swift_release(a3);
  }
  else
  {
    v20 = sub_1000A4CC0();
    v21 = swift_allocError(&type metadata for DeviceManager.DeviceManagerError, v20, 0, 0);
    *v22 = 0;
    a2();
    return swift_errorRelease(v21);
  }
}

uint64_t sub_1000BDE90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000C1450(a1, a2, a3, a4, (uint64_t)&unk_1001E7628, (uint64_t)sub_1000C6328, (uint64_t)&unk_1001E7640);
}

uint64_t sub_1000BDEC8(void *a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD aBlock[5];
  uint64_t v30;

  v9 = type metadata accessor for DispatchWorkItemFlags(0);
  v27 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DispatchQoS(0);
  v25 = *(_QWORD *)(v12 - 8);
  v26 = v12;
  __chkstk_darwin(v12);
  v14 = (char *)&v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *(void **)(v4 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_managerQueue);
  v16 = swift_allocObject(&unk_1001E6BD8, 24, 7);
  swift_unknownObjectWeakInit(v16 + 16, v4);
  v17 = swift_allocObject(&unk_1001E7588, 49, 7);
  *(_QWORD *)(v17 + 16) = v16;
  *(_QWORD *)(v17 + 24) = a3;
  *(_QWORD *)(v17 + 32) = a4;
  *(_QWORD *)(v17 + 40) = a1;
  *(_BYTE *)(v17 + 48) = a2;
  aBlock[4] = sub_1000C6840;
  v30 = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000E6A24;
  aBlock[3] = &unk_1001E75A0;
  v18 = _Block_copy(aBlock);
  v19 = v15;
  swift_retain(v16);
  swift_retain(a4);
  static DispatchQoS.unspecified.getter(a1);
  v28 = _swiftEmptyArrayStorage;
  v20 = sub_1000A0940((unint64_t *)&qword_100211920, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v21 = sub_1000A0980(&qword_100211D00);
  v22 = sub_1000C7224((unint64_t *)&qword_100211930, &qword_100211D00);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v28, v21, v22, v9, v20);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v14, v11, v18);
  _Block_release(v18);

  (*(void (**)(char *, uint64_t))(v27 + 8))(v11, v9);
  (*(void (**)(char *, uint64_t))(v25 + 8))(v14, v26);
  v23 = v30;
  swift_release(v16);
  return swift_release(v23);
}

uint64_t sub_1000BE110(uint64_t a1, uint64_t (*a2)(void), uint64_t a3, void *a4, char a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t Strong;
  void *v12;
  uint64_t v13;
  _BYTE v15[24];

  v9 = a1 + 16;
  swift_beginAccess(a1 + 16, v15, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v9, v10);
  if (!Strong)
    return a2();
  v12 = (void *)Strong;
  v13 = sub_1000B4AC8();
  sub_1001432E4(a4, a5 & 1, (void (*)(uint64_t))a2, a3);

  return swift_release(v13);
}

uint64_t sub_1000BE240(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD aBlock[5];
  uint64_t v30;

  v4 = v3;
  v8 = type metadata accessor for DispatchWorkItemFlags(0);
  v27 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = type metadata accessor for DispatchQoS(0);
  v11 = *(_QWORD *)(v26 - 8);
  __chkstk_darwin(v26);
  v13 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(void **)(v3 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_managerQueue);
  v15 = swift_allocObject(&unk_1001E6BD8, 24, 7);
  swift_unknownObjectWeakInit(v15 + 16, v4);
  v16 = swift_allocObject(&unk_1001E7538, 41, 7);
  *(_QWORD *)(v16 + 16) = v15;
  *(_QWORD *)(v16 + 24) = a2;
  *(_QWORD *)(v16 + 32) = a3;
  *(_BYTE *)(v16 + 40) = a1;
  aBlock[4] = sub_1000C6828;
  v30 = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000E6A24;
  aBlock[3] = &unk_1001E7550;
  v17 = _Block_copy(aBlock);
  v18 = v14;
  swift_retain(v15);
  v19 = swift_retain(a3);
  static DispatchQoS.unspecified.getter(v19);
  v28 = _swiftEmptyArrayStorage;
  v20 = sub_1000A0940((unint64_t *)&qword_100211920, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v21 = sub_1000A0980(&qword_100211D00);
  v22 = sub_1000C7224((unint64_t *)&qword_100211930, &qword_100211D00);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v28, v21, v22, v8, v20);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v13, v10, v17);
  _Block_release(v17);

  (*(void (**)(char *, uint64_t))(v27 + 8))(v10, v8);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v26);
  v23 = v30;
  swift_release(v15);
  return swift_release(v23);
}

uint64_t sub_1000BE484(uint64_t a1, uint64_t (*a2)(void), void *a3, char a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t Strong;
  void *v10;
  uint64_t v11;
  _BYTE v13[24];

  v7 = a1 + 16;
  swift_beginAccess(a1 + 16, v13, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v7, v8);
  if (!Strong)
    return a2();
  v10 = (void *)Strong;
  v11 = sub_1000B4AC8();
  sub_100144F70(a4 & 1, (void (*)(_QWORD))a2, a3);

  return swift_release(v11);
}

uint64_t sub_1000BE590(uint64_t a1, uint64_t a2)
{
  return sub_1000C2FCC(a1, a2, (uint64_t)&unk_1001E74E8, (uint64_t)sub_1000C680C, (uint64_t)&unk_1001E7500);
}

void sub_1000BE5AC(uint64_t a1, void (*a2)(uint64_t, unint64_t))
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t Strong;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE v26[24];

  v4 = sub_1000A0980(&qword_100210CD8);
  __chkstk_darwin(v4);
  v6 = &v26[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  a1 += 16;
  swift_beginAccess(a1, v26, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(a1, v7);
  if (Strong)
  {
    v9 = (void *)Strong;
    v10 = sub_1000B4AC8();
    sub_10012B40C((uint64_t)v6);
    swift_release(v10);
    v11 = type metadata accessor for LegacyMagicPairingSettingsRecords(0);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(v6, 1, v11) == 1)
    {
      v12 = sub_1000A1000((uint64_t)v6, &qword_100210CD8);
      v13 = static os_log_type_t.default.getter(v12);
      if (qword_1002101D8 != -1)
        swift_once(&qword_1002101D8, sub_100168748);
      os_log(_:dso:log:_:_:)(v13, &_mh_execute_header, qword_100218DE0, "No Legacy Magic Pairing Records cached", 38, 2, _swiftEmptyArrayStorage);
      a2(0, 0xF000000000000000);
    }
    else
    {
      v14 = (uint64_t *)&v6[*(int *)(v11 + 20)];
      v15 = *v14;
      v16 = v14[1];
      sub_1000A0E74(*v14, v16);
      v17 = sub_1000AE58C((uint64_t)v6, type metadata accessor for LegacyMagicPairingSettingsRecords);
      v18 = static os_log_type_t.default.getter(v17);
      if (qword_1002101D8 != -1)
        swift_once(&qword_1002101D8, sub_100168748);
      v19 = qword_100218DE0;
      v20 = sub_1000A0980((uint64_t *)&unk_1002103C0);
      v21 = swift_allocObject(v20, 72, 7);
      *(_OWORD *)(v21 + 16) = xmmword_100184870;
      sub_1000A0E74(v15, v16);
      v22 = Data.description.getter(v15, v16);
      v24 = v23;
      sub_1000A103C(v15, v16);
      *(_QWORD *)(v21 + 56) = &type metadata for String;
      *(_QWORD *)(v21 + 64) = sub_1000A0DF4();
      *(_QWORD *)(v21 + 32) = v22;
      *(_QWORD *)(v21 + 40) = v24;
      os_log(_:dso:log:_:_:)(v18, &_mh_execute_header, v19, "Fetched Legacy Magic Pairing Records: %@", 40, 2, v21);
      swift_bridgeObjectRelease(v21);
      sub_1000A0E74(v15, v16);
      a2(v15, v16);
      sub_1000A103C(v15, v16);
      sub_1000A103C(v15, v16);
    }

  }
  else
  {
    a2(0, 0xF000000000000000);
  }
}

uint64_t sub_1000BE884(uint64_t a1, uint64_t a2)
{
  return sub_1000C2FCC(a1, a2, (uint64_t)&unk_1001E7448, (uint64_t)sub_1000C67A8, (uint64_t)&unk_1001E7460);
}

uint64_t sub_1000BE8A0(uint64_t a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t Strong;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v28;
  uint64_t (*v29)(void);
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  void *v39;
  void *v40;
  unint64_t v41;
  _QWORD *v42;
  void *v43;
  id v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t (*v61)(void);
  _QWORD *v62;
  _QWORD aBlock[5];
  _QWORD *v64;
  unint64_t v65;
  char v66[32];

  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v59 = (char *)&v52 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS(0);
  v57 = *(_QWORD *)(v9 - 8);
  v58 = v9;
  __chkstk_darwin(v9);
  v56 = (char *)&v52 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for MagicPairingSettingsRecord(0);
  v55 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v13 = (char *)&v52 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for URL(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v52 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess(a1 + 16, v66, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(a1 + 16, v18);
  if (!Strong)
    return a2();
  v20 = (char *)Strong;
  v60 = a3;
  v61 = a2;
  v54 = v6;
  v21 = static os_log_type_t.default.getter(Strong);
  if (qword_1002101D8 != -1)
    swift_once(&qword_1002101D8, sub_100168748);
  os_log(_:dso:log:_:_:)(v21, &_mh_execute_header, qword_100218DE0, "fetchMagicPairingSettingsRecords", 32, 2, _swiftEmptyArrayStorage);
  v65 = (unint64_t)_swiftEmptyArrayStorage;
  v22 = sub_1000B4AC8();
  v23 = objc_msgSend((id)objc_opt_self(BTSystemConfiguration), "isFirstUnlocked");
  v53 = v7;
  if ((_DWORD)v23)
  {
    v24 = sub_100129690();
    if (qword_100210160 != -1)
      swift_once(&qword_100210160, sub_1000C81B8);
    v25 = sub_1000A0A00(v14, (uint64_t)qword_100218C90);
    (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, v25, v14);
    v26 = sub_100127AF4((uint64_t)v17);
    swift_release(v24);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  }
  else
  {
    v28 = static os_log_type_t.error.getter(v23);
    if (qword_1002101E0 != -1)
      swift_once(&qword_1002101E0, sub_1001687B0);
    v26 = _swiftEmptyArrayStorage;
    os_log(_:dso:log:_:_:)(v28, &_mh_execute_header, qword_100218DE8, "magicPairingSettingsRecords call failed because in device is in beforeFirstUnlock state", 87, 2, _swiftEmptyArrayStorage);
  }
  v30 = v60;
  v29 = v61;
  swift_release(v22);
  v31 = v26[2];
  if (v31)
  {
    v32 = v20;
    v33 = (uint64_t)v26 + ((*(unsigned __int8 *)(v55 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v55 + 80));
    v34 = *(_QWORD *)(v55 + 72);
    do
    {
      sub_1000AE548(v33, (uint64_t)v13, type metadata accessor for MagicPairingSettingsRecord);
      v35 = sub_1000BEDB4();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v35);
      v37 = *(_QWORD *)((v65 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v36 = *(_QWORD *)((v65 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v37 >= v36 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v36 > 1, v37 + 1, 1);
      v38 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v37, v35);
      specialized Array._endMutation()(v38);
      sub_1000AE58C((uint64_t)v13, type metadata accessor for MagicPairingSettingsRecord);
      v33 += v34;
      --v31;
    }
    while (v31);
    swift_bridgeObjectRelease(v26);
    v30 = v60;
    v29 = v61;
    v20 = v32;
  }
  else
  {
    swift_bridgeObjectRelease(v26);
  }
  v39 = v20;
  v40 = *(void **)&v20[OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_clientQueue];
  v41 = v65;
  v42 = (_QWORD *)swift_allocObject(&unk_1001E7498, 40, 7);
  v42[2] = v41;
  v42[3] = v29;
  v42[4] = v30;
  aBlock[4] = sub_1000C67C4;
  v64 = v42;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000E6A24;
  aBlock[3] = &unk_1001E74B0;
  v43 = _Block_copy(aBlock);
  v44 = v40;
  v45 = swift_retain(v30);
  v46 = v56;
  static DispatchQoS.unspecified.getter(v45);
  v62 = _swiftEmptyArrayStorage;
  v47 = sub_1000A0940((unint64_t *)&qword_100211920, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v48 = sub_1000A0980(&qword_100211D00);
  v49 = sub_1000C7224((unint64_t *)&qword_100211930, &qword_100211D00);
  v50 = v59;
  v51 = v54;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v62, v48, v49, v54, v47);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v46, v50, v43);
  _Block_release(v43);

  (*(void (**)(char *, uint64_t))(v53 + 8))(v50, v51);
  (*(void (**)(char *, uint64_t))(v57 + 8))(v46, v58);
  return swift_release(v64);
}

id sub_1000BEDB4()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  NSString v3;
  id v4;
  NSString v5;
  NSString v6;
  Class isa;
  Class v8;
  Class v9;
  Class v10;
  NSString v11;
  NSString v12;
  NSString v13;
  NSString v14;
  Class v15;
  Class v16;
  NSString v17;
  NSString v18;
  NSString v19;
  NSString v20;
  NSString v21;
  NSString v22;
  NSString v23;
  NSString v24;
  NSString v25;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for MagicPairingSettingsRecord(0) + 24) + 8);
  v2 = objc_allocWithZone((Class)BTMagicPairingSettings);
  swift_bridgeObjectRetain(v1);
  v3 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v1);
  v4 = objc_msgSend(v2, "initWithBluetoothAddress:", v3);

  v5 = String._bridgeToObjectiveC()();
  objc_msgSend(v4, "setProductID:", v5);

  v6 = String._bridgeToObjectiveC()();
  objc_msgSend(v4, "setVendorID:", v6);

  isa = Data._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v4, "setMasterKey:", isa);

  v8 = Data._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v4, "setMasterHint:", v8);

  v9 = Data._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v4, "setAccessoryKey:", v9);

  v10 = Data._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v4, "setAccessoryHint:", v10);

  v11 = String._bridgeToObjectiveC()();
  objc_msgSend(v4, "setButtonModes:", v11);

  v12 = String._bridgeToObjectiveC()();
  objc_msgSend(v4, "setColor:", v12);

  v13 = String._bridgeToObjectiveC()();
  objc_msgSend(v4, "setDeviceIDFeatureBitsV1:", v13);

  v14 = String._bridgeToObjectiveC()();
  objc_msgSend(v4, "setDeviceIDFeatureBitsV2:", v14);

  v15 = Data._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v4, "setEncryptionKey:", v15);

  v16 = Data._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v4, "setIrk:", v16);

  v17 = String._bridgeToObjectiveC()();
  objc_msgSend(v4, "setListeningServices:", v17);

  v18 = String._bridgeToObjectiveC()();
  objc_msgSend(v4, "setListeningServicesV2:", v18);

  v19 = String._bridgeToObjectiveC()();
  objc_msgSend(v4, "setOptimizedBatteryCharging:", v19);

  v20 = String._bridgeToObjectiveC()();
  objc_msgSend(v4, "setOptimizedBatteryFullChargeDeadline:", v20);

  v21 = String._bridgeToObjectiveC()();
  objc_msgSend(v4, "setRatchet:", v21);

  v22 = String._bridgeToObjectiveC()();
  objc_msgSend(v4, "setReserved:", v22);

  v23 = String._bridgeToObjectiveC()();
  objc_msgSend(v4, "setSettingsMask:", v23);

  v24 = String._bridgeToObjectiveC()();
  objc_msgSend(v4, "setSupportedServices:", v24);

  v25 = String._bridgeToObjectiveC()();
  objc_msgSend(v4, "setVersion:", v25);

  return v4;
}

uint64_t sub_1000BF1FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000BF218(a1, a2, a3, a4, (uint64_t)&unk_1001E73A8, (uint64_t)sub_1000C677C, (uint64_t)&unk_1001E73C0);
}

uint64_t sub_1000BF218(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  void *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  void *v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD aBlock[5];
  _QWORD *v39;

  v32 = a6;
  v33 = a7;
  v31 = a3;
  v12 = type metadata accessor for DispatchWorkItemFlags(0);
  v36 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v14 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for DispatchQoS(0);
  v34 = *(_QWORD *)(v15 - 8);
  v35 = v15;
  __chkstk_darwin(v15);
  v17 = (char *)&v30 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = *(void **)(v7 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_managerQueue);
  v19 = swift_allocObject(&unk_1001E6BD8, 24, 7);
  swift_unknownObjectWeakInit(v19 + 16, v7);
  v20 = (_QWORD *)swift_allocObject(a5, 56, 7);
  v21 = v31;
  v20[2] = v19;
  v20[3] = v21;
  v20[4] = a4;
  v20[5] = a1;
  v20[6] = a2;
  aBlock[4] = v32;
  v39 = v20;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000E6A24;
  aBlock[3] = v33;
  v22 = _Block_copy(aBlock);
  v23 = v18;
  swift_retain(v19);
  swift_retain(a4);
  v24 = swift_bridgeObjectRetain(a2);
  static DispatchQoS.unspecified.getter(v24);
  v37 = _swiftEmptyArrayStorage;
  v25 = sub_1000A0940((unint64_t *)&qword_100211920, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v26 = sub_1000A0980(&qword_100211D00);
  v27 = sub_1000C7224((unint64_t *)&qword_100211930, &qword_100211D00);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v37, v26, v27, v12, v25);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v17, v14, v22);
  _Block_release(v22);

  (*(void (**)(char *, uint64_t))(v36 + 8))(v14, v12);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v17, v35);
  v28 = v39;
  swift_release(v19);
  return swift_release(v28);
}

uint64_t sub_1000BF464(uint64_t a1, uint64_t (*a2)(void), uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t Strong;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  BOOL v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t (*v53)(void);
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  void *v61;
  void *v62;
  _QWORD *v63;
  void *v64;
  id v65;
  id v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t (*v74)(void);
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  _QWORD *v89;
  _QWORD aBlock[5];
  _QWORD *v91;
  char v92[32];

  v10 = type metadata accessor for DispatchWorkItemFlags(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v85 = (char *)&v73 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for DispatchQoS(0);
  v83 = *(_QWORD *)(v13 - 8);
  v84 = v13;
  __chkstk_darwin(v13);
  v82 = (char *)&v73 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_1000A0980(&qword_100210CD8);
  __chkstk_darwin(v15);
  v81 = (uint64_t)&v73 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v79 = type metadata accessor for URL(0);
  v78 = *(_QWORD *)(v79 - 8);
  __chkstk_darwin(v79);
  v18 = (char *)&v73 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_1000A0980((uint64_t *)&unk_100212190);
  __chkstk_darwin(v19);
  v86 = (uint64_t)&v73 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for MagicPairingSettingsRecord(0);
  v87 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21);
  v23 = (char *)&v73 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  v80 = (uint64_t)&v73 - v25;
  a1 += 16;
  swift_beginAccess(a1, v92, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(a1, v26);
  v88 = (char *)Strong;
  if (!Strong)
    return a2();
  v74 = a2;
  v75 = a3;
  v76 = v11;
  v77 = v10;
  v28 = static os_log_type_t.default.getter(Strong);
  if (qword_1002101D8 != -1)
    swift_once(&qword_1002101D8, sub_100168748);
  v29 = qword_100218DE0;
  v30 = sub_1000A0980((uint64_t *)&unk_1002103C0);
  v31 = swift_allocObject(v30, 72, 7);
  *(_OWORD *)(v31 + 16) = xmmword_100184870;
  *(_QWORD *)(v31 + 56) = &type metadata for String;
  *(_QWORD *)(v31 + 64) = sub_1000A0DF4();
  *(_QWORD *)(v31 + 32) = a4;
  *(_QWORD *)(v31 + 40) = a5;
  swift_bridgeObjectRetain(a5);
  os_log(_:dso:log:_:_:)(v28, &_mh_execute_header, v29, "fetchMagicSettingsRecord: %@", 28, 2, v31);
  swift_bridgeObjectRelease(v31);
  v32 = sub_1000B4AC8();
  v33 = objc_msgSend((id)objc_opt_self(BTSystemConfiguration), "isFirstUnlocked");
  if ((_DWORD)v33)
  {
    v34 = sub_100129690();
    if (qword_100210160 != -1)
      swift_once(&qword_100210160, sub_1000C81B8);
    v35 = v79;
    v36 = sub_1000A0A00(v79, (uint64_t)qword_100218C90);
    v37 = v78;
    (*(void (**)(char *, uint64_t, uint64_t))(v78 + 16))(v18, v36, v35);
    v38 = sub_100127AF4((uint64_t)v18);
    swift_release(v34);
    (*(void (**)(char *, uint64_t))(v37 + 8))(v18, v35);
  }
  else
  {
    v40 = static os_log_type_t.error.getter(v33);
    if (qword_1002101E0 != -1)
      swift_once(&qword_1002101E0, sub_1001687B0);
    v38 = _swiftEmptyArrayStorage;
    os_log(_:dso:log:_:_:)(v40, &_mh_execute_header, qword_100218DE8, "magicPairingSettingsRecords call failed because in device is in beforeFirstUnlock state", 87, 2, _swiftEmptyArrayStorage);
  }
  v41 = v86;
  swift_release(v32);
  v42 = v38[2];
  if (v42)
  {
    v43 = (uint64_t)v38 + ((*(unsigned __int8 *)(v87 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v87 + 80));
    v44 = *(_QWORD *)(v87 + 72);
    swift_bridgeObjectRetain(v38);
    v45 = v77;
    while (1)
    {
      sub_1000AE548(v43, (uint64_t)v23, type metadata accessor for MagicPairingSettingsRecord);
      v46 = &v23[*(int *)(v21 + 24)];
      v47 = *((_QWORD *)v46 + 1);
      v48 = *(_QWORD *)v46 == a4 && v47 == a5;
      if (v48 || (_stringCompareWithSmolCheck(_:_:expecting:)(*(_QWORD *)v46, v47, a4, a5, 0) & 1) != 0)
        break;
      sub_1000AE58C((uint64_t)v23, type metadata accessor for MagicPairingSettingsRecord);
      v43 += v44;
      if (!--v42)
      {
        swift_bridgeObjectRelease(v38);
        v49 = 1;
        v41 = v86;
        goto LABEL_23;
      }
    }
    swift_bridgeObjectRelease(v38);
    v41 = v86;
    sub_1000C6CD0((uint64_t)v23, v86, type metadata accessor for MagicPairingSettingsRecord);
    v49 = 0;
  }
  else
  {
    v49 = 1;
    v45 = v77;
  }
LABEL_23:
  v50 = v87;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v87 + 56))(v41, v49, 1, v21);
  swift_bridgeObjectRelease(v38);
  v51 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v50 + 48))(v41, 1, v21);
  v52 = v75;
  v53 = v74;
  if (v51 == 1)
  {
    sub_1000A1000(v41, (uint64_t *)&unk_100212190);
    v54 = sub_1000B4AC8();
    v55 = v81;
    sub_10012B40C(v81);
    swift_release(v54);
    v56 = type metadata accessor for LegacyMagicPairingSettingsRecords(0);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v56 - 8) + 48))(v55, 1, v56) == 1)
    {
      sub_1000A1000(v55, &qword_100210CD8);
      v57 = 0;
    }
    else
    {
      sub_1000E2648();
      v60 = v59;
      sub_1000AE58C(v55, type metadata accessor for LegacyMagicPairingSettingsRecords);
      swift_bridgeObjectRetain(a5);
      v57 = sub_1000C64EC(v60, a4, a5);
      swift_bridgeObjectRelease(v60);
      swift_bridgeObjectRelease(a5);
    }
  }
  else
  {
    v58 = v80;
    sub_1000C6CD0(v41, v80, type metadata accessor for MagicPairingSettingsRecord);
    v57 = sub_1000BEDB4();
    sub_1000AE58C(v58, type metadata accessor for MagicPairingSettingsRecord);
  }
  v61 = v88;
  v62 = *(void **)&v88[OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_clientQueue];
  v63 = (_QWORD *)swift_allocObject(&unk_1001E73F8, 40, 7);
  v63[2] = v53;
  v63[3] = v52;
  v63[4] = v57;
  aBlock[4] = sub_1000C6328;
  v91 = v63;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000E6A24;
  aBlock[3] = &unk_1001E7410;
  v64 = _Block_copy(aBlock);
  v65 = v57;
  v66 = v62;
  v67 = swift_retain(v52);
  v68 = v82;
  static DispatchQoS.unspecified.getter(v67);
  v89 = _swiftEmptyArrayStorage;
  v69 = sub_1000A0940((unint64_t *)&qword_100211920, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v70 = sub_1000A0980(&qword_100211D00);
  v71 = sub_1000C7224((unint64_t *)&qword_100211930, &qword_100211D00);
  v72 = v85;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v89, v70, v71, v45, v69);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v68, v72, v64);
  _Block_release(v64);

  (*(void (**)(char *, uint64_t))(v76 + 8))(v72, v45);
  (*(void (**)(char *, uint64_t))(v83 + 8))(v68, v84);
  return swift_release(v91);
}

uint64_t sub_1000BFC00(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_1000C04C4(a1, a2, a3, (uint64_t)&unk_1001E7268, (uint64_t)sub_1000C6738, (uint64_t)&unk_1001E7280);
}

uint64_t sub_1000BFC1C(uint64_t a1, void (*a2)(void), uint64_t a3, void *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t Strong;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  char *v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  _BYTE *v44;
  char v46;
  void *v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  id v52;
  id v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  id v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  _QWORD *v72;
  uint64_t v73;
  id v74;
  uint64_t v75;
  _QWORD *v76;
  _QWORD *v77;
  char v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  void (*v93)(void);
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  _QWORD aBlock[5];
  _QWORD *v103;
  char v104[32];

  v100 = type metadata accessor for MagicPairingSettingsRecord(0);
  v8 = *(_QWORD *)(v100 - 8);
  __chkstk_darwin(v100);
  v99 = (uint64_t)&v88 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for URL(0);
  v91 = *(_QWORD *)(v10 - 8);
  v92 = v10;
  __chkstk_darwin(v10);
  v90 = (char *)&v88 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1000A0980((uint64_t *)&unk_100212190);
  __chkstk_darwin(v12);
  v14 = (char *)&v88 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for DispatchWorkItemFlags(0);
  v98 = *(_QWORD **)(v15 - 8);
  __chkstk_darwin(v15);
  v17 = (char *)&v88 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for DispatchQoS(0);
  v96 = *(_QWORD *)(v18 - 8);
  v97 = v18;
  __chkstk_darwin(v18);
  v20 = (char *)&v88 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess(a1 + 16, v104, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(a1 + 16, v21);
  if (!Strong)
  {
    v42 = sub_1000A4CC0();
    v43 = swift_allocError(&type metadata for DeviceManager.DeviceManagerError, v42, 0, 0);
    *v44 = 0;
    a2();
    return swift_errorRelease(v43);
  }
  v88 = v14;
  v89 = v8;
  v94 = a3;
  v95 = (char *)Strong;
  v93 = a2;
  v23 = static os_log_type_t.default.getter(Strong);
  if (qword_1002101D8 != -1)
    swift_once(&qword_1002101D8, sub_100168748);
  v24 = qword_100218DE0;
  v25 = sub_1000A0980((uint64_t *)&unk_1002103C0);
  v26 = swift_allocObject(v25, 72, 7);
  *(_OWORD *)(v26 + 16) = xmmword_100184870;
  v27 = a4;
  v28 = objc_msgSend(v27, "description");
  v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(v28);
  v31 = v30;

  *(_QWORD *)(v26 + 56) = &type metadata for String;
  *(_QWORD *)(v26 + 64) = sub_1000A0DF4();
  *(_QWORD *)(v26 + 32) = v29;
  *(_QWORD *)(v26 + 40) = v31;
  os_log(_:dso:log:_:_:)(v23, &_mh_execute_header, v24, "CloudSync: addDeviceMagicSettings: %@", 37, 2, v26);
  swift_bridgeObjectRelease(v26);
  v32 = objc_msgSend(v27, "bluetoothAddress");
  v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(v32);
  v35 = v34;

  swift_bridgeObjectRelease(v35);
  v36 = HIBYTE(v35) & 0xF;
  if ((v35 & 0x2000000000000000) == 0)
    v36 = v33 & 0xFFFFFFFFFFFFLL;
  v37 = v95;
  if (!v36)
    goto LABEL_12;
  v38 = objc_msgSend(v27, "bluetoothAddress");
  v39 = static String._unconditionallyBridgeFromObjectiveC(_:)(v38);
  v41 = v40;

  if (v39 == 0xD000000000000011 && v41 == 0x80000001001AB220)
  {
    swift_bridgeObjectRelease(0x80000001001AB220);
LABEL_12:
    v47 = *(void **)&v37[OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_clientQueue];
    v48 = (_QWORD *)swift_allocObject(&unk_1001E72B8, 40, 7);
    v49 = (uint64_t)v93;
    v50 = v94;
    v48[2] = v27;
    v48[3] = v49;
    v48[4] = v50;
    aBlock[4] = sub_1000C6748;
    v103 = v48;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1000E6A24;
    aBlock[3] = &unk_1001E72D0;
    v51 = _Block_copy(aBlock);
    v52 = v27;
    v53 = v47;
    v54 = swift_retain(v50);
    static DispatchQoS.unspecified.getter(v54);
    v101 = _swiftEmptyArrayStorage;
    v55 = sub_1000A0940((unint64_t *)&qword_100211920, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v56 = sub_1000A0980(&qword_100211D00);
    v57 = sub_1000C7224((unint64_t *)&qword_100211930, &qword_100211D00);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v101, v56, v57, v15, v55);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v20, v17, v51);
    _Block_release(v51);

    ((void (*)(char *, uint64_t))v98[1])(v17, v15);
    (*(void (**)(char *, uint64_t))(v96 + 8))(v20, v97);
    v58 = (uint64_t)v103;
    return swift_release(v58);
  }
  v46 = _stringCompareWithSmolCheck(_:_:expecting:)(v39, v41, 0xD000000000000011, 0x80000001001AB220, 0);
  swift_bridgeObjectRelease(v41);
  if ((v46 & 1) != 0)
    goto LABEL_12;
  v59 = sub_1000B4AC8();
  v60 = objc_msgSend((id)objc_opt_self(BTSystemConfiguration), "isFirstUnlocked");
  if ((_DWORD)v60)
  {
    v61 = sub_100129690();
    if (qword_100210160 != -1)
      swift_once(&qword_100210160, sub_1000C81B8);
    v62 = v92;
    v63 = sub_1000A0A00(v92, (uint64_t)qword_100218C90);
    v65 = (uint64_t)v90;
    v64 = v91;
    (*(void (**)(char *, uint64_t, uint64_t))(v91 + 16))(v90, v63, v62);
    v98 = sub_100127AF4(v65);
    swift_release(v61);
    (*(void (**)(uint64_t, uint64_t))(v64 + 8))(v65, v62);
  }
  else
  {
    v66 = static os_log_type_t.error.getter(v60);
    if (qword_1002101E0 != -1)
      swift_once(&qword_1002101E0, sub_1001687B0);
    v98 = _swiftEmptyArrayStorage;
    os_log(_:dso:log:_:_:)(v66, &_mh_execute_header, qword_100218DE8, "magicPairingSettingsRecords call failed because in device is in beforeFirstUnlock state", 87, 2);
  }
  swift_release(v59);
  v67 = v98[2];
  if (v67)
  {
    v68 = (uint64_t)v98 + ((*(unsigned __int8 *)(v89 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v89 + 80));
    v69 = *(_QWORD *)(v89 + 72);
    swift_bridgeObjectRetain(v98);
    v70 = v99;
    while (1)
    {
      sub_1000AE548(v68, v70, type metadata accessor for MagicPairingSettingsRecord);
      v71 = (uint64_t *)(v70 + *(int *)(v100 + 24));
      v73 = *v71;
      v72 = (_QWORD *)v71[1];
      v74 = objc_msgSend(v27, "bluetoothAddress");
      v75 = static String._unconditionallyBridgeFromObjectiveC(_:)(v74);
      v77 = v76;

      if (v73 == v75 && v72 == v77)
      {
        swift_bridgeObjectRelease(v98);
        goto LABEL_34;
      }
      v79 = _stringCompareWithSmolCheck(_:_:expecting:)(v73, v72, v75, v77, 0);
      swift_bridgeObjectRelease(v77);
      if ((v79 & 1) != 0)
        break;
      v70 = v99;
      sub_1000AE58C(v99, type metadata accessor for MagicPairingSettingsRecord);
      v68 += v69;
      if (!--v67)
      {
        swift_bridgeObjectRelease(v98);
        v80 = 1;
        v37 = v95;
        goto LABEL_31;
      }
    }
    v72 = v98;
LABEL_34:
    v37 = v95;
    swift_bridgeObjectRelease(v72);
    v81 = (uint64_t)v88;
    sub_1000C6CD0(v99, (uint64_t)v88, type metadata accessor for MagicPairingSettingsRecord);
    v80 = 0;
  }
  else
  {
    v80 = 1;
LABEL_31:
    v81 = (uint64_t)v88;
  }
  v82 = v89;
  v83 = v100;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v89 + 56))(v81, v80, 1, v100);
  swift_bridgeObjectRelease(v98);
  v84 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v82 + 48))(v81, 1, v83);
  sub_1000A1000(v81, (uint64_t *)&unk_100212190);
  v85 = sub_1000B4AC8();
  if (v84 != 1)
  {
    swift_unknownObjectWeakInit(aBlock, v37);
    v87 = v94;
    swift_retain(v94);
    sub_10015ECD4(v27, v85, (uint64_t)aBlock, (uint64_t)v93, v87);
    swift_release(v87);

    swift_unknownObjectWeakDestroy(aBlock);
    v58 = v85;
    return swift_release(v58);
  }
  swift_unknownObjectWeakInit(aBlock, v37);
  v86 = v94;
  swift_retain(v94);
  sub_10015EC8C(v27, v85, (uint64_t)aBlock, (uint64_t)v93, v86);
  swift_release(v86);

  swift_release(v85);
  return swift_unknownObjectWeakDestroy(aBlock);
}

uint64_t sub_1000C0454(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000C3830(a1, a2, a3, a4, (uint64_t)&unk_1001E7308, (uint64_t)sub_1000C6328, (uint64_t)&unk_1001E7320);
}

uint64_t sub_1000C0470(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000C3830(a1, a2, a3, a4, (uint64_t)&unk_1001E7358, (uint64_t)sub_1000C6328, (uint64_t)&unk_1001E7370);
}

uint64_t sub_1000C04A8(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_1000C04C4(a1, a2, a3, (uint64_t)&unk_1001E7178, (uint64_t)sub_1000C66F4, (uint64_t)&unk_1001E7190);
}

uint64_t sub_1000C04C4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  void *v17;
  uint64_t v18;
  _QWORD *v19;
  void *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD aBlock[5];
  _QWORD *v34;

  v27 = a5;
  v28 = a6;
  v11 = type metadata accessor for DispatchWorkItemFlags(0);
  v31 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for DispatchQoS(0);
  v29 = *(_QWORD *)(v14 - 8);
  v30 = v14;
  __chkstk_darwin(v14);
  v16 = (char *)&v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *(void **)(v6 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_managerQueue);
  v18 = swift_allocObject(&unk_1001E6BD8, 24, 7);
  swift_unknownObjectWeakInit(v18 + 16, v6);
  v19 = (_QWORD *)swift_allocObject(a4, 48, 7);
  v19[2] = v18;
  v19[3] = a2;
  v19[4] = a3;
  v19[5] = a1;
  aBlock[4] = v27;
  v34 = v19;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000E6A24;
  aBlock[3] = v28;
  v20 = _Block_copy(aBlock);
  v21 = v17;
  swift_retain(v18);
  swift_retain(a3);
  static DispatchQoS.unspecified.getter(a1);
  v32 = _swiftEmptyArrayStorage;
  v22 = sub_1000A0940((unint64_t *)&qword_100211920, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v23 = sub_1000A0980(&qword_100211D00);
  v24 = sub_1000C7224((unint64_t *)&qword_100211930, &qword_100211D00);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v32, v23, v24, v11, v22);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v16, v13, v20);
  _Block_release(v20);

  (*(void (**)(char *, uint64_t))(v31 + 8))(v13, v11);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v16, v30);
  v25 = v34;
  swift_release(v18);
  return swift_release(v25);
}

uint64_t sub_1000C0700(uint64_t a1, void (*a2)(void), uint64_t a3, void *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t Strong;
  char *v18;
  id v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  char v32;
  uint64_t v33;
  void *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  id v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  id v50;
  id v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void (*v59)(void);
  uint64_t v60;
  _QWORD *v61;
  _QWORD aBlock[5];
  _QWORD *v63;
  char v64[24];

  v8 = type metadata accessor for DispatchWorkItemFlags(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v57 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DispatchQoS(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v57 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  a1 += 16;
  swift_beginAccess(a1, v64, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(a1, v16);
  if (!Strong)
  {
    v28 = sub_1000A4CC0();
    v29 = swift_allocError(&type metadata for DeviceManager.DeviceManagerError, v28, 0, 0);
    *v30 = 0;
    a2();
    return swift_errorRelease(v29);
  }
  v18 = (char *)Strong;
  v57 = v12;
  v58 = v9;
  v59 = a2;
  v60 = a3;
  v19 = objc_msgSend(a4, "bluetoothAddress");
  v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
  v22 = v21;

  swift_bridgeObjectRelease(v22);
  v23 = HIBYTE(v22) & 0xF;
  if ((v22 & 0x2000000000000000) == 0)
    v23 = v20 & 0xFFFFFFFFFFFFLL;
  if (v23)
  {
    v24 = objc_msgSend(a4, "bluetoothAddress");
    v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
    v27 = v26;

    if (v25 == 0xD000000000000011 && v27 == 0x80000001001AB220)
    {
      swift_bridgeObjectRelease(0x80000001001AB220);
    }
    else
    {
      v32 = _stringCompareWithSmolCheck(_:_:expecting:)(v25, v27, 0xD000000000000011, 0x80000001001AB220, 0);
      v33 = swift_bridgeObjectRelease(v27);
      if ((v32 & 1) == 0)
      {
        v46 = static os_log_type_t.default.getter(v33);
        if (qword_1002101D8 != -1)
          swift_once(&qword_1002101D8, sub_100168748);
        v47 = qword_100218DE0;
        v48 = sub_1000A0980((uint64_t *)&unk_1002103C0);
        v49 = swift_allocObject(v48, 72, 7);
        *(_OWORD *)(v49 + 16) = xmmword_100184870;
        v50 = a4;
        v51 = objc_msgSend(v50, "description");
        v52 = static String._unconditionallyBridgeFromObjectiveC(_:)(v51);
        v54 = v53;

        *(_QWORD *)(v49 + 56) = &type metadata for String;
        *(_QWORD *)(v49 + 64) = sub_1000A0DF4();
        *(_QWORD *)(v49 + 32) = v52;
        *(_QWORD *)(v49 + 40) = v54;
        os_log(_:dso:log:_:_:)(v46, &_mh_execute_header, v47, "CloudSync: updateDeviceMagicSettings: %@", 40, 2, v49);
        swift_bridgeObjectRelease(v49);
        v55 = sub_1000B4AC8();
        swift_unknownObjectWeakInit(aBlock, v18);
        v56 = v60;
        swift_retain(v60);
        sub_10015FB7C(v50, v55, (uint64_t)aBlock, (uint64_t)v59, v56);
        swift_release(v56);

        swift_unknownObjectWeakDestroy(aBlock);
        v45 = v55;
        return swift_release(v45);
      }
    }
  }
  v34 = *(void **)&v18[OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_clientQueue];
  v35 = (_QWORD *)swift_allocObject(&unk_1001E71C8, 40, 7);
  v36 = (uint64_t)v59;
  v37 = v60;
  v35[2] = a4;
  v35[3] = v36;
  v35[4] = v37;
  aBlock[4] = sub_1000C6704;
  v63 = v35;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000E6A24;
  aBlock[3] = &unk_1001E71E0;
  v38 = _Block_copy(aBlock);
  v39 = v34;
  v40 = a4;
  v41 = swift_retain(v37);
  static DispatchQoS.unspecified.getter(v41);
  v61 = _swiftEmptyArrayStorage;
  v42 = sub_1000A0940((unint64_t *)&qword_100211920, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v43 = sub_1000A0980(&qword_100211D00);
  v44 = sub_1000C7224((unint64_t *)&qword_100211930, &qword_100211D00);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v61, v43, v44, v8, v42);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v15, v11, v38);
  _Block_release(v38);

  (*(void (**)(char *, uint64_t))(v58 + 8))(v11, v8);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v57);
  v45 = (uint64_t)v63;
  return swift_release(v45);
}

uint64_t sub_1000C0B7C(void *a1, void (*a2)(void), uint64_t a3, const char *a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  id v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _BYTE *v23;

  v7 = static os_log_type_t.error.getter(a1);
  if (qword_1002101D8 != -1)
    swift_once(&qword_1002101D8, sub_100168748);
  v8 = qword_100218DE0;
  v9 = sub_1000A0980((uint64_t *)&unk_1002103C0);
  v10 = swift_allocObject(v9, 112, 7);
  *(_OWORD *)(v10 + 16) = xmmword_1001858F0;
  v11 = objc_msgSend(a1, "bluetoothAddress");
  v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
  v14 = v13;

  *(_QWORD *)(v10 + 56) = &type metadata for String;
  v15 = sub_1000A0DF4();
  *(_QWORD *)(v10 + 64) = v15;
  *(_QWORD *)(v10 + 32) = v12;
  *(_QWORD *)(v10 + 40) = v14;
  v16 = a1;
  v17 = objc_msgSend(v16, "description");
  v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
  v20 = v19;

  *(_QWORD *)(v10 + 96) = &type metadata for String;
  *(_QWORD *)(v10 + 104) = v15;
  *(_QWORD *)(v10 + 72) = v18;
  *(_QWORD *)(v10 + 80) = v20;
  os_log(_:dso:log:_:_:)(v7, &_mh_execute_header, v8, a4, a5, 2, v10);
  swift_bridgeObjectRelease(v10);
  v21 = sub_1000A4CC0();
  v22 = swift_allocError(&type metadata for DeviceManager.DeviceManagerError, v21, 0, 0);
  *v23 = 1;
  a2();
  return swift_errorRelease(v22);
}

uint64_t sub_1000C0D14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000C3830(a1, a2, a3, a4, (uint64_t)&unk_1001E7218, (uint64_t)sub_1000C6328, (uint64_t)&unk_1001E7230);
}

uint64_t sub_1000C0D4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v4;
  char *v5;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  NSString v13;
  uint64_t v14;
  void *v15;
  _QWORD *v16;
  NSString v17;
  uint64_t v18;
  void *v19;
  _QWORD *v20;
  void *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  void **aBlock;
  uint64_t v44;
  void *v45;
  void *v46;
  void *v47;
  _QWORD *v48;

  v5 = v4;
  v37 = a3;
  v38 = a4;
  v36 = type metadata accessor for DispatchWorkItemFlags(0);
  v41 = *(_QWORD *)(v36 - 8);
  __chkstk_darwin(v36);
  v9 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS(0);
  v39 = *(_QWORD *)(v10 - 8);
  v40 = v10;
  __chkstk_darwin(v10);
  v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = String._bridgeToObjectiveC()();
  v14 = swift_allocObject(&unk_1001E7038, 32, 7);
  *(_QWORD *)(v14 + 16) = a1;
  *(_QWORD *)(v14 + 24) = a2;
  v47 = sub_1000C6494;
  v48 = (_QWORD *)v14;
  aBlock = _NSConcreteStackBlock;
  v44 = 1107296256;
  v45 = sub_1000C10C8;
  v46 = &unk_1001E7050;
  v15 = _Block_copy(&aBlock);
  v16 = v48;
  swift_bridgeObjectRetain(a2);
  swift_release(v16);
  objc_msgSend(v5, "removeAADeviceRecordWithBluetoothAddress:completion:", v13, v15);
  _Block_release(v15);

  v17 = String._bridgeToObjectiveC()();
  v18 = swift_allocObject(&unk_1001E7088, 32, 7);
  *(_QWORD *)(v18 + 16) = a1;
  *(_QWORD *)(v18 + 24) = a2;
  v47 = sub_1000C64B8;
  v48 = (_QWORD *)v18;
  aBlock = _NSConcreteStackBlock;
  v44 = 1107296256;
  v45 = sub_1000C10C8;
  v46 = &unk_1001E70A0;
  v19 = _Block_copy(&aBlock);
  v20 = v48;
  swift_bridgeObjectRetain(a2);
  swift_release(v20);
  objc_msgSend(v5, "removeAAProxCardsInfoWithBluetoothAddress:completion:", v17, v19);
  _Block_release(v19);

  v21 = *(void **)&v5[OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_managerQueue];
  v22 = swift_allocObject(&unk_1001E6BD8, 24, 7);
  swift_unknownObjectWeakInit(v22 + 16, v5);
  v23 = (_QWORD *)swift_allocObject(&unk_1001E70D8, 56, 7);
  v24 = v37;
  v25 = v38;
  v23[2] = v22;
  v23[3] = v24;
  v23[4] = v25;
  v23[5] = a1;
  v23[6] = a2;
  v47 = sub_1000C64E0;
  v48 = v23;
  aBlock = _NSConcreteStackBlock;
  v44 = 1107296256;
  v45 = sub_1000E6A24;
  v46 = &unk_1001E70F0;
  v26 = _Block_copy(&aBlock);
  swift_bridgeObjectRetain(a2);
  v27 = v21;
  swift_retain(v22);
  v28 = swift_retain(v25);
  static DispatchQoS.unspecified.getter(v28);
  v42 = _swiftEmptyArrayStorage;
  v29 = sub_1000A0940((unint64_t *)&qword_100211920, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v30 = sub_1000A0980(&qword_100211D00);
  v31 = sub_1000C7224((unint64_t *)&qword_100211930, &qword_100211D00);
  v32 = v36;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v42, v30, v31, v36, v29);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v12, v9, v26);
  _Block_release(v26);

  (*(void (**)(char *, uint64_t))(v41 + 8))(v9, v32);
  (*(void (**)(char *, uint64_t))(v39 + 8))(v12, v40);
  v33 = v48;
  swift_release(v22);
  return swift_release(v33);
}

void sub_1000C10C8(uint64_t a1, void *a2)
{
  uint64_t v3;
  void (*v4)(void *);
  id v5;

  v4 = *(void (**)(void *))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v5 = a2;
  v4(a2);
  swift_release(v3);

}

uint64_t sub_1000C111C(uint64_t result, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (result)
  {
    v9 = result;
    v10 = swift_errorRetain(result);
    v11 = static os_log_type_t.error.getter(v10);
    if (qword_1002101D8 != -1)
      swift_once(&qword_1002101D8, sub_100168748);
    v12 = qword_100218DE0;
    v13 = sub_1000A0980((uint64_t *)&unk_1002103C0);
    v14 = swift_allocObject(v13, 112, 7);
    *(_OWORD *)(v14 + 16) = xmmword_1001858F0;
    *(_QWORD *)(v14 + 56) = &type metadata for String;
    *(_QWORD *)(v14 + 64) = sub_1000A0DF4();
    *(_QWORD *)(v14 + 32) = a2;
    *(_QWORD *)(v14 + 40) = a3;
    swift_bridgeObjectRetain(a3);
    v15 = _convertErrorToNSError(_:)(v9);
    *(_QWORD *)(v14 + 96) = sub_1000AB31C(0, (unint64_t *)&qword_100210720, NSError_ptr);
    *(_QWORD *)(v14 + 104) = sub_1000C6694();
    *(_QWORD *)(v14 + 72) = v15;
    os_log(_:dso:log:_:_:)(v11, &_mh_execute_header, v12, a4, a5, 2, v14);
    swift_bridgeObjectRelease(v14);
    return swift_errorRelease(v9);
  }
  return result;
}

uint64_t sub_1000C1250(uint64_t a1, void (*a2)(void), uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t Strong;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  _BYTE v23[24];

  v9 = a1 + 16;
  swift_beginAccess(a1 + 16, v23, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v9, v10);
  if (Strong)
  {
    v12 = (void *)Strong;
    v13 = static os_log_type_t.default.getter(Strong);
    if (qword_1002101D8 != -1)
      swift_once(&qword_1002101D8, sub_100168748);
    v14 = qword_100218DE0;
    v15 = sub_1000A0980((uint64_t *)&unk_1002103C0);
    v16 = swift_allocObject(v15, 72, 7);
    *(_OWORD *)(v16 + 16) = xmmword_100184870;
    *(_QWORD *)(v16 + 56) = &type metadata for String;
    *(_QWORD *)(v16 + 64) = sub_1000A0DF4();
    *(_QWORD *)(v16 + 32) = a4;
    *(_QWORD *)(v16 + 40) = a5;
    swift_bridgeObjectRetain(a5);
    os_log(_:dso:log:_:_:)(v13, &_mh_execute_header, v14, "CloudSync: removeDeviceMagicSettings: %@", 40, 2, v16);
    swift_bridgeObjectRelease(v16);
    v17 = sub_1000B4AC8();
    v18 = swift_allocObject(&unk_1001E6BD8, 24, 7);
    swift_unknownObjectWeakInit(v18 + 16, v12);
    swift_retain(a3);
    sub_1001637F0(a4, a5, 0x746553636967614DLL, 0xED000073676E6974, v17, v18, (uint64_t)a2, a3);

    swift_release(v17);
    swift_release(v18);
    return swift_release(a3);
  }
  else
  {
    v20 = sub_1000A4CC0();
    v21 = swift_allocError(&type metadata for DeviceManager.DeviceManagerError, v20, 0, 0);
    *v22 = 0;
    a2();
    return swift_errorRelease(v21);
  }
}

uint64_t sub_1000C1434(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000C1450(a1, a2, a3, a4, (uint64_t)&unk_1001E7128, (uint64_t)sub_1000C6328, (uint64_t)&unk_1001E7140);
}

uint64_t sub_1000C1450(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t result;
  void *v20;
  id v21;
  _QWORD *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD aBlock[5];
  _QWORD *v34;
  _BYTE v35[24];

  v28 = a6;
  v29 = a7;
  v12 = type metadata accessor for DispatchWorkItemFlags(0);
  v31 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v14 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = type metadata accessor for DispatchQoS(0);
  v15 = *(_QWORD *)(v30 - 8);
  __chkstk_darwin(v30);
  v17 = (char *)&v28 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  a2 += 16;
  swift_beginAccess(a2, v35, 0, 0);
  result = swift_unknownObjectWeakLoadStrong(a2, v18);
  if (result)
  {
    v20 = (void *)result;
    v21 = *(id *)(result + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_clientQueue);

    v22 = (_QWORD *)swift_allocObject(a5, 40, 7);
    v22[2] = a3;
    v22[3] = a4;
    v22[4] = a1;
    aBlock[4] = v28;
    v34 = v22;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1000E6A24;
    aBlock[3] = v29;
    v23 = _Block_copy(aBlock);
    swift_retain(a4);
    v24 = swift_errorRetain(a1);
    static DispatchQoS.unspecified.getter(v24);
    v32 = _swiftEmptyArrayStorage;
    v25 = sub_1000A0940((unint64_t *)&qword_100211920, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v26 = sub_1000A0980(&qword_100211D00);
    v27 = sub_1000C7224((unint64_t *)&qword_100211930, &qword_100211D00);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v32, v26, v27, v12, v25);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v17, v14, v23);
    _Block_release(v23);

    (*(void (**)(char *, uint64_t))(v31 + 8))(v14, v12);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v30);
    return swift_release(v34);
  }
  return result;
}

uint64_t sub_1000C16A4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v28[2];

  v28[1] = a1;
  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)v28 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for URL(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v11 = (char *)v28 - v10;
  __chkstk_darwin(v12);
  v14 = (char *)v28 - v13;
  type metadata accessor for DeviceStore(0);
  sub_100110DD4((uint64_t)v11);
  if (qword_100210140 != -1)
    swift_once(&qword_100210140, sub_1000AB9F4);
  v15 = sub_1000A0A00(v5, (uint64_t)qword_100218C50);
  v16.n128_f64[0] = (*(double (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v15, v5);
  v17 = URL.path.getter(v16);
  v19 = v18;
  v20 = *(void (**)(char *, uint64_t))(v6 + 8);
  v20(v8, v5);
  URL.appendingPathComponent(_:isDirectory:)(v17, v19, 1);
  swift_bridgeObjectRelease(v19);
  v20(v11, v5);
  if (qword_100210128 != -1)
    swift_once(&qword_100210128, sub_1000A29E4);
  v21 = qword_100218BF8;
  swift_bridgeObjectRetain(qword_100218BF8);
  sub_1000A2A5C();
  v22 = swift_bridgeObjectRelease(v21);
  v23 = UUID.init()(v22);
  v24 = UUID.uuidString.getter(v23);
  v26 = v25;
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  URL.appendingPathComponent(_:)(v24);
  swift_bridgeObjectRelease(v26);
  URL.appendingPathExtension(_:)(0x676E6967617473, 0xE700000000000000);
  v20(v11, v5);
  return ((uint64_t (*)(char *, uint64_t))v20)(v14, v5);
}

uint64_t sub_1000C1994(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  void *v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD aBlock[5];
  char *v38;

  v4 = v3;
  v31 = a1;
  v32 = a2;
  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v35 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS(0);
  v33 = *(_QWORD *)(v9 - 8);
  v34 = v9;
  __chkstk_darwin(v9);
  v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for URL(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(_QWORD *)(v13 + 64);
  __chkstk_darwin(v12);
  v15 = (char *)&v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = *(id *)(v4 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_managerQueue);
  v16 = swift_allocObject(&unk_1001E6BD8, 24, 7);
  swift_unknownObjectWeakInit(v16 + 16, v4);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, v31, v12);
  v17 = *(unsigned __int8 *)(v13 + 80);
  v18 = (v17 + 40) & ~v17;
  v19 = (char *)swift_allocObject(&unk_1001E6FE8, v18 + v14, v17 | 7);
  v20 = v32;
  *((_QWORD *)v19 + 2) = v16;
  *((_QWORD *)v19 + 3) = v20;
  *((_QWORD *)v19 + 4) = a3;
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(&v19[v18], v15, v12);
  aBlock[4] = sub_1000C643C;
  v38 = v19;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000E6A24;
  aBlock[3] = &unk_1001E7000;
  v21 = _Block_copy(aBlock);
  v22 = v30;
  swift_retain(v16);
  v23 = swift_retain(a3);
  static DispatchQoS.unspecified.getter(v23);
  v36 = _swiftEmptyArrayStorage;
  v24 = sub_1000A0940((unint64_t *)&qword_100211920, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v25 = sub_1000A0980(&qword_100211D00);
  v26 = sub_1000C7224((unint64_t *)&qword_100211930, &qword_100211D00);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v36, v25, v26, v6, v24);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v11, v8, v21);
  _Block_release(v21);

  (*(void (**)(char *, uint64_t))(v35 + 8))(v8, v6);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v11, v34);
  v27 = v38;
  swift_release(v16);
  return swift_release(v27);
}

uint64_t sub_1000C1C4C(uint64_t a1, void (*a2)(void), uint64_t a3, char *a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t Strong;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v30;
  uint64_t v31;
  _BYTE *v32;
  uint64_t v33;
  _BYTE v34[24];

  v8 = sub_1000A0980(&qword_100212230);
  __chkstk_darwin(v8);
  v10 = &v34[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  a1 += 16;
  swift_beginAccess(a1, v34, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(a1, v11);
  if (Strong)
  {
    v13 = (void *)Strong;
    HIDWORD(v33) = static os_log_type_t.default.getter(Strong);
    if (qword_1002101D8 != -1)
      swift_once(&qword_1002101D8, sub_100168748);
    v14 = qword_100218DE0;
    v15 = sub_1000A0980((uint64_t *)&unk_1002103C0);
    v16 = swift_allocObject(v15, 112, 7);
    *(_OWORD *)(v16 + 16) = xmmword_1001858F0;
    v17 = sub_1000B4AC8();
    sub_10012B62C((uint64_t)v10);
    swift_release(v17);
    v18 = type metadata accessor for SoundProfileRecord(0);
    v19 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 48))(v10, 1, v18);
    sub_1000A1000((uint64_t)v10, &qword_100212230);
    v20 = sub_1000A0DF4();
    v21 = v20;
    v22 = 0x676E697461647055;
    if (v19 == 1)
      v22 = 0x676E69646441;
    v23 = 0xE800000000000000;
    *(_QWORD *)(v16 + 56) = &type metadata for String;
    *(_QWORD *)(v16 + 64) = v20;
    if (v19 == 1)
      v23 = 0xE600000000000000;
    *(_QWORD *)(v16 + 32) = v22;
    *(_QWORD *)(v16 + 40) = v23;
    v24 = type metadata accessor for URL(0);
    v25 = sub_1000A0940((unint64_t *)&unk_100211A60, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
    v26 = dispatch thunk of CustomStringConvertible.description.getter(v24, v25);
    *(_QWORD *)(v16 + 96) = &type metadata for String;
    *(_QWORD *)(v16 + 104) = v21;
    *(_QWORD *)(v16 + 72) = v26;
    *(_QWORD *)(v16 + 80) = v27;
    os_log(_:dso:log:_:_:)(HIDWORD(v33), &_mh_execute_header, v14, "%s Sound Profile Record with URL: %@", 36, 2, v16);
    swift_bridgeObjectRelease(v16);
    v28 = sub_1000B4AC8();
    sub_10014714C(a4, (void (*)(_QWORD))a2, a3);

    return swift_release(v28);
  }
  else
  {
    v30 = sub_1000A4CC0();
    v31 = swift_allocError(&type metadata for DeviceManager.DeviceManagerError, v30, 0, 0);
    *v32 = 0;
    a2();
    return swift_errorRelease(v31);
  }
}

uint64_t sub_1000C1FA0(uint64_t a1, uint64_t a2)
{
  return sub_1000C2FCC(a1, a2, (uint64_t)&unk_1001E6F98, (uint64_t)sub_1000C63B4, (uint64_t)&unk_1001E6FB0);
}

void sub_1000C1FBC(uint64_t a1, void (*a2)(_QWORD, uint64_t), uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t Strong;
  void *v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  void (*v21)(_QWORD, uint64_t);
  id v22;
  NSString v23;
  unsigned __int8 v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  void (*v35)(id, _QWORD);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  NSURL *v45;
  void *v46;
  void *v47;
  id v48;
  void *v49;
  char v50[24];

  v6 = sub_1000A0980(&qword_100212230);
  __chkstk_darwin(v6);
  v8 = &v50[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = type metadata accessor for SoundProfileRecord(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = &v50[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  a1 += 16;
  swift_beginAccess(a1, v50, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(a1, v13);
  if (!Strong)
  {
    v26 = sub_1000A4CC0();
    v27 = swift_allocError(&type metadata for DeviceManager.DeviceManagerError, v26, 0, 0);
    *v28 = 0;
    a2(0, v27);
    swift_errorRelease(v27);
    return;
  }
  v15 = (void *)Strong;
  v16 = sub_1000B4AC8();
  if (IsAppleInternalBuild(v16))
  {
    v17 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
    v49 = v15;
    v18 = v9;
    v19 = v12;
    v20 = a3;
    v21 = a2;
    v22 = v17;
    v23 = String._bridgeToObjectiveC()();
    v24 = objc_msgSend(v22, "BOOLForKey:", v23);
    swift_release(v16);

    a2 = v21;
    v25 = v20;
    v12 = v19;
    v9 = v18;
    v15 = v49;

    if ((v24 & 1) != 0)
    {
      sub_1000C2440((uint64_t)a2, v25);
LABEL_11:

      return;
    }
  }
  else
  {
    swift_release(v16);
  }
  v29 = sub_1000B4AC8();
  sub_10012B62C((uint64_t)v8);
  swift_release(v29);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    v30 = sub_1000A1000((uint64_t)v8, &qword_100212230);
    v31 = static os_log_type_t.default.getter(v30);
    if (qword_1002101D8 != -1)
      swift_once(&qword_1002101D8, sub_100168748);
    os_log(_:dso:log:_:_:)(v31, &_mh_execute_header, qword_100218DE0, "No SoundProfileRecord found", 27, 2, _swiftEmptyArrayStorage);
    v32 = sub_1000A4CC0();
    v33 = swift_allocError(&type metadata for DeviceManager.DeviceManagerError, v32, 0, 0);
    *v34 = 3;
    a2(0, v33);
    swift_errorRelease(v33);
    goto LABEL_11;
  }
  v35 = (void (*)(id, _QWORD))a2;
  v36 = sub_1000C6CD0((uint64_t)v8, (uint64_t)v12, type metadata accessor for SoundProfileRecord);
  v37 = static os_log_type_t.default.getter(v36);
  if (qword_1002101D8 != -1)
    swift_once(&qword_1002101D8, sub_100168748);
  v38 = qword_100218DE0;
  v39 = sub_1000A0980((uint64_t *)&unk_1002103C0);
  v40 = swift_allocObject(v39, 72, 7);
  *(_OWORD *)(v40 + 16) = xmmword_100184870;
  v41 = sub_1000ABB64();
  v43 = v42;
  *(_QWORD *)(v40 + 56) = &type metadata for String;
  *(_QWORD *)(v40 + 64) = sub_1000A0DF4();
  *(_QWORD *)(v40 + 32) = v41;
  *(_QWORD *)(v40 + 40) = v43;
  os_log(_:dso:log:_:_:)(v37, &_mh_execute_header, v38, "fetched SoundProfileRecord: %@", 30, 2, v40);
  swift_bridgeObjectRelease(v40);
  v44 = objc_allocWithZone((Class)BTCloudSoundProfileRecord);
  URL._bridgeToObjectiveC()(v45);
  v47 = v46;
  v48 = objc_msgSend(v44, "initWithFileURL:", v46);

  v35(v48, 0);
  sub_1000AE58C((uint64_t)v12, type metadata accessor for SoundProfileRecord);
}

void sub_1000C23E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  id v6;

  if (a2)
    v5 = _convertErrorToNSError(_:)(a2);
  else
    v5 = 0;
  v6 = (id)v5;
  (*(void (**)(uint64_t, uint64_t))(a3 + 16))(a3, a1);

}

uint64_t sub_1000C2440(uint64_t a1, uint64_t a2)
{
  return sub_1000C2FCC(a1, a2, (uint64_t)&unk_1001E6ED0, (uint64_t)sub_1000C6378, (uint64_t)&unk_1001E6EE8);
}

uint64_t sub_1000C245C(uint64_t a1, void (*a2)(_QWORD, uint64_t), uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t Strong;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  id v12;
  unint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  _BYTE v17[24];

  v5 = a1 + 16;
  swift_beginAccess(a1 + 16, v17, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v5, v6);
  if (Strong)
  {
    v8 = (void *)Strong;
    v9 = static os_log_type_t.default.getter(Strong);
    if (qword_1002101D8 != -1)
      swift_once(&qword_1002101D8, sub_100168748);
    os_log(_:dso:log:_:_:)(v9, &_mh_execute_header, qword_100218DE0, "CloudSync: Direct sound profile record cloud fetch", 50, 2, _swiftEmptyArrayStorage);
    v10 = sub_1000B4AC8();
    v11 = (_QWORD *)swift_allocObject(&unk_1001E6F20, 40, 7);
    v11[2] = v8;
    v11[3] = a2;
    v11[4] = a3;
    v12 = v8;
    swift_retain(a3);
    sub_100148D48((uint64_t)sub_1000C6388, (uint64_t)v11);

    swift_release(v10);
    return swift_release(v11);
  }
  else
  {
    v14 = sub_1000A4CC0();
    v15 = swift_allocError(&type metadata for DeviceManager.DeviceManagerError, v14, 0, 0);
    *v16 = 0;
    a2(0, v15);
    return swift_errorRelease(v15);
  }
}

uint64_t sub_1000C25BC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  void *v15;
  _QWORD *v16;
  void *v17;
  id v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  _QWORD *v25;
  _QWORD aBlock[5];
  _QWORD *v27;

  v8 = type metadata accessor for DispatchWorkItemFlags(0);
  v24 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *(void **)(a2 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_clientQueue);
  v16 = (_QWORD *)swift_allocObject(&unk_1001E6F48, 40, 7);
  v16[2] = a1;
  v16[3] = a3;
  v16[4] = a4;
  aBlock[4] = sub_1000C6398;
  v27 = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000E6A24;
  aBlock[3] = &unk_1001E6F60;
  v17 = _Block_copy(aBlock);
  v18 = a1;
  swift_retain(a4);
  v19 = v15;
  static DispatchQoS.unspecified.getter(v19);
  v25 = _swiftEmptyArrayStorage;
  v20 = sub_1000A0940((unint64_t *)&qword_100211920, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v21 = sub_1000A0980(&qword_100211D00);
  v22 = sub_1000C7224((unint64_t *)&qword_100211930, &qword_100211D00);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v25, v21, v22, v8, v20);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v14, v10, v17);
  _Block_release(v17);

  (*(void (**)(char *, uint64_t))(v24 + 8))(v10, v8);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  return swift_release(v27);
}

void sub_1000C27CC(void *a1, void (*a2)(void *, uint64_t))
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  id v18;

  if (a1)
  {
    v4 = a1;
    v5 = static os_log_type_t.default.getter(v4);
    if (qword_1002101D8 != -1)
      swift_once(&qword_1002101D8, sub_100168748);
    v6 = qword_100218DE0;
    v7 = sub_1000A0980((uint64_t *)&unk_1002103C0);
    v8 = swift_allocObject(v7, 72, 7);
    *(_OWORD *)(v8 + 16) = xmmword_100184870;
    v9 = v4;
    v10 = objc_msgSend(v9, "description");
    v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
    v13 = v12;

    *(_QWORD *)(v8 + 56) = &type metadata for String;
    *(_QWORD *)(v8 + 64) = sub_1000A0DF4();
    *(_QWORD *)(v8 + 32) = v11;
    *(_QWORD *)(v8 + 40) = v13;
    os_log(_:dso:log:_:_:)(v5, &_mh_execute_header, v6, "fetched SoundProfileRecord from cloud: %@", 41, 2, v8);
    swift_bridgeObjectRelease(v8);
    v18 = v9;
    a2(a1, 0);

  }
  else
  {
    v14 = static os_log_type_t.default.getter(0);
    if (qword_1002101D8 != -1)
      swift_once(&qword_1002101D8, sub_100168748);
    os_log(_:dso:log:_:_:)(v14, &_mh_execute_header, qword_100218DE0, "No SoundProfileRecord found", 27, 2, _swiftEmptyArrayStorage);
    v15 = sub_1000A4CC0();
    v16 = swift_allocError(&type metadata for DeviceManager.DeviceManagerError, v15, 0, 0);
    *v17 = 3;
    a2(0, v16);
    swift_errorRelease(v16);
  }
}

uint64_t sub_1000C29F4(uint64_t a1, uint64_t a2)
{
  return sub_1000C2FCC(a1, a2, (uint64_t)&unk_1001E6E80, (uint64_t)sub_1000C635C, (uint64_t)&unk_1001E6E98);
}

void sub_1000C2A10(uint64_t a1, void (*a2)(void), void (*a3)(void))
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t Strong;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE v32[24];

  v6 = sub_1000A0980(&qword_100212230);
  __chkstk_darwin(v6);
  v8 = &v32[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = type metadata accessor for SoundProfileRecord(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = &v32[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  a1 += 16;
  swift_beginAccess(a1, v32, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(a1, v13);
  if (Strong)
  {
    v15 = (void *)Strong;
    v16 = sub_1000B4AC8();
    sub_10012B62C((uint64_t)v8);
    swift_release(v16);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    {
      v17 = sub_1000A1000((uint64_t)v8, &qword_100212230);
      v18 = static os_log_type_t.default.getter(v17);
      if (qword_1002101D8 != -1)
        swift_once(&qword_1002101D8, sub_100168748);
      os_log(_:dso:log:_:_:)(v18, &_mh_execute_header, qword_100218DE0, "No SoundProfileRecord found", 27, 2, _swiftEmptyArrayStorage);
      ((void (*)(_QWORD))a2)(0);

    }
    else
    {
      v22 = sub_1000C6CD0((uint64_t)v8, (uint64_t)v12, type metadata accessor for SoundProfileRecord);
      v23 = static os_log_type_t.default.getter(v22);
      if (qword_1002101D8 != -1)
        swift_once(&qword_1002101D8, sub_100168748);
      v24 = qword_100218DE0;
      v25 = sub_1000A0980((uint64_t *)&unk_1002103C0);
      v26 = swift_allocObject(v25, 72, 7);
      *(_OWORD *)(v26 + 16) = xmmword_100184870;
      v27 = sub_1000ABB64();
      v29 = v28;
      *(_QWORD *)(v26 + 56) = &type metadata for String;
      *(_QWORD *)(v26 + 64) = sub_1000A0DF4();
      *(_QWORD *)(v26 + 32) = v27;
      *(_QWORD *)(v26 + 40) = v29;
      os_log(_:dso:log:_:_:)(v23, &_mh_execute_header, v24, "Removing SoundProfileRecord: %@", 31, 2, v26);
      swift_bridgeObjectRelease(v26);
      v30 = sub_1000B4AC8();
      sub_100148440(a2, a3);
      swift_release(v30);

      sub_1000AE58C((uint64_t)v12, type metadata accessor for SoundProfileRecord);
    }
  }
  else
  {
    v19 = sub_1000A4CC0();
    v20 = swift_allocError(&type metadata for DeviceManager.DeviceManagerError, v19, 0, 0);
    *v21 = 0;
    a2();
    swift_errorRelease(v20);
  }
}

uint64_t sub_1000C2D04(uint64_t a1, uint64_t a2)
{
  return sub_1000C2FCC(a1, a2, (uint64_t)&unk_1001E6DB8, (uint64_t)sub_1000C633C, (uint64_t)&unk_1001E6DD0);
}

uint64_t sub_1000C2D20(uint64_t a1, void (*a2)(void), uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t Strong;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  void *v15;
  uint64_t result;
  unint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  _QWORD v20[5];
  uint64_t v21;
  _BYTE v22[8];
  _BYTE v23[24];

  v5 = a1 + 16;
  swift_beginAccess(a1 + 16, v23, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v5, v6);
  if (Strong)
  {
    v8 = (void *)Strong;
    v9 = static os_log_type_t.default.getter(Strong);
    if (qword_1002101D8 != -1)
      swift_once(&qword_1002101D8, sub_100168748);
    os_log(_:dso:log:_:_:)(v9, &_mh_execute_header, qword_100218DE0, "resetCachedData", 15, 2, _swiftEmptyArrayStorage);
    v10 = sub_1000B4AC8();
    swift_unknownObjectWeakInit(v22, v8);
    v11 = swift_retain(a3);
    v12 = static os_log_type_t.default.getter(v11);
    if (qword_1002101E0 != -1)
      swift_once(&qword_1002101E0, sub_1001687B0);
    os_log(_:dso:log:_:_:)(v12, &_mh_execute_header, qword_100218DE8, "Local Records deleted", 21, 2, _swiftEmptyArrayStorage);
    v13 = sub_100129690();
    v14 = *(NSObject **)(v13 + OBJC_IVAR____TtC15audioaccessoryd17RecordFileManager_serialQueue);
    v20[4] = sub_1000B4690;
    v21 = 0;
    v20[0] = _NSConcreteStackBlock;
    v20[1] = 1107296256;
    v20[2] = sub_1000E6A70;
    v20[3] = &unk_1001E6DF8;
    v15 = _Block_copy(v20);
    swift_release(v21);
    dispatch_sync(v14, v15);
    _Block_release(v15);
    LOBYTE(v14) = swift_isEscapingClosureAtFileLocation(0, "", 118, 332, 26, 1);
    result = swift_release(v13);
    if ((v14 & 1) != 0)
    {
      __break(1u);
    }
    else
    {
      sub_1000C3830(0, (uint64_t)v22, (uint64_t)a2, a3, (uint64_t)&unk_1001E6E30, (uint64_t)sub_1000C6328, (uint64_t)&unk_1001E6E48);
      swift_release(a3);

      swift_release(v10);
      return swift_unknownObjectWeakDestroy(v22);
    }
  }
  else
  {
    v17 = sub_1000A4CC0();
    v18 = swift_allocError(&type metadata for DeviceManager.DeviceManagerError, v17, 0, 0);
    *v19 = 0;
    a2();
    return swift_errorRelease(v18);
  }
  return result;
}

uint64_t sub_1000C2FB0(uint64_t a1, uint64_t a2)
{
  return sub_1000C2FCC(a1, a2, (uint64_t)&unk_1001E6CC8, (uint64_t)sub_1000C62E4, (uint64_t)&unk_1001E6CE0);
}

uint64_t sub_1000C2FCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  void *v16;
  uint64_t v17;
  _QWORD *v18;
  void *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD aBlock[5];
  _QWORD *v34;

  v28 = a5;
  v10 = type metadata accessor for DispatchWorkItemFlags(0);
  v31 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for DispatchQoS(0);
  v29 = *(_QWORD *)(v13 - 8);
  v30 = v13;
  __chkstk_darwin(v13);
  v15 = (char *)&v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(void **)(v5 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_managerQueue);
  v17 = swift_allocObject(&unk_1001E6BD8, 24, 7);
  swift_unknownObjectWeakInit(v17 + 16, v5);
  v18 = (_QWORD *)swift_allocObject(a3, 40, 7);
  v18[2] = v17;
  v18[3] = a1;
  v18[4] = a2;
  aBlock[4] = a4;
  v34 = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000E6A24;
  aBlock[3] = v28;
  v19 = _Block_copy(aBlock);
  v20 = v16;
  swift_retain(v17);
  v21 = swift_retain(a2);
  static DispatchQoS.unspecified.getter(v21);
  v32 = _swiftEmptyArrayStorage;
  v22 = sub_1000A0940((unint64_t *)&qword_100211920, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v23 = sub_1000A0980(&qword_100211D00);
  v24 = sub_1000C7224((unint64_t *)&qword_100211930, &qword_100211D00);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v32, v23, v24, v10, v22);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v15, v12, v19);
  _Block_release(v19);

  (*(void (**)(char *, uint64_t))(v31 + 8))(v12, v10);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v15, v30);
  v25 = v34;
  swift_release(v17);
  return swift_release(v25);
}

uint64_t sub_1000C3200(uint64_t a1, void (*a2)(void), uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t Strong;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject **v22;
  NSObject *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  Swift::String v33;
  void *v34;
  Swift::String v35;
  Class isa;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  const void *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  _BYTE *v55;
  uint64_t v57;
  void *v58;
  void (*v59)(void);
  uint64_t v60;
  uint64_t v61;
  NSString *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  id v70;
  void *v71;
  objc_class *v72;
  __int128 v73;
  _QWORD *v74;
  _QWORD aBlock[5];
  uint64_t v76;
  char v77[8];
  char v78[32];

  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v67 = *(_QWORD *)(v6 - 8);
  v68 = v6;
  __chkstk_darwin(v6);
  v66 = (char *)&v57 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65 = type metadata accessor for DispatchQoS(0);
  v64 = *(_QWORD *)(v65 - 8);
  __chkstk_darwin(v65);
  v63 = (char *)&v57 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  a1 += 16;
  swift_beginAccess(a1, v78, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(a1, v9);
  if (Strong)
  {
    v11 = (void *)Strong;
    v12 = static os_log_type_t.default.getter(Strong);
    if (qword_1002101D8 != -1)
      swift_once(&qword_1002101D8, sub_100168748);
    os_log(_:dso:log:_:_:)(v12, &_mh_execute_header, qword_100218DE0, "resetCachedData", 15, 2, _swiftEmptyArrayStorage);
    v13 = sub_1000B4AC8();
    swift_unknownObjectWeakInit(v77, v11);
    v14 = swift_retain(a3);
    v15 = static os_log_type_t.default.getter(v14);
    if (qword_1002101E0 != -1)
      swift_once(&qword_1002101E0, sub_1001687B0);
    os_log(_:dso:log:_:_:)(v15, &_mh_execute_header, qword_100218DE8, "Reset Local and Cloud Container", 31, 2, _swiftEmptyArrayStorage);
    v61 = v13;
    v16 = sub_10012A6A0();
    v17 = static os_log_type_t.default.getter(v16);
    if (qword_1002101D0 != -1)
      swift_once(&qword_1002101D0, sub_1001686F0);
    v18 = &unk_100218000;
    os_log(_:dso:log:_:_:)(v17, &_mh_execute_header, qword_100218DD8, "Nuke and reset cloud container", 30, 2, _swiftEmptyArrayStorage);
    v19 = v16 + OBJC_IVAR____TtC15audioaccessoryd16CloudCoordinator_configuration;
    v20 = *(_QWORD *)(v19 + *(int *)(type metadata accessor for CloudCoordinatorConfiguration(0) + 32));
    v21 = *(_QWORD *)(v20 + 16);
    if (v21)
    {
      v58 = v11;
      v59 = a2;
      v60 = a3;
      v69 = v16 + 24;
      v62 = CKCurrentUserDefaultName;
      v57 = swift_bridgeObjectRetain(v20);
      v22 = (NSObject **)(v57 + 40);
      v73 = xmmword_100184870;
      do
      {
        v24 = (uint64_t)*(v22 - 1);
        v23 = *v22;
        v25 = swift_bridgeObjectRetain(*v22);
        v26 = static os_log_type_t.default.getter(v25);
        v27 = v18[443];
        v28 = sub_1000A0980((uint64_t *)&unk_1002103C0);
        v29 = swift_allocObject(v28, 72, 7);
        *(_OWORD *)(v29 + 16) = v73;
        *(_QWORD *)(v29 + 56) = &type metadata for String;
        *(_QWORD *)(v29 + 64) = sub_1000A0DF4();
        *(_QWORD *)(v29 + 32) = v24;
        *(_QWORD *)(v29 + 40) = v23;
        swift_bridgeObjectRetain(v23);
        os_log(_:dso:log:_:_:)(v26, &_mh_execute_header, v27, "Remove zone \"%@\" from cloud container", 37, 2, v29);
        swift_bridgeObjectRelease(v29);
        if ((sub_1000F2728(v24, v23) & 1) != 0 && (v31 = swift_unknownObjectWeakLoadStrong(v69, v30)) != 0)
        {
          v32 = v31;
          sub_1000AB31C(0, (unint64_t *)&unk_100210850, CKRecordZoneID_ptr);
          v33._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)(v62);
          v33._object = v34;
          v35._countAndFlagsBits = v24;
          v35._object = v23;
          isa = CKRecordZoneID.init(zoneName:ownerName:)(v35, v33).super.isa;
          v37 = *(void **)(v32 + OBJC_IVAR____TtC15audioaccessoryd11DeviceStore_clientQueue);
          v38 = swift_allocObject(&unk_1001E6D18, 32, 7);
          *(_QWORD *)(v38 + 16) = isa;
          *(_QWORD *)(v38 + 24) = v32;
          aBlock[4] = sub_1000C631C;
          v76 = v38;
          aBlock[0] = _NSConcreteStackBlock;
          aBlock[1] = 1107296256;
          aBlock[2] = sub_1000E6A24;
          aBlock[3] = &unk_1001E6D30;
          v71 = _Block_copy(aBlock);
          v70 = v37;
          v72 = isa;
          v39 = swift_unknownObjectRetain(v32);
          v40 = v63;
          static DispatchQoS.unspecified.getter(v39);
          v74 = _swiftEmptyArrayStorage;
          v41 = v16;
          v42 = sub_1000A0940((unint64_t *)&qword_100211920, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
          v43 = sub_1000A0980(&qword_100211D00);
          v44 = sub_1000C7224((unint64_t *)&qword_100211930, &qword_100211D00);
          v45 = v66;
          v46 = v18;
          v47 = v68;
          v48 = v42;
          v16 = v41;
          dispatch thunk of SetAlgebra.init<A>(_:)(&v74, v43, v44, v68, v48);
          v49 = v70;
          v50 = v71;
          OS_dispatch_queue.async(group:qos:flags:execute:)(0, v40, v45, v71);
          _Block_release(v50);

          v51 = v47;
          v18 = v46;
          (*(void (**)(char *, uint64_t))(v67 + 8))(v45, v51);
          (*(void (**)(char *, uint64_t))(v64 + 8))(v40, v65);
          v52 = v76;

          swift_unknownObjectRelease(v32);
          swift_release(v52);
        }
        else
        {
          swift_bridgeObjectRelease(v23);
        }
        v22 += 2;
        --v21;
      }
      while (v21);
      swift_unknownObjectRelease(v16);
      swift_bridgeObjectRelease(v57);
      a3 = v60;
      a2 = v59;
      v11 = v58;
    }
    else
    {
      swift_unknownObjectRelease(v16);
    }
    sub_1000C3830(0, (uint64_t)v77, (uint64_t)a2, a3, (uint64_t)&unk_1001E6D68, (uint64_t)sub_1000C6328, (uint64_t)&unk_1001E6D80);
    swift_release(a3);

    swift_release(v61);
    return swift_unknownObjectWeakDestroy(v77);
  }
  else
  {
    v53 = sub_1000A4CC0();
    v54 = swift_allocError(&type metadata for DeviceManager.DeviceManagerError, v53, 0, 0);
    *v55 = 0;
    a2();
    return swift_errorRelease(v54);
  }
}

uint64_t sub_1000C3830(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t result;
  void *v20;
  id v21;
  _QWORD *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD aBlock[5];
  _QWORD *v34;
  _BYTE v35[24];

  v28 = a6;
  v29 = a7;
  v12 = type metadata accessor for DispatchWorkItemFlags(0);
  v31 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v14 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = type metadata accessor for DispatchQoS(0);
  v15 = *(_QWORD *)(v30 - 8);
  __chkstk_darwin(v30);
  v17 = (char *)&v28 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess(a2, v35, 0, 0);
  result = swift_unknownObjectWeakLoadStrong(a2, v18);
  if (result)
  {
    v20 = (void *)result;
    v21 = *(id *)(result + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_clientQueue);

    v22 = (_QWORD *)swift_allocObject(a5, 40, 7);
    v22[2] = a3;
    v22[3] = a4;
    v22[4] = a1;
    aBlock[4] = v28;
    v34 = v22;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1000E6A24;
    aBlock[3] = v29;
    v23 = _Block_copy(aBlock);
    swift_retain(a4);
    v24 = swift_errorRetain(a1);
    static DispatchQoS.unspecified.getter(v24);
    v32 = _swiftEmptyArrayStorage;
    v25 = sub_1000A0940((unint64_t *)&qword_100211920, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v26 = sub_1000A0980(&qword_100211D00);
    v27 = sub_1000C7224((unint64_t *)&qword_100211930, &qword_100211D00);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v32, v26, v27, v12, v25);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v17, v14, v23);
    _Block_release(v23);

    (*(void (**)(char *, uint64_t))(v31 + 8))(v14, v12);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v30);
    return swift_release(v34);
  }
  return result;
}

char *sub_1000C3A80()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  char *v4;
  uint64_t v5;
  void *v6;
  id v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  char *v20;

  v0 = type metadata accessor for DispatchPredicate(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (uint64_t *)((char *)&v19 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  v4 = (char *)sub_1000B4AC8();
  v5 = OBJC_IVAR____TtC15audioaccessoryd11DeviceStore_clientQueue;
  v6 = *(void **)&v4[OBJC_IVAR____TtC15audioaccessoryd11DeviceStore_clientQueue];
  *v3 = v6;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for DispatchPredicate.notOnQueue(_:), v0);
  v7 = v6;
  v8 = _dispatchPreconditionTest(_:)(v3);
  (*(void (**)(_QWORD *, uint64_t))(v1 + 8))(v3, v0);
  if ((v8 & 1) == 0)
  {
    __break(1u);
    goto LABEL_5;
  }
  v9 = *(id *)&v4[v5];
  v3 = (_QWORD *)sub_1000A0980(&qword_100210CD0);
  OS_dispatch_queue.sync<A>(execute:)(&v20, sub_1000C6290, v4, v3);
  swift_release(v4);

  v4 = v20;
  v8 = static os_log_type_t.default.getter(v10);
  if (qword_1002101D8 != -1)
LABEL_5:
    swift_once(&qword_1002101D8, sub_100168748);
  v11 = qword_100218DE0;
  v12 = sub_1000A0980((uint64_t *)&unk_1002103C0);
  v13 = swift_allocObject(v12, 72, 7);
  *(_OWORD *)(v13 + 16) = xmmword_100184870;
  v20 = v4;
  v14 = v4;
  v15 = String.init<A>(describing:)(&v20, v3);
  v17 = v16;
  *(_QWORD *)(v13 + 56) = &type metadata for String;
  *(_QWORD *)(v13 + 64) = sub_1000A0DF4();
  *(_QWORD *)(v13 + 32) = v15;
  *(_QWORD *)(v13 + 40) = v17;
  os_log(_:dso:log:_:_:)(v8, &_mh_execute_header, v11, "fetched accountInfo: %@", 23, 2, v13);
  swift_bridgeObjectRelease(v13);
  return v4;
}

uint64_t type metadata accessor for DeviceManager()
{
  return objc_opt_self(_TtC15audioaccessoryd13DeviceManager);
}

uint64_t sub_1000C3D2C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  void *v10;
  id v11;
  uint64_t result;
  uint64_t v13;
  id v14;
  uint64_t v15;
  void *countAndFlagsBits;
  Swift::String v17;
  Swift::String v18;
  id v19;
  void *v20;
  uint64_t v21;
  void *v22;
  void *v23;
  Swift::String v24;
  Swift::String v25;
  void *object;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  Swift::String v30;
  void *v31;
  void *v32;
  Swift::String v33;
  Swift::String v34;
  void *v35;
  Swift::String v36;
  void *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  NSObject *v43;
  char isEscapingClosureAtFileLocation;
  uint64_t v45;
  uint64_t v46;
  Swift::String aBlock;
  uint64_t (*v48)(uint64_t);
  void *v49;
  uint64_t (*v50)();
  uint64_t v51;
  _QWORD v52[3];

  v2 = v1;
  v4 = type metadata accessor for DispatchPredicate(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (uint64_t *)((char *)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = OBJC_IVAR____TtC15audioaccessoryd11DeviceStore_clientQueue;
  v10 = *(void **)(a1 + OBJC_IVAR____TtC15audioaccessoryd11DeviceStore_clientQueue);
  *v8 = v10;
  (*(void (**)(_QWORD *, _QWORD, uint64_t, __n128))(v5 + 104))(v8, enum case for DispatchPredicate.notOnQueue(_:), v4, v6);
  v11 = v10;
  LOBYTE(v10) = _dispatchPreconditionTest(_:)(v8);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v5 + 8))(v8, v4);
  if ((v10 & 1) == 0)
  {
    __break(1u);
    goto LABEL_16;
  }
  v13 = 0x65736C6166;
  v14 = *(id *)(a1 + v9);
  v15 = sub_1000A0980(&qword_100210CD0);
  OS_dispatch_queue.sync<A>(execute:)(&aBlock, sub_1000C6290, a1, v15);

  countAndFlagsBits = (void *)aBlock._countAndFlagsBits;
  v52[0] = 0xD00000000000002BLL;
  v52[1] = 0x80000001001AB850;
  v17._object = (void *)0x80000001001AB880;
  v17._countAndFlagsBits = 0xD00000000000002BLL;
  String.append(_:)(v17);
  v18._countAndFlagsBits = 0xD00000000000002CLL;
  v18._object = (void *)0x80000001001AB8B0;
  String.append(_:)(v18);
  if (!countAndFlagsBits)
  {
    aBlock._countAndFlagsBits = 0x6C62616C69617641;
    aBlock._object = (void *)0xEB00000000203A65;
LABEL_8:
    v27 = 0xE500000000000000;
    v28 = 0x65736C6166;
    goto LABEL_9;
  }
  v19 = objc_msgSend(countAndFlagsBits, "loginID");
  if (v19)
  {
    v20 = v19;
    v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
    v23 = v22;

    aBlock._countAndFlagsBits = 540689481;
    aBlock._object = (void *)0xE400000000000000;
    v24._countAndFlagsBits = v21;
    v24._object = v23;
    String.append(_:)(v24);
    swift_bridgeObjectRelease(v23);
    v25._countAndFlagsBits = 10;
    v25._object = (void *)0xE100000000000000;
    String.append(_:)(v25);
    object = aBlock._object;
    String.append(_:)(aBlock);
    swift_bridgeObjectRelease(object);
  }
  aBlock._countAndFlagsBits = 0x6C62616C69617641;
  aBlock._object = (void *)0xEB00000000203A65;
  if ((objc_msgSend(countAndFlagsBits, "isSignedIn") & 1) == 0)
    goto LABEL_8;
  v27 = 0xE400000000000000;
  v28 = 1702195828;
LABEL_9:
  v29 = v27;
  String.append(_:)(*(Swift::String *)&v28);
  swift_bridgeObjectRelease(v27);
  v30._countAndFlagsBits = 10;
  v30._object = (void *)0xE100000000000000;
  String.append(_:)(v30);
  v31 = aBlock._object;
  String.append(_:)(aBlock);
  swift_bridgeObjectRelease(v31);
  aBlock._countAndFlagsBits = 0x3A656574616E614DLL;
  aBlock._object = (void *)0xE900000000000020;
  if (countAndFlagsBits && (objc_msgSend(countAndFlagsBits, "manateeAvailable") & 1) != 0)
  {
    v32 = (void *)0xE400000000000000;
    v13 = 1702195828;
  }
  else
  {
    v32 = (void *)0xE500000000000000;
  }
  v33._countAndFlagsBits = v13;
  v33._object = v32;
  String.append(_:)(v33);
  swift_bridgeObjectRelease(v32);
  v34._countAndFlagsBits = 10;
  v34._object = (void *)0xE100000000000000;
  String.append(_:)(v34);
  v35 = aBlock._object;
  String.append(_:)(aBlock);
  swift_bridgeObjectRelease(v35);
  v36._countAndFlagsBits = 0xD00000000000002DLL;
  v36._object = (void *)0x80000001001AB8E0;
  String.append(_:)(v36);
  v37 = *(void **)(v2 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_managerQueue);
  v38 = swift_allocObject(&unk_1001E6BD8, 24, 7);
  swift_unknownObjectWeakInit(v38 + 16, v2);
  v39 = (_QWORD *)swift_allocObject(&unk_1001E6C50, 40, 7);
  v39[2] = v38;
  v39[3] = v52;
  v39[4] = a1;
  v40 = swift_allocObject(&unk_1001E6C78, 32, 7);
  *(_QWORD *)(v40 + 16) = sub_1000C62B8;
  *(_QWORD *)(v40 + 24) = v39;
  v50 = sub_1000A4EB0;
  v51 = v40;
  aBlock._countAndFlagsBits = (uint64_t)_NSConcreteStackBlock;
  aBlock._object = (void *)1107296256;
  v48 = sub_1000E6A70;
  v49 = &unk_1001E6C90;
  v41 = _Block_copy(&aBlock);
  v42 = v51;
  v43 = v37;
  swift_retain(a1);
  swift_retain(v40);
  swift_release(v42);
  dispatch_sync(v43, v41);

  _Block_release(v41);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v40, "", 114, 1160, 27, 1);
  result = swift_release(v40);
  if ((isEscapingClosureAtFileLocation & 1) == 0)
  {
    v45 = v52[0];
    swift_release(v39);
    return v45;
  }
LABEL_16:
  __break(1u);
  return result;
}

void sub_1000C418C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  Swift::String v39;
  Swift::String v40;
  Swift::String v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  void *v54;
  Swift::String v55;
  void *object;
  Swift::String v57;
  void *v58;
  Swift::String v59;
  Swift::String v60;
  Swift::String v61;
  uint64_t v62;
  uint64_t v63;
  id v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  Swift::String v85;
  void *v86;
  void *v87;
  Swift::String v88;
  void *v89;
  uint64_t v90;
  Swift::String v91;
  Swift::String v92;
  Swift::String v93;
  Swift::String v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  id v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  Class v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  Swift::String v120;
  void *v121;
  void *v122;
  Swift::String v123;
  void *v124;
  _QWORD *v125;
  unint64_t v126;
  Swift::String v127;
  Swift::String v128;
  Swift::String v129;
  Swift::String v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  void *v144;
  void *v145;
  Swift::String v146;
  void *v147;
  Swift::String v148;
  void *v149;
  Swift::String v150;
  Swift::String v151;
  Swift::String v152;
  Swift::String v153;
  uint64_t v154;
  uint64_t v155;
  id v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  _QWORD *v162;
  uint64_t v163;
  uint64_t v164;
  unint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  void *v179;
  void *v180;
  Swift::String v181;
  void *v182;
  Swift::String v183;
  void *v184;
  Swift::String v185;
  uint64_t v186;
  Swift::String v187;
  Swift::String v188;
  Swift::String v189;
  uint64_t v190;
  id v191;
  NSString v192;
  unsigned __int8 v193;
  unint64_t v194;
  uint64_t v195;
  unint64_t v196;
  Swift::String v197;
  void *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  id v206;
  NSString v207;
  unsigned __int8 v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  Swift::String v213;
  void *v214;
  void *v215;
  Swift::String v216;
  void *v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  Swift::String v227;
  Swift::String v228;
  Swift::String v229;
  Swift::String v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  Swift::String v246;
  void *v247;
  void *v248;
  Swift::String v249;
  void *v250;
  Swift::String v251;
  char *v252;
  unint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  char *v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  id v268;
  char *v269;
  uint64_t v270;
  _QWORD *v271;
  id Strong;
  unint64_t v273;
  unint64_t v274;
  uint64_t v275;
  __int128 v276;
  uint64_t v277;
  uint64_t v278;
  char *v279;
  __int128 v280;
  uint64_t v281;
  __int128 v282;
  Swift::String v283;
  char v284[8];

  v275 = a3;
  v277 = type metadata accessor for BTDeferredRecord(0);
  v261 = *(_QWORD *)(v277 - 8);
  __chkstk_darwin(v277);
  v6 = (char *)&v252 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v9 = (char *)&v252 - v8;
  v10 = type metadata accessor for MagicPairingSettingsRecord(0);
  v259 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v260 = (char *)&v252 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v281 = (uint64_t)&v252 - v13;
  v14 = sub_1000A0980(&qword_100212230);
  __chkstk_darwin(v14);
  v267 = (uint64_t)&v252 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v266 = type metadata accessor for SoundProfileRecord(0);
  v265 = *(_QWORD *)(v266 - 8);
  __chkstk_darwin(v266);
  v257 = (uint64_t)&v252 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for DeviceSupportInformationRecord(0);
  v258 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  *(_QWORD *)&v282 = (char *)&v252 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_1000A0980(&qword_100210CD8);
  __chkstk_darwin(v19);
  v264 = (uint64_t)&v252 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v263 = type metadata accessor for LegacyMagicPairingSettingsRecords(0);
  v262 = *(_QWORD *)(v263 - 8);
  __chkstk_darwin(v263);
  v255 = (uint64_t)&v252 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v256 = (uint64_t)&v252 - v23;
  v24 = type metadata accessor for DeviceRecord(0);
  v25 = *(_QWORD *)(v24 - 8);
  __chkstk_darwin(v24);
  *(_QWORD *)&v280 = (char *)&v252 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v271 = (_QWORD *)type metadata accessor for URL(0);
  v270 = *(v271 - 1);
  __chkstk_darwin(v271);
  v269 = (char *)&v252 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = sub_1000A0980((uint64_t *)&unk_1002122E0);
  __chkstk_darwin(v28);
  v30 = (char *)&v252 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = type metadata accessor for LegacyAccountMagicKeysRecord(0);
  v32 = *(_QWORD *)(v31 - 8);
  __chkstk_darwin(v31);
  v34 = (char *)&v252 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v35);
  v37 = (char *)&v252 - v36;
  a1 += 16;
  swift_beginAccess(a1, v284, 0, 0);
  Strong = (id)swift_unknownObjectWeakLoadStrong(a1, v38);
  if (!Strong)
    return;
  v279 = v9;
  v274 = (unint64_t)"===========================\n";
  v39._object = (void *)0x80000001001AAD50;
  v39._countAndFlagsBits = 0xD00000000000002BLL;
  String.append(_:)(v39);
  v40._countAndFlagsBits = 0xD000000000000029;
  v40._object = (void *)0x80000001001AB910;
  v254 = 0xD000000000000029;
  String.append(_:)(v40);
  v41._countAndFlagsBits = 0xD00000000000002CLL;
  v273 = (unint64_t)"Device Record]------------\n";
  v41._object = (void *)0x80000001001AADB0;
  String.append(_:)(v41);
  v43 = static os_log_type_t.default.getter(v42);
  if (qword_1002101F8 != -1)
    swift_once(&qword_1002101F8, sub_100168914);
  v44 = qword_100218E00;
  os_log(_:dso:log:_:_:)(v43, &_mh_execute_header, qword_100218E00, "-------------Account Keys-------------", 38, 2, _swiftEmptyArrayStorage);
  sub_100129768((uint64_t)v30);
  v45 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v32 + 48))(v30, 1, v31);
  v252 = v6;
  if (v45 == 1)
  {
    sub_1000A1000((uint64_t)v30, (uint64_t *)&unk_1002122E0);
  }
  else
  {
    v46 = sub_1000C6CD0((uint64_t)v30, (uint64_t)v37, type metadata accessor for LegacyAccountMagicKeysRecord);
    LODWORD(v278) = static os_log_type_t.default.getter(v46);
    v47 = sub_1000A0980((uint64_t *)&unk_1002103C0);
    v48 = swift_allocObject(v47, 72, 7);
    *(_OWORD *)(v48 + 16) = xmmword_100184870;
    sub_1000AE548((uint64_t)v37, (uint64_t)v34, type metadata accessor for LegacyAccountMagicKeysRecord);
    v49 = sub_1000B0D68();
    v51 = v50;
    sub_1000AE58C((uint64_t)v34, type metadata accessor for LegacyAccountMagicKeysRecord);
    *(_QWORD *)(v48 + 56) = &type metadata for String;
    *(_QWORD *)(v48 + 64) = sub_1000A0DF4();
    *(_QWORD *)(v48 + 32) = v49;
    *(_QWORD *)(v48 + 40) = v51;
    os_log(_:dso:log:_:_:)(v278, &_mh_execute_header, v44, "%@", 2, 2, v48);
    swift_bridgeObjectRelease(v48);
    sub_1000AE548((uint64_t)v37, (uint64_t)v34, type metadata accessor for LegacyAccountMagicKeysRecord);
    v52 = sub_1000B0D68();
    v54 = v53;
    sub_1000AE58C((uint64_t)v34, type metadata accessor for LegacyAccountMagicKeysRecord);
    v283._countAndFlagsBits = 0xA2D2D2D2D2D0ALL;
    v283._object = (void *)0xE700000000000000;
    v55._countAndFlagsBits = v52;
    v55._object = v54;
    String.append(_:)(v55);
    swift_bridgeObjectRelease(v54);
    object = v283._object;
    swift_bridgeObjectRetain(v283._object);
    v57._countAndFlagsBits = 10;
    v57._object = (void *)0xE100000000000000;
    String.append(_:)(v57);
    swift_bridgeObjectRelease(object);
    v58 = v283._object;
    String.append(_:)(v283);
    swift_bridgeObjectRelease(v58);
    sub_1000AE58C((uint64_t)v37, type metadata accessor for LegacyAccountMagicKeysRecord);
  }
  v59._object = (void *)(v274 | 0x8000000000000000);
  v59._countAndFlagsBits = 0xD00000000000002BLL;
  String.append(_:)(v59);
  v60._object = (void *)0x80000001001AB970;
  v60._countAndFlagsBits = 0xD00000000000002BLL;
  String.append(_:)(v60);
  v61._countAndFlagsBits = 0xD00000000000002CLL;
  v61._object = (void *)(v273 | 0x8000000000000000);
  String.append(_:)(v61);
  v63 = static os_log_type_t.default.getter(v62);
  os_log(_:dso:log:_:_:)(v63, &_mh_execute_header, qword_100218E00, "-------------Device Records-------------", 40, 2, _swiftEmptyArrayStorage);
  v268 = (id)objc_opt_self(BTSystemConfiguration);
  v64 = objc_msgSend(v268, "isFirstUnlocked");
  v278 = a2;
  if (!(_DWORD)v64)
  {
    v90 = static os_log_type_t.error.getter(v64);
    if (qword_1002101E0 != -1)
      swift_once(&qword_1002101E0, sub_1001687B0);
    v70 = (char *)_swiftEmptyArrayStorage;
    os_log(_:dso:log:_:_:)(v90, &_mh_execute_header, qword_100218DE8, "deviceRecords call failed because in device is in beforeFirstUnlock state", 73, 2, _swiftEmptyArrayStorage, v252);
    v71 = _swiftEmptyArrayStorage[2];
    if (v71)
      goto LABEL_11;
LABEL_17:
    swift_bridgeObjectRelease(v70);
    goto LABEL_18;
  }
  v65 = sub_100129690();
  if (qword_100210120 != -1)
    swift_once(&qword_100210120, sub_10009C800);
  v66 = (uint64_t)v271;
  v67 = sub_1000A0A00((uint64_t)v271, (uint64_t)qword_100218BE0);
  v68 = v270;
  v69 = (uint64_t)v269;
  (*(void (**)(char *, uint64_t, uint64_t))(v270 + 16))(v269, v67, v66);
  v70 = (char *)sub_100127AAC(v69);
  swift_release(v65);
  (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v69, v66);
  v71 = *((_QWORD *)v70 + 2);
  if (!v71)
    goto LABEL_17;
LABEL_11:
  v72 = (*(unsigned __int8 *)(v25 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80);
  v253 = (unint64_t)v70;
  v73 = (uint64_t)&v70[v72];
  v74 = *(_QWORD *)(v25 + 72);
  v276 = xmmword_100184870;
  v75 = v280;
  do
  {
    v76 = sub_1000AE548(v73, v75, type metadata accessor for DeviceRecord);
    v77 = static os_log_type_t.default.getter(v76);
    v78 = qword_100218E00;
    v79 = sub_1000A0980((uint64_t *)&unk_1002103C0);
    v80 = swift_allocObject(v79, 72, 7);
    *(_OWORD *)(v80 + 16) = v276;
    v81 = sub_10009C9A8();
    v83 = v82;
    *(_QWORD *)(v80 + 56) = &type metadata for String;
    *(_QWORD *)(v80 + 64) = sub_1000A0DF4();
    *(_QWORD *)(v80 + 32) = v81;
    *(_QWORD *)(v80 + 40) = v83;
    v84 = v78;
    v75 = v280;
    os_log(_:dso:log:_:_:)(v77, &_mh_execute_header, v84, "%@", 2, 2, v80);
    swift_bridgeObjectRelease(v80);
    v85._countAndFlagsBits = sub_10009C9A8();
    v86 = v85._object;
    v283._countAndFlagsBits = 0xA2D2D2D2D2D0ALL;
    v283._object = (void *)0xE700000000000000;
    String.append(_:)(v85);
    swift_bridgeObjectRelease(v86);
    v87 = v283._object;
    swift_bridgeObjectRetain(v283._object);
    v88._countAndFlagsBits = 10;
    v88._object = (void *)0xE100000000000000;
    String.append(_:)(v88);
    swift_bridgeObjectRelease(v87);
    v89 = v283._object;
    String.append(_:)(v283);
    swift_bridgeObjectRelease(v89);
    sub_1000AE58C(v75, type metadata accessor for DeviceRecord);
    v73 += v74;
    --v71;
  }
  while (v71);
  swift_bridgeObjectRelease(v253);
LABEL_18:
  v91._countAndFlagsBits = 0xD00000000000002DLL;
  v253 = (unint64_t)"==========================\n\n";
  v91._object = (void *)0x80000001001AB8E0;
  String.append(_:)(v91);
  v92._object = (void *)(v274 | 0x8000000000000000);
  v92._countAndFlagsBits = 0xD00000000000002BLL;
  String.append(_:)(v92);
  v93._object = (void *)0x80000001001ABA20;
  v93._countAndFlagsBits = 0xD00000000000002BLL;
  String.append(_:)(v93);
  v94._countAndFlagsBits = 0xD00000000000002CLL;
  v94._object = (void *)(v273 | 0x8000000000000000);
  String.append(_:)(v94);
  v96 = static os_log_type_t.default.getter(v95);
  v97 = &unk_100218000;
  os_log(_:dso:log:_:_:)(v96, &_mh_execute_header, qword_100218E00, "---Device Support Information Records---", 40, 2, _swiftEmptyArrayStorage);
  v98 = objc_msgSend(v268, "isFirstUnlocked");
  if ((_DWORD)v98)
  {
    v99 = sub_100129690();
    if (qword_100210180 != -1)
      swift_once(&qword_100210180, sub_1000DA4F0);
    v100 = (uint64_t)v271;
    v101 = sub_1000A0A00((uint64_t)v271, (uint64_t)qword_100218D28);
    v102 = v270;
    v103 = (uint64_t)v269;
    (*(void (**)(char *, uint64_t, uint64_t))(v270 + 16))(v269, v101, v100);
    v104 = sub_100127AD0(v103);
    swift_release(v99);
    (*(void (**)(uint64_t, uint64_t))(v102 + 8))(v103, v100);
  }
  else
  {
    v105 = static os_log_type_t.error.getter(v98);
    if (qword_1002101E0 != -1)
      swift_once(&qword_1002101E0, sub_1001687B0);
    v104 = _swiftEmptyArrayStorage;
    os_log(_:dso:log:_:_:)(v105, &_mh_execute_header, qword_100218DE8, "deviceSupportInformationRecords call failed because in device is in beforeFirstUnlock state", 91, 2, _swiftEmptyArrayStorage, v252);
  }
  v106 = v282;
  v107 = v104[2];
  if (v107)
  {
    v108 = *(unsigned __int8 *)(v258 + 80);
    *(_QWORD *)&v276 = v104;
    v109 = (uint64_t)v104 + ((v108 + 32) & ~v108);
    v110 = *(_QWORD *)(v258 + 72);
    v280 = xmmword_100184870;
    do
    {
      v111 = sub_1000AE548(v109, v106, type metadata accessor for DeviceSupportInformationRecord);
      v112 = static os_log_type_t.default.getter(v111);
      v113 = v97[448];
      v114 = sub_1000A0980((uint64_t *)&unk_1002103C0);
      v115 = swift_allocObject(v114, 72, 7);
      *(_OWORD *)(v115 + 16) = v280;
      v116 = sub_1000DA63C();
      v118 = v117;
      *(_QWORD *)(v115 + 56) = &type metadata for String;
      *(_QWORD *)(v115 + 64) = sub_1000A0DF4();
      *(_QWORD *)(v115 + 32) = v116;
      *(_QWORD *)(v115 + 40) = v118;
      os_log(_:dso:log:_:_:)(v112, &_mh_execute_header, v113, "%@", 2, 2, v115);
      v119 = v115;
      v97 = (_QWORD *)&unk_100218000;
      swift_bridgeObjectRelease(v119);
      v120._countAndFlagsBits = (uint64_t)sub_1000DA63C();
      v121 = v120._object;
      v283._countAndFlagsBits = 0xA2D2D2D2D2D0ALL;
      v283._object = (void *)0xE700000000000000;
      String.append(_:)(v120);
      swift_bridgeObjectRelease(v121);
      v122 = v283._object;
      swift_bridgeObjectRetain(v283._object);
      v123._countAndFlagsBits = 10;
      v123._object = (void *)0xE100000000000000;
      String.append(_:)(v123);
      swift_bridgeObjectRelease(v122);
      v124 = v283._object;
      String.append(_:)(v283);
      v106 = v282;
      swift_bridgeObjectRelease(v124);
      sub_1000AE58C(v106, type metadata accessor for DeviceSupportInformationRecord);
      v109 += v110;
      --v107;
    }
    while (v107);
    v125 = (_QWORD *)v276;
  }
  else
  {
    v125 = v104;
  }
  swift_bridgeObjectRelease(v125);
  v126 = (unint64_t)"audioaccessoryd";
  v127._object = (void *)0x80000001001AAD20;
  v127._countAndFlagsBits = 0xD00000000000002CLL;
  String.append(_:)(v127);
  v128._object = (void *)(v274 | 0x8000000000000000);
  v128._countAndFlagsBits = 0xD00000000000002BLL;
  String.append(_:)(v128);
  v129._object = (void *)0x80000001001ABAE0;
  v129._countAndFlagsBits = 0xD00000000000002BLL;
  String.append(_:)(v129);
  v130._object = (void *)(v273 | 0x8000000000000000);
  v130._countAndFlagsBits = 0xD00000000000002CLL;
  String.append(_:)(v130);
  v132 = static os_log_type_t.default.getter(v131);
  v133 = v97[448];
  os_log(_:dso:log:_:_:)(v132, &_mh_execute_header, v133, "---------Legacy Magic Settings Records---------", 47, 2, _swiftEmptyArrayStorage);
  v134 = v264;
  sub_10012B40C(v264);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v262 + 48))(v134, 1, v263) == 1)
  {
    sub_1000A1000(v134, &qword_100210CD8);
  }
  else
  {
    v135 = v256;
    v136 = sub_1000C6CD0(v134, v256, type metadata accessor for LegacyMagicPairingSettingsRecords);
    LODWORD(v282) = static os_log_type_t.default.getter(v136);
    v137 = sub_1000A0980((uint64_t *)&unk_1002103C0);
    v138 = swift_allocObject(v137, 72, 7);
    *(_OWORD *)(v138 + 16) = xmmword_100184870;
    v139 = v255;
    sub_1000AE548(v135, v255, type metadata accessor for LegacyMagicPairingSettingsRecords);
    v140 = sub_1000E3C00();
    v142 = v141;
    sub_1000AE58C(v139, type metadata accessor for LegacyMagicPairingSettingsRecords);
    *(_QWORD *)(v138 + 56) = &type metadata for String;
    *(_QWORD *)(v138 + 64) = sub_1000A0DF4();
    *(_QWORD *)(v138 + 32) = v140;
    *(_QWORD *)(v138 + 40) = v142;
    os_log(_:dso:log:_:_:)(v282, &_mh_execute_header, v133, "%@", 2, 2, v138);
    swift_bridgeObjectRelease(v138);
    sub_1000AE548(v135, v139, type metadata accessor for LegacyMagicPairingSettingsRecords);
    v143 = sub_1000E3C00();
    v145 = v144;
    sub_1000AE58C(v139, type metadata accessor for LegacyMagicPairingSettingsRecords);
    v283._countAndFlagsBits = 0xA2D2D2D2D2D0ALL;
    v283._object = (void *)0xE700000000000000;
    v146._countAndFlagsBits = v143;
    v146._object = v145;
    String.append(_:)(v146);
    swift_bridgeObjectRelease(v145);
    v147 = v283._object;
    swift_bridgeObjectRetain(v283._object);
    v148._countAndFlagsBits = 10;
    v148._object = (void *)0xE100000000000000;
    String.append(_:)(v148);
    swift_bridgeObjectRelease(v147);
    v149 = v283._object;
    String.append(_:)(v283);
    swift_bridgeObjectRelease(v149);
    sub_1000AE58C(v135, type metadata accessor for LegacyMagicPairingSettingsRecords);
  }
  v150._object = (void *)0x80000001001AAD20;
  v150._countAndFlagsBits = 0xD00000000000002CLL;
  String.append(_:)(v150);
  v151._object = (void *)(v274 | 0x8000000000000000);
  v151._countAndFlagsBits = 0xD00000000000002BLL;
  String.append(_:)(v151);
  v152._object = (void *)0x80000001001ABB40;
  v152._countAndFlagsBits = 0xD00000000000002BLL;
  String.append(_:)(v152);
  v153._object = (void *)(v273 | 0x8000000000000000);
  v153._countAndFlagsBits = 0xD00000000000002CLL;
  String.append(_:)(v153);
  v155 = static os_log_type_t.default.getter(v154);
  os_log(_:dso:log:_:_:)(v155, &_mh_execute_header, v97[448], "---------Magic Settings Records---------", 40, 2, _swiftEmptyArrayStorage);
  v156 = objc_msgSend(v268, "isFirstUnlocked");
  if ((_DWORD)v156)
  {
    v157 = sub_100129690();
    if (qword_100210160 != -1)
      swift_once(&qword_100210160, sub_1000C81B8);
    v158 = (uint64_t)v271;
    v159 = sub_1000A0A00((uint64_t)v271, (uint64_t)qword_100218C90);
    v160 = v270;
    v161 = (uint64_t)v269;
    (*(void (**)(char *, uint64_t, uint64_t))(v270 + 16))(v269, v159, v158);
    v162 = sub_100127AF4(v161);
    swift_release(v157);
    (*(void (**)(uint64_t, uint64_t))(v160 + 8))(v161, v158);
  }
  else
  {
    v163 = static os_log_type_t.error.getter(v156);
    if (qword_1002101E0 != -1)
      swift_once(&qword_1002101E0, sub_1001687B0);
    v162 = _swiftEmptyArrayStorage;
    os_log(_:dso:log:_:_:)(v163, &_mh_execute_header, qword_100218DE8, "magicPairingSettingsRecords call failed because in device is in beforeFirstUnlock state", 87, 2, _swiftEmptyArrayStorage, v252);
  }
  v164 = v162[2];
  *(_QWORD *)&v276 = "audioaccessoryd";
  if (v164)
  {
    v165 = (*(unsigned __int8 *)(v259 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v259 + 80);
    v271 = v162;
    v166 = (uint64_t)v162 + v165;
    *(_QWORD *)&v282 = *(_QWORD *)(v259 + 72);
    v280 = xmmword_100184870;
    v167 = (uint64_t)v260;
    v168 = v281;
    do
    {
      v169 = sub_1000AE548(v166, v168, type metadata accessor for MagicPairingSettingsRecord);
      v170 = static os_log_type_t.default.getter(v169);
      v171 = v97[448];
      v172 = sub_1000A0980((uint64_t *)&unk_1002103C0);
      v173 = swift_allocObject(v172, 72, 7);
      *(_OWORD *)(v173 + 16) = v280;
      sub_1000AE548(v281, v167, type metadata accessor for MagicPairingSettingsRecord);
      v174 = sub_1000C8310();
      v176 = v175;
      sub_1000AE58C(v167, type metadata accessor for MagicPairingSettingsRecord);
      *(_QWORD *)(v173 + 56) = &type metadata for String;
      *(_QWORD *)(v173 + 64) = sub_1000A0DF4();
      *(_QWORD *)(v173 + 32) = v174;
      *(_QWORD *)(v173 + 40) = v176;
      v97 = (_QWORD *)&unk_100218000;
      os_log(_:dso:log:_:_:)(v170, &_mh_execute_header, v171, "%@", 2, 2, v173);
      v177 = v173;
      v168 = v281;
      swift_bridgeObjectRelease(v177);
      sub_1000AE548(v168, v167, type metadata accessor for MagicPairingSettingsRecord);
      v178 = sub_1000C8310();
      v180 = v179;
      sub_1000AE58C(v167, type metadata accessor for MagicPairingSettingsRecord);
      v283._countAndFlagsBits = 0xA2D2D2D2D2D0ALL;
      v283._object = (void *)0xE700000000000000;
      v181._countAndFlagsBits = v178;
      v181._object = v180;
      String.append(_:)(v181);
      swift_bridgeObjectRelease(v180);
      v182 = v283._object;
      swift_bridgeObjectRetain(v283._object);
      v183._countAndFlagsBits = 10;
      v183._object = (void *)0xE100000000000000;
      String.append(_:)(v183);
      swift_bridgeObjectRelease(v182);
      v184 = v283._object;
      String.append(_:)(v283);
      swift_bridgeObjectRelease(v184);
      sub_1000AE58C(v168, type metadata accessor for MagicPairingSettingsRecord);
      v166 += v282;
      --v164;
    }
    while (v164);
    swift_bridgeObjectRelease(v271);
    v126 = v276;
  }
  else
  {
    swift_bridgeObjectRelease(v162);
  }
  v185._object = (void *)(v126 | 0x8000000000000000);
  v185._countAndFlagsBits = 0xD00000000000002CLL;
  v186 = v278;
  String.append(_:)(v185);
  v187._object = (void *)(v274 | 0x8000000000000000);
  v187._countAndFlagsBits = 0xD00000000000002BLL;
  String.append(_:)(v187);
  v188._object = (void *)0x80000001001ABC00;
  v188._countAndFlagsBits = v254;
  String.append(_:)(v188);
  v189._object = (void *)(v273 | 0x8000000000000000);
  v189._countAndFlagsBits = 0xD00000000000002CLL;
  String.append(_:)(v189);
  v283._countAndFlagsBits = 0x203A70696B53;
  v283._object = (void *)0xE600000000000000;
  v190 = sub_1000B4AC8();
  if (!IsAppleInternalBuild(v190))
  {
    swift_release(v190);
    goto LABEL_49;
  }
  v191 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v192 = String._bridgeToObjectiveC()();
  v193 = objc_msgSend(v191, "BOOLForKey:", v192);
  swift_release(v190);

  if ((v193 & 1) == 0)
  {
LABEL_49:
    v194 = 0xE500000000000000;
    v195 = 0x65736C6166;
    goto LABEL_50;
  }
  v194 = 0xE400000000000000;
  v195 = 1702195828;
LABEL_50:
  v196 = v194;
  String.append(_:)(*(Swift::String *)&v195);
  swift_bridgeObjectRelease(v194);
  v197._countAndFlagsBits = 10;
  v197._object = (void *)0xE100000000000000;
  String.append(_:)(v197);
  v198 = v283._object;
  String.append(_:)(v283);
  v199 = swift_bridgeObjectRelease(v198);
  v200 = static os_log_type_t.default.getter(v199);
  v201 = qword_100218E00;
  v202 = os_log(_:dso:log:_:_:)(v200, &_mh_execute_header, qword_100218E00, "---------Sound Profile Record---------", 38, 2, _swiftEmptyArrayStorage);
  v203 = static os_log_type_t.default.getter(v202);
  v204 = sub_1000A0980((uint64_t *)&unk_1002103C0);
  v205 = swift_allocObject(v204, 72, 7);
  v282 = xmmword_100184870;
  *(_OWORD *)(v205 + 16) = xmmword_100184870;
  if (IsAppleInternalBuild(v205))
  {
    v206 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
    v207 = String._bridgeToObjectiveC()();
    v208 = objc_msgSend(v206, "BOOLForKey:", v207);

  }
  else
  {
    v208 = 0;
  }
  *(_QWORD *)(v205 + 56) = &type metadata for Bool;
  *(_QWORD *)(v205 + 64) = &protocol witness table for Bool;
  *(_BYTE *)(v205 + 32) = v208;
  os_log(_:dso:log:_:_:)(v203, &_mh_execute_header, v201, "Skip: %d", (_DWORD)v252);
  swift_bridgeObjectRelease(v205);
  v209 = v267;
  sub_10012B62C(v267);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v265 + 48))(v209, 1, v266) == 1)
  {
    v210 = v204;
    sub_1000A1000(v209, &qword_100212230);
  }
  else
  {
    v211 = v204;
    v212 = v257;
    sub_1000C6CD0(v209, v257, type metadata accessor for SoundProfileRecord);
    v213._countAndFlagsBits = sub_1000ABB64();
    v214 = v213._object;
    v283._countAndFlagsBits = 0xA2D2D2D2D2D0ALL;
    v283._object = (void *)0xE700000000000000;
    String.append(_:)(v213);
    swift_bridgeObjectRelease(v214);
    v215 = v283._object;
    swift_bridgeObjectRetain(v283._object);
    v216._countAndFlagsBits = 10;
    v216._object = (void *)0xE100000000000000;
    String.append(_:)(v216);
    swift_bridgeObjectRelease(v215);
    v217 = v283._object;
    String.append(_:)(v283);
    v218 = swift_bridgeObjectRelease(v217);
    v219 = static os_log_type_t.default.getter(v218);
    v220 = qword_100218E00;
    v210 = v211;
    v221 = swift_allocObject(v211, 72, 7);
    *(_OWORD *)(v221 + 16) = v282;
    v222 = sub_1000ABB64();
    v224 = v223;
    *(_QWORD *)(v221 + 56) = &type metadata for String;
    *(_QWORD *)(v221 + 64) = sub_1000A0DF4();
    *(_QWORD *)(v221 + 32) = v222;
    *(_QWORD *)(v221 + 40) = v224;
    os_log(_:dso:log:_:_:)(v219, &_mh_execute_header, v220, "%@", 2, 2, v221);
    swift_bridgeObjectRelease(v221);
    sub_1000AE58C(v212, type metadata accessor for SoundProfileRecord);
  }
  v225 = v277;
  v226 = (uint64_t)v279;
  sub_1000A3E08(v186);
  sub_10010D314(v186);
  v227._countAndFlagsBits = 0xD00000000000002DLL;
  v227._object = (void *)(v253 | 0x8000000000000000);
  String.append(_:)(v227);
  v228._object = (void *)(v274 | 0x8000000000000000);
  v228._countAndFlagsBits = 0xD00000000000002BLL;
  String.append(_:)(v228);
  v229._object = (void *)0x80000001001ABC80;
  v229._countAndFlagsBits = 0xD00000000000002BLL;
  String.append(_:)(v229);
  v230._countAndFlagsBits = 0xD00000000000002CLL;
  v230._object = (void *)(v273 | 0x8000000000000000);
  String.append(_:)(v230);
  v232 = static os_log_type_t.default.getter(v231);
  os_log(_:dso:log:_:_:)(v232, &_mh_execute_header, qword_100218E00, "--------Cloud Deferred State Dump-------", 40, 2, _swiftEmptyArrayStorage);
  v233 = sub_10012A994();
  v234 = *(_QWORD *)(v233 + 16);
  if (v234)
  {
    v235 = *(unsigned __int8 *)(v261 + 80);
    *(_QWORD *)&v280 = v233;
    v236 = v233 + ((v235 + 32) & ~v235);
    v281 = *(_QWORD *)(v261 + 72);
    v237 = (uint64_t)v252;
    do
    {
      v238 = sub_1000AE548(v236, v226, type metadata accessor for BTDeferredRecord);
      v239 = static os_log_type_t.default.getter(v238);
      v240 = qword_100218E00;
      v241 = swift_allocObject(v210, 72, 7);
      *(_OWORD *)(v241 + 16) = v282;
      sub_1000AE548((uint64_t)v279, v237, type metadata accessor for BTDeferredRecord);
      v242 = String.init<A>(describing:)(v237, v225);
      v244 = v243;
      *(_QWORD *)(v241 + 56) = &type metadata for String;
      *(_QWORD *)(v241 + 64) = sub_1000A0DF4();
      *(_QWORD *)(v241 + 32) = v242;
      *(_QWORD *)(v241 + 40) = v244;
      v225 = v277;
      os_log(_:dso:log:_:_:)(v239, &_mh_execute_header, v240, "%@", 2, 2, v241);
      v245 = v241;
      v226 = (uint64_t)v279;
      swift_bridgeObjectRelease(v245);
      sub_1000AE548(v226, v237, type metadata accessor for BTDeferredRecord);
      v246._countAndFlagsBits = String.init<A>(describing:)(v237, v225);
      v247 = v246._object;
      v283._countAndFlagsBits = 0xA2D2D2D2D2D0ALL;
      v283._object = (void *)0xE700000000000000;
      String.append(_:)(v246);
      swift_bridgeObjectRelease(v247);
      v248 = v283._object;
      swift_bridgeObjectRetain(v283._object);
      v249._countAndFlagsBits = 10;
      v249._object = (void *)0xE100000000000000;
      String.append(_:)(v249);
      swift_bridgeObjectRelease(v248);
      v250 = v283._object;
      String.append(_:)(v283);
      swift_bridgeObjectRelease(v250);
      sub_1000AE58C(v226, type metadata accessor for BTDeferredRecord);
      v236 += v281;
      --v234;
    }
    while (v234);
    v233 = v280;
  }
  swift_bridgeObjectRelease(v233);
  v251._countAndFlagsBits = 0xD00000000000002CLL;
  v251._object = (void *)(v276 | 0x8000000000000000);
  String.append(_:)(v251);

}

uint64_t sub_1000C5A64(char a1, char a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD aBlock[5];
  uint64_t v27;

  v5 = type metadata accessor for DispatchWorkItemFlags(0);
  v24 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for DispatchQoS(0);
  v8 = *(_QWORD *)(v23 - 8);
  __chkstk_darwin(v23);
  v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(void **)(v2 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_clientQueue);
  v12 = swift_allocObject(&unk_1001E6BD8, 24, 7);
  swift_unknownObjectWeakInit(v12 + 16, v2);
  v13 = swift_allocObject(&unk_1001E6C00, 33, 7);
  *(_BYTE *)(v13 + 16) = a1;
  *(_QWORD *)(v13 + 24) = v12;
  *(_BYTE *)(v13 + 32) = a2;
  aBlock[4] = sub_1000C6268;
  v27 = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000E6A24;
  aBlock[3] = &unk_1001E6C18;
  v14 = _Block_copy(aBlock);
  v15 = v11;
  v16 = swift_retain(v12);
  static DispatchQoS.unspecified.getter(v16);
  v25 = _swiftEmptyArrayStorage;
  v17 = sub_1000A0940((unint64_t *)&qword_100211920, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v18 = sub_1000A0980(&qword_100211D00);
  v19 = sub_1000C7224((unint64_t *)&qword_100211930, &qword_100211D00);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v25, v18, v19, v5, v17);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v10, v7, v14);
  _Block_release(v14);

  (*(void (**)(char *, uint64_t))(v24 + 8))(v7, v5);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v23);
  v20 = v27;
  swift_release(v12);
  return swift_release(v20);
}

void sub_1000C5CA0(uint64_t a1, uint64_t a2, char a3)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t Strong;
  uint64_t v12;
  void *v13;
  void *v14;
  int v15;
  _BYTE v16[24];

  v4 = a1;
  v5 = a2 + 16;
  v6 = static os_log_type_t.default.getter(a1);
  if (qword_1002101D8 != -1)
    swift_once(&qword_1002101D8, sub_100168748);
  v7 = qword_100218DE0;
  v8 = sub_1000A0980((uint64_t *)&unk_1002103C0);
  v9 = swift_allocObject(v8, 72, 7);
  *(_OWORD *)(v9 + 16) = xmmword_100184870;
  *(_QWORD *)(v9 + 56) = &type metadata for Bool;
  *(_QWORD *)(v9 + 64) = &protocol witness table for Bool;
  *(_BYTE *)(v9 + 32) = v4 & 1;
  os_log(_:dso:log:_:_:)(v6, &_mh_execute_header, v7, "accountStatus: %d", v15);
  swift_bridgeObjectRelease(v9);
  swift_beginAccess(v5, v16, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v5, v10);
  if (Strong)
  {
    v13 = (void *)Strong;
    v14 = (void *)swift_unknownObjectWeakLoadStrong(Strong + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_deviceDelegate, v12);

    if (v14)
    {
      objc_msgSend(v14, "accountStatusUpdateWithAvailable:forced:", v4 & 1, a3 & 1);
      swift_unknownObjectRelease(v14);
    }
  }
}

void sub_1000C5DE8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t Strong;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  Class isa;
  _BYTE v20[24];

  v3 = a1 + 16;
  swift_beginAccess(a1 + 16, v20, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v3, v4);
  if (Strong)
  {
    v6 = (char *)Strong;
    v7 = static os_log_type_t.default.getter(Strong);
    if (qword_1002101D8 != -1)
      swift_once(&qword_1002101D8, sub_100168748);
    v8 = qword_100218DE0;
    v9 = sub_1000A0980((uint64_t *)&unk_1002103C0);
    v10 = swift_allocObject(v9, 72, 7);
    *(_OWORD *)(v10 + 16) = xmmword_100184870;
    v11 = sub_1000AB31C(0, &qword_100210CC8, BTMagicPairingSettings_ptr);
    v12 = swift_bridgeObjectRetain(a2);
    v13 = Array.description.getter(v12, v11);
    v15 = v14;
    swift_bridgeObjectRelease(a2);
    *(_QWORD *)(v10 + 56) = &type metadata for String;
    *(_QWORD *)(v10 + 64) = sub_1000A0DF4();
    *(_QWORD *)(v10 + 32) = v13;
    *(_QWORD *)(v10 + 40) = v15;
    os_log(_:dso:log:_:_:)(v7, &_mh_execute_header, v8, "Legacy magic records removed: %@", 32, 2, v10);
    swift_bridgeObjectRelease(v10);
    v17 = swift_unknownObjectWeakLoadStrong(&v6[OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_deviceDelegate], v16);
    if (v17)
    {
      v18 = (void *)v17;
      isa = Array._bridgeToObjectiveC()().super.isa;
      objc_msgSend(v18, "magicPairingRecordsRemovedWithRecords:", isa);

      swift_unknownObjectRelease(v18);
    }
    else
    {

    }
  }
}

uint64_t sub_1000C5F84(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v15[16];
  uint64_t v16;
  uint64_t v17;

  v2 = type metadata accessor for CloudCoordinatorConfiguration(0);
  __chkstk_darwin(v2);
  v4 = &v15[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = sub_100129690();
  v16 = v5;
  v17 = a1;
  OS_dispatch_queue.sync<A>(execute:)(&type metadata for (), sub_1000C7160, v15, &type metadata for () + 1);
  v6 = swift_release(v5);
  v7 = static os_log_type_t.default.getter(v6);
  if (qword_1002101E0 != -1)
    swift_once(&qword_1002101E0, sub_1001687B0);
  v8 = qword_100218DE8;
  v9 = sub_1000A0980((uint64_t *)&unk_1002103C0);
  v10 = swift_allocObject(v9, 72, 7);
  *(_OWORD *)(v10 + 16) = xmmword_100184870;
  sub_1000AE548(a1, (uint64_t)v4, type metadata accessor for CloudCoordinatorConfiguration);
  v11 = String.init<A>(describing:)(v4, v2);
  v13 = v12;
  *(_QWORD *)(v10 + 56) = &type metadata for String;
  *(_QWORD *)(v10 + 64) = sub_1000A0DF4();
  *(_QWORD *)(v10 + 32) = v11;
  *(_QWORD *)(v10 + 40) = v13;
  os_log(_:dso:log:_:_:)(v7, &_mh_execute_header, v8, "Successfully cached record: %@", 30, 2, v10);
  return swift_bridgeObjectRelease(v10);
}

uint64_t sub_1000C6220()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000C6244()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 33, 7);
}

void sub_1000C6268()
{
  uint64_t v0;

  sub_1000C5CA0(*(unsigned __int8 *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_BYTE *)(v0 + 32));
}

uint64_t sub_1000C6278(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000C6288(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

void sub_1000C6290(uint64_t a1@<X8>)
{
  uint64_t v1;

  sub_1001292C4(v1, a1);
}

uint64_t sub_1000C62A8()
{
  return sub_1000C70CC((void (*)(_QWORD))&_swift_release, 40);
}

void sub_1000C62B8()
{
  uint64_t *v0;

  sub_1000C418C(v0[2], v0[3], v0[4]);
}

uint64_t sub_1000C62C4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000C62D4()
{
  return sub_1000C70CC((void (*)(_QWORD))&_swift_release, 40);
}

uint64_t sub_1000C62E4()
{
  uint64_t v0;

  return sub_1000C3200(*(_QWORD *)(v0 + 16), *(void (**)(void))(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t sub_1000C62F0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000C631C()
{
  uint64_t v0;

  return sub_10014BAD8(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1000C632C()
{
  return sub_1000C70CC((void (*)(_QWORD))&_swift_release, 40);
}

uint64_t sub_1000C633C()
{
  uint64_t v0;

  return sub_1000C2D20(*(_QWORD *)(v0 + 16), *(void (**)(void))(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t sub_1000C634C()
{
  return sub_1000C70CC((void (*)(_QWORD))&_swift_release, 40);
}

void sub_1000C635C()
{
  uint64_t v0;

  sub_1000C2A10(*(_QWORD *)(v0 + 16), *(void (**)(void))(v0 + 24), *(void (**)(void))(v0 + 32));
}

uint64_t sub_1000C6368()
{
  return sub_1000C70CC((void (*)(_QWORD))&_swift_release, 40);
}

uint64_t sub_1000C6378()
{
  uint64_t v0;

  return sub_1000C245C(*(_QWORD *)(v0 + 16), *(void (**)(_QWORD, uint64_t))(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t sub_1000C6388(void *a1)
{
  uint64_t *v1;

  return sub_1000C25BC(a1, v1[2], v1[3], v1[4]);
}

void sub_1000C6398()
{
  uint64_t v0;

  sub_1000C27CC(*(void **)(v0 + 16), *(void (**)(void *, uint64_t))(v0 + 24));
}

uint64_t sub_1000C63A4()
{
  return sub_1000C70CC((void (*)(_QWORD))&_swift_release, 40);
}

void sub_1000C63B4()
{
  uint64_t v0;

  sub_1000C1FBC(*(_QWORD *)(v0 + 16), *(void (**)(_QWORD, uint64_t))(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t sub_1000C63C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for URL(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1000C643C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for URL(0) - 8) + 80);
  return sub_1000C1C4C(*(_QWORD *)(v0 + 16), *(void (**)(void))(v0 + 24), *(_QWORD *)(v0 + 32), (char *)(v0 + ((v1 + 40) & ~v1)));
}

uint64_t sub_1000C6470()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000C6494(uint64_t a1)
{
  uint64_t v1;

  return sub_1000C111C(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), "CloudSync: Failed to remove AADeviceRecord for address: %@ error: %@", 68);
}

uint64_t sub_1000C64B8(uint64_t a1)
{
  uint64_t v1;

  return sub_1000C111C(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), "CloudSync: Failed to remove AAProxCardsRecord for address: %@ error: %@", 71);
}

uint64_t sub_1000C64E0()
{
  return sub_1000A4F0C((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000C1250);
}

void *sub_1000C64EC(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  char v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;

  v4 = v3;
  v7 = a1;
  if (a1 >> 62)
    goto LABEL_21;
  v8 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  while (v8)
  {
    v23 = v4;
    v24 = v7;
    v25 = v7 & 0xC000000000000001;
    v4 = 4;
    while (1)
    {
      v9 = v4 - 4;
      if (!v25)
        break;
      v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v4 - 4, v7);
      v11 = v4 - 3;
      if (__OFADD__(v9, 1))
        goto LABEL_20;
LABEL_9:
      v12 = v8;
      v13 = v10;
      v14 = a3;
      v15 = objc_msgSend(v10, "bluetoothAddress", v23);
      v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
      v18 = v17;

      a3 = v14;
      v19 = v16 == a2 && v18 == v14;
      if (v19)
      {
        swift_bridgeObjectRelease(v24);
LABEL_19:
        swift_bridgeObjectRelease(a3);
        return v13;
      }
      v20 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v18, a2, v14, 0);
      swift_bridgeObjectRelease(v18);
      if ((v20 & 1) != 0)
      {
        a3 = v24;
        goto LABEL_19;
      }

      ++v4;
      v8 = v12;
      v19 = v11 == v12;
      v7 = v24;
      if (v19)
      {
        swift_bridgeObjectRelease(v24);
        return 0;
      }
    }
    v10 = *(id *)(v7 + 8 * v4);
    v11 = v4 - 3;
    if (!__OFADD__(v9, 1))
      goto LABEL_9;
LABEL_20:
    __break(1u);
LABEL_21:
    if (v7 < 0)
      v21 = v7;
    else
      v21 = v7 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v7);
    v8 = _CocoaArrayWrapper.endIndex.getter(v21);
  }
  swift_bridgeObjectRelease(v7);
  return 0;
}

unint64_t sub_1000C6694()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100210CE0;
  if (!qword_100210CE0)
  {
    v1 = sub_1000AB31C(255, (unint64_t *)&qword_100210720, NSError_ptr);
    result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_100210CE0);
  }
  return result;
}

uint64_t sub_1000C66EC()
{
  return sub_1000C6D3C(48);
}

uint64_t sub_1000C66F4()
{
  uint64_t v0;

  return sub_1000C0700(*(_QWORD *)(v0 + 16), *(void (**)(void))(v0 + 24), *(_QWORD *)(v0 + 32), *(void **)(v0 + 40));
}

uint64_t sub_1000C6704()
{
  uint64_t v0;

  return sub_1000C0B7C(*(void **)(v0 + 16), *(void (**)(void))(v0 + 24), *(_QWORD *)(v0 + 32), "Invalid BT Address for addMagicSettings(%@): %@", 47);
}

uint64_t sub_1000C6730()
{
  return sub_1000C6D3C(48);
}

uint64_t sub_1000C6738()
{
  uint64_t v0;

  return sub_1000BFC1C(*(_QWORD *)(v0 + 16), *(void (**)(void))(v0 + 24), *(_QWORD *)(v0 + 32), *(void **)(v0 + 40));
}

uint64_t sub_1000C6748()
{
  uint64_t v0;

  return sub_1000C0B7C(*(void **)(v0 + 16), *(void (**)(void))(v0 + 24), *(_QWORD *)(v0 + 32), "Invalid BT Address for addDeviceMagicSettings(%@): %@", 53);
}

uint64_t sub_1000C677C()
{
  return sub_1000A4F0C((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000BF464);
}

uint64_t sub_1000C6788()
{
  return sub_1000C6EA0((void (*)(_QWORD))&_swift_release, 40);
}

uint64_t sub_1000C6798()
{
  return sub_1000C70CC((void (*)(_QWORD))&_swift_release, 40);
}

uint64_t sub_1000C67A8()
{
  uint64_t v0;

  return sub_1000BE8A0(*(_QWORD *)(v0 + 16), *(uint64_t (**)(void))(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t sub_1000C67B4()
{
  return sub_1000C70CC((void (*)(_QWORD))&_swift_bridgeObjectRelease, 40);
}

uint64_t sub_1000C67C4()
{
  uint64_t v0;

  return sub_1000BB204(*(_QWORD *)(v0 + 16), *(uint64_t (**)(uint64_t))(v0 + 24), *(_QWORD *)(v0 + 32), &qword_100210CC8, BTMagicPairingSettings_ptr, "fetched Magic Settings List - %@", 32);
}

uint64_t sub_1000C67FC()
{
  return sub_1000C70CC((void (*)(_QWORD))&_swift_release, 40);
}

void sub_1000C680C()
{
  uint64_t v0;

  sub_1000BE5AC(*(_QWORD *)(v0 + 16), *(void (**)(uint64_t, unint64_t))(v0 + 24));
}

uint64_t sub_1000C6818()
{
  return sub_1000C70CC((void (*)(_QWORD))&_swift_release, 41);
}

uint64_t sub_1000C6828()
{
  uint64_t v0;

  return sub_1000BE484(*(_QWORD *)(v0 + 16), *(uint64_t (**)(void))(v0 + 24), *(void **)(v0 + 32), *(_BYTE *)(v0 + 40));
}

uint64_t sub_1000C6838()
{
  return sub_1000C6D3C(49);
}

uint64_t sub_1000C6840()
{
  uint64_t v0;

  return sub_1000BE110(*(_QWORD *)(v0 + 16), *(uint64_t (**)(void))(v0 + 24), *(_QWORD *)(v0 + 32), *(void **)(v0 + 40), *(_BYTE *)(v0 + 48));
}

uint64_t sub_1000C6854()
{
  return sub_1000A4F0C((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000BDCB4);
}

uint64_t sub_1000C6864()
{
  return sub_1000C6D3C(48);
}

uint64_t sub_1000C686C()
{
  uint64_t v0;

  return sub_1000BD7E4(*(_QWORD *)(v0 + 16), *(void (**)(void))(v0 + 24), *(_QWORD *)(v0 + 32), *(void **)(v0 + 40));
}

uint64_t sub_1000C687C()
{
  uint64_t v0;

  return sub_1000C0B7C(*(void **)(v0 + 16), *(void (**)(void))(v0 + 24), *(_QWORD *)(v0 + 32), "Invalid BT Address for addDeviceSupportInfo(%@): %@", 51);
}

uint64_t sub_1000C68A8()
{
  return sub_1000C6D3C(48);
}

uint64_t sub_1000C68B0()
{
  uint64_t v0;

  return sub_1000BCF3C(*(_QWORD *)(v0 + 16), *(void (**)(void))(v0 + 24), *(_QWORD *)(v0 + 32), *(void **)(v0 + 40));
}

uint64_t sub_1000C68C0()
{
  uint64_t v0;

  return sub_1000C0B7C(*(void **)(v0 + 16), *(void (**)(void))(v0 + 24), *(_QWORD *)(v0 + 32), "Invalid BT Address for addDeviceSupportInformation(%@): %@", 58);
}

uint64_t sub_1000C68F4()
{
  return sub_1000A4F0C((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000BB3D8);
}

uint64_t sub_1000C6900()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1000C692C()
{
  uint64_t v0;

  return sub_1000BCCF0(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(uint64_t (**)(_QWORD))(v0 + 32));
}

uint64_t sub_1000C693C()
{
  return sub_1000C6BC0(type metadata accessor for DeviceSupportInformationRecord, (uint64_t (*)(unint64_t, _QWORD, _QWORD))sub_1000BCDE8);
}

uint64_t sub_1000C6950()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v1 = (int *)type metadata accessor for BTDeferredRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + 16));
  v6 = v0 + v4 + v1[6];
  v7 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + v1[7] + 8));
  v8 = (uint64_t *)(v0 + v4 + v1[9]);
  v9 = v8[1];
  if (v9 >> 60 != 15)
    sub_1000A103C(*v8, v9);
  v10 = (v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v11 = v10 + 16;
  swift_release(*(_QWORD *)(v0 + v10 + 8));
  return swift_deallocObject(v0, v11, v3 | 7);
}

uint64_t sub_1000C6A2C()
{
  return sub_1000C6BC0(type metadata accessor for BTDeferredRecord, (uint64_t (*)(unint64_t, _QWORD, _QWORD))sub_1000BCBA0);
}

uint64_t sub_1000C6A44()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = (int *)type metadata accessor for DeviceSupportInformationRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = v0 + v4;
  v8 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  sub_1000A103C(*(_QWORD *)(v7 + v1[5]), *(_QWORD *)(v7 + v1[5] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + v1[6] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + v1[7] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + v1[8] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + v1[9] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + v1[10] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + v1[11] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + v1[12] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + v1[13] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + v1[14] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + v1[15] + 8));
  v9 = v7 + v1[16];
  v10 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  swift_release(*(_QWORD *)(v0 + v6 + 8));
  return swift_deallocObject(v0, v6 + 16, v5);
}

uint64_t sub_1000C6BAC()
{
  return sub_1000C6BC0(type metadata accessor for DeviceSupportInformationRecord, (uint64_t (*)(unint64_t, _QWORD, _QWORD))sub_1000BCA94);
}

uint64_t sub_1000C6BC0(uint64_t (*a1)(_QWORD), uint64_t (*a2)(unint64_t, _QWORD, _QWORD))
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD *v5;

  v3 = *(_QWORD *)(a1(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (_QWORD *)(v2 + ((*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8));
  return a2(v2 + v4, *v5, v5[1]);
}

uint64_t sub_1000C6C18()
{
  return sub_1000C70CC((void (*)(_QWORD))&_swift_release, 40);
}

uint64_t sub_1000C6C28()
{
  uint64_t v0;

  return sub_1000BA164(*(_QWORD *)(v0 + 16), *(uint64_t (**)(void))(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t sub_1000C6C34()
{
  return sub_1000C70CC((void (*)(_QWORD))&_swift_bridgeObjectRelease, 40);
}

uint64_t sub_1000C6C44()
{
  uint64_t v0;

  return sub_1000BB204(*(_QWORD *)(v0 + 16), *(uint64_t (**)(uint64_t))(v0 + 24), *(_QWORD *)(v0 + 32), (unint64_t *)&unk_100212280, BTCloudDeviceSupportInformation_ptr, "fetched DeviceSupportInfo List - %@", 35);
}

uint64_t sub_1000C6C80()
{
  return sub_1000A4F0C((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000B9E88);
}

uint64_t sub_1000C6C90()
{
  return sub_1000C6D3C(48);
}

uint64_t sub_1000C6C98()
{
  uint64_t v0;

  return sub_1000B962C(*(_QWORD *)(v0 + 16), *(void (**)(void))(v0 + 24), *(_QWORD *)(v0 + 32), *(void **)(v0 + 40));
}

uint64_t sub_1000C6CA4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000C6CC8()
{
  uint64_t v0;

  return sub_1000B9DF8(*(void (**)(void))(v0 + 16));
}

uint64_t sub_1000C6CD0(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000C6D18()
{
  return sub_1000C6D3C(48);
}

uint64_t sub_1000C6D20()
{
  uint64_t v0;

  return sub_1000B90CC(*(_QWORD *)(v0 + 16), *(void (**)(void))(v0 + 24), *(_QWORD *)(v0 + 32), *(void **)(v0 + 40));
}

uint64_t sub_1000C6D34()
{
  return sub_1000C6D3C(48);
}

uint64_t sub_1000C6D3C(uint64_t a1)
{
  uint64_t v1;

  swift_release(*(_QWORD *)(v1 + 16));
  swift_release(*(_QWORD *)(v1 + 32));

  return swift_deallocObject(v1, a1, 7);
}

uint64_t sub_1000C6D7C()
{
  uint64_t v0;

  return sub_1000B8BAC(*(_QWORD *)(v0 + 16), *(void (**)(void))(v0 + 24), *(_QWORD *)(v0 + 32), *(void **)(v0 + 40));
}

uint64_t sub_1000C6D8C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000C6DB8()
{
  uint64_t v0;

  return sub_1000C0B7C(*(void **)(v0 + 16), *(void (**)(void))(v0 + 24), *(_QWORD *)(v0 + 32), "Invalid BT Address for addDevice(%@): %@", 40);
}

uint64_t sub_1000C6DE4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  swift_errorRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000C6E10()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(v0 + 16))(*(_QWORD *)(v0 + 32));
}

uint64_t sub_1000C6E38()
{
  return sub_1000C70CC((void (*)(_QWORD))&_swift_release, 40);
}

void sub_1000C6E48()
{
  uint64_t v0;

  sub_1000B88FC(*(_QWORD *)(v0 + 16), *(void (**)(uint64_t, unint64_t))(v0 + 24));
}

uint64_t sub_1000C6E54()
{
  uint64_t v0;

  return sub_1000B8848(v0);
}

uint64_t sub_1000C6E5C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000C6E88()
{
  uint64_t v0;

  return sub_1000B8560(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_1000C6E90()
{
  return sub_1000C6EA0((void (*)(_QWORD))&_swift_bridgeObjectRelease, 48);
}

uint64_t sub_1000C6EA0(void (*a1)(_QWORD), uint64_t a2)
{
  uint64_t v2;

  a1(*(_QWORD *)(v2 + 24));

  return swift_deallocObject(v2, a2, 7);
}

void sub_1000C6EDC()
{
  uint64_t v0;

  sub_1000B7D8C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(void ***)(v0 + 40));
}

uint64_t sub_1000C6EE8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000C6EFC()
{
  return sub_1000A4F0C((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000B72B4);
}

uint64_t sub_1000C6F08()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(v0 + 16))(0);
}

uint64_t sub_1000C6F2C()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = (int *)type metadata accessor for DeviceRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release(*(_QWORD *)(v0 + 24));
  v7 = v0 + v4;
  sub_1000A103C(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v8 = v0 + v4 + v1[5];
  v9 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + v1[6] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + v1[7] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + v1[8] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + v1[9] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + v1[10] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + v1[11] + 8));
  v10 = v7 + v1[12];
  v11 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  return swift_deallocObject(v0, v5, v6);
}

void sub_1000C7044()
{
  uint64_t v0;
  void (*v1)(void);
  id v2;

  type metadata accessor for DeviceRecord(0);
  v1 = *(void (**)(void))(v0 + 16);
  v2 = sub_1000B7110();
  v1();

}

uint64_t sub_1000C70A0()
{
  return sub_1000C70CC((void (*)(_QWORD))&_swift_release, 40);
}

uint64_t sub_1000C70B0()
{
  uint64_t v0;

  return sub_1000B6278(*(_QWORD *)(v0 + 16), *(uint64_t (**)(void))(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t sub_1000C70BC()
{
  return sub_1000C70CC((void (*)(_QWORD))&_swift_bridgeObjectRelease, 40);
}

uint64_t sub_1000C70CC(void (*a1)(_QWORD), uint64_t a2)
{
  uint64_t v2;

  a1(*(_QWORD *)(v2 + 16));
  swift_release(*(_QWORD *)(v2 + 32));
  return swift_deallocObject(v2, a2, 7);
}

uint64_t sub_1000C7108()
{
  uint64_t v0;

  return sub_1000BB204(*(_QWORD *)(v0 + 16), *(uint64_t (**)(uint64_t))(v0 + 24), *(_QWORD *)(v0 + 32), &qword_100210D00, BTCloudDevice_ptr, "fetched Device List - %@", 24);
}

uint64_t sub_1000C7140()
{
  uint64_t v0;

  return sub_1000B5BC4(v0);
}

uint64_t sub_1000C7148()
{
  uint64_t v0;

  return sub_1000B5A3C(v0);
}

void sub_1000C7150()
{
  uint64_t v0;

  sub_1000B5808(v0);
}

uint64_t sub_1000C7158()
{
  uint64_t v0;

  return sub_1000B58F0(v0);
}

void sub_1000C7160()
{
  uint64_t v0;

  sub_100123F7C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1000C7178()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

void sub_1000C719C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_1000C23E8(a1, a2, *(_QWORD *)(v2 + 16));
}

void sub_1000C71A4(uint64_t a1)
{
  uint64_t v1;

  sub_1000BB354(a1, *(_QWORD *)(v1 + 16), &qword_100210CC8, BTMagicPairingSettings_ptr);
}

void sub_1000C71CC(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  sub_1000B8B3C(a1, a2, *(_QWORD *)(v2 + 16));
}

void sub_1000C71D4(uint64_t a1)
{
  uint64_t v1;

  sub_1000BB354(a1, *(_QWORD *)(v1 + 16), (unint64_t *)&unk_100212280, BTCloudDeviceSupportInformation_ptr);
}

void sub_1000C71FC(uint64_t a1)
{
  uint64_t v1;

  sub_1000BB354(a1, *(_QWORD *)(v1 + 16), &qword_100210D00, BTCloudDevice_ptr);
}

uint64_t sub_1000C7224(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = sub_1000A4E14(a2);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v4);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000C7264()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

const char *sub_1000C7288(void *a1)
{
  uint64_t v1;

  return sub_1000C7B48(a1, *(_QWORD *)(v1 + 16));
}

void sub_1000C7290()
{
  uint64_t v0;

  sub_1000B5188(v0);
}

uint64_t sub_1000C7298(uint64_t a1)
{
  swift_unknownObjectWeakDestroy(a1);
  return a1;
}

uint64_t storeEnumTagSinglePayload for DeviceManager.DeviceManagerError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1000C7308 + 4 * byte_10018637A[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1000C733C + 4 * byte_100186375[v4]))();
}

uint64_t sub_1000C733C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000C7344(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000C734CLL);
  return result;
}

uint64_t sub_1000C7358(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000C7360);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1000C7364(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000C736C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DeviceManager.DeviceManagerError()
{
  return &type metadata for DeviceManager.DeviceManagerError;
}

uint64_t getEnumTagSinglePayload for AudioAccessoryFeatures(unsigned int *a1, int a2)
{
  int v2;
  int v3;

  if (!a2)
    return 0;
  if ((a2 + 1) >= 0x10000)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) < 0x100)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
    return *a1;
  if (v3 == 2)
    return *(unsigned __int16 *)a1;
  return *(unsigned __int8 *)a1;
}

uint64_t storeEnumTagSinglePayload for AudioAccessoryFeatures(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1000C741C + 4 * byte_10018637F[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1000C743C + 4 * byte_100186384[v4]))();
}

_BYTE *sub_1000C741C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1000C743C(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1000C7444(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1000C744C(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1000C7454(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1000C745C(_DWORD *result)
{
  *result = 0;
  return result;
}

uint64_t sub_1000C7468()
{
  return 0;
}

ValueMetadata *type metadata accessor for AudioAccessoryFeatures()
{
  return &type metadata for AudioAccessoryFeatures;
}

unint64_t sub_1000C7484()
{
  unint64_t result;

  result = qword_100210D10;
  if (!qword_100210D10)
  {
    result = swift_getWitnessTable(&unk_100186448, &type metadata for AudioAccessoryFeatures);
    atomic_store(result, (unint64_t *)&qword_100210D10);
  }
  return result;
}

unint64_t sub_1000C74D0()
{
  unint64_t result;

  result = qword_100210D18;
  if (!qword_100210D18)
  {
    result = swift_getWitnessTable(&unk_1001864F0, &type metadata for DeviceManager.DeviceManagerError);
    atomic_store(result, (unint64_t *)&qword_100210D18);
  }
  return result;
}

unint64_t sub_1000C7514()
{
  unint64_t result;

  result = qword_100210D20;
  if (!qword_100210D20)
  {
    result = swift_getWitnessTable(&unk_100186470, &type metadata for DeviceManager.DeviceManagerError);
    atomic_store(result, (unint64_t *)&qword_100210D20);
  }
  return result;
}

uint64_t *DarwinNotificationManager.shared.unsafeMutableAddressor()
{
  if (qword_100210158 != -1)
    swift_once(&qword_100210158, sub_1000C7858);
  return &static DarwinNotificationManager.shared;
}

id sub_1000C7858()
{
  id result;

  result = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for DarwinNotificationManager()), "init");
  static DarwinNotificationManager.shared = (uint64_t)result;
  return result;
}

id static DarwinNotificationManager.shared.getter()
{
  if (qword_100210158 != -1)
    swift_once(&qword_100210158, sub_1000C7858);
  return (id)static DarwinNotificationManager.shared;
}

uint64_t DarwinNotificationManager.registerHelper(helper:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _BYTE v9[24];

  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC15audioaccessoryd25DarwinNotificationManager_helpers);
  swift_beginAccess(v3, v9, 33, 0);
  v4 = swift_retain(a1);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v4);
  v6 = *(_QWORD *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v5 = *(_QWORD *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x18);
  if (v6 >= v5 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v5 > 1, v6 + 1, 1);
  v7 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v6, a1);
  specialized Array._endMutation()(v7);
  return swift_endAccess(v9);
}

uint64_t DarwinNotificationManager.unregisterHelper(helper:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _BYTE v9[24];

  v3 = (uint64_t *)(v1 + OBJC_IVAR____TtC15audioaccessoryd25DarwinNotificationManager_helpers);
  swift_beginAccess(v3, v9, 1, 0);
  v4 = *v3;
  swift_retain(a1);
  v5 = swift_bridgeObjectRetain(v4);
  v6 = sub_1000C7FB8(v5, a1);
  swift_bridgeObjectRelease(v4);
  swift_release(a1);
  v7 = *v3;
  *v3 = (uint64_t)v6;
  return swift_bridgeObjectRelease(v7);
}

Swift::Void __swiftcall DarwinNotificationManager.setUp()()
{
  void *v0;
  void *v1;
  NSObject *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  id v6;
  _QWORD v7[5];
  uint64_t v8;

  v1 = v0;
  sub_1000C8110();
  v2 = static OS_dispatch_queue.main.getter();
  v3 = swift_allocObject(&unk_1001E8808, 24, 7);
  *(_QWORD *)(v3 + 16) = v0;
  v7[4] = sub_1000C7288;
  v8 = v3;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 1107296256;
  v7[2] = sub_1000C7E54;
  v7[3] = &unk_1001E8820;
  v4 = _Block_copy(v7);
  v5 = v8;
  v6 = v1;
  swift_release(v5);
  xpc_set_event_stream_handler("com.apple.notifyd.matching", v2, v4);
  _Block_release(v4);

}

const char *sub_1000C7B48(void *a1, uint64_t a2)
{
  const char *result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  NSString v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  void (*v38)(uint64_t);
  _BYTE v39[24];

  result = xpc_dictionary_get_string(a1, _xpc_event_key_name);
  if (result)
  {
    v4 = String.init(cString:)();
    v6 = v5;
    v7 = static os_log_type_t.default.getter(v4);
    if (qword_1002101C0 != -1)
      swift_once(&qword_1002101C0, sub_10016864C);
    v8 = qword_100218DC8;
    v37 = sub_1000A0980((uint64_t *)&unk_1002103C0);
    v9 = swift_allocObject(v37, 72, 7);
    *(_OWORD *)(v9 + 16) = xmmword_100184870;
    *(_QWORD *)(v9 + 56) = &type metadata for String;
    v36 = sub_1000A0DF4();
    *(_QWORD *)(v9 + 64) = v36;
    *(_QWORD *)(v9 + 32) = v4;
    *(_QWORD *)(v9 + 40) = v6;
    swift_bridgeObjectRetain(v6);
    os_log(_:dso:log:_:_:)(v7, &_mh_execute_header, v8, "On xpc event stream, com.apple.notifyd.matching, notification %@", 64, 2, v9);
    swift_bridgeObjectRelease(v9);
    v10 = (uint64_t *)(a2 + OBJC_IVAR____TtC15audioaccessoryd25DarwinNotificationManager_helpers);
    swift_beginAccess(v10, v39, 0, 0);
    v11 = *v10;
    if ((unint64_t)*v10 >> 62)
    {
      if (v11 < 0)
        v33 = *v10;
      else
        v33 = v11 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v11);
      result = (const char *)_CocoaArrayWrapper.endIndex.getter(v33);
      v12 = (uint64_t)result;
      if (result)
        goto LABEL_6;
    }
    else
    {
      v12 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10);
      result = (const char *)swift_bridgeObjectRetain(*v10);
      if (v12)
      {
LABEL_6:
        if (v12 < 1)
        {
          __break(1u);
          return result;
        }
        v13 = 0;
        v14 = v11 & 0xC000000000000001;
        v34 = v11 & 0xC000000000000001;
        v35 = v11;
        do
        {
          if (v14)
          {
            v15 = specialized _ArrayBuffer._getElementSlowPath(_:)(v13, v11);
          }
          else
          {
            v15 = *(_QWORD *)(v11 + 8 * v13 + 32);
            swift_retain(v15);
          }
          v16 = String._bridgeToObjectiveC()();
          v17 = *(_QWORD *)(v15 + 16);
          if (*(_QWORD *)(v17 + 16))
          {
            swift_bridgeObjectRetain(*(_QWORD *)(v15 + 16));
            v18 = sub_1000AA070((uint64_t)v16);
            if ((v19 & 1) != 0)
            {
              v20 = *(_QWORD *)(v17 + 56) + 16 * v18;
              v21 = *(_QWORD *)(v20 + 8);
              v38 = *(void (**)(uint64_t))v20;
              swift_retain(v21);
              v22 = swift_bridgeObjectRelease(v17);
              v23 = static os_log_type_t.default.getter(v22);
              v24 = qword_100218DC8;
              v25 = v4;
              v26 = v6;
              v27 = swift_allocObject(v37, 72, 7);
              *(_OWORD *)(v27 + 16) = xmmword_100184870;
              v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
              *(_QWORD *)(v27 + 56) = &type metadata for String;
              *(_QWORD *)(v27 + 64) = v36;
              *(_QWORD *)(v27 + 32) = v28;
              *(_QWORD *)(v27 + 40) = v29;
              os_log(_:dso:log:_:_:)(v23, &_mh_execute_header, v24, "Invoking callback, notification, %@", 35, 2, v27);
              v30 = v27;
              v6 = v26;
              v4 = v25;
              v14 = v34;
              v31 = swift_bridgeObjectRelease(v30);
              v38(v31);
              swift_release(v15);

              v32 = v21;
              v11 = v35;
              swift_release(v32);
            }
            else
            {
              swift_release(v15);

              swift_bridgeObjectRelease(v17);
            }
          }
          else
          {
            swift_release(v15);

          }
          ++v13;
        }
        while (v12 != v13);
      }
    }
    swift_bridgeObjectRelease(v6);
    return (const char *)swift_bridgeObjectRelease(v11);
  }
  return result;
}

uint64_t sub_1000C7E54(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void (*v4)(uint64_t);
  uint64_t v5;

  v4 = *(void (**)(uint64_t))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v5 = swift_unknownObjectRetain(a2);
  v4(v5);
  swift_release(v3);
  return swift_unknownObjectRelease(a2);
}

id DarwinNotificationManager.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for DarwinNotificationManager();
  return objc_msgSendSuper2(&v2, "dealloc");
}

_QWORD *sub_1000C7FB8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;

  if ((unint64_t)a1 >> 62)
    goto LABEL_16;
  v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v4)
  {
    while (1)
    {
      v5 = 0;
      while ((a1 & 0xC000000000000001) != 0)
      {
        v8 = specialized _ArrayBuffer._getElementSlowPath(_:)(v5, a1);
        v9 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_13:
          __break(1u);
          return _swiftEmptyArrayStorage;
        }
LABEL_9:
        if (v8 == a2)
        {
          swift_release(a2);
        }
        else
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          v6 = _swiftEmptyArrayStorage[2];
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v6);
          v7 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v6, v8);
          specialized ContiguousArray._endMutation()(v7);
        }
        ++v5;
        if (v9 == v4)
          return _swiftEmptyArrayStorage;
      }
      if (v5 < *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
        break;
      __break(1u);
LABEL_16:
      if (a1 < 0)
        v11 = a1;
      else
        v11 = a1 & 0xFFFFFFFFFFFFFF8;
      v4 = _CocoaArrayWrapper.endIndex.getter(v11);
      if (!v4)
        return _swiftEmptyArrayStorage;
    }
    v8 = *(_QWORD *)(a1 + 8 * v5 + 32);
    swift_retain(v8);
    v9 = v5 + 1;
    if (__OFADD__(v5, 1))
      goto LABEL_13;
    goto LABEL_9;
  }
  return _swiftEmptyArrayStorage;
}

unint64_t sub_1000C8110()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002119F0;
  if (!qword_1002119F0)
  {
    v1 = objc_opt_self(OS_dispatch_queue);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1002119F0);
  }
  return result;
}

uint64_t sub_1000C814C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000C8170(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000C8180(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t type metadata accessor for DarwinNotificationManager()
{
  return objc_opt_self(_TtC15audioaccessoryd25DarwinNotificationManager);
}

uint64_t sub_1000C81B8()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t result;
  uint64_t v9;

  v0 = sub_1000A0980((uint64_t *)&unk_100210840);
  __chkstk_darwin(v0);
  v2 = (char *)&v9 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for URL(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000A09C0(v5, qword_100218C90);
  sub_1000A0A00(v3, (uint64_t)qword_100218C90);
  URL.init(string:)(0x6552646568636143, 0xED00007364726F63);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v7, v2, v3);
    URL.appendingPathComponent(_:isDirectory:)(0x746553636967614DLL, 0xED000073676E6974, 1);
    return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  }
  return result;
}

uint64_t sub_1000C8310()
{
  uint64_t v0;
  uint64_t v1;
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  Swift::String v18;
  uint64_t v19;
  uint64_t v20;
  Swift::String v21;
  void *object;
  Swift::String v23;
  uint64_t *v24;
  void *v25;
  uint64_t v26;
  Swift::String v27;
  Swift::String v28;
  uint64_t *v29;
  uint64_t v30;
  void *v31;
  Swift::String v32;
  Swift::String v33;
  uint64_t *v34;
  uint64_t v35;
  void *v36;
  Swift::String v37;
  Swift::String v38;
  Swift::String v39;
  void *v40;
  Swift::String v41;
  Swift::String v42;
  void *v43;
  Swift::String v44;
  Swift::String v45;
  void *v46;
  Swift::String v47;
  Swift::String v48;
  void *v49;
  Swift::String v50;
  Swift::String v51;
  void *v52;
  Swift::String v53;
  Swift::String v54;
  void *v55;
  Swift::String v56;
  uint64_t *v57;
  uint64_t v58;
  void *v59;
  Swift::String v60;
  Swift::String v61;
  uint64_t *v62;
  uint64_t v63;
  void *v64;
  Swift::String v65;
  Swift::String v66;
  uint64_t *v67;
  uint64_t v68;
  void *v69;
  Swift::String v70;
  Swift::String v71;
  uint64_t *v72;
  uint64_t v73;
  void *v74;
  Swift::String v75;
  Swift::String v76;
  uint64_t *v77;
  uint64_t v78;
  void *v79;
  Swift::String v80;
  Swift::String v81;
  uint64_t *v82;
  uint64_t v83;
  void *v84;
  Swift::String v85;
  Swift::String v86;
  uint64_t *v87;
  uint64_t v88;
  void *v89;
  Swift::String v90;
  Swift::String v91;
  uint64_t *v92;
  uint64_t v93;
  void *v94;
  Swift::String v95;
  Swift::String v96;
  uint64_t *v97;
  uint64_t v98;
  void *v99;
  Swift::String v100;
  Swift::String v101;
  uint64_t *v102;
  uint64_t v103;
  void *v104;
  Swift::String v105;
  Swift::String v106;
  uint64_t *v107;
  uint64_t v108;
  void *v109;
  Swift::String v110;
  Swift::String v111;
  uint64_t *v112;
  uint64_t v113;
  void *v114;
  Swift::String v115;
  Swift::String v116;
  uint64_t *v117;
  uint64_t v118;
  void *v119;
  Swift::String v120;
  Swift::String v121;
  uint64_t v122;
  unint64_t v123;
  Swift::String v124;
  id v125;
  void *v126;
  char *v127;
  uint64_t v128;
  void (*v129)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unsigned int (*v134)(char *, uint64_t, uint64_t);
  unsigned int v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  void *v140;
  Class isa;
  id v142;
  uint64_t v143;
  void *v144;
  void *v145;
  char *v146;
  uint64_t v147;
  void *v148;
  Class v149;
  id v150;
  void *v151;
  Swift::String v152;
  Swift::String v153;
  id v154;
  void *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  unint64_t v159;
  unsigned int (*v160)(uint64_t, uint64_t, uint64_t);
  uint64_t v161;
  uint64_t v162;
  Class v163;
  uint64_t v164;
  char *v165;
  void *v166;
  Class v167;
  id v168;
  uint64_t v169;
  void *v170;
  void *v171;
  uint64_t v172;
  void *v173;
  Class v174;
  id v175;
  void *v176;
  Swift::String v177;
  Swift::String v178;
  id v179;
  void *v180;
  uint64_t v181;
  void *v182;
  void *v183;
  Swift::String v184;
  Swift::String v185;
  id v186;
  void *v187;
  uint64_t v188;
  void *v189;
  void *v190;
  Swift::String v191;
  uint64_t v192;
  void *v193;
  Swift::String v194;
  uint64_t v196;
  char *v197;
  void (*v198)(uint64_t, uint64_t, uint64_t, uint64_t);
  unsigned int (*v199)(uint64_t, uint64_t, uint64_t);
  unint64_t v200;
  char *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  char *v205;
  uint64_t v206;
  Class v207;
  uint64_t v208;
  unint64_t v209;

  v1 = v0;
  v2 = (int *)type metadata accessor for MagicPairingSettingsRecord(0);
  __chkstk_darwin(v2);
  v202 = (uint64_t)&v196 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v205 = (char *)&v196 - v5;
  v204 = type metadata accessor for Date(0);
  v206 = *(_QWORD *)(v204 - 8);
  __chkstk_darwin(v204);
  v197 = (char *)&v196 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1000A0980((uint64_t *)&unk_1002103D0);
  __chkstk_darwin(v7);
  v9 = (char *)&v196 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v201 = (char *)&v196 - v11;
  __chkstk_darwin(v12);
  v14 = (char *)&v196 - v13;
  __chkstk_darwin(v15);
  v17 = (char *)&v196 - v16;
  v207 = sub_1000AB790();
  v208 = 0;
  v209 = 0xE000000000000000;
  _StringGuts.grow(_:)(436);
  v18._countAndFlagsBits = 0xD00000000000001DLL;
  v18._object = (void *)0x80000001001ACCD0;
  String.append(_:)(v18);
  v19 = type metadata accessor for UUID(0);
  v20 = sub_1000A0940((unint64_t *)&unk_100210750, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v21._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v19, v20);
  object = v21._object;
  String.append(_:)(v21);
  swift_bridgeObjectRelease(object);
  v23._countAndFlagsBits = 8236;
  v23._object = (void *)0xE200000000000000;
  String.append(_:)(v23);
  v24 = (uint64_t *)(v0 + v2[6]);
  v26 = *v24;
  v25 = (void *)v24[1];
  swift_bridgeObjectRetain(v25);
  v27._countAndFlagsBits = v26;
  v27._object = v25;
  String.append(_:)(v27);
  swift_bridgeObjectRelease(v25);
  v28._countAndFlagsBits = 0x203A646970202CLL;
  v28._object = (void *)0xE700000000000000;
  String.append(_:)(v28);
  v29 = (uint64_t *)(v0 + v2[13]);
  v30 = *v29;
  v31 = (void *)v29[1];
  swift_bridgeObjectRetain(v31);
  v32._countAndFlagsBits = v30;
  v32._object = v31;
  String.append(_:)(v32);
  swift_bridgeObjectRelease(v31);
  v33._countAndFlagsBits = 0x203A646976202CLL;
  v33._object = (void *)0xE700000000000000;
  String.append(_:)(v33);
  v34 = (uint64_t *)(v0 + v2[14]);
  v35 = *v34;
  v36 = (void *)v34[1];
  swift_bridgeObjectRetain(v36);
  v37._countAndFlagsBits = v35;
  v37._object = v36;
  String.append(_:)(v37);
  swift_bridgeObjectRelease(v36);
  v38._countAndFlagsBits = 0x72657473616D202CLL;
  v38._object = (void *)0xEE00203A746E6948;
  String.append(_:)(v38);
  Data.hexString.getter(*(_QWORD *)(v1 + v2[8]), *(_QWORD *)(v1 + v2[8] + 8));
  v40 = v39._object;
  String.append(_:)(v39);
  swift_bridgeObjectRelease(v40);
  v41._countAndFlagsBits = 0x72657473616D202CLL;
  v41._object = (void *)0xED0000203A79654BLL;
  String.append(_:)(v41);
  Data.hexString.getter(*(_QWORD *)(v1 + v2[7]), *(_QWORD *)(v1 + v2[7] + 8));
  v43 = v42._object;
  String.append(_:)(v42);
  swift_bridgeObjectRelease(v43);
  v44._object = (void *)0x80000001001ACCF0;
  v44._countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v44);
  Data.hexString.getter(*(_QWORD *)(v1 + v2[10]), *(_QWORD *)(v1 + v2[10] + 8));
  v46 = v45._object;
  String.append(_:)(v45);
  swift_bridgeObjectRelease(v46);
  v47._object = (void *)0x80000001001ACD10;
  v47._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v47);
  Data.hexString.getter(*(_QWORD *)(v1 + v2[9]), *(_QWORD *)(v1 + v2[9] + 8));
  v49 = v48._object;
  String.append(_:)(v48);
  swift_bridgeObjectRelease(v49);
  v50._object = (void *)0x80000001001ACD30;
  v50._countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v50);
  Data.hexString.getter(*(_QWORD *)(v1 + v2[12]), *(_QWORD *)(v1 + v2[12] + 8));
  v52 = v51._object;
  String.append(_:)(v51);
  swift_bridgeObjectRelease(v52);
  v53._countAndFlagsBits = 0x203A6B7269202CLL;
  v53._object = (void *)0xE700000000000000;
  String.append(_:)(v53);
  Data.hexString.getter(*(_QWORD *)(v1 + v2[11]), *(_QWORD *)(v1 + v2[11] + 8));
  v55 = v54._object;
  String.append(_:)(v54);
  swift_bridgeObjectRelease(v55);
  v56._countAndFlagsBits = 0x6E6F74747562202CLL;
  v56._object = (void *)0xEF203A7365646F4DLL;
  String.append(_:)(v56);
  v57 = (uint64_t *)(v0 + v2[15]);
  v58 = *v57;
  v59 = (void *)v57[1];
  swift_bridgeObjectRetain(v59);
  v60._countAndFlagsBits = v58;
  v60._object = v59;
  String.append(_:)(v60);
  swift_bridgeObjectRelease(v59);
  v61._countAndFlagsBits = 0x3A726F6C6F63202CLL;
  v61._object = (void *)0xE900000000000020;
  String.append(_:)(v61);
  v62 = (uint64_t *)(v0 + v2[16]);
  v63 = *v62;
  v64 = (void *)v62[1];
  swift_bridgeObjectRetain(v64);
  v65._countAndFlagsBits = v63;
  v65._object = v64;
  String.append(_:)(v65);
  swift_bridgeObjectRelease(v64);
  v66._object = (void *)0x80000001001ACD50;
  v66._countAndFlagsBits = 0xD000000000000019;
  String.append(_:)(v66);
  v67 = (uint64_t *)(v0 + v2[17]);
  v68 = *v67;
  v69 = (void *)v67[1];
  swift_bridgeObjectRetain(v69);
  v70._countAndFlagsBits = v68;
  v70._object = v69;
  String.append(_:)(v70);
  swift_bridgeObjectRelease(v69);
  v71._object = (void *)0x80000001001ACD70;
  v71._countAndFlagsBits = 0xD000000000000019;
  String.append(_:)(v71);
  v72 = (uint64_t *)(v0 + v2[18]);
  v73 = *v72;
  v74 = (void *)v72[1];
  swift_bridgeObjectRetain(v74);
  v75._countAndFlagsBits = v73;
  v75._object = v74;
  String.append(_:)(v75);
  swift_bridgeObjectRelease(v74);
  v76._object = (void *)0x80000001001ACD90;
  v76._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v76);
  v77 = (uint64_t *)(v0 + v2[21]);
  v78 = *v77;
  v79 = (void *)v77[1];
  swift_bridgeObjectRetain(v79);
  v80._countAndFlagsBits = v78;
  v80._object = v79;
  String.append(_:)(v80);
  swift_bridgeObjectRelease(v79);
  v81._object = (void *)0x80000001001ACDB0;
  v81._countAndFlagsBits = 0xD000000000000015;
  String.append(_:)(v81);
  v82 = (uint64_t *)(v0 + v2[19]);
  v83 = *v82;
  v84 = (void *)v82[1];
  swift_bridgeObjectRetain(v84);
  v85._countAndFlagsBits = v83;
  v85._object = v84;
  String.append(_:)(v85);
  swift_bridgeObjectRelease(v84);
  v86._countAndFlagsBits = 0xD000000000000017;
  v86._object = (void *)0x80000001001ACDD0;
  String.append(_:)(v86);
  v87 = (uint64_t *)(v0 + v2[20]);
  v88 = *v87;
  v89 = (void *)v87[1];
  swift_bridgeObjectRetain(v89);
  v90._countAndFlagsBits = v88;
  v90._object = v89;
  String.append(_:)(v90);
  swift_bridgeObjectRelease(v89);
  v91._object = (void *)0xEB00000000203A74;
  v91._countAndFlagsBits = 0x656863746172202CLL;
  String.append(_:)(v91);
  v92 = (uint64_t *)(v0 + v2[24]);
  v93 = *v92;
  v94 = (void *)v92[1];
  swift_bridgeObjectRetain(v94);
  v95._countAndFlagsBits = v93;
  v95._object = v94;
  String.append(_:)(v95);
  swift_bridgeObjectRelease(v94);
  v96._object = (void *)0x80000001001ACDF0;
  v96._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v96);
  v97 = (uint64_t *)(v0 + v2[26]);
  v98 = *v97;
  v99 = (void *)v97[1];
  swift_bridgeObjectRetain(v99);
  v100._countAndFlagsBits = v98;
  v100._object = v99;
  String.append(_:)(v100);
  swift_bridgeObjectRelease(v99);
  v101._object = (void *)0x80000001001ACE10;
  v101._countAndFlagsBits = 0xD000000000000015;
  String.append(_:)(v101);
  v102 = (uint64_t *)(v0 + v2[27]);
  v103 = *v102;
  v104 = (void *)v102[1];
  swift_bridgeObjectRetain(v104);
  v105._countAndFlagsBits = v103;
  v105._object = v104;
  String.append(_:)(v105);
  swift_bridgeObjectRelease(v104);
  v106._countAndFlagsBits = 0x6F6973726576202CLL;
  v106._object = (void *)0xEB00000000203A6ELL;
  String.append(_:)(v106);
  v107 = (uint64_t *)(v0 + v2[28]);
  v108 = *v107;
  v109 = (void *)v107[1];
  swift_bridgeObjectRetain(v109);
  v110._countAndFlagsBits = v108;
  v110._object = v109;
  String.append(_:)(v110);
  swift_bridgeObjectRelease(v109);
  v111._countAndFlagsBits = 0xD00000000000001CLL;
  v111._object = (void *)0x80000001001ACE30;
  String.append(_:)(v111);
  v112 = (uint64_t *)(v0 + v2[22]);
  v113 = *v112;
  v114 = (void *)v112[1];
  swift_bridgeObjectRetain(v114);
  v115._countAndFlagsBits = v113;
  v115._object = v114;
  String.append(_:)(v115);
  swift_bridgeObjectRelease(v114);
  v116._countAndFlagsBits = 0xD000000000000026;
  v116._object = (void *)0x80000001001ACE50;
  String.append(_:)(v116);
  v117 = (uint64_t *)(v0 + v2[23]);
  v118 = *v117;
  v119 = (void *)v117[1];
  swift_bridgeObjectRetain(v119);
  v120._countAndFlagsBits = v118;
  v120._object = v119;
  String.append(_:)(v120);
  swift_bridgeObjectRelease(v119);
  v121._countAndFlagsBits = 2604;
  v121._object = (void *)0xE200000000000000;
  String.append(_:)(v121);
  v122 = v208;
  v123 = v209;
  v208 = 0;
  v209 = 0xE000000000000000;
  _StringGuts.grow(_:)(59);
  v124._countAndFlagsBits = 0x7461657263202020;
  v124._object = (void *)0xEE00203A6E4F6465;
  String.append(_:)(v124);
  v125 = -[objc_class creationDate](v207, "creationDate");
  v203 = v122;
  if (v125)
  {
    v126 = v125;
    v127 = v9;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v125);

    v128 = v206;
    v129 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v206 + 56);
    v130 = v14;
    v131 = 0;
  }
  else
  {
    v127 = v9;
    v128 = v206;
    v129 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v206 + 56);
    v130 = v14;
    v131 = 1;
  }
  v132 = v204;
  v198 = v129;
  v129((uint64_t)v130, v131, 1, v204);
  v133 = (uint64_t)v205;
  sub_1000A0F38((uint64_t)v14, (uint64_t)v17);
  v134 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v128 + 48);
  v135 = v134(v17, 1, v132);
  v199 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v134;
  v200 = v123;
  if (v135)
  {
    v136 = v132;
    sub_1000A1000((uint64_t)v17, (uint64_t *)&unk_1002103D0);
    sub_1000D2864(v1, v133);
    v137 = (uint64_t)v127;
  }
  else
  {
    v138 = v197;
    (*(void (**)(char *, char *, uint64_t))(v128 + 16))(v197, v17, v132);
    sub_1000A1000((uint64_t)v17, (uint64_t *)&unk_1002103D0);
    v139 = v132;
    v140 = (void *)objc_opt_self(NSDateFormatter);
    isa = Date._bridgeToObjectiveC()().super.isa;
    v142 = objc_msgSend(v140, "localizedStringFromDate:dateStyle:timeStyle:", isa, 2, 2);

    v143 = static String._unconditionallyBridgeFromObjectiveC(_:)(v142);
    v145 = v144;

    v146 = v138;
    v136 = v139;
    v147 = v139;
    v133 = (uint64_t)v205;
    (*(void (**)(char *, uint64_t))(v128 + 8))(v146, v147);
    sub_1000D2864(v1, v133);
    v137 = (uint64_t)v127;
    if (v145)
      goto LABEL_8;
  }
  v148 = (void *)objc_opt_self(NSDateFormatter);
  v149 = Date._bridgeToObjectiveC()().super.isa;
  v150 = objc_msgSend(v148, "localizedStringFromDate:dateStyle:timeStyle:", v149, 2, 2);

  v143 = static String._unconditionallyBridgeFromObjectiveC(_:)(v150);
  v145 = v151;

LABEL_8:
  sub_1000D28A8(v133);
  v152._countAndFlagsBits = v143;
  v152._object = v145;
  String.append(_:)(v152);
  swift_bridgeObjectRelease(v145);
  v153._countAndFlagsBits = 0x696669646F6D202CLL;
  v153._object = (void *)0xEE00203A6E4F6465;
  String.append(_:)(v153);
  v154 = -[objc_class modificationDate](v207, "modificationDate");
  if (v154)
  {
    v155 = v154;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v154);

    v156 = 0;
  }
  else
  {
    v156 = 1;
  }
  v157 = v136;
  v159 = v200;
  v158 = (uint64_t)v201;
  v160 = v199;
  v198(v137, v156, 1, v157);
  sub_1000A0F38(v137, v158);
  if (v160(v158, 1, v157))
  {
    sub_1000A1000(v158, (uint64_t *)&unk_1002103D0);
    v161 = v1;
    v162 = v202;
    sub_1000D2864(v161, v202);
    v163 = v207;
  }
  else
  {
    v164 = v206;
    v165 = v197;
    (*(void (**)(char *, uint64_t, uint64_t))(v206 + 16))(v197, v158, v157);
    sub_1000A1000(v158, (uint64_t *)&unk_1002103D0);
    v166 = (void *)objc_opt_self(NSDateFormatter);
    v167 = Date._bridgeToObjectiveC()().super.isa;
    v168 = objc_msgSend(v166, "localizedStringFromDate:dateStyle:timeStyle:", v167, 2, 2);

    v169 = static String._unconditionallyBridgeFromObjectiveC(_:)(v168);
    v171 = v170;

    (*(void (**)(char *, uint64_t))(v164 + 8))(v165, v204);
    v172 = v1;
    v162 = v202;
    sub_1000D2864(v172, v202);
    v163 = v207;
    if (v171)
      goto LABEL_15;
  }
  v173 = (void *)objc_opt_self(NSDateFormatter);
  v174 = Date._bridgeToObjectiveC()().super.isa;
  v175 = objc_msgSend(v173, "localizedStringFromDate:dateStyle:timeStyle:", v174, 2, 2);

  v169 = static String._unconditionallyBridgeFromObjectiveC(_:)(v175);
  v171 = v176;

LABEL_15:
  sub_1000D28A8(v162);
  v177._countAndFlagsBits = v169;
  v177._object = v171;
  String.append(_:)(v177);
  swift_bridgeObjectRelease(v171);
  v178._countAndFlagsBits = 0x696669646F6D202CLL;
  v178._object = (void *)0xEF203A7962206465;
  String.append(_:)(v178);
  v179 = -[objc_class modifiedByDevice](v163, "modifiedByDevice");
  if (v179)
  {
    v180 = v179;
    v181 = static String._unconditionallyBridgeFromObjectiveC(_:)(v179);
    v183 = v182;

  }
  else
  {
    v183 = (void *)0xE200000000000000;
    v181 = 15932;
  }
  v184._countAndFlagsBits = v181;
  v184._object = v183;
  String.append(_:)(v184);
  swift_bridgeObjectRelease(v183);
  v185._countAndFlagsBits = 0x203A67617465202CLL;
  v185._object = (void *)0xE800000000000000;
  String.append(_:)(v185);
  v186 = -[objc_class recordChangeTag](v163, "recordChangeTag");
  if (v186)
  {
    v187 = v186;
    v188 = static String._unconditionallyBridgeFromObjectiveC(_:)(v186);
    v190 = v189;

  }
  else
  {
    v190 = (void *)0xE200000000000000;
    v188 = 15932;
  }
  v191._countAndFlagsBits = v188;
  v191._object = v190;
  String.append(_:)(v191);
  swift_bridgeObjectRelease(v190);
  v192 = v208;
  v193 = (void *)v209;
  v208 = v203;
  v209 = v159;
  swift_bridgeObjectRetain(v159);
  v194._countAndFlagsBits = v192;
  v194._object = v193;
  String.append(_:)(v194);

  swift_bridgeObjectRelease(v159);
  swift_bridgeObjectRelease(v193);
  return v208;
}

uint64_t sub_1000C900C@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  char *v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  id v17;
  void *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  id v23;
  void *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t *v28;
  id v29;
  void *v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t *v34;
  id v35;
  void *v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t *v40;
  id v41;
  void *v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t *v46;
  id v47;
  void *v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t *v52;
  id v53;
  void *v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t *v58;
  id v59;
  void *v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t *v64;
  id v65;
  void *v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t *v70;
  id v71;
  void *v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t *v76;
  id v77;
  void *v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t *v82;
  id v83;
  void *v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t *v88;
  id v89;
  void *v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t *v94;
  id v95;
  void *v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t *v100;
  id v101;
  void *v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t *v106;
  id v107;
  void *v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  uint64_t *v112;
  id v113;
  void *v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  uint64_t *v118;
  id v119;
  void *v120;
  uint64_t v121;
  unint64_t v122;
  unint64_t v123;
  uint64_t *v124;
  id v125;
  void *v126;
  uint64_t v127;
  unint64_t v128;
  unint64_t v129;
  uint64_t *v130;
  id v131;
  void *v132;
  uint64_t v133;
  unint64_t v134;
  unint64_t v135;
  uint64_t *v136;
  id v137;
  void *v138;
  uint64_t v139;
  unint64_t v140;
  unint64_t v141;
  uint64_t *v142;
  id v143;
  void *v144;
  uint64_t v145;
  unint64_t v146;
  unint64_t v147;
  uint64_t *v148;
  _QWORD *v149;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;

  v154 = type metadata accessor for Date(0);
  v152 = *(_QWORD *)(v154 - 8);
  __chkstk_darwin(v154);
  v7 = (char *)&v151 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (int *)type metadata accessor for MagicPairingSettingsRecord(0);
  *(_OWORD *)(a3 + v8[5]) = xmmword_1001865C0;
  v9 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16);
  v153 = a1;
  v11(a3, a1, v9);
  v12 = objc_msgSend(a2, "bluetoothAddress");
  v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
  v15 = v14;

  v16 = (uint64_t *)(a3 + v8[6]);
  *v16 = v13;
  v16[1] = v15;
  v17 = objc_msgSend(a2, "productID");
  if (v17)
  {
    v18 = v17;
    v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
    v21 = v20;

  }
  else
  {
    v19 = 0;
    v21 = 0xE000000000000000;
  }
  v22 = (uint64_t *)(a3 + v8[13]);
  *v22 = v19;
  v22[1] = v21;
  v23 = objc_msgSend(a2, "vendorID");
  if (v23)
  {
    v24 = v23;
    v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
    v27 = v26;

  }
  else
  {
    v25 = 0;
    v27 = 0xE000000000000000;
  }
  v28 = (uint64_t *)(a3 + v8[14]);
  *v28 = v25;
  v28[1] = v27;
  v29 = objc_msgSend(a2, "masterHint");
  if (v29)
  {
    v30 = v29;
    v31 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v29);
    v33 = v32;

  }
  else
  {
    v31 = 0;
    v33 = 0xC000000000000000;
  }
  v34 = (uint64_t *)(a3 + v8[8]);
  *v34 = v31;
  v34[1] = v33;
  v35 = objc_msgSend(a2, "masterKey");
  if (v35)
  {
    v36 = v35;
    v37 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v35);
    v39 = v38;

  }
  else
  {
    v37 = 0;
    v39 = 0xC000000000000000;
  }
  v40 = (uint64_t *)(a3 + v8[7]);
  *v40 = v37;
  v40[1] = v39;
  v41 = objc_msgSend(a2, "accessoryHint");
  if (v41)
  {
    v42 = v41;
    v43 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v41);
    v45 = v44;

  }
  else
  {
    v43 = 0;
    v45 = 0xC000000000000000;
  }
  v46 = (uint64_t *)(a3 + v8[10]);
  *v46 = v43;
  v46[1] = v45;
  v47 = objc_msgSend(a2, "accessoryKey");
  if (v47)
  {
    v48 = v47;
    v49 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v47);
    v51 = v50;

  }
  else
  {
    v49 = 0;
    v51 = 0xC000000000000000;
  }
  v52 = (uint64_t *)(a3 + v8[9]);
  *v52 = v49;
  v52[1] = v51;
  v53 = objc_msgSend(a2, "buttonModes");
  if (v53)
  {
    v54 = v53;
    v55 = static String._unconditionallyBridgeFromObjectiveC(_:)(v53);
    v57 = v56;

  }
  else
  {
    v55 = 0;
    v57 = 0xE000000000000000;
  }
  v58 = (uint64_t *)(a3 + v8[15]);
  *v58 = v55;
  v58[1] = v57;
  v59 = objc_msgSend(a2, "color");
  if (v59)
  {
    v60 = v59;
    v61 = static String._unconditionallyBridgeFromObjectiveC(_:)(v59);
    v63 = v62;

  }
  else
  {
    v61 = 0;
    v63 = 0xE000000000000000;
  }
  v64 = (uint64_t *)(a3 + v8[16]);
  *v64 = v61;
  v64[1] = v63;
  v65 = objc_msgSend(a2, "deviceIDFeatureBitsV1");
  if (v65)
  {
    v66 = v65;
    v67 = static String._unconditionallyBridgeFromObjectiveC(_:)(v65);
    v69 = v68;

  }
  else
  {
    v67 = 0;
    v69 = 0xE000000000000000;
  }
  v70 = (uint64_t *)(a3 + v8[17]);
  *v70 = v67;
  v70[1] = v69;
  v71 = objc_msgSend(a2, "deviceIDFeatureBitsV2");
  if (v71)
  {
    v72 = v71;
    v73 = static String._unconditionallyBridgeFromObjectiveC(_:)(v71);
    v75 = v74;

  }
  else
  {
    v73 = 0;
    v75 = 0xE000000000000000;
  }
  v76 = (uint64_t *)(a3 + v8[18]);
  *v76 = v73;
  v76[1] = v75;
  v77 = objc_msgSend(a2, "encryptionKey");
  if (v77)
  {
    v78 = v77;
    v79 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v77);
    v81 = v80;

  }
  else
  {
    v79 = 0;
    v81 = 0xC000000000000000;
  }
  v82 = (uint64_t *)(a3 + v8[12]);
  *v82 = v79;
  v82[1] = v81;
  v83 = objc_msgSend(a2, "irk");
  if (v83)
  {
    v84 = v83;
    v85 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v83);
    v87 = v86;

  }
  else
  {
    v85 = 0;
    v87 = 0xC000000000000000;
  }
  v88 = (uint64_t *)(a3 + v8[11]);
  *v88 = v85;
  v88[1] = v87;
  v89 = objc_msgSend(a2, "listeningServices");
  if (v89)
  {
    v90 = v89;
    v91 = static String._unconditionallyBridgeFromObjectiveC(_:)(v89);
    v93 = v92;

  }
  else
  {
    v91 = 0;
    v93 = 0xE000000000000000;
  }
  v94 = (uint64_t *)(a3 + v8[19]);
  *v94 = v91;
  v94[1] = v93;
  v95 = objc_msgSend(a2, "listeningServicesV2");
  if (v95)
  {
    v96 = v95;
    v97 = static String._unconditionallyBridgeFromObjectiveC(_:)(v95);
    v99 = v98;

  }
  else
  {
    v97 = 0;
    v99 = 0xE000000000000000;
  }
  v100 = (uint64_t *)(a3 + v8[20]);
  *v100 = v97;
  v100[1] = v99;
  v101 = objc_msgSend(a2, "spatialAudio");
  if (v101)
  {
    v102 = v101;
    v103 = static String._unconditionallyBridgeFromObjectiveC(_:)(v101);
    v105 = v104;

  }
  else
  {
    v103 = 0;
    v105 = 0xE000000000000000;
  }
  v106 = (uint64_t *)(a3 + v8[21]);
  *v106 = v103;
  v106[1] = v105;
  v107 = objc_msgSend(a2, "optimizedBatteryCharging");
  if (v107)
  {
    v108 = v107;
    v109 = static String._unconditionallyBridgeFromObjectiveC(_:)(v107);
    v111 = v110;

  }
  else
  {
    v109 = 0;
    v111 = 0xE000000000000000;
  }
  v112 = (uint64_t *)(a3 + v8[22]);
  *v112 = v109;
  v112[1] = v111;
  v113 = objc_msgSend(a2, "optimizedBatteryFullChargeDeadline");
  if (v113)
  {
    v114 = v113;
    v115 = static String._unconditionallyBridgeFromObjectiveC(_:)(v113);
    v117 = v116;

  }
  else
  {
    v115 = 0;
    v117 = 0xE000000000000000;
  }
  v118 = (uint64_t *)(a3 + v8[23]);
  *v118 = v115;
  v118[1] = v117;
  v119 = objc_msgSend(a2, "ratchet");
  if (v119)
  {
    v120 = v119;
    v121 = static String._unconditionallyBridgeFromObjectiveC(_:)(v119);
    v123 = v122;

  }
  else
  {
    v121 = 0;
    v123 = 0xE000000000000000;
  }
  v124 = (uint64_t *)(a3 + v8[24]);
  *v124 = v121;
  v124[1] = v123;
  v125 = objc_msgSend(a2, "reserved");
  if (v125)
  {
    v126 = v125;
    v127 = static String._unconditionallyBridgeFromObjectiveC(_:)(v125);
    v129 = v128;

  }
  else
  {
    v127 = 0;
    v129 = 0xE000000000000000;
  }
  v130 = (uint64_t *)(a3 + v8[25]);
  *v130 = v127;
  v130[1] = v129;
  v131 = objc_msgSend(a2, "settingsMask");
  if (v131)
  {
    v132 = v131;
    v133 = static String._unconditionallyBridgeFromObjectiveC(_:)(v131);
    v135 = v134;

  }
  else
  {
    v133 = 0;
    v135 = 0xE000000000000000;
  }
  v136 = (uint64_t *)(a3 + v8[26]);
  *v136 = v133;
  v136[1] = v135;
  v137 = objc_msgSend(a2, "supportedServices");
  if (v137)
  {
    v138 = v137;
    v139 = static String._unconditionallyBridgeFromObjectiveC(_:)(v137);
    v141 = v140;

  }
  else
  {
    v139 = 0;
    v141 = 0xE000000000000000;
  }
  v142 = (uint64_t *)(a3 + v8[27]);
  *v142 = v139;
  v142[1] = v141;
  v143 = objc_msgSend(a2, "version");
  if (v143)
  {
    v144 = v143;
    v145 = static String._unconditionallyBridgeFromObjectiveC(_:)(v143);
    v147 = v146;

  }
  else
  {
    v145 = 0;
    v147 = 0xE000000000000000;
  }
  v148 = (uint64_t *)(a3 + v8[28]);
  *v148 = v145;
  v148[1] = v147;
  v149 = (_QWORD *)(a3 + v8[29]);
  *v149 = 0;
  v149[1] = 0xE000000000000000;
  static Date.now.getter(v143);

  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v153, v9);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v152 + 32))(a3 + v8[30], v7, v154);
}

uint64_t sub_1000C9788@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t result;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int *v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  uint64_t v44;
  int *v45;
  uint64_t *v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t *v66;
  unint64_t v67;
  Class v68;
  unint64_t v69;
  Class *v70;
  Class v71;
  unint64_t v72;
  Class *v73;
  Class v74;
  unint64_t v75;
  Class *v76;
  Class v77;
  unint64_t v78;
  Class *v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t *v105;
  uint64_t v106;
  Class v107;
  unint64_t v108;
  Class *v109;
  uint64_t v110;
  Class v111;
  unint64_t v112;
  Class *v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t *v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t *v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t *v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t *v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t *v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  uint64_t v147;
  unint64_t v148;
  uint64_t *v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t *v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t v158;
  uint64_t v159;
  unint64_t v160;
  uint64_t *v161;
  uint64_t v162;
  uint64_t v163;
  unint64_t v164;
  uint64_t v165;
  unint64_t v166;
  uint64_t *v167;
  uint64_t v168;
  uint64_t v169;
  unint64_t v170;
  uint64_t v171;
  unint64_t v172;
  uint64_t *v173;
  uint64_t v174;
  uint64_t v175;
  unint64_t v176;
  uint64_t v177;
  unint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t *v181;
  uint64_t v182;
  uint64_t v183;
  void *v184;
  unint64_t v185;
  objc_class *v186;
  Class isa;
  uint64_t v188;
  uint64_t v189;
  id v190;
  char *v191;
  uint64_t v192;
  void (*v193)(uint64_t, char *, uint64_t);
  uint64_t v194;
  uint64_t v195;
  void (*v196)(uint64_t, uint64_t, uint64_t, uint64_t);
  void *v197;
  uint64_t v198;
  unint64_t v199;
  objc_class *v200;
  Class v201;
  uint64_t v202;
  uint64_t v203;
  id v204;
  char *v205;
  void (*v206)(uint64_t, char *, uint64_t);
  uint64_t v207;
  char *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t *v218;
  unint64_t v219;
  uint64_t v220;
  char *v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  char *v225;
  uint64_t v226;
  _QWORD *v227;
  uint64_t v228;
  char *v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  unint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  Class v237;
  unint64_t v238;
  int v239;
  char v240;

  v231 = a2;
  v4 = sub_1000A0980((uint64_t *)&unk_1002103D0);
  __chkstk_darwin(v4);
  v226 = (uint64_t)&v212 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v228 = (uint64_t)&v212 - v7;
  __chkstk_darwin(v8);
  v230 = (uint64_t)&v212 - v9;
  v214 = type metadata accessor for Date(0);
  v213 = *(_QWORD *)(v214 - 8);
  __chkstk_darwin(v214);
  v225 = (char *)&v212 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v229 = (char *)&v212 - v12;
  v216 = type metadata accessor for UUID(0);
  v215 = *(_QWORD *)(v216 - 8);
  __chkstk_darwin(v216);
  v14 = (char *)&v212 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v232 = sub_1000A0980(&qword_100210E90);
  v15 = *(_QWORD *)(v232 - 8);
  __chkstk_darwin(v232);
  v17 = (char *)&v212 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v236 = type metadata accessor for MagicPairingSettingsRecord(0);
  __chkstk_darwin(v236);
  v19 = (char *)&v212 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v22 = (char *)&v212 - v21;
  __chkstk_darwin(v23);
  v235 = (uint64_t)&v212 - v24;
  v25 = a1[3];
  v26 = a1[4];
  v227 = a1;
  sub_1000A20D8(a1, v25);
  v27 = sub_1000D3F84();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for MagicPairingSettingsRecord.CodingKeys, &type metadata for MagicPairingSettingsRecord.CodingKeys, v27, v25, v26);
  if (!v2)
  {
    v28 = v14;
    v222 = (uint64_t)v22;
    v223 = (uint64_t)v19;
    v224 = v15;
    v240 = 1;
    v29 = sub_1000A2160();
    v30 = v232;
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v237, &type metadata for Data, &v240, v232, &type metadata for Data, v29);
    v233 = v29;
    v41 = v30;
    v42 = v238;
    v43 = v17;
    v44 = v235;
    v45 = (int *)v236;
    v46 = (uint64_t *)(v235 + *(int *)(v236 + 20));
    v220 = (uint64_t)v237;
    *v46 = (uint64_t)v237;
    v46[1] = v42;
    LOBYTE(v237) = 0;
    v47 = sub_1000A0940((unint64_t *)&unk_1002105C0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v48 = v28;
    v49 = v28;
    v50 = v216;
    v221 = v43;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v49, v216, &v237, v41, v216, v47);
    v218 = v46;
    v219 = v42;
    (*(void (**)(uint64_t, _QWORD *, uint64_t))(v215 + 32))(v44, v48, v50);
    LOBYTE(v237) = 2;
    v51 = v232;
    v52 = v221;
    v53 = KeyedDecodingContainer.decode(_:forKey:)(&v237, v232);
    v54 = (uint64_t *)(v44 + v45[6]);
    *v54 = v53;
    v54[1] = v55;
    LOBYTE(v237) = 9;
    v56 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v237, v51);
    v58 = v220;
    if (v57)
      v59 = v56;
    else
      v59 = 0;
    if (v57)
      v60 = v57;
    else
      v60 = 0xE000000000000000;
    v61 = (uint64_t *)(v44 + v45[13]);
    *v61 = v59;
    v61[1] = v60;
    LOBYTE(v237) = 10;
    v62 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v237, v51);
    if (v63)
      v64 = v62;
    else
      v64 = 0;
    if (v63)
      v65 = v63;
    else
      v65 = 0xE000000000000000;
    v66 = (uint64_t *)(v44 + v45[14]);
    *v66 = v64;
    v66[1] = v65;
    v240 = 4;
    v67 = v233;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&type metadata for Data, &v240, v51, &type metadata for Data, v233);
    v68 = v237;
    v69 = v238;
    if (v238 >> 60 == 15)
    {
      v68 = 0;
      v69 = 0xC000000000000000;
    }
    v70 = (Class *)(v44 + v45[8]);
    *v70 = v68;
    v70[1] = (Class)v69;
    v240 = 3;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&type metadata for Data, &v240, v51, &type metadata for Data, v67);
    v71 = v237;
    v72 = v238;
    if (v238 >> 60 == 15)
    {
      v71 = 0;
      v72 = 0xC000000000000000;
    }
    v73 = (Class *)(v44 + v45[7]);
    *v73 = v71;
    v73[1] = (Class)v72;
    v240 = 6;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&type metadata for Data, &v240, v51, &type metadata for Data, v67);
    v74 = v237;
    v75 = v238;
    if (v238 >> 60 == 15)
    {
      v74 = 0;
      v75 = 0xC000000000000000;
    }
    v76 = (Class *)(v44 + v45[10]);
    *v76 = v74;
    v76[1] = (Class)v75;
    v240 = 5;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&type metadata for Data, &v240, v51, &type metadata for Data, v67);
    v77 = v237;
    v78 = v238;
    if (v238 >> 60 == 15)
    {
      v77 = 0;
      v78 = 0xC000000000000000;
    }
    v79 = (Class *)(v44 + *(int *)(v236 + 36));
    *v79 = v77;
    v79[1] = (Class)v78;
    LOBYTE(v237) = 11;
    v80 = v51;
    v81 = v51;
    v82 = v52;
    v83 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v237, v81);
    v234 = 0;
    if (v84)
      v85 = v83;
    else
      v85 = 0;
    if (v84)
      v86 = v84;
    else
      v86 = 0xE000000000000000;
    v87 = (uint64_t *)(v235 + *(int *)(v236 + 60));
    *v87 = v85;
    v87[1] = v86;
    LOBYTE(v237) = 12;
    v88 = v234;
    v89 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v237, v80);
    v234 = v88;
    if (v88)
    {
      (*(void (**)(char *, uint64_t))(v224 + 8))(v52, v80);
      LODWORD(v232) = 0;
      v31 = 3711;
      goto LABEL_4;
    }
    if (v90)
      v91 = v89;
    else
      v91 = 0;
    if (v90)
      v92 = v90;
    else
      v92 = 0xE000000000000000;
    v93 = (uint64_t *)(v235 + *(int *)(v236 + 64));
    *v93 = v91;
    v93[1] = v92;
    LOBYTE(v237) = 13;
    v94 = v234;
    v95 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v237, v80);
    v234 = v94;
    if (v94)
    {
      (*(void (**)(char *, uint64_t))(v224 + 8))(v52, v80);
      LODWORD(v232) = 0;
      v31 = 7807;
      goto LABEL_4;
    }
    if (v96)
      v97 = v95;
    else
      v97 = 0;
    if (v96)
      v98 = v96;
    else
      v98 = 0xE000000000000000;
    v99 = (uint64_t *)(v235 + *(int *)(v236 + 68));
    *v99 = v97;
    v99[1] = v98;
    LOBYTE(v237) = 14;
    v100 = v234;
    v101 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v237, v80);
    v234 = v100;
    if (v100)
    {
      (*(void (**)(char *, uint64_t))(v224 + 8))(v52, v80);
      LODWORD(v232) = 0;
      v31 = 15999;
      goto LABEL_4;
    }
    if (v102)
      v103 = v101;
    else
      v103 = 0;
    if (v102)
      v104 = v102;
    else
      v104 = 0xE000000000000000;
    v105 = (uint64_t *)(v235 + *(int *)(v236 + 72));
    *v105 = v103;
    v105[1] = v104;
    v240 = 8;
    v106 = v234;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&type metadata for Data, &v240, v80, &type metadata for Data, v233);
    v234 = v106;
    if (v106)
    {
      (*(void (**)(char *, uint64_t))(v224 + 8))(v52, v80);
      LODWORD(v232) = 0;
      v31 = 32383;
      goto LABEL_4;
    }
    v107 = v237;
    v108 = v238;
    if (v238 >> 60 == 15)
    {
      v107 = 0;
      v108 = 0xC000000000000000;
    }
    v109 = (Class *)(v235 + *(int *)(v236 + 48));
    *v109 = v107;
    v109[1] = (Class)v108;
    v240 = 7;
    v110 = v234;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&type metadata for Data, &v240, v80, &type metadata for Data, v233);
    v234 = v110;
    if (v110)
    {
      (*(void (**)(char *, uint64_t))(v224 + 8))(v52, v80);
      LODWORD(v232) = 0;
      v31 = 32639;
      goto LABEL_4;
    }
    v111 = v237;
    v112 = v238;
    if (v238 >> 60 == 15)
    {
      v111 = 0;
      v112 = 0xC000000000000000;
    }
    v113 = (Class *)(v235 + *(int *)(v236 + 44));
    *v113 = v111;
    v113[1] = (Class)v112;
    LOBYTE(v237) = 15;
    v114 = v234;
    v115 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v237, v80);
    v234 = v114;
    if (v114)
    {
      (*(void (**)(char *, uint64_t))(v224 + 8))(v52, v80);
      LODWORD(v232) = 0;
      v31 = 0x7FFF;
      goto LABEL_4;
    }
    if (v116)
      v117 = v115;
    else
      v117 = 0;
    if (v116)
      v118 = v116;
    else
      v118 = 0xE000000000000000;
    v119 = (uint64_t *)(v235 + *(int *)(v236 + 76));
    *v119 = v117;
    v119[1] = v118;
    LOBYTE(v237) = 16;
    v120 = v234;
    v121 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v237, v80);
    v234 = v120;
    if (v120)
    {
      (*(void (**)(char *, uint64_t))(v224 + 8))(v52, v80);
      LODWORD(v232) = 0;
      v31 = 0xFFFF;
      goto LABEL_4;
    }
    if (v122)
      v123 = v121;
    else
      v123 = 0;
    if (v122)
      v124 = v122;
    else
      v124 = 0xE000000000000000;
    v125 = (uint64_t *)(v235 + *(int *)(v236 + 80));
    *v125 = v123;
    v125[1] = v124;
    LOBYTE(v237) = 17;
    v126 = v234;
    v127 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v237, v80);
    v234 = v126;
    if (v126)
    {
      (*(void (**)(char *, uint64_t))(v224 + 8))(v52, v80);
      LODWORD(v232) = 0;
      v31 = 0x1FFFF;
      goto LABEL_4;
    }
    if (v128)
      v129 = v127;
    else
      v129 = 0;
    if (v128)
      v130 = v128;
    else
      v130 = 0xE000000000000000;
    v131 = (uint64_t *)(v235 + *(int *)(v236 + 84));
    *v131 = v129;
    v131[1] = v130;
    LOBYTE(v237) = 18;
    v132 = v234;
    v133 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v237, v80);
    v234 = v132;
    if (v132)
    {
      (*(void (**)(char *, uint64_t))(v224 + 8))(v52, v80);
      LODWORD(v232) = 0;
      v31 = 0x3FFFF;
      goto LABEL_4;
    }
    if (v134)
      v135 = v133;
    else
      v135 = 0;
    if (v134)
      v136 = v134;
    else
      v136 = 0xE000000000000000;
    v137 = (uint64_t *)(v235 + *(int *)(v236 + 88));
    *v137 = v135;
    v137[1] = v136;
    LOBYTE(v237) = 19;
    v138 = v234;
    v139 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v237, v80);
    v234 = v138;
    if (v138)
    {
      (*(void (**)(char *, uint64_t))(v224 + 8))(v52, v80);
      LODWORD(v232) = 0;
      v31 = 0x7FFFF;
      goto LABEL_4;
    }
    if (v140)
      v141 = v139;
    else
      v141 = 0;
    if (v140)
      v142 = v140;
    else
      v142 = 0xE000000000000000;
    v143 = (uint64_t *)(v235 + *(int *)(v236 + 92));
    *v143 = v141;
    v143[1] = v142;
    LOBYTE(v237) = 20;
    v144 = v234;
    v145 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v237, v80);
    v234 = v144;
    if (v144)
    {
      (*(void (**)(char *, uint64_t))(v224 + 8))(v52, v80);
      v31 = 0xFFFFF;
      LODWORD(v232) = 1;
      goto LABEL_4;
    }
    if (v146)
      v147 = v145;
    else
      v147 = 0;
    if (v146)
      v148 = v146;
    else
      v148 = 0xE000000000000000;
    v149 = (uint64_t *)(v235 + *(int *)(v236 + 96));
    *v149 = v147;
    v149[1] = v148;
    LOBYTE(v237) = 21;
    v150 = v234;
    v151 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v237, v80);
    LODWORD(v233) = v150 == 0;
    v234 = v150;
    if (v150)
      goto LABEL_173;
    v153 = v152 ? v151 : 0;
    v154 = v152 ? v152 : 0xE000000000000000;
    v155 = (uint64_t *)(v235 + *(int *)(v236 + 100));
    *v155 = v153;
    v155[1] = v154;
    LOBYTE(v237) = 22;
    v156 = v234;
    v157 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v237, v80);
    v234 = v156;
    if (v156)
    {
LABEL_173:
      (*(void (**)(char *, uint64_t))(v224 + 8))(v52, v80);
      LODWORD(v228) = 0;
      LODWORD(v229) = 0;
      LODWORD(v230) = 0;
      LODWORD(v231) = 0;
LABEL_174:
      sub_1000A2140(v227);
      v32 = v235;
      (*(void (**)(uint64_t, uint64_t))(v215 + 8))(v235, v216);
      LODWORD(v227) = 1;
      LODWORD(v232) = 1;
      LODWORD(v226) = 1;
      LODWORD(v225) = 1;
      LODWORD(v224) = 1;
      LODWORD(v223) = 1;
      LODWORD(v222) = 1;
      LODWORD(v221) = 1;
      LODWORD(v220) = 1;
      LODWORD(v219) = 1;
      LODWORD(v218) = 1;
      LODWORD(v217) = 1;
      v239 = 1;
      v39 = 1;
      v38 = 1;
      v37 = 1;
      v36 = 1;
      v35 = 1;
      LOBYTE(v34) = 1;
      v40 = (int *)v236;
      goto LABEL_33;
    }
    if (v158)
      v159 = v157;
    else
      v159 = 0;
    if (v158)
      v160 = v158;
    else
      v160 = 0xE000000000000000;
    v161 = (uint64_t *)(v235 + *(int *)(v236 + 104));
    *v161 = v159;
    v161[1] = v160;
    LOBYTE(v237) = 23;
    v162 = v234;
    v163 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v237, v80);
    v234 = v162;
    if (v162)
    {
      (*(void (**)(char *, uint64_t))(v224 + 8))(v52, v80);
      LODWORD(v229) = 0;
      LODWORD(v230) = 0;
      LODWORD(v231) = 0;
      LODWORD(v228) = 1;
      goto LABEL_174;
    }
    if (v164)
      v165 = v163;
    else
      v165 = 0;
    if (v164)
      v166 = v164;
    else
      v166 = 0xE000000000000000;
    v167 = (uint64_t *)(v235 + *(int *)(v236 + 108));
    *v167 = v165;
    v167[1] = v166;
    LOBYTE(v237) = 24;
    v168 = v234;
    v169 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v237, v80);
    v234 = v168;
    if (v168)
    {
      (*(void (**)(char *, uint64_t))(v224 + 8))(v52, v80);
      LODWORD(v230) = 0;
      LODWORD(v231) = 0;
      LODWORD(v228) = 1;
      LODWORD(v229) = 1;
      goto LABEL_174;
    }
    if (v170)
      v171 = v169;
    else
      v171 = 0;
    if (v170)
      v172 = v170;
    else
      v172 = 0xE000000000000000;
    v173 = (uint64_t *)(v235 + *(int *)(v236 + 112));
    *v173 = v171;
    v173[1] = v172;
    LOBYTE(v237) = 25;
    v174 = v234;
    v175 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v237, v80);
    v234 = v174;
    if (v174)
    {
      (*(void (**)(char *, uint64_t))(v224 + 8))(v52, v80);
      LODWORD(v231) = 0;
      LODWORD(v228) = 1;
      LODWORD(v229) = 1;
      LODWORD(v230) = 1;
      goto LABEL_174;
    }
    if (v176)
      v177 = v175;
    else
      v177 = 0;
    v178 = 0xE000000000000000;
    if (v176)
      v178 = v176;
    v179 = v235;
    v180 = v236;
    v181 = (uint64_t *)(v235 + *(int *)(v236 + 116));
    *v181 = v177;
    v181[1] = v178;
    v217 = v179 + *(int *)(v180 + 120);
    static Date.now.getter(v175);
    LOBYTE(v237) = 26;
    v182 = sub_1000A0940(&qword_100210790, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    v183 = v234;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v214, &v237, v80, v214, v182);
    v234 = v183;
    if (v183)
    {
      (*(void (**)(char *, uint64_t))(v224 + 8))(v52, v80);
      LODWORD(v228) = 1;
      LODWORD(v229) = 1;
      LODWORD(v230) = 1;
      LODWORD(v231) = 1;
      goto LABEL_174;
    }
    v236 = *(_QWORD *)(v213 + 48);
    if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v236)(v230, 1, v214) != 1)
    {
      (*(void (**)(char *, uint64_t))(v224 + 8))(v52, v80);
      (*(void (**)(char *, uint64_t, uint64_t))(v213 + 32))(v229, v230, v214);
LABEL_225:
      (*(void (**)(uint64_t, char *, uint64_t))(v213 + 40))(v217, v229, v214);
      v211 = v235;
      sub_1000D2864(v235, v231);
      sub_1000A2140(v227);
      return sub_1000D28A8(v211);
    }
    v184 = objc_autoreleasePoolPush();
    v185 = v219;
    sub_1000A0E74(v58, v219);
    sub_100109DEC(v58, v185);
    isa = v186;
    sub_1000A103C(v58, v185);
    sub_1000D2864(v235, v222);
    if (isa)
    {
      v188 = v222;
    }
    else
    {
      v189 = v222;
      isa = sub_1000A99D8(v222).super.isa;
      v188 = v189;
    }
    sub_1000D28A8(v188);
    v237 = isa;
    sub_1000CBDA8((id *)&v237);
    objc_autoreleasePoolPop(v184);
    v190 = -[objc_class modificationDate](isa, "modificationDate");

    if (v190)
    {
      v191 = v225;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v190);

      v192 = v213;
      v193 = *(void (**)(uint64_t, char *, uint64_t))(v213 + 32);
      v194 = v228;
      v195 = v214;
      v193(v228, v191, v214);
      v196 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v192 + 56);
      v196(v194, 0, 1, v195);
      if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v236)(v194, 1, v195) != 1)
      {
        (*(void (**)(char *, uint64_t))(v224 + 8))(v82, v80);
        v193((uint64_t)v229, (char *)v228, v214);
LABEL_224:
        sub_1000A1000(v230, (uint64_t *)&unk_1002103D0);
        goto LABEL_225;
      }
    }
    else
    {
      v196 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v213 + 56);
      v196(v228, 1, 1, v214);
    }
    v197 = objc_autoreleasePoolPush();
    v198 = *v218;
    v199 = v218[1];
    sub_1000A0E74(*v218, v199);
    sub_100109DEC(v198, v199);
    v201 = v200;
    sub_1000A103C(v198, v199);
    sub_1000D2864(v235, v223);
    if (v201)
    {
      v202 = v223;
    }
    else
    {
      v203 = v223;
      v201 = sub_1000A99D8(v223).super.isa;
      v202 = v203;
    }
    sub_1000D28A8(v202);
    v237 = v201;
    sub_1000CBDA8((id *)&v237);
    objc_autoreleasePoolPop(v197);
    v204 = -[objc_class creationDate](v201, "creationDate");

    if (v204)
    {
      v205 = v225;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v204);

      v206 = *(void (**)(uint64_t, char *, uint64_t))(v213 + 32);
      v207 = v226;
      v208 = v205;
      v209 = v214;
      v206(v226, v208, v214);
      v196(v207, 0, 1, v209);
      v210 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v236)(v207, 1, v209);
      if ((_DWORD)v210 != 1)
      {
        (*(void (**)(char *, uint64_t))(v224 + 8))(v82, v80);
        v206((uint64_t)v229, (char *)v226, v214);
LABEL_223:
        sub_1000A1000(v228, (uint64_t *)&unk_1002103D0);
        goto LABEL_224;
      }
    }
    else
    {
      v210 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v196)(v226, 1, 1, v214);
    }
    static Date.now.getter(v210);
    (*(void (**)(char *, uint64_t))(v224 + 8))(v82, v80);
    sub_1000A1000(v226, (uint64_t *)&unk_1002103D0);
    goto LABEL_223;
  }
  v234 = v2;
  LODWORD(v232) = 0;
  v31 = 0;
LABEL_4:
  v32 = v235;
  result = sub_1000A2140(v227);
  v34 = (v31 >> 2) & 1;
  v35 = (v31 >> 3) & 1;
  v36 = (v31 >> 4) & 1;
  v37 = (v31 >> 5) & 1;
  v38 = (v31 >> 6) & 1;
  v39 = (v31 >> 7) & 1;
  v239 = (v31 >> 8) & 1;
  LODWORD(v217) = (v31 >> 9) & 1;
  LODWORD(v218) = (v31 >> 10) & 1;
  LODWORD(v219) = (v31 >> 11) & 1;
  LODWORD(v220) = (v31 >> 12) & 1;
  LODWORD(v221) = (v31 >> 13) & 1;
  LODWORD(v222) = (v31 >> 14) & 1;
  LODWORD(v223) = (v31 >> 15) & 1;
  LODWORD(v224) = HIWORD(v31) & 1;
  LODWORD(v225) = (v31 >> 17) & 1;
  LODWORD(v226) = (v31 >> 18) & 1;
  if ((v31 & 1) != 0)
    result = (*(uint64_t (**)(uint64_t, uint64_t))(v215 + 8))(v32, v216);
  v40 = (int *)v236;
  if ((v31 & 2) == 0)
  {
    LODWORD(v227) = 0;
    LODWORD(v233) = 0;
    LODWORD(v228) = 0;
    LODWORD(v229) = 0;
    LODWORD(v230) = 0;
    LODWORD(v231) = 0;
    if ((v31 & 4) == 0)
      goto LABEL_8;
    goto LABEL_34;
  }
  LODWORD(v231) = 0;
  LODWORD(v230) = 0;
  LODWORD(v229) = 0;
  LODWORD(v228) = 0;
  LODWORD(v233) = 0;
  LODWORD(v227) = 0;
LABEL_33:
  result = sub_1000A103C(*(_QWORD *)(v32 + v40[5]), *(_QWORD *)(v32 + v40[5] + 8));
  if ((v34 & 1) == 0)
  {
LABEL_8:
    if (v35)
      goto LABEL_9;
    goto LABEL_35;
  }
LABEL_34:
  result = swift_bridgeObjectRelease(*(_QWORD *)(v32 + v40[6] + 8));
  if ((v35 & 1) != 0)
  {
LABEL_9:
    result = sub_1000A103C(*(_QWORD *)(v32 + v40[7]), *(_QWORD *)(v32 + v40[7] + 8));
    if ((v36 & 1) == 0)
      goto LABEL_10;
    goto LABEL_36;
  }
LABEL_35:
  if (!v36)
  {
LABEL_10:
    if (v37)
      goto LABEL_11;
    goto LABEL_37;
  }
LABEL_36:
  result = sub_1000A103C(*(_QWORD *)(v32 + v40[8]), *(_QWORD *)(v32 + v40[8] + 8));
  if ((v37 & 1) != 0)
  {
LABEL_11:
    result = sub_1000A103C(*(_QWORD *)(v32 + v40[9]), *(_QWORD *)(v32 + v40[9] + 8));
    if ((v38 & 1) == 0)
      goto LABEL_12;
    goto LABEL_38;
  }
LABEL_37:
  if (!v38)
  {
LABEL_12:
    if (v39)
      goto LABEL_13;
    goto LABEL_39;
  }
LABEL_38:
  result = sub_1000A103C(*(_QWORD *)(v32 + v40[10]), *(_QWORD *)(v32 + v40[10] + 8));
  if ((v39 & 1) != 0)
  {
LABEL_13:
    result = sub_1000A103C(*(_QWORD *)(v32 + v40[11]), *(_QWORD *)(v32 + v40[11] + 8));
    if ((v239 & 1) == 0)
      goto LABEL_14;
    goto LABEL_40;
  }
LABEL_39:
  if (!v239)
  {
LABEL_14:
    if ((_DWORD)v217)
      goto LABEL_15;
    goto LABEL_41;
  }
LABEL_40:
  result = sub_1000A103C(*(_QWORD *)(v32 + v40[12]), *(_QWORD *)(v32 + v40[12] + 8));
  if ((v217 & 1) != 0)
  {
LABEL_15:
    result = swift_bridgeObjectRelease(*(_QWORD *)(v32 + v40[13] + 8));
    if ((v218 & 1) == 0)
      goto LABEL_16;
    goto LABEL_42;
  }
LABEL_41:
  if (!(_DWORD)v218)
  {
LABEL_16:
    if ((_DWORD)v219)
      goto LABEL_17;
    goto LABEL_43;
  }
LABEL_42:
  result = swift_bridgeObjectRelease(*(_QWORD *)(v32 + v40[14] + 8));
  if ((v219 & 1) != 0)
  {
LABEL_17:
    result = swift_bridgeObjectRelease(*(_QWORD *)(v32 + v40[15] + 8));
    if ((v220 & 1) == 0)
      goto LABEL_18;
    goto LABEL_44;
  }
LABEL_43:
  if (!(_DWORD)v220)
  {
LABEL_18:
    if ((_DWORD)v221)
      goto LABEL_19;
    goto LABEL_45;
  }
LABEL_44:
  result = swift_bridgeObjectRelease(*(_QWORD *)(v32 + v40[16] + 8));
  if ((v221 & 1) != 0)
  {
LABEL_19:
    result = swift_bridgeObjectRelease(*(_QWORD *)(v32 + v40[17] + 8));
    if ((v222 & 1) == 0)
      goto LABEL_20;
    goto LABEL_46;
  }
LABEL_45:
  if (!(_DWORD)v222)
  {
LABEL_20:
    if ((_DWORD)v223)
      goto LABEL_21;
    goto LABEL_47;
  }
LABEL_46:
  result = swift_bridgeObjectRelease(*(_QWORD *)(v32 + v40[18] + 8));
  if ((v223 & 1) != 0)
  {
LABEL_21:
    result = swift_bridgeObjectRelease(*(_QWORD *)(v32 + v40[19] + 8));
    if ((v224 & 1) == 0)
      goto LABEL_22;
    goto LABEL_48;
  }
LABEL_47:
  if (!(_DWORD)v224)
  {
LABEL_22:
    if ((_DWORD)v225)
      goto LABEL_23;
    goto LABEL_49;
  }
LABEL_48:
  result = swift_bridgeObjectRelease(*(_QWORD *)(v32 + v40[20] + 8));
  if ((v225 & 1) != 0)
  {
LABEL_23:
    result = swift_bridgeObjectRelease(*(_QWORD *)(v32 + v40[21] + 8));
    if ((v226 & 1) == 0)
      goto LABEL_24;
    goto LABEL_50;
  }
LABEL_49:
  if (!(_DWORD)v226)
  {
LABEL_24:
    if ((_DWORD)v232)
      goto LABEL_25;
    goto LABEL_51;
  }
LABEL_50:
  result = swift_bridgeObjectRelease(*(_QWORD *)(v32 + v40[22] + 8));
  if ((v232 & 1) != 0)
  {
LABEL_25:
    result = swift_bridgeObjectRelease(*(_QWORD *)(v32 + v40[23] + 8));
    if ((v227 & 1) == 0)
      goto LABEL_26;
    goto LABEL_52;
  }
LABEL_51:
  if (!(_DWORD)v227)
  {
LABEL_26:
    if ((_DWORD)v233)
      goto LABEL_27;
    goto LABEL_53;
  }
LABEL_52:
  result = swift_bridgeObjectRelease(*(_QWORD *)(v32 + v40[24] + 8));
  if ((v233 & 1) != 0)
  {
LABEL_27:
    result = swift_bridgeObjectRelease(*(_QWORD *)(v32 + v40[25] + 8));
    if ((v228 & 1) == 0)
      goto LABEL_28;
    goto LABEL_54;
  }
LABEL_53:
  if (!(_DWORD)v228)
  {
LABEL_28:
    if ((_DWORD)v229)
      goto LABEL_29;
    goto LABEL_55;
  }
LABEL_54:
  result = swift_bridgeObjectRelease(*(_QWORD *)(v32 + v40[26] + 8));
  if ((v229 & 1) != 0)
  {
LABEL_29:
    result = swift_bridgeObjectRelease(*(_QWORD *)(v32 + v40[27] + 8));
    if ((v230 & 1) == 0)
      goto LABEL_30;
LABEL_56:
    result = swift_bridgeObjectRelease(*(_QWORD *)(v32 + v40[28] + 8));
    if ((v231 & 1) == 0)
      return result;
    goto LABEL_57;
  }
LABEL_55:
  if ((_DWORD)v230)
    goto LABEL_56;
LABEL_30:
  if (!(_DWORD)v231)
    return result;
LABEL_57:
  swift_bridgeObjectRelease(*(_QWORD *)(v32 + v40[29] + 8));
  return (*(uint64_t (**)(uint64_t, uint64_t))(v213 + 8))(v32 + v40[30], v214);
}

void sub_1000CAD6C(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  id v23;
  uint64_t ObjectType;
  NSString v25;
  id v26;
  uint64_t v27;
  __int128 v28;
  id v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  unint64_t v41;
  uint64_t v42;
  _BYTE *v43;
  unint64_t v44;
  uint64_t v45;
  _BYTE *v46;
  char *v47;
  uint64_t v48;
  int *v49;
  unint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  NSString v57;
  id v58;
  __int128 v59;
  uint64_t v60;
  NSString v61;
  id v62;
  __int128 v63;
  void *v64;
  NSString v65;
  id v66;
  __int128 v67;
  NSString v68;
  id v69;
  __int128 v70;
  NSString v71;
  id v72;
  __int128 v73;
  NSString v74;
  id v75;
  __int128 v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  _QWORD *v80;
  unint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  unint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  unint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  unint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  unint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  unint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  unint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  unint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  unint64_t v105;
  uint64_t v106;
  _QWORD *v107;
  unint64_t v108;
  uint64_t v109;
  _QWORD *v110;
  unint64_t v111;
  uint64_t v112;
  _QWORD *v113;
  unint64_t v114;
  uint64_t v115;
  _QWORD *v116;
  unint64_t v117;
  uint64_t v118;
  _QWORD *v119;
  id v120;
  id v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t *v125;
  id v126;
  NSString v127;
  id v128;
  uint64_t v129;
  void *v130;
  id v131;
  id v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t *v135;
  id v136;
  uint64_t v137;
  void *v138;
  char *v139;
  uint64_t v140;
  void (*v141)(uint64_t, char *, int *);
  int *v142;
  void (*v143)(uint64_t, uint64_t, uint64_t, int *);
  id v144;
  void *v145;
  uint64_t v146;
  char *v147;
  uint64_t v148;
  uint64_t v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  void *v153;
  uint64_t v154;
  uint64_t v155;
  __int128 v156;
  int *v157;
  char *v158;
  char *v159;
  char *v160;
  char *v161;
  char *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  __int128 v167;
  id v168;

  v163 = a2;
  v4 = sub_1000A0980((uint64_t *)&unk_1002103D0);
  __chkstk_darwin(v4);
  v159 = (char *)&v152 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v160 = (char *)&v152 - v7;
  v8 = type metadata accessor for Date(0);
  v164 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v161 = (char *)&v152 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v12 = (char *)&v152 - v11;
  v13 = sub_1000A0980(&qword_1002103E0);
  __chkstk_darwin(v13);
  v15 = (char *)&v152 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for UUID(0);
  v165 = *(_QWORD *)(v16 - 8);
  v166 = v16;
  __chkstk_darwin(v16);
  v162 = (char *)&v152 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = CKRecord.recordType.getter(v18);
  v21 = v20;
  if (v19 == 0x746553636967614DLL && v20 == 0xED000073676E6974)
  {
    swift_bridgeObjectRelease(0xED000073676E6974);
  }
  else
  {
    v22 = _stringCompareWithSmolCheck(_:_:expecting:)(v19, v20, 0x746553636967614DLL, 0xED000073676E6974, 0);
    swift_bridgeObjectRelease(v21);
    if ((v22 & 1) == 0)
    {
      v44 = sub_1000D28E4();
      v45 = swift_allocError(&type metadata for MagicPairingSettingsRecord.MagicSettingsRecordError, v44, 0, 0);
      *v46 = 0;
      swift_willThrow(v45);

      return;
    }
  }
  v157 = (int *)v8;
  v158 = v12;
  v23 = objc_msgSend(a1, "encryptedValues");
  ObjectType = swift_getObjectType(v23);
  v25 = String._bridgeToObjectiveC()();
  v26 = objc_msgSend(v23, "objectForKeyedSubscript:", v25);

  if (!v26)
    goto LABEL_9;
  v168 = v26;
  v155 = sub_1000A0980(&qword_100210400);
  v27 = swift_dynamicCast(&v167, &v168, v155, &type metadata for String, 6);
  if ((v27 & 1) == 0)
    goto LABEL_9;
  v154 = v2;
  v28 = v167;
  v29 = objc_msgSend(a1, "recordID");
  v30 = objc_msgSend(v29, "recordName");

  v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
  v33 = v32;

  UUID.init(uuidString:)(v31, v33);
  swift_bridgeObjectRelease(v33);
  v35 = v165;
  v34 = v166;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v165 + 48))(v15, 1, v166) != 1)
  {
    v153 = a1;
    v47 = v162;
    (*(void (**)(char *, char *, uint64_t))(v35 + 32))(v162, v15, v34);
    v48 = v163;
    (*(void (**)(uint64_t, char *, uint64_t))(v35 + 16))(v163, v47, v34);
    v49 = (int *)type metadata accessor for MagicPairingSettingsRecord(0);
    *(_OWORD *)(v48 + v49[6]) = v28;
    CKRecordKeyValueSetting.subscript.getter(&v167, 0x49746375646F7270, 0xE900000000000044, ObjectType, &type metadata for String, &protocol witness table for String);
    v50 = *((_QWORD *)&v167 + 1);
    v51 = v167;
    if (!*((_QWORD *)&v167 + 1))
    {
      v51 = 0;
      v50 = 0xE000000000000000;
    }
    v52 = (_QWORD *)(v48 + v49[13]);
    *v52 = v51;
    v52[1] = v50;
    CKRecordKeyValueSetting.subscript.getter(&v167, 0x4449726F646E6576, 0xE800000000000000, ObjectType, &type metadata for String, &protocol witness table for String);
    v53 = *((_QWORD *)&v167 + 1);
    v54 = v167;
    if (!*((_QWORD *)&v167 + 1))
    {
      v54 = 0;
      v53 = 0xE000000000000000;
    }
    v55 = v48;
    v56 = (_QWORD *)(v48 + v49[14]);
    *v56 = v54;
    v56[1] = v53;
    v57 = String._bridgeToObjectiveC()();
    v58 = objc_msgSend(v23, "objectForKeyedSubscript:", v57);

    v59 = xmmword_1001865C0;
    v60 = v155;
    v156 = xmmword_1001865C0;
    if (v58)
    {
      v168 = v58;
      if (swift_dynamicCast(&v167, &v168, v155, &type metadata for Data, 6))
        v59 = v167;
      else
        v59 = v156;
    }
    *(_OWORD *)(v48 + v49[8]) = v59;
    v61 = String._bridgeToObjectiveC()();
    v62 = objc_msgSend(v23, "objectForKeyedSubscript:", v61);

    v63 = v156;
    v64 = v153;
    if (v62)
    {
      v168 = v62;
      if (swift_dynamicCast(&v167, &v168, v60, &type metadata for Data, 6))
        v63 = v167;
      else
        v63 = v156;
    }
    *(_OWORD *)(v48 + v49[7]) = v63;
    v65 = String._bridgeToObjectiveC()();
    v66 = objc_msgSend(v23, "objectForKeyedSubscript:", v65);

    v67 = v156;
    if (v66)
    {
      v168 = v66;
      if (swift_dynamicCast(&v167, &v168, v60, &type metadata for Data, 6))
        v67 = v167;
      else
        v67 = v156;
    }
    *(_OWORD *)(v48 + v49[10]) = v67;
    v68 = String._bridgeToObjectiveC()();
    v69 = objc_msgSend(v23, "objectForKeyedSubscript:", v68);

    v70 = v156;
    if (v69)
    {
      v168 = v69;
      if (swift_dynamicCast(&v167, &v168, v60, &type metadata for Data, 6))
        v70 = v167;
      else
        v70 = v156;
    }
    *(_OWORD *)(v48 + v49[9]) = v70;
    v71 = String._bridgeToObjectiveC()();
    v72 = objc_msgSend(v23, "objectForKeyedSubscript:", v71);

    v73 = v156;
    if (v72)
    {
      v168 = v72;
      if (swift_dynamicCast(&v167, &v168, v60, &type metadata for Data, 6))
        v73 = v167;
      else
        v73 = v156;
    }
    *(_OWORD *)(v48 + v49[12]) = v73;
    v74 = String._bridgeToObjectiveC()();
    v75 = objc_msgSend(v23, "objectForKeyedSubscript:", v74);

    if (v75 && (v168 = v75, swift_dynamicCast(&v167, &v168, v60, &type metadata for Data, 6)))
      v76 = v167;
    else
      v76 = v156;
    *(_OWORD *)(v48 + v49[11]) = v76;
    CKRecordKeyValueSetting.subscript.getter(&v167, 0x6F4D6E6F74747562, 0xEB00000000736564, ObjectType, &type metadata for String, &protocol witness table for String);
    v77 = *((_QWORD *)&v167 + 1);
    v78 = v167;
    if (!*((_QWORD *)&v167 + 1))
      v78 = 0;
    v79 = 0xE000000000000000;
    if (!*((_QWORD *)&v167 + 1))
      v77 = 0xE000000000000000;
    v80 = (_QWORD *)(v55 + v49[15]);
    *v80 = v78;
    v80[1] = v77;
    CKRecordKeyValueSetting.subscript.getter(&v167, 0x726F6C6F63, 0xE500000000000000, ObjectType, &type metadata for String, &protocol witness table for String);
    v81 = *((_QWORD *)&v167 + 1);
    v82 = v167;
    if (!*((_QWORD *)&v167 + 1))
    {
      v82 = 0;
      v81 = 0xE000000000000000;
    }
    v83 = (_QWORD *)(v55 + v49[16]);
    *v83 = v82;
    v83[1] = v81;
    CKRecordKeyValueSetting.subscript.getter(&v167, 0xD000000000000015, 0x80000001001ACBE0, ObjectType, &type metadata for String, &protocol witness table for String);
    v84 = *((_QWORD *)&v167 + 1);
    v85 = v167;
    if (!*((_QWORD *)&v167 + 1))
    {
      v85 = 0;
      v84 = 0xE000000000000000;
    }
    v86 = (_QWORD *)(v55 + v49[17]);
    *v86 = v85;
    v86[1] = v84;
    CKRecordKeyValueSetting.subscript.getter(&v167, 0xD000000000000015, 0x80000001001ACC00, ObjectType, &type metadata for String, &protocol witness table for String);
    v87 = *((_QWORD *)&v167 + 1);
    v88 = v167;
    if (!*((_QWORD *)&v167 + 1))
    {
      v88 = 0;
      v87 = 0xE000000000000000;
    }
    v89 = (_QWORD *)(v55 + v49[18]);
    *v89 = v88;
    v89[1] = v87;
    CKRecordKeyValueSetting.subscript.getter(&v167, 0xD000000000000011, 0x80000001001ACC20, ObjectType, &type metadata for String, &protocol witness table for String);
    v90 = *((_QWORD *)&v167 + 1);
    v91 = v167;
    if (!*((_QWORD *)&v167 + 1))
    {
      v91 = 0;
      v90 = 0xE000000000000000;
    }
    v92 = (_QWORD *)(v55 + v49[19]);
    *v92 = v91;
    v92[1] = v90;
    CKRecordKeyValueSetting.subscript.getter(&v167, 0xD000000000000013, 0x80000001001ACC40, ObjectType, &type metadata for String, &protocol witness table for String);
    v93 = *((_QWORD *)&v167 + 1);
    v94 = v167;
    if (!*((_QWORD *)&v167 + 1))
    {
      v94 = 0;
      v93 = 0xE000000000000000;
    }
    v95 = (_QWORD *)(v55 + v49[20]);
    *v95 = v94;
    v95[1] = v93;
    CKRecordKeyValueSetting.subscript.getter(&v167, 0x416C616974617073, 0xEC0000006F696475, ObjectType, &type metadata for String, &protocol witness table for String);
    v96 = *((_QWORD *)&v167 + 1);
    v97 = v167;
    if (!*((_QWORD *)&v167 + 1))
    {
      v97 = 0;
      v96 = 0xE000000000000000;
    }
    v98 = (_QWORD *)(v55 + v49[21]);
    *v98 = v97;
    v98[1] = v96;
    CKRecordKeyValueSetting.subscript.getter(&v167, 0xD000000000000018, 0x80000001001ACC60, ObjectType, &type metadata for String, &protocol witness table for String);
    v99 = *((_QWORD *)&v167 + 1);
    v100 = v167;
    if (!*((_QWORD *)&v167 + 1))
    {
      v100 = 0;
      v99 = 0xE000000000000000;
    }
    v101 = (_QWORD *)(v55 + v49[22]);
    *v101 = v100;
    v101[1] = v99;
    CKRecordKeyValueSetting.subscript.getter(&v167, 0xD000000000000022, 0x80000001001ACC80, ObjectType, &type metadata for String, &protocol witness table for String);
    v102 = *((_QWORD *)&v167 + 1);
    v103 = v167;
    if (!*((_QWORD *)&v167 + 1))
    {
      v103 = 0;
      v102 = 0xE000000000000000;
    }
    v104 = (_QWORD *)(v55 + v49[23]);
    *v104 = v103;
    v104[1] = v102;
    CKRecordKeyValueSetting.subscript.getter(&v167, 0x74656863746172, 0xE700000000000000, ObjectType, &type metadata for String, &protocol witness table for String);
    v105 = *((_QWORD *)&v167 + 1);
    v106 = v167;
    if (!*((_QWORD *)&v167 + 1))
    {
      v106 = 0;
      v105 = 0xE000000000000000;
    }
    v107 = (_QWORD *)(v55 + v49[24]);
    *v107 = v106;
    v107[1] = v105;
    CKRecordKeyValueSetting.subscript.getter(&v167, 0x6465767265736572, 0xE800000000000000, ObjectType, &type metadata for String, &protocol witness table for String);
    v108 = *((_QWORD *)&v167 + 1);
    v109 = v167;
    if (!*((_QWORD *)&v167 + 1))
    {
      v109 = 0;
      v108 = 0xE000000000000000;
    }
    v110 = (_QWORD *)(v55 + v49[25]);
    *v110 = v109;
    v110[1] = v108;
    CKRecordKeyValueSetting.subscript.getter(&v167, 0x73676E6974746573, 0xEC0000006B73614DLL, ObjectType, &type metadata for String, &protocol witness table for String);
    v111 = *((_QWORD *)&v167 + 1);
    v112 = v167;
    if (!*((_QWORD *)&v167 + 1))
    {
      v112 = 0;
      v111 = 0xE000000000000000;
    }
    v113 = (_QWORD *)(v55 + v49[26]);
    *v113 = v112;
    v113[1] = v111;
    CKRecordKeyValueSetting.subscript.getter(&v167, 0xD000000000000011, 0x80000001001ACCB0, ObjectType, &type metadata for String, &protocol witness table for String);
    v114 = *((_QWORD *)&v167 + 1);
    v115 = v167;
    if (!*((_QWORD *)&v167 + 1))
    {
      v115 = 0;
      v114 = 0xE000000000000000;
    }
    v116 = (_QWORD *)(v55 + v49[27]);
    *v116 = v115;
    v116[1] = v114;
    CKRecordKeyValueSetting.subscript.getter(&v167, 0x6E6F6973726576, 0xE700000000000000, ObjectType, &type metadata for String, &protocol witness table for String);
    v117 = *((_QWORD *)&v167 + 1);
    v118 = v167;
    if (!*((_QWORD *)&v167 + 1))
    {
      v118 = 0;
      v117 = 0xE000000000000000;
    }
    v119 = (_QWORD *)(v55 + v49[28]);
    *v119 = v118;
    v119[1] = v117;
    v120 = objc_msgSend(objc_allocWithZone((Class)NSKeyedArchiver), "initRequiringSecureCoding:", 1);
    objc_msgSend(v64, "encodeSystemFieldsWithCoder:", v120);
    objc_msgSend(v120, "finishEncoding");
    v121 = objc_msgSend(v120, "encodedData");
    v122 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    v124 = v123;

    v125 = (uint64_t *)(v55 + v49[5]);
    *v125 = v122;
    v125[1] = v124;
    v126 = objc_msgSend(v64, "valuesByKey");
    v127 = String._bridgeToObjectiveC()();
    v128 = objc_msgSend(v126, "objectForKeyedSubscript:", v127);
    swift_unknownObjectRelease(v126);

    if (v128)
    {
      v129 = objc_opt_self(CKReference);
      v130 = (void *)swift_dynamicCastObjCClass(v128, v129);
      if (v130)
      {
        v131 = objc_msgSend(v130, "recordID");
        v132 = objc_msgSend(v131, "recordName");

        v133 = static String._unconditionallyBridgeFromObjectiveC(_:)(v132);
        v79 = v134;
        swift_unknownObjectRelease(v128);

        goto LABEL_76;
      }
      swift_unknownObjectRelease(v128);
    }
    v133 = 0;
LABEL_76:
    v135 = (uint64_t *)(v55 + v49[29]);
    *v135 = v133;
    v135[1] = v79;
    v136 = objc_msgSend(v64, "modificationDate");
    v137 = (uint64_t)v160;
    if (v136)
    {
      v138 = v136;
      v139 = v161;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v136);

      v140 = v164;
      v141 = *(void (**)(uint64_t, char *, int *))(v164 + 32);
      v142 = v157;
      v141(v137, v139, v157);
      v143 = *(void (**)(uint64_t, uint64_t, uint64_t, int *))(v140 + 56);
      v143(v137, 0, 1, v142);
      if ((*(unsigned int (**)(uint64_t, uint64_t, int *))(v140 + 48))(v137, 1, v142) != 1)
      {
        swift_unknownObjectRelease(v23);

        (*(void (**)(char *, uint64_t))(v165 + 8))(v162, v166);
        v141((uint64_t)v158, (char *)v137, v142);
LABEL_86:
        v141(v163 + v49[30], v158, v142);
        return;
      }
    }
    else
    {
      v143 = *(void (**)(uint64_t, uint64_t, uint64_t, int *))(v164 + 56);
      v142 = v157;
      v143((uint64_t)v160, 1, 1, v157);
    }
    v144 = objc_msgSend(v64, "creationDate");
    if (v144)
    {
      v145 = v144;
      v157 = v49;
      v146 = v137;
      v147 = v161;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v144);

      v148 = v164;
      v149 = (uint64_t)v159;
      v150 = v147;
      v137 = v146;
      v49 = v157;
      v161 = *(char **)(v164 + 32);
      ((void (*)(char *, char *, int *))v161)(v159, v150, v142);
      v143(v149, 0, 1, v142);
      v151 = (*(uint64_t (**)(uint64_t, uint64_t, int *))(v148 + 48))(v149, 1, v142);
      if ((_DWORD)v151 != 1)
      {
        swift_unknownObjectRelease(v23);

        (*(void (**)(char *, uint64_t))(v165 + 8))(v162, v166);
        ((void (*)(char *, uint64_t, int *))v161)(v158, v149, v142);
LABEL_85:
        sub_1000A1000(v137, (uint64_t *)&unk_1002103D0);
        v141 = *(void (**)(uint64_t, char *, int *))(v164 + 32);
        goto LABEL_86;
      }
    }
    else
    {
      v149 = (uint64_t)v159;
      v151 = ((uint64_t (*)(char *, uint64_t, uint64_t, int *))v143)(v159, 1, 1, v142);
    }
    static Date.now.getter(v151);
    swift_unknownObjectRelease(v23);

    (*(void (**)(char *, uint64_t))(v165 + 8))(v162, v166);
    sub_1000A1000(v149, (uint64_t *)&unk_1002103D0);
    goto LABEL_85;
  }
  swift_bridgeObjectRelease(*((_QWORD *)&v28 + 1));
  v27 = sub_1000A1000((uint64_t)v15, &qword_1002103E0);
LABEL_9:
  v36 = static os_log_type_t.error.getter(v27);
  if (qword_1002101E0 != -1)
    swift_once(&qword_1002101E0, sub_1001687B0);
  v37 = qword_100218DE8;
  v38 = sub_1000A0980((uint64_t *)&unk_1002103C0);
  v39 = swift_allocObject(v38, 72, 7);
  *(_OWORD *)(v39 + 16) = xmmword_100184870;
  *(_QWORD *)(v39 + 56) = sub_1000A0FC4();
  *(_QWORD *)(v39 + 64) = sub_1000A0940((unint64_t *)&qword_1002108A0, (uint64_t (*)(uint64_t))sub_1000A0FC4, (uint64_t)&protocol conformance descriptor for NSObject);
  *(_QWORD *)(v39 + 32) = a1;
  v40 = a1;
  os_log(_:dso:log:_:_:)(v36, &_mh_execute_header, v37, "Invalid MagicPairingSettingsRecord Record - %@", 46, 2, v39);
  swift_bridgeObjectRelease(v39);
  v41 = sub_1000D28E4();
  v42 = swift_allocError(&type metadata for MagicPairingSettingsRecord.MagicSettingsRecordError, v41, 0, 0);
  *v43 = 2;
  swift_willThrow(v42);
  swift_unknownObjectRelease(v23);

}

uint64_t sub_1000CBDA8(id *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t ObjectType;
  uint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  char v20;
  unint64_t v21;
  uint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  char v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  unint64_t v42;
  char v43;
  char v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  unint64_t v49;
  char v50;
  char v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  unint64_t v56;
  char v57;
  char v58;
  unint64_t v59;
  uint64_t *v60;
  unint64_t v61;
  uint64_t v62;
  char v63;
  unint64_t v64;
  uint64_t *v65;
  unint64_t v66;
  uint64_t v67;
  char v68;
  unint64_t v69;
  uint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  char v73;
  unint64_t v74;
  uint64_t *v75;
  unint64_t v76;
  uint64_t v77;
  char v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  unint64_t v83;
  char v84;
  char v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  unint64_t v90;
  char v91;
  char v92;
  unint64_t v93;
  uint64_t *v94;
  unint64_t v95;
  uint64_t v96;
  char v97;
  unint64_t v98;
  uint64_t *v99;
  unint64_t v100;
  uint64_t v101;
  char v102;
  unint64_t v103;
  uint64_t *v104;
  unint64_t v105;
  uint64_t v106;
  char v107;
  unint64_t v108;
  uint64_t *v109;
  unint64_t v110;
  uint64_t v111;
  char v112;
  unint64_t v113;
  uint64_t *v114;
  unint64_t v115;
  uint64_t v116;
  char v117;
  unint64_t v118;
  uint64_t *v119;
  unint64_t v120;
  uint64_t v121;
  char v122;
  unint64_t v123;
  uint64_t *v124;
  unint64_t v125;
  uint64_t v126;
  char v127;
  unint64_t v128;
  uint64_t *v129;
  unint64_t v130;
  uint64_t v131;
  char v132;
  unint64_t v133;
  uint64_t *v134;
  unint64_t v135;
  uint64_t v136;
  char v138;
  uint64_t v139;
  int *v140;
  uint64_t v141;
  unint64_t v142;
  _QWORD *v143;
  void *v144;

  v2 = v1;
  v4 = static os_log_type_t.debug.getter(a1);
  if (qword_1002101E0 != -1)
    swift_once(&qword_1002101E0, sub_1001687B0);
  v5 = qword_100218DE8;
  v6 = sub_1000A0980((uint64_t *)&unk_1002103C0);
  v7 = swift_allocObject(v6, 72, 7);
  *(_OWORD *)(v7 + 16) = xmmword_100184870;
  v8 = *a1;
  v9 = objc_msgSend(v8, "description");
  v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
  v12 = v11;

  *(_QWORD *)(v7 + 56) = &type metadata for String;
  *(_QWORD *)(v7 + 64) = sub_1000A0DF4();
  *(_QWORD *)(v7 + 32) = v10;
  *(_QWORD *)(v7 + 40) = v12;
  os_log(_:dso:log:_:_:)(v4, &_mh_execute_header, v5, "Updating magic settings record: %@", 34, 2, v7);
  swift_bridgeObjectRelease(v7);
  v13 = objc_msgSend(v8, "encryptedValues");
  ObjectType = swift_getObjectType(v13);
  CKRecordKeyValueSetting.subscript.getter(&v141, 0xD000000000000010, 0x80000001001AA8D0, ObjectType, &type metadata for String, &protocol witness table for String);
  v15 = v141;
  v16 = v142;
  v139 = v2;
  v140 = (int *)type metadata accessor for MagicPairingSettingsRecord(0);
  v17 = (uint64_t *)(v2 + v140[6]);
  v19 = *v17;
  v18 = v17[1];
  if (!v16)
    goto LABEL_8;
  if (v15 == v19 && v16 == v18)
  {
    swift_bridgeObjectRelease(v16);
    goto LABEL_9;
  }
  v20 = _stringCompareWithSmolCheck(_:_:expecting:)(v15, v16, *v17, v17[1], 0);
  swift_bridgeObjectRelease(v16);
  if ((v20 & 1) == 0)
  {
LABEL_8:
    v143 = &type metadata for String;
    v144 = &protocol witness table for String;
    v141 = v19;
    v142 = v18;
    swift_bridgeObjectRetain(v18);
    CKRecordKeyValueSetting.subscript.setter(&v141, 0xD000000000000010, 0x80000001001AA8D0, ObjectType);
  }
LABEL_9:
  CKRecordKeyValueSetting.subscript.getter(&v141, 0x49746375646F7270, 0xE900000000000044, ObjectType, &type metadata for String, &protocol witness table for String);
  v21 = v142;
  v22 = (uint64_t *)(v139 + v140[13]);
  v24 = *v22;
  v23 = v22[1];
  if (!v142)
    goto LABEL_14;
  if (v141 != v24 || v142 != v23)
  {
    v25 = _stringCompareWithSmolCheck(_:_:expecting:)(v141, v142, *v22, v22[1], 0);
    swift_bridgeObjectRelease(v21);
    if ((v25 & 1) != 0)
      goto LABEL_15;
LABEL_14:
    v143 = &type metadata for String;
    v144 = &protocol witness table for String;
    v141 = v24;
    v142 = v23;
    swift_bridgeObjectRetain(v23);
    CKRecordKeyValueSetting.subscript.setter(&v141, 0x49746375646F7270, 0xE900000000000044, ObjectType);
    goto LABEL_15;
  }
  swift_bridgeObjectRelease(v142);
LABEL_15:
  CKRecordKeyValueSetting.subscript.getter(&v141, 0x4449726F646E6576, 0xE800000000000000, ObjectType, &type metadata for String, &protocol witness table for String);
  v26 = v142;
  v27 = (uint64_t *)(v139 + v140[14]);
  v29 = *v27;
  v28 = v27[1];
  if (!v142)
    goto LABEL_20;
  if (v141 == v29 && v142 == v28)
  {
    swift_bridgeObjectRelease(v142);
    goto LABEL_21;
  }
  v30 = _stringCompareWithSmolCheck(_:_:expecting:)(v141, v142, *v27, v27[1], 0);
  swift_bridgeObjectRelease(v26);
  if ((v30 & 1) == 0)
  {
LABEL_20:
    v143 = &type metadata for String;
    v144 = &protocol witness table for String;
    v141 = v29;
    v142 = v28;
    swift_bridgeObjectRetain(v28);
    CKRecordKeyValueSetting.subscript.setter(&v141, 0x4449726F646E6576, 0xE800000000000000, ObjectType);
  }
LABEL_21:
  CKRecordKeyValueSetting.subscript.getter(&v141, 0x654B72657473616DLL, 0xE900000000000079, ObjectType, &type metadata for Data, &protocol witness table for Data);
  v31 = v141;
  v32 = v142;
  v33 = (uint64_t *)(v139 + v140[7]);
  v34 = *v33;
  v35 = v33[1];
  sub_1000A0E74(*v33, v35);
  if (v32 >> 60 == 15)
  {
    sub_1000B2D78(v31, v32);
    sub_1000B2D78(v34, v35);
  }
  else
  {
    sub_1000B2D8C(v31, v32);
    sub_1000D25EC(v31, v32);
    v37 = v36;
    sub_1000A103C(v34, v35);
    sub_1000B2D78(v31, v32);
    sub_1000B2D78(v31, v32);
    if ((v37 & 1) != 0)
      goto LABEL_25;
  }
  v143 = &type metadata for Data;
  v144 = &protocol witness table for Data;
  v141 = v34;
  v142 = v35;
  sub_1000A0E74(v34, v35);
  CKRecordKeyValueSetting.subscript.setter(&v141, 0x654B72657473616DLL, 0xE900000000000079, ObjectType);
LABEL_25:
  CKRecordKeyValueSetting.subscript.getter(&v141, 0x694872657473616DLL, 0xEA0000000000746ELL, ObjectType, &type metadata for Data, &protocol witness table for Data);
  v38 = v141;
  v39 = v142;
  v40 = (uint64_t *)(v139 + v140[8]);
  v41 = *v40;
  v42 = v40[1];
  sub_1000A0E74(*v40, v42);
  if (v39 >> 60 == 15)
  {
    sub_1000B2D78(v38, v39);
    sub_1000B2D78(v41, v42);
  }
  else
  {
    sub_1000B2D8C(v38, v39);
    sub_1000D25EC(v38, v39);
    v44 = v43;
    sub_1000A103C(v41, v42);
    sub_1000B2D78(v38, v39);
    sub_1000B2D78(v38, v39);
    if ((v44 & 1) != 0)
      goto LABEL_29;
  }
  v143 = &type metadata for Data;
  v144 = &protocol witness table for Data;
  v141 = v41;
  v142 = v42;
  sub_1000A0E74(v41, v42);
  CKRecordKeyValueSetting.subscript.setter(&v141, 0x694872657473616DLL, 0xEA0000000000746ELL, ObjectType);
LABEL_29:
  CKRecordKeyValueSetting.subscript.getter(&v141, 0x726F737365636361, 0xEC00000079654B79, ObjectType, &type metadata for Data, &protocol witness table for Data);
  v45 = v141;
  v46 = v142;
  v47 = (uint64_t *)(v139 + v140[9]);
  v48 = *v47;
  v49 = v47[1];
  sub_1000A0E74(*v47, v49);
  if (v46 >> 60 == 15)
  {
    sub_1000B2D78(v45, v46);
    sub_1000B2D78(v48, v49);
  }
  else
  {
    sub_1000B2D8C(v45, v46);
    sub_1000D25EC(v45, v46);
    v51 = v50;
    sub_1000A103C(v48, v49);
    sub_1000B2D78(v45, v46);
    sub_1000B2D78(v45, v46);
    if ((v51 & 1) != 0)
      goto LABEL_33;
  }
  v143 = &type metadata for Data;
  v144 = &protocol witness table for Data;
  v141 = v48;
  v142 = v49;
  sub_1000A0E74(v48, v49);
  CKRecordKeyValueSetting.subscript.setter(&v141, 0x726F737365636361, 0xEC00000079654B79, ObjectType);
LABEL_33:
  CKRecordKeyValueSetting.subscript.getter(&v141, 0x726F737365636361, 0xED0000746E694879, ObjectType, &type metadata for Data, &protocol witness table for Data);
  v52 = v141;
  v53 = v142;
  v54 = (uint64_t *)(v139 + v140[10]);
  v55 = *v54;
  v56 = v54[1];
  sub_1000A0E74(*v54, v56);
  if (v53 >> 60 == 15)
  {
    sub_1000B2D78(v52, v53);
    sub_1000B2D78(v55, v56);
  }
  else
  {
    sub_1000B2D8C(v52, v53);
    sub_1000D25EC(v52, v53);
    v58 = v57;
    sub_1000A103C(v55, v56);
    sub_1000B2D78(v52, v53);
    sub_1000B2D78(v52, v53);
    if ((v58 & 1) != 0)
      goto LABEL_37;
  }
  v143 = &type metadata for Data;
  v144 = &protocol witness table for Data;
  v141 = v55;
  v142 = v56;
  sub_1000A0E74(v55, v56);
  CKRecordKeyValueSetting.subscript.setter(&v141, 0x726F737365636361, 0xED0000746E694879, ObjectType);
LABEL_37:
  CKRecordKeyValueSetting.subscript.getter(&v141, 0x6F4D6E6F74747562, 0xEB00000000736564, ObjectType, &type metadata for String, &protocol witness table for String);
  v59 = v142;
  v60 = (uint64_t *)(v139 + v140[15]);
  v62 = *v60;
  v61 = v60[1];
  if (!v142)
    goto LABEL_42;
  if (v141 != v62 || v142 != v61)
  {
    v63 = _stringCompareWithSmolCheck(_:_:expecting:)(v141, v142, *v60, v60[1], 0);
    swift_bridgeObjectRelease(v59);
    if ((v63 & 1) != 0)
      goto LABEL_43;
LABEL_42:
    v143 = &type metadata for String;
    v144 = &protocol witness table for String;
    v141 = v62;
    v142 = v61;
    swift_bridgeObjectRetain(v61);
    CKRecordKeyValueSetting.subscript.setter(&v141, 0x6F4D6E6F74747562, 0xEB00000000736564, ObjectType);
    goto LABEL_43;
  }
  swift_bridgeObjectRelease(v142);
LABEL_43:
  CKRecordKeyValueSetting.subscript.getter(&v141, 0x726F6C6F63, 0xE500000000000000, ObjectType, &type metadata for String, &protocol witness table for String);
  v64 = v142;
  v65 = (uint64_t *)(v139 + v140[16]);
  v67 = *v65;
  v66 = v65[1];
  if (!v142)
    goto LABEL_48;
  if (v141 == v67 && v142 == v66)
  {
    swift_bridgeObjectRelease(v142);
    goto LABEL_49;
  }
  v68 = _stringCompareWithSmolCheck(_:_:expecting:)(v141, v142, *v65, v65[1], 0);
  swift_bridgeObjectRelease(v64);
  if ((v68 & 1) == 0)
  {
LABEL_48:
    v143 = &type metadata for String;
    v144 = &protocol witness table for String;
    v141 = v67;
    v142 = v66;
    swift_bridgeObjectRetain(v66);
    CKRecordKeyValueSetting.subscript.setter(&v141, 0x726F6C6F63, 0xE500000000000000, ObjectType);
  }
LABEL_49:
  CKRecordKeyValueSetting.subscript.getter(&v141, 0xD000000000000015, 0x80000001001ACBE0, ObjectType, &type metadata for String, &protocol witness table for String);
  v69 = v142;
  v70 = (uint64_t *)(v139 + v140[17]);
  v72 = *v70;
  v71 = v70[1];
  if (!v142)
    goto LABEL_55;
  if (v141 != v72 || v142 != v71)
  {
    v73 = _stringCompareWithSmolCheck(_:_:expecting:)(v141, v142, *v70, v70[1], 0);
    swift_bridgeObjectRelease(v69);
    if ((v73 & 1) != 0)
      goto LABEL_56;
LABEL_55:
    v143 = &type metadata for String;
    v144 = &protocol witness table for String;
    v141 = v72;
    v142 = v71;
    swift_bridgeObjectRetain(v71);
    CKRecordKeyValueSetting.subscript.setter(&v141, 0xD000000000000015, 0x80000001001ACBE0, ObjectType);
    goto LABEL_56;
  }
  swift_bridgeObjectRelease(v142);
LABEL_56:
  CKRecordKeyValueSetting.subscript.getter(&v141, 0xD000000000000015, 0x80000001001ACC00, ObjectType, &type metadata for String, &protocol witness table for String);
  v74 = v142;
  v75 = (uint64_t *)(v139 + v140[18]);
  v77 = *v75;
  v76 = v75[1];
  if (!v142)
    goto LABEL_61;
  if (v141 == v77 && v142 == v76)
  {
    swift_bridgeObjectRelease(v142);
    goto LABEL_62;
  }
  v78 = _stringCompareWithSmolCheck(_:_:expecting:)(v141, v142, *v75, v75[1], 0);
  swift_bridgeObjectRelease(v74);
  if ((v78 & 1) == 0)
  {
LABEL_61:
    v143 = &type metadata for String;
    v144 = &protocol witness table for String;
    v141 = v77;
    v142 = v76;
    swift_bridgeObjectRetain(v76);
    CKRecordKeyValueSetting.subscript.setter(&v141, 0xD000000000000015, 0x80000001001ACC00, ObjectType);
  }
LABEL_62:
  CKRecordKeyValueSetting.subscript.getter(&v141, 0x6974707972636E65, 0xED000079654B6E6FLL, ObjectType, &type metadata for Data, &protocol witness table for Data);
  v79 = v141;
  v80 = v142;
  v81 = (uint64_t *)(v139 + v140[12]);
  v82 = *v81;
  v83 = v81[1];
  sub_1000A0E74(*v81, v83);
  if (v80 >> 60 == 15)
  {
    sub_1000B2D78(v79, v80);
    sub_1000B2D78(v82, v83);
  }
  else
  {
    sub_1000B2D8C(v79, v80);
    sub_1000D25EC(v79, v80);
    v85 = v84;
    sub_1000A103C(v82, v83);
    sub_1000B2D78(v79, v80);
    sub_1000B2D78(v79, v80);
    if ((v85 & 1) != 0)
      goto LABEL_66;
  }
  v143 = &type metadata for Data;
  v144 = &protocol witness table for Data;
  v141 = v82;
  v142 = v83;
  sub_1000A0E74(v82, v83);
  CKRecordKeyValueSetting.subscript.setter(&v141, 0x6974707972636E65, 0xED000079654B6E6FLL, ObjectType);
LABEL_66:
  CKRecordKeyValueSetting.subscript.getter(&v141, 7041641, 0xE300000000000000, ObjectType, &type metadata for Data, &protocol witness table for Data);
  v86 = v141;
  v87 = v142;
  v88 = (uint64_t *)(v139 + v140[11]);
  v89 = *v88;
  v90 = v88[1];
  sub_1000A0E74(*v88, v90);
  if (v87 >> 60 == 15)
  {
    sub_1000B2D78(v86, v87);
    sub_1000B2D78(v89, v90);
LABEL_69:
    v143 = &type metadata for Data;
    v144 = &protocol witness table for Data;
    v141 = v89;
    v142 = v90;
    sub_1000A0E74(v89, v90);
    CKRecordKeyValueSetting.subscript.setter(&v141, 7041641, 0xE300000000000000, ObjectType);
    goto LABEL_70;
  }
  sub_1000B2D8C(v86, v87);
  sub_1000D25EC(v86, v87);
  v92 = v91;
  sub_1000A103C(v89, v90);
  sub_1000B2D78(v86, v87);
  sub_1000B2D78(v86, v87);
  if ((v92 & 1) == 0)
    goto LABEL_69;
LABEL_70:
  CKRecordKeyValueSetting.subscript.getter(&v141, 0xD000000000000011, 0x80000001001ACC20, ObjectType, &type metadata for String, &protocol witness table for String);
  v93 = v142;
  v94 = (uint64_t *)(v139 + v140[19]);
  v96 = *v94;
  v95 = v94[1];
  if (!v142)
    goto LABEL_75;
  if (v141 == v96 && v142 == v95)
  {
    swift_bridgeObjectRelease(v142);
    goto LABEL_76;
  }
  v97 = _stringCompareWithSmolCheck(_:_:expecting:)(v141, v142, *v94, v94[1], 0);
  swift_bridgeObjectRelease(v93);
  if ((v97 & 1) == 0)
  {
LABEL_75:
    v143 = &type metadata for String;
    v144 = &protocol witness table for String;
    v141 = v96;
    v142 = v95;
    swift_bridgeObjectRetain(v95);
    CKRecordKeyValueSetting.subscript.setter(&v141, 0xD000000000000011, 0x80000001001ACC20, ObjectType);
  }
LABEL_76:
  CKRecordKeyValueSetting.subscript.getter(&v141, 0xD000000000000013, 0x80000001001ACC40, ObjectType, &type metadata for String, &protocol witness table for String);
  v98 = v142;
  v99 = (uint64_t *)(v139 + v140[20]);
  v101 = *v99;
  v100 = v99[1];
  if (!v142)
    goto LABEL_81;
  if (v141 != v101 || v142 != v100)
  {
    v102 = _stringCompareWithSmolCheck(_:_:expecting:)(v141, v142, *v99, v99[1], 0);
    swift_bridgeObjectRelease(v98);
    if ((v102 & 1) != 0)
      goto LABEL_82;
LABEL_81:
    v143 = &type metadata for String;
    v144 = &protocol witness table for String;
    v141 = v101;
    v142 = v100;
    swift_bridgeObjectRetain(v100);
    CKRecordKeyValueSetting.subscript.setter(&v141, 0xD000000000000013, 0x80000001001ACC40, ObjectType);
    goto LABEL_82;
  }
  swift_bridgeObjectRelease(v142);
LABEL_82:
  CKRecordKeyValueSetting.subscript.getter(&v141, 0x416C616974617073, 0xEC0000006F696475, ObjectType, &type metadata for String, &protocol witness table for String);
  v103 = v142;
  v104 = (uint64_t *)(v139 + v140[21]);
  v106 = *v104;
  v105 = v104[1];
  if (!v142)
    goto LABEL_87;
  if (v141 == v106 && v142 == v105)
  {
    swift_bridgeObjectRelease(v142);
    goto LABEL_88;
  }
  v107 = _stringCompareWithSmolCheck(_:_:expecting:)(v141, v142, *v104, v104[1], 0);
  swift_bridgeObjectRelease(v103);
  if ((v107 & 1) == 0)
  {
LABEL_87:
    v143 = &type metadata for String;
    v144 = &protocol witness table for String;
    v141 = v106;
    v142 = v105;
    swift_bridgeObjectRetain(v105);
    CKRecordKeyValueSetting.subscript.setter(&v141, 0x416C616974617073, 0xEC0000006F696475, ObjectType);
  }
LABEL_88:
  CKRecordKeyValueSetting.subscript.getter(&v141, 0xD000000000000018, 0x80000001001ACC60, ObjectType, &type metadata for String, &protocol witness table for String);
  v108 = v142;
  v109 = (uint64_t *)(v139 + v140[22]);
  v111 = *v109;
  v110 = v109[1];
  if (!v142)
    goto LABEL_94;
  if (v141 != v111 || v142 != v110)
  {
    v112 = _stringCompareWithSmolCheck(_:_:expecting:)(v141, v142, *v109, v109[1], 0);
    swift_bridgeObjectRelease(v108);
    if ((v112 & 1) != 0)
      goto LABEL_95;
LABEL_94:
    v143 = &type metadata for String;
    v144 = &protocol witness table for String;
    v141 = v111;
    v142 = v110;
    swift_bridgeObjectRetain(v110);
    CKRecordKeyValueSetting.subscript.setter(&v141, 0xD000000000000018, 0x80000001001ACC60, ObjectType);
    goto LABEL_95;
  }
  swift_bridgeObjectRelease(v142);
LABEL_95:
  CKRecordKeyValueSetting.subscript.getter(&v141, 0xD000000000000022, 0x80000001001ACC80, ObjectType, &type metadata for String, &protocol witness table for String);
  v113 = v142;
  v114 = (uint64_t *)(v139 + v140[23]);
  v116 = *v114;
  v115 = v114[1];
  if (!v142)
    goto LABEL_100;
  if (v141 == v116 && v142 == v115)
  {
    swift_bridgeObjectRelease(v142);
    goto LABEL_101;
  }
  v117 = _stringCompareWithSmolCheck(_:_:expecting:)(v141, v142, *v114, v114[1], 0);
  swift_bridgeObjectRelease(v113);
  if ((v117 & 1) == 0)
  {
LABEL_100:
    v143 = &type metadata for String;
    v144 = &protocol witness table for String;
    v141 = v116;
    v142 = v115;
    swift_bridgeObjectRetain(v115);
    CKRecordKeyValueSetting.subscript.setter(&v141, 0xD000000000000022, 0x80000001001ACC80, ObjectType);
  }
LABEL_101:
  CKRecordKeyValueSetting.subscript.getter(&v141, 0x74656863746172, 0xE700000000000000, ObjectType, &type metadata for String, &protocol witness table for String);
  v118 = v142;
  v119 = (uint64_t *)(v139 + v140[24]);
  v121 = *v119;
  v120 = v119[1];
  if (!v142)
    goto LABEL_106;
  if (v141 != v121 || v142 != v120)
  {
    v122 = _stringCompareWithSmolCheck(_:_:expecting:)(v141, v142, *v119, v119[1], 0);
    swift_bridgeObjectRelease(v118);
    if ((v122 & 1) != 0)
      goto LABEL_107;
LABEL_106:
    v143 = &type metadata for String;
    v144 = &protocol witness table for String;
    v141 = v121;
    v142 = v120;
    swift_bridgeObjectRetain(v120);
    CKRecordKeyValueSetting.subscript.setter(&v141, 0x74656863746172, 0xE700000000000000, ObjectType);
    goto LABEL_107;
  }
  swift_bridgeObjectRelease(v142);
LABEL_107:
  CKRecordKeyValueSetting.subscript.getter(&v141, 0x73676E6974746573, 0xEC0000006B73614DLL, ObjectType, &type metadata for String, &protocol witness table for String);
  v123 = v142;
  v124 = (uint64_t *)(v139 + v140[26]);
  v126 = *v124;
  v125 = v124[1];
  if (!v142)
    goto LABEL_112;
  if (v141 == v126 && v142 == v125)
  {
    swift_bridgeObjectRelease(v142);
    goto LABEL_113;
  }
  v127 = _stringCompareWithSmolCheck(_:_:expecting:)(v141, v142, *v124, v124[1], 0);
  swift_bridgeObjectRelease(v123);
  if ((v127 & 1) == 0)
  {
LABEL_112:
    v143 = &type metadata for String;
    v144 = &protocol witness table for String;
    v141 = v126;
    v142 = v125;
    swift_bridgeObjectRetain(v125);
    CKRecordKeyValueSetting.subscript.setter(&v141, 0x73676E6974746573, 0xEC0000006B73614DLL, ObjectType);
  }
LABEL_113:
  CKRecordKeyValueSetting.subscript.getter(&v141, 0xD000000000000011, 0x80000001001ACCB0, ObjectType, &type metadata for String, &protocol witness table for String);
  v128 = v142;
  v129 = (uint64_t *)(v139 + v140[27]);
  v131 = *v129;
  v130 = v129[1];
  if (!v142)
    goto LABEL_118;
  if (v141 != v131 || v142 != v130)
  {
    v132 = _stringCompareWithSmolCheck(_:_:expecting:)(v141, v142, *v129, v129[1], 0);
    swift_bridgeObjectRelease(v128);
    if ((v132 & 1) != 0)
      goto LABEL_119;
LABEL_118:
    v143 = &type metadata for String;
    v144 = &protocol witness table for String;
    v141 = v131;
    v142 = v130;
    swift_bridgeObjectRetain(v130);
    CKRecordKeyValueSetting.subscript.setter(&v141, 0xD000000000000011, 0x80000001001ACCB0, ObjectType);
    goto LABEL_119;
  }
  swift_bridgeObjectRelease(v142);
LABEL_119:
  CKRecordKeyValueSetting.subscript.getter(&v141, 0x6E6F6973726576, 0xE700000000000000, ObjectType, &type metadata for String, &protocol witness table for String);
  v133 = v142;
  v134 = (uint64_t *)(v139 + v140[28]);
  v136 = *v134;
  v135 = v134[1];
  if (!v142)
    goto LABEL_124;
  if (v141 == v136 && v142 == v135)
  {
    swift_unknownObjectRelease(v13);
    return swift_bridgeObjectRelease(v133);
  }
  v138 = _stringCompareWithSmolCheck(_:_:expecting:)(v141, v142, *v134, v134[1], 0);
  swift_bridgeObjectRelease(v133);
  if ((v138 & 1) == 0)
  {
LABEL_124:
    v143 = &type metadata for String;
    v144 = &protocol witness table for String;
    v141 = v136;
    v142 = v135;
    swift_bridgeObjectRetain(v135);
    CKRecordKeyValueSetting.subscript.setter(&v141, 0x6E6F6973726576, 0xE700000000000000, ObjectType);
  }
  return swift_unknownObjectRelease(v13);
}

uint64_t sub_1000CD0D8(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  void *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  unint64_t v24;
  id v25;
  void *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  id v41;
  void *v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  unint64_t v48;
  id v49;
  void *v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  char v54;
  id v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  id v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  id v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  id v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char v82;
  id v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  id v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char v96;
  id v97;
  void *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  id v105;
  void *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char v110;
  id v111;
  void *v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t *v116;
  uint64_t v117;
  unint64_t v118;
  id v119;
  void *v120;
  uint64_t v121;
  unint64_t v122;
  unint64_t v123;
  char v124;
  id v125;
  void *v126;
  uint64_t v127;
  unint64_t v128;
  unint64_t v129;
  uint64_t *v130;
  uint64_t v131;
  unint64_t v132;
  id v133;
  void *v134;
  uint64_t v135;
  unint64_t v136;
  unint64_t v137;
  char v138;
  id v139;
  void *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t *v144;
  uint64_t v145;
  uint64_t v146;
  id v147;
  void *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  char v152;
  id v153;
  void *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t *v158;
  uint64_t v159;
  uint64_t v160;
  id v161;
  void *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  char v166;
  id v167;
  void *v168;
  uint64_t v169;
  unint64_t v170;
  unint64_t v171;
  uint64_t *v172;
  uint64_t v173;
  unint64_t v174;
  id v175;
  void *v176;
  uint64_t v177;
  unint64_t v178;
  unint64_t v179;
  char v180;
  id v181;
  void *v182;
  uint64_t v183;
  unint64_t v184;
  unint64_t v185;
  uint64_t *v186;
  uint64_t v187;
  unint64_t v188;
  id v189;
  void *v190;
  uint64_t v191;
  unint64_t v192;
  unint64_t v193;
  char v194;
  id v195;
  void *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t *v200;
  uint64_t v201;
  uint64_t v202;
  id v203;
  void *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  char v208;
  id v209;
  void *v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t *v214;
  uint64_t v215;
  uint64_t v216;
  id v217;
  void *v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  char v222;
  id v223;
  void *v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t *v228;
  uint64_t v229;
  uint64_t v230;
  id v231;
  void *v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  char v236;
  id v237;
  void *v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t *v242;
  uint64_t v243;
  uint64_t v244;
  id v245;
  void *v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  char v250;
  id v251;
  void *v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t *v256;
  uint64_t v257;
  uint64_t v258;
  id v259;
  void *v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  char v264;
  id v265;
  void *v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t *v270;
  uint64_t v271;
  uint64_t v272;
  id v273;
  void *v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  char v278;
  id v279;
  void *v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t *v284;
  uint64_t v285;
  uint64_t v286;
  id v287;
  void *v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  char v292;
  id v293;
  void *v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t *v298;
  uint64_t v299;
  uint64_t v300;
  id v301;
  void *v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  char v306;
  id v307;
  void *v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t *v312;
  uint64_t v313;
  uint64_t v314;
  id v315;
  void *v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  char v320;
  char *v321;
  uint64_t v322;
  uint64_t v323;
  char *v324;
  int *v325;

  v2 = v1;
  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v324 = (char *)&v322 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v325 = (int *)type metadata accessor for MagicPairingSettingsRecord(0);
  __chkstk_darwin(v325);
  v8 = (char *)&v322 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1000CE774(a1);
  if ((v9 & 1) != 0)
  {
    v322 = v5;
    v323 = v4;
    v10 = static os_log_type_t.debug.getter(v9);
    if (qword_1002101E0 != -1)
      swift_once(&qword_1002101E0, sub_1001687B0);
    v11 = qword_100218DE8;
    v12 = sub_1000A0980((uint64_t *)&unk_1002103C0);
    v13 = swift_allocObject(v12, 72, 7);
    *(_OWORD *)(v13 + 16) = xmmword_100184870;
    sub_1000D2864(v1, (uint64_t)v8);
    v14 = sub_1000C8310();
    v16 = v15;
    sub_1000D28A8((uint64_t)v8);
    *(_QWORD *)(v13 + 56) = &type metadata for String;
    *(_QWORD *)(v13 + 64) = sub_1000A0DF4();
    *(_QWORD *)(v13 + 32) = v14;
    *(_QWORD *)(v13 + 40) = v16;
    os_log(_:dso:log:_:_:)(v10, &_mh_execute_header, v11, "Updating magic settings record: %@", 34, 2, v13);
    swift_bridgeObjectRelease(v13);
    v17 = objc_msgSend(a1, "accessoryHint");
    if (v17)
    {
      v18 = v17;
      v19 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      v21 = v20;

      v22 = (uint64_t *)(v2 + v325[10]);
      v23 = *v22;
      v24 = v22[1];
      sub_1000A0E74(*v22, v24);
      v25 = objc_msgSend(a1, "accessoryHint");
      if (v25)
      {
        v26 = v25;
        v27 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        v29 = v28;

        sub_1000A0E74(v23, v24);
        sub_1000D25EC(v23, v24);
        LOBYTE(v26) = v30;
        sub_1000A103C(v27, v29);
        sub_1000A103C(v23, v24);
        sub_1000A103C(v23, v24);
        if ((v26 & 1) != 0)
        {
          sub_1000A103C(v19, v21);
          goto LABEL_13;
        }
      }
      else
      {
        sub_1000B2D78(v23, v24);
        sub_1000B2D78(0, 0xF000000000000000);
      }
      sub_1000A103C(v23, v24);
      *v22 = v19;
      v22[1] = v21;
    }
LABEL_13:
    v41 = objc_msgSend(a1, "accessoryKey");
    if (!v41)
      goto LABEL_19;
    v42 = v41;
    v43 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    v45 = v44;

    v46 = (uint64_t *)(v2 + v325[9]);
    v47 = *v46;
    v48 = v46[1];
    sub_1000A0E74(*v46, v48);
    v49 = objc_msgSend(a1, "accessoryKey");
    if (v49)
    {
      v50 = v49;
      v51 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      v53 = v52;

      sub_1000A0E74(v47, v48);
      sub_1000D25EC(v47, v48);
      LOBYTE(v50) = v54;
      sub_1000A103C(v51, v53);
      sub_1000A103C(v47, v48);
      sub_1000A103C(v47, v48);
      if ((v50 & 1) != 0)
      {
        sub_1000A103C(v43, v45);
        goto LABEL_19;
      }
    }
    else
    {
      sub_1000B2D78(v47, v48);
      sub_1000B2D78(0, 0xF000000000000000);
    }
    sub_1000A103C(v47, v48);
    *v46 = v43;
    v46[1] = v45;
LABEL_19:
    v55 = objc_msgSend(a1, "buttonModes");
    if (!v55)
      goto LABEL_28;
    v56 = v55;
    v57 = static String._unconditionallyBridgeFromObjectiveC(_:)(v55);
    v59 = v58;

    v60 = (uint64_t *)(v2 + v325[15]);
    v62 = *v60;
    v61 = v60[1];
    swift_bridgeObjectRetain(v61);
    v63 = objc_msgSend(a1, "buttonModes");
    if (v63)
    {
      v64 = v63;
      v65 = static String._unconditionallyBridgeFromObjectiveC(_:)(v63);
      v67 = v66;

      if (v62 == v65 && v61 == v67)
      {
        swift_bridgeObjectRelease(v59);
        swift_bridgeObjectRelease_n(v61, 2);
        goto LABEL_28;
      }
      v68 = _stringCompareWithSmolCheck(_:_:expecting:)(v62, v61, v65, v67, 0);
      swift_bridgeObjectRelease(v61);
      swift_bridgeObjectRelease(v67);
      if ((v68 & 1) != 0)
      {
        swift_bridgeObjectRelease(v59);
        goto LABEL_28;
      }
    }
    else
    {
      swift_bridgeObjectRelease(v61);
    }
    swift_bridgeObjectRelease(v61);
    *v60 = v57;
    v60[1] = v59;
LABEL_28:
    v69 = objc_msgSend(a1, "color");
    if (!v69)
      goto LABEL_37;
    v70 = v69;
    v71 = static String._unconditionallyBridgeFromObjectiveC(_:)(v69);
    v73 = v72;

    v74 = (uint64_t *)(v2 + v325[16]);
    v76 = *v74;
    v75 = v74[1];
    swift_bridgeObjectRetain(v75);
    v77 = objc_msgSend(a1, "color");
    if (v77)
    {
      v78 = v77;
      v79 = static String._unconditionallyBridgeFromObjectiveC(_:)(v77);
      v81 = v80;

      if (v76 == v79 && v75 == v81)
      {
        swift_bridgeObjectRelease(v73);
        swift_bridgeObjectRelease_n(v75, 2);
        goto LABEL_37;
      }
      v82 = _stringCompareWithSmolCheck(_:_:expecting:)(v76, v75, v79, v81, 0);
      swift_bridgeObjectRelease(v75);
      swift_bridgeObjectRelease(v81);
      if ((v82 & 1) != 0)
      {
        swift_bridgeObjectRelease(v73);
        goto LABEL_37;
      }
    }
    else
    {
      swift_bridgeObjectRelease(v75);
    }
    swift_bridgeObjectRelease(v75);
    *v74 = v71;
    v74[1] = v73;
LABEL_37:
    v83 = objc_msgSend(a1, "deviceIDFeatureBitsV1");
    if (!v83)
      goto LABEL_46;
    v84 = v83;
    v85 = static String._unconditionallyBridgeFromObjectiveC(_:)(v83);
    v87 = v86;

    v88 = (uint64_t *)(v2 + v325[17]);
    v90 = *v88;
    v89 = v88[1];
    swift_bridgeObjectRetain(v89);
    v91 = objc_msgSend(a1, "deviceIDFeatureBitsV1");
    if (v91)
    {
      v92 = v91;
      v93 = static String._unconditionallyBridgeFromObjectiveC(_:)(v91);
      v95 = v94;

      if (v90 == v93 && v89 == v95)
      {
        swift_bridgeObjectRelease(v87);
        swift_bridgeObjectRelease_n(v89, 2);
        goto LABEL_46;
      }
      v96 = _stringCompareWithSmolCheck(_:_:expecting:)(v90, v89, v93, v95, 0);
      swift_bridgeObjectRelease(v89);
      swift_bridgeObjectRelease(v95);
      if ((v96 & 1) != 0)
      {
        swift_bridgeObjectRelease(v87);
        goto LABEL_46;
      }
    }
    else
    {
      swift_bridgeObjectRelease(v89);
    }
    swift_bridgeObjectRelease(v89);
    *v88 = v85;
    v88[1] = v87;
LABEL_46:
    v97 = objc_msgSend(a1, "deviceIDFeatureBitsV2");
    if (!v97)
      goto LABEL_55;
    v98 = v97;
    v99 = static String._unconditionallyBridgeFromObjectiveC(_:)(v97);
    v101 = v100;

    v102 = (uint64_t *)(v2 + v325[18]);
    v104 = *v102;
    v103 = v102[1];
    swift_bridgeObjectRetain(v103);
    v105 = objc_msgSend(a1, "deviceIDFeatureBitsV2");
    if (v105)
    {
      v106 = v105;
      v107 = static String._unconditionallyBridgeFromObjectiveC(_:)(v105);
      v109 = v108;

      if (v104 == v107 && v103 == v109)
      {
        swift_bridgeObjectRelease(v101);
        swift_bridgeObjectRelease_n(v103, 2);
        goto LABEL_55;
      }
      v110 = _stringCompareWithSmolCheck(_:_:expecting:)(v104, v103, v107, v109, 0);
      swift_bridgeObjectRelease(v103);
      swift_bridgeObjectRelease(v109);
      if ((v110 & 1) != 0)
      {
        swift_bridgeObjectRelease(v101);
        goto LABEL_55;
      }
    }
    else
    {
      swift_bridgeObjectRelease(v103);
    }
    swift_bridgeObjectRelease(v103);
    *v102 = v99;
    v102[1] = v101;
LABEL_55:
    v111 = objc_msgSend(a1, "encryptionKey");
    if (!v111)
      goto LABEL_61;
    v112 = v111;
    v113 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    v115 = v114;

    v116 = (uint64_t *)(v2 + v325[12]);
    v117 = *v116;
    v118 = v116[1];
    sub_1000A0E74(*v116, v118);
    v119 = objc_msgSend(a1, "encryptionKey");
    if (v119)
    {
      v120 = v119;
      v121 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      v123 = v122;

      sub_1000A0E74(v117, v118);
      sub_1000D25EC(v117, v118);
      LOBYTE(v120) = v124;
      sub_1000A103C(v121, v123);
      sub_1000A103C(v117, v118);
      sub_1000A103C(v117, v118);
      if ((v120 & 1) != 0)
      {
        sub_1000A103C(v113, v115);
        goto LABEL_61;
      }
    }
    else
    {
      sub_1000B2D78(v117, v118);
      sub_1000B2D78(0, 0xF000000000000000);
    }
    sub_1000A103C(v117, v118);
    *v116 = v113;
    v116[1] = v115;
LABEL_61:
    v125 = objc_msgSend(a1, "irk");
    if (!v125)
      goto LABEL_67;
    v126 = v125;
    v127 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    v129 = v128;

    v130 = (uint64_t *)(v2 + v325[11]);
    v131 = *v130;
    v132 = v130[1];
    sub_1000A0E74(*v130, v132);
    v133 = objc_msgSend(a1, "irk");
    if (v133)
    {
      v134 = v133;
      v135 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      v137 = v136;

      sub_1000A0E74(v131, v132);
      sub_1000D25EC(v131, v132);
      LOBYTE(v134) = v138;
      sub_1000A103C(v135, v137);
      sub_1000A103C(v131, v132);
      sub_1000A103C(v131, v132);
      if ((v134 & 1) != 0)
      {
        sub_1000A103C(v127, v129);
        goto LABEL_67;
      }
    }
    else
    {
      sub_1000B2D78(v131, v132);
      sub_1000B2D78(0, 0xF000000000000000);
    }
    sub_1000A103C(v131, v132);
    *v130 = v127;
    v130[1] = v129;
LABEL_67:
    v139 = objc_msgSend(a1, "listeningServices");
    if (!v139)
      goto LABEL_76;
    v140 = v139;
    v141 = static String._unconditionallyBridgeFromObjectiveC(_:)(v139);
    v143 = v142;

    v144 = (uint64_t *)(v2 + v325[19]);
    v146 = *v144;
    v145 = v144[1];
    swift_bridgeObjectRetain(v145);
    v147 = objc_msgSend(a1, "listeningServices");
    if (v147)
    {
      v148 = v147;
      v149 = static String._unconditionallyBridgeFromObjectiveC(_:)(v147);
      v151 = v150;

      if (v146 == v149 && v145 == v151)
      {
        swift_bridgeObjectRelease(v143);
        swift_bridgeObjectRelease_n(v145, 2);
        goto LABEL_76;
      }
      v152 = _stringCompareWithSmolCheck(_:_:expecting:)(v146, v145, v149, v151, 0);
      swift_bridgeObjectRelease(v145);
      swift_bridgeObjectRelease(v151);
      if ((v152 & 1) != 0)
      {
        swift_bridgeObjectRelease(v143);
        goto LABEL_76;
      }
    }
    else
    {
      swift_bridgeObjectRelease(v145);
    }
    swift_bridgeObjectRelease(v145);
    *v144 = v141;
    v144[1] = v143;
LABEL_76:
    v153 = objc_msgSend(a1, "listeningServicesV2");
    if (!v153)
      goto LABEL_85;
    v154 = v153;
    v155 = static String._unconditionallyBridgeFromObjectiveC(_:)(v153);
    v157 = v156;

    v158 = (uint64_t *)(v2 + v325[20]);
    v160 = *v158;
    v159 = v158[1];
    swift_bridgeObjectRetain(v159);
    v161 = objc_msgSend(a1, "listeningServicesV2");
    if (v161)
    {
      v162 = v161;
      v163 = static String._unconditionallyBridgeFromObjectiveC(_:)(v161);
      v165 = v164;

      if (v160 == v163 && v159 == v165)
      {
        swift_bridgeObjectRelease(v157);
        swift_bridgeObjectRelease_n(v159, 2);
        goto LABEL_85;
      }
      v166 = _stringCompareWithSmolCheck(_:_:expecting:)(v160, v159, v163, v165, 0);
      swift_bridgeObjectRelease(v159);
      swift_bridgeObjectRelease(v165);
      if ((v166 & 1) != 0)
      {
        swift_bridgeObjectRelease(v157);
        goto LABEL_85;
      }
    }
    else
    {
      swift_bridgeObjectRelease(v159);
    }
    swift_bridgeObjectRelease(v159);
    *v158 = v155;
    v158[1] = v157;
LABEL_85:
    v167 = objc_msgSend(a1, "masterKey");
    if (!v167)
      goto LABEL_91;
    v168 = v167;
    v169 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    v171 = v170;

    v172 = (uint64_t *)(v2 + v325[7]);
    v173 = *v172;
    v174 = v172[1];
    sub_1000A0E74(*v172, v174);
    v175 = objc_msgSend(a1, "masterKey");
    if (v175)
    {
      v176 = v175;
      v177 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      v179 = v178;

      sub_1000A0E74(v173, v174);
      sub_1000D25EC(v173, v174);
      LOBYTE(v176) = v180;
      sub_1000A103C(v177, v179);
      sub_1000A103C(v173, v174);
      sub_1000A103C(v173, v174);
      if ((v176 & 1) != 0)
      {
        sub_1000A103C(v169, v171);
        goto LABEL_91;
      }
    }
    else
    {
      sub_1000B2D78(v173, v174);
      sub_1000B2D78(0, 0xF000000000000000);
    }
    sub_1000A103C(v173, v174);
    *v172 = v169;
    v172[1] = v171;
LABEL_91:
    v181 = objc_msgSend(a1, "masterHint");
    if (!v181)
      goto LABEL_97;
    v182 = v181;
    v183 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    v185 = v184;

    v186 = (uint64_t *)(v2 + v325[8]);
    v187 = *v186;
    v188 = v186[1];
    sub_1000A0E74(*v186, v188);
    v189 = objc_msgSend(a1, "masterHint");
    if (v189)
    {
      v190 = v189;
      v191 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      v193 = v192;

      sub_1000A0E74(v187, v188);
      sub_1000D25EC(v187, v188);
      LOBYTE(v190) = v194;
      sub_1000A103C(v191, v193);
      sub_1000A103C(v187, v188);
      sub_1000A103C(v187, v188);
      if ((v190 & 1) != 0)
      {
        sub_1000A103C(v183, v185);
        goto LABEL_97;
      }
    }
    else
    {
      sub_1000B2D78(v187, v188);
      sub_1000B2D78(0, 0xF000000000000000);
    }
    sub_1000A103C(v187, v188);
    *v186 = v183;
    v186[1] = v185;
LABEL_97:
    v195 = objc_msgSend(a1, "optimizedBatteryCharging");
    if (!v195)
      goto LABEL_106;
    v196 = v195;
    v197 = static String._unconditionallyBridgeFromObjectiveC(_:)(v195);
    v199 = v198;

    v200 = (uint64_t *)(v2 + v325[22]);
    v202 = *v200;
    v201 = v200[1];
    swift_bridgeObjectRetain(v201);
    v203 = objc_msgSend(a1, "optimizedBatteryCharging");
    if (v203)
    {
      v204 = v203;
      v205 = static String._unconditionallyBridgeFromObjectiveC(_:)(v203);
      v207 = v206;

      if (v202 == v205 && v201 == v207)
      {
        swift_bridgeObjectRelease(v199);
        swift_bridgeObjectRelease_n(v201, 2);
        goto LABEL_106;
      }
      v208 = _stringCompareWithSmolCheck(_:_:expecting:)(v202, v201, v205, v207, 0);
      swift_bridgeObjectRelease(v201);
      swift_bridgeObjectRelease(v207);
      if ((v208 & 1) != 0)
      {
        swift_bridgeObjectRelease(v199);
        goto LABEL_106;
      }
    }
    else
    {
      swift_bridgeObjectRelease(v201);
    }
    swift_bridgeObjectRelease(v201);
    *v200 = v197;
    v200[1] = v199;
LABEL_106:
    v209 = objc_msgSend(a1, "optimizedBatteryFullChargeDeadline");
    if (!v209)
      goto LABEL_115;
    v210 = v209;
    v211 = static String._unconditionallyBridgeFromObjectiveC(_:)(v209);
    v213 = v212;

    v214 = (uint64_t *)(v2 + v325[23]);
    v216 = *v214;
    v215 = v214[1];
    swift_bridgeObjectRetain(v215);
    v217 = objc_msgSend(a1, "optimizedBatteryFullChargeDeadline");
    if (v217)
    {
      v218 = v217;
      v219 = static String._unconditionallyBridgeFromObjectiveC(_:)(v217);
      v221 = v220;

      if (v216 == v219 && v215 == v221)
      {
        swift_bridgeObjectRelease(v213);
        swift_bridgeObjectRelease_n(v215, 2);
        goto LABEL_115;
      }
      v222 = _stringCompareWithSmolCheck(_:_:expecting:)(v216, v215, v219, v221, 0);
      swift_bridgeObjectRelease(v215);
      swift_bridgeObjectRelease(v221);
      if ((v222 & 1) != 0)
      {
        swift_bridgeObjectRelease(v213);
        goto LABEL_115;
      }
    }
    else
    {
      swift_bridgeObjectRelease(v215);
    }
    swift_bridgeObjectRelease(v215);
    *v214 = v211;
    v214[1] = v213;
LABEL_115:
    v223 = objc_msgSend(a1, "productID");
    if (!v223)
      goto LABEL_124;
    v224 = v223;
    v225 = static String._unconditionallyBridgeFromObjectiveC(_:)(v223);
    v227 = v226;

    v228 = (uint64_t *)(v2 + v325[13]);
    v230 = *v228;
    v229 = v228[1];
    swift_bridgeObjectRetain(v229);
    v231 = objc_msgSend(a1, "productID");
    if (v231)
    {
      v232 = v231;
      v233 = static String._unconditionallyBridgeFromObjectiveC(_:)(v231);
      v235 = v234;

      if (v230 == v233 && v229 == v235)
      {
        swift_bridgeObjectRelease(v227);
        swift_bridgeObjectRelease_n(v229, 2);
        goto LABEL_124;
      }
      v236 = _stringCompareWithSmolCheck(_:_:expecting:)(v230, v229, v233, v235, 0);
      swift_bridgeObjectRelease(v229);
      swift_bridgeObjectRelease(v235);
      if ((v236 & 1) != 0)
      {
        swift_bridgeObjectRelease(v227);
        goto LABEL_124;
      }
    }
    else
    {
      swift_bridgeObjectRelease(v229);
    }
    swift_bridgeObjectRelease(v229);
    *v228 = v225;
    v228[1] = v227;
LABEL_124:
    v237 = objc_msgSend(a1, "ratchet");
    if (!v237)
      goto LABEL_133;
    v238 = v237;
    v239 = static String._unconditionallyBridgeFromObjectiveC(_:)(v237);
    v241 = v240;

    v242 = (uint64_t *)(v2 + v325[24]);
    v244 = *v242;
    v243 = v242[1];
    swift_bridgeObjectRetain(v243);
    v245 = objc_msgSend(a1, "ratchet");
    if (v245)
    {
      v246 = v245;
      v247 = static String._unconditionallyBridgeFromObjectiveC(_:)(v245);
      v249 = v248;

      if (v244 == v247 && v243 == v249)
      {
        swift_bridgeObjectRelease(v241);
        swift_bridgeObjectRelease_n(v243, 2);
        goto LABEL_133;
      }
      v250 = _stringCompareWithSmolCheck(_:_:expecting:)(v244, v243, v247, v249, 0);
      swift_bridgeObjectRelease(v243);
      swift_bridgeObjectRelease(v249);
      if ((v250 & 1) != 0)
      {
        swift_bridgeObjectRelease(v241);
        goto LABEL_133;
      }
    }
    else
    {
      swift_bridgeObjectRelease(v243);
    }
    swift_bridgeObjectRelease(v243);
    *v242 = v239;
    v242[1] = v241;
LABEL_133:
    v251 = objc_msgSend(a1, "settingsMask");
    if (!v251)
      goto LABEL_142;
    v252 = v251;
    v253 = static String._unconditionallyBridgeFromObjectiveC(_:)(v251);
    v255 = v254;

    v256 = (uint64_t *)(v2 + v325[26]);
    v258 = *v256;
    v257 = v256[1];
    swift_bridgeObjectRetain(v257);
    v259 = objc_msgSend(a1, "settingsMask");
    if (v259)
    {
      v260 = v259;
      v261 = static String._unconditionallyBridgeFromObjectiveC(_:)(v259);
      v263 = v262;

      if (v258 == v261 && v257 == v263)
      {
        swift_bridgeObjectRelease(v255);
        swift_bridgeObjectRelease_n(v257, 2);
        goto LABEL_142;
      }
      v264 = _stringCompareWithSmolCheck(_:_:expecting:)(v258, v257, v261, v263, 0);
      swift_bridgeObjectRelease(v257);
      swift_bridgeObjectRelease(v263);
      if ((v264 & 1) != 0)
      {
        swift_bridgeObjectRelease(v255);
        goto LABEL_142;
      }
    }
    else
    {
      swift_bridgeObjectRelease(v257);
    }
    swift_bridgeObjectRelease(v257);
    *v256 = v253;
    v256[1] = v255;
LABEL_142:
    v265 = objc_msgSend(a1, "spatialAudio");
    if (!v265)
      goto LABEL_151;
    v266 = v265;
    v267 = static String._unconditionallyBridgeFromObjectiveC(_:)(v265);
    v269 = v268;

    v270 = (uint64_t *)(v2 + v325[21]);
    v272 = *v270;
    v271 = v270[1];
    swift_bridgeObjectRetain(v271);
    v273 = objc_msgSend(a1, "spatialAudio");
    if (v273)
    {
      v274 = v273;
      v275 = static String._unconditionallyBridgeFromObjectiveC(_:)(v273);
      v277 = v276;

      if (v272 == v275 && v271 == v277)
      {
        swift_bridgeObjectRelease(v269);
        swift_bridgeObjectRelease_n(v271, 2);
        goto LABEL_151;
      }
      v278 = _stringCompareWithSmolCheck(_:_:expecting:)(v272, v271, v275, v277, 0);
      swift_bridgeObjectRelease(v271);
      swift_bridgeObjectRelease(v277);
      if ((v278 & 1) != 0)
      {
        swift_bridgeObjectRelease(v269);
        goto LABEL_151;
      }
    }
    else
    {
      swift_bridgeObjectRelease(v271);
    }
    swift_bridgeObjectRelease(v271);
    *v270 = v267;
    v270[1] = v269;
LABEL_151:
    v279 = objc_msgSend(a1, "supportedServices");
    if (!v279)
      goto LABEL_160;
    v280 = v279;
    v281 = static String._unconditionallyBridgeFromObjectiveC(_:)(v279);
    v283 = v282;

    v284 = (uint64_t *)(v2 + v325[27]);
    v286 = *v284;
    v285 = v284[1];
    swift_bridgeObjectRetain(v285);
    v287 = objc_msgSend(a1, "supportedServices");
    if (v287)
    {
      v288 = v287;
      v289 = static String._unconditionallyBridgeFromObjectiveC(_:)(v287);
      v291 = v290;

      if (v286 == v289 && v285 == v291)
      {
        swift_bridgeObjectRelease(v283);
        swift_bridgeObjectRelease_n(v285, 2);
        goto LABEL_160;
      }
      v292 = _stringCompareWithSmolCheck(_:_:expecting:)(v286, v285, v289, v291, 0);
      swift_bridgeObjectRelease(v285);
      swift_bridgeObjectRelease(v291);
      if ((v292 & 1) != 0)
      {
        swift_bridgeObjectRelease(v283);
        goto LABEL_160;
      }
    }
    else
    {
      swift_bridgeObjectRelease(v285);
    }
    swift_bridgeObjectRelease(v285);
    *v284 = v281;
    v284[1] = v283;
LABEL_160:
    v293 = objc_msgSend(a1, "vendorID");
    if (!v293)
      goto LABEL_169;
    v294 = v293;
    v295 = static String._unconditionallyBridgeFromObjectiveC(_:)(v293);
    v297 = v296;

    v298 = (uint64_t *)(v2 + v325[14]);
    v300 = *v298;
    v299 = v298[1];
    swift_bridgeObjectRetain(v299);
    v301 = objc_msgSend(a1, "vendorID");
    if (v301)
    {
      v302 = v301;
      v303 = static String._unconditionallyBridgeFromObjectiveC(_:)(v301);
      v305 = v304;

      if (v300 == v303 && v299 == v305)
      {
        swift_bridgeObjectRelease(v297);
        swift_bridgeObjectRelease_n(v299, 2);
        goto LABEL_169;
      }
      v306 = _stringCompareWithSmolCheck(_:_:expecting:)(v300, v299, v303, v305, 0);
      swift_bridgeObjectRelease(v299);
      swift_bridgeObjectRelease(v305);
      if ((v306 & 1) != 0)
      {
        swift_bridgeObjectRelease(v297);
        goto LABEL_169;
      }
    }
    else
    {
      swift_bridgeObjectRelease(v299);
    }
    swift_bridgeObjectRelease(v299);
    *v298 = v295;
    v298[1] = v297;
LABEL_169:
    v307 = objc_msgSend(a1, "version");
    if (v307)
    {
      v308 = v307;
      v309 = static String._unconditionallyBridgeFromObjectiveC(_:)(v307);
      v311 = v310;

      v312 = (uint64_t *)(v2 + v325[28]);
      v314 = *v312;
      v313 = v312[1];
      swift_bridgeObjectRetain(v313);
      v315 = objc_msgSend(a1, "version");
      if (v315)
      {
        v316 = v315;
        v317 = static String._unconditionallyBridgeFromObjectiveC(_:)(v315);
        v319 = v318;

        if (v314 == v317 && v313 == v319)
        {
          swift_bridgeObjectRelease(v311);
          v307 = (id)swift_bridgeObjectRelease_n(v313, 2);
          goto LABEL_178;
        }
        v320 = _stringCompareWithSmolCheck(_:_:expecting:)(v314, v313, v317, v319, 0);
        swift_bridgeObjectRelease(v313);
        swift_bridgeObjectRelease(v319);
        if ((v320 & 1) != 0)
        {
          v307 = (id)swift_bridgeObjectRelease(v311);
          goto LABEL_178;
        }
      }
      else
      {
        swift_bridgeObjectRelease(v313);
      }
      v307 = (id)swift_bridgeObjectRelease(v313);
      *v312 = v309;
      v312[1] = v311;
    }
LABEL_178:
    v321 = v324;
    static Date.now.getter(v307);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v322 + 40))(v2 + v325[30], v321, v323);
  }
  v31 = static os_log_type_t.info.getter(v9);
  if (qword_1002101E0 != -1)
    swift_once(&qword_1002101E0, sub_1001687B0);
  v32 = qword_100218DE8;
  v33 = sub_1000A0980((uint64_t *)&unk_1002103C0);
  v34 = swift_allocObject(v33, 72, 7);
  *(_OWORD *)(v34 + 16) = xmmword_100184870;
  v35 = a1;
  v36 = objc_msgSend(v35, "description");
  v37 = static String._unconditionallyBridgeFromObjectiveC(_:)(v36);
  v39 = v38;

  *(_QWORD *)(v34 + 56) = &type metadata for String;
  *(_QWORD *)(v34 + 64) = sub_1000A0DF4();
  *(_QWORD *)(v34 + 32) = v37;
  *(_QWORD *)(v34 + 40) = v39;
  os_log(_:dso:log:_:_:)(v31, &_mh_execute_header, v32, "No change in updated magic settings record: %@", 46, 2, v34);
  return swift_bridgeObjectRelease(v34);
}

id sub_1000CE774(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  int *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  id v88;
  id v89;
  void *v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  id v94;
  void *v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char v101;
  uint64_t v102;
  char v103;
  id v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  char v110;
  int *v111;
  uint64_t v112;
  uint64_t *v113;
  uint64_t v114;
  unint64_t v115;
  __int16 v116;
  char v117;
  __int16 v118;
  char v119;
  __int16 v120;
  __int16 v121;
  uint64_t v122;
  id v123;
  void *v124;
  uint64_t v125;
  unint64_t v126;
  unint64_t v127;
  uint64_t v128;
  char v129;
  uint64_t v130;
  uint64_t *v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  char v135;
  id v136;
  void *v137;
  uint64_t v138;
  uint64_t v139;
  id v140;
  void *v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  id v149;
  uint64_t v150;
  id v151;
  void *v152;
  uint64_t v153;
  uint64_t v154;
  id v155;
  void *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  char *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  id v164;
  id v165;
  id v166;
  void *v167;
  uint64_t v168;
  unint64_t v169;
  unint64_t v170;
  uint64_t v171;
  unint64_t v172;
  id v173;
  void *v174;
  uint64_t v175;
  unint64_t v176;
  unint64_t v177;
  uint64_t *v178;
  uint64_t v179;
  unint64_t v180;
  char v181;
  char v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  char *v187;
  id v188;
  id v189;
  void *v190;
  uint64_t v191;
  unint64_t v192;
  unint64_t v193;
  uint64_t v194;
  uint64_t v195;
  id v196;
  void *v197;
  uint64_t v198;
  unint64_t v199;
  unint64_t v200;
  uint64_t *v201;
  uint64_t v202;
  unint64_t v203;
  char v204;
  char v205;
  id v206;
  id v207;
  void *v208;
  uint64_t v209;
  unint64_t v210;
  unint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  id v215;
  void *v216;
  uint64_t v217;
  unint64_t v218;
  unint64_t v219;
  uint64_t *v220;
  uint64_t v221;
  unint64_t v222;
  char v223;
  char v224;
  uint64_t v225;
  uint64_t v226;
  id v227;
  void *v228;
  uint64_t v229;
  unint64_t v230;
  unint64_t v231;
  uint64_t v232;
  id v233;
  void *v234;
  uint64_t v235;
  unint64_t v236;
  unint64_t v237;
  uint64_t *v238;
  uint64_t v239;
  unint64_t v240;
  char v241;
  char v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  char *v246;
  id v247;
  id v248;
  void *v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  id v254;
  void *v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  _QWORD *v260;
  uint64_t v261;
  char v262;
  id v263;
  void *v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  id v268;
  void *v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  _QWORD *v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  id result;
  char v284;
  id v285;
  void *v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  id v290;
  void *v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  _QWORD *v295;
  uint64_t v296;
  uint64_t v297;
  id v298;
  void *v299;
  uint64_t v300;
  uint64_t v301;
  id v302;
  void *v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  _QWORD *v307;
  uint64_t v308;
  uint64_t *v309;
  uint64_t *v310;
  uint64_t v311;
  uint64_t v312;
  id v313;
  void *v314;
  uint64_t v315;
  unint64_t v316;
  unint64_t v317;
  uint64_t v318;
  id v319;
  void *v320;
  uint64_t v321;
  unint64_t v322;
  unint64_t v323;
  uint64_t *v324;
  uint64_t v325;
  unint64_t v326;
  char v327;
  char v328;
  uint64_t *v329;
  id v330;
  void *v331;
  uint64_t v332;
  unint64_t v333;
  unint64_t v334;
  uint64_t v335;
  uint64_t v336;
  id v337;
  void *v338;
  uint64_t v339;
  unint64_t v340;
  unint64_t v341;
  uint64_t v342;
  uint64_t *v343;
  uint64_t v344;
  unint64_t v345;
  char v346;
  char v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t *v350;
  id v351;
  int *v352;
  char v353;
  uint64_t v354;
  char v355;
  uint64_t v356;
  uint64_t v357;
  char v358;
  uint64_t v359;
  uint64_t v360;
  char v361;
  uint64_t v362;
  char v363;
  uint64_t *v364;
  uint64_t v365;
  id v366;
  void *v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  id v371;
  void *v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  _QWORD *v377;
  uint64_t v378;
  id v379;
  void *v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  id v385;
  void *v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  char *v390;
  uint64_t v391;
  id v392;
  void *v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  id v398;
  void *v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  _QWORD *v405;
  uint64_t v406;
  uint64_t *v407;
  id v408;
  void *v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  void *v414;
  uint64_t v415;
  unint64_t v416;
  unint64_t v417;
  uint64_t v418;
  char v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t *v422;
  uint64_t v423;
  unint64_t v424;
  unint64_t v425;
  uint64_t v426;
  uint64_t v427;
  char v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  id v432;
  void *v433;
  uint64_t v434;
  unint64_t v435;
  unint64_t v436;
  uint64_t v437;
  uint64_t *v438;
  uint64_t v439;
  unint64_t v440;
  char v441;
  char v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  char v446;
  uint64_t v447;
  uint64_t v448;
  id v449;
  void *v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  id v454;
  void *v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  _QWORD *v460;
  uint64_t v461;
  id v462;
  void *v463;
  uint64_t v464;
  unint64_t v465;
  unint64_t v466;
  uint64_t v467;
  void *v468;
  uint64_t v469;
  unint64_t v470;
  unint64_t v471;
  uint64_t v472;
  char v473;
  uint64_t v474;
  void *v475;
  uint64_t v476;
  unint64_t v477;
  unint64_t v478;
  uint64_t v479;
  char v480;
  char v481;
  uint64_t v482;
  uint64_t *v483;
  uint64_t v484;
  unint64_t v485;
  uint64_t v486;
  char v487;
  char v488;
  id v489;
  void *v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t v493;
  id v494;
  void *v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  _QWORD *v499;
  uint64_t v500;
  char v501;
  char v502;
  uint64_t v503;
  uint64_t v504;
  char v505;
  uint64_t v506;
  uint64_t v507;
  char v508;
  uint64_t v509;
  char v510;
  uint64_t *v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t v514;
  uint64_t v515;
  uint64_t v516;
  uint64_t v517;
  uint64_t v518;
  char *v519;
  uint64_t v520;
  uint64_t v521;
  char *v522;
  uint64_t v523;
  char *v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  uint64_t v528;
  char *v529;
  uint64_t v530;
  uint64_t v531;
  uint64_t v532;
  char *v533;
  uint64_t v534;
  uint64_t v535;
  uint64_t v536;
  char *v537;
  char *v538;
  char *v539;
  uint64_t v540;
  char *v541;
  uint64_t v542;
  uint64_t v543;
  uint64_t v544;
  uint64_t v545;
  int *v546;
  uint64_t v547;
  uint64_t v548;
  id v549;

  v3 = type metadata accessor for MagicPairingSettingsRecord(0);
  __chkstk_darwin(v3);
  __chkstk_darwin(v4);
  v6 = (char *)&v513 - v5;
  __chkstk_darwin(v7);
  __chkstk_darwin(v8);
  v10 = (char *)&v513 - v9;
  __chkstk_darwin(v11);
  __chkstk_darwin(v12);
  __chkstk_darwin(v13);
  __chkstk_darwin(v14);
  __chkstk_darwin(v15);
  __chkstk_darwin(v16);
  __chkstk_darwin(v17);
  __chkstk_darwin(v18);
  v20 = (char *)&v513 - v19;
  __chkstk_darwin(v21);
  __chkstk_darwin(v22);
  v521 = (uint64_t)&v513 - v23;
  __chkstk_darwin(v24);
  v26 = (char *)&v513 - v25;
  __chkstk_darwin(v27);
  v523 = (uint64_t)&v513 - v28;
  __chkstk_darwin(v29);
  v540 = (uint64_t)&v513 - v30;
  __chkstk_darwin(v31);
  v522 = (char *)&v513 - v32;
  __chkstk_darwin(v33);
  v542 = (uint64_t)&v513 - v34;
  __chkstk_darwin(v35);
  v524 = (char *)&v513 - v36;
  __chkstk_darwin(v37);
  v538 = (char *)&v513 - v38;
  __chkstk_darwin(v39);
  v525 = (uint64_t)&v513 - v40;
  __chkstk_darwin(v41);
  v43 = (char *)&v513 - v42;
  __chkstk_darwin(v44);
  v526 = (uint64_t)&v513 - v45;
  __chkstk_darwin(v46);
  v541 = (char *)&v513 - v47;
  __chkstk_darwin(v48);
  v530 = (uint64_t)&v513 - v49;
  __chkstk_darwin(v50);
  v543 = (uint64_t)&v513 - v51;
  __chkstk_darwin(v52);
  v533 = (char *)&v513 - v53;
  __chkstk_darwin(v54);
  v544 = (uint64_t)&v513 - v55;
  __chkstk_darwin(v56);
  v532 = (uint64_t)&v513 - v57;
  __chkstk_darwin(v58);
  v545 = (uint64_t)&v513 - v59;
  __chkstk_darwin(v60);
  v535 = (uint64_t)&v513 - v61;
  __chkstk_darwin(v62);
  v547 = (uint64_t)&v513 - v63;
  __chkstk_darwin(v64);
  v536 = (uint64_t)&v513 - v65;
  __chkstk_darwin(v66);
  v548 = (uint64_t)&v513 - v67;
  __chkstk_darwin(v68);
  v70 = (char *)&v513 - v69;
  __chkstk_darwin(v71);
  v73 = (char *)&v513 - v72;
  __chkstk_darwin(v74);
  v87 = (char *)&v513 - v86;
  if (!a1)
  {
    v101 = 0;
    return (id)(v101 & 1);
  }
  v537 = v43;
  v519 = v20;
  v529 = v26;
  v518 = v82;
  v534 = v81;
  v513 = v80;
  v517 = v79;
  v531 = v78;
  v516 = v77;
  v528 = v76;
  v515 = v85;
  v546 = v75;
  v527 = v84;
  v514 = v83;
  v88 = a1;
  v89 = objc_msgSend(v88, "listeningServices");
  v90 = v89;
  v549 = v88;
  v539 = v10;
  if (!v89)
  {
    v97 = v6;
    v102 = v1;
    goto LABEL_36;
  }
  v520 = v1;
  v91 = static String._unconditionallyBridgeFromObjectiveC(_:)(v89);
  v93 = v92;

  v94 = objc_msgSend(v88, "productID");
  if (!v94)
    goto LABEL_17;
  v95 = v94;
  v96 = v91;
  v97 = v6;
  v98 = static String._unconditionallyBridgeFromObjectiveC(_:)(v94);
  v100 = v99;

  if (v98 == 876163384 && v100 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease(0xE400000000000000);
    v91 = v96;
  }
  else
  {
    v103 = _stringCompareWithSmolCheck(_:_:expecting:)(v98, v100, 876163384, 0xE400000000000000, 0);
    swift_bridgeObjectRelease(v100);
    v91 = v96;
    if ((v103 & 1) == 0)
      goto LABEL_17;
  }
  v104 = objc_msgSend(v549, "productID");
  if (!v104)
  {
LABEL_17:
    v97 = v6;
    v111 = v546;
    v112 = v520;
    v113 = (uint64_t *)(v520 + v546[19]);
    v114 = *v113;
    v115 = v113[1];
    swift_bridgeObjectRetain(v115);
    v116 = sub_100123110(v114, v115);
    LOBYTE(v115) = v117;
    v118 = sub_100123110(v91, v93);
    if ((v115 & 1) != 0)
      v120 = 0;
    else
      v120 = v116;
    if ((v119 & 1) != 0)
      v121 = 0;
    else
      v121 = v118;
    v122 = (unsigned __int16)(v121 ^ v120) & 0xFF8C;
    LODWORD(v90) = v122 != 0;
    v123 = objc_msgSend(v549, "listeningServicesV2");
    if (!v123)
    {
      v102 = v112;
      goto LABEL_35;
    }
    v124 = v123;
    v125 = static String._unconditionallyBridgeFromObjectiveC(_:)(v123);
    v127 = v126;

    v128 = sub_100123110(v125, v127);
    if ((v129 & 1) != 0)
      v90 = 0;
    else
      v90 = (void *)v128;
    v130 = v111[20];
    v102 = v112;
    v131 = (uint64_t *)(v112 + v130);
    v132 = *v131;
    v133 = v131[1];
    swift_bridgeObjectRetain(v133);
    v134 = sub_100123110(v132, v133);
    if ((v135 & 1) != 0)
    {
      if (!v122)
      {
        v134 = 0;
LABEL_34:
        LODWORD(v90) = v90 != (void *)v134;
        goto LABEL_35;
      }
    }
    else if (!v122)
    {
      goto LABEL_34;
    }
    LODWORD(v90) = 1;
    goto LABEL_35;
  }
  v105 = v104;
  v106 = static String._unconditionallyBridgeFromObjectiveC(_:)(v104);
  v108 = v107;

  if (v106 != 925905464 || v108 != 0xE400000000000000)
  {
    v110 = _stringCompareWithSmolCheck(_:_:expecting:)(v106, v108, 925905464, 0xE400000000000000, 0);
    swift_bridgeObjectRelease(v108);
    v91 = v96;
    if ((v110 & 1) != 0)
    {
      v109 = v93;
      goto LABEL_16;
    }
    goto LABEL_17;
  }
  swift_bridgeObjectRelease(v93);
  v109 = 0xE400000000000000;
LABEL_16:
  swift_bridgeObjectRelease(v109);
  LODWORD(v90) = 0;
  v102 = v520;
LABEL_35:
  v10 = v539;
LABEL_36:
  v136 = objc_msgSend(v549, "productID");
  if (!v136)
  {
    sub_1000D2864(v102, (uint64_t)v87);
    goto LABEL_43;
  }
  v137 = v136;
  static String._unconditionallyBridgeFromObjectiveC(_:)(v136);
  v139 = v138;

  swift_bridgeObjectRelease(v139);
  sub_1000D2864(v102, (uint64_t)v87);
  if (!v139)
  {
LABEL_43:
    LODWORD(v520) = (_DWORD)v90;
    sub_1000D28A8((uint64_t)v87);
    v150 = v102;
    v149 = v97;
    goto LABEL_44;
  }
  v140 = objc_msgSend(v549, "productID");
  if (!v140)
  {
    sub_1000D28A8((uint64_t)v87);
    v150 = v102;
    sub_1000D2864(v102, (uint64_t)v73);
    v149 = v97;
    goto LABEL_98;
  }
  v141 = v140;
  LODWORD(v520) = (_DWORD)v90;
  v142 = v10;
  v143 = static String._unconditionallyBridgeFromObjectiveC(_:)(v140);
  v145 = v144;

  v146 = &v87[v546[13]];
  v147 = *((_QWORD *)v146 + 1);
  v148 = v102;
  if (v143 == *(_QWORD *)v146 && v145 == v147)
  {
    sub_1000D28A8((uint64_t)v87);
    swift_bridgeObjectRelease(v145);
    v10 = v142;
    v149 = v97;
    v150 = v148;
LABEL_44:
    sub_1000D2864(v150, (uint64_t)v73);
    goto LABEL_45;
  }
  v262 = _stringCompareWithSmolCheck(_:_:expecting:)(v143, v145, *(_QWORD *)v146, v147, 0);
  sub_1000D28A8((uint64_t)v87);
  swift_bridgeObjectRelease(v145);
  sub_1000D2864(v102, (uint64_t)v73);
  v10 = v142;
  v150 = v102;
  v149 = v97;
  if ((v262 & 1) == 0)
  {
LABEL_98:
    sub_1000D28A8((uint64_t)v73);
LABEL_109:
    v162 = (uint64_t)v537;
    v163 = v548;
    sub_1000D2864(v150, v548);
    v164 = v549;
    goto LABEL_110;
  }
LABEL_45:
  v151 = objc_msgSend(v549, "vendorID");
  if (!v151)
  {
    sub_1000D2864((uint64_t)v73, (uint64_t)v70);
    goto LABEL_52;
  }
  v152 = v151;
  static String._unconditionallyBridgeFromObjectiveC(_:)(v151);
  v154 = v153;

  swift_bridgeObjectRelease(v154);
  sub_1000D2864((uint64_t)v73, (uint64_t)v70);
  if (!v154)
  {
LABEL_52:
    sub_1000D28A8((uint64_t)v70);
    sub_1000D28A8((uint64_t)v73);
    goto LABEL_53;
  }
  v155 = objc_msgSend(v549, "vendorID");
  if (!v155)
  {
    v275 = *(_QWORD *)&v70[v546[14] + 8];
    swift_bridgeObjectRetain(v275);
    sub_1000D28A8((uint64_t)v70);
    sub_1000D28A8((uint64_t)v73);
    swift_bridgeObjectRelease(v275);
    goto LABEL_109;
  }
  v156 = v155;
  v157 = static String._unconditionallyBridgeFromObjectiveC(_:)(v155);
  v159 = v158;

  v160 = &v70[v546[14]];
  v161 = *((_QWORD *)v160 + 1);
  v162 = (uint64_t)v537;
  if (v157 == *(_QWORD *)v160 && v159 == v161)
  {
    swift_bridgeObjectRetain(v159);
    sub_1000D28A8((uint64_t)v70);
    sub_1000D28A8((uint64_t)v73);
    swift_bridgeObjectRelease_n(v159, 2);
LABEL_53:
    v163 = v548;
    sub_1000D2864(v150, v548);
    v164 = v549;
    goto LABEL_54;
  }
  v284 = _stringCompareWithSmolCheck(_:_:expecting:)(v157, v159, *(_QWORD *)v160, v161, 0);
  swift_bridgeObjectRetain(v159);
  sub_1000D28A8((uint64_t)v70);
  sub_1000D28A8((uint64_t)v73);
  swift_bridgeObjectRelease_n(v159, 2);
  v163 = v548;
  sub_1000D2864(v150, v548);
  v164 = v549;
  if ((v284 & 1) == 0)
  {
LABEL_110:
    sub_1000D28A8(v163);
    v184 = (uint64_t)v541;
    v185 = v545;
    v186 = v547;
LABEL_111:
    sub_1000D2864(v150, v186);
    v183 = v186;
LABEL_112:
    sub_1000D28A8(v183);
LABEL_113:
    sub_1000D2864(v150, v185);
LABEL_114:
    sub_1000D28A8(v185);
    v226 = v544;
LABEL_115:
    sub_1000D2864(v150, v226);
    v225 = v226;
LABEL_116:
    sub_1000D28A8(v225);
    v245 = v543;
LABEL_117:
    v244 = (uint64_t)v538;
    sub_1000D2864(v150, v245);
    v243 = v245;
LABEL_118:
    sub_1000D28A8(v243);
LABEL_119:
    sub_1000D2864(v150, v184);
LABEL_120:
    sub_1000D28A8(v184);
LABEL_121:
    sub_1000D2864(v150, v162);
LABEL_122:
    sub_1000D28A8(v162);
LABEL_123:
    sub_1000D2864(v150, v244);
LABEL_124:
    sub_1000D28A8(v244);
LABEL_125:
    v276 = v542;
    sub_1000D2864(v150, v542);
LABEL_126:
    sub_1000D28A8(v276);
LABEL_127:
    v277 = v540;
    sub_1000D2864(v150, v540);
LABEL_128:
    sub_1000D28A8(v277);
LABEL_129:
    v278 = (uint64_t)v529;
    sub_1000D2864(v150, (uint64_t)v529);
LABEL_130:
    sub_1000D28A8(v278);
LABEL_131:
    v279 = v534;
    sub_1000D2864(v150, v534);
LABEL_132:
    sub_1000D28A8(v279);
LABEL_133:
    v280 = v531;
    sub_1000D2864(v150, v531);
LABEL_134:
    sub_1000D28A8(v280);
LABEL_135:
    v281 = v528;
    sub_1000D2864(v150, v528);
LABEL_136:
    sub_1000D28A8(v281);
LABEL_137:
    v282 = v527;
    sub_1000D2864(v150, v527);
LABEL_138:
    sub_1000D28A8(v282);
LABEL_139:
    sub_1000D2864(v150, (uint64_t)v10);
LABEL_140:
    sub_1000D28A8((uint64_t)v10);
LABEL_141:
    sub_1000D2864(v150, (uint64_t)v149);
LABEL_142:
    sub_1000D28A8((uint64_t)v149);

    v101 = 1;
    return (id)(v101 & 1);
  }
LABEL_54:
  v165 = v149;
  v166 = objc_msgSend(v164, "masterKey");
  if (!v166)
  {
    v171 = v536;
    sub_1000D2864(v163, v536);
    goto LABEL_61;
  }
  v167 = v166;
  v168 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  v170 = v169;

  sub_1000A103C(v168, v170);
  v171 = v536;
  sub_1000D2864(v548, v536);
  v172 = v170 >> 60;
  v163 = v548;
  if (v172 > 0xE)
  {
LABEL_61:
    sub_1000D28A8(v171);
    sub_1000D28A8(v163);
    v186 = v547;
    goto LABEL_62;
  }
  v173 = objc_msgSend(v164, "masterKey");
  if (!v173)
  {
    v175 = 0;
    v309 = (uint64_t *)(v171 + v546[7]);
    v179 = *v309;
    v180 = v309[1];
    v177 = 0xF000000000000000;
    v162 = (uint64_t)v537;
LABEL_165:
    v184 = (uint64_t)v541;
    v186 = v547;
    sub_1000A0E74(v179, v180);
    sub_1000D28A8(v171);
    sub_1000D28A8(v548);
    sub_1000B2D78(v175, v177);
    if (v180 >> 60 != 15)
    {
      sub_1000B2D78(v179, v180);
      v164 = v549;
      v185 = v545;
      v149 = v165;
      v10 = v539;
      goto LABEL_111;
    }
LABEL_62:
    sub_1000D2864(v150, v186);
    v164 = v549;
    v149 = v165;
    v10 = v539;
    goto LABEL_63;
  }
  v174 = v173;
  v175 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  v177 = v176;

  v178 = (uint64_t *)(v171 + v546[7]);
  v179 = *v178;
  v180 = v178[1];
  v162 = (uint64_t)v537;
  if (v177 >> 60 == 15)
    goto LABEL_165;
  sub_1000A0E74(v179, v180);
  sub_1000B2D8C(v175, v177);
  sub_1000D25EC(v175, v177);
  v182 = v181;
  sub_1000A103C(v179, v180);
  sub_1000D28A8(v171);
  sub_1000D28A8(v548);
  sub_1000B2D78(v175, v177);
  sub_1000B2D78(v175, v177);
  v183 = v547;
  sub_1000D2864(v150, v547);
  v164 = v549;
  v184 = (uint64_t)v541;
  v185 = v545;
  v149 = v165;
  v10 = v539;
  if ((v182 & 1) == 0)
    goto LABEL_112;
LABEL_63:
  v187 = v10;
  v188 = v149;
  v189 = objc_msgSend(v164, "masterHint");
  if (!v189)
  {
    v194 = v547;
    v195 = v535;
    sub_1000D2864(v547, v535);
    goto LABEL_70;
  }
  v190 = v189;
  v191 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  v193 = v192;

  sub_1000A103C(v191, v193);
  v194 = v547;
  v195 = v535;
  sub_1000D2864(v547, v535);
  if (v193 >> 60 == 15)
  {
LABEL_70:
    sub_1000D28A8(v195);
    sub_1000D28A8(v194);
LABEL_71:
    sub_1000D2864(v150, v545);
    v149 = v188;
    goto LABEL_72;
  }
  v196 = objc_msgSend(v164, "masterHint");
  if (!v196)
  {
    v198 = 0;
    v310 = (uint64_t *)(v195 + v546[8]);
    v202 = *v310;
    v203 = v310[1];
    v200 = 0xF000000000000000;
LABEL_168:
    v311 = v547;
    sub_1000A0E74(v202, v203);
    sub_1000D28A8(v195);
    sub_1000D28A8(v311);
    sub_1000B2D78(v198, v200);
    if (v203 >> 60 != 15)
    {
      sub_1000B2D78(v202, v203);
      v184 = (uint64_t)v541;
      v185 = v545;
      v149 = v188;
      v10 = v187;
      v162 = (uint64_t)v537;
      goto LABEL_113;
    }
    goto LABEL_71;
  }
  v197 = v196;
  v198 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  v200 = v199;

  v201 = (uint64_t *)(v195 + v546[8]);
  v202 = *v201;
  v203 = v201[1];
  if (v200 >> 60 == 15)
    goto LABEL_168;
  sub_1000A0E74(v202, v203);
  sub_1000B2D8C(v198, v200);
  sub_1000D25EC(v198, v200);
  v205 = v204;
  sub_1000A103C(v202, v203);
  sub_1000D28A8(v195);
  sub_1000D28A8(v547);
  sub_1000B2D78(v198, v200);
  sub_1000B2D78(v198, v200);
  v185 = v545;
  sub_1000D2864(v150, v545);
  v184 = (uint64_t)v541;
  v149 = v188;
  v10 = v187;
  v162 = (uint64_t)v537;
  if ((v205 & 1) == 0)
    goto LABEL_114;
LABEL_72:
  v206 = v149;
  v207 = objc_msgSend(v164, "accessoryKey");
  if (!v207)
  {
    v212 = v545;
    v213 = v532;
    sub_1000D2864(v545, v532);
    v214 = (uint64_t)v533;
    goto LABEL_79;
  }
  v208 = v207;
  v209 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  v211 = v210;

  sub_1000A103C(v209, v211);
  v212 = v545;
  v213 = v532;
  sub_1000D2864(v545, v532);
  v214 = (uint64_t)v533;
  if (v211 >> 60 == 15)
  {
LABEL_79:
    sub_1000D28A8(v213);
    sub_1000D28A8(v212);
    v226 = v544;
LABEL_80:
    sub_1000D2864(v150, v226);
    v149 = v206;
    v10 = v539;
    goto LABEL_81;
  }
  v215 = objc_msgSend(v164, "accessoryKey");
  if (!v215)
  {
    v217 = 0;
    v329 = (uint64_t *)(v213 + v546[9]);
    v221 = *v329;
    v222 = v329[1];
    v219 = 0xF000000000000000;
LABEL_180:
    v226 = v544;
    sub_1000A0E74(v221, v222);
    sub_1000D28A8(v213);
    sub_1000D28A8(v545);
    sub_1000B2D78(v217, v219);
    if (v222 >> 60 != 15)
    {
      sub_1000B2D78(v221, v222);
      v162 = (uint64_t)v537;
      v184 = (uint64_t)v541;
      v149 = v206;
      v10 = v539;
      goto LABEL_115;
    }
    goto LABEL_80;
  }
  v216 = v215;
  v217 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  v219 = v218;

  v220 = (uint64_t *)(v213 + v546[9]);
  v221 = *v220;
  v222 = v220[1];
  if (v219 >> 60 == 15)
    goto LABEL_180;
  sub_1000A0E74(v221, v222);
  sub_1000B2D8C(v217, v219);
  sub_1000D25EC(v217, v219);
  v224 = v223;
  sub_1000A103C(v221, v222);
  sub_1000D28A8(v213);
  sub_1000D28A8(v545);
  sub_1000B2D78(v217, v219);
  sub_1000B2D78(v217, v219);
  v225 = v544;
  sub_1000D2864(v150, v544);
  v162 = (uint64_t)v537;
  v184 = (uint64_t)v541;
  v149 = v206;
  v10 = v539;
  if ((v224 & 1) == 0)
    goto LABEL_116;
LABEL_81:
  v227 = objc_msgSend(v164, "accessoryHint");
  if (!v227)
  {
    v232 = v544;
    sub_1000D2864(v544, v214);
    goto LABEL_89;
  }
  v228 = v227;
  v229 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  v231 = v230;

  sub_1000A103C(v229, v231);
  v232 = v544;
  sub_1000D2864(v544, v214);
  if (v231 >> 60 == 15)
  {
LABEL_89:
    sub_1000D28A8(v214);
    sub_1000D28A8(v232);
    v245 = v543;
LABEL_90:
    sub_1000D2864(v150, v245);
    v162 = (uint64_t)v537;
    v184 = (uint64_t)v541;
    goto LABEL_91;
  }
  v233 = objc_msgSend(v164, "accessoryHint");
  if (!v233)
  {
    v235 = 0;
    v350 = (uint64_t *)(v214 + v546[10]);
    v239 = *v350;
    v240 = v350[1];
    v237 = 0xF000000000000000;
LABEL_193:
    v245 = v543;
    sub_1000A0E74(v239, v240);
    sub_1000D28A8(v214);
    sub_1000D28A8(v544);
    sub_1000B2D78(v235, v237);
    if (v240 >> 60 != 15)
    {
      sub_1000B2D78(v239, v240);
      v162 = (uint64_t)v537;
      v184 = (uint64_t)v541;
      goto LABEL_117;
    }
    goto LABEL_90;
  }
  v234 = v233;
  v235 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  v237 = v236;

  v238 = (uint64_t *)(v214 + v546[10]);
  v239 = *v238;
  v240 = v238[1];
  if (v237 >> 60 == 15)
    goto LABEL_193;
  sub_1000A0E74(v239, v240);
  sub_1000B2D8C(v235, v237);
  sub_1000D25EC(v235, v237);
  v242 = v241;
  sub_1000A103C(v239, v240);
  sub_1000D28A8(v214);
  sub_1000D28A8(v544);
  sub_1000B2D78(v235, v237);
  sub_1000B2D78(v235, v237);
  v243 = v543;
  sub_1000D2864(v150, v543);
  v162 = (uint64_t)v537;
  v244 = (uint64_t)v538;
  v184 = (uint64_t)v541;
  if ((v242 & 1) == 0)
    goto LABEL_118;
LABEL_91:
  v246 = v10;
  v247 = v149;
  v248 = objc_msgSend(v164, "buttonModes");
  if (!v248)
  {
    v252 = v543;
    v253 = v530;
    sub_1000D2864(v543, v530);
    goto LABEL_100;
  }
  v249 = v248;
  static String._unconditionallyBridgeFromObjectiveC(_:)(v248);
  v251 = v250;

  swift_bridgeObjectRelease(v251);
  v252 = v543;
  v253 = v530;
  sub_1000D2864(v543, v530);
  if (!v251)
  {
LABEL_100:
    sub_1000D28A8(v253);
    sub_1000D28A8(v252);
    v149 = v247;
    goto LABEL_101;
  }
  v254 = objc_msgSend(v164, "buttonModes");
  if (!v254)
  {
    v348 = v530;
    v349 = *(_QWORD *)(v530 + v546[15] + 8);
    swift_bridgeObjectRetain(v349);
    sub_1000D28A8(v348);
    sub_1000D28A8(v543);
    swift_bridgeObjectRelease(v349);
    v149 = v247;
    v10 = v246;
    v244 = (uint64_t)v538;
    goto LABEL_119;
  }
  v255 = v254;
  v256 = static String._unconditionallyBridgeFromObjectiveC(_:)(v254);
  v258 = v257;

  v259 = v530;
  v260 = (_QWORD *)(v530 + v546[15]);
  v261 = v260[1];
  v149 = v247;
  if (v256 == *v260 && v258 == v261)
  {
    swift_bridgeObjectRetain(v258);
    sub_1000D28A8(v259);
    sub_1000D28A8(v543);
    swift_bridgeObjectRelease_n(v258, 2);
LABEL_101:
    v10 = v246;
    sub_1000D2864(v150, v184);
    v244 = (uint64_t)v538;
    goto LABEL_102;
  }
  v353 = _stringCompareWithSmolCheck(_:_:expecting:)(v256, v258, *v260, v261, 0);
  v354 = v259;
  v355 = v353;
  swift_bridgeObjectRetain(v258);
  sub_1000D28A8(v354);
  sub_1000D28A8(v543);
  swift_bridgeObjectRelease_n(v258, 2);
  sub_1000D2864(v150, v184);
  v10 = v246;
  v244 = (uint64_t)v538;
  if ((v355 & 1) == 0)
    goto LABEL_120;
LABEL_102:
  v263 = objc_msgSend(v164, "color");
  if (!v263)
  {
    v267 = v526;
    sub_1000D2864(v184, v526);
    goto LABEL_147;
  }
  v264 = v263;
  static String._unconditionallyBridgeFromObjectiveC(_:)(v263);
  v266 = v265;

  swift_bridgeObjectRelease(v266);
  v267 = v526;
  sub_1000D2864(v184, v526);
  if (!v266)
  {
LABEL_147:
    sub_1000D28A8(v267);
    sub_1000D28A8(v184);
    goto LABEL_148;
  }
  v268 = objc_msgSend(v164, "color");
  if (!v268)
  {
    v356 = v267;
    v357 = *(_QWORD *)(v267 + v546[16] + 8);
    swift_bridgeObjectRetain(v357);
    sub_1000D28A8(v356);
    sub_1000D28A8(v184);
    swift_bridgeObjectRelease(v357);
    goto LABEL_121;
  }
  v269 = v268;
  v549 = v149;
  v270 = static String._unconditionallyBridgeFromObjectiveC(_:)(v268);
  v272 = v271;

  v273 = (_QWORD *)(v267 + v546[16]);
  v274 = v273[1];
  if (v270 == *v273 && v272 == v274)
  {
    swift_bridgeObjectRetain(v272);
    sub_1000D28A8(v526);
    sub_1000D28A8(v184);
    swift_bridgeObjectRelease_n(v272, 2);
    v149 = v549;
LABEL_148:
    sub_1000D2864(v150, v162);
    goto LABEL_149;
  }
  v358 = _stringCompareWithSmolCheck(_:_:expecting:)(v270, v272, *v273, v274, 0);
  swift_bridgeObjectRetain(v272);
  sub_1000D28A8(v526);
  sub_1000D28A8(v184);
  swift_bridgeObjectRelease_n(v272, 2);
  sub_1000D2864(v150, v162);
  v149 = v549;
  if ((v358 & 1) == 0)
    goto LABEL_122;
LABEL_149:
  v285 = objc_msgSend(v164, "deviceIDFeatureBitsV1");
  if (!v285)
  {
    v289 = v525;
    sub_1000D2864(v162, v525);
    goto LABEL_156;
  }
  v286 = v285;
  static String._unconditionallyBridgeFromObjectiveC(_:)(v285);
  v288 = v287;

  swift_bridgeObjectRelease(v288);
  v289 = v525;
  sub_1000D2864(v162, v525);
  if (!v288)
  {
LABEL_156:
    sub_1000D28A8(v289);
    sub_1000D28A8(v162);
    goto LABEL_157;
  }
  v290 = objc_msgSend(v164, "deviceIDFeatureBitsV1");
  if (!v290)
  {
    v359 = v289;
    v360 = *(_QWORD *)(v289 + v546[17] + 8);
    swift_bridgeObjectRetain(v360);
    sub_1000D28A8(v359);
    sub_1000D28A8(v162);
    swift_bridgeObjectRelease(v360);
    goto LABEL_123;
  }
  v291 = v290;
  v292 = static String._unconditionallyBridgeFromObjectiveC(_:)(v290);
  v294 = v293;

  v295 = (_QWORD *)(v289 + v546[17]);
  v296 = v295[1];
  if (v292 == *v295 && v294 == v296)
  {
    swift_bridgeObjectRetain(v294);
    sub_1000D28A8(v525);
    sub_1000D28A8(v162);
    swift_bridgeObjectRelease_n(v294, 2);
LABEL_157:
    sub_1000D2864(v150, v244);
    v297 = (uint64_t)v524;
    goto LABEL_158;
  }
  v361 = _stringCompareWithSmolCheck(_:_:expecting:)(v292, v294, *v295, v296, 0);
  swift_bridgeObjectRetain(v294);
  sub_1000D28A8(v525);
  sub_1000D28A8(v162);
  swift_bridgeObjectRelease_n(v294, 2);
  sub_1000D2864(v150, v244);
  v297 = (uint64_t)v524;
  if ((v361 & 1) == 0)
    goto LABEL_124;
LABEL_158:
  v298 = objc_msgSend(v164, "deviceIDFeatureBitsV2");
  if (!v298)
  {
    sub_1000D2864(v244, v297);
    goto LABEL_171;
  }
  v299 = v298;
  static String._unconditionallyBridgeFromObjectiveC(_:)(v298);
  v301 = v300;

  swift_bridgeObjectRelease(v301);
  sub_1000D2864(v244, v297);
  if (!v301)
  {
LABEL_171:
    sub_1000D28A8(v297);
    sub_1000D28A8(v244);
    goto LABEL_172;
  }
  v302 = objc_msgSend(v164, "deviceIDFeatureBitsV2");
  if (!v302)
  {
    v362 = *(_QWORD *)(v297 + v546[18] + 8);
    swift_bridgeObjectRetain(v362);
    sub_1000D28A8(v297);
    sub_1000D28A8(v244);
    swift_bridgeObjectRelease(v362);
    goto LABEL_125;
  }
  v303 = v302;
  v304 = static String._unconditionallyBridgeFromObjectiveC(_:)(v302);
  v306 = v305;

  v307 = (_QWORD *)(v297 + v546[18]);
  v308 = v307[1];
  if (v304 == *v307 && v306 == v308)
  {
    swift_bridgeObjectRetain(v306);
    sub_1000D28A8(v297);
    sub_1000D28A8(v244);
    swift_bridgeObjectRelease_n(v306, 2);
LABEL_172:
    sub_1000D2864(v150, v542);
    v312 = (uint64_t)v522;
    goto LABEL_173;
  }
  v363 = _stringCompareWithSmolCheck(_:_:expecting:)(v304, v306, *v307, v308, 0);
  swift_bridgeObjectRetain(v306);
  sub_1000D28A8(v297);
  sub_1000D28A8(v244);
  swift_bridgeObjectRelease_n(v306, 2);
  v276 = v542;
  sub_1000D2864(v150, v542);
  v312 = (uint64_t)v522;
  if ((v363 & 1) == 0)
    goto LABEL_126;
LABEL_173:
  v313 = objc_msgSend(v164, "encryptionKey");
  if (!v313)
  {
    v318 = v542;
    sub_1000D2864(v542, v312);
    goto LABEL_183;
  }
  v314 = v313;
  v315 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  v317 = v316;

  sub_1000A103C(v315, v317);
  v318 = v542;
  sub_1000D2864(v542, v312);
  if (v317 >> 60 == 15)
  {
LABEL_183:
    sub_1000D28A8(v312);
    sub_1000D28A8(v318);
LABEL_184:
    sub_1000D2864(v150, v540);
    goto LABEL_185;
  }
  v319 = objc_msgSend(v164, "encryptionKey");
  if (!v319)
  {
    v321 = 0;
    v364 = (uint64_t *)(v312 + v546[12]);
    v325 = *v364;
    v326 = v364[1];
    v323 = 0xF000000000000000;
LABEL_213:
    v365 = v542;
    sub_1000A0E74(v325, v326);
    sub_1000D28A8(v312);
    sub_1000D28A8(v365);
    sub_1000B2D78(v321, v323);
    if (v326 >> 60 != 15)
    {
      sub_1000B2D78(v325, v326);
      goto LABEL_127;
    }
    goto LABEL_184;
  }
  v320 = v319;
  v321 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  v323 = v322;

  v324 = (uint64_t *)(v312 + v546[12]);
  v325 = *v324;
  v326 = v324[1];
  if (v323 >> 60 == 15)
    goto LABEL_213;
  sub_1000A0E74(v325, v326);
  sub_1000B2D8C(v321, v323);
  sub_1000D25EC(v321, v323);
  v328 = v327;
  sub_1000A103C(v325, v326);
  sub_1000D28A8(v312);
  sub_1000D28A8(v542);
  sub_1000B2D78(v321, v323);
  sub_1000B2D78(v321, v323);
  v277 = v540;
  sub_1000D2864(v150, v540);
  if ((v328 & 1) == 0)
    goto LABEL_128;
LABEL_185:
  v330 = objc_msgSend(v164, "irk");
  if (!v330)
  {
    v335 = v540;
    v336 = v523;
    sub_1000D2864(v540, v523);
    goto LABEL_196;
  }
  v331 = v330;
  v332 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  v334 = v333;

  sub_1000A103C(v332, v334);
  v335 = v540;
  v336 = v523;
  sub_1000D2864(v540, v523);
  if (v334 >> 60 == 15)
  {
LABEL_196:
    sub_1000D28A8(v336);
    sub_1000D28A8(v335);
    goto LABEL_197;
  }
  v337 = objc_msgSend(v164, "irk");
  if (!v337)
  {
    v339 = 0;
    v342 = v523;
    v407 = (uint64_t *)(v523 + v546[11]);
    v344 = *v407;
    v345 = v407[1];
    v341 = 0xF000000000000000;
LABEL_241:
    sub_1000A0E74(v344, v345);
    sub_1000D28A8(v342);
    sub_1000D28A8(v540);
    sub_1000B2D78(v339, v341);
    if (v345 >> 60 != 15)
    {
      sub_1000B2D78(v344, v345);
      goto LABEL_129;
    }
    goto LABEL_197;
  }
  v338 = v337;
  v339 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  v341 = v340;

  v342 = v523;
  v343 = (uint64_t *)(v523 + v546[11]);
  v344 = *v343;
  v345 = v343[1];
  if (v341 >> 60 == 15)
    goto LABEL_241;
  sub_1000A0E74(v344, v345);
  sub_1000B2D8C(v339, v341);
  sub_1000D25EC(v339, v341);
  v347 = v346;
  sub_1000A103C(v344, v345);
  sub_1000D28A8(v342);
  sub_1000D28A8(v540);
  sub_1000B2D78(v339, v341);
  sub_1000B2D78(v339, v341);
  if ((v347 & 1) == 0)
    goto LABEL_129;
LABEL_197:
  v351 = objc_msgSend(v164, "listeningServices");
  if (v351 || (v351 = objc_msgSend(v164, "listeningServicesV2")) != 0)
  {

    v278 = (uint64_t)v529;
    sub_1000D2864(v150, (uint64_t)v529);
    v352 = v546;
    if ((v520 & 1) != 0)
      goto LABEL_130;
  }
  else
  {
    v278 = (uint64_t)v529;
    sub_1000D2864(v150, (uint64_t)v529);
    v352 = v546;
  }
  v366 = objc_msgSend(v164, "spatialAudio");
  if (!v366)
  {
    v370 = v521;
    sub_1000D2864(v278, v521);
    goto LABEL_223;
  }
  v367 = v366;
  static String._unconditionallyBridgeFromObjectiveC(_:)(v366);
  v369 = v368;

  swift_bridgeObjectRelease(v369);
  v370 = v521;
  sub_1000D2864(v278, v521);
  if (!v369)
  {
LABEL_223:
    sub_1000D28A8(v370);
    sub_1000D28A8(v278);
    goto LABEL_224;
  }
  v371 = objc_msgSend(v164, "spatialAudio");
  if (!v371)
  {
    v444 = v370;
    v445 = *(_QWORD *)(v370 + v352[21] + 8);
    swift_bridgeObjectRetain(v445);
    sub_1000D28A8(v444);
    sub_1000D28A8((uint64_t)v529);
    swift_bridgeObjectRelease(v445);
    goto LABEL_131;
  }
  v372 = v371;
  v373 = static String._unconditionallyBridgeFromObjectiveC(_:)(v371);
  v374 = v370;
  v376 = v375;

  v377 = (_QWORD *)(v374 + v352[21]);
  v378 = v377[1];
  if (v373 == *v377 && v376 == v378)
  {
    swift_bridgeObjectRetain(v376);
    sub_1000D28A8(v521);
    sub_1000D28A8((uint64_t)v529);
    swift_bridgeObjectRelease_n(v376, 2);
LABEL_224:
    sub_1000D2864(v150, v534);
    goto LABEL_225;
  }
  v446 = _stringCompareWithSmolCheck(_:_:expecting:)(v373, v376, *v377, v378, 0);
  swift_bridgeObjectRetain(v376);
  sub_1000D28A8(v521);
  sub_1000D28A8((uint64_t)v529);
  swift_bridgeObjectRelease_n(v376, 2);
  v279 = v534;
  sub_1000D2864(v150, v534);
  if ((v446 & 1) == 0)
    goto LABEL_132;
LABEL_225:
  v379 = objc_msgSend(v164, "optimizedBatteryCharging");
  if (!v379)
  {
    v383 = v534;
    v384 = (uint64_t)v519;
    sub_1000D2864(v534, (uint64_t)v519);
    goto LABEL_232;
  }
  v380 = v379;
  static String._unconditionallyBridgeFromObjectiveC(_:)(v379);
  v382 = v381;

  swift_bridgeObjectRelease(v382);
  v383 = v534;
  v384 = (uint64_t)v519;
  sub_1000D2864(v534, (uint64_t)v519);
  if (!v382)
  {
LABEL_232:
    sub_1000D28A8(v384);
    sub_1000D28A8(v383);
    goto LABEL_233;
  }
  v385 = objc_msgSend(v164, "optimizedBatteryCharging");
  if (!v385)
  {
    v447 = (uint64_t)v519;
    v448 = *(_QWORD *)&v519[v352[22] + 8];
    swift_bridgeObjectRetain(v448);
    sub_1000D28A8(v447);
    sub_1000D28A8(v534);
    swift_bridgeObjectRelease(v448);
    goto LABEL_133;
  }
  v386 = v385;
  v387 = static String._unconditionallyBridgeFromObjectiveC(_:)(v385);
  v389 = v388;

  v390 = &v519[v352[22]];
  v391 = *((_QWORD *)v390 + 1);
  if (v387 == *(_QWORD *)v390 && v389 == v391)
  {
    swift_bridgeObjectRetain(v389);
    sub_1000D28A8((uint64_t)v519);
    sub_1000D28A8(v534);
    swift_bridgeObjectRelease_n(v389, 2);
LABEL_233:
    sub_1000D2864(v150, v531);
    goto LABEL_234;
  }
  v502 = _stringCompareWithSmolCheck(_:_:expecting:)(v387, v389, *(_QWORD *)v390, v391, 0);
  swift_bridgeObjectRetain(v389);
  sub_1000D28A8((uint64_t)v519);
  sub_1000D28A8(v534);
  swift_bridgeObjectRelease_n(v389, 2);
  v280 = v531;
  sub_1000D2864(v150, v531);
  if ((v502 & 1) == 0)
    goto LABEL_134;
LABEL_234:
  v392 = objc_msgSend(v164, "optimizedBatteryFullChargeDeadline");
  if (!v392)
  {
    v396 = v531;
    v397 = v518;
    sub_1000D2864(v531, v518);
    goto LABEL_244;
  }
  v393 = v392;
  static String._unconditionallyBridgeFromObjectiveC(_:)(v392);
  v395 = v394;

  swift_bridgeObjectRelease(v395);
  v396 = v531;
  v397 = v518;
  sub_1000D2864(v531, v518);
  if (!v395)
  {
LABEL_244:
    sub_1000D28A8(v397);
    sub_1000D28A8(v396);
    goto LABEL_245;
  }
  v398 = objc_msgSend(v164, "optimizedBatteryFullChargeDeadline");
  if (!v398)
  {
    v503 = v518;
    v504 = *(_QWORD *)(v518 + v352[23] + 8);
    swift_bridgeObjectRetain(v504);
    sub_1000D28A8(v503);
    sub_1000D28A8(v531);
    swift_bridgeObjectRelease(v504);
    goto LABEL_135;
  }
  v399 = v398;
  v400 = static String._unconditionallyBridgeFromObjectiveC(_:)(v398);
  v402 = v401;

  v403 = v352[23];
  v404 = v518;
  v405 = (_QWORD *)(v518 + v403);
  v406 = v405[1];
  if (v400 == *v405 && v402 == v406)
  {
    swift_bridgeObjectRetain(v402);
    sub_1000D28A8(v404);
    sub_1000D28A8(v531);
    swift_bridgeObjectRelease_n(v402, 2);
LABEL_245:
    v281 = v528;
    sub_1000D2864(v150, v528);
    goto LABEL_246;
  }
  v505 = _stringCompareWithSmolCheck(_:_:expecting:)(v400, v402, *v405, v406, 0);
  swift_bridgeObjectRetain(v402);
  sub_1000D28A8(v404);
  sub_1000D28A8(v531);
  swift_bridgeObjectRelease_n(v402, 2);
  v281 = v528;
  sub_1000D2864(v150, v528);
  if ((v505 & 1) == 0)
    goto LABEL_136;
LABEL_246:
  v408 = objc_msgSend(v164, "ratchet");
  if (!v408)
  {
    v412 = v517;
    sub_1000D2864(v281, v517);
    v413 = v281;
    v282 = v527;
    goto LABEL_261;
  }
  v409 = v408;
  static String._unconditionallyBridgeFromObjectiveC(_:)(v408);
  v411 = v410;

  swift_bridgeObjectRelease(v411);
  v412 = v517;
  sub_1000D2864(v281, v517);
  v413 = v281;
  v282 = v527;
  if (!v411)
  {
LABEL_261:
    sub_1000D28A8(v412);
    v443 = v413;
LABEL_267:
    sub_1000D28A8(v443);
LABEL_268:
    sub_1000D2864(v150, v282);
    goto LABEL_269;
  }
  result = objc_msgSend(v164, "ratchet");
  if (!result)
  {
LABEL_319:
    __break(1u);
    goto LABEL_320;
  }
  v414 = result;
  v415 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);
  v417 = v416;

  v418 = sub_100123110(v415, v417);
  if ((v419 & 1) != 0)
    v420 = 0;
  else
    v420 = v418;
  v421 = v517;
  v422 = (uint64_t *)(v517 + v546[24]);
  v423 = *v422;
  v424 = v422[1];
  swift_bridgeObjectRetain(v424);
  v425 = v424;
  v426 = v421;
  v427 = sub_100123110(v423, v425);
  if ((v428 & 1) != 0)
    v429 = 0;
  else
    v429 = v427;
  v430 = v421;
  v431 = v513;
  sub_1000D2864(v430, v513);
  if (v429 >= v420)
  {
    sub_1000D28A8(v431);
    sub_1000D28A8(v426);
    v443 = v528;
    goto LABEL_267;
  }
  v432 = objc_msgSend(v164, "encryptionKey");
  if (!v432)
  {
    v434 = 0;
    v437 = v513;
    v511 = (uint64_t *)(v513 + v546[12]);
    v439 = *v511;
    v440 = v511[1];
    v436 = 0xF000000000000000;
    goto LABEL_314;
  }
  v433 = v432;
  v434 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  v436 = v435;

  v437 = v513;
  v438 = (uint64_t *)(v513 + v546[12]);
  v439 = *v438;
  v440 = v438[1];
  if (v436 >> 60 == 15)
  {
LABEL_314:
    v512 = v517;
    sub_1000A0E74(v439, v440);
    sub_1000D28A8(v437);
    sub_1000D28A8(v512);
    sub_1000D28A8(v528);
    sub_1000B2D78(v434, v436);
    if (v440 >> 60 == 15)
      goto LABEL_137;
    sub_1000B2D78(v439, v440);
    v282 = v527;
    goto LABEL_268;
  }
  sub_1000A0E74(v439, v440);
  sub_1000B2D8C(v434, v436);
  sub_1000D25EC(v434, v436);
  v442 = v441;
  sub_1000A103C(v439, v440);
  sub_1000B2D78(v434, v436);
  sub_1000D28A8(v437);
  sub_1000D28A8(v517);
  sub_1000D28A8(v528);
  sub_1000B2D78(v434, v436);
  v282 = v527;
  sub_1000D2864(v150, v527);
  if ((v442 & 1) != 0)
    goto LABEL_138;
LABEL_269:
  v449 = objc_msgSend(v164, "settingsMask");
  if (!v449)
  {
    v453 = v516;
    sub_1000D2864(v282, v516);
    goto LABEL_276;
  }
  v450 = v449;
  static String._unconditionallyBridgeFromObjectiveC(_:)(v449);
  v452 = v451;

  swift_bridgeObjectRelease(v452);
  v453 = v516;
  sub_1000D2864(v282, v516);
  if (!v452)
  {
LABEL_276:
    sub_1000D28A8(v453);
    sub_1000D28A8(v282);
    goto LABEL_277;
  }
  v454 = objc_msgSend(v164, "settingsMask");
  if (!v454)
  {
    v506 = v516;
    v507 = *(_QWORD *)(v516 + v546[26] + 8);
    swift_bridgeObjectRetain(v507);
    sub_1000D28A8(v506);
    sub_1000D28A8(v282);
    swift_bridgeObjectRelease(v507);
    goto LABEL_139;
  }
  v455 = v454;
  v456 = static String._unconditionallyBridgeFromObjectiveC(_:)(v454);
  v458 = v457;

  v459 = v516;
  v460 = (_QWORD *)(v516 + v546[26]);
  v461 = v460[1];
  if (v456 == *v460 && v458 == v461)
  {
    swift_bridgeObjectRetain(v458);
    sub_1000D28A8(v459);
    sub_1000D28A8(v282);
    swift_bridgeObjectRelease_n(v458, 2);
LABEL_277:
    sub_1000D2864(v150, (uint64_t)v10);
    goto LABEL_278;
  }
  v508 = _stringCompareWithSmolCheck(_:_:expecting:)(v456, v458, *v460, v461, 0);
  v509 = v459;
  v510 = v508;
  swift_bridgeObjectRetain(v458);
  sub_1000D28A8(v509);
  sub_1000D28A8(v282);
  swift_bridgeObjectRelease_n(v458, 2);
  sub_1000D2864(v150, (uint64_t)v10);
  if ((v510 & 1) == 0)
    goto LABEL_140;
LABEL_278:
  v462 = objc_msgSend(v164, "supportedServices");
  if (!v462)
  {
LABEL_291:
    v474 = v515;
    sub_1000D2864((uint64_t)v10, v515);
LABEL_292:
    sub_1000D28A8(v474);
    sub_1000D28A8((uint64_t)v10);
    sub_1000D2864(v150, (uint64_t)v149);
LABEL_293:
    v489 = objc_msgSend(v164, "version");
    if (v489)
    {
      v490 = v489;
      static String._unconditionallyBridgeFromObjectiveC(_:)(v489);
      v492 = v491;

      swift_bridgeObjectRelease(v492);
      v493 = v514;
      sub_1000D2864((uint64_t)v149, v514);
      if (v492)
      {
        v494 = objc_msgSend(v164, "version");
        if (v494)
        {
          v495 = v494;
          v496 = static String._unconditionallyBridgeFromObjectiveC(_:)(v494);
          v498 = v497;

          v499 = (_QWORD *)(v493 + v546[28]);
          v500 = v499[1];
          if (v496 == *v499 && v498 == v500)
            v501 = 1;
          else
            v501 = _stringCompareWithSmolCheck(_:_:expecting:)(v496, v498, *v499, v500, 0);
          swift_bridgeObjectRetain(v498);

          sub_1000D28A8(v493);
          sub_1000D28A8((uint64_t)v149);
          swift_bridgeObjectRelease(v498);
        }
        else
        {
          v498 = *(_QWORD *)(v493 + v546[28] + 8);
          swift_bridgeObjectRetain(v498);

          sub_1000D28A8(v493);
          sub_1000D28A8((uint64_t)v149);
          v501 = 0;
        }
        swift_bridgeObjectRelease(v498);
        v101 = v501 ^ 1;
        return (id)(v101 & 1);
      }
    }
    else
    {
      v493 = v514;
      sub_1000D2864((uint64_t)v149, v514);
    }

    sub_1000D28A8(v493);
    sub_1000D28A8((uint64_t)v149);
    v101 = 0;
    return (id)(v101 & 1);
  }

  result = objc_msgSend(v164, "supportedServices");
  if (!result)
  {
    __break(1u);
    goto LABEL_319;
  }
  v463 = result;
  v464 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);
  v466 = v465;

  swift_bridgeObjectRelease(v466);
  v467 = HIBYTE(v466) & 0xF;
  if ((v466 & 0x2000000000000000) == 0)
    v467 = v464 & 0xFFFFFFFFFFFFLL;
  if (!v467)
    goto LABEL_291;
  result = objc_msgSend(v164, "supportedServices");
  if (!result)
  {
LABEL_320:
    __break(1u);
    goto LABEL_321;
  }
  v468 = result;
  v469 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);
  v471 = v470;

  v472 = sub_100123110(v469, v471);
  LOBYTE(v469) = v473;
  v474 = v515;
  sub_1000D2864((uint64_t)v10, v515);
  if ((v469 & 1) == 0 && !v472)
    goto LABEL_292;
  result = objc_msgSend(v164, "supportedServices");
  if (result)
  {
    v475 = result;
    v476 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);
    v478 = v477;

    v479 = sub_100123110(v476, v478);
    v481 = v480;
    v482 = v515;
    v483 = (uint64_t *)(v515 + v546[27]);
    v484 = *v483;
    v485 = v483[1];
    swift_bridgeObjectRetain(v485);
    v486 = sub_100123110(v484, v485);
    v488 = v487;
    sub_1000D28A8(v482);
    sub_1000D28A8((uint64_t)v10);
    if ((v481 & 1) != 0)
    {
      sub_1000D2864(v150, (uint64_t)v149);
      if ((v488 & 1) == 0)
        goto LABEL_142;
    }
    else
    {
      if ((v488 & 1) != 0)
        goto LABEL_141;
      sub_1000D2864(v150, (uint64_t)v149);
      if (v479 != v486)
        goto LABEL_142;
    }
    goto LABEL_293;
  }
LABEL_321:
  __break(1u);
  return result;
}

uint64_t sub_1000D1120(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  int *v5;
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;

  v3 = type metadata accessor for UUID(0);
  v4 = sub_1000A0940((unint64_t *)&unk_100210620, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(a1, v3, v4);
  v5 = (int *)type metadata accessor for MagicPairingSettingsRecord(0);
  v6 = (uint64_t *)(v1 + v5[5]);
  v7 = *v6;
  v8 = v6[1];
  sub_1000A0E74(*v6, v8);
  Data.hash(into:)(a1, v7, v8);
  sub_1000A103C(v7, v8);
  v9 = (uint64_t *)(v1 + v5[6]);
  v10 = *v9;
  v11 = v9[1];
  swift_bridgeObjectRetain(v11);
  String.hash(into:)(a1, v10, v11);
  swift_bridgeObjectRelease(v11);
  v12 = (uint64_t *)(v1 + v5[7]);
  v13 = *v12;
  v14 = v12[1];
  sub_1000A0E74(*v12, v14);
  Data.hash(into:)(a1, v13, v14);
  sub_1000A103C(v13, v14);
  v15 = (uint64_t *)(v1 + v5[8]);
  v16 = *v15;
  v17 = v15[1];
  sub_1000A0E74(*v15, v17);
  Data.hash(into:)(a1, v16, v17);
  sub_1000A103C(v16, v17);
  v18 = (uint64_t *)(v1 + v5[9]);
  v19 = *v18;
  v20 = v18[1];
  sub_1000A0E74(*v18, v20);
  Data.hash(into:)(a1, v19, v20);
  sub_1000A103C(v19, v20);
  v21 = (uint64_t *)(v1 + v5[10]);
  v22 = *v21;
  v23 = v21[1];
  sub_1000A0E74(*v21, v23);
  Data.hash(into:)(a1, v22, v23);
  sub_1000A103C(v22, v23);
  v24 = (uint64_t *)(v1 + v5[11]);
  v25 = *v24;
  v26 = v24[1];
  sub_1000A0E74(*v24, v26);
  Data.hash(into:)(a1, v25, v26);
  sub_1000A103C(v25, v26);
  v27 = (uint64_t *)(v1 + v5[12]);
  v28 = *v27;
  v29 = v27[1];
  sub_1000A0E74(*v27, v29);
  Data.hash(into:)(a1, v28, v29);
  sub_1000A103C(v28, v29);
  v30 = (uint64_t *)(v1 + v5[13]);
  v31 = *v30;
  v32 = v30[1];
  swift_bridgeObjectRetain(v32);
  String.hash(into:)(a1, v31, v32);
  swift_bridgeObjectRelease(v32);
  v33 = (uint64_t *)(v1 + v5[14]);
  v34 = *v33;
  v35 = v33[1];
  swift_bridgeObjectRetain(v35);
  String.hash(into:)(a1, v34, v35);
  swift_bridgeObjectRelease(v35);
  v36 = (uint64_t *)(v1 + v5[15]);
  v37 = *v36;
  v38 = v36[1];
  swift_bridgeObjectRetain(v38);
  String.hash(into:)(a1, v37, v38);
  swift_bridgeObjectRelease(v38);
  v39 = (uint64_t *)(v1 + v5[16]);
  v40 = *v39;
  v41 = v39[1];
  swift_bridgeObjectRetain(v41);
  String.hash(into:)(a1, v40, v41);
  swift_bridgeObjectRelease(v41);
  v42 = (uint64_t *)(v1 + v5[17]);
  v43 = *v42;
  v44 = v42[1];
  swift_bridgeObjectRetain(v44);
  String.hash(into:)(a1, v43, v44);
  swift_bridgeObjectRelease(v44);
  v45 = (uint64_t *)(v1 + v5[18]);
  v46 = *v45;
  v47 = v45[1];
  swift_bridgeObjectRetain(v47);
  String.hash(into:)(a1, v46, v47);
  swift_bridgeObjectRelease(v47);
  v48 = (uint64_t *)(v1 + v5[19]);
  v49 = *v48;
  v50 = v48[1];
  swift_bridgeObjectRetain(v50);
  String.hash(into:)(a1, v49, v50);
  swift_bridgeObjectRelease(v50);
  v51 = (uint64_t *)(v1 + v5[20]);
  v52 = *v51;
  v53 = v51[1];
  swift_bridgeObjectRetain(v53);
  String.hash(into:)(a1, v52, v53);
  swift_bridgeObjectRelease(v53);
  v54 = (uint64_t *)(v1 + v5[21]);
  v55 = *v54;
  v56 = v54[1];
  swift_bridgeObjectRetain(v56);
  String.hash(into:)(a1, v55, v56);
  swift_bridgeObjectRelease(v56);
  v57 = (uint64_t *)(v1 + v5[22]);
  v58 = *v57;
  v59 = v57[1];
  swift_bridgeObjectRetain(v59);
  String.hash(into:)(a1, v58, v59);
  swift_bridgeObjectRelease(v59);
  v60 = (uint64_t *)(v1 + v5[23]);
  v61 = *v60;
  v62 = v60[1];
  swift_bridgeObjectRetain(v62);
  String.hash(into:)(a1, v61, v62);
  swift_bridgeObjectRelease(v62);
  v63 = (uint64_t *)(v1 + v5[24]);
  v64 = *v63;
  v65 = v63[1];
  swift_bridgeObjectRetain(v65);
  String.hash(into:)(a1, v64, v65);
  swift_bridgeObjectRelease(v65);
  v66 = (uint64_t *)(v1 + v5[25]);
  v67 = *v66;
  v68 = v66[1];
  swift_bridgeObjectRetain(v68);
  String.hash(into:)(a1, v67, v68);
  swift_bridgeObjectRelease(v68);
  v69 = (uint64_t *)(v1 + v5[26]);
  v70 = *v69;
  v71 = v69[1];
  swift_bridgeObjectRetain(v71);
  String.hash(into:)(a1, v70, v71);
  swift_bridgeObjectRelease(v71);
  v72 = (uint64_t *)(v1 + v5[27]);
  v73 = *v72;
  v74 = v72[1];
  swift_bridgeObjectRetain(v74);
  String.hash(into:)(a1, v73, v74);
  swift_bridgeObjectRelease(v74);
  v75 = (uint64_t *)(v1 + v5[28]);
  v76 = *v75;
  v77 = v75[1];
  swift_bridgeObjectRetain(v77);
  String.hash(into:)(a1, v76, v77);
  swift_bridgeObjectRelease(v77);
  v78 = (uint64_t *)(v1 + v5[29]);
  v79 = *v78;
  v80 = v78[1];
  swift_bridgeObjectRetain(v80);
  String.hash(into:)(a1, v79, v80);
  swift_bridgeObjectRelease(v80);
  v81 = type metadata accessor for Date(0);
  v82 = sub_1000A0940(&qword_100210EC0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  return dispatch thunk of Hashable.hash(into:)(a1, v81, v82);
}

uint64_t sub_1000D1654(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1000D168C + 4 * byte_1001865D0[a1]))(0x696669746E656469, 0xEA00000000007265);
}

uint64_t sub_1000D168C()
{
  return 0x74654D64756F6C63;
}

unint64_t sub_1000D16B0()
{
  return 0xD000000000000010;
}

uint64_t sub_1000D1940(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v74;
  char v75;
  __int128 v76;

  v3 = v1;
  v5 = sub_1000A0980(&qword_100210EA8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v74 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_1000A20D8(a1, v9);
  v11 = sub_1000D3F84();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for MagicPairingSettingsRecord.CodingKeys, &type metadata for MagicPairingSettingsRecord.CodingKeys, v11, v9, v10);
  LOBYTE(v76) = 0;
  v12 = type metadata accessor for UUID(0);
  v13 = sub_1000A0940((unint64_t *)&unk_1002105E0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v3, &v76, v5, v12, v13);
  if (!v2)
  {
    v14 = (int *)type metadata accessor for MagicPairingSettingsRecord(0);
    v76 = *(_OWORD *)(v3 + v14[5]);
    v75 = 1;
    v15 = sub_1000A21A4();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v76, &v75, v5, &type metadata for Data, v15);
    v16 = (uint64_t *)(v3 + v14[6]);
    v17 = *v16;
    v18 = v16[1];
    LOBYTE(v76) = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v17, v18, &v76, v5);
    v76 = *(_OWORD *)(v3 + v14[7]);
    v75 = 3;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v76, &v75, v5, &type metadata for Data, v15);
    v76 = *(_OWORD *)(v3 + v14[8]);
    v75 = 4;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v76, &v75, v5, &type metadata for Data, v15);
    v76 = *(_OWORD *)(v3 + v14[9]);
    v75 = 5;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v76, &v75, v5, &type metadata for Data, v15);
    v76 = *(_OWORD *)(v3 + v14[10]);
    v75 = 6;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v76, &v75, v5, &type metadata for Data, v15);
    v76 = *(_OWORD *)(v3 + v14[11]);
    v75 = 7;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v76, &v75, v5, &type metadata for Data, v15);
    v76 = *(_OWORD *)(v3 + v14[12]);
    v75 = 8;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v76, &v75, v5, &type metadata for Data, v15);
    v19 = (uint64_t *)(v3 + v14[13]);
    v20 = *v19;
    v21 = v19[1];
    LOBYTE(v76) = 9;
    KeyedEncodingContainer.encode(_:forKey:)(v20, v21, &v76, v5);
    v22 = (uint64_t *)(v3 + v14[14]);
    v23 = *v22;
    v24 = v22[1];
    LOBYTE(v76) = 10;
    KeyedEncodingContainer.encode(_:forKey:)(v23, v24, &v76, v5);
    v25 = (uint64_t *)(v3 + v14[15]);
    v26 = *v25;
    v27 = v25[1];
    LOBYTE(v76) = 11;
    KeyedEncodingContainer.encode(_:forKey:)(v26, v27, &v76, v5);
    v28 = (uint64_t *)(v3 + v14[16]);
    v29 = *v28;
    v30 = v28[1];
    LOBYTE(v76) = 12;
    KeyedEncodingContainer.encode(_:forKey:)(v29, v30, &v76, v5);
    v31 = (uint64_t *)(v3 + v14[17]);
    v32 = *v31;
    v33 = v31[1];
    LOBYTE(v76) = 13;
    KeyedEncodingContainer.encode(_:forKey:)(v32, v33, &v76, v5);
    v34 = (uint64_t *)(v3 + v14[18]);
    v35 = *v34;
    v36 = v34[1];
    LOBYTE(v76) = 14;
    KeyedEncodingContainer.encode(_:forKey:)(v35, v36, &v76, v5);
    v37 = (uint64_t *)(v3 + v14[19]);
    v38 = *v37;
    v39 = v37[1];
    LOBYTE(v76) = 15;
    KeyedEncodingContainer.encode(_:forKey:)(v38, v39, &v76, v5);
    v40 = (uint64_t *)(v3 + v14[20]);
    v41 = *v40;
    v42 = v40[1];
    LOBYTE(v76) = 16;
    KeyedEncodingContainer.encode(_:forKey:)(v41, v42, &v76, v5);
    v43 = (uint64_t *)(v3 + v14[21]);
    v44 = *v43;
    v45 = v43[1];
    LOBYTE(v76) = 17;
    KeyedEncodingContainer.encode(_:forKey:)(v44, v45, &v76, v5);
    v46 = (uint64_t *)(v3 + v14[22]);
    v47 = *v46;
    v48 = v46[1];
    LOBYTE(v76) = 18;
    KeyedEncodingContainer.encode(_:forKey:)(v47, v48, &v76, v5);
    v49 = (uint64_t *)(v3 + v14[23]);
    v50 = *v49;
    v51 = v49[1];
    LOBYTE(v76) = 19;
    KeyedEncodingContainer.encode(_:forKey:)(v50, v51, &v76, v5);
    v52 = (uint64_t *)(v3 + v14[24]);
    v53 = *v52;
    v54 = v52[1];
    LOBYTE(v76) = 20;
    KeyedEncodingContainer.encode(_:forKey:)(v53, v54, &v76, v5);
    v55 = (uint64_t *)(v3 + v14[25]);
    v56 = *v55;
    v57 = v55[1];
    LOBYTE(v76) = 21;
    KeyedEncodingContainer.encode(_:forKey:)(v56, v57, &v76, v5);
    v58 = (uint64_t *)(v3 + v14[26]);
    v59 = *v58;
    v60 = v58[1];
    LOBYTE(v76) = 22;
    KeyedEncodingContainer.encode(_:forKey:)(v59, v60, &v76, v5);
    v61 = (uint64_t *)(v3 + v14[27]);
    v62 = *v61;
    v63 = v61[1];
    LOBYTE(v76) = 23;
    KeyedEncodingContainer.encode(_:forKey:)(v62, v63, &v76, v5);
    v64 = (uint64_t *)(v3 + v14[28]);
    v65 = *v64;
    v66 = v64[1];
    LOBYTE(v76) = 24;
    KeyedEncodingContainer.encode(_:forKey:)(v65, v66, &v76, v5);
    v67 = (uint64_t *)(v3 + v14[29]);
    v68 = *v67;
    v69 = v67[1];
    LOBYTE(v76) = 25;
    KeyedEncodingContainer.encode(_:forKey:)(v68, v69, &v76, v5);
    v70 = v3 + v14[30];
    LOBYTE(v76) = 26;
    v71 = type metadata accessor for Date(0);
    v72 = sub_1000A0940((unint64_t *)&unk_100210EB0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v70, &v76, v5, v71, v72);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1000D1FF0()
{
  unsigned __int8 *v0;

  return sub_1000D1654(*v0);
}

uint64_t sub_1000D1FF8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1000D4678(a1, a2);
  *a3 = result;
  return result;
}

void sub_1000D201C(_BYTE *a1@<X8>)
{
  *a1 = 27;
}

uint64_t sub_1000D2028(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000D3F84();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000D2050(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000D3F84();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000D2078()
{
  return 0x746553636967614DLL;
}

uint64_t sub_1000D209C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = v1 + *(int *)(a1 + 20);
  v3 = *(_QWORD *)v2;
  sub_1000A0E74(*(_QWORD *)v2, *(_QWORD *)(v2 + 8));
  return v3;
}

uint64_t sub_1000D20D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 120);
  v5 = type metadata accessor for Date(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

Swift::Int sub_1000D2118()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1, 0);
  sub_1000D1120((uint64_t)v1);
  return Hasher._finalize()();
}

Swift::Int sub_1000D2158(uint64_t a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, a1);
  sub_1000D1120((uint64_t)v2);
  return Hasher._finalize()();
}

uint64_t sub_1000D2198@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000C9788(a1, a2);
}

uint64_t sub_1000D21AC(_QWORD *a1)
{
  return sub_1000D1940(a1);
}

void sub_1000D21C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }
}

uint64_t sub_1000D2220(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, __int16 a10, char __s2, char a12, char a13, char a14, char a15, char a16, char a17, char a18, char a19, char a20,char a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  BOOL *v37;
  const void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t result;
  uint64_t v42;
  __int16 v43;
  char v44;
  char v45;
  char v46;
  char v47;

  v42 = v39;
  v43 = v40;
  v44 = BYTE2(v40);
  v45 = BYTE3(v40);
  v46 = BYTE4(v40);
  v47 = BYTE5(v40);
  if (!v38)
  {
    __break(1u);
    JUMPOUT(0x1000D2404);
  }
  result = memcmp(v38, &v42, BYTE6(v40));
  *v37 = (_DWORD)result == 0;
  return result;
}

uint64_t type metadata accessor for MagicPairingSettingsRecord(uint64_t a1)
{
  uint64_t result;

  result = qword_100210DC8;
  if (!qword_100210DC8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for MagicPairingSettingsRecord);
  return result;
}

uint64_t sub_1000D2464(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  char v5;
  char v7;
  uint64_t v8;
  __int16 v9;
  char v10;
  char v11;
  char v12;
  char v13;

  v8 = a1;
  v9 = a2;
  v10 = BYTE2(a2);
  v11 = BYTE3(a2);
  v12 = BYTE4(a2);
  v13 = BYTE5(a2);
  sub_1000D21C0((uint64_t)&v8, (uint64_t)&v8 + BYTE6(a2), a3, a4);
  if (!v4)
    v5 = v7;
  return v5 & 1;
}

uint64_t sub_1000D2538(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;

  result = __DataStorage._bytes.getter();
  v11 = result;
  if (result)
  {
    result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_15:
      __break(1u);
      return result;
    }
    v11 += a1 - result;
  }
  v12 = __OFSUB__(a2, a1);
  v13 = a2 - a1;
  if (v12)
  {
    __break(1u);
    goto LABEL_15;
  }
  v14 = __DataStorage._length.getter();
  if (v14 >= v13)
    v15 = v13;
  else
    v15 = v14;
  v16 = v11 + v15;
  if (v11)
    v17 = v16;
  else
    v17 = 0;
  sub_1000D21C0(v11, v17, a4, a5);
  if (!v5)
    v18 = v19;
  return v18 & 1;
}

void sub_1000D25EC(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }
}

uint64_t sub_1000D2638()
{
  unint64_t v0;

  return ((uint64_t (*)(void))((char *)&loc_1000D266C + dword_1000D2844[v0 >> 62]))();
}

uint64_t sub_1000D267C@<X0>(int a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  if (v1 == BYTE6(v2))
  {
    if (v1 >= 1)
      __asm { BR              X10 }
    v3 = 1;
  }
  else
  {
    v3 = 0;
  }
  return v3 & 1;
}

uint64_t sub_1000D2864(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MagicPairingSettingsRecord(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000D28A8(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for MagicPairingSettingsRecord(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1000D28E4()
{
  unint64_t result;

  result = qword_100210D60;
  if (!qword_100210D60)
  {
    result = swift_getWitnessTable(&unk_1001867BC, &type metadata for MagicPairingSettingsRecord.MagicSettingsRecordError);
    atomic_store(result, (unint64_t *)&qword_100210D60);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for MagicPairingSettingsRecord.MagicSettingsRecordError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1000D2974 + 4 * byte_1001865F0[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1000D29A8 + 4 * byte_1001865EB[v4]))();
}

uint64_t sub_1000D29A8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000D29B0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000D29B8);
  return result;
}

uint64_t sub_1000D29C4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000D29CCLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1000D29D0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000D29D8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MagicPairingSettingsRecord.MagicSettingsRecordError()
{
  return &type metadata for MagicPairingSettingsRecord.MagicSettingsRecordError;
}

uint64_t *sub_1000D29F4(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  _QWORD *v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  _QWORD *v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  _QWORD *v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  _QWORD *v73;
  uint64_t v74;
  _QWORD *v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  _QWORD *v80;
  uint64_t v81;
  _QWORD *v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  _QWORD *v88;
  uint64_t v89;
  _QWORD *v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  _QWORD *v96;
  uint64_t v97;
  _QWORD *v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  void (*v109)(char *, char *, uint64_t);
  char *v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v107 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v107 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v107);
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = (uint64_t *)((char *)a1 + v8);
    v10 = (uint64_t *)((char *)a2 + v8);
    v11 = *v10;
    v12 = v10[1];
    sub_1000A0E74(*v10, v12);
    *v9 = v11;
    v9[1] = v12;
    v13 = a3[6];
    v14 = a3[7];
    v15 = (uint64_t *)((char *)a1 + v13);
    v16 = (uint64_t *)((char *)a2 + v13);
    v17 = v16[1];
    *v15 = *v16;
    v15[1] = v17;
    v18 = (uint64_t *)((char *)a1 + v14);
    v19 = *(uint64_t *)((char *)a2 + v14);
    v20 = *(uint64_t *)((char *)a2 + v14 + 8);
    swift_bridgeObjectRetain(v17);
    sub_1000A0E74(v19, v20);
    *v18 = v19;
    v18[1] = v20;
    v21 = a3[8];
    v22 = (uint64_t *)((char *)a1 + v21);
    v23 = (uint64_t *)((char *)a2 + v21);
    v24 = *v23;
    v25 = v23[1];
    sub_1000A0E74(*v23, v25);
    *v22 = v24;
    v22[1] = v25;
    v26 = a3[9];
    v27 = (uint64_t *)((char *)a1 + v26);
    v28 = (uint64_t *)((char *)a2 + v26);
    v29 = *v28;
    v30 = v28[1];
    sub_1000A0E74(*v28, v30);
    *v27 = v29;
    v27[1] = v30;
    v31 = a3[10];
    v32 = (uint64_t *)((char *)a1 + v31);
    v33 = (uint64_t *)((char *)a2 + v31);
    v34 = *v33;
    v35 = v33[1];
    sub_1000A0E74(*v33, v35);
    *v32 = v34;
    v32[1] = v35;
    v36 = a3[11];
    v37 = (uint64_t *)((char *)a1 + v36);
    v38 = (uint64_t *)((char *)a2 + v36);
    v39 = *v38;
    v40 = v38[1];
    sub_1000A0E74(*v38, v40);
    *v37 = v39;
    v37[1] = v40;
    v41 = a3[12];
    v42 = (uint64_t *)((char *)a1 + v41);
    v43 = (uint64_t *)((char *)a2 + v41);
    v44 = *v43;
    v45 = v43[1];
    sub_1000A0E74(*v43, v45);
    *v42 = v44;
    v42[1] = v45;
    v46 = a3[13];
    v47 = a3[14];
    v48 = (uint64_t *)((char *)a1 + v46);
    v49 = (uint64_t *)((char *)a2 + v46);
    v119 = v49[1];
    *v48 = *v49;
    v48[1] = v119;
    v50 = (uint64_t *)((char *)a1 + v47);
    v51 = (uint64_t *)((char *)a2 + v47);
    v120 = v51[1];
    *v50 = *v51;
    v50[1] = v120;
    v52 = a3[15];
    v53 = a3[16];
    v54 = (uint64_t *)((char *)a1 + v52);
    v55 = (uint64_t *)((char *)a2 + v52);
    v117 = v55[1];
    *v54 = *v55;
    v54[1] = v117;
    v56 = (uint64_t *)((char *)a1 + v53);
    v57 = (uint64_t *)((char *)a2 + v53);
    v118 = v57[1];
    *v56 = *v57;
    v56[1] = v118;
    v58 = a3[17];
    v59 = a3[18];
    v60 = (uint64_t *)((char *)a1 + v58);
    v61 = (uint64_t *)((char *)a2 + v58);
    v115 = v61[1];
    *v60 = *v61;
    v60[1] = v115;
    v62 = (uint64_t *)((char *)a1 + v59);
    v63 = (uint64_t *)((char *)a2 + v59);
    v116 = v63[1];
    *v62 = *v63;
    v62[1] = v116;
    v64 = a3[19];
    v65 = a3[20];
    v66 = (uint64_t *)((char *)a1 + v64);
    v67 = (uint64_t *)((char *)a2 + v64);
    v113 = v67[1];
    *v66 = *v67;
    v66[1] = v113;
    v68 = (uint64_t *)((char *)a1 + v65);
    v69 = (uint64_t *)((char *)a2 + v65);
    v114 = v69[1];
    *v68 = *v69;
    v68[1] = v114;
    v70 = a3[21];
    v71 = a3[22];
    v72 = (uint64_t *)((char *)a1 + v70);
    v73 = (uint64_t *)((char *)a2 + v70);
    v74 = v73[1];
    *v72 = *v73;
    v72[1] = v74;
    v75 = (uint64_t *)((char *)a1 + v71);
    v76 = (uint64_t *)((char *)a2 + v71);
    v112 = v76[1];
    *v75 = *v76;
    v75[1] = v112;
    v77 = a3[23];
    v78 = a3[24];
    v79 = (uint64_t *)((char *)a1 + v77);
    v80 = (uint64_t *)((char *)a2 + v77);
    v81 = v80[1];
    *v79 = *v80;
    v79[1] = v81;
    v82 = (uint64_t *)((char *)a1 + v78);
    v83 = (uint64_t *)((char *)a2 + v78);
    v84 = v83[1];
    *v82 = *v83;
    v82[1] = v84;
    v85 = a3[25];
    v86 = a3[26];
    v87 = (uint64_t *)((char *)a1 + v85);
    v88 = (uint64_t *)((char *)a2 + v85);
    v89 = v88[1];
    *v87 = *v88;
    v87[1] = v89;
    v90 = (uint64_t *)((char *)a1 + v86);
    v91 = (uint64_t *)((char *)a2 + v86);
    v92 = v91[1];
    *v90 = *v91;
    v90[1] = v92;
    v93 = a3[27];
    v94 = a3[28];
    v95 = (uint64_t *)((char *)a1 + v93);
    v96 = (uint64_t *)((char *)a2 + v93);
    v97 = v96[1];
    *v95 = *v96;
    v95[1] = v97;
    v98 = (uint64_t *)((char *)a1 + v94);
    v99 = (uint64_t *)((char *)a2 + v94);
    v100 = v99[1];
    *v98 = *v99;
    v98[1] = v100;
    v101 = a3[29];
    v102 = a3[30];
    v103 = (uint64_t *)((char *)a1 + v101);
    v104 = (uint64_t *)((char *)a2 + v101);
    v105 = v104[1];
    v111 = (char *)a2 + v102;
    v110 = (char *)a1 + v102;
    *v103 = *v104;
    v103[1] = v105;
    v106 = type metadata accessor for Date(0);
    v109 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v106 - 8) + 16);
    swift_bridgeObjectRetain(v119);
    swift_bridgeObjectRetain(v120);
    swift_bridgeObjectRetain(v117);
    swift_bridgeObjectRetain(v118);
    swift_bridgeObjectRetain(v115);
    swift_bridgeObjectRetain(v116);
    swift_bridgeObjectRetain(v113);
    swift_bridgeObjectRetain(v114);
    swift_bridgeObjectRetain(v74);
    swift_bridgeObjectRetain(v112);
    swift_bridgeObjectRetain(v81);
    swift_bridgeObjectRetain(v84);
    swift_bridgeObjectRetain(v89);
    swift_bridgeObjectRetain(v92);
    swift_bridgeObjectRetain(v97);
    swift_bridgeObjectRetain(v100);
    swift_bridgeObjectRetain(v105);
    v109(v110, v111, v106);
  }
  return a1;
}

uint64_t sub_1000D2D9C(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  sub_1000A103C(*(_QWORD *)(a1 + a2[5]), *(_QWORD *)(a1 + a2[5] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[6] + 8));
  sub_1000A103C(*(_QWORD *)(a1 + a2[7]), *(_QWORD *)(a1 + a2[7] + 8));
  sub_1000A103C(*(_QWORD *)(a1 + a2[8]), *(_QWORD *)(a1 + a2[8] + 8));
  sub_1000A103C(*(_QWORD *)(a1 + a2[9]), *(_QWORD *)(a1 + a2[9] + 8));
  sub_1000A103C(*(_QWORD *)(a1 + a2[10]), *(_QWORD *)(a1 + a2[10] + 8));
  sub_1000A103C(*(_QWORD *)(a1 + a2[11]), *(_QWORD *)(a1 + a2[11] + 8));
  sub_1000A103C(*(_QWORD *)(a1 + a2[12]), *(_QWORD *)(a1 + a2[12] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[13] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[14] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[15] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[16] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[17] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[18] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[19] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[20] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[21] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[22] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[23] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[24] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[25] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[26] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[27] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[28] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[29] + 8));
  v5 = a1 + a2[30];
  v6 = type metadata accessor for Date(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
}

uint64_t sub_1000D2F88(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  _QWORD *v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  _QWORD *v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  _QWORD *v66;
  _QWORD *v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  _QWORD *v72;
  uint64_t v73;
  _QWORD *v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  _QWORD *v79;
  uint64_t v80;
  _QWORD *v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  _QWORD *v87;
  uint64_t v88;
  _QWORD *v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  _QWORD *v95;
  uint64_t v96;
  _QWORD *v97;
  _QWORD *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  _QWORD *v103;
  uint64_t v104;
  uint64_t v105;
  void (*v107)(uint64_t, uint64_t, uint64_t);
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = (uint64_t *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v10 = *v9;
  v11 = v9[1];
  sub_1000A0E74(*v9, v11);
  *v8 = v10;
  v8[1] = v11;
  v12 = a3[6];
  v13 = a3[7];
  v14 = (_QWORD *)(a1 + v12);
  v15 = (_QWORD *)(a2 + v12);
  v16 = v15[1];
  *v14 = *v15;
  v14[1] = v16;
  v17 = (uint64_t *)(a1 + v13);
  v18 = *(_QWORD *)(a2 + v13);
  v19 = *(_QWORD *)(a2 + v13 + 8);
  swift_bridgeObjectRetain(v16);
  sub_1000A0E74(v18, v19);
  *v17 = v18;
  v17[1] = v19;
  v20 = a3[8];
  v21 = (uint64_t *)(a1 + v20);
  v22 = (uint64_t *)(a2 + v20);
  v23 = *v22;
  v24 = v22[1];
  sub_1000A0E74(*v22, v24);
  *v21 = v23;
  v21[1] = v24;
  v25 = a3[9];
  v26 = (uint64_t *)(a1 + v25);
  v27 = (uint64_t *)(a2 + v25);
  v28 = *v27;
  v29 = v27[1];
  sub_1000A0E74(*v27, v29);
  *v26 = v28;
  v26[1] = v29;
  v30 = a3[10];
  v31 = (uint64_t *)(a1 + v30);
  v32 = (uint64_t *)(a2 + v30);
  v33 = *v32;
  v34 = v32[1];
  sub_1000A0E74(*v32, v34);
  *v31 = v33;
  v31[1] = v34;
  v35 = a3[11];
  v36 = (uint64_t *)(a1 + v35);
  v37 = (uint64_t *)(a2 + v35);
  v38 = *v37;
  v39 = v37[1];
  sub_1000A0E74(*v37, v39);
  *v36 = v38;
  v36[1] = v39;
  v40 = a3[12];
  v41 = (uint64_t *)(a1 + v40);
  v42 = (uint64_t *)(a2 + v40);
  v43 = *v42;
  v44 = v42[1];
  sub_1000A0E74(*v42, v44);
  *v41 = v43;
  v41[1] = v44;
  v45 = a3[13];
  v46 = a3[14];
  v47 = (_QWORD *)(a1 + v45);
  v48 = (_QWORD *)(a2 + v45);
  v117 = v48[1];
  *v47 = *v48;
  v47[1] = v117;
  v49 = (_QWORD *)(a1 + v46);
  v50 = (_QWORD *)(a2 + v46);
  v118 = v50[1];
  *v49 = *v50;
  v49[1] = v118;
  v51 = a3[15];
  v52 = a3[16];
  v53 = (_QWORD *)(a1 + v51);
  v54 = (_QWORD *)(a2 + v51);
  v115 = v54[1];
  *v53 = *v54;
  v53[1] = v115;
  v55 = (_QWORD *)(a1 + v52);
  v56 = (_QWORD *)(a2 + v52);
  v116 = v56[1];
  *v55 = *v56;
  v55[1] = v116;
  v57 = a3[17];
  v58 = a3[18];
  v59 = (_QWORD *)(a1 + v57);
  v60 = (_QWORD *)(a2 + v57);
  v113 = v60[1];
  *v59 = *v60;
  v59[1] = v113;
  v61 = (_QWORD *)(a1 + v58);
  v62 = (_QWORD *)(a2 + v58);
  v114 = v62[1];
  *v61 = *v62;
  v61[1] = v114;
  v63 = a3[19];
  v64 = a3[20];
  v65 = (_QWORD *)(a1 + v63);
  v66 = (_QWORD *)(a2 + v63);
  v111 = v66[1];
  *v65 = *v66;
  v65[1] = v111;
  v67 = (_QWORD *)(a1 + v64);
  v68 = (_QWORD *)(a2 + v64);
  v112 = v68[1];
  *v67 = *v68;
  v67[1] = v112;
  v69 = a3[21];
  v70 = a3[22];
  v71 = (_QWORD *)(a1 + v69);
  v72 = (_QWORD *)(a2 + v69);
  v73 = v72[1];
  *v71 = *v72;
  v71[1] = v73;
  v74 = (_QWORD *)(a1 + v70);
  v75 = (_QWORD *)(a2 + v70);
  v110 = v75[1];
  *v74 = *v75;
  v74[1] = v110;
  v76 = a3[23];
  v77 = a3[24];
  v78 = (_QWORD *)(a1 + v76);
  v79 = (_QWORD *)(a2 + v76);
  v80 = v79[1];
  *v78 = *v79;
  v78[1] = v80;
  v81 = (_QWORD *)(a1 + v77);
  v82 = (_QWORD *)(a2 + v77);
  v83 = v82[1];
  *v81 = *v82;
  v81[1] = v83;
  v84 = a3[25];
  v85 = a3[26];
  v86 = (_QWORD *)(a1 + v84);
  v87 = (_QWORD *)(a2 + v84);
  v88 = v87[1];
  *v86 = *v87;
  v86[1] = v88;
  v89 = (_QWORD *)(a1 + v85);
  v90 = (_QWORD *)(a2 + v85);
  v91 = v90[1];
  *v89 = *v90;
  v89[1] = v91;
  v92 = a3[27];
  v93 = a3[28];
  v94 = (_QWORD *)(a1 + v92);
  v95 = (_QWORD *)(a2 + v92);
  v96 = v95[1];
  *v94 = *v95;
  v94[1] = v96;
  v97 = (_QWORD *)(a1 + v93);
  v98 = (_QWORD *)(a2 + v93);
  v99 = v98[1];
  *v97 = *v98;
  v97[1] = v99;
  v100 = a3[29];
  v101 = a3[30];
  v102 = (_QWORD *)(a1 + v100);
  v103 = (_QWORD *)(a2 + v100);
  v104 = v103[1];
  v109 = a2 + v101;
  v108 = a1 + v101;
  *v102 = *v103;
  v102[1] = v104;
  v105 = type metadata accessor for Date(0);
  v107 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v105 - 8) + 16);
  swift_bridgeObjectRetain(v117);
  swift_bridgeObjectRetain(v118);
  swift_bridgeObjectRetain(v115);
  swift_bridgeObjectRetain(v116);
  swift_bridgeObjectRetain(v113);
  swift_bridgeObjectRetain(v114);
  swift_bridgeObjectRetain(v111);
  swift_bridgeObjectRetain(v112);
  swift_bridgeObjectRetain(v73);
  swift_bridgeObjectRetain(v110);
  swift_bridgeObjectRetain(v80);
  swift_bridgeObjectRetain(v83);
  swift_bridgeObjectRetain(v88);
  swift_bridgeObjectRetain(v91);
  swift_bridgeObjectRetain(v96);
  swift_bridgeObjectRetain(v99);
  swift_bridgeObjectRetain(v104);
  v107(v108, v109, v105);
  return a1;
}

uint64_t sub_1000D3304(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t *v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  _QWORD *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  _QWORD *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD *v107;
  _QWORD *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  _QWORD *v112;
  _QWORD *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  _QWORD *v117;
  _QWORD *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  _QWORD *v122;
  _QWORD *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  _QWORD *v127;
  _QWORD *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  _QWORD *v132;
  _QWORD *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  _QWORD *v137;
  _QWORD *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  _QWORD *v142;
  _QWORD *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = (uint64_t *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v10 = *v9;
  v11 = v9[1];
  sub_1000A0E74(*v9, v11);
  v12 = *v8;
  v13 = v8[1];
  *v8 = v10;
  v8[1] = v11;
  sub_1000A103C(v12, v13);
  v14 = a3[6];
  v15 = (_QWORD *)(a1 + v14);
  v16 = (_QWORD *)(a2 + v14);
  *v15 = *v16;
  v17 = v16[1];
  v18 = v15[1];
  v15[1] = v17;
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRelease(v18);
  v19 = a3[7];
  v20 = (uint64_t *)(a1 + v19);
  v21 = (uint64_t *)(a2 + v19);
  v22 = *v21;
  v23 = v21[1];
  sub_1000A0E74(*v21, v23);
  v24 = *v20;
  v25 = v20[1];
  *v20 = v22;
  v20[1] = v23;
  sub_1000A103C(v24, v25);
  v26 = a3[8];
  v27 = (uint64_t *)(a1 + v26);
  v28 = (uint64_t *)(a2 + v26);
  v29 = *v28;
  v30 = v28[1];
  sub_1000A0E74(*v28, v30);
  v31 = *v27;
  v32 = v27[1];
  *v27 = v29;
  v27[1] = v30;
  sub_1000A103C(v31, v32);
  v33 = a3[9];
  v34 = (uint64_t *)(a1 + v33);
  v35 = (uint64_t *)(a2 + v33);
  v36 = *v35;
  v37 = v35[1];
  sub_1000A0E74(*v35, v37);
  v38 = *v34;
  v39 = v34[1];
  *v34 = v36;
  v34[1] = v37;
  sub_1000A103C(v38, v39);
  v40 = a3[10];
  v41 = (uint64_t *)(a1 + v40);
  v42 = (uint64_t *)(a2 + v40);
  v43 = *v42;
  v44 = v42[1];
  sub_1000A0E74(*v42, v44);
  v45 = *v41;
  v46 = v41[1];
  *v41 = v43;
  v41[1] = v44;
  sub_1000A103C(v45, v46);
  v47 = a3[11];
  v48 = (uint64_t *)(a1 + v47);
  v49 = (uint64_t *)(a2 + v47);
  v50 = *v49;
  v51 = v49[1];
  sub_1000A0E74(*v49, v51);
  v52 = *v48;
  v53 = v48[1];
  *v48 = v50;
  v48[1] = v51;
  sub_1000A103C(v52, v53);
  v54 = a3[12];
  v55 = (uint64_t *)(a1 + v54);
  v56 = (uint64_t *)(a2 + v54);
  v57 = *v56;
  v58 = v56[1];
  sub_1000A0E74(*v56, v58);
  v59 = *v55;
  v60 = v55[1];
  *v55 = v57;
  v55[1] = v58;
  sub_1000A103C(v59, v60);
  v61 = a3[13];
  v62 = (_QWORD *)(a1 + v61);
  v63 = (_QWORD *)(a2 + v61);
  *v62 = *v63;
  v64 = v63[1];
  v65 = v62[1];
  v62[1] = v64;
  swift_bridgeObjectRetain(v64);
  swift_bridgeObjectRelease(v65);
  v66 = a3[14];
  v67 = (_QWORD *)(a1 + v66);
  v68 = (_QWORD *)(a2 + v66);
  *v67 = *v68;
  v69 = v68[1];
  v70 = v67[1];
  v67[1] = v69;
  swift_bridgeObjectRetain(v69);
  swift_bridgeObjectRelease(v70);
  v71 = a3[15];
  v72 = (_QWORD *)(a1 + v71);
  v73 = (_QWORD *)(a2 + v71);
  *v72 = *v73;
  v74 = v73[1];
  v75 = v72[1];
  v72[1] = v74;
  swift_bridgeObjectRetain(v74);
  swift_bridgeObjectRelease(v75);
  v76 = a3[16];
  v77 = (_QWORD *)(a1 + v76);
  v78 = (_QWORD *)(a2 + v76);
  *v77 = *v78;
  v79 = v78[1];
  v80 = v77[1];
  v77[1] = v79;
  swift_bridgeObjectRetain(v79);
  swift_bridgeObjectRelease(v80);
  v81 = a3[17];
  v82 = (_QWORD *)(a1 + v81);
  v83 = (_QWORD *)(a2 + v81);
  *v82 = *v83;
  v84 = v83[1];
  v85 = v82[1];
  v82[1] = v84;
  swift_bridgeObjectRetain(v84);
  swift_bridgeObjectRelease(v85);
  v86 = a3[18];
  v87 = (_QWORD *)(a1 + v86);
  v88 = (_QWORD *)(a2 + v86);
  *v87 = *v88;
  v89 = v88[1];
  v90 = v87[1];
  v87[1] = v89;
  swift_bridgeObjectRetain(v89);
  swift_bridgeObjectRelease(v90);
  v91 = a3[19];
  v92 = (_QWORD *)(a1 + v91);
  v93 = (_QWORD *)(a2 + v91);
  *v92 = *v93;
  v94 = v93[1];
  v95 = v92[1];
  v92[1] = v94;
  swift_bridgeObjectRetain(v94);
  swift_bridgeObjectRelease(v95);
  v96 = a3[20];
  v97 = (_QWORD *)(a1 + v96);
  v98 = (_QWORD *)(a2 + v96);
  *v97 = *v98;
  v99 = v98[1];
  v100 = v97[1];
  v97[1] = v99;
  swift_bridgeObjectRetain(v99);
  swift_bridgeObjectRelease(v100);
  v101 = a3[21];
  v102 = (_QWORD *)(a1 + v101);
  v103 = (_QWORD *)(a2 + v101);
  *v102 = *v103;
  v104 = v103[1];
  v105 = v102[1];
  v102[1] = v104;
  swift_bridgeObjectRetain(v104);
  swift_bridgeObjectRelease(v105);
  v106 = a3[22];
  v107 = (_QWORD *)(a1 + v106);
  v108 = (_QWORD *)(a2 + v106);
  *v107 = *v108;
  v109 = v108[1];
  v110 = v107[1];
  v107[1] = v109;
  swift_bridgeObjectRetain(v109);
  swift_bridgeObjectRelease(v110);
  v111 = a3[23];
  v112 = (_QWORD *)(a1 + v111);
  v113 = (_QWORD *)(a2 + v111);
  *v112 = *v113;
  v114 = v113[1];
  v115 = v112[1];
  v112[1] = v114;
  swift_bridgeObjectRetain(v114);
  swift_bridgeObjectRelease(v115);
  v116 = a3[24];
  v117 = (_QWORD *)(a1 + v116);
  v118 = (_QWORD *)(a2 + v116);
  *v117 = *v118;
  v119 = v118[1];
  v120 = v117[1];
  v117[1] = v119;
  swift_bridgeObjectRetain(v119);
  swift_bridgeObjectRelease(v120);
  v121 = a3[25];
  v122 = (_QWORD *)(a1 + v121);
  v123 = (_QWORD *)(a2 + v121);
  *v122 = *v123;
  v124 = v123[1];
  v125 = v122[1];
  v122[1] = v124;
  swift_bridgeObjectRetain(v124);
  swift_bridgeObjectRelease(v125);
  v126 = a3[26];
  v127 = (_QWORD *)(a1 + v126);
  v128 = (_QWORD *)(a2 + v126);
  *v127 = *v128;
  v129 = v128[1];
  v130 = v127[1];
  v127[1] = v129;
  swift_bridgeObjectRetain(v129);
  swift_bridgeObjectRelease(v130);
  v131 = a3[27];
  v132 = (_QWORD *)(a1 + v131);
  v133 = (_QWORD *)(a2 + v131);
  *v132 = *v133;
  v134 = v133[1];
  v135 = v132[1];
  v132[1] = v134;
  swift_bridgeObjectRetain(v134);
  swift_bridgeObjectRelease(v135);
  v136 = a3[28];
  v137 = (_QWORD *)(a1 + v136);
  v138 = (_QWORD *)(a2 + v136);
  *v137 = *v138;
  v139 = v138[1];
  v140 = v137[1];
  v137[1] = v139;
  swift_bridgeObjectRetain(v139);
  swift_bridgeObjectRelease(v140);
  v141 = a3[29];
  v142 = (_QWORD *)(a1 + v141);
  v143 = (_QWORD *)(a2 + v141);
  *v142 = *v143;
  v144 = v143[1];
  v145 = v142[1];
  v142[1] = v144;
  swift_bridgeObjectRetain(v144);
  swift_bridgeObjectRelease(v145);
  v146 = a3[30];
  v147 = a1 + v146;
  v148 = a2 + v146;
  v149 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v149 - 8) + 24))(v147, v148, v149);
  return a1;
}

uint64_t sub_1000D37B8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  v8 = a3[8];
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  *(_OWORD *)(a1 + v8) = *(_OWORD *)(a2 + v8);
  v9 = a3[10];
  *(_OWORD *)(a1 + a3[9]) = *(_OWORD *)(a2 + a3[9]);
  *(_OWORD *)(a1 + v9) = *(_OWORD *)(a2 + v9);
  v10 = a3[12];
  *(_OWORD *)(a1 + a3[11]) = *(_OWORD *)(a2 + a3[11]);
  *(_OWORD *)(a1 + v10) = *(_OWORD *)(a2 + v10);
  v11 = a3[14];
  *(_OWORD *)(a1 + a3[13]) = *(_OWORD *)(a2 + a3[13]);
  *(_OWORD *)(a1 + v11) = *(_OWORD *)(a2 + v11);
  v12 = a3[16];
  *(_OWORD *)(a1 + a3[15]) = *(_OWORD *)(a2 + a3[15]);
  *(_OWORD *)(a1 + v12) = *(_OWORD *)(a2 + v12);
  v13 = a3[18];
  *(_OWORD *)(a1 + a3[17]) = *(_OWORD *)(a2 + a3[17]);
  *(_OWORD *)(a1 + v13) = *(_OWORD *)(a2 + v13);
  v14 = a3[20];
  *(_OWORD *)(a1 + a3[19]) = *(_OWORD *)(a2 + a3[19]);
  *(_OWORD *)(a1 + v14) = *(_OWORD *)(a2 + v14);
  v15 = a3[22];
  *(_OWORD *)(a1 + a3[21]) = *(_OWORD *)(a2 + a3[21]);
  *(_OWORD *)(a1 + v15) = *(_OWORD *)(a2 + v15);
  v16 = a3[24];
  *(_OWORD *)(a1 + a3[23]) = *(_OWORD *)(a2 + a3[23]);
  *(_OWORD *)(a1 + v16) = *(_OWORD *)(a2 + v16);
  v17 = a3[26];
  *(_OWORD *)(a1 + a3[25]) = *(_OWORD *)(a2 + a3[25]);
  *(_OWORD *)(a1 + v17) = *(_OWORD *)(a2 + v17);
  v18 = a3[28];
  *(_OWORD *)(a1 + a3[27]) = *(_OWORD *)(a2 + a3[27]);
  *(_OWORD *)(a1 + v18) = *(_OWORD *)(a2 + v18);
  v19 = a3[29];
  v20 = a3[30];
  v21 = *(_OWORD *)(a2 + v19);
  v22 = a2 + v20;
  v23 = a1 + v20;
  *(_OWORD *)(a1 + v19) = v21;
  v24 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 32))(v23, v22, v24);
  return a1;
}

uint64_t sub_1000D392C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD *v107;
  uint64_t *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  _QWORD *v113;
  uint64_t *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _QWORD *v119;
  uint64_t *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  _QWORD *v125;
  uint64_t *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  _QWORD *v131;
  uint64_t *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = *(_QWORD *)(a1 + v7);
  v9 = *(_QWORD *)(a1 + v7 + 8);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  sub_1000A103C(v8, v9);
  v10 = a3[6];
  v11 = (_QWORD *)(a1 + v10);
  v12 = (uint64_t *)(a2 + v10);
  v14 = *v12;
  v13 = v12[1];
  v15 = v11[1];
  *v11 = v14;
  v11[1] = v13;
  swift_bridgeObjectRelease(v15);
  v16 = a3[7];
  v17 = *(_QWORD *)(a1 + v16);
  v18 = *(_QWORD *)(a1 + v16 + 8);
  *(_OWORD *)(a1 + v16) = *(_OWORD *)(a2 + v16);
  sub_1000A103C(v17, v18);
  v19 = a3[8];
  v20 = *(_QWORD *)(a1 + v19);
  v21 = *(_QWORD *)(a1 + v19 + 8);
  *(_OWORD *)(a1 + v19) = *(_OWORD *)(a2 + v19);
  sub_1000A103C(v20, v21);
  v22 = a3[9];
  v23 = *(_QWORD *)(a1 + v22);
  v24 = *(_QWORD *)(a1 + v22 + 8);
  *(_OWORD *)(a1 + v22) = *(_OWORD *)(a2 + v22);
  sub_1000A103C(v23, v24);
  v25 = a3[10];
  v26 = *(_QWORD *)(a1 + v25);
  v27 = *(_QWORD *)(a1 + v25 + 8);
  *(_OWORD *)(a1 + v25) = *(_OWORD *)(a2 + v25);
  sub_1000A103C(v26, v27);
  v28 = a3[11];
  v29 = *(_QWORD *)(a1 + v28);
  v30 = *(_QWORD *)(a1 + v28 + 8);
  *(_OWORD *)(a1 + v28) = *(_OWORD *)(a2 + v28);
  sub_1000A103C(v29, v30);
  v31 = a3[12];
  v32 = *(_QWORD *)(a1 + v31);
  v33 = *(_QWORD *)(a1 + v31 + 8);
  *(_OWORD *)(a1 + v31) = *(_OWORD *)(a2 + v31);
  sub_1000A103C(v32, v33);
  v34 = a3[13];
  v35 = (_QWORD *)(a1 + v34);
  v36 = (uint64_t *)(a2 + v34);
  v38 = *v36;
  v37 = v36[1];
  v39 = v35[1];
  *v35 = v38;
  v35[1] = v37;
  swift_bridgeObjectRelease(v39);
  v40 = a3[14];
  v41 = (_QWORD *)(a1 + v40);
  v42 = (uint64_t *)(a2 + v40);
  v44 = *v42;
  v43 = v42[1];
  v45 = v41[1];
  *v41 = v44;
  v41[1] = v43;
  swift_bridgeObjectRelease(v45);
  v46 = a3[15];
  v47 = (_QWORD *)(a1 + v46);
  v48 = (uint64_t *)(a2 + v46);
  v50 = *v48;
  v49 = v48[1];
  v51 = v47[1];
  *v47 = v50;
  v47[1] = v49;
  swift_bridgeObjectRelease(v51);
  v52 = a3[16];
  v53 = (_QWORD *)(a1 + v52);
  v54 = (uint64_t *)(a2 + v52);
  v56 = *v54;
  v55 = v54[1];
  v57 = v53[1];
  *v53 = v56;
  v53[1] = v55;
  swift_bridgeObjectRelease(v57);
  v58 = a3[17];
  v59 = (_QWORD *)(a1 + v58);
  v60 = (uint64_t *)(a2 + v58);
  v62 = *v60;
  v61 = v60[1];
  v63 = v59[1];
  *v59 = v62;
  v59[1] = v61;
  swift_bridgeObjectRelease(v63);
  v64 = a3[18];
  v65 = (_QWORD *)(a1 + v64);
  v66 = (uint64_t *)(a2 + v64);
  v68 = *v66;
  v67 = v66[1];
  v69 = v65[1];
  *v65 = v68;
  v65[1] = v67;
  swift_bridgeObjectRelease(v69);
  v70 = a3[19];
  v71 = (_QWORD *)(a1 + v70);
  v72 = (uint64_t *)(a2 + v70);
  v74 = *v72;
  v73 = v72[1];
  v75 = v71[1];
  *v71 = v74;
  v71[1] = v73;
  swift_bridgeObjectRelease(v75);
  v76 = a3[20];
  v77 = (_QWORD *)(a1 + v76);
  v78 = (uint64_t *)(a2 + v76);
  v80 = *v78;
  v79 = v78[1];
  v81 = v77[1];
  *v77 = v80;
  v77[1] = v79;
  swift_bridgeObjectRelease(v81);
  v82 = a3[21];
  v83 = (_QWORD *)(a1 + v82);
  v84 = (uint64_t *)(a2 + v82);
  v86 = *v84;
  v85 = v84[1];
  v87 = v83[1];
  *v83 = v86;
  v83[1] = v85;
  swift_bridgeObjectRelease(v87);
  v88 = a3[22];
  v89 = (_QWORD *)(a1 + v88);
  v90 = (uint64_t *)(a2 + v88);
  v92 = *v90;
  v91 = v90[1];
  v93 = v89[1];
  *v89 = v92;
  v89[1] = v91;
  swift_bridgeObjectRelease(v93);
  v94 = a3[23];
  v95 = (_QWORD *)(a1 + v94);
  v96 = (uint64_t *)(a2 + v94);
  v98 = *v96;
  v97 = v96[1];
  v99 = v95[1];
  *v95 = v98;
  v95[1] = v97;
  swift_bridgeObjectRelease(v99);
  v100 = a3[24];
  v101 = (_QWORD *)(a1 + v100);
  v102 = (uint64_t *)(a2 + v100);
  v104 = *v102;
  v103 = v102[1];
  v105 = v101[1];
  *v101 = v104;
  v101[1] = v103;
  swift_bridgeObjectRelease(v105);
  v106 = a3[25];
  v107 = (_QWORD *)(a1 + v106);
  v108 = (uint64_t *)(a2 + v106);
  v110 = *v108;
  v109 = v108[1];
  v111 = v107[1];
  *v107 = v110;
  v107[1] = v109;
  swift_bridgeObjectRelease(v111);
  v112 = a3[26];
  v113 = (_QWORD *)(a1 + v112);
  v114 = (uint64_t *)(a2 + v112);
  v116 = *v114;
  v115 = v114[1];
  v117 = v113[1];
  *v113 = v116;
  v113[1] = v115;
  swift_bridgeObjectRelease(v117);
  v118 = a3[27];
  v119 = (_QWORD *)(a1 + v118);
  v120 = (uint64_t *)(a2 + v118);
  v122 = *v120;
  v121 = v120[1];
  v123 = v119[1];
  *v119 = v122;
  v119[1] = v121;
  swift_bridgeObjectRelease(v123);
  v124 = a3[28];
  v125 = (_QWORD *)(a1 + v124);
  v126 = (uint64_t *)(a2 + v124);
  v128 = *v126;
  v127 = v126[1];
  v129 = v125[1];
  *v125 = v128;
  v125[1] = v127;
  swift_bridgeObjectRelease(v129);
  v130 = a3[29];
  v131 = (_QWORD *)(a1 + v130);
  v132 = (uint64_t *)(a2 + v130);
  v134 = *v132;
  v133 = v132[1];
  v135 = v131[1];
  *v131 = v134;
  v131[1] = v133;
  swift_bridgeObjectRelease(v135);
  v136 = a3[30];
  v137 = a1 + v136;
  v138 = a2 + v136;
  v139 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v139 - 8) + 40))(v137, v138, v139);
  return a1;
}

uint64_t sub_1000D3C48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000D3C54);
}

uint64_t sub_1000D3C54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  unint64_t v11;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    v8 = type metadata accessor for Date(0);
    v10 = a1 + *(int *)(a3 + 120);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
    return v9(v10, a2, v8);
  }
  v11 = *(_QWORD *)(a1 + *(int *)(a3 + 24) + 8);
  if (v11 >= 0xFFFFFFFF)
    LODWORD(v11) = -1;
  return (v11 + 1);
}

uint64_t sub_1000D3D00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000D3D0C);
}

uint64_t sub_1000D3D0C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  result = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(_QWORD *)(a1 + *(int *)(a4 + 24) + 8) = (a2 - 1);
      return result;
    }
    v10 = type metadata accessor for Date(0);
    v12 = a1 + *(int *)(a4 + 120);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t sub_1000D3DB4(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[27];

  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v5[0] = *(_QWORD *)(result - 8) + 64;
    v5[1] = &unk_100186650;
    v5[2] = &unk_100186668;
    v5[3] = &unk_100186650;
    v5[4] = &unk_100186650;
    v5[5] = &unk_100186650;
    v5[6] = &unk_100186650;
    v5[7] = &unk_100186650;
    v5[8] = &unk_100186650;
    v5[9] = &unk_100186668;
    v5[10] = &unk_100186668;
    v5[11] = &unk_100186668;
    v5[12] = &unk_100186668;
    v5[13] = &unk_100186668;
    v5[14] = &unk_100186668;
    v5[15] = &unk_100186668;
    v5[16] = &unk_100186668;
    v5[17] = &unk_100186668;
    v5[18] = &unk_100186668;
    v5[19] = &unk_100186668;
    v5[20] = &unk_100186668;
    v5[21] = &unk_100186668;
    v5[22] = &unk_100186668;
    v5[23] = &unk_100186668;
    v5[24] = &unk_100186668;
    v5[25] = &unk_100186668;
    result = type metadata accessor for Date(319);
    if (v4 <= 0x3F)
    {
      v5[26] = *(_QWORD *)(result - 8) + 64;
      swift_initStructMetadata(a1, 256, 27, v5, a1 + 16);
      return 0;
    }
  }
  return result;
}

uint64_t sub_1000D3E78(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_1000A0940(&qword_1002121E0, type metadata accessor for MagicPairingSettingsRecord, (uint64_t)&unk_100186824);
  result = sub_1000A0940(&qword_100210E70, type metadata accessor for MagicPairingSettingsRecord, (uint64_t)&unk_1001867FC);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t sub_1000D3ED4()
{
  return sub_1000A0940(&qword_100210E78, type metadata accessor for MagicPairingSettingsRecord, (uint64_t)&unk_100186680);
}

unint64_t sub_1000D3F04()
{
  unint64_t result;

  result = qword_100210E80;
  if (!qword_100210E80)
  {
    result = swift_getWitnessTable(&unk_100186794, &type metadata for MagicPairingSettingsRecord.MagicSettingsRecordError);
    atomic_store(result, (unint64_t *)&qword_100210E80);
  }
  return result;
}

uint64_t sub_1000D3F48(uint64_t a1)
{
  uint64_t result;

  result = sub_1000A0940(&qword_100210E88, type metadata accessor for MagicPairingSettingsRecord, (uint64_t)&unk_1001866A8);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1000D3F84()
{
  unint64_t result;

  result = qword_100210E98;
  if (!qword_100210E98)
  {
    result = swift_getWitnessTable(&unk_10018692C, &type metadata for MagicPairingSettingsRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100210E98);
  }
  return result;
}

uint64_t sub_1000D3FC8(uint64_t a1, uint64_t a2)
{
  int *v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  BOOL v11;
  char v12;
  char v13;
  char v14;
  char v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  uint64_t v102;

  if ((static UUID.== infix(_:_:)(a1) & 1) == 0)
    return 0;
  v4 = (int *)type metadata accessor for MagicPairingSettingsRecord(0);
  sub_1000D25EC(*(_QWORD *)(a1 + v4[5]), *(_QWORD *)(a1 + v4[5] + 8));
  if ((v5 & 1) == 0)
    return 0;
  v6 = v4[6];
  v7 = *(_QWORD *)(a1 + v6);
  v8 = *(_QWORD *)(a1 + v6 + 8);
  v9 = (_QWORD *)(a2 + v6);
  v10 = v9[1];
  v11 = v7 == *v9 && v8 == v10;
  if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)(v7, v8, *v9, v10, 0) & 1) == 0)
    return 0;
  sub_1000D25EC(*(_QWORD *)(a1 + v4[7]), *(_QWORD *)(a1 + v4[7] + 8));
  if ((v12 & 1) == 0)
    return 0;
  sub_1000D25EC(*(_QWORD *)(a1 + v4[8]), *(_QWORD *)(a1 + v4[8] + 8));
  if ((v13 & 1) == 0)
    return 0;
  sub_1000D25EC(*(_QWORD *)(a1 + v4[9]), *(_QWORD *)(a1 + v4[9] + 8));
  if ((v14 & 1) == 0)
    return 0;
  sub_1000D25EC(*(_QWORD *)(a1 + v4[10]), *(_QWORD *)(a1 + v4[10] + 8));
  if ((v15 & 1) == 0)
    return 0;
  sub_1000D25EC(*(_QWORD *)(a1 + v4[11]), *(_QWORD *)(a1 + v4[11] + 8));
  if ((v16 & 1) == 0)
    return 0;
  sub_1000D25EC(*(_QWORD *)(a1 + v4[12]), *(_QWORD *)(a1 + v4[12] + 8));
  if ((v17 & 1) == 0)
    return 0;
  v18 = v4[13];
  v19 = *(_QWORD *)(a1 + v18);
  v20 = *(_QWORD *)(a1 + v18 + 8);
  v21 = (_QWORD *)(a2 + v18);
  v22 = v21[1];
  if ((v19 != *v21 || v20 != v22) && (_stringCompareWithSmolCheck(_:_:expecting:)(v19, v20, *v21, v22, 0) & 1) == 0)
    return 0;
  v23 = v4[14];
  v24 = *(_QWORD *)(a1 + v23);
  v25 = *(_QWORD *)(a1 + v23 + 8);
  v26 = (_QWORD *)(a2 + v23);
  v27 = v26[1];
  if ((v24 != *v26 || v25 != v27) && (_stringCompareWithSmolCheck(_:_:expecting:)(v24, v25, *v26, v27, 0) & 1) == 0)
    return 0;
  v28 = v4[15];
  v29 = *(_QWORD *)(a1 + v28);
  v30 = *(_QWORD *)(a1 + v28 + 8);
  v31 = (_QWORD *)(a2 + v28);
  v32 = v31[1];
  if ((v29 != *v31 || v30 != v32) && (_stringCompareWithSmolCheck(_:_:expecting:)(v29, v30, *v31, v32, 0) & 1) == 0)
    return 0;
  v33 = v4[16];
  v34 = *(_QWORD *)(a1 + v33);
  v35 = *(_QWORD *)(a1 + v33 + 8);
  v36 = (_QWORD *)(a2 + v33);
  v37 = v36[1];
  if ((v34 != *v36 || v35 != v37) && (_stringCompareWithSmolCheck(_:_:expecting:)(v34, v35, *v36, v37, 0) & 1) == 0)
    return 0;
  v38 = v4[17];
  v39 = *(_QWORD *)(a1 + v38);
  v40 = *(_QWORD *)(a1 + v38 + 8);
  v41 = (_QWORD *)(a2 + v38);
  v42 = v41[1];
  if ((v39 != *v41 || v40 != v42) && (_stringCompareWithSmolCheck(_:_:expecting:)(v39, v40, *v41, v42, 0) & 1) == 0)
    return 0;
  v43 = v4[18];
  v44 = *(_QWORD *)(a1 + v43);
  v45 = *(_QWORD *)(a1 + v43 + 8);
  v46 = (_QWORD *)(a2 + v43);
  v47 = v46[1];
  if ((v44 != *v46 || v45 != v47) && (_stringCompareWithSmolCheck(_:_:expecting:)(v44, v45, *v46, v47, 0) & 1) == 0)
    return 0;
  v48 = v4[19];
  v49 = *(_QWORD *)(a1 + v48);
  v50 = *(_QWORD *)(a1 + v48 + 8);
  v51 = (_QWORD *)(a2 + v48);
  v52 = v51[1];
  if ((v49 != *v51 || v50 != v52) && (_stringCompareWithSmolCheck(_:_:expecting:)(v49, v50, *v51, v52, 0) & 1) == 0)
    return 0;
  v53 = v4[20];
  v54 = *(_QWORD *)(a1 + v53);
  v55 = *(_QWORD *)(a1 + v53 + 8);
  v56 = (_QWORD *)(a2 + v53);
  v57 = v56[1];
  if ((v54 != *v56 || v55 != v57) && (_stringCompareWithSmolCheck(_:_:expecting:)(v54, v55, *v56, v57, 0) & 1) == 0)
    return 0;
  v58 = v4[21];
  v59 = *(_QWORD *)(a1 + v58);
  v60 = *(_QWORD *)(a1 + v58 + 8);
  v61 = (_QWORD *)(a2 + v58);
  v62 = v61[1];
  if ((v59 != *v61 || v60 != v62) && (_stringCompareWithSmolCheck(_:_:expecting:)(v59, v60, *v61, v62, 0) & 1) == 0)
    return 0;
  v63 = v4[22];
  v64 = *(_QWORD *)(a1 + v63);
  v65 = *(_QWORD *)(a1 + v63 + 8);
  v66 = (_QWORD *)(a2 + v63);
  v67 = v66[1];
  if ((v64 != *v66 || v65 != v67) && (_stringCompareWithSmolCheck(_:_:expecting:)(v64, v65, *v66, v67, 0) & 1) == 0)
    return 0;
  v68 = v4[23];
  v69 = *(_QWORD *)(a1 + v68);
  v70 = *(_QWORD *)(a1 + v68 + 8);
  v71 = (_QWORD *)(a2 + v68);
  v72 = v71[1];
  if ((v69 != *v71 || v70 != v72) && (_stringCompareWithSmolCheck(_:_:expecting:)(v69, v70, *v71, v72, 0) & 1) == 0)
    return 0;
  v73 = v4[24];
  v74 = *(_QWORD *)(a1 + v73);
  v75 = *(_QWORD *)(a1 + v73 + 8);
  v76 = (_QWORD *)(a2 + v73);
  v77 = v76[1];
  if ((v74 != *v76 || v75 != v77) && (_stringCompareWithSmolCheck(_:_:expecting:)(v74, v75, *v76, v77, 0) & 1) == 0)
    return 0;
  v78 = v4[25];
  v79 = *(_QWORD *)(a1 + v78);
  v80 = *(_QWORD *)(a1 + v78 + 8);
  v81 = (_QWORD *)(a2 + v78);
  v82 = v81[1];
  if ((v79 != *v81 || v80 != v82) && (_stringCompareWithSmolCheck(_:_:expecting:)(v79, v80, *v81, v82, 0) & 1) == 0)
    return 0;
  v83 = v4[26];
  v84 = *(_QWORD *)(a1 + v83);
  v85 = *(_QWORD *)(a1 + v83 + 8);
  v86 = (_QWORD *)(a2 + v83);
  v87 = v86[1];
  if ((v84 != *v86 || v85 != v87) && (_stringCompareWithSmolCheck(_:_:expecting:)(v84, v85, *v86, v87, 0) & 1) == 0)
    return 0;
  v88 = v4[27];
  v89 = *(_QWORD *)(a1 + v88);
  v90 = *(_QWORD *)(a1 + v88 + 8);
  v91 = (_QWORD *)(a2 + v88);
  v92 = v91[1];
  if ((v89 != *v91 || v90 != v92) && (_stringCompareWithSmolCheck(_:_:expecting:)(v89, v90, *v91, v92, 0) & 1) == 0)
    return 0;
  v93 = v4[28];
  v94 = *(_QWORD *)(a1 + v93);
  v95 = *(_QWORD *)(a1 + v93 + 8);
  v96 = (_QWORD *)(a2 + v93);
  v97 = v96[1];
  if ((v94 != *v96 || v95 != v97) && (_stringCompareWithSmolCheck(_:_:expecting:)(v94, v95, *v96, v97, 0) & 1) == 0)
    return 0;
  v98 = v4[29];
  v99 = *(_QWORD *)(a1 + v98);
  v100 = *(_QWORD *)(a1 + v98 + 8);
  v101 = (_QWORD *)(a2 + v98);
  v102 = v101[1];
  if (v99 == *v101 && v100 == v102)
    return static Date.== infix(_:_:)(a1 + v4[30], a2 + v4[30]);
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(v99, v100, *v101, v102, 0) & 1) != 0)
    return static Date.== infix(_:_:)(a1 + v4[30], a2 + v4[30]);
  else
    return 0;
}

uint64_t getEnumTagSinglePayload for MagicPairingSettingsRecord.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xE6)
    goto LABEL_17;
  if (a2 + 26 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 26) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 26;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 26;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 26;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x1B;
  v8 = v6 - 27;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for MagicPairingSettingsRecord.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 26 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 26) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xE6)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xE5)
    return ((uint64_t (*)(void))((char *)&loc_1000D4520 + 4 * byte_1001865FA[v4]))();
  *a1 = a2 + 26;
  return ((uint64_t (*)(void))((char *)sub_1000D4554 + 4 * byte_1001865F5[v4]))();
}

uint64_t sub_1000D4554(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000D455C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000D4564);
  return result;
}

uint64_t sub_1000D4570(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000D4578);
  *(_BYTE *)result = a2 + 26;
  return result;
}

uint64_t sub_1000D457C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000D4584(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MagicPairingSettingsRecord.CodingKeys()
{
  return &type metadata for MagicPairingSettingsRecord.CodingKeys;
}

unint64_t sub_1000D45A4()
{
  unint64_t result;

  result = qword_100210EC8;
  if (!qword_100210EC8)
  {
    result = swift_getWitnessTable(&unk_100186904, &type metadata for MagicPairingSettingsRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100210EC8);
  }
  return result;
}

unint64_t sub_1000D45EC()
{
  unint64_t result;

  result = qword_100210ED0;
  if (!qword_100210ED0)
  {
    result = swift_getWitnessTable(&unk_100186874, &type metadata for MagicPairingSettingsRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100210ED0);
  }
  return result;
}

unint64_t sub_1000D4634()
{
  unint64_t result;

  result = qword_100210ED8;
  if (!qword_100210ED8)
  {
    result = swift_getWitnessTable(&unk_10018689C, &type metadata for MagicPairingSettingsRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100210ED8);
  }
  return result;
}

uint64_t sub_1000D4678(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;

  if (a1 == 0x696669746E656469 && a2 == 0xEA00000000007265)
  {
    v5 = 0xEA00000000007265;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x696669746E656469, 0xEA00000000007265, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x74654D64756F6C63 && a2 == 0xED00006174616461)
  {
    v7 = 0xED00006174616461;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x74654D64756F6C63, 0xED00006174616461, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0xD000000000000010)
  {
    v8 = 0x80000001001AA8D0;
    if (a2 == 0x80000001001AA8D0)
      goto LABEL_19;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x80000001001AA8D0, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
LABEL_19:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if (a1 == 0x654B72657473616DLL && a2 == 0xE900000000000079)
  {
    v9 = 0xE900000000000079;
LABEL_25:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x654B72657473616DLL, 0xE900000000000079, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_25;
  }
  if (a1 == 0x694872657473616DLL && a2 == 0xEA0000000000746ELL)
  {
    v10 = 0xEA0000000000746ELL;
LABEL_31:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x694872657473616DLL, 0xEA0000000000746ELL, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_31;
  }
  if (a1 == 0x726F737365636361 && a2 == 0xEC00000079654B79)
  {
    v11 = 0xEC00000079654B79;
LABEL_37:
    swift_bridgeObjectRelease(v11);
    return 5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x726F737365636361, 0xEC00000079654B79, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
    goto LABEL_37;
  }
  if (a1 == 0x726F737365636361 && a2 == 0xED0000746E694879)
  {
    v12 = 0xED0000746E694879;
LABEL_43:
    swift_bridgeObjectRelease(v12);
    return 6;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x726F737365636361, 0xED0000746E694879, a1, a2, 0) & 1) != 0)
  {
    v12 = a2;
    goto LABEL_43;
  }
  if (a1 == 7041641 && a2 == 0xE300000000000000)
  {
    v13 = 0xE300000000000000;
LABEL_49:
    swift_bridgeObjectRelease(v13);
    return 7;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(7041641, 0xE300000000000000, a1, a2, 0) & 1) != 0)
  {
    v13 = a2;
    goto LABEL_49;
  }
  if (a1 == 0x6974707972636E65 && a2 == 0xED000079654B6E6FLL)
  {
    v14 = 0xED000079654B6E6FLL;
LABEL_55:
    swift_bridgeObjectRelease(v14);
    return 8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6974707972636E65, 0xED000079654B6E6FLL, a1, a2, 0) & 1) != 0)
  {
    v14 = a2;
    goto LABEL_55;
  }
  if (a1 == 0x49746375646F7270 && a2 == 0xE900000000000044)
  {
    v15 = 0xE900000000000044;
LABEL_61:
    swift_bridgeObjectRelease(v15);
    return 9;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x49746375646F7270, 0xE900000000000044, a1, a2, 0) & 1) != 0)
  {
    v15 = a2;
    goto LABEL_61;
  }
  if (a1 == 0x4449726F646E6576 && a2 == 0xE800000000000000)
  {
    v16 = 0xE800000000000000;
LABEL_67:
    swift_bridgeObjectRelease(v16);
    return 10;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x4449726F646E6576, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v16 = a2;
    goto LABEL_67;
  }
  if (a1 == 0x6F4D6E6F74747562 && a2 == 0xEB00000000736564)
  {
    v17 = 0xEB00000000736564;
LABEL_73:
    swift_bridgeObjectRelease(v17);
    return 11;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6F4D6E6F74747562, 0xEB00000000736564, a1, a2, 0) & 1) != 0)
  {
    v17 = a2;
    goto LABEL_73;
  }
  if (a1 == 0x726F6C6F63 && a2 == 0xE500000000000000)
  {
    v18 = 0xE500000000000000;
LABEL_79:
    swift_bridgeObjectRelease(v18);
    return 12;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x726F6C6F63, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v18 = a2;
    goto LABEL_79;
  }
  if (a1 == 0xD000000000000015)
  {
    v19 = 0x80000001001ACBE0;
    if (a2 == 0x80000001001ACBE0)
      goto LABEL_84;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000015, 0x80000001001ACBE0, a1, a2, 0) & 1) != 0)
  {
    v19 = a2;
LABEL_84:
    swift_bridgeObjectRelease(v19);
    return 13;
  }
  if (a1 == 0xD000000000000015)
  {
    v20 = 0x80000001001ACC00;
    if (a2 == 0x80000001001ACC00)
      goto LABEL_89;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000015, 0x80000001001ACC00, a1, a2, 0) & 1) != 0)
  {
    v20 = a2;
LABEL_89:
    swift_bridgeObjectRelease(v20);
    return 14;
  }
  if (a1 == 0xD000000000000011)
  {
    v21 = 0x80000001001ACC20;
    if (a2 == 0x80000001001ACC20)
      goto LABEL_94;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x80000001001ACC20, a1, a2, 0) & 1) != 0)
  {
    v21 = a2;
LABEL_94:
    swift_bridgeObjectRelease(v21);
    return 15;
  }
  if (a1 == 0xD000000000000013 && a2 == 0x80000001001ACC40)
  {
    v22 = 0x80000001001ACC40;
LABEL_100:
    swift_bridgeObjectRelease(v22);
    return 16;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013, 0x80000001001ACC40, a1, a2, 0) & 1) != 0)
  {
    v22 = a2;
    goto LABEL_100;
  }
  if (a1 == 0x416C616974617073 && a2 == 0xEC0000006F696475)
  {
    v23 = 0xEC0000006F696475;
LABEL_106:
    swift_bridgeObjectRelease(v23);
    return 17;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x416C616974617073, 0xEC0000006F696475, a1, a2, 0) & 1) != 0)
  {
    v23 = a2;
    goto LABEL_106;
  }
  if (a1 == 0xD000000000000018 && a2 == 0x80000001001ACC60)
  {
    v24 = 0x80000001001ACC60;
LABEL_112:
    swift_bridgeObjectRelease(v24);
    return 18;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000018, 0x80000001001ACC60, a1, a2, 0) & 1) != 0)
  {
    v24 = a2;
    goto LABEL_112;
  }
  if (a1 == 0xD000000000000022 && a2 == 0x80000001001ACC80)
  {
    v25 = 0x80000001001ACC80;
LABEL_118:
    swift_bridgeObjectRelease(v25);
    return 19;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000022, 0x80000001001ACC80, a1, a2, 0) & 1) != 0)
  {
    v25 = a2;
    goto LABEL_118;
  }
  if (a1 == 0x74656863746172 && a2 == 0xE700000000000000)
  {
    v26 = 0xE700000000000000;
LABEL_124:
    swift_bridgeObjectRelease(v26);
    return 20;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x74656863746172, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v26 = a2;
    goto LABEL_124;
  }
  if (a1 == 0x6465767265736572 && a2 == 0xE800000000000000)
  {
    v27 = 0xE800000000000000;
LABEL_130:
    swift_bridgeObjectRelease(v27);
    return 21;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6465767265736572, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v27 = a2;
    goto LABEL_130;
  }
  if (a1 == 0x73676E6974746573 && a2 == 0xEC0000006B73614DLL)
  {
    v28 = 0xEC0000006B73614DLL;
LABEL_136:
    swift_bridgeObjectRelease(v28);
    return 22;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x73676E6974746573, 0xEC0000006B73614DLL, a1, a2, 0) & 1) != 0)
  {
    v28 = a2;
    goto LABEL_136;
  }
  if (a1 == 0xD000000000000011)
  {
    v29 = 0x80000001001ACCB0;
    if (a2 == 0x80000001001ACCB0)
      goto LABEL_141;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x80000001001ACCB0, a1, a2, 0) & 1) != 0)
  {
    v29 = a2;
LABEL_141:
    swift_bridgeObjectRelease(v29);
    return 23;
  }
  if (a1 == 0x6E6F6973726576 && a2 == 0xE700000000000000)
  {
    v30 = 0xE700000000000000;
LABEL_147:
    swift_bridgeObjectRelease(v30);
    return 24;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F6973726576, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v30 = a2;
    goto LABEL_147;
  }
  if (a1 == 0x6552746E65726170 && a2 == 0xEC00000064726F63)
  {
    v31 = 0xEC00000064726F63;
LABEL_153:
    swift_bridgeObjectRelease(v31);
    return 25;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6552746E65726170, 0xEC00000064726F63, a1, a2, 0) & 1) != 0)
  {
    v31 = a2;
    goto LABEL_153;
  }
  if (a1 == 0xD000000000000010 && a2 == 0x80000001001AAA20)
  {
    swift_bridgeObjectRelease(0x80000001001AAA20);
    return 26;
  }
  else
  {
    v32 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x80000001001AAA20, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v32 & 1) != 0)
      return 26;
    else
      return 27;
  }
}

uint64_t sub_1000D5188()
{
  uint64_t result;
  uint64_t v1[10];
  _OWORD v2[5];

  sub_1000D5C64(0x3030304130, 0xE500000000000000, v1);
  result = sub_1000D5F2C((uint64_t)v1, (uint64_t)v2, &qword_100210EF8);
  if (*((_QWORD *)&v2[0] + 1))
  {
    xmmword_100218CC8 = v2[2];
    *(_OWORD *)&byte_100218CD8 = v2[3];
    xmmword_100218CE8 = v2[4];
    xmmword_100218CA8 = v2[0];
    *(_OWORD *)&qword_100218CB8 = v2[1];
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000D51F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4[10];

  sub_1000D5C64(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), v4);
  return sub_1000D5F2C((uint64_t)v4, a2, &qword_100210EF8);
}

uint64_t sub_1000D5240@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;

  v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  return swift_bridgeObjectRetain(v2);
}

uint64_t sub_1000D524C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1000D62D8();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1000D52A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1000D62D8();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_1000D52F8@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t result;
  __int128 v4;
  __int128 v5;
  uint64_t v6[10];
  _OWORD v7[5];

  sub_1000D5C64(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), v6);
  result = sub_1000D5F2C((uint64_t)v6, (uint64_t)v7, &qword_100210EF8);
  if (*((_QWORD *)&v7[0] + 1))
  {
    v4 = v7[3];
    a2[2] = v7[2];
    a2[3] = v4;
    a2[4] = v7[4];
    v5 = v7[1];
    *a2 = v7[0];
    a2[1] = v5;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000D5364(_OWORD *a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  _OWORD v8[5];
  _OWORD v9[5];

  v2 = a1[3];
  v8[2] = a1[2];
  v8[3] = v2;
  v3 = a1[4];
  v4 = a1[1];
  v8[0] = *a1;
  v8[1] = v4;
  v5 = a2[3];
  v9[2] = a2[2];
  v9[3] = v5;
  v9[4] = a2[4];
  v6 = *a2;
  v9[1] = a2[1];
  v8[4] = v3;
  v9[0] = v6;
  return sub_1000D5B20(v8, v9) & 1;
}

BOOL sub_1000D53BC(_OWORD *a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  _OWORD v8[5];
  _OWORD v9[5];

  v2 = a1[3];
  v8[2] = a1[2];
  v8[3] = v2;
  v3 = a1[4];
  v4 = a1[1];
  v8[0] = *a1;
  v8[1] = v4;
  v5 = a2[3];
  v9[2] = a2[2];
  v9[3] = v5;
  v9[4] = a2[4];
  v6 = *a2;
  v9[1] = a2[1];
  v8[4] = v3;
  v9[0] = v6;
  return sub_1000D5414(v8, v9);
}

BOOL sub_1000D5414(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char v20;

  v2 = a2[2];
  v3 = a1[2];
  v4 = v2 < v3;
  if (v2 == v3)
  {
    v7 = a2[3];
    v8 = a2[4];
    v9 = a1[3];
    v10 = a1[4];
    v11 = v7 == v9 && v8 == v10;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)(a2[3], a2[4], v9, v10, 0) & 1) == 0)
    {
      v20 = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v8, v9, v10, 1);
      return (v20 & 1) == 0;
    }
    v12 = a2[7];
    v13 = a1[7];
    v4 = v12 < v13;
    if (v12 == v13)
    {
      v14 = a2[9];
      if (v14)
      {
        v15 = a2[8];
        v16 = a2[9];
        v17 = a1[9];
        if (v17)
          goto LABEL_10;
      }
      else
      {
        v15 = 0;
        v16 = 0xE000000000000000;
        v17 = a1[9];
        if (v17)
        {
LABEL_10:
          v18 = a1[8];
          v19 = v17;
          if (v15 != v18)
            goto LABEL_20;
LABEL_18:
          if (v16 == v19)
          {
            v20 = 0;
LABEL_21:
            swift_bridgeObjectRetain(v17);
            swift_bridgeObjectRetain(v14);
            swift_bridgeObjectRelease(v16);
            swift_bridgeObjectRelease(v19);
            return (v20 & 1) == 0;
          }
LABEL_20:
          v20 = _stringCompareWithSmolCheck(_:_:expecting:)(v15, v16, v18, v19, 1);
          goto LABEL_21;
        }
      }
      v18 = 0;
      v19 = 0xE000000000000000;
      if (v15)
        goto LABEL_20;
      goto LABEL_18;
    }
  }
  v20 = v4;
  return (v20 & 1) == 0;
}

BOOL sub_1000D5554(_OWORD *a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  _OWORD v8[5];
  _OWORD v9[5];

  v2 = a1[3];
  v8[2] = a1[2];
  v8[3] = v2;
  v3 = a1[4];
  v4 = a1[1];
  v8[0] = *a1;
  v8[1] = v4;
  v5 = a2[3];
  v9[2] = a2[2];
  v9[3] = v5;
  v9[4] = a2[4];
  v6 = *a2;
  v9[1] = a2[1];
  v8[4] = v3;
  v9[0] = v6;
  return sub_1000D55AC(v8, v9);
}

BOOL sub_1000D55AC(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char v20;

  v2 = a1[2];
  v3 = a2[2];
  v4 = v2 < v3;
  if (v2 == v3)
  {
    v7 = a1[3];
    v8 = a1[4];
    v9 = a2[3];
    v10 = a2[4];
    v11 = v7 == v9 && v8 == v10;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)(a1[3], v8, v9, v10, 0) & 1) == 0)
    {
      v20 = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v8, v9, v10, 1);
      return (v20 & 1) == 0;
    }
    v12 = a1[7];
    v13 = a2[7];
    v4 = v12 < v13;
    if (v12 == v13)
    {
      v14 = a1[9];
      if (v14)
      {
        v15 = a1[8];
        v16 = a1[9];
        v17 = a2[9];
        if (v17)
          goto LABEL_10;
      }
      else
      {
        v15 = 0;
        v16 = 0xE000000000000000;
        v17 = a2[9];
        if (v17)
        {
LABEL_10:
          v18 = a2[8];
          v19 = v17;
          if (v15 != v18)
            goto LABEL_20;
LABEL_18:
          if (v16 == v19)
          {
            v20 = 0;
LABEL_21:
            swift_bridgeObjectRetain(v17);
            swift_bridgeObjectRetain(v14);
            swift_bridgeObjectRelease(v16);
            swift_bridgeObjectRelease(v19);
            return (v20 & 1) == 0;
          }
LABEL_20:
          v20 = _stringCompareWithSmolCheck(_:_:expecting:)(v15, v16, v18, v19, 1);
          goto LABEL_21;
        }
      }
      v18 = 0;
      v19 = 0xE000000000000000;
      if (v15)
        goto LABEL_20;
      goto LABEL_18;
    }
  }
  v20 = v4;
  return (v20 & 1) == 0;
}

uint64_t sub_1000D56EC(_OWORD *a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  _OWORD v8[5];
  _OWORD v9[5];

  v2 = a1[3];
  v8[2] = a1[2];
  v8[3] = v2;
  v3 = a1[4];
  v4 = a1[1];
  v8[0] = *a1;
  v8[1] = v4;
  v5 = a2[3];
  v9[2] = a2[2];
  v9[3] = v5;
  v9[4] = a2[4];
  v6 = *a2;
  v9[1] = a2[1];
  v8[4] = v3;
  v9[0] = v6;
  return sub_1000D5744(v8, v9) & 1;
}

uint64_t sub_1000D5744(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char v20;

  v2 = a2[2];
  v3 = a1[2];
  v4 = v2 < v3;
  if (v2 != v3)
    goto LABEL_12;
  v7 = a2[3];
  v8 = a2[4];
  v9 = a1[3];
  v10 = a1[4];
  v11 = v7 == v9 && v8 == v10;
  if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)(a2[3], a2[4], v9, v10, 0) & 1) == 0)
    return _stringCompareWithSmolCheck(_:_:expecting:)(v7, v8, v9, v10, 1);
  v12 = a2[7];
  v13 = a1[7];
  v4 = v12 < v13;
  if (v12 != v13)
  {
LABEL_12:
    v20 = v4;
    return v20 & 1;
  }
  v14 = a2[9];
  if (v14)
  {
    v15 = a2[8];
    v16 = a2[9];
    v17 = a1[9];
    if (v17)
      goto LABEL_10;
  }
  else
  {
    v15 = 0;
    v16 = 0xE000000000000000;
    v17 = a1[9];
    if (v17)
    {
LABEL_10:
      v18 = a1[8];
      v19 = v17;
      if (v15 != v18)
        goto LABEL_20;
      goto LABEL_18;
    }
  }
  v18 = 0;
  v19 = 0xE000000000000000;
  if (v15)
  {
LABEL_20:
    v20 = _stringCompareWithSmolCheck(_:_:expecting:)(v15, v16, v18, v19, 1);
    goto LABEL_21;
  }
LABEL_18:
  if (v16 != v19)
    goto LABEL_20;
  v20 = 0;
LABEL_21:
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v16);
  swift_bridgeObjectRelease(v19);
  return v20 & 1;
}

uint64_t sub_1000D5888(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *a1;
  v5 = a1[1];
  v6 = a2[1];
  if (v4 == *a2 && v5 == v6)
    return 1;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *a2, v6, 0);
}

uint64_t sub_1000D58B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  Swift::String v7;
  void *object;
  uint64_t v9;
  uint64_t v10;
  Swift::String v11;
  Swift::String v12;
  void *v13;
  Swift::String v14;
  uint64_t v16;
  unint64_t v17;
  _BYTE v18[16];
  _BYTE v19[16];
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;

  v1 = v0;
  sub_1000D5F2C(v0 + 40, (uint64_t)v19, &qword_100210EE8);
  sub_1000D5F2C((uint64_t)v19, (uint64_t)&v20, &qword_100210EE8);
  if ((v21 & 1) != 0)
  {
    v2 = 0;
    v3 = (void *)0xE000000000000000;
  }
  else
  {
    v22 = v20;
    v2 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    v3 = v4;
  }
  sub_1000D5F2C(v0 + 64, (uint64_t)v18, &qword_100210EF0);
  sub_1000D5F2C((uint64_t)v18, (uint64_t)&v22, &qword_100210EF0);
  if (v23)
  {
    v16 = 0;
    v17 = 0xE000000000000000;
    Character.write<A>(to:)(&v16, v22, v23, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    v6 = v16;
    v5 = (void *)v17;
  }
  else
  {
    v6 = 0;
    v5 = (void *)0xE000000000000000;
  }
  v16 = 0;
  v17 = 0xE000000000000000;
  v7._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  object = v7._object;
  String.append(_:)(v7);
  swift_bridgeObjectRelease(object);
  v9 = *(_QWORD *)(v0 + 24);
  v10 = *(_QWORD *)(v1 + 32);
  swift_bridgeObjectRetain(v10);
  Character.write<A>(to:)(&v16, v9, v10, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  swift_bridgeObjectRelease(v10);
  v11._countAndFlagsBits = v2;
  v11._object = v3;
  String.append(_:)(v11);
  swift_bridgeObjectRelease(v3);
  v12._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  v13 = v12._object;
  String.append(_:)(v12);
  swift_bridgeObjectRelease(v13);
  v14._countAndFlagsBits = v6;
  v14._object = v5;
  String.append(_:)(v14);
  swift_bridgeObjectRelease(v5);
  return v16;
}

uint64_t sub_1000D5A98()
{
  return sub_1000D58B8();
}

unint64_t sub_1000D5ADC()
{
  unint64_t result;

  result = qword_100210EE0;
  if (!qword_100210EE0)
  {
    result = swift_getWitnessTable(&unk_1001869A8, &type metadata for SystemVersionNumber);
    atomic_store(result, (unint64_t *)&qword_100210EE0);
  }
  return result;
}

uint64_t sub_1000D5B20(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char v20;

  v2 = a1[2];
  v3 = a2[2];
  v4 = v2 < v3;
  if (v2 != v3)
    goto LABEL_12;
  v7 = a1[3];
  v8 = a1[4];
  v9 = a2[3];
  v10 = a2[4];
  v11 = v7 == v9 && v8 == v10;
  if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)(a1[3], v8, v9, v10, 0) & 1) == 0)
    return _stringCompareWithSmolCheck(_:_:expecting:)(v7, v8, v9, v10, 1);
  v12 = a1[7];
  v13 = a2[7];
  v4 = v12 < v13;
  if (v12 != v13)
  {
LABEL_12:
    v20 = v4;
    return v20 & 1;
  }
  v14 = a1[9];
  if (v14)
  {
    v15 = a1[8];
    v16 = a1[9];
    v17 = a2[9];
    if (v17)
      goto LABEL_10;
  }
  else
  {
    v15 = 0;
    v16 = 0xE000000000000000;
    v17 = a2[9];
    if (v17)
    {
LABEL_10:
      v18 = a2[8];
      v19 = v17;
      if (v15 != v18)
        goto LABEL_20;
      goto LABEL_18;
    }
  }
  v18 = 0;
  v19 = 0xE000000000000000;
  if (v15)
  {
LABEL_20:
    v20 = _stringCompareWithSmolCheck(_:_:expecting:)(v15, v16, v18, v19, 1);
    goto LABEL_21;
  }
LABEL_18:
  if (v16 != v19)
    goto LABEL_20;
  v20 = 0;
LABEL_21:
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v16);
  swift_bridgeObjectRelease(v19);
  return v20 & 1;
}

uint64_t sub_1000D5C64@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  id v10;
  NSString v11;
  id v12;
  uint64_t v13;
  void (*v14)(char *, uint64_t, uint64_t);
  char v15;
  char v16;
  void (*v17)(char *, uint64_t);
  Swift::String_optional v18;
  void *object;
  uint64_t v20;
  char v21;
  char v22;
  unint64_t v23;
  unint64_t v24;
  Swift::String_optional v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t result;
  uint64_t v33;
  uint64_t v34;
  _BOOL8 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t countAndFlagsBits;
  uint64_t v39;

  v6 = type metadata accessor for NSScanner.NumberRepresentation(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin();
  v9 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = objc_allocWithZone((Class)NSScanner);
  swift_bridgeObjectRetain(a2);
  v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  v12 = objc_msgSend(v10, "initWithString:", v11);

  v13 = enum case for NSScanner.NumberRepresentation.decimal(_:);
  v14 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 104);
  v14(v9, enum case for NSScanner.NumberRepresentation.decimal(_:), v6);
  v39 = NSScanner.scanInt(representation:)(v9);
  v16 = v15;
  v17 = *(void (**)(char *, uint64_t))(v7 + 8);
  v17(v9, v6);
  if ((v16 & 1) != 0)
  {

    goto LABEL_19;
  }
  v18 = NSScanner.scanCharacter()();
  object = v18.value._object;
  if (v18.value._object)
  {
    countAndFlagsBits = v18.value._countAndFlagsBits;
    v14(v9, v13, v6);
    v20 = NSScanner.scanInt(representation:)(v9);
    v22 = v21;
    v17(v9, v6);
    if ((v22 & 1) == 0)
    {
      if (v20 >= 1000)
        v23 = v20 % 0x3E8uLL;
      else
        v23 = v20;
      if (v20 >= 1000)
        v24 = v20 / 0x3E8uLL;
      else
        v24 = 0;
      swift_bridgeObjectRetain(a2);
      swift_bridgeObjectRetain(v18.value._object);
      v25 = NSScanner.scanCharacter()();
      v26 = v25.value._countAndFlagsBits;
      v27 = v25.value._object;
      v28 = HIBYTE(a2) & 0xF;
      if ((a2 & 0x2000000000000000) == 0)
        v28 = a1;
      v29 = 7;
      if (((a2 >> 60) & ((a1 & 0x800000000000000) == 0)) != 0)
        v29 = 11;
      v37 = v29 | (v28 << 16);
      v30 = swift_bridgeObjectRetain(v25.value._object);
      v31 = NSScanner.currentIndex.getter(v30);
      v37 = String.distance(from:to:)(v37, v31, a1, a2);

      if (!v37)
      {
        v35 = v20 < 1000;
        swift_bridgeObjectRelease(v25.value._object);
        swift_bridgeObjectRelease(v18.value._object);
        result = swift_bridgeObjectRelease(a2);
        v34 = countAndFlagsBits;
        v33 = v39;
        goto LABEL_22;
      }
      swift_bridgeObjectRelease_n(v18.value._object, 2);
      swift_bridgeObjectRelease_n(a2, 2);
      result = swift_bridgeObjectRelease_n(v25.value._object, 2);
      goto LABEL_20;
    }

    swift_bridgeObjectRelease(v18.value._object);
LABEL_19:
    result = swift_bridgeObjectRelease(a2);
LABEL_20:
    a1 = 0;
    a2 = 0;
    v33 = 0;
    v34 = 0;
    object = 0;
    goto LABEL_21;
  }

  result = swift_bridgeObjectRelease(a2);
  a1 = 0;
  a2 = 0;
  v33 = 0;
  v34 = 0;
LABEL_21:
  v24 = 0;
  v35 = 0;
  v23 = 0;
  v26 = 0;
  v27 = 0;
LABEL_22:
  *a3 = a1;
  a3[1] = a2;
  a3[2] = v33;
  a3[3] = v34;
  a3[4] = (uint64_t)object;
  a3[5] = v24;
  a3[6] = v35;
  a3[7] = v23;
  a3[8] = v26;
  a3[9] = (uint64_t)v27;
  return result;
}

uint64_t sub_1000D5F2C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_1000A0980(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t initializeBufferWithCopyOfBuffer for SystemVersionNumber(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain(v2);
  return v3;
}

uint64_t destroy for SystemVersionNumber(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[4]);
  return swift_bridgeObjectRelease(a1[9]);
}

uint64_t initializeWithCopy for SystemVersionNumber(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 32);
  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v5;
  *(_QWORD *)(a1 + 40) = v4;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  v6 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 72) = v6;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  return a1;
}

uint64_t assignWithCopy for SystemVersionNumber(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 32);
  v7 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  v9 = *(_QWORD *)(a2 + 72);
  v10 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease(v10);
  return a1;
}

__n128 initializeWithTake for SystemVersionNumber(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v3;
  return result;
}

uint64_t assignWithTake for SystemVersionNumber(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease(v6);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  v7 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRelease(v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for SystemVersionNumber(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 80))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SystemVersionNumber(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 80) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 80) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SystemVersionNumber()
{
  return &type metadata for SystemVersionNumber;
}

void *sub_1000D6224()
{
  return &protocol witness table for String;
}

unint64_t sub_1000D6234()
{
  unint64_t result;

  result = qword_100210F00;
  if (!qword_100210F00)
  {
    result = swift_getWitnessTable(&unk_100186A44, &type metadata for SystemVersionNumber);
    atomic_store(result, (unint64_t *)&qword_100210F00);
  }
  return result;
}

void *sub_1000D6278()
{
  return &protocol witness table for String;
}

unint64_t sub_1000D6288()
{
  unint64_t result;

  result = qword_100210F08;
  if (!qword_100210F08)
  {
    result = swift_getWitnessTable(&unk_100186A7C, &type metadata for SystemVersionNumber);
    atomic_store(result, (unint64_t *)&qword_100210F08);
  }
  return result;
}

void *sub_1000D62CC()
{
  return &protocol witness table for String;
}

unint64_t sub_1000D62D8()
{
  unint64_t result;

  result = qword_100210F10;
  if (!qword_100210F10)
  {
    result = swift_getWitnessTable(&unk_100186B4C, &type metadata for SystemVersionNumber);
    atomic_store(result, (unint64_t *)&qword_100210F10);
  }
  return result;
}

uint64_t sub_1000D631C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  Swift::String v19;
  void *object;
  _QWORD *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  _QWORD *v33;
  unint64_t v34;

  v2 = v1;
  v32 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v32);
  v31 = (char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS(0);
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0, v6);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_1000A0980((uint64_t *)&unk_100210840);
  __chkstk_darwin(v13);
  v15 = (char *)&v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  URL.init(string:)(0x736E656B6F544B43, 0xE800000000000000);
  v16 = type metadata accessor for URL(0);
  v17 = *(_QWORD *)(v16 - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v17 + 32))(v2 + OBJC_IVAR____TtC15audioaccessoryd17RecordFileManager_ckTokenBaseURL, v15, v16);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16))(v2 + OBJC_IVAR____TtC15audioaccessoryd17RecordFileManager_directoryURL, a1, v16);
    v29 = sub_1000C8110();
    v19._countAndFlagsBits = URL.lastPathComponent.getter(v29);
    v30 = a1;
    object = v19._object;
    v33 = (_QWORD *)0xD00000000000002FLL;
    v34 = 0x80000001001AD0F0;
    String.append(_:)(v19);
    swift_bridgeObjectRelease(object);
    v21 = v33;
    v22 = v34;
    v23 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v10 + 104))(v12, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v9);
    static DispatchQoS.unspecified.getter(v23);
    v33 = _swiftEmptyArrayStorage;
    v24 = sub_1000A0940((unint64_t *)&unk_1002123A0, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
    v25 = sub_1000A0980((uint64_t *)&unk_100211A00);
    v26 = sub_1000D8648();
    v27 = v31;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v33, v25, v26, v32, v24);
    v28 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(v21, v22, v8, v27, v12, 0);
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v30, v16);
    *(_QWORD *)(v2 + OBJC_IVAR____TtC15audioaccessoryd17RecordFileManager_serialQueue) = v28;
    return v2;
  }
  return result;
}

uint64_t sub_1000D65DC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  id v15;
  id v16;
  __n128 v17;
  uint64_t v18;
  uint64_t v19;
  NSString v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t Path;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  id v62;
  id v63;
  __n128 v64;
  uint64_t v65;
  uint64_t v66;
  NSString v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  __n128 v72;
  uint64_t v73;
  uint64_t v74;
  id v75;
  char *v76;
  NSURL *v77;
  void *v78;
  void *v79;
  NSURL *v80;
  void *v81;
  void *v82;
  unsigned __int8 v83;
  id v84;
  id v85;
  uint64_t v86;
  void (*v87)(char *, uint64_t);
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  id v93;
  NSURL *v94;
  void *v95;
  void *v96;
  NSURL *v97;
  void *v98;
  void *v99;
  unsigned int v100;
  uint64_t v101;
  id v102;
  uint64_t v103;
  uint64_t inited;
  NSString *v105;
  NSString *v106;
  unint64_t v107;
  id v108;
  _OWORD *v109;
  Class isa;
  __n128 v111;
  uint64_t v112;
  uint64_t v113;
  NSString v114;
  unsigned int v115;
  id v116;
  id v117;
  char *v118;
  id v119;
  uint64_t v120;
  void (*v121)(char *, uint64_t);
  char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  id v128;
  uint64_t v129;
  __int128 v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  id v135;
  char v136[48];

  v134 = a2;
  v4 = type metadata accessor for URLResourceValues(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v122 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for URL(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v122 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v14 = (char *)&v122 - v13;
  v15 = objc_msgSend((id)objc_opt_self(BTSystemConfiguration), "isFirstUnlocked");
  if (!(_DWORD)v15)
  {
    v31 = static os_log_type_t.error.getter(v15);
    if (qword_1002101E8 != -1)
      swift_once(&qword_1002101E8, sub_100168814);
    os_log(_:dso:log:_:_:)(v31, &_mh_execute_header, qword_100218DF0, "store call failed because in device is in beforeFirstUnlock state", 65, 2, _swiftEmptyArrayStorage);
    goto LABEL_21;
  }
  v129 = v5;
  v131 = v7;
  v132 = v9;
  v128 = (id)objc_opt_self(NSFileManager);
  v16 = objc_msgSend(v128, "defaultManager");
  v133 = a1;
  URL.path.getter(v17);
  v19 = v18;
  v20 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v19);
  v21 = objc_msgSend(v16, "fileExistsAtPath:", v20);

  if (v21)
  {
    v22 = static URL.== infix(_:_:)(v133, v134);
    if ((v22 & 1) != 0)
    {
      v23 = static os_log_type_t.info.getter(v22);
      if (qword_1002101E8 != -1)
        swift_once(&qword_1002101E8, sub_100168814);
      v24 = qword_100218DF0;
      v25 = sub_1000A0980((uint64_t *)&unk_1002103C0);
      v26 = swift_allocObject(v25, 72, 7);
      *(_OWORD *)(v26 + 16) = xmmword_100184870;
      v27 = URL.path.getter((__n128)xmmword_100184870);
      v29 = v28;
      *(_QWORD *)(v26 + 56) = &type metadata for String;
      *(_QWORD *)(v26 + 64) = sub_1000A0DF4();
      *(_QWORD *)(v26 + 32) = v27;
      *(_QWORD *)(v26 + 40) = v29;
      os_log(_:dso:log:_:_:)(v23, &_mh_execute_header, v24, "Skipping file already exists at: %@", 35, 2, v26);
      return swift_bridgeObjectRelease(v26);
    }
  }
  v32 = URL.pathExtension.getter();
  v34 = v33;
  v35 = String.count.getter(v32);
  v36 = swift_bridgeObjectRelease(v34);
  if (v35 < 1)
  {
    v89 = static os_log_type_t.error.getter(v36);
    if (qword_1002101E8 != -1)
      swift_once(&qword_1002101E8, sub_100168814);
    os_log(_:dso:log:_:_:)(v89, &_mh_execute_header, qword_100218DF0, "Invalid filename, missing file extension", 40, 2, _swiftEmptyArrayStorage);
LABEL_21:
    v90 = sub_1000D8604();
    v91 = swift_allocError(&type metadata for DeviceStore.DeviceStoreError, v90, 0, 0);
    *v92 = 0x8000000000000010;
    return swift_willThrow(v91);
  }
  v123 = v4;
  v125 = v2;
  v37 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v132 + 16))(v14, v133, v8);
  Path = URL.deletingLastPathComponent()(v37);
  v39 = static os_log_type_t.default.getter(Path);
  if (qword_1002101E8 != -1)
    swift_once(&qword_1002101E8, sub_100168814);
  v127 = v14;
  v40 = qword_100218DF0;
  v126 = sub_1000A0980((uint64_t *)&unk_1002103C0);
  v41 = swift_allocObject(v126, 72, 7);
  v130 = xmmword_100184870;
  *(_OWORD *)(v41 + 16) = xmmword_100184870;
  v42 = URL.path.getter((__n128)xmmword_100184870);
  v44 = v43;
  *(_QWORD *)(v41 + 56) = &type metadata for String;
  v45 = sub_1000A0DF4();
  *(_QWORD *)(v41 + 64) = v45;
  *(_QWORD *)(v41 + 32) = v42;
  *(_QWORD *)(v41 + 40) = v44;
  os_log(_:dso:log:_:_:)(v39, &_mh_execute_header, v40, "Creating file directory: %@", 27, 2, v41);
  swift_bridgeObjectRelease(v41);
  if (qword_100210128 != -1)
    swift_once(&qword_100210128, sub_1000A29E4);
  v46 = qword_100218BF8;
  swift_bridgeObjectRetain(qword_100218BF8);
  v122 = v11;
  sub_1000A2A5C();
  v47 = swift_bridgeObjectRelease(v46);
  URLResourceValues.init()(v47);
  v48 = URLResourceValues.isExcludedFromBackup.setter(1);
  v49 = static os_log_type_t.info.getter(v48);
  v50 = qword_100218DF0;
  v51 = v126;
  v52 = swift_allocObject(v126, 72, 7);
  *(_OWORD *)(v52 + 16) = v130;
  v53 = sub_1000A0940((unint64_t *)&unk_100211A60, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
  v54 = dispatch thunk of CustomStringConvertible.description.getter(v8, v53);
  *(_QWORD *)(v52 + 56) = &type metadata for String;
  *(_QWORD *)(v52 + 64) = v45;
  *(_QWORD *)(v52 + 32) = v54;
  *(_QWORD *)(v52 + 40) = v55;
  os_log(_:dso:log:_:_:)(v49, &_mh_execute_header, v50, "Moving asset from: %@", 21, 2, v52);
  v56 = swift_bridgeObjectRelease(v52);
  v57 = static os_log_type_t.info.getter(v56);
  v58 = qword_100218DF0;
  v59 = swift_allocObject(v51, 72, 7);
  *(_OWORD *)(v59 + 16) = v130;
  v124 = v8;
  v60 = dispatch thunk of CustomStringConvertible.description.getter(v8, v53);
  *(_QWORD *)(v59 + 56) = &type metadata for String;
  *(_QWORD *)(v59 + 64) = v45;
  *(_QWORD *)(v59 + 32) = v60;
  *(_QWORD *)(v59 + 40) = v61;
  os_log(_:dso:log:_:_:)(v57, &_mh_execute_header, v58, "Moving asset to: %@", 19, 2, v59);
  swift_bridgeObjectRelease(v59);
  v62 = v128;
  v63 = objc_msgSend(v128, "defaultManager");
  URL.path.getter(v64);
  v66 = v65;
  v67 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v66);
  LODWORD(v66) = objc_msgSend(v63, "fileExistsAtPath:", v67);

  if ((_DWORD)v66)
  {
    v69 = static os_log_type_t.info.getter(v68);
    v70 = qword_100218DF0;
    v71 = swift_allocObject(v126, 72, 7);
    v72 = (__n128)v130;
    *(_OWORD *)(v71 + 16) = v130;
    v73 = URL.path.getter(v72);
    *(_QWORD *)(v71 + 56) = &type metadata for String;
    *(_QWORD *)(v71 + 64) = v45;
    *(_QWORD *)(v71 + 32) = v73;
    *(_QWORD *)(v71 + 40) = v74;
    os_log(_:dso:log:_:_:)(v69, &_mh_execute_header, v70, "File already exists replace at: %@", 34, 2, v71);
    swift_bridgeObjectRelease(v71);
    v75 = objc_msgSend(v62, "defaultManager");
    v76 = v127;
    URL._bridgeToObjectiveC()(v77);
    v79 = v78;
    URL._bridgeToObjectiveC()(v80);
    v82 = v81;
    v135 = 0;
    v83 = objc_msgSend(v75, "replaceItemAtURL:withItemAtURL:backupItemName:options:resultingItemURL:error:", v79, v81, 0, 0, 0, &v135);

    v84 = v135;
    if ((v83 & 1) == 0)
    {
LABEL_17:
      v85 = v84;
      _convertNSErrorToError(_:)(v84);

      swift_willThrow(v86);
      (*(void (**)(char *, uint64_t))(v129 + 8))(v131, v123);
      v87 = *(void (**)(char *, uint64_t))(v132 + 8);
      v88 = v124;
      v87(v122, v124);
      return ((uint64_t (*)(char *, uint64_t))v87)(v76, v88);
    }
  }
  else
  {
    v93 = objc_msgSend(v62, "defaultManager");
    URL._bridgeToObjectiveC()(v94);
    v96 = v95;
    v76 = v127;
    URL._bridgeToObjectiveC()(v97);
    v99 = v98;
    v135 = 0;
    v100 = objc_msgSend(v93, "moveItemAtURL:toURL:error:", v96, v98, &v135);

    v84 = v135;
    if (!v100)
      goto LABEL_17;
  }
  v101 = v124;
  v102 = v84;
  v103 = sub_1000A0980(&qword_100211068);
  inited = swift_initStackObject(v103, v136);
  *(_OWORD *)(inited + 16) = v130;
  *(_QWORD *)(inited + 32) = NSFileProtectionKey;
  *(_QWORD *)(inited + 40) = NSFileProtectionCompleteUntilFirstUserAuthentication;
  v105 = NSFileProtectionKey;
  v106 = NSFileProtectionCompleteUntilFirstUserAuthentication;
  v107 = sub_1000A5070(inited);
  v108 = objc_msgSend(v62, "defaultManager");
  v109 = sub_1001272DC(v107);
  swift_bridgeObjectRelease(v107);
  type metadata accessor for FileAttributeKey(0);
  sub_1000A0940(&qword_100210610, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_100185338);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v109);
  URL.path.getter(v111);
  v113 = v112;
  v114 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v113);
  v135 = 0;
  v115 = objc_msgSend(v108, "setAttributes:ofItemAtPath:error:", isa, v114, &v135);

  v116 = v135;
  if (v115)
  {
    v117 = v135;
    v118 = v131;
    URL.setResourceValues(_:)(v131);
    (*(void (**)(char *, uint64_t))(v129 + 8))(v118, v123);
  }
  else
  {
    v119 = v135;
    _convertNSErrorToError(_:)(v116);

    swift_willThrow(v120);
    (*(void (**)(char *, uint64_t))(v129 + 8))(v131, v123);
  }
  v121 = *(void (**)(char *, uint64_t))(v132 + 8);
  v121(v122, v101);
  return ((uint64_t (*)(char *, uint64_t))v121)(v76, v101);
}

uint64_t sub_1000D6FA4@<X0>(uint64_t a1@<X1>, char *a2@<X2>, uint64_t a3@<X3>, char *a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void *v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t);
  uint64_t v19;
  char *v20;
  void *v21;
  id v22;
  __n128 v23;
  uint64_t v24;
  uint64_t v25;
  NSString v26;
  id v27;
  NSURL *v28;
  void *v29;
  void *v30;
  unsigned int v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  id v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t result;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  id v65;

  v63 = a2;
  v64 = a4;
  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v59 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v12 = (char *)&v59 - v11;
  v13 = objc_autoreleasePoolPush();
  v61 = a3;
  v15 = URL.path.getter(v14);
  v17 = v16;
  URL.appendingPathComponent(_:)(v15);
  swift_bridgeObjectRelease(v17);
  URL.appendingPathComponent(_:)(a1);
  v18 = *(void (**)(char *, uint64_t))(v7 + 8);
  v19 = v6;
  v20 = v12;
  v18(v9, v6);
  objc_autoreleasePoolPop(v13);
  v21 = (void *)objc_opt_self(NSFileManager);
  v22 = objc_msgSend(v21, "defaultManager");
  URL.path.getter(v23);
  v25 = v24;
  v26 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v25);
  LODWORD(v25) = objc_msgSend(v22, "fileExistsAtPath:", v26);

  if (!(_DWORD)v25)
  {
LABEL_6:
    v42 = 1;
    goto LABEL_10;
  }
  v27 = objc_msgSend(v21, "defaultManager");
  URL._bridgeToObjectiveC()(v28);
  v30 = v29;
  v65 = 0;
  v31 = objc_msgSend(v27, "removeItemAtURL:error:", v29, &v65);

  v32 = v65;
  if (v31)
  {
    LODWORD(v63) = static os_log_type_t.default.getter(v65);
    if (qword_1002101E8 != -1)
      swift_once(&qword_1002101E8, sub_100168814);
    v60 = qword_100218DF0;
    v33 = sub_1000A0980((uint64_t *)&unk_1002103C0);
    v34 = swift_allocObject(v33, 112, 7);
    *(_OWORD *)(v34 + 16) = xmmword_1001858F0;
    v35 = sub_1000A0940((unint64_t *)&unk_100211A60, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
    v36 = dispatch thunk of CustomStringConvertible.description.getter(v19, v35);
    v38 = v37;
    *(_QWORD *)(v34 + 56) = &type metadata for String;
    v39 = sub_1000A0DF4();
    *(_QWORD *)(v34 + 64) = v39;
    *(_QWORD *)(v34 + 32) = v36;
    *(_QWORD *)(v34 + 40) = v38;
    v40 = URL.lastPathComponent.getter(v39);
    *(_QWORD *)(v34 + 96) = &type metadata for String;
    *(_QWORD *)(v34 + 104) = v39;
    *(_QWORD *)(v34 + 72) = v40;
    *(_QWORD *)(v34 + 80) = v41;
    os_log(_:dso:log:_:_:)(v63, &_mh_execute_header, v60, "Deleted record %@ from %@", 25, 2, v34);
    swift_bridgeObjectRelease(v34);
    goto LABEL_6;
  }
  v62 = v19;
  v63 = v20;
  v43 = v65;
  v44 = (void *)_convertNSErrorToError(_:)(v32);

  v46 = swift_willThrow(v45);
  v47 = static os_log_type_t.default.getter(v46);
  if (qword_1002101E8 != -1)
    swift_once(&qword_1002101E8, sub_100168814);
  v48 = qword_100218DF0;
  v49 = sub_1000A0980((uint64_t *)&unk_1002103C0);
  v50 = swift_allocObject(v49, 112, 7);
  *(_OWORD *)(v50 + 16) = xmmword_1001858F0;
  v65 = v44;
  swift_errorRetain(v44);
  v51 = sub_1000A0980(&qword_100210710);
  v52 = String.init<A>(describing:)(&v65, v51);
  v54 = v53;
  *(_QWORD *)(v50 + 56) = &type metadata for String;
  v55 = sub_1000A0DF4();
  *(_QWORD *)(v50 + 64) = v55;
  *(_QWORD *)(v50 + 32) = v52;
  *(_QWORD *)(v50 + 40) = v54;
  v56 = URL.lastPathComponent.getter(v55);
  *(_QWORD *)(v50 + 96) = &type metadata for String;
  *(_QWORD *)(v50 + 104) = v55;
  *(_QWORD *)(v50 + 72) = v56;
  *(_QWORD *)(v50 + 80) = v57;
  os_log(_:dso:log:_:_:)(v47, &_mh_execute_header, v48, "Could not delete record %@ from %@", 34, 2, v50);
  swift_bridgeObjectRelease(v50);
  swift_errorRelease(v44);
  v42 = 0;
  v19 = v62;
  v20 = v63;
LABEL_10:
  result = ((uint64_t (*)(char *, uint64_t))v18)(v20, v19);
  *v64 = v42;
  return result;
}

uint64_t sub_1000D73E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  _QWORD *v9;
  void *v10;
  id v11;
  uint64_t result;
  __n128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v1 = type metadata accessor for URL(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchPredicate(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (uint64_t *)((char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = *(void **)(v0 + OBJC_IVAR____TtC15audioaccessoryd17RecordFileManager_serialQueue);
  *v9 = v10;
  (*(void (**)(_QWORD *, _QWORD, uint64_t, __n128))(v6 + 104))(v9, enum case for DispatchPredicate.onQueue(_:), v5, v7);
  v11 = v10;
  LOBYTE(v10) = _dispatchPreconditionTest(_:)(v9);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v6 + 8))(v9, v5);
  if ((v10 & 1) != 0)
  {
    v14 = URL.path.getter(v13);
    v16 = v15;
    URL.appendingPathComponent(_:)(v14);
    swift_bridgeObjectRelease(v16);
    sub_1000A2E54();
    return (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000D7538()
{
  sub_1000D73E0();
  return 0;
}

uint64_t sub_1000D769C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(char *, uint64_t, uint64_t);
  uint64_t v8;
  void (*v9)(char *, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;

  v0 = type metadata accessor for URL(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v13 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = static os_log_type_t.default.getter(v4);
  if (qword_1002101E8 != -1)
    swift_once(&qword_1002101E8, sub_100168814);
  os_log(_:dso:log:_:_:)(v5, &_mh_execute_header, qword_100218DF0, "Purging sound profile data", 26, 2, _swiftEmptyArrayStorage);
  if (qword_100210138 != -1)
    swift_once(&qword_100210138, sub_1000AB9D0);
  v6 = sub_1000A0A00(v0, (uint64_t)qword_100218C38);
  v7 = *(void (**)(char *, uint64_t, uint64_t))(v1 + 16);
  v7(v3, v6, v0);
  v8 = sub_1000D7538();
  v9 = *(void (**)(char *, uint64_t))(v1 + 8);
  v9(v3, v0);
  if (qword_100210140 != -1)
    swift_once(&qword_100210140, sub_1000AB9F4);
  v10 = sub_1000A0A00(v0, (uint64_t)qword_100218C50);
  v7(v3, v10, v0);
  v11 = sub_1000D7538();
  swift_errorRelease(v8);
  result = ((uint64_t (*)(char *, uint64_t))v9)(v3, v0);
  if (v11)
    return swift_willThrow(result);
  return result;
}

uint64_t sub_1000D7854()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  void (*v15)(char *, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t result;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD v36[5];
  char *v37;

  v0 = sub_1000A0980((uint64_t *)&unk_100210840);
  __chkstk_darwin(v0);
  v37 = (char *)&v36[-1] - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = type metadata accessor for URL(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v36[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v8 = (char *)&v36[-1] - v7;
  v10 = static os_log_type_t.default.getter(v9);
  if (qword_1002101E8 != -1)
    swift_once(&qword_1002101E8, sub_100168814);
  os_log(_:dso:log:_:_:)(v10, &_mh_execute_header, qword_100218DF0, "Purging local cache storage", 27, 2, _swiftEmptyArrayStorage);
  v11 = sub_1000D7538();
  if (qword_100210148 != -1)
    swift_once(&qword_100210148, sub_1000B0C18);
  v12 = sub_1000A0A00(v2, (uint64_t)qword_100218C68);
  v13 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
  v13(v8, v12, v2);
  v14 = sub_1000D7538();
  swift_errorRelease(v11);
  v15 = *(void (**)(char *, uint64_t))(v3 + 8);
  v15(v8, v2);
  if (qword_100210120 != -1)
    swift_once(&qword_100210120, sub_10009C800);
  v16 = sub_1000A0A00(v2, (uint64_t)qword_100218BE0);
  v13(v8, v16, v2);
  v17 = sub_1000D7538();
  swift_errorRelease(v14);
  v15(v8, v2);
  if (qword_100210180 != -1)
    swift_once(&qword_100210180, sub_1000DA4F0);
  v18 = sub_1000A0A00(v2, (uint64_t)qword_100218D28);
  v13(v8, v18, v2);
  v19 = sub_1000D7538();
  swift_errorRelease(v17);
  v15(v8, v2);
  if (qword_100210188 != -1)
    swift_once(&qword_100210188, sub_1000E3AB4);
  v20 = sub_1000A0A00(v2, (uint64_t)qword_100218D40);
  v13(v8, v20, v2);
  v21 = sub_1000D7538();
  swift_errorRelease(v19);
  v15(v8, v2);
  if (qword_100210160 != -1)
    swift_once(&qword_100210160, sub_1000C81B8);
  v22 = sub_1000A0A00(v2, (uint64_t)qword_100218C90);
  v13(v8, v22, v2);
  v23 = sub_1000D7538();
  swift_errorRelease(v21);
  v15(v8, v2);
  if (qword_100210138 != -1)
    swift_once(&qword_100210138, sub_1000AB9D0);
  v24 = sub_1000A0A00(v2, (uint64_t)qword_100218C38);
  v13(v8, v24, v2);
  v25 = sub_1000D7538();
  swift_errorRelease(v23);
  v15(v8, v2);
  if (qword_100210140 != -1)
    swift_once(&qword_100210140, sub_1000AB9F4);
  v26 = sub_1000A0A00(v2, (uint64_t)qword_100218C50);
  v13(v8, v26, v2);
  v27 = sub_1000D7538();
  swift_errorRelease(v25);
  v15(v8, v2);
  v28 = v37;
  URL.init(string:)(0x6465727265666544, 0xEF7364726F636552);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 48))(v28, 1, v2);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, v28, v2);
    v30 = sub_1000D7538();
    swift_errorRelease(v27);
    v15(v5, v2);
    v36[3] = &type metadata for AudioAccessoryFeatures;
    v36[4] = sub_1000A42C4();
    v31 = isFeatureEnabled(_:)(v36);
    result = sub_1000A2140(v36);
    if ((v31 & 1) != 0)
    {
      if (qword_1002101B0 != -1)
        swift_once(&qword_1002101B0, sub_100106014);
      v32 = sub_1000A0A00(v2, (uint64_t)qword_100218D68);
      v13(v8, v32, v2);
      v33 = sub_1000D7538();
      swift_errorRelease(v30);
      v15(v8, v2);
      if (qword_100210130 != -1)
        swift_once(&qword_100210130, sub_1000A5BC0);
      v34 = sub_1000A0A00(v2, (uint64_t)qword_100218C00);
      v13(v8, v34, v2);
      v30 = sub_1000D7538();
      swift_errorRelease(v33);
      result = ((uint64_t (*)(char *, uint64_t))v15)(v8, v2);
    }
    if (v30)
      return swift_willThrow(result);
  }
  return result;
}

uint64_t sub_1000D7E10()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(char *, uint64_t, uint64_t);
  uint64_t v8;
  void (*v9)(char *, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;

  v0 = type metadata accessor for URL(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v13 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = static os_log_type_t.default.getter(v4);
  if (qword_1002101E8 != -1)
    swift_once(&qword_1002101E8, sub_100168814);
  os_log(_:dso:log:_:_:)(v5, &_mh_execute_header, qword_100218DF0, "Purging Audio Accessory Zone data", 33, 2, _swiftEmptyArrayStorage);
  if (qword_1002101B0 != -1)
    swift_once(&qword_1002101B0, sub_100106014);
  v6 = sub_1000A0A00(v0, (uint64_t)qword_100218D68);
  v7 = *(void (**)(char *, uint64_t, uint64_t))(v1 + 16);
  v7(v3, v6, v0);
  v8 = sub_1000D7538();
  v9 = *(void (**)(char *, uint64_t))(v1 + 8);
  v9(v3, v0);
  if (qword_100210130 != -1)
    swift_once(&qword_100210130, sub_1000A5BC0);
  v10 = sub_1000A0A00(v0, (uint64_t)qword_100218C00);
  v7(v3, v10, v0);
  v11 = sub_1000D7538();
  swift_errorRelease(v8);
  result = ((uint64_t (*)(char *, uint64_t))v9)(v3, v0);
  if (v11)
    return swift_willThrow(result);
  return result;
}

uint64_t sub_1000D7FC8()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  void *v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  id v25;
  int v26;
  id v27;
  NSURL *v28;
  void *v29;
  void *v30;
  unsigned int v31;
  id v32;
  id v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  char *v52;
  uint64_t (*v53)(char *, uint64_t);
  id v54;
  _OWORD v55[2];
  id v56[4];

  v0 = sub_1000A0980((uint64_t *)&unk_100210840);
  __chkstk_darwin(v0);
  v2 = (char *)&v49 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for URL(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v49 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v9 = (char *)&v49 - v8;
  v11 = static os_log_type_t.default.getter(v10);
  if (qword_1002101E8 != -1)
    swift_once(&qword_1002101E8, sub_100168814);
  os_log(_:dso:log:_:_:)(v11, &_mh_execute_header, qword_100218DF0, "Obliterating all iCloud user's local storage", 44, 2, _swiftEmptyArrayStorage);
  v54 = (id)objc_opt_self(NSFileManager);
  v12 = objc_msgSend(v54, "defaultManager");
  type metadata accessor for DeviceStore(0);
  sub_100110DD4((uint64_t)v9);
  v13 = NSFileManager.enumerator(at:includingPropertiesForKeys:options:errorHandler:)(v9, 0, 0, 0, 0);

  v14 = (void *)v13;
  v53 = *(uint64_t (**)(char *, uint64_t))(v4 + 8);
  result = v53(v9, v3);
  if (v13)
  {
    v52 = (char *)&type metadata for Any + 8;
    v51 = xmmword_100184870;
    while (1)
    {
      v24 = objc_msgSend(v14, "nextObject");
      if (v24)
      {
        v25 = v24;
        _bridgeAnyObjectToAny(_:)(v55);
        swift_unknownObjectRelease(v25);
      }
      else
      {
        memset(v55, 0, sizeof(v55));
      }
      sub_1000D8694((uint64_t)v55, (uint64_t)v56);
      if (!v56[3])
        break;
      v26 = swift_dynamicCast(v2, v56, v52, v3, 6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v4 + 56))(v2, v26 ^ 1u, 1, v3);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3) == 1)
        goto LABEL_15;
      (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v6, v2, v3);
      v27 = objc_msgSend(v54, "defaultManager");
      URL._bridgeToObjectiveC()(v28);
      v30 = v29;
      v56[0] = 0;
      v31 = objc_msgSend(v27, "removeItemAtURL:error:", v29, v56);

      v32 = v56[0];
      if (v31)
      {
        v16 = static os_log_type_t.default.getter(v56[0]);
        v17 = qword_100218DF0;
        v18 = sub_1000A0980((uint64_t *)&unk_1002103C0);
        v19 = swift_allocObject(v18, 72, 7);
        *(_OWORD *)(v19 + 16) = v51;
        v20 = sub_1000A0940((unint64_t *)&unk_100211A60, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
        v21 = dispatch thunk of CustomStringConvertible.description.getter(v3, v20);
        v23 = v22;
        *(_QWORD *)(v19 + 56) = &type metadata for String;
        *(_QWORD *)(v19 + 64) = sub_1000A0DF4();
        *(_QWORD *)(v19 + 32) = v21;
        *(_QWORD *)(v19 + 40) = v23;
        os_log(_:dso:log:_:_:)(v16, &_mh_execute_header, v17, "Deleted iCloud user files: %@", 29, 2, v19);
        swift_bridgeObjectRelease(v19);
      }
      else
      {
        v33 = v56[0];
        v34 = (void *)_convertNSErrorToError(_:)(v32);

        v36 = swift_willThrow(v35);
        v37 = static os_log_type_t.default.getter(v36);
        v50 = qword_100218DF0;
        v38 = sub_1000A0980((uint64_t *)&unk_1002103C0);
        v39 = swift_allocObject(v38, 72, 7);
        *(_OWORD *)(v39 + 16) = v51;
        v56[0] = v34;
        swift_errorRetain(v34);
        v40 = sub_1000A0980(&qword_100210710);
        v41 = String.init<A>(describing:)(v56, v40);
        v42 = v3;
        v43 = v2;
        v44 = v6;
        v45 = v4;
        v46 = v14;
        v48 = v47;
        *(_QWORD *)(v39 + 56) = &type metadata for String;
        *(_QWORD *)(v39 + 64) = sub_1000A0DF4();
        *(_QWORD *)(v39 + 32) = v41;
        *(_QWORD *)(v39 + 40) = v48;
        v14 = v46;
        v4 = v45;
        v6 = v44;
        v2 = v43;
        v3 = v42;
        os_log(_:dso:log:_:_:)(v37, &_mh_execute_header, v50, "Could not delete iCloud user files: %@", 38, 2, v39);
        swift_bridgeObjectRelease(v39);
        swift_errorRelease(v34);
      }
      v53(v6, v3);
    }
    sub_1000A1000((uint64_t)v56, &qword_100211980);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56))(v2, 1, 1, v3);
LABEL_15:

    return sub_1000A1000((uint64_t)v2, (uint64_t *)&unk_100210840);
  }
  return result;
}

uint64_t sub_1000D84C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t);

  v1 = v0 + OBJC_IVAR____TtC15audioaccessoryd17RecordFileManager_directoryURL;
  v2 = type metadata accessor for URL(0);
  v3 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8);
  v3(v1, v2);

  v3(v0 + OBJC_IVAR____TtC15audioaccessoryd17RecordFileManager_ckTokenBaseURL, v2);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_1000D8544()
{
  return type metadata accessor for RecordFileManager(0);
}

uint64_t type metadata accessor for RecordFileManager(uint64_t a1)
{
  uint64_t result;

  result = qword_100210F40;
  if (!qword_100210F40)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for RecordFileManager);
  return result;
}

uint64_t sub_1000D8588(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  result = type metadata accessor for URL(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[2] = v4[0];
    result = swift_updateClassMetadata2(a1, 256, 3, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

unint64_t sub_1000D8604()
{
  unint64_t result;

  result = qword_100211060;
  if (!qword_100211060)
  {
    result = swift_getWitnessTable(&unk_100187DE4, &type metadata for DeviceStore.DeviceStoreError);
    atomic_store(result, (unint64_t *)&qword_100211060);
  }
  return result;
}

unint64_t sub_1000D8648()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002123B0;
  if (!qword_1002123B0)
  {
    v1 = sub_1000A4E14((uint64_t *)&unk_100211A00);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1002123B0);
  }
  return result;
}

uint64_t sub_1000D8694(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000A0980(&qword_100211980);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t *sub_1000D86DC(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  void (*v20)(char *, char *, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v23 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v23 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v23);
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = a3[6];
    v10 = (uint64_t *)((char *)a1 + v8);
    v11 = (uint64_t *)((char *)a2 + v8);
    v12 = v11[1];
    *v10 = *v11;
    v10[1] = v12;
    v13 = (uint64_t *)((char *)a1 + v9);
    v14 = (uint64_t *)((char *)a2 + v9);
    v15 = v14[1];
    *v13 = *v14;
    v13[1] = v15;
    v16 = a3[7];
    v17 = (char *)a1 + v16;
    v18 = (char *)a2 + v16;
    v19 = type metadata accessor for URL(0);
    v20 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 16);
    swift_bridgeObjectRetain(v12);
    swift_bridgeObjectRetain(v15);
    v20(v17, v18, v19);
    v21 = a3[8];
    v22 = *(uint64_t *)((char *)a2 + v21);
    *(uint64_t *)((char *)a1 + v21) = v22;
    swift_bridgeObjectRetain(v22);
  }
  return a1;
}

uint64_t sub_1000D87E4(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[5] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[6] + 8));
  v5 = a1 + a2[7];
  v6 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[8]));
}

uint64_t sub_1000D8874(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = (_QWORD *)(a1 + v7);
  v10 = (_QWORD *)(a2 + v7);
  v11 = v10[1];
  *v9 = *v10;
  v9[1] = v11;
  v12 = (_QWORD *)(a1 + v8);
  v13 = (_QWORD *)(a2 + v8);
  v14 = v13[1];
  *v12 = *v13;
  v12[1] = v14;
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = type metadata accessor for URL(0);
  v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16);
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v14);
  v19(v16, v17, v18);
  v20 = a3[8];
  v21 = *(_QWORD *)(a2 + v20);
  *(_QWORD *)(a1 + v20) = v21;
  swift_bridgeObjectRetain(v21);
  return a1;
}

uint64_t sub_1000D8950(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  *v8 = *v9;
  v10 = v9[1];
  v11 = v8[1];
  v8[1] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  v12 = a3[6];
  v13 = (_QWORD *)(a1 + v12);
  v14 = (_QWORD *)(a2 + v12);
  *v13 = *v14;
  v15 = v14[1];
  v16 = v13[1];
  v13[1] = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v16);
  v17 = a3[7];
  v18 = a1 + v17;
  v19 = a2 + v17;
  v20 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 24))(v18, v19, v20);
  v21 = a3[8];
  v22 = *(_QWORD *)(a2 + v21);
  v23 = *(_QWORD *)(a1 + v21);
  *(_QWORD *)(a1 + v21) = v22;
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRelease(v23);
  return a1;
}

uint64_t sub_1000D8A48(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  v8 = a3[7];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
  *(_QWORD *)(a1 + a3[8]) = *(_QWORD *)(a2 + a3[8]);
  return a1;
}

uint64_t sub_1000D8AEC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = (_QWORD *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v11 = *v9;
  v10 = v9[1];
  v12 = v8[1];
  *v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease(v12);
  v13 = a3[6];
  v14 = (_QWORD *)(a1 + v13);
  v15 = (uint64_t *)(a2 + v13);
  v17 = *v15;
  v16 = v15[1];
  v18 = v14[1];
  *v14 = v17;
  v14[1] = v16;
  swift_bridgeObjectRelease(v18);
  v19 = a3[7];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 40))(v20, v21, v22);
  v23 = a3[8];
  v24 = *(_QWORD *)(a1 + v23);
  *(_QWORD *)(a1 + v23) = *(_QWORD *)(a2 + v23);
  swift_bridgeObjectRelease(v24);
  return a1;
}

uint64_t sub_1000D8BBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000D8BC8);
}

uint64_t sub_1000D8BC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  unint64_t v11;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    v8 = type metadata accessor for URL(0);
    v10 = a1 + *(int *)(a3 + 28);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
    return v9(v10, a2, v8);
  }
  v11 = *(_QWORD *)(a1 + *(int *)(a3 + 24) + 8);
  if (v11 >= 0xFFFFFFFF)
    LODWORD(v11) = -1;
  return (v11 + 1);
}

uint64_t sub_1000D8C74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000D8C80);
}

uint64_t sub_1000D8C80(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  result = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(_QWORD *)(a1 + *(int *)(a4 + 24) + 8) = (a2 - 1);
      return result;
    }
    v10 = type metadata accessor for URL(0);
    v12 = a1 + *(int *)(a4 + 28);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t type metadata accessor for CloudCoordinatorConfiguration(uint64_t a1)
{
  uint64_t result;

  result = qword_1002110C8;
  if (!qword_1002110C8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for CloudCoordinatorConfiguration);
  return result;
}

uint64_t sub_1000D8D64(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[5];

  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v5[0] = *(_QWORD *)(result - 8) + 64;
    v5[1] = &unk_100186C40;
    v5[2] = &unk_100186C58;
    result = type metadata accessor for URL(319);
    if (v4 <= 0x3F)
    {
      v5[3] = *(_QWORD *)(result - 8) + 64;
      v5[4] = (char *)&value witness table for Builtin.BridgeObject + 64;
      swift_initStructMetadata(a1, 256, 5, v5, a1 + 16);
      return 0;
    }
  }
  return result;
}

uint64_t sub_1000D8E08()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v0 = sub_1000A0980((uint64_t *)&unk_100210840);
  __chkstk_darwin(v0);
  v2 = (char *)&v7 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for URL(0);
  sub_1000A09C0(v3, qword_100218D10);
  v4 = sub_1000A0A00(v3, (uint64_t)qword_100218D10);
  URL.init(string:)(0x6552646568636143, 0xED00007364726F63);
  v5 = *(_QWORD *)(v3 - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 48))(v2, 1, v3);
  if ((_DWORD)result != 1)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v5 + 32))(v4, v2, v3);
  __break(1u);
  return result;
}

uint64_t sub_1000D8EF0()
{
  uint64_t v0;
  Swift::String v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  void *v5;
  Swift::String v6;
  Swift::String v7;
  uint64_t v8;
  uint64_t v9;
  Swift::String v10;
  void *object;

  _StringGuts.grow(_:)(67);
  v1._object = (void *)0x80000001001AD210;
  v1._countAndFlagsBits = 0xD000000000000034;
  String.append(_:)(v1);
  v2 = type metadata accessor for CloudCoordinatorConfiguration(0);
  v3 = (uint64_t *)(v0 + *(int *)(v2 + 24));
  v4 = *v3;
  v5 = (void *)v3[1];
  swift_bridgeObjectRetain(v5);
  v6._countAndFlagsBits = v4;
  v6._object = v5;
  String.append(_:)(v6);
  swift_bridgeObjectRelease(v5);
  v7._countAndFlagsBits = 0x4449656E6F7A202CLL;
  v7._object = (void *)0xEB00000000203A73;
  String.append(_:)(v7);
  v8 = *(_QWORD *)(v0 + *(int *)(v2 + 32));
  v9 = swift_bridgeObjectRetain(v8);
  v10._countAndFlagsBits = Array.description.getter(v9, &type metadata for String);
  object = v10._object;
  String.append(_:)(v10);
  swift_bridgeObjectRelease(v8);
  swift_bridgeObjectRelease(object);
  return 0;
}

uint64_t sub_1000D8FF8(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1000D9030 + 4 * byte_100186BC0[a1]))(0x696669746E656469, 0xEA00000000007265);
}

unint64_t sub_1000D9030()
{
  return 0xD000000000000011;
}

unint64_t sub_1000D904C()
{
  return 0xD000000000000013;
}

uint64_t sub_1000D906C()
{
  return 0x726F746365726964;
}

uint64_t sub_1000D908C()
{
  return 0x734449656E6F7ALL;
}

uint64_t sub_1000D90A4(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  char v28;
  uint64_t v29;
  char v30;
  char v31;
  char v32;
  char v33;

  v3 = v1;
  v5 = sub_1000A0980(&qword_100211138);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_1000A20D8(a1, v9);
  v11 = sub_1000D9918();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for CloudCoordinatorConfiguration.CodingKeys, &type metadata for CloudCoordinatorConfiguration.CodingKeys, v11, v9, v10);
  v33 = 0;
  v12 = type metadata accessor for UUID(0);
  v13 = sub_1000A0940((unint64_t *)&unk_1002105E0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v3, &v33, v5, v12, v13);
  if (!v2)
  {
    v14 = (int *)type metadata accessor for CloudCoordinatorConfiguration(0);
    v15 = (uint64_t *)(v3 + v14[5]);
    v16 = *v15;
    v17 = v15[1];
    v32 = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v16, v17, &v32, v5);
    v18 = (uint64_t *)(v3 + v14[6]);
    v19 = *v18;
    v20 = v18[1];
    v31 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v19, v20, &v31, v5);
    v21 = v3 + v14[7];
    v30 = 3;
    v22 = type metadata accessor for URL(0);
    v23 = sub_1000A0940(&qword_1002109D8, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v21, &v30, v5, v22, v23);
    v29 = *(_QWORD *)(v3 + v14[8]);
    v28 = 4;
    v24 = sub_1000A0980(&qword_100210740);
    v25 = sub_1000D99DC(&qword_100211140, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v29, &v28, v5, v24, v25);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1000D92F4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t result;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  char v47;
  char v48;
  char v49;
  char v50;
  char v51;

  v38 = a2;
  v4 = type metadata accessor for URL(0);
  v42 = *(_QWORD *)(v4 - 8);
  v43 = v4;
  __chkstk_darwin(v4);
  v39 = (uint64_t *)((char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (uint64_t *)((char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = sub_1000A0980(&qword_100211120);
  v40 = *(_QWORD *)(v10 - 8);
  v41 = v10;
  __chkstk_darwin(v10);
  v45 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1000A0980(&qword_1002103E0);
  __chkstk_darwin(v12);
  v14 = (char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = type metadata accessor for CloudCoordinatorConfiguration(0);
  __chkstk_darwin(v44);
  v16 = (char *)&v37 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  UUID.init(uuidString:)(0xD000000000000024, 0x80000001001AD250);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48))(v14, 1, v6);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    v18 = v7;
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v16, v14, v6);
    v19 = a1;
    v20 = a1[3];
    v21 = a1[4];
    v22 = v19;
    sub_1000A20D8(v19, v20);
    v23 = sub_1000D9918();
    dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for CloudCoordinatorConfiguration.CodingKeys, &type metadata for CloudCoordinatorConfiguration.CodingKeys, v23, v20, v21);
    if (v2)
    {
      sub_1000A2140(v22);
      return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v16, v6);
    }
    else
    {
      v51 = 0;
      v24 = sub_1000A0940((unint64_t *)&unk_1002105C0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v25 = v41;
      KeyedDecodingContainer.decode<A>(_:forKey:)(v9, v6, &v51, v41, v6, v24);
      (*(void (**)(char *, _QWORD *, uint64_t))(v18 + 40))(v16, v9, v6);
      v50 = 1;
      v26 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v50, v25);
      v27 = (int *)v44;
      v28 = (uint64_t *)&v16[*(int *)(v44 + 20)];
      *v28 = v26;
      v28[1] = v29;
      v49 = 2;
      v30 = KeyedDecodingContainer.decode(_:forKey:)(&v49, v25);
      v31 = (uint64_t *)&v16[v27[6]];
      *v31 = v30;
      v31[1] = v32;
      v48 = 3;
      v33 = sub_1000A0940(&qword_1002109E8, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
      v34 = v43;
      KeyedDecodingContainer.decode<A>(_:forKey:)(v39, v43, &v48, v25, v43, v33);
      (*(void (**)(char *, _QWORD *, uint64_t))(v42 + 32))(&v16[v27[7]], v39, v34);
      v35 = sub_1000A0980(&qword_100210740);
      v47 = 4;
      v36 = sub_1000D99DC(&qword_100211130, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <A> [A]);
      KeyedDecodingContainer.decode<A>(_:forKey:)(&v46, v35, &v47, v25, v35, v36);
      (*(void (**)(char *, uint64_t))(v40 + 8))(v45, v25);
      *(_QWORD *)&v16[v27[8]] = v46;
      sub_1000D995C((uint64_t)v16, v38);
      sub_1000A2140(v22);
      return sub_1000D99A0((uint64_t)v16);
    }
  }
  return result;
}

uint64_t sub_1000D9814()
{
  unsigned __int8 *v0;

  return sub_1000D8FF8(*v0);
}

uint64_t sub_1000D981C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1000D9BE0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000D9840(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000D9918();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000D9868(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000D9918();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000D9894@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000D92F4(a1, a2);
}

uint64_t sub_1000D98A8(_QWORD *a1)
{
  return sub_1000D90A4(a1);
}

uint64_t sub_1000D98BC(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_1000A0940(&qword_100211110, type metadata accessor for CloudCoordinatorConfiguration, (uint64_t)&unk_100186C98);
  result = sub_1000A0940(&qword_100211118, type metadata accessor for CloudCoordinatorConfiguration, (uint64_t)&unk_100186C70);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1000D9918()
{
  unint64_t result;

  result = qword_100211128;
  if (!qword_100211128)
  {
    result = swift_getWitnessTable(&unk_100186DF0, &type metadata for CloudCoordinatorConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100211128);
  }
  return result;
}

uint64_t sub_1000D995C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CloudCoordinatorConfiguration(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000D99A0(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for CloudCoordinatorConfiguration(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000D99DC(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_1000A4E14(&qword_100210740);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for CloudCoordinatorConfiguration.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1000D9A88 + 4 * byte_100186BCA[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1000D9ABC + 4 * byte_100186BC5[v4]))();
}

uint64_t sub_1000D9ABC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000D9AC4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000D9ACCLL);
  return result;
}

uint64_t sub_1000D9AD8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000D9AE0);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1000D9AE4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000D9AEC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CloudCoordinatorConfiguration.CodingKeys()
{
  return &type metadata for CloudCoordinatorConfiguration.CodingKeys;
}

unint64_t sub_1000D9B0C()
{
  unint64_t result;

  result = qword_100211148;
  if (!qword_100211148)
  {
    result = swift_getWitnessTable(&unk_100186DC8, &type metadata for CloudCoordinatorConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100211148);
  }
  return result;
}

unint64_t sub_1000D9B54()
{
  unint64_t result;

  result = qword_100211150;
  if (!qword_100211150)
  {
    result = swift_getWitnessTable(&unk_100186D38, &type metadata for CloudCoordinatorConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100211150);
  }
  return result;
}

unint64_t sub_1000D9B9C()
{
  unint64_t result;

  result = qword_100211158;
  if (!qword_100211158)
  {
    result = swift_getWitnessTable(&unk_100186D60, &type metadata for CloudCoordinatorConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100211158);
  }
  return result;
}

uint64_t sub_1000D9BE0(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char v10;

  if (a1 == 0x696669746E656469 && a2 == 0xEA00000000007265)
  {
    v5 = 0xEA00000000007265;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x696669746E656469, 0xEA00000000007265, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0xD000000000000011)
  {
    v7 = 0x80000001001AD280;
    if (a2 == 0x80000001001AD280)
      goto LABEL_13;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x80000001001AD280, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
LABEL_13:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if (a1 == 0xD000000000000013 && a2 == 0x80000001001AD2A0)
  {
    v8 = 0x80000001001AD2A0;
LABEL_19:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013, 0x80000001001AD2A0, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_19;
  }
  if (a1 == 0x726F746365726964 && a2 == 0xEC0000004C525579)
  {
    v9 = 0xEC0000004C525579;
LABEL_25:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x726F746365726964, 0xEC0000004C525579, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_25;
  }
  if (a1 == 0x734449656E6F7ALL && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease(0xE700000000000000);
    return 4;
  }
  else
  {
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(0x734449656E6F7ALL, 0xE700000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v10 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

os_activity_t _BTActivityCreate(_:dso:)(char *description, int a2, char a3, void *dso)
{
  os_activity_t result;
  unsigned int v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  char descriptiona[8];

  if ((a3 & 1) == 0)
  {
    if (description)
    {
      if (dso)
      {
        if (qword_100210178 == -1)
          return _os_activity_create(dso, description, (os_activity_t)qword_100211160, OS_ACTIVITY_FLAG_DEFAULT);
LABEL_18:
        swift_once(&qword_100210178, sub_1000DA3B8);
        return _os_activity_create(dso, description, (os_activity_t)qword_100211160, OS_ACTIVITY_FLAG_DEFAULT);
      }
      goto LABEL_28;
    }
    __break(1u);
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  if ((unint64_t)description >> 32)
    goto LABEL_17;
  if (description >> 11 == 27)
    goto LABEL_27;
  if (description >> 16 > 0x10)
  {
    __break(1u);
  }
  else if ((description & 0xFFFFFF80) == 0)
  {
    if (description <= 0xFF)
    {
      v7 = ((_BYTE)description + 1);
      goto LABEL_12;
    }
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  v8 = (description & 0x3F) << 8;
  v9 = (v8 | (description >> 6)) + 33217;
  v10 = (v8 | (description >> 6) & 0x3F) << 8;
  v11 = (((v10 | (description >> 12) & 0x3F) << 8) | (description >> 18)) - 2122219023;
  v12 = (v10 | (description >> 12)) + 8487393;
  if (description >> 16)
    v7 = v11;
  else
    v7 = v12;
  if (description < 0x800)
    v7 = v9;
LABEL_12:
  *(_QWORD *)descriptiona = (v7 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << ((32 - (__clz(v7) & 0x38)) & 0x38));
  if (!dso)
  {
LABEL_28:
    result = (os_activity_t)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD00000000000001FLL, 0x80000001001AD3A0, "audioaccessoryd/BluetoothServicesConstants.swift", 48, 2, 70, 0);
    __break(1u);
    return result;
  }
  if (qword_100210178 != -1)
    swift_once(&qword_100210178, sub_1000DA3B8);
  return _os_activity_create(dso, descriptiona, (os_activity_t)qword_100211160, OS_ACTIVITY_FLAG_DEFAULT);
}

const char *XPCArguments.CloudDevice.unsafeMutableAddressor()
{
  return "kCloudDevice";
}

uint64_t static XPCArguments.CloudDevice.getter()
{
  return 0x654464756F6C436BLL;
}

void *XPCArguments.CloudDeviceAddress.unsafeMutableAddressor()
{
  return &static XPCArguments.CloudDeviceAddress;
}

unint64_t static XPCArguments.CloudDeviceAddress.getter()
{
  return 0xD000000000000013;
}

id XPCArguments.init()()
{
  return sub_1000DA300(type metadata accessor for XPCArguments);
}

id XPCArguments.__deallocating_deinit()
{
  return sub_1000DA384(type metadata accessor for XPCArguments);
}

void *XPCMessages.fetchDeviceList.unsafeMutableAddressor()
{
  return &static XPCMessages.fetchDeviceList;
}

unint64_t static XPCMessages.fetchDeviceList.getter()
{
  return 0xD000000000000010;
}

void *XPCMessages.fetchNicknameDevice.unsafeMutableAddressor()
{
  return &static XPCMessages.fetchNicknameDevice;
}

unint64_t static XPCMessages.fetchNicknameDevice.getter()
{
  return 0xD000000000000014;
}

void *XPCMessages.nicknameDevice.unsafeMutableAddressor()
{
  return &static XPCMessages.nicknameDevice;
}

uint64_t static XPCMessages.nicknameDevice.getter()
{
  return 0x6D616E6B63694E6BLL;
}

void *XPCMessages.removeDeviceNickname.unsafeMutableAddressor()
{
  return &static XPCMessages.removeDeviceNickname;
}

unint64_t static XPCMessages.removeDeviceNickname.getter()
{
  return 0xD000000000000015;
}

void *XPCMessages.purgeCloudData.unsafeMutableAddressor()
{
  return &static XPCMessages.purgeCloudData;
}

uint64_t static XPCMessages.purgeCloudData.getter()
{
  return 0x6C4365677275506BLL;
}

void *XPCMessages.resetCachedData.unsafeMutableAddressor()
{
  return &static XPCMessages.resetCachedData;
}

unint64_t static XPCMessages.resetCachedData.getter()
{
  return 0xD000000000000010;
}

id XPCMessages.init()()
{
  return sub_1000DA300(type metadata accessor for XPCMessages);
}

id sub_1000DA300(uint64_t (*a1)(void))
{
  void *v1;
  objc_super v3;

  v3.receiver = v1;
  v3.super_class = (Class)a1();
  return objc_msgSendSuper2(&v3, "init");
}

id sub_1000DA33C(void *a1, uint64_t a2, uint64_t (*a3)(void))
{
  objc_super v4;

  v4.receiver = a1;
  v4.super_class = (Class)a3();
  return objc_msgSendSuper2(&v4, "init");
}

id XPCMessages.__deallocating_deinit()
{
  return sub_1000DA384(type metadata accessor for XPCMessages);
}

id sub_1000DA384(uint64_t (*a1)(void))
{
  void *v1;
  objc_super v3;

  v3.receiver = v1;
  v3.super_class = (Class)a1();
  return objc_msgSendSuper2(&v3, "dealloc");
}

uint64_t sub_1000DA3B8()
{
  qword_100211160 = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "_os_activity_current");
  return swift_unknownObjectRetain(qword_100211160);
}

os_activity_t sub_1000DA3E0@<X0>(char *description@<X0>, void *dso@<X2>, os_activity_t *a3@<X8>)
{
  os_activity_t result;

  if (dso && description)
  {
    if (qword_100210178 != -1)
      swift_once(&qword_100210178, sub_1000DA3B8);
    result = _os_activity_create(dso, description, (os_activity_t)qword_100211160, OS_ACTIVITY_FLAG_DEFAULT);
    *a3 = result;
  }
  else
  {
    result = (os_activity_t)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD00000000000001FLL, 0x80000001001AD3A0, "audioaccessoryd/BluetoothServicesConstants.swift", 48, 2, 70, 0);
    __break(1u);
  }
  return result;
}

uint64_t type metadata accessor for XPCArguments()
{
  return objc_opt_self(_TtC15audioaccessoryd12XPCArguments);
}

uint64_t type metadata accessor for XPCMessages()
{
  return objc_opt_self(_TtC15audioaccessoryd11XPCMessages);
}

uint64_t sub_1000DA4F0()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t result;
  uint64_t v9;

  v0 = sub_1000A0980((uint64_t *)&unk_100210840);
  __chkstk_darwin(v0);
  v2 = (char *)&v9 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for URL(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000A09C0(v5, qword_100218D28);
  sub_1000A0A00(v3, (uint64_t)qword_100218D28);
  URL.init(string:)(0x6552646568636143, 0xED00007364726F63);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v7, v2, v3);
    URL.appendingPathComponent(_:isDirectory:)(0xD00000000000001ELL, 0x8000000100186ED0, 1);
    return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  }
  return result;
}

Class sub_1000DA63C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void *v13;
  Swift::String v14;
  uint64_t v15;
  uint64_t v16;
  Swift::String v17;
  void *object;
  Swift::String v19;
  int *v20;
  uint64_t *v21;
  void *v22;
  uint64_t v23;
  Swift::String v24;
  Swift::String v25;
  uint64_t *v26;
  uint64_t v27;
  void *v28;
  Swift::String v29;
  Swift::String v30;
  uint64_t *v31;
  uint64_t v32;
  void *v33;
  Swift::String v34;
  Swift::String v35;
  uint64_t *v36;
  uint64_t v37;
  void *v38;
  Swift::String v39;
  Swift::String v40;
  uint64_t *v41;
  uint64_t v42;
  void *v43;
  Swift::String v44;
  Swift::String v45;
  uint64_t *v46;
  uint64_t v47;
  void *v48;
  Swift::String v49;
  Swift::String v50;
  uint64_t *v51;
  uint64_t v52;
  void *v53;
  Swift::String v54;
  Swift::String v55;
  uint64_t *v56;
  uint64_t v57;
  void *v58;
  Swift::String v59;
  Swift::String v60;
  unint64_t v61;
  objc_class *v62;
  Swift::String v63;
  id v64;
  void *v65;
  objc_class *v66;
  void (*v67)(char *, uint64_t, uint64_t, uint64_t);
  unsigned int (*v68)(char *, uint64_t, uint64_t);
  void *v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  objc_class *v75;
  void *v76;
  Class isa;
  id v78;
  void *v79;
  Swift::String v80;
  Swift::String v81;
  id v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void *v87;
  uint64_t v88;
  char *v89;
  unint64_t v90;
  objc_class *v91;
  void *v92;
  Class v93;
  id v94;
  void *v95;
  void (*v96)(char *, uint64_t);
  Swift::String v97;
  Swift::String v98;
  id v99;
  void *v100;
  uint64_t v101;
  void *v102;
  void *v103;
  Swift::String v104;
  Swift::String v105;
  id v106;
  void *v107;
  uint64_t v108;
  void *v109;
  void *v110;
  Swift::String v111;
  Class v112;
  void *v113;
  Swift::String v114;
  char *v116;
  objc_class *v117;
  char *v118;
  uint64_t v119;
  id v120;
  Class v121;
  unint64_t v122;

  v1 = type metadata accessor for Date(0);
  v117 = *(objc_class **)(v1 - 8);
  __chkstk_darwin(v1);
  v116 = (char *)&v116 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_1000A0980((uint64_t *)&unk_1002103D0);
  __chkstk_darwin(v3);
  v118 = (char *)&v116 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v119 = (uint64_t)&v116 - v6;
  __chkstk_darwin(v7);
  v9 = (char *)&v116 - v8;
  __chkstk_darwin(v10);
  v12 = (char *)&v116 - v11;
  v13 = objc_autoreleasePoolPush();
  sub_1000DC7F8(v0, &v121);
  objc_autoreleasePoolPop(v13);
  v120 = v121;
  v121 = 0;
  v122 = 0xE000000000000000;
  _StringGuts.grow(_:)(205);
  v14._countAndFlagsBits = 0xD000000000000021;
  v14._object = (void *)0x80000001001AD6F0;
  String.append(_:)(v14);
  v15 = type metadata accessor for UUID(0);
  v16 = sub_1000A0940((unint64_t *)&unk_100210750, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v17._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v15, v16);
  object = v17._object;
  String.append(_:)(v17);
  swift_bridgeObjectRelease(object);
  v19._countAndFlagsBits = 8236;
  v19._object = (void *)0xE200000000000000;
  String.append(_:)(v19);
  v20 = (int *)type metadata accessor for DeviceSupportInformationRecord(0);
  v21 = (uint64_t *)(v0 + v20[6]);
  v23 = *v21;
  v22 = (void *)v21[1];
  swift_bridgeObjectRetain(v22);
  v24._countAndFlagsBits = v23;
  v24._object = v22;
  String.append(_:)(v24);
  swift_bridgeObjectRelease(v22);
  v25._object = (void *)0x80000001001AD720;
  v25._countAndFlagsBits = 0xD000000000000017;
  String.append(_:)(v25);
  v26 = (uint64_t *)(v0 + v20[7]);
  v27 = *v26;
  v28 = (void *)v26[1];
  swift_bridgeObjectRetain(v28);
  v29._countAndFlagsBits = v27;
  v29._object = v28;
  String.append(_:)(v29);
  swift_bridgeObjectRelease(v28);
  v30._object = (void *)0x80000001001AD740;
  v30._countAndFlagsBits = 0xD000000000000017;
  String.append(_:)(v30);
  v31 = (uint64_t *)(v0 + v20[9]);
  v32 = *v31;
  v33 = (void *)v31[1];
  swift_bridgeObjectRetain(v33);
  v34._countAndFlagsBits = v32;
  v34._object = v33;
  String.append(_:)(v34);
  swift_bridgeObjectRelease(v33);
  v35._countAndFlagsBits = 0xD000000000000014;
  v35._object = (void *)0x80000001001AD760;
  String.append(_:)(v35);
  v36 = (uint64_t *)(v0 + v20[10]);
  v37 = *v36;
  v38 = (void *)v36[1];
  swift_bridgeObjectRetain(v38);
  v39._countAndFlagsBits = v37;
  v39._object = v38;
  String.append(_:)(v39);
  swift_bridgeObjectRelease(v38);
  v40._object = (void *)0x80000001001AD780;
  v40._countAndFlagsBits = 0xD000000000000013;
  String.append(_:)(v40);
  v41 = (uint64_t *)(v0 + v20[11]);
  v42 = *v41;
  v43 = (void *)v41[1];
  swift_bridgeObjectRetain(v43);
  v44._countAndFlagsBits = v42;
  v44._object = v43;
  String.append(_:)(v44);
  swift_bridgeObjectRelease(v43);
  v45._object = (void *)0x80000001001AD7A0;
  v45._countAndFlagsBits = 0xD000000000000017;
  String.append(_:)(v45);
  v46 = (uint64_t *)(v0 + v20[12]);
  v47 = *v46;
  v48 = (void *)v46[1];
  swift_bridgeObjectRetain(v48);
  v49._countAndFlagsBits = v47;
  v49._object = v48;
  String.append(_:)(v49);
  swift_bridgeObjectRelease(v48);
  v50._countAndFlagsBits = 0xD000000000000018;
  v50._object = (void *)0x80000001001AD7C0;
  String.append(_:)(v50);
  v51 = (uint64_t *)(v0 + v20[13]);
  v52 = *v51;
  v53 = (void *)v51[1];
  swift_bridgeObjectRetain(v53);
  v54._countAndFlagsBits = v52;
  v54._object = v53;
  String.append(_:)(v54);
  swift_bridgeObjectRelease(v53);
  v55._object = (void *)0x80000001001AD7E0;
  v55._countAndFlagsBits = 0xD000000000000013;
  String.append(_:)(v55);
  v56 = (uint64_t *)(v0 + v20[14]);
  v57 = *v56;
  v58 = (void *)v56[1];
  swift_bridgeObjectRetain(v58);
  v59._countAndFlagsBits = v57;
  v59._object = v58;
  String.append(_:)(v59);
  swift_bridgeObjectRelease(v58);
  v60._countAndFlagsBits = 10;
  v60._object = (void *)0xE100000000000000;
  String.append(_:)(v60);
  v62 = v121;
  v61 = v122;
  v121 = 0;
  v122 = 0xE000000000000000;
  _StringGuts.grow(_:)(59);
  v63._countAndFlagsBits = 0x7461657263202020;
  v63._object = (void *)0xEE00203A6E4F6465;
  String.append(_:)(v63);
  v64 = objc_msgSend(v120, "creationDate");
  if (v64)
  {
    v65 = v64;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v64);

    v66 = v117;
    v67 = (void (*)(char *, uint64_t, uint64_t, uint64_t))*((_QWORD *)v117 + 7);
    v67(v9, 0, 1, v1);
  }
  else
  {
    v66 = v117;
    v67 = (void (*)(char *, uint64_t, uint64_t, uint64_t))*((_QWORD *)v117 + 7);
    v67(v9, 1, 1, v1);
  }
  sub_1000D5F2C((uint64_t)v9, (uint64_t)v12, (uint64_t *)&unk_1002103D0);
  v68 = (unsigned int (*)(char *, uint64_t, uint64_t))*((_QWORD *)v66 + 6);
  if (v68(v12, 1, v1))
  {
    sub_1000A1000((uint64_t)v12, (uint64_t *)&unk_1002103D0);
    v69 = (void *)0xE200000000000000;
    v70 = 15932;
  }
  else
  {
    v71 = v116;
    (*((void (**)(char *, char *, uint64_t))v66 + 2))(v116, v12, v1);
    sub_1000A1000((uint64_t)v12, (uint64_t *)&unk_1002103D0);
    v72 = objc_opt_self(NSDateFormatter);
    v117 = v62;
    v73 = v1;
    v74 = v61;
    v75 = v66;
    v76 = (void *)v72;
    isa = Date._bridgeToObjectiveC()().super.isa;
    v78 = objc_msgSend(v76, "localizedStringFromDate:dateStyle:timeStyle:", isa, 2, 2);

    v70 = static String._unconditionallyBridgeFromObjectiveC(_:)(v78);
    v69 = v79;

    v66 = v75;
    v61 = v74;
    v1 = v73;
    v62 = v117;
    (*((void (**)(char *, uint64_t))v66 + 1))(v71, v1);
  }
  v80._countAndFlagsBits = v70;
  v80._object = v69;
  String.append(_:)(v80);
  swift_bridgeObjectRelease(v69);
  v81._countAndFlagsBits = 0x696669646F6D202CLL;
  v81._object = (void *)0xEE00203A6E4F6465;
  String.append(_:)(v81);
  v82 = objc_msgSend(v120, "modificationDate");
  if (v82)
  {
    v83 = v82;
    v84 = (uint64_t)v118;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v82);

    v85 = 0;
  }
  else
  {
    v85 = 1;
    v84 = (uint64_t)v118;
  }
  v67((char *)v84, v85, 1, v1);
  v86 = v119;
  sub_1000D5F2C(v84, v119, (uint64_t *)&unk_1002103D0);
  if (v68((char *)v86, 1, v1))
  {
    sub_1000A1000(v86, (uint64_t *)&unk_1002103D0);
    v87 = (void *)0xE200000000000000;
    v88 = 15932;
  }
  else
  {
    v89 = v116;
    (*((void (**)(char *, uint64_t, uint64_t))v66 + 2))(v116, v86, v1);
    sub_1000A1000(v86, (uint64_t *)&unk_1002103D0);
    v90 = v61;
    v91 = v66;
    v92 = (void *)objc_opt_self(NSDateFormatter);
    v93 = Date._bridgeToObjectiveC()().super.isa;
    v94 = objc_msgSend(v92, "localizedStringFromDate:dateStyle:timeStyle:", v93, 2, 2);

    v88 = static String._unconditionallyBridgeFromObjectiveC(_:)(v94);
    v87 = v95;

    v96 = (void (*)(char *, uint64_t))*((_QWORD *)v91 + 1);
    v61 = v90;
    v96(v89, v1);
  }
  v97._countAndFlagsBits = v88;
  v97._object = v87;
  String.append(_:)(v97);
  swift_bridgeObjectRelease(v87);
  v98._countAndFlagsBits = 0x696669646F6D202CLL;
  v98._object = (void *)0xEF203A7962206465;
  String.append(_:)(v98);
  v99 = objc_msgSend(v120, "modifiedByDevice");
  if (v99)
  {
    v100 = v99;
    v101 = static String._unconditionallyBridgeFromObjectiveC(_:)(v99);
    v103 = v102;

  }
  else
  {
    v103 = (void *)0xE200000000000000;
    v101 = 15932;
  }
  v104._countAndFlagsBits = v101;
  v104._object = v103;
  String.append(_:)(v104);
  swift_bridgeObjectRelease(v103);
  v105._countAndFlagsBits = 0x203A67617465202CLL;
  v105._object = (void *)0xE800000000000000;
  String.append(_:)(v105);
  v106 = objc_msgSend(v120, "recordChangeTag");
  if (v106)
  {
    v107 = v106;
    v108 = static String._unconditionallyBridgeFromObjectiveC(_:)(v106);
    v110 = v109;

  }
  else
  {
    v110 = (void *)0xE200000000000000;
    v108 = 15932;
  }
  v111._countAndFlagsBits = v108;
  v111._object = v110;
  String.append(_:)(v111);
  swift_bridgeObjectRelease(v110);
  v112 = v121;
  v113 = (void *)v122;
  v121 = v62;
  v122 = v61;
  swift_bridgeObjectRetain(v61);
  v114._countAndFlagsBits = (uint64_t)v112;
  v114._object = v113;
  String.append(_:)(v114);

  swift_bridgeObjectRelease(v61);
  swift_bridgeObjectRelease(v113);
  return v121;
}

uint64_t sub_1000DAE60@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  char *v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  id v17;
  void *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  id v23;
  void *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t *v28;
  id v29;
  void *v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t *v34;
  id v35;
  void *v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t *v40;
  id v41;
  void *v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t *v46;
  id v47;
  void *v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t *v52;
  id v53;
  void *v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t *v58;
  id v59;
  void *v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t *v64;
  _QWORD *v65;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;

  v70 = type metadata accessor for Date(0);
  v68 = *(_QWORD *)(v70 - 8);
  __chkstk_darwin(v70);
  v7 = (char *)&v67 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (int *)type metadata accessor for DeviceSupportInformationRecord(0);
  *(_OWORD *)(a3 + v8[5]) = xmmword_1001865C0;
  v9 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16);
  v69 = a1;
  v11(a3, a1, v9);
  v12 = objc_msgSend(a2, "bluetoothAddress");
  v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
  v15 = v14;

  v16 = (uint64_t *)(a3 + v8[6]);
  *v16 = v13;
  v16[1] = v15;
  v17 = objc_msgSend(a2, "budsFirmwareVersion");
  if (v17)
  {
    v18 = v17;
    v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
    v21 = v20;

  }
  else
  {
    v19 = 0;
    v21 = 0xE000000000000000;
  }
  v22 = (uint64_t *)(a3 + v8[7]);
  *v22 = v19;
  v22[1] = v21;
  v23 = objc_msgSend(a2, "caseName");
  if (v23)
  {
    v24 = v23;
    v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
    v27 = v26;

  }
  else
  {
    v25 = 0;
    v27 = 0xE000000000000000;
  }
  v28 = (uint64_t *)(a3 + v8[8]);
  *v28 = v25;
  v28[1] = v27;
  v29 = objc_msgSend(a2, "caseFirmwareVersion");
  if (v29)
  {
    v30 = v29;
    v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
    v33 = v32;

  }
  else
  {
    v31 = 0;
    v33 = 0xE000000000000000;
  }
  v34 = (uint64_t *)(a3 + v8[9]);
  *v34 = v31;
  v34[1] = v33;
  v35 = objc_msgSend(a2, "caseSerialNumber");
  if (v35)
  {
    v36 = v35;
    v37 = static String._unconditionallyBridgeFromObjectiveC(_:)(v35);
    v39 = v38;

  }
  else
  {
    v37 = 0;
    v39 = 0xE000000000000000;
  }
  v40 = (uint64_t *)(a3 + v8[10]);
  *v40 = v37;
  v40[1] = v39;
  v41 = objc_msgSend(a2, "hardwareVersion");
  if (v41)
  {
    v42 = v41;
    v43 = static String._unconditionallyBridgeFromObjectiveC(_:)(v41);
    v45 = v44;

  }
  else
  {
    v43 = 0;
    v45 = 0xE000000000000000;
  }
  v46 = (uint64_t *)(a3 + v8[11]);
  *v46 = v43;
  v46[1] = v45;
  v47 = objc_msgSend(a2, "leftBudSerialNumber");
  if (v47)
  {
    v48 = v47;
    v49 = static String._unconditionallyBridgeFromObjectiveC(_:)(v47);
    v51 = v50;

  }
  else
  {
    v49 = 0;
    v51 = 0xE000000000000000;
  }
  v52 = (uint64_t *)(a3 + v8[12]);
  *v52 = v49;
  v52[1] = v51;
  v53 = objc_msgSend(a2, "rightBudSerialNumber");
  if (v53)
  {
    v54 = v53;
    v55 = static String._unconditionallyBridgeFromObjectiveC(_:)(v53);
    v57 = v56;

  }
  else
  {
    v55 = 0;
    v57 = 0xE000000000000000;
  }
  v58 = (uint64_t *)(a3 + v8[13]);
  *v58 = v55;
  v58[1] = v57;
  v59 = objc_msgSend(a2, "ancAssetVersion");
  if (v59)
  {
    v60 = v59;
    v61 = static String._unconditionallyBridgeFromObjectiveC(_:)(v59);
    v63 = v62;

  }
  else
  {
    v61 = 0;
    v63 = 0xE000000000000000;
  }
  v64 = (uint64_t *)(a3 + v8[14]);
  *v64 = v61;
  v64[1] = v63;
  v65 = (_QWORD *)(a3 + v8[15]);
  *v65 = 0;
  v65[1] = 0xE000000000000000;
  static Date.now.getter(v59);

  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v69, v9);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v68 + 32))(a3 + v8[16], v7, v70);
}

void sub_1000DB1EC(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  int *v31;
  int v32;
  uint64_t v33;
  int *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  void *v96;
  uint64_t v97;
  void *v98;
  id v99;
  uint64_t v100;
  uint64_t v101;
  void (*v102)(uint64_t, char *, uint64_t);
  uint64_t v103;
  void (*v104)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v105;
  void *v106;
  id v107;
  uint64_t v108;
  void (*v109)(uint64_t, char *, uint64_t);
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  char *v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  _QWORD *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  __int128 v129;
  int v130;
  char v131;

  v122 = a2;
  v4 = sub_1000A0980((uint64_t *)&unk_1002103D0);
  __chkstk_darwin(v4);
  v116 = (char *)&v113 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v117 = (char *)&v113 - v7;
  __chkstk_darwin(v8);
  v123 = (uint64_t)&v113 - v9;
  v10 = type metadata accessor for Date(0);
  v118 = *(_QWORD *)(v10 - 8);
  v119 = v10;
  __chkstk_darwin(v10);
  v124 = (char *)&v113 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v14 = (char *)&v113 - v13;
  v15 = type metadata accessor for UUID(0);
  v120 = *(_QWORD *)(v15 - 8);
  v121 = v15;
  __chkstk_darwin(v15);
  v17 = (uint64_t *)((char *)&v113 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v18 = sub_1000A0980(&qword_1002112C0);
  v19 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v21 = (char *)&v113 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v128 = type metadata accessor for DeviceSupportInformationRecord(0);
  __chkstk_darwin(v128);
  v127 = (uint64_t)&v113 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = a1[3];
  v23 = a1[4];
  v125 = a1;
  sub_1000A20D8(a1, v24);
  v25 = sub_1000E10D4();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for DeviceSupportInformationRecord.CodingKeys, &type metadata for DeviceSupportInformationRecord.CodingKeys, v25, v24, v23);
  if (v2)
  {
    v126 = v2;
    v30 = v127;
    sub_1000A2140(v125);
    v31 = (int *)v128;
    v130 = 0;
    v32 = 0;
    LODWORD(v122) = 0;
    LODWORD(v123) = 0;
    LODWORD(v124) = 0;
    goto LABEL_10;
  }
  v26 = v124;
  v27 = v19;
  v115 = v14;
  v131 = 1;
  v28 = sub_1000A2160();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v129, &type metadata for Data, &v131, v18, &type metadata for Data, v28);
  v29 = v21;
  v33 = v127;
  v34 = (int *)v128;
  v35 = v18;
  v36 = v29;
  *(_OWORD *)(v127 + *(int *)(v128 + 20)) = v129;
  LOBYTE(v129) = 0;
  v37 = sub_1000A0940((unint64_t *)&unk_1002105C0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v38 = v121;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v17, v121, &v129, v35, v121, v37);
  (*(void (**)(uint64_t, _QWORD *, uint64_t))(v120 + 32))(v33, v17, v38);
  LOBYTE(v129) = 2;
  v39 = KeyedDecodingContainer.decode(_:forKey:)(&v129, v35);
  v40 = (uint64_t *)(v33 + v34[6]);
  *v40 = v39;
  v40[1] = v41;
  LOBYTE(v129) = 3;
  v42 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v129, v35);
  if (v43)
    v44 = v42;
  else
    v44 = 0;
  if (v43)
    v45 = v43;
  else
    v45 = 0xE000000000000000;
  v46 = (uint64_t *)(v33 + v34[7]);
  *v46 = v44;
  v46[1] = v45;
  LOBYTE(v129) = 4;
  v47 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v129, v35);
  if (v48)
    v49 = v47;
  else
    v49 = 0;
  if (v48)
    v50 = v48;
  else
    v50 = 0xE000000000000000;
  v51 = (uint64_t *)(v33 + v34[8]);
  *v51 = v49;
  v51[1] = v50;
  LOBYTE(v129) = 5;
  v52 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v129, v35);
  if (v53)
    v54 = v52;
  else
    v54 = 0;
  if (v53)
    v55 = v53;
  else
    v55 = 0xE000000000000000;
  v56 = (uint64_t *)(v33 + v34[9]);
  *v56 = v54;
  v56[1] = v55;
  LOBYTE(v129) = 6;
  v57 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v129, v35);
  if (v58)
    v59 = v57;
  else
    v59 = 0;
  if (v58)
    v60 = v58;
  else
    v60 = 0xE000000000000000;
  v61 = (uint64_t *)(v33 + v34[10]);
  *v61 = v59;
  v61[1] = v60;
  LOBYTE(v129) = 7;
  v62 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v129, v35);
  v130 = 1;
  if (v63)
    v64 = v62;
  else
    v64 = 0;
  if (v63)
    v65 = v63;
  else
    v65 = 0xE000000000000000;
  v66 = (uint64_t *)(v33 + v34[11]);
  *v66 = v64;
  v66[1] = v65;
  LOBYTE(v129) = 8;
  v67 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v129, v35);
  if (v68)
    v69 = v67;
  else
    v69 = 0;
  if (v68)
    v70 = v68;
  else
    v70 = 0xE000000000000000;
  v71 = (uint64_t *)(v33 + v34[12]);
  *v71 = v69;
  v71[1] = v70;
  LOBYTE(v129) = 9;
  v72 = v35;
  v73 = v35;
  v74 = v36;
  v75 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v129, v73);
  v126 = 0;
  if (v76)
    v77 = v75;
  else
    v77 = 0;
  if (v76)
    v78 = v76;
  else
    v78 = 0xE000000000000000;
  v79 = (uint64_t *)(v127 + *(int *)(v128 + 52));
  *v79 = v77;
  v79[1] = v78;
  LOBYTE(v129) = 10;
  v80 = v126;
  v81 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v129, v72);
  v126 = v80;
  if (!v80)
  {
    if (v82)
      v83 = v81;
    else
      v83 = 0;
    if (v82)
      v84 = v82;
    else
      v84 = 0xE000000000000000;
    v85 = (uint64_t *)(v127 + *(int *)(v128 + 56));
    *v85 = v83;
    v85[1] = v84;
    LOBYTE(v129) = 11;
    v86 = v126;
    v87 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v129, v72);
    v126 = v86;
    if (v86)
    {
      (*(void (**)(char *, uint64_t))(v27 + 8))(v36, v72);
      LODWORD(v124) = 0;
      v32 = 1;
      LODWORD(v122) = 1;
      LODWORD(v123) = 1;
      goto LABEL_75;
    }
    if (v88)
      v89 = v87;
    else
      v89 = 0;
    v90 = 0xE000000000000000;
    if (v88)
      v90 = v88;
    v91 = v127;
    v92 = v128;
    v93 = (uint64_t *)(v127 + *(int *)(v128 + 60));
    *v93 = v89;
    v93[1] = v90;
    v114 = v91 + *(int *)(v92 + 64);
    static Date.now.getter(v87);
    LOBYTE(v129) = 12;
    v94 = sub_1000A0940(&qword_100210790, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    v95 = v126;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v119, &v129, v72, v119, v94);
    v126 = v95;
    if (v95)
    {
      (*(void (**)(char *, uint64_t))(v27 + 8))(v36, v72);
      v32 = 1;
      LODWORD(v122) = 1;
      LODWORD(v123) = 1;
      LODWORD(v124) = 1;
      goto LABEL_75;
    }
    v128 = *(_QWORD *)(v118 + 48);
    if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v128)(v123, 1, v119) != 1)
    {
      (*(void (**)(char *, uint64_t))(v27 + 8))(v36, v72);
      (*(void (**)(char *, uint64_t, uint64_t))(v118 + 32))(v115, v123, v119);
LABEL_91:
      (*(void (**)(uint64_t, char *, uint64_t))(v118 + 40))(v114, v115, v119);
      v112 = v127;
      sub_1000E0008(v127, v122);
      sub_1000A2140(v125);
      sub_1000E004C(v112);
      return;
    }
    v96 = objc_autoreleasePoolPush();
    v97 = v126;
    sub_1000DC7F8(v127, (Class *)&v129);
    v126 = v97;
    if (v97)
      goto LABEL_92;
    objc_autoreleasePoolPop(v96);
    v98 = (void *)v129;
    v99 = objc_msgSend((id)v129, "modificationDate");

    if (v99)
    {
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v99);

      v100 = (uint64_t)v117;
      v101 = v118;
      v102 = *(void (**)(uint64_t, char *, uint64_t))(v118 + 32);
      v103 = v119;
      v102((uint64_t)v117, v26, v119);
      v104 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v101 + 56);
      v104(v100, 0, 1, v103);
      if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v128)(v100, 1, v103) != 1)
      {
        (*(void (**)(char *, uint64_t))(v27 + 8))(v74, v72);
        v102((uint64_t)v115, v117, v119);
LABEL_90:
        sub_1000A1000(v123, (uint64_t *)&unk_1002103D0);
        goto LABEL_91;
      }
    }
    else
    {
      v104 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v118 + 56);
      v104((uint64_t)v117, 1, 1, v119);
    }
    v96 = objc_autoreleasePoolPush();
    v105 = v126;
    sub_1000DC7F8(v127, (Class *)&v129);
    v126 = v105;
    if (v105)
    {
LABEL_92:
      objc_autoreleasePoolPop(v96);
      __break(1u);
      return;
    }
    objc_autoreleasePoolPop(v96);
    v106 = (void *)v129;
    v107 = objc_msgSend((id)v129, "creationDate");

    if (v107)
    {
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v107);

      v108 = v119;
      v109 = *(void (**)(uint64_t, char *, uint64_t))(v118 + 32);
      v110 = (uint64_t)v116;
      v109((uint64_t)v116, v26, v119);
      v104(v110, 0, 1, v108);
      v111 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v128)(v110, 1, v108);
      if ((_DWORD)v111 != 1)
      {
        (*(void (**)(char *, uint64_t))(v27 + 8))(v74, v72);
        v109((uint64_t)v115, v116, v119);
LABEL_89:
        sub_1000A1000((uint64_t)v117, (uint64_t *)&unk_1002103D0);
        goto LABEL_90;
      }
    }
    else
    {
      v111 = ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v104)(v116, 1, 1, v119);
    }
    static Date.now.getter(v111);
    (*(void (**)(char *, uint64_t))(v27 + 8))(v74, v72);
    sub_1000A1000((uint64_t)v116, (uint64_t *)&unk_1002103D0);
    goto LABEL_89;
  }
  (*(void (**)(char *, uint64_t))(v27 + 8))(v36, v72);
  LODWORD(v123) = 0;
  LODWORD(v124) = 0;
  v32 = 1;
  LODWORD(v122) = 1;
LABEL_75:
  v30 = v127;
  v31 = (int *)v128;
  sub_1000A2140(v125);
  (*(void (**)(uint64_t, uint64_t))(v120 + 8))(v30, v121);
  sub_1000A103C(*(_QWORD *)(v30 + v31[5]), *(_QWORD *)(v30 + v31[5] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v30 + v31[6] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v30 + v31[7] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v30 + v31[8] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v30 + v31[9] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v30 + v31[10] + 8));
  if ((v130 & 1) != 0)
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v30 + v31[11] + 8));
    goto LABEL_11;
  }
LABEL_10:
  if (!v32)
  {
    if (!(_DWORD)v122)
      goto LABEL_12;
LABEL_6:
    swift_bridgeObjectRelease(*(_QWORD *)(v30 + v31[13] + 8));
    if ((v123 & 1) != 0)
      goto LABEL_13;
    goto LABEL_7;
  }
LABEL_11:
  swift_bridgeObjectRelease(*(_QWORD *)(v30 + v31[12] + 8));
  if ((v122 & 1) != 0)
    goto LABEL_6;
LABEL_12:
  if ((_DWORD)v123)
  {
LABEL_13:
    swift_bridgeObjectRelease(*(_QWORD *)(v30 + v31[14] + 8));
    if ((v124 & 1) == 0)
      return;
    goto LABEL_14;
  }
LABEL_7:
  if (!(_DWORD)v124)
    return;
LABEL_14:
  swift_bridgeObjectRelease(*(_QWORD *)(v30 + v31[15] + 8));
  (*(void (**)(uint64_t, uint64_t))(v118 + 8))(v30 + v31[16], v119);
}

void sub_1000DBD68(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  id v25;
  uint64_t ObjectType;
  NSString v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  id v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  unint64_t v44;
  uint64_t v45;
  _BYTE *v46;
  unint64_t v47;
  uint64_t v48;
  _BYTE *v49;
  char *v50;
  uint64_t v51;
  int *v52;
  int **v53;
  unint64_t v54;
  int *v55;
  unint64_t v56;
  int **v57;
  unint64_t v58;
  int *v59;
  int **v60;
  unint64_t v61;
  int *v62;
  int **v63;
  unint64_t v64;
  int *v65;
  int **v66;
  unint64_t v67;
  int *v68;
  int **v69;
  unint64_t v70;
  int *v71;
  int **v72;
  unint64_t v73;
  int *v74;
  int **v75;
  unint64_t v76;
  int *v77;
  int **v78;
  id v79;
  id v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  id v85;
  NSString v86;
  id v87;
  uint64_t v88;
  void *v89;
  char *v90;
  id v91;
  id v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t *v95;
  id v96;
  uint64_t v97;
  void *v98;
  void (*v99)(char *, char *, uint64_t);
  uint64_t v100;
  uint64_t v101;
  void (*v102)(uint64_t, uint64_t, uint64_t, uint64_t);
  int v103;
  uint64_t v104;
  id v105;
  void *v106;
  void (*v107)(uint64_t, char *, uint64_t);
  uint64_t v108;
  uint64_t v109;
  int *v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  char *v114;
  char *v115;
  char *v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  int *v121;
  unint64_t v122;
  id v123;

  v5 = sub_1000A0980((uint64_t *)&unk_1002103D0);
  __chkstk_darwin(v5);
  v116 = (char *)&v109 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v9 = (char *)&v109 - v8;
  v10 = type metadata accessor for Date(0);
  v117 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v115 = (char *)&v109 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v14 = (char *)&v109 - v13;
  v15 = sub_1000A0980(&qword_1002103E0);
  __chkstk_darwin(v15);
  v17 = (char *)&v109 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for UUID(0);
  v119 = *(_QWORD *)(v18 - 8);
  v120 = v18;
  __chkstk_darwin(v18);
  v118 = (char *)&v109 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = CKRecord.recordType.getter(v20);
  v23 = v22;
  if (v21 == 0xD00000000000001ELL && v22 == 0x8000000100186ED0)
  {
    swift_bridgeObjectRelease(0x8000000100186ED0);
  }
  else
  {
    v24 = _stringCompareWithSmolCheck(_:_:expecting:)(v21, v22, 0xD00000000000001ELL, 0x8000000100186ED0, 0);
    swift_bridgeObjectRelease(v23);
    if ((v24 & 1) == 0)
    {
      v47 = sub_1000E02D4();
      v48 = swift_allocError(&type metadata for DeviceSupportInformationRecord.DeviceSupportInformationRecordError, v47, 0, 0);
      *v49 = 0;
      swift_willThrow(v48);

      return;
    }
  }
  v113 = v10;
  v114 = v14;
  v112 = v9;
  v25 = objc_msgSend(a1, "encryptedValues");
  ObjectType = swift_getObjectType(v25);
  v27 = String._bridgeToObjectiveC()();
  v28 = objc_msgSend(v25, "objectForKeyedSubscript:", v27);

  if (!v28)
    goto LABEL_9;
  v123 = v28;
  v30 = sub_1000A0980(&qword_100210400);
  v29 = swift_dynamicCast(&v121, &v123, v30, &type metadata for String, 6);
  if ((v29 & 1) == 0)
    goto LABEL_9;
  v109 = v2;
  v31 = v122;
  v110 = v121;
  v111 = a2;
  v32 = objc_msgSend(a1, "recordID");
  v33 = objc_msgSend(v32, "recordName");

  v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(v33);
  v36 = v35;

  UUID.init(uuidString:)(v34, v36);
  swift_bridgeObjectRelease(v36);
  v38 = v119;
  v37 = v120;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v119 + 48))(v17, 1, v120) != 1)
  {
    v50 = v118;
    (*(void (**)(char *, char *, uint64_t))(v38 + 32))(v118, v17, v37);
    v51 = v111;
    (*(void (**)(uint64_t, char *, uint64_t))(v38 + 16))(v111, v50, v37);
    v52 = (int *)type metadata accessor for DeviceSupportInformationRecord(0);
    v53 = (int **)(v51 + v52[6]);
    *v53 = v110;
    v53[1] = (int *)v31;
    CKRecordKeyValueSetting.subscript.getter(&v121, 0xD000000000000013, 0x80000001001AD540, ObjectType, &type metadata for String, &protocol witness table for String);
    v55 = v121;
    v54 = v122;
    if (!v122)
      v55 = 0;
    v56 = 0xE000000000000000;
    if (!v122)
      v54 = 0xE000000000000000;
    v57 = (int **)(v51 + v52[7]);
    *v57 = v55;
    v57[1] = (int *)v54;
    CKRecordKeyValueSetting.subscript.getter(&v121, 0x656D614E65736163, 0xE800000000000000, ObjectType, &type metadata for String, &protocol witness table for String);
    v59 = v121;
    v58 = v122;
    if (!v122)
    {
      v59 = 0;
      v58 = 0xE000000000000000;
    }
    v60 = (int **)(v51 + v52[8]);
    *v60 = v59;
    v60[1] = (int *)v58;
    CKRecordKeyValueSetting.subscript.getter(&v121, 0xD000000000000013, 0x80000001001AD560, ObjectType, &type metadata for String, &protocol witness table for String);
    v62 = v121;
    v61 = v122;
    if (!v122)
    {
      v62 = 0;
      v61 = 0xE000000000000000;
    }
    v63 = (int **)(v51 + v52[9]);
    *v63 = v62;
    v63[1] = (int *)v61;
    CKRecordKeyValueSetting.subscript.getter(&v121, 0xD000000000000010, 0x80000001001AD580, ObjectType, &type metadata for String, &protocol witness table for String);
    v65 = v121;
    v64 = v122;
    if (!v122)
    {
      v65 = 0;
      v64 = 0xE000000000000000;
    }
    v66 = (int **)(v51 + v52[10]);
    *v66 = v65;
    v66[1] = (int *)v64;
    CKRecordKeyValueSetting.subscript.getter(&v121, 0x6572617764726168, 0xEF6E6F6973726556, ObjectType, &type metadata for String, &protocol witness table for String);
    v68 = v121;
    v67 = v122;
    if (!v122)
    {
      v68 = 0;
      v67 = 0xE000000000000000;
    }
    v69 = (int **)(v51 + v52[11]);
    *v69 = v68;
    v69[1] = (int *)v67;
    CKRecordKeyValueSetting.subscript.getter(&v121, 0xD000000000000013, 0x80000001001AD5A0, ObjectType, &type metadata for String, &protocol witness table for String);
    v71 = v121;
    v70 = v122;
    if (!v122)
    {
      v71 = 0;
      v70 = 0xE000000000000000;
    }
    v72 = (int **)(v51 + v52[12]);
    *v72 = v71;
    v72[1] = (int *)v70;
    CKRecordKeyValueSetting.subscript.getter(&v121, 0xD000000000000014, 0x80000001001AD5C0, ObjectType, &type metadata for String, &protocol witness table for String);
    v74 = v121;
    v73 = v122;
    if (!v122)
    {
      v74 = 0;
      v73 = 0xE000000000000000;
    }
    v75 = (int **)(v51 + v52[13]);
    *v75 = v74;
    v75[1] = (int *)v73;
    CKRecordKeyValueSetting.subscript.getter(&v121, 0x7465737341434E41, 0xEF6E6F6973726556, ObjectType, &type metadata for String, &protocol witness table for String);
    v77 = v121;
    v76 = v122;
    if (!v122)
    {
      v77 = 0;
      v76 = 0xE000000000000000;
    }
    v78 = (int **)(v51 + v52[14]);
    *v78 = v77;
    v78[1] = (int *)v76;
    v79 = objc_msgSend(objc_allocWithZone((Class)NSKeyedArchiver), "initRequiringSecureCoding:", 1);
    objc_msgSend(a1, "encodeSystemFieldsWithCoder:", v79);
    objc_msgSend(v79, "finishEncoding");
    v80 = objc_msgSend(v79, "encodedData");
    v81 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    v83 = v82;

    v110 = v52;
    v84 = (uint64_t *)(v51 + v52[5]);
    *v84 = v81;
    v84[1] = v83;
    v85 = objc_msgSend(a1, "valuesByKey");
    v86 = String._bridgeToObjectiveC()();
    v87 = objc_msgSend(v85, "objectForKeyedSubscript:", v86);
    swift_unknownObjectRelease(v85);

    if (v87)
    {
      v88 = objc_opt_self(CKReference);
      v89 = (void *)swift_dynamicCastObjCClass(v87, v88);
      v90 = v115;
      if (v89)
      {
        v91 = objc_msgSend(v89, "recordID");
        v92 = objc_msgSend(v91, "recordName");

        v93 = static String._unconditionallyBridgeFromObjectiveC(_:)(v92);
        v56 = v94;
        swift_unknownObjectRelease(v87);

      }
      else
      {
        swift_unknownObjectRelease(v87);
        v93 = 0;
      }
    }
    else
    {
      v93 = 0;
      v90 = v115;
    }
    v95 = (uint64_t *)(v111 + v110[15]);
    *v95 = v93;
    v95[1] = v56;
    v96 = objc_msgSend(a1, "modificationDate");
    v97 = v117;
    if (v96)
    {
      v98 = v96;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v96);

      v99 = *(void (**)(char *, char *, uint64_t))(v97 + 32);
      v101 = (uint64_t)v112;
      v100 = v113;
      v99(v112, v90, v113);
      v102 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v97 + 56);
      v102(v101, 0, 1, v100);
      v103 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v97 + 48))(v101, 1, v100);
      v104 = (uint64_t)v116;
      if (v103 != 1)
      {
        swift_unknownObjectRelease(v25);

        (*(void (**)(char *, uint64_t))(v119 + 8))(v118, v120);
        v99(v114, (char *)v101, v100);
LABEL_46:
        v99((char *)(v111 + v110[16]), v114, v100);
        return;
      }
    }
    else
    {
      v102 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v117 + 56);
      v101 = (uint64_t)v112;
      v100 = v113;
      v102((uint64_t)v112, 1, 1, v113);
      v104 = (uint64_t)v116;
    }
    v105 = objc_msgSend(a1, "creationDate");
    if (v105)
    {
      v106 = v105;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v105);

      v107 = *(void (**)(uint64_t, char *, uint64_t))(v97 + 32);
      v107(v104, v90, v100);
      v102(v104, 0, 1, v100);
      v108 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v97 + 48))(v104, 1, v100);
      if ((_DWORD)v108 != 1)
      {
        swift_unknownObjectRelease(v25);

        (*(void (**)(char *, uint64_t))(v119 + 8))(v118, v120);
        v107((uint64_t)v114, (char *)v104, v100);
LABEL_45:
        sub_1000A1000(v101, (uint64_t *)&unk_1002103D0);
        v99 = *(void (**)(char *, char *, uint64_t))(v97 + 32);
        goto LABEL_46;
      }
    }
    else
    {
      v108 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v102)(v104, 1, 1, v100);
    }
    static Date.now.getter(v108);
    swift_unknownObjectRelease(v25);

    (*(void (**)(char *, uint64_t))(v119 + 8))(v118, v120);
    sub_1000A1000(v104, (uint64_t *)&unk_1002103D0);
    goto LABEL_45;
  }
  swift_bridgeObjectRelease(v31);
  v29 = sub_1000A1000((uint64_t)v17, &qword_1002103E0);
LABEL_9:
  v39 = static os_log_type_t.error.getter(v29);
  if (qword_1002101E0 != -1)
    swift_once(&qword_1002101E0, sub_1001687B0);
  v40 = qword_100218DE8;
  v41 = sub_1000A0980((uint64_t *)&unk_1002103C0);
  v42 = swift_allocObject(v41, 72, 7);
  *(_OWORD *)(v42 + 16) = xmmword_100184870;
  *(_QWORD *)(v42 + 56) = sub_1000AB31C(0, (unint64_t *)&qword_1002103F0, CKRecord_ptr);
  *(_QWORD *)(v42 + 64) = sub_1000AB3A8();
  *(_QWORD *)(v42 + 32) = a1;
  v43 = a1;
  os_log(_:dso:log:_:_:)(v39, &_mh_execute_header, v40, "Invalid DeviceSupportInformationRecord - %@", 43, 2, v42);
  swift_bridgeObjectRelease(v42);
  v44 = sub_1000E02D4();
  v45 = swift_allocError(&type metadata for DeviceSupportInformationRecord.DeviceSupportInformationRecordError, v44, 0, 0);
  *v46 = 2;
  swift_willThrow(v45);
  swift_unknownObjectRelease(v25);

}

void sub_1000DC7F8(uint64_t a1@<X0>, Class *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  objc_class *v8;
  Class v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  Swift::String v16;
  void *v17;
  Swift::String v18;
  Class isa;
  Swift::String v20;
  CKRecordID v21;
  uint64_t v22;
  Swift::String v23;
  uint64_t v24;
  Class v25;

  v4 = type metadata accessor for DeviceSupportInformationRecord(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100109DEC(*(_QWORD *)(a1 + *(int *)(v7 + 20)), *(_QWORD *)(a1 + *(int *)(v7 + 20) + 8));
  v9 = v8;
  sub_1000E0008(a1, (uint64_t)v6);
  if (v9)
  {
    sub_1000E004C((uint64_t)v6);
    v25 = v9;
    sub_1000DCA64((id *)&v25);
    v10 = -[objc_class valueStore](v9, "valueStore");
    objc_msgSend(v10, "resetChangedKeys");

    v11 = -[objc_class encryptedValueStore](v9, "encryptedValueStore");
    objc_msgSend(v11, "resetChangedKeys");

  }
  else
  {
    sub_1000AB31C(0, (unint64_t *)&qword_1002103F0, CKRecord_ptr);
    v12 = sub_1000AB31C(0, &qword_1002111C0, CKRecordID_ptr);
    v13 = UUID.uuidString.getter(v12);
    v15 = v14;
    sub_1000AB31C(0, (unint64_t *)&unk_100210850, CKRecordZoneID_ptr);
    v16._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)(CKCurrentUserDefaultName);
    v16._object = v17;
    v18._object = (void *)0x80000001001AA990;
    v18._countAndFlagsBits = 0xD00000000000001ELL;
    isa = CKRecordZoneID.init(zoneName:ownerName:)(v18, v16).super.isa;
    v20._countAndFlagsBits = v13;
    v20._object = v15;
    v21.super.isa = CKRecordID.init(recordName:zoneID:)(v20, (CKRecordZoneID)isa).super.isa;
    v22 = static os_log_type_t.default.getter(v21.super.isa);
    if (qword_1002101E0 != -1)
      swift_once(&qword_1002101E0, sub_1001687B0);
    os_log(_:dso:log:_:_:)(v22, &_mh_execute_header, qword_100218DE8, "Failed to unarchive record -- creating new support info record", 62, 2, _swiftEmptyArrayStorage);
    v23._object = (void *)0x8000000100186ED0;
    v23._countAndFlagsBits = 0xD00000000000001ELL;
    v9 = CKRecord.init(recordType:recordID:)(v23, v21).super.isa;
    sub_1000E004C((uint64_t)v6);
    v25 = v9;
    sub_1000DCA64((id *)&v25);
  }
  *a2 = v9;
}

uint64_t sub_1000DCA64(id *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  NSString v24;
  id v25;
  id v26;
  NSString v27;
  id v28;
  uint64_t ObjectType;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  char v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  id *v80;
  int *v81;
  uint64_t v82;
  uint64_t v83;
  void *v84;
  void *v85;

  v2 = sub_1000A0980(&qword_1002103E0);
  __chkstk_darwin(v2);
  v4 = (char *)&v77 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for UUID(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v78 = (char *)&v77 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = static os_log_type_t.debug.getter(v8);
  if (qword_1002101E0 != -1)
    swift_once(&qword_1002101E0, sub_1001687B0);
  v10 = qword_100218DE8;
  v11 = sub_1000A0980((uint64_t *)&unk_1002103C0);
  v12 = swift_allocObject(v11, 72, 7);
  *(_OWORD *)(v12 + 16) = xmmword_100184870;
  v80 = a1;
  v13 = *a1;
  v14 = objc_msgSend(v13, "description");
  v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
  v17 = v16;

  *(_QWORD *)(v12 + 56) = &type metadata for String;
  *(_QWORD *)(v12 + 64) = sub_1000A0DF4();
  *(_QWORD *)(v12 + 32) = v15;
  *(_QWORD *)(v12 + 40) = v17;
  os_log(_:dso:log:_:_:)(v9, &_mh_execute_header, v10, "Updating device support info record: %@", 39, 2, v12);
  swift_bridgeObjectRelease(v12);
  v81 = (int *)type metadata accessor for DeviceSupportInformationRecord(0);
  v18 = v79;
  UUID.init(uuidString:)(*(_QWORD *)(v79 + v81[15]), *(_QWORD *)(v79 + v81[15] + 8));
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    sub_1000A1000((uint64_t)v4, &qword_1002103E0);
  }
  else
  {
    v19 = v78;
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v78, v4, v5);
    v20 = objc_msgSend(v13, "valuesByKey");
    UUID.uuidString.getter(v20);
    v22 = v21;
    v23 = objc_allocWithZone((Class)CKRecordID);
    v24 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v22);
    v25 = objc_msgSend(v23, "initWithRecordName:", v24);

    v26 = objc_msgSend(objc_allocWithZone((Class)CKReference), "initWithRecordID:action:", v25, 1);
    v27 = String._bridgeToObjectiveC()();
    objc_msgSend(v20, "setObject:forKeyedSubscript:", v26, v27);
    swift_unknownObjectRelease(v20);

    (*(void (**)(char *, uint64_t))(v6 + 8))(v19, v5);
  }
  v28 = objc_msgSend(*v80, "encryptedValues");
  ObjectType = swift_getObjectType(v28);
  v80 = (id *)0xD000000000000010;
  CKRecordKeyValueSetting.subscript.getter(&v82, 0xD000000000000010, 0x80000001001AA8D0, ObjectType, &type metadata for String, &protocol witness table for String);
  v30 = v83;
  v31 = v18;
  v32 = (_QWORD *)(v18 + v81[6]);
  v34 = *v32;
  v33 = v32[1];
  if (!v83)
    goto LABEL_11;
  if (v82 == v34 && v83 == v33)
  {
    swift_bridgeObjectRelease(v83);
    goto LABEL_12;
  }
  v35 = _stringCompareWithSmolCheck(_:_:expecting:)(v82, v83, *v32, v32[1], 0);
  swift_bridgeObjectRelease(v30);
  if ((v35 & 1) == 0)
  {
LABEL_11:
    v84 = &type metadata for String;
    v85 = &protocol witness table for String;
    v82 = v34;
    v83 = v33;
    swift_bridgeObjectRetain(v33);
    CKRecordKeyValueSetting.subscript.setter(&v82, v80, 0x80000001001AA8D0, ObjectType);
  }
LABEL_12:
  CKRecordKeyValueSetting.subscript.getter(&v82, 0xD000000000000013, 0x80000001001AD540, ObjectType, &type metadata for String, &protocol witness table for String);
  v36 = v83;
  v37 = (_QWORD *)(v31 + v81[7]);
  v39 = *v37;
  v38 = v37[1];
  if (!v83)
    goto LABEL_17;
  if (v82 != v39 || v83 != v38)
  {
    v40 = _stringCompareWithSmolCheck(_:_:expecting:)(v82, v83, *v37, v37[1], 0);
    swift_bridgeObjectRelease(v36);
    if ((v40 & 1) != 0)
      goto LABEL_18;
LABEL_17:
    v84 = &type metadata for String;
    v85 = &protocol witness table for String;
    v82 = v39;
    v83 = v38;
    swift_bridgeObjectRetain(v38);
    CKRecordKeyValueSetting.subscript.setter(&v82, 0xD000000000000013, 0x80000001001AD540, ObjectType);
    goto LABEL_18;
  }
  swift_bridgeObjectRelease(v83);
LABEL_18:
  CKRecordKeyValueSetting.subscript.getter(&v82, 0x656D614E65736163, 0xE800000000000000, ObjectType, &type metadata for String, &protocol witness table for String);
  v41 = v83;
  v42 = (_QWORD *)(v31 + v81[8]);
  v44 = *v42;
  v43 = v42[1];
  if (!v83)
    goto LABEL_23;
  if (v82 == v44 && v83 == v43)
  {
    swift_bridgeObjectRelease(v83);
    goto LABEL_24;
  }
  v45 = _stringCompareWithSmolCheck(_:_:expecting:)(v82, v83, *v42, v42[1], 0);
  swift_bridgeObjectRelease(v41);
  if ((v45 & 1) == 0)
  {
LABEL_23:
    v84 = &type metadata for String;
    v85 = &protocol witness table for String;
    v82 = v44;
    v83 = v43;
    swift_bridgeObjectRetain(v43);
    CKRecordKeyValueSetting.subscript.setter(&v82, 0x656D614E65736163, 0xE800000000000000, ObjectType);
  }
LABEL_24:
  CKRecordKeyValueSetting.subscript.getter(&v82, 0xD000000000000013, 0x80000001001AD560, ObjectType, &type metadata for String, &protocol witness table for String);
  v46 = v83;
  v47 = (_QWORD *)(v31 + v81[9]);
  v49 = *v47;
  v48 = v47[1];
  if (!v83)
    goto LABEL_29;
  if (v82 != v49 || v83 != v48)
  {
    v50 = _stringCompareWithSmolCheck(_:_:expecting:)(v82, v83, *v47, v47[1], 0);
    swift_bridgeObjectRelease(v46);
    if ((v50 & 1) != 0)
      goto LABEL_30;
LABEL_29:
    v84 = &type metadata for String;
    v85 = &protocol witness table for String;
    v82 = v49;
    v83 = v48;
    swift_bridgeObjectRetain(v48);
    CKRecordKeyValueSetting.subscript.setter(&v82, 0xD000000000000013, 0x80000001001AD560, ObjectType);
    goto LABEL_30;
  }
  swift_bridgeObjectRelease(v83);
LABEL_30:
  CKRecordKeyValueSetting.subscript.getter(&v82, v80, 0x80000001001AD580, ObjectType, &type metadata for String, &protocol witness table for String);
  v51 = v83;
  v52 = (_QWORD *)(v31 + v81[10]);
  v54 = *v52;
  v53 = v52[1];
  if (!v83)
    goto LABEL_35;
  if (v82 == v54 && v83 == v53)
  {
    swift_bridgeObjectRelease(v83);
    goto LABEL_36;
  }
  v55 = _stringCompareWithSmolCheck(_:_:expecting:)(v82, v83, *v52, v52[1], 0);
  swift_bridgeObjectRelease(v51);
  if ((v55 & 1) == 0)
  {
LABEL_35:
    v84 = &type metadata for String;
    v85 = &protocol witness table for String;
    v82 = v54;
    v83 = v53;
    swift_bridgeObjectRetain(v53);
    CKRecordKeyValueSetting.subscript.setter(&v82, v80, 0x80000001001AD580, ObjectType);
  }
LABEL_36:
  CKRecordKeyValueSetting.subscript.getter(&v82, 0x6572617764726168, 0xEF6E6F6973726556, ObjectType, &type metadata for String, &protocol witness table for String);
  v56 = v83;
  v57 = (_QWORD *)(v31 + v81[11]);
  v59 = *v57;
  v58 = v57[1];
  if (!v83)
    goto LABEL_41;
  if (v82 != v59 || v83 != v58)
  {
    v60 = _stringCompareWithSmolCheck(_:_:expecting:)(v82, v83, *v57, v57[1], 0);
    swift_bridgeObjectRelease(v56);
    if ((v60 & 1) != 0)
      goto LABEL_42;
LABEL_41:
    v84 = &type metadata for String;
    v85 = &protocol witness table for String;
    v82 = v59;
    v83 = v58;
    swift_bridgeObjectRetain(v58);
    CKRecordKeyValueSetting.subscript.setter(&v82, 0x6572617764726168, 0xEF6E6F6973726556, ObjectType);
    goto LABEL_42;
  }
  swift_bridgeObjectRelease(v83);
LABEL_42:
  CKRecordKeyValueSetting.subscript.getter(&v82, 0xD000000000000013, 0x80000001001AD5A0, ObjectType, &type metadata for String, &protocol witness table for String);
  v61 = v83;
  v62 = (_QWORD *)(v31 + v81[12]);
  v64 = *v62;
  v63 = v62[1];
  if (!v83)
    goto LABEL_47;
  if (v82 == v64 && v83 == v63)
  {
    swift_bridgeObjectRelease(v83);
    goto LABEL_48;
  }
  v65 = _stringCompareWithSmolCheck(_:_:expecting:)(v82, v83, *v62, v62[1], 0);
  swift_bridgeObjectRelease(v61);
  if ((v65 & 1) == 0)
  {
LABEL_47:
    v84 = &type metadata for String;
    v85 = &protocol witness table for String;
    v82 = v64;
    v83 = v63;
    swift_bridgeObjectRetain(v63);
    CKRecordKeyValueSetting.subscript.setter(&v82, 0xD000000000000013, 0x80000001001AD5A0, ObjectType);
  }
LABEL_48:
  CKRecordKeyValueSetting.subscript.getter(&v82, 0xD000000000000014, 0x80000001001AD5C0, ObjectType, &type metadata for String, &protocol witness table for String);
  v66 = v83;
  v67 = (_QWORD *)(v31 + v81[13]);
  v69 = *v67;
  v68 = v67[1];
  if (!v83)
    goto LABEL_53;
  if (v82 != v69 || v83 != v68)
  {
    v70 = _stringCompareWithSmolCheck(_:_:expecting:)(v82, v83, *v67, v67[1], 0);
    swift_bridgeObjectRelease(v66);
    if ((v70 & 1) != 0)
      goto LABEL_54;
LABEL_53:
    v84 = &type metadata for String;
    v85 = &protocol witness table for String;
    v82 = v69;
    v83 = v68;
    swift_bridgeObjectRetain(v68);
    CKRecordKeyValueSetting.subscript.setter(&v82, 0xD000000000000014, 0x80000001001AD5C0, ObjectType);
    goto LABEL_54;
  }
  swift_bridgeObjectRelease(v83);
LABEL_54:
  CKRecordKeyValueSetting.subscript.getter(&v82, 0x7465737341434E41, 0xEF6E6F6973726556, ObjectType, &type metadata for String, &protocol witness table for String);
  v71 = v83;
  v72 = (_QWORD *)(v31 + v81[14]);
  v74 = *v72;
  v73 = v72[1];
  if (!v83)
    goto LABEL_59;
  if (v82 == v74 && v83 == v73)
  {
    swift_unknownObjectRelease(v28);
    return swift_bridgeObjectRelease(v71);
  }
  v76 = _stringCompareWithSmolCheck(_:_:expecting:)(v82, v83, *v72, v72[1], 0);
  swift_bridgeObjectRelease(v71);
  if ((v76 & 1) == 0)
  {
LABEL_59:
    v84 = &type metadata for String;
    v85 = &protocol witness table for String;
    v82 = v74;
    v83 = v73;
    swift_bridgeObjectRetain(v73);
    CKRecordKeyValueSetting.subscript.setter(&v82, 0x7465737341434E41, 0xEF6E6F6973726556, ObjectType);
  }
  return swift_unknownObjectRelease(v28);
}

uint64_t sub_1000DD42C(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  id v7;
  id v8;
  void *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  char v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  BOOL v51;
  id v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  BOOL v61;
  id v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  id v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  id v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  id v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t v97;
  id v98;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t *v104;
  uint64_t v105;
  uint64_t v106;
  id v107;
  void *v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t *v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char v118;
  char v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  char v129;
  uint64_t v130;
  char v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  BOOL v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155[6];
  char v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160[6];
  char v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165[6];
  char v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170[6];
  char v171;
  uint64_t v172;
  char *v173;
  uint64_t v174;
  _QWORD v175[10];
  _QWORD v176[10];
  _QWORD v177[10];
  _QWORD v178[10];
  _QWORD v179[6];
  char v180;
  uint64_t v181;
  char *v182;
  uint64_t v183;
  _QWORD v184[6];
  char v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  _QWORD v189[6];
  char v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  _QWORD v194[6];
  char v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;

  v3 = type metadata accessor for Date(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v140 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1000DDF50(a1);
  if ((v7 & 1) != 0)
  {
    v8 = objc_msgSend(a1, "budsFirmwareVersion");
    if (v8)
    {
      v9 = v8;
      v154 = v4;
      v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
      v12 = v11;

      v13 = *(int *)(type metadata accessor for DeviceSupportInformationRecord(0) + 28);
      v14 = (uint64_t *)(v1 + v13);
      v15 = *(_QWORD *)(v1 + v13);
      v16 = *(_QWORD *)(v1 + v13 + 8);
      v17 = v15 == v10 && v16 == v12;
      if (v17
        || (_stringCompareWithSmolCheck(_:_:expecting:)(*(_QWORD *)(v1 + v13), *(_QWORD *)(v1 + v13 + 8), v10, v12, 0) & 1) != 0)
      {
        swift_bridgeObjectRelease(v12);
      }
      else
      {
        v144 = v6;
        v153 = v3;
        swift_bridgeObjectRetain(v16);
        sub_1000D5C64(v15, v16, v155);
        v28 = v155[1];
        v150 = v155[2];
        v151 = v155[0];
        v152 = v155[4];
        v29 = v156;
        v148 = v155[5];
        v149 = v155[3];
        v30 = v159;
        v146 = v158;
        v147 = v157;
        sub_1000D5F2C((uint64_t)v155, (uint64_t)v178, &qword_100210EF8);
        if (v178[1])
        {
          v31 = v29 & 1;
          v32 = v151;
          v33 = v152;
          v35 = v149;
          v34 = v150;
          v37 = v147;
          v36 = v148;
          v38 = v146;
        }
        else
        {
          if (qword_100210168 != -1)
            swift_once(&qword_100210168, sub_1000D5188);
          v28 = *((_QWORD *)&xmmword_100218CA8 + 1);
          v150 = qword_100218CB8;
          v151 = xmmword_100218CA8;
          v148 = *((_QWORD *)&xmmword_100218CC8 + 1);
          v33 = xmmword_100218CC8;
          v149 = qword_100218CC0;
          LODWORD(v152) = byte_100218CD8;
          v30 = *((_QWORD *)&xmmword_100218CE8 + 1);
          v146 = xmmword_100218CE8;
          v147 = qword_100218CE0;
          swift_bridgeObjectRetain(*((_QWORD *)&xmmword_100218CE8 + 1));
          swift_bridgeObjectRetain(v28);
          swift_bridgeObjectRetain(v33);
          v38 = v146;
          v37 = v147;
          v36 = v148;
          v35 = v149;
          v34 = v150;
          v32 = v151;
          v31 = v152;
        }
        v194[0] = v32;
        v194[1] = v28;
        v145 = v30;
        v146 = v28;
        v194[2] = v34;
        v194[3] = v35;
        v152 = v33;
        v194[4] = v33;
        v194[5] = v36;
        v195 = v31;
        v196 = v37;
        v197 = v38;
        v198 = v30;
        swift_bridgeObjectRetain(v12);
        v142 = v10;
        sub_1000D5C64(v10, v12, v160);
        v39 = v160[1];
        v147 = v160[0];
        v151 = v160[2];
        v40 = v160[4];
        v150 = v160[3];
        v41 = v161;
        v149 = v160[5];
        v148 = v162;
        v42 = v164;
        v143 = v163;
        sub_1000D5F2C((uint64_t)v160, (uint64_t)v177, &qword_100210EF8);
        v141 = v16;
        if (v177[1])
        {
          v43 = v41 & 1;
          v44 = v39;
          v45 = v147;
          v46 = v148;
          v47 = v143;
          v6 = v144;
          v49 = v150;
          v48 = v151;
          v50 = v149;
        }
        else
        {
          v6 = v144;
          if (qword_100210168 != -1)
            swift_once(&qword_100210168, sub_1000D5188);
          v44 = *((_QWORD *)&xmmword_100218CA8 + 1);
          v40 = xmmword_100218CC8;
          v150 = qword_100218CC0;
          v151 = qword_100218CB8;
          v149 = *((_QWORD *)&xmmword_100218CC8 + 1);
          LODWORD(v143) = byte_100218CD8;
          v47 = xmmword_100218CE8;
          v147 = xmmword_100218CA8;
          v148 = qword_100218CE0;
          v42 = *((_QWORD *)&xmmword_100218CE8 + 1);
          swift_bridgeObjectRetain(*((_QWORD *)&xmmword_100218CE8 + 1));
          swift_bridgeObjectRetain(v44);
          swift_bridgeObjectRetain(v40);
          v46 = v148;
          v50 = v149;
          v49 = v150;
          v48 = v151;
          v45 = v147;
          v43 = v143;
        }
        v189[0] = v45;
        v189[1] = v44;
        v189[2] = v48;
        v189[3] = v49;
        v189[4] = v40;
        v189[5] = v50;
        v190 = v43;
        v191 = v46;
        v192 = v47;
        v193 = v42;
        v51 = sub_1000D55AC(v189, v194);
        swift_bridgeObjectRelease(v42);
        swift_bridgeObjectRelease(v40);
        swift_bridgeObjectRelease(v44);
        swift_bridgeObjectRelease(v152);
        swift_bridgeObjectRelease(v146);
        swift_bridgeObjectRelease(v145);
        if (v51)
        {
          swift_bridgeObjectRelease(v141);
          *v14 = v142;
          v14[1] = v12;
        }
        else
        {
          swift_bridgeObjectRelease(v12);
        }
        v3 = v153;
      }
      v4 = v154;
    }
    v52 = objc_msgSend(a1, "caseName");
    if (v52)
    {
      v53 = v52;
      v54 = static String._unconditionallyBridgeFromObjectiveC(_:)(v52);
      v56 = v55;

      v57 = *(int *)(type metadata accessor for DeviceSupportInformationRecord(0) + 32);
      v58 = (uint64_t *)(v1 + v57);
      v59 = *(_QWORD *)(v1 + v57);
      v60 = *(_QWORD *)(v1 + v57 + 8);
      v61 = v59 == v54 && v60 == v56;
      if (v61 || (_stringCompareWithSmolCheck(_:_:expecting:)(v59, *(_QWORD *)(v1 + v57 + 8), v54, v56, 0) & 1) != 0)
      {
        swift_bridgeObjectRelease(v56);
      }
      else
      {
        swift_bridgeObjectRelease(v60);
        *v58 = v54;
        v58[1] = v56;
      }
    }
    v62 = objc_msgSend(a1, "caseFirmwareVersion");
    if (v62)
    {
      v63 = v62;
      v64 = static String._unconditionallyBridgeFromObjectiveC(_:)(v62);
      v66 = v65;

      v67 = *(int *)(type metadata accessor for DeviceSupportInformationRecord(0) + 36);
      v68 = (uint64_t *)(v1 + v67);
      v69 = *(_QWORD *)(v1 + v67);
      v70 = *(_QWORD *)(v1 + v67 + 8);
      if (v69 == v64 && v70 == v66
        || (_stringCompareWithSmolCheck(_:_:expecting:)(v69, *(_QWORD *)(v1 + v67 + 8), v64, v66, 1) & 1) == 0)
      {
        swift_bridgeObjectRelease(v66);
      }
      else
      {
        swift_bridgeObjectRelease(v70);
        *v68 = v64;
        v68[1] = v66;
      }
    }
    v71 = objc_msgSend(a1, "caseSerialNumber");
    if (v71)
    {
      v72 = v71;
      v73 = static String._unconditionallyBridgeFromObjectiveC(_:)(v71);
      v75 = v74;

      v76 = *(int *)(type metadata accessor for DeviceSupportInformationRecord(0) + 40);
      v77 = (uint64_t *)(v1 + v76);
      v78 = *(_QWORD *)(v1 + v76);
      v79 = *(_QWORD *)(v1 + v76 + 8);
      if (v78 == v73 && v79 == v75
        || (_stringCompareWithSmolCheck(_:_:expecting:)(v78, *(_QWORD *)(v1 + v76 + 8), v73, v75, 0) & 1) != 0)
      {
        swift_bridgeObjectRelease(v75);
      }
      else
      {
        swift_bridgeObjectRelease(v79);
        *v77 = v73;
        v77[1] = v75;
      }
    }
    v80 = objc_msgSend(a1, "hardwareVersion");
    if (v80)
    {
      v81 = v80;
      v82 = static String._unconditionallyBridgeFromObjectiveC(_:)(v80);
      v84 = v83;

      v85 = *(int *)(type metadata accessor for DeviceSupportInformationRecord(0) + 44);
      v86 = (uint64_t *)(v1 + v85);
      v87 = *(_QWORD *)(v1 + v85);
      v88 = *(_QWORD *)(v1 + v85 + 8);
      if (v87 == v82 && v88 == v84
        || (_stringCompareWithSmolCheck(_:_:expecting:)(v87, *(_QWORD *)(v1 + v85 + 8), v82, v84, 1) & 1) == 0)
      {
        swift_bridgeObjectRelease(v84);
      }
      else
      {
        swift_bridgeObjectRelease(v88);
        *v86 = v82;
        v86[1] = v84;
      }
    }
    v89 = objc_msgSend(a1, "leftBudSerialNumber");
    if (v89)
    {
      v90 = v89;
      v91 = static String._unconditionallyBridgeFromObjectiveC(_:)(v89);
      v93 = v92;

      v94 = *(int *)(type metadata accessor for DeviceSupportInformationRecord(0) + 48);
      v95 = (uint64_t *)(v1 + v94);
      v96 = *(_QWORD *)(v1 + v94);
      v97 = *(_QWORD *)(v1 + v94 + 8);
      if (v96 == v91 && v97 == v93
        || (_stringCompareWithSmolCheck(_:_:expecting:)(v96, *(_QWORD *)(v1 + v94 + 8), v91, v93, 0) & 1) != 0)
      {
        swift_bridgeObjectRelease(v93);
      }
      else
      {
        swift_bridgeObjectRelease(v97);
        *v95 = v91;
        v95[1] = v93;
      }
    }
    v98 = objc_msgSend(a1, "rightBudSerialNumber");
    if (v98)
    {
      v99 = v98;
      v100 = static String._unconditionallyBridgeFromObjectiveC(_:)(v98);
      v102 = v101;

      v103 = *(int *)(type metadata accessor for DeviceSupportInformationRecord(0) + 52);
      v104 = (uint64_t *)(v1 + v103);
      v105 = *(_QWORD *)(v1 + v103);
      v106 = *(_QWORD *)(v1 + v103 + 8);
      if (v105 == v100 && v106 == v102
        || (_stringCompareWithSmolCheck(_:_:expecting:)(v105, *(_QWORD *)(v1 + v103 + 8), v100, v102, 0) & 1) != 0)
      {
        swift_bridgeObjectRelease(v102);
      }
      else
      {
        swift_bridgeObjectRelease(v106);
        *v104 = v100;
        v104[1] = v102;
      }
    }
    v107 = objc_msgSend(a1, "ancAssetVersion");
    if (v107)
    {
      v108 = v107;
      v109 = static String._unconditionallyBridgeFromObjectiveC(_:)(v107);
      v111 = v110;

      v112 = *(int *)(type metadata accessor for DeviceSupportInformationRecord(0) + 56);
      v113 = (uint64_t *)(v1 + v112);
      v114 = *(_QWORD *)(v1 + v112);
      v115 = *(_QWORD *)(v1 + v112 + 8);
      if (v114 == v109 && v115 == v111
        || (_stringCompareWithSmolCheck(_:_:expecting:)(*(_QWORD *)(v1 + v112), *(_QWORD *)(v1 + v112 + 8), v109, v111, 0) & 1) != 0)
      {
        v107 = (id)swift_bridgeObjectRelease(v111);
      }
      else
      {
        v153 = v3;
        v154 = v4;
        swift_bridgeObjectRetain(v115);
        sub_1000D5C64(v114, v115, v165);
        v116 = v165[1];
        v150 = v165[2];
        v151 = v165[0];
        v117 = v165[4];
        v118 = v166;
        v148 = v165[5];
        v149 = v165[3];
        v146 = v168;
        v147 = v167;
        v152 = v169;
        sub_1000D5F2C((uint64_t)v165, (uint64_t)v176, &qword_100210EF8);
        if (v176[1])
        {
          v119 = v118 & 1;
          v120 = v151;
          v121 = v152;
          v123 = v149;
          v122 = v150;
          v125 = v147;
          v124 = v148;
          v126 = v146;
        }
        else
        {
          if (qword_100210168 != -1)
            swift_once(&qword_100210168, sub_1000D5188);
          v116 = *((_QWORD *)&xmmword_100218CA8 + 1);
          v150 = qword_100218CB8;
          v151 = xmmword_100218CA8;
          v148 = *((_QWORD *)&xmmword_100218CC8 + 1);
          v117 = xmmword_100218CC8;
          v149 = qword_100218CC0;
          LODWORD(v152) = byte_100218CD8;
          v121 = *((_QWORD *)&xmmword_100218CE8 + 1);
          v146 = xmmword_100218CE8;
          v147 = qword_100218CE0;
          swift_bridgeObjectRetain(*((_QWORD *)&xmmword_100218CE8 + 1));
          swift_bridgeObjectRetain(v116);
          swift_bridgeObjectRetain(v117);
          v126 = v146;
          v125 = v147;
          v124 = v148;
          v123 = v149;
          v122 = v150;
          v120 = v151;
          v119 = v152;
        }
        v184[0] = v120;
        v145 = v117;
        v146 = v116;
        v184[1] = v116;
        v184[2] = v122;
        v184[3] = v123;
        v184[4] = v117;
        v184[5] = v124;
        v185 = v119;
        v186 = v125;
        v187 = v126;
        v152 = v121;
        v188 = v121;
        swift_bridgeObjectRetain(v111);
        v143 = v109;
        sub_1000D5C64(v109, v111, v170);
        v127 = v170[1];
        v150 = v170[2];
        v151 = v170[0];
        v128 = v170[4];
        v129 = v171;
        v148 = v170[5];
        v149 = v170[3];
        v147 = v172;
        v130 = v174;
        v144 = v173;
        sub_1000D5F2C((uint64_t)v170, (uint64_t)v175, &qword_100210EF8);
        if (v175[1])
        {
          v131 = v129 & 1;
          v133 = v150;
          v132 = v151;
          v135 = v148;
          v134 = v149;
          v136 = v147;
          v137 = v144;
        }
        else
        {
          if (qword_100210168 != -1)
            swift_once(&qword_100210168, sub_1000D5188);
          v127 = *((_QWORD *)&xmmword_100218CA8 + 1);
          v150 = qword_100218CB8;
          v151 = xmmword_100218CA8;
          v148 = *((_QWORD *)&xmmword_100218CC8 + 1);
          v128 = xmmword_100218CC8;
          v149 = qword_100218CC0;
          LODWORD(v144) = byte_100218CD8;
          v137 = (char *)xmmword_100218CE8;
          v147 = qword_100218CE0;
          v130 = *((_QWORD *)&xmmword_100218CE8 + 1);
          swift_bridgeObjectRetain(*((_QWORD *)&xmmword_100218CE8 + 1));
          swift_bridgeObjectRetain(v127);
          swift_bridgeObjectRetain(v128);
          v136 = v147;
          v135 = v148;
          v134 = v149;
          v133 = v150;
          v132 = v151;
          v131 = (char)v144;
        }
        v179[0] = v132;
        v179[1] = v127;
        v179[2] = v133;
        v179[3] = v134;
        v179[4] = v128;
        v179[5] = v135;
        v180 = v131;
        v181 = v136;
        v182 = v137;
        v183 = v130;
        v138 = sub_1000D55AC(v179, v184);
        swift_bridgeObjectRelease(v130);
        swift_bridgeObjectRelease(v128);
        swift_bridgeObjectRelease(v127);
        swift_bridgeObjectRelease(v145);
        swift_bridgeObjectRelease(v146);
        swift_bridgeObjectRelease(v152);
        if (v138)
        {
          v107 = (id)swift_bridgeObjectRelease(v115);
          *v113 = v143;
          v113[1] = v111;
        }
        else
        {
          v107 = (id)swift_bridgeObjectRelease(v111);
        }
        v3 = v153;
        v4 = v154;
      }
    }
    static Date.now.getter(v107);
    v139 = type metadata accessor for DeviceSupportInformationRecord(0);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v4 + 40))(v1 + *(int *)(v139 + 64), v6, v3);
  }
  else
  {
    v18 = static os_log_type_t.info.getter(v7);
    if (qword_1002101E0 != -1)
      swift_once(&qword_1002101E0, sub_1001687B0);
    v19 = qword_100218DE8;
    v20 = sub_1000A0980((uint64_t *)&unk_1002103C0);
    v21 = swift_allocObject(v20, 72, 7);
    *(_OWORD *)(v21 + 16) = xmmword_100184870;
    v22 = a1;
    v23 = objc_msgSend(v22, "description");
    v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
    v26 = v25;

    *(_QWORD *)(v21 + 56) = &type metadata for String;
    *(_QWORD *)(v21 + 64) = sub_1000A0DF4();
    *(_QWORD *)(v21 + 32) = v24;
    *(_QWORD *)(v21 + 40) = v26;
    os_log(_:dso:log:_:_:)(v18, &_mh_execute_header, v19, "No change in updated device support info record: %@", 51, 2, v21);
    return swift_bridgeObjectRelease(v21);
  }
}

id sub_1000DDF50(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  id v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  id result;
  void *v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  uint64_t v78;
  id v79;
  uint64_t v80;
  id v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  id v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  id v94;
  void *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  void *v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  char v104;
  char v105;
  id v106;
  uint64_t v107;
  uint64_t v108;
  void *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  id v114;
  void *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _QWORD *v119;
  uint64_t v120;
  id v121;
  void *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  void *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  _QWORD *v131;
  uint64_t v132;
  id v133;
  void *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  int *v138;
  id v139;
  void *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  _QWORD *v144;
  uint64_t v145;
  id v146;
  void *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  id v151;
  void *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  _QWORD *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  id v160;
  void *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  void *v165;
  uint64_t v166;
  unint64_t v167;
  unint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  char v174;
  uint64_t v175;
  char v176;
  char v177;
  uint64_t v178;
  uint64_t v179;
  char v180;
  uint64_t v181;
  uint64_t v182;
  char v183;
  uint64_t v184;
  uint64_t v185;
  char v186;
  uint64_t v187;
  char *v188;
  uint64_t *v189;
  uint64_t v190;
  unint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  char v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  char v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  int *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  char v209;
  uint64_t v210;
  char *v211;
  uint64_t v212;
  char *v213;
  char *v214;
  int v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  char *v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  int *v234;
  id v235;
  char *v236;
  char *v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242[6];
  char v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247[6];
  char v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252[6];
  char v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257[6];
  char v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  _QWORD v262[10];
  _QWORD v263[10];
  _QWORD v264[10];
  _QWORD v265[10];
  _QWORD v266[6];
  char v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  _QWORD v271[6];
  char v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  _QWORD v276[6];
  char v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  _QWORD v281[6];
  char v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;

  v3 = type metadata accessor for DeviceSupportInformationRecord(0);
  __chkstk_darwin(v3);
  __chkstk_darwin(v4);
  v6 = (char *)&v213 - v5;
  __chkstk_darwin(v7);
  __chkstk_darwin(v8);
  v237 = (char *)&v213 - v9;
  __chkstk_darwin(v10);
  __chkstk_darwin(v11);
  v236 = (char *)&v213 - v12;
  __chkstk_darwin(v13);
  __chkstk_darwin((char *)&v213 - v14);
  v240 = (uint64_t)&v213 - v15;
  __chkstk_darwin(v16);
  __chkstk_darwin(v17);
  v241 = (uint64_t)&v213 - v18;
  __chkstk_darwin(v19);
  __chkstk_darwin(v20);
  v238 = (uint64_t)&v213 - v21;
  __chkstk_darwin(v22);
  v24 = (char *)&v213 - v23;
  __chkstk_darwin(v25);
  v27 = (char *)&v213 - v26;
  __chkstk_darwin(v28);
  v36 = (char *)&v213 - v35;
  if (!a1)
  {
    v51 = 0;
    return (id)(v51 & 1);
  }
  v232 = v30;
  v233 = v31;
  v230 = v34;
  v231 = v29;
  v228 = v32;
  v229 = v33;
  v235 = a1;
  v37 = objc_msgSend(v235, "budsFirmwareVersion");
  v239 = v1;
  v234 = (int *)v3;
  if (!v37)
  {
    sub_1000E0008(v1, (uint64_t)v36);
    goto LABEL_9;
  }
  v38 = v37;
  static String._unconditionallyBridgeFromObjectiveC(_:)(v37);
  v40 = v39;

  swift_bridgeObjectRelease(v40);
  sub_1000E0008(v1, (uint64_t)v36);
  if (!v40)
  {
LABEL_9:
    sub_1000E004C((uint64_t)v36);
    sub_1000E0008(v1, (uint64_t)v27);
    goto LABEL_20;
  }
  v227 = v6;
  result = objc_msgSend(v235, "budsFirmwareVersion");
  if (!result)
  {
    __break(1u);
    goto LABEL_116;
  }
  v42 = result;
  v43 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);
  v45 = v44;

  sub_1000D5C64(v43, v45, v242);
  v47 = v242[0];
  v46 = v242[1];
  v48 = v242[4];
  v225 = v242[3];
  v226 = v242[2];
  v49 = v243;
  v223 = v244;
  v224 = v242[5];
  v50 = v246;
  v222 = v245;
  sub_1000D5F2C((uint64_t)v242, (uint64_t)v265, &qword_100210EF8);
  v213 = v27;
  v214 = v24;
  if (v265[1])
  {
    v216 = v47;
    v217 = v48;
    v218 = v50;
    v219 = v46;
    v215 = v49 & 1;
  }
  else
  {
    if (qword_100210168 != -1)
      swift_once(&qword_100210168, sub_1000D5188);
    v52 = *((_QWORD *)&xmmword_100218CA8 + 1);
    v216 = xmmword_100218CA8;
    v53 = xmmword_100218CC8;
    v225 = qword_100218CC0;
    v226 = qword_100218CB8;
    v215 = byte_100218CD8;
    v223 = qword_100218CE0;
    v224 = *((_QWORD *)&xmmword_100218CC8 + 1);
    v218 = *((_QWORD *)&xmmword_100218CE8 + 1);
    v222 = xmmword_100218CE8;
    swift_bridgeObjectRetain(*((_QWORD *)&xmmword_100218CE8 + 1));
    v219 = v52;
    swift_bridgeObjectRetain(v52);
    v217 = v53;
    swift_bridgeObjectRetain(v53);
  }
  v54 = (uint64_t *)&v36[*(int *)(v3 + 28)];
  v55 = *v54;
  v56 = v54[1];
  swift_bridgeObjectRetain(v56);
  sub_1000D5C64(v55, v56, v247);
  v57 = v247[1];
  v58 = v247[3];
  v220 = v247[2];
  v221 = v247[0];
  v60 = v247[4];
  v59 = v247[5];
  v62 = v248;
  v61 = v249;
  v64 = v250;
  v63 = v251;
  sub_1000D5F2C((uint64_t)v247, (uint64_t)v264, &qword_100210EF8);
  if (v264[1])
  {
    v65 = v62 & 1;
    v66 = v216;
    v68 = v220;
    v67 = v221;
    v69 = v58;
    v70 = v59;
  }
  else
  {
    if (qword_100210168 != -1)
      swift_once(&qword_100210168, sub_1000D5188);
    v57 = *((_QWORD *)&xmmword_100218CA8 + 1);
    v71 = qword_100218CC0;
    v220 = qword_100218CB8;
    v221 = xmmword_100218CA8;
    v72 = *((_QWORD *)&xmmword_100218CC8 + 1);
    v60 = xmmword_100218CC8;
    v73 = byte_100218CD8;
    v61 = qword_100218CE0;
    v63 = *((_QWORD *)&xmmword_100218CE8 + 1);
    v64 = xmmword_100218CE8;
    swift_bridgeObjectRetain(*((_QWORD *)&xmmword_100218CE8 + 1));
    swift_bridgeObjectRetain(v57);
    swift_bridgeObjectRetain(v60);
    v70 = v72;
    v69 = v71;
    v68 = v220;
    v67 = v221;
    v65 = v73;
    v66 = v216;
  }
  v75 = v218;
  v74 = v219;
  v276[0] = v66;
  v276[1] = v219;
  v276[2] = v226;
  v76 = v217;
  v276[3] = v225;
  v276[4] = v217;
  v276[5] = v224;
  v277 = v215;
  v278 = v223;
  v279 = v222;
  v280 = v218;
  v281[0] = v67;
  v281[1] = v57;
  v281[2] = v68;
  v281[3] = v69;
  v281[4] = v60;
  v281[5] = v70;
  v282 = v65;
  v283 = v61;
  v284 = v64;
  v285 = v63;
  v77 = sub_1000D5744(v276, v281);
  swift_bridgeObjectRelease(v76);
  swift_bridgeObjectRelease(v74);
  swift_bridgeObjectRelease(v63);
  swift_bridgeObjectRelease(v60);
  swift_bridgeObjectRelease(v57);
  swift_bridgeObjectRelease(v75);
  sub_1000E004C((uint64_t)v36);
  v78 = v239;
  v27 = v213;
  sub_1000E0008(v239, (uint64_t)v213);
  v6 = v227;
  v24 = v214;
  if ((v77 & 1) != 0)
  {
    sub_1000E004C((uint64_t)v27);
    v79 = v235;
    v80 = v241;
LABEL_71:
    v93 = v238;
    sub_1000E0008(v78, v238);
LABEL_72:
    sub_1000E004C(v93);
    sub_1000E0008(v78, v80);
    v98 = v78;
LABEL_73:
    sub_1000E004C(v80);
    v108 = (uint64_t)v236;
    v107 = (uint64_t)v237;
LABEL_74:
    v159 = v240;
    sub_1000E0008(v98, v240);
LABEL_75:
    sub_1000E004C(v159);
    sub_1000E0008(v98, v108);
LABEL_76:
    sub_1000E004C(v108);
LABEL_77:
    sub_1000E0008(v98, v107);
LABEL_78:
    sub_1000E004C(v107);
LABEL_79:
    sub_1000E0008(v98, (uint64_t)v6);
LABEL_80:
    sub_1000E004C((uint64_t)v6);

    v51 = 1;
    return (id)(v51 & 1);
  }
LABEL_20:
  v79 = v235;
  v81 = objc_msgSend(v235, "caseName", v213);
  if (!v81)
  {
    sub_1000E0008((uint64_t)v27, (uint64_t)v24);
    v80 = v241;
    v85 = v233;
    goto LABEL_27;
  }
  v82 = v81;
  static String._unconditionallyBridgeFromObjectiveC(_:)(v81);
  v84 = v83;

  swift_bridgeObjectRelease(v84);
  sub_1000E0008((uint64_t)v27, (uint64_t)v24);
  v80 = v241;
  v85 = v233;
  if (!v84)
  {
LABEL_27:
    sub_1000E004C((uint64_t)v24);
    sub_1000E004C((uint64_t)v27);
    goto LABEL_28;
  }
  v86 = objc_msgSend(v79, "caseName");
  if (!v86)
  {
    v158 = *(_QWORD *)&v24[v234[8] + 8];
    swift_bridgeObjectRetain(v158);
    sub_1000E004C((uint64_t)v24);
    sub_1000E004C((uint64_t)v27);
    swift_bridgeObjectRelease(v158);
    v78 = v239;
    goto LABEL_71;
  }
  v87 = v86;
  v88 = static String._unconditionallyBridgeFromObjectiveC(_:)(v86);
  v90 = v89;

  v91 = &v24[v234[8]];
  v92 = *((_QWORD *)v91 + 1);
  if (v88 == *(_QWORD *)v91 && v90 == v92)
  {
    swift_bridgeObjectRetain(v90);
    sub_1000E004C((uint64_t)v24);
    sub_1000E004C((uint64_t)v27);
    swift_bridgeObjectRelease_n(v90, 2);
    v85 = v233;
LABEL_28:
    v93 = v238;
    sub_1000E0008(v239, v238);
    goto LABEL_29;
  }
  v176 = _stringCompareWithSmolCheck(_:_:expecting:)(v88, v90, *(_QWORD *)v91, v92, 0);
  swift_bridgeObjectRetain(v90);
  sub_1000E004C((uint64_t)v24);
  sub_1000E004C((uint64_t)v27);
  swift_bridgeObjectRelease_n(v90, 2);
  v93 = v238;
  v78 = v239;
  sub_1000E0008(v239, v238);
  v85 = v233;
  if ((v176 & 1) == 0)
    goto LABEL_72;
LABEL_29:
  v94 = objc_msgSend(v79, "caseFirmwareVersion");
  if (!v94)
  {
    sub_1000E0008(v93, v85);
    v98 = v239;
    goto LABEL_37;
  }
  v95 = v94;
  static String._unconditionallyBridgeFromObjectiveC(_:)(v94);
  v97 = v96;

  swift_bridgeObjectRelease(v97);
  sub_1000E0008(v93, v85);
  v98 = v239;
  if (!v97)
  {
LABEL_37:
    sub_1000E004C(v85);
    sub_1000E004C(v93);
    sub_1000E0008(v98, v80);
    goto LABEL_38;
  }
  result = objc_msgSend(v79, "caseFirmwareVersion");
  if (!result)
  {
LABEL_116:
    __break(1u);
    goto LABEL_117;
  }
  v99 = result;
  v100 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);
  v102 = v101;

  v103 = sub_100122EAC(v100, v102);
  if ((v104 & 1) != 0)
    v103 = 0;
  v105 = sub_1000DF08C(v103);
  sub_1000E004C(v85);
  sub_1000E004C(v93);
  v98 = v239;
  sub_1000E0008(v239, v80);
  if ((v105 & 1) != 0)
    goto LABEL_73;
LABEL_38:
  v106 = objc_msgSend(v79, "caseSerialNumber");
  v108 = (uint64_t)v236;
  v107 = (uint64_t)v237;
  if (!v106)
  {
    v112 = v241;
    v113 = v232;
    sub_1000E0008(v241, v232);
    goto LABEL_45;
  }
  v109 = v106;
  static String._unconditionallyBridgeFromObjectiveC(_:)(v106);
  v111 = v110;

  swift_bridgeObjectRelease(v111);
  v112 = v241;
  v113 = v232;
  sub_1000E0008(v241, v232);
  if (!v111)
  {
LABEL_45:
    sub_1000E004C(v113);
    sub_1000E004C(v112);
    goto LABEL_46;
  }
  v114 = objc_msgSend(v79, "caseSerialNumber");
  if (!v114)
  {
    v178 = v232;
    v179 = *(_QWORD *)(v232 + v234[10] + 8);
    swift_bridgeObjectRetain(v179);
    sub_1000E004C(v178);
    sub_1000E004C(v241);
    swift_bridgeObjectRelease(v179);
    goto LABEL_74;
  }
  v115 = v114;
  v116 = static String._unconditionallyBridgeFromObjectiveC(_:)(v114);
  v118 = v117;

  v119 = (_QWORD *)(v232 + v234[10]);
  v120 = v119[1];
  if (v116 == *v119 && v118 == v120)
  {
    swift_bridgeObjectRetain(v118);
    sub_1000E004C(v232);
    sub_1000E004C(v241);
    swift_bridgeObjectRelease_n(v118, 2);
LABEL_46:
    sub_1000E0008(v98, v240);
    goto LABEL_47;
  }
  v180 = _stringCompareWithSmolCheck(_:_:expecting:)(v116, v118, *v119, v120, 0);
  swift_bridgeObjectRetain(v118);
  sub_1000E004C(v232);
  sub_1000E004C(v241);
  swift_bridgeObjectRelease_n(v118, 2);
  v159 = v240;
  sub_1000E0008(v98, v240);
  if ((v180 & 1) == 0)
    goto LABEL_75;
LABEL_47:
  v121 = objc_msgSend(v79, "hardwareVersion");
  if (!v121)
  {
    v125 = v240;
    v126 = v231;
    sub_1000E0008(v240, v231);
    goto LABEL_54;
  }
  v122 = v121;
  static String._unconditionallyBridgeFromObjectiveC(_:)(v121);
  v124 = v123;

  swift_bridgeObjectRelease(v124);
  v125 = v240;
  v126 = v231;
  sub_1000E0008(v240, v231);
  if (!v124)
  {
LABEL_54:
    sub_1000E004C(v126);
    sub_1000E004C(v125);
    sub_1000E0008(v98, v108);
    goto LABEL_55;
  }
  result = objc_msgSend(v79, "hardwareVersion");
  if (!result)
  {
LABEL_117:
    __break(1u);
    goto LABEL_118;
  }
  v127 = result;
  v128 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);
  v130 = v129;

  v131 = (_QWORD *)(v231 + v234[11]);
  v132 = v131[1];
  if (*v131 == v128 && v132 == v130)
  {
    swift_bridgeObjectRelease(v130);
    v125 = v240;
    v126 = v231;
    goto LABEL_54;
  }
  v177 = _stringCompareWithSmolCheck(_:_:expecting:)(*v131, v132, v128, v130, 1);
  swift_bridgeObjectRelease(v130);
  sub_1000E004C(v231);
  sub_1000E004C(v240);
  sub_1000E0008(v98, v108);
  if ((v177 & 1) != 0)
    goto LABEL_76;
LABEL_55:
  v133 = objc_msgSend(v79, "leftBudSerialNumber");
  if (!v133)
  {
    v137 = v230;
    sub_1000E0008(v108, v230);
    v138 = v234;
    goto LABEL_62;
  }
  v134 = v133;
  static String._unconditionallyBridgeFromObjectiveC(_:)(v133);
  v136 = v135;

  swift_bridgeObjectRelease(v136);
  v137 = v230;
  sub_1000E0008(v108, v230);
  v138 = v234;
  if (!v136)
  {
LABEL_62:
    sub_1000E004C(v137);
    sub_1000E004C(v108);
    goto LABEL_63;
  }
  v139 = objc_msgSend(v79, "leftBudSerialNumber");
  if (!v139)
  {
    v181 = v230;
    v182 = *(_QWORD *)(v230 + v138[12] + 8);
    swift_bridgeObjectRetain(v182);
    sub_1000E004C(v181);
    sub_1000E004C(v108);
    swift_bridgeObjectRelease(v182);
    goto LABEL_77;
  }
  v140 = v139;
  v141 = static String._unconditionallyBridgeFromObjectiveC(_:)(v139);
  v143 = v142;

  v144 = (_QWORD *)(v230 + v138[12]);
  v145 = v144[1];
  if (v141 == *v144 && v143 == v145)
  {
    swift_bridgeObjectRetain(v143);
    sub_1000E004C(v230);
    sub_1000E004C(v108);
    swift_bridgeObjectRelease_n(v143, 2);
LABEL_63:
    sub_1000E0008(v98, v107);
    goto LABEL_64;
  }
  v183 = _stringCompareWithSmolCheck(_:_:expecting:)(v141, v143, *v144, v145, 0);
  swift_bridgeObjectRetain(v143);
  sub_1000E004C(v230);
  sub_1000E004C(v108);
  swift_bridgeObjectRelease_n(v143, 2);
  sub_1000E0008(v98, v107);
  if ((v183 & 1) == 0)
    goto LABEL_78;
LABEL_64:
  v146 = objc_msgSend(v79, "rightBudSerialNumber");
  if (!v146)
  {
    v150 = v229;
    sub_1000E0008(v107, v229);
    goto LABEL_82;
  }
  v147 = v146;
  static String._unconditionallyBridgeFromObjectiveC(_:)(v146);
  v149 = v148;

  swift_bridgeObjectRelease(v149);
  v150 = v229;
  sub_1000E0008(v107, v229);
  if (!v149)
  {
LABEL_82:
    sub_1000E004C(v150);
    sub_1000E004C(v107);
    goto LABEL_83;
  }
  v151 = objc_msgSend(v79, "rightBudSerialNumber");
  if (!v151)
  {
    v184 = v229;
    v185 = *(_QWORD *)(v229 + v138[13] + 8);
    swift_bridgeObjectRetain(v185);
    sub_1000E004C(v184);
    sub_1000E004C(v107);
    swift_bridgeObjectRelease(v185);
    goto LABEL_79;
  }
  v152 = v151;
  v153 = static String._unconditionallyBridgeFromObjectiveC(_:)(v151);
  v155 = v154;

  v156 = (_QWORD *)(v229 + v138[13]);
  v157 = v156[1];
  if (v153 == *v156 && v155 == v157)
  {
    swift_bridgeObjectRetain(v155);
    sub_1000E004C(v229);
    sub_1000E004C(v107);
    swift_bridgeObjectRelease_n(v155, 2);
LABEL_83:
    sub_1000E0008(v98, (uint64_t)v6);
    goto LABEL_84;
  }
  v186 = _stringCompareWithSmolCheck(_:_:expecting:)(v153, v155, *v156, v157, 0);
  swift_bridgeObjectRetain(v155);
  sub_1000E004C(v229);
  sub_1000E004C(v107);
  swift_bridgeObjectRelease_n(v155, 2);
  sub_1000E0008(v98, (uint64_t)v6);
  if ((v186 & 1) == 0)
    goto LABEL_80;
LABEL_84:
  v160 = objc_msgSend(v79, "ancAssetVersion");
  if (!v160)
  {
    v164 = v228;
    sub_1000E0008((uint64_t)v6, v228);
    goto LABEL_92;
  }
  v161 = v160;
  static String._unconditionallyBridgeFromObjectiveC(_:)(v160);
  v163 = v162;

  swift_bridgeObjectRelease(v163);
  v164 = v228;
  sub_1000E0008((uint64_t)v6, v228);
  if (!v163)
  {
LABEL_92:

    v51 = 0;
LABEL_113:
    sub_1000E004C(v164);
    sub_1000E004C((uint64_t)v6);
    return (id)(v51 & 1);
  }
  result = objc_msgSend(v79, "ancAssetVersion");
  if (result)
  {
    v165 = result;
    v166 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);
    v168 = v167;

    sub_1000D5C64(v166, v168, v252);
    v170 = v252[0];
    v169 = v252[1];
    v171 = v252[2];
    v172 = v252[3];
    v173 = v252[4];
    v174 = v253;
    v240 = v254;
    v241 = v252[5];
    v175 = v256;
    v239 = v255;
    sub_1000D5F2C((uint64_t)v252, (uint64_t)v263, &qword_100210EF8);
    v227 = v6;
    if (v263[1])
    {
      v233 = v172;
      v236 = (char *)v171;
      v237 = (char *)v173;
      v230 = v170;
      v231 = v175;
      v238 = v169;
      LODWORD(v232) = v174 & 1;
    }
    else
    {
      if (qword_100210168 != -1)
        swift_once(&qword_100210168, sub_1000D5188);
      v187 = *((_QWORD *)&xmmword_100218CA8 + 1);
      v236 = (char *)qword_100218CB8;
      v188 = (char *)xmmword_100218CC8;
      v233 = qword_100218CC0;
      LODWORD(v232) = byte_100218CD8;
      v240 = qword_100218CE0;
      v241 = *((_QWORD *)&xmmword_100218CC8 + 1);
      v239 = xmmword_100218CE8;
      v230 = xmmword_100218CA8;
      v231 = *((_QWORD *)&xmmword_100218CE8 + 1);
      swift_bridgeObjectRetain(*((_QWORD *)&xmmword_100218CE8 + 1));
      v238 = v187;
      swift_bridgeObjectRetain(v187);
      v237 = v188;
      swift_bridgeObjectRetain(v188);
    }
    v189 = (uint64_t *)(v228 + v138[14]);
    v190 = *v189;
    v191 = v189[1];
    swift_bridgeObjectRetain(v191);
    sub_1000D5C64(v190, v191, v257);
    v192 = v257[0];
    v234 = (int *)v257[1];
    v194 = v257[2];
    v193 = v257[3];
    v195 = v257[4];
    v196 = v257[5];
    v197 = v258;
    v198 = v259;
    v199 = v260;
    v200 = v261;
    sub_1000D5F2C((uint64_t)v257, (uint64_t)v262, &qword_100210EF8);
    if (v262[1])
    {
      v201 = v197 & 1;
      v202 = v192;
      v203 = v194;
      v204 = v193;
      v205 = v234;
      v206 = v198;
    }
    else
    {
      if (qword_100210168 != -1)
        swift_once(&qword_100210168, sub_1000D5188);
      v205 = (int *)*((_QWORD *)&xmmword_100218CA8 + 1);
      v234 = (int *)xmmword_100218CA8;
      v208 = qword_100218CB8;
      v207 = qword_100218CC0;
      v196 = *((_QWORD *)&xmmword_100218CC8 + 1);
      v195 = xmmword_100218CC8;
      v209 = byte_100218CD8;
      v206 = qword_100218CE0;
      v200 = *((_QWORD *)&xmmword_100218CE8 + 1);
      v199 = xmmword_100218CE8;
      swift_bridgeObjectRetain(*((_QWORD *)&xmmword_100218CE8 + 1));
      swift_bridgeObjectRetain(v205);
      swift_bridgeObjectRetain(v195);
      v204 = v207;
      v203 = v208;
      v202 = (uint64_t)v234;
      v201 = v209;
    }
    v210 = v231;
    v266[0] = v230;
    v211 = v237;
    v212 = v238;
    v266[1] = v238;
    v266[2] = v236;
    v266[3] = v233;
    v266[4] = v237;
    v266[5] = v241;
    v267 = v232;
    v268 = v240;
    v269 = v239;
    v270 = v231;
    v271[0] = v202;
    v271[1] = v205;
    v271[2] = v203;
    v271[3] = v204;
    v271[4] = v195;
    v271[5] = v196;
    v272 = v201;
    v273 = v206;
    v274 = v199;
    v275 = v200;
    v51 = sub_1000D5744(v266, v271);
    swift_bridgeObjectRelease(v211);
    swift_bridgeObjectRelease(v212);
    swift_bridgeObjectRelease(v200);
    swift_bridgeObjectRelease(v195);
    swift_bridgeObjectRelease(v205);

    swift_bridgeObjectRelease(v210);
    v6 = v227;
    v164 = v228;
    goto LABEL_113;
  }
LABEL_118:
  __break(1u);
  return result;
}

uint64_t sub_1000DF08C(unint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  char v12;
  unint64_t v13;
  unsigned __int8 v14;
  BOOL v15;
  unint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  unsigned int v19;
  uint64_t v20;
  unsigned __int8 *v21;
  unsigned int v22;
  unsigned __int8 v23;
  unint64_t v24;
  uint64_t v25;
  unsigned __int8 *v26;
  unsigned int v27;
  char v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD v44[3];

  v4 = type metadata accessor for DeviceSupportInformationRecord(0);
  v5 = (uint64_t *)(v1 + *(int *)(v4 + 36));
  v6 = *v5;
  v7 = v5[1];
  v8 = HIBYTE(v7) & 0xF;
  v9 = v6 & 0xFFFFFFFFFFFFLL;
  if ((v7 & 0x2000000000000000) != 0)
    v10 = HIBYTE(v7) & 0xF;
  else
    v10 = v6 & 0xFFFFFFFFFFFFLL;
  if (!v10)
    goto LABEL_61;
  if ((v7 & 0x1000000000000000) != 0)
  {
    swift_bridgeObjectRetain(v7);
    v13 = sub_10014F41C(v6, v7, 10);
    v29 = v28;
    v4 = swift_bridgeObjectRelease(v7);
    if ((v29 & 1) != 0)
      goto LABEL_61;
    goto LABEL_39;
  }
  if ((v7 & 0x2000000000000000) != 0)
  {
    v44[0] = v6;
    v44[1] = v7 & 0xFFFFFFFFFFFFFFLL;
    if (v6 == 43)
    {
      if (!v8)
        goto LABEL_81;
      if (v8 == 1)
        goto LABEL_79;
      if ((BYTE1(v6) - 48) > 9u)
        goto LABEL_34;
      v13 = (BYTE1(v6) - 48);
      if (v8 != 2)
      {
        if ((BYTE2(v6) - 48) > 9u)
          goto LABEL_34;
        v13 = 10 * (BYTE1(v6) - 48) + (BYTE2(v6) - 48);
        v17 = v8 - 3;
        if (v8 != 3)
        {
          v18 = (unsigned __int8 *)v44 + 3;
          while (1)
          {
            v19 = *v18 - 48;
            if (v19 > 9)
              goto LABEL_34;
            if (!is_mul_ok(v13, 0xAuLL))
              goto LABEL_34;
            v15 = __CFADD__(10 * v13, v19);
            v13 = 10 * v13 + v19;
            if (v15)
              goto LABEL_34;
            LOBYTE(v8) = 0;
            ++v18;
            if (!--v17)
              goto LABEL_38;
          }
        }
      }
    }
    else
    {
      if (v6 == 45)
      {
        if (v8)
        {
          if (v8 != 1)
          {
            v14 = BYTE1(v6) - 48;
            if ((BYTE1(v6) - 48) <= 9u)
            {
              v13 = 0;
              v15 = v14 == 0;
              v16 = -(uint64_t)v14;
              if (!v15)
                goto LABEL_35;
              if (v8 == 2)
              {
                LOBYTE(v8) = 0;
                v13 = v16;
                goto LABEL_38;
              }
              v23 = BYTE2(v6) - 48;
              if ((BYTE2(v6) - 48) <= 9u && is_mul_ok(v16, 0xAuLL))
              {
                v24 = 10 * v16;
                v13 = v24 - v23;
                if (v24 >= v23)
                {
                  v25 = v8 - 3;
                  if (v8 != 3)
                  {
                    v26 = (unsigned __int8 *)v44 + 3;
                    while (1)
                    {
                      v27 = *v26 - 48;
                      if (v27 > 9)
                        goto LABEL_34;
                      if (!is_mul_ok(v13, 0xAuLL))
                        goto LABEL_34;
                      v15 = 10 * v13 >= v27;
                      v13 = 10 * v13 - v27;
                      if (!v15)
                        goto LABEL_34;
                      LOBYTE(v8) = 0;
                      ++v26;
                      if (!--v25)
                        goto LABEL_38;
                    }
                  }
                  goto LABEL_37;
                }
              }
            }
LABEL_34:
            v13 = 0;
LABEL_35:
            LOBYTE(v8) = 1;
            goto LABEL_38;
          }
LABEL_79:
          v13 = 0;
LABEL_38:
          if ((v8 & 1) != 0)
            goto LABEL_61;
LABEL_39:
          if (v13 == a1)
            return 0;
          goto LABEL_63;
        }
        __break(1u);
LABEL_81:
        __break(1u);
        goto LABEL_82;
      }
      if (!v8 || (v6 - 48) > 9u)
        goto LABEL_34;
      v13 = (v6 - 48);
      if (v8 != 1)
      {
        if ((BYTE1(v6) - 48) > 9u)
          goto LABEL_34;
        v13 = 10 * (v6 - 48) + (BYTE1(v6) - 48);
        v20 = v8 - 2;
        if (v8 != 2)
        {
          v21 = (unsigned __int8 *)v44 + 2;
          while (1)
          {
            v22 = *v21 - 48;
            if (v22 > 9)
              goto LABEL_34;
            if (!is_mul_ok(v13, 0xAuLL))
              goto LABEL_34;
            v15 = __CFADD__(10 * v13, v22);
            v13 = 10 * v13 + v22;
            if (v15)
              goto LABEL_34;
            LOBYTE(v8) = 0;
            ++v21;
            if (!--v20)
              goto LABEL_38;
          }
        }
      }
    }
LABEL_37:
    LOBYTE(v8) = 0;
    goto LABEL_38;
  }
  if ((v6 & 0x1000000000000000) != 0)
    v11 = (unsigned __int8 *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 32);
  else
    v11 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v6, v7);
  v4 = (uint64_t)sub_10014F408(v11, v9, 10);
  if ((v12 & 1) == 0)
  {
    v13 = v4;
    goto LABEL_39;
  }
LABEL_61:
  if (!a1)
    return 0;
  v13 = 0;
LABEL_63:
  v2 = (unsigned __int16)(v13 >> 8);
  v7 = (unsigned __int16)(a1 >> 8);
  if (v7 >= v2)
  {
    if (v2 < v7)
    {
      v1 = static os_log_type_t.debug.getter(v4);
      if (qword_1002101E0 == -1)
      {
LABEL_66:
        v30 = qword_100218DE8;
        v31 = sub_1000A0980((uint64_t *)&unk_1002103C0);
        v32 = swift_allocObject(v31, 112, 7);
        *(_OWORD *)(v32 + 16) = xmmword_1001858F0;
        *(_QWORD *)(v32 + 56) = &type metadata for UInt64;
        *(_QWORD *)(v32 + 64) = &protocol witness table for UInt64;
        *(_QWORD *)(v32 + 32) = v2;
        *(_QWORD *)(v32 + 96) = &type metadata for UInt64;
        *(_QWORD *)(v32 + 104) = &protocol witness table for UInt64;
        *(_QWORD *)(v32 + 72) = v7;
        os_log(_:dso:log:_:_:)(v1, &_mh_execute_header, v30, "Update case (major) version from %u to %u", 41, 2, v32);
LABEL_76:
        swift_bridgeObjectRelease(v32);
        return 1;
      }
LABEL_82:
      swift_once(&qword_1002101E0, sub_1001687B0);
      goto LABEL_66;
    }
    v33 = HIDWORD(v13) & 0xFFF0 | (v13 >> 4);
    v34 = HIDWORD(a1) & 0xFFF0 | (a1 >> 4);
    if (v34 >= v33)
    {
      if (v33 < v34)
      {
        v35 = static os_log_type_t.debug.getter(v4);
        if (qword_1002101E0 != -1)
          swift_once(&qword_1002101E0, sub_1001687B0);
        v36 = qword_100218DE8;
        v37 = sub_1000A0980((uint64_t *)&unk_1002103C0);
        v32 = swift_allocObject(v37, 192, 7);
        *(_OWORD *)(v32 + 16) = xmmword_100186EB0;
        *(_QWORD *)(v32 + 56) = &type metadata for UInt64;
        *(_QWORD *)(v32 + 64) = &protocol witness table for UInt64;
        *(_QWORD *)(v32 + 32) = v2;
        *(_QWORD *)(v32 + 96) = &type metadata for UInt64;
        *(_QWORD *)(v32 + 104) = &protocol witness table for UInt64;
        *(_QWORD *)(v32 + 72) = v33;
        *(_QWORD *)(v32 + 136) = &type metadata for UInt64;
        *(_QWORD *)(v32 + 144) = &protocol witness table for UInt64;
        *(_QWORD *)(v32 + 112) = v7;
        *(_QWORD *)(v32 + 176) = &type metadata for UInt64;
        *(_QWORD *)(v32 + 184) = &protocol witness table for UInt64;
        *(_QWORD *)(v32 + 152) = v34;
        os_log(_:dso:log:_:_:)(v35, &_mh_execute_header, v36, "Update case (minor) version from %u.%u to %u.%u", 47, 2, v32);
        goto LABEL_76;
      }
      v38 = v13 & 0xF | (16 * ((v13 >> 24) & 0xFFF));
      v39 = a1 & 0xF | (16 * ((a1 >> 24) & 0xFFF));
      if (v38 < v39)
      {
        v40 = static os_log_type_t.debug.getter(v4);
        if (qword_1002101E0 != -1)
          swift_once(&qword_1002101E0, sub_1001687B0);
        v41 = qword_100218DE8;
        v42 = sub_1000A0980((uint64_t *)&unk_1002103C0);
        v32 = swift_allocObject(v42, 272, 7);
        *(_OWORD *)(v32 + 16) = xmmword_100186EA0;
        *(_QWORD *)(v32 + 56) = &type metadata for UInt64;
        *(_QWORD *)(v32 + 64) = &protocol witness table for UInt64;
        *(_QWORD *)(v32 + 32) = v2;
        *(_QWORD *)(v32 + 96) = &type metadata for UInt64;
        *(_QWORD *)(v32 + 104) = &protocol witness table for UInt64;
        *(_QWORD *)(v32 + 72) = v33;
        *(_QWORD *)(v32 + 136) = &type metadata for UInt64;
        *(_QWORD *)(v32 + 144) = &protocol witness table for UInt64;
        *(_QWORD *)(v32 + 112) = v38;
        *(_QWORD *)(v32 + 176) = &type metadata for UInt64;
        *(_QWORD *)(v32 + 184) = &protocol witness table for UInt64;
        *(_QWORD *)(v32 + 152) = v7;
        *(_QWORD *)(v32 + 216) = &type metadata for UInt64;
        *(_QWORD *)(v32 + 224) = &protocol witness table for UInt64;
        *(_QWORD *)(v32 + 192) = v34;
        *(_QWORD *)(v32 + 256) = &type metadata for UInt64;
        *(_QWORD *)(v32 + 264) = &protocol witness table for UInt64;
        *(_QWORD *)(v32 + 232) = v39;
        os_log(_:dso:log:_:_:)(v40, &_mh_execute_header, v41, "Update case (revision) version from %u.%u.%u to %u.%u.%u", 56, 2, v32);
        goto LABEL_76;
      }
    }
  }
  return 0;
}

uint64_t sub_1000DF640(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  int *v5;
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v3 = type metadata accessor for UUID(0);
  v4 = sub_1000A0940((unint64_t *)&unk_100210620, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(a1, v3, v4);
  v5 = (int *)type metadata accessor for DeviceSupportInformationRecord(0);
  v6 = (uint64_t *)(v1 + v5[5]);
  v7 = *v6;
  v8 = v6[1];
  sub_1000A0E74(*v6, v8);
  Data.hash(into:)(a1, v7, v8);
  sub_1000A103C(v7, v8);
  v9 = (uint64_t *)(v1 + v5[6]);
  v10 = *v9;
  v11 = v9[1];
  swift_bridgeObjectRetain(v11);
  String.hash(into:)(a1, v10, v11);
  swift_bridgeObjectRelease(v11);
  v12 = (uint64_t *)(v1 + v5[7]);
  v13 = *v12;
  v14 = v12[1];
  swift_bridgeObjectRetain(v14);
  String.hash(into:)(a1, v13, v14);
  swift_bridgeObjectRelease(v14);
  v15 = (uint64_t *)(v1 + v5[8]);
  v16 = *v15;
  v17 = v15[1];
  swift_bridgeObjectRetain(v17);
  String.hash(into:)(a1, v16, v17);
  swift_bridgeObjectRelease(v17);
  v18 = (uint64_t *)(v1 + v5[9]);
  v19 = *v18;
  v20 = v18[1];
  swift_bridgeObjectRetain(v20);
  String.hash(into:)(a1, v19, v20);
  swift_bridgeObjectRelease(v20);
  v21 = (uint64_t *)(v1 + v5[10]);
  v22 = *v21;
  v23 = v21[1];
  swift_bridgeObjectRetain(v23);
  String.hash(into:)(a1, v22, v23);
  swift_bridgeObjectRelease(v23);
  v24 = (uint64_t *)(v1 + v5[11]);
  v25 = *v24;
  v26 = v24[1];
  swift_bridgeObjectRetain(v26);
  String.hash(into:)(a1, v25, v26);
  swift_bridgeObjectRelease(v26);
  v27 = (uint64_t *)(v1 + v5[12]);
  v28 = *v27;
  v29 = v27[1];
  swift_bridgeObjectRetain(v29);
  String.hash(into:)(a1, v28, v29);
  swift_bridgeObjectRelease(v29);
  v30 = (uint64_t *)(v1 + v5[13]);
  v31 = *v30;
  v32 = v30[1];
  swift_bridgeObjectRetain(v32);
  String.hash(into:)(a1, v31, v32);
  swift_bridgeObjectRelease(v32);
  v33 = (uint64_t *)(v1 + v5[14]);
  v34 = *v33;
  v35 = v33[1];
  swift_bridgeObjectRetain(v35);
  String.hash(into:)(a1, v34, v35);
  swift_bridgeObjectRelease(v35);
  v36 = (uint64_t *)(v1 + v5[15]);
  v37 = *v36;
  v38 = v36[1];
  swift_bridgeObjectRetain(v38);
  String.hash(into:)(a1, v37, v38);
  swift_bridgeObjectRelease(v38);
  v39 = type metadata accessor for Date(0);
  v40 = sub_1000A0940(&qword_100210EC0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  return dispatch thunk of Hashable.hash(into:)(a1, v39, v40);
}

uint64_t sub_1000DF8DC(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1000DF914 + 4 * byte_100186EC0[a1]))(0x696669746E656469, 0xEA00000000007265);
}

uint64_t sub_1000DF914()
{
  return 0x74654D64756F6C63;
}

unint64_t sub_1000DF938()
{
  return 0xD000000000000010;
}

uint64_t sub_1000DFA44(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v50;
  char v51;
  __int128 v52;

  v3 = v1;
  v5 = sub_1000A0980((uint64_t *)&unk_1002112D8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_1000A20D8(a1, v9);
  v11 = sub_1000E10D4();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for DeviceSupportInformationRecord.CodingKeys, &type metadata for DeviceSupportInformationRecord.CodingKeys, v11, v9, v10);
  LOBYTE(v52) = 0;
  v12 = type metadata accessor for UUID(0);
  v13 = sub_1000A0940((unint64_t *)&unk_1002105E0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v3, &v52, v5, v12, v13);
  if (!v2)
  {
    v14 = (int *)type metadata accessor for DeviceSupportInformationRecord(0);
    v52 = *(_OWORD *)(v3 + v14[5]);
    v51 = 1;
    v15 = sub_1000A21A4();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v52, &v51, v5, &type metadata for Data, v15);
    v16 = (uint64_t *)(v3 + v14[6]);
    v17 = *v16;
    v18 = v16[1];
    LOBYTE(v52) = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v17, v18, &v52, v5);
    v19 = (uint64_t *)(v3 + v14[7]);
    v20 = *v19;
    v21 = v19[1];
    LOBYTE(v52) = 3;
    KeyedEncodingContainer.encode(_:forKey:)(v20, v21, &v52, v5);
    v22 = (uint64_t *)(v3 + v14[8]);
    v23 = *v22;
    v24 = v22[1];
    LOBYTE(v52) = 4;
    KeyedEncodingContainer.encode(_:forKey:)(v23, v24, &v52, v5);
    v25 = (uint64_t *)(v3 + v14[9]);
    v26 = *v25;
    v27 = v25[1];
    LOBYTE(v52) = 5;
    KeyedEncodingContainer.encode(_:forKey:)(v26, v27, &v52, v5);
    v28 = (uint64_t *)(v3 + v14[10]);
    v29 = *v28;
    v30 = v28[1];
    LOBYTE(v52) = 6;
    KeyedEncodingContainer.encode(_:forKey:)(v29, v30, &v52, v5);
    v31 = (uint64_t *)(v3 + v14[11]);
    v32 = *v31;
    v33 = v31[1];
    LOBYTE(v52) = 7;
    KeyedEncodingContainer.encode(_:forKey:)(v32, v33, &v52, v5);
    v34 = (uint64_t *)(v3 + v14[12]);
    v35 = *v34;
    v36 = v34[1];
    LOBYTE(v52) = 8;
    KeyedEncodingContainer.encode(_:forKey:)(v35, v36, &v52, v5);
    v37 = (uint64_t *)(v3 + v14[13]);
    v38 = *v37;
    v39 = v37[1];
    LOBYTE(v52) = 9;
    KeyedEncodingContainer.encode(_:forKey:)(v38, v39, &v52, v5);
    v40 = (uint64_t *)(v3 + v14[14]);
    v41 = *v40;
    v42 = v40[1];
    LOBYTE(v52) = 10;
    KeyedEncodingContainer.encode(_:forKey:)(v41, v42, &v52, v5);
    v43 = (uint64_t *)(v3 + v14[15]);
    v44 = *v43;
    v45 = v43[1];
    LOBYTE(v52) = 11;
    KeyedEncodingContainer.encode(_:forKey:)(v44, v45, &v52, v5);
    v46 = v3 + v14[16];
    LOBYTE(v52) = 12;
    v47 = type metadata accessor for Date(0);
    v48 = sub_1000A0940((unint64_t *)&unk_100210EB0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v46, &v52, v5, v47, v48);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1000DFDF0()
{
  unsigned __int8 *v0;

  return sub_1000DF8DC(*v0);
}

uint64_t sub_1000DFDF8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1000E134C(a1, a2);
  *a3 = result;
  return result;
}

void sub_1000DFE1C(_BYTE *a1@<X8>)
{
  *a1 = 13;
}

uint64_t sub_1000DFE28(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000E10D4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000DFE50(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000E10D4();
  return CodingKey.debugDescription.getter(a1, v2);
}

unint64_t sub_1000DFE78()
{
  return 0xD00000000000001ELL;
}

uint64_t type metadata accessor for DeviceSupportInformationRecord(uint64_t a1)
{
  uint64_t result;

  result = qword_100211230;
  if (!qword_100211230)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for DeviceSupportInformationRecord);
  return result;
}

uint64_t sub_1000DFED0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 64);
  v5 = type metadata accessor for Date(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

Class sub_1000DFF10()
{
  uint64_t v0;
  void *v1;
  Class v3;

  v1 = objc_autoreleasePoolPush();
  sub_1000DC7F8(v0, &v3);
  objc_autoreleasePoolPop(v1);
  return v3;
}

Swift::Int sub_1000DFF60()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1, 0);
  sub_1000DF640((uint64_t)v1);
  return Hasher._finalize()();
}

Swift::Int sub_1000DFFA0(uint64_t a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, a1);
  sub_1000DF640((uint64_t)v2);
  return Hasher._finalize()();
}

void sub_1000DFFE0(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  sub_1000DB1EC(a1, a2);
}

uint64_t sub_1000DFFF4(_QWORD *a1)
{
  return sub_1000DFA44(a1);
}

uint64_t sub_1000E0008(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for DeviceSupportInformationRecord(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000E004C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for DeviceSupportInformationRecord(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000E0088(uint64_t a1, uint64_t a2)
{
  int *v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;

  if ((static UUID.== infix(_:_:)(a1) & 1) == 0)
    return 0;
  v4 = (int *)type metadata accessor for DeviceSupportInformationRecord(0);
  sub_1000D25EC(*(_QWORD *)(a1 + v4[5]), *(_QWORD *)(a1 + v4[5] + 8));
  if ((v5 & 1) == 0)
    return 0;
  v6 = v4[6];
  v7 = *(_QWORD *)(a1 + v6);
  v8 = *(_QWORD *)(a1 + v6 + 8);
  v9 = (_QWORD *)(a2 + v6);
  v10 = v9[1];
  v11 = v7 == *v9 && v8 == v10;
  if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)(v7, v8, *v9, v10, 0) & 1) == 0)
    return 0;
  v12 = v4[7];
  v13 = *(_QWORD *)(a1 + v12);
  v14 = *(_QWORD *)(a1 + v12 + 8);
  v15 = (_QWORD *)(a2 + v12);
  v16 = v15[1];
  v17 = v13 == *v15 && v14 == v16;
  if (!v17 && (_stringCompareWithSmolCheck(_:_:expecting:)(v13, v14, *v15, v16, 0) & 1) == 0)
    return 0;
  v18 = v4[8];
  v19 = *(_QWORD *)(a1 + v18);
  v20 = *(_QWORD *)(a1 + v18 + 8);
  v21 = (_QWORD *)(a2 + v18);
  v22 = v21[1];
  v23 = v19 == *v21 && v20 == v22;
  if (!v23 && (_stringCompareWithSmolCheck(_:_:expecting:)(v19, v20, *v21, v22, 0) & 1) == 0)
    return 0;
  v24 = v4[9];
  v25 = *(_QWORD *)(a1 + v24);
  v26 = *(_QWORD *)(a1 + v24 + 8);
  v27 = (_QWORD *)(a2 + v24);
  v28 = v27[1];
  if ((v25 != *v27 || v26 != v28) && (_stringCompareWithSmolCheck(_:_:expecting:)(v25, v26, *v27, v28, 0) & 1) == 0)
    return 0;
  v29 = v4[10];
  v30 = *(_QWORD *)(a1 + v29);
  v31 = *(_QWORD *)(a1 + v29 + 8);
  v32 = (_QWORD *)(a2 + v29);
  v33 = v32[1];
  if ((v30 != *v32 || v31 != v33) && (_stringCompareWithSmolCheck(_:_:expecting:)(v30, v31, *v32, v33, 0) & 1) == 0)
    return 0;
  v34 = v4[11];
  v35 = *(_QWORD *)(a1 + v34);
  v36 = *(_QWORD *)(a1 + v34 + 8);
  v37 = (_QWORD *)(a2 + v34);
  v38 = v37[1];
  if ((v35 != *v37 || v36 != v38) && (_stringCompareWithSmolCheck(_:_:expecting:)(v35, v36, *v37, v38, 0) & 1) == 0)
    return 0;
  v39 = v4[12];
  v40 = *(_QWORD *)(a1 + v39);
  v41 = *(_QWORD *)(a1 + v39 + 8);
  v42 = (_QWORD *)(a2 + v39);
  v43 = v42[1];
  if ((v40 != *v42 || v41 != v43) && (_stringCompareWithSmolCheck(_:_:expecting:)(v40, v41, *v42, v43, 0) & 1) == 0)
    return 0;
  v44 = v4[13];
  v45 = *(_QWORD *)(a1 + v44);
  v46 = *(_QWORD *)(a1 + v44 + 8);
  v47 = (_QWORD *)(a2 + v44);
  v48 = v47[1];
  if ((v45 != *v47 || v46 != v48) && (_stringCompareWithSmolCheck(_:_:expecting:)(v45, v46, *v47, v48, 0) & 1) == 0)
    return 0;
  v49 = v4[14];
  v50 = *(_QWORD *)(a1 + v49);
  v51 = *(_QWORD *)(a1 + v49 + 8);
  v52 = (_QWORD *)(a2 + v49);
  v53 = v52[1];
  if ((v50 != *v52 || v51 != v53) && (_stringCompareWithSmolCheck(_:_:expecting:)(v50, v51, *v52, v53, 0) & 1) == 0)
    return 0;
  v54 = v4[15];
  v55 = *(_QWORD *)(a1 + v54);
  v56 = *(_QWORD *)(a1 + v54 + 8);
  v57 = (_QWORD *)(a2 + v54);
  v58 = v57[1];
  if (v55 == *v57 && v56 == v58)
    return static Date.== infix(_:_:)(a1 + v4[16], a2 + v4[16]);
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(v55, v56, *v57, v58, 0) & 1) != 0)
    return static Date.== infix(_:_:)(a1 + v4[16], a2 + v4[16]);
  else
    return 0;
}

unint64_t sub_1000E02D4()
{
  unint64_t result;

  result = qword_1002111C8;
  if (!qword_1002111C8)
  {
    result = swift_getWitnessTable(&unk_1001870B4, &type metadata for DeviceSupportInformationRecord.DeviceSupportInformationRecordError);
    atomic_store(result, (unint64_t *)&qword_1002111C8);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for DeviceSupportInformationRecord.DeviceSupportInformationRecordError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1000E0364 + 4 * byte_100186ED2[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1000E0398 + 4 * byte_100186ECD[v4]))();
}

uint64_t sub_1000E0398(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000E03A0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000E03A8);
  return result;
}

uint64_t sub_1000E03B4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000E03BCLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1000E03C0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000E03C8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DeviceSupportInformationRecord.DeviceSupportInformationRecordError()
{
  return &type metadata for DeviceSupportInformationRecord.DeviceSupportInformationRecordError;
}

uint64_t *sub_1000E03E4(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(char *, char *, uint64_t);
  uint64_t v54;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v54 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v54 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v54);
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = (uint64_t *)((char *)a1 + v8);
    v10 = (uint64_t *)((char *)a2 + v8);
    v11 = *v10;
    v12 = v10[1];
    sub_1000A0E74(*v10, v12);
    *v9 = v11;
    v9[1] = v12;
    v13 = a3[6];
    v14 = a3[7];
    v15 = (uint64_t *)((char *)a1 + v13);
    v16 = (uint64_t *)((char *)a2 + v13);
    v59 = v16[1];
    *v15 = *v16;
    v15[1] = v59;
    v17 = (uint64_t *)((char *)a1 + v14);
    v18 = (uint64_t *)((char *)a2 + v14);
    v60 = v18[1];
    *v17 = *v18;
    v17[1] = v60;
    v19 = a3[8];
    v20 = a3[9];
    v21 = (uint64_t *)((char *)a1 + v19);
    v22 = (uint64_t *)((char *)a2 + v19);
    v23 = v22[1];
    *v21 = *v22;
    v21[1] = v23;
    v24 = (uint64_t *)((char *)a1 + v20);
    v25 = (uint64_t *)((char *)a2 + v20);
    v58 = v25[1];
    *v24 = *v25;
    v24[1] = v58;
    v26 = a3[10];
    v27 = a3[11];
    v28 = (uint64_t *)((char *)a1 + v26);
    v29 = (uint64_t *)((char *)a2 + v26);
    v30 = v29[1];
    *v28 = *v29;
    v28[1] = v30;
    v31 = (uint64_t *)((char *)a1 + v27);
    v32 = (uint64_t *)((char *)a2 + v27);
    v33 = v32[1];
    *v31 = *v32;
    v31[1] = v33;
    v34 = a3[12];
    v35 = a3[13];
    v36 = (uint64_t *)((char *)a1 + v34);
    v37 = (uint64_t *)((char *)a2 + v34);
    v38 = v37[1];
    *v36 = *v37;
    v36[1] = v38;
    v39 = (uint64_t *)((char *)a1 + v35);
    v40 = (uint64_t *)((char *)a2 + v35);
    v41 = v40[1];
    *v39 = *v40;
    v39[1] = v41;
    v42 = a3[14];
    v43 = a3[15];
    v44 = (uint64_t *)((char *)a1 + v42);
    v45 = (uint64_t *)((char *)a2 + v42);
    v46 = v45[1];
    *v44 = *v45;
    v44[1] = v46;
    v47 = (uint64_t *)((char *)a1 + v43);
    v48 = (uint64_t *)((char *)a2 + v43);
    v49 = *v48;
    v50 = v48[1];
    v51 = a3[16];
    v56 = (char *)a1 + v51;
    v57 = (char *)a2 + v51;
    *v47 = v49;
    v47[1] = v50;
    v52 = type metadata accessor for Date(0);
    v53 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v52 - 8) + 16);
    swift_bridgeObjectRetain(v59);
    swift_bridgeObjectRetain(v60);
    swift_bridgeObjectRetain(v23);
    swift_bridgeObjectRetain(v58);
    swift_bridgeObjectRetain(v30);
    swift_bridgeObjectRetain(v33);
    swift_bridgeObjectRetain(v38);
    swift_bridgeObjectRetain(v41);
    swift_bridgeObjectRetain(v46);
    swift_bridgeObjectRetain(v50);
    v53(v56, v57, v52);
  }
  return a1;
}

uint64_t sub_1000E05E0(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  sub_1000A103C(*(_QWORD *)(a1 + a2[5]), *(_QWORD *)(a1 + a2[5] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[6] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[7] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[8] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[9] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[10] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[11] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[12] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[13] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[14] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[15] + 8));
  v5 = a1 + a2[16];
  v6 = type metadata accessor for Date(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
}

uint64_t sub_1000E06EC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(uint64_t, uint64_t, uint64_t);
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = (uint64_t *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v10 = *v9;
  v11 = v9[1];
  sub_1000A0E74(*v9, v11);
  *v8 = v10;
  v8[1] = v11;
  v12 = a3[6];
  v13 = a3[7];
  v14 = (_QWORD *)(a1 + v12);
  v15 = (_QWORD *)(a2 + v12);
  v57 = v15[1];
  *v14 = *v15;
  v14[1] = v57;
  v16 = (_QWORD *)(a1 + v13);
  v17 = (_QWORD *)(a2 + v13);
  v58 = v17[1];
  *v16 = *v17;
  v16[1] = v58;
  v18 = a3[8];
  v19 = a3[9];
  v20 = (_QWORD *)(a1 + v18);
  v21 = (_QWORD *)(a2 + v18);
  v22 = v21[1];
  *v20 = *v21;
  v20[1] = v22;
  v23 = (_QWORD *)(a1 + v19);
  v24 = (_QWORD *)(a2 + v19);
  v56 = v24[1];
  *v23 = *v24;
  v23[1] = v56;
  v25 = a3[10];
  v26 = a3[11];
  v27 = (_QWORD *)(a1 + v25);
  v28 = (_QWORD *)(a2 + v25);
  v29 = v28[1];
  *v27 = *v28;
  v27[1] = v29;
  v30 = (_QWORD *)(a1 + v26);
  v31 = (_QWORD *)(a2 + v26);
  v32 = v31[1];
  *v30 = *v31;
  v30[1] = v32;
  v33 = a3[12];
  v34 = a3[13];
  v35 = (_QWORD *)(a1 + v33);
  v36 = (_QWORD *)(a2 + v33);
  v37 = v36[1];
  *v35 = *v36;
  v35[1] = v37;
  v38 = (_QWORD *)(a1 + v34);
  v39 = (_QWORD *)(a2 + v34);
  v40 = v39[1];
  *v38 = *v39;
  v38[1] = v40;
  v41 = a3[14];
  v42 = a3[15];
  v43 = (_QWORD *)(a1 + v41);
  v44 = (_QWORD *)(a2 + v41);
  v45 = v44[1];
  *v43 = *v44;
  v43[1] = v45;
  v46 = (_QWORD *)(a1 + v42);
  v47 = (uint64_t *)(a2 + v42);
  v48 = *v47;
  v49 = v47[1];
  v50 = a3[16];
  v54 = a1 + v50;
  v55 = a2 + v50;
  *v46 = v48;
  v46[1] = v49;
  v51 = type metadata accessor for Date(0);
  v52 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v51 - 8) + 16);
  swift_bridgeObjectRetain(v57);
  swift_bridgeObjectRetain(v58);
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRetain(v56);
  swift_bridgeObjectRetain(v29);
  swift_bridgeObjectRetain(v32);
  swift_bridgeObjectRetain(v37);
  swift_bridgeObjectRetain(v40);
  swift_bridgeObjectRetain(v45);
  swift_bridgeObjectRetain(v49);
  v52(v54, v55, v51);
  return a1;
}

uint64_t sub_1000E08BC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = (uint64_t *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v10 = *v9;
  v11 = v9[1];
  sub_1000A0E74(*v9, v11);
  v12 = *v8;
  v13 = v8[1];
  *v8 = v10;
  v8[1] = v11;
  sub_1000A103C(v12, v13);
  v14 = a3[6];
  v15 = (_QWORD *)(a1 + v14);
  v16 = (_QWORD *)(a2 + v14);
  *v15 = *v16;
  v17 = v16[1];
  v18 = v15[1];
  v15[1] = v17;
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRelease(v18);
  v19 = a3[7];
  v20 = (_QWORD *)(a1 + v19);
  v21 = (_QWORD *)(a2 + v19);
  *v20 = *v21;
  v22 = v21[1];
  v23 = v20[1];
  v20[1] = v22;
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRelease(v23);
  v24 = a3[8];
  v25 = (_QWORD *)(a1 + v24);
  v26 = (_QWORD *)(a2 + v24);
  *v25 = *v26;
  v27 = v26[1];
  v28 = v25[1];
  v25[1] = v27;
  swift_bridgeObjectRetain(v27);
  swift_bridgeObjectRelease(v28);
  v29 = a3[9];
  v30 = (_QWORD *)(a1 + v29);
  v31 = (_QWORD *)(a2 + v29);
  *v30 = *v31;
  v32 = v31[1];
  v33 = v30[1];
  v30[1] = v32;
  swift_bridgeObjectRetain(v32);
  swift_bridgeObjectRelease(v33);
  v34 = a3[10];
  v35 = (_QWORD *)(a1 + v34);
  v36 = (_QWORD *)(a2 + v34);
  *v35 = *v36;
  v37 = v36[1];
  v38 = v35[1];
  v35[1] = v37;
  swift_bridgeObjectRetain(v37);
  swift_bridgeObjectRelease(v38);
  v39 = a3[11];
  v40 = (_QWORD *)(a1 + v39);
  v41 = (_QWORD *)(a2 + v39);
  *v40 = *v41;
  v42 = v41[1];
  v43 = v40[1];
  v40[1] = v42;
  swift_bridgeObjectRetain(v42);
  swift_bridgeObjectRelease(v43);
  v44 = a3[12];
  v45 = (_QWORD *)(a1 + v44);
  v46 = (_QWORD *)(a2 + v44);
  *v45 = *v46;
  v47 = v46[1];
  v48 = v45[1];
  v45[1] = v47;
  swift_bridgeObjectRetain(v47);
  swift_bridgeObjectRelease(v48);
  v49 = a3[13];
  v50 = (_QWORD *)(a1 + v49);
  v51 = (_QWORD *)(a2 + v49);
  *v50 = *v51;
  v52 = v51[1];
  v53 = v50[1];
  v50[1] = v52;
  swift_bridgeObjectRetain(v52);
  swift_bridgeObjectRelease(v53);
  v54 = a3[14];
  v55 = (_QWORD *)(a1 + v54);
  v56 = (_QWORD *)(a2 + v54);
  *v55 = *v56;
  v57 = v56[1];
  v58 = v55[1];
  v55[1] = v57;
  swift_bridgeObjectRetain(v57);
  swift_bridgeObjectRelease(v58);
  v59 = a3[15];
  v60 = (_QWORD *)(a1 + v59);
  v61 = (_QWORD *)(a2 + v59);
  *v60 = *v61;
  v62 = v61[1];
  v63 = v60[1];
  v60[1] = v62;
  swift_bridgeObjectRetain(v62);
  swift_bridgeObjectRelease(v63);
  v64 = a3[16];
  v65 = a1 + v64;
  v66 = a2 + v64;
  v67 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v67 - 8) + 24))(v65, v66, v67);
  return a1;
}

uint64_t sub_1000E0B20(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  v8 = a3[8];
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  *(_OWORD *)(a1 + v8) = *(_OWORD *)(a2 + v8);
  v9 = a3[10];
  *(_OWORD *)(a1 + a3[9]) = *(_OWORD *)(a2 + a3[9]);
  *(_OWORD *)(a1 + v9) = *(_OWORD *)(a2 + v9);
  v10 = a3[12];
  *(_OWORD *)(a1 + a3[11]) = *(_OWORD *)(a2 + a3[11]);
  *(_OWORD *)(a1 + v10) = *(_OWORD *)(a2 + v10);
  v11 = a3[14];
  *(_OWORD *)(a1 + a3[13]) = *(_OWORD *)(a2 + a3[13]);
  *(_OWORD *)(a1 + v11) = *(_OWORD *)(a2 + v11);
  v12 = a3[15];
  v13 = a3[16];
  v14 = *(_OWORD *)(a2 + v12);
  v15 = a2 + v13;
  v16 = a1 + v13;
  *(_OWORD *)(a1 + v12) = v14;
  v17 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(v16, v15, v17);
  return a1;
}

uint64_t sub_1000E0C08(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = *(_QWORD *)(a1 + v7);
  v9 = *(_QWORD *)(a1 + v7 + 8);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  sub_1000A103C(v8, v9);
  v10 = a3[6];
  v11 = (_QWORD *)(a1 + v10);
  v12 = (uint64_t *)(a2 + v10);
  v14 = *v12;
  v13 = v12[1];
  v15 = v11[1];
  *v11 = v14;
  v11[1] = v13;
  swift_bridgeObjectRelease(v15);
  v16 = a3[7];
  v17 = (_QWORD *)(a1 + v16);
  v18 = (uint64_t *)(a2 + v16);
  v20 = *v18;
  v19 = v18[1];
  v21 = v17[1];
  *v17 = v20;
  v17[1] = v19;
  swift_bridgeObjectRelease(v21);
  v22 = a3[8];
  v23 = (_QWORD *)(a1 + v22);
  v24 = (uint64_t *)(a2 + v22);
  v26 = *v24;
  v25 = v24[1];
  v27 = v23[1];
  *v23 = v26;
  v23[1] = v25;
  swift_bridgeObjectRelease(v27);
  v28 = a3[9];
  v29 = (_QWORD *)(a1 + v28);
  v30 = (uint64_t *)(a2 + v28);
  v32 = *v30;
  v31 = v30[1];
  v33 = v29[1];
  *v29 = v32;
  v29[1] = v31;
  swift_bridgeObjectRelease(v33);
  v34 = a3[10];
  v35 = (_QWORD *)(a1 + v34);
  v36 = (uint64_t *)(a2 + v34);
  v38 = *v36;
  v37 = v36[1];
  v39 = v35[1];
  *v35 = v38;
  v35[1] = v37;
  swift_bridgeObjectRelease(v39);
  v40 = a3[11];
  v41 = (_QWORD *)(a1 + v40);
  v42 = (uint64_t *)(a2 + v40);
  v44 = *v42;
  v43 = v42[1];
  v45 = v41[1];
  *v41 = v44;
  v41[1] = v43;
  swift_bridgeObjectRelease(v45);
  v46 = a3[12];
  v47 = (_QWORD *)(a1 + v46);
  v48 = (uint64_t *)(a2 + v46);
  v50 = *v48;
  v49 = v48[1];
  v51 = v47[1];
  *v47 = v50;
  v47[1] = v49;
  swift_bridgeObjectRelease(v51);
  v52 = a3[13];
  v53 = (_QWORD *)(a1 + v52);
  v54 = (uint64_t *)(a2 + v52);
  v56 = *v54;
  v55 = v54[1];
  v57 = v53[1];
  *v53 = v56;
  v53[1] = v55;
  swift_bridgeObjectRelease(v57);
  v58 = a3[14];
  v59 = (_QWORD *)(a1 + v58);
  v60 = (uint64_t *)(a2 + v58);
  v62 = *v60;
  v61 = v60[1];
  v63 = v59[1];
  *v59 = v62;
  v59[1] = v61;
  swift_bridgeObjectRelease(v63);
  v64 = a3[15];
  v65 = (_QWORD *)(a1 + v64);
  v66 = (uint64_t *)(a2 + v64);
  v68 = *v66;
  v67 = v66[1];
  v69 = v65[1];
  *v65 = v68;
  v65[1] = v67;
  swift_bridgeObjectRelease(v69);
  v70 = a3[16];
  v71 = a1 + v70;
  v72 = a2 + v70;
  v73 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v73 - 8) + 40))(v71, v72, v73);
  return a1;
}

uint64_t sub_1000E0DB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000E0DC0);
}

uint64_t sub_1000E0DC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  unint64_t v11;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    v8 = type metadata accessor for Date(0);
    v10 = a1 + *(int *)(a3 + 64);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
    return v9(v10, a2, v8);
  }
  v11 = *(_QWORD *)(a1 + *(int *)(a3 + 24) + 8);
  if (v11 >= 0xFFFFFFFF)
    LODWORD(v11) = -1;
  return (v11 + 1);
}

uint64_t sub_1000E0E6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000E0E78);
}

uint64_t sub_1000E0E78(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  result = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(_QWORD *)(a1 + *(int *)(a4 + 24) + 8) = (a2 - 1);
      return result;
    }
    v10 = type metadata accessor for Date(0);
    v12 = a1 + *(int *)(a4 + 64);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t sub_1000E0F20(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[13];

  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v5[0] = *(_QWORD *)(result - 8) + 64;
    v5[1] = &unk_100186F48;
    v5[2] = &unk_100186F60;
    v5[3] = &unk_100186F60;
    v5[4] = &unk_100186F60;
    v5[5] = &unk_100186F60;
    v5[6] = &unk_100186F60;
    v5[7] = &unk_100186F60;
    v5[8] = &unk_100186F60;
    v5[9] = &unk_100186F60;
    v5[10] = &unk_100186F60;
    v5[11] = &unk_100186F60;
    result = type metadata accessor for Date(319);
    if (v4 <= 0x3F)
    {
      v5[12] = *(_QWORD *)(result - 8) + 64;
      swift_initStructMetadata(a1, 256, 13, v5, a1 + 16);
      return 0;
    }
  }
  return result;
}

uint64_t sub_1000E0FC8(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_1000A0940(&qword_1002121F0, type metadata accessor for DeviceSupportInformationRecord, (uint64_t)&unk_10018711C);
  result = sub_1000A0940(&qword_1002112A0, type metadata accessor for DeviceSupportInformationRecord, (uint64_t)&unk_1001870F4);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t sub_1000E1024()
{
  return sub_1000A0940(&qword_1002112A8, type metadata accessor for DeviceSupportInformationRecord, (uint64_t)&unk_100186F78);
}

unint64_t sub_1000E1054()
{
  unint64_t result;

  result = qword_1002112B0;
  if (!qword_1002112B0)
  {
    result = swift_getWitnessTable(&unk_10018708C, &type metadata for DeviceSupportInformationRecord.DeviceSupportInformationRecordError);
    atomic_store(result, (unint64_t *)&qword_1002112B0);
  }
  return result;
}

uint64_t sub_1000E1098(uint64_t a1)
{
  uint64_t result;

  result = sub_1000A0940(&qword_1002112B8, type metadata accessor for DeviceSupportInformationRecord, (uint64_t)&unk_100186FA0);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1000E10D4()
{
  unint64_t result;

  result = qword_1002112C8;
  if (!qword_1002112C8)
  {
    result = swift_getWitnessTable(&unk_100187224, &type metadata for DeviceSupportInformationRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002112C8);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for DeviceSupportInformationRecord.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF4)
    goto LABEL_17;
  if (a2 + 12 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 12) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 12;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 12;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 12;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xD;
  v8 = v6 - 13;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for DeviceSupportInformationRecord.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 12 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 12) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF4)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF3)
    return ((uint64_t (*)(void))((char *)&loc_1000E11F4 + 4 * byte_100186EDC[v4]))();
  *a1 = a2 + 12;
  return ((uint64_t (*)(void))((char *)sub_1000E1228 + 4 * byte_100186ED7[v4]))();
}

uint64_t sub_1000E1228(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000E1230(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000E1238);
  return result;
}

uint64_t sub_1000E1244(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000E124CLL);
  *(_BYTE *)result = a2 + 12;
  return result;
}

uint64_t sub_1000E1250(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000E1258(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DeviceSupportInformationRecord.CodingKeys()
{
  return &type metadata for DeviceSupportInformationRecord.CodingKeys;
}

unint64_t sub_1000E1278()
{
  unint64_t result;

  result = qword_1002112E8;
  if (!qword_1002112E8)
  {
    result = swift_getWitnessTable(&unk_1001871FC, &type metadata for DeviceSupportInformationRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002112E8);
  }
  return result;
}

unint64_t sub_1000E12C0()
{
  unint64_t result;

  result = qword_1002112F0;
  if (!qword_1002112F0)
  {
    result = swift_getWitnessTable(&unk_10018716C, &type metadata for DeviceSupportInformationRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002112F0);
  }
  return result;
}

unint64_t sub_1000E1308()
{
  unint64_t result;

  result = qword_1002112F8;
  if (!qword_1002112F8)
  {
    result = swift_getWitnessTable(&unk_100187194, &type metadata for DeviceSupportInformationRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002112F8);
  }
  return result;
}

uint64_t sub_1000E134C(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char v18;

  if (a1 == 0x696669746E656469 && a2 == 0xEA00000000007265)
  {
    v5 = 0xEA00000000007265;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x696669746E656469, 0xEA00000000007265, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x74654D64756F6C63 && a2 == 0xED00006174616461)
  {
    v7 = 0xED00006174616461;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x74654D64756F6C63, 0xED00006174616461, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0xD000000000000010)
  {
    v8 = 0x80000001001AA8D0;
    if (a2 == 0x80000001001AA8D0)
      goto LABEL_19;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x80000001001AA8D0, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
LABEL_19:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if (a1 == 0xD000000000000013)
  {
    v9 = 0x80000001001AD540;
    if (a2 == 0x80000001001AD540)
      goto LABEL_24;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013, 0x80000001001AD540, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
LABEL_24:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if (a1 == 0x656D614E65736163 && a2 == 0xE800000000000000)
  {
    v10 = 0xE800000000000000;
LABEL_30:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656D614E65736163, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_30;
  }
  if (a1 == 0xD000000000000013)
  {
    v11 = 0x80000001001AD560;
    if (a2 == 0x80000001001AD560)
      goto LABEL_35;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013, 0x80000001001AD560, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
LABEL_35:
    swift_bridgeObjectRelease(v11);
    return 5;
  }
  if (a1 == 0xD000000000000010)
  {
    v12 = 0x80000001001AD580;
    if (a2 == 0x80000001001AD580)
      goto LABEL_40;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x80000001001AD580, a1, a2, 0) & 1) != 0)
  {
    v12 = a2;
LABEL_40:
    swift_bridgeObjectRelease(v12);
    return 6;
  }
  if (a1 == 0x6572617764726168 && a2 == 0xEF6E6F6973726556)
  {
    v13 = 0xEF6E6F6973726556;
LABEL_46:
    swift_bridgeObjectRelease(v13);
    return 7;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6572617764726168, 0xEF6E6F6973726556, a1, a2, 0) & 1) != 0)
  {
    v13 = a2;
    goto LABEL_46;
  }
  if (a1 == 0xD000000000000013)
  {
    v14 = 0x80000001001AD5A0;
    if (a2 == 0x80000001001AD5A0)
      goto LABEL_51;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013, 0x80000001001AD5A0, a1, a2, 0) & 1) != 0)
  {
    v14 = a2;
LABEL_51:
    swift_bridgeObjectRelease(v14);
    return 8;
  }
  if (a1 == 0xD000000000000014 && a2 == 0x80000001001AD5C0)
  {
    v15 = 0x80000001001AD5C0;
LABEL_57:
    swift_bridgeObjectRelease(v15);
    return 9;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014, 0x80000001001AD5C0, a1, a2, 0) & 1) != 0)
  {
    v15 = a2;
    goto LABEL_57;
  }
  if (a1 == 0x7465737341636E61 && a2 == 0xEF6E6F6973726556)
  {
    v16 = 0xEF6E6F6973726556;
LABEL_63:
    swift_bridgeObjectRelease(v16);
    return 10;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7465737341636E61, 0xEF6E6F6973726556, a1, a2, 0) & 1) != 0)
  {
    v16 = a2;
    goto LABEL_63;
  }
  if (a1 == 0x6552746E65726170 && a2 == 0xEC00000064726F63)
  {
    v17 = 0xEC00000064726F63;
LABEL_69:
    swift_bridgeObjectRelease(v17);
    return 11;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6552746E65726170, 0xEC00000064726F63, a1, a2, 0) & 1) != 0)
  {
    v17 = a2;
    goto LABEL_69;
  }
  if (a1 == 0xD000000000000010 && a2 == 0x80000001001AAA20)
  {
    swift_bridgeObjectRelease(0x80000001001AAA20);
    return 12;
  }
  else
  {
    v18 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x80000001001AAA20, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v18 & 1) != 0)
      return 12;
    else
      return 13;
  }
}

uint64_t sub_1000E18B0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t (*v10)(char *, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v3 = type metadata accessor for URL(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v9 = (char *)&v16 - v8;
  sub_1000E1A74((uint64_t)v6);
  URL.appendingPathComponent(_:isDirectory:)(0xD000000000000011, 0x80000001001AD940, 1);
  v10 = *(uint64_t (**)(char *, uint64_t))(v4 + 8);
  v11 = v10(v6, v3);
  switch(a2)
  {
    case 3:
      v12 = 0x646572616853;
      goto LABEL_6;
    case 2:
      v13 = 0x2E65746176697250;
      goto LABEL_11;
    case 1:
      v12 = 0x63696C627550;
LABEL_6:
      v13 = v12 & 0xFFFFFFFFFFFFLL | 0x742E000000000000;
      goto LABEL_11;
  }
  v14 = static os_log_type_t.error.getter(v11);
  if (qword_1002101D0 != -1)
    swift_once(&qword_1002101D0, sub_1001686F0);
  os_log(_:dso:log:_:_:)(v14, &_mh_execute_header, qword_100218DD8, "Unknown CKDatabase.Scope!", 25, 2, _swiftEmptyArrayStorage);
  v13 = 0x2E6E776F6E6B6E55;
LABEL_11:
  URL.appendingPathComponent(_:)(v13);
  return v10(v9, v3);
}

uint64_t sub_1000E1A74@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  id v12;
  id v13;
  uint64_t v14;
  char v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  NSString *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  id v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  void (*v28)(char *, char *, uint64_t);
  uint64_t v29;

  v2 = sub_1000A0980((uint64_t *)&unk_100210840);
  __chkstk_darwin(v2);
  v4 = (char *)&v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for URL(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v29 - v10;
  v12 = objc_msgSend((id)objc_opt_self(NSProcessInfo), "processInfo");
  v13 = objc_msgSend(v12, "environment");

  v14 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v13, &type metadata for String, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(v14 + 16))
  {
    sub_1000AA00C(0xD00000000000001BLL, 0x80000001001AD820);
    v16 = v15;
    v17 = swift_bridgeObjectRelease(v14);
    if ((v16 & 1) != 0)
    {
      v18 = static os_log_type_t.default.getter(v17);
      if (qword_1002101F0 != -1)
        swift_once(&qword_1002101F0, sub_1001688B4);
      os_log(_:dso:log:_:_:)(v18, &_mh_execute_header, qword_100218DF8, "Under test appContainerURL to tmp", 33, 2, _swiftEmptyArrayStorage);
      v19 = NSTemporaryDirectory();
      v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
      v22 = v21;

      URL.init(fileURLWithPath:isDirectory:)(v20, v22, 1);
      return swift_bridgeObjectRelease(v22);
    }
  }
  else
  {
    swift_bridgeObjectRelease(v14);
  }
  v24 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
  v25 = 1;
  v26 = objc_msgSend(v24, "URLsForDirectory:inDomains:", 5, 1);

  v27 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v26, v5);
  if (*(_QWORD *)(v27 + 16))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v4, v27 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80)), v5);
    v25 = 0;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v4, v25, 1, v5);
  swift_bridgeObjectRelease(v27);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    sub_1000A1000((uint64_t)v4, (uint64_t *)&unk_100210840);
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000031, 0x80000001001AD880, "audioaccessoryd/CloudStateManager.swift", 39, 2, 97, 0);
    __break(1u);
  }
  else
  {
    v28 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
    v28(v11, v4, v5);
    URL.appendingPathComponent(_:isDirectory:)(0xD000000000000022, 0x80000001001AD8C0, 1);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v11, v5);
    return ((uint64_t (*)(uint64_t, char *, uint64_t))v28)(a1, v9, v5);
  }
  return result;
}

uint64_t sub_1000E1E20(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  void *v15;
  void *v16;
  Swift::String v17;
  id v18;
  uint64_t v19;
  void *v20;
  void *v21;
  Swift::String v22;
  void *object;
  Swift::String v25;

  v5 = type metadata accessor for URL(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000E1A74((uint64_t)v8);
  URL.appendingPathComponent(_:isDirectory:)(0x736E656B6F544B43, 0xED0000656E6F5A2FLL, 1);
  v9 = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  if (a2 == 3)
  {
    v10 = 0x646572616853;
    v11 = 0xE600000000000000;
    goto LABEL_11;
  }
  if (a2 == 2)
  {
    v10 = 0x65746176697250;
LABEL_10:
    v11 = 0xE700000000000000;
    goto LABEL_11;
  }
  if (a2 != 1)
  {
    v12 = static os_log_type_t.error.getter(v9);
    if (qword_1002101D0 != -1)
      swift_once(&qword_1002101D0, sub_1001686F0);
    os_log(_:dso:log:_:_:)(v12, &_mh_execute_header, qword_100218DD8, "Unknown CKDatabase.Scope!", 25, 2, _swiftEmptyArrayStorage);
    v10 = 0x6E776F6E6B6E55;
    goto LABEL_10;
  }
  v10 = 0x63696C627550;
  v11 = 0xE600000000000000;
LABEL_11:
  URL.appendPathComponent(_:)(*(Swift::String *)&v10);
  v13 = objc_msgSend(a3, "ownerName");
  v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
  v16 = v15;

  v17._countAndFlagsBits = v14;
  v17._object = v16;
  URL.appendPathComponent(_:)(v17);
  swift_bridgeObjectRelease(v16);
  v18 = objc_msgSend(a3, "zoneName");
  v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
  v21 = v20;

  v25._countAndFlagsBits = v19;
  v25._object = v21;
  v22._countAndFlagsBits = 0x6E656B6F742ELL;
  v22._object = (void *)0xE600000000000000;
  String.append(_:)(v22);
  object = v25._object;
  URL.appendPathComponent(_:)(v25);
  return swift_bridgeObjectRelease(object);
}

uint64_t sub_1000E204C(uint64_t a1)
{
  id v2;
  __n128 v3;
  uint64_t v4;
  uint64_t v5;
  NSString v6;
  uint64_t result;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[5];

  v2 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
  URL.path.getter(v3);
  v5 = v4;
  v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v5);
  LODWORD(v5) = objc_msgSend(v2, "fileExistsAtPath:", v6);

  result = 0;
  if ((_DWORD)v5)
  {
    v8 = Data.init(contentsOf:options:)(a1, 0);
    v10 = v9;
    sub_1000AB31C(0, &qword_100211300, NSKeyedUnarchiver_ptr);
    v11 = sub_1000A0980(&qword_100211308);
    v12 = swift_allocObject(v11, 40, 7);
    *(_OWORD *)(v12 + 16) = xmmword_100184870;
    v13 = sub_1000AB31C(0, (unint64_t *)&unk_100211310, CKServerChangeToken_ptr);
    *(_QWORD *)(v12 + 32) = v13;
    static NSKeyedUnarchiver.unarchivedObject(ofClasses:from:)(v15, v12, v8, v10);
    sub_1000A103C(v8, v10);
    swift_bridgeObjectRelease(v12);
    if (v15[3])
    {
      if (swift_dynamicCast(&v14, v15, (char *)&type metadata for Any + 8, v13, 6))
        return v14;
      else
        return 0;
    }
    else
    {
      sub_1000A1000((uint64_t)v15, &qword_100211980);
      return 0;
    }
  }
  return result;
}

id sub_1000E22C0()
{
  id v0;
  NSURL *v1;
  void *v2;
  void *v3;
  unsigned int v4;
  id v5;
  id v7;
  id v8;

  v0 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
  URL._bridgeToObjectiveC()(v1);
  v3 = v2;
  v8 = 0;
  v4 = objc_msgSend(v0, "removeItemAtURL:error:", v2, &v8);

  v5 = v8;
  if (v4)
    return v8;
  v7 = v8;
  _convertNSErrorToError(_:)(v5);

  return (id)swift_willThrow();
}

uint64_t sub_1000E23A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  id v13;
  NSURL *v14;
  void *v15;
  void *v16;
  void (*v17)(char *, uint64_t);
  id v18;
  void *v19;
  id v20;
  id v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  void *v29;
  uint64_t v30;
  void *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;

  v4 = type metadata accessor for URLResourceValues(0);
  v33 = *(_QWORD *)(v4 - 8);
  v34 = v4;
  __chkstk_darwin(v4);
  v32 = (char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v12 = (char *)&v32 - v11;
  v13 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
  URL.deletingLastPathComponent()(v13);
  URL._bridgeToObjectiveC()(v14);
  v16 = v15;
  v17 = *(void (**)(char *, uint64_t))(v7 + 8);
  v17(v12, v6);
  v36 = 0;
  LODWORD(v12) = objc_msgSend(v13, "createDirectoryAtURL:withIntermediateDirectories:attributes:error:", v16, 1, 0, &v36);

  v18 = v36;
  if (!(_DWORD)v12)
  {
    v29 = v18;
    _convertNSErrorToError(_:)(v18);

    return swift_willThrow(v30);
  }
  v19 = (void *)objc_opt_self(NSKeyedArchiver);
  v36 = 0;
  v20 = objc_msgSend(v19, "archivedDataWithRootObject:requiringSecureCoding:error:", a1, 1, &v36);
  v21 = v36;
  if (!v20)
  {
    v31 = v21;
    _convertNSErrorToError(_:)(v21);

    return swift_willThrow(v30);
  }
  v22 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v20);
  v24 = v23;

  v25 = v35;
  v26 = Data.write(to:options:)(a2, 1073741825, v22, v24);
  if (!v25)
  {
    v27 = v32;
    URLResourceValues.init()(v26);
    URLResourceValues.isExcludedFromBackup.setter(1);
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a2, v6);
    URL.setResourceValues(_:)(v27);
    v17(v9, v6);
    (*(void (**)(char *, uint64_t))(v33 + 8))(v27, v34);
  }
  return sub_1000A103C(v22, v24);
}

void sub_1000E2648()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[3];
  uint64_t v4;
  _QWORD *v5;

  v4 = type metadata accessor for CharacterSet(0);
  v3[2] = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v3[1] = (char *)v3 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for LegacyMagicPairingSettingsRecords(0) + 20) + 8);
  v5 = _swiftEmptyArrayStorage;
  __asm { BR              X9 }
}

void sub_1000E26F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (BYTE6(v2) >= 0x9AuLL)
  {
    *(_QWORD *)(v3 - 432) = v0;
    *(_QWORD *)(v3 - 112) = Data.subdata(in:)(0, 2, v1, v2);
    *(_QWORD *)(v3 - 104) = v4;
    sub_1000E56F4();
    __asm { BR              X10 }
  }
}

void sub_1000E3998()
{
  unint64_t v0;
  uint64_t v1;

  sub_1000A103C(v1, v0);
  JUMPOUT(0x1000E39A4);
}

uint64_t type metadata accessor for LegacyMagicPairingSettingsRecords(uint64_t a1)
{
  uint64_t result;

  result = qword_1002113A8;
  if (!qword_1002113A8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for LegacyMagicPairingSettingsRecords);
  return result;
}

uint64_t sub_1000E3AB4()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;

  v0 = sub_1000A0980((uint64_t *)&unk_100210840);
  __chkstk_darwin(v0);
  v2 = (char *)&v9 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for URL(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000A09C0(v7, qword_100218D40);
  sub_1000A0A00(v3, (uint64_t)qword_100218D40);
  URL.init(string:)(0x6552646568636143, 0xED00007364726F63);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v6, v2, v3);
    URL.appendingPathComponent(_:isDirectory:)(0xD000000000000011, 0x80000001001AB170, 1);
    return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
  return result;
}

uint64_t sub_1000E3C00()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  id v23;
  void *v24;
  id v25;
  uint64_t v26;
  void *v27;
  void *v28;
  Swift::String v29;
  Swift::String v30;
  Swift::String v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  Swift::String v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  Swift::String v42;
  void *object;
  Swift::String v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  void *v51;
  Swift::String v52;
  uint64_t v53;
  Swift::String v54;
  id v55;
  id v56;
  void *v57;
  void (*v58)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int (*v64)(uint64_t, uint64_t, uint64_t);
  char **v65;
  void *v66;
  Class isa;
  id v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  void *v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  void *v76;
  Class v77;
  id v78;
  void *v79;
  char *v80;
  uint64_t v81;
  Swift::String v82;
  Swift::String v83;
  id v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char **v89;
  uint64_t v90;
  uint64_t v91;
  void *v92;
  Class v93;
  id v94;
  uint64_t v95;
  void *v96;
  void *v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  void *v101;
  Class v102;
  id v103;
  void *v104;
  char *v105;
  Swift::String v106;
  Swift::String v107;
  id v108;
  void *v109;
  uint64_t v110;
  void *v111;
  void *v112;
  Swift::String v113;
  Swift::String v114;
  id v115;
  void *v116;
  uint64_t v117;
  void *v118;
  void *v119;
  Swift::String v120;
  Swift::String v121;
  uint64_t v122;
  void *v123;
  unint64_t v124;
  Swift::String v125;
  unint64_t v126;
  uint64_t v127;
  void *v128;
  uint64_t v129;
  void *v130;
  Swift::String v131;
  uint64_t v132;
  char *v133;
  unint64_t v134;
  char *v135;
  char *v136;
  char *v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  id v142;
  uint64_t v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  Swift::String v148;

  v143 = type metadata accessor for LegacyMagicPairingSettingsRecords(0);
  __chkstk_darwin(v143);
  v2 = (char *)&v132 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v144 = (char *)&v132 - v4;
  v5 = type metadata accessor for Date(0);
  v140 = *(_QWORD *)(v5 - 8);
  v141 = v5;
  __chkstk_darwin(v5);
  v133 = (char *)&v132 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1000A0980((uint64_t *)&unk_1002103D0);
  __chkstk_darwin(v7);
  v9 = (char *)&v132 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v137 = (char *)&v132 - v11;
  __chkstk_darwin(v12);
  v14 = (char *)&v132 - v13;
  __chkstk_darwin(v15);
  v139 = (uint64_t)&v132 - v16;
  v142 = (id)sub_1000AB658();
  v145 = v0;
  sub_1000E2648();
  v18 = v17;
  v148._countAndFlagsBits = 0;
  v148._object = (void *)0xE000000000000000;
  v19 = (unint64_t)v17 >> 62;
  v138 = v2;
  v135 = v14;
  v136 = v9;
  if ((unint64_t)v17 >> 62)
  {
    if (v17 < 0)
      v32 = v17;
    else
      v32 = v17 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v17);
    result = _CocoaArrayWrapper.endIndex.getter(v32);
    v20 = result;
    if (!result)
      goto LABEL_13;
  }
  else
  {
    v20 = *(_QWORD *)((v17 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain(v17);
    if (!v20)
      goto LABEL_13;
  }
  if (v20 < 1)
  {
    __break(1u);
    return result;
  }
  v22 = 0;
  do
  {
    if ((v18 & 0xC000000000000001) != 0)
      v23 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v22, v18);
    else
      v23 = *(id *)(v18 + 8 * v22 + 32);
    v24 = v23;
    ++v22;
    v25 = objc_msgSend(v23, "description");
    v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
    v28 = v27;

    v29._countAndFlagsBits = v26;
    v29._object = v28;
    String.append(_:)(v29);
    swift_bridgeObjectRelease(v28);
    v30._countAndFlagsBits = 0x2D2D2D2D2D2D0ALL;
    v30._object = (void *)0xE700000000000000;
    String.append(_:)(v30);
    v31._countAndFlagsBits = 10;
    v31._object = (void *)0xE100000000000000;
    String.append(_:)(v31);

  }
  while (v20 != v22);
LABEL_13:
  swift_bridgeObjectRelease(v18);
  if (v19)
  {
    if (v18 < 0)
      v34 = v18;
    else
      v34 = v18 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v18);
    v33 = _CocoaArrayWrapper.endIndex.getter(v34);
    swift_bridgeObjectRelease(v18);
  }
  else
  {
    v33 = *(_QWORD *)((v18 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v35 = v140;
  v36 = (uint64_t)v135;
  swift_bridgeObjectRelease(v18);
  if (v33 >= 2)
  {
    sub_1000E4564();
    swift_bridgeObjectRelease(v37);
  }
  v146 = 0;
  v147 = 0xE000000000000000;
  _StringGuts.grow(_:)(52);
  v38._object = (void *)0x80000001001AD9C0;
  v38._countAndFlagsBits = 0xD000000000000024;
  String.append(_:)(v38);
  v39 = type metadata accessor for UUID(0);
  v40 = sub_1000A0940((unint64_t *)&unk_100210750, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v41 = v145;
  v42._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v39, v40);
  object = v42._object;
  String.append(_:)(v42);
  swift_bridgeObjectRelease(object);
  v44._countAndFlagsBits = 0x616261746164202CLL;
  v44._object = (void *)0xEC000000203A6573;
  String.append(_:)(v44);
  v45 = Data.subdata(in:)(0, 4, *(_QWORD *)(v41 + *(int *)(v143 + 20)), *(_QWORD *)(v41 + *(int *)(v143 + 20) + 8));
  v47 = v46;
  Data.hexString.getter(v45, v46);
  v49 = v48;
  v51 = v50;
  sub_1000A103C(v45, v47);
  v52._countAndFlagsBits = v49;
  v52._object = v51;
  String.append(_:)(v52);
  swift_bridgeObjectRelease(v51);
  v53 = v146;
  v134 = v147;
  v146 = 0;
  v147 = 0xE000000000000000;
  _StringGuts.grow(_:)(60);
  v54._countAndFlagsBits = 0x7461657263202020;
  v54._object = (void *)0xEE00203A6E4F6465;
  String.append(_:)(v54);
  v55 = v142;
  v56 = objc_msgSend(v142, "creationDate");
  if (v56)
  {
    v57 = v56;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v56);

    v58 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v35 + 56);
    v59 = v36;
    v60 = 0;
  }
  else
  {
    v58 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v35 + 56);
    v59 = v36;
    v60 = 1;
  }
  v61 = v141;
  v58(v59, v60, 1, v141);
  v62 = (uint64_t)v144;
  v63 = v139;
  sub_1000A0F38(v36, v139);
  v64 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v35 + 48);
  v65 = &selRef_setEarTipFitTestCapability_;
  if (v64(v63, 1, v61))
  {
    sub_1000B2D38(v63);
    sub_1000E626C(v145, v62);
LABEL_26:
    v66 = (void *)objc_opt_self(NSDateFormatter);
    isa = Date._bridgeToObjectiveC()().super.isa;
    v68 = objc_msgSend(v66, v65[251], isa, 2, 2);

    v69 = (uint64_t)v144;
    v70 = static String._unconditionallyBridgeFromObjectiveC(_:)(v68);
    v72 = v71;

    goto LABEL_28;
  }
  v73 = v53;
  v74 = v133;
  (*(void (**)(char *, uint64_t, uint64_t))(v35 + 16))(v133, v63, v61);
  sub_1000B2D38(v63);
  v75 = v61;
  v76 = (void *)objc_opt_self(NSDateFormatter);
  v77 = Date._bridgeToObjectiveC()().super.isa;
  v78 = objc_msgSend(v76, "localizedStringFromDate:dateStyle:timeStyle:", v77, 2, 2);

  v69 = (uint64_t)v144;
  v70 = static String._unconditionallyBridgeFromObjectiveC(_:)(v78);
  v72 = v79;

  v65 = &selRef_setEarTipFitTestCapability_;
  v80 = v74;
  v53 = v73;
  v55 = v142;
  v81 = v75;
  v35 = v140;
  (*(void (**)(char *, uint64_t))(v140 + 8))(v80, v81);
  sub_1000E626C(v145, v69);
  if (!v72)
    goto LABEL_26;
LABEL_28:
  sub_1000E62B0(v69);
  v82._countAndFlagsBits = v70;
  v82._object = v72;
  String.append(_:)(v82);
  swift_bridgeObjectRelease(v72);
  v83._countAndFlagsBits = 0x696669646F6D202CLL;
  v83._object = (void *)0xEE00203A6E4F6465;
  String.append(_:)(v83);
  v84 = objc_msgSend(v55, "modificationDate");
  if (v84)
  {
    v85 = v84;
    v86 = (uint64_t)v136;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v84);

    v87 = 0;
  }
  else
  {
    v87 = 1;
    v86 = (uint64_t)v136;
  }
  v88 = (uint64_t)v137;
  v89 = &selRef_setEarTipFitTestCapability_;
  v90 = v141;
  v58(v86, v87, 1, v141);
  sub_1000A0F38(v86, v88);
  if (v64(v88, 1, v90))
  {
    sub_1000B2D38(v88);
    v91 = (uint64_t)v138;
    sub_1000E626C(v145, (uint64_t)v138);
  }
  else
  {
    v98 = v53;
    v99 = v133;
    (*(void (**)(char *, uint64_t, uint64_t))(v35 + 16))(v133, v88, v90);
    sub_1000B2D38(v88);
    v100 = v90;
    v101 = (void *)objc_opt_self(NSDateFormatter);
    v102 = Date._bridgeToObjectiveC()().super.isa;
    v103 = objc_msgSend(v101, "localizedStringFromDate:dateStyle:timeStyle:", v102, 2, 2);

    v95 = static String._unconditionallyBridgeFromObjectiveC(_:)(v103);
    v97 = v104;

    v89 = &selRef_setEarTipFitTestCapability_;
    v105 = v99;
    v53 = v98;
    (*(void (**)(char *, uint64_t))(v35 + 8))(v105, v100);
    v91 = (uint64_t)v138;
    sub_1000E626C(v145, (uint64_t)v138);
    if (v97)
      goto LABEL_35;
  }
  v92 = (void *)objc_opt_self(NSDateFormatter);
  v93 = Date._bridgeToObjectiveC()().super.isa;
  v94 = objc_msgSend(v92, v89[251], v93, 2, 2);

  v95 = static String._unconditionallyBridgeFromObjectiveC(_:)(v94);
  v97 = v96;

LABEL_35:
  sub_1000E62B0(v91);
  v106._countAndFlagsBits = v95;
  v106._object = v97;
  String.append(_:)(v106);
  swift_bridgeObjectRelease(v97);
  v107._countAndFlagsBits = 0x696669646F6D202CLL;
  v107._object = (void *)0xEF203A7962206465;
  String.append(_:)(v107);
  v108 = objc_msgSend(v55, "modifiedByDevice");
  if (v108)
  {
    v109 = v108;
    v110 = static String._unconditionallyBridgeFromObjectiveC(_:)(v108);
    v112 = v111;

  }
  else
  {
    v112 = (void *)0xE200000000000000;
    v110 = 15932;
  }
  v113._countAndFlagsBits = v110;
  v113._object = v112;
  String.append(_:)(v113);
  swift_bridgeObjectRelease(v112);
  v114._countAndFlagsBits = 0x203A67617465202CLL;
  v114._object = (void *)0xE800000000000000;
  String.append(_:)(v114);
  v115 = objc_msgSend(v55, "recordChangeTag");
  if (v115)
  {
    v116 = v115;
    v117 = static String._unconditionallyBridgeFromObjectiveC(_:)(v115);
    v119 = v118;

  }
  else
  {
    v119 = (void *)0xE200000000000000;
    v117 = 15932;
  }
  v120._countAndFlagsBits = v117;
  v120._object = v119;
  String.append(_:)(v120);
  swift_bridgeObjectRelease(v119);
  v121._countAndFlagsBits = 10;
  v121._object = (void *)0xE100000000000000;
  String.append(_:)(v121);
  v122 = v146;
  v123 = (void *)v147;
  v124 = v134;
  v146 = v53;
  v147 = v134;
  swift_bridgeObjectRetain(v134);
  v125._countAndFlagsBits = v122;
  v125._object = v123;
  String.append(_:)(v125);
  swift_bridgeObjectRelease(v124);
  swift_bridgeObjectRelease(v123);
  v127 = v146;
  v126 = v147;
  v146 = 10;
  v147 = 0xE100000000000000;
  v128 = v148._object;
  String.append(_:)(v148);
  swift_bridgeObjectRelease(v128);
  v129 = v146;
  v130 = (void *)v147;
  v146 = v127;
  v147 = v126;
  swift_bridgeObjectRetain(v126);
  v131._countAndFlagsBits = v129;
  v131._object = v130;
  String.append(_:)(v131);
  swift_bridgeObjectRelease(v126);
  swift_bridgeObjectRelease(v130);

  return v146;
}

void sub_1000E4564()
{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *v0;
  v2 = v0[1];
  if ((v2 & 0x2000000000000000) == 0)
  {
    v3 = v1 & 0xFFFFFFFFFFFFLL;
    if ((v1 & 0xFFFFFFFFFFFFLL) != 0)
      goto LABEL_5;
    __break(1u);
  }
  v3 = HIBYTE(v2) & 0xF;
  if (!v3)
  {
    __break(1u);
    return;
  }
LABEL_5:
  v4 = 7;
  if (((v2 >> 60) & ((v1 & 0x800000000000000) == 0)) != 0)
    v4 = 11;
  v5 = String.index(before:)(v4 | (v3 << 16));
  String.remove(at:)(v5);
}

uint64_t sub_1000E45B8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t result;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  id v36;
  char *v37;
  _QWORD *v38;
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  _QWORD *v43;
  unsigned int (*v44)(char *, uint64_t, uint64_t);
  char *v45;
  void *v46;
  uint64_t v47;
  unint64_t v48;
  objc_class *v49;
  Class isa;
  uint64_t v51;
  id v52;
  char *v53;
  _QWORD *v54;
  void (*v55)(uint64_t, char *, uint64_t);
  uint64_t v56;
  char *v57;
  uint64_t v58;
  void (*v59)(uint64_t, uint64_t, uint64_t, uint64_t);
  unsigned int v60;
  uint64_t *v61;
  char *v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  void *v67;
  unint64_t v68;
  uint64_t v69;
  objc_class *v70;
  Class v71;
  uint64_t v72;
  id v73;
  char *v74;
  void (*v75)(char *, char *, uint64_t);
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t *v81;
  char *v82;
  id v83;
  id v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  char *v89;
  char *v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  _QWORD *v97;
  id v98[4];
  char v99;

  v91 = a2;
  v4 = sub_1000A0980((uint64_t *)&unk_1002103D0);
  __chkstk_darwin(v4);
  v85 = (char *)&v80 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v89 = (char *)&v80 - v7;
  __chkstk_darwin(v8);
  v92 = (char *)&v80 - v9;
  v10 = type metadata accessor for Date(0);
  v95 = *(_QWORD **)(v10 - 8);
  v96 = v10;
  __chkstk_darwin(v10);
  v88 = (char *)&v80 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v90 = (char *)&v80 - v13;
  v14 = sub_1000A0980(&qword_100211428);
  v93 = *(_QWORD *)(v14 - 8);
  v94 = v14;
  __chkstk_darwin(v14);
  v16 = (char *)&v80 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_1000A0980(&qword_1002103E0);
  __chkstk_darwin(v17);
  v19 = (char *)&v80 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = (int *)type metadata accessor for LegacyMagicPairingSettingsRecords(0);
  __chkstk_darwin(v20);
  v86 = (uint64_t)&v80 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v87 = (uint64_t)&v80 - v23;
  __chkstk_darwin(v24);
  v26 = (char *)&v80 - v25;
  UUID.init(uuidString:)(0xD000000000000024, 0x80000001001ADA40);
  v27 = type metadata accessor for UUID(0);
  v28 = *(_QWORD *)(v27 - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v28 + 48))(v19, 1, v27);
  if ((_DWORD)result != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v26, v19, v27);
    v30 = a1;
    v32 = a1[3];
    v31 = a1[4];
    v97 = v30;
    sub_1000A20D8(v30, v32);
    v33 = sub_1000E6660();
    dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for LegacyMagicPairingSettingsRecords.CodingKeys, &type metadata for LegacyMagicPairingSettingsRecords.CodingKeys, v33, v32, v31);
    if (v2)
    {
      sub_1000A2140(v97);
      return (*(uint64_t (**)(char *, uint64_t))(v28 + 8))(v26, v27);
    }
    v99 = 2;
    v34 = sub_1000A2160();
    v35 = v94;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v98, &type metadata for Data, &v99, v94, &type metadata for Data, v34);
    v36 = v98[1];
    v37 = &v26[v20[6]];
    v83 = v98[1];
    v84 = v98[0];
    *(id *)v37 = v98[0];
    *((_QWORD *)v37 + 1) = v36;
    v99 = 1;
    v38 = KeyedDecodingContainer.decode<A>(_:forKey:)(v98, &type metadata for Data, &v99, v35, &type metadata for Data, v34);
    *(_OWORD *)&v26[v20[5]] = *(_OWORD *)v98;
    v39 = &v26[v20[7]];
    v81 = (uint64_t *)v37;
    v82 = v39;
    static Date.now.getter(v38);
    LOBYTE(v98[0]) = 3;
    v40 = sub_1000A0940(&qword_100210790, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    v41 = v16;
    v42 = v96;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v96, v98, v35, v96, v40);
    v80 = v41;
    v43 = v95;
    v44 = (unsigned int (*)(char *, uint64_t, uint64_t))v95[6];
    v45 = v92;
    if (v44(v92, 1, v42) != 1)
    {
      v58 = v42;
      (*(void (**)(char *, uint64_t))(v93 + 8))(v80, v94);
      v62 = v90;
      ((void (*)(char *, char *, uint64_t))v43[4])(v90, v45, v42);
      v63 = v97;
      v64 = v91;
      v66 = v82;
LABEL_22:
      ((void (*)(char *, char *, uint64_t))v43[5])(v66, v62, v58);
      sub_1000E626C((uint64_t)v26, v64);
      sub_1000A2140(v63);
      return sub_1000E62B0((uint64_t)v26);
    }
    v46 = objc_autoreleasePoolPush();
    v48 = (unint64_t)v83;
    v47 = (uint64_t)v84;
    sub_1000A0E74((uint64_t)v84, (unint64_t)v83);
    sub_100109DEC(v47, v48);
    isa = v49;
    sub_1000A103C(v47, v48);
    v51 = v87;
    sub_1000E626C((uint64_t)v26, v87);
    if (!isa)
      isa = sub_1000A97D0(v51).super.isa;
    sub_1000E62B0(v51);
    v98[0] = isa;
    sub_1000E54A0(v98);
    objc_autoreleasePoolPop(v46);
    v52 = -[objc_class modificationDate](isa, "modificationDate");

    if (v52)
    {
      v53 = v88;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v52);

      v54 = v95;
      v55 = (void (*)(uint64_t, char *, uint64_t))v95[4];
      v56 = (uint64_t)v89;
      v57 = v53;
      v58 = v96;
      v55((uint64_t)v89, v57, v96);
      v59 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v54[7];
      v59(v56, 0, 1, v58);
      v60 = v44((char *)v56, 1, v58);
      v61 = v81;
      if (v60 != 1)
      {
        (*(void (**)(char *, uint64_t))(v93 + 8))(v80, v94);
        v62 = v90;
        v55((uint64_t)v90, v89, v58);
        v63 = v97;
        v43 = v95;
        v64 = v91;
        v65 = (uint64_t)v92;
LABEL_21:
        v66 = v82;
        sub_1000B2D38(v65);
        goto LABEL_22;
      }
    }
    else
    {
      v59 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v95[7];
      v59((uint64_t)v89, 1, 1, v96);
      v61 = v81;
    }
    v67 = objc_autoreleasePoolPush();
    v69 = *v61;
    v68 = v61[1];
    sub_1000A0E74(*v61, v68);
    sub_100109DEC(v69, v68);
    v71 = v70;
    sub_1000A103C(v69, v68);
    v72 = v86;
    sub_1000E626C((uint64_t)v26, v86);
    if (!v71)
      v71 = sub_1000A97D0(v72).super.isa;
    sub_1000E62B0(v72);
    v98[0] = v71;
    sub_1000E54A0(v98);
    objc_autoreleasePoolPop(v67);
    v73 = -[objc_class creationDate](v71, "creationDate");

    v65 = (uint64_t)v92;
    if (v73)
    {
      v74 = v88;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v73);

      v43 = v95;
      v75 = (void (*)(char *, char *, uint64_t))v95[4];
      v76 = v85;
      v77 = v74;
      v58 = v96;
      v75(v85, v77, v96);
      v59((uint64_t)v76, 0, 1, v58);
      v78 = ((uint64_t (*)(char *, uint64_t, uint64_t))v44)(v76, 1, v58);
      v79 = (uint64_t)v76;
      v64 = v91;
      if ((_DWORD)v78 != 1)
      {
        (*(void (**)(char *, uint64_t))(v93 + 8))(v80, v94);
        v62 = v90;
        v75(v90, (char *)v79, v58);
LABEL_20:
        v63 = v97;
        sub_1000B2D38((uint64_t)v89);
        goto LABEL_21;
      }
    }
    else
    {
      v79 = (uint64_t)v85;
      v58 = v96;
      v78 = ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v59)(v85, 1, 1, v96);
      v43 = v95;
      v64 = v91;
    }
    v62 = v90;
    static Date.now.getter(v78);
    (*(void (**)(char *, uint64_t))(v93 + 8))(v80, v94);
    sub_1000B2D38(v79);
    goto LABEL_20;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000E4DAC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, char *, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  id v21;
  NSString v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  unint64_t v34;
  uint64_t v35;
  _BYTE *v36;
  uint64_t v37;
  _QWORD v39[6];
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD v44[2];
  id v45;

  v4 = sub_1000A0980((uint64_t *)&unk_1002103D0);
  __chkstk_darwin(v4);
  v39[4] = (char *)v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v41 = (char *)v39 - v7;
  v40 = type metadata accessor for Date(0);
  v42 = *(_QWORD *)(v40 - 8);
  __chkstk_darwin(v40);
  __chkstk_darwin(v8);
  v39[5] = (char *)v39 - v9;
  v10 = sub_1000A0980(&qword_1002103E0);
  __chkstk_darwin(v10);
  v12 = (char *)v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  UUID.init(uuidString:)(0xD000000000000024, 0x80000001001ADA40);
  v13 = type metadata accessor for UUID(0);
  v14 = *(_QWORD *)(v13 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
  {
    __break(1u);
    JUMPOUT(0x1000E5490);
  }
  v15 = *(uint64_t (**)(uint64_t, char *, uint64_t))(v14 + 32);
  v43 = a2;
  v16 = v15(a2, v12, v13);
  v17 = CKRecord.recordType.getter(v16);
  v19 = v18;
  if (v17 == 0xD000000000000011 && v18 == 0x80000001001AB170)
  {
    swift_bridgeObjectRelease(0x80000001001AB170);
  }
  else
  {
    v20 = _stringCompareWithSmolCheck(_:_:expecting:)(v17, v18, 0xD000000000000011, 0x80000001001AB170, 0);
    swift_bridgeObjectRelease(v19);
    if ((v20 & 1) == 0)
    {
      v26 = sub_1000E62EC();
      v27 = swift_allocError(&type metadata for LegacyMagicPairingSettingsRecords.LegacyMagicPairingSettingsRecordsError, v26, 0, 0);
      *v28 = 0;
      swift_willThrow(v27);
      goto LABEL_13;
    }
  }
  v21 = objc_msgSend(a1, "encryptedValues");
  v22 = String._bridgeToObjectiveC()();
  v23 = objc_msgSend(v21, "objectForKeyedSubscript:", v22);

  if (v23)
  {
    v45 = v23;
    v25 = sub_1000A0980(&qword_100210400);
    v24 = swift_dynamicCast(v44, &v45, v25, &type metadata for Data, 6);
    if ((v24 & 1) != 0)
      __asm { BR              X10 }
  }
  v29 = static os_log_type_t.error.getter(v24);
  if (qword_1002101E0 != -1)
    swift_once(&qword_1002101E0, sub_1001687B0);
  v30 = qword_100218DE8;
  v31 = sub_1000A0980((uint64_t *)&unk_1002103C0);
  v32 = swift_allocObject(v31, 72, 7);
  *(_OWORD *)(v32 + 16) = xmmword_100184870;
  *(_QWORD *)(v32 + 56) = sub_1000A0FC4();
  *(_QWORD *)(v32 + 64) = sub_1000A0940((unint64_t *)&qword_1002108A0, (uint64_t (*)(uint64_t))sub_1000A0FC4, (uint64_t)&protocol conformance descriptor for NSObject);
  *(_QWORD *)(v32 + 32) = a1;
  v33 = a1;
  os_log(_:dso:log:_:_:)(v29, &_mh_execute_header, v30, "Invalid LegacyMagicPairingSettingsRecords - %@", 46, 2, v32);
  swift_bridgeObjectRelease(v32);
  v34 = sub_1000E62EC();
  v35 = swift_allocError(&type metadata for LegacyMagicPairingSettingsRecords.LegacyMagicPairingSettingsRecordsError, v34, 0, 0);
  *v36 = 2;
  swift_willThrow(v35);
  swift_unknownObjectRelease(v21);
LABEL_13:
  v37 = v43;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 8))(v37, v13);
}

uint64_t sub_1000E54A0(id *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t ObjectType;
  uint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  char v21;
  uint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  void *v26;

  v2 = v1;
  v4 = static os_log_type_t.debug.getter(a1);
  if (qword_1002101E0 != -1)
    swift_once(&qword_1002101E0, sub_1001687B0);
  v5 = qword_100218DE8;
  v6 = sub_1000A0980((uint64_t *)&unk_1002103C0);
  v7 = swift_allocObject(v6, 72, 7);
  *(_OWORD *)(v7 + 16) = xmmword_100184870;
  v8 = *a1;
  v9 = objc_msgSend(v8, "description");
  v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
  v12 = v11;

  *(_QWORD *)(v7 + 56) = &type metadata for String;
  *(_QWORD *)(v7 + 64) = sub_1000A0DF4();
  *(_QWORD *)(v7 + 32) = v10;
  *(_QWORD *)(v7 + 40) = v12;
  os_log(_:dso:log:_:_:)(v4, &_mh_execute_header, v5, "Updating LEGACY magic settings record: %@", 41, 2, v7);
  swift_bridgeObjectRelease(v7);
  v13 = objc_msgSend(v8, "encryptedValues");
  ObjectType = swift_getObjectType(v13);
  CKRecordKeyValueSetting.subscript.getter(&v23, 0xD000000000000016, 0x80000001001ADA20, ObjectType, &type metadata for Data, &protocol witness table for Data);
  v15 = v23;
  v16 = v24;
  v17 = (uint64_t *)(v2 + *(int *)(type metadata accessor for LegacyMagicPairingSettingsRecords(0) + 20));
  v18 = *v17;
  v19 = v17[1];
  sub_1000A0E74(*v17, v19);
  if (v16 >> 60 == 15)
  {
    sub_1000B2D78(v15, v16);
    sub_1000B2D78(v18, v19);
LABEL_6:
    v25 = &type metadata for Data;
    v26 = &protocol witness table for Data;
    v23 = v18;
    v24 = v19;
    sub_1000A0E74(v18, v19);
    CKRecordKeyValueSetting.subscript.setter(&v23, 0xD000000000000016, 0x80000001001ADA20, ObjectType);
    return swift_unknownObjectRelease(v13);
  }
  sub_1000B2D8C(v15, v16);
  sub_1000D25EC(v15, v16);
  v21 = v20;
  sub_1000A103C(v18, v19);
  sub_1000B2D78(v15, v16);
  sub_1000B2D78(v15, v16);
  if ((v21 & 1) == 0)
    goto LABEL_6;
  return swift_unknownObjectRelease(v13);
}

void sub_1000E56F4()
{
  __asm { BR              X12 }
}

void sub_1000E5A18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((a1 & 0x8000000000000000) == 0)
    __asm { BR              X9 }
  __break(1u);
  JUMPOUT(0x1000E5B74);
}

uint64_t sub_1000E5BA8(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  char v21;
  __int128 v22;

  v3 = v1;
  v5 = sub_1000A0980(&qword_100211410);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_1000A20D8(a1, v9);
  v11 = sub_1000E6660();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for LegacyMagicPairingSettingsRecords.CodingKeys, &type metadata for LegacyMagicPairingSettingsRecords.CodingKeys, v11, v9, v10);
  LOBYTE(v22) = 0;
  v12 = type metadata accessor for UUID(0);
  v13 = sub_1000A0940((unint64_t *)&unk_1002105E0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v3, &v22, v5, v12, v13);
  if (!v2)
  {
    v14 = (int *)type metadata accessor for LegacyMagicPairingSettingsRecords(0);
    v22 = *(_OWORD *)(v3 + v14[5]);
    v21 = 1;
    v15 = sub_1000A21A4();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v22, &v21, v5, &type metadata for Data, v15);
    v22 = *(_OWORD *)(v3 + v14[6]);
    v21 = 2;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v22, &v21, v5, &type metadata for Data, v15);
    v16 = v3 + v14[7];
    LOBYTE(v22) = 3;
    v17 = type metadata accessor for Date(0);
    v18 = sub_1000A0940((unint64_t *)&unk_100210EB0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v16, &v22, v5, v17, v18);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1000E5DB8()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1000E5DEC + 4 * byte_100187280[*v0]))(0x696669746E656469, 0xEA00000000007265);
}

unint64_t sub_1000E5DEC()
{
  return 0xD000000000000011;
}

uint64_t sub_1000E5E0C()
{
  return 0x74654D64756F6C63;
}

unint64_t sub_1000E5E30()
{
  return 0xD000000000000010;
}

uint64_t sub_1000E5E4C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1000E6848(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000E5E70(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000E6660();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000E5E98(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000E6660();
  return CodingKey.debugDescription.getter(a1, v2);
}

unint64_t sub_1000E5EC0()
{
  return 0xD000000000000011;
}

unint64_t sub_1000E5EDC()
{
  return 0xD000000000000024;
}

uint64_t sub_1000E5F00@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000E45B8(a1, a2);
}

uint64_t sub_1000E5F14(_QWORD *a1)
{
  return sub_1000E5BA8(a1);
}

void sub_1000E5F28(uint64_t a1, uint64_t a2)
{
  type metadata accessor for Data.Iterator(0);
  __chkstk_darwin();
  __asm { BR              X10 }
}

_QWORD *sub_1000E5FA4()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  uint64_t v8;

  if (BYTE6(v0))
  {
    v6 = sub_1000A0980((uint64_t *)&unk_100211330);
    v4 = (_QWORD *)swift_allocObject(v6, BYTE6(v0) + 32, 7);
    v7 = j__malloc_size(v4);
    v4[2] = BYTE6(v0);
    v4[3] = 2 * v7 - 64;
    sub_1000A0E74(v2, v0);
    v8 = ((uint64_t (*)(uint64_t, _QWORD *, _QWORD, uint64_t, unint64_t))Data._copyContents(initializing:))(v3, v4 + 4, BYTE6(v0), v2, v0);
    sub_1000A103C(v2, v0);
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v1);
    if (v8 != BYTE6(v0))
    {
      __break(1u);
      JUMPOUT(0x1000E6078);
    }
  }
  return v4;
}

uint64_t sub_1000E6090(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  BOOL v4;
  uint64_t v5;

  v4 = __OFADD__(a1, a2);
  v5 = a1 + a2;
  if (v4)
  {
    __break(1u);
    JUMPOUT(0x1000E60F0);
  }
  return ((uint64_t (*)(uint64_t))((char *)&loc_1000E60A8 + dword_1000E60F4[a4 >> 62]))(v5);
}

uint64_t sub_1000E6104(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  return ((uint64_t (*)(void))((char *)&loc_1000E6114 + dword_1000E61BC[a4 >> 62]))();
}

uint64_t sub_1000E6128@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, int a3@<W8>)
{
  if (BYTE6(a2) < a1 || a1 < 0)
  {
    __break(1u);
    JUMPOUT(0x1000E61B4);
  }
  return ((uint64_t (*)(void))((char *)&loc_1000E6164 + dword_1000E61CC[a3]))();
}

uint64_t sub_1000E61DC(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(result + 16);
  if (!v1)
  {
LABEL_9:
    __break(1u);
    return result;
  }
  v2 = result;
  v3 = *(unsigned __int8 *)(result + 32);
  result += 32;
  if (v3)
  {
    v4 = 0;
    v5 = v1 - 1;
    v6 = v2 + 33;
    while (v5 != v4)
    {
      if (!*(unsigned __int8 *)(v6 + v4++))
        return static String._fromUTF8Repairing(_:)(result, v4);
    }
    __break(1u);
    goto LABEL_9;
  }
  v4 = 0;
  return static String._fromUTF8Repairing(_:)(result, v4);
}

unint64_t sub_1000E6224()
{
  unint64_t result;

  result = qword_100211320;
  if (!qword_100211320)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_100211320);
  }
  return result;
}

uint64_t sub_1000E626C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for LegacyMagicPairingSettingsRecords(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000E62B0(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for LegacyMagicPairingSettingsRecords(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1000E62EC()
{
  unint64_t result;

  result = qword_100211340;
  if (!qword_100211340)
  {
    result = swift_getWitnessTable(&unk_100187490, &type metadata for LegacyMagicPairingSettingsRecords.LegacyMagicPairingSettingsRecordsError);
    atomic_store(result, (unint64_t *)&qword_100211340);
  }
  return result;
}

ValueMetadata *type metadata accessor for LegacyMagicPairingSettingsRecords.LegacyMagicPairingSettingsRecordsError()
{
  return &type metadata for LegacyMagicPairingSettingsRecords.LegacyMagicPairingSettingsRecordsError;
}

uint64_t sub_1000E6344(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000E6350);
}

uint64_t sub_1000E6350(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  if ((_DWORD)a2 == 12)
  {
    v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8) >> 60;
    if (((4 * (_DWORD)v9) & 0xC) != 0)
      return 16 - ((4 * (_DWORD)v9) & 0xC | (v9 >> 2));
    else
      return 0;
  }
  else
  {
    v10 = type metadata accessor for Date(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(a1 + *(int *)(a3 + 28), a2, v10);
  }
}

uint64_t sub_1000E6408(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000E6414);
}

uint64_t sub_1000E6414(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  _QWORD *v13;

  result = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 12)
    {
      v13 = (_QWORD *)(a1 + *(int *)(a4 + 20));
      *v13 = 0;
      v13[1] = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * (_DWORD)a2) << 60;
      return result;
    }
    v10 = type metadata accessor for Date(0);
    v12 = a1 + *(int *)(a4 + 28);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t sub_1000E64C4(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[4];

  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v5[0] = *(_QWORD *)(result - 8) + 64;
    v5[1] = &unk_1001872F8;
    v5[2] = &unk_1001872F8;
    result = type metadata accessor for Date(319);
    if (v4 <= 0x3F)
    {
      v5[3] = *(_QWORD *)(result - 8) + 64;
      swift_initStructMetadata(a1, 256, 4, v5, a1 + 16);
      return 0;
    }
  }
  return result;
}

uint64_t sub_1000E6554(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_1000A0940(&qword_1002113E8, type metadata accessor for LegacyMagicPairingSettingsRecords, (uint64_t)&unk_100187468);
  result = sub_1000A0940(&qword_1002113F0, type metadata accessor for LegacyMagicPairingSettingsRecords, (uint64_t)&unk_1001874D0);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t sub_1000E65B0()
{
  return sub_1000A0940(&qword_1002113F8, type metadata accessor for LegacyMagicPairingSettingsRecords, (uint64_t)&unk_100187310);
}

uint64_t sub_1000E65DC(uint64_t a1)
{
  uint64_t result;

  result = sub_1000A0940(&qword_100211400, type metadata accessor for LegacyMagicPairingSettingsRecords, (uint64_t)&unk_100187338);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1000E661C()
{
  unint64_t result;

  result = qword_100211408;
  if (!qword_100211408)
  {
    result = swift_getWitnessTable(&unk_100187440, &type metadata for LegacyMagicPairingSettingsRecords.LegacyMagicPairingSettingsRecordsError);
    atomic_store(result, (unint64_t *)&qword_100211408);
  }
  return result;
}

unint64_t sub_1000E6660()
{
  unint64_t result;

  result = qword_100211418;
  if (!qword_100211418)
  {
    result = swift_getWitnessTable(&unk_1001875BC, &type metadata for LegacyMagicPairingSettingsRecords.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100211418);
  }
  return result;
}

uint64_t _s15audioaccessoryd33LegacyMagicPairingSettingsRecordsV38LegacyMagicPairingSettingsRecordsErrorOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1000E66F0 + 4 * byte_100187289[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1000E6724 + 4 * byte_100187284[v4]))();
}

uint64_t sub_1000E6724(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000E672C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000E6734);
  return result;
}

uint64_t sub_1000E6740(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000E6748);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1000E674C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000E6754(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for LegacyMagicPairingSettingsRecords.CodingKeys()
{
  return &type metadata for LegacyMagicPairingSettingsRecords.CodingKeys;
}

unint64_t sub_1000E6774()
{
  unint64_t result;

  result = qword_100211430;
  if (!qword_100211430)
  {
    result = swift_getWitnessTable(&unk_100187594, &type metadata for LegacyMagicPairingSettingsRecords.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100211430);
  }
  return result;
}

unint64_t sub_1000E67BC()
{
  unint64_t result;

  result = qword_100211438;
  if (!qword_100211438)
  {
    result = swift_getWitnessTable(&unk_100187504, &type metadata for LegacyMagicPairingSettingsRecords.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100211438);
  }
  return result;
}

unint64_t sub_1000E6804()
{
  unint64_t result;

  result = qword_100211440;
  if (!qword_100211440)
  {
    result = swift_getWitnessTable(&unk_10018752C, &type metadata for LegacyMagicPairingSettingsRecords.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100211440);
  }
  return result;
}

uint64_t sub_1000E6848(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  char v9;

  if (a1 == 0x696669746E656469 && a2 == 0xEA00000000007265)
  {
    v5 = 0xEA00000000007265;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x696669746E656469, 0xEA00000000007265, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0xD000000000000011)
  {
    v7 = 0x80000001001ADAA0;
    if (a2 == 0x80000001001ADAA0)
      goto LABEL_13;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x80000001001ADAA0, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
LABEL_13:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if (a1 == 0x74654D64756F6C63 && a2 == 0xED00006174616461)
  {
    v8 = 0xED00006174616461;
LABEL_19:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x74654D64756F6C63, 0xED00006174616461, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_19;
  }
  if (a1 == 0xD000000000000010 && a2 == 0x80000001001AAA20)
  {
    swift_bridgeObjectRelease(0x80000001001AAA20);
    return 3;
  }
  else
  {
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x80000001001AAA20, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v9 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_1000E6A24(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v3 = swift_retain(v2);
  v1(v3);
  return swift_release(v2);
}

uint64_t sub_1000E6A50(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_1000E6A70(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))();
}

uint64_t sub_1000E6A90@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char *v6;
  uint64_t result;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  void *v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  uint64_t v22;
  int64_t v23;
  void *v24;
  _QWORD v25[5];
  _BYTE v26[32];
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  _OWORD v32[2];
  _OWORD v33[2];
  uint64_t v34;
  char *v35;

  v22 = a1 + 64;
  v3 = 1 << *(_BYTE *)(a1 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(a1 + 64);
  v23 = (unint64_t)(v3 + 63) >> 6;
  v6 = (char *)&v29 + 8;
  result = swift_bridgeObjectRetain(a1);
  v8 = 0;
  v35 = (char *)&type metadata for Any + 8;
  while (1)
  {
    if (v5)
    {
      v9 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      v10 = v9 | (v8 << 6);
      goto LABEL_24;
    }
    v11 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v11 >= v23)
      goto LABEL_27;
    v12 = *(_QWORD *)(v22 + 8 * v11);
    ++v8;
    if (!v12)
    {
      v8 = v11 + 1;
      if (v11 + 1 >= v23)
        goto LABEL_27;
      v12 = *(_QWORD *)(v22 + 8 * v8);
      if (!v12)
      {
        v8 = v11 + 2;
        if (v11 + 2 >= v23)
          goto LABEL_27;
        v12 = *(_QWORD *)(v22 + 8 * v8);
        if (!v12)
        {
          v8 = v11 + 3;
          if (v11 + 3 >= v23)
            goto LABEL_27;
          v12 = *(_QWORD *)(v22 + 8 * v8);
          if (!v12)
            break;
        }
      }
    }
LABEL_23:
    v5 = (v12 - 1) & v12;
    v10 = __clz(__rbit64(v12)) + (v8 << 6);
LABEL_24:
    sub_1000AB400(*(_QWORD *)(a1 + 48) + 40 * v10, (uint64_t)v32);
    sub_100104A08(*(_QWORD *)(a1 + 56) + 32 * v10, (uint64_t)v33 + 8);
    v29 = v33[0];
    v30 = v33[1];
    v31 = v34;
    v27 = v32[0];
    v28 = v32[1];
    sub_1000AB400((uint64_t)&v27, (uint64_t)v25);
    sub_100104A08((uint64_t)v6, (uint64_t)v26);
    type metadata accessor for CKError(0);
    v15 = v14;
    if (swift_dynamicCast(&v24, v26, v35, v14, 6))
    {
      v16 = v6;
      v17 = v24;
      sub_1000AB43C((uint64_t)v25);
      v24 = v17;
      v18 = sub_1000A0940(&qword_100210590, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_100185228);
      _BridgedStoredNSError.code.getter(v25, v15, v18);

      v6 = v16;
      if (v25[0] == 26)
      {
        result = swift_release(a1);
        v19 = v30;
        *(_OWORD *)(a2 + 32) = v29;
        *(_OWORD *)(a2 + 48) = v19;
        *(_QWORD *)(a2 + 64) = v31;
        v20 = v28;
        *(_OWORD *)a2 = v27;
        *(_OWORD *)(a2 + 16) = v20;
        return result;
      }
    }
    else
    {
      sub_1000AB43C((uint64_t)v25);
    }
    result = sub_1000A1000((uint64_t)&v27, (uint64_t *)&unk_1002119C0);
  }
  v13 = v11 + 4;
  if (v13 >= v23)
  {
LABEL_27:
    result = swift_release(a1);
    *(_QWORD *)(a2 + 64) = 0;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    return result;
  }
  v12 = *(_QWORD *)(v22 + 8 * v13);
  if (v12)
  {
    v8 = v13;
    goto LABEL_23;
  }
  while (1)
  {
    v8 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v8 >= v23)
      goto LABEL_27;
    v12 = *(_QWORD *)(v22 + 8 * v8);
    ++v13;
    if (v12)
      goto LABEL_23;
  }
LABEL_29:
  __break(1u);
  return result;
}

_QWORD *sub_1000E6D80(void (*a1)(uint64_t *__return_ptr, _QWORD *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *result;
  uint64_t v6;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD v16[2];
  unint64_t v17;

  result = _swiftEmptyArrayStorage;
  v17 = (unint64_t)_swiftEmptyArrayStorage;
  v6 = *(_QWORD *)(a3 + 16);
  if (v6)
  {
    swift_bridgeObjectRetain(a3);
    v8 = (uint64_t *)(a3 + 40);
    do
    {
      v10 = *v8;
      v16[0] = *(v8 - 1);
      v16[1] = v10;
      swift_bridgeObjectRetain(v10);
      a1(&v15, v16);
      if (v3)
      {
        swift_bridgeObjectRelease(a3);
        swift_bridgeObjectRelease(v10);
        return (_QWORD *)swift_bridgeObjectRelease(v17);
      }
      v11 = swift_bridgeObjectRelease(v10);
      v12 = v15;
      if (v15)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v11);
        v14 = *(_QWORD *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10);
        v13 = *(_QWORD *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v14 >= v13 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v13 > 1, v14 + 1, 1);
        v9 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v14, v12);
        specialized Array._endMutation()(v9);
      }
      v8 += 2;
      --v6;
    }
    while (v6);
    swift_bridgeObjectRelease(a3);
    return (_QWORD *)v17;
  }
  return result;
}

void sub_1000E6EB8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  __int128 v26;
  int64_t v27;

  v21 = a1 + 64;
  v3 = 1 << *(_BYTE *)(a1 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(a1 + 64);
  v27 = (unint64_t)(v3 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  v6 = 0;
  v7 = _swiftEmptyArrayStorage;
  while (1)
  {
    if (v5)
    {
      v8 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      v9 = v8 | (v6 << 6);
      goto LABEL_17;
    }
    if (__OFADD__(v6++, 1))
    {
      __break(1u);
      goto LABEL_33;
    }
    if (v6 >= v27)
      goto LABEL_31;
    v11 = *(_QWORD *)(v21 + 8 * v6);
    if (!v11)
      break;
LABEL_16:
    v5 = (v11 - 1) & v11;
    v9 = __clz(__rbit64(v11)) + (v6 << 6);
LABEL_17:
    v13 = *(_QWORD *)(a1 + 56);
    v25 = *(id *)(*(_QWORD *)(a1 + 48) + 8 * v9);
    v26 = *(_OWORD *)(v13 + 16 * v9);
    v22 = *((_QWORD *)&v26 + 1);
    v14 = v25;
    swift_retain(v22);
    sub_1000FB304((uint64_t)&v25, &v23);
    if (v1)
    {
      swift_bridgeObjectRelease(v7);
      swift_release(a1);
      swift_release(v22);

      return;
    }
    swift_release(v22);

    v15 = v24;
    if (v24)
    {
      v16 = v23;
      if ((swift_isUniquelyReferenced_nonNull_native(v7) & 1) == 0)
        v7 = sub_100169644(0, v7[2] + 1, 1, v7);
      v18 = v7[2];
      v17 = v7[3];
      if (v18 >= v17 >> 1)
        v7 = sub_100169644((_QWORD *)(v17 > 1), v18 + 1, 1, v7);
      v7[2] = v18 + 1;
      v19 = &v7[2 * v18];
      v19[4] = v16;
      v19[5] = v15;
    }
  }
  v12 = v6 + 1;
  if (v6 + 1 >= v27)
    goto LABEL_31;
  v11 = *(_QWORD *)(v21 + 8 * v12);
  if (v11)
    goto LABEL_15;
  v12 = v6 + 2;
  if (v6 + 2 >= v27)
    goto LABEL_31;
  v11 = *(_QWORD *)(v21 + 8 * v12);
  if (v11)
    goto LABEL_15;
  v12 = v6 + 3;
  if (v6 + 3 >= v27)
    goto LABEL_31;
  v11 = *(_QWORD *)(v21 + 8 * v12);
  if (v11)
  {
LABEL_15:
    v6 = v12;
    goto LABEL_16;
  }
  v20 = v6 + 4;
  if (v6 + 4 >= v27)
  {
LABEL_31:
    swift_release(a1);
    return;
  }
  v11 = *(_QWORD *)(v21 + 8 * v20);
  v6 += 4;
  if (v11)
    goto LABEL_16;
  while (1)
  {
    v6 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v6 >= v27)
      goto LABEL_31;
    v11 = *(_QWORD *)(v21 + 8 * v6);
    ++v20;
    if (v11)
      goto LABEL_16;
  }
LABEL_33:
  __break(1u);
}

uint64_t sub_1000E713C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t result;
  int64_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t i;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  id v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  int64_t v23;

  v2 = 1 << *(_BYTE *)(a1 + 32);
  v3 = -1;
  if (v2 < 64)
    v3 = ~(-1 << v2);
  v4 = v3 & *(_QWORD *)(a1 + 64);
  v23 = (unint64_t)(v2 + 63) >> 6;
  result = swift_bridgeObjectRetain(a1);
  v6 = 0;
  v7 = _swiftEmptyArrayStorage;
  if (!v4)
    goto LABEL_5;
LABEL_4:
  v8 = __clz(__rbit64(v4));
  v4 &= v4 - 1;
  for (i = v8 | (v6 << 6); ; i = __clz(__rbit64(v11)) + (v6 << 6))
  {
    v13 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 16 * i + 8);
    v14 = *(id *)(*(_QWORD *)(a1 + 48) + 8 * i);
    swift_retain(v13);
    v15 = objc_msgSend(v14, "recordName");
    v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
    v18 = v17;
    swift_release(v13);

    result = swift_isUniquelyReferenced_nonNull_native(v7);
    if ((result & 1) == 0)
    {
      result = (uint64_t)sub_100169644(0, v7[2] + 1, 1, v7);
      v7 = (_QWORD *)result;
    }
    v20 = v7[2];
    v19 = v7[3];
    if (v20 >= v19 >> 1)
    {
      result = (uint64_t)sub_100169644((_QWORD *)(v19 > 1), v20 + 1, 1, v7);
      v7 = (_QWORD *)result;
    }
    v7[2] = v20 + 1;
    v21 = &v7[2 * v20];
    v21[4] = v16;
    v21[5] = v18;
    if (v4)
      goto LABEL_4;
LABEL_5:
    v10 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v10 >= v23)
      goto LABEL_27;
    v11 = *(_QWORD *)(v22 + 8 * v10);
    ++v6;
    if (!v11)
    {
      v6 = v10 + 1;
      if (v10 + 1 >= v23)
        goto LABEL_27;
      v11 = *(_QWORD *)(v22 + 8 * v6);
      if (!v11)
      {
        v6 = v10 + 2;
        if (v10 + 2 >= v23)
          goto LABEL_27;
        v11 = *(_QWORD *)(v22 + 8 * v6);
        if (!v11)
        {
          v6 = v10 + 3;
          if (v10 + 3 >= v23)
            goto LABEL_27;
          v11 = *(_QWORD *)(v22 + 8 * v6);
          if (!v11)
            break;
        }
      }
    }
LABEL_20:
    v4 = (v11 - 1) & v11;
  }
  v12 = v10 + 4;
  if (v12 >= v23)
  {
LABEL_27:
    swift_release(a1);
    return (uint64_t)v7;
  }
  v11 = *(_QWORD *)(v22 + 8 * v12);
  if (v11)
  {
    v6 = v12;
    goto LABEL_20;
  }
  while (1)
  {
    v6 = v12 + 1;
    if (__OFADD__(v12, 1))
      break;
    if (v6 >= v23)
      goto LABEL_27;
    v11 = *(_QWORD *)(v22 + 8 * v6);
    ++v12;
    if (v11)
      goto LABEL_20;
  }
LABEL_29:
  __break(1u);
  return result;
}

unint64_t sub_1000E7398(unint64_t a1)
{
  uint64_t v2;
  uint64_t inited;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  Swift::String v11;
  void *object;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE v32[80];
  _BYTE v33[80];
  _BYTE v34[80];
  _BYTE v35[80];
  _BYTE v36[80];
  _BYTE v37[80];
  uint64_t v38;
  uint64_t v39;
  _BYTE v40[8];
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  _BYTE v44[128];

  switch(a1)
  {
    case 0uLL:
      v2 = sub_1000A0980(&qword_100210D28);
      inited = swift_initStackObject(v2, v32);
      *(_OWORD *)(inited + 16) = xmmword_100184870;
      *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedFailureReasonErrorKey);
      *(_QWORD *)(inited + 40) = v4;
      *(_QWORD *)(inited + 72) = &type metadata for String;
      v5 = 0x206E776F6E6B6E55;
      v6 = 0xED0000726F727245;
      goto LABEL_10;
    case 1uLL:
      v20 = sub_1000A0980(&qword_100210D28);
      inited = swift_initStackObject(v20, v33);
      *(_OWORD *)(inited + 16) = xmmword_100184870;
      *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedFailureReasonErrorKey);
      *(_QWORD *)(inited + 40) = v21;
      *(_QWORD *)(inited + 72) = &type metadata for String;
      v5 = 0xD000000000000014;
      v22 = "No Account Available";
      goto LABEL_9;
    case 2uLL:
      v23 = sub_1000A0980(&qword_100210D28);
      inited = swift_initStackObject(v23, v34);
      *(_OWORD *)(inited + 16) = xmmword_100184870;
      *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedFailureReasonErrorKey);
      *(_QWORD *)(inited + 40) = v24;
      *(_QWORD *)(inited + 72) = &type metadata for String;
      v5 = 0xD000000000000015;
      v22 = "Manatee not available";
      goto LABEL_9;
    case 3uLL:
      v25 = sub_1000A0980(&qword_100210D28);
      inited = swift_initStackObject(v25, v36);
      *(_OWORD *)(inited + 16) = xmmword_100184870;
      *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedFailureReasonErrorKey);
      *(_QWORD *)(inited + 40) = v26;
      *(_QWORD *)(inited + 72) = &type metadata for String;
      v5 = 0xD000000000000016;
      v22 = "Retry Attempts Expired";
      goto LABEL_9;
    case 4uLL:
      v27 = sub_1000A0980(&qword_100210D28);
      inited = swift_initStackObject(v27, v35);
      *(_OWORD *)(inited + 16) = xmmword_100184870;
      *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedFailureReasonErrorKey);
      *(_QWORD *)(inited + 40) = v28;
      *(_QWORD *)(inited + 72) = &type metadata for String;
      v5 = 0xD000000000000018;
      v22 = "No CloudKit Zone Defined";
      goto LABEL_9;
    case 5uLL:
      v29 = sub_1000A0980(&qword_100210D28);
      inited = swift_initStackObject(v29, v37);
      *(_OWORD *)(inited + 16) = xmmword_100184870;
      *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedFailureReasonErrorKey);
      *(_QWORD *)(inited + 40) = v30;
      *(_QWORD *)(inited + 72) = &type metadata for String;
      v5 = 0xD000000000000013;
      v22 = "Operation cancelled";
LABEL_9:
      v6 = (unint64_t)(v22 - 32) | 0x8000000000000000;
LABEL_10:
      *(_QWORD *)(inited + 48) = v5;
      *(_QWORD *)(inited + 56) = v6;
      v19 = sub_1000A5288(inited);
      break;
    default:
      v7 = sub_1000A0980(&qword_100210D28);
      v8 = swift_initStackObject(v7, v44);
      *(_OWORD *)(v8 + 16) = xmmword_1001858F0;
      *(_QWORD *)(v8 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedFailureReasonErrorKey);
      *(_QWORD *)(v8 + 40) = v9;
      swift_errorRetain(a1);
      _StringGuts.grow(_:)(27);
      swift_bridgeObjectRelease(0xE000000000000000);
      v42 = 0xD000000000000019;
      v43 = 0x80000001001B06E0;
      v41 = a1;
      swift_errorRetain(a1);
      v10 = sub_1000A0980(&qword_100210710);
      v11._countAndFlagsBits = String.init<A>(describing:)(&v41, v10);
      object = v11._object;
      String.append(_:)(v11);
      swift_bridgeObjectRelease(object);
      v13 = v42;
      v14 = v43;
      *(_QWORD *)(v8 + 72) = &type metadata for String;
      *(_QWORD *)(v8 + 48) = v13;
      *(_QWORD *)(v8 + 56) = v14;
      *(_QWORD *)(v8 + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSUnderlyingErrorKey);
      *(_QWORD *)(v8 + 88) = v15;
      swift_getErrorValue(a1, v40, &v38);
      v16 = v38;
      v17 = v39;
      *(_QWORD *)(v8 + 120) = v39;
      v18 = sub_100105C88((_QWORD *)(v8 + 96));
      (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v18, v16, v17);
      v19 = sub_1000A5288(v8);
      sub_100105CC4(a1);
      break;
  }
  return v19;
}

unint64_t sub_1000E775C()
{
  unint64_t *v0;

  return sub_1000E7398(*v0);
}

uint64_t sub_1000E7764(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100105C44();
  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_1000E778C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100105C44();
  return Error<>._code.getter(a1, v2);
}

uint64_t sub_1000E780C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  Swift::String v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  void *v8;
  Swift::String v9;
  Swift::String v10;
  Swift::String v11;
  uint64_t *v12;
  uint64_t v13;
  void *v14;
  Swift::String v15;
  Swift::String v16;
  uint64_t v17;
  uint64_t v18;
  Swift::String v19;
  void *object;
  void *v21;
  Swift::String v23;
  uint64_t v24;
  unint64_t v25;

  v1 = type metadata accessor for CloudCoordinatorConfiguration(0);
  __chkstk_darwin(v1);
  v3 = (char *)&v23 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = 0;
  v25 = 0xE000000000000000;
  _StringGuts.grow(_:)(53);
  v4._countAndFlagsBits = 0xD000000000000020;
  v4._object = (void *)0x80000001001B0690;
  String.append(_:)(v4);
  v5 = v0 + OBJC_IVAR____TtC15audioaccessoryd16CloudCoordinator_configuration;
  v6 = (uint64_t *)(v0 + OBJC_IVAR____TtC15audioaccessoryd16CloudCoordinator_configuration + *(int *)(v1 + 24));
  v7 = *v6;
  v8 = (void *)v6[1];
  swift_bridgeObjectRetain(v8);
  v9._countAndFlagsBits = v7;
  v9._object = v8;
  String.append(_:)(v9);
  swift_bridgeObjectRelease(v8);
  v10._object = (void *)0x80000001001B06C0;
  v10._countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v10);
  sub_1000D995C(v5, (uint64_t)v3);
  v23._countAndFlagsBits = 0;
  v23._object = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(67);
  v11._countAndFlagsBits = 0xD000000000000034;
  v11._object = (void *)0x80000001001AD210;
  String.append(_:)(v11);
  v12 = (uint64_t *)&v3[*(int *)(v1 + 24)];
  v13 = *v12;
  v14 = (void *)v12[1];
  swift_bridgeObjectRetain(v14);
  v15._countAndFlagsBits = v13;
  v15._object = v14;
  String.append(_:)(v15);
  swift_bridgeObjectRelease(v14);
  v16._countAndFlagsBits = 0x4449656E6F7A202CLL;
  v16._object = (void *)0xEB00000000203A73;
  String.append(_:)(v16);
  v17 = *(_QWORD *)&v3[*(int *)(v1 + 32)];
  v18 = swift_bridgeObjectRetain(v17);
  v19._countAndFlagsBits = Array.description.getter(v18, &type metadata for String);
  object = v19._object;
  String.append(_:)(v19);
  swift_bridgeObjectRelease(v17);
  swift_bridgeObjectRelease(object);
  v21 = v23._object;
  String.append(_:)(v23);
  swift_bridgeObjectRelease(v21);
  sub_1000D99A0((uint64_t)v3);
  return v24;
}

void *sub_1000E7A74(__n128 a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  Swift::String v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  id v23;
  uint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;

  v2 = v1;
  v3 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0, a1);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(void **)(v1 + 16);
  v14 = v13;
  if (v13 == (void *)1)
  {
    v28 = sub_1000AB31C(0, (unint64_t *)&qword_1002119F0, OS_dispatch_queue_ptr);
    v15 = v2 + OBJC_IVAR____TtC15audioaccessoryd16CloudCoordinator_configuration;
    v16 = *(Swift::String *)(v15 + *(int *)(type metadata accessor for CloudCoordinatorConfiguration(0) + 24));
    v29 = (_QWORD *)0xD000000000000028;
    v30 = 0x80000001001B0660;
    String.append(_:)(v16);
    v26 = v30;
    v27 = v29;
    static DispatchQoS.unspecified.getter(v17);
    v29 = _swiftEmptyArrayStorage;
    v18 = sub_1000A0940((unint64_t *)&unk_1002123A0, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
    v25 = v3;
    v19 = v18;
    v20 = sub_1000A0980((uint64_t *)&unk_100211A00);
    v21 = sub_1000AAD14((unint64_t *)&qword_1002123B0, (uint64_t *)&unk_100211A00, (uint64_t)&protocol conformance descriptor for [A]);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v29, v20, v21, v7, v19);
    (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v6, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v25);
    v14 = (void *)OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(v27, v26, v12, v9, v6, 0);
    v22 = *(void **)(v2 + 16);
    *(_QWORD *)(v2 + 16) = v14;
    v23 = v14;
    sub_10010587C(v22);
  }
  sub_10010588C(v13);
  return v14;
}

uint64_t sub_1000E7CE0@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *(_BYTE *)(result + 105);
  return result;
}

uint64_t sub_1000E7CEC@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *(_BYTE *)(result + 104);
  return result;
}

id sub_1000E7CF8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSString v15;
  id v16;
  void *v17;
  id v18;

  v2 = OBJC_IVAR____TtC15audioaccessoryd16CloudCoordinator____lazy_storage___container;
  v3 = *(void **)(v1 + OBJC_IVAR____TtC15audioaccessoryd16CloudCoordinator____lazy_storage___container);
  if (v3)
  {
    v4 = *(id *)(v1 + OBJC_IVAR____TtC15audioaccessoryd16CloudCoordinator____lazy_storage___container);
  }
  else
  {
    v5 = static os_log_type_t.default.getter(a1);
    if (qword_1002101D0 != -1)
      swift_once(&qword_1002101D0, sub_1001686F0);
    v6 = qword_100218DD8;
    v7 = sub_1000A0980((uint64_t *)&unk_1002103C0);
    v8 = swift_allocObject(v7, 72, 7);
    *(_OWORD *)(v8 + 16) = xmmword_100184870;
    v9 = v1 + OBJC_IVAR____TtC15audioaccessoryd16CloudCoordinator_configuration;
    v10 = type metadata accessor for CloudCoordinatorConfiguration(0);
    v11 = (uint64_t *)(v9 + *(int *)(v10 + 24));
    v13 = *v11;
    v12 = v11[1];
    *(_QWORD *)(v8 + 56) = &type metadata for String;
    *(_QWORD *)(v8 + 64) = sub_1000A0DF4();
    *(_QWORD *)(v8 + 32) = v13;
    *(_QWORD *)(v8 + 40) = v12;
    swift_bridgeObjectRetain(v12);
    os_log(_:dso:log:_:_:)(v5, &_mh_execute_header, v6, "CloudSync: Create CloudKit container named: %@", 46, 2, v8);
    swift_bridgeObjectRelease(v8);
    v14 = *(_QWORD *)(v9 + *(int *)(v10 + 24) + 8);
    swift_bridgeObjectRetain(v14);
    v15 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v14);
    v16 = objc_msgSend((id)objc_opt_self(CKContainer), "containerWithIdentifier:", v15);

    v17 = *(void **)(v1 + v2);
    *(_QWORD *)(v1 + v2) = v16;
    v4 = v16;

    v3 = 0;
  }
  v18 = v3;
  return v4;
}

uint64_t sub_1000E7E94()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC15audioaccessoryd16CloudCoordinator____lazy_storage___privateSubscriptionId);
  v2 = *(_QWORD *)(v0 + OBJC_IVAR____TtC15audioaccessoryd16CloudCoordinator____lazy_storage___privateSubscriptionId + 8);
  if (v2)
  {
    v3 = *v1;
  }
  else
  {
    *(_OWORD *)v1 = xmmword_100187610;
    swift_bridgeObjectRelease(0);
    v2 = 0;
    v3 = 0x2D65746176697270;
  }
  swift_bridgeObjectRetain(v2);
  return v3;
}

id sub_1000E7F0C()
{
  return sub_1000E7FCC(&OBJC_IVAR____TtC15audioaccessoryd16CloudCoordinator____lazy_storage___cloudPushTriggeredGroup);
}

id sub_1000E7F38()
{
  return sub_1000E7FCC(&OBJC_IVAR____TtC15audioaccessoryd16CloudCoordinator____lazy_storage___forcedGroup);
}

id sub_1000E7F54()
{
  return sub_1000E7FCC(&OBJC_IVAR____TtC15audioaccessoryd16CloudCoordinator____lazy_storage___cloudInitialSetupGroup);
}

id sub_1000E7F7C()
{
  return sub_1000E7FCC(&OBJC_IVAR____TtC15audioaccessoryd16CloudCoordinator____lazy_storage___cloudUserActionExplicitGroup);
}

id sub_1000E7FA0()
{
  return sub_1000E7FCC(&OBJC_IVAR____TtC15audioaccessoryd16CloudCoordinator____lazy_storage___deferredUpdatesGroup);
}

id sub_1000E7FCC(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  id v4;
  id v5;
  NSString v6;
  void *v7;
  id v8;

  v2 = *a1;
  v3 = *(void **)(v1 + *a1);
  if (v3)
  {
    v4 = *(id *)(v1 + *a1);
  }
  else
  {
    v5 = objc_msgSend(objc_allocWithZone((Class)CKOperationGroup), "init");
    v6 = String._bridgeToObjectiveC()();
    objc_msgSend(v5, "setName:", v6);

    v7 = *(void **)(v1 + v2);
    *(_QWORD *)(v1 + v2) = v5;
    v4 = v5;

    v3 = 0;
  }
  v8 = v3;
  return v4;
}

uint64_t sub_1000E8074@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *(_BYTE *)(result + OBJC_IVAR____TtC15audioaccessoryd16CloudCoordinator__available);
  return result;
}

uint64_t sub_1000E8088()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t result;
  _QWORD v10[5];
  uint64_t v11;

  if (qword_1002101B8 != -1)
    swift_once(&qword_1002101B8, sub_10010A024);
  v1 = qword_100218DB8;
  v2 = *(void **)(qword_100218DB8 + OBJC_IVAR____TtC15audioaccessoryd16CloudPushService_pushServiceQueue);
  v3 = swift_allocObject(&unk_1001EA990, 24, 7);
  swift_unknownObjectWeakInit(v3 + 16, v1);
  v4 = swift_allocObject(&unk_1001EAA80, 32, 7);
  *(_QWORD *)(v4 + 16) = v0;
  *(_QWORD *)(v4 + 24) = v3;
  v5 = swift_allocObject(&unk_1001EAAA8, 32, 7);
  *(_QWORD *)(v5 + 16) = sub_1001058D8;
  *(_QWORD *)(v5 + 24) = v4;
  v10[4] = sub_100105CD8;
  v11 = v5;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 1107296256;
  v10[2] = sub_1000E6A70;
  v10[3] = &unk_1001EAAC0;
  v6 = _Block_copy(v10);
  v7 = v11;
  v8 = v2;
  swift_retain(v0);
  swift_retain(v5);
  swift_release(v7);
  dispatch_sync(v8, v6);

  _Block_release(v6);
  LOBYTE(v6) = swift_isEscapingClosureAtFileLocation(v5, "", 123, 105, 31, 1);
  swift_release(v4);
  result = swift_release(v5);
  if ((v6 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    sub_10010587C(*(id *)(v0 + 16));
    sub_1000C7298(v0 + 24);

    swift_release(*(_QWORD *)(v0 + 48));
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 112));
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 120));
    sub_1000D99A0(v0 + OBJC_IVAR____TtC15audioaccessoryd16CloudCoordinator_configuration);

    swift_bridgeObjectRelease(*(_QWORD *)(v0
                                        + OBJC_IVAR____TtC15audioaccessoryd16CloudCoordinator____lazy_storage___privateSubscriptionId
                                        + 8));
    objc_release(*(id *)(v0
                       + OBJC_IVAR____TtC15audioaccessoryd16CloudCoordinator____lazy_storage___cloudPushTriggeredGroup));

    objc_release(*(id *)(v0
                       + OBJC_IVAR____TtC15audioaccessoryd16CloudCoordinator____lazy_storage___cloudInitialSetupGroup));
    objc_release(*(id *)(v0
                       + OBJC_IVAR____TtC15audioaccessoryd16CloudCoordinator____lazy_storage___cloudUserActionExplicitGroup));

    swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC15audioaccessoryd16CloudCoordinator_identityUpdateNotificationListener));
    return v0;
  }
  return result;
}

uint64_t sub_1000E8314()
{
  uint64_t v0;

  sub_1000E8088();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_1000E8338()
{
  return type metadata accessor for CloudCoordinator(0);
}

uint64_t type metadata accessor for CloudCoordinator(uint64_t a1)
{
  uint64_t result;

  result = qword_1002114C0;
  if (!qword_1002114C0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for CloudCoordinator);
  return result;
}

uint64_t sub_1000E837C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Swift::String v10;
  uint64_t *v11;
  uint64_t v12;
  void *v13;
  Swift::String v14;
  Swift::String v15;
  uint64_t v16;
  Swift::String v17;
  void *object;
  void **v19;
  unint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  NSObject *v28;
  uint64_t result;
  NSObject *v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  void **aBlock;
  unint64_t v35;
  uint64_t (*v36)(uint64_t);
  void *v37;
  uint64_t (*v38)();
  uint64_t v39;

  v1 = v0;
  v2 = type metadata accessor for CloudCoordinatorConfiguration(0);
  __chkstk_darwin(v2);
  v4 = (char *)&aBlock - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = static os_log_type_t.default.getter(v5);
  if (qword_1002101D0 != -1)
    swift_once(&qword_1002101D0, sub_1001686F0);
  v7 = qword_100218DD8;
  v8 = sub_1000A0980((uint64_t *)&unk_1002103C0);
  v9 = swift_allocObject(v8, 72, 7);
  *(_OWORD *)(v9 + 16) = xmmword_100184870;
  sub_1000D995C(v0 + OBJC_IVAR____TtC15audioaccessoryd16CloudCoordinator_configuration, (uint64_t)v4);
  aBlock = 0;
  v35 = 0xE000000000000000;
  _StringGuts.grow(_:)(67);
  v10._object = (void *)0x80000001001AD210;
  v10._countAndFlagsBits = 0xD000000000000034;
  String.append(_:)(v10);
  v11 = (uint64_t *)&v4[*(int *)(v2 + 24)];
  v12 = *v11;
  v13 = (void *)v11[1];
  swift_bridgeObjectRetain(v13);
  v14._countAndFlagsBits = v12;
  v14._object = v13;
  String.append(_:)(v14);
  swift_bridgeObjectRelease(v13);
  v15._countAndFlagsBits = 0x4449656E6F7A202CLL;
  v15._object = (void *)0xEB00000000203A73;
  String.append(_:)(v15);
  v16 = *(_QWORD *)&v4[*(int *)(v2 + 32)];
  swift_bridgeObjectRetain(v16);
  v17._countAndFlagsBits = Array.description.getter(v16, &type metadata for String);
  object = v17._object;
  String.append(_:)(v17);
  swift_bridgeObjectRelease(v16);
  swift_bridgeObjectRelease(object);
  v19 = aBlock;
  v20 = v35;
  sub_1000D99A0((uint64_t)v4);
  *(_QWORD *)(v9 + 56) = &type metadata for String;
  *(_QWORD *)(v9 + 64) = sub_1000A0DF4();
  *(_QWORD *)(v9 + 32) = v19;
  *(_QWORD *)(v9 + 40) = v20;
  os_log(_:dso:log:_:_:)(v6, &_mh_execute_header, v7, "Start APS & Cloud Coordinator with identifier: %@", 49, 2, v9);
  swift_bridgeObjectRelease(v9);
  if (qword_1002101B8 != -1)
    swift_once(&qword_1002101B8, sub_10010A024);
  v21 = qword_100218DB8;
  v22 = *(void **)(qword_100218DB8 + OBJC_IVAR____TtC15audioaccessoryd16CloudPushService_pushServiceQueue);
  v23 = swift_allocObject(&unk_1001EA990, 24, 7);
  swift_unknownObjectWeakInit(v23 + 16, v21);
  v24 = swift_allocObject(&unk_1001EA9B8, 32, 7);
  *(_QWORD *)(v24 + 16) = v1;
  *(_QWORD *)(v24 + 24) = v23;
  v25 = swift_allocObject(&unk_1001EA9E0, 32, 7);
  *(_QWORD *)(v25 + 16) = sub_10010584C;
  *(_QWORD *)(v25 + 24) = v24;
  v38 = sub_100105CD8;
  v39 = v25;
  aBlock = _NSConcreteStackBlock;
  v35 = 1107296256;
  v36 = sub_1000E6A70;
  v37 = &unk_1001EA9F8;
  v26 = _Block_copy(&aBlock);
  v27 = v39;
  v28 = v22;
  swift_retain(v1);
  swift_retain(v25);
  swift_release(v27);
  dispatch_sync(v28, v26);

  _Block_release(v26);
  LOBYTE(v26) = swift_isEscapingClosureAtFileLocation(v25, "", 123, 94, 31, 1);
  swift_release(v24);
  result = swift_release(v25);
  if ((v26 & 1) != 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  sub_1000F1FC4();
  v30 = *(NSObject **)(v1 + 72);
  v31 = swift_allocObject(&unk_1001EAA30, 32, 7);
  *(_QWORD *)(v31 + 16) = sub_100105864;
  *(_QWORD *)(v31 + 24) = v1;
  v38 = sub_100105CD8;
  v39 = v31;
  aBlock = _NSConcreteStackBlock;
  v35 = 1107296256;
  v36 = sub_1000E6A70;
  v37 = &unk_1001EAA48;
  v32 = _Block_copy(&aBlock);
  v33 = v39;
  swift_retain(v1);
  swift_retain(v31);
  swift_release(v33);
  dispatch_sync(v30, v32);
  _Block_release(v32);
  LOBYTE(v30) = swift_isEscapingClosureAtFileLocation(v31, "", 123, 194, 26, 1);
  swift_release(v1);
  result = swift_release(v31);
  if ((v30 & 1) != 0)
LABEL_9:
    __break(1u);
  return result;
}

uint64_t sub_1000E87A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  Swift::Int v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD aBlock[5];
  uint64_t v26;

  v1 = v0;
  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v23 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v4 = (char *)&v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for DispatchQoS(0);
  v5 = *(_QWORD *)(v22 - 8);
  __chkstk_darwin(v22);
  v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = static os_log_type_t.default.getter(v8);
  if (qword_1002101D0 != -1)
    swift_once(&qword_1002101D0, sub_1001686F0);
  os_log(_:dso:log:_:_:)(v9, &_mh_execute_header, qword_100218DD8, "CloudSync: Initial fetch complete", 33, 2);
  aBlock[4] = sub_100105814;
  v26 = v1;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000E6A24;
  aBlock[3] = &unk_1001EA958;
  v10 = _Block_copy(aBlock);
  v11 = swift_retain(v1);
  static DispatchQoS.unspecified.getter(v11);
  v24 = _swiftEmptyArrayStorage;
  v12 = sub_1000A0940((unint64_t *)&qword_100211920, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v13 = sub_1000A0980(&qword_100211D00);
  v14 = sub_1000AAD14((unint64_t *)&qword_100211930, &qword_100211D00, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v24, v13, v14, v2, v12);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v7, v4, v10);
  _Block_release(v10);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v4, v2);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v22);
  v15 = swift_release(v26);
  v16 = static os_log_type_t.default.getter(v15);
  v17 = qword_100218DD8;
  os_log(_:dso:log:_:_:)(v16, &_mh_execute_header, qword_100218DD8, "Signaling availableSemaphore", 28, 2, _swiftEmptyArrayStorage);
  v18 = OS_dispatch_semaphore.signal()();
  v19 = static os_log_type_t.default.getter(v18);
  return os_log(_:dso:log:_:_:)(v19, &_mh_execute_header, v17, "Signaled availableSemaphore", 27, 2, _swiftEmptyArrayStorage);
}

uint64_t sub_1000E8A38(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;

  v2 = static os_log_type_t.default.getter(a1);
  if (qword_1002101D0 != -1)
    swift_once(&qword_1002101D0, sub_1001686F0);
  result = os_log(_:dso:log:_:_:)(v2, &_mh_execute_header, qword_100218DD8, "available set to true", 21, 2, _swiftEmptyArrayStorage);
  *(_BYTE *)(a1 + OBJC_IVAR____TtC15audioaccessoryd16CloudCoordinator__available) = 1;
  return result;
}

void sub_1000E8AC4(int a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  void *v14;
  id v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  _QWORD *v25;
  void *v26;
  _QWORD *v27;
  _BYTE v28[4];
  int v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  void **aBlock;
  uint64_t v34;
  void *v35;
  void *v36;
  uint64_t (*v37)();
  _QWORD *v38;

  v2 = v1;
  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v31 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = &v28[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v30 = type metadata accessor for DispatchQoS(0);
  v7 = *(_QWORD *)(v30 - 8);
  __chkstk_darwin(v30);
  v9 = &v28[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = type metadata accessor for DispatchPredicate(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = &v28[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v14 = *(void **)(v2 + 72);
  *v13 = v14;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v11 + 104))(v13, enum case for DispatchPredicate.onQueue(_:), v10);
  v15 = v14;
  LOBYTE(v14) = _dispatchPreconditionTest(_:)(v13);
  v16 = (*(uint64_t (**)(_QWORD *, uint64_t))(v11 + 8))(v13, v10);
  if ((v14 & 1) == 0)
  {
    __break(1u);
    goto LABEL_5;
  }
  v29 = a1;
  v10 = static os_log_type_t.default.getter(v16);
  if (qword_1002101D0 != -1)
LABEL_5:
    swift_once(&qword_1002101D0, sub_1001686F0);
  os_log(_:dso:log:_:_:)(v10, &_mh_execute_header, qword_100218DD8, "Resetting CloudKitCoordinator available flags", 45, 2, _swiftEmptyArrayStorage);
  *(_QWORD *)(v2 + 96) = 3;
  *(_BYTE *)(v2 + 104) = 0;
  *(_BYTE *)(v2 + OBJC_IVAR____TtC15audioaccessoryd16CloudCoordinator__available) = 0;
  v37 = sub_1001057DC;
  v38 = (_QWORD *)v2;
  aBlock = _NSConcreteStackBlock;
  v34 = 1107296256;
  v35 = sub_1000E6A24;
  v36 = &unk_1001EA8B8;
  v17 = _Block_copy(&aBlock);
  v18 = swift_retain(v2);
  static DispatchQoS.unspecified.getter(v18);
  v32 = _swiftEmptyArrayStorage;
  v19 = sub_1000A0940((unint64_t *)&qword_100211920, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v20 = sub_1000A0980(&qword_100211D00);
  v21 = sub_1000AAD14((unint64_t *)&qword_100211930, &qword_100211D00, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v32, v20, v21, v4, v19);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v9, v6, v17);
  _Block_release(v17);
  (*(void (**)(_BYTE *, uint64_t))(v31 + 8))(v6, v4);
  (*(void (**)(_BYTE *, uint64_t))(v7 + 8))(v9, v30);
  swift_release(v38);
  v22 = swift_allocObject(&unk_1001EA8F0, 25, 7);
  *(_QWORD *)(v22 + 16) = v2;
  *(_BYTE *)(v22 + 24) = v29 & 1;
  v23 = swift_retain(v2);
  v24 = sub_1000E7CF8(v23);
  v25 = (_QWORD *)swift_allocObject(&unk_1001EA918, 40, 7);
  v25[2] = v2;
  v25[3] = sub_100105F14;
  v25[4] = v22;
  v37 = sub_100105F0C;
  v38 = v25;
  aBlock = _NSConcreteStackBlock;
  v34 = 1107296256;
  v35 = sub_1000F4794;
  v36 = &unk_1001EA930;
  v26 = _Block_copy(&aBlock);
  v27 = v38;
  swift_retain(v2);
  swift_retain(v22);
  swift_release(v27);
  objc_msgSend(v24, "accountStatusWithCompletionHandler:", v26);
  _Block_release(v26);
  swift_release(v22);

}

uint64_t sub_1000E8E80(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = static os_log_type_t.default.getter(a1);
  if (qword_1002101D0 != -1)
    swift_once(&qword_1002101D0, sub_1001686F0);
  v2 = qword_100218DD8;
  os_log(_:dso:log:_:_:)(v1, &_mh_execute_header, qword_100218DD8, "Waiting for CloudKit to become available", 40, 2, _swiftEmptyArrayStorage);
  OS_dispatch_semaphore.wait()();
  v4 = static os_log_type_t.default.getter(v3);
  return os_log(_:dso:log:_:_:)(v4, &_mh_execute_header, v2, "Done waiting for CloudKit to become available", 45, 2, _swiftEmptyArrayStorage);
}

void sub_1000E8F40(double a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t);
  uint64_t v22;
  id v23;
  NSString v24;
  Class isa;
  void *v26;
  id v27;
  uint64_t v28;
  void *v29;
  void **aBlock;
  uint64_t v31;
  void (*v32)(uint64_t, void *);
  void *v33;
  uint64_t (*v34)(void *);
  uint64_t v35;

  v2 = v1;
  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = ((uint64_t (*)(uint64_t))__chkstk_darwin)(v4);
  v8 = (char *)&aBlock - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&aBlock - v9;
  v12 = sub_100100B18(v11, 0.0, 120.0);
  v14 = v13;
  v15 = static os_log_type_t.default.getter(v12);
  if (qword_1002101D0 != -1)
    swift_once(&qword_1002101D0, sub_1001686F0);
  v16 = qword_100218DD8;
  v17 = sub_1000A0980((uint64_t *)&unk_1002103C0);
  v18 = swift_allocObject(v17, 112, 7);
  *(_OWORD *)(v18 + 16) = xmmword_1001858F0;
  *(_QWORD *)(v18 + 56) = &type metadata for Double;
  *(_QWORD *)(v18 + 64) = &protocol witness table for Double;
  *(double *)(v18 + 32) = a1;
  *(_QWORD *)(v18 + 96) = &type metadata for Double;
  *(_QWORD *)(v18 + 104) = &protocol witness table for Double;
  *(double *)(v18 + 72) = v14;
  os_log(_:dso:log:_:_:)(v15, &_mh_execute_header, v16, "checkinRetryFetch %f with random delay: %f", *(double *)&aBlock, *(double *)&v31);
  v19 = swift_bridgeObjectRelease(v18);
  v20 = Date.init()(v19);
  Date.addingTimeInterval(_:)(v20, v14 + a1);
  v21 = *(void (**)(char *, uint64_t))(v5 + 8);
  v21(v8, v4);
  v22 = swift_allocObject(&unk_1001E9568, 24, 7);
  swift_weakInit(v22 + 16, v2);
  v23 = objc_allocWithZone((Class)BTXPCTimer);
  swift_retain(v22);
  v24 = String._bridgeToObjectiveC()();
  isa = Date._bridgeToObjectiveC()().super.isa;
  v34 = sub_1001057CC;
  v35 = v22;
  aBlock = _NSConcreteStackBlock;
  v31 = 1107296256;
  v32 = sub_1000ED490;
  v33 = &unk_1001EA868;
  v26 = _Block_copy(&aBlock);
  v27 = objc_msgSend(v23, "initWithName:date:gracePeriod:priority:options:block:", v24, isa, 1, 705, v26, 1.0);
  _Block_release(v26);

  v21(v10, v4);
  v28 = v35;
  swift_release(v22);
  swift_release(v28);
  v29 = *(void **)(v2 + 40);
  *(_QWORD *)(v2 + 40) = v27;

}

uint64_t sub_1000E91E0(void *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD aBlock[5];
  uint64_t v36;
  char v37[24];

  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v32 = *(_QWORD *)(v4 - 8);
  v33 = v4;
  __chkstk_darwin(v4);
  v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v30 = *(_QWORD *)(v7 - 8);
  v31 = v7;
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = a2 + 16;
  v12 = static os_log_type_t.default.getter(v8);
  if (qword_1002101D0 != -1)
    swift_once(&qword_1002101D0, sub_1001686F0);
  v13 = qword_100218DD8;
  v14 = sub_1000A0980((uint64_t *)&unk_1002103C0);
  v15 = swift_allocObject(v14, 72, 7);
  *(_OWORD *)(v15 + 16) = xmmword_100184870;
  v16 = a1;
  v17 = objc_msgSend(v16, "description");
  v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
  v20 = v19;

  *(_QWORD *)(v15 + 56) = &type metadata for String;
  *(_QWORD *)(v15 + 64) = sub_1000A0DF4();
  *(_QWORD *)(v15 + 32) = v18;
  *(_QWORD *)(v15 + 40) = v20;
  os_log(_:dso:log:_:_:)(v12, &_mh_execute_header, v13, "scheduleRetryFetch timer fired: %@", 34, 2, v15);
  swift_bridgeObjectRelease(v15);
  swift_beginAccess(v11, v37, 0, 0);
  result = swift_weakLoadStrong(v11);
  if (result)
  {
    v22 = result;
    aBlock[4] = sub_1001057D4;
    v36 = result;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1000E6A24;
    aBlock[3] = &unk_1001EA890;
    v23 = _Block_copy(aBlock);
    v24 = swift_retain(v22);
    static DispatchQoS.unspecified.getter(v24);
    v34 = _swiftEmptyArrayStorage;
    v25 = sub_1000A0940((unint64_t *)&qword_100211920, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v26 = sub_1000A0980(&qword_100211D00);
    v27 = sub_1000AAD14((unint64_t *)&qword_100211930, &qword_100211D00, (uint64_t)&protocol conformance descriptor for [A]);
    v28 = v26;
    v29 = v33;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v34, v28, v27, v33, v25);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v10, v6, v23);
    _Block_release(v23);
    (*(void (**)(char *, uint64_t))(v32 + 8))(v6, v29);
    (*(void (**)(char *, uint64_t))(v30 + 8))(v10, v31);
    swift_release(v22);
    return swift_release(v36);
  }
  return result;
}

void sub_1000E94C4(uint64_t a1)
{
  void *v2;

  objc_msgSend(*(id *)(a1 + 40), "invalidate");
  v2 = *(void **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;

  sub_1000E8AC4(1);
}

uint64_t sub_1000E9504(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  _QWORD *v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  unsigned int v42;
  _BYTE v43[24];
  _BYTE v44[24];

  v2 = v1;
  v4 = type metadata accessor for DispatchPredicate(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (_QWORD *)((char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = *(void **)(v2 + 72);
  *v8 = v9;
  (*(void (**)(_QWORD *, _QWORD, uint64_t, __n128))(v5 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v4, v6);
  v10 = v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)(v8);
  v11 = (*(uint64_t (**)(_QWORD *, uint64_t))(v5 + 8))(v8, v4);
  if ((v9 & 1) == 0)
  {
    __break(1u);
    goto LABEL_15;
  }
  if ((*(_BYTE *)(v2 + 128) & 1) != 0)
  {
    v4 = static os_log_type_t.default.getter(v11);
    if (qword_1002101D0 == -1)
      return os_log(_:dso:log:_:_:)(v4, &_mh_execute_header, qword_100218DD8, "scheduleCloudUpdate: update in progress, new update will be scheduled for pending updates, after current operation completes", 124, 2, _swiftEmptyArrayStorage);
LABEL_15:
    swift_once(&qword_1002101D0, sub_1001686F0);
    return os_log(_:dso:log:_:_:)(v4, &_mh_execute_header, qword_100218DD8, "scheduleCloudUpdate: update in progress, new update will be scheduled for pending updates, after current operation completes", 124, 2, _swiftEmptyArrayStorage);
  }
  v13 = *(_QWORD *)(v2 + 48);
  if (!v13)
    return sub_1000E9958(a1 & 1, 0);
  v14 = *(_QWORD *)(v2 + 40);
  v15 = swift_retain(*(_QWORD *)(v2 + 48));
  if (v14)
  {
    v16 = static os_log_type_t.default.getter(v15);
    if (qword_1002101D0 != -1)
      swift_once(&qword_1002101D0, sub_1001686F0);
    os_log(_:dso:log:_:_:)(v16, &_mh_execute_header, qword_100218DD8, "Defer fetch until scheduled changes are pushed to cloud", 55, 2, _swiftEmptyArrayStorage);
    objc_msgSend(*(id *)(v2 + 40), "invalidate");
    v17 = *(void **)(v2 + 40);
    *(_QWORD *)(v2 + 40) = 0;

    swift_getObjectType(*(_QWORD *)(v13 + 40));
    OS_dispatch_source.cancel()();
    v18 = *(_QWORD *)(v2 + 48);
    *(_QWORD *)(v2 + 48) = 0;
    swift_release(v18);
    v15 = sub_1000E9958(a1 & 1, 1);
  }
  v42 = static os_log_type_t.default.getter(v15);
  if (qword_1002101D0 != -1)
    swift_once(&qword_1002101D0, sub_1001686F0);
  v19 = qword_100218DD8;
  v20 = sub_1000A0980((uint64_t *)&unk_1002103C0);
  v21 = swift_allocObject(v20, 72, 7);
  v41 = xmmword_100184870;
  *(_OWORD *)(v21 + 16) = xmmword_100184870;
  swift_beginAccess(v2 + 112, v44, 0, 0);
  v22 = *(_QWORD *)(v2 + 112);
  v23 = sub_1000AB31C(0, (unint64_t *)&qword_1002103F0, CKRecord_ptr);
  swift_bridgeObjectRetain(v22);
  v24 = sub_1000A0980(&qword_100211B28);
  v25 = sub_100104B2C(&qword_100211B30, (unint64_t *)&qword_1002103F0, CKRecord_ptr, (uint64_t)&protocol conformance descriptor for NSObject);
  v26 = Dictionary.Keys.description.getter(v22, v23, v24, v25);
  v28 = v27;
  swift_bridgeObjectRelease(v22);
  *(_QWORD *)(v21 + 56) = &type metadata for String;
  v29 = sub_1000A0DF4();
  *(_QWORD *)(v21 + 64) = v29;
  *(_QWORD *)(v21 + 32) = v26;
  *(_QWORD *)(v21 + 40) = v28;
  os_log(_:dso:log:_:_:)(v42, &_mh_execute_header, v19, "Already Scheduled changes: %@", 29, 2, v21);
  v30 = swift_bridgeObjectRelease(v21);
  v31 = static os_log_type_t.default.getter(v30);
  v32 = qword_100218DD8;
  v33 = swift_allocObject(v20, 72, 7);
  *(_OWORD *)(v33 + 16) = v41;
  swift_beginAccess(v2 + 120, v43, 0, 0);
  v34 = *(_QWORD *)(v2 + 120);
  v35 = sub_1000AB31C(0, &qword_1002111C0, CKRecordID_ptr);
  swift_bridgeObjectRetain(v34);
  v36 = sub_1000A0980(&qword_100211B38);
  v37 = sub_100104B2C(&qword_100211B40, &qword_1002111C0, CKRecordID_ptr, (uint64_t)&protocol conformance descriptor for NSObject);
  v38 = Dictionary.Keys.description.getter(v34, v35, v36, v37);
  v40 = v39;
  swift_bridgeObjectRelease(v34);
  *(_QWORD *)(v33 + 56) = &type metadata for String;
  *(_QWORD *)(v33 + 64) = v29;
  *(_QWORD *)(v33 + 32) = v38;
  *(_QWORD *)(v33 + 40) = v40;
  os_log(_:dso:log:_:_:)(v31, &_mh_execute_header, v32, "Already Scheduled deletion: %@", 30, 2, v33);
  swift_release(v13);
  return swift_bridgeObjectRelease(v33);
}

uint64_t sub_1000E9958(char a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  _QWORD *v10;
  void *v11;
  id v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  uint64_t v27;

  v3 = v2;
  v6 = type metadata accessor for DispatchPredicate(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (uint64_t *)((char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = *(void **)(v3 + 72);
  *v10 = v11;
  (*(void (**)(_QWORD *, _QWORD, uint64_t, __n128))(v7 + 104))(v10, enum case for DispatchPredicate.onQueue(_:), v6, v8);
  v12 = v11;
  v13 = _dispatchPreconditionTest(_:)(v10);
  v14 = (*(uint64_t (**)(_QWORD *, uint64_t))(v7 + 8))(v10, v6);
  if ((v13 & 1) != 0)
  {
    v6 = static os_log_type_t.default.getter(v14);
    if (qword_1002101D0 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_1002101D0, sub_1001686F0);
LABEL_3:
  v15 = qword_100218DD8;
  v16 = sub_1000A0980((uint64_t *)&unk_1002103C0);
  v17 = swift_allocObject(v16, 72, 7);
  *(_OWORD *)(v17 + 16) = xmmword_100184870;
  *(_QWORD *)(v17 + 56) = &type metadata for Bool;
  *(_QWORD *)(v17 + 64) = &protocol witness table for Bool;
  v18 = a1 & 1;
  *(_BYTE *)(v17 + 32) = a1 & 1;
  os_log(_:dso:log:_:_:)(v6, &_mh_execute_header, v15, "checkInPendingCloudUpdates, userInitiated: %d", v27);
  swift_bridgeObjectRelease(v17);
  v19 = swift_allocObject(&unk_1001E9568, 24, 7);
  swift_weakInit(v19 + 16, v3);
  v20 = swift_allocObject(&unk_1001EA738, 26, 7);
  *(_QWORD *)(v20 + 16) = v19;
  *(_BYTE *)(v20 + 24) = v18;
  *(_BYTE *)(v20 + 25) = a2 & 1;
  v21 = type metadata accessor for LocalDispatchTimer();
  swift_allocObject(v21, 72, 7);
  v22 = v12;
  v23 = LocalDispatchTimer.init(deadline:repeating:leeway:queue:block:)(v12, (uint64_t)sub_100105690, v20, 3.0, 0.0, 1.0);
  v24 = *(_QWORD *)(v3 + 48);
  *(_QWORD *)(v3 + 48) = v23;
  result = swift_release(v24);
  v26 = *(_QWORD *)(v3 + 48);
  if (v26)
  {
    swift_getObjectType(*(_QWORD *)(v26 + 40));
    swift_retain(v26);
    OS_dispatch_source.resume()();
    return swift_release(v26);
  }
  return result;
}

void sub_1000E9B94(uint64_t a1, int a2, int a3)
{
  char **v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t Strong;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BOOL4 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  id v40;
  void *v41;
  BOOL v42;
  id v43;
  id v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  id v51;
  NSString v52;
  id v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _BOOL8 v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  objc_class *v90;
  char v91;
  id v92;
  void *v93;
  id v94;
  void *v95;
  id v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  void *v102;
  id v103;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  id v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  _QWORD v112[5];
  id v113;
  uint64_t v114;
  uint64_t v115;
  int v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unsigned int v120;
  uint64_t v121;
  int v122;
  unint64_t v123;
  __int128 v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  _QWORD *v131;
  uint64_t v132;
  char v133[24];
  char v134[24];
  char v135[24];
  Swift::OpaquePointer_optional v136;
  Swift::OpaquePointer_optional v137;

  LODWORD(v3) = a3;
  LODWORD(v4) = a2;
  v5 = a1 + 16;
  v6 = static os_log_type_t.default.getter(a1);
  if (qword_1002101D0 != -1)
    goto LABEL_55;
  while (1)
  {
    v7 = qword_100218DD8;
    os_log(_:dso:log:_:_:)(v6, &_mh_execute_header, qword_100218DD8, "checkInPendingCloudUpdates timer fired", 38, 2, _swiftEmptyArrayStorage);
    swift_beginAccess(v5, v135, 0, 0);
    Strong = swift_weakLoadStrong(v5);
    if (!Strong)
      break;
    v9 = Strong;
    v10 = static os_log_type_t.default.getter(Strong);
    os_log(_:dso:log:_:_:)(v10, &_mh_execute_header, v7, "checkInPendingCloudUpdates: operation starting", 46, 2, _swiftEmptyArrayStorage);
    *(_BYTE *)(v9 + 128) = 1;
    v11 = *(_QWORD *)(v9 + 48);
    v116 = (int)v3;
    v122 = v4;
    if (v11)
    {
      swift_getObjectType(*(_QWORD *)(v11 + 40));
      swift_retain(v11);
      OS_dispatch_source.cancel()();
      swift_release(v11);
      v12 = *(_QWORD *)(v9 + 48);
    }
    else
    {
      v12 = 0;
    }
    *(_QWORD *)(v9 + 48) = 0;
    swift_release(v12);
    v13 = *(void **)(v9 + 72);
    v14 = swift_allocObject(&unk_1001EA760, 24, 7);
    swift_beginAccess(v9 + 120, v134, 1, 0);
    v15 = *(_QWORD *)(v9 + 120);
    v115 = v14;
    *(_QWORD *)(v14 + 16) = v15;
    v113 = v13;
    swift_bridgeObjectRetain(v15);
    v16 = sub_1000A54E4((uint64_t)_swiftEmptyArrayStorage);
    v17 = *(_QWORD *)(v9 + 120);
    *(_QWORD *)(v9 + 120) = v16;
    swift_bridgeObjectRelease(v17);
    v18 = swift_allocObject(&unk_1001EA788, 24, 7);
    swift_beginAccess(v9 + 112, v133, 1, 0);
    v19 = *(_QWORD *)(v9 + 112);
    v114 = v18;
    *(_QWORD *)(v18 + 16) = v19;
    swift_bridgeObjectRetain(v19);
    v20 = sub_1000A54F8((uint64_t)_swiftEmptyArrayStorage);
    v21 = *(_QWORD *)(v9 + 112);
    *(_QWORD *)(v9 + 112) = v20;
    swift_bridgeObjectRelease(v21);
    v22 = swift_bridgeObjectRetain(v19);
    v23 = sub_10014F228(v22);
    swift_bridgeObjectRelease(v19);
    v24 = swift_bridgeObjectRetain(v15);
    v121 = sub_10014F228(v24);
    v25 = swift_bridgeObjectRelease(v15);
    v6 = static os_log_type_t.default.getter(v25);
    v26 = qword_100218DD8;
    v125 = sub_1000A0980((uint64_t *)&unk_1002103C0);
    v4 = swift_allocObject(v125, 72, 7);
    v124 = xmmword_100184870;
    *(_OWORD *)(v4 + 16) = xmmword_100184870;
    v27 = v23 < 0 || (v23 & 0x4000000000000000) != 0;
    if (v27)
    {
      v110 = swift_bridgeObjectRetain(v23);
      v28 = _CocoaArrayWrapper.endIndex.getter(v110);
      swift_release(v23);
    }
    else
    {
      v28 = *(_QWORD *)(v23 + 16);
    }
    v132 = v28;
    v29 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    v31 = v30;
    *(_QWORD *)(v4 + 56) = &type metadata for String;
    v123 = sub_1000A0DF4();
    *(_QWORD *)(v4 + 64) = v123;
    *(_QWORD *)(v4 + 32) = v29;
    *(_QWORD *)(v4 + 40) = v31;
    os_log(_:dso:log:_:_:)(v6, &_mh_execute_header, v26, "checkInPendingCloudUpdates updates count: %@", 44, 2, v4);
    v32 = swift_bridgeObjectRelease(v4);
    v33 = IsAppleInternalBuild(v32);
    if ((_DWORD)v33)
      v34 = static os_log_type_t.default.getter(v33);
    else
      v34 = static os_log_type_t.debug.getter(v33);
    v120 = v34;
    v119 = qword_100218DD8;
    v118 = swift_allocObject(v125, 72, 7);
    *(_OWORD *)(v118 + 16) = v124;
    if (v27)
    {
      v35 = swift_retain(v23);
      v36 = _CocoaArrayWrapper.endIndex.getter(v35);
    }
    else
    {
      v36 = *(_QWORD *)(v23 + 16);
      swift_retain(v23);
    }
    v117 = v9;
    v37 = _swiftEmptyArrayStorage;
    if (!v36)
    {
      v39 = _swiftEmptyArrayStorage;
LABEL_39:
      swift_release(v23);
      v63 = Array.description.getter(v39, &type metadata for String);
      v65 = v64;
      swift_bridgeObjectRelease(v39);
      v66 = (_QWORD *)v118;
      v67 = v123;
      *(_QWORD *)(v118 + 56) = &type metadata for String;
      v66[8] = v67;
      v66[4] = v63;
      v66[5] = v65;
      os_log(_:dso:log:_:_:)(v120, &_mh_execute_header, v119, "Staged CKRecords updates - %@", 29, 2, v66);
      v68 = swift_bridgeObjectRelease(v66);
      v69 = static os_log_type_t.default.getter(v68);
      v70 = qword_100218DD8;
      v71 = swift_allocObject(v125, 72, 7);
      *(_OWORD *)(v71 + 16) = v124;
      v72 = v121;
      if (v121 < 0 || (v121 & 0x4000000000000000) != 0)
      {
        v111 = swift_bridgeObjectRetain(v121);
        v73 = _CocoaArrayWrapper.endIndex.getter(v111);
        swift_release(v121);
      }
      else
      {
        v73 = *(_QWORD *)(v121 + 16);
      }
      v74 = v117;
      v132 = v73;
      v75 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
      v76 = v123;
      *(_QWORD *)(v71 + 56) = &type metadata for String;
      *(_QWORD *)(v71 + 64) = v76;
      *(_QWORD *)(v71 + 32) = v75;
      *(_QWORD *)(v71 + 40) = v77;
      os_log(_:dso:log:_:_:)(v69, &_mh_execute_header, v70, "checkInPendingCloudUpdates deletes count: %@", 44, 2, v71);
      v78 = swift_bridgeObjectRelease(v71);
      v79 = IsAppleInternalBuild(v78);
      if ((_DWORD)v79)
        v80 = static os_log_type_t.default.getter(v79);
      else
        v80 = static os_log_type_t.debug.getter(v79);
      v81 = v80;
      v82 = qword_100218DD8;
      v83 = swift_allocObject(v125, 72, 7);
      *(_OWORD *)(v83 + 16) = v124;
      v84 = sub_1000AB31C(0, &qword_1002111C0, CKRecordID_ptr);
      v85 = swift_bridgeObjectRetain(v72);
      v86 = Array.description.getter(v85, v84);
      v88 = v87;
      swift_release(v72);
      v89 = v123;
      *(_QWORD *)(v83 + 56) = &type metadata for String;
      *(_QWORD *)(v83 + 64) = v89;
      *(_QWORD *)(v83 + 32) = v86;
      *(_QWORD *)(v83 + 40) = v88;
      os_log(_:dso:log:_:_:)(v81, &_mh_execute_header, v82, "Staged CKRecords deletes - %@", 29, 2, v83);
      swift_bridgeObjectRelease(v83);
      sub_1000AB31C(0, &qword_1002119A0, CKModifyRecordsOperation_ptr);
      v136.value._rawValue = (void *)v23;
      v136.is_nil = v72;
      v90 = CKModifyRecordsOperation.init(recordsToSave:recordIDsToDelete:)(v136, v137).super.super.super.super.isa;
      v91 = v122;
      if ((v122 & 1) != 0)
        v92 = sub_1000E7F7C();
      else
        v92 = sub_1000E7FA0();
      v93 = v92;
      -[objc_class setGroup:](v90, "setGroup:", v92);

      -[objc_class setCallbackQueue:](v90, "setCallbackQueue:", *(_QWORD *)(v74 + 80));
      if (qos_class_self() >= QOS_CLASS_USER_INITIATED)
        -[objc_class setQualityOfService:](v90, "setQualityOfService:", 25);
      v94 = -[objc_class configuration](v90, "configuration");
      if (v94)
      {
        v95 = v94;
        objc_msgSend(v94, "setAutomaticallyRetryNetworkFailures:", 0);

        v96 = -[objc_class configuration](v90, "configuration");
        if (v96)
        {
          v97 = v96;
          objc_msgSend(v96, "setDiscretionaryNetworkBehavior:", 0);

          v98 = swift_allocObject(&unk_1001EA7B0, 32, 7);
          v99 = v114;
          *(_QWORD *)(v98 + 16) = v114;
          *(_QWORD *)(v98 + 24) = v74;
          swift_retain(v99);
          swift_retain(v74);
          CKModifyRecordsOperation.perRecordSaveBlock.setter(sub_1001056AC, v98);
          v100 = v115;
          swift_retain(v115);
          CKModifyRecordsOperation.perRecordDeleteBlock.setter(sub_1001056B8, v115);
          v101 = swift_allocObject(&unk_1001EA7D8, 50, 7);
          v102 = v113;
          *(_QWORD *)(v101 + 16) = v113;
          *(_QWORD *)(v101 + 24) = v74;
          *(_QWORD *)(v101 + 32) = v99;
          *(_QWORD *)(v101 + 40) = v100;
          *(_BYTE *)(v101 + 48) = v91 & 1;
          *(_BYTE *)(v101 + 49) = v116 & 1;
          v103 = v102;
          swift_retain(v99);
          swift_retain(v74);
          swift_retain(v100);
          CKModifyRecordsOperation.modifyRecordsResultBlock.setter(sub_100105700, v101);
          v104 = *(void **)(v74 + 64);
          v105 = swift_allocObject(&unk_1001E9568, 24, 7);
          v106 = swift_weakInit(v105 + 16, v74);
          v107 = v74;
          __chkstk_darwin(v106);
          v112[2] = v105;
          v112[3] = v90;
          v108 = v104;
          v109 = sub_1000A0980((uint64_t *)&unk_100211940);
          OS_dispatch_queue.sync<A>(execute:)(&v132, sub_100105718, v112, v109);
          swift_release(v100);
          swift_release(v99);
          swift_release(v107);

          swift_release(v105);
          return;
        }
      }
      else
      {
        __break(1u);
      }
      __break(1u);
      return;
    }
    v38 = 0;
    v128 = v23;
    v129 = v23 & 0xC000000000000001;
    v126 = v23 + 32;
    v127 = v36;
    v3 = &selRef_fetchInCallUIState_;
    v39 = _swiftEmptyArrayStorage;
    while (1)
    {
      v131 = v39;
      v40 = v129 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v38, v23) : *(id *)(v126 + 8 * v38);
      v41 = v40;
      v42 = __OFADD__(v38, 1);
      v5 = v38 + 1;
      if (v42)
        break;
      v130 = v5;
      v43 = objc_msgSend(v40, "encryptedValues");
      v44 = objc_msgSend(v43, "allKeys");
      swift_unknownObjectRelease(v43);
      v45 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v44, &type metadata for String);

      v132 = (uint64_t)v37;
      v46 = v37;
      v47 = *(_QWORD *)(v45 + 16);
      if (v47)
      {
        swift_bridgeObjectRetain(v45);
        v48 = (_QWORD *)(v45 + 40);
        do
        {
          v50 = *v48;
          swift_bridgeObjectRetain(*v48);
          v51 = objc_msgSend(v41, "encryptedValues");
          v52 = String._bridgeToObjectiveC()();
          v53 = objc_msgSend(v51, "objectForKeyedSubscript:", v52);
          swift_bridgeObjectRelease(v50);

          v54 = swift_unknownObjectRelease(v51);
          if (v53)
          {
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v54);
            v56 = *(_QWORD *)((v132 & 0xFFFFFFFFFFFFFF8) + 0x10);
            v55 = *(_QWORD *)((v132 & 0xFFFFFFFFFFFFFF8) + 0x18);
            if (v56 >= v55 >> 1)
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v55 > 1, v56 + 1, 1);
            v49 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v56, v53);
            specialized Array._endMutation()(v49);
          }
          v48 += 2;
          --v47;
        }
        while (v47);
        swift_bridgeObjectRelease(v45);
        v57 = (_QWORD *)v132;
        v36 = v127;
        v23 = v128;
        v37 = _swiftEmptyArrayStorage;
      }
      else
      {
        v57 = v46;
        v37 = v46;
      }
      swift_bridgeObjectRelease(v45);
      v58 = sub_1000A0980(&qword_100210400);
      v59 = Array.description.getter(v57, v58);
      v6 = v60;

      swift_bridgeObjectRelease(v57);
      v39 = v131;
      if ((swift_isUniquelyReferenced_nonNull_native(v131) & 1) == 0)
        v39 = sub_100169644(0, v131[2] + 1, 1, v131);
      v4 = v39[2];
      v61 = v39[3];
      if (v4 >= v61 >> 1)
        v39 = sub_100169644((_QWORD *)(v61 > 1), v4 + 1, 1, v39);
      v39[2] = v4 + 1;
      v62 = &v39[2 * v4];
      v62[4] = v59;
      v62[5] = v6;
      v38 = v130;
      if (v130 == v36)
        goto LABEL_39;
    }
    __break(1u);
LABEL_55:
    swift_once(&qword_1002101D0, sub_1001686F0);
  }
}

void sub_1000EA65C(void *a1, void *a2, char a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void (*v14)(void **);
  void (*v15)(void **);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  void *v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t *v48;
  void (*v49)(void **);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  void (*v57)(void **);
  uint64_t v58;
  void *v59;
  char v60;
  char v61[24];

  v8 = a4 + 16;
  swift_beginAccess(a4 + 16, v61, 0, 0);
  v9 = *(_QWORD *)(a4 + 16);
  v10 = a1;
  v11 = swift_bridgeObjectRetain(v9);
  sub_100102344(v11, v10);
  v13 = v12;
  v15 = v14;
  v17 = v16;
  swift_bridgeObjectRelease(v9);

  if (v13)
  {
    v19 = swift_allocObject(&unk_1001EA850, 32, 7);
    *(_QWORD *)(v19 + 16) = v15;
    *(_QWORD *)(v19 + 24) = v17;
    swift_retain(v17);
    if ((a3 & 1) == 0)
    {
      sub_1000FEC54(a2, 0);
      sub_1000EBCB0(a2, (uint64_t)sub_100102FC8, v19);
      v20 = a2;
      v21 = 0;
      goto LABEL_15;
    }
    v57 = v15;
    v58 = v8;
    v31 = sub_1000FEC54(a2, 1);
    v56 = static os_log_type_t.error.getter(v31);
    if (qword_1002101D0 != -1)
      swift_once(&qword_1002101D0, sub_1001686F0);
    v55 = qword_100218DD8;
    v32 = sub_1000A0980((uint64_t *)&unk_1002103C0);
    v33 = swift_allocObject(v32, 152, 7);
    *(_OWORD *)(v33 + 16) = xmmword_100187620;
    v34 = v10;
    v35 = objc_msgSend(v34, "description");
    v36 = static String._unconditionallyBridgeFromObjectiveC(_:)(v35);
    v38 = v37;

    *(_QWORD *)(v33 + 56) = &type metadata for String;
    v39 = sub_1000A0DF4();
    *(_QWORD *)(v33 + 64) = v39;
    *(_QWORD *)(v33 + 32) = v36;
    *(_QWORD *)(v33 + 40) = v38;
    v59 = a2;
    swift_errorRetain(a2);
    v40 = sub_1000A0980(&qword_100210710);
    v41 = String.init<A>(describing:)(&v59, v40);
    *(_QWORD *)(v33 + 96) = &type metadata for String;
    *(_QWORD *)(v33 + 104) = v39;
    *(_QWORD *)(v33 + 72) = v41;
    *(_QWORD *)(v33 + 80) = v42;
    v43 = objc_msgSend(v13, "recordChangeTag");
    if (v43)
    {
      v44 = v43;
      v45 = static String._unconditionallyBridgeFromObjectiveC(_:)(v43);
      v47 = v46;

      v48 = (uint64_t *)(v33 + 112);
      *(_QWORD *)(v33 + 136) = &type metadata for String;
      *(_QWORD *)(v33 + 144) = v39;
      if (v47)
      {
        *v48 = v45;
        v49 = v57;
        v8 = v58;
        v50 = v56;
        v51 = v55;
LABEL_14:
        *(_QWORD *)(v33 + 120) = v47;
        os_log(_:dso:log:_:_:)(v50, &_mh_execute_header, v51, "CheckInPendingCloudUpdates CKRecord save failed (%@) with error: %@. Record change tag: %@", 90, 2, v33);
        swift_bridgeObjectRelease(v33);
        v59 = a2;
        v60 = 1;
        sub_1000FEC54(a2, 1);
        swift_retain(v19);
        v49(&v59);
        sub_100104E50(a2, 1);
        swift_release(v19);
        v20 = a2;
        v21 = 1;
LABEL_15:
        sub_100104E50(v20, v21);
        swift_beginAccess(v8, &v59, 33, 0);
        v52 = sub_1000FED6C((uint64_t)v13, (uint64_t (*)(uint64_t))sub_1000AA0F8, &qword_100211970);
        v54 = v53;
        swift_endAccess(&v59);
        swift_release(v17);
        swift_release(v19);

        if (v52)
          sub_1000FECF0(v52, v54);
        return;
      }
    }
    else
    {
      v48 = (uint64_t *)(v33 + 112);
      *(_QWORD *)(v33 + 136) = &type metadata for String;
      *(_QWORD *)(v33 + 144) = v39;
    }
    v49 = v57;
    v8 = v58;
    v50 = v56;
    v51 = v55;
    *v48 = 15932;
    v47 = 0xE200000000000000;
    goto LABEL_14;
  }
  v22 = static os_log_type_t.error.getter(v18);
  if (qword_1002101D0 != -1)
    swift_once(&qword_1002101D0, sub_1001686F0);
  v23 = qword_100218DD8;
  v24 = sub_1000A0980((uint64_t *)&unk_1002103C0);
  v25 = swift_allocObject(v24, 72, 7);
  *(_OWORD *)(v25 + 16) = xmmword_100184870;
  v26 = v10;
  v27 = objc_msgSend(v26, "description");
  v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
  v30 = v29;

  *(_QWORD *)(v25 + 56) = &type metadata for String;
  *(_QWORD *)(v25 + 64) = sub_1000A0DF4();
  *(_QWORD *)(v25 + 32) = v28;
  *(_QWORD *)(v25 + 40) = v30;
  os_log(_:dso:log:_:_:)(v22, &_mh_execute_header, v23, "CheckInPendingCloudUpdates CKRecord attempted to saved record with unknown recordID (%@)", 88, 2, v25);
  swift_bridgeObjectRelease(v25);
}

void sub_1000EAA78(void *a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void (*v14)(_QWORD *);
  void (*v15)(_QWORD *);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  _QWORD v49[4];
  _BYTE v50[24];

  v8 = a4 + 16;
  swift_beginAccess(a4 + 16, v50, 0, 0);
  v9 = *(_QWORD *)(a4 + 16);
  v10 = a1;
  v11 = swift_bridgeObjectRetain(v9);
  sub_1001025F8(v11);
  v13 = v12;
  v15 = v14;
  v17 = v16;
  swift_bridgeObjectRelease(v9);

  if (v13)
  {
    if ((a3 & 1) != 0)
    {
      v36 = swift_errorRetain(a2);
      v37 = static os_log_type_t.error.getter(v36);
      if (qword_1002101D0 != -1)
        swift_once(&qword_1002101D0, sub_1001686F0);
      v38 = qword_100218DD8;
      v39 = sub_1000A0980((uint64_t *)&unk_1002103C0);
      v40 = swift_allocObject(v39, 72, 7);
      *(_OWORD *)(v40 + 16) = xmmword_100184870;
      v49[0] = a2;
      swift_errorRetain(a2);
      v41 = sub_1000A0980(&qword_100210710);
      v42 = String.init<A>(describing:)(v49, v41);
      v44 = v43;
      *(_QWORD *)(v40 + 56) = &type metadata for String;
      *(_QWORD *)(v40 + 64) = sub_1000A0DF4();
      *(_QWORD *)(v40 + 32) = v42;
      *(_QWORD *)(v40 + 40) = v44;
      os_log(_:dso:log:_:_:)(v37, &_mh_execute_header, v38, "CheckInPendingCloudUpdates CKRecord deletion failed with error: %@", 66, 2, v40);
      swift_bridgeObjectRelease(v40);
      v49[0] = a2;
      swift_errorRetain(a2);
      v15(v49);
      sub_100104C94(a2, 1);
      sub_100104C94(a2, 1);
    }
    else
    {
      v48 = static os_log_type_t.default.getter(v18);
      if (qword_1002101D0 != -1)
        swift_once(&qword_1002101D0, sub_1001686F0);
      v19 = qword_100218DD8;
      v20 = sub_1000A0980((uint64_t *)&unk_1002103C0);
      v21 = swift_allocObject(v20, 72, 7);
      *(_OWORD *)(v21 + 16) = xmmword_100184870;
      v22 = v10;
      v23 = objc_msgSend(v22, "description");
      v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
      v26 = v25;

      *(_QWORD *)(v21 + 56) = &type metadata for String;
      *(_QWORD *)(v21 + 64) = sub_1000A0DF4();
      *(_QWORD *)(v21 + 32) = v24;
      *(_QWORD *)(v21 + 40) = v26;
      os_log(_:dso:log:_:_:)(v48, &_mh_execute_header, v19, "CheckInPendingCloudUpdates CKRecord deleted: %@", 47, 2, v21);
      swift_bridgeObjectRelease(v21);
      v49[0] = 0;
      v15(v49);
    }
    swift_beginAccess(v8, v49, 33, 0);
    v45 = sub_1000FED6C((uint64_t)v13, (uint64_t (*)(uint64_t))sub_1000AA144, (uint64_t *)&unk_1002108C0);
    v47 = v46;
    swift_endAccess(v49);
    swift_release(v17);

    if (v45)
      sub_1000FECF0(v45, v47);
  }
  else
  {
    v27 = static os_log_type_t.error.getter(v18);
    if (qword_1002101D0 != -1)
      swift_once(&qword_1002101D0, sub_1001686F0);
    v28 = qword_100218DD8;
    v29 = sub_1000A0980((uint64_t *)&unk_1002103C0);
    v30 = swift_allocObject(v29, 72, 7);
    *(_OWORD *)(v30 + 16) = xmmword_100184870;
    v31 = v10;
    v32 = objc_msgSend(v31, "description");
    v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(v32);
    v35 = v34;

    *(_QWORD *)(v30 + 56) = &type metadata for String;
    *(_QWORD *)(v30 + 64) = sub_1000A0DF4();
    *(_QWORD *)(v30 + 32) = v33;
    *(_QWORD *)(v30 + 40) = v35;
    os_log(_:dso:log:_:_:)(v27, &_mh_execute_header, v28, "CheckInPendingCloudUpdates CKRecord attempted to delete record with unknown recordID (%@)", 89, 2, v30);
    swift_bridgeObjectRelease(v30);
  }
}

uint64_t sub_1000EAE58(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, int a8)
{
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE v29[4];
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD aBlock[5];
  uint64_t v37;

  v30 = a8;
  v34 = a3;
  v14 = type metadata accessor for DispatchWorkItemFlags(0);
  v33 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v16 = &v29[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v17 = type metadata accessor for DispatchQoS(0);
  v31 = *(_QWORD *)(v17 - 8);
  v32 = v17;
  __chkstk_darwin(v17);
  v19 = &v29[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v20 = swift_allocObject(&unk_1001E9568, 24, 7);
  swift_weakInit(v20 + 16, a4);
  v21 = swift_allocObject(&unk_1001EA800, 58, 7);
  *(_QWORD *)(v21 + 16) = v20;
  *(_QWORD *)(v21 + 24) = a1;
  *(_BYTE *)(v21 + 32) = a2 & 1;
  *(_QWORD *)(v21 + 40) = a5;
  *(_QWORD *)(v21 + 48) = a6;
  *(_BYTE *)(v21 + 56) = a7;
  *(_BYTE *)(v21 + 57) = v30;
  aBlock[4] = sub_100105770;
  v37 = v21;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000E6A24;
  aBlock[3] = &unk_1001EA818;
  v22 = _Block_copy(aBlock);
  swift_retain(v20);
  sub_100105788(a1, a2 & 1);
  swift_retain(a5);
  v23 = swift_retain(a6);
  static DispatchQoS.unspecified.getter(v23);
  v35 = _swiftEmptyArrayStorage;
  v24 = sub_1000A0940((unint64_t *)&qword_100211920, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v25 = sub_1000A0980(&qword_100211D00);
  v26 = sub_1000AAD14((unint64_t *)&qword_100211930, &qword_100211D00, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v35, v25, v26, v14, v24);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v19, v16, v22);
  _Block_release(v22);
  (*(void (**)(_BYTE *, uint64_t))(v33 + 8))(v16, v14);
  (*(void (**)(_BYTE *, uint64_t))(v31 + 8))(v19, v32);
  v27 = v37;
  swift_release(v20);
  return swift_release(v27);
}

uint64_t sub_1000EB0C0(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, int a6, int a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t Strong;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  void (*v33)(_QWORD);
  uint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  char *v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(uint64_t *);
  uint64_t v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  id v50;
  id v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  id v60;
  void *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  id v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  id v81;
  id v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int64_t v88;
  uint64_t v89;
  unint64_t v90;
  int64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  void *v123;
  id v124;
  char *v125;
  void *v126;
  Class isa;
  id v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  int v140;
  int v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  int64_t v145;
  __int128 v146;
  __int128 v147;
  uint64_t v148;
  uint64_t v149;
  void (*v150)(_QWORD *);
  unint64_t v151;
  uint64_t v152;
  uint64_t v153;
  __int128 v154;
  _QWORD v155[2];
  uint64_t v156;
  _QWORD v157[3];
  uint64_t v158;
  _QWORD v159[3];
  char v160[24];
  _QWORD v161[3];
  uint64_t v162;
  char v163;
  _QWORD v164[3];
  char v165[24];
  char v166[32];

  v140 = a6;
  v141 = a7;
  v12 = type metadata accessor for Date(0);
  v139 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v138 = (char *)&v135 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  a1 += 16;
  swift_beginAccess(a1, v166, 0, 0);
  v142 = a1;
  result = swift_weakLoadStrong(a1);
  if (result)
  {
    v137 = v12;
    v143 = result;
    if ((a3 & 1) == 0)
    {
      v15 = static os_log_type_t.default.getter(result);
      if (qword_1002101D0 != -1)
        swift_once(&qword_1002101D0, sub_1001686F0);
      v16 = os_log(_:dso:log:_:_:)(v15, &_mh_execute_header, qword_100218DD8, "CKRecords modify operation finished successfully", 48, 2, _swiftEmptyArrayStorage);
LABEL_55:
      *(_BYTE *)(v143 + 128) = 0;
      v23 = static os_log_type_t.default.getter(v16);
      if (qword_1002101D0 != -1)
        goto LABEL_76;
      goto LABEL_56;
    }
    v17 = v142;
    swift_beginAccess(v142, v165, 0, 0);
    Strong = swift_weakLoadStrong(v17);
    v19 = v143;
    if (Strong)
    {
      v136 = Strong;
      v20 = (uint64_t *)(a4 + 16);
      v21 = swift_errorRetain(a2);
      v22 = static os_log_type_t.error.getter(v21);
      if (qword_1002101D0 != -1)
        swift_once(&qword_1002101D0, sub_1001686F0);
      v144 = a5 + 16;
      v23 = qword_100218DD8;
      v153 = sub_1000A0980((uint64_t *)&unk_1002103C0);
      v24 = swift_allocObject(v153, 72, 7);
      *(_OWORD *)(v24 + 16) = xmmword_100184870;
      v164[0] = a2;
      *(_QWORD *)&v154 = a2;
      swift_errorRetain(a2);
      v152 = sub_1000A0980(&qword_100210710);
      v25 = String.init<A>(describing:)(v164, v152);
      v27 = v26;
      *(_QWORD *)(v24 + 56) = &type metadata for String;
      v151 = sub_1000A0DF4();
      *(_QWORD *)(v24 + 64) = v151;
      *(_QWORD *)(v24 + 32) = v25;
      *(_QWORD *)(v24 + 40) = v27;
      os_log(_:dso:log:_:_:)(v22, &_mh_execute_header, v23, "CKRecords modify operation finished with error: %@", 50, 2, v24);
      swift_bridgeObjectRelease(v24);
      swift_beginAccess(a4 + 16, v164, 0, 0);
      v28 = *v20;
      v29 = *(_QWORD *)(*v20 + 64);
      v145 = *v20 + 64;
      v30 = 1 << *(_BYTE *)(v28 + 32);
      v31 = -1;
      if (v30 < 64)
        v31 = ~(-1 << v30);
      v32 = v31 & v29;
      *(_QWORD *)&v146 = (unint64_t)(v30 + 63) >> 6;
      v148 = v28;
      swift_bridgeObjectRetain(v28);
      v33 = 0;
      v147 = xmmword_100187620;
      while (1)
      {
        if (v32)
        {
          v149 = (v32 - 1) & v32;
          v150 = (void (*)(_QWORD *))v33;
          v36 = __clz(__rbit64(v32)) | ((_QWORD)v33 << 6);
        }
        else
        {
          v37 = (uint64_t)v33 + 1;
          if (__OFADD__(v33, 1))
          {
            __break(1u);
LABEL_73:
            __break(1u);
            goto LABEL_74;
          }
          if (v37 >= (uint64_t)v146)
            goto LABEL_34;
          v38 = *(_QWORD *)(v145 + 8 * v37);
          v39 = (uint64_t)v33 + 1;
          if (!v38)
          {
            v39 = (uint64_t)v33 + 2;
            if ((uint64_t)v33 + 2 >= (uint64_t)v146)
              goto LABEL_34;
            v38 = *(_QWORD *)(v145 + 8 * v39);
            if (!v38)
            {
              v39 = (uint64_t)v33 + 3;
              if ((uint64_t)v33 + 3 >= (uint64_t)v146)
                goto LABEL_34;
              v38 = *(_QWORD *)(v145 + 8 * v39);
              if (!v38)
              {
                v40 = (char *)v33 + 4;
                if ((uint64_t)v33 + 4 >= (uint64_t)v146)
                {
LABEL_34:
                  swift_release(v148);
                  v64 = v144;
                  swift_beginAccess(v144, &v162, 0, 0);
                  v65 = *(_QWORD *)v64;
                  v66 = *(_QWORD *)(*(_QWORD *)v64 + 64);
                  v144 = *(_QWORD *)v64 + 64;
                  v67 = 1 << *(_BYTE *)(v65 + 32);
                  v68 = -1;
                  if (v67 < 64)
                    v68 = ~(-1 << v67);
                  v69 = v68 & v66;
                  v145 = (unint64_t)(v67 + 63) >> 6;
                  *(_QWORD *)&v147 = v65;
                  swift_bridgeObjectRetain(v65);
                  v70 = 0;
                  v146 = xmmword_1001858F0;
                  v71 = v151;
                  while (1)
                  {
                    if (v69)
                    {
                      v148 = (v69 - 1) & v69;
                      v149 = v70;
                      v72 = __clz(__rbit64(v69)) | (v70 << 6);
                    }
                    else
                    {
                      v88 = v70 + 1;
                      if (__OFADD__(v70, 1))
                        goto LABEL_73;
                      v89 = v154;
                      if (v88 >= v145)
                      {
LABEL_54:
                        swift_release(v136);
                        sub_100104C94(v89, 1);
                        v16 = swift_release(v147);
                        goto LABEL_55;
                      }
                      v90 = *(_QWORD *)(v144 + 8 * v88);
                      v91 = v70 + 1;
                      if (!v90)
                      {
                        v91 = v70 + 2;
                        if (v70 + 2 >= v145)
                          goto LABEL_54;
                        v90 = *(_QWORD *)(v144 + 8 * v91);
                        if (!v90)
                        {
                          v91 = v70 + 3;
                          if (v70 + 3 >= v145)
                            goto LABEL_54;
                          v90 = *(_QWORD *)(v144 + 8 * v91);
                          if (!v90)
                          {
                            v92 = v70 + 4;
                            if (v70 + 4 >= v145)
                              goto LABEL_54;
                            v90 = *(_QWORD *)(v144 + 8 * v92);
                            if (!v90)
                            {
                              while (1)
                              {
                                v91 = v92 + 1;
                                if (__OFADD__(v92, 1))
                                  break;
                                if (v91 >= v145)
                                  goto LABEL_54;
                                v90 = *(_QWORD *)(v144 + 8 * v91);
                                ++v92;
                                if (v90)
                                  goto LABEL_53;
                              }
LABEL_75:
                              __break(1u);
LABEL_76:
                              swift_once(&qword_1002101D0, sub_1001686F0);
LABEL_56:
                              v93 = qword_100218DD8;
                              v94 = os_log(_:dso:log:_:_:)(v23, &_mh_execute_header, qword_100218DD8, "checkInPendingCloudUpdates: operation complete", 46, 2, _swiftEmptyArrayStorage);
                              v95 = static os_log_type_t.default.getter(v94);
                              v96 = sub_1000A0980((uint64_t *)&unk_1002103C0);
                              v97 = swift_allocObject(v96, 72, 7);
                              v154 = xmmword_100184870;
                              *(_OWORD *)(v97 + 16) = xmmword_100184870;
                              v98 = v142;
                              swift_beginAccess(v142, v161, 0, 0);
                              v99 = swift_weakLoadStrong(v98);
                              if (v99)
                              {
                                v100 = v99;
                                swift_beginAccess(v99 + 112, v160, 0, 0);
                                v101 = *(_QWORD *)(v100 + 112);
                                swift_bridgeObjectRetain(v101);
                                swift_release(v100);
                              }
                              else
                              {
                                v101 = 0;
                              }
                              v159[0] = v101;
                              v102 = sub_1000A0980(&qword_100211B18);
                              v103 = String.init<A>(describing:)(v159, v102);
                              v105 = v104;
                              *(_QWORD *)(v97 + 56) = &type metadata for String;
                              v106 = sub_1000A0DF4();
                              *(_QWORD *)(v97 + 64) = v106;
                              *(_QWORD *)(v97 + 32) = v103;
                              *(_QWORD *)(v97 + 40) = v105;
                              os_log(_:dso:log:_:_:)(v95, &_mh_execute_header, v93, "Pending changes in queue: %@", 28, 2, v97);
                              v107 = swift_bridgeObjectRelease(v97);
                              v108 = static os_log_type_t.default.getter(v107);
                              v109 = qword_100218DD8;
                              v110 = swift_allocObject(v96, 72, 7);
                              *(_OWORD *)(v110 + 16) = v154;
                              v111 = v142;
                              swift_beginAccess(v142, v159, 0, 0);
                              v112 = swift_weakLoadStrong(v111);
                              if (v112)
                              {
                                v113 = v112;
                                swift_beginAccess(v112 + 120, &v158, 0, 0);
                                v114 = *(_QWORD *)(v113 + 120);
                                swift_bridgeObjectRetain(v114);
                                swift_release(v113);
                              }
                              else
                              {
                                v114 = 0;
                              }
                              v157[0] = v114;
                              v115 = sub_1000A0980(&qword_100211B20);
                              v116 = String.init<A>(describing:)(v157, v115);
                              *(_QWORD *)(v110 + 56) = &type metadata for String;
                              *(_QWORD *)(v110 + 64) = v106;
                              *(_QWORD *)(v110 + 32) = v116;
                              *(_QWORD *)(v110 + 40) = v117;
                              os_log(_:dso:log:_:_:)(v108, &_mh_execute_header, v109, "Pending deletes in queue: %@", 28, 2, v110);
                              swift_bridgeObjectRelease(v110);
                              v118 = v143;
                              swift_beginAccess(v143 + 112, v157, 0, 0);
                              if (*(_QWORD *)(*(_QWORD *)(v118 + 112) + 16)
                                || (swift_beginAccess(v118 + 120, &v156, 0, 0),
                                    v19 = v143,
                                    *(_QWORD *)(*(_QWORD *)(v143 + 120) + 16)))
                              {
                                sub_1000E9504(v140 & 1);
                                v19 = v143;
                              }
                              if ((v141 & 1) != 0)
                              {
                                v119 = sub_1000F7140(45.0);
                                v120 = static os_log_type_t.default.getter(v119);
                                v121 = qword_100218DD8;
                                v122 = swift_allocObject(v96, 72, 7);
                                *(_OWORD *)(v122 + 16) = v154;
                                v123 = *(void **)(v19 + 40);
                                if (v123)
                                {
                                  v124 = objc_msgSend(v123, "date");
                                  v125 = v138;
                                  static Date._unconditionallyBridgeFromObjectiveC(_:)(v124);

                                  v126 = (void *)objc_opt_self(NSDateFormatter);
                                  isa = Date._bridgeToObjectiveC()().super.isa;
                                  v128 = objc_msgSend(v126, "localizedStringFromDate:dateStyle:timeStyle:", isa, 2, 2);

                                  v129 = static String._unconditionallyBridgeFromObjectiveC(_:)(v128);
                                  v131 = v130;

                                  (*(void (**)(char *, uint64_t))(v139 + 8))(v125, v137);
                                }
                                else
                                {
                                  v129 = 0;
                                  v131 = 0;
                                }
                                v155[0] = v129;
                                v155[1] = v131;
                                v132 = sub_1000A0980(&qword_100211AB0);
                                v133 = String.init<A>(describing:)(v155, v132);
                                *(_QWORD *)(v122 + 56) = &type metadata for String;
                                *(_QWORD *)(v122 + 64) = v106;
                                *(_QWORD *)(v122 + 32) = v133;
                                *(_QWORD *)(v122 + 40) = v134;
                                os_log(_:dso:log:_:_:)(v120, &_mh_execute_header, v121, "Cloud update done, continue the fetch: %@", 41, 2, v122);
                                swift_bridgeObjectRelease(v122);
                                v19 = v143;
                              }
                              return swift_release(v19);
                            }
                            v91 = v70 + 4;
                          }
                        }
                      }
LABEL_53:
                      v148 = (v90 - 1) & v90;
                      v149 = v91;
                      v72 = __clz(__rbit64(v90)) + (v91 << 6);
                    }
                    v73 = *(void **)(*(_QWORD *)(v147 + 48) + 8 * v72);
                    v74 = *(_QWORD *)(v147 + 56) + 16 * v72;
                    v75 = *(_QWORD *)(v74 + 8);
                    v150 = *(void (**)(_QWORD *))v74;
                    v76 = v73;
                    v77 = swift_retain(v75);
                    v78 = static os_log_type_t.error.getter(v77);
                    v79 = qword_100218DD8;
                    v80 = swift_allocObject(v153, 112, 7);
                    *(_OWORD *)(v80 + 16) = v146;
                    v81 = v76;
                    v82 = objc_msgSend(v81, "description");
                    v83 = static String._unconditionallyBridgeFromObjectiveC(_:)(v82);
                    v85 = v84;

                    *(_QWORD *)(v80 + 56) = &type metadata for String;
                    *(_QWORD *)(v80 + 64) = v71;
                    *(_QWORD *)(v80 + 32) = v83;
                    *(_QWORD *)(v80 + 40) = v85;
                    v23 = v154;
                    v161[0] = v154;
                    sub_100105788(v154, 1);
                    v86 = String.init<A>(describing:)(v161, v152);
                    *(_QWORD *)(v80 + 96) = &type metadata for String;
                    *(_QWORD *)(v80 + 104) = v71;
                    *(_QWORD *)(v80 + 72) = v86;
                    *(_QWORD *)(v80 + 80) = v87;
                    os_log(_:dso:log:_:_:)(v78, &_mh_execute_header, v79, "CheckInPendingCloudUpdates CKRecord delete failed (%@) with error: %@.", 70, 2, v80);
                    swift_bridgeObjectRelease(v80);
                    v161[0] = v23;
                    sub_100105788(v23, 1);
                    v150(v161);
                    sub_100104C94(v23, 1);

                    swift_release(v75);
                    v69 = v148;
                    v70 = v149;
                  }
                }
                v38 = *(_QWORD *)(v145 + 8 * (_QWORD)v40);
                if (!v38)
                {
                  while (1)
                  {
                    v39 = (uint64_t)(v40 + 1);
                    if (__OFADD__(v40, 1))
                      break;
                    if (v39 >= (uint64_t)v146)
                      goto LABEL_34;
                    v38 = *(_QWORD *)(v145 + 8 * v39);
                    ++v40;
                    if (v38)
                      goto LABEL_30;
                  }
LABEL_74:
                  __break(1u);
                  goto LABEL_75;
                }
                v39 = (uint64_t)v33 + 4;
              }
            }
          }
LABEL_30:
          v149 = (v38 - 1) & v38;
          v150 = (void (*)(_QWORD *))v39;
          v36 = __clz(__rbit64(v38)) + (v39 << 6);
        }
        v41 = *(void **)(*(_QWORD *)(v148 + 48) + 8 * v36);
        v42 = *(_QWORD *)(v148 + 56) + 16 * v36;
        v44 = *(void (**)(uint64_t *))v42;
        v43 = *(_QWORD *)(v42 + 8);
        v45 = v154;
        v162 = v154;
        v163 = 1;
        sub_100105788(v154, 1);
        v46 = v41;
        swift_retain(v43);
        v44(&v162);
        swift_release(v43);
        v47 = sub_100104C94(v45, 1);
        v23 = static os_log_type_t.error.getter(v47);
        v48 = qword_100218DD8;
        v49 = swift_allocObject(v153, 152, 7);
        *(_OWORD *)(v49 + 16) = v147;
        v50 = objc_msgSend(v46, "recordID");
        v51 = objc_msgSend(v50, "description");
        v52 = static String._unconditionallyBridgeFromObjectiveC(_:)(v51);
        v54 = v53;

        v55 = v151;
        *(_QWORD *)(v49 + 56) = &type metadata for String;
        *(_QWORD *)(v49 + 64) = v55;
        *(_QWORD *)(v49 + 32) = v52;
        *(_QWORD *)(v49 + 40) = v54;
        v162 = v45;
        v56 = v45;
        v57 = v55;
        sub_100105788(v56, 1);
        v58 = String.init<A>(describing:)(&v162, v152);
        *(_QWORD *)(v49 + 96) = &type metadata for String;
        *(_QWORD *)(v49 + 104) = v57;
        *(_QWORD *)(v49 + 72) = v58;
        *(_QWORD *)(v49 + 80) = v59;
        v60 = objc_msgSend(v46, "recordChangeTag");
        if (!v60)
          break;
        v61 = v60;
        v62 = static String._unconditionallyBridgeFromObjectiveC(_:)(v60);
        v35 = v63;

        v34 = (uint64_t *)(v49 + 112);
        *(_QWORD *)(v49 + 136) = &type metadata for String;
        *(_QWORD *)(v49 + 144) = v57;
        if (!v35)
          goto LABEL_13;
        *v34 = v62;
LABEL_14:
        *(_QWORD *)(v49 + 120) = v35;
        os_log(_:dso:log:_:_:)(v23, &_mh_execute_header, v48, "CheckInPendingCloudUpdates CKRecord save failed (%@) with error: %@. Record change tag: %@", 90, 2, v49);

        swift_bridgeObjectRelease(v49);
        v32 = v149;
        v33 = (void (*)(_QWORD))v150;
      }
      v34 = (uint64_t *)(v49 + 112);
      *(_QWORD *)(v49 + 136) = &type metadata for String;
      *(_QWORD *)(v49 + 144) = v57;
LABEL_13:
      *v34 = 15932;
      v35 = 0xE200000000000000;
      goto LABEL_14;
    }
    return swift_release(v19);
  }
  return result;
}

uint64_t sub_1000EBCB0(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  id v17;
  void *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  id v34;
  uint64_t v35;
  id v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  void *v45;
  id v46;
  uint64_t v47;
  _BYTE *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _BYTE *v52;
  _BYTE v54[4];
  unsigned int v55;
  uint64_t v56;
  _BYTE *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _BYTE *v63;
  uint64_t v64;
  _QWORD *v65;
  _QWORD aBlock[5];
  _QWORD *v67;

  v60 = a3;
  v58 = a2;
  v56 = type metadata accessor for DispatchWorkItemFlags(0);
  v64 = *(_QWORD *)(v56 - 8);
  __chkstk_darwin(v56);
  v63 = &v54[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = type metadata accessor for DispatchQoS(0);
  v61 = *(_QWORD *)(v5 - 8);
  v62 = v5;
  __chkstk_darwin(v5);
  v57 = &v54[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v55 = static os_log_type_t.default.getter(v7);
  if (qword_1002101D0 != -1)
    swift_once(&qword_1002101D0, sub_1001686F0);
  v8 = qword_100218DD8;
  v9 = sub_1000A0980((uint64_t *)&unk_1002103C0);
  v10 = swift_allocObject(v9, 112, 7);
  *(_OWORD *)(v10 + 16) = xmmword_1001858F0;
  v11 = objc_msgSend(a1, "recordID");
  v12 = objc_msgSend(v11, "description");
  v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
  v15 = v14;

  *(_QWORD *)(v10 + 56) = &type metadata for String;
  v16 = sub_1000A0DF4();
  *(_QWORD *)(v10 + 64) = v16;
  *(_QWORD *)(v10 + 32) = v13;
  *(_QWORD *)(v10 + 40) = v15;
  v17 = objc_msgSend(a1, "recordChangeTag");
  if (v17)
  {
    v18 = v17;
    v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
    v21 = v20;

    v22 = (uint64_t *)(v10 + 72);
    *(_QWORD *)(v10 + 96) = &type metadata for String;
    *(_QWORD *)(v10 + 104) = v16;
    if (v21)
    {
      *v22 = v19;
      v23 = v56;
      v24 = (_QWORD *)&unk_100218000;
      v25 = v55;
      v26 = v8;
      goto LABEL_8;
    }
  }
  else
  {
    v22 = (uint64_t *)(v10 + 72);
    *(_QWORD *)(v10 + 96) = &type metadata for String;
    *(_QWORD *)(v10 + 104) = v16;
  }
  v23 = v56;
  v24 = &unk_100218000;
  v25 = v55;
  v26 = v8;
  *v22 = 15932;
  v21 = 0xE200000000000000;
LABEL_8:
  *(_QWORD *)(v10 + 80) = v21;
  os_log(_:dso:log:_:_:)(v25, &_mh_execute_header, v26, "CheckInPendingCloudUpdates CKRecord successfully saved (%@). new changeTag: %@", 78, 2, v10);
  v27 = swift_bridgeObjectRelease(v10);
  v28 = IsAppleInternalBuild(v27);
  if ((_DWORD)v28)
    v29 = static os_log_type_t.default.getter(v28);
  else
    v29 = static os_log_type_t.debug.getter(v28);
  v30 = v29;
  v31 = v24[443];
  v32 = swift_allocObject(v9, 72, 7);
  *(_OWORD *)(v32 + 16) = xmmword_100184870;
  v33 = objc_msgSend(a1, "encryptedValues");
  v34 = objc_msgSend(v33, "allKeys");
  swift_unknownObjectRelease(v33);
  v35 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v34, &type metadata for String);

  v36 = a1;
  v37 = sub_100101418(v35, v36);
  swift_bridgeObjectRelease(v35);

  v38 = sub_1000A0980(&qword_100210400);
  v39 = Array.description.getter(v37, v38);
  v41 = v40;
  swift_bridgeObjectRelease(v37);
  *(_QWORD *)(v32 + 56) = &type metadata for String;
  *(_QWORD *)(v32 + 64) = v16;
  *(_QWORD *)(v32 + 32) = v39;
  *(_QWORD *)(v32 + 40) = v41;
  os_log(_:dso:log:_:_:)(v30, &_mh_execute_header, v31, "CheckInPendingCloudUpdates saved CKRecords values - %@", 54, 2, v32);
  swift_bridgeObjectRelease(v32);
  v42 = v59;
  v43 = (_QWORD *)swift_allocObject(&unk_1001EA670, 48, 7);
  v43[2] = v36;
  v43[3] = v42;
  v44 = v60;
  v43[4] = v58;
  v43[5] = v44;
  aBlock[4] = sub_1001055B4;
  v67 = v43;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000E6A24;
  aBlock[3] = &unk_1001EA688;
  v45 = _Block_copy(aBlock);
  v46 = v36;
  swift_retain(v42);
  v47 = swift_retain(v44);
  v48 = v57;
  static DispatchQoS.unspecified.getter(v47);
  v65 = _swiftEmptyArrayStorage;
  v49 = sub_1000A0940((unint64_t *)&qword_100211920, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v50 = sub_1000A0980(&qword_100211D00);
  v51 = sub_1000AAD14((unint64_t *)&qword_100211930, &qword_100211D00, (uint64_t)&protocol conformance descriptor for [A]);
  v52 = v63;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v65, v50, v51, v23, v49);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v48, v52, v45);
  _Block_release(v45);
  (*(void (**)(_BYTE *, uint64_t))(v64 + 8))(v52, v23);
  (*(void (**)(_BYTE *, uint64_t))(v61 + 8))(v48, v62);
  return swift_release(v67);
}

void sub_1000EC15C(void *a1, uint64_t a2, void (*a3)(void *, _QWORD), uint64_t a4)
{
  id v7;
  NSString v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  id v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char **v47;
  id v48;
  id v49;
  uint64_t v50;
  id v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  id v58;
  id v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  _QWORD *v63;
  uint64_t v64;
  id v65;
  id v66;
  NSString v67;
  void *v68;
  id v69;
  NSString v70;
  id v71;
  id v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unsigned int v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  void *v89;
  uint64_t v90;
  _QWORD v91[4];
  _QWORD v92[3];

  v7 = objc_msgSend(a1, "encryptedValues");
  v8 = String._bridgeToObjectiveC()();
  v9 = objc_msgSend(v7, "objectForKeyedSubscript:", v8);
  swift_unknownObjectRelease(v7);

  if (v9)
  {
    v91[0] = v9;
    v11 = sub_1000A0980(&qword_100210400);
    v10 = swift_dynamicCast(v92, v91, v11, &type metadata for String, 6);
    if ((_DWORD)v10)
      v12 = v92[0];
    else
      v12 = 0;
    if ((_DWORD)v10)
      v13 = v92[1];
    else
      v13 = 0;
  }
  else
  {
    v12 = 0;
    v13 = 0;
  }
  v14 = CKRecord.recordType.getter(v10);
  v16 = v15;
  swift_beginAccess(a2 + 112, v92, 0, 0);
  v17 = *(_QWORD *)(a2 + 112);
  swift_bridgeObjectRetain(v13);
  v18 = swift_bridgeObjectRetain(v17);
  sub_100101980(v18, v12, v13, v14, v16);
  v20 = v19;
  v22 = v21;
  v24 = v23;
  swift_bridgeObjectRelease(v16);
  swift_bridgeObjectRelease(v17);
  swift_bridgeObjectRelease_n(v13, 2);
  if (v20)
  {
    v87 = a4;
    v86 = (_QWORD *)(a2 + 112);
    v25 = swift_allocObject(&unk_1001EA6C0, 32, 7);
    *(_QWORD *)(v25 + 16) = v22;
    *(_QWORD *)(v25 + 24) = v24;
    v26 = v20;
    v85 = v25;
    v27 = swift_retain(v25);
    v28 = static os_log_type_t.default.getter(v27);
    if (qword_1002101D0 != -1)
      swift_once(&qword_1002101D0, sub_1001686F0);
    v29 = qword_100218DD8;
    v30 = sub_1000A0980((uint64_t *)&unk_1002103C0);
    v31 = swift_allocObject(v30, 72, 7);
    *(_OWORD *)(v31 + 16) = xmmword_100184870;
    v32 = v26;
    v33 = objc_msgSend(v32, "description");
    v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(v33);
    v36 = v35;

    *(_QWORD *)(v31 + 56) = &type metadata for String;
    v37 = sub_1000A0DF4();
    *(_QWORD *)(v31 + 64) = v37;
    *(_QWORD *)(v31 + 32) = v34;
    *(_QWORD *)(v31 + 40) = v36;
    os_log(_:dso:log:_:_:)(v28, &_mh_execute_header, v29, "Replacing existing pending record: %@", 37, 2, v31);
    v38 = swift_bridgeObjectRelease(v31);
    v39 = IsAppleInternalBuild(v38);
    v89 = a1;
    if ((_DWORD)v39)
      v40 = static os_log_type_t.default.getter(v39);
    else
      v40 = static os_log_type_t.debug.getter(v39);
    v84 = v40;
    v83 = qword_100218DD8;
    v41 = swift_allocObject(v30, 112, 7);
    *(_OWORD *)(v41 + 16) = xmmword_1001858F0;
    v42 = objc_msgSend(v32, "recordID");
    v43 = objc_msgSend(v42, "description");
    v44 = static String._unconditionallyBridgeFromObjectiveC(_:)(v43);
    v46 = v45;

    *(_QWORD *)(v41 + 56) = &type metadata for String;
    *(_QWORD *)(v41 + 64) = v37;
    *(_QWORD *)(v41 + 32) = v44;
    *(_QWORD *)(v41 + 40) = v46;
    v47 = &selRef__runConfirm;
    v48 = objc_msgSend(v32, "encryptedValues");
    v49 = objc_msgSend(v48, "allKeys");
    swift_unknownObjectRelease(v48);
    v50 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v49, &type metadata for String);

    v51 = v32;
    v52 = sub_100101418(v50, v51);
    swift_bridgeObjectRelease(v50);

    v53 = sub_1000A0980(&qword_100210400);
    v54 = Array.description.getter(v52, v53);
    v56 = v55;
    swift_bridgeObjectRelease(v52);
    *(_QWORD *)(v41 + 96) = &type metadata for String;
    *(_QWORD *)(v41 + 104) = v37;
    v57 = v51;
    *(_QWORD *)(v41 + 72) = v54;
    *(_QWORD *)(v41 + 80) = v56;
    os_log(_:dso:log:_:_:)(v84, &_mh_execute_header, v83, "Replacing existing pending CKRecord %@ - %@", 43, 2, v41);
    swift_bridgeObjectRelease(v41);
    v58 = objc_msgSend(v51, "encryptedValues");
    v59 = objc_msgSend(v58, "allKeys");
    swift_unknownObjectRelease(v58);
    v60 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v59, &type metadata for String);

    v61 = *(_QWORD *)(v60 + 16);
    v62 = v89;
    if (v61)
    {
      v63 = (_QWORD *)(v60 + 40);
      do
      {
        v64 = *v63;
        swift_bridgeObjectRetain(*v63);
        v65 = objc_msgSend(v62, v47[470]);
        v66 = objc_msgSend(v57, v47[470]);
        v67 = String._bridgeToObjectiveC()();
        v68 = v57;
        v69 = objc_msgSend(v66, "objectForKeyedSubscript:", v67);

        v47 = &selRef__runConfirm;
        swift_unknownObjectRelease(v66);
        v70 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v64);
        objc_msgSend(v65, "setObject:forKeyedSubscript:", v69, v70);
        v71 = v69;
        v57 = v68;
        swift_unknownObjectRelease(v71);
        v72 = v65;
        v62 = v89;
        swift_unknownObjectRelease(v72);

        v63 += 2;
        --v61;
      }
      while (v61);
    }
    swift_bridgeObjectRelease(v60);
    v73 = (_QWORD *)swift_allocObject(&unk_1001EA6E8, 48, 7);
    v73[2] = sub_100102FC8;
    v73[3] = v85;
    v73[4] = a3;
    v73[5] = v87;
    swift_beginAccess(v86, v91, 33, 0);
    swift_retain(v85);
    swift_retain(v87);
    v74 = sub_1000FED6C((uint64_t)v57, (uint64_t (*)(uint64_t))sub_1000AA0F8, &qword_100211970);
    v76 = v75;
    swift_endAccess(v91);
    if (v74)
      sub_1000FECF0(v74, v76);
    v77 = swift_allocObject(&unk_1001EA710, 32, 7);
    *(_QWORD *)(v77 + 16) = sub_1001055EC;
    *(_QWORD *)(v77 + 24) = v73;
    swift_beginAccess(v86, v91, 33, 0);
    swift_retain(v73);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v86);
    v90 = *v86;
    *v86 = 0x8000000000000000;
    v79 = sub_100100BC0((uint64_t)sub_100102FC4, v77, v89, isUniquelyReferenced_nonNull_native, (uint64_t (*)(void *))sub_1000AA0F8, &qword_100211970, (unint64_t *)&qword_1002103F0, CKRecord_ptr);
    v81 = v80;
    v82 = *v86;
    *v86 = v90;
    swift_bridgeObjectRelease(v82);
    swift_endAccess(v91);
    swift_release(v73);
    swift_release_n(v85, 2);

    if (v79)
      sub_1000FECF0(v79, v81);
  }
  else
  {
    a3(a1, 0);
  }
}

uint64_t sub_1000EC83C(void *a1, char a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  char v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  void *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD aBlock[5];
  uint64_t v31;

  v6 = v5;
  v11 = a2 & 1;
  v12 = type metadata accessor for DispatchWorkItemFlags(0);
  v28 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v14 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = type metadata accessor for DispatchQoS(0);
  v15 = *(_QWORD *)(v27 - 8);
  __chkstk_darwin(v27);
  v17 = (char *)&v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = *(_QWORD *)(v6 + 72);
  v18 = swift_allocObject(&unk_1001EA4B8, 56, 7);
  *(_QWORD *)(v18 + 16) = v6;
  *(_QWORD *)(v18 + 24) = a1;
  *(_BYTE *)(v18 + 32) = a3;
  *(_BYTE *)(v18 + 33) = v11;
  *(_QWORD *)(v18 + 40) = a4;
  *(_QWORD *)(v18 + 48) = a5;
  aBlock[4] = sub_100105430;
  v31 = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000E6A24;
  aBlock[3] = &unk_1001EA4D0;
  v19 = _Block_copy(aBlock);
  swift_retain(v6);
  v20 = a1;
  v21 = swift_retain(a5);
  static DispatchQoS.unspecified.getter(v21);
  v29 = _swiftEmptyArrayStorage;
  v22 = sub_1000A0940((unint64_t *)&qword_100211920, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v23 = sub_1000A0980(&qword_100211D00);
  v24 = sub_1000AAD14((unint64_t *)&qword_100211930, &qword_100211D00, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v29, v23, v24, v12, v22);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v17, v14, v19);
  _Block_release(v19);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v14, v12);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v27);
  return swift_release(v31);
}

void sub_1000ECA58(uint64_t a1, void *a2, char a3, int a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t);
  void *v19;
  id v20;
  id v21;
  id v22;
  id v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  _QWORD *v44;
  void *v45;
  id v46;
  void *v47;
  id v48;
  void *v49;
  char v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  id v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  id v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  id v80;
  void **aBlock;
  uint64_t v82;
  void (*v83)(uint64_t, void *);
  void *v84;
  uint64_t (*v85)(void *);
  uint64_t v86;

  v77 = a6;
  v75 = a5;
  v73 = a4;
  v9 = type metadata accessor for URL(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v71 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v15 = (char *)&v71 - v14;
  v79 = swift_allocObject(&unk_1001EA508, 24, 7);
  *(_QWORD *)(v79 + 16) = _swiftEmptyArrayStorage;
  v78 = swift_allocObject(&unk_1001EA508, 24, 7);
  *(_QWORD *)(v78 + 16) = _swiftEmptyArrayStorage;
  v16 = a1 + OBJC_IVAR____TtC15audioaccessoryd16CloudCoordinator_configuration;
  v17 = type metadata accessor for CloudCoordinatorConfiguration(0);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v16 + *(int *)(v17 + 28), v9);
  sub_1000E18B0((uint64_t)v12, (uint64_t)objc_msgSend(a2, "scope"));
  v18 = *(void (**)(char *, uint64_t))(v10 + 8);
  v18(v12, v9);
  v19 = (void *)sub_1000E204C((uint64_t)v15);
  v18(v15, v9);
  v20 = objc_allocWithZone((Class)CKFetchDatabaseChangesOperation);
  v80 = v19;
  v21 = objc_msgSend(v20, "initWithPreviousServerChangeToken:", v19);
  objc_msgSend(v21, "setCallbackQueue:", *(_QWORD *)(a1 + 80));
  v22 = v21;
  if ((a3 & 1) != 0)
    v23 = sub_1000E7F38();
  else
    v23 = sub_1000E7F0C();
  v24 = v23;
  v76 = a1;
  objc_msgSend(v22, "setGroup:", v23);

  v26 = static os_log_type_t.default.getter(v25);
  if (qword_1002101D0 != -1)
    swift_once(&qword_1002101D0, sub_1001686F0);
  v27 = qword_100218DD8;
  v74 = sub_1000A0980((uint64_t *)&unk_1002103C0);
  v28 = swift_allocObject(v74, 112, 7);
  *(_OWORD *)(v28 + 16) = xmmword_1001858F0;
  v29 = a2;
  aBlock = (void **)objc_msgSend(a2, "scope");
  type metadata accessor for Scope(0);
  v31 = String.init<A>(describing:)(&aBlock, v30);
  v33 = v32;
  *(_QWORD *)(v28 + 56) = &type metadata for String;
  v34 = sub_1000A0DF4();
  *(_QWORD *)(v28 + 64) = v34;
  *(_QWORD *)(v28 + 32) = v31;
  *(_QWORD *)(v28 + 40) = v33;
  if (v80)
  {
    v72 = v27;
    v35 = v26;
    v36 = objc_msgSend(v80, "data");
    v37 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v36);
    v39 = v38;

    Data.hexString.getter(v37, v39);
    v41 = v40;
    v43 = v42;
    sub_1000A103C(v37, v39);
    v44 = (_QWORD *)(v28 + 72);
    *(_QWORD *)(v28 + 96) = &type metadata for String;
    *(_QWORD *)(v28 + 104) = v34;
    if (v43)
    {
      *v44 = v41;
      v45 = v29;
      v26 = v35;
      v27 = v72;
      goto LABEL_12;
    }
    v45 = v29;
    v26 = v35;
    v27 = v72;
  }
  else
  {
    v44 = (_QWORD *)(v28 + 72);
    *(_QWORD *)(v28 + 96) = &type metadata for String;
    *(_QWORD *)(v28 + 104) = v34;
    v45 = v29;
  }
  *v44 = 7104878;
  v43 = 0xE300000000000000;
LABEL_12:
  *(_QWORD *)(v28 + 80) = v43;
  os_log(_:dso:log:_:_:)(v26, &_mh_execute_header, v27, "CloudSync: Old %@ database change token: %@", 43, 2, v28);
  swift_bridgeObjectRelease(v28);
  objc_msgSend(v22, "setFetchAllChanges:", 1);
  v46 = objc_msgSend(v22, "configuration");
  if (v46)
  {
    v47 = v46;
    objc_msgSend(v46, "setAutomaticallyRetryNetworkFailures:", 0);

    v48 = objc_msgSend(v22, "configuration");
    if (v48)
    {
      v49 = v48;
      v50 = v73 & 1;
      objc_msgSend(v48, "setDiscretionaryNetworkBehavior:", 0);

      v51 = v79;
      v85 = sub_100105444;
      v86 = v79;
      aBlock = _NSConcreteStackBlock;
      v82 = 1107296256;
      v83 = sub_1000ED28C;
      v84 = &unk_1001EA520;
      v52 = _Block_copy(&aBlock);
      v53 = v86;
      swift_retain(v51);
      swift_release(v53);
      objc_msgSend(v22, "setRecordZoneWithIDChangedBlock:", v52);
      _Block_release(v52);
      v54 = v78;
      v85 = sub_10010544C;
      v86 = v78;
      aBlock = _NSConcreteStackBlock;
      v82 = 1107296256;
      v83 = sub_1000ED28C;
      v84 = &unk_1001EA548;
      v55 = _Block_copy(&aBlock);
      v56 = v86;
      swift_retain(v54);
      swift_release(v56);
      objc_msgSend(v22, "setRecordZoneWithIDWasDeletedBlock:", v55);
      _Block_release(v55);
      v57 = swift_allocObject(&unk_1001EA580, 17, 7);
      *(_BYTE *)(v57 + 16) = v50;
      v85 = sub_100105464;
      v86 = v57;
      aBlock = _NSConcreteStackBlock;
      v82 = 1107296256;
      v83 = sub_1000ED28C;
      v84 = &unk_1001EA598;
      v58 = _Block_copy(&aBlock);
      swift_release(v86);
      objc_msgSend(v22, "setChangeTokenUpdatedBlock:", v58);
      _Block_release(v58);
      v60 = static os_log_type_t.default.getter(v59);
      os_log(_:dso:log:_:_:)(v60, &_mh_execute_header, qword_100218DD8, "CloudSync: fetchDatabaseChanges for the new layer", 49, 2, _swiftEmptyArrayStorage);
      v61 = swift_allocObject(&unk_1001EA5D0, 72, 7);
      v62 = v75;
      v63 = v76;
      *(_QWORD *)(v61 + 16) = v76;
      *(_QWORD *)(v61 + 24) = v62;
      v64 = v77;
      *(_QWORD *)(v61 + 32) = v77;
      *(_BYTE *)(v61 + 40) = v50;
      *(_QWORD *)(v61 + 48) = v54;
      *(_QWORD *)(v61 + 56) = v51;
      *(_QWORD *)(v61 + 64) = v45;
      swift_retain(v51);
      swift_retain(v54);
      swift_retain(v63);
      swift_retain(v64);
      v65 = v45;
      v66 = CKFetchDatabaseChangesOperation.fetchDatabaseChangesResultBlock.setter(sub_1001054B0, v61);
      v67 = static os_log_type_t.default.getter(v66);
      v68 = qword_100218DD8;
      v69 = swift_allocObject(v74, 72, 7);
      *(_OWORD *)(v69 + 16) = xmmword_100184870;
      *(_QWORD *)(v69 + 56) = sub_1000AB31C(0, &qword_100211B00, CKFetchDatabaseChangesOperation_ptr);
      *(_QWORD *)(v69 + 64) = sub_100104B2C(&qword_100211B08, &qword_100211B00, CKFetchDatabaseChangesOperation_ptr, (uint64_t)&protocol conformance descriptor for NSObject);
      *(_QWORD *)(v69 + 32) = v22;
      v70 = v22;
      os_log(_:dso:log:_:_:)(v67, &_mh_execute_header, v68, "CloudSync: Adding Cloud operation %@", 36, 2, v69);
      swift_bridgeObjectRelease(v69);
      objc_msgSend(v65, "addOperation:", v70);
      swift_release(v51);
      swift_release(v54);

      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64_t sub_1000ED108(void *a1, uint64_t a2)
{
  id v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v20[24];

  swift_beginAccess(a2 + 16, v20, 33, 0);
  v4 = a1;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v4);
  v5 = *(_QWORD *)(a2 + 16) & 0xFFFFFFFFFFFFFF8;
  v7 = *(_QWORD *)(v5 + 0x10);
  v6 = *(_QWORD *)(v5 + 24);
  if (v7 >= v6 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v6 > 1, v7 + 1, 1);
  v8 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v7, v4);
  specialized Array._endMutation()(v8);
  v9 = swift_endAccess(v20);
  v10 = static os_log_type_t.default.getter(v9);
  if (qword_1002101D0 != -1)
    swift_once(&qword_1002101D0, sub_1001686F0);
  v11 = qword_100218DD8;
  v12 = sub_1000A0980((uint64_t *)&unk_1002103C0);
  v13 = swift_allocObject(v12, 72, 7);
  *(_OWORD *)(v13 + 16) = xmmword_100184870;
  v14 = v4;
  v15 = objc_msgSend(v14, "description");
  v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
  v18 = v17;

  *(_QWORD *)(v13 + 56) = &type metadata for String;
  *(_QWORD *)(v13 + 64) = sub_1000A0DF4();
  *(_QWORD *)(v13 + 32) = v16;
  *(_QWORD *)(v13 + 40) = v18;
  os_log(_:dso:log:_:_:)(v10, &_mh_execute_header, v11, "CloudSync: Record Zone ID Changed: %@", 37, 2, v13);
  return swift_bridgeObjectRelease(v13);
}

uint64_t sub_1000ED290(void *a1, uint64_t a2)
{
  id v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _BYTE v10[24];

  swift_beginAccess(a2 + 16, v10, 33, 0);
  v4 = a1;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v4);
  v5 = *(_QWORD *)(a2 + 16) & 0xFFFFFFFFFFFFFF8;
  v7 = *(_QWORD *)(v5 + 0x10);
  v6 = *(_QWORD *)(v5 + 24);
  if (v7 >= v6 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v6 > 1, v7 + 1, 1);
  v8 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v7, v4);
  specialized Array._endMutation()(v8);
  return swift_endAccess(v10);
}

uint64_t sub_1000ED328(void *a1, char a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  id v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v22;

  v4 = static os_log_type_t.default.getter(a1);
  if (qword_1002101D0 != -1)
    swift_once(&qword_1002101D0, sub_1001686F0);
  v5 = a2 & 1;
  v6 = qword_100218DD8;
  v7 = sub_1000A0980((uint64_t *)&unk_1002103C0);
  v8 = swift_allocObject(v7, 112, 7);
  *(_OWORD *)(v8 + 16) = xmmword_1001858F0;
  v22 = v5;
  v9 = String.init<A>(describing:)(&v22, &type metadata for CloudCoordinator.DatabaseToken);
  v11 = v10;
  *(_QWORD *)(v8 + 56) = &type metadata for String;
  v12 = sub_1000A0DF4();
  *(_QWORD *)(v8 + 64) = v12;
  *(_QWORD *)(v8 + 32) = v9;
  *(_QWORD *)(v8 + 40) = v11;
  v13 = objc_msgSend(a1, "data");
  v14 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v13);
  v16 = v15;

  Data.hexString.getter(v14, v16);
  v18 = v17;
  v20 = v19;
  sub_1000A103C(v14, v16);
  *(_QWORD *)(v8 + 96) = &type metadata for String;
  *(_QWORD *)(v8 + 104) = v12;
  *(_QWORD *)(v8 + 72) = v18;
  *(_QWORD *)(v8 + 80) = v20;
  os_log(_:dso:log:_:_:)(v4, &_mh_execute_header, v6, "CloudSync: change token updated, database, %@, token, %@", 56, 2, v8);
  return swift_bridgeObjectRelease(v8);
}

void sub_1000ED490(uint64_t a1, void *a2)
{
  uint64_t v3;
  void (*v4)(void);
  id v5;

  v4 = *(void (**)(void))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v5 = a2;
  v4();
  swift_release(v3);

}

void sub_1000ED4E0(void *a1, uint64_t a2, uint64_t a3, void (*a4)(void *, uint64_t), uint64_t a5, char a6, unint64_t a7, unint64_t a8, void *a9)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _UNKNOWN **v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  unint64_t v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  id v42;
  uint64_t *v43;
  uint64_t v44;
  unint64_t v45;
  int v46;
  id v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t Strong;
  void *v54;
  uint64_t v55;
  void *v56;
  char *v57;
  id v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  NSString *v66;
  char *v67;
  NSString *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  void (*v72)(void *, uint64_t);
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  uint64_t v84;
  char v85;
  uint64_t v86;
  id v87;
  uint64_t v88;
  unint64_t v89;
  char v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  void *v97;
  void *v98;
  Swift::String v99;
  Swift::String v100;
  CKRecordZoneID v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  id v105;
  uint64_t v106;
  void *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t *v112;
  uint64_t v113;
  _UNKNOWN **v114;
  uint64_t v115;
  uint64_t v116;
  id v117;
  uint64_t v118;
  _UNKNOWN **v119;
  uint64_t v120;
  id v121;
  _UNKNOWN **v122;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  objc_class *v128;
  unint64_t v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  _QWORD *v134;
  uint64_t v135;
  void *v136;
  void (*v137)(id, uint64_t);
  uint64_t v138;
  void *v139;
  uint64_t v140;
  id v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  void *v145;
  uint64_t v146;
  uint64_t v147;
  unsigned int v148;
  int v149;
  void (*v150)(id, uint64_t);
  void *v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t v156;
  char *v157;
  uint64_t v158;
  char *v159;
  uint64_t v160;
  uint64_t v161;
  char *v162;
  uint64_t v163;
  NSString *v164;
  uint64_t v165;
  __int128 v166;
  void *v167;
  unint64_t v168;
  id v169;
  uint64_t v170;
  char *v171;
  uint64_t v172;
  char *v173;
  unint64_t v174;
  uint64_t v175;
  unint64_t v176;
  unint64_t v177;
  char v178[4];
  char v179[8];
  _QWORD *v180;
  _QWORD aBlock[5];
  uint64_t v182;
  char v183[8];

  v177 = a7;
  v152 = a5;
  v170 = a3;
  v172 = type metadata accessor for URL(0);
  v158 = *(_QWORD *)(v172 - 8);
  __chkstk_darwin(v172);
  v157 = (char *)&v147 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v171 = (char *)&v147 - v16;
  v164 = (NSString *)type metadata accessor for DispatchWorkItemFlags(0);
  v163 = (uint64_t)*(v164 - 1);
  __chkstk_darwin(v164);
  v162 = (char *)&v147 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v161 = type metadata accessor for DispatchQoS(0);
  v160 = *(_QWORD *)(v161 - 8);
  __chkstk_darwin(v161);
  v159 = (char *)&v147 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a2 & 0x100) != 0)
  {
    v72 = a4;
    v73 = a2;
    v74 = swift_errorRetain(a1);
    v75 = static os_log_type_t.default.getter(v74);
    if (qword_1002101D0 != -1)
      swift_once(&qword_1002101D0, sub_1001686F0);
    v76 = qword_100218DD8;
    v77 = sub_1000A0980((uint64_t *)&unk_1002103C0);
    v78 = swift_allocObject(v77, 72, 7);
    *(_OWORD *)(v78 + 16) = xmmword_100184870;
    aBlock[0] = a1;
    swift_errorRetain(a1);
    v79 = sub_1000A0980(&qword_100210710);
    v80 = String.init<A>(describing:)(aBlock, v79);
    v82 = v81;
    *(_QWORD *)(v78 + 56) = &type metadata for String;
    *(_QWORD *)(v78 + 64) = sub_1000A0DF4();
    *(_QWORD *)(v78 + 32) = v80;
    *(_QWORD *)(v78 + 40) = v82;
    os_log(_:dso:log:_:_:)(v75, &_mh_execute_header, v76, "CloudSync: Error during fetch database changes operation: %@", 60, 2, v78);
    swift_bridgeObjectRelease(v78);
    sub_1000F2FE4((uint64_t)a1, 1);
    swift_errorRetain(a1);
    v72(a1, 1);
    sub_1001054E8(a1, v73, 1);
    v83 = a1;
    v84 = v73;
    v85 = 1;
    goto LABEL_83;
  }
  v176 = a8;
  v150 = a4;
  LODWORD(v19) = a6 & 1;
  v151 = a1;
  v20 = a1;
  v21 = static os_log_type_t.default.getter(v20);
  if (qword_1002101D0 != -1)
    goto LABEL_72;
  while (1)
  {
    v22 = qword_100218DD8;
    v175 = sub_1000A0980((uint64_t *)&unk_1002103C0);
    v23 = swift_allocObject(v175, 152, 7);
    v24 = (_QWORD *)v23;
    *(_OWORD *)(v23 + 16) = xmmword_100187620;
    if ((a2 & 1) != 0)
      v25 = 1702195828;
    else
      v25 = 0x65736C6166;
    if ((a2 & 1) != 0)
      v26 = 0xE400000000000000;
    else
      v26 = 0xE500000000000000;
    *(_QWORD *)(v23 + 56) = &type metadata for String;
    v27 = sub_1000A0DF4();
    v24[8] = v27;
    v24[4] = v25;
    v24[5] = v26;
    v149 = (int)v19;
    LOBYTE(aBlock[0]) = (_BYTE)v19;
    v28 = String.init<A>(describing:)(aBlock, &type metadata for CloudCoordinator.DatabaseToken);
    v24[12] = &type metadata for String;
    v24[13] = v27;
    v24[9] = v28;
    v24[10] = v29;
    v169 = v20;
    v30 = objc_msgSend(v20, "data");
    v19 = (_UNKNOWN **)static Data._unconditionallyBridgeFromObjectiveC(_:)(v30);
    v32 = v31;

    Data.hexString.getter((uint64_t)v19, v32);
    v20 = v33;
    v35 = v34;
    sub_1000A103C((uint64_t)v19, v32);
    v24[17] = &type metadata for String;
    v24[18] = v27;
    v154 = v27;
    v24[14] = v20;
    v24[15] = v35;
    os_log(_:dso:log:_:_:)(v21, &_mh_execute_header, v22, "CloudSync: Fetch database changes complete, moreComing %@, database, %@, token, %@", 82, 2, v24);
    swift_bridgeObjectRelease(v24);
    v36 = v170 + OBJC_IVAR____TtC15audioaccessoryd16CloudCoordinator_configuration;
    v37 = type metadata accessor for CloudCoordinatorConfiguration(0);
    v155 = v37;
    v38 = *(int *)(v37 + 32);
    v156 = v36;
    if (!*(_QWORD *)(*(_QWORD *)(v36 + v38) + 16))
    {
      v86 = static os_log_type_t.error.getter(v37);
      os_log(_:dso:log:_:_:)(v86, &_mh_execute_header, qword_100218DD8, "CloudSync: Configuration did not define any zoneIDs!", 52, 2, _swiftEmptyArrayStorage);
      v87 = objc_msgSend(objc_allocWithZone((Class)NSError), "init");
      v150(v87, 1);

      v83 = v151;
      v84 = a2;
      goto LABEL_82;
    }
    v39 = v176;
    v40 = (uint64_t *)(v177 + 16);
    swift_beginAccess(v177 + 16, v183, 0, 0);
    v21 = *v40;
    if ((unint64_t)*v40 >> 62)
    {
      if (v21 < 0)
        v142 = *v40;
      else
        v142 = v21 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v21);
      v41 = _CocoaArrayWrapper.endIndex.getter(v142);
    }
    else
    {
      v41 = *(_QWORD *)((v21 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(v21);
    }
    v42 = v169;
    v148 = a2;
    v43 = (uint64_t *)(v39 + 16);
    v44 = v170;
    a2 = v41;
    v165 = v39 + 16;
    if (v41)
    {
      v45 = 0;
      v46 = 0;
      v167 = (void *)(v170 + 24);
      v168 = v21 & 0xC000000000000001;
      v153 = v21 & 0xFFFFFFFFFFFFFF8;
      v166 = xmmword_100184870;
      while (1)
      {
        if (v168)
        {
          v47 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v45, v21);
        }
        else
        {
          if (v45 >= *(_QWORD *)(v153 + 16))
            goto LABEL_71;
          v47 = *(id *)(v21 + 8 * v45 + 32);
        }
        v48 = v47;
        if (__OFADD__(v45, 1))
          break;
        v176 = v45 + 1;
        LODWORD(v177) = v46;
        v49 = static os_log_type_t.default.getter(v47);
        v20 = (id)qword_100218DD8;
        v50 = swift_allocObject(v175, 72, 7);
        *(_OWORD *)(v50 + 16) = v166;
        v19 = CKRecordZoneID_ptr;
        *(_QWORD *)(v50 + 56) = sub_1000AB31C(0, (unint64_t *)&unk_100210850, CKRecordZoneID_ptr);
        *(_QWORD *)(v50 + 64) = sub_100104B2C(&qword_100211B10, (unint64_t *)&unk_100210850, CKRecordZoneID_ptr, (uint64_t)&protocol conformance descriptor for NSObject);
        *(_QWORD *)(v50 + 32) = v48;
        v51 = v48;
        os_log(_:dso:log:_:_:)(v49, &_mh_execute_header, v20, "CloudSync: Cloud zone deleted: %@", 33, 2, v50);
        swift_bridgeObjectRelease(v50);
        Strong = swift_unknownObjectWeakLoadStrong(v167, v52);
        if (Strong)
        {
          v20 = (id)Strong;
          v54 = *(void **)(Strong + OBJC_IVAR____TtC15audioaccessoryd11DeviceStore_clientQueue);
          v55 = swift_allocObject(&unk_1001EA5F8, 32, 7);
          *(_QWORD *)(v55 + 16) = v51;
          *(_QWORD *)(v55 + 24) = v20;
          aBlock[4] = sub_100105CDC;
          v182 = v55;
          aBlock[0] = _NSConcreteStackBlock;
          aBlock[1] = 1107296256;
          aBlock[2] = sub_1000E6A24;
          aBlock[3] = &unk_1001EA610;
          v56 = _Block_copy(aBlock);
          v57 = v51;
          v58 = v54;
          v59 = swift_unknownObjectRetain(v20);
          v174 = v45;
          v60 = v159;
          static DispatchQoS.unspecified.getter(v59);
          v180 = _swiftEmptyArrayStorage;
          v61 = sub_1000A0940((unint64_t *)&qword_100211920, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
          v173 = v51;
          v62 = sub_1000A0980(&qword_100211D00);
          v63 = sub_1000AAD14((unint64_t *)&qword_100211930, &qword_100211D00, (uint64_t)&protocol conformance descriptor for [A]);
          v19 = (_UNKNOWN **)a2;
          v64 = v162;
          v65 = v21;
          v66 = v164;
          dispatch thunk of SetAlgebra.init<A>(_:)(&v180, v62, v63, v164, v61);
          OS_dispatch_queue.async(group:qos:flags:execute:)(0, v60, v64, v56);
          _Block_release(v56);

          v67 = v64;
          a2 = (uint64_t)v19;
          v68 = v66;
          v21 = v65;
          v51 = v173;
          (*(void (**)(char *, NSString *))(v163 + 8))(v67, v68);
          v69 = v60;
          v45 = v174;
          (*(void (**)(char *, uint64_t))(v160 + 8))(v69, v161);
          v70 = v182;
          swift_unknownObjectRelease(v20);
          Strong = swift_release(v70);
        }
        if ((v177 & 1) == 0)
        {
          v71 = static os_log_type_t.default.getter(Strong);
          os_log(_:dso:log:_:_:)(v71, &_mh_execute_header, qword_100218DD8, "CloudSync: Re-Setup Zones", 25, 2, _swiftEmptyArrayStorage);
          sub_1000F08D8();
        }

        if (v176 == a2)
        {
          swift_bridgeObjectRelease(v21);
          v163 = 0;
          v42 = v169;
          v21 = v165;
          goto LABEL_32;
        }
        ++v45;
        v46 = 1;
      }
LABEL_69:
      __break(1u);
      goto LABEL_70;
    }
    swift_bridgeObjectRelease(v21);
    swift_beginAccess(v39 + 16, v178, 0, 0);
    v88 = *v43;
    swift_retain(v44);
    v89 = swift_bridgeObjectRetain(v88);
    v90 = sub_100101754(v89, v44);
    v163 = 0;
    swift_bridgeObjectRelease(v88);
    v91 = swift_release(v44);
    v21 = (uint64_t)v43;
    if ((v90 & 1) == 0)
    {
      v92 = static os_log_type_t.default.getter(v91);
      os_log(_:dso:log:_:_:)(v92, &_mh_execute_header, qword_100218DD8, "CloudSync: New Account Setup Zones", 34, 2, _swiftEmptyArrayStorage);
      sub_1000F08D8();
    }
LABEL_32:
    v167 = a9;
    v93 = *(_QWORD *)(v156 + *(int *)(v155 + 32));
    v174 = *(_QWORD *)(v93 + 16);
    if (!v174)
      break;
    v173 = (char *)(v93 + 32);
    swift_bridgeObjectRetain(v93);
    swift_beginAccess(v21, aBlock, 0, 0);
    v94 = 0;
    v164 = CKCurrentUserDefaultName;
    v166 = xmmword_100184870;
    v168 = v93;
    while (v94 < *(_QWORD *)(v93 + 16))
    {
      v176 = v94;
      v112 = (uint64_t *)&v173[16 * v94];
      v113 = *v112;
      v114 = (_UNKNOWN **)v112[1];
      v115 = *(_QWORD *)v21;
      if (*(_QWORD *)v21 >> 62)
      {
        if (v115 < 0)
          a2 = *(_QWORD *)v21;
        else
          a2 = v115 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain_n(*(_QWORD *)v21, 2);
        swift_bridgeObjectRetain(v114);
        v116 = _CocoaArrayWrapper.endIndex.getter(a2);
        if (v116)
        {
LABEL_41:
          v177 = v115 & 0xC000000000000001;
          v21 = 4;
          while (1)
          {
            v19 = (_UNKNOWN **)(v21 - 4);
            v117 = v177
                 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v21 - 4, v115)
                 : *(id *)(v115 + 8 * v21);
            v20 = v117;
            v118 = v21 - 3;
            if (__OFADD__(v19, 1))
              break;
            v119 = v114;
            v120 = v113;
            v121 = objc_msgSend(v117, "zoneName");
            a2 = static String._unconditionallyBridgeFromObjectiveC(_:)(v121);
            v19 = v122;

            v113 = v120;
            v114 = v119;
            if (a2 == v113 && v19 == v119)
            {
              swift_bridgeObjectRelease_n(v115, 2);

              v115 = (uint64_t)v119;
LABEL_58:
              swift_bridgeObjectRelease(v115);
              swift_bridgeObjectRelease(v119);
              v42 = v169;
              v21 = v165;
              goto LABEL_37;
            }
            a2 = _stringCompareWithSmolCheck(_:_:expecting:)(a2, v19, v113, v119, 0);

            swift_bridgeObjectRelease(v19);
            if ((a2 & 1) != 0)
            {
              swift_bridgeObjectRelease(v115);
              goto LABEL_58;
            }
            ++v21;
            if (v118 == v116)
              goto LABEL_34;
          }
          __break(1u);
          goto LABEL_69;
        }
      }
      else
      {
        v116 = *(_QWORD *)((v115 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain_n(*(_QWORD *)v21, 2);
        swift_bridgeObjectRetain(v114);
        if (v116)
          goto LABEL_41;
      }
LABEL_34:
      swift_bridgeObjectRelease_n(v115, 2);
      sub_1000AB31C(0, (unint64_t *)&unk_100210850, CKRecordZoneID_ptr);
      v95 = static String._unconditionallyBridgeFromObjectiveC(_:)(v164);
      v96 = v113;
      v98 = v97;
      swift_bridgeObjectRetain(v114);
      v99._countAndFlagsBits = v96;
      v99._object = v114;
      v100._countAndFlagsBits = v95;
      v100._object = v98;
      v101.super.isa = CKRecordZoneID.init(zoneName:ownerName:)(v99, v100).super.isa;
      v102 = v158;
      v103 = (uint64_t)v157;
      v104 = v172;
      (*(void (**)(char *, uint64_t, uint64_t))(v158 + 16))(v157, v156 + *(int *)(v155 + 28), v172);
      v105 = objc_msgSend(v167, "scope");
      v106 = (uint64_t)v171;
      sub_1000E1E20(v103, (uint64_t)v105, v101.super.isa);
      v20 = *(id *)(v102 + 8);
      ((void (*)(uint64_t, uint64_t))v20)(v103, v104);
      v107 = (void *)sub_1000E204C(v106);

      if (v107)
      {
        v109 = static os_log_type_t.default.getter(v108);
        a2 = qword_100218DD8;
        v110 = swift_allocObject(v175, 72, 7);
        *(_OWORD *)(v110 + 16) = v166;
        v111 = v154;
        *(_QWORD *)(v110 + 56) = &type metadata for String;
        *(_QWORD *)(v110 + 64) = v111;
        *(_QWORD *)(v110 + 32) = v96;
        *(_QWORD *)(v110 + 40) = v114;
        os_log(_:dso:log:_:_:)(v109, &_mh_execute_header, a2, "CloudSync: Skip fetch operation for unchanged zone ID: %@ with existing token", 77, 2, v110);

        swift_bridgeObjectRelease(v110);
        v42 = v169;
        v21 = v165;
      }
      else
      {
        sub_1000F08D8();
        v125 = static os_log_type_t.default.getter(v124);
        a2 = qword_100218DD8;
        v126 = swift_allocObject(v175, 72, 7);
        *(_OWORD *)(v126 + 16) = v166;
        v127 = v154;
        *(_QWORD *)(v126 + 56) = &type metadata for String;
        *(_QWORD *)(v126 + 64) = v127;
        *(_QWORD *)(v126 + 32) = v96;
        *(_QWORD *)(v126 + 40) = v114;
        os_log(_:dso:log:_:_:)(v125, &_mh_execute_header, a2, "CloudSync: Adding fetch operation for new zone: %@", 50, 2, v126);
        swift_bridgeObjectRelease(v126);
        v21 = v165;
        swift_beginAccess(v165, &v180, 33, 0);
        v128 = v101.super.isa;
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v128);
        v130 = *(_QWORD *)((*(_QWORD *)v21 & 0xFFFFFFFFFFFFFF8) + 0x10);
        v129 = *(_QWORD *)((*(_QWORD *)v21 & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v130 >= v129 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v129 > 1, v130 + 1, 1);
        v131 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v130, v128);
        specialized Array._endMutation()(v131);
        swift_endAccess(&v180);

        v42 = v169;
      }
      ((void (*)(char *, uint64_t))v20)(v171, v172);
LABEL_37:
      v93 = v168;
      v94 = v176 + 1;
      if (v176 + 1 == v174)
      {
        swift_bridgeObjectRelease(v168);
        goto LABEL_65;
      }
    }
LABEL_70:
    __break(1u);
LABEL_71:
    __break(1u);
LABEL_72:
    swift_once(&qword_1002101D0, sub_1001686F0);
  }
LABEL_65:
  swift_beginAccess(v21, &v180, 0, 0);
  v132 = *(_QWORD *)v21;
  if (*(_QWORD *)v21 >> 62)
  {
    if (v132 < 0)
      v143 = *(_QWORD *)v21;
    else
      v143 = v132 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*(_QWORD *)v21);
    v144 = _CocoaArrayWrapper.endIndex.getter(v143);
    swift_bridgeObjectRelease(v132);
    if (v144)
      goto LABEL_67;
  }
  else if (*(_QWORD *)((v132 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_67:
    swift_beginAccess(v21, v179, 0, 0);
    v133 = *(_QWORD *)v21;
    v134 = (_QWORD *)swift_allocObject(&unk_1001EA648, 56, 7);
    v135 = v170;
    v136 = v167;
    v134[2] = v170;
    v134[3] = v136;
    v137 = v150;
    v134[4] = v42;
    v134[5] = v137;
    v138 = v152;
    v134[6] = v152;
    v139 = v151;
    v140 = v148;
    sub_100105574(v151, v148, 0);
    swift_retain(v135);
    swift_bridgeObjectRetain(v133);
    v141 = v136;
    swift_retain(v138);
    sub_1000EE710(v141, v149, v133, (uint64_t)sub_100105560, (uint64_t)v134);
    sub_1001054E8(v139, v140, 0);
    swift_bridgeObjectRelease(v133);
    swift_release(v134);
    return;
  }
  v145 = v151;
  v146 = v148;
  sub_100105574(v151, v148, 0);
  sub_1000F7490(v167, v145);
  sub_1001054E8(v145, v146, 0);
  v150(0, 0);
  v83 = v145;
  v84 = v146;
LABEL_82:
  v85 = 0;
LABEL_83:
  sub_1001054E8(v83, v84, v85);
}

uint64_t sub_1000EE544(uint64_t a1, char a2, uint64_t a3, void *a4, void *a5, uint64_t (*a6)(uint64_t, uint64_t))
{
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;

  v8 = a2 & 1;
  if ((a2 & 1) != 0)
  {
    v12 = swift_errorRetain(a1);
    v13 = static os_log_type_t.error.getter(v12);
    if (qword_1002101D0 != -1)
      swift_once(&qword_1002101D0, sub_1001686F0);
    v14 = qword_100218DD8;
    v15 = sub_1000A0980((uint64_t *)&unk_1002103C0);
    v16 = swift_allocObject(v15, 72, 7);
    *(_OWORD *)(v16 + 16) = xmmword_100184870;
    v22 = a1;
    swift_errorRetain(a1);
    v17 = sub_1000A0980(&qword_100210710);
    v18 = String.init<A>(describing:)(&v22, v17);
    v20 = v19;
    *(_QWORD *)(v16 + 56) = &type metadata for String;
    *(_QWORD *)(v16 + 64) = sub_1000A0DF4();
    *(_QWORD *)(v16 + 32) = v18;
    *(_QWORD *)(v16 + 40) = v20;
    os_log(_:dso:log:_:_:)(v13, &_mh_execute_header, v14, "CloudSync: Database Error from fetchZoneChanges: %@", 51, 2, v16);
    swift_bridgeObjectRelease(v16);
    sub_100104C94(a1, 1);
  }
  else
  {
    v11 = static os_log_type_t.default.getter(a1);
    if (qword_1002101D0 != -1)
      swift_once(&qword_1002101D0, sub_1001686F0);
    os_log(_:dso:log:_:_:)(v11, &_mh_execute_header, qword_100218DD8, "CloudSync: Database fetchZoneChanges succeeded", 46, 2, _swiftEmptyArrayStorage);
    sub_1000F7490(a4, a5);
  }
  return a6(a1, v8);
}

uint64_t sub_1000EE710(void *a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE v29[4];
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD aBlock[5];
  uint64_t v39;

  v32 = a4;
  v33 = a5;
  v30 = a2 & 1;
  v7 = type metadata accessor for DispatchWorkItemFlags(0);
  v36 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v9 = &v29[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = type metadata accessor for DispatchQoS(0);
  v34 = *(_QWORD *)(v10 - 8);
  v35 = v10;
  v11 = __chkstk_darwin(v10);
  v13 = &v29[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v14 = type metadata accessor for DispatchQoS.QoSClass(0, v11);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = &v29[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1000AB31C(0, (unint64_t *)&qword_1002119F0, OS_dispatch_queue_ptr);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v15 + 104))(v17, enum case for DispatchQoS.QoSClass.default(_:), v14);
  v18 = (void *)static OS_dispatch_queue.global(qos:)(v17);
  (*(void (**)(_BYTE *, uint64_t))(v15 + 8))(v17, v14);
  v19 = swift_allocObject(&unk_1001EA378, 64, 7);
  v20 = v31;
  *(_QWORD *)(v19 + 16) = a3;
  *(_QWORD *)(v19 + 24) = v20;
  *(_QWORD *)(v19 + 32) = a1;
  *(_BYTE *)(v19 + 40) = v30;
  v21 = v33;
  *(_QWORD *)(v19 + 48) = v32;
  *(_QWORD *)(v19 + 56) = v21;
  aBlock[4] = sub_10010526C;
  v39 = v19;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000E6A24;
  aBlock[3] = &unk_1001EA390;
  v22 = _Block_copy(aBlock);
  swift_bridgeObjectRetain(a3);
  swift_retain(v20);
  v23 = a1;
  v24 = swift_retain(v21);
  static DispatchQoS.unspecified.getter(v24);
  v37 = _swiftEmptyArrayStorage;
  v25 = sub_1000A0940((unint64_t *)&qword_100211920, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v26 = sub_1000A0980(&qword_100211D00);
  v27 = sub_1000AAD14((unint64_t *)&qword_100211930, &qword_100211D00, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v37, v26, v27, v7, v25);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v13, v9, v22);
  _Block_release(v22);

  (*(void (**)(_BYTE *, uint64_t))(v36 + 8))(v9, v7);
  (*(void (**)(_BYTE *, uint64_t))(v34 + 8))(v13, v35);
  return swift_release(v39);
}

id sub_1000EE9C8(uint64_t a1, char *a2, void *a3, char a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id result;
  uint64_t v18;
  uint64_t v19;
  Swift::Int v20;
  _QWORD *v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t);
  unint64_t v24;
  char *v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t);
  void *v31;
  char *v32;
  id v33;
  uint64_t v34;
  char *v35;
  id v36;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v38;
  uint64_t v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  id v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  CKFetchRecordZoneChangesOperation v58;
  char *v59;
  void *v60;
  void *v61;
  uint64_t v62;
  char v63;
  id v64;
  objc_class *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  NSObject *v69;
  CKFetchRecordZoneChangesOperation *v70;
  uint64_t v71;
  void *v72;
  uint64_t v73;
  objc_class *v74;
  Class v75;
  uint64_t v76;
  _BYTE v77[4];
  int v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  __int128 v82;
  uint64_t v83;
  uint64_t v84;
  __int128 v85;
  uint64_t v86;
  _BYTE *v87;
  unint64_t v88;
  char *v89;
  _BYTE *v90;
  uint64_t v91;
  uint64_t v92;
  id v93;
  unsigned int v94;
  uint64_t v95;
  Swift::Int v96;
  void (*v97)(uint64_t, uint64_t);
  id v98;
  _QWORD aBlock[5];
  uint64_t v100;
  Swift::OpaquePointer_optional v101;
  Swift::OpaquePointer_optional v102;

  v81 = a6;
  v80 = a5;
  LOBYTE(v6) = a4;
  v93 = a3;
  v84 = type metadata accessor for URL(0);
  v91 = *(_QWORD *)(v84 - 8);
  __chkstk_darwin(v84);
  v90 = &v77[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v10);
  v12 = &v77[-v11];
  v14 = static os_log_type_t.default.getter(v13);
  if (qword_1002101D0 != -1)
LABEL_29:
    swift_once(&qword_1002101D0, sub_1001686F0);
  v15 = qword_100218DD8;
  v92 = sub_1000A0980((uint64_t *)&unk_1002103C0);
  v16 = swift_allocObject(v92, 72, 7);
  v82 = xmmword_100184870;
  *(_OWORD *)(v16 + 16) = xmmword_100184870;
  *(_QWORD *)(v16 + 56) = sub_1000A0980(&qword_100211AB8);
  *(_QWORD *)(v16 + 64) = sub_1000AAD14(&qword_100211AC0, &qword_100211AB8, (uint64_t)&protocol conformance descriptor for [A]);
  *(_QWORD *)(v16 + 32) = a1;
  swift_bridgeObjectRetain(a1);
  os_log(_:dso:log:_:_:)(v14, &_mh_execute_header, v15, "zoneIDs changed: %@", 19, 2, v16);
  result = (id)swift_bridgeObjectRelease(v16);
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v76 = a1;
    else
      v76 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v18 = _CocoaArrayWrapper.endIndex.getter(v76);
    result = (id)swift_bridgeObjectRelease(a1);
  }
  else
  {
    v18 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v19 = v84;
  if (v18)
  {
    if (v18 < 1)
    {
      __break(1u);
LABEL_35:
      __break(1u);
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    v78 = v6 & 1;
    v79 = a2;
    v89 = &a2[OBJC_IVAR____TtC15audioaccessoryd16CloudCoordinator_configuration];
    v88 = a1 & 0xC000000000000001;
    swift_bridgeObjectRetain(a1);
    v6 = 0;
    v20 = (Swift::Int)_swiftEmptyDictionarySingleton;
    v85 = xmmword_1001858F0;
    v86 = v18;
    v87 = v12;
    v83 = a1;
    while (1)
    {
      if (v88)
        v25 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)(v6, a1);
      else
        v25 = (char *)*(id *)(a1 + 8 * v6 + 32);
      a2 = v25;
      v26 = objc_msgSend(objc_allocWithZone((Class)CKFetchRecordZoneChangesConfiguration), "init");
      v27 = type metadata accessor for CloudCoordinatorConfiguration(0);
      v28 = (uint64_t)v90;
      v29 = v91;
      (*(void (**)(_BYTE *, char *, uint64_t))(v91 + 16))(v90, &v89[*(int *)(v27 + 28)], v19);
      sub_1000E1E20(v28, (uint64_t)objc_msgSend(v93, "scope"), a2);
      v30 = *(void (**)(uint64_t, uint64_t))(v29 + 8);
      v30(v28, v19);
      v98 = (id)sub_1000E204C((uint64_t)v12);
      v31 = (void *)sub_1000E204C((uint64_t)v12);
      objc_msgSend(v26, "setPreviousServerChangeToken:", v31);

      v97 = v30;
      if ((v20 & 0xC000000000000001) != 0)
      {
        if (v20 < 0)
          v14 = v20;
        else
          v14 = v20 & 0xFFFFFFFFFFFFFF8;
        v32 = a2;
        v33 = v26;
        v34 = __CocoaDictionary.count.getter(v14);
        if (__OFADD__(v34, 1))
        {
          __break(1u);
          goto LABEL_29;
        }
        v20 = sub_1000FEF18(v14, v34 + 1);
      }
      else
      {
        v35 = a2;
        v36 = v26;
      }
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v20);
      aBlock[0] = v20;
      sub_1000AA894((uint64_t)v26, a2, isUniquelyReferenced_nonNull_native);
      v96 = aBlock[0];

      v38 = swift_bridgeObjectRelease(0x8000000000000000);
      v94 = static os_log_type_t.default.getter(v38);
      v95 = qword_100218DD8;
      v39 = swift_allocObject(v92, 112, 7);
      *(_OWORD *)(v39 + 16) = v85;
      v40 = objc_msgSend(a2, "zoneName");
      v41 = static String._unconditionallyBridgeFromObjectiveC(_:)(v40);
      v43 = v42;

      *(_QWORD *)(v39 + 56) = &type metadata for String;
      v44 = sub_1000A0DF4();
      *(_QWORD *)(v39 + 64) = v44;
      *(_QWORD *)(v39 + 32) = v41;
      *(_QWORD *)(v39 + 40) = v43;
      if (v98)
      {
        v45 = objc_msgSend(v98, "data");
        v46 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v45);
        v48 = v47;

        Data.hexString.getter(v46, v48);
        v50 = v49;
        v24 = v51;
        sub_1000A103C(v46, v48);
        v21 = (_QWORD *)(v39 + 72);
        *(_QWORD *)(v39 + 96) = &type metadata for String;
        *(_QWORD *)(v39 + 104) = v44;
        if (v24)
        {
          *v21 = v50;
          a1 = v83;
          v19 = v84;
          v22 = v86;
          v12 = v87;
          v23 = v97;
          goto LABEL_9;
        }
        a1 = v83;
        v19 = v84;
      }
      else
      {
        v98 = 0;
        v21 = (_QWORD *)(v39 + 72);
        *(_QWORD *)(v39 + 96) = &type metadata for String;
        *(_QWORD *)(v39 + 104) = v44;
      }
      v22 = v86;
      v12 = v87;
      v23 = v97;
      *v21 = 7104878;
      v24 = 0xE300000000000000;
LABEL_9:
      ++v6;
      *(_QWORD *)(v39 + 80) = v24;
      os_log(_:dso:log:_:_:)(v94, &_mh_execute_header, v95, "Old change token for %@: %@", 27, 2, v39);

      swift_bridgeObjectRelease(v39);
      v23((uint64_t)v12, v19);
      v20 = v96;
      if (v22 == v6)
      {
        v52 = swift_bridgeObjectRelease(a1);
        v53 = static os_log_type_t.default.getter(v52);
        v54 = qword_100218DD8;
        v55 = swift_allocObject(v92, 72, 7);
        *(_OWORD *)(v55 + 16) = v82;
        *(_QWORD *)(v55 + 56) = sub_1000A0980(&qword_100211AC8);
        *(_QWORD *)(v55 + 64) = sub_1000AAD14(&qword_100211AD0, &qword_100211AC8, (uint64_t)&protocol conformance descriptor for [A : B]);
        *(_QWORD *)(v55 + 32) = v20;
        swift_bridgeObjectRetain(v20);
        os_log(_:dso:log:_:_:)(v53, &_mh_execute_header, v54, "optionsByRecordZoneID: %@", 25, 2, v55);
        swift_bridgeObjectRelease(v55);
        v56 = swift_allocObject(&unk_1001EA3C8, 24, 7);
        *(_QWORD *)(v56 + 16) = _swiftEmptyArrayStorage;
        v57 = swift_allocObject(&unk_1001E94F0, 24, 7);
        *(_QWORD *)(v57 + 16) = _swiftEmptyArrayStorage;
        sub_1000AB31C(0, &qword_100211AD8, CKFetchRecordZoneChangesOperation_ptr);
        swift_bridgeObjectRetain(a1);
        swift_bridgeObjectRetain(v20);
        v101.value._rawValue = (void *)a1;
        v101.is_nil = v20;
        v58.super.super.super.super.isa = CKFetchRecordZoneChangesOperation.init(recordZoneIDs:configurationsByRecordZoneID:)(v101, v102).super.super.super.super.isa;
        v59 = v79;
        -[objc_class setCallbackQueue:](v58.super.super.super.super.isa, "setCallbackQueue:", *((_QWORD *)v79 + 10));
        result = -[objc_class configuration](v58.super.super.super.super.isa, "configuration");
        if (!result)
          goto LABEL_36;
        v60 = result;
        objc_msgSend(result, "setAutomaticallyRetryNetworkFailures:", 0);

        result = -[objc_class configuration](v58.super.super.super.super.isa, "configuration");
        if (result)
        {
          v61 = result;
          swift_bridgeObjectRelease(v20);
          objc_msgSend(v61, "setDiscretionaryNetworkBehavior:", 0);

          -[objc_class setFetchAllChanges:](v58.super.super.super.super.isa, "setFetchAllChanges:", 1);
          swift_retain(v57);
          CKFetchRecordZoneChangesOperation.recordWasChangedBlock.setter(sub_100105280, v57);
          swift_retain(v56);
          CKFetchRecordZoneChangesOperation.recordWithIDWasDeletedBlock.setter(sub_10010528C, v56);
          v62 = swift_allocObject(&unk_1001EA3F0, 56, 7);
          v63 = v78;
          *(_BYTE *)(v62 + 16) = v78;
          *(_QWORD *)(v62 + 24) = v59;
          *(_QWORD *)(v62 + 32) = v57;
          v64 = v93;
          *(_QWORD *)(v62 + 40) = v56;
          *(_QWORD *)(v62 + 48) = v64;
          swift_retain(v57);
          swift_retain(v56);
          swift_retain(v59);
          v65 = (objc_class *)v64;
          CKFetchRecordZoneChangesOperation.recordZoneFetchResultBlock.setter(sub_1001052D0, v62);
          v66 = swift_allocObject(&unk_1001EA418, 56, 7);
          *(_BYTE *)(v66 + 16) = v63;
          *(_QWORD *)(v66 + 24) = a1;
          *(_QWORD *)(v66 + 32) = v59;
          *(_QWORD *)(v66 + 40) = v80;
          v67 = a1;
          v68 = v81;
          *(_QWORD *)(v66 + 48) = v81;
          swift_bridgeObjectRetain(v67);
          swift_retain(v59);
          swift_retain(v68);
          CKFetchRecordZoneChangesOperation.fetchRecordZoneChangesResultBlock.setter(sub_100105368, v66);
          v69 = *((_QWORD *)v59 + 8);
          v70 = (CKFetchRecordZoneChangesOperation *)swift_allocObject(&unk_1001EA440, 32, 7);
          v70[2].super.super.super.super.isa = v58.super.super.super.super.isa;
          v70[3].super.super.super.super.isa = v65;
          v71 = swift_allocObject(&unk_1001EA468, 32, 7);
          *(_QWORD *)(v71 + 16) = sub_1001053A8;
          *(_QWORD *)(v71 + 24) = v70;
          aBlock[4] = sub_100105CD8;
          v100 = v71;
          aBlock[0] = _NSConcreteStackBlock;
          aBlock[1] = 1107296256;
          aBlock[2] = sub_1000E6A70;
          aBlock[3] = &unk_1001EA480;
          v72 = _Block_copy(aBlock);
          v73 = v100;
          v74 = v65;
          v75 = v58.super.super.super.super.isa;
          swift_retain(v71);
          swift_release(v73);
          dispatch_sync(v69, v72);

          _Block_release(v72);
          LOBYTE(v75) = swift_isEscapingClosureAtFileLocation(v71, "", 123, 727, 34, 1);
          swift_release(v70);
          swift_release(v56);
          swift_release(v57);
          result = (id)swift_release(v71);
          if ((v75 & 1) != 0)
            goto LABEL_35;
          return result;
        }
LABEL_37:
        __break(1u);
        return result;
      }
    }
  }
  return result;
}

void sub_1000EF2AC(void *a1, void *a2, char a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  id v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD v52[3];

  v6 = static os_log_type_t.default.getter(a1);
  if (qword_1002101D0 != -1)
    swift_once(&qword_1002101D0, sub_1001686F0);
  v7 = qword_100218DD8;
  v8 = sub_1000A0980((uint64_t *)&unk_1002103C0);
  v9 = swift_allocObject(v8, 72, 7);
  *(_OWORD *)(v9 + 16) = xmmword_100184870;
  v10 = a1;
  v11 = objc_msgSend(v10, "description");
  v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
  v14 = v13;

  *(_QWORD *)(v9 + 56) = &type metadata for String;
  v15 = sub_1000A0DF4();
  *(_QWORD *)(v9 + 64) = v15;
  *(_QWORD *)(v9 + 32) = v12;
  *(_QWORD *)(v9 + 40) = v14;
  os_log(_:dso:log:_:_:)(v6, &_mh_execute_header, v7, "RecordID changed: %@", 20, 2, v9);
  swift_bridgeObjectRelease(v9);
  v16 = a3;
  if ((a3 & 1) != 0)
  {
    v17 = swift_errorRetain(a2);
    v18 = static os_log_type_t.error.getter(v17);
    v19 = qword_100218DD8;
    v20 = swift_allocObject(v8, 112, 7);
    *(_OWORD *)(v20 + 16) = xmmword_1001858F0;
    v21 = v10;
    v22 = objc_msgSend(v21, "description");
    v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
    v25 = v24;

    *(_QWORD *)(v20 + 56) = &type metadata for String;
    *(_QWORD *)(v20 + 64) = v15;
    *(_QWORD *)(v20 + 32) = v23;
    *(_QWORD *)(v20 + 40) = v25;
    v26 = a2;
    v52[0] = a2;
    swift_errorRetain(a2);
    v27 = sub_1000A0980(&qword_100210710);
    v28 = String.init<A>(describing:)(v52, v27);
    *(_QWORD *)(v20 + 96) = &type metadata for String;
    *(_QWORD *)(v20 + 104) = v15;
    *(_QWORD *)(v20 + 72) = v28;
    *(_QWORD *)(v20 + 80) = v29;
    os_log(_:dso:log:_:_:)(v18, &_mh_execute_header, v19, "%@ failed to be fetched: %@", 27, 2, v20, a4);
  }
  else
  {
    swift_beginAccess(a4 + 16, v52, 33, 0);
    v30 = a2;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v30);
    v32 = *(_QWORD *)((*(_QWORD *)(a4 + 16) & 0xFFFFFFFFFFFFFF8) + 0x10);
    v31 = *(_QWORD *)((*(_QWORD *)(a4 + 16) & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v32 >= v31 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v31 > 1, v32 + 1, 1);
    v33 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v32, v30);
    specialized Array._endMutation()(v33);
    v34 = swift_endAccess(v52);
    v35 = IsAppleInternalBuild(v34);
    if ((_DWORD)v35)
      v36 = static os_log_type_t.default.getter(v35);
    else
      v36 = static os_log_type_t.debug.getter(v35);
    LODWORD(a4) = v36;
    v37 = qword_100218DD8;
    v20 = swift_allocObject(v8, 112, 7);
    *(_OWORD *)(v20 + 16) = xmmword_1001858F0;
    v38 = objc_msgSend(v10, "recordName");
    v39 = static String._unconditionallyBridgeFromObjectiveC(_:)(v38);
    v41 = v40;

    *(_QWORD *)(v20 + 56) = &type metadata for String;
    *(_QWORD *)(v20 + 64) = v15;
    *(_QWORD *)(v20 + 32) = v39;
    *(_QWORD *)(v20 + 40) = v41;
    v42 = objc_msgSend(v30, "encryptedValues");
    v43 = objc_msgSend(v42, "allKeys");
    swift_unknownObjectRelease(v42);
    v44 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v43, &type metadata for String);

    v26 = a2;
    sub_1000FEC54(a2, 0);
    v45 = sub_100101418(v44, v30);
    sub_100104E50(a2, 0);
    swift_bridgeObjectRelease(v44);
    v46 = sub_1000A0980(&qword_100210400);
    v47 = Array.description.getter(v45, v46);
    v49 = v48;
    swift_bridgeObjectRelease(v45);
    *(_QWORD *)(v20 + 96) = &type metadata for String;
    *(_QWORD *)(v20 + 104) = v15;
    *(_QWORD *)(v20 + 72) = v47;
    *(_QWORD *)(v20 + 80) = v49;
    os_log(_:dso:log:_:_:)(a4, &_mh_execute_header, v37, "CKRecord fetched: %@ - %@", 25, 2, v20, a4);
  }
  swift_bridgeObjectRelease(v20);
  sub_100104E50(v26, v16 & 1);
}

uint64_t sub_1000EF698(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD **v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  _QWORD *v13;
  id v14;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  _BYTE v20[24];

  v7 = (_QWORD **)(a4 + 16);
  v8 = static os_log_type_t.debug.getter(a1);
  if (qword_1002101D0 != -1)
    swift_once(&qword_1002101D0, sub_1001686F0);
  v9 = qword_100218DD8;
  v10 = sub_1000A0980((uint64_t *)&unk_1002103C0);
  v11 = swift_allocObject(v10, 72, 7);
  *(_OWORD *)(v11 + 16) = xmmword_100184870;
  *(_QWORD *)(v11 + 56) = sub_1000AB31C(0, &qword_1002111C0, CKRecordID_ptr);
  *(_QWORD *)(v11 + 64) = sub_100104B2C(&qword_100212270, &qword_1002111C0, CKRecordID_ptr, (uint64_t)&protocol conformance descriptor for NSObject);
  *(_QWORD *)(v11 + 32) = a1;
  v12 = a1;
  os_log(_:dso:log:_:_:)(v8, &_mh_execute_header, v9, "Record deleted: %@", 18, 2, v11);
  swift_bridgeObjectRelease(v11);
  swift_beginAccess(v7, v20, 33, 0);
  v13 = *v7;
  v14 = v12;
  swift_bridgeObjectRetain(a3);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v13);
  *v7 = v13;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v13 = sub_10016978C(0, v13[2] + 1, 1, v13);
    *v7 = v13;
  }
  v17 = v13[2];
  v16 = v13[3];
  if (v17 >= v16 >> 1)
  {
    v13 = sub_10016978C((_QWORD *)(v16 > 1), v17 + 1, 1, v13);
    *v7 = v13;
  }
  v13[2] = v17 + 1;
  v18 = &v13[3 * v17];
  v18[4] = v14;
  v18[5] = a2;
  v18[6] = a3;
  return swift_endAccess(v20);
}

void sub_1000EF874(void *a1, void *a2, uint64_t a3, unint64_t a4, unsigned int a5, char a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  void *v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t Strong;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  id v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  id v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v75;
  unsigned int v77;
  char v78;
  void *v80;
  _BYTE v83[8];
  uint64_t v84;
  uint64_t v85;
  _BYTE v86[8];
  _BYTE v87[24];
  _BYTE v88[24];
  _BYTE v89[24];
  _BYTE v90[32];
  _BYTE v91[24];
  _BYTE v92[24];
  _BYTE v93[16];

  v11 = a6 & 1;
  v12 = static os_log_type_t.default.getter(a1);
  if (qword_1002101D0 != -1)
    swift_once(&qword_1002101D0, sub_1001686F0);
  v13 = qword_100218DD8;
  v14 = sub_1000A0980((uint64_t *)&unk_1002103C0);
  v15 = swift_allocObject(v14, 112, 7);
  *(_OWORD *)(v15 + 16) = xmmword_1001858F0;
  v93[0] = v11;
  v16 = String.init<A>(describing:)(v93, &type metadata for CloudCoordinator.DatabaseToken);
  v18 = v17;
  *(_QWORD *)(v15 + 56) = &type metadata for String;
  v78 = v11;
  v19 = sub_1000A0DF4();
  *(_QWORD *)(v15 + 64) = v19;
  *(_QWORD *)(v15 + 32) = v16;
  *(_QWORD *)(v15 + 40) = v18;
  v20 = objc_msgSend(a1, "zoneName");
  v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
  v23 = v22;

  *(_QWORD *)(v15 + 96) = &type metadata for String;
  *(_QWORD *)(v15 + 104) = v19;
  *(_QWORD *)(v15 + 72) = v21;
  *(_QWORD *)(v15 + 80) = v23;
  os_log(_:dso:log:_:_:)(v12, &_mh_execute_header, v13, "record zone fetch complete, database, %@, zone, %@", 50, 2, v15);
  swift_bridgeObjectRelease(v15);
  if ((a5 & 0x100) != 0)
  {
    v64 = swift_errorRetain(a2);
    v65 = static os_log_type_t.error.getter(v64);
    v66 = qword_100218DD8;
    v67 = swift_allocObject(v14, 112, 7);
    *(_OWORD *)(v67 + 16) = xmmword_1001858F0;
    v93[0] = v78;
    v68 = String.init<A>(describing:)(v93, &type metadata for CloudCoordinator.DatabaseToken);
    *(_QWORD *)(v67 + 56) = &type metadata for String;
    *(_QWORD *)(v67 + 64) = v19;
    *(_QWORD *)(v67 + 32) = v68;
    *(_QWORD *)(v67 + 40) = v69;
    swift_getErrorValue(a2, v86, v83);
    v70 = Error.localizedDescription.getter(v84, v85);
    *(_QWORD *)(v67 + 96) = &type metadata for String;
    *(_QWORD *)(v67 + 104) = v19;
    *(_QWORD *)(v67 + 72) = v70;
    *(_QWORD *)(v67 + 80) = v71;
    os_log(_:dso:log:_:_:)(v65, &_mh_execute_header, v66, "Error fetching zone changes for %@ database: %@", 47, 2, v67);
    swift_bridgeObjectRelease(v67);
    sub_1000F2FE4((uint64_t)a2, 1);
    sub_1001053C8(a2, a3, a4, a5, 1);
  }
  else
  {
    v24 = (uint64_t *)(a8 + 16);
    v25 = (uint64_t *)(a9 + 16);
    v26 = a2;
    v77 = static os_log_type_t.default.getter(v26);
    v75 = qword_100218DD8;
    v27 = swift_allocObject(v14, 232, 7);
    *(_OWORD *)(v27 + 16) = xmmword_100187630;
    v93[0] = v78;
    v28 = String.init<A>(describing:)(v93, &type metadata for CloudCoordinator.DatabaseToken);
    *(_QWORD *)(v27 + 56) = &type metadata for String;
    *(_QWORD *)(v27 + 64) = v19;
    *(_QWORD *)(v27 + 32) = v28;
    *(_QWORD *)(v27 + 40) = v29;
    v80 = a1;
    v30 = a1;
    v31 = v26;
    v32 = objc_msgSend(v30, "zoneName");
    v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(v32);
    v35 = v34;

    *(_QWORD *)(v27 + 96) = &type metadata for String;
    *(_QWORD *)(v27 + 104) = v19;
    *(_QWORD *)(v27 + 72) = v33;
    *(_QWORD *)(v27 + 80) = v35;
    v36 = objc_msgSend(v31, "data");
    v37 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v36);
    v39 = v38;

    Data.hexString.getter(v37, v39);
    v41 = v40;
    v43 = v42;
    sub_1000A103C(v37, v39);
    *(_QWORD *)(v27 + 136) = &type metadata for String;
    *(_QWORD *)(v27 + 144) = v19;
    *(_QWORD *)(v27 + 112) = v41;
    *(_QWORD *)(v27 + 120) = v43;
    swift_beginAccess(a8 + 16, v93, 0, 0);
    v44 = *(_QWORD *)(a8 + 16);
    if ((unint64_t)v44 >> 62)
    {
      if (v44 < 0)
        v72 = *v24;
      else
        v72 = v44 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(*v24);
      v45 = _CocoaArrayWrapper.endIndex.getter(v72);
      swift_bridgeObjectRelease(v44);
    }
    else
    {
      v45 = *(_QWORD *)((v44 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    *(_QWORD *)(v27 + 176) = &type metadata for Int;
    *(_QWORD *)(v27 + 184) = &protocol witness table for Int;
    *(_QWORD *)(v27 + 152) = v45;
    swift_beginAccess(v25, v92, 0, 0);
    v46 = *(_QWORD *)(*v25 + 16);
    *(_QWORD *)(v27 + 216) = &type metadata for Int;
    *(_QWORD *)(v27 + 224) = &protocol witness table for Int;
    *(_QWORD *)(v27 + 192) = v46;
    os_log(_:dso:log:_:_:)(v77, &_mh_execute_header, v75, "record zone fetch database, %@, zone, %@, token: %@, records changed: %d, deleted: %d,", 86, 2, v27);
    swift_bridgeObjectRelease(v27);
    v47 = swift_beginAccess(a7 + 120, v91, 0, 0);
    v48 = *(_QWORD *)(a7 + 120);
    __chkstk_darwin(v47);
    v49 = swift_bridgeObjectRetain(v48);
    sub_1001033F8(v49, (void (*)(id, uint64_t (*)(uint64_t), _OWORD *))sub_1001053C0);
    swift_bridgeObjectRelease(v48);
    Strong = swift_unknownObjectWeakLoadStrong(a7 + 24, v50);
    if (Strong)
    {
      v52 = Strong;
      swift_beginAccess(v25, v90, 0, 0);
      v53 = *v25;
      swift_beginAccess(v24, v89, 0, 0);
      v54 = *v24;
      swift_bridgeObjectRetain(v53);
      swift_bridgeObjectRetain(v54);
      sub_100100D2C(a7, v53, v54, v52);
      swift_bridgeObjectRelease(v53);
      swift_bridgeObjectRelease(v54);
      swift_unknownObjectRelease(v52);
    }
    swift_beginAccess(v24, v88, 1, 0);
    v55 = *v24;
    *v24 = (uint64_t)_swiftEmptyArrayStorage;
    swift_bridgeObjectRelease(v55);
    swift_beginAccess(v25, v87, 1, 0);
    v56 = *v25;
    *v25 = (uint64_t)_swiftEmptyArrayStorage;
    swift_bridgeObjectRelease(v56);
    v57 = a7 + OBJC_IVAR____TtC15audioaccessoryd16CloudCoordinator_configuration;
    v58 = *(_QWORD **)(v57 + *(int *)(type metadata accessor for CloudCoordinatorConfiguration(0) + 32));
    swift_bridgeObjectRetain(v58);
    v59 = objc_msgSend(v80, "zoneName");
    v60 = static String._unconditionallyBridgeFromObjectiveC(_:)(v59);
    v62 = v61;

    LOBYTE(v59) = sub_100128CCC(v60, v62, v58);
    swift_bridgeObjectRelease(v58);
    swift_bridgeObjectRelease(v62);
    if ((v59 & 1) != 0)
    {
      v63 = v31;
      sub_1000F772C(a10, v80, a2);

    }
    else
    {

    }
  }
}

void sub_1000EFED4(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;
  id v7;
  uint64_t v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  id v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE v28[32];
  _BYTE v29[24];

  swift_beginAccess(a4, v29, 0, 0);
  v6 = *a4;
  v7 = a1;
  v8 = swift_bridgeObjectRetain(v6);
  v9 = (void *)sub_10010307C(v8, v7);
  swift_bridgeObjectRelease(v6);

  if (v9)
  {
    swift_beginAccess(a4, v28, 33, 0);
    v10 = v7;
    v11 = sub_100103E48(a4, v10);

    v12 = *a4;
    if ((unint64_t)*a4 >> 62)
    {
      if (v12 < 0)
        v27 = *a4;
      else
        v27 = v12 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(*a4);
      v13 = _CocoaArrayWrapper.endIndex.getter(v27);
      swift_bridgeObjectRelease(v12);
      if (v13 >= v11)
      {
LABEL_4:
        sub_100165474(v11, v13);
        v14 = swift_endAccess(v28);
        v11 = static os_log_type_t.default.getter(v14);
        if (qword_1002101D0 == -1)
        {
LABEL_5:
          v15 = qword_100218DD8;
          v16 = sub_1000A0980((uint64_t *)&unk_1002103C0);
          v17 = swift_allocObject(v16, 112, 7);
          *(_OWORD *)(v17 + 16) = xmmword_1001858F0;
          v18 = CKRecord.recordType.getter(v17);
          v20 = v19;
          *(_QWORD *)(v17 + 56) = &type metadata for String;
          v21 = sub_1000A0DF4();
          *(_QWORD *)(v17 + 64) = v21;
          *(_QWORD *)(v17 + 32) = v18;
          *(_QWORD *)(v17 + 40) = v20;
          v22 = v9;
          v23 = objc_msgSend(v22, "description");
          v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
          v26 = v25;

          *(_QWORD *)(v17 + 96) = &type metadata for String;
          *(_QWORD *)(v17 + 104) = v21;
          *(_QWORD *)(v17 + 72) = v24;
          *(_QWORD *)(v17 + 80) = v26;
          os_log(_:dso:log:_:_:)(v11, &_mh_execute_header, v15, "Don't send this record as part of update list as it is in queue for deletion: %@, %@", 84, 2, v17);

          swift_bridgeObjectRelease(v17);
          return;
        }
LABEL_12:
        swift_once(&qword_1002101D0, sub_1001686F0);
        goto LABEL_5;
      }
    }
    else
    {
      v13 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v13 >= v11)
        goto LABEL_4;
    }
    __break(1u);
    goto LABEL_12;
  }
}

uint64_t sub_1000F00F4(uint64_t a1, char a2, char a3, uint64_t a4, uint64_t a5, void (*a6)(uint64_t, uint64_t))
{
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD v34[3];
  _BYTE v35[15];
  char v36;

  v8 = a3 & 1;
  v9 = static os_log_type_t.default.getter(a1);
  if (qword_1002101D0 != -1)
    swift_once(&qword_1002101D0, sub_1001686F0);
  v10 = qword_100218DD8;
  v11 = sub_1000A0980((uint64_t *)&unk_1002103C0);
  v12 = swift_allocObject(v11, 112, 7);
  *(_OWORD *)(v12 + 16) = xmmword_1001858F0;
  v36 = v8;
  v13 = String.init<A>(describing:)(&v36, &type metadata for CloudCoordinator.DatabaseToken);
  v15 = v14;
  *(_QWORD *)(v12 + 56) = &type metadata for String;
  v16 = sub_1000A0DF4();
  *(_QWORD *)(v12 + 64) = v16;
  *(_QWORD *)(v12 + 32) = v13;
  *(_QWORD *)(v12 + 40) = v15;
  *(_QWORD *)(v12 + 96) = sub_1000A0980(&qword_100211AB8);
  *(_QWORD *)(v12 + 104) = sub_1000AAD14(&qword_100211AC0, &qword_100211AB8, (uint64_t)&protocol conformance descriptor for [A]);
  *(_QWORD *)(v12 + 72) = a4;
  swift_bridgeObjectRetain(a4);
  os_log(_:dso:log:_:_:)(v9, &_mh_execute_header, v10, "Fetch record zone changes complete, database, %@, zoneIds, %@", 61, 2, v12);
  v17 = swift_bridgeObjectRelease(v12);
  if ((a2 & 1) != 0)
  {
    v24 = swift_errorRetain(a1);
    v25 = static os_log_type_t.default.getter(v24);
    v26 = qword_100218DD8;
    v27 = swift_allocObject(v11, 112, 7);
    *(_OWORD *)(v27 + 16) = xmmword_1001858F0;
    v36 = v8;
    v28 = String.init<A>(describing:)(&v36, &type metadata for CloudCoordinator.DatabaseToken);
    *(_QWORD *)(v27 + 56) = &type metadata for String;
    *(_QWORD *)(v27 + 64) = v16;
    *(_QWORD *)(v27 + 32) = v28;
    *(_QWORD *)(v27 + 40) = v29;
    swift_getErrorValue(a1, v35, v34);
    v30 = Error.localizedDescription.getter(v34[1], v34[2]);
    *(_QWORD *)(v27 + 96) = &type metadata for String;
    *(_QWORD *)(v27 + 104) = v16;
    *(_QWORD *)(v27 + 72) = v30;
    *(_QWORD *)(v27 + 80) = v31;
    os_log(_:dso:log:_:_:)(v25, &_mh_execute_header, v26, "Error fetching zone changes for %@ database: %@", 47, 2, v27);
    swift_bridgeObjectRelease(v27);
    sub_1000F2FE4(a1, 1);
    swift_errorRetain(a1);
    a6(a1, 1);
    sub_100104C94(a1, 1);
    return sub_100104C94(a1, 1);
  }
  else
  {
    v18 = static os_log_type_t.default.getter(v17);
    v19 = qword_100218DD8;
    v20 = swift_allocObject(v11, 72, 7);
    *(_OWORD *)(v20 + 16) = xmmword_100184870;
    v36 = v8;
    v21 = String.init<A>(describing:)(&v36, &type metadata for CloudCoordinator.DatabaseToken);
    *(_QWORD *)(v20 + 56) = &type metadata for String;
    *(_QWORD *)(v20 + 64) = v16;
    *(_QWORD *)(v20 + 32) = v21;
    *(_QWORD *)(v20 + 40) = v22;
    os_log(_:dso:log:_:_:)(v18, &_mh_execute_header, v19, "Successfully fetched zone changes for database: %@", 50, 2, v20);
    swift_bridgeObjectRelease(v20);
    return ((uint64_t (*)(_QWORD, _QWORD))a6)(0, 0);
  }
}

id sub_1000F03E4(void *a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;

  v4 = static os_log_type_t.default.getter(a1);
  if (qword_1002101D0 != -1)
    swift_once(&qword_1002101D0, sub_1001686F0);
  v5 = qword_100218DD8;
  v6 = sub_1000A0980((uint64_t *)&unk_1002103C0);
  v7 = swift_allocObject(v6, 72, 7);
  *(_OWORD *)(v7 + 16) = xmmword_100184870;
  *(_QWORD *)(v7 + 56) = sub_1000AB31C(0, &qword_100211AD8, CKFetchRecordZoneChangesOperation_ptr);
  *(_QWORD *)(v7 + 64) = sub_100104B2C((unint64_t *)&unk_100211AE0, &qword_100211AD8, CKFetchRecordZoneChangesOperation_ptr, (uint64_t)&protocol conformance descriptor for NSObject);
  *(_QWORD *)(v7 + 32) = a1;
  v8 = a1;
  os_log(_:dso:log:_:_:)(v4, &_mh_execute_header, v5, "Adding Cloud operation %@", 25, 2, v7);
  swift_bridgeObjectRelease(v7);
  return objc_msgSend(a2, "addOperation:", v8);
}

void sub_1000F050C(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  void *v22;
  id v23;
  void *v24;
  Class isa;
  uint64_t v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  _QWORD v43[2];

  v9 = type metadata accessor for Date(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v13 = (char *)&v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(_QWORD *)(v4 + 40))
  {
    switch(a1)
    {
      case 1:
        v35 = static os_log_type_t.default.getter(v11);
        if (qword_1002101D0 != -1)
          swift_once(&qword_1002101D0, sub_1001686F0);
        v36 = qword_100218DD8;
        v37 = "NOT USING PUBLIC DB";
        break;
      case 3:
        v35 = static os_log_type_t.default.getter(v11);
        if (qword_1002101D0 != -1)
          swift_once(&qword_1002101D0, sub_1001686F0);
        v36 = qword_100218DD8;
        v37 = "NOT USING SHARED DB";
        break;
      case 2:
        v31 = sub_1000E7CF8(v11);
        v42 = objc_msgSend(v31, "privateCloudDatabase");

        sub_1000EC83C(v42, 0, a2 & 1, a3, a4);
        return;
      default:
        v40 = static os_log_type_t.error.getter(v11);
        if (qword_1002101D0 != -1)
          swift_once(&qword_1002101D0, sub_1001686F0);
        v36 = qword_100218DD8;
        v37 = "Unknown CKDatabase.Scope!";
        v38 = v40;
        v39 = 25;
        goto LABEL_26;
    }
    v38 = v35;
    v39 = 19;
LABEL_26:
    os_log(_:dso:log:_:_:)(v38, &_mh_execute_header, v36, v37, v39, 2, _swiftEmptyArrayStorage);
    return;
  }
  v14 = static os_log_type_t.default.getter(v11);
  if (qword_1002101D0 != -1)
    swift_once(&qword_1002101D0, sub_1001686F0);
  v15 = qword_100218DD8;
  v16 = sub_1000A0980((uint64_t *)&unk_1002103C0);
  v17 = swift_allocObject(v16, 112, 7);
  *(_OWORD *)(v17 + 16) = xmmword_1001858F0;
  v18 = sub_1000A0DF4();
  v19 = v18;
  v20 = 0x206563726F46;
  if ((a2 & 1) == 0)
    v20 = 0;
  v21 = 0xE000000000000000;
  if ((a2 & 1) != 0)
    v21 = 0xE600000000000000;
  *(_QWORD *)(v17 + 56) = &type metadata for String;
  *(_QWORD *)(v17 + 64) = v18;
  *(_QWORD *)(v17 + 32) = v20;
  *(_QWORD *)(v17 + 40) = v21;
  v22 = *(void **)(v4 + 40);
  if (v22)
  {
    v23 = objc_msgSend(v22, "date");
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v23);

    v24 = (void *)objc_opt_self(NSDateFormatter);
    isa = Date._bridgeToObjectiveC()().super.isa;
    v26 = v14;
    v27 = objc_msgSend(v24, "localizedStringFromDate:dateStyle:timeStyle:", isa, 2, 2);

    v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
    v30 = v29;

    v14 = v26;
    (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  }
  else
  {
    v28 = 0;
    v30 = 0;
  }
  v43[0] = v28;
  v43[1] = v30;
  v32 = sub_1000A0980(&qword_100211AB0);
  v33 = String.init<A>(describing:)(v43, v32);
  *(_QWORD *)(v17 + 96) = &type metadata for String;
  *(_QWORD *)(v17 + 104) = v19;
  *(_QWORD *)(v17 + 72) = v33;
  *(_QWORD *)(v17 + 80) = v34;
  os_log(_:dso:log:_:_:)(v14, &_mh_execute_header, v15, "CloudSync: %@Fetch already in-progress: %@", 42, 2, v17);
  swift_bridgeObjectRelease(v17);
}

void sub_1000F08D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  _QWORD *v11;
  void *v12;
  NSObject *v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  dispatch_group_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  char *v63;
  NSObject *v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  dispatch_group_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  _QWORD aBlock[5];
  _QWORD *v73;

  v1 = type metadata accessor for DispatchWorkItemFlags(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v56 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS(0);
  v67 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v66 = (char *)&v56 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchPredicate(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (uint64_t *)((char *)&v56 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v69 = v0;
  v12 = *(void **)(v0 + 72);
  *v11 = v12;
  (*(void (**)(_QWORD *, _QWORD, uint64_t, __n128))(v8 + 104))(v11, enum case for DispatchPredicate.notOnQueue(_:), v7, v9);
  v13 = v12;
  v14 = _dispatchPreconditionTest(_:)(v11);
  (*(void (**)(_QWORD *, uint64_t))(v8 + 8))(v11, v7);
  if ((v14 & 1) != 0)
  {
    v64 = v13;
    v65 = v5;
    v63 = v4;
    v13 = dispatch_group_create();
    LODWORD(v70) = static os_log_type_t.default.getter(v13);
    if (qword_1002101D0 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_1002101D0, sub_1001686F0);
LABEL_3:
  v68 = (dispatch_group_t)qword_100218DD8;
  v61 = sub_1000A0980((uint64_t *)&unk_1002103C0);
  v15 = swift_allocObject(v61, 72, 7);
  v62 = xmmword_100184870;
  *(_OWORD *)(v15 + 16) = xmmword_100184870;
  v16 = v69 + OBJC_IVAR____TtC15audioaccessoryd16CloudCoordinator_configuration;
  v17 = type metadata accessor for CloudCoordinatorConfiguration(0);
  v18 = *(_QWORD *)(v16 + *(int *)(v17 + 32));
  v19 = swift_bridgeObjectRetain(v18);
  v20 = Array.description.getter(v19, &type metadata for String);
  v22 = v21;
  swift_bridgeObjectRelease(v18);
  *(_QWORD *)(v15 + 56) = &type metadata for String;
  v23 = sub_1000A0DF4();
  *(_QWORD *)(v15 + 64) = v23;
  *(_QWORD *)(v15 + 32) = v20;
  *(_QWORD *)(v15 + 40) = v22;
  os_log(_:dso:log:_:_:)(v70, &_mh_execute_header, v68, "setupZones: %@", 14, 2, v15);
  swift_bridgeObjectRelease(v15);
  v24 = *(_QWORD *)(v16 + *(int *)(v17 + 32));
  v25 = *(_QWORD *)(v24 + 16);
  if (v25)
  {
    v26 = swift_bridgeObjectRetain(v24);
    v68 = v13;
    v57 = v26;
    v27 = (_QWORD *)(v26 + 40);
    v58 = xmmword_1001858F0;
    v60 = v1;
    v59 = v2;
    do
    {
      v70 = v25;
      v28 = *(v27 - 1);
      v29 = *v27;
      swift_bridgeObjectRetain(*v27);
      v30 = v68;
      dispatch_group_enter(v68);
      v32 = static os_log_type_t.default.getter(v31);
      v33 = qword_100218DD8;
      v34 = v61;
      v35 = swift_allocObject(v61, 72, 7);
      *(_OWORD *)(v35 + 16) = v62;
      *(_QWORD *)(v35 + 56) = &type metadata for String;
      *(_QWORD *)(v35 + 64) = v23;
      *(_QWORD *)(v35 + 32) = v28;
      *(_QWORD *)(v35 + 40) = v29;
      swift_bridgeObjectRetain(v29);
      os_log(_:dso:log:_:_:)(v32, &_mh_execute_header, v33, "Attempting to create zone: %@", 29, 2, v35);
      swift_bridgeObjectRelease(v35);
      v36 = (_QWORD *)swift_allocObject(&unk_1001EA300, 40, 7);
      v36[2] = v28;
      v36[3] = v29;
      v36[4] = v30;
      swift_bridgeObjectRetain(v29);
      v37 = static os_log_type_t.default.getter(v30);
      v38 = qword_100218DD8;
      v39 = swift_allocObject(v34, 112, 7);
      *(_OWORD *)(v39 + 16) = v58;
      *(_QWORD *)(v39 + 56) = &type metadata for Int;
      *(_QWORD *)(v39 + 64) = &protocol witness table for Int;
      *(_QWORD *)(v39 + 32) = 0;
      *(_QWORD *)(v39 + 96) = &type metadata for String;
      *(_QWORD *)(v39 + 104) = v23;
      *(_QWORD *)(v39 + 72) = v28;
      *(_QWORD *)(v39 + 80) = v29;
      swift_bridgeObjectRetain(v29);
      os_log(_:dso:log:_:_:)(v37, &_mh_execute_header, v38, "Setup zone (attempt: %d): %@", 28, 2, v39);
      swift_bridgeObjectRelease(v39);
      v40 = (_QWORD *)swift_allocObject(&unk_1001EA328, 64, 7);
      v40[2] = v28;
      v40[3] = v29;
      v41 = v69;
      v42 = v60;
      v40[4] = v69;
      v40[5] = sub_1001051FC;
      v40[6] = v36;
      v40[7] = 0;
      aBlock[4] = sub_1001050C4;
      v73 = v40;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_1000E6A24;
      aBlock[3] = &unk_1001EA340;
      v43 = _Block_copy(aBlock);
      swift_bridgeObjectRetain(v29);
      swift_retain(v41);
      v44 = swift_retain(v36);
      v45 = v66;
      static DispatchQoS.unspecified.getter(v44);
      v71 = _swiftEmptyArrayStorage;
      v46 = sub_1000A0940((unint64_t *)&qword_100211920, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v47 = sub_1000A0980(&qword_100211D00);
      v48 = sub_1000AAD14((unint64_t *)&qword_100211930, &qword_100211D00, (uint64_t)&protocol conformance descriptor for [A]);
      v49 = v63;
      v50 = v46;
      v51 = v59;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v71, v47, v48, v42, v50);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0, v45, v49, v43);
      _Block_release(v43);
      (*(void (**)(char *, uint64_t))(v51 + 8))(v49, v42);
      (*(void (**)(char *, uint64_t))(v67 + 8))(v45, v65);
      v52 = v73;
      swift_bridgeObjectRelease(v29);
      swift_release(v36);
      v53 = v52;
      v54 = v70;
      swift_release(v53);
      v27 += 2;
      v25 = v54 - 1;
    }
    while (v25);
    v24 = swift_bridgeObjectRelease(v57);
    v13 = v68;
  }
  v55 = static os_log_type_t.default.getter(v24);
  os_log(_:dso:log:_:_:)(v55, &_mh_execute_header, qword_100218DD8, "Waiting for all zone create tasks to complete.", 46, 2, _swiftEmptyArrayStorage);
  OS_dispatch_group.wait()();

}

void sub_1000F0E9C(uint64_t a1, uint64_t a2, uint64_t a3, NSObject *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  if (a1)
  {
    v6 = swift_errorRetain(a1);
    v7 = static os_log_type_t.error.getter(v6);
    if (qword_1002101D0 != -1)
      swift_once(&qword_1002101D0, sub_1001686F0);
    v8 = qword_100218DD8;
    v9 = sub_1000A0980((uint64_t *)&unk_1002103C0);
    v10 = swift_allocObject(v9, 72, 7);
    *(_OWORD *)(v10 + 16) = xmmword_100184870;
    v21 = a1;
    swift_errorRetain(a1);
    v11 = sub_1000A0980(&qword_100210710);
    v12 = String.init<A>(describing:)(&v21, v11);
    v14 = v13;
    *(_QWORD *)(v10 + 56) = &type metadata for String;
    *(_QWORD *)(v10 + 64) = sub_1000A0DF4();
    *(_QWORD *)(v10 + 32) = v12;
    *(_QWORD *)(v10 + 40) = v14;
    os_log(_:dso:log:_:_:)(v7, &_mh_execute_header, v8, "Error creating zone: %@", 23, 2, v10);
    swift_bridgeObjectRelease(v10);
    swift_errorRelease(a1);
  }
  else
  {
    v17 = static os_log_type_t.default.getter(0);
    if (qword_1002101D0 != -1)
      swift_once(&qword_1002101D0, sub_1001686F0);
    v18 = qword_100218DD8;
    v19 = sub_1000A0980((uint64_t *)&unk_1002103C0);
    v20 = swift_allocObject(v19, 72, 7);
    *(_OWORD *)(v20 + 16) = xmmword_100184870;
    *(_QWORD *)(v20 + 56) = &type metadata for String;
    *(_QWORD *)(v20 + 64) = sub_1000A0DF4();
    *(_QWORD *)(v20 + 32) = a2;
    *(_QWORD *)(v20 + 40) = a3;
    swift_bridgeObjectRetain(a3);
    os_log(_:dso:log:_:_:)(v17, &_mh_execute_header, v18, "Completed Zone Setup: %@", 24, 2, v20);
    swift_bridgeObjectRelease(v20);
  }
  dispatch_group_leave(a4);
}

uint64_t sub_1000F1084(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void), uint64_t a5)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  void (*v21)(void);
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD v32[2];
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(void);
  uint64_t v37;
  _QWORD *v38;
  _QWORD aBlock[5];
  _QWORD *v40;

  v36 = a4;
  v37 = a5;
  v9 = type metadata accessor for DispatchWorkItemFlags(0);
  v35 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v11 = (char *)v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DispatchQoS(0);
  v33 = *(_QWORD *)(v12 - 8);
  v34 = v12;
  v13 = __chkstk_darwin(v12);
  v15 = (char *)v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = static os_log_type_t.default.getter(v13);
  if (qword_1002101D0 != -1)
    swift_once(&qword_1002101D0, sub_1001686F0);
  v17 = qword_100218DD8;
  v18 = sub_1000A0980((uint64_t *)&unk_1002103C0);
  v19 = swift_allocObject(v18, 112, 7);
  *(_OWORD *)(v19 + 16) = xmmword_1001858F0;
  *(_QWORD *)(v19 + 56) = &type metadata for Int;
  *(_QWORD *)(v19 + 64) = &protocol witness table for Int;
  *(_QWORD *)(v19 + 32) = a3;
  *(_QWORD *)(v19 + 96) = &type metadata for String;
  *(_QWORD *)(v19 + 104) = sub_1000A0DF4();
  *(_QWORD *)(v19 + 72) = a1;
  *(_QWORD *)(v19 + 80) = a2;
  swift_bridgeObjectRetain(a2);
  os_log(_:dso:log:_:_:)(v16, &_mh_execute_header, v17, "Setup zone (attempt: %d): %@", 28, 2, v19);
  swift_bridgeObjectRelease(v19);
  if (a3 > 2)
  {
    v29 = sub_100102DDC();
    v30 = swift_allocError(&type metadata for CloudCoordinator.CloudCoordinatorError, v29, 0, 0);
    *v31 = 3;
    v36();
    return swift_errorRelease(v30);
  }
  else
  {
    v32[1] = *(_QWORD *)(v5 + 72);
    v20 = (_QWORD *)swift_allocObject(&unk_1001EA1C0, 64, 7);
    v20[2] = a1;
    v20[3] = a2;
    v21 = v36;
    v22 = v37;
    v20[4] = v5;
    v20[5] = v21;
    v20[6] = v22;
    v20[7] = a3;
    aBlock[4] = sub_1001050C4;
    v40 = v20;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1000E6A24;
    aBlock[3] = &unk_1001EA1D8;
    v23 = _Block_copy(aBlock);
    swift_bridgeObjectRetain(a2);
    swift_retain(v5);
    v24 = swift_retain(v22);
    static DispatchQoS.unspecified.getter(v24);
    v38 = _swiftEmptyArrayStorage;
    v25 = sub_1000A0940((unint64_t *)&qword_100211920, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v26 = sub_1000A0980(&qword_100211D00);
    v27 = sub_1000AAD14((unint64_t *)&qword_100211930, &qword_100211D00, (uint64_t)&protocol conformance descriptor for [A]);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v38, v26, v27, v9, v25);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v15, v11, v23);
    _Block_release(v23);
    (*(void (**)(char *, uint64_t))(v35 + 8))(v11, v9);
    (*(void (**)(char *, uint64_t))(v33 + 8))(v15, v34);
    return swift_release(v40);
  }
}

void sub_1000F13C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  id v12;
  NSString v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  _QWORD *v18;
  uint64_t v19;
  objc_class *v20;
  id v21;
  _QWORD *v22;
  id v23;
  id v24;
  void *v25;
  id v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[5];
  uint64_t v32;
  Swift::OpaquePointer_optional v33;

  v12 = objc_allocWithZone((Class)CKRecordZone);
  swift_bridgeObjectRetain(a2);
  v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  v14 = objc_msgSend(v12, "initWithZoneName:", v13);

  sub_1000AB31C(0, &qword_100211A90, CKModifyRecordZonesOperation_ptr);
  v15 = sub_1000A0980(&qword_100211998);
  v16 = swift_allocObject(v15, 40, 7);
  *(_OWORD *)(v16 + 16) = xmmword_100187640;
  *(_QWORD *)(v16 + 32) = v14;
  v32 = v16;
  specialized Array._endMutation()(v16);
  v17 = v14;
  v18 = _swiftEmptyArrayStorage;
  v19 = v32;
  v20 = CKModifyRecordZonesOperation.init(recordZonesToSave:recordZoneIDsToDelete:)(*(Swift::OpaquePointer_optional *)(&v18 - 1), v33).super.super.super.super.isa;
  v21 = sub_1000E7F54();
  -[objc_class setGroup:](v20, "setGroup:", v21);

  v22 = (_QWORD *)swift_allocObject(&unk_1001EA210, 72, 7);
  v22[2] = v17;
  v22[3] = a4;
  v22[4] = a5;
  v22[5] = a3;
  v22[6] = a1;
  v22[7] = a2;
  v22[8] = a6;
  swift_bridgeObjectRetain(a2);
  v23 = v17;
  swift_retain(a5);
  swift_retain(a3);
  CKModifyRecordZonesOperation.modifyRecordZonesResultBlock.setter(sub_100105104, v22);
  if (qos_class_self() >= QOS_CLASS_USER_INITIATED)
    -[objc_class setQualityOfService:](v20, "setQualityOfService:", 25);
  v24 = -[objc_class configuration](v20, "configuration");
  if (v24)
  {
    v25 = v24;
    objc_msgSend(v24, "setAutomaticallyRetryNetworkFailures:", 0);

    v26 = -[objc_class configuration](v20, "configuration");
    if (v26)
    {
      v27 = v26;
      objc_msgSend(v26, "setDiscretionaryNetworkBehavior:", 0);

      v28 = swift_allocObject(&unk_1001E9568, 24, 7);
      v29 = swift_weakInit(v28 + 16, a3);
      __chkstk_darwin(v29);
      v31[2] = v28;
      v31[3] = v20;
      v30 = sub_1000A0980((uint64_t *)&unk_100211940);
      OS_dispatch_queue.sync<A>(execute:)(&v32, sub_100105EF4, v31, v30);
      swift_release(v28);

      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64_t sub_1000F1674(uint64_t a1, char a2, void *a3, uint64_t (*a4)(_QWORD), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  _QWORD aBlock[5];
  uint64_t v39;

  if ((a2 & 1) != 0)
  {
    v22 = swift_errorRetain(a1);
    v23 = static os_log_type_t.error.getter(v22);
    if (qword_1002101D0 != -1)
      swift_once(&qword_1002101D0, sub_1001686F0);
    v24 = qword_100218DD8;
    v25 = sub_1000A0980((uint64_t *)&unk_1002103C0);
    v26 = swift_allocObject(v25, 72, 7);
    *(_OWORD *)(v26 + 16) = xmmword_100184870;
    aBlock[0] = a1;
    swift_errorRetain(a1);
    v27 = sub_1000A0980(&qword_100210710);
    v28 = String.init<A>(describing:)(aBlock, v27);
    v30 = v29;
    *(_QWORD *)(v26 + 56) = &type metadata for String;
    *(_QWORD *)(v26 + 64) = sub_1000A0DF4();
    *(_QWORD *)(v26 + 32) = v28;
    *(_QWORD *)(v26 + 40) = v30;
    os_log(_:dso:log:_:_:)(v23, &_mh_execute_header, v24, "Error creating zone: %@", 23, 2, v26);
    swift_bridgeObjectRelease(v26);
    v31 = (_QWORD *)swift_allocObject(&unk_1001EA238, 64, 7);
    v31[2] = a4;
    v31[3] = a5;
    v31[4] = a6;
    v31[5] = a7;
    v31[6] = a8;
    v31[7] = a9;
    swift_retain(a5);
    swift_retain(a6);
    v32 = swift_bridgeObjectRetain(a8);
    v33 = sub_1000E7CF8(v32);
    v34 = swift_allocObject(&unk_1001EA260, 32, 7);
    *(_QWORD *)(v34 + 16) = sub_100105150;
    *(_QWORD *)(v34 + 24) = v31;
    aBlock[4] = sub_100105F08;
    v39 = v34;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1000F713C;
    aBlock[3] = &unk_1001EA278;
    v35 = _Block_copy(aBlock);
    v36 = v39;
    swift_retain(v31);
    swift_release(v36);
    objc_msgSend(v33, "accountInfoWithCompletionHandler:", v35);
    _Block_release(v35);
    swift_release(v31);

    return sub_100104C94(a1, 1);
  }
  else
  {
    v12 = static os_log_type_t.default.getter(a1);
    if (qword_1002101D0 != -1)
      swift_once(&qword_1002101D0, sub_1001686F0);
    v13 = qword_100218DD8;
    v14 = sub_1000A0980((uint64_t *)&unk_1002103C0);
    v15 = swift_allocObject(v14, 72, 7);
    *(_OWORD *)(v15 + 16) = xmmword_100184870;
    *(_QWORD *)(v15 + 56) = sub_1000AB31C(0, &qword_100211A98, CKRecordZone_ptr);
    *(_QWORD *)(v15 + 64) = sub_100104B2C(&qword_100211AA8, &qword_100211A98, CKRecordZone_ptr, (uint64_t)&protocol conformance descriptor for NSObject);
    *(_QWORD *)(v15 + 32) = a3;
    v16 = a3;
    os_log(_:dso:log:_:_:)(v12, &_mh_execute_header, v13, "Created Zone: %@", 16, 2, v15);
    swift_bridgeObjectRelease(v15);
    return a4(0);
  }
}

void sub_1000F199C(void *a1, char a2, void (*a3)(void), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  __n128 v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  id v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(char *, uint64_t);
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  unint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void (*v76)(void);
  uint64_t v77;
  _QWORD *v78;
  _QWORD aBlock[5];
  _QWORD *v80;

  v67 = a6;
  v68 = a8;
  v69 = a5;
  v70 = a7;
  v76 = a3;
  v77 = a4;
  v10 = type metadata accessor for DispatchWorkItemFlags(0);
  v74 = *(_QWORD *)(v10 - 8);
  v75 = v10;
  __chkstk_darwin(v10);
  v12 = (char *)&v66 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for DispatchQoS(0);
  v72 = *(_QWORD *)(v13 - 8);
  v73 = v13;
  v14 = __chkstk_darwin(v13);
  v16 = (char *)&v66 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v71 = type metadata accessor for DispatchTime(0, v14);
  v17 = *(_QWORD *)(v71 - 8);
  __chkstk_darwin(v71);
  v19 = (char *)&v66 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __chkstk_darwin(v20);
  v23 = (char *)&v66 - v22;
  v24 = type metadata accessor for DispatchQoS.QoSClass(0, v21);
  v25 = *(_QWORD *)(v24 - 8);
  __chkstk_darwin(v24);
  v27 = (char *)&v66 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a2 & 1) != 0)
  {
    v33 = swift_errorRetain(a1);
    v34 = static os_log_type_t.error.getter(v33);
    if (qword_1002101D0 != -1)
      swift_once(&qword_1002101D0, sub_1001686F0);
    v35 = qword_100218DD8;
    v36 = sub_1000A0980((uint64_t *)&unk_1002103C0);
    v37 = swift_allocObject(v36, 72, 7);
    *(_OWORD *)(v37 + 16) = xmmword_100184870;
    aBlock[0] = a1;
    swift_errorRetain(a1);
    v38 = sub_1000A0980(&qword_100210710);
    v39 = String.init<A>(describing:)(aBlock, v38);
    v41 = v40;
    *(_QWORD *)(v37 + 56) = &type metadata for String;
    *(_QWORD *)(v37 + 64) = sub_1000A0DF4();
    *(_QWORD *)(v37 + 32) = v39;
    *(_QWORD *)(v37 + 40) = v41;
    os_log(_:dso:log:_:_:)(v34, &_mh_execute_header, v35, "Unable to get account info - %@", 31, 2, v37);
    swift_bridgeObjectRelease(v37);
    swift_errorRetain(a1);
    ((void (*)(void *))v76)(a1);
    sub_100104E50(a1, 1);
    sub_100104E50(a1, 1);
  }
  else
  {
    v28 = a1;
    if (objc_msgSend(v28, "accountStatus") == (id)3)
    {
      v29 = static os_log_type_t.error.getter(3);
      if (qword_1002101D0 != -1)
        swift_once(&qword_1002101D0, sub_1001686F0);
      os_log(_:dso:log:_:_:)(v29, &_mh_execute_header, qword_100218DD8, "No account found, move on finish setup", 38, 2, _swiftEmptyArrayStorage);
      v30 = sub_100102DDC();
      v31 = swift_allocError(&type metadata for CloudCoordinator.CloudCoordinatorError, v30, 0, 0);
      *v32 = 1;
LABEL_16:
      v76();
      sub_100104E50(a1, 0);
      swift_errorRelease(v31);
      return;
    }
    v42 = objc_msgSend(v28, "supportsDeviceToDeviceEncryption");
    v43 = (int)v42;
    v44 = static os_log_type_t.error.getter(v42);
    if (!v43)
    {
      if (qword_1002101D0 != -1)
      {
        v65 = v44;
        swift_once(&qword_1002101D0, sub_1001686F0);
        v44 = v65;
      }
      os_log(_:dso:log:_:_:)(v44, &_mh_execute_header, qword_100218DD8, "Error creating Zone. Try again when Manatee is Available", 56, 2, _swiftEmptyArrayStorage);
      v62 = sub_100102DDC();
      v31 = swift_allocError(&type metadata for CloudCoordinator.CloudCoordinatorError, v62, 0, 0);
      *v63 = 2;
      goto LABEL_16;
    }
    if (qword_1002101D0 != -1)
    {
      v64 = v44;
      swift_once(&qword_1002101D0, sub_1001686F0);
      v44 = v64;
    }
    os_log(_:dso:log:_:_:)(v44, &_mh_execute_header, qword_100218DD8, "Failure creating Zone. retrying...", 34, 2, _swiftEmptyArrayStorage);
    sub_1000AB31C(0, (unint64_t *)&qword_1002119F0, OS_dispatch_queue_ptr);
    (*(void (**)(char *, _QWORD, uint64_t))(v25 + 104))(v27, enum case for DispatchQoS.QoSClass.default(_:), v24);
    v66 = static OS_dispatch_queue.global(qos:)(v27);
    v45 = (*(uint64_t (**)(char *, uint64_t))(v25 + 8))(v27, v24);
    static DispatchTime.now()(v45);
    + infix(_:_:)(v19, 30.0);
    v46 = *(void (**)(char *, uint64_t))(v17 + 8);
    v47 = v71;
    v46(v19, v71);
    v48 = (_QWORD *)swift_allocObject(&unk_1001EA2B0, 64, 7);
    v50 = v69;
    v49 = v70;
    v51 = v67;
    v48[2] = v69;
    v48[3] = v51;
    v52 = v68;
    v48[4] = v49;
    v48[5] = v52;
    v53 = v77;
    v48[6] = v76;
    v48[7] = v53;
    aBlock[4] = sub_100105198;
    v80 = v48;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1000E6A24;
    aBlock[3] = &unk_1001EA2C8;
    v54 = _Block_copy(aBlock);
    swift_retain(v50);
    swift_bridgeObjectRetain(v49);
    v55 = swift_retain(v53);
    static DispatchQoS.unspecified.getter(v55);
    v78 = _swiftEmptyArrayStorage;
    v56 = sub_1000A0940((unint64_t *)&qword_100211920, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v57 = sub_1000A0980(&qword_100211D00);
    v58 = sub_1000AAD14((unint64_t *)&qword_100211930, &qword_100211D00, (uint64_t)&protocol conformance descriptor for [A]);
    v59 = v57;
    v60 = v75;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v78, v59, v58, v75, v56);
    v61 = (void *)v66;
    OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v23, v16, v12, v54);
    sub_100104E50(a1, 0);
    _Block_release(v54);

    (*(void (**)(char *, uint64_t))(v74 + 8))(v12, v60);
    (*(void (**)(char *, uint64_t))(v72 + 8))(v16, v73);
    v46(v23, v47);
    swift_release(v80);
  }
}

uint64_t sub_1000F1FC4()
{
  uint64_t v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t inited;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v1 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  v2 = static os_log_type_t.default.getter(v1);
  if (qword_1002101D0 != -1)
    swift_once(&qword_1002101D0, sub_1001686F0);
  v3 = qword_100218DD8;
  os_log(_:dso:log:_:_:)(v2, &_mh_execute_header, qword_100218DD8, "Add listener for CKAccountChanged", 33, 2, _swiftEmptyArrayStorage);
  objc_msgSend(v1, "addObserver:selector:name:object:", v0, "accountDidChange:", CKAccountChangedNotification, 0);
  v4 = static os_log_type_t.default.getter(objc_msgSend(v1, "addObserver:selector:name:object:", v0, "onIdentityUpdateNotification", CKIdentityUpdateNotification, 0));
  os_log(_:dso:log:_:_:)(v4, &_mh_execute_header, v3, "Add listener for CKIdentityUpdateNotification", 45, 2, _swiftEmptyArrayStorage);
  v5 = swift_allocObject(&unk_1001E9568, 24, 7);
  swift_weakInit(v5 + 16, v0);
  v6 = sub_1000A0980(&qword_100211AA0);
  inited = swift_initStackObject(v6, &v13);
  *(_OWORD *)(inited + 16) = xmmword_100184870;
  v8 = swift_allocObject(&unk_1001EA170, 32, 7);
  *(_QWORD *)(v8 + 16) = sub_10010509C;
  *(_QWORD *)(v8 + 24) = v5;
  *(_QWORD *)(inited + 32) = 0xD00000000000001CLL;
  *(_QWORD *)(inited + 40) = 0x80000001001AF510;
  *(_QWORD *)(inited + 48) = sub_1000FED10;
  *(_QWORD *)(inited + 56) = v8;
  swift_retain(v5);
  v9 = (_QWORD *)sub_1000A53BC(inited);
  v10 = _s15audioaccessoryd24DarwinNotificationHelperC20notificationHandlersACSgSDySSyycG_tcfC_0(v9);

  swift_release(v5);
  v11 = *(_QWORD *)(v0 + OBJC_IVAR____TtC15audioaccessoryd16CloudCoordinator_identityUpdateNotificationListener);
  *(_QWORD *)(v0 + OBJC_IVAR____TtC15audioaccessoryd16CloudCoordinator_identityUpdateNotificationListener) = v10;
  return swift_release(v11);
}

uint64_t sub_1000F21C4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  const void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD aBlock[5];
  uint64_t v31;
  char v32[24];

  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = a1 + 16;
  v12 = static os_log_type_t.default.getter(v11);
  if (qword_1002101D0 != -1)
    swift_once(&qword_1002101D0, sub_1001686F0);
  os_log(_:dso:log:_:_:)(v12, &_mh_execute_header, qword_100218DD8, "Darwin CKIdentityUpdateNotification", 35, 2, _swiftEmptyArrayStorage);
  swift_beginAccess(v10, v32, 0, 0);
  result = swift_weakLoadStrong(v10);
  if (result)
  {
    v14 = result;
    v28 = *(_QWORD *)(result + 72);
    v15 = swift_allocObject(&unk_1001E9568, 24, 7);
    swift_weakInit(v15 + 16, v14);
    aBlock[4] = sub_1001050A4;
    v31 = v15;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1000E6A24;
    aBlock[3] = &unk_1001EA188;
    v16 = _Block_copy(aBlock);
    v27 = v7;
    v17 = v16;
    v18 = swift_retain(v15);
    static DispatchQoS.unspecified.getter(v18);
    v29 = _swiftEmptyArrayStorage;
    v19 = sub_1000A0940((unint64_t *)&qword_100211920, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v20 = sub_1000A0980(&qword_100211D00);
    v26 = v6;
    v21 = v3;
    v22 = v20;
    v23 = sub_1000AAD14((unint64_t *)&qword_100211930, &qword_100211D00, (uint64_t)&protocol conformance descriptor for [A]);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v29, v22, v23, v2, v19);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v9, v5, v17);
    _Block_release(v17);
    (*(void (**)(char *, uint64_t))(v21 + 8))(v5, v2);
    (*(void (**)(char *, uint64_t))(v27 + 8))(v9, v26);
    swift_release(v14);
    v24 = v31;
    swift_release(v15);
    return swift_release(v24);
  }
  return result;
}

uint64_t sub_1000F245C(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v10[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v10, 0, 0);
  result = swift_weakLoadStrong(v1);
  if (result)
  {
    v3 = result;
    v4 = static os_log_type_t.default.getter(result);
    if (qword_1002101D0 != -1)
      swift_once(&qword_1002101D0, sub_1001686F0);
    v5 = qword_100218DD8;
    v6 = sub_1000A0980((uint64_t *)&unk_1002103C0);
    v7 = swift_allocObject(v6, 72, 7);
    *(_OWORD *)(v7 + 16) = xmmword_100184870;
    *(_QWORD *)(v7 + 56) = &type metadata for String;
    *(_QWORD *)(v7 + 64) = sub_1000A0DF4();
    *(_QWORD *)(v7 + 32) = 0xD00000000000001ELL;
    *(_QWORD *)(v7 + 40) = 0x80000001001AF470;
    os_log(_:dso:log:_:_:)(v4, &_mh_execute_header, v5, "%@", 2, 2, v7);
    v8 = swift_bridgeObjectRelease(v7);
    if (*(_BYTE *)(v3 + 104) == 1)
    {
      v9 = static os_log_type_t.default.getter(v8);
      os_log(_:dso:log:_:_:)(v9, &_mh_execute_header, qword_100218DD8, "Manatee already available", 25, 2, _swiftEmptyArrayStorage);
    }
    else
    {
      sub_1000F7140(150.0);
    }
    return swift_release(v3);
  }
  return result;
}

uint64_t sub_1000F25C8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = static os_log_type_t.default.getter(a1);
  if (qword_1002101D0 != -1)
    swift_once(&qword_1002101D0, sub_1001686F0);
  v3 = qword_100218DD8;
  v4 = sub_1000A0980((uint64_t *)&unk_1002103C0);
  v5 = swift_allocObject(v4, 72, 7);
  *(_OWORD *)(v5 + 16) = xmmword_100184870;
  *(_QWORD *)(v5 + 56) = &type metadata for String;
  *(_QWORD *)(v5 + 64) = sub_1000A0DF4();
  *(_QWORD *)(v5 + 32) = 0xD00000000000001ELL;
  *(_QWORD *)(v5 + 40) = 0x80000001001AF470;
  os_log(_:dso:log:_:_:)(v2, &_mh_execute_header, v3, "%@", 2, 2, v5);
  v6 = swift_bridgeObjectRelease(v5);
  if ((*(_BYTE *)(v1 + 104) & 1) == 0)
    return sub_1000F7140(150.0);
  v7 = static os_log_type_t.default.getter(v6);
  return os_log(_:dso:log:_:_:)(v7, &_mh_execute_header, qword_100218DD8, "Manatee already available", 25, 2, _swiftEmptyArrayStorage);
}

uint64_t sub_1000F2728(uint64_t a1, NSObject *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  _QWORD *v15;
  void *v16;
  NSObject *v17;
  _QWORD *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v27[2];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD aBlock[5];
  _QWORD *v33;

  v5 = type metadata accessor for DispatchWorkItemFlags(0);
  v30 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v7 = (char *)v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v28 = *(_QWORD *)(v8 - 8);
  v29 = v8;
  __chkstk_darwin(v8);
  v10 = (char *)v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchPredicate(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v15 = (_QWORD *)((char *)v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v16 = *(void **)(v2 + 72);
  *v15 = v16;
  (*(void (**)(_QWORD *, _QWORD, uint64_t, __n128))(v12 + 104))(v15, enum case for DispatchPredicate.notOnQueue(_:), v11, v13);
  v27[1] = v16;
  LOBYTE(v16) = _dispatchPreconditionTest(_:)(v15);
  (*(void (**)(_QWORD *, uint64_t))(v12 + 8))(v15, v11);
  if ((v16 & 1) == 0)
  {
    __break(1u);
    goto LABEL_5;
  }
  v11 = swift_allocObject(&unk_1001EA0A8, 17, 7);
  *(_BYTE *)(v11 + 16) = 1;
  v15 = (_QWORD *)(v11 + 16);
  v17 = dispatch_group_create();
  dispatch_group_enter(v17);
  v18 = (_QWORD *)swift_allocObject(&unk_1001EA0D0, 56, 7);
  v18[2] = a1;
  v18[3] = a2;
  v18[4] = v11;
  v18[5] = v17;
  v18[6] = v2;
  aBlock[4] = sub_100105050;
  v33 = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000E6A24;
  aBlock[3] = &unk_1001EA0E8;
  v19 = _Block_copy(aBlock);
  swift_bridgeObjectRetain(a2);
  swift_retain(v11);
  a2 = v17;
  v20 = swift_retain(v2);
  static DispatchQoS.unspecified.getter(v20);
  v31 = _swiftEmptyArrayStorage;
  v21 = sub_1000A0940((unint64_t *)&qword_100211920, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v22 = sub_1000A0980(&qword_100211D00);
  v23 = sub_1000AAD14((unint64_t *)&qword_100211930, &qword_100211D00, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v31, v22, v23, v5, v21);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v10, v7, v19);
  _Block_release(v19);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v7, v5);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v10, v29);
  v24 = swift_release(v33);
  v5 = static os_log_type_t.default.getter(v24);
  if (qword_1002101D0 != -1)
LABEL_5:
    swift_once(&qword_1002101D0, sub_1001686F0);
  os_log(_:dso:log:_:_:)(v5, &_mh_execute_header, qword_100218DD8, "Waiting for all zone delete tasks to complete.", 46, 2, _swiftEmptyArrayStorage);
  OS_dispatch_group.wait()();

  swift_beginAccess(v15, aBlock, 0, 0);
  v25 = *(unsigned __int8 *)(v11 + 16);
  swift_release(v11);
  return v25;
}

void sub_1000F2A7C(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  uint64_t v8;
  void *v9;
  void *v10;
  Swift::String v11;
  Swift::String v12;
  Class isa;
  uint64_t v14;
  uint64_t v15;
  objc_class *v16;
  CKModifyRecordZonesOperation v17;
  _QWORD *v18;
  void *v19;
  _QWORD *v20;
  id v21;
  id v22;
  void *v23;
  id v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  id v33;
  _QWORD v34[5];
  _QWORD *v35;
  Swift::OpaquePointer_optional v36;
  Swift::OpaquePointer_optional v37;

  sub_1000AB31C(0, (unint64_t *)&unk_100210850, CKRecordZoneID_ptr);
  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(CKCurrentUserDefaultName);
  v10 = v9;
  swift_bridgeObjectRetain(a2);
  v11._countAndFlagsBits = a1;
  v11._object = a2;
  v12._countAndFlagsBits = v8;
  v12._object = v10;
  isa = CKRecordZoneID.init(zoneName:ownerName:)(v11, v12).super.isa;
  sub_1000AB31C(0, &qword_100211A90, CKModifyRecordZonesOperation_ptr);
  v14 = sub_1000A0980(&qword_100211998);
  v15 = swift_allocObject(v14, 40, 7);
  *(_OWORD *)(v15 + 16) = xmmword_100187640;
  *(_QWORD *)(v15 + 32) = isa;
  LOBYTE(v34[0]) = v15;
  specialized Array._endMutation()(v15);
  v16 = isa;
  v36.value._rawValue = _swiftEmptyArrayStorage;
  v36.is_nil = v34[0];
  v17.super.super.super.super.isa = CKModifyRecordZonesOperation.init(recordZonesToSave:recordZoneIDsToDelete:)(v36, v37).super.super.super.super.isa;
  v18 = (_QWORD *)swift_allocObject(&unk_1001EA120, 48, 7);
  v18[2] = a3;
  v18[3] = a1;
  v18[4] = a2;
  v18[5] = a4;
  v34[4] = sub_100105090;
  v35 = v18;
  v34[0] = _NSConcreteStackBlock;
  v34[1] = 1107296256;
  v34[2] = sub_1000F2FC0;
  v34[3] = &unk_1001EA138;
  v19 = _Block_copy(v34);
  v20 = v35;
  swift_bridgeObjectRetain(a2);
  swift_retain(a3);
  v21 = a4;
  swift_release(v20);
  -[objc_class setModifyRecordZonesCompletionBlock:](v17.super.super.super.super.isa, "setModifyRecordZonesCompletionBlock:", v19);
  _Block_release(v19);
  if (qos_class_self() >= QOS_CLASS_USER_INITIATED)
    -[objc_class setQualityOfService:](v17.super.super.super.super.isa, "setQualityOfService:", 25);
  v22 = -[objc_class configuration](v17.super.super.super.super.isa, "configuration");
  if (!v22)
  {
    __break(1u);
    goto LABEL_9;
  }
  v23 = v22;
  objc_msgSend(v22, "setAutomaticallyRetryNetworkFailures:", 0);

  v24 = -[objc_class configuration](v17.super.super.super.super.isa, "configuration");
  if (!v24)
  {
LABEL_9:
    __break(1u);
    return;
  }
  v25 = v24;
  objc_msgSend(v24, "setDiscretionaryNetworkBehavior:", 0);

  v27 = static os_log_type_t.default.getter(v26);
  if (qword_1002101D0 != -1)
    swift_once(&qword_1002101D0, sub_1001686F0);
  v28 = qword_100218DD8;
  v29 = sub_1000A0980((uint64_t *)&unk_1002103C0);
  v30 = swift_allocObject(v29, 72, 7);
  *(_OWORD *)(v30 + 16) = xmmword_100184870;
  *(_QWORD *)(v30 + 56) = &type metadata for String;
  *(_QWORD *)(v30 + 64) = sub_1000A0DF4();
  *(_QWORD *)(v30 + 32) = a1;
  *(_QWORD *)(v30 + 40) = a2;
  swift_bridgeObjectRetain(a2);
  os_log(_:dso:log:_:_:)(v27, &_mh_execute_header, v28, "Queuing operation to deleting zone: %@", 38, 2, v30);
  v31 = swift_bridgeObjectRelease(v30);
  v32 = sub_1000E7CF8(v31);
  v33 = objc_msgSend(v32, "privateCloudDatabase");

  objc_msgSend(v33, "addOperation:", v17.super.super.super.super.isa);
}

void sub_1000F2DB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, NSObject *a7)
{
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[3];

  if (a3)
  {
    v9 = (_BYTE *)(a4 + 16);
    v10 = swift_errorRetain(a3);
    v11 = static os_log_type_t.error.getter(v10);
    if (qword_1002101D0 != -1)
      swift_once(&qword_1002101D0, sub_1001686F0);
    v12 = qword_100218DD8;
    v13 = sub_1000A0980((uint64_t *)&unk_1002103C0);
    v14 = swift_allocObject(v13, 72, 7);
    *(_OWORD *)(v14 + 16) = xmmword_100184870;
    v25[0] = a3;
    swift_errorRetain(a3);
    v15 = sub_1000A0980(&qword_100210710);
    v16 = String.init<A>(describing:)(v25, v15);
    v18 = v17;
    *(_QWORD *)(v14 + 56) = &type metadata for String;
    *(_QWORD *)(v14 + 64) = sub_1000A0DF4();
    *(_QWORD *)(v14 + 32) = v16;
    *(_QWORD *)(v14 + 40) = v18;
    os_log(_:dso:log:_:_:)(v11, &_mh_execute_header, v12, "Error deleting zone: %@", 23, 2, v14);
    swift_errorRelease(a3);
    swift_bridgeObjectRelease(v14);
    swift_beginAccess(v9, v25, 1, 0);
    *v9 = 0;
  }
  else
  {
    v21 = static os_log_type_t.default.getter(a1);
    if (qword_1002101D0 != -1)
      swift_once(&qword_1002101D0, sub_1001686F0);
    v22 = qword_100218DD8;
    v23 = sub_1000A0980((uint64_t *)&unk_1002103C0);
    v24 = swift_allocObject(v23, 72, 7);
    *(_OWORD *)(v24 + 16) = xmmword_100184870;
    *(_QWORD *)(v24 + 56) = &type metadata for String;
    *(_QWORD *)(v24 + 64) = sub_1000A0DF4();
    *(_QWORD *)(v24 + 32) = a5;
    *(_QWORD *)(v24 + 40) = a6;
    swift_bridgeObjectRetain(a6);
    os_log(_:dso:log:_:_:)(v21, &_mh_execute_header, v22, "Deleted Zone: %@", 16, 2, v24);
    swift_bridgeObjectRelease(v24);
  }
  dispatch_group_leave(a7);
}

